[
  {
    "owner": "unovue",
    "repo": "shadcn-vue",
    "content": "TITLE: Complete Form Example with useForm and Input Component\nDESCRIPTION: A complete example of a form implementation using the useForm composable from VeeValidate with Zod validation, showing a username input field with validation and submission handling.\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/docs/components/form.md#2025-04-23_snippet_8\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { useForm } from 'vee-validate'\nimport { toTypedSchema } from '@vee-validate/zod'\nimport * as z from 'zod'\n\nimport { Button } from '@/components/ui/button'\nimport {\n  FormControl,\n  FormDescription,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from '@/components/ui/form'\nimport { Input } from '@/components/ui/input'\n\nconst formSchema = toTypedSchema(z.object({\n  username: z.string().min(2).max(50),\n}))\n\nconst form = useForm({\n  validationSchema: formSchema,\n})\n\nconst onSubmit = form.handleSubmit((values) => {\n  console.log('Form submitted!', values)\n})\n</script>\n\n<template>\n  <form @submit=\"onSubmit\">\n    <FormField v-slot=\"{ componentField }\" name=\"username\">\n      <FormItem>\n        <FormLabel>Username</FormLabel>\n        <FormControl>\n          <Input type=\"text\" placeholder=\"shadcn\" v-bind=\"componentField\" />\n        </FormControl>\n        <FormDescription>\n          This is your public display name.\n        </FormDescription>\n        <FormMessage />\n      </FormItem>\n    </FormField>\n    <Button type=\"submit\">\n      Submit\n    </Button>\n  </form>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Dialog Component in Vue\nDESCRIPTION: Example of how to use the Dialog component in a Vue.js template, including various sub-components like DialogTrigger, DialogContent, DialogHeader, etc.\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/docs/components/dialog.md#2025-04-23_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogFooter,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from '@/components/ui/dialog'\n</script>\n\n<template>\n  <Dialog>\n    <DialogTrigger>\n      Edit Profile\n    </DialogTrigger>\n    <DialogContent>\n      <DialogHeader>\n        <DialogTitle>Edit profile</DialogTitle>\n        <DialogDescription>\n          Make changes to your profile here. Click save when you're done.\n        </DialogDescription>\n      </DialogHeader>\n\n      <DialogFooter>\n        Save changes\n      </DialogFooter>\n    </DialogContent>\n  </Dialog>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Implementing Sortable Columns\nDESCRIPTION: Implementation of sortable columns with header cell configuration and state management.\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/docs/components/data-table.md#2025-04-23_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nexport const columns: ColumnDef<Payment>[] = [\n    {\n        accessorKey: 'email',\n        header: ({ column }) => {\n            return h(Button, {\n                variant: 'ghost',\n                onClick: () => column.toggleSorting(column.getIsSorted() === 'asc'),\n            }, () => ['Email', h(ArrowUpDown, { class: 'ml-2 h-4 w-4' })])\n        },\n        cell: ({ row }) => h('div', { class: 'lowercase' }, row.getValue('email')),\n    },\n]\n```\n\n----------------------------------------\n\nTITLE: Basic Drawer Component Implementation in Vue\nDESCRIPTION: A complete example showing how to implement a drawer component in Vue with trigger, content, header, description, and footer sections. Demonstrates the basic structure and components needed for a functional drawer.\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/docs/components/drawer.md#2025-04-23_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport {\n  Drawer,\n  DrawerClose,\n  DrawerContent,\n  DrawerDescription,\n  DrawerFooter,\n  DrawerHeader,\n  DrawerTitle,\n  DrawerTrigger,\n} from '@/components/ui/drawer'\n</script>\n\n<template>\n  <Drawer>\n    <DrawerTrigger>Open</DrawerTrigger>\n    <DrawerContent>\n      <DrawerHeader>\n        <DrawerTitle>Are you absolutely sure?</DrawerTitle>\n        <DrawerDescription>This action cannot be undone.</DrawerDescription>\n      </DrawerHeader>\n      <DrawerFooter>\n        <Button>Submit</Button>\n        <DrawerClose>\n          <Button variant=\"outline\">\n            Cancel\n          </Button>\n        </DrawerClose>\n      </DrawerFooter>\n    </DrawerContent>\n  </Drawer>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Implementing Table Pagination Controls in Vue.js\nDESCRIPTION: This component adds pagination controls to a table, including page size selection and navigation buttons. It uses the TanStack Table library and custom UI components from Shadcn Vue.\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/docs/components/data-table.md#2025-04-23_snippet_22\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { type Table } from '@tanstack/vue-table'\nimport { type Task } from '../data/schema'\nimport ChevronLeftIcon from '~icons/radix-icons/chevron-left'\nimport ChevronRightIcon from '~icons/radix-icons/chevron-right'\nimport DoubleArrowLeftIcon from '~icons/radix-icons/double-arrow-left'\nimport DoubleArrowRightIcon from '~icons/radix-icons/double-arrow-right'\n\nimport { Button } from '@/components/ui/button'\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from '@/components/ui/select'\n\ninterface DataTablePaginationProps {\n  table: Table<Task>\n}\ndefineProps<DataTablePaginationProps>()\n</script>\n\n<template>\n  <div class=\"flex items-center justify-between px-2\">\n    <div class=\"flex-1 text-sm text-muted-foreground\">\n      {{ table.getFilteredSelectedRowModel().rows.length }} of\n      {{ table.getFilteredRowModel().rows.length }} row(s) selected.\n    </div>\n    <div class=\"flex items-center space-x-6 lg:space-x-8\">\n      <div class=\"flex items-center space-x-2\">\n        <p class=\"text-sm font-medium\">\n          Rows per page\n        </p>\n        <Select\n          :model-value=\"`${table.getState().pagination.pageSize}`\"\n          @update:model-value=\"table.setPageSize\"\n        >\n          <SelectTrigger class=\"h-8 w-[70px]\">\n            <SelectValue :placeholder=\"`${table.getState().pagination.pageSize}`\" />\n          </SelectTrigger>\n          <SelectContent side=\"top\">\n            <SelectItem v-for=\"pageSize in [10, 20, 30, 40, 50]\" :key=\"pageSize\" :value=\"`${pageSize}`\">\n              {{ pageSize }}\n            </SelectItem>\n          </SelectContent>\n        </Select>\n      </div>\n      <div class=\"flex w-[100px] items-center justify-center text-sm font-medium\">\n        Page {{ table.getState().pagination.pageIndex + 1 }} of\n        {{ table.getPageCount() }}\n      </div>\n      <div class=\"flex items-center space-x-2\">\n        <Button\n          variant=\"outline\"\n          class=\"hidden w-8 h-8 p-0 lg:flex\"\n          :disabled=\"!table.getCanPreviousPage()\"\n          @click=\"table.setPageIndex(0)\"\n        >\n          <span class=\"sr-only\">Go to first page</span>\n          <DoubleArrowLeftIcon class=\"w-4 h-4\" />\n        </Button>\n        <Button\n          variant=\"outline\"\n          class=\"w-8 h-8 p-0\"\n          :disabled=\"!table.getCanPreviousPage()\"\n          @click=\"table.previousPage()\"\n        >\n          <span class=\"sr-only\">Go to previous page</span>\n          <ChevronLeftIcon class=\"w-4 h-4\" />\n        </Button>\n        <Button\n          variant=\"outline\"\n          class=\"w-8 h-8 p-0\"\n          :disabled=\"!table.getCanNextPage()\"\n          @click=\"table.nextPage()\"\n        >\n          <span class=\"sr-only\">Go to next page</span>\n          <ChevronRightIcon class=\"w-4 h-4\" />\n        </Button>\n        <Button\n          variant=\"outline\"\n          class=\"hidden w-8 h-8 p-0 lg:flex\"\n          :disabled=\"!table.getCanNextPage()\"\n          @click=\"table.setPageIndex(table.getPageCount() - 1)\"\n        >\n          <span class=\"sr-only\">Go to last page</span>\n          <DoubleArrowRightIcon class=\"w-4 h-4\" />\n        </Button>\n      </div>\n    </div>\n  </div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Creating a Reusable DataTable Component in Vue\nDESCRIPTION: Vue component that renders a table using TanStack Table and shadcn-vue UI components. Accepts columns and data as props.\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/docs/components/data-table.md#2025-04-23_snippet_4\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\" generic=\"TData, TValue\">\nimport type { ColumnDef } from '@tanstack/vue-table'\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from '@/components/ui/table'\n\nimport {\n  FlexRender,\n  getCoreRowModel,\n  useVueTable,\n} from '@tanstack/vue-table'\n\nconst props = defineProps<{\n  columns: ColumnDef<TData, TValue>[]\n  data: TData[]\n}>()\n\nconst table = useVueTable({\n  get data() { return props.data },\n  get columns() { return props.columns },\n  getCoreRowModel: getCoreRowModel(),\n})\n</script>\n\n<template>\n  <div class=\"border rounded-md\">\n    <Table>\n      <TableHeader>\n        <TableRow v-for=\"headerGroup in table.getHeaderGroups()\" :key=\"headerGroup.id\">\n          <TableHead v-for=\"header in headerGroup.headers\" :key=\"header.id\">\n            <FlexRender\n              v-if=\"!header.isPlaceholder\" :render=\"header.column.columnDef.header\"\n              :props=\"header.getContext()\"\n            />\n          </TableHead>\n        </TableRow>\n      </TableHeader>\n      <TableBody>\n        <template v-if=\"table.getRowModel().rows?.length\">\n          <TableRow\n            v-for=\"row in table.getRowModel().rows\" :key=\"row.id\"\n            :data-state=\"row.getIsSelected() ? 'selected' : undefined\"\n          >\n            <TableCell v-for=\"cell in row.getVisibleCells()\" :key=\"cell.id\">\n              <FlexRender :render=\"cell.column.columnDef.cell\" :props=\"cell.getContext()\" />\n            </TableCell>\n          </TableRow>\n        </template>\n        <template v-else>\n          <TableRow>\n            <TableCell :colspan=\"columns.length\" class=\"h-24 text-center\">\n              No results.\n            </TableCell>\n          </TableRow>\n        </template>\n      </TableBody>\n    </Table>\n  </div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Creating a Sortable Column Header Component for DataTable in Vue\nDESCRIPTION: A reusable column header component that supports sorting and visibility toggling. It provides dropdown options for ascending/descending sorting and hiding columns, and is designed to be used with TanStack Table in Vue applications.\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/docs/components/data-table.md#2025-04-23_snippet_20\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport type { Column } from '@tanstack/vue-table'\nimport { type Task } from '../data/schema'\nimport ArrowDownIcon from '~icons/radix-icons/arrow-down'\nimport ArrowUpIcon from '~icons/radix-icons/arrow-up'\nimport CaretSortIcon from '~icons/radix-icons/caret-sort'\nimport EyeNoneIcon from '~icons/radix-icons/eye-none'\n\nimport { cn } from '@/lib/utils'\nimport { Button } from '@/components/ui/button'\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuSeparator,\n  DropdownMenuTrigger,\n} from '@/components/ui/dropdown-menu'\n\ninterface DataTableColumnHeaderProps {\n  column: Column<Task, any>\n  title: string\n}\n\ndefineProps<DataTableColumnHeaderProps>()\n</script>\n\n<script lang=\"ts\">\nexport default {\n  inheritAttrs: false,\n}\n</script>\n\n<template>\n  <div v-if=\"column.getCanSort()\" :class=\"cn('flex items-center space-x-2', $attrs.class ?? '')\">\n    <DropdownMenu>\n      <DropdownMenuTrigger as-child>\n        <Button\n          variant=\"ghost\"\n          size=\"sm\"\n          class=\"-ml-3 h-8 data-[state=open]:bg-accent\"\n        >\n          <span>{{ title }}</span>\n          <ArrowDownIcon v-if=\"column.getIsSorted() === 'desc'\" class=\"w-4 h-4 ml-2\" />\n          <ArrowUpIcon v-else-if=\" column.getIsSorted() === 'asc'\" class=\"w-4 h-4 ml-2\" />\n          <CaretSortIcon v-else class=\"w-4 h-4 ml-2\" />\n        </Button>\n      </DropdownMenuTrigger>\n      <DropdownMenuContent align=\"start\">\n        <DropdownMenuItem @click=\"column.toggleSorting(false)\">\n          <ArrowUpIcon class=\"mr-2 h-3.5 w-3.5 text-muted-foreground/70\" />\n          Asc\n        </DropdownMenuItem>\n        <DropdownMenuItem @click=\"column.toggleSorting(true)\">\n          <ArrowDownIcon class=\"mr-2 h-3.5 w-3.5 text-muted-foreground/70\" />\n          Desc\n        </DropdownMenuItem>\n        <DropdownMenuSeparator />\n        <DropdownMenuItem @click=\"column.toggleVisibility(false)\">\n          <EyeNoneIcon class=\"mr-2 h-3.5 w-3.5 text-muted-foreground/70\" />\n          Hide\n        </DropdownMenuItem>\n      </DropdownMenuContent>\n    </DropdownMenu>\n  </div>\n\n  <div v-else :class=\"$attrs.class\">\n    {{ title }}\n  </div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Implementing a Dark Mode Toggle Component in Vue\nDESCRIPTION: A complete Vue component that provides a dropdown menu for toggling between light, dark, and system theme preferences. It uses the useColorMode composable from @vueuse/core to manage the theme state, and includes animated icon transitions between modes.\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/docs/dark-mode/vite.md#2025-04-23_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { Button } from '@/components/ui/button'\nimport { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuTrigger } from '@/components/ui/dropdown-menu'\nimport { Icon } from '@iconify/vue'\nimport { useColorMode } from '@vueuse/core'\n\n// Pass { disableTransition: false } to enable transitions\nconst mode = useColorMode()\n</script>\n\n<template>\n  <DropdownMenu>\n    <DropdownMenuTrigger as-child>\n      <Button variant=\"outline\">\n        <Icon icon=\"radix-icons:moon\" class=\"h-[1.2rem] w-[1.2rem] rotate-0 scale-100 transition-all dark:-rotate-90 dark:scale-0\" />\n        <Icon icon=\"radix-icons:sun\" class=\"absolute h-[1.2rem] w-[1.2rem] rotate-90 scale-0 transition-all dark:rotate-0 dark:scale-100\" />\n        <span class=\"sr-only\">Toggle theme</span>\n      </Button>\n    </DropdownMenuTrigger>\n    <DropdownMenuContent align=\"end\">\n      <DropdownMenuItem @click=\"mode = 'light'\">\n        Light\n      </DropdownMenuItem>\n      <DropdownMenuItem @click=\"mode = 'dark'\">\n        Dark\n      </DropdownMenuItem>\n      <DropdownMenuItem @click=\"mode = 'auto'\">\n        System\n      </DropdownMenuItem>\n    </DropdownMenuContent>\n  </DropdownMenu>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Complete Toast Implementation Example\nDESCRIPTION: Full example showing toast implementation with a button trigger and custom notification content\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/docs/components/toast.md#2025-04-23_snippet_3\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { Button } from '@/components/ui/button'\nimport { Toaster } from '@/components/ui/toast'\nimport { useToast } from '@/components/ui/toast/use-toast'\n\nconst { toast } = useToast()\n</script>\n\n<template>\n  <Toaster />\n  <Button\n    @click=\"() => {\n      toast({\n        title: 'Scheduled: Catch up',\n        description: 'Friday, February 10, 2023 at 5:57 PM',\n      });\n    }\"\n  >\n    Add to calendar\n  </Button>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Using a shadcn-vue component in a Vue file\nDESCRIPTION: Example Vue component that imports and uses the Button component from shadcn-vue. It demonstrates the proper way to import and use shadcn-vue components in your Vue templates.\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/docs/installation/vite.md#2025-04-23_snippet_10\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { Button } from '@/components/ui/button'\n</script>\n\n<template>\n  <div>\n    <Button>Click me</Button>\n  </div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Updating DataTable Component for Row Selection in Vue.js\nDESCRIPTION: This snippet updates the DataTable component to support row selection. It adds a new reactive reference for row selection and updates the table configuration to handle row selection changes.\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/docs/components/data-table.md#2025-04-23_snippet_15\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\" generic=\"TData, TValue\">\nconst props = defineProps<{\n    columns: ColumnDef<TData, TValue>[]\n    data: TData[]\n}>()\n\nconst sorting = ref<SortingState>([])\nconst columnFilters = ref<ColumnFiltersState>([])\nconst columnVisibility = ref<VisibilityState>({})\nconst rowSelection = ref({})\n\nconst table = useVueTable({\n    get data() { return props.data },\n    get columns() { return props.columns },\n    getCoreRowModel: getCoreRowModel(),\n    getPaginationRowModel: getPaginationRowModel(),\n    getSortedRowModel: getSortedRowModel(),\n    getFilteredRowModel: getFilteredRowModel(),\n    onSortingChange: updaterOrValue => valueUpdater(updaterOrValue, sorting),\n    onColumnFiltersChange: updaterOrValue => valueUpdater(updaterOrValue, columnFilters),\n    onColumnVisibilityChange: updaterOrValue => valueUpdater(updaterOrValue, columnVisibility),\n    onRowSelectionChange: updaterOrValue => valueUpdater(updaterOrValue, rowSelection),\n    state: {\n        get sorting() { return sorting.value },\n        get columnFilters() { return columnFilters.value },\n        get columnVisibility() { return columnVisibility.value },\n        get rowSelection() { return rowSelection.value },\n    },\n})\n\n</script>\n\n<template>\n  <div>\n    <div class=\"border rounded-md\">\n        <Table />\n    </div>\n  </div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Basic Form Anatomy in Vue\nDESCRIPTION: The basic structure of a form using VeeValidate components, showing the proper nesting of Form, FormField, FormItem, FormLabel, FormControl, FormDescription, and FormMessage components.\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/docs/components/form.md#2025-04-23_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <Form>\n    <FormField>\n      <FormItem>\n        <FormLabel />\n        <FormControl>\n        <!-- any Form Input component or native input elements -->\n        </FormControl>\n        <FormDescription />\n        <FormMessage />\n      </FormItem>\n    </FormField>\n  </Form>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Implementing Column Visibility Toggle in Vue.js\nDESCRIPTION: This component creates a dropdown menu to toggle the visibility of table columns. It uses the TanStack Table library and custom UI components from Shadcn Vue.\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/docs/components/data-table.md#2025-04-23_snippet_24\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport type { Table } from '@tanstack/vue-table'\nimport { computed } from 'vue'\nimport { type Task } from '../data/schema'\nimport MixerHorizontalIcon from '~icons/radix-icons/mixer-horizontal'\n\nimport { Button } from '@/components/ui/button'\nimport {\n  DropdownMenu,\n  DropdownMenuCheckboxItem,\n  DropdownMenuContent,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuTrigger,\n} from '@/components/ui/dropdown-menu'\n\ninterface DataTableViewOptionsProps {\n  table: Table<Task>\n}\n\nconst props = defineProps<DataTableViewOptionsProps>()\n\nconst columns = computed(() => props.table.getAllColumns()\n  .filter(\n    column =>\n      typeof column.accessorFn !== 'undefined' && column.getCanHide(),\n  ))\n</script>\n\n<template>\n  <DropdownMenu>\n    <DropdownMenuTrigger as-child>\n      <Button\n        variant=\"outline\"\n        size=\"sm\"\n        class=\"hidden h-8 ml-auto lg:flex\"\n      >\n        <MixerHorizontalIcon class=\"w-4 h-4 mr-2\" />\n        View\n      </Button>\n    </DropdownMenuTrigger>\n    <DropdownMenuContent align=\"end\" class=\"w-[150px]\">\n      <DropdownMenuLabel>Toggle columns</DropdownMenuLabel>\n      <DropdownMenuSeparator />\n\n      <DropdownMenuCheckboxItem\n        v-for=\"column in columns\"\n        :key=\"column.id\"\n        class=\"capitalize\"\n        :modelValue=\"column.getIsVisible()\"\n        @update:modelValue=\"(value) => column.toggleVisibility(!!value)\"\n      >\n        {{ column.id }}\n      </DropdownMenuCheckboxItem>\n    </DropdownMenuContent>\n  </DropdownMenu>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Implementing Dialog with Context Menu in Vue\nDESCRIPTION: Example of how to use the Dialog component within a Context Menu in Vue.js, addressing a specific implementation scenario.\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/docs/components/dialog.md#2025-04-23_snippet_2\n\nLANGUAGE: js\nCODE:\n```\n<Dialog>\n  <ContextMenu>\n    <ContextMenuTrigger>Right click</ContextMenuTrigger>\n    <ContextMenuContent>\n      <ContextMenuItem>Open</ContextMenuItem>\n      <ContextMenuItem>Download</ContextMenuItem>\n      <DialogTrigger asChild>\n        <ContextMenuItem>\n          <span>Delete</span>\n        </ContextMenuItem>\n      </DialogTrigger>\n    </ContextMenuContent>\n  </ContextMenu>\n  <DialogContent>\n    <DialogHeader>\n      <DialogTitle>Are you absolutely sure?</DialogTitle>\n      <DialogDescription>\n        This action cannot be undone. Are you sure you want to permanently\n        delete this file from our servers?\n      </DialogDescription>\n    </DialogHeader>\n    <DialogFooter>\n      <Button type=\"submit\">Confirm</Button>\n    </DialogFooter>\n  </DialogContent>\n</Dialog>\n```\n\n----------------------------------------\n\nTITLE: Adding Actions Column Definition in TypeScript\nDESCRIPTION: Demonstrates how to add an actions column with a dropdown component to the table columns definition.\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/docs/components/data-table.md#2025-04-23_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport DropdownAction from '@/components/DataTableDropDown.vue'\nimport { ColumnDef } from '@tanstack/vue-table'\n\nexport const columns: ColumnDef<Payment>[] = [\n  // ...\n  {\n    id: 'actions',\n    enableHiding: false,\n    cell: ({ row }) => {\n      const payment = row.original\n\n      return h('div', { class: 'relative' }, h(DropdownAction, {\n        payment,\n      }))\n    },\n  },\n]\n```\n\n----------------------------------------\n\nTITLE: Basic Select Component Implementation in Vue\nDESCRIPTION: A complete example showing how to implement a basic Select component with options grouped by category. The example demonstrates importing the necessary components and structuring them in a template with proper nesting.\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/docs/components/select.md#2025-04-23_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport {\n  Select,\n  SelectContent,\n  SelectGroup,\n  SelectItem,\n  SelectLabel,\n  SelectTrigger,\n  SelectValue,\n} from '@/components/ui/select'\n</script>\n\n<template>\n  <Select>\n    <SelectTrigger>\n      <SelectValue placeholder=\"Select a fruit\" />\n    </SelectTrigger>\n    <SelectContent>\n      <SelectGroup>\n        <SelectLabel>Fruits</SelectLabel>\n        <SelectItem value=\"apple\">\n          Apple\n        </SelectItem>\n      </SelectGroup>\n    </SelectContent>\n  </Select>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Updating DataTable Component with Expanded State in TanStack Table for Vue\nDESCRIPTION: A Vue component that implements a DataTable using TanStack Table, featuring sorting, filtering, pagination, column visibility, and row expansion capabilities. The component manages table state using Vue refs and renders a table with header and body sections.\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/docs/components/data-table.md#2025-04-23_snippet_17\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\" generic=\"TData, TValue\">\nimport type {\n  ColumnDef,\n  ColumnFiltersState,\n  SortingState,\n  VisibilityState,\n  ExpandedState,\n} from '@tanstack/vue-table'\n\nimport {\n  DropdownMenu,\n  DropdownMenuCheckboxItem,\n  DropdownMenuContent,\n  DropdownMenuTrigger,\n} from '@/components/ui/dropdown-menu'\n\nimport { valueUpdater } from '@/lib/utils'\n\nimport { ArrowUpDown, ChevronDown } from 'lucide-vue-next'\nimport { Input } from '@/components/ui/input'\nimport { Button } from '@/components/ui/button'\nimport { h, ref } from 'vue'\n\nimport {\n    FlexRender,\n    getCoreRowModel,\n    getPaginationRowModel,\n    getFilteredRowModel,\n    getSortedRowModel,\n    getExpandedRowModel,\n    useVueTable,\n} from \"@tanstack/vue-table\"\n\nconst props = defineProps<{\n    columns: ColumnDef<TData, TValue>[]\n    data: TData[]\n}>()\n\nconst sorting = ref<SortingState>([])\nconst columnFilters = ref<ColumnFiltersState>([])\nconst columnVisibility = ref<VisibilityState>({})\nconst rowSelection = ref({})\nconst expanded = ref<ExpandedState>({})\n\nconst table = useVueTable({\n    get data() { return props.data },\n    get columns() { return props.columns },\n    getCoreRowModel: getCoreRowModel(),\n    getPaginationRowModel: getPaginationRowModel(),\n    getSortedRowModel: getSortedRowModel(),\n    getFilteredRowModel: getFilteredRowModel(),\n    getExpandedRowModel: getExpandedRowModel(),\n    onSortingChange: updaterOrValue => valueUpdater(updaterOrValue, sorting),\n    onColumnFiltersChange: updaterOrValue => valueUpdater(updaterOrValue, columnFilters),\n    onColumnVisibilityChange: updaterOrValue => valueUpdater(updaterOrValue, columnVisibility),\n    onRowSelectionChange: updaterOrValue => valueUpdater(updaterOrValue, rowSelection),\n    onExpandedChange: updaterOrValue => valueUpdater(updaterOrValue, expanded),\n    state: {\n        get sorting() { return sorting.value },\n        get columnFilters() { return columnFilters.value },\n        get columnVisibility() { return columnVisibility.value },\n        get rowSelection() { return rowSelection.value },\n        get expanded() { return expanded.value },\n    },\n})\n</script>\n\n<template>\n    <div>\n        <div class=\"flex items-center py-4\">\n            <Input class=\"max-w-sm\" placeholder=\"Filter emails...\"\n                :model-value=\"table.getColumn('email')?.getFilterValue() as string\"\n                @update:model-value=\" table.getColumn('email')?.setFilterValue($event)\" />\n            <DropdownMenu>\n                <DropdownMenuTrigger as-child>\n                    <Button variant=\"outline\" class=\"ml-auto\">\n                        Columns\n                        <ChevronDown class=\"w-4 h-4 ml-2\" />\n                    </Button>\n                </DropdownMenuTrigger>\n                <DropdownMenuContent align=\"end\">\n                    <DropdownMenuCheckboxItem\n                        v-for=\"column in table.getAllColumns().filter((column) => column.getCanHide())\" :key=\"column.id\"\n                        class=\"capitalize\" :modelValue=\"column.getIsVisible()\" @update:modelValue=\"(value) => {\n                            column.toggleVisibility(!!value)\n                        }\">\n                        {{ column.id }}\n                    </DropdownMenuCheckboxItem>\n                </DropdownMenuContent>\n            </DropdownMenu>\n        </div>\n        <div class=\"border rounded-md\">\n            <Table>\n                <TableHeader>\n                    <TableRow v-for=\"headerGroup in table.getHeaderGroups()\" :key=\"headerGroup.id\">\n                        <TableHead v-for=\"header in headerGroup.headers\" :key=\"header.id\">\n                            <FlexRender v-if=\"!header.isPlaceholder\" :render=\"header.column.columnDef.header\"\n                                :props=\"header.getContext()\" />\n                        </TableHead>\n                    </TableRow>\n                </TableHeader>\n                <TableBody>\n                    <template v-if=\"table.getRowModel().rows?.length\">\n                      <template v-for=\"row in table.getRowModel().rows\" :key=\"row.id\">\n                        <TableRow :data-state=\"row.getIsSelected() ? 'selected' : undefined\">\n                            <TableCell v-for=\"cell in row.getVisibleCells()\" :key=\"cell.id\">\n                                <FlexRender :render=\"cell.column.columnDef.cell\" :props=\"cell.getContext()\" />\n                            </TableCell>\n                        </TableRow>\n                        <TableRow v-if=\"row.getIsExpanded()\">\n                          <TableCell :colspan=\"row.getAllCells().length\">\n                            {{ JSON.stringify(row.original) }}\n                          </TableCell>\n                        </TableRow>\n                      </template>\n                    </template>\n                    <template v-else>\n                        <TableRow>\n                            <TableCell :colSpan=\"columns.length\" class=\"h-24 text-center\">\n                                No results.\n                            </TableCell>\n                        </TableRow>\n                    </template>\n                </TableBody>\n            </Table>\n        </div>\n    </div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Implementing Row Expansion in Column Definition for Vue DataTable\nDESCRIPTION: Column definition snippet that adds an actions column with the ability to toggle row expansion. The cell renderer creates a DropdownAction component with an onExpand event handler that calls the row's toggleExpanded method.\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/docs/components/data-table.md#2025-04-23_snippet_19\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nexport const columns: ColumnDef<Payment>[] = [\n  {\n    id: 'actions',\n    enableHiding: false,\n    cell: ({ row }) => {\n      const payment = row.original\n\n      return h('div', { class: 'relative' }, h(DropdownAction, {\n        payment,\n        onExpand: row.toggleExpanded,\n      }))\n    },\n  },\n]\n</script>\n\n```\n\n----------------------------------------\n\nTITLE: Implementing Pagination in Data Table\nDESCRIPTION: Shows how to add pagination functionality to the table using TanStack Table's pagination features.\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/docs/components/data-table.md#2025-04-23_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n    FlexRender,\n    getCoreRowModel,\n    getPaginationRowModel,\n    useVueTable,\n} from \"@tanstack/vue-table\"\n\nconst table = useVueTable({\n    get data() { return props.data },\n    get columns() { return props.columns },\n    getCoreRowModel: getCoreRowModel(),\n    getPaginationRowModel: getPaginationRowModel(),\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Button Component in Vue.js\nDESCRIPTION: Vue component implementation for a customizable Button. It uses class-variance-authority for styling variants and supports different sizes and styles.\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/docs/components/button.md#2025-04-23_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { cn } from '@/lib/utils'\nimport { cva } from 'class-variance-authority'\n\nconst buttonVariants = cva(\n  'inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50',\n  {\n    variants: {\n      variant: {\n        default: 'bg-primary text-primary-foreground hover:bg-primary/90',\n        destructive:\n          'bg-destructive text-destructive-foreground hover:bg-destructive/90',\n        outline:\n          'border border-input bg-background hover:bg-accent hover:text-accent-foreground',\n        secondary:\n          'bg-secondary text-secondary-foreground hover:bg-secondary/80',\n        ghost: 'hover:bg-accent hover:text-accent-foreground',\n        link: 'text-primary underline-offset-4 hover:underline',\n      },\n      size: {\n        default: 'h-10 px-4 py-2',\n        sm: 'h-9 rounded-md px-3',\n        lg: 'h-11 rounded-md px-8',\n        icon: 'h-10 w-10',\n      },\n    },\n    defaultVariants: {\n      variant: 'default',\n      size: 'default',\n    },\n  },\n)\n\ninterface Props {\n  variant?: NonNullable<Parameters<typeof buttonVariants>[0]>['variant']\n  size?: NonNullable<Parameters<typeof buttonVariants>[0]>['size']\n  as?: string\n}\n\n// eslint-disable-next-line vue/define-macros-order\nwithDefaults(defineProps<Props>(), {\n  as: 'button',\n})\n</script>\n\n<template>\n  <component\n    :is=\"as\"\n    :class=\"cn(buttonVariants({ variant, size }), $attrs.class ?? '')\"\n  >\n    <slot />\n  </component>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Adding Pagination Controls Component\nDESCRIPTION: Implementation of pagination controls using Vue components with previous and next page functionality.\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/docs/components/data-table.md#2025-04-23_snippet_9\n\nLANGUAGE: vue\nCODE:\n```\n<script lang=\"ts\" generic=\"TData, TValue\">\nimport { Button } from '@/components/ui/button'\n\nconst table = useVueTable({\n  get data() { return props.data },\n  get columns() { return props.columns },\n  getCoreRowModel: getCoreRowModel(),\n  getPaginationRowModel: getPaginationRowModel(),\n})\n</script>\n\n<template>\n  <div>\n    <div class=\"border rounded-md\">\n      <Table>\n        { // .... }\n      </Table>\n    </div>\n    <div class=\"flex items-center justify-end py-4 space-x-2\">\n      <Button\n        variant=\"outline\"\n        size=\"sm\"\n        :disabled=\"!table.getCanPreviousPage()\"\n        @click=\"table.previousPage()\"\n      >\n        Previous\n      </Button>\n      <Button\n        variant=\"outline\"\n        size=\"sm\"\n        :disabled=\"!table.getCanNextPage()\"\n        @click=\"table.nextPage()\"\n      >\n        Next\n      </Button>\n    </div>\n  </div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Creating a Sidebar with Navigation Menu\nDESCRIPTION: A complete example of a sidebar with a navigation menu including icons and links. Shows how to structure menu items and create a functional navigation.\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/docs/components/sidebar.md#2025-04-23_snippet_6\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { Calendar, Home, Inbox, Search, Settings } from \"lucide-vue-next\"\nimport {\n  Sidebar,\n  SidebarContent,\n  SidebarGroup,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarMenu,\n  SidebarMenuButton,\n  SidebarMenuItem,\n} from \"@/components/ui/sidebar\"\n\n// Menu items.\nconst items = [\n  {\n    title: \"Home\",\n    url: \"#\",\n    icon: Home,\n  },\n  {\n    title: \"Inbox\",\n    url: \"#\",\n    icon: Inbox,\n  },\n  {\n    title: \"Calendar\",\n    url: \"#\",\n    icon: Calendar,\n  },\n  {\n    title: \"Search\",\n    url: \"#\",\n    icon: Search,\n  },\n  {\n    title: \"Settings\",\n    url: \"#\",\n    icon: Settings,\n  },\n];\n</script>\n\n<template>\n  <Sidebar>\n    <SidebarContent>\n      <SidebarGroup>\n        <SidebarGroupLabel>Application</SidebarGroupLabel>\n        <SidebarGroupContent>\n          <SidebarMenu>\n              <SidebarMenuItem v-for=\"item in items\" :key=\"item.title\">\n                <SidebarMenuButton asChild>\n                    <a :href=\"item.url\">\n                      <component :is=\"item.icon\" />\n                      <span>{{item.title}}</span>\n                    </a>\n                </SidebarMenuButton>\n              </SidebarMenuItem>\n          </SidebarMenu>\n        </SidebarGroupContent>\n      </SidebarGroup>\n    </SidebarContent>\n  </Sidebar>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Integrating Date Picker in Forms with Vue.js\nDESCRIPTION: This snippet illustrates how to use the Date Picker component within a form context in a Vue.js application, demonstrating its integration with form handling.\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/docs/components/date-picker.md#2025-04-23_snippet_4\n\nLANGUAGE: vue\nCODE:\n```\n<ComponentPreview name=\"DatePickerForm\" />\n```\n\n----------------------------------------\n\nTITLE: Adding Row Selection to Column Definitions in TypeScript\nDESCRIPTION: This snippet demonstrates how to add a checkbox column for row selection in the table. It updates the column definitions to include a selectable checkbox for each row and the header.\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/docs/components/data-table.md#2025-04-23_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { ColumnDef } from '@tanstack/vue-table'\n\nimport { Checkbox } from '@/components/ui/checkbox'\n\nexport const columns: ColumnDef<Payment>[] = [\n    {\n        id: 'select',\n        header: ({ table }) => h(Checkbox, {\n            'modelValue': table.getIsAllPageRowsSelected(),\n            'onUpdate:modelValue': (value: boolean) => table.toggleAllPageRowsSelected(!!value),\n            'ariaLabel': 'Select all',\n        }),\n        cell: ({ row }) => h(Checkbox, {\n            'modelValue': row.getIsSelected(),\n            'onUpdate:modelValue': (value: boolean) => row.toggleSelected(!!value),\n            'ariaLabel': 'Select row',\n        }),\n        enableSorting: false,\n        enableHiding: false,\n    },\n]\n```\n\n----------------------------------------\n\nTITLE: Implementing Main App Component with DataTable\nDESCRIPTION: Vue component that fetches data and renders the DataTable component with the appropriate columns and data.\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/docs/components/data-table.md#2025-04-23_snippet_5\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport type { Payment } from './components/columns'\nimport { onMounted, ref } from 'vue'\nimport { columns } from './components/columns'\nimport DataTable from './components/DataTable.vue'\n\nconst data = ref<Payment[]>([])\n\nasync function getData(): Promise<Payment[]> {\n  // Fetch data from your API here.\n  return [\n    {\n      id: '728ed52f',\n      amount: 100,\n      status: 'pending',\n      email: 'm@example.com',\n    },\n    // ...\n  ]\n}\n\nonMounted(async () => {\n  data.value = await getData()\n})\n</script>\n\n<template>\n  <div class=\"container py-10 mx-auto\">\n    <DataTable :columns=\"columns\" :data=\"data\" />\n  </div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Table Component in Vue\nDESCRIPTION: Example implementation of a basic table structure using ShadcnVue components. Demonstrates table layout with header, body, and caption along with sample invoice data.\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/docs/components/table.md#2025-04-23_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport {\n  Table,\n  TableBody,\n  TableCaption,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from '@/components/ui/table'\n</script>\n\n<template>\n  <Table>\n    <TableCaption>A list of your recent invoices.</TableCaption>\n    <TableHeader>\n      <TableRow>\n        <TableHead class=\"w-[100px]\">\n          Invoice\n        </TableHead>\n        <TableHead>Status</TableHead>\n        <TableHead>Method</TableHead>\n        <TableHead class=\"text-right\">\n          Amount\n        </TableHead>\n      </TableRow>\n    </TableHeader>\n    <TableBody>\n      <TableRow>\n        <TableCell class=\"font-medium\">\n          INV001\n        </TableCell>\n        <TableCell>Paid</TableCell>\n        <TableCell>Credit Card</TableCell>\n        <TableCell class=\"text-right\">\n          $250.00\n        </TableCell>\n      </TableRow>\n    </TableBody>\n  </Table>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Implementing a Combobox Component in Vue\nDESCRIPTION: A complete implementation of a framework selection combobox using shadcn-vue components. This example demonstrates how to combine Popover and Command components to create an autocomplete dropdown with search functionality.\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/docs/components/combobox.md#2025-04-23_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { Button } from '@/components/ui/button'\n\nimport {\n  Command,\n  CommandEmpty,\n  CommandGroup,\n  CommandInput,\n  CommandItem,\n  CommandList\n} from '@/components/ui/command'\nimport {\n  Popover,\n  PopoverContent,\n  PopoverTrigger,\n} from '@/components/ui/popover'\nimport { cn } from '@/lib/utils'\nimport { Check, ChevronsUpDown } from 'lucide-vue-next'\nimport { ref } from 'vue'\n\nconst frameworks = [\n  { value: 'next.js', label: 'Next.js' },\n  { value: 'sveltekit', label: 'SvelteKit' },\n  { value: 'nuxt', label: 'Nuxt' },\n  { value: 'remix', label: 'Remix' },\n  { value: 'astro', label: 'Astro' },\n]\n\nconst open = ref(false)\nconst value = ref('')\n</script>\n\n<template>\n  <Popover v-model:open=\"open\">\n    <PopoverTrigger as-child>\n      <Button\n        variant=\"outline\"\n        role=\"combobox\"\n        :aria-expanded=\"open\"\n        class=\"w-[200px] justify-between\"\n      >\n        {{ value ? frameworks.find((framework) => framework.value === value)?.label : 'Select framework...' }}\n\n        <ChevronsUpDown class=\"ml-2 h-4 w-4 shrink-0 opacity-50\" />\n      </Button>\n    </PopoverTrigger>\n    <PopoverContent class=\"w-[200px] p-0\">\n      <Command v-model=\"value\">\n        <CommandInput placeholder=\"Search framework...\" />\n        <CommandEmpty>No framework found.</CommandEmpty>\n        <CommandList>\n          <CommandGroup>\n            <CommandItem\n              v-for=\"framework in frameworks\"\n              :key=\"framework.value\"\n              :value=\"framework.value\"\n              @select=\"open = false\"\n            >\n              <Check\n                :class=\"cn(\n                  'mr-2 h-4 w-4',\n                  value === framework.value ? 'opacity-100' : 'opacity-0',\n                )\"\n              />\n              {{ framework.label }}\n            </CommandItem>\n          </CommandGroup>\n        </CommandList>\n      </Command>\n    </PopoverContent>\n  </Popover>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Implementing Accordion Component in Vue\nDESCRIPTION: Example of how to use the Accordion component in a Vue component. The code demonstrates importing the necessary components and creating a single-item accordion with collapsible behavior.\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/docs/components/accordion.md#2025-04-23_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { Accordion, AccordionContent, AccordionItem, AccordionTrigger } from '@/components/ui/accordion'\n</script>\n\n<template>\n  <Accordion type=\"single\" collapsible>\n    <AccordionItem value=\"item-1\">\n      <AccordionTrigger>Is it accessible?</AccordionTrigger>\n      <AccordionContent>\n        Yes. It adheres to the WAI-ARIA design pattern.\n      </AccordionContent>\n    </AccordionItem>\n  </Accordion>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Implementing Persisted Sidebar State with Nuxt\nDESCRIPTION: Setting up the SidebarProvider to persist the sidebar state across page reloads using cookies with Nuxt.\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/docs/components/sidebar.md#2025-04-23_snippet_10\n\nLANGUAGE: vue\nCODE:\n```\n<!-- with Nuxt -->\n<script setup lang=\"ts\">\nimport { SidebarProvider, SidebarTrigger } from \"@/components/ui/sidebar\"\nimport AppSidebar from \"@/components/AppSidebar.vue\"\n\nconst defaultOpen = useCookie<string>('sidebar_state')\n</script>\n\n<template>\n  <SidebarProvider :defaultOpen=\"defaultOpen\">\n    <AppSidebar />\n    <main>\n      <SidebarTrigger />\n      <RouterView />  <!-- or <slot /> -->\n    </main>\n  </SidebarProvider>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Implementing Alert Dialog Component\nDESCRIPTION: Example of implementing an Alert Dialog component with confirmation message and action buttons. Shows the complete structure including header, description, and footer sections with cancel and continue actions.\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/docs/components/alert-dialog.md#2025-04-23_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport {\n  AlertDialog,\n  AlertDialogAction,\n  AlertDialogCancel,\n  AlertDialogContent,\n  AlertDialogDescription,\n  AlertDialogFooter,\n  AlertDialogHeader,\n  AlertDialogTitle,\n  AlertDialogTrigger,\n} from '@/components/ui/alert-dialog'\n</script>\n\n<template>\n  <AlertDialog>\n    <AlertDialogTrigger>Open</AlertDialogTrigger>\n    <AlertDialogContent>\n      <AlertDialogHeader>\n        <AlertDialogTitle>Are you absolutely sure?</AlertDialogTitle>\n        <AlertDialogDescription>\n          This action cannot be undone. This will permanently delete your account\n          and remove your data from our servers.\n        </AlertDialogDescription>\n      </AlertDialogHeader>\n      <AlertDialogFooter>\n        <AlertDialogCancel>Cancel</AlertDialogCancel>\n        <AlertDialogAction>Continue</AlertDialogAction>\n      </AlertDialogFooter>\n    </AlertDialogContent>\n  </AlertDialog>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Implementing Dark Mode Toggle Component in Vue\nDESCRIPTION: This Vue component implements a dropdown menu for toggling between light, dark, and system color modes. It uses the useColorMode composable from Nuxt Color Mode and custom UI components for the dropdown and button.\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/docs/dark-mode/nuxt.md#2025-04-23_snippet_3\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { Button } from '@/components/ui/button'\nimport { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuTrigger } from '@/components/ui/dropdown-menu'\nimport { Icon } from '@iconify/vue'\n\nconst colorMode = useColorMode()\n</script>\n\n<template>\n  <DropdownMenu>\n    <DropdownMenuTrigger as-child>\n      <Button variant=\"outline\">\n        <Icon icon=\"radix-icons:moon\" class=\"h-[1.2rem] w-[1.2rem] rotate-0 scale-100 transition-all dark:-rotate-90 dark:scale-0\" />\n        <Icon icon=\"radix-icons:sun\" class=\"absolute h-[1.2rem] w-[1.2rem] rotate-90 scale-0 transition-all dark:rotate-0 dark:scale-100\" />\n        <span class=\"sr-only\">Toggle theme</span>\n      </Button>\n    </DropdownMenuTrigger>\n    <DropdownMenuContent align=\"end\">\n      <DropdownMenuItem @click=\"colorMode.preference = 'light'\">\n        Light\n      </DropdownMenuItem>\n      <DropdownMenuItem @click=\"colorMode.preference = 'dark'\">\n        Dark\n      </DropdownMenuItem>\n      <DropdownMenuItem @click=\"colorMode.preference = 'system'\">\n        System\n      </DropdownMenuItem>\n    </DropdownMenuContent>\n  </DropdownMenu>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Implementing Popover Component in Vue\nDESCRIPTION: Basic usage example of the Popover component in a Vue.js application. The example shows how to structure the component with PopoverTrigger for the activator and PopoverContent for the content displayed when triggered.\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/docs/components/popover.md#2025-04-23_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport {\n  Popover,\n  PopoverContent,\n  PopoverTrigger,\n} from '@/components/ui/popover'\n</script>\n\n<template>\n  <Popover>\n    <PopoverTrigger>\n      Open popover\n    </PopoverTrigger>\n    <PopoverContent>\n      Some popover content\n    </PopoverContent>\n  </Popover>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Using DataTablePagination Component in Vue.js\nDESCRIPTION: This snippet demonstrates how to use the DataTablePagination component within a parent component, passing the table instance as a prop.\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/docs/components/data-table.md#2025-04-23_snippet_23\n\nLANGUAGE: vue\nCODE:\n```\n<DataTablePagination :table=\"table\" />\n```\n\n----------------------------------------\n\nTITLE: Creating a Zod Form Schema with TypeScript\nDESCRIPTION: Example of defining a form validation schema using Zod and integrating it with VeeValidate using the toTypedSchema helper for type safety.\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/docs/components/form.md#2025-04-23_snippet_5\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { toTypedSchema } from '@vee-validate/zod'\nimport * as z from 'zod'\n\nconst formSchema = toTypedSchema(z.object({\n  username: z.string().min(2).max(50),\n}))\n</script>\n```\n\n----------------------------------------\n\nTITLE: Implementing Hover Card Component in Vue\nDESCRIPTION: Example of how to use the Hover Card component in a Vue template. It demonstrates importing the necessary components, setting up the script section, and structuring the template with HoverCard, HoverCardTrigger, and HoverCardContent.\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/docs/components/hover-card.md#2025-04-23_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport {\n  HoverCard,\n  HoverCardContent,\n  HoverCardTrigger,\n} from '@/components/ui/hover-card'\n</script>\n\n<template>\n  <HoverCard>\n    <HoverCardTrigger>Hover</HoverCardTrigger>\n    <HoverCardContent>\n      The Vue Framework – created and maintained by @vuejs.\n    </HoverCardContent>\n  </HoverCard>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Controlled Sidebar with v-model in Vue\nDESCRIPTION: Demonstrates implementing a controlled sidebar using v-model:open to bind the sidebar's open state to a reactive reference, allowing programmatic control of the sidebar state.\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/docs/components/sidebar.md#2025-04-23_snippet_35\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { SidebarProvider, Sidebar } from \"@/components/ui/sidebar\";\nimport { ref } from \"vue\"\n\nconst open = ref(false)\n</script>\n\n<template>\n  <SidebarProvider v-model:open=\"open\">\n    <Sidebar />\n  </SidebarProvider>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Extending shadcn-vue with Custom Style Registry Item\nDESCRIPTION: A registry style item that extends shadcn-vue by installing dependencies, adding components, and setting CSS variables. It installs @iconify/vue, adds Login01 block and calendar component, and sets font and color variables.\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/docs/registry/examples.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"$schema\": \"https://shadcn-vue.com/schema/registry-item.json\",\n  \"name\": \"example-style\",\n  \"type\": \"registry:style\",\n  \"dependencies\": [\"@iconify/vue\"],\n  \"registryDependencies\": [\n    \"Login01\",\n    \"calendar\",\n    \"https://example.com/r/editor.json\"\n  ],\n  \"cssVars\": {\n    \"theme\": {\n      \"font-sans\": \"Inter, sans-serif\"\n    },\n    \"light\": {\n      \"brand\": \"20 14.3% 4.1%\"\n    },\n    \"dark\": {\n      \"brand\": \"20 14.3% 4.1%\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Filtering Functionality\nDESCRIPTION: Implementation of table filtering with email search functionality and state management.\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/docs/components/data-table.md#2025-04-23_snippet_12\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\" generic=\"TData, TValue\">\nimport type {\n  ColumnDef,\n  ColumnFiltersState,\n  SortingState,\n} from '@tanstack/vue-table'\n\nimport { valueUpdater } from '@/lib/utils'\n\nimport { ArrowUpDown, ChevronDown } from 'lucide-vue-next'\nimport { Input } from '@/components/ui/input'\nimport { Button } from '@/components/ui/button'\nimport { h, ref } from 'vue'\n\nconst sorting = ref<SortingState>([])\nconst columnFilters = ref<ColumnFiltersState>([])\n\nconst table = useVueTable({\n    get data() { return props.data },\n    get columns() { return props.columns },\n    getCoreRowModel: getCoreRowModel(),\n    getPaginationRowModel: getPaginationRowModel(),\n    getSortedRowModel: getSortedRowModel(),\n    onSortingChange: updaterOrValue => valueUpdater(updaterOrValue, sorting),\n    onColumnFiltersChange: updaterOrValue => valueUpdater(updaterOrValue, columnFilters),\n    getFilteredRowModel: getFilteredRowModel(),\n    state: {\n        get sorting() { return sorting.value },\n        get columnFilters() { return columnFilters.value },\n    },\n})</script>\n```\n\n----------------------------------------\n\nTITLE: Implementing Card Component in Vue\nDESCRIPTION: Example of how to use the Card component with its subcomponents in a Vue application. This demonstrates the structure of a complete card with header, title, description, content, and footer sections.\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/docs/components/card.md#2025-04-23_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardFooter,\n  CardHeader,\n  CardTitle,\n} from '@/components/ui/card'\n</script>\n\n<template>\n  <Card>\n    <CardHeader>\n      <CardTitle>Card Title</CardTitle>\n      <CardDescription>Card Description</CardDescription>\n    </CardHeader>\n    <CardContent>\n      Card Content\n    </CardContent>\n    <CardFooter>\n      Card Footer\n    </CardFooter>\n  </Card>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Custom Sidebar Toggle with useSidebar Composable in Vue\nDESCRIPTION: Demonstrates creating a custom sidebar toggle button using the useSidebar composable to access the toggleSidebar function programmatically.\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/docs/components/sidebar.md#2025-04-23_snippet_33\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { useSidebar } from \"@/components/ui/sidebar\";\nconst { toggleSidebar } = useSidebar();\n</script>\n\n<template>\n  <button @click=\"toggleSidebar\">Toggle Sidebar</button>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Using Menubar Component in Vue\nDESCRIPTION: Example showing how to implement a Menubar with dropdown menus in a Vue component. This demonstrates importing the required components and structuring them with triggers, content, items, and separators.\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/docs/components/menubar.md#2025-04-23_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport {\n  Menubar,\n  MenubarContent,\n  MenubarItem,\n  MenubarMenu,\n  MenubarSeparator,\n  MenubarShortcut,\n  MenubarTrigger,\n} from '@/components/ui/menubar'\n</script>\n\n<template>\n  <Menubar>\n    <MenubarMenu>\n      <MenubarTrigger>File</MenubarTrigger>\n      <MenubarContent>\n        <MenubarItem>\n          New Tab <MenubarShortcut>⌘T</MenubarShortcut>\n        </MenubarItem>\n        <MenubarItem>New Window</MenubarItem>\n        <MenubarSeparator />\n        <MenubarItem>Share</MenubarItem>\n        <MenubarSeparator />\n        <MenubarItem>Print</MenubarItem>\n      </MenubarContent>\n    </MenubarMenu>\n  </Menubar>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Root Page with SidebarProvider Setup\nDESCRIPTION: Setting up the SidebarProvider at the root of the application with SidebarTrigger and AppSidebar components.\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/docs/components/sidebar.md#2025-04-23_snippet_4\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { SidebarProvider, SidebarTrigger } from \"@/components/ui/sidebar\";\nimport AppSidebar from \"@/components/AppSidebar.vue\";\n</script>\n\n<template>\n  <SidebarProvider>\n    <AppSidebar />\n    <main>\n      <SidebarTrigger />\n      <slot />\n    </main>\n  </SidebarProvider>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Updating DataTable Component in Vue.js\nDESCRIPTION: This snippet shows how to update the DataTable component to include column visibility toggling. It uses the DropdownMenu component to allow users to show/hide table columns.\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/docs/components/data-table.md#2025-04-23_snippet_13\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\" generic=\"TData, TValue\">\nimport type {\n  ColumnDef,\n  ColumnFiltersState,\n  SortingState,\n  VisibilityState,\n} from '@tanstack/vue-table'\n\nimport {\n  DropdownMenu,\n  DropdownMenuCheckboxItem,\n  DropdownMenuContent,\n  DropdownMenuTrigger,\n} from '@/components/ui/dropdown-menu'\n\nimport { valueUpdater } from '@/lib/utils'\n\nimport { ArrowUpDown, ChevronDown } from 'lucide-vue-next'\nimport { Input } from '@/components/ui/input'\nimport { Button } from '@/components/ui/button'\nimport { h, ref } from 'vue'\n\nimport {\n    FlexRender,\n    getCoreRowModel,\n    getPaginationRowModel,\n    getFilteredRowModel,\n    getSortedRowModel,\n    useVueTable,\n} from \"@tanstack/vue-table\"\n\nimport {\n    Table,\n    TableBody,\n    TableCell,\n    TableHead,\n    TableHeader,\n    TableRow,\n} from \"@/components/ui/table\"\n\nconst props = defineProps<{\n    columns: ColumnDef<TData, TValue>[]\n    data: TData[]\n}>()\n\nconst sorting = ref<SortingState>([])\nconst columnFilters = ref<ColumnFiltersState>([])\nconst columnVisibility = ref<VisibilityState>({})\n\nconst table = useVueTable({\n    get data() { return props.data },\n    get columns() { return props.columns },\n    getCoreRowModel: getCoreRowModel(),\n    getPaginationRowModel: getPaginationRowModel(),\n    getSortedRowModel: getSortedRowModel(),\n    getFilteredRowModel: getFilteredRowModel(),\n    onSortingChange: updaterOrValue => valueUpdater(updaterOrValue, sorting),\n    onColumnFiltersChange: updaterOrValue => valueUpdater(updaterOrValue, columnFilters),\n    onColumnVisibilityChange: updaterOrValue => valueUpdater(updaterOrValue, columnVisibility),\n    state: {\n        get sorting() { return sorting.value },\n        get columnFilters() { return columnFilters.value },\n        get columnVisibility() { return columnVisibility.value },\n    },\n})\n\n</script>\n\n<template>\n    <div>\n        <div class=\"flex items-center py-4\">\n            <Input class=\"max-w-sm\" placeholder=\"Filter emails...\"\n                :model-value=\"table.getColumn('email')?.getFilterValue() as string\"\n                @update:model-value=\" table.getColumn('email')?.setFilterValue($event)\" />\n            <DropdownMenu>\n                <DropdownMenuTrigger as-child>\n                    <Button variant=\"outline\" class=\"ml-auto\">\n                        Columns\n                        <ChevronDown class=\"w-4 h-4 ml-2\" />\n                    </Button>\n                </DropdownMenuTrigger>\n                <DropdownMenuContent align=\"end\">\n                    <DropdownMenuCheckboxItem\n                        v-for=\"column in table.getAllColumns().filter((column) => column.getCanHide())\" :key=\"column.id\"\n                        class=\"capitalize\" :modelValue=\"column.getIsVisible()\" @update:modelValue=\"(value) => {\n                            column.toggleVisibility(!!value)\n                        }\">\n                        {{ column.id }}\n                    </DropdownMenuCheckboxItem>\n                </DropdownMenuContent>\n            </DropdownMenu>\n        </div>\n        <div class=\"border rounded-md\">\n            <Table>\n                <TableHeader>\n                    <TableRow v-for=\"headerGroup in table.getHeaderGroups()\" :key=\"headerGroup.id\">\n                        <TableHead v-for=\"header in headerGroup.headers\" :key=\"header.id\">\n                            <FlexRender v-if=\"!header.isPlaceholder\" :render=\"header.column.columnDef.header\"\n                                :props=\"header.getContext()\" />\n                        </TableHead>\n                    </TableRow>\n                </TableHeader>\n                <TableBody>\n                    <template v-if=\"table.getRowModel().rows?.length\">\n                        <TableRow v-for=\"row in table.getRowModel().rows\" :key=\"row.id\"\n                            :data-state=\"row.getIsSelected() ? 'selected' : undefined\">\n                            <TableCell v-for=\"cell in row.getVisibleCells()\" :key=\"cell.id\">\n                                <FlexRender :render=\"cell.column.columnDef.cell\" :props=\"cell.getContext()\" />\n                            </TableCell>\n                        </TableRow>\n                    </template>\n                    <template v-else>\n                        <TableRow>\n                            <TableCell :colSpan=\"columns.length\" class=\"h-24 text-center\">\n                                No results.\n                            </TableCell>\n                        </TableRow>\n                    </template>\n                </TableBody>\n            </Table>\n        </div>\n    </div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Implementing Number Field Component in Vue\nDESCRIPTION: This snippet demonstrates how to use the Number Field component in a Vue template. It imports the necessary components and sets up a basic number field with a label, decrement button, input field, and increment button.\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/docs/components/number-field.md#2025-04-23_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { Label } from '@/components/ui/label'\nimport {\n  NumberField,\n  NumberFieldContent,\n  NumberFieldDecrement,\n  NumberFieldIncrement,\n  NumberFieldInput,\n} from '@/components/ui/number-field'\n</script>\n\n<template>\n  <NumberField>\n    <Label>Age</Label>\n    <NumberFieldContent>\n      <NumberFieldDecrement />\n      <NumberFieldInput />\n      <NumberFieldIncrement />\n    </NumberFieldContent>\n  </NumberField>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Handle in Resizable Panels\nDESCRIPTION: Example showing how to add a visible handle to the resizable interface. Uses the with-handle prop on the ResizableHandle component to display a drag handle element.\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/docs/components/resizable.md#2025-04-23_snippet_4\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport {\n  ResizableHandle,\n  ResizablePanel,\n  ResizablePanelGroup,\n} from '@/components/ui/resizable'\n</script>\n\n<template>\n  <ResizablePanelGroup direction=\"horizontal\">\n    <ResizablePanel>One</ResizablePanel>\n    <ResizableHandle with-handle />\n    <ResizablePanel>Two</ResizablePanel>\n  </ResizablePanelGroup>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Defining a Form with Composition API\nDESCRIPTION: Example showing how to use the useForm composable from VeeValidate to create a form with validation schema and handle form submission, with type-safety.\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/docs/components/form.md#2025-04-23_snippet_6\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { useForm } from 'vee-validate'\nimport { toTypedSchema } from '@vee-validate/zod'\nimport * as z from 'zod'\n\nimport {\n  FormControl,\n  FormDescription,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage\n} from '@/components/ui/form'\n\nconst formSchema = toTypedSchema(z.object({\n  username: z.string().min(2).max(50),\n}))\n\nconst form = useForm({\n  validationSchema: formSchema,\n})\n\nconst onSubmit = form.handleSubmit((values) => {\n  console.log('Form submitted!', values)\n})\n</script>\n\n<template>\n  <form @submit=\"onSubmit\">\n    ...\n  </form>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Command Component Dialog Implementation with Keyboard Shortcut\nDESCRIPTION: Example of using the CommandDialog component to display the command menu in a dialog that can be triggered with a keyboard shortcut (⌘+J) using VueUse's useMagicKeys.\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/docs/components/command.md#2025-04-23_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { useMagicKeys } from '@vueuse/core'\n\nimport { ref, watch } from 'vue'\n\nconst open = ref(false)\n\nconst keys = useMagicKeys()\nconst CmdJ = keys['Cmd+J']\n\nfunction handleOpenChange() {\n  open.value = !open.value\n}\n\nwatch(CmdJ, (v) => {\n  if (v)\n    handleOpenChange()\n})\n</script>\n\n<template>\n  <div>\n    <p class=\"text-sm text-muted-foreground\">\n      Press\n      <kbd\n        class=\"pointer-events-none inline-flex h-5 select-none items-center gap-1 rounded border bg-muted px-1.5 font-mono text-[10px] font-medium text-muted-foreground opacity-100\"\n      >\n        <span class=\"text-xs\">⌘</span>J\n      </kbd>\n    </p>\n    <CommandDialog :open=\"open\" @update:open=\"handleOpenChange\">\n      <CommandInput placeholder=\"Type a command or search...\" />\n      <CommandList>\n        <CommandEmpty>No results found.</CommandEmpty>\n        <CommandGroup heading=\"Suggestions\">\n          <CommandItem value=\"calendar\">\n            Calendar\n          </CommandItem>\n          <CommandItem value=\"search-emoji\">\n            Search Emoji\n          </CommandItem>\n          <CommandItem value=\"calculator\">\n            Calculator\n          </CommandItem>\n        </CommandGroup>\n        <CommandSeparator />\n        <CommandGroup heading=\"Settings\">\n          <CommandItem value=\"profile\">\n            Profile\n          </CommandItem>\n          <CommandItem value=\"billing\">\n            Billing\n          </CommandItem>\n          <CommandItem value=\"settings\">\n            Settings\n          </CommandItem>\n        </CommandGroup>\n      </CommandList>\n    </CommandDialog>\n  </div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Basic Resizable Component Usage\nDESCRIPTION: Example of how to use the Resizable components to create a horizontal panel group with two panels. Shows the basic component import and template structure.\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/docs/components/resizable.md#2025-04-23_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport {\n  ResizableHandle,\n  ResizablePanel,\n  ResizablePanelGroup,\n} from '@/components/ui/resizable'\n</script>\n\n<template>\n  <ResizablePanelGroup direction=\"horizontal\">\n    <ResizablePanel>One</ResizablePanel>\n    <ResizableHandle />\n    <ResizablePanel>Two</ResizablePanel>\n  </ResizablePanelGroup>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Using DataTableViewOptions Component in Vue.js\nDESCRIPTION: This snippet shows how to use the DataTableViewOptions component within a parent component, passing the table instance as a prop.\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/docs/components/data-table.md#2025-04-23_snippet_25\n\nLANGUAGE: vue\nCODE:\n```\n<DataTableViewOptions :table=\"table\" />\n```\n\n----------------------------------------\n\nTITLE: Implementing a Basic Context Menu in Vue\nDESCRIPTION: This example demonstrates how to implement a context menu component in Vue. It imports all necessary components and sets up a basic structure with a trigger and menu items for user interaction.\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/docs/components/context-menu.md#2025-04-23_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport {\n  ContextMenu,\n  ContextMenuCheckboxItem,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuLabel,\n  ContextMenuRadioGroup,\n  ContextMenuRadioItem,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuTrigger,\n} from '@/components/ui/context-menu'\n</script>\n\n<template>\n  <ContextMenu>\n    <ContextMenuTrigger>Right click</ContextMenuTrigger>\n    <ContextMenuContent>\n      <ContextMenuItem>Profile</ContextMenuItem>\n      <ContextMenuItem>Billing</ContextMenuItem>\n      <ContextMenuItem>Team</ContextMenuItem>\n      <ContextMenuItem>Subscription</ContextMenuItem>\n    </ContextMenuContent>\n  </ContextMenu>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Using useSidebar Composable in Vue\nDESCRIPTION: Demonstrates how to use the useSidebar composable to control the sidebar state and behavior in a Vue component.\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/docs/components/sidebar.md#2025-04-23_snippet_14\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { useSidebar } from \"@/components/ui/sidebar\";\n\nconst {\n  state,\n  open,\n  setOpen,\n  openMobile,\n  setOpenMobile,\n  isMobile,\n  toggleSidebar,\n} = useSidebar()\n</script>\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of Alert Component in Vue\nDESCRIPTION: Example showing how to import and use the Alert component with its child components AlertTitle and AlertDescription in a Vue component.\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/docs/components/alert.md#2025-04-23_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { Alert, AlertDescription, AlertTitle } from '@/components/ui/alert'\n</script>\n\n<template>\n  <Alert>\n    <AlertTitle>Heads up!</AlertTitle>\n    <AlertDescription>\n      You can add components to your app using the cli.\n    </AlertDescription>\n  </Alert>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Custom Field Component Implementation\nDESCRIPTION: Vue component implementation for custom form field rendering\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/docs/components/auto-form.md#2025-04-23_snippet_3\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport type { FieldProps } from './interface'\nimport { AutoFormLabel } from '@/ui/auto-form'\nimport { FormControl, FormDescription, FormField, FormItem, FormMessage } from '@/ui/form'\nimport { Input } from '@/ui/input'\nimport { computed } from 'vue'\nimport AutoFormLabel from './AutoFormLabel.vue'\n\nconst props = defineProps<FieldProps>()\n</script>\n\n<template>\n  <FormField v-slot=\"slotProps\" :name=\"fieldName\">\n    <FormItem v-bind=\"$attrs\">\n      <AutoFormLabel v-if=\"!config?.hideLabel\" :required=\"required\">\n        {{ config?.label }}\n      </AutoFormLabel>\n      <FormControl>\n        <CustomInput v-bind=\"slotProps\" />\n      </FormControl>\n      <FormDescription v-if=\"config?.description\">\n        {{ config.description }}\n      </FormDescription>\n      <FormMessage />\n    </FormItem>\n  </FormField>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Defining a Form with Form Component\nDESCRIPTION: Alternative approach to creating a form using the Form component from VeeValidate instead of the useForm composable, showing the component-based approach.\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/docs/components/form.md#2025-04-23_snippet_7\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { toTypedSchema } from '@vee-validate/zod'\nimport * as z from 'zod'\nimport {\n  Form,\n  FormControl,\n  FormDescription,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage\n} from '@/components/ui/form'\n\nconst formSchema = toTypedSchema(z.object({\n  username: z.string().min(2).max(50),\n}))\n\nfunction onSubmit(values) {\n  console.log('Form submitted!', values)\n}\n</script>\n\n<template>\n  <Form :validation-schema=\"formSchema\" @submit=\"onSubmit\">\n    ...\n  </Form>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Creating Component Root with Primitive in Vue Button Component\nDESCRIPTION: Shows implementation of a Button component using Primitive as root component. Includes prop interface extension, default props configuration, and variant handling with proper type support.\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/docs/contribution.md#2025-04-23_snippet_10\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport type { HTMLAttributes } from 'vue'\nimport { cn } from '@/lib/utils'\nimport { Primitive, type PrimitiveProps } from 'reka-ui'\nimport { type ButtonVariants, buttonVariants } from '.'\n\ninterface Props extends PrimitiveProps {\n  variant?: ButtonVariants['variant']\n  size?: ButtonVariants['size']\n  class?: HTMLAttributes['class']\n}\n\nconst props = withDefaults(defineProps<Props>(), {\n  as: 'button',\n})\n</script>\n\n<template>\n  <Primitive\n    :as=\"as\"\n    :as-child=\"asChild\"\n    :class=\"cn(buttonVariants({ variant, size }), props.class)\"\n  >\n    <slot />\n  </Primitive>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Implementing Collapsible Component in Vue\nDESCRIPTION: Example implementation of a Collapsible component in Vue using the shadcn-vue library. Demonstrates how to create an expandable/collapsible panel with trigger and content sections. Uses v-model binding for controlling the open state.\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/docs/components/collapsible.md#2025-04-23_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport {\n  Collapsible,\n  CollapsibleContent,\n  CollapsibleTrigger,\n} from '@/components/ui/collapsible'\nimport { ref } from 'vue'\n\nconst isOpen = ref(false)\n</script>\n\n<template>\n  <Collapsible v-model:open=\"isOpen\">\n    <CollapsibleTrigger>Can I use this in my project?</CollapsibleTrigger>\n    <CollapsibleContent>\n      Yes. Free to use for personal and commercial projects. No attribution\n      required.\n    </CollapsibleContent>\n  </Collapsible>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Implementing Tooltip Component in Vue\nDESCRIPTION: Example of how to use the Tooltip component in a Vue application. It imports the necessary components and demonstrates the proper component hierarchy with TooltipProvider as the parent, containing Tooltip with TooltipTrigger and TooltipContent children.\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/docs/components/tooltip.md#2025-04-23_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger\n} from '@/components/ui/tooltip'\n</script>\n\n<template>\n  <TooltipProvider>\n    <Tooltip>\n      <TooltipTrigger>Hover</TooltipTrigger>\n      <TooltipContent>\n        <p>Add to library</p>\n      </TooltipContent>\n    </Tooltip>\n  </TooltipProvider>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Style from Scratch in shadcn-vue\nDESCRIPTION: A registry style item that creates a new style from scratch without extending shadcn-vue. It installs tailwind-merge and clsx, adds utility components, and defines custom CSS variables for a complete theme.\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/docs/registry/examples.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"$schema\": \"https://shadcn-vue.com/schema/registry-item.json\",\n  \"extends\": \"none\",\n  \"name\": \"new-style\",\n  \"type\": \"registry:style\",\n  \"dependencies\": [\"tailwind-merge\", \"clsx\"],\n  \"registryDependencies\": [\n    \"utils\",\n    \"https://example.com/r/button.json\",\n    \"https://example.com/r/input.json\",\n    \"https://example.com/r/label.json\",\n    \"https://example.com/r/select.json\"\n  ],\n  \"cssVars\": {\n    \"theme\": {\n      \"font-sans\": \"Inter, sans-serif\",\n    }\n    \"light\": {\n      \"main\": \"#88aaee\",\n      \"bg\": \"#dfe5f2\",\n      \"border\": \"#000\",\n      \"text\": \"#000\",\n      \"ring\": \"#000\",\n    },\n    \"dark\": {\n      \"main\": \"#88aaee\",\n      \"bg\": \"#272933\",\n      \"border\": \"#000\",\n      \"text\": \"#e6e6e6\",\n      \"ring\": \"#fff\",\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Dropdown Menu in Vue\nDESCRIPTION: Example of how to use the dropdown menu component in a Vue template. It demonstrates importing necessary components and structuring the dropdown menu with a trigger, content, label, separator, and menu items.\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/docs/components/dropdown-menu.md#2025-04-23_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuTrigger,\n} from '@/components/ui/dropdown-menu'\n</script>\n\n<template>\n  <DropdownMenu>\n    <DropdownMenuTrigger>Open</DropdownMenuTrigger>\n    <DropdownMenuContent>\n      <DropdownMenuLabel>My Account</DropdownMenuLabel>\n      <DropdownMenuSeparator />\n      <DropdownMenuItem>Profile</DropdownMenuItem>\n      <DropdownMenuItem>Billing</DropdownMenuItem>\n      <DropdownMenuItem>Team</DropdownMenuItem>\n      <DropdownMenuItem>Subscription</DropdownMenuItem>\n    </DropdownMenuContent>\n  </DropdownMenu>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Creating Date Range Picker with Independent Months in Vue.js\nDESCRIPTION: This snippet demonstrates how to implement a Date Range Picker with independent month selection, providing more flexibility in date range selection.\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/docs/components/date-picker.md#2025-04-23_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<ComponentPreview name=\"DatePickerWithIndependentMonths\" />\n```\n\n----------------------------------------\n\nTITLE: Basic Command Component Implementation in Vue\nDESCRIPTION: Basic implementation of the Command component showing how to structure the command menu with input, list, groups, items, and separators.\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/docs/components/command.md#2025-04-23_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport {\n  Command,\n  CommandDialog,\n  CommandEmpty,\n  CommandGroup,\n  CommandInput,\n  CommandItem,\n  CommandList,\n  CommandSeparator,\n  CommandShortcut,\n} from '@/components/ui/command'\n</script>\n\n<template>\n  <Command>\n    <CommandInput placeholder=\"Type a command or search...\" />\n    <CommandList>\n      <CommandEmpty>No results found.</CommandEmpty>\n      <CommandGroup heading=\"Suggestions\">\n        <CommandItem value=\"calendar\">\n          Calendar\n        </CommandItem>\n        <CommandItem value=\"search-emoji\">\n          Search Emoji\n        </CommandItem>\n        <CommandItem value=\"calculator\">\n          Calculator\n        </CommandItem>\n      </CommandGroup>\n      <CommandSeparator />\n      <CommandGroup heading=\"Settings\">\n        <CommandItem value=\"profile\">\n          Profile\n        </CommandItem>\n        <CommandItem value=\"billing\">\n          Billing\n        </CommandItem>\n        <CommandItem value=\"settings\">\n          Settings\n        </CommandItem>\n      </CommandGroup>\n    </CommandList>\n  </Command>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Defining Column Definitions with Formatting\nDESCRIPTION: TypeScript implementation of column definitions for the data table, including formatting for the amount column.\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/docs/components/data-table.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { h } from 'vue'\n\nexport const columns: ColumnDef<Payment>[] = [\n  {\n    accessorKey: 'amount',\n    header: () => h('div', { class: 'text-right' }, 'Amount'),\n    cell: ({ row }) => {\n      const amount = Number.parseFloat(row.getValue('amount'))\n      const formatted = new Intl.NumberFormat('en-US', {\n        style: 'currency',\n        currency: 'USD',\n      }).format(amount)\n\n      return h('div', { class: 'text-right font-medium' }, formatted)\n    },\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Basic Stepper Component Implementation in Vue\nDESCRIPTION: Example implementation of a basic stepper component with two steps, showing how to structure the component hierarchy with indicators, titles, and descriptions.\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/docs/components/stepper.md#2025-04-23_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport {\n  Stepper,\n  StepperDescription,\n  StepperIndicator,\n  StepperItem,\n  StepperSeparator,\n  StepperTitle,\n  StepperTrigger,\n} from '@/components/ui/stepper'\n</script>\n\n<template>\n  <Stepper>\n    <StepperItem :step=\"1\">\n      <StepperTrigger>\n        <StepperIndicator>1</StepperIndicator>\n        <StepperTitle>Step 1</StepperTitle>\n        <StepperDescription>This is the first step</StepperDescription>\n      </StepperTrigger>\n      <StepperSeparator />\n    </StepperItem>\n    <StepperItem :step=\"2\">\n      <StepperTrigger>\n        <StepperIndicator>2</StepperIndicator>\n        <StepperTitle>Step 2</StepperTitle>\n        <StepperDescription>This is the second step</StepperDescription>\n      </StepperTrigger>\n    </StepperItem>\n  </Stepper>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Implementing Date Range Picker in Vue.js\nDESCRIPTION: This example shows how to create a Date Range Picker using the Date Picker component. It allows users to select a range of dates.\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/docs/components/date-picker.md#2025-04-23_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<ComponentPreview name=\"DatePickerWithRange\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring Nuxt for Dark Mode\nDESCRIPTION: This TypeScript code configures the Nuxt application to use the @nuxtjs/color-mode module. It adds the module to the Nuxt configuration and sets the classSuffix option to an empty string for proper CSS class handling.\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/docs/dark-mode/nuxt.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineNuxtConfig({\n  modules: [\n    '@nuxtjs/tailwindcss',\n    '@nuxtjs/color-mode'\n  ],\n  colorMode: {\n    classSuffix: ''\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Adding Tailwind Animation in Shadcn-Vue Registry JSON Configuration\nDESCRIPTION: This snippet demonstrates how to add a new Tailwind animation in the registry configuration. It involves extending the Tailwind config to include new keyframes and animation definitions. The example adds a 'wiggle' animation that can be used in components.\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/docs/registry/faq.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"$schema\": \"https://shadcn-vue.com/schema/registry-item.json\",\n  \"name\": \"hello-world\",\n  \"title\": \"Hello World\",\n  \"type\": \"registry:block\",\n  \"description\": \"A complex hello world component\",\n  \"files\": [\n    // ...\n  ],\n  \"tailwind\": {\n    \"config\": {\n      \"theme\": {\n        \"extend\": {\n          \"keyframes\": {\n            \"wiggle\": {\n              \"0%, 100%\": { \"transform\": \"rotate(-3deg)\" },\n              \"50%\": { \"transform\": \"rotate(3deg)\" }\n            }\n          },\n          \"animation\": {\n            \"wiggle\": \"wiggle 1s ease-in-out infinite\"\n          }\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of Navigation Menu Component in Vue.js\nDESCRIPTION: Example of how to import and use the Navigation Menu component in a Vue.js template. It demonstrates the basic structure of the menu with a single item and sub-content.\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/docs/components/navigation-menu.md#2025-04-23_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport {\n  NavigationMenu,\n  NavigationMenuContent,\n  NavigationMenuIndicator,\n  NavigationMenuItem,\n  NavigationMenuLink,\n  NavigationMenuList,\n  NavigationMenuTrigger,\n  NavigationMenuViewport,\n} from '@/components/ui/navigation-menu'\n</script>\n\n<template>\n  <NavigationMenu>\n    <NavigationMenuList>\n      <NavigationMenuItem>\n        <NavigationMenuTrigger>Item One</NavigationMenuTrigger>\n        <NavigationMenuContent>\n          <NavigationMenuLink>Link</NavigationMenuLink>\n        </NavigationMenuContent>\n      </NavigationMenuItem>\n    </NavigationMenuList>\n  </NavigationMenu>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Basic Carousel Component Usage in Vue\nDESCRIPTION: Demonstrates the basic implementation of the carousel component with previous and next navigation buttons.\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/docs/components/carousel.md#2025-04-23_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport {\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselNext,\n  CarouselPrevious,\n} from '@/components/ui/carousel'\n</script>\n\n<template>\n  <Carousel>\n    <CarouselContent>\n      <CarouselItem>...</CarouselItem>\n      <CarouselItem>...</CarouselItem>\n      <CarouselItem>...</CarouselItem>\n    </CarouselContent>\n    <CarouselPrevious />\n    <CarouselNext />\n  </Carousel>\n</template>\n```\n\n----------------------------------------\n\nTITLE: FormField with Native Input Element Example\nDESCRIPTION: An example showing how to use the FormField component with a native HTML input element instead of a custom component. It demonstrates the usage of the field binding pattern.\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/docs/components/form.md#2025-04-23_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<FormField v-slot=\"{ field }\">\n  <FormItem>\n    <FormLabel>Username</FormLabel>\n    <FormControl>\n      <input placeholder=\"shadcn\" v-bind=\"field\" />\n    </FormControl>\n    <FormDescription />\n    <FormMessage />\n  </FormItem>\n</FormField>\n```\n\n----------------------------------------\n\nTITLE: Implementing Sortable Column in TanStack Table Column Definition\nDESCRIPTION: A TypeScript snippet showing how to use the DataTableColumnHeader component in a column definition. The header property uses the h() function to render the custom column header with appropriate props for the column and title.\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/docs/components/data-table.md#2025-04-23_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\nexport const columns = [\n  {\n    accessorKey: \"email\",\n    header: ({ column }) => (\n        h(DataTableColumnHeader, {\n            column: column,\n            title: 'Email'\n        })\n    ),\n  },\n]\n```\n\n----------------------------------------\n\nTITLE: Basic Sheet Component Usage in Vue\nDESCRIPTION: Example showing how to use the Sheet component with its various sub-components like SheetTrigger, SheetContent, SheetHeader, SheetTitle, and SheetDescription.\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/docs/components/sheet.md#2025-04-23_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n  SheetTrigger,\n} from '@/components/ui/sheet'\n</script>\n\n<template>\n  <Sheet>\n    <SheetTrigger>Open</SheetTrigger>\n    <SheetContent>\n      <SheetHeader>\n        <SheetTitle>Are you absolutely sure?</SheetTitle>\n        <SheetDescription>\n          This action cannot be undone. This will permanently delete your account\n          and remove your data from our servers.\n        </SheetDescription>\n      </SheetHeader>\n    </SheetContent>\n  </Sheet>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Badge Component Implementation in Vue\nDESCRIPTION: Complete Vue component implementation for Badge. It uses class-variance-authority for styling variants including default, secondary, destructive, and outline. The component accepts a variant prop and passes along any class attributes.\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/docs/components/badge.md#2025-04-23_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport type { VariantProps } from 'class-variance-authority'\nimport { cn } from '@/lib/utils'\nimport { cva } from 'class-variance-authority'\n\ndefineProps<Props>()\n\nconst badgeVariants = cva(\n  'inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2',\n  {\n    variants: {\n      variant: {\n        default:\n          'border-transparent bg-primary text-primary-foreground hover:bg-primary/80',\n        secondary:\n          'border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80',\n        destructive:\n          'border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80',\n        outline: 'text-foreground',\n      },\n    },\n    defaultVariants: {\n      variant: 'default',\n    },\n  },\n)\n\ninterface BadgeVariantProps extends VariantProps<typeof badgeVariants> {}\n\ninterface Props {\n  variant?: BadgeVariantProps['variant']\n}\n</script>\n\n<template>\n  <div :class=\"cn(badgeVariants({ variant }), $attrs.class ?? '')\">\n    <slot />\n  </div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Inset Sidebar Variant Implementation in Vue\nDESCRIPTION: Shows how to use the inset variant of the Sidebar component, wrapping the main content in a SidebarInset component.\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/docs/components/sidebar.md#2025-04-23_snippet_13\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <SidebarProvider>\n    <Sidebar variant=\"inset\">\n      <SidebarInset>\n        <main>\n          <slot />\n        </main>\n      </SidebarInset>\n    </Sidebar>\n  </SidebarProvider>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Using the Progress Component in Vue\nDESCRIPTION: Example of how to import and use the Progress component in a Vue component. The component accepts a model-value prop to specify the progress percentage.\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/docs/components/progress.md#2025-04-23_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { Progress } from '@/components/ui/progress'\n</script>\n\n<template>\n  <Progress :model-value=\"33\" />\n</template>\n```\n\n----------------------------------------\n\nTITLE: Displaying Mode Toggle in Astro Page\nDESCRIPTION: This Astro page snippet demonstrates how to import and display the ModeToggle component created in Vue. It uses the client:load directive to ensure the component is loaded and interactive on the client side.\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/docs/dark-mode/astro.md#2025-04-23_snippet_3\n\nLANGUAGE: astro\nCODE:\n```\n---\nimport '../styles/globals.css'\nimport ModeToggle from '@/components/ModeToggle.vue';\n---\n\n<!-- Inline script -->\n\n<html lang=\"en\">\n\t<body>\n      <h1>Astro</h1>\n      <ModeToggle client:load />\n\t</body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Implementing Pagination Component in Vue\nDESCRIPTION: Example of how to implement the Pagination component in a Vue application. The example demonstrates a pagination interface with first, previous, next, and last page navigation buttons, along with page numbers and ellipsis for skipped pages.\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/docs/components/pagination.md#2025-04-23_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport {\n  Button,\n} from '@/components/ui/button'\n\nimport {\n  Pagination,\n  PaginationEllipsis,\n  PaginationFirst,\n  PaginationLast,\n  PaginationList,\n  PaginationListItem,\n  PaginationNext,\n  PaginationPrev,\n} from '@/components/ui/pagination'\n</script>\n\n<template>\n  <Pagination v-slot=\"{ page }\" :items-per-page=\"10\" :total=\"100\" :sibling-count=\"1\" show-edges :default-page=\"2\">\n    <PaginationList v-slot=\"{ items }\" class=\"flex items-center gap-1\">\n      <PaginationFirst />\n      <PaginationPrev />\n\n      <template v-for=\"(item, index) in items\">\n        <PaginationListItem v-if=\"item.type === 'page'\" :key=\"index\" :value=\"item.value\" as-child>\n          <Button class=\"w-10 h-10 p-0\" :variant=\"item.value === page ? 'default' : 'outline'\">\n            {{ item.value }}\n          </Button>\n        </PaginationListItem>\n        <PaginationEllipsis v-else :key=\"item.type\" :index=\"index\" />\n      </template>\n\n      <PaginationNext />\n      <PaginationLast />\n    </PaginationList>\n  </Pagination>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Carousel Event Handling with Event Listeners\nDESCRIPTION: Example showing how to listen to carousel events using the API obtained through the init-api event.\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/docs/components/carousel.md#2025-04-23_snippet_9\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nimport { nextTick, ref, watch } from 'vue'\nimport { useCarousel } from '@/components/ui/carousel'\n\nconst api = ref<CarouselApi>()\n\nfunction setApi(val: CarouselApi) {\n  api.value = val\n}\n\nconst stop = watch(api, (api) => {\n  if (!api)\n    return\n\n  // Watch only once or use watchOnce() in @vueuse/core\n  nextTick(() => stop())\n\n  api.on('select', () => {\n    // Do something on select.\n  })\n})\n</script>\n\n<template>\n  <Carousel @init-api=\"setApi\">\n    ...\n  </Carousel>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Implementing Toaster Component in App.vue\nDESCRIPTION: Setup for the base Toaster component in the main App.vue file, including optional ClientOnly wrapper for Nuxt applications\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/docs/components/toast.md#2025-04-23_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport Toaster from '@/components/ui/toast/Toaster.vue'\n</script>\n\n<template>\n  <Toaster />\n\n  <!-- Nuxt  -->\n  <ClientOnly>\n    <Toaster />\n  </ClientOnly>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Basic Sidebar Usage in Vue\nDESCRIPTION: Demonstrates how to use the Sidebar component with different props for side, variant, and collapsible behavior.\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/docs/components/sidebar.md#2025-04-23_snippet_12\n\nLANGUAGE: vue\nCODE:\n```\n<Sidebar side=\"left | right\" />\n\n<Sidebar variant=\"sidebar | floating | inset\" />\n\n<Sidebar collapsible=\"offcanvas | icon | none\" />\n```\n\n----------------------------------------\n\nTITLE: Accessing Carousel API with Template Ref\nDESCRIPTION: Shows how to access the carousel API through a template ref on the Carousel component for programmatic control.\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/docs/components/carousel.md#2025-04-23_snippet_8\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nconst carouselContainerRef = ref<InstanceType<typeof Carousel> | null>(null)\n\nfunction accessApi() {\n  carouselContainerRef.value?.carouselApi.on('select', () => {})\n}\n</script>\n\n<template>\n  <Carousel ref=\"carouselContainerRef\">\n    ...\n  </Carousel>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Implementing Field Dependencies in AutoForm\nDESCRIPTION: Shows how to configure field dependencies in AutoForm using the dependencies prop. Includes examples of hiding fields based on age and setting meal options based on dietary preferences. Demonstrates various dependency types including HIDES and SETS_OPTIONS.\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/docs/components/auto-form.md#2025-04-23_snippet_6\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <AutoForm\n    :dependencies=\"[\n      {\n        // 'age' hides 'parentsAllowed' when the age is 18 or older\n        sourceField: 'age',\n        type: DependencyType.HIDES,\n        targetField: 'parentsAllowed',\n        when: age => age >= 18,\n      },\n      {\n        // 'vegetarian' checkbox hides the 'Beef Wellington' option from 'mealOptions'\n        // if its not already selected\n        sourceField: 'vegetarian',\n        type: DependencyType.SETS_OPTIONS,\n        targetField: 'mealOptions',\n        when: (vegetarian, mealOption) =>\n          vegetarian && mealOption !== 'Beef Wellington',\n        options: ['Pasta', 'Salad'],\n      },\n    ]\"\n  />\n</template>\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering a Dashboard Example Component in Vue\nDESCRIPTION: This snippet shows how to import a component from a specific path in the project and then render it in the template section. The component uses Vue's script setup syntax for composition API and renders the imported DashboardExample component.\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/examples/dashboard.md#2025-04-23_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nimport DashboardExample from \"@/examples/dashboard/Example.vue\"\n</script>\n\n<DashboardExample />\n```\n\n----------------------------------------\n\nTITLE: Basic Checkbox Implementation - Vue\nDESCRIPTION: Basic implementation of the checkbox component in a Vue component showing component import and basic usage with an ID property\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/docs/components/checkbox.md#2025-04-23_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { Checkbox } from '@/components/ui/checkbox'\n</script>\n\n<template>\n  <Checkbox id=\"terms\" />\n</template>\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Radio Group in Vue\nDESCRIPTION: Example of how to use the RadioGroup and RadioGroupItem components with labels in a Vue component. The component sets up two radio options with their associated labels.\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/docs/components/radio-group.md#2025-04-23_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { Label } from '@/components/ui/label'\nimport { RadioGroup, RadioGroupItem } from '@/components/ui/radio-group'\n</script>\n\n<template>\n  <RadioGroup default-value=\"option-one\">\n    <div class=\"flex items-center space-x-2\">\n      <RadioGroupItem id=\"option-one\" value=\"option-one\" />\n      <Label for=\"option-one\">Option One</Label>\n    </div>\n    <div class=\"flex items-center space-x-2\">\n      <RadioGroupItem id=\"option-two\" value=\"option-two\" />\n      <Label for=\"option-two\">Option Two</Label>\n    </div>\n  </RadioGroup>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Basic Sidebar Component Structure\nDESCRIPTION: Template for creating a sidebar component with header, content, group, and footer sections.\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/docs/components/sidebar.md#2025-04-23_snippet_3\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarHeader,\n} from '@/components/ui/sidebar'\n</script>\n\n<template>\n  <Sidebar>\n    <SidebarHeader />\n    <SidebarContent>\n      <SidebarGroup />\n      <SidebarGroup />\n    </SidebarContent>\n    <SidebarFooter />\n  </Sidebar>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Basic Switch Component Usage\nDESCRIPTION: Basic implementation of the Switch component in a Vue application. Demonstrates importing and using the component in a template.\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/docs/components/switch.md#2025-04-23_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { Switch } from '@/components/ui/switch'\n</script>\n\n<template>\n  <Switch />\n</template>\n```\n\n----------------------------------------\n\nTITLE: Basic SidebarMenu Implementation with Projects List in Vue\nDESCRIPTION: Example of a SidebarMenu component that renders a list of projects. Each project is displayed as a menu item with an icon and a name, linking to a specified URL.\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/docs/components/sidebar.md#2025-04-23_snippet_21\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n<Sidebar>\n  <SidebarContent>\n    <SidebarGroup>\n      <SidebarGroupLabel>Projects</SidebarGroupLabel>\n      <SidebarGroupContent>\n        <SidebarMenu>\n            <SidebarMenuItem v-for=\"project in projects\" :key=\"project.name\">\n              <SidebarMenuButton asChild>\n                <a :href=\"project.url\">\n                  <component :is=\"project.icon\" />\n                  <span>{{project.name}}</span>\n                </a>\n              </SidebarMenuButton>\n            </SidebarMenuItem>\n        </SidebarMenu>\n      </SidebarGroupContent>\n    </SidebarGroup>\n  </SidebarContent>\n</Sidebar>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Basic Breadcrumb Implementation in Vue\nDESCRIPTION: Basic implementation of a breadcrumb navigation showing a three-level hierarchy with home, components, and current page.\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/docs/components/breadcrumb.md#2025-04-23_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport {\n  Breadcrumb,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbList,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n} from '@/components/ui/breadcrumb'\n</script>\n\n<template>\n  <Breadcrumb>\n    <BreadcrumbList>\n      <BreadcrumbItem>\n        <BreadcrumbLink href=\"/\">\n          Home\n        </BreadcrumbLink>\n      </BreadcrumbItem>\n      <BreadcrumbSeparator />\n      <BreadcrumbItem>\n        <BreadcrumbLink href=\"/components\">\n          Components\n        </BreadcrumbLink>\n      </BreadcrumbItem>\n      <BreadcrumbSeparator />\n      <BreadcrumbItem>\n        <BreadcrumbPage>Breadcrumb</BreadcrumbPage>\n      </BreadcrumbItem>\n    </BreadcrumbList>\n  </Breadcrumb>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Adding Expand Action to DataTableDropdown Component in Vue\nDESCRIPTION: A dropdown menu component for data table rows that provides various actions including a new 'Expand' option. The component emits an 'expand' event when the expand option is clicked and also allows copying the payment ID to clipboard.\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/docs/components/data-table.md#2025-04-23_snippet_18\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { MoreHorizontal } from 'lucide-vue-next'\nimport { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuLabel, DropdownMenuSeparator, DropdownMenuTrigger } from '@/components/ui/dropdown-menu'\nimport { Button } from '@/components/ui/button'\n\ndefineProps<{\n  payment: {\n    id: string\n  }\n}>()\n\ndefineEmits<{\n  (e: 'expand'): void\n}>()\n\nfunction copy(id: string) {\n  navigator.clipboard.writeText(id)\n}\n</script>\n\n<template>\n  <DropdownMenu>\n    <DropdownMenuTrigger as-child>\n      <Button variant=\"ghost\" class=\"w-8 h-8 p-0\">\n        <span class=\"sr-only\">Open menu</span>\n        <MoreHorizontal class=\"w-4 h-4\" />\n      </Button>\n    </DropdownMenuTrigger>\n    <DropdownMenuContent align=\"end\">\n      <DropdownMenuLabel>Actions</DropdownMenuLabel>\n      <DropdownMenuItem @click=\"copy(payment.id)\">\n        Copy payment ID\n      </DropdownMenuItem>\n      <DropdownMenuItem @click=\"$emit('expand')\">\n        Expand\n      </DropdownMenuItem>\n      <DropdownMenuSeparator />\n      <DropdownMenuItem>View customer</DropdownMenuItem>\n      <DropdownMenuItem>View payment details</DropdownMenuItem>\n    </DropdownMenuContent>\n  </DropdownMenu>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Creating a Collapsible SidebarGroup in Vue\nDESCRIPTION: Shows how to implement a collapsible SidebarGroup using the Collapsible component.\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/docs/components/sidebar.md#2025-04-23_snippet_19\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <Collapsible defaultOpen class=\"group/collapsible\">\n    <SidebarGroup>\n      <SidebarGroupLabel asChild>\n        <CollapsibleTrigger>\n          Help\n          <ChevronDown class=\"ml-auto transition-transform group-data-[state=open]/collapsible:rotate-180\" />\n        </CollapsibleTrigger>\n      </SidebarGroupLabel>\n      <CollapsibleContent>\n        <SidebarGroupContent />\n      </CollapsibleContent>\n    </SidebarGroup>\n  </Collapsible>\n</template>\n```\n\n----------------------------------------\n\nTITLE: SidebarMenuButton with Icon and Label in Vue\nDESCRIPTION: Demonstrates how to include an icon and a truncated label inside a SidebarMenuButton. The label needs to be wrapped in a span tag for proper styling.\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/docs/components/sidebar.md#2025-04-23_snippet_23\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <SidebarMenuButton asChild>\n    <a href=\"#\">\n      <Home />\n      <span>Home</span>\n    </a>\n  </SidebarMenuButton>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Implementing Avatar Component in Vue\nDESCRIPTION: Example of using the Avatar component with image source and fallback content. Shows how to import and structure the Avatar, AvatarImage, and AvatarFallback components.\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/docs/components/avatar.md#2025-04-23_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar'\n</script>\n\n<template>\n  <Avatar>\n    <AvatarImage src=\"https://github.com/unovue.png\" alt=\"@unovue\" />\n    <AvatarFallback>CN</AvatarFallback>\n  </Avatar>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Implementing Scroll Area in Vue\nDESCRIPTION: Example of how to implement a ScrollArea component in a Vue application. The component creates a scrollable container with custom styling and demonstrates text content overflow handling.\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/docs/components/scroll-area.md#2025-04-23_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { ScrollArea } from '@/components/ui/scroll-area'\n</script>\n\n<template>\n  <ScrollArea class=\"h-[200px] w-[350px] rounded-md border p-4\">\n    Jokester began sneaking into the castle in the middle of the night and leaving\n    jokes all over the place: under the king's pillow, in his soup, even in the\n    royal toilet. The king was furious, but he couldn't seem to stop Jokester. And\n    then, one day, the people of the kingdom discovered that the jokes left by\n    Jokester were so funny that they couldn't help but laugh. And once they\n    started laughing, they couldn't stop.\n  </ScrollArea>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Theme Variables to shadcn-vue\nDESCRIPTION: A registry theme item that adds custom theme variables such as font-heading and shadow-card. These variables can be used throughout the application for consistent styling.\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/docs/registry/examples.md#2025-04-23_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"$schema\": \"https://shadcn-vue.com/schema/registry-item.json\",\n  \"name\": \"custom-theme\",\n  \"type\": \"registry:theme\",\n  \"cssVars\": {\n    \"theme\": {\n      \"font-heading\": \"Inter, sans-serif\",\n      \"shadow-card\": \"0 0 0 1px rgba(0, 0, 0, 0.1)\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Collapsed Breadcrumb with Ellipsis\nDESCRIPTION: Implementation showing how to handle long breadcrumbs using the BreadcrumbEllipsis component.\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/docs/components/breadcrumb.md#2025-04-23_snippet_4\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport {\n  Breadcrumb,\n  BreadcrumbEllipsis,\n  BreadcrumbItem,\n  BreadcrumbList,\n} from '@/components/ui/breadcrumb'\n</script>\n\n<template>\n  <Breadcrumb>\n    <BreadcrumbList>\n      <!-- ... -->\n      <BreadcrumbItem>\n        <BreadcrumbEllipsis />\n      </BreadcrumbItem>\n      <!-- ... -->\n    </BreadcrumbList>\n  </Breadcrumb>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Adding New Tailwind Color in Shadcn-Vue Registry JSON Configuration\nDESCRIPTION: This snippet shows how to add a new Tailwind color in the registry configuration. It includes adding the color to cssVars for light and dark modes, and extending the Tailwind config to include the new color. The new color can then be used as utility classes.\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/docs/registry/faq.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"$schema\": \"https://shadcn-vue.com/schema/registry-item.json\",\n  \"name\": \"hello-world\",\n  \"title\": \"Hello World\",\n  \"type\": \"registry:block\",\n  \"description\": \"A complex hello world component\",\n  \"files\": [\n    // ...\n  ],\n  \"cssVars\": {\n    \"light\": {\n      \"brand-background\": \"20 14.3% 4.1%\",\n      \"brand-accent\": \"20 14.3% 4.1%\"\n    },\n    \"dark\": {\n      \"brand-background\": \"20 14.3% 4.1%\",\n      \"brand-accent\": \"20 14.3% 4.1%\"\n    }\n  },\n  \"tailwind\": {\n    \"config\": {\n      \"theme\": {\n        \"extend\": {\n          \"colors\": {\n            \"brand\": {\n              \"DEFAULT\": \"hsl(var(--brand-background))\",\n              \"accent\": \"hsl(var(--brand-accent))\"\n            }\n          }\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Carousel Slot Props for Conditional Rendering\nDESCRIPTION: Demonstrates how to use reactive slot props from the Carousel component for conditional rendering of navigation buttons.\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/docs/components/carousel.md#2025-04-23_snippet_10\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <Carousel v-slot=\"{ canScrollNext, canScrollPrev }\">\n    ...\n    <CarouselPrevious v-if=\"canScrollPrev\" />\n    <CarouselNext v-if=\"canScrollNext\" />\n  </Carousel>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Creating Vertical Resizable Panels\nDESCRIPTION: Implementation of a vertical resizable panel group. Uses the direction prop set to \"vertical\" instead of the default horizontal orientation.\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/docs/components/resizable.md#2025-04-23_snippet_3\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport {\n  ResizableHandle,\n  ResizablePanel,\n  ResizablePanelGroup,\n} from '@/components/ui/resizable'\n</script>\n\n<template>\n  <ResizablePanelGroup direction=\"vertical\">\n    <ResizablePanel>One</ResizablePanel>\n    <ResizableHandle />\n    <ResizablePanel>Two</ResizablePanel>\n  </ResizablePanelGroup>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Implementing a Dark Mode Toggle Component with VueUse in Vitepress\nDESCRIPTION: Creates a theme toggle button component using shadcn-vue Button component and VueUse's useToggle hook. The component displays different icons based on the current theme and allows users to switch between light and dark modes.\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/docs/dark-mode/vitepress.md#2025-04-23_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { Button } from '@/registry/default/ui/button'\nimport { useToggle } from '@vueuse/core'\nimport { useData } from 'vitepress'\n\nconst { frontmatter, isDark } = useData()\nconst toggleDark = useToggle(isDark)\n</script>\n\n<template>\n  <Button variant=\"outline\">\n    <Icon icon=\"radix-icons:moon\" class=\"h-[1.2rem] w-[1.2rem] rotate-0 scale-100 transition-all dark:-rotate-90 dark:scale-0\" />\n    <Icon icon=\"radix-icons:sun\" class=\"absolute h-[1.2rem] w-[1.2rem] rotate-90 scale-0 transition-all dark:rotate-0 dark:scale-100\" />\n    <span class=\"sr-only\">Toggle theme</span>\n  </Button>\n</template>\n```\n\n----------------------------------------\n\nTITLE: SidebarMenuAction with Button and Link in Vue\nDESCRIPTION: Example showing how SidebarMenuAction can work independently alongside SidebarMenuButton, allowing for a clickable link alongside an action button.\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/docs/components/sidebar.md#2025-04-23_snippet_25\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <SidebarMenuItem>\n    <SidebarMenuButton asChild>\n      <a href=\"#\">\n        <Home />\n        <span>Home</span>\n      </a>\n    </SidebarMenuButton>\n    <SidebarMenuAction>\n      <Plus /> <span class=\"sr-only\">Add Project</span>\n    </SidebarMenuAction>\n  </SidebarMenuItem>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Updating CSS Variables for Tailwind v4 in shadcn-vue\nDESCRIPTION: This snippet demonstrates how to update CSS variables to work with Tailwind v4's new @theme directive. It shows the initial structure and the recommended changes for better compatibility and ease of use.\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/docs/tailwind-v4.md#2025-04-23_snippet_3\n\nLANGUAGE: css\nCODE:\n```\n@layer base {\n  :root {\n    --background: 0 0% 100%;\n    --foreground: 0 0% 3.9%;\n  }\n}\n\n@theme {\n  --color-background: hsl(var(--background));\n  --color-foreground: hsl(var(--foreground));\n}\n```\n\nLANGUAGE: css\nCODE:\n```\n:root {\n  --background: hsl(0 0% 100%);\n  --foreground: hsl(0 0% 3.9%);\n}\n\n.dark {\n  --background: hsl(0 0% 3.9%);\n  --foreground: hsl(0 0% 98%);\n}\n\n@theme inline {\n  --color-background: var(--background);\n  --color-foreground: var(--foreground);\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Payment Interface and Sample Data\nDESCRIPTION: TypeScript interface for the Payment model with sample data that will be used throughout the data table implementation.\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/docs/components/data-table.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Payment {\n  id: string\n  amount: number\n  status: 'pending' | 'processing' | 'success' | 'failed'\n  email: string\n}\n\nexport const payments: Payment[] = [\n  {\n    id: '728ed52f',\n    amount: 100,\n    status: 'pending',\n    email: 'm@example.com',\n  },\n  {\n    id: '489e1d42',\n    amount: 125,\n    status: 'processing',\n    email: 'example@gmail.com',\n  },\n  // ...\n]\n```\n\n----------------------------------------\n\nTITLE: Creating a Row Actions Dropdown Component\nDESCRIPTION: Vue component that implements a dropdown menu for row actions in the data table, with options to copy IDs and view details.\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/docs/components/data-table.md#2025-04-23_snippet_6\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { Button } from '@/components/ui/button'\nimport { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuLabel, DropdownMenuSeparator, DropdownMenuTrigger } from '@/components/ui/dropdown-menu'\nimport { MoreHorizontal } from 'lucide-vue-next'\n\ndefineProps<{\n  payment: {\n    id: string\n  }\n}>()\n\nfunction copy(id: string) {\n  navigator.clipboard.writeText(id)\n}\n</script>\n\n<template>\n  <DropdownMenu>\n    <DropdownMenuTrigger as-child>\n      <Button variant=\"ghost\" class=\"w-8 h-8 p-0\">\n        <span class=\"sr-only\">Open menu</span>\n        <MoreHorizontal class=\"w-4 h-4\" />\n      </Button>\n    </DropdownMenuTrigger>\n    <DropdownMenuContent align=\"end\">\n      <DropdownMenuLabel>Actions</DropdownMenuLabel>\n      <DropdownMenuItem @click=\"copy(payment.id)\">\n        Copy payment ID\n      </DropdownMenuItem>\n      <DropdownMenuSeparator />\n      <DropdownMenuItem>View customer</DropdownMenuItem>\n      <DropdownMenuItem>View payment details</DropdownMenuItem>\n    </DropdownMenuContent>\n  </DropdownMenu>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of Slider Component in Vue\nDESCRIPTION: Example of how to import and use the Slider component in a Vue component. The slider is configured with default value, maximum value, and step size.\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/docs/components/slider.md#2025-04-23_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { Slider } from '@/components/ui/slider'\n</script>\n\n<template>\n  <Slider\n    :default-value=\"[33]\" :max=\"100\" :step=\"1\"\n  />\n</template>\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of Skeleton Component in Vue\nDESCRIPTION: Example showing how to import and use the Skeleton component in a Vue component. This creates a rounded loading placeholder with specific width and height.\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/docs/components/skeleton.md#2025-04-23_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { Skeleton } from '@/components/ui/skeleton'\n</script>\n\n<template>\n  <Skeleton class=\"w-[100px] h-5 rounded-full\" />\n</template>\n```\n\n----------------------------------------\n\nTITLE: Utility Functions for Table Operations\nDESCRIPTION: Helper functions for handling class names and value updates in the table implementation.\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/docs/components/data-table.md#2025-04-23_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Updater } from '@tanstack/vue-table'\nimport type { ClassValue } from 'clsx'\n\nimport type { Ref } from 'vue'\nimport { clsx } from 'clsx'\nimport { twMerge } from 'tailwind-merge'\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n\nexport function valueUpdater<T extends Updater<any>>(updaterOrValue: T, ref: Ref) {\n  ref.value = typeof updaterOrValue === 'function'\n    ? updaterOrValue(ref.value)\n    : updaterOrValue\n}\n```\n\n----------------------------------------\n\nTITLE: Using Aspect Ratio Component in Vue\nDESCRIPTION: Example showing how to implement the Aspect Ratio component in a Vue component with a 16:9 ratio for an image.\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/docs/components/aspect-ratio.md#2025-04-23_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { AspectRatio } from '@/components/ui/aspect-ratio'\n</script>\n\n<template>\n  <div class=\"w-[450px]\">\n    <AspectRatio :ratio=\"16 / 9\">\n      <img src=\"...\" alt=\"Image\" class=\"rounded-md object-cover w-full h-full\">\n    </AspectRatio>\n  </div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Minimal Sidebar Implementation Example\nDESCRIPTION: The simplest implementation of the Sidebar component with just the import and component.\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/docs/components/sidebar.md#2025-04-23_snippet_11\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { Sidebar } from \"@/components/ui/sidebar\";\n</script>\n\n<template>\n  <Sidebar />\n</template>\n```\n\n----------------------------------------\n\nTITLE: SidebarTrigger Button Implementation in Vue\nDESCRIPTION: Example of using the SidebarTrigger component within a SidebarProvider to create a button that toggles the sidebar visibility.\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/docs/components/sidebar.md#2025-04-23_snippet_32\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <SidebarProvider>\n    <Sidebar />\n    <main>\n      <SidebarTrigger />\n    </main>\n  </SidebarProvider>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering Shadcn-Vue Account Example Component in Vue\nDESCRIPTION: This snippet shows how to import a Shadcn-Vue Account example component and render it in a Vue template. It uses the script setup syntax for composition API and imports the component from a relative path.\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/examples/forms/account.md#2025-04-23_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nimport AccountExample from \"@/examples/forms/Account.vue\"\n</script>\n\n<AccountExample />\n```\n\n----------------------------------------\n\nTITLE: Importing Date Picker Components in Vue.js\nDESCRIPTION: This snippet demonstrates how to import and use the Date Picker component in a Vue.js application. It includes instructions for installing the necessary components like Popover, Calendar, and Range Calendar.\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/docs/components/date-picker.md#2025-04-23_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<ComponentPreview name=\"DatePickerDemo\" />\n```\n\n----------------------------------------\n\nTITLE: Collapsible SidebarMenu Implementation in Vue\nDESCRIPTION: Shows how to create a collapsible SidebarMenu by wrapping it with Collapsible components. This allows for expanding and collapsing submenu sections.\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/docs/components/sidebar.md#2025-04-23_snippet_28\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <SidebarMenu>\n    <Collapsible defaultOpen class=\"group/collapsible\">\n      <SidebarMenuItem>\n        <CollapsibleTrigger asChild>\n          <SidebarMenuButton />\n        </CollapsibleTrigger>\n        <CollapsibleContent>\n          <SidebarMenuSub>\n            <SidebarMenuSubItem />\n          </SidebarMenuSub>\n        </CollapsibleContent>\n      </SidebarMenuItem>\n    </Collapsible>\n  </SidebarMenu>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Registry Item CSS Variables Configuration\nDESCRIPTION: The cssVars property defines custom CSS variables for light and dark themes that will be applied to the registry item.\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/docs/registry/registry-item-json.md#2025-04-23_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"cssVars\": {\n    \"light\": {\n      \"brand\": \"20 14.3% 4.1%\",\n      \"radius\": \"0.5rem\"\n    },\n    \"dark\": {\n      \"brand\": \"20 14.3% 4.1%\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing shadcn-vue in the project\nDESCRIPTION: Command to initialize shadcn-vue in the project, which sets up the necessary configuration files and structure for using shadcn-vue components.\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/docs/installation/vite.md#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nnpx shadcn-vue@latest init\n```\n\n----------------------------------------\n\nTITLE: Accordion Component Implementation\nDESCRIPTION: Example of wrapping a Reka UI component with props and events forwarding\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/docs/contribution.md#2025-04-23_snippet_6\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport {\n  AccordionRoot,\n  type AccordionRootEmits,\n  type AccordionRootProps,\n  useForwardPropsEmits,\n} from 'reka-ui'\n\nconst props = defineProps<AccordionRootProps>()\nconst emits = defineEmits<AccordionRootEmits>()\n\nconst forwarded = useForwardPropsEmits(props, emits)\n</script>\n\n<template>\n  <AccordionRoot v-bind=\"forwarded\">\n    <slot />\n  </AccordionRoot>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Adding Chart-specific CSS Variables to Tailwind Configuration\nDESCRIPTION: CSS configuration needed for chart components, defining tooltip styling and color variables to be added to the tailwind.css file. Sets up tooltip appearance and defines primary/secondary colors based on design system variables.\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/docs/charts.md#2025-04-23_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n@layer base {\n  :root {\n    /* ... */\n    --vis-tooltip-background-color: none !important;\n    --vis-tooltip-border-color: none !important;\n    --vis-tooltip-text-color: none !important;\n    --vis-tooltip-shadow-color: none !important;\n    --vis-tooltip-backdrop-filter: none !important;\n    --vis-tooltip-padding: none !important;\n\n    --vis-primary-color: var(--primary);\n    /* change to any hsl value you want */\n    --vis-secondary-color: 160 81% 40%;\n    --vis-text-color: var(--muted-foreground);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Tabs Component in Vue\nDESCRIPTION: This snippet demonstrates how to use the Tabs component in a Vue template. It shows the basic structure with TabsList, TabsTrigger, and TabsContent elements.\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/docs/components/tabs.md#2025-04-23_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs'\n</script>\n\n<template>\n  <Tabs default-value=\"account\" class=\"w-[400px]\">\n    <TabsList>\n      <TabsTrigger value=\"account\">\n        Account\n      </TabsTrigger>\n      <TabsTrigger value=\"password\">\n        Password\n      </TabsTrigger>\n    </TabsList>\n    <TabsContent value=\"account\">\n      Make changes to your account here.\n    </TabsContent>\n    <TabsContent value=\"password\">\n      Change your password here.\n    </TabsContent>\n  </Tabs>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Creating Functional Utilities with Variable Parameters\nDESCRIPTION: A registry component item that adds a functional utility with variable parameters. It defines a tab-* utility that sets tab-size based on the provided parameter value using CSS variable substitution.\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/docs/registry/examples.md#2025-04-23_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"$schema\": \"https://shadcn-vue.com/schema/registry-item.json\",\n  \"name\": \"custom-component\",\n  \"type\": \"registry:component\",\n  \"css\": {\n    \"@utility tab-*\": {\n      \"tab-size\": \"var(--tab-size-*)\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Link Component in Breadcrumb\nDESCRIPTION: Example of using a custom router link component (vue-router) within the breadcrumb navigation using the as-child prop.\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/docs/components/breadcrumb.md#2025-04-23_snippet_5\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport {\n  Breadcrumb,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbList,\n} from '@/components/ui/breadcrumb'\nimport { RouterLink } from 'vue-router'\n</script>\n\n<template>\n  <Breadcrumb>\n    <BreadcrumbList>\n      <BreadcrumbItem>\n        <BreadcrumbLink as-child>\n          <RouterLink to=\"/\">\n            Home\n          </RouterLink>\n        </BreadcrumbLink>\n      </BreadcrumbItem>\n      <!--  -->\n    </BreadcrumbList>\n  </Breadcrumb>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Using shadcn-vue Switch Component\nDESCRIPTION: Example of importing and using the Switch component in a Vue component template.\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/docs/installation/laravel.md#2025-04-23_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { Switch } from '@/Components/ui/switch'\n</script>\n\n<template>\n  <div>\n    <Switch />\n  </div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Implementing SidebarFooter with DropdownMenu in Vue\nDESCRIPTION: Demonstrates how to add a SidebarFooter component with a DropdownMenu to the Sidebar.\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/docs/components/sidebar.md#2025-04-23_snippet_16\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <SidebarProvider>\n    <Sidebar>\n      <SidebarHeader />\n      <SidebarContent />\n      <SidebarFooter>\n        <SidebarMenu>\n          <SidebarMenuItem>\n            <DropdownMenu>\n              <DropdownMenuTrigger asChild>\n                <SidebarMenuButton>\n                  <User2 /> Username\n                  <ChevronUp class=\"ml-auto\" />\n                </SidebarMenuButton>\n              </DropdownMenuTrigger>\n              <DropdownMenuContent\n                side=\"top\"\n                class=\"w-[--reka-popper-anchor-width]\"\n              >\n                <DropdownMenuItem>\n                  <span>Account</span>\n                </DropdownMenuItem>\n                <DropdownMenuItem>\n                  <span>Billing</span>\n                </DropdownMenuItem>\n                <DropdownMenuItem>\n                  <span>Sign out</span>\n                </DropdownMenuItem>\n              </DropdownMenuContent>\n            </DropdownMenu>\n          </SidebarMenuItem>\n        </SidebarMenu>\n      </SidebarFooter>\n    </Sidebar>\n  </SidebarProvider>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Custom Link Component with Nuxt in Vue.js Navigation Menu\nDESCRIPTION: Demonstrates how to use a custom Nuxt link component within the Navigation Menu, applying the correct trigger styles and handling navigation.\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/docs/components/navigation-menu.md#2025-04-23_snippet_3\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <NavigationMenuItem>\n    <NuxtLink v-slot=\"{ isActive, href, navigate }\" to=\"/docs\" custom>\n      <NavigationMenuLink :active=\"isActive\" :href :class=\"navigationMenuTriggerStyle()\" @click=\"navigate\">\n        Documentation\n      </NavigationMenuLink>\n    </NuxtLink>\n  </NavigationMenuItem>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Configuring Shadcn Nuxt Module\nDESCRIPTION: Configuration setup in nuxt.config.ts file to enable the Shadcn module with customizable options for prefix and component directory.\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/packages/module/README.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexport default defineNuxtConfig({\n  modules: [\n    'shadcn-nuxt'\n  ],\n  shadcn: {\n    /**\n     * Prefix for all the imported component\n     */\n    prefix: '',\n    /**\n     * Directory that the component lives in.\n     * @default \"./components/ui\"\n     */\n    componentDir: './components/ui'\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Using the Label Component in Vue\nDESCRIPTION: Example of how to import and use the Label component in a Vue component. The Label is associated with a form control using the 'for' attribute.\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/docs/components/label.md#2025-04-23_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { Label } from '@/components/ui/label'\n</script>\n\n<template>\n  <Label for=\"email\">Your email address</Label>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Tailwind Configuration for Custom Colors\nDESCRIPTION: JavaScript configuration to extend Tailwind theme with custom warning colors.\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/docs/theming.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  theme: {\n    extend: {\n      colors: {\n        'warning': 'hsl(var(--warning))',\n        'warning-foreground': 'hsl(var(--warning-foreground))',\n      },\n    },\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Scale Background Effect to the Drawer\nDESCRIPTION: HTML code showing how to add a zoom effect to the background when the drawer is opened by adding the 'vaul-drawer-wrapper' attribute to the root component.\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/docs/components/drawer.md#2025-04-23_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<div vaul-drawer-wrapper id=\"app\"></div>\n```\n\n----------------------------------------\n\nTITLE: TypeScript Interface for Custom Chart Tooltip Props\nDESCRIPTION: TypeScript prop definitions for creating custom chart tooltips. Defines the expected props structure that a custom tooltip component would receive, including title and data array containing name, color and value for each data point.\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/docs/charts.md#2025-04-23_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\ndefineProps<{\n  title?: string\n  data: {\n    name: string\n    color: string\n    value: any\n  }[]\n}>()\n```\n\n----------------------------------------\n\nTITLE: Configuring Carousel Options\nDESCRIPTION: Demonstrates how to pass options to the carousel using the opts prop for customizing behavior.\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/docs/components/carousel.md#2025-04-23_snippet_7\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <Carousel\n    :opts=\"{\n      align: 'start',\n      loop: true,\n    }\"\n  >\n    <CarouselContent>\n      <CarouselItem>...</CarouselItem>\n      <CarouselItem>...</CarouselItem>\n      <CarouselItem>...</CarouselItem>\n    </CarouselContent>\n  </Carousel>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Basic Badge Component Usage\nDESCRIPTION: Simple example showing how to import and use the Badge component in a Vue component. This demonstrates the most basic implementation with default styling.\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/docs/components/badge.md#2025-04-23_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { Badge } from '@/components/ui/badge'\n</script>\n\n<template>\n  <Badge>Badge</Badge>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering Cards Component in Vue\nDESCRIPTION: This Vue component imports a Cards example component from the examples directory and renders it. It uses the script setup syntax, which is part of Vue's Composition API, to simplify component definitions.\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/examples/cards.md#2025-04-23_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nimport CardsExample from \"@/examples/cards/Example.vue\"\n</script>\n\n<CardsExample />\n```\n\n----------------------------------------\n\nTITLE: Customizing Switch with Icon in Thumb\nDESCRIPTION: Example of adding icons to the Switch component's thumb based on state. Uses a conditional rendering approach with icons for dark and light themes.\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/docs/components/switch.md#2025-04-23_snippet_3\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <Switch :model-value=\"isDark\" @update:model-value=\"toggleTheme\">\n    <template #thumb>\n      <Icon v-if=\"isDark\" icon=\"lucide:moon\" class=\"size-3\" />\n      <Icon v-else icon=\"lucide:sun\" class=\"size-3\" />\n    </template>\n  </Switch>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Creating Mode Toggle Component in Vue\nDESCRIPTION: This Vue component creates a dropdown menu for toggling between light, dark, and system color modes. It uses @vueuse/core for color mode management and includes icons for visual representation.\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/docs/dark-mode/astro.md#2025-04-23_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { Button } from '@/components/ui/button'\nimport { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuTrigger } from '@/components/ui/dropdown-menu'\nimport { Icon } from '@iconify/vue'\nimport { useColorMode } from '@vueuse/core'\n\nconst mode = useColorMode()\n</script>\n\n<template>\n  <DropdownMenu>\n    <DropdownMenuTrigger as-child>\n      <Button variant=\"outline\">\n        <Icon icon=\"radix-icons:moon\" class=\"h-[1.2rem] w-[1.2rem] rotate-0 scale-100 transition-all dark:-rotate-90 dark:scale-0\" />\n        <Icon icon=\"radix-icons:sun\" class=\"absolute h-[1.2rem] w-[1.2rem] rotate-90 scale-0 transition-all dark:rotate-0 dark:scale-100\" />\n        <span class=\"sr-only\">Toggle theme</span>\n      </Button>\n    </DropdownMenuTrigger>\n    <DropdownMenuContent align=\"end\">\n      <DropdownMenuItem @click=\"mode = 'light'\">\n        Light\n      </DropdownMenuItem>\n      <DropdownMenuItem @click=\"mode = 'dark'\">\n        Dark\n      </DropdownMenuItem>\n      <DropdownMenuItem @click=\"mode = 'auto'\">\n        System\n      </DropdownMenuItem>\n    </DropdownMenuContent>\n  </DropdownMenu>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Using shadcn-vue Components in Astro\nDESCRIPTION: Example of how to import and use a shadcn-vue component (Button) in an Astro file.\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/docs/installation/astro.md#2025-04-23_snippet_4\n\nLANGUAGE: astro\nCODE:\n```\n---\nimport { Button } from \"@/components/ui/button\"\n---\n\n<html lang=\"en\">\n\t<head>\n\t\t<title>Astro</title>\n\t</head>\n\t<body>\n\t\t<Button>Hello World</Button>\n\t</body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Adding Child Elements to AutoForm in Vue\nDESCRIPTION: Demonstrates how to add additional elements like buttons and text content below an AutoForm component. Shows the placement of child elements within the AutoForm template.\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/docs/components/auto-form.md#2025-04-23_snippet_5\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <AutoForm>\n    <Button>Send now</Button>\n    <p class=\"text-gray-500 text-sm\">\n      By submitting this form, you agree to our\n      <a href=\"#\" class=\"text-primary underline\">\n        terms and conditions\n      </a>.\n    </p>\n  </AutoForm>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Adding a Component to the registry.json File\nDESCRIPTION: This JSON snippet shows how to add a component definition to the registry.json file. It includes the component's name, type, title, description, and file information.\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/docs/registry/getting-started.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"$schema\": \"https://shadcn-vue.com/schema/registry.json\",\n  \"name\": \"acme\",\n  \"homepage\": \"https://acme.com\",\n  \"items\": [\n    {\n      \"name\": \"hello-world\",\n      \"type\": \"registry:block\",\n      \"title\": \"Hello World\",\n      \"description\": \"A simple hello world component.\",\n      \"files\": [\n        {\n          \"path\": \"registry/new-york/HelloWorld/HelloWorld.vue\",\n          \"type\": \"registry:component\"\n        }\n      ]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Tailwind CSS in index.css\nDESCRIPTION: CSS configuration that imports Tailwind CSS for use in the Vue application. This replaces the default content in src/index.css.\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/docs/installation/vite.md#2025-04-23_snippet_2\n\nLANGUAGE: css\nCODE:\n```\n@import \"tailwindcss\";\n```\n\n----------------------------------------\n\nTITLE: Basic SidebarMenuSub Implementation in Vue\nDESCRIPTION: Demonstrates the structure of a submenu within a SidebarMenu using SidebarMenuSub, SidebarMenuSubItem, and SidebarMenuSubButton components.\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/docs/components/sidebar.md#2025-04-23_snippet_27\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <SidebarMenuItem>\n    <SidebarMenuButton />\n    <SidebarMenuSub>\n      <SidebarMenuSubItem>\n        <SidebarMenuSubButton />\n      </SidebarMenuSubItem>\n      <SidebarMenuSubItem>\n        <SidebarMenuSubButton />\n      </SidebarMenuSubItem>\n    </SidebarMenuSub>\n  </SidebarMenuItem>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Adding Base Styles through Registry Style Item\nDESCRIPTION: A registry style item that adds custom base styles for heading elements. It uses the @layer base directive to style h1 and h2 elements with specific font sizes.\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/docs/registry/examples.md#2025-04-23_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"$schema\": \"https://shadcn-vue.com/schema/registry-item.json\",\n  \"name\": \"custom-style\",\n  \"type\": \"registry:style\",\n  \"css\": {\n    \"@layer base\": {\n      \"h1\": {\n        \"font-size\": \"var(--text-2xl)\"\n      },\n      \"h2\": {\n        \"font-size\": \"var(--text-xl)\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Sheet Size with CSS Classes in Vue\nDESCRIPTION: Example demonstrating how to adjust the size of the Sheet component using CSS classes to control width, with responsive behavior for different screen sizes.\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/docs/components/sheet.md#2025-04-23_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <Sheet>\n    <SheetTrigger>Open</SheetTrigger>\n    <SheetContent class=\"w-[400px] sm:w-[540px]\">\n      <SheetHeader>\n        <SheetTitle>Are you absolutely sure?</SheetTitle>\n        <SheetDescription>\n          This action cannot be undone. This will permanently delete your account\n          and remove your data from our servers.\n        </SheetDescription>\n      </SheetHeader>\n    </SheetContent>\n  </Sheet>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Configuring Sidebar Width in Utils\nDESCRIPTION: TypeScript constants for defining the default sidebar width for desktop and mobile views.\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/docs/components/sidebar.md#2025-04-23_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nexport const SIDEBAR_WIDTH = \"16rem\";\nexport const SIDEBAR_WIDTH_MOBILE = \"18rem\";\n```\n\n----------------------------------------\n\nTITLE: Implementing SidebarGroup with Action in Vue\nDESCRIPTION: Demonstrates how to create a SidebarGroup with a label, action, and content within a Sidebar.\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/docs/components/sidebar.md#2025-04-23_snippet_18\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <Sidebar>\n    <SidebarContent>\n      <SidebarGroup>\n        <SidebarGroupLabel>Application</SidebarGroupLabel>\n        <SidebarGroupAction>\n          <Plus /> <span class=\"sr-only\">Add Project</span>\n        </SidebarGroupAction>\n        <SidebarGroupContent></SidebarGroupContent>\n      </SidebarGroup>\n    </SidebarContent>\n  </Sidebar>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering a Vue Component\nDESCRIPTION: This code demonstrates how to import a Vue component using the script setup syntax and then render it in the template. The PlaygroundExample component is imported from the examples/playground directory and used directly in the template.\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/examples/playground.md#2025-04-23_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nimport PlaygroundExample from \"@/examples/playground/Example.vue\"\n</script>\n\n<PlaygroundExample />\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of Input Component in Vue\nDESCRIPTION: This snippet demonstrates how to import and use the Input component in a Vue component. It shows the basic setup required to incorporate the Input component into a Vue template.\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/docs/components/input.md#2025-04-23_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { Input } from '@/components/ui/input'\n</script>\n\n<template>\n  <Input />\n</template>\n```\n\n----------------------------------------\n\nTITLE: Setting up Dark Mode with Vue Components in VitePress\nDESCRIPTION: This Vue script setup block imports the useData hook from VitePress to access the isDark state, and imports framework icons from the icons collection for display in the navigation cards.\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/docs/dark-mode.md#2025-04-23_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\n  import { useData } from 'vitepress'\n  const { isDark } = useData()\n  import ViteIcon from '~icons/simple-icons/vite'\n  import NuxtIcon from '~icons/simple-icons/nuxtdotjs'\n  import AstroIcon from '~icons/simple-icons/astro'\n</script>\n```\n\n----------------------------------------\n\nTITLE: Vue Emits API Table Definition\nDESCRIPTION: Documents component event emissions using APITable component. Specifies legendItemClick and update:items events with their respective payload types.\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/meta/ChartLegend.md#2025-04-23_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<APITable :type=\"'emit'\" :data=\"[\n  {\n    'name': 'legendItemClick',\n    'type': '[d: BulletLegendItemInterface, i: number]'\n  },\n  {\n    'name': 'update:items',\n    'type': '[payload: BulletLegendItemInterface[]]'\n  }\n]\" />\n```\n\n----------------------------------------\n\nTITLE: FormField with Input Component Example\nDESCRIPTION: An example showing how to use the FormField component with a custom Input component. It demonstrates the proper structure for form validation with VeeValidate.\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/docs/components/form.md#2025-04-23_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <FormField v-slot=\"{ componentField }\">\n    <FormItem>\n      <FormLabel>Username</FormLabel>\n      <FormControl>\n        <Input placeholder=\"shadcn\" v-bind=\"componentField\" />\n      </FormControl>\n      <FormDescription />\n      <FormMessage />\n    </FormItem>\n  </FormField>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Styling Sidebar Group Based on Collapsible State in Vue\nDESCRIPTION: This snippet shows how to hide a SidebarGroup component when the sidebar is in 'icon' mode using CSS classes.\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/docs/components/sidebar.md#2025-04-23_snippet_37\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <Sidebar collapsible=\"icon\">\n    <SidebarContent>\n      <SidebarGroup class=\"group-data-[collapsible=icon]:hidden\" />\n    </SidebarContent>\n  </Sidebar>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Integrating Carousel Plugins\nDESCRIPTION: Example showing how to add plugins to the carousel, specifically the autoplay functionality.\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/docs/components/carousel.md#2025-04-23_snippet_12\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport Autoplay from 'embla-carousel-autoplay'\n</script>\n\n<template>\n  <Carousel\n    class=\"w-full max-w-xs\"\n    :plugins=\"[Autoplay({\n      delay: 2000,\n    })]\"\n  >\n    ...\n  </Carousel>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Implementing FAQ Section with Accordion in Vue\nDESCRIPTION: This snippet demonstrates the usage of the imported Accordion components to create a FAQ section. It showcases how to structure multiple accordion items with triggers and content.\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/docs/introduction.md#2025-04-23_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<div class=\"[&_h3]:!mt-0\">\n<Accordion  type=\"multiple\">\n\n<AccordionItem value=\"faq-1\">\n<AccordionTrigger>\nWhy not packaged as a dependency?\n</AccordionTrigger>\n<AccordionContent>\n\nThe idea behind this is to give you ownership and control over the code, allowing you to decide how the components are built and styled.\n\nStart with some sensible defaults, then customize the components to your needs.\n\nOne of the drawback of packaging the components in an npm package is that the style is coupled with the implementation. _The design of your components should be separate from their implementation._\n\n</AccordionContent>\n</AccordionItem>\n<AccordionItem value=\"faq-2\">\n<AccordionTrigger>\nWhich frameworks are supported?\n</AccordionTrigger>\n<AccordionContent>\n\nThis port is built to be used with Vue/Nuxt.\n\n</AccordionContent>\n</AccordionItem>\n<AccordionItem value=\"faq-3\">\n<AccordionTrigger>\nCan I use this in my project?\n</AccordionTrigger>\n<AccordionContent>\nYes. Free to use for personal and commercial projects. No attribution required.\n\nBut let us know if you do use it. We'd love to see what you build with it.\n</AccordionContent>\n</AccordionItem>\n</Accordion>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Adding Components with shadcn-vue CLI\nDESCRIPTION: This command adds a specified component to your project and installs all required dependencies. It can be used with a component name as an argument.\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/packages/cli/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx shadcn-vue add [component]\n```\n\n----------------------------------------\n\nTITLE: SidebarMenuBadge Example in Vue\nDESCRIPTION: Shows how to add a badge within a SidebarMenuItem to display counters or notification indicators alongside menu items.\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/docs/components/sidebar.md#2025-04-23_snippet_29\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <SidebarMenuItem>\n    <SidebarMenuButton />\n    <SidebarMenuBadge>24</SidebarMenuBadge>\n  </SidebarMenuItem>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Displaying Selected Rows Count in Vue.js Template\nDESCRIPTION: This snippet shows how to display the count of selected rows in the table. It uses the table's getFilteredSelectedRowModel and getFilteredRowModel methods to calculate and show the selection information.\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/docs/components/data-table.md#2025-04-23_snippet_16\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <div>\n    <div class=\"border rounded-md\">\n        <Table />\n    </div>\n\n    <div class=\"flex items-center justify-end space-x-2 py-4\">\n      <div class=\"flex-1 text-sm text-muted-foreground\">\n        {{ table.getFilteredSelectedRowModel().rows.length }} of\n        {{ table.getFilteredRowModel().rows.length }} row(s) selected.\n      </div>\n      <div class=\"space-x-2\">\n        <PaginationButtons />\n      </div>\n    </div>\n  </div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Installing Core Dependencies for Dark Mode in Vitepress\nDESCRIPTION: Installs the @vueuse/core package which provides utility functions for implementing dark mode functionality in a Vitepress application.\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/docs/dark-mode/vitepress.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @vueuse/core\n```\n\n----------------------------------------\n\nTITLE: Basic Sonner Toast Usage Example\nDESCRIPTION: Example demonstrating how to use the toast function from vue-sonner to display notifications with a description and action button.\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/docs/components/sonner.md#2025-04-23_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { Button } from '@/components/ui/button'\nimport { toast } from 'vue-sonner'\n</script>\n\n<template>\n  <Button\n    variant=\"outline\" @click=\"() => {\n      toast('Event has been created', {\n        description: 'Sunday, December 03, 2023 at 9:00 AM',\n        action: {\n          label: 'Undo',\n          onClick: () => console.log('Undo'),\n        },\n      })\n    }\"\n  >\n    Add to calendar\n  </Button>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Configuring Sidebar Keyboard Shortcut\nDESCRIPTION: Setting the keyboard shortcut for opening and closing the sidebar using a constant in utils.ts.\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/docs/components/sidebar.md#2025-04-23_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nexport const SIDEBAR_KEYBOARD_SHORTCUT = \"b\";\n```\n\n----------------------------------------\n\nTITLE: Creating Utility Function for Class Names\nDESCRIPTION: TypeScript utility function that combines clsx and tailwind-merge for handling class name combinations.\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/docs/installation/manual.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Textarea Component Implementation\nDESCRIPTION: Basic example of importing and using the Textarea component in a Vue component\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/docs/components/textarea.md#2025-04-23_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { Textarea } from '@/components/ui/textarea'\n</script>\n\n<template>\n  <Textarea />\n</template>\n```\n\n----------------------------------------\n\nTITLE: Complete Registry Item JSON Example\nDESCRIPTION: A full example of a registry-item.json file showing the basic structure with name, type, title, description, and files configuration.\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/docs/registry/registry-item-json.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"$schema\": \"https://shadcn-vue.com/schema/registry-item.json\",\n  \"name\": \"hello-world\",\n  \"type\": \"registry:block\",\n  \"title\": \"Hello World\",\n  \"description\": \"A simple hello world component.\",\n  \"files\": [\n    {\n      \"path\": \"registry/new-york/HelloWorld/HelloWorld.vue\",\n      \"type\": \"registry:component\"\n    },\n    {\n      \"path\": \"registry/new-york/HelloWorld/useHelloWorld.ts\",\n      \"type\": \"registry:hook\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Zod Schema with Descriptions\nDESCRIPTION: Example of using Zod schema with field descriptions for form generation\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/docs/components/auto-form.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst formSchema = z.object({\n  username: z.string().describe('Your username'),\n  someValue: z.string(), // Will be \"Some Value\"\n})\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering MusicExample Component in Vue\nDESCRIPTION: This Vue component imports the MusicExample component from a specific path using the script setup syntax. It then renders the imported component in the template section.\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/examples/music.md#2025-04-23_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nimport MusicExample from \"@/examples/music/Example.vue\"\n</script>\n\n<MusicExample />\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering TasksExample Component in Vue\nDESCRIPTION: This code snippet demonstrates how to import a component from the examples directory and render it in a Vue file. The script section handles the import using the script setup syntax, while the template section directly renders the imported component.\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/examples/tasks.md#2025-04-23_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nimport TasksExample from \"@/examples/tasks/Example.vue\"\n</script>\n\n<TasksExample />\n```\n\n----------------------------------------\n\nTITLE: Importing Accordion Components in Vue\nDESCRIPTION: This snippet imports various Accordion components from the project's registry. These components are likely used to create expandable/collapsible sections in the UI.\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/docs/introduction.md#2025-04-23_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nimport { Accordion, AccordionContent, AccordionItem, AccordionTrigger } from '@/registry/new-york/ui/accordion'\n</script>\n```\n\n----------------------------------------\n\nTITLE: SidebarMenuAction with DropdownMenu in Vue\nDESCRIPTION: Demonstrates integrating a DropdownMenu with SidebarMenuAction to create a context menu. The dropdown is triggered by clicking on the menu action with options positioned to the right of the sidebar.\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/docs/components/sidebar.md#2025-04-23_snippet_26\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n<SidebarMenuItem>\n  <SidebarMenuButton asChild>\n    <a href=\"#\">\n      <Home />\n      <span>Home</span>\n    </a>\n  </SidebarMenuButton>\n  <DropdownMenu>\n    <DropdownMenuTrigger asChild>\n      <SidebarMenuAction>\n        <MoreHorizontal />\n      </SidebarMenuAction>\n    </DropdownMenuTrigger>\n    <DropdownMenuContent side=\"right\" align=\"start\">\n      <DropdownMenuItem>\n        <span>Edit Project</span>\n      </DropdownMenuItem>\n      <DropdownMenuItem>\n        <span>Delete Project</span>\n      </DropdownMenuItem>\n    </DropdownMenuContent>\n  </DropdownMenu>\n</SidebarMenuItem>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Initializing shadcn-vue\nDESCRIPTION: Command to initialize shadcn-vue and configure the project.\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/docs/installation/nuxt.md#2025-04-23_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nnpx shadcn-vue@latest init\n```\n\n----------------------------------------\n\nTITLE: Vue Component Props Documentation Table\nDESCRIPTION: APITable component instance documenting component props including valueFormatter, index, items, customTooltip and selector properties with their types and requirements.\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/meta/ChartSingleTooltip.md#2025-04-23_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<APITable :type=\"'prop'\" :data=\"[\n  {\n    'name': 'valueFormatter',\n    'description': '',\n    'type': '((tick: number, i?: number, ticks?: number[]) => string)',\n    'required': false,\n    'default': '`${tick}`'\n  },\n  {\n    'name': 'index',\n    'description': '',\n    'type': 'string',\n    'required': true\n  },\n  {\n    'name': 'items',\n    'description': '',\n    'type': 'BulletLegendItemInterface[]',\n    'required': false\n  },\n  {\n    'name': 'customTooltip',\n    'description': '',\n    'type': 'Component',\n    'required': false\n  },\n  {\n    'name': 'selector',\n    'description': '',\n    'type': 'string',\n    'required': true\n  }\n]\" />\n```\n\n----------------------------------------\n\nTITLE: Adding Presets to Date Picker in Vue.js\nDESCRIPTION: This example shows how to incorporate preset date options into the Date Picker component, allowing users to quickly select common date ranges.\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/docs/components/date-picker.md#2025-04-23_snippet_3\n\nLANGUAGE: vue\nCODE:\n```\n<ComponentPreview name=\"DatePickerWithPresets\" />\n```\n\n----------------------------------------\n\nTITLE: Creating a Vue Component for the Registry\nDESCRIPTION: This example demonstrates how to create a simple HelloWorld component using Vue 3 composition API. It imports and uses a Button component from the project's UI components.\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/docs/registry/getting-started.md#2025-04-23_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { Button } from \"@/components/ui/button\"\n</script>\n\n<template>\n  <Button>Hello World</Button>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Overriding Block Primitives with Custom Components\nDESCRIPTION: A registry block item that installs the Login01 block but overrides the default primitives with custom ones from a remote registry. This includes custom button, input, and label components.\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/docs/registry/examples.md#2025-04-23_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"$schema\": \"https://shadcn-vue.com/schema/registry-item.json\",\n  \"name\": \"custom-login\",\n  \"type\": \"registry:block\",\n  \"registryDependencies\": [\n    \"Login01\",\n    \"https://example.com/r/button.json\",\n    \"https://example.com/r/input.json\",\n    \"https://example.com/r/label.json\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Styling Menu Action Based on Menu Button Active State in Vue\nDESCRIPTION: This snippet demonstrates how to make a menu action visible when the associated menu button is active using CSS classes.\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/docs/components/sidebar.md#2025-04-23_snippet_38\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <SidebarMenuItem>\n    <SidebarMenuButton />\n    <SidebarMenuAction\n      class=\"peer-data-[active=true]/menu-button:opacity-100\"\n    />\n  </SidebarMenuItem>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Implementing SidebarHeader with DropdownMenu in Vue\nDESCRIPTION: Shows how to add a SidebarHeader component with a DropdownMenu to the Sidebar.\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/docs/components/sidebar.md#2025-04-23_snippet_15\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <Sidebar>\n    <SidebarHeader>\n      <SidebarMenu>\n        <SidebarMenuItem>\n          <DropdownMenu>\n            <DropdownMenuTrigger asChild>\n                <SidebarMenuButton>\n                  Select Workspace\n                  <ChevronDown class=\"ml-auto\" />\n                </SidebarMenuButton>\n            </DropdownMenuTrigger>\n            <DropdownMenuContent class=\"w-[--bits-dropdown-menu-anchor-width]\">\n              <DropdownMenuItem>\n                <span>Acme Inc</span>\n              </DropdownMenuItem>\n              <DropdownMenuItem>\n                <span>Acme Corp.</span>\n              </DropdownMenuItem>\n            </DropdownMenuContent>\n          </DropdownMenu>\n        </SidebarMenuItem>\n      </SidebarMenu>\n    </SidebarHeader>\n  </Sidebar>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Setting up Vue Component in Markdown for Building Blocks\nDESCRIPTION: This code imports the Blocks.vue component from the Vitepress theme directory and sets it up to be used in a Markdown file. The script setup syntax is used to import the component, and the component is then rendered in the page content.\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/blocks/[categories].md#2025-04-23_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nimport Blocks from \"../../../.vitepress/theme/components/Blocks.vue\"\n</script>\n\n<Blocks />\n```\n\n----------------------------------------\n\nTITLE: SidebarMenuSkeleton Loading State in Vue\nDESCRIPTION: Demonstrates how to implement a skeleton loading state in SidebarMenu while waiting for data to load, creating placeholder menu items.\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/docs/components/sidebar.md#2025-04-23_snippet_30\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <SidebarMenu>\n    <SidebarMenuItem v-for=\"i in 5\" :key=\"i\">\n      <SidebarMenuSkeleton />\n    </SidebarMenuItem>\n  </SidebarMenu>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Registry Item CSS Rules Configuration\nDESCRIPTION: The css property allows adding custom CSS rules to the project's CSS file, organized by layers or other CSS directives.\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/docs/registry/registry-item-json.md#2025-04-23_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"css\": {\n    \"@layer base\": {\n      \"body\": {\n        \"font-size\": \"var(--text-base)\",\n        \"line-height\": \"1.5\"\n      }\n    },\n    \"@layer components\": {\n      \"button\": {\n        \"background-color\": \"var(--color-primary)\",\n        \"color\": \"var(--color-white)\"\n      }\n    },\n    \"@utility text-magic\": {\n      \"font-size\": \"var(--text-base)\",\n      \"line-height\": \"1.5\"\n    },\n    \"@keyframes wiggle\": {\n      \"0%, 100%\": {\n        \"transform\": \"rotate(-3deg)\"\n      },\n      \"50%\": {\n        \"transform\": \"rotate(3deg)\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Controlled Form Implementation\nDESCRIPTION: Example of implementing a controlled form with useForm hook\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/docs/components/auto-form.md#2025-04-23_snippet_4\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { AutoForm } from '@/components/ui/auto-form'\nimport { toTypedSchema } from '@vee-validate/zod'\nimport { useForm } from 'vee-validate'\nimport * as z from 'zod'\n\nconst schema = z.object({\n  username: z.string(),\n})\nconst form = useForm({\n  validationSchema: toTypedSchema(schema),\n})\n\nform.setFieldValue('username', 'bar')\n</script>\n\n<template>\n  <AutoForm :form=\"form\" :schema=\"schema\" />\n</template>\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering Vue Form Component\nDESCRIPTION: This snippet shows how to import a forms example component using script setup syntax and render it in the template. It uses the modern Vue 3 composition API pattern.\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/examples/forms/index.md#2025-04-23_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nimport FormsExample from \"@/examples/forms/Example.vue\"\n</script>\n\n<FormsExample />\n```\n\n----------------------------------------\n\nTITLE: Active SidebarMenuButton Example in Vue\nDESCRIPTION: Shows how to mark a menu item as active using the isActive prop on the SidebarMenuButton component.\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/docs/components/sidebar.md#2025-04-23_snippet_24\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <SidebarMenuButton asChild isActive>\n    <a href=\"#\">Home</a>\n  </SidebarMenuButton>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering Mail Example Component in Vue\nDESCRIPTION: This snippet imports a MailExample component from the examples/mail directory and then renders it in the template. It demonstrates the standard pattern for integrating and displaying components in Vue applications.\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/examples/mail.md#2025-04-23_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nimport MailExample from \"@/examples/mail/Example.vue\"\n</script>\n\n<MailExample />\n```\n\n----------------------------------------\n\nTITLE: Implementing Utility Classes in HTML\nDESCRIPTION: Example of using Tailwind utility classes for theming with dark mode support.\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/docs/theming.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"bg-zinc-950 dark:bg-white\" />\n```\n\n----------------------------------------\n\nTITLE: Adding Toaster Component to App.vue\nDESCRIPTION: Code snippet showing how to add the Toaster component to your main App.vue file, including a ClientOnly wrapper for Nuxt applications.\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/docs/components/sonner.md#2025-04-23_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { Toaster } from '@/components/ui/sonner'\n</script>\n\n<template>\n  <Toaster />\n\n  <!-- Nuxt  -->\n  <ClientOnly>\n    <Toaster />\n  </ClientOnly>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Responsive Carousel Item Sizing\nDESCRIPTION: Example showing how to set responsive widths for carousel items using Tailwind's responsive utility classes.\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/docs/components/carousel.md#2025-04-23_snippet_3\n\nLANGUAGE: vue\nCODE:\n```\n// 50% on small screens and 33% on larger screens.\n<Carousel>\n  <CarouselContent>\n    <CarouselItem class=\"md:basis-1/2 lg:basis-1/3\">...</CarouselItem>\n    <CarouselItem class=\"md:basis-1/2 lg:basis-1/3\">...</CarouselItem>\n    <CarouselItem class=\"md:basis-1/2 lg:basis-1/3\">...</CarouselItem>\n  </CarouselContent>\n</Carousel>\n```\n\n----------------------------------------\n\nTITLE: Dropdown Menu in Breadcrumb\nDESCRIPTION: Example of integrating a dropdown menu within a breadcrumb item using DropdownMenu component.\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/docs/components/breadcrumb.md#2025-04-23_snippet_3\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { BreadcrumbItem } from '@/components/ui/breadcrumb'\n\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger,\n} from '@/lib/components/ui/dropdown-menu'\n\nimport ChevronDownIcon from '~icons/radix-icons/chevron-down'\n</script>\n\n<template>\n  <BreadcrumbItem>\n    <DropdownMenu>\n      <DropdownMenuTrigger class=\"flex items-center gap-1\">\n        Components\n        <ChevronDownIcon />\n      </DropdownMenuTrigger>\n      <DropdownMenuContent align=\"start\">\n        <DropdownMenuItem>Documentation</DropdownMenuItem>\n        <DropdownMenuItem>Themes</DropdownMenuItem>\n        <DropdownMenuItem>GitHub</DropdownMenuItem>\n      </DropdownMenuContent>\n    </DropdownMenu>\n  </BreadcrumbItem>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Vue Component Events Definition Using APITable\nDESCRIPTION: Defines the component's emit events using APITable format, specifically the legendItemClick event that provides legend item interaction data.\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/meta/LineChart.md#2025-04-23_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<APITable :type=\"'emit'\" :data=\"[\n  {\n    'name': 'legendItemClick',\n    'type': '[d: BulletLegendItemInterface, i: number]'\n  }\n]\" />\n```\n\n----------------------------------------\n\nTITLE: Setting Registry Name in registry.json for shadcn-vue\nDESCRIPTION: This JSON snippet demonstrates how to set the name property for the registry, which is used for data attributes and other metadata.\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/docs/registry/registry-json.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"acme\"\n}\n```\n\n----------------------------------------\n\nTITLE: Embedding Figma Design in Vue Using AspectRatio Component\nDESCRIPTION: Shows how to use the AspectRatio component to embed a Figma design with a 16:9 aspect ratio. The iframe links to the shadcn UI Kit created by Pietro Schirano.\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/docs/figma.md#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<AspectRatio :ratio=\"16 / 9\" class=\"w-full mt-4\">\n  <iframe\n    src=\"https://embed.figma.com/file/1203061493325953101/hf_embed?community_viewer=true&embed_host=shadcn&hub_file_id=1203061493325953101&kind=&viewer=1\"\n    class=\"h-full w-full overflow-hidden rounded-lg border bg-muted\"\n  />\n</AspectRatio>\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering Authentication Component in Vue\nDESCRIPTION: This snippet imports an AuthenticationExample component from a specific path and then renders it in the template. It uses the script setup syntax, which is part of Vue's Composition API.\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/examples/authentication.md#2025-04-23_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nimport AuthenticationExample from \"@/examples/authentication/Example.vue\"\n</script>\n\n<AuthenticationExample />\n```\n\n----------------------------------------\n\nTITLE: Using SidebarSeparator in Vue\nDESCRIPTION: Shows how to use SidebarSeparator to create visual dividers between different sections of the sidebar content or groups.\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/docs/components/sidebar.md#2025-04-23_snippet_31\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <Sidebar>\n    <SidebarHeader />\n    <SidebarSeparator />\n    <SidebarContent>\n      <SidebarGroup />\n      <SidebarSeparator />\n      <SidebarGroup />\n    </SidebarContent>\n  </Sidebar>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering Vue Notifications Component\nDESCRIPTION: A Vue template that imports a NotificationsExample component from the forms examples directory and renders it. Uses the script setup syntax for simplified component composition.\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/examples/forms/notifications.md#2025-04-23_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nimport NotificationsExample from \"@/examples/forms/Notifications.vue\"\n</script>\n\n<NotificationsExample />\n```\n\n----------------------------------------\n\nTITLE: Vue Props API Table Definition\nDESCRIPTION: Defines component properties documentation using APITable component. Documents the 'items' prop of type BulletLegendItemInterface array.\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/meta/ChartLegend.md#2025-04-23_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<APITable :type=\"'prop'\" :data=\"[\n  {\n    'name': 'items',\n    'description': '',\n    'type': 'BulletLegendItemInterface[]',\n    'required': false,\n    'default': '[]'\n  }\n]\" />\n```\n\n----------------------------------------\n\nTITLE: Setting Carousel Orientation\nDESCRIPTION: Shows how to set the orientation of the carousel using the orientation prop.\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/docs/components/carousel.md#2025-04-23_snippet_6\n\nLANGUAGE: vue\nCODE:\n```\n<Carousel orientation=\"vertical | horizontal\">\n  ...\n</Carousel>\n```\n\n----------------------------------------\n\nTITLE: Implementing Chart Color Customization in Vue\nDESCRIPTION: Example of customizing chart colors in Vue components. Shows how to pass an array of color values to the AreaChart component to override the default color scheme.\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/docs/charts.md#2025-04-23_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <AreaChart\n    :data=\"data\"\n    :colors=\"['blue', 'pink', 'orange', 'red']\"\n  />\n</template>\n```\n\n----------------------------------------\n\nTITLE: Importing Button Component in Vue\nDESCRIPTION: This snippet demonstrates how to import the Button component from the shadcn-vue registry in a Vue.js setup script.\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/docs/tailwind-v4.md#2025-04-23_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nimport Button from '@/registry/new-york/ui/button/Button.vue'\n</script>\n```\n\n----------------------------------------\n\nTITLE: Importing Navigation Menu Trigger Style in TypeScript\nDESCRIPTION: Shows how to import the navigationMenuTriggerStyle function for use with custom link components.\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/docs/components/navigation-menu.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { navigationMenuTriggerStyle } from '@/components/ui/navigation-menu'\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Component Registry in JSON for shadcn-vue\nDESCRIPTION: This JSON snippet demonstrates the structure of a registry.json file used to define a custom component registry. It includes properties for schema, name, homepage, and a sample item entry.\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/docs/registry/registry-json.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"$schema\": \"https://shadcn-vue.com/schema/registry.json\",\n  \"name\": \"shadcn\",\n  \"homepage\": \"https://shadcn-vue.com\",\n  \"items\": [\n    {\n      \"name\": \"hello-world\",\n      \"type\": \"registry:block\",\n      \"title\": \"Hello World\",\n      \"description\": \"A simple hello world component.\",\n      \"files\": [\n        {\n          \"path\": \"registry/new-york/HelloWorld/HelloWorld.vue\",\n          \"type\": \"registry:component\"\n        }\n      ]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Defining APITable Component with Props Interface in Vue\nDESCRIPTION: This snippet defines an APITable component that accepts props for 'title' and 'data'. The component is used to display API documentation with a table structure. The data prop requires an array of objects containing name, color, and value properties.\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/meta/ChartTooltip.md#2025-04-23_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<!-- This file was automatic generated. Do not edit it manually -->\n\n<APITable :type=\"'prop'\" :data=\"[\n  {\n    'name': 'title',\n    'description': '',\n    'type': 'string',\n    'required': false\n  },\n  {\n    'name': 'data',\n    'description': '',\n    'type': '{ name: string; color: string; value: any; }[]',\n    'required': true\n  }\n]\" />\n```\n\n----------------------------------------\n\nTITLE: Adding SidebarGroupAction to SidebarGroup in Vue\nDESCRIPTION: Demonstrates how to add a SidebarGroupAction component to a SidebarGroup for additional functionality.\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/docs/components/sidebar.md#2025-04-23_snippet_20\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <SidebarGroup>\n    <SidebarGroupLabel>Projects</SidebarGroupLabel>\n    <SidebarGroupAction title=\"Add Project\">\n      <Plus /> <span class=\"sr-only\">Add Project</span>\n    </SidebarGroupAction>\n    <SidebarGroupContent />\n  </SidebarGroup>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Minimal Sidebar Component Template\nDESCRIPTION: A minimal sidebar component with just the Sidebar and SidebarContent components.\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/docs/components/sidebar.md#2025-04-23_snippet_5\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { Sidebar, SidebarContent } from \"@/components/ui/sidebar\";\n</script>\n\n<template>\n  <Sidebar>\n    <SidebarContent />\n  </Sidebar>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Adding Specific Component Example with shadcn-vue CLI\nDESCRIPTION: An example of adding a specific component (alert-dialog) to the project using the shadcn-vue CLI.\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/packages/cli/README.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpx shadcn-vue add alert-dialog\n```\n\n----------------------------------------\n\nTITLE: Importing and Using the Theming Component in Vue\nDESCRIPTION: This code snippet demonstrates how to import and use the Theming component in a Vue documentation page. It uses the <script setup> syntax to import the component from the Vitepress theme directory, and then renders it as a standalone component in the page.\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/themes.md#2025-04-23_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nimport Theming from \"../../.vitepress/theme/components/theming/Theming.vue\"\n</script>\n\n<Theming />\n```\n\n----------------------------------------\n\nTITLE: Rendering Framework Cards with Vue\nDESCRIPTION: This code snippet demonstrates how to create a grid of linked cards for different frameworks using Vue.js template syntax and SVG icons.\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/docs/tailwind-v4.md#2025-04-23_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<div class=\"grid gap-4 mt-8 sm:grid-cols-2 sm:gap-6 not-docs\">\n  <LinkedCard href=\"/docs/installation/vite\">\n    <svg\n      role=\"img\"\n      viewBox=\"0 0 24 24\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n      class=\"w-10 h-10\"\n      fill=\"currentColor\"\n    >\n      <title>Vite</title>\n      <path d=\"m8.286 10.578.512-8.657a.306.306 0 0 1 .247-.282L17.377.006a.306.306 0 0 1 .353.385l-1.558 5.403a.306.306 0 0 0 .352.385l2.388-.46a.306.306 0 0 1 .332.438l-6.79 13.55-.123.19a.294.294 0 0 1-.252.14c-.177 0-.35-.152-.305-.369l1.095-5.301a.306.306 0 0 0-.388-.355l-1.433.435a.306.306 0 0 1-.389-.354l.69-3.375a.306.306 0 0 0-.37-.36l-2.32.536a.306.306 0 0 1-.374-.316zm14.976-7.926L17.284 3.74l-.544 1.887 2.077-.4a.8.8 0 0 1 .84.369.8.8 0 0 1 .034.783L12.9 19.93l-.013.025-.015.023-.122.19a.801.801 0 0 1-.672.37.826.826 0 0 1-.634-.302.8.8 0 0 1-.16-.67l1.029-4.981-1.12.34a.81.81 0 0 1-.86-.262.802.802 0 0 1-.165-.67l.63-3.08-2.027.468a.808.808 0 0 1-.768-.233.81.81 0 0 1-.217-.6l.389-6.57-7.44-1.33a.612.612 0 0 0-.64.906L11.58 23.691a.612.612 0 0 0 1.066-.004l11.26-20.135a.612.612 0 0 0-.644-.9z\" />\n    </svg>\n    <p class=\"mt-2 font-medium\">Vite</p>\n  </LinkedCard>\n  <!-- Additional framework cards omitted for brevity -->\n</div>\n```\n\n----------------------------------------\n\nTITLE: Using Button Component in Vue.js\nDESCRIPTION: Example of how to import and use the Button component in a Vue.js application.\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/docs/components/button.md#2025-04-23_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { Button } from '@/components/ui/button'\n</script>\n\n<template>\n  <Button>Button</Button>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Installing Required Dependencies\nDESCRIPTION: Command to install the necessary reka-ui dependency for manual installation\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/docs/components/textarea.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install reka-ui\n```\n\n----------------------------------------\n\nTITLE: Creating Login Block with Component Dependencies\nDESCRIPTION: A registry block item that defines a login form block with component dependencies. It includes a page file and component file, requiring button, card, input, and label components from the registry.\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/docs/registry/examples.md#2025-04-23_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"$schema\": \"https://shadcn-vue.com/schema/registry-item.json\",\n  \"name\": \"Login01\",\n  \"type\": \"registry:block\",\n  \"description\": \"A simple login form.\",\n  \"registryDependencies\": [\"button\", \"card\", \"input\", \"label\"],\n  \"files\": [\n    {\n      \"path\": \"blocks/Login01/page.vue\",\n      \"content\": \"import { LoginForm ...\",\n      \"type\": \"registry:page\",\n      \"target\": \"pages/login/index.vue\"\n    },\n    {\n      \"path\": \"blocks/Login01/components/LoginForm.vue\",\n      \"content\": \"...\",\n      \"type\": \"registry:component\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring registry.json for shadcn-vue Component Registry\nDESCRIPTION: This snippet shows how to create and structure the registry.json file, which is required for using the shadcn-vue CLI to build your registry. It includes the schema, name, homepage, and items array.\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/docs/registry/getting-started.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"$schema\": \"https://shadcn-vue.com/schema/registry.json\",\n  \"name\": \"acme\",\n  \"homepage\": \"https://acme.com\",\n  \"items\": [\n    // ...\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Carousel Item Spacing Example\nDESCRIPTION: Demonstrates how to set spacing between carousel items using padding and negative margin utilities.\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/docs/components/carousel.md#2025-04-23_snippet_4\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <Carousel>\n    <CarouselContent class=\"-ml-4\">\n      <CarouselItem class=\"pl-4\">\n        ...\n      </CarouselItem>\n      <CarouselItem class=\"pl-4\">\n        ...\n      </CarouselItem>\n      <CarouselItem class=\"pl-4\">\n        ...\n      </CarouselItem>\n    </CarouselContent>\n  </Carousel>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Brand Colors to shadcn-vue\nDESCRIPTION: A registry style item that adds a custom 'brand' color in both light and dark modes while using shadcn-vue defaults for other colors. It uses OKLCH color format for color definition.\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/docs/registry/examples.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"$schema\": \"https://shadcn-vue.com/schema/registry-item.json\",\n  \"name\": \"custom-style\",\n  \"type\": \"registry:style\",\n  \"cssVars\": {\n    \"light\": {\n      \"brand\": \"oklch(0.99 0.00 0)\"\n    },\n    \"dark\": {\n      \"brand\": \"oklch(0.14 0.00 286)\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Sonner with Dialog Components\nDESCRIPTION: Solution for using Sonner with Dialog components by adding pointer-events-auto class to the Toaster component, addressing a specific issue in shadcn-vue.\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/docs/components/sonner.md#2025-04-23_snippet_3\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { Toaster } from '@/components/ui/sonner'\n</script>\n\n<template>\n  <Toaster class=\"pointer-events-auto\" />\n</template>\n```\n\n----------------------------------------\n\nTITLE: Using the Separator Component in Vue\nDESCRIPTION: Example of how to import and use the Separator component in a Vue component. This shows the basic implementation with a label property set to 'Or'.\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/docs/components/separator.md#2025-04-23_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { Separator } from '@/components/ui/separator'\n</script>\n\n<template>\n  <Separator label=\"Or\" />\n</template>\n```\n\n----------------------------------------\n\nTITLE: Tailwind Prefix Configuration\nDESCRIPTION: Configuration for setting custom prefix for Tailwind CSS utility classes\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/docs/components-json.md#2025-04-23_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"tailwind\": {\n    \"prefix\": \"tw-\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Laravel Project with Vue\nDESCRIPTION: Command to create a new Laravel project with Vue.js and Inertia using the Laravel installer.\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/docs/installation/laravel.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nlaravel new my-app --vue\n```\n\n----------------------------------------\n\nTITLE: Configuration Prompts for Shadcn-Vue Initialization\nDESCRIPTION: Interactive prompts that appear during initialization to configure components.json, including style selection, base color choice, and CSS variable preferences.\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/docs/cli.md#2025-04-23_snippet_1\n\nLANGUAGE: txt\nCODE:\n```\nWhich style would you like to use? › New York\nWhich color would you like to use as base color? › Zinc\nDo you want to use CSS variables for colors? › no / yes\n```\n\n----------------------------------------\n\nTITLE: SidebarRail Component Usage in Vue\nDESCRIPTION: Shows how to incorporate a SidebarRail component within a Sidebar structure, typically used for a collapsible rail that can toggle the sidebar visibility.\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/docs/components/sidebar.md#2025-04-23_snippet_34\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <Sidebar>\n    <SidebarHeader />\n    <SidebarContent>\n      <SidebarGroup />\n    </SidebarContent>\n    <SidebarFooter />\n    <SidebarRail />\n  </Sidebar>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Theme in shadcn-vue\nDESCRIPTION: A registry theme item that defines custom theme colors using OKLCH color format. It specifies light and dark mode variables for background, foreground, primary, and sidebar elements.\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/docs/registry/examples.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"$schema\": \"https://shadcn-vue.com/schema/registry-item.json\",\n  \"name\": \"custom-theme\",\n  \"type\": \"registry:theme\",\n  \"cssVars\": {\n    \"light\": {\n      \"background\": \"oklch(1 0 0)\",\n      \"foreground\": \"oklch(0.141 0.005 285.823)\",\n      \"primary\": \"oklch(0.546 0.245 262.881)\",\n      \"primary-foreground\": \"oklch(0.97 0.014 254.604)\",\n      \"ring\": \"oklch(0.746 0.16 232.661)\",\n      \"sidebar-primary\": \"oklch(0.546 0.245 262.881)\",\n      \"sidebar-primary-foreground\": \"oklch(0.97 0.014 254.604)\",\n      \"sidebar-ring\": \"oklch(0.746 0.16 232.661)\"\n    },\n    \"dark\": {\n      \"background\": \"oklch(1 0 0)\",\n      \"foreground\": \"oklch(0.141 0.005 285.823)\",\n      \"primary\": \"oklch(0.707 0.165 254.624)\",\n      \"primary-foreground\": \"oklch(0.97 0.014 254.604)\",\n      \"ring\": \"oklch(0.707 0.165 254.624)\",\n      \"sidebar-primary\": \"oklch(0.707 0.165 254.624)\",\n      \"sidebar-primary-foreground\": \"oklch(0.97 0.014 254.604)\",\n      \"sidebar-ring\": \"oklch(0.707 0.165 254.624)\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Nuxt Configuration for Tailwind CSS\nDESCRIPTION: TypeScript configuration to add Tailwind CSS and its Vite plugin to Nuxt.\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/docs/installation/nuxt.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport tailwindcss from '@tailwindcss/vite'\n\nexport default defineNuxtConfig({\n  // ...\n  css: ['~/assets/css/tailwind.css'],\n  vite: {\n    plugins: [\n      tailwindcss(),\n    ],\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Complex Utility through Registry Component\nDESCRIPTION: A registry component item that adds a complex utility for hiding scrollbars. It defines a scrollbar-hidden utility with nested selectors to hide webkit scrollbars using the &:: syntax.\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/docs/registry/examples.md#2025-04-23_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"$schema\": \"https://shadcn-vue.com/schema/registry-item.json\",\n  \"name\": \"custom-component\",\n  \"type\": \"registry:component\",\n  \"css\": {\n    \"@utility scrollbar-hidden\": {\n      \"scrollbar-hidden\": {\n        \"&::-webkit-scrollbar\": {\n          \"display\": \"none\"\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Line Chart Component with shadcn-vue CLI\nDESCRIPTION: Command to add the line chart component to your Vue project using the shadcn-vue CLI tool. Only works with Vue versions greater than 3.3.\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/docs/charts/line.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx shadcn-vue@latest add chart-line\n```\n\n----------------------------------------\n\nTITLE: Installing Node.js type definitions\nDESCRIPTION: Command to install Node.js TypeScript definitions as a dev dependency, which is required for using Node.js path module in the Vite configuration.\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/docs/installation/vite.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nnpm install -D @types/node\n```\n\n----------------------------------------\n\nTITLE: Project Structure for Data Table Implementation\nDESCRIPTION: Recommended file structure for organizing the data table components in a Vue.js project.\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/docs/components/data-table.md#2025-04-23_snippet_2\n\nLANGUAGE: ansi\nCODE:\n```\n components\n    └── payments\n          ├── columns.ts\n          ├── data-table.vue\n          ├── data-table-dropdown.vue\n└── app.vue\n```\n\n----------------------------------------\n\nTITLE: Installing Breadcrumb Component with shadcn-vue\nDESCRIPTION: Command to install the breadcrumb component using the shadcn-vue CLI tool.\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/docs/components/breadcrumb.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx shadcn-vue@latest add breadcrumb\n```\n\n----------------------------------------\n\nTITLE: Installing and Updating Dependencies for shadcn-vue Tailwind v4 Upgrade\nDESCRIPTION: This bash command installs tw-animate-css and updates several dependencies to their latest versions, which are required for the Tailwind v4 upgrade in a shadcn-vue project.\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/docs/tailwind-v4.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\npnpm i tw-animate-css\npnpm up reka-ui lucide-vue-next tailwind-merge clsx --latest\n```\n\n----------------------------------------\n\nTITLE: Configuring Blocks Page in Vue with VitePress\nDESCRIPTION: This snippet sets up a Vue component for a blocks page in a VitePress-powered site. It imports a BlockPage component and renders it within the template.\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/block-renderer.md#2025-04-23_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nimport BlockPage from \"../../.vitepress/theme/components/BlockPage.vue\"\n</script>\n\n<BlockPage />\n```\n\n----------------------------------------\n\nTITLE: Overriding Tailwind CSS Variables in shadcn-vue\nDESCRIPTION: A registry theme item that overrides default Tailwind CSS variables including spacing and breakpoints. This allows for customization of the core Tailwind configuration through the registry.\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/docs/registry/examples.md#2025-04-23_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"$schema\": \"https://shadcn-vue.com/schema/registry-item.json\",\n  \"name\": \"custom-theme\",\n  \"type\": \"registry:theme\",\n  \"cssVars\": {\n    \"theme\": {\n      \"spacing\": \"0.2rem\",\n      \"breakpoint-sm\": \"640px\",\n      \"breakpoint-md\": \"768px\",\n      \"breakpoint-lg\": \"1024px\",\n      \"breakpoint-xl\": \"1280px\",\n      \"breakpoint-2xl\": \"1536px\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring tsconfig.json for path resolution\nDESCRIPTION: TypeScript configuration that adds baseUrl and paths settings to enable path aliases in the project. This allows using the @/ prefix for imports.\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/docs/installation/vite.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"files\": [],\n  \"references\": [\n    {\n      \"path\": \"./tsconfig.app.json\"\n    },\n    {\n      \"path\": \"./tsconfig.node.json\"\n    }\n  ],\n  \"compilerOptions\": {\n    \"baseUrl\": \".\",\n    \"paths\": {\n      \"@/*\": [\"./src/*\"]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Animations with @keyframes and CSS Variables\nDESCRIPTION: A registry component item that adds a custom wiggle animation. It defines both the @keyframes for the animation and a CSS variable to reference it, allowing for easy application of the animation to elements.\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/docs/registry/examples.md#2025-04-23_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"$schema\": \"https://shadcn-vue.com/schema/registry-item.json\",\n  \"name\": \"custom-component\",\n  \"type\": \"registry:component\",\n  \"cssVars\": {\n    \"theme\": {\n      \"--animate-wiggle\": \"wiggle 1s ease-in-out infinite\"\n    }\n  },\n  \"css\": {\n    \"@keyframes wiggle\": {\n      \"0%, 100%\": {\n        \"transform\": \"rotate(-3deg)\"\n      },\n      \"50%\": {\n        \"transform\": \"rotate(3deg)\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Textarea Component via CLI\nDESCRIPTION: Command to install the textarea component using the shadcn-vue CLI tool\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/docs/components/textarea.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx shadcn-vue@latest add textarea\n```\n\n----------------------------------------\n\nTITLE: Adding Component Styles through Registry Component\nDESCRIPTION: A registry component item that adds a custom card component style. It uses the @layer components directive to define styling for a card with background color, border radius, padding, and box shadow.\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/docs/registry/examples.md#2025-04-23_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"$schema\": \"https://shadcn-vue.com/schema/registry-item.json\",\n  \"name\": \"custom-card\",\n  \"type\": \"registry:component\",\n  \"css\": {\n    \"@layer components\": {\n      \"card\": {\n        \"background-color\": \"var(--color-white)\",\n        \"border-radius\": \"var(--rounded-lg)\",\n        \"padding\": \"var(--spacing-6)\",\n        \"box-shadow\": \"var(--shadow-xl)\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding a shadcn-vue component\nDESCRIPTION: Command to add a specific component (Button) from shadcn-vue to your project. This downloads and sets up the component in your local project structure.\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/docs/installation/vite.md#2025-04-23_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nnpx shadcn-vue@latest add button\n```\n\n----------------------------------------\n\nTITLE: SidebarMenuButton as Link or Anchor in Vue\nDESCRIPTION: Shows how to use the SidebarMenuButton with the asChild prop to render it as a different component, specifically an anchor tag for navigation.\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/docs/components/sidebar.md#2025-04-23_snippet_22\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <SidebarMenuButton asChild>\n    <a href=\"#\">Home</a>\n  </SidebarMenuButton>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Installing Sidebar Component via CLI\nDESCRIPTION: Command to install the sidebar component using the shadcn-vue CLI tool.\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/docs/components/sidebar.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx shadcn-vue@latest add sidebar\n```\n\n----------------------------------------\n\nTITLE: Vue Component API Table for Pie/Donut Chart\nDESCRIPTION: A Vue component that displays API documentation in a table format. This specific instance documents the props for a pie/donut chart component, including data source configuration, styling options, and customization features.\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/meta/DonutChart.md#2025-04-23_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<!-- This file was automatic generated. Do not edit it manually -->\n\n<APITable :type=\"'prop'\" :data=\"[\n  {\n    'name': 'colors',\n    'description': '<p>Change the default colors.</p>\\n',\n    'type': 'string[]',\n    'required': false\n  },\n  {\n    'name': 'index',\n    'description': '<p>Sets the key to map the data to the axis.</p>\\n',\n    'type': 'string',\n    'required': true\n  },\n  {\n    'name': 'data',\n    'description': '<p>The source data, in which each entry is a dictionary.</p>\\n',\n    'type': 'Record<string, any>[]',\n    'required': true\n  },\n  {\n    'name': 'margin',\n    'description': '<p>Margin of each the container</p>\\n',\n    'type': 'Spacing',\n    'required': false,\n    'default': '{ top: 0, bottom: 0, left: 0, right: 0 }'\n  },\n  {\n    'name': 'filterOpacity',\n    'description': '<p>Change the opacity of the non-selected field</p>\\n',\n    'type': 'number',\n    'required': false,\n    'default': '0.2'\n  },\n  {\n    'name': 'showTooltip',\n    'description': '<p>Controls the visibility of tooltip.</p>\\n',\n    'type': 'boolean',\n    'required': false,\n    'default': 'true'\n  },\n  {\n    'name': 'showLegend',\n    'description': '<p>Controls the visibility of legend.</p>\\n',\n    'type': 'boolean',\n    'required': false,\n    'default': 'true'\n  },\n  {\n    'name': 'category',\n    'description': '<p>Sets the name of the key containing the quantitative chart values.</p>\\n',\n    'type': 'string',\n    'required': true\n  },\n  {\n    'name': 'type',\n    'description': '<p>Change the type of the chart</p>\\n',\n    'type': '\\'donut\\' | \\'pie\\'',\n    'required': false,\n    'default': '\\'donut\\''\n  },\n  {\n    'name': 'sortFunction',\n    'description': '<p>Function to sort the segment</p>\\n',\n    'type': '((a: any, b: any) => number)',\n    'required': false\n  },\n  {\n    'name': 'valueFormatter',\n    'description': '<p>Controls the formatting for the label.</p>\\n',\n    'type': '((tick: number, i?: number, ticks?: number[]) => string)',\n    'required': false,\n    'default': '`${tick}`'\n  },\n  {\n    'name': 'customTooltip',\n    'description': '<p>Render custom tooltip component.</p>\\n',\n    'type': 'Component',\n    'required': false\n  }\n]\" />\n```\n\n----------------------------------------\n\nTITLE: Serving and Installing Registry Components\nDESCRIPTION: These bash commands show how to serve the registry using a development server and how to install a registry item using the shadcn-vue CLI.\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/docs/registry/getting-started.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpx shadcn-vue@latest add http://localhost:3000/r/hello-world.json\n```\n\n----------------------------------------\n\nTITLE: Configuring TypeScript Options in components.json\nDESCRIPTION: This code snippet shows how to configure components.json to opt-out of TypeScript by setting the 'typescript' flag to false, while maintaining other configuration options like style, tailwind settings, and import aliases.\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/docs/installation.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"style\": \"default\",\n  \"tailwind\": {\n    \"config\": \"tailwind.config.js\",\n    \"css\": \"src/app/globals.css\",\n    \"baseColor\": \"zinc\",\n    \"cssVariables\": true\n  },\n  \"typescript\": false,\n  \"aliases\": {\n    \"utils\": \"~/lib/utils\",\n    \"components\": \"~/components\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Simple Utility through Registry Component\nDESCRIPTION: A registry component item that adds a simple utility for content-visibility. It defines a content-auto utility that sets content-visibility to auto, optimizing rendering performance.\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/docs/registry/examples.md#2025-04-23_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"$schema\": \"https://shadcn-vue.com/schema/registry-item.json\",\n  \"name\": \"custom-component\",\n  \"type\": \"registry:component\",\n  \"css\": {\n    \"@utility content-auto\": {\n      \"content-visibility\": \"auto\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring shadcn-vue in Nuxt\nDESCRIPTION: TypeScript configuration to set up the shadcn-vue module in Nuxt, including prefix and component directory settings.\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/docs/installation/nuxt.md#2025-04-23_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineNuxtConfig({\n  // ...\n  modules: ['shadcn-nuxt'],\n  shadcn: {\n    /**\n     * Prefix for all the imported component\n     */\n    prefix: '',\n    /**\n     * Directory that the component lives in.\n     * @default \"./components/ui\"\n     */\n    componentDir: './components/ui'\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Defining Complex Component Structure in JSON for Shadcn-Vue Registry\nDESCRIPTION: This snippet demonstrates the structure of a complex component in the registry. It includes multiple files such as a page, components, a composable, utility functions, and a config file. The JSON structure defines the component's metadata and file paths.\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/docs/registry/faq.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"$schema\": \"https://shadcn-vue.com/schema/registry-item.json\",\n  \"name\": \"hello-world\",\n  \"title\": \"Hello World\",\n  \"type\": \"registry:block\",\n  \"description\": \"A complex hello world component\",\n  \"files\": [\n    {\n      \"path\": \"registry/new-york/HelloWorld/page.vue\",\n      \"type\": \"registry:page\",\n      \"target\": \"pages/hello/index.vue\"\n    },\n    {\n      \"path\": \"registry/new-york/HelloWorld/components/HelloWorld.vue\",\n      \"type\": \"registry:component\"\n    },\n    {\n      \"path\": \"registry/new-york/HelloWorld/components/FormattedMessage.vue\",\n      \"type\": \"registry:component\"\n    },\n    {\n      \"path\": \"registry/new-york/HelloWorld/composables/useHello.ts\",\n      \"type\": \"registry:hook\"\n    },\n    {\n      \"path\": \"registry/new-york/HelloWorld/lib/formatDate.ts\",\n      \"type\": \"registry:utils\"\n    },\n    {\n      \"path\": \"registry/new-york/HelloWorld/hello.config.ts\",\n      \"type\": \"registry:file\",\n      \"target\": \"~/hello.config.ts\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Utility Classes in components.json\nDESCRIPTION: JSON configuration for enabling Tailwind utility classes by setting cssVariables to false.\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/docs/theming.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"style\": \"default\",\n  \"tailwind\": {\n    \"config\": \"tailwind.config.js\",\n    \"css\": \"app/globals.css\",\n    \"baseColor\": \"slate\",\n    \"cssVariables\": false\n  },\n  \"aliases\": {\n    \"components\": \"@/components\",\n    \"utils\": \"@/lib/utils\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Separator Breadcrumb Implementation\nDESCRIPTION: Implementation showing how to use a custom separator (Slash icon) in the breadcrumb navigation.\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/docs/components/breadcrumb.md#2025-04-23_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport {\n  Breadcrumb,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbList,\n  BreadcrumbSeparator,\n} from '@/components/ui/breadcrumb'\nimport { Slash } from 'lucide-vue-next'\n</script>\n\n<template>\n  <Breadcrumb>\n    <BreadcrumbList>\n      <BreadcrumbItem>\n        <BreadcrumbLink href=\"/\">\n          Home\n        </BreadcrumbLink>\n      </BreadcrumbItem>\n      <BreadcrumbSeparator>\n        <Slash />\n      </BreadcrumbSeparator>\n      <BreadcrumbItem>\n        <BreadcrumbLink href=\"/components\">\n          Components\n        </BreadcrumbLink>\n      </BreadcrumbItem>\n    </BreadcrumbList>\n  </Breadcrumb>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Markdown Documentation Structure for Registry Setup\nDESCRIPTION: Markdown content describing the registry feature, its experimental status, and requirements for setting up a custom component registry compatible with shadcn-vue CLI.\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/docs/registry/index.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: Registry\ndescription: Run your own component registry.\n---\n\n<Callout class=\"mt-0\" >\n\n  **Note:** This feature is currently experimental. Help us improve it by\n  testing it out and sending feedback. If you have any questions, please [reach\n  out to us](https://github.com/unovue/shadcn-vue/discussions).\n\n</Callout>\n\nYou can use the `shadcn-vue` CLI to run your own component registry. Running your own registry allows you to distribute your custom components, hooks, pages, and other files to any Vue project.\n\nRegistry items are automatically compatible with the `shadcn-vue` CLI.\n\n## Requirements\n\nYou are free to design and host your custom registry as you see fit. The only requirement is that your registry items must be valid JSON files that conform to the [registry-item schema specification](/docs/registry/registry-item-json).\n\n<!-- If you'd like to see an example of a registry, we have a [template project](https://github.com/shadcn-ui/registry-template) for you to use as a starting point. -->\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of Toggle Component in Vue\nDESCRIPTION: Example of how to import and use the Toggle component in a Vue template.\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/docs/components/toggle.md#2025-04-23_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { Toggle } from '@/components/ui/toggle'\n</script>\n\n<template>\n  <Toggle>Toggle</Toggle>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Registry Item Description Property\nDESCRIPTION: The description property provides a more detailed explanation of what the registry item does or is used for.\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/docs/registry/registry-item-json.md#2025-04-23_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"description\": \"A simple hello world component.\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring TypeScript Path Aliases\nDESCRIPTION: TypeScript configuration for setting up path aliases to enable '@' imports in the project.\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/docs/installation/manual.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"compilerOptions\": {\n    \"baseUrl\": \".\",\n    \"paths\": {\n      \"@/*\": [\".*\"]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Vite for path resolution and plugins\nDESCRIPTION: Vite configuration that sets up path aliases and registers the Vue and Tailwind CSS plugins. This allows using @/ imports and ensures proper functioning of Tailwind CSS.\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/docs/installation/vite.md#2025-04-23_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport path from 'node:path'\nimport tailwindcss from '@tailwindcss/vite'\nimport vue from '@vitejs/plugin-vue'\nimport { defineConfig } from 'vite'\n\nexport default defineConfig({\n  plugins: [vue(), tailwindcss()],\n  resolve: {\n    alias: {\n      '@': path.resolve(__dirname, './src'),\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Adding a Build Script for shadcn-vue CLI\nDESCRIPTION: This JSON snippet shows how to add a registry:build script to the package.json file. This script uses the shadcn-vue CLI to build the registry.\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/docs/registry/getting-started.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"scripts\": {\n    \"registry:build\": \"shadcn-vue build\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using shadcn-vue Components in Vue Template\nDESCRIPTION: Example of how to use a shadcn-vue component (Button) in a Vue template.\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/docs/installation/nuxt.md#2025-04-23_snippet_10\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <div>\n    <Button>Click me</Button>\n  </div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Running the shadcn-vue Website Development Server\nDESCRIPTION: Command to start the development server for the shadcn-vue website.\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/CONTRIBUTING.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm dev\n```\n\n----------------------------------------\n\nTITLE: Schema Configuration in Components.json\nDESCRIPTION: Basic configuration showing the schema reference for components.json\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/docs/components-json.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"$schema\": \"https://shadcn-vue.com/schema.json\"\n}\n```\n\n----------------------------------------\n\nTITLE: Importing and Using AspectRatio Component in Vue\nDESCRIPTION: Demonstrates how to import the AspectRatio component from the shadcn-vue registry for use in a Vue component.\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/docs/figma.md#2025-04-23_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nimport { AspectRatio } from '@/registry/default/ui/aspect-ratio';\n</script>\n```\n\n----------------------------------------\n\nTITLE: Registry Item Author Property\nDESCRIPTION: The author property identifies the creator of the registry item, typically including their name and email address.\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/docs/registry/registry-item-json.md#2025-04-23_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"author\": \"John Doe <john@doe.com>\"\n}\n```\n\n----------------------------------------\n\nTITLE: VitePress Router Navigation Implementation in Vue\nDESCRIPTION: Sets up a Vue component that uses the VitePress router to redirect users to the accordion documentation page. Demonstrates basic programmatic navigation using the router.go() method.\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/docs/components.md#2025-04-23_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nimport { useRouter } from 'vitepress'\n\nconst router = useRouter()\nrouter.go('/docs/components/accordion')\n</script>\n```\n\n----------------------------------------\n\nTITLE: Configuring Component Settings\nDESCRIPTION: JSON configuration file for component settings including style preferences, TypeScript usage, and various project aliases.\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/docs/installation/manual.md#2025-04-23_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"$schema\": \"https://shadcn-vue.com/schema.json\",\n  \"style\": \"new-york\",\n  \"typescript\": true,\n  \"tailwind\": {\n    \"config\": \"\",\n    \"css\": \"src/styles/globals.css\",\n    \"baseColor\": \"neutral\",\n    \"cssVariables\": true,\n    \"prefix\": \"\"\n  },\n  \"aliases\": {\n    \"components\": \"@/components\",\n    \"composables\": \"@/composables\",\n    \"utils\": \"@/lib/utils\",\n    \"ui\": \"@/components/ui\",\n    \"lib\": \"@/lib\"\n  },\n  \"iconLibrary\": \"lucide\"\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying Schema in registry.json for shadcn-vue\nDESCRIPTION: This JSON snippet shows how to specify the schema for the registry.json file using the $schema property.\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/docs/registry/registry-json.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"$schema\": \"https://shadcn-vue.com/schema/registry.json\"\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Combobox Component with shadcn-vue CLI\nDESCRIPTION: Command to add the Combobox component to your shadcn-vue project using the CLI tool.\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/docs/components/combobox.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx shadcn-vue@latest add combobox\n```\n\n----------------------------------------\n\nTITLE: Carousel Item Sizing with Fixed Width\nDESCRIPTION: Example showing how to set fixed width for carousel items using Tailwind's utility classes.\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/docs/components/carousel.md#2025-04-23_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n// 33% of the carousel width.\n<Carousel>\n  <CarouselContent>\n    <CarouselItem class=\"basis-1/3\">...</CarouselItem>\n    <CarouselItem class=\"basis-1/3\">...</CarouselItem>\n    <CarouselItem class=\"basis-1/3\">...</CarouselItem>\n  </CarouselContent>\n</Carousel>\n```\n\n----------------------------------------\n\nTITLE: Running Tests with Vitest\nDESCRIPTION: Command to run all tests for the project using Vitest testing framework.\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/CONTRIBUTING.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\npnpm test\n```\n\n----------------------------------------\n\nTITLE: Importing Toast Hook\nDESCRIPTION: Import statement for the useToast hook from the toast component\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/docs/components/toast.md#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useToast } from '@/components/ui/toast/use-toast'\n```\n\n----------------------------------------\n\nTITLE: Registry Item Registry Dependencies Property\nDESCRIPTION: The registryDependencies property lists other registry items that this item depends on, which can be referenced by name or URL.\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/docs/registry/registry-item-json.md#2025-04-23_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"registryDependencies\": [\n    \"button\",\n    \"input\",\n    \"select\",\n    \"https://example.com/r/editor.json\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering a Vue Component with Script Setup\nDESCRIPTION: This code snippet shows how to import a Vue component from a specific path and render it in the template. It uses the script setup syntax which is a feature of Vue 3's Composition API that simplifies component definitions.\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/examples/forms/display.md#2025-04-23_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nimport DisplayExample from \"@/examples/forms/Display.vue\"\n</script>\n\n<DisplayExample />\n```\n\n----------------------------------------\n\nTITLE: Installing Dark Mode Dependencies for Vue\nDESCRIPTION: Commands to install the required dependencies for implementing dark mode functionality in a Vue application. The core dependency is @vueuse/core which provides the useColorMode composable for managing theme state.\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/docs/dark-mode/vite.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @vueuse/core\n```\n\n----------------------------------------\n\nTITLE: Installing Alert Component with shadcn-vue CLI\nDESCRIPTION: Command to install the Alert component using the shadcn-vue CLI tool.\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/docs/components/alert.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx shadcn-vue@latest add alert\n```\n\n----------------------------------------\n\nTITLE: Installing Menubar Component in Shadcn-Vue\nDESCRIPTION: Command to install the Menubar component using the shadcn-vue CLI. This installs all necessary dependencies and adds the component to your project.\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/docs/components/menubar.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx shadcn-vue@latest add menubar\n```\n\n----------------------------------------\n\nTITLE: Responsive Carousel Item Spacing\nDESCRIPTION: Example showing how to implement responsive spacing between carousel items for different screen sizes.\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/docs/components/carousel.md#2025-04-23_snippet_5\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <Carousel>\n    <CarouselContent class=\"-ml-2 md:-ml-4\">\n      <CarouselItem class=\"pl-2 md:pl-4\">\n        ...\n      </CarouselItem>\n      <CarouselItem class=\"pl-2 md:pl-4\">\n        ...\n      </CarouselItem>\n      <CarouselItem class=\"pl-2 md:pl-4\">\n        ...\n      </CarouselItem>\n    </CarouselContent>\n  </Carousel>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies with pnpm\nDESCRIPTION: Command to install project dependencies using pnpm package manager.\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/CONTRIBUTING.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npnpm install\n```\n\n----------------------------------------\n\nTITLE: Installing Calendar Component with shadcn-vue CLI\nDESCRIPTION: This command installs the Calendar component using the shadcn-vue CLI tool. The component depends on the @internationalized/date package for handling dates and times in JavaScript.\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/docs/components/calendar.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx shadcn-vue@latest add calendar\n```\n\n----------------------------------------\n\nTITLE: Configuring Tailwind CSS in Nuxt\nDESCRIPTION: CSS configuration to import Tailwind CSS in the project.\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/docs/installation/nuxt.md#2025-04-23_snippet_3\n\nLANGUAGE: css\nCODE:\n```\n@import \"tailwindcss\";\n```\n\n----------------------------------------\n\nTITLE: Installing Accordion Component with Shadcn-Vue CLI\nDESCRIPTION: Command to install the accordion component using the shadcn-vue CLI tool. This adds the component to your project's component library.\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/docs/components/accordion.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx shadcn-vue@latest add accordion\n```\n\n----------------------------------------\n\nTITLE: Using CSS Variables in HTML\nDESCRIPTION: Example of using CSS variable-based classes for theming.\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/docs/theming.md#2025-04-23_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"bg-background text-foreground\" />\n```\n\n----------------------------------------\n\nTITLE: Basic Vue Script Setup\nDESCRIPTION: Initial script setup demonstrating URL construction for commit comparison\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/docs/contribution.md#2025-04-23_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { Button } from \"@/registry/new-york/ui/button\"\n\nconst latestSyncCommitTag = \"06cc0cdf3d080555d26abbe6639f2d7f6341ec73\"\n\nconst latestSyncCommitUrl = `https://github.com/shadcn-ui/ui/commit/${latestSyncCommitTag}`\nconst diffUrl = `https://github.com/shadcn-ui/ui/compare/${latestSyncCommitTag}...main`\n</script>\n```\n\n----------------------------------------\n\nTITLE: Tailwind CSS Variables Configuration\nDESCRIPTION: Configuration for choosing between CSS variables or utility classes for theming\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/docs/components-json.md#2025-04-23_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"tailwind\": {\n    \"cssVariables\": `true` | `false`\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Dropdown Menu Component with shadcn-vue\nDESCRIPTION: Command to add the dropdown menu component to a Vue project using shadcn-vue.\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/docs/components/dropdown-menu.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx shadcn-vue@latest add dropdown-menu\n```\n\n----------------------------------------\n\nTITLE: Vue Component Props Definition Using APITable\nDESCRIPTION: Defines the component's props using APITable format, including data source configuration, visual customization options, formatting functions, and visibility controls.\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/meta/LineChart.md#2025-04-23_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<APITable :type=\"'prop'\" :data=\"[\n  {\n    'name': 'data',\n    'description': '<p>The source data, in which each entry is a dictionary.</p>\\n',\n    'type': 'Record<string, any>[]',\n    'required': true\n  },\n  {\n    'name': 'categories',\n    'description': '<p>Select the categories from your data. Used to populate the legend and toolip.</p>\\n',\n    'type': 'string[]',\n    'required': true\n  },\n  {\n    'name': 'index',\n    'description': '<p>Sets the key to map the data to the axis.</p>\\n',\n    'type': 'string',\n    'required': true\n  },\n  {\n    'name': 'colors',\n    'description': '<p>Change the default colors.</p>\\n',\n    'type': 'string[]',\n    'required': false\n  },\n  {\n    'name': 'margin',\n    'description': '<p>Margin of each the container</p>\\n',\n    'type': 'Spacing',\n    'required': false,\n    'default': '{ top: 0, bottom: 0, left: 0, right: 0 }'\n  },\n  {\n    'name': 'filterOpacity',\n    'description': '<p>Change the opacity of the non-selected field</p>\\n',\n    'type': 'number',\n    'required': false,\n    'default': '0.2'\n  },\n  {\n    'name': 'xFormatter',\n    'description': '<p>Function to format X label</p>\\n',\n    'type': '((tick: number | Date, i: number, ticks: number[] | Date[]) => string)',\n    'required': false\n  },\n  {\n    'name': 'yFormatter',\n    'description': '<p>Function to format Y label</p>\\n',\n    'type': '((tick: number | Date, i: number, ticks: number[] | Date[]) => string)',\n    'required': false\n  },\n  {\n    'name': 'showXAxis',\n    'description': '<p>Controls the visibility of the X axis.</p>\\n',\n    'type': 'boolean',\n    'required': false,\n    'default': 'true'\n  },\n  {\n    'name': 'showYAxis',\n    'description': '<p>Controls the visibility of the Y axis.</p>\\n',\n    'type': 'boolean',\n    'required': false,\n    'default': 'true'\n  },\n  {\n    'name': 'showTooltip',\n    'description': '<p>Controls the visibility of tooltip.</p>\\n',\n    'type': 'boolean',\n    'required': false,\n    'default': 'true'\n  },\n  {\n    'name': 'showLegend',\n    'description': '<p>Controls the visibility of legend.</p>\\n',\n    'type': 'boolean',\n    'required': false,\n    'default': 'true'\n  },\n  {\n    'name': 'showGridLine',\n    'description': '<p>Controls the visibility of gridline.</p>\\n',\n    'type': 'boolean',\n    'required': false,\n    'default': 'true'\n  },\n  {\n    'name': 'customTooltip',\n    'description': '<p>Render custom tooltip component.</p>\\n',\n    'type': 'Component',\n    'required': false\n  },\n  {\n    'name': 'curveType',\n    'description': '<p>Type of curve</p>\\n',\n    'type': 'CurveType',\n    'required': false,\n    'default': 'CurveType.MonotoneX'\n  }\n]\" />\n```\n\n----------------------------------------\n\nTITLE: Cloning the shadcn-vue Repository\nDESCRIPTION: Command to clone the shadcn-vue repository from GitHub to the local machine.\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/CONTRIBUTING.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone git@github.com:unovue/shadcn-vue.git\n```\n\n----------------------------------------\n\nTITLE: Add Command Options for Shadcn-Vue CLI\nDESCRIPTION: Available options for the 'add' command including confirmation skipping, overwrite settings, working directory specification, and path customization.\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/docs/cli.md#2025-04-23_snippet_5\n\nLANGUAGE: txt\nCODE:\n```\nUsage: shadcn-vue add [options] [components...]\n\nadd a component to your project\n\nArguments:\n  components         the components to add or a url to the component.\n\nOptions:\n  -y, --yes          skip confirmation prompt. (default: false)\n  -o, --overwrite    overwrite existing files. (default: false)\n  -c, --cwd <cwd>    the working directory. defaults to the current directory.\n  -a, --all          add all available components. (default: false)\n  -p, --path <path>  the path to add the component to.\n  -h, --help         display help for command\n```\n\n----------------------------------------\n\nTITLE: Installing Popover Component with shadcn-vue CLI\nDESCRIPTION: Command to install the Popover component using the shadcn-vue CLI tool. This adds the component to your project.\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/docs/components/popover.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx shadcn-vue@latest add popover\n```\n\n----------------------------------------\n\nTITLE: Configuring CSS Variables in components.json\nDESCRIPTION: JSON configuration for enabling CSS variables by setting cssVariables to true.\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/docs/theming.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"style\": \"default\",\n  \"tailwind\": {\n    \"config\": \"tailwind.config.js\",\n    \"css\": \"app/globals.css\",\n    \"baseColor\": \"slate\",\n    \"cssVariables\": true\n  },\n  \"aliases\": {\n    \"components\": \"@/components\",\n    \"utils\": \"@/lib/utils\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing and Using Blocks Component in Vue\nDESCRIPTION: This snippet imports the Blocks component from a specific path and sets it up for use in the Vue template. The component is likely responsible for rendering various building blocks or UI elements.\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/blocks.md#2025-04-23_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nimport Blocks from \"../../.vitepress/theme/components/Blocks.vue\"\n</script>\n\n<Blocks />\n```\n\n----------------------------------------\n\nTITLE: Defining Homepage in registry.json for shadcn-vue\nDESCRIPTION: This JSON snippet shows how to set the homepage property for the registry, used for data attributes and other metadata.\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/docs/registry/registry-json.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"homepage\": \"https://acme.com\"\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Hover Card Component with shadcn-vue\nDESCRIPTION: Command to add the Hover Card component to your project using the shadcn-vue CLI tool.\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/docs/components/hover-card.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx shadcn-vue@latest add hover-card\n```\n\n----------------------------------------\n\nTITLE: Implementing Boolean Props with AccordionItem Component in Vue\nDESCRIPTION: Demonstrates how to handle boolean props in a Vue component wrapper using useForwardProps composable. The component extends AccordionItemProps and implements class binding with proper prop forwarding.\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/docs/contribution.md#2025-04-23_snippet_9\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { cn } from '@/lib/utils'\nimport { AccordionItem, type AccordionItemProps, useForwardProps } from 'reka-ui'\nimport { computed, type HTMLAttributes } from 'vue'\n\nconst props = defineProps<AccordionItemProps & { class?: HTMLAttributes['class'] }>()\n\nconst delegatedProps = computed(() => {\n  const { class: _, ...delegated } = props\n\n  return delegated\n})\n\nconst forwardedProps = useForwardProps(delegatedProps)\n</script>\n\n<template>\n  <AccordionItem\n    v-bind=\"forwardedProps\"\n    :class=\"cn('border-b', props.class)\"\n  >\n    <slot />\n  </AccordionItem>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Installing Select Component with shadcn-vue CLI\nDESCRIPTION: Command to add the Select component to your shadcn-vue project using the CLI tool.\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/docs/components/select.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx shadcn-vue@latest add select\n```\n\n----------------------------------------\n\nTITLE: Installing Tailwind CSS dependencies\nDESCRIPTION: Command to install Tailwind CSS and its Vite plugin which are required for styling shadcn-vue components.\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/docs/installation/vite.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install tailwindcss @tailwindcss/vite\n```\n\n----------------------------------------\n\nTITLE: Installing Badge Component with CLI\nDESCRIPTION: Command to install the Badge component using the shadcn-vue CLI tool.\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/docs/components/badge.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx shadcn-vue@latest add badge\n```\n\n----------------------------------------\n\nTITLE: Utils Alias Configuration\nDESCRIPTION: Configuration for setting import alias for utility functions\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/docs/components-json.md#2025-04-23_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"aliases\": {\n    \"utils\": \"@/lib/utils\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Tailwind CSS Path Configuration\nDESCRIPTION: Configuration for specifying the location of the main CSS file that imports Tailwind\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/docs/components-json.md#2025-04-23_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"tailwind\": {\n    \"css\": \"src/assets/index.css\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Registry Item Name Property\nDESCRIPTION: The name property defines the identifier for the registry item, which should be unique within the registry.\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/docs/registry/registry-item-json.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"hello-world\"\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Skeleton Component with CLI in shadcn-vue\nDESCRIPTION: Command to install the Skeleton component using the shadcn-vue CLI tool. This is the recommended installation method for adding the component to your project.\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/docs/components/skeleton.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx shadcn-vue@latest add skeleton\n```\n\n----------------------------------------\n\nTITLE: Custom CSS Variable Implementation\nDESCRIPTION: Example of custom warning color implementation in CSS with dark mode support.\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/docs/theming.md#2025-04-23_snippet_4\n\nLANGUAGE: css\nCODE:\n```\n:root {\n  --warning: 38 92% 50%;\n  --warning-foreground: 48 96% 89%;\n}\n\n.dark {\n  --warning: 48 96% 89%;\n  --warning-foreground: 38 92% 50%;\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Required CSS Variables for Sidebar Theming\nDESCRIPTION: CSS variables that need to be added to your CSS file for proper sidebar theming with both light and dark mode support.\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/docs/components/sidebar.md#2025-04-23_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n@layer base {\n  :root {\n    --sidebar-background: 0 0% 98%;\n    --sidebar-foreground: 240 5.3% 26.1%;\n    --sidebar-primary: 240 5.9% 10%;\n    --sidebar-primary-foreground: 0 0% 98%;\n    --sidebar-accent: 240 4.8% 95.9%;\n    --sidebar-accent-foreground: 240 5.9% 10%;\n    --sidebar-border: 220 13% 91%;\n    --sidebar-ring: 217.2 91.2% 59.8%;\n }\n\n  .dark {\n    --sidebar-background: 240 5.9% 10%;\n    --sidebar-foreground: 240 4.8% 95.9%;\n    --sidebar-primary: 224.3 76.3% 48%;\n    --sidebar-primary-foreground: 0 0% 100%;\n    --sidebar-accent: 240 3.7% 15.9%;\n    --sidebar-accent-foreground: 240 4.8% 95.9%;\n    --sidebar-border: 240 3.7% 15.9%;\n    --sidebar-ring: 217.2 91.2% 59.8%;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a new Vue project with Vite\nDESCRIPTION: Command to create a new Vue TypeScript project using Vite as the build tool. This initializes a new Vue project with TypeScript support.\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/docs/installation/vite.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm create vite@latest my-vue-app -- --template vue-ts\n```\n\n----------------------------------------\n\nTITLE: Installing Input Component via CLI for Shadcn-Vue\nDESCRIPTION: This command uses npx to add the input component to a Shadcn-Vue project. It's a quick way to install the component using the project's CLI tool.\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/docs/components/input.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx shadcn-vue@latest add input\n```\n\n----------------------------------------\n\nTITLE: Initializing shadcn-vue in Astro Project\nDESCRIPTION: Command to run the shadcn-vue initialization in the Astro project setup.\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/docs/installation/astro.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpx shadcn-vue@latest init\n```\n\n----------------------------------------\n\nTITLE: Components Alias Configuration\nDESCRIPTION: Configuration for setting import alias for components\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/docs/components-json.md#2025-04-23_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"aliases\": {\n    \"components\": \"@/components\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Registry Item Type Property\nDESCRIPTION: The type property specifies the category of the registry item, which determines how it will be handled by the system.\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/docs/registry/registry-item-json.md#2025-04-23_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"registry:block\"\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Switch Component via CLI\nDESCRIPTION: Command to install the Switch component using the shadcn-vue CLI tool.\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/docs/components/switch.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx shadcn-vue@latest add switch\n```\n\n----------------------------------------\n\nTITLE: Setting Up Global CSS Styles\nDESCRIPTION: Global CSS configuration including theme variables, dark mode support, and custom animations for the application.\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/docs/installation/manual.md#2025-04-23_snippet_2\n\nLANGUAGE: css\nCODE:\n```\n@import \"tailwindcss\";\n@import \"tw-animate-css\";\n\n@custom-variant dark (&:is(.dark *));\n\n:root {\n  --background: oklch(1 0 0);\n  --foreground: oklch(0.145 0 0);\n  /* ... additional CSS variables ... */\n}\n\n.dark {\n  --background: oklch(0.145 0 0);\n  --foreground: oklch(0.985 0 0);\n  /* ... dark mode variables ... */\n}\n\n@theme inline {\n  /* ... theme variables ... */\n}\n\n@layer base {\n  * {\n    @apply border-border outline-ring/50;\n  }\n  body {\n    @apply bg-background text-foreground;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Tabs Component with shadcn-vue CLI\nDESCRIPTION: This command uses the shadcn-vue CLI to add the Tabs component to your project.\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/docs/components/tabs.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx shadcn-vue@latest add tabs\n```\n\n----------------------------------------\n\nTITLE: Configuring TypeScript Paths in tsconfig.json\nDESCRIPTION: Adds path configurations to the tsconfig.json file to resolve imports from the src directory.\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/docs/installation/astro.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  \"compilerOptions\": {\n    // ...\n    \"baseUrl\": \".\",\n    \"paths\": {\n      \"@/*\": [\n        \"./src/*\"\n      ]\n    }\n    // ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Toggle Component Dependencies\nDESCRIPTION: Command to install the required dependency (reka-ui) for the Toggle component.\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/docs/components/toggle.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install reka-ui\n```\n\n----------------------------------------\n\nTITLE: Installing Tailwind CSS and Vite Plugin\nDESCRIPTION: Command to install Tailwind CSS and its Vite plugin for Nuxt.\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/docs/installation/nuxt.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm install tailwindcss @tailwindcss/vite\n```\n\n----------------------------------------\n\nTITLE: Configuring Components JSON Schema\nDESCRIPTION: Configuration file update to include import aliases for components, utils, UI, lib and composables directories.\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/docs/changelog.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"$schema\": \"https://shadcn-vue.com/schema.json\",\n  \"style\": \"new-york\",\n  \"tailwind\": {\n    // ...\n  },\n  \"aliases\": {\n    \"components\": \"@/components\",\n    \"utils\": \"@/lib/utils\",\n    \"ui\": \"@/components/ui\",\n    \"lib\": \"@/lib\",\n    \"composables\": \"@/composables\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Table Component with ShadcnVue CLI\nDESCRIPTION: Command to install the table component using the ShadcnVue CLI tool.\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/docs/components/table.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx shadcn-vue@latest add table\n```\n\n----------------------------------------\n\nTITLE: Installing Tags Input Component with shadcn-vue CLI\nDESCRIPTION: Command to install the Tags Input component using the shadcn-vue CLI tool. This adds the component to your project with all necessary dependencies.\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/docs/components/tags-input.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx shadcn-vue@latest add tags-input\n```\n\n----------------------------------------\n\nTITLE: Creating Inline Theme Script in Astro\nDESCRIPTION: This snippet demonstrates how to create an inline script in an Astro page to handle theme preference detection and application. It uses localStorage for persistence and MutationObserver to track theme changes.\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/docs/dark-mode/astro.md#2025-04-23_snippet_0\n\nLANGUAGE: astro\nCODE:\n```\n---\nimport '../styles/globals.css'\n---\n\n<script is:inline>\n\tconst getThemePreference = () => {\n\t\tif (typeof localStorage !== 'undefined' && localStorage.getItem('theme')) {\n\t\t\treturn localStorage.getItem('theme');\n\t\t}\n\t\treturn window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light';\n\t};\n\tconst isDark = getThemePreference() === 'dark';\n\tdocument.documentElement.classList[isDark ? 'add' : 'remove']('dark');\n\n\tif (typeof localStorage !== 'undefined') {\n\t\tconst observer = new MutationObserver(() => {\n\t\t\tconst isDark = document.documentElement.classList.contains('dark');\n\t\t\tlocalStorage.setItem('theme', isDark ? 'dark' : 'light');\n\t\t});\n\t\tobserver.observe(document.documentElement, { attributes: true, attributeFilter: ['class'] });\n\t}\n</script>\n\n<html lang=\"en\">\n\t<body>\n      <h1>Astro</h1>\n\t</body>\n</html>\n</script>\n```\n\n----------------------------------------\n\nTITLE: Installing @nuxtjs/color-mode Module\nDESCRIPTION: This snippet shows how to install the @nuxtjs/color-mode module using npm. This module is essential for implementing dark mode functionality in a Nuxt application.\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/docs/dark-mode/nuxt.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install -D @nuxtjs/color-mode\n```\n\n----------------------------------------\n\nTITLE: Installing Aspect Ratio Component via CLI\nDESCRIPTION: Command to install the Aspect Ratio component using the shadcn-vue CLI tool.\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/docs/components/aspect-ratio.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx shadcn-vue@latest add aspect-ratio\n```\n\n----------------------------------------\n\nTITLE: Configuring tsconfig.app.json for path resolution\nDESCRIPTION: Additional TypeScript configuration for the app-specific tsconfig that adds path resolution settings for IDE support. This ensures consistent path resolution across the project.\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/docs/installation/vite.md#2025-04-23_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"compilerOptions\": {\n    // ...\n    \"baseUrl\": \".\",\n    \"paths\": {\n      \"@/*\": [\n        \"./src/*\"\n      ]\n    }\n    // ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Registry Item Dependencies Property\nDESCRIPTION: The dependencies property lists the npm packages required by the registry item, with optional version specifications.\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/docs/registry/registry-item-json.md#2025-04-23_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"dependencies\": [\n    \"reka-ui\",\n    \"zod\",\n    \"lucide-vue-next\",\n    \"name@1.0.2\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Installing VeeValidate with CLI\nDESCRIPTION: Command to install the form components using the shadcn-vue CLI tool, which automatically adds all necessary form components to your project.\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/docs/components/form.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpx shadcn-vue@latest add form\n```\n\n----------------------------------------\n\nTITLE: Installing Alert Dialog Component\nDESCRIPTION: Command to add the alert dialog component to a Vue project using shadcn-vue CLI\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/docs/components/alert-dialog.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx shadcn-vue@latest add alert-dialog\n```\n\n----------------------------------------\n\nTITLE: Tailwind Base Color Configuration\nDESCRIPTION: Configuration for setting the default color palette, which cannot be changed after initialization\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/docs/components-json.md#2025-04-23_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"tailwind\": {\n    \"baseColor\": \"gray\" | \"neutral\" | \"slate\" | \"stone\" | \"zinc\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Init Command Options for Shadcn-Vue CLI\nDESCRIPTION: Available options for the 'init' command including defaults, force overwrite, confirmation skipping, and working directory specification.\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/docs/cli.md#2025-04-23_snippet_2\n\nLANGUAGE: txt\nCODE:\n```\nUsage: shadcn-vue init [options] [components...]\n\ninitialize your project and install dependencies\n\nArguments:\n  components         the components to add or a url to the component.\n\nOptions:\n  -d, --defaults    use default values i.e new-york, zinc and css variables. (default: false)\n  -f, --force       force overwrite of existing components.json. (default: false)\n  -y, --yes         skip confirmation prompt. (default: false)\n  -c, --cwd <cwd>   the working directory. defaults to the current directory.\n  -h, --help       display help for command\n```\n\n----------------------------------------\n\nTITLE: Installing Avatar Component with shadcn-vue\nDESCRIPTION: Command to install the Avatar component using the shadcn-vue CLI tool.\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/docs/components/avatar.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx shadcn-vue@latest add avatar\n```\n\n----------------------------------------\n\nTITLE: Installing Slider Component via NPX\nDESCRIPTION: Command to add the Slider component to your project using npx and shadcn-vue.\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/docs/components/slider.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx shadcn-vue@latest add slider\n```\n\n----------------------------------------\n\nTITLE: Installing Pagination Component with Shadcn-Vue CLI\nDESCRIPTION: Command to add the pagination component to a Shadcn-Vue project using the CLI tool.\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/docs/components/pagination.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx shadcn-vue@latest add pagination\n```\n\n----------------------------------------\n\nTITLE: Installing Optional Icon Dependencies for Theme Toggle\nDESCRIPTION: Command to install the optional icon-related packages for the theme toggle button. These packages provide the moon and sun icons used in the theme toggle UI component.\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/docs/dark-mode/vite.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install -D @iconify/vue @iconify-json/radix-icons\n```\n\n----------------------------------------\n\nTITLE: Registry Item Documentation Property\nDESCRIPTION: The docs property provides custom installation instructions or important notes that will be displayed when the registry item is installed.\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/docs/registry/registry-item-json.md#2025-04-23_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"docs\": \"Remember to add the FOO_BAR environment variable to your .env file.\"\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Button Component via CLI\nDESCRIPTION: Command to install the Button component using the shadcn-vue CLI tool.\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/docs/components/button.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx shadcn-vue@latest add button\n```\n\n----------------------------------------\n\nTITLE: Installing Label Component via CLI\nDESCRIPTION: Command to install the Label component using the shadcn-vue CLI tool.\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/docs/components/label.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx shadcn-vue@latest add label\n```\n\n----------------------------------------\n\nTITLE: Rendering Button Components with Vue\nDESCRIPTION: This code snippet shows how to render Button components with different styles and link attributes using Vue.js template syntax.\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/docs/tailwind-v4.md#2025-04-23_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<div class=\"flex gap-2 items-center mt-6 not-docs\">\n  <Button asChild size=\"sm\" class=\"rounded-lg\">\n    <a href=\"#try-it-out\">Get Started</a>\n  </Button>\n  <Button asChild size=\"sm\" variant=\"outline\" class=\"rounded-lg\">\n    <a href=\"https://v4.shadcn-vue.com\" target=\"_blank\" rel=\"noopener noreferrer\">\n      See Demo\n    </a>\n  </Button>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Installing Dialog Component with shadcn-vue\nDESCRIPTION: Command to add the Dialog component to your Vue.js project using shadcn-vue.\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/docs/components/dialog.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx shadcn-vue@latest add dialog\n```\n\n----------------------------------------\n\nTITLE: Installing Stepper Component with shadcn-vue\nDESCRIPTION: Command to add the stepper component to a Vue project using shadcn-vue CLI.\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/docs/components/stepper.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx shadcn-vue@latest add stepper\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for Dark Mode in Astro\nDESCRIPTION: This snippet shows the commands to install necessary dependencies for implementing dark mode. It includes @vueuse/core for color mode management and optional icon-related packages.\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/docs/dark-mode/astro.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @vueuse/core\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm install -D @iconify/vue @iconify-json/radix-icons\n```\n\n----------------------------------------\n\nTITLE: Registry Item Categories Property\nDESCRIPTION: The categories property assigns tags or categories to the registry item for organization and filtering purposes.\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/docs/registry/registry-item-json.md#2025-04-23_snippet_14\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"categories\": [\"sidebar\", \"dashboard\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Separator Component via CLI in shadcn-vue\nDESCRIPTION: Command to install the Separator component using the shadcn-vue CLI tool. This is the quickest way to add the component to your project.\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/docs/components/separator.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx shadcn-vue@latest add separator\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering AppearanceExample Component in Vue\nDESCRIPTION: This snippet shows how to import a Vue component from a specific path and then render it within the template. It uses the script setup syntax introduced in Vue 3.\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/examples/forms/appearance.md#2025-04-23_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nimport AppearanceExample from \"@/examples/forms/Appearance.vue\"\n</script>\n\n<AppearanceExample />\n```\n\n----------------------------------------\n\nTITLE: Development Commands\nDESCRIPTION: Common development commands for working with the Shadcn Nuxt module, including setup, testing, and deployment tasks.\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/packages/module/README.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# Install dependencies\nnpm install\n\n# Generate type stubs\nnpm run dev:prepare\n\n# Develop with the playground\nnpm run dev\n\n# Build the playground\nnpm run dev:build\n\n# Run ESLint\nnpm run lint\n\n# Run Vitest\nnpm run test\nnpm run test:watch\n\n# Release new version\nnpm run release\n```\n\n----------------------------------------\n\nTITLE: Installing Card Component with shadcn-vue CLI\nDESCRIPTION: Command to install the Card component using the shadcn-vue CLI tool. This adds the card component and its related files to your project.\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/docs/components/card.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx shadcn-vue@latest add card\n```\n\n----------------------------------------\n\nTITLE: Installing the Carousel Component with Shadcn-Vue CLI\nDESCRIPTION: Command to install the carousel component using the Shadcn-Vue CLI tool.\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/docs/components/carousel.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx shadcn-vue@latest add carousel\n```\n\n----------------------------------------\n\nTITLE: Initializing Project with Shadcn-Vue CLI\nDESCRIPTION: Command to initialize a new Shadcn-Vue project, which installs dependencies, adds utilities, configures Tailwind, and sets up CSS variables.\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/docs/cli.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx shadcn-vue@latest init\n```\n\n----------------------------------------\n\nTITLE: Optional Fields Configuration\nDESCRIPTION: Example of making fields optional in Zod schema\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/docs/components/auto-form.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst formSchema = z.object({\n  username: z.string().optional(),\n})\n```\n\n----------------------------------------\n\nTITLE: Installing Progress Component via CLI\nDESCRIPTION: Command to install the Progress component using the shadcn-vue CLI tool.\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/docs/components/progress.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx shadcn-vue@latest add progress\n```\n\n----------------------------------------\n\nTITLE: Installing Embla Carousel Autoplay Plugin\nDESCRIPTION: Command to install the autoplay plugin for Embla Carousel.\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/docs/components/carousel.md#2025-04-23_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nnpm install embla-carousel-autoplay\n```\n\n----------------------------------------\n\nTITLE: Registry Item Files Property\nDESCRIPTION: The files property defines the components, hooks, pages, or other files that make up the registry item, including their paths, types, and optional target locations.\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/docs/registry/registry-item-json.md#2025-04-23_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"files\": [\n    {\n      \"path\": \"registry/new-york/HelloWorld/page.vue\",\n      \"type\": \"registry:page\",\n      \"target\": \"pages/hello/index.vue\"\n    },\n    {\n      \"path\": \"registry/new-york/HelloWorld/HelloWorld.vue\",\n      \"type\": \"registry:component\"\n    },\n    {\n      \"path\": \"registry/new-york/HelloWorld/useHelloWorld.ts\",\n      \"type\": \"registry:hook\"\n    },\n    {\n      \"path\": \"registry/new-york/HelloWorld/.env\",\n      \"type\": \"registry:file\",\n      \"target\": \"~/.env\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Table Component and TanStack Table Dependencies\nDESCRIPTION: Commands to add the Table component to your project and install the necessary TanStack Table dependency for Vue.\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/docs/components/data-table.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx shadcn-vue@latest add table\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @tanstack/vue-table\n```\n\n----------------------------------------\n\nTITLE: Installing Toggle Group Component via CLI\nDESCRIPTION: Command to install the toggle-group component using the shadcn-vue CLI tool.\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/docs/components/toggle-group.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx shadcn-vue@latest add toggle-group\n```\n\n----------------------------------------\n\nTITLE: Installing Context Menu Component with Shadcn Vue CLI\nDESCRIPTION: This command uses the Shadcn Vue CLI to add the context-menu component to your project. It automatically sets up all the necessary files and dependencies.\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/docs/components/context-menu.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx shadcn-vue@latest add context-menu\n```\n\n----------------------------------------\n\nTITLE: Component Selection Interface for Shadcn-Vue\nDESCRIPTION: Interactive component selection interface that appears when using the 'add' command, showing available components to choose from.\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/docs/cli.md#2025-04-23_snippet_4\n\nLANGUAGE: txt\nCODE:\n```\nWhich components would you like to add? › Space to select. A to toggle all.\nEnter to submit.\n\n◯  accordion\n◯  alert\n◯  alert-dialog\n◯  aspect-ratio\n◯  avatar\n◯  badge\n◯  button\n◯  calendar\n◯  card\n◯  checkbox\n```\n\n----------------------------------------\n\nTITLE: Vue Component Methods Documentation Table\nDESCRIPTION: APITable component instance documenting component methods, specifically the valueFormatter method with its type signature.\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/meta/ChartSingleTooltip.md#2025-04-23_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<APITable :type=\"'method'\" :data=\"[\n  {\n    'name': 'valueFormatter',\n    'description': '',\n    'type': '(tick: number, i?: number | undefined, ticks?: number[] | undefined) => string'\n  }\n]\" />\n```\n\n----------------------------------------\n\nTITLE: Installing Range Calendar Component with shadcn-vue\nDESCRIPTION: Command to install the Range Calendar component using the shadcn-vue CLI tool.\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/docs/components/range-calendar.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx shadcn-vue@latest add range-calendar\n```\n\n----------------------------------------\n\nTITLE: Installing Reka UI Dependency\nDESCRIPTION: Command to install the required reka-ui dependency for the Switch component.\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/docs/components/switch.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install reka-ui\n```\n\n----------------------------------------\n\nTITLE: Installing Command Component in shadcn-vue\nDESCRIPTION: Command to add the Command component to your shadcn-vue project using the CLI tool.\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/docs/components/command.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx shadcn-vue@latest add command\n```\n\n----------------------------------------\n\nTITLE: Select Value Component\nDESCRIPTION: Simple example of wrapping a Reka UI component without class merging\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/docs/contribution.md#2025-04-23_snippet_8\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { SelectValue, type SelectValueProps } from 'reka-ui'\n\nconst props = defineProps<SelectValueProps>()\n</script>\n\n<template>\n  <SelectValue v-bind=\"props\">\n    <slot />\n  </SelectValue>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Installing Navigation Menu Component with shadcn-vue\nDESCRIPTION: Command to install the Navigation Menu component using the shadcn-vue CLI tool.\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/docs/components/navigation-menu.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx shadcn-vue@latest add navigation-menu\n```\n\n----------------------------------------\n\nTITLE: Installing Drawer Component with shadcn-vue\nDESCRIPTION: Command to install the drawer component using the shadcn-vue CLI tool.\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/docs/components/drawer.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx shadcn-vue@latest add drawer\n```\n\n----------------------------------------\n\nTITLE: Installing AutoForm Components\nDESCRIPTION: Commands to install the required form components using shadcn-vue CLI\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/docs/components/auto-form.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx shadcn-vue@latest update form\nnpx shadcn-vue@latest add auto-form\n```\n\n----------------------------------------\n\nTITLE: Drawer Description Component\nDESCRIPTION: Example of handling CSS class bindings with Reka UI components\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/docs/contribution.md#2025-04-23_snippet_7\n\nLANGUAGE: vue\nCODE:\n```\n<script lang=\"ts\" setup>\nimport type { DrawerDescriptionProps } from 'vaul-vue'\nimport { cn } from '@/lib/utils'\nimport { DrawerDescription } from 'vaul-vue'\nimport { computed, type HtmlHTMLAttributes } from 'vue'\n\nconst props = defineProps<DrawerDescriptionProps & { class?: HtmlHTMLAttributes['class'] }>()\n\nconst delegatedProps = computed(() => {\n  const { class: _, ...delegated } = props\n\n  return delegated\n})\n</script>\n\n<template>\n  <DrawerDescription v-bind=\"delegatedProps\" :class=\"cn('text-sm text-muted-foreground', props.class)\">\n    <slot />\n  </DrawerDescription>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Installing Number Field Component via CLI in Shadcn-Vue\nDESCRIPTION: This command installs the Number Field component using the Shadcn-Vue CLI. It adds the necessary files and dependencies to your project.\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/docs/components/number-field.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx shadcn-vue@latest add number-field\n```\n\n----------------------------------------\n\nTITLE: Registry Item Tailwind Configuration\nDESCRIPTION: The deprecated tailwind property allows for customizing Tailwind CSS configuration including theme extensions, keyframes, and animations.\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/docs/registry/registry-item-json.md#2025-04-23_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"tailwind\": {\n    \"config\": {\n      \"theme\": {\n        \"extend\": {\n          \"colors\": {\n            \"brand\": \"hsl(var(--brand))\"\n          },\n          \"keyframes\": {\n            \"wiggle\": {\n              \"0%, 100%\": { \"transform\": \"rotate(-3deg)\" },\n              \"50%\": { \"transform\": \"rotate(3deg)\" }\n            }\n          },\n          \"animation\": {\n            \"wiggle\": \"wiggle 1s ease-in-out infinite\"\n          }\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying Items in registry.json for shadcn-vue\nDESCRIPTION: This JSON snippet demonstrates how to define items in the registry, following the registry-item schema specification. It includes properties for name, type, title, description, and files.\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/docs/registry/registry-json.md#2025-04-23_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"items\": [\n    {\n      \"name\": \"hello-world\",\n      \"type\": \"registry:block\",\n      \"title\": \"Hello World\",\n      \"description\": \"A simple hello world component.\",\n      \"files\": [\n        {\n          \"path\": \"registry/new-york/HelloWorld/HelloWorld.vue\",\n          \"type\": \"registry:component\"\n        }\n      ]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Collapsible Component with shadcn-vue\nDESCRIPTION: Command to install the Collapsible component using the shadcn-vue CLI tool.\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/docs/components/collapsible.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx shadcn-vue@latest add collapsible\n```\n\n----------------------------------------\n\nTITLE: Installing Required Dependencies\nDESCRIPTION: Command to install necessary npm packages including class-variance-authority, clsx, tailwind-merge, lucide-vue-next, and tw-animate-css.\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/docs/installation/manual.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install class-variance-authority clsx tailwind-merge lucide-vue-next tw-animate-css\n```\n\n----------------------------------------\n\nTITLE: Installing Checkbox Component - shadcn-vue CLI\nDESCRIPTION: Command to add the checkbox component to a shadcn-vue project using the CLI tool\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/docs/components/checkbox.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx shadcn-vue@latest add checkbox\n```\n\n----------------------------------------\n\nTITLE: Installing Scroll Area Component\nDESCRIPTION: Command to install the scroll-area component using the shadcn-vue CLI tool.\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/docs/components/scroll-area.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx shadcn-vue@latest add scroll-area\n```\n\n----------------------------------------\n\nTITLE: shadcn-vue CLI prompt example\nDESCRIPTION: Example of the prompts you'll encounter when running the shadcn-vue init command, showing how to select your base color scheme.\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/docs/installation/vite.md#2025-04-23_snippet_8\n\nLANGUAGE: text\nCODE:\n```\nWhich color would you like to use as base color? › Neutral\n```\n\n----------------------------------------\n\nTITLE: Adding Components with Shadcn-Vue CLI\nDESCRIPTION: Command to add components and their dependencies to an existing Shadcn-Vue project, which presents an interactive selection interface.\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/docs/cli.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpx shadcn-vue@latest add [component]\n```\n\n----------------------------------------\n\nTITLE: Installing Resizable Component via CLI\nDESCRIPTION: Command to install the Resizable component using the Shadcn-Vue CLI tool.\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/docs/components/resizable.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx shadcn-vue@latest add resizable\n```\n\n----------------------------------------\n\nTITLE: Sidebar Theming CSS Variables\nDESCRIPTION: The CSS variables used for theming the sidebar component. Includes variables for background, foreground, primary, accent colors, borders, and rings in both light and dark modes.\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/docs/components/sidebar.md#2025-04-23_snippet_36\n\nLANGUAGE: css\nCODE:\n```\n@layer base {\n  :root {\n    --sidebar-background: 0 0% 98%;\n    --sidebar-foreground: 240 5.3% 26.1%;\n    --sidebar-primary: 240 5.9% 10%;\n    --sidebar-primary-foreground: 0 0% 98%;\n    --sidebar-accent: 240 4.8% 95.9%;\n    --sidebar-accent-foreground: 240 5.9% 10%;\n    --sidebar-border: 220 13% 91%;\n    --sidebar-ring: 217.2 91.2% 59.8%;\n  }\n\n  .dark {\n    --sidebar-background: 240 5.9% 10%;\n    --sidebar-foreground: 240 4.8% 95.9%;\n    --sidebar-primary: 0 0% 98%;\n    --sidebar-primary-foreground: 240 5.9% 10%;\n    --sidebar-accent: 240 3.7% 15.9%;\n    --sidebar-accent-foreground: 240 4.8% 95.9%;\n    --sidebar-border: 240 3.7% 15.9%;\n    --sidebar-ring: 217.2 91.2% 59.8%;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Monorepo Init Command for Shadcn-Vue\nDESCRIPTION: Example of the 'init' command when working in a monorepo environment, specifying a particular workspace path using the '-c' option.\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/docs/cli.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nnpx shadcn-vue@latest init -c ./apps/www\n```\n\n----------------------------------------\n\nTITLE: Installing shadcn-vue Component\nDESCRIPTION: Command to add a specific shadcn-vue component (Switch) to the project using npx.\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/docs/installation/laravel.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx shadcn-vue@latest add switch\n```\n\n----------------------------------------\n\nTITLE: Installing PIN Input Component with Shadcn-Vue\nDESCRIPTION: Command to install the PIN Input component using Shadcn-Vue CLI. This adds the component to your project for use in your Vue applications.\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/docs/components/pin-input.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx shadcn-vue@latest add pin-input\n```\n\n----------------------------------------\n\nTITLE: Monorepo Add Command for Shadcn-Vue\nDESCRIPTION: Example of the 'add' command for a specific component when working in a monorepo environment, specifying a particular workspace path.\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/docs/cli.md#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nnpx shadcn-vue@latest add alert-dialog -c ./apps/www\n```\n\n----------------------------------------\n\nTITLE: Installing Components with shadcn-vue CLI\nDESCRIPTION: Command to initialize new components using the latest version of shadcn-vue CLI that now supports Reka UI.\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/docs/changelog.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx shadcn-vue@latest init Sidebar01 Login01\n```\n\n----------------------------------------\n\nTITLE: Installing Donut Chart Component with Shadcn-Vue CLI\nDESCRIPTION: Command to add the donut chart component to your Shadcn-Vue project using the CLI tool. This is the first step in setting up the chart component in your application.\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/docs/charts/donut.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx shadcn-vue@latest add chart-donut\n```\n\n----------------------------------------\n\nTITLE: Installing Toggle Group Dependencies\nDESCRIPTION: Command to install the required reka-ui dependency for the toggle-group component.\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/docs/components/toggle-group.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install reka-ui\n```\n\n----------------------------------------\n\nTITLE: Adding shadcn-vue Components\nDESCRIPTION: Command to add a specific component (Button) from shadcn-vue to the project.\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/docs/installation/nuxt.md#2025-04-23_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nnpx shadcn-vue@latest add button\n```\n\n----------------------------------------\n\nTITLE: Installing Radio Group Component with Shadcn-Vue CLI\nDESCRIPTION: Command to add the radio-group component to your Shadcn-Vue project using the CLI tool.\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/docs/components/radio-group.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx shadcn-vue@latest add radio-group\n```\n\n----------------------------------------\n\nTITLE: Installing Required Dependency\nDESCRIPTION: Command to install the required reka-ui dependency for manual installation.\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/docs/components/aspect-ratio.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install reka-ui\n```\n\n----------------------------------------\n\nTITLE: Running the shadcn-vue CLI Development Environment\nDESCRIPTION: Command to start the development environment for the shadcn-vue CLI package.\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/CONTRIBUTING.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npnpm dev:cli\n```\n\n----------------------------------------\n\nTITLE: Installing Area Chart Component with shadcn-vue\nDESCRIPTION: Command to install the area chart component using the shadcn-vue CLI tool. Requires Vue version 3.3 or higher.\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/docs/charts/area.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx shadcn-vue@latest add chart-area\n```\n\n----------------------------------------\n\nTITLE: Installing Optional Icon Dependencies for Theme Toggle\nDESCRIPTION: Installs Iconify packages for Vue to provide icons for the theme toggle button, including the Radix Icons collection.\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/docs/dark-mode/vitepress.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install -D @iconify/vue @iconify-json/radix-icons\n```\n\n----------------------------------------\n\nTITLE: Adding shadcn-vue Components to Astro Project\nDESCRIPTION: Command to add specific components from shadcn-vue to the Astro project, using the Button component as an example.\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/docs/installation/astro.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpx shadcn-vue@latest add button\n```\n\n----------------------------------------\n\nTITLE: Installing Bar Chart Component with Shadcn-Vue CLI\nDESCRIPTION: Command to install the bar chart component using the shadcn-vue CLI tool. This adds the chart-bar component to your project.\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/docs/charts/bar.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx shadcn-vue@latest add chart-bar\n```\n\n----------------------------------------\n\nTITLE: Installing Tooltip Component with shadcn-vue CLI\nDESCRIPTION: Command to install the Tooltip component using the shadcn-vue CLI tool. This will add the tooltip component to your project.\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/docs/components/tooltip.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx shadcn-vue@latest add tooltip\n```\n\n----------------------------------------\n\nTITLE: Development Commands\nDESCRIPTION: Commands to run different workspace development environments\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/docs/contribution.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npnpm dev\n\npnpm dev:cli\n```\n\n----------------------------------------\n\nTITLE: Installing Label Component Dependencies\nDESCRIPTION: Command to install the required Reka UI dependency for the Label component.\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/docs/components/label.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install reka-ui\n```\n\n----------------------------------------\n\nTITLE: Installing Required Dependencies for Resizable\nDESCRIPTION: Command to install the necessary dependency (reka-ui) for the Resizable component.\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/docs/components/resizable.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install reka-ui\n```\n\n----------------------------------------\n\nTITLE: Composables Alias Configuration\nDESCRIPTION: Configuration for setting import alias for composables\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/docs/components-json.md#2025-04-23_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"aliases\": {\n    \"composables\": \"@/composables\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing shadcn-vue CLI and Building the Registry\nDESCRIPTION: These bash commands demonstrate how to install the shadcn-vue CLI and run the build script to generate the registry JSON files.\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/docs/registry/getting-started.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpm install shadcn-vue@latest\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm run registry:build\n```\n\n----------------------------------------\n\nTITLE: Installing Sheet Component with shadcn-vue\nDESCRIPTION: Command to install the Sheet component using the shadcn-vue CLI tool.\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/docs/components/sheet.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx shadcn-vue@latest add sheet\n```\n\n----------------------------------------\n\nTITLE: Documentation Development\nDESCRIPTION: Command to run the documentation locally\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/docs/contribution.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\npnpm dev\n```\n\n----------------------------------------\n\nTITLE: Previewing Nuxt.js Production Build\nDESCRIPTION: Commands to locally preview the production build using different package managers.\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/v4/README.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n# npm\nnpm run preview\n\n# pnpm\npnpm preview\n\n# yarn\nyarn preview\n\n# bun\nbun run preview\n```\n\n----------------------------------------\n\nTITLE: Adding Components with shadcn-vue CLI\nDESCRIPTION: Command to add new components or migrate existing ones from Radix Vue to Reka UI.\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/docs/changelog.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpx shadcn-vue@latest add <components>\n```\n\n----------------------------------------\n\nTITLE: Installing reka-ui Dependency\nDESCRIPTION: Command to install the reka-ui dependency, which is required for the Progress component.\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/docs/components/progress.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install reka-ui\n```\n\n----------------------------------------\n\nTITLE: Testing Command\nDESCRIPTION: Command to run project tests using Vitest\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/docs/contribution.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\npnpm test\n```\n\n----------------------------------------\n\nTITLE: Dependencies Installation\nDESCRIPTION: Command to install project dependencies using pnpm\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/docs/contribution.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm install\n```\n\n----------------------------------------\n\nTITLE: Installing Toggle Component via CLI\nDESCRIPTION: Command to install the Toggle component using the shadcn-vue CLI.\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/docs/components/toggle.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx shadcn-vue@latest add toggle\n```\n\n----------------------------------------\n\nTITLE: Building Nuxt.js for Production\nDESCRIPTION: Commands to build the application for production deployment using different package managers.\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/v4/README.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# npm\nnpm run build\n\n# pnpm\npnpm build\n\n# yarn\nyarn build\n\n# bun\nbun run build\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies in Nuxt.js Project\nDESCRIPTION: Commands for installing project dependencies using different package managers including npm, pnpm, yarn, and bun.\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/v4/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# npm\nnpm install\n\n# pnpm\npnpm install\n\n# yarn\nyarn install\n\n# bun\nbun install\n```\n\n----------------------------------------\n\nTITLE: Setting Sidebar Cookie Name for State Persistence\nDESCRIPTION: Defining the name of the cookie used to persist sidebar open/close state between page loads.\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/docs/components/sidebar.md#2025-04-23_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nexport const SIDEBAR_COOKIE_NAME = \"sidebar_state\"\n```\n\n----------------------------------------\n\nTITLE: Setting Up Import Aliases in jsconfig.json\nDESCRIPTION: This snippet demonstrates how to configure import aliases in a JavaScript project using jsconfig.json, allowing you to use the @/* path alias for imports in your code.\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/docs/installation.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"compilerOptions\": {\n    \"paths\": {\n      \"@/*\": [\"./\"]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Dependencies with shadcn-vue CLI\nDESCRIPTION: This command initializes dependencies for a new project. It installs required packages, adds the 'cn' util, configures tailwind.config.js, and sets up CSS variables.\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/packages/cli/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx shadcn-vue init\n```\n\n----------------------------------------\n\nTITLE: Installing Shadcn Toast Component\nDESCRIPTION: Command to install the toast component using Shadcn-Vue CLI\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/docs/components/toast.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx shadcn-vue@latest add toast\n```\n\n----------------------------------------\n\nTITLE: Installing TypeScript Dependency\nDESCRIPTION: Command to install TypeScript as a development dependency to resolve potential errors.\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/docs/installation/nuxt.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install -D typescript\n```\n\n----------------------------------------\n\nTITLE: Running Documentation Locally\nDESCRIPTION: Command to start the local development server for the project documentation.\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/CONTRIBUTING.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\npnpm dev\n```\n\n----------------------------------------\n\nTITLE: Preparing Nuxt Project\nDESCRIPTION: Command to prepare the Nuxt project and generate necessary files.\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/docs/installation/nuxt.md#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nnpx nuxi prepare\n```\n\n----------------------------------------\n\nTITLE: Manual Installation of VeeValidate Dependencies\nDESCRIPTION: Command to manually install the required npm packages for implementing forms with VeeValidate and Zod in a Vue project.\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/docs/components/form.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpm install reka-ui vee-validate @vee-validate/zod zod\n```\n\n----------------------------------------\n\nTITLE: Installing Shadcn Nuxt Package\nDESCRIPTION: Commands for installing the shadcn-nuxt package using different package managers (pnpm, yarn, npm).\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/packages/module/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Using pnpm\npnpm add -D shadcn-nuxt\n\n# Using yarn\nyarn add --dev shadcn-nuxt\n\n# Using npm\nnpm install --save-dev shadcn-nuxt\n```\n\n----------------------------------------\n\nTITLE: Installing Sonner Component with shadcn-vue CLI\nDESCRIPTION: Command to add the Sonner component to your project using the shadcn-vue CLI tool.\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/docs/components/sonner.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx shadcn-vue@latest add sonner\n```\n\n----------------------------------------\n\nTITLE: Installing shadcn-nuxt Module\nDESCRIPTION: Command to add the shadcn-nuxt module to the Nuxt project.\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/docs/installation/nuxt.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nnpx nuxi@latest module add shadcn-nuxt\n```\n\n----------------------------------------\n\nTITLE: Listing Available Components with shadcn-vue CLI\nDESCRIPTION: This command, when run without arguments, displays a list of all available components that can be added using the shadcn-vue CLI.\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/packages/cli/README.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpx shadcn-vue add\n```\n\n----------------------------------------\n\nTITLE: Starting Nuxt.js Development Server\nDESCRIPTION: Commands to start the development server on http://localhost:3000 using different package managers.\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/v4/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# npm\nnpm run dev\n\n# pnpm\npnpm dev\n\n# yarn\nyarn dev\n\n# bun\nbun run dev\n```\n\n----------------------------------------\n\nTITLE: Creating a New Nuxt Project\nDESCRIPTION: Command to create a new Nuxt project using create-nuxt-app.\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/docs/installation/nuxt.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm create nuxt@latest\n```\n\n----------------------------------------\n\nTITLE: Installing reka-ui Dependency for Manual Setup\nDESCRIPTION: Command to install the reka-ui dependency which is required for manual installation of the Separator component.\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/docs/components/separator.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install reka-ui\n```\n\n----------------------------------------\n\nTITLE: Registry Item Title Property\nDESCRIPTION: The title property provides a human-readable name for the registry item that is more descriptive than the machine-readable name property.\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/docs/registry/registry-item-json.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"title\": \"Hello World\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring VitePress Landing Page for Shadcn Vue\nDESCRIPTION: This snippet sets up the frontmatter for a VitePress page and imports a custom LandingPage component. It configures the page as the home page for the Shadcn for Vue project.\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/index.md#2025-04-23_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n---\nhome: true\ntitle: Shadcn for Vue\n---\n\n<script setup>\nimport LandingPage from \"../../.vitepress/theme/components/LandingPage.vue\"\n</script>\n\n<LandingPage />\n```\n\n----------------------------------------\n\nTITLE: Creating Astro Project with Tailwind and Vue\nDESCRIPTION: Command to create a new Astro project with Tailwind CSS and Vue integration using npx.\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/docs/installation/astro.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-astro@latest astro-app  --template with-tailwindcss --install --add vue --git\n```\n\n----------------------------------------\n\nTITLE: Registry Item Metadata Property\nDESCRIPTION: The meta property allows for adding arbitrary metadata to the registry item that can be accessed by the system or other tools.\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/docs/registry/registry-item-json.md#2025-04-23_snippet_15\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"meta\": { \"foo\": \"bar\" }\n}\n```\n\n----------------------------------------\n\nTITLE: Schema Definition Property\nDESCRIPTION: The $schema property specifies the JSON schema for the registry-item.json file, which helps with validation and tooling support.\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/docs/registry/registry-item-json.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"$schema\": \"https://shadcn-vue.com/schema/registry-item.json\"\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Toggle Group Implementation\nDESCRIPTION: Example of implementing a basic toggle group component with three items in Vue. Shows how to import and use the ToggleGroup and ToggleGroupItem components with single selection type.\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/docs/components/toggle-group.md#2025-04-23_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { ToggleGroup, ToggleGroupItem } from '@/components/ui/toggle-group'\n</script>\n\n<template>\n  <ToggleGroup type=\"single\">\n    <ToggleGroupItem value=\"a\">\n      A\n    </ToggleGroupItem>\n    <ToggleGroupItem value=\"b\">\n      B\n    </ToggleGroupItem>\n    <ToggleGroupItem value=\"c\">\n      C\n    </ToggleGroupItem>\n  </ToggleGroup>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Installing Icon Dependencies for Theme Toggle\nDESCRIPTION: This bash command installs additional dependencies for including icons in the theme toggle button. It's an optional step for enhancing the visual appearance of the toggle.\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/docs/dark-mode/nuxt.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm install -D @iconify/vue @iconify-json/radix-icons\n```\n\n----------------------------------------\n\nTITLE: Basic App Layout with Sidebar Integration\nDESCRIPTION: Setting up the root application component with SidebarProvider and SidebarTrigger for managing the sidebar state.\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/docs/components/sidebar.md#2025-04-23_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport AppSidebar from '@/components/AppSidebar.vue'\nimport { SidebarProvider, SidebarTrigger } from '@/components/ui/sidebar'\n</script>\n\n<template>\n  <SidebarProvider>\n    <AppSidebar />\n    <main>\n      <SidebarTrigger />\n      <RouterView />\n    </main>\n  </SidebarProvider>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Basic SidebarContent Usage in Vue\nDESCRIPTION: Shows how to use the SidebarContent component to wrap SidebarGroup components within a Sidebar.\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/docs/components/sidebar.md#2025-04-23_snippet_17\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <Sidebar>\n    <SidebarContent>\n      <SidebarGroup />\n      <SidebarGroup />\n    </SidebarContent>\n  </Sidebar>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Initializing CLI Command for Components.json\nDESCRIPTION: Command to create the initial components.json file in your project using the shadcn-vue CLI\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/docs/components-json.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx shadcn-vue@latest init\n```\n\n----------------------------------------\n\nTITLE: Style Configuration in Components.json\nDESCRIPTION: Configuration for setting the component style theme, which cannot be changed after initialization\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/docs/components-json.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"style\": \"default\" | \"new-york\"\n}\n```\n\n----------------------------------------\n\nTITLE: Tailwind Config Path Configuration\nDESCRIPTION: Configuration for specifying the location of the Tailwind configuration file\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/docs/components-json.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"tailwind\": {\n    \"config\": \"tailwind.config.js\" | \"tailwind.config.ts\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Repository Clone Command\nDESCRIPTION: Git command to clone the shadcn-vue repository\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/docs/contribution.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit clone git@github.com:unovue/shadcn-vue.git\n```\n\n----------------------------------------\n\nTITLE: Lib Functions Alias Configuration\nDESCRIPTION: Configuration for setting import alias for lib functions\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/docs/components-json.md#2025-04-23_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"aliases\": {\n    \"lib\": \"@/lib\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: UI Components Alias Configuration\nDESCRIPTION: Configuration for setting import alias for UI components\nSOURCE: https://github.com/unovue/shadcn-vue/blob/dev/apps/www/src/content/docs/components-json.md#2025-04-23_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"aliases\": {\n    \"ui\": \"@/app/ui\"\n  }\n}\n```"
  }
]