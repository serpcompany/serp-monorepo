[
  {
    "owner": "lumeland",
    "repo": "lume.land",
    "content": "TITLE: Configuring Deno Project Settings\nDESCRIPTION: Deno configuration file with Lume-specific tasks, import maps, and compiler options\nSOURCE: https://github.com/lumeland/lume.land/blob/main/docs/overview/installation.md#2025-04-21_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"tasks\": {\n    \"lume\": \"echo \\\"import 'lume/cli.ts'\\\" | deno run -A -\",\n    \"build\": \"deno task lume\",\n    \"serve\": \"deno task lume -s\"\n  },\n  \"imports\": {\n    \"lume/\": \"https://deno.land/x/lume@v2.0.0/\"\n  },\n  \"compilerOptions\": {\n    \"types\": [\n      \"lume/types.ts\"\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Extending Lume.Data with custom interface in TSX\nDESCRIPTION: This TypeScript snippet shows how to extend Lume's Data interface with a custom interface. It defines a MyData interface and uses it in combination with Lume.Data to create a TSX component with additional properties.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/docs/configuration/using-typescript.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// Your own interface\ninterface MyData {\n  description?: string;\n}\n\nexport default (data: MyData & Lume.Data, filters: Lume.Helpers) => {\n  const { title, date, description } = data;\n\n  return (\n    <header>\n      <h1>{title}</h1>\n      <time>{filters.date(date)}</time>\n      {description}\n    </header>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Lume to Load Custom Data File Formats\nDESCRIPTION: This code shows how to add support for additional data file formats in Lume. In this example, TOML files are added as a supported data format using a custom loader.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/docs/core/concepts.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// Load .toml files\nsite.loadData([\".toml\"], tomlLoader);\n```\n\n----------------------------------------\n\nTITLE: Setting Site Location URL in TypeScript\nDESCRIPTION: Configuration for specifying the public URL of the site using URL object.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/docs/configuration/config-file.md#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst site = lume({\n  location: new URL(\"https://example.com\"),\n});\n```\n\n----------------------------------------\n\nTITLE: Conditional HTML Minification\nDESCRIPTION: Example of a processor that only minifies pages with a specific data flag set.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/docs/core/processors.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nsite.process([\".html\"], (pages) => {\n  for (const page of pages) {\n    if (page.data.minify) {\n      page.content = minify(page.content);\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Lume Basic Setup\nDESCRIPTION: Basic Lume configuration file that initializes a new site instance\nSOURCE: https://github.com/lumeland/lume.land/blob/main/docs/overview/installation.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport lume from \"lume/mod.ts\";\n\nconst site = lume();\n\nexport default site;\n```\n\n----------------------------------------\n\nTITLE: GitHub Actions Workflow for Deploying Lume Sites to Deno Deploy\nDESCRIPTION: GitHub Actions workflow configuration for building and deploying a Lume site to Deno Deploy. It sets up Deno, builds the site, and uses deployctl to deploy it to Deno Deploy.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/docs/advanced/deployment.md#2025-04-21_snippet_5\n\nLANGUAGE: yml\nCODE:\n```\nname: Publish on Deno Deploy\n\non:\n  push:\n    branches: [main]\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    permissions:\n      id-token: write\n      contents: read\n\n    steps:\n      - name: Clone repository\n        uses: actions/checkout@v4\n\n      - name: Setup Deno environment\n        uses: denoland/setup-deno@v2\n\n      - name: Build site\n        run: deno task build\n\n      - name: Deploy to Deno Deploy\n        uses: denoland/deployctl@v1\n        with:\n          project: project-name\n          import-map: \"./deno.json\"\n          entrypoint: serve.ts\n```\n\n----------------------------------------\n\nTITLE: Accessing Front Matter Variables in Lume Template\nDESCRIPTION: Template file showing how to access front matter variables in a Lume layout using Vento syntax. Demonstrates using the title variable in the HTML head and inserting page content.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/docs/getting-started/page-data.md#2025-04-21_snippet_1\n\nLANGUAGE: vento\nCODE:\n```\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <title>{{ title }}</title>\n</head>\n<body>\n  {{ content }}\n</body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Implementing a Handlebars Template Engine for Lume in TypeScript\nDESCRIPTION: Creates a custom template engine class implementing Lume.Engine interface for Handlebars. This class provides the required methods for rendering content and components with Handlebars.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/docs/core/loaders.md#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport HandlebarsJS from \"https://dev.jspm.io/handlebars@4.7.6\";\n\nexport default class HandlebarsEngine implements Lume.Engine {\n  /** Render the content */\n  render(content: string, data: Record<string, unknown>, filename: string) {\n    return this.renderComponent(content, data, filename);\n  }\n\n  /** Render for components */\n  renderComponent(\n    content: string,\n    data: Record<string, unknown>,\n    filename: string,\n  ) {\n    const template = HandlebarsJS.compile(content);\n    return template(data);\n  }\n\n  /** Register helpers */\n  addHelper() {}\n\n  /** Delete cache */\n  deleteCache() {}\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Basic Lume Server in TypeScript\nDESCRIPTION: Basic example of creating and starting a Lume server that serves static files from the _site folder on port 8000.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/docs/core/server.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport Server from \"lume/core/server.ts\";\n\nconst server = new Server({\n  port: 8000,\n  root: `${Deno.cwd()}/_site`,\n});\n\nserver.start();\n\nconsole.log(\"Listening on http://localhost:8000\");\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Vento Layout in Lume\nDESCRIPTION: Example of creating a Vento template file (.vto) in the _includes directory with front matter data and HTML structure. The template demonstrates how to access variables using the double curly braces syntax.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/plugins/vento.md#2025-04-21_snippet_0\n\nLANGUAGE: vento\nCODE:\n```\n---\ntitle: Welcome to my page\nintro: This is my first post using Lume. I hope you like it!\n---\n\n<html>\n  <head>\n    <title>{{ title }}</title>\n  </head>\n\n  <body>\n    <p>{{ intro }}</p>\n  </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Updating Processor Syntax in JavaScript\nDESCRIPTION: Shows how to update the syntax for processors and preprocessors in Lume 2, which now receive an array of all pages instead of individual pages.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/docs/advanced/migrate-to-lume2.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// Lume 1\nsite.process([\".html\"], fn);\n\n// Lume 2\nsite.process([\".html\"], (pages) => pages.forEach(fn));\n\n// Lume 2 (async functions)\nsite.process([\".html\"], (pages) => Promise.all(pages.map(fn)));\n```\n\n----------------------------------------\n\nTITLE: Updating Lume Layout to Include CSS\nDESCRIPTION: This HTML snippet shows how to update the Lume layout file to include a link to the CSS file. It uses Vento templating to set the page title dynamically.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/docs/getting-started/working-with-assets.md#2025-04-21_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <title>{{ title }}</title>\n    <link rel=\"stylesheet\" href=\"/styles.css\" />\n  </head>\n  <body>\n    {{ content }}\n  </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Implementing afterUpdate Event Listener in Lume\nDESCRIPTION: This snippet shows how to add an event listener for the afterUpdate event, which is triggered after re-building the site with lume --serve. It demonstrates how to access changed files, rebuilt pages, and copied static files.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/docs/core/events.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nsite.addEventListener(\"afterUpdate\", (event) => {\n  console.log(\"Site updated\");\n  console.log(event.files); // The files that have changed\n  console.log(event.pages); // The pages that have been rebuilt\n  console.log(event.staticFiles); // The static files that have been copied again\n});\n```\n\n----------------------------------------\n\nTITLE: Using Preprocessors to Modify Data\nDESCRIPTION: Shows how to define a preprocessor in _config.js to modify page data before rendering, in this case adding a site name to all titles.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/docs/advanced/the-data-model.md#2025-04-21_snippet_10\n\nLANGUAGE: js\nCODE:\n```\n// _config.js\n\nsite.preprocess([\".html\"], (pages) => {\n  for (const page of pages) {\n    const data = page.data; // Get the Data object\n    data.title += \" - My site name\"; // Modify the title variable\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Lume Site Instance with Configuration Options\nDESCRIPTION: Creates a new Lume site instance with customizable options for source/destination directories, server settings, watcher configuration, and component handling. Also includes plugin configurations for built-in functionality.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/docs/advanced/cheatsheet.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst site = lume(\n  {\n    /** Where the site's source is stored */\n    src: \"./\",\n\n    /** Where the built site will go */\n    dest: \"./_site\",\n\n    /** Whether the destination folder (defined in `dest`) should be emptied before the build */\n    emptyDest: true,\n\n    /** The default includes path, relative to the `src` folder */\n    includes: \"_includes\",\n\n    /** The site location (used to generate final urls) */\n    location: new URL(\"http://localhost\"),\n\n    /** Set true to generate pretty urls (`/about-me/`) */\n    prettyUrls: true,\n\n    /** Local server options(when using `lume --serve`) */\n    server: {\n      /** The port to listen on */\n      port: 3000,\n\n      /** Open the server in a browser after starting the server */\n      open: false,\n\n      /** The file to serve when getting a 404 error */\n      page404: \"/404.html\",\n\n      /** Optional middleware for the server */\n      middlewares: [];\n    },\n\n    /** Local file watcher options */\n    watcher: {\n      /** Paths to ignore */\n      ignore: [\n        \"/.git\",\n        (path) => path.endsWith(\"/.DS_Store\"),\n      ],\n\n      /** The interval in milliseconds to check for changes */\n      debounce: 100,\n    },\n\n    /** Component options */\n    components: {\n      /** The variable name used to access the components */\n      variable: \"comp\",\n\n      /** The name of the file to save component css code to */\n      cssFile: \"/components.css\",\n\n      /** The name of the file to save component javascript code to */\n      jsFile: \"/components.js\",\n    }\n  },\n  {\n    /** Options for the url plugin, which is loaded by default */\n    url: undefined,\n\n    /** Options for the json plugin, which is loaded by default */\n    json: undefined,\n\n    /** Options for the markdown plugin, which is loaded by default */\n    markdown: undefined,\n\n    /** Options for the modules plugin, which is loaded by default */\n    modules: undefined,\n\n    /** Options for the nunjucks plugin, which is loaded by default */\n    nunjucks: undefined,\n\n    /** Options for the search plugin, which is loaded by default */\n    search: undefined,\n\n    /** Options for the paginate plugin, which is loaded by default */\n    paginate: undefined,\n\n    /** Options for the yaml plugin, which is loaded by default */\n    yaml: undefined,\n  }\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Lume with Tailwind CSS and PostCSS\nDESCRIPTION: Basic setup for integrating Tailwind CSS with Lume. This snippet shows how to import and configure both the tailwindcss and postcss plugins in the correct order, as Tailwind needs to extract classes from HTML pages before PostCSS processes CSS files.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/plugins/tailwindcss.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport lume from \"lume/mod.ts\";\nimport tailwindcss from \"lume/plugins/tailwindcss.ts\";\nimport postcss from \"lume/plugins/postcss.ts\";\n\nconst site = lume();\n\nsite.use(tailwindcss(/* Options */));\nsite.use(postcss());\n\nexport default site;\n```\n\n----------------------------------------\n\nTITLE: Basic Page with Layout Definition in YAML Front Matter\nDESCRIPTION: Example of a basic page defining a layout in its front matter using YAML syntax. Shows how to specify a layout file and include page content in Markdown.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/docs/creating-pages/layouts.md#2025-04-21_snippet_0\n\nLANGUAGE: yml\nCODE:\n```\n---\ntitle: This is the front matter\nlayout: layouts/main.vto\n---\n\n# This is the page content\nHere you can write Markdown content\n```\n\n----------------------------------------\n\nTITLE: Using the CSS Banner Plugin in Lume Configuration\nDESCRIPTION: This snippet demonstrates how to use the custom CSS banner plugin in the Lume configuration file. It imports the plugin and configures it with a custom message.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/docs/advanced/plugins.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport lume from \"lume/mod.ts\";\nimport cssBanner from \"./my-plugins/css_banner.ts\";\n\nconst site = lume();\n\nsite.use(cssBanner({\n  message: \"© This code belongs to ACME inc.\",\n}));\n\nexport default site;\n```\n\n----------------------------------------\n\nTITLE: Using AbortSignal with Event Listeners in Lume\nDESCRIPTION: This snippet demonstrates how to use AbortSignal to remove an event listener at any time. In this example, the listener is removed after being triggered 5 times.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/docs/core/events.md#2025-04-21_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nconst controller = new AbortController();\nlet times = 0;\n\nsite.addEventListener(\"afterUpdate\", () => {\n  times++;\n\n  // Remove the listener after 5 times\n  if (times === 5) {\n    controller.abort();\n  }\n\n  console.log(`This is the update ${times}`);\n}, {\n  signal: controller.signal,\n});\n```\n\n----------------------------------------\n\nTITLE: Component Implementation with Assets\nDESCRIPTION: Search component example showing CSS and JS exports along with HTML rendering\nSOURCE: https://github.com/lumeland/lume.land/blob/main/docs/core/components.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nexport const css = `\n.search {\n  background: gray;\n  padding: 20px;\n}\n`;\n\nexport const js = `\nimport from \"js/search.js\"\n`;\n\nexport default function ({ comp }) {\n  return `\n<form class=\"search\">\n  <label>\n    Search:\n    <input type=\"search\" name=\"q\">\n  </label>\n  ${comp.button({ text: \"Submit\" })}\n</form>\n`;\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Output Directory in TypeScript\nDESCRIPTION: Configuration for specifying the output directory for the generated site.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/docs/configuration/config-file.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst site = lume({\n  dest: \"./output\",\n});\n```\n\n----------------------------------------\n\nTITLE: Fetching Dynamic Shared Data in TypeScript\nDESCRIPTION: Example of using a TypeScript file (_data.ts) to fetch dynamic data from a database. This allows for more complex data operations before making the data available to pages.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/docs/creating-pages/shared-data.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { db } from \"./database.ts\";\n\nconst people = db.query(\"select name, color from people\");\n\nexport { people };\n```\n\n----------------------------------------\n\nTITLE: Database Integration for Page Generation\nDESCRIPTION: Shows how to generate pages by integrating with a database, querying articles and generating a page for each one.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/docs/core/multiple-pages.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport database from \"./my-database.ts\";\n\nexport const layout = \"layouts/article.vto\";\n\nexport default function* () {\n  const articles = database.query(\"select * from articles\");\n\n  for (const article of articles) {\n    yield {\n      url: `/articles/${article.slug}/`,\n      ...article,\n    };\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Comparing Configuration Methods in Eleventy vs Lume\nDESCRIPTION: Shows the equivalent configuration approaches between Eleventy and Lume for common tasks like adding plugins, copying files, and creating filters.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/docs/advanced/migrate-from-11ty.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// Eleventy\nconfig.addPlugin(plugin)\nconfig.addPassthroughCopy(\"img\")\nconfig.addFilter(\"name\", filterFn)\n\n// Lume\nsite.use(plugin())\nsite.copy(\"img\")\nsite.filter(\"name\", filterFn)\n```\n\n----------------------------------------\n\nTITLE: Creating Page with Vento Template in Lume\nDESCRIPTION: Example of creating a page using Vento template format (.vto). Shows how to define front matter variables and create a template with a navigation list using Vento syntax.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/docs/getting-started/page-formats.md#2025-04-21_snippet_0\n\nLANGUAGE: vento\nCODE:\n```\n---\ntitle: Welcome to my page\nlayout: layout.vto\nlinks:\n  - text: My Twitter\n    url: https://twitter.com/misteroom\n  - text: My GitHub profile\n    url: https://github.com/oscarotero\n---\n\n<article>\n  <header>\n    <h1>{{ title }}</h1>\n  </header>\n\n  <ul>\n    {{ for link of links }}\n    <li>\n      <a href=\"{{ link.url }}\">\n        {{ link.text }}\n      </a>\n    </li>\n    {{ /for }}\n  </ul>\n</article>\n```\n\n----------------------------------------\n\nTITLE: Configuring Lume with Source Maps Plugin in JavaScript\nDESCRIPTION: This JavaScript snippet demonstrates how to import and configure the source maps plugin in a Lume project. It shows the integration of the source maps functionality with other plugins like SASS, PostCSS, and esbuild to enable debugging capabilities for CSS and JavaScript code. The configuration takes place in the project's configuration file to generate source map files alongside the processed CSS and JS files.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/plugins/source_maps.md#2025-04-21_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport lume from \"lume/mod.ts\";\nimport sass from \"lume/plugins/sass.ts\";\nimport postcss from \"lume/plugins/postcss.ts\";\nimport esbuild from \"lume/plugins/esbuild.ts\";\nimport sourceMaps from \"lume/plugins/source_maps.ts\";\n\nconst site = lume();\n\n// Process your CSS and JS code with other plugins\nsite.use(sass());\nsite.use(postcss());\nsite.use(esbuild());\n\n// Use the source maps plugin to generate the .map files\nsite.use(sourceMaps(/* Options */));\n\nexport default site;\n```\n\n----------------------------------------\n\nTITLE: Basic Page Generation with JavaScript Generator\nDESCRIPTION: Demonstrates basic multiple page generation using a JavaScript generator function that yields objects containing URL and content properties.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/docs/core/multiple-pages.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport default function* () {\n  yield {\n    url: \"/page-1/\",\n    content: \"This is the first page\",\n  };\n  yield {\n    url: \"/page-2/\",\n    content: \"This is the second page\",\n  };\n  yield {\n    url: \"/page-3/\",\n    content: \"This is the third page\",\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Page with JavaScript in Lume\nDESCRIPTION: Example of creating a page using JavaScript (.page.js). Demonstrates how to export page data and create a render function that generates HTML content.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/docs/getting-started/page-formats.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexport const title = \"Welcome to my page\";\nexport const layout = \"layout.vto\";\nexport const links = [\n  {\n    text: \"My Twitter\",\n    url: \"https://twitter.com/misteroom\",\n  },\n  {\n    text: \"My GitHub profile\",\n    url: \"https://github.com/oscarotero\",\n  },\n];\n\nexport default function ({ title, links }) {\n  return `\n  <article>\n    <header>\n      <h1>${title}</h1>\n    </header>\n\n    <ul>\n      ${links.map((link) => `<li><a href=\"${link.url}\">${link.text}</a></li>`).join(\n      \"\",\n    )}\n    </ul>\n  </article>`;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Markdown Page for Lume\nDESCRIPTION: This snippet demonstrates how to create a simple markdown file for a Lume project. It includes a title, some formatted text, and mentions Lume and Deno.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/docs/getting-started/your-first-page.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Welcome to my website\n\nThis is my first page using **Lume,** a static site generator for Deno.\n\nI hope you enjoy it.\n```\n\n----------------------------------------\n\nTITLE: Generating Dynamic API Pages in Lume\nDESCRIPTION: Script that generates multiple pages dynamically by fetching data from an external API endpoint. Each item from the API response creates a new page with a unique URL and content.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/docs/core/render-order.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport const layout = \"layouts/api.vto\";\n\nconst response = await fetch(\"https://my-api.com/data.json\");\nconst data = await response.json();\n\nexport default function* () {\n  for (const item of data.items) {\n    yield {\n      url: `item-${item.id}`,\n      title: item.title,\n      type: \"api\",\n      content: item.text,\n    };\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Responsive Images with Multiple Sources\nDESCRIPTION: This HTML snippet demonstrates how to create responsive images with multiple sources using the <picture> element and transform-images attribute. It includes different versions for small devices, big screens, and a default image.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/plugins/picture.md#2025-04-21_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<picture>\n  <!-- version for small devices -->\n  <source\n    srcset=\"/flowers-detail.jpg\"\n    media=\"(min-width: 600px)\"\n    transform-images=\"avif webp jpg 1000@2\"\n  >\n\n  <!-- version for big screens -->\n  <source srcset=\"/flowers-big.jpg\" transform-images=\"avif webp jpg 1000@2\">\n\n  <!-- default image -->\n  <img src=\"/flowers-mini.jpg\" transform-images=\"300@2\">\n</picture>\n```\n\n----------------------------------------\n\nTITLE: Implementing beforeRender Event Listener in Lume\nDESCRIPTION: This snippet shows how to add an event listener for the beforeRender event, which is triggered after all pages are loaded but before they are rendered. It demonstrates how to access the pages that will be rendered.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/docs/core/events.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nsite.addEventListener(\"beforeRender\", (event) => {\n  console.log(\"Ready to render the pages\");\n  console.log(event.pages); // The pages to render\n});\n```\n\n----------------------------------------\n\nTITLE: Specifying Package Dependencies for ESM Imports\nDESCRIPTION: Demonstrates how to specify dependencies for specific packages when using ESM imports. This example shows configuring SWR to use React 17.0.2 as a dependency.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/plugins/esbuild.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nsite.use(esbuild({\n  esm: {\n    deps: {\n      swr: \"react@17.0.2\",\n    },\n  },\n}));\n```\n\n----------------------------------------\n\nTITLE: Creating a Configurable Page Archetype with Arguments in TypeScript\nDESCRIPTION: This snippet shows how to create an archetype that accepts a title argument to generate a customized markdown file with a slug-based filename.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/docs/core/archetypes.md#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// _archetypes/page.ts\n\nexport default function (title: string) {\n  const slug = title.replace(/\\s+/g, \"-\").toLowerCase();\n\n  return {\n    path: `/pages/${slug}.md`,\n    content: {\n      title: title,\n      content: \"Page content\",\n    },\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Second Page with Reusable Layout in Lume\nDESCRIPTION: This snippet demonstrates how to create a new markdown file with front matter defining the layout and title, along with markdown content. It shows how to reuse the same layout across multiple pages with different content.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/docs/getting-started/reuse-layouts.md#2025-04-21_snippet_0\n\nLANGUAGE: yml\nCODE:\n```\n---\nlayout: layout.vto\ntitle: My second page\n---\n# Another page\n\nMy second page in **Lume**.\n\nThis is getting better!\n```\n\n----------------------------------------\n\nTITLE: Configuring Lume with TypeScript in deno.json\nDESCRIPTION: This snippet shows the configuration for using Lume with TypeScript in a deno.json file. It includes import maps, tasks, and compiler options for TypeScript support.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/docs/configuration/using-typescript.md#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"imports\": {\n    \"lume/\": \"https://deno.land/x/lume/\"\n  },\n  \"tasks\": {\n    \"lume\": \"echo \\\"import 'lume/cli.ts'\\\" | deno run -A -\",\n    \"build\": \"deno task lume\",\n    \"serve\": \"deno task lume -s\"\n  },\n  \"compilerOptions\": {\n    \"types\": [\n      \"lume/types.ts\"\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up Router Middleware for Production in Lume\nDESCRIPTION: This snippet shows how to set up a production server with the Router middleware. It creates a router instance, defines a route, and configures a Lume HTTP server to use the router middleware.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/plugins/router.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport Server from \"lume/core/server.ts\";\nimport Router from \"lume/middlewares/router.ts\";\n\n// Create the router\nconst router = new Router();\n\nrouter.get(\"/hello/:name\", ({ name }) => {\n  return new Response(`Hello ${name}!`);\n});\n\n// Create the server and use the router:\nconst server = new Server();\nserver.use(router.middleware());\n\nserver.start();\n```\n\n----------------------------------------\n\nTITLE: Using Processors to Modify Rendered Content\nDESCRIPTION: Demonstrates how to create a processor to modify rendered HTML content before it's saved, adding a signature comment.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/docs/advanced/the-data-model.md#2025-04-21_snippet_12\n\nLANGUAGE: js\nCODE:\n```\nsite.process([\".html\"], (page) => {\n  // Get the rendered content\n  const content = page.content;\n\n  // Modify the content\n  page.content = content + \"\\n<!-- Created by Óscar Otero -->\";\n});\n```\n\n----------------------------------------\n\nTITLE: Updating TypeScript Imports and Types\nDESCRIPTION: Demonstrates how to update TypeScript imports and types for Lume 2, including the removal of /lume/core.ts and the introduction of the Lume namespace.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/docs/advanced/migrate-to-lume2.md#2025-04-21_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\n// In Lume 1:\nimport { PageData, PageHelpers } from \"lume/core.ts\";\n\nexport default function (data: PageData, helpers: PageHelpers) {\n  return `<h1>${data.title}</h1>`;\n}\n\n// In Lume 2:\nexport default function (data: Lume.Data, helpers: Lume.Helpers) {\n  return `<h1>${data.title}</h1>`;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Configurable CSS Banner Plugin for Lume\nDESCRIPTION: This snippet shows how to create a reusable and configurable plugin for adding banners to CSS files in Lume. It encapsulates the banner addition logic and allows for customization of the banner message through options.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/docs/advanced/plugins.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// my-plugins/css_banner.ts\n\ninterface Options {\n  message: string;\n}\n\nexport default function (options: Options) {\n  function addBanner(content: string): string {\n    const banner = `/* ${options.message} */`;\n    return banner + \"\\n\" + content;\n  }\n\n  return (site: Site) => {\n    site.process([\".css\"], (pages) => {\n      for (const page of pages) {\n        page.content = addBanner(page.content as string);\n      }\n    });\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a JSX Page in Lume\nDESCRIPTION: This example demonstrates how to create a page using JSX in Lume. It exports page metadata and a default function that returns JSX, which will be rendered as the page content.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/plugins/jsx_preact.md#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nexport const title = \"Welcome to my page\";\nexport const layout = \"layouts/main.vto\";\n\nexport default (data: Lume.Data, helpers: Lume.Helpers) => (\n  <>\n    <h1>{data.title}</h1>\n    <p>This is my first post using lume. I hope you like it!</p>\n  </>\n);\n```\n\n----------------------------------------\n\nTITLE: Creating a Plugin that Uses the CSS Banner Hook\nDESCRIPTION: This snippet shows how to create a new plugin that interacts with the CSS banner plugin using its exposed hook. It demonstrates inter-plugin communication and dependency handling.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/docs/advanced/plugins.md#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// my-plugins/open_source.ts\n\nexport default function () {\n  return (site: Site) => {\n    if (!site.hooks.changeCssBanner) {\n      throw new Error(\"This plugin requires css_banner to be installed before\");\n    }\n\n    site.hooks.changeCssBanner(\"This code is open source\");\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Lume via Command Line\nDESCRIPTION: Command to initialize Lume in a project folder using Deno\nSOURCE: https://github.com/lumeland/lume.land/blob/main/docs/overview/installation.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ndeno run -A https://lume.land/init.ts\n```\n\n----------------------------------------\n\nTITLE: Implementing WWW Middleware with Lume HTTP Server in JavaScript\nDESCRIPTION: This code demonstrates how to set up Lume's WWW middleware to handle redirections between www and non-www domains. It creates a server instance, applies the WWW middleware with a configuration option to remove or add the www prefix, and then starts the server.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/plugins/www.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Server from \"lume/core/server.ts\";\nimport www from \"lume/middlewares/www.ts\";\n\nconst server = new Server();\n\nserver.use(www({\n  add: false, // false to remove, true to add it.\n}));\n\nserver.start();\n```\n\n----------------------------------------\n\nTITLE: Using PostCSS Filter in Lume Templates (Vento)\nDESCRIPTION: This snippet demonstrates how to use the postcss filter in Lume templates. It shows inline CSS being processed by PostCSS within a Vento template.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/plugins/postcss.md#2025-04-21_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n{{ set css }}\n  body::after {\n    content: \"Hello, the CSS world!\";\n  }\n{{ /set }}\n\n<style>\n  {{ css |> postcss }}\n</style>\n```\n\n----------------------------------------\n\nTITLE: Configuring Source Directory in TypeScript\nDESCRIPTION: Example showing how to configure the source directory for Lume site files.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/docs/configuration/config-file.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst site = lume({\n  src: \"./src\",\n});\n```\n\n----------------------------------------\n\nTITLE: Creating and Using Router Middleware in Lume\nDESCRIPTION: This snippet demonstrates how to create a Router instance and define a GET route handler. The handler receives captured path variables and the request object, allowing access to query parameters from the URL.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/plugins/router.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst router = new Router();\n\nrouter.get(\"/search/:id\", ({ id, request }) => {\n  const { searchParams } = new URL(request.url);\n\n  const query = searchParams.get(\"query\");\n  return new Response(`Searching by ${query} in the file ${id}`);\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Basic Lume Configuration in JavaScript\nDESCRIPTION: Minimal required code to create and export a new Lume instance in the configuration file.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/docs/configuration/config-file.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport lume from \"lume/mod.ts\";\n\nconst site = lume();\n\nexport default site;\n```\n\n----------------------------------------\n\nTITLE: Creating a JSX Layout in Lume\nDESCRIPTION: This snippet shows how to create a layout using JSX in Lume. It defines a default export function that takes data and helpers as parameters and returns the HTML structure for the layout.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/plugins/jsx_preact.md#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nexport default ({ title, children }: Lume.Data, helpers: Lume.Helpers) => (\n  <html>\n    <head>\n      <title>{title}</title>\n    </head>\n    <body>\n      {children}\n    </body>\n  </html>\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring Expires Middleware in Lume Server\nDESCRIPTION: Example code showing how to set up and enable the Expires middleware in a Lume HTTP server. Creates a new server instance and applies the expires middleware for production use.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/plugins/expires.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport Server from \"lume/core/server.ts\";\nimport expires from \"lume/middlewares/expires.ts\";\n\nconst server = new Server();\n\nserver.use(expires());\n\nserver.start();\n```\n\n----------------------------------------\n\nTITLE: Nested Components in Vento\nDESCRIPTION: Example of nesting Lume components within each other using Vento syntax\nSOURCE: https://github.com/lumeland/lume.land/blob/main/docs/core/components.md#2025-04-21_snippet_3\n\nLANGUAGE: vento\nCODE:\n```\n{{ comp Container }}\n  Content of the Container component\n\n  {{ comp Button }}\n    This is a button inside the Container component\n  {{ /comp }}\n{{ /comp }}\n```\n\n----------------------------------------\n\nTITLE: Adding Copyright Banner to CSS Files in Lume Configuration\nDESCRIPTION: This snippet demonstrates how to add a copyright banner to all CSS files directly in the Lume configuration file (_config.ts). It defines a function to add the banner and uses a processor to apply it to all CSS pages.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/docs/advanced/plugins.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// _config.ts\n\nimport lume from \"lume/mod.ts\";\n\nconst site = lume();\n\nfunction addBanner(content: string): string {\n  const banner = \"/* © This code belongs to ACME inc. */\";\n  return banner + \"\\n\" + content;\n}\n\nsite.process([\".css\"], (pages) => {\n  for (const page of pages) {\n    page.content = addBanner(page.content as string);\n  }\n});\n\nexport default site;\n```\n\n----------------------------------------\n\nTITLE: Configuring Merge Strategy in TypeScript\nDESCRIPTION: Example of configuring merge strategy in Lume's _config.ts file.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/docs/core/merged-keys.md#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nsite.mergeKey(\"category\", \"stringArray\");\n```\n\n----------------------------------------\n\nTITLE: Using Components in MDX Files (HTML/Markdown)\nDESCRIPTION: This example demonstrates how to use components in an MDX file, including importing custom components and using Lume's built-in components. It shows the syntax for embedding JSX within Markdown content.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/plugins/mdx.md#2025-04-21_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n---\ntitle: Hello world\ndescription: This is a description\n---\n\nimport Image from \"./_includes/Image.tsx\";\n\n<comp.Header title={title} description={description}/>\n\nThis is a markdown file with the title **{ title }**.\n\n<Image alt=\"foo\" />\n```\n\n----------------------------------------\n\nTITLE: Converting Markdown with Front Matter to Data Object\nDESCRIPTION: Demonstrates how a Markdown file with front matter variables is converted to a Data object with both content and custom variables.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/docs/advanced/the-data-model.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: Title of the page\n---\n\n**Content** of the page\n```\n\nLANGUAGE: js\nCODE:\n```\n{\n  title: \"Title of the page\",\n  content: \"**Content** of the page\",\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Prism Plugin in Lume Configuration\nDESCRIPTION: Basic setup for adding Prism syntax highlighting to a Lume site by importing and using the plugin in the configuration file.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/plugins/prism.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport lume from \"lume/mod.ts\";\nimport prism from \"lume/plugins/prism.ts\";\n\nconst site = lume();\n\nsite.use(prism(/* Options */));\n\nexport default site;\n```\n\n----------------------------------------\n\nTITLE: Basic Lume Configuration\nDESCRIPTION: This JavaScript snippet shows the basic Lume configuration file. It imports Lume, creates a site instance, and exports it.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/docs/getting-started/working-with-assets.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport lume from \"lume/mod.ts\";\n\nconst site = lume();\n\nexport default site;\n```\n\n----------------------------------------\n\nTITLE: Creating a JSX Component in Lume\nDESCRIPTION: This example demonstrates how to create a reusable component in JSX for Lume. It defines a button component that can be used in other templates or pages.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/plugins/jsx_preact.md#2025-04-21_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nexport default function ({ children }) {\n  return (\n    <button className=\"my-button\">\n      {children}\n    </button>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Copying Static Files in Lume\nDESCRIPTION: This snippet demonstrates how to configure Lume to copy static files from a specific directory or with specific extensions to the destination folder without processing them.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/docs/core/concepts.md#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// Copy all files from the \"/static/\" directory\nsite.copy(\"static\");\n\n// Copy .pdf files\nsite.copy([\".pdf\"]);\n```\n\n----------------------------------------\n\nTITLE: Generated HTML for Responsive Image\nDESCRIPTION: This HTML snippet shows the output generated by the Picture plugin for a responsive image. It includes <source> elements for different formats (avif, webp) and a fallback <img> element with appropriate srcset attributes.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/plugins/picture.md#2025-04-21_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<picture>\n  <source\n    srcset=\"/flowers-300w.avif, /flowers-300w@2.avif 2x\"\n    type=\"image/avif\"\n  />\n  <source\n    srcset=\"/flowers-300w.webp, /flowers-300w@2.webp 2x\"\n    type=\"image/webp\"\n  />\n  <img src=\"/flowers-300w.jpg\" srcset=\"/flowers-300w@2.jpg 2x\" />\n</picture>\n```\n\n----------------------------------------\n\nTITLE: Configuring Lume Site Build Settings\nDESCRIPTION: Lists all available methods for configuring the site build process, including event listeners, plugins, data loaders, processors, filters, helpers, and file handling functions.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/docs/advanced/cheatsheet.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n/** Register an event listener */\nsite.addEventListener(eventType, fn);\n\n/** Register a plugin */\nsite.use(plugin);\n\n/** Register a script under a name */\nsite.script(name, commandOrFunction);\n\n/** Register a data loader */\nsite.loadData(extensions, loader);\n\n/** Register a HTML page loader and other options */\nsite.loadPages(extensions, loader);\nsite.loadPages(extensions, options);\n\n/** Register an assets page loader */\nsite.loadAssets(extensions, loader);\n\n/** Register a preprocessor */\nsite.preprocess(extensions, fn);\n\n/** Register a processor */\nsite.process(extensions, fn);\n\n/** Register a template filter */\nsite.filter(name, fn, async = false);\n\n/** Register a template helper */\nsite.helper(name, fn, options);\n\n/** Register a data variable */\nsite.data(name, value, scope = \"/\");\n\n/** Register a page */\nsite.page(pageData, scope = \"/\");\n\n/** Register a component */\nsite.component(context, component, scope = \"/\");\n\n/** Configure the strategy for merging a specfic key in the data cascade */\nsite.mergeKey(key, merge, scope = \"/\");\n\n/** Copy a static file/folder */\nsite.copy(from, to);\n\n/** Copy the remaining files */\nsite.copyRemainingFiles(filter);\n\n/** Ignore files or folder */\nsite.ignore(...paths);\n\n/** Configure independent scopes to optimize builds when source files update */\nsite.scopedUpdates(...scopes);\n\n/** Define a remote file */\nsite.remoteFile(filename, url);\n```\n\n----------------------------------------\n\nTITLE: Configuring LumeCMS with GitHub Storage for Deno Deploy\nDESCRIPTION: This code snippet demonstrates how to set up LumeCMS to use GitHub as the storage method instead of filesystem, which is necessary for Deno Deploy. It imports required modules, creates a CMS instance, and configures GitHub storage with authentication.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/cms/deployment/deno-deploy.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport lumeCMS from \"lume/cms/mod.ts\";\nimport GitHub from \"lume/cms/storage/github.ts\";\nimport { Octokit } from \"npm:octokit\";\n\nconst cms = lumeCMS();\n\ncms.storage(\n  \"src\",\n  new GitHub({\n    client: new Octokit({ auth: Deno.env.get(\"GITHUB_TOKEN\") }),\n    owner: \"username\",\n    repo: \"example\",\n  }),\n);\n\n// Rest of the configuration....\n```\n\n----------------------------------------\n\nTITLE: Importing and Using ESbuild Plugin in Lume Configuration\nDESCRIPTION: Shows how to import and initialize the esbuild plugin in a Lume site configuration file. This is the basic setup required to use the plugin.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/plugins/esbuild.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport lume from \"lume/mod.ts\";\nimport esbuild from \"lume/plugins/esbuild.ts\";\n\nconst site = lume();\n\nsite.use(esbuild(/* Options */));\n\nexport default site;\n```\n\n----------------------------------------\n\nTITLE: Creating a JSX Page in Lume\nDESCRIPTION: This TSX code demonstrates how to create a page using JSX in Lume. It exports page metadata and a default function that returns JSX, showing how to use data and helpers provided by Lume.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/plugins/jsx.md#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nexport const title = \"Welcome to my page\";\nexport const layout = \"layouts/main.vto\";\n\nexport default (data: Lume.Data, helpers: Lume.Helpers) => (\n  <>\n    <h1>{data.title}</h1>\n    <p>This is my first post using lume. I hope you like it!</p>\n  </>\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Shared Layouts with Multiple Page Examples\nDESCRIPTION: Demonstrates the complete implementation of shared layouts using _data.yml along with example pages that inherit the layout configuration. Shows how front matter can be simplified by removing redundant layout declarations.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/docs/getting-started/shared-data.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nlayout: layout.vto\n```\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: This is my website\n---\n# Welcome to my website\n\nThis is my first page using **Lume,**\na static site generator for Deno.\n\nI hope you enjoy it.\n```\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: My second page\n---\n# Another page\n\nMy second page in **Lume**.\n\nThis is getting better!\n```\n\n----------------------------------------\n\nTITLE: Configuring Scoped Updates in Lume\nDESCRIPTION: This code snippet demonstrates how to configure scoped updates in Lume's _config.js file. It defines two scopes: one for CSS files and another for JS/TS files. This configuration ensures that changes in these file types only trigger rebuilds for their respective scopes, optimizing the update process.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/docs/core/scoped-updates.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nsite.scopedUpdates(\n  (path) => path.endsWith(\".css\"), //Select all *.css files\n  (path) => /\\.(js|ts)$/.test(path), //Select all *.js and *.ts files\n);\n```\n\n----------------------------------------\n\nTITLE: Creating Data Storage with JavaScript Modules\nDESCRIPTION: Example of creating a _data.js file to store shared data using JavaScript module exports.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/plugins/modules.md#2025-04-21_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport const users = [\n  {\n    name: \"Oscar\",\n    surname: \"Otero\",\n  },\n  {\n    name: \"Michael\",\n    surname: \"Jackson\",\n  },\n];\n```\n\n----------------------------------------\n\nTITLE: Configuring YAML Plugin in Lume\nDESCRIPTION: Configuration example for the YAML plugin in the _config.ts file. The plugin allows customization through options passed to the lume() function's second argument.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/plugins/yaml.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport lume from \"lume/mod.ts\";\n\n// YAML plugin configuration\nconst yaml = {/* your config here */};\n\nconst site = lume({}, { yaml });\n\nexport default site;\n```\n\n----------------------------------------\n\nTITLE: Configuring ESbuild Plugin with Default Options\nDESCRIPTION: Demonstrates configuring the esbuild plugin with its default options, including extensions to process, bundling settings, and output format. This example shows all available configuration properties.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/plugins/esbuild.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nsite.use(esbuild({\n  extensions: [\".ts\", \".js\"],\n  options: {\n    plugins: [],\n    bundle: true,\n    format: \"esm\",\n    minify: true,\n    keepNames: true,\n    platform: \"browser\",\n    target: \"esnext\",\n    treeShaking: true,\n    outdir: \"./\",\n    outbase: \".\",\n  },\n}));\n```\n\n----------------------------------------\n\nTITLE: Setting Global Variables and Functions in Lume (JavaScript)\nDESCRIPTION: Demonstrates how to set global variables and functions using site.data() in Lume. This allows for site-wide access to these values in pages, layouts, and components.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/docs/configuration/data.md#2025-04-21_snippet_0\n\nLANGUAGE: js\nCODE:\n```\n// Set a variable\nsite.data(\"myNumber\", 23);\n\n// Set a function\nsite.data(\"randomNumber\", function () {\n  return Math.random();\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Nunjucks Plugin in Lume Configuration (JavaScript)\nDESCRIPTION: This snippet shows how to import and use the Nunjucks plugin in the Lume configuration file. It demonstrates importing Lume and the Nunjucks plugin, creating a site instance, and applying the plugin.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/plugins/nunjucks.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport lume from \"lume/mod.ts\";\nimport nunjucks from \"lume/plugins/nunjucks.ts\";\n\nconst site = lume();\n\nsite.use(nunjucks(/* Options */));\n\nexport default site;\n```\n\n----------------------------------------\n\nTITLE: Implementing Sitemap with Multilanguage Support in Lume\nDESCRIPTION: Demonstrates how to configure both the multilanguage plugin and sitemap plugin together to generate appropriate sitemaps for sites with multiple language versions.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/plugins/sitemap.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport lume from \"lume/mod.ts\";\nimport multilanguage from \"lume/plugins/multilanguage.ts\";\nimport sitemap from \"lume/plugins/sitemap.ts\";\n\nconst site = lume();\n\nsite.use(multilanguage({\n  languages: [\"en\", \"gl\", \"es\"],\n}));\nsite.use(sitemap(/* Options */));\n\nexport default site;\n```\n\n----------------------------------------\n\nTITLE: Installing JSX Preact Plugin in Lume Configuration\nDESCRIPTION: This snippet shows how to import and use the JSX Preact plugin in the Lume configuration file. It demonstrates the basic setup required to enable JSX Preact support in a Lume project.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/plugins/jsx_preact.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport lume from \"lume/mod.ts\";\nimport jsx from \"lume/plugins/jsx_preact.ts\";\n\nconst site = lume();\n\nsite.use(jsx(/* Options */));\n\nexport default site;\n```\n\n----------------------------------------\n\nTITLE: Creating a Layout File with Vento in Lume\nDESCRIPTION: Demonstrates how to create a layout file using the Vento template engine in Lume. The layout includes basic HTML structure and a placeholder for content insertion.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/docs/getting-started/create-a-layout.md#2025-04-21_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <title>My first page</title>\n  </head>\n  <body>\n    {{ content }}\n  </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Installing Remark Plugin in Lume\nDESCRIPTION: Demonstrates how to import and enable the Remark plugin in a Lume site configuration file. This basic setup replaces the default markdown-it library with Remark for markdown processing.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/plugins/remark.md#2025-04-21_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nimport lume from \"lume/mod.ts\";\nimport remark from \"lume/plugins/remark.ts\";\n\nconst site = lume();\n\nsite.use(remark());\n\nexport default site;\n```\n\n----------------------------------------\n\nTITLE: Installing and Configuring Gzip Plugin in Lume\nDESCRIPTION: This snippet demonstrates how to import and use the Gzip plugin in a Lume site configuration. It shows the basic setup and how to customize the file extensions to be compressed.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/plugins/gzip.md#2025-04-21_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nimport lume from \"lume/mod.ts\";\nimport gzip from \"lume/plugins/gzip.ts\";\n\nconst site = lume();\n\nsite.use(gzip());\n\nexport default site;\n```\n\nLANGUAGE: js\nCODE:\n```\nsite.use(\n  gzip({\n    extensions: [\".html\", \".css\"],\n  }),\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Middleware in Lume Server\nDESCRIPTION: Example of implementing custom middleware to handle requests and responses in the server pipeline.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/docs/core/server.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nserver.use(async (request, next) => {\n  // Here you can modify the request before being passed to next middlewares\n  const response = await next(request);\n\n  // Here you can modify the response before being returned to the previous middleware\n  return response;\n});\n```\n\n----------------------------------------\n\nTITLE: Installing and Configuring Filter Pages Plugin in Lume\nDESCRIPTION: Example showing how to install and configure the filter_pages plugin to remove pages with ignored=true property. The plugin takes a callback function that determines which pages should be kept in the build.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/plugins/filter_pages.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport lume from \"lume/mod.ts\";\nimport filterPages from \"lume/plugins/filter_pages.ts\";\n\nconst site = lume();\n\nsite.use(filterPages({\n  fn: (page) => page.data.ignored !== true,\n}));\n\nexport default site;\n```\n\n----------------------------------------\n\nTITLE: Setting Custom 'lastmod' Value in Sitemap Using File Modification Time\nDESCRIPTION: Illustrates how to create a preprocessor that adds a lastmod variable to each page based on the file's modification time, then configures the sitemap plugin to use this variable.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/plugins/sitemap.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// Create the lastmod variable with the mtime of the file\nsite.preprocess([\".html\"], (pages) => {\n  for (const page of pages) {\n    const info = page.src.entry?.getInfo();\n    page.data.lastmod = info?.mtime;\n  }\n});\n\n// Configure the plugin to use the variable\nsite.use(sitemap({\n  lastmod: \"lastmod\",\n}));\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Filter in Lume\nDESCRIPTION: Shows how to create a simple uppercase filter in Lume that transforms text to uppercase\nSOURCE: https://github.com/lumeland/lume.land/blob/main/docs/configuration/filters.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nsite.filter(\"uppercase\", (value) => value.toUpperCase());\n```\n\n----------------------------------------\n\nTITLE: Lume Site Utility Functions\nDESCRIPTION: Collection of utility functions available in the site instance for path management, event handling, build processes, and content management.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/docs/advanced/cheatsheet.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n/** Returns the absolute path to the root directory */\nsite.root(...subdirs);\n\n/** Returns the absolute path to the src directory */\nsite.src(...subdirs);\n\n/** Returns the absolute path to the dest directory */\nsite.dest(...subdirs);\n\n/** Dispatch an event */\nsite.dispatchEvent(event);\n\n/** Run a script registered with `site.script()` */\nsite.run(script);\n\n/** Clear the dest directory */\nsite.clear();\n\n/** Build the site */\nsite.build();\n\n/** Rebuild the site reloading the changed files */\nsite.update(changedFiles);\n\n/** Render a single page (used by on_demand plugin) */\nsite.renderPage(file, extraData);\n\n/** Returns the final URL of any page/file */\nsite.url(path, absolute = false);\n\n/** Get the content of any file */\nsite.getContent(file, loader);\n```\n\n----------------------------------------\n\nTITLE: Installing Code Highlight Plugin in Lume (JavaScript)\nDESCRIPTION: This snippet shows how to import and use the code highlight plugin in a Lume _config.ts file. It demonstrates the basic setup for enabling syntax highlighting.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/plugins/code_highlight.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport lume from \"lume/mod.ts\";\nimport codeHighlight from \"lume/plugins/code_highlight.ts\";\n\nconst site = lume();\n\nsite.use(codeHighlight(/* Options */));\n\nexport default site;\n```\n\n----------------------------------------\n\nTITLE: Basic Layout Template using Vento\nDESCRIPTION: Basic HTML layout template using the Vento template engine. Demonstrates how to access page variables and content within the layout.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/docs/creating-pages/layouts.md#2025-04-21_snippet_1\n\nLANGUAGE: vento\nCODE:\n```\n<!doctype html>\n\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\">\n    <title>{{ title }}</title>\n  </head>\n\n  <body>\n    <main>\n      {{ content }}\n    </main>\n  </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Registering Additional Languages for Code Highlighting in Lume (JavaScript)\nDESCRIPTION: This code demonstrates how to register additional languages (JavaScript and Bash) for the code highlight plugin in Lume. It imports language definitions and adds them to the plugin configuration.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/plugins/code_highlight.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport lume from \"lume/mod.ts\";\nimport code_highlight from \"lume/plugins/code_highlight.ts\";\n\n// import your favorite language\nimport lang_javascript from \"npm:highlight.js/lib/languages/javascript\";\nimport lang_bash from \"npm:highlight.js/lib/languages/bash\";\n\nconst site = lume();\n\nsite.use(\n  code_highlight({\n    languages: {\n      javascript: lang_javascript,\n      bash: lang_bash,\n    },\n  }),\n);\n\nexport default site;\n```\n\n----------------------------------------\n\nTITLE: Creating a TSX page with Lume.Data and Lume.Helpers\nDESCRIPTION: This TypeScript snippet demonstrates how to create a TSX page using Lume's Data and Helpers interfaces. It exports a default function that renders a header with a title and formatted date.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/docs/configuration/using-typescript.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport default (data: Lume.Data, filters: Lume.Helpers) => {\n  const { title, date } = data;\n\n  return (\n    <header>\n      <h1>{title}</h1>\n      <time>{filters.date(date)}</time>\n    </header>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Simplified Pagination Using Paginate Plugin in Lume\nDESCRIPTION: This snippet demonstrates a simplified approach to pagination in Lume using the Paginate plugin. It uses the paginate helper function to generate paginated results from a set of music pages.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/docs/core/searching.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nexport const layout = \"layouts/post-list.vto\";\n\nexport default function* ({ search, paginate }) {\n  const musicPages = search.pages(\"category=music\");\n\n  for (const page of paginate(musicPages))) {\n    yield page;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing and Configuring MinifyHTML Plugin in Lume\nDESCRIPTION: This code snippet demonstrates how to import and use the MinifyHTML plugin in a Lume project's _config.ts file. It shows the basic setup for enabling HTML minification in a Lume site.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/plugins/minify_html.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport lume from \"lume/mod.ts\";\nimport minifyHTML from \"lume/plugins/minify_html.ts\";\n\nconst site = lume();\n\nsite.use(minifyHTML(/* Options */));\n\nexport default site;\n```\n\n----------------------------------------\n\nTITLE: Registering a Custom Handlebars Engine in Lume\nDESCRIPTION: Demonstrates how to register a custom Handlebars template engine with the loadPages function, allowing .hbs files to be loaded with the text loader and rendered using the Handlebars engine.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/docs/core/loaders.md#2025-04-21_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport textLoader from \"lume/core/loaders/text.ts\";\nimport HandlebarsEngine from \"./handlebars-engine.ts\";\n\nsite.loadPages([\".hbs\"], {\n  loader: textLoader,\n  engine: new HandlebarsEngine(site),\n});\n```\n\n----------------------------------------\n\nTITLE: Generator Function for Multiple Pages\nDESCRIPTION: Shows how to use a generator function to create multiple pages from a single source file in Lume.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/docs/advanced/the-data-model.md#2025-04-21_snippet_8\n\nLANGUAGE: js\nCODE:\n```\nexport const layout = \"main.vto\";\n\nexport default function* () {\n  const numbers = [1, 2, 3];\n\n  for (const number of numbers) {\n    yield {\n      url: `/page-${number}/`,\n      content: `This is page number ${number}`,\n    };\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Shared Data in YAML Format\nDESCRIPTION: Example of storing static shared data in a _data.yml file. This provides an alternative to JSON for defining structured data accessible by pages.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/docs/creating-pages/shared-data.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\npeople:\n  - name: Oscar Otero\n    color: black\n\n  - name: Laura Rubio\n    color: blue\n```\n\n----------------------------------------\n\nTITLE: Integrating Tailwind CSS with Markdown using Typography plugin\nDESCRIPTION: Configuration for using Tailwind CSS with Markdown content by incorporating the @tailwindcss/typography plugin, which provides styling for markdown-generated HTML.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/plugins/tailwindcss.md#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport lume from \"lume/mod.ts\";\nimport postcss from \"lume/plugins/postcss.ts\";\nimport tailwindcss from \"lume/plugins/tailwindcss.ts\";\nimport typography from \"npm:@tailwindcss/typography\";\n\nconst site = lume();\n\nsite.use(tailwindcss({\n  options: {\n    plugins: [typography],\n  },\n}));\n```\n\n----------------------------------------\n\nTITLE: Setting up Tailwind CSS directives\nDESCRIPTION: Example of a CSS file with the required Tailwind directives. These directives are necessary for Tailwind to output the generated CSS code based on the classes used in your HTML.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/plugins/tailwindcss.md#2025-04-21_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n```\n\n----------------------------------------\n\nTITLE: Configuring ESM CJS Exports for Package Compatibility\nDESCRIPTION: Demonstrates how to configure the esbuild plugin to handle CommonJS modules that need specific export declarations when used with ESM. This helps resolve export issues with packages like react-table.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/plugins/esbuild.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nsite.use(esbuild({\n  extensions: [\".jsx\"],\n  esm: {\n    cjsExports: {\n      \"react-table\": [\"useTable\"],\n    },\n  },\n}));\n```\n\n----------------------------------------\n\nTITLE: Advanced Tailwind CSS configuration with Lume\nDESCRIPTION: Example showing how to customize Tailwind CSS configuration in Lume, including setting file extensions for class extraction and configuring Tailwind's theme options like colors and fonts.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/plugins/tailwindcss.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nsite.use(tailwindcss({\n  // Extract the classes from HTML and JSX files\n  extensions: [\".html\", \".jsx\"],\n\n  // Your Tailwind options, like the theme colors and fonts\n  options: {\n    theme: {\n      colors: {\n        blue: \"#1fb6ff\",\n        purple: \"#7e5bef\",\n        pink: \"#ff49db\",\n      },\n      fontFamily: {\n        sans: [\"Graphik\", \"sans-serif\"],\n        serif: [\"Merriweather\", \"serif\"],\n      },\n    },\n  },\n}));\n```\n\n----------------------------------------\n\nTITLE: GitHub Actions Workflow for Deploying Lume Sites to GitHub Pages\nDESCRIPTION: GitHub Actions workflow configuration for building and deploying a Lume site to GitHub Pages. It sets up Deno, builds the site, and deploys it using GitHub's pages deployment actions.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/docs/advanced/deployment.md#2025-04-21_snippet_2\n\nLANGUAGE: yml\nCODE:\n```\nname: Publish on GitHub Pages\n\non:\n  push:\n    branches: [main]\n\npermissions:\n  contents: read\n  pages: write\n  id-token: write\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Clone repository\n        uses: actions/checkout@v4\n\n      - name: Setup Deno environment\n        uses: denoland/setup-deno@v2\n\n      - name: Build site\n        run: deno task build\n\n      - name: Setup Pages\n        uses: actions/configure-pages@v5\n\n      - name: Upload artifact\n        uses: actions/upload-pages-artifact@v3\n        with:\n          path: \"_site\"\n\n      - name: Deploy to GitHub Pages\n        id: deployment\n        uses: actions/deploy-pages@v4\n```\n\n----------------------------------------\n\nTITLE: Configuring JSX Transform in deno.json\nDESCRIPTION: This JSON configuration specifies compiler options for JSX transformation in a Deno project. It sets up React JSX support and imports necessary type definitions.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/plugins/jsx.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"compilerOptions\": {\n    \"jsx\": \"react-jsx\",\n    \"jsxImportSource\": \"npm:react\",\n    \"jsxImportSourceTypes\": \"npm:@types/react\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Script Command in Lume\nDESCRIPTION: Demonstrates how to create a basic deployment script using the site.script() function that executes an rsync command.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/docs/core/scripts.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nsite.script(\"deploy\", \"rsync -r _site/** user@server.com:/var/www/\");\n```\n\n----------------------------------------\n\nTITLE: Importing and Configuring the Terser Plugin in Lume\nDESCRIPTION: Shows how to import the Terser plugin in the Lume configuration file and add it to the site. This is the basic setup required to use the Terser minifier in a Lume project.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/plugins/terser.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport lume from \"lume/mod.ts\";\nimport terser from \"lume/plugins/terser.ts\";\n\nconst site = lume();\n\nsite.use(terser(/* Options */));\n\nexport default site;\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Button Component in Vento\nDESCRIPTION: Simple button component implementation using Vento template engine\nSOURCE: https://github.com/lumeland/lume.land/blob/main/docs/core/components.md#2025-04-21_snippet_0\n\nLANGUAGE: vento\nCODE:\n```\n<button class=\"button\">{{ text }}</button>\n```\n\n----------------------------------------\n\nTITLE: Installing SASS Plugin in Lume Configuration\nDESCRIPTION: Code snippet showing how to import and configure the SASS plugin in your Lume configuration file (_config.ts). This allows the static site generator to process SCSS files in your project.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/plugins/sass.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport lume from \"lume/mod.ts\";\nimport sass from \"lume/plugins/sass.ts\";\n\nconst site = lume();\n\nsite.use(sass(/* Options */));\n\nexport default site;\n```\n\n----------------------------------------\n\nTITLE: Implementing afterRender Event Listener in Lume\nDESCRIPTION: This snippet shows how to add an event listener for the afterRender event, which is triggered after all pages are rendered but before they are processed.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/docs/core/events.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nsite.addEventListener(\"afterRender\", () => {\n  console.log(\"All pages rendered\");\n});\n```\n\n----------------------------------------\n\nTITLE: Adding a Hook to the CSS Banner Plugin\nDESCRIPTION: This snippet shows how to add a hook to the CSS banner plugin, allowing other plugins or the configuration file to change the banner message dynamically. It modifies the plugin to expose a 'changeCssBanner' hook.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/docs/advanced/plugins.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// my-plugins/css_banner.ts\n\ninterface Options {\n  message: string;\n}\n\nexport default function (options: Options) {\n  function addBanner(content: string): string {\n    const banner = `/* ${options.message} */`;\n    return banner + \"\\n\" + content;\n  }\n\n  return (site: Site) => {\n    // Add a hook to change the message\n    site.hooks.changeCssBanner = (message: string) => {\n      options.message = message;\n    };\n\n    site.process([\".css\"], (page) => {\n      page.content = addBanner(page.content as string);\n    });\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Basic File Ignoring in Lume\nDESCRIPTION: Configure Lume to ignore specific files and folders using the ignore() method. This allows excluding files like README.md and CHANGELOG.md from being processed.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/docs/configuration/ignore-files.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nsite.ignore(\"README.md\", \"CHANGELOG.md\", \"node_modules\");\n```\n\n----------------------------------------\n\nTITLE: Configuring Serve Folder Middleware for Local Development in Lume\nDESCRIPTION: This code shows how to configure Lume's development server to use the serve_folder middleware in the _config.ts file. It allows serving static files from an additional directory during local development.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/plugins/serve_folder.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport lume from \"lume/mod.ts\";\nimport serve_folder from \"lume/middlewares/serve_folder.ts\";\n\nconst site = lume({\n  server: {\n    middlewares: [serve_folder({ root: \"./other-folder\" })],\n  },\n});\n\nexport default site;\n```\n\n----------------------------------------\n\nTITLE: Adding Remark and Rehype Plugins to MDX in Lume (JavaScript)\nDESCRIPTION: This code snippet shows how to add additional Remark and Rehype plugins to the MDX configuration in Lume. It demonstrates importing and using plugins like a11y-emoji for Remark and remove-comments for Rehype.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/plugins/mdx.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport lume from \"lume/mod.ts\";\nimport mdx from \"lume/plugins/mdx.ts\";\nimport jsx from \"lume/plugins/jsx.ts\";\nimport a11yEmoji from 'npm:@fec/remark-a11y-emoji';\nimport rehypeRemoveComments from 'npm:rehype-remove-comments@5';\n\nconst site = lume();\n\nsite.use(jsx());\nsite.use(mdx({\n  remarkPlugins: [allyEmoji]\n  rehypePlugins: [rehypeRemoveComments]\n}));\n\nexport default site;\n```\n\n----------------------------------------\n\nTITLE: Installing and Configuring Feed Plugin in Lume\nDESCRIPTION: This code snippet demonstrates how to import and configure the Feed plugin in a Lume site configuration file. It shows basic setup with output paths, query parameters, and content mapping for feed and item information.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/plugins/feed.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport lume from \"lume/mod.ts\";\nimport feed from \"lume/plugins/feed.ts\";\n\nconst site = lume();\n\nsite.use(feed({\n  output: [\"/posts.rss\", \"/posts.json\"],\n  query: \"type=post\",\n  info: {\n    title: \"=site.title\",\n    description: \"=site.description\",\n  },\n  items: {\n    title: \"=title\",\n    description: \"=excerpt\",\n  },\n}));\n\nexport default site;\n```\n\n----------------------------------------\n\nTITLE: GitLab CI/CD Configuration for Deploying Lume Sites to GitLab Pages\nDESCRIPTION: GitLab CI/CD configuration for building and deploying a Lume site to GitLab Pages. It uses the Deno Docker image and sets the destination folder to 'public' as required by GitLab Pages.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/docs/advanced/deployment.md#2025-04-21_snippet_3\n\nLANGUAGE: yml\nCODE:\n```\nimage: denoland/deno\n\nstages:\n  - pages\n\npages:\n  stage: pages\n  script: deno task build --dest=public\n\n  artifacts:\n    paths:\n      - public\n```\n\n----------------------------------------\n\nTITLE: Generating JSON-LD Structured Data in HTML\nDESCRIPTION: Example of JSON-LD structured data embedded in an HTML page using a script tag. It demonstrates how to provide information about a website and its author in a machine-readable format.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/plugins/json_ld.md#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<script type=\"application/ld+json\">\n  {\n    \"@context\": \"https://schema.org\",\n    \"@type\": \"WebSite\",\n    \"url\": \"https://oscarotero.com/\",\n    \"headline\": \"Óscar Otero - Web designer and developer\",\n    \"name\": \"Óscar Otero\",\n    \"description\": \"I'm just a designer and web developer\",\n    \"author\": {\n      \"@type\": \"Person\",\n      \"name\": \"Óscar Otero\"\n    }\n  }\n</script>\n```\n\n----------------------------------------\n\nTITLE: Installing PostCSS Plugin in Lume Configuration (JavaScript)\nDESCRIPTION: This snippet demonstrates how to import and use the PostCSS plugin in a Lume _config.ts file. It shows the basic setup for enabling PostCSS processing in a Lume site.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/plugins/postcss.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport lume from \"lume/mod.ts\";\nimport postcss from \"lume/plugins/postcss.ts\";\n\nconst site = lume();\n\nsite.use(postcss(/* Options */));\n\nexport default site;\n```\n\n----------------------------------------\n\nTITLE: Configuring Serve Folder Middleware for Production in Lume\nDESCRIPTION: This code demonstrates how to set up the serve_folder middleware with Lume's HTTP Server for production environments. It shows how to serve files from additional directories, including a fallback folder that's only used when files don't exist in the main folder.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/plugins/serve_folder.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Server from \"lume/core/server.ts\";\nimport serve_folder from \"lume/middlewares/serve_folder.ts\";\n\nconst server = new Server();\n\nserver.use(serve_folder({\n  root: \"./other-folder\",\n}));\n\n// Serve the files in this folder only if they don't exist in the main folder.\nserver.use(serve_folder({\n  root: \"./fallback-files\",\n  after: true,\n}));\n\nserver.start();\n```\n\n----------------------------------------\n\nTITLE: Creating a JSX Component in Lume\nDESCRIPTION: This JSX code defines a reusable button component in Lume. It demonstrates how to create a component that can be used across different pages or layouts.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/plugins/jsx.md#2025-04-21_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nexport default function ({ children }) {\n  return (\n    <button className=\"my-button\">\n      {children}\n    </button>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Nested Layout Example with Multiple Files\nDESCRIPTION: Complete example showing nested layouts with data inheritance across multiple files including a page, intermediate layout, and main layout.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/docs/creating-pages/layouts.md#2025-04-21_snippet_2\n\nLANGUAGE: yml\nCODE:\n```\n---\ntitle: This is the front matter\nlayout: layouts/page.vto\n---\n\n# This is the page content\nHere you can write Markdown content\n```\n\nLANGUAGE: vento\nCODE:\n```\n---\ntitle: Default page title\nlanguage: en\nlayout: layouts/main.vto\n---\n\n<article lang=\"{{ language }}\">\n  <header>\n    <h1>{{ title }}</h1>\n  </header>\n\n  {{ content }}\n</article>\n```\n\nLANGUAGE: vento\nCODE:\n```\n---\ntitle: Default main title\nlanguage: en\n---\n<!doctype html>\n\n<html lang=\"{{ language }}\">\n  <head>\n    <meta charset=\"utf-8\">\n    <title>{{ title }}</title>\n  </head>\n\n  <body>\n    <main>\n      {{ content }}\n    </main>\n  </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Sample Multilingual Page Configuration\nDESCRIPTION: Example of creating pages in multiple languages using YAML front matter configuration.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/plugins/multilanguage.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n---\nlang: en\nid: about\nurl: /about-me/\n---\n\n# About me\n```\n\nLANGUAGE: yaml\nCODE:\n```\n---\nlang: gl\nid: about\nurl: /acerca-de-min/\n---\n\n# Acerca de min\n```\n\n----------------------------------------\n\nTITLE: Copying Remote File in Lume (JavaScript)\nDESCRIPTION: This code shows how to copy a remote file statically in Lume. If the file doesn't exist locally, Lume will download it from the URL and save it in the destination folder.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/docs/core/remote-files.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nsite.copy(\"styles.css\");\n```\n\n----------------------------------------\n\nTITLE: Updating Search Functions in TypeScript/JSX\nDESCRIPTION: Shows how to update search functions in Lume 2, which now return data objects instead of page instances, and demonstrates the replacement for the removed search.tags() function.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/docs/advanced/migrate-to-lume2.md#2025-04-21_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n// Lume 1\nfor (const page of search.pages(\"type=article\")) {\n  <h1>{page.data.title}</h1>;\n}\n\n// Lume 2\nfor (const data of search.pages(\"type=article\")) {\n  <h1>{data.title}</h1>;\n}\n\n// Lume 1\nconst tags = search.tags();\n\n// Lume 2\nconst tags = search.values(\"tags\");\n```\n\n----------------------------------------\n\nTITLE: Configuring Lightning CSS Plugin with Default Options\nDESCRIPTION: Comprehensive configuration example showing all available options including file extensions, includes directory, and browser target versions using the Lightning CSS plugin in Lume.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/plugins/lightningcss.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport lume from \"lume/mod.ts\";\nimport lightningCss, { version } from \"lume/plugins/lightningcss.ts\";\n\nconst site = lume();\n\nsite.use(lightningCss({\n  extensions: [\".css\"],\n  includes: \"_includes\",\n  options: {\n    minify: true,\n    drafts: {\n      customMedia: true,\n    },\n    targets: {\n      android: version(100),\n      chrome: version(100),\n      edge: version(100),\n      firefox: version(100),\n      ios_saf: version(16),\n      safari: version(16),\n      opera: version(100),\n      samsung: version(19),\n    },\n  },\n}));\n\nexport default site;\n```\n\n----------------------------------------\n\nTITLE: Deno Deploy Server Configuration\nDESCRIPTION: Server setup code for Deno Deploy, including the on-demand middleware configuration and server initialization.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/plugins/on_demand.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport site from \"./_config.ts\";\nimport Server from \"lume/core/server.ts\";\nimport onDemand from \"lume/middlewares/on_demand.ts\";\nimport \"./_preload.ts\";\n\nconst server = new Server({\n  port: 8000,\n  root: site.dest(),\n});\n\nserver.use(onDemand({ site }));\n\nserver.start();\n\nconsole.log(\"Listening on http://localhost:8000\");\n```\n\n----------------------------------------\n\nTITLE: Configuring Foreign Keys for Relations\nDESCRIPTION: Example of configuring the Relations plugin with specific foreign keys for article and author page types.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/plugins/relations.md#2025-04-21_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport lume from \"lume/mod.ts\";\nimport relations from \"lume/plugins/relations.ts\";\n\nconst site = lume();\n\nsite.use(relations({\n  foreignKeys: {\n    article: \"article_id\",\n    author: \"author_id\",\n  },\n}));\n\nexport default site;\n```\n\n----------------------------------------\n\nTITLE: Configuring Lume with LightningCSS Plugin for CSS Minification\nDESCRIPTION: This code snippet demonstrates how to import and use the lightningCSS plugin in a Lume project's _config.ts file. It imports the necessary modules, creates a Lume site instance, and enables the lightningCSS plugin for CSS minification and browser compatibility transformation.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/docs/getting-started/use-plugins.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport lume from \"lume/mod.ts\";\nimport lightningCSS from \"lume/plugins/lightningcss.ts\";\n\nconst site = lume();\nsite.use(lightningCSS());\n\nexport default site;\n```\n\n----------------------------------------\n\nTITLE: Installing Icons Plugin in Lume Configuration (JavaScript)\nDESCRIPTION: This snippet shows how to import and use the Icons plugin in the Lume configuration file. It demonstrates the basic setup required to enable the plugin.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/plugins/icons.md#2025-04-21_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nimport lume from \"lume/mod.ts\";\nimport icons from \"lume/plugins/icons.ts\";\n\nconst site = lume();\n\nsite.use(icons(/* Options */));\n\nexport default site;\n```\n\n----------------------------------------\n\nTITLE: Installing the resolve_urls Plugin in Lume\nDESCRIPTION: Code showing how to import and use the resolve_urls plugin in a Lume site configuration file (_config.ts).\nSOURCE: https://github.com/lumeland/lume.land/blob/main/plugins/resolve_urls.md#2025-04-21_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport lume from \"lume/mod.ts\";\nimport resolveUrls from \"lume/plugins/resolve_urls.ts\";\n\nconst site = lume();\n\nsite.use(resolveUrls());\n\nexport default site;\n```\n\n----------------------------------------\n\nTITLE: Registering HTML Processor in Lume Config\nDESCRIPTION: Shows how to register a processor function in the Lume configuration file.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/docs/core/processors.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nsite.process([\".html\"], minifyHTML);\n```\n\n----------------------------------------\n\nTITLE: Configuring Unocss Plugin in Lume 2 and 3\nDESCRIPTION: Illustrates the configuration differences for the Unocss plugin between Lume 2 and Lume 3. In Lume 3, you need to explicitly add the CSS files to be processed using site.add() before using the plugin.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/docs/advanced/migrate-to-lume3.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n// Lume 2\nsite.use(unocss());\n\n// Lume 3\nsite.add([\".css\"]); // Add the files to process\nsite.use(unocss());\n```\n\n----------------------------------------\n\nTITLE: Adding Pagefind Search Component to HTML\nDESCRIPTION: HTML markup showing how to add the Pagefind search component to a webpage using a div with search ID.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/plugins/pagefind.md#2025-04-21_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<h1>Welcome to my site</h1>\n\n<!-- Insert the search component here: -->\n<div id=\"search\"></div>\n```\n\n----------------------------------------\n\nTITLE: Using Paginate Helper with Search in Lume\nDESCRIPTION: This snippet demonstrates how to use the 'paginate' helper function in combination with the 'search' helper to create paginated results for posts in Lume. It sets up pagination with a custom URL format and page size.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/plugins/paginate.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport const layout = \"layouts/post-list.vto\";\n\nexport default function* ({ search, paginate }) {\n  const posts = search.pages(\"posts\");\n  const options = {\n    url: (n) => `/posts/page/${n}/`,\n    size: 10,\n  };\n\n  for (const page of paginate(posts, options)) {\n    yield page;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Multi-format Image Transformation Configuration\nDESCRIPTION: YAML configuration to output images in multiple formats (webp and jpg) while maintaining the same resize dimensions.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/plugins/transform_images.md#2025-04-21_snippet_3\n\nLANGUAGE: yml\nCODE:\n```\ntransformImages:\n  resize: [200, 200]\n  format: [webp, jpg]\n```\n\n----------------------------------------\n\nTITLE: Optimized Layout Configuration with Named Export\nDESCRIPTION: Demonstrates how to use named exports to define a shared layout once, reducing code duplication.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/docs/core/multiple-pages.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nexport const layout = \"layouts/article.vto\";\n\nexport default function* () {\n  yield {\n    url: \"/page-1/\",\n    title: \"Article 1\",\n    body: \"Welcome to the article 1\",\n  };\n  yield {\n    url: \"/page-2/\",\n    title: \"Article 2\",\n    body: \"Welcome to the article 2\",\n  };\n  yield {\n    url: \"/page-3/\",\n    title: \"Article 3\",\n    body: \"Welcome to the article 3\",\n  };\n}\n```\n\nLANGUAGE: vento\nCODE:\n```\n---\nlayout: layouts/base.vto\n---\n\n<article>\n  <h1>{{ title }}</h1>\n  <div>\n    {{ body |> md }}\n  </div>\n</article>\n```\n\n----------------------------------------\n\nTITLE: Adding Event Listeners to Lume Server\nDESCRIPTION: Example of adding an event listener to the server to handle server start events.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/docs/core/server.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nserver.addEventListener(\"start\", () => {\n  console.log(\"Server started successfully\");\n});\n```\n\n----------------------------------------\n\nTITLE: Generated Pages from Generator Function\nDESCRIPTION: Shows the resulting pages created by a generator function, each with its own URL and content.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/docs/advanced/the-data-model.md#2025-04-21_snippet_9\n\nLANGUAGE: js\nCODE:\n```\n{\n  layout: \"main.vto\",\n  url: \"/page-1/\",\n  content: \"This is page number 1\",\n  date: Date(),\n  basename: \"page-1\",\n  search: Searcher(),\n  paginate: Paginate(),\n  comp: {}\n}\n\n{\n  layout: \"main.vto\",\n  url: \"/page-2/\",\n  content: \"This is page number 2\",\n  date: Date(),\n  basename: \"page-2\",\n  search: Searcher(),\n  paginate: Paginate(),\n  comp: {}\n}\n\n{\n  layout: \"main.vto\",\n  url: \"/page-3/\",\n  content: \"This is page number 3\",\n  date: Date(),\n  basename: \"page-3\",\n  search: Searcher(),\n  paginate: Paginate(),\n  comp: {}\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing afterBuild Event Listener in Lume\nDESCRIPTION: This snippet shows how to add an event listener for the afterBuild event, which is triggered after building the site. It demonstrates how to access the pages and static files that were built.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/docs/core/events.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nsite.addEventListener(\"afterBuild\", (event) => {\n  console.log(\"The build is finished\");\n  console.log(event.pages); // The pages that have been build\n  console.log(event.staticFiles); // The files that have been copied\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Cache Busting in Production Server\nDESCRIPTION: Configuration code for setting up cache busting middleware in a production Lume server. Creates a new server instance and applies the cache busting middleware before starting the server.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/plugins/cache_busting.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport Server from \"lume/core/server.ts\";\nimport cacheBusting from \"lume/middlewares/cache_busting.ts\";\n\nconst server = new Server();\n\nserver.use(cacheBusting());\n\nserver.start();\n```\n\n----------------------------------------\n\nTITLE: Installing Date Plugin in Lume Configuration\nDESCRIPTION: Shows how to import and configure the date plugin in the Lume configuration file.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/plugins/date.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport lume from \"lume/mod.ts\";\nimport date from \"lume/plugins/date.ts\";\n\nconst site = lume();\n\nsite.use(date(/* Options */));\n\nexport default site;\n```\n\n----------------------------------------\n\nTITLE: Accessing Shared Data in JSX Component\nDESCRIPTION: Shows how to use shared data (the 'documents' object) within a JSX component. It creates a list of document titles using the map function.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/docs/creating-pages/shared-data.md#2025-04-21_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nexport default function ({ documents }) {\n  return (\n    <>\n      <h2>Documents</h2>\n\n      <ul>\n        {documents.map((doc) => <li>{doc.title}</li>)}\n      </ul>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Static File Copying in JavaScript\nDESCRIPTION: Examples of basic file and directory copying operations using site.copy() method. Shows how to copy individual files and entire directories.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/docs/configuration/copy-static-files.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// Copy the \"img\" directory to _site/img\nsite.copy(\"img\");\n\n// Copy the file to _site/favicon.ico\nsite.copy(\"favicon.ico\");\n```\n\n----------------------------------------\n\nTITLE: Configuring File Watcher in TypeScript\nDESCRIPTION: Configuration for the file watcher settings including debounce and ignore patterns.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/docs/configuration/config-file.md#2025-04-21_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nconst site = lume({\n  watcher: {\n    debounce: 10,\n    ignore: [\n      \"./ignored-folder/\",\n      \"./ignored-file.txt\",\n      (path) => path.endsWith(\".foo\"), // ignore extension\n    ],\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Image Container with Transform-Images Attribute\nDESCRIPTION: This HTML snippet demonstrates how to use the transform-images attribute on a container element to apply transformations to all images inside. It also shows how to override or disable transformations for specific images.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/plugins/picture.md#2025-04-21_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<div transform-images=\"avif webp jpg 300@2\">\n  <!-- All images inside will be transformed -->\n  <img src=\"/flowers.jpg\" />\n\n  <!-- You can override the value for a specific image -->\n  <img src=\"/flowers.jpg\" transform-images=\"avif jpg 600\" />\n\n  <!-- This one is not tranformed because the value is empty -->\n  <img src=\"/flowers.jpg\" transform-images=\"\" />\n</div>\n```\n\n----------------------------------------\n\nTITLE: Configuring Check URLs Plugin with Strict Mode (JavaScript)\nDESCRIPTION: This code snippet demonstrates how to enable strict mode for the Check URLs plugin. In strict mode, redirects are not allowed and all links must go to the final page directly.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/plugins/check_urls.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nsite.use(checkUrls({\n  strict: true,\n}));\n```\n\n----------------------------------------\n\nTITLE: Pattern-based Image Transformation with RegExp Matching\nDESCRIPTION: YAML configuration showing how to apply different transformations to images based on pattern matching in their filenames.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/plugins/transform_images.md#2025-04-21_snippet_5\n\nLANGUAGE: yml\nCODE:\n```\ntransformImages:\n  - resize: [1000, 1000]\n    matches: -cover\n\n  - resize: [100, 100]\n    matches: -icon\n```\n\n----------------------------------------\n\nTITLE: Configuring SVGO Plugin in Lume\nDESCRIPTION: Example demonstrating how to import and enable the SVGO plugin in a Lume configuration file. The SVGO plugin optimizes SVG files using the SVGO library.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/docs/configuration/install-plugins.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport lume from \"lume/mod.ts\";\nimport svgo from \"lume/plugins/svgo.ts\";\n\nconst site = lume();\n\nsite.use(svgo());\n\nexport default site;\n```\n\n----------------------------------------\n\nTITLE: Registering a TOML Asset Loader in Lume\nDESCRIPTION: Shows how to use TOML files as assets in Lume, which keeps the original extension instead of converting to HTML. This is useful for transformation pipelines.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/docs/core/loaders.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nsite.loadAssets([\".toml\"], tomlLoader);\n```\n\n----------------------------------------\n\nTITLE: Configuring Remark with Additional Plugins\nDESCRIPTION: Shows how to configure the Remark plugin with additional Remark and Rehype plugins. This example adds accessibility support for emojis and removes HTML comments from the output.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/plugins/remark.md#2025-04-21_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport lume from \"lume/mod.ts\";\nimport remark from \"lume/plugins/remark.ts\";\nimport a11yEmoji from \"npm:@fec/remark-a11y-emoji\";\nimport rehypeRemoveComments from \"npm:rehype-remove-comments@5\";\n\nconst site = lume();\n\nsite.use(remark({\n  remarkPlugins: [a11yEmoji],\n  rehypePlugins: [[rehypeRemoveComments, { removeConditional: true }]],\n}));\n\nexport default site;\n```\n\n----------------------------------------\n\nTITLE: Configuring Not Found Middleware with Lume's HTTP Server in TypeScript\nDESCRIPTION: This code snippet demonstrates how to set up the 'not_found' middleware with Lume's HTTP Server. It creates a new server instance, applies the middleware with optional configuration, and starts the server.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/plugins/not_found.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport Server from \"lume/core/server.ts\";\nimport notFound from \"lume/middlewares/not_found.ts\";\n\nconst server = new Server();\n\nserver.use(notFound({\n  page404: \"/404.html\", // Default value\n}));\n\nserver.start();\n```\n\n----------------------------------------\n\nTITLE: Installing FFF Plugin in Lume Configuration (JavaScript)\nDESCRIPTION: This code snippet demonstrates how to import and use the FFF plugin in a Lume project's _config.ts file. It shows the basic setup for incorporating the plugin into a Lume site configuration.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/plugins/fff.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport lume from \"lume/mod.ts\";\nimport fff from \"lume/plugins/fff.ts\";\n\nconst site = lume();\n\nsite.use(fff(/* Options */));\n\nexport default site;\n```\n\n----------------------------------------\n\nTITLE: Implementing Secure Basic Auth with Environment Variables\nDESCRIPTION: Example showing how to implement basic authentication using environment variables for enhanced security, avoiding hardcoded credentials.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/plugins/basic_auth.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst user = Deno.env.get(\"AUTH_USERNAME\");\nconst password = Deno.env.get(\"AUTH_PASSWORD\");\n\nserver.use(basicAuth({\n  users: {\n    [user]: password,\n  },\n}));\n```\n\n----------------------------------------\n\nTITLE: Installing Nav Plugin in Lume Configuration\nDESCRIPTION: This snippet shows how to import and use the Nav plugin in the Lume configuration file. It demonstrates the basic setup required to enable the plugin.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/plugins/nav.md#2025-04-21_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nimport lume from \"lume/mod.ts\";\nimport nav from \"lume/plugins/nav.ts\";\n\nconst site = lume();\n\nsite.use(nav(/* Options */));\n\nexport default site;\n```\n\n----------------------------------------\n\nTITLE: Page Configuration in Vento Template\nDESCRIPTION: Example of using front matter in a Vento template file with template variable usage.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/docs/creating-pages/page-data.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: This is the title\nurl: custom-url.html\n---\n\n<h1>{{ title }}</h1>\nThis is the page content\n```\n\n----------------------------------------\n\nTITLE: Accessing Global Data in Vento Template (Vento)\nDESCRIPTION: Shows how to access global data within a Vento template. This snippet demonstrates using both a simple variable and a function set in the global data.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/docs/configuration/data.md#2025-04-21_snippet_1\n\nLANGUAGE: vento\nCODE:\n```\n<p>My number: {{ myNumber }}</p>\n<p>Random number: {{ randomNumber() }}</p>\n```\n\n----------------------------------------\n\nTITLE: Configuring Shutdown Middleware for Local Development in Lume\nDESCRIPTION: Code for integrating the shutdown middleware into Lume's development server configuration. This setup is added to the _config.ts file to enable the middleware during local development.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/plugins/shutdown.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport lume from \"lume/mod.ts\";\nimport shutdown from \"lume/middlewares/shutdown.ts\";\n\nconst site = lume({\n  server: {\n    middlewares: [shutdown()],\n  },\n});\n\nexport default site;\n```\n\n----------------------------------------\n\nTITLE: Responsive Image with Multiple Sizes\nDESCRIPTION: This HTML snippet demonstrates how to create a responsive image with multiple sizes using the transform-images attribute. It includes the sizes attribute to specify different image sizes for different viewport widths.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/plugins/picture.md#2025-04-21_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<img\n  sizes=\"(min-width: 640px) 18rem, 11rem\"\n  src=\"/flowers.jpg\"\n  transform-images=\"avif webp jpg 640 1080\"\n>\n```\n\n----------------------------------------\n\nTITLE: Configuring PostCSS Includes in Lume (JavaScript)\nDESCRIPTION: These snippets demonstrate how to configure the includes option for PostCSS in Lume. The first example changes the includes folder, while the second disables includes completely.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/plugins/postcss.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// Change the includes folder of CSS to _styles\nsite.use(postcss({\n  includes: \"_styles\",\n}));\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// Disable the includes (the local @import's won't be inlined)\nsite.use(postcss({\n  includes: false,\n}));\n```\n\n----------------------------------------\n\nTITLE: Generating YAML Content with Archetype in TypeScript\nDESCRIPTION: This example shows how to create an archetype that generates a YAML file with structured content.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/docs/core/archetypes.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport default function () {\n  return {\n    path: \"/pages/example.yml\",\n    content: {\n      title: \"Title content\",\n      content: \"Page content\",\n    },\n  };\n}\n```\n\nLANGUAGE: yaml\nCODE:\n```\ntitle: Title content\ncontent: Page content\n```\n\n----------------------------------------\n\nTITLE: Defining a Basic Collection in LumeCMS (TypeScript)\nDESCRIPTION: This snippet demonstrates how to define a basic collection named 'posts' using the cms.collection() function. It specifies the collection name, storage location, and fields for content modification.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/cms/configuration/collections.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ncms.collection(\"posts\", \"src:posts/*.md\", [\n  \"title: text\",\n  \"content: markdown\",\n]);\n```\n\n----------------------------------------\n\nTITLE: Configuring Remote File in Lume (TypeScript)\nDESCRIPTION: This snippet demonstrates how to configure a remote file in Lume's _config.ts file using the remoteFile() function. It sets up a remote CSS file as a fallback for a local file.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/docs/core/remote-files.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport lume from \"lume/mod.ts\";\n\nconst site = lume();\n\nsite.remoteFile(\"styles.css\", \"https://example.com/theme/styles.css\");\n\nexport default site;\n```\n\n----------------------------------------\n\nTITLE: Setting Directory-Specific Data in Lume (JavaScript)\nDESCRIPTION: Demonstrates how to set data for a specific directory using the third argument of site.data(). This allows for context-specific data assignment.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/docs/configuration/data.md#2025-04-21_snippet_3\n\nLANGUAGE: js\nCODE:\n```\n// Set the layout value to the directory /pages\nsite.data(\"layout\", \"pages.vto\", \"/pages\");\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Date-based File Naming and URL Generation in Lume\nDESCRIPTION: This example shows how date prefixes in file names are used for ordering and removed from the final URL, useful for blog posts or dated content.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/docs/creating-pages/page-files.md#2025-04-21_snippet_3\n\nLANGUAGE: txt\nCODE:\n```\n.\n├── index.md                          => /index.html\n└── posts\n    └── 2020-06-21_hello-world.md     => /posts/hello-world/index.html\n    └── 2020-06-22_my-second-post.md  => /posts/my-second-post/index.html\n```\n\n----------------------------------------\n\nTITLE: Creating LumeCMS Configuration File\nDESCRIPTION: This TypeScript snippet demonstrates the basic structure of the _cms.ts configuration file for LumeCMS. It imports the necessary module and initializes the CMS.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/cms/index.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport lumeCMS from \"lume/cms/mod.ts\";\n\nconst cms = lumeCMS();\n\n// Configuration here\n\nexport default cms;\n```\n\n----------------------------------------\n\nTITLE: Composing Multiple Scripts in Lume\nDESCRIPTION: Shows how to create composite scripts by combining multiple previously defined scripts into a single command.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/docs/core/scripts.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// Create two scripts\nsite.script(\"compress\", \"gzip -r _site site.gz\");\nsite.script(\"upload\", \"scp site.gz user@host.com:/home/user/archive\");\n\n// Create a third script that runs the two previous scripts\nsite.script(\"compress-and-upload\", \"compress\", \"upload\");\n```\n\n----------------------------------------\n\nTITLE: Using Markdown Hooks in Lume\nDESCRIPTION: Demonstrates how to use hooks to add markdown-it plugins directly to the site configuration.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/plugins/markdown.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport lume from \"lume/mod.ts\";\nimport anchor from \"npm:markdown-it-anchor\";\nimport footnote from \"npm:markdown-it-footnote\";\n\nconst site = lume();\n\nsite.hooks.addMarkdownItPlugin(anchor, { level: 2 });\nsite.hooks.addMarkdownItPlugin(footnote);\n\nexport default site;\n```\n\n----------------------------------------\n\nTITLE: Configuring Pagefind Indexing Options\nDESCRIPTION: JavaScript configuration showing how to customize the Pagefind indexing process with various options.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/plugins/pagefind.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport lume from \"lume/mod.ts\";\nimport pagefind from \"lume/plugins/pagefind.ts\";\n\nconst site = lume();\n\nsite.use(pagefind({\n  indexing: {\n    rootSelector: \"html\",\n    verbose: false,\n  },\n}));\n\nexport default site;\n```\n\n----------------------------------------\n\nTITLE: Basic Image Transformation Configuration with Fixed Size\nDESCRIPTION: YAML configuration showing how to resize all images in a folder to 200x200px and convert them to webp format.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/plugins/transform_images.md#2025-04-21_snippet_1\n\nLANGUAGE: yml\nCODE:\n```\ntransformImages:\n  resize: [200, 200]\n  format: webp\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Function Scripts in Lume\nDESCRIPTION: Demonstrates how to create a script that executes a custom JavaScript function instead of a shell command.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/docs/core/scripts.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nsite.script(\"add-date-published\", () => {\n  Deno.writeTextFileSync(\n    site.dest(\"published.txt\"),\n    `Site published at: ${Date.now()}`,\n  );\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring LumeCMS Document Fields (TypeScript)\nDESCRIPTION: TypeScript code to configure LumeCMS for editing a document with title, date, and content fields.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/cms/configuration/fields.md#2025-04-21_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\ncms.document(\"happy-2024\", \"src:happy-2024.yml\", [\n  {\n    name: \"title\",\n    type: \"text\",\n  },\n  {\n    name: \"date\",\n    type: \"datetime\",\n  },\n  {\n    name: \"content\",\n    type: \"markdown\",\n  },\n]);\n```\n\n----------------------------------------\n\nTITLE: Creating JSX Layout for Open Graph Images\nDESCRIPTION: Example JSX layout component that generates the Open Graph image structure using Satori-compatible JSX elements with styling and SVG content.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/plugins/og_images.md#2025-04-21_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n/** @jsxImportSource npm:react@18.2.0 */\n\nexport default function ({ title, description }) {\n  return (\n    <div\n      style={{\n        height: \"100%\",\n        width: \"100%\",\n        display: \"flex\",\n        flexDirection: \"column\",\n        alignItems: \"center\",\n        justifyContent: \"center\",\n        backgroundColor: \"#fff\",\n        fontSize: 32,\n        fontWeight: 600,\n      }}\n    >\n      <svg\n        width=\"75\"\n        viewBox=\"0 0 75 65\"\n        fill=\"#000\"\n        style={{ margin: \"0 75px\" }}\n      >\n        <path d=\"M37.59.25l36.95 64H.64l36.95-64z\"></path>\n      </svg>\n      <div style={{ marginTop: 40 }}>{title}</div>\n      <div>{description}</div>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Loading CSS Files as Asset Pages in Lume\nDESCRIPTION: This code shows how to configure Lume to load CSS files as asset pages, which allows them to be processed by Lume's asset pipeline without being converted to HTML.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/docs/core/concepts.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// Load .css files\nsite.loadAssets([\".css\"]);\n```\n\n----------------------------------------\n\nTITLE: Setting Up Basic Authentication in LumeCMS\nDESCRIPTION: Configuration of basic authentication with username and password pairs.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/cms/configuration/options.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst cms = lumeCMS({\n  auth: {\n    method: \"basic\",\n    users: {\n      user1: \"password1\",\n      user2: \"password2\",\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing afterStartServer Event Listener in Lume\nDESCRIPTION: This snippet shows how to add an event listener for the afterStartServer event, which is triggered after starting the local server with the lume --server command.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/docs/core/events.md#2025-04-21_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nsite.addEventListener(\"afterStartServer\", () => {\n  console.log(\"Local server started successfully\");\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Relative URLs Plugin to Modify CSS Files\nDESCRIPTION: Shows how to configure the relative_urls plugin to modify URLs in CSS files in addition to HTML files by setting the extensions option.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/plugins/relative_urls.md#2025-04-21_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nsite.use(relativeUrls({\n  extensions: [\".html\", \".css\"], // Fix URLs inside HTML and CSS files\n}));\n```\n\n----------------------------------------\n\nTITLE: Configuring Redirects Middleware for Local Development in Lume\nDESCRIPTION: Sets up the redirects middleware for Lume's development server in the _config.ts file. This example shows how to import redirect definitions from a JSON file and apply them to the development server.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/plugins/redirects-middleware.md#2025-04-21_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport lume from \"lume/mod.ts\";\nimport redirects from \"lume/middlewares/redirects.ts\";\nimport myRedirections from \"./my-redirections.json\" with { type: \"json\" };\n\nconst site = lume({\n  server: {\n    middlewares: [redirects({ redirects: myRedirections })],\n  },\n});\n\nexport default site;\n```\n\n----------------------------------------\n\nTITLE: Using the vto Filter to Render String Templates in Lume\nDESCRIPTION: Example showing how to use the vto filter to render a string as a Vento template. The filter accepts an object with data that is passed to the template context.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/plugins/vento.md#2025-04-21_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n---\ndata:\n  username: Oscar\ntext: \"Hello {{ username }}\"\n---\n\n<!-- Render a string -->\n<div>{{ text |> vto(data) }}<div>\n```\n\n----------------------------------------\n\nTITLE: Updating URL Generation in JavaScript\nDESCRIPTION: Demonstrates how to update URL generation functions in Lume 2, replacing page.src.slug with page.data.basename and showing new URL manipulation capabilities.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/docs/advanced/migrate-to-lume2.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// Lume 1\nexport const url = (page) => `/articles/${page.src.slug}/`;\n\n// Lume 2\nexport const url = (page) => `/articles/${page.data.basename}/`;\n\n// Only in Lume 2:\n// Just remove the `/foo/` directory:\n\nexport const url = (page) => page.data.url.replace(\"/foo/\", \"/\");\n```\n\n----------------------------------------\n\nTITLE: Custom Output Function for Check URLs Plugin (JavaScript)\nDESCRIPTION: This snippet shows how to use a custom function for output handling in the Check URLs plugin. It demonstrates logging the number of broken links found using a custom output function.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/plugins/check_urls.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nsite.use(checkUrls({\n  external: true,\n  output: (brokenLinks) => {\n    console.log(`${brokenLinks.size} broken links found!`);\n  },\n}));\n```\n\n----------------------------------------\n\nTITLE: Accessing Paginated Page Properties in Lume\nDESCRIPTION: This code snippet shows the structure of the paginated page object returned by the 'paginate' helper. It demonstrates how to access various properties such as URL, results, and pagination information for each paginated page.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/plugins/paginate.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nfor (const page of paginate(posts, options)) {\n  page.url;        // URL of the page, for example \"post/page/1\"\n  page.results;    // Array with the results of this page\n\n  // Pagination info:\n  page.pagination.page;         // The current page\n  page.pagination.totalPages;   // Total pages\n  page.pagination.totalResults; // Total results\n  page.pagination.previous;     // The URL of the previous page\n  page.pagination.next;         // The URL of the next page\n\n  yield page;\n}\n```\n\n----------------------------------------\n\nTITLE: Dynamic Page Generation with Source Maps\nDESCRIPTION: Example of generating additional pages dynamically, specifically for CSS source maps.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/docs/core/processors.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Page } from \"lume/core/file.ts\";\n\nsite.process([\".css\"], (filteredPages, allPages) => {\n  for (const page of filteredPages) {\n    // Minify the css content\n    const { code, map } = myCssMinifier(page.content);\n\n    // Update the page content\n    page.content = code;\n\n    // Create a new page with the source map\n    const pageMap = Page.create({\n      url: page.data.url + \".map\",\n      content: map,\n    });\n\n    // Add the page to the site\n    allPages.push(pageMap);\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic Auth in Production Server\nDESCRIPTION: Setup code for implementing basic authentication in a production Lume server environment using TypeScript. Defines user/password combinations for authentication control.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/plugins/basic_auth.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport Server from \"lume/core/server.ts\";\nimport basicAuth from \"lume/middlewares/basic_auth.ts\";\n\nconst server = new Server();\n\nserver.use(basicAuth({\n  users: {\n    user1: \"password1\",\n    user2: \"password2\",\n  },\n}));\n\nserver.start();\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Markdown-it Plugins with Options\nDESCRIPTION: Example showing how to configure multiple markdown-it plugins with custom options.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/plugins/markdown.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport anchor from \"npm:markdown-it-anchor\";\nimport footnote from \"npm:markdown-it-footnote\";\n\n// Pass options to markdown-it plugins\nconst markdown = {\n  plugins: [\n    [anchor, { level: 2 }],\n    footnote,\n  ],\n};\n\nconst site = lume({}, { markdown });\n```\n\n----------------------------------------\n\nTITLE: Creating Multiple Feeds with Lume Feed Plugin\nDESCRIPTION: This code demonstrates how to create multiple feeds (e.g., one for posts and one for articles) by using the Feed plugin multiple times with different configurations.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/plugins/feed.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nsite.use(feed({\n  output: \"/posts.rss\",\n  // Posts feed configuration\n}));\n\nsite.use(feed({\n  output: \"/articles.rss\",\n  // Articles feed configuration\n}));\n```\n\n----------------------------------------\n\nTITLE: Defining a Basic Document in LumeCMS\nDESCRIPTION: This snippet demonstrates how to define a basic document in LumeCMS using the cms.document() function. It specifies the document name, storage location, and editable fields.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/cms/configuration/documents.md#2025-04-21_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\ncms.document(\"landing-page\", \"src:index.yml\", [\n  \"title: text\",\n  \"subtitle: text\",\n  \"content: markdown\",\n]);\n```\n\n----------------------------------------\n\nTITLE: Using Filters Across Template Engines\nDESCRIPTION: Demonstrates how to use the uppercase filter in different template engines including Vento, Nunjucks, JavaScript, and Eta\nSOURCE: https://github.com/lumeland/lume.land/blob/main/docs/configuration/filters.md#2025-04-21_snippet_1\n\nLANGUAGE: vento\nCODE:\n```\n<h1>{{ title |> uppercase }}</h1>\n```\n\nLANGUAGE: html\nCODE:\n```\n<h1>{{ title | uppercase }}</h1>\n```\n\nLANGUAGE: javascript\nCODE:\n```\nexport default function (data, filters) {\n  const text = filters.uppercase(data.title);\n\n  return `<h1>${text}</h1>`;\n}\n```\n\nLANGUAGE: html\nCODE:\n```\n<h1><%= filters.uppercase(title) %></h1>\n```\n\n----------------------------------------\n\nTITLE: Converting Markdown to Data Object\nDESCRIPTION: Shows how a simple Markdown file is converted to Lume's Data object structure with content stored in the 'content' property.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/docs/advanced/the-data-model.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n**Content** of the page\n```\n\nLANGUAGE: js\nCODE:\n```\n{\n  content: \"**Content** of the page\",\n}\n```\n\n----------------------------------------\n\nTITLE: Dynamic Component Registration in TypeScript\nDESCRIPTION: Example of registering a component programmatically in the configuration file\nSOURCE: https://github.com/lumeland/lume.land/blob/main/docs/core/components.md#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nsite.component(\"ui\", {\n  name: \"button\",\n  css: \".btn { background: blue; color: white }\",\n  render({ text }) {\n    return `<button class=\"btn\">${text}</button>`;\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Custom Date Format Configuration\nDESCRIPTION: Demonstrates how to configure custom named date formats in the configuration file and use them in templates.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/plugins/date.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nsite.use(date({\n  formats: {\n    \"MY_FORMAT\": \"MM-dd-yyyy\",\n  },\n}));\n```\n\nLANGUAGE: vento\nCODE:\n```\n<time>{{ createdAt |> date('MY_FORMAT') }}</time>\n```\n\n----------------------------------------\n\nTITLE: Creating a Menu in Vento Template\nDESCRIPTION: This snippet demonstrates how to use the nav.menu() function in a Vento template to create a recursive menu structure. It includes two template files: menu.vto and menu_item.vto.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/plugins/nav.md#2025-04-21_snippet_2\n\nLANGUAGE: vento\nCODE:\n```\n<ul class=\"menu\">\n  {{ for item of nav.menu().children }}\n    <li>\n      {{ include \"templates/menu_item.vto\" { item } }}\n    </li>\n  {{ /for }}\n</ul>\n```\n\nLANGUAGE: vento\nCODE:\n```\n{{ if item.data.url }}\n  <a href=\"{{ item.data.url }}\">\n    {{ item.data.title }}\n  </a>\n{{ else }}\n  <span>{{ item.data.basename }}</span>\n{{ /if }}\n\n<ul>\n  {{ for child of item.children }}\n  <li>\n    {{ include \"templates/menu_item.vto\" { item: child } }}\n  </li>\n  {{ /for }}\n</ul>\n```\n\n----------------------------------------\n\nTITLE: Creating Nunjucks Layout (HTML/Nunjucks)\nDESCRIPTION: This example demonstrates how to create a Nunjucks layout file with a .njk extension. It includes front matter for setting template data and shows basic Nunjucks syntax for variable interpolation.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/plugins/nunjucks.md#2025-04-21_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n--- title: Welcome to my page\nintro: This is my first post using Lume. I hope you like it! ---\n\n<html>\n  <head>\n    <title>{{ title }}</title>\n  </head>\n\n  <body>\n    <p>{{ intro }}</p>\n  </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Using Component in JavaScript Template\nDESCRIPTION: Example of using a Lume component within a JavaScript template function\nSOURCE: https://github.com/lumeland/lume.land/blob/main/docs/core/components.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexport default function ({ comp }) {\n  return `\n  <h1>Welcome to my site.</h1>\n  ${comp.button({ text: \"Login\" })}\n`;\n}\n```\n\n----------------------------------------\n\nTITLE: Managing HTML Class Names\nDESCRIPTION: Shows how to use the class filter to handle HTML class names in both VTO templates and JavaScript, including conditional class application.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/plugins/attributes.md#2025-04-21_snippet_1\n\nLANGUAGE: yml\nCODE:\n```\n---\nstyles:\n  - btn\n  - btn-primary\n---\n\n<a class=\"{{ styles |> class }}\">Hello</a>\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst styles = [\n  \"btn\",\n  \"btn-primary\",\n  { \"is-disabled\": true },\n];\n\nexport default function (_, filters) {\n  return `<a class=\"${filters.class(styles)}>Hello</a>`;\n}\n```\n\n----------------------------------------\n\nTITLE: Installing and Configuring PurgeCSS Plugin in Lume\nDESCRIPTION: Code snippet showing how to import and use the PurgeCSS plugin in a Lume site configuration. This configuration enables PurgeCSS to remove unused CSS code from the site's stylesheets.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/plugins/purgecss.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport lume from \"lume/mod.ts\";\nimport purgecss from \"lume/plugins/purgecss.ts\";\n\nconst site = lume();\nsite.use(purgecss());\n\nexport default site;\n```\n\n----------------------------------------\n\nTITLE: Using UnoCSS Directives in CSS\nDESCRIPTION: Example CSS file showing how to use UnoCSS's @apply directive to compose utility classes into custom component classes. This demonstrates creating button styles with UnoCSS utilities.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/plugins/unocss.md#2025-04-21_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n.btn {\n  @apply font-bold py-2 px-4 rounded;\n}\n.btn-blue {\n  @apply bg-blue-500 hover:bg-blue-700 text-white;\n  padding-top: 1rem;\n}\n```\n\n----------------------------------------\n\nTITLE: Default View Visibility Configuration in TypeScript CMS\nDESCRIPTION: Example demonstrating how to set default visibility for views using the 'views' option in the collection configuration. The 'editor' view is set to be visible by default.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/cms/configuration/views.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ncms.collection({\n  name: \"posts\",\n  store: \"src:posts/*.md\",\n  views: [\"editor\"],\n  fields: [\n    {\n      name: \"title\",\n      type: \"text\",\n    },\n    {\n      name: \"published\",\n      type: \"datetime\",\n      view: \"editor\",\n    },\n    {\n      name: \"draft\",\n      type: \"checkbox\",\n      view: \"editor\",\n    },\n    {\n      name: \"content\",\n      type: \"markdown\",\n    },\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Code Highlight Themes in Lume (TypeScript)\nDESCRIPTION: This code demonstrates how to configure multiple themes (light and dark) for the code highlight plugin in Lume. It specifies different theme names and placeholders for each theme.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/plugins/code_highlight.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport lume from \"lume/mod.ts\";\nimport highlight from \"lume/plugins/code_highlight.ts\";\n\nconst site = lume();\n\nsite.use(highlight({\n  theme: [\n    {\n      name: \"atom-one-light\",\n      cssFile: \"/styles.css\",\n      placeholder: \"/* light-theme-here */\"\n    },\n    {\n      name: \"atom-one-dark\",\n      cssFile: \"/styles.css\",\n      placeholder: \"/* dark-theme-here */\"\n    },\n  ]\n}));\n\nexport default site;\n```\n\n----------------------------------------\n\nTITLE: Creating Breadcrumbs with Nav Plugin in Vento\nDESCRIPTION: This snippet demonstrates how to use the nav.breadcrumb() function to generate breadcrumb navigation in a Vento template.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/plugins/nav.md#2025-04-21_snippet_6\n\nLANGUAGE: vento\nCODE:\n```\n<ul>\n  {{ for item of nav.breadcrumb(\"/articles/second-article/chapter-2\") }}\n  <li>\n    {{ if item.data }}\n      <a href=\"{{ item.data.url }}\">\n        {{ item.data.title }}\n      </a>\n    {{ else }}\n      <span>{{ item.slug }}</span>\n    {{ /if }}\n  </li>\n  {{ /for }}\n</ul>\n```\n\n----------------------------------------\n\nTITLE: Creating Liquid Layout Template\nDESCRIPTION: Example of creating a layout file with .liquid extension, demonstrating front matter and basic template syntax\nSOURCE: https://github.com/lumeland/lume.land/blob/main/plugins/liquid.md#2025-04-21_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n--- title: Welcome to my page intro: This is my first post using Lume. I hope you like it! ---\n\n<html>\n  <head>\n    <title>{{ title }}</title>\n  </head>\n\n  <body>\n    <p>{{ intro }}</p>\n  </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Installing JSX Plugin in Lume Configuration\nDESCRIPTION: This snippet shows how to import and use the JSX plugin in the Lume configuration file. It demonstrates the basic setup required to enable JSX support in a Lume project.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/plugins/jsx.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport lume from \"lume/mod.ts\";\nimport jsx from \"lume/plugins/jsx.ts\";\n\nconst site = lume();\n\nsite.use(jsx(/* Options */));\n\nexport default site;\n```\n\n----------------------------------------\n\nTITLE: Advanced Upload Folder Configuration in LumeCMS\nDESCRIPTION: Shows how to configure an upload folder with additional options such as name, description, and store using an object passed to cms.upload(). This allows for more detailed customization of the upload folder.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/cms/configuration/uploads.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ncms.upload({\n  name: \"images\",\n  description: \"Here you can manage all images of your posts\",\n  store: \"src:images\",\n});\n```\n\n----------------------------------------\n\nTITLE: Supporting Both TOML Pages and Assets in Lume\nDESCRIPTION: Demonstrates a configuration that supports both TOML pages and assets by using a page sub-extension pattern, where *.page.toml files are treated as pages while regular *.toml files are treated as assets.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/docs/core/loaders.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// Use \"*.page.toml\" to load pages.\nsite.loadPages([\".toml\"], {\n  loader: tomlLoader,\n  pageSubExtension: \".page\",\n});\n\n// Use \"*.toml\" to load assets\nsite.loadAssets([\".toml\"], tomlLoader);\n```\n\n----------------------------------------\n\nTITLE: Implementing Navigation Between Related Pages in Vento\nDESCRIPTION: Example showing how to create previous/next navigation links for pages with the same tag using search.previousPage() and search.nextPage().\nSOURCE: https://github.com/lumeland/lume.land/blob/main/plugins/search.md#2025-04-21_snippet_11\n\nLANGUAGE: vento\nCODE:\n```\n<h2>More articles tagged as \"html\"</h2>\n\n{{ set post = search.previousPage(url, \"html\") }}\n\n{{ if post }}\n  <a href=\"{{ post.url }}\" rel=\"prev\">← {{ post.title }}</a>\n{{ /if }}\n\n{{ set post = search.nextPage(url, \"html\") }}\n\n{{ if post }}\n  <a href=\"{{ post.url }}\" rel=\"next\">{{ post.title }} →</a>\n{{ /if }}\n```\n\n----------------------------------------\n\nTITLE: Example of npm and JSR Imports in JavaScript\nDESCRIPTION: Shows how to import modules from npm and JSR in JavaScript files that will be processed by the esbuild plugin. These imports will be converted to esm.sh URLs.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/plugins/esbuild.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport classNames from \"npm:classnames\";\nimport { concat } from \"jsr:@std/bytes/concat\";\n```\n\n----------------------------------------\n\nTITLE: Configuring Sitemap Plugin Options in Lume\nDESCRIPTION: Demonstrates how to customize the sitemap plugin with options like filename, query filters, and sorting preferences for the generated sitemap.xml file.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/plugins/sitemap.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nsite.use(sitemap({\n  filename: \"my-sitemap.xml\", // to change the sitemap filename\n  query: \"isRedirect!=true\", // by default select all pages but the redirected ones.\n  sort: \"date=desc\", // To sort by data in ascendent order\n}));\n```\n\n----------------------------------------\n\nTITLE: Installing and Configuring UnoCSS Plugin in Lume\nDESCRIPTION: JavaScript configuration code that shows how to import and use the UnoCSS plugin in a Lume project's _config.ts file. It demonstrates the basic setup for integrating UnoCSS with Lume.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/plugins/unocss.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport lume from \"lume/mod.ts\";\nimport unocss from \"lume/plugins/unocss.ts\";\n\nconst site = lume();\n\nsite.use(unocss(/* Options */));\n\nexport default site;\n```\n\n----------------------------------------\n\nTITLE: Installing On-demand Plugin in Lume Configuration\nDESCRIPTION: Configuration code showing how to import and use the on-demand plugin in the Lume site configuration file.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/plugins/on_demand.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport lume from \"lume/mod.ts\";\nimport onDemand from \"lume/plugins/on_demand.ts\";\n\nconst site = lume();\n\nsite.use(onDemand(/* Options */));\n\nexport default site;\n```\n\n----------------------------------------\n\nTITLE: Basic View Configuration in TypeScript CMS Collection\nDESCRIPTION: Example showing how to configure fields with view assignments in a CMS collection. The fields 'published' and 'draft' are assigned to an 'editor' view while other fields remain always visible.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/cms/configuration/views.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ncms.collection({\n  name: \"posts\",\n  store: \"src:posts/*.md\",\n  fields: [\n    {\n      name: \"title\",\n      type: \"text\",\n    },\n    {\n      name: \"published\",\n      type: \"datetime\",\n      view: \"editor\",\n    },\n    {\n      name: \"draft\",\n      type: \"checkbox\",\n      view: \"editor\",\n    },\n    {\n      name: \"content\",\n      type: \"markdown\",\n    },\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Page Object Access Example\nDESCRIPTION: Demonstrates how to access various properties of a page object within a processor function.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/docs/core/processors.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nfunction process(pages) {\n  for (const page of pages) {\n    page.content; // The content of the page\n    page.document; // The parsed HTML code, to use the DOM API\n    page.src; // The info about the source file of this page\n    page.data; // All data available for this page (front matter merged with _data)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Deployment Tasks in deno.json for Lume Sites\nDESCRIPTION: JSON configuration that defines Deno tasks for building, serving, and deploying a Lume site using rsync. It includes a custom deploy task that builds the site and uploads it to a server.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/docs/advanced/deployment.md#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"importMap\": \"import_map.json\",\n  \"tasks\": {\n    \"build\": \"deno task lume\",\n    \"serve\": \"deno task lume -s\",\n    \"lume\": \"echo \\\"import 'lume/cli.ts'\\\" | deno run -A -\",\n    \"deploy\": \"deno task build && rsync -r _site/ user@my-site.com:~/www\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Advanced Robots Configuration with Path-Specific Rules\nDESCRIPTION: This configuration demonstrates how to use the rules array for more specific robots.txt directives, such as denying access to the /admin folder for all user agents.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/plugins/robots.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// Deny access to the /admin folder to all user agents\nsite.use(robots({\n  rules: [\n    {\n      userAgent: \"*\",\n      disallow: \"/admin\",\n    },\n  ],\n}));\n```\n\n----------------------------------------\n\nTITLE: Installing and Configuring Brotli Plugin in Lume\nDESCRIPTION: This snippet demonstrates how to import and use the Brotli plugin in a Lume project's _config.ts file. It shows the basic setup and how to customize the file extensions to be compressed.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/plugins/brotli.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport lume from \"lume/mod.ts\";\nimport brotli from \"lume/plugins/brotli.ts\";\n\nconst site = lume();\n\nsite.use(brotli());\n\nexport default site;\n```\n\nLANGUAGE: javascript\nCODE:\n```\nsite.use(\n  brotli({\n    extensions: [\".html\", \".css\"],\n  }),\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring Shutdown Middleware for Production in Lume\nDESCRIPTION: Code for setting up the shutdown middleware in a production environment using Lume's HTTP Server. This creates a server entry point that displays a maintenance page when the site is shut down.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/plugins/shutdown.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Server from \"lume/core/server.ts\";\nimport shutdown from \"lume/middlewares/shutdown.ts\";\n\nconst server = new Server();\n\nserver.use(shutdown({\n  // The page to show. /503.html by default.\n  page: \"/maintenance.html\",\n\n  // The Retry-After header content in seconds. 24 hours by default.\n  retryAfter: 60 * 60,\n}));\n\nserver.start();\n```\n\n----------------------------------------\n\nTITLE: HTML URL Transformation Example with resolve_urls Plugin\nDESCRIPTION: Shows how the resolve_urls plugin transforms markdown file links to their final URLs in HTML, including the input and output comparison.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/plugins/resolve_urls.md#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\nGo to <a href=\"/about-us.md\">About us</a>\n```\n\nLANGUAGE: html\nCODE:\n```\nGo to <a href=\"/about-us/\">About us</a>\n```\n\n----------------------------------------\n\nTITLE: Running Scripts Programmatically in Lume\nDESCRIPTION: Shows how to execute scripts programmatically using the site.run() function instead of the CLI.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/docs/core/scripts.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n// Create the script\nsite.script(\"compress\", \"gzip -r _site site.gz\");\n\n// Run it\nsite.run(\"compress\");\n```\n\n----------------------------------------\n\nTITLE: Generated HTML for Responsive Images with Multiple Sources\nDESCRIPTION: This HTML snippet shows the output generated by the Picture plugin for responsive images with multiple sources. It includes <source> elements for different screen sizes and formats, with appropriate srcset and media attributes.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/plugins/picture.md#2025-04-21_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<picture>\n  <!-- version for small devices -->\n  <source\n    srcset=\"/flowers-1000w.avif, /flowers-1000w@2.avif 2x\"\n    type=\"image/avif\"\n    media=\"(min-width: 600px)\"\n  >\n  <source\n    srcset=\"/flowers-1000w.webp, /flowers-1000w@2.webp 2x\"\n    type=\"image/webp\"\n    media=\"(min-width: 600px)\"\n  >\n  <source\n    srcset=\"/flowers-1000w.jpg, /flowers-1000w@2.jpg 2x\"\n    media=\"(min-width: 600px)\"\n  >\n\n  <!-- version for big screens -->\n  <source\n    srcset=\"/flowers-1000w.avif, /flowers-1000w@2.avif 2x\"\n    type=\"image/avif\"\n  >\n  <source\n    srcset=\"/flowers-1000w.webp, /flowers-1000w@2.webp 2x\"\n    type=\"image/webp\"\n  >\n  <source srcset=\"/flowers-1000w.jpg, /flowers-1000w@2.jpg 2x\">\n\n  <!-- default image -->\n  <img src=\"/flowers-300w.jpg\" srcset=\"/flowers-300w@2.jpg 2x\">\n</picture>\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic Auth for Local Development\nDESCRIPTION: Configuration code for implementing basic authentication in Lume's development server through the _config.ts file.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/plugins/basic_auth.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport lume from \"lume/mod.ts\";\nimport basicAuth from \"lume/middlewares/basic_auth.ts\";\n\nconst site = lume({\n  server: {\n    middlewares: [\n      basicAuth({\n        users: { demo: \"1234\" },\n      }),\n    ],\n  },\n});\n\nexport default site;\n```\n\n----------------------------------------\n\nTITLE: Using HTML Attributes Filter in Templates\nDESCRIPTION: Demonstrates how to use the attr filter to manage HTML attributes in VTO templates and JavaScript. The example shows handling link attributes including classes.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/plugins/attributes.md#2025-04-21_snippet_0\n\nLANGUAGE: yml\nCODE:\n```\n---\nlink:\n  title: Go to GitHub\n  href: https://github.com\n  target: _blank\n  noopen: false\n  class:\n    - link\n    - link-external\n---\n\n<a {{ link |> attr }}>Hello</a>\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst link = {\n  title: \"Go to GitHub\"\n  href: \"https://github.com\"\n  target: \"_blank\"\n  noopen: false\n  class: [\"link\", \"link-external\"]\n}\n\nexport default function (_, { attr }) {\n  return `<a ${ attr(link) }>Hello</a>`;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Object List Field in TypeScript\nDESCRIPTION: TypeScript configuration for creating an object-list field to manage author data in the CMS.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/cms/fields/object-list.md#2025-04-21_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\n{\n  name: \"authors\",\n  type: \"object-list\",\n  fields: [\n    \"name: text\",\n    \"surname: text\",\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Complete Feed Plugin Configuration Example\nDESCRIPTION: This code snippet shows a comprehensive example of all available configuration options for the Feed plugin, including output files, query parameters, sorting, limiting results, and detailed feed and item information mapping.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/plugins/feed.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nsite.use(feed({\n  output: [\"/posts.rss\", \"/posts.json\"], // The file or files that must be generated\n  query: \"type=post\", // Select only pages of type=post\n  sort: \"date=desc\", // To sort by date in descending order\n  limit: 10, // To show only the 10 first results\n  info: {\n    title: \"My blog\", // The feed title\n    description: \"Where I put my thoughts\", // The feed subtitle\n    published: new Date(), // The publishing date\n    lang: \"en\", // The language of the feed\n    hubs: undefined, // The WebSub hubs for the feed\n    generator: true, // Set `true` to automatically generate the \"Lume {version}\"\n    authorName: \"Óscar Otero\", // The author of the site\n    authorUrl: \"https://oscarotero.com\", // The URL of the author\n  },\n  items: {\n    title: \"=title\", // The title of every item\n    description: \"=excerpt\", // The description of every item\n    published: \"=date\", // The publishing date of every item\n    updated: undefined, // The last update of every item\n    content: \"=children\", // The content of every item\n    lang: \"=lang\", // The language of every item\n    image: \"=cover\", // The image of the item\n    authorName: \"=author.name\", // The author of the article\n    authorUrl: \"=author.url\", // The URL of the author\n  },\n}));\n```\n\n----------------------------------------\n\nTITLE: Creating HTML with UnoCSS Classes in Vento Template\nDESCRIPTION: An example of a Vento template file that uses UnoCSS utility classes. This demonstrates applying a background color class to an H1 element.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/plugins/unocss.md#2025-04-21_snippet_0\n\nLANGUAGE: vento\nCODE:\n```\n---\nlayout: layout.vto\n---\n<h1 class=\"bg-purple-500\">Hello world</h1>\n</style>\n```\n\n----------------------------------------\n\nTITLE: Configuring Date Locales\nDESCRIPTION: Shows how to configure multiple locales for date formatting using date-fns locale imports.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/plugins/date.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport date from \"lume/plugins/date.ts\";\nimport { gl } from \"npm:date-fns/locale/gl\";\nimport { es } from \"npm:date-fns/locale/es\";\n\nsite.use(date({\n  locales: { gl, es },\n}));\n```\n\n----------------------------------------\n\nTITLE: Standard Front Matter Configuration\nDESCRIPTION: Example of using standard Lume variables in front matter format.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/docs/creating-pages/page-data.md#2025-04-21_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\n---\nurl: /welcome.html\ndate: 2021-01-01\nlayout: layouts/post.vto\ndraft: true\ntags: post\n---\n```\n\n----------------------------------------\n\nTITLE: Setting Single Template Engine in YAML Front Matter\nDESCRIPTION: Example of overriding the default template engine for a Markdown file to use Vento instead using the templateEngine option in YAML front matter.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/docs/core/multiple-template-engines.md#2025-04-21_snippet_0\n\nLANGUAGE: yml\nCODE:\n```\n---\ntitle: My post\ntemplateEngine: vto\n---\n\n# Hello world\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Prism Themes\nDESCRIPTION: Example showing how to configure multiple Prism themes (dark and light modes) with different placeholders in the same CSS file.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/plugins/prism.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport lume from \"lume/mod.ts\";\nimport prism from \"lume/plugins/prism.ts\";\n\nconst site = lume();\n\nsite.use(prism({\n  theme: [\n    {\n      name: \"funky\",\n      cssFile: \"styles.css\",\n      placeholder: \"/* funky-theme-here */\"\n    },\n    {\n      name: \"dark\",\n      cssFile: \"styles.css\",\n      placeholder: \"/* dark-theme-here */\"\n    },\n  ]\n}));\n\nexport default site;\n```\n\n----------------------------------------\n\nTITLE: Implementing beforeSave Event Listener in Lume\nDESCRIPTION: This snippet shows how to add an event listener for the beforeSave event, which is triggered before saving the generated pages.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/docs/core/events.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nsite.addEventListener(\"beforeSave\", () => {\n  console.log(\"All pages are about to be saved\");\n});\n```\n\n----------------------------------------\n\nTITLE: Stopping the Update Process with beforeUpdate Event\nDESCRIPTION: This example demonstrates how to stop the update process by returning false from the beforeUpdate event listener.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/docs/core/events.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nsite.addEventListener(\"beforeUpdate\", () => {\n  return false; // Stop the update\n});\n```\n\n----------------------------------------\n\nTITLE: Installing MDX Plugin with Preact in Lume (JavaScript)\nDESCRIPTION: This snippet demonstrates how to import and use the MDX plugin along with the JSX Preact plugin in a Lume site configuration. It shows the basic setup for enabling MDX support in a Lume project.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/plugins/mdx.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport lume from \"lume/mod.ts\";\nimport jsx from \"lume/plugins/jsx_preact.ts\";\nimport mdx from \"lume/plugins/mdx.ts\";\n\nconst site = lume();\n\nsite.use(jsx());\nsite.use(mdx(/* Options */));\n\nexport default site;\n```\n\n----------------------------------------\n\nTITLE: Loading Binary Asset Files in Lume\nDESCRIPTION: This snippet demonstrates how to load binary files (such as webp images) as asset pages using a binary loader, ensuring they're properly processed without text encoding issues.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/docs/core/concepts.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// Load binary files\nsite.loadAssets([\".webp\"], binaryLoader);\n```\n\n----------------------------------------\n\nTITLE: Installing Pagefind Plugin in Lume Configuration\nDESCRIPTION: Basic setup code to import and use the Pagefind plugin in a Lume site configuration file.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/plugins/pagefind.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport lume from \"lume/mod.ts\";\nimport pagefind from \"lume/plugins/pagefind.ts\";\n\nconst site = lume();\n\nsite.use(pagefind(/* Options */));\n\nexport default site;\n```\n\n----------------------------------------\n\nTITLE: Enabling Blocks Field in Lume CMS - TypeScript Configuration\nDESCRIPTION: Code snippet showing how to enable and configure the blocks field type in Lume CMS by importing and using the necessary modules.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/cms/fields/blocks.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport lumeCMS from \"lume/cms/mod.ts\";\nimport blocks from \"lume/cms/fields/blocks.ts\";\n\nconst cms = lumeCMS();\n\n// Enable blocks\ncms.use(blocks());\n\nexport default cms;\n```\n\n----------------------------------------\n\nTITLE: URL Filter with Query Parameters for Multiple Pages\nDESCRIPTION: Shows how to select specific pages generated by source files that produce multiple outputs using query parameters.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/plugins/url.md#2025-04-21_snippet_2\n\nLANGUAGE: vento\nCODE:\n```\n<a href=\"{{ '~/about-us.page.js(lang=en)' |> url }}\">\n\n<!-- Will be converted to -->\n<a href=\"/en/about-us/\">\n```\n\n----------------------------------------\n\nTITLE: Basic URL Path Generation Example - TXT\nDESCRIPTION: Demonstrates the default URL generation pattern in Lume where markdown files are converted to pretty URLs with index.html\nSOURCE: https://github.com/lumeland/lume.land/blob/main/docs/creating-pages/urls.md#2025-04-21_snippet_0\n\nLANGUAGE: txt\nCODE:\n```\nposts/my-first-post.md  =>  /posts/my-first-post/index.html\n```\n\n----------------------------------------\n\nTITLE: Converting JavaScript Module to Data Object\nDESCRIPTION: Shows how a JavaScript module with exports gets converted to Lume's Data object structure with the default export stored as content.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/docs/advanced/the-data-model.md#2025-04-21_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nexport const title = \"Title of the page\";\n\nexport default function ({ title }) {\n  return `<h1>${title}</h1>`;\n}\n```\n\nLANGUAGE: js\nCODE:\n```\n{\n  title: \"Title of the page\",\n  content: function ({title}) {\n    return `<h1>${title}</h1>`;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Router Middleware for Local Development in Lume\nDESCRIPTION: This snippet demonstrates how to configure Lume's development server to use a custom router middleware. It imports a router from an external file and adds it to the server configuration in the Lume config file.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/plugins/router.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport lume from \"lume/mod.ts\";\nimport myRouter from \"./my-router.ts\";\n\nconst site = lume({\n  server: {\n    middlewares: [myRouter.middleware()],\n  },\n});\n\nexport default site;\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Helper Tag in Lume\nDESCRIPTION: Demonstrates how to create a custom helper tag for uppercase text conversion\nSOURCE: https://github.com/lumeland/lume.land/blob/main/docs/configuration/filters.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nsite.helper(\"uppercase\", (text) => text.toUpperCase(), { type: \"tag\" });\n```\n\nLANGUAGE: html\nCODE:\n```\n{{ uppercase user.name }}\n```\n\n----------------------------------------\n\nTITLE: Configuring Automatic Document Naming in LumeCMS (TypeScript)\nDESCRIPTION: This example shows how to use the documentName option to automatically generate file names based on field values when creating new items in a collection.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/cms/configuration/collections.md#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\ncms.collection({\n  name: \"posts\",\n  store: \"src:posts/*.md\",\n  fields: [\n    \"title: text!\",\n    \"content: markdown\",\n  ],\n  documentName: \"{title}.md\",\n});\n```\n\n----------------------------------------\n\nTITLE: Manual Pagination Implementation in JavaScript for Lume\nDESCRIPTION: This code snippet shows a manual approach to implementing pagination in Lume using a generator function. It selects pages, groups them into sets of 10, and yields page objects with appropriate data for rendering.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/docs/core/searching.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexport default function* ({ search }) {\n  // Select the pages\n  const pages = search.pages(\"category=music\");\n  const totalResults = pages.length;\n\n  let currentPage = 1;\n\n  while (pages.length) {\n    // Extract the 10 first results\n    const results = pages.splice(0, 10);\n\n    yield {\n      layout: \"layouts/post-list.vto\",\n      url: `/music/page-${currentPage}/`,\n      results,\n      pagination: {\n        currentPage,\n        totalResults,\n      },\n    };\n\n    // Increase the page number\n    ++currentPage;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Filtering Pages by URL Pattern in Vento\nDESCRIPTION: Shows how to list all pages from a specific directory by filtering URLs that start with a given path.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/plugins/search.md#2025-04-21_snippet_9\n\nLANGUAGE: vento\nCODE:\n```\n{{ for option of search.pages(\"url^=/blog/\") }}\n<a href=\"{{ option.url }}\">\n  {{ option.title }}\n</a>\n{{ /for }}\n```\n\n----------------------------------------\n\nTITLE: Using Non-JSX Components in MDX (Markdown)\nDESCRIPTION: This snippet shows how to use non-JSX components (like Nunjucks) in MDX files by using the dangerouslySetInnerHTML attribute. It's necessary when working with components that return HTML strings instead of JSX.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/plugins/mdx.md#2025-04-21_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n<div dangerouslySetInnerHTML={\n  { __html: comp.title({ text: \"Hello world\" }) }\n} />\n```\n\n----------------------------------------\n\nTITLE: Illustrating Subdirectory Structure Preservation in Lume\nDESCRIPTION: This example demonstrates how Lume maintains the subdirectory structure of the source files when generating the output HTML files.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/docs/creating-pages/page-files.md#2025-04-21_snippet_1\n\nLANGUAGE: txt\nCODE:\n```\n.\n├── index.md        => /index.html\n└── documentation\n    └── doc1.md     => /documentation/doc1/index.html\n    └── doc2.md     => /documentation/doc2/index.html\n```\n\n----------------------------------------\n\nTITLE: Configuring Code Field in Lume CMS (TypeScript)\nDESCRIPTION: This snippet demonstrates how to configure a 'code' type field in Lume CMS. The field is named 'content' and is set to type 'code', which will use a CodeMirror editor in the UI for various programming languages.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/cms/fields/code.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  name: \"content\",\n  type: \"code\",\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Template Engines in YAML\nDESCRIPTION: Demonstration of using multiple template engines in sequence by specifying an array in templateEngine, processing the file first with Vento then with Markdown.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/docs/core/multiple-template-engines.md#2025-04-21_snippet_1\n\nLANGUAGE: yml\nCODE:\n```\n---\ntitle: My post\ntemplateEngine: [vto, md]\n---\n\n# Hello, this is the post title {{ title }}\n```\n\n----------------------------------------\n\nTITLE: Searching for Static Files by Pattern in Vento\nDESCRIPTION: Demonstrates how to find all static files matching a pattern (such as CSS files) that will be copied to the destination folder.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/plugins/search.md#2025-04-21_snippet_14\n\nLANGUAGE: vento\nCODE:\n```\nThis site uses the following CSS files:\n\n<ul>\n  {{ for file of search.files(\"*.css\") }}\n  <a href=\"{{ file }}\">\n    {{ file }}\n  </a>\n  {{ /for }}\n</ul>\n```\n\n----------------------------------------\n\nTITLE: Installing Sitemap Plugin in Lume Configuration\nDESCRIPTION: Shows how to import and use the sitemap plugin in a Lume _config.ts file. This basic implementation adds sitemap functionality with default options.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/plugins/sitemap.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport lume from \"lume/mod.ts\";\nimport sitemap from \"lume/plugins/sitemap.ts\";\n\nconst site = lume();\n\nsite.use(sitemap(/* Options */));\n\nexport default site;\n```\n\n----------------------------------------\n\nTITLE: Linking Tailwind CSS in HTML templates\nDESCRIPTION: Example of how to reference the CSS file containing Tailwind directives in your main HTML template. This ensures the Tailwind styles are applied to your pages.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/plugins/tailwindcss.md#2025-04-21_snippet_2\n\nLANGUAGE: vento\nCODE:\n```\n// index.html | main.vto | else\n<!doctype html>\n<html>\n  <head>\n    <link rel=\"stylesheet\" href=\"/styles.css\">\n  </head>\n...\n```\n\n----------------------------------------\n\nTITLE: Renaming Google Fonts in Lume Configuration\nDESCRIPTION: Configuration example showing how to rename Google fonts by passing an object with name:url pairs. This allows referencing the fonts with custom names in CSS.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/plugins/google_fonts.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nsite.use(googleFonts({\n  fonts: {\n    display: \"https://fonts.google.com/share?selection.family=Playfair+Display:ital,wght@0,400..900;1,400..900\",\n    text: \"https://fonts.google.com/share?selection.family=Roboto:ital,wght@0,100;0,300;0,400;0,500;0,700;0,900;1,100;1,300;1,400;1,500;1,700;1,900\"\n}}));\n```\n\n----------------------------------------\n\nTITLE: Configuring Cache Busting for Local Development\nDESCRIPTION: Configuration code for implementing cache busting middleware in Lume's development server through the _config.ts file. Sets up the middleware as part of the server configuration options.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/plugins/cache_busting.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport lume from \"lume/mod.ts\";\nimport cacheBusting from \"lume/middlewares/cache_busting.ts\";\n\nconst site = lume({\n  server: {\n    middlewares: [cacheBusting()],\n  },\n});\n\nexport default site;\n```\n\n----------------------------------------\n\nTITLE: Installing KaTeX Plugin in Lume Configuration\nDESCRIPTION: Demonstrates how to import and use the KaTeX plugin in the Lume _config.ts file. This setup enables KaTeX rendering for the entire site.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/plugins/katex.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport lume from \"lume/mod.ts\";\nimport katex from \"lume/plugins/katex.ts\";\n\nconst site = lume();\n\nsite.use(katex(/* Options */));\n\nexport default site;\n```\n\n----------------------------------------\n\nTITLE: Basic Markdown Plugin Configuration in JavaScript\nDESCRIPTION: Basic setup of Markdown plugin configuration in Lume's _config.ts file.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/plugins/markdown.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport lume from \"lume/mod.ts\";\n\n// Markdown plugin configuration\nconst markdown = {};\n\nconst site = lume({}, { markdown });\n\nexport default site;\n```\n\n----------------------------------------\n\nTITLE: Creating a JSX Layout in Lume\nDESCRIPTION: This TSX code shows how to create a layout using JSX in Lume. It demonstrates the use of the 'children' prop to render page content within the layout structure.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/plugins/jsx.md#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nexport default ({ title, children }: Lume.Data, helpers: Lume.Helpers) => (\n  <html>\n    <head>\n      <title>{title}</title>\n    </head>\n    <body>\n      {children}\n    </body>\n  </html>\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring Image Transformation Cache Settings\nDESCRIPTION: JavaScript example demonstrating how to disable or customize the cache location for transformed images.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/plugins/transform_images.md#2025-04-21_snippet_7\n\nLANGUAGE: js\nCODE:\n```\nimport lume from \"lume/mod.ts\";\nimport transformImages from \"lume/plugins/transform_images.ts\";\n\nconst site = lume();\n\nsite.use(transformImages({\n  cache: false, // Disable cache\n}));\n\nexport default site;\n```\n\n----------------------------------------\n\nTITLE: Defining JSON-LD Data with TypeScript\nDESCRIPTION: Example of defining JSON-LD structured data using TypeScript, leveraging the Lume.Data[\"jsonLd\"] type for type checking and autocompletion. This demonstrates how to use TypeScript for more robust JSON-LD definitions in Lume.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/plugins/json_ld.md#2025-04-21_snippet_5\n\nLANGUAGE: ts\nCODE:\n```\nexport const jsonLd: Lume.Data[\"jsonLd\"] = {\n  \"@type\": \"WebSite\",\n  url: \"/\",\n  headline: \"Óscar Otero - Web designer and developer\",\n  description: \"I'm just a designer and web developer\",\n  name: \"Óscar Otero\",\n  author: {\n    \"@type\": \"Person\",\n    name: \"Óscar Otero\",\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Percentage Field Component\nDESCRIPTION: Complete implementation of a percentage field component showing how to handle field info, generate names and IDs, and create the HTML structure using template literals.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/cms/configuration/custom_fields.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ncustomElements.define(\n  \"percentage-field\",\n  class extends Component {\n    init() {\n      // Get the field info\n      const { schema, value, namePrefix } = this;\n\n      // Generate the name of the input and the id\n      const name = `${namePrefix}.${schema.name}`;\n      const id = `field_${name}`;\n\n      // Print the HTML code\n      this.innerHTML = `\n      <label for=\"${id}\">${schema.label}</label>\n      <input id=\"${id}\" type=\"number\" value=\"${value}\" min=0 max=100 name=\"${name}>\n    `;\n    }\n  },\n);\n```\n\n----------------------------------------\n\nTITLE: Registering a TOML Page Loader in Lume\nDESCRIPTION: Demonstrates how to register a TOML loader for page files in Lume. This allows TOML files to be used as page content that will be rendered as HTML.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/docs/core/loaders.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nsite.loadPages([\".toml\"], tomlLoader);\n```\n\n----------------------------------------\n\nTITLE: Installing Picture and Transform Images Plugins in Lume\nDESCRIPTION: This code snippet demonstrates how to import and use the Picture and Transform Images plugins in a Lume project's _config.ts file. It's important to register the Picture plugin exactly above the Transform Images plugin.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/plugins/picture.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport lume from \"lume/mod.ts\";\nimport picture from \"lume/plugins/picture.ts\";\nimport transformImages from \"lume/plugins/transform_images.ts\";\n\nconst site = lume();\n\nsite.use(picture(/* Options */));\nsite.use(transformImages());\n\nexport default site;\n```\n\n----------------------------------------\n\nTITLE: Configuring FFF Plugin with Date Mapping (JavaScript)\nDESCRIPTION: This snippet shows how to configure the FFF plugin to map Lume's 'date' variable to the FFF standard's 'published' variable. It demonstrates the use of the Flavor Transform feature to modify page data according to the FFF specification.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/plugins/fff.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nsite.use(fff({\n  date: \"published\", // Create the variable 'published' from the variable 'date'\n}));\n```\n\n----------------------------------------\n\nTITLE: Configuring JSON Output for Check URLs Plugin (JavaScript)\nDESCRIPTION: This code demonstrates how to configure the Check URLs plugin to export the list of broken links to a JSON file. It sets both external checking and a custom output file.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/plugins/check_urls.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nsite.use(checkUrls({\n  external: true,\n  output: \"_broken_links.json\",\n}));\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Shared Layout Configuration in YAML\nDESCRIPTION: Defines a base _data.yml file that sets a common layout template for all pages in the directory and subdirectories.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/docs/getting-started/shared-data.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nlayout: layout.vto\n```\n\n----------------------------------------\n\nTITLE: Importing and Setting Up the transform_images Plugin in Lume\nDESCRIPTION: Example configuration for importing and initializing the transform_images plugin in a Lume project's _config.ts file.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/plugins/transform_images.md#2025-04-21_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nimport lume from \"lume/mod.ts\";\nimport transformImages from \"lume/plugins/transform_images.ts\";\n\nconst site = lume();\n\nsite.use(transformImages(/* Options */));\n\nexport default site;\n```\n\n----------------------------------------\n\nTITLE: Creating Paginated List of API Pages in Lume\nDESCRIPTION: Script that searches for all API-generated pages and creates pagination. This initial version may fail due to render order issues.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/docs/core/render-order.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexport const layout = \"layouts/api-pagination.vto\";\n\nexport default function* ({ search, paginate }) {\n  const items = search.pages(\"type=api\");\n\n  for (const page of paginate(items)) {\n    yield page;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic Authentication for LumeCMS on Deno Deploy\nDESCRIPTION: This code snippet shows how to set up basic authentication for LumeCMS when deploying on Deno Deploy. It retrieves username and password from environment variables and configures the auth method with these credentials.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/cms/deployment/deno-deploy.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst username = Deno.env.get(\"USERNAME\");\nconst password = Deno.env.get(\"PASSWORD\");\n\nconst cms = lumeCMS({\n  auth: {\n    method: \"basic\",\n    users: {\n      [username]: password,\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Asynchronous Nunjucks Include (HTML/Nunjucks)\nDESCRIPTION: This example demonstrates the correct way to use asynchronous includes in Nunjucks templates within Lume. It shows the use of 'ifAsync' for conditional asynchronous inclusion of another template.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/plugins/nunjucks.md#2025-04-21_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n{% ifAsync includeHeader %} {% include \"header.njk\" %} {% endif %}\n```\n\n----------------------------------------\n\nTITLE: Configuring Base Path with Custom Location\nDESCRIPTION: Example showing how to configure the base_path plugin with a specific website location to handle subdirectory paths.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/plugins/base_path.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport lume from \"lume/mod.ts\";\nimport basePath from \"lume/plugins/base_path.ts\";\n\nconst site = lume({\n  location: new URL(\"https://my-site.com/blog/\"), // ← Note the path /blog/\n});\n\nsite.use(basePath());\n```\n\n----------------------------------------\n\nTITLE: Extension-based File Copying in JavaScript\nDESCRIPTION: Examples of copying files based on their extensions using arrays of file extensions.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/docs/configuration/copy-static-files.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// Copy all image files\nsite.copy([\".jpg\", \".gif\", \".png\"]);\n```\n\n----------------------------------------\n\nTITLE: Configuring Deno KV Storage in LumeCMS\nDESCRIPTION: Example demonstrating how to set up Deno KV (Key-Value) database storage in LumeCMS. Requires the unstable KV API flag to be enabled in deno.json.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/cms/configuration/storage.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport lumeCMS from \"lume/cms/mod.ts\";\nimport Kv from \"lume/cms/storage/kv.ts\";\n\nconst cms = lumeCMS();\nconst kv = await Deno.openKv();\n\ncms.storage(\"my_values\", new Kv({ kv }));\n\nexport default cms;\n```\n\n----------------------------------------\n\nTITLE: Accessing Spreadsheet Data in 'First' Sheet Mode\nDESCRIPTION: Example of accessing data from a spreadsheet in 'first' mode, where only the first sheet is returned. This demonstrates looping through rows and columns to create a table.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/plugins/sheets.md#2025-04-21_snippet_2\n\nLANGUAGE: vento\nCODE:\n```\n<table>\n  <tr>\n    {{ for key, column of people[0] }}\n      <th>{{ key }}</th>\n    {{ /for }}\n  </tr>\n\n  {{ for row of people }}\n    <tr>\n      {{ for key, column of row }}\n        <td>{{ column }}</td>\n      {{ /for }}\n    </tr>\n  {{ /for }}\n</table>\n```\n\n----------------------------------------\n\nTITLE: Configuring a Document with Extra Options in LumeCMS\nDESCRIPTION: This example shows how to define a document using an object with additional configuration options. It includes the basic settings like name, store, and fields, and can be extended with more options.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/cms/configuration/documents.md#2025-04-21_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\ncms.document({\n  name: \"landing-page\",\n  store: \"src:index.yml\",\n  fields: [\n    \"title: text\",\n    \"subtitle: text\",\n    \"content: markdown\",\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Using Markdown Filter in Vento Templates\nDESCRIPTION: Examples of using the md filter to render markdown content in Vento templates.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/plugins/markdown.md#2025-04-21_snippet_7\n\nLANGUAGE: vento\nCODE:\n```\n<!-- Render to HTML code -->\n<div>{{ text |> md }}</div>\n\n<!-- Single line rendering, without the paragraph wrap: -->\n<p>{{ text |> md(true) }}</p>\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Snippets to Markdown Field in JavaScript\nDESCRIPTION: Configuration for a markdown field with custom snippets. Defines two snippets: a copyright notice and a keyboard input wrapper that uses a placeholder for selected text.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/cms/fields/markdown.md#2025-04-21_snippet_3\n\nLANGUAGE: js\nCODE:\n```\n{\n  name: \"content\",\n  type: \"markdown\",\n  snippets: [\n    {\n      label: \"copyright\",\n      value: \"© Acme Inc, 2025\"\n    },\n    {\n      label: \"Keyboard input\",\n      value: \"<kbd>{$}</kbd>\"\n    },\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Fonts for Satori\nDESCRIPTION: JavaScript configuration example showing how to set up custom fonts for Satori, including loading font files and specifying font properties.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/plugins/og_images.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { read } from \"lume/core/utils/read.ts\";\n\n/** Example with the default values */\nsite.use(openGraphImages({\n  satori: {\n    width: 1200,\n    height: 600,\n    fonts: [\n      {\n        name: \"inter\",\n        weight: 400,\n        style: \"normal\",\n        data: await read(\n          \"https://cdn.jsdelivr.net/npm/@xz/fonts@1/serve/src/inter/Inter-Regular.woff\",\n          true,\n        ),\n      },\n      {\n        name: \"inter\",\n        weight: 700,\n        style: \"normal\",\n        data: await read(\n          \"https://cdn.jsdelivr.net/npm/@xz/fonts@1/serve/src/inter/Inter-SemiBold.woff\",\n          true,\n        ),\n      },\n    ],\n  },\n}));\n```\n\n----------------------------------------\n\nTITLE: Using Nunjucks Filter in HTML Template (HTML/Nunjucks)\nDESCRIPTION: This snippet illustrates the use of the 'njk' filter in a Nunjucks template. It shows how to render a string value as a Nunjucks template and output it as HTML, passing additional data to the filter.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/plugins/nunjucks.md#2025-04-21_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n---\ndata:\n  username: Oscar\ntext: \"Hello {{ username }}\"\n---\n\n<!-- Render a string -->\n<div>{{ text | njk(data) | safe }}<div>\n```\n\n----------------------------------------\n\nTITLE: Using the Terser Filter in Templates\nDESCRIPTION: Shows how to use the 'terser' filter in template engines to transform JavaScript code. This example uses the Vento template syntax to define JavaScript code and then minify it.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/plugins/terser.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n{{ set js }}\n  console.log(\"Hello, the JavaScript world!\");\n{{ /set }}\n\n<script type=\"module\">\n  {{ js |> terser }}\n</script>\n```\n\n----------------------------------------\n\nTITLE: HTML Preprocessor Implementation\nDESCRIPTION: Demonstrates creating a preprocessor to add filename data to pages before rendering.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/docs/core/processors.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nsite.preprocess([\".html\"], (pages) => {\n  for (const page of pages) {\n    page.data.filename = page.src.path + page.src.ext;\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Registering a TOML Data Loader in Lume\nDESCRIPTION: Shows how to register a TOML loader for data files in Lume's configuration. This enables the use of TOML format for data files.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/docs/core/loaders.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nsite.loadData([\".toml\"], tomlLoader);\n```\n\n----------------------------------------\n\nTITLE: Adding Canonical URL with URL Filter\nDESCRIPTION: SEO best practice example showing how to add a canonical URL to a page's head section using the url filter with absolute URLs.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/plugins/url.md#2025-04-21_snippet_4\n\nLANGUAGE: vento\nCODE:\n```\n<link rel=\"canonical\" href=\"{{ url |> url(true) }}\">\n```\n\n----------------------------------------\n\nTITLE: Configuring Pretty URLs in TypeScript\nDESCRIPTION: Example showing how to disable pretty URLs in the generated site.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/docs/configuration/config-file.md#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst site = lume({\n  prettyUrls: false, // Disable pretty urls\n});\n```\n\n----------------------------------------\n\nTITLE: Advanced File Ignoring with Pattern Matching\nDESCRIPTION: Use a function-based approach to ignore files based on pattern matching. This example shows how to ignore all .md files within a specific directory.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/docs/configuration/ignore-files.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nsite.ignore((path) => {\n  return path.match(/^\\/draft\\/.*\\.md$/) !== null;\n});\n```\n\n----------------------------------------\n\nTITLE: Rendering an Author with Related Articles\nDESCRIPTION: Vento template showing how to display all articles related to an author using the automatic article relation.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/plugins/relations.md#2025-04-21_snippet_4\n\nLANGUAGE: vento\nCODE:\n```\n<article>\n  {{ content }}\n\n  <h2>Articles created:</h2>\n\n  <ul>\n  {{ for item of article }}\n    <li>\n      <a href=\"{{ item.url }}\">\n        {{ item.title }}\n      </a>\n    </li>\n  {{ /for }}\n  </ul>\n</article>\n```\n\n----------------------------------------\n\nTITLE: Initializing TOML Plugin in Lume Configuration\nDESCRIPTION: Demonstrates how to import and enable the TOML plugin in the Lume site configuration file. This setup allows TOML file support for page generation and data management.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/plugins/toml.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport lume from \"lume/mod.ts\";\nimport toml from \"lume/plugins/toml.ts\";\n\nconst site = lume();\n\nsite.use(toml());\n\nexport default site;\n```\n\n----------------------------------------\n\nTITLE: Configuring Precompress Middleware for Lume's HTTP Server in TypeScript\nDESCRIPTION: This snippet demonstrates how to set up the Precompress middleware with Lume's HTTP Server for production use. It creates a server instance and applies the precompress middleware.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/plugins/precompress.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport Server from \"lume/core/server.ts\";\nimport precompress from \"lume/middlewares/precompress.ts\";\n\nconst server = new Server();\n\nserver.use(precompress());\n\nserver.start();\n```\n\n----------------------------------------\n\nTITLE: Overwriting MDX Components in Lume Configuration (JavaScript)\nDESCRIPTION: This code demonstrates how to overwrite default MDX components in the Lume configuration. In this example, it shows how to change all h1 elements to h2 in MDX output.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/plugins/mdx.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport lume from \"lume/mod.ts\";\nimport mdx from \"lume/plugins/mdx.ts\";\nimport jsx from \"lume/plugins/jsx.ts\";\n\nconst site = lume();\n\nsite.use(jsx());\nsite.use(mdx({\n  components: {\n    h1: \"h2\",\n  },\n}));\n\nexport default site;\n```\n\n----------------------------------------\n\nTITLE: Installing Lume Metas Plugin\nDESCRIPTION: Configuration code to import and enable the Metas plugin in a Lume site's _config.ts file.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/plugins/metas.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport lume from \"lume/mod.ts\";\nimport metas from \"lume/plugins/metas.ts\";\n\nconst site = lume();\n\nsite.use(metas(/* Options */));\n\nexport default site;\n```\n\n----------------------------------------\n\nTITLE: Installing Decap CMS Plugin in Lume Configuration\nDESCRIPTION: Code showing how to import and configure the Decap CMS plugin in the Lume _config.ts file.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/plugins/decap_cms.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport lume from \"lume/mod.ts\";\nimport decapCMS from \"lume/plugins/decap_cms.ts\";\n\nconst site = lume();\n\nsite.use(decapCMS(/* Options */));\n\nexport default site;\n```\n\n----------------------------------------\n\nTITLE: PostCSS Includes Example (CSS)\nDESCRIPTION: This CSS snippet demonstrates how to use PostCSS includes functionality. It shows importing CSS files from both the _includes directory and a relative path.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/plugins/postcss.md#2025-04-21_snippet_5\n\nLANGUAGE: css\nCODE:\n```\n/* Import the CSS file from _includes/css/reset.css */\n@import \"css/reset.css\";\n\n/* Import the relative CSS file */\n@import \"./variables.css\";\n```\n\n----------------------------------------\n\nTITLE: Configuring Site Options in LumeCMS\nDESCRIPTION: Configuration of site-specific options including name, description, URL, and homepage content.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/cms/configuration/options.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport lumeCMS from \"lume/cms/mod.ts\";\n\nconst cms = lumeCMS({\n  site: {\n    name: \"My blog CMS\",\n    description: \"Here I can edit the content of my blog\",\n    url: \"https://myblog.com\",\n    body: `\n    <p>Long text, for instructions or other content that you want to make it visible in the homepage</p>\n    `,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Installing modify_urls Plugin in Lume Configuration\nDESCRIPTION: Basic setup code to import and initialize the modify_urls plugin in Lume's configuration file.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/plugins/modify_urls.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport lume from \"lume/mod.ts\";\nimport modifyUrls from \"lume/plugins/modify_urls.ts\";\n\nconst site = lume();\n\nsite.use(modifyUrls(/* Options */));\n\nexport default site;\n```\n\n----------------------------------------\n\nTITLE: File Structure Example for Ordered Pages\nDESCRIPTION: Example directory structure showing how to name files with order prefixes to establish sorting order in Lume.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/docs/core/basename-parsers.md#2025-04-21_snippet_0\n\nLANGUAGE: txt\nCODE:\n```\n.\n├── 1.welcome.md\n├── 2.introduction.md\n├── 3.the-basics.md\n└── 4.advanced.md\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Plugins to ESbuild Using Hooks\nDESCRIPTION: Shows how to extend the esbuild plugin functionality by adding additional plugins through the addEsbuildPlugin hook. This example adds CoffeeScript support to the build process.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/plugins/esbuild.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport lume from \"lume/mod.ts\";\nimport esbuild from \"lume/plugins/esbuild.ts\";\nimport coffeescript from \"npm:esbuild-coffeescript\";\n\nconst site = lume();\n\nsite.use(esbuild());\n\nsite.hooks.addEsbuildPlugin(coffeescript);\n\nexport default site;\n```\n\n----------------------------------------\n\nTITLE: Listing All Unique Values for a Field in Vento\nDESCRIPTION: Shows how to collect and display all unique values for a specific field across pages, such as listing all authors.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/plugins/search.md#2025-04-21_snippet_12\n\nLANGUAGE: vento\nCODE:\n```\n<strong>List of authors:</strong>\n\n<ul>\n  {{ for author of search.values(\"author\") }}\n  <li>\n    {{ author }}\n  </li>\n  {{ /for }}\n</ul>\n```\n\n----------------------------------------\n\nTITLE: Installing Lightning CSS Plugin in Lume\nDESCRIPTION: Basic installation example showing how to import and configure the Lightning CSS plugin in a Lume project's _config.ts file.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/plugins/lightningcss.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport lume from \"lume/mod.ts\";\nimport lightningCss from \"lume/plugins/lightningcss.ts\";\n\nconst site = lume();\n\nsite.use(lightningCss(/* Options */));\n\nexport default site;\n```\n\n----------------------------------------\n\nTITLE: Importing and Configuring Pug Plugin in Lume\nDESCRIPTION: This snippet shows how to import and configure the Pug plugin in the Lume configuration file. The plugin is imported from the Lume plugins directory and then added to the site using the use() method.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/plugins/pug.md#2025-04-21_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nimport lume from \"lume/mod.ts\";\nimport pug from \"lume/plugins/pug.ts\";\n\nconst site = lume();\n\nsite.use(pug(/* Options */));\n\nexport default site;\n```\n\n----------------------------------------\n\nTITLE: Hiding Upload Folder from CMS Homepage in LumeCMS\nDESCRIPTION: Demonstrates how to hide an upload folder from the main menu of the CMS homepage by setting the 'listed' option to false. This is useful for managing upload folders that shouldn't be directly accessible from the main interface.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/cms/configuration/uploads.md#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\ncms.upload({\n  name: \"images\",\n  store: \"src:images\",\n  listed: false, // Hide from the main menu.\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Page Subextension in JavaScript\nDESCRIPTION: Shows how to configure the pageSubExtension option in the module and json plugins to maintain the .page subextension in Lume 2.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/docs/advanced/migrate-to-lume2.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport lume from \"lume/mod.ts\";\n\nconst modules = { pageSubExtension: \".page\" };\nconst json = { pageSubExtension: \".page\" };\n\nconst site = lume({}, { modules, json });\n\nexport default lume;\n```\n\n----------------------------------------\n\nTITLE: Using a JSX Component in a Lume Layout\nDESCRIPTION: This snippet shows how to use a JSX component within a Lume layout. It demonstrates the usage of the 'comp' variable to render the Button component.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/plugins/jsx_preact.md#2025-04-21_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nexport default function ({ comp }) {\n  return (<comp.Button>Click me!</comp.Button>);\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Default Meta Values\nDESCRIPTION: Example YAML configuration showing how to set default meta values in _data.yml file.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/plugins/metas.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nmetas:\n  site: Oscar's blog\n  twitter: \"@misteroom\"\n  fediverse: \"@misteroom@mastodon.gal\"\n  icon: /img/icon.png\n  lang: en\n  generator: true\n```\n\n----------------------------------------\n\nTITLE: Creating a TOML Loader in JavaScript\nDESCRIPTION: Demonstrates how to create a custom loader for TOML files using the Deno standard library. The function reads a file and parses its content as TOML format.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/docs/core/loaders.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { parse } from \"https://deno.land/std/encoding/toml.ts\";\n\nasync function tomlLoader(path) {\n  const content = await Deno.readTextFile(path);\n  return parse(content);\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Additional Prism Languages\nDESCRIPTION: Example showing how to add support for additional programming languages (LESS and Git) to Prism syntax highlighting.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/plugins/prism.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport lume from \"lume/mod.ts\";\nimport prism from \"lume/plugins/prism.ts\";\n\n// Additional prism languages\nimport \"npm:prismjs@1.29.0/components/prism-less.js\";\nimport \"npm:prismjs@1.29.0/components/prism-git.js\";\n\nconst site = lume();\nsite.use(prism());\n\nexport default site;\n```\n\n----------------------------------------\n\nTITLE: Configuring the Redirects Plugin with Custom Output\nDESCRIPTION: This snippet shows how to configure the redirects plugin with a specific output method. In this example, it's set to generate Netlify-compatible redirect files.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/plugins/redirects.md#2025-04-21_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nsite.use(redirects({\n  output: \"netlify\",\n}));\n```\n\n----------------------------------------\n\nTITLE: DOM API Usage for Image Alt Tags\nDESCRIPTION: Shows how to use DOM API to modify HTML content by adding alt attributes to images.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/docs/core/processors.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nsite.process([\".html\"], (pages) => {\n  for (const page of pages) {\n    for (const img of page.document.querySelectorAll(\"img\")) {\n      if (!img.hasAttribute(\"alt\")) {\n        img.setAttribute(\"alt\", \"This is a random alt\");\n      }\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Importing and Using the Redirects Plugin in Lume\nDESCRIPTION: This snippet shows how to import the redirects plugin in the Lume _config.ts file and initialize it. It imports the plugin and adds it to the site instance with the default configuration.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/plugins/redirects.md#2025-04-21_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nimport lume from \"lume/mod.ts\";\nimport redirects from \"lume/plugins/redirects.ts\";\n\nconst site = lume();\n\nsite.use(redirects());\n\nexport default site;\n```\n\n----------------------------------------\n\nTITLE: Adding Description to a Document in LumeCMS\nDESCRIPTION: This snippet demonstrates how to add a description to a document configuration. The description appears below the document name in the CMS interface.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/cms/configuration/documents.md#2025-04-21_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\ncms.document({\n  name: \"landing-page\",\n  description: \"Edit the content of the landing page\",\n  store: \"src:index.yml\",\n  fields: [\n    \"title: text\",\n    \"subtitle: text\",\n    \"content: markdown\",\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: String Array Mode Example\nDESCRIPTION: Demonstration of stringArray mode usage to handle duplicate values.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/docs/core/merged-keys.md#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nmergedKeys:\n  category: array\n\ncategory:\n  - errors\n  - 404\n```\n\n----------------------------------------\n\nTITLE: Markdown-it Options Configuration in TypeScript\nDESCRIPTION: Configuring markdown-it specific options like breaks and xhtmlOut settings.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/plugins/markdown.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// Change markdown-it configuration\nconst markdown = {\n  options: {\n    breaks: false,\n    xhtmlOut: true,\n  },\n};\n\nconst site = lume({}, { markdown });\n```\n\n----------------------------------------\n\nTITLE: Using a JSX Component in a Lume Layout\nDESCRIPTION: This JSX code shows how to use a Lume component within a layout. It demonstrates the use of the 'comp' variable to access and render components.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/plugins/jsx.md#2025-04-21_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nexport default function ({ comp }) {\n  return (<comp.Button>Click me!</comp.Button>);\n}\n```\n\n----------------------------------------\n\nTITLE: Example Nav Menu Structure in JavaScript\nDESCRIPTION: This code snippet illustrates the structure of the object returned by nav.menu(). It shows how the site's page hierarchy is represented in the menu object.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/plugins/nav.md#2025-04-21_snippet_1\n\nLANGUAGE: js\nCODE:\n```\n{\n  data: { basename: \"\", ...Data },\n  children: [\n    {\n      data: { basename: \"articles\", ...Data },\n      children: [\n        {\n          data: { basename: \"first-article\", ...Data },\n        },\n        {\n          data: { basename: \"second-article\" },\n          children: [\n            {\n              data: { basename: \"chapter-1\", ...Data },\n            },\n            {\n              data: { basename: \"chapter-2\", ...Data },\n            },\n          ],\n        },\n      ],\n    },\n  ];\n}\n```\n\n----------------------------------------\n\nTITLE: Layout Creation with JavaScript and TypeScript\nDESCRIPTION: Examples of creating layouts using both JavaScript and TypeScript, showing how to structure HTML templates with dynamic content.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/plugins/modules.md#2025-04-21_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport default ({ title, content }, filters) =>\n  `<html>\n    <head>\n      <title>${title}</title>\n    </head>\n    <body>\n      ${content}\n    </body>\n  </html>`;\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport default ({ title, content }: Lume.Data, helpers: Lume.Helpers) =>\n  `<html>\n    <head>\n      <title>${title}</title>\n    </head>\n    <body>\n      ${content}\n    </body>\n  </html>`;\n```\n\n----------------------------------------\n\nTITLE: Configuring Transform Images Plugin in Lume 2 and 3\nDESCRIPTION: Shows the configuration changes for the Transform Images plugin between Lume 2 and Lume 3. In Lume 3, you need to explicitly add the image files to be processed using site.add() before using the plugin.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/docs/advanced/migrate-to-lume3.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n// Lume 2\nsite.use(transformImages());\n\n// Lume 3\nsite.add(\"/img\"); // Add the files to process\nsite.use(transformImages());\n```\n\n----------------------------------------\n\nTITLE: Language Switcher Menu Implementation\nDESCRIPTION: Vento template code for creating a language switcher menu using the alternates variable.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/plugins/multilanguage.md#2025-04-21_snippet_2\n\nLANGUAGE: vento\nCODE:\n```\n<ul class=\"languages\">\n{{ for alt of alternates }}\n  <li>\n    <a href=\"{{ alt.url }}\" {{ if alt.lang == lang }}aria-current=\"page\"{{ /if }}>\n      {{ alt.title }} ({{ alt.lang }})\n    </a>\n  </li>\n{{ /for }}\n</ul>\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom Order Basename Parser in JavaScript\nDESCRIPTION: JavaScript code for a custom basename parser that extracts numeric order prefixes from filenames and removes them from the final URL path. The parser detects patterns like '1.filename' and converts them to order data.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/docs/core/basename-parsers.md#2025-04-21_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nsite.parseBasename((basename) => {\n  // Regexp to detect the order pattern\n  const match = basename.match(/(\\d+)\\.(.*+)/);\n\n  if (match) {\n    const [, order, basename] = match;\n\n    // Return the order value and the new basename without the prefix\n    return {\n      order: parseInt(order),\n      basename,\n    };\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Importing Remote CSS File (CSS)\nDESCRIPTION: This CSS snippet demonstrates how to import a remote CSS file in your stylesheets using the @import rule. The postcss plugin in Lume supports remote files.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/docs/core/remote-files.md#2025-04-21_snippet_2\n\nLANGUAGE: css\nCODE:\n```\n@import \"./styles.css\";\n```\n\n----------------------------------------\n\nTITLE: Accessing Global Data in JavaScript Component (JavaScript)\nDESCRIPTION: Illustrates how to access global data within a JavaScript component. The global variables are passed as destructured parameters to the component function.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/docs/configuration/data.md#2025-04-21_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nexport default function ({ myNumber, randomNumber }) {\n  return `\n  <p>My number: ${myNumber}</p>\n  <p>Random number: ${randomNumber()}</p>`;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring JSX in JSON\nDESCRIPTION: Shows how to configure the JSX transformer in the deno.json file for Lume 2, addressing the removal of the window.React global object.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/docs/advanced/migrate-to-lume2.md#2025-04-21_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"compilerOptions\": {\n    \"jsx\": \"react-jsx\",\n    \"jsxImportSource\": \"npm:react\",\n    \"types\": [\n      \"https://unpkg.com/@types/react@18.2.37/index.d.ts\"\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Marking Page for On-demand Rendering\nDESCRIPTION: Example of how to mark a page for on-demand rendering using the ondemand flag in the page frontmatter.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/plugins/on_demand.md#2025-04-21_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n---\nlayout: layout.vto\ntitle: This is a title\nondemand: true\n---\n\n<h1>{{ title }}</h1>\n```\n\n----------------------------------------\n\nTITLE: Installing Attributes Plugin in Lume\nDESCRIPTION: Configuration code for importing and enabling the attributes plugin in a Lume site's _config.ts file.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/plugins/attributes.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport lume from \"lume/mod.ts\";\nimport attributes from \"lume/plugins/attributes.ts\";\n\nconst site = lume();\n\nsite.use(attributes());\n\nexport default site;\n```\n\n----------------------------------------\n\nTITLE: Configuring Inline Plugin Attributes\nDESCRIPTION: Demonstrates how to configure the plugin to copy additional attributes from img to svg elements using an array of strings or regular expressions.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/plugins/inline.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nsite.use(inline({\n  copyAttributes: [\"title\", /^data-/], // Copy the \"title\" and all data-* attributes\n}));\n```\n\n----------------------------------------\n\nTITLE: Installing and Configuring Relative URLs Plugin in Lume\nDESCRIPTION: Code snippet showing how to import and use the relative_urls plugin in a Lume _config.ts file. This enables converting all internal URLs to relative paths.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/plugins/relative_urls.md#2025-04-21_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nimport lume from \"lume/mod.ts\";\nimport relativeUrls from \"lume/plugins/relative_urls.ts\";\n\nconst site = lume();\n\nsite.use(relativeUrls());\n\nexport default site;\n```\n\n----------------------------------------\n\nTITLE: Illustrating Date-based Folder Naming in Lume\nDESCRIPTION: This snippet demonstrates how dates can be applied to folders, affecting all pages within that folder, while maintaining the desired URL structure.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/docs/creating-pages/page-files.md#2025-04-21_snippet_4\n\nLANGUAGE: txt\nCODE:\n```\n.\n├── index.md                          => /index.html\n└── posts\n    └── 2020-06-21_hello-world/\n        └── index.md     => /posts/hello-world/index.html\n        └── other.md     => /posts/hello-world/other/index.html\n```\n\n----------------------------------------\n\nTITLE: Basic Robots Plugin Configuration with Allow Rules\nDESCRIPTION: This example demonstrates how to configure the robots plugin to explicitly allow specific bots like Googlebot and Bingbot to access the site. This doesn't prevent other bots from scanning the site.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/plugins/robots.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// Explicit allow access to Google and Bing\nsite.use(robots({\n  allow: [\"Googlebot\", \"Bingbot\"],\n}));\n```\n\n----------------------------------------\n\nTITLE: Dynamic Page Generation with JavaScript and TypeScript\nDESCRIPTION: Examples of creating pages with dynamic content generation using both JavaScript and TypeScript, demonstrating use of data and filters.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/plugins/modules.md#2025-04-21_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport const title = \"Welcome to my page\";\nexport const layout = \"layouts/main.vto\";\n\nexport default (data, filters) =>\n  `<h1>${data.title}</h1>\n  <p>This is my first post using lume. I hope you like it!</p>\n  <a href=\"${filters.url(\"/\")}\">Back to home</a>`;\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport const title = \"Welcome to my page\";\nexport const layout = \"layouts/main.vto\";\n\nexport default (data: Lume.Data, helpers: Lume.Helpers) =>\n  `<h1>${data.title}</h1>\n  <p>This is my first post using lume. I hope you like it!</p>\n  <a href=\"${filters.url(\"/\")}\">Back to home</a>`;\n```\n\n----------------------------------------\n\nTITLE: SCSS Import Syntax Examples\nDESCRIPTION: Examples showing different ways to import SCSS files in your stylesheet, including importing from the _includes directory and using relative paths.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/plugins/sass.md#2025-04-21_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n/* Import the SCSS file from _includes/sass/reset.scss */\n@import \"sass/reset.scss\";\n\n/* The extension is optional */\n@import \"sass/reset\";\n\n/* Import files using a relative path */\n@import \"./variables.scss\";\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Icon Catalogs (JavaScript)\nDESCRIPTION: This snippet demonstrates how to configure custom icon catalogs using the 'catalogs' option in the Icons plugin. It shows how to define a new icon library with custom URL patterns and variants.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/plugins/icons.md#2025-04-21_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nsite.use(icons({\n  catalogs: [\n    {\n      id: \"my-library\",\n      src: \"https://my-cdn.com/icons/{name}-{variant}.svg\",\n      variants: [\n        \"filled\",\n        \"outlined\",\n      ],\n    },\n  ],\n}));\n```\n\n----------------------------------------\n\nTITLE: Resulting HTML with Embedded JSON-LD\nDESCRIPTION: Example of the resulting HTML output with the JSON-LD script tag embedded in the head section. This shows how Lume processes the JSON-LD data and includes it in the final HTML page.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/plugins/json_ld.md#2025-04-21_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<html>\n  <head>\n    <script type=\"application/ld+json\">\n      {\n        \"@context\": \"https://schema.org\",\n        \"@type\": \"WebSite\",\n        \"url\": \"https://oscarotero.com/\",\n        \"headline\": \"Óscar Otero - Web designer and developer\",\n        \"name\": \"Óscar Otero\",\n        \"description\": \"I'm just a designer and web developer\",\n        \"author\": {\n          \"@type\": \"Person\",\n          \"name\": \"Óscar Otero\"\n        }\n      }\n    </script>\n  </head>\n  <body>\n    <p>This is my first post</p>\n  </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Configuring a Collection with Extended Options in LumeCMS (TypeScript)\nDESCRIPTION: This example shows how to define a collection using an object with additional options such as name, store, and fields. It provides more flexibility in configuring the collection.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/cms/configuration/collections.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ncms.collection({\n  name: \"posts\",\n  store: \"src:posts/*.md\",\n  fields: [\n    \"title: text\",\n    \"content: markdown\",\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Up Single Prism Theme\nDESCRIPTION: Configuration for downloading and applying a single Prism theme with optional placeholder for CSS insertion.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/plugins/prism.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport lume from \"lume/mod.ts\";\nimport prism from \"lume/plugins/prism.ts\";\n\nconst site = lume();\n\nsite.use(prism({\n  theme: {\n    name: \"funky\", // The theme name to download\n    cssFile: \"/styles.css\", // The destination filename\n    placeholder: \"/* insert-theme-here */\", // Optional placeholder to replace with the final code\n  },\n}));\n\nexport default site;\n```\n\n----------------------------------------\n\nTITLE: Initializing LumeCMS Instance\nDESCRIPTION: Basic initialization of a LumeCMS instance with configuration options.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/cms/configuration/options.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport lumeCMS from \"lume/cms/mod.ts\";\n\nconst cms = lumeCMS({\n  /* Options */\n});\n```\n\n----------------------------------------\n\nTITLE: SVG Inline Example\nDESCRIPTION: Shows how an SVG image with inline attribute is transformed into an embedded SVG element.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/plugins/inline.md#2025-04-21_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<img src=\"icon.svg\" class=\"icon\" id=\"icon-1\" inline />\n```\n\nLANGUAGE: html\nCODE:\n```\n<svg\n  width=\"180px\"\n  height=\"180px\"\n  xmlns=\"http://www.w3.org/2000/svg\"\n  class=\"icon\"\n  id=\"icon-1\"\n>\n  ...\n</svg>\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Basic File Structure to URL Mapping in Lume\nDESCRIPTION: This snippet shows how Lume converts Markdown files in the root directory into HTML pages, maintaining the file structure in the output.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/docs/creating-pages/page-files.md#2025-04-21_snippet_0\n\nLANGUAGE: txt\nCODE:\n```\n.\n├── index.md     => /index.html\n├── about.md     => /about/index.html\n└── contact.md   => /contact/index.html\n```\n\n----------------------------------------\n\nTITLE: Slugify All Files Configuration\nDESCRIPTION: This snippet illustrates how to configure the slugify plugin to apply to all file types by using a wildcard in the 'extensions' option.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/plugins/slugify_urls.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nsite.use(slugifyUrls({\n  extensions: \"*\",\n}));\n```\n\n----------------------------------------\n\nTITLE: Creating an Eta Layout Template with Frontmatter\nDESCRIPTION: Example of an Eta layout file with frontmatter and template syntax. This demonstrates how to create a layout in the _includes directory with variables and include other template files.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/plugins/eta.md#2025-04-21_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n--- title: Welcome to my page intro: This is my first post using lume, I hope\nyou like it! ---\n\n<html>\n  <head>\n    <title><%= title %></title>\n  </head>\n\n  <body>\n    <%~ await includeFile(\"partials/nav.eta\") %>\n\n    <p><%= title %></p>\n  </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Configuring Decap CMS with YAML\nDESCRIPTION: Example YAML configuration file for Decap CMS showing basic setup with Git backend and content collection definition.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/plugins/decap_cms.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nbackend:\n  name: git-gateway\n  branch: master\n\nmedia_folder: statics\n\ncollections:\n  - label: Posts\n    name: posts\n    description: List of posts\n    folder: posts\n    extension: md\n    create: true\n    fields:\n      - label: Title\n        name: title\n        widget: string\n      - label: Content\n        name: body\n        widget: markdown\n```\n\n----------------------------------------\n\nTITLE: Searching Pages by Tags in Vento\nDESCRIPTION: Example showing how to search for pages with specific tags ('post' and 'html') and render them in an unordered list.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/plugins/search.md#2025-04-21_snippet_0\n\nLANGUAGE: vento\nCODE:\n```\n<ul>\n  {{ for post of search.pages(\"post html\") }}\n  <li>{{ post.title }}</li>\n  {{ /for }}\n</ul>\n```\n\n----------------------------------------\n\nTITLE: Configuring Extra Data for Dynamic Content\nDESCRIPTION: Example showing how to add dynamic data to on-demand pages using the extraData configuration option.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/plugins/on_demand.md#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport lume from \"lume/mod.ts\";\nimport onDemand from \"lume/plugins/on_demand.ts\";\n\nsite.use(onDemand({\n  extraData(request: Request) {\n    const searchParams = new URL(request.url).searchParams;\n    const params = Object.fromEntries(searchParams.entries());\n\n    return {\n      params,\n    };\n  },\n}));\n\nexport default site;\n```\n\n----------------------------------------\n\nTITLE: Example HTML Before SRI Application\nDESCRIPTION: An example HTML script tag loading jQuery from a CDN before the SRI plugin is applied.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/plugins/sri.md#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://code.jquery.com/jquery-3.7.0.slim.min.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Fixing Pagination with renderOrder in Lume\nDESCRIPTION: Modified pagination script that uses renderOrder=1 to ensure it runs after the API pages are generated. Includes pagination configuration with custom URL format.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/docs/core/render-order.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nexport const layout = \"layouts/api-pagination.vto\";\n\n// Changed this to render this page after the others\nexport const renderOrder = 1;\n\nexport default function* ({ search, paginate }) {\n  const items = search.pages(\"type=api\");\n\n  for (const page of paginate(items, { url: (n) => `/page/${n}/`, size: 10 })) {\n    yield page;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring a List Field with Predefined Options in TypeScript for Lume CMS\nDESCRIPTION: Advanced TypeScript configuration for a 'list' field in Lume CMS, including predefined options. This setup creates a datalist element with suggested values for the user to choose from.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/cms/fields/list.md#2025-04-21_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\n{\n  name: \"ingredients\",\n  type: \"list\",\n  options: [\n    \"potatoes\",\n    \"eggs\",\n    \"salt\",\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Importing and Using SVGO Plugin in Lume Configuration\nDESCRIPTION: This code demonstrates how to import and configure the SVGO plugin in a Lume project's _config.ts file. The plugin optimizes all .svg files using SVGO.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/plugins/svgo.md#2025-04-21_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nimport lume from \"lume/mod.ts\";\nimport svgo from \"lume/plugins/svgo.ts\";\n\nconst site = lume();\n\nsite.use(svgo(/* Options */));\n\nexport default site;\n```\n\n----------------------------------------\n\nTITLE: HTML Input/Output Example for Inline Resources\nDESCRIPTION: Demonstrates how different resources are inlined into HTML using the inline attribute, showing both input markup and resulting output.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/plugins/inline.md#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<link rel=\"stylesheet\" href=\"/css/my-styles.css\" inline />\n\n<script src=\"/js/my-scripts.js\" inline></script>\n\n<img src=\"/img/avatar.png\" inline />\n\n<img src=\"/img/logo.svg\" inline />\n```\n\nLANGUAGE: html\nCODE:\n```\n<style>\n  /* Content of /css/my-styles.css */\n</style>\n\n<script>\n  // Content of /js/my-scripts.js\n</script>\n\n<img src=\"data:image/png;base64,...\" />\n\n<svg>...</svg>\n```\n\n----------------------------------------\n\nTITLE: Configuring an Object Field in TypeScript\nDESCRIPTION: Demonstrates how to configure an object field in TypeScript that groups related fields together. This configuration groups 'title' and 'subtitle' string fields under a 'header' object.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/cms/fields/object.md#2025-04-21_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\n{\n  name: \"header\",\n  type: \"object\",\n  fields: [\n    \"title: string\",\n    \"subtitle: string\",\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: Assigning a Layout to a Markdown Page in Lume\nDESCRIPTION: Shows how to assign a layout to a Markdown page in Lume using front matter. The YAML block at the top of the file specifies the layout to be used.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/docs/getting-started/create-a-layout.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n---\nlayout: layout.vto\n---\n# Welcome to my website\n\nThis is my first page using **Lume,**\na static site generator for Deno.\n\nI hope you enjoy it.\n```\n\n----------------------------------------\n\nTITLE: Using Built-in Middleware in Lume Server\nDESCRIPTION: Example of implementing built-in middleware (expires) provided by Lume for common use cases.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/docs/core/server.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport Server from \"lume/core/server.ts\";\nimport expires from \"lume/middlewares/expires.ts\";\n\nconst server = new Server();\n\nserver.use(expires());\n\nserver.start();\n```\n\n----------------------------------------\n\nTITLE: Using Remote Layout in Markdown (Markdown)\nDESCRIPTION: This Markdown snippet demonstrates how to use a remote layout in a Markdown file. It specifies the layout in the front matter of the file.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/docs/core/remote-files.md#2025-04-21_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: This is a page\nlayout: layouts/main.vto\n---\n\nPage content\n```\n\n----------------------------------------\n\nTITLE: Stopping the Build Process with beforeBuild Event\nDESCRIPTION: This example demonstrates how to stop the build process by returning false from the beforeBuild event listener.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/docs/core/events.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nsite.addEventListener(\"beforeBuild\", () => {\n  return false; // Stop the build\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Liquid Plugin in Lume Configuration\nDESCRIPTION: Shows how to import and configure the Liquid plugin in the Lume _config.ts file\nSOURCE: https://github.com/lumeland/lume.land/blob/main/plugins/liquid.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport lume from \"lume/mod.ts\";\nimport liquid from \"lume/plugins/liquid.ts\";\n\nconst site = lume();\n\nsite.use(liquid(/* Options */));\n\nexport default site;\n```\n\n----------------------------------------\n\nTITLE: Netlify Configuration for Deploying Lume Sites\nDESCRIPTION: TOML configuration file for Netlify that specifies the build command and publish directory for a Lume site. It includes both a simple configuration and an alternative that installs the latest version of Deno.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/docs/advanced/deployment.md#2025-04-21_snippet_6\n\nLANGUAGE: toml\nCODE:\n```\n[build]\n  publish = \"_site\"\n  command = \"deno task build\"\n```\n\nLANGUAGE: toml\nCODE:\n```\n[build]\n  publish = \"_site\"\n  command = \"\"\"\n  curl -fsSL https://deno.land/install.sh | sh && \\\n  /opt/buildhome/.deno/bin/deno task build \\\n\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Using Next and Previous Page Functions in JavaScript\nDESCRIPTION: These snippets show how to use nav.nextPage() and nav.previousPage() functions to navigate through the menu structure. It includes examples of different scenarios.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/plugins/nav.md#2025-04-21_snippet_5\n\nLANGUAGE: js\nCODE:\n```\nconst nextPage = nav.nextPage(\"/docs/getting-started/installation/\");\nconsole.log(nextPage.url); // /docs/getting-started/configuration/\n```\n\nLANGUAGE: js\nCODE:\n```\nconst nextPage = nav.nextPage(\"/docs/getting-started/configuration/\");\nconsole.log(nextPage.url); // /docs/plugins/\n```\n\nLANGUAGE: js\nCODE:\n```\nconst nextPage = nav.nextPage(\"/docs/plugins/\");\nconsole.log(nextPage.url); // /docs/plugins/prettier/\n```\n\nLANGUAGE: js\nCODE:\n```\nnav.menu(\"/\", \"lang=en\", \"url=asc\");\n\nnav.nextPage(url, \"/\", \"lang=en\", \"url=asc\");\nnav.previousPage(url, \"/\", \"lang=en\", \"url=asc\");\n```\n\n----------------------------------------\n\nTITLE: Configuring Slugify Plugin Extensions\nDESCRIPTION: This code snippet shows how to configure the slugify plugin to slugify additional file types beyond just HTML pages by specifying the 'extensions' option in Lume.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/plugins/slugify_urls.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nsite.use(slugifyUrls({\n  extensions: [\".html\", \".jpg\"],\n}));\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic Auth with Environment Variables in LumeCMS\nDESCRIPTION: Shows how to set up authentication using environment variables to securely store credentials instead of hardcoding them in the configuration file.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/cms/configuration/auth.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst user = Deno.env.get(\"CMS_USERNAME\");\nconst password = Deno.env.get(\"CMS_PASSWORD\");\n\ncms.auth({\n  [user]: password,\n});\n```\n\n----------------------------------------\n\nTITLE: Customizing ID and Type Keys\nDESCRIPTION: Configuration example for changing the default keys used to identify page type and ID.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/plugins/relations.md#2025-04-21_snippet_6\n\nLANGUAGE: js\nCODE:\n```\nsite.use(relations({\n  typeKey: \"kind\",\n  idKey: \"slug\",\n  foreignKeys: {\n    article: \"article_id\",\n    author: \"author_id\",\n  },\n}));\n```\n\n----------------------------------------\n\nTITLE: Configuring JSX Transform in deno.json\nDESCRIPTION: This JSON configuration snippet sets up the compiler options for JSX transform in a Deno project. It specifies the JSX factory to use Preact for rendering.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/plugins/jsx_preact.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  // ...\n  \"compilerOptions\": {\n    \"jsx\": \"react-jsx\",\n    \"jsxImportSource\": \"npm:preact\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Array Mode Merging\nDESCRIPTION: Example of array mode merging configuration with categories.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/docs/core/merged-keys.md#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nmergedKeys:\n  category: array\n\ncategory:\n  - programming\n  - deno\n  - javascript\n```\n\n----------------------------------------\n\nTITLE: Customized Lume Task with Restricted Permissions\nDESCRIPTION: This example demonstrates how to customize the Lume task in deno.json with specific permissions, restricting access to only necessary resources.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/docs/advanced/permissions.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"importMap\": \"import_map.json\",\n  \"tasks\": {\n    \"lume\": \"echo \\\"import 'lume/cli.ts'\\\" | deno run --allow-net --allow-read=./ --allow-write=./_site -\",\n    \"build\": \"deno task lume\",\n    \"serve\": \"deno task lume -s\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing OG Images Plugin in Lume Configuration\nDESCRIPTION: Basic setup for the og_images plugin in Lume's _config.ts file, showing how to import and configure both og_images and metas plugins.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/plugins/og_images.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport lume from \"lume/mod.ts\";\nimport ogImages from \"lume/plugins/og_images.ts\";\nimport metas from \"lume/plugins/metas.ts\";\n\nconst site = lume();\n\nsite.use(ogImages());\nsite.use(metas()); /* Optional, to generate <meta> tags */\n\nexport default site;\n```\n\n----------------------------------------\n\nTITLE: Configuring Individual Relations\nDESCRIPTION: Advanced configuration example showing how to customize individual relation settings including foreign keys, relation keys, and ID keys.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/plugins/relations.md#2025-04-21_snippet_7\n\nLANGUAGE: js\nCODE:\n```\nsite.use(relations({\n  foreignKeys: {\n    article: \"article_id\",\n    author: {\n      foreignKey: \"author_id\",\n      relationKey: \"author\",\n      pluralRelationKey: \"authors\"\n      idKey: \"name\",\n    },\n  },\n}));\n```\n\n----------------------------------------\n\nTITLE: Rendering an Article with Related Author\nDESCRIPTION: HTML layout template showing how to use the automatic author relation in an article layout.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/plugins/relations.md#2025-04-21_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<article>\n  {{ content }}\n  \n  <footer>By {{ author.title }}</footer>\n</article>\n```\n\n----------------------------------------\n\nTITLE: Example of URL Transformation with Relative URLs Plugin\nDESCRIPTION: Shows an example of how the plugin transforms an absolute URL into a relative one in an HTML file. The example demonstrates URL transformation from /articles/my-first-article/ to ../my-second-article/.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/plugins/relative_urls.md#2025-04-21_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<!-- /articles/my-first-article/ -->\n<a href=\"/articles/my-second-article/\">Go to the second article</a>\n```\n\nLANGUAGE: html\nCODE:\n```\n<!-- /articles/my-first-article/ -->\n<a href=\"../my-second-article/\">Go to the second article</a>\n```\n\n----------------------------------------\n\nTITLE: Accessing Multiple Sheets in 'Auto' Sheet Mode\nDESCRIPTION: Example of accessing data from a multi-sheet spreadsheet in 'auto' mode, where all sheets are available by name. This shows how to display data from 'Women' and 'Men' sheets separately.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/plugins/sheets.md#2025-04-21_snippet_3\n\nLANGUAGE: vento\nCODE:\n```\n<h1>Women</h1>\n<ul>\n  {{ for person of people[\"Women\"] }}\n    <li>\n      {{ person.name }} - {{ person.surname }}\n    </li>\n  {{ /for }}\n</ul>\n\n<h1>Men</h1>\n<ul>\n  {{ for person of people[\"Men\"] }}\n    <li>\n      {{ person.name }} - {{ person.surname }}\n    </li>\n  {{ /for }}\n</ul>\n```\n\n----------------------------------------\n\nTITLE: Using Git Last Updated Time for Sitemap 'lastmod' Value\nDESCRIPTION: Shows how to use Git's last modified date as a more reliable 'lastmod' value for sitemap entries, using Lume's utility function to extract this information.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/plugins/sitemap.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { getGitDate } from \"lume/core/utils/date.ts\";\nsite.preprocess([\".html\"], (pages) => {\n  for (const page of pages) {\n    const { entry } = page.src;\n    page.data.lastmod = getGitDate(\"modified\", entry.src);\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: JavaScript Page Configuration\nDESCRIPTION: Example of defining page data using JavaScript exports.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/docs/creating-pages/page-data.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nexport const title = \"This is the title\";\nexport const url = \"custom-url.html\";\n\nexport default () => \"<p>This is the page content</p>\";\n```\n\n----------------------------------------\n\nTITLE: Configuring Components Settings in JavaScript\nDESCRIPTION: Example showing component configuration including variable name, CSS and JS file outputs.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/docs/configuration/config-file.md#2025-04-21_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nimport lume from \"lume/mod.ts\";\n\nconst site = lume({\n  components: {\n    variable: \"comp\",\n    cssFile: \"/components.css\",\n    jsFile: \"/components.js\",\n  },\n});\n\nexport default site;\n```\n\n----------------------------------------\n\nTITLE: Configuring Destination Cleanup in TypeScript\nDESCRIPTION: Example showing how to disable automatic cleanup of the destination folder before build.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/docs/configuration/config-file.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst site = lume({\n  emptyDest: false,\n});\n```\n\n----------------------------------------\n\nTITLE: Remaining Files Copy Configuration in TypeScript\nDESCRIPTION: Examples of using copyRemainingFiles() function to handle unprocessed files, including filtering and path transformation.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/docs/configuration/copy-static-files.md#2025-04-21_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nsite.copyRemainingFiles();\n\nsite.copyRemainingFiles(\n  (path: string) => path.startsWith(\"/articles/\"),\n);\n\nsite.copyRemainingFiles(\n  (path: string) => path.startsWith(\"/articles/\") ? path.toLowerCase() : false,\n);\n```\n\n----------------------------------------\n\nTITLE: Defining Shared Data in JSON Format\nDESCRIPTION: Example of storing static shared data in a _data.json file. This data can be accessed by all pages in the same directory or subdirectory.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/docs/creating-pages/shared-data.md#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"people\": [\n    {\n      \"name\": \"Oscar Otero\",\n      \"color\": \"black\"\n    },\n    {\n      \"name\": \"Laura Rubio\",\n      \"color\": \"blue\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Installing the Reading Info Plugin in Lume\nDESCRIPTION: This snippet demonstrates how to import and configure the Reading Info plugin in your Lume site's configuration file. The plugin adds reading statistics to your page data.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/plugins/reading_info.md#2025-04-21_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nimport lume from \"lume/mod.ts\";\nimport readingInfo from \"lume/plugins/reading_info.ts\";\n\nconst site = lume();\n\nsite.use(readingInfo());\n\nexport default site;\n```\n\n----------------------------------------\n\nTITLE: Basic HTML Output from Markdown in Lume\nDESCRIPTION: Shows the basic HTML output generated from a Markdown file in Lume without a layout. This demonstrates the need for additional HTML structure.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/docs/getting-started/create-a-layout.md#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\n<h1>Welcome to my website</h1>\n<p>\n  This is my first page using <strong>Lume,</strong> a static site generator for\n  Deno.\n</p>\n<p>I hope you enjoy it.</p>\n```\n\n----------------------------------------\n\nTITLE: Configuring Remote Layout in Lume (TypeScript)\nDESCRIPTION: This TypeScript code shows how to set up a remote layout file in Lume. It allows using the same layout across multiple websites without repeating the file in every project.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/docs/core/remote-files.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nsite.remoteFile(\n  \"_includes/layouts/main.vto\",\n  \"https://example.com/theme/layouts/main.vto\",\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering Math in HTML with KaTeX\nDESCRIPTION: Shows how to use the 'language-math' class on an HTML element to render TeX math using KaTeX.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/plugins/katex.md#2025-04-21_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<p class=\"language-math\">\n  c = \\pm\\sqrt{a^2 + b^2}\n</p>\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Percentage Field in LumeCMS\nDESCRIPTION: Example of creating a custom percentage field using cms.field() function. The field validates numbers between 0-100 and includes field definition with tag name, JavaScript import, and value transformation.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/cms/configuration/custom_fields.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ncms.field(\"percentage\", {\n  tag: \"percentage-field\",\n  jsImport: \"https://example.com/custom-fields/percentage-field.js\",\n  applyChanges(data, changes, field) {\n    const { name } = field;\n    const value = changes[name];\n    data[name] value ? Number(value) : undefined;\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Using Locale-Aware Sorting in Vento\nDESCRIPTION: Shows how to use locale-aware sorting (for proper handling of accents and case differences) in search results.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/plugins/search.md#2025-04-21_snippet_6\n\nLANGUAGE: vento\nCODE:\n```\n{{ for post of search.pages(\"post html\", \"order=asc title=desc-locale\") }}\n  ...\n{{ /for }}\n```\n\n----------------------------------------\n\nTITLE: Installing the SRI Plugin in Lume\nDESCRIPTION: JavaScript code showing how to import and configure the SRI plugin in a Lume _config.ts file. The plugin searches for external scripts and links to add integrity attributes.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/plugins/sri.md#2025-04-21_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nimport lume from \"lume/mod.ts\";\nimport sri from \"lume/plugins/sri.ts\";\n\nconst site = lume();\n\nsite.use(sri(/* Options */));\n\nexport default site;\n```\n\n----------------------------------------\n\nTITLE: Configuring Server Port in TypeScript\nDESCRIPTION: Example showing how to configure the development server port number.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/docs/configuration/config-file.md#2025-04-21_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst site = lume({\n  server: {\n    port: 8000,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring List Field Options with Site Data (JavaScript)\nDESCRIPTION: JavaScript example of using the init function to populate list field options using site data.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/cms/configuration/fields.md#2025-04-21_snippet_6\n\nLANGUAGE: js\nCODE:\n```\n{\n  name: \"tags\",\n  type: \"list\",\n  init(field, { data }) {\n    const site = data.site;\n    const allTags = site.search.values(\"tags\");\n    field.options = allTags;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Renaming processAll to process in JavaScript\nDESCRIPTION: Demonstrates how to rename the processAll method to process in Lume 2, which now handles all pages at once.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/docs/advanced/migrate-to-lume2.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// Lume 1\nsite.processAll([\".html\"], fn);\n\n// Lume 2\nsite.process([\".html\"], fn);\n```\n\n----------------------------------------\n\nTITLE: Importing and Configuring Eta Plugin in Lume\nDESCRIPTION: Code to import and configure the Eta plugin in the _config.ts file of a Lume project. This allows using Eta template engine for creating pages and layouts.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/plugins/eta.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport lume from \"lume/mod.ts\";\nimport eta from \"lume/plugins/eta.ts\";\n\nconst site = lume();\n\nsite.use(eta(/* Options */));\n\nexport default site;\n```\n\n----------------------------------------\n\nTITLE: Defining Basic YAML Data Structure\nDESCRIPTION: Example showing basic YAML data structure in root _data file with site information.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/docs/core/merged-keys.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nsite:\n  title: My humble site\n  author: Oscar Otero\n```\n\n----------------------------------------\n\nTITLE: Rendering YAML Content with Vento Template\nDESCRIPTION: A Vento template that renders YAML data into HTML. It displays the page title, intro text, and iterates through the sections array to create multiple content sections with headings, images, and text.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/plugins/yaml.md#2025-04-21_snippet_2\n\nLANGUAGE: vento\nCODE:\n```\n<html>\n  <head>\n    <title>{{ title }}</title>\n  </head>\n  <body>\n    <header>\n      <h1>{{ title }}</h1>\n      <p>{{ intro }}</p>\n    </header>\n\n    {{ for section of sections }}\n    <section>\n      <h2>{{ section.title }}</h2>\n      <img src=\"{{ section.image }}\">\n      <p>{{ section.text }}</p>\n    </section>\n    {{ /for }}\n  </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic Markdown Field in TypeScript\nDESCRIPTION: Basic configuration for a markdown field named 'content'. This creates a codemirror editor in the UI for editing markdown content.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/cms/fields/markdown.md#2025-04-21_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\n{\n  name: \"content\",\n  type: \"markdown\",\n}\n```\n\n----------------------------------------\n\nTITLE: Exporting Nav Menu to JSON in JavaScript\nDESCRIPTION: This code snippet demonstrates how to export the nav menu to JSON format, which can be useful for frontend integration.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/plugins/nav.md#2025-04-21_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nconst menu = nav.menu();\nJSON.stringify(menu);\n```\n\n----------------------------------------\n\nTITLE: Rendering a Template with Variables\nDESCRIPTION: Shows a simple example of rendering a template using variables from the Data object.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/docs/advanced/the-data-model.md#2025-04-21_snippet_11\n\nLANGUAGE: vento\nCODE:\n```\n<!-- Render the title variable -->\n<h1>{{ title }}</h1>\n```\n\n----------------------------------------\n\nTITLE: Configuring Pagefind UI Options\nDESCRIPTION: JavaScript configuration code showing how to customize the Pagefind UI component with various options.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/plugins/pagefind.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport lume from \"lume/mod.ts\";\nimport pagefind from \"lume/plugins/pagefind.ts\";\n\nconst site = lume();\n\nsite.use(pagefind({\n  ui: {\n    containerId: \"search\",\n    showImages: false,\n    showEmptyFilters: true,\n    resetStyles: true,\n  },\n}));\n\nexport default site;\n```\n\n----------------------------------------\n\nTITLE: Restrictive Robots Configuration with Allow and Disallow Rules\nDESCRIPTION: This configuration gives access only to specific bots (Google and Bing) while disallowing all other bots from accessing the site using the wildcard (*) disallow rule.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/plugins/robots.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// Give access only to Google and Bing\nsite.use(robots({\n  allow: [\"Googlebot\", \"Bingbot\"],\n  disallow: \"*\",\n}));\n```\n\n----------------------------------------\n\nTITLE: Configuring a Text Field in Lume (TypeScript)\nDESCRIPTION: This snippet demonstrates how to configure a text field in Lume. It shows setting the field name, type, and additional attributes like 'required' and 'maxlength'.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/cms/fields/text.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  name: \"title\",\n  type: \"text\",\n  attributes: {\n    required: true,\n    maxlength: 200\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Loading KaTeX CSS for Browser Rendering\nDESCRIPTION: Provides the necessary HTML link tag to include the KaTeX CSS file, which is required for proper rendering of KaTeX-generated math in the browser.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/plugins/katex.md#2025-04-21_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<link\n  rel=\"stylesheet\"\n  href=\"https://cdn.jsdelivr.net/npm/katex@0.16.2/dist/katex.css\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Defining YAML Frontmatter in Markdown (YAML)\nDESCRIPTION: Example of a markdown document with YAML frontmatter defining title and date fields.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/cms/configuration/fields.md#2025-04-21_snippet_0\n\nLANGUAGE: yml\nCODE:\n```\n---\ntitle: Happy new year\ndate: 2024-01-01 00:00:00\n---\n\nI hope you have a **great 2024**.\n```\n\n----------------------------------------\n\nTITLE: Configuring Read-Only Current Datetime Field in Lume (TypeScript)\nDESCRIPTION: This example demonstrates how to set up a read-only current-datetime field in Lume. By adding the readonly attribute, the field becomes non-editable by users, ensuring that only the system can update the timestamp.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/cms/fields/current-datetime.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  name: \"last_modified\",\n  type: \"current-datetime\",\n  attributes: {\n    readonly: true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Parallel Commands in Lume\nDESCRIPTION: Demonstrates how to execute multiple commands in parallel using either an array of commands or the & character.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/docs/core/scripts.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nsite.script(\n  \"compress-assets\",\n  [\n    \"gzip -r _site/images images.gz\",\n    \"gzip -r _site/videos videos.gz\",\n  ],\n);\n\n// Alternative way using the character \"&\"\nsite.script(\n  \"compress-assets\",\n  \"gzip -r _site/images images.gz & gzip -r _site/videos videos.gz\",\n);\n```\n\n----------------------------------------\n\nTITLE: Overriding YAML Data in Subfolder\nDESCRIPTION: Example of overriding site data in a subfolder's _data file.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/docs/core/merged-keys.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nsite:\n  author: Laura Rubio\n```\n\n----------------------------------------\n\nTITLE: Enabling Draft Pages Processing in Lume\nDESCRIPTION: This command enables Lume to process pages marked as drafts, which is useful for development environments. It sets the LUME_DRAFTS environment variable to true.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/docs/configuration/env-variables.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nLUME_DRAFTS=true deno task lume\n```\n\n----------------------------------------\n\nTITLE: Generated HTML Meta Tags Output\nDESCRIPTION: Example HTML output showing the generated meta tags after processing by the Metas plugin.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/plugins/metas.md#2025-04-21_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<html>\n  <head>\n    <meta property=\"og:type\" content=\"website\" />\n    <meta property=\"og:site_name\" content=\"Oscar's blog\" />\n    <meta property=\"og:locale\" content=\"en\" />\n    <meta property=\"og:title\" content=\"Hello world\" />\n    <meta property=\"og:description\" content=\"My first post\" />\n    <meta property=\"og:url\" content=\"http://example.com/\" />\n    <meta property=\"og:image\" content=\"http://example.com/hello-world.png\" />\n    <meta name=\"twitter:card\" content=\"summary_large_image\" />\n    <meta name=\"twitter:site\" content=\"@misteroom\" />\n    <meta name=\"fediverse:creator\" content=\"@misteroom@mastodon.gal\" />\n    <meta itemprop=\"name\" content=\"Hello world\" />\n    <meta itemprop=\"description\" content=\"My first post\" />\n    <meta itemprop=\"image\" content=\"http://example.com/hello-world.png\" />\n    <meta name=\"description\" content=\"My first post\" />\n    <meta name=\"generator\" content=\"Lume v1.10.1\" />\n  </head>\n  <body>\n    <p>This is my first post</p>\n  </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Combining Field Filtering with Tag Filtering in Vento\nDESCRIPTION: Demonstrates how to combine field filtering with tag filtering to find pages that match multiple criteria.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/plugins/search.md#2025-04-21_snippet_10\n\nLANGUAGE: vento\nCODE:\n```\n{{ for post of search.pages(\"taxonomy.category=sport football\") }}\n<a href=\"{{ post.url }}\">\n  {{ post.title }}\n</a>\n{{ /for }}\n```\n\n----------------------------------------\n\nTITLE: Using Localized Date Formats\nDESCRIPTION: Example of using localized date formats in Vento templates.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/plugins/date.md#2025-04-21_snippet_6\n\nLANGUAGE: vento\nCODE:\n```\n<time datetime=\"{{ createdAt |> date }}\">\n  {{ createdAt | date(\"HUMAN_DATE\", \"gl\") }}\n</time>\n```\n\n----------------------------------------\n\nTITLE: Custom URL Front Matter Example - YAML\nDESCRIPTION: Demonstrates how to set a custom URL for a page using front matter\nSOURCE: https://github.com/lumeland/lume.land/blob/main/docs/creating-pages/urls.md#2025-04-21_snippet_3\n\nLANGUAGE: yml\nCODE:\n```\n---\ntitle: My first post\nurl: /posts/welcome/\n---\n```\n\n----------------------------------------\n\nTITLE: Custom Directory Copying in JavaScript\nDESCRIPTION: Demonstrates how to copy files and directories to custom destinations by specifying target paths.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/docs/configuration/copy-static-files.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// Copy the \"img\" directory to _site/images\nsite.copy(\"img\", \"images\");\n\n// Copy the \"static-files/favicons/favicon.ico\" to _site/favicon.ico\nsite.copy(\"static-files/favicons/favicon.ico\", \"favicon.ico\");\n\n// Copy the content of \"assets\" directory to the root of your site\nsite.copy(\"assets\", \".\");\n```\n\n----------------------------------------\n\nTITLE: Configuring Time Field in Lume CMS (TypeScript)\nDESCRIPTION: This code snippet demonstrates how to configure a 'time' field in Lume CMS. The field is named 'starts_at' and uses the 'time' type, which will display as an <input type=\"time\"> in the user interface.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/cms/fields/time.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  name: \"starts_at\",\n  type: \"time\",\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Page with TOML File\nDESCRIPTION: Shows an example of creating a page using TOML format with metadata like title, layout, and content. This demonstrates how to define page-specific configurations in a .page.toml file.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/plugins/toml.md#2025-04-21_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\ntitle = \"Welcome to my page\"\nlayout = \"layouts/main.vto\"\ncontent = \"This is my first post using lume,\\nI hope you like it!\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Output File for Google Fonts\nDESCRIPTION: Configuration example showing how to specify a custom CSS file for the font declarations instead of the default fonts.css file.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/plugins/google_fonts.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nsite.use(googleFonts({\n  cssFile: \"styles.css\",\n  fonts:\n    \"https://fonts.google.com/share?selection.family=Playfair+Display:ital,wght@0,400..900;1,400..900\",\n}));\n```\n\n----------------------------------------\n\nTITLE: Using Field Aliases in JSON-LD Configuration\nDESCRIPTION: Example of using field aliases in JSON-LD configuration to reference existing values or HTML elements. This demonstrates how to dynamically populate JSON-LD fields using page metadata or HTML content.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/plugins/json_ld.md#2025-04-21_snippet_4\n\nLANGUAGE: yml\nCODE:\n```\ntitle: Óscar Otero - Web designer and developer\nheader:\n  title: Óscar Otero\n  description: I'm just a designer and web developer\n\njsonLd:\n  \"@type\": WebSite\n  url: /\n  headline: $ h1.headline\n  name: =header.title\n  description: =header.description\n  author:\n    \"@type\": Person\n    name: =header.title\n```\n\n----------------------------------------\n\nTITLE: Configuring Advanced Select Field with Custom Labels in Lume (TypeScript)\nDESCRIPTION: This example shows how to configure a select field with both simple string options and a custom object option. The custom option allows specifying a separate label and value for more complex scenarios.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/cms/fields/select.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  name: \"status\",\n  type: \"select\",\n  options: [\n    \"enabled\",\n    \"disabled\",\n    {\n      label: \"Not known\",\n      value: \"unknown\"\n    },\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: Converting YAML File to Data Object\nDESCRIPTION: Shows how a YAML configuration file is converted to a Data object without a content property.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/docs/advanced/the-data-model.md#2025-04-21_snippet_5\n\nLANGUAGE: yml\nCODE:\n```\nlayout: main.vto\ntitle: Page title\ndescription: Page description\n```\n\nLANGUAGE: js\nCODE:\n```\n{\n  layout: \"main.vto\",\n  title: \"Page title\",\n  description: \"Page description\",\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Server 404 Page in TypeScript\nDESCRIPTION: Configuration for specifying custom 404 error page path for the development server.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/docs/configuration/config-file.md#2025-04-21_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nconst site = lume({\n  server: {\n    page404: \"./not-found.html\",\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Using Placeholders for Google Fonts in CSS\nDESCRIPTION: Configuration and CSS examples showing how to use placeholders to insert font declarations at specific locations in existing CSS files.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/plugins/google_fonts.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nsite.use(googleFonts({\n  cssFile: \"styles.css\",\n  placeholder: \"/* google-fonts */\",\n  fonts:\n    \"https://fonts.google.com/share?selection.family=Playfair+Display:ital,wght@0,400..900;1,400..900\",\n}));\n```\n\nLANGUAGE: css\nCODE:\n```\n/* google-fonts */\n\nbody {\n  color: blue;\n}\n```\n\n----------------------------------------\n\nTITLE: Filtering Content by Single Tag in Templates\nDESCRIPTION: Template code demonstrating how to filter and display pages that have a specific tag using the search.pages() function.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/docs/creating-pages/tags.md#2025-04-21_snippet_1\n\nLANGUAGE: vento\nCODE:\n```\n<ul>\n  {{ for post of search.pages(\"post\") }}\n  <li>{{ post.title }}</li>\n  {{ /for }}\n</ul>\n```\n\n----------------------------------------\n\nTITLE: Setting Page-Specific Meta Values\nDESCRIPTION: Example markdown frontmatter showing how to set meta values for a specific page.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/plugins/metas.md#2025-04-21_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n---\nmetas:\n  title: Hello world\n  description: My first post\n  image: /hello-world.png\n---\n\nThis is my first post\n```\n\n----------------------------------------\n\nTITLE: Installing JSON-LD Plugin in Lume Configuration\nDESCRIPTION: JavaScript code snippet showing how to import and use the JSON-LD plugin in a Lume static site generator configuration file (_config.ts).\nSOURCE: https://github.com/lumeland/lume.land/blob/main/plugins/json_ld.md#2025-04-21_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport lume from \"lume/mod.ts\";\nimport jsonLd from \"lume/plugins/json_ld.ts\";\n\nconst site = lume();\n\nsite.use(jsonLd());\n\nexport default site;\n```\n\n----------------------------------------\n\nTITLE: Non-working Liquid Search Example\nDESCRIPTION: Example showing the limitation of Liquid with function calls, which is one of the reasons for deprecation\nSOURCE: https://github.com/lumeland/lume.land/blob/main/plugins/liquid.md#2025-04-21_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<ul>\n  {% for item in search.pages('post') %}\n  <li>{{item.title}}</li>\n  {% endfor %}\n</ul>\n```\n\n----------------------------------------\n\nTITLE: Configuring Upload Directory for File Field\nDESCRIPTION: Configuration example showing how to specify an upload entity and subdirectory for file storage.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/cms/fields/file.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  name: \"image\",\n  type: \"file\",\n  upload: \"images:posts\"\n}\n```\n\n----------------------------------------\n\nTITLE: Starting Lume Development Server\nDESCRIPTION: Commands to start a local development server with live reload functionality, using either Deno task or Lume CLI syntax.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/docs/overview/command-line.md#2025-04-21_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\ndeno task lume --serve\n\n# or with Lume CLI\nlume --serve\n```\n\n----------------------------------------\n\nTITLE: Installing Favicon Plugin in Lume Configuration\nDESCRIPTION: Basic setup code to import and enable the favicon plugin in Lume's _config.ts file. This allows the plugin to automatically generate favicon files from a source SVG.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/plugins/favicon.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport lume from \"lume/mod.ts\";\nimport favicon from \"lume/plugins/favicon.ts\";\n\nconst site = lume();\n\nsite.use(favicon(/* Options */));\n\nexport default site;\n```\n\n----------------------------------------\n\nTITLE: Configuring JSON Plugin in Lume\nDESCRIPTION: Example configuration for the JSON plugin in the _config.ts file, showing how to customize file extensions for JSON pages.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/plugins/json.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport lume from \"lume/mod.ts\";\n\n// JSON plugin configuration\nconst json = {\n  extensions: {\n    pages: [\".page.json\"],\n  },\n};\n\nconst site = lume({}, { json });\n\nexport default site;\n```\n\n----------------------------------------\n\nTITLE: VSCode HTML Template String Examples\nDESCRIPTION: Examples of using template string syntax highlighting in VSCode with different approaches.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/plugins/modules.md#2025-04-21_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport default (params) => /*html*/ `<p>It's work!</p>`;\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport const html = (str: string[], ...val: unknown[]): string =>\n  String.raw({ raw: str }, ...val);\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { html } from \"utilities.ts\";\n\nexport default (params) => html`<p>It's work!</p>`;\n```\n\n----------------------------------------\n\nTITLE: Generating JSON Content with Archetype in TypeScript\nDESCRIPTION: This snippet illustrates how to create an archetype that produces a JSON file with structured content.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/docs/core/archetypes.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport default function () {\n  return {\n    path: \"/pages/example.json\",\n    content: {\n      title: \"Title content\",\n      content: \"Page content\",\n    },\n  };\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"title\": \"Title content\",\n  \"content\": \"Page content\",\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying Font Subsets in Google Fonts Configuration\nDESCRIPTION: Advanced configuration example showing how to specify which font subsets to download, which is useful for optimizing the size of font files, especially for CJK fonts.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/plugins/google_fonts.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nsite.use(googleFonts({\n  subsets: [\n    \"latin\",\n    \"latin-ext\",\n    \"[2]\",\n    \"[3]\",\n    \"[4]\",\n    ...\"[117]\",\n    \"[118]\",\n    \"[119]\",\n  ],\n  cssFile: \"styles.css\",\n  placeholder: \"/* lume-google-fonts-here */\",\n  fonts: {\n    display:\n      \"https://fonts.google.com/share?selection.family=Alegreya+Sans+SC:wght@300\",\n    text:\n      \"https://fonts.google.com/share?selection.family=Alegreya:ital,wght@0,400..900;1,400..900\",\n    textjp:\n      \"https://fonts.google.com/share?selection.family=Zen+Maru+Gothic:wght@700&display=swap\",\n  },\n}));\n```\n\n----------------------------------------\n\nTITLE: Installing Base Path Plugin in Lume\nDESCRIPTION: Basic configuration to import and use the base_path plugin in a Lume project's config file.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/plugins/base_path.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport lume from \"lume/mod.ts\";\nimport basePath from \"lume/plugins/base_path.ts\";\n\nconst site = lume();\n\nsite.use(basePath());\n\nexport default site;\n```\n\n----------------------------------------\n\nTITLE: Defining JSON-LD Data in YAML Front Matter\nDESCRIPTION: Example of defining JSON-LD structured data in YAML front matter of a page. This demonstrates how to specify website information using the 'jsonLd' variable in a Lume page.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/plugins/json_ld.md#2025-04-21_snippet_2\n\nLANGUAGE: yml\nCODE:\n```\njsonLd:\n  \"@type\": WebSite\n  url: /\n  headline: Óscar Otero - Web designer and developer\n  name: Óscar Otero\n  description: I'm just a designer and web developer\n  author:\n    \"@type\": Person\n    name: Óscar Otero\n```\n\n----------------------------------------\n\nTITLE: Configuring Hidden Field in Lume (TypeScript)\nDESCRIPTION: This snippet demonstrates how to configure a hidden field in Lume. It sets up a hidden input for a layout value, which will not be visible in the UI but will be stored and used internally.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/cms/fields/hidden.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  name: \"layout\",\n  type: \"hidden\",\n  value: \"layouts/base.vto\",\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Math in Markdown with KaTeX\nDESCRIPTION: Demonstrates how to use a code block with the 'math' language identifier to render TeX math in a Markdown document using KaTeX.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/plugins/katex.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# This is a markdown document\n\n```math\nc = \\pm\\sqrt{a^2 + b^2}\n```\n```\n\n----------------------------------------\n\nTITLE: Adding Markdown-it Emoji Plugin\nDESCRIPTION: Example of adding the markdown-it-emoji plugin to Lume's markdown configuration.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/plugins/markdown.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport emoji from \"npm:markdown-it-emoji\";\n\n// Set the markdown plugins\nconst markdown = {\n  plugins: [emoji],\n};\n\nconst site = lume({}, { markdown });\n```\n\n----------------------------------------\n\nTITLE: Filtering and Sorting Nav Menu in JavaScript\nDESCRIPTION: This snippet shows how to use nav.menu() with filtering and sorting options. It demonstrates creating a menu with English pages sorted by URL.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/plugins/nav.md#2025-04-21_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nnav.menu(\"/\", \"lang=en\", \"url=asc\");\n```\n\n----------------------------------------\n\nTITLE: Defining a Nested Object Structure in YAML\nDESCRIPTION: Shows how to structure nested fields in YAML format that would be represented as an object field in the CMS. This example defines a header object with title and subtitle properties.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/cms/fields/object.md#2025-04-21_snippet_0\n\nLANGUAGE: yml\nCODE:\n```\nheader:\n  title: This is the title\n  subtitle: This is the subtitle\n```\n\n----------------------------------------\n\nTITLE: Example Directory Structure\nDESCRIPTION: Shows a sample directory structure for articles with static files.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/docs/configuration/copy-static-files.md#2025-04-21_snippet_5\n\nLANGUAGE: txt\nCODE:\n```\n|_ articles/\n    |_ article-1/\n    |   |_ index.md\n    |   |_ picture.jpg\n    |   |_ document.pdf\n    |   |_ foo32.gif\n    |_ article-2/\n        |_ index.md\n        |_ journey.mp4\n        |_ download.zip\n```\n\n----------------------------------------\n\nTITLE: Running Lume in Watch Mode\nDESCRIPTION: Commands to run Lume in watch mode for development with live updates.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/docs/advanced/order-of-operations.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nlume --serve\nlume --watch\n```\n\n----------------------------------------\n\nTITLE: Using Icon Variants in HTML Templates (HTML)\nDESCRIPTION: This example demonstrates how to specify icon variants when using the 'icon' filter in HTML templates. It shows two different ways to specify the variant.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/plugins/icons.md#2025-04-21_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<img src=\"{{ \"acorn:duotone\" |> icon(\"phosphor\") }}\">\n\n<img src=\"{{ \"acorn\" |> icon(\"phosphor\", \"duotone\") }}\">\n```\n\n----------------------------------------\n\nTITLE: Filtering Content by Multiple Tags in Templates\nDESCRIPTION: Template code showing how to filter and display pages that have multiple specific tags using space-separated tag names in search.pages().\nSOURCE: https://github.com/lumeland/lume.land/blob/main/docs/creating-pages/tags.md#2025-04-21_snippet_2\n\nLANGUAGE: vento\nCODE:\n```\n<ul>\n  {{ for post of search.pages(\"post ssg\") }}\n  <li>{{ post.title }}</li>\n  {{ /for }}\n</ul>\n```\n\n----------------------------------------\n\nTITLE: Negating Tag Searches in Vento\nDESCRIPTION: Demonstrates searching for pages with one tag ('post') but excluding those with another tag ('html') using the exclamation mark.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/plugins/search.md#2025-04-21_snippet_2\n\nLANGUAGE: vento\nCODE:\n```\n<ul>\n  {{ for post of search.pages(\"post !html\") }}\n  <li>{{ post.title }}</li>\n  {{ /for }}\n</ul>\n```\n\n----------------------------------------\n\nTITLE: Using Component in JSX\nDESCRIPTION: Example of using Lume components in JSX with proper HTML escaping handling\nSOURCE: https://github.com/lumeland/lume.land/blob/main/docs/core/components.md#2025-04-21_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nexport default function ({ comp }) {\n  return (\n    <>\n      <h1>Welcome to my site.</h1>\n      <div\n        dangerouslySetInnerHTML={{ __html: <comp.Button text=\"Login\" /> }}\n      />\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Email Field in TypeScript\nDESCRIPTION: This code snippet demonstrates how to configure an email field named 'contact'. When used, this field will be rendered as an HTML input element with type 'email' in the user interface.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/cms/fields/email.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  name: \"contact\",\n  type: \"email\",\n}\n```\n\n----------------------------------------\n\nTITLE: Executing LumeCMS Installation Script on Ubuntu VPS\nDESCRIPTION: This command downloads the installation script for LumeCMS from the lumeland GitHub repository and executes it on the server. The script automates the setup process, including package installation, server configuration, and CMS deployment.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/cms/deployment/vps.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncurl https://lumeland.github.io/cms-deploy/install.sh > install.sh && sh install.sh\n```\n\n----------------------------------------\n\nTITLE: JavaScript Standard Variables\nDESCRIPTION: Example of defining standard Lume variables using JavaScript exports.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/docs/creating-pages/page-data.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nexport const url = \"/welcome.html\";\nexport const date = new Date(\"2021-01-01T03:24:00\");\nexport const layout = \"layouts/post.vto\";\nexport const draft = true;\nexport const tags = [\"post\"];\n```\n\n----------------------------------------\n\nTITLE: Implementing Async Filter in Lume\nDESCRIPTION: Shows how to create an asynchronous filter by setting the third parameter to true\nSOURCE: https://github.com/lumeland/lume.land/blob/main/docs/configuration/filters.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nsite.filter(\"async_filter\", async (value) => value, true);\n```\n\n----------------------------------------\n\nTITLE: Configuring File Extensions for Filter Pages Plugin\nDESCRIPTION: Example demonstrating how to limit the filter_pages plugin to only process specific file extensions. The extensions option allows you to specify which file types should be tested by the filter function.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/plugins/filter_pages.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nsite.use(filterPages({\n  extensions: [\".html\", \".json\"],\n  fn: (page) => page.data.ignored !== true,\n}));\n```\n\n----------------------------------------\n\nTITLE: HTML URL Filter Application in YAML Front Matter\nDESCRIPTION: Example of using the htmlUrl filter with HTML content in YAML front matter to normalize all URLs in href and src attributes.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/plugins/url.md#2025-04-21_snippet_3\n\nLANGUAGE: yml\nCODE:\n```\n---\ntext: 'Go to <a href=\"/\">Homepage</a>'\n---\n<div>{{ text | htmlUrl | safe }}</div>\n```\n\n----------------------------------------\n\nTITLE: Implementing beforeBuild Event Listener in Lume\nDESCRIPTION: This snippet shows how to add an event listener for the beforeBuild event, which is triggered just before the site build starts. Note that this is only executed once before the initial build when using lume --serve.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/docs/core/events.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nsite.addEventListener(\"beforeBuild\", () => {\n  console.log(\"The build is about to start\");\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Google Fonts Plugin in Lume Configuration\nDESCRIPTION: Basic setup for the Google Fonts plugin in the Lume _config.ts file. This example shows how to import the plugin and configure it with a Google Fonts sharing URL for Playfair Display font.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/plugins/google_fonts.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport lume from \"lume/mod.ts\";\nimport googleFonts from \"lume/plugins/google_fonts.ts\";\n\nconst site = lume();\n\nsite.use(googleFonts({\n  fonts:\n    \"https://fonts.google.com/share?selection.family=Playfair+Display:ital,wght@0,400..900;1,400..900\",\n}));\n\nexport default site;\n```\n\n----------------------------------------\n\nTITLE: Configuring Fields with Extra Options in LumeCMS (TypeScript)\nDESCRIPTION: Example of configuring LumeCMS fields with additional options like labels, descriptions, and attributes.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/cms/configuration/fields.md#2025-04-21_snippet_4\n\nLANGUAGE: ts\nCODE:\n```\n[\n  {\n    name: \"title\",\n    type: \"text\",\n    label: \"Title of the page\",\n    description: \"It will be visible in the browser tab\",\n    attributes: {\n      required: true,\n      maxlength: 100,\n    },\n  },\n  {\n    name: \"date\",\n    type: \"datetime\",\n    label: \"Created date\",\n    value: new Date(),\n    description: \"Set a future date if you want to publish it later\",\n    attributes: {\n      placeholder: \"For example: 2024-01-01 00:00:01\",\n    },\n  },\n  {\n    name: \"content\",\n    type: \"markdown\",\n    label: \"Page content\",\n    value: \"Write **markdown** code here\",\n    description:\n      `<a target=\"_blank\" href=\"https://www.markdownguide.org\">More info about markdown syntax</a>`,\n  },\n];\n```\n\n----------------------------------------\n\nTITLE: Basic Date Filter Usage in Vento Templates\nDESCRIPTION: Demonstrates the basic usage of the date filter in Vento templates to format datetime values.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/plugins/date.md#2025-04-21_snippet_0\n\nLANGUAGE: vento\nCODE:\n```\n<time>{{ createdAt |> date }}</time>\n```\n\n----------------------------------------\n\nTITLE: Displaying Lume Version Badge in Markdown\nDESCRIPTION: This code snippet shows how to create a badge in Markdown that displays the current version of Lume from GitHub releases.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/README.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[![Lume version](https://img.shields.io/github/v/release/lumeland/lume?logo=github&label=Lume)](https://github.com/lumeland/lume/releases)\n```\n\n----------------------------------------\n\nTITLE: Creating a Page with YAML Format\nDESCRIPTION: Example of a YAML file that defines a page with title, layout, intro text, and a structured array of sections. This demonstrates how YAML can organize complex content for a landing page.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/plugins/yaml.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ntitle: Welcome to my page\nlayout: layouts/main.vto\nintro: |\n  This is my first post using lume\n  I hope you like it!\n\nsections:\n  - title: Design\n    image: img/section1.jpg\n    text: I design beautiful and accessible websites\n\n  - title: Development\n    image: img/section2.jpg\n    text: And can write HTML and CSS code!\n```\n\n----------------------------------------\n\nTITLE: Configuring Choose List Field in TypeScript\nDESCRIPTION: TypeScript configuration for a 'choose-list' field named 'blocks' that allows users to add, remove, and reorder title and content elements in the CMS.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/cms/fields/choose-list.md#2025-04-21_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\n{\n  name: \"blocks\",\n  type: \"choose-list\",\n  fields: [\n    {\n      name: \"title\",\n      type: \"object\",\n      fields: [\n        \"text: text\"\n      ]\n    },\n    {\n      name: \"content\",\n      type: \"object\",\n      fields: [\n        \"body: markdown\"\n      ]\n    },\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic Select Field in Lume (TypeScript)\nDESCRIPTION: This snippet demonstrates how to configure a basic select field in Lume. It defines a 'status' field with three options: 'enabled', 'disabled', and 'unknown'.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/cms/fields/select.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  name: \"status\",\n  type: \"select\",\n  options: [\n    \"enabled\",\n    \"disabled\",\n    \"unknown\",\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Activity Streams 2.0 Redirection with Lume HTTP Server\nDESCRIPTION: This code snippet shows how to set up a Lume HTTP server with the redirectAS2 middleware. It imports the necessary modules, creates a server instance, configures the redirection with the bridgyFed helper function, and starts the server.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/plugins/redirect_as2.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport Server from \"lume/core/server.ts\";\nimport redirectAS2, { bridgyFed } from \"lume/middlewares/redirect_as2.ts\";\n\nconst server = new Server();\n\nconst rewriteUrl = bridgyFed();\n\nserver.use(redirectAS2({ rewriteUrl }));\n\nserver.start();\n```\n\n----------------------------------------\n\nTITLE: Generating Multiple Files with a Single Archetype in TypeScript\nDESCRIPTION: This example demonstrates how to create an archetype that generates multiple files, including a data file and several pages, using a generator function.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/docs/core/archetypes.md#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// _archetypes/section.ts\n\nexport default function* (title: string) {\n  const slug = title.replace(/\\s+/g, \"-\").toLowerCase();\n\n  // Create the shared data\n  yield {\n    path: `/pages/${slug}/_data.yml`,\n    content: {\n      layout: \"section.vto\",\n      section_title: title,\n    },\n  };\n\n  // Create 3 more pages\n  const pages = [1, 2, 3];\n  for (const page of pages) {\n    yield {\n      path: `/pages/${slug}/${page}.md`,\n      content: {\n        title: `Page ${page}`,\n        content: \"Write the content here\",\n      },\n    };\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Multiple Relations Example\nDESCRIPTION: Example of how to relate a page to multiple other pages using an array in the foreign key.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/plugins/relations.md#2025-04-21_snippet_5\n\nLANGUAGE: yml\nCODE:\n```\n---\ntitle: This is the title\ntype: article\nid: 1\nauthor_id: [1, 2]\n---\n\nContent of the article\n```\n\n----------------------------------------\n\nTITLE: Enabling External URL Checking in Check URLs Plugin (JavaScript)\nDESCRIPTION: This snippet shows how to configure the Check URLs plugin to check external links in addition to internal links. This option can make the build process slower, especially with many external links.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/plugins/check_urls.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nsite.use(checkUrls({\n  external: true,\n}));\n```\n\n----------------------------------------\n\nTITLE: Multilanguage Pagination Implementation\nDESCRIPTION: JavaScript code showing how to implement pagination with multilanguage support.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/plugins/multilanguage.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nexport const layout = \"layouts/my-layout.vto\";\n\nexport default function* ({ search, paginate }) {\n  const langs = [\"gl\", \"en\"];\n\n  for (const lang of langs) {\n    const pages = search.pages(`type=article lang=${lang}`);\n\n    yield* paginate(pages, {\n      url: (n) => `/${lang}/articles/${n}/`,\n      each(page, number) {\n        page.lang = lang;\n        page.id = `articles-page-${number}`;\n      },\n    });\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Date Format in Vento Template\nDESCRIPTION: Example of using a custom date format string in Vento templates.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/plugins/date.md#2025-04-21_snippet_2\n\nLANGUAGE: vento\nCODE:\n```\n<time>{{ createdAt |> date('MM/dd/yyyy') }}</time>\n```\n\n----------------------------------------\n\nTITLE: Configuring Component Output Files\nDESCRIPTION: Configuration to change the default output paths for component CSS and JS files in Lume 3.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/docs/advanced/migrate-to-lume3.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// Back to Lume 2 defaults:\nconst site = lume({\n  components: {\n    cssFile: \"/components.css\",\n    jsFile: \"/components.js\",\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Page Data in Markdown\nDESCRIPTION: Example of defining page data using YAML front matter in a Markdown file, showing basic title and URL configuration.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/docs/creating-pages/page-data.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: This is the title\nurl: custom-url.html\n---\n\nThis is the page content\n```\n\n----------------------------------------\n\nTITLE: Setting Predefined Options for a Text Field in Lume (TypeScript)\nDESCRIPTION: This example shows how to set up predefined options for a text field, which will be suggested to the user. It creates a datalist element with the specified options.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/cms/fields/text.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  name: \"name\",\n  type: \"text\",\n  options: [\n    \"Óscar\",\n    \"Laura\",\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Exporting Content in JavaScript Module\nDESCRIPTION: Demonstrates how to export a function as 'content' instead of a default export in a JavaScript module for Lume.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/docs/advanced/the-data-model.md#2025-04-21_snippet_3\n\nLANGUAGE: js\nCODE:\n```\n// This works\nexport function content({ title }) {\n  return `<h1>${title}</h1>`;\n}\n```\n\n----------------------------------------\n\nTITLE: Dynamic Page Removal in TypeScript\nDESCRIPTION: Shows how to remove pages dynamically based on specific criteria.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/docs/core/processors.md#2025-04-21_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nsite.process([\".html\"], (filteredPages, allPages) => {\n  for (const page of filteredPages) {\n    if (page.data.lang === \"en\") {\n      // Search the page in allPages array and remove it\n      allPages.splice(allPages.indexOf(page), 1);\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Document-Relative File Storage Configuration\nDESCRIPTION: Advanced configuration showing how to store uploaded files in the same directory as their associated documents using placeholders.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/cms/fields/file.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// Set a upload entity in `src:posts`\ncms.upload(\"posts-images\", \"src:posts\");\n\n// Save the posts in the same directory (`src:posts`)\ncms.collection({\n  name: \"posts\",\n  store: \"src:posts/**/index.md\",\n  // Force a new folder per post\n  documentName: \"{title}/index.yml\",\n  fields: [\n    \"title: text\",\n    \"content: markdown\",\n    {\n      name: \"cover\",\n      type: \"file\",\n      // Store the image in the same folder of the post\n      upload: \"posts-images:{document_dirname}\",\n    },\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Lume Inline Plugin\nDESCRIPTION: Shows how to import and configure the inline plugin in the Lume configuration file.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/plugins/inline.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport lume from \"lume/mod.ts\";\nimport inline from \"lume/plugins/inline.ts\";\n\nconst site = lume();\n\nsite.use(inline(/* Options */));\n\nexport default site;\n```\n\n----------------------------------------\n\nTITLE: Importing Slugify Plugin in Lume\nDESCRIPTION: This code snippet demonstrates how to import and use the slugify URLs plugin in a Lume configuration file. The plugin is essential for converting URLs by removing conflicting characters.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/plugins/slugify_urls.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport lume from \"lume/mod.ts\";\nimport slugifyUrls from \"lume/plugins/slugify_urls.ts\";\n\nconst site = lume();\n\nsite.use(slugifyUrls());\n\nexport default site;\n```\n\n----------------------------------------\n\nTITLE: Basic Page with URL in Front Matter\nDESCRIPTION: A simple YAML front matter example showing a page with a defined URL. This represents a basic page before adding any redirect configuration.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/plugins/redirects.md#2025-04-21_snippet_1\n\nLANGUAGE: yml\nCODE:\n```\n---\nurl: /articles/hello/\n---\n```\n\n----------------------------------------\n\nTITLE: Basic File Field Configuration in TypeScript\nDESCRIPTION: Basic configuration for a file upload field that stores files in an 'uploads' directory.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/cms/fields/file.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  name: \"image\",\n  type: \"file\",\n  uploads: \"uploads\",\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring a List Field in TypeScript for Lume CMS\nDESCRIPTION: TypeScript configuration for a 'list' field in Lume CMS. This setup allows users to add, remove, and reorder string elements in the CMS interface.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/cms/fields/list.md#2025-04-21_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\n{\n  name: \"ingredients\",\n  type: \"list\",\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Object Mode Merging\nDESCRIPTION: Configuration of object mode merging using mergedKeys in root _data file.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/docs/core/merged-keys.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nmergedKeys:\n  site: object\n\nsite:\n  title: My humble site\n  author: Oscar Otero\n```\n\n----------------------------------------\n\nTITLE: Markdown with Automatic Variables\nDESCRIPTION: Demonstrates how a simple Markdown file is processed with Lume's automatic variables (url, date, basename) added.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/docs/advanced/the-data-model.md#2025-04-21_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\nHello **world**\n```\n\nLANGUAGE: js\nCODE:\n```\n{\n  url: \"/posts/hello-world/\",\n  date: Date(\"2023-11-30 00:00:00\"),\n  basename: \"hello-world\",\n  content: \"Hello **world**\"\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Page Creation with JavaScript\nDESCRIPTION: Basic example of creating a page using JavaScript modules with title, layout and content exports.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/plugins/modules.md#2025-04-21_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport const title = \"Welcome to my page\";\nexport const layout = \"layouts/main.vto\";\n\nexport default \"This is my first post using lume. I hope you like it!\";\n```\n\n----------------------------------------\n\nTITLE: Configuring Terser Plugin in Lume 2 and 3\nDESCRIPTION: Demonstrates the changes in configuring the Terser plugin between Lume 2 and Lume 3. In Lume 3, you need to explicitly add the files to be minified using site.add() before using the plugin.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/docs/advanced/migrate-to-lume3.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n// Lume 2\nsite.use(terser());\n\n// Lume 3\nsite.add([\".js\", \".ts\"]); // Add the files to minify\nsite.use(terser());\n```\n\n----------------------------------------\n\nTITLE: Configuring Base Path for Multiple File Types\nDESCRIPTION: Configuration example showing how to extend the base_path plugin to process both HTML and CSS files.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/plugins/base_path.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nsite.use(basePath({\n  extensions: [\".html\", \".css\"], // Fix URLs inside HTML and CSS files\n}));\n```\n\n----------------------------------------\n\nTITLE: Default Slugify Options\nDESCRIPTION: This code snippet defines the default options for the slugify plugin, allowing customization of its behavior, such as character replacements and separator usage.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/plugins/slugify_urls.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nsite.use(slugifyUrls({\n  lowercase: true, // Converts all characters to lowercase\n  alphanumeric: true, // Replace non-alphanumeric characters with their equivalent. Example: ñ to n.\n  separator: \"-\", // Character used as separator for words\n  stopWords: [\"and\", \"or\", \"the\"], // A list of words not included in the slug\n  replace: { // An object with individual character replacements\n    \"Ð\": \"D\", // eth\n    \"ð\": \"d\",\n    \"Đ\": \"D\", // crossed D\n    \"đ\": \"d\",\n    \"ø\": \"o\",\n    \"ß\": \"ss\",\n    \"æ\": \"ae\",\n    \"œ\": \"oe\",\n  },\n}));\n```\n\n----------------------------------------\n\nTITLE: Ignored Files Configuration in JavaScript\nDESCRIPTION: Shows how to handle file ignoring when copying static files, including handling of files starting with underscores and dots.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/docs/configuration/copy-static-files.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// Ignore a subfolder\nsite.ignore(\"/files/pictures/\");\n\n// Copy the /files/ folder.\n// Note that the /files/pictures/ folder is ignored,\n// in addition to all files starting with . and _\nsite.copy(\"/files/\");\n```\n\n----------------------------------------\n\nTITLE: Defining Required Fields in LumeCMS (TypeScript)\nDESCRIPTION: TypeScript code demonstrating how to mark a field as required in LumeCMS configuration.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/cms/configuration/fields.md#2025-04-21_snippet_3\n\nLANGUAGE: ts\nCODE:\n```\ncms.document(\"happy-2024\", \"src:happy-2024.yml\", [\n  \"title: text!\", // This value is required\n  \"date: datetime\",\n  \"content: markdown\",\n]);\n```\n\n----------------------------------------\n\nTITLE: Basic Radio Field Configuration in TypeScript\nDESCRIPTION: Basic example of configuring a radio field with simple string options for selection.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/cms/fields/radio.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  name: \"status\",\n  type: \"radio\",\n  options: [\n    \"enabled\",\n    \"disabled\",\n    \"unknown\",\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: Example Page Structure for Relations\nDESCRIPTION: A set of example Markdown files showing how to structure pages with relation metadata for articles and authors.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/plugins/relations.md#2025-04-21_snippet_2\n\nLANGUAGE: yml\nCODE:\n```\n---\nid: 1\ntype: article\nauthor_id: 2\n---\n\nContent of article 1, by Laura\n```\n\nLANGUAGE: yml\nCODE:\n```\n---\nid: 2\ntype: article\nauthor_id: 2\n---\n\nContent of article 2, by Laura\n```\n\nLANGUAGE: yml\nCODE:\n```\n---\nid: 3\ntype: article\nauthor_id: 1\n---\n\nContent of article 3, by Óscar\n```\n\nLANGUAGE: yml\nCODE:\n```\n---\nid: 1\ntype: author\ntitle: Óscar Otero\n---\n\nBio of Óscar\n```\n\nLANGUAGE: yml\nCODE:\n```\n---\nid: 2\ntype: author\ntitle: Laura Rubio\n---\n\nBio of Laura\n```\n\n----------------------------------------\n\nTITLE: Accessing Shared Data in Vento Template\nDESCRIPTION: Demonstrates how to use shared data (specifically, the 'documents' object) within a Vento template file. It iterates over the documents and displays their titles.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/docs/creating-pages/shared-data.md#2025-04-21_snippet_3\n\nLANGUAGE: vento\nCODE:\n```\n<h2>Documents</h2>\n\n<ul>\n{{ for doc of documents }}\n  <li>\n    {{ doc.title }}\n  </li>\n{{ /for }}\n</ul>\n```\n\n----------------------------------------\n\nTITLE: Configuring Error Logging in LumeCMS\nDESCRIPTION: Setting up error logging configuration with a specified log file.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/cms/configuration/options.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst cms = lumeCMS({\n  log: {\n    filename: \"errors.log\",\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Customizing Terser Options in Lume\nDESCRIPTION: Demonstrates how to customize the Terser minification options in Lume. This example shows how to disable the default module setting while keeping other defaults.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/plugins/terser.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport terser from \"lume/plugins/terser.ts\";\n\nsite.use(terser({\n  options: {\n    module: false,\n  },\n}));\n```\n\n----------------------------------------\n\nTITLE: Installing the Sheets Plugin in Lume\nDESCRIPTION: Basic configuration to import and use the sheets plugin in a Lume site. This imports the plugin and adds it to the site configuration.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/plugins/sheets.md#2025-04-21_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nimport lume from \"lume/mod.ts\";\nimport sheets from \"lume/plugins/sheets.ts\";\n\nconst site = lume();\n\nsite.use(sheets());\n\nexport default site;\n```\n\n----------------------------------------\n\nTITLE: Setting Log Level to Critical in Lume\nDESCRIPTION: This command sets the log level for Lume to 'critical', which will only show critical errors and hide all other log messages. It uses the LUME_LOGS environment variable.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/docs/configuration/env-variables.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nLUME_LOGS=critical deno task lume\n```\n\n----------------------------------------\n\nTITLE: Customizing CMS Appearance with Extra HTML\nDESCRIPTION: Adding custom HTML and CSS to the CMS interface using the extraHead option.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/cms/configuration/options.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst cms = lumeCMS({\n  extraHead: `\n<style>\n  body {\n    color: pink;\n  }\n</style>\n  `,\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Decap CMS Plugin in TypeScript\nDESCRIPTION: Demonstrates how to update the configuration for the Netlify CMS plugin, which has been renamed to Decap CMS in Lume 2.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/docs/advanced/migrate-to-lume2.md#2025-04-21_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n// Lume 1\nsite.use(netlifyCMS({\n  netlifyIdentity: true,\n}));\n\n// Lume 2\nsite.use(decapCMS({\n  identity: \"netlify\",\n}));\n```\n\n----------------------------------------\n\nTITLE: Configuring Date Field in Lume CMS (TypeScript)\nDESCRIPTION: This snippet demonstrates how to configure a date field named 'published' in Lume CMS. The field will be rendered as an HTML input element of type 'date' in the user interface.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/cms/fields/date.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  name: \"published\",\n  type: \"date\",\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Custom Element Implementation\nDESCRIPTION: Shows the basic structure of creating a custom element by extending the Component class from LumeCMS. Demonstrates the initialization setup for a custom web component.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/cms/configuration/custom_fields.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Component } from \"lume_cms/components/component.js\";\n\ncustomElements.define(\n  \"percentage-field\",\n  class extends Component {\n    init() {\n      // Here your code\n    }\n  },\n);\n```\n\n----------------------------------------\n\nTITLE: JSON Page Configuration\nDESCRIPTION: Example of defining page data using a JSON file format.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/docs/creating-pages/page-data.md#2025-04-21_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"title\": \"This is the title\",\n  \"url\": \"custom-url.html\",\n  \"content\": \"This is the page content\"\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Pagefind CSS Styles\nDESCRIPTION: CSS variables for customizing the appearance of the Pagefind UI component.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/plugins/pagefind.md#2025-04-21_snippet_3\n\nLANGUAGE: css\nCODE:\n```\n:root {\n  --pagefind-ui-scale: 1;\n  --pagefind-ui-primary: #034ad8;\n  --pagefind-ui-text: #393939;\n  --pagefind-ui-background: #ffffff;\n  --pagefind-ui-border: #eeeeee;\n  --pagefind-ui-tag: #eeeeee;\n  --pagefind-ui-border-width: 2px;\n  --pagefind-ui-border-radius: 8px;\n  --pagefind-ui-image-border-radius: 8px;\n  --pagefind-ui-image-box-ratio: 3 / 2;\n  --pagefind-ui-font: sans-serif;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Dynamic Views in LumeCMS Collections (TypeScript)\nDESCRIPTION: This example shows how to use the views option to dynamically control which fields are visible based on whether a document is being created or edited.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/cms/configuration/collections.md#2025-04-21_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\ncms.collection({\n  name: \"countries\",\n  store: \"src:countries/*.yml\",\n  views(data) {\n    if (data) {\n      // Editing document, show the full view\n      return [\"full\"];\n    }\n  },\n  fields: [\n    \"title: text\",\n    {\n      type: \"markdown\",\n      name: \"content\",\n      view: \"full\", // This field is only visible if the \"full\" view is active\n    },\n  ],\n  create: false,\n  delete: false,\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Icon Output Folder (JavaScript)\nDESCRIPTION: This code snippet shows how to configure a custom output folder for downloaded icon files using the 'folder' option in the Icons plugin configuration.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/plugins/icons.md#2025-04-21_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nsite.use(icons({\n  folder: \"/img/icons\",\n}));\n```\n\n----------------------------------------\n\nTITLE: Setting Open Graph Layout in YAML Frontmatter\nDESCRIPTION: YAML frontmatter configuration to specify the layout file used for generating Open Graph images.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/plugins/og_images.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n---\nopenGraphLayout: /layouts/og_images.jsx\n---\n```\n\n----------------------------------------\n\nTITLE: Non-Pretty URL Output Example - TXT\nDESCRIPTION: Shows the resulting file path when pretty URLs are disabled\nSOURCE: https://github.com/lumeland/lume.land/blob/main/docs/creating-pages/urls.md#2025-04-21_snippet_2\n\nLANGUAGE: txt\nCODE:\n```\n/posts/my-first-post.md  =>  /posts/my-first-post.html\n```\n\n----------------------------------------\n\nTITLE: Configuring Git Integration Options in LumeCMS\nDESCRIPTION: Example of customizing Git integration settings, specifically changing the production branch name to 'master'.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/cms/configuration/git.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ncms.git({\n  prodBranch: \"master\", // Change the production branch\n});\n```\n\n----------------------------------------\n\nTITLE: Customizing Document Label in LumeCMS\nDESCRIPTION: This example shows how to set a custom label for a document in the CMS menu. The label option allows you to display a different name than the internal document name.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/cms/configuration/documents.md#2025-04-21_snippet_3\n\nLANGUAGE: ts\nCODE:\n```\ncms.document({\n  name: \"landing-page\",\n  label: \"This is your homepage\",\n  description: \"Edit the content of the home page\",\n  store: \"src:index.yml\",\n  fields: [\n    \"title: text\",\n    \"subtitle: text\",\n    \"content: markdown\",\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring File System Storage in LumeCMS with Full Syntax\nDESCRIPTION: Example showing how to configure a file system storage named 'my_files' using the Fs class explicitly. This approach provides full control over the storage configuration.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/cms/configuration/storage.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport lumeCMS, { Fs } from \"lume/cms/mod.ts\";\n\nconst cms = lumeCMS();\nconst root = Deno.cwd() + \"/files\";\n\ncms.storage(\"my_files\", new Fs({ root }));\n\nexport default cms;\n```\n\n----------------------------------------\n\nTITLE: Defining Front Matter Variables in Markdown\nDESCRIPTION: Example of a Markdown file with front matter defining a title variable and page content. The front matter section uses YAML syntax to define layout and title variables.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/docs/getting-started/page-data.md#2025-04-21_snippet_0\n\nLANGUAGE: yml\nCODE:\n```\n---\nlayout: layout.vto\ntitle: This is my website\n---\n# Welcome to my website\n\nThis if my first page using **Lume,**\na static site generator for Deno.\n\nI hope you enjoy it.\n```\n\n----------------------------------------\n\nTITLE: Package.json Configuration for Deploying Lume Sites on Kinsta\nDESCRIPTION: JSON configuration for Node.js package that enables running Lume on Kinsta hosting. It includes a build script that runs the Lume task and installs the Deno binary.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/docs/advanced/deployment.md#2025-04-21_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"scripts\": {\n    \"build\": \"deno task lume\"\n  },\n  \"devDependencies\": {\n    \"deno-bin\": \"^1.37.2\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Precompress Middleware for Lume's Development Server in JavaScript\nDESCRIPTION: This snippet shows how to configure Lume's development server to use the Precompress middleware. It's added to the site configuration in the _config.ts file.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/plugins/precompress.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport lume from \"lume/mod.ts\";\nimport precompress from \"lume/middlewares/precompress.ts\";\n\nconst site = lume({\n  server: {\n    middlewares: [precompress()],\n  },\n});\n\nexport default site;\n```\n\n----------------------------------------\n\nTITLE: Human-Readable Date Format Example\nDESCRIPTION: Shows how to use predefined human-readable date formats with the datetime attribute.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/plugins/date.md#2025-04-21_snippet_3\n\nLANGUAGE: vento\nCODE:\n```\n<time datetime=\"{{ createdAt | date }}\">\n  {{ createdAt |> date('HUMAN_DATE') }}\n</time>\n```\n\n----------------------------------------\n\nTITLE: Configure Pretty URLs in Lume - JavaScript\nDESCRIPTION: Shows how to disable pretty URLs in Lume configuration, causing pages to be generated with .html extensions instead of directories\nSOURCE: https://github.com/lumeland/lume.land/blob/main/docs/creating-pages/urls.md#2025-04-21_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nconst site = lume({\n  prettyUrls: false,\n});\n```\n\n----------------------------------------\n\nTITLE: Handling Git Version Events in LumeCMS\nDESCRIPTION: Example of adding an event listener for version publishing events in LumeCMS, demonstrating how to handle Git-related events.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/cms/configuration/git.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\naddEventListener(\"cms:versionPublished\", (ev) => {\n  const { name } = ev.details;\n\n  console.log(`The version ${name} was published`);\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Page Tags in YAML Front Matter\nDESCRIPTION: Example of how to assign multiple tags to a page using YAML front matter. Shows setting both a content type tag ('post') and a topic tag ('ssg').\nSOURCE: https://github.com/lumeland/lume.land/blob/main/docs/creating-pages/tags.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: The history of static site generators\ntags:\n  - post\n  - ssg\n---\n```\n\n----------------------------------------\n\nTITLE: Configuring Color Field in TypeScript\nDESCRIPTION: Configuration object for defining a color field in Lume CMS. The field provides a color picker input and text box for manual color code entry.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/cms/fields/color.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  name: \"background_color\",\n  type: \"color\",\n}\n```\n\n----------------------------------------\n\nTITLE: Generated URL Structure from Order Prefixes\nDESCRIPTION: Shows the default URL structure that Lume generates from files with numbered prefixes when no basename parser is used.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/docs/core/basename-parsers.md#2025-04-21_snippet_1\n\nLANGUAGE: txt\nCODE:\n```\n/1.welcome/\n/2.introduction/\n/3.the-basics/\n/4.advanced/\n```\n\n----------------------------------------\n\nTITLE: Configuring Deno Vendoring\nDESCRIPTION: Modified Deno configuration to enable local vendoring of dependencies using DENO_DIR\nSOURCE: https://github.com/lumeland/lume.land/blob/main/docs/overview/installation.md#2025-04-21_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"tasks\": {\n    \"lume\": \"echo \\\"import 'lume/cli.ts'\\\" | DENO_DIR=_vendor deno run -A -\",\n    \"build\": \"deno task lume\",\n    \"serve\": \"deno task lume -s\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up Multiple Redirects with an Array\nDESCRIPTION: This YAML front matter demonstrates how to set up multiple redirects by using an array for the oldUrl property, allowing multiple old URLs to redirect to the same destination.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/plugins/redirects.md#2025-04-21_snippet_3\n\nLANGUAGE: yml\nCODE:\n```\n---\nurl: /hello/\noldUrl:\n  - /articles/hello/\n  - /articles/older-hello/\n---\n```\n\n----------------------------------------\n\nTITLE: Configuring Current Datetime Field in Lume (TypeScript)\nDESCRIPTION: This snippet shows how to configure a basic current-datetime field in Lume. The field will automatically update with the current date and time whenever the document is saved, making it useful for tracking the last modification time of content.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/cms/fields/current-datetime.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  name: \"last_modified\",\n  type: \"current-datetime\",\n}\n```\n\n----------------------------------------\n\nTITLE: Deploying Lume Sites with rsync Command\nDESCRIPTION: Shell command that runs the deploy task defined in deno.json to build and deploy a Lume site using rsync.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/docs/advanced/deployment.md#2025-04-21_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ndeno task deploy\n```\n\n----------------------------------------\n\nTITLE: Setting Up a Single Redirect with oldUrl\nDESCRIPTION: This YAML front matter shows how to set up a single redirect by defining the new URL destination and the old URL that should redirect to it using the oldUrl property.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/plugins/redirects.md#2025-04-21_snippet_2\n\nLANGUAGE: yml\nCODE:\n```\n---\nurl: /hello/\noldUrl: /articles/hello/\n---\n```\n\n----------------------------------------\n\nTITLE: Blocks Field Configuration Example - TypeScript\nDESCRIPTION: Example configuration for defining a blocks field named 'content' in Lume CMS.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/cms/fields/blocks.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  name: \"content\",\n  type: \"blocks\",\n}\n```\n\n----------------------------------------\n\nTITLE: JavaScript Asset Processing\nDESCRIPTION: Example of processing JavaScript files and modifying their output filename.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/docs/core/processors.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nsite.process([\".js\"], function (pages) {\n  for (const page of pages) {\n    page.content = myBundler(page.content);\n\n    // Append .min to the filename\n    // so it will be saved as example.min.js\n    page.data.url = page.data.url.replace(/\\.js$/, \".min.js\");\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Advanced Document Naming with Function in LumeCMS (TypeScript)\nDESCRIPTION: This snippet demonstrates how to use a function for more complex document naming logic, combining multiple field values to generate the file name.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/cms/configuration/collections.md#2025-04-21_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\ncms.collection({\n  name: \"posts\",\n  store: \"src:posts/*.md\",\n  fields: [\n    \"title: text!\",\n    \"author: text!\",\n    \"content: markdown\",\n  ],\n  documentName(data) {\n    return `${data.title}-${data.author}.md`;\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Searching Pages with Tags Containing Spaces in Vento\nDESCRIPTION: Shows how to search for pages with tags that contain spaces by using quotes in the search query.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/plugins/search.md#2025-04-21_snippet_1\n\nLANGUAGE: vento\nCODE:\n```\n<ul>\n  {{ for post of search.pages(\"post 'static site generator'\") }}\n  <li>{{ post.title }}</li>\n  {{ /for }}\n</ul>\n```\n\n----------------------------------------\n\nTITLE: Configuring Checkbox Field in Lume\nDESCRIPTION: Configuration example for creating a checkbox field named 'draft' in Lume. This creates an input element of type checkbox that stores boolean values.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/cms/fields/checkbox.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  name: \"draft\",\n  type: \"checkbox\",\n}\n```\n\n----------------------------------------\n\nTITLE: Using Plaintext Filter with HTML Template\nDESCRIPTION: Example showing how to use the plaintext filter to remove Markdown syntax from a string. The example converts '**world**' to 'world'.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/plugins/plaintext.md#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n{{ \"Hello **world**\" |> plaintext }}\n\n<!-- Hello world -->\n```\n\n----------------------------------------\n\nTITLE: Creating CSS Styles for Lume Site\nDESCRIPTION: This CSS snippet defines basic styles for the body of the website, setting the font family, maximum width, and centering the content.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/docs/getting-started/working-with-assets.md#2025-04-21_snippet_0\n\nLANGUAGE: css\nCODE:\n```\nbody {\n  font-family: system-ui;\n  max-width: 40em;\n  margin: 2em auto;\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Create and Delete Operations in LumeCMS (TypeScript)\nDESCRIPTION: This snippet demonstrates how to disable the creation and deletion of items in a collection, useful for collections with a fixed number of items.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/cms/configuration/collections.md#2025-04-21_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\ncms.collection({\n  name: \"countries\",\n  store: \"src:countries/*.yml\",\n  fields: [\n    \"title: text\",\n    \"content: markdown\",\n  ],\n  create: false,\n  delete: false,\n});\n```\n\n----------------------------------------\n\nTITLE: Vento Template with Markdown Content\nDESCRIPTION: Example of using markdown content in a Vento template file.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/plugins/markdown.md#2025-04-21_snippet_6\n\nLANGUAGE: vento\nCODE:\n```\n<html>\n  <head>\n    <title>{{ title }}</title>\n  </head>\n  <body>\n    {{ content }}\n  </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Configuring Number Field in Lume CMS (TypeScript)\nDESCRIPTION: This snippet demonstrates how to configure a number field in Lume CMS. The field is named 'position' and is of type 'number'. This configuration will display an HTML input element of type 'number' in the user interface.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/cms/fields/number.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  name: \"position\",\n  type: \"number\",\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Sheets Plugin to Use 'First' Mode\nDESCRIPTION: Configuration to set the sheet mode to 'first', which only returns the first sheet found in each document. By default, the plugin uses 'auto' mode.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/plugins/sheets.md#2025-04-21_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nimport lume from \"lume/mod.ts\";\nimport sheets from \"lume/plugins/sheets.ts\";\n\nconst site = lume();\n\nsite.use(sheets({\n  sheets: \"first\", // Return the first sheet found in each document\n}));\n\nexport default site;\n```\n\n----------------------------------------\n\nTITLE: Customizing Collection Label in LumeCMS (TypeScript)\nDESCRIPTION: This example shows how to set a custom label for a collection, which is displayed in the CMS menu instead of the collection name.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/cms/configuration/collections.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ncms.collection({\n  name: \"posts\",\n  label: \"Your posts!\"\n  description: \"To create, edit or delete the posts of the blog\",\n  store: \"src:posts/*.md\",\n  fields: [\n    \"title: text\",\n    \"content: markdown\",\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Image Transformation in JavaScript\nDESCRIPTION: Shows how to update the configuration for image transformation, replacing the imagick plugin with transform_images in Lume 2.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/docs/advanced/migrate-to-lume2.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// Lume 1\nimport imagick from \"lume/plugins/imagick.ts\";\n\nsite.use(imagick());\n\n// Lume 2\nimport transformImages from \"lume/plugins/transform_images.ts\";\n\nsite.use(transformImages());\n```\n\n----------------------------------------\n\nTITLE: Direct Array Storage in YAML\nDESCRIPTION: Example of storing object list data directly as an array without a parent key in YAML.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/cms/fields/object-list.md#2025-04-21_snippet_2\n\nLANGUAGE: yml\nCODE:\n```\n- name: Óscar\n  surname: Otero\n- name: Laura\n  surname: Rubio\n```\n\n----------------------------------------\n\nTITLE: Updating Feed Plugin Configuration in TypeScript\nDESCRIPTION: Shows how to update the configuration for the Feed plugin in Lume 2, with renamed options for date handling.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/docs/advanced/migrate-to-lume2.md#2025-04-21_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n// Lume 1\nsite.use(feed({\n  info: {\n    date: \"=date\",\n  },\n  item: {\n    date: \"=date\",\n  },\n}));\n\n// Lume 2\nsite.use(feed({\n  info: {\n    updated: \"=date\",\n  },\n  item: {\n    updated: \"=date\",\n    published: \"=date\", // New option!\n  },\n}));\n```\n\n----------------------------------------\n\nTITLE: Using Icon Filter in HTML Templates (HTML)\nDESCRIPTION: This example demonstrates how to use the 'icon' filter in HTML templates to insert icons from the Bootstrap library. It shows the basic syntax for referencing an icon.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/plugins/icons.md#2025-04-21_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<img src=\"{{ \"fire\" |> icon(\"bootstrap\") }}\">\n```\n\n----------------------------------------\n\nTITLE: Customizing Document Labels in LumeCMS (TypeScript)\nDESCRIPTION: This example shows how to use the documentLabel function to customize the visible labels of documents in the collection list, removing file extensions.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/cms/configuration/collections.md#2025-04-21_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\ncms.collection({\n  name: \"posts\",\n  store: \"src:posts/*.md\",\n  fields: [\n    \"title: text!\",\n    \"author: text!\",\n    \"content: markdown\",\n  ],\n  documentLabel(name) {\n    return name.replace(\".md\", \"\");\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Generated HTML for Responsive Image with Multiple Sizes\nDESCRIPTION: This HTML snippet shows the output generated by the Picture plugin for a responsive image with multiple sizes. It includes <source> elements for different formats and sizes, with appropriate srcset and sizes attributes.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/plugins/picture.md#2025-04-21_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<picture>\n  <source\n    srcset=\"/flowers-640w.avif 640w, /flowers-1080w.avif 1080w\"\n    type=\"image/avif\"\n    sizes=\"(min-width: 640px) 18rem, 11rem\"\n  >\n  <source\n    srcset=\"/flowers-640w.webp 640w, /flowers-1080w.webp 1080w\"\n    type=\"image/webp\"\n    sizes=\"(min-width: 640px) 18rem, 11rem\"\n  >\n  <img\n    sizes=\"(min-width: 640px) 18rem, 11rem\"\n    src=\"/flowers-640w.jpg\"\n    srcset=\"/flowers-1080w.jpg 1080w\"\n  >\n</picture>\n```\n\n----------------------------------------\n\nTITLE: Executing Lume Build Command\nDESCRIPTION: Basic command to run Lume and initiate the build process.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/docs/advanced/order-of-operations.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nlume\n```\n\n----------------------------------------\n\nTITLE: Adding Description to a Collection in LumeCMS (TypeScript)\nDESCRIPTION: This snippet demonstrates how to add a description to a collection, which appears below the collection name in the CMS interface.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/cms/configuration/collections.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ncms.collection({\n  name: \"posts\",\n  description: \"To create, edit or delete the posts of the blog\",\n  store: \"src:posts/*.md\",\n  fields: [\n    \"title: text\",\n    \"content: markdown\",\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Using Custom Icon Catalog in HTML Templates (HTML)\nDESCRIPTION: This example shows how to use a custom icon catalog in HTML templates. It demonstrates the syntax for referencing an icon from a custom library with a specific variant.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/plugins/icons.md#2025-04-21_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<img src=\"{{ iconName |> icon(\"my-library\", \"filled\") }}\">\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic Datetime Field in TypeScript\nDESCRIPTION: This snippet shows how to configure a basic datetime field in Lume. It creates a field named 'published' of type 'datetime', which will display as an input of type 'datetime-local' in the UI.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/cms/fields/datetime.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  name: \"published\",\n  type: \"datetime\",\n}\n```\n\n----------------------------------------\n\nTITLE: Enhanced Percentage Field with Utils\nDESCRIPTION: Improved version of the percentage field implementation using the utils.push() function for DOM manipulation, demonstrating a more structured approach to element creation.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/cms/configuration/custom_fields.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Component } from \"lume_cms/components/component.js\";\nimport { push } from \"lume_cms/components/utils.js\";\n\ncustomElements.define(\n  \"percentage-field\",\n  class extends Component {\n    init() {\n      // Get the field info\n      const { schema, value, namePrefix } = this;\n\n      // Generate the name of the input and the id\n      const name = `${namePrefix}.${schema.name}`;\n      const id = `field_${name}`;\n\n      // Add the <label>\n      push(this, \"label\", { for: id }, schema.label);\n\n      // Add the <input type=\"number\">\n      push(this, \"input\", {\n        name,\n        value,\n        id,\n        type: \"number\",\n        min: 0,\n        max: 100,\n      });\n    }\n  },\n);\n```\n\n----------------------------------------\n\nTITLE: URL Lowercase Transformation Example\nDESCRIPTION: Example showing how to configure the modify_urls plugin to convert all URLs to lowercase using a custom transformation function.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/plugins/modify_urls.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport lume from \"lume/mod.ts\";\nimport modifyUrls from \"lume/plugins/modify_urls.ts\";\n\nconst site = lume();\n\nsite.use(modifyUrls({\n  fn: (url) => url.toLowerCase(),\n}));\n\nexport default site;\n```\n\n----------------------------------------\n\nTITLE: Configuring Import Map for LumeCMS Installation\nDESCRIPTION: This JSON snippet shows how to add LumeCMS to your site's import map. It includes the necessary import paths for Lume and LumeCMS.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/cms/index.md#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"imports\": {\n    \"lume/\": \"https://deno.land/x/lume@v2.3.2/\",\n    \"lume/cms/\": \"https://cdn.jsdelivr.net/gh/lumeland/cms@0.6.3/\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Deno Format Command\nDESCRIPTION: Command to format code according to Deno standards before committing changes\nSOURCE: https://github.com/lumeland/lume.land/blob/main/CONTRIBUTING.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndeno fmt\n```\n\n----------------------------------------\n\nTITLE: Defining Structured Author Data in YAML\nDESCRIPTION: Example of structured data representation for a list of authors using YAML format.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/cms/fields/object-list.md#2025-04-21_snippet_0\n\nLANGUAGE: yml\nCODE:\n```\nauthors:\n  - name: Óscar\n    surname: Otero\n  - name: Laura\n    surname: Rubio\n```\n\n----------------------------------------\n\nTITLE: Using Slugify in Templates\nDESCRIPTION: This snippet provides an example of how to utilize the slugify function in a template, enabling the creation of links with properly slugified paths.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/plugins/slugify_urls.md#2025-04-21_snippet_4\n\nLANGUAGE: vento\nCODE:\n```\n<a href=\"/archive/tag/{{ tag.name |> slugify }}\">{{ tag.name }}</a>\n```\n\n----------------------------------------\n\nTITLE: Simplified LumeCMS Document Field Configuration (TypeScript)\nDESCRIPTION: Simplified TypeScript code using string notation to configure LumeCMS document fields.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/cms/configuration/fields.md#2025-04-21_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\ncms.document(\"happy-2024\", \"src:happy-2024.yml\", [\n  \"title: text\",\n  \"date: datetime\",\n  \"content: markdown\",\n]);\n```\n\n----------------------------------------\n\nTITLE: Watching Lume Site Changes\nDESCRIPTION: Commands to enable file watching without starting a development server, showing both Deno task and Lume CLI methods.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/docs/overview/command-line.md#2025-04-21_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\ndeno task lume --watch\n\n# or with Lume CLI\nlume --watch\n```\n\n----------------------------------------\n\nTITLE: Customizing Upload Folder Label in LumeCMS\nDESCRIPTION: Demonstrates how to set a custom label for an upload folder in the CMS menu, different from its internal name. This allows for more user-friendly naming in the interface.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/cms/configuration/uploads.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ncms.upload({\n  name: \"images\",\n  label: \"Posts' images\",\n  description: \"Here you can manage all images of your posts\",\n  store: \"src:images\",\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring a Textarea Field in TypeScript\nDESCRIPTION: Example of how to configure a textarea field for storing a description with a maximum length of 1500 characters. The field creates a <textarea> element in the UI that allows for multiline text input.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/cms/fields/textarea.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  name: \"description\",\n  type: \"textarea\",\n  attributes: {\n    maxlength: 1500\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Temporal API in Deno\nDESCRIPTION: Configuration required in deno.json to enable the unstable Temporal API used by Lume 3.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/docs/advanced/migrate-to-lume3.md#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"unstable\": [\"temporal\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Markdown with Frontmatter using Archetype in TypeScript\nDESCRIPTION: This example demonstrates how to create an archetype that generates a markdown file with YAML frontmatter and content.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/docs/core/archetypes.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nexport default function () {\n  return {\n    path: \"/pages/example.md\",\n    content: {\n      title: \"Title content\",\n      content: \"Page content\",\n    },\n  };\n}\n```\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: Title content\n---\n\nPage content\n```\n\n----------------------------------------\n\nTITLE: HTML URL Before Base Path Processing\nDESCRIPTION: Example of HTML markup before the base_path plugin processes it.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/plugins/base_path.md#2025-04-21_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<a href=\"/articles/my-second-article/\">Go to the second article</a>\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Public Path for Upload Folder in LumeCMS\nDESCRIPTION: Shows how to configure a custom public path for files in an upload folder, useful when the built site structure differs from the source structure. In this example, files in '/assets' are moved to the root folder in the built site.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/cms/configuration/uploads.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ncms.upload({\n  name: \"images\",\n  store: \"src:images\",\n  publicPath: \"/\",\n});\n```\n\n----------------------------------------\n\nTITLE: Removing Cached Remote File in Lume (TypeScript)\nDESCRIPTION: This TypeScript code shows how to remove a cached remote file in Lume using the Web Cache API. It opens the cache for Lume's remote files and deletes a specific cached response.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/docs/core/remote-files.md#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// Open the cache of Lume's remote files\nconst cache = await caches.open(\"lume_remote_files\");\n\n// Remove the cache using the remote URL\nawait cache.delete(\"https://example.com/theme/styles.css\");\n```\n\n----------------------------------------\n\nTITLE: Converted ESM Imports After Processing\nDESCRIPTION: Shows how npm and JSR imports are converted to esm.sh URLs by the esbuild plugin. This is the transformed code that will be used in the bundled output.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/plugins/esbuild.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport classNames from \"https://esm.sh/classnames\";\nimport { concat } from \"https://esm.sh/classnames/jsr/@std/bytes/concat\";\n```\n\n----------------------------------------\n\nTITLE: Configuring Direct Array Storage in TypeScript\nDESCRIPTION: TypeScript configuration for storing object-list data directly as an array using the special '[]' name syntax.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/cms/fields/object-list.md#2025-04-21_snippet_3\n\nLANGUAGE: ts\nCODE:\n```\n{\n  name: \"[]\",\n  type: \"object-list\",\n  fields: [\n    \"name: text\",\n    \"surname: text\",\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Relations Plugin in Lume\nDESCRIPTION: Code snippet showing how to import and use the Relations plugin in a Lume site configuration file.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/plugins/relations.md#2025-04-21_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nimport lume from \"lume/mod.ts\";\nimport relations from \"lume/plugins/relations.ts\";\n\nconst site = lume();\n\nsite.use(relations(/* Options */));\n\nexport default site;\n```\n\n----------------------------------------\n\nTITLE: Running Deno Lint Command\nDESCRIPTION: Command to run linting checks on code before committing changes\nSOURCE: https://github.com/lumeland/lume.land/blob/main/CONTRIBUTING.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ndeno lint\n```\n\n----------------------------------------\n\nTITLE: Using Reading Info Variables in Templates\nDESCRIPTION: This example shows how to access and display reading statistics in Vento templates. The plugin provides word count and estimated reading time in minutes.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/plugins/reading_info.md#2025-04-21_snippet_1\n\nLANGUAGE: vento\nCODE:\n```\n<p>{{ readingInfo.words }} words</p>\n<p>{{ readingInfo.minutes }} min read</p>\n```\n\n----------------------------------------\n\nTITLE: Default Lume Task Configuration in deno.json\nDESCRIPTION: This snippet shows the default Lume task configuration in deno.json, which runs Lume with all permissions enabled using the -A flag.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/docs/advanced/permissions.md#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"importMap\": \"import_map.json\",\n  \"tasks\": {\n    \"lume\": \"echo \\\"import 'lume/cli.ts'\\\" | deno run -A -\",\n    \"build\": \"deno task lume\",\n    \"serve\": \"deno task lume -s\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Custom URL Path Generation - TXT\nDESCRIPTION: Shows how custom URL in front matter affects the output file path\nSOURCE: https://github.com/lumeland/lume.land/blob/main/docs/creating-pages/urls.md#2025-04-21_snippet_4\n\nLANGUAGE: txt\nCODE:\n```\n/posts/my-first-post.md  =>  /posts/welcome/index.html\n```\n\n----------------------------------------\n\nTITLE: Basename Configuration - YAML\nDESCRIPTION: Shows how to configure basename in _data.yml to modify URL generation patterns\nSOURCE: https://github.com/lumeland/lume.land/blob/main/docs/creating-pages/urls.md#2025-04-21_snippet_6\n\nLANGUAGE: yml\nCODE:\n```\nbasename: articles\n```\n\n----------------------------------------\n\nTITLE: Installing Plaintext Plugin in Lume Configuration\nDESCRIPTION: Configuration code showing how to import and enable the plaintext plugin in a Lume site's _config.ts file. The plugin uses the remove-markdown NPM package internally.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/plugins/plaintext.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport lume from \"lume/mod.ts\";\nimport plaintext from \"lume/plugins/plaintext.ts\";\n\nconst site = lume();\n\nsite.use(plaintext());\n\nexport default site;\n```\n\n----------------------------------------\n\nTITLE: Configuring Deno for Preact JSX (JSON)\nDESCRIPTION: This JSON configuration for Deno specifies the JSX compiler options to use Preact instead of React. It's needed when using the jsx_preact plugin with MDX in a Lume project.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/plugins/mdx.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"compilerOptions\": {\n  \"jsx\": \"react-jsx\",\n  \"jsxImportSource\": \"npm:preact\"\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Pagefind UI Component\nDESCRIPTION: Configuration code showing how to disable the default Pagefind UI component for custom implementations.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/plugins/pagefind.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport lume from \"lume/mod.ts\";\nimport pagefind from \"lume/plugins/pagefind.ts\";\n\nconst site = lume();\n\nsite.use(pagefind({\n  ui: false, // Don't insert the UI component\n}));\n\nexport default site;\n```\n\n----------------------------------------\n\nTITLE: Configuring Lume to Copy CSS Asset\nDESCRIPTION: This JavaScript snippet demonstrates how to configure Lume to copy the CSS file as an asset. It uses the copy() function to specify the file to be included in the build.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/docs/getting-started/working-with-assets.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport lume from \"lume/mod.ts\";\n\nconst site = lume();\n\nsite.copy(\"/styles.css\");\n\nexport default site;\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Tag with Body in Lume\nDESCRIPTION: Shows how to implement a custom tag that accepts a body content for uppercase conversion\nSOURCE: https://github.com/lumeland/lume.land/blob/main/docs/configuration/filters.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nsite.helper(\"uppercase\", (body) => body.toUpperCase(), {\n  type: \"tag\",\n  body: \"true\",\n});\n```\n\nLANGUAGE: javascript\nCODE:\n```\n{{ uppercase }}\nHello, {{ user.name }}\n{{ enduppercase }}\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Favicon Source in Lume\nDESCRIPTION: Configuration example showing how to specify a custom source file for favicon generation instead of the default favicon.svg file. This allows using different filenames or image formats as the source.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/plugins/favicon.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nsite.use(favicon({\n  input: \"/my-custom-favicon.png\",\n}));\n```\n\n----------------------------------------\n\nTITLE: Installing the Robots Plugin in Lume\nDESCRIPTION: This snippet shows how to import and configure the robots plugin in the Lume configuration file (_config.ts). The plugin allows for automatic generation of robots.txt files.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/plugins/robots.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport lume from \"lume/mod.ts\";\nimport robots from \"lume/plugins/robots.ts\";\n\nconst site = lume();\n\nsite.use(robots(/* Options */));\n\nexport default site;\n```\n\n----------------------------------------\n\nTITLE: Installing Check URLs Plugin in Lume Configuration (JavaScript)\nDESCRIPTION: This snippet shows how to import and use the Check URLs plugin in a Lume site configuration file. It demonstrates the basic setup for enabling URL checking in a Lume project.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/plugins/check_urls.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport lume from \"lume/mod.ts\";\nimport checkUrls from \"lume/plugins/check_urls.ts\";\n\nconst site = lume();\n\nsite.use(checkUrls(/* Options */));\n\nexport default site;\n```\n\n----------------------------------------\n\nTITLE: Custom Destination Functions in JavaScript\nDESCRIPTION: Shows how to use functions to customize file destinations during copying, including path transformations.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/docs/configuration/copy-static-files.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// Copy all files in the static directory but ensure they are lower case\nsite.copy(\"static\", (file) => file.toLowerCase());\n\n// Copy all images in the /img/ directory\nsite.copy([\".jpg\", \".gif\", \".png\"], (file) => \"/img\" + file);\n```\n\n----------------------------------------\n\nTITLE: Creating a Responsive Image with Picture Plugin\nDESCRIPTION: This HTML snippet shows how to use the transform-images attribute to specify desired formats and sizes for an image. The Picture plugin will generate the appropriate <picture> element with multiple <source> tags for different formats and resolutions.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/plugins/picture.md#2025-04-21_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<img src=\"/flowers.jpg\" transform-images=\"avif webp jpg 300@2\" />\n```\n\n----------------------------------------\n\nTITLE: Complete Data Object with Inherited Data\nDESCRIPTION: Shows the full Data object with all inherited data from _data files, components, and plugin variables.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/docs/advanced/the-data-model.md#2025-04-21_snippet_7\n\nLANGUAGE: js\nCODE:\n```\n{\n  url: \"/posts/hello-world/\",\n  date: Date(\"2023-11-30 00:00:00\"),\n  basename: \"hello-world\",\n  content: \"Hello **world**\",\n  search: Searcher(),\n  paginate: Paginate(),\n  comp: {}\n  // etc...\n}\n```\n\n----------------------------------------\n\nTITLE: Example HTML After SRI Application\nDESCRIPTION: The resulting HTML after the SRI plugin adds integrity and crossorigin attributes to the script tag for security.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/plugins/sri.md#2025-04-21_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<script\n  src=\"https://code.jquery.com/jquery-3.7.0.slim.min.js\"\n  integrity=\"sha256-tG5mcZUtJsZvyKAxYLVXrmjKBVLd6VpVccqz/r4ypFE=\"\n  crossorigin=\"anonymous\"\n></script>\n```\n\n----------------------------------------\n\nTITLE: Responsive Image Generation with Multiple Outputs\nDESCRIPTION: YAML configuration demonstrating how to generate multiple versions of the same image with different sizes and formats for responsive design.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/plugins/transform_images.md#2025-04-21_snippet_4\n\nLANGUAGE: yml\nCODE:\n```\ntransformImages:\n  - resize: [200, 200]\n    suffix: -small\n    format: [webp, jpg]\n  - resize: [1000, 1000]\n    format: webp\n  - resize: [2000, 2000]\n    suffix: -big\n    format: webp\n```\n\n----------------------------------------\n\nTITLE: Sorting Search Results by Custom Field in Vento\nDESCRIPTION: Example showing how to sort search results by a specific field ('title') instead of the default 'date' field.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/plugins/search.md#2025-04-21_snippet_3\n\nLANGUAGE: vento\nCODE:\n```\n<ul>\n  {{ for post of search.pages(\"post html\", \"title\") }}\n  <li>{{ post.title }}</li>\n  {{ /for }}\n</ul>\n```\n\n----------------------------------------\n\nTITLE: Running Multiple Sequential Commands in Lume\nDESCRIPTION: Shows two different methods to execute multiple commands in sequence: using multiple arguments or combining commands with &&.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/docs/core/scripts.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nsite.script(\n  \"save-site\",\n  \"gzip -r _site site.gz\",\n  \"scp site.gz user@host.com:/home/user/archive\",\n);\n\n// Alternative way using \"&&\"\nsite.script(\n  \"save-site\",\n  \"gzip -r _site site.gz && scp site.gz user@host.com:/home/user/archive\",\n);\n```\n\n----------------------------------------\n\nTITLE: Sorting by Multiple Fields in Vento\nDESCRIPTION: Demonstrates how to sort search results using multiple fields ('order' and 'title') for more precise ordering.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/plugins/search.md#2025-04-21_snippet_4\n\nLANGUAGE: vento\nCODE:\n```\n{{ for post of search.pages(\"post html\", \"order title\") }}\n  ...\n{{ /for }}\n```\n\n----------------------------------------\n\nTITLE: Using the Once Option with Event Listeners in Lume\nDESCRIPTION: This snippet demonstrates how to use the 'once' option to run an event listener only once and then remove it. This is similar to web APIs event options.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/docs/core/events.md#2025-04-21_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nsite.addEventListener(\"afterUpdate\", () => {\n  console.log(\"This is the first update\");\n}, {\n  once: true,\n});\n```\n\n----------------------------------------\n\nTITLE: Specifying Sort Direction in Vento\nDESCRIPTION: Example showing how to control sort direction by appending '=desc' or '=asc' to field names when sorting search results.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/plugins/search.md#2025-04-21_snippet_5\n\nLANGUAGE: vento\nCODE:\n```\n{{ for post of search.pages(\"post html\", \"order=asc title=desc\") }}\n  ...\n{{ /for }}\n```\n\n----------------------------------------\n\nTITLE: Using Dynamic Parameters in Templates\nDESCRIPTION: Example of a Vento template that uses dynamic parameters passed through the URL.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/plugins/on_demand.md#2025-04-21_snippet_5\n\nLANGUAGE: vento\nCODE:\n```\n---\nlayout: layout.vto\nondemand: true\nurl: /example/\n---\n\nHello {{ params.name }}\n```\n\n----------------------------------------\n\nTITLE: Configuring Markdown Field with Upload Option in JavaScript\nDESCRIPTION: Configuration for a markdown field that specifies an upload entity named 'images' to be used for file uploads. This restricts file uploads to only use the 'images' upload configuration.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/cms/fields/markdown.md#2025-04-21_snippet_1\n\nLANGUAGE: js\nCODE:\n```\n{\n  name: \"content\",\n  type: \"markdown\",\n  upload: \"images\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic Auth with Direct Passwords in LumeCMS\nDESCRIPTION: Demonstrates how to configure basic HTTP authentication by directly specifying usernames and passwords in an object passed to the auth() function.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/cms/configuration/auth.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ncms.auth({\n  user1: \"password1\",\n  user2: \"password2\",\n});\n```\n\n----------------------------------------\n\nTITLE: Disabling Upload Option for Markdown Field in JavaScript\nDESCRIPTION: Configuration for a markdown field with uploads explicitly disabled by setting the upload option to false.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/cms/fields/markdown.md#2025-04-21_snippet_2\n\nLANGUAGE: js\nCODE:\n```\n{\n  name: \"content\",\n  type: \"markdown\",\n  upload: false\n}\n```\n\n----------------------------------------\n\nTITLE: Alternative JavaScript Configuration\nDESCRIPTION: Alternative approach to defining page data using a default export in JavaScript.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/docs/creating-pages/page-data.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst data = {\n  url: \"/welcome.html\",\n  date: new Date(\"2021-01-01T03:24:00\"),\n  layout: \"layouts/post.vto\",\n  draft: true,\n  tags: [\"post\"],\n};\n\nexport default data;\n```\n\n----------------------------------------\n\nTITLE: Setting Default Value for Datetime Field in TypeScript\nDESCRIPTION: This example demonstrates how to set a default value for a datetime field. It creates a field named 'created_at' that automatically stores the current date and time when a new document is created.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/cms/fields/datetime.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  name: \"created_at\",\n  type: \"datetime\",\n  init(field) {\n    field.value = new Date();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Lume Server with Logger Middleware in TypeScript\nDESCRIPTION: This code shows how to create an HTTP server with Lume and add the logger middleware to display HTTP requests/responses in the console. This setup would typically be used in a serve entry point file.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/plugins/logger.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport Server from \"lume/core/server.ts\";\nimport logger from \"lume/middlewares/logger.ts\";\n\nconst server = new Server();\n\nserver.use(logger());\n\nserver.start();\n```\n\n----------------------------------------\n\nTITLE: Advanced Radio Field Configuration with Custom Labels\nDESCRIPTION: Extended example showing how to configure radio options with both simple strings and objects containing custom labels and values.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/cms/fields/radio.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  name: \"status\",\n  type: \"radio\",\n  options: [\n    \"enabled\",\n    \"disabled\",\n    {\n      label: \"Not known\",\n      value: \"unknown\"\n    },\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Git Integration in LumeCMS\nDESCRIPTION: Basic initialization of Git functionality in LumeCMS with default settings.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/cms/configuration/git.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ncms.git();\n```\n\n----------------------------------------\n\nTITLE: Routes Configuration JSON\nDESCRIPTION: Example of the automatically generated _routes.json file that maps URLs to their corresponding page files.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/plugins/on_demand.md#2025-04-21_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"/\": \"./index.vto\"\n}\n```\n\n----------------------------------------\n\nTITLE: Multiple Pages with Layout Configuration\nDESCRIPTION: Shows how to generate multiple pages using a shared layout with individual page data.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/docs/core/multiple-pages.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexport default function* () {\n  yield {\n    url: \"/page-1/\",\n    layout: \"layouts/article.vto\",\n    title: \"Article 1\",\n    body: \"Welcome to the article 1\",\n  };\n  yield {\n    url: \"/page-2/\",\n    layout: \"layouts/article.vto\",\n    title: \"Article 2\",\n    body: \"Welcome to the article 2\",\n  };\n  yield {\n    url: \"/page-3/\",\n    layout: \"layouts/article.vto\",\n    title: \"Article 3\",\n    body: \"Welcome to the article 3\",\n  };\n}\n```\n\nLANGUAGE: vento\nCODE:\n```\n---\nlayout: layouts/base.vto\n---\n\n<article>\n  <h1>{{ title }}</h1>\n  <div>\n    {{ body |> md }}\n  </div>\n</article>\n```\n\n----------------------------------------\n\nTITLE: Defining a List in YAML for Lume CMS\nDESCRIPTION: Example of how to structure a list of ingredients in YAML format for use with Lume CMS. This demonstrates the input format that the 'list' field type is designed to handle.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/cms/fields/list.md#2025-04-21_snippet_0\n\nLANGUAGE: yml\nCODE:\n```\ningredients:\n  - 4 potatoes\n  - 6 egg\n  - salt\n  - onion (optional)\n```\n\n----------------------------------------\n\nTITLE: Executing Scripts with Events in Lume\nDESCRIPTION: This snippet demonstrates how to execute scripts in events by passing a string with the script name. It shows creating a script and then executing it after building the site, as well as running a command directly.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/docs/core/events.md#2025-04-21_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\n// Create the script\nsite.script(\"compress\", \"gzip -r _site site.gz\");\n\n// Execute it after build the site\nsite.addEventListener(\"afterBuild\", \"compress\").\n\n// Or you can run any script directly\nsite.addEventListener(\"afterBuild\", \"gzip -r _site site.gz\").\n```\n\n----------------------------------------\n\nTITLE: Using the CSS Banner Plugin Hook in Lume Configuration\nDESCRIPTION: This snippet demonstrates how to use the 'changeCssBanner' hook exposed by the CSS banner plugin to modify the banner message after plugin installation in the Lume configuration file.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/docs/advanced/plugins.md#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport lume from \"lume/mod.ts\";\nimport cssBanner from \"./my-plugins/css_banner.ts\";\n\nconst site = lume();\n\nsite.use(cssBanner({\n  message: \"© This code belongs to ACME inc.\",\n}));\n\nsite.hooks.changeCssBanner(\"This code is open source\");\n\nexport default site;\n```\n\n----------------------------------------\n\nTITLE: Language-Specific Page Linking\nDESCRIPTION: Example of linking to pages in the current language using search.page() functionality.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/plugins/multilanguage.md#2025-04-21_snippet_3\n\nLANGUAGE: vento\nCODE:\n```\n---\nid: home\n---\n\n{{ set about = search.page('id=about lang=' + lang) }}\n\n<a href=\"{{ about.url }}\">About</a>\n```\n\nLANGUAGE: vento\nCODE:\n```\n---\nid: about\n---\n\n<p>This is an About page</p>\n```\n\n----------------------------------------\n\nTITLE: Defining Data Structure with YAML for Choose List Type\nDESCRIPTION: An example of YAML data structure that would be managed by a choose-list field, showing multiple blocks with different types and properties.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/cms/fields/choose-list.md#2025-04-21_snippet_0\n\nLANGUAGE: yml\nCODE:\n```\nblocks:\n  - type: title\n    text: This is the title\n  - type: content\n    body: This is the content\n```\n\n----------------------------------------\n\nTITLE: Using Renamed Google Fonts in CSS\nDESCRIPTION: CSS example demonstrating how to use renamed Google fonts in CSS stylesheets. This approach allows changing fonts without modifying the CSS code.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/plugins/google_fonts.md#2025-04-21_snippet_2\n\nLANGUAGE: css\nCODE:\n```\nh1 {\n  font-family: display;\n}\nbody {\n  font-family: text;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Lume Server Port\nDESCRIPTION: Commands demonstrating how to specify a custom port for the Lume development server.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/docs/overview/command-line.md#2025-04-21_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\ndeno task lume --serve --port=8000\n\n# or with Lume CLI\nlume --serve --port=8000\n```\n\n----------------------------------------\n\nTITLE: Default Upload Configuration with CMS Registration\nDESCRIPTION: Example showing how the first registered upload entity becomes the default for file fields.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/cms/fields/file.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// Register the \"images\" upload\ncms.upload(\"images\", \"src:images\");\n\ncms.document(\"homepage\", \"src:index.yml\", [\n  \"title: text\",\n  \"content: markdown\",\n  \"cover: file\", // The `images` upload is used by default\n]);\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Search with DuckDuckGo in HTML\nDESCRIPTION: This code snippet demonstrates how to create a basic search form using DuckDuckGo to show results limited to a specific domain. It uses a hidden input to restrict the query to the 'lume.land' domain.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/docs/overview/why-static-sites.md#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<form role=\"search\" action=\"https://duckduckgo.com\" method=\"GET\">\n  <label>Search lume.land <input type=\"search\" name=\"q\"></label>\n  <input type=\"hidden\" name=\"sites\" value=\"lume.land\">\n  <button>Search</button>\n</form>\n```\n\n----------------------------------------\n\nTITLE: Defining Page Data in YAML\nDESCRIPTION: Direct YAML file example for configuring page data including title, URL, and content.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/docs/creating-pages/page-data.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ntitle: This is the title\nurl: custom-url.html\ncontent: This is the page content\n```\n\n----------------------------------------\n\nTITLE: Fleek Configuration for Deploying Lume Sites\nDESCRIPTION: JSON configuration file for Fleek that specifies the Docker image, build command, and publish directory for a Lume site.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/docs/advanced/deployment.md#2025-04-21_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"build\": {\n    \"image\": \"denoland/deno\",\n    \"command\": \"deno task build\",\n    \"publicDir\": \"_site\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Development Mode for ESM Packages\nDESCRIPTION: Shows how to enable development mode for all ESM packages by adding the dev flag. This configuration is useful during development for better debugging.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/plugins/esbuild.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nsite.use(esbuild({\n  esm: {\n    dev: true,\n  },\n}));\n```\n\n----------------------------------------\n\nTITLE: Simplified File System Storage Configuration in LumeCMS\nDESCRIPTION: Simplified version of file system storage configuration using string shorthand. LumeCMS automatically assumes it's a folder name and uses file system storage.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/cms/configuration/storage.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport lumeCMS from \"lume/cms/mod.ts\";\n\nconst cms = lumeCMS();\n\ncms.storage(\"my_files\", \"files\");\n\nexport default cms;\n```\n\n----------------------------------------\n\nTITLE: HTML URL After Base Path Processing\nDESCRIPTION: Example of HTML markup after the base_path plugin adds the configured prefix.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/plugins/base_path.md#2025-04-21_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<a href=\"/blog/articles/my-second-article/\">Go to the second article</a>\n```\n\n----------------------------------------\n\nTITLE: Filtering Pages by Field Value in Vento\nDESCRIPTION: Example demonstrating how to filter pages by a specific field value, showing only pages where 'menu' is set to true.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/plugins/search.md#2025-04-21_snippet_8\n\nLANGUAGE: vento\nCODE:\n```\n{{ for option of search.pages(\"menu=true\") }}\n<a href=\"{{ option.url }}\">\n  {{ option.title }}\n</a>\n{{ /for }}\n```\n\n----------------------------------------\n\nTITLE: Using Multiple Plugins with Hooks in Lume Configuration\nDESCRIPTION: This snippet demonstrates how to use multiple plugins together in the Lume configuration file, showcasing the interaction between the CSS banner plugin and the open source plugin through the use of hooks.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/docs/advanced/plugins.md#2025-04-21_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport lume from \"lume/mod.ts\";\nimport cssBanner from \"./my-plugins/css_banner.ts\";\nimport openSource from \"./my-plugins/open_source.ts\";\n\nconst site = lume();\n\nsite.use(cssBanner({\n  message: \"© This code belongs to ACME inc.\",\n}));\n\nsite.use(openSource());\n\nexport default site;\n```\n\n----------------------------------------\n\nTITLE: Installing Lume CLI with Deno\nDESCRIPTION: Command to install the Lume CLI globally using Deno, which provides convenient shortcuts and commands for managing Lume sites.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/docs/overview/command-line.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ndeno install --allow-run --allow-env --allow-read --name lume --force --reload --global https://deno.land/x/lume_cli/mod.ts\n```\n\n----------------------------------------\n\nTITLE: Invalid Content and Default Export Combination\nDESCRIPTION: Shows an example of an invalid JavaScript module setup that tries to export both content and a default function.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/docs/advanced/the-data-model.md#2025-04-21_snippet_4\n\nLANGUAGE: js\nCODE:\n```\n// Mixing content and default won't work!!\nexport const content = \"Content of the page\";\n\nexport default function ({ title }) {\n  return `<h1>${title}</h1>`;\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of URL Filter in Vento Templates\nDESCRIPTION: Shows how to use the url filter to normalize paths with relative and absolute URLs.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/plugins/url.md#2025-04-21_snippet_0\n\nLANGUAGE: vento\nCODE:\n```\n<a href=\"{{ '/about-us' |> url }}\">\n\n<!-- Full URL -->\n<a href=\"{{ '/about-us' |> url(true) }}\">\n```\n\n----------------------------------------\n\nTITLE: Configuring Nunjucks Plugin in TypeScript\nDESCRIPTION: Demonstrates how to explicitly import and use the Nunjucks plugin in Lume 2, as it is no longer enabled by default.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/docs/advanced/migrate-to-lume2.md#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport lume from \"lume/mod.ts\";\nimport nunjucks from \"lume/plugins/nunjucks.ts\";\n\nconst site = lume();\nsite.use(nunjucks());\n\nexport default site;\n```\n\n----------------------------------------\n\nTITLE: Creating a Pug Layout with Front Matter\nDESCRIPTION: This example demonstrates how to create a Pug layout file with front matter data. The front matter section in YAML format defines variables that can be used in the Pug template below it.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/plugins/pug.md#2025-04-21_snippet_1\n\nLANGUAGE: yml\nCODE:\n```\n---\ntitle: Welcome to my page\nintro: This is my first post using Lume. I hope you like it!\n---\n```\n\nLANGUAGE: pug\nCODE:\n```\ndoctype html\nhtml\nhead\ntitle= title\n\nbody\ninclude partials/nav.pug\n\np= title\n```\n\n----------------------------------------\n\nTITLE: Setting Preview URL for a Collection in LumeCMS (TypeScript)\nDESCRIPTION: This snippet demonstrates how to set a preview URL for a collection, useful for collections where all items are displayed on a single page.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/cms/configuration/collections.md#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\ncms.collection({\n  name: \"events\",\n  store: \"src:_data/events/*.yml\",\n  fields: [\n    \"title: text\",\n    \"date: datetime\",\n    \"content: markdown\",\n  ],\n  url: \"/events/\",\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Lume to Load Custom Page File Extensions\nDESCRIPTION: This snippet demonstrates how to configure Lume to load custom file extensions as regular pages. In this example, files with the .foo extension will be loaded and converted to HTML pages.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/docs/core/concepts.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// To load pages with the extension .foo\n// Example: /my-page.foo => /my-page/index.html\nsite.loadPages([\".foo\"]);\n```\n\n----------------------------------------\n\nTITLE: Configuring No-Cache Middleware in Lume Server\nDESCRIPTION: Implementation example showing how to set up a Lume HTTP server with the no-cache middleware. This code creates a server instance and applies the cache-disabling middleware, which is particularly useful during development to ensure fresh content delivery.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/plugins/no_cache.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport Server from \"lume/core/server.ts\";\nimport noCache from \"lume/middlewares/no_cache.ts\";\n\nconst server = new Server();\n\nserver.use(noCache());\n\nserver.start();\n```\n\n----------------------------------------\n\nTITLE: Using PostCSS Hooks in Lume Configuration (JavaScript)\nDESCRIPTION: This snippet shows how to use PostCSS hooks in Lume to add additional plugins. It demonstrates adding the cssnano plugin using the addPostcssPlugin hook.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/plugins/postcss.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport lume from \"lume/mod.ts\";\nimport postcss from \"lume/plugins/postcss.ts\";\nimport nano from \"npm:cssnano\";\n\nconst site = lume();\n\nsite.use(postcss());\n\nsite.hooks.addPostcssPlugin(nano);\n\nexport default site;\n```\n\n----------------------------------------\n\nTITLE: Retrieving Data from _data Files in Vento\nDESCRIPTION: Example showing how to access data from _data files in specific directories using the search.data() function.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/plugins/search.md#2025-04-21_snippet_13\n\nLANGUAGE: vento\nCODE:\n```\n{{ set companyData = search.data(\"about/the-company\") }}\n```\n\n----------------------------------------\n\nTITLE: Disabling Remote File Cache in Lume\nDESCRIPTION: This command disables the cache for remote files in Lume, forcing them to be downloaded every time. It sets the LUME_NOCACHE environment variable to true.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/docs/configuration/env-variables.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nLUME_NOCACHE=true deno task lume\n```\n\n----------------------------------------\n\nTITLE: Configuring Code Highlight Theme in Lume (TypeScript)\nDESCRIPTION: This snippet shows how to configure a single theme for the code highlight plugin in Lume. It specifies the theme name, CSS file destination, and an optional placeholder for insertion.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/plugins/code_highlight.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport lume from \"lume/mod.ts\";\nimport highlight from \"lume/plugins/code_highlight.ts\";\n\nconst site = lume();\n\nsite.use(highlight({\n  theme: {\n    name: \"atom-one-dark\", // The theme name to download\n    cssFile: \"/styles.css\", // The destination filename\n    placeholder: \"/* insert-theme-here */\", // Optional placeholder to replace with the final code\n  },\n}));\n\nexport default site;\n```\n\n----------------------------------------\n\nTITLE: Stopping the Save Process with beforeSave Event\nDESCRIPTION: This example demonstrates how to stop the save process by returning false from the beforeSave event listener.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/docs/core/events.md#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nsite.addEventListener(\"beforeSave\", () => {\n  return false; // Don't save the files\n});\n```\n\n----------------------------------------\n\nTITLE: Markdown Page with Front Matter\nDESCRIPTION: Example of a Markdown file with YAML front matter for page metadata.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/plugins/markdown.md#2025-04-21_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: Welcome to my page\nlayout: layouts/main.vto\n---\n\n# Welcome\n\n**This is my first post** using Lume.\nI hope you like it!\n```\n\n----------------------------------------\n\nTITLE: Using CSS Selectors for Content Extraction in Feed Plugin\nDESCRIPTION: This example shows how to use CSS selectors to extract content for feed items. The plugin can pull content from specific page elements by prefixing values with '$' in the configuration.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/plugins/feed.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nsite.use(feed({\n  // general config\n  info: {\n    // info config\n  },\n  items: {\n    title: \"=title\",\n    description: \"=excerpt\",\n    published: \"=date\",\n    content: \"$.post-content\", // Use the content of .post-content element\n    lang: \"=lang\",\n  },\n}));\n```\n\n----------------------------------------\n\nTITLE: Implementing HTML Minification Processor in JavaScript\nDESCRIPTION: Basic example of a processor function that minifies HTML content for all pages.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/docs/core/processors.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nfunction minifyHTML(pages) {\n  for (const page of pages) {\n    page.content = minify(page.content);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Showing URL Generation Without Pretty URLs in Lume\nDESCRIPTION: This snippet illustrates how disabling pretty URLs affects the output file structure, generating .html files instead of directories with index.html.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/docs/creating-pages/page-files.md#2025-04-21_snippet_2\n\nLANGUAGE: txt\nCODE:\n```\n.\n├── index.md        => /index.html\n└── documentation\n    └── doc1.md     => /documentation/doc1.html\n    └── doc2.md     => /documentation/doc2.html\n```\n\n----------------------------------------\n\nTITLE: Configuring Paginate Plugin in Lume\nDESCRIPTION: This TypeScript snippet demonstrates how to configure the Paginate plugin in Lume's '_config.ts' file. It shows how to import Lume, set up a custom configuration for the Paginate plugin, and apply it when initializing the Lume site object.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/plugins/paginate.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport lume from \"lume/mod.ts\";\n\n// Paginate plugin configuration\nconst paginate = {/* your config here */};\n\n// Apply the plugin config\nconst site = lume({}, { paginate });\n```\n\n----------------------------------------\n\nTITLE: Using DOM API to Modify HTML Content\nDESCRIPTION: Shows how to use the DOM API to modify HTML content, specifically making external links open in a new tab.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/docs/advanced/the-data-model.md#2025-04-21_snippet_13\n\nLANGUAGE: js\nCODE:\n```\nsite.process([\".html\"], (page) => {\n  // Get the DOM\n  const document = page.document;\n\n  // Modify the content\n  document.querySelectorAll('a[href^=\"http\"]').forEach((link) => {\n    link.setAttribute(\"target\", \"_blank\");\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Using Liquid Filter Example\nDESCRIPTION: Demonstrates how to use the liquid filter to render string values as Liquid templates with custom data\nSOURCE: https://github.com/lumeland/lume.land/blob/main/plugins/liquid.md#2025-04-21_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n---\ndata:\n  username: Oscar\ntext: \"Hello {{ username }}\"\n---\n\n<!-- Render a string -->\n<div>{{ text | liquid: data }}<div>\n```\n\n----------------------------------------\n\nTITLE: Implementing beforeUpdate Event Listener in Lume\nDESCRIPTION: This snippet shows how to add an event listener for the beforeUpdate event, which is triggered when changes are detected when using lume --serve. It demonstrates how to access the files that have changed.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/docs/core/events.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nsite.addEventListener(\"beforeUpdate\", (event) => {\n  console.log(\"New changes detected\");\n  console.log(event.files); // The files that have changed\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Pages with JSON Format\nDESCRIPTION: Example of creating a page using JSON format, demonstrating basic page structure with title, layout, and content properties.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/plugins/json.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"title\": \"Welcome to my page\",\n  \"layout\": \"layouts/main.vto\",\n  \"content\": \"This is my first post using lume,\\nI hope you like it!\"\n}\n```\n\n----------------------------------------\n\nTITLE: Setting up GitHub Storage in LumeCMS\nDESCRIPTION: Configuration example for GitHub storage integration using Octokit. Requires a GitHub personal access token and repository details for authentication.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/cms/configuration/storage.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport lumeCMS from \"lume/cms/mod.ts\";\nimport GitHub from \"lume/cms/storage/github.ts\";\nimport { Octokit } from \"npm:octokit\";\n\nconst cms = lumeCMS();\n\nconst client = new Octokit({\n  auth: \"xxx\", // A personal access token,\n});\n\ncms.storage(\n  \"gh\",\n  new GitHub({\n    client,\n    owner: \"username\",\n    repo: \"example\",\n  }),\n);\n\nexport default cms;\n```\n\n----------------------------------------\n\nTITLE: Migrating File Management API\nDESCRIPTION: Examples showing how to migrate from Lume 2's file management methods to Lume 3's simplified site.add() approach.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/docs/advanced/migrate-to-lume3.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// Lume 2\nsite.loadAssets([\".css\"]);\nsite.copy(\"/assets\", \".\");\nsite.copyRemainingFiles(\n  (path: string) => path.startsWith(\"/articles/\"),\n);\n\n// Lume 3\nsite.add([\".css\"]);\nsite.add(\"/assets\", \".\");\nsite.add(\"/articles\");\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Image Transformation Functions\nDESCRIPTION: JavaScript example showing how to define custom transformation functions like resizeBlur in the plugin configuration.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/plugins/transform_images.md#2025-04-21_snippet_6\n\nLANGUAGE: js\nCODE:\n```\nimport lume from \"lume/mod.ts\";\nimport transformImages from \"lume/plugins/transform_images.ts\";\n\nconst site = lume();\n\nsite.use(transformImages({\n  functions: {\n    resizeBlur(img, size) {\n      img.resize(size, size);\n      img.blur(10);\n    },\n  },\n}));\n\nexport default site;\n```\n\n----------------------------------------\n\nTITLE: Limiting Search Results in Vento\nDESCRIPTION: Examples showing how to limit search results to a specific number of pages, either the first n results or the last n results.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/plugins/search.md#2025-04-21_snippet_7\n\nLANGUAGE: vento\nCODE:\n```\n<!-- Get the 3 first values -->\n{{ for post of search.pages(\"post html\", \"order title\", 3) }}\n  ...\n{{ /for }}\n\n<!-- Get the 3 last values -->\n{{ for post of search.pages(\"post html\", \"order title\", -3) }}\n  ...\n{{ /for }}\n```\n\n----------------------------------------\n\nTITLE: Using Source File References with URL Filter\nDESCRIPTION: Demonstrates how to use the tilde character to reference source files directly, allowing the plugin to automatically detect the final URL.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/plugins/url.md#2025-04-21_snippet_1\n\nLANGUAGE: vento\nCODE:\n```\n<a href=\"{{ '~/about-us.md' |> url }}\">\n\n<!-- Will be converted to -->\n<a href=\"/about-us/\">\n```\n\n----------------------------------------\n\nTITLE: Image Transformation with Aspect Ratio Preservation\nDESCRIPTION: YAML configuration for resizing images to a fixed width (200px) while automatically calculating the height to preserve aspect ratio.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/plugins/transform_images.md#2025-04-21_snippet_2\n\nLANGUAGE: yml\nCODE:\n```\ntransformImages:\n  resize: [200] # Set 200px width, calculate the height automatically\n  format: webp\n```\n\n----------------------------------------\n\nTITLE: Server Script for Serving Lume Sites on Deno Deploy\nDESCRIPTION: TypeScript server code that serves the static files of a Lume site. This script is used as an entrypoint for Deno Deploy to serve the built site.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/docs/advanced/deployment.md#2025-04-21_snippet_4\n\nLANGUAGE: ts\nCODE:\n```\nimport Server from \"lume/core/server.ts\";\n\nconst server = new Server({\n  port: 8000,\n  root: `${Deno.cwd()}/_site`,\n});\n\nserver.start();\n\nconsole.log(\"Listening on http://localhost:8000\");\n```\n\n----------------------------------------\n\nTITLE: Building Lume Site\nDESCRIPTION: Commands to build a Lume website, showing both the Deno task and Lume CLI methods. This compiles documents to HTML in the destination directory.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/docs/overview/command-line.md#2025-04-21_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ndeno task lume\n\n# or with Lume CLI\nlume\n```\n\n----------------------------------------\n\nTITLE: Dynamic URL Generation Function - JavaScript\nDESCRIPTION: Example of using a function to dynamically generate URLs based on page data\nSOURCE: https://github.com/lumeland/lume.land/blob/main/docs/creating-pages/urls.md#2025-04-21_snippet_5\n\nLANGUAGE: js\nCODE:\n```\nexport function url(page) {\n  return `./${page.data.title}/`;\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Field Options Based on Document Data (JavaScript)\nDESCRIPTION: JavaScript example of using the init function to customize field options based on the current document's data.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/cms/configuration/fields.md#2025-04-21_snippet_7\n\nLANGUAGE: js\nCODE:\n```\n{\n  name: \"tags\",\n  type: \"list\",\n  init(field, { data }, docData) {\n    const site = data.site;\n\n    // We are editing a document, so we can access to the data:\n    if (docData) {\n      const { lang } = docData\n\n      const allTags = site.search.values(`tags lang=${lang}`);\n      field.options = allTags;\n\n    // It's a new document, we don't know the language yet.\n    } else {\n      const allTags = site.search.values(\"tags\");\n      field.options = allTags;\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Upload Folder Configuration in LumeCMS\nDESCRIPTION: Demonstrates how to set up a basic upload folder named 'images' pointing to the 'images' folder in the 'src' storage using the cms.upload() function.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/cms/configuration/uploads.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ncms.upload(\"images\", \"src:images\");\n```\n\n----------------------------------------\n\nTITLE: Searching Pages with Vento Template in Lume\nDESCRIPTION: This snippet demonstrates how to use the search.pages() function to filter pages based on a specific category and display the results in an unordered list.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/docs/core/searching.md#2025-04-21_snippet_0\n\nLANGUAGE: vento\nCODE:\n```\n<ul>\n  {{ for page of search.pages(\"category=music\") }}\n  <li>{{ page.title }}</li>\n  {{ /for }}\n</ul>\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom File Extensions for Sheets Plugin\nDESCRIPTION: Customizing the sheet plugin to support specific file formats like .ods, .rtf, and .xls. By default, the plugin supports .xlsx, .numbers, and .csv files.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/plugins/sheets.md#2025-04-21_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport lume from \"lume/mod.ts\";\nimport sheets from \"lume/plugins/sheets.ts\";\n\nconst site = lume();\n\nsite.use(sheets({\n  extensions: [\".ods\", \"rtf\", \"xls\"],\n}));\n\nexport default site;\n```\n\n----------------------------------------\n\nTITLE: Using Typography plugin with Markdown content in templates\nDESCRIPTION: Example of how to apply Tailwind's typography styles to rendered Markdown content by using the 'prose' class in HTML templates.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/plugins/tailwindcss.md#2025-04-21_snippet_5\n\nLANGUAGE: vento\nCODE:\n```\n<article class=\"prose\">\n  {{ content }}\n</article>\n```\n\n----------------------------------------\n\nTITLE: Configuring URL Field Type in TypeScript\nDESCRIPTION: Example configuration for a URL field type in Lume CMS. This defines a field named 'href' with the type 'url', which will be rendered as an input element with type='url' in the user interface.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/cms/fields/url.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  name: \"href\",\n  type: \"url\",\n}\n```\n\n----------------------------------------\n\nTITLE: AWS Amplify Configuration for Deploying Lume Sites\nDESCRIPTION: YAML configuration file for AWS Amplify that defines the build process and artifacts location for a Lume site. It installs Deno and builds the site.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/docs/advanced/deployment.md#2025-04-21_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nversion: 1\nfrontend:\n  phases:\n    build:\n      commands:\n        - curl -fsSL https://deno.land/x/install/install.sh | sh\n        - /root/.deno/bin/deno task build\n  artifacts:\n    baseDirectory: /_site\n    files:\n      - \"**/*\"\n  cache:\n    paths: []\n```\n\n----------------------------------------\n\nTITLE: Plugin Execution Order Examples\nDESCRIPTION: Demonstrates the change in plugin execution order between Lume 2 and Lume 3.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/docs/advanced/migrate-to-lume3.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// Lume 2\nsite.use(sitemap()); // Executed always at the end\nsite.use(basePath()); // Executed during the build (before sitemap)\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// Lume 3\nsite.use(basePath()); // Executed in 1st position\nsite.use(sitemap()); // Executed in 2nd position (after basePath)\n```\n\n----------------------------------------\n\nTITLE: Setting File-Specific Data in Lume (JavaScript)\nDESCRIPTION: Shows how to assign data to a specific file using site.data(). This allows for fine-grained control over data assignment at the file level.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/docs/configuration/data.md#2025-04-21_snippet_4\n\nLANGUAGE: js\nCODE:\n```\n// Set the layout value to a specific file\nsite.data(\"layout\", \"pages.vto\", \"/pages/my-custom-page.vto\");\n```\n\n----------------------------------------\n\nTITLE: Using Init Function for Dynamic Field Configuration (JavaScript)\nDESCRIPTION: JavaScript example of using the init function to dynamically generate a password field value.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/cms/configuration/fields.md#2025-04-21_snippet_5\n\nLANGUAGE: js\nCODE:\n```\n{\n  name: \"password\",\n  type: \"text\",\n  init(field) {\n    field.value = generateRandomPassword();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Server Middleware in TypeScript\nDESCRIPTION: Example showing how to add middleware to the development server.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/docs/configuration/config-file.md#2025-04-21_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport expires from \"lume/middlewares/expires.ts\";\n\nconst site = lume({\n  server: {\n    middlewares: [\n      expires(),\n    ],\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Redirects Middleware for Production in Lume HTTP Server\nDESCRIPTION: Sets up a Lume HTTP Server with redirects middleware for production use. The example demonstrates how to define redirects with different paths and configure status codes (301 by default).\nSOURCE: https://github.com/lumeland/lume.land/blob/main/plugins/redirects-middleware.md#2025-04-21_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nimport Server from \"lume/core/server.ts\";\nimport redirects from \"lume/middlewares/redirects.ts\";\n\nconst server = new Server();\n\nserver.use(redirects({\n  redirects: {\n    \"/from/\": \"/to/\",\n    \"/from2/\": \"/to2/\",\n\n    // Use an object to configure the status code. (301 by default)\n    \"/from3/\": {\n      to: \"/to2/\",\n      code: 302,\n    },\n  },\n  strict: false, // configure whether distinguish the trailing slash or not (true by default)\n}));\n\nserver.start();\n```\n\n----------------------------------------\n\nTITLE: Installing Multilanguage Plugin in Lume\nDESCRIPTION: Basic configuration for installing and setting up the multilanguage plugin in Lume. Demonstrates how to specify available languages.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/plugins/multilanguage.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport lume from \"lume/mod.ts\";\nimport multilanguage from \"lume/plugins/multilanguage.ts\";\n\nconst site = lume();\n\nsite.use(multilanguage({\n  languages: [\"en\", \"gl\", \"es\"], // Available languages\n}));\n\nexport default site;\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Archetype in TypeScript\nDESCRIPTION: This snippet demonstrates how to create a basic archetype function that generates a new markdown file with predefined content.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/docs/core/archetypes.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// _archetypes/example.js\n\nexport default function () {\n  return {\n    path: \"/pages/example.md\",\n    content: \"Content of the file\",\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring URL Modifications for Multiple File Types\nDESCRIPTION: Configuration example showing how to extend URL modifications to both HTML and CSS files using the extensions option.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/plugins/modify_urls.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nsite.use(modifyUrls({\n  extensions: [\".html\", \".css\"], // Modify URLs inside HTML and CSS files\n  fn: (url) => url.toLowerCase(),\n}));\n```\n\n----------------------------------------\n\nTITLE: Enabling Date Extraction Plugin\nDESCRIPTION: Configuration to enable automatic date extraction from filenames in Lume 3.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/docs/advanced/migrate-to-lume3.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport extractDate from \"lume/plugins/extract_date.ts\";\n\nsite.use(extractDate());\n```\n\n----------------------------------------\n\nTITLE: Adding PostCSS Plugins to Lume Configuration (JavaScript)\nDESCRIPTION: This code snippet shows how to add additional PostCSS plugins to the Lume configuration. It specifically demonstrates adding the postcss-nesting plugin from npm.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/plugins/postcss.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport postcss from \"lume/plugins/postcss.ts\";\nimport nesting from \"npm:postcss-nesting\";\n\nsite.use(postcss({\n  plugins: [nesting()],\n}));\n```\n\n----------------------------------------\n\nTITLE: Custom Tag Helper Configuration in Lume\nDESCRIPTION: Demonstrates how to create a custom tag helper in Lume, which is equivalent to Eleventy's custom tags feature.\nSOURCE: https://github.com/lumeland/lume.land/blob/main/docs/advanced/migrate-from-11ty.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nsite.helper(\"name\", helperFn, {type: \"tag\"})\n```"
  }
]