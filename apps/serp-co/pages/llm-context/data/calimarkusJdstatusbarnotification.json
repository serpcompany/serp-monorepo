[
  {
    "owner": "calimarkus",
    "repo": "jdstatusbarnotification",
    "content": "TITLE: Displaying Simple Text Notification in SwiftUI\nDESCRIPTION: Shows how to present a basic text notification in SwiftUI using the .notification modifier with a binding to control presentation state.\nSOURCE: https://github.com/calimarkus/jdstatusbarnotification/blob/main/JDStatusBarNotification.docc/GettingStarted.md#2025-04-23_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\nvar body: some View {\n    Button(\"Present/dismiss\") {\n      isPresented.toggle()\n    }\n    .notification(title: \"Hello World\", isPresented: $isPresented)\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Rich SwiftUI Notification with Subtitle and Progress\nDESCRIPTION: Demonstrates how to create a more complex notification in SwiftUI with a title, subtitle, activity indicator, progress bar, and predefined style using state bindings.\nSOURCE: https://github.com/calimarkus/jdstatusbarnotification/blob/main/README.md#2025-04-23_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\nvar body: some View {\n    Button(\"Present/dismiss\") {\n      isPresented.toggle()\n    }\n    .notification(title: \"A text\",\n                  subtitle: \"with a little subtitle.\",\n                  isPresented: $isPresented,\n                  isShowingActivity: $activity, // toggles an activity indicator on/off\n                  progress: $progress,          // sets the percentage of a progress bar\n                  includedStyle: .success)      // picks a predefined style\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Styled Notification with Subtitle, Activity and Progress in SwiftUI\nDESCRIPTION: Demonstrates how to create a more complex notification in SwiftUI with subtitle text, activity indicator, progress bar, and predefined style.\nSOURCE: https://github.com/calimarkus/jdstatusbarnotification/blob/main/JDStatusBarNotification.docc/GettingStarted.md#2025-04-23_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\nvar body: some View {\n    Button(\"Present/dismiss\") {\n      isPresented.toggle()\n    }\n    .notification(title: \"A text\",\n                  subtitle: \"with a little subtitle.\",\n                  isPresented: $isPresented,\n                  isShowingActivity: $activity, // toggles an activity indicator on/off\n                  progress: $progress,          // sets the percentage of a progress bar\n                  includedStyle: .success)      // picks a predefined style\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Notification Styles Programmatically\nDESCRIPTION: Demonstrates how to update the default notification style or create named custom styles programmatically by modifying properties of the StatusBarNotificationStyle.\nSOURCE: https://github.com/calimarkus/jdstatusbarnotification/blob/main/README.md#2025-04-23_snippet_12\n\nLANGUAGE: swift\nCODE:\n```\n// update default style\nNotificationPresenter.shared.updateDefaultStyle { style in\n   style.backgroundStyle.backgroundColor = .red\n   style.textStyle.textColor = .white\n   style.textStyle.font = UIFont.preferredFont(forTextStyle: .title3)\n   // and many more options\n   return style\n}\n\n// set a named custom style\nNotificationPresenter.shared.addStyle(named: \"xxx\") { style in\n   // ...\n   return style\n}\n```\n\n----------------------------------------\n\nTITLE: Using Predefined Notification Styles\nDESCRIPTION: Demonstrates how to use one of the library's predefined notification styles (such as 'success') when presenting a notification for quick visual styling.\nSOURCE: https://github.com/calimarkus/jdstatusbarnotification/blob/main/README.md#2025-04-23_snippet_8\n\nLANGUAGE: swift\nCODE:\n```\nNotificationPresenter.shared.present(\"Yay, it works!\",\n                                     includedStyle: .success)\n```\n\n----------------------------------------\n\nTITLE: Displaying a SwiftUI Notification with State Binding\nDESCRIPTION: Shows how to display a simple text notification in SwiftUI using state binding. The notification appears when isPresented is toggled to true and disappears when toggled to false.\nSOURCE: https://github.com/calimarkus/jdstatusbarnotification/blob/main/README.md#2025-04-23_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\nvar body: some View {\n    Button(\"Present/dismiss\") {\n      isPresented.toggle()\n    }\n    .notification(title: \"Hello World\", isPresented: $isPresented)\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying a Custom SwiftUI View as Notification\nDESCRIPTION: Shows how to present a custom SwiftUI view as the content of a notification using state binding, allowing for fully customizable notification content.\nSOURCE: https://github.com/calimarkus/jdstatusbarnotification/blob/main/README.md#2025-04-23_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\nvar body: some View {\n    Button(\"Present/dismiss\") {\n      isPresented.toggle()\n    }\n    .notification(isPresented: $isPresented) {\n      Text(\"ðŸ‘‹ Hi there!\")\n        .font(.subheadline)\n        .foregroundStyle(.white)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Notification Style in SwiftUI\nDESCRIPTION: Shows how to customize a notification's style directly in SwiftUI by modifying properties like background color, minimum width, and height using a style closure.\nSOURCE: https://github.com/calimarkus/jdstatusbarnotification/blob/main/README.md#2025-04-23_snippet_11\n\nLANGUAGE: swift\nCODE:\n```\nvar body: some View {\n    Button(\"Present/dismiss\") {\n      isPresented.toggle()\n    }\n    .notification(isPresented: $isPresented, style: {\n      let s = $0.backgroundStyle\n      s.backgroundColor = .black\n      s.pillStyle.minimumWidth = 150\n      s.pillStyle.height = 44\n    }) {\n      Text(\"ðŸ‘‹ Hi there!\")\n        .font(.subheadline)\n        .foregroundStyle(.white)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying and Animating a Progress Bar in a Notification\nDESCRIPTION: Shows how to display and animate a progress bar within a notification, either with a smooth animation to a target value or by manually setting a specific percentage.\nSOURCE: https://github.com/calimarkus/jdstatusbarnotification/blob/main/README.md#2025-04-23_snippet_7\n\nLANGUAGE: swift\nCODE:\n```\nNotificationPresenter.shared.present(\"Animating Progressâ€¦\") { presenter in\n  presenter.animateProgressBar(to: 1.0, duration: 0.75) { presenter in\n    presenter.dismiss()\n  }\n}\n\n// or set an explicit percentage manually (without animation)\nNotificationPresenter.shared.displayProgressBar(at: 0.0)\n```\n\n----------------------------------------\n\nTITLE: Displaying Custom View as Notification in SwiftUI\nDESCRIPTION: Shows how to present a custom SwiftUI view as the notification content using a view builder closure.\nSOURCE: https://github.com/calimarkus/jdstatusbarnotification/blob/main/JDStatusBarNotification.docc/GettingStarted.md#2025-04-23_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\nvar body: some View {\n    Button(\"Present/dismiss\") {\n      isPresented.toggle()\n    }\n    .notification(isPresented: $isPresented) {\n      Text(\"ðŸ‘‹ Hi there!\")\n        .font(.subheadline)\n        .foregroundStyle(.white)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding a Custom Left View to a Notification\nDESCRIPTION: Demonstrates how to add a custom view to the left side of a notification, such as an icon or image, to enhance the visual appearance of the notification.\nSOURCE: https://github.com/calimarkus/jdstatusbarnotification/blob/main/README.md#2025-04-23_snippet_6\n\nLANGUAGE: swift\nCODE:\n```\nlet image = UIImageView(image: UIImage(systemName: \"gamecontroller.fill\"))\nNotificationPresenter.shared.present(\"Player II\", subtitle: \"Connected\")\nNotificationPresenter.shared.displayLeftView(image)\n```\n\n----------------------------------------\n\nTITLE: Displaying an Activity Indicator in a Notification\nDESCRIPTION: Shows how to display an activity indicator within a notification by first presenting an empty notification and then toggling the activity indicator.\nSOURCE: https://github.com/calimarkus/jdstatusbarnotification/blob/main/README.md#2025-04-23_snippet_5\n\nLANGUAGE: swift\nCODE:\n```\nNotificationPresenter.shared.present(\"\")\nNotificationPresenter.shared.displayActivityIndicator(true)\n```\n\n----------------------------------------\n\nTITLE: Presenting a Custom UIView as Notification Content\nDESCRIPTION: Demonstrates how to use a custom UIView as the content of a notification for complete control over the notification's appearance and behavior.\nSOURCE: https://github.com/calimarkus/jdstatusbarnotification/blob/main/README.md#2025-04-23_snippet_10\n\nLANGUAGE: swift\nCODE:\n```\n// present a custom view\nlet button = UIButton(type: .system, primaryAction: UIAction { _ in\n  NotificationPresenter.shared.dismiss()\n})\nbutton.setTitle(\"Dismiss!\", for: .normal)\nNotificationPresenter.shared.presentCustomView(button)\n```\n\n----------------------------------------\n\nTITLE: Presenting a SwiftUI View as Notification Content\nDESCRIPTION: Shows how to present a SwiftUI view as the content of a notification programmatically, with an optional completion handler.\nSOURCE: https://github.com/calimarkus/jdstatusbarnotification/blob/main/README.md#2025-04-23_snippet_9\n\nLANGUAGE: swift\nCODE:\n```\nNotificationPresenter.shared.presentSwiftView {\n    Text(\"Hi from Swift!\")\n}\n\n// with completion\nNotificationPresenter.shared.presentSwiftView {\n    Text(\"Hi from Swift!\")\n} completion: { presenter in\n   // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Notification Style in SwiftUI\nDESCRIPTION: Demonstrates how to customize notification appearance in SwiftUI using a style closure.\nSOURCE: https://github.com/calimarkus/jdstatusbarnotification/blob/main/JDStatusBarNotification.docc/GettingStarted.md#2025-04-23_snippet_11\n\nLANGUAGE: swift\nCODE:\n```\nvar body: some View {\n    Button(\"Present/dismiss\") {\n      isPresented.toggle()\n    }\n    .notification(isPresented: $isPresented, style: {\n      let s = $0.backgroundStyle\n      s.backgroundColor = .black\n      s.pillStyle.minimumWidth = 150\n      s.pillStyle.height = 44\n    }) {\n      Text(\"ðŸ‘‹ Hi there!\")\n        .font(.subheadline)\n        .foregroundStyle(.white)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting WindowScene for Notifications in Scene-Based Apps\nDESCRIPTION: Shows how to explicitly set the UIWindowScene for the NotificationPresenter when automatic detection fails, which is necessary for notifications to appear in scene-based applications.\nSOURCE: https://github.com/calimarkus/jdstatusbarnotification/blob/main/README.md#2025-04-23_snippet_13\n\nLANGUAGE: swift\nCODE:\n```\nNotificationPresenter.shared().setWindowScene(windowScene)\n```\n\n----------------------------------------\n\nTITLE: Displaying Text Notification with UIKit in Swift\nDESCRIPTION: Shows how to present a basic text notification manually using the NotificationPresenter shared instance, with optional completion handler.\nSOURCE: https://github.com/calimarkus/jdstatusbarnotification/blob/main/JDStatusBarNotification.docc/GettingStarted.md#2025-04-23_snippet_3\n\nLANGUAGE: swift\nCODE:\n```\nNotificationPresenter.shared.present(\"Hello World\")\n\n// with completion\nNotificationPresenter.shared.present(\"Hello World\") { presenter in\n   // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Dismissing Notifications with UIKit in Swift\nDESCRIPTION: Demonstrates how to dismiss notifications programmatically, with options for timing and completion handlers.\nSOURCE: https://github.com/calimarkus/jdstatusbarnotification/blob/main/JDStatusBarNotification.docc/GettingStarted.md#2025-04-23_snippet_4\n\nLANGUAGE: swift\nCODE:\n```\nNotificationPresenter.shared.dismiss()\n\n// with completion\nNotificationPresenter.shared.dismiss(after: 0.5) { presenter in\n   // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Dismissing a Notification Programmatically\nDESCRIPTION: Demonstrates how to dismiss a notification programmatically, either immediately or after a specified delay, with an optional completion handler.\nSOURCE: https://github.com/calimarkus/jdstatusbarnotification/blob/main/README.md#2025-04-23_snippet_4\n\nLANGUAGE: swift\nCODE:\n```\nNotificationPresenter.shared.dismiss()\n\n// with completion\nNotificationPresenter.shared.dismiss(after: 0.5) { presenter in\n   // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Notification Styles Programmatically\nDESCRIPTION: Shows how to create and use custom notification styles by modifying the default style or adding named styles.\nSOURCE: https://github.com/calimarkus/jdstatusbarnotification/blob/main/JDStatusBarNotification.docc/GettingStarted.md#2025-04-23_snippet_12\n\nLANGUAGE: swift\nCODE:\n```\n// update default style\nNotificationPresenter.shared.updateDefaultStyle { style in\n   style.backgroundStyle.backgroundColor = .red\n   style.textStyle.textColor = .white\n   style.textStyle.font = UIFont.preferredFont(forTextStyle: .title3)\n   // and many more options\n   return style\n}\n\n// set a named custom style\nNotificationPresenter.shared.addStyle(named: \"xxx\") { style in\n   // ...\n   return style\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying a Text Notification Programmatically\nDESCRIPTION: Shows how to display a simple text notification programmatically using the shared NotificationPresenter instance, with an optional completion handler.\nSOURCE: https://github.com/calimarkus/jdstatusbarnotification/blob/main/README.md#2025-04-23_snippet_3\n\nLANGUAGE: swift\nCODE:\n```\nNotificationPresenter.shared.present(\"Hello World\")\n\n// with completion\nNotificationPresenter.shared.present(\"Hello World\") { presenter in\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Custom UIView as Notification\nDESCRIPTION: Shows how to use a custom UIView for complete control over the notification's content and appearance.\nSOURCE: https://github.com/calimarkus/jdstatusbarnotification/blob/main/JDStatusBarNotification.docc/GettingStarted.md#2025-04-23_snippet_10\n\nLANGUAGE: swift\nCODE:\n```\n// present a custom view\nlet button = UIButton(type: .system, primaryAction: UIAction { _ in\n  NotificationPresenter.shared.dismiss()\n})\nbutton.setTitle(\"Dismiss!\", for: .normal)\nNotificationPresenter.shared.presentCustomView(button)\n```\n\n----------------------------------------\n\nTITLE: Displaying Activity Indicator in Notification\nDESCRIPTION: Shows how to add an activity indicator to a notification for indicating background processes.\nSOURCE: https://github.com/calimarkus/jdstatusbarnotification/blob/main/JDStatusBarNotification.docc/GettingStarted.md#2025-04-23_snippet_5\n\nLANGUAGE: swift\nCODE:\n```\nNotificationPresenter.shared.present(\"\")\nNotificationPresenter.shared.displayActivityIndicator(true)\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Left View to Notification\nDESCRIPTION: Demonstrates how to add a custom view (like an image) to the left side of the notification.\nSOURCE: https://github.com/calimarkus/jdstatusbarnotification/blob/main/JDStatusBarNotification.docc/GettingStarted.md#2025-04-23_snippet_6\n\nLANGUAGE: swift\nCODE:\n```\nlet image = UIImageView(image: UIImage(systemName: \"gamecontroller.fill\"))\nNotificationPresenter.shared.present(\"Player II\", subtitle: \"Connected\")\nNotificationPresenter.shared.displayLeftView(image)\n```\n\n----------------------------------------\n\nTITLE: Displaying Custom SwiftUI View as Notification\nDESCRIPTION: Demonstrates how to present a custom SwiftUI view in the notification using a view builder.\nSOURCE: https://github.com/calimarkus/jdstatusbarnotification/blob/main/JDStatusBarNotification.docc/GettingStarted.md#2025-04-23_snippet_9\n\nLANGUAGE: swift\nCODE:\n```\nNotificationPresenter.shared.presentSwiftView {\n    Text(\"Hi from Swift!\")\n}\n\n// with completion\nNotificationPresenter.shared.presentSwiftView {\n    Text(\"Hi from Swift!\")\n} completion: { presenter in\n   // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Progress Bar to Notification\nDESCRIPTION: Shows how to display and animate a progress bar in the notification, with options for completion handlers.\nSOURCE: https://github.com/calimarkus/jdstatusbarnotification/blob/main/JDStatusBarNotification.docc/GettingStarted.md#2025-04-23_snippet_7\n\nLANGUAGE: swift\nCODE:\n```\nNotificationPresenter.shared.present(\"Animating Progressâ€¦\") { presenter in\n  presenter.animateProgressBar(to: 1.0, duration: 0.75) { presenter in\n    presenter.dismiss()\n  }\n}\n\n// or set an explicit percentage manually (without animation)\nNotificationPresenter.shared.displayProgressBar(at: 0.0)\n```\n\n----------------------------------------\n\nTITLE: Using Built-in Notification Styles\nDESCRIPTION: Shows how to use the included notification styles like \"success\" for common use cases.\nSOURCE: https://github.com/calimarkus/jdstatusbarnotification/blob/main/JDStatusBarNotification.docc/GettingStarted.md#2025-04-23_snippet_8\n\nLANGUAGE: swift\nCODE:\n```\nNotificationPresenter.shared.present(\"Yay, it works!\",\n                                     includedStyle: .success)\n```"
  }
]