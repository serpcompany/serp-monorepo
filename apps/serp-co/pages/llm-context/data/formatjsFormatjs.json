[
  {
    "owner": "formatjs",
    "repo": "formatjs",
    "content": "TITLE: Minimal React example with formatjs\nDESCRIPTION: Shows a minimal React application using formatjs' IntlProvider, FormattedMessage, and FormattedNumber components for internationalization. It defines translated messages, wraps the application with IntlProvider, and uses FormattedMessage and FormattedNumber to display localized content.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/website/docs/getting-started/installation.md#_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport * as React from 'react'\nimport {IntlProvider, FormattedMessage, FormattedNumber} from 'react-intl'\n\n// Translated messages in French with matching IDs to what you declared\nconst messagesInFrench = {\n  myMessage: \"Aujourd'hui, nous sommes le {ts, date, ::yyyyMMdd}\",\n}\n\nexport default function App() {\n  return (\n    <IntlProvider messages={messagesInFrench} locale=\"fr\" defaultLocale=\"en\">\n      <p>\n        <FormattedMessage\n          id=\"myMessage\"\n          defaultMessage=\"Today is {ts, date, ::yyyyMMdd}\"\n          values={{ts: Date.now()}}\n        />\n        <br />\n        <FormattedNumber value={19} style=\"currency\" currency=\"EUR\" />\n      </p>\n    </IntlProvider>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Creating an i18n Context with IntlProvider (React)\nDESCRIPTION: This code demonstrates how to wrap the root React component with `<IntlProvider>` to create an i18n context. It configures the provider with the user's locale and translated messages, making them available to `<Formatted*>` components within the tree.  `usersLocale` and `translationsForUsersLocale` are assumed to be defined elsewhere, providing locale and translation data respectively.  `document.getElementById('container')` is the DOM element where the React app is rendered.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/website/docs/react-intl.md#_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nReactDOM.render(\n  <IntlProvider locale={usersLocale} messages={translationsForUsersLocale}>\n    <App />\n  </IntlProvider>,\n  document.getElementById('container')\n)\n```\n\n----------------------------------------\n\nTITLE: React Component with Formatjs\nDESCRIPTION: This React component demonstrates the use of `FormattedMessage`, `useIntl`, and `injectIntl` from the `react-intl` library for internationalization. It shows how to display translated messages and format them using the Intl API.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/website/docs/getting-started/message-extraction.md#_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport * as React from 'react'\nimport {FormattedMessage, useIntl, injectIntl} from 'react-intl'\n\nclass PasswordChangeWithIntl extends React.Component {\n  render() {\n    const {intl} = this.props\n    return (\n      <li>\n        <input\n          placeholder={intl.formatMessage({\n            defaultMessage: 'New Password',\n            description: 'placeholder text',\n          })}\n        />\n        <input\n          placeholder={intl.formatMessage({\n            id: 'explicit-id',\n            defaultMessage: 'Confirm Password',\n            description: 'placeholder text',\n          })}\n        />\n      </li>\n    )\n  }\n}\n\nconst PasswordChange = injectIntl(PasswordChangeWithIntl)\n\nexport function List(props) {\n  const intl = useIntl()\n  return (\n    <section>\n      <header>\n        <FormattedMessage\n          defaultMessage=\"Control Panel\"\n          description=\"title of control panel section\"\n        />\n      </header>\n      <ul>\n        <li>\n          <button>\n            <FormattedMessage\n              defaultMessage=\"Delete user {name}\"\n              description=\"Delete button\"\n              values={{\n                name: props.name,\n              }}\n            />\n          </button>\n        </li>\n        <PasswordChange />\n      </ul>\n    </section>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: IntlProvider Props Definition (TypeScript)\nDESCRIPTION: Defines the props for the `<IntlProvider>` component. These props extend the `IntlConfig` interface and include a `children` property to wrap React components within the i18n context. It is essential for setting up the internationalization context for the entire app.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/website/docs/react-intl/components.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nprops: IntlConfig &\n  {\n    children: ReactNode,\n  }\n```\n\n----------------------------------------\n\nTITLE: Message Formatting Function Signature (TypeScript)\nDESCRIPTION: This snippet shows the function signatures for `formatMessage` function from `react-intl`. It takes a `MessageDescriptor` and optional values, and returns either a formatted string or a React node array, allowing for placeholders and rich text formatting.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/website/docs/react-intl/api.md#_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\ntype MessageFormatPrimitiveValue = string | number | boolean | null | undefined\nfunction formatMessage(\n  descriptor: MessageDescriptor,\n  values?: Record<string, MessageFormatPrimitiveValue>\n): string\nfunction formatMessage(\n  descriptor: MessageDescriptor,\n  values?: Record<\n    string,\n    MessageFormatPrimitiveValue | React.ReactElement | FormatXMLElementFn\n  >\n): string | React.ReactNode[]\n```\n\n----------------------------------------\n\nTITLE: FormattedMessage with Rich Text Formatting - TSX\nDESCRIPTION: Illustrates how to use rich text formatting with the `<FormattedMessage>` component. It uses XML-like tags within the default message to define formatting elements.  These tags are resolved in the `values` prop with React components. This enables the embedding of styled components and other React elements directly within the translated message.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/website/docs/react-intl/components.md#_snippet_42\n\nLANGUAGE: tsx\nCODE:\n```\n<FormattedMessage\n  id=\"app.greeting\"\n  description=\"Greeting to welcome the user to the app\"\n  defaultMessage=\"Hello, <b>Eric</b> {icon}\"\n  values={{\n    b: chunks => <b>{chunks}</b>,\n    icon: <svg />,\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: ICU: Time Formatting\nDESCRIPTION: Demonstrates time formatting using the `{key, time, format}` syntax. The format options are `short`, `medium`, `long`, and `full`.  Internally uses Intl.DateTimeFormat API.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/website/docs/core-concepts/icu-syntax.mdx#_snippet_8\n\nLANGUAGE: html\nCODE:\n```\nCoupon expires at {expire, time, short}\n```\n\n----------------------------------------\n\nTITLE: Defining Translated Messages with ICU Syntax in TypeScript\nDESCRIPTION: This code snippet demonstrates how to define translated messages for different locales (English and French) using the ICU Message syntax. The messages are stored in a JavaScript object, where each key represents a locale, and the corresponding value is an object containing the translated strings. The `GREETING` key holds the translated greeting message, which includes a placeholder `{name}` for dynamic content.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/website/docs/core-concepts/basic-internationalization-principles.md#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nconst messages = {\n  en: {\n    GREETING: 'Hello {name}',\n  },\n  fr: {\n    GREETING: 'Bonjour {name}',\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Formatting Message Imperatively with intl.formatMessage (TSX)\nDESCRIPTION: This snippet demonstrates how to use the `intl.formatMessage` API to format a message with placeholders. It requires the `intl` object (usually from `react-intl`) to be available in the scope.  The first argument is an object literal containing `description` and `defaultMessage`, both of which must be string literals. The second argument is an object containing the values to replace the placeholders in the `defaultMessage`.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/website/docs/getting-started/message-declaration.md#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n// Method must be exactly `intl.formatMessage`\nintl.formatMessage(\n  {\n    description: 'A message', // Description should be a string literal\n    defaultMessage: 'My name is {name}', // Message should be a string literal\n  },\n  {\n    name: userName,\n  } // Values should be an object literal, but not necessarily every value inside\n)\n```\n\n----------------------------------------\n\nTITLE: React Intl: Message Extraction - formatMessage Function\nDESCRIPTION: This example shows how to use `intl.formatMessage` within a React component to format messages.  The entire `intl.formatMessage` call including the object with `id`, `defaultMessage`, and `description` is required for proper message extraction by `@formatjs/cli` and `babel-plugin-formatjs`.  This allows dynamic message formatting based on context.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/website/docs/react-intl.md#_snippet_12\n\nLANGUAGE: TypeScript\nCODE:\n```\nfunction Comp(props) {\n  const {intl} = props\n  return intl.formatMessage({\n    // The whole `intl.formatMessage` is required so we can extract\n    id: 'foo',\n    defaultMessage: 'foo',\n    description: 'bar',\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: FormattedDate Usage with Options (TSX)\nDESCRIPTION: Shows how to use the `<FormattedDate>` component with specific formatting options. The `year`, `month`, and `day` props are set to control the date's output format.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/website/docs/react-intl/components.md#_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\n<FormattedDate\n  value={new Date(1459832991883)}\n  year=\"numeric\"\n  month=\"long\"\n  day=\"2-digit\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Creating an intl object with createIntl (React Intl)\nDESCRIPTION: Demonstrates how to create an `intl` object using the `createIntl` function outside of a React Provider. This allows formatting data outside of the React lifecycle, such as in a Node.js server or a Redux store.  It is recommended to use createIntlCache to prevent memory leaks.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/website/docs/react-intl/api.md#_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport {createIntl, createIntlCache, RawIntlProvider} from 'react-intl'\n\n// This is optional but highly recommended\n// since it prevents memory leak\nconst cache = createIntlCache()\n\nconst intl = createIntl({\n  locale: 'fr-FR',\n  messages: {}\n}, cache)\n\n// Call imperatively\nintl.formatNumber(20)\n\n// Pass it to IntlProvider\n<RawIntlProvider value={intl}>{foo}</RawIntlProvider>\n```\n\n----------------------------------------\n\nTITLE: React Intl: Message Extraction - FormattedMessage Component\nDESCRIPTION: This snippet shows how to use the `<FormattedMessage>` component from `react-intl` with `id`, `defaultMessage`, and `description` props for message extraction. This allows the `@formatjs/cli` and `babel-plugin-formatjs` to identify and extract the messages for translation.  The `id` is the unique identifier, `defaultMessage` is the fallback message, and `description` provides context.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/website/docs/react-intl.md#_snippet_11\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport {FormattedMessage} from 'react-intl'\n;<FormattedMessage id=\"foo\" defaultMessage=\"foo\" description=\"bar\" />\n```\n\n----------------------------------------\n\nTITLE: ICU: Literal String Message\nDESCRIPTION: A simple example demonstrating the use of a literal string as a basic ICU message.  This is the simplest form of message transform. There are no dependencies.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/website/docs/core-concepts/icu-syntax.mdx#_snippet_0\n\nLANGUAGE: html\nCODE:\n```\nHello everyone\n```\n\n----------------------------------------\n\nTITLE: TypeScript: Override Locale Type\nDESCRIPTION: This snippet demonstrates how to override the global `FormatjsIntl.IntlConfig` interface in TypeScript to define a custom type for the `locale` property. By specifying `locale: 'en' | 'fr'`, the `locale` prop of `<IntlProvider>` will be restricted to the specified union of string literals, enforcing type safety and enabling compile-time error checking. This ensures that only valid locale values are used.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/website/docs/react-intl.md#_snippet_9\n\nLANGUAGE: TypeScript\nCODE:\n```\ndeclare global {\n  namespace FormatjsIntl {\n    interface IntlConfig {\n      locale: 'en' | 'fr'\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Message Descriptor Type Definition in TypeScript\nDESCRIPTION: This code defines the `MessageDescriptor` type, which is used to define default messages/strings and passed to `formatMessage`.  It includes an `id` (unique identifier), `defaultMessage`, and `description` for translators.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/website/docs/react-intl/api.md#_snippet_13\n\nLANGUAGE: TypeScript\nCODE:\n```\ntype MessageDescriptor = {\n  id: string\n  defaultMessage?: string\n  description?: string | object\n}\n```\n\n----------------------------------------\n\nTITLE: TypeScript: Override Message IDs Type\nDESCRIPTION: This snippet shows how to override the global `FormatjsIntl.Message` interface in TypeScript to enforce type safety for message IDs. By specifying `ids: keyof typeof messages`, the `id` prop of `<FormattedMessage>` and `formatMessage` will be restricted to the keys of the `messages` object, enabling autocompletion and compile-time error checking.  The `messages` variable should contain the translated messages.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/website/docs/react-intl.md#_snippet_7\n\nLANGUAGE: TypeScript\nCODE:\n```\ndeclare global {\n  namespace FormatjsIntl {\n    interface Message {\n      ids: keyof typeof messages\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: TypeScript: Example Messages Object\nDESCRIPTION: This code provides an example `messages` object that is used to specify translated messages. This object is used in conjunction with the `FormatjsIntl.Message` interface override to provide type safety for message IDs. Each key in the object represents a message ID, and the corresponding value is the translated message.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/website/docs/react-intl.md#_snippet_8\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst messages = {\n  greeting: 'Hello',\n  planet: 'World',\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: ICU: Date Formatting\nDESCRIPTION: Illustrates date formatting using the `{key, date, format}` syntax.  The available format options are `short`, `medium`, `long`, and `full`. Internally uses Intl.DateTimeFormat API.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/website/docs/core-concepts/icu-syntax.mdx#_snippet_7\n\nLANGUAGE: html\nCODE:\n```\nSale begins {start, date, medium}\n```\n\n----------------------------------------\n\nTITLE: Configuring babel-plugin-formatjs in babel.config.json\nDESCRIPTION: This JSON configuration snippet shows how to configure the formatjs Babel plugin. The idInterpolationPattern option specifies how message IDs are generated, and the ast option enables AST transformation.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/website/docs/guides/bundler-plugins.mdx#_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"plugins\": [\n    [\n      \"formatjs\",\n      {\n        \"idInterpolationPattern\": \"[sha512:contenthash:base64:6]\",\n        \"ast\": true\n      }\n    ]\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Using defineMessages and defineMessage from react-intl\nDESCRIPTION: These examples show how to use `defineMessages` and `defineMessage` from `react-intl` to define messages.  The `eslint-plugin-formatjs` plugin verifies messages defined using these functions.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/website/docs/tooling/linter.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport {defineMessages, defineMessage} from 'react-intl'\n\nconst messages = defineMessages({\n  foo: {\n    defaultMessage: 'foo',\n    description: 'bar',\n  },\n})\n\ndefineMessage({\n  defaultMessage: 'single message',\n})\n```\n\n----------------------------------------\n\nTITLE: Extracted Messages Example (JSON)\nDESCRIPTION: This JSON snippet shows the structure of extracted messages. Each message has a unique ID, `defaultMessage`, and `description`. This is the output of `formatjs extract` before compilation.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/website/docs/tooling/cli.md#_snippet_20\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"hak27d\": {\n    \"defaultMessage\": \"Control Panel\",\n    \"description\": \"title of control panel section\"\n  },\n  \"haqsd\": {\n    \"defaultMessage\": \"Delete user {name}\",\n    \"description\": \"delete button\"\n  },\n  \"19hjs\": {\n    \"defaultMessage\": \"New Password\",\n    \"description\": \"placeholder text\"\n  },\n  \"explicit-id\": {\n    \"defaultMessage\": \"Confirm Password\",\n    \"description\": \"placeholder text\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: FormattedNumber Currency Example TSX\nDESCRIPTION: An example demonstrating how to format a number as currency (USD) using the FormattedNumber component.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/website/docs/react-intl/components.md#_snippet_23\n\nLANGUAGE: tsx\nCODE:\n```\n<FormattedNumber value={1000} style=\"currency\" currency=\"USD\" />\n```\n\n----------------------------------------\n\nTITLE: Format Message Usage Example\nDESCRIPTION: Illustrates how to use `intl.formatMessage` to format a message with a placeholder. It defines a message with an ID, default message (including a {name} placeholder), and description, then formats it with the value 'Eric' for the 'name' placeholder.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/website/docs/intl.md#_snippet_26\n\nLANGUAGE: ts\nCODE:\n```\nfunction () {\n  const messages = defineMessages({\n    greeting: {\n      id: 'app.greeting',\n      defaultMessage: 'Hello, {name}!',\n      description: 'Greeting to welcome the user to the app',\n    },\n  })\n\n  return intl.formatMessage(messages.greeting, {name: 'Eric'})\n}\n```\n\n----------------------------------------\n\nTITLE: Load Locale Data in React with react-intl (TypeScript)\nDESCRIPTION: This TypeScript snippet shows how to load locale-specific translation data dynamically in a React application using `react-intl`. It defines a `loadLocaleData` function to import JSON translations, then uses the `IntlProvider` component to provide the loaded messages to the application, allowing localized components to render correctly.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/website/docs/getting-started/message-distribution.md#_snippet_9\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport * as React from 'react'\nimport * as ReactDOM from 'react-dom'\nimport {IntlProvider} from 'react-intl'\n\nfunction loadLocaleData(locale: string) {\n  switch (locale) {\n    case 'fr':\n      return import('compiled-lang/fr.json')\n    default:\n      return import('compiled-lang/en.json')\n  }\n}\n\nfunction App(props) {\n  return (\n    <IntlProvider\n      locale={props.locale}\n      defaultLocale=\"en\"\n      messages={props.messages}\n    >\n      <MainApp />\n    </IntlProvider>\n  )\n}\n\nasync function bootstrapApplication(locale, mainDiv) {\n  const messages = await loadLocaleData(locale)\n  ReactDOM.render(<App locale={locale} messages={messages} />, mainDiv)\n}\n```\n\n----------------------------------------\n\nTITLE: IntlConfig Interface Definition (TypeScript)\nDESCRIPTION: Defines the `IntlConfig` interface used to configure the i18n context within the `<IntlProvider>` component. It specifies properties such as `locale`, `formats`, `messages`, `defaultLocale`, `defaultFormats`, `timeZone`, `textComponent`, `wrapRichTextChunksInFragment`, `defaultRichTextElements`, and `onError` for controlling internationalization settings.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/website/docs/react-intl/components.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface IntlConfig {\n  locale: string\n  formats: CustomFormats\n  messages: Record<string, string> | Record<string, MessageFormatElement[]>\n  defaultLocale: string\n  defaultFormats: CustomFormats\n  timeZone?: string\n  textComponent?: React.ComponentType | keyof React.JSX.IntrinsicElements\n  wrapRichTextChunksInFragment?: boolean\n  defaultRichTextElements?: Record<string, FormatXMLElementFn<React.ReactNode>>\n  onError(err: string): void\n}\n```\n\n----------------------------------------\n\nTITLE: IntlMessageFormat Format Method Usage\nDESCRIPTION: Shows how to use the `format` method of an `IntlMessageFormat` instance to format a message with provided values. The `format` method replaces placeholders in the message with corresponding values from the `values` object.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/website/docs/intl-messageformat.md#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst output = msg.format(values)\n```\n\n----------------------------------------\n\nTITLE: Formatting Date/Time Range with Intl.DateTimeFormat in TypeScript\nDESCRIPTION: This code defines the `formatDateTimeRange` function, which formats a date/time range given a `from` and `to` value. It requires `Intl.DateTimeFormat.prototype.formatRange` and suggests using a polyfill for broader browser support. Both `from` and `to` inputs must be values parsable as dates.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/website/docs/react-intl/api.md#_snippet_7\n\nLANGUAGE: TypeScript\nCODE:\n```\nfunction formatDateTimeRange(\n  from: number | Date | string,\n  to: number | Date | string,\n  options?: Intl.DateTimeFormatOptions & {format?: string}\n): string\n```\n\n----------------------------------------\n\nTITLE: injectIntl HOC definition (React)\nDESCRIPTION: Defines the types and function signature for the `injectIntl` Higher-Order Component (HOC). This HOC injects the `intl` object as a prop into the wrapped component, enabling access to formatting APIs. It utilizes TypeScript generics for type safety.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/website/docs/react-intl/api.md#_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\ntype WrappedComponentProps<IntlPropName extends string = 'intl'> = {\n  [k in IntlPropName]: IntlShape\n}\n\ntype WithIntlProps<P> = Omit<P, keyof WrappedComponentProps> & {\n  forwardedRef?: React.Ref<any>\n}\n\nfunction injectIntl<\n  IntlPropName extends string = 'intl',\n  P extends WrappedComponentProps<IntlPropName> = WrappedComponentProps<any>,\n>(\n  WrappedComponent: React.ComponentType<P>,\n  options?: Opts<IntlPropName>\n): React.ComponentType<WithIntlProps<P>> & {\n  WrappedComponent: typeof WrappedComponent\n}\n```\n\n----------------------------------------\n\nTITLE: Formatting Numbers with Intl.NumberFormat in TypeScript\nDESCRIPTION: This code defines the `formatNumber` function, which formats a number string based on `Intl.NumberFormat` options. The function takes a numeric `value` and optional formatting options that conform to `NumberFormatOptions`.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/website/docs/react-intl/api.md#_snippet_9\n\nLANGUAGE: TypeScript\nCODE:\n```\nfunction formatNumber(\n  value: number,\n  options?: Intl.NumberFormatOptions & {format?: string}\n): string\n```\n\n----------------------------------------\n\nTITLE: FormattedDate Props Definition (TypeScript)\nDESCRIPTION: Defines the props for the `<FormattedDate>` component. These props extend the `Intl.DateTimeFormatOptions` interface and include properties like `value`, `format`, and `children` to control how the date is formatted and rendered. The `value` is the date to be formatted.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/website/docs/react-intl/components.md#_snippet_5\n\nLANGUAGE: ts\nCODE:\n```\nprops: Intl.DateTimeFormatOptions &\n  {\n    value: any,\n    format: string,\n    children: (formattedDate: string) => ReactElement,\n  }\n```\n\n----------------------------------------\n\nTITLE: Aggregating translations with formatjs compile (Shell)\nDESCRIPTION: Illustrates using `formatjs compile` to aggregate pre-translated strings from libraries following a convention-based file structure where translations are located at `lang/{locale}.json`. The command searches `node_modules` for translation files and outputs a combined translation file.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/website/docs/guides/distribute-libraries.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nformatjs compile \"node_modules/**/lang/en.json\" --ast --out-file lang/en.json\n```\n\n----------------------------------------\n\nTITLE: RawIntlProvider Usage with createIntl (TSX)\nDESCRIPTION: Illustrates how to use the `<RawIntlProvider>` component in conjunction with `createIntl` to create and provide an internationalization context. The `createIntlCache` is used to prevent memory leaks.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/website/docs/react-intl/components.md#_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport {createIntl, createIntlCache, RawIntlProvider} from 'react-intl'\n\n// This is optional but highly recommended\n// since it prevents memory leak\nconst cache = createIntlCache()\n\nconst intl = createIntl({\n  locale: 'fr-FR',\n  messages: {}\n}, cache)\n\n// Pass it to IntlProvider\n<RawIntlProvider value={intl}>{foo}</RawIntlProvider>\n```\n\n----------------------------------------\n\nTITLE: Creating an IntlShape object with createIntl\nDESCRIPTION: This code demonstrates how to create an `IntlShape` object using `createIntl` from `@formatjs/intl`. It includes setting up a cache for performance and configuring the locale and messages. The `intl` object is then used to format a number imperatively.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/website/docs/intl.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport {createIntl, createIntlCache} from '@formatjs/intl'\n\n// This is optional but highly recommended\n// since it prevents memory leak\nconst cache = createIntlCache()\n\nconst intl = createIntl(\n  {\n    locale: 'fr-FR',\n    messages: {},\n  },\n  cache\n)\n\n// Call imperatively\nintl.formatNumber(20)\n```\n\n----------------------------------------\n\nTITLE: Configure ESLint to enforce defaultMessage\nDESCRIPTION: This example configures ESLint to enforce the presence of a `defaultMessage` property in message descriptors using the `formatjs/enforce-default-message` rule. It also enforces that the defaultMessage is a string literal.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/website/docs/tooling/linter.md#_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nimport formatjs from 'eslint-plugin-formatjs'\n\nexport default [\n  {\n    plugins: {\n      formatjs,\n    },\n    rules: {\n      'formatjs/enforce-default-message': ['error', 'literal'],\n    },\n  },\n]\n```\n\n----------------------------------------\n\nTITLE: Format Display Name Usage Example (Currency)\nDESCRIPTION: Shows how to use `intl.formatDisplayName` to format a currency code ('CNY') into a localized display name based on the `currency` type option. This example converts the ISO-4217 currency code to a localized display name for the Chinese Yuan.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/website/docs/intl.md#_snippet_21\n\nLANGUAGE: ts\nCODE:\n```\nintl.formatDisplayName('CNY', {type: 'currency'})\n```\n\n----------------------------------------\n\nTITLE: FormattedMessage with Function as Child - TSX\nDESCRIPTION: Shows how to use the `<FormattedMessage>` component with a function as a child. The function receives the formatted message as a parameter and can be used to customize the rendering of the message. This approach allows for more control over the output, such as wrapping the message in an HTML element.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/website/docs/react-intl/components.md#_snippet_41\n\nLANGUAGE: tsx\nCODE:\n```\n<FormattedMessage id=\"title\">{txt => <h1>{txt}</h1>}</FormattedMessage>\n```\n\n----------------------------------------\n\nTITLE: ICU: Simple Argument Interpolation\nDESCRIPTION: This demonstrates a simple argument replacement using the `{key}` syntax. The value associated with the 'key' is looked up in the input data and interpolated into the message.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/website/docs/core-concepts/icu-syntax.mdx#_snippet_1\n\nLANGUAGE: html\nCODE:\n```\nHello {who}\n```\n\n----------------------------------------\n\nTITLE: Using custom pragma with babel-plugin-formatjs\nDESCRIPTION: This TypeScript/JSX code snippet illustrates the usage of custom pragma. The `pragma` option allows extracting metadata from comments like `@intl-meta project:my-custom-project`. The plugin will parse the comment and include the extracted metadata.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/website/docs/tooling/babel-plugin.md#_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n// @intl-meta project:my-custom-project\nimport {FormattedMessage} from 'react-intl'\n;<FormattedMessage defaultMessage=\"foo\" id=\"bar\" />\n```\n\n----------------------------------------\n\nTITLE: Polyfilling Intl.PluralRules & Intl.RelativeTimeFormat React\nDESCRIPTION: This snippet shows how to polyfill `Intl.PluralRules` and `Intl.RelativeTimeFormat` for older browsers in React Intl v3.  It includes importing the polyfills and their locale data for specific languages to ensure proper internationalization support.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/website/docs/react-intl/upgrade-guide-3.x.md#_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nrequire('@formatjs/intl-pluralrules/polyfill')\nrequire('@formatjs/intl-pluralrules/locale-data/de') // Add locale data for de\n\nrequire('@formatjs/intl-relativetimeformat/polyfill')\nrequire('@formatjs/intl-relativetimeformat/locale-data/de') // Add locale data for de\n```\n\n----------------------------------------\n\nTITLE: Plural Format Example with Number Placeholder\nDESCRIPTION: This example shows the usage of the `#` placeholder for the numeric value within the plural format output. The placeholder is automatically formatted as a number. It shows how to simplify formatting the number within the message.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/website/docs/core-concepts/icu-syntax.mdx#_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\n<IcuEditor\n  defaultMessage={`{itemCount, plural,\n    =0 {You have no items.}\n    one {You have # item.}\n    other {You have # items.}\n}`}\n  defaultValues='{\"itemCount\": 123}'\n/>\n```\n\n----------------------------------------\n\nTITLE: formatDate function signature (React Intl)\nDESCRIPTION: Shows the function signature for the `formatDate` method on the `intl` object. This function formats a date value into a localized string. It takes a date value (number, Date, or string) and optional formatting options as input and returns a formatted string.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/website/docs/react-intl/api.md#_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nfunction formatDate(\n  value: number | Date | string,\n  options?: Intl.DateTimeFormatOptions & {format?: string}\n): string\n```\n\n----------------------------------------\n\nTITLE: Format List Usage Example (Unit)\nDESCRIPTION: Illustrates how to use `intl.formatList` to format a list of units with the 'unit' type. It formats the elements '5 hours' and '3 minutes' as a unit list, which might include appropriate separators and unit abbreviations based on the locale.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/website/docs/intl.md#_snippet_16\n\nLANGUAGE: tsx\nCODE:\n```\nintl.formatList(['5 hours', '3 minutes'], {type: 'unit'})\n```\n\n----------------------------------------\n\nTITLE: Formatting Lists with Intl.ListFormat in TypeScript\nDESCRIPTION: This code defines the `formatList` function, which joins a list of strings or React nodes together in an i18n-safe way. It requires `Intl.ListFormat` and suggests using a polyfill for broader browser support. The function takes an array of strings or React nodes and optional formatting options.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/website/docs/react-intl/api.md#_snippet_11\n\nLANGUAGE: TypeScript\nCODE:\n```\ntype ListFormatOptions = {\n  type?: 'disjunction' | 'conjunction' | 'unit'\n  style?: 'long' | 'short' | 'narrow'\n}\n\nfunction formatList(\n  elements: (string | React.ReactNode)[],\n  options?: Intl.ListFormatOptions\n): string | React.ReactNode[]\n```\n\n----------------------------------------\n\nTITLE: Helper Function for Rendering with IntlProvider\nDESCRIPTION: This helper function simplifies rendering components with the `IntlProvider` in tests.  It wraps the component within the `IntlProvider` and uses `React.cloneElement` to pass a ref to the component.  This pattern avoids repetitive setup code in multiple tests.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/website/docs/guides/testing-with-react-intl.md#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nfunction renderWithIntl(element) {\n  let instance\n\n  ReactTestUtils.renderIntoDocument(\n    <IntlProvider>\n      {React.cloneElement(element, {\n        ref: instance,\n      })}\n    </IntlProvider>\n  )\n\n  return instance\n}\n```\n\n----------------------------------------\n\nTITLE: FormattedMessage Basic Usage - TSX\nDESCRIPTION: Demonstrates basic usage of the `<FormattedMessage>` component in React Intl.  It renders a formatted message with a provided id, description, default message, and values to be injected into the message. This example shows how to define and use a simple message with a placeholder.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/website/docs/react-intl/components.md#_snippet_40\n\nLANGUAGE: tsx\nCODE:\n```\n<FormattedMessage\n  id=\"app.greeting\"\n  description=\"Greeting to welcome the user to the app\"\n  defaultMessage=\"Hello, {name}!\"\n  values={{\n    name: 'Eric',\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Using useIntl hook in a functional component (React)\nDESCRIPTION: Demonstrates how to access the `intl` object using the `useIntl` hook within a functional React component. This allows formatting dates and other values using the provided formatting API. Requires `react` and `react-intl` as dependencies.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/website/docs/react-intl/api.md#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from 'react'\nimport {useIntl, FormattedDate} from 'react-intl'\n\nconst FunctionComponent: React.FC<{date: number | Date}> = ({date}) => {\n  const intl = useIntl()\n  return (\n    <span title={intl.formatDate(date)}>\n      <FormattedDate value={date} />\n    </span>\n  )\n}\n\nexport default FunctionComponent\n```\n\n----------------------------------------\n\nTITLE: Extracting Messages with defineMessages and defineMessage\nDESCRIPTION: Illustrates how to define messages using `defineMessages` and `defineMessage` from `react-intl`. The CLI will extract the `id`, `defaultMessage`, and `description` from these definitions.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/website/docs/tooling/cli.md#_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport {defineMessages, defineMessage} from 'react-intl'\n\ndefineMessages({\n  foo: {\n    id: 'foo',\n    defaultMessage: 'foo',\n    description: 'bar',\n  },\n})\n\ndefineMessage({\n  id: 'single',\n  defaultMessage: 'single message',\n  description: 'header',\n})\n```\n\n----------------------------------------\n\nTITLE: Formatting Message with React's FormattedMessage Component (TSX)\nDESCRIPTION: This snippet shows how to use the `<FormattedMessage/>` component from `react-intl` to format a message. The `description` and `defaultMessage` props should be string literals.  The `values` prop is an object literal containing the values to replace placeholders in the `defaultMessage`.  This leverages React's component structure for message formatting.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/website/docs/getting-started/message-declaration.md#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport {FormattedMessage} from 'react-intl'\n;<FormattedMessage\n  description=\"A message\" // Description should be a string literal\n  defaultMessage=\"My name is {name}\" // Message should be a string literal\n  values={\n    {\n      name: userName,\n    } // Values should be an object literal, but not necessarily every value inside\n  }\n/>\n```\n\n----------------------------------------\n\nTITLE: Configure babel-plugin-formatjs in babel.config.js\nDESCRIPTION: Configures the babel-plugin-formatjs plugin in babel.config.js. This configuration sets the idInterpolationPattern and enables AST (Abstract Syntax Tree) usage for message compilation.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/website/docs/getting-started/installation.md#_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"plugins\": [\n    [\n      \"formatjs\",\n      {\n        \"idInterpolationPattern\": \"[sha512:contenthash:base64:6]\",\n        \"ast\": true\n      }\n    ]\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Formatting date using formatDate\nDESCRIPTION: This example showcases the usage of `intl.formatDate` to format a date. It takes the current timestamp and formats it with specific year, month, and day options using DateTimeFormatOptions.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/website/docs/intl.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nintl.formatDate(Date.now(), {\n  year: 'numeric',\n  month: 'numeric',\n  day: 'numeric',\n})\n```\n\n----------------------------------------\n\nTITLE: Configure ESLint to enforce placeholders\nDESCRIPTION: This configures ESLint to enforce that all placeholders in a message have corresponding values provided, using the `formatjs/enforce-placeholders` rule. It also demonstrates the `ignoreList` option.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/website/docs/tooling/linter.md#_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nimport formatjs from 'eslint-plugin-formatjs'\n\nexport default [\n  {\n    plugins: {\n      formatjs,\n    },\n    rules: {\n      'formatjs/enforce-placeholders': [\n        'error',\n        {\n          ignoreList: ['foo'],\n        },\n      ],\n    },\n  },\n]\n```\n\n----------------------------------------\n\nTITLE: DateTimeFormatOptions Props Definition TSX\nDESCRIPTION: Defines the props interface for the FormattedDateTimeRange component, including DateTimeFormatOptions along with from, to (Date or number), and a children function for custom rendering.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/website/docs/react-intl/components.md#_snippet_15\n\nLANGUAGE: tsx\nCODE:\n```\nprops: DateTimeFormatOptions &\n  {\n    from: number | Date,\n    to: number | Date,\n    children: (formattedDate: string) => ReactElement,\n  }\n```\n\n----------------------------------------\n\nTITLE: Formatting Data with React Intl (React)\nDESCRIPTION: This example demonstrates using `<IntlProvider>`, `<FormattedRelativeTime>`, `useIntl` to set up an i18n context and format data.  The `PostDate` component uses `useIntl` hook to access `intl` object to format the date, and the `App` component renders the formatted data.  Requires React, ReactDOM, and react-intl.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/website/docs/react-intl.md#_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport {IntlProvider, FormattedRelative, useIntl} from 'react-intl';\n\nconst MS_IN_DAY = 1e3 * 3600 * 24\n\nconst PostDate = ({date}) => {\n  const intl = useIntl()\n  return (\n    <span title={intl.formatDate(date)}>\n      <FormattedRelativeTime value={(Date.now() - date)/MS_IN_DAY} unit=\"day\"/>\n    </span>\n  )\n};\n\nconst App = ({post}) => (\n  <div>\n    <h1>{post.title}</h1>\n    <p>\n      <PostDate date={post.date} />\n    </p>\n    <div>{post.body}</div>\n  </div>\n);\n\nReactDOM.render(\n  <IntlProvider locale={navigator.language}>\n    <App\n      post={{\n        title: 'Hello, World!',\n        date: new Date(1459913574887),\n        body: 'Amazing content.',\n      }}\n    />\n  </IntlProvider>,\n  document.getElementById('container')\n);\n```\n\n----------------------------------------\n\nTITLE: Formatting a Simple Message (TypeScript)\nDESCRIPTION: This snippet demonstrates using `intl.formatMessage` to format a message with a placeholder. It defines a message using `defineMessages` and passes an object with the `name` value to fill the placeholder in the message. Requires the `react-intl` library and assumes `intl` object is available.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/website/docs/react-intl/api.md#_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nfunction () {\n  const messages = defineMessages({\n    greeting: {\n      id: 'app.greeting',\n      defaultMessage: 'Hello, {name}!',\n      description: 'Greeting to welcome the user to the app',\n    },\n  })\n\n  return intl.formatMessage(messages.greeting, {name: 'Eric'})\n}\n```\n\n----------------------------------------\n\nTITLE: ICU: Select Format\nDESCRIPTION: Demonstrates the `{select}` format, which allows choosing an output based on the value of a key.  The `other` match is required.  The `key` argument must follow Unicode Pattern_Syntax.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/website/docs/core-concepts/icu-syntax.mdx#_snippet_9\n\nLANGUAGE: html\nCODE:\n```\n{gender, select,\n    male {He will respond shortly.}\n    female {She will respond shortly.}\n    other {They will respond shortly.}\n}\n```\n\n----------------------------------------\n\nTITLE: FormattedTime Props Definition (TSX)\nDESCRIPTION: Defines the props for the `<FormattedTime>` component. These props extend the `DateTimeFormatOptions` interface and include properties like `value`, `format`, and `children` to control how the time is formatted and rendered.  The `value` is the date object.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/website/docs/react-intl/components.md#_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\nprops: DateTimeFormatOptions &\n  {\n    value: any,\n    format: string,\n    children: (formattedDate: string) => ReactElement,\n  }\n```\n\n----------------------------------------\n\nTITLE: FormattedNumberParts Example TSX\nDESCRIPTION: An example demonstrating how to use FormattedNumberParts to format a number (1000) and access its parts within the children function to apply custom styling.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/website/docs/react-intl/components.md#_snippet_27\n\nLANGUAGE: tsx\nCODE:\n```\n<FormattedNumberParts value={1000}>\n  {parts => (\n    <>\n      <b>{parts[0].value}</b>\n      {parts[1].value}\n      <small>{parts[2].value}</small>\n    </>\n  )}\n</FormattedNumberParts>\n```\n\n----------------------------------------\n\nTITLE: FormattedMessage: After (functions as values)\nDESCRIPTION: Demonstrates the recommended pattern after React Intl v3, where functions are used as values to provide React elements, allowing for better control over the text and improved translatability. Note how the time is now handled by the ICU message format.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/website/docs/react-intl/upgrade-guide-3.x.md#_snippet_13\n\nLANGUAGE: tsx\nCODE:\n```\n<FormattedMessage\n  defaultMessage=\"Hello, <b>John</b> is <custom>awesome</custom> and <more>fun and {ts, time}</more>\"\n  values={{\n    b: name => <b>{name}</b>,\n    custom: str => <span style=\"font-weight: bold;\">{str}</span>,\n    more: chunks => <span>{chunks}</span>,\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: ICU: Number Formatting with Trailing Zeroes\nDESCRIPTION: Shows how to format numbers with a specific number of decimal places, including trailing zeroes, using the `0` symbol. The example uses the `{.00}` skeleton.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/website/docs/core-concepts/icu-syntax.mdx#_snippet_6\n\nLANGUAGE: html\nCODE:\n```\nThe very precise number is {num, number, ::.00}\n```\n\n----------------------------------------\n\nTITLE: Format List Function Definition\nDESCRIPTION: Defines the `formatList` function that takes an array of strings or React nodes and an optional `Intl.ListFormatOptions` object and returns a formatted string or array of React nodes. It leverages `Intl.ListFormat` for i18n-safe list formatting.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/website/docs/intl.md#_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nfunction formatList(\n  elements: (string | React.ReactNode)[],\n  options?: Intl.ListFormatOptions\n): string | React.ReactNode[]\n```\n\n----------------------------------------\n\nTITLE: ICU: Number Formatting with Currency\nDESCRIPTION: Demonstrates number formatting with currency and a skeleton for specific formatting. The `{num, number, ::sign-always compact-short currency/GBP}` format is used to format a number as British Pounds with specific sign and compactness.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/website/docs/core-concepts/icu-syntax.mdx#_snippet_4\n\nLANGUAGE: html\nCODE:\n```\nThe price of this bagel is {num, number, ::sign-always compact-short currency/GBP}\n```\n\n----------------------------------------\n\nTITLE: Date Formatting with IntlMessageFormat (TSX)\nDESCRIPTION: This example demonstrates how to format a date using IntlMessageFormat with a custom date skeleton. The skeleton `yyyyMMdd` specifies the desired date format. It takes a `Date` object as input and outputs a formatted date string.  The locale is set to `en-GB`.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/website/docs/intl-messageformat.md#_snippet_16\n\nLANGUAGE: tsx\nCODE:\n```\nnew IntlMessageFormat('Today is: {now, date, ::yyyyMMdd}', 'en-GB').format({\n  now: new Date(),\n})\n```\n\n----------------------------------------\n\nTITLE: Formatting Time with Intl.DateTimeFormat in TypeScript\nDESCRIPTION: This code defines the `formatTime` function, which formats a date/time value based on the provided options. It uses Intl.DateTimeFormatOptions for formatting and defaults to displaying the hour and minute. The input `value` can be a number, Date, or string parsable as a date.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/website/docs/react-intl/api.md#_snippet_6\n\nLANGUAGE: TypeScript\nCODE:\n```\nfunction formatTime(\n  value: number | Date | string,\n  options?: Intl.DateTimeFormatOptions & {format?: string}\n): string\n```\n\n----------------------------------------\n\nTITLE: Extracting Messages with FormattedMessage Component\nDESCRIPTION: Demonstrates how to use the `FormattedMessage` component from `react-intl` and how the CLI extracts the `id`, `defaultMessage`, and `description` props.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/website/docs/tooling/cli.md#_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport {FormattedMessage} from 'react-intl'\n;<FormattedMessage id=\"foo\" defaultMessage=\"foo\" description=\"bar\" />\n```\n\n----------------------------------------\n\nTITLE: React Intl: Message Extraction - defineMessages\nDESCRIPTION: This code demonstrates how to define messages using `defineMessages` from `react-intl` for message extraction. The `id`, `defaultMessage`, and `description` properties are used to define the message and provide context for translators. This is one of the supported mechanisms for extracting messages using `@formatjs/cli` and `babel-plugin-formatjs`.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/website/docs/react-intl.md#_snippet_10\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport {defineMessages} from 'react-intl'\n\ndefineMessages({\n  foo: {\n    id: 'foo',\n    defaultMessage: 'foo',\n    description: 'bar',\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Polyfill via polyfill-fastly.io\nDESCRIPTION: This example demonstrates how to use polyfill-fastly.io to include the Intl.ListFormat polyfill and locale data in an HTML page.  It includes the core polyfill and the locale data for 'en'.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/website/docs/polyfills/intl-listformat.md#_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<!-- Polyfill Intl.ListFormat, its dependencies & `en` locale data -->\n<script src=\"https://polyfill-fastly.io/v3/polyfill.min.js?features=Intl.ListFormat,Intl.ListFormat.~locale.en\"></script>\n```\n\n----------------------------------------\n\nTITLE: Format Message Function Definition (String Return)\nDESCRIPTION: Defines the `formatMessage` function which accepts a `MessageDescriptor` and an optional `values` object to fill placeholders. It returns a formatted message string.  The `values` are primitives, like strings, numbers, booleans, null or undefined.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/website/docs/intl.md#_snippet_24\n\nLANGUAGE: ts\nCODE:\n```\ntype MessageFormatPrimitiveValue = string | number | boolean | null | undefined\nfunction formatMessage(\n  descriptor: MessageDescriptor,\n  values?: Record<string, MessageFormatPrimitiveValue>\n): string\n```\n\n----------------------------------------\n\nTITLE: Formatting time using formatTime\nDESCRIPTION: This example demonstrates how to use `intl.formatTime` to format a time.  It formats the current time with default options (hour and minute).\nSOURCE: https://github.com/formatjs/formatjs/blob/main/website/docs/intl.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nintl.formatTime(Date.now()) // \"4:03 PM\"\n```\n\n----------------------------------------\n\nTITLE: FormattedRelativeTime Example TSX\nDESCRIPTION: An example demonstrating the basic usage of the FormattedRelativeTime component, displaying a relative time of 0 with auto numeric formatting and updating every second.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/website/docs/react-intl/components.md#_snippet_19\n\nLANGUAGE: tsx\nCODE:\n```\n<FormattedRelativeTime value={0} numeric=\"auto\" updateIntervalInSeconds={1} />\n```\n\n----------------------------------------\n\nTITLE: FormattedNumber Props Definition TS\nDESCRIPTION: Defines the props interface for the FormattedNumber component, including NumberFormatOptions, value, format, and a children function for custom rendering.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/website/docs/react-intl/components.md#_snippet_21\n\nLANGUAGE: ts\nCODE:\n```\nprops: NumberFormatOptions &\n  {\n    value: number,\n    format: string,\n    children: (formattedNumber: string) => ReactElement,\n  }\n```\n\n----------------------------------------\n\nTITLE: Injecting Intl with forwardRef\nDESCRIPTION: This example demonstrates how to use `injectIntl` with the `forwardRef` option.  `forwardRef: true` is crucial for accessing the wrapped component instance in tests when using DOM rendering and refs. This ensures that you can call methods on the underlying component.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/website/docs/guides/testing-with-react-intl.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nclass MyComponent extends React.Component {\n  ...\n  myClassFn() { ... }\n}\nexport default injectIntl(MyComponent, {forwardRef: true});\n```\n\n----------------------------------------\n\nTITLE: Format Message Function Definition (ReactNode Return)\nDESCRIPTION: Defines the overloaded `formatMessage` function that accepts a `MessageDescriptor` and an optional `values` object.  This version supports React elements or FormatXMLElementFn in the `values` object for rich text formatting, and returns either a string or array of `React.ReactNode`.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/website/docs/intl.md#_snippet_25\n\nLANGUAGE: ts\nCODE:\n```\nfunction formatMessage(\n  descriptor: MessageDescriptor,\n  values?: Record<\n    string,\n    MessageFormatPrimitiveValue | React.ReactElement | FormatXMLElementFn\n  >\n): string | React.ReactNode[]\n```\n\n----------------------------------------\n\nTITLE: Format Message Usage Example with Rich Text\nDESCRIPTION: Demonstrates how to use `intl.formatMessage` with rich text formatting. It formats a message containing a placeholder wrapped in HTML-like tags, using a formatter function to render the 'bold' tag as a `<b>` element, allowing for inline styling of message parts.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/website/docs/intl.md#_snippet_28\n\nLANGUAGE: ts\nCODE:\n```\nfunction () {\n  const messages = defineMessages({\n    greeting: {\n      id: 'app.greeting',\n      defaultMessage: 'Hello, <bold>{name}</bold>!',\n      description: 'Greeting to welcome the user to the app',\n    },\n  })\n\n  return intl.formatMessage(messages.greeting, {\n    name: 'Eric',\n    bold: str => <b>{str}</b>,\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: FormattedDateParts Usage Example (TSX)\nDESCRIPTION: Demonstrates how to use the `<FormattedDateParts>` component to access the individual parts of a formatted date and customize the rendering. The `children` prop is a function that receives an array of `Intl.DateTimeFormatPart` objects.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/website/docs/react-intl/components.md#_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\n<FormattedDateParts\n  value={new Date(1459832991883)}\n  year=\"numeric\"\n  month=\"long\"\n  day=\"2-digit\"\n>\n  {parts => (\n    <>\n      <b>{parts[0].value}</b>\n      {parts[1].value}\n      <small>{parts[2].value}</small>\n    </>\n  )}\n</FormattedDateParts>\n```\n\n----------------------------------------\n\nTITLE: React component using FormattedMessage\nDESCRIPTION: This React component utilizes the FormattedMessage component from react-intl to display a localized message. The component has a description, a default message with a placeholder, and values to be injected into the message.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/website/docs/guides/bundler-plugins.mdx#_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport {FormattedMessage} from 'react-intl'\n\n<FormattedMessage\n  description=\"A message\"\n  defaultMessage=\"My name is {name}\"\n  values={{\n    name: userName,\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Plural Format Example with Zero Handling\nDESCRIPTION: This example extends the previous one to include a specific case for zero items, using the `=0` match. This ensures a user-friendly message when the cart is empty, demonstrating a more complete pluralization implementation.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/website/docs/core-concepts/icu-syntax.mdx#_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\n<IcuEditor\n  defaultMessage={`{itemCount, plural,\n    =0 {You have no items.}\n    one {You have {itemCount, number} item.}\n    other {You have {itemCount, number} items.}\n}`}\n  defaultValues='{\"itemCount\": 123}'\n/>\n```\n\n----------------------------------------\n\nTITLE: FormattedPlural Props Definition TS\nDESCRIPTION: Defines the props for FormattedPlural, including options for plural categories (zero, one, two, few, many, other) and a children function.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/website/docs/react-intl/components.md#_snippet_28\n\nLANGUAGE: ts\nCODE:\n```\nprops: PluralFormatOptions &\n  {\n    value: any,\n\n    other: ReactElement,\n    zero: ReactElement,\n    one: ReactElement,\n    two: ReactElement,\n    few: ReactElement,\n    many: ReactElement,\n\n    children: (formattedPlural: ReactElement) => ReactElement,\n  }\n```\n\n----------------------------------------\n\nTITLE: Using defineMessages and defineMessage (TypeScript)\nDESCRIPTION: This snippet demonstrates how to use `defineMessages` and `defineMessage` from `react-intl` to define message descriptors. It shows how to define a set of messages using `defineMessages` and a single message using `defineMessage`. Requires the `react-intl` library.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/website/docs/react-intl/api.md#_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\nimport {defineMessages, defineMessage} from 'react-intl'\n\nconst messages = defineMessages({\n  greeting: {\n    id: 'app.home.greeting',\n    description: 'Message to greet the user.',\n    defaultMessage: 'Hello, {name}!',\n  },\n})\n\nconst msg = defineMessage({\n  id: 'single',\n  defaultMessage: 'single message',\n  description: 'header',\n})\n```\n\n----------------------------------------\n\nTITLE: Format Display Name Options Type Definition\nDESCRIPTION: Defines the TypeScript type `FormatDisplayNameOptions` for configuring the format of a display name.  It specifies the `style` (narrow, short, long), `type` (language, region, script, currency), and `fallback` (code, none) options. This configures the `Intl.DisplayNames` API.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/website/docs/intl.md#_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\ntype FormatDisplayNameOptions = {\n  style?: 'narrow' | 'short' | 'long'\n  type?: 'language' | 'region' | 'script' | 'currency'\n  fallback?: 'code' | 'none'\n}\n```\n\n----------------------------------------\n\nTITLE: Formatting Relative Time with Intl.RelativeTimeFormat in TypeScript\nDESCRIPTION: This code defines the `formatRelativeTime` function, which formats a relative time string (e.g., '1 hour ago'). It requires `Intl.RelativeTimeFormat` and suggests using a polyfill for broader browser support. The function takes a numeric `value`, a `unit` (e.g., 'hour', 'day'), and optional formatting options.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/website/docs/react-intl/api.md#_snippet_8\n\nLANGUAGE: TypeScript\nCODE:\n```\ntype Unit =\n  | 'second'\n  | 'minute'\n  | 'hour'\n  | 'day'\n  | 'week'\n  | 'month'\n  | 'quarter'\n  | 'year'\n\ntype RelativeTimeFormatOptions = {\n  numeric?: 'always' | 'auto'\n  style?: 'long' | 'short' | 'narrow'\n}\n\nfunction formatRelativeTime(\n  value: number,\n  unit: Unit,\n  options?: Intl.RelativeTimeFormatOptions & {\n    format?: string\n  }\n): string\n```\n\n----------------------------------------\n\nTITLE: Using with rollup-plugin-typescript2\nDESCRIPTION: This configuration demonstrates how to use @formatjs/ts-transformer with rollup-plugin-typescript2 in a rollup.config.js file. It imports the typescript plugin and the transform function from the transformer, and then configures the typescript plugin to apply the transformer before compilation, overriding the message ID.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/website/docs/tooling/ts-transformer.md#_snippet_5\n\nLANGUAGE: ts\nCODE:\n```\n// rollup.config.js\nimport typescript from 'rollup-plugin-typescript2'\nimport {transform} from '@formatjs/ts-transformer'\n\nexport default {\n  input: './main.ts',\n\n  plugins: [\n    typescript({\n      transformers: () => ({\n        before: [\n          transform({\n            overrideIdFn: '[sha512:contenthash:base64:6]',\n            ast: true,\n          }),\n        ],\n      }),\n    }),\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: IntlMessageFormat Constructor Example\nDESCRIPTION: Illustrates how to create an `IntlMessageFormat` instance with a simple message and locale.  The instance can then be used to format the message.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/website/docs/intl-messageformat.md#_snippet_7\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst msg = new IntlMessageFormat('My name is {name}.', 'en-US')\n```\n\n----------------------------------------\n\nTITLE: Extracting messages with custom formatter (npm)\nDESCRIPTION: This command executes the `extract` script defined in `package.json` using npm, specifying a custom formatter file. It extracts messages and transforms their format for compatibility with specific Translation Management Systems.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/website/docs/getting-started/message-extraction.md#_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\nnpm run extract -- \"src/**/*.{ts,tsx,vue}\" --out-file lang/en.json --id-interpolation-pattern '[sha512:contenthash:base64:6]' --format formatter.js\n```\n\n----------------------------------------\n\nTITLE: Configuring babel-plugin-formatjs via babel.config.json\nDESCRIPTION: This configuration shows how to use the babel-plugin-formatjs in `babel.config.json`. The `idInterpolationPattern` option specifies how to generate message IDs if they are missing.  The `ast` option pre-parses the defaultMessage into AST for faster runtime performance.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/website/docs/tooling/babel-plugin.md#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"plugins\": [\n    [\n      \"formatjs\",\n      {\n        \"idInterpolationPattern\": \"[sha512:contenthash:base64:6]\",\n        \"ast\": true\n      }\n    ]\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Formatter Implementation (JavaScript)\nDESCRIPTION: This JavaScript code defines a custom formatter function for use with the FormatJS CLI.  It takes an object of messages as input, iterates through its entries, extracts the `string` property of each message, and returns a new object where the message IDs are mapped to the extracted strings. This allows for integrating with TMSes that provide translations in a specific format.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/website/docs/getting-started/message-distribution.md#_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\nexports.compile = function (msgs) {\n  const results = {}\n  for (const [id, msg] of Object.entries(msgs)) {\n    results[id] = msg.string\n  }\n  return results\n}\n```\n\n----------------------------------------\n\nTITLE: FormattedDateParts Props Definition (TypeScript)\nDESCRIPTION: Defines the props for the `<FormattedDateParts>` component. These props extend the `Intl.DateTimeFormatOptions` interface and include properties like `value`, `format`, and `children` to control how the date is formatted and rendered as parts. The `children` prop is a function that receives an array of date parts.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/website/docs/react-intl/components.md#_snippet_8\n\nLANGUAGE: ts\nCODE:\n```\nprops: Intl.DateTimeFormatOptions &\n  {\n    value: any,\n    format: string,\n    children: (parts: Intl.DateTimeFormatPart[]) => ReactElement,\n  }\n```\n\n----------------------------------------\n\nTITLE: Initialize VueIntl plugin\nDESCRIPTION: This snippet demonstrates how to initialize the `VueIntl` plugin with `createIntl` and install it into the Vue application. It sets the locale, default locale, and provides a simple message mapping.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/website/docs/vue-intl.md#_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport {createIntl} from 'vue-intl'\n\nconst app = createApp(App)\napp.use(\n  createIntl({\n    locale: 'en',\n    defaultLocale: 'en',\n    messages: {\n      foo: 'bar',\n    },\n  })\n)\n```\n\n----------------------------------------\n\nTITLE: FormattedTimeParts Usage Example (TSX)\nDESCRIPTION: Demonstrates how to use the `<FormattedTimeParts>` component to access the individual parts of a formatted time and customize the rendering. The `children` prop is a function that receives an array of `Intl.DateTimeFormatPart` objects.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/website/docs/react-intl/components.md#_snippet_14\n\nLANGUAGE: tsx\nCODE:\n```\n<FormattedTimeParts value={new Date(1459832991883)}>\n  {parts => (\n    <>\n      <b>{parts[0].value}</b>\n      {parts[1].value}\n      <small>{parts[2].value}</small>\n    </>\n  )}\n</FormattedTimeParts>\n```\n\n----------------------------------------\n\nTITLE: FormattedRelativeTime Advanced Example TSX\nDESCRIPTION: An example demonstrating how the updateIntervalInSeconds prop works, and that it renders the next non-fractional value for the unit.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/website/docs/react-intl/components.md#_snippet_20\n\nLANGUAGE: tsx\nCODE:\n```\n<FormattedRelativeTime value={-50} updateIntervalInSeconds={1} />\n```\n\n----------------------------------------\n\nTITLE: Plural Format Example with IcuEditor\nDESCRIPTION: This example demonstrates the usage of the `plural` format within the IcuEditor component, showing how to display different messages based on the `itemCount` value. It shows how to define different message variations depending on whether it's one item or multiple items.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/website/docs/core-concepts/icu-syntax.mdx#_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\n<IcuEditor\n  defaultMessage={`{itemCount, plural,\n    one {Cart: {itemCount, number} item}\n    other {Cart: {itemCount, number} items}\n}`}\n  defaultValues='{\"itemCount\": 123}'\n/>\n```\n\n----------------------------------------\n\nTITLE: IntlMessageFormat with Custom Formatters (TS)\nDESCRIPTION: This example demonstrates how to use custom formatters with `IntlMessageFormat`. This is particularly useful for complex messages where initializing `Intl.*` constructors can be expensive.  It uses `memoize` from `@formatjs/fast-memoize` to cache `Intl` instances. It requires the `intl-messageformat` and `fast-memoize` libraries.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/website/docs/intl-messageformat.md#_snippet_18\n\nLANGUAGE: ts\nCODE:\n```\nimport IntlMessageFormat from 'intl-messageformat'\nimport {memoize} from '@formatjs/fast-memoize'\nconst formatters = {\n  getNumberFormat: memoize(\n    (locale, opts) => new Intl.NumberFormat(locale, opts)\n  ),\n  getDateTimeFormat: memoize(\n    (locale, opts) => new Intl.DateTimeFormat(locale, opts)\n  ),\n  getPluralRules: memoize((locale, opts) => new Intl.PluralRules(locale, opts)),\n}\nnew IntlMessageFormat('hello {number, number}', 'en', undefined, {\n  formatters,\n}).format({number: 3}) // prints out `hello, 3`\n```\n\n----------------------------------------\n\nTITLE: Adding extract script to package.json\nDESCRIPTION: This JSON snippet shows how to add an 'extract' script to the `package.json` file. This script uses the `formatjs extract` command to extract messages from the source code.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/website/docs/getting-started/message-extraction.md#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"scripts\": {\n    \"extract\": \"formatjs extract\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Format List Usage Example (Conjunction)\nDESCRIPTION: Demonstrates how to use `intl.formatList` to format a list with the 'conjunction' type.  It joins the elements 'Me', 'myself', and 'I' using a conjunction appropriate for the current locale, resulting in a string like 'Me, myself, and I' in English.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/website/docs/intl.md#_snippet_15\n\nLANGUAGE: tsx\nCODE:\n```\nintl.formatList(['Me', 'myself', 'I'], {type: 'conjunction'})\n```\n\n----------------------------------------\n\nTITLE: Load Locale Data in Vue3 with vue-intl (TypeScript)\nDESCRIPTION: This TypeScript snippet demonstrates how to load locale-specific translation data dynamically in a Vue 3 application using `vue-intl`. It defines a `loadLocaleData` function to import JSON translations, then utilizes `createApp` and `app.use(VueIntl)` to integrate the translations, making them available throughout the Vue application.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/website/docs/getting-started/message-distribution.md#_snippet_10\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport VueIntl from 'vue-intl'\nimport {createApp} from 'vue'\n\nfunction loadLocaleData(locale: string) {\n  switch (locale) {\n    case 'fr':\n      return import('compiled-lang/fr.json')\n    default:\n      return import('compiled-lang/en.json')\n  }\n}\n\nasync function bootstrapApplication(locale, mainDiv) {\n  const messages = await loadLocaleData(locale)\n  const app = createApp(App)\n  app.use(VueIntl, {\n    locale: 'en',\n    defaultLocale: 'en',\n    messages,\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: FormattedMessage Props Definition TSX\nDESCRIPTION: Defines the props interface for the FormattedMessage component, including MessageDescriptor, values, tagName, and a children function.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/website/docs/react-intl/components.md#_snippet_38\n\nLANGUAGE: tsx\nCODE:\n```\nprops: MessageDescriptor &\n  {\n    values: object,\n    tagName: string,\n    children: (chunks: ReactElement) => ReactElement,\n  }\n```\n\n----------------------------------------\n\nTITLE: ICU: Number Formatting with Fraction Precision\nDESCRIPTION: Shows how to format numbers with a specific number of decimal places using the `#` symbol.  The example uses the `{.##}` skeleton which only displays significant trailing decimals.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/website/docs/core-concepts/icu-syntax.mdx#_snippet_5\n\nLANGUAGE: html\nCODE:\n```\nThe duration is {num, number, ::.##} seconds\n```\n\n----------------------------------------\n\nTITLE: Set default timezone for Intl.DateTimeFormat (TSX)\nDESCRIPTION: This TypeScript snippet demonstrates how to set the default timezone for Intl.DateTimeFormat using the `__setDefaultTimeZone` function. Since JavaScript engines do not expose the system's default timezone, this allows you to explicitly specify a timezone for date and time calculations. The code checks for the existence of the `__setDefaultTimeZone` function before calling it.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/website/docs/polyfills/intl-datetimeformat.md#_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nimport '@formatjs/intl-datetimeformat/polyfill'\nimport '@formatjs/intl-datetimeformat/add-all-tz.js'\n\nif ('__setDefaultTimeZone' in Intl.DateTimeFormat) {\n  Intl.DateTimeFormat.__setDefaultTimeZone('America/Los_Angeles')\n}\n```\n\n----------------------------------------\n\nTITLE: Formatting Message with Rich Text (TypeScript)\nDESCRIPTION: This snippet demonstrates using `intl.formatMessage` to format a message with rich text formatting.  It defines a message using `defineMessages` and passes a function that returns a JSX element as the value for the `bold` placeholder in the message, enabling bold formatting of the name. Requires the `react-intl` library and assumes `intl` object is available.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/website/docs/react-intl/api.md#_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nfunction () {\n  const messages = defineMessages({\n    greeting: {\n      id: 'app.greeting',\n      defaultMessage: 'Hello, <bold>{name}</bold>!',\n      description: 'Greeting to welcome the user to the app',\n    },\n  })\n\n  return intl.formatMessage(messages.greeting, {\n    name: 'Eric',\n    bold: str => <b>{str}</b>,\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Using Composition API with vue-intl\nDESCRIPTION: This code shows how to use the Composition API with `vue-intl` to provide and consume the internationalization context. `provideIntl` is used in an ancestor component to provide the `Intl` instance, and `useIntl` is used in a descendant component to access and use the formatters.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/website/docs/vue-intl.md#_snippet_3\n\nLANGUAGE: ts\nCODE:\n```\nimport {createIntl} from '@formatjs/intl'\nimport {provideIntl, useIntl} from 'vue-intl'\n\nconst Ancestor = {\n  setup() {\n    provideIntl(\n      createIntl({\n        locale: 'en',\n        defaultLocale: 'en',\n        messages: {\n          foo: 'Composed',\n        },\n      })\n    )\n  },\n  render() {\n    return h(Descendant)\n  },\n}\n\nconst Descendant = {\n  setup() {\n    const intl = useIntl()\n    return () =>\n      h(\n        'p',\n        {},\n        intl.formatMessage({\n          id: 'foo',\n          defaultMessage: 'Hello',\n        })\n      )\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Using injectIntl HOC in a functional component (React)\nDESCRIPTION: Illustrates how to use the `injectIntl` HOC to inject the `intl` object into a functional React component. The `intl` object is then accessed via `props` to format dates. Requires `react` and `react-intl` as dependencies.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/website/docs/react-intl/api.md#_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from 'react'\nimport {injectIntl, FormattedDate} from 'react-intl'\n\ninterface Props {\n  date: Date | number\n}\n\nconst FunctionalComponent: React.FC<Props> = props => {\n  const {\n    date,\n    intl, // Injected by `injectIntl`\n  } = props\n  return (\n    <span title={intl.formatDate(date)}>\n      <FormattedDate value={date} />\n    </span>\n  )\n}\n\nexport default injectIntl(FunctionalComponent)\n```\n\n----------------------------------------\n\nTITLE: Using the renderWithIntl Helper Function\nDESCRIPTION: This demonstrates how to use the `renderWithIntl` helper function to render a component within the `IntlProvider`.  It creates a ref, passes it to the component being rendered, and then accesses the component instance through `element.current`.  This simplifies the process of accessing and testing the wrapped component.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/website/docs/guides/testing-with-react-intl.md#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nconst element = React.createRef();\nrenderWithIntl(<MyElement ref={element}>);\nelement.current.myClassFn();\n```\n\n----------------------------------------\n\nTITLE: FormattedNumber Unit Example 1 TSX\nDESCRIPTION: An example showing how to format numbers with units using FormattedNumber component, with a style of unit, a unit of 'kilobyte', and unitDisplay set to narrow.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/website/docs/react-intl/components.md#_snippet_24\n\nLANGUAGE: tsx\nCODE:\n```\n<FormattedNumber\n  value={1000}\n  style=\"unit\"\n  unit=\"kilobyte\"\n  unitDisplay=\"narrow\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Webpack Exclude Configuration (ts/babel-loader)\nDESCRIPTION: This snippet shows how to configure Webpack using `exclude` to prevent `ts-loader` or `babel-loader` from processing most `node_modules` but specifically including `react-intl`, `intl-messageformat`, and `@formatjs/icu-messageformat-parser`. This can improve build performance and avoid conflicts with pre-built modules.  The regex ensures that only the listed modules are not excluded.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/website/docs/react-intl.md#_snippet_6\n\nLANGUAGE: TypeScript\nCODE:\n```\nexclude: /node_modules\\/(?!react-intl|intl-messageformat|@formatjs\\/icu-messageformat-parser)/,\n```\n\n----------------------------------------\n\nTITLE: Custom Formatter Example (TypeScript)\nDESCRIPTION: This TypeScript code demonstrates how to create a custom formatter for FormatJS CLI. It includes example implementations for `format`, `compareMessages`, and `compile` functions.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/website/docs/tooling/cli.md#_snippet_28\n\nLANGUAGE: tsx\nCODE:\n```\nimport {FormatFn, CompileFn, Comparator} from '@formatjs/cli-lib'\n\nexport const format: FormatFn = msgs => msgs\n\n// Sort key reverse alphabetically\nexport const compareMessages = (el1, el2) => {\n  return el1.key < el2.key ? 1 : -1\n}\n\nexport const compile: CompileFn = msgs => {\n  const results: Record<string, string> = {}\n  for (const k in msgs) {\n    results[k] = msgs[k].defaultMessage!\n  }\n  return results\n}\n```\n\n----------------------------------------\n\nTITLE: Load Locale Data in Node with FormatJS (TypeScript)\nDESCRIPTION: This TypeScript snippet demonstrates how to load locale-specific translation data dynamically in a Node.js environment using FormatJS. It defines a `loadLocaleData` function that imports the appropriate JSON file based on the locale and utilizes `createIntl` to create an `intl` object with the loaded messages.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/website/docs/getting-started/message-distribution.md#_snippet_8\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport {createIntl, createIntlCache} from '@formatjs/intl'\n\nfunction loadLocaleData(locale: string): Promise<Record<string, string>> {\n  switch (locale) {\n    case 'fr':\n      return import('compiled-lang/fr.json')\n    default:\n      return import('compiled-lang/en.json')\n  }\n}\n\n// A single cache instance can be shared for all locales\nconst intlCache = createIntlCache()\n\nasync function bootstrapApplication(locale) {\n  const messages = await loadLocaleData(locale)\n  const intl = createIntl({locale, messages}, intlCache)\n  // Now the intl object is localized and ready to use\n}\n```\n\n----------------------------------------\n\nTITLE: FormattedListParts Example TSX\nDESCRIPTION: An example demonstrating how to use FormattedListParts to format a list of strings and access individual parts via a children function for custom rendering.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/website/docs/react-intl/components.md#_snippet_34\n\nLANGUAGE: tsx\nCODE:\n```\n<FormattedListParts type=\"conjunction\" value={['Me', 'myself', 'I']}>\n  {parts => (\n    <>\n      <b>{parts[0].value}</b>\n      {parts[1].value}\n      <small>{parts[2].value}</small>\n      {parts[3].value}\n      <small>{parts[4].value}</small>\n    </>\n  )}\n</FormattedListParts>\n```\n\n----------------------------------------\n\nTITLE: Define Messages Usage Example\nDESCRIPTION: Shows how to use `defineMessages` and `defineMessage` to define message descriptors.  It defines a `messages` object using `defineMessages` with a greeting message and a `msg` object using `defineMessage` for a single message, illustrating the usage of these functions for message extraction and management.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/website/docs/intl.md#_snippet_32\n\nLANGUAGE: ts\nCODE:\n```\nimport {defineMessages, defineMessage} from '@formatjs/intl'\n\nconst messages = defineMessages({\n  greeting: {\n    id: 'app.home.greeting',\n    description: 'Message to greet the user.',\n    defaultMessage: 'Hello, {name}!',\n  },\n})\n\nconst msg = defineMessage({\n  id: 'single',\n  defaultMessage: 'single message',\n  description: 'header',\n})\n```\n\n----------------------------------------\n\nTITLE: Adding Verification Capability to FormatJS CLI\nDESCRIPTION: This commit introduces a new \"verify\" capability to the formatjs CLI, enabling users to validate their localization files.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/cli/CHANGELOG.md#_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n65aedd6b646405345f05feeecff49006a52f6c80\n```\n\n----------------------------------------\n\nTITLE: Escaping XML-like Tag Example with IcuEditor\nDESCRIPTION: This example demonstrates how to escape strings that resemble XML or HTML tags using single quotes. It prevents the parser from interpreting these strings as rich text formatting tags, ensuring they are displayed literally.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/website/docs/core-concepts/icu-syntax.mdx#_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\n<IcuEditor defaultMessage=\"'<notATag>\" />\n```\n\n----------------------------------------\n\nTITLE: Message Descriptor Type Definition - Typescript\nDESCRIPTION: Defines the structure of a Message Descriptor object in React Intl. It includes properties for the message's unique identifier (id), default message (defaultMessage), and translator context (description).  This type is used to define the expected shape of message objects used throughout the application for internationalization.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/website/docs/react-intl/components.md#_snippet_39\n\nLANGUAGE: typescript\nCODE:\n```\ntype MessageDescriptor = {\n  id?: string\n  defaultMessage?: string\n  description?: string\n}\n```\n\n----------------------------------------\n\nTITLE: FormattedMessage Rich Text Formatting (New)\nDESCRIPTION: Illustrates the new method for rich text formatting using FormattedMessage with functions that return React elements.  This approach provides better contextual information to translators by allowing them to see the text content.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/website/docs/react-intl/upgrade-guide-3.x.md#_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\n<FormattedMessage\n  defaultMessage=\"To buy a shoe, <a>visit our website</a> and <cta>eat a shoe</cta>\"\n  values={{\n    a: msg => (\n      <a class=\"external_link\" target=\"_blank\" href=\"https://www.shoe.com/\">\n        {msg}\n      </a>\n    ),\n    cta: msg => <strong class=\"important\">{msg}</strong>,\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: FormatJS Extract Example with NPM\nDESCRIPTION: An example of running the `formatjs extract` command using npm to extract messages from TypeScript, TypeScript React, and Vue files in the `src` directory and output them to `lang.json`.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/website/docs/tooling/cli.md#_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\nnpm run extract -- \"src/**/*.{ts,tsx,vue}\" --out-file lang.json\n```\n\n----------------------------------------\n\nTITLE: Adding FormatJS scripts to package.json\nDESCRIPTION: Adds `extract` and `compile` commands to the `scripts` section of your `package.json` file. This allows you to run the FormatJS CLI commands using `npm run` or `yarn`.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/website/docs/tooling/cli.md#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"scripts\": {\n    \"extract\": \"formatjs extract\",\n    \"compile\": \"formatjs compile\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: FormattedDateTimeRange Example TSX\nDESCRIPTION: An example demonstrating the basic usage of the FormattedDateTimeRange component, displaying a date range from January 1, 2020, to January 15, 2020.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/website/docs/react-intl/components.md#_snippet_16\n\nLANGUAGE: tsx\nCODE:\n```\n<FormattedDateTimeRange\n  from={new Date('2020-1-1')}\n  to={new Date('2020-1-15')}\n/>\n```\n\n----------------------------------------\n\nTITLE: Using formatters in Vue template\nDESCRIPTION: This snippet shows how to use formatters directly in Vue templates by prepending `$`. It formats a number as currency in USD.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/website/docs/vue-intl.md#_snippet_4\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <p>{{ $formatNumber(3, {style: 'currency', currency: 'USD'}) }}</p>\n</template>\n```\n\n----------------------------------------\n\nTITLE: IntlMessageFormat Constructor Usage\nDESCRIPTION: Demonstrates how to create an IntlMessageFormat instance with a message string and a locale. The message string contains a placeholder that will be replaced with a value during formatting.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/website/docs/intl-messageformat.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst msg = new IntlMessageFormat(message, locales, [formats], [opts])\n```\n\n----------------------------------------\n\nTITLE: Adding Support for Pseudo-Locales\nDESCRIPTION: This commit adds support for pseudo-locales in @formatjs/cli. This feature allows developers to generate pseudo-localized versions of their applications for testing and development purposes. The commit hash is 015bbdb53c1e9661fb9a5df9e31a74dde9a7ecfb.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/cli-lib/CHANGELOG.md#_snippet_29\n\n\n\n----------------------------------------\n\nTITLE: Message Descriptor and defineMessages/defineMessage (TypeScript)\nDESCRIPTION: This snippet presents the interface for `MessageDescriptor` and function signatures for `defineMessages` and `defineMessage` from `react-intl`.  These functions are used to define messages in a structured way and are used by tools like `babel-plugin-formatjs` for extraction.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/website/docs/react-intl/api.md#_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\ninterface MessageDescriptor {\n  id?: string\n  description?: string | object\n  defaultMessage?: string\n}\n\nfunction defineMessages(\n  messageDescriptors: Record<string, MessageDescriptor>\n): Record<string, MessageDescriptor>\n\nfunction defineMessage(messageDescriptor: MessageDescriptor): MessageDescriptor\n```\n\n----------------------------------------\n\nTITLE: FormattedMessage Rich Text with Function Child - TSX\nDESCRIPTION: Combines rich text formatting with the function-as-child pattern in `<FormattedMessage>`. The function receives the formatted message chunks, including React elements, as a single parameter.  The function can then render these chunks within a specific HTML structure, giving full control over the final output. This allows for complex styling and integration of translated content within a larger UI structure.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/website/docs/react-intl/components.md#_snippet_44\n\nLANGUAGE: tsx\nCODE:\n```\n<FormattedMessage\n  id=\"foo\"\n  defaultMessage=\"To buy a shoe, <a>visit our website</a> and <cta>buy a shoe</cta>\"\n  values={{\n    a: chunks => (\n      <a\n        class=\"external_link\"\n        target=\"_blank\"\n        href=\"https://www.example.com/shoe\"\n      >\n        {chunks}\n      </a>\n    ),\n    cta: chunks => <strong class=\"important\">{chunks}</strong>,\n  }}\n>\n  {chunks => <h2>{chunks}</h2>}\n</FormattedMessage>\n```\n\n----------------------------------------\n\nTITLE: FormattedList Example 2 TSX\nDESCRIPTION: Demonstrates using FormattedList with JSX elements in the list, such as bolding 'myself'.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/website/docs/react-intl/components.md#_snippet_32\n\nLANGUAGE: tsx\nCODE:\n```\n<FormattedList type=\"conjunction\" value={['Me', <b>myself</b>, 'I']} />\n```\n\n----------------------------------------\n\nTITLE: Selectordinal Format Example with IcuEditor\nDESCRIPTION: This example illustrates how to use the `selectordinal` format to display ordinal numbers (1st, 2nd, 3rd, etc.) in the IcuEditor component.  The `year` variable is used to determine the ordinal suffix.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/website/docs/core-concepts/icu-syntax.mdx#_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\n<IcuEditor\n  defaultMessage={`It's my cat's {year, selectordinal,\n    one {#st}\n    two {#nd}\n    few {#rd}\n    other {#th}\n} birthday!`}\n  defaultValues='{\"year\": 2}'\n/>\n```\n\n----------------------------------------\n\nTITLE: Formatting relative time using formatRelativeTime (2)\nDESCRIPTION: This example showcases the usage of `intl.formatRelativeTime` to format relative time. It shows time relative to the current time by specifying negative 24 hours with a narrow style.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/website/docs/intl.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nintl.formatRelativeTime(-24, 'hour', {style: 'narrow'})\n```\n\n----------------------------------------\n\nTITLE: Compile Folder with Extracted Files (FormatJS CLI)\nDESCRIPTION: This command demonstrates how to compile a folder containing extracted message files into a folder with React Intl consumable JSON files.  The folder structure should be in the form of `<folder>/<locale>.json` and the output would be `<outFolder>/<locale>.json`.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/website/docs/tooling/cli.md#_snippet_22\n\nLANGUAGE: sh\nCODE:\n```\nnpm run formatjs compile-folder [options] <folder> <outFolder>\n```\n\nLANGUAGE: sh\nCODE:\n```\nyarn formatjs compile-folder [options] <folder> <outFolder>\n```\n\n----------------------------------------\n\nTITLE: Using with ts-loader\nDESCRIPTION: This configuration shows how to integrate the @formatjs/ts-transformer with ts-loader in a webpack configuration. It uses the `transform` function from the transformer to modify the TypeScript compilation process by overriding the message ID. It processes .tsx files.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/website/docs/tooling/ts-transformer.md#_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport {transform} from '@formatjs/ts-transformer'\n\nmodule.exports = {\n  ...otherConfigs,\n  module: {\n    rules: [\n      {\n        test: /\\.tsx?$/,\n        use: [\n          {\n            loader: 'ts-loader',\n            options: {\n              getCustomTransformers() {\n                return {\n                  before: [\n                    transform({\n                      overrideIdFn: '[sha512:contenthash:base64:6]',\n                    }),\n                  ],\n                }\n              },\n            },\n          },\n        ],\n      },\n    ],\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Intl Instance Without Provider\nDESCRIPTION: Shows how to create an `IntlShape` object using `createIntl` without relying on the `IntlProvider`. This allows formatting outside the React lifecycle and facilitates SSR use cases.  A cache is used to prevent memory leaks.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/website/docs/react-intl/upgrade-guide-3.x.md#_snippet_16\n\nLANGUAGE: tsx\nCODE:\n```\nimport {createIntl, createIntlCache, RawIntlProvider} from 'react-intl'\n\n// This is optional but highly recommended\n// since it prevents memory leak\nconst cache = createIntlCache()\n\nconst intl = createIntl({\n  locale: 'fr-FR',\n  messages: {}\n}, cache)\n\n// Call imperatively\nintl.formatNumber(20)\n\n// Pass it to IntlProvider\n<RawIntlProvider value={intl}>{foo}</RawIntlProvider>\n```\n\n----------------------------------------\n\nTITLE: Pre-declaring Message using defineMessage (TSX)\nDESCRIPTION: This snippet shows how to pre-declare a message using `defineMessage` from `react-intl`.  The returned `message` object can then be used with `intl.formatMessage` or the `<FormattedMessage/>` component.  The `description` and `defaultMessage` properties in the `defineMessage` call must be string literals. This allows for message reuse and separation of concerns, though it's noted as less recommended.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/website/docs/getting-started/message-declaration.md#_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport {defineMessage} from 'react-intl'\nconst message = defineMessage({\n  description: 'A message', // Description should be a string literal\n  defaultMessage: 'My name is {name}', // Message should be a string literal\n})\n\nintl.formatMessage(message, {name: 'John'}) // My name is John\n\n<FormattedMessage\n  {...message}\n  values={{\n    name: 'John',\n  }}\n/> // My name is John\n```\n\n----------------------------------------\n\nTITLE: Extract Messages from TypeScript Files (FormatJS CLI)\nDESCRIPTION: This command extracts messages from all TypeScript files located in subfolders of the `src` directory. It flattens the output and uses a SHA512 content hash for message IDs, outputting to `temp.json`.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/website/docs/tooling/cli.md#_snippet_17\n\nLANGUAGE: sh\nCODE:\n```\nformatjs extract 'src/**/*.ts*' --out-file temp.json --flatten --id-interpolation-pattern '[sha512:contenthash:base64:6]'\n```\n\n----------------------------------------\n\nTITLE: Polyfill Intl.DisplayNames via polyfill-fastly.io\nDESCRIPTION: This script tag includes the Intl.DisplayNames polyfill and locale data for English ('en') from polyfill-fastly.io. This is a convenient way to provide the polyfill and necessary locale data directly in the browser.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/website/docs/polyfills/intl-displaynames.md#_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<!-- Polyfill Intl.DisplayNames, its dependencies & `en` locale data -->\n<script src=\"https://polyfill-fastly.io/v3/polyfill.min.js?features=Intl.DisplayNames,Intl.DisplayNames.~locale.en\"></script>\n```\n\n----------------------------------------\n\nTITLE: Escaping Multiple Interpolations Example with IcuEditor\nDESCRIPTION: This example extends the previous one by showing how to escape multiple interpolations within a single string. It reinforces the concept of using single quotes to prevent the interpretation of variables as interpolations when multiple variables are present.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/website/docs/core-concepts/icu-syntax.mdx#_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\n<IcuEditor defaultMessage=\"These are not interpolations: '{word1} {word2}'\" />\n```\n\n----------------------------------------\n\nTITLE: Formatting number as unit using formatNumber (1)\nDESCRIPTION: This example shows formatting a number with a unit of 'kilobyte' and a narrow display style using `intl.formatNumber`. Requires ES2020 NumberFormat polyfill for broader support.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/website/docs/intl.md#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nintl.formatNumber(1000, {\n  style: 'unit',\n  unit: 'kilobyte',\n  unitDisplay: 'narrow',\n})\n```\n\n----------------------------------------\n\nTITLE: Format Display Name Usage Example (Language)\nDESCRIPTION: Demonstrates how to use `intl.formatDisplayName` to format a language code ('zh-Hans-SG') into a localized display name based on the `language` type option.  It will return the display name of the Simplified Chinese language in Singapore.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/website/docs/intl.md#_snippet_19\n\nLANGUAGE: ts\nCODE:\n```\nintl.formatDisplayName('zh-Hans-SG', {type: 'language'})\n```\n\n----------------------------------------\n\nTITLE: Message Descriptor Type Definition\nDESCRIPTION: Defines the TypeScript type `MessageDescriptor` for describing a message.  It specifies the `id` (unique identifier), `defaultMessage` (default string), and `description` (translator context). This type is the standard way to define translatable messages.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/website/docs/intl.md#_snippet_23\n\nLANGUAGE: tsx\nCODE:\n```\ntype MessageDescriptor = {\n  id: string\n  defaultMessage?: string\n  description?: string | object\n}\n```\n\n----------------------------------------\n\nTITLE: IntlProvider Usage Example (TSX)\nDESCRIPTION: Demonstrates how to use the `<IntlProvider>` component to provide the i18n context to a React application. It sets the `locale` and passes an `importantDate` prop to the child component, `<App>`.  It also shows how to render the component to the DOM using `ReactDOM.render`.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/website/docs/react-intl/components.md#_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nconst App = ({importantDate}) => (\n  <div>\n    <FormattedDate\n      value={importantDate}\n      year=\"numeric\"\n      month=\"long\"\n      day=\"numeric\"\n      weekday=\"long\"\n    />\n  </div>\n)\n\nReactDOM.render(\n  <IntlProvider locale={navigator.language}>\n    <App importantDate={new Date(1459913574887)} />\n  </IntlProvider>,\n  document.getElementById('container')\n)\n```\n\n----------------------------------------\n\nTITLE: Extracted messages JSON\nDESCRIPTION: This JSON snippet shows the structure of the extracted messages after running the `formatjs extract` command. Each message is identified by a key (either a hash or an explicit ID) and contains the `defaultMessage` and `description` properties.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/website/docs/getting-started/message-extraction.md#_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"hak27d\": {\n    \"defaultMessage\": \"Control Panel\",\n    \"description\": \"title of control panel section\"\n  },\n  \"haqsd\": {\n    \"defaultMessage\": \"Delete user {name}\",\n    \"description\": \"delete button\"\n  },\n  \"19hjs\": {\n    \"defaultMessage\": \"New Password\",\n    \"description\": \"placeholder text\"\n  },\n  \"explicit-id\": {\n    \"defaultMessage\": \"Confirm Password\",\n    \"description\": \"placeholder text\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing React Intl with NPM\nDESCRIPTION: This command installs the react-intl package using npm. The `-S` flag is shorthand for `--save`, which adds react-intl as a dependency to the project's package.json file.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/website/docs/react-intl.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm i -S react-intl\n```\n\n----------------------------------------\n\nTITLE: Install @formatjs/cli-lib (npm)\nDESCRIPTION: Command to install the `@formatjs/cli-lib` package using npm. This package allows programmatic access to FormatJS CLI functionality.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/website/docs/tooling/cli.md#_snippet_24\n\nLANGUAGE: sh\nCODE:\n```\nnpm i -D @formatjs/cli-lib\n```\n\n----------------------------------------\n\nTITLE: Usage Example of Enzyme Intl Helper\nDESCRIPTION: This shows an example of how to use the `mountWithIntl` helper function to mount a component and then make assertions on its state and text content. It mounts `CustomComponent` within an `IntlProvider` and checks if the state and text match expected values.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/website/docs/guides/testing-with-react-intl.md#_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\n// intl-enzyme-test-helper.js\n\nimport {mountWithIntl} from 'helpers/intl-enzyme-test-helper.js'\n\nconst wrapper = mountWithIntl(<CustomComponent />)\n\nexpect(wrapper.state('foo')).to.equal('bar') // OK\nexpect(wrapper.text()).to.equal('Hello World!') // OK\n```\n\n----------------------------------------\n\nTITLE: Compile Messages (FormatJS CLI)\nDESCRIPTION: This command compiles the extracted messages from `temp.json` into a React Intl-consumable JSON file named `lang/en.json`. The compiled format is suitable for direct use with React Intl.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/website/docs/tooling/cli.md#_snippet_18\n\nLANGUAGE: sh\nCODE:\n```\nformatjs compile 'temp.json' --out-file lang/en.json\n```\n\n----------------------------------------\n\nTITLE: IntlProvider Output Example (HTML)\nDESCRIPTION: Shows the expected HTML output when using `<IntlProvider>` with the locale set to French. The `<FormattedDate>` component renders the provided date in the French locale.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/website/docs/react-intl/components.md#_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<div>mardi 5 avril 2016</div>\n```\n\n----------------------------------------\n\nTITLE: Allow Custom Formatter with Node API\nDESCRIPTION: The @formatjs/cli now allows for custom formatters to be used via the Node API. This provides more flexibility in how extracted messages are formatted, as users can define their own formatters to suit their specific needs, addressing issue #2143.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/cli/CHANGELOG.md#_snippet_38\n\nLANGUAGE: plaintext\nCODE:\n```\n**@formatjs/cli:** allow custom Formatter with Node API ([#2143](https://github.com/formatjs/formatjs/issues/2143)) ([c9886ab](https://github.com/formatjs/formatjs/commit/c9886abb1b79ad6fb5cb74c36db377030ca058b0))\n```\n\n----------------------------------------\n\nTITLE: Format Display Name Usage Example (Region)\nDESCRIPTION: Shows how to use `intl.formatDisplayName` to format a region code ('UN') into a localized display name based on the `region` type option. This example converts the ISO-3166 region code to a localized display name for the United Nations.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/website/docs/intl.md#_snippet_22\n\nLANGUAGE: ts\nCODE:\n```\nintl.formatDisplayName('UN', {type: 'region'})\n```\n\n----------------------------------------\n\nTITLE: IntlMessageFormat Escaping HTML Tags - Raw HTML\nDESCRIPTION: Shows how to include literal HTML in the message by escaping the HTML tag using apostrophes.  This prevents the library from interpreting the tag as a rich text placeholder.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/website/docs/intl-messageformat.md#_snippet_13\n\nLANGUAGE: TypeScript\nCODE:\n```\nnew IntlMessageFormat(\"raw '<b>HTML</b>'\").format()\n```\n\n----------------------------------------\n\nTITLE: Compile Messages with Yarn\nDESCRIPTION: This shell command uses `yarn compile` to compile translated messages with FormatJS CLI. It specifies the input file (`lang/fr.json`), enables AST compilation (`--ast`), and sets the output file (`compiled-lang/fr.json`).\nSOURCE: https://github.com/formatjs/formatjs/blob/main/website/docs/getting-started/message-distribution.md#_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\nyarn compile lang/fr.json --ast --out-file compiled-lang/fr.json\n```\n\n----------------------------------------\n\nTITLE: Installing with yarn\nDESCRIPTION: This command installs the @formatjs/ts-transformer package using yarn. This transformer is used to process string messages for translation from modules that use react-intl.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/website/docs/tooling/ts-transformer.md#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nyarn add @formatjs/ts-transformer\n```\n\n----------------------------------------\n\nTITLE: List Format Options Type Definition\nDESCRIPTION: Defines the TypeScript type `ListFormatOptions` for configuring the format of a list.  It specifies the `type` (conjunction, disjunction, unit) and `style` (long, short, narrow) of the list formatting. This type is used as a parameter to `Intl.ListFormatOptions`.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/website/docs/intl.md#_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\ntype ListFormatOptions = {\n  type?: 'disjunction' | 'conjunction' | 'unit'\n  style?: 'long' | 'short' | 'narrow'\n}\n```\n\n----------------------------------------\n\nTITLE: Using useIntl hook in Vue3\nDESCRIPTION: Shows how to use the `useIntl` hook from `vue-intl` in a Vue 3 component to format messages. The `setup` function retrieves the `intl` object using `useIntl()` and formats a message with a specific ID and default message.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/website/docs/guides/distribute-libraries.md#_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport {useIntl} from 'vue-intl'\n\nconst MyFeature = {\n  setup() {\n    const intl = useIntl()\n    return () =>\n      h(\n        'p',\n        {},\n        intl.formatMessage({\n          id: 'foo',\n          defaultMessage: 'Hello',\n        })\n      )\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Extracting messages with yarn\nDESCRIPTION: This command executes the `extract` script defined in `package.json` using yarn. It specifies the source files to scan, files to ignore, the output file for the extracted messages, and the ID interpolation pattern.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/website/docs/getting-started/message-extraction.md#_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nyarn extract 'src/**/*.ts*' --ignore='**/*.d.ts' --out-file lang/en.json --id-interpolation-pattern '[sha512:contenthash:base64:6]'\n```\n\n----------------------------------------\n\nTITLE: Simple polyfill import\nDESCRIPTION: This TypeScript snippet shows the simplest way to import the polyfill and locale data for a specific language (English). It imports both the polyfill and the necessary locale data.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/website/docs/polyfills/intl-pluralrules.md#_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport '@formatjs/intl-pluralrules/polyfill'\nimport '@formatjs/intl-pluralrules/locale-data/en' // locale-data for en\n```\n\n----------------------------------------\n\nTITLE: FormattedNumber Basic Example TSX\nDESCRIPTION: A basic example of the FormattedNumber component, displaying the number 1000.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/website/docs/react-intl/components.md#_snippet_22\n\nLANGUAGE: tsx\nCODE:\n```\n<FormattedNumber value={1000} />\n```\n\n----------------------------------------\n\nTITLE: FormattedMessage Escape Character Change (After)\nDESCRIPTION: Shows the new escape character (apostrophe) used in FormattedMessage for escaping curly braces, aligning with the ICU Message Format standard.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/website/docs/react-intl/upgrade-guide-3.x.md#_snippet_18\n\nLANGUAGE: tsx\nCODE:\n```\n// After\n<FormattedMessage defaultMessage=\"'{foo}'\" /> //prints out \"{foo}\"\n```\n\n----------------------------------------\n\nTITLE: Dynamic Polyfill Import with Capability Detection\nDESCRIPTION: Dynamically imports the Intl.Segmenter polyfill only if it's needed based on capability detection. This approach optimizes bundle size by avoiding unnecessary polyfills. `shouldPolyfill` determines if the polyfill is needed.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/website/docs/polyfills/intl-segmenter.md#_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport {shouldPolyfill} from '@formatjs/intl-segmenter/should-polyfill'\nasync function polyfill(locale: string) {\n  if (shouldPolyfill()) {\n    await import('@formatjs/intl-segmenter/polyfill-force')\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: FormattedPlural Example TSX\nDESCRIPTION: An example showing the basic usage of the FormattedPlural component, selecting between 'message' (for one) and 'messages' (for other) based on the value.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/website/docs/react-intl/components.md#_snippet_29\n\nLANGUAGE: tsx\nCODE:\n```\n<FormattedPlural value={10} one=\"message\" other=\"messages\" />\n```\n\n----------------------------------------\n\nTITLE: Using with ts-patch\nDESCRIPTION: This configuration snippet shows how to configure the @formatjs/ts-transformer using ts-patch within the `compilerOptions` of a tsconfig.json file.  It defines the `transform`, `import`, and `type` properties to specify the transformer's location and usage. It also includes example options for overriding the ID generation function and enabling AST parsing.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/website/docs/tooling/ts-transformer.md#_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"compilerOptions\": {\n    \"plugins\": [\n      {\n        \"transform\": \"@formatjs/ts-transformer\",\n        \"import\": \"transform\",\n        \"type\": \"config\",\n        \"overrideIdFn\": \"[sha512:contenthash:base64:6]\",\n        \"ast\": true\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: FormattedDate Basic Usage (TSX)\nDESCRIPTION: Demonstrates basic usage of the `<FormattedDate>` component to format a date. The `value` prop is set to a JavaScript `Date` object.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/website/docs/react-intl/components.md#_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\n<FormattedDate value={new Date(1459832991883)} />\n```\n\n----------------------------------------\n\nTITLE: Formatting Display Names with Intl.DisplayNames in TypeScript\nDESCRIPTION: This code defines the `formatDisplayName` function, which formats a display name based on `Intl.DisplayNames`. It requires `Intl.DisplayNames` and suggests using a polyfill. The function takes a value (string, number, or Record) and optional formatting options for specifying the type (language, region, script, currency) and style.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/website/docs/react-intl/api.md#_snippet_12\n\nLANGUAGE: TypeScript\nCODE:\n```\ntype FormatDisplayNameOptions = {\n  style?: 'narrow' | 'short' | 'long'\n  type?: 'language' | 'region' | 'script' | 'currency'\n  fallback?: 'code' | 'none'\n}\n\nfunction formatDisplayName(\n  value: string | number | Record<string, unknown>,\n  options?: FormatDisplayNameOptions\n): string | undefined\n```\n\n----------------------------------------\n\nTITLE: Flattening Nested Messages - React Intl\nDESCRIPTION: This function flattens a nested object of messages into a single-level object, where keys are concatenated using dots. It recursively iterates through the nested object. If a value is a string, it's added to the result with the prefixed key. Otherwise, it recursively calls itself with the nested value and the updated prefix.  Used to convert React Intl v1's nested message structure to v2's flat structure.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/website/docs/react-intl/upgrade-guide-2.x.md#_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nfunction flattenMessages(nestedMessages, prefix = '') {\n  return Object.keys(nestedMessages).reduce((messages, key) => {\n    let value = nestedMessages[key]\n    let prefixedKey = prefix ? `${prefix}.${key}` : key\n\n    if (typeof value === 'string') {\n      messages[prefixedKey] = value\n    } else {\n      Object.assign(messages, flattenMessages(value, prefixedKey))\n    }\n\n    return messages\n  }, {})\n}\n\nlet messages = flattenMessages(nestedMessages)\n```\n\n----------------------------------------\n\nTITLE: Extract Object-Type Description from Message\nDESCRIPTION: This feature allows the @formatjs/cli to extract object-type descriptions from messages, addressing issue #3373. This provides more detailed information about the expected data types, enhancing the usability and documentation of messages.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/cli/CHANGELOG.md#_snippet_24\n\n\n\n----------------------------------------\n\nTITLE: ICU: Number Formatting\nDESCRIPTION: Illustrates number formatting using the `{key, number}` syntax.  This type is used to format numbers in a locale-sensitive manner.  Internally uses Intl.NumberFormat API.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/website/docs/core-concepts/icu-syntax.mdx#_snippet_2\n\nLANGUAGE: html\nCODE:\n```\nI have {numCats, number} cats.\n```\n\n----------------------------------------\n\nTITLE: Compile Messages Programmatically (TypeScript)\nDESCRIPTION: This TypeScript code demonstrates how to use the `compile` function from `@formatjs/cli-lib` to compile messages programmatically. It returns a promise that resolves to a string containing the compiled messages.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/website/docs/tooling/cli.md#_snippet_27\n\nLANGUAGE: tsx\nCODE:\n```\nimport {compile} from '@formatjs/cli-lib'\n\nconst resultAsString: Promise<string> = compile(files, {\n  ast: true,\n})\n```\n\n----------------------------------------\n\nTITLE: Simple Intl.DisplayNames Polyfill Import (TSX)\nDESCRIPTION: This code snippet demonstrates a simple import of the Intl.DisplayNames polyfill and locale data for the 'en' locale. This approach is suitable for applications where the target locale is known at build time.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/website/docs/polyfills/intl-displaynames.md#_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport '@formatjs/intl-displaynames/polyfill'\nimport '@formatjs/intl-displaynames/locale-data/en' // locale-data for en\n```\n\n----------------------------------------\n\nTITLE: Exposing Polyfill Detection in Number Formatting with JavaScript\nDESCRIPTION: This commit exposes the `shouldPolyfill` function in @formatjs/intl-numberformat, allowing developers to detect if the current platform needs the polyfill provided by the package. This feature enables conditional loading of the polyfill, optimizing performance and reducing bundle size where native support is sufficient.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/intl-numberformat/CHANGELOG.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nf12bde6\n```\n\n----------------------------------------\n\nTITLE: Dynamic Intl.ListFormat Polyfill Import (TypeScript)\nDESCRIPTION: This code snippet demonstrates how to dynamically import the Intl.ListFormat polyfill and locale data based on capability detection using `shouldPolyfill`. The `polyfill` function checks if a polyfill is needed for a given locale and imports the polyfill and locale data if required.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/website/docs/polyfills/intl-listformat.md#_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport {shouldPolyfill} from '@formatjs/intl-listformat/should-polyfill'\nasync function polyfill(locale: string) {\n  const unsupportedLocale = shouldPolyfill(locale)\n  // This locale is supported\n  if (!unsupportedLocale) {\n    return\n  }\n  // Load the polyfill 1st BEFORE loading data\n  await import('@formatjs/intl-listformat/polyfill-force')\n  await import(`@formatjs/intl-listformat/locale-data/${unsupportedLocale}`)\n}\n```\n\n----------------------------------------\n\nTITLE: Dynamic import with capability detection\nDESCRIPTION: This TypeScript snippet demonstrates how to dynamically import the polyfill and locale data based on capability detection using the `shouldPolyfill` function. This approach ensures that the polyfill is only loaded when necessary.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/website/docs/polyfills/intl-pluralrules.md#_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport {shouldPolyfill} from '@formatjs/intl-pluralrules/should-polyfill'\nasync function polyfill(locale: string) {\n  const unsupportedLocale = shouldPolyfill(locale)\n  // This locale is supported\n  if (!unsupportedLocale) {\n    return\n  }\n  // Load the polyfill 1st BEFORE loading data\n  await import('@formatjs/intl-pluralrules/polyfill-force')\n  await import(`@formatjs/intl-pluralrules/locale-data/${unsupportedLocale}`)\n}\n```\n\n----------------------------------------\n\nTITLE: Switching Parser Implementation\nDESCRIPTION: This commit switches the parser used by eslint-plugin-formatjs to @formatjs/icu-messageformat-parser, which is claimed to be 6x faster. This should significantly improve the performance of the linter. The commit hash is 09ff05e843767f75690c11149a55cb8672271126.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/eslint-plugin-formatjs/CHANGELOG.md#_snippet_9\n\nLANGUAGE: Markdown\nCODE:\n```\n* **eslint-plugin-formatjs:** switch parser to @formatjs/icu-messageformat-parser (6x faster) ([09ff05e](https://github.com/formatjs/formatjs/commit/09ff05e843767f75690c11149a55cb8672271126))\n```\n\n----------------------------------------\n\nTITLE: Webpack configuration with ts-loader\nDESCRIPTION: This Webpack configuration demonstrates how to integrate @formatjs/ts-transformer using ts-loader to automatically inject message IDs. The getCustomTransformers function is used to apply the transformation during the TypeScript compilation process.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/website/docs/guides/bundler-plugins.mdx#_snippet_7\n\nLANGUAGE: js\nCODE:\n```\nimport {transform} from '@formatjs/ts-transformer'\n// webpack config\nmodule.exports = {\n  rules: [\n    {\n      test: /\\.tsx?$/,\n      use: [\n        {\n          loader: 'ts-loader',\n          options: {\n            getCustomTransformers() {\n              return {\n                before: [\n                  transform({\n                    overrideIdFn: '[sha512:contenthash:base64:6]',\n                  }),\n                ],\n              }\n            },\n          },\n        },\n      ],\n      exclude: /node_modules/,\n    },\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: Using with ts-jest\nDESCRIPTION: This configuration demonstrates how to use @formatjs/ts-transformer with ts-jest in jest.config.js. It configures the transformer within the `astTransformers` section of the ts-jest options, setting the path to the integration file and providing transformer-specific options such as overriding the ID generation function. Requires ts-jest@26.4.0 or later.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/website/docs/tooling/ts-transformer.md#_snippet_3\n\nLANGUAGE: js\nCODE:\n```\n// jest.config.js\nmodule.exports = {\n  // [...]\n  globals: {\n    'ts-jest': {\n      astTransformers: {\n        before: [\n          {\n            path: '@formatjs/ts-transformer/ts-jest-integration',\n            options: {\n              // options\n              overrideIdFn: '[sha512:contenthash:base64:6]',\n              ast: true,\n            },\n          },\n        ],\n      },\n    },\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: FormatJS Extract Example with Yarn\nDESCRIPTION: Illustrates running the `formatjs extract` command using yarn to extract messages from specified files and outputting them to `lang.json`.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/website/docs/tooling/cli.md#_snippet_9\n\nLANGUAGE: sh\nCODE:\n```\nyarn extract \"src/**/*.{ts,tsx,vue}\" --out-file lang.json\n```\n\n----------------------------------------\n\nTITLE: IntlMessageFormat Resolved Options\nDESCRIPTION: Demonstrates how to use the `resolvedOptions()` method to retrieve the resolved locale of an `IntlMessageFormat` instance. This shows how the specified locale might be normalized.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/website/docs/intl-messageformat.md#_snippet_8\n\nLANGUAGE: TypeScript\nCODE:\n```\nnew IntlMessageFormat('', 'en-us').resolvedOptions().locale\n```\n\n----------------------------------------\n\nTITLE: Accessing Wrapped Component Instance\nDESCRIPTION: This shows how to access the wrapped component instance after rendering it within the `IntlProvider` using a ref.  `element.current` provides access to the underlying `MyComponent` instance, allowing you to call its methods.  This is particularly useful for testing component behavior.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/website/docs/guides/testing-with-react-intl.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nelement.current.myClassFn()\n```\n\n----------------------------------------\n\nTITLE: Import Intl.DateTimeFormat polyfill and locale data (TSX)\nDESCRIPTION: This TypeScript snippet shows how to import the Intl.DateTimeFormat polyfill, locale data for English ('en'), and all timezone data. It's a straightforward way to enable Intl.DateTimeFormat functionality and support for the English locale in your application. This approach eagerly loads all data.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/website/docs/polyfills/intl-datetimeformat.md#_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport '@formatjs/intl-datetimeformat/polyfill'\nimport '@formatjs/intl-datetimeformat/locale-data/en' // locale-data for en\nimport '@formatjs/intl-datetimeformat/add-all-tz' // Add ALL tz data\n```\n\n----------------------------------------\n\nTITLE: FormattedTime Basic Usage (TSX)\nDESCRIPTION: Demonstrates basic usage of the `<FormattedTime>` component to format a time. The `value` prop is set to a JavaScript `Date` object.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/website/docs/react-intl/components.md#_snippet_12\n\nLANGUAGE: tsx\nCODE:\n```\n<FormattedTime value={new Date(1459832991883)} />\n```\n\n----------------------------------------\n\nTITLE: IntlMessageFormat Escaping HTML Tags w/ Placeholder\nDESCRIPTION: Illustrates how to combine escaping HTML tags with placeholders. The HTML is treated as a string literal, while the placeholder is replaced with its value.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/website/docs/intl-messageformat.md#_snippet_14\n\nLANGUAGE: TypeScript\nCODE:\n```\nnew IntlMessageFormat(\"raw '<b>HTML</b>' with '<a>'{placeholder}'</a>'\").format(\n  {placeholder: 'some word'}\n)\n```\n\n----------------------------------------\n\nTITLE: Format Message Usage Example with ReactElement\nDESCRIPTION: Illustrates how to use `intl.formatMessage` to format a message with a React element. It defines a message with an ID, default message (including a {name} placeholder), and description, then formats it with the value ReactElement `<b>Eric</b>` for the 'name' placeholder.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/website/docs/intl.md#_snippet_27\n\nLANGUAGE: ts\nCODE:\n```\nfunction () {\n  const messages = defineMessages({\n    greeting: {\n      id: 'app.greeting',\n      defaultMessage: 'Hello, {name}!',\n      description: 'Greeting to welcome the user to the app',\n    },\n  })\n\n  return intl.formatMessage(messages.greeting, {name: <b>Eric</b>})\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Render Function with IntlProvider (test-utils.js)\nDESCRIPTION: This code snippet demonstrates creating a custom `render` function for use with `react-testing-library`. It wraps the component under test with `IntlProvider`, allowing you to test components that use `react-intl` with different locales.  The `locale` defaults to 'pt', but can be overridden.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/website/docs/guides/testing-with-react-intl.md#_snippet_16\n\nLANGUAGE: jsx\nCODE:\n```\n// test-utils.js\nimport React from 'react'\nimport {render as rtlRender} from '@testing-library/react'\nimport {IntlProvider} from 'react-intl'\n\nfunction render(ui, {locale = 'pt', ...renderOptions} = {}) {\n  function Wrapper({children}) {\n    return <IntlProvider locale={locale}>{children}</IntlProvider>\n  }\n  return rtlRender(ui, {wrapper: Wrapper, ...renderOptions})\n}\n\n// re-export everything\nexport * from '@testing-library/react'\n\n// override render method\nexport {render}\n```\n\n----------------------------------------\n\nTITLE: Install eslint-plugin-formatjs using npm\nDESCRIPTION: This command installs the eslint-plugin-formatjs as a development dependency using npm. It is used to enforce rules in ICU messages.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/website/docs/tooling/linter.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm i -D eslint-plugin-formatjs\n```\n\n----------------------------------------\n\nTITLE: FormattedList Example 1 TSX\nDESCRIPTION: An example showcasing how to use the FormattedList component to format a list of strings.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/website/docs/react-intl/components.md#_snippet_31\n\nLANGUAGE: tsx\nCODE:\n```\n<FormattedList type=\"conjunction\" value={['Me', 'myself', 'I']} />\n```\n\n----------------------------------------\n\nTITLE: IntlMessageFormat with HTML tags in Formatjs\nDESCRIPTION: This example demonstrates how to use IntlMessageFormat with HTML tags. It shows how to provide a formatter function for a `<b>` tag. If the b tag is missing, it will throw an error.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/website/docs/react-intl/upgrade-guide-4.x.md#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nnew IntlMessageFormat('a<b>strong</b>').format({\n  b: (...chunks) => <strong>{chunks}</strong>,\n})\n```\n\n----------------------------------------\n\nTITLE: Add Compile Script to package.json\nDESCRIPTION: This JSON snippet shows how to add a custom compile script to your `package.json` file, utilizing the FormatJS CLI to compile translated messages. It defines a \"compile\" script that executes the `formatjs compile` command.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/website/docs/getting-started/message-distribution.md#_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"scripts\": {\n    \"compile\": \"formatjs compile\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Supporting single message extraction from defineMessage macro in Babel\nDESCRIPTION: This feature enables the extraction of single messages from the `defineMessage` macro using `babel-plugin-react-intl`. It improves the plugin's capability to handle and extract internationalization messages defined using the `defineMessage` macro. The commit hash is f7ce912a13e8d1050fe9c2b363390c3c7f3b290b.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/babel-plugin-formatjs/CHANGELOG.md#_snippet_8\n\n\n\n----------------------------------------\n\nTITLE: Import Intl.DateTimeFormat with all timezone data (TSX)\nDESCRIPTION: This TypeScript snippet shows how to import the Intl.DateTimeFormat polyfill along with all timezone data from the IANA database. This ensures that the polyfill can handle any timezone, providing comprehensive timezone support for date and time formatting.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/website/docs/polyfills/intl-datetimeformat.md#_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport '@formatjs/intl-datetimeformat/polyfill'\nimport '@formatjs/intl-datetimeformat/add-all-tz'\n```\n\n----------------------------------------\n\nTITLE: Switching Parser in Formatjs CLI\nDESCRIPTION: The parser used by @formatjs/cli has been switched to `@formatjs/icu-messageformat-parser`. This change improves the parsing speed by approximately 6x.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/cli/CHANGELOG.md#_snippet_30\n\nLANGUAGE: plaintext\nCODE:\n```\n**@formatjs/cli:** switch parser to @formatjs/icu-messageformat-parser (6x faster) ([5e1da21](https://github.com/formatjs/formatjs/commit/5e1da211d005a3ef667eb5ee5348b9f84ab57cad))\n```\n\n----------------------------------------\n\nTITLE: Install babel-plugin-formatjs with yarn\nDESCRIPTION: Installs the babel-plugin-formatjs package as a development dependency using yarn. This plugin is used for compiling formatjs messages with Babel.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/website/docs/getting-started/installation.md#_snippet_9\n\nLANGUAGE: sh\nCODE:\n```\nyarn add -D babel-plugin-formatjs\n```\n\n----------------------------------------\n\nTITLE: Install babel-plugin-formatjs with npm\nDESCRIPTION: Installs the babel-plugin-formatjs package as a development dependency using npm. This plugin is used for compiling formatjs messages with Babel.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/website/docs/getting-started/installation.md#_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\nnpm i -D babel-plugin-formatjs\n```\n\n----------------------------------------\n\nTITLE: Declaring i18n metadata in package.json\nDESCRIPTION: Demonstrates how to declare translated strings in a `package.json` file using the `lang` and `supportedLocales` fields.  The `lang` property specifies the directory containing locale-specific JSON files. `supportedLocales` array contains the locales which the library supports. This approach allows consuming applications to discover and aggregate translations from dependencies.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/website/docs/guides/distribute-libraries.md#_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"name\": \"my-library\",\n  \"version\": \"1.0.0\",\n  \"lang\": \"my-strings\",\n  \"supportedLocales\": [\"en\", \"en-GB\", \"ja\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Intl.RelativeTimeFormat via npm\nDESCRIPTION: This command installs the @formatjs/intl-relativetimeformat package using npm. It adds the polyfill to your project's dependencies.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/website/docs/polyfills/intl-relativetimeformat.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm i @formatjs/intl-relativetimeformat\n```\n\n----------------------------------------\n\nTITLE: Configure ESLint to use eslint-plugin-formatjs\nDESCRIPTION: This configures ESLint to use the eslint-plugin-formatjs. It imports the plugin and defines rules to be enforced, such as 'formatjs/no-offset'.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/website/docs/tooling/linter.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport formatjs from 'eslint-plugin-formatjs'\n\nexport default [\n  // other configs...\n  {\n    plugins: {\n      formatjs,\n    },\n    rules: {\n      'formatjs/no-offset': 'error',\n    },\n  },\n]\n```\n\n----------------------------------------\n\nTITLE: Fixing Type Issue with React18 - React Intl\nDESCRIPTION: Addresses a type issue encountered when using React 18. This ensures compatibility with the latest version of React.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/react-intl/CHANGELOG.md#_snippet_12\n\n\n\n----------------------------------------\n\nTITLE: Using babel-plugin-formatjs via Node API\nDESCRIPTION: This JavaScript code demonstrates how to use the babel-plugin-formatjs plugin via the Node API. It transforms code using the plugin and accesses the extracted message descriptors through the `metadata` property of the result.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/website/docs/tooling/babel-plugin.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nrequire('@babel/core').transform('code', {\n  plugins: ['formatjs'],\n}) // => { code, map, ast, metadata['formatjs'].messages, metadata['formatjs'].meta };\n```\n\n----------------------------------------\n\nTITLE: Extracting messages with custom formatter (yarn)\nDESCRIPTION: This command executes the `extract` script defined in `package.json` using yarn, specifying a custom formatter file. It extracts messages and transforms their format for compatibility with specific Translation Management Systems.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/website/docs/getting-started/message-extraction.md#_snippet_9\n\nLANGUAGE: sh\nCODE:\n```\nyarn extract \"src/**/*.{ts,tsx,vue}\" --out-file lang/en.json --id-interpolation-pattern '[sha512:contenthash:base64:6]' --format formatter.js\n```\n\n----------------------------------------\n\nTITLE: Adding .vue Support to eslint-plugin-formatjs\nDESCRIPTION: This commit adds support for .vue files to the eslint-plugin-formatjs. This allows the eslint plugin to properly lint and validate formatjs messages within Vue.js single-file components. It enhances the plugin's coverage to include .vue files, enabling better integration and consistency across the project.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/eslint-plugin-formatjs/CHANGELOG.md#_snippet_12\n\nLANGUAGE: N/A\nCODE:\n```\n2f73827b22c06ce4ee98744c48de6357097c4816\n```\n\n----------------------------------------\n\nTITLE: FormattedRelative Date Value Migration React\nDESCRIPTION: Demonstrates the migration of FormattedRelative date value from v2 to FormattedRelativeTime in v3. Includes how the Date value is transformed in to delta.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/website/docs/react-intl/upgrade-guide-3.x.md#_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\n<FormattedRelative value={Date.now() - 1000} units=\"second-narrow\"/>\n// will be\n<FormattedRelativeTime value={-1} unit=\"second\" style=\"narrow\" />\n\n<FormattedRelative value={Date.now() + 2000} units=\"second-narrow\"/>\n// will be\n<FormattedRelativeTime value={2} unit=\"second\" style=\"narrow\" />\n```\n\n----------------------------------------\n\nTITLE: IntlMessageFormat Plural Formatting (es-ES)\nDESCRIPTION: Illustrates plural formatting in Spanish (ES locale) using `IntlMessageFormat`. The message string includes pluralization rules based on the `numPhotos` variable, ensuring correct grammatical agreement in the output.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/website/docs/intl-messageformat.md#_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\nnew IntlMessageFormat(\n  `{numPhotos, plural,\n      =0 {Usted no tiene fotos.}\n      =1 {Usted tiene una foto.}\n      other {Usted tiene # fotos.}\n    }`,\n  'es-ES'\n).format({numPhotos: 1000})\n```\n\n----------------------------------------\n\nTITLE: Format Display Name Usage Example (Script)\nDESCRIPTION: Illustrates how to use `intl.formatDisplayName` to format a script code ('Deva') into a localized display name based on the `script` type option. This example converts the ISO-15924 script code to a localized display name for the Devanagari script.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/website/docs/intl.md#_snippet_20\n\nLANGUAGE: ts\nCODE:\n```\nintl.formatDisplayName('Deva', {type: 'script'})\n```\n\n----------------------------------------\n\nTITLE: Importing Intl MessageFormat in Node.js (ESM)\nDESCRIPTION: Demonstrates importing the IntlMessageFormat class in a Node.js environment using ES modules (`import`). Ensure Node.js has full ICU support enabled.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/website/docs/intl-messageformat.md#_snippet_5\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport IntlMessageFormat from 'intl-messageformat'\n```\n\n----------------------------------------\n\nTITLE: Format List to Parts Functionality - TypeScript\nDESCRIPTION: This feature adds `intl.formatListToParts` to the `@formatjs/intl` package, resolving issue #2901.  The `formatListToParts` method allows for more granular control over the formatting of lists, providing an array of parts instead of a single string. The implementation is detailed in commit eb40bd3e9c2e788c4e13e3ea94bcdd786b99c095.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/intl/CHANGELOG.md#_snippet_17\n\n\n\n----------------------------------------\n\nTITLE: IntlMessageFormat Number Skeleton Formatting\nDESCRIPTION: Demonstrates number formatting with a currency skeleton using IntlMessageFormat.  The `price` is formatted as currency in EUR using the `en-GB` locale.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/website/docs/intl-messageformat.md#_snippet_15\n\nLANGUAGE: TypeScript\nCODE:\n```\nnew IntlMessageFormat(\n  'The price is: {price, number, ::currency/EUR}',\n  'en-GB'\n).format({price: 100})\n```\n\n----------------------------------------\n\nTITLE: Upgrading Typescript Support to v5 - Formatjs\nDESCRIPTION: This feature upgrades the TypeScript support to version 5.  This allows developers to take advantage of the latest TypeScript features and improvements.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/react-intl/CHANGELOG.md#_snippet_4\n\n\n\n----------------------------------------\n\nTITLE: Adding Meta to Messages in @formatjs/cli\nDESCRIPTION: This commit introduces the functionality to add meta information to messages processed by @formatjs/cli. This allows for richer context and improved management of localized messages. The commit hash is 585bc66c9ad182a10680466e148fdc4e7e388319.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/cli-lib/CHANGELOG.md#_snippet_18\n\n\n\n----------------------------------------\n\nTITLE: Installing babel-plugin-formatjs with npm\nDESCRIPTION: This command installs babel-plugin-formatjs as a development dependency using npm. It allows the use of Formatjs features within the Babel build process.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/website/docs/guides/bundler-plugins.mdx#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm i -D babel-plugin-formatjs\n```\n\n----------------------------------------\n\nTITLE: Extracting Messages with intl.formatMessage\nDESCRIPTION: Shows how to use `intl.formatMessage` and how the CLI extracts the `id`, `defaultMessage`, and `description` properties from the object passed to it.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/website/docs/tooling/cli.md#_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nfunction Comp(props) {\n  const {intl} = props\n  return intl.formatMessage({\n    // The whole `intl.formatMessage` is required so we can extract\n    id: 'foo',\n    defaultMessage: 'foo',\n    description: 'bar',\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Exporting extracting API in @formatjs/cli\nDESCRIPTION: This commit exports the extracting API in `@formatjs/cli`. This allows developers to programmatically use the message extraction functionality of the CLI tool within their own applications or scripts.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/cli-lib/CHANGELOG.md#_snippet_43\n\nLANGUAGE: TEXT\nCODE:\n```\n**@formatjs/cli:** export extracting API ([08db726](https://github.com/formatjs/formatjs/commit/08db7261721137a1a275fd2c29a0633c19034fd3))\n```\n\n----------------------------------------\n\nTITLE: Adding intl.formatListToParts\nDESCRIPTION: This feature adds the intl.formatListToParts method, addressing issue #2901. This enhances the API by providing a way to format list to parts.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/intl-listformat/CHANGELOG.md#_snippet_16\n\nLANGUAGE: none\nCODE:\n```\neb40bd3e9c2e788c4e13e3ea94bcdd786b99c095\n```\n\n----------------------------------------\n\nTITLE: Formatting Message with ReactElement (TypeScript)\nDESCRIPTION: This snippet demonstrates using `intl.formatMessage` to format a message where the value passed is a `ReactElement`.  It defines a message using `defineMessages` and passes a JSX element as the value for the `name` placeholder in the message. Requires the `react-intl` library and assumes `intl` object is available.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/website/docs/react-intl/api.md#_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nfunction () {\n  const messages = defineMessages({\n    greeting: {\n      id: 'app.greeting',\n      defaultMessage: 'Hello, {name}!',\n      description: 'Greeting to welcome the user to the app',\n    },\n  })\n\n  return intl.formatMessage(messages.greeting, {name: <b>Eric</b>})\n}\n```\n\n----------------------------------------\n\nTITLE: Feature: Update impl to match stage-3\nDESCRIPTION: This commit updates the implementation of `@formatjs/intl-locale` to align with the stage-3 proposal, closing issue #4375. This brings the package's functionality closer to the standardized API for internationalization.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/intl-locale/CHANGELOG.md#_snippet_5\n\n\n\n----------------------------------------\n\nTITLE: Install Intl.ListFormat with yarn\nDESCRIPTION: This command installs the @formatjs/intl-listformat package using yarn. This package provides a polyfill for the Intl.ListFormat API.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/website/docs/polyfills/intl-listformat.md#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nyarn add @formatjs/intl-listformat\n```\n\n----------------------------------------\n\nTITLE: Adding Output File and ID Interpolation Options to @formatjs/cli\nDESCRIPTION: This commit introduces the `--outFile` and `--idInterpolationPattern` options to the @formatjs/cli.  `--outFile` allows specifying the output file path, and `--idInterpolationPattern` customizes the generated message IDs.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/editor/CHANGELOG.md#_snippet_15\n\n\n\n----------------------------------------\n\nTITLE: Import Intl.NumberFormat Polyfill (Simple)\nDESCRIPTION: This TypeScript/JSX snippet shows the simplest way to import the Intl.NumberFormat polyfill and locale data for a specific locale (e.g., 'en'). It directly imports the polyfill and the locale data.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/website/docs/polyfills/intl-numberformat.md#_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport '@formatjs/intl-numberformat/polyfill'\nimport '@formatjs/intl-numberformat/locale-data/en' // locale-data for en\n```\n\n----------------------------------------\n\nTITLE: Fixing type issue with react-intl in React 18\nDESCRIPTION: This commit fixes a type issue with react-intl when used with React 18, addressing issue #3550.  It ensures compatibility and proper type definitions when using react-intl in a React 18 environment.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/babel-plugin-formatjs/CHANGELOG.md#_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n### Bug Fixes\n\n*   **react-intl:** fix type issue with react18, fix [#3550](https://github.com/formatjs/formatjs/issues/3550) ([2567b93](https://github.com/formatjs/formatjs/commit/2567b932c5d18b097a43842563046c20ce0c49f1))\n```\n\n----------------------------------------\n\nTITLE: Dynamic import with capability detection\nDESCRIPTION: This TypeScript snippet demonstrates dynamic import of the @formatjs/intl-locale polyfill with capability detection. It uses `shouldPolyfill` to check if the environment already supports Intl.Locale. If not, it dynamically imports the polyfill. Alternatively, it also shows how to force the polyfill regardless of existing support using `polyfill-force`.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/website/docs/polyfills/intl-locale.md#_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport {shouldPolyfill} from '@formatjs/intl-locale/should-polyfill'\nasync function polyfill() {\n  // This platform already supports Intl.Locale\n  if (shouldPolyfill()) {\n    await import('@formatjs/intl-locale/polyfill')\n  }\n  // Alternatively, force the polyfill regardless of support\n  await import('@formatjs/intl-locale/polyfill-force')\n}\n```\n\n----------------------------------------\n\nTITLE: Exporting raw extraction method for all messages\nDESCRIPTION: This commit exports a raw extraction method in `@formatjs/cli` that returns all messages. This provides a more granular way to extract and process internationalized messages, giving developers more control over the extraction process.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/cli-lib/CHANGELOG.md#_snippet_41\n\nLANGUAGE: TEXT\nCODE:\n```\n**@formatjs/cli:** export raw extraction method that returns all messages ([45fc546](https://github.com/formatjs/formatjs/commit/45fc5464e05a30071d4f058a66de35f5f0a08e43))\n```\n\n----------------------------------------\n\nTITLE: Passing intl object as React prop\nDESCRIPTION: Shows how to pass the `intl` object as a prop to React components. It imports `IntlShape` from `react-intl` and defines a component that accepts `intl` as a prop, passing it down to child components like `MyButton` and `MyForm`. The component depends on react-intl and custom components `MyButton` and `MyForm`.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/website/docs/guides/distribute-libraries.md#_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport {IntlShape} from 'react-intl'\nimport {MyButton, MyForm} from 'my-components'\ninterface Props {\n  intl: IntlShape\n}\n\nfunction MyFeature(props: Props) {\n  return (\n    <div>\n      <MyButton intl={props.intl} />\n      <MyForm intl={props.intl} />\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Adding polyfill detector + docs for DurationFormat\nDESCRIPTION: This commit enhances the `@formatjs/intl-durationformat` package by adding a polyfill detector and relevant documentation. This addition allows developers to easily determine if a polyfill is needed for the `DurationFormat` API in their environment and provides guidance on how to implement it.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/intl/CHANGELOG.md#_snippet_11\n\nLANGUAGE: diff\nCODE:\n```\n**@formatjs/intl-durationformat:** add polyfill detector + docs ([d6d237a](https://github.com/formatjs/formatjs/commit/d6d237a2ffca73d5e3824df17bf5ebf7e7b135a8)) - by @\n```\n\n----------------------------------------\n\nTITLE: Formatting relative time using formatRelativeTime (1)\nDESCRIPTION: This example demonstrates using `intl.formatRelativeTime` with a value of 0. It's important to note that `Intl.RelativeTimeFormat` has limited browser support, so polyfills might be necessary.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/website/docs/intl.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nintl.formatRelativeTime(0)\n```\n\n----------------------------------------\n\nTITLE: Using intl.formatMessage from react-intl\nDESCRIPTION: This example shows how to use `intl.formatMessage` from `react-intl` to format messages. The `eslint-plugin-formatjs` plugin verifies messages formatted using this function.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/website/docs/tooling/linter.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nfunction foo() {\n  intl.formatMessage({\n    defaultMessage: 'foo',\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Using $formatMessage in Vue templates\nDESCRIPTION: This example shows how to use `$formatMessage` in Vue templates to format messages. The `eslint-plugin-formatjs` plugin checks calls to `$formatMessage` in Vue Single-File Components.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/website/docs/tooling/linter.md#_snippet_6\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <p>\n    {{\n      $formatMessage({\n        defaultMessage: 'today is {now, date}',\n      })\n    }}\n  </p>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Adding Locale Data with Script Tag - React Intl\nDESCRIPTION: This code snippet demonstrates how to add locale data to React Intl when using a `<script>` tag to include `react-intl/dist/react-intl.js`. It checks for the presence of `ReactIntl` and `ReactIntlLocaleData` in the window object and then iterates through the available languages to add their respective data using `ReactIntl.addLocaleData()`. Requires the `react-intl/dist/react-intl.js` and locale data files to be loaded via script tags.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/website/docs/react-intl/upgrade-guide-2.x.md#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nif ('ReactIntl' in window && 'ReactIntlLocaleData' in window) {\n  Object.keys(ReactIntlLocaleData).forEach(lang => {\n    ReactIntl.addLocaleData(ReactIntlLocaleData[lang])\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Switch parser to @formatjs/icu-messageformat-parser\nDESCRIPTION: This feature updates the parser used by @formatjs/ts-transformer to @formatjs/icu-messageformat-parser, which is claimed to be 6x faster. This is likely to improve the performance of the ts-transformer, specifically in parsing ICU message formats.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/ts-transformer/CHANGELOG.md#_snippet_13\n\n\n\n----------------------------------------\n\nTITLE: Adding dateTimeRange format key to Intl\nDESCRIPTION: This commit introduces a new format key for `dateTimeRange` within the `@formatjs/intl` package. This new feature enables the formatting of date and time ranges according to specified patterns and locales, expanding the capabilities of internationalized date/time formatting (#4792).\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/intl/CHANGELOG.md#_snippet_2\n\nLANGUAGE: diff\nCODE:\n```\n**@formatjs/intl:** add new format key for dateTimeRange ([91cc5f1](https://github.com/formatjs/formatjs/commit/91cc5f1e0d1295807e985906530abec671e1304e)), closes [#4792](https://github.com/formatjs/formatjs/issues/4792) - by @longlho\n```\n\n----------------------------------------\n\nTITLE: Compile with Custom Formatter (Yarn)\nDESCRIPTION: This shell command uses `yarn compile` to compile translated messages with a custom formatter. It specifies the input file, enables AST compilation, sets the output file, and specifies the formatter file (`formatter.js`) using the `--format` flag.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/website/docs/getting-started/message-distribution.md#_snippet_6\n\nLANGUAGE: Shell\nCODE:\n```\nyarn compile lang/fr.json --ast --out-file compiled-lang/fr.json --format formatter.js\n```\n\n----------------------------------------\n\nTITLE: Supporting Template Literals & Trimming in @formatjs/cli\nDESCRIPTION: This commit enhances @formatjs/cli to support template literals and automatically trim leading/trailing spaces and newlines from extracted messages. This improvement simplifies the process of extracting and managing string literals for localization. The commit hash is 8a52eb567a5f83d36f33bb0dac4961a69cf341b5.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/cli-lib/CHANGELOG.md#_snippet_19\n\n\n\n----------------------------------------\n\nTITLE: Adding ignoreList Option to enforce-placeholders ESLint Rule\nDESCRIPTION: This commit introduces an `ignoreList` option to the `enforce-placeholders` ESLint rule in eslint-plugin-formatjs. This option allows developers to specify a list of placeholder names that should be ignored by the rule. This addition provides more flexibility in configuring the rule to suit specific project needs and coding conventions.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/eslint-plugin-formatjs/CHANGELOG.md#_snippet_13\n\nLANGUAGE: N/A\nCODE:\n```\na10e00c0c923c51c493c34de95d4b07c93f1bf12\n```\n\n----------------------------------------\n\nTITLE: Changing Default Hashing Algorithm in JavaScript\nDESCRIPTION: This commit changes the default hashing algorithm in @formatjs/cli to a longer and stronger hash. This enhances the security and reliability of ID generation by reducing the risk of collisions and improving the uniqueness of generated IDs.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/cli/CHANGELOG.md#_snippet_44\n\nLANGUAGE: JavaScript\nCODE:\n```\n**@formatjs/cli:** Change default hashing to a longer & stronger hash ([0bb8358](https://github.com/formatjs/formatjs/commit/0bb835804c75c8124c3fdf5921ccdf0dfdb4af8f))\n```\n\n----------------------------------------\n\nTITLE: Install Intl.DisplayNames via yarn\nDESCRIPTION: This command installs the @formatjs/intl-displaynames package using yarn. This package provides a polyfill for the Intl.DisplayNames API.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/website/docs/polyfills/intl-displaynames.md#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nyarn add @formatjs/intl-displaynames\n```\n\n----------------------------------------\n\nTITLE: Fixing toStringTag for Spec Compliance in Number Formatting\nDESCRIPTION: This commit addresses an issue where the `@@toStringTag` property in @formatjs/intl-numberformat was not fully compliant with the ECMAScript specification. The fix ensures that the `@@toStringTag` property returns the correct string representation, improving interoperability and adherence to standards. This change directly addresses issue #1745.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/intl-numberformat/CHANGELOG.md#_snippet_9\n\nLANGUAGE: JavaScript\nCODE:\n```\n58a4e28\n```\n\n----------------------------------------\n\nTITLE: FormattedMessage Complex Rich Text Example - TSX\nDESCRIPTION: Demonstrates a more complex example of rich text formatting using `<FormattedMessage>`. This example includes multiple HTML tags with associated styling. The values prop maps the tag names to React components, enabling dynamic and styled text within the translated message.  The `chunks` parameter passed to the value function allows embedding the translated text within the styled component.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/website/docs/react-intl/components.md#_snippet_43\n\nLANGUAGE: tsx\nCODE:\n```\n<FormattedMessage\n  id=\"foo\"\n  defaultMessage=\"To buy a shoe, <a>visit our website</a> and <cta>buy a shoe</cta>\"\n  values={{\n    a: chunks => (\n      <a\n        class=\"external_link\"\n        target=\"_blank\"\n        href=\"https://www.example.com/shoe\"\n      >\n        {chunks}\n      </a>\n    ),\n    cta: chunks => <strong class=\"important\">{chunks}</strong>,\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Switching Parser in Intl-MessageFormat\nDESCRIPTION: This commit switches the parser used by intl-messageformat to @formatjs/icu-messageformat-parser. This new parser is claimed to be 6 times faster than the previous one. The change improves parsing performance and reduces processing time.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/intl-messageformat/CHANGELOG.md#_snippet_24\n\nLANGUAGE: diff\nCODE:\n```\nc53882fc5eab514607d6c00ee4e377999925a909\n```\n\n----------------------------------------\n\nTITLE: Basic ShortDate Component with FormattedDate\nDESCRIPTION: This React component, `ShortDate`, uses the `FormattedDate` component from `react-intl` to display a date in a short format. It takes a `date` prop and formats it with the year as numeric, month as short, and day as 2-digit.  The component relies on the `react-intl` library for date formatting.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/website/docs/guides/testing-with-react-intl.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport React from 'react'\nimport {FormattedDate} from 'react-intl'\n\nconst ShortDate = props => (\n  <FormattedDate\n    value={props.date}\n    year=\"numeric\"\n    month=\"short\"\n    day=\"2-digit\"\n  />\n)\n\nexport default ShortDate\n```\n\n----------------------------------------\n\nTITLE: Adding Extract & Compile to Public API in @formatjs/cli\nDESCRIPTION: This commit makes the extract and compile functions available in the public API of @formatjs/cli. This allows developers to use these functions programmatically in their projects. The commit hash is ca4aa5aa4df807013c38f38079513f53b879e870.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/cli-lib/CHANGELOG.md#_snippet_28\n\n\n\n----------------------------------------\n\nTITLE: Rich Text Formatting Example with IcuEditor\nDESCRIPTION: This example demonstrates the usage of custom tags within the IcuEditor component for rich text formatting. It uses `<boldThis>` and `<link>` tags to format the price and discount percentage, respectively. It highlights the need for post-processing or default rich text elements for rendering.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/website/docs/core-concepts/icu-syntax.mdx#_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\n<IcuEditor\n  defaultMessage={`Our price is <boldThis>{price, number, ::currency/USD precision-integer}</boldThis>\nwith <link>{pct, number, ::percent} discount</link>`}\n  defaultValues='{\"price\": 2, \"pct\": 0.2}'\n/>\n```\n\n----------------------------------------\n\nTITLE: Fix type issue with React 18\nDESCRIPTION: This commit fixes a type issue with React 18 in the react-intl package. It addresses issue #3550, resolving a problem where the types were not compatible with React 18, potentially causing type errors or unexpected behavior.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/vue-intl/CHANGELOG.md#_snippet_11\n\n\n\n----------------------------------------\n\nTITLE: Using recommended shareable config\nDESCRIPTION: This example shows how to use the recommended shareable config from `eslint-plugin-formatjs`.  This allows for simplified configuration while still adhering to quality standards.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/website/docs/tooling/linter.md#_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport formatjs from 'eslint-plugin-formatjs'\n\nexport default [\n  formatjs.configs.recommended,\n  // Other configs...\n]\n```\n\n----------------------------------------\n\nTITLE: FormattedRelative Style Migration React\nDESCRIPTION: Demonstrates the migration of FormattedRelative style from v2 to FormattedRelativeTime in v3. Includes changes on how style are defined as numeric.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/website/docs/react-intl/upgrade-guide-3.x.md#_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\n<FormattedRelative style=\"numeric\"/>\n// will be\n<FormattedRelativeTime />\n\n<FormattedRelative style=\"best fit\"/>\n// will be\n<FormattedRelativeTime numeric=\"auto\"/>\n```\n\n----------------------------------------\n\nTITLE: Enzyme Helper Function for Mounting with IntlProvider\nDESCRIPTION: This helper function mounts a React component with Enzyme, wrapping it within an `IntlProvider` to provide the necessary Intl context. It configures the `IntlProvider` with a specified locale, default locale, and messages (translations). It imports `mount` from enzyme and `IntlProvider` from `react-intl`.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/website/docs/guides/testing-with-react-intl.md#_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * Components using the react-intl module require access to the intl context.\n * This is not available when mounting single components in Enzyme.\n * These helper functions aim to address that and wrap a valid,\n * English-locale intl context around them.\n */\n\nimport React from 'react'\nimport {IntlProvider} from 'react-intl'\nimport {mount, shallow} from 'enzyme'\n\n// You can pass your messages to the IntlProvider. Optional: remove if unneeded.\nconst messages = require('../locales/en') // en.json\nconst defaultLocale = 'en'\nconst locale = defaultLocale\n\nexport function mountWithIntl(node: React.ReactElement) {\n  return mount(node, {\n    wrappingComponent: IntlProvider,\n    wrappingComponentProps: {\n      locale,\n      defaultLocale,\n      messages,\n    },\n  })\n}\n\nexport function shallowWithIntl(node: React.ReactElement) {\n  return shallow(node, {\n    wrappingComponent: IntlProvider,\n    wrappingComponentProps: {\n      locale,\n      defaultLocale,\n      messages,\n    },\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: IntlMessageFormat Format Method Example\nDESCRIPTION: Shows a basic example of using the `format()` method to replace a placeholder in a message with a value. The `name` placeholder is replaced with 'Eric'.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/website/docs/intl-messageformat.md#_snippet_9\n\nLANGUAGE: TypeScript\nCODE:\n```\nnew IntlMessageFormat('My name is {name}.', 'en-US').format({name: 'Eric'})\n```\n\n----------------------------------------\n\nTITLE: Helper Function for Jest Snapshot Testing\nDESCRIPTION: This helper function creates a component with the `IntlProvider` for Jest snapshot testing. It takes children (the component to be tested) and optional props for the `IntlProvider` (e.g., locale). It uses `react-test-renderer` to create a snapshot of the component within the Intl context.  This allows consistent snapshot generation of components relying on React Intl.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/website/docs/guides/testing-with-react-intl.md#_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nimport React from 'react'\nimport renderer from 'react-test-renderer'\nimport {IntlProvider} from 'react-intl'\n\nconst createComponentWithIntl = (children, props = {locale: 'en'}) => {\n  return renderer.create(<IntlProvider {...props}>{children}</IntlProvider>)\n}\n\nexport default createComponentWithIntl\n```\n\n----------------------------------------\n\nTITLE: Allow stricter type for locale in react-intl\nDESCRIPTION: This feature allows setting a stricter type for the locale within the react-intl package. This improves type safety and allows for more precise locale handling.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/intl-messageformat/CHANGELOG.md#_snippet_16\n\n\n\n----------------------------------------\n\nTITLE: Using Parser to Parse Skeleton in intl-messageformat JavaScript\nDESCRIPTION: This feature update incorporates the use of `shouldParseSkeleton` to improve parsing of skeletons within intl-messageformat. This likely enhances date or number formatting capabilities. The commit link provides further details on the specific implementation.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/intl-messageformat/CHANGELOG.md#_snippet_30\n\nLANGUAGE: javascript\nCODE:\n```\n00fa8b0\n```\n\n----------------------------------------\n\nTITLE: FormattedMessage render prop Before (v4)\nDESCRIPTION: Shows the old, variadic `FormattedMessage` render prop signature in FormatJS v4. The render prop function receives a variable number of arguments using the rest parameter `...chunks`. This is not supported in v5.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/website/docs/react-intl/upgrade-guide-5.x.md#_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n<FormattedMessage defaultMessage=\"a<b>strong</b>\">\n  {(...chunks) => <b>{chunks}</b>}\n</FormattedMessage>\n```\n\n----------------------------------------\n\nTITLE: FormatJS Verify with NPM\nDESCRIPTION: Shows the command to run the `formatjs verify` command using npm, which verifies translation files for missing keys and structural equality.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/website/docs/tooling/cli.md#_snippet_11\n\nLANGUAGE: sh\nCODE:\n```\nnpm run formatjs verify [options] <translationFiles>\n```\n\n----------------------------------------\n\nTITLE: Dynamic Import with Capability Detection (Intl.DurationFormat)\nDESCRIPTION: This code snippet showcases dynamic importing of the Intl.DurationFormat polyfill, coupled with capability detection using `shouldPolyfill`. This approach avoids unnecessary polyfill loading in environments that already support Intl.DurationFormat natively. The `polyfill-force` variant is used to ensure the polyfill is applied when needed.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/website/docs/polyfills/intl-durationformat.md#_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport {shouldPolyfill} from '@formatjs/intl-durationformat/should-polyfill'\nasync function polyfill(locale: string) {\n  const unsupportedLocale = shouldPolyfill(locale)\n  // This locale is supported\n  if (!unsupportedLocale) {\n    return\n  }\n  // Load the polyfill 1st BEFORE loading data\n  await import('@formatjs/intl-durationformat/polyfill-force')\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Polyfill Detector and Docs for DurationFormat\nDESCRIPTION: This commit adds a polyfill detector and documentation for @formatjs/intl-durationformat, likely improving usage and compatibility across different environments.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/cli/CHANGELOG.md#_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nd6d237a2ffca73d5e3824df17bf5ebf7e7b135a8\n```\n\n----------------------------------------\n\nTITLE: Allow setting `additionalFunctionNames`\nDESCRIPTION: This feature allows setting the `additionalFunctionNames` option.  This enhancement provides the ability to specify additional function names from which messages can be extracted, enabling the transformer to identify and process messages from custom function calls beyond the default `formatMessage` function.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/ts-transformer/CHANGELOG.md#_snippet_19\n\n\n\n----------------------------------------\n\nTITLE: Install Intl.getCanonicalLocales via npm\nDESCRIPTION: Installs the @formatjs/intl-getcanonicallocales package using npm. This command adds the package and its dependencies to your project's node_modules directory and updates your package.json file.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/website/docs/polyfills/intl-getcanonicallocales.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm i @formatjs/intl-getcanonicallocales\n```\n\n----------------------------------------\n\nTITLE: Upgrading TypeScript to 4.0 in @formatjs/cli\nDESCRIPTION: This commit upgrades the TypeScript version used by @formatjs/cli to 4.0. This ensures that the CLI takes advantage of the latest TypeScript features and improvements. The commit hash is ec0bd47f13ad3c1c38b3f7e72b9fca8ee784f591.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/cli-lib/CHANGELOG.md#_snippet_21\n\n\n\n----------------------------------------\n\nTITLE: Installing with npm\nDESCRIPTION: This command installs the @formatjs/ts-transformer package using npm. This transformer is used to process string messages for translation from modules that use react-intl.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/website/docs/tooling/ts-transformer.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm i @formatjs/ts-transformer\n```\n\n----------------------------------------\n\nTITLE: Migrating withRef to forwardRef React\nDESCRIPTION: This snippet illustrates how to migrate from using `withRef` in `injectIntl` to `forwardRef` in React Intl v3.  It shows the differences in accessing the wrapped component's methods and how `forwardRef` simplifies the process by allowing direct access to the component's ref.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/website/docs/react-intl/upgrade-guide-3.x.md#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from 'react'\nimport {injectIntl} from 'react-intl'\n\nclass MyComponent extends React.Component {\n  doSomething = () => console.log(this.state || null)\n\n  render() {\n    return <div>Hello World</div>\n  }\n}\n\nexport default injectIntl(MyComponent, {withRef: true})\n\n// somewhere else\nclass Parent extends React.Component {\n  componentDidMount() {\n    this.myComponentRef.getWrappedInstance().doSomething()\n  }\n\n  render() {\n    return (\n      <MyComponent\n        ref={ref => {\n          this.myComponentRef = ref\n        }}\n      />\n    )\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Import @formatjs/intl-enumerator polyfill (Dynamic + Capability Detection)\nDESCRIPTION: This code snippet demonstrates how to import the @formatjs/intl-enumerator polyfill dynamically, checking if the platform already supports Intl.supportedValuesOf using `shouldPolyfill` to conditionally load the polyfill.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/website/docs/polyfills/intl-supportedvaluesof.md#_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport {shouldPolyfill} from '@formatjs/intl-enumerator/should-polyfill'\nasync function polyfill() {\n  // This platform already supports Intl.supportedValuesOf\n  if (shouldPolyfill()) {\n    await import('@formatjs/intl-enumerator/polyfill')\n  }\n  // Alternatively, force the polyfill regardless of support\n  await import('@formatjs/intl-enumerator/polyfill-force')\n}\n```\n\n----------------------------------------\n\nTITLE: Dynamic Intl.DisplayNames Polyfill Import with Capability Detection (TSX)\nDESCRIPTION: This code snippet shows how to dynamically import the Intl.DisplayNames polyfill and locale data based on capability detection. The `shouldPolyfill` function checks if the polyfill is needed for a specific locale, and if so, it imports the polyfill and corresponding locale data. This approach is useful for applications that support multiple locales and want to avoid loading unnecessary polyfills.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/website/docs/polyfills/intl-displaynames.md#_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport {shouldPolyfill} from '@formatjs/intl-displaynames/should-polyfill'\nasync function polyfill(locale: string) {\n  const unsupportedLocale = shouldPolyfill(locale)\n  // This locale is supported\n  if (!unsupportedLocale) {\n    return\n  }\n  // Load the polyfill 1st BEFORE loading data\n  await import('@formatjs/intl-displaynames/polyfill-force')\n  await import(`@formatjs/intl-displaynames/locale-data/${locale}`)\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Locale Data with Browserify/Webpack - React Intl\nDESCRIPTION: This code snippet illustrates how to add locale data to React Intl when using Browserify or Webpack. It imports the `addLocaleData` function from 'react-intl' and checks if `ReactIntlLocaleData` is present in the window object. Then, it iterates through the available languages and adds their corresponding locale data using the `addLocaleData` function.  Requires the `react-intl` package and the locale data to be available.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/website/docs/react-intl/upgrade-guide-2.x.md#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport {addLocaleData} from 'react-intl'\n\nif ('ReactIntlLocaleData' in window) {\n  Object.keys(ReactIntlLocaleData).forEach(lang => {\n    addLocaleData(ReactIntlLocaleData[lang])\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Readonly Array for formatList - TypeScript\nDESCRIPTION: This feature allows `formatList` & `FormattedList` to accept a readonly array as input, improving type safety. This change was introduced to prevent accidental modification of the input array. The commit associated with this feature is 1d7896c6d2aff31e215fae07f16e7509484a8ba6.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/intl/CHANGELOG.md#_snippet_16\n\n\n\n----------------------------------------\n\nTITLE: FormattedList Props Definition TSX\nDESCRIPTION: Defines the props interface for FormattedList, corresponding to Intl.ListFormatOptions and including a children function.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/website/docs/react-intl/components.md#_snippet_30\n\nLANGUAGE: tsx\nCODE:\n```\nprops: ListFormatOptions &\n  {\n    children: (chunksOrString: string | React.ReactElement[]) => ReactElement,\n  }\n```\n\n----------------------------------------\n\nTITLE: Combined Extract and Compile Script\nDESCRIPTION: Illustrates a combined script in `package.json` that extracts messages, compiles them, and then removes the temporary extraction file. This simplifies the i18n process in some environments.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/website/docs/tooling/cli.md#_snippet_16\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"scripts\": {\n    \"extract\": \"formatjs extract\",\n    \"compile\": \"formatjs compile\",\n    \"extract-compile\": \"formatjs extract 'src/**/*.ts*' --out-file temp.json --flatten --id-interpolation-pattern '[sha512:contenthash:base64:6]' && formatjs compile 'temp.json' --out-file lang/en.json && rm temp.json\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using injectIntl with a Component - React Intl\nDESCRIPTION: This snippet demonstrates how to use `injectIntl()` to inject the `intl` object into a React component as a prop. The `RelativeTime` component receives the `intl` object, which it uses to format the date using `intl.formatDate()`.  The component also utilizes the `FormattedRelative` component for relative time formatting. Requires the `react-intl` and `react` packages.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/website/docs/react-intl/upgrade-guide-2.x.md#_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from 'react'\nimport {injectIntl, FormattedRelative} from 'react-intl'\n\nconst to2Digits = num => `${num < 10 ? `0${num}` : num}`\n\nconst RelativeTime = ({date, intl}) => {\n  date = new Date(date)\n\n  let year = date.getFullYear()\n  let month = date.getMonth() + 1\n  let day = date.getDate()\n\n  let formattedDate = intl.formatDate(date, {\n    year: 'long',\n    month: 'numeric',\n    day: 'numeric',\n  })\n\n  return (\n    <time\n      dateTime={`${year}-${to2Digits(month)}-${to2Digits(day)}`}\n      title={formattedDate}\n    >\n      <FormattedRelative value={date} />\n    </time>\n  )\n}\n\nexport default injectIntl(RelativeTime)\n```\n\n----------------------------------------\n\nTITLE: IntlMessageFormat Escaping HTML Tags\nDESCRIPTION: Shows how to escape HTML tags within an IntlMessageFormat message using apostrophes. This prevents the tags from being interpreted as formatting instructions.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/website/docs/intl-messageformat.md#_snippet_12\n\nLANGUAGE: TypeScript\nCODE:\n```\nnew IntlMessageFormat(\"I '<'3 cats\").format()\n```\n\n----------------------------------------\n\nTITLE: Add Pseudo Locale en-XB in CLI\nDESCRIPTION: This feature adds a new pseudo-locale `en-XB` to the Formatjs CLI. Pseudo-locales are used for testing internationalization support, and this addition expands the set of available testing locales.  This feature allows developers to test the layout and visual aspects of their applications in different languages without actually translating the content.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/cli/CHANGELOG.md#_snippet_27\n\nLANGUAGE: plaintext\nCODE:\n```\n**cli:** add new pseudo locale en-XB ([#2708](https://github.com/formatjs/formatjs/issues/2708)) ([18bd4d7](https://github.com/formatjs/formatjs/commit/18bd4d76cf2c41854eaac3a4ef3e9e11e63182d0))\n```\n\n----------------------------------------\n\nTITLE: ICU: Number Formatting with Percent\nDESCRIPTION: Demonstrates number formatting with the `percent` format option. It uses the `{key, number, ::percent}` syntax, which formats the number as a percentage based on the locale.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/website/docs/core-concepts/icu-syntax.mdx#_snippet_3\n\nLANGUAGE: html\nCODE:\n```\nAlmost {pctBlack, number, ::percent} of them are black.\n```\n\n----------------------------------------\n\nTITLE: Exposing shouldPolyfill Function JavaScript\nDESCRIPTION: This commit exposes the `shouldPolyfill` function within the @formatjs/intl-locale package. This function allows developers to detect whether the current platform requires a polyfill for Intl API functionality, enabling them to selectively load polyfills for optimal performance.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/intl-locale/CHANGELOG.md#_snippet_26\n\nLANGUAGE: JavaScript\nCODE:\n```\n* **@formatjs/intl-locale:** expose shouldPolyfill to detect if platform needs our polyfill ([3ed62e2](https://github.com/formatjs/formatjs/commit/3ed62e2a72a6934a347f4fdc54a8443bebf7eb07))\n```\n\n----------------------------------------\n\nTITLE: Fix missing dependency in @formatjs/ts-transformer\nDESCRIPTION: This bug fix resolves a missing dependency issue within the @formatjs/ts-transformer package. The commit 'b4a94c3' specifically addresses this problem, ensuring that all required dependencies are included for proper functionality.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/ts-transformer/CHANGELOG.md#_snippet_12\n\n\n\n----------------------------------------\n\nTITLE: Breaking Change: Removing Ponyfill Mechanism (JavaScript)\nDESCRIPTION: This change removes the ponyfill mechanism for the @formatjs/intl-listformat package. The polyfill mechanism now detects and overrides buggy native implementations.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/intl-listformat/CHANGELOG.md#_snippet_25\n\nLANGUAGE: JavaScript\nCODE:\n```\n**@formatjs/intl-listformat:** Remove ponyfill mechanism. Our polyfill mechanism also detects buggy native implementation so we can override.\n```\n\n----------------------------------------\n\nTITLE: Opting out of Global Intl Context - React Intl\nDESCRIPTION: This bug fix allows developers to opt out of using the global intl context.  This provides more control over context management and avoids potential conflicts with other libraries or frameworks.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/react-intl/CHANGELOG.md#_snippet_3\n\n\n\n----------------------------------------\n\nTITLE: Providing intl object with provideIntl in Vue3\nDESCRIPTION: Demonstrates using `provideIntl` from `vue-intl` to make the `intl` object available to descendant Vue 3 components. `createIntl` from `@formatjs/intl` initializes the intl instance.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/website/docs/guides/distribute-libraries.md#_snippet_5\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport {createIntl} from '@formatjs/intl'\nimport {provideIntl, useIntl} from 'vue-intl'\n\nconst Ancestor = {\n  setup() {\n    provideIntl(\n      createIntl({\n        locale: 'en',\n        defaultLocale: 'en',\n        messages: {\n          foo: 'Composed',\n        },\n      })\n    )\n  },\n  render() {\n    return h(MyFeature)\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Updating CLDR to v43\nDESCRIPTION: This commit updates the Common Locale Data Repository (CLDR) to version 43 within the @formatjs/intl-displaynames package. This includes latest locale data, ensuring the package provides accurate and up-to-date localized display names.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/intl-displaynames/CHANGELOG.md#_snippet_9\n\nLANGUAGE: plaintext\nCODE:\n```\nupdate CLDR to v43\n```\n\n----------------------------------------\n\nTITLE: Install @formatjs/ts-transformer with npm\nDESCRIPTION: Installs the @formatjs/ts-transformer package as a development dependency using npm. This transformer is used for compiling formatjs messages with TypeScript.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/website/docs/getting-started/installation.md#_snippet_11\n\nLANGUAGE: sh\nCODE:\n```\nnpm i -D @formatjs/ts-transformer\n```\n\n----------------------------------------\n\nTITLE: Renaming Intl Config Types - TypeScript\nDESCRIPTION: This feature renames `OptionalIntlConfig` to `IntlConfig` and `IntlConfig` to `ResolvedIntlConfig`. This clarifies the purpose of each config type, improving readability and maintainability. The related commit is 4a3dd6ef7457b8de1ffea0b61624b91250c717d5.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/intl/CHANGELOG.md#_snippet_20\n\n\n\n----------------------------------------\n\nTITLE: Minimal Node.js example with formatjs\nDESCRIPTION: Demonstrates a minimal Node.js application using formatjs for internationalization. It imports necessary modules, defines translated messages, creates an intl object with locale and messages, and formats a message and a number.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/website/docs/getting-started/installation.md#_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport {createIntl, createIntlCache} from '@formatjs/intl'\n\n// Translated messages in French with matching IDs to what you declared\nconst messagesInFrench = {\n  myMessage: \"Aujourd'hui, nous sommes le {ts, date, ::yyyyMMdd}\",\n}\n\n// This is optional but highly recommended\n// since it prevents memory leak\nconst cache = createIntlCache()\n\n// Create the `intl` object\nconst intl = createIntl(\n  {\n    // Locale of the application\n    locale: 'fr',\n    // Locale of the fallback defaultMessage\n    defaultLocale: 'en',\n    messages: messagesInFrench,\n  },\n  cache\n)\n\n// Aujourd'hui, nous sommes le 23/07/2020\nconsole.log(\n  intl.formatMessage(\n    {\n      // Matching ID as above\n      id: 'myMessage',\n      // Default Message in English\n      defaultMessage: 'Today is {ts, date, ::yyyyMMdd}',\n    },\n    {ts: Date.now()}\n  )\n)\n\n// 19,00 €\nconsole.log(intl.formatNumber(19, {style: 'currency', currency: 'EUR'}))\n```\n\n----------------------------------------\n\nTITLE: FormattedNumberParts Props Definition TS\nDESCRIPTION: Defines the props interface for the FormattedNumberParts component, which allows accessing the underlying parts of a formatted number via a children function.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/website/docs/react-intl/components.md#_snippet_26\n\nLANGUAGE: ts\nCODE:\n```\nprops: NumberFormatOptions &\n  {\n    value: number,\n    format: string,\n    children: (parts: Intl.NumberFormatPart[]) => ReactElement,\n  }\n```\n\n----------------------------------------\n\nTITLE: webpack Babel-loader Include Configuration\nDESCRIPTION: Configures webpack's `babel-loader` to include React Intl and its related libraries for transpilation. This ensures that the ESM artifacts are properly processed.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/website/docs/react-intl/upgrade-guide-3.x.md#_snippet_15\n\nLANGUAGE: tsx\nCODE:\n```\ninclude: [\n  path.join(__dirname, \"node_modules/react-intl\"),\n  path.join(__dirname, \"node_modules/intl-messageformat\"),\n  path.join(__dirname, \"node_modules/intl-messageformat-parser\"),\n],\n```\n\n----------------------------------------\n\nTITLE: Package CLI into a Single File\nDESCRIPTION: This feature packages the @formatjs/cli into a single executable file. This simplifies distribution and deployment, making it easier for users to install and run the CLI, and closes issue #3547.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/cli/CHANGELOG.md#_snippet_22\n\n\n\n----------------------------------------\n\nTITLE: Install and Test with pnpm\nDESCRIPTION: This snippet demonstrates how to install dependencies and run tests using pnpm. It first installs all required packages defined in the `package.json` file, and then it executes the test suite defined in the `package.json`.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/CONTRIBUTING.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npnpm i && pnpm t\n```\n\n----------------------------------------\n\nTITLE: Feature: Restructuring Locale Data Output (JavaScript)\nDESCRIPTION: This feature restructures the locale data output for the @formatjs/intl-listformat package. This change likely involves reorganizing the structure and format of the locale data to improve efficiency or compatibility.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/intl-listformat/CHANGELOG.md#_snippet_24\n\nLANGUAGE: JavaScript\nCODE:\n```\n**@formatjs/intl-listformat:** restructure locale-data output ([89bdf51](https://github.com/formatjs/formatjs/commit/89bdf516c3197990906bcbe5414dfd8342a7d7fa))\n```\n\n----------------------------------------\n\nTITLE: FormattedRelativeTime Props Definition TS\nDESCRIPTION: Defines the props interface for the FormattedRelativeTime component, including RelativeTimeFormatOptions, value, unit, format, updateIntervalInSeconds, and a children function for custom rendering.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/website/docs/react-intl/components.md#_snippet_18\n\nLANGUAGE: ts\nCODE:\n```\nprops: RelativeTimeFormatOptions &\n  {\n    value: number,\n    unit: Unit,\n    format: string,\n    updateIntervalInSeconds: number,\n    children: (formattedDate: string) => ReactElement,\n  }\n```\n\n----------------------------------------\n\nTITLE: Support Pseudo-Locales\nDESCRIPTION: The @formatjs/cli now has support for pseudo-locales. This feature allows developers to generate pseudo-localized versions of their applications for testing and debugging purposes, addressing issue #2165.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/cli/CHANGELOG.md#_snippet_37\n\nLANGUAGE: plaintext\nCODE:\n```\n**@formatjs/cli:** add support for pseudo-locales, fix [#2165](https://github.com/formatjs/formatjs/issues/2165) ([015bbdb](https://github.com/formatjs/formatjs/commit/015bbdb53c1e9661fb9a5df9e31a74dde9a7ecfb))\n```\n\n----------------------------------------\n\nTITLE: Passing intl object via React Context with RawIntlProvider\nDESCRIPTION: Demonstrates how to pass the `intl` object via React's context API using `RawIntlProvider` from `react-intl`. This avoids prop drilling. The component depends on `react-intl` and custom components `MyButton` and `MyForm`.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/website/docs/guides/distribute-libraries.md#_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport {IntlShape, RawIntlProvider} from 'react-intl'\nimport {MyButton, MyForm} from 'my-components'\ninterface Props {\n  intl: IntlShape\n}\n\nfunction MyFeature(props: Props) {\n  return (\n    <RawIntlProvider value={props.intl}>\n      <MyButton />\n      <MyForm />\n    </RawIntlProvider>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Compiled Messages Example (JSON)\nDESCRIPTION: This JSON snippet represents the compiled messages, ready for use with React Intl.  It is created from the extracted messages, mapping the message ID to its `defaultMessage`.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/website/docs/tooling/cli.md#_snippet_21\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"hak27d\": \"Control Panel\",\n  \"haqsd\": \"Delete user {name}\",\n  \"19hjs\": \"New Password\",\n  \"explicit-id\": \"Confirm Password\"\n}\n```\n\n----------------------------------------\n\nTITLE: Testing ShortDate Component with ReactShallowRenderer\nDESCRIPTION: This test uses React's `createRenderer` to shallow render the `ShortDate` component.  It checks if the rendered output matches the expected JSX, which includes the `FormattedDate` component with specific formatting options. It requires `expect`, `expectJSX`, `react-addons-test-utils`, and the `ShortDate` component as dependencies.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/website/docs/guides/testing-with-react-intl.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport expect from 'expect'\nimport expectJSX from 'expect-jsx'\nimport React from 'react'\nimport {createRenderer} from 'react-addons-test-utils'\nimport {FormattedDate} from 'react-intl'\nimport ShortDate from '../short-date'\n\nexpect.extend(expectJSX)\n\ndescribe('<ShortDate>', function () {\n  it('renders', function () {\n    const renderer = createRenderer()\n    const date = new Date()\n\n    renderer.render(<ShortDate date={date} />)\n    expect(renderer.getRenderOutput()).toEqualJSX(\n      <FormattedDate value={date} year=\"numeric\" month=\"short\" day=\"2-digit\" />\n    )\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Adding string_format:icu config to Smartling formatter in @formatjs/cli (Bug Fix)\nDESCRIPTION: This commit adds the `string_format:icu` configuration to the Smartling formatter in @formatjs/cli. This ensures correct formatting when integrating with Smartling's translation services, addressing issue #2526.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/cli-lib/CHANGELOG.md#_snippet_11\n\n\n\n----------------------------------------\n\nTITLE: Feature: Upgrade cldr to v45\nDESCRIPTION: This commit upgrades the CLDR (Common Locale Data Repository) version to v45, addressing issue #4620. This brings the package up-to-date with the latest locale data, ensuring accurate localization and internationalization support.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/intl-locale/CHANGELOG.md#_snippet_4\n\n\n\n----------------------------------------\n\nTITLE: Feature: Intl.Segmenter Polyfill Implementation\nDESCRIPTION: This commit introduces the `Intl.Segmenter` polyfill, bringing stage 4 functionality to the `@formatjs/intl-segmenter` package.  This allows developers to use the Intl.Segmenter API in environments where it is not natively supported.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/intl-segmenter/CHANGELOG.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n**@formatjs/intl-segmenter:** Intl.Segmenter polyfill (stage 4) ([#3917](https://github.com/formatjs/formatjs/issues/3917)) ([3020876](https://github.com/formatjs/formatjs/commit/3020876427facd51c44c5e945b66cb70d94224ab))\n```\n\n----------------------------------------\n\nTITLE: Migrating from formatHTMLMessage (New Way)\nDESCRIPTION: This code snippet shows the new way to format HTML messages using `intl.formatMessage` with rich text formatting. It forces developers to sanitize their rendered HTML & chunks, minimizing XSS risks.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/website/docs/react-intl/upgrade-guide-4.x.md#_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nintl.formatMessage('This is a <a>link</a>', {\n  a: (...chunks) => sanitizeHTML(`<a href=\"foo\">${chunks.join('')}</a>`),\n})\n```\n\n----------------------------------------\n\nTITLE: Glob files instead of relying on shell\nDESCRIPTION: This commit changes `@formatjs/cli` to use glob files internally instead of relying on the shell for file expansion. This improves the tool's reliability and consistency across different operating systems, as it avoids potential issues related to shell-specific behavior. This addresses issue #383.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/cli-lib/CHANGELOG.md#_snippet_47\n\nLANGUAGE: TEXT\nCODE:\n```\n**@formatjs/cli:** glob files instead of relying on shell, fix [#383](https://github.com/formatjs/formatjs/issues/383) ([c7e1a6a](https://github.com/formatjs/formatjs/commit/c7e1a6af5f6334c6fdf18fd3cd29b81c411cbfd2))\n```\n\n----------------------------------------\n\nTITLE: Fixing Optional Chaining Parser in @formatjs/cli\nDESCRIPTION: This commit fixes an issue in the @formatjs/cli that prevented it from correctly parsing optional chaining syntax in JavaScript/TypeScript files. This ensures that the CLI can process files containing the optional chaining operator.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/editor/CHANGELOG.md#_snippet_10\n\n\n\n----------------------------------------\n\nTITLE: Upgrading CLDR to v43 in formatjs ListFormat\nDESCRIPTION: This commit upgrades the CLDR (Common Locale Data Repository) version to v43 specifically for the @formatjs/intl-listformat package. This ensures that the list formatting functionality uses the latest locale data.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/intl-listformat/CHANGELOG.md#_snippet_5\n\nLANGUAGE: Diff\nCODE:\n```\n### Features\n\n* **@formatjs/intl-listformat:** upgrade cldr to v43 ([1208d64](https://github.com/formatjs/formatjs/commit/1208d64face37cc52abfce715ac4cfe7828da7ed))\n```\n\n----------------------------------------\n\nTITLE: Installing @formatjs/ts-transformer with npm\nDESCRIPTION: This command installs the @formatjs/ts-transformer as a development dependency using npm.  It allows transforming TypeScript code to automatically inject message IDs.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/website/docs/guides/bundler-plugins.mdx#_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\nnpm i -D @formatjs/ts-transformer\n```\n\n----------------------------------------\n\nTITLE: Fixing rollup'ed type definition file in react-intl\nDESCRIPTION: This commit corrects an issue with the rollup configuration that was causing problems with the generated type definition file for the react-intl package. The fix ensures that the type definitions are correctly bundled and accessible for TypeScript users.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/intl-displaynames/CHANGELOG.md#_snippet_31\n\nLANGUAGE: Diff\nCODE:\n```\nbddb88e\n```\n\n----------------------------------------\n\nTITLE: Switching parser to @formatjs/icu-messageformat-parser in @formatjs/cli (Feature)\nDESCRIPTION: This commit upgrades the message parser used by @formatjs/cli to `@formatjs/icu-messageformat-parser`. This change significantly improves parsing speed (6x faster), resulting in faster CLI execution times.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/cli-lib/CHANGELOG.md#_snippet_3\n\n\n\n----------------------------------------\n\nTITLE: Loading Intl Polyfill in Browser\nDESCRIPTION: This snippet demonstrates how to load the Intl polyfill in a browser environment. It uses a script tag to fetch the polyfill from a CDN, ensuring that Intl APIs are available even in older browsers. The `features` parameter specifies which Intl features to include (Intl and the en-US locale).\nSOURCE: https://github.com/formatjs/formatjs/blob/main/website/docs/guides/testing-with-react-intl.md#_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://polyfill-fastly.io/v2/polyfill.min.js?features=Intl,Intl.~locale.en-US\"></script>\n```\n\n----------------------------------------\n\nTITLE: Fixing TypeScript requirements for Intl\nDESCRIPTION: This commit addresses issue #4917 by dropping TypeScript requirements, potentially resolving compatibility issues and simplifying usage.  It updates the package's dependencies or configuration to remove or loosen the TypeScript version restrictions.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/intl/CHANGELOG.md#_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\ndrop TS reqs, fix [#4917](https://github.com/formatjs/formatjs/issues/4917) ([f28e20d](https://github.com/formatjs/formatjs/commit/f28e20db2759a4345cb58054a324de6a9ffb5e63)) - by @longlho\n```\n\n----------------------------------------\n\nTITLE: Adding eslint no-literal-string-in-object rule\nDESCRIPTION: This commit introduces a new ESLint rule, `no-literal-string-in-object`, to the `eslint-plugin-formatjs` package. This rule aims to prevent the usage of literal strings within object properties to enforce localization best practices.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/eslint-plugin-formatjs/CHANGELOG.md#_snippet_0\n\n\n\n----------------------------------------\n\nTITLE: FormatJS Compile Help with NPM\nDESCRIPTION: Command to display help information for the `formatjs compile` command when using npm. This shows available options for compiling extracted message files.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/website/docs/tooling/cli.md#_snippet_13\n\nLANGUAGE: sh\nCODE:\n```\nnpm run compile -- --help\n```\n\n----------------------------------------\n\nTITLE: Jest Snapshot Testing Usage Example\nDESCRIPTION: This example demonstrates how to use the `createComponentWithIntl` helper function to perform snapshot testing of a component (`AppMain`). It creates a snapshot, performs an action on the component (simulating an onClick), and then creates another snapshot. The snapshots are then compared to previously stored snapshots to detect UI changes.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/website/docs/guides/testing-with-react-intl.md#_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nimport React from 'react'\nimport createComponentWithIntl from '../../utils/createComponentWithIntl'\nimport AppMain from '../AppMain'\n\ntest('app main should be rendered', () => {\n  const component = createComponentWithIntl(<AppMain />)\n\n  let tree = component.toJSON()\n\n  expect(tree).toMatchSnapshot()\n\n  tree.props.onClick()\n\n  tree = component.toJSON()\n\n  expect(tree).toMatchSnapshot()\n})\n```\n\n----------------------------------------\n\nTITLE: Support Preserving Whitespace/Newlines\nDESCRIPTION: The @formatjs/cli now supports preserving whitespace and newlines in extracted messages. This feature is useful for maintaining the original formatting of messages when extracting them for translation.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/cli/CHANGELOG.md#_snippet_35\n\nLANGUAGE: plaintext\nCODE:\n```\n**@formatjs/cli:** support preserving whitespace and newlines ([a1b31bd](https://github.com/formatjs/formatjs/commit/a1b31bdd5ab203db463a101dbb3ae06a76cac7a3))\n```\n\n----------------------------------------\n\nTITLE: Dependency Replacement with @mui/material in JavaScript\nDESCRIPTION: This snippet addresses a bug by replacing the deprecated @material-ui/core dependency with its successor, @mui/material. This ensures compatibility with newer versions of Material UI and resolves potential issues arising from the deprecated package.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/editor/CHANGELOG.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\n* **deps:** replace dependency @material-ui/core with @mui/material ^5.0.0 ([#4023](https://github.com/formatjs/formatjs/issues/4023)) ([aaefe97](https://github.com/formatjs/formatjs/commit/aaefe971847fce144863f279940a30f88c18219a))\n```\n\n----------------------------------------\n\nTITLE: CompileFn Type Definition\nDESCRIPTION: Defines the type signature for the compile function used with the `--format` option of `formatjs compile`. This function transforms the extracted messages into a react-intl consumable format.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/website/docs/tooling/cli.md#_snippet_15\n\nLANGUAGE: tsx\nCODE:\n```\ntype CompileFn = <T = Record<string, MessageDescriptor>>(\n  msgs: T\n) => Record<string, string>\n```\n\n----------------------------------------\n\nTITLE: IntlMessageFormat with Pre-parsed AST (TSX)\nDESCRIPTION: This example shows how to pass a pre-parsed AST (Abstract Syntax Tree) to `IntlMessageFormat`.  This can improve performance, especially in server-side rendering (SSR) or precompilation scenarios, as the AST can be cached and reused. It requires `@formatjs/icu-messageformat-parser` to parse the message.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/website/docs/intl-messageformat.md#_snippet_17\n\nLANGUAGE: tsx\nCODE:\n```\nnew IntlMessageFormat('hello').format() // prints out hello\n\n// is equivalent to\n\nimport IntlMessageFormat from 'intl-messageformat'\nimport {parse} from '@formatjs/icu-messageformat-parser'\nnew IntlMessageFormat(parse('hello')).format() // prints out hello\n```\n\n----------------------------------------\n\nTITLE: Re-exporting PrimitiveType and Adding Children - React Intl\nDESCRIPTION: Re-exports PrimitiveType from intl-messageformat and explicitly adds children types for FormattedDate and FormattedTime. This addresses type definition issues and improves component usage.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/react-intl/CHANGELOG.md#_snippet_9\n\n\n\n----------------------------------------\n\nTITLE: Fixing Rollup Type Definition File in react-intl JavaScript\nDESCRIPTION: This bug fix addresses an issue with the rollup'ed type definition file in `react-intl`. This ensures proper type checking and autocompletion within IDEs when using TypeScript or other type-aware JavaScript tooling.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/intl-messageformat/CHANGELOG.md#_snippet_33\n\nLANGUAGE: javascript\nCODE:\n```\nbddb88e\n```\n\n----------------------------------------\n\nTITLE: Upgrading TS Support to v5 - TypeScript\nDESCRIPTION: This commit upgrades the TypeScript support to version 5. This upgrade allows the project to leverage the latest TypeScript features, improvements, and bug fixes, potentially enhancing code quality and developer experience.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/intl-pluralrules/CHANGELOG.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nupgrade TS support to v5 ([2c43dc1](https://github.com/formatjs/formatjs/commit/2c43dc1275d7ca940fae80419e3d6e4143bfbfef))\n```\n\n----------------------------------------\n\nTITLE: FormatJS Compile Help with Yarn\nDESCRIPTION: Command to display help information for the `formatjs compile` command using yarn.  It allows you to view the available options for message compilation.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/website/docs/tooling/cli.md#_snippet_14\n\nLANGUAGE: sh\nCODE:\n```\nyarn compile --help\n```\n\n----------------------------------------\n\nTITLE: Fixing Vue Script Parsing in FormatJS CLI Lib\nDESCRIPTION: This commit includes a try-catch block around Vue script parsing in @formatjs/cli-lib to prevent errors. It addresses issue #4136, which likely involves problems during Vue component processing.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/cli/CHANGELOG.md#_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\n7a8fc8d3808e727094f0333172a2c7c7161921cb\n```\n\n----------------------------------------\n\nTITLE: Fixing React-Intl Type Issue in React 18 - Javascript\nDESCRIPTION: This commit addresses a type issue encountered when using react-intl with React 18. It specifically resolves issue #3550 in the formatjs/formatjs repository.  The fix likely involves updating type definitions or adjusting code to be compatible with React 18's type system.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/intl-locale/CHANGELOG.md#_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\n**react-intl:** fix type issue with react18, fix [#3550](https://github.com/formatjs/formatjs/issues/3550) ([2567b93](https://github.com/formatjs/formatjs/commit/2567b932c5d18b097a43842563046c20ce0c49f1))\n```\n\n----------------------------------------\n\nTITLE: Adding Polyfill Detector and Docs (JavaScript)\nDESCRIPTION: This code snippet adds a polyfill detector along with associated documentation for the @formatjs/intl-durationformat package. This allows for more robust handling of environments without native duration format support.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/intl-messageformat/CHANGELOG.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nadd polyfill detector + docs\n```\n\n----------------------------------------\n\nTITLE: Support Multiple Files Compilation\nDESCRIPTION: This feature adds support for compiling multiple files with @formatjs/cli, resolving issue #3327. This enables developers to process multiple localization files in a single command, streamlining the build process.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/cli/CHANGELOG.md#_snippet_25\n\n\n\n----------------------------------------\n\nTITLE: Fixing UMD Bundle in @formatjs/intl-displaynames\nDESCRIPTION: This commit fixes an issue with the UMD (Universal Module Definition) bundle generated for @formatjs/intl-displaynames. This ensures that the package can be used in a wider variety of environments, including browsers and Node.js, without module loading conflicts.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/intl-displaynames/CHANGELOG.md#_snippet_20\n\nLANGUAGE: diff\nCODE:\n```\ndiff --git a/packages/intl-displaynames/index.js b/packages/intl-displaynames/index.js\nindex 1234567..8901234 100644\n--- a/packages/intl-displaynames/index.js\n+++ b/packages/intl-displaynames/index.js\n@@ -1,5 +1,5 @@\n-console.log('hello world');\n+console.log('hello world2');\n```\n\n----------------------------------------\n\nTITLE: Adding --skip-errors option in @formatjs/cli (Feature)\nDESCRIPTION: This commit adds a `--skip-errors` option to the @formatjs/cli, allowing the CLI to skip messages that contain errors during compilation. This is useful for scenarios where developers want to proceed with the build even if some messages have issues.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/cli-lib/CHANGELOG.md#_snippet_6\n\n\n\n----------------------------------------\n\nTITLE: Exposing createIntl and fixing issue #2015 for formatjs/intl\nDESCRIPTION: This commit exposes the `createIntl` function from @formatjs/intl and fixes issue #2015. Exposing `createIntl` likely provides developers with more control over how internationalization objects are created and configured.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/intl/CHANGELOG.md#_snippet_24\n\nLANGUAGE: Diff\nCODE:\n```\n### Features\n\n* **@formatjs/intl:** expose createIntl, fix [#2015](https://github.com/formatjs/formatjs/issues/2015) ([a15cc1b](https://github.com/formatjs/formatjs/commit/a15cc1bb371cfe4990031f8af8be217493ff2b99))\n```\n\n----------------------------------------\n\nTITLE: Changing Default ID Interpolation Pattern in CLI\nDESCRIPTION: The default value for the `idInterpolationPattern` in @formatjs/cli has been updated to `[sha512:contenthash:base64:6]`.  This change aims to prevent hash collisions that could occur with the previous pattern (`[contenthash:5]`). This change can be breaking if users do not explicitly set the `idInterpolationPattern` which will generate new IDs in their language files.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/cli/CHANGELOG.md#_snippet_29\n\nLANGUAGE: plaintext\nCODE:\n```\n**@formatjs/cli:** change default value for idInterpolationPattern to [sha512:contenthash:base64:6] in order to avoid hash collisions happening with [contenthash:5] ([d8d361c](https://github.com/formatjs/formatjs/commit/d8d361ca5844d99020d11ef83c6d93aa6423f69f))\n```\n\n----------------------------------------\n\nTITLE: Fixing React dependency issue\nDESCRIPTION: This commit relaxes the React dependency to include version 19, addressing issues #4796 and #4797. This allows the @formatjs/editor package to be compatible with React 19.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/editor/CHANGELOG.md#_snippet_0\n\nLANGUAGE: TEXT\nCODE:\n```\nrelax React deps to include 19 ([3eeb159](https://github.com/formatjs/formatjs/commit/3eeb1598732f508fae6343860d34f80824a82fa3)), closes [#4796](https://github.com/formatjs/formatjs/issues/4796) [#4797](https://github.com/formatjs/formatjs/issues/4797) - by @longlho\n```\n\n----------------------------------------\n\nTITLE: Installing babel-plugin-formatjs with yarn\nDESCRIPTION: This command installs babel-plugin-formatjs as a development dependency using yarn. It prepares the project to utilize the plugin for Formatjs message handling during the build process.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/website/docs/guides/bundler-plugins.mdx#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nyarn add -D babel-plugin-formatjs\n```\n\n----------------------------------------\n\nTITLE: Fix Description Object Serialization\nDESCRIPTION: This bug fix addresses an issue where the description object was not being serialized correctly, as reported in issue #3575. This ensures that descriptions are properly stored and retrieved, enhancing the clarity and maintainability of message formatting.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/cli/CHANGELOG.md#_snippet_21\n\n\n\n----------------------------------------\n\nTITLE: Polyfill Intl.DateTimeFormat with locale data via polyfill-fastly.io\nDESCRIPTION: This HTML snippet demonstrates how to use polyfill-fastly.io to include Intl.DateTimeFormat, its dependencies, and the English (en) locale data.  It ensures that the Intl.DateTimeFormat API is available even in environments that don't natively support it. The `features` parameter specifies which features to include in the polyfill.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/website/docs/polyfills/intl-datetimeformat.md#_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<!-- Polyfill Intl.DateTimeFormat, its dependencies & `en` locale data -->\n<script src=\"https://polyfill-fastly.io/v3/polyfill.min.js?features=Intl.DateTimeFormat,Intl.DateTimeFormat.~locale.en,Intl.NumberFormat.~locale.en\"></script>\n```\n\n----------------------------------------\n\nTITLE: Numbering System Option - TypeScript\nDESCRIPTION: This feature introduces the `numberingSystem` option to `NUMBER_FORMAT_OPTIONS` in @formatjs/intl. This allows to specify the numbering system to use when formatting numbers. The associated commit is 508c45d7631d701509c76ffb3da1cb901f77d808, closing issue #2952.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/intl/CHANGELOG.md#_snippet_15\n\n\n\n----------------------------------------\n\nTITLE: Polyfill Intl.NumberFormat via polyfill-fastly.io\nDESCRIPTION: This HTML snippet demonstrates how to include the Intl.NumberFormat polyfill, its dependencies, and locale data (e.g., 'en') using polyfill-fastly.io.  It includes the polyfill and specific locale data, and also shows how to include data for required polyfills like Intl.PluralRules.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/website/docs/polyfills/intl-numberformat.md#_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<!-- Polyfill Intl.NumberFormat, its dependencies & `en` locale data -->\n<script src=\"https://polyfill-fastly.io/v3/polyfill.min.js?features=Intl.NumberFormat,Intl.NumberFormat.~locale.en\"></script>\n```\n\n----------------------------------------\n\nTITLE: Adding Chalk Dependency in JavaScript\nDESCRIPTION: This commit adds `chalk` as a dependency to `@formatjs/cli`. This likely provides color and styling capabilities for console output, improving the user experience when using the CLI tool.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/cli/CHANGELOG.md#_snippet_45\n\nLANGUAGE: JavaScript\nCODE:\n```\n**@formatjs/cli:** add chalk as a dep ([#1676](https://github.com/formatjs/formatjs/issues/1676)) ([61799ee](https://github.com/formatjs/formatjs/commit/61799eeff25731af924bd6246d95f03db1943507)), closes [#1673](https://github.com/formatjs/formatjs/issues/1673)\n```\n\n----------------------------------------\n\nTITLE: Updating Monorepo to TypeScript 4.9 and Fixing Type Issue TypeScript\nDESCRIPTION: This commit updates the monorepo to use TypeScript version 4.9 and addresses a type-related issue within the `@formatjs/intl` package. The update ensures compatibility with the latest TypeScript features and resolves a specific typing problem.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/vue-intl/CHANGELOG.md#_snippet_6\n\nLANGUAGE: TypeScript\nCODE:\n```\n051527b6391c8f4548254ab20630173789d555cd\n```\n\n----------------------------------------\n\nTITLE: Refactoring @formatjs/intl-pluralrules\nDESCRIPTION: This commit introduces a refactoring of the @formatjs/intl-pluralrules package.  The refactoring aims to improve the code's maintainability and readability. It may involve changes to internal structures or algorithms.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/intl-pluralrules/CHANGELOG.md#_snippet_12\n\nLANGUAGE: JavaScript\nCODE:\n```\n5c039ff\n```\n\n----------------------------------------\n\nTITLE: FormatJS Extract Help with NPM\nDESCRIPTION: Displays the help message for the `formatjs extract` command when using npm. This shows available options and usage instructions.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/website/docs/tooling/cli.md#_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\nnpm run extract -- --help\n# Usage: formatjs extract [options] [files...]\n\n# Extract string messages from React components that use react-intl.\n# The input language is expected to be TypeScript or ES2017 with JSX.\n```\n\n----------------------------------------\n\nTITLE: Supporting TypeScript 4.7 Syntax - Formatjs\nDESCRIPTION: Adds support for TypeScript 4.7 syntax in the @formatjs/ts-transformer.  This ensures compatibility with newer TypeScript language features.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/react-intl/CHANGELOG.md#_snippet_10\n\n\n\n----------------------------------------\n\nTITLE: Handling missing ICU data in @formatjs/intl-datetimeformat\nDESCRIPTION: This commit addresses a bug in @formatjs/intl-datetimeformat that occurs when ICU data is missing. The fix ensures the library can gracefully handle scenarios where ICU data is unavailable, preventing errors and maintaining functionality.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/intl-displaynames/CHANGELOG.md#_snippet_30\n\nLANGUAGE: Diff\nCODE:\n```\nc72f000\n```\n\n----------------------------------------\n\nTITLE: Set default undefined time style to medium in intl-messageformat\nDESCRIPTION: This feature sets the default time style to 'medium' when the time style is undefined in intl-messageformat. This aligns the behavior with ICU (International Components for Unicode) standards.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/intl-messageformat/CHANGELOG.md#_snippet_15\n\n\n\n----------------------------------------\n\nTITLE: JSON Output Schema Modification in FormatJS CLI\nDESCRIPTION: This code snippet shows the change in the output JSON schema for the FormatJS CLI. The old output was a `MessageDescriptor[]`, which was changed to `Record<string, Omit<MessageDescriptor, 'id'>>` to be more translation vendor-friendly. This involves changing the JSON format for representing messages from an array to a key-value pair structure.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/editor/CHANGELOG.md#_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"fjk13\": {\n    \"defaultMessage\": \"a message\",\n    \"description\": \"a description\",\n    \"start\": 0,\n    \"end\": 20\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating CLDR to v46 - JavaScript\nDESCRIPTION: This commit updates the Common Locale Data Repository (CLDR) version to v46 within the @formatjs/intl-enumerator package.  This upgrade provides access to the latest internationalization data, including locale-specific information for formatting numbers, dates, and times.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/intl-enumerator/CHANGELOG.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nupgrade cldr to v46 ([daafb44](https://github.com/formatjs/formatjs/commit/daafb449ba2fc4553f5a484b969affa1529752db))\n```\n\n----------------------------------------\n\nTITLE: Allowing Custom Formatter with Node API\nDESCRIPTION: This commit enables the use of custom formatters with the Node API of @formatjs/cli. This enhancement provides greater flexibility in how message files are formatted during the compilation process. The commit hash is c9886abb1b79ad6fb5cb74c36db377030ca058b0.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/cli-lib/CHANGELOG.md#_snippet_30\n\n\n\n----------------------------------------\n\nTITLE: Using FormattedMessage component from react-intl\nDESCRIPTION: This example shows how to use the `<FormattedMessage>` component from `react-intl` to display translated messages. The `eslint-plugin-formatjs` plugin verifies messages used with this component.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/website/docs/tooling/linter.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport {FormattedMessage} from 'react-intl'\n;<FormattedMessage defaultMessage=\"foo\" description=\"bar\" />\n```\n\n----------------------------------------\n\nTITLE: Exposing shouldPolyfill function in @formatjs/intl-getcanonicallocales\nDESCRIPTION: This commit exposes the `shouldPolyfill` function, enabling developers to detect if the current platform requires the polyfill provided by the package. This allows for conditional loading of the polyfill, improving performance in environments with native Intl API support.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/intl-getcanonicallocales/CHANGELOG.md#_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\n**@formatjs/intl-getcanonicallocales:** expose shouldPolyfill to detect if platform needs our polyfill ([ba0aac6](https://github.com/formatjs/formatjs/commit/ba0aac6dda7053a5b4ffb8f6502dd8c1688cbc8f))\n```\n\n----------------------------------------\n\nTITLE: Feature: Update CLDR to v43 for intl-segmenter in TypeScript\nDESCRIPTION: This commit updates the CLDR data to version 43 specifically for the `@formatjs/intl-segmenter` package. This provides the latest locale-specific rules for text segmentation.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/intl-segmenter/CHANGELOG.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n**@formatjs/intl-segmenter:** update CLDR to v43 ([2217c3f](https://github.com/formatjs/formatjs/commit/2217c3f0d7758b96127761bcd28f522641ab9e11))\n```\n\n----------------------------------------\n\nTITLE: Prerelease Steps with npm and Bazel\nDESCRIPTION: This snippet outlines the steps for creating a prerelease. It involves setting up a GitHub token, running the `prerelease` script, building the distribution files with Bazel, creating a temporary directory, copying the distribution files, and publishing the packages using pnpm.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/CONTRIBUTING.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n# Make sure you have GH_TOKEN setup as indicated by:\n# https://github.com/lerna/lerna/blob/05ad1860e2da7fc16c9c0a072c9389e94792ab64/commands/version/README.md#--create-release-type\nGH_TOKEN=xxxxxxx npm run prerelease\nbazel build :dist\nmkdir ../formatjs2\ncp -rf dist/bin/formatjs_dist/ ../formatjs2/\n# Use `--access=public` to publish new packages with `@formatjs/` scope.\ncd ../formatjs2\nnpx pnpm -r publish --access=public\n```\n\n----------------------------------------\n\nTITLE: Adding Ignore File Option to FormatJS CLI\nDESCRIPTION: This commit adds the ability to ignore specific files during verification within the @formatjs/cli package. This allows users to exclude certain files from the verification process.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/cli/CHANGELOG.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n676c34aaa642e18e4a832cd7d928d681ada196f2\n```\n\n----------------------------------------\n\nTITLE: Dynamically import Intl.DateTimeFormat polyfill and locale data (TSX)\nDESCRIPTION: This TypeScript snippet demonstrates how to dynamically import the Intl.DateTimeFormat polyfill and locale data based on capability detection using `shouldPolyfill`. It asynchronously loads the polyfill and locale data only if the locale is not natively supported, optimizing the initial load time. It uses `import()` and `Promise.all()` for efficient loading.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/website/docs/polyfills/intl-datetimeformat.md#_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport {shouldPolyfill} from '@formatjs/intl-datetimeformat/should-polyfill'\nasync function polyfill(locale: string) {\n  const unsupportedLocale = shouldPolyfill(locale)\n  // This locale is supported\n  if (!unsupportedLocale) {\n    return\n  }\n  // Load the polyfill 1st BEFORE loading data\n  await import('@formatjs/intl-datetimeformat/polyfill-force')\n\n  // Parallelize CLDR data loading\n  const dataPolyfills = [\n    import('@formatjs/intl-datetimeformat/add-all-tz'),\n    import(`@formatjs/intl-datetimeformat/locale-data/${unsupportedLocale}`),\n  ]\n  await Promise.all(dataPolyfills)\n}\n```\n\n----------------------------------------\n\nTITLE: Fix Intl.Locale existence check in intl-messageformat\nDESCRIPTION: This bug fix addresses an issue where the existence of Intl.Locale was not properly checked before usage in intl-messageformat.  This prevents errors in environments where Intl.Locale is not available.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/intl-messageformat/CHANGELOG.md#_snippet_11\n\n\n\n----------------------------------------\n\nTITLE: React Native polyfill import\nDESCRIPTION: This TypeScript snippet demonstrates how to import the polyfill specifically for React Native applications using Hermes. It uses `/polyfill-force` instead of `/polyfill` to improve performance by bypassing conditional detection.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/website/docs/polyfills/intl-pluralrules.md#_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport '@formatjs/intl-pluralrules/polyfill-force' // instead of /polyfill\nimport '@formatjs/intl-pluralrules/locale-data/en'\n```\n\n----------------------------------------\n\nTITLE: Installing @formatjs/cli with npm\nDESCRIPTION: This command installs the @formatjs/cli package as a development dependency using npm. This CLI tool is used for extracting messages from source code for internationalization.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/website/docs/getting-started/message-extraction.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm i -D @formatjs/cli\n```\n\n----------------------------------------\n\nTITLE: Upgrade TS Support to v5\nDESCRIPTION: This feature upgrades the TypeScript support in @formatjs/cli to version 5. This provides compatibility with the latest TypeScript syntax and features, enhancing the developer experience when using TypeScript with FormatJS.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/cli/CHANGELOG.md#_snippet_14\n\n\n\n----------------------------------------\n\nTITLE: JSON Schema Update in @formatjs/cli v2.0.0\nDESCRIPTION: This snippet showcases the change in the JSON schema for messages in version 2.0.0 of @formatjs/cli. The format has been modified from an array of `MessageDescriptor` objects to a record mapping message IDs to the message descriptors themselves (excluding the `id` property). This change was implemented to improve compatibility with translation vendors.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/cli/CHANGELOG.md#_snippet_40\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"fjk13\": {\n    \"defaultMessage\": \"a message\",\n    \"description\": \"a description\",\n    \"start\": 0,\n    \"end\": 20\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: French Translation Message Example JSON\nDESCRIPTION: This JSON snippet shows an example of French translations extracted using FormatJS.  It contains key-value pairs where the keys are message IDs and the values are objects with `defaultMessage` and `description` properties. The translation keys can be dynamically generated with formatjs extract.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/website/docs/getting-started/message-distribution.md#_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"hak27d\": {\n    \"defaultMessage\": \"Panneau de configuration\",\n    \"description\": \"title of control panel section\"\n  },\n  \"haqsd\": {\n    \"defaultMessage\": \"Supprimer l'utilisateur {name}\",\n    \"description\": \"delete button\"\n  },\n  \"19hjs\": {\n    \"defaultMessage\": \"nouveau mot de passe\",\n    \"description\": \"placeholder text\"\n  },\n  \"explicit-id\": {\n    \"defaultMessage\": \"Confirmez le mot de passe\",\n    \"description\": \"placeholder text\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Supporting $t by default in babel-plugin-formatjs\nDESCRIPTION: This commit enables support for `$t` by default in babel-plugin-formatjs. This feature simplifies the process of translating text within applications by providing a standard shorthand notation.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/ts-transformer/CHANGELOG.md#_snippet_8\n\nLANGUAGE: Markdown\nCODE:\n```\n* **babel-plugin-formatjs:** support $t by default ([f55cd1d](https://github.com/formatjs/formatjs/commit/f55cd1dadc0f01aba7a461357b061abae86d1d41))\n```\n\n----------------------------------------\n\nTITLE: Handling aliases properly in @formatjs/intl-getcanonicallocales\nDESCRIPTION: This commit addresses the proper handling of aliases within the @formatjs/intl-getcanonicallocales package. Accurate alias resolution is critical for correctly identifying and mapping locales, especially when dealing with variations and regional differences.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/intl-getcanonicallocales/CHANGELOG.md#_snippet_13\n\nLANGUAGE: JavaScript\nCODE:\n```\n**@formatjs/intl-getcanonicallocales:** Handle aliases properly ([9e19e4b](https://github.com/formatjs/formatjs/commit/9e19e4b769560f3717f9589ab6180e932aaf96f8))\n```\n\n----------------------------------------\n\nTITLE: Custom Serialization Function in @formatjs/cli\nDESCRIPTION: This feature allows the formatter in @formatjs/cli to provide a custom serialization function. It addresses issue #4149, enabling more flexible handling of data serialization during the formatting process.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/cli/CHANGELOG.md#_snippet_13\n\n\n\n----------------------------------------\n\nTITLE: Updating Grouping Data from CLDR in Number Formatting\nDESCRIPTION: This commit updates the grouping data used by @formatjs/intl-numberformat to be sourced directly from the CLDR (Common Locale Data Repository). This ensures that the number formatting adheres to the latest regional standards and provides accurate grouping separators for different locales, resolving issue #1949.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/intl-numberformat/CHANGELOG.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\n8edc4ae\n```\n\n----------------------------------------\n\nTITLE: Bind CLI & CLI-Lib on the Same Version\nDESCRIPTION: This bug fix attempts to ensure that the @formatjs/cli and @formatjs/cli-lib packages are bound to the same version. This is crucial for ensuring consistent behavior and preventing compatibility issues between the CLI and its library.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/cli/CHANGELOG.md#_snippet_19\n\n\n\n----------------------------------------\n\nTITLE: Adding back polyfill.umd, fix for issue #2013\nDESCRIPTION: This commit adds back the `polyfill.umd` file, resolving issue #2013.  The polyfill provides necessary functionality for environments lacking native support, ensuring wider compatibility for the library.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/intl-getcanonicallocales/CHANGELOG.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nadd back polyfill.umd, fix [#2013](https://github.com/formatjs/formatjs/issues/2013) ([b9cfbd2](https://github.com/formatjs/formatjs/commit/b9cfbd2eeead6a5165b0e4cbf1ef3edbfbeca8ce))\n```\n\n----------------------------------------\n\nTITLE: Fixing ID Generation Issue in JavaScript\nDESCRIPTION: This commit fixes an ID generation issue in the @formatjs/cli when the description field is undefined. This ensures that IDs are generated correctly even when the description is missing, preventing potential errors or unexpected behavior.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/cli/CHANGELOG.md#_snippet_43\n\nLANGUAGE: JavaScript\nCODE:\n```\n**@formatjs/cli:** fix ID gen issue when description is undefined ([547d5b9](https://github.com/formatjs/formatjs/commit/547d5b90381c6b8690fd03d69c8c52de2eb859d4))\n```\n\n----------------------------------------\n\nTITLE: Skipping message extraction without defaultMessage\nDESCRIPTION: This feature skips message extraction in the babel-plugin-formatjs if `defaultMessage` is not provided. This can be useful for optimizing the build process and reducing the size of the extracted messages file when only explicit messages are required. Addresses issue [#2975](https://github.com/formatjs/formatjs/issues/2975).\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/babel-plugin-formatjs/CHANGELOG.md#_snippet_2\n\nLANGUAGE: diff\nCODE:\n```\n### Features\n\n*   **babel-plugin-formatjs:** skip message extraction if defaultMessage isn't provided ([#2975](https://github.com/formatjs/formatjs/issues/2975)) ([cb4e5bd](https://github.com/formatjs/formatjs/commit/cb4e5bd960105641116c3ed1dc5bf413d4184a6f))\n```\n\n----------------------------------------\n\nTITLE: Fixing TypeScript Declarations in formatjs\nDESCRIPTION: This commit fixes an issue by enabling isolatedDeclarations and explicitly specifying types throughout the codebase. This enhances type safety and improves the overall maintainability of the project.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/intl-listformat/CHANGELOG.md#_snippet_0\n\nLANGUAGE: Diff\nCODE:\n```\n### Bug Fixes\n\n* turn on isolatedDeclarations and specify explicit types everywhere ([4d855c2](https://github.com/formatjs/formatjs/commit/4d855c2324426633eb84c346c76a5fd1ac854780)) - by @longlho\n```\n\n----------------------------------------\n\nTITLE: Not Reading From Stdin If Glob Pattern Present in JavaScript\nDESCRIPTION: This commit addresses an issue in `@formatjs/cli` where the tool would unnecessarily read from stdin even when a glob pattern was provided. The fix ensures that stdin is only read when necessary, improving efficiency and preventing potential conflicts.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/cli/CHANGELOG.md#_snippet_50\n\nLANGUAGE: JavaScript\nCODE:\n```\n**@formatjs/cli:** do not read from stdin if glob pattern is pr… ([#632](https://github.com/formatjs/formatjs/issues/632)) ([54a7aea](https://github.com/formatjs/formatjs/commit/54a7aea5f6afd5e2e656b040b4b8b7eff0566bb7))\n```\n\n----------------------------------------\n\nTITLE: Making FormatXMLElementFn Non-Variadic in intl-messageformat JavaScript\nDESCRIPTION: This breaking change modifies the `FormatXMLElementFn` signature from a variadic function `(...chunks) => any` to `(chunks) => any`. This simplifies the function signature and allows for future metadata provision. This change requires developers to adjust their formatter functions accordingly.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/intl-messageformat/CHANGELOG.md#_snippet_35\n\nLANGUAGE: javascript\nCODE:\n```\nf2963bf\n```\n\n----------------------------------------\n\nTITLE: Implementing FormattedRelative behavior React\nDESCRIPTION: Demonstrates implementing FormattedRelative behavior via `@formatjs/intl-utils`.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/website/docs/react-intl/upgrade-guide-3.x.md#_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\nimport {selectUnit} from '@formatjs/intl-utils'\nconst {value, unit} = selectUnit(Date.now() - 48 * 3600 * 1000)\n// render\n;<FormattedRelativeTime value={value} unit={unit} />\n```\n\n----------------------------------------\n\nTITLE: Returning Structural Differences in ICU Parser\nDESCRIPTION: This commit modifies the @formatjs/icu-messageformat-parser package to return an error that provides details about structural differences encountered during parsing. This aids in identifying and resolving issues in message formatting.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/cli/CHANGELOG.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n24a61456bb4adc0afbbc0b932de5b7826301e892\n```\n\n----------------------------------------\n\nTITLE: FormatJS Verify with Yarn\nDESCRIPTION: Shows the command to run the `formatjs verify` command using yarn. This command checks translation files against a source locale for completeness and structural consistency.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/website/docs/tooling/cli.md#_snippet_12\n\nLANGUAGE: sh\nCODE:\n```\nyarn formatjs verify [options] <translationFiles>\n```\n\n----------------------------------------\n\nTITLE: Breaking Change: @formatjs/cli Peer Dependency Update - Javascript\nDESCRIPTION: This commit introduces a breaking change related to the @formatjs/cli. The @vue/compiler-core dependency has been moved to `peerDependencies`. If users are utilizing Vue, they are now required to manually install this dependency.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/intl-locale/CHANGELOG.md#_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\n**@formatjs/cli:** we push @vue/compiler-core out to `peerDependencies` so if u use vue u should pull this in manuallywip on packaging cli.\n```\n\n----------------------------------------\n\nTITLE: Reducing asset size using Intl.getCanonicalLocales in @formatjs/intl-displaynames\nDESCRIPTION: This commit optimizes the asset size of @formatjs/intl-displaynames by utilizing Intl.getCanonicalLocales. This native JavaScript API provides a standardized way to canonicalize locale identifiers, reducing the need for custom implementations and associated data.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/intl-displaynames/CHANGELOG.md#_snippet_38\n\nLANGUAGE: Diff\nCODE:\n```\n8ae362d\n```\n\n----------------------------------------\n\nTITLE: Fixing Pseudo Locale Compilation Bug\nDESCRIPTION: Addresses an issue in the @formatjs/cli that affected pseudo-locale compilation, specifically related to tag elements.  This fix is crucial for ensuring that pseudo-localization works correctly, especially when dealing with components that utilize tag elements. It fixes issue #2744.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/cli/CHANGELOG.md#_snippet_28\n\nLANGUAGE: plaintext\nCODE:\n```\n**@formatjs/cli:** fix pseudo locale compilation for tag element, fix [#2744](https://github.com/formatjs/formatjs/issues/2744) ([0f42927](https://github.com/formatjs/formatjs/commit/0f42927e6cbd32fa46a54462113cf916cb7d9636))\n```\n\n----------------------------------------\n\nTITLE: Feature: Use Native Intl.getCanonicalLocales (JavaScript)\nDESCRIPTION: This feature utilizes the native Intl.getCanonicalLocales API.  This requires @formatjs/intl-getcanonicallocales for IE11 and below as a ponyfill.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/intl-listformat/CHANGELOG.md#_snippet_30\n\nLANGUAGE: JavaScript\nCODE:\n```\n**@formatjs/intl-listformat:** Use native Intl.getCanonicalLocales ([ea78382](https://github.com/formatjs/formatjs/commit/ea783828b86b2744a89f0b2b616ebe535f32f3df))\n```\n\n----------------------------------------\n\nTITLE: Matching locales with Intl.LocaleMatcher\nDESCRIPTION: This code demonstrates how to use the `match` function from `@formatjs/intl-localematcher` to find the best matching locale from a list of available locales, given a list of requested locales and a default locale. It relies on `Intl.LocaleMatcher` implementation.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/website/docs/polyfills/intl-localematcher.md#_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport {match} from '@formatjs/intl-localematcher'\n\nmatch(['fr-XX', 'en'], ['fr', 'en'], 'en') // 'fr'\n\nmatch(['zh'], ['fr', 'en'], 'en') // 'en'\n```\n\n----------------------------------------\n\nTITLE: Passing ignoreTag to Parser in intl-messageformat JavaScript\nDESCRIPTION: This feature update introduces the ability to pass the `ignoreTag` option to the parser, resolving issue #1755. This allows developers to specify which tags should be ignored during message formatting, enhancing customization and flexibility.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/intl-messageformat/CHANGELOG.md#_snippet_36\n\nLANGUAGE: javascript\nCODE:\n```\n386459b\n```\n\n----------------------------------------\n\nTITLE: Install react-intl with yarn\nDESCRIPTION: Installs the react and react-intl packages using yarn. This command adds react and react-intl as dependencies to the project.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/website/docs/getting-started/installation.md#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nyarn add react react-intl\n```\n\n----------------------------------------\n\nTITLE: Bumping tslib version dep\nDESCRIPTION: This commit bumps the tslib version dependency, closing issue #2645. Updating tslib resolves potential compatibility issues and ensures the package uses the latest version of the TypeScript helper library.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/intl-listformat/CHANGELOG.md#_snippet_21\n\nLANGUAGE: none\nCODE:\n```\n37577d22bf28d23de1d8013ba0047cf221ad8840\n```\n\n----------------------------------------\n\nTITLE: Introduce @formatjs/cli-lib as Node API\nDESCRIPTION: This bug fix introduces @formatjs/cli-lib as the Node API for @formatjs/cli. This provides a programmatic interface for interacting with the CLI functionality, enabling more flexible and integrated usage, and closes issue #3625.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/cli/CHANGELOG.md#_snippet_20\n\n\n\n----------------------------------------\n\nTITLE: Moving createIntl for React Server Components - React Intl\nDESCRIPTION: This feature moves the `createIntl` function to a separate file to better support React Server Components. This change allows for more flexible usage patterns in server-side rendering contexts.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/react-intl/CHANGELOG.md#_snippet_0\n\n\n\n----------------------------------------\n\nTITLE: Removing Node Engine Restrictions in @formatjs/cli\nDESCRIPTION: This commit removes the Node engine restrictions for the @formatjs/cli.  This allows the CLI to be used with a wider range of Node.js versions.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/editor/CHANGELOG.md#_snippet_13\n\n\n\n----------------------------------------\n\nTITLE: Adding Debug Info for Message Validation Errors\nDESCRIPTION: This commit adds more debug information when message validation errors occur in @formatjs/cli. This helps developers quickly diagnose and fix issues related to message validation during the extraction process. The commit hash is 5b31babf5a873dec7232a1640a83e64dfa8d3bee.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/cli-lib/CHANGELOG.md#_snippet_22\n\n\n\n----------------------------------------\n\nTITLE: Fixing GTS Extractor and Types in Vue Intl TypeScript\nDESCRIPTION: This commit fixes issues related to the GTS (Google TypeScript Style) extractor and associated types within the `vue-intl` package, specifically after an upgrade. This ensures that the GTS extractor functions correctly and the TypeScript types are properly defined.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/vue-intl/CHANGELOG.md#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\n2b97a63d2155abab131aa96f5840879e20e6dbe9\n```\n\n----------------------------------------\n\nTITLE: Supporting .vue SFC files in @formatjs/cli (Feature)\nDESCRIPTION: This commit adds support for `.vue` Single File Components (SFCs) in the @formatjs/cli. This feature allows the CLI to extract messages from Vue.js components, expanding its compatibility with different frontend frameworks.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/cli-lib/CHANGELOG.md#_snippet_13\n\n\n\n----------------------------------------\n\nTITLE: Fixing Object Null Check\nDESCRIPTION: This snippet describes a bug fix in `@formatjs/icu-messageformat-parser` package related to object null checks. Specifically, it addresses issues #3849 and #3850 to ensure that null checks are handled correctly, preventing potential errors during message parsing.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/icu-messageformat-parser/CHANGELOG.md#_snippet_6\n\n\n\n----------------------------------------\n\nTITLE: Changing default idInterpolationPattern in @formatjs/cli (Feature/Breaking Change)\nDESCRIPTION: This commit changes the default value of the `idInterpolationPattern` option to `[sha512:contenthash:base64:6]` in @formatjs/cli. This is done to prevent hash collisions that could occur with the previous default of `[contenthash:5]`. This change is potentially breaking because it will generate new IDs if the option is not explicitly set.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/cli-lib/CHANGELOG.md#_snippet_5\n\n\n\n----------------------------------------\n\nTITLE: Fixing types with isolatedDeclarations in TypeScript\nDESCRIPTION: This commit addresses a bug related to type declarations by enabling the `isolatedDeclarations` flag and explicitly defining types throughout the codebase. This ensures more robust and consistent type checking during compilation.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/intl-relativetimeformat/CHANGELOG.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nturn on isolatedDeclarations and specify explicit types everywhere\n```\n\n----------------------------------------\n\nTITLE: Install @formatjs/intl-locale with yarn\nDESCRIPTION: This command installs the @formatjs/intl-locale package using yarn.  Yarn is another popular package manager for JavaScript projects. This installs the package and adds it as a dependency.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/website/docs/polyfills/intl-locale.md#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nyarn add @formatjs/intl-locale\n```\n\n----------------------------------------\n\nTITLE: Removing JSON Import for ESM Compatibility - Javascript\nDESCRIPTION: This commit removes a JSON import to improve ESM (ECMAScript Modules) compatibility within the @formatjs/intl-locale package. This change addresses issue #2961, potentially related to module loading or bundler configurations.  This change makes the package more friendly to ESM environments.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/intl-locale/CHANGELOG.md#_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\n**@formatjs/intl-locale:** rm json import to be more ESM-friendly, fix [#2961](https://github.com/formatjs/formatjs/issues/2961) ([0aed8fa](https://github.com/formatjs/formatjs/commit/0aed8fae0ac2419163a094873a4d55313c676d59))\n```\n\n----------------------------------------\n\nTITLE: Project Structure for Local Translation - Directory Tree\nDESCRIPTION: Illustrates the directory structure of a project utilizing a local translation tool.  The `extracted` directory stores extracted translation files with additional metadata, while the `lang` directory holds translated files ready for use in the application.  This structure is designed for simple translation workflows.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/website/docs/getting-started/application-workflow.md#_snippet_0\n\nLANGUAGE: none\nCODE:\n```\nprojectRoot\n|-- src\n|   |-- App.js\n|-- extracted\n|   |-- en.json\n|-- lang\n|   |-- fr.json\n|   |-- de.json\n|-- package.json\n|-- .eslintrc.js\n```\n\n----------------------------------------\n\nTITLE: Fixing README link in babel-plugin-react-intl\nDESCRIPTION: This commit addresses a bug by fixing the README link in the `babel-plugin-react-intl` package. The commit ensures that the link to the project's README file is accurate and accessible, providing users with proper documentation and guidance. The commit hash is afc92d4e35aa00756fcdba0d4f3ac0ace8fb7954.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/babel-plugin-formatjs/CHANGELOG.md#_snippet_9\n\n\n\n----------------------------------------\n\nTITLE: Dynamic Import with Capability Detection (TSX)\nDESCRIPTION: This code demonstrates how to dynamically import the Intl.getCanonicalLocales polyfill only if it's needed, using the `shouldPolyfill` function. If the function returns true (indicating that the environment lacks native support), the polyfill is imported.  Alternatively, you can force the polyfill using `polyfill-force`.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/website/docs/polyfills/intl-getcanonicallocales.md#_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport {shouldPolyfill} from '@formatjs/intl-getcanonicallocales/should-polyfill'\nasync function polyfill() {\n  // This platform already supports Intl.getCanonicalLocales\n  if (shouldPolyfill()) {\n    await import('@formatjs/intl-getcanonicallocales/polyfill')\n  }\n  // Alternatively, force the polyfill regardless of support\n  await import('@formatjs/intl-getcanonicallocales/polyfill-force')\n}\n```\n\n----------------------------------------\n\nTITLE: Adding ICU Config to Smartling Formatter\nDESCRIPTION: The `string_format:icu` configuration option has been added to the Smartling formatter within @formatjs/cli. This allows the Smartling formatter to properly handle ICU message syntax. This fixes issue #2526.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/cli/CHANGELOG.md#_snippet_34\n\nLANGUAGE: plaintext\nCODE:\n```\n**@formatjs/cli:** add string_format:icu config to smartling formatter ([#2528](https://github.com/formatjs/formatjs/issues/2528)) ([eec1c6f](https://github.com/formatjs/formatjs/commit/eec1c6faa406fc28257976f1ef2c10b75e6b4d19)), closes [#2526](https://github.com/formatjs/formatjs/issues/2526)\n```\n\n----------------------------------------\n\nTITLE: Simple Intl.ListFormat Polyfill Usage (TypeScript)\nDESCRIPTION: This code snippet shows a simple usage of the Intl.ListFormat polyfill. It imports the polyfill and locale data for 'en'.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/website/docs/polyfills/intl-listformat.md#_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport '@formatjs/intl-listformat/polyfill'\nimport '@formatjs/intl-listformat/locale-data/en' // locale-data for en\n```\n\n----------------------------------------\n\nTITLE: Compile Messages with npm\nDESCRIPTION: This shell command uses `npm run compile` to compile translated messages with FormatJS CLI. It specifies the input file (`lang/fr.json`), enables AST compilation (`--ast`), and sets the output file (`compiled-lang/fr.json`). The `--` is used to pass arguments to the underlying command.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/website/docs/getting-started/message-distribution.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\nnpm run compile -- lang/fr.json --ast --out-file compiled-lang/fr.json\n```\n\n----------------------------------------\n\nTITLE: Adding Babel Core as Peer Dependency in JavaScript\nDESCRIPTION: This commit adds `@babel/core` as a peer dependency to `@formatjs/cli`. This indicates that the CLI tool relies on Babel for certain functionalities, and it requires users to install Babel separately to ensure compatibility and avoid dependency conflicts.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/cli/CHANGELOG.md#_snippet_46\n\nLANGUAGE: JavaScript\nCODE:\n```\n**@formatjs/cli:** add @babel/core as a peer dep ([#1659](https://github.com/formatjs/formatjs/issues/1659)) ([758996d](https://github.com/formatjs/formatjs/commit/758996dc130e731a5b5d2a8aed6c40d36cb2ac1b))\n```\n\n----------------------------------------\n\nTITLE: Webpack Include Configuration (ts/babel-loader)\nDESCRIPTION: This configuration snippet demonstrates how to configure Webpack using `include` to ensure that necessary `react-intl` and `@formatjs` libraries are processed by `ts-loader` or `babel-loader`. This is useful to ensure these modules are transpiled correctly. The `path.join(__dirname, 'node_modules/...')` resolves the correct absolute paths to the libraries.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/website/docs/react-intl.md#_snippet_5\n\nLANGUAGE: TypeScript\nCODE:\n```\n{\n  include: [\n    path.join(__dirname, 'node_modules/react-intl'),\n    path.join(__dirname, 'node_modules/intl-messageformat'),\n    path.join(__dirname, 'node_modules/@formatjs/icu-messageformat-parser'),\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Fixing Type Inference in react-intl (TypeScript)\nDESCRIPTION: This code snippet addresses an issue related to type inference and overload for the formatMessage function within the react-intl package. The commit fixes the type issue reported in issue #4538.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/intl-messageformat/CHANGELOG.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nfix type inference and overload for formatMessage, fix [#4538](https://github.com/formatjs/formatjs/issues/4538)\n```\n\n----------------------------------------\n\nTITLE: Removing formatjs-extract-cldr-data package\nDESCRIPTION: This commit removes the formatjs-extract-cldr-data package. This likely indicates that the functionality provided by this package has been integrated into another part of the formatjs library or is no longer needed.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/intl-displaynames/CHANGELOG.md#_snippet_37\n\nLANGUAGE: Diff\nCODE:\n```\n62bdd32\n```\n\n----------------------------------------\n\nTITLE: Feature: Upgrade CLDR to v46 in TypeScript\nDESCRIPTION: This commit upgrades the Common Locale Data Repository (CLDR) to version 46. This update likely incorporates new locale data, improving the accuracy and completeness of internationalization features.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/intl-segmenter/CHANGELOG.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nupgrade cldr to v46 ([daafb44](https://github.com/formatjs/formatjs/commit/daafb449ba2fc4553f5a484b969affa1529752db))\n```\n\n----------------------------------------\n\nTITLE: Configure ts-loader with @formatjs/ts-transformer\nDESCRIPTION: Configures ts-loader to use the @formatjs/ts-transformer. This involves setting up a custom transformer that overrides the ID function for formatjs messages using a SHA512 hash.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/website/docs/getting-started/installation.md#_snippet_13\n\nLANGUAGE: tsx\nCODE:\n```\nimport {transform} from '@formatjs/ts-transformer'\n\nmodule.exports = {\n  ...otherConfigs,\n  module: {\n    rules: [\n      {\n        test: /\\.tsx?$/,\n        use: [\n          {\n            loader: 'ts-loader',\n            options: {\n              getCustomTransformers() {\n                return {\n                  before: [\n                    transform({\n                      overrideIdFn: '[sha512:contenthash:base64:6]',\n                    }),\n                  ],\n                }\n              },\n            },\n          },\n        ],\n      },\n    ],\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Simple Polyfill Import\nDESCRIPTION: Imports the Intl.Segmenter polyfill directly into a TypeScript/JavaScript module. This ensures that the Intl.Segmenter API is available globally.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/website/docs/polyfills/intl-segmenter.md#_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport '@formatjs/intl-segmenter/polyfill'\n```\n\n----------------------------------------\n\nTITLE: Adding missing cldr-core dependency\nDESCRIPTION: This commit adds the missing cldr-core dependency to the package.json file of @formatjs/intl-utils. The cldr-core package provides essential locale data, and including it as a dependency ensures that the library functions correctly.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/intl-getcanonicallocales/CHANGELOG.md#_snippet_10\n\nLANGUAGE: JSON\nCODE:\n```\n**@formatjs/intl-utils:** Add missing cldr-core to package.json dep ([d0b72fe](https://github.com/formatjs/formatjs/commit/d0b72fe398c7017d03e8ee66c98ad88fe3e47657))\n```\n\n----------------------------------------\n\nTITLE: Fixing Missing Dependency\nDESCRIPTION: This commit fixes a missing dependency issue in the @formatjs/icu-skeleton-parser package, resolving issue #2760.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/icu-skeleton-parser/CHANGELOG.md#_snippet_11\n\n\n\n----------------------------------------\n\nTITLE: Using Locale Data Script Tag - React Intl\nDESCRIPTION: This HTML snippet demonstrates how to include a locale data file for French (fr) using a `<script>` tag.  This allows the React Intl library to properly format dates, numbers, and other localized data according to the French locale.  The script tag needs to point to the correct path of the locale data file.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/website/docs/react-intl/upgrade-guide-2.x.md#_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"react-intl/locale-data/fr.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Adding supported locales check to should-polyfill\nDESCRIPTION: This commit adds a check for supported locales to the should-polyfill function within @formatjs/intl-listformat, fixing issue #3066. This change refines the polyfill logic to ensure it only applies when the locale is supported.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/intl-listformat/CHANGELOG.md#_snippet_14\n\nLANGUAGE: none\nCODE:\n```\n4640c81df591a126ecc33d919884c219e0c3f58d\n```\n\n----------------------------------------\n\nTITLE: Feature: Removing formatjs-extract-cldr-data Package (JavaScript)\nDESCRIPTION: This feature removes the formatjs-extract-cldr-data package. This indicates that the functionality provided by this package has either been integrated into another package or is no longer needed.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/intl-listformat/CHANGELOG.md#_snippet_28\n\nLANGUAGE: JavaScript\nCODE:\n```\n**formatjs-extract-cldr-data:** rm this package ([62bdd32](https://github.com/formatjs/formatjs/commit/62bdd32aadef899228a5303e01865f69fd729fa3))\n```\n\n----------------------------------------\n\nTITLE: Adding option to ignore a glob of files\nDESCRIPTION: This commit introduces the functionality to ignore files using glob patterns when running `@formatjs/cli`. This allows users to exclude specific files or directories from message extraction, enhancing control over the process. This enhancement addresses issue #564.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/cli-lib/CHANGELOG.md#_snippet_45\n\nLANGUAGE: TEXT\nCODE:\n```\n**@formatjs/cli:** Add option to ignore a glob of files ([#564](https://github.com/formatjs/formatjs/issues/564)) ([843d82b](https://github.com/formatjs/formatjs/commit/843d82b2190458deab2f4393cb854cc4d36f6dfc))\n```\n\n----------------------------------------\n\nTITLE: Testing FormattedDate with react-testing-library\nDESCRIPTION: This snippet tests a component (`FormatDateView`) that uses `FormattedDate` from `react-intl`. It imports the custom `render` function from `../test-utils.js` to ensure the component is rendered within an `IntlProvider`.  The test verifies that the component renders the date in the expected format for the specified locale (defaulting to 'pt').\nSOURCE: https://github.com/formatjs/formatjs/blob/main/website/docs/guides/testing-with-react-intl.md#_snippet_17\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react'\nimport '@​testing-library/jest-dom/jest-globals'\n// We're importing from our own created test-utils and not RTL's\nimport {render, screen} from '../test-utils.js'\nimport {FormattedDate} from 'react-intl'\n\nconst FormatDateView = () => {\n  return (\n    <div data-testid=\"date-display\">\n      <FormattedDate\n        value=\"2019-03-11\"\n        timeZone=\"utc\"\n        day=\"2-digit\"\n        month=\"2-digit\"\n        year=\"numeric\"\n      />\n    </div>\n  )\n}\n\ntest('it should render FormattedDate and have a formated pt date', () => {\n  render(<FormatDateView />)\n  expect(screen.getByTestId('date-display')).toHaveTextContent('11/03/2019')\n})\n```\n\n----------------------------------------\n\nTITLE: Fix Webpack 5 Issue in Intl-Locale - Javascript\nDESCRIPTION: This commit fixes an issue with webpack 5 compatibility in the @formatjs/intl-locale package. The fix likely adjusts the module resolution or import/export statements to be compatible with Webpack 5's module handling. Addresses issue #2417.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/intl-locale/CHANGELOG.md#_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\n**@formatjs/intl-locale:** fix webpack5 issue, fix [#2417](https://github.com/formatjs/formatjs/issues/2417) ([e780871](https://github.com/formatjs/formatjs/commit/e78087154942e9d08fe498e828079a34eb398ae5))\n```\n\n----------------------------------------\n\nTITLE: Installing with npm\nDESCRIPTION: This command installs the @formatjs/intl-localematcher package using npm.  It's a standard npm install command.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/website/docs/polyfills/intl-localematcher.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm i @formatjs/intl-localematcher\n```\n\n----------------------------------------\n\nTITLE: Removing enforceDescription/DefaultMessage from babel-plugin-react-intl\nDESCRIPTION: This commit removes the `enforceDescription` and `enforceDefaultMessage` features from the `babel-plugin-react-intl` plugin. These functionalities are being migrated to the `eslint-plugin-formatjs`.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/editor/CHANGELOG.md#_snippet_17\n\n\n\n----------------------------------------\n\nTITLE: Feature: Upgrade cldr to v43\nDESCRIPTION: This commit upgrades the CLDR (Common Locale Data Repository) version to v43 for `@formatjs/intl-datetimeformat`, `@formatjs/intl-listformat`, and `@formatjs/intl-locale` packages. This ensures that all relevant packages are using the latest locale data.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/intl-locale/CHANGELOG.md#_snippet_7\n\n\n\n----------------------------------------\n\nTITLE: Fixing Rendering Tag Inside Plural in intl-messageformat JavaScript\nDESCRIPTION: This bug fix addresses an issue where tags within plural forms were not rendered correctly, resolving issue #1680. This ensures that HTML or XML tags within pluralized messages are properly formatted and displayed.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/intl-messageformat/CHANGELOG.md#_snippet_37\n\nLANGUAGE: javascript\nCODE:\n```\ndd4f6c6\n```\n\n----------------------------------------\n\nTITLE: Extracting messages with npm\nDESCRIPTION: This command executes the `extract` script defined in `package.json` using npm. It specifies the source files to scan, files to ignore, the output file for the extracted messages, and the ID interpolation pattern.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/website/docs/getting-started/message-extraction.md#_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nnpm run extract -- 'src/**/*.ts*' --ignore='**/*.d.ts' --out-file lang/en.json --id-interpolation-pattern '[sha512:contenthash:base64:6]'\n```\n\n----------------------------------------\n\nTITLE: Jest and Enzyme Snapshot Testing Example\nDESCRIPTION: This example showcases how Jest and Enzyme can be used together for snapshot testing. It shallow renders the `AppMain` component using Enzyme's `shallow` function and then creates a snapshot of the rendered output. Jest automatically mocks `react-intl`, simplifying the test setup.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/website/docs/guides/testing-with-react-intl.md#_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nimport React from 'react'\nimport {shallow} from 'enzyme'\nimport AppMain from '../AppMain'\n\ntest('app main should be rendered', () => {\n  const wrapper = shallow(<AppMain />)\n  expect(wrapper).toMatchSnapshot()\n})\n```\n\n----------------------------------------\n\nTITLE: Improving type inference of formatMessage in Intl\nDESCRIPTION: This commit improves the type inference of the `formatMessage` function within `@formatjs/intl`. This enhancement allows TypeScript to more accurately determine the types of arguments and return values, leading to better code completion, error detection, and overall developer experience.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/intl/CHANGELOG.md#_snippet_9\n\nLANGUAGE: diff\nCODE:\n```\n**@formatjs/intl:** improve type inference of formatMessage ([20fed58](https://github.com/formatjs/formatjs/commit/20fed58c28da697816aca5eabac32d14386cebf7)) - by @ianduvall\n```\n\n----------------------------------------\n\nTITLE: Adding Back polyfill.umd in @formatjs/intl-displaynames\nDESCRIPTION: This commit adds back the `polyfill.umd` file to @formatjs/intl-displaynames, addressing issue #2013. This provides a UMD (Universal Module Definition) build of the polyfill, enabling use in older environments or those without native module support.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/intl-displaynames/CHANGELOG.md#_snippet_26\n\nLANGUAGE: diff\nCODE:\n```\ndiff --git a/packages/intl-displaynames/index.js b/packages/intl-displaynames/index.js\nindex 1234567..8901234 100644\n--- a/packages/intl-displaynames/index.js\n+++ b/packages/intl-displaynames/index.js\n@@ -1,5 +1,5 @@\n-console.log('hello world');\n+console.log('hello world2');\n```\n\n----------------------------------------\n\nTITLE: Feature: Initial Commit for @formatjs/intl-displaynames (JavaScript)\nDESCRIPTION: This commit represents the initial commit for the @formatjs/intl-displaynames package, introducing a new package related to internationalized display names.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/intl-listformat/CHANGELOG.md#_snippet_34\n\nLANGUAGE: JavaScript\nCODE:\n```\n**@formatjs/intl-displaynames:** initial commit ([#469](https://github.com/formatjs/formatjs/issues/469)) ([137b994](https://github.com/formatjs/formatjs/commit/137b994846526b02de80b024c860b2771868f236))\n```\n\n----------------------------------------\n\nTITLE: Updating monorepo to TypeScript 4.9 and fixing type issues\nDESCRIPTION: This commit updates the monorepo to use TypeScript version 4.9, addressing and resolving type-related issues within the project. The update ensures better type safety and improved developer experience when working with the @formatjs/intl-relativetimeformat package.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/intl-relativetimeformat/CHANGELOG.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n@formatjs/intl: update monorepo to use TypeScript 4.9 and actually fix the type issue\n```\n\n----------------------------------------\n\nTITLE: Add support for string literals in JSX props\nDESCRIPTION: This feature adds support for string literals within curly braces for JSX component props in @formatjs/ts-transformer. The change enhances the ts-transformer's ability to handle string literals used as JSX component properties, enabling extraction of messages from such contexts.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/ts-transformer/CHANGELOG.md#_snippet_14\n\n\n\n----------------------------------------\n\nTITLE: Peer Dependency Update for Vue Compiler Core\nDESCRIPTION: This snippet introduces a breaking change that pushes @vue/compiler-core out to `peerDependencies`. If users are using Vue, they must manually pull this dependency in. This change is part of work in progress on packaging the CLI.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/editor/CHANGELOG.md#_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\n* **@formatjs/cli:** we push @vue/compiler-core out to `peerDependencies` so if u use vue u should pull this in manuallywip on packaging cli.\n```\n\n----------------------------------------\n\nTITLE: Checking Intl.Locale Existence\nDESCRIPTION: This snippet describes a bug fix in `intl-messageformat` where the existence of `Intl.Locale` is checked before usage. This fix addresses issue #3588, ensuring that the code gracefully handles environments where `Intl.Locale` might not be available.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/icu-messageformat-parser/CHANGELOG.md#_snippet_7\n\n\n\n----------------------------------------\n\nTITLE: Remove extractFromFormatMessageCall\nDESCRIPTION: This feature removes `extractFromFormatMessageCall` and turns it on by default.  This change simplifies the configuration of the ts-transformer by removing an option and enabling its functionality by default, altering the transformer's default behavior.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/ts-transformer/CHANGELOG.md#_snippet_18\n\n\n\n----------------------------------------\n\nTITLE: Updating Typescript-eslint\nDESCRIPTION: This commit updates the typescript-eslint dependency within the eslint-plugin-formatjs package, addressing issue #2865. The commit hash is 3a692ab1a9474db835f7884b91852f690c07eb7c.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/eslint-plugin-formatjs/CHANGELOG.md#_snippet_5\n\nLANGUAGE: Markdown\nCODE:\n```\n* **eslint-plugin-formatjs:** update typescript-eslint ([#2865](https://github.com/formatjs/formatjs/issues/2865)) ([3a692ab](https://github.com/formatjs/formatjs/commit/3a692ab1a9474db835f7884b91852f690c07eb7c))\n```\n\n----------------------------------------\n\nTITLE: Fixing package.json - JSON\nDESCRIPTION: This commit fixes an issue with the package.json file within the @formatjs/intl-enumerator package. Package.json files contain metadata about the package, including dependencies, scripts, and version information; fixing it may resolve installation or build problems.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/intl-enumerator/CHANGELOG.md#_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n**@formatjs/intl-enumerator:** fix package.json ([67180d1](https://github.com/formatjs/formatjs/commit/67180d11f09c62005b1fd1f6b3d59f3af005a785))\n```\n\n----------------------------------------\n\nTITLE: Fix Babel Crash in babel-plugin-react-intl\nDESCRIPTION: This code snippet addresses a bug that caused Babel to crash when using the `removeDefaultMessage` option in the babel-plugin-react-intl. The fix ensures compatibility and prevents unexpected termination during the build process.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/babel-plugin-formatjs/CHANGELOG.md#_snippet_3\n\n\n\n----------------------------------------\n\nTITLE: Upgrading CLDR data to v45\nDESCRIPTION: This feature upgrades the CLDR (Common Locale Data Repository) data to version 45. The update includes the latest locale-specific data for improved internationalization support within the @formatjs/intl-relativetimeformat package.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/intl-relativetimeformat/CHANGELOG.md#_snippet_3\n\nLANGUAGE: none\nCODE:\n```\nupgrade cldr to v45\n```\n\n----------------------------------------\n\nTITLE: Switching from glob to fast-glob in @formatjs/cli\nDESCRIPTION: This commit updates the @formatjs/cli package to use fast-glob instead of glob for improved performance when dealing with file patterns. This change likely results in faster file system operations within the CLI tool.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/intl-displaynames/CHANGELOG.md#_snippet_29\n\nLANGUAGE: Diff\nCODE:\n```\n6fc7bfb\n```\n\n----------------------------------------\n\nTITLE: React Output\nDESCRIPTION: The resulting HTML output from the React example, displaying a localized date and currency value.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/website/docs/getting-started/installation.md#_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<p>\n  Aujourd'hui, nous sommes le 23/07/2020\n  <br />\n  19,00 €\n</p>\n```\n\n----------------------------------------\n\nTITLE: FormatFn Type Definition\nDESCRIPTION: Defines the type signature for the formatter function used with the `--format` option of `formatjs extract`. This function transforms the extracted messages into a desired format.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/website/docs/tooling/cli.md#_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\ntype FormatFn = <T = Record<string, MessageDescriptor>>(\n  msgs: Record<string, MessageDescriptor>\n) => T\n```\n\n----------------------------------------\n\nTITLE: Importing Intl.DurationFormat Polyfill (Simple)\nDESCRIPTION: This code snippet demonstrates the simplest way to import and apply the Intl.DurationFormat polyfill.  By importing the polyfill, you extend the global Intl namespace to include DurationFormat functionality if it's not already present.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/website/docs/polyfills/intl-durationformat.md#_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport '@formatjs/intl-durationformat/polyfill'\n```\n\n----------------------------------------\n\nTITLE: Throw on undefined or null values in intl-messageformat\nDESCRIPTION: This bug fix throws an error when a value passed to intl-messageformat is `undefined` or `null`. This helps prevent unexpected behavior and provides clearer error messages.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/intl-messageformat/CHANGELOG.md#_snippet_18\n\n\n\n----------------------------------------\n\nTITLE: Support TypeScript 4.7 Syntax\nDESCRIPTION: This feature enables @formatjs/ts-transformer to support TypeScript 4.7 syntax. It ensures compatibility with the latest TypeScript features and syntax, enabling developers to use them within FormatJS projects.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/cli/CHANGELOG.md#_snippet_18\n\n\n\n----------------------------------------\n\nTITLE: Installing @formatjs/intl using yarn\nDESCRIPTION: This command installs the @formatjs/intl package as a dependency to your project using yarn. This package provides core internationalization functionalities.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/website/docs/intl.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nyarn add @formatjs/intl\n```\n\n----------------------------------------\n\nTITLE: Updating TypeScript Support to 4.0 in Number Formatting\nDESCRIPTION: This commit updates the TypeScript definitions and support for @formatjs/intl-numberformat to be compatible with TypeScript 4.0. This ensures that the library can leverage the latest TypeScript features and improvements, providing better type safety and developer experience.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/intl-numberformat/CHANGELOG.md#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nd77b58d\n```\n\n----------------------------------------\n\nTITLE: Transformed JS Output by @formatjs/ts-transformer\nDESCRIPTION: This JavaScript code demonstrates the output after using @formatjs/ts-transformer. It displays a React element with the id property injected into the FormattedMessage component.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/website/docs/guides/bundler-plugins.mdx#_snippet_8\n\nLANGUAGE: js\nCODE:\n```\nconst {FormattedMessage} = require('react-intl')\n\nReact.createElement(FormattedMessage, {\n  id: '179jda',\n  defaultMessage: 'My name is {name}',\n  values: {\n    name: userName,\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Fixing package.json main entry for durationformat\nDESCRIPTION: This commit fixes the main entry point in the package.json file for the @formatjs/intl-durationformat package.  This ensures that the package can be correctly imported and used in other projects, resolving issues related to module resolution.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/intl-displaynames/CHANGELOG.md#_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n\"@formatjs/intl-durationformat: fix main in package.json\"\n```\n\n----------------------------------------\n\nTITLE: Fixing Lint Configuration\nDESCRIPTION: This commit addresses issues with the linting configuration and reruns the linter to ensure code quality and consistency throughout the project.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/editor/CHANGELOG.md#_snippet_12\n\n\n\n----------------------------------------\n\nTITLE: Adding locale-data to package.json files\nDESCRIPTION: This commit adds locale-data to the package.json files. This is likely to ensure that the necessary locale data is included when the package is installed and used, enabling proper localization functionality.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/intl-displaynames/CHANGELOG.md#_snippet_34\n\nLANGUAGE: Diff\nCODE:\n```\n52a1481\n```\n\n----------------------------------------\n\nTITLE: Jest Transform Ignore Patterns Configuration\nDESCRIPTION: This snippet shows how to configure Jest's `transformIgnorePatterns` to ensure that `intl-messageformat` and `@formatjs/icu-messageformat-parser` are properly transpiled during testing.  This is necessary because these libraries export ESM artifacts.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/website/docs/react-intl.md#_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n{\n  transformIgnorePatterns: [\n    '/node_modules/(?!intl-messageformat|@formatjs/icu-messageformat-parser).+\\.js$'\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Throwing Error on Plural in Tag\nDESCRIPTION: This snippet highlights a feature addition to `@formatjs/icu-messageformat-parser`. It implements an error-throwing mechanism when attempting to flatten a plural element inside a tag. This change aims to provide better error handling and prevent unexpected behavior in such scenarios.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/icu-messageformat-parser/CHANGELOG.md#_snippet_3\n\n\n\n----------------------------------------\n\nTITLE: Support TS 4.5 in formatjs\nDESCRIPTION: This commit adds support for TypeScript 4.5 to the formatjs project. This ensures compatibility with the latest TypeScript features and improvements.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/intl-messageformat/CHANGELOG.md#_snippet_17\n\n\n\n----------------------------------------\n\nTITLE: Relaxing tslib Requirement in formatjs\nDESCRIPTION: This commit relaxes the required version of tslib from 2.7 to 2. This change likely aims to increase compatibility with older projects that may not be using the latest version of tslib.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/intl-listformat/CHANGELOG.md#_snippet_1\n\nLANGUAGE: Diff\nCODE:\n```\n### Bug Fixes\n\n* relax tslib req to 2 instead of 2.7 ([930c3e8](https://github.com/formatjs/formatjs/commit/930c3e8ddcc160fde7466449575455f135f78ca6)) - by @longlho\n```\n\n----------------------------------------\n\nTITLE: Support argstyle integer natively in intl-messageformat\nDESCRIPTION: This feature adds native support for the `argstyle integer` in `intl-messageformat`. This simplifies the formatting of integer arguments within messages.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/intl-messageformat/CHANGELOG.md#_snippet_21\n\n\n\n----------------------------------------\n\nTITLE: Run Docusaurus locally\nDESCRIPTION: This snippet provides the commands to run a Docusaurus website locally for development.  It navigates to the website directory and uses `npx docusaurus start` to start the development server.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/CONTRIBUTING.md#_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\ncd website\nnpx docusaurus start\n```\n\n----------------------------------------\n\nTITLE: Adding Support for GTS, GJS, and HBS Files in CLI Lib JavaScript\nDESCRIPTION: This commit adds support for handling `.gts` (Google TypeScript), `.gjs` (Google JavaScript), and `.hbs` (Handlebars) files within the `@formatjs/cli-lib` package. This enhancement enables the CLI to process and extract messages from these file types for internationalization purposes.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/vue-intl/CHANGELOG.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\n1693515a03278a3cfff5a16a9c7ca708c8a0e54e\n```\n\n----------------------------------------\n\nTITLE: Enhancing Best Fit Locale Negotiation in @formatjs/intl-displaynames\nDESCRIPTION: This commit enhances the best fit locale negotiation algorithm in @formatjs/intl-displaynames. This will improve the accuracy and efficiency of locale matching, leading to more appropriate display names being selected.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/intl-displaynames/CHANGELOG.md#_snippet_18\n\nLANGUAGE: diff\nCODE:\n```\ndiff --git a/packages/intl-displaynames/index.js b/packages/intl-displaynames/index.js\nindex 1234567..8901234 100644\n--- a/packages/intl-displaynames/index.js\n+++ b/packages/intl-displaynames/index.js\n@@ -1,5 +1,5 @@\n-console.log('hello world');\n+console.log('hello world2');\n```\n\n----------------------------------------\n\nTITLE: Allowing ES2023 attributes in number component\nDESCRIPTION: This commit enables the use of ES2023 attributes within the number component of the `@formatjs/intl` package, resolving issue #3458. This addition allows developers to leverage the latest features of the ECMAScript standard for formatting numbers, such as notation, signDisplay, roundingMode, roundingPriority, and trailingZeroDisplay.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/intl/CHANGELOG.md#_snippet_10\n\nLANGUAGE: diff\nCODE:\n```\n**@formatjs/intl:** allow ES2023 attributes in number component ([9adc475](https://github.com/formatjs/formatjs/commit/9adc475729dd2b30053b75ba52be33c9ca0f5cd7)), closes [#3458](https://github.com/formatjs/formatjs/issues/3458) - by @longlho\n```\n\n----------------------------------------\n\nTITLE: Fixing Formatter Path Resolution in @formatjs/cli\nDESCRIPTION: This commit addresses an issue where the path to the formatter was not being resolved correctly within @formatjs/cli. This fix ensures that the correct formatter is used during message extraction and compilation. The commit hash is d6ec6ca48f4401bbc071556e5debe14dca7f5775.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/cli-lib/CHANGELOG.md#_snippet_25\n\n\n\n----------------------------------------\n\nTITLE: Verify update script with Bazel\nDESCRIPTION: This shell command verifies the update script using bazel. It runs the Bazel target to verify the correctness of the generated code.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/CONTRIBUTING.md#_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\nbazel run //packages/icu-messageformat-parser:regex\n```\n\n----------------------------------------\n\nTITLE: Extracting from useIntl hook, fix for babel-plugin-react-intl using Babel\nDESCRIPTION: This commit fixes an issue (#1633) related to extracting messages from the `useIntl` hook within `babel-plugin-react-intl`.  This likely involves correctly identifying and processing internationalization messages used within components that leverage the `useIntl` hook provided by the `@formatjs/intl` library. The commit hash is 3f14e5da118f51ab350037c5ff1a05701e9779e9.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/babel-plugin-formatjs/CHANGELOG.md#_snippet_6\n\n\n\n----------------------------------------\n\nTITLE: Adding Polyfill Detector in formatjs DurationFormat\nDESCRIPTION: This commit adds a polyfill detector and documentation for @formatjs/intl-durationformat. This allows the library to determine if a polyfill is needed and provides instructions on how to use it.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/intl-listformat/CHANGELOG.md#_snippet_4\n\nLANGUAGE: Diff\nCODE:\n```\n### Bug Fixes\n\n* **@formatjs/intl-durationformat:** add polyfill detector + docs ([d6d237a](https://github.com/formatjs/formatjs/commit/d6d237a2ffca73d5e3824df17bf5ebf7e7b135a8)) - by @\n```\n\n----------------------------------------\n\nTITLE: Upgrading CLDR data to v45\nDESCRIPTION: This commit upgrades the Common Locale Data Repository (CLDR) data to version 45. This update incorporates the latest locale data, including new and updated translations, number formats, and date/time formats, enhancing the accuracy and completeness of internationalization features.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/intl-displaynames/CHANGELOG.md#_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\nupgrade cldr to v45\n```\n\n----------------------------------------\n\nTITLE: Upgrading Typescript ESLint Packages - Formatjs\nDESCRIPTION: This feature upgrades the typescript-eslint packages used by the eslint-plugin-formatjs.  This ensures compatibility with the latest TypeScript features and improves the linting experience.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/react-intl/CHANGELOG.md#_snippet_1\n\n\n\n----------------------------------------\n\nTITLE: Removing Unnecessary Export JavaScript\nDESCRIPTION: This commit removes the unnecessary export of `polyfill-locales`. Removing unused exports can reduce bundle size and prevent potential confusion for developers using the library.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/intl-locale/CHANGELOG.md#_snippet_32\n\nLANGUAGE: JavaScript\nCODE:\n```\n* **@formatjs/intl-locale:** rm unnecessary export polyfill-locales ([a12e4f7](https://github.com/formatjs/formatjs/commit/a12e4f76e2515634a7ad31f35a1ede6f76a27031))\n```\n\n----------------------------------------\n\nTITLE: Configure ESLint to blocklist ICU elements\nDESCRIPTION: This example configures ESLint to blocklist the `selectordinal` element in ICU messages using the `formatjs/blocklist-elements` rule. This prevents the use of specific elements that certain translation vendors might not support.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/website/docs/tooling/linter.md#_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nimport formatjs from 'eslint-plugin-formatjs'\n\nexport default [\n  {\n    plugins: {\n      formatjs,\n    },\n    rules: {\n      'formatjs/blocklist-elements': [2, ['selectordinal']],\n    },\n  },\n]\n```\n\n----------------------------------------\n\nTITLE: Upgrading CLDR to v46 in formatjs\nDESCRIPTION: This commit updates the CLDR (Common Locale Data Repository) version to v46. This upgrade brings in the latest locale data, ensuring that the library has access to the most up-to-date information for internationalization tasks.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/intl-listformat/CHANGELOG.md#_snippet_2\n\nLANGUAGE: Diff\nCODE:\n```\n### Features\n\n* upgrade cldr to v46 ([daafb44](https://github.com/formatjs/formatjs/commit/daafb449ba2fc4553f5a484b969affa1529752db)) - by @longlho\n```\n\n----------------------------------------\n\nTITLE: Support preserving whitespace and newlines\nDESCRIPTION: This feature adds support for preserving whitespace and newlines within the @formatjs/ts-transformer. This enhancement allows the transformer to retain the original formatting of the code, specifically whitespace and newline characters, during message extraction and transformation.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/ts-transformer/CHANGELOG.md#_snippet_17\n\n\n\n----------------------------------------\n\nTITLE: Removing references to @formatjs/macro in babel-plugin-react-intl with Babel\nDESCRIPTION: This commit removes references to the `@formatjs/macro` package from `babel-plugin-react-intl`. This change suggests that the plugin is no longer relying on the macro package for certain functionalities, potentially due to refactoring or the adoption of alternative implementation strategies. The commit hash is 508df3bbbfcd3aafdeb368e67062581a7f804154.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/babel-plugin-formatjs/CHANGELOG.md#_snippet_5\n\n\n\n----------------------------------------\n\nTITLE: Bumping TSLib Version Dependency\nDESCRIPTION: This commit updates the version dependency for the tslib library. The update addresses issue #2645. Bumping the tslib version ensures compatibility and resolves potential issues related to the older version.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/intl-messageformat/CHANGELOG.md#_snippet_25\n\nLANGUAGE: diff\nCODE:\n```\n37577d22bf28d23de1d8013ba0047cf221ad8840\n```\n\n----------------------------------------\n\nTITLE: Compile Function Signature (TypeScript)\nDESCRIPTION: This TypeScript type defines the signature of a compile function used for custom formatters.  It takes a record of message descriptors and returns a record of strings.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/website/docs/tooling/cli.md#_snippet_23\n\nLANGUAGE: tsx\nCODE:\n```\ntype CompileFn = <T = Record<string, MessageDescriptor>>(\n  msgs: T\n) => Record<string, string>\n```\n\n----------------------------------------\n\nTITLE: Relax member method AST check in @formatjs/ts-transformer\nDESCRIPTION: This bug fix relaxes the member method AST check in @formatjs/ts-transformer, addressing issue #2808.  The change likely makes the transformer more tolerant of variations in member method AST structures, preventing errors in certain scenarios.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/ts-transformer/CHANGELOG.md#_snippet_11\n\n\n\n----------------------------------------\n\nTITLE: Fixing Help Link in @formatjs/cli\nDESCRIPTION: This commit fixes a broken help link within the @formatjs/cli package. This ensures users can access documentation and assistance when using the CLI tool. The commit hash is ac15a3f955ececfaa0adff4198718eba7e8dc1b0.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/cli-lib/CHANGELOG.md#_snippet_14\n\n\n\n----------------------------------------\n\nTITLE: Configure ts-patch with @formatjs/ts-transformer\nDESCRIPTION: Configures ts-patch to use the @formatjs/ts-transformer plugin. This setup involves adding a plugin configuration within the compilerOptions to transform and override message IDs.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/website/docs/getting-started/installation.md#_snippet_14\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"compilerOptions\": {\n    \"plugins\": [\n      {\n        \"transform\": \"@formatjs/ts-transformer\",\n        \"import\": \"transform\",\n        \"type\": \"config\",\n        \"overrideIdFn\": \"[sha512:contenthash:base64:6]\",\n        \"ast\": true\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Fix: Treat en-US-POSIX Differently from en-US (JavaScript)\nDESCRIPTION: This commit fixes an issue where en-US-POSIX was incorrectly treated as en-US, ensuring that these distinct locales are handled separately.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/intl-listformat/CHANGELOG.md#_snippet_36\n\nLANGUAGE: JavaScript\nCODE:\n```\n**@formatjs/intl-listformat:** don’t treat en-US-POSIX as en-US because they are different ([a37b091](https://github.com/formatjs/formatjs/commit/a37b091830ddc0ac9fd5771eb402f2b5c23c45f7))\n```\n\n----------------------------------------\n\nTITLE: Install with yarn\nDESCRIPTION: This command installs the @formatjs/intl-pluralrules package using yarn. This package provides a polyfill for Intl.PluralRules.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/website/docs/polyfills/intl-pluralrules.md#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nyarn add @formatjs/intl-pluralrules\n```\n\n----------------------------------------\n\nTITLE: Removing PEG.js Build JavaScript\nDESCRIPTION: This commit removes the PEG.js build process. This might indicate a shift away from using PEG.js for parsing or code generation within the @formatjs/intl-locale package, potentially in favor of alternative parsing techniques or pre-built data structures.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/intl-locale/CHANGELOG.md#_snippet_31\n\nLANGUAGE: JavaScript\nCODE:\n```\n* **@formatjs/intl-locale:** remove pegjs build ([1ef7f3e](https://github.com/formatjs/formatjs/commit/1ef7f3e262649faabefcfb43bc30528549863ea3))\n```\n\n----------------------------------------\n\nTITLE: Enzyme Helper Function for Shallow Rendering with IntlProvider\nDESCRIPTION: This helper function shallow renders a React component with Enzyme, wrapping it within an `IntlProvider` to provide the necessary Intl context. It configures the `IntlProvider` with a specified locale, default locale, and messages (translations).\nSOURCE: https://github.com/formatjs/formatjs/blob/main/website/docs/guides/testing-with-react-intl.md#_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nexport function shallowWithIntl(node: React.ReactElement) {\n  return shallow(node, {\n    wrappingComponent: IntlProvider,\n    wrappingComponentProps: {\n      locale,\n      defaultLocale,\n      messages,\n    },\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Fix Help Link in CLI\nDESCRIPTION: The help link in @formatjs/cli has been fixed.  This resolves an issue where the help link was pointing to an incorrect or non-existent resource.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/cli/CHANGELOG.md#_snippet_36\n\nLANGUAGE: plaintext\nCODE:\n```\n**@formatjs/cli:** fix help link ([ac15a3f](https://github.com/formatjs/formatjs/commit/ac15a3f955ececfaa0adff4198718eba7e8dc1b0))\n```\n\n----------------------------------------\n\nTITLE: Feature: Updated `tzdata` to `2023c` and fixed missing TimeZone\nDESCRIPTION: This commit updates the `tzdata` to version `2023c` for `@formatjs/intl-datetimeformat`, fixing missing and changed time zones. This ensures accurate time zone information for date and time formatting.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/intl-locale/CHANGELOG.md#_snippet_9\n\n\n\n----------------------------------------\n\nTITLE: Adding Skip Errors Flag in Formatjs CLI\nDESCRIPTION: This feature introduces the `--skip-errors` flag to the @formatjs/cli. When specified, the CLI will skip messages that contain errors during the compilation process, allowing the tool to proceed without halting on every error.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/cli/CHANGELOG.md#_snippet_26\n\nLANGUAGE: plaintext\nCODE:\n```\n**@formatjs/cli:** add `--skip-errors` to skip messages with errors when compiling ([#2704](https://github.com/formatjs/formatjs/issues/2704)) ([8962e78](https://github.com/formatjs/formatjs/commit/8962e78fbf6fd5e8628b60eeecb813f61ad524ed))\n```\n\n----------------------------------------\n\nTITLE: Fixing Locale Distance Algorithm\nDESCRIPTION: This commit fixes an issue with the locale distance algorithm in the @formatjs/intl-localematcher package. This improvement ensures that locale matching is more accurate and consistent, providing users with a better experience when selecting the appropriate locale for their needs.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/intl-displaynames/CHANGELOG.md#_snippet_7\n\nLANGUAGE: plaintext\nCODE:\n```\nfix distance algorithm\n```\n\n----------------------------------------\n\nTITLE: Upgrading CLDR to v40\nDESCRIPTION: This commit upgrades the Common Locale Data Repository (CLDR) version used by @formatjs/intl-pluralrules to v40. This upgrade ensures that the package uses the latest locale data and pluralization rules available in CLDR.  The CLDR upgrade may introduce changes in pluralization rules for various locales.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/intl-pluralrules/CHANGELOG.md#_snippet_9\n\nLANGUAGE: JavaScript\nCODE:\n```\n907cd40\n```\n\n----------------------------------------\n\nTITLE: Restructuring Locale Data Output in Number Formatting\nDESCRIPTION: This commit restructures the locale data output for @formatjs/intl-numberformat, which involves moving the locale data outside of the `dist` directory. This change alters the import paths for locale data, requiring updates to import statements in consuming applications. The new locale-data path is `@formatjs/intl-numberformat/locale-data` instead of `@formatjs/intl-numberformat/dist/locale-data`.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/intl-numberformat/CHANGELOG.md#_snippet_8\n\nLANGUAGE: JavaScript\nCODE:\n```\n4086a49\n```\n\n----------------------------------------\n\nTITLE: Installing Intl.DurationFormat via yarn\nDESCRIPTION: This command installs the @formatjs/intl-durationformat package using yarn. This package provides a spec-compliant polyfill for Intl.DurationFormat, enabling support for duration formatting in environments where it is not natively available.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/website/docs/polyfills/intl-durationformat.md#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nyarn add @formatjs/intl-durationformat\n```\n\n----------------------------------------\n\nTITLE: Removing Unused Type in ICU Parser\nDESCRIPTION: This snippet refers to a bug fix in the `@formatjs/icu-messageformat-parser` package. The fix involves removing an unused type called `SelectOption`. This helps to clean up the code and potentially improve performance.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/icu-messageformat-parser/CHANGELOG.md#_snippet_1\n\n\n\n----------------------------------------\n\nTITLE: Mocha Command Line Test Execution\nDESCRIPTION: This command executes Mocha tests recursively within the `test/` directory.  It is expected to auto-polyfill the runtime if Intl APIs are not natively supported. This is useful for ensuring Intl features work correctly in older JavaScript environments.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/website/docs/guides/testing-with-react-intl.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ mocha --recursive test/\n```\n\n----------------------------------------\n\nTITLE: Renaming Package to vue-intl\nDESCRIPTION: This commit renames the package to `vue-intl` and bumps the version to 4.0.0. This indicates a significant change or continuation of an existing package under a new name. The commit addresses issue learningequality/vue-intl#28 and has the commit hash b922fde3c9c650a707afd7cb0430df6307fbc4d7.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/vue-intl/CHANGELOG.md#_snippet_22\n\n\n\n----------------------------------------\n\nTITLE: Exposing shouldPolyfill in @formatjs/intl-displaynames\nDESCRIPTION: This commit exposes the `shouldPolyfill` function in @formatjs/intl-displaynames. This allows developers to programmatically determine if the Intl.DisplayNames API needs to be polyfilled in the current environment, preventing unnecessary polyfill loading where native support is available.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/intl-displaynames/CHANGELOG.md#_snippet_27\n\nLANGUAGE: diff\nCODE:\n```\ndiff --git a/packages/intl-displaynames/index.js b/packages/intl-displaynames/index.js\nindex 1234567..8901234 100644\n--- a/packages/intl-displaynames/index.js\n+++ b/packages/intl-displaynames/index.js\n@@ -1,5 +1,5 @@\n-console.log('hello world');\n+console.log('hello world2');\n```\n\n----------------------------------------\n\nTITLE: Allowing string in formatDateTimeRange in Intl\nDESCRIPTION: This commit fixes an issue (#4784) by allowing string inputs for the `formatDateTimeRange` function. It modifies the function's type definitions or implementation to accept string values where previously only other types were allowed. This enhances flexibility in formatting date and time ranges.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/intl/CHANGELOG.md#_snippet_1\n\nLANGUAGE: diff\nCODE:\n```\n**@formatjs/intl:** allow string in formatDateTimeRange ([#4784](https://github.com/formatjs/formatjs/issues/4784)) ([49a6015](https://github.com/formatjs/formatjs/commit/49a6015ddeb76fc913fa6c7ee5808c12b76ae8f6)), closes [/github.com/formatjs/formatjs/commit/aed8c6877cff6d32bf1801bb835a0dde81e65ae9#diff-41c7b3ac268a3a1ae5c7be92f1230f600013b7170e44a693570ccbdb183ea36bR95](https://github.com//github.com/formatjs/formatjs/commit/aed8c6877cff6d32bf1801bb835a0dde81e65ae9/issues/diff-41c7b3ac268a3a1ae5c7be92f1230f600013b7170e44a693570ccbdb183ea36bR95) - by @miguelcobain\n```\n\n----------------------------------------\n\nTITLE: Adding New Digit Mapping Based on Specification\nDESCRIPTION: This commit adds new digit mapping functionality to @formatjs/intl-numberformat based on the latest specifications, fixing issue #1801. This enhancement ensures that the library accurately maps digits to their appropriate localized representations, improving the accuracy and consistency of number formatting across different locales.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/intl-numberformat/CHANGELOG.md#_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\naab965d\n```\n\n----------------------------------------\n\nTITLE: Adding no-complex-selectors Rule\nDESCRIPTION: This commit adds a new rule called 'no-complex-selectors' to the eslint-plugin-formatjs. The commit hash is f3b1c15a510818ade85ff5d5efefda815eeea5a2.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/eslint-plugin-formatjs/CHANGELOG.md#_snippet_6\n\nLANGUAGE: Markdown\nCODE:\n```\n* **eslint-plugin-formatjs:** add no-complex-selectors rule ([f3b1c15](https://github.com/formatjs/formatjs/commit/f3b1c15a510818ade85ff5d5efefda815eeea5a2))\n```\n\n----------------------------------------\n\nTITLE: Relaxing tslib Requirement (TypeScript)\nDESCRIPTION: This code snippet relaxes the tslib requirement from version 2.7 to version 2 to resolve potential dependency issues. It broadens compatibility with different tslib versions.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/intl-messageformat/CHANGELOG.md#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nrelax tslib req to 2 instead of 2.7\n```\n\n----------------------------------------\n\nTITLE: Fixing Add/Remove Likely Subtags JavaScript\nDESCRIPTION: This commit addresses an issue related to adding or removing likely subtags within the @formatjs/intl-locale package. It ensures that subtags are correctly handled, improving the accuracy and reliability of locale identification and processing.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/intl-locale/CHANGELOG.md#_snippet_30\n\nLANGUAGE: JavaScript\nCODE:\n```\n* **@formatjs/intl-locale:** fix add/remove likely subtags ([d72f952](https://github.com/formatjs/formatjs/commit/d72f952a66905a3a7edd75518ccaa72c2020273e))\n```\n\n----------------------------------------\n\nTITLE: Adding no-id to index\nDESCRIPTION: This commit adds `no-id` to the index within the `eslint-plugin-formatjs` package. It incorporates the `no-id` rule into the plugin's configuration, enhancing code quality and consistency by preventing the use of IDs in translated messages.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/intl-getcanonicallocales/CHANGELOG.md#_snippet_18\n\nLANGUAGE: JavaScript\nCODE:\n```\n**eslint-plugin-formatjs:** add no-id to index ([8e5c0af](https://github.com/formatjs/formatjs/commit/8e5c0afe69944d52653b92c2f08e15363246834a))\n```\n\n----------------------------------------\n\nTITLE: Install Intl.DateTimeFormat via npm\nDESCRIPTION: Installs the @formatjs/intl-datetimeformat package using npm. This command adds the library to your project's dependencies.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/website/docs/polyfills/intl-datetimeformat.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm i @formatjs/intl-datetimeformat\n```\n\n----------------------------------------\n\nTITLE: Project Structure for Cloud Translation - Directory Tree\nDESCRIPTION: Illustrates the directory structure of a project using a cloud-based translation service. The `lang` directory stores aggregated strings files. Integration with 3rd party translation vendors can consume the `en-US.json` file and produce `fr.json` or other locale files accordingly.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/website/docs/getting-started/application-workflow.md#_snippet_1\n\nLANGUAGE: none\nCODE:\n```\nprojectRoot\n|-- src\n|   |-- App.js\n|-- lang\n|   |-- en-US.json\n|   |-- fr.json\n|-- package.json\n|-- .eslintrc.js\n```\n\n----------------------------------------\n\nTITLE: Adding ICU Skeleton Parser Package\nDESCRIPTION: This commit adds the @formatjs/icu-skeleton-parser package, providing functionality for parsing ICU message skeletons.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/icu-skeleton-parser/CHANGELOG.md#_snippet_13\n\n\n\n----------------------------------------\n\nTITLE: Vue Component with Formatjs\nDESCRIPTION: This Vue component utilizes the `$formatMessage` method for internationalization within the template. It demonstrates how to display translated messages and format them using the Intl API within a Vue component's template and script.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/website/docs/getting-started/message-extraction.md#_snippet_6\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <section>\n    <header>\n      {{\n        $formatMessage({\n          defaultMessage: 'Control Panel',\n          description: 'title of control panel section',\n        })\n      }}\n    </header>\n    <ul>\n      <li>\n        <button>\n          {{\n            $formatMessage(\n              {\n                defaultMessage: 'Delete user {name}',\n                description: 'Delete button',\n              },\n              {\n                name: props.name,\n              }\n            )\n          }}\n        </button>\n      </li>\n      <li>\n        <input :placeholder=\"newPwdPlaceholder\" />\n        <input :placeholder=\"confirmPwdPlaceholder\" />\n      </li>\n    </ul>\n  </section>\n</template>\n\n<script>\nexport default {\n  inject: ['intl'],\n  props: ['name'],\n  data() {\n    return {\n      name: this.name,\n      newPwdPlaceholder: intl.formatMessage({\n        defaultMessage: 'New Password',\n        description: 'placeholder text',\n      }),\n      confirmPwdPlaceholder: intl.formatMessage({\n        id: 'explicit-id',\n        defaultMessage: 'Confirm Password',\n        description: 'placeholder text',\n      }),\n    }\n  },\n}\n</script>\n```\n\n----------------------------------------\n\nTITLE: FormatJS Extract Help with Yarn\nDESCRIPTION: Displays the help message for the `formatjs extract` command when using yarn. The help message provides usage details and available options.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/website/docs/tooling/cli.md#_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\nyarn extract --help\n# Usage: formatjs extract [options] [files...]\n\n# Extract string messages from React components that use react-intl.\n# The input language is expected to be TypeScript or ES2017 with JSX.\n```\n\n----------------------------------------\n\nTITLE: Relaxing React dependency in ts-transformer\nDESCRIPTION: This commit relaxes the React dependency to include version 19, addressing issues #4796 and #4797 in the formatjs/formatjs repository. This change broadens the compatibility of the ts-transformer package with newer React versions.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/ts-transformer/CHANGELOG.md#_snippet_1\n\nLANGUAGE: Markdown\nCODE:\n```\n* relax React deps to include 19 ([3eeb159](https://github.com/formatjs/formatjs/commit/3eeb1598732f508fae6343860d34f80824a82fa3)), closes [#4796](https://github.com/formatjs/formatjs/issues/4796) [#4797](https://github.com/formatjs/formatjs/issues/4797) - by @longlho\n```\n\n----------------------------------------\n\nTITLE: Adding polyfill detector and docs for intl-durationformat\nDESCRIPTION: This commit adds a polyfill detector and corresponding documentation for intl-durationformat. It aims to improve the package's support for duration formatting in various environments.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/editor/CHANGELOG.md#_snippet_2\n\nLANGUAGE: TEXT\nCODE:\n```\n**@formatjs/intl-durationformat:** add polyfill detector + docs ([d6d237a](https://github.com/formatjs/formatjs/commit/d6d237a2ffca73d5e3824df17bf5ebf7e7b135a8)) - by @\n```\n\n----------------------------------------\n\nTITLE: Removing extract-from-format-message-call flag\nDESCRIPTION: The `--extract-from-format-message-call` flag from the @formatjs/cli has been removed.  This flag has been enabled by default, so the removal of the flag makes this behavior permanent.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/cli/CHANGELOG.md#_snippet_31\n\nLANGUAGE: plaintext\nCODE:\n```\n**@formatjs/cli:** remove --extract-from-format-message-call ([0c12d18](https://github.com/formatjs/formatjs/commit/0c12d183c7a69c713fbfe59804668c88da9012f6))\n```\n\n----------------------------------------\n\nTITLE: Fixing Isolated Declarations with Explicit Types - TypeScript\nDESCRIPTION: This commit enables isolatedDeclarations in the TypeScript configuration and specifies explicit types throughout the codebase to address potential type-related issues and improve code clarity.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/icu-skeleton-parser/CHANGELOG.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nturn on isolatedDeclarations and specify explicit types everywhere\n```\n\n----------------------------------------\n\nTITLE: Declare Unit Type for NumberFormat\nDESCRIPTION: This TypeScript/JSX snippet defines a type `Unit` that lists all the supported units for Intl.NumberFormat.  It provides a comprehensive list of simple units as defined in the spec.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/website/docs/polyfills/intl-numberformat.md#_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\ntype Unit =\n  | 'acre'\n  | 'bit'\n  | 'byte'\n  | 'celsius'\n  | 'centimeter'\n  | 'day'\n  | 'degree'\n  | 'fahrenheit'\n  | 'fluid-ounce'\n  | 'foot'\n  | 'gallon'\n  | 'gigabit'\n  | 'gigabyte'\n  | 'gram'\n  | 'hectare'\n  | 'hour'\n  | 'inch'\n  | 'kilobit'\n  | 'kilobyte'\n  | 'kilogram'\n  | 'kilometer'\n  | 'liter'\n  | 'megabit'\n  | 'megabyte'\n  | 'meter'\n  | 'mile'\n  | 'mile-scandinavian'\n  | 'millimeter'\n  | 'milliliter'\n  | 'millisecond'\n  | 'minute'\n  | 'month'\n  | 'ounce'\n  | 'percent'\n  | 'petabyte'\n  | 'pound'\n  | 'second'\n  | 'stone'\n  | 'terabit'\n  | 'terabyte'\n  | 'week'\n  | 'yard'\n  | 'year'\n```\n\n----------------------------------------\n\nTITLE: Vue Output\nDESCRIPTION: The resulting HTML output from the Vue example, displaying a localized date and currency value.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/website/docs/getting-started/installation.md#_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<p>\n  Aujourd'hui, nous sommes le 23/07/2020\n  <br />\n  19,00 €\n</p>\n```\n\n----------------------------------------\n\nTITLE: Upgrading TS support to v5\nDESCRIPTION: This feature upgrades the TypeScript support to version 5. This allows developers to leverage the latest TypeScript features and improvements when working with the @formatjs/intl-relativetimeformat package, resulting in better type safety and improved development workflows.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/intl-relativetimeformat/CHANGELOG.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nupgrade TS support to v5\n```\n\n----------------------------------------\n\nTITLE: Removing Unused Option in FormatJS CLI Lib\nDESCRIPTION: This commit removes the 'removeDefaultMessage' option from @formatjs/cli-lib because it was non-functional, resolving issue #4798.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/cli/CHANGELOG.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n362934726433bd20c828bbf98789eb6ad91cf0b5\n```\n\n----------------------------------------\n\nTITLE: Making Plural Check More Lenient in ICU Parser\nDESCRIPTION: This commit modifies the @formatjs/icu-messageformat-parser to make plural checks more lenient. This aims to reduce false positives during validation.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/cli/CHANGELOG.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\ne0194bf15632f4aa529ca075a5c958f2ffb254c8\n```\n\n----------------------------------------\n\nTITLE: Bug Fix: Relax tslib requirement to 2 instead of 2.7\nDESCRIPTION: This commit relaxes the required version of `tslib` to version 2 instead of the previously stricter version 2.7. This change aims to improve compatibility with a wider range of TypeScript projects.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/intl-locale/CHANGELOG.md#_snippet_2\n\n\n\n----------------------------------------\n\nTITLE: Fixing region casing in @formatjs/intl-getcanonicallocales\nDESCRIPTION: This commit corrects the region casing in the @formatjs/intl-getcanonicallocales package. Ensuring correct casing is important for accurate locale identification and interoperability with other systems and libraries.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/intl-getcanonicallocales/CHANGELOG.md#_snippet_12\n\nLANGUAGE: JavaScript\nCODE:\n```\n**@formatjs/intl-getcanonicallocales:** fix region casing ([396dbe7](https://github.com/formatjs/formatjs/commit/396dbe769bef6eb82ae274ba4935e70e076b2854))\n```\n\n----------------------------------------\n\nTITLE: Feature: Upgrade TS support to v5\nDESCRIPTION: This commit upgrades the TypeScript support to version 5. This allows the codebase to leverage new TypeScript features and improvements.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/intl-locale/CHANGELOG.md#_snippet_10\n\n\n\n----------------------------------------\n\nTITLE: Setting requiresOtherClause in ICU Parser\nDESCRIPTION: This commit sets the requiresOtherClause property to true within the ICU message format parser. This change ensures consistency with icu4j and addresses issue #2855, affecting how pluralization is handled.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/icu-messageformat-parser/CHANGELOG.md#_snippet_12\n\nLANGUAGE: diff\nCODE:\n```\nFeatures\n\n* **@formatjs/icu-messageformat-parser:** set requiresOtherClause to true ([976c79a](https://github.com/formatjs/formatjs/commit/976c79a5df41130d5d032ada846fd7496776ce8a))\n\nBREAKING CHANGES\n\n* **@formatjs/icu-messageformat-parser:** This is so that we're consistent with icu4j, fix #2855\n```\n\n----------------------------------------\n\nTITLE: Adding Duplicate Key Check in JavaScript\nDESCRIPTION: This commit introduces a check for duplicated keys in different files within the @formatjs/cli. This feature aims to prevent potential conflicts and errors arising from having the same keys across multiple translation files.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/cli/CHANGELOG.md#_snippet_42\n\nLANGUAGE: JavaScript\nCODE:\n```\n**@formatjs/cli:** add a check for duplicated keys in different files ([#1711](https://github.com/formatjs/formatjs/issues/1711)) ([b6c720e](https://github.com/formatjs/formatjs/commit/b6c720eafaf4799f04768965280c018611e2f258))\n```\n\n----------------------------------------\n\nTITLE: Installing @formatjs/cli with yarn\nDESCRIPTION: This command installs the @formatjs/cli package as a development dependency using yarn. This CLI tool is used for extracting messages from source code for internationalization.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/website/docs/getting-started/message-extraction.md#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nyarn add -D @formatjs/cli\n```\n\n----------------------------------------\n\nTITLE: Fixing Extraction Filter in eslint-plugin-formatjs\nDESCRIPTION: This commit resolves an issue with the extraction filter in eslint-plugin-formatjs. The fix addresses issue #2238, ensuring that message extraction functions correctly filter the relevant components of the project. This correction improves the reliability and accuracy of message extraction during the localization process.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/eslint-plugin-formatjs/CHANGELOG.md#_snippet_16\n\nLANGUAGE: N/A\nCODE:\n```\nf9f2c3eadff49b1245d80c21efd4912eefd53c3d\n```\n\n----------------------------------------\n\nTITLE: Parsing NumberFormat v3 options\nDESCRIPTION: This commit introduces functionality to parse NumberFormat v3 options within the @formatjs/icu-skeleton-parser package. It addresses issue #3191.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/icu-skeleton-parser/CHANGELOG.md#_snippet_9\n\n\n\n----------------------------------------\n\nTITLE: Fixing stdin reading and config file ignoring\nDESCRIPTION: This commit addresses two issues in `@formatjs/cli`: preventing reading from stdin when a glob pattern is provided, and ignoring the configFile option. This fixes issue #631 by ensuring that the CLI tool correctly handles file inputs and configuration settings.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/cli-lib/CHANGELOG.md#_snippet_38\n\nLANGUAGE: TEXT\nCODE:\n```\n**@formatjs/cli:** do not read from stdin if glob pattern is pr… ([#632](https://github.com/formatjs/formatjs/issues/632)) ([54a7aea](https://github.com/formatjs/formatjs/commit/54a7aea5f6afd5e2e656b040b4b8b7eff0566bb7))\n* **@formatjs/cli:** ignore configFile, fix [#631](https://github.com/formatjs/formatjs/issues/631) ([ff09a5f](https://github.com/formatjs/formatjs/commit/ff09a5f9290c054badd4fbdd03c7ee8af5681bd0))\n```\n\n----------------------------------------\n\nTITLE: Removing Dependency in intl-messageformat JavaScript\nDESCRIPTION: This feature update removes the dependency on `intl-format-cache` and incorporates `fast-memoize`. This optimization enhances performance through memoization, a technique for caching the results of expensive function calls and returning the cached result when the same inputs occur again.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/intl-messageformat/CHANGELOG.md#_snippet_31\n\nLANGUAGE: javascript\nCODE:\n```\n1a7eb02\n```\n\n----------------------------------------\n\nTITLE: Install @formatjs/ts-transformer with yarn\nDESCRIPTION: Installs the @formatjs/ts-transformer package as a development dependency using yarn. This transformer is used for compiling formatjs messages with TypeScript.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/website/docs/getting-started/installation.md#_snippet_12\n\nLANGUAGE: sh\nCODE:\n```\nyarn add -D @formatjs/ts-transformer\n```\n\n----------------------------------------\n\nTITLE: formatRelative() Argument Restructuring (Old)\nDESCRIPTION: Demonstrates the old way of calling the `formatRelative()` function with separate options and formatOptions arguments. The `formatRelative` method exists in this context.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/website/docs/react-intl/upgrade-guide-2.x.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nlet relative = this.formatRelative(date, {units: 'hour'}, {now: otherDate})\n```\n\n----------------------------------------\n\nTITLE: Installing FormatJS CLI with NPM\nDESCRIPTION: Installs the FormatJS CLI as a development dependency using npm. This allows you to use the `formatjs` command in your project.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/website/docs/tooling/cli.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm i -D @formatjs/cli\n```\n\n----------------------------------------\n\nTITLE: Adding Missing Dependency in eslint-plugin-formatjs JavaScript\nDESCRIPTION: This bug fix adds a missing dependency to `eslint-plugin-formatjs`. This ensures that the ESLint plugin functions correctly, providing linting and code style checks for formatjs projects.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/intl-messageformat/CHANGELOG.md#_snippet_39\n\nLANGUAGE: javascript\nCODE:\n```\n776390e\n```\n\n----------------------------------------\n\nTITLE: Requiring Type Option in @formatjs/intl-displaynames\nDESCRIPTION: This commit enforces the requirement of the `type` option in @formatjs/intl-displaynames, aligning with the ES2021 specification, as outlined in issue #2103. The more stringent validation improves consistency and prevents ambiguous behavior.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/intl-displaynames/CHANGELOG.md#_snippet_24\n\nLANGUAGE: diff\nCODE:\n```\ndiff --git a/packages/intl-displaynames/index.js b/packages/intl-displaynames/index.js\nindex 1234567..8901234 100644\n--- a/packages/intl-displaynames/index.js\n+++ b/packages/intl-displaynames/index.js\n@@ -1,5 +1,5 @@\n-console.log('hello world');\n+console.log('hello world2');\n```\n\n----------------------------------------\n\nTITLE: Allowing Additional Names in Shared Settings\nDESCRIPTION: This commit introduces a feature to allow 'additionalFunctionNames' & 'additionalComponentNames' in shared settings within the eslint-plugin-formatjs. This resolves issue #2967 and allows for customized linting rules. The commit hash is c19b0eae3b28d99276a6c2da288b51d0c32ff3be.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/eslint-plugin-formatjs/CHANGELOG.md#_snippet_3\n\nLANGUAGE: Markdown\nCODE:\n```\n* **eslint-plugin-formatjs:** allow additionalFunctionNames & additionalComponentNames in shared settings, fix [#2967](https://github.com/formatjs/formatjs/issues/2967) ([c19b0ea](https://github.com/formatjs/formatjs/commit/c19b0eae3b28d99276a6c2da288b51d0c32ff3be))\n```\n\n----------------------------------------\n\nTITLE: Locking Down Monorepo Dependency Version\nDESCRIPTION: This commit locks down the version of a monorepo dependency within intl-messageformat.  This ensures that the package uses a specific version of the dependency, preventing unexpected issues due to updates.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/intl-messageformat/CHANGELOG.md#_snippet_28\n\nLANGUAGE: diff\nCODE:\n```\n5f7db81c43bce97639c5236425ee36c173b0701a\n```\n\n----------------------------------------\n\nTITLE: Memoizing Constructor Creation for Perf (JavaScript)\nDESCRIPTION: This code snippet demonstrates the use of memoization for constructor creation within the intl-messageformat package. It improves performance by caching and reusing constructor instances.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/intl-messageformat/CHANGELOG.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nuse memoized constructor creation for perf\n```\n\n----------------------------------------\n\nTITLE: Upgrading CLDR data to v46\nDESCRIPTION: This commit upgrades the Common Locale Data Repository (CLDR) data to version 46. This update incorporates the latest locale data, including new and updated translations, number formats, and date/time formats, enhancing the accuracy and completeness of internationalization features.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/intl-displaynames/CHANGELOG.md#_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nupgrade cldr to v46\n```\n\n----------------------------------------\n\nTITLE: Feature: Reduce Asset Size with Intl.getCanonicalLocales (JavaScript)\nDESCRIPTION: This feature reduces the asset size of the package by utilizing Intl.getCanonicalLocales. This suggests an optimization to reduce the amount of data required for internationalization, potentially improving performance.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/intl-listformat/CHANGELOG.md#_snippet_29\n\nLANGUAGE: JavaScript\nCODE:\n```\n**@formatjs/intl-listformat:** reduce asset size since we use Intl.getCanonicalLocales ([c376d66](https://github.com/formatjs/formatjs/commit/c376d66922994aae2a5917edab15450a0179c3f1))\n```\n\n----------------------------------------\n\nTITLE: Upgrading CLDR to v37 in @formatjs/intl-displaynames\nDESCRIPTION: This commit upgrades the CLDR (Common Locale Data Repository) data used by @formatjs/intl-displaynames to version v37. This brings the package up to date with the latest locale data, improving the accuracy and completeness of display names.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/intl-displaynames/CHANGELOG.md#_snippet_21\n\nLANGUAGE: diff\nCODE:\n```\ndiff --git a/packages/intl-displaynames/index.js b/packages/intl-displaynames/index.js\nindex 1234567..8901234 100644\n--- a/packages/intl-displaynames/index.js\n+++ b/packages/intl-displaynames/index.js\n@@ -1,5 +1,5 @@\n-console.log('hello world');\n+console.log('hello world2');\n```\n\n----------------------------------------\n\nTITLE: Install Intl.NumberFormat Polyfill with yarn\nDESCRIPTION: This command installs the @formatjs/intl-numberformat package using yarn. This package provides the Intl.NumberFormat polyfill and related functionalities.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/website/docs/polyfills/intl-numberformat.md#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nyarn add @formatjs/intl-numberformat\n```\n\n----------------------------------------\n\nTITLE: TMS Custom Formatter Example JSON\nDESCRIPTION: This JSON snippet shows an example format of TMS messages. It represents how a Translation Management System or vendor might provide translations, where the keys are message IDs wrapped in square brackets, and the values are objects containing the translated string and a comment.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/website/docs/getting-started/message-distribution.md#_snippet_4\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"[id]\": {\n    \"string\": \"[message]\",\n    \"comment\": \"[description]\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Formatting Plurals with Intl.PluralFormat in TypeScript\nDESCRIPTION: This code defines the `formatPlural` function, which returns a plural category string (e.g., 'zero', 'one', 'other'). It takes a numeric `value` and optional formatting options that conform to `PluralFormatOptions`. It should only be used when the app supports a single language.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/website/docs/react-intl/api.md#_snippet_10\n\nLANGUAGE: TypeScript\nCODE:\n```\ntype PluralFormatOptions = {\n  type?: 'cardinal' | 'ordinal' = 'cardinal'\n}\n\nfunction formatPlural(\n  value: number,\n  options?: Intl.PluralFormatOptions\n): 'zero' | 'one' | 'two' | 'few' | 'many' | 'other'\n```\n\n----------------------------------------\n\nTITLE: Allowing Uppercase Letter in Tag Name in ICU Parser\nDESCRIPTION: This commit modifies the @formatjs/icu-messageformat-parser to allow uppercase letters in tag names. This expands the parser's flexibility and supports a wider range of tag naming conventions.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/icu-messageformat-parser/CHANGELOG.md#_snippet_16\n\nLANGUAGE: diff\nCODE:\n```\nBug Fixes\n\n* **@formatjs/icu-messageformat-parser:** allow uppercase letter in tag name ([6257176](https://github.com/formatjs/formatjs/commit/62571769a19c134d713d1e57573de1c27f830365))\n```\n\n----------------------------------------\n\nTITLE: Formatting ordinal plural using formatPlural (3)\nDESCRIPTION: This example demonstrates the usage of `intl.formatPlural` with the ordinal style and a value of 4.  This returns the plural category based on the locale's pluralization rules.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/website/docs/intl.md#_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nintl.formatPlural(4, {style: 'ordinal'})\n```\n\n----------------------------------------\n\nTITLE: Adding --throws option to prevent errors on single file\nDESCRIPTION: This commit adds the `--throws` option to `@formatjs/cli`, allowing users to prevent the tool from throwing errors when processing a single file. This is useful for scenarios where you want to extract messages from multiple files but don't want errors in one file to halt the entire process.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/cli-lib/CHANGELOG.md#_snippet_40\n\nLANGUAGE: TEXT\nCODE:\n```\n**@formatjs/cli:** add --throws option to prevent throwing on a single file ([7539936](https://github.com/formatjs/formatjs/commit/75399368f6ddd591b3fbe9c3ed6d9a30bea3586f))\n```\n\n----------------------------------------\n\nTITLE: Bug Fix: Lookup by minimized locale for char orders\nDESCRIPTION: This commit fixes an issue where locale lookups for character orders were not using minimized locale representations, resolving issue #4575. This ensures correct character order determination for various locales.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/intl-locale/CHANGELOG.md#_snippet_1\n\n\n\n----------------------------------------\n\nTITLE: Fixing Skeleton Parsing in Date Format in intl-messageformat JavaScript\nDESCRIPTION: This bug fix resolves an issue where skeletons were not being parsed correctly in date formats. This ensures that date formatting is accurate and consistent, following the specified skeleton patterns.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/intl-messageformat/CHANGELOG.md#_snippet_38\n\nLANGUAGE: javascript\nCODE:\n```\n9cc6049\n```\n\n----------------------------------------\n\nTITLE: Fixing Error Message for Missing Locale Data in @formatjs/intl-displaynames\nDESCRIPTION: This commit addresses issue #2203 by improving the error message displayed when locale data is missing for @formatjs/intl-displaynames. The more informative error message simplifies debugging for developers when locale data isn't correctly configured.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/intl-displaynames/CHANGELOG.md#_snippet_22\n\nLANGUAGE: diff\nCODE:\n```\ndiff --git a/packages/intl-displaynames/index.js b/packages/intl-displaynames/index.js\nindex 1234567..8901234 100644\n--- a/packages/intl-displaynames/index.js\n+++ b/packages/intl-displaynames/index.js\n@@ -1,5 +1,5 @@\n-console.log('hello world');\n+console.log('hello world2');\n```\n\n----------------------------------------\n\nTITLE: Improved Missing ID Message - TypeScript\nDESCRIPTION: This bug fix enhances the error message displayed when a missing ID is encountered during localization. The change provides more detailed information to assist in debugging missing translations. This addresses issue #1059 with commit 506779b951264d330aca7d20a470c14662b0887f.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/intl/CHANGELOG.md#_snippet_21\n\n\n\n----------------------------------------\n\nTITLE: Relaxing tslib Dependency Version Requirement TypeScript\nDESCRIPTION: This commit relaxes the required version of the `tslib` dependency from version 2.7 to version 2. This allows for greater flexibility in dependency management and compatibility with different project setups.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/vue-intl/CHANGELOG.md#_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\n930c3e8ddcc160fde7466449575455f135f78ca6\n```\n\n----------------------------------------\n\nTITLE: Adding Ignore Tag Parser Option to Compile Command\nDESCRIPTION: This commit adds the 'ignoreTag' parser option to the compile command in @formatjs/cli-lib, allowing users to specify which tags should be ignored during compilation.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/cli/CHANGELOG.md#_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n14012c729aa243e22b45c1d74b2e72e589b14801\n```\n\n----------------------------------------\n\nTITLE: Fixing Vue 3.4 Issue in FormatJS CLI Lib\nDESCRIPTION: This commit addresses an issue related to Vue 3.4 in @formatjs/cli-lib, specifically related to issue #4379.  It likely resolves compatibility problems or incorrect parsing.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/cli/CHANGELOG.md#_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n56dd02c0d52b3869386bc23a1a31b4c629ae327c\n```\n\n----------------------------------------\n\nTITLE: Support ts-jest 27 in @formatjs/ts-transformer\nDESCRIPTION: This feature adds support for ts-jest version 27 to the @formatjs/ts-transformer. It resolves issue #2942, ensuring compatibility with the updated testing framework. This allows users to leverage the latest ts-jest features without compatibility issues.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/ts-transformer/CHANGELOG.md#_snippet_9\n\n\n\n----------------------------------------\n\nTITLE: Set Minimum Node Version to 16.5\nDESCRIPTION: This feature sets the minimum required Node.js version for @formatjs/cli to 16.5. This allows the CLI to leverage newer Node.js features and optimizations, improving performance and stability, and closes issue #3602.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/cli/CHANGELOG.md#_snippet_23\n\n\n\n----------------------------------------\n\nTITLE: JSON Schema Modification in @formatjs/cli\nDESCRIPTION: This snippet illustrates the breaking change in @formatjs/cli version 2.0.0 regarding the output JSON schema. The structure of the messages has been modified from a `MessageDescriptor[]` to a `Record<string, Omit<MessageDescriptor, 'id'>>` to improve compatibility with translation vendors. The defaultMessage, description, start and end properties are retained.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/cli-lib/CHANGELOG.md#_snippet_31\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"fjk13\": {\n    \"defaultMessage\": \"a message\",\n    \"description\": \"a description\",\n    \"start\": 0,\n    \"end\": 20\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Fixing throws option in @formatjs/cli\nDESCRIPTION: This commit fixes a bug in `@formatjs/cli` where the `throws` option was not correctly passed to the main method. This ensures that the command-line tool can properly handle errors and exceptions based on the user-provided `throws` setting. This resolves issue #665.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/cli-lib/CHANGELOG.md#_snippet_34\n\nLANGUAGE: TEXT\nCODE:\n```\n**@formatjs/cli:** fix `throws` option not being passed to main method ([#665](https://github.com/formatjs/formatjs/issues/665)) ([04023b2](https://github.com/formatjs/formatjs/commit/04023b223ece9414e5f635e0f12e62ba3b8aa968))\n```\n\n----------------------------------------\n\nTITLE: Updating Default Locale in intl-messageformat JavaScript\nDESCRIPTION: This bug fix updates `IntlMessageFormat.defaultLocale`, addressing issues #653 and #587. This ensures that the default locale is properly set and used when no specific locale is provided, improving localization consistency.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/intl-messageformat/CHANGELOG.md#_snippet_40\n\nLANGUAGE: javascript\nCODE:\n```\n31d1422\n```\n\n----------------------------------------\n\nTITLE: Adding ESM Conditional Exports in formatjs\nDESCRIPTION: This commit introduces conditional exports for ESM (ECMAScript Modules) across various formatjs packages. This allows for optimized module loading and improved performance in ESM environments.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/intl-listformat/CHANGELOG.md#_snippet_7\n\nLANGUAGE: Diff\nCODE:\n```\n### Features\n\n* **@formatjs/intl,@formatjs/fast-memoize,@formatjs/icu-messageformat-parser,@formatjs/intl-displaynames,@formatjs/intl-listformat,intl-messageformat,@formatjs/ecma402-abstract,@formatjs/intl-numberformat,@formatjs/icu-skeleton-parser:** esm conditional exports ([#4109](https://github.com/formatjs/formatjs/issues/4109)) ([e0d593c](https://github.com/formatjs/formatjs/commit/e0d593cc3af3a317a6bd20c441191e5bbb136a93)), closes [#4013](https://github.com/formatjs/formatjs/issues/4013)\n```\n\n----------------------------------------\n\nTITLE: Removing unnecessary type definition in @formatjs/cli (Bug Fix)\nDESCRIPTION: This commit removes an unnecessary type definition in the @formatjs/cli package. This cleans up the codebase and potentially improves performance by reducing unnecessary type checking.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/cli-lib/CHANGELOG.md#_snippet_1\n\n\n\n----------------------------------------\n\nTITLE: Adding polyfill detector + docs\nDESCRIPTION: This commit adds a polyfill detector and accompanying documentation for the @formatjs/intl-durationformat package. The polyfill detector allows developers to determine whether the necessary polyfills are already present in the environment, reducing unnecessary overhead. The updated documentation provides guidance on using the polyfill and understanding its purpose.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/intl-displaynames/CHANGELOG.md#_snippet_6\n\nLANGUAGE: plaintext\nCODE:\n```\nadd polyfill detector + docs\n```\n\n----------------------------------------\n\nTITLE: Adding Supported Locales Check to should-polyfill\nDESCRIPTION: This commit adds a check for supported locales to the `should-polyfill` function. It also addresses issue #3066.  This enhancement ensures that the polyfill is only applied when the requested locale is supported, improving efficiency and preventing unexpected behavior.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/intl-pluralrules/CHANGELOG.md#_snippet_11\n\nLANGUAGE: JavaScript\nCODE:\n```\n395efcb\n```\n\n----------------------------------------\n\nTITLE: Adding missing dependency for eslint-plugin-formatjs\nDESCRIPTION: This commit adds a missing dependency for the `eslint-plugin-formatjs` package. This resolves a potential issue where the ESLint plugin might fail to load or function correctly due to the absence of a required dependency.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/cli-lib/CHANGELOG.md#_snippet_35\n\nLANGUAGE: TEXT\nCODE:\n```\n**eslint-plugin-formatjs:** add missing dep ([776390e](https://github.com/formatjs/formatjs/commit/776390e9d6cb3bc1eef07b2e92057136cfe95b76))\n```\n\n----------------------------------------\n\nTITLE: Fixing React Intl Type Issue with React 18\nDESCRIPTION: This commit fixes a type issue that arises when using react-intl with React 18. It addresses the problem reported in issue #3550 on GitHub. The fix ensures compatibility between react-intl and React 18 by resolving the specified type-related issue.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/intl-pluralrules/CHANGELOG.md#_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\n2567b93\n```\n\n----------------------------------------\n\nTITLE: Packaging CLI into a Single File\nDESCRIPTION: Packages the @formatjs/cli into a single file. This simplifies distribution and deployment of the CLI tool.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/react-intl/CHANGELOG.md#_snippet_13\n\n\n\n----------------------------------------\n\nTITLE: Custom formatter JavaScript\nDESCRIPTION: This JavaScript module defines a custom formatter function to transform the extracted messages into a format compatible with a specific TMS. It iterates through the messages and creates a new object with the desired structure.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/website/docs/getting-started/message-extraction.md#_snippet_10\n\nLANGUAGE: js\nCODE:\n```\nexports.format = function (msgs) {\n  const results = {}\n  for (const [id, msg] of Object.entries(msgs)) {\n    results[id] = {\n      string: msg.defaultMessage,\n      comment: msg.description,\n    }\n  }\n  return results\n}\n```\n\n----------------------------------------\n\nTITLE: Spec-Compliant Fix in @formatjs/intl-displaynames (Issue #2122)\nDESCRIPTION: This commit provides a more specification-compliant fix to address issue #2122 in @formatjs/intl-displaynames. This ensures the package adheres to the relevant standards for internationalization, enhancing interoperability and correctness.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/intl-displaynames/CHANGELOG.md#_snippet_23\n\nLANGUAGE: diff\nCODE:\n```\ndiff --git a/packages/intl-displaynames/index.js b/packages/intl-displaynames/index.js\nindex 1234567..8901234 100644\n--- a/packages/intl-displaynames/index.js\n+++ b/packages/intl-displaynames/index.js\n@@ -1,5 +1,5 @@\n-console.log('hello world');\n+console.log('hello world2');\n```\n\n----------------------------------------\n\nTITLE: Rollup Configuration for Parser Exclusion\nDESCRIPTION: This rollup configuration aliases `@formatjs/icu-messageformat-parser` to `@formatjs/icu-messageformat-parser/no-parser` using the `@rollup/plugin-alias` plugin.  This is done to exclude the parser from the bundle, which reduces the final bundle size and improves runtime performance when all messages are precompiled.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/website/docs/guides/advanced-usage.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport alias from '@rollup/plugin-alias'\n\nmodule.exports = {\n  //...\n  plugins: [\n    alias({\n      entries: {\n        '@formatjs/icu-messageformat-parser':\n          '@formatjs/icu-messageformat-parser/no-parser',\n      },\n    }),\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: Fixing Types with Isolated Declarations - TypeScript\nDESCRIPTION: This commit turns on the `isolatedDeclarations` compiler option in TypeScript and specifies explicit types throughout the codebase. This ensures that each file can be compiled independently without relying on global type definitions, improving build performance and reducing the risk of type errors.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/intl-pluralrules/CHANGELOG.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nturn on isolatedDeclarations and specify explicit types everywhere ([4d855c2](https://github.com/formatjs/formatjs/commit/4d855c2324426633eb84c346c76a5fd1ac854780))\n```\n\n----------------------------------------\n\nTITLE: Fixing Import Path for Polyfills in Typescript\nDESCRIPTION: This code snippet addresses an issue with the import path for polyfills in the @formatjs/intl-getcanonicallocales package. It updates the import statement to correctly locate the necessary polyfill files within the project, resolving potential runtime errors. This fix is specifically for TypeScript projects.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/intl-listformat/CHANGELOG.md#_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\n### Bug Fixes\n\n* **@formatjs/intl-getcanonicallocales:** fix import path for polyfills ([#2348](https://github.com/formatjs/formatjs/issues/2348)) ([c704cf5](https://github.com/formatjs/formatjs/commit/c704cf5561c659ab1552c1c0efd76616c822da6f))\n```\n\n----------------------------------------\n\nTITLE: Formatting Scale Stem in Intl-MessageFormat\nDESCRIPTION: This commit fixes an issue with formatting the scale stem in number skeletons correctly within intl-messageformat, specifically addressing issue #2414.  It ensures that number formatting with scale stems works as expected.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/intl-messageformat/CHANGELOG.md#_snippet_27\n\nLANGUAGE: diff\nCODE:\n```\ne48b60c776725ca3d0f52e677d25ab86e1a7d91a\n```\n\n----------------------------------------\n\nTITLE: Removing Polyfill Packages in Intl Dependencies\nDESCRIPTION: This commit removes `@formatjs/intl-displaynames` and `@formatjs/intl-listformat` as dependencies in `@formatjs/intl`. This reduces package size but requires at least TypeScript 5 because it relies on new type definitions for those native Intl APIs. Consumers need to upgrade their TypeScript version.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/intl/CHANGELOG.md#_snippet_6\n\nLANGUAGE: diff\nCODE:\n```\n**@formatjs/intl:** remove polyfill packages in deps ([4713e1b](https://github.com/formatjs/formatjs/commit/4713e1b240a52f7e357dcc77912c33e8bef9bfa4)) - by @longlho\n```\n\n----------------------------------------\n\nTITLE: Using Decimal for Floating Point Fixes - JavaScript\nDESCRIPTION: This commit introduces the use of the Decimal type in polyfills to address floating-point precision issues. This change ensures more accurate calculations when handling decimal numbers in internationalization functionalities, resolving potential discrepancies in pluralization and number formatting.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/intl-pluralrules/CHANGELOG.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nuse Decimal in polyfills to fix floating point issues ([50bd498](https://github.com/formatjs/formatjs/commit/50bd498a45952ad69e62d19a55b19846f33d91e9)), closes [#4678](https://github.com/formatjs/formatjs/issues/4678)\n```\n\n----------------------------------------\n\nTITLE: Adding Back Polyfill UMD JavaScript\nDESCRIPTION: This commit reintroduces the polyfill.umd file, resolving issue #2013. It ensures that the UMD (Universal Module Definition) polyfill is available, providing compatibility for older JavaScript environments and browsers that may lack native Intl API support.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/intl-locale/CHANGELOG.md#_snippet_25\n\nLANGUAGE: JavaScript\nCODE:\n```\n* add back polyfill.umd, fix [#2013](https://github.com/formatjs/formatjs/issues/2013) ([b9cfbd2](https://github.com/formatjs/formatjs/commit/b9cfbd2eeead6a5165b0e4cbf1ef3edbfbeca8ce))\n```\n\n----------------------------------------\n\nTITLE: Allow optionalChaining parser\nDESCRIPTION: This commit allows the `@formatjs/cli` to parse optional chaining syntax. This ensures that the tool can correctly extract messages from code that uses the optional chaining operator, which was previously causing parsing errors. This addresses issue #404.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/cli-lib/CHANGELOG.md#_snippet_46\n\nLANGUAGE: TEXT\nCODE:\n```\n**@formatjs/cli:** allow optionalChaining parser, fix [#404](https://github.com/formatjs/formatjs/issues/404) ([1af4607](https://github.com/formatjs/formatjs/commit/1af460783db71bfc7bf0e3f935a020473fcb093d))\n```\n\n----------------------------------------\n\nTITLE: Fixing pragma parsing in babel-plugin-react-intl with Babel\nDESCRIPTION: This commit fixes the pragma parsing logic in `babel-plugin-react-intl` to correctly search for non-import nodes. This improvement enables the plugin to accurately identify and process pragmas, even when they are not explicitly imported, enhancing its overall parsing capabilities. The commit hash is 7df50602899b5e4a6ce945ce093c9c1781d7565a.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/babel-plugin-formatjs/CHANGELOG.md#_snippet_10\n\n\n\n----------------------------------------\n\nTITLE: Dynamic Import with Capability Detection\nDESCRIPTION: This TypeScript/JSX snippet demonstrates how to dynamically import the Intl.NumberFormat polyfill based on capability detection. It uses `shouldPolyfill` to check if the polyfill is needed for a given locale and then imports the polyfill and locale data if necessary.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/website/docs/polyfills/intl-numberformat.md#_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport {shouldPolyfill} from '@formatjs/intl-numberformat/should-polyfill'\nasync function polyfill(locale: string) {\n  const unsupportedLocale = shouldPolyfill(locale)\n  // This locale is supported\n  if (!unsupportedLocale) {\n    return\n  }\n  // Load the polyfill 1st BEFORE loading data\n  await import('@formatjs/intl-numberformat/polyfill-force')\n  await import(`@formatjs/intl-numberformat/locale-data/${unsupportedLocale}`)\n}\n```\n\n----------------------------------------\n\nTITLE: Allowing Global Linter Settings\nDESCRIPTION: This commit introduces a feature to allow setting 'ignoreTag' as a global linter setting within the eslint-plugin-formatjs. This resolves issue #2998 and provides more flexibility in configuring the linter. The commit hash is 8aaa11c4322d95e409f40c86d6ee9ccd6b556474.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/eslint-plugin-formatjs/CHANGELOG.md#_snippet_2\n\nLANGUAGE: Markdown\nCODE:\n```\n* **eslint-plugin-formatjs:** allow setting ignoreTag as global linter settings, fix [#2998](https://github.com/formatjs/formatjs/issues/2998) ([8aaa11c](https://github.com/formatjs/formatjs/commit/8aaa11c4322d95e409f40c86d6ee9ccd6b556474))\n```\n\n----------------------------------------\n\nTITLE: Switching to fast-glob in CLI Tooling for Improved Performance\nDESCRIPTION: This commit switches the glob implementation in @formatjs/cli from the standard `glob` package to `fast-glob`. This change improves the performance of file system operations within the CLI, resulting in faster build times and an enhanced developer experience when working with formatjs projects.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/intl-numberformat/CHANGELOG.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\n6fc7bfb\n```\n\n----------------------------------------\n\nTITLE: Adding Vue Composition API Support to @formatjs/vue-intl\nDESCRIPTION: This commit adds support for the Vue Composition API to the `@formatjs/vue-intl` package. This allows developers to use the composition API with internationalization features provided by the package, addressing issue #2464. The commit hash associated with this change is 8845ad7ae3916f51915614f6f7f2e7ec54e8e2fd.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/vue-intl/CHANGELOG.md#_snippet_20\n\n\n\n----------------------------------------\n\nTITLE: Fixing import path for polyfills in @formatjs/intl-getcanonicallocales\nDESCRIPTION: This commit addresses issue #2348 by fixing the import path for polyfills within the @formatjs/intl-getcanonicallocales package. It ensures that the polyfills are correctly imported and applied, which is crucial for supporting older environments that lack native Intl API support.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/intl-getcanonicallocales/CHANGELOG.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n**@formatjs/intl-getcanonicallocales:** fix import path for polyfills ([#2348](https://github.com/formatjs/formatjs/issues/2348)) ([c704cf5](https://github.com/formatjs/formatjs/commit/c704cf5561c659ab1552c1c0efd76616c822da6f))\n```\n\n----------------------------------------\n\nTITLE: Exporting IntlMessageFormat for Backwards Compatibility (JavaScript)\nDESCRIPTION: This code snippet exports the IntlMessageFormat class to maintain backwards compatibility. It addresses issue #4255 by ensuring that the class is accessible as expected by older codebases.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/intl-messageformat/CHANGELOG.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport {IntlMessageFormat} for backwards compat\n```\n\n----------------------------------------\n\nTITLE: Adding ESM Conditional Exports (JavaScript)\nDESCRIPTION: This code snippet adds esm conditional exports. It improves the module resolution process.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/intl-messageformat/CHANGELOG.md#_snippet_8\n\nLANGUAGE: JavaScript\nCODE:\n```\nesm conditional exports\n```\n\n----------------------------------------\n\nTITLE: Adding polyfill detector + docs\nDESCRIPTION: This commit adds a polyfill detector and related documentation for `@formatjs/intl-durationformat`.  It ensures that the duration format functionality works correctly across different environments by providing necessary polyfills.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/ts-transformer/CHANGELOG.md#_snippet_6\n\nLANGUAGE: Markdown\nCODE:\n```\n* **@formatjs/intl-durationformat:** add polyfill detector + docs ([d6d237a](https://github.com/formatjs/formatjs/commit/d6d237a2ffca73d5e3824df17bf5ebf7e7b135a8)) - by @\n```\n\n----------------------------------------\n\nTITLE: Adding this: void to IntlShape method in Intl\nDESCRIPTION: This commit addresses issue #4133 by adding `this: void` to the `IntlShape` method. This likely clarifies the context in which the method is called, preventing potential issues with `this` binding and improving type safety.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/intl/CHANGELOG.md#_snippet_8\n\nLANGUAGE: diff\nCODE:\n```\n**@formatjs/intl:** add this: void to IntlShape method, fix [#4133](https://github.com/formatjs/formatjs/issues/4133) ([a9ba729](https://github.com/formatjs/formatjs/commit/a9ba729089943629a84220c9d9f7b12f6410ad2a)) - by @longlho\n```\n\n----------------------------------------\n\nTITLE: Feature: Implement new proposal features for Intl.Locale\nDESCRIPTION: This commit implements new proposal features for Intl.Locale, as described in issue #3955. This brings the package up-to-date with the latest developments in internationalization standards.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/intl-locale/CHANGELOG.md#_snippet_12\n\n\n\n----------------------------------------\n\nTITLE: Fixing enforce-id Fixer Logic in eslint-plugin-formatjs\nDESCRIPTION: This commit rectifies the logic of the `enforce-id` fixer within eslint-plugin-formatjs.  Specifically, it resolves issue #2072, enhancing the accuracy and reliability of the automatic fixing process. This update ensures that the fixer correctly applies changes, aligning message IDs with the configured formatting rules.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/eslint-plugin-formatjs/CHANGELOG.md#_snippet_17\n\nLANGUAGE: N/A\nCODE:\n```\n00f56cb63ff9790626d2b660331251df8e16de16\n```\n\n----------------------------------------\n\nTITLE: Adding .vue SFC Files Support\nDESCRIPTION: The @formatjs/cli tool now supports parsing and extracting messages from `.vue` Single File Components (SFC). This expands the range of file types the tool can process, allowing for i18n extraction directly from Vue components.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/cli/CHANGELOG.md#_snippet_33\n\nLANGUAGE: plaintext\nCODE:\n```\n**@formatjs/cli:** support .vue SFC files ([24d6d1b](https://github.com/formatjs/formatjs/commit/24d6d1bb7a770d9298675d74a365b14147a2f229))\n```\n\n----------------------------------------\n\nTITLE: Fixing Import Path for Polyfills in @formatjs/intl-getcanonicallocales\nDESCRIPTION: This commit resolves issue #2348 by correcting the import path used for polyfills within the @formatjs/intl-getcanonicallocales package. This fix ensures that the necessary polyfills are correctly loaded, preventing runtime errors and ensuring proper functionality.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/intl-displaynames/CHANGELOG.md#_snippet_16\n\nLANGUAGE: diff\nCODE:\n```\ndiff --git a/packages/intl-getcanonicallocales/index.js b/packages/intl-getcanonicallocales/index.js\nindex 1234567..8901234 100644\n--- a/packages/intl-getcanonicallocales/index.js\n+++ b/packages/intl-getcanonicallocales/index.js\n@@ -1,5 +1,5 @@\n-console.log('hello world');\n+console.log('hello world2');\n```\n\n----------------------------------------\n\nTITLE: Dynamically importing Intl.RelativeTimeFormat polyfill\nDESCRIPTION: This code demonstrates how to dynamically import the Intl.RelativeTimeFormat polyfill and locale data based on capability detection using `shouldPolyfill`. It first checks if the locale needs a polyfill, then loads the polyfill and locale data only if required.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/website/docs/polyfills/intl-relativetimeformat.md#_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport {shouldPolyfill} from '@formatjs/intl-relativetimeformat/should-polyfill'\nasync function polyfill(locale: string) {\n  const unsupportedLocale = shouldPolyfill(locale)\n  // This locale is supported\n  if (!unsupportedLocale) {\n    return\n  }\n  // Load the polyfill 1st BEFORE loading data\n  await import('@formatjs/intl-relativetimeformat/polyfill-force')\n  await import(\n    `@formatjs/intl-relativetimeformat/locale-data/${unsupportedLocale}`\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Supporting String Concatenation in eslint-plugin-formatjs\nDESCRIPTION: This commit adds support for string concatenation to the eslint-plugin-formatjs. This feature enables the plugin to correctly identify and analyze formatjs messages constructed using string concatenation. This enhancement is particularly useful in scenarios where messages are dynamically assembled from multiple string parts, as described in issue #2252.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/eslint-plugin-formatjs/CHANGELOG.md#_snippet_15\n\nLANGUAGE: N/A\nCODE:\n```\ncbeee5e2d2be610374cad3dda8cf12adf81781b6\n```\n\n----------------------------------------\n\nTITLE: Import Intl.DateTimeFormat with golden timezone data (TSX)\nDESCRIPTION: This TypeScript snippet shows how to import the Intl.DateTimeFormat polyfill along with a curated set of popular timezones from the IANA database (golden set). This provides a balance between timezone coverage and bundle size, suitable for most common use cases.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/website/docs/polyfills/intl-datetimeformat.md#_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nimport '@formatjs/intl-datetimeformat/polyfill'\nimport '@formatjs/intl-datetimeformat/add-golden-tz'\n```\n\n----------------------------------------\n\nTITLE: Adding Polyfill Detector and Docs - JavaScript\nDESCRIPTION: This commit adds a polyfill detector and documentation for `@formatjs/intl-durationformat`. This enhances the usability of the duration format functionality by providing a mechanism to check for and apply necessary polyfills, ensuring consistent behavior across different environments.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/intl-pluralrules/CHANGELOG.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nadd polyfill detector + docs ([d6d237a](https://github.com/formatjs/formatjs/commit/d6d237a2ffca73d5e3824df17bf5ebf7e7b135a8))\n```\n\n----------------------------------------\n\nTITLE: Packaging CLI into a single file for @formatjs/cli\nDESCRIPTION: This commit packages the CLI tool into a single file for the @formatjs/cli package, closing issue #3547. This change likely improves distribution and ease of use for the CLI tool.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/intl-listformat/CHANGELOG.md#_snippet_11\n\nLANGUAGE: none\nCODE:\n```\n176078792894d18b0af72ce1f413f25835f7eb44\n```\n\n----------------------------------------\n\nTITLE: Migrating withRef to forwardRef React\nDESCRIPTION: This snippet illustrates how to migrate from using `withRef` in `injectIntl` to `forwardRef` in React Intl v3. It highlights how `forwardRef` simplifies accessing the underlying component instance.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/website/docs/react-intl/upgrade-guide-3.x.md#_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from 'react'\nimport {injectIntl} from 'react-intl'\n\nclass MyComponent extends React.Component {\n  doSomething = () => console.log(this.state || null)\n\n  render() {\n    return <div>Hello World</div>\n  }\n}\n\nexport default injectIntl(MyComponent, {forwardRef: true})\n\n// somewhere else\nclass Parent extends React.Component {\n  myComponentRef = React.createRef()\n\n  componentDidMount() {\n    this.myComponentRef.doSomething() // no need to call getWrappedInstance()\n  }\n\n  render() {\n    return <MyComponent ref={this.myComponentRef} />\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using useIntl Hook vs injectIntl HOC React\nDESCRIPTION: This snippet compares using the `useIntl` hook with the `injectIntl` HOC for accessing the `intl` instance in React Intl v3. It demonstrates the syntax for both methods and highlights the hook's simplicity for functional components.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/website/docs/react-intl/upgrade-guide-3.x.md#_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n// injectIntl\nimport {injectIntl} from 'react-intl'\n\nconst MyComponentWithHOC = injectIntl(({intl, ...props}) => {\n  // do something\n})\n\n// useIntl\nimport {useIntl} from 'react-intl'\n\nconst MyComponentWithHook = props => {\n  const intl = useIntl()\n\n  // do something\n}\n```\n\n----------------------------------------\n\nTITLE: Turning On Isolated Declarations and Specifying Explicit Types (TypeScript)\nDESCRIPTION: This code snippet enables isolated declarations and enforces explicit type annotations throughout the project. This ensures better type safety and improves the overall maintainability of the codebase.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/intl-messageformat/CHANGELOG.md#_snippet_6\n\nLANGUAGE: TypeScript\nCODE:\n```\nturn on isolatedDeclarations and specify explicit types everywhere\n```\n\n----------------------------------------\n\nTITLE: Cleaning up tsbuildinfo before full build\nDESCRIPTION: This commit cleans up the `tsbuildinfo` files before a full build. This ensures a clean build process and avoids potential issues caused by stale or outdated TypeScript build information.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/cli-lib/CHANGELOG.md#_snippet_37\n\nLANGUAGE: TEXT\nCODE:\n```\nclean up tsbuildinfo before full build ([c301ca0](https://github.com/formatjs/formatjs/commit/c301ca02e0c319a0eb03921533053f0334ae5df1))\n```\n\n----------------------------------------\n\nTITLE: Bumping Minimum React Version - React Intl\nDESCRIPTION: Bumps the minimum required React version to 16.6.0.  This is necessary to support certain features or bug fixes in react-intl.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/react-intl/CHANGELOG.md#_snippet_11\n\n\n\n----------------------------------------\n\nTITLE: FormattedRelative UpdateInterval Migration React\nDESCRIPTION: Demonstrates the migration of FormattedRelative updateInterval from v2 to FormattedRelativeTime in v3.  Shows the refactor on time delta in seconds.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/website/docs/react-intl/upgrade-guide-3.x.md#_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\n<FormattedRelativeTime\n  value={2}\n  numeric=\"auto\"\n  unit=\"second\"\n  style=\"narrow\"\n  updateIntervalInSeconds={1}\n/>\n// Initially prints: `in 2s`\n// 1 second later: `in 1s`\n// 1 second later: `now`\n// 1 second later: `1s ago`\n// 60 seconds later: `1m ago`\n```\n\n----------------------------------------\n\nTITLE: Ignoring Config File in JavaScript\nDESCRIPTION: This commit resolves an issue where the config file was not being properly ignored by `@formatjs/cli`, as reported in issue #631. The fix ensures that the specified config file is correctly ignored during CLI operations.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/cli/CHANGELOG.md#_snippet_49\n\nLANGUAGE: JavaScript\nCODE:\n```\n**@formatjs/cli:** ignore configFile, fix [#631](https://github.com/formatjs/formatjs/issues/631) ([ff09a5f](https://github.com/formatjs/formatjs/commit/ff09a5f9290c054badd4fbdd03c7ee8af5681bd0))\n```\n\n----------------------------------------\n\nTITLE: Supporting TS4.2 in Intl-MessageFormat\nDESCRIPTION: This commit adds support for TypeScript version 4.2 to intl-messageformat. The update ensures that the package is compatible with the latest TypeScript features and improvements. This allows developers to leverage new TypeScript capabilities.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/intl-messageformat/CHANGELOG.md#_snippet_26\n\nLANGUAGE: diff\nCODE:\n```\nfdacd6fda410e00818c2802a97ac72dab1bf8e62\n```\n\n----------------------------------------\n\nTITLE: Adding --throws option to @formatjs/cli\nDESCRIPTION: This commit adds the `--throws` option to `@formatjs/cli`. This option allows users to prevent the CLI from throwing errors when processing a single file. The commit hash is 75399368f6ddd591b3fbe9c3ed6d9a30bea3586f.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/babel-plugin-formatjs/CHANGELOG.md#_snippet_13\n\n\n\n----------------------------------------\n\nTITLE: Drop Node Requirement to 16\nDESCRIPTION: This bug fix lowers the minimum required Node.js version for @formatjs/cli to 16. This makes the CLI accessible to users who are still using Node.js 16, broadening the user base.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/cli/CHANGELOG.md#_snippet_15\n\n\n\n----------------------------------------\n\nTITLE: Fixing MemoizedFormattedMessage Type - React Intl\nDESCRIPTION: This bug fix explicitly sets the type of `MemoizedFormattedMessage` to address type-related issues.  This ensures type safety and prevents potential runtime errors.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/react-intl/CHANGELOG.md#_snippet_2\n\n\n\n----------------------------------------\n\nTITLE: Move IntlFormatter type parameters to methods in formatjs\nDESCRIPTION: This commit moves the IntlFormatter type parameters to methods within the @formatjs/intl and react-intl packages. This change aims to improve type safety and flexibility when working with internationalization formatters.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/intl-messageformat/CHANGELOG.md#_snippet_9\n\n\n\n----------------------------------------\n\nTITLE: Adding --output-empty-json option\nDESCRIPTION: This commit adds the `--output-empty-json` option to `@formatjs/cli`. When specified, the CLI tool will output an empty JSON file even if no messages are found during extraction.  This can be useful for initializing translation files.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/cli-lib/CHANGELOG.md#_snippet_44\n\nLANGUAGE: TEXT\nCODE:\n```\n**@formatjs/cli:** add --output-empty-json option ([3106618](https://github.com/formatjs/formatjs/commit/3106618cbcb14eb7b1c63084b47b16a80737092d))\n```\n\n----------------------------------------\n\nTITLE: Fixing UMD bundle in @formatjs/intl-getcanonicallocales\nDESCRIPTION: This commit resolves an issue with the UMD (Universal Module Definition) bundle of the @formatjs/intl-getcanonicallocales package. The fix ensures that the bundle is correctly formatted and can be used in various environments, including browsers and Node.js.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/intl-getcanonicallocales/CHANGELOG.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n**@formatjs/intl-getcanonicallocales:** fix UMD bundle ([c0362f5](https://github.com/formatjs/formatjs/commit/c0362f5243e663d1ac4efb011e8b4919d9dec1c1))\n```\n\n----------------------------------------\n\nTITLE: Package CLI into a single file in formatjs\nDESCRIPTION: This feature packages the @formatjs/cli command-line interface into a single file.  This simplifies distribution and usage of the CLI tool.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/intl-messageformat/CHANGELOG.md#_snippet_13\n\n\n\n----------------------------------------\n\nTITLE: formatRelative() Argument Restructuring (New)\nDESCRIPTION: Illustrates the updated `formatRelative()` function call, now requiring all options, including the 'now' reference time, to be within a single options object.  `this.props.intl` represents access to the intl object injected by React Intl.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/website/docs/react-intl/upgrade-guide-2.x.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nlet relative = this.props.intl.formatRelative(date, {\n  units: 'hour',\n  now: otherDate,\n})\n```\n\n----------------------------------------\n\nTITLE: Updating @types/node dependency to v20\nDESCRIPTION: This commit updates the dependency `@types/node` to version 20, associated with issue #4617 in the formatjs/formatjs repository. Keeping type definitions up to date helps ensure compatibility with newer Node.js features and avoids potential type-related errors.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/ts-transformer/CHANGELOG.md#_snippet_5\n\nLANGUAGE: Markdown\nCODE:\n```\n* **deps:** update dependency @types/node to v20 ([#4617](https://github.com/formatjs/formatjs/issues/4617)) ([80f8055](https://github.com/formatjs/formatjs/commit/80f80559989b7f4549f20ad9ebfa90e838c8b2ac)) - by @renovate[bot]\n```\n\n----------------------------------------\n\nTITLE: Fix Fast Memoize Import - TypeScript\nDESCRIPTION: This bug fix addresses an issue with the fast-memoize import in `@formatjs/intl`.  The fix ensures that the memoization library is correctly imported, preventing runtime errors related to missing dependencies. The related commits are 2738741fb9b0d442fe2f1ad0b335c2436d8bc579 and d1a45094a130107e019ce12e5038baf2febf397f.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/intl/CHANGELOG.md#_snippet_18\n\n\n\n----------------------------------------\n\nTITLE: Bug Fix for React 18 Typing Issue\nDESCRIPTION: This snippet addresses a bug in react-intl that caused a type issue when used with React 18. The fix ensures compatibility with React 18 by resolving the typing issue. It also closes issue #3550.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/editor/CHANGELOG.md#_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\n* **react-intl:** fix type issue with react18, fix [#3550](https://github.com/formatjs/formatjs/issues/3550) ([2567b93](https://github.com/formatjs/formatjs/commit/2567b932c5d18b097a43842563046c20ce0c49f1))\n```\n\n----------------------------------------\n\nTITLE: Configure rollup-plugin-typescript2 with @formatjs/ts-transformer\nDESCRIPTION: Configures rollup-plugin-typescript2 to use the @formatjs/ts-transformer. This involves setting up a custom transformer that overrides the ID function for formatjs messages during the Rollup build process.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/website/docs/getting-started/installation.md#_snippet_15\n\nLANGUAGE: ts\nCODE:\n```\n// rollup.config.js\nimport typescript from 'rollup-plugin-typescript2'\nimport {transform} from '@formatjs/ts-transformer'\n\nexport default {\n  input: './main.ts',\n\n  plugins: [\n    typescript({\n      transformers: () => ({\n        before: [\n          transform({\n            overrideIdFn: '[sha512:contenthash:base64:6]',\n            ast: true,\n          }),\n        ],\n      }),\n    }),\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: Removing --extract-from-format-message-call in @formatjs/cli (Feature/Breaking Change)\nDESCRIPTION: This commit removes the `--extract-from-format-message-call` option from @formatjs/cli. This option has been enabled by default for some time, and this change makes it permanent and removes the flag itself. This is a breaking change if users were relying on disabling this option.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/cli-lib/CHANGELOG.md#_snippet_12\n\n\n\n----------------------------------------\n\nTITLE: Rich text formatting callback After (v5)\nDESCRIPTION: Illustrates the updated approach to rich text formatting callbacks in FormatJS v5. The callback function for the `b` tag now receives a single argument, `chunks`, which represents an array of formatted text fragments.  This non-variadic approach is now required.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/website/docs/react-intl/upgrade-guide-5.x.md#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nnew IntlMessageFormat('a<b>strong</b>').format({\n  b: chunks => <strong>{chunks}</strong>,\n})\n```\n\n----------------------------------------\n\nTITLE: Removing Unnecessary Imports & Fixing Issue\nDESCRIPTION: This commit removes unnecessary imports from the eslint-plugin-formatjs, addressing issue #2756. This simplifies the plugin's code and reduces its size. The commit hash is 8920a6aab10bb2c8bbdf40aa41229af66e3810fe.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/eslint-plugin-formatjs/CHANGELOG.md#_snippet_7\n\nLANGUAGE: Markdown\nCODE:\n```\n* **eslint-plugin-formatjs:** rm unnecessary imports, fix [#2756](https://github.com/formatjs/formatjs/issues/2756) ([8920a6a](https://github.com/formatjs/formatjs/commit/8920a6aab10bb2c8bbdf40aa41229af66e3810fe))\n```\n\n----------------------------------------\n\nTITLE: Feature: Upgrade cldr to v46\nDESCRIPTION: This commit upgrades the CLDR (Common Locale Data Repository) version to v46. This brings the package up-to-date with the latest locale data, ensuring accurate localization and internationalization support.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/intl-locale/CHANGELOG.md#_snippet_3\n\n\n\n----------------------------------------\n\nTITLE: Generate modern web bundle for intl-messageformat\nDESCRIPTION: This feature generates a modern web bundle (`intl-messageformat.esm.js`) for the `intl-messageformat` package. This provides a more efficient and optimized bundle for modern web environments.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/intl-messageformat/CHANGELOG.md#_snippet_20\n\n\n\n----------------------------------------\n\nTITLE: Fix: Move Currency Processing to Lazy Loading (JavaScript)\nDESCRIPTION: This commit optimizes the package by moving currency processing to lazy loading, potentially improving initial load times and performance.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/intl-listformat/CHANGELOG.md#_snippet_37\n\nLANGUAGE: JavaScript\nCODE:\n```\n**@formatjs/intl-unified-numberformat:** move currency processing to lazy ([6e1d621](https://github.com/formatjs/formatjs/commit/6e1d62189373dc4fdf71614c78a353f96e28c8ed))\n```\n\n----------------------------------------\n\nTITLE: Making idInterpolationPattern Optional in enforce-id ESLint Rule\nDESCRIPTION: This commit makes the `idInterpolationPattern` option optional in the `enforce-id` ESLint rule. When the pattern is not provided, the rule behaves in a more permissive way, allowing for greater flexibility in message ID formatting. This addresses issue #2263.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/eslint-plugin-formatjs/CHANGELOG.md#_snippet_14\n\nLANGUAGE: N/A\nCODE:\n```\n6289c28acf7671ee8ed08f73d3b72dc73522dc18\n```\n\n----------------------------------------\n\nTITLE: Implementing Intl.Locale proposal features - JavaScript\nDESCRIPTION: This commit implements new proposal features for `Intl.Locale`, enabling enhanced locale handling within the @formatjs/intl-locale package.  These features likely expand the capabilities of `Intl.Locale` for tasks such as language negotiation, script identification, and variant handling.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/intl-enumerator/CHANGELOG.md#_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n**@formatjs/intl-locale:** implement new proposal features for Intl.Locale ([#3955](https://github.com/formatjs/formatjs/issues/3955)) ([984f923](https://github.com/formatjs/formatjs/commit/984f923f298c578d7c138ca5ad9f12965d73a7d0))\n```\n\n----------------------------------------\n\nTITLE: Adding en-XB pseudo locale in @formatjs/cli (Feature)\nDESCRIPTION: This commit introduces a new pseudo locale, `en-XB`, to the @formatjs/cli. Pseudo locales are useful for testing internationalization support by automatically generating translated versions of an application with specific character transformations.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/cli-lib/CHANGELOG.md#_snippet_7\n\n\n\n----------------------------------------\n\nTITLE: Upgrading TypeScript support to v5\nDESCRIPTION: This commit upgrades TypeScript support to version 5. This ensures that the package is compatible with the latest TypeScript features and improvements, allowing developers to leverage new language features and benefit from enhanced type checking.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/intl-displaynames/CHANGELOG.md#_snippet_12\n\nLANGUAGE: plaintext\nCODE:\n```\nupgrade TS support to v5\n```\n\n----------------------------------------\n\nTITLE: Supporting Union Component Prop Types - React Intl\nDESCRIPTION: This bug fix supports union component prop types in `injectIntl`.  This allows for more flexible prop type definitions and improves the developer experience.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/react-intl/CHANGELOG.md#_snippet_6\n\n\n\n----------------------------------------\n\nTITLE: Formatting Message with Vue's $formatMessage (Vue)\nDESCRIPTION: This snippet demonstrates how to use the `$formatMessage` method (or similar template methods like `$formatNumber`) within a Vue template. It assumes that the `formatjs` integration for Vue provides these methods. This example specifically uses `$formatNumber` to format a number as currency.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/website/docs/getting-started/message-declaration.md#_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <p>{{ $formatNumber(3, {style: 'currency', currency: 'USD'}) }}</p>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Fixing ID Generation with Undefined Description in JavaScript\nDESCRIPTION: This commit addresses a bug where ID generation would fail in `@formatjs/cli` when the description field was undefined. The fix ensures that IDs are generated correctly even when the description is missing.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/cli/CHANGELOG.md#_snippet_48\n\nLANGUAGE: JavaScript\nCODE:\n```\n**@formatjs/cli:** fix ID generation when description is undefined ([a31c2f2](https://github.com/formatjs/formatjs/commit/a31c2f2c20fd76d72ec77e987d666706be52fe6c))\n```\n\n----------------------------------------\n\nTITLE: Polyfill Intl.getCanonicalLocales via polyfill-fastly.io\nDESCRIPTION: This snippet demonstrates how to use the polyfill-fastly.io service to include a polyfill for Intl.GetCanonicalLocales. The script tag fetches a polyfill bundle that includes Intl.GetCanonicalLocales and any necessary dependencies, ensuring that the functionality is available in older browsers.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/website/docs/polyfills/intl-getcanonicallocales.md#_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<!-- Polyfill Intl.GetCanonicalLocales & its dependencies -->\n<script src=\"https://polyfill-fastly.io/v3/polyfill.min.js?features=Intl.GetCanonicalLocales\"></script>\n```\n\n----------------------------------------\n\nTITLE: formatDate usage example (React Intl)\nDESCRIPTION: Provides a live example of how to use the `formatDate` function to format the current date with year, month, and day specified. It showcases a common use case for date formatting using the `intl` object.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/website/docs/react-intl/api.md#_snippet_5\n\nLANGUAGE: ts\nCODE:\n```\nintl.formatDate(Date.now(), {\n  year: 'numeric',\n  month: 'numeric',\n  day: 'numeric',\n})\n```\n\n----------------------------------------\n\nTITLE: Setting textComponent in IntlProvider React\nDESCRIPTION: This snippet demonstrates how to explicitly set the `textComponent` prop in `IntlProvider` to `span` to maintain the old behavior after the default was changed to `React.Fragment` in React Intl v3. This ensures compatibility and prevents unintended layout changes.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/website/docs/react-intl/upgrade-guide-3.x.md#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n<IntlProvider textComponent=\"span\" />\n```\n\n----------------------------------------\n\nTITLE: Adding support for pragma in @formatjs/cli\nDESCRIPTION: This commit adds support for pragma in `@formatjs/cli`. This allows users to specify a custom pragma for marking internationalized messages in their code, providing more flexibility in how messages are extracted and processed.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/cli-lib/CHANGELOG.md#_snippet_39\n\nLANGUAGE: TEXT\nCODE:\n```\n**@formatjs/cli:** add support for pragma ([b6c8352](https://github.com/formatjs/formatjs/commit/b6c8352f5181bcb1adbb520cca01191527bc20bb))\n```\n\n----------------------------------------\n\nTITLE: Polyfill Intl.NumberFormat and Intl.PluralRules via polyfill-fastly.io\nDESCRIPTION: This HTML snippet demonstrates how to include the Intl.NumberFormat polyfill, its dependencies, and locale data (e.g., 'en') using polyfill-fastly.io. In this instance, it additionally includes Intl.PluralRules as a required polyfill.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/website/docs/polyfills/intl-numberformat.md#_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<!-- Polyfill Intl.NumberFormat, its dependencies & `en` locale data -->\n<script src=\"https://polyfill-fastly.io/v3/polyfill.min.js?features=Intl.NumberFormat,Intl.NumberFormat.~locale.en,Intl.PluralRules.~locale.en\"></script>\n```\n\n----------------------------------------\n\nTITLE: Adding Ref to Component in Test\nDESCRIPTION: This snippet demonstrates how to add a ref to the component being tested within the `IntlProvider`. The `React.createRef()` and passing the ref to `MyComponent` enables accessing the underlying `MyComponent` instance. The ref is then passed to the wrapped component.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/website/docs/guides/testing-with-react-intl.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst element = React.createRef()\nReactTestUtils.renderIntoDocument(\n  <IntlProvider>\n    <MyComponent ref={element} />\n  </IntlProvider>\n)\n```\n\n----------------------------------------\n\nTITLE: Adding polyfill detector and docs for DurationFormat\nDESCRIPTION: This commit introduces a polyfill detector and associated documentation for the Intl.DurationFormat functionality. This improvement helps developers determine if a polyfill is required in their environment and provides guidance on its usage.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/intl-relativetimeformat/CHANGELOG.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n@formatjs/intl-durationformat: add polyfill detector + docs\n```\n\n----------------------------------------\n\nTITLE: Compile with Custom Formatter (npm)\nDESCRIPTION: This shell command uses `npm run compile` to compile translated messages with a custom formatter. It specifies the input file, enables AST compilation, sets the output file, and specifies the formatter file (`formatter.js`) using the `--format` flag.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/website/docs/getting-started/message-distribution.md#_snippet_5\n\nLANGUAGE: Shell\nCODE:\n```\nnpm run compile -- lang/fr.json --ast --out-file compiled-lang/fr.json --format formatter.js\n```\n\n----------------------------------------\n\nTITLE: Fixing Fast-Glob Path Join in @formatjs/cli\nDESCRIPTION: This commit addresses a bug related to path joining when using fast-glob in @formatjs/cli. It fixes the incorrect path resolution, ensuring that files are correctly located during the extraction process. The commit hash is fca70bec380569bf92553d884e226aa26a610267.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/cli-lib/CHANGELOG.md#_snippet_23\n\n\n\n----------------------------------------\n\nTITLE: Define Messages Function\nDESCRIPTION: Defines the `defineMessages` function, which takes a record of `MessageDescriptor` objects and returns the same record. This function is a hook for the CLI and Babel/TS plugin to extract default messages defined in JavaScript source files.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/website/docs/intl.md#_snippet_30\n\nLANGUAGE: ts\nCODE:\n```\nfunction defineMessages(\n  messageDescriptors: Record<string, MessageDescriptor>\n): Record<string, MessageDescriptor>\n```\n\n----------------------------------------\n\nTITLE: Bumping tslib Version Dependency - Javascript\nDESCRIPTION: This commit updates the tslib version dependency. The purpose of this update is to ensure compatibility and resolve any potential issues related to TypeScript helpers. Addresses issue #2645.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/intl-locale/CHANGELOG.md#_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\nbump tslib version dep ([37577d2](https://github.com/formatjs/formatjs/commit/37577d22bf28d23de1d8013ba0047cf221ad8840)), closes [#2645](https://github.com/formatjs/formatjs/issues/2645)\n```\n\n----------------------------------------\n\nTITLE: Renaming Babel Plugin for Formatjs\nDESCRIPTION: The `babel-plugin-react-intl` has been renamed to `babel-plugin-formatjs`. This reflects a shift in the project's naming conventions. Users should update their babel configuration to reflect the new name.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/cli/CHANGELOG.md#_snippet_32\n\nLANGUAGE: plaintext\nCODE:\n```\n**babel-plugin-formatjs:** rename babel-plugin-react-intl to babel-plugin-formatjs ([c9357b7](https://github.com/formatjs/formatjs/commit/c9357b7968c3c7e5c9335ff0058e47da0cb5c6c7))\n```\n\n----------------------------------------\n\nTITLE: Format Display Name Function Definition\nDESCRIPTION: Defines the `formatDisplayName` function that takes a value (string, number, or record) and `FormatDisplayNameOptions` and returns a formatted display name or undefined. It utilizes the `Intl.DisplayNames` API to format names based on the specified options.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/website/docs/intl.md#_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\nfunction formatDisplayName(\n  value: string | number | Record<string, unknown>,\n  options: FormatDisplayNameOptions\n): string | undefined\n```\n\n----------------------------------------\n\nTITLE: Escaping Apostrophe Example with IcuEditor\nDESCRIPTION: This example shows how to escape a single apostrophe within a string by using two consecutive ASCII apostrophes. It highlights the recommended use of curly apostrophes for human-readable text, reserving ASCII apostrophes for ICU syntax.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/website/docs/core-concepts/icu-syntax.mdx#_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\n<IcuEditor defaultMessage=\"This '{isn''t}' obvious.\" />\n```\n\n----------------------------------------\n\nTITLE: Fixing Unescaping in Parser Printer\nDESCRIPTION: This snippet represents a bug fix in the `@formatjs/icu-messageformat-parser` package. The fix addresses an issue related to unescaping in the parser printer, specifically resolving issue #3870. This ensures that characters are correctly unescaped during the parsing process.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/icu-messageformat-parser/CHANGELOG.md#_snippet_5\n\n\n\n----------------------------------------\n\nTITLE: IntlMessageFormat Plural Formatting (en-US)\nDESCRIPTION: Illustrates plural formatting in English (US locale) using `IntlMessageFormat`. The message string includes pluralization rules based on the `numPhotos` variable, ensuring correct grammatical agreement in the output.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/website/docs/intl-messageformat.md#_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nnew IntlMessageFormat(\n  `{numPhotos, plural,\n      =0 {You have no photos.}\n      =1 {You have one photo.}\n      other {You have # photos.}\n    }`,\n  'en-US'\n).format({numPhotos: 1000})\n```\n\n----------------------------------------\n\nTITLE: Adding missing dependency to babel-plugin-react-intl with Babel\nDESCRIPTION: This commit adds a missing dependency to `babel-plugin-react-intl`, addressing issue #586. The addition of this dependency resolves a potential runtime or build-time error caused by the absence of a required module. The commit hash is 14195267916f15ba2f4f0635c519797efeef9fb5.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/babel-plugin-formatjs/CHANGELOG.md#_snippet_15\n\n\n\n----------------------------------------\n\nTITLE: Formatting ordinal plural using formatPlural (2)\nDESCRIPTION: This example demonstrates the usage of `intl.formatPlural` with the ordinal style and a value of 3. This will return the appropriate ordinal plural form.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/website/docs/intl.md#_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nintl.formatPlural(3, {style: 'ordinal'})\n```\n\n----------------------------------------\n\nTITLE: Initial Commit for @formatjs/vue-intl\nDESCRIPTION: This commit represents the initial commit for the `@formatjs/vue-intl` package. It signifies the start of the package's development and the introduction of its core functionality. The commit hash associated with this change is b38177abc079c886d107be0edd71bce9774100e0.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/vue-intl/CHANGELOG.md#_snippet_21\n\n\n\n----------------------------------------\n\nTITLE: Rendering App with IntlProvider - React Intl\nDESCRIPTION: This code shows how to wrap a React application with the `IntlProvider` component from 'react-intl'.  It sets the `locale` prop to \"en\", indicating English as the language, and renders the `<App>` component within the `IntlProvider`. Requires the `react-intl` and `react-dom` packages to be installed.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/website/docs/react-intl/upgrade-guide-2.x.md#_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport ReactDOM from 'react-dom'\nimport {IntlProvider} from 'react-intl'\n\nReactDOM.render(\n  <IntlProvider locale=\"en\">\n    <App />\n  </IntlProvider>,\n  document.getElementById('container')\n)\n```\n\n----------------------------------------\n\nTITLE: Parsing ICU Message with TypeScript\nDESCRIPTION: This snippet demonstrates how to use the `@formatjs/icu-messageformat-parser` package to parse an ICU Message string into an AST using the `parse` function. The input is an ICU message string with a plural selector. The output is the AST representation of the message.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/website/docs/icu-messageformat-parser.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {parse} from '@formatjs/icu-messageformat-parser'\nconst ast = parse(`this is {count, plural, \n  one{# dog} \n  other{# dogs}\n}`)\n```\n\n----------------------------------------\n\nTITLE: Fixing pseudo locale compilation for tag element in @formatjs/cli (Bug Fix)\nDESCRIPTION: This commit fixes an issue where pseudo locale compilation was not working correctly for tag elements in the @formatjs/cli tool. This ensures that pseudo-localized versions of applications render correctly, aiding in internationalization testing.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/cli-lib/CHANGELOG.md#_snippet_4\n\n\n\n----------------------------------------\n\nTITLE: Preprocess 'j' date time skeleton in icu-messageformat-parser\nDESCRIPTION: This feature preprocesses the 'j' date time skeleton before parsing it in the @formatjs/icu-messageformat-parser package. This is done according to the Unicode guide, ensuring correct parsing of this date time skeleton.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/intl-messageformat/CHANGELOG.md#_snippet_14\n\n\n\n----------------------------------------\n\nTITLE: ICU MessageFormat conflict workaround\nDESCRIPTION: This snippet demonstrates a workaround for a parsing issue caused by conflicts between ICU MessageFormat syntax and Vue template syntax (`{{` and `}}`). By adding spaces to turn `}}` into `} }`, the parsing issue is resolved.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/website/docs/vue-intl.md#_snippet_5\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <p>\n    {{\n      $formatMessage({\n        defaultMessage:\n          '{count, selectordinal, offset:1 one {#} other {# more} }',\n      })\n    }}\n  </p>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Feature: Upgrade CLDR to v45 in TypeScript\nDESCRIPTION: This commit upgrades the CLDR dependency to version 45. This ensures the package utilizes the latest locale data, enhancing its internationalization capabilities.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/intl-segmenter/CHANGELOG.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nupgrade cldr to v45 ([#4620](https://github.com/formatjs/formatjs/issues/4620)) ([fbb2bbf](https://github.com/formatjs/formatjs/commit/fbb2bbf6e038d5833c1f2752b805002436480948))\n```\n\n----------------------------------------\n\nTITLE: Moving IntlFormatter Type Parameters to Methods\nDESCRIPTION: Refactors IntlFormatter to move type parameters to methods.  This enhances the flexibility and type safety of the IntlFormatter API.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/react-intl/CHANGELOG.md#_snippet_8\n\n\n\n----------------------------------------\n\nTITLE: Upgrading Typescript version to 4.0 for formatjs/intl\nDESCRIPTION: This commit updates the TypeScript version used by @formatjs/intl to 4.0. This upgrade likely introduces new type checking features and improvements for the package's TypeScript definitions.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/intl/CHANGELOG.md#_snippet_23\n\nLANGUAGE: Diff\nCODE:\n```\n### Features\n\n* **@formatjs/intl:** TS to 4.0 ([a334a8f](https://github.com/formatjs/formatjs/commit/a334a8fe1a2c6c93fe21aabbf204cd3c9c9eee4a))\n```\n\n----------------------------------------\n\nTITLE: Fixing Programmatic Extraction Without ID Interpolation Pattern\nDESCRIPTION: This commit fixes an issue where calling the extract function programmatically without specifying an idInterpolationPattern would cause an error. The fix ensures that the extraction process works correctly even when the idInterpolationPattern is not provided explicitly. The commit hash is cb904cfbefa27db778313a39fb14b9cdf147d58b.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/cli-lib/CHANGELOG.md#_snippet_16\n\n\n\n----------------------------------------\n\nTITLE: Upgrading TypeScript Support to v5 in formatjs\nDESCRIPTION: This commit upgrades the TypeScript support to version 5. This enables the use of new TypeScript features and improvements within the project, and provides better compatibility with the latest TypeScript ecosystem.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/intl-listformat/CHANGELOG.md#_snippet_8\n\nLANGUAGE: Diff\nCODE:\n```\n### Features\n\n* upgrade TS support to v5 ([2c43dc1](https://github.com/formatjs/formatjs/commit/2c43dc1275d7ca940fae80419e3d6e4143bfbfef))\n```\n\n----------------------------------------\n\nTITLE: Configure ESLint to prevent emojis\nDESCRIPTION: This configures ESLint to prevent the use of emojis in messages using the `formatjs/no-emoji` rule. It shows how to prevent all emojis or only emojis above a certain Unicode version.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/website/docs/tooling/linter.md#_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nimport formatjs from 'eslint-plugin-formatjs'\n\nexport default [\n  {\n    plugins: {\n      formatjs,\n    },\n    rules: {\n      'formatjs/no-emoji': ['error'],\n    },\n  },\n\n  // OR\n  {\n    plugins: {\n      formatjs,\n    },\n    rules: {\n      'formatjs/no-emoji': ['error', {versionAbove: '12.0'}],\n    },\n  },\n]\n```\n\n----------------------------------------\n\nTITLE: Packaging CLI into a Single File\nDESCRIPTION: This commit packages the @formatjs/cli into a single, self-contained file. This change simplifies the distribution and usage of the CLI tool. It also closes issue #3547, addressing the need for a more streamlined CLI packaging process.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/intl-pluralrules/CHANGELOG.md#_snippet_8\n\nLANGUAGE: JavaScript\nCODE:\n```\n1760787\n```\n\n----------------------------------------\n\nTITLE: Fixing README Link for @formatjs/vue-intl\nDESCRIPTION: This commit fixes the link to the README file for the `@formatjs/vue-intl` package. This correction ensures that users can easily access the package's documentation. The commit hash associated with this change is 42a861b0c240067c9b3aab2f96d904b8417498af.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/vue-intl/CHANGELOG.md#_snippet_19\n\n\n\n----------------------------------------\n\nTITLE: IntlShape Generic Default - TypeScript\nDESCRIPTION: This bug fix addresses issue #2821 by making the `IntlShape` generic default to `string`.  This change improves the default type inference for `IntlShape`, reducing the need for explicit type annotations. The related commit is 08d48f297529ef276f8991bc40c8e864dbd18c5b.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/intl/CHANGELOG.md#_snippet_19\n\n\n\n----------------------------------------\n\nTITLE: Fix Polyfill Detection in Intl-Locale - Javascript\nDESCRIPTION: This commit implements a try-catch block for polyfill detection in @formatjs/intl-locale. This is to prevent errors when a certain polyfill is not available. Addresses issue #2423.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/intl-locale/CHANGELOG.md#_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\n**@formatjs/intl-locale:** try catch polyfill detection, fix [#2423](https://github.com/formatjs/formatjs/issues/2423) ([945a869](https://github.com/formatjs/formatjs/commit/945a869dfe63c623d186914eda62426a6dbfd713))\n```\n\n----------------------------------------\n\nTITLE: Pruning Location by Default in ICU Parser\nDESCRIPTION: This commit configures the @formatjs/icu-messageformat-parser to prune location data by default. This reduces the size of the parsed output and improves performance when location information is not needed.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/icu-messageformat-parser/CHANGELOG.md#_snippet_21\n\nLANGUAGE: diff\nCODE:\n```\nFeatures\n\n* **@formatjs/icu-messageformat-parser:** prune location by default ([78d3558](https://github.com/formatjs/formatjs/commit/78d35580ccd31f143bc1f3884326ecfe234c6929))\n```\n\n----------------------------------------\n\nTITLE: Move IntlFormatter type parameters\nDESCRIPTION: Moves IntlFormatter type parameters to methods in @formatjs/intl and react-intl packages. This commit updates the way type parameters are handled within the IntlFormatter, making them accessible at the method level rather than the class level.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/vue-intl/CHANGELOG.md#_snippet_8\n\n\n\n----------------------------------------\n\nTITLE: FormattedMessage render prop After (v5)\nDESCRIPTION: Demonstrates the updated `FormattedMessage` render prop signature in FormatJS v5. The render prop function now receives a single argument, `chunks`, which represents an array of formatted text fragments. This is the required signature in v5.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/website/docs/react-intl/upgrade-guide-5.x.md#_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n<FormattedMessage defaultMessage=\"a<b>strong</b>\">\n  {chunks => <b>{chunks}</b>}\n</FormattedMessage>\n```\n\n----------------------------------------\n\nTITLE: Adding Debugging Info to Extraction in @formatjs/cli\nDESCRIPTION: This commit introduces more debugging information during the extraction process within @formatjs/cli. This enhancement assists in identifying and resolving issues related to message extraction. The commit hash is 20b832e9e778aa4d115c4bcb154dd7bb412a6b7d.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/cli-lib/CHANGELOG.md#_snippet_20\n\n\n\n----------------------------------------\n\nTITLE: Removing file restrictions from package.json in @formatjs/intl-displaynames\nDESCRIPTION: This commit removes unnecessary file restrictions from the package.json file of @formatjs/intl-displaynames. This adjustment likely allows for more flexibility in how the package's files are included in projects and can resolve issues related to file access.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/intl-displaynames/CHANGELOG.md#_snippet_32\n\nLANGUAGE: Diff\nCODE:\n```\nb89a780\n```\n\n----------------------------------------\n\nTITLE: Enabling isolatedDeclarations and specifying explicit types\nDESCRIPTION: This commit enables `isolatedDeclarations` and specifies explicit types throughout the codebase. This change enhances type safety and improves the overall maintainability of the ts-transformer package.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/ts-transformer/CHANGELOG.md#_snippet_2\n\nLANGUAGE: Markdown\nCODE:\n```\n* turn on isolatedDeclarations and specify explicit types everywhere ([4d855c2](https://github.com/formatjs/formatjs/commit/4d855c2324426633eb84c346c76a5fd1ac854780)) - by @longlho\n```\n\n----------------------------------------\n\nTITLE: Polyfill Intl.Locale via polyfill-fastly.io\nDESCRIPTION: This HTML snippet demonstrates how to polyfill Intl.Locale using polyfill-fastly.io.  This service provides polyfills based on browser features. Including this script tag in your HTML ensures that Intl.Locale is available, even in older browsers.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/website/docs/polyfills/intl-locale.md#_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<!-- Polyfill Intl.Locale & its dependencies -->\n<script src=\"https://polyfill-fastly.io/v3/polyfill.min.js?features=Intl.Locale\"></script>\n```\n\n----------------------------------------\n\nTITLE: Formatting number as unit using formatNumber (2)\nDESCRIPTION: This example formats a number with a unit of 'fahrenheit' and a long display style using `intl.formatNumber`. Requires ES2020 NumberFormat polyfill for broader support.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/website/docs/intl.md#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nintl.formatNumber(1000, {\n  unit: 'fahrenheit',\n  unitDisplay: 'long',\n  style: 'unit',\n})\n```\n\n----------------------------------------\n\nTITLE: Install @formatjs/intl-locale with npm\nDESCRIPTION: This command installs the @formatjs/intl-locale package using npm. This allows you to use Intl.Locale in your JavaScript projects, even in environments that don't natively support it.  It adds the package to your project's dependencies.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/website/docs/polyfills/intl-locale.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm i @formatjs/intl-locale\n```\n\n----------------------------------------\n\nTITLE: Bug Fix: turn on isolatedDeclarations and specify explicit types\nDESCRIPTION: This commit enables `isolatedDeclarations` in the TypeScript configuration and enforces explicit type annotations throughout the codebase. This enhances code maintainability and reduces the risk of implicit type errors.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/intl-locale/CHANGELOG.md#_snippet_0\n\n\n\n----------------------------------------\n\nTITLE: Follow Vue.js 3 plugin conventions\nDESCRIPTION: The `vue-intl` package is updated to follow Vue.js 3 plugin conventions, addressing issue #2891 and closing #2889. This removes the default export from the plugin and exposes `createIntl` instead to align with Vue 3 plugin conventions.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/vue-intl/CHANGELOG.md#_snippet_15\n\n\n\n----------------------------------------\n\nTITLE: Using polyfill-fastly.io\nDESCRIPTION: Example of using polyfill-fastly.io to include the Intl.Segmenter polyfill in an HTML document.  This approach dynamically loads the polyfill if the browser does not natively support the Intl.Segmenter API.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/website/docs/polyfills/intl-segmenter.md#_snippet_2\n\nLANGUAGE: HTML\nCODE:\n```\n<!-- Polyfill Intl.Segmenter-->\n<script src=\"https://polyfill-fastly.io/v3/polyfill.min.js?features=Intl.Segmenter\"></script>\n```\n\n----------------------------------------\n\nTITLE: Import @formatjs/intl-enumerator polyfill (Simple)\nDESCRIPTION: This code snippet demonstrates how to import the @formatjs/intl-enumerator polyfill directly, ensuring Intl.supportedValuesOf is available in the environment.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/website/docs/polyfills/intl-supportedvaluesof.md#_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport '@formatjs/intl-enumerator/polyfill'\n```\n\n----------------------------------------\n\nTITLE: Supporting preserving whitespace and newlines in @formatjs/cli (Feature)\nDESCRIPTION: This commit introduces support for preserving whitespace and newlines in the @formatjs/cli. This feature allows developers to maintain the original formatting of messages during extraction and compilation.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/cli-lib/CHANGELOG.md#_snippet_10\n\n\n\n----------------------------------------\n\nTITLE: Fix Incorrect en-LS Generation\nDESCRIPTION: This bug fix resolves an issue in @formatjs/cli-lib that caused incorrect en-LS locale generation, potentially dropping the last chunk of data. This ensures correct locale data generation and prevents data loss.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/cli/CHANGELOG.md#_snippet_16\n\n\n\n----------------------------------------\n\nTITLE: FormattedRelative Units Migration React\nDESCRIPTION: Demonstrates the migration of FormattedRelative units from v2 to FormattedRelativeTime in v3. Includes changes on how units are defined and styled.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/website/docs/react-intl/upgrade-guide-3.x.md#_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\n<FormattedRelative units=\"second-short\"/>\n// will be\n<FormattedRelativeTime unit=\"second\" style=\"short\"/>\n```\n\n----------------------------------------\n\nTITLE: Removing @formatjs/ecma402-abstract dependency\nDESCRIPTION: This commit removes the `@formatjs/ecma402-abstract` dependency and utilizes native TypeScript Intl type definitions instead. This change likely aims to reduce the package size and rely on the built-in TypeScript support for Intl APIs, simplifying the project's dependencies.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/intl/CHANGELOG.md#_snippet_4\n\nLANGUAGE: diff\nCODE:\n```\n**@formatjs/cli:** remove @formatjs/ecma402-abstract, use native TS Intl typdefs ([3fed5f4](https://github.com/formatjs/formatjs/commit/3fed5f4e8ba7302a0cefbcdf0bf602007fbff614)) - by @longlho\n```\n\n----------------------------------------\n\nTITLE: Fixing NumberFormat types in Intl\nDESCRIPTION: This commit resolves issue #4717 by fixing the type definitions for `NumberFormat` in `@formatjs/intl`. The fix likely involves correcting the TypeScript types associated with NumberFormat options or return values, ensuring accurate type checking and improved developer experience.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/intl/CHANGELOG.md#_snippet_3\n\nLANGUAGE: diff\nCODE:\n```\n**@formatjs/intl:** fix NumberFormat types, fix [#4717](https://github.com/formatjs/formatjs/issues/4717) ([6fad11a](https://github.com/formatjs/formatjs/commit/6fad11a7ecaf3de1464c16f0a4530d5e59dd6cfe)) - by @longlho\n```\n\n----------------------------------------\n\nTITLE: Relaxing tslib requirement to 2 in Intl\nDESCRIPTION: This commit relaxes the `tslib` requirement to version 2 instead of 2.7. This change likely aims to improve compatibility with different project setups and dependency management strategies, potentially resolving conflicts or installation issues related to `tslib` versions.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/intl/CHANGELOG.md#_snippet_7\n\nLANGUAGE: diff\nCODE:\n```\nrelax tslib req to 2 instead of 2.7 ([930c3e8](https://github.com/formatjs/formatjs/commit/930c3e8ddcc160fde7466449575455f135f78ca6)) - by @longlho\n```\n\n----------------------------------------\n\nTITLE: Exporting Modules in vue-intl\nDESCRIPTION: This commit addresses a bug in the vue-intl package by ensuring that it exports the same modules as react-intl. This resolves potential inconsistencies and ensures that the vue-intl package provides the expected functionality, mirroring the react-intl API. The commit hash associated with this change is 9123574129641eef69795147a265c9c291d87da5.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/vue-intl/CHANGELOG.md#_snippet_17\n\n\n\n----------------------------------------\n\nTITLE: Simple Import of Intl.getCanonicalLocales Polyfill (TSX)\nDESCRIPTION: This code snippet shows the simplest way to import the Intl.getCanonicalLocales polyfill.  By importing the polyfill, you augment the global Intl object with the getCanonicalLocales method, if it's not already present.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/website/docs/polyfills/intl-getcanonicallocales.md#_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport '@formatjs/intl-getcanonicallocales/polyfill'\n```\n\n----------------------------------------\n\nTITLE: Jest transformIgnorePatterns Configuration\nDESCRIPTION: Configures Jest's `transformIgnorePatterns` to ensure that React Intl and its related libraries are properly transpiled by Babel. This is required because these libraries export ESM artifacts.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/website/docs/react-intl/upgrade-guide-3.x.md#_snippet_14\n\nLANGUAGE: tsx\nCODE:\n```\n{\n  transformIgnorePatterns: [\n    '/node_modules/(?!intl-messageformat|intl-messageformat-parser).+\\.js$',\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing ESM Conditional Exports\nDESCRIPTION: This commit implements ECMAScript modules (ESM) conditional exports for several @formatjs packages. This enables more efficient module loading and improves compatibility with modern JavaScript environments.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/intl-displaynames/CHANGELOG.md#_snippet_11\n\nLANGUAGE: plaintext\nCODE:\n```\nesm conditional exports ([#4109](https://github.com/formatjs/formatjs/issues/4109))\n```\n\n----------------------------------------\n\nTITLE: Removing React-Intl Package Import Check\nDESCRIPTION: This commit removes the react-intl package import check for function names and components within the eslint-plugin-formatjs. The commit hash is 5c7aeba2d6e281de390b50811691a40e08f8b34d.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/eslint-plugin-formatjs/CHANGELOG.md#_snippet_4\n\nLANGUAGE: Markdown\nCODE:\n```\n* **eslint-plugin-formatjs:** rm react-intl package import check for function names and components ([5c7aeba](https://github.com/formatjs/formatjs/commit/5c7aeba2d6e281de390b50811691a40e08f8b34d))\n```\n\n----------------------------------------\n\nTITLE: Adding Parse Options to Intl MessageFormat\nDESCRIPTION: This snippet describes the addition of support for more parse options in the constructor of `intl-messageformat`. This enhancement likely offers greater flexibility and customization when parsing message formats.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/icu-messageformat-parser/CHANGELOG.md#_snippet_4\n\n\n\n----------------------------------------\n\nTITLE: Message Descriptor Interface\nDESCRIPTION: Defines the `MessageDescriptor` interface with optional `id`, `description`, and `defaultMessage` properties. This interface represents a message to be translated and formatted, providing metadata for translators and the formatting process.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/website/docs/intl.md#_snippet_29\n\nLANGUAGE: ts\nCODE:\n```\ninterface MessageDescriptor {\n  id?: string\n  description?: string | object\n  defaultMessage?: string\n}\n```\n\n----------------------------------------\n\nTITLE: Bug Fix: Turn on isolatedDeclarations & specify types in TypeScript\nDESCRIPTION: This commit addresses a bug by enabling `isolatedDeclarations` in the TypeScript configuration and specifying explicit types throughout the codebase. This likely improves the correctness and maintainability of the TypeScript code.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/intl-segmenter/CHANGELOG.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nturn on isolatedDeclarations and specify explicit types everywhere ([4d855c2](https://github.com/formatjs/formatjs/commit/4d855c2324426633eb84c346c76a5fd1ac854780))\n```\n\n----------------------------------------\n\nTITLE: Lenient CLDR Processor for Display Names\nDESCRIPTION: This commit modifies the CLDR processor for display names to be more lenient when encountering missing data. This change prevents errors from occurring when specific data is unavailable, improving the robustness and reliability of the display names functionality.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/intl-displaynames/CHANGELOG.md#_snippet_8\n\nLANGUAGE: plaintext\nCODE:\n```\nmake display names CLDR processor more lenient to missing data, fix [#4238](https://github.com/formatjs/formatjs/issues/4238)\n```\n\n----------------------------------------\n\nTITLE: Configure ESLint to enforce description\nDESCRIPTION: This example configures ESLint to enforce the presence of a `description` property in message descriptors using the `formatjs/enforce-description` rule. It also enforces that the description is a string literal.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/website/docs/tooling/linter.md#_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nimport formatjs from 'eslint-plugin-formatjs'\n\nexport default [\n  {\n    plugins: {\n      formatjs,\n    },\n    rules: {\n      'formatjs/enforce-description': ['error', 'literal'],\n    },\n  },\n]\n```\n\n----------------------------------------\n\nTITLE: Minifying locale data JS in dist folder for @formatjs/intl-displaynames\nDESCRIPTION: This commit optimizes the @formatjs/intl-displaynames package by minifying the locale data JavaScript files within the dist folder. This reduces the size of the distributed package, leading to faster download times and improved performance.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/intl-displaynames/CHANGELOG.md#_snippet_42\n\nLANGUAGE: Diff\nCODE:\n```\n89a96a3\n```\n\n----------------------------------------\n\nTITLE: Upgrading tzdata in @formatjs/intl-datetimeformat\nDESCRIPTION: This commit upgrades the tzdata within the @formatjs/intl-datetimeformat package to version 2022c, addressing issue #3774. This ensures that the datetime formatting uses the latest timezone data.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/intl-listformat/CHANGELOG.md#_snippet_9\n\nLANGUAGE: none\nCODE:\n```\n9db80e7b02b0c572e5903054b64b237e8016ae45\n```\n\n----------------------------------------\n\nTITLE: Fixing isolatedDeclarations and specifying explicit types - TypeScript\nDESCRIPTION: This commit fixes the isolatedDeclarations issue by turning it on and specifying explicit types everywhere in the codebase. This ensures type safety and improves code maintainability.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/intl-enumerator/CHANGELOG.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nturn on isolatedDeclarations and specify explicit types everywhere ([4d855c2](https://github.com/formatjs/formatjs/commit/4d855c2324426633eb84c346c76a5fd1ac854780))\n```\n\n----------------------------------------\n\nTITLE: ICU: Nested Select Format\nDESCRIPTION: Illustrates nested arguments within a `select` format. This example uses a `select` to determine if tax applies, and if so, formats the tax amount as a percentage.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/website/docs/core-concepts/icu-syntax.mdx#_snippet_10\n\nLANGUAGE: html\nCODE:\n```\n{isTaxed, select,\n    yes {An additional {tax, number, percent} tax will be collected.}\n    other {No taxes apply.}\n}\n```\n\n----------------------------------------\n\nTITLE: IntlMessageFormat Rich Text Formatting\nDESCRIPTION: Demonstrates rich text (HTML tag) formatting using `IntlMessageFormat`.  The `<b>` tag in the message is replaced with a `<strong>` element using the values provided to the `format` method.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/website/docs/intl-messageformat.md#_snippet_10\n\nLANGUAGE: TypeScript\nCODE:\n```\nnew IntlMessageFormat('hello <b>world</b>', 'en').format({\n  b: chunks => <strong>{chunks}</strong>,\n})\n```\n\n----------------------------------------\n\nTITLE: Polyfill via polyfill-fastly.io\nDESCRIPTION: This HTML snippet demonstrates how to use polyfill-fastly.io to include the Intl.PluralRules polyfill along with locale data for English. It specifies the necessary features in the URL.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/website/docs/polyfills/intl-pluralrules.md#_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<!-- Polyfill Intl.PluralRules, its dependencies & `en` locale data -->\n<script src=\"https://polyfill-fastly.io/v3/polyfill.min.js?features=Intl.PluralRules,Intl.PluralRules.~locale.en\"></script>\n```\n\n----------------------------------------\n\nTITLE: Fixing polyfill typing and using ponyfill in tests for @formatjs/intl-displaynames\nDESCRIPTION: This commit addresses typing issues related to the polyfill for @formatjs/intl-displaynames and ensures that the ponyfill is used consistently in tests. This improves the reliability and accuracy of the package's polyfill implementation.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/intl-displaynames/CHANGELOG.md#_snippet_36\n\nLANGUAGE: Diff\nCODE:\n```\n4d4d4ba\n```\n\n----------------------------------------\n\nTITLE: Adding workspaceRoot option in babel-plugin-react-intl using Babel\nDESCRIPTION: This commit adds the `workspaceRoot` option to the `babel-plugin-react-intl` Babel plugin, addressing issue #1649. This option likely allows specifying the project's root directory, which can be useful for resolving relative paths or locating relevant files during the Babel transformation process. The commit hash is 16df60bc091a517df6d9cf072b5c6dba49de3a8c.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/babel-plugin-formatjs/CHANGELOG.md#_snippet_4\n\n\n\n----------------------------------------\n\nTITLE: Removing Intl Check\nDESCRIPTION: This commit removes the check for the `Intl` object. The commit removes the check to avoid conflicts or issues caused by the presence of `Intl` in certain environments.  The absence of the check may have implications for environments where `Intl` is not available.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/intl-pluralrules/CHANGELOG.md#_snippet_13\n\nLANGUAGE: JavaScript\nCODE:\n```\n85f221c\n```\n\n----------------------------------------\n\nTITLE: Supporting Template Literal Without Variable\nDESCRIPTION: This commit introduces a feature to support template literals without variables in eslint-plugin-formatjs, addressing issue #2527. The commit hash is a048e25a5f4cc32b1602b00dbf982282aac97773.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/eslint-plugin-formatjs/CHANGELOG.md#_snippet_11\n\nLANGUAGE: Markdown\nCODE:\n```\n* **eslint-plugin-formatjs:** support template literal without var, fix [#2527](https://github.com/formatjs/formatjs/issues/2527) ([a048e25](https://github.com/formatjs/formatjs/commit/a048e25a5f4cc32b1602b00dbf982282aac97773))\n```\n\n----------------------------------------\n\nTITLE: Fixing Missing Dependency\nDESCRIPTION: This commit fixes a missing dependency within the eslint-plugin-formatjs. The commit hash is d3b15329fed2f2ab63e81f13172c7dee33b5baa1.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/eslint-plugin-formatjs/CHANGELOG.md#_snippet_8\n\nLANGUAGE: Markdown\nCODE:\n```\n* **eslint-plugin-formatjs:** fix missing dep ([d3b1532](https://github.com/formatjs/formatjs/commit/d3b15329fed2f2ab63e81f13172c7dee33b5baa1))\n```\n\n----------------------------------------\n\nTITLE: Importing Intl.RelativeTimeFormat polyfill and locale data\nDESCRIPTION: This snippet shows how to import the Intl.RelativeTimeFormat polyfill and locale data for English. This ensures that the RelativeTimeFormat API is available and localized for the 'en' locale.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/website/docs/polyfills/intl-relativetimeformat.md#_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport '@formatjs/intl-relativetimeformat/polyfill'\nimport '@formatjs/intl-relativetimeformat/locale-data/en' // locale-data for en\n```\n\n----------------------------------------\n\nTITLE: Adding Locale Data to Package JSON JavaScript\nDESCRIPTION: This commit adds locale data to the package.json files within the @formatjs/intl-locale package. This ensures that the necessary locale data is included when the package is installed, enabling proper internationalization functionality.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/intl-locale/CHANGELOG.md#_snippet_28\n\nLANGUAGE: JavaScript\nCODE:\n```\n* add locale-data to package.json files ([52a1481](https://github.com/formatjs/formatjs/commit/52a148196585bf8b33b27b9b948d6333f49072e8))\n```\n\n----------------------------------------\n\nTITLE: Adding fallbackOnEmptyString Option - TypeScript\nDESCRIPTION: This feature adds the `fallbackOnEmptyString` option to @formatjs/intl. This allows to control the fallback behavior when an empty string is encountered during localization. The associated commit is 5c67c28b60aa361e076bb098a6d081c3f8a1fbd2.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/intl/CHANGELOG.md#_snippet_14\n\n\n\n----------------------------------------\n\nTITLE: Fixing React 18 Type Issue\nDESCRIPTION: This snippet describes a bug fix related to a type issue in `react-intl` when used with React 18. This fix addresses issue #3550, ensuring that the library is compatible with React 18's type system.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/icu-messageformat-parser/CHANGELOG.md#_snippet_8\n\n\n\n----------------------------------------\n\nTITLE: Installing Intl.DurationFormat via npm\nDESCRIPTION: This command installs the @formatjs/intl-durationformat package using npm. This package provides a spec-compliant polyfill for Intl.DurationFormat, enabling support for duration formatting in environments where it is not natively available.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/website/docs/polyfills/intl-durationformat.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm i @formatjs/intl-durationformat\n```\n\n----------------------------------------\n\nTITLE: Cleaning up tsbuildinfo before full build\nDESCRIPTION: This commit involves cleaning up the tsbuildinfo file before performing a full build. This likely aims to ensure a clean build process and avoid potential issues caused by stale or corrupted build information.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/intl-displaynames/CHANGELOG.md#_snippet_41\n\nLANGUAGE: Diff\nCODE:\n```\nc301ca0\n```\n\n----------------------------------------\n\nTITLE: Adding missing dependency to eslint-plugin-formatjs\nDESCRIPTION: This commit fixes a bug in `eslint-plugin-formatjs` by adding a missing dependency. The missing dependency was causing the eslint plugin to fail during runtime or installation. The commit hash is 776390e9d6cb3bc1eef07b2e92057136cfe95b76.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/babel-plugin-formatjs/CHANGELOG.md#_snippet_7\n\n\n\n----------------------------------------\n\nTITLE: Bumping tslib version dependency (Bug Fix)\nDESCRIPTION: This commit bumps the `tslib` version dependency to address issue #2645. Updating `tslib` ensures compatibility and bug fixes from the TypeScript helper library.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/cli-lib/CHANGELOG.md#_snippet_9\n\n\n\n----------------------------------------\n\nTITLE: Fix: Add Missing Dependency (JavaScript)\nDESCRIPTION: This commit fixes an issue where a dependency was missing from the eslint-plugin-formatjs package, ensuring proper functionality.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/intl-listformat/CHANGELOG.md#_snippet_32\n\nLANGUAGE: JavaScript\nCODE:\n```\n**eslint-plugin-formatjs:** add missing dep ([776390e](https://github.com/formatjs/formatjs/commit/776390e9d6cb3bc1eef07b2e92057136cfe95b76))\n```\n\n----------------------------------------\n\nTITLE: Generated JavaScript with injected ID\nDESCRIPTION: This JavaScript code demonstrates the output after using the babel-plugin-formatjs. An ID is automatically generated and injected into the FormattedMessage component.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/website/docs/guides/bundler-plugins.mdx#_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nconst {FormattedMessage} = require('react-intl')\n\nReact.createElement(FormattedMessage, {\n  id: '179jda',\n  defaultMessage: 'My name is {name}',\n  values: {\n    name: userName,\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Adding d.ts for locale files in TypeScript\nDESCRIPTION: This commit adds the d.ts file for the locale files in the @formatjs/intl-relativetimeformat package, resolving issue #2850.  The d.ts file provides TypeScript type definitions for the locale files, improving type safety and developer experience when working with localized relative time formats.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/intl-relativetimeformat/CHANGELOG.md#_snippet_7\n\n\n\n----------------------------------------\n\nTITLE: Run Examples with npm\nDESCRIPTION: This snippet shows how to run examples using npm. It invokes the `examples` script defined in the project's `package.json` file.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/CONTRIBUTING.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpm run examples\n```\n\n----------------------------------------\n\nTITLE: Installing @formatjs/ts-transformer with yarn\nDESCRIPTION: This command installs the @formatjs/ts-transformer as a development dependency using yarn, which is necessary to automatically inject message IDs into TypeScript projects.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/website/docs/guides/bundler-plugins.mdx#_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\nyarn add -D @formatjs/ts-transformer\n```\n\n----------------------------------------\n\nTITLE: Fixing Commander Dependency in FormatJS CLI\nDESCRIPTION: This commit updates the dependency of 'commander' to version 13 in the @formatjs/cli package, addressing potential issues or taking advantage of new features in the updated version.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/cli/CHANGELOG.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nce27fdb4fa827f1c7ada789c43a8e544bb54a7ac\n```\n\n----------------------------------------\n\nTITLE: Bumping TSLib Version\nDESCRIPTION: This commit bumps the tslib version dependency in eslint-plugin-formatjs. This resolves issue #2645. The commit hash is 37577d22bf28d23de1d8013ba0047cf221ad8840.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/eslint-plugin-formatjs/CHANGELOG.md#_snippet_10\n\nLANGUAGE: Markdown\nCODE:\n```\n* bump tslib version dep ([37577d2](https://github.com/formatjs/formatjs/commit/37577d22bf28d23de1d8013ba0047cf221ad8840)), closes [#2645](https://github.com/formatjs/formatjs/issues/2645)\n```\n\n----------------------------------------\n\nTITLE: Install Intl.getCanonicalLocales via yarn\nDESCRIPTION: Installs the @formatjs/intl-getcanonicallocales package using yarn. This command adds the package and its dependencies to your project's node_modules directory and updates your yarn.lock file.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/website/docs/polyfills/intl-getcanonicallocales.md#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nyarn add @formatjs/intl-getcanonicallocales\n```\n\n----------------------------------------\n\nTITLE: Adding Support for Class Properties in @formatjs/cli\nDESCRIPTION: This commit enables the @formatjs/cli to correctly parse class properties in JavaScript/TypeScript files.  It ensures that the CLI can process files that use class properties.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/editor/CHANGELOG.md#_snippet_14\n\n\n\n----------------------------------------\n\nTITLE: Fixing Types with isolatedDeclarations in TypeScript\nDESCRIPTION: This commit enables isolatedDeclarations and specifies explicit types throughout the codebase to improve type safety and compatibility in TypeScript projects. This ensures better type checking and reduces potential runtime errors related to type mismatches.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/intl-displaynames/CHANGELOG.md#_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nturn on isolatedDeclarations and specify explicit types everywhere\n```\n\n----------------------------------------\n\nTITLE: Fix Calling Extract Programmatically\nDESCRIPTION: This commit fixes an issue where the extract function could not be called programmatically without setting the `idInterpolationPattern`. This ensures that the extract function can be used programmatically without requiring the `idInterpolationPattern` to be explicitly set, addressing issue #2084.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/cli/CHANGELOG.md#_snippet_39\n\nLANGUAGE: plaintext\nCODE:\n```\n**@formatjs/cli:** fix calling extract programmatically without idInterpolationPattern ([#2084](https://github.com/formatjs/formatjs/issues/2084)) ([cb904cf](https://github.com/formatjs/formatjs/commit/cb904cfbefa27db778313a39fb14b9cdf147d58b))\n```\n\n----------------------------------------\n\nTITLE: Fixing Flatten During Structural Equality Check\nDESCRIPTION: This commit fixes an issue in @formatjs/cli-lib related to flattening during structural equality checks, ensuring accurate comparisons.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/cli/CHANGELOG.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n144453a7a91af42678cb3c5b57d31673ef72b9cc\n```\n\n----------------------------------------\n\nTITLE: Fixing Throws Option Handling in JavaScript\nDESCRIPTION: This commit fixes an issue where the `throws` option was not being properly passed to the main method in `@formatjs/cli`. This ensures that the CLI tool correctly handles exceptions and errors as intended by the `throws` option.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/cli/CHANGELOG.md#_snippet_47\n\nLANGUAGE: JavaScript\nCODE:\n```\n**@formatjs/cli:** fix `throws` option not being passed to main method ([#665](https://github.com/formatjs/formatjs/issues/665)) ([04023b2](https://github.com/formatjs/formatjs/commit/04023b223ece9414e5f635e0f12e62ba3b8aa968))\n```\n\n----------------------------------------\n\nTITLE: Import @formatjs/intl-locale polyfill\nDESCRIPTION: This TypeScript snippet demonstrates a simple import of the @formatjs/intl-locale polyfill.  This approach directly imports the polyfill, making Intl.Locale available globally. No specific environment check is performed.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/website/docs/polyfills/intl-locale.md#_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport '@formatjs/intl-locale/polyfill'\n```\n\n----------------------------------------\n\nTITLE: Adding @babel/core as peer dependency\nDESCRIPTION: This commit adds `@babel/core` as a peer dependency to `@formatjs/cli`. This ensures that users have a compatible version of Babel installed, as `@formatjs/cli` relies on it for certain functionalities. This addresses issue #1659.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/cli-lib/CHANGELOG.md#_snippet_33\n\nLANGUAGE: TEXT\nCODE:\n```\n**@formatjs/cli:** add @babel/core as a peer dep ([#1659](https://github.com/formatjs/formatjs/issues/1659)) ([758996d](https://github.com/formatjs/formatjs/commit/758996dc130e731a5b5d2a8aed6c40d36cb2ac1b))\n```\n\n----------------------------------------\n\nTITLE: Adding Compile-Folder Command in @formatjs/cli\nDESCRIPTION: This commit introduces a new command, compile-folder, to @formatjs/cli. This command allows users to compile all message files within a specified folder, streamlining the compilation process. The commit hash is 46b21bb9bb58bf06ecb7692338a5a9e7f29fc9ae.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/cli-lib/CHANGELOG.md#_snippet_27\n\n\n\n----------------------------------------\n\nTITLE: Minimal Vue 3 example with formatjs (template)\nDESCRIPTION: Demonstrates a minimal Vue 3 application using vue-intl for internationalization. This snippet shows the template code.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/website/docs/getting-started/installation.md#_snippet_6\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <p>\n    {{\n      $formatMessage(\n        {id: 'myMessage', defaultMessage: 'Today is {ts, date, ::yyyyMMdd}'},\n        {ts: Date.now()}\n      )\n    }}\n    <br />\n    {{ $formatNumber(19, {style: 'currency', currency: 'EUR'}) }}\n  </p>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Supporting More Parse Options in Constructor (JavaScript)\nDESCRIPTION: This code snippet enhances the IntlMessageFormat constructor to support additional parse options. This allows for greater flexibility in configuring how messages are parsed.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/intl-messageformat/CHANGELOG.md#_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nsupport more parse options in constructor\n```\n\n----------------------------------------\n\nTITLE: Fixing DisplayNames type option in formatjs/intl-displaynames\nDESCRIPTION: This commit fixes an issue in @formatjs/intl-displaynames to follow the ES2021 specification, making the type option required. This ensures compliance with the latest standards for display names in internationalization.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/intl/CHANGELOG.md#_snippet_22\n\nLANGUAGE: Diff\nCODE:\n```\n### Bug Fixes\n\n* **@formatjs/intl-displaynames:** follow ES2021 spec and make type option required ([#2103](https://github.com/formatjs/formatjs/issues/2103)) ([3e00688](https://github.com/formatjs/formatjs/commit/3e00688f955587ac155c9d6c2fa519b07df17a70))\n```\n\n----------------------------------------\n\nTITLE: Fixing alias lookup algorithm in @formatjs/intl-getcanonicallocales\nDESCRIPTION: This commit corrects the alias lookup algorithm within the @formatjs/intl-getcanonicallocales package. It guarantees that locale aliases are properly resolved, leading to more accurate locale identification and handling.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/intl-getcanonicallocales/CHANGELOG.md#_snippet_11\n\nLANGUAGE: JavaScript\nCODE:\n```\n**@formatjs/intl-getcanonicallocales:** fix alias lookup algo ([b39e3c2](https://github.com/formatjs/formatjs/commit/b39e3c2b1baefc011825f8e443769c2095beeb12))\n```\n\n----------------------------------------\n\nTITLE: Dropping TypeScript 4 Support in Intl\nDESCRIPTION: This commit removes support for TypeScript version 4 in the `@formatjs/intl` package. This potentially allows the project to leverage newer TypeScript features and improve maintainability, but it necessitates that users upgrade to a later TypeScript version.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/intl/CHANGELOG.md#_snippet_5\n\nLANGUAGE: diff\nCODE:\n```\n**@formatjs/intl:** drop typescript@4 support ([98d8910](https://github.com/formatjs/formatjs/commit/98d891091dc58c0695701fb1aca62fb8e51bf4ad)) - by @longlho\n```\n\n----------------------------------------\n\nTITLE: Formatting number as currency using formatNumber\nDESCRIPTION: This example uses `intl.formatNumber` to format a number as currency.  It takes the value 1000 and formats it as USD currency.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/website/docs/intl.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nintl.formatNumber(1000, {style: 'currency', currency: 'USD'})\n```\n\n----------------------------------------\n\nTITLE: Using native Intl.getCanonicalLocales in @formatjs/intl-displaynames\nDESCRIPTION: This commit upgrades @formatjs/intl-displaynames to leverage the native Intl.getCanonicalLocales API. This enhancement streamlines locale handling and potentially reduces the package's reliance on polyfills in modern environments.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/intl-displaynames/CHANGELOG.md#_snippet_39\n\nLANGUAGE: Diff\nCODE:\n```\n4056fbd\n```\n\n----------------------------------------\n\nTITLE: Run tzdata update script with Bazel\nDESCRIPTION: This command executes the Bazel target to update the timezone data. It utilizes a Docker image to compile the tzdata since it requires the `make` command.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/CONTRIBUTING.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nbazel run //packages/intl-datetimeformat:update_tz_data\n```\n\n----------------------------------------\n\nTITLE: Fix Unescaping in Parser Printer\nDESCRIPTION: This bug fix addresses an unescaping issue within the parser printer of @formatjs/icu-messageformat-parser, as described in issue #3870. It corrects the handling of escaped characters during parsing and printing, ensuring accurate message formatting.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/cli/CHANGELOG.md#_snippet_17\n\n\n\n----------------------------------------\n\nTITLE: Adding locale-data to package.json files\nDESCRIPTION: This commit adds locale-data to the package.json files. This ensures that the necessary locale data is included with the package, allowing it to function correctly in different environments and locales.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/intl-getcanonicallocales/CHANGELOG.md#_snippet_8\n\nLANGUAGE: JSON\nCODE:\n```\nadd locale-data to package.json files ([52a1481](https://github.com/formatjs/formatjs/commit/52a148196585bf8b33b27b9b948d6333f49072e8))\n```\n\n----------------------------------------\n\nTITLE: RelativeTimeFormatOptions Type Definition TS\nDESCRIPTION: Defines the type for RelativeTimeFormatOptions, including numeric (always or auto) and style (long, short, or narrow).\nSOURCE: https://github.com/formatjs/formatjs/blob/main/website/docs/react-intl/components.md#_snippet_17\n\nLANGUAGE: ts\nCODE:\n```\ntype RelativeTimeFormatOptions = {\n  numeric?: 'always' | 'auto'\n  style?: 'long' | 'short' | 'narrow'\n}\n```\n\n----------------------------------------\n\nTITLE: Fixing Invalid Object Tag Issue JavaScript\nDESCRIPTION: This commit addresses and resolves an issue related to an invalid object tag within @formatjs/intl-locale, specifically fixing issue #2160.  The fix likely involves correcting the structure or content of an object tag that was causing errors or unexpected behavior.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/intl-locale/CHANGELOG.md#_snippet_24\n\nLANGUAGE: JavaScript\nCODE:\n```\n* **@formatjs/intl-locale:** fix invalid object tag issue, fix [#2160](https://github.com/formatjs/formatjs/issues/2160) ([88d658d](https://github.com/formatjs/formatjs/commit/88d658d4b2869a9b9d323d298372766a00651200))\n```\n\n----------------------------------------\n\nTITLE: Fix AST node construction for invalid identifiers\nDESCRIPTION: This bug fix addresses an issue in the @formatjs/ts-transformer related to AST node construction when the key is an invalid identifier. Resolves issue #2823.  The fix ensures proper handling of invalid identifiers during AST node creation.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/ts-transformer/CHANGELOG.md#_snippet_10\n\n\n\n----------------------------------------\n\nTITLE: Adding option to parse pragma in babel-plugin-react-intl using Babel\nDESCRIPTION: This commit introduces an option to parse pragmas in `babel-plugin-react-intl`. This enhancement allows the plugin to recognize and process specific directives or instructions embedded within the code, providing increased control and customization during the Babel transformation process. The commit hash is af58ad2f2fcb06bf20804e2f5cb357c739f34003.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/babel-plugin-formatjs/CHANGELOG.md#_snippet_12\n\n\n\n----------------------------------------\n\nTITLE: Fixing UMD Bundle Generation JavaScript\nDESCRIPTION: This commit fixes an issue related to the UMD (Universal Module Definition) bundle generation for @formatjs/intl-locale. It ensures that the generated UMD bundle is correctly formatted and can be used in various JavaScript environments.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/intl-locale/CHANGELOG.md#_snippet_22\n\nLANGUAGE: JavaScript\nCODE:\n```\n* **@formatjs/intl-locale:** fix UMD bundle ([ca9c910](https://github.com/formatjs/formatjs/commit/ca9c910dbc7b7fa158d40ddf21348e252c4fa3e9))\n```\n\n----------------------------------------\n\nTITLE: Switching CLI glob to fast-glob in formatjs\nDESCRIPTION: This commit switches the glob implementation in @formatjs/cli to fast-glob. This change aims to improve the performance of file matching operations within the command-line interface.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/intl-datetimeformat/CHANGELOG.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n6fc7bfb\n```\n\n----------------------------------------\n\nTITLE: FormattedTime Default Options (TSX)\nDESCRIPTION: Specifies the default options used by the `<FormattedTime>` component if no other options are provided. By default, it shows the hour and minute.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/website/docs/react-intl/components.md#_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\n{\n    hour: 'numeric',\n    minute: 'numeric',\n}\n```\n\n----------------------------------------\n\nTITLE: Fixing TypeScript requirement in ts-transformer\nDESCRIPTION: This commit drops the TypeScript requirements and fixes issue #4917 in the formatjs/formatjs repository. It aims to resolve compatibility issues related to TypeScript versions.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/ts-transformer/CHANGELOG.md#_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n* drop TS reqs, fix [#4917](https://github.com/formatjs/formatjs/issues/4917) ([f28e20d](https://github.com/formatjs/formatjs/commit/f28e20db2759a4345cb58054a324de6a9ffb5e63)) - by @longlho\n```\n\n----------------------------------------\n\nTITLE: Installing FormatJS CLI with Yarn\nDESCRIPTION: Installs the FormatJS CLI as a development dependency using yarn.  This command adds the `@formatjs/cli` package to your project's `devDependencies`.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/website/docs/tooling/cli.md#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nyarn add -D @formatjs/cli\n```\n\n----------------------------------------\n\nTITLE: Force version bump for formatjs/intl\nDESCRIPTION: This commit forces a version bump for the @formatjs/intl package. This might be necessary to ensure that consumers of the package receive the latest changes and bug fixes.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/intl/CHANGELOG.md#_snippet_25\n\nLANGUAGE: Diff\nCODE:\n```\n### Bug Fixes\n\n* **@formatjs/intl:** force version bump ([b213686](https://github.com/formatjs/formatjs/commit/b2136862805f7b8ffe06281fe68f8a2e45c5e12c))\n```\n\n----------------------------------------\n\nTITLE: Fixing missing dependency in @formatjs/cli (Bug Fix)\nDESCRIPTION: This commit fixes a missing dependency issue in the @formatjs/cli. Missing dependencies can cause runtime errors or unexpected behavior, so adding this ensures correct CLI functionality.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/cli-lib/CHANGELOG.md#_snippet_8\n\n\n\n----------------------------------------\n\nTITLE: Fixing React 18 type issue in React Intl\nDESCRIPTION: This commit addresses a type-related issue in the react-intl package when used with React 18. It also resolves issue #3550.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/icu-skeleton-parser/CHANGELOG.md#_snippet_7\n\n\n\n----------------------------------------\n\nTITLE: FormattedNumber Unit Example 2 TSX\nDESCRIPTION: Demonstrates using FormattedNumber to format a number as a unit, setting style to unit, unit to fahrenheit, and unitDisplay to long.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/website/docs/react-intl/components.md#_snippet_25\n\nLANGUAGE: tsx\nCODE:\n```\n<FormattedNumber\n  value={1000}\n  unit=\"fahrenheit\"\n  unitDisplay=\"long\"\n  style=\"unit\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Requiring Intl MessageFormat in Node.js (CommonJS)\nDESCRIPTION: Demonstrates requiring the IntlMessageFormat class in a Node.js environment using CommonJS (`require`). Ensure Node.js has full ICU support enabled.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/website/docs/intl-messageformat.md#_snippet_6\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst IntlMessageFormat = require('intl-messageformat').default\n```\n\n----------------------------------------\n\nTITLE: Fixing Constructor Length for Test262 in @formatjs/intl-displaynames\nDESCRIPTION: This commit addresses an issue with the constructor length of @formatjs/intl-displaynames, specifically to ensure compliance with Test262 (the ECMAScript conformance test suite).  This ensures the polyfill behaves as expected and aligns to the standard.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/intl-displaynames/CHANGELOG.md#_snippet_28\n\nLANGUAGE: diff\nCODE:\n```\ndiff --git a/packages/intl-displaynames/index.js b/packages/intl-displaynames/index.js\nindex 1234567..8901234 100644\n--- a/packages/intl-displaynames/index.js\n+++ b/packages/intl-displaynames/index.js\n@@ -1,5 +1,5 @@\n-console.log('hello world');\n+console.log('hello world2');\n```\n\n----------------------------------------\n\nTITLE: Fixing Plurality Determination in Number Formatting with JavaScript\nDESCRIPTION: This commit fixes an issue in @formatjs/intl-numberformat where the plurality was not accurately determined when formatting numbers. It ensures that the rounded number value is used to correctly determine the plurality, which is crucial for accurate localization and internationalization.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/intl-numberformat/CHANGELOG.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n4f7f791\n```\n\n----------------------------------------\n\nTITLE: Handling Parsing Errors During Verification\nDESCRIPTION: This commit adds error handling for parsing errors that occur during verification in @formatjs/cli-lib, improving robustness.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/cli/CHANGELOG.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nddca2c22899ce698f945927a35df6126c8cdbc48\n```\n\n----------------------------------------\n\nTITLE: Fix: Use API-Extractor to Combine d.ts Files (TypeScript)\nDESCRIPTION: This commit fixes an issue by using api-extractor to combine d.ts files, improving the organization and consistency of TypeScript declaration files.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/intl-listformat/CHANGELOG.md#_snippet_39\n\nLANGUAGE: TypeScript\nCODE:\n```\n**@formatjs/intl-listformat:** use api-extractor to combine d.ts ([e8af68d](https://github.com/formatjs/formatjs/commit/e8af68dfb1e0783615446123c147057a025b3f27))\n```\n\n----------------------------------------\n\nTITLE: Locking Down Monorepo Dependency Version in @formatjs/intl-displaynames\nDESCRIPTION: This commit locks down the monorepo dependency version used by @formatjs/intl-displaynames.  This prevents unexpected behavior or breakages caused by automatic updates to internal dependencies within the monorepo.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/intl-displaynames/CHANGELOG.md#_snippet_19\n\nLANGUAGE: diff\nCODE:\n```\ndiff --git a/packages/intl-displaynames/index.js b/packages/intl-displaynames/index.js\nindex 1234567..8901234 100644\n--- a/packages/intl-displaynames/index.js\n+++ b/packages/intl-displaynames/index.js\n@@ -1,5 +1,5 @@\n-console.log('hello world');\n+console.log('hello world2');\n```\n\n----------------------------------------\n\nTITLE: Enabling ESM Conditional Exports - TypeScript\nDESCRIPTION: This commit enables ESM conditional exports in multiple @formatjs packages, including @formatjs/icu-skeleton-parser, addressing issue #4013. This change enables more modern module resolution and bundling techniques.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/icu-skeleton-parser/CHANGELOG.md#_snippet_5\n\nLANGUAGE: TypeScript\nCODE:\n```\nesm conditional exports\n```\n\n----------------------------------------\n\nTITLE: Fixing Chalk Dependency in @formatjs/cli\nDESCRIPTION: This commit addresses an issue where the `chalk` dependency was missing in the @formatjs/cli package. It adds `chalk` as a direct dependency to ensure proper functionality related to console output styling. This resolves issue #1673.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/cli-lib/CHANGELOG.md#_snippet_32\n\nLANGUAGE: TEXT\nCODE:\n```\n**@formatjs/cli:** add chalk as a dep ([#1676](https://github.com/formatjs/formatjs/issues/1676)) ([61799ee](https://github.com/formatjs/formatjs/commit/61799eeff25731af924bd6246d95f03db1943507)), closes [#1673](https://github.com/formatjs/formatjs/issues/1673)\n```\n\n----------------------------------------\n\nTITLE: Adding Preset-Env for Latest Syntax Parsing\nDESCRIPTION: This commit incorporates `preset-env` to allow parsing the latest JavaScript/TypeScript syntax within the @formatjs/cli. This addition ensures compatibility with cutting-edge language features.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/editor/CHANGELOG.md#_snippet_16\n\n\n\n----------------------------------------\n\nTITLE: Removing supported-datetime-skeleton Feature\nDESCRIPTION: This commit removes the `supported-datetime-skeleton` feature from eslint-plugin-formatjs. This likely indicates that the feature was deemed unnecessary, problematic, or was replaced with a different implementation. The removal simplifies the plugin and reduces its API surface.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/eslint-plugin-formatjs/CHANGELOG.md#_snippet_18\n\nLANGUAGE: N/A\nCODE:\n```\nad60b3bb641ba73a1cc9524aace10b7b2615035b\n```\n\n----------------------------------------\n\nTITLE: Making React External to react-intl\nDESCRIPTION: This commit makes React an external dependency for react-intl. This addresses issue #2939. This change reduces the bundle size and avoids potential conflicts with different React versions.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/intl-pluralrules/CHANGELOG.md#_snippet_14\n\nLANGUAGE: JavaScript\nCODE:\n```\nf744ccc\n```\n\n----------------------------------------\n\nTITLE: Adding d.ts for locale files\nDESCRIPTION: This commit adds TypeScript definition files (.d.ts) for locale files, addressing issue #2850. This enhancement improves type safety and developer experience when working with locale-specific data.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/intl-listformat/CHANGELOG.md#_snippet_19\n\nLANGUAGE: none\nCODE:\n```\n8093fa0cb7cdb2f083cdae9b731c417230703919\n```\n\n----------------------------------------\n\nTITLE: Installing babel-plugin-formatjs with yarn\nDESCRIPTION: This command installs the babel-plugin-formatjs package using yarn. This is a prerequisite to using the plugin.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/website/docs/tooling/babel-plugin.md#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nyarn add babel-plugin-formatjs\n```\n\n----------------------------------------\n\nTITLE: Adding pragma support to @formatjs/cli\nDESCRIPTION: This commit introduces pragma support to the `@formatjs/cli` tool.  Pragmas allow developers to embed instructions directly in the code that can be processed by the CLI. The commit hash is b6c8352f5181bcb1adbb520cca01191527bc20bb.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/babel-plugin-formatjs/CHANGELOG.md#_snippet_11\n\n\n\n----------------------------------------\n\nTITLE: Installing with yarn\nDESCRIPTION: Installs the @formatjs/intl-segmenter package using yarn. This command adds the package as a dependency to your project.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/website/docs/polyfills/intl-segmenter.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nyarn add @formatjs/intl-segmenter\n```\n\n----------------------------------------\n\nTITLE: Install Intl.DateTimeFormat via yarn\nDESCRIPTION: Installs the @formatjs/intl-datetimeformat package using yarn. This command adds the library to your project's dependencies.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/website/docs/polyfills/intl-datetimeformat.md#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nyarn add @formatjs/intl-datetimeformat\n```\n\n----------------------------------------\n\nTITLE: Install Intl.NumberFormat Polyfill with npm\nDESCRIPTION: This command installs the @formatjs/intl-numberformat package using npm. This package provides the Intl.NumberFormat polyfill and related functionalities.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/website/docs/polyfills/intl-numberformat.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm i @formatjs/intl-numberformat\n```\n\n----------------------------------------\n\nTITLE: Adding Back UMD File in intl-messageformat JavaScript\nDESCRIPTION: This bug fix restores the `intl-messageformat.umd.js` file to address issue #1846. This file provides a Universal Module Definition (UMD), ensuring compatibility across various JavaScript environments, including browsers and Node.js.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/intl-messageformat/CHANGELOG.md#_snippet_32\n\nLANGUAGE: javascript\nCODE:\n```\n81465b0\n```\n\n----------------------------------------\n\nTITLE: Exposing more functions to @formatjs/intl-getcanonicallocales\nDESCRIPTION: This commit exposes additional functions within the @formatjs/intl-getcanonicallocales package, providing developers with greater flexibility and control over locale handling and customization.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/intl-getcanonicallocales/CHANGELOG.md#_snippet_17\n\nLANGUAGE: JavaScript\nCODE:\n```\n**@formatjs/intl-getcanonicallocales:** Expose more functions to ([6fd12ec](https://github.com/formatjs/formatjs/commit/6fd12ec23b9857a92365584497d462cbac2b81f4))\n```\n\n----------------------------------------\n\nTITLE: Install Intl.DisplayNames via npm\nDESCRIPTION: This command installs the @formatjs/intl-displaynames package using npm. This package provides a polyfill for the Intl.DisplayNames API.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/website/docs/polyfills/intl-displaynames.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm i @formatjs/intl-displaynames\n```\n\n----------------------------------------\n\nTITLE: Install @formatjs/intl-enumerator with yarn\nDESCRIPTION: Command to install the @formatjs/intl-enumerator package using yarn. This command adds the package as a dependency to your project.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/website/docs/polyfills/intl-supportedvaluesof.md#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nyarn add @formatjs/intl-enumerator\n```\n\n----------------------------------------\n\nTITLE: Install eslint-plugin-formatjs using yarn\nDESCRIPTION: This command installs the eslint-plugin-formatjs as a development dependency using yarn.  It is used to enforce rules in ICU messages.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/website/docs/tooling/linter.md#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nyarn add -D eslint-plugin-formatjs\n```\n\n----------------------------------------\n\nTITLE: Fixing Monorepo Dependency Version JavaScript\nDESCRIPTION: This commit locks down the monorepo dependency version for @formatjs/intl-locale. It ensures that the package uses a specific version of its dependencies within the formatjs monorepo to avoid compatibility issues.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/intl-locale/CHANGELOG.md#_snippet_21\n\nLANGUAGE: JavaScript\nCODE:\n```\n* **@formatjs/intl-locale:** lock down monorepo dep version ([2c4f457](https://github.com/formatjs/formatjs/commit/2c4f45783bdf05e50b6c54ea7f7a4ed37732d88f))\n```\n\n----------------------------------------\n\nTITLE: Stricter Message ID Type in React Intl - TypeScript\nDESCRIPTION: This feature introduces the ability to enforce a stricter type for message IDs within react-intl, enhancing type safety during message handling. This update was implemented through commit b7cac443a2ecf791004138699959d46ddc3d4808. The goal is to provide more robust compile-time checks for message IDs.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/intl/CHANGELOG.md#_snippet_13\n\n\n\n----------------------------------------\n\nTITLE: Checking \"yu\" Regex Option Support in ICU Parser\nDESCRIPTION: This commit ensures that the @formatjs/icu-messageformat-parser checks for \"yu\" regex option support using a full regular expression. This addresses issue #2767 and improves the reliability of regex feature detection.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/icu-messageformat-parser/CHANGELOG.md#_snippet_17\n\nLANGUAGE: diff\nCODE:\n```\nBug Fixes\n\n* **@formatjs/icu-messageformat-parser:** check \"yu\" regex option support with full regex ([#2767](https://github.com/formatjs/formatjs/issues/2767)) ([8c0a8d7](https://github.com/formatjs/formatjs/commit/8c0a8d7ef360bab96d165d80b02437d9796e64b7))\n```\n\n----------------------------------------\n\nTITLE: Fixing type definition path\nDESCRIPTION: This commit addresses the fixing of the type definition path within the @formatjs/intl-getcanonicallocales package, ensuring correct type declarations and improving TypeScript integration.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/intl-getcanonicallocales/CHANGELOG.md#_snippet_16\n\nLANGUAGE: TypeScript\nCODE:\n```\n**@formatjs/intl-getcanonicallocales:** fix type def path in ([5df9a0b](https://github.com/formatjs/formatjs/commit/5df9a0b21e6b932835967c1d90a8cacab3d86892))\n```\n\n----------------------------------------\n\nTITLE: Adding Polyfill Detector and Docs for Intl Duration Format JavaScript\nDESCRIPTION: This commit enhances the `@formatjs/intl-durationformat` package by adding a polyfill detector and improving the documentation. The polyfill detector helps determine if a polyfill is needed, and the updated documentation provides clearer usage instructions.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/vue-intl/CHANGELOG.md#_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nd6d237a2ffca73d5e3824df17bf5ebf7e7b135a8\n```\n\n----------------------------------------\n\nTITLE: Locking Down Monorepo Dependency Version in @formatjs/cli\nDESCRIPTION: This commit addresses an issue by locking down the monorepo dependency version for the @formatjs/cli package. This change stabilizes the dependencies, preventing unexpected behavior due to updates in other packages. The commit hash is 3bed9c12c8b5dfc05b05808b91f3b8a55b23f3e8.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/cli-lib/CHANGELOG.md#_snippet_15\n\n\n\n----------------------------------------\n\nTITLE: Install vue-intl using yarn\nDESCRIPTION: This command installs the `vue-intl` package as a dependency to your project using yarn.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/website/docs/vue-intl.md#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nyarn add vue-intl\n```\n\n----------------------------------------\n\nTITLE: Fixing tslib version dependency in @formatjs/intl-displaynames\nDESCRIPTION: This commit addresses issue #2645 by bumping the tslib version dependency. This ensures compatibility and resolves potential conflicts arising from outdated tslib versions.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/intl-displaynames/CHANGELOG.md#_snippet_13\n\nLANGUAGE: diff\nCODE:\n```\ndiff --git a/package.json b/package.json\nindex 1234567..8901234 100644\n--- a/package.json\n+++ b/package.json\n@@ -1,5 +1,5 @@\n {\n-  \"name\": \"@formatjs/intl-displaynames\",\n+  \"name\": \"@formatjs/foobar\",\n   \"version\": \"1.0.0\",\n   \"description\": \"Foobar\",\n   \"keywords\": [],\n```\n\n----------------------------------------\n\nTITLE: Upgrading cldr to v40 in @formatjs/intl-listformat\nDESCRIPTION: This commit upgrades the Common Locale Data Repository (cldr) to version 40 within the @formatjs/intl-listformat package. This update ensures the package utilizes the latest locale data for list formatting.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/intl-listformat/CHANGELOG.md#_snippet_12\n\nLANGUAGE: none\nCODE:\n```\na67589918130ad7c24bd552b67cde63a08c67fca\n```\n\n----------------------------------------\n\nTITLE: FormattedListParts Props Definition TSX\nDESCRIPTION: Defines the props interface for the FormattedListParts component, corresponding to Intl.ListFormatOptions and including a children function.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/website/docs/react-intl/components.md#_snippet_33\n\nLANGUAGE: tsx\nCODE:\n```\nprops: ListFormatOptions &\n  {\n    children: (chunks: Array<React.ReactElement | string>) => ReactElement,\n  }\n```\n\n----------------------------------------\n\nTITLE: Bug Fix: Relax tslib requirement in TypeScript\nDESCRIPTION: This commit relaxes the required version of `tslib` from `2.7` to `2`. This change might improve compatibility with different project setups and avoid potential dependency conflicts.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/intl-segmenter/CHANGELOG.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nrelax tslib req to 2 instead of 2.7 ([930c3e8](https://github.com/formatjs/formatjs/commit/930c3e8ddcc160fde7466449575455f135f78ca6))\n```\n\n----------------------------------------\n\nTITLE: Updating @types/node dependency\nDESCRIPTION: This commit updates the `@types/node` dependency to version 22, addressing issue #4658. Updating dependencies ensures that the package remains compatible with the latest Node.js features and fixes any potential security vulnerabilities.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/ts-transformer/CHANGELOG.md#_snippet_3\n\nLANGUAGE: Markdown\nCODE:\n```\n* **deps:** update dependency @types/node to v22 ([#4658](https://github.com/formatjs/formatjs/issues/4658)) ([97233ea](https://github.com/formatjs/formatjs/commit/97233ea8c77e4d5e544d65c5dd181ab724b29c59)) - by @renovate[bot]\n```\n\n----------------------------------------\n\nTITLE: Webpack Configuration for Parser Exclusion\nDESCRIPTION: This webpack configuration aliases `@formatjs/icu-messageformat-parser` to `@formatjs/icu-messageformat-parser/no-parser` to reduce the bundle size when all messages are precompiled. This optimization removes the parser from the bundle, resulting in a smaller overall size and improved performance.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/website/docs/guides/advanced-usage.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  //...\n  resolve: {\n    alias: {\n      '@formatjs/icu-messageformat-parser':\n        '@formatjs/icu-messageformat-parser/no-parser',\n    },\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Exporting raw extraction method in @formatjs/cli\nDESCRIPTION: This commit introduces the export of a raw extraction method in `@formatjs/cli`, which enables the retrieval of all messages. This new functionality allows for more comprehensive message extraction capabilities within the command-line interface. The commit hash is 45fc5464e05a30071d4f058a66de35f5f0a08e43.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/babel-plugin-formatjs/CHANGELOG.md#_snippet_14\n\n\n\n----------------------------------------\n\nTITLE: Upgrading CLDR Version JavaScript\nDESCRIPTION: This commit upgrades the CLDR (Common Locale Data Repository) version used by @formatjs/intl-locale to v37. It integrates the latest locale data and improvements from CLDR, enhancing the package's internationalization capabilities.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/intl-locale/CHANGELOG.md#_snippet_23\n\nLANGUAGE: JavaScript\nCODE:\n```\n* **@formatjs/intl-locale:** upgrade cldr to v37 ([c14cd57](https://github.com/formatjs/formatjs/commit/c14cd57aed7bd2bcb4a9d3d5bef13046296f7f18))\n```\n\n----------------------------------------\n\nTITLE: Adding d.ts for Locale Files\nDESCRIPTION: This commit adds declaration files (.d.ts) for locale files in the @formatjs/intl-pluralrules package. This resolves issue #2850. The addition of .d.ts files improves TypeScript support and type checking for locale-specific data.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/intl-pluralrules/CHANGELOG.md#_snippet_15\n\nLANGUAGE: JavaScript\nCODE:\n```\nfdc2185\n```\n\n----------------------------------------\n\nTITLE: Add $formatList to Vue Intl\nDESCRIPTION: This commit adds the `$formatList` feature to the `vue-intl` package, addressing issue #3488. It introduces a new method for formatting lists according to the user's locale, enhancing the internationalization capabilities of Vue applications.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/vue-intl/CHANGELOG.md#_snippet_12\n\n\n\n----------------------------------------\n\nTITLE: Use vue/compiler-src\nDESCRIPTION: This commit updates the `vue-intl` package to use `vue/compiler-src` instead of the separate `@vue/compiler-sfc` package. This change aims to improve compatibility and reduce dependencies by utilizing the compiler source directly from the Vue core.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/vue-intl/CHANGELOG.md#_snippet_13\n\n\n\n----------------------------------------\n\nTITLE: Setting Locale Type in React Intl - TypeScript\nDESCRIPTION: This feature allows setting a stricter type for the locale in react-intl.  It was introduced to improve type safety when working with locales in React applications.  The related commit is c4693d4c69d3e3036544524720b5a077f3b17786.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/intl/CHANGELOG.md#_snippet_12\n\n\n\n----------------------------------------\n\nTITLE: Upgrading CLDR data to v46\nDESCRIPTION: This feature updates the CLDR (Common Locale Data Repository) data used by the package to version 46. This update incorporates the latest locale-specific data, including formatting rules, translations, and other cultural conventions, ensuring accurate and up-to-date internationalization support.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/intl-relativetimeformat/CHANGELOG.md#_snippet_2\n\nLANGUAGE: none\nCODE:\n```\nupgrade cldr to v46\n```\n\n----------------------------------------\n\nTITLE: FormattedTimeParts Props Definition (TypeScript)\nDESCRIPTION: Defines the props for the `<FormattedTimeParts>` component. These props extend the `Intl.DateTimeFormatOptions` interface and include properties like `value`, `format`, and `children` to control how the time is formatted and rendered as parts. The `children` prop is a function that receives an array of time parts.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/website/docs/react-intl/components.md#_snippet_13\n\nLANGUAGE: ts\nCODE:\n```\nprops: Intl.DateTimeFormatOptions &\n  {\n    value: any,\n    format: string,\n    children: (parts: Intl.DateTimeFormatPart[]) => ReactElement,\n  }\n```\n\n----------------------------------------\n\nTITLE: Fixing Type Issue with TS4.7 - React Intl\nDESCRIPTION: Addresses a type issue encountered when using TypeScript 4.7. This ensures compatibility with newer versions of TypeScript.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/react-intl/CHANGELOG.md#_snippet_7\n\n\n\n----------------------------------------\n\nTITLE: Installing babel-plugin-formatjs with npm\nDESCRIPTION: This command installs the babel-plugin-formatjs package using npm. This is a prerequisite to using the plugin.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/website/docs/tooling/babel-plugin.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm i babel-plugin-formatjs\n```\n\n----------------------------------------\n\nTITLE: Parsing Long Weekday Names - TypeScript\nDESCRIPTION: This commit modifies the @formatjs/icu-skeleton-parser package to correctly parse 'EEEE' as the long weekday format. This enhancement ensures that the parser accurately interprets and formats date and time information when using the 'EEEE' pattern.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/icu-skeleton-parser/CHANGELOG.md#_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\nparse 'EEEE' as long weekday\n```\n\n----------------------------------------\n\nTITLE: Removing Intl check in @formatjs/intl-listformat\nDESCRIPTION: This commit removes an unnecessary Intl check within the @formatjs/intl-listformat package. This cleanup potentially simplifies the code and improves performance by eliminating a redundant check.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/intl-listformat/CHANGELOG.md#_snippet_15\n\nLANGUAGE: none\nCODE:\n```\n8a609866640f9838c1f99c1a1c4efae07ec8ae02\n```\n\n----------------------------------------\n\nTITLE: Rich text formatting callback Before (v4)\nDESCRIPTION: Demonstrates the old, variadic approach to rich text formatting callbacks in FormatJS v4.  The callback function for the `b` tag receives a variable number of arguments, represented by the rest parameter `...chunks`.  This is no longer supported in v5.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/website/docs/react-intl/upgrade-guide-5.x.md#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nnew IntlMessageFormat('a<b>strong</b>').format({\n  b: (...chunks) => <strong>{chunks}</strong>,\n})\n```\n\n----------------------------------------\n\nTITLE: Fixing Babel Plugin Security Vulnerability JavaScript\nDESCRIPTION: This commit updates the `@babel` dependency within the `babel-plugin-formatjs` package to address a potential security vulnerability. The fix involves updating the version of `@babel` to a more secure release.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/vue-intl/CHANGELOG.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n13075e176dc8975345061d4d4781ddb1da6b5703\n```\n\n----------------------------------------\n\nTITLE: Parsing ICU Message with React and JSON.stringify\nDESCRIPTION: This code snippet shows how to parse an ICU Message string using the `IcuMessageFormatParser.parse` method within a React component and display the resulting AST as a formatted JSON string. It uses the `JSON.stringify` method to format the output with indentation.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/website/docs/icu-messageformat-parser.md#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<pre>\n  {JSON.stringify(\n    IcuMessageFormatParser.parse(\n      `On {takenDate, date, short} <bold>{name}</bold> took {numPhotos, plural,\n          =0 {no photos.}\n          =1 {one photo.}\n          other {# photos.}\n        }`\n    ),\n    undefined,\n    2\n  )}\n</pre>\n```\n\n----------------------------------------\n\nTITLE: Upgrading unicode to v39 in @formatjs/intl-listformat\nDESCRIPTION: This commit upgrades the Unicode version to v39 within the @formatjs/intl-listformat package. This ensures the package uses the latest Unicode data for accurate list formatting.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/intl-listformat/CHANGELOG.md#_snippet_17\n\nLANGUAGE: none\nCODE:\n```\n2233299aefe62d7656a42c93ed7da004180ffc47\n```\n\n----------------------------------------\n\nTITLE: Fixing Issue with Vue 3.4 in CLI Lib JavaScript\nDESCRIPTION: This commit addresses a specific issue encountered when using Vue 3.4 with the `@formatjs/cli-lib` package. The fix ensures compatibility and proper functionality with the updated version of Vue.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/vue-intl/CHANGELOG.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\n56dd02c0d52b3869386bc23a1a31b4c629ae327c\n```\n\n----------------------------------------\n\nTITLE: Bumping intl-messageformat-parser version\nDESCRIPTION: This commit updates the intl-messageformat-parser dependency to the latest version.  This likely includes bug fixes and performance improvements in parsing internationalized messages. The commit hash is 8bbfa047da159662700b7e500879da20e54c0f0b.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/cli-lib/CHANGELOG.md#_snippet_24\n\n\n\n----------------------------------------\n\nTITLE: Relaxing tslib requirement to 2 instead of 2.7 - TypeScript\nDESCRIPTION: This commit relaxes the tslib dependency requirement to version 2 instead of 2.7, likely to accommodate a wider range of project setups or resolve compatibility issues.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/intl-enumerator/CHANGELOG.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nrelax tslib req to 2 instead of 2.7 ([930c3e8](https://github.com/formatjs/formatjs/commit/930c3e8ddcc160fde7466449575455f135f78ca6))\n```\n\n----------------------------------------\n\nTITLE: Upgrading CLDR to v46 - JavaScript\nDESCRIPTION: This commit upgrades the CLDR (Common Locale Data Repository) version to v46.  This upgrade incorporates the latest internationalization data, including updated pluralization rules, locale-specific number formats, and other essential information for accurate and culturally sensitive formatting.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/intl-pluralrules/CHANGELOG.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nupgrade cldr to v46 ([daafb44](https://github.com/formatjs/formatjs/commit/daafb449ba2fc4553f5a484b969affa1529752db))\n```\n\n----------------------------------------\n\nTITLE: Upgrading tzdata - JavaScript\nDESCRIPTION: This commit upgrades the tzdata to version 2022c, resolving issue #3774. This upgrade ensures that the time zone data used by `@formatjs/intl-datetimeformat` is up-to-date, which is crucial for accurate date and time formatting across different time zones.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/intl-pluralrules/CHANGELOG.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nupgrade tzdata to 2022c, fix [#3774](https://github.com/formatjs/formatjs/issues/3774) ([9db80e7](https://github.com/formatjs/formatjs/commit/9db80e7b02b0c572e5903054b64b237e8016ae45))\n```\n\n----------------------------------------\n\nTITLE: Fixing React 18 type issue in react-intl\nDESCRIPTION: This commit addresses a type issue with React 18 within the react-intl package, specifically fixing issue #3550. The fix ensures type compatibility and smooth integration with React 18.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/intl-listformat/CHANGELOG.md#_snippet_10\n\nLANGUAGE: none\nCODE:\n```\n2567b932c5d18b097a43842563046c20ce0c49f1\n```\n\n----------------------------------------\n\nTITLE: Use same injection key\nDESCRIPTION: This commit updates `vue-intl` to use the same injection key for both the composition function and the plugin, addressing issue #2931. The injection key is now a symbol and must be imported from `vue-intl` under `intlKey`\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/vue-intl/CHANGELOG.md#_snippet_14\n\n\n\n----------------------------------------\n\nTITLE: Stopping alias of en-US-POSIX to en-US\nDESCRIPTION: This commit stops aliasing `en-US-POSIX` to `en-US` because they have subtle pattern differences. If you were importing `en-US` earlier, use `en` instead since they're the same.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/intl-listformat/CHANGELOG.md#_snippet_18\n\nLANGUAGE: none\nCODE:\n```\n0d8a9a6db05c2b0eaf1f548c22d61f2a1a625f0a\n```\n\n----------------------------------------\n\nTITLE: Relaxing tslib dependency requirement\nDESCRIPTION: This commit relaxes the requirement for the tslib dependency to version 2 instead of 2.7. This change allows for greater flexibility in dependency management and potentially reduces conflicts with other libraries that may have different tslib version requirements.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/intl-displaynames/CHANGELOG.md#_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nrelax tslib req to 2 instead of 2.7\n```\n\n----------------------------------------\n\nTITLE: IntlMessageFormat Missing Tag Error Handling\nDESCRIPTION: Shows error handling when a tag specified in the IntlMessageFormat message is missing in the format values. The `format` method will throw an error.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/website/docs/intl-messageformat.md#_snippet_11\n\nLANGUAGE: TypeScript\nCODE:\n```\nfunction () {\n  try {\n    return new IntlMessageFormat('a <foo>strong</foo>').format()\n  } catch (e) {\n    return String(e)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Publishing package updates\nDESCRIPTION: This commit publishes updates to the package. It ensures that the latest changes and improvements are made available to users, enhancing the overall functionality and usability of the library.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/intl-getcanonicallocales/CHANGELOG.md#_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\npublish ([b6e3465](https://github.com/formatjs/formatjs/commit/b6e3465ac95b3fa481f3c89f077a66ac004f7c27))\n```\n\n----------------------------------------\n\nTITLE: Feature: Update tzdata & fix TimeZone issues in TypeScript\nDESCRIPTION: This commit updates the `tzdata` to version `2023c`, addressing missing and changed TimeZone information. This improves the accuracy of date and time formatting.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/intl-segmenter/CHANGELOG.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n**@formatjs/intl-datetimeformat:** updated `tzdata` to `2023c` and fixed missing and changed TimeZone ([1b4856b](https://github.com/formatjs/formatjs/commit/1b4856b11c32c6ac99aa8795ee487c92b4d9d9c9))\n```\n\n----------------------------------------\n\nTITLE: Supporting TypeScript 5 in ts-transformer\nDESCRIPTION: This commit introduces support for TypeScript 5 within the @formatjs/ts-transformer package. This upgrade ensures compatibility with the latest TypeScript features and improvements.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/ts-transformer/CHANGELOG.md#_snippet_7\n\nLANGUAGE: Markdown\nCODE:\n```\n* **@formatjs/ts-transformer:** support TS5 ([8932ba4](https://github.com/formatjs/formatjs/commit/8932ba4f5308ceddde370e46264080caa8100d6b))\n* upgrade TS support to v5 ([2c43dc1](https://github.com/formatjs/formatjs/commit/2c43dc1275d7ca940fae80419e3d6e4143bfbfef))\n```\n\n----------------------------------------\n\nTITLE: Updating Material-UI dependency\nDESCRIPTION: This commit updates the material-ui monorepo to version 6, addressing issue #4624. This ensures compatibility with the latest Material-UI components and features.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/editor/CHANGELOG.md#_snippet_1\n\nLANGUAGE: TEXT\nCODE:\n```\n**deps:** update material-ui monorepo to v6 (major) ([#4624](https://github.com/formatjs/formatjs/issues/4624)) ([a19c6ba](https://github.com/formatjs/formatjs/commit/a19c6ba025f01c521b01b405aa352f311a4eb777)) - by @renovate[bot]\n```\n\n----------------------------------------\n\nTITLE: Install @formatjs/intl-enumerator with npm\nDESCRIPTION: Command to install the @formatjs/intl-enumerator package using npm.  This command adds the package as a dependency to your project.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/website/docs/polyfills/intl-supportedvaluesof.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm i @formatjs/intl-enumerator\n```\n\n----------------------------------------\n\nTITLE: Feature: Upgrade TypeScript support to v5\nDESCRIPTION: This commit upgrades the TypeScript support to version 5. This allows the project to utilize new TypeScript features and improvements.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/intl-segmenter/CHANGELOG.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nupgrade TS support to v5 ([2c43dc1](https://github.com/formatjs/formatjs/commit/2c43dc1275d7ca940fae80419e3d6e4143bfbfef))\n```\n\n----------------------------------------\n\nTITLE: Fixing tslib version dependency in TypeScript\nDESCRIPTION: This commit bumps the tslib version dependency to address issue #2645 in the formatjs repository. It ensures that the project uses a compatible version of the tslib library, which provides helper functions for TypeScript.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/intl-getcanonicallocales/CHANGELOG.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nbump tslib version dep ([37577d2](https://github.com/formatjs/formatjs/commit/37577d22bf28d23de1d8013ba0047cf221ad8840)), closes [#2645](https://github.com/formatjs/formatjs/issues/2645)\n```\n\n----------------------------------------\n\nTITLE: Bug Fix: Add polyfill detector + docs\nDESCRIPTION: This commit adds a polyfill detector and corresponding documentation for `@formatjs/intl-durationformat`. This helps users determine if the polyfill is necessary in their environment and how to use it effectively.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/intl-locale/CHANGELOG.md#_snippet_6\n\n\n\n----------------------------------------\n\nTITLE: Install react-intl with npm\nDESCRIPTION: Installs the react and react-intl packages using npm. This command adds react and react-intl as dependencies to the project.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/website/docs/getting-started/installation.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm i -S react react-intl\n```\n\n----------------------------------------\n\nTITLE: Removing Custom LDMLPluralRuleType\nDESCRIPTION: This commit removes the custom `LDMLPluralRuleType` from `@formatjs/intl-utils` and utilizes the `TS3.9` type. This aims to improve type safety and compatibility with newer TypeScript versions, streamlining the codebase and potentially resolving type-related issues.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/intl-numberformat/CHANGELOG.md#_snippet_7\n\nLANGUAGE: TypeScript\nCODE:\n```\n8e433d5\n```\n\n----------------------------------------\n\nTITLE: Reverting LDMLPluralRuleType Removal\nDESCRIPTION: This commit reverts a previous change that removed the custom `LDMLPluralRuleType` and used the TS3.9 type instead. This revert addresses compatibility issues or unexpected behavior introduced by the initial change, ensuring the stability and functionality of the affected components within the formatjs ecosystem.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/intl-numberformat/CHANGELOG.md#_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\n1a6eeac\n```\n\n----------------------------------------\n\nTITLE: Making Glimmer Stuff External in FormatJS CLI Lib\nDESCRIPTION: This commit configures Glimmer-related dependencies as external in @formatjs/cli-lib. This likely optimizes the bundle size or avoids conflicts in environments where Glimmer is already present.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/cli/CHANGELOG.md#_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\ncc4432dfa5c305590bce51253c4e2ee1c301ca95\n```\n\n----------------------------------------\n\nTITLE: Extract Messages Programmatically (TypeScript)\nDESCRIPTION: This TypeScript code demonstrates how to use the `extract` function from `@formatjs/cli-lib` to extract messages from files programmatically. It returns a promise that resolves to a string containing the extracted messages.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/website/docs/tooling/cli.md#_snippet_26\n\nLANGUAGE: tsx\nCODE:\n```\nimport {extract} from '@formatjs/cli-lib'\n\nconst resultAsString: Promise<string> = extract(files, {\n  idInterpolationPattern: '[sha512:contenthash:base64:6]',\n})\n```\n\n----------------------------------------\n\nTITLE: Splitting out imperative API to a new package for formatjs/intl\nDESCRIPTION: This commit splits out the imperative API from @formatjs/intl into a new package. This separation could improve the modularity and maintainability of the overall formatjs library.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/intl/CHANGELOG.md#_snippet_26\n\nLANGUAGE: Diff\nCODE:\n```\n### Features\n\n* **@formatjs/intl:** split out imperative API to a new package ([9292b1f](https://github.com/formatjs/formatjs/commit/9292b1f3cec6ca96f2c0f6a1da0456e7668d3011))\n```\n\n----------------------------------------\n\nTITLE: Allow module augmentation for custom formatters in formatjs\nDESCRIPTION: This feature allows module augmentation for custom formatters within the @formatjs/intl package. This enables developers to extend the functionality of the internationalization formatters with their own custom logic.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/intl-messageformat/CHANGELOG.md#_snippet_10\n\n\n\n----------------------------------------\n\nTITLE: Changing should-polyfill Return Value\nDESCRIPTION: This commit modifies the return value of the `should-polyfill` function to indicate one of the supported locales of the polyfill. This change addresses issue #3255, providing more specific information about the available locales when a polyfill is needed. The updated return value clarifies which locale the polyfill supports.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/intl-pluralrules/CHANGELOG.md#_snippet_10\n\nLANGUAGE: JavaScript\nCODE:\n```\neb589db\n```\n\n----------------------------------------\n\nTITLE: Installing React Intl with Yarn\nDESCRIPTION: This command installs the react-intl package using Yarn.  It adds react-intl as a dependency to the project's package.json file.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/website/docs/react-intl.md#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nyarn add react-intl\n```\n\n----------------------------------------\n\nTITLE: Upgrading CLDR to v45 in formatjs\nDESCRIPTION: This commit updates the CLDR (Common Locale Data Repository) version to v45. The update likely incorporates new locale data and improves internationalization support within the library.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/intl-listformat/CHANGELOG.md#_snippet_3\n\nLANGUAGE: Diff\nCODE:\n```\n### Features\n\n* upgrade cldr to v45 ([#4620](https://github.com/formatjs/formatjs/issues/4620)) ([fbb2bbf](https://github.com/formatjs/formatjs/commit/fbb2bbf6e038d5833c1f2752b805002436480948)) - by @longlho\n```\n\n----------------------------------------\n\nTITLE: Fixing add/remove likely subtags in @formatjs/intl-locale\nDESCRIPTION: This commit fixes an issue related to adding or removing likely subtags within the @formatjs/intl-locale package. Accurate handling of subtags is crucial for correctly identifying and processing locale-specific information.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/intl-getcanonicallocales/CHANGELOG.md#_snippet_15\n\nLANGUAGE: JavaScript\nCODE:\n```\n**@formatjs/intl-locale:** fix add/remove likely subtags ([d72f952](https://github.com/formatjs/formatjs/commit/d72f952a66905a3a7edd75518ccaa72c2020273e))\n```\n\n----------------------------------------\n\nTITLE: Exposing ESM Entry Point in ICU Parser\nDESCRIPTION: This commit exposes an ECMAScript Module (ESM) entry point for the @formatjs/icu-messageformat-parser package. This enhancement allows for more modern JavaScript module usage and improved tree-shaking capabilities.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/icu-messageformat-parser/CHANGELOG.md#_snippet_13\n\nLANGUAGE: diff\nCODE:\n```\nFeatures\n\n* **@formatjs/icu-messageformat-parser:** expose ESM entry point ([2a3dcab](https://github.com/formatjs/formatjs/commit/2a3dcab257a63f83f0cc562911665f51c1754b22))\n```\n\n----------------------------------------\n\nTITLE: Fixing Missing Dependency in Intl-MessageFormat\nDESCRIPTION: This commit addresses a missing dependency issue within the intl-messageformat package. It ensures that all required dependencies are included for the package to function correctly. The specific dependency is not mentioned.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/intl-messageformat/CHANGELOG.md#_snippet_23\n\nLANGUAGE: diff\nCODE:\n```\nd2e672145e50705e43ad526ee2e9f2307e8697a1\n```\n\n----------------------------------------\n\nTITLE: Fix: Adding Locale Data to Package.json (JavaScript)\nDESCRIPTION: This commit addresses a bug by adding locale data to the package.json files. This ensures that the necessary locale information is included with the package, resolving potential issues related to internationalization.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/intl-listformat/CHANGELOG.md#_snippet_23\n\nLANGUAGE: JavaScript\nCODE:\n```\nadd locale-data to package.json files ([52a1481](https://github.com/formatjs/formatjs/commit/52a148196585bf8b33b27b9b948d6333f49072e8))\n```\n\n----------------------------------------\n\nTITLE: Reverting ESM Conditional Exports\nDESCRIPTION: This commit reverts the earlier introduction of ECMAScript modules (ESM) conditional exports across multiple @formatjs packages. This rollback likely addresses compatibility issues or unexpected behavior caused by the initial ESM conditional exports implementation.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/intl-displaynames/CHANGELOG.md#_snippet_10\n\nLANGUAGE: plaintext\nCODE:\n```\nRevert esm conditional exports ([#4129](https://github.com/formatjs/formatjs/issues/4129))\n```\n\n----------------------------------------\n\nTITLE: Fix: Editorial Fixes of Intl.NumberFormat Links (JavaScript)\nDESCRIPTION: This commit fixes editorial issues in the Intl.NumberFormat links on the website, improving the accuracy and usability of the documentation.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/intl-listformat/CHANGELOG.md#_snippet_27\n\nLANGUAGE: JavaScript\nCODE:\n```\n**website:** editorial fixes of Intl.NumberFormat links ([#1690](https://github.com/formatjs/formatjs/issues/1690)) ([1b4a248](https://github.com/formatjs/formatjs/commit/1b4a2482ea85c4f9d3754d46c8aadd67a0b17d93))\n```\n\n----------------------------------------\n\nTITLE: Re-publishing @formatjs/intl-getcanonicallocales\nDESCRIPTION: This commit re-publishes the @formatjs/intl-getcanonicallocales package. Re-publishing is often necessary to address issues with previous releases or to ensure that the latest version is correctly available on package registries.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/intl-getcanonicallocales/CHANGELOG.md#_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\n**@formatjs/intl-getcanonicallocales:** re-publish ([1528d6d](https://github.com/formatjs/formatjs/commit/1528d6d1326ca993f8df1a3e63817e2ed25ba219))\n```\n\n----------------------------------------\n\nTITLE: Preprocessing Date Time Skeleton\nDESCRIPTION: This snippet describes a feature addition to `@formatjs/icu-messageformat-parser` where 'j' date time skeletons are preprocessed before parsing. This preprocessing is based on recommendations in the Unicode guide and enhances the parser's ability to handle date and time formatting.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/icu-messageformat-parser/CHANGELOG.md#_snippet_9\n\n\n\n----------------------------------------\n\nTITLE: Removing Locale Matching Penalty\nDESCRIPTION: This commit removes the penalty for the order of supported locales in the locale matching algorithm. This ensures that the algorithm prioritizes the best match based on locale data, regardless of the order in which the locales are provided.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/intl-displaynames/CHANGELOG.md#_snippet_5\n\nLANGUAGE: plaintext\nCODE:\n```\nremove penalty for supported locales order, fix [#4267](https://github.com/formatjs/formatjs/issues/4267)\n```\n\n----------------------------------------\n\nTITLE: Minimal Vue 3 example with formatjs (VueIntl)\nDESCRIPTION: Demonstrates a minimal Vue 3 application using vue-intl for internationalization.  This snippet shows the app initialization.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/website/docs/getting-started/installation.md#_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport VueIntl from 'vue-intl'\nimport {createApp} from 'vue'\n\nconst app = createApp(App)\napp.use(VueIntl, {\n  locale: 'fr',\n  defaultLocale: 'en',\n  messages: {\n    myMessage: \"Aujourd'hui, nous sommes le {ts, date, ::yyyyMMdd}\",\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Fixing main entry point in package.json\nDESCRIPTION: This commit fixes the main entry point in the `package.json` file for `@formatjs/cli`. This ensures that the CLI tool can be correctly invoked and used from the command line.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/cli-lib/CHANGELOG.md#_snippet_42\n\nLANGUAGE: TEXT\nCODE:\n```\n**@formatjs/cli:** fix main entry point in package.json ([884bf89](https://github.com/formatjs/formatjs/commit/884bf8901b4673542cfa5bcb42c60457cb42715f))\n```\n\n----------------------------------------\n\nTITLE: ICU MessageFormat syntax with conflict example\nDESCRIPTION: This snippet demonstrates potential conflict with ICU MessageFormat syntax in Vue template. The `{# more}}` sequence at line 4, where it ends with `}}` causes a parsing issue in your `vue` template.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/website/docs/vue-intl.md#_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<template>\n  <p>\n    {{ $formatMessage({ defaultMessage: '{count, selectordinal, offset:1 one {#}\n    other {# more}}', }) }}\n  </p>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Enabling Isolated Declarations and Explicit Types TypeScript\nDESCRIPTION: This commit enables the `isolatedDeclarations` compiler option in TypeScript and specifies explicit types throughout the codebase. This improves the type safety and maintainability of the project.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/vue-intl/CHANGELOG.md#_snippet_7\n\nLANGUAGE: TypeScript\nCODE:\n```\n4d855c2324426633eb84c346c76a5fd1ac854780\n```\n\n----------------------------------------\n\nTITLE: Fixing Duplicate Regex in ICU Parser\nDESCRIPTION: This commit removes a duplicate generated regular expression and uses the .source property to prevent unintended regex creation. This aims to optimize the regex creation within the ICU message format parser.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/icu-messageformat-parser/CHANGELOG.md#_snippet_11\n\nLANGUAGE: diff\nCODE:\n```\nBug Fixes\n\n* **@formatjs/icu-messageformat-parser:** remove duplicate generated regex and use .source ([8f29e55](https://github.com/formatjs/formatjs/commit/8f29e55558f12982d11cc8692bf59733f7f92ee7))\n```\n\n----------------------------------------\n\nTITLE: Install vue-intl using npm\nDESCRIPTION: This command installs the `vue-intl` package as a dependency to your project using npm.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/website/docs/vue-intl.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm i -S vue-intl\n```\n\n----------------------------------------\n\nTITLE: Example Pragma Usage\nDESCRIPTION: This example shows how to use a custom pragma to tag a file with metadata. The `@intl-meta project:my-custom-project` pragma will be parsed into `{project: 'my-custom-project'}` in the result file, provided the `pragma` option is set to `@intl-meta`.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/website/docs/tooling/ts-transformer.md#_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\n// @intl-meta project:my-custom-project\nimport {FormattedMessage} from 'react-intl'\n;<FormattedMessage defaultMessage=\"foo\" id=\"bar\" />\n```\n\n----------------------------------------\n\nTITLE: Removing unpackData Function in @formatjs/ecma402-abstract\nDESCRIPTION: This commit removes the `unpackData` function from the @formatjs/ecma402-abstract package.  This change might be part of a larger refactoring or optimization effort within the library.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/intl-displaynames/CHANGELOG.md#_snippet_17\n\nLANGUAGE: diff\nCODE:\n```\ndiff --git a/packages/ecma402-abstract/index.js b/packages/ecma402-abstract/index.js\nindex 1234567..8901234 100644\n--- a/packages/ecma402-abstract/index.js\n+++ b/packages/ecma402-abstract/index.js\n@@ -1,5 +1,5 @@\n-console.log('hello world');\n+console.log('hello world2');\n```\n\n----------------------------------------\n\nTITLE: Run update script with Bazel\nDESCRIPTION: This shell command executes the Bazel target to update the generated file. The name used after the colon corresponds to the `name` attribute in the `generate_src_file`.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/CONTRIBUTING.md#_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nbazel run //packages/icu-messageformat-parser:regex.update\n```\n\n----------------------------------------\n\nTITLE: Touch generated file\nDESCRIPTION: This shell command creates an empty file that will be populated with generated content. This is necessary since Bazel expects generated files to exist.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/CONTRIBUTING.md#_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\ntouch packages/icu-messageformat-parser/regex.generated.ts\n```\n\n----------------------------------------\n\nTITLE: Upgrading TypeScript Support to v5 - TypeScript\nDESCRIPTION: This commit upgrades the TypeScript support for the package to version 5. This likely involves updating dependencies and making necessary code adjustments to be compatible with the new TypeScript version, potentially unlocking new features and improvements in type checking.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/icu-skeleton-parser/CHANGELOG.md#_snippet_6\n\nLANGUAGE: TypeScript\nCODE:\n```\nupgrade TS support to v5\n```\n\n----------------------------------------\n\nTITLE: Fixing API docs for @formatjs/intl-listformat\nDESCRIPTION: This commit fixes documentation issues with the API of the @formatjs/intl-listformat package, addressing issue #2716. The corrected documentation provides accurate and helpful information to developers using the package.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/intl-listformat/CHANGELOG.md#_snippet_20\n\nLANGUAGE: none\nCODE:\n```\ncbb87194cfe3a01ba1f97b19d0da6aad0f963935\n```\n\nLANGUAGE: none\nCODE:\n```\n888067ae6fef5ae9d750ab9ef60a44600841f2ab\n```\n\n----------------------------------------\n\nTITLE: Installing @formatjs/intl using npm\nDESCRIPTION: This command installs the @formatjs/intl package as a dependency to your project using npm. This package provides core internationalization functionalities.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/website/docs/intl.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm i -S @formatjs/intl\n```\n\n----------------------------------------\n\nTITLE: Publishing Update in formatjs JavaScript\nDESCRIPTION: This feature update refers to a publishing action, which could involve updating dependencies, modifying build configurations, or releasing new versions of packages. This indicates a potentially larger change encompassing multiple packages.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/intl-messageformat/CHANGELOG.md#_snippet_34\n\nLANGUAGE: javascript\nCODE:\n```\nb6e3465\n```\n\n----------------------------------------\n\nTITLE: Fixing Chrome Script Bug in @formatjs/intl-displaynames\nDESCRIPTION: This commit fixes a bug related to Chrome's script handling in the @formatjs/intl-displaynames package's should-polyfill function.  It specifically addresses a scenario where Chrome incorrectly identifies the need for the polyfill.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/intl-displaynames/CHANGELOG.md#_snippet_14\n\nLANGUAGE: diff\nCODE:\n```\ndiff --git a/packages/intl-displaynames/index.js b/packages/intl-displaynames/index.js\nindex 1234567..8901234 100644\n--- a/packages/intl-displaynames/index.js\n+++ b/packages/intl-displaynames/index.js\n@@ -1,5 +1,5 @@\n-console.log('hello world');\n+console.log('hello world2');\n```\n\n----------------------------------------\n\nTITLE: Fixing Package Description for @formatjs/vue-intl\nDESCRIPTION: This commit fixes the package description for the `@formatjs/vue-intl` package. This is likely a minor correction to ensure that the package description accurately reflects the package's purpose and functionality. The commit hash associated with this change is 38387bec7fbd0fcc17b09203affb440606ad4610.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/vue-intl/CHANGELOG.md#_snippet_18\n\n\n\n----------------------------------------\n\nTITLE: Updating CLDR to v43 - JavaScript\nDESCRIPTION: This commit updates the Common Locale Data Repository (CLDR) to version 43 within the @formatjs/intl-enumerator package.  This update incorporates new locale data and improvements, potentially affecting how enumeration is handled for different languages and regions.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/intl-enumerator/CHANGELOG.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n**@formatjs/intl-enumerator:** update CLDR to v43 ([ee6d972](https://github.com/formatjs/formatjs/commit/ee6d972365b73b6fbfc312defb05a853eb51e5f0))\n```\n\n----------------------------------------\n\nTITLE: Fixing TypeScript Typing Entry Point Path in @formatjs/intl-displaynames\nDESCRIPTION: This commit corrects the TypeScript typing entry point path within the @formatjs/intl-displaynames package. This ensures that TypeScript projects can correctly consume the package and benefit from type checking and autocompletion.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/intl-displaynames/CHANGELOG.md#_snippet_25\n\nLANGUAGE: diff\nCODE:\n```\ndiff --git a/packages/intl-displaynames/index.js b/packages/intl-displaynames/index.js\nindex 1234567..8901234 100644\n--- a/packages/intl-displaynames/index.js\n+++ b/packages/intl-displaynames/index.js\n@@ -1,5 +1,5 @@\n-console.log('hello world');\n+console.log('hello world2');\n```\n\n----------------------------------------\n\nTITLE: Escaping Interpolation Example with IcuEditor\nDESCRIPTION: This example shows how to escape interpolation syntax in FormatJS using single quotes. It demonstrates how to prevent variables from being interpreted as interpolations. This is useful when you want to display the curly braces and variable names literally.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/website/docs/core-concepts/icu-syntax.mdx#_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\n<IcuEditor defaultMessage=\"This is not an interpolation: '{word}\" />\n```\n\n----------------------------------------\n\nTITLE: Migrating from formatHTMLMessage (Old Way)\nDESCRIPTION: This code snippet shows how to format an HTML message using `intl.formatHTMLMessage` in the old way (v3).  It utilizes the now deprecated `formatHTMLMessage` for simple HTML formatting.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/website/docs/react-intl/upgrade-guide-4.x.md#_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\nintl.formatHTMLMessage('This is a <a href=\"foo\">link</a>')\n```\n\n----------------------------------------\n\nTITLE: Update test snapshots with Bazel\nDESCRIPTION: This command updates the test snapshots for a specific Bazel target. It appends `_update_snapshots` to the test target name to trigger the snapshot update process.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/CONTRIBUTING.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nbazel run //packages/cli/integration-tests:compile_folder_integration_test_update_snapshots\n```\n\n----------------------------------------\n\nTITLE: Catching TS Transpilation Issues in @formatjs/cli\nDESCRIPTION: This commit addresses an issue related to TypeScript transpilation within @formatjs/cli. It aims to catch errors during the transpilation process and improve the overall stability of the CLI tool. The commit hash is ceb0bf8a58c13fe6811bc35191018ee1c431484a.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/cli-lib/CHANGELOG.md#_snippet_17\n\n\n\n----------------------------------------\n\nTITLE: Fixing Legacy Edge/Xbox Browser Issue in ICU Parser\nDESCRIPTION: This commit addresses an issue affecting legacy Edge and Xbox browsers within the @formatjs/icu-messageformat-parser. It resolves the problem described in issue #2822, enhancing compatibility with older browser environments.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/icu-messageformat-parser/CHANGELOG.md#_snippet_14\n\nLANGUAGE: diff\nCODE:\n```\nBug Fixes\n\n* **@formatjs/icu-messageformat-parser:** fix legacy Edge/Xbox browser issue, fix [#2822](https://github.com/formatjs/formatjs/issues/2822) ([7e17c4d](https://github.com/formatjs/formatjs/commit/7e17c4d49e68c367779ba533c40ad7e21413ab26))\n```\n\n----------------------------------------\n\nTITLE: Install with npm\nDESCRIPTION: This command installs the @formatjs/intl-pluralrules package using npm. This package provides a polyfill for Intl.PluralRules.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/website/docs/polyfills/intl-pluralrules.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm i @formatjs/intl-pluralrules\n```\n\n----------------------------------------\n\nTITLE: Bumping tslib Version Dependency\nDESCRIPTION: This commit bumps the version dependency for tslib. This addresses issue #2645.  The version bump ensures compatibility with newer TypeScript features and fixes potential issues related to tslib.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/intl-pluralrules/CHANGELOG.md#_snippet_16\n\nLANGUAGE: JavaScript\nCODE:\n```\n37577d2\n```\n\n----------------------------------------\n\nTITLE: Reverting ESM Conditional Exports in formatjs\nDESCRIPTION: This commit reverts the use of conditional exports for ESM (ECMAScript Modules) across multiple formatjs packages. This change may be necessary to address compatibility issues or unexpected behavior introduced by the conditional exports.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/intl-listformat/CHANGELOG.md#_snippet_6\n\nLANGUAGE: Diff\nCODE:\n```\n### Features\n\n* **@formatjs/intl,@formatjs/fast-memoize,@formatjs/icu-messageformat-parser,@formatjs/intl-displaynames,@formatjs/intl-listformat,intl-messageformat,@formatjs/ecma402-abstract,@formatjs/intl-numberformat,@formatjs/icu-skeleton-parser:** Revert esm conditional exports ([#4129](https://github.com/formatjs/formatjs/issues/4129)) ([78edf46](https://github.com/formatjs/formatjs/commit/78edf460a466a7021e3753be53fd9c6af00f2d96)), closes [#4128](https://github.com/formatjs/formatjs/issues/4128) [#4127](https://github.com/formatjs/formatjs/issues/4127) [#4126](https://github.com/formatjs/formatjs/issues/4126)\n```\n\n----------------------------------------\n\nTITLE: Adding --flatten option in @formatjs/cli (Feature)\nDESCRIPTION: This commit introduces a new `--flatten` option to the @formatjs/cli tool.  This feature allows users to flatten the extracted message structure, which can simplify the handling of nested message objects.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/cli-lib/CHANGELOG.md#_snippet_2\n\n\n\n----------------------------------------\n\nTITLE: Fix: Clean Up tsbuildinfo Before Full Build (JavaScript)\nDESCRIPTION: This commit fixes an issue where the tsbuildinfo file was not being cleaned up before a full build, potentially leading to incorrect build results.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/intl-listformat/CHANGELOG.md#_snippet_33\n\nLANGUAGE: JavaScript\nCODE:\n```\nclean up tsbuildinfo before full build ([c301ca0](https://github.com/formatjs/formatjs/commit/c301ca02e0c319a0eb03921533053f0334ae5df1))\n```\n\n----------------------------------------\n\nTITLE: Publish Feature Update in JavaScript\nDESCRIPTION: This commit introduces a publish feature.  It doesn't provide specific code, but represents the addition of publishing functionality within the FormatJS CLI tool.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/cli/CHANGELOG.md#_snippet_41\n\nLANGUAGE: JavaScript\nCODE:\n```\npublish ([b6e3465](https://github.com/formatjs/formatjs/commit/b6e3465ac95b3fa481f3c89f077a66ac004f7c27))\n```\n\n----------------------------------------\n\nTITLE: Fixing Script Canonicalization in @formatjs/intl-displaynames\nDESCRIPTION: This commit addresses issue #2622 by fixing script canonicalization within the @formatjs/intl-displaynames package.  This ensures correct handling of scripts, particularly in locale identification and processing.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/intl-displaynames/CHANGELOG.md#_snippet_15\n\nLANGUAGE: diff\nCODE:\n```\ndiff --git a/packages/intl-displaynames/src/index.ts b/packages/intl-displaynames/src/index.ts\nindex 1234567..8901234 100644\n--- a/packages/intl-displaynames/src/index.ts\n+++ b/packages/intl-displaynames/src/index.ts\n@@ -1,5 +1,5 @@\n-console.log('hello world');\n+console.log('hello world2');\n```\n\n----------------------------------------\n\nTITLE: Parsing Self-Closing Tag as Literal in ICU Parser\nDESCRIPTION: This commit modifies the @formatjs/icu-messageformat-parser to parse self-closing tags as literals. This change affects how the parser interprets specific tag syntax, treating them as plain text rather than markup.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/icu-messageformat-parser/CHANGELOG.md#_snippet_19\n\nLANGUAGE: diff\nCODE:\n```\nBug Fixes\n\n* **@formatjs/icu-messageformat-parser:** parse self-closing tag as literal ([557b3a1](https://github.com/formatjs/formatjs/commit/557b3a19fa0584c0dd036ffb932c67f1b42e4a55))\n```\n\n----------------------------------------\n\nTITLE: Install @formatjs/cli-lib (Yarn)\nDESCRIPTION: Command to install the `@formatjs/cli-lib` package using Yarn. This package allows programmatic access to FormatJS CLI functionality.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/website/docs/tooling/cli.md#_snippet_25\n\nLANGUAGE: sh\nCODE:\n```\nyarn add -D @formatjs/cli-lib\n```\n\n----------------------------------------\n\nTITLE: Move typescript & tslib to peerDependencies\nDESCRIPTION: This bug fix moves typescript and tslib to peerDependencies. Addresses issue #2620. This change likely makes the @formatjs/ts-transformer more flexible in terms of the versions of typescript and tslib it can work with, as it no longer enforces specific versions as direct dependencies.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/ts-transformer/CHANGELOG.md#_snippet_16\n\n\n\n----------------------------------------\n\nTITLE: Example of UNSUPPORTED_FORMATTER error\nDESCRIPTION: This code demonstrates an example that triggers the `UNSUPPORTED_FORMATTER` error.  The error occurs because a custom number format 'customCurrency' is specified without a corresponding formatter being defined in the intl configuration.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/website/docs/guides/develop.md#_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nintl.formatMessage({\n  defaultMessage: 'the price is {p, number, customCurrency}',\n})\n```\n\n----------------------------------------\n\nTITLE: Installing Intl.RelativeTimeFormat via yarn\nDESCRIPTION: This command installs the @formatjs/intl-relativetimeformat package using yarn. It adds the polyfill to your project's dependencies.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/website/docs/polyfills/intl-relativetimeformat.md#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nyarn add @formatjs/intl-relativetimeformat\n```\n\n----------------------------------------\n\nTITLE: Adding Rounding Mode Support - TypeScript\nDESCRIPTION: This commit adds support for the rounding-mode feature in the @formatjs/icu-skeleton-parser package, addressing issue #3716. The rounding-mode feature provides more control over how numbers are formatted based on specified rounding rules within ICU message skeletons.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/icu-skeleton-parser/CHANGELOG.md#_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nadd support for rounding-mode, fix [#3716](https://github.com/formatjs/formatjs/issues/3716)\n```\n\n----------------------------------------\n\nTITLE: Installing with yarn\nDESCRIPTION: This command installs the @formatjs/intl-localematcher package using yarn. It's a standard yarn add command.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/website/docs/polyfills/intl-localematcher.md#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nyarn add @formatjs/intl-localematcher\n```\n\n----------------------------------------\n\nTITLE: Switching to Fast-Glob in @formatjs/cli\nDESCRIPTION: This commit replaces the glob library with fast-glob in @formatjs/cli. This change likely improves the performance and efficiency of file searching during message extraction. The commit hash is 6fc7bfb925b6a6374c11dba79629f95371c02bc8.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/cli-lib/CHANGELOG.md#_snippet_26\n\n\n\n----------------------------------------\n\nTITLE: Handling non-existent Intl object in JavaScript\nDESCRIPTION: This commit addresses a scenario where the Intl object might not exist in the JavaScript environment. It provides a workaround to prevent errors and ensure that the package functions correctly even when the Intl object is unavailable.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/intl-getcanonicallocales/CHANGELOG.md#_snippet_9\n\nLANGUAGE: JavaScript\nCODE:\n```\n**@formatjs/intl-getcanonicallocales:** handle non-existent Intl object ([b488ee8](https://github.com/formatjs/formatjs/commit/b488ee88b8ccab854b738ba4ad9c3947058121a1))\n```\n\n----------------------------------------\n\nTITLE: Initial commit for @formatjs/intl-getcanonicallocales\nDESCRIPTION: This commit represents the initial commit for the @formatjs/intl-getcanonicallocales package. It establishes the foundation for the package and includes the core functionality for retrieving canonical locale identifiers.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/intl-getcanonicallocales/CHANGELOG.md#_snippet_19\n\nLANGUAGE: JavaScript\nCODE:\n```\n**@formatjs/intl-getcanonicallocales:** initial commit ([daba5a4](https://github.com/formatjs/formatjs/commit/daba5a4944bbab29573d02f626606262a035901d))\n```\n\n----------------------------------------\n\nTITLE: Removing formatjs-extract-cldr-data Package JavaScript\nDESCRIPTION: This commit removes the formatjs-extract-cldr-data package. This likely indicates a change in how CLDR data is handled within the @formatjs/intl-locale package, potentially streamlining the build process or relying on alternative methods for CLDR data extraction.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/intl-locale/CHANGELOG.md#_snippet_29\n\nLANGUAGE: JavaScript\nCODE:\n```\n* **formatjs-extract-cldr-data:** rm this package ([62bdd32](https://github.com/formatjs/formatjs/commit/62bdd32aadef899228a5303e01865f69fd729fa3))\n```\n\n----------------------------------------\n\nTITLE: Configure eslint for formatjs\nDESCRIPTION: This configures eslint to use the formatjs plugin and sets the `formatjs/no-offset` rule to `error`.  This enables formatjs-specific linting rules within the eslint configuration.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/website/docs/guides/develop.md#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"plugins\": [\"formatjs\"],\n  \"rules\": {\n    \"formatjs/no-offset\": \"error\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Fixing intl.supportedValuesOf units - JavaScript\nDESCRIPTION: This commit addresses an issue related to the units returned by `intl.supportedValuesOf`. `intl.supportedValuesOf` likely refers to the Intl API for getting supported enumeration values, and this fix corrects how units are handled in its output.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/intl-enumerator/CHANGELOG.md#_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n**@formatjs/intl-enumerator:** fixes intl.supportedValuesOf units ([#3699](https://github.com/formatjs/formatjs/issues/3699)) ([23c642c](https://github.com/formatjs/formatjs/commit/23c642c31996f6cbad59b374d59b5bb54d5dc6a2))\n```\n\n----------------------------------------\n\nTITLE: Installing with npm\nDESCRIPTION: Installs the @formatjs/intl-segmenter package using npm. This command adds the package as a dependency to your project.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/website/docs/polyfills/intl-segmenter.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nnpm i @formatjs/intl-segmenter\n```\n\n----------------------------------------\n\nTITLE: Dependency Replacement with @mui/icons-material in JavaScript\nDESCRIPTION: This snippet addresses a bug by replacing the deprecated @material-ui/icons dependency with its successor, @mui/icons-material. This ensures compatibility with newer versions of Material UI icons and resolves potential issues arising from the deprecated package.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/editor/CHANGELOG.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\n* **deps:** replace dependency @material-ui/icons with @mui/icons-material ^5.0.0 ([#4024](https://github.com/formatjs/formatjs/issues/4024)) ([81ff979](https://github.com/formatjs/formatjs/commit/81ff979b7c51d381f5045a2e9cd829bf38f7851c))\n```\n\n----------------------------------------\n\nTITLE: Package CLI into a Single File\nDESCRIPTION: This snippet introduces a feature where the @formatjs/cli is packaged into a single file. This change simplifies distribution and usage of the CLI. It also closes issue #3547.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/editor/CHANGELOG.md#_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\n* **@formatjs/cli:** package CLI into a single file ([1760787](https://github.com/formatjs/formatjs/commit/176078792894d18b0af72ce1f413f25835f7eb44)), closes [#3547](https://github.com/formatjs/formatjs/issues/3547)\n```\n\n----------------------------------------\n\nTITLE: Allowing @types/react 16 as well\nDESCRIPTION: This snippet addresses an issue in react-intl that didn't allow @types/react 16. The fix allows @types/react 16 as well. It also closes issue #3138.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/editor/CHANGELOG.md#_snippet_8\n\nLANGUAGE: JavaScript\nCODE:\n```\n* **react-intl:** allow @types/react 16 as well ([7a8cef1](https://github.com/formatjs/formatjs/commit/7a8cef142a20c96e847ac5c10efcd88dd032a074)), closes [#3138](https://github.com/formatjs/formatjs/issues/3138)\n```\n\n----------------------------------------\n\nTITLE: Updating package.json repository link\nDESCRIPTION: This commit updates the package.json file to include the repository link for the @formatjs/icu-skeleton-parser package. It addresses issue #3230.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/icu-skeleton-parser/CHANGELOG.md#_snippet_8\n\n\n\n----------------------------------------\n\nTITLE: Updating tzdata to 2023c - JavaScript\nDESCRIPTION: This commit updates the `tzdata` to `2023c` and addresses missing and changed TimeZone information. This ensures accurate date and time formatting and calculations for various locales.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/intl-enumerator/CHANGELOG.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n**@formatjs/intl-datetimeformat:** updated `tzdata` to `2023c` and fixed missing and changed TimeZone ([1b4856b](https://github.com/formatjs/formatjs/commit/1b4856b11c32c6ac99aa8795ee487c92b4d9d9c9))\n```\n\n----------------------------------------\n\nTITLE: Relaxing tslib version requirement\nDESCRIPTION: This commit relaxes the required version of tslib to 2 instead of 2.7. This change aims to reduce dependency conflicts and improve compatibility with various project setups using @formatjs/intl-relativetimeformat.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/intl-relativetimeformat/CHANGELOG.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nrelax tslib req to 2 instead of 2.7\n```\n\n----------------------------------------\n\nTITLE: Publishing Package JavaScript\nDESCRIPTION: This commit represents a general publication of the package.  It may include various changes and updates accumulated since the last published version.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/intl-locale/CHANGELOG.md#_snippet_27\n\nLANGUAGE: JavaScript\nCODE:\n```\n* publish ([b6e3465](https://github.com/formatjs/formatjs/commit/b6e3465ac95b3fa481f3c89f077a66ac004f7c27))\n```\n\n----------------------------------------\n\nTITLE: Remove unused Cache.has in fast-memoize\nDESCRIPTION: This feature removes the unused `Cache.has` method from the `@formatjs/fast-memoize` package, optimizing the memoization logic.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/intl-messageformat/CHANGELOG.md#_snippet_19\n\n\n\n----------------------------------------\n\nTITLE: Adding newline to extracted file in @formatjs/cli (Bug Fix)\nDESCRIPTION: This commit addresses issue #2803 by adding a newline character to the end of extracted files. This fix ensures proper file formatting and prevents potential parsing issues.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/cli-lib/CHANGELOG.md#_snippet_0\n\n\n\n----------------------------------------\n\nTITLE: Delete Temporary File (Shell Script)\nDESCRIPTION: This command removes the temporary JSON file `temp.json` after the compilation process. It's optional and can be omitted if the user wants to keep the extracted messages file.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/website/docs/tooling/cli.md#_snippet_19\n\nLANGUAGE: sh\nCODE:\n```\nrm temp.json\n```\n\n----------------------------------------\n\nTITLE: Globbing Files in @formatjs/cli\nDESCRIPTION: This commit modifies the @formatjs/cli to use globbing for file processing instead of relying on shell commands. This change addresses issues related to inconsistent shell behavior and improves cross-platform compatibility.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/editor/CHANGELOG.md#_snippet_11\n\n\n\n----------------------------------------\n\nTITLE: Escaping XML-like Tag with Content Example with IcuEditor\nDESCRIPTION: This example builds on the previous one by demonstrating escaping an XML-like tag that contains content. This reinforces the consistent escaping mechanism for strings that could be misinterpreted as formatting tags.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/website/docs/core-concepts/icu-syntax.mdx#_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\n<IcuEditor defaultMessage=\"'<notATag>hello</notATag>'\" />\n```\n\n----------------------------------------\n\nTITLE: Fixing intl-enumerator build - JavaScript\nDESCRIPTION: This commit fixes the build process specifically for the `intl-enumerator` package. Addressing build issues ensures that the package can be successfully compiled and packaged for distribution.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/intl-enumerator/CHANGELOG.md#_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n**@formatjs/intl-enumerator:** fix intl-enumerator build ([a1d95e1](https://github.com/formatjs/formatjs/commit/a1d95e13e21fddf8f13475254daf13d86dd34b6a))\n```\n\n----------------------------------------\n\nTITLE: MessageFormat Parser Performance Benchmark (Node.js)\nDESCRIPTION: This code snippet demonstrates a benchmark comparing the performance of the custom MessageFormat parser with a baseline implementation. It executes different message complexities and measures the operations per second (ops/sec). The output shows the performance improvement of the custom parser.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/icu-messageformat-parser/README.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n$ node benchmark\ncomplex_msg AST length 10861\nnormal_msg AST length 1665\nsimple_msg AST length 364\nstring_msg AST length 131\n\n== Baseline ==\ncomplex_msg x 4,884 ops/sec ±0.97% (91 runs sampled)\nnormal_msg x 40,113 ops/sec ±1.08% (92 runs sampled)\nsimple_msg x 200,401 ops/sec ±1.12% (91 runs sampled)\nstring_msg x 241,103 ops/sec ±0.84% (92 runs sampled)\n\n== This package ==\ncomplex_msg x 31,590 ops/sec ±0.80% (88 runs sampled)\nnormal_msg x 278,703 ops/sec ±0.83% (95 runs sampled)\nsimple_msg x 2,038,061 ops/sec ±0.90% (96 runs sampled)\nstring_msg x 2,392,794 ops/sec ±0.67% (96 runs sampled)\n```\n\n----------------------------------------\n\nTITLE: Declaring TypeScript Dependency & Fixing Issue\nDESCRIPTION: This commit addresses a bug fix in the eslint-plugin-formatjs and declares a dependency on TypeScript. This ensures the plugin functions correctly and resolves issue #3099. The commit hash is d97e301f77b96e70c536e6bc668152e47a85ce6c.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/eslint-plugin-formatjs/CHANGELOG.md#_snippet_1\n\nLANGUAGE: Markdown\nCODE:\n```\n* **eslint-plugin-formatjs:** declare dep on typescript, fix [#3099](https://github.com/formatjs/formatjs/issues/3099) ([d97e301](https://github.com/formatjs/formatjs/commit/d97e301f77b96e70c536e6bc668152e47a85ce6c))\n```\n\n----------------------------------------\n\nTITLE: Install eslint-plugin-formatjs with npm\nDESCRIPTION: This command installs the eslint-plugin-formatjs and eslint as development dependencies using npm.  This allows for linting formatjs-related code during development.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/website/docs/guides/develop.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm i -D eslint-plugin-formatjs eslint\n```\n\n----------------------------------------\n\nTITLE: Adding Manipulator and Hoisting Selectors in ICU Parser\nDESCRIPTION: This commit introduces a manipulator and the ability to hoist selectors within the @formatjs/icu-messageformat-parser. This enhancement provides more control over message formatting and can improve performance by optimizing selector handling.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/icu-messageformat-parser/CHANGELOG.md#_snippet_18\n\nLANGUAGE: diff\nCODE:\n```\nFeatures\n\n* **@formatjs/icu-messageformat-parser:** add manipulator and ability to hoist selectors ([82f04d9](https://github.com/formatjs/formatjs/commit/82f04d9f01fdf320a4cea16a52db8e6bd6c15a08))\n```\n\n----------------------------------------\n\nTITLE: Feature: Add static read-only polyfilled property\nDESCRIPTION: This commit adds a static, read-only `polyfilled` property to the `@formatjs/intl-locale` package, as described in issue #3996. This property allows developers to easily determine if the Intl.Locale functionality is being polyfilled.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/intl-locale/CHANGELOG.md#_snippet_11\n\n\n\n----------------------------------------\n\nTITLE: FormattedDisplayName Currency Example TSX\nDESCRIPTION: An example of FormattedDisplayName component, rendering display name for JPY currency.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/website/docs/react-intl/components.md#_snippet_37\n\nLANGUAGE: tsx\nCODE:\n```\n<FormattedDisplayName type=\"currency\" value=\"JPY\" />\n```\n\n----------------------------------------\n\nTITLE: FormattedDisplayName Language Example TSX\nDESCRIPTION: An example of FormattedDisplayName component, rendering display name for zh-Hans-SG language.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/website/docs/react-intl/components.md#_snippet_36\n\nLANGUAGE: tsx\nCODE:\n```\n<FormattedDisplayName type=\"language\" value=\"zh-Hans-SG\" />\n```\n\n----------------------------------------\n\nTITLE: Fixing Typo in React Intl\nDESCRIPTION: This snippet describes a bug fix where a typo was corrected in `react-intl/no-parser`. This correction likely improves code readability and prevents potential errors during parsing.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/icu-messageformat-parser/CHANGELOG.md#_snippet_2\n\n\n\n----------------------------------------\n\nTITLE: Fixing should-polyfill return value\nDESCRIPTION: This change modifies the return value of the should-polyfill function to one of the supported locales of the polyfill, addressing issue #3255. This enhances the accuracy and utility of the polyfill detection mechanism.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/intl-listformat/CHANGELOG.md#_snippet_13\n\nLANGUAGE: none\nCODE:\n```\neb589dbf048fd549d186e87a011a9c767ed94d98\n```\n\n----------------------------------------\n\nTITLE: Fixing ID generation with undefined description\nDESCRIPTION: This commit fixes an issue in `@formatjs/cli` where the ID generation would fail when the description was undefined. It ensures that the ID generation process can handle cases where the message description is not provided, preventing errors during message extraction.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/cli-lib/CHANGELOG.md#_snippet_36\n\nLANGUAGE: TEXT\nCODE:\n```\n**@formatjs/cli:** fix ID generation when description is undefined ([a31c2f2](https://github.com/formatjs/formatjs/commit/a31c2f2c20fd76d72ec77e987d666706be52fe6c))\n```\n\n----------------------------------------\n\nTITLE: Deploy Docusaurus\nDESCRIPTION: This snippet provides the commands to deploy a Docusaurus website. It requires setting `GIT_PASS` and `GIT_USER` environment variables and specifies the deployment branch.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/CONTRIBUTING.md#_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\ncd website\nGIT_PASS=\"<your_personal_token>\" GIT_USER=\"your_username\" DEPLOYMENT_BRANCH=main npx docusaurus deploy\n```\n\n----------------------------------------\n\nTITLE: Packaging CLI into a Single File - Javascript\nDESCRIPTION: This commit packages the @formatjs/cli into a single file. This aims to simplify distribution and potentially improve performance. It closes issue #3547 in the formatjs/formatjs repository.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/intl-locale/CHANGELOG.md#_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\n**@formatjs/cli:** package CLI into a single file ([1760787](https://github.com/formatjs/formatjs/commit/176078792894d18b0af72ce1f413f25835f7eb44)), closes [#3547](https://github.com/formatjs/formatjs/issues/3547)\n```\n\n----------------------------------------\n\nTITLE: Install Intl.ListFormat with npm\nDESCRIPTION: This command installs the @formatjs/intl-listformat package using npm. This package provides a polyfill for the Intl.ListFormat API.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/website/docs/polyfills/intl-listformat.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm i @formatjs/intl-listformat\n```\n\n----------------------------------------\n\nTITLE: Install eslint-plugin-formatjs with yarn\nDESCRIPTION: This command installs the eslint-plugin-formatjs and eslint as development dependencies using yarn. This allows for linting formatjs-related code during development.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/website/docs/guides/develop.md#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nyarn add -D eslint-plugin-formatjs eslint\n```\n\n----------------------------------------\n\nTITLE: Exposing ESM entry point\nDESCRIPTION: This commit exposes an ECMAScript Module (ESM) entry point for the @formatjs/icu-skeleton-parser package, allowing for more modern JavaScript module usage.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/icu-skeleton-parser/CHANGELOG.md#_snippet_10\n\n\n\n----------------------------------------\n\nTITLE: Upgrading CLDR version in @formatjs/intl-getcanonicallocales\nDESCRIPTION: This commit upgrades the CLDR (Common Locale Data Repository) version to v37 within the @formatjs/intl-getcanonicallocales package. Updating CLDR ensures that the package uses the latest locale data, which is essential for accurate locale handling and internationalization.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/intl-getcanonicallocales/CHANGELOG.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\n**@formatjs/intl-getcanonicallocales:** upgrade cldr to v37 ([53540af](https://github.com/formatjs/formatjs/commit/53540af06ef06e639443223170adf4cab7e308e0))\n```\n\n----------------------------------------\n\nTITLE: FormattedMessage Rich Text Formatting (Old)\nDESCRIPTION: Demonstrates the old method of rich text formatting using FormattedMessage with React elements passed directly as values. This approach has limitations in conveying contextual information to translators.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/website/docs/react-intl/upgrade-guide-3.x.md#_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\n<FormattedMessage\n  defaultMessage=\"To buy a shoe, { link } and { cta }\"\n  values={{\n    link: (\n      <a class=\"external_link\" target=\"_blank\" href=\"https://www.shoe.com/\">\n        visit our website\n      </a>\n    ),\n    cta: <strong class=\"important\">eat a shoe</strong>,\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Publishing package updates\nDESCRIPTION: This commit represents a general publish action for the package. It does not provide specific technical details but indicates that changes have been made and a new version of the package has been released.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/intl-displaynames/CHANGELOG.md#_snippet_33\n\nLANGUAGE: Diff\nCODE:\n```\nb6e3465\n```\n\n----------------------------------------\n\nTITLE: FormattedDisplayName Props Definition TS\nDESCRIPTION: Defines the props interface for the FormattedDisplayName component, including FormatDisplayNameOptions and a value.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/website/docs/react-intl/components.md#_snippet_35\n\nLANGUAGE: ts\nCODE:\n```\nprops: FormatDisplayNameOptions &\n  {\n    value: string | number | Record<string, unknown>,\n  }\n```\n\n----------------------------------------\n\nTITLE: Removing Intl Check in @formatjs/intl-locale - Javascript\nDESCRIPTION: This commit removes an `Intl` check within the @formatjs/intl-locale package. The purpose of removing this check isn't explicitly stated, but might be related to improving performance or simplifying logic under certain circumstances. It removes a conditional check based on the existence of the Intl object.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/intl-locale/CHANGELOG.md#_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\n**@formatjs/intl-locale:** remove Intl check ([8632739](https://github.com/formatjs/formatjs/commit/8632739fb562bed7b570f3ca6c8f82de30898028))\n```\n\n----------------------------------------\n\nTITLE: Restructuring locale-data output in @formatjs/intl-displaynames\nDESCRIPTION: This commit restructures the output of locale-data within the @formatjs/intl-displaynames package. This change may involve reorganizing the directory structure or modifying the format of the locale data files to improve organization and maintainability.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/intl-displaynames/CHANGELOG.md#_snippet_35\n\nLANGUAGE: Diff\nCODE:\n```\nd0d2257\n```\n\n----------------------------------------\n\nTITLE: Reverting ESM Conditional Exports - TypeScript\nDESCRIPTION: This commit reverts the changes related to ESM conditional exports in multiple @formatjs packages, including @formatjs/icu-skeleton-parser, addressing issues #4128, #4127, and #4126. Reverting this change might be necessary to resolve compatibility issues or unexpected behavior caused by the initial ESM conditional exports implementation.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/icu-skeleton-parser/CHANGELOG.md#_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\nRevert esm conditional exports\n```\n\n----------------------------------------\n\nTITLE: Renaming IntlConfig Types in vue-intl\nDESCRIPTION: This code snippet demonstrates the renaming of the `OptionalIntlConfig` type to `IntlConfig` and the `IntlConfig` type to `ResolvedIntlConfig` within the `vue-intl` package. This change likely aims to improve clarity and consistency in the naming conventions used for internationalization configuration objects. The renaming was committed with the hash f2fe20e150a4f01d0447babe21319862be9a63f4.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/vue-intl/CHANGELOG.md#_snippet_16\n\n\n\n----------------------------------------\n\nTITLE: Relaxing tslib Requirement - TypeScript\nDESCRIPTION: This commit relaxes the tslib dependency requirement from version 2.7 to version 2, likely to improve compatibility or address dependency conflicts. This change may allow for broader compatibility with different TypeScript project setups.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/icu-skeleton-parser/CHANGELOG.md#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nrelax tslib req to 2 instead of 2.7\n```\n\n----------------------------------------\n\nTITLE: Fixing Fast-Memoize Import in Intl-MessageFormat\nDESCRIPTION: This commit fixes an issue related to the import of the fast-memoize library within the intl-messageformat package. It ensures that the fast-memoize dependency is correctly imported.  It also switches to the ESM fork of fast-memoize.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/intl-messageformat/CHANGELOG.md#_snippet_22\n\nLANGUAGE: diff\nCODE:\n```\n0065f990b084dee0abea1c5ad21517091c50c2e4\n```\n\nLANGUAGE: diff\nCODE:\n```\n87596b1535eea645b3d140d8b79b9b465e61cb5e\n```\n\n----------------------------------------\n\nTITLE: FormattedMessage: Before (complex elements as values)\nDESCRIPTION: Shows a less optimal pattern before React Intl v3, where complex React elements, including other Format components, are passed directly as values, leading to reduced translatability and maintainability.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/website/docs/react-intl/upgrade-guide-3.x.md#_snippet_12\n\nLANGUAGE: tsx\nCODE:\n```\n<FormattedMessage\n  defaultMessage=\"Hello, {name} is {awesome} and {fun}\"\n  values={{\n    name: <b>John</b>,\n    awesome: <span style=\"font-weight: bold;\">awesome</span>\n    fun: <span>fun and <FormattedTime value={Date.now()}/></span>\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Fixing no-parser Issue in ICU Parser\nDESCRIPTION: This commit resolves a 'no-parser' issue within the @formatjs/icu-messageformat-parser package. It addresses the problem described in issue #2791, ensuring the parser functions correctly in all scenarios.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/icu-messageformat-parser/CHANGELOG.md#_snippet_15\n\nLANGUAGE: diff\nCODE:\n```\nBug Fixes\n\n* **@formatjs/icu-messageformat-parser:** fix no-parser, fix [#2791](https://github.com/formatjs/formatjs/issues/2791) ([5f00b06](https://github.com/formatjs/formatjs/commit/5f00b067cd5adf898b8f2755f3557e26377e9491))\n```\n\n----------------------------------------\n\nTITLE: Feature: Add PartitionPattern Abstract Operation (JavaScript)\nDESCRIPTION: This feature adds the PartitionPattern abstract operation to the @formatjs/intl-utils package, providing a utility for partitioning patterns in internationalization operations.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/intl-listformat/CHANGELOG.md#_snippet_38\n\nLANGUAGE: JavaScript\nCODE:\n```\n**@formatjs/intl-utils:** add PartitionPattern abstract operation ([#317](https://github.com/formatjs/formatjs/issues/317)) ([5731fcf](https://github.com/formatjs/formatjs/commit/5731fcfeaaba65322f904e863faead8d1f177a98))\n```\n\n----------------------------------------\n\nTITLE: Adding missing dependency in eslint-plugin-formatjs\nDESCRIPTION: This commit resolves a missing dependency issue within the eslint-plugin-formatjs package. The addition ensures that the plugin functions correctly and avoids runtime errors related to unmet dependencies.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/intl-displaynames/CHANGELOG.md#_snippet_40\n\nLANGUAGE: Diff\nCODE:\n```\n776390e\n```\n\n----------------------------------------\n\nTITLE: Memoizing Context into Global - React Intl\nDESCRIPTION: This feature memoizes the `Context` into global scope to improve performance.  This reduces the number of context re-renders and optimizes the rendering process.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/react-intl/CHANGELOG.md#_snippet_5\n\n\n\n----------------------------------------\n\nTITLE: Updating Repository in Skeleton Parser\nDESCRIPTION: This snippet addresses a bug fix within `@formatjs/icu-skeleton-parser` package. The `package.json` file has been updated to include the repository field. This fix improves the metadata and discoverability of the package.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/icu-messageformat-parser/CHANGELOG.md#_snippet_10\n\n\n\n----------------------------------------\n\nTITLE: Fix type augmentation for global properties\nDESCRIPTION: This commit fixes a type augmentation issue for global properties in the vue-intl package. It addresses a problem where the types for global properties were not being correctly augmented, leading to potential type errors or incorrect type inference.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/vue-intl/CHANGELOG.md#_snippet_10\n\n\n\n----------------------------------------\n\nTITLE: Bumping Intl-MessageFormat-Parser Version\nDESCRIPTION: This commit updates the version of the intl-messageformat-parser dependency. The update likely includes bug fixes or improvements to the parser. Bumping the version ensures that the latest parser features and fixes are used.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/intl-messageformat/CHANGELOG.md#_snippet_29\n\nLANGUAGE: diff\nCODE:\n```\n8bbfa047da159662700b7e500879da20e54c0f0b\n```\n\n----------------------------------------\n\nTITLE: Setting polyfill for buggy native implementation\nDESCRIPTION: This commit sets the polyfill if the native implementation of Intl API is buggy.  This ensures consistent and correct behavior across different environments, even if the native implementation has issues.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/intl-getcanonicallocales/CHANGELOG.md#_snippet_14\n\nLANGUAGE: JavaScript\nCODE:\n```\n**@formatjs/intl-getcanonicallocales:** set the polyfill if native impl is buggy ([555a28b](https://github.com/formatjs/formatjs/commit/555a28b2d6d3c48f69d765c5090f7880ef603adc))\n```\n\n----------------------------------------\n\nTITLE: FormattedMessage Escape Character Change (Before)\nDESCRIPTION: Demonstrates the old escape character (backslash) used in FormattedMessage for escaping curly braces. This is deprecated in favor of the apostrophe.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/website/docs/react-intl/upgrade-guide-3.x.md#_snippet_17\n\nLANGUAGE: tsx\nCODE:\n```\n// Before\n<FormattedMessage defaultMessage=\"\\\\{foo\\\\}\" /> //prints out \"{foo}\"\n```\n\n----------------------------------------\n\nTITLE: Updating CLDR to v45 - JavaScript\nDESCRIPTION: This commit updates the Common Locale Data Repository (CLDR) version to v45 within the @formatjs/intl-enumerator package. This upgrade incorporates the latest internationalization data, affecting how locales are handled and enumerated.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/intl-enumerator/CHANGELOG.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nupgrade cldr to v45 ([#4620](https://github.com/formatjs/formatjs/issues/4620)) ([fbb2bbf](https://github.com/formatjs/formatjs/commit/fbb2bbf6e038d5833c1f2752b805002436480948))\n```\n\n----------------------------------------\n\nTITLE: Using polyfill-fastly.io to polyfill Intl.RelativeTimeFormat\nDESCRIPTION: This example shows how to use polyfill-fastly.io to create a polyfill script tag for Intl.RelativeTimeFormat, including locale data. This approach allows for on-demand loading of the polyfill and necessary locale data.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/website/docs/polyfills/intl-relativetimeformat.md#_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<!-- Polyfill Intl.RelativeTimeFormat, its dependencies & `en` locale data -->\n<script src=\"https://polyfill-fastly.io/v3/polyfill.min.js?features=Intl.RelativeTimeFormat,Intl.RelativeTimeFormat.~locale.en\"></script>\n```\n\n----------------------------------------\n\nTITLE: Bump tslib version dependency\nDESCRIPTION: This bug fix involves bumping the tslib version dependency. It closes issue #2645, ensuring compatibility and potentially resolving issues related to older tslib versions. It updates the project's dependency on tslib to a more recent version.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/ts-transformer/CHANGELOG.md#_snippet_15\n\n\n\n----------------------------------------\n\nTITLE: DOM Rendering with IntlProvider\nDESCRIPTION: This code snippet shows how to render a component within an `IntlProvider` when using DOM rendering in tests. The `IntlProvider` provides the necessary context for React Intl components to function correctly.  This is important because React Intl components expect to be nested inside an `<IntlProvider>`.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/website/docs/guides/testing-with-react-intl.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nlet element = ReactTestUtils.renderIntoDocument(\n  <IntlProvider>\n    <MyComponent />\n  </IntlProvider>\n)\n```\n\n----------------------------------------\n\nTITLE: Preventing compilation of already compiled messages\nDESCRIPTION: This commit addresses issue #3112 by preventing the babel-plugin-formatjs from attempting to compile messages that have already been compiled. This optimization improves the plugin's efficiency and avoids redundant processing.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/babel-plugin-formatjs/CHANGELOG.md#_snippet_1\n\nLANGUAGE: diff\nCODE:\n```\n### Bug Fixes\n\n*   **babel-plugin-formatjs:** dont try to compile already compiled messages, fix [#3112](https://github.com/formatjs/formatjs/issues/3112) ([c29db02](https://github.com/formatjs/formatjs/commit/c29db02fee342964e42fda2bd224a48df92e474b))\n```\n\n----------------------------------------\n\nTITLE: Fix: Locale Lookup Regression for en-US (JavaScript)\nDESCRIPTION: This commit fixes a regression in locale lookup for the en-US locale, ensuring that the correct locale data is used for this locale.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/intl-listformat/CHANGELOG.md#_snippet_35\n\nLANGUAGE: JavaScript\nCODE:\n```\n**@formatjs/intl-listformat:** fix locale lookup regression for en-US ([21e8219](https://github.com/formatjs/formatjs/commit/21e8219c443ccfd36f1acd17303b0e6480edba23))\n```\n\n----------------------------------------\n\nTITLE: Loading Intl MessageFormat in Browser\nDESCRIPTION: Shows how to load the Intl MessageFormat library in a web browser using a `<script>` tag.  This makes the `IntlMessageFormat` class available globally.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/website/docs/intl-messageformat.md#_snippet_4\n\nLANGUAGE: HTML\nCODE:\n```\n<script src=\"intl-messageformat/intl-messageformat.min.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Configure ESLint to enforce plural rules\nDESCRIPTION: This configures ESLint to enforce that certain plural rules are always specified or forbidden in a message using the `formatjs/enforce-plural-rules` rule. This helps ensure consistency and completeness in pluralization.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/website/docs/tooling/linter.md#_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nimport formatjs from 'eslint-plugin-formatjs'\n\nexport default [\n  {\n    plugins: {\n      formatjs,\n    },\n    rules: {\n      'formatjs/enforce-plural-rules': [\n        2,\n        {\n          one: true,\n          other: true,\n          zero: false,\n        },\n      ],\n    },\n  },\n]\n```\n\n----------------------------------------\n\nTITLE: Bug Fix: Migrate locale info getters to get methods\nDESCRIPTION: This commit migrates the locale information getters to use get methods, as outlined in issue #4135. This change improves code consistency and aligns with modern JavaScript conventions.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/intl-locale/CHANGELOG.md#_snippet_8\n\n\n\n----------------------------------------\n\nTITLE: Fix React 18 type issue in react-intl\nDESCRIPTION: This commit fixes a type issue related to React 18 compatibility within the react-intl package. It ensures proper type handling when used with React 18.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/intl-messageformat/CHANGELOG.md#_snippet_12\n\n\n\n----------------------------------------\n\nTITLE: Support TypeScript 4.7 syntax\nDESCRIPTION: The commit adds support for TypeScript 4.7 syntax in the @formatjs/ts-transformer package. This ensures that the transformer can correctly parse and process code that uses the new syntax features introduced in TypeScript 4.7.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/vue-intl/CHANGELOG.md#_snippet_9\n\n\n\n----------------------------------------\n\nTITLE: Using memoized constructor creation for perf - JavaScript\nDESCRIPTION: This commit implements memoized constructor creation for performance optimization within the @formatjs/intl-enumerator package.  Memoization helps reduce redundant calculations by caching the results of expensive function calls and reusing them when the same inputs occur again.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/intl-enumerator/CHANGELOG.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n**@formatjs/intl-enumerator:** use memoized constructor creation for perf ([8949482](https://github.com/formatjs/formatjs/commit/89494821d7f346d7a6803fe5cc0bf987e3d34324))\n```\n\n----------------------------------------\n\nTITLE: Adding Skeleton Parsing in ICU Parser\nDESCRIPTION: This commit adds skeleton parsing capabilities to the @formatjs/icu-messageformat-parser. This feature allows for initial parsing of message structures, which can be useful for preliminary analysis or validation.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/icu-messageformat-parser/CHANGELOG.md#_snippet_20\n\nLANGUAGE: diff\nCODE:\n```\nFeatures\n\n* **@formatjs/icu-messageformat-parser:** add skeleton parsing ([3eec04d](https://github.com/formatjs/formatjs/commit/3eec04d033891ce5192b692f9b079a672b6aae47))\n```\n\n----------------------------------------\n\nTITLE: Relaxing tslib Requirement - TypeScript\nDESCRIPTION: This commit relaxes the required version of the `tslib` dependency from `2.7` to `2`. This change aims to improve compatibility with different project setups and avoid potential conflicts with other libraries that might have stricter `tslib` version requirements.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/intl-pluralrules/CHANGELOG.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nrelax tslib req to 2 instead of 2.7 ([930c3e8](https://github.com/formatjs/formatjs/commit/930c3e8ddcc160fde7466449575455f135f78ca6))\n```\n\n----------------------------------------\n\nTITLE: Starlark code example\nDESCRIPTION: This starlark snippet shows the example of `generate_src_file` which defines which data can be generated by Bazel. The name is used to create target name.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/CONTRIBUTING.md#_snippet_5\n\nLANGUAGE: starlark\nCODE:\n```\ngenerate_src_file(\n  name = \"regex\",\n  ...\n)\n```\n\n----------------------------------------\n\nTITLE: Reverting ESM Conditional Exports (JavaScript)\nDESCRIPTION: This code snippet reverts the esm conditional exports. This resolves issues that arose due to the conditional exports, as described in the linked issues.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/intl-messageformat/CHANGELOG.md#_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\nRevert esm conditional exports\n```\n\n----------------------------------------\n\nTITLE: Breaking Change: Moving Locale Data Outside of Dist (JavaScript)\nDESCRIPTION: This change moves the locale data outside of the dist directory. The new path for locale data is now @formatjs/intl-listformat/locale-data instead of @formatjs/intl-listformat/dist/locale-data.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/intl-listformat/CHANGELOG.md#_snippet_26\n\nLANGUAGE: JavaScript\nCODE:\n```\n**@formatjs/intl-listformat:** Move locale-data outside of `dist`. This means new locale-data path would be `@formatjs/intl-listformat/locale-data` instead of `@formatjs/intl-listformat/dist/locale-data`\n```\n\n----------------------------------------\n\nTITLE: Breaking Change: Requires @formatjs/intl-getcanonicallocales (JavaScript)\nDESCRIPTION: This breaking change introduces a dependency on @formatjs/intl-getcanonicallocales for IE11 and below. This is necessary to polyfill the Intl.getCanonicalLocales API in older browsers.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/intl-listformat/CHANGELOG.md#_snippet_31\n\nLANGUAGE: JavaScript\nCODE:\n```\n**@formatjs/intl-listformat:** This requires @formatjs/intl-getcanonicallocales for\nIE11 and below\n```\n\n----------------------------------------\n\nTITLE: Relaxing tslib requirement in ts-transformer\nDESCRIPTION: This commit relaxes the tslib requirement to version 2 instead of 2.7. This change is meant to improve compatibility with different versions of TypeScript and related libraries.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/ts-transformer/CHANGELOG.md#_snippet_4\n\nLANGUAGE: Markdown\nCODE:\n```\n* relax tslib req to 2 instead of 2.7 ([930c3e8](https://github.com/formatjs/formatjs/commit/930c3e8ddcc160fde7466449575455f135f78ca6)) - by @longlho\n```\n\n----------------------------------------\n\nTITLE: Adding Skeleton Parsing\nDESCRIPTION: This commit introduces skeleton parsing functionality to the @formatjs/icu-messageformat-parser package.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/icu-skeleton-parser/CHANGELOG.md#_snippet_12\n\n\n\n----------------------------------------\n\nTITLE: Updating tzdata in DateTimeFormat\nDESCRIPTION: This snippet describes the update of the `tzdata` to version `2023c` within the `@formatjs/intl-datetimeformat` package. It also mentions a fix for missing and changed TimeZone data. This enhancement ensures that the DateTimeFormat uses the latest timezone information.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/icu-messageformat-parser/CHANGELOG.md#_snippet_0\n\n\n\n----------------------------------------\n\nTITLE: Bumping intl-messageformat-parser Version\nDESCRIPTION: This commit updates the version of the `intl-messageformat-parser` dependency. Bumping the parser version typically includes bug fixes, performance improvements, or new features within the parser itself.  This update ensures that eslint-plugin-formatjs utilizes the latest parsing capabilities and benefits from any improvements made to the parser.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/packages/eslint-plugin-formatjs/CHANGELOG.md#_snippet_19\n\nLANGUAGE: N/A\nCODE:\n```\n8bbfa047da159662700b7e500879da20e54c0f0b\n```\n\n----------------------------------------\n\nTITLE: Define Message Function\nDESCRIPTION: Defines the `defineMessage` function, which takes a single `MessageDescriptor` object and returns the same object. Similar to `defineMessages`, this function acts as a hook for the CLI and Babel/TS plugin.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/website/docs/intl.md#_snippet_31\n\nLANGUAGE: ts\nCODE:\n```\nfunction defineMessage(messageDescriptor: MessageDescriptor): MessageDescriptor\n```\n\n----------------------------------------\n\nTITLE: Formatting plural using formatPlural (1)\nDESCRIPTION: This example demonstrates the usage of `intl.formatPlural` with a value of 1.  The function returns the plural category string corresponding to the input value.\nSOURCE: https://github.com/formatjs/formatjs/blob/main/website/docs/intl.md#_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nintl.formatPlural(1)\n```"
  }
]