[
  {
    "owner": "fable-compiler",
    "repo": "fable",
    "content": "TITLE: Installing and Using Fable Compiler JS Locally\nDESCRIPTION: Instructions for installing fable-compiler-js as a local dependency and using it with npx to compile F# projects to JavaScript.\nSOURCE: https://github.com/fable-compiler/fable/blob/main/src/fable-compiler-js/README.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpm install fable-compiler-js\nnpx fable <PROJECT_PATH> <OUT_DIR> [--options]\n```\n\n----------------------------------------\n\nTITLE: Installing and Using Fable Compiler JS Globally\nDESCRIPTION: Instructions for installing fable-compiler-js globally and using it to compile F# projects to JavaScript.\nSOURCE: https://github.com/fable-compiler/fable/blob/main/src/fable-compiler-js/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install -g fable-compiler-js\nfable <PROJECT_PATH> <OUT_DIR> [--options]\n```\n\n----------------------------------------\n\nTITLE: F# to Python Type Annotation Example\nDESCRIPTION: Demonstrates how generic type parameters are handled in Python type annotations, showing both the original F# code and its Python translation. Generic parameters used only once are translated to Any type to avoid Pyright checker errors.\nSOURCE: https://github.com/fable-compiler/fable/blob/main/src/Fable.Transforms/Python/README.md#2025-04-22_snippet_0\n\nLANGUAGE: F#\nCODE:\n```\nlet length(xs: 'TSource list) =\n    42\n```\n\nLANGUAGE: Python\nCODE:\n```\ndef length(source: List[TSource]) -> int:\n    return 42\n```\n\nLANGUAGE: Python\nCODE:\n```\ndef length(source: List[Any]) -> int:\n    return 42\n```\n\n----------------------------------------\n\nTITLE: Project Configuration for Python Output\nDESCRIPTION: XML configuration showing how to set up a Fable project for Python compilation. Sets OutputType to Exe for projects with main EntryPoint to enable absolute imports.\nSOURCE: https://github.com/fable-compiler/fable/blob/main/src/Fable.Transforms/Python/README.md#2025-04-22_snippet_1\n\nLANGUAGE: XML\nCODE:\n```\n<OutputType>Exe</OutputType>\n```\n\n----------------------------------------\n\nTITLE: Specifying Fable.Core Library Components\nDESCRIPTION: Reference to core library components including Fable.Transforms.Replacements module and attributes like Emit and Erase that are used for API compilation.\nSOURCE: https://github.com/fable-compiler/fable/blob/main/src/Fable.Core/README.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Fable.Core\n\nFable.Core library, distributed through Nuget, with basic utilities for Fable projects.\n\nNote the library doesn't include the source files, all the APIs are compiled by Fable in the Fable.Transforms.Replacements module (or use attributes like `Emit` or `Erase`).\n```\n\n----------------------------------------\n\nTITLE: Executing Code Before Main in Rust\nDESCRIPTION: Demonstrates how to use the startup crate to run code before the main function. The example prints a message before main is executed, showcasing the crate's functionality.\nSOURCE: https://github.com/fable-compiler/fable/blob/main/src/fable-library-rust/vendored/startup/README.md#2025-04-22_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nstartup::on_startup! {\n    // Note: not all of the rust stdlib may be supported before main.\n    println!(\"I'm running before main\");\n}\nfn main() {\n    println!(\"I'm inside main\");\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring jsOptions with Nested Types in TypeScript/JavaScript\nDESCRIPTION: Example showing how to configure nested options objects using jsOptions helper in Fable. Demonstrates support for directly accessing and setting nested type properties.\nSOURCE: https://github.com/fable-compiler/fable/blob/main/src/Fable.Cli/CHANGELOG.md#2025-04-22_snippet_0\n\nLANGUAGE: F#\nCODE:\n```\nlet opts =\n    jsOptions<Level1> (fun o ->\n        o.level2.level3.valueA <- 10\n        o.level2.level3.valueB <- 20\n        o.topValueA <- 20\n    )\n```\n\n----------------------------------------\n\nTITLE: Demonstrating jsOptions with Nested Types in F#\nDESCRIPTION: Example showing how to use jsOptions with direct nested types in F#, allowing access to nested properties in a fluent-style API. This functionality was fixed in version 5.0.0-alpha.11.\nSOURCE: https://github.com/fable-compiler/fable/blob/main/src/Fable.Compiler/CHANGELOG.md#2025-04-22_snippet_0\n\nLANGUAGE: F#\nCODE:\n```\nlet opts =\n    jsOptions<Level1> (fun o ->\n        o.level2.level3.valueA <- 10\n        o.level2.level3.valueB <- 20\n        o.topValueA <- 20\n    )\n```\n\n----------------------------------------\n\nTITLE: F# Compiler Error Message Definitions\nDESCRIPTION: A comprehensive list of error messages with their corresponding codes used in the F# compiler for reporting various compilation errors, type checking issues, syntax problems and lexical analysis failures.\nSOURCE: https://github.com/fable-compiler/fable/blob/main/src/fcs-fable/src/Compiler/FSComp.txt#2025-04-22_snippet_3\n\nLANGUAGE: text\nCODE:\n```\nlexCharNotAllowedInOperatorNames,\"'%s' is not permitted as a character in operator names and is reserved for future use\"\nlexUnexpectedChar,\"Unexpected character '%s'\"\n1140,lexByteArrayCannotEncode,\"This byte array literal contains %d characters that do not encode as a single byte\"\n```\n\n----------------------------------------\n\nTITLE: Type Constraint Error Messages\nDESCRIPTION: Error messages related to type constraints for comparison, equality, enums, delegates and generics in the F# compiler.\nSOURCE: https://github.com/fable-compiler/fable/blob/main/src/fcs-fable/src/Compiler/FSComp.txt#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\ncsTypeDoesNotSupportComparison1,\"The type '%s' does not support the 'comparison' constraint because it has the 'NoComparison' attribute\"\ncsTypeDoesNotSupportComparison2,\"The type '%s' does not support the 'comparison' constraint. For example, it does not support the 'System.IComparable' interface\"\n```\n\n----------------------------------------\n\nTITLE: Example Project File Structure in F#\nDESCRIPTION: Demonstrates a basic F# project file structure used to explain type-checking dependencies and processing order.\nSOURCE: https://github.com/fable-compiler/fable/blob/main/src/fcs-fable/src/Compiler/Driver/GraphChecking/Docs.md#2025-04-22_snippet_0\n\nLANGUAGE: fsharp\nCODE:\n```\nA.fs\nB.fs\nC.fs\nD.fs\n```\n\n----------------------------------------\n\nTITLE: F# Nested AutoOpen Module Example\nDESCRIPTION: Demonstrates nested module structure with AutoOpen attributes to illustrate why only top-level AutoOpen modules need processing.\nSOURCE: https://github.com/fable-compiler/fable/blob/main/src/fcs-fable/src/Compiler/Driver/GraphChecking/Docs.md#2025-04-22_snippet_1\n\nLANGUAGE: fsharp\nCODE:\n```\nnamespace A\n\n// If the algorithm determines module A.B is 'potentially used' in another file, there is no need to inspect its contents.\nmodule B =\n\n    module C =\n        \n        // In particular there is no need to check this AutoOpen attribute\n        [<AutoOpen>]\n        module D =\n            ()\n```\n\n----------------------------------------\n\nTITLE: Interpolated String Format Examples - F#\nDESCRIPTION: Examples of invalid interpolated string formats with error explanations, showing correct usage patterns for string interpolation in F#\nSOURCE: https://github.com/fable-compiler/fable/blob/main/src/fcs-fable/src/Compiler/FSComp.txt#2025-04-22_snippet_4\n\nLANGUAGE: F#\nCODE:\n```\n%%d{{1+1}}        // Correct format\n{{expr,3}}        // .NET style format\n{{expr:N5}}        // .NET style numeric format\nlet x = $\"Value: {{expr}}\"  // Basic interpolation\n```\n\n----------------------------------------\n\nTITLE: Parser Error Messages\nDESCRIPTION: Error messages related to parsing F# code including EOF handling, visibility declarations, and namespace/module declarations.\nSOURCE: https://github.com/fable-compiler/fable/blob/main/src/fcs-fable/src/Compiler/FSComp.txt#2025-04-22_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nparsDoCannotHaveVisibilityDeclarations,\"Accessibility modifiers are not permitted on 'do' bindings, but '%s' was given.\"\nparsEofInHashIf,\"End of file in #if section begun at or after here\"\nparsEofInString,\"End of file in string begun at or before here\"\n```\n\n----------------------------------------\n\nTITLE: Member Access Error Messages\nDESCRIPTION: Error messages for member accessibility issues including static vs instance members, argument mismatches, and visibility declarations.\nSOURCE: https://github.com/fable-compiler/fable/blob/main/src/fcs-fable/src/Compiler/FSComp.txt#2025-04-22_snippet_1\n\nLANGUAGE: text\nCODE:\n```\ncsMemberIsNotStatic,\"%s is not a static member\"\ncsMemberIsNotInstance,\"%s is not an instance member\"\ncsArgumentLengthMismatch,\"Argument length mismatch\"\n```\n\n----------------------------------------\n\nTITLE: Demonstrating DateTime Support in Python\nDESCRIPTION: Shows the list of supported DateTime constructors, instance methods and static methods added in the Python target.\nSOURCE: https://github.com/fable-compiler/fable/blob/main/src/Fable.Cli/CHANGELOG.md#2025-04-22_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n* Constructors\n    * From `(year, month, day)` up to `(year, month, day, hour, minute, second, millisecond, microsecond)` (with and without `DateTimeKind`)\n    * From `ticks` (with and without `DateTimeKind`)\n* Instance methods:\n    * Multiple properties and methods including Year, Month, Day, etc.\n* Static methods:\n    * Multiple static methods including Today, Now, Parse, etc.\n```\n\n----------------------------------------\n\nTITLE: F# Module Abbreviation Example\nDESCRIPTION: Shows how module abbreviations create indirect dependencies between files without requiring special handling.\nSOURCE: https://github.com/fable-compiler/fable/blob/main/src/fcs-fable/src/Compiler/Driver/GraphChecking/Docs.md#2025-04-22_snippet_2\n\nLANGUAGE: fsharp\nCODE:\n```\n// F1.fs\nmodule A\nmodule B = let x = 1\n\n// F2.fs\nmodule C\nopen A\nmodule D = B\n```\n\n----------------------------------------\n\nTITLE: F# Shared Namespace Example\nDESCRIPTION: Demonstrates how shared namespaces across multiple files are handled in the dependency graph.\nSOURCE: https://github.com/fable-compiler/fable/blob/main/src/fcs-fable/src/Compiler/Driver/GraphChecking/Docs.md#2025-04-22_snippet_3\n\nLANGUAGE: fsharp\nCODE:\n```\nmodule Foo.Bar.A\n\nlet a = 0\n```\n\n----------------------------------------\n\nTITLE: F# Ghost Dependencies Example\nDESCRIPTION: Shows how unnecessary but valid open statements require ghost dependencies to satisfy the type checker.\nSOURCE: https://github.com/fable-compiler/fable/blob/main/src/fcs-fable/src/Compiler/Driver/GraphChecking/Docs.md#2025-04-22_snippet_4\n\nLANGUAGE: fsharp\nCODE:\n```\nnamespace X\n\n// Y.fs\nnamespace Y\n\nopen X // This open statement is unnecessary, however it is valid F# code.\n```\n\n----------------------------------------\n\nTITLE: Python Library Configuration and Requirements\nDESCRIPTION: Specifies the development requirements including type hints for static type checking with Pylance in strict mode and code formatting using Black with default settings.\nSOURCE: https://github.com/fable-compiler/fable/blob/main/src/fable-library-py/README.md#2025-04-22_snippet_0\n\n\n\n----------------------------------------\n\nTITLE: Describing Fable Metadata Package Contents in Markdown\nDESCRIPTION: This snippet provides a brief description of the fable-metadata package and lists the key assemblies it contains for compiling F# projects with Fable.\nSOURCE: https://github.com/fable-compiler/fable/blob/main/src/fable-metadata/README.md#2025-04-22_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n# fable-metadata\n\nThis package contains basic assemblies necessary to compile F# projects with Fable: .NET BCL, FSharp.Core and Fable.Core.\n```\n\n----------------------------------------\n\nTITLE: Generating FSharp.Compiler.Service Binary using Bash\nDESCRIPTION: This snippet shows the bash command to run the build script for generating the FSharp.Compiler.Service binary. It's part of a series of steps to create the binary from a specific branch of the fsharp repository.\nSOURCE: https://github.com/fable-compiler/fable/blob/main/lib/fcs/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nbash fcs/build.sh\n```\n\n----------------------------------------\n\nTITLE: Defining Version String Templates for F# Compiler\nDESCRIPTION: Contains string constants for formatting the product name and banner version of the F# compiler. These constants are used when displaying version information to users in console output or application interfaces.\nSOURCE: https://github.com/fable-compiler/fable/blob/main/src/fcs-fable/src/Compiler/Facilities/UtilsStrings.txt#2025-04-22_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\nbuildProductName,\"Microsoft (R) F# Compiler version %s\"\nfSharpBannerVersion,\"%s for F# %s\"\n```\n\n----------------------------------------\n\nTITLE: Configuring F# Interactive Resource Strings\nDESCRIPTION: Defines localized strings and messages used throughout the F# Interactive environment, including usage instructions, error messages, and command descriptions.\nSOURCE: https://github.com/fable-compiler/fable/blob/main/src/fcs-fable/src/Compiler/Interactive/FSIstrings.txt#2025-04-22_snippet_0\n\nLANGUAGE: properties\nCODE:\n```\nstoppedDueToError,\"Stopped due to error\\n\"\nfsiUsage,\"Usage: %s <options> [script.fsx [<arguments>]]\"\nfsiInputFiles,\"- INPUT FILES -\"\nfsiCodeGeneration,\"- CODE GENERATION -\"\nfsiErrorsAndWarnings,\"- ERRORS AND WARNINGS -\"\nfsiLanguage,\"- LANGUAGE -\"\nfsiMiscellaneous,\"- MISCELLANEOUS -\"\nfsiAdvanced,\"- ADVANCED -\"\nfsiExceptionRaisedStartingServer,\"Exception raised when starting remoting server.\\n%s\"\nfsiUse,\"Use the given file on startup as initial input\"\nfsiLoad,\"#load the given file on startup\"\nfsiRemaining,\"Treat remaining arguments as command line arguments, accessed using fsi.CommandLineArgs\"\nfsiHelp,\"Display this usage message (Short form: -?)\"\nfsiExec,\"Exit fsi after loading the files or running the .fsx script given on the command line\"\nfsiGui,\"Execute interactions on a Windows Forms event loop (%s by default)\"\nfsiQuiet,\"Suppress fsi writing to stdout\"\nfsiReadline,\"Support TAB completion in console (%s by default)\"\nfsiEmitDebugInfoInQuotations,\"Emit debug information in quotations (%s by default)\"\nfsiBanner3,\"For help type #help;;\"\nfsiConsoleProblem,\"A problem occurred starting the F# Interactive process. This may be due to a known problem with background process console support for Unicode-enabled applications on some Windows systems. Try selecting Tools->Options->F# Interactive for Visual Studio and enter '--fsi-server-no-unicode'.\"\n2301,fsiInvalidAssembly,\"'%s' is not a valid assembly name\"\n2302,fsiDirectoryDoesNotExist,\"Directory '%s' doesn't exist\"\nfsiLineTooLong,\"Warning: line too long, ignoring some characters\\n\"\nfsiTimeInfoMainString,\"Real: %s, CPU: %s, GC %s\"\nfsiTimeInfoGCGenerationLabelSomeShorthandForTheWordGeneration,\"gen\"\nfsiExceptionDuringPrettyPrinting,\"\\n\\nException raised during pretty printing.\\nPlease report this so it can be fixed.\\nTrace: %s\\n\"\nfsiIntroTextHeader1directives,\"  F# Interactive directives:\"\nfsiIntroTextHashrInfo,\"Reference (dynamically load) the given DLL\"\nfsiIntroTextHashIInfo,\"Add the given search path for referenced DLLs\"\nfsiIntroPackageSourceUriInfo,\"Include package source uri when searching for packages\"\nfsiIntroTextHashloadInfo,\"Load the given file(s) as if compiled and referenced\"\nfsiIntroTextHashtimeInfo,\"Toggle timing on/off\"\nfsiIntroTextHashhelpInfo,\"Display help\"\nfsiIntroTextHashhelpdocInfo,\"Display documentation for an identifier, e.g. #help \\\"List.map\\\";;\"\n```\n\n----------------------------------------\n\nTITLE: Reference Cell Operations - F# (Deprecated)\nDESCRIPTION: Examples of deprecated reference cell operations and their modern replacements in F#\nSOURCE: https://github.com/fable-compiler/fable/blob/main/src/fcs-fable/src/Compiler/FSComp.txt#2025-04-22_snippet_5\n\nLANGUAGE: F#\nCODE:\n```\n!cell             // Old: Dereference\ncell.Value        // New: Dereference\n\ncell := expr      // Old: Assignment\ncell.Value <- expr // New: Assignment\n\nincr cell         // Old: Increment\ncell.Value <- cell.Value + 1  // New: Increment\n\ndecr cell         // Old: Decrement\ncell.Value <- cell.Value - 1  // New: Decrement\n```\n\n----------------------------------------\n\nTITLE: Changelog Format in Markdown\nDESCRIPTION: Structured changelog following Keep a Changelog format and Semantic Versioning, documenting versions from 1.0.5 to 2.4.0 with their respective changes and dates\nSOURCE: https://github.com/fable-compiler/fable/blob/main/src/Fable.PublishUtils/CHANGELOG.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Changelog\n\nAll notable changes to this project will be documented in this file.\n\nThe format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/),\nand this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0.html).\n\n## Unreleased\n\n## 2.4.0 - 2021-10-07\n\n* Remove node compatibility and async methods\n\n## 2.3.0 - 2021-10-07\n\n* Publish as Nuget package\n\n## 2.2.0 - 2021-05-28\n\n* Add explicit `pushFableNuget` helper that uses FABLE_NUGET_KEY envVar @MangelMaxime\n\n## 2.1.0 - 2021-05-19\n\n* Publish symbols for Nuget packages @cartermp\n\n## 2.0.0 - 2020-12-02\n\n* Compatibility both with dotnet and nodejs\n\n## 1.2.1 - 2020-04-09\n\n* Update to Fable.Core 3.1.5\n\n## 1.2.0 - 2020-03-04\n\n* Use npm token when publishing an npm package\n\n## 1.1.1 - 2019-10-11\n\n* Several additions for Fable build\n\n## 1.0.5 - 2019-01-22\n\n* First publish\n```\n\n----------------------------------------\n\nTITLE: Changelog Markdown Entry Format\nDESCRIPTION: Markdown formatted changelog entries following Keep a Changelog conventions, documenting version history, fixes, additions, and changes.\nSOURCE: https://github.com/fable-compiler/fable/blob/main/src/fable-library-ts/CHANGELOG.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## 2.0.0-beta.3 - 2025-03-14\n\n### Fixed\n\n* [JS/TS] Make `nullArgCheck` report the same error message as on .NET (by @MangelMaxime)\n```"
  }
]