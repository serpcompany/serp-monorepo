[
  {
    "owner": "zopefoundation",
    "repo": "zope",
    "content": "TITLE: Registering a Custom Zope Request Parameter Type Converter - Python\nDESCRIPTION: This snippet demonstrates defining and registering a custom type converter for Zope's publisher. It imports required base converters and the type_converters registry from ZPublisher.Converters, defines a new 'field2bytelines' function for converting inputs to a list of byte strings split on lines, and registers it under the key 'bytelines'. The custom function supports both sequences and single values, returning appropriately transformed outputs. This approach requires Zope's ZPublisher.Converters module and allows extension of the built-in conversion system.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zdgbook/ObjectPublishing.rst#2025-04-22_snippet_11\n\nLANGUAGE: python\nCODE:\n```\n    from ZPublisher.Converters import field2bytes, type_converters\\n\\n    def field2bytelines(v)\\n        if isinstance(v, (list, tuple)):\\n            return [field2bytes(item) for item in v]\\n        return field2bytes(v).splitlines()\\n\\n    type_converters['bytelines'] = field2bytelines\\n\n```\n\n----------------------------------------\n\nTITLE: Performing Permission Checks in Zope Page Templates (TAL/XML)\nDESCRIPTION: This TAL/XML code snippet demonstrates how to conditionally render a form in a Zope Page Template based on whether the current user has the 'Add Documents, Images, and Files' Zope permission. It relies on the getSecurityManager method from the AccessControl module. The form is only visible if checkPermission returns True. This pattern requires Zope's Page Templates and uses the python: expression in TAL to connect with application logic.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/Security.rst#2025-04-22_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<form action=\\\"upload\\\" \\n  tal:condition=\\\"python:\\n    modules['AccessControl'].getSecurityManager().checkPermission(\\n       'Add / Documents, Images, and Files', context)\\\">\\n...\\n</form>\n```\n\n----------------------------------------\n\nTITLE: Creating Emergency User with zpasswd.py (UNIX)\nDESCRIPTION: Command-line example showing how to create an emergency user account in Zope using the zpasswd.py utility on UNIX systems. The script prompts for username, password, and encoding format.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/Security.rst#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ cd (... where your ZOPE_HOME is... )\n$ python zpasswd.py access\n\nUsername: superuser\nPassword:\nVerify password:\n\nPlease choose a format from:\n\nSHA - SHA-1 hashed password\nCRYPT - UNIX-style crypt password\nCLEARTEXT - no protection.\n\nEncoding: SHA\nDomain restrictions:\n```\n\n----------------------------------------\n\nTITLE: Capturing Output from Zope Publishing Request in Python\nDESCRIPTION: This snippet demonstrates how to capture the output of a Zope publishing request for comparison with expected values in unit tests, using StringIO and sys.stdout redirection.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zdgbook/TestingAndDebugging.rst#2025-04-22_snippet_12\n\nLANGUAGE: Python\nCODE:\n```\nf=StringIO()\ntemp=sys.stdout\nsys.stdout=f\nZPublisher.Zope('/myobject/mymethod')\nsys.stdout=temp\nassert f.getvalue() == expected_output\n```\n\n----------------------------------------\n\nTITLE: Repeating and Filtering Elements with TAL in XML/HTML Templates - XML\nDESCRIPTION: This snippet demonstrates using TAL's tal:repeat and tal:condition attributes to define a variable (n) in a loop, omit intermediate tags, and filter list items in an HTML unordered list or XML structure. The div tag, while present in the template, will not appear in output due to tal:omit-tag, making it suitable for both HTML and XML contexts. The approach provides a safe way to introduce scoped variables within templates to prevent undefined variable errors during rendering.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/AdvZPT.rst#2025-04-22_snippet_16\n\nLANGUAGE: xml\nCODE:\n```\n<ul>\n  <div tal:repeat=\"n python:range(10)\"\n       tal:omit-tag=\"\">\n    <li tal:condition=\"python:n != 3\"\n        tal:content=\"n\"> \n      1\n    </li>\n  </div>\n</ul>\n```\n\n----------------------------------------\n\nTITLE: Calculating Compound Interest with Python in Zope\nDESCRIPTION: This Python script calculates compound interest based on principal, interest rate, compounding periods, and years. It's designed to be used as a Script (Python) object in Zope.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/BasicObject.rst#2025-04-22_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n\"\"\"\nCalculate compounding interest.\n\"\"\"\ni = interest_rate / periods\nn = periods * years\nreturn ((1 + i) ** n) * principal\n```\n\n----------------------------------------\n\nTITLE: Searching ZCatalog with Text Index and Sorting Results in Python\nDESCRIPTION: This code shows how to perform a free text search using a ZCTextIndex while sorting the results using a FieldIndex. It demonstrates a common pattern for combining the benefits of both index types.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/SearchingZCatalog.rst#2025-04-22_snippet_25\n\nLANGUAGE: python\nCODE:\n```\n# free text search, sorted\nzcat=context.AnimalCatalog\nresults=zcat({'latin_name_text':'sap*',\n              'sort_on':'latin_name'})\n```\n\n----------------------------------------\n\nTITLE: Using Expression Type Functions within Python Expressions\nDESCRIPTION: Demonstrates how to use other expression types (path, string, exists, nocall) as functions within Python expressions for more complex template logic.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/AdvZPT.rst#2025-04-22_snippet_36\n\nLANGUAGE: TAL\nCODE:\n```\n\"python:path('context/%s/thing' % foldername)\"\n\"python:path(string('context/$foldername/thing'))\"\n\"python:path('request/form/x') or default\"\n```\n\n----------------------------------------\n\nTITLE: Implementing __bobo_traverse__ Method for Custom Traversal in Zope\nDESCRIPTION: This snippet shows how to implement the __bobo_traverse__ method to customize object traversal in Zope. The example demonstrates how to return different subobjects based on cookie contents in the request.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zdgbook/ObjectPublishing.rst#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndef __bobo_traverse__(self, request, key):\n    \"\"\"Return subobjects depending on cookie contents.\"\"\"\n    if request.cookies.has_key('special'):\n        return self.special_subobjects.get(key, None)\n    return self.normal_subobjects.get(key, None)\n```\n\n----------------------------------------\n\nTITLE: Defining a Secured Zope Class using ClassSecurityInfo in Python\nDESCRIPTION: Defines a `Mailbox` class inheriting from `ObjectManager`. It uses `ClassSecurityInfo` to declare object protection ('View Mailbox'), protect specific methods ('manage'), make others public ('messageCount'), protect methods with specific permissions ('listMessages'), and set default roles for a permission ('View Mailbox'). `InitializeClass` is called to register the security assertions with the Zope framework.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zdgbook/Security.rst#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom AccessControl import ClassSecurityInfo\nfrom AccessControl.class_init import InitializeClass\n\nclass Mailbox(ObjectManager):\n    \"\"\"A mailbox object.\"\"\"\n\n    # Create a SecurityInfo for this class\n    security = ClassSecurityInfo()\n\n    # Set security for the object itself\n    security.declareObjectProtected('View Mailbox')\n\n    security.declareProtected('View management screens', 'manage')\n    manage = DTMLFile('mailbox_manage', globals())\n\n    @security.public\n    def messageCount(self):\n        \"\"\"Return a count of messages.\"\"\"\n        return len(self._messages)\n\n    @security.protected('View Mailbox')\n    def listMessages(self):\n        \"\"\"Return a sequence of message objects.\"\"\"\n        return self._messages[:]\n\n    security.setPermissionDefault('View Mailbox',\n                                  ('Manager', 'Mailbox Owner'))\n\n# call this to initialize framework classes, which\n# does the right thing with the security assertions.\nInitializeClass(Mailbox)\n```\n\n----------------------------------------\n\nTITLE: Basic Batch Rendering with ZTUtils in Zope Page Templates\nDESCRIPTION: Demonstrates how to use ZTUtils.Batch to break a long list into smaller groups. This example renders a list of 10 items from a 100-item range, starting from index 0.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/AdvZPT.rst#2025-04-22_snippet_45\n\nLANGUAGE: html\nCODE:\n```\n  <ul tal:define=\"lots python:range(100);\n                  batch python:modules['ZTUtils'].Batch(lots, \n                                                        size=10,\n                                                        start=0)\">\n    <li tal:repeat=\"num batch\"\n        tal:content=\"num\">0\n    </li>\n  </ul>\n```\n\n----------------------------------------\n\nTITLE: Displaying Compound Interest Results with Zope Page Template\nDESCRIPTION: This Zope Page Template displays the results of the compound interest calculation. It retrieves input parameters from the request and calls the calculateCompoundingInterest script to compute the result.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/BasicObject.rst#2025-04-22_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<html>\n  <body>\n  Your total balance (or debt) including compounded interest over\n  <span tal:define=\"years request/years;\n                    principal request/principal;\n                    interest_rate request/interest_rate;\n                    periods request/periods\">\n    <span tal:content=\"years\">2</span> years is:<br><br>\n    <b>$\n    <span tal:content=\"python: context.calculateCompoundingInterest(principal, \n                                                     interest_rate,\n                                                     periods,\n                                                     years)\" >1.00</span>\n    </b>\n  </span>\n  </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Defining Whole Page Layout with METAL Macro and Slots in ZPT/HTML\nDESCRIPTION: Defines a METAL macro named 'page' that structures an entire HTML document. It uses 'metal:define-slot' for key sections like 'headline', 'body', and 'footer', allowing templates using this macro to provide specific content for these areas while inheriting the overall layout. The 'headline' slot includes a TAL statement for dynamic default content.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/ZPT.rst#2025-04-22_snippet_26\n\nLANGUAGE: html\nCODE:\n```\n<html metal:define-macro=\"page\">\n  <head>\n    <title tal:content=\"context/title\">The title</title>\n  </head>\n\n  <body>\n    <h1 metal:define-slot=\"headline\"\n        tal:content=\"context/title\">title</h1>\n\n    <p metal:define-slot=\"body\">\n      This is the body.\n    </p>\n\n    <span metal:define-slot=\"footer\">\n      <p>Copyright 2009 Fluffy Enterprises</p>\n    </span>\n\n  </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Combining tal:condition and tal:repeat for Dynamic Tables\nDESCRIPTION: Demonstrates how to use tal:condition with tal:repeat to create a table that only appears when there are items to display.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/ZPT.rst#2025-04-22_snippet_11\n\nLANGUAGE: html\nCODE:\n```\n<table tal:condition=\"python: context.objectValues(['Folder'])\"\n       border=\"1\" width=\"100%\">\n  <tr>\n    <th>Id</th>\n    <th>Meta-Type</th>\n    <th>Title</th>\n  </tr>\n  <tr tal:repeat=\"item python: context.objectValues(['Folder'])\">\n    <td tal:content=\"item/getId\">Id</td>\n    <td tal:content=\"item/meta_type\">Meta-Type</td>\n    <td tal:content=\"item/title\">Title</td>\n  </tr>\n</table>\n```\n\n----------------------------------------\n\nTITLE: Creating Template-Based Zope Viewlets Using SimpleViewletClass (Python)\nDESCRIPTION: Illustrates the creation of viewlet classes from templates using the SimpleViewletClass factory. It covers specifying only a template, adding a custom base class for extended functionality, injecting arbitrary attributes, and naming the resulting viewlet. Demonstrates end-to-end registration and usage—all dependent on Zope and filesystem template files.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/src/Products/Five/viewlet/README.txt#2025-04-22_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n>>> template = os.path.join(temp_dir, 'demoTemplate.pt')\n>>> with open(template, 'w') as fd:\n...     _ = fd.write('''<div>contents</div>''')\n\n>>> Demo = viewlet.SimpleViewletClass(template)\n>>> print(Demo(content, request, view, manager).render())\n<div>contents</div>\n\n>>> class MyViewlet(object):\n...     myAttribute = 8\n\n>>> Demo = viewlet.SimpleViewletClass(template, bases=(MyViewlet,))\n>>> MyViewlet in Demo.__bases__\nTrue\n>>> Demo(content, request, view, manager).myAttribute\n8\n\n>>> Demo = viewlet.SimpleViewletClass(\n...     template, attributes={'here': 'now', 'lucky': 3})\n>>> demo = Demo(content, request, view, manager)\n>>> demo.here\n'now'\n>>> demo.lucky\n3\n\n>>> Demo = viewlet.SimpleViewletClass(template, name='demoViewlet')\n>>> demo = Demo(content, request, view, manager)\n>>> demo.__name__\n'demoViewlet'\n\n```\n\n----------------------------------------\n\nTITLE: Safe Script Calling with getattr in Python\nDESCRIPTION: Shows a defensive programming pattern for calling scripts that might not exist. Uses getattr() to safely retrieve the script object and provides a fallback when the script is not found.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/ScriptingZope.rst#2025-04-22_snippet_5\n\nLANGUAGE: Python\nCODE:\n```\nupdateInfo = getattr(context, \"updateInfo\", None)\nif updateInfo is not None:\n    updateInfo(color=\"brown\", pattern=\"spotted\")\nelse:\n    # complain about missing script\n    return \"error: updateInfo() not found\"\n```\n\n----------------------------------------\n\nTITLE: Setting up Zope with zc.buildout\nDESCRIPTION: Commands to create a virtual environment, install zc.buildout, and run the buildout process for Zope installation.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/INSTALL.rst#2025-04-22_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ python3.10 -m venv zope\n$ cd zope\n$ bin/pip install -U pip wheel zc.buildout\n$ bin/buildout\n```\n\n----------------------------------------\n\nTITLE: Calling Z SQL Methods Explicitly from Python Script (Python)\nDESCRIPTION: This Zope Python Script demonstrates calling a Z SQL Method (`employee_by_id`) programmatically. It takes an 'id' parameter, passes it as 'emp_id' to the Z SQL Method, retrieves the single result, and returns a formatted string combining the first and last names.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/RelationalDatabases.rst#2025-04-22_snippet_22\n\nLANGUAGE: Python\nCODE:\n```\n## Script (Python) \"join_name\"\n##parameters=id\n##\nfor result in context.employee_by_id(emp_id=id):\n    return result.last + ', ' + result.first\n```\n\n----------------------------------------\n\nTITLE: Batch Navigation with Custom Start Index in Zope Page Templates\nDESCRIPTION: Shows how to specify a different starting point for a batch by setting the start parameter. This example displays items 13-22 from a 100-item range.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/AdvZPT.rst#2025-04-22_snippet_46\n\nLANGUAGE: html\nCODE:\n```\n  <ul tal:define=\"lots python:range(100);\n                  batch python:modules['ZTUtils'].Batch(lots, \n                                                        size=10,\n                                                        start=13)\">\n```\n\n----------------------------------------\n\nTITLE: Dual-Mode Function for Web and Python Calling in Zope\nDESCRIPTION: Shows how to create a function that can be called both via web requests and directly from Python code. It uses an optional REQUEST parameter to detect the calling context and format the response accordingly.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zdgbook/ObjectPublishing.rst#2025-04-22_snippet_21\n\nLANGUAGE: python\nCODE:\n```\ndef calculate(data, REQUEST=None):\n    ...\n    result = ...\n    if REQUEST is not None:\n        REQUEST.RESPONSE.setHeader(\"Content-Type\", \"text/html\")\n        return \"<html><p>Result: %s </p></html>\" % result\n    return result\n```\n\n----------------------------------------\n\nTITLE: Dynamically Generating Sortable Table Headers with TAL\nDESCRIPTION: This Zope Page Template (TAL) snippet replaces static table headers with dynamic ones that function as sorting links. It uses `tal:attributes=\"href options/sort_title_url\"` and `tal:attributes=\"href options/sort_modified_url\"` to set the link targets based on URLs provided by the Python script in the `options` dictionary. The `tal:omit-tag=\"not: options/sort_..._url\"` directive conditionally removes the surrounding `<a>` tag if the corresponding URL is empty, effectively disabling the link for the currently active sort column.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/SimpleExamples.rst#2025-04-22_snippet_15\n\nLANGUAGE: html\nCODE:\n```\n    <th width=\"300\"><a href=\"SORT_TITLE_URL\"\n           tal:omit-tag=\"not: options/sort_title_url\"\n           tal:attributes=\"href options/sort_title_url\"\n           >File</a></th>\n    <th><a href=\"SORT_MODIFIED_URL\"\n           tal:omit-tag=\"not: options/sort_modified_url\"\n           tal:attributes=\"href options/sort_modified_url\"\n           >Last Modified</a></th>\n```\n\n----------------------------------------\n\nTITLE: Iterating with tal:repeat in Zope TAL\nDESCRIPTION: Examples of using tal:repeat to iterate over sequences in Zope templates. Demonstrates basic iteration, accessing repeat variables, nested repeats, and grouping objects.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/AppendixC.rst#2025-04-22_snippet_12\n\nLANGUAGE: html\nCODE:\n```\n<p tal:repeat=\"txt python: ('one', 'two', 'three')\">\n  <span tal:replace=\"txt\" />\n</p>\n```\n\nLANGUAGE: html\nCODE:\n```\n<table>\n  <tr tal:repeat=\"item context/cart\">\n    <td tal:content=\"repeat/item/number\">1</td>\n    <td tal:content=\"item/description\">Widget</td>\n    <td tal:content=\"item/price\">$1.50</td>\n  </tr>\n</table>\n```\n\nLANGUAGE: html\nCODE:\n```\n<table border=\"1\">\n  <tr tal:repeat=\"row python:range(10)\">\n    <td tal:repeat=\"column python:range(10)\">\n      <span tal:define=\"x repeat/row/number; \n                        y repeat/column/number; \n                        z python:x*y\"\n            tal:replace=\"string:$x * $y = $z\">\n          1 * 1 = 1\n      </span>\n    </td>\n  </tr>\n</table>\n```\n\nLANGUAGE: html\nCODE:\n```\n<div tal:repeat=\"object objects\">\n  <h2 tal:condition=\"repeat/object/first/meta_type\"\n      tal:content=\"object/meta_type\">Meta Type</h2>\n  <p tal:content=\"object/getId\">Object ID</p>\n  <hr tal:condition=\"repeat/object/last/meta_type\" />\n</div>\n```\n\n----------------------------------------\n\nTITLE: Implementing a Zope Interface in Python\nDESCRIPTION: Shows how to implement the IElephant interface using the @implementer decorator on a concrete class PinkElephant. The class provides implementations for all methods defined in the interface.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/src/Products/Five/doc/manual.txt#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n@implementer(IElephant)\nclass PinkElephant:\n\n    def getAngerLevel(self):\n        return 0 # this elephant is peaceful\n\n    def isInCupboard(self):\n        return False # it's never in a cupboard but can be found in bottles\n\n    def trunkSmash(self, target):\n        target.tickle()\n\n    def trample(self, target):\n        target.patOnHead()\n```\n\n----------------------------------------\n\nTITLE: Implementing an Interface with a Concrete Class in Zope\nDESCRIPTION: Demonstrates how to associate the IHello interface with a concrete HelloComponent class using the @implementer decorator to define the implementation.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zdgbook/ComponentsAndInterfaces.rst#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom zope.interface import implementer\n\n@implementer(IHello)\nclass HelloComponent:\n    def hello(self, name):\n        return \"Hello %s!\" % name\n```\n\n----------------------------------------\n\nTITLE: Defining a Zope Product Class in Python\nDESCRIPTION: This code snippet shows the basic structure of a Zope Product class. It inherits from multiple base classes to provide persistence, acquisition, role management, and item functionality.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zdgbook/Products.rst#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom Acquisition import Implicit\nfrom Globals import Persistent\nfrom AccessControl.Role import RoleManager\nfrom OFS.SimpleItem import Item\n\nclass PollProduct(Implicit, Persistent, RoleManager, Item):\n    \"\"\"\n    Poll product class\n    \"\"\"\n    ...\n```\n\n----------------------------------------\n\nTITLE: XML-RPC Client Example in Zope\nDESCRIPTION: Demonstrates how to use XML-RPC to make remote procedure calls to Zope objects. Shows how to create a ServerProxy and call methods on remote objects.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zdgbook/ObjectPublishing.rst#2025-04-22_snippet_22\n\nLANGUAGE: python\nCODE:\n```\nfrom xmlrpc.client import ServerProxy as proxy\nfolder = proxy(\"http://example.com/myfolder\")\nfolder_id = folder.getId()\n```\n\n----------------------------------------\n\nTITLE: Creating a ClassSecurityInfo Instance for Method Security Declarations\nDESCRIPTION: This example shows how to create a ClassSecurityInfo instance and use the decorator pattern to declare a public method in a Zope Mailbox class.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zdgbook/Security.rst#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom AccessControl import ClassSecurityInfo\n\nclass Mailbox(ObjectManager):\n  \"\"\"A mailbox object that contains mail message objects.\"\"\"\n\n  # Create a SecurityInfo for this class. We will use this \n  # in the rest of our class definition to make security \n  # assertions.\n  security = ClassSecurityInfo()\n\n  # Here is an example of a security assertion using a decorator.\n  # We are declaring that access to messageCount is public.\n  @security.public\n  def messageCount(self):\n    \"\"\"Return a count of messages.\"\"\"\n    return len(self._messages)\n```\n\n----------------------------------------\n\nTITLE: Creating a Dynamic Table with tal:repeat\nDESCRIPTION: Demonstrates how to create a table that dynamically lists objects in a folder using tal:repeat.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/ZPT.rst#2025-04-22_snippet_9\n\nLANGUAGE: html\nCODE:\n```\n<table border=\"1\" width=\"100%\">\n  <tr>\n    <th>Id</th>\n    <th>Meta-Type</th>\n    <th>Title</th>\n  </tr>\n  <tr tal:repeat=\"item context/objectValues\">\n    <td tal:content=\"item/getId\">Id</td>\n    <td tal:content=\"item/meta_type\">Meta-Type</td>\n    <td tal:content=\"item/title\">Title</td>\n  </tr>\n</table>\n```\n\n----------------------------------------\n\nTITLE: Signaling Changes to Mutable Attributes in ZODB Persistent Objects using Python\nDESCRIPTION: This snippet shows two methods to signal changes to mutable attributes in ZODB persistent objects: using _p_changed flag and reassigning the attribute. Both ensure ZODB detects the changes.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zdgbook/ZODBPersistentComponents.rst#2025-04-22_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ndef addDepartment(self, department):\n    self.department.append(department)\n    self._p_changed = 1\n\n# Alternative method\ndef addDepartment(self, department):\n    departments = self.departments\n    departments.append(department)\n    self.department = departments\n```\n\n----------------------------------------\n\nTITLE: Defining a Zope Published Function with Decorator - Python\nDESCRIPTION: This function, decorated with @zpublish, is a Zope-published callable that greets a user by name. The decorator enables Zope to expose the function to HTTP requests, marshalling the 'name' argument from GET or POST request variables. It requires the zpublish decorator (often provided by Zope’s publishing framework), accepts a single string argument ('name'), and returns a greeting message. The function relies on automatic type conversion and parameter extraction by Zope's publisher, outputting a formatted string response.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zdgbook/ObjectPublishing.rst#2025-04-22_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n    @zpublish\\n    def greet(name):\\n        \"\"\"Greet someone by name.\"\"\"\\n        return \"Hello, %s!\" % name\\n\n```\n\n----------------------------------------\n\nTITLE: Comparing Presentation in ZPT and Python Scripts\nDESCRIPTION: A simple comparison showing how to implement the same presentational functionality using both Zope Page Templates (ZPT) and Python Scripts. The example iterates through objects and displays their IDs and string representations.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/ScriptingZope.rst#2025-04-22_snippet_23\n\nLANGUAGE: html\nCODE:\n```\n<div tal:repeat=\"item context/objectValues\" \n     tal:replace=\"python:'%s: %s\\n' % (item.getId(), str(item))\" />\n```\n\nLANGUAGE: python\nCODE:\n```\nfor item in context.objectValues():\n    print \"%s: %s\" % (item.getId(), item)\nprint \"done\"\nreturn printed\n```\n\n----------------------------------------\n\nTITLE: Basic Session Data Access in Python\nDESCRIPTION: A Python script demonstrating basic session data access and time tracking between views. Shows how to access and manipulate session data through the REQUEST.SESSION object.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/Sessions.rst#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nsecs_per_day = 24*60*60\nsession = context.REQUEST.SESSION\n\nif 'last view' in session:\n    then = session['last view']\n    now = context.ZopeTime()\n    session['last view'] = now\n    return 'Seconds since last view %.2f' % ((now - then) * secs_per_day)\n\nsession['last view'] = context.ZopeTime()\nreturn 'This is your first view'\n```\n\n----------------------------------------\n\nTITLE: Defining METAL Macro with Nested Slots in ZPT/HTML\nDESCRIPTION: Defines a 'sidebar' macro demonstrating nested slots for finer customization. The outer 'links' slot contains the main link structure, while an inner 'additional_links' slot allows adding extra links after the default ones without replacing the entire 'links' section. This provides more granular control over customization.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/ZPT.rst#2025-04-22_snippet_24\n\nLANGUAGE: html\nCODE:\n```\n<div metal:define-macro=\"sidebar\">\n  <div metal:define-slot=\"links\">\n  Links\n  <ul>\n    <li><a href=\"/\">Home</a></li>\n    <li><a href=\"/products\">Products</a></li>\n    <li><a href=\"/support\">Support</a></li>\n    <li><a href=\"/contact\">Contact Us</a></li>\n    <span metal:define-slot=\"additional_links\"></span>\n  </ul>\n  </div>\n  <span metal:define-slot=\"additional_info\"></span>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Defining an Interface for a Poll Product in Python\nDESCRIPTION: This code snippet defines an interface IPoll for a multiple choice poll component. It specifies methods for casting votes, getting vote totals, and retrieving poll information.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zdgbook/Products.rst#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom zope.interface import Interface\n\nclass IPoll(Interface):\n    \"\"\"A multiple choice poll\"\"\"\n\n    def castVote(index):\n        \"\"\"Votes for a choice\"\"\"\n\n    def getTotalVotes():\n        \"\"\"Returns total number of votes cast\"\"\"\n\n    def getVotesFor(index):\n        \"\"\"Returns number of votes cast for a given response\"\"\"\n\n    def getResponses():\n        \"\"\"Returns the sequence of responses\"\"\"\n\n    def getQuestion():\n        \"\"\"Returns the question\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Implementing a Poll Interface in Python\nDESCRIPTION: This code snippet provides an implementation of the IPoll interface. It defines a PollImplementation class that handles the poll's question, responses, and vote counting.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zdgbook/Products.rst#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom poll import Poll\n\nclass PollImplementation:\n    \"\"\"A multiple choice poll, implements the Poll interface.\n\n    The poll has a question and a sequence of responses. Votes\n    are stored in a dictionary which maps response indexes to a\n    number of votes.\n    \"\"\"\n\n    implements(IPoll)\n\n    def __init__(self, question, responses):\n        self._question = question\n        self._responses = responses\n        self._votes = {}\n        for i in range(len(responses)):\n            self._votes[i] = 0\n\n    def castVote(self, index):\n        \"\"\"Votes for a choice\"\"\"\n        self._votes[index] = self._votes[index] + 1\n\n    def getTotalVotes(self):\n        \"\"\"Returns total number of votes cast\"\"\"\n        total = 0\n        for v in self._votes.values():\n            total = total + v\n        return total\n\n    def getVotesFor(self, index):\n        \"\"\"Returns number of votes cast for a given response\"\"\"\n        return self._votes[index]\n\n    def getResponses(self):\n        \"\"\"Returns the sequence of responses\"\"\"\n        return tuple(self._responses)\n\n    def getQuestion(self):\n        \"\"\"Returns the question\"\"\"\n        return self._question\n```\n\n----------------------------------------\n\nTITLE: Delegating Security Checks via Python Script in Zope (Python)\nDESCRIPTION: This Python Script performs a security check for a passed permission and object using Zope's getSecurityManager(). It is intended to be called from a Page Template, decoupling the security logic from presentation code. Inputs are the permission string and the Zope object to check against. The script returns a boolean indicating whether the current user is authorized. Requires AccessControl as a dependency and is suitable for restricting UI elements or enforce logic in other scripts or templates.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/Security.rst#2025-04-22_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n## Script (Python) \\\"check_security\\\"\\n##bind container=container\\n##bind context=context\\n##bind namespace=\\n##bind script=script\\n##bind subpath=traverse_subpath\\n##parameters=permission, object\\n##title=Checks security on behalf of a caller\\n\\nfrom AccessControl import getSecurityManager\\nsec_mgr = getSecurityManager()\\nreturn sec_mgr.checkPermission(permission, object)\n```\n\n----------------------------------------\n\nTITLE: Starting Zope on UNIX Systems\nDESCRIPTION: Commands for starting Zope instance in background or foreground mode and viewing available commands.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/InstallingZope.rst#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ ~/myzope/instance/bin/zopectl start\n$ ~/myzope/instance/bin/zopectl fg\n$ ~/myzope/instance/bin/zopectl help\n```\n\n----------------------------------------\n\nTITLE: Processing HTML Form Input in Zope Python Script\nDESCRIPTION: A simple HTML form that collects hippo information to be processed by a Zope script. The form submits name and age values to a script named 'form_action'.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/ScriptingZope.rst#2025-04-22_snippet_15\n\nLANGUAGE: html\nCODE:\n```\n<form action=\"form_action\">\n  Name of Hippo <input type=\"text\" name=\"name\" /><br />\n  Age of Hippo <input type=\"text\" name=\"age\" /><br />\n  <input type=\"submit\" />\n</form>\n```\n\n----------------------------------------\n\nTITLE: Inserting Dynamic Text with tal:replace\nDESCRIPTION: Demonstrates how to use tal:replace to insert dynamic text within an HTML element.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/ZPT.rst#2025-04-22_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<p>The URL is\n  <span tal:replace=\"request/URL\">\n    http://www.example.com</span>.</p>\n```\n\n----------------------------------------\n\nTITLE: Python Script for Dynamic Macro Selection in Zope\nDESCRIPTION: This Python script demonstrates how to return a specific macro from a Page Template for dynamic macro selection.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/ZPT.rst#2025-04-22_snippet_18\n\nLANGUAGE: python\nCODE:\n```\nreturn container.ptMacros.macros['amacroname']\n```\n\n----------------------------------------\n\nTITLE: Remote Scripting Zope with Java XML-RPC Client\nDESCRIPTION: A Java implementation for remotely connecting to a Zope server using XML-RPC. The code fetches a list of employees and then executes the fireEmployee method for each one, demonstrating cross-language remote procedure calls.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/ScriptingZope.rst#2025-04-22_snippet_25\n\nLANGUAGE: java\nCODE:\n```\ntry {\n    XmlRpcClient server = new XmlRpcClient(\"http://www.zopezoo.org/\");\n    Vector employees = (Vector) server.execute(\"JanitorialDepartment.personnel\");\n\n    int num = employees.size();\n    for (int i = 0; i < num; i++) {\n        Vector args = new Vector(employees.subList(i, i+1));\n        server.execute(\"fireEmployee\", args);\n    }\n\n} catch (XmlRpcException ex) {\n    ex.printStackTrace();\n} catch (IOException ioex) {\n    ioex.printStackTrace();\n}\n```\n\n----------------------------------------\n\nTITLE: Combining Multiple TAL Statements on a Single Element in Zope\nDESCRIPTION: Illustrates how to combine multiple TAL statements on a single element, demonstrating the execution order of different TAL attributes.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/AdvZPT.rst#2025-04-22_snippet_14\n\nLANGUAGE: HTML\nCODE:\n```\n<p tal:define=\"x /root/a/long/path/x | nothing\"\n   tal:condition=\"x\"\n   tal:content=\"x/txt\"\n   tal:attributes=\"class x/class\">Ex Text</p>\n```\n\n----------------------------------------\n\nTITLE: Creating a Simple Dynamic Page Template in HTML\nDESCRIPTION: This example shows a basic Page Template structure with a dynamic title. The tal:content attribute is used to replace the content of a bold tag with the template's title.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/ZPT.rst#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<html>\n  <body>\n    <p>\n      This is <b tal:content=\"template/title\">the Title</b>.\n    </p>\n  </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Querying a Zope FieldIndex for Values Within a Range using Records\nDESCRIPTION: This Python snippet demonstrates a range search on the 'population_count' FieldIndex within a Zope ZCatalog ('AnimalCatalog'). It uses a record object where 'query' is a list [5, 10] and 'range' is 'min:max'. This retrieves objects whose 'population_count' attribute is between 5 and 10, inclusive. Requires the 'population_count' FieldIndex.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/SearchingZCatalog.rst#2025-04-22_snippet_17\n\nLANGUAGE: python\nCODE:\n```\n# animals with population count between 5 and 10\nzcat = context.AnimalCatalog\nresults=zcat(population_count={\n                   'query': [ 5, 10 ],\n                   'range': 'min:max'}\n              )\n```\n\n----------------------------------------\n\nTITLE: Creating a Simple Script (Python) Object in Zope\nDESCRIPTION: This snippet demonstrates how to create a basic Script (Python) object in Zope. It takes a 'name' parameter and returns a greeting string.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/BasicObject.rst#2025-04-22_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nreturn 'Hello, %s from the SalesScript script' % name\n```\n\n----------------------------------------\n\nTITLE: HTML Form with Type Conversion\nDESCRIPTION: A form example demonstrating Zope's parameter conversion by appending ':int' to the input name, which converts the string input to an integer automatically.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/ScriptingZope.rst#2025-04-22_snippet_17\n\nLANGUAGE: html\nCODE:\n```\nAge <input type=\"text\" name=\"age:int\" />\n```\n\n----------------------------------------\n\nTITLE: Implementing Switch-Case Logic with tal:switch and tal:case in Zope TAL\nDESCRIPTION: Demonstrates how to use tal:switch and tal:case directives to create conditional logic in Zope templates. Includes examples for basic usage and handling default cases.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/AppendixC.rst#2025-04-22_snippet_9\n\nLANGUAGE: html\nCODE:\n```\n<ul tal:switch=\"len(items) % 2\">\n  <li tal:case=\"True\">odd</li>\n  <li tal:case=\"False\">even</li>\n</ul>\n```\n\nLANGUAGE: html\nCODE:\n```\n<ul tal:switch=\"item/type\">\n  <li tal:case=\"string:document\">\n    Document\n  </li>\n  <li tal:case=\"string:folder\">\n    Folder\n  </li>\n  <li tal:case=\"default\">\n    Other\n  </li>\n</ul>\n```\n\n----------------------------------------\n\nTITLE: Configuring Apache SSL Virtual Host for Zope\nDESCRIPTION: This Apache configuration snippet sets up an SSL virtual host for Zope. It enables SSL proxying and rewrites requests to use HTTPS in the VirtualHostBase directive.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/VirtualHosting.rst#2025-04-22_snippet_3\n\nLANGUAGE: apache\nCODE:\n```\nNameVirtualHost *:443\n<VirtualHost *:443>\nServerName www.example.com\nSSLProxyEngine on\nRewriteEngine On\nRewriteRule ^/(.*) http://127.0.0.1:8080/VirtualHostBase/https/www.example.com:443/vhm_test/VirtualHostRoot/$1 [L,P]\n</VirtualHost>\n```\n\n----------------------------------------\n\nTITLE: Calling Z SQL Methods Explicitly in ZPT (ZPT)\nDESCRIPTION: This Zope Page Template (ZPT) snippet shows the equivalent of calling a Z SQL Method (`employee_by_id`) with an explicit argument (`emp_id=42`) using a Python expression within the `tal:repeat` attribute. It iterates over the result and renders employee details.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/RelationalDatabases.rst#2025-04-22_snippet_21\n\nLANGUAGE: ZPT\nCODE:\n```\n<div>\n  <tal:div  tal:repeat=\"row python: context.employee_by_id(emp_id=42)\">\n    <h1 tal:content=\"string: ${row/last}, ${row/first}\" />\n    <p>\n     <span tal:content=\"string:${row/first}s employee id is ${row/emp_id}. \n           ${row/first} makes ${row/salary} Euro per year.\n  </tal:div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Displaying ZCatalog Search Results with TAL\nDESCRIPTION: This HTML template uses TAL to display the results of a ZCatalog search. It iterates over the search results and displays the author, URL, and date for each item.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/SearchingZCatalog.rst#2025-04-22_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<html>\n<body tal:define=\"searchResults context/NewsCatalog;\">\n<table border>\n  <tr>\n    <th>Item no.</th>\n    <th>Author</th>\n    <th>Absolute url</th>\n    <th>Date</th>\n  </tr>\n  <div tal:repeat=\"item searchResults\">\n  <tr>\n    <td>\n      <a href=\"link to object\" tal:attributes=\"href item/absolute_url\">\n        #<span tal:replace=\"repeat/item/number\">\n          search item number goes here\n        </span>\n      </a>\n    </td>\n    <td><span tal:replace=\"item/author\">author goes here</span></td>\n    <td><span tal:replace=\"item/date\">date goes here</span></td>\n  </tr>\n  </div>\n</table>\n</body></html>\n```\n\n----------------------------------------\n\nTITLE: Displaying ZCatalog Results in Zope Page Template\nDESCRIPTION: This code snippet shows how to use the results of a ZCatalog query in a Zope Page Template. It creates a list of links to news items returned by the 'relevantSectionNews' script.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/SearchingZCatalog.rst#2025-04-22_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<ul>\n  <li tal:repeat=\"item context/relevantSectionNews\">\n    <a href=\"news link\" tal:attributes=\"href item/absolute_url\">\n      <span tal:replace=\"item/title\">news title</span>\n    </a>\n  </li>\n</ul>\n```\n\n----------------------------------------\n\nTITLE: Calling Zope Page Template from Script (Python)\nDESCRIPTION: This Python code snippet, intended as the last line of a Zope Script (Python) named 'index_html', demonstrates calling a sibling Zope Page Template ('index_html.pt'). It uses `getattr` to dynamically access the template object from the current context and then calls it, passing the `options` dictionary as keyword arguments using `**options`. This effectively delegates the rendering of the final HTML page to the Page Template, supplying it with the necessary dynamic data computed by the script.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/SimpleExamples.rst#2025-04-22_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nreturn getattr(context, 'index_html.pt')(**options)\n```\n\n----------------------------------------\n\nTITLE: Dynamically Generating Table Rows with TAL in Zope Page Template\nDESCRIPTION: This Zope Page Template (TAL) snippet replaces a static table row with dynamic content generation for a file listing. It uses the `tal:repeat=\"item options/library_items\"` directive to iterate over a sequence of file data passed from the controlling Python script via the `options` dictionary. Inside the loop, `tal:attributes=\"href item/url\"` dynamically sets the hyperlink's target URL, while `tal:content=\"item/title\"` and `tal:content=\"item/modified\"` populate the link text and the modification date cell respectively, using data from the current `item` in the iteration.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/SimpleExamples.rst#2025-04-22_snippet_13\n\nLANGUAGE: html\nCODE:\n```\n  <tr tal:repeat=\"item options/library_items\">\n    <td><a href=\"URL\"\n           tal:attributes=\"href item/url\"\n           tal:content=\"item/title\">TITLE</a></td>\n    <td tal:content=\"item/modified\">MON DD, YYYY H:MM AM</td>\n  </tr>\n```\n\n----------------------------------------\n\nTITLE: Implementing Persistent Queue Class in Python for ZODB\nDESCRIPTION: This snippet shows how to create a persistent queue class for use with ZODB. It demonstrates proper handling of mutable objects to ensure changes are tracked by the persistence machinery.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zdgbook/ZODBPersistentComponents.rst#2025-04-22_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nclass Queue(Persistent):\n\n    def __init__(self):\n        self.list=[]\n\n    def put(self, obj):\n        self.list=self.list + [obj]\n\n    def get(self):\n        obj=self.list[-1]\n        self.list=self.list[0:-1]\n        return obj\n```\n\n----------------------------------------\n\nTITLE: Generating SQL IN Clause with dtml-sqltest (DTML)\nDESCRIPTION: This snippet demonstrates using the `dtml-sqltest` tag within a Z SQL Method. The `multiple` attribute indicates that the 'name' variable might be a list, causing the tag to render an SQL `IN (...)` clause. The `type=\"string\"` ensures proper quoting for string values.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/RelationalDatabases.rst#2025-04-22_snippet_9\n\nLANGUAGE: DTML\nCODE:\n```\n<dtml-sqltest name type=\"string\" multiple>\n```\n\n----------------------------------------\n\nTITLE: Calling Scripts in Zope Page Templates\nDESCRIPTION: Demonstrates how to call scripts with parameters from Zope Page Templates using Python expressions.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/AdvZPT.rst#2025-04-22_snippet_39\n\nLANGUAGE: python\nCODE:\n```\n\"python:context.myscript(1, 2)\"\n\"python:context.myscript('arg', foo=request.form['x'])\"\n```\n\n----------------------------------------\n\nTITLE: Searching with ZCatalog Using Different Index Types in Python\nDESCRIPTION: This code demonstrates how to search a ZCatalog using both exact matching with a FieldIndex and fuzzy text matching with a ZCTextIndex. It shows how to query the AnimalCatalog for latin_name using both index types.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/SearchingZCatalog.rst#2025-04-22_snippet_24\n\nLANGUAGE: python\nCODE:\n```\n# search latin_name\nzcat=context.AnimalCatalog\nexact_results=zcat({'latin_name':'homo sapiens'})\nfuzzy=zcat({'latin_name_text':'sap*'})\n```\n\n----------------------------------------\n\nTITLE: Querying a Zope DateIndex for Dates Newer Than a Threshold using Records\nDESCRIPTION: This PythonScript snippet queries a Zope ZCatalog ('NewsCatalog') using a DateIndex named 'date'. It employs a record query with 'range': 'min' to find NewsItems newer than a specific date. The 'query' value is calculated dynamically as the current time minus 7 days using 'context.ZopeTime() - 7'.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/SearchingZCatalog.rst#2025-04-22_snippet_18\n\nLANGUAGE: python\nCODE:\n```\n# return NewsItems newer than a week\nzcat = context.NewsCatalog\nresults = zcat( date={'query' : context.ZopeTime() - 7,\n                        'range' : 'min'\n                })\n```\n\n----------------------------------------\n\nTITLE: Creating a Web Form with DTML in Zope\nDESCRIPTION: This snippet shows how to create a simple web form using DTML in Zope. It includes input fields for name and email, and submits to an action named 'infoAction'.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/DTML.rst#2025-04-22_snippet_7\n\nLANGUAGE: HTML\nCODE:\n```\n<dtml-var standard_html_header>\n\n<p>Please send me information on your aardvark adoption\nprogram.</p>\n\n<form action=\"infoAction\">\nname: <input type=\"text\" name=\"user_name\"><br>\nemail: <input type=\"text\" name=\"email_addr\"><br>\n<input type=\"submit\" name=\"submit\" value=\" Submit \">\n</form>\n\n<dtml-var standard_html_footer>\n```\n\n----------------------------------------\n\nTITLE: Defining a Python Brains Class for Employee Results\nDESCRIPTION: A Python class that adds a fullName method to employee result objects, demonstrating how to enhance result objects with custom methods using Pluggable Brains.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/RelationalDatabases.rst#2025-04-22_snippet_28\n\nLANGUAGE: python\nCODE:\n```\nclass Employee:\n\n  def fullName(self):\n    \"\"\" The full name in the form 'John Doe' \"\"\"\n    return self.first + ' ' + self.last\n```\n\n----------------------------------------\n\nTITLE: Basic Mailbox Class Security Implementation in Python\nDESCRIPTION: Example showing how to implement security in a Mailbox class using ClassSecurityInfo. Includes method protection using decorators and initialization using InitializeClass.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zdgbook/Security.rst#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom AccessControl import ClassSecurityInfo\nfrom AccessControl.class_init import InitializeClass\n\nclass Mailbox(ObjectManager):\n    \"\"\"A mailbox object.\"\"\"\n\n    # Create a SecurityInfo for this class\n    security = ClassSecurityInfo()\n\n    # Set security for the object itself\n    security.declareObjectProtected('View Mailbox')\n\n    security.declareProtected('View management screens', 'manage')\n    manage=HTMLFile('mailbox_manage', globals())\n\n    @security.public\n    def messageCount(self):\n        \"\"\"Return a count of messages.\"\"\"\n        return len(self._messages)\n\n    # protect 'listMessages' with the 'View Mailbox' permission\n    @security.protected('View Mailbox')\n    def listMessages(self):\n        \"\"\"Return a sequence of message objects.\"\"\"\n        return self._messages[:]\n\n    @security.private\n    def getMessages(self):\n        self._messages=GoGetEm()\n        return self._messages\n\n# call this to initialize framework classes, which\n# does the right thing with the security assertions.\nInitializeClass(Mailbox)\n```\n\n----------------------------------------\n\nTITLE: Creating a Zope Adapter in Python\nDESCRIPTION: Demonstrates how to create a Zope adapter class MyAdapter that adapts from IMyInterface to INewInterface. The adapter takes a context object in its constructor and implements the adapted interface.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/src/Products/Five/doc/manual.txt#2025-04-22_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom zope.interface import Interface\n\nclass INewInterface(Interface):\n    \"\"\"The interface we adapt to.\n    \"\"\"\n\n    def anotherMethod():\n        \"\"\"This method does more stuff.\n        \"\"\"\n\nfrom zope.interface import implementer\nfrom interfaces import INewInterface\n\n@implementer(INewInterface)\nclass MyAdapter:\n\n    def __init__(self, context):\n        self.context = context\n\n    def anotherMethod(self):\n        return \"We have adapted: %s\" % self.context.someMethod()\n```\n\n----------------------------------------\n\nTITLE: Receiving and Responding to XML Messages in Zope (Python)\nDESCRIPTION: This Python function `receiveMessage`, intended as a Zope External Method, takes an XML message string as input. It utilizes the `MessageHandler` class and `xml.sax.parseString` to parse the message and extract relevant details (sender, recipient, body). It then calls a `getResponse` method (expected to be available in the context, e.g., `self.getResponse`) with the extracted message body to generate a response string. Finally, it constructs a new XML message string containing the response and returns it, likely to a calling Jabber server.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/ScriptingZope.rst#2025-04-22_snippet_14\n\nLANGUAGE: python\nCODE:\n```\ndef receiveMessage(self, message):\n    \"\"\"\n    Called by a Jabber server\n    \"\"\"\n    handler=MessageHandler()\n    parseString(message, handler)\n\n    # call a script that returns a response string\n    # given a message body string\n    response_body=self.getResponse(handler.body)\n\n    # create a response XML message\n    response_message=\"\"\"\n      <message to=\"%s\" from=\"%s\">\n        <body>%s</body>\n      </message>\"\"\" % (handler.sender, handler.recipient, response_body)\n\n    # return it to the server\n    return response_message\n```\n\n----------------------------------------\n\nTITLE: Using Python Expressions for Alternating Row Styles\nDESCRIPTION: Shows how to use Python expressions with logical operators to set alternating CSS classes for table rows based on position in a repeat loop.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/AdvZPT.rst#2025-04-22_snippet_35\n\nLANGUAGE: TAL\nCODE:\n```\n<tr tal:define=\"oddrow repeat/item/odd\"\n    tal:attributes=\"class python:oddrow and 'oddclass' or 'evenclass'\">\n```\n\n----------------------------------------\n\nTITLE: Implementing Poll Edit Method for Zope Product\nDESCRIPTION: Python method that handles form submission to edit a poll. The method updates the poll's question and responses and resets the vote counts.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zdgbook/Products.rst#2025-04-22_snippet_21\n\nLANGUAGE: python\nCODE:\n```\nclass PollProduct(...):\n    ...\n\n    def __init__(self, id, question, responses):\n        self.id = id\n        self.editPoll(question, response)\n\n    ...\n\n    security.declareProtected('Change Poll', 'editPoll')\n    def editPoll(self, question, responses):\n        \"\"\"\n        Changes the question and responses.\n        \"\"\"\n        self._question = question\n        self._responses = responses\n        self._votes = {}\n        for i in range(len(responses)):\n            self._votes[i] = 0\n```\n\n----------------------------------------\n\nTITLE: Implementing an Interface with XML-RPC in Zope\nDESCRIPTION: This code shows an alternative implementation of the IHello interface that uses XML-RPC to delegate the greeting functionality to a remote server, demonstrating how interfaces can have multiple implementations.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zdgbook/ComponentsAndInterfaces.rst#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport xmlrpclib\n\n@implementer(IHello)\nclass XMLRPCHello:\n    def hello(self, name):\n        \"\"\"Delegates the hello call to a remote object\n        using XML-RPC.\n        \"\"\"\n        s = xmlrpclib.Server('your/rpc/server')\n        return s.hello(name)\n```\n\n----------------------------------------\n\nTITLE: Implementing Dynamic Page Title with TAL in HTML\nDESCRIPTION: This snippet demonstrates how to use TAL (Template Attribute Language) to create a dynamic page headline. The tal:content attribute is used to replace the content of an h1 tag with a dynamic value.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/ZPT.rst#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<h1 tal:content=\"context/title\">Sample Page Title</h1>\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Hello Component with Interface in Zope\nDESCRIPTION: This snippet demonstrates how to create a simple component in Zope by defining an interface (IHello) that specifies a greeting method, and implementing that interface with a concrete class (HelloComponent).\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zdgbook/ComponentsAndInterfaces.rst#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom zope.interface import Interface\nfrom zope.interface import implementer\n\nclass IHello(Interface):\n    \"\"\"The Hello interface provides greetings.\"\"\"\n\n    def hello(name):\n        \"\"\"Say hello to the name\"\"\"\n\n@implementer(IHello)\nclass HelloComponent:\n    def hello(self, name):\n        return \"hello %s!\" % name\n```\n\n----------------------------------------\n\nTITLE: Interactive Web Debugging in Zope\nDESCRIPTION: Demonstrates how to set an interactive breakpoint in code that will trigger when accessed via web browser in debug mode.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zdgbook/TestingAndDebugging.rst#2025-04-22_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport pdb;pdb.set_trace()\n```\n\n----------------------------------------\n\nTITLE: Generating Zope Search Form with Dynamic Author List (TAL/HTML)\nDESCRIPTION: This TAL/HTML snippet defines a complete search form for querying a Zope ZCatalog named 'NewsCatalog'. It includes standard input fields for content and date, and notably features a multiple-select dropdown for 'author'. This dropdown is dynamically populated with unique author names retrieved from the 'author' FieldIndex using the ZCatalog's `uniqueValuesFor` method.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/SearchingZCatalog.rst#2025-04-22_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<html><body>\n<form action=\"Report\" method=\"get\">\n<h2 tal:content=\"template/title_or_id\">Title</h2>\nEnter query parameters:<br><table>\n<tr><th>Author</th>\n<td>\n  <select name=\"author:list\" size=\"6\" multiple>             \n    <option \n      tal:repeat=\"item python:context.NewsCatalog.uniqueValuesFor('author')\" \n      tal:content=\"item\"\n      value=\"opt value\">\n    </option>\n  </select>\n</td></tr>\n<tr><th>Content</th>\n<td><input name=\"content_index\" width=30 value=\"\"></td></tr>\n<tr><th>Date</th>\n<td><input name=\"date_index\" width=30 value=\"\"></td></tr>\n<tr><td colspan=2 align=center>\n<input type=\"submit\" name=\"SUBMIT\" value=\"Submit Query\">\n</td></tr>\n</table>\n</form>\n</body></html>\n```\n\n----------------------------------------\n\nTITLE: Using Alternate Path Expressions with Fallbacks\nDESCRIPTION: Demonstrates using alternate paths with the vertical bar (|) separator to provide fallback options when a path doesn't exist, helping to prevent errors during template rendering.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/AdvZPT.rst#2025-04-22_snippet_25\n\nLANGUAGE: TAL\nCODE:\n```\n<h4 tal:content=\"request/form/x | context/x\">Header</h4>\n```\n\n----------------------------------------\n\nTITLE: Extending Zope Script (Python) for Sortable File Listing\nDESCRIPTION: This is an enhanced version of the Zope Script (Python) named 'index_html', designed to create a sortable file library. It accepts an optional request parameter 'sort' (defaulting to 'title'). Based on this parameter, it determines the sorting criteria (`sort_on`) for the file list and generates appropriate URLs (`sort_title_url`, `sort_modified_url`) to be used in the template for sort links. It retrieves 'File' objects, sorts them using `sequence.sort`, extracts relevant data (title, URL, modified date) for each file, packages this data along with the sort URLs into the `options` dictionary, and finally calls the associated Page Template (`index_html.pt`) to render the HTML.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/SimpleExamples.rst#2025-04-22_snippet_16\n\nLANGUAGE: python\nCODE:\n```\n## Script (Python) \"index_html\"\n##parameters=sort='title'\n##\nlibrary_items = []\nitems = context.objectValues(['File'])\nif sort == 'title':\n    sort_on = ( ('title_or_id', 'cmp', 'asc'), )\n    sort_title_url = ''\n    sort_modified_url = '%s?sort=modified' % context.absolute_url()\nelse:\n    sort_on = ( ('_p_mtime', 'cmp', 'desc'), )\n    sort_title_url = '%s?sort=title' % context.absolute_url()\n    sort_modified_url = ''\nitems = sequence.sort(items, sort_on)\nfor item in items:\n    library_items.append(\n            { 'title': item.title_or_id(),\n              'url': item.absolute_url(),\n              'modified': container.last_modified(item),\n              } )\n\noptions = { 'sort_title_url': sort_title_url,\n            'sort_modified_url': sort_modified_url,\n            'library_items': tuple(library_items) }\n\nreturn getattr(context, 'index_html.pt')(**options)\n```\n\n----------------------------------------\n\nTITLE: Properly Updating Mutable Session Data in Python\nDESCRIPTION: Shows the correct approach to update mutable objects in session storage by explicitly setting the object back into the session after modification.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/Sessions.rst#2025-04-22_snippet_17\n\nLANGUAGE: python\nCODE:\n```\nsession = self.REQUEST.SESSION\nfoo = {}\nfoo['before'] = 1\nsession.set('foo', foo)\n\n# mutate the dictionary\nfoo['after'] = 1\n\n# tickle the persistence machinery\nsession.set('foo', foo)\n```\n\n----------------------------------------\n\nTITLE: Logging in Zope Applications with Python\nDESCRIPTION: This code snippet shows how to use the Zope logging framework to write debugging messages to the Zope application log using the 'LOG' function from the 'zLOG' module.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zdgbook/TestingAndDebugging.rst#2025-04-22_snippet_13\n\nLANGUAGE: Python\nCODE:\n```\nfrom zLOG import LOG, DEBUG\nLOG('my app', DEBUG, 'a debugging message')\n```\n\n----------------------------------------\n\nTITLE: Creating SQL Insert Statement with DTML Variables\nDESCRIPTION: SQL template for inserting new employee records using DTML variables to safely handle parameter insertion. Takes emp_id, first, last, and salary as parameters.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/RelationalDatabases.rst#2025-04-22_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\ninsert into employees (emp_id, first, last, salary) values\n(<dtml-sqlvar emp_id type=\"int\">, \n<dtml-sqlvar first type=\"string\">, \n<dtml-sqlvar last type=\"string\">,\n<dtml-sqlvar salary type=\"float\">\n)\n```\n\n----------------------------------------\n\nTITLE: Displaying Error Messages in Zope Page Templates Using TAL - XML\nDESCRIPTION: This example demonstrates how to conditionally output an error message in a Zope Page Template using TAL. It inspects the 'options' built-in variable for an 'error_message' and displays it using tal:content. The construct uses '| nothing' to provide a default when no error message is present, supporting flexible optional messaging in form feedback UI.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/AdvZPT.rst#2025-04-22_snippet_21\n\nLANGUAGE: xml\nCODE:\n```\n<span tal:condition=\"options/error_message | nothing\">\nError: <b tal:content=\"options/error_message\">\n  Error message goes here.\n</b></span>\n```\n\n----------------------------------------\n\nTITLE: Handling Mutable Data in Session Objects in Python\nDESCRIPTION: Demonstrates the incorrect and correct ways to handle mutable objects stored in session data. When mutating an object stored in a session, you must explicitly place it back into session storage after modification.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/Sessions.rst#2025-04-22_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nsession = self.REQUEST.SESSION\nfoo = {}\nfoo['before'] = 1\nsession.set('foo', foo)\n\n# mutate the dictionary\n\nfoo['after'] = 1\n\n# performing session.get('foo') 10 minutes from now will likely\n# return a dict with only 'before' within!\n```\n\n----------------------------------------\n\nTITLE: Defining and Using Variables with tal:define in Zope Templates\nDESCRIPTION: Shows how to define and use variables in Zope templates using the tal:define attribute, including conditional rendering and repetition.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/AdvZPT.rst#2025-04-22_snippet_8\n\nLANGUAGE: HTML\nCODE:\n```\n<ul tal:define=\"items container/objectIds\"\n    tal:condition=\"items\">\n  <li tal:repeat=\"item items\">\n    <p tal:content=\"item\">id</p>\n  </li>\n</ul>\n```\n\n----------------------------------------\n\nTITLE: Creating a Dynamic File Library in Zope with Python\nDESCRIPTION: This Python script generates a list of file objects in a Zope folder, including their titles, URLs, and modification dates. It's used to create a dynamic file library listing.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/SimpleExamples.rst#2025-04-22_snippet_9\n\nLANGUAGE: Python\nCODE:\n```\nlibrary_items = []\nitems = context.objectValues(['File'])\nfor item in items:\n    library_items.append(\n            { 'title': item.title_or_id(),\n              'url': item.absolute_url(),\n              'modified': container.last_modified(item),\n              } )\n\noptions = { 'library_items': tuple(library_items) }\n\nreturn options\n```\n\n----------------------------------------\n\nTITLE: Direct Use of Exists Expressions\nDESCRIPTION: Shows a more concise way to check for the existence of a path using the exists: expression prefix, simplifying conditional rendering.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/AdvZPT.rst#2025-04-22_snippet_31\n\nLANGUAGE: TAL\nCODE:\n```\n<h4 tal:condition=\"exists:request/form/errmsg\"\n    tal:content=\"request/form/errmsg\">Error!</h4>\n```\n\n----------------------------------------\n\nTITLE: Calling Methods Without Output using 'dtml-call' in DTML\nDESCRIPTION: This snippet demonstrates the 'dtml-call' tag. It conditionally calls the 'manage_changeProperties' method based on the presence of 'animalName' in the request. Unlike 'dtml-var', 'dtml-call' executes the method but does not insert the method's return value into the page output, which is useful for actions that primarily have side effects.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/AdvDTML.rst#2025-04-22_snippet_18\n\nLANGUAGE: DTML\nCODE:\n```\n<dtml-if expr=\"REQUEST.has_key('animalName')\">\n  <dtml-call expr=\"manage_changeProperties(animalName=REQUEST['animalName'])\">\n  <h1>The property 'animalName' has changed</h1>\n<dtml-else>\n  <h1>No properties were changed</h1>\n</dtml-if>\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Scope of Zope ClassSecurityInfo Protection in Python\nDESCRIPTION: Defines `MyClass` inheriting from `ObjectManager`. It shows that methods (`sayHello`) and instance attributes (`subObject` referring to another class instance) can be protected using `ClassSecurityInfo`, but standard Python type attributes (`foobar` which is a string) cannot be directly protected this way. It requires `Acquisition` in the base class hierarchy and highlights the need to use methods for exposing data securely.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zdgbook/Security.rst#2025-04-22_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom AccessControl import ClassSecurityInfo\nfrom OFS.ObjectManager import ObjectManager\n\n\n# We subclass ObjectManager, which has Acquisition in its\n# base class hierarchy, so we can use SecurityInfo.\n\nclass MyClass(ObjectManager):\n    \"\"\"example class\"\"\"\n\n    # Create a SecurityInfo for this class\n    security = ClassSecurityInfo()\n\n    # Set security for the object itself\n    security.declareObjectProtected('View')\n\n    # This is ok, because subObject is an instance\n    security.declareProtected('View management screens', 'subObject')\n    subObject = MySubObject()\n\n    # This is ok, because sayHello is a method\n    @security.public\n    def sayHello(self):\n        \"\"\"Return a greeting.\"\"\"\n        return 'hello!'\n\n    # This will not work, because foobar is not a method\n    # or an instance - it is a standard Python type\n    security.declarePublic('foobar')\n    foobar = 'some string'\n```\n\n----------------------------------------\n\nTITLE: Using TAL Content with Structure Mode to Insert HTML\nDESCRIPTION: Shows how to use tal:content with the structure keyword to insert HTML content that will not be escaped, allowing markup to be preserved.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/AppendixC.rst#2025-04-22_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<p tal:content=\"structure context/getStory\">\n  marked <b>up</b> content goes here.\n</p>\n```\n\n----------------------------------------\n\nTITLE: Initializing ZODB FileStorage and Database Connection in Python\nDESCRIPTION: This snippet demonstrates how to set up a ZODB FileStorage, create a database, open a connection, and access the root object. It's a basic setup for working with ZODB outside of Zope.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zdgbook/ZODBPersistentComponents.rst#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom ZODB import FileStorage, DB\nstorage = FileStorage.FileStorage('mydatabase.fs')\ndb = DB(storage)\nconnection = db.open()\nroot = connection.root()\n```\n\n----------------------------------------\n\nTITLE: Configuring Temporary Storage for Sessions in Zope\nDESCRIPTION: This code snippet shows how to configure a temporary storage database for storing session data in the Zope configuration file zope.conf. It sets up a temporary storage mount point for session data.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/Sessions.rst#2025-04-22_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n<zodb_db temporary>\n    <temporarystorage>\n      name Temporary database (for sessions)\n    </temporarystorage>\n    mount-point /temp_folder\n    container-class Products.TemporaryFolder.TemporaryContainer\n</zodb_db>\n```\n\n----------------------------------------\n\nTITLE: Sending Email Messages with SMTP via DTML 'sendmail' Tag - DTML\nDESCRIPTION: Shows how to compose and send email using the DTML 'sendmail' tag, specifying mail host, recipient, sender, and subject headers. Supports dynamic interpolation of recipients and message body content. Requires a valid 'mailhost' object and correct addressing information in the DTML context.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/AppendixA.rst#2025-04-22_snippet_16\n\nLANGUAGE: dtml\nCODE:\n```\n<dtml-sendmail mailhost=\"mailhost\">\nTo: <dtml-var recipient>\nFrom: <dtml-var sender>\nSubject: <dtml-var subject>\n\nDear <dtml-var recipient>,\n\nYou order number <dtml-var order_number> is ready.\nPlease pick it up at your soonest convenience.\n</dtml-sendmail>\n```\n\n----------------------------------------\n\nTITLE: Dynamic Weather Template with Database Queries\nDESCRIPTION: Enhanced HTML template that includes database queries for weather information using TAL expressions to demonstrate the benefits of caching for database-heavy operations.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/ZopeServices.rst#2025-04-22_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<html>\n<body>\n\n  <p>\n    Yesterday's weather was\n    <tal:yesterday tal:replace=\"context/yesterdayQuery\" />\n  </p>\n\n  <p>\n    The current temperature is\n    <tal:current tal:replace=\"context/currentTempQuery\" />\n  </p>\n\n</body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Conditional Elements with tal:condition\nDESCRIPTION: Shows how to use tal:condition to conditionally include or exclude HTML elements based on expressions.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/ZPT.rst#2025-04-22_snippet_10\n\nLANGUAGE: html\nCODE:\n```\n<p tal:condition=\"request/cookies/verbose | nothing\">\n  Here's the extra information you requested.\n</p>\n```\n\n----------------------------------------\n\nTITLE: Building Dynamic WHERE Clauses with dtml-sqlgroup and dtml-and (DTML)\nDESCRIPTION: This Z SQL Method template uses `dtml-sqlgroup` to conditionally include a `WHERE` clause only if any inner conditions are met. `dtml-sqltest` tags define optional conditions for 'salary', 'first', and 'last' name. The `dtml-and` tags insert the `AND` keyword between rendered conditions.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/RelationalDatabases.rst#2025-04-22_snippet_17\n\nLANGUAGE: DTML\nCODE:\n```\nselect * from employees \n<dtml-sqlgroup where>\n  <dtml-sqltest salary op=gt type=float optional>\n<dtml-and>\n  <dtml-sqltest first op=\"eq\" type=\"nb\" multiple optional>\n<dtml-and>\n  <dtml-sqltest last  op=\"eq\" type=\"nb\" multiple optional>\n</dtml-sqlgroup>\n```\n\n----------------------------------------\n\nTITLE: Displaying Poll Results and Voting Form with Zope DTML\nDESCRIPTION: This Zope DTML Method renders an HTML page to display poll results and allow users to vote. It shows the poll question, lists responses with radio buttons using `dtml-in`, includes a submit button, processes the vote submission by calling the poll's `castVote` method via `dtml-call` if an `index` is submitted, and then displays the results including total votes and percentages per response (using the `getPercentFor` script). It requires standard Zope variables like `standard_html_header` and `standard_html_footer`.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zdgbook/Products.rst#2025-04-22_snippet_14\n\nLANGUAGE: dtml\nCODE:\n```\n<dtml-var standard_html_header>\n\n<h2>\n  <dtml-var getQuestion>\n</h2>\n\n<form> <!-- calls this dtml method -->\n\n<dtml-in getResponses>\n  <p>\n    <input type=\"radio\" name=\"index\" value=\"&dtml-sequence-index;\">\n    <dtml-var sequence-item>\n  </p>\n</dtml-in>\n\n<input type=\"submit\" value=\" Vote \">\n\n</form>\n\n<!-- process form -->\n\n<dtml-if index>\n  <dtml-call expr=\"castVote(index)\">\n</dtml-if>\n\n<!-- display results -->\n\n<h2>Results</h2>\n\n<p><dtml-var getTotalVotes> votes cast</p>\n\n<dtml-in getResponses>\n  <p>\n    <dtml-var sequence-item> -\n    <dtml-var expr=\"getPercentFor(_.get('sequence-index'))\">%\n  </p>\n</dtml-in>\n\n<dtml-var standard_html_footer>\n```\n\n----------------------------------------\n\nTITLE: Registering and Using JavaScript and CSS Resource Viewlets in Zope (Python)\nDESCRIPTION: Demonstrates how to register JS and CSS resource adapters and use Zope's JavaScriptViewlet and CSSViewlet to insert resource links in the HTML output. Covers custom resource lookup, Zope component registration, override of default link attributes, and integration with browser requests. Adapters require correct registration to be resolved at render time.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/src/Products/Five/viewlet/README.txt#2025-04-22_snippet_10\n\nLANGUAGE: python\nCODE:\n```\n>>> from zope.interface import Interface\n>>> from zope.component import getGlobalSiteManager\n>>> from zope.publisher.interfaces.browser import IDefaultBrowserLayer\n>>> def registerResource(name, factory):\n...     gsm = getGlobalSiteManager()\n...     gsm.registerAdapter(\n...         factory,\n...         required=(IDefaultBrowserLayer, ),\n...         provided=Interface,\n...         name=name,\n...     )\n\n>>> class JSResource(object):\n...     def __init__(self, request):\n...         self.request = request\n...\n...     def __call__(self):\n...         return '/@@/resource.js'\n\n>>> registerResource('resource.js', JSResource)\n>>> JSViewlet = viewlet.JavaScriptViewlet('resource.js')\n>>> print(JSViewlet(content, request, view, manager).render().strip())\n<script type=\"text/javascript\" src=\"/@@/resource.js\">\n</script>\n\n>>> class CSSResource(object):\n...     def __init__(self, request):\n...         self.request = request\n...\n...     def __call__(self):\n...         return '/@@/resource.css'\n\n>>> registerResource('resource.css', CSSResource)\n\n>>> CSSViewlet = viewlet.CSSViewlet('resource.css')\n>>> print(CSSViewlet(content, request, view, manager).render().strip())\n<link type=\"text/css\" rel=\"stylesheet\"\n      href=\"/@@/resource.css\" media=\"all\" />\n\n>>> CSSViewlet = viewlet.CSSViewlet('resource.css', media='print', rel='css')\n>>> print(CSSViewlet(content, request, view, manager).render().strip())\n<link type=\"text/css\" rel=\"css\" href=\"/@@/resource.css\"\n      media=\"print\" />\n\n```\n\n----------------------------------------\n\nTITLE: Creating Employees Table in SQL\nDESCRIPTION: SQL code to create an 'employees' table with columns for employee ID, first name, last name, and salary. This example is for Gadfly but syntax may vary for other databases.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/RelationalDatabases.rst#2025-04-22_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE employees\n(\nemp_id integer,\nfirst varchar,\nlast varchar,\nsalary float\n)\n```\n\n----------------------------------------\n\nTITLE: Accessing Python Modules in Zope Page Templates\nDESCRIPTION: Shows how to access Python modules in Zope Page Templates, including default modules and package modules.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/AdvZPT.rst#2025-04-22_snippet_40\n\nLANGUAGE: python\nCODE:\n```\ntal:define=\"global pps modules/Products.PythonScripts.standard\"\ntal:define=\"global pps python:modules['Products.PythonScripts.standard']\"\n```\n\n----------------------------------------\n\nTITLE: Accessing Zope Objects via URL Paths\nDESCRIPTION: This snippet demonstrates how Zope objects are accessed through URL paths based on their location in the object hierarchy. It shows examples of accessing different 'Uncle' objects stored in folders.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/ZopeArchitecture.rst#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n/Uncles/Rick\n/Uncles/Danny \n/Uncles/Louis\n```\n\n----------------------------------------\n\nTITLE: Overriding Inherited Zope Security Declarations in Python Subclasses\nDESCRIPTION: Defines a base class `MailboxBase` with security declarations and a subclass `MyMailbox` that inherits from it. `MyMailbox` overrides the security declaration for the inherited `listMessages` method, changing it from protected ('View Mailbox') as defined in the base class to public using `declarePublic`. Both classes require initialization using `InitializeClass` for security settings to take effect.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zdgbook/Security.rst#2025-04-22_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom AccessControl import ClassSecurityInfo\nfrom AccessControl.class_init import InitializeClass\nfrom OFS.ObjectManager import ObjectManager\n\nclass MailboxBase(ObjectManager):\n    \"\"\"A mailbox base class.\"\"\"\n\n    # Create a SecurityInfo for this class\n    security = ClassSecurityInfo()\n\n    @security.protected('View Mailbox')\n    def listMessages(self):\n        \"\"\"Return a sequence of message objects.\"\"\"\n        return self._messages[:]\n\n    security.setPermissionDefault('View Mailbox',\n                                  ('Manager', 'Mailbox Owner'))\n\nInitializeClass(MailboxBase)\n\n\nclass MyMailbox(MailboxBase):\n    \"\"\"A mailbox subclass\n\n    Here  we want the security for listMessages to be public instead of\n    protected (as defined in the base class).\n    \"\"\"\n\n    # Create a SecurityInfo for this class\n    security = ClassSecurityInfo()\n\n    security.declarePublic('listMessages')\n\nInitializeClass(MyMailbox)\n```\n\n----------------------------------------\n\nTITLE: Removing Element Tags with tal:omit-tag in Zope TAL\nDESCRIPTION: Examples of using tal:omit-tag to remove surrounding tags while keeping the content. Shows unconditional and conditional tag omission, as well as creating multiple elements without an enclosing tag.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/AppendixC.rst#2025-04-22_snippet_10\n\nLANGUAGE: html\nCODE:\n```\n<div tal:omit-tag=\"\" comment=\"This tag will be removed\">\n  <i>...but this text will remain.</i>\n</div>\n```\n\nLANGUAGE: html\nCODE:\n```\n<b tal:omit-tag=\"not:bold\">\n  I may be bold.\n</b>\n```\n\nLANGUAGE: html\nCODE:\n```\n<span tal:repeat=\"n python:range(10)\"\n      tal:omit-tag=\"\">\n  <p tal:content=\"n\">1</p>\n</span>\n```\n\n----------------------------------------\n\nTITLE: Processing HTML Form Input and Returning a Response Template - Python\nDESCRIPTION: This Zope Page Template script accepts form parameters 'name' and 'age', processes them by calling a method (addPerson), and returns a response template. It acts as the backend for a form POST, orchestrating the action as specified in the form tag. Requires that the container object defines both addPerson and responseTemplate methods.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/AdvZPT.rst#2025-04-22_snippet_19\n\nLANGUAGE: python\nCODE:\n```\n## Script (Python) \"action\"\n##parameters=name, age\n##\ncontainer.addPerson(name, age)\nreturn container.responseTemplate()\n```\n\n----------------------------------------\n\nTITLE: Overriding Object Traversal with Acquisition in Zope - Python\nDESCRIPTION: This snippet defines a Python class using explicit acquisition via subclassing from Acquisition.Explicit, overriding the __bobo_traverse__ method to enable manual traversal and context wrapping. The method retrieves the next object by name and uses __of__ for proper acquisition context, ensuring that traversal proceeds safely and as intended. This customization enables developers to modify or intercept the default publishing traversal, and requires Zope's Acquisition module as a dependency; it expects a traversal name and request object as parameters, returning an acquisition-wrapped object.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zdgbook/ObjectPublishing.rst#2025-04-22_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n      class Example(Acquisition.Explicit):\\n          ...\\n\\n          def __bobo_traverse__(self, name, request):\\n              ...\\n              next_object=self._get_next_object(name)\\n              return  next_object.__of__(self)\\n\n```\n\n----------------------------------------\n\nTITLE: Custom Viewlet Manager for Rendering Table Rows in Zope Views (Python)\nDESCRIPTION: Implements a custom viewlet manager class for rendering table rows dynamically by fetching and invoking viewlets per item in a container. Integrates with Zope's adapter system and renders output via a template. The setup includes a Python-based implementation and linkage to an on-disk template file.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/src/Products/Five/viewlet/README.txt#2025-04-22_snippet_13\n\nLANGUAGE: python\nCODE:\n```\n>>> shownColumns = []\n\n>>> @zope.interface.implementer(interfaces.IViewletManager)\n... class ContentsViewletManager(object):\n...     index = None\n...\n...     def __init__(self, context, request, view):\n...         self.context = context\n...         self.request = request\n...         self.__parent__ = view\n...\n...     def update(self):\n...         rows = []\n...         for name, value in self.context.objectItems():\n...             rows.append(\n...                 [zope.component.getMultiAdapter(\n...                     (value, self.request, self.__parent__, self),\n...                     interfaces.IViewlet, name=colname)\n...                  for colname in shownColumns])\n...             [entry.update() for entry in rows[-1]]\n...         self.rows = rows\n...\n...     def render(self, *args, **kw):\n...         return self.index(*args, **kw)\n\n>>> tableTemplate = os.path.join(temp_dir, 'table.pt')\n>>> with open(tableTemplate, 'w') as fd:\n...     _ = fd.write('''\n... <table>\n...   <tr tal:repeat=\"row view/rows\">\n...     <td tal:repeat=\"column row\">\n...       <tal:block replace=\"structure column/render\" />\n...     </td>\n...   </tr>\n... </table>\n... ''')\n\n>>> from Products.Five.browser.pagetemplatefile import ZopeTwoPageTemplateFile\n>>> ContentsViewletManager = type(\n...     'ContentsViewletManager', (ContentsViewletManager,),\n...     {'index': ZopeTwoPageTemplateFile('table.pt', temp_dir)})\n\n>>> zope.component.provideAdapter(\n...     ContentsViewletManager,\n...     (Container, IDefaultBrowserLayer, zope.interface.Interface),\n...     interfaces.IViewletManager, name='contents')\n\n>>> contents = Contents(container, request)\n>>> print(contents().strip())\n<html>\n  <body>\n    <h1>Cotnents</h1>\n    <div>\n      <table>\n        <tr>\n        </tr>\n        <tr>\n        </tr>\n        <tr>\n        </tr>\n      </table>\n    </div>\n  </body>\n</html>\n\n```\n\n----------------------------------------\n\nTITLE: Registering a basic viewlet with ZCML\nDESCRIPTION: Demonstrates registering a simple viewlet for a specific manager interface with a template and extra attributes.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/src/Products/Five/viewlet/directives.txt#2025-04-22_snippet_5\n\nLANGUAGE: XML\nCODE:\n```\n<configure xmlns=\"http://namespaces.zope.org/browser\" i18n_domain=\"zope\">\n  <viewlet\n      name=\"weather\"\n      manager=\"Products.Five.viewlet.tests.ILeftColumn\"\n      template=\"%s\"\n      permission=\"zope.Public\"\n      extra_string_attributes=\"can be specified\"\n      />\n</configure>\n```\n\n----------------------------------------\n\nTITLE: Creating External Method Python Module\nDESCRIPTION: Demonstrates how to define a Python function in an External Method module. This example creates a simple 'hello' function that takes an optional name parameter and returns a greeting string.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/ScriptingZope.rst#2025-04-22_snippet_6\n\nLANGUAGE: Python\nCODE:\n```\ndef hello(name=\"World\"):\n    return \"Hello %s.\" % name\n```\n\n----------------------------------------\n\nTITLE: Configuring Virtual Host Mapping in Zope\nDESCRIPTION: This snippet shows the format for adding virtual host mappings in Zope's VirtualHostMonster Mappings tab. It demonstrates how to map a domain to a specific Zope path, including wildcard subdomain mapping.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/VirtualHosting.rst#2025-04-22_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nwww.example.com /path/to/be/rewritten/to\n\n*.example.com /folder\n```\n\n----------------------------------------\n\nTITLE: Complete Batch Navigation Example in Zope Page Templates\nDESCRIPTION: A comprehensive example showing how to implement batch navigation with previous and next links. Demonstrates paginating through a list of employees with 3 items per page.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/AdvZPT.rst#2025-04-22_snippet_47\n\nLANGUAGE: html\nCODE:\n```\n  <html>\n    <head>\n      <title tal:content=\"template/title\">The title</title>\n    </head>\n    <body tal:define=\"employees context/getEmployees;\n           start python:int(path('request/start | nothing') or 0);\n           batch python:modules['ZTUtils'].Batch(employees, \n                                                 size=3, \n                                                 start=start);\n           previous python:batch.previous;\n           next python:batch.next\">\n\n    <p>\n      <a tal:condition=\"previous\"\n         tal:attributes=\"href string:${request/URL0}?start:int=${previous/first}\"\n         href=\"previous_url\">previous</a>\n      <a tal:condition=\"next\"\n         tal:attributes=\"href string:${request/URL0}?start:int=${next/first}\"\n         href=\"next_url\">next</a>\n    </p>\n\n    <ul tal:repeat=\"employee batch\" >\n      <li>\n        <span tal:replace=\"employee/name\">Bob Jones</span>\n        makes $<span tal:replace=\"employee/salary\">100,000</span>\n        a year.\n      </li>\n    </ul>\n\n    </body>\n  </html>\n```\n\n----------------------------------------\n\nTITLE: Registering Viewlets with a Viewlet Manager in Zope\nDESCRIPTION: Shows how to register viewlets with a viewlet manager using zope.component.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/src/Products/Five/viewlet/README.txt#2025-04-22_snippet_5\n\nLANGUAGE: Python\nCODE:\n```\nimport zope.component\nfrom zope.publisher.interfaces.browser import IDefaultBrowserLayer\nfrom zope.browser.interfaces import IBrowserView\n\nzope.component.provideAdapter(\n    WeatherBox,\n    (zope.interface.Interface, IDefaultBrowserLayer,\n    IBrowserView, ILeftColumn),\n    interfaces.IViewlet, name='weather')\n\nzope.component.provideAdapter(\n    SportBox,\n    (zope.interface.Interface, IDefaultBrowserLayer,\n     IBrowserView, ILeftColumn),\n    interfaces.IViewlet, name='sport')\n```\n\n----------------------------------------\n\nTITLE: Defining a Macro in Zope Page Templates\nDESCRIPTION: This snippet demonstrates how to define a macro named 'copyright' using the METAL define-macro statement in a Zope Page Template.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/ZPT.rst#2025-04-22_snippet_15\n\nLANGUAGE: html\nCODE:\n```\n<p metal:define-macro=\"copyright\">\n  Copyright 2009, <em>Foo, Bar, and Associates</em> Inc.\n</p>\n```\n\n----------------------------------------\n\nTITLE: Comparing Path and Python Expressions in TAL\nDESCRIPTION: Demonstrates the difference between using path expressions and Python expressions in TAL attributes for accessing object properties.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/ZPT.rst#2025-04-22_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<h1 tal:content=\"context/title\">Sample Page Title</h1>\n```\n\nLANGUAGE: html\nCODE:\n```\n<h1 tal:content=\"python: context.title\">Sample Page Title</h1>\n```\n\n----------------------------------------\n\nTITLE: OR Condition Catalog Search\nDESCRIPTION: Demonstration of how to perform an OR search across multiple indexes by combining separate catalog queries.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/SearchingZCatalog.rst#2025-04-22_snippet_23\n\nLANGUAGE: python\nCODE:\n```\n# find sunset art OR art by Van Gogh\nzcat=context.ArtCatalog\nresults=zcat({'keyword':'sunsets'}) + \\\n        zcat({'artist':'Van Gogh'})\n```\n\n----------------------------------------\n\nTITLE: Registering Zope as a Windows Service\nDESCRIPTION: Commands to register an existing Zope installation as a Windows service that starts automatically at system boot. This is the recommended approach for production Zope deployments on Windows systems.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/MaintainingZope.rst#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n> cd c:\\Program Files\\zope\n> bin\\lib\\win32\\PythonService.exe /register \n> bin\\python.exe ZServer\\ZService.py --startup auto install\n```\n\n----------------------------------------\n\nTITLE: Declaring Class Security and Initializing a Book Class in Zope (Python)\nDESCRIPTION: Defines a Zope class 'Book' that inherits from Implicit and bookstuff.Book, applying ClassSecurityInfo for access control. Declares the entire object and the 'getTitle' method as public, followed by class initialization via InitializeClass. Dependencies: AccessControl.ClassSecurityInfo, InitializeClass, 'bookstuff'. Intended for secure, public use of a Book instance in Zope, where 'getTitle' can be called by any user. The snippet enforces security best practices for class declarations in Zope.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zdgbook/Security.rst#2025-04-22_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nclass Book(Implicit, bookstuff.Book):\n    security = ClassSecurityInfo()\n    security.declareObjectPublic()\n    security.declarePublic('getTitle')\n\nInitializeClass(Book)\n```\n\n----------------------------------------\n\nTITLE: Customizing Macro Slots in Zope Template\nDESCRIPTION: This code shows how to override the default slots in a Zope template macro. It customizes the headline and content for a specific page while reusing the overall layout.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/SimpleExamples.rst#2025-04-22_snippet_8\n\nLANGUAGE: HTML\nCODE:\n```\n<metal:macro metal:use-macro=\"context/z_zoo.pt/macros/page\">\n<metal:slot metal:fill-slot=\"headline\">\n\n  <h1>Welcome to the Zope Zoo</h1>\n\n</metal:slot>\n<metal:slot metal:fill-slot=\"content\">\n\n  <p>Here you will find all kinds of cool animals. You are in the\n    <b tal:content=\"context/title_or_id\">TITLE OR ID</b> section.</p>\n\n</metal:slot>\n</metal:macro>\n```\n\n----------------------------------------\n\nTITLE: Iterating Over Sequences with dtml-in Tag\nDESCRIPTION: Demonstrates how to iterate over a sequence using the dtml-in tag to create a table of items. This example calls the 'actors' script and displays each actor's name in a table row, using the special 'sequence-item' variable.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/DTML.rst#2025-04-22_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<html>\n<body>\n<h1>Actors in the movie Glengarry Glen Ross</h1>\n<table border=\"1\">\n  <th>Name</th>\n<dtml-in actors>\n  <tr>\n  <td><dtml-var sequence-item></td>\n  </tr>\n</dtml-in>\n</table>\n</body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Configuring Apache Virtual Host for Zope\nDESCRIPTION: This Apache configuration snippet sets up a virtual host for Zope. It uses mod_rewrite to forward requests to Zope running on localhost:8080, rewriting the URL to use VirtualHostBase and VirtualHostRoot directives.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/VirtualHosting.rst#2025-04-22_snippet_2\n\nLANGUAGE: apache\nCODE:\n```\nNameVirtualHost *:80\n<VirtualHost *:80>\nServerName www.example.com\nRewriteEngine On\nRewriteRule ^/(.*) http://127.0.0.1:8080/VirtualHostBase/http/www.example.com:80/vhm_test/VirtualHostRoot/$1 [L,P]\n</VirtualHost>\n```\n\n----------------------------------------\n\nTITLE: Generating Keyword Selection List from ZCatalog (TAL)\nDESCRIPTION: This TAL snippet creates an HTML multiple-select element for filtering based on keywords stored in a ZCatalog KeywordIndex. It dynamically generates the options by iterating through the unique values returned by `context.uniqueValuesFor('keywords')`. This allows users to select one or more predefined keywords for searching.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/SearchingZCatalog.rst#2025-04-22_snippet_9\n\nLANGUAGE: html\nCODE:\n```\n<select name=\"keywords:list\" multiple>\n  <option \n    tal:repeat=\"item python:context.uniqueValuesFor('keywords')\"\n    tal:content=\"item\">\n      opt value goes here\n  </option>\n</select>\n```\n\n----------------------------------------\n\nTITLE: Validating Form Input in Zope Action Script with Conditional Template Return - Python\nDESCRIPTION: This snippet showcases form input validation in a Zope script. It calls context.validateData with the request; on failure, it renders the formTemplate with an error message, otherwise it returns a responseTemplate. This pattern allows the script to communicate validation failures and errors back to the user interface using context-aware templates, assuming that validateData, formTemplate, and responseTemplate are available.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/AdvZPT.rst#2025-04-22_snippet_20\n\nLANGUAGE: python\nCODE:\n```\n## Script (Python) \"action\"\n##\nif not context.validateData(request):\n    # if there's a problem return the form page template\n    # along with an error message\n    return context.formTemplate(error_message='Invalid data')\n\n# otherwise return the thanks page\nreturn context.responseTemplate()\n```\n\n----------------------------------------\n\nTITLE: Implementing PrincipiaSearchSource Method in Zope Python\nDESCRIPTION: This code shows how to implement a PrincipiaSearchSource method for a custom object type. It concatenates multiple object attributes to create a comprehensive text representation for general-purpose searching.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/SearchingZCatalog.rst#2025-04-22_snippet_26\n\nLANGUAGE: python\nCODE:\n```\ndef PrincipiaSearchSource(self):\n    \"\"\"used for general searching for animal\"\"\"\n  return self.title + ' ' + self.latin_name + ' ' \\\n       + self.description + ' ' + self.environment\n```\n\n----------------------------------------\n\nTITLE: Creating Python Script for Compound Interest Calculation in Zope\nDESCRIPTION: This Python script is a Zope Script (Python) object that calculates compound interest based on user input. It takes principal, interest_rate, periods, and years as parameters.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/BasicObject.rst#2025-04-22_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\n## Script (Python) \"calculateCompoundingInterest\"\n##parameters=principal, interest_rate, periods, years\n##\ni = interest_rate / periods\nn = periods * years\nresult = principal * ((1 + i) ** n)\nreturn result\n```\n\n----------------------------------------\n\nTITLE: Defining a SAX Message Handler in Python\nDESCRIPTION: This Python class `MessageHandler` inherits from `xml.sax.handler.ContentHandler` and implements SAX callbacks (`startElement`, `endElement`, `characters`) to parse an XML message. It specifically extracts the 'to' and 'from' attributes from the 'message' element and the content of the 'body' element, storing them in instance variables (`recipient`, `sender`, `body`). This handler is designed to be used with a SAX parser like `xml.sax.parseString`.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/ScriptingZope.rst#2025-04-22_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nclass MessageHandler(ContentHandler):\n    \"\"\"\n    SAX message handler class\n\n    Extracts a message's to, from, and body\n    \"\"\"\n\n    inbody=0\n    body=\"\"\n\n    def startElement(self, name, attrs):\n        if name==\"message\":\n            self.recipient=attrs['to']\n            self.sender=attrs['from']\n        elif name==\"body\":\n            self.inbody=1\n\n    def endElement(self, name):\n        if name==\"body\":\n            self.inbody=0\n\n    def characters(self, content):\n        if self.inbody:\n            self.body=self.body + content\n```\n\n----------------------------------------\n\nTITLE: Implementing comprehensive movedCoolDocument event subscriber (Python)\nDESCRIPTION: Enhanced event subscriber function that handles various object lifecycle events for CoolDocument objects, including addition, removal, and movement.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/src/OFS/event.txt#2025-04-22_snippet_8\n\nLANGUAGE: Python\nCODE:\n```\ndef movedCoolDocument(ob, event):\n    \"\"\"A Cool Document was moved.\"\"\"\n    if not IObjectRemovedEvent.providedBy(event):\n        addedCoolDocument(ob, event)\n    if not IObjectAddedEvent.providedBy(event):\n        removedCoolDocument(ob, event)\n```\n\n----------------------------------------\n\nTITLE: Creating Lists of Records with Zope 'records' Directive in HTML\nDESCRIPTION: Demonstrates the ':records' directive to marshal multiple sets of related form inputs into a list of record objects. Each group of inputs with names like 'members.name:records', 'members.email:records', etc., contributes to a single record object. Zope collects these records into a list named 'members' in the request.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zdgbook/ObjectPublishing.rst#2025-04-22_snippet_15\n\nLANGUAGE: html\nCODE:\n```\n<h2>Member One</h2>\nName:\n<input type=\"text\" name=\"members.name:records\"><br>\nEmail:\n<input type=\"text\" name=\"members.email:records\"><br>\nAge:\n<input type=\"text\" name=\"members.age:int:records\"><br>\n\n<h2>Member Two</h2>\nName:\n<input type=\"text\" name=\"members.name:records\"><br>\nEmail:\n<input type=\"text\" name=\"members.email:records\"><br>\nAge:\n<input type=\"text\" name=\"members.age:int:records\"><br>\n```\n\n----------------------------------------\n\nTITLE: Using a Macro in Zope Page Templates\nDESCRIPTION: This snippet shows how to use a macro defined in another Page Template named 'master_page' using the METAL use-macro statement.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/ZPT.rst#2025-04-22_snippet_16\n\nLANGUAGE: html\nCODE:\n```\n<hr />\n<b metal:use-macro=\"container/master_page/macros/copyright\">\n  Macro goes here\n</b>\n```\n\n----------------------------------------\n\nTITLE: Combining METAL and TAL for Dynamic Macro Definition in ZPT/HTML\nDESCRIPTION: Defines a 'links' macro using 'metal:define-macro' combined with TAL statements ('tal:repeat', 'tal:attributes', 'tal:content'). This creates a reusable component that dynamically generates list items based on the result of 'context/getLinks'. METAL statements are processed before TAL.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/ZPT.rst#2025-04-22_snippet_25\n\nLANGUAGE: html\nCODE:\n```\n<ul metal:define-macro=\"links\"\n    tal:repeat=\"link context/getLinks\">\n  <li>\n    <a href=\"link url\"\n       tal:attributes=\"href link/url\"\n       tal:content=\"link/name\">link name</a>\n  </li>\n</ul>\n```\n\n----------------------------------------\n\nTITLE: Defining and Registering a Dynamically Rendered Viewlet Template - Python, TAL\nDESCRIPTION: Writes a TAL-based template that renders dynamic values via the view, then registers a ZCML <viewlet> for it and asserts correct output rendering when the page is requested. Uses unicode and TAL expressions in templates and requires test class with dynamic fields. Inputs are dynamic template files and supporting classes. Outputs dynamic HTML reflecting back-end Python values. Limited to test contexts supporting TAL and ZCML integration.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/src/Products/Five/viewlet/directives.txt#2025-04-22_snippet_16\n\nLANGUAGE: python\nCODE:\n```\n>>> dynWeatherTemplate = os.path.join(temp_dir, 'dynamic_weather.pt')\n>>> with open(dynWeatherTemplate, 'w') as fd:\n...     _ = fd.write(u'''\n... <div tal:define=\"city view/city;\"><span tal:replace=\"string:${city/name}: ${city/temp} F\" /></div>'''\n... )\n\n>>> context = zcml.load_string('''\n... <configure xmlns=\"http://namespaces.zope.org/browser\" i18n_domain=\"zope\">\n...   <viewlet\n...       name=\"dynweather\"\n...       for=\"*\"\n...       manager=\"Products.Five.viewlet.tests.INewColumn\"\n...       class=\"Products.Five.viewlet.tests.DynamicTempBox\"\n...       template=\"%s\"\n...       permission=\"zope2.View\"\n...       />\n... </configure>\n... ''' % dynWeatherTemplate)\n\n>>> print(http(r\"\"\"\n... GET /test_folder_1_/ftf/@@securitytest_view HTTP/1.1\n... \"\"\", handle_errors=False))\nHTTP/1.1 200 OK\n...\n     <h1>Weather</h1>\n     <div>\n     <div>Los Angeles, CA: 78 F</div>\n     <div>sunny</div>\n     </div>\n...\n```\n\n----------------------------------------\n\nTITLE: Zope Python Script Processing a Record Parameter\nDESCRIPTION: A Python script that processes a record parameter, demonstrating how to access record attributes and perform conditional logic based on record data.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/ScriptingZope.rst#2025-04-22_snippet_20\n\nLANGUAGE: python\nCODE:\n```\n## Script (Python) \"processPerson\"\n##parameters=person\n##\n\"Process a person record\"\nfull_name=\"%s %s\" % (person.fname, person.lname)\nif person.age < 21:\n    return \"Sorry, %s. You are not old enough to adopt an aardvark.\" % full_name\nreturn \"Thanks, %s. Your aardvark is on its way.\" % full_name\n```\n\n----------------------------------------\n\nTITLE: Advanced ZCTextIndex Querying in Python Script\nDESCRIPTION: This Python script demonstrates an advanced ZCTextIndex query. It searches for news items containing the current folder's ID but excludes items with the word 'catastrophic'.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/SearchingZCatalog.rst#2025-04-22_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n## Script (Python) \"relevantSectionNews\"\n##\n\"\"\" Returns relevant, non-catastrophic news \"\"\"\nid=context.getId()\nreturn context.NewsCatalog(\n         {'contentTextIdx' : id + ' -catastrophic'}\n        )\n```\n\n----------------------------------------\n\nTITLE: Implementing Dynamic Title and Headline in Zope Template\nDESCRIPTION: TAL (Template Attribute Language) modifications to make the page title and headline dynamically display the context object's title or ID.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/SimpleExamples.rst#2025-04-22_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<title tal:content=\"context/title_or_id\">PAGE TITLE OR ID</title>\n...\n<h1 tal:content=\"context/title_or_id\">PAGE TITLE OR ID</h1>\n```\n\n----------------------------------------\n\nTITLE: Replacing Elements with tal:replace in Zope TAL\nDESCRIPTION: Syntax and description of the tal:replace directive in Zope TAL. Used to replace an element with dynamic content, either as escaped text or unescaped structure.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/AppendixC.rst#2025-04-22_snippet_13\n\n\n\n----------------------------------------\n\nTITLE: Using Python Expressions in Zope Page Templates\nDESCRIPTION: Demonstrates how to use Python expressions in Zope Page Templates when attribute names contain periods or for accessing dictionary-like objects.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/AdvZPT.rst#2025-04-22_snippet_37\n\nLANGUAGE: python\nCODE:\n```\n\"python:getattr(context, 'penguin.gif')\"\n```\n\nLANGUAGE: python\nCODE:\n```\nrequest['URL']\nmodules['math']\ncontext['thing']\n```\n\n----------------------------------------\n\nTITLE: Using Nocall with Functions\nDESCRIPTION: Shows how to use the nocall expression type to assign a function to a variable without calling it, allowing later use of the function.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/AdvZPT.rst#2025-04-22_snippet_29\n\nLANGUAGE: TAL\nCODE:\n```\n<p tal:define=\"join nocall:modules/string/join\">\n```\n\n----------------------------------------\n\nTITLE: Complete Zope Product Class Implementation\nDESCRIPTION: Full implementation of a Zope product class (PollProduct) including imports, class definition, method implementations, and security declarations.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zdgbook/Products.rst#2025-04-22_snippet_9\n\nLANGUAGE: Python\nCODE:\n```\nfrom Poll import Poll\nfrom AccessControl import ClassSecurityInfo\nfrom Globals import InitializeClass\nfrom Acquisition import Implicit\nfrom Globals import Persistent\nfrom AccessControl.Role import RoleManager\nfrom OFS.SimpleItem import Item\n\nclass PollProduct(Implicit, Persistent, RoleManager, Item):\n    \"\"\"Poll product class, implements Poll interface.\n\n    The poll has a question and a sequence of responses. Votes\n    are stored in a dictionary which maps response indexes to a\n    number of votes.\n    \"\"\"\n\n    implements(IPoll)\n\n    meta_type = 'Poll'\n\n    security = ClassSecurityInfo()\n\n    def __init__(self, id, question, responses):\n        self.id = id\n        self._question = question\n        self._responses = responses\n        self._votes = {}\n        for i in range(len(responses)):\n            self._votes[i] = 0\n\n    security.declareProtected('Use Poll', 'castVote')\n    def castVote(self, index):\n        \"Votes for a choice\"\n        self._votes[index] = self._votes[index] + 1\n        self._p_changed = 1\n\n    security.declareProtected('View Poll results', 'getTotalVotes')\n    def getTotalVotes(self):\n        \"Returns total number of votes cast\"\n        total = 0\n        for v in self._votes.values():\n            total = total + v\n        return total\n\n    security.declareProtected('View Poll results', 'getVotesFor')\n    def getVotesFor(self, index):\n        \"Returns number of votes cast for a given response\"\n        return self._votes[index]\n\n    security.declarePublic('getResponses')\n    def getResponses(self):\n        \"Returns the sequence of responses\"\n        return tuple(self._responses)\n\n    security.declarePublic('getQuestion')\n    def getQuestion(self):\n        \"Returns the question\"\n        return self._question\n\nInitializeClass(Poll)\n```\n\n----------------------------------------\n\nTITLE: Implementing Breadcrumb Navigation with TAL in Zope\nDESCRIPTION: This snippet creates a breadcrumb navigation using TAL (Template Attribute Language) in Zope. It iterates through parent objects to generate links, providing a trail back to the root of the site.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/SimpleExamples.rst#2025-04-22_snippet_4\n\nLANGUAGE: HTML\nCODE:\n```\n<div><tal:loop tal:repeat=\"item python: request.PARENTS[-2::-1]\">&gt;\n  <a href=\"ABSOLUTE_URL\"\n     tal:attributes=\"href item/absolute_url\"\n     tal:content=\"item/title_or_id\">PARENT TITLE OR\n                                    ID</a> </tal:loop></div>\n```\n\n----------------------------------------\n\nTITLE: Creating Dynamic Subfolder Navigation in Zope Template\nDESCRIPTION: TAL implementation for dynamically generating navigation menu items based on the subfolders in the current context. Uses Python expressions and TAL repeat statements.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/SimpleExamples.rst#2025-04-22_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<ul tal:condition=\"python: context.objectValues(['Folder'])\">\n  <li tal:repeat=\"item python: context.objectValues(['Folder'])\">\n    <a href=\"ABSOLUTE_URL\"\n       tal:attributes=\"href item/absolute_url\"\n       tal:content=\"item/title_or_id\">SUB-OBJECT TITLE OR ID</a></li>\n</ul>\n```\n\n----------------------------------------\n\nTITLE: Complete Mailbox Example with Multiple Security Assertions\nDESCRIPTION: This example demonstrates a complete Mailbox class with different types of security assertions including protected methods, public methods, and proper class initialization.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zdgbook/Security.rst#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom AccessControl import ClassSecurityInfo\nfrom AccessControl.class_init import InitializeClass\n\n\nclass Mailbox(ObjectManager):\n    \"\"\"A mailbox object.\"\"\"\n\n    # Create a SecurityInfo for this class\n    security = ClassSecurityInfo()\n\n    security.declareProtected('View management screens', 'manage')\n    manage = HTMLFile('mailbox_manage', globals())\n\n    @security.public\n    def messageCount(self):\n        \"\"\"Return a count of messages.\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Debugging Zope from Command Line\nDESCRIPTION: This snippet shows how to start a Zope debugger from the command line. It demonstrates accessing the top-level Zope object and performing operations like adding a user.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/operation.rst#2025-04-22_snippet_13\n\nLANGUAGE: console\nCODE:\n```\n$ bin/zopeinstance debug\nStarting debugger (the name \"app\" is bound to the top-level Zope object)\n>>> app\n<Application at >\n\n>>> app.acl_users\n<OFS.userfolder.UserFolder object at ...>\n\n>>> import transaction\n>>> transaction.begin()\n>>> app.acl_users._doAddUser('foo', 'bar', ['Manager'], [])\n<User 'foo'>\n>>> transaction.commit()\n```\n\n----------------------------------------\n\nTITLE: Importing Dependencies for Securing External Classes in Zope (Python)\nDESCRIPTION: Lists the required imports (`ClassSecurityInfo`, `InitializeClass`, `Implicit`, and an example external module `bookstuff`) needed within a Zope External Method. This setup allows applying security declarations using `ClassSecurityInfo` to instances of a class (e.g., `Book`) defined in the external `bookstuff` module, enabling security management for classes whose source code isn't directly controlled.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zdgbook/Security.rst#2025-04-22_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n# an external method that returns Book instances\n\nfrom AccessControl import ClassSecurityInfo\nfrom AccessControl.class_init import InitializeClass\nfrom Acquisition import Implicit\nimport bookstuff\n```\n\n----------------------------------------\n\nTITLE: Creating a Dynamic Site Map with DTML Tree Tag\nDESCRIPTION: This DTML method creates a dynamic site map using the tree tag with the 'publicObjects' script as a filter. It includes expand/collapse functionality and links to all public resources displayed in a hierarchical tree.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/AdvDTML.rst#2025-04-22_snippet_26\n\nLANGUAGE: dtml\nCODE:\n```\n<dtml-var standard_html_header>\n\n<h1>Site Map</h1>\n\n<p><a href=\"&dtml-URL0;?expand_all=1\">Expand All</a> |\n   <a href=\"&dtml-URL0;?collapse_all=1\">Collapse All</a>\n</p>\n\n<dtml-tree branches=\"publicObjects\" skip_unauthorized=\"1\">\n  <a href=\"&dtml-absolute_url;\"><dtml-var title_or_id></a>\n</dtml-tree>\n\n<dtml-var standard_html_footer>\n```\n\n----------------------------------------\n\nTITLE: Creating a Viewlet Manager in Zope\nDESCRIPTION: Demonstrates how to create a viewlet manager using a specified interface in Zope.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/src/Products/Five/viewlet/README.txt#2025-04-22_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nfrom Products.Five.viewlet import manager\nLeftColumn = manager.ViewletManager('left', ILeftColumn)\n```\n\n----------------------------------------\n\nTITLE: Defining TAL Content Statement in XML/HTML\nDESCRIPTION: Demonstrates the basic syntax of a TAL content statement used to inject text into an HTML element. This is a fundamental component of the Template Attribute Language used in Zope.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/AppendixC.rst#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\ntal:content=\"string:Hello\"\n```\n\n----------------------------------------\n\nTITLE: Error Handling with tal:on-error in Zope Templates\nDESCRIPTION: Demonstrates how to use tal:on-error for handling errors in templates, including calling scripts for more flexible error handling.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/AdvZPT.rst#2025-04-22_snippet_12\n\nLANGUAGE: HTML\nCODE:\n```\n<span tal:define=\"prefs context/scriptToGetPreferences\"\n      tal:omit-tag=\"\"\n      tal:on-error=\"string:An error occurred\">\n```\n\nLANGUAGE: HTML\nCODE:\n```\n<div tal:on-error=\"structure context/handleError\">\n...\n</div>\n```\n\n----------------------------------------\n\nTITLE: Populating Select List with Unique ZCatalog Values (TAL)\nDESCRIPTION: This TAL snippet demonstrates how to create an HTML multiple-select element dynamically populated with unique values from a ZCatalog FieldIndex. It uses `tal:repeat` to iterate over the results of `context.NewsCatalog.uniqueValuesFor('author')`, creating an `<option>` tag for each unique author name found in the 'author' index. The `name=\"author:list\"` attribute indicates that multiple selections can be passed as a list.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/SearchingZCatalog.rst#2025-04-22_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n<select name=\"author:list\" size=\"6\" multiple>             \n  <option \n    tal:repeat=\"item python:context.NewsCatalog.uniqueValuesFor('author')\" \n    tal:content=\"item\"\n    value=\"opt value\">\n  </option>\n</select>\n```\n\n----------------------------------------\n\nTITLE: Repeating and Defining Variables Using Custom TAL Namespace Tags - XML\nDESCRIPTION: This snippet leverages custom TAL tags (tal:series, tal:items, tal:parts) within XML/HTML page templates for advanced variable scoping and repetition. It defines variables and repeats over collections using TAL's namespace, with built-in omission of TAL tags in output and attribute inheritance from their namespace. This enables clean and schema-valid templates, especially in XML, while retaining all repeat/define functionality.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/AdvZPT.rst#2025-04-22_snippet_17\n\nLANGUAGE: xml\nCODE:\n```\n<tal:series define=\"items context/getItems\">\n  <tal:items repeat=\"item items\">\n  <tal:parts repeat=\"part item\">\n    <p tal:content=\"part\">Part</p>\n  </tal:parts>\n  </tal:items>\n  <p tal:condition=\"not:items\">No parts!</p>\n</tal:series>\n```\n\n----------------------------------------\n\nTITLE: SQL Query with Multiple AND Conditions Example (SQL)\nDESCRIPTION: An SQL query example selecting employees based on two conditions combined with 'AND': salary greater than 100000.00 and the first name being one of 'Jane', 'Cheetah', or 'Guido'.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/RelationalDatabases.rst#2025-04-22_snippet_15\n\nLANGUAGE: SQL\nCODE:\n```\nselect * from employees \nwhere(\n  salary > 100000.00\n  and\n  first in ('Jane', 'Cheetah', 'Guido')    \n)\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Common Path Expressions in HTML Page Templates\nDESCRIPTION: This snippet showcases three common path expressions used in Zope Page Templates: context/objectValues, request/URL, and user/getUserName. Each expression is used within a paragraph tag to display its value.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/ZPT.rst#2025-04-22_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<p tal:content=\"context/objectValues\"></p>\n<p tal:content=\"request/URL\"></p>\n<p tal:content=\"user/getUserName\"></p>\n```\n\n----------------------------------------\n\nTITLE: Using Basic Path Expressions in Zope TAL\nDESCRIPTION: Examples of path expressions in Zope Page Templates. Path expressions allow traversing from an object to its sub-objects including properties and methods, with support for acquisition.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/AdvZPT.rst#2025-04-22_snippet_24\n\nLANGUAGE: TAL\nCODE:\n```\ntemplate/title\ncontainer/files/objectValues\nuser/getUserName\ncontainer/master.html/macros/header\nrequest/form/address\nroot/standard_look_and_feel.html\nTrue\n```\n\n----------------------------------------\n\nTITLE: ZEO Client Configuration for Shared Session Storage\nDESCRIPTION: Example configuration for ZEO client to use a shared temporary storage for sessions in a ZEO environment. This allows multiple Zope instances to share session data through a ZEO server.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/Sessions.rst#2025-04-22_snippet_21\n\nLANGUAGE: xml\nCODE:\n```\n%import ZEO\n\n<zodb_db main>\n    <clientstorage>\n        server $INSTANCE/var/zeosocket\n        storage main\n        name zeostorage Data.fs\n    </clientstorage>\n    mount-point /\n</zodb_db>\n\n<zodb_db temporary>\n    <clientstorage>\n        server $INSTANCE/var/zeosocket\n        storage temporary\n        name zeostorage temporary\n    </clientstorage>\n    mount-point /temp_folder\n    container-class Products.TemporaryFolder.TemporaryContainer\n</zodb_db>\n```\n\n----------------------------------------\n\nTITLE: Embedding Browser ID in HTML Form using TAL\nDESCRIPTION: Demonstrates how to embed the browser ID as a hidden form field using TAL (Template Attribute Language).\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/Sessions.rst#2025-04-22_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n<span tal:define=\"idManager python:request.SESSION.getBrowserIdManager()\">\n    <form action=\"thenextmethod\">\n        <input type=submit name=\"submit\" value=\" GO \">\n        <input type=\"hidden\" name=\"name\" value=\"value\"\n               tal:attributes=\"name python: idManager.getBrowserIdName();\n                               value python: idManager.getBrowserId()\">\n    </form>\n</span>\n```\n\n----------------------------------------\n\nTITLE: Configuring WSGI Server in zope.ini\nDESCRIPTION: Example configuration for the WSGI server in the zope.ini file. It specifies the server to use (waitress), the host, and the port.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/operation.rst#2025-04-22_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[server:main]\nuse = egg:waitress#main\nhost = 127.0.0.1\nport = 8080\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Acquisition in Python with ExtensionClass\nDESCRIPTION: Demonstrates how to use acquisition to allow objects to obtain attributes from their environment using Acquisition.Implicit. Shows how an object can acquire the 'color' attribute from different container objects.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zdgbook/Acquisition.rst#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport ExtensionClass, Acquisition\n\nclass C(ExtensionClass.Base):\n  color = 'red'\n\nclass A(Acquisition.Implicit):\n\n  def report(self):\n    print self.color\n\na = A()\nc = C()\nc.a = A()\n\nc.a.report() # prints 'red'\n\nd = C()\nd.color = 'green'\nd.a = a\n\nd.a.report() # prints 'green'\n\na.report() # raises an attribute error\n```\n\n----------------------------------------\n\nTITLE: Implementing Dynamic Message Box with TAL Namespace Data\nDESCRIPTION: Extends the MessageBox provider to support dynamic message text through TAL namespace data interface.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/src/Products/Five/browser/tests/provider.txt#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n@zope.interface.implementer(IMessageText)\nclass DynamicMessageBox(MessageBox):\n    pass\n```\n\n----------------------------------------\n\nTITLE: Handling Session Invalidation in Zope\nDESCRIPTION: Illustrates an issue with the invalidate() method and demonstrates the proper way to access a session after invalidation. After invalidating, you should obtain a fresh session via getSessionData() rather than through REQUEST.SESSION.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/Sessions.rst#2025-04-22_snippet_18\n\nLANGUAGE: python\nCODE:\n```\nrequest = container.REQUEST\nsession = request.SESSION\nsession.set('foo','bar')\nsession.invalidate() \n# ............................................\n# we expect that invalidate() flushes the session \n# ............................................\nprint('after invalidate()',session.get('foo')) # 'bar' still prints!\n\n# ............................................\n# Even this isn't enough\n# ............................................\nsession = request.SESSION\nprint('after invalidate()', session.get('foo')) # 'bar' still prints!\n\n# ............................................\n# Here's the work-around\n# ............................................\nsession = context.session_data_manager.getSessionData()\nprint('after getSessionData', session.get('foo')) # 'bar' is GONE\nreturn printed\n```\n\n----------------------------------------\n\nTITLE: Using Path Expression Alternatives in TALES - HTML\nDESCRIPTION: Shows template code for inserting a value from either a cookie or a context property using TALES alternatives with the '|' operator. The output shows the user's preference by checking 'request/cookies/pref' and falling back to 'context/pref' if the first is not set. Requires a Zope TAL context with appropriate variables defined; the result is the evaluated preference.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/AppendixC.rst#2025-04-22_snippet_28\n\nLANGUAGE: html\nCODE:\n```\n<span tal:replace=\"request/cookies/pref | context/pref\">\n  preference\n</span>\n```\n\n----------------------------------------\n\nTITLE: Querying ZCatalog from Python Script in Zope\nDESCRIPTION: This Python script demonstrates how to query a ZCatalog named 'NewsCatalog' using the current folder's ID as a search term. It returns news items relevant to the current section.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/SearchingZCatalog.rst#2025-04-22_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n## Script (Python) \"relevantSectionNews\"\n##\n\"\"\" Returns news relevant to the current folder's id \"\"\"\nid=context.getId()\nreturn context.NewsCatalog({'contentTextIdx' : id})\n```\n\n----------------------------------------\n\nTITLE: Multi-Condition Logic with dtml-if, dtml-elif, and dtml-else in DTML\nDESCRIPTION: Shows a multi-branch conditional structure using `dtml-if`, `dtml-elif`, and `dtml-else`. It checks conditions sequentially: if `monkeys > monkey_limit`, if `monkeys < minimum_monkeys`, or neither (else). Requires 'monkeys', 'monkey_limit', and 'minimum_monkeys' variables.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/DTML.rst#2025-04-22_snippet_32\n\nLANGUAGE: dtml\nCODE:\n```\n<dtml-if expr=\"monkeys > monkey_limit\">\n  <p>There are too many monkeys!</p>\n<dtml-elif expr=\"monkeys < minimum_monkeys\">\n  <p>There aren't enough monkeys!</p>\n<dtml-else>\n  <p>There are just enough monkeys.</p>\n</dtml-if>\n```\n\n----------------------------------------\n\nTITLE: Navigating Object Hierarchy in Python Scripts\nDESCRIPTION: Demonstrates how to call a script named 'vaccinate' on a 'hippo' object by navigating through the Zope object hierarchy using acquisition paths in a Python Script.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/ScriptingZope.rst#2025-04-22_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\ncontext.Vet.LargeAnimals.hippo.vaccinate()\n```\n\n----------------------------------------\n\nTITLE: Comparing tal:content and tal:replace\nDESCRIPTION: Shows the difference between using tal:content and tal:replace for inserting dynamic content.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/ZPT.rst#2025-04-22_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<b tal:content=\"template/title\"></b>\n<b tal:content=\"request/URL\"></b>\n<b tal:content=\"user/getUserName\"></b>\n<b tal:replace=\"template/title\"></b>\n<b tal:replace=\"request/URL\"></b>\n<b tal:replace=\"user/getUserName\"></b>\n```\n\n----------------------------------------\n\nTITLE: Session Data Access in TAL Template\nDESCRIPTION: Example of accessing session data in a TAL (Template Attribute Language) template to display stored user preferences.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/Sessions.rst#2025-04-22_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<p tal:content=\"request/SESSION/favorite_color\">Blue</p>\n```\n\n----------------------------------------\n\nTITLE: Using a Zope Adapter in Python\nDESCRIPTION: Demonstrates how to use a registered Zope adapter to adapt an object of MyClass to INewInterface.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/src/Products/Five/doc/manual.txt#2025-04-22_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom classes import MyClass\nfrom interfaces import INewInterface\n\nobject = MyClass()\nadapted = INewInterface(object)\nprint(adapted.anotherMethod())\n```\n\n----------------------------------------\n\nTITLE: Registering a Zope View using ZCML\nDESCRIPTION: Shows how to register a Zope view SimpleFolderView for the IFolder interface using ZCML configuration, specifying the view name, attribute, and required permission.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/src/Products/Five/doc/manual.txt#2025-04-22_snippet_9\n\nLANGUAGE: xml\nCODE:\n```\n<browser:page \n  for=\".interfaces.IFolder\"\n  class=\".browser.SimpleFolderView\"\n  attribute=\"eagle\"\n  name=\"eagle.txt\"\n  permission=\"zope2.ViewManagementScreens\"\n  />\n```\n\n----------------------------------------\n\nTITLE: Implementing Manager Lookup Method in Employee Class in Python\nDESCRIPTION: This method retrieves an employee's manager by first querying the manager's ID through the manager_by_id Z SQL Method, then fetching the manager's details using the employee_by_id Z SQL Method. The method returns None if the employee has no manager.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/RelationalDatabases.rst#2025-04-22_snippet_32\n\nLANGUAGE: python\nCODE:\n```\ndef manager(self):\n    \"\"\"\n    Returns this employee's manager or None if the\n    employee does not have a manager.\n    \"\"\"\n    # Calls the manager_by_id Z SQL Method.\n    records=self.manager_by_id(emp_id=self.emp_id)\n    if records:\n        manager_id=records[0].manager_id\n        # Return an employee object by calling the\n        # employee_by_id Z SQL Method with the manager's emp_id\n        return self.employee_by_id(emp_id=manager_id)[0]\n```\n\n----------------------------------------\n\nTITLE: Nesting dtml-sqlgroup for Complex Conditional SQL Logic (DTML)\nDESCRIPTION: This example demonstrates nesting `dtml-sqlgroup` tags to create complex logical structures in the SQL `WHERE` clause. An outer `dtml-sqlgroup` handles the `WHERE` keyword and combines conditions with `dtml-or`. An inner `dtml-sqlgroup` combines 'first' and 'last' name conditions with `dtml-and`.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/RelationalDatabases.rst#2025-04-22_snippet_18\n\nLANGUAGE: DTML\nCODE:\n```\nselect * from employees\n<dtml-sqlgroup where>\n  <dtml-sqlgroup>\n     <dtml-sqltest first op=\"like\" type=\"nb\">\n  <dtml-and>\n     <dtml-sqltest last op=\"like\" type=\"nb\">\n  </dtml-sqlgroup>\n<dtml-or>\n  <dtml-sqltest salary op=\"gt\" type=\"float\">\n</dtml-sqlgroup>\n```\n\n----------------------------------------\n\nTITLE: Computed Variables Inside DTML 'let' and 'in' Blocks - DTML\nDESCRIPTION: Combines iteration and variable definition, using the 'let' tag within an 'in' loop to calculate results based on the current sequence item and index. Demonstrates how variables can be composed from prior attributes and used within the same block. Useful for performing row-based computations in templates.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/AppendixA.rst#2025-04-22_snippet_12\n\nLANGUAGE: dtml\nCODE:\n```\n<dtml-in expr=\"(1,2,3,4)\">\n  <dtml-let num=sequence-item\n            index=sequence-index\n            result=\"num*index\">\n    <dtml-var num> * <dtml-var index> = <dtml-var result>\n  </dtml-let>\n</dtml-in>\n```\n\n----------------------------------------\n\nTITLE: HTTP Monitor Shell Script\nDESCRIPTION: Shell script for monitoring a Zope server's HTTP service by periodically checking a test URL and sending email alerts if unexpected responses are received.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/MaintainingZope.rst#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n#!/bin/sh\n\n# configure the values below\nURL=\"http://localhost/ping\"\nEXPECTED_ANSWER=\"1\"\nMAILTO=\"your.mailaddress@domain.name\"\nSUBJECT=\"There seems to be a problem with your website\"\nMAIL_BIN=\"/bin/mail\"\n\nresp=`wget -O - -q -t 1 -T 1 $URL`\nif [ \"$resp\" != \"$EXPECTED_ANSWER\" ]; then\n$MAIL_BIN -s \"$SUBJECT\" $MAILTO <<EOF\nThe URL \n----------------------------------------------\n$URL \n----------------------------------------------\ndid not respond with the expected value of $EXPECTED_ANSWER. \nEOF\nfi;\n```\n\n----------------------------------------\n\nTITLE: Remote Scripting Zope with Unix wget and cron\nDESCRIPTION: A series of bash commands demonstrating how to use wget to call Zope scripts remotely, with options for authentication. Also shows how to use cron to schedule these calls for automated task execution.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/ScriptingZope.rst#2025-04-22_snippet_26\n\nLANGUAGE: bash\nCODE:\n```\n$ wget --spider http://www.zopezoo.org/Lions/feed\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ wget --spider --http-user=ZooKeeper \\\n    --http-passwd=SecretPhrase \\\n    http://www.zopezoo.org/Lions/feed\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ crontab -e\n```\n\nLANGUAGE: bash\nCODE:\n```\n0 8 * * * wget -nv --spider --http_user=ZooKeeper \\\n  --http_pass=SecretPhrase http://www.zopezoo.org/Lions/feed\n```\n\n----------------------------------------\n\nTITLE: METAL Slot Usage\nDESCRIPTION: Using a macro and filling its slot with custom content\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/AppendixC.rst#2025-04-22_snippet_39\n\nLANGUAGE: html\nCODE:\n```\n<p metal:use-macro=\"container/master.html/macros/hello\">\n    Hello <b metal:fill-slot=\"name\">Kevin Bacon</b>\n  </p>\n```\n\n----------------------------------------\n\nTITLE: Calling Scripts from Page Templates using TAL syntax\nDESCRIPTION: Demonstrates how to call a script named 'feed' on a 'hippo' object from a Page Template using TALES path expressions. The output of the script will be HTML-quoted in the rendered template.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/ScriptingZope.rst#2025-04-22_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<div tal:replace=\"context/hippo/feed\">\n  Output of feed()\n</div>\n```\n\n----------------------------------------\n\nTITLE: Defining and Using Secured Classes in Zope External Methods (Python)\nDESCRIPTION: Defines a `Book` class inheriting from `Acquisition.Implicit` with security declarations (`declareObjectPublic`, `declarePublic` for `getTitle`). It also shows an External Method `getBooks` that creates instances of `Book`, wraps them using `__of__(self)` to provide an acquisition context, and returns them. `InitializeClass` is required for the `Book` class to register its security settings.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zdgbook/Security.rst#2025-04-22_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n# an external method that returns Book instances\n\nfrom AccessControl import ClassSecurityInfo\nfrom AccessControl.class_init import InitializeClass\nfrom Acquisition import Implicit\n\nclass Book(Implicit):\n\n    def __init__(self, title):\n        self._title = title\n\n    # Create a SecurityInfo for this class\n    security = ClassSecurityInfo()\n    security.declareObjectPublic()\n\n    @security.public\n    def getTitle(self):\n        return self._title\n\nInitializeClass(Book)\n\n\n# The actual external method\ndef getBooks(self):\n  books = []\n  books.append(Book('King Lear').__of__(self))\n  books.append(Book('Romeo and Juliet').__of__(self))\n  books.append(Book('The Tempest').__of__(self))\n  return books\n```\n\n----------------------------------------\n\nTITLE: Optimized Catalog Sorting with Parameters\nDESCRIPTION: Series of examples demonstrating efficient catalog sorting using sort_on, sort_order, and sort_limit parameters to optimize performance and memory usage.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/SearchingZCatalog.rst#2025-04-22_snippet_21\n\nLANGUAGE: python\nCODE:\n```\nzcat=context.AnimalCatalog\nzcat({'sort_on':'latin_name'})\n\nzcat({'sort_on':'latin_name', 'sort_order':'descending'})\n\nzcat({'sort_on':'latin_name',\n      'sort_order':'descending',\n      'sort_limit':20})\n\nzcat({'title':'frog',\n      'sort_on':'latin_name',\n      'sort_order':'descending',\n      'sort_limit':20})\n```\n\n----------------------------------------\n\nTITLE: Calling a ZSQL Method with REQUEST using 'dtml-call' in DTML\nDESCRIPTION: This snippet demonstrates using 'dtml-call' to execute a ZSQL Method named 'insertLogEntry', passing the entire Zope REQUEST object as an argument. This allows the ZSQL method to access request parameters, form data, etc.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/AdvDTML.rst#2025-04-22_snippet_20\n\nLANGUAGE: DTML\nCODE:\n```\n<dtml-call \"insertLogEntry(REQUEST)\">\n```\n\n----------------------------------------\n\nTITLE: Sorting Catalog Results in Python\nDESCRIPTION: Example showing how to sort ZCatalog results using Python list comprehension and sort method. This approach creates a full result list which may be memory intensive for large result sets.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/SearchingZCatalog.rst#2025-04-22_snippet_20\n\nLANGUAGE: python\nCODE:\n```\n# get ordered results from search\nzcat=context.AnimalCatalog\nresults=zcat({'title':'frog'})\nresults=[(row.title, row) for row in results]\nresults.sort()\n```\n\n----------------------------------------\n\nTITLE: Calling a Python Script using 'dtml-call' in DTML\nDESCRIPTION: This snippet illustrates using 'dtml-call' to execute an external Python Script named 'preprocess', passing the REQUEST object to it. This is useful for performing complex logic or request manipulation in Python before continuing DTML rendering.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/AdvDTML.rst#2025-04-22_snippet_22\n\nLANGUAGE: DTML\nCODE:\n```\n<dtml-call \"preprocess(REQUEST)\">\n```\n\n----------------------------------------\n\nTITLE: Getting Path Information in Zope\nDESCRIPTION: Shows how to correctly get object paths in Zope that are unaffected by virtual hosting. Using getPhysicalPath() instead of absolute_url() ensures paths work consistently regardless of virtual hosting configuration.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zdgbook/Gotchas.txt#2025-04-22_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n# Don't use this for constructing paths for restrictedTraverse()\npath = foo.absolute_url(1)\n\n# Do use this instead\npath = '/'.join(foo.getPhysicalPath())\n```\n\n----------------------------------------\n\nTITLE: Using tal:omit-tag and TAL Elements\nDESCRIPTION: Demonstrates alternative ways to insert dynamic content without extra HTML elements.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/ZPT.rst#2025-04-22_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<p>The URL is\n  <span tal:content=\"request/URL\" tal:omit-tag=\"\">\n    http://www.example.com</span>.</p>\n```\n\nLANGUAGE: html\nCODE:\n```\n<p>The URL is\n  <tal:span tal:content=\"request/URL\">\n    http://www.example.com</tal:span>.</p>\n```\n\n----------------------------------------\n\nTITLE: Externally Declaring Module Security for Uneditable Modules in Zope (Python)\nDESCRIPTION: Illustrates using ModuleSecurityInfo for external security declarations when editing the target module is impractical. The snippet grants public access to the 'foo' function within the (possibly unimported) 'foomodule'. Dependencies: AccessControl.ModuleSecurityInfo. Intended for product or wrapper modules that manage access for other modules. No need to call apply(globals()) in this scenario; ModuleSecurityInfo operates directly via its constructor and method invocation.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zdgbook/Security.rst#2025-04-22_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nfrom AccessControl import ModuleSecurityInfo\n# protect the 'foo' function within (yet-to-be-imported) 'foomodule'\nModuleSecurityInfo('foomodule').declarePublic('foo')\n```\n\n----------------------------------------\n\nTITLE: Querying a Zope TopicIndex in Python\nDESCRIPTION: This Python snippet demonstrates querying a Zope ZCatalog instance ('AnimalCatalog') using a TopicIndex named 'topicindex'. It specifically requests objects belonging to the 'folders_with_titles' FilteredSet within that TopicIndex. The result contains cataloged objects matching the criteria defined in the FilteredSet.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/SearchingZCatalog.rst#2025-04-22_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nzcat = context.AnimalCatalog\nresults = zcat(topicindex='folders_with_titles')\n```\n\n----------------------------------------\n\nTITLE: HTML Form Structure for Zope Template Input Collection - XML\nDESCRIPTION: This example provides a standard HTML form intended for use within a Zope Page Template. The form submits 'name' and 'age:int' fields to an action endpoint. It's designed to integrate with backend Zope scripts that process the supplied input, leveraging Zope's form conventions, and can be expanded with additional fields or validation requirements.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/AdvZPT.rst#2025-04-22_snippet_18\n\nLANGUAGE: xml\nCODE:\n```\n...\n<form action=\"action\">\n  <input type=\"text\" name=\"name\">\n  <input type=\"text\" name=\"age:int\">\n  <input type=\"submit\">\n</form>\n...\n```\n\n----------------------------------------\n\nTITLE: Implementing Multiple Interfaces in Zope\nDESCRIPTION: Shows how to make a class implement multiple interfaces by passing a sequence of interface objects to the @implementer decorator.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zdgbook/ComponentsAndInterfaces.rst#2025-04-22_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n@implementer(IHello, IItem)\nclass HelloComponent:\n    ...\n```\n\n----------------------------------------\n\nTITLE: Defining METAL Macro with Default Content in Slots in ZPT/HTML\nDESCRIPTION: Defines a reusable 'sidebar' macro using 'metal:define-macro'. It includes a 'links' slot ('metal:define-slot') containing default navigation links, making the links section customizable. An empty 'additional_info' slot is also defined. If a slot isn't filled when the macro is used, its default content (if any) is rendered.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/ZPT.rst#2025-04-22_snippet_23\n\nLANGUAGE: html\nCODE:\n```\n<div metal:define-macro=\"sidebar\">\n  <div metal:define-slot=\"links\">\n  Links\n  <ul>\n    <li><a href=\"/\">Home</a></li>\n    <li><a href=\"/products\">Products</a></li>\n    <li><a href=\"/support\">Support</a></li>\n    <li><a href=\"/contact\">Contact Us</a></li>\n  </ul>\n  </div>\n  <span metal:define-slot=\"additional_info\"></span>\n</div>\n```\n\n----------------------------------------\n\nTITLE: XML-RPC Traversal Examples in Zope\nDESCRIPTION: Shows different approaches to object traversal when using XML-RPC with Zope. Demonstrates both dotted notation traversal and direct URL addressing to reach the same object.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zdgbook/ObjectPublishing.rst#2025-04-22_snippet_23\n\nLANGUAGE: python\nCODE:\n```\nfrom xmlrpc.client import ServerProxy as proxy\n\n# traversal via dotted method name\napp = proxy(\"http://example.com/app\")\nid1 = app.folderA.folderB.getId()\n\n# walking directly up to the published object\nfolderB = proxy(\"http://example.com/app/folderA/folderB\")\nid2 = folderB.getId()\n\nprint(id1 == id2)\n```\n\n----------------------------------------\n\nTITLE: Using sqlgroup Tag in DTML for SQL Query Construction\nDESCRIPTION: The sqlgroup tag creates logical groups in SQL queries. It supports nested conditions with 'and'/'or' operators and can automatically include the 'where' keyword. This example demonstrates how to build a query with optional conditions.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/AppendixA.rst#2025-04-22_snippet_17\n\nLANGUAGE: dtml\nCODE:\n```\nselect * from employees \n<dtml-sqlgroup where>\n  <dtml-sqltest salary op=\"gt\" type=\"float\" optional>\n<dtml-and>\n  <dtml-sqltest first type=\"nb\" multiple optional>\n<dtml-and>\n  <dtml-sqltest last type=\"nb\" multiple optional>\n</dtml-sqlgroup>\n```\n\n----------------------------------------\n\nTITLE: Configuring Zope Log Rotation with logrotate (Unix)\nDESCRIPTION: Demonstrates a sample `logrotate` configuration for Zope's `Z2.log` file located in `/usr/local/zope/var/`. It specifies weekly rotation, keeping 25 archived log files, using `copytruncate` (copies the log then truncates the original, avoiding the need to signal Zope), and compressing the rotated logs.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/MaintainingZope.rst#2025-04-22_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\n/usr/local/zope/var/Z2.log {\nrotate 25\nweekly\ncopytruncate\ncompress\n}\n```\n\n----------------------------------------\n\nTITLE: Creating ZEO Storage Instance in Python\nDESCRIPTION: This command creates a new ZEO storage instance using the mkzeoinstance.py script. It sets up the necessary directory structure and configuration files for a ZEO server.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/ZEO.rst#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ python /path/to/Zope/bin/mkzeoinstance.py /path/to/zeostorage\n```\n\n----------------------------------------\n\nTITLE: METAL Slot Definition\nDESCRIPTION: Macro definition with a customization slot\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/AppendixC.rst#2025-04-22_snippet_38\n\nLANGUAGE: html\nCODE:\n```\n<p metal:define-macro=\"hello\">\n    Hello <b metal:define-slot=\"name\">World</b>\n  </p>\n```\n\n----------------------------------------\n\nTITLE: Using sqlvar Tag for Safe Variable Insertion in SQL Query\nDESCRIPTION: This SQL snippet demonstrates the use of the sqlvar tag to safely insert a variable into a SQL query. It selects all employees with a specific emp_id, protecting against SQL injection.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/RelationalDatabases.rst#2025-04-22_snippet_7\n\nLANGUAGE: SQL\nCODE:\n```\nselect * from employees \n  where emp_id=<dtml-sqlvar emp_id type=int>\n```\n\n----------------------------------------\n\nTITLE: Streaming Response Data in Zope\nDESCRIPTION: Demonstrates how to stream response data incrementally in a Zope application using the response object's write method, which is useful for handling large responses or long-running operations.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zdgbook/ObjectPublishing.rst#2025-04-22_snippet_20\n\nLANGUAGE: python\nCODE:\n```\nwhile 1:\n    data=getMoreData() #this call may block for a while\n    if not data:\n        break\n    RESPONSE.write(data)\n```\n\n----------------------------------------\n\nTITLE: WSGI Server Configuration Example\nDESCRIPTION: Configuration example for using alternative WSGI servers like gunicorn with Zope.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/INSTALL.rst#2025-04-22_snippet_4\n\nLANGUAGE: ini\nCODE:\n```\n[zopeinstance]\nrecipe = plone.recipe.zope2instance\neggs =\n    gunicorn\nuser = admin:adminpassword\nhttp-address = 8080\nzodb-temporary-storage = off\nwsgi = /path/to/zope.ini\n```\n\n----------------------------------------\n\nTITLE: Defining HTML Form Inputs with Zope Type Conversion Aggregators - HTML\nDESCRIPTION: This snippet shows HTML checkbox inputs named with Zope type conversion aggregators ('numbers:list:int'), enabling Zope's publisher to collect multiple form values into a list of integers automatically. When posted, Zope interprets the input as a list of integers, which simplifies request handling in published Python functions. This approach requires support from Zope's type converter mechanism but has limitations in combining aggregators and converters to only supported types and sequences.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zdgbook/ObjectPublishing.rst#2025-04-22_snippet_10\n\nLANGUAGE: html\nCODE:\n```\n    <input type=\"checkbox\" name=\"numbers:list:int\" value=\"1\">\\n    <input type=\"checkbox\" name=\"numbers:list:int\" value=\"2\">\\n    <input type=\"checkbox\" name=\"numbers:list:int\" value=\"3\">\\n\n```\n\n----------------------------------------\n\nTITLE: Querying ZCatalog by Path and meta_type (TAL)\nDESCRIPTION: This TAL snippet demonstrates querying a ZCatalog named 'AnimalCatalog' based on object location (using a PathIndex) and object type (using a FieldIndex 'meta_type'). It uses `tal:repeat` to iterate through the results of the catalog query, specifically looking for 'Image' objects within the '/Zoo/Lizards' path. For each matching item, it generates a paragraph containing a link to the item.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/SearchingZCatalog.rst#2025-04-22_snippet_10\n\nLANGUAGE: html\nCODE:\n```\n<h2>Lizard Pictures</h2>\n<p tal:repeat=\"item\n    python:context.AnimalCatalog(pathindex='/Zoo/Lizards', \n    meta_type='Image')\">\n  <a href=\"url\" tal:attributes=\"href item/getURL\" tal:content=\"item/title\">\n    document title\n  </a>\n</p>    \n```\n\n----------------------------------------\n\nTITLE: ILocation-based Component Look-up in Python\nDESCRIPTION: This snippet shows how the IComponentLookup adapter works using the ILocation API. It creates Location objects with parent relationships and demonstrates that the adapter can find the site's component registry.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/src/Products/Five/component/component.txt#2025-04-22_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\nfrom zope.location import Location\nob = Location()\nob2 = Location()\nob.__parent__ = site\nob2.__parent__ = ob\nIComponentLookup(ob2) is components\nTrue\n```\n\n----------------------------------------\n\nTITLE: Iterating Over a Sequence with dtml-in in DTML\nDESCRIPTION: Demonstrates the basic usage of the `dtml-in` tag to loop over a sequence named `todo_list`. For each item in the sequence, the inner block is executed, rendering a paragraph containing the item's `description` using `dtml-var`.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/DTML.rst#2025-04-22_snippet_35\n\nLANGUAGE: dtml\nCODE:\n```\n<dtml-in todo_list>\n  <p><dtml-var description></p>\n</dtml-in>\n```\n\n----------------------------------------\n\nTITLE: Declaring TAL Namespace in XML/HTML\nDESCRIPTION: Shows how to declare the TAL namespace in an XML or HTML document. This namespace declaration is required for all content types except text/html in Zope.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/AppendixC.rst#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\nxmlns:tal=\"http://xml.zope.org/namespaces/tal\"\n```\n\n----------------------------------------\n\nTITLE: Creating Dummy Elements with TAL Replace\nDESCRIPTION: Shows how to include template-only elements that won't appear in the final output using the 'nothing' variable\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/AdvZPT.rst#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<tr tal:replace=\"nothing\">\n  <td>10213</td><td>Example Item</td><td>$15.34</td>\n</tr>\n```\n\n----------------------------------------\n\nTITLE: Enhanced Poll Edit Method with Web Response Handling\nDESCRIPTION: Improved version of the editPoll method that returns an appropriate response when called from the web. It uses REQUEST parameter to detect web calls and includes status feedback.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zdgbook/Products.rst#2025-04-22_snippet_22\n\nLANGUAGE: python\nCODE:\n```\ndef editPoll(self, question, responses, REQUEST=None):\n    \"\"\"\n    Changes the question and responses.\n    \"\"\"\n    self._question = question\n    self._responses = responses\n    self._votes = {}\n    for i in range(len(responses)):\n        self._votes[i] = 0\n    if REQUEST is not None:\n        return self.editPollForm(REQUEST,\n            manage_tabs_message='Poll question and responses changed.')\n```\n\n----------------------------------------\n\nTITLE: Accessing Result Object Length in Zope Page Templates\nDESCRIPTION: A ZPT snippet showing how to display the number of records returned by a SQL query using the len() function.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/RelationalDatabases.rst#2025-04-22_snippet_27\n\nLANGUAGE: html\nCODE:\n```\n<span tal:content=\"python: len(list_all_employees())\" />\n```\n\n----------------------------------------\n\nTITLE: Core Acquisition Module Functions\nDESCRIPTION: Collection of fundamental Acquisition module utility functions including aq_base, aq_chain, aq_get, aq_inner, aq_parent, and aq_self for managing object acquisition and wrapper manipulation.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zdgbook/Acquisition.rst#2025-04-22_snippet_8\n\nLANGUAGE: python\nCODE:\n```\naq_base(object)\naq_chain(object [, containment])\naq_get(object, name [, default, containment])\naq_inner(object)\naq_parent(object)\naq_self(object)\n```\n\n----------------------------------------\n\nTITLE: ZPT Template for Displaying Employee List\nDESCRIPTION: Zope Page Template (ZPT) version of the employee list display using TAL expressions\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/RelationalDatabases.rst#2025-04-22_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<div>\n  <ul>\n    <li tal:repeat=\"row context/list_all_employees\">\n      <span tal:content=\"string:${row/id}: ${row/last} ${row/first} \n            makes ${row/salary} Euro a year.\n    </li>\n  </ul>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Managing Zope with systemctl Commands\nDESCRIPTION: This snippet demonstrates how to use systemctl commands to start, restart, check status, and stop a Zope instance after configuring it as a systemd service.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/operation.rst#2025-04-22_snippet_12\n\nLANGUAGE: console\nCODE:\n```\n[root@server]# systemctl start zopeinstance\n[root@server]# systemctl restart zopeinstance\n[root@server]# systemctl status zopeinstance\n[root@server]# systemctl stop zopeinstance\n```\n\n----------------------------------------\n\nTITLE: Querying a Zope KeywordIndex with Implicit 'OR' Operator\nDESCRIPTION: This Python code shows a standard query against a Zope ZCatalog's KeywordIndex named 'categories'. Passing a list of keywords ('big', 'shiny') directly results in an 'OR' search, returning objects tagged with either 'big' or 'shiny'.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/SearchingZCatalog.rst#2025-04-22_snippet_14\n\nLANGUAGE: python\nCODE:\n```\n# big or shiny\nresults=ZCatalog(categories=['big', 'shiny'])\n```\n\n----------------------------------------\n\nTITLE: Embedding ModuleSecurityInfo Declarations for Module-Level Security in Zope (Python)\nDESCRIPTION: Demonstrates how to embed security declarations in a Python module using ModuleSecurityInfo from AccessControl. Declares the function 'foo' as public, making it importable by through-the-web scripts. Dependencies: AccessControl.ModuleSecurityInfo. Expected inputs: none; outputs: public exposure of 'foo' for dynamic import. To activate, the declaration must conclude with modulesecurity.apply(globals()). This is recommended for modules specifically designed for Zope integration.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zdgbook/Security.rst#2025-04-22_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nfrom AccessControl import ModuleSecurityInfo\nmodulesecurity = ModuleSecurityInfo()\nmodulesecurity.declarePublic('foo')\n\ndef foo():\n    return 'hello'\n    # foo\n\nmodulesecurity.apply(globals())\n```\n\n----------------------------------------\n\nTITLE: Starting ZEO Server using zeoctl Script\nDESCRIPTION: This command starts the ZEO server using the zeoctl script. It initializes the ZEO storage and makes it available for ZEO clients to connect.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/ZEO.rst#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ /path/to/zeostorage/bin/zeoctl start\n```\n\n----------------------------------------\n\nTITLE: TALES String Variable Substitution\nDESCRIPTION: Basic string formatting with variable substitution\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/AppendixC.rst#2025-04-22_snippet_34\n\nLANGUAGE: html\nCODE:\n```\n<span tal:replace=\"string:$this and $that\">\n    Spam and Eggs\n  </span>\n```\n\n----------------------------------------\n\nTITLE: Creating a ZCatalog Search Form in HTML/TAL\nDESCRIPTION: This HTML template creates a search form for querying a ZCatalog named NewsCatalog. It includes input fields for author, content, and date, which correspond to the catalog's indexes.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/SearchingZCatalog.rst#2025-04-22_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<html><body>\n<form action=\"Report\" method=\"get\">\n<h2 tal:content=\"template/title_or_id\">Title</h2>\nEnter query parameters:<br><table>\n<tr><th>Author</th>\n<td><input name=\"author\" width=30 value=\"\"></td></tr>\n<tr><th>Content</th>\n<td><input name=\"contentTextIdx\" width=30 value=\"\"></td></tr>\n<tr><th>Date</th>\n<td><input name=\"date\" width=30 value=\"\"></td></tr>\n<tr><td colspan=2 align=center>\n<input type=\"submit\" name=\"SUBMIT\" value=\"Submit Query\">\n</td></tr>\n</table>\n</form>\n</body></html>\n```\n\n----------------------------------------\n\nTITLE: Using Subtransactions for Batch Processing in Zope (Python)\nDESCRIPTION: Illustrates how to use subtransactions at regular intervals while processing a large number of tasks. This helps manage memory usage and avoid swapping.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zdgbook/ZODBPersistentComponents.rst#2025-04-22_snippet_8\n\nLANGUAGE: Python\nCODE:\n```\ntasks_per_subtransaction = 10\ni = 0\nfor task in tasks:\n    process(task)\n    i = i + 1\n    if i % tasks_per_subtransaction == 0:\n        get_transaction().commit(1)\n```\n\n----------------------------------------\n\nTITLE: Looping and Accessing Items with dtml-in in DTML\nDESCRIPTION: This snippet demonstrates iterating through a range of numbers using 'dtml-in' with '_.range(3)'. Inside the loop, 'dtml-var sequence-item' displays the current item. However, using 'sequence-item' directly within a 'dtml-var expr' attribute causes a Python error because '-' is interpreted as subtraction, not part of the variable name.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/AdvDTML.rst#2025-04-22_snippet_11\n\nLANGUAGE: DTML\nCODE:\n```\n<dtml-var standard_html_header>\n\n<h1>The squares of the first three integers:</h1>\n<ul>\n<dtml-in expr=\"_.range(3)\">\n  <li>The square of <dtml-var sequence-item> is: \n    <dtml-var expr=\"sequence-item * sequence-item\">\n  </li>\n</dtml-in>  \n</ul>  \n\n<dtml-var standard_html_footer>\n```\n\n----------------------------------------\n\nTITLE: Loading Management View from DTML File in Zope Product (Python)\nDESCRIPTION: This Python snippet shows how to use the `DTMLFile` class from `Globals` to load a DTML Method from an external file (`dtml/edit.dtml`) and assign it as a class attribute (`editForm`) within the `PollProduct` class. The `globals()` argument helps `DTMLFile` locate the product's directory. This allows defining view logic in separate `.dtml` files, promoting better organization.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zdgbook/Products.rst#2025-04-22_snippet_17\n\nLANGUAGE: python\nCODE:\n```\nfrom Globals import DTMLFile\n\nclass PollProduct(...):\n  ...\n\n  editForm = DTMLFile('dtml/edit', globals())\n  ...\n```\n\n----------------------------------------\n\nTITLE: Wrapping DTMLFile Method with Python Method in Zope (Python)\nDESCRIPTION: This Python code illustrates a pattern for wrapping a DTML Method loaded via `DTMLFile` (assigned to a private attribute `_editForm`). A public method `editForm` is defined, which can perform preparatory steps or calculations before calling the underlying DTML method (`self._editForm(REQUEST, ...)`), passing the Zope REQUEST object and potentially other arguments, and returning its result. This provides more control over how the DTML management view is rendered.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zdgbook/Products.rst#2025-04-22_snippet_18\n\nLANGUAGE: python\nCODE:\n```\nfrom Globals import DTMLFile\n\nclass PollProduct(...):\n  ...\n\n  _editForm = DTMLFile('dtml/edit', globals())\n\n  def editForm(self, ...):\n      ...\n\n      return self._editForm(REQUEST, ...)\n```\n\n----------------------------------------\n\nTITLE: Creating Initial User with zpasswd.py\nDESCRIPTION: Example of using zpasswd.py to create an initial user account in Zope. Shows the interactive prompt for username, password, and encryption settings.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/Security.rst#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ cd ( ... were your ZOPE_HOME is ... )\n$ python zpasswd.py inituser\n\nUsername: bob\nPassword:\nVerify password:\n\nPlease choose a format from:\n\nSHA - SHA-1 hashed password\nCRYPT - UNIX-style crypt password\nCLEARTEXT - no protection.\n\nEncoding: SHA\nDomain restrictions:\n```\n\n----------------------------------------\n\nTITLE: Calling Object Constructors via manage_addProduct in Zope\nDESCRIPTION: Shows the syntax for adding a new object to an ObjectManager from non-Product code. This approach calls the add function defined by a product through the manage_addProduct registry.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zdgbook/Gotchas.txt#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nself.manage_addProduct['OFSP'].manage_addFolder(id, title)\n```\n\n----------------------------------------\n\nTITLE: Defining a Macro with TAL Content in Zope Page Templates\nDESCRIPTION: This snippet shows how to define a macro that includes TAL statements, which will be evaluated in the context of the template using the macro.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/ZPT.rst#2025-04-22_snippet_19\n\nLANGUAGE: html\nCODE:\n```\n<p metal:define-macro=\"title\"\n   tal:content=\"template/title\">\n  template's title\n</p>\n```\n\n----------------------------------------\n\nTITLE: Using TAL Attributes to Replace Multiple Element Attributes\nDESCRIPTION: Shows how to replace multiple attributes (rows and cols) on a textarea element using values from the request object.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/AppendixC.rst#2025-04-22_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<textarea\n  rows=\"80\" cols=\"20\"\n  tal:attributes=\"rows request/rows;cols request/cols\">\n```\n\n----------------------------------------\n\nTITLE: Implementing Size-Based Sorter Utility\nDESCRIPTION: Implements a sorter utility that sorts container items by their size, using the ISized adapter's sizeForSorting method. This utility is registered with the name 'size'.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/src/Products/Five/viewlet/README.txt#2025-04-22_snippet_19\n\nLANGUAGE: python\nCODE:\n```\n@zope.interface.implementer(ISorter)\nclass SortBySize(object):\n\n    def sort(self, values):\n        def _key(value):\n            return size.interfaces.ISized(value).sizeForSorting()\n        return sorted(values, key=_key)\n\nzope.component.provideUtility(SortBySize(), name='size')\n```\n\n----------------------------------------\n\nTITLE: Using dtml-var with missing attribute in DTML\nDESCRIPTION: Demonstrates the `dtml-var` tag with the `missing` attribute. If the variable 'bananas' cannot be found in the Zope context, the specified default string \"We have no bananas\" will be rendered instead.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/DTML.rst#2025-04-22_snippet_17\n\nLANGUAGE: dtml\nCODE:\n```\n<dtml-var bananas missing=\"We have no bananas\">\n```\n\n----------------------------------------\n\nTITLE: Implementing Thread-Safe Module-Level Queue in Python\nDESCRIPTION: This snippet demonstrates how to implement a thread-safe queue at the module level using a lock. It provides put and get methods to safely add and remove items from the queue across multiple threads.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zdgbook/ZODBPersistentComponents.rst#2025-04-22_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nfrom threading import Lock\nqueue=[]\nl=Lock()\n\ndef put(obj):\n    l.acquire()\n    try:\n        queue.append(obj)\n    finally:\n        l.release()\n\ndef get():\n    l.acquire()\n    try:\n        return queue.pop()\n    finally:\n        l.release()\n```\n\n----------------------------------------\n\nTITLE: Repeating Structures with tal:repeat\nDESCRIPTION: Shows how to use tal:repeat to iterate over a sequence and generate repeated HTML elements.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/ZPT.rst#2025-04-22_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n<p tal:repeat=\"number python: range(4)\" tal:content=\"number\">\n  999\n</p>\n```\n\n----------------------------------------\n\nTITLE: Container-Based Acquisition Example\nDESCRIPTION: Demonstrates proper acquisition usage along containment lines with multiple object types. Shows implementation of container classes with acquirable methods.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zdgbook/ObjectPublishing.rst#2025-04-22_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom Acquisition import Implicit\nfrom ZPublisher import zpublish\n\n@zpublish\nclass Basket(Implicit):\n    ...\n    @zpublish\n    def number_of_items(self):\n        \"\"\"Returns the number of contained items.\"\"\"\n        ...\n\n@zpublish\nclass Vegetable(Implicit):\n    ...\n    @zpublish\n    def texture(self):\n        \"\"\"Returns the texture of the vegetable.\"\"\"\n\n@zpublish\nclass Fruit(Implicit):\n    ...\n    @zpublish\n    def color(self):\n        \"\"\"Returns the color of the fruit.\"\"\"\n\nbasket=Basket()\nbasket.apple=Fruit()\nbasket.carrot=Vegetable()\n```\n\n----------------------------------------\n\nTITLE: Remote Scripting Zope with Python XML-RPC Client\nDESCRIPTION: An example Python script using the xmlrpclib module to remotely connect to a Zope server and execute methods. The script retrieves a list of personnel and then calls the fireEmployee method for each one.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/ScriptingZope.rst#2025-04-22_snippet_24\n\nLANGUAGE: python\nCODE:\n```\nimport xmlrpclib\n\nserver = xmlrpclib.Server('http://www.zopezoo.org/')\nfor employee in server.JanitorialDepartment.personnel():\n    server.fireEmployee(employee)\n```\n\n----------------------------------------\n\nTITLE: Chaining ModuleSecurityInfo Declarations for Package Module Access in Zope (Python)\nDESCRIPTION: Shows how to provide secure, public access to a deeply nested function ('foo') within a module that is part of a package hierarchy (package1.package2.module) in Zope. This is achieved by creating ModuleSecurityInfo declarations for each package and submodule in the chain, exposing 'package2', 'module', and 'foo' consecutively. Designed for use in situations where through-the-web code needs to navigate import paths of complex packages. All steps must be performed for the import to succeed.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zdgbook/Security.rst#2025-04-22_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nModuleSecurityInfo('package1').declarePublic('package2')\nModuleSecurityInfo('package1.package2').declarePublic('module')\nModuleSecurityInfo('package1.package2.module').declarePublic('foo')\n```\n\n----------------------------------------\n\nTITLE: Session Management in Python External Methods\nDESCRIPTION: Example of using session data management from Python external methods, demonstrating time tracking between requests.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/Sessions.rst#2025-04-22_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport time\n\ndef setCurrentTime(self):\n    a = self.REQUEST.SESSION\n    a.set('thetime', time.time())\n\ndef getLastTime(self):\n    a = self.REQUEST.SESSION\n    return a.get('thetime')\n```\n\n----------------------------------------\n\nTITLE: DTML File Listing with Alternating Row Colors\nDESCRIPTION: Enhanced version of the file listing that displays files in a table with alternating row colors using sequence-even conditional check.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/DTML.rst#2025-04-22_snippet_37\n\nLANGUAGE: dtml\nCODE:\n```\n<dtml-var standard_html_header>\n\n<table>\n<dtml-in expr=\"objectValues('File')\">\n  <dtml-if sequence-even>\n    <tr bgcolor=\"grey\">\n  <dtml-else>\n    <tr>\n  </dtml-if>    \n  <td>\n  <a href=\"&dtml-absolute_url;\"><dtml-var title_or_id></a>\n  </td></tr>\n</dtml-in>\n</table>\n\n<dtml-var standard_html_footer>\n```\n\n----------------------------------------\n\nTITLE: Using Path Expressions in Zope Page Templates\nDESCRIPTION: Shows how to use path expressions in Zope Page Templates to simplify object traversal and attribute access.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/AdvZPT.rst#2025-04-22_snippet_38\n\nLANGUAGE: python\nCODE:\n```\n\"context/images/penguin.gif\"\n```\n\nLANGUAGE: python\nCODE:\n```\n\"request/form/x\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Unit Tests for News Class in Python\nDESCRIPTION: This snippet demonstrates how to create unit tests for a 'News' class using Python's unittest framework. It includes tests for posting news and quoting functionality.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zdgbook/TestingAndDebugging.rst#2025-04-22_snippet_8\n\nLANGUAGE: Python\nCODE:\n```\nimport unittest\nimport News\n\nclass NewsTest(unittest.TestCase):\n\n    def testPost(self):\n        n=News()\n        s='example news'\n        n.postnews(s)\n        assert n.news==s\n\n    def testQuote(self):\n        n=News()\n        s='example news'\n        n.postnews(s)\n        assert n.quote()=='Anonymous said: \"%s\"' % s\n        a='Author'\n        n.postnews(s, a)\n        assert n.quote()=='%s said: \"%s\"' % (a, s)\n\ndef test_suite():\n   return unittest.makeSuite(NewsTest, 'news test')\n\ndef main():\n   unittest.TextTestRunner().run(test_suite())\n\nif __name__==\"__main__\":\n    main()\n```\n\n----------------------------------------\n\nTITLE: Embedding Browser ID in HTML Form using DTML\nDESCRIPTION: Shows how to use the getHiddenFormField method to easily embed the browser ID as a hidden form field.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/Sessions.rst#2025-04-22_snippet_9\n\nLANGUAGE: html\nCODE:\n```\n<html>\n<body>\n  <form action=\"thenextmethod\">\n    <input type=\"submit\" name=\"submit\" value=\" GO \">\n    <dtml-var \"REQUEST.SESSION.getBrowserIdManager().getHiddenFormField()\">\n  </form>\n</body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Defining a Reusable Page Template Macro in Zope\nDESCRIPTION: This snippet defines a reusable page template macro using METAL (Macro Expansion TAL). It includes slots for headline and content, allowing for customization when the macro is used.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/SimpleExamples.rst#2025-04-22_snippet_6\n\nLANGUAGE: HTML\nCODE:\n```\n<metal:macro metal:define-macro=\"page\"><!DOCTYPE html>\n<html>\n<head>\n\n<title tal:content=\"context/title_or_id\">PAGE TITLE OR ID</title>\n<link rel=\"stylesheet\" href=\"z_zoo.css\" type=\"text/css\"\n      tal:attributes=\"href context/z_zoo.css/absolute_url\" />\n\n</head>\n<body>\n\n<div><tal:loop tal:repeat=\"item python: request.PARENTS[-2::-1]\">&gt;\n  <a href=\"ABSOLUTE_URL\"\n     tal:attributes=\"href item/absolute_url\"\n     tal:content=\"item/title_or_id\">PARENT TITLE OR\n                                    ID</a> </tal:loop></div>\n\n<ul tal:condition=\"python: context.objectValues(['Folder'])\">\n  <li tal:repeat=\"item python: context.objectValues(['Folder'])\">\n    <a href=\"ABSOLUTE_URL\"\n       tal:attributes=\"href item/absolute_url\"\n       tal:content=\"item/title_or_id\">SUB-OBJECT TITLE OR ID</a></li>\n</ul>\n\n<metal:slot metal:define-slot=\"headline\">\n\n  <h1 tal:content=\"context/title_or_id\">PAGE TITLE OR ID</h1>\n\n</metal:slot>\n\n<p class=\"status_message\"\n   tal:condition=\"options/status_message | nothing\"\n   tal:content=\"options/status_message\">STATUS MESSAGE</p>\n\n<metal:slot metal:define-slot=\"content\">\n\n  <p>THIS IS WHERE THE PAGE'S CONTENT GOES.</p>\n\n</metal:slot>\n\n</body>\n</html>\n</metal:macro>\n```\n\n----------------------------------------\n\nTITLE: Registering the Sorted Contents Viewlet Manager\nDESCRIPTION: Creates a concrete implementation of the SortedContentsViewletManager with a page template and registers it as an adapter for Container objects, replacing the existing registration for the 'contents' viewlet manager.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/src/Products/Five/viewlet/README.txt#2025-04-22_snippet_21\n\nLANGUAGE: python\nCODE:\n```\nSortedContentsViewletManager = type(\n    'SortedContentsViewletManager', (SortedContentsViewletManager,),\n    {'index': ZopeTwoPageTemplateFile('table.pt', temp_dir)})\n\nzope.component.provideAdapter(\n    SortedContentsViewletManager,\n    (Container, IDefaultBrowserLayer, zope.interface.Interface),\n    interfaces.IViewletManager, name='contents')\n```\n\n----------------------------------------\n\nTITLE: Displaying Employee Data with Custom Brains Method\nDESCRIPTION: A DTML Method that uses the fullName method from the Employee brains class to display employee information in a more object-oriented way.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/RelationalDatabases.rst#2025-04-22_snippet_29\n\nLANGUAGE: html\nCODE:\n```\n<dtml-var standard_html_header>\n\n  <h1><dtml-var fullName></h1>\n\n  <p><dtml-var first>'s employee id is <dtml-var emp_id>.  <dtml-var\n  first> makes <dtml-var salary fmt=\"dollars-and-cents\"> per year.</p>\n\n<dtml-var standard_html_footer>\n```\n\n----------------------------------------\n\nTITLE: Defining Variables with Nocall in TALES - HTML\nDESCRIPTION: Shows usage of the nocall expression in a TAL define clause to bind the result of a path without invoking it, allowing property access on the object. The span element displays properties of the object fetched by 'nocall:context/aDoc'. Requires TAL context with 'context/aDoc' pointing to a callable or document-like object. The key parameters are the defined variable ('doc') and TAL string interpolation. Output is the concatenated ID and title values.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/AppendixC.rst#2025-04-22_snippet_22\n\nLANGUAGE: html\nCODE:\n```\n<span tal:define=\"doc nocall:context/aDoc\"\n      tal:content=\"string:${doc/getId}: ${doc/title}\">\n  Id: Title\n</span>\n```\n\n----------------------------------------\n\nTITLE: Creating HTML Form for Interest Rate Calculation in Zope Page Template\nDESCRIPTION: This HTML code creates a form in a Zope Page Template to collect user input for compound interest calculation. It includes fields for principal, interest rate, periods, and years.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/BasicObject.rst#2025-04-22_snippet_3\n\nLANGUAGE: HTML\nCODE:\n```\n<html>\n  <body>\n\n  <form action=\"interestRateDisplay\" method=\"POST\">\n  <p>Please enter the following information:</p>\n\n  Your current balance (or debt): <input name=\"principal:float\"><br>\n  Your annual interest rate: <input name=\"interest_rate:float\"><br>\n  Number of periods in a year: <input name=\"periods:int\"><br>\n  Number of years: <input name=\"years:int\"><br>\n  <input type=\"submit\" value=\" Calculate \"><br>\n  </form>\n\n  </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Nested TAL Repeat with Omit-tag\nDESCRIPTION: Demonstrates using tal:repeat with tal:omit-tag to create repeating sections without extra markup\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/AdvZPT.rst#2025-04-22_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<div tal:repeat=\"section context/getSections\"\n     tal:omit-tag=\"\">\n  <h4 tal:content=\"section/title\">Title</h4>\n  <p tal:content=\"section/text\">quotation</p>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Testing Cookie Set via HTTP Response - Python\nDESCRIPTION: Checks that a server-side method can set cookies correctly in the HTTP response header. This snippet performs a GET request to an endpoint expected to set a cookie and verifies its presence in the response. It depends on the endpoint implementation and standard Zope cookie mechanics.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/src/Testing/ZopeTestCase/zopedoctest/FunctionalDocTest.txt#2025-04-22_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n>>> response = http(r\"\"\"\n... GET /test_folder_1_/index_html/set_cookie HTTP/1.1\n... \"\"\", handle_errors=False)\n\n>>> response.status\n200\n\n>>> b'Set-Cookie: foo=Bar; Path=/' in response.getOutput()\nTrue\n```\n\n----------------------------------------\n\nTITLE: Creating Dynamic SQL Query with sqltest Tag in Zope\nDESCRIPTION: This SQL snippet shows how to use the sqltest tag to create a dynamic SQL query. It selects employees with a salary greater than a specified value, demonstrating safe comparison operations.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/RelationalDatabases.rst#2025-04-22_snippet_8\n\nLANGUAGE: SQL\nCODE:\n```\nselect * from employees \n  where <dtml-sqltest salary op=gt type=float>\n```\n\n----------------------------------------\n\nTITLE: Creating Object Hierarchy in Python for Zope Traversal\nDESCRIPTION: This code snippet demonstrates how to create a hierarchical structure of objects in Zope that can be traversed via URLs. It shows a Classification class and an Animal class with objects organized in a tree-like structure that can be accessed through URL paths.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zdgbook/ObjectPublishing.rst#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass Classification:\n    ...\n\nclass Animal:\n    ...\n\n    def screech(self, ...):\n        ...\n\nvertebrates=Classification(...)\nvertebrates.mammals=Classification(...)\nvertebrates.reptiles=Classification(...)\nvertebrates.mammals.monkey=Animal(...)\nvertebrates.mammals.dog=Animal(...)\nvertebrates.reptiles.lizard=Animal(...)\n```\n\n----------------------------------------\n\nTITLE: Querying Manager by Employee ID in Zope SQL\nDESCRIPTION: A Z SQL Method for finding a manager's ID based on an employee ID, used as part of a more advanced Brains class example.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/RelationalDatabases.rst#2025-04-22_snippet_31\n\nLANGUAGE: sql\nCODE:\n```\nselect manager_id from managers where\n  <dtml-sqltest emp_id type=\"int\" op=\"eq\">\n```\n\n----------------------------------------\n\nTITLE: Registering Zope Class with Security Permission\nDESCRIPTION: Example showing how to register a Zope class with security permissions using registerClass. This code demonstrates setting up permission controls for creating new instances of FooClass, with explicit permission naming.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zdgbook/Security.rst#2025-04-22_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nFooProduct.FooClass, # the class object\n              permission='Add FooClasses',\n              constructors=(FooProduct.manage_addFooClassForm,\n                            FooProduct.manage_addFooClass),\n              icon='foo.gif'\n              )\n```\n\n----------------------------------------\n\nTITLE: Logging Session End Events on Delete with Zope External Method - Python\nDESCRIPTION: This snippet provides the implementation for an External Method in Zope, intended to be configured as the `onDelete` handler for a session data object. It imports Zope's `LOG` function and the `WARNING` constant, defines the `onDelete` function accepting `sdo` and `toc`, checks for the presence of a 'logged_out' indicator, and logs a warning if not found. Requires Zope's External Method setup, correct session configuration, and the `zLOG` module. Output is a log message if a session ends without an explicit logout; function returns `None`.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/Sessions.rst#2025-04-22_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nfrom zLOG import LOG, WARNING\n\ndef onDelete(sdo, toc):\n    logged_out = sdo.get('logged_out', None)\n    if logged_out is None:\n        LOG('session end', WARNING,\n            'session ended without user logging out!')\n```\n\n----------------------------------------\n\nTITLE: Implementing Filtered Acquisition in Python\nDESCRIPTION: Shows how to use filtered acquisition with a custom filter function to control which objects can be acquired based on specific conditions. The example filters to only acquire objects with the 'isNice' attribute set to True.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zdgbook/Acquisition.rst#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom Acquisition import Explicit\n\nclass HandyForTesting:\n    def __init__(self, name):\n        self.name = name\n    def __str__(self):\n        return \"%s(%s)\" % (self.name, self.__class__.__name__)\n    __repr__ = __str__\n\nclass E(Explicit, HandyForTesting): pass\n\nclass Nice(HandyForTesting):\n    isNice = 1\n    def __str__(self):\n        return HandyForTesting.__str__(self) + ' and I am nice!'\n    __repr__ = __str__\n\na = E('a')\na.b = E('b')\na.b.c = E('c')\na.p = Nice('spam')\na.b.p = E('p')\n\ndef find_nice(self, ancestor, name, object, extra):\n    return hasattr(object,'isNice') and object.isNice\n\nprint a.b.c.aq_acquire('p', find_nice)\n```\n\n----------------------------------------\n\nTITLE: Random Mirror Redirection Using TAL in Zope\nDESCRIPTION: This TAL code snippet randomly selects a mirror from the 'mirrors' property and redirects the user to that mirror. It uses the 'random' module to make the selection.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/ZEO.rst#2025-04-22_snippet_8\n\nLANGUAGE: HTML\nCODE:\n```\n<tal:block define=\"mirror python: modules.random.choice(here.mirrors);\ndummy python: request.RESPONSE.redirect(mirror)\" />\n```\n\n----------------------------------------\n\nTITLE: Using Whole Page Macro and Filling Slots with TAL in ZPT/HTML\nDESCRIPTION: Demonstrates using the 'page' macro (defined elsewhere) via 'metal:use-macro'. It fills the 'headline' and 'body' slots using 'metal:fill-slot', incorporating TAL statements ('tal:replace', 'tal:content') to fetch dynamic content (e.g., from 'context/getHeadline', 'context/getBody'). The unfilled 'footer' slot would render its default content from the macro definition.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/ZPT.rst#2025-04-22_snippet_27\n\nLANGUAGE: html\nCODE:\n```\n<html metal:use-macro=\"container/master.html/macros/page\">\n\n  <h1 metal:fill-slot=\"headline\">\n    Press Release:\n    <span tal:replace=\"context/getHeadline\">Headline</span>\n  </h1>\n\n  <p metal:fill-slot=\"body\"\n     tal:content=\"context/getBody\">\n    News item body goes here\n  </p>\n\n</html>\n```\n\n----------------------------------------\n\nTITLE: Implementing Explicit Acquisition Control in Python\nDESCRIPTION: Demonstrates how to control acquisition on an attribute-by-attribute basis using Acquisition.Explicit and Acquisition.Acquired. This allows fine-grained control over which attributes can be acquired.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zdgbook/Acquisition.rst#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nclass C(Acquisition.Explicit):\n   id=1\n   secret=2\n   color=Acquisition.Acquired\n   __roles__=Acquisition.Acquired\n```\n\n----------------------------------------\n\nTITLE: Thumbnail Generation Script in Python\nDESCRIPTION: Script to loop through images and create thumbnails, with logic to prevent creating thumbnails of thumbnails.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/ScriptingZope.rst#2025-04-22_snippet_10\n\nLANGUAGE: python\nCODE:\n```\n## Script (Python) \"makeThumbnails\"\n##\nfor image in context.objectValues('Image'):\n    if not image.hasProperty('original_id'):\n        context.makeThumbnail(image.getId())\n```\n\n----------------------------------------\n\nTITLE: Python Script for Returning a Sequence of Actors\nDESCRIPTION: A Python script that returns a list of actor names which can be used by DTML. The script includes standard Zope Script (Python) binding declarations at the top that define the script's context and parameters.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/DTML.rst#2025-04-22_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n## Script (Python) \"actors\"\n##bind container=container\n##bind context=context\n##bind namespace=\n##bind script=script\n##bind subpath=traverse_subpath\n##parameters=\n##title=\n##\nreturn ['Jack Lemmon', 'Ed Harris','Al Pacino', 'Kevin Spacey', 'Alan Arkin']\n```\n\n----------------------------------------\n\nTITLE: Displaying REQUEST Object Contents with DTML in Zope\nDESCRIPTION: This snippet shows how to display the contents of the Zope REQUEST object using DTML. It's useful for debugging and understanding form submissions.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/DTML.rst#2025-04-22_snippet_9\n\nLANGUAGE: HTML\nCODE:\n```\n<dtml-var REQUEST>\n```\n\n----------------------------------------\n\nTITLE: Variable Scoping with the DTML 'let' Tag - DTML\nDESCRIPTION: Shows defining local variables within a DTML 'let' block, assigning both string literals and the result of method calls or lookups. Variables such as 'name' and 'ids' are scoped within the block for subsequent use. Dependencies include DTML variable assignment mechanisms and any referenced methods (e.g., objectIds).\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/AppendixA.rst#2025-04-22_snippet_11\n\nLANGUAGE: dtml\nCODE:\n```\n<dtml-let name=\"'Bob'\" ids=objectIds>\n  name: <dtml-var name>\n  ids: <dtml-var ids>\n</dtml-let>\n```\n\n----------------------------------------\n\nTITLE: Defining Property Structure for Zope Product Class\nDESCRIPTION: Example of defining the _properties structure for a Zope product class to specify predefined properties with their types and modes.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zdgbook/Products.rst#2025-04-22_snippet_5\n\nLANGUAGE: Python\nCODE:\n```\n_properties=({'id':'title', 'type': 'string', 'mode': 'w'},\n               {'id':'color', 'type': 'string', 'mode': 'w'},\n              )\n```\n\n----------------------------------------\n\nTITLE: Using TALES Not Expression for Conditionals - HTML\nDESCRIPTION: This code demonstrates testing for an empty or falsy sequence in Zope templates using a TALES not expression within a 'tal:condition'. Requires a variable 'context/objectIds' and TAL support. When the condition is satisfied, indicating no contained objects, the message is displayed.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/AppendixC.rst#2025-04-22_snippet_25\n\nLANGUAGE: html\nCODE:\n```\n<p tal:condition=\"not:context/objectIds\">\n  There are no contained objects.\n</p>\n```\n\n----------------------------------------\n\nTITLE: Processing Form Submission with DTML in Zope\nDESCRIPTION: This snippet demonstrates how to process form submissions in Zope using DTML. It displays a thank you message with the submitted name and email address.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/DTML.rst#2025-04-22_snippet_8\n\nLANGUAGE: HTML\nCODE:\n```\n<dtml-var standard_html_header>\n\n<h1>Thanks <dtml-var user_name></h1>\n\n<p>We received your request for information and will send you\nemail at <dtml-var email_addr> describing our aardvark adoption\nprogram as soon as it receives final governmental approval.\n</p>\n\n<dtml-var standard_html_footer>\n```\n\n----------------------------------------\n\nTITLE: Conditional Status Message Display in Zope Template\nDESCRIPTION: This code snippet adds a conditional status message to a Zope template. It checks for the existence of a status_message in the options and displays it if present.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/SimpleExamples.rst#2025-04-22_snippet_5\n\nLANGUAGE: HTML\nCODE:\n```\n<p class=\"status_message\"\n   tal:condition=\"options/status_message | nothing\"\n   tal:content=\"options/status_message\">STATUS MESSAGE</p>\n```\n\n----------------------------------------\n\nTITLE: Looping Over Sub-Objects with DTML 'in' Tag - DTML\nDESCRIPTION: Demonstrates how to iterate over a sequence of objects using the DTML 'in' tag, outputting the title property for each sub-object. No external dependencies are required; this assumes the context object exposes an 'objectValues' method and a 'title' property. The loop produces HTML line breaks after each item's title.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/AppendixA.rst#2025-04-22_snippet_6\n\nLANGUAGE: dtml\nCODE:\n```\n<dtml-in objectValues>\n  title: <dtml-var title><br>\n</dtml-in>\n```\n\n----------------------------------------\n\nTITLE: Using Not Expressions for Condition Negation\nDESCRIPTION: Demonstrates using the not: expression prefix to negate the value of other expressions, useful for conditional display based on absence of data.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/AdvZPT.rst#2025-04-22_snippet_27\n\nLANGUAGE: TAL\nCODE:\n```\n<p tal:condition=\"not:context/objectIds\">\n  There are no contained objects.\n</p>\n```\n\n----------------------------------------\n\nTITLE: Querying a Zope FieldIndex for Values Greater Than Minimum using Records\nDESCRIPTION: This Python snippet performs a range search on a Zope ZCatalog FieldIndex named 'population_count'. It uses a record with 'query': 5 and 'range': 'min' to find all objects in the 'AnimalCatalog' where the 'population_count' attribute is greater than 5. Requires the 'population_count' FieldIndex to exist.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/SearchingZCatalog.rst#2025-04-22_snippet_16\n\nLANGUAGE: python\nCODE:\n```\n# animals with population count greater than 5\nzcat = context.AnimalCatalog\nresults=zcat(population_count={\n                   'query' : 5,\n                   'range': 'min'}\n              )\n```\n\n----------------------------------------\n\nTITLE: Setting Response Headers in Zope\nDESCRIPTION: Shows how to manually set HTTP response headers in a Zope application, which is useful for controlling caching behavior and other HTTP-specific functionality.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zdgbook/ObjectPublishing.rst#2025-04-22_snippet_19\n\nLANGUAGE: python\nCODE:\n```\nRESPONSE.setHeader('Pragma', 'No-Cache')\n```\n\n----------------------------------------\n\nTITLE: Implementing HTML Form with Action Converters in Zope\nDESCRIPTION: An example HTML form that uses Zope action converters to call different scripts based on which submit button is clicked. It also demonstrates the list converter to build a collection of employee names.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/ScriptingZope.rst#2025-04-22_snippet_22\n\nLANGUAGE: html\nCODE:\n```\n<form action=\"employeeHandlers\">\n\n  <p>Select one or more employees</p>\n\n  <input type=\"checkbox\" name=\"employees:list\" value=\"Larry\" /> Larry<br />\n  <input type=\"checkbox\" name=\"employees:list\" value=\"Simon\" /> Simon<br />\n  <input type=\"checkbox\" name=\"employees:list\" value=\"Rene\" /> Rene<br />\n\n  <input type=\"submit\" name=\"fireEmployees:action\" value=\"Fire!\" /><br />\n\n  <input type=\"submit\" name=\"promoteEmployees:action\" value=\"Promote!\" />\n\n</form>\n```\n\n----------------------------------------\n\nTITLE: Rendered HTML Output After Using Macro with Filled Slot\nDESCRIPTION: Illustrates the final HTML output generated by rendering a template that uses the 'sidebar' macro and fills the 'additional_info' slot. The element defining the slot in the macro is replaced by the content provided in the 'metal:fill-slot' element.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/ZPT.rst#2025-04-22_snippet_22\n\nLANGUAGE: html\nCODE:\n```\n<div>\n  Links\n  <ul>\n    <li><a href=\"/\">Home</a></li>\n    <li><a href=\"/products\">Products</a></li>\n    <li><a href=\"/support\">Support</a></li>\n    <li><a href=\"/contact\">Contact Us</a></li>\n  </ul>\n  <b>\n    Make sure to check out our <a href=\"/specials\">specials</a>.\n  </b>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Acquiring from Context in Python\nDESCRIPTION: Demonstrates how objects can acquire attributes from their context even when they are not directly contained by the object providing the attributes. Shows acquisition based on access path.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zdgbook/Acquisition.rst#2025-04-22_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom Acquisition import Implicit\nclass C(Implicit): pass\na = C()\nb = C()\na.color = \"red\"\nprint b.__of__(a).color # prints red\n```\n\n----------------------------------------\n\nTITLE: DTML Template for Displaying Employee List\nDESCRIPTION: DTML method template that iterates over employee results and displays them in an HTML unordered list\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/RelationalDatabases.rst#2025-04-22_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<dtml-var standard_html_header>\n\n  <ul>\n  <dtml-in list_all_employees>\n    <li><dtml-var emp_id>: <dtml-var last>, <dtml-var first> \n      makes <dtml-var salary> Euro a year.\n    </li>\n  </dtml-in>\n  </ul>\n\n<dtml-var standard_html_footer>\n```\n\n----------------------------------------\n\nTITLE: Using Python Logical Operators for Conditional Content\nDESCRIPTION: Demonstrates using the 'and' and 'or' operators to create conditional logic within a single Python expression, similar to an if/then/else statement.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/AdvZPT.rst#2025-04-22_snippet_34\n\nLANGUAGE: TAL\nCODE:\n```\nYou <span tal:define=\"name user/getUserName\"\n     tal:replace=\"python:name=='Anonymous User' and\n                         'need to log in' or default\">\n      are logged in as\n      <span tal:replace=\"name\">Name</span>\n    </span>\n```\n\n----------------------------------------\n\nTITLE: Debugging Zope with zconsole\nDESCRIPTION: Example of using the zconsole script to debug Zope, including connecting to the database and making changes.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/operation.rst#2025-04-22_snippet_7\n\nLANGUAGE: console\nCODE:\n```\n$ bin/zconsole debug etc/zope.conf\n>>> app\n<Application at >\n\n>>> app.acl_users\n<UserFolder at /acl_users>\n\n>>> import transaction\n>>> transaction.begin()\n>>> app.acl_users._doAddUser('foo', 'bar', ['Manager'], [])\n<User 'foo'>\n>>> transaction.commit()\n```\n\n----------------------------------------\n\nTITLE: Using 'with' Tag with 'only' Attribute in DTML\nDESCRIPTION: Demonstrates how to use the 'only' attribute with the 'with' tag to limit namespace lookup to the specified object.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/AdvDTML.rst#2025-04-22_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n<dtml-with expr=\"REQUEST.form\" only>\n  <dtml-if id>\n    <dtml-var id>\n  <dtml-else>\n    <p>The form didn't contain an \"id\" variable.</p>\n  </dtml-if>\n</dtml-with>\n```\n\n----------------------------------------\n\nTITLE: Calling Scripts with Parameters from Python Scripts\nDESCRIPTION: Shows how to call an 'updateInfo' script from another Python Script, passing multiple parameters. Uses the 'context' variable to locate the script through acquisition.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/ScriptingZope.rst#2025-04-22_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\nnew_color='brown'\ncontext.updateInfo(color=new_color, \n                   pattern=\"spotted\")\n```\n\n----------------------------------------\n\nTITLE: Structuring Bootstrap Tables in HTML for Zope 4 ZMI\nDESCRIPTION: Illustrates the recommended structure for tables in the Zope 4 ZMI, including necessary Bootstrap classes and custom ID attributes for better styling and readability.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/migrations/zope4/code.rst#2025-04-22_snippet_8\n\nLANGUAGE: HTML\nCODE:\n```\n<table class=\"table table-sm table-striped\" id=\"zmi-db_info\">\n  <!-- Table content here -->\n</table>\n```\n\n----------------------------------------\n\nTITLE: Checking Interface Implementation\nDESCRIPTION: Shows how to verify if a class or instance implements a specific interface using implementedBy() and providedBy() methods.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zdgbook/ComponentsAndInterfaces.rst#2025-04-22_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nIHello.implementedBy(HelloComponent)\n\nIHello.providedBy(my_hello_instance)\n```\n\n----------------------------------------\n\nTITLE: Updated DTML Template for Zope 4 ZMI\nDESCRIPTION: Provides a complete example of a restructured DTML template rendering the Zope 4 ZMI, including form layout, buttons, and file upload functionality.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/migrations/zope4/code.rst#2025-04-22_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<dtml-var manage_page_header>\n\n<dtml-var manage_tabs>\n\n<main class=\"container-fluid\">\n\n  <p class=\"form-help\">\n      You may edit the source for this document using the form below. You\n      may also upload the source for this document from a local file. Click\n      the <em>browse</em> button to select a local file to upload.\n  </p>\n\n  <form action=\"manage_edit\" method=\"post\" class=\"zmi-dtml zmi-edit\">\n\n    <dtml-with keyword_args mapping>\n      <div class=\"form-group row\">\n        <label for=\"title\" class=\"form-label col-sm-3 col-md-2\">Title</label>\n        <div class=\"col-sm-9 col-md-10\">\n          <input id=\"title\" class=\"form-control\" type=\"text\" name=\"title\"\n                 value=\"<dtml-if title>&dtml-title;</dtml-if>\" />\n        </div>\n      </div>\n      <div class=\"form-group\">\n        <textarea id=\"content\" data-contenttype=\"html\"\n                  class=\"form-control zmi-code col-sm-12\"\n                  name=\"data:text\" wrap=\"off\"\n                  rows=\"20\"><dtml-var __str__></textarea>\n      </div>\n    </dtml-with>\n\n    <div class=\"zmi-controls\">\n      <dtml-if wl_isLocked>\n        <input class=\"btn btn-primary disabled\" type=\"submit\"\n               name=\"submit\" value=\"Save Changes\" disabled=\"disabled\" />\n        <span class=\"badge badge-warning\"\n              title=\"This item has been locked by WebDAV\">\n          <i class=\"fa fa-lock\"></i>\n        </span>\n      <dtml-else>\n        <input class=\"btn btn-primary\" type=\"submit\" name=\"submit\"\n               value=\"Save Changes\" />\n      </dtml-if>\n    </div>\n\n  </form>\n\n  <dtml-unless wl_isLocked>\n    <form action=\"manage_upload\" method=\"post\"\n          enctype=\"multipart/form-data\" class=\"zmi-upload mt-4\">\n      <div class=\"input-group\" title=\"Select Local File for Uploading\">\n        <div class=\"custom-file\">\n          <input type=\"file\" name=\"file\" class=\"custom-file-input\"\n                 id=\"file-data\" value=\"\"\n                 onchange=\"$('.custom-file label span').html($(this).val().replace(/^.*(\\\\|\\/|\\:)/, ''));\" />\n          <label class=\"custom-file-label\" for=\"file-data\">\n            <span>Choose file</span>\n          </label>\n        </div>\n        <div class=\"input-group-append\">\n            <input class=\"btn btn-outline-secondary\" type=\"submit\"\n                   value=\"Upload File\" />\n        </div>\n      </div>\n    </form>\n  </dtml-unless>\n\n</main>\n\n<dtml-var manage_page_footer>\n```\n\n----------------------------------------\n\nTITLE: Accessing Request and Response Objects in Zope\nDESCRIPTION: Demonstrates how to manually access the request and response objects in Zope applications. Shows how to retrieve the response from a request and access form data versus cookie data.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zdgbook/ObjectPublishing.rst#2025-04-22_snippet_18\n\nLANGUAGE: python\nCODE:\n```\nresponse=REQUEST.RESPONSE\n\ncookies = REQUEST.cookies # a dictionary of cookie data\nform = REQUEST.form # a dictionary of form data\n```\n\n----------------------------------------\n\nTITLE: Testing checkName() Method of ObjectManagerNameChooser in Python\nDESCRIPTION: This snippet tests the checkName() method of ObjectManagerNameChooser. It checks for valid names, names already in use, and names with invalid characters.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/src/Products/Five/browser/tests/adding.txt#2025-04-22_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\n>>> chooser.checkName('abc', object())\n\n>>> from zope.exceptions.interfaces import UserError\n>>> try:\n...     chooser.checkName('testoid', object())\n... except UserError as exc:\n...     print(exc.args)\n... else:\n...     print('UserError not raised.')\n('The id \"testoid\" is invalid - it is already in use.',)\n\n>>> try:\n...     chooser.checkName('slash/slash', object())\n... except UserError as exc:\n...     print(exc.args)\n... else:\n...     print('UserError not raised.')\n('The id \"slash/slash\" contains characters illegal in URLs.',)\n```\n\n----------------------------------------\n\nTITLE: Using METAL Macro and Filling Slot in ZPT/HTML\nDESCRIPTION: Demonstrates using a METAL macro named 'sidebar' located in 'container/master.html'. It fills the 'additional_info' slot within that macro with the content inside the '<b>' tag, allowing specific parts of the macro's output to be customized.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/ZPT.rst#2025-04-22_snippet_21\n\nLANGUAGE: html\nCODE:\n```\n<p metal:use-macro=\"container/master.html/macros/sidebar\">\n  <b metal:fill-slot=\"additional_info\">\n    Make sure to check out our <a href=\"/specials\">specials</a>.\n  </b>\n</p>\n```\n\n----------------------------------------\n\nTITLE: Defining a Comparison dtml-if Condition in DTML\nDESCRIPTION: An example of a DTML `dtml-if` tag condition using the expression syntax (`expr`). The condition `expr=\"x < 5\"` evaluates the Python comparison and is true if the variable 'x' exists and its value is less than 5.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/DTML.rst#2025-04-22_snippet_25\n\nLANGUAGE: dtml\nCODE:\n```\nexpr=\"x < 5\"\n```\n\n----------------------------------------\n\nTITLE: Defining Add Form for Zope Poll Product in Python\nDESCRIPTION: This Python function `addForm` generates the HTML structure for a form used to add a new 'Poll' instance in Zope. It includes input fields for 'id', 'question', and a textarea for 'responses'. The form action is set to 'addFunction', which will handle the submission. Including the <head> tag is important for Zope to set the base URL correctly.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zdgbook/Products.rst#2025-04-22_snippet_11\n\nLANGUAGE: python\nCODE:\n```\ndef addForm():\n    \"\"\"Returns an HTML form.\"\"\"\n    return \"\"\"<html>\n    <head><title>Add Poll</title></head>\n    <body>\n    <form action=\"addFunction\">\n    id <input type=\"type\" name=\"id\"><br>\n    question <input type=\"type\" name=\"question\"><br>\n    responses (one per line)\n    <textarea name=\"responses:lines\"></textarea>\n    </form>\n    </body>\n    </html>\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Declaring Security for Zope Product Class Methods\nDESCRIPTION: Example of declaring security for methods in a Zope product class using ClassSecurityInfo and various security levels.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zdgbook/Products.rst#2025-04-22_snippet_7\n\nLANGUAGE: Python\nCODE:\n```\nfrom AccessControl import ClassSecurityInfo\n\nclass PollProduct(...):\n    ...\n\n    security = ClassSecurityInfo()\n\n    security.declareProtected('Use Poll', 'castVote')\n    def castVote(self, index):\n        ...\n\n    security.declareProtected('View Poll results', 'getTotalVotes')\n    def getTotalVotes(self):\n        ...\n\n    security.declareProtected('View Poll results', 'getVotesFor')\n    def getVotesFor(self, index):\n        ...\n\n    security.declarePublic('getResponses')\n    def getResponses(self):\n        ...\n\n    security.declarePublic('getQuestion')\n    def getQuestion(self):\n        ...\n```\n\n----------------------------------------\n\nTITLE: Packing ZODB via ZEO Server using zeopack.py (Shell)\nDESCRIPTION: This command executes the `zeopack.py` script to pack the Zope Object Database (ZODB) managed by a ZEO server. Packing removes old object revisions to shrink the database file size. It requires specifying the ZEO server's host (`-h localhost`) and port (`-p 8001`). The Python interpreter used should match the one running the ZEO server.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/ZEO.rst#2025-04-22_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\n$ python /path/to/Zope/utilities/ZODBTools/zeopack.py -h localhost -p 8001\n```\n\n----------------------------------------\n\nTITLE: Creating a getEmployees Python Script for Batch Example\nDESCRIPTION: A Script (Python) example that returns a list of employee dictionaries to be used with the batch navigation example. Each employee has a name and salary attribute.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/AdvZPT.rst#2025-04-22_snippet_48\n\nLANGUAGE: python\nCODE:\n```\n  return [  {'name': 'Chris McDonough', 'salary':'5'},\n            {'name': 'Guido van Rossum', 'salary': '10'},\n            {'name': 'Casey Duncan', 'salary':'20' },\n            {'name': 'Andrew Sawyers', 'salary':'30' },\n            {'name': 'Evan Simpson', 'salary':'35' }, \n            {'name': 'Stephanie Hand', 'salary':'40' }, ]\n```\n\n----------------------------------------\n\nTITLE: Running Python Scripts in Zope\nDESCRIPTION: This snippet demonstrates how to run Python scripts from the command line in a Zope environment. The 'app' variable represents the root application object.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/operation.rst#2025-04-22_snippet_14\n\nLANGUAGE: console\nCODE:\n```\n$ bin/zopeinstance run <path_to_script> <scriptarg1> ...\n```\n\n----------------------------------------\n\nTITLE: Containment Before Context in Acquisition\nDESCRIPTION: Shows how attributes are looked up by containment before context in acquisition chains. Demonstrates priority of lookups when multiple objects in the chain have the same attribute.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zdgbook/Acquisition.rst#2025-04-22_snippet_6\n\nLANGUAGE: python\nCODE:\n```\na = C(\"a\")\na.color = \"green\"\na.b = C(\"b\")\na.b.color = \"red\"\na.x = C(\"x\")\n\nprint a.b.x.color # prints green\n```\n\n----------------------------------------\n\nTITLE: Creating HTML Table for Virtual Host Testing in Zope DTML\nDESCRIPTION: This DTML method creates an HTML table to display the absolute URL and URL variables for testing virtual hosting configuration in Zope.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/VirtualHosting.rst#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<html>\n<body>\n<table border=\"1\">\n  <tr>\n    <td>Absolute URL</td>\n    <td><dtml-var absolute_url></td>\n  </tr>\n  <tr>\n    <td>URL0</td>\n    <td><dtml-var URL0></td>\n  </tr>\n  <tr>\n    <td>URL1</td>\n    <td><dtml-var URL1></td>\n  </tr>\n</table>\n</body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Implementing a Size Viewlet in Zope\nDESCRIPTION: Creates a SizeViewlet class that displays the size of file objects by adapting the context to ISized and calling sizeForDisplay(). The viewlet is registered as an adapter for IFile objects.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/src/Products/Five/viewlet/README.txt#2025-04-22_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nclass SizeViewlet(object):\n\n    def __init__(self, context, request, view, manager):\n        self.__parent__ = view\n        self.context = context\n\n    def update(self):\n        pass\n\n    def render(self):\n        return size.interfaces.ISized(self.context).sizeForDisplay()\n```\n\n----------------------------------------\n\nTITLE: Creating CSS Paths Subscription Adapter in Python for Zope ZMI\nDESCRIPTION: Illustrates the creation of a subscription adapter that returns paths to CSS files needed for the Zope 4 ZMI.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/migrations/zope4/code.rst#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport zope.component\nimport zope.interface\n\n\n@zope.component.adapter(zope.interface.Interface)\ndef css_paths(context):\n    \"\"\"Return paths to CSS files needed for the Zope 4 ZMI.\"\"\"\n    return (\n        '/++resource++zmi/bootstrap-4.1.1/bootstrap.min.css',\n        '/++resource++zmi/fontawesome-free-5.1.0/css/all.css',\n        '/++resource++zmi/zmi_base.css',\n    )\n```\n\n----------------------------------------\n\nTITLE: Implementing a Sorted Contents Viewlet Manager\nDESCRIPTION: Creates a viewlet manager that handles the sorting and rendering of container contents. It uses the appropriate sorter utility based on the sortByColumn setting and arranges viewlets according to the shownColumns configuration.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/src/Products/Five/viewlet/README.txt#2025-04-22_snippet_20\n\nLANGUAGE: python\nCODE:\n```\n@zope.interface.implementer(interfaces.IViewletManager)\nclass SortedContentsViewletManager(manager.ViewletManagerBase):\n    index = None\n\n    def __init__(self, context, request, view):\n        self.context = context\n        self.request = request\n        self.__parent__ = view\n\n    def update(self):\n        values = self.context.objectValues()\n\n        if sortByColumn:\n           sorter = zope.component.queryUtility(ISorter, sortByColumn)\n           if sorter:\n               values = sorter.sort(values)\n\n        rows = []\n        for value in values:\n            rows.append(\n                [zope.component.getMultiAdapter(\n                    (value, self.request, self.__parent__, self),\n                    interfaces.IViewlet, name=colname)\n                 for colname in shownColumns])\n            [entry.update() for entry in rows[-1]]\n        self.rows = rows\n\n    def render(self, *args, **kw):\n        return self.index(*args, **kw)\n```\n\n----------------------------------------\n\nTITLE: Registering movedCoolDocument subscriber in configure.zcml (XML)\nDESCRIPTION: ZCML configuration to register the movedCoolDocument function as a subscriber for IObjectMovedEvent on ICoolDocument objects.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/src/OFS/event.txt#2025-04-22_snippet_7\n\nLANGUAGE: XML\nCODE:\n```\n<subscriber\n    for=\"Products.CoolProduct.interfaces.ICoolDocument\n         zope.lifecycleevent.interfaces.IObjectMovedEvent\"\n    handler=\"Products.CoolProduct.CoolDocument.movedCoolDocument\"\n    />\n```\n\n----------------------------------------\n\nTITLE: Creating a Page Template to Display Request Variables\nDESCRIPTION: This Zope Page Template displays all the variables present in the REQUEST object. It's used to demonstrate how access rules can inject variables into the request that are then accessible to templates.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/ZopeServices.rst#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<html>\n<body>\n  <pre tal:content=\"context/REQUEST\">request details</pre>\n</body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Specifying Character Encoding for Zope Input Conversion in HTML\nDESCRIPTION: Shows how to explicitly specify the character encoding for a form parameter value using an encoding directive (e.g., ':cp1252' for Windows-1252) in the input's name attribute. This directive tells Zope's converter process to decode the raw byte sequence using the specified encoding before applying other type conversions (like ':ustring', ':list', ':int'). This is necessary when the page encoding differs from Zope's default.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zdgbook/ObjectPublishing.rst#2025-04-22_snippet_17\n\nLANGUAGE: html\nCODE:\n```\n<input type=\"text\" name=\"name:cp1252:ustring\">\n<input type=\"checkbox\" name=\"numbers:list:int:cp1252\" value=\"1\">\n<input type=\"checkbox\" name=\"numbers:list:int:cp1252\" value=\"1\">\n```\n\n----------------------------------------\n\nTITLE: Testing chooseName() Method of ObjectManagerNameChooser in Python\nDESCRIPTION: This snippet tests the chooseName() method of ObjectManagerNameChooser. It demonstrates how the method chooses names for objects, including handling empty names, valid names, and conflicting names.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/src/Products/Five/browser/tests/adding.txt#2025-04-22_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\n>>> chooser.chooseName('', self.folder.testoid)\n'FiveTraversableFolder'\n\n>>> chooser.chooseName('abc', self.folder.testoid)\n'abc'\n\n>>> chooser.chooseName('testoid', self.folder.testoid)\n'testoid-1'\n\n>>> try:\n...     chooser.chooseName('slash/slash', object())\n... except UserError as exc:\n...     print(exc.args)\n... else:\n...     print('UserError not raised.')\n('The id \"slash/slash\" contains characters illegal in URLs.',)\n```\n\n----------------------------------------\n\nTITLE: Conditional Statement in DTML Using Expressions\nDESCRIPTION: Shows how to use a Python expression in a DTML if tag to perform a simple comparison.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/DTML.rst#2025-04-22_snippet_15\n\nLANGUAGE: dtml\nCODE:\n```\n<dtml-if expr=\"foo < bar\">\n  Foo is less than bar.\n</dtml-if>\n```\n\n----------------------------------------\n\nTITLE: Using 'if' Tag in DTML for Conditional Logic\nDESCRIPTION: This snippet demonstrates the usage of the 'if' tag in DTML for conditional logic. It shows how to test conditions and execute different blocks based on those conditions.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/AppendixA.rst#2025-04-22_snippet_4\n\nLANGUAGE: DTML\nCODE:\n```\n<dtml-if ConditionVariable|expr=\"ConditionExpression\">\n[<dtml-elif ConditionVariable|expr=\"ConditionExpression\">]\n ...\n[<dtml-else>]\n</dtml-if>\n```\n\nLANGUAGE: DTML\nCODE:\n```\n<dtml-if snake>\n  The snake variable is true\n</dtml-if>\n```\n\nLANGUAGE: DTML\nCODE:\n```\n<dtml-if expr=\"num > 5\">\n  num is greater than five\n<dtml-elif expr=\"num < 5\">\n  num is less than five\n<dtml-else>\n  num must be five\n</dtml-if>\n```\n\n----------------------------------------\n\nTITLE: Using Exists Expressions for Conditional Display\nDESCRIPTION: Demonstrates checking if a path exists using the exists: expression prefix, which returns true if the path exists and false otherwise.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/AdvZPT.rst#2025-04-22_snippet_30\n\nLANGUAGE: TAL\nCODE:\n```\n<h4 tal:define=\"err request/form/errmsg | nothing\"\n    tal:condition=\"err\" \n    tal:content=\"err\">Error!</h4>\n```\n\n----------------------------------------\n\nTITLE: Accessing Session Data in Zope Python Script\nDESCRIPTION: This Python code snippet demonstrates how to access and manipulate session data using the REQUEST.SESSION object in a Zope Python Script. It shows setting and retrieving session values.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/Sessions.rst#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n## Script (Python) \"sessionTest\"\n##bind container=container\n##bind context=context\n##bind namespace=\n##bind script=script\n##bind subpath=traverse_subpath\n##parameters=\n##title=\n##\n# Example showing how to use sessions\n\n# Get the session data object\nsession = context.REQUEST.SESSION\n\n# Set a session value\nsession.set('color', 'blue')\n\n# Fetch some session values, use 'None' as the default\ncolor = session.get('color', None)\ncustomer = session.get('customer', None)\n\n# Remove a session value\nsession.delete('customer')\n\n# Test to see if a session value exists\nif session.has_key('repeated_value'):\n    session.set('repeated_value', session.get('repeated_value') + 1)\nelse:\n    session.set('repeated_value', 1)\n\n# Return a value from the script\nreturn \"The 'color' is %s, and this page \"\\\n       \"has been viewed %d times by this browser.\" % \\\n       (color, session.get('repeated_value'))\n```\n\n----------------------------------------\n\nTITLE: Creating a Resume Upload Form with File Attachment\nDESCRIPTION: This DTML method creates a form for uploading a resume file and selecting recipients from a list of potential employers. It uses checkboxes with the :list suffix to collect multiple selections.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/AdvDTML.rst#2025-04-22_snippet_29\n\nLANGUAGE: dtml\nCODE:\n```\n<dtml-var standard_html_header>\n\n<p>Send you resume to potential employers</p>\n\n<form method=post action=\"sendresume\" ENCTYPE=\"multipart/form-data\">\n<p>Resume file: <input type=\"file\" name=\"resume_file\"></p>\n<p>Send to:</p>\n<p>\n<input type=\"checkbox\" name=\"send_to:list\" value=\"jobs@yahoo.com\">\n  Yahoo<br>\n\n<input type=\"checkbox\" name=\"send_to:list\" value=\"jobs@microsoft.com\">\n  Microsoft<br>\n\n<input type=\"checkbox\" name=\"send_to:list\" value=\"jobs@mcdonalds.com\">\n  McDonalds</p>\n\n<input type=submit value=\"Send Resume\">\n</form>\n\n<dtml-var standard_html_footer>\n```\n\n----------------------------------------\n\nTITLE: Example SQL Output of dtml-sqltest with LIKE Operator (SQL)\nDESCRIPTION: This SQL snippet displays the resulting SQL code when the DTML tag `<dtml-sqltest name type=\"string\" op=\"like\">` is rendered with the variable 'name' set to 'Mc%'. It demonstrates the generation of a `LIKE` comparison.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/RelationalDatabases.rst#2025-04-22_snippet_12\n\nLANGUAGE: SQL\nCODE:\n```\nname like 'Mc%'\n```\n\n----------------------------------------\n\nTITLE: Implementing DTML Management Interface for Poll Editing in Zope\nDESCRIPTION: DTML template for creating a poll editing form that displays the current question and responses. The form includes Bootstrap styling and uses DTML tags to display and process poll data.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zdgbook/Products.rst#2025-04-22_snippet_19\n\nLANGUAGE: dtml\nCODE:\n```\n<dtml-var manage_page_header>\n<dtml-var manage_tabs>\n\n<p class=\"form-help\">\nThis form allows you to change the poll's question and\nresponses. <b>Changing a poll's question and responses\nwill reset the poll's vote tally.</b>.\n</p>\n\n<form action=\"editPoll\">\n<table>\n\n  <tr valign=\"top\">\n    <th class=\"form-label\">Question</th>\n    <td><input type=\"text\" name=\"question\" class=\"form-element\"\n    value=\"&dtml-getQuestion;\"></td>\n  </tr>\n\n  <tr valign=\"top\">\n    <th class=\"form-label\">Responses</th>\n    <td><textarea name=\"responses:lines\" cols=\"50\" rows=\"10\">\n    <dtml-in getResponses>\n    <dtml-var sequence-item html_quote>\n    </dtml-in>\n    </textarea>\n    </td>\n  </tr>\n\n  <tr>\n    <td></td>\n    <td><input type=\"submit\" value=\"Change\" class=\"form-element\"></td>\n  </tr>\n\n</table>\n</form>\n\n<dtml-var manage_page_header>\n```\n\n----------------------------------------\n\nTITLE: Creating a Simple Zope View in Python\nDESCRIPTION: Demonstrates how to create a simple Zope view class SimpleFolderView that inherits from BrowserView and implements a method 'eagle'.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/src/Products/Five/doc/manual.txt#2025-04-22_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom zope.publisher.browser import BrowserView\n\nclass SimpleFolderView(BrowserView):\n\n    def eagle(self):\n        \"\"\"Test\n        \"\"\"\n        return \"The eagle has landed: %s\" % self.context.keys()\n```\n\n----------------------------------------\n\nTITLE: Inserting a Variable in DTML\nDESCRIPTION: Demonstrates how to insert the value of a variable named 'getHippo' using DTML's basic tag syntax.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/DTML.rst#2025-04-22_snippet_12\n\nLANGUAGE: dtml\nCODE:\n```\n<dtml-var getHippo>\n```\n\n----------------------------------------\n\nTITLE: Zope Python Script for Form Processing\nDESCRIPTION: A Python script named 'form_action' that processes form input, accepting name and age parameters. It demonstrates parameter retrieval and simple conditional logic based on form inputs.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/ScriptingZope.rst#2025-04-22_snippet_16\n\nLANGUAGE: python\nCODE:\n```\n## Script (Python) \"form_action\"\n##parameters=name, age\n##\n\"Process form\"\nage=int(age)\nmessage= 'This hippo is called %s and is %d years old' % (name, age)\nif age < 18:\n    message += '\\n %s is not old enough to drive!' % name\nreturn message\n```\n\n----------------------------------------\n\nTITLE: Extending Interfaces in Zope\nDESCRIPTION: Demonstrates how to create a new interface that extends an existing one, adding additional functionality while inheriting the original interface's methods.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zdgbook/ComponentsAndInterfaces.rst#2025-04-22_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nclass ISmartHello(IHello):\n    \"\"\"A Hello object that remembers who it's greeted\"\"\"\n\n    def lastGreeted(self):\n        \"\"\"Returns the name of the last person greeted.\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Registering CSS Paths Subscriber in Zope ZCML\nDESCRIPTION: Shows how to register a subscriber for CSS paths in Zope using ZCML configuration.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/migrations/zope4/code.rst#2025-04-22_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<subscriber\n    provides=\"App.interfaces.ICSSPaths\"\n    factory=\".subscriber.css_paths\" />\n```\n\n----------------------------------------\n\nTITLE: Calling a Python Script with Arguments in DTML\nDESCRIPTION: Demonstrates how to call the 'getHippo' Script (Python) object with an argument using DTML expression syntax.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/DTML.rst#2025-04-22_snippet_14\n\nLANGUAGE: dtml\nCODE:\n```\n<dtml-var expr=\"getHippo('large net')\">\n```\n\n----------------------------------------\n\nTITLE: Registering event subscriber in configure.zcml (XML)\nDESCRIPTION: ZCML configuration to register the addedCoolDocument function as a subscriber for IObjectAddedEvent on ICoolDocument objects.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/src/OFS/event.txt#2025-04-22_snippet_5\n\nLANGUAGE: XML\nCODE:\n```\n<subscriber\n    for=\"Products.CoolProduct.interfaces.ICoolDocument\n         zope.lifecycleevent.interfaces.IObjectAddedEvent\"\n    handler=\"Products.CoolProduct.CoolDocument.addedCoolDocument\"\n    />\n```\n\n----------------------------------------\n\nTITLE: Displaying Manager Information in DTML Template\nDESCRIPTION: This DTML snippet demonstrates how to display an employee's manager information in a template. It checks if a manager exists, then uses the with-tag to access the manager's first and last name properties.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/RelationalDatabases.rst#2025-04-22_snippet_33\n\nLANGUAGE: html\nCODE:\n```\n<dtml-if manager>\n  <dtml-with manager>\n    <p> My manager is <dtml-var first> <dtml-var last>.</p>\n  </dtml-with>\n</dtml-if>\n```\n\n----------------------------------------\n\nTITLE: Defining a Zope Interface in Python\nDESCRIPTION: Demonstrates how to create a Zope interface named IElephant using zope.interface.Interface. The interface defines methods for an elephant object with descriptions of their purposes.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/src/Products/Five/doc/manual.txt#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom zope.interface import Interface\n\n# by convention, all interfaces are prefixed with ``I``\nclass IElephant(Interface):\n    \"\"\"An elephant is a big object that barely fits in the cupboard.\n    \"\"\"\n\n    def getAngerLevel():\n        \"\"\"Anger level, maximum of 100.\n\n        The longer the elephant has been in the cupboard, the angrier.\n        \"\"\"\n\n    def isInCupboard():\n        \"\"\"Returns true if the elephant is indeed in cupboard.\n        \"\"\"\n\n    def trunkSmash(target):\n        \"\"\"Smash the target with trunk.\n\n        The anger level determines the force of the hit.\n        \"\"\"\n\n    def trample(target):\n        \"\"\"Trample the target.\n        \n        The anger level determines the rate of flattening of the target.\n        \"\"\"\n```\n\n----------------------------------------\n\nTITLE: Creating an Access Rule Script in Python for Browser OS Detection\nDESCRIPTION: This Python script serves as an access rule that examines the user agent in the HTTP request to determine the operating system. It sets an 'OS' variable in the request that can be accessed by other components.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/ZopeServices.rst#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nuseragent = request.get('HTTP_USER_AGENT', '')\nif useragent.find('Windows') != -1:\n    request.set('OS', 'Windows')\nelif useragent.find('Linux') != -1:\n    request.set('OS', 'Linux')\nelse:\n    request.set('OS', 'Non-Windows, Non-Linux')\n```\n\n----------------------------------------\n\nTITLE: Referencing Functions with Nocall in TALES - HTML\nDESCRIPTION: Illustrates assigning a function reference to a template variable without invoking it using the nocall expression. Binds the 'join' variable to the string.join function in the template context. Requires TAL support and a Python module context. The output is not displayed in this snippet as it's for variable assignment.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/AppendixC.rst#2025-04-22_snippet_23\n\nLANGUAGE: html\nCODE:\n```\n<p tal:define=\"join nocall:modules/string/join\">\n```\n\n----------------------------------------\n\nTITLE: DTML Call Tag Usage\nDESCRIPTION: Demonstrates how to use the DTML call tag to execute methods without inserting results into output. Shows both variable name and expression-based calling patterns.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/AppendixA.rst#2025-04-22_snippet_0\n\nLANGUAGE: dtml\nCODE:\n```\n<dtml-call UpdateInfo>\n```\n\nLANGUAGE: dtml\nCODE:\n```\n<dtml-call expr=\"RESPONSE.setHeader('content-type', 'text/plain')\">\n```\n\n----------------------------------------\n\nTITLE: Truncating Sorted Catalog Results\nDESCRIPTION: Example showing how to limit the number of returned results using array slicing after applying sort parameters.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/SearchingZCatalog.rst#2025-04-22_snippet_22\n\nLANGUAGE: python\nCODE:\n```\nzcat=context.AnimalCatalog\nzcat({'sort_on':'latin_name',\n      'sort_order':'descending',\n      'sort_limit':20})[:20]\n```\n\n----------------------------------------\n\nTITLE: Creating a Template-Driven Table View for Zope Containers (Python)\nDESCRIPTION: Prepares a template for a 'contents' view, associates it with a view class using SimpleViewClass, and enables HTML generation from a container context. All required template files must exist and be writable. Leverages Zope's Product Five metaconfigure module for view construction.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/src/Products/Five/viewlet/README.txt#2025-04-22_snippet_12\n\nLANGUAGE: python\nCODE:\n```\n>>> contentsTemplate = os.path.join(temp_dir, 'contents.pt')\n>>> with open(contentsTemplate, 'w') as fd:\n...     _ = fd.write('''\n... <html>\n...   <body>\n...     <h1>Cotnents</h1>\n...     <div tal:content=\"structure provider:contents\" />\n...   </body>\n... </html>\n... ''')\n\n>>> from Products.Five.browser.metaconfigure import SimpleViewClass\n>>> Contents = SimpleViewClass(contentsTemplate, name='contents.html')\n\n```\n\n----------------------------------------\n\nTITLE: Querying a Zope KeywordIndex with Explicit 'AND' Operator using Records\nDESCRIPTION: This Python snippet illustrates an advanced ZCatalog query using a record (dictionary) to specify parameters for the 'categories' KeywordIndex. The 'query' key holds the keywords, and 'operator':'and' mandates that results must match *all* specified keywords ('big' and 'shiny').\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/SearchingZCatalog.rst#2025-04-22_snippet_15\n\nLANGUAGE: python\nCODE:\n```\n# big and shiny\nresults=ZCatalog(categories={'query':['big','shiny'], \n                                       'operator':'and'})\n```\n\n----------------------------------------\n\nTITLE: Generating Mirror List Using Python Script in Zope\nDESCRIPTION: This Script (Python) generates an HTML list of mirror servers. It iterates over the 'mirrors' property of the container and prints HTML links for each mirror.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/ZEO.rst#2025-04-22_snippet_7\n\nLANGUAGE: Python\nCODE:\n```\n## Script (Python) \"generate_mirror\"\n##bind container=container\n##bind context=context\n##bind namespace=\n##bind script=script\n##bind subpath=traverse_subpath\n##parameters=a, b\n##title=\n##\nprint \"<h2>Please choose from the following mirrors: <ul>\"\nfor mirror in container.mirrors:\n    print \"<li><a href=\\\"%s\\\">%s</a>\" % (mirror, mirror)\nreturn printed\n```\n\n----------------------------------------\n\nTITLE: Retrieving Interface Method Info\nDESCRIPTION: Demonstrates how to inspect a Method object from an Interface to get signature information and documentation.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zdgbook/ComponentsAndInterfaces.rst#2025-04-22_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n>>> m = list(IHello.namesAndDescriptions())[0][1]\n>>> m\n<zope.interface.interface.Method object at 0x7fc6875110f0>\n>>> m.getSignatureString()\n'(name)'\n>>> m.getSignatureInfo()\n{'positional': ('name',), 'required': ('name',), 'optional': {},\n 'varargs': None, 'kwargs': None}\n```\n\n----------------------------------------\n\nTITLE: Defining and Implementing a Simple Zope Interface in Python\nDESCRIPTION: Shows how to create a simple Zope interface IMyInterface and implement it in a class MyClass using the @implementer decorator.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/src/Products/Five/doc/manual.txt#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom zope.interface import Interface\n\nclass IMyInterface(Interface):\n    \"\"\"This is an interface.\n    \"\"\"\n    def someMethod():\n        \"\"\"This method does amazing stuff.\n        \"\"\"\n\nfrom zope.interface import implementer\nfrom interfaces import IMyInterface\n\n@implementer(IMyInterface)\nclass MyClass(object):\n\n    def someMethod(self):\n         return \"I am alive! Alive!\"\n```\n\n----------------------------------------\n\nTITLE: Variable Usage with Entity Syntax in DTML\nDESCRIPTION: Demonstrates using entity syntax to insert and HTML quote variables in anchor tags\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/AppendixA.rst#2025-04-22_snippet_35\n\nLANGUAGE: dtml\nCODE:\n```\n<a href=\"&dtml-link;\">Link</a>\n```\n\n----------------------------------------\n\nTITLE: Testing Basic HTTP Authentication - Python\nDESCRIPTION: Checks successful authorization with valid HTTP Basic Auth using base64-encoded credentials. The test elevates permissions for a user, sends a GET request with Basic Auth, and verifies a 200 OK response while updating a document property. Dependencies include correct user permissions in Zope and pre-set authentication data (`user_auth`).\nSOURCE: https://github.com/zopefoundation/zope/blob/master/src/Testing/ZopeTestCase/zopedoctest/FunctionalDocTest.txt#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n>>> from AccessControl.Permissions import manage_properties\n>>> self.setPermissions([manage_properties])\n\n>>> response = http(r\"\"\"\n... GET /test_folder_1_/index_html/change_title?title=Foo HTTP/1.1\n... Authorization: Basic %s\n... \"\"\" % user_auth, handle_errors=False)\n\n>>> response.status\n200\n\n>>> self.folder.index_html.title_or_id()\n'Foo'\n```\n\n----------------------------------------\n\nTITLE: Aborting a Transaction in Zope (Python)\nDESCRIPTION: Demonstrates how to intentionally abort a transaction by raising an exception. This causes all changes made in the transaction to be discarded.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zdgbook/ZODBPersistentComponents.rst#2025-04-22_snippet_6\n\nLANGUAGE: Python\nCODE:\n```\nraise SandwichError('Not enough peanut butter.')\n```\n\n----------------------------------------\n\nTITLE: Systemd Configuration for plone.recipe.zope2instance\nDESCRIPTION: Example systemd service configuration for running Zope as a daemon using the script generated by plone.recipe.zope2instance.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/operation.rst#2025-04-22_snippet_10\n\nLANGUAGE: cfg\nCODE:\n```\n[Unit]\nDescription=Zope client zopeinstance\nAfter=network.target\n\n[Service]\nType=forking\nUser=zope\nExecStart=/opt/zopeinstance/bin/zopeinstance start\n```\n\n----------------------------------------\n\nTITLE: Displaying Mirror List Using TAL in Zope\nDESCRIPTION: This code snippet uses TAL (Template Attribute Language) to display a list of mirror servers for users to choose from. It iterates over a 'mirrors' property and generates HTML links for each mirror.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/ZEO.rst#2025-04-22_snippet_6\n\nLANGUAGE: HTML\nCODE:\n```\n<h2>Please choose from the following mirrors:\n<ul>\n  <li tal:repeat=\"mirror here/mirrors\">\n    <a href=\"\"\n       tal:attributes=\"href mirror\"\n       tal:content=\"mirror\">\n        my.mirror.site\n    </a>\n  </li>\n</ul>\n```\n\n----------------------------------------\n\nTITLE: Testing Cookie Read via HTTP Request - Python\nDESCRIPTION: Ensures the server can read cookies sent by the client in the HTTP request. The test sends a GET request with multiple cookies in the header and checks for their correct parsing and display in the body. Standard Zope server and HTTP cookie parsing are required for this test.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/src/Testing/ZopeTestCase/zopedoctest/FunctionalDocTest.txt#2025-04-22_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n>>> response = http(r\"\"\"\n... GET /test_folder_1_/index_html/show_cookies HTTP/1.1\n... Cookie: foo=bar; baz=\\\"oki doki\\\"\n... \"\"\", handle_errors=False)\n\n>>> response.status\n200\n\n>>> b'foo: bar' in response.getBody()\nTrue\n\n>>> b'baz: oki doki' in response.getBody()\nTrue\n```\n\n----------------------------------------\n\nTITLE: Conditional Rendering Based on Variable Existence (Name Syntax) in DTML\nDESCRIPTION: Demonstrates the `dtml-if` tag using the name syntax. The condition `<dtml-if monkey_house>` is true only if a variable named 'monkey_house' exists *and* its value is considered true (not 0, None, empty sequence, or empty string).\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/DTML.rst#2025-04-22_snippet_29\n\nLANGUAGE: dtml\nCODE:\n```\n<dtml-if monkey_house>\n  <p>There <em>is</em> a monkey house, Mom!</p>\n</dtml-if>  \n```\n\n----------------------------------------\n\nTITLE: Setting Default Skin in Zope\nDESCRIPTION: This snippet sets TestSkin as the default skin using ZCML configuration. It allows accessing the view without explicitly specifying the skin.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/src/Products/Five/browser/tests/skin.txt#2025-04-22_snippet_4\n\nLANGUAGE: XML\nCODE:\n```\n<browser:defaultSkin\n    xmlns:browser=\"http://namespaces.zope.org/browser\"\n    name=\"TestSkin\" />\n```\n\n----------------------------------------\n\nTITLE: Implementing a Persistent Counter Class in Zope (Python)\nDESCRIPTION: Defines a simple persistent Counter class with a hit method to increment the count. This class is susceptible to conflict errors in high-concurrency scenarios.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zdgbook/ZODBPersistentComponents.rst#2025-04-22_snippet_9\n\nLANGUAGE: Python\nCODE:\n```\nclass Counter(Persistent):\n\n    self.count = 0\n\n    def hit(self):\n        self.count = self.count + 1\n```\n\n----------------------------------------\n\nTITLE: Implementing Cookie Check Logic in Python Script (Zope)\nDESCRIPTION: A Python Script named 'hasVisitedZoo' for use within Zope. It checks the incoming request for a cookie named 'zooVisitCookie'. If the cookie exists, it returns true (1); otherwise, it sets the cookie on the response and returns false (0). This script provides the logic for the `hasVisitedZoo` variable used in a related DTML example.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/DTML.rst#2025-04-22_snippet_34\n\nLANGUAGE: python\nCODE:\n```\n## Script(Python) \"hasVisitedZoo\"\n##\n\"\"\"\nReturns true if the user has previously visited\nthe Zoo. Uses cookies to keep track of zoo visits.\n\"\"\"\nrequest = context.REQUEST\nresponse = request.RESPONSE\nif request.has_key('zooVisitCookie'):\n    return 1\nelse:\n    response.setCookie('zooVisitCookie', '1')\n    return 0\n```\n\n----------------------------------------\n\nTITLE: Workaround for Checkbox Issue in Zope 'records' Using Hidden Fields (HTML)\nDESCRIPTION: Presents an HTML form demonstrating a workaround for a known Zope issue where checkboxes used as the first field within a ':records' group might lead to incorrect data association due to browsers omitting unchecked boxes from the request. The workaround involves preceding the checkbox with a hidden input field (e.g., 'index.dummy:records') within each record group to act as an anchor.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zdgbook/ObjectPublishing.rst#2025-04-22_snippet_16\n\nLANGUAGE: html\nCODE:\n```\n<form action=\"records_parse\">\n    <p>\n    <input type=\"hidden\" name=\"index.dummy:records\" value=\"dummy\" />\n    <input type=\"checkbox\" name=\"index.enabled:records\" value=\"1\" checked=\"checked\" />\n    <input type=\"text\" name=\"index.name:records\" value=\"index 1\" />\n    <p>\n    <input type=\"hidden\" name=\"index.dummy:records\" value=\"dummy\" />\n    <input type=\"checkbox\" name=\"index.enabled:records\" value=\"2\" />\n    <input type=\"text\" name=\"index.name:records\" value=\"index 2\" />\n    <p>\n    <input type=\"submit\" name=\"submit\" value=\"send\" />\n</form>\n```\n\n----------------------------------------\n\nTITLE: Combining Not and Exists Expressions\nDESCRIPTION: Demonstrates combining not: and exists: expression prefixes to check for the absence of a path, useful for conditional displays based on missing data.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/AdvZPT.rst#2025-04-22_snippet_32\n\nLANGUAGE: TAL\nCODE:\n```\n<p tal:condition=\"not:exists:request/form/number\">Please enter\na number between 0 and 5</p>\n```\n\n----------------------------------------\n\nTITLE: Displaying the Current User Name in Zope Page Template (TAL/XML)\nDESCRIPTION: This snippet uses TAL (Template Attribute Language) in a Zope Page Template to display the current authenticated user's username by calling user/getUserName. It is used to personalize pages. The user object is expected to be present in the template context. No additional dependencies are required; the standard Zope Page Template environment provides user and getUserName.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/Security.rst#2025-04-22_snippet_5\n\nLANGUAGE: xml\nCODE:\n```\n<p tal:content=\\\"user/getUserName\\\">username</p>\n```\n\n----------------------------------------\n\nTITLE: Defining a Sidebar Macro in Zope Page Templates\nDESCRIPTION: This snippet demonstrates how to define a more complex macro for a sidebar, which could be reused across multiple pages in a Zope site.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/ZPT.rst#2025-04-22_snippet_20\n\nLANGUAGE: html\nCODE:\n```\n<div metal:define-macro=\"sidebar\">\n  Links\n  <ul>\n    <li><a href=\"/\">Home</a></li>\n    <li><a href=\"/products\">Products</a></li>\n    <li><a href=\"/support\">Support</a></li>\n    <li><a href=\"/contact\">Contact Us</a></li>\n  </ul>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Calculating Voting Percentage with Zope Python Script\nDESCRIPTION: A Zope Python Script named \"getPercentFor\" that calculates the percentage of votes for a given response `index`. It assumes it runs in the context of a poll object (accessible via `context` through acquisition) and calls the poll's `getVotesFor` and `getTotalVotes` methods. It returns the calculated percentage as a float.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zdgbook/Products.rst#2025-04-22_snippet_13\n\nLANGUAGE: python\nCODE:\n```\n## Script (Python) \"getPercentFor\"\n##parameters=index\n##\n\"\"\"Returns the percentage of the vote given a response index. Note,\nthis script should be bound a poll by acquisition context.\"\"\"\npoll = context\nreturn float(poll.getVotesFor(index)) / poll.getTotalVotes()\n```\n\n----------------------------------------\n\nTITLE: User Name Capitalization\nDESCRIPTION: String processing to capitalize a user's name using Python expression\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/AppendixC.rst#2025-04-22_snippet_31\n\nLANGUAGE: html\nCODE:\n```\n<p tal:content=\"python:user.getUserName().capitalize()\">\n    User Name\n  </p>\n```\n\n----------------------------------------\n\nTITLE: Registering Help Files for Zope Product\nDESCRIPTION: Initialization code that registers help files for a Zope product. The registerHelp method automatically locates and processes help files in the product's help directory.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zdgbook/Products.rst#2025-04-22_snippet_25\n\nLANGUAGE: python\nCODE:\n```\ndef initialize(registrar):\n    ...\n    registrar.registerHelp()\n```\n\n----------------------------------------\n\nTITLE: Handling Errors with tal:on-error in Zope TAL\nDESCRIPTION: Demonstrates error handling using tal:on-error directive in Zope templates. Includes examples of simple error messages, removing elements with errors, and calling error-handling scripts.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/AppendixC.rst#2025-04-22_snippet_11\n\nLANGUAGE: html\nCODE:\n```\n<b tal:on-error=\"string: Username is not defined!\" \n   tal:content=\"context/getUsername\">Ishmael</b>\n```\n\nLANGUAGE: html\nCODE:\n```\n<b tal:on-error=\"nothing\"\n   tal:content=\"context/getUsername\">Ishmael</b>\n```\n\nLANGUAGE: html\nCODE:\n```\n<div tal:on-error=\"structure context/errorScript\">\n...\n</div>\n```\n\nLANGUAGE: python\nCODE:\n```\n## Script (Python) \"errHandler\"\n##bind namespace=_\n##\nerror=_['error']\nif error.type==ZeroDivisionError:\n    return \"<p>Can't divide by zero.</p>\"\nelse:\n    return \"\"\"<p>An error ocurred.</p>\n    <p>Error type: %s</p>\n    <p>Error value: %s</p>\"\"\" % (error.type, error.value)\n```\n\n----------------------------------------\n\nTITLE: Defining Domain Objects and Sizing Adapters for Zope File Contents (Python)\nDESCRIPTION: Defines custom domain interfaces and implementations for File objects, implements and registers a size adapter for display and sorting, and configures a tailored container for containing files. These classes allow subsequent viewlets and managers to operate over structured, type-aware data. Zope.interface and zope.component are required.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/src/Products/Five/viewlet/README.txt#2025-04-22_snippet_11\n\nLANGUAGE: python\nCODE:\n```\n>>> class IFile(zope.interface.Interface):\n...     data = zope.interface.Attribute('Data of file.')\n\n>>> @zope.interface.implementer(IFile)\n... class File(SimpleItem.SimpleItem):\n...     def __init__(self, data=''):\n...         self.__name__ = ''\n...         self.data = data\n\n>>> from zope import size\n>>> @zope.interface.implementer(size.interfaces.ISized)\n... @zope.component.adapter(IFile)\n... class FileSized(object):\n...\n...     def __init__(self, file):\n...         self.file = file\n...\n...     def sizeForSorting(self):\n...         return 'byte', len(self.file.data)\n...\n...     def sizeForDisplay(self):\n...         return '%i bytes' %len(self.file.data)\n\n>>> zope.component.provideAdapter(FileSized)\n\n>>> class Container(Folder.Folder):\n...     def __setitem__(self, name, value):\n...         self._setObject(name, value)\n...         value.__name__ = name\n\n>>> container = Container()\n>>> obj_id = self.folder._setObject('container', container)\n>>> container = self.folder[obj_id]\n>>> container['mypage.html'] = File('<html><body>Hello World!</body></html>')\n>>> container['data.xml'] = File('<message>Hello World!</message>')\n>>> container['test.txt'] = File('Hello World!')\n\n```\n\n----------------------------------------\n\nTITLE: Custom ZODB Configuration in Python\nDESCRIPTION: Python code for customizing the number of database connections in Zope by configuring ZODB FileStorage settings including pool size and cache size.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/MaintainingZope.rst#2025-04-22_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nimport ZODB.FileStorage\nimport ZODB.DB\n\nfilename = os.path.join(INSTANCE_HOME, 'var', 'Data.fs')\nStorage = ZODB.FileStorage.FileStorage(filename)\nDB = ZODB.DB(Storage, pool_size=25, cache_size=2000)\n```\n\n----------------------------------------\n\nTITLE: Simulating HTTP Requests in Zope Unit Tests with Python\nDESCRIPTION: This code shows how to use the ZPublisher.Zope function to simulate HTTP requests in Zope unit tests, allowing testing of methods that expect a request object.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zdgbook/TestingAndDebugging.rst#2025-04-22_snippet_11\n\nLANGUAGE: Python\nCODE:\n```\nimport ZPublisher\n\nclass MyTest(unittest.TestCase):\n    ...\n\n    def testWebRequest(self):\n        ZPublisher.Zope('/a/url/representing/a/method?with=a&couple=arguments',\n                        u='username:password',\n                        s=1,\n                        e={'some':'environment', 'variable':'settings'})\n```\n\n----------------------------------------\n\nTITLE: Running zodbupdate for ZODB conversion to Python 3\nDESCRIPTION: Command to run zodbupdate for converting the ZODB from Python 2 to Python 3 format, including packing and encoding specification.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/migrations/zope4/zodb.rst#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nbin/zodbupdate --pack -f var/filestorage/Data.fs --convert-py3 --encoding utf-8 --encoding-fallback latin1\n```\n\n----------------------------------------\n\nTITLE: Handling Evolved Class Attributes in Python\nDESCRIPTION: Shows how to handle new attributes in evolved Zope product classes to maintain backwards compatibility with older instances. It demonstrates setting default values and checking for upgrades.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zdgbook/Products.rst#2025-04-22_snippet_31\n\nLANGUAGE: Python\nCODE:\n```\nclass Sandwich(...):\n\n    improved_spam = None\n    ...\n\n    def assembleSandwichMeats(self):\n        ...\n        # test for old sandwich instances\n        if self.improved_spam is None:\n            self.updateToNewSpam()\n        ...\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic HTML Tree with DTML Tree Tag\nDESCRIPTION: This code demonstrates the basic usage of the DTML tree tag to create a hierarchical display of folders and subfolders. The tree tag automatically queries objects to find their sub-objects and displays the results as a tree structure.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/AdvDTML.rst#2025-04-22_snippet_24\n\nLANGUAGE: dtml\nCODE:\n```\n<dtml-var standard_html_header>\n\n<dtml-tree>\n\n  <dtml-var getId>\n\n</dtml-tree>\n\n<dtml-var standard_html_footer>\n```\n\n----------------------------------------\n\nTITLE: Running All Tests for Zope Release Using Tox\nDESCRIPTION: Executes all tests for Zope using tox in parallel mode. This ensures that the release candidate passes all tests before being published.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/maintenance.rst#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ bin/tox -pall\n```\n\n----------------------------------------\n\nTITLE: Thumbnail Display Template in HTML/DTML\nDESCRIPTION: DTML template for displaying thumbnails with links to original images and update functionality.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/ScriptingZope.rst#2025-04-22_snippet_11\n\nLANGUAGE: html\nCODE:\n```\n<dtml-var standard_html_header>\n\n<dtml-if updateThumbnails>\n  <dtml-call makeThumbnails>\n</dtml-if>\n\n<h2>Thumbnails</h2>\n\n<table><tr valign=\"top\">\n\n<dtml-in expr=\"objectValues('Image')\">\n  <dtml-if original_id>\n    <td>\n      <a href=\"&dtml-original_id;\"><dtml-var sequence-item></a>\n      <br />\n      <dtml-var original_id>\n    </td> \n  </dtml-if>\n</dtml-in>\n\n</tr></table>\n\n<form>\n<input type=\"submit\" name=\"updateThumbnails\"\n       value=\"Update Thumbnails\" />\n</form>\n\n<dtml-var standard_html_footer>\n```\n\n----------------------------------------\n\nTITLE: Implementing Add Function for Zope Poll Product in Python\nDESCRIPTION: This Python function `addFunction` serves as the target for the add form defined in `addForm`. It receives a `dispatcher` object (a `FactoryDispatcher`), and the form data (`id`, `question`, `responses`). It then creates a `PollProduct` instance and uses the dispatcher's `Destination()._setObject()` method to add the new poll object to the target Zope folder. Input validation should ideally be added.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zdgbook/Products.rst#2025-04-22_snippet_12\n\nLANGUAGE: python\nCODE:\n```\ndef addFunction(dispatcher, id, question, responses):\n    \"\"\"Create a new poll and add it to myself\n    \"\"\"\n    p = PollProduct(id, question, responses)\n    dispatcher.Destination()._setObject(id, p)\n```\n\n----------------------------------------\n\nTITLE: HTML Form with Record Conversion\nDESCRIPTION: A form that demonstrates the ':record' converter to group form inputs into a structured object with attributes, creating a person record with fname, lname and age properties.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/ScriptingZope.rst#2025-04-22_snippet_19\n\nLANGUAGE: html\nCODE:\n```\n<form action=\"processPerson\">\n\n  First Name <input type=\"text\" name=\"person.fname:record\" /><br />\n  Last Name <input type=\"text\" name=\"person.lname:record\" /><br />\n  Age <input type=\"text\" name=\"person.age:record:int\" /><br />\n\n  <input type=\"submit\" />\n</form>\n```\n\n----------------------------------------\n\nTITLE: Adding Manager User to Existing Zope Instance\nDESCRIPTION: This snippet shows how to add a Manager user to an existing Zope instance using the command line interface.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/operation.rst#2025-04-22_snippet_15\n\nLANGUAGE: console\nCODE:\n```\n$ bin/zopeinstance adduser user password\nCreated user: user\n```\n\n----------------------------------------\n\nTITLE: Iterating Over Key-Value Tuples with Sequence Keys - DTML\nDESCRIPTION: Shows how to loop through a sequence of '(key, value)' tuples using the DTML 'in' tag and access both the key and value within the loop. Expects that 'objectItems' provides pairs suitable for this context; prints out the id (key) and corresponding title for each tuple.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/AppendixA.rst#2025-04-22_snippet_8\n\nLANGUAGE: dtml\nCODE:\n```\n<dtml-in objectItems>\n  id: <dtml-var sequence-key>, title: <dtml-var title><br>\n</dtml-in>\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic HTML Page Template in Zope\nDESCRIPTION: This snippet demonstrates the basic structure of a Zope Page Template using HTML. It creates a simple webpage with a heading.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/BasicObject.rst#2025-04-22_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<html>\n  <body>\n    <h1>This is my first page template!</h1>\n  </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Quick Invocation of Input Processing in Template with Unused Variable Binding - XML\nDESCRIPTION: This snippet invokes the context/processInputs method from a Zope Page Template, binding its result to a variable ('unused') solely to trigger side effects, and omits the containing tag from the final output. This method is suitable for simple, stateless form handling where error feedback is not required and the processing method does not return displayable content.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/AdvZPT.rst#2025-04-22_snippet_22\n\nLANGUAGE: xml\nCODE:\n```\n<span tal:define=\"unused context/processInputs\" \n      tal:omit-tag=\"\"/>\n```\n\n----------------------------------------\n\nTITLE: Advanced Poll Edit Method with Tab Highlighting\nDESCRIPTION: Further enhanced editPoll method that adds the management_view parameter to ensure the correct tab is highlighted when returning to the form after processing.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zdgbook/Products.rst#2025-04-22_snippet_23\n\nLANGUAGE: python\nCODE:\n```\ndef editPoll(self, question, responses, REQUEST=None):\n    \"\"\"\n    Changes the question and responses.\n    \"\"\"\n    self._question = question\n    self._responses = responses\n    self._votes = {}\n    for i in range(len(responses)):\n        self._votes[i] = 0\n    if REQUEST is not None:\n        return self.editPollForm(REQUEST,\n            management_view='Edit',\n            manage_tabs_message='Poll question and responses changed.')\n```\n\n----------------------------------------\n\nTITLE: Creating and Storing Persistent Employee Objects in ZODB using Python\nDESCRIPTION: This code demonstrates how to create Employee objects, set their names, store them in the ZODB root object, and commit the transaction. It shows practical usage of persistent objects.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zdgbook/ZODBPersistentComponents.rst#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfor name in ['Bob', 'Mary', 'Joe']:\n    employee = Employee()\n    employee.setName(name)\n    root['employees'].append(employee)\n\nget_transaction().commit()\n```\n\n----------------------------------------\n\nTITLE: Python Script for Custom Error Handling in Zope Templates\nDESCRIPTION: A Python script example for custom error handling, demonstrating how to access and process error information.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/AdvZPT.rst#2025-04-22_snippet_13\n\nLANGUAGE: Python\nCODE:\n```\n## Script (Python) \"handleError\"\n##bind namespace=_\n##\nerror=_['error']\nif error.type==ZeroDivisionError:\n    return \"<p>Can't divide by zero.</p>\"\nelse:\n    return \"\"\"<p>An error occurred.</p>\n              <p>Error type: %s</p>\n              <p>Error value: %s</p>\"\"\" % (error.type,\n                                           error.value)\n```\n\n----------------------------------------\n\nTITLE: Customizing Viewlet Manager in Zope\nDESCRIPTION: Demonstrates how to create a custom viewlet manager class that filters and sorts viewlets based on a global list.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/src/Products/Five/viewlet/README.txt#2025-04-22_snippet_6\n\nLANGUAGE: Python\nCODE:\n```\nshown = ['weather', 'sport']\n\nclass ListViewletManager(object):\n\n    def filter(self, viewlets):\n        viewlets = super(ListViewletManager, self).filter(viewlets)\n        return [(name, viewlet)\n                for name, viewlet in viewlets\n                if name in shown]\n\n    def sort(self, viewlets):\n        viewlets = dict(viewlets)\n        return [(name, viewlets[name]) for name in shown]\n\nLeftColumn = manager.ViewletManager(\n    'left', ILeftColumn, bases=(ListViewletManager,),\n    template=leftColTemplate)\n```\n\n----------------------------------------\n\nTITLE: Displaying a Dynamic File Library in Zope Template\nDESCRIPTION: This Zope Page Template snippet uses the macro from z_zoo.pt and defines a table to display the file library items generated by the Python script. It's the start of a dynamic file listing.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/SimpleExamples.rst#2025-04-22_snippet_10\n\nLANGUAGE: HTML\nCODE:\n```\n<metal:macro metal:use-macro=\"context/z_zoo.pt/macros/page\">\n<metal:slot metal:fill-slot=\"content\">\n\n  <table>\n    <tr>\n      <th width=\"300\">File</th>\n      <th>Last Modified</th>\n    </tr>\n    <tr>\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Interface in Zope\nDESCRIPTION: Shows how to create a simple interface by subclassing from zope.interface.Interface. The interface describes a hello method without implementing actual behavior.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zdgbook/ComponentsAndInterfaces.rst#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom zope.interface import Interface\n\nclass IHello(Interface):\n\n    def hello(name):\n        \"\"\"Say hello to the world\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Default Content with TAL Content\nDESCRIPTION: Examples of using the 'default' expression to maintain fallback content in templates\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/AdvZPT.rst#2025-04-22_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<p tal:content=\"default\">Spam</p>\n```\n\n----------------------------------------\n\nTITLE: Testing ZPT-based Browser Pages in Zope\nDESCRIPTION: This snippet tests various aspects of ZPT-based browser pages, including context access, macro usage, and TALES traversal.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/src/Products/Five/browser/tests/pages.txt#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nview = self.folder.unrestrictedTraverse('testoid/flamingo.html')\nprint(view())\n\nview = self.folder.unrestrictedTraverse('testoid/seagull.html')\nprint(view())\n\nview = self.folder.unrestrictedTraverse('testoid/condor.html')\nprint(view())\n\nview = self.folder.unrestrictedTraverse('testoid/ostrich.html')\nprint(view())\n\nview = self.folder.unrestrictedTraverse('testoid/tales_traversal.html')\nprint(view())\n```\n\n----------------------------------------\n\nTITLE: Sending Email with the DTML Sendmail Tag\nDESCRIPTION: This example shows how to use the sendmail tag to format and send an email message. The tag supports dynamic content generation using DTML variables for recipient and sender addresses.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/AdvDTML.rst#2025-04-22_snippet_28\n\nLANGUAGE: dtml\nCODE:\n```\n<dtml-sendmail>\nTo: <dtml-var recipient>\nFrom: <dtml-var sender>\nSubject: Make Money Fast!!!!\n\nTake advantage of our exciting offer now! Using our exclusive method\nyou can build unimaginable wealth very quickly. Act now!\n</dtml-sendmail>\n```\n\n----------------------------------------\n\nTITLE: Illustrating Conflicting Default Role Declarations in Zope Security (Python)\nDESCRIPTION: Defines a `Foo` class inheriting from `SimpleItem`. It demonstrates an error scenario where `setPermissionDefault` is called twice for the same permission ('View foos') with different roles ('Manager' and 'Anonymous'), which leads to a conflict. The Zope security machinery accepts the first declaration and logs an error for subsequent conflicting ones.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zdgbook/Security.rst#2025-04-22_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nclass Foo(SimpleItem):\n    security = ClassSecurityInfo()\n\n    meta_type = 'Foo'\n\n    @security.protected('View foos')\n    def index_html(self):\n        \"\"\" \"\"\"\n        return '<html><body>hi!</body></html>'\n\n    security.setPermissionDefault('View foos', ('Manager',))\n\n    security.setPermissionDefault('View foos', ('Anonymous',))\n    # whoops, conflicting permission defaults!\n```\n\n----------------------------------------\n\nTITLE: Adding Help Button to Zope Management Interface\nDESCRIPTION: DTML code for adding a help button to a management screen. The HelpButton method draws a button linked to the specified help topic.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zdgbook/Products.rst#2025-04-22_snippet_28\n\nLANGUAGE: dtml\nCODE:\n```\n<dtml-var \"HelpSys.HelpButton('productId', 'topicId')\">\n```\n\n----------------------------------------\n\nTITLE: Combining Custom and Inherited Management Views in Zope (Python)\nDESCRIPTION: This example demonstrates how to define the `manage_options` for a Zope product class (`PollProduct`) by combining custom view definitions (like 'Edit' and 'Options') with standard views inherited from base classes (`RoleManager`, `Item`). This is achieved by concatenating the custom tuple with the `manage_options` attributes of the base classes using the '+' operator.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zdgbook/Products.rst#2025-04-22_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nclass PollProduct(..., Item):\n    ...\n\n    manage_options=(\n        {'label' : 'Edit', 'action' : 'editMethod'},\n        {'label' : 'Options', 'action' : 'optionsMethod'},\n        ) + RoleManager.manage_options + Item.manage_options\n```\n\n----------------------------------------\n\nTITLE: HTML Form with List and Date Type Conversions\nDESCRIPTION: A form that demonstrates combined Zope converters, using ':list:date' to convert checkbox inputs to a list of DateTime objects.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/ScriptingZope.rst#2025-04-22_snippet_18\n\nLANGUAGE: html\nCODE:\n```\n<form action=\"processTimes\"> \n\n  <p>I would prefer not to be disturbed at the following\n  times:</p>\n\n  <input type=\"checkbox\" name=\"disturb_times:list:date\"\n  value=\"12:00 AM\" /> Midnight<br />\n\n  <input type=\"checkbox\" name=\"disturb_times:list:date\"\n  value=\"01:00 AM\" /> 1:00 AM<br />\n\n  <input type=\"checkbox\" name=\"disturb_times:list:date\"\n  value=\"02:00 AM\" /> 2:00 AM<br />\n\n  <input type=\"checkbox\" name=\"disturb_times:list:date\"\n  value=\"03:00 AM\" /> 3:00 AM<br />\n\n  <input type=\"checkbox\" name=\"disturb_times:list:date\"\n  value=\"04:00 AM\" /> 4:00 AM<br />\n\n  <input type=\"submit\" />\n</form>\n```\n\n----------------------------------------\n\nTITLE: Initializing Zope Product Class\nDESCRIPTION: Example of initializing a Zope product class using InitializeClass to set up security declarations.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zdgbook/Products.rst#2025-04-22_snippet_8\n\nLANGUAGE: Python\nCODE:\n```\nfrom Globals import InitializeClass\n\nclass PollProduct(...):\n   ...\n\nInitializeClass(PollProduct)\n```\n\n----------------------------------------\n\nTITLE: Using dtml-sqlvar for INSERT Statements with Acquired Arguments (DTML)\nDESCRIPTION: This DTML/SQL template defines an `INSERT` statement within a Z SQL Method. It uses `dtml-sqlvar` tags to insert values passed as arguments or acquired from the Zope context (like folder properties). This example highlights how `department_id` could be acquired automatically.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/RelationalDatabases.rst#2025-04-22_snippet_23\n\nLANGUAGE: DTML\nCODE:\n```\nINSERT INTO requisitions \n  (\n    department_id, description, quantity, unit_cost\n  )\nVALUES\n  (\n    <dtml-sqlvar department_id type=\"string\">,\n    <dtml-sqlvar description type=\"string\">,\n    <dtml-sqlvar quantity type=\"int\">,\n    <dtml-sqlvar unit_cost type=\"float\">\n  )\n```\n\n----------------------------------------\n\nTITLE: Omitting Tags with tal:omit-tag in Zope Templates\nDESCRIPTION: Shows how to use tal:omit-tag to remove opening and closing tags while preserving content, including conditional tag omission.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/AdvZPT.rst#2025-04-22_snippet_11\n\nLANGUAGE: HTML\nCODE:\n```\n<b tal:omit-tag=\"\"><i>this</i> stays</b>\n```\n\nLANGUAGE: HTML\nCODE:\n```\nFriends: <span tal:repeat=\"friend friends\">\n  <b tal:omit-tag=\"not:friend/best\"\n     tal:content=\"friend/name\">Fred</b>\n</span>\n```\n\n----------------------------------------\n\nTITLE: Handling Missing Variables in DTML\nDESCRIPTION: This snippet demonstrates how to handle missing variables in DTML using the 'missing' attribute. It provides a default value when the variable is not found.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/DTML.rst#2025-04-22_snippet_10\n\nLANGUAGE: HTML\nCODE:\n```\n<h1>Thanks <dtml-var user_name missing=\"Anonymous User\"></h1>\n```\n\n----------------------------------------\n\nTITLE: Defining Management Options with Help in Zope\nDESCRIPTION: Python code that defines management interface options with associated help topics. The help tuple contains the product ID and topic ID for context-sensitive help.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zdgbook/Products.rst#2025-04-22_snippet_27\n\nLANGUAGE: python\nCODE:\n```\nmanage_options = (\n    {'label': 'Edit',\n     'action': 'editMethod',\n     'help': ('productId','topicId')},\n    )\n```\n\n----------------------------------------\n\nTITLE: HTML Form with Records Conversion for List of Records\nDESCRIPTION: A form that demonstrates the ':records' converter to create a list of record objects, useful for collecting multiple sets of related data in a single form submission.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/ScriptingZope.rst#2025-04-22_snippet_21\n\nLANGUAGE: html\nCODE:\n```\n<form action=\"processPeople\">\n\n  <p>Please, enter information about one or more of your next of\n  kin.</p>\n\n  <p>\n    First Name <input type=\"text\" name=\"people.fname:records\" />\n    Last Name <input type=\"text\" name=\"people.lname:records\" />\n  </p>\n\n  <p>\n    First Name <input type=\"text\" name=\"people.fname:records\" />\n    Last Name <input type=\"text\" name=\"people.lname:records\" />\n  </p>\n\n  <p>\n    First Name <input type=\"text\" name=\"people.fname:records\" />\n    Last Name <input type=\"text\" name=\"people.lname:records\" />\n  </p>\n\n  <input type=\"submit\" />\n</form>\n```\n\n----------------------------------------\n\nTITLE: Creating an HTML Form for Record-Based ZCatalog KeywordIndex Queries\nDESCRIPTION: This HTML snippet shows how to construct a form that submits a record-style query to a Zope ZCatalog. The input named 'content.query:record' captures search terms, and the hidden input 'content.operator:record' specifies the 'and' operator. This targets a KeywordIndex named 'content' and searches for results matching all terms when submitted to the 'Report' action.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/SearchingZCatalog.rst#2025-04-22_snippet_19\n\nLANGUAGE: html\nCODE:\n```\n<form action=\"Report\" method=\"get\">\n<table>\n<tr><th>Search Terms (must match all terms)</th>\n    <td><input name=\"content.query:record\" width=30 value=\"\"></td></tr>\n    <input type=\"hidden\" name=\"content.operator:record\" value=\"and\">\n<tr><td colspan=2 align=center>\n<input type=\"SUBMIT\" value=\"Submit Query\">\n</td></tr>\n</table>\n</form>\n```\n\n----------------------------------------\n\nTITLE: Registering a viewlet manager with a custom class\nDESCRIPTION: Shows how to register a viewlet manager with a custom class that implements custom sorting behavior.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/src/Products/Five/viewlet/directives.txt#2025-04-22_snippet_4\n\nLANGUAGE: XML\nCODE:\n```\n<configure xmlns=\"http://namespaces.zope.org/browser\" i18n_domain=\"zope\">\n  <viewletManager\n      name=\"leftcolumn\"\n      permission=\"zope.Public\"\n      provides=\"Products.Five.viewlet.tests.ILeftColumn\"\n      template=\"%s\"\n      class=\"Products.Five.viewlet.tests.WeightBasedSorting\"\n      />\n</configure>\n```\n\n----------------------------------------\n\nTITLE: Temporary Storage ZODB Configuration for Sessions\nDESCRIPTION: Configuration example for using a temporary storage database for session data in Zope. This setup is suitable for development environments or low traffic sites.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/Sessions.rst#2025-04-22_snippet_20\n\nLANGUAGE: xml\nCODE:\n```\n<zodb_db temporary>\n    # Temporary storage database (for sessions)\n    <temporarystorage>\n      name temporary storage for sessioning\n    </temporarystorage>\n    mount-point /temp_folder\n    container-class Products.TemporaryFolder.TemporaryContainer\n</zodb_db>\n```\n\n----------------------------------------\n\nTITLE: Defining a Publishable Example Class with Zope Decorator\nDESCRIPTION: This code snippet shows how to mark a class as publishable in Zope using the ZPublisher.zpublish decorator. This makes the class instances available for web publishing through Zope's traversal mechanism.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zdgbook/ObjectPublishing.rst#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom ZPublisher import zpublish\n\n@zpublish\nclass Example:\n```\n\n----------------------------------------\n\nTITLE: Skipping Empty Record Fields with Zope 'ignore_empty' in HTML\nDESCRIPTION: Shows how the ':ignore_empty' directive, combined with ':record', prevents an attribute from being added to the resulting record if the corresponding form field is submitted empty. In this example, if the 'person.email' field is blank, the 'person' record object in the Zope request will not have an 'email' attribute.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zdgbook/ObjectPublishing.rst#2025-04-22_snippet_13\n\nLANGUAGE: html\nCODE:\n```\n<input type=\"text\" name=\"person.email:record:ignore_empty\">\n```\n\n----------------------------------------\n\nTITLE: Including External File with reStructuredText Directive\nDESCRIPTION: A reStructuredText directive that includes the CHANGES.rst file from the parent directory into the current document. This allows maintaining changelog information in a single location while including it in multiple documentation files.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/changes.rst#2025-04-22_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. include:: ../CHANGES.rst\n```\n\n----------------------------------------\n\nTITLE: Index Page Implementation with Base URL Handling\nDESCRIPTION: Example class showing implementation of index_html method with URL base handling consideration. Demonstrates default view rendering and link structure.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zdgbook/ObjectPublishing.rst#2025-04-22_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n@zpublish\nclass Example:\n    \"\"\"example class\"\"\"\n\n    @zpublish\n    def index_html(self):\n        \"\"\"render default view\"\"\"\n        return \"\"\"<html>\n                  <head><title>one</title></head>\n                  <body>\n                  <a href=\"one\">one</a><br>\n                  <a href=\"two\">two</a>\n                  </body>\n                  </html>\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Exception Information Handling in DTML\nDESCRIPTION: Shows how to access and display exception information including type and value\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/AppendixA.rst#2025-04-22_snippet_32\n\nLANGUAGE: dtml\nCODE:\n```\n<dtml-try>\n<dtml-call dangerousMethod>\n<dtml-except>\nAn error occurred.\nError type: <dtml-var error_type>\nError value: <dtml-var error_value>\n</dtml-try>\n```\n\n----------------------------------------\n\nTITLE: Defining a Python Script for Tree Filtering\nDESCRIPTION: This Python script named 'publicObjects' is used with the tree tag to filter objects that should appear in a site map. It returns only folders and DTML documents that have a 'siteMap' property set to true.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/AdvDTML.rst#2025-04-22_snippet_25\n\nLANGUAGE: python\nCODE:\n```\n## Script (Python) \"publicObjects\"\n##\n\"\"\"\nReturns sub-folders and DTML documents that have a\ntrue 'siteMap' property.\n\"\"\"\nresults=[]\nfor object in context.objectValues(['Folder', 'DTML Document']):\n    if object.hasProperty('siteMap') and object.siteMap:\n        results.append(object)\nreturn results\n```\n\n----------------------------------------\n\nTITLE: Checking Object Removal Event in Python\nDESCRIPTION: This snippet demonstrates how to check if an event is not an IObjectRemovedEvent, and if so, registers the object with a tool named 'portal_cool'.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/src/OFS/event.txt#2025-04-22_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nif not IObjectRemovedEvent.providedBy(event):\n    getToolByName(ob, 'portal_cool').registerCool(ob)\n```\n\n----------------------------------------\n\nTITLE: Testing Template Resource Traversal\nDESCRIPTION: Tests the traversal and URL generation for a template resource. Verifies the resource type and checks the generated URL.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/src/Products/Five/browser/tests/resource.txt#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n>>> resource = self.folder.unrestrictedTraverse('testoid/++resource++cockatiel.html')\n>>> isinstance(resource, Resource)\nTrue\n>>> resource()\n'http://nohost/test_folder_1_/testoid/++resource++cockatiel.html'\n```\n\n----------------------------------------\n\nTITLE: Creating a Batch Object in Zope Page Templates\nDESCRIPTION: Demonstrates how to create a Batch object for handling large sets of data in Zope Page Templates.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/AdvZPT.rst#2025-04-22_snippet_44\n\nLANGUAGE: html\nCODE:\n```\n<ul tal:define=\"lots python:range(100);\n```\n\n----------------------------------------\n\nTITLE: Using the 'prefix' Attribute in dtml-in for Safe Variable Access in DTML\nDESCRIPTION: This snippet shows how to resolve the variable name conflict in Python expressions when using 'dtml-in'. By adding the 'prefix=\"loop\"' attribute, the default loop variables like 'sequence-item' are renamed to 'loop_item', which uses an underscore and is a valid Python identifier. This allows 'loop_item * loop_item' to be evaluated correctly.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/AdvDTML.rst#2025-04-22_snippet_12\n\nLANGUAGE: DTML\nCODE:\n```\n<dtml-var standard_html_header>\n\n<h1>The squares of the first three integers:</h1>\n<ul>\n<dtml-in prefix=\"loop\" expr=\"_.range(3)\">\n  <li>The square of <dtml-var loop_item> is: \n    <dtml-var expr=\"loop_item * loop_item\">\n  </li>\n</dtml-in>  \n</ul>  \n\n<dtml-var standard_html_footer>\n```\n\n----------------------------------------\n\nTITLE: Defining XML Namespace for XHTML in Zope Page Templates\nDESCRIPTION: This snippet shows how to declare XML namespaces for TAL and METAL in an XHTML document, which is required for emitting XML in Zope Page Templates.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/ZPT.rst#2025-04-22_snippet_12\n\nLANGUAGE: html\nCODE:\n```\n<html xmlns:tal=\"http://xml.zope.org/namespaces/tal\"\n  xmlns:metal=\"http://xml.zope.org/namespaces/metal\">\n```\n\n----------------------------------------\n\nTITLE: Explicit Variable Lookup with '_.getitem' in DTML Expressions\nDESCRIPTION: This snippet demonstrates an alternative way to access variables with special characters (like '-') within DTML Python expressions. The '_.getitem('variable-name')' utility function explicitly looks up the variable named 'sequence-item', allowing it to be used in calculations like multiplication without causing a Python syntax error.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/AdvDTML.rst#2025-04-22_snippet_13\n\nLANGUAGE: DTML\nCODE:\n```\nThe square of <dtml-var sequence-item> is:\n<dtml-var expr=\"_.getitem('sequence-item') * \n                _.getitem('sequence-item')\">\n```\n\n----------------------------------------\n\nTITLE: Setting _p_changed Before Mutating Objects in ZODB\nDESCRIPTION: Demonstrates the proper pattern for marking persistent objects as changed in ZODB. The _p_changed flag should be set before modifying the object to ensure changes are persisted even if an exception occurs during modification.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zdgbook/Gotchas.txt#2025-04-22_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n# Incorrect implementation - may lose changes if an exception occurs\ndef storeMany(self, keys, values):\n    for key, value in zip(keys, values):\n        self.bar[key] = value\n    self._p_changed = 1  # This is too late!\n\n# Correct implementation\ndef storeMany(self, keys, values):\n    self._p_changed = 1  # Set before making changes\n    for key, value in zip(keys, values):\n        self.bar[key] = value\n```\n\n----------------------------------------\n\nTITLE: Checking for New Browser ID in DTML\nDESCRIPTION: Demonstrates how to determine if a browser ID is new (created in the current request) using the isBrowserIdNew method.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/Sessions.rst#2025-04-22_snippet_10\n\nLANGUAGE: dtml\nCODE:\n```\n<dtml-if \"REQUEST.SESSION.getBrowserIdManager().isBrowserIdNew()\">\n    Browser id is new.\n<dtml-else>\n    Browser id is not new.\n</dtml-if>\n```\n\n----------------------------------------\n\nTITLE: Defining a Variable Truthiness dtml-if Condition in DTML\nDESCRIPTION: An example of a DTML `dtml-if` tag condition using the expression syntax (`expr`). The condition `expr=\"rhino\"` evaluates to true if the variable named 'rhino' exists and its value is considered true (not 0, None, empty sequence, or empty string).\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/DTML.rst#2025-04-22_snippet_24\n\nLANGUAGE: dtml\nCODE:\n```\nexpr=\"rhino\"\n```\n\n----------------------------------------\n\nTITLE: Registering a viewlet manager with a custom interface and template\nDESCRIPTION: Demonstrates registering a viewlet manager with a specific interface and template file.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/src/Products/Five/viewlet/directives.txt#2025-04-22_snippet_3\n\nLANGUAGE: XML\nCODE:\n```\n<configure xmlns=\"http://namespaces.zope.org/browser\" i18n_domain=\"zope\">\n  <viewletManager\n      name=\"leftcolumn\"\n      permission=\"zope.Public\"\n      provides=\"Products.Five.viewlet.tests.ILeftColumn\"\n      template=\"%s\"\n      />\n</configure>\n```\n\n----------------------------------------\n\nTITLE: Adding Test Content and User in Zope\nDESCRIPTION: This snippet adds a test object to the folder and creates a stub user account for testing purposes.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/src/Products/Five/browser/tests/pages.txt#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom Products.Five.tests.testing.simplecontent import manage_addSimpleContent\nmanage_addSimpleContent(self.folder, 'testoid', 'Testoid')\n\nuf = self.folder.acl_users\n_ignored = uf._doAddUser('manager', 'r00t', ['Manager'], [])\nself.login('manager')\n```\n\n----------------------------------------\n\nTITLE: Manually Wrapping Objects with Acquisition in Python\nDESCRIPTION: Shows how to manually wrap an instance of an acquisition-enabled object using its __of__ method. This allows explicit creation of acquisition contexts.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zdgbook/Acquisition.rst#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nclass A(Acquisition.Implicit):\n    pass\n\na = A()\na.color = 'red'\nb = A()\na.b = b\n\nprint b.__of__(a).color # prints red\n```\n\n----------------------------------------\n\nTITLE: Dynamic Macro Selection in Zope Page Templates\nDESCRIPTION: This snippet demonstrates how to dynamically select a macro using a Python expression in a METAL use-macro statement.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/ZPT.rst#2025-04-22_snippet_17\n\nLANGUAGE: html\nCODE:\n```\n<p metal:use-macro=\"python:context.getMacro()\">\n  Replaced with a dynamically determined macro,\n  which is located by the getMacro script.\n</p>\n```\n\n----------------------------------------\n\nTITLE: Embedding Browser ID in HTML Link Inline using DTML\nDESCRIPTION: Shows how to encode a URL with the browser ID using an inline style, which embeds the ID in the URL path rather than as a query parameter.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/Sessions.rst#2025-04-22_snippet_13\n\nLANGUAGE: html\nCODE:\n```\n<html>\n<body>\n  <a href=\"<dtml-var \"REQUEST.SESSION.getBrowserIdManager().encodeUrl('/amethod', style='inline')\">\">Here</a>\n  is a link.\n</body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Rendering Variables Looked Up with '_.getitem' in DTML\nDESCRIPTION: This snippet shows how to use the optional second argument of '_.getitem'. Passing '1' as the second argument ('_.getitem('myDoc', 1)') instructs DTML to render the looked-up variable 'myDoc' (convert it to its string representation) before inserting it.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/AdvDTML.rst#2025-04-22_snippet_14\n\nLANGUAGE: DTML\nCODE:\n```\n<dtml-var expr=\"_.getitem('myDoc', 1)\">\n```\n\n----------------------------------------\n\nTITLE: Configuring Standard Zope Not Found Error Handling\nDESCRIPTION: An example of the standard Zope Not Found handling that uses a DTML method. This is the default approach when no customization has been done.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zdgbook/includes/zope2_notice.rst#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<dtml-var standard_error_message>\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Batching with DTML\nDESCRIPTION: A complete example showing how to display 100 items in batches of 10 at a time with next/previous navigation. This demonstrates sequence-start, sequence-end, and batch navigation patterns.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/AdvDTML.rst#2025-04-22_snippet_32\n\nLANGUAGE: dtml\nCODE:\n```\n<dtml-var standard_html_header>\n\n  <dtml-in expr=\"_.range(100)\" size=10 start=query_start>\n\n    <dtml-if sequence-start>\n\n      <dtml-if previous-sequence>\n        <a href=\"<dtml-var URL><dtml-var sequence-query\n           >query_start=<dtml-var previous-sequence-start-number>\">\n           (Previous <dtml-var previous-sequence-size> results)\n        </a>\n      </dtml-if>\n\n      <h1>These words are displayed at the top of a batch:</h1>\n      <ul>\n\n    </dtml-if>\n\n      <li>Iteration number: <dtml-var sequence-item></li>\n\n    <dtml-if sequence-end>\n\n      </ul>\n      <h4>These words are displayed at the bottom of a batch.</h4>\n\n      <dtml-if next-sequence>\n         <a href=\"<dtml-var URL><dtml-var sequence-query\n            >query_start=<dtml-var\n            next-sequence-start-number>\">\n         (Next <dtml-var next-sequence-size> results)\n         </a>\n\n      </dtml-if>\n\n    </dtml-if>\n\n  </dtml-in>\n\n<dtml-var standard_html_footer>\n```\n\n----------------------------------------\n\nTITLE: Acquisition Demonstration in Zope Page Template\nDESCRIPTION: This HTML template demonstrates acquisition in Zope, where the template displays the title of the folder from which it's being called, showing how objects can access attributes of their containers.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/Acquisition.rst#2025-04-22_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<html>\n<body>\n  <p>\n   I am being called from within the\n   <span tal:replace=\"context/title\" />\n   Folder!\n  </p>\n</body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Migrating Interface Implementation in Python for Zope\nDESCRIPTION: Shows the transition from using the 'implements' function to the 'implementer' decorator for signaling that a class implements a specific interface in Zope.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/migrations/zope4/code.rst#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom zope.interface import implementer\nfrom zope.interface import implements\nfrom .interfaces import IMyClass\n\nclass MyClass:\n    implements(IMyClass)  # OLD\n    ...\n\n@implementer(IMyClass)  # NEW\nclass AnotherClass:\n    ...\n```\n\n----------------------------------------\n\nTITLE: Using 'dtml-call' for Client-Side Redirects in DTML\nDESCRIPTION: This snippet shows using 'dtml-call' to invoke the 'RESPONSE.redirect' method. The target URL is defined using 'dtml-let'. Calling 'RESPONSE.redirect' sends an HTTP redirect header to the client's browser, causing it to navigate to the specified URL. The 'dtml-call' tag prevents any return value from 'redirect' from being inserted into the HTML.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/AdvDTML.rst#2025-04-22_snippet_19\n\nLANGUAGE: DTML\nCODE:\n```\n<dtml-var standard_html_header>\n\n<dtml-let target=\"'http://example.com/new_location.html'\">\n\n  <h1>This page has moved, you will now be redirected to the\n  correct location.  If your browser does not redirect, click <a\n  href=\"<dtml-var target>\"><dtml-var target></a>.</h1>\n\n  <dtml-call expr=\"RESPONSE.redirect(target)\">\n\n</dtml-let>\n\n<dtml-var standard_html_footer>\n```\n\n----------------------------------------\n\nTITLE: Committing a Subtransaction in Zope (Python)\nDESCRIPTION: Shows how to commit a subtransaction using the get_transaction() function. Subtransactions allow managing memory usage during large transactions.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zdgbook/ZODBPersistentComponents.rst#2025-04-22_snippet_7\n\nLANGUAGE: Python\nCODE:\n```\nget_transaction().commit(1)\n```\n\n----------------------------------------\n\nTITLE: Formatting Output with dtml-var fmt attribute in DTML\nDESCRIPTION: Shows how to use the `fmt` attribute of the `dtml-var` tag to format output, specifically for currency. It assumes a property named 'adult_rate' exists (e.g., with value 2.2) and formats it as dollars and cents (e.g., \"$2.20\").\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/DTML.rst#2025-04-22_snippet_18\n\nLANGUAGE: dtml\nCODE:\n```\nOne Adult pass: <dtml-var adult_rate fmt=dollars-and-cents>\n```\n\n----------------------------------------\n\nTITLE: Modifying a Zope Product Class for Persistence in Python\nDESCRIPTION: This code snippet demonstrates how to modify a method in a Zope Product class to ensure changes to mutable attributes are correctly persisted by setting the _p_changed flag.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zdgbook/Products.rst#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndef castVote(self, index):\n    \"\"\"Votes for a choice\"\"\"\n    self._votes[index] = self._votes[index] + 1\n    self._p_changed = 1\n```\n\n----------------------------------------\n\nTITLE: Returning Data Early with DTML 'return' Tag - DTML\nDESCRIPTION: Explains how to stop DTML execution and return data directly using the 'return' tag. You can return variables or evaluate expressions, suitable for returning both simple values and complex data structures (such as dictionaries). Script-based approaches are now favored for new code.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/AppendixA.rst#2025-04-22_snippet_15\n\nLANGUAGE: dtml\nCODE:\n```\n<dtml-return result>\n```\n\nLANGUAGE: dtml\nCODE:\n```\n<dtml-return expr=\"{'hi':200, 'lo':5}\">\n```\n\n----------------------------------------\n\nTITLE: Using dtml-if with dtml-else for Alternate Rendering in DTML\nDESCRIPTION: Illustrates the use of `dtml-else` within a `dtml-if` block. If the condition `expr=\"monkeys > monkey_limit\"` is true, the first paragraph is shown; otherwise, the second paragraph after `dtml-else` is shown. Requires 'monkeys' and 'monkey_limit' variables.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/DTML.rst#2025-04-22_snippet_31\n\nLANGUAGE: dtml\nCODE:\n```\n<dtml-if expr=\"monkeys > monkey_limit\">\n  <p>There are too many monkeys!</p>\n<dtml-else>\n  <p>The monkeys are happy!</p>\n</dtml-if>\n```\n\n----------------------------------------\n\nTITLE: Image Thumbnail Generation using PIL in Python\nDESCRIPTION: External method that creates thumbnail versions of images using Python Imaging Library (PIL), including memory management with StringIO.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/ScriptingZope.rst#2025-04-22_snippet_9\n\nLANGUAGE: python\nCODE:\n```\ndef makeThumbnail(self, original_id, size=200):\n    \"\"\"\n    Makes a thumbnail image given an image Id when called on a Zope\n    folder.\n\n    The thumbnail is a Zope image object that is a small JPG\n    representation of the original image. The thumbnail has an\n    'original_id' property set to the id of the full size image\n    object.\n    \"\"\"\n\n    import PIL \n    from StringIO import StringIO\n    import os.path \n    # none of the above imports would be allowed in Script (Python)!\n\n    # Get the original image data in memory.\n    original_image=getattr(self, original_id)\n    original_file=StringIO(str(original_image.data))\n\n    # create the thumbnail data in a new PIL Image. \n    image=PIL.Image.open(original_file)\n    image=image.convert('RGB')\n    image.thumbnail((size,size))\n\n    # get the thumbnail data in memory.\n    thumbnail_file=StringIO()\n    image.save(thumbnail_file, \"JPEG\") \n    thumbnail_file.seek(0)\n\n    # create an id for the thumbnail\n    path, ext=os.path.splitext(original_id)\n    thumbnail_id=path + '.thumb.jpg'\n\n    # if there's an old thumbnail, delete it\n    if thumbnail_id in self.objectIds():\n        self.manage_delObjects([thumbnail_id])\n\n    # create the Zope image object for the new thumbnail\n    self.manage_addProduct['OFSP'].manage_addImage(thumbnail_id,\n                                                   thumbnail_file,\n                                                   'thumbnail image')\n\n    # now find the new zope object so we can modify \n    # its properties.\n    thumbnail_image=getattr(self, thumbnail_id)\n    thumbnail_image.manage_addProperty('original_id', original_id, 'string')\n```\n\n----------------------------------------\n\nTITLE: Inserting Template Variables using TAL - HTML\nDESCRIPTION: This snippet demonstrates two approaches for inserting the value of a template's title using the TAL (Template Attribute Language) attribute \"tal:replace\". The first form renders the value directly, while the second uses explicit 'text' mode for string conversion. Prerequisites include a Zope environment with TAL support and availability of a 'template/title' variable. The key parameter is the TAL attribute argument, determining what value replaces the enclosed element. The output is the evaluated title within a <span> element, replacing its content.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/AppendixC.rst#2025-04-22_snippet_14\n\nLANGUAGE: html\nCODE:\n```\n<span tal:replace=\"template/title\">Title</span>\n<span tal:replace=\"text template/title\">Title</span>\n```\n\n----------------------------------------\n\nTITLE: Running Zope in Exceptions Debug Mode\nDESCRIPTION: This snippet shows how to run Zope in exceptions debug mode using the built-in runwsgi script, which disables all registered exception views for easier debugging.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/operation.rst#2025-04-22_snippet_19\n\nLANGUAGE: console\nCODE:\n```\n$ bin/runwsgi -e etc/zope.ini\n```\n\n----------------------------------------\n\nTITLE: Direct DTML Property Access with aq_explicit\nDESCRIPTION: Demonstrates how to access a property directly on an object without acquisition using aq_explicit. This will raise an exception if the property doesn't exist.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/AdvDTML.rst#2025-04-22_snippet_39\n\nLANGUAGE: dtml\nCODE:\n```\n<dtml-var \"Image2.aq_explicit.desc\">\n```\n\n----------------------------------------\n\nTITLE: Configuring Chameleon Template Caching in Zope\nDESCRIPTION: Shows how to configure filesystem caching for Chameleon-based templates in Zope by setting an environment variable in the zope.conf file.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/AdvZPT.rst#2025-04-22_snippet_43\n\nLANGUAGE: text\nCODE:\n```\n<environment>\n  CHAMELEON_CACHE $INSTANCE/var/cache\n</environment>\n```\n\n----------------------------------------\n\nTITLE: Sorting with the DTML-in Tag\nDESCRIPTION: An example of dynamic sorting in DTML, allowing users to sort a result set in ascending or descending order by different columns through URL parameters.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/AdvDTML.rst#2025-04-22_snippet_36\n\nLANGUAGE: dtml\nCODE:\n```\n<table>\n  <tr>\n    <td>Time&nbsp;<a href=\"<dtml-var URL>?st=logTimea\">A</a>&nbsp;<a href=\"<dtml-var URL>?st=logTimed\">D</a></td>\n    <td>Type&nbsp;<a href=\"<dtml-var URL>?st=logTypea\">A</a>&nbsp;<a href=\"<dtml-var URL>?st=logTyped\">D</a></td>\n    <td>User&nbsp;<a href=\"<dtml-var URL>?st=userNamea\">A</a>&nbsp;<a href=\"<dtml-var URL>?st=userNamed\">D</a></td>\n  </tr>\n\n  <dtml-comment>The line below sets the default sort</dtml-comment>\n  <dtml-if \"REQUEST.get('st')==None\"><dtml-call \"REQUEST.set('st', 'logTimed')\"></dtml-if>\n  <dtml-in getLogData sort_expr=\"REQUEST.get('st')[0:-1]\" reverse_expr=\"REQUEST.get('st')[-1]=='d'\">\n    <tr>\n      <td><dtml-var logTime></td>\n      <td><dtml-var logType></td>\n      <td><dtml-var userName></td>\n    </tr>\n  </dtml-in>\n</table>\n```\n\n----------------------------------------\n\nTITLE: Simple HTML Weather Template\nDESCRIPTION: Basic HTML template showing static weather information used to demonstrate caching functionality.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/ZopeServices.rst#2025-04-22_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<html>\n<body>\n\n  <p>Yesterday it rained.</p>\n\n</body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Implementing manage_* methods in old Zope 2 product (Python)\nDESCRIPTION: Example of old-style Zope 2 product using manage_afterAdd, manage_afterClone, and manage_beforeDelete methods to handle object lifecycle events.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/src/OFS/event.txt#2025-04-22_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nclass CoolDocument(...):\n    ...\n    def manage_afterAdd(self, item, container):\n        self.mangled_path = mangle('/'.join(self.getPhysicalPath()))\n        getToolByName(self, 'portal_cool').registerCool(self)\n        super(CoolDocument, self).manage_afterAdd(item, container)\n\n    def manage_afterClone(self, item):\n        self.mangled_path = mangle('/'.join(self.getPhysicalPath()))\n        getToolByName(self, 'portal_cool').registerCool(self)\n        super(CoolDocument, self).manage_afterClone(item)\n\n    def manage_beforeDelete(self, item, container):\n        super(CoolDocument, self).manage_beforeDelete(item, container)\n        getToolByName(self, 'portal_cool').unregisterCool(self)\n```\n\n----------------------------------------\n\nTITLE: Using the 'with' Tag to Simplify Namespace Access in DTML\nDESCRIPTION: Demonstrates how the 'with' tag can be used to push an object onto the namespace stack, simplifying access to its attributes.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/AdvDTML.rst#2025-04-22_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<dtml-var standard_html_header>\n\n<dtml-with Reptiles>\n\n  <dtml-var getReptileInfo>\n  <dtml-var reptileHouseMaintainer>\n\n  <dtml-in getReptiles>\n    <dtml-var species>\n  </dtml-in>\n\n</dtml-with>\n\n<dtml-var standard_html_footer>\n```\n\n----------------------------------------\n\nTITLE: RST Figure Directive - Add Folder Form\nDESCRIPTION: RST figure directive showing the Add Folder form image with caption.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/UsingZope.rst#2025-04-22_snippet_4\n\nLANGUAGE: rst\nCODE:\n```\n.. figure:: Figures/addfolder.jpg\n\n   Folder add form\n```\n\n----------------------------------------\n\nTITLE: Verifying ZopeTestCase Default Fixture in Python Doctest\nDESCRIPTION: This doctest snippet demonstrates how to verify the default fixture set up by ZopeTestCase. It checks for the presence of a folder, user folder, default user, and confirms that the default user is logged in.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/src/Testing/ZopeTestCase/zopedoctest/ZopeDocTest.txt#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n>>> from Testing.ZopeTestCase import folder_name, user_name\n>>> from AccessControl import getSecurityManager\n\n>>> folder_name in self.app.objectIds()\nTrue\n\n>>> 'acl_users' in self.folder.objectIds()\nTrue\n\n>>> user = self.folder.acl_users.getUserById(user_name)\n>>> user is None\nFalse\n\n>>> getSecurityManager().getUser().getId() == user_name\nTrue\n\n>>> 'object' in self.folder.objectIds()\nTrue\n```\n\n----------------------------------------\n\nTITLE: Conditional Processing with the DTML Unless Tag\nDESCRIPTION: These examples demonstrate the unless tag, which executes a block of code when a condition is false. Two variations are shown: one using variable existence checking and one using expression evaluation.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/AdvDTML.rst#2025-04-22_snippet_31\n\nLANGUAGE: dtml\nCODE:\n```\n<dtml-unless the_easter_bunny>\n  The Easter Bunny does not exist or is not true.\n</dtml-unless>\n```\n\nLANGUAGE: dtml\nCODE:\n```\n<dtml-unless expr=\"the_easter_bunny\">\n  The Easter Bunny is not true.\n</dtml-unless>\n```\n\n----------------------------------------\n\nTITLE: Defining Variables with tal:define in Zope TAL\nDESCRIPTION: Examples of using tal:define to create global and local variables in Zope templates. Shows how to define a single variable and multiple dependent variables.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/AppendixC.rst#2025-04-22_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n<tal:block tal:define=\"global company_name string:Zope Corp, Inc.\"></tal:block>\n```\n\nLANGUAGE: html\nCODE:\n```\n<tal:block tal:define=\"mytitle template/title; tlen python:len(mytitle)\"></tal:block>\n```\n\n----------------------------------------\n\nTITLE: Post-Mortem Debugging Example\nDESCRIPTION: Demonstrates how to use post-mortem debugging to analyze an exception in Zope.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zdgbook/TestingAndDebugging.rst#2025-04-22_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n>>> ZPublisher.Zope('/News/quote', pm=1)\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in ?\n  File \"./News.py\", line 4, in test\n    test2()\n  File \"./News.py\", line 3, in test2\n    return '%s said, \"%s\"' % (self.Author, self.news)\nNameError: Author\n(pdb)\n```\n\n----------------------------------------\n\nTITLE: Defining a DepartmentManager Class with Mutable Attribute in Python for ZODB\nDESCRIPTION: This example defines a DepartmentManager class with a mutable list attribute. It demonstrates the issue of changes to mutable attributes not being automatically detected by ZODB.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zdgbook/ZODBPersistentComponents.rst#2025-04-22_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nclass DepartmentManager(Persistent):\n\n    def __init__(self):\n        self.departments = []\n\n    def addDepartment(self, department):\n        self.departments.append(department)\n```\n\n----------------------------------------\n\nTITLE: Embedding Standard dtml-var in HTML Attribute\nDESCRIPTION: Example of embedding a standard `dtml-var` tag within an HTML attribute value. This requires careful quoting and uses `html_quote` to ensure the output variable 'defaultValue' is properly escaped for the HTML context.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/DTML.rst#2025-04-22_snippet_21\n\nLANGUAGE: html\nCODE:\n```\n<input type=\"text\" value=\"<dtml-var name=\"defaultValue\" html_quote>\">\n```\n\n----------------------------------------\n\nTITLE: Storing and Committing Data in ZODB Root Object in Python\nDESCRIPTION: This example shows how to store a simple list in the ZODB root object and commit the transaction to make the changes permanent. It demonstrates basic data manipulation in ZODB.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zdgbook/ZODBPersistentComponents.rst#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nroot['employees'] = ['Bob', 'Mary', 'Jo']\nget_transaction().commit()\n```\n\n----------------------------------------\n\nTITLE: Using 'in' Tag in DTML for Looping Over Sequences\nDESCRIPTION: This snippet demonstrates the usage of the 'in' tag in DTML for looping over sequences and batch processing. It shows the syntax and various attributes that can be used with the 'in' tag.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/AppendixA.rst#2025-04-22_snippet_5\n\nLANGUAGE: DTML\nCODE:\n```\n<dtml-in SequenceVariable|expr=\"SequenceExpression\">\n[<dtml-else>]\n</dtml-in>\n```\n\n----------------------------------------\n\nTITLE: Defining a Public Method to Retrieve Books in Zope (Python)\nDESCRIPTION: Implements a 'getBooks' function that creates and returns a list of Book objects initialized with classic Shakespeare titles. Assumes the 'Book' class is appropriately secured and available in the current context. No external dependencies beyond Book; intended as a public method callable within the Zope environment to provide a static list of book instances. The function demonstrates how to expose collections of secure objects through the Zope framework.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zdgbook/Security.rst#2025-04-22_snippet_10\n\nLANGUAGE: python\nCODE:\n```\ndef getBooks(self):\n  books=[]\n  books.append(Book('King Lear'))\n  books.append(Book('Romeo and Juliet'))\n  books.append(Book('The Tempest'))\n  return books\n```\n\n----------------------------------------\n\nTITLE: Case Sensitivity in HTML Tags for Zope 4 Page Templates\nDESCRIPTION: Illustrates how Chameleon requires opening and closing HTML tags to match in case, unlike Zope 2 which was more lenient with case matching.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/migrations/zope4/content.rst#2025-04-22_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<a href=\".\">Text</A>  <!-- BAD: Mismatched open/close tag -->\n<a href=\".\">Text</a>  <!-- OK -->\n<A href=\".\">Text</A>  <!-- OK -->\n<Td>...</td>          <!-- BAD: Mismatched open/close tag -->\n<td>...</td>          <!-- OK -->\n```\n\n----------------------------------------\n\nTITLE: Session Data Manipulation in TAL\nDESCRIPTION: TAL template example showing how to set and retrieve values in a session data object.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/Sessions.rst#2025-04-22_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<span tal:define=\"data python: request.SESSION\">\n    <tal:block define=\"temp python: data.set('foo','bar')\">\n        <p tal:content=\"python: data.get('foo')\">bar will print here</p>\n    </tal:block>\n</span>\n```\n\n----------------------------------------\n\nTITLE: Running zodbverify on Data.fs in Python 3 environment\nDESCRIPTION: Command to verify the ZODB by iteratively loading every pickle after conversion to Python 3 format.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/migrations/zope4/zodb.rst#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nbin/zodbverify -f path/to/Data.fs\n```\n\n----------------------------------------\n\nTITLE: Implementing event subscriber for added CoolDocument (Python)\nDESCRIPTION: Example of an event subscriber function that handles the IObjectAddedEvent for a CoolDocument object.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/src/OFS/event.txt#2025-04-22_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\ndef addedCoolDocument(ob, event):\n    \"\"\"A Cool Document was added to a container.\"\"\"\n    self.mangled_path = mangle('/'.join(self.getPhysicalPath()))\n```\n\n----------------------------------------\n\nTITLE: Implementing Page Number Navigation with DTML\nDESCRIPTION: An example showing how to display page numbers for batch navigation, presenting the user with clickable page numbers instead of just next/previous links.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/AdvDTML.rst#2025-04-22_snippet_34\n\nLANGUAGE: dtml\nCODE:\n```\n<dtml-in \"_.range(1,101) \"size=10 start=start>\n           <dtml-if sequence-start>\n             <p>Pages: \n             <dtml-call \"REQUEST.set('actual_page',1)\">\n             <dtml-in previous-batches mapping>   \n               <a href=\"<dtml-var URL><dtml-var sequence-query>query_start=<dtml-var \"_['batch-start-index']+1\">\">\n               <dtml-var sequence-number></a>&nbsp;\n               <dtml-call \"REQUEST.set('actual_page',_['sequence-number']+1)\">     \n             </dtml-in>\n             <b><dtml-var \"_['actual_page']\"></b>  \n           </dtml-if>\n           <dtml-if sequence-end>\n             <dtml-in next-batches mapping>&nbsp;\n                <a href=\"<dtml-var URL><dtml-var sequence-query>query_start=<dtml-var \"_['batch-start-index']+1\">\">\n                <dtml-var \"_['sequence-number']+_['actual_page']\"></a>\n              </dtml-in>\n           </dtml-if>\n  </dtml-in>\n\n  <dtml-in \"_.range(1,101) \"size=10 start=start>\n            <br><dtml-var sequence-item>\n  </dtml-in>\n```\n\n----------------------------------------\n\nTITLE: METAL Macro Definition\nDESCRIPTION: Simple macro definition for copyright notice\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/AppendixC.rst#2025-04-22_snippet_37\n\nLANGUAGE: html\nCODE:\n```\n<p metal:define-macro=\"copyright\">\n    Copyright 2009, <em>Foobar</em> Inc.\n  </p>\n```\n\n----------------------------------------\n\nTITLE: Embedding Browser ID in HTML Link using DTML\nDESCRIPTION: Demonstrates how to encode a URL with the browser ID for use in HTML links, using the encodeUrl method.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/Sessions.rst#2025-04-22_snippet_12\n\nLANGUAGE: html\nCODE:\n```\n<html>\n<body>\n  <a href=\"<dtml-var \"REQUEST.SESSION.getBrowserIdManager().encodeUrl('/amethod')\">\">Here</a>\n  is a link.\n</body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Declaring View Permissions in ZCML\nDESCRIPTION: Shows how to declare permissions for methods and templates on views using the permission attribute in the browser:page directive, specifying a Zope 2 permission by its dotted name.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/src/Products/Five/doc/features.txt#2025-04-22_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<browser:page permission=\"zope2.View\">\n```\n\n----------------------------------------\n\nTITLE: Basic tree Tag Usage\nDESCRIPTION: The tree tag displays a dynamic tree widget by recursively querying Zope objects. This basic example renders a tree rooted at the current object and displays each node's title or ID.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/AppendixA.rst#2025-04-22_snippet_27\n\nLANGUAGE: dtml\nCODE:\n```\n<dtml-tree>\n  <dtml-var title_or_id>\n</dtml-tree>\n```\n\n----------------------------------------\n\nTITLE: Using the 'in' Tag for Iteration in DTML\nDESCRIPTION: Demonstrates how the 'in' tag modifies the namespace by pushing the current item onto the stack during iteration.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/AdvDTML.rst#2025-04-22_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<dtml-var getId> <!-- This is the id of the client object -->\n\n<dtml-in objectValues>\n\n  <dtml-var getId> <!-- this is the id of the current item in the \n                     objectValues sequence -->\n</dtml-in>\n```\n\n----------------------------------------\n\nTITLE: Basic Page Rendering with Zope Publishing\nDESCRIPTION: Example class showing basic page rendering methods using the @zpublish decorator. Demonstrates simple HTML page generation with navigation links between pages.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zdgbook/ObjectPublishing.rst#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n@zpublish\ndef one(self):\n    \"\"\"render page one\"\"\"\n    return \"\"\"<html>\n              <head><title>one</title></head>\n              <body>\n              <a href=\"two\">two</a>\n              </body>\n              </html>\"\"\"\n\n@zpublish\ndef two(self):\n    \"\"\"render page two\"\"\"\n    return \"\"\"<html>\n              <head><title>two</title></head>\n              <body>\n              <a href=\"one\">one</a>\n              </body>\n              </html>\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Conditional Rendering with tal:condition in Zope Templates\nDESCRIPTION: Demonstrates the use of tal:condition for conditional rendering, including the 'not' operator for inverse conditions.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/AdvZPT.rst#2025-04-22_snippet_9\n\nLANGUAGE: HTML\nCODE:\n```\n<h4 tal:condition=\"not:container/objectIds\">\n  There Are No Items\n</h4>\n```\n\n----------------------------------------\n\nTITLE: Testing HTTP GET with Encoded Query Parameter - Python\nDESCRIPTION: Verifies how the system handles query strings containing encoded question marks. This snippet is useful for ensuring robust query parsing and correct endpoint responses. It uses doctest to simulate a GET request with a complex query parameter and assert expected HTTP status, headers, and body.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/src/Testing/ZopeTestCase/zopedoctest/FunctionalDocTest.txt#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n>>> response = http(r\"\"\"\n... GET /test_folder_1_?foo=bla%3Fbaz HTTP/1.1\n... \"\"\")\n\n>>> response.status\n200\n>>> response.headers == {\n...     'content-length': '5', 'content-type': 'text/plain; charset=utf-8'}\nTrue\n>>> response.getBody() == b'index'\nTrue\n```\n\n----------------------------------------\n\nTITLE: Defining a Persistent Employee Class in Python for ZODB\nDESCRIPTION: This snippet defines a simple Employee class that inherits from Persistent, making it suitable for storage in ZODB. It includes a method to set the employee's name.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zdgbook/ZODBPersistentComponents.rst#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom Persistence import Persistent\n\nclass Employee(Persistent):\n\n    def setName(self, name):\n        self.name = name\n```\n\n----------------------------------------\n\nTITLE: TALES Exists Expression Syntax - Text\nDESCRIPTION: Defines the syntax of a TALES exists expression for Zope templates, used to test for the existence of a path. Specifies the required 'exists:' prefix followed by a valid path expression. No external dependencies; intended for use in environment supporting TALES.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/AppendixC.rst#2025-04-22_snippet_19\n\nLANGUAGE: text\nCODE:\n```\nexists_expressions ::= 'exists:' path_expression\n```\n\n----------------------------------------\n\nTITLE: Configuring Zope Instance with plone.recipe.zope2instance\nDESCRIPTION: This snippet shows a simple configuration for a Zope instance using the plone.recipe.zope2instance buildout recipe. It sets up basic parameters like the admin user and HTTP port.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/operation.rst#2025-04-22_snippet_17\n\nLANGUAGE: ini\nCODE:\n```\n[zopeinstance]\nrecipe = plone.recipe.zope2instance\neggs =\nzodb-temporary-storage = off\nuser = admin:password\nhttp-address = 8080\n```\n\n----------------------------------------\n\nTITLE: Creating Carpet Python DTML Document Content\nDESCRIPTION: Sample content for a DTML Document about the Carpet Python, which demonstrates another example of content that would be indexed by the ZCatalog. This text includes descriptive information about the snake that will be searchable.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/SearchingZCatalog.rst#2025-04-22_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n*Morelia spilotes variegata* averages 2.4 meters in length.  It\nis a medium-sized python with black-to-gray patterns of\nblotches, crossbands, stripes, or a combination of these\nmarkings on a light yellowish-to-dark brown background.  Snakes\nare reptiles.\n```\n\n----------------------------------------\n\nTITLE: Automating ZEO Log Rotation with logrotate (Configuration)\nDESCRIPTION: This is an example configuration script for the `logrotate` utility on Linux, designed to automate the rotation of ZEO server logs. It specifies that the log file `/path/to/zeostorage/log/zeo.log` should be rotated weekly, keeping 5 rotated logs, compressing old logs, not rotating if the log is empty, and ignoring errors if the log file is missing. Crucially, the `postrotate` section executes the `zeoctl logreopen` command after rotation to ensure the ZEO server starts writing to the new log file. This script is typically placed in `/etc/logrotate.d`.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/ZEO.rst#2025-04-22_snippet_11\n\nLANGUAGE: logrotate\nCODE:\n```\n# Rotate ZEO logs weekly\n/path/to/zeostorage/log/zeo.log {\n    weekly\n    rotate 5\n    compress\n    notifempty\n    missingok\n    postrotate\n    /path/to/zeostorage/bin/zeoctl logreopen\n    endscript\n}\n```\n\n----------------------------------------\n\nTITLE: Running zodbverify on Data.fs in Python 2 environment\nDESCRIPTION: Command to run zodbverify on the Data.fs file to uncover any errors in the ZODB before migration to Python 3.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/migrations/zope4/zodb.rst#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nbin/zodbverify -f path/to/Data.fs\n```\n\n----------------------------------------\n\nTITLE: Defining ICoolDocument interface (Python)\nDESCRIPTION: Definition of the ICoolDocument interface to mark CoolDocument objects for event handling.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/src/OFS/event.txt#2025-04-22_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\nfrom zope.interface import Interface, Attribute\n\nclass ICoolDocument(Interface):\n    \"\"\"Cool Document.\"\"\"\n    mangled_path = Attribute(\"Our mangled path.\")\n    ...\n```\n\n----------------------------------------\n\nTITLE: Forwarding a REQUEST Between DTML Methods\nDESCRIPTION: An example of how to forward a REQUEST from one DTML method to another based on a lookup table, without requiring browser redirection.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/AdvDTML.rst#2025-04-22_snippet_35\n\nLANGUAGE: dtml\nCODE:\n```\n<dtml-let lookup=\"{'a' : 'form15', 'b' : 'form75', 'c' : 'form88'}\">\n      <dtml-return \"_[lookup[REQUEST.get('type')]]\">\n</dtml-let>\n```\n\n----------------------------------------\n\nTITLE: Static HTML Table Row Example in Zope Page Template\nDESCRIPTION: This HTML snippet shows a static example table row within a Zope Page Template (`index_html.pt`). It serves as a placeholder structure representing how a single file entry should look before being replaced with dynamic content generation using TAL (Template Attribute Language). It includes static placeholders like 'URL', 'TITLE', and 'MON DD, YYYY H:MM AM' for the link, title, and modification date respectively.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/SimpleExamples.rst#2025-04-22_snippet_12\n\nLANGUAGE: html\nCODE:\n```\n  <tr>\n    <td><a href=\"URL\">TITLE</a></td>\n    <td>MON DD, YYYY H:MM AM</td>\n  </tr>\n```\n\n----------------------------------------\n\nTITLE: Implementing an Interface for Existing Class using ZCML\nDESCRIPTION: Demonstrates how to make an existing class implement an interface using ZCML when you can't modify the original class code.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/src/Products/Five/doc/manual.txt#2025-04-22_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<class class=\"tolkien.Oliphant\">\n  <implements interface=\".interfaces.IElephant\" />\n</class>\n```\n\n----------------------------------------\n\nTITLE: Creating Zope Test Fixture in Python\nDESCRIPTION: This code snippet shows how to set up a Zope test fixture. It includes steps to add Zope's library to the Python path, import Zope modules, get a Zope application object, and clean up after tests.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zdgbook/TestingAndDebugging.rst#2025-04-22_snippet_9\n\nLANGUAGE: Python\nCODE:\n```\nimport os, os.path, sys, string\ntry:\n    import unittest\nexcept ImportError:\n    fix_path()\n    import unittest\n\nclass MyTest(unittest.TestCase):\n\n    def setUp(self):\n        # Get the Zope application object and store it in an\n        # instance variable for use by test methods\n        import Zope\n        self.app=Zope.app()\n\n    def tearDown(self):\n        # Abort the transaction and shut down the Zope database\n        # connection.\n        get_transaction().abort()\n        self.app._p_jar.close()\n\n    # At this point your test methods can perform tests using\n    # self.app which refers to the Zope application object.\n\n    ...\n\ndef fix_path():\n    # Add Zope's lib/python directory to the Python path\n    file=os.path.join(os.getcwd(), sys.argv[0])\n    dir=os.path.join('lib', 'python')\n    i=string.find(file, dir)\n    sys.path.insert(0, file[:i+len(dir)])\n\ndef test_suite():\n   return unittest.makeSuite(MyTest, 'my test')\n\ndef main():\n   unittest.TextTestRunner().run(test_suite())\n\nif __name__==\"__main__\":\n    fix_path()\n    main()\n```\n\n----------------------------------------\n\nTITLE: Using Custom Comparison Operator with dtml-sqltest (DTML)\nDESCRIPTION: This DTML snippet shows how to use the `op` attribute within the `dtml-sqltest` tag to specify a different SQL comparison operator, in this case, `LIKE`. This allows for flexible query construction beyond the default equality check.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/RelationalDatabases.rst#2025-04-22_snippet_11\n\nLANGUAGE: DTML\nCODE:\n```\n<dtml-sqltest name type=\"string\" op=\"like\">\n```\n\n----------------------------------------\n\nTITLE: Providing Defaults for List Record Attributes in Zope using HTML\nDESCRIPTION: Illustrates setting a default value for a record attribute that is a list. The hidden input uses ':record:list:default' to specify that 'pizza.toppings' should default to ['All'] if no selections are made. The select element uses ':record:list:ignore_empty' to gather selected options into a list, ignoring empty submissions. If selections are made, they override the default.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zdgbook/ObjectPublishing.rst#2025-04-22_snippet_14\n\nLANGUAGE: html\nCODE:\n```\n<input type=\"hidden\"\n       name=\"pizza.toppings:record:list:default\"\n       value=\"All\">\n<select multiple name=\"pizza.toppings:record:list:ignore_empty\">\n  <option>Cheese</option>\n  <option>Onions</option>\n  <option>Anchovies</option>\n  <option>Olives</option>\n  <option>Garlic<option>\n</select>\n```\n\n----------------------------------------\n\nTITLE: Prepopulating Session Data on Add Using Zope Script (Python) - Python\nDESCRIPTION: This snippet demonstrates how to define a Python Script in Zope to initialize a session data object on creation. The script takes `sdo` (the session data object) and `toc` (transient object container) as arguments, and assigns the current time (via `context.ZopeTime()`) to the `date` key in the session data. Requires Zope, the `context` object within the script, and correct configuration of the method path in the session settings. Returns no explicit output but mutates the `sdo` in place; should be set as the path for the `onAdd` event handler.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/Sessions.rst#2025-04-22_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nsdo['date'] = context.ZopeTime()\n```\n\n----------------------------------------\n\nTITLE: Basic Conditional Rendering with dtml-if in DTML\nDESCRIPTION: Illustrates a basic `dtml-if` block. The paragraph \"There are too many monkeys!\" is rendered only if the Python expression 'monkeys > monkey_limit' evaluates to true. Requires 'monkeys' and 'monkey_limit' variables.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/DTML.rst#2025-04-22_snippet_27\n\nLANGUAGE: dtml\nCODE:\n```\n<p>How many monkeys are there?</p>\n\n<dtml-if expr=\"monkeys > monkey_limit\">\n  <p>There are too many monkeys!</p>\n</dtml-if>\n```\n\n----------------------------------------\n\nTITLE: Testing Multipart Form Data Handling with Unicode - Python\nDESCRIPTION: Validates server-side parsing and handling of multipart form data containing Unicode characters. This snippet creates a multipart/form-data POST (with realistic HTTP headers and boundaries) including fields with a UTF-8 encoded string, ensuring the server can decode and process Unicode form values. Test is dependent on endpoint implementation and correct test data construction.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/src/Testing/ZopeTestCase/zopedoctest/FunctionalDocTest.txt#2025-04-22_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n>>> ni_hao = '\\xe4\\xbd\\xa0\\xe5\\xa5\\xbd'  # utf-8 encoded\n>>> response = http(r\"\"\"\n... GET /test_folder_1_/index_html/set_cookie HTTP/1.1\n... Authorization: %s:%s\n... Content-Type: multipart/form-data; boundary=---------------------------968064918930967154199105236\n... Content-Length: 418\n...\n... -----------------------------968064918930967154199105236\n... Content-Disposition: form-data; name=\\\"field.title\\\"\n...\n... %s\n... -----------------------------968064918930967154199105236\n... Content-Disposition: form-data; name=\\\"field.description\\\"\n...\n... Details\n... -----------------------------968064918930967154199105236\n... Content-Disposition: form-data; name=\\\"field.somenumber\\\"\n...\n... 0\n... -----------------------------968064918930967154199105236\n... Content-Disposition: form-data; name=\\\"UPDATE_SUBMIT\\\"\n...\n... Add\n... -----------------------------968064918930967154199105236\n... Content-Disposition: form-data; name=\\\"add_input_name\\\"\n...\n... unicodetest\n... -----------------------------968064918930967154199105236--\n... \"\"\" % (user_name, user_password, ni_hao))\n\n>>> response.status\n200\n```\n\n----------------------------------------\n\nTITLE: Implementing Conflict Resolution for a Counter in Zope (Python)\nDESCRIPTION: Extends the Counter class with a _p_resolveConflict method to handle conflict errors. This method merges changes from conflicting transactions to resolve conflicts.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zdgbook/ZODBPersistentComponents.rst#2025-04-22_snippet_10\n\nLANGUAGE: Python\nCODE:\n```\nclass Counter(Persistent):\n\n    self.count = 0\n\n    def hit(self):\n        self.count = self.count + 1\n\n    def _p_resolveConflict(self, oldState, savedState, newState):\n\n        # Figure out how each state is different:\n        savedDiff= savedState['count'] - oldState['count']\n        newDiff= newState['count']- oldState['count']\n\n        # Apply both sets of changes to old state:\n        oldState['count'] = oldState['count'] + savedDiff + newDiff\n\n        return oldState\n```\n\n----------------------------------------\n\nTITLE: Using Nocall Expressions to Access Objects Directly\nDESCRIPTION: Demonstrates using nocall: prefix to prevent rendering objects and instead access their properties. Useful when working with templates or functions as objects.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/AdvZPT.rst#2025-04-22_snippet_28\n\nLANGUAGE: TAL\nCODE:\n```\n<span tal:define=\"page nocall:context/aPage\"\n      tal:content=\"string:${page/getId}: ${page/title}\">\nId: Title</span>\n```\n\n----------------------------------------\n\nTITLE: Registering Zope Product in __init__.py\nDESCRIPTION: Example of product initialization in __init__.py file, registering a product class with Zope using the registrar object.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zdgbook/Products.rst#2025-04-22_snippet_10\n\nLANGUAGE: Python\nCODE:\n```\nfrom PollProduct import PollProduct, addForm, addFunction\n\ndef initialize(registrar):\n    registrar.registerClass(\n        PollProduct,\n        constructors=(addForm, addFunction),\n        )\n```\n\n----------------------------------------\n\nTITLE: Using Python Expressions for Comparisons and Method Calls\nDESCRIPTION: Shows examples of using Python expressions in TAL for comparing variables and passing arguments to methods.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/ZPT.rst#2025-04-22_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n\"python: variable1 == variable2\"\n```\n\nLANGUAGE: python\nCODE:\n```\n\"python: context.objectValues(['Folder'])\"\n```\n\n----------------------------------------\n\nTITLE: RST Figure Directive - Status Frame\nDESCRIPTION: RST figure directive showing the Status Frame image with caption.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/UsingZope.rst#2025-04-22_snippet_3\n\nLANGUAGE: rst\nCODE:\n```\n.. figure:: Figures/statusframe.jpg\n \n   The Status Frame\n```\n\n----------------------------------------\n\nTITLE: Static HTML Table Headers in Zope Page Template\nDESCRIPTION: This HTML snippet shows the static table headers ('File' and 'Last Modified') within a Zope Page Template (`index_html.pt`). This represents the initial state before adding dynamic sorting links. These headers correspond to the columns displaying the file title/link and its last modification date in the file library table.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/SimpleExamples.rst#2025-04-22_snippet_14\n\nLANGUAGE: html\nCODE:\n```\n    <th width=\"300\">File</th>\n    <th>Last Modified</th>\n```\n\n----------------------------------------\n\nTITLE: Sending File Attachments via Email with DTML 'mime' and 'sendmail' Tags - DTML\nDESCRIPTION: Demonstrates constructing a multi-part MIME email message with DTML, including a plaintext body and a binary file attachment, to be sent using the 'sendmail' tag. Requires a valid 'recipient', 'resume_file' object providing a read method, and appropriate MIME header configuration. Supports base64 encoding for attachments and nested MIME parts.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/AppendixA.rst#2025-04-22_snippet_13\n\nLANGUAGE: dtml\nCODE:\n```\n<dtml-sendmail>\nTo: <dtml-var recipient>\nSubject: Resume\n<dtml-mime type=\"text/plain\" encode=\"7bit\">\n\nHi, please take a look at my resume.\n\n<dtml-boundary type=\"application/octet-stream\" disposition=\"attachment\" \nencode=\"base64\" filename_expr=\"resume_file.getId()\"><dtml-var expr=\"resume_file.read()\"></dtml-mime>\n</dtml-sendmail>\n```\n\n----------------------------------------\n\nTITLE: Generating DTML Report for Employee Hiring in Zope\nDESCRIPTION: This DTML snippet creates a report page for hiring a new employee. It calls the hire_employee method and displays a confirmation message with links to list employees and return to the hiring form.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/RelationalDatabases.rst#2025-04-22_snippet_6\n\nLANGUAGE: DTML\nCODE:\n```\n<dtml-var standard_html_header>\n\n<dtml-call hire_employee>\n\n<h1>Employee <dtml-var first> <dtml-var last> was Hired!</h1>\n\n<p><a href=\"listEmployees\">List Employees</a></p>\n\n<p><a href=\"hireEmployeeForm\">Back to hiring</a></p>\n\n<dtml-var standard_html_footer>\n```\n\n----------------------------------------\n\nTITLE: Declaring Class Permissions in ZCML\nDESCRIPTION: Demonstrates the use of the class directive in ZCML to declare permissions on Zope 2 content classes, noting that these permissions are primarily relevant for directly exposed methods.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/src/Products/Five/doc/features.txt#2025-04-22_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<class class=\".MyContentClass\">\n```\n\n----------------------------------------\n\nTITLE: TALES Not Expression Syntax - Text\nDESCRIPTION: Defines the syntax for the TALES 'not' expression, indicating expression negation. The 'not:' prefix is applied to any valid TALES expression. Implemented by the Zope template engine for logical inversion of values. No additional dependencies.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/AppendixC.rst#2025-04-22_snippet_24\n\nLANGUAGE: text\nCODE:\n```\nnot_expression ::= 'not:' expression\n```\n\n----------------------------------------\n\nTITLE: Using Python Expressions with Comparisons\nDESCRIPTION: Shows how to use Python expressions for comparisons in TAL conditions, enabling filtering of items based on their properties.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/AdvZPT.rst#2025-04-22_snippet_33\n\nLANGUAGE: TAL\nCODE:\n```\n<p tal:repeat=\"widget widgets\">\n  <span tal:condition=\"python:widget.type == 'gear'\">\n  Gear #<span tal:replace=\"repeat/widget/number>1</span>:\n  <span tal:replace=\"widget/name\">Name</span>\n  </span>\n</p>\n```\n\n----------------------------------------\n\nTITLE: Basic DTML File Listing Implementation\nDESCRIPTION: Creates a simple HTML unordered list of file links by iterating over File objects in the current folder using DTML tags.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/DTML.rst#2025-04-22_snippet_36\n\nLANGUAGE: dtml\nCODE:\n```\n<dtml-var standard_html_header>\n<ul>\n<dtml-in expr=\"objectValues('File')\">\n  <li><a href=\"&dtml-absolute_url;\"><dtml-var title_or_id></a></li>\n</dtml-in>\n</ul>\n<dtml-var standard_html_footer>\n```\n\n----------------------------------------\n\nTITLE: Checking for Existing Session Data in DTML\nDESCRIPTION: Shows how to check if session data exists for the current browser ID using the hasSessionData method of the session data manager.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/Sessions.rst#2025-04-22_snippet_11\n\nLANGUAGE: dtml\nCODE:\n```\n<dtml-if \"session_data_manager.hasSessionData()\">\n  The sessiondatamanager object has session data for the browser id\n  associated with this request.\n<dtml-else>\n  The sessiondatamanager object does not have session data for\n  the browser id associated with this request.\n</dtml-if>\n```\n\n----------------------------------------\n\nTITLE: Nested Iteration with Prefixes Using DTML 'let' and 'in' Tags - DTML\nDESCRIPTION: Illustrates nested iteration over two sets (rows and cols) using DTML 'let' and 'in' tags with prefix attributes, computing and displaying multiplications and conditional values. This requires that the DTML context supports variable assignment and allows calculation expressions within 'dtml-var'. Outputs multiplication results and totals, with inner and outer loop variable scoping.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/AppendixA.rst#2025-04-22_snippet_7\n\nLANGUAGE: dtml\nCODE:\n```\n<dtml-let rows=\"(1,2,3)\" cols=\"(4,5,6)\">\n  <dtml-in rows prefix=\"row\">\n    <dtml-in cols prefix=\"col\">\n      <dtml-var expr=\"row_item * col_item\"><br>\n      <dtml-if col_end>\n        <dtml-var expr=\"col_total_item * row_mean_item\">\n      </dtml-if>\n    </dtml-in>\n  </dtml-in>\n</dtml-let>\n```\n\n----------------------------------------\n\nTITLE: Creating Zope Instance with mkwsgiinstance\nDESCRIPTION: Uses the mkwsgiinstance script to create a new Zope instance in the current directory. The -d option specifies the directory for the instance home.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/operation.rst#2025-04-22_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ bin/mkwsgiinstance -d .\n```\n\n----------------------------------------\n\nTITLE: Acquisition-Based Object Hierarchy Implementation\nDESCRIPTION: Demonstrates object hierarchy setup using Zope's acquisition system. Shows how to create traversable node structures with implicit acquisition support.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zdgbook/ObjectPublishing.rst#2025-04-22_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom Acquisition import Implicit\nfrom ZPublisher import zpublish\n\n@zpublish\nclass Node(Implicit):\n    ...\n\nfruit=Node()\nfruit.apple=Node()\nfruit.orange=Node()\nfruit.apple.strawberry=Node()\nfruit.orange.banana=Node()\n```\n\n----------------------------------------\n\nTITLE: Basic sqltest Tag Usage\nDESCRIPTION: The sqltest tag creates a SQL condition test by comparing a column against a variable. This example shows a simple name comparison with non-blank string type.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/AppendixA.rst#2025-04-22_snippet_22\n\nLANGUAGE: dtml\nCODE:\n```\nselect * from employees\n  where <dtml-sqltest name type=\"nb\">\n```\n\n----------------------------------------\n\nTITLE: Defining Basic Management Views in Zope Product Class (Python)\nDESCRIPTION: This snippet shows the basic structure of the `manage_options` class attribute in a Zope product class. It's a tuple of dictionaries, where each dictionary defines a management view tab with a 'label' (display text) and an 'action' (the method or URL called when the tab is clicked). Optional keys like 'target' and 'help' can also be included.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zdgbook/Products.rst#2025-04-22_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nmanage_options=(\n    {'label' : 'Edit', 'action' : 'editMethod'},\n    {'label' : 'View', 'action' : 'viewMethod'},\n    )\n```\n\n----------------------------------------\n\nTITLE: Creating XML Namespace Attributes with TAL in Zope\nDESCRIPTION: Demonstrates how to use TAL to create attributes with XML namespaces by prefixing the attribute name with the namespace.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/AdvZPT.rst#2025-04-22_snippet_7\n\nLANGUAGE: XML\nCODE:\n```\n<Description tal:attributes=\"dc:Creator context/owner/getUserName\">\n    Description</Description>\n```\n\n----------------------------------------\n\nTITLE: Creating Symbolic Links for Zope Startup in Linux Run Levels\nDESCRIPTION: Commands to create symbolic links in the appropriate run level directories to enable automatic Zope startup at boot time. This links the main Zope startup script to run levels 3 and 5.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/MaintainingZope.rst#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n# cd /etc/rc.d/rc3.d\n# ln -s /etc/rc.d/init.d/zope S99zope\n# cd /etc/rc.d/rc5.d\n# ln -s /etc/rc.d/init.d/zope S99zope\n```\n\n----------------------------------------\n\nTITLE: Basic sqlvar Tag Usage\nDESCRIPTION: The sqlvar tag safely inserts variables into SQL code with proper escaping. This example shows inserting a non-blank string variable into a WHERE clause.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/AppendixA.rst#2025-04-22_snippet_26\n\nLANGUAGE: dtml\nCODE:\n```\nselect * from employees \n  where name=<dtml-sqlvar name type=\"nb\">\n```\n\n----------------------------------------\n\nTITLE: Using the Underscore Namespace for Iteration in DTML\nDESCRIPTION: Demonstrates how to use the underscore namespace to access Python's range function for iteration in DTML.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/AdvDTML.rst#2025-04-22_snippet_10\n\nLANGUAGE: html\nCODE:\n```\n<dtml-var standard_html_header>\n\n<ul>\n<dtml-in expr=\"_.range(3)\">\n  <li><dtml-var sequence-item>: My name is Bob.</li>\n</dtml-in>\n</ul>\n\n<dtml-var standard_html_footer>\n```\n\n----------------------------------------\n\nTITLE: Installing Sphinx for Python Documentation Generation\nDESCRIPTION: This snippet shows how to install Sphinx, a documentation generation tool, using easy_install. It's recommended to use a virtualenv to isolate the installation.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zdgbook/README.txt#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\neasy_install Sphinx\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Python Class Inheritance\nDESCRIPTION: This snippet defines Python classes to demonstrate class inheritance, where a subclass inherits behavior from multiple superclasses. It shows the method resolution order when methods are called on an instance of the Sub class.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/Acquisition.rst#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n>>> class SuperA:\n...     def amethod(self):\n...         print \"I am the 'amethod' method of the SuperA class\"\n...     def anothermethod(self):\n...         print \"I am the 'anothermethod' method of the SuperA class\"\n...\n>>> class SuperB:\n...     def amethod(self):\n...         print \"I am the 'amethod' method of the SuperB class\"\n...     def anothermethod(self):\n...         print \"I am the 'anothermethod' method of the SuperB class\"\n...     def athirdmethod(self):\n...         print \"I am the 'athirdmethod' method of the SuperB class\"\n...\n>>> class Sub(SuperA, SuperB):\n...     def amethod(self):\n...         print \"I am the 'amethod' method of the Sub class\"\n...\n```\n\n----------------------------------------\n\nTITLE: Calling Scripts from Page Templates without displaying output\nDESCRIPTION: Shows how to call a script from a Page Template without inserting the script's return value into the rendered output. This uses the 'define' TAL attribute with a dummy variable.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/ScriptingZope.rst#2025-04-22_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n<div tal:define=\"dummy context/hippo/feed\" />\n```\n\n----------------------------------------\n\nTITLE: Defining a PythonFilteredSet Expression for DTML Methods\nDESCRIPTION: This Python expression is used within a Zope PythonFilteredSet. It evaluates whether an indexed object 'o' has a 'meta_type' attribute equal to 'DTML Method'. This expression allows TopicIndexes to efficiently categorize objects based on their type.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/SearchingZCatalog.rst#2025-04-22_snippet_11\n\nLANGUAGE: python\nCODE:\n```\no.meta_type=='DTML Method'\n```\n\n----------------------------------------\n\nTITLE: Using a DTML block tag\nDESCRIPTION: This example shows the structure of a DTML block tag, specifically the 'dtml-in' tag for iterating over a sequence.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/DTML.rst#2025-04-22_snippet_1\n\nLANGUAGE: dtml\nCODE:\n```\n<dtml-in mySequence>\n\n    this is a text inside the dtml-in tag block\n\n</dtml-in>\n```\n\n----------------------------------------\n\nTITLE: Configuring Zope with ZEO and File Storage\nDESCRIPTION: This snippet demonstrates a Zope configuration using ZEO (Zope Enterprise Objects) with file storage and temporary storage. It defines the ZEO socket path, main file storage location, and a temporary storage for sessioning.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/Sessions.rst#2025-04-22_snippet_22\n\nLANGUAGE: zconfig\nCODE:\n```\n%define INSTANCE /path/to/instance/dir\n\n<zeo>\n    address $INSTANCE/var/zeosocket\n</zeo>\n\n<filestorage main>\n    path $INSTANCE/var/Data.fs\n</filestorage>\n\n<temporarystorage temporary>\n  name temporary storage for sessioning\n</temporarystorage>\n```\n\n----------------------------------------\n\nTITLE: Testing for Variables Using TALES Exists - HTML\nDESCRIPTION: Demonstrates conditionally displaying a message in HTML when a form variable does not exist using a TALES 'exists' and 'not' expression inside a TAL condition. Requires a Zope template evaluation context with the 'request/form/number' variable possibly present. The output displays a <p> element only if the variable 'number' is missing.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/AppendixC.rst#2025-04-22_snippet_20\n\nLANGUAGE: html\nCODE:\n```\n<p tal:condition=\"not:exists:request/form/number\">\n  Please enter a number between 0 and 5\n</p>\n```\n\n----------------------------------------\n\nTITLE: Creating New Translation File for Zope Documentation\nDESCRIPTION: Copies a .pot file to create a new .po file for a specific language (Japanese in this example) in the Zope documentation translation process.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/maintenance.rst#2025-04-22_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n$ mkdir -p locale/ja/LC_MESSAGES\n$ cp _build/gettext/maintenance.pot locale/ja/LC_MESSAGES/maintenance.po\n```\n\n----------------------------------------\n\nTITLE: Registering Product Class with Icon in Zope\nDESCRIPTION: Initialization code that registers a Zope product class with an icon. The icon parameter specifies the path to a 16x16 GIF image in the product's www directory.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zdgbook/Products.rst#2025-04-22_snippet_24\n\nLANGUAGE: python\nCODE:\n```\ndef initialize(registrar):\n    registrar.registerClass(\n        PollProduct,\n        constructors=(addForm, addFunction),\n        icon='www/poll.gif'\n        )\n```\n\n----------------------------------------\n\nTITLE: Registering Viewlets with Different Permissions and Asserting Rendering Based on User Authentication - Python\nDESCRIPTION: Registers two viewlets using ZCML <viewlet> directives, each with different permission requirements, and verifies rendering for manager and anonymous users. Relies on os.path, file handling, zcml.load_string, and the http testing interface to make browser requests—authorization headers control test subject identity. Confirms both viewlets display for managers but only public ones for anonymous. Important for security coverage in Zope testing environments. Inputs include template paths; outputs are validated HTML strings.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/src/Products/Five/viewlet/directives.txt#2025-04-22_snippet_15\n\nLANGUAGE: python\nCODE:\n```\n>>> weatherTemplate = os.path.join(temp_dir, 'weather2.pt')\n>>> with open(weatherTemplate, 'w') as fd:\n...     _ = fd.write('''\n... <div>sunny</div>\n... ''')\n\n>>> context = zcml.load_string('''\n... <configure xmlns=\"http://namespaces.zope.org/browser\" i18n_domain=\"zope\">\n...   <viewlet\n...       name=\"weather3\"\n...       manager=\"Products.Five.viewlet.tests.INewColumn\"\n...       template=\"%s\"\n...       permission=\"zope.Public\"\n...       />\n... </configure>\n... ''' % weatherTemplate)\n\n>>> context = zcml.load_string('''\n... <configure xmlns=\"http://namespaces.zope.org/browser\" i18n_domain=\"zope\">\n...   <viewlet\n...       name=\"weather4\"\n...       manager=\"Products.Five.viewlet.tests.INewColumn\"\n...       template=\"%s\"\n...       permission=\"zope2.ViewManagementScreens\"\n...       />\n... </configure>\n... ''' % weatherTemplate)\n\n>>> print(http(r\"\"\"\n... GET /test_folder_1_/ftf/@@securitytest_view HTTP/1.1\n... Authorization: Basic manager:r00t\n... \"\"\", handle_errors=False))\nHTTP/1.1 200 OK\n...\n     <h1>Weather</h1>\n     <div>\n     <div>sunny</div>\n     <div>sunny</div>\n     </div>\n...\n\n>>> print(http(r\"\"\"\n... GET /test_folder_1_/ftf/@@securitytest_view HTTP/1.1\n... \"\"\", handle_errors=False))\nHTTP/1.1 200 OK\n...\n     <h1>Weather</h1>\n     <div>\n     <div>sunny</div>\n     </div>\n...\n```\n\n----------------------------------------\n\nTITLE: Using aq_acquire Function in Python\nDESCRIPTION: Function signature for aq_acquire which allows explicit acquisition of object attributes. Accepts filter, extra, explicit, default, and containment parameters to control acquisition behavior.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zdgbook/Acquisition.rst#2025-04-22_snippet_7\n\nLANGUAGE: python\nCODE:\n```\naq_acquire(object, name [, filter, extra, explicit, default, containment])\n```\n\n----------------------------------------\n\nTITLE: Configuring Root ZCML in Zope\nDESCRIPTION: Demonstrates the placement of a site.zcml file in the Zope instance's etc directory to serve as the root of the ZCML configuration tree. If not present, Five falls back to fallback.zcml.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/src/Products/Five/doc/features.txt#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<site.zcml>\n```\n\n----------------------------------------\n\nTITLE: Running Zope in Debug Mode\nDESCRIPTION: Command to run Zope in debug mode. The -d or --debug option enables debug mode.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/operation.rst#2025-04-22_snippet_5\n\nLANGUAGE: console\nCODE:\n```\n$ bin/runwsgi -dv etc/zope.ini\nStarting server in PID 55111.\nserving on http://127.0.0.1:8080\n```\n\n----------------------------------------\n\nTITLE: Zope HTTP Server Configuration\nDESCRIPTION: Example configuration for Zope's HTTP server showing port settings in zope.conf file.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/InstallingZope.rst#2025-04-22_snippet_6\n\nLANGUAGE: conf\nCODE:\n```\n<http-server>\n  # valid keys are \"address\" and \"force-connection-close\"\n  address 8080\n</http-server>\n\n<webdav-source-server>\n  ...\n</webdav-source-server>\n```\n\n----------------------------------------\n\nTITLE: Constructing a Zope Object URL\nDESCRIPTION: This example shows how to construct a full URL for a Zope object by combining the host, port, and object path. It demonstrates accessing an object named 'Bob' on a local Zope server.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/ZopeArchitecture.rst#2025-04-22_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nhttp://localhost:8080/Bob\n```\n\n----------------------------------------\n\nTITLE: Defining a Python Script with Parameters in Zope\nDESCRIPTION: Shows the structure of a Script (Python) object named 'getHippo' that takes a 'trap' parameter and returns a formatted string.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/DTML.rst#2025-04-22_snippet_13\n\nLANGUAGE: python\nCODE:\n```\n## Script (Python) \"getHippo\"\n##bind container=container\n##bind context=context\n##bind namespace=\n##bind script=script\n##bind subpath=traverse_subpath\n##parameters=trap\n##title=\n##\nreturn 'The hippo was captured with a %s.' % trap\n```\n\n----------------------------------------\n\nTITLE: Importing Viewlet Interfaces in Python\nDESCRIPTION: Imports the necessary interfaces for working with viewlets in Zope.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/src/Products/Five/viewlet/README.txt#2025-04-22_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nfrom zope.viewlet import interfaces\n```\n\n----------------------------------------\n\nTITLE: Implementing Viewlets in Zope\nDESCRIPTION: Defines two example viewlet classes (WeatherBox and SportBox) that implement the IViewlet interface.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/src/Products/Five/viewlet/README.txt#2025-04-22_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\n@zope.interface.implementer(interfaces.IViewlet)\nclass WeatherBox(object):\n\n    def __init__(self, context, request, view, manager):\n        self.__parent__ = view\n        self.context = context\n\n    def update(self):\n        pass\n\n    def render(self):\n        return u'<div class=\"box\">It is sunny today!</div>'\n\n@zope.interface.implementer(interfaces.IViewlet)\nclass SportBox(object):\n\n    def __init__(self, context, request, view, manager):\n        self.__parent__ = view\n        self.context = context\n\n    def update(self):\n        pass\n\n    def render(self):\n        return u'<div class=\"box\">Patriots (23) : Steelers (7)</div>'\n```\n\n----------------------------------------\n\nTITLE: Defining DTML Method on Zope Product Class\nDESCRIPTION: Python code showing how to associate a DTML template with a product class by using the DTML constructor. This method protects the form with the 'View management screens' permission.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zdgbook/Products.rst#2025-04-22_snippet_20\n\nLANGUAGE: python\nCODE:\n```\nclass PollProduct(...):\n    ...\n\n    security.declareProtected('View management screens', 'editPollForm')\n    editPollForm = DTML('dtml/editPollForm', globals())\n```\n\n----------------------------------------\n\nTITLE: Zope Published Arithmetic Function with Type Conversion - Python\nDESCRIPTION: This published function divides a number by three and returns the result. The @zpublish decorator makes the function accessible to Zope's HTTP publishing mechanism. It expects that request parameters for 'number' may be provided as strings, but Zope's type converters (using URL query syntax like 'number:int=66') handle conversion to a numeric type. The function thus operates on a number argument (typically int or float) and returns a floating-point result. It relies on Zope's publisher, and improper argument conversion will result in errors if types do not match expectations.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zdgbook/ObjectPublishing.rst#2025-04-22_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n    @zpublish\\n    def one_third(number):\\n        \"\"\"returns the number divided by three\"\"\"\\n        return number / 3.0\\n\n```\n\n----------------------------------------\n\nTITLE: Allowing an Entire Module for Through-the-Web Import Using allow_module in Zope (Python)\nDESCRIPTION: Utilizes the utility function allow_module from Products.PythonScripts.Utility to declare all functions in the 'base64' module as public. This enables unrestricted import of base64's functions from through-the-web scripts. Dependencies: Products.PythonScripts.Utility, base64 module. Usage is restricted to modules known to be safe for such open imports; not suitable for modules with sensitive or privileged operations.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zdgbook/Security.rst#2025-04-22_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nfrom Products.PythonScripts.Utility import allow_module\nallow_module('base64')\n```\n\n----------------------------------------\n\nTITLE: Defining Security and String Functions in Zope\nDESCRIPTION: This snippet defines several security-related functions and string operations in Zope. It includes functions for user authentication, security validation, and string manipulation.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/AppendixA.rst#2025-04-22_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\nSecurityGetUser()\n  Return the current user object. This is normally the same as the\n  'REQUEST.AUTHENTICATED_USER' object. However, the 'AUTHENTICATED_USER' object\n  is insecure since it can be replaced.\n\nSecurityValidate([object] [,parent] [,name] [,value])\n  Return true if the value is accessible to the current user. 'object' is the\n  object the value was accessed in, 'parent' is the container of the value, and\n  'name' is the named used to access the value (for example, if it was obtained\n  via 'getattr'). You may omit some of the arguments, however it is best to\n  provide all available arguments.\n\nSecurityValidateValue(object)\n  Return true if the object is accessible to the current user. This function is\n  the same as calling 'SecurityValidate(None, None, None, object)'.\n\nstr(object)\n  Return a string containing a nicely printable representation of an object.\n  For strings, this returns the string itself.\n\ntest(condition, result [,condition, result]... [,default])\n  Takes one or more condition, result pairs and returns the result of the first\n  true condition. Only one result is returned, even if more than one condition\n  is true. If no condition is true and a default is given, the default is\n  returned. If no condition is true and there is no default, None is returned.\n\nunichr(number)\n  Return a unicode string representing the value of number as a unicode\n  character. This is the inverse of ord() for unicode characters.\n\nunicode(string[, encoding[, errors ] ])\n  Decodes string using the codec for encoding. Error handling is done according\n  to errors. The default behavior is to decode UTF-8 in strict mode, meaning\n  that encoding errors raise ValueError.\n```\n\n----------------------------------------\n\nTITLE: Using TAL Attributes to Replace Link URLs in HTML\nDESCRIPTION: Demonstrates using tal:attributes to dynamically replace the href attribute of an anchor element with a URL derived from the context object.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/AppendixC.rst#2025-04-22_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<a href=\"/sample/link.html\"\n   tal:attributes=\"href context/sub/absolute_url\">\n```\n\n----------------------------------------\n\nTITLE: Checking for Outdated Packages in Zope\nDESCRIPTION: Uses checkversions to identify outdated or updated packages in the versions.cfg and versions-prod.cfg files, then updates the buildout.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/maintenance.rst#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ bin/checkversions versions-prod.cfg\n$ bin/checkversions versions.cfg\n$ bin/buildout\n```\n\n----------------------------------------\n\nTITLE: Adapting a Zope Product Class for OFS.SimpleItem.Item in Python\nDESCRIPTION: This code snippet shows how to modify a Zope Product class to work correctly with the OFS.SimpleItem.Item base class, including adding necessary attributes and modifying the constructor.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zdgbook/Products.rst#2025-04-22_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nclass PollProduct(..., Item):\n\n    meta_type = 'Poll'\n    ...\n\n    def __init__(self, id, question, responses):\n        self.id = id\n        self._question = question\n        self._responses = responses\n        self._votes = {}\n        for i in range(len(responses)):\n            self._votes[i] = 0\n```\n\n----------------------------------------\n\nTITLE: Setting Up User, Folder, and Registering a ViewletManager via ZCML - Python\nDESCRIPTION: Prepares prerequisites for viewlet security testing: creates a manager user, adds a folder via OFS.Folder, and registers a custom viewlet manager using a ZCML configuration. Required dependencies include OFS.Folder, zcml, and a defined INewColumn interface. No parameters—intended for test setup. Outputs new folder and registered manager; recommended for initialization before running further viewlet-related tests.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/src/Products/Five/viewlet/directives.txt#2025-04-22_snippet_13\n\nLANGUAGE: python\nCODE:\n```\n>>> uf = self.folder.acl_users\n>>> _ignored = uf._doAddUser('manager', 'r00t', ['Manager'], [])\n\n>>> from OFS.Folder import manage_addFolder\n>>> manage_addFolder(self.folder, 'ftf')\n\n>>> from Products.Five.viewlet.tests import INewColumn\n\n>>> context = zcml.load_string('''\n... <configure xmlns=\"http://namespaces.zope.org/browser\" i18n_domain=\"zope\">\n...   <viewletManager\n...       name=\"newcolumn\"\n...       permission=\"zope2.View\"\n...       provides=\"Products.Five.viewlet.tests.INewColumn\"\n...       />\n... </configure>\n... ''')\n```\n\n----------------------------------------\n\nTITLE: Installing Zope with pip\nDESCRIPTION: Commands to install Zope and its dependencies using pip in a virtual environment.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/INSTALL.rst#2025-04-22_snippet_5\n\nLANGUAGE: console\nCODE:\n```\n$ python3.10 -m venv zope\n$ cd zope\n$ bin/pip install -U pip wheel\n$ bin/pip install Zope[wsgi] \\\n  -c https://zopefoundation.github.io/Zope/releases/5.0/constraints.txt\n```\n\n----------------------------------------\n\nTITLE: URL and Title Generation with DTML Variables\nDESCRIPTION: Shows how to create HTML links using object URLs and titles with entity syntax and attributes\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/AppendixA.rst#2025-04-22_snippet_36\n\nLANGUAGE: dtml\nCODE:\n```\n<a href=\"&dtml.url-doc;\"><dtml-var doc fmt=\"title_or_id\"></a>\n```\n\n----------------------------------------\n\nTITLE: Querying Interface Information in Zope\nDESCRIPTION: Shows how to query information from interfaces, including getting the names of items described by an interface and retrieving more detailed descriptions of interface items.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zdgbook/ComponentsAndInterfaces.rst#2025-04-22_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n>>> IHello.names()\ndict_keys(['hello'])\n\n>>> IHello.namesAndDescriptions()\ndict_items([('hello', <zope.interface.interface.Method object at 0x7fc6875110f0>)])\n```\n\n----------------------------------------\n\nTITLE: Creating a Zope Product Tarball\nDESCRIPTION: Demonstrates how to package a Zope product as a gzipped tar archive from the Products directory. This ensures the product can be easily unpacked and installed.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zdgbook/Products.rst#2025-04-22_snippet_30\n\nLANGUAGE: bash\nCODE:\n```\n$ tar zcvf MyProduct-1.0.1.tgz MyProduct\n```\n\n----------------------------------------\n\nTITLE: Advanced tree Tag with Custom Branches\nDESCRIPTION: This example demonstrates using the tree tag with a custom root object and a custom branches method. It displays each node's ID in the tree structure.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/AppendixA.rst#2025-04-22_snippet_28\n\nLANGUAGE: dtml\nCODE:\n```\n<dtml-tree expr=\"folder.object\" branches=\"objectValues\">\n  Node id : <dtml-var getId>\n</dtml-tree>\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Variable Lookup Issues in DTML\nDESCRIPTION: This snippet shows a common error in DTML where a document named 'zooName' conflicts with a form input of the same name, causing infinite recursion. It demonstrates the need for understanding DTML namespaces.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/AdvDTML.rst#2025-04-22_snippet_0\n\nLANGUAGE: DTML\nCODE:\n```\n<dtml-var standard_html_header>\n\n  <dtml-if zooName>\n\n    <p><dtml-var zooName></p>\n\n  <dtml-else>\n\n    <form action=\"<dtml-var URL>\" method=\"GET\">\n      <input name=\"zooName\">\n      <input type=\"submit\" value=\"What is zooName?\">\n    </form>\n\n  </dtml-if>  \n\n<dtml-var standard_html_footer>\n```\n\n----------------------------------------\n\nTITLE: Calling Z SQL Methods Explicitly in DTML (DTML)\nDESCRIPTION: This DTML template demonstrates how to call a Z SQL Method (`employee_by_id`) directly and pass an explicit keyword argument (`emp_id=42`). The `dtml-in` tag iterates over the result set returned by the method call.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/RelationalDatabases.rst#2025-04-22_snippet_20\n\nLANGUAGE: DTML\nCODE:\n```\n<dtml-var standard_html_header>\n\n  <dtml-in expr=\"employee_by_id(emp_id=42)\">\n    <h1><dtml-var last>, <dtml-var first></h1>\n\n    <p><dtml-var first>'s employee id is <dtml-var emp_id>.  <dtml-var\n    first> makes <dtml-var salary> Euro per year.</p>\n  </dtml-in>\n\n<dtml-var standard_html_footer>\n```\n\n----------------------------------------\n\nTITLE: Configuring Waitress Server to Expose Tracebacks (INI)\nDESCRIPTION: This INI configuration snippet shows how to configure the 'waitress' WSGI server directly. Setting 'expose_tracebacks = True' instructs waitress to display detailed exception tracebacks in the web browser when an error occurs, aiding in debugging.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/operation.rst#2025-04-22_snippet_21\n\nLANGUAGE: ini\nCODE:\n```\n[server:main]\nuse = egg:waitress#main\nhost = 127.0.0.1\nport = 8080\nexpose_tracebacks = True\n```\n\n----------------------------------------\n\nTITLE: DTML Method Call Signature in Python\nDESCRIPTION: Defines the function signature for DTML method calls. The client parameter typically represents the context, mapping is often referred to as '_' in DTML text, and keyword arguments are referenced by name in the DTML body.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/AppendixE.rst#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndef __call__(client=None, mapping={}, **kw)\n```\n\n----------------------------------------\n\nTITLE: Registering a Size Viewlet Component in Zope\nDESCRIPTION: Registers the SizeViewlet as an adapter for IFile objects with the IDefaultBrowserLayer, using zope.component.provideAdapter. This makes the viewlet available for use in the contents display.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/src/Products/Five/viewlet/README.txt#2025-04-22_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nzope.component.provideAdapter(\n    SizeViewlet,\n    (IFile, IDefaultBrowserLayer,\n     zope.interface.Interface, interfaces.IViewletManager),\n    interfaces.IViewlet, name='size')\n```\n\n----------------------------------------\n\nTITLE: Creating Super User for Emergency Access\nDESCRIPTION: This snippet demonstrates how to create a super user for emergency access to Zope by creating an 'access' file with login credentials.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/operation.rst#2025-04-22_snippet_16\n\nLANGUAGE: console\nCODE:\n```\nsuperuser:mysecretpassword\n```\n\n----------------------------------------\n\nTITLE: Implementing ICoolDocument interface in CoolDocument class (Python)\nDESCRIPTION: Marking the CoolDocument class with the ICoolDocument interface using the @implementer decorator.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/src/OFS/event.txt#2025-04-22_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\nfrom zope.interface import implementer\nfrom Products.CoolProduct.interfaces import ICoolDocument\n@implementer(ICoolDocument)\nclass CoolDocument(...):\n    ...\n```\n\n----------------------------------------\n\nTITLE: Defining a Page Template and Registering a Zope Page via ZCML - Python\nDESCRIPTION: Creates an HTML template with TAL and registers a page using a ZCML <page> directive. Dependencies: os.path for file handling, temp_dir for storage, zcml for configuration. Writes a file-based TAL template that references a viewlet manager and then registers the page via ZCML. Takes a path (template) as input; on output, makes the template available as a browser page for future tests. Requires a running Zope test environment with file system access.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/src/Products/Five/viewlet/directives.txt#2025-04-22_snippet_14\n\nLANGUAGE: python\nCODE:\n```\n>>> testTemplate = os.path.join(temp_dir, 'test.pt')\n>>> with open(testTemplate, 'w') as fd:\n...     _ = fd.write('''\n... <html>\n...   <body>\n...     <h1>Weather</h1>\n...     <div tal:content=\"structure provider:newcolumn\" />\n...   </body>\n... </html>\n... ''')\n>>> context = zcml.load_string('''\n... <configure xmlns=\"http://namespaces.zope.org/browser\" i18n_domain=\"zope\">\n...   <page\n...       for=\"*\"\n...       name=\"securitytest_view\"\n...       template=\"%s\"\n...       permission=\"zope.Public\"\n...       />\n... </configure>\n... ''' % testTemplate)\n```\n\n----------------------------------------\n\nTITLE: Registering Resource Directory in Zope ZCML\nDESCRIPTION: Demonstrates how to register a resource directory for custom assets in Zope using ZCML configuration.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/migrations/zope4/code.rst#2025-04-22_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<browser:resourceDirectory\n    name=\"zmi\"\n    directory=\"resources\" />\n```\n\n----------------------------------------\n\nTITLE: Running Zope in Foreground\nDESCRIPTION: Command to run Zope in the foreground without detaching from the console. The -v option enables verbose output.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/operation.rst#2025-04-22_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n$ bin/runwsgi -v etc/zope.ini\nStarting server in PID 24934.\nserving on http://127.0.0.1:8080\n```\n\n----------------------------------------\n\nTITLE: Setting up Zope Test Environment\nDESCRIPTION: Initializes test fixtures including ZCML configuration loading and folder creation for resource testing\nSOURCE: https://github.com/zopefoundation/zope/blob/master/src/Products/Five/browser/tests/resource_ftest.txt#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport Products.Five.browser.tests\nfrom Zope2.App import zcml\nzcml.load_config(\"configure.zcml\", Products.Five)\nzcml.load_config('resource.zcml', package=Products.Five.browser.tests)\n\nfrom Products.Five.tests.testing import manage_addFiveTraversableFolder\nmanage_addFiveTraversableFolder(self.folder, 'testoid', 'Testoid')\n```\n\n----------------------------------------\n\nTITLE: Implementing Enhanced Dynamic Message Box with Message Type\nDESCRIPTION: Further extends the message box to support both message text and type through multiple TAL namespace data interfaces.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/src/Products/Five/browser/tests/provider.txt#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n@zope.interface.implementer(IMessageType)\nclass BetterDynamicMessageBox(DynamicMessageBox):\n    type = None\n\n    def render(self):\n        return u'<div class=\"box,%s\">%s</div>' %(self.type, self.message)\n```\n\n----------------------------------------\n\nTITLE: Acquisition-based Component Look-up in Python\nDESCRIPTION: This code demonstrates how the IComponentLookup adapter works with acquisition. It creates nested ObjectManager instances and shows that the adapter can find the closest site's component registry.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/src/Products/Five/component/component.txt#2025-04-22_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\nob = ObjectManager()\nob2 = ObjectManager()\nob = ob.__of__(site)\nob2 = ob2.__of__(ob)\nIComponentLookup(ob2) is components\nTrue\n```\n\n----------------------------------------\n\nTITLE: Checking Event Type Using Parent Information in Python\nDESCRIPTION: These snippets demonstrate how to determine the type of event by checking the oldParent and newParent attributes of the event object, providing an alternative to the providedBy() method.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/src/OFS/event.txt#2025-04-22_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nif event.oldParent is not None:\n```\n\nLANGUAGE: python\nCODE:\n```\nif event.newParent is not None:\n```\n\n----------------------------------------\n\nTITLE: Calling a DTML Object from a Python Script\nDESCRIPTION: Demonstrates how to call a DTML Method or Document from within a Python script, passing the container and REQUEST objects.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/AdvDTML.rst#2025-04-22_snippet_37\n\nLANGUAGE: python\nCODE:\n```\ndtmlMethodName = 'index_html'\nreturn context[dtmlMethodName](container, container.REQUEST)\n```\n\n----------------------------------------\n\nTITLE: Defining a Method Call dtml-if Condition in DTML\nDESCRIPTION: An example of a DTML `dtml-if` tag condition using the expression syntax (`expr`). The condition `expr=\"objectValues('File')\"` calls the `objectValues` method with the argument 'File' and evaluates to true if the method returns a true value.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/DTML.rst#2025-04-22_snippet_26\n\nLANGUAGE: dtml\nCODE:\n```\nexpr=\"objectValues('File')\"\n```\n\n----------------------------------------\n\nTITLE: Basic Unqualified SQL Query Example (SQL)\nDESCRIPTION: A simple, unqualified SQL query selecting all columns and rows from the 'employees' table. This serves as a baseline example before demonstrating dynamic qualification using DTML tags.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/RelationalDatabases.rst#2025-04-22_snippet_13\n\nLANGUAGE: SQL\nCODE:\n```\nselect * from employees\n```\n\n----------------------------------------\n\nTITLE: Testing HTTP GET Request - Python\nDESCRIPTION: Demonstrates a doctest-style HTTP GET request to the Zope application's root object to verify response status, headers, and body content. This snippet uses the test HTTP function to check typical content retrieval in functional tests. No external dependencies except the test setup are required, and correct configuration of Zope's test infrastructure is assumed.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/src/Testing/ZopeTestCase/zopedoctest/FunctionalDocTest.txt#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n>>> response = http(r\"\"\"\n... GET /test_folder_1_/index_html HTTP/1.1\n... \"\"\", handle_errors=False)\n\n>>> response.status\n200\n>>> response.headers == {\n...     'content-length': '5', 'content-type': 'text/plain; charset=utf-8'}\nTrue\n>>> response.getBody() == b'index'\nTrue\n```\n\n----------------------------------------\n\nTITLE: Implementing Name-Based Sorter Utility\nDESCRIPTION: Implements a sorter utility that sorts container items by their __name__ attribute using Python's sorted function with an attrgetter key function. This utility is registered with the name 'name'.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/src/Products/Five/viewlet/README.txt#2025-04-22_snippet_18\n\nLANGUAGE: python\nCODE:\n```\n@zope.interface.implementer(ISorter)\nclass SortByName(object):\n\n    def sort(self, values):\n        return sorted(values, key=attrgetter('__name__'))\n\nzope.component.provideUtility(SortByName(), name='name')\n```\n\n----------------------------------------\n\nTITLE: Generic Linux Startup Script for Zope\nDESCRIPTION: A shell script template for automatically starting and stopping Zope on Linux systems. It includes configuration for paths, startup options, and provides start/stop/restart functionality.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/MaintainingZope.rst#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n#!/bin/sh\n\n# set paths and startup options\nZOPE_HOME=/usr/local/zope\nPYTHON_BIN=$ZOPE_HOME/bin/python\nZOPE_OPTS=\" -u zope -P 8000\"\nEVENT_LOG_FILE=$ZOPE_HOME/var/event.log\nEVENT_LOG_SEVERITY=-300\n# define more environment variables ...\n\nexport EVENT_LOG_FILE  EVENT_LOG_SEVERITY\n# export more environment variables ...\n\numask 077\ncd $ZOPE_HOME\n\ncase \"$1\" in \n\nstart)\n# start service\nexec $PYTHON_BIN $ZOPE_HOME/z2.py $ZOPE_OPTS\n\n# if you want to start in debug mode (not recommended for\n# production systems):\n# exec $PYTHON_BIN $ZOPE_HOME/z2.py $ZOPE_OPTS -D &\n;;\nstop)\n# stop service\nkill `cat $ZOPE_HOME/var/Z2.pid`\n;;\nrestart)\n# stop service and restart\n$0 stop\n$0 start\n;;            \n*)\necho \"Usage: $0 {start|stop|restart}\"\nexit 1\n;;\nesac\n```\n\n----------------------------------------\n\nTITLE: Accessing Result Object Length in Python\nDESCRIPTION: A Python script demonstrating how to get the number of rows in a SQL result object using the len() function.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/RelationalDatabases.rst#2025-04-22_snippet_26\n\nLANGUAGE: python\nCODE:\n```\nresult=context.list_all_employees()\nreturn len(result)\n```\n\n----------------------------------------\n\nTITLE: Nesting dtml-if Tags for Complex Conditions in DTML\nDESCRIPTION: Shows how `dtml-if` tags can be nested. The inner paragraph is rendered only if both conditions are true: first, if `monkeys.color` equals 'blue', and second, if `monkeys` is greater than `monkey_limit`. Requires 'monkeys' (with a 'color' attribute) and 'monkey_limit' variables.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/DTML.rst#2025-04-22_snippet_28\n\nLANGUAGE: dtml\nCODE:\n```\n<p>Are there too many blue monkeys?</p>\n\n<dtml-if \"monkeys.color == 'blue'\">\n  <dtml-if expr=\"monkeys > monkey_limit\">\n    <p>There are too many blue monkeys!</p>\n  </dtml-if>\n</dtml-if>\n```\n\n----------------------------------------\n\nTITLE: Inserting HTML Structure with TAL Content\nDESCRIPTION: Demonstrates how to insert HTML content while preserving markup structure using the 'structure' keyword with tal:content\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/AdvZPT.rst#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<p tal:repeat=\"newsItem context/topNews\"\n   tal:content=\"structure newsItem\">\n  A news item with<code>HTML</code> markup.\n</p>\n```\n\n----------------------------------------\n\nTITLE: Conditional Pricing Based on Cookie Presence in DTML\nDESCRIPTION: An example using `dtml-if` and `dtml-else` to display different admission prices based on the presence of a variable `hasVisitedZoo` (presumably determined by checking a cookie). It uses `dtml-var` with formatting to display the full or half price from the `adult_rate` variable.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/DTML.rst#2025-04-22_snippet_33\n\nLANGUAGE: dtml\nCODE:\n```\n<dtml-if hasVisitedZoo>\n  <p>Zoo admission <dtml-var adult_rate fmt=\"dollars-and-cents\">.</p>\n<dtml-else>\n  <p>Zoo admission for first time visitors\n       <dtml-var expr=\"adult_rate/2\" fmt=\"dollars-and-cents\"></p>\n</dtml-if>  \n```\n\n----------------------------------------\n\nTITLE: Calling a ZSQL Method with Specific Arguments using 'dtml-call' in DTML\nDESCRIPTION: This snippet shows using 'dtml-call' to execute a ZSQL Method named 'insertLogEntry', passing specific named arguments ('logInfo', 'severity'). The value for 'logInfo' is retrieved from the REQUEST object using 'REQUEST.get('URL0')'.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/AdvDTML.rst#2025-04-22_snippet_21\n\nLANGUAGE: DTML\nCODE:\n```\n<dtml-call \"insertLogEntry(logInfo=REQUEST.get('URL0'), severity=1)\">\n```\n\n----------------------------------------\n\nTITLE: Standard Variable Insertion in DTML\nDESCRIPTION: This snippet shows the standard and simpler way to insert the rendered value of a variable named 'myDoc' using the 'dtml-var' tag. It is functionally equivalent to using '_.getitem('myDoc', 1)'.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/AdvDTML.rst#2025-04-22_snippet_15\n\nLANGUAGE: DTML\nCODE:\n```\n<dtml-var myDoc>\n```\n\n----------------------------------------\n\nTITLE: Creating a Site Object with Component Registry in Python\nDESCRIPTION: This code creates a site object with a stub component registry. It imports required classes, creates an ObjectManager instance, sets a site manager, and marks it as an ISite.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/src/Products/Five/component/component.txt#2025-04-22_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nfrom OFS.ObjectManager import ObjectManager\nfrom zope.component.interfaces import ISite\nfrom zope.interface import alsoProvides\n\ncomponents = object()\nsite = ObjectManager()\nsite.setSiteManager(components)\nalsoProvides(site, ISite)\n```\n\n----------------------------------------\n\nTITLE: Safe DTML Property Access with aq_explicit\nDESCRIPTION: Shows a safe way to access properties using aq_explicit by first checking if the property exists using hasattr(), preventing exceptions for missing properties.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/AdvDTML.rst#2025-04-22_snippet_40\n\nLANGUAGE: dtml\nCODE:\n```\n<dtml-if \"_.hasattr(Image2.aq_explicit, 'desc')\">\n    <dtml-var \"Image2.aq_explicit.desc\">\n  <dtml-else>\n    No desc property.\n  </dtml-if>\n```\n\n----------------------------------------\n\nTITLE: Using TAL Condition with TAL Repeat for Alternating Content\nDESCRIPTION: Shows how to use tal:condition with tal:repeat to generate different content based on whether the current iteration index is even or odd.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/AppendixC.rst#2025-04-22_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<div tal:repeat=\"item python:range(10)\">\n  <p tal:condition=\"repeat/item/even\">Even</p>\n  <p tal:condition=\"repeat/item/odd\">Odd</p>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Retrieving Browser ID in DTML\nDESCRIPTION: Demonstrates how to retrieve a browser ID without creating a new one if it doesn't exist, using the getBrowserId method with create=0 parameter.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/Sessions.rst#2025-04-22_snippet_6\n\nLANGUAGE: dtml\nCODE:\n```\n<dtml-var \"browser_id_manager.getBrowserId(create=0)\">\n```\n\n----------------------------------------\n\nTITLE: Testing OrderedFolder Behavior in Zope\nDESCRIPTION: This snippet demonstrates the behavior of OrderedFolder in Zope, including object addition, renaming, and reordering. It shows the events triggered during these operations and the maintenance of object order.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/src/OFS/tests/event.txt#2025-04-22_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n>>> ofolder = MyOrderedFolder('ofolder')\n>>> app._setObject('ofolder', ofolder) # doctest: +NORMALIZE_WHITESPACE\nObjectWillBeAddedEvent ofolder\nObjectAddedEvent ofolder\nold manage_afterAdd ofolder ofolder\nContainerModifiedEvent\n'ofolder'\n>>> ob1 = MyNewContent('ob1')\n>>> ofolder._setObject('ob1', ob1)\nObjectWillBeAddedEvent ob1\nObjectAddedEvent ob1\nContainerModifiedEvent ofolder\n'ob1'\n>>> ob2 = MyNewContent('ob2')\n>>> ofolder._setObject('ob2', ob2)\nObjectWillBeAddedEvent ob2\nObjectAddedEvent ob2\nContainerModifiedEvent ofolder\n'ob2'\n>>> ofolder.manage_renameObject('ob1', 'ob4')\nObjectWillBeMovedEvent ob1\nObjectMovedEvent ob4\nContainerModifiedEvent ofolder\n>>> ofolder.objectIds()\n['ob4', 'ob2']\n\n>>> ofolder.moveObjectsUp('ob2')\nContainerModifiedEvent ofolder\n1\n>>> ofolder.objectIds()\n['ob2', 'ob4']\n```\n\n----------------------------------------\n\nTITLE: Fallback to Global Site Manager in Python\nDESCRIPTION: This code demonstrates that when no site is found, the IComponentLookup adapter returns the global site manager. It creates an orphaned ObjectManager and shows that adapting it returns the global site manager.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/src/Products/Five/component/component.txt#2025-04-22_snippet_5\n\nLANGUAGE: Python\nCODE:\n```\nfrom zope.component import getGlobalSiteManager\norphan = ObjectManager()\nIComponentLookup(orphan) is getGlobalSiteManager()\nTrue\n```\n\n----------------------------------------\n\nTITLE: Sending HUP Signal to Zope Process for Product Registration\nDESCRIPTION: Command to send a HUP signal to a running Zope process to make it detect newly installed products without requiring a full restart. This uses the process ID stored in the Z2.pid file.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/MaintainingZope.rst#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nkill -HUP `cat var/Z2.pid`\n```\n\n----------------------------------------\n\nTITLE: Querying Employee by ID with SQL in Zope\nDESCRIPTION: A Z SQL Method for selecting a single employee from the employees table based on their unique ID, used for demonstrating traversal to result objects.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/RelationalDatabases.rst#2025-04-22_snippet_24\n\nLANGUAGE: sql\nCODE:\n```\nselect * from employees where\n  <dtml-sqltest emp_id op=\"eq\" type=\"int\">\n```\n\n----------------------------------------\n\nTITLE: Creating HTML Template for Zope Zoo Website\nDESCRIPTION: Basic HTML template for the Zope Zoo website with placeholders for dynamic content. Includes links to CSS and placeholders for navigation, title, and content areas.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/SimpleExamples.rst#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\n<html>\n<head>\n\n<title>PAGE TITLE OR ID</title>\n<link rel=\"stylesheet\" href=\"z_zoo.css\" type=\"text/css\" />\n\n</head>\n<body>\n\n<div>&gt; <a href=\"ABSOLUTE_URL\">PARENT TITLE OR ID</a> </div>\n\n<ul>\n  <li><a href=\"ABSOLUTE_URL\">SUB-OBJECT TITLE OR ID</a></li>\n</ul>\n\n<h1>PAGE TITLE OR ID</h1>\n\n<p class=\"status_message\">STATUS MESSAGE</p>\n\n<p>THIS IS WHERE THE PAGE'S CONTENT GOES.</p>\n\n</body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Inserting Structured HTML/XML using TAL - HTML\nDESCRIPTION: This snippet shows how to output structured HTML by replacing a <div> element with the content of the 'table' variable, using the 'structure' keyword to indicate that raw HTML/XML is inserted. Requires TAL-enabled templating and a defined 'table' object containing markup. The 'tal:replace' directive in 'structure' mode treats the variable as literal markup. The output will inject the evaluated 'table' structure in place of the <div>.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/AppendixC.rst#2025-04-22_snippet_15\n\nLANGUAGE: html\nCODE:\n```\n<div tal:replace=\"structure table\" />\n```\n\n----------------------------------------\n\nTITLE: Using dtml-var Entity Syntax Shortcut in DTML\nDESCRIPTION: Illustrates the HTML entity-like shortcut syntax for the `dtml-var` tag. `&dtml-cockatiel;` is equivalent to `<dtml-var name=\"cockatiel\" html_quote>`. This syntax automatically HTML-quotes the output.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/DTML.rst#2025-04-22_snippet_19\n\nLANGUAGE: dtml\nCODE:\n```\n&dtml-cockatiel;\n```\n\n----------------------------------------\n\nTITLE: Using Server-Side Comments with 'dtml-comment' vs HTML Comments in DTML\nDESCRIPTION: This snippet contrasts DTML comments ('<dtml-comment>...</dtml-comment>') with standard HTML comments ('<!-- ... -->'). DTML comments are processed and removed on the server-side; they are never sent to the client's browser. HTML comments, while typically hidden by browsers, are part of the HTML source sent to the client.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/AdvDTML.rst#2025-04-22_snippet_23\n\nLANGUAGE: DTML\nCODE:\n```\n<dtml-var standard_html_header>\n\n<dtml-comment>\n\n  This is a DTML comment and will be removed from the DTML code\n  before it is returned to the client.  This is useful for\n  documenting DTML code.  Unlike HTML comments, DTML comments\n  are NEVER sent to the client.\n\n</dtml-comment>\n\n<!-- \n\n  This is an HTML comment, this is NOT DTML and will be treated\n  as HTML and like any other HTML code will get sent to the\n  client.  Although it is customary for an HTML browser to hide\n  these comments from the end user, they still get sent to the\n  client and can be easily seen by 'Viewing the Source' of a\n  document.\n\n-->\n\n<dtml-var standard_html_footer>\n```\n\n----------------------------------------\n\nTITLE: Displaying a variable in DTML\nDESCRIPTION: This snippet demonstrates how to display the value of a variable named 'name' using DTML syntax.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/DTML.rst#2025-04-22_snippet_0\n\nLANGUAGE: dtml\nCODE:\n```\n<dtml-var name>\n```\n\n----------------------------------------\n\nTITLE: Declaring Zope 4 Object Class Icons in Python\nDESCRIPTION: Shows how to declare the zmi_icon class variable for Zope 4 object classes, which corresponds to a Fontawesome icon CSS class.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/migrations/zope4/code.rst#2025-04-22_snippet_7\n\nLANGUAGE: Python\nCODE:\n```\nclass MyZopeObject:\n    zmi_icon = \"fas fa-example-icon\"\n```\n\n----------------------------------------\n\nTITLE: Initializing Zope Objects and Testing Basic Operations\nDESCRIPTION: This snippet sets up the initial Zope objects and tests basic operations like adding and removing objects. It demonstrates the events triggered during these operations.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/src/OFS/tests/event.txt#2025-04-22_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n>>> from OFS.tests.test_event import MyNewFolder, MyNewContent\n>>> app = MyApp('')\n>>> root['app'] = app\n>>> folder = MyNewFolder('folder')\n>>> app._setObject('folder', folder) # doctest: +NORMALIZE_WHITESPACE\nObjectWillBeAddedEvent folder\nObjectAddedEvent folder\nContainerModifiedEvent\n'folder'\n>>> folder = app.folder\n\n>>> ob = MyNewContent('dogbert')\n>>> folder._setObject('dogbert', ob)\nObjectWillBeAddedEvent dogbert\nObjectAddedEvent dogbert\nContainerModifiedEvent folder\n'dogbert'\n>>> folder.manage_delObjects('dogbert')\nObjectWillBeRemovedEvent dogbert\nObjectRemovedEvent dogbert\nContainerModifiedEvent folder\n```\n\n----------------------------------------\n\nTITLE: Accessing Environment Variables with External Method in Python\nDESCRIPTION: External method to access system environment variables, specifically retrieving the INSTANCE_HOME variable.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/ScriptingZope.rst#2025-04-22_snippet_7\n\nLANGUAGE: python\nCODE:\n```\ndef instance_home():\n   import os\n   return os.environ.get('INSTANCE_HOME')\n```\n\n----------------------------------------\n\nTITLE: Conditional Rendering Based on Variable Value (Expression Syntax) in DTML\nDESCRIPTION: Demonstrates the `dtml-if` tag using the expression syntax (`expr`). The condition `<dtml-if expr=\"monkey_house\">` checks only the *value* of the 'monkey_house' variable for truthiness. This will raise a KeyError if 'monkey_house' does not exist.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/DTML.rst#2025-04-22_snippet_30\n\nLANGUAGE: dtml\nCODE:\n```\n<dtml-if expr=\"monkey_house\">\n  <p>There <em>is</em> a monkey house, Mom!</p>\n</dtml-if>\n```\n\n----------------------------------------\n\nTITLE: Implementing Template-Based Content Provider\nDESCRIPTION: Creates a content provider that uses a PageTemplateFile for rendering its content.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/src/Products/Five/browser/tests/provider.txt#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n@zope.component.adapter(\n    zope.interface.Interface,\n    browser.IDefaultBrowserLayer,\n    zope.interface.Interface)\nclass TemplateProvider(object):\n\n    def __init__(self, context, request, view):\n        self.__parent__ = view\n        self.context = context\n        self.request = request\n        self.view = view\n\n    def update(self):\n        pass\n    render = ZopeTwoPageTemplateFile(dynTemplate, temp_dir)\n    my_property = 'A string for you'\n```\n\n----------------------------------------\n\nTITLE: Testing Tree Structure Operations in Zope\nDESCRIPTION: This snippet demonstrates operations on tree structures in Zope, including creating a tree, renaming a tree, and cloning a tree. It shows the events triggered for each operation on the tree and its subobjects.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/src/OFS/tests/event.txt#2025-04-22_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n>>> subfolder = MyNewFolder('subfolder')\n>>> folder._setObject('subfolder', subfolder)\nObjectWillBeAddedEvent subfolder\nObjectAddedEvent subfolder\nContainerModifiedEvent folder\n'subfolder'\n>>> subfolder = folder.subfolder\n>>> ob = MyNewContent('mel')\n>>> subfolder._setObject('mel', ob)\nObjectWillBeAddedEvent mel\nObjectAddedEvent mel\nContainerModifiedEvent subfolder\n'mel'\n\n>>> folder.manage_renameObject('subfolder', 'firefly')\nObjectWillBeMovedEvent subfolder\nObjectWillBeMovedEvent mel\nObjectMovedEvent firefly\nObjectMovedEvent mel\nContainerModifiedEvent folder\n\n>>> res = folder.manage_clone(folder.firefly, 'serenity')\nObjectCopiedEvent serenity\nObjectCopiedEvent mel\nObjectWillBeAddedEvent serenity\nObjectWillBeAddedEvent mel\nObjectAddedEvent serenity\nObjectAddedEvent mel\nContainerModifiedEvent folder\nObjectClonedEvent serenity\nObjectClonedEvent mel\n>>> res.getId()\n'serenity'\n```\n\n----------------------------------------\n\nTITLE: Running Skeleton Test in Python for Zope Framework\nDESCRIPTION: This snippet shows how to run the skeleton test by executing the Python script. It demonstrates the entry point for the Zope test framework.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/src/Testing/ZopeTestCase/doc/TIMELINES.txt#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\npython testSkeleton.py\n```\n\n----------------------------------------\n\nTITLE: Cleaning Up Component Registry in Python\nDESCRIPTION: This snippet shows how to clean up the component registry after testing. It imports the tearDown function from zope.component.testing and calls it.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/src/Products/Five/component/component.txt#2025-04-22_snippet_6\n\nLANGUAGE: Python\nCODE:\n```\nfrom zope.component.testing import tearDown\ntearDown()\n```\n\n----------------------------------------\n\nTITLE: Testing Object Cloning in Zope\nDESCRIPTION: This snippet shows how to clone objects in Zope using the manage_clone method. It demonstrates the events triggered during the cloning process.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/src/OFS/tests/event.txt#2025-04-22_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n>>> res = folder.manage_clone(folder.dilbert, 'phb')\nObjectCopiedEvent phb\nObjectWillBeAddedEvent phb\nObjectAddedEvent phb\nContainerModifiedEvent folder\nObjectClonedEvent phb\n>>> res.getId()\n'phb'\n```\n\n----------------------------------------\n\nTITLE: Processing Resume Uploads and Sending with MIME Attachments\nDESCRIPTION: This DTML method processes the resume upload form, iterates through selected recipients, and sends emails with the uploaded file as an attachment using the mime and boundary tags for proper MIME encoding.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/AdvDTML.rst#2025-04-22_snippet_30\n\nLANGUAGE: dtml\nCODE:\n```\n<dtml-var standard_html_header>\n\n<dtml-if send_to>\n\n  <dtml-in send_to> \n\n    <dtml-sendmail smtphost=\"my.mailserver.com\">\n    To: <dtml-var sequence-item>\n    Subject: Resume\n    <dtml-mime type=text/plain encode=7bit>\n\n    Hi, please take a look at my resume.\n\n    <dtml-boundary type=application/octet-stream disposition=attachment \n    encode=base64><dtml-var expr=\"resume_file.read()\"></dtml-mime>\n    </dtml-sendmail>\n\n  </dtml-in>\n\n  <p>Your resume was sent.</p>\n\n<dtml-else>\n\n  <p>You didn't select any recipients.</p>\n\n</dtml-if>\n\n<dtml-var standard_html_footer>\n```\n\n----------------------------------------\n\nTITLE: Using makerequest Utility for Zope Testing in Python\nDESCRIPTION: This snippet demonstrates how to use the 'makerequest' utility module to create a fake request for Zope testing, enabling code that expects to acquire a 'REQUEST' attribute to work correctly.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zdgbook/TestingAndDebugging.rst#2025-04-22_snippet_10\n\nLANGUAGE: Python\nCODE:\n```\nclass MyTest(unittest.TestCase):\n    ...\n\n    def setup(self):\n        import Zope\n        from Testing import makerequest\n        self.app=makerequest.makerequest(Zope.app())\n```\n\n----------------------------------------\n\nTITLE: Object Navigation with With Tag\nDESCRIPTION: Demonstrates accessing child object properties using with tag and expressions\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/AppendixA.rst#2025-04-22_snippet_38\n\nLANGUAGE: dtml\nCODE:\n```\n<dtml-with expr=\"objectValues()[0]\">\n  First child's id: <dtml-var id>\n</dtml-with>\n```\n\n----------------------------------------\n\nTITLE: Implementing a Content Class in Zope\nDESCRIPTION: Creates a simple content class that implements a basic Zope interface for testing viewlets.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/src/Products/Five/viewlet/README.txt#2025-04-22_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\nimport zope.interface\nfrom OFS import SimpleItem, Folder\n@zope.interface.implementer(zope.interface.Interface)\nclass Content(SimpleItem.SimpleItem):\n    pass\n```\n\n----------------------------------------\n\nTITLE: Implementing movedCoolDocument event subscriber (Python)\nDESCRIPTION: Event subscriber function that handles IObjectMovedEvent for CoolDocument objects, including filtering for specific event types.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/src/OFS/event.txt#2025-04-22_snippet_6\n\nLANGUAGE: Python\nCODE:\n```\ndef movedCoolDocument(ob, event):\n    \"\"\"A Cool Document was moved.\"\"\"\n    if not IObjectRemovedEvent.providedBy(event):\n        addedCoolDocument(ob, event)\n```\n\n----------------------------------------\n\nTITLE: Basic try/except Tag Structure\nDESCRIPTION: The try tag provides exception handling in DTML, similar to Python's try/except blocks. This syntax example shows the basic structure with except and optional else blocks.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/AppendixA.rst#2025-04-22_snippet_29\n\nLANGUAGE: dtml\nCODE:\n```\n<dtml-try>\n<dtml-except [ExceptionName] [ExceptionName]...>\n... \n[<dtml-else>]\n</dtml-try>\n```\n\n----------------------------------------\n\nTITLE: Standard dtml-var Equivalent to Entity Syntax in DTML\nDESCRIPTION: Shows the standard `dtml-var` tag usage that is equivalent to the `&dtml-cockatiel;` entity syntax. It explicitly uses the `name` attribute and the `html_quote` flag to achieve the same result.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/DTML.rst#2025-04-22_snippet_20\n\nLANGUAGE: dtml\nCODE:\n```\n<dtml-var name=\"cockatiel\" html_quote>\n```\n\n----------------------------------------\n\nTITLE: Testing Image Resource Traversal\nDESCRIPTION: Tests the traversal and URL generation for a PNG image resource. Verifies the resource type and checks the generated URL.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/src/Products/Five/browser/tests/resource.txt#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n>>> resource = self.folder.unrestrictedTraverse('testoid/++resource++pattern.png')\n>>> isinstance(resource, Resource)\nTrue\n>>> resource()\n'http://nohost/test_folder_1_/testoid/++resource++pattern.png'\n```\n\n----------------------------------------\n\nTITLE: Selective Public Declaration for Module Functions Using ModuleSecurityInfo in Zope (Python)\nDESCRIPTION: Demonstrates a manual approach to expose only certain names in a module as public by calling ModuleSecurityInfo('module_name').declarePublic with the specific object names (e.g., 'name1', 'name2'). Designed for fine-grained control in Zope over which objects are accessible to through-the-web code. Dependencies: AccessControl.ModuleSecurityInfo. Suitable where blanket imports via allow_module are unsafe.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zdgbook/Security.rst#2025-04-22_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nfrom AccessControl import ModuleSecurityInfo\nModuleSecurityInfo('module_name').declarePublic('name1','name2', ...)\n```\n\n----------------------------------------\n\nTITLE: Simple TALES Expressions - Text\nDESCRIPTION: Lists several example TALES expressions, showing both prefixed and default path types. Demonstrates direct variable referencing, prefixed types for explicit evaluation, and use of formatting and Python expressions. Useful for understanding expression construction in Zope templates, with no dependencies except a Zope environment.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/AppendixC.rst#2025-04-22_snippet_18\n\nLANGUAGE: text\nCODE:\n```\na/b/c\npath:a/b/c\nnothing\npath:nothing\npython: 1 + 2\nstring:Hello, ${user/getUserName}\n```\n\n----------------------------------------\n\nTITLE: Defining TestSomeProduct Class in Python for Zope Testing\nDESCRIPTION: This code snippet defines a test class TestSomeProduct that inherits from ZopeTestCase.ZopeTestCase. It is used to create specific test cases for a product in the Zope framework.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/src/Testing/ZopeTestCase/doc/TIMELINES.txt#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nclass TestSomeProduct(ZopeTestCase.ZopeTestCase)\n```\n\n----------------------------------------\n\nTITLE: Example SQL Output of dtml-sqltest with Multiple Values (SQL)\nDESCRIPTION: This SQL snippet shows the rendered output of `<dtml-sqltest name type=\"string\" multiple>` when the variable 'name' contains the list ['Bob', 'Billy']. It correctly formats the list into an SQL `IN` clause.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/RelationalDatabases.rst#2025-04-22_snippet_10\n\nLANGUAGE: SQL\nCODE:\n```\nname in (\"Bob\", \"Billy\")\n```\n\n----------------------------------------\n\nTITLE: Installing Release Tools for Zope in Python\nDESCRIPTION: Installs necessary tools for creating Zope releases using pip. This includes wheel for building distributions, tox for running tests, and twine for uploading to PyPI.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/maintenance.rst#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ bin/pip install -U wheel tox twine\n```\n\n----------------------------------------\n\nTITLE: Using 'with' Tag to Access Form Data in DTML\nDESCRIPTION: Shows how to use the 'with' tag to push the request's form data onto the namespace stack, ensuring form variables are accessed first.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/AdvDTML.rst#2025-04-22_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<dtml-with expr=\"REQUEST.form\">\n  <dtml-var id>\n</dtml-with>\n```\n\n----------------------------------------\n\nTITLE: Debugging Zope Page Templates - Compilation Error Example\nDESCRIPTION: This snippet demonstrates a diagnostic message that Zope generates when there's a compilation error in a Page Template, specifically for a misspelled TAL attribute.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/ZPT.rst#2025-04-22_snippet_13\n\nLANGUAGE: html\nCODE:\n```\n<!-- Page Template Diagnostics\n Compilation failed\n chameleon.exc.CompilationError: Bad attribute for namespace 'http://xml.zope.org/namespaces/tal'\n\n - String:     \"contents\"\n - Filename:   /template_test/simple_page\n - Location:   (line 4: col 21)\n - Source:     This is <b tal:contents=\"template/title\">the Title</b>.\n                          ^^^^^^^^\n-->\n```\n\n----------------------------------------\n\nTITLE: Simple SQL Select Query\nDESCRIPTION: Basic SQL query to retrieve all records from the employees table\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/RelationalDatabases.rst#2025-04-22_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nselect * from employees\n```\n\n----------------------------------------\n\nTITLE: Sample News Class with Bug\nDESCRIPTION: Example of a flawed News class implementation with methods postnews() and quote(). The postnews() method fails to assign the author parameter to an instance variable, which would cause an AttributeError in quote().\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zdgbook/TestingAndDebugging.rst#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nclass News(...):\n\n    ...\n\n    def postnews(self, news, author=\"Anonymous\"):\n        self.news = news\n\n    def quote(self):\n        return '%s said, \"%s\"' % (self.author, self.news)\n```\n\n----------------------------------------\n\nTITLE: Example SQL Output of Nested dtml-sqlgroup (SQL)\nDESCRIPTION: Shows the rendered SQL output generated by the nested `dtml-sqlgroup` example when provided with sample arguments. It demonstrates the complex `WHERE` clause combining `AND` and `OR` logic within parentheses.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/RelationalDatabases.rst#2025-04-22_snippet_19\n\nLANGUAGE: SQL\nCODE:\n```\nselect * from employees\nwhere\n( (first like 'A%'\n   and\n   last like 'Smith'\n  )\n  or\n  salary > 20000.0\n)\n```\n\n----------------------------------------\n\nTITLE: Testing Simple Browser Pages in Zope\nDESCRIPTION: This snippet demonstrates traversal and execution of simple browser pages, including attribute-based views and template-based views.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/src/Products/Five/browser/tests/pages.txt#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nview = self.folder.unrestrictedTraverse('testoid/eagle.txt')\nview is not None\nTrue\nfrom Products.Five.browser.tests.pages import SimpleView\nisinstance(view, SimpleView)\nTrue\nview() == 'The eagle has landed'\nTrue\n\nview = self.folder.unrestrictedTraverse('testoid/owl.html')\nview() == '<p>2</p>'\nTrue\n\nview = self.folder.unrestrictedTraverse('testoid/falcon.html')\nisinstance(view, SimpleView)\nTrue\nview() == '<p>The falcon has taken flight</p>'\nTrue\n```\n\n----------------------------------------\n\nTITLE: Defining an Always True dtml-if Condition in DTML\nDESCRIPTION: An example of a DTML `dtml-if` tag condition using the expression syntax (`expr`). The expression `\"1\"` always evaluates to true in a boolean context.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/DTML.rst#2025-04-22_snippet_23\n\nLANGUAGE: dtml\nCODE:\n```\nexpr=\"1\"\n```\n\n----------------------------------------\n\nTITLE: Registering a viewlet with only a custom class\nDESCRIPTION: Demonstrates registering a viewlet that uses only a custom class for rendering, without a template.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/src/Products/Five/viewlet/directives.txt#2025-04-22_snippet_7\n\nLANGUAGE: XML\nCODE:\n```\n<configure xmlns=\"http://namespaces.zope.org/browser\" i18n_domain=\"zope\">\n  <viewlet\n      name=\"sport\"\n      for=\"*\"\n      manager=\"Products.Five.viewlet.tests.ILeftColumn\"\n      class=\"Products.Five.viewlet.tests.Sport\"\n      permission=\"zope.Public\"\n      />\n</configure>\n```\n\n----------------------------------------\n\nTITLE: Example News Quote Method with Bug\nDESCRIPTION: Shows a problematic method implementation that will raise an exception due to incorrect attribute name.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zdgbook/TestingAndDebugging.rst#2025-04-22_snippet_6\n\nLANGUAGE: python\nCODE:\n```\ndef quote(self):\n    return '%s said, \"%s\"' % (self.Author, self.news)\n```\n\n----------------------------------------\n\nTITLE: Determining Browser ID Source in DTML\nDESCRIPTION: Shows how to check the source of the browser ID (cookie, form, or URL) using methods of the browser_id_manager object.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/Sessions.rst#2025-04-22_snippet_7\n\nLANGUAGE: dtml\nCODE:\n```\n<dtml-if \"REQUEST.SESSION.getBrowserIdManager().isBrowserIdFromCookie()\">\n    The browser id came from a cookie.\n</dtml-if>\n\n<dtml-if \"REQUEST.SESSION.getBrowserIdManager().isBrowserIdFromForm()\">\n    The browser id came from a form.\n</dtml-if>\n\n<dtml-if \"REQUEST.SESSION.getBrowserIdManager().isBrowserIdFromUrl()\">\n    The browser id came from the URL.\n</dtml-if>\n```\n\n----------------------------------------\n\nTITLE: Defining Protected and Public View Names in Zope\nDESCRIPTION: Configures lists of protected and public view names for security testing, and sets up test users with different permission levels.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/src/Products/Five/browser/tests/pages_ftest.txt#2025-04-22_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nuf = self.folder.acl_users\n_ignored = uf._doAddUser('viewer', 'secret', [], [])\n_ignored = uf._doAddUser('manager', 'r00t', ['Manager'], [])\n\nprotected_view_names = [\n    'eagle.txt', 'falcon.html', 'owl.html', 'flamingo.html',\n    'condor.html']\n\npublic_view_names = [\n    'public_attribute_page',\n    'public_template_page',\n    'public_template_class_page',\n    'nodoc-method', 'nodoc-function', 'nodoc-object',\n    'dirpage1', 'dirpage2']\n\nViewManagementScreens = 'View management screens'\n```\n\n----------------------------------------\n\nTITLE: Minimal buildout.cfg Configuration\nDESCRIPTION: Basic buildout configuration that creates the built-in mkwsgiinstance script for Zope instance creation.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/INSTALL.rst#2025-04-22_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[buildout]\nextends =\n    https://zopefoundation.github.io/Zope/releases/5.0/versions-prod.cfg\nparts =\n    zopescripts\n\n[zopescripts]\nrecipe = zc.recipe.egg\ninterpreter = zopepy\neggs =\n    Zope\n    Paste\n```\n\n----------------------------------------\n\nTITLE: Inserting Variables in DTML with dtml-var Tag\nDESCRIPTION: Demonstrates how to insert variable values into HTML using the dtml-var tag. This example creates a price list for a fictional store, using standard_html_header and standard_html_footer to provide page structure and inserting the folder title dynamically.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/DTML.rst#2025-04-22_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<dtml-var standard_html_header>\n\n<h1>Price list for <dtml-var title></h1>\n\n<p>Hemp Bag $2.50</p>\n<p>Silk Bag $5.00</p>\n\n<dtml-var standard_html_footer>\n```\n\n----------------------------------------\n\nTITLE: Using the DTML Return Tag\nDESCRIPTION: This example demonstrates how to use the return tag to make a DTML Method return a non-text value (in this case, the number 42). The DTML execution stops after the return tag is processed.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/AdvDTML.rst#2025-04-22_snippet_27\n\nLANGUAGE: dtml\nCODE:\n```\n<p>This text is ignored.</p>\n\n<dtml-return expr=\"42\">\n```\n\n----------------------------------------\n\nTITLE: Adapting Site to IComponentLookup in Python\nDESCRIPTION: This snippet demonstrates adapting a site object to IComponentLookup. It imports the interface and shows that adapting the site returns its component registry.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/src/Products/Five/component/component.txt#2025-04-22_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nfrom zope.interface.interfaces import IComponentLookup\nIComponentLookup(site) is components\nTrue\n```\n\n----------------------------------------\n\nTITLE: SQL Query Result with sqlgroup Tag\nDESCRIPTION: This shows the rendered SQL query result when specific values are provided for the variables in the sqlgroup example. The first and last name are included with proper formatting.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/AppendixA.rst#2025-04-22_snippet_18\n\nLANGUAGE: sql\nCODE:\n```\nselect * from employees\nwhere\n(first='Bob'\n and\n last in ('Smith', 'McDonald')\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Browser Test Environment\nDESCRIPTION: Sets up user authentication and browser test environment for managing Zope folders.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/src/Products/Five/component/makesite.txt#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nuf = app.acl_users\n_ignored = uf._doAddUser('manager', 'r00t', ['Manager'], [])\n\nfrom Testing.testbrowser import Browser\nbrowser = Browser()\nbrowser.login('manager', 'r00t')\n```\n\n----------------------------------------\n\nTITLE: Using a Page Template Macro in Zope\nDESCRIPTION: This snippet demonstrates how to use a previously defined page template macro in Zope. It references the 'page' macro from the 'z_zoo.pt' template.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/SimpleExamples.rst#2025-04-22_snippet_7\n\nLANGUAGE: HTML\nCODE:\n```\n<metal:macro metal:use-macro=\"context/z_zoo.pt/macros/page\">\n</metal:macro>\n```\n\n----------------------------------------\n\nTITLE: Implementing beforeMoveCoolDocument event subscriber (Python)\nDESCRIPTION: Event subscriber function that handles IObjectWillBeAddedEvent for CoolDocument objects, used for unregistering the object before it is moved or removed.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/src/OFS/event.txt#2025-04-22_snippet_9\n\nLANGUAGE: Python\nCODE:\n```\nfrom OFS.interfaces import IObjectWillBeAddedEvent\ndef beforeMoveCoolDocument(ob, event):\n    \"\"\"A Cool Document will be moved.\"\"\"\n    if not IObjectWillBeAddedEvent.providedBy(event):\n        getToolByName(ob, 'portal_cool').unregisterCool(ob)\n\ndef movedCoolDocument(ob, event):\n    \"\"\"A Cool Document was moved.\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Using docstrings for TTW-accessible methods in Zope Products\nDESCRIPTION: Methods declared in Product classes must have docstrings to be callable through the web (by visiting their URL in a browser).\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zdgbook/Gotchas.txt#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# Product class methods need docstrings for TTW access\ndef some_method(self, param):\n    \"\"\"This docstring is required for TTW access\"\"\"\n    # method implementation\n```\n\n----------------------------------------\n\nTITLE: Registering a viewlet with a custom class and template\nDESCRIPTION: Shows how to register a viewlet with both a custom class and a template file.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/src/Products/Five/viewlet/directives.txt#2025-04-22_snippet_6\n\nLANGUAGE: XML\nCODE:\n```\n<configure xmlns=\"http://namespaces.zope.org/browser\" i18n_domain=\"zope\">\n  <viewlet\n      name=\"weather2\"\n      for=\"*\"\n      manager=\"Products.Five.viewlet.tests.ILeftColumn\"\n      template=\"%s\"\n      class=\"Products.Five.viewlet.tests.Weather\"\n      permission=\"zope.Public\"\n      />\n</configure>\n```\n\n----------------------------------------\n\nTITLE: Illustrating DTML Security Restrictions\nDESCRIPTION: This conceptual snippet shows an attempt to access a variable named 'Diary' using 'dtml-var'. If the current user lacks the necessary permissions to view the 'Diary' object according to Zope's security settings, accessing it via DTML will result in an 'Unauthorized' error.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/AdvDTML.rst#2025-04-22_snippet_17\n\nLANGUAGE: DTML\nCODE:\n```\n<dtml-var Diary>\n```\n\n----------------------------------------\n\nTITLE: Cleaning Up Test Environment\nDESCRIPTION: Performs cleanup after tests by tearing down the component architecture.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/src/Products/Five/browser/tests/resource.txt#2025-04-22_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n>>> from zope.component.testing import tearDown\n>>> tearDown()\n```\n\n----------------------------------------\n\nTITLE: Initializing Test Module Setup in Zope\nDESCRIPTION: Sets up the test module to ensure proper pickling and loads Five's configuration with local component hooks enabled.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/src/Products/Five/component/makesite.txt#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom zope.testing.module import setUp, tearDown\nsetUp(test, name='Products.Five.component.makesite')\n\nimport Products.Five\nfrom Zope2.App.zcml import load_config\nload_config('configure.zcml', package=Products.Five)\n\nfrom zope.component.hooks import setHooks\nsetHooks()\n```\n\n----------------------------------------\n\nTITLE: Using a Time-Consuming Script in a Zope Page Template\nDESCRIPTION: Demonstrates how to use a time-consuming Python script in a Zope Page Template, which will be used to show caching benefits.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/AdvZPT.rst#2025-04-22_snippet_42\n\nLANGUAGE: html\nCODE:\n```\n<html>\n  <body>\n    <p tal:content=\"context/long.py\">results</p>\n  </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Building Translated HTML Pages for Zope Documentation\nDESCRIPTION: Generates HTML pages for a specific language translation (Japanese in this example) of the Zope documentation using Sphinx.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/maintenance.rst#2025-04-22_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n$ make -e SPHINXOPTS=\"-D language='ja'\" html\n```\n\n----------------------------------------\n\nTITLE: Multiple Values with sqltest\nDESCRIPTION: This example demonstrates how to use sqltest with multiple values to create an IN clause in SQL. The type is set to integer and multiple attribute is enabled.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/AppendixA.rst#2025-04-22_snippet_24\n\nLANGUAGE: dtml\nCODE:\n```\nselect * from employees\n  where <dtml-sqltest empid type=int multiple>\n```\n\n----------------------------------------\n\nTITLE: Creating and Registering a Name Viewlet for Zope File Items (Python)\nDESCRIPTION: Defines a NameViewlet class for extracting and displaying the __name__ attribute of file objects, registers it as a viewlet adapter for the IFile interface, and demonstrates initial output. This prepares the infrastructure needed before displaying additional columns with runtime configuration. Adapter registration is performed using zope.component.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/src/Products/Five/viewlet/README.txt#2025-04-22_snippet_14\n\nLANGUAGE: python\nCODE:\n```\n>>> class NameViewlet(object):\n...\n...     def __init__(self, context, request, view, manager):\n...         self.__parent__ = view\n...         self.context = context\n...\n...     def update(self):\n...         pass\n...\n...     def render(self):\n...         return self.context.__name__\n\n>>> zope.component.provideAdapter(\n...     NameViewlet,\n...     (IFile, IDefaultBrowserLayer,\n...      zope.interface.Interface, interfaces.IViewletManager),\n...     interfaces.IViewlet, name='name')\n\n>>> print(contents().strip())\n<html>\n  <body>\n    <h1>Cotnents</h1>\n    <div>\n      <table>\n        <tr>\n        </tr>\n        <tr>\n        </tr>\n        <tr>\n        </tr>\n      </table>\n    </div>\n  </body>\n</html>\n\n>>> shownColumns = ['name']\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Event Subscriber in XML\nDESCRIPTION: This XML configuration sets up a subscriber for ICoolDocument objects and IObjectWillBeMovedEvent events, specifying a handler function.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/src/OFS/event.txt#2025-04-22_snippet_11\n\nLANGUAGE: xml\nCODE:\n```\n<subscriber\n    for=\"Products.CoolProduct.interfaces.ICoolDocument\n         OFS.interfaces.IObjectWillBeMovedEvent\"\n    handler=\"Products.CoolProduct.CoolDocument.beforeMoveCoolDocument\"\n    />\n```\n\n----------------------------------------\n\nTITLE: Rendering and Dynamic Attribute Resolution in Zope Viewlet (Python)\nDESCRIPTION: Demonstrates core viewlet rendering, error handling with dynamic attributes, and infinite recursion protection. Focuses on how the 'render' method interacts with '__page_attribute__' and the behavior when non-existent attributes are referenced. Requires a Zope viewlet setup and demonstrates both normal and failure modes.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/src/Products/Five/viewlet/README.txt#2025-04-22_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n>>> foo.render()\n'output'\n\n>>> foo.__page_attribute__ = 'render'\n>>> foo.render()\nTraceback (most recent call last):\n...\nAttributeError: render\n\n>>> foo.__page_attribute__ = 'bar'\n>>> foo.render()\nTraceback (most recent call last):\n...\nAttributeError: 'FooViewlet' object has no attribute 'bar'\n\n```\n\n----------------------------------------\n\nTITLE: Example of Problematic Mutable Default Argument in Python\nDESCRIPTION: Demonstrates a potential thread-safety issue with mutable default arguments in Python functions. This can lead to unexpected behavior in multi-threaded environments.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zdgbook/ZODBPersistentComponents.rst#2025-04-22_snippet_11\n\nLANGUAGE: Python\nCODE:\n```\ndef foo(bar=[]):\n    bar.append('something')\n```\n\n----------------------------------------\n\nTITLE: Accessing Error Information in Zope Page Templates\nDESCRIPTION: This snippet shows the error information provided by Zope when a variable is not found in a Page Template expression. It includes details about the environment and the location of the error.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/ZPT.rst#2025-04-22_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nURL: /sandbox/demo\nLine 1, Column 14\nExpression: standard:'context/unicorn'\nNames:\n    {'container': <Folder instance at 019AC4D0>,\n     'context': <Application instance at 01736F78>,\n     'default': <Products.PageTemplates.TALES.Default instance at 0x012F9D00>,\n     ...\n     'root': <Application instance at 01736F78>,\n     'template': <ZopePageTemplate at /sandbox/demo>,\n     'traverse_subpath': [],\n     'user': admin}\n```\n\n----------------------------------------\n\nTITLE: Rendered SQL IN Clause with sqltest\nDESCRIPTION: This shows how the multiple values sqltest example renders when the 'empid' variable contains multiple values. The values are properly formatted as an SQL IN clause.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/AppendixA.rst#2025-04-22_snippet_25\n\nLANGUAGE: sql\nCODE:\n```\nselect * from employees\n  where empid in (12, 14, 17)\n```\n\n----------------------------------------\n\nTITLE: Registering a basic viewlet manager with ZCML\nDESCRIPTION: Demonstrates registering a simple viewlet manager named 'defaultmanager' with public permission using the viewletManager directive.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/src/Products/Five/viewlet/directives.txt#2025-04-22_snippet_1\n\nLANGUAGE: XML\nCODE:\n```\n<configure xmlns=\"http://namespaces.zope.org/browser\" i18n_domain=\"zope\">\n  <viewletManager\n      name=\"defaultmanager\"\n      permission=\"zope.Public\"\n      />\n</configure>\n```\n\n----------------------------------------\n\nTITLE: DTML Comment Tag Implementation\nDESCRIPTION: Shows how to use DTML comment tags for documentation and temporarily disabling DTML code blocks. Comments must contain valid DTML syntax.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/AppendixA.rst#2025-04-22_snippet_1\n\nLANGUAGE: dtml\nCODE:\n```\n<dtml-comment>\n  This content is not executed and does not appear in the output.\n</dtml-comment>\n```\n\nLANGUAGE: dtml\nCODE:\n```\n<dtml-comment>\n  This DTML is disabled and will not be executed.\n  <dtml-call someMethod>\n</dtml-comment>\n```\n\n----------------------------------------\n\nTITLE: Embedding dtml-var Entity Syntax in HTML Attribute\nDESCRIPTION: Demonstrates using the more readable DTML entity syntax (`&dtml-defaultValue;`) within an HTML attribute value. This avoids nesting DTML tags inside HTML tags and automatically handles HTML quoting.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/DTML.rst#2025-04-22_snippet_22\n\nLANGUAGE: html\nCODE:\n```\n<input type=\"text\" value=\"&dtml-defaultValue;\">\n```\n\n----------------------------------------\n\nTITLE: Registering Test Layer and Skin in Zope\nDESCRIPTION: This snippet loads configuration for Five and registers a test skin. It uses ZCML configuration loading.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/src/Products/Five/browser/tests/skin.txt#2025-04-22_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nimport Products.Five.browser.tests\nfrom Zope2.App import zcml\nzcml.load_config(\"configure.zcml\", Products.Five)\nzcml.load_config(\"skin.zcml\", package=Products.Five.browser.tests)\n```\n\n----------------------------------------\n\nTITLE: Using Custom Brains Methods in DTML Loops\nDESCRIPTION: A DTML snippet showing how to iterate through employee results and call the custom fullName method on each result object.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/RelationalDatabases.rst#2025-04-22_snippet_30\n\nLANGUAGE: html\nCODE:\n```\n<dtml-in employee_by_id>\n  <dtml-var fullName>\n</dtml-in>\n```\n\n----------------------------------------\n\nTITLE: Raising Exceptions with the DTML 'raise' Tag - DTML\nDESCRIPTION: Shows how to raise exceptions within DTML templates using the 'raise' tag, capable of producing both general Python exceptions and HTTP errors. Requires the error class or message, and optionally allows specifying an error value or message in the tag body. Integrates with the Zope exception hierarchy and Python error handling flow.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/AppendixA.rst#2025-04-22_snippet_14\n\nLANGUAGE: dtml\nCODE:\n```\n<dtml-raise KeyError></dtml-raise>\n```\n\nLANGUAGE: dtml\nCODE:\n```\n<dtml-raise NotFound>Web Page Not Found</dtml-raise>\n```\n\n----------------------------------------\n\nTITLE: Complex Acquisition Context and Containment in Python\nDESCRIPTION: Illustrates how acquisition searches containers before context, and how complex acquisition chains work. Demonstrates the order of attribute lookup in nested acquisition scenarios.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zdgbook/Acquisition.rst#2025-04-22_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom Acquisition import Implicit\n\nclass C(Implicit):\n    def __init__(self, name):\n        self.name = name\n\na = C(\"a\")\na.b = C(\"b\")\na.b.color = \"red\"\na.x = C(\"x\")\n\nprint a.b.x.color # prints red\n```\n\n----------------------------------------\n\nTITLE: Random Choice Using Python Module\nDESCRIPTION: Using Python's random module to select a random item from a list\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/AppendixC.rst#2025-04-22_snippet_30\n\nLANGUAGE: html\nCODE:\n```\n<span tal:replace=\"python:modules['random'].choice(['one', 'two', 'three', 'four', 'five'])\">\n    a random number between one and five\n  </span>\n```\n\n----------------------------------------\n\nTITLE: Rendered SQL Query with Nested Conditions\nDESCRIPTION: This shows the rendered SQL from the nested sqlgroup example with sample arguments. It demonstrates how the nesting translates to SQL parentheses for proper operator precedence.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/AppendixA.rst#2025-04-22_snippet_21\n\nLANGUAGE: sql\nCODE:\n```\nselect * form employees\nwhere\n(\n  (\n   name like 'A*'\n   and\n   last like 'Smith'\n   )\n or\n salary > 20000.0\n)\n```\n\n----------------------------------------\n\nTITLE: Resource Cleanup with try/finally in DTML\nDESCRIPTION: Demonstrates using finally block for cleanup operations like releasing locks\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/AppendixA.rst#2025-04-22_snippet_33\n\nLANGUAGE: dtml\nCODE:\n```\n<dtml-call acquireLock>\n<dtml-try>\n<dtml-call someMethod>\n<dtml-finally>\n<dtml-call releaseLock>\n</dtml-try>\n```\n\n----------------------------------------\n\nTITLE: HTML Body Extraction using Regular Expressions in Python\nDESCRIPTION: External method that uses regular expressions to extract content between body tags in HTML documents.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/ScriptingZope.rst#2025-04-22_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nimport re\npattern = r\"<\\s*body.*?>(.*?)</body>\"\nregexp = re.compile(pattern, re.IGNORECASE + re.DOTALL)\n\ndef extract_body(htmlstring):\n    \"\"\"\n    If htmlstring is a complete HTML page, return the string\n    between (the first) <body> ... </body> tags\n    \"\"\"\n    matched = regexp.search(htmlpage)\n    if matched is None: return \"No match found\"\n    body = matched.group(1)\n    return body\n```\n\n----------------------------------------\n\nTITLE: Displaying Folder Contents with DTML Method\nDESCRIPTION: This DTML Method named 'list' demonstrates how the client object can change depending on the context. It lists the contents of the folder it's called from, showing how the same method can produce different results based on its client object.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/AdvDTML.rst#2025-04-22_snippet_2\n\nLANGUAGE: DTML\nCODE:\n```\n<dtml-var standard_html_header>\n\n<ul>\n<dtml-in objectValues>\n  <li><dtml-var title_or_id></li>\n</dtml-in>\n</ul>\n\n<dtml-var standard_html_footer>\n```\n\n----------------------------------------\n\nTITLE: Setting up ZCML configuration for viewlet directives in Python\nDESCRIPTION: Loads the ZCML configuration for Five and registers the viewlet directive handlers.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/src/Products/Five/viewlet/directives.txt#2025-04-22_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nimport Products.Five\nfrom Zope2.App import zcml\nzcml.load_config(\"configure.zcml\", Products.Five)\n\ncontext = zcml.load_string('''\n<configure i18n_domain=\"zope\">\n  <include package=\"Products.Five.viewlet\" file=\"meta.zcml\" />\n</configure>\n''')\n```\n\n----------------------------------------\n\nTITLE: Defining Table of Contents in reStructuredText for Zope Migration Guide\nDESCRIPTION: This snippet defines the structure of the Zope migration guide using reStructuredText syntax. It sets up a table of contents with a maximum depth of 2 levels, including sections for removed features, code changes, content modifications, and ZODB-related updates.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/migrations/zope4/index.rst#2025-04-22_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. _zope4migration:\n\nFrom Zope 2 to Zope 4 or 5\n==========================\n\n.. toctree::\n   :maxdepth: 2\n\n   removed\n   code\n   content\n   zodb\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Header with DTML in Zope\nDESCRIPTION: This snippet shows how to create a custom header using DTML in Zope. It includes CSS styling to customize the appearance of pages in a specific folder.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/DTML.rst#2025-04-22_snippet_11\n\nLANGUAGE: HTML\nCODE:\n```\n<html>\n<head>\n  <style type=\"text/css\">\n  body {color: #00FF00;}\n  p {font-family: sans-serif;}\n  </style>\n</head>\n<body>\n```\n\n----------------------------------------\n\nTITLE: Setting up ZopeTestCase and WarningsHook in Python\nDESCRIPTION: This snippet demonstrates how to import ZopeTestCase, set up a WarningsHook, create a FunctionalDocFileSuite, and capture warnings. It verifies that a warning is issued when using a test_class that doesn't subclass ZopeTestCase.Functional.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/src/Testing/ZopeTestCase/zopedoctest/WarningsTest.txt#2025-04-22_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nfrom Testing import ZopeTestCase as zopetest\nhook = zopetest.WarningsHook()\nhook.install()\nsuite = zopetest.FunctionalDocFileSuite('WarningsTest.txt',\n                                        package=zopetest.zopedoctest,\n                                        test_class=zopetest.ZopeTestCase)\n\nlen(hook.warnings)\n\nmessage, category, filename, lineno = hook.warnings[0]\nmessage\ncategory.__name__\n\nhook.uninstall()\n```\n\n----------------------------------------\n\nTITLE: Combining Path Expressions with Python Expressions\nDESCRIPTION: Example of using a Python expression as the final alternative in an alternate-path expression, allowing for default values that can't be expressed as paths.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/AdvZPT.rst#2025-04-22_snippet_26\n\nLANGUAGE: TAL\nCODE:\n```\n<p tal:content=\"request/form/age|python:18\">age</p>\n```\n\n----------------------------------------\n\nTITLE: Creating Alternate Colored Table Rows with DTML - DTML\nDESCRIPTION: Defines how to use the 'in' tag in combination with 'if' to generate alternate coloring for table rows in HTML output. The pattern checks sequence-odd to determine row background color and then outputs the title of each object within a cell. This enhances table readability with striped rows.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/AppendixA.rst#2025-04-22_snippet_9\n\nLANGUAGE: dtml\nCODE:\n```\n<table>\n<dtml-in objectValues>\n<tr <dtml-if sequence-odd>bgcolor=\"#EEEEEE\"\n    <dtml-else>bgcolor=\"#FFFFFF\"\n    </dtml-if>>\n  <td><dtml-var title></td>\n</tr>\n</dtml-in>\n</table>\n```\n\n----------------------------------------\n\nTITLE: Calling a Method in DTML Expression\nDESCRIPTION: Illustrates the correct way to call a method with no arguments in a DTML expression.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/DTML.rst#2025-04-22_snippet_16\n\nLANGUAGE: dtml\nCODE:\n```\n<dtml-var expr=\"objectValues()\">\n```\n\n----------------------------------------\n\nTITLE: Viewing mkwsgiinstance Help\nDESCRIPTION: Displays the help information for the mkwsgiinstance script, showing all available command-line options.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/operation.rst#2025-04-22_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ bin/mkwsgiinstance --help\n```\n\n----------------------------------------\n\nTITLE: SQL Query with Single WHERE Clause Example (SQL)\nDESCRIPTION: An example SQL query selecting employees from the 'employees' table where the salary is greater than 100000.00. This demonstrates a simple qualification.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/RelationalDatabases.rst#2025-04-22_snippet_14\n\nLANGUAGE: SQL\nCODE:\n```\nselect * from employees\nwhere(\n  salary > 100000.00\n)\n```\n\n----------------------------------------\n\nTITLE: Uploading an HTML File as a Zope Page Template\nDESCRIPTION: This snippet shows the content of an HTML file that can be uploaded and converted into a Zope Page Template. It creates a simple webpage with a heading.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/BasicObject.rst#2025-04-22_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n<html>\n  <body>\n    <h1>This is my second page template!</h1>\n  </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Configuring plone.recipe.zope2instance to Expose Tracebacks (INI)\nDESCRIPTION: This INI configuration snippet demonstrates setting up the WSGI server using 'plone.recipe.zope2instance'. Similar to direct waitress configuration, setting 'expose_tracebacks = True' enables the display of detailed error tracebacks in the browser for debugging purposes.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/operation.rst#2025-04-22_snippet_22\n\nLANGUAGE: ini\nCODE:\n```\n[server:main]\npaste.server_factory = plone.recipe.zope2instance:main\nuse = egg:plone.recipe.zope2instance#main\nlisten = 0.0.0.0:8080\nthreads = 2\nexpose_tracebacks = True\n```\n\n----------------------------------------\n\nTITLE: Using try/finally in DTML\nDESCRIPTION: Demonstrates basic try/finally block structure in DTML templates for exception handling\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/AppendixA.rst#2025-04-22_snippet_30\n\nLANGUAGE: dtml\nCODE:\n```\n<dtml-try>\n<dtml-finally>\n</dtml-try>\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Boolean Attribute Handling in Zope Page Templates (HTML)\nDESCRIPTION: These code snippets illustrate how Zope Page Templates handle boolean attributes like 'checked' in HTML input elements. The tal:attributes directive processes these attributes based on truthiness of the value, resulting in either inclusion or omission of the attribute.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/AppendixC.rst#2025-04-22_snippet_41\n\nLANGUAGE: html\nCODE:\n```\n<input type=\"checkbox\" checked tal:attributes=\"checked default\">\n<input type=\"checkbox\" tal:attributes=\"checked string:yes\">\n<input type=\"checkbox\" tal:attributes=\"checked python:42\">\n```\n\nLANGUAGE: html\nCODE:\n```\n<input type=\"checkbox\" checked=\"checked\">\n```\n\nLANGUAGE: html\nCODE:\n```\n<input type=\"checkbox\" tal:attributes=\"checked default\">\n<input type=\"checkbox\" tal:attributes=\"checked string:\">\n<input type=\"checkbox\" tal:attributes=\"checked nothing\">\n```\n\nLANGUAGE: html\nCODE:\n```\n<input type=\"checkbox\">\n```\n\n----------------------------------------\n\nTITLE: Example Relational Database Table\nDESCRIPTION: An example of a simple relational database table showing the structure with rows and columns for first name, last name, and age.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/RelationalDatabases.rst#2025-04-22_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nRow   First Name   Last Name  Age\n===   ==========   =========  ===\n1     Bob          McBob      42\n2     John         Johnson    24\n3     Steve        Smith      38\n```\n\n----------------------------------------\n\nTITLE: Manually Rotating ZEO Server Logs using zeoctl (Shell)\nDESCRIPTION: This sequence of shell commands demonstrates how to manually rotate the ZEO server's event log (`zeo.log`). It involves navigating to the ZEO storage directory, renaming the current log file, and then using the `zeoctl logreopen` command to instruct the running ZEO server to close the old log file handle and open a new one. This prevents the log file from growing indefinitely.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/ZEO.rst#2025-04-22_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\n$ cd /path/to/zeostorage\n$ mv logs/zeo.log logs/zeo.log.1\n$ bin/zeoctl logreopen\n```\n\n----------------------------------------\n\nTITLE: Resource Directory HTML Template\nDESCRIPTION: Sample HTML template used for testing resource directory traversal\nSOURCE: https://github.com/zopefoundation/zope/blob/master/src/Products/Five/browser/tests/resource_ftest.txt#2025-04-22_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<html>\n    <head>\n    </head>\n    <body>\n        This .html should not have a base tag automatically\n        added to the header.\n    </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Using the DTML var tag with attributes\nDESCRIPTION: This snippet demonstrates the use of the DTML 'var' tag with an optional 'missing' attribute to specify a default value when the variable is not found.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/DTML.rst#2025-04-22_snippet_2\n\nLANGUAGE: dtml\nCODE:\n```\n<dtml-var parrot>\n```\n\n----------------------------------------\n\nTITLE: TALES Syntax Definition Example - Text\nDESCRIPTION: Defines the basic TALES expression syntax using a formal grammar. It indicates the format for writing expressions, where an optional type prefix is followed by a string. Used for understanding how to construct valid TALES expressions in Zope. No dependencies; serves as a textual specification rather than executable code.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/AppendixC.rst#2025-04-22_snippet_17\n\nLANGUAGE: text\nCODE:\n```\nExpression  ::= [type_prefix ':'] String\ntype_prefix ::= Name\n```\n\n----------------------------------------\n\nTITLE: TALES String Path Expression\nDESCRIPTION: String formatting using path expressions\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/AppendixC.rst#2025-04-22_snippet_35\n\nLANGUAGE: html\nCODE:\n```\n<p tal:content=\"string:total: ${request/form/total}\">\n    total: 12\n  </p>\n```\n\n----------------------------------------\n\nTITLE: Basic Batch Processing: Pagination with DTML 'in' Tag - DTML\nDESCRIPTION: Provides a template for paginating over a large sequence using the 'in' tag with batch variables, generating 'Previous' and 'Next' navigation links. It preserves query string variables for seamless navigation and displays individual batch items. Expects largeSequence, start, and batch size as context variables.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/AppendixA.rst#2025-04-22_snippet_10\n\nLANGUAGE: dtml\nCODE:\n```\n<p>\n<dtml-in largeSequence size=10 start=start previous>\n  <a href=\"<dtml-var absolute_url>\n    <dtml-var sequence-query>query_start=<dtml-var previous-sequence-start-number>\">\n    Previous\n  </a>\n</dtml-in>\n\n<dtml-in largeSequence size=10 start=start next>\n  <a href=\"<dtml-var absolute_url>\n    <dtml-var sequence-query>query_start=<dtml-var next-sequence-start-number>\">\n    Next\n  </a>\n</dtml-in>\n</p>\n\n<p>\n<dtml-in largeSequence size=10 start=start>\n  <dtml-var sequence-item>\n</dtml-in>\n</p>\n```\n\n----------------------------------------\n\nTITLE: Registering a viewlet with a custom render attribute\nDESCRIPTION: Shows how to register a viewlet that uses a specific attribute of the class for rendering instead of the default render method.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/src/Products/Five/viewlet/directives.txt#2025-04-22_snippet_8\n\nLANGUAGE: XML\nCODE:\n```\n<configure xmlns=\"http://namespaces.zope.org/browser\" i18n_domain=\"zope\">\n  <viewlet\n      name=\"stock\"\n      for=\"*\"\n      manager=\"Products.Five.viewlet.tests.ILeftColumn\"\n      class=\"Products.Five.viewlet.tests.Stock\"\n      attribute=\"getStockTicker\"\n      permission=\"zope.Public\"\n      />\n</configure>\n```\n\n----------------------------------------\n\nTITLE: Displaying the Request Object in DTML\nDESCRIPTION: This snippet shows how to render the REQUEST object in a DTML Document or Method, displaying all request information.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/AdvDTML.rst#2025-04-22_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<dtml-var standard_html_header>\n\n<dtml-var REQUEST>\n\n<dtml-var standard_html_footer>\n```\n\n----------------------------------------\n\nTITLE: HTML Comment Restrictions in Zope 4 Page Templates\nDESCRIPTION: Shows how Chameleon enforces stricter rules for HTML comments, prohibiting double hyphens inside comments or more than two hyphens in closing sequences.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/migrations/zope4/content.rst#2025-04-22_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<!-- OK -->\n<!--- OK -->\n<!--  BAD -- BAD -->\n<!--  BAD <span tal:replace=\"string:----\"/> -->\n<!-- BAD --->\n```\n\n----------------------------------------\n\nTITLE: Handling Division by Zero Exception in DTML\nDESCRIPTION: Example of catching a ZeroDivisionError exception when dividing by zero\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/AppendixA.rst#2025-04-22_snippet_31\n\nLANGUAGE: dtml\nCODE:\n```\n<dtml-try>\n<dtml-var expr=\"1/0\">\n<dtml-except ZeroDivisionError>\nYou tried to divide by zero.\n</dtml-try>\n```\n\n----------------------------------------\n\nTITLE: Implementing Viewlet Base Classes in Zope\nDESCRIPTION: Shows the implementation of viewlet base classes, including a simple base class and an attribute-based viewlet.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/src/Products/Five/viewlet/README.txt#2025-04-22_snippet_7\n\nLANGUAGE: Python\nCODE:\n```\nfrom Products.Five.viewlet import viewlet\n\nbase = viewlet.ViewletBase('context', 'request', 'view', 'manager')\n\nclass FooViewlet(viewlet.SimpleAttributeViewlet):\n    __page_attribute__ = 'foo'\n\n    def foo(self):\n        return 'output'\n```\n\n----------------------------------------\n\nTITLE: Testing Access Controls in Zope Views\nDESCRIPTION: This snippet tests various access control and permission settings for different types of Zope views, including protected templates and class views. It checks for correct parent relationships, permission declarations, and role-based access controls.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/src/Products/Five/browser/tests/pages.txt#2025-04-22_snippet_6\n\nLANGUAGE: Python\nCODE:\n```\n>>> aq_acquire(view, 'private_method__roles__') is ACCESS_PRIVATE\nTrue\n\n>>> view = self.folder.unrestrictedTraverse('testoid/protected_template_class_page')\n>>> view.__parent__ == self.folder.testoid\nTrue\n>>> view.__ac_permissions__\n(('View', ('protected_method',)), ('View management screens', ('', '__call__')))\n>>> aq_acquire(view, '__call____roles__')\n('Manager',)\n>>> aq_acquire(view, 'public_method__roles__') is ACCESS_PUBLIC\nTrue\n>>> aq_acquire(view, 'protected_method__roles__')\n['Manager', 'test_role_1_', 'Manager', 'Anonymous']\n>>> aq_acquire(view, 'private_method__roles__') is ACCESS_PRIVATE\nTrue\n\n>>> view = self.folder.unrestrictedTraverse('testoid/protected_class_view')\n>>> view.__parent__ == self.folder.testoid\nTrue\n>>> view.__ac_permissions__\n(('View', ('protected_method',)), ('View management screens', ('',)))\n>>> getattr(view, '__call____roles__', False)\nFalse\n>>> aq_acquire(view, 'public_method__roles__') is ACCESS_PUBLIC\nTrue\n>>> aq_acquire(view, 'protected_method__roles__')\n['Manager', 'test_role_1_', 'Manager', 'Anonymous']\n>>> aq_acquire(view, 'private_method__roles__') is ACCESS_PRIVATE\nTrue\n```\n\n----------------------------------------\n\nTITLE: Configuring and Asserting Zope Viewlet with Weight Property - Python\nDESCRIPTION: Asserts that a Zope viewlet loaded via ZCML configuration string has the correct weight property using a component adapter lookup. Requires zope.component, our test viewlet class, and valid ZCML configuration. Takes content, request, view, and manager as parameters for getMultiAdapter, returning a viewlet whose weight is checked. Useful for verifying registration and adapter behavior. Limited to environments with Zope and associated testing helpers.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/src/Products/Five/viewlet/directives.txt#2025-04-22_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n>>> viewlet = zope.component.getMultiAdapter(\n...     (content, request, view, manager), interfaces.IViewlet,\n...     name='stock2')\n>>> viewlet.weight == '8'\nTrue\n```\n\n----------------------------------------\n\nTITLE: Monitoring ZEO Server Log\nDESCRIPTION: This command allows you to follow the ZEO server log in real-time using the zeoctl script. It's useful for monitoring server activity and troubleshooting.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/ZEO.rst#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ /path/to/zeostorage/bin/zeoctl logtail\n```\n\n----------------------------------------\n\nTITLE: Testing View Access Without Specific Skin in Zope\nDESCRIPTION: This HTTP request tests accessing a view without specifying a skin. It's expected to return a 404 Not Found response.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/src/Products/Five/browser/tests/skin.txt#2025-04-22_snippet_2\n\nLANGUAGE: HTTP\nCODE:\n```\nGET /test_folder_1_/testoid/eagle.html HTTP/1.1\n```\n\n----------------------------------------\n\nTITLE: Calling Scripts with Parameters from Page Templates using Python expressions\nDESCRIPTION: Demonstrates passing parameters to a script called from a Page Template by using a TALES python expression. This allows for more complex parameter passing than simple path expressions.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/ScriptingZope.rst#2025-04-22_snippet_2\n\nLANGUAGE: HTML\nCODE:\n```\n<div tal:replace=\"python:context.hippo.feed(food='spam')\">\n  Output of feed(food='spam')\n</div>\n```\n\n----------------------------------------\n\nTITLE: TALES Path Expression Syntax - Text\nDESCRIPTION: Outlines the formal grammar for writing path expressions in TALES. Specifies the structure of a PathExpr including variables, segments, alternates, and allowable path characters. Used for guiding implementation or authoring of TALES path expressions; not directly executable.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/AppendixC.rst#2025-04-22_snippet_26\n\nLANGUAGE: text\nCODE:\n```\nPathExpr    ::= Path [ '|' Expression ]\nPath        ::= variable [ '/' PathSegment ]*\nvariable    ::= Name\nPathSegment ::= ( '?' variable ) | PathChar+\nPathChar    ::= AlphaNumeric | ' ' | '_' | '-' | '.' | ',' | '~'\n```\n\n----------------------------------------\n\nTITLE: Checking Object Addition Event in Python\nDESCRIPTION: This code snippet shows how to check if an event is not an IObjectWillBeAddedEvent. It's presented as an alternative to the previous event checking method.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/src/OFS/event.txt#2025-04-22_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nif not IObjectWillBeAddedEvent.providedBy(event):\n```\n\n----------------------------------------\n\nTITLE: Using the 'let' Tag to Define Variables in DTML\nDESCRIPTION: Shows how to use the 'let' tag to define new variables and push them onto the namespace stack for a block of DTML.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/AdvDTML.rst#2025-04-22_snippet_9\n\nLANGUAGE: html\nCODE:\n```\n<dtml-let person=\"'Bob'\" relation=\"'uncle'\">\n  <p><dtml-var person>'s your <dtml-var relation>.</p>\n</dtml-let>\n```\n\n----------------------------------------\n\nTITLE: Implementing an Interface for Existing Class using ZCML\nDESCRIPTION: Shows how to make an existing Zope class (OFS.Folder.Folder) implement a custom interface (IFolder) using ZCML configuration.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/src/Products/Five/doc/manual.txt#2025-04-22_snippet_7\n\nLANGUAGE: xml\nCODE:\n```\n<class class=\"OFS.Folder.Folder\" \n  <implements interface=\".interfaces.IFolder\" />\n</class>\n```\n\n----------------------------------------\n\nTITLE: Accessing Folder Contents with Python Expressions in DTML\nDESCRIPTION: Shows how to access methods and properties of a folder named 'Reptiles' using Python expressions in DTML.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/AdvDTML.rst#2025-04-22_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<dtml-var standard_html_header>\n\n<dtml-var expr=\"Reptiles.getReptileInfo()\">\n<dtml-var expr=\"Reptiles.reptileHouseMaintainer\">\n\n<dtml-in expr=\"Reptiles.getReptiles()\">\n  <dtml-var species>\n</dtml-in>\n\n<dtml-var standard_html_footer>\n```\n\n----------------------------------------\n\nTITLE: Declaring ZCML Namespace for Five Directives\nDESCRIPTION: This snippet shows the namespace declaration for Five-specific directives in ZCML. The 'five' namespace is used for Zope 2-specific functionality within the Zope 3 framework.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/src/Products/Five/doc/directives.txt#2025-04-22_snippet_2\n\nLANGUAGE: ZCML\nCODE:\n```\n\"http://namespaces.zope.org/five\"\n```\n\n----------------------------------------\n\nTITLE: HTML Syntax Error Example in Zope 4\nDESCRIPTION: Demonstrates how Chameleon catches HTML syntax errors that were previously ignored by Zope 2's more forgiving parser.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/migrations/zope4/content.rst#2025-04-22_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\n<a href=\".\" \" class=\"mystyle\">...</a>  <!-- BAD: extraneous \" -->\n```\n\n----------------------------------------\n\nTITLE: Defining ISorter Interface for Content Sorting\nDESCRIPTION: Creates an interface defining the sorting contract with a sort method that operates on values. This interface will be implemented by concrete sorter utilities.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/src/Products/Five/viewlet/README.txt#2025-04-22_snippet_17\n\nLANGUAGE: python\nCODE:\n```\nfrom operator import attrgetter\n\nclass ISorter(zope.interface.Interface):\n\n    def sort(values):\n        \"\"\"Sort the values.\"\"\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Help Links in Zope\nDESCRIPTION: DTML code for generating a help URL that can be used to create custom help links. The helpURL method returns a URL to the specified help topic.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zdgbook/Products.rst#2025-04-22_snippet_29\n\nLANGUAGE: dtml\nCODE:\n```\n<dtml-var \"HelpSys.helpURL(\n  topic='productId',\n  product='topicId')\">\n```\n\n----------------------------------------\n\nTITLE: Simple Path Expressions and Defaults in TALES - Text\nDESCRIPTION: Provides example path expressions in TALES, showing multiple forms including accessing nested variables, alternatives with '|', and chained fallback expressions. These serve as non-executable illustrative guides for constructing real template expressions in Zope. Each example demonstrates the use of alternates for default values and chained lookups.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/AppendixC.rst#2025-04-22_snippet_27\n\nLANGUAGE: text\nCODE:\n```\nrequest/cookies/oatmeal\nnothing\ncontext/some-file 2009_02.html.tar.gz/foo\nroot/to/branch | default\nrequest/name | string:Anonymous Coward\ncontext/?tname/macros/?mname\n```\n\n----------------------------------------\n\nTITLE: Configuring Zope as systemd Service\nDESCRIPTION: This snippet shows the systemd service configuration for a Zope instance. It specifies the PID file location, start/stop/reload commands, and other service parameters.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/operation.rst#2025-04-22_snippet_11\n\nLANGUAGE: ini\nCODE:\n```\nPIDFile=/opt/zopeinstance/var/zopeinstance/Z4.pid\nExecStop=/opt/zopeinstance/bin/zopeinstance stop\nExecReload=/opt/zopeinstance/bin/zopeinstance stop && /opt/zopeinstance/bin/zopeinstance start\nKillMode=control-group\nTimeoutStartSec=10\nTimeoutStopSec=10\n\n[Install]\nWantedBy=multi-user.target\n```\n\n----------------------------------------\n\nTITLE: Configuring Zope Application in zope.ini\nDESCRIPTION: Configuration for the Zope application in the zope.ini file. It specifies the entry point and the location of the zope.conf file.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/operation.rst#2025-04-22_snippet_3\n\nLANGUAGE: ini\nCODE:\n```\n[app:zope]\nuse = egg:Zope#main\nzope_conf = /path/to/zope.conf\n```\n\n----------------------------------------\n\nTITLE: Configuring Zope Instance with bjoern WSGI Server\nDESCRIPTION: This snippet demonstrates how to configure a Zope instance to use the bjoern WSGI server using the plone.recipe.zope2instance buildout recipe.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/operation.rst#2025-04-22_snippet_18\n\nLANGUAGE: ini\nCODE:\n```\n[zopeinstance]\nrecipe = plone.recipe.zope2instance\neggs =\n    dataflake.wsgi.bjoern\nzodb-temporary-storage = off\nuser = admin:password\nhttp-address = 8080\nwsgi = ${buildout:directory}/etc/bjoern.ini\n```\n\n----------------------------------------\n\nTITLE: Conflict Error Example in Zope Logs\nDESCRIPTION: Shows what a ConflictError looks like in Zope debug logs when simultaneous writes occur to the same session object. These errors are normal under high load and are automatically retried by Zope.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/Sessions.rst#2025-04-22_snippet_19\n\nLANGUAGE: plaintext\nCODE:\n```\n2009-01-16T04:26:58 INFO(0) Z2 CONFLICT Competing writes at /getData\nTraceback (innermost last):\nFile /zope/lib/python/ZPublisher/Publish.py, line 175, in publish\nFile /zope/lib/python/Zope/__init__.py, line 235, in commit\nFile /zope/lib/python/ZODB/Transaction.py, line 251, in commit\nFile /zope/lib/python/ZODB/Connection.py, line 268, in commit\nConflictError: '\\000\\000\\000\\000\\000\\000\\002/'\n```\n\n----------------------------------------\n\nTITLE: Adding Objects to ObjectManagers in Zope\nDESCRIPTION: Demonstrates the proper pattern for creating an object and adding it to an ObjectManager using the _setObject method. This is the standard approach for Product add functions.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zdgbook/Gotchas.txt#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndef addFunction(dispatcher, id):\n    \"Create object and add to self\"\n    p = SomeProduct(id)\n    dispatcher.Destination()._setObject(id, p)\n```\n\n----------------------------------------\n\nTITLE: Resolving Variable Lookup with DTML 'with' Tag\nDESCRIPTION: This snippet demonstrates how to fix the variable lookup issue by using the DTML 'with' tag to explicitly specify the namespace for variable lookup, in this case, the REQUEST namespace.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/AdvDTML.rst#2025-04-22_snippet_1\n\nLANGUAGE: DTML\nCODE:\n```\n<dtml-var standard_html_header>\n\n  <dtml-with REQUEST only>\n    <dtml-if zooName>\n      <p><dtml-var zooName></p>\n    <dtml-else>\n      <form action=\"<dtml-var URL>\" method=\"GET\">\n        <input name=\"zooName\">\n        <input type=\"submit\" value=\"What is zooName?\">\n      </form>\n    </dtml-if>\n  </dtml-with>\n\n<dtml-var standard_html_footer>\n```\n\n----------------------------------------\n\nTITLE: Rendered SQL with sqltest\nDESCRIPTION: This shows how the sqltest tag is rendered in the final SQL query when the 'name' variable has the value 'Bob'. The string is properly quoted.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/AppendixA.rst#2025-04-22_snippet_23\n\nLANGUAGE: sql\nCODE:\n```\nselect * from employees\n  where name = 'Bob'\n```\n\n----------------------------------------\n\nTITLE: Starting Python and Importing Zope Modules\nDESCRIPTION: Example of navigating to the Zope lib/python directory, starting the Python interpreter, and importing the Zope and ZPublisher modules for debugging purposes.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zdgbook/TestingAndDebugging.rst#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n$ cd lib/python\n$ python\nPython 1.5.2 (#0, Apr 13 1999, 10:51:12) [MSC 32 bit (Intel)] on win32\nCopyright 1991-1995 Stichting Mathematisch Centrum, Amsterdam\n>>> import Zope, ZPublisher\n>>>\n```\n\n----------------------------------------\n\nTITLE: Request Variable Lookup with With Tag\nDESCRIPTION: Example of accessing request variables using the with tag and only attribute\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/AppendixA.rst#2025-04-22_snippet_37\n\nLANGUAGE: dtml\nCODE:\n```\n<dtml-with REQUEST only>\n  <dtml-if id>\n    <dtml-var id>\n  <dtml-else>\n    'id' was not in the request.\n  </dtml-if>\n</dtml-with>\n```\n\n----------------------------------------\n\nTITLE: Registering a Zope Adapter using ZCML\nDESCRIPTION: Shows how to register a Zope adapter MyAdapter for IMyInterface to INewInterface using ZCML configuration.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/src/Products/Five/doc/manual.txt#2025-04-22_snippet_5\n\nLANGUAGE: xml\nCODE:\n```\n<configure xmlns=\"http://namespaces.zope.org/zope\">\n\n  <adapter \n    for=\".interfaces.IMyInterface\"\n    provides=\".interfaces.INewInterface\"\n    factory=\".classes.MyAdapter\" /> \n  \n</configure>\n```\n\n----------------------------------------\n\nTITLE: Simulating HTTP Request with ZPublisher\nDESCRIPTION: Example of using ZPublisher.Zope() to simulate an HTTP request to the root Zope object, showing the returned content including HTTP headers.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zdgbook/TestingAndDebugging.rst#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n>>> ZPublisher.Zope('')\nStatus: 200 OK\nX-Powered-By: Zope (www.zope.dev), Python (www.python.org)\nContent-Length: 1238\nContent-Type: text/html\n\n<HTML><HEAD><TITLE>Zope</TITLE>\n\n  ... blah blah...\n\n</BODY></HTML>\n>>>\n```\n\n----------------------------------------\n\nTITLE: ZCML Viewlet with Class Missing Attribute Error Handling - Python\nDESCRIPTION: Checks that a ConfigurationError is properly raised if a ZCML <viewlet> references a class missing the specified attribute, ensuring robust input validation. Uses zcml.load_string and ConfigurationError, passing ZCML referencing 'faux' attribute on the class. The test captures and inspects the error message. Designed for unit or documentation-style testing in the Zope configuration context.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/src/Products/Five/viewlet/directives.txt#2025-04-22_snippet_12\n\nLANGUAGE: python\nCODE:\n```\n>>> zcml_string = ('''\n... <configure xmlns=\"http://namespaces.zope.org/browser\" i18n_domain=\"zope\">\n...   <viewlet\n...       name=\"testviewlet\"\n...       manager=\"Products.Five.viewlet.tests.ILeftColumn\"\n...       class=\"Products.Five.viewlet.tests.Sport\"\n...       attribute=\"faux\"\n...       permission=\"zope.Public\"\n...       />\n... </configure>\n... ''')\n\n>>> try:\n...     zcml.load_string(zcml_string)\n... except ConfigurationError as exc:\n...     print(\"The provided class doesn't have \"\n...           \"the specified attribute.\" in str(exc))\n... else:\n...     print('ConfigurationError not raised.')\nTrue\n```\n\n----------------------------------------\n\nTITLE: Calling Methods on a Class Instance to Demonstrate Inheritance\nDESCRIPTION: This snippet demonstrates how method resolution works when methods are called on an instance of the Sub class, showing how Python searches the inheritance hierarchy to find method implementations.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/Acquisition.rst#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n>>> instance = Sub()\n>>> instance.amethod()\nI am the 'amethod' method of the Sub class\n>>> instance.anothermethod()\nI am the 'anothermethod' method of the SuperA class\n>>> instance.athirdmethod()\nI am the 'athirdmethod' method of the SuperB class\n```\n\n----------------------------------------\n\nTITLE: Loading Zope 2 Product ZCML\nDESCRIPTION: Shows the use of the five:loadProducts directive in ZCML to load configuration files (meta.zcml, configure.zcml) from all installed Zope 2 products.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/src/Products/Five/doc/features.txt#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<five:loadProducts>\n```\n\n----------------------------------------\n\nTITLE: Examples of String Substitution and Formatting with String: Expressions in Zope TAL - Text\nDESCRIPTION: This set of string expressions illustrates how to incorporate variable substitution within static text in TAL statements using the 'string:' prefix. Path expressions are substituted where $variable or ${variable/path} appears, supporting text and complex objects. Care is required with braces, escaping literal dollar signs with double '$$', and using XML entities for double quotes. These expressions are intended for use in TAL content or attribute attributes.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/AdvZPT.rst#2025-04-22_snippet_23\n\nLANGUAGE: text\nCODE:\n```\n\"string:Just text. There's no path here.\"\n\"string:copyright $year by Fred Flintstone.\"\n\"string:Three ${vegetable}s, please.\"\n\"string:Your name is ${user/getUserName}!\"\n\"string:Please pay $$$dollars_owed\"\n\"string:She said, &quot;Hello world.&quot;\"\n```\n\n----------------------------------------\n\nTITLE: Monitoring ZEO Client Log\nDESCRIPTION: This command allows you to follow the ZEO client log in real-time using the zopectl script. It's useful for monitoring client activity and troubleshooting.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/ZEO.rst#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ /path/to/zeoclient/bin/zopectl logtail\n```\n\n----------------------------------------\n\nTITLE: Referencing Zope WSGI Configuration Schema (reStructuredText)\nDESCRIPTION: This reStructuredText directive uses the 'zconfig' role provided by Zope documentation tools (likely within Sphinx) to reference and possibly display the configuration schema defined in 'wsgischema.xml' for the 'Zope2.Startup' component. It's used for documentation generation.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/operation.rst#2025-04-22_snippet_23\n\nLANGUAGE: rst\nCODE:\n```\n.. zconfig:: Zope2.Startup\n    :file: wsgischema.xml\n```\n\n----------------------------------------\n\nTITLE: Dynamic Variable Lookup and Rendering with '_.getitem' in DTML\nDESCRIPTION: This snippet demonstrates looking up and rendering a variable whose name is determined dynamically. It uses '_.getitem(selectedDoc, 1)', where 'selectedDoc' is itself a variable (e.g., from a form input) containing the *name* of the document to display. This allows displaying different content based on user input or other dynamic conditions.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/AdvDTML.rst#2025-04-22_snippet_16\n\nLANGUAGE: DTML\nCODE:\n```\n<dtml-var expr=\"_.getitem(selectedDoc, 1)\">\n```\n\n----------------------------------------\n\nTITLE: Sorting with TAL Define and Sequence Sort\nDESCRIPTION: Example of sorting objects using sequence.sort utility function with tal:define\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/AdvZPT.rst#2025-04-22_snippet_5\n\nLANGUAGE: xml\nCODE:\n```\n<table tal:define=\"objects context/objectValues;\n                   sort_on python:(('title', 'nocase', 'asc'),);\n                   sorted_objects python:sequence.sort(objects, sort_on)\">\n  <tr tal:repeat=\"item sorted_objects\">\n    <td tal:content=\"item/title\">title</td>\n  </tr>\n</table>\n```\n\n----------------------------------------\n\nTITLE: Defining a PythonFilteredSet Expression for Folderish Objects with Titles\nDESCRIPTION: This Python expression defines a condition for a Zope PythonFilteredSet. It checks if an indexed object 'o' is folderish (using 'isPrincipiaFolderish') and also has a non-empty 'title' attribute. This allows a TopicIndex to group objects that meet both criteria.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/SearchingZCatalog.rst#2025-04-22_snippet_12\n\nLANGUAGE: python\nCODE:\n```\no.isPrincipiaFolderish and o.title\n```\n\n----------------------------------------\n\nTITLE: Cleaning Up Test Artifacts and Registries - Python\nDESCRIPTION: Removes temporary directories and resets global registries at the end of viewlet tests to ensure test isolation and prevent side effects in subsequent tests. Requires shutil and zope.testing.cleanup.cleanUp. Takes no parameters and outputs nothing if cleanup is successful. Use at end of doc- or unit-tests to restore fresh state.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/src/Products/Five/viewlet/directives.txt#2025-04-22_snippet_17\n\nLANGUAGE: python\nCODE:\n```\n>>> import shutil\n>>> shutil.rmtree(temp_dir)\n\n>>> from zope.testing.cleanup import cleanUp\n>>> cleanUp()\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage of TAL Statements for Conditional Looping in Zope\nDESCRIPTION: Demonstrates an incorrect attempt to combine tal:repeat and tal:condition for conditional looping, highlighting the fixed execution order of TAL statements.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/AdvZPT.rst#2025-04-22_snippet_15\n\nLANGUAGE: HTML\nCODE:\n```\n<!-- broken template -->\n<ul>\n  <li tal:repeat=\"n python:range(10)\"\n      tal:condition=\"python:n != 3\"\n      tal:content=\"n\"> \n    1\n  </li>\n</ul>\n```\n\n----------------------------------------\n\nTITLE: Namespace Case Sensitivity Examples in Zope 4 Page Templates\nDESCRIPTION: Demonstrates how namespace names in Page Templates must be lowercase in Zope 4's Chameleon parser, unlike Zope 2 which was more forgiving with case sensitivity.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/migrations/zope4/content.rst#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<span TAL:CONTENT=\"string:foo\"></span>  <!-- BAD namespace TAL -->\n<span Tal:content=\"string:foo\"></span>  <!-- BAD namespace Tal -->\n<span tal:content=\"string:foo\"></span>  <!-- OK -->\n```\n\n----------------------------------------\n\nTITLE: Setting Breakpoint in Python Debugger for Zope\nDESCRIPTION: Shows how to set a breakpoint in the Python debugger (pdb) to debug a Zope product method.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zdgbook/TestingAndDebugging.rst#2025-04-22_snippet_4\n\nLANGUAGE: python\nCODE:\n```\npdb> import Products\npdb> b Products.ZopeNews.News.News.postnews\nBreakpoint 5 at C:\\Program Files\\WebSite\\lib\\python\\Products\\ZopeNews\\News.py:42\npdb>\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Help Topic for Zope Product\nDESCRIPTION: Initialization code that registers a custom help topic object for a Zope product. This provides more control over help topic creation than the standard registerHelp method.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zdgbook/Products.rst#2025-04-22_snippet_26\n\nLANGUAGE: python\nCODE:\n```\nfrom mySpecialHelpTopics import MyTopic\n\ndef initialize(context):\n    ...\n    context.registerHelpTopic('myTopic', MyTopic())\n```\n\n----------------------------------------\n\nTITLE: Initializing Browser Page Configuration in Zope\nDESCRIPTION: Loads Zope configuration files and sets up a test environment with simple content.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/src/Products/Five/browser/tests/pages_ftest.txt#2025-04-22_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nimport Products.Five.browser.tests\nfrom Zope2.App import zcml\nzcml.load_config(\"configure.zcml\", Products.Five)\nzcml.load_config('pages.zcml', package=Products.Five.browser.tests)\n\nfrom Products.Five.tests.testing.simplecontent import manage_addSimpleContent\nmanage_addSimpleContent(self.folder, 'testoid', 'Testoid')\n```\n\n----------------------------------------\n\nTITLE: Initial Manager Creation Output\nDESCRIPTION: Example console output shown during Zope installation when the initial manager account is created with default credentials.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/Security.rst#2025-04-22_snippet_2\n\nLANGUAGE: text\nCODE:\n```\ncreating default inituser file\nNote:\n        The initial user name and password are 'admin'\n        and 'IVX3kAwU'.\n\n        You can change the name and password through the web\n        interface or using the 'zpasswd.py' script.\n```\n\n----------------------------------------\n\nTITLE: Implementing Local Test View\nDESCRIPTION: Defines a simple browser view class that returns 'Hello World!' and registers it with the local site manager.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/src/Products/Five/component/makesite.txt#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom Products.Five.browser import BrowserView\nclass TestView(BrowserView):\n    \"\"\"A silly docstring\"\"\"\n    __name__ = 'testview.html'\n    def __call__(self):\n        return \"Hello World!\"\nfrom OFS.interfaces import IObjectManager\nfrom zope.interface import Interface\nfrom zope.publisher.interfaces.browser import IDefaultBrowserLayer\nfrom zope.component import getGlobalSiteManager\nsm.registerAdapter(TestView, (IObjectManager, IDefaultBrowserLayer),\n                   Interface, name='testview.html')\n```\n\n----------------------------------------\n\nTITLE: Identifying the Default Zope Database File Path\nDESCRIPTION: Specifies the default location of the Zope FileStorage database file (`Data.fs`) within the Zope installation directory (represented by the environment variable `$ZOPE_HOME`). This file contains the object data and requires periodic packing and regular backups.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/MaintainingZope.rst#2025-04-22_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n$ZOPE_HOME/var/Data.fs\n```\n\n----------------------------------------\n\nTITLE: Starting ZEO Client using zopectl Script\nDESCRIPTION: This command starts the ZEO client using the zopectl script. It initializes the Zope instance and connects it to the ZEO server.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/ZEO.rst#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ /path/to/zeoclient/bin/zopectl start\n```\n\n----------------------------------------\n\nTITLE: Using TAL Condition to Conditionally Display Messages\nDESCRIPTION: Demonstrates two approaches to conditionally displaying content: the first tests for both existence and truth of a request message, while the second only tests for existence.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/AppendixC.rst#2025-04-22_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<p tal:condition=\"request/message | nothing\"\n   tal:content=\"request/message\">message goes here</p>\n\n<p tal:condition=\"exists:request/message\"\n   tal:content=\"request/message\">message goes here</p>\n```\n\n----------------------------------------\n\nTITLE: TALES Nocall Expression Syntax - Text\nDESCRIPTION: Specifies how to write a nocall expression in TALES, which prevents automatic calling of callable objects referenced by a path. Requires use of the 'nocall:' prefix followed by a valid path. No dependencies except for TALES-compliant evaluation context.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/AppendixC.rst#2025-04-22_snippet_21\n\nLANGUAGE: text\nCODE:\n```\nnocall_expression ::= 'nocall:' path_expression\n```\n\n----------------------------------------\n\nTITLE: Generated HTML from DTML Batching\nDESCRIPTION: The resulting HTML code generated by the batching DTML example, showing the first 10 items with a next link.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/AdvDTML.rst#2025-04-22_snippet_33\n\nLANGUAGE: html\nCODE:\n```\n<html>\n<head><title>Zope</title>\n</head>\n<body bgcolor=\"#FFFFFF\">\n\n  <h1>These words are displayed at the top of a batch:</h1>\n  <ul>\n    <li>Iteration number: 0</li>\n    <li>Iteration number: 1</li>\n    <li>Iteration number: 2</li>\n    <li>Iteration number: 3</li>\n    <li>Iteration number: 4</li>\n    <li>Iteration number: 5</li>\n    <li>Iteration number: 6</li>\n    <li>Iteration number: 7</li>\n    <li>Iteration number: 8</li>\n    <li>Iteration number: 9</li>\n  </ul>\n  <h4>These words are displayed at the bottom of a batch.</h4>\n\n     <a href=\"http://pdx:8090/batch?query_start=11\">\n       (Next 10 results)\n     </a>\n\n</body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Defining RST Documentation Tree Structure for Zope\nDESCRIPTION: ReStructuredText configuration that defines the documentation hierarchy and navigation structure for the Zope project documentation using toctree directive.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/index.rst#2025-04-22_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. toctree::\n   :maxdepth: 2\n\n   news\n   INSTALL\n   operation\n   migrations/index\n   maintenance\n   Zope release schedule <https://www.zope.dev/releases.html>\n   changes\n   zopebook/index\n   zdgbook/index\n```\n\n----------------------------------------\n\nTITLE: Python Expression Syntax Error Example in Zope 4\nDESCRIPTION: Shows how Chameleon catches Python syntax errors during parsing that Zope 2 would only catch at execution time.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/migrations/zope4/content.rst#2025-04-22_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<a href=\"\" \n   tal:attributes=\"href python:context.myfunc(a=1, a=1)\">\n  ...\n</a>  <!-- BAD: Python syntax error>\n```\n\n----------------------------------------\n\nTITLE: Starting Zope Instance in Foreground (Console)\nDESCRIPTION: This command starts the Zope instance named 'zopeinstance' in foreground mode. This is useful for development and debugging as server logs and output are displayed directly in the console.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/operation.rst#2025-04-22_snippet_20\n\nLANGUAGE: console\nCODE:\n```\nbin/zopeinstance fg\n```\n\n----------------------------------------\n\nTITLE: Updating Import Paths in Python for Zope Migration\nDESCRIPTION: Demonstrates the change in import path for InitializeClass from Globals to AccessControl.class_init. This change is compatible with both Zope 2 and newer versions.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/migrations/zope4/code.rst#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom Globals import InitializeClass  # OLD\nfrom AccessControl.class_init import InitializeClass  # NEW\n```\n\n----------------------------------------\n\nTITLE: Setting Up Security Policy for Unit Tests in Zope\nDESCRIPTION: Sets up a loose security policy for unit testing viewlets in Zope, disabling normal security checks.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/src/Products/Five/viewlet/README.txt#2025-04-22_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nfrom AccessControl import SecurityManager\nfrom Products.Five.viewlet.tests import UnitTestSecurityPolicy\nfrom AccessControl.SecurityManagement import newSecurityManager\nfrom AccessControl.SecurityManagement import noSecurityManager\nnoSecurityManager()\noldPolicy = SecurityManager.setSecurityPolicy(UnitTestSecurityPolicy())\n```\n\n----------------------------------------\n\nTITLE: Setting Initial Zope User Credentials\nDESCRIPTION: Commands to change the username and password for the initial Zope user from the instance directory.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/InstallingZope.rst#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ cd ~/myzope/instance\n$ ~/myzope/zope2/bin/zpasswd.py inituser\n```\n\n----------------------------------------\n\nTITLE: Resource File Discovery Setup\nDESCRIPTION: Sets up file discovery for test resources including PNG, PT, PY, and CSS files\nSOURCE: https://github.com/zopefoundation/zope/blob/master/src/Products/Five/browser/tests/resource_ftest.txt#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport os, glob\n_prefix = os.path.dirname(Products.Five.browser.tests.__file__)\ndir_resource_names = [os.path.basename(r) for r in (\n    glob.glob('%s/*.png' % _prefix) +\n    glob.glob('%s/*.pt' % _prefix) +\n    glob.glob('%s/[a-z]*.py' % _prefix) +\n    glob.glob('%s/*.css' % _prefix))]\n```\n\n----------------------------------------\n\nTITLE: Configuring Temporary Folder ZODB for Session Storage in Zope\nDESCRIPTION: This snippet shows the ZODB configuration for a temporary folder used to store session data in non-production Zope environments. It sets up a mapping storage named 'Temporary database' mounted at '/temp_folder' using the TemporaryContainer class.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/migrations/zope4/removed.rst#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<zodb_db temporary>\n    <mappingstorage>\n      name Temporary database (for sessions)\n    </mappingstorage>\n    mount-point /temp_folder\n    container-class Products.TemporaryFolder.TemporaryContainer\n</zodb_db>\n```\n\n----------------------------------------\n\nTITLE: Building Zope Documentation Locally\nDESCRIPTION: Steps to download Zope source code and build its documentation locally using Python and pip.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/INSTALL.rst#2025-04-22_snippet_7\n\nLANGUAGE: console\nCODE:\n```\n$ wget https://pypi.org/packages/source/Z/Zope/Zope-5.0.tar.gz\n$ tar xfz Zope-5.0.tar.gz\n$ cd Zope-5.0\n$ python3.10 -m venv .\n$ bin/pip install -U pip wheel\n$ bin/pip install Zope[docs] -c ./constraints.txt\n$ cd docs\n$ make html\n```\n\n----------------------------------------\n\nTITLE: METAL Basic Macro Usage\nDESCRIPTION: Basic usage of a macro defined in another template\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/AppendixC.rst#2025-04-22_snippet_40\n\nLANGUAGE: html\nCODE:\n```\n<p metal:use-macro=\"container/other.html/macros/header\">\n    header macro from defined in other.html template\n  </p>\n```\n\n----------------------------------------\n\nTITLE: Removing Elements with TALES 'nothing' Value - HTML\nDESCRIPTION: This example demonstrates the use of TAL's 'nothing' value to remove an entire element from the rendered output. When tal:replace=\"nothing\" is used, the content inside the element is omitted. Requires a template context supporting the 'nothing' built-in variable. The key parameter is the use of 'nothing' in the expression; when this is set, the output omits the entire <div>, including its children.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/AppendixC.rst#2025-04-22_snippet_16\n\nLANGUAGE: html\nCODE:\n```\n<div tal:replace=\"nothing\">\n  This element is a comment.\n</div>\n```\n\n----------------------------------------\n\nTITLE: Registering Translation Domains in Zope ZCML\nDESCRIPTION: ZCML configuration snippet for registering translation domains using the i18n namespace. The directory parameter should point to a gettext-compliant locale directory structure.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/src/Products/Five/doc/i18n.txt#2025-04-22_snippet_0\n\nLANGUAGE: zcml\nCODE:\n```\n<i18n:registerTranslations directory=\"locales\" />\n```\n\n----------------------------------------\n\nTITLE: Cleaning Up Test Environment in Zope\nDESCRIPTION: This snippet performs cleanup after the tests. It uses the tearDown function from zope.component.testing.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/src/Products/Five/browser/tests/skin.txt#2025-04-22_snippet_6\n\nLANGUAGE: Python\nCODE:\n```\nfrom zope.component.testing import tearDown\ntearDown()\n```\n\n----------------------------------------\n\nTITLE: Executing Framework Method in Python for Zope Test Suite\nDESCRIPTION: This code snippet shows the call to the framework() method, which is responsible for collecting all TestCase-derived classes into a test suite and running the suite using the TextTestRunner.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/src/Testing/ZopeTestCase/doc/TIMELINES.txt#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nframework()\n```\n\n----------------------------------------\n\nTITLE: Configuring WebDAV Source Server in Zope\nDESCRIPTION: This snippet shows how to enable Zope's WebDAV source server by adding configuration to the zope.conf file. It specifies the address and connection settings for the WebDAV server.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/ExternalTools.rst#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n<webdav-source-server>\n  # valid keys are \"address\" and \"force-connection-close\"\n  address 8022\n  force-connection-close off\n</webdav-source-server>\n```\n\n----------------------------------------\n\nTITLE: Looking up a registered viewlet manager in Python\nDESCRIPTION: Shows how to retrieve a registered viewlet manager using getMultiAdapter and verify its properties.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/src/Products/Five/viewlet/directives.txt#2025-04-22_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nimport zope.component\nfrom zope.viewlet import interfaces\nmanager = zope.component.getMultiAdapter(\n    (content, request, view),\n    interfaces.IViewletManager, name='defaultmanager')\n\nmanager\n<Products.Five.viewlet.manager.<ViewletManager providing IViewletManager> object ...>\ninterfaces.IViewletManager.providedBy(manager)\nTrue\nmanager.template is None\nTrue\nmanager.update()\nmanager.render() == ''\nTrue\n```\n\n----------------------------------------\n\nTITLE: Testing File Resource Traversal\nDESCRIPTION: Tests the traversal and URL generation for a CSS file resource. Verifies the resource type and checks the generated URL.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/src/Products/Five/browser/tests/resource.txt#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n>>> resource = self.folder.unrestrictedTraverse('testoid/++resource++style.css')\n>>> isinstance(resource, Resource)\nTrue\n>>> resource()\n'http://nohost/test_folder_1_/testoid/++resource++style.css'\n```\n\n----------------------------------------\n\nTITLE: Deprecated Method Setup\nDESCRIPTION: Creates a fake deprecated class to initialize the compatibility framework.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/src/OFS/tests/event.txt#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom OFS.metaconfigure import setDeprecatedManageAddDelete\nclass C(object): pass\nsetDeprecatedManageAddDelete(C)\n```\n\n----------------------------------------\n\nTITLE: Building and Installing Zope\nDESCRIPTION: Commands for building and installing Zope from source code\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/InstallingZope.rst#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ make\n$ make install\n```\n\n----------------------------------------\n\nTITLE: Defining Multiple Variables with tal:define in Zope Templates\nDESCRIPTION: Illustrates how to define multiple variables using tal:define, separated by semicolons, and referencing previously defined variables.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/AdvZPT.rst#2025-04-22_snippet_10\n\nLANGUAGE: HTML\nCODE:\n```\n<p tal:define=\"ids container/objectIds; \n               title container/title\">\n```\n\nLANGUAGE: HTML\nCODE:\n```\n<p tal:define=\"title template/title;\n               untitled not:title;\n               tlen python:len(title);\">\n```\n\n----------------------------------------\n\nTITLE: Installing Zope with Dependencies\nDESCRIPTION: A requirements.txt file listing all required Python packages for the Zope project with their specific versions. It includes the main Zope package installation from GitHub as well as all dependent packages with pinned versions.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/requirements-full.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n-e git+https://github.com/zopefoundation/Zope.git@master#egg=Zope\nAccessControl==7.2\nAcquisition==6.1\nAuthEncoding==6.0\nBTrees==6.1\nChameleon==4.4.4\nDateTime==5.5\nDocumentTemplate==4.6\nExtensionClass==6.0\nMultiMapping==5.0\nPaste==3.10.1\nPasteDeploy==3.1.0\nPersistence==5.1\nRestrictedPython==8.0\nWSGIProxy2==0.5.1\nWebOb==1.8.9\nWebTest==3.0.4\nZConfig==4.2\nZODB==6.0\nZope2==4.0\nbeautifulsoup4==4.13.3\ncffi==1.17.1\nmultipart==1.2.1\npersistent==6.1.1\npycparser==2.22\npython-gettext==5.0\npytz==2025.1\nroman==5.0\nsix==1.17.0\nsoupsieve==2.6\ntransaction==5.0\nwaitress==3.0.2\nz3c.pt==4.4\nzExceptions==5.0\nzc.lockfile==3.0.post1\nzc.recipe.egg==2.0.7\nzodbpickle==4.2\nzope.annotation==5.1\nzope.browser==3.1\nzope.browsermenu==5.1\nzope.browserpage==5.0\nzope.browserresource==5.2\nzope.cachedescriptors==5.1\nzope.component==6.0\nzope.configuration==6.0\nzope.container==6.1\nzope.contentprovider==6.0\nzope.contenttype==5.2\nzope.datetime==5.1\nzope.deferredimport==5.0\nzope.deprecation==5.1\nzope.dottedname==6.0\nzope.event==5.0\nzope.exceptions==5.2\nzope.filerepresentation==6.1\nzope.globalrequest==2.0\nzope.hookable==7.0\nzope.i18n==5.2\nzope.i18nmessageid==7.0\nzope.interface==7.2\nzope.lifecycleevent==5.1\nzope.location==5.1\nzope.pagetemplate==5.1\nzope.processlifetime==3.1\nzope.proxy==6.1\nzope.ptresource==5.1\nzope.publisher==7.3\nzope.schema==7.0.1\nzope.security==7.3\nzope.sequencesort==5.1\nzope.site==5.1\nzope.size==5.1\nzope.structuredtext==5.0\nzope.tal==5.1\nzope.tales==6.1\nzope.testbrowser==7.0.1\nzope.testing==5.1\nzope.traversing==5.1\nzope.viewlet==5.1\n```\n\n----------------------------------------\n\nTITLE: Building Zope Documentation with Tox\nDESCRIPTION: Uses tox to build the Sphinx-based documentation for Zope. This command generates the HTML output for the documentation.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/maintenance.rst#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$ bin/tox -edocs\n```\n\n----------------------------------------\n\nTITLE: Using TAL Content to Insert User Information\nDESCRIPTION: Demonstrates using tal:content to replace the content of a paragraph element with the result of calling getUserName on the user object.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/AppendixC.rst#2025-04-22_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<p tal:content=\"user/getUserName\">Fred Farkas</p>\n```\n\n----------------------------------------\n\nTITLE: Testing Non-Base64 Basic Auth Login/Password - Python\nDESCRIPTION: Simulates sending login and password in the Basic Auth header without base64 encoding. This test ensures that non-standard Basic Auth handling still allows user authentication and document modification. It requires valid test user credentials (`user_name`, `user_password`) and updates a document's title.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/src/Testing/ZopeTestCase/zopedoctest/FunctionalDocTest.txt#2025-04-22_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n>>> from Testing.ZopeTestCase import user_name, user_password\n>>> response = http(r\"\"\"\n... GET /test_folder_1_/index_html/change_title?title=Baz HTTP/1.1\n... Authorization: Basic %s:%s\n... \"\"\" % (user_name, user_password), handle_errors=False)\n\n>>> response.status\n200\n\n>>> self.folder.index_html.title_or_id()\n'Baz'\n```\n\n----------------------------------------\n\nTITLE: Installing Python Development Package on Ubuntu\nDESCRIPTION: Command to install Python 3 development package on Ubuntu 18.04, which is required for Zope installation.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/INSTALL.rst#2025-04-22_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ sudo apt-get install python3-dev\n```\n\n----------------------------------------\n\nTITLE: Float Formatting\nDESCRIPTION: String formatting to display a float with two decimal places\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/AppendixC.rst#2025-04-22_snippet_33\n\nLANGUAGE: html\nCODE:\n```\n<p tal:content=\"python:'%0.2f' % size\">\n    13.56\n  </p>\n```\n\n----------------------------------------\n\nTITLE: Registering Five's IComponentLookup Adapter in Python\nDESCRIPTION: This snippet demonstrates how to register Five's siteManagerAdapter for IComponentLookup. It imports necessary components and uses zope.component.provideAdapter to register the adapter.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/src/Products/Five/component/component.txt#2025-04-22_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nimport zope.component\nfrom Products.Five.component import siteManagerAdapter\nzope.component.provideAdapter(siteManagerAdapter)\n```\n\n----------------------------------------\n\nTITLE: Creating a Time-Consuming Python Script\nDESCRIPTION: Defines a Python script that takes a noticeable amount of execution time, used to demonstrate caching benefits.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/AdvZPT.rst#2025-04-22_snippet_41\n\nLANGUAGE: python\nCODE:\n```\n## Script (Python) \"long.py\"\n##\nfor i in range(250):\n  for j in range(250):\n    for k in range(250):\n      pass\nreturn 'Done'\n```\n\n----------------------------------------\n\nTITLE: Checking PyPI Long Description for ReST Errors in Zope\nDESCRIPTION: Concatenates README.rst and CHANGES.rst files, converts them to HTML using rst2html, and opens the result in the default browser to check for ReST rendering errors.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/maintenance.rst#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ cat README.rst <(echo) CHANGES.rst | bin/rst2html >/tmp/test.html && open /tmp/test.html\n```\n\n----------------------------------------\n\nTITLE: Event Handler Registration\nDESCRIPTION: Registers event handlers for logging object events during testing, filtering specific event types.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/src/OFS/tests/event.txt#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndef printObjectEvent(object, event):\n    print(event.__class__.__name__ + ' ' + object.getId())\n\ndef printObjectEventExceptSome(object, event):\n    if (IObjectMovedEvent.providedBy(event) or\n        IObjectCopiedEvent.providedBy(event) or\n        IObjectWillBeMovedEvent.providedBy(event) or\n        IObjectClonedEvent.providedBy(event) or\n        IRegistrationEvent.providedBy(event)):\n        return\n    print(event.__class__.__name__ + ' ' + object.getId())\n```\n\n----------------------------------------\n\nTITLE: DTML Call Tag Syntax\nDESCRIPTION: Defines the basic syntax structure for the DTML call tag, showing how to reference variables or expressions.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/AppendixA.rst#2025-04-22_snippet_2\n\nLANGUAGE: dtml\nCODE:\n```\n<dtml-call Variable|expr=\"Expression\">\n```\n\n----------------------------------------\n\nTITLE: Declaring ZCML Namespace for Browser Directives\nDESCRIPTION: This snippet demonstrates the namespace declaration for browser-related directives in ZCML. It defines the 'browser' namespace used for view and menu configurations.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/src/Products/Five/doc/directives.txt#2025-04-22_snippet_1\n\nLANGUAGE: ZCML\nCODE:\n```\n\"http://namespaces.zope.org/browser\"\n```\n\n----------------------------------------\n\nTITLE: Implementing a Python Script to Handle Not Found Errors in Zope\nDESCRIPTION: A Python script example that demonstrates how to handle Not Found errors programmatically. This script redirects users to a search form when a page isn't found, improving user experience.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zdgbook/includes/zope2_notice.rst#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n## Script (Python) \"NotFound\"\n##bind container=container\n##bind context=context\n##bind namespace=\n##bind script=script\n##bind subpath=traverse_subpath\n##parameters=\n##title=NotFound Error Handler\n\n# Get the absolute URL of the object where the error occurred\nrequest = container.REQUEST\nresponse = request.RESPONSE\n\n# Define the URL for the search form\nsearch_url = container.absolute_url() + '/search_form'\n\n# Redirect to the search form\nresponse.redirect(search_url)\n```\n\n----------------------------------------\n\nTITLE: Configuring Zope Installation\nDESCRIPTION: Commands for configuring Zope installation with and without specifying Python interpreter path\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/InstallingZope.rst#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ cd Zope-*\n$ ./configure --prefix=/where/to/install/zope\n\n$ ./configure --prefix=~/myzope/zope2 \\\n--with-python=/usr/local/bin/python\n```\n\n----------------------------------------\n\nTITLE: Nested TAL Repeat Times Table\nDESCRIPTION: Shows how to nest tal:repeat statements to create a multiplication table\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/AdvZPT.rst#2025-04-22_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<table border=\"1\">\n  <tr tal:repeat=\"x python:range(1, 13)\">\n    <td tal:repeat=\"y python:range(1, 13)\"\n        tal:content=\"python:'%d x %d = %d' % (x, y, x*y)\">\n        X x Y = Z\n    </td>\n  </tr>\n</table>\n```\n\n----------------------------------------\n\nTITLE: Creating a DTML Template for Displaying Employee Data\nDESCRIPTION: A DTML Method template that displays employee information including name, ID and salary, used to show how templates can be bound to result objects.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/RelationalDatabases.rst#2025-04-22_snippet_25\n\nLANGUAGE: html\nCODE:\n```\n<dtml-var standard_html_header>\n\n  <h1><dtml-var last>, <dtml-var first></h1>\n\n  <p><dtml-var first>'s employee id is <dtml-var emp_id>.  <dtml-var\n  first> makes <dtml-var salary fmt=\"dollars-and-cents\"> per year.</p>\n\n<dtml-var standard_html_footer>\n```\n\n----------------------------------------\n\nTITLE: Properly Initializing DTMLFile with globals() in Zope\nDESCRIPTION: Demonstrates the correct way to initialize a DTMLFile by passing the globals() dictionary as the second parameter. Forgetting the globals() parameter can lead to confusing error messages.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zdgbook/Gotchas.txt#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n# Incorrect - will cause errors\nmanage_add_XYZ_form = DTMLFile('dtml/manage_add_XYZ_form')\n\n# Correct way\nmanage_add_XYZ_form = DTMLFile('dtml/manage_add_XYZ_form', globals())\n```\n\n----------------------------------------\n\nTITLE: Running Zope with plone.recipe.zope2instance\nDESCRIPTION: Commands for running Zope in foreground and as a daemon using the script generated by plone.recipe.zope2instance.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/operation.rst#2025-04-22_snippet_9\n\nLANGUAGE: console\nCODE:\n```\n$ bin/zopeinstance fg\n...\nServing on http://127.0.0.1:8080\n```\n\nLANGUAGE: console\nCODE:\n```\n$ bin/zopeinstance start\n...\ndaemon process started, pid=60116\n```\n\nLANGUAGE: console\nCODE:\n```\n$ bin/zopeinstance status\nprogram running; pid=60116\n$ bin/zopeinstance stop\n...\ndaemon process stopped\n```\n\n----------------------------------------\n\nTITLE: Plugin Search URL Reference in RestructuredText\nDESCRIPTION: A RestructuredText hyperlink reference to search Zope plugins on Python Package Index.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/IntroducingZope.rst#2025-04-22_snippet_1\n\nLANGUAGE: restructuredtext\nCODE:\n```\n`Plugins that you can browse\\n<https://pypi.org/search/?q=&o=&c=Framework+%3A%3A+Zope>`_\n```\n\n----------------------------------------\n\nTITLE: Defining CSS Styles for Zope Zoo Website\nDESCRIPTION: CSS definitions for styling the Zope Zoo website, including font families, colors, and element styles for headings, paragraphs, tables, and status messages.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/SimpleExamples.rst#2025-04-22_snippet_0\n\nLANGUAGE: css\nCODE:\n```\nbody, p, th, td {\n  font-family: Verdana, Arial, Helvetica, sans-serif;\n  font-size: 10pt;\n}\nh1 {\n  color: #6699cc;\n  font-family: Verdana, Arial, Helvetica, sans-serif;\n  font-size: 18pt;\n  font-weight: bold;\n}\np {\n  color: #660000;\n}\n.status_message{\n  background: #ffffaa;\n  border-style: solid;\n  border-width: thin;\n  font-weight: bold;\n  padding: 4pt;\n}\nth {\n  background: #dee7ec;\n  text-align: left;\n}\n```\n\n----------------------------------------\n\nTITLE: Testing View Access With Specific Skin in Zope\nDESCRIPTION: This HTTP request tests accessing a view with the TestSkin explicitly specified. It's expected to return a 200 OK response.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/src/Products/Five/browser/tests/skin.txt#2025-04-22_snippet_3\n\nLANGUAGE: HTTP\nCODE:\n```\nGET /++skin++TestSkin/test_folder_1_/testoid/eagle.html HTTP/1.1\n```\n\n----------------------------------------\n\nTITLE: Committing Translation Changes for Zope Documentation\nDESCRIPTION: Commits changes made to a translation file (Japanese maintenance.po in this example) to the Zope repository.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/maintenance.rst#2025-04-22_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\n$ git commit locale/ja/LC_MESSAGES/maintenance.po\n```\n\n----------------------------------------\n\nTITLE: Adding Zope User with addzopeuser\nDESCRIPTION: Commands to add a new Manager user to an existing Zope instance using the addzopeuser script.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/operation.rst#2025-04-22_snippet_8\n\nLANGUAGE: console\nCODE:\n```\n$ bin/addzopeuser user password\n```\n\nLANGUAGE: console\nCODE:\n```\n$ bin/addzopeuser --configuration /path/to/etc/zope.conf user password\n```\n\n----------------------------------------\n\nTITLE: Python Exception Traceback Example\nDESCRIPTION: Example traceback showing an import error when attempting to install CMFOODocument without required CMF package dependencies.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/MaintainingZope.rst#2025-04-22_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nTraceback (most recent call last):\nFile \"/usr/share/zope/2.6.0/lib/python/OFS/Application.py\", line 541, in import_product\nproduct=__import__(pname, global_dict, global_dict, silly)\nFile \"/usr/share/zope/2.6.0/lib/python/Products/CMFOODocument/__init__.py\", line 19, in ?\nimport OODocument\nFile \"/usr/share/zope/2.6.0/lib/python/Products/CMFOODocument/OODocument.py\", line 31, in ?\nfrom Products.CMFCore.PortalContent import NoWL, ResourceLockedError\nImportError: No module named CMFCore.PortalContent\n```\n\n----------------------------------------\n\nTITLE: Multiple Attribute Control with TAL\nDESCRIPTION: Shows how to dynamically set multiple attributes using tal:attributes\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/AdvZPT.rst#2025-04-22_snippet_6\n\nLANGUAGE: xml\nCODE:\n```\n<a href=\"link\"\n   tal:attributes=\"href context/getLink;\n                   class context/getClass\">link</a>\n```\n\n----------------------------------------\n\nTITLE: Using the ZODB fsrecover.py Recovery Script\nDESCRIPTION: Shows the command-line usage and options for the `fsrecover.py` script, located in `$ZOPE_HOME/lib/python/ZODB`, used to recover data from potentially corrupted ZODB `Data.fs` files. Key options include forcing output (`-f`), setting verbosity levels (`-v`), copying partial transactions (`-p`), and packing data up to a specific point in the past (`-P`).\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/MaintainingZope.rst#2025-04-22_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\npython fsrecover.py [ <options> ] inputfile outputfile\n\nOptions:\n\n-f -- force output even if output file exists\n\n-v level -- Set the \nverbosity level:\n\n0 -- Show progress indicator (default)\n\n1 -- Show transaction times and sizes\n\n2 -- Show transaction times and sizes, and\nshow object (record) ids, versions, and sizes.\n\n-p -- Copy partial transactions. If a data record in the middle of a\ntransaction is bad, the data up to the bad data are packed. The\noutput record is marked as packed. If this option is not used,\ntransaction with any bad data are skipped.\n\n-P t -- Pack data to t seconds in the past. Note that is the \"-p\"\noption is used, then t should be 0.        \n```\n\n----------------------------------------\n\nTITLE: Testing Unauthorized Access Handling - Python\nDESCRIPTION: Tests that Zope correctly returns a 401 Unauthorized status when permissions do not allow access. It sets the 'View' permission to a more restrictive role and attempts an HTTP GET to validate the error response. Proper authentication and permission management are assumed in the test setup.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/src/Testing/ZopeTestCase/zopedoctest/FunctionalDocTest.txt#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n>>> self.folder.index_html.manage_permission('View', ['Owner'])\n>>> print(http(r\"\"\"\n... GET /test_folder_1_/index_html HTTP/1.1\n... \"\"\", handle_errors=True))\nHTTP/1.1 401 Unauthorized\n...\nWww-Authenticate: basic realm=...\n```\n\n----------------------------------------\n\nTITLE: Testing Security in Zope Browser Pages\nDESCRIPTION: This snippet demonstrates low-level security checks for browser pages, including permission checks and role assignments.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/src/Products/Five/browser/tests/pages.txt#2025-04-22_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom zope.component import getMultiAdapter\nfrom zope.publisher.browser import TestRequest\nrequest = TestRequest()\nview = getMultiAdapter((self.folder.testoid, request), name=u'eagle.txt')\n\nview.__ac_permissions__\n(('View management screens', ('', 'eagle')),)\n\nfrom Acquisition import aq_acquire\naq_acquire(view, '__roles__')\n('Manager',)\n\naq_acquire(view, 'eagle__roles__')\n('Manager',)\n```\n\n----------------------------------------\n\nTITLE: Advanced plone.recipe.zope2instance Configuration\nDESCRIPTION: Extended buildout configuration using plone.recipe.zope2instance for automated Zope setup with custom settings.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/INSTALL.rst#2025-04-22_snippet_3\n\nLANGUAGE: ini\nCODE:\n```\n[buildout]\nextends =\n    https://zopefoundation.github.io/Zope/releases/5.0/versions-prod.cfg\nparts =\n    zopeinstance\n\n[zopeinstance]\nrecipe = plone.recipe.zope2instance\neggs =\nuser = admin:adminpassword\nhttp-address = 8080\nzodb-temporary-storage = off\n```\n\n----------------------------------------\n\nTITLE: ZCML Viewlet Attribute and Template Conflict Error Handling - Python\nDESCRIPTION: Tests that an error is raised if both an attribute (other than __call__) and a template are specified in a ZCML <viewlet> directive. Supplies a problematic configuration and checks for the correct error in the raised ConfigurationError. Depends on zcml.load_string, ConfigurationError, and the test ZCML string. The test expects an error message output and serves as negative regression test coverage. Intended for doctest or similar automated test runners.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/src/Products/Five/viewlet/directives.txt#2025-04-22_snippet_11\n\nLANGUAGE: python\nCODE:\n```\n>>> zcml_string = ('''\n... <configure xmlns=\"http://namespaces.zope.org/browser\" i18n_domain=\"zope\">\n...   <viewlet\n...       name=\"testviewlet\"\n...       manager=\"Products.Five.viewlet.tests.ILeftColumn\"\n...       template=\"test_viewlet.pt\"\n...       attribute=\"faux\"\n...       permission=\"zope.Public\"\n...       />\n... </configure>\n... ''')\n\n>>> try:\n...     zcml.load_string(zcml_string)\n... except ConfigurationError as exc:\n...     print('Attribute and template cannot be used together.' in str(exc))\n... else:\n...     print('ConfigurationError not raised.')\nTrue\n```\n\n----------------------------------------\n\nTITLE: Setting up Zope Test Fixtures and Configuration\nDESCRIPTION: Initializes test environment by importing required modules and loading ZCML configurations. Sets up a traversable folder and creates a list of resource file names.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/src/Products/Five/browser/tests/resource.txt#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n>>> import Products.Five.browser.tests\n>>> from Zope2.App import zcml\n>>> zcml.load_config(\"configure.zcml\", Products.Five)\n>>> zcml.load_config('resource.zcml', package=Products.Five.browser.tests)\n\n>>> from Products.Five.tests.testing import manage_addFiveTraversableFolder\n>>> manage_addFiveTraversableFolder(self.folder, 'testoid', 'Testoid')\n\n>>> import os, glob\n>>> _prefix = os.path.dirname(Products.Five.browser.tests.__file__)\n>>> dir_resource_names = [os.path.basename(r) for r in (\n...     glob.glob('%s/*.png' % _prefix) +\n...     glob.glob('%s/*.pt' % _prefix) +\n...     glob.glob('%s/[a-z]*.py' % _prefix) +\n...     glob.glob('%s/*.css' % _prefix))]\n```\n\n----------------------------------------\n\nTITLE: Declaring ZCML Namespace for Zope Directives\nDESCRIPTION: This snippet shows the namespace declaration for Zope directives in ZCML. It defines the 'zope' namespace which is used for core Zope functionality.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/src/Products/Five/doc/directives.txt#2025-04-22_snippet_0\n\nLANGUAGE: ZCML\nCODE:\n```\n\"http://namespaces.zope.org/zope\"\n```\n\n----------------------------------------\n\nTITLE: Configuring reStructuredText Table of Contents for The Zope Book\nDESCRIPTION: A reStructuredText toctree directive that defines the structure and chapter organization of The Zope Book. It specifies numbered chapters with a maximum depth of 2 levels and lists all the chapters from introduction to appendices.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/index.rst#2025-04-22_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. toctree::\n   :numbered:\n   :maxdepth: 2\n\n   Preface.rst\n   IntroducingZope.rst\n   ZopeArchitecture.rst\n   InstallingZope.rst\n   ObjectOrientation.rst\n   UsingZope.rst\n   BasicObject.rst\n   Acquisition.rst\n   BasicScripting.rst\n   ZPT.rst\n   SimpleExamples.rst\n   Security.rst\n   AdvZPT.rst\n   ScriptingZope.rst\n   ZopeServices.rst\n   DTML.rst\n   AdvDTML.rst\n   SearchingZCatalog.rst\n   RelationalDatabases.rst\n   VirtualHosting.rst\n   Sessions.rst\n   ZEO.rst\n   ExternalTools.rst\n   MaintainingZope.rst\n   AppendixA.rst\n   AppendixB.rst\n   AppendixC.rst\n   AppendixD.rst\n   AppendixE.rst\n   Contributions.rst\n```\n\n----------------------------------------\n\nTITLE: Loading Zope 2 Product ZCML Overrides\nDESCRIPTION: Illustrates the five:loadProductsOverrides directive used to load overriding ZCML (overrides.zcml) from Zope 2 products, allowing for view or adapter overrides.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/src/Products/Five/doc/features.txt#2025-04-22_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<five:loadProductsOverrides>\n```\n\n----------------------------------------\n\nTITLE: Creating an HTML Form with DTML\nDESCRIPTION: A simple example showing how to create an HTML form within a DTML Method. The form collects a user's name and submits it to another DTML Method named 'infoAction' for processing.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/DTML.rst#2025-04-22_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<dtml-var standard_html_header>\n\n<p>Please send me information on your aardvark adoption\nprogram.</p>\n\n<form action=\"infoAction\">\nname: <input type=\"text\" name=\"user_name\"><br>\n```\n\n----------------------------------------\n\nTITLE: ZCML Viewlet Directive Missing Class or Template Error Handling - Python\nDESCRIPTION: Verifies that a ConfigurationError is raised if neither class nor template is specified in a ZCML <viewlet> directive, by attempting to load an invalid configuration and inspecting the resulting exception message. Depends on zcml.load_string and ConfigurationError, with the invalid string provided. The function accepts a ZCML snippet and expects a missing class/template error as output. Useful for regression testing. Only suitable within a Zope testing context.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/src/Products/Five/viewlet/directives.txt#2025-04-22_snippet_10\n\nLANGUAGE: python\nCODE:\n```\n>>> zcml_string = ('''\n... <configure xmlns=\"http://namespaces.zope.org/browser\" i18n_domain=\"zope\">\n...   <viewlet\n...       name=\"testviewlet\"\n...       manager=\"Products.Five.viewlet.tests.ILeftColumn\"\n...       permission=\"zope.Public\"\n...       />\n... </configure>\n... ''')\n\n>>> try:\n...     zcml.load_string(zcml_string)\n... except ConfigurationError as exc:\n...     print('Must specify a class or template' in str(exc))\n... else:\n...     print('ConfigurationError not raised.')\nTrue\n```\n\n----------------------------------------\n\nTITLE: Cleaning Up Zope Component Testing Environment\nDESCRIPTION: This snippet demonstrates the cleanup process after running Zope component tests. It imports the tearDown function from zope.component.testing and calls it to clean up the testing environment.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/src/Products/Five/browser/tests/pages.txt#2025-04-22_snippet_7\n\nLANGUAGE: Python\nCODE:\n```\n>>> from zope.component.testing import tearDown\n>>> tearDown()\n```\n\n----------------------------------------\n\nTITLE: Creating Chilean Frog DTML Document Content\nDESCRIPTION: Sample content for a DTML Document about the Chilean four-eyed frog, which demonstrates the type of content that would be indexed by the ZCatalog. This text includes descriptive information about the frog that will be searchable.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/SearchingZCatalog.rst#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nThe Chilean four-eyed frog has a bright\npair of spots on its rump that look like enormous eyes. When\nseated, the frog's thighs conceal these eyespots. When\npredators approach, the frog lowers its head and lifts its\nrump, creating a much larger and more intimidating head.\nFrogs are amphibians.\n```\n\n----------------------------------------\n\nTITLE: Manipulating Test Objects in Python Doctest for Zope\nDESCRIPTION: This doctest snippet shows how to manipulate test objects within a Zope doctest. It demonstrates accessing object properties, changing them, and deleting objects, all while verifying the changes through assertions.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/src/Testing/ZopeTestCase/zopedoctest/ZopeDocTest.txt#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n>>> ob = self.folder.object\n>>> print(ob.title_or_id())\nobject\n\n>>> ob.manage_changeProperties(title='Foo')\n>>> print(ob.title_or_id())\nFoo\n\n>>> self.folder.manage_delObjects('object')\n>>> 'object' in self.folder.objectIds()\nFalse\n```\n\n----------------------------------------\n\nTITLE: Image Size Calculation\nDESCRIPTION: Basic math to convert image size to megabytes\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/AppendixC.rst#2025-04-22_snippet_32\n\nLANGUAGE: html\nCODE:\n```\n<p tal:content=\"python:image.getSize() / 1048576.0\">\n    12.2323\n  </p>\n```\n\n----------------------------------------\n\nTITLE: Opening Zope URL with Visual Basic in Microsoft Word\nDESCRIPTION: Visual Basic code snippet demonstrating how to open a Zope script URL in Microsoft Word, including GET parameters for a lion cage washing operation.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/ScriptingZope.rst#2025-04-22_snippet_27\n\nLANGUAGE: vb\nCODE:\n```\nDocuments.Open FileName:=\"http://www.zopezoo.org/LionCages/wash?use_soap=1&water_temp=hot\"\n```\n\n----------------------------------------\n\nTITLE: Nested sqlgroup Tags in DTML\nDESCRIPTION: This example demonstrates how to use nested sqlgroup tags to create complex SQL query logic. It combines name filtering with salary conditions using AND/OR operators.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/AppendixA.rst#2025-04-22_snippet_20\n\nLANGUAGE: dtml\nCODE:\n```\nselect * from employees\n<dtml-sqlgroup where>\n  <dtml-sqlgroup>\n     <dtml-sqltest first op=\"like\" type=\"nb\">\n  <dtml-and>\n     <dtml-sqltest last op=\"like\" type=\"nb\">\n  </dtml-sqlgroup>\n<dtml-or>\n  <dtml-sqltest salary op=\"gt\" type=\"float\">\n</dtml-sqlgroup>\n```\n\n----------------------------------------\n\nTITLE: Systemd Service Configuration for Zope\nDESCRIPTION: Example systemd service configuration for running Zope as a daemon. It specifies the user, start command, and other service parameters.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/operation.rst#2025-04-22_snippet_6\n\nLANGUAGE: cfg\nCODE:\n```\n[Unit]\nDescription=Zope client zopeinstance\nAfter=network.target\n\n[Service]\nType=simple\nUser=zope\nExecStart=/opt/zopeinstance/bin/runwsgi /opt/zopeinstance/etc/zope.ini\nKillMode=control-group\nTimeoutStartSec=10\nTimeoutStopSec=10\n\n[Install]\nWantedBy=multi-user.target\n```\n\n----------------------------------------\n\nTITLE: Adding Test Object in Zope\nDESCRIPTION: This snippet adds a test object named 'testoid' to the folder. It uses a function from the simplecontent module.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/src/Products/Five/browser/tests/skin.txt#2025-04-22_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nfrom Products.Five.tests.testing.simplecontent import manage_addSimpleContent\nmanage_addSimpleContent(self.folder, 'testoid', 'Testoid')\n```\n\n----------------------------------------\n\nTITLE: Retrieving Layer Extraction Flag in Python\nDESCRIPTION: This Python snippet uses the built-in `getattr` function to safely retrieve the value of the attribute named 'LAYER_EXTRACTED' from the `self.app` object. It provides a default value of `False` if the attribute does not exist, preventing an AttributeError. This pattern is often used in tests to assert that a setup step, like layer extraction, has occurred.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/src/Testing/ZopeTestCase/zopedoctest/layerextraction.txt#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n>>> getattr(self.app, 'LAYER_EXTRACTED', False)\n True\n```\n\n----------------------------------------\n\nTITLE: RST Figure Directive - Navigator Frame\nDESCRIPTION: RST figure directive showing the Navigator Frame image with caption.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/UsingZope.rst#2025-04-22_snippet_1\n\nLANGUAGE: rst\nCODE:\n```\n.. figure:: Figures/navigator.jpg\n  \n   The Navigator Frame\n```\n\n----------------------------------------\n\nTITLE: Generating HTML Documentation with Sphinx\nDESCRIPTION: This command demonstrates how to use Sphinx to generate HTML documentation from the source files. The compatibility of this command on Windows systems is uncertain.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zdgbook/README.txt#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake html\n```\n\n----------------------------------------\n\nTITLE: SQL Query Result with Salary Filter\nDESCRIPTION: This shows another rendered SQL query result using sqlgroup, with salary and last name filters. The salary is properly formatted as a float value.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/AppendixA.rst#2025-04-22_snippet_19\n\nLANGUAGE: sql\nCODE:\n```\nselect * from employees\nwhere \n(salary > 50000.0\n and\n last='Smith'\n)\n```\n\n----------------------------------------\n\nTITLE: Importing and Setting Up ZopeDocFileSuite in Python\nDESCRIPTION: This snippet shows how to import ZopeDocFileSuite and set up a test suite for running doctests in a Zope project. It demonstrates the basic structure for integrating doctests into the test framework.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/src/Testing/ZopeTestCase/zopedoctest/ZopeDocTest.txt#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom unittest import TestSuite\nfrom Testing.ZopeTestCase import ZopeDocFileSuite\n\ndef test_suite():\n    return TestSuite((\n        ZopeDocFileSuite('ZopeDocTest.txt'),\n    ))\n```\n\n----------------------------------------\n\nTITLE: Python URL Reference in RestructuredText\nDESCRIPTION: A RestructuredText hyperlink reference to the Python programming language website.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/IntroducingZope.rst#2025-04-22_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n`Python <https://www.python.org/>`_\n```\n\n----------------------------------------\n\nTITLE: Testing Resource Directory Traversal\nDESCRIPTION: Tests the traversal and URL generation for resource directories. Verifies URL construction and resource types for all resources in the directory.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/src/Products/Five/browser/tests/resource.txt#2025-04-22_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n>>> base = 'testoid/++resource++fivetest_resources/%s'\n>>> base_url = 'http://nohost/test_folder_1_/' + base\n>>> abs_url = self.folder.unrestrictedTraverse(base % '')()\n>>> abs_url + '/' == base_url % ''\nTrue\n\n>>> for r in dir_resource_names:\n...     resource = self.folder.unrestrictedTraverse(base % r)\n...     self.assertIsInstance(resource, Resource)\n...     if not isinstance(resource, PageTemplateResource):\n...         self.assertEqual(resource(), base_url % r)\n```\n\n----------------------------------------\n\nTITLE: RST Figure Directive - Workspace Frame\nDESCRIPTION: RST figure directive showing the Workspace Frame image with caption.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/UsingZope.rst#2025-04-22_snippet_2\n\nLANGUAGE: rst\nCODE:\n```\n.. figure:: Figures/workspace.jpg\n\n   The Workspace Frame\n```\n\n----------------------------------------\n\nTITLE: TALES String Dollar Sign Escaping\nDESCRIPTION: Including literal dollar signs in string expressions\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/AppendixC.rst#2025-04-22_snippet_36\n\nLANGUAGE: html\nCODE:\n```\n<p tal:content=\"string:cost: $$$cost\">\n    cost: $42.00\n  </p>\n```\n\n----------------------------------------\n\nTITLE: License URL Reference in RestructuredText\nDESCRIPTION: A RestructuredText hyperlink reference to the Zope Public License.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/IntroducingZope.rst#2025-04-22_snippet_2\n\nLANGUAGE: restructuredtext\nCODE:\n```\n`Zope Public License or\\n'ZPL' <https://opensource.org/licenses/ZPL-2.1>`_\n```\n\n----------------------------------------\n\nTITLE: Referencing HTML in Python\nDESCRIPTION: This snippet shows how to reference HTML (Hyper Text Markup Language) in Python code. It demonstrates the string notation for HTML.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/Preface.rst#2025-04-22_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\n\"\"Hyper\\nText Markup Language\"\"\n```\n\n----------------------------------------\n\nTITLE: Registering Test Pages in Zope\nDESCRIPTION: This snippet loads configuration for test pages in Zope. It imports necessary modules and loads ZCML configurations.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/src/Products/Five/browser/tests/pages.txt#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport Products.Five.browser.tests\nfrom Zope2.App import zcml\nzcml.load_config(\"configure.zcml\", Products.Five)\nzcml.load_config('pages.zcml', package=Products.Five.browser.tests)\n```\n\n----------------------------------------\n\nTITLE: Updating Zope GitHub Pages with New Release\nDESCRIPTION: Switches to the gh-pages branch, runs a Python script to build the index, and pushes the changes to update the Zope GitHub Pages with the new release information.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/maintenance.rst#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ git checkout gh-pages\n$ python3 build_index.py\n```\n\n----------------------------------------\n\nTITLE: Cleanup Operations in Zope Testing\nDESCRIPTION: This snippet shows how to clean up after running the tests by aborting the transaction. This ensures that the test environment is reset for subsequent tests.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/src/OFS/tests/event.txt#2025-04-22_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n>>> import transaction\n>>> transaction.abort()\n```\n\n----------------------------------------\n\nTITLE: Creating Zope Directory and Extracting Source\nDESCRIPTION: Commands for creating a directory and extracting Zope source code from a tarball on UNIX-like systems\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/InstallingZope.rst#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ mkdir ~/myzope\n$ cd ~/myzope\n$ gunzip -c /tmp/Zope-*.tgz | tar xvf -\n```\n\n----------------------------------------\n\nTITLE: Mismatched Tag Type Examples in Zope 4 Page Templates\nDESCRIPTION: Shows how Chameleon requires matching opening and closing tag types, which is a stricter requirement than Zope 2's parser.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/migrations/zope4/content.rst#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<tr>\n  <td>...</td>\n</td>           <!-- BAD: Mismatched open/close tag -->\n```\n\n----------------------------------------\n\nTITLE: Referencing URL in Python\nDESCRIPTION: This snippet illustrates how to reference URLs (Uniform Resource Locators) in Python code. It shows the string notation for URLs.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/Preface.rst#2025-04-22_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\n\"\"Uniform Resource Locators\"\"\n```\n\n----------------------------------------\n\nTITLE: Basic TAL User Name Display\nDESCRIPTION: Simple TAL content replacement to display a user's name\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/AppendixC.rst#2025-04-22_snippet_29\n\nLANGUAGE: html\nCODE:\n```\n<p tal:content=\"user/getUserName\">\n    User name\n  </p>\n```\n\n----------------------------------------\n\nTITLE: Starting Zope with Python Debugger\nDESCRIPTION: Example of invoking ZPublisher.Zope() with the d=1 parameter to start Zope in debug mode with the Python debugger (pdb), showing initial debugger output and instructions.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zdgbook/TestingAndDebugging.rst#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n>>> ZPublisher.Zope('/News/postnews?new=blah', d=1)\n* Type \"s<cr>c<cr>\" to jump to beginning of real publishing process.\n* Then type c<cr> to jump to the beginning of the URL traversal\n  algorithm.\n* Then type c<cr> to jump to published object call.\n> <string>(0)?()\npdb>\n```\n\n----------------------------------------\n\nTITLE: Tagging and Uploading Zope Release to PyPI\nDESCRIPTION: Creates a Git tag for the release, pushes it to the repository, builds source and wheel distributions, and uploads them to PyPI using twine.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/maintenance.rst#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ git tag -as <TAG-NAME> -m \"- tagging release <TAG-NAME>\"\n$ git push --tags\n$ bin/zopepy setup.py egg_info -Db '' sdist bdist_wheel\n$ bin/twine upload dist/Zope-<TAG-NAME>*\n```\n\n----------------------------------------\n\nTITLE: Alternative Zope Installation with Requirements File\nDESCRIPTION: Command to install Zope using a single requirements file, though this may install additional unnecessary packages.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/INSTALL.rst#2025-04-22_snippet_6\n\nLANGUAGE: console\nCODE:\n```\n$ bin/pip install \\\n-r https://zopefoundation.github.io/Zope/releases/5.0/requirements-full.txt\n```\n\n----------------------------------------\n\nTITLE: Test Setup - ZODB Database Initialization\nDESCRIPTION: Initializes a test ZODB database connection and root for testing container events.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/src/OFS/tests/event.txt#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport ZODB.MappingStorage\ndb = ZODB.MappingStorage.DB()\nconnection = db.open()\nroot = connection.root()\n```\n\n----------------------------------------\n\nTITLE: Conditional Testing with Unless Tag\nDESCRIPTION: Shows how to use the unless tag for negative condition testing\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/AppendixA.rst#2025-04-22_snippet_34\n\nLANGUAGE: dtml\nCODE:\n```\n<dtml-unless testMode>\n  <dtml-call dangerousOperation>\n</dtml-unless>\n```\n\n----------------------------------------\n\nTITLE: WSGI Configuration Warning Note\nDESCRIPTION: Example middleware configuration note for HTTP 500 errors in zope.ini, showing the required egg:Zope#httpexceptions configuration to handle redirects properly.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/news.rst#2025-04-22_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\negg:Zope#httpexceptions\n```\n\n----------------------------------------\n\nTITLE: Setting Zope Directory Ownership for Root Startup\nDESCRIPTION: Command to set the ownership of the Zope var directory to root, which is required when starting Zope as root during system boot.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/MaintainingZope.rst#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nchown root var\n```\n\n----------------------------------------\n\nTITLE: Generating Gettext Files for Zope Documentation Translation\nDESCRIPTION: Creates .pot files that serve as the basis for all translations of the Zope documentation using Sphinx's gettext builder.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/maintenance.rst#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n$ cd docs\n$ make gettext\n```\n\n----------------------------------------\n\nTITLE: Structuring Input Fields with Additional Information in HTML\nDESCRIPTION: Demonstrates how to add additional information to input fields using the <small> element, nested within a width-defining div container. It also mentions the use of Bootstrap text color classes.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/migrations/zope4/code.rst#2025-04-22_snippet_6\n\nLANGUAGE: HTML\nCODE:\n```\n<div>\n  <input type=\"text\" name=\"example\" />\n  <small class=\"text-warning\">Additional information here</small>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Using five:deprecatedManageAddDelete in configure.zcml (XML)\nDESCRIPTION: ZCML configuration to acknowledge deprecated manage_* methods and allow Zope to call them properly while still sending events.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/src/OFS/event.txt#2025-04-22_snippet_1\n\nLANGUAGE: XML\nCODE:\n```\n<configure\n    xmlns=\"http://namespaces.zope.org/zope\"\n    xmlns:five=\"http://namespaces.zope.org/five\">\n\n  <five:deprecatedManageAddDelete\n      class=\"Products.CoolProduct.CoolDocument.CoolDocument\"/>\n\n</configure>\n```\n\n----------------------------------------\n\nTITLE: Creating Zope Instance for ZEO Client\nDESCRIPTION: This command creates a new Zope instance that will be configured as a ZEO client. It sets up the necessary directory structure and configuration files.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/ZEO.rst#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ python /path/to/Zope/bin/mkzopeinstance\n```\n\n----------------------------------------\n\nTITLE: Running litmus WebDAV test suite against Zope\nDESCRIPTION: Command to run the litmus WebDAV compatibility test suite against a local Zope instance on port 8080. Requires litmus to be installed and a running Zope instance.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/src/webdav/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nlitmus -k http://localhost:8080/ <USER> <PASSWORD>\n```\n\n----------------------------------------\n\nTITLE: Defining Table of Contents in reStructuredText for Zope Migration Documentation\nDESCRIPTION: A reStructuredText directive that creates a table of contents pointing to Zope migration guides for versions 4 and 5. The toctree has a maxdepth of 2 and includes links to zope4/index and zope5 documents.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/migrations/index.rst#2025-04-22_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. toctree::\n   :maxdepth: 2\n\n   zope4/index\n   zope5\n```\n\n----------------------------------------\n\nTITLE: Basic DTML Property Access\nDESCRIPTION: Shows basic property access that uses Zope's acquisition system to find the 'desc' property in parent objects if not found locally.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/AdvDTML.rst#2025-04-22_snippet_38\n\nLANGUAGE: dtml\nCODE:\n```\n<dtml-var \"Image2.desc\">\n```\n\n----------------------------------------\n\nTITLE: Subscriber Configuration Setup\nDESCRIPTION: Configures Zope component architecture and registers required subscribers for container events.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/src/OFS/tests/event.txt#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport zope.component\nimport OFS.subscribers\nzope.component.provideAdapter(OFS.subscribers.ObjectManagerSublocations)\nzope.component.provideHandler(OFS.subscribers.dispatchObjectWillBeMovedEvent)\nzope.component.provideHandler(OFS.subscribers.dispatchObjectMovedEvent)\nzope.component.provideHandler(OFS.subscribers.dispatchObjectCopiedEvent)\nzope.component.provideHandler(OFS.subscribers.dispatchObjectClonedEvent)\n```\n\n----------------------------------------\n\nTITLE: Configuring Allowed Inline MIME Types in Python\nDESCRIPTION: Sets environment variables to configure which MIME types are allowed to be displayed inline versus forced to download. Allows overriding the default allowed/disallowed lists.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/CHANGES.rst#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport os\n\nos.environ['OFS_IMAGE_USE_DENYLIST'] = '1'  # Switch to denylist mode\nos.environ['ALLOWED_INLINE_MIMETYPES'] = 'image/png,image/jpeg' \nos.environ['DISALLOWED_INLINE_MIMETYPES'] = 'image/svg+xml,application/pdf'\n```\n\n----------------------------------------\n\nTITLE: Importing and Setting Up ObjectManagerNameChooser Test Prerequisites in Python\nDESCRIPTION: This snippet imports necessary modules and sets up the test environment for ObjectManagerNameChooser. It creates a test folder and initializes the chooser object.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/src/Products/Five/browser/tests/adding.txt#2025-04-22_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n>>> from Products.Five.tests.testing import manage_addFiveTraversableFolder\n>>> from Products.Five.browser.adding import ObjectManagerNameChooser\n\n>>> manage_addFiveTraversableFolder(self.folder, 'testoid', 'Testoid')\n>>> chooser = ObjectManagerNameChooser(self.folder)\n```\n\n----------------------------------------\n\nTITLE: Including Zope 2 Notice in reStructuredText\nDESCRIPTION: This snippet includes a separate file containing a notice about Zope 2. It's used to add standard content across multiple documentation files.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/AppendixD.rst#2025-04-22_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. include:: includes/zope2_notice.rst\n```\n\n----------------------------------------\n\nTITLE: Testing Browser Page Overrides in Zope\nDESCRIPTION: This snippet demonstrates how to override browser pages in Zope using ZCML configuration.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/src/Products/Five/browser/tests/pages.txt#2025-04-22_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nzcml.load_string('''\n    <includeOverrides\n        package=\"Products.Five.browser.tests\"\n        file=\"overrides.zcml\" />\n''')\nview = self.folder.unrestrictedTraverse('testoid/overridden_view')\nview() == 'The mouse has been eaten by the eagle'\nTrue\n```\n\n----------------------------------------\n\nTITLE: Testing Object Moving and Copying in Zope\nDESCRIPTION: This snippet demonstrates moving and copying objects in Zope, showing the events triggered during these operations. It includes cut-paste, copy-paste, and renaming operations.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/src/OFS/tests/event.txt#2025-04-22_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n>>> ob = MyNewContent('dilbert')\n>>> folder._setObject('dilbert', ob)\nObjectWillBeAddedEvent dilbert\nObjectAddedEvent dilbert\nContainerModifiedEvent folder\n'dilbert'\n>>> cp = folder.manage_cutObjects('dilbert')\n>>> result = folder.manage_pasteObjects(cp)\nObjectWillBeMovedEvent dilbert\nObjectMovedEvent dilbert\nContainerModifiedEvent folder\n\n>>> result == [{'new_id': 'dilbert', 'id': 'dilbert'}]\nTrue\n\n>>> cp = folder.manage_copyObjects('dilbert')\n>>> result = folder.manage_pasteObjects(cp)\nObjectCopiedEvent copy_of_dilbert\nObjectWillBeAddedEvent copy_of_dilbert\nObjectAddedEvent copy_of_dilbert\nContainerModifiedEvent folder\nObjectClonedEvent copy_of_dilbert\n\n>>> result == [{'new_id': 'copy_of_dilbert', 'id': 'dilbert'}]\nTrue\n\n>>> folder.manage_renameObject('copy_of_dilbert', 'wally')\nObjectWillBeMovedEvent copy_of_dilbert\nObjectMovedEvent wally\nContainerModifiedEvent folder\n```\n\n----------------------------------------\n\nTITLE: Creating Zope Instance\nDESCRIPTION: Command for creating a new Zope instance using mkzopeinstance.py script\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/InstallingZope.rst#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ ~/myzope/zope2/bin/mkzopeinstance.py\n```\n\n----------------------------------------\n\nTITLE: User Authentication Setup\nDESCRIPTION: Creates a test user with Manager role for authentication testing\nSOURCE: https://github.com/zopefoundation/zope/blob/master/src/Products/Five/browser/tests/resource_ftest.txt#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nuf = self.folder.acl_users\n_ignored = uf._doAddUser('manager', 'r00t', ['Manager'], [])\n```\n\n----------------------------------------\n\nTITLE: Using Cadaver to Connect to Zope WebDAV Source Port\nDESCRIPTION: This code snippet demonstrates how to use the cadaver command-line tool to connect to Zope's WebDAV source port and list the contents of the root directory.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/ExternalTools.rst#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ cadaver\ndav:!> open http://localhost:9800/\nLooking up hostname... Connecting to server... connected.\nConnecting to server... connected.\ndav:/> ls\nListing collection `/': (reconnecting...done) succeeded.\nColl:  Control_Panel                           0  Jun  14:03\nColl:  ZopeBook                                0  Jul  22:57\nColl:  temp_folder                             0  Jul  19:47\nColl:  tutorial                                0  Jun  00:42\nacl_users                               0  Dec   2009\nbrowser_id_manager                      0  Jun  14:01\nindex_html                             93  Jul  01:01\nsession_data_manager                    0  Jun  14:01\nstandard_error_message               1365  Jan   2009\ndav:/>\n```\n\n----------------------------------------\n\nTITLE: Grouping Form Fields with Zope 'record' Directive in HTML\nDESCRIPTION: Demonstrates using the ':record' directive in HTML input names to group related fields. Zope marshals these fields (date.year, date.month, date.day) into a single request variable named 'date', which is a record object with attributes 'year', 'month', and 'day'. The ':int' directive ensures the values are converted to integers.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zdgbook/ObjectPublishing.rst#2025-04-22_snippet_12\n\nLANGUAGE: html\nCODE:\n```\n<input name=\"date.year:record:int\">\n<input name=\"date.month:record:int\">\n<input name=\"date.day:record:int\">\n```\n\n----------------------------------------\n\nTITLE: Cleanup Test Environment\nDESCRIPTION: Performs cleanup operations to reset the test environment and tear down the test module.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/src/Products/Five/component/makesite.txt#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom zope.testing.cleanup import cleanUp\ncleanUp()\ntearDown(test, name='Products.Five.component.makesite')\n```\n\n----------------------------------------\n\nTITLE: Installing Sphinx for Zope2 Book Documentation\nDESCRIPTION: Command to install Sphinx documentation system using easy_install. Sphinx is required to build the Zope2 Book from its reStructured Text source files.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/README.txt#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\neasy_install Sphinx\n```\n\n----------------------------------------\n\nTITLE: Referencing Zope2 in Python\nDESCRIPTION: This snippet demonstrates how to reference Zope2 in Python code. It's a basic example showing the string notation for Zope2.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/Preface.rst#2025-04-22_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n\"\"Zope2\"\"\n```\n\n----------------------------------------\n\nTITLE: Editing Zope Objects with Cadaver\nDESCRIPTION: This snippet shows how to use cadaver to edit a Zope object (index_html) using an external editor. It demonstrates the process of authentication, downloading the file, and opening it in the vi editor.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/ExternalTools.rst#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndav:/> edit index_html\nConnecting to server... connected.\nLocking `index_html': Authentication required for Zope on server `saints.homeunix.com':\nUsername: admin\nPassword:\nRetrying: succeeded.\nDownloading `/index_html' to /tmp/cadaver-edit-001320\nProgress: [=============================>] 100.0% of 93 bytes succeeded.\nRunning editor: `vi /tmp/cadaver-edit-001320'...\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Not Found Handler with Zope Page Templates\nDESCRIPTION: Example of creating a simple custom Not Found handler using a Zope Page Template. This template will display a friendly error message when a page isn't found.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zdgbook/includes/zope2_notice.rst#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<html>\n<head>\n  <title>Page not found</title>\n</head>\n<body>\n  <h2>Not Found</h2>\n  <p>\n    The page you requested does not exist.\n  </p>\n  <p>\n    Check the URL and try again, or contact the webmaster if you think\n    this is an error.\n  </p>\n</body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Content Provider in Python\nDESCRIPTION: Creates a simple MessageBox content provider class that implements IContentProvider interface and defines basic render and update methods.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/src/Products/Five/browser/tests/provider.txt#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n@zope.interface.implementer(interfaces.IContentProvider)\n@zope.component.adapter(\n    zope.interface.Interface,\n    browser.IDefaultBrowserLayer,\n    zope.interface.Interface\n)\nclass MessageBox(object):\n    message = u'My Message'\n\n    def __init__(self, context, request, view):\n        self.__parent__ = view\n\n    def update(self):\n        pass\n\n    def render(self):\n        return u'<div class=\"box\">%s</div>' %self.message\n```\n\n----------------------------------------\n\nTITLE: SQL Query with Different Multiple AND Conditions Example (SQL)\nDESCRIPTION: Another SQL query example selecting employees using two 'AND' conditions: where the first name is 'Old' and the last name is 'McDonald'.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/RelationalDatabases.rst#2025-04-22_snippet_16\n\nLANGUAGE: SQL\nCODE:\n```\nselect * from employees \nwhere(\n  first = 'Old'\n  and\n  last = 'McDonald'     \n)\n```\n\n----------------------------------------\n\nTITLE: Testing View Access With Default Skin in Zope\nDESCRIPTION: This HTTP request tests accessing a view after setting TestSkin as the default skin. It's expected to return a 200 OK response.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/src/Products/Five/browser/tests/skin.txt#2025-04-22_snippet_5\n\nLANGUAGE: HTTP\nCODE:\n```\nGET /test_folder_1_/testoid/eagle.html HTTP/1.1\n```\n\n----------------------------------------\n\nTITLE: Building HTML Documentation for Zope2 Book\nDESCRIPTION: Command to generate the HTML version of the Zope2 Book using Sphinx. This transforms the reStructured Text source files into a browsable HTML documentation site.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/README.txt#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake html\n```\n\n----------------------------------------\n\nTITLE: Defining Selection Property for Zope Product Class\nDESCRIPTION: Example of defining a selection property in the _properties structure for a Zope product class, including the select_variable key.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zdgbook/Products.rst#2025-04-22_snippet_6\n\nLANGUAGE: Python\nCODE:\n```\n_properties=({'id' : 'favorite_color',\n                'type' : 'selection',\n                'select_variable' : 'getColors'\n               },\n              )\n```\n\n----------------------------------------\n\nTITLE: XML Processing Setup in Python\nDESCRIPTION: Initial setup for XML processing using Python's SAX parser.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/ScriptingZope.rst#2025-04-22_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nfrom xml.sax import parseString\nfrom xml.sax.handler import ContentHandler\n```\n\n----------------------------------------\n\nTITLE: RST Content Notice Include\nDESCRIPTION: Include directive for a Zope2 notice in RST format.\nSOURCE: https://github.com/zopefoundation/zope/blob/master/docs/zopebook/UsingZope.rst#2025-04-22_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. include:: includes/zope2_notice.rst\n```"
  }
]