[
  {
    "owner": "testableio",
    "repo": "system.io.abstractions",
    "content": "TITLE: Implementing MockFileSystem Class in C#\nDESCRIPTION: Defines a serializable MockFileSystem class that extends FileSystemBase and implements IFileSystem and IMockFileDataAccessor interfaces. This class provides a complete mock file system implementation for testing purposes.\nSOURCE: https://github.com/testableio/system.io.abstractions/blob/main/tests/TestableIO.System.IO.Abstractions.Api.Tests/Expected/TestableIO.System.IO.Abstractions.TestingHelpers_netstandard2.0.txt#2025-04-22_snippet_18\n\nLANGUAGE: C#\nCODE:\n```\n[System.Serializable]\npublic class MockFileSystem : System.IO.Abstractions.FileSystemBase, System.IO.Abstractions.IFileSystem, System.IO.Abstractions.TestingHelpers.IMockFileDataAccessor\n{\n    public MockFileSystem() { }\n    public MockFileSystem(System.IO.Abstractions.TestingHelpers.MockFileSystemOptions options) { }\n    public MockFileSystem(System.Collections.Generic.IDictionary<string, System.IO.Abstractions.TestingHelpers.MockFileData> files, System.IO.Abstractions.TestingHelpers.MockFileSystemOptions options) { }\n    public MockFileSystem(System.Collections.Generic.IDictionary<string, System.IO.Abstractions.TestingHelpers.MockFileData> files, string currentDirectory = \"\") { }\n    public System.Collections.Generic.IEnumerable<string> AllDirectories { get; }\n    public System.Collections.Generic.IEnumerable<string> AllDrives { get; }\n    public System.Collections.Generic.IEnumerable<string> AllFiles { get; }\n    public System.Collections.Generic.IEnumerable<string> AllNodes { get; }\n    public System.Collections.Generic.IEnumerable<string> AllPaths { get; }\n    public override System.IO.Abstractions.IDirectory Directory { get; }\n    public override System.IO.Abstractions.IDirectoryInfoFactory DirectoryInfo { get; }\n    public override System.IO.Abstractions.IDriveInfoFactory DriveInfo { get; }\n    public override System.IO.Abstractions.IFile File { get; }\n    public override System.IO.Abstractions.IFileInfoFactory FileInfo { get; }\n    public override System.IO.Abstractions.IFileStreamFactory FileStream { get; }\n    public System.IO.Abstractions.IFileSystem FileSystem { get; }\n    public override System.IO.Abstractions.IFileSystemWatcherFactory FileSystemWatcher { get; }\n    public override System.IO.Abstractions.IFileVersionInfoFactory FileVersionInfo { get; }\n    public override System.IO.Abstractions.IPath Path { get; }\n    public System.IO.Abstractions.TestingHelpers.PathVerifier PathVerifier { get; }\n    public System.IO.Abstractions.TestingHelpers.StringOperations StringOperations { get; }\n```\n\n----------------------------------------\n\nTITLE: Declaring Mock File Data Accessor Interface in System.IO.Abstractions (C#)\nDESCRIPTION: Defines the IMockFileDataAccessor interface, which extends IFileSystem and exposes methods and properties for manipulating directories, files, and drives in an in-memory mock file system. Dependencies include System.IO.Abstractions and System.Collections.Generic. Key functions allow adding, removing, and querying virtual file system entities. Inputs and outputs are typically string paths and custom mock data objects. The interface is crucial for enabling unit/mocking scenarios without actual disk I/O.\nSOURCE: https://github.com/testableio/system.io.abstractions/blob/main/tests/TestableIO.System.IO.Abstractions.Api.Tests/Expected/TestableIO.System.IO.Abstractions.TestingHelpers_net6.0.txt#2025-04-22_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\npublic interface IMockFileDataAccessor : System.IO.Abstractions.IFileSystem\n{\n    System.Collections.Generic.IEnumerable<string> AllDirectories { get; }\n    System.Collections.Generic.IEnumerable<string> AllDrives { get; }\n    System.Collections.Generic.IEnumerable<string> AllFiles { get; }\n    System.Collections.Generic.IEnumerable<string> AllPaths { get; }\n    System.IO.Abstractions.IFileSystem FileSystem { get; }\n    System.IO.Abstractions.TestingHelpers.PathVerifier PathVerifier { get; }\n    System.IO.Abstractions.TestingHelpers.StringOperations StringOperations { get; }\n    void AddDirectory(string path);\n    void AddDrive(string name, System.IO.Abstractions.TestingHelpers.MockDriveData mockDrive);\n    void AddFile(string path, System.IO.Abstractions.TestingHelpers.MockFileData mockFile, bool verifyAccess = true);\n    void AddFileFromEmbeddedResource(string path, System.Reflection.Assembly resourceAssembly, string embeddedResourcePath);\n    void AddFilesFromEmbeddedNamespace(string path, System.Reflection.Assembly resourceAssembly, string embeddedResourcePath);\n    System.IO.Abstractions.TestingHelpers.MockFileData AdjustTimes(System.IO.Abstractions.TestingHelpers.MockFileData fileData, System.IO.Abstractions.TestingHelpers.TimeAdjustments timeAdjustments);\n    bool FileExists(string path);\n    System.IO.Abstractions.TestingHelpers.MockDriveData GetDrive(string name);\n    System.IO.Abstractions.TestingHelpers.MockFileData GetFile(string path);\n    void MoveDirectory(string sourcePath, string destPath);\n    void RemoveFile(string path, bool verifyAccess = true);\n}\n```\n\n----------------------------------------\n\nTITLE: Overriding File Operations for Mocking with System.IO.Abstractions in C#\nDESCRIPTION: This serializable mock file class overrides methods of FileBase to provide comprehensive simulation of file-related operations for testing. Dependencies include IMockFileDataAccessor and System.IO.Abstractions interfaces. Functionality covers appending, creating, copying, encrypting, reading, writing, and attribute/filetime management, supporting both synchronous and asynchronous patterns. Inputs include file paths, content strings, encodings, and optional parameters, while outputs are typically void, boolean, or framework interfaces. Extensive coverage enables granular and realistic file testing in .NET.\nSOURCE: https://github.com/testableio/system.io.abstractions/blob/main/tests/TestableIO.System.IO.Abstractions.Api.Tests/Expected/TestableIO.System.IO.Abstractions.TestingHelpers_net8.0.txt#2025-04-22_snippet_10\n\nLANGUAGE: C#\nCODE:\n```\n[System.Serializable]\npublic class MockFile : System.IO.Abstractions.FileBase\n{\n    public MockFile(System.IO.Abstractions.TestingHelpers.IMockFileDataAccessor mockFileDataAccessor) { }\n    public override void AppendAllLines(string path, System.Collections.Generic.IEnumerable<string> contents) { }\n    public override void AppendAllLines(string path, System.Collections.Generic.IEnumerable<string> contents, System.Text.Encoding encoding) { }\n    public override System.Threading.Tasks.Task AppendAllLinesAsync(string path, System.Collections.Generic.IEnumerable<string> contents, System.Threading.CancellationToken cancellationToken = default) { }\n    public override System.Threading.Tasks.Task AppendAllLinesAsync(string path, System.Collections.Generic.IEnumerable<string> contents, System.Text.Encoding encoding, System.Threading.CancellationToken cancellationToken = default) { }\n    public override void AppendAllText(string path, string contents) { }\n    public override void AppendAllText(string path, string contents, System.Text.Encoding encoding) { }\n    public override System.Threading.Tasks.Task AppendAllTextAsync(string path, string contents, System.Threading.CancellationToken cancellationToken = default) { }\n    public override System.Threading.Tasks.Task AppendAllTextAsync(string path, string contents, System.Text.Encoding encoding, System.Threading.CancellationToken cancellationToken = default) { }\n    public override System.IO.StreamWriter AppendText(string path) { }\n    public override void Copy(string sourceFileName, string destFileName) { }\n    public override void Copy(string sourceFileName, string destFileName, bool overwrite) { }\n    public override System.IO.Abstractions.FileSystemStream Create(string path) { }\n    public override System.IO.Abstractions.FileSystemStream Create(string path, int bufferSize) { }\n    public override System.IO.Abstractions.FileSystemStream Create(string path, int bufferSize, System.IO.FileOptions options) { }\n    public override System.IO.Abstractions.IFileSystemInfo CreateSymbolicLink(string path, string pathToTarget) { }\n    public override System.IO.StreamWriter CreateText(string path) { }\n    public override void Decrypt(string path) { }\n    public override void Delete(string path) { }\n    public override void Encrypt(string path) { }\n    public override bool Exists(string path) { }\n    public override System.IO.FileAttributes GetAttributes(Microsoft.Win32.SafeHandles.SafeFileHandle fileHandle) { }\n    public override System.IO.FileAttributes GetAttributes(string path) { }\n    public override System.DateTime GetCreationTime(Microsoft.Win32.SafeHandles.SafeFileHandle fileHandle) { }\n    public override System.DateTime GetCreationTime(string path) { }\n    public override System.DateTime GetCreationTimeUtc(Microsoft.Win32.SafeHandles.SafeFileHandle fileHandle) { }\n    public override System.DateTime GetCreationTimeUtc(string path) { }\n    public override System.DateTime GetLastAccessTime(Microsoft.Win32.SafeHandles.SafeFileHandle fileHandle) { }\n    public override System.DateTime GetLastAccessTime(string path) { }\n    public override System.DateTime GetLastAccessTimeUtc(Microsoft.Win32.SafeHandles.SafeFileHandle fileHandle) { }\n    public override System.DateTime GetLastAccessTimeUtc(string path) { }\n    public override System.DateTime GetLastWriteTime(Microsoft.Win32.SafeHandles.SafeFileHandle fileHandle) { }\n    public override System.DateTime GetLastWriteTime(string path) { }\n    public override System.DateTime GetLastWriteTimeUtc(Microsoft.Win32.SafeHandles.SafeFileHandle fileHandle) { }\n    public override System.DateTime GetLastWriteTimeUtc(string path) { }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating MockFileSystem Class in C#\nDESCRIPTION: Implementation of a mock file system class that inherits from FileSystemBase and implements IFileSystem and IMockFileDataAccessor. This class serves as the main entry point for working with the virtual file system in tests.\nSOURCE: https://github.com/testableio/system.io.abstractions/blob/main/tests/TestableIO.System.IO.Abstractions.Api.Tests/Expected/TestableIO.System.IO.Abstractions.TestingHelpers_net9.0.txt#2025-04-22_snippet_17\n\nLANGUAGE: C#\nCODE:\n```\n[System.Serializable]\npublic class MockFileSystem : System.IO.Abstractions.FileSystemBase, System.IO.Abstractions.IFileSystem, System.IO.Abstractions.TestingHelpers.IMockFileDataAccessor\n{\n    public MockFileSystem() { }\n    public MockFileSystem(System.IO.Abstractions.TestingHelpers.MockFileSystemOptions options) { }\n    public MockFileSystem(System.Collections.Generic.IDictionary<string, System.IO.Abstractions.TestingHelpers.MockFileData> files, System.IO.Abstractions.TestingHelpers.MockFileSystemOptions options) { }\n    public MockFileSystem(System.Collections.Generic.IDictionary<string, System.IO.Abstractions.TestingHelpers.MockFileData> files, string currentDirectory = \"\") { }\n    public System.Collections.Generic.IEnumerable<string> AllDirectories { get; }\n    public System.Collections.Generic.IEnumerable<string> AllDrives { get; }\n    public System.Collections.Generic.IEnumerable<string> AllFiles { get; }\n    public System.Collections.Generic.IEnumerable<string> AllNodes { get; }\n    public System.Collections.Generic.IEnumerable<string> AllPaths { get; }\n    public override System.IO.Abstractions.IDirectory Directory { get; }\n    public override System.IO.Abstractions.IDirectoryInfoFactory DirectoryInfo { get; }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing MockFileSystem Class in C#\nDESCRIPTION: This class implements a mock file system for testing purposes. It provides methods for adding and manipulating mock files and directories, as well as properties for accessing various file system components.\nSOURCE: https://github.com/testableio/system.io.abstractions/blob/main/tests/TestableIO.System.IO.Abstractions.Api.Tests/Expected/TestableIO.System.IO.Abstractions.TestingHelpers_netstandard2.1.txt#2025-04-22_snippet_16\n\nLANGUAGE: C#\nCODE:\n```\npublic class MockFileSystem : System.IO.Abstractions.FileSystemBase, System.IO.Abstractions.IFileSystem, System.IO.Abstractions.TestingHelpers.IMockFileDataAccessor\n{\n    public MockFileSystem() { }\n    public MockFileSystem(System.IO.Abstractions.TestingHelpers.MockFileSystemOptions options) { }\n    public MockFileSystem(System.Collections.Generic.IDictionary<string, System.IO.Abstractions.TestingHelpers.MockFileData> files, System.IO.Abstractions.TestingHelpers.MockFileSystemOptions options) { }\n    public MockFileSystem(System.Collections.Generic.IDictionary<string, System.IO.Abstractions.TestingHelpers.MockFileData> files, string currentDirectory = \"\") { }\n    // ... (properties and methods omitted for brevity)\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Mock File Data Structures with System.IO.Abstractions in C#\nDESCRIPTION: This snippet declares the MockFileData class for in-memory file representation, supporting tracking of attributes such as creation and access times, contents (both binary and text), access control, file attributes, and version info. It includes implicit conversion for string initialization and static defaults for time and encoding. These features enable thorough modeling of file system semantics in unit tests without real file access.\nSOURCE: https://github.com/testableio/system.io.abstractions/blob/main/tests/TestableIO.System.IO.Abstractions.Api.Tests/Expected/TestableIO.System.IO.Abstractions.TestingHelpers_net472.txt#2025-04-22_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\n[System.Serializable]\npublic class MockFileData\n{\n    public static readonly System.DateTimeOffset DefaultDateTimeOffset;\n    public static readonly System.Text.Encoding DefaultEncoding;\n    public MockFileData(System.IO.Abstractions.TestingHelpers.MockFileData template) { }\n    public MockFileData(byte[] contents) { }\n    public MockFileData(string textContents) { }\n    public MockFileData(string textContents, System.Text.Encoding encoding) { }\n    public System.Security.AccessControl.FileSecurity AccessControl { get; set; }\n    public System.IO.FileShare AllowedFileShare { get; set; }\n    public System.IO.FileAttributes Attributes { get; set; }\n    public byte[] Contents { get; set; }\n    public System.DateTimeOffset CreationTime { get; set; }\n    public System.IO.Abstractions.IFileVersionInfo FileVersionInfo { get; set; }\n    public bool IsDirectory { get; }\n    public System.DateTimeOffset LastAccessTime { get; set; }\n    public System.DateTimeOffset LastWriteTime { get; set; }\n    public string TextContents { get; set; }\n    public static System.IO.Abstractions.TestingHelpers.MockFileData op_Implicit(string s) { }\n}\n```\n\n----------------------------------------\n\nTITLE: Overriding System.IO File Operations - System.IO.Abstractions - C#\nDESCRIPTION: This code snippet shows a set of method overrides for common file system operations, such as GetUnixFileMode, Move, Open, ReadAllBytes, ReadAllLines, WriteAllText, Replace, and other attribute/file management operations. They are intended for use in a mock or abstraction layer for unit testing, simulating the behaviors of the real .NET System.IO file interactions. Dependencies include System.IO.Abstractions and related types for FileMode, FileAccess, SafeFileHandle, FileAttributes, UnixFileMode, FileSecurity, and encoding. Methods accept various combinations of parameters—such as file handles, paths, options, and cancellation tokens—and return either file-system-specific types or perform file actions, supporting both sync and async use. Inputs are usually file identifiers and configuration flags; outputs may vary from file data to Task-based async responses. Limitations and functionality depend on the backing mock implementation and may omit certain platform-specific behaviors.\nSOURCE: https://github.com/testableio/system.io.abstractions/blob/main/tests/TestableIO.System.IO.Abstractions.Api.Tests/Expected/TestableIO.System.IO.Abstractions.TestingHelpers_net8.0.txt#2025-04-22_snippet_11\n\nLANGUAGE: csharp\nCODE:\n```\npublic override System.IO.UnixFileMode GetUnixFileMode(Microsoft.Win32.SafeHandles.SafeFileHandle fileHandle) { }\npublic override System.IO.UnixFileMode GetUnixFileMode(string path) { }\npublic override void Move(string sourceFileName, string destFileName) { }\npublic override void Move(string sourceFileName, string destFileName, bool overwrite) { }\npublic override System.IO.Abstractions.FileSystemStream Open(string path, System.IO.FileMode mode) { }\npublic override System.IO.Abstractions.FileSystemStream Open(string path, System.IO.FileStreamOptions options) { }\npublic override System.IO.Abstractions.FileSystemStream Open(string path, System.IO.FileMode mode, System.IO.FileAccess access) { }\npublic override System.IO.Abstractions.FileSystemStream Open(string path, System.IO.FileMode mode, System.IO.FileAccess access, System.IO.FileShare share) { }\npublic override System.IO.Abstractions.FileSystemStream OpenRead(string path) { }\npublic override System.IO.StreamReader OpenText(string path) { }\npublic override System.IO.Abstractions.FileSystemStream OpenWrite(string path) { }\npublic override byte[] ReadAllBytes(string path) { }\npublic override System.Threading.Tasks.Task<byte[]> ReadAllBytesAsync(string path, System.Threading.CancellationToken cancellationToken = default) { }\npublic override string[] ReadAllLines(string path) { }\npublic override string[] ReadAllLines(string path, System.Text.Encoding encoding) { }\npublic override System.Threading.Tasks.Task<string[]> ReadAllLinesAsync(string path, System.Threading.CancellationToken cancellationToken = default) { }\npublic override System.Threading.Tasks.Task<string[]> ReadAllLinesAsync(string path, System.Text.Encoding encoding, System.Threading.CancellationToken cancellationToken = default) { }\npublic override string ReadAllText(string path) { }\npublic override string ReadAllText(string path, System.Text.Encoding encoding) { }\npublic override System.Threading.Tasks.Task<string> ReadAllTextAsync(string path, System.Threading.CancellationToken cancellationToken = default) { }\npublic override System.Threading.Tasks.Task<string> ReadAllTextAsync(string path, System.Text.Encoding encoding, System.Threading.CancellationToken cancellationToken = default) { }\npublic override System.Collections.Generic.IEnumerable<string> ReadLines(string path) { }\npublic override System.Collections.Generic.IEnumerable<string> ReadLines(string path, System.Text.Encoding encoding) { }\npublic override System.Collections.Generic.IAsyncEnumerable<string> ReadLinesAsync(string path, System.Threading.CancellationToken cancellationToken = default) { }\n[System.Runtime.CompilerServices.AsyncIteratorStateMachine(typeof(System.IO.Abstractions.TestingHelpers.MockFile.<ReadLinesAsync>d__10))]\npublic override System.Collections.Generic.IAsyncEnumerable<string> ReadLinesAsync(string path, System.Text.Encoding encoding, [System.Runtime.CompilerServices.EnumeratorCancellation] System.Threading.CancellationToken cancellationToken = default) { }\npublic override void Replace(string sourceFileName, string destinationFileName, string destinationBackupFileName) { }\npublic override void Replace(string sourceFileName, string destinationFileName, string destinationBackupFileName, bool ignoreMetadataErrors) { }\npublic override System.IO.Abstractions.IFileSystemInfo ResolveLinkTarget(string linkPath, bool returnFinalTarget) { }\npublic override void SetAttributes(Microsoft.Win32.SafeHandles.SafeFileHandle fileHandle, System.IO.FileAttributes fileAttributes) { }\npublic override void SetAttributes(string path, System.IO.FileAttributes fileAttributes) { }\npublic override void SetCreationTime(Microsoft.Win32.SafeHandles.SafeFileHandle fileHandle, System.DateTime creationTime) { }\npublic override void SetCreationTime(string path, System.DateTime creationTime) { }\npublic override void SetCreationTimeUtc(Microsoft.Win32.SafeHandles.SafeFileHandle fileHandle, System.DateTime creationTimeUtc) { }\npublic override void SetCreationTimeUtc(string path, System.DateTime creationTimeUtc) { }\npublic override void SetLastAccessTime(Microsoft.Win32.SafeHandles.SafeFileHandle fileHandle, System.DateTime lastAccessTime) { }\npublic override void SetLastAccessTime(string path, System.DateTime lastAccessTime) { }\npublic override void SetLastAccessTimeUtc(Microsoft.Win32.SafeHandles.SafeFileHandle fileHandle, System.DateTime lastAccessTimeUtc) { }\npublic override void SetLastAccessTimeUtc(string path, System.DateTime lastAccessTimeUtc) { }\npublic override void SetLastWriteTime(Microsoft.Win32.SafeHandles.SafeFileHandle fileHandle, System.DateTime lastWriteTime) { }\npublic override void SetLastWriteTime(string path, System.DateTime lastWriteTime) { }\npublic override void SetLastWriteTimeUtc(Microsoft.Win32.SafeHandles.SafeFileHandle fileHandle, System.DateTime lastWriteTimeUtc) { }\npublic override void SetLastWriteTimeUtc(string path, System.DateTime lastWriteTimeUtc) { }\npublic override void SetUnixFileMode(Microsoft.Win32.SafeHandles.SafeFileHandle fileHandle, System.IO.UnixFileMode mode) { }\npublic override void SetUnixFileMode(string path, System.IO.UnixFileMode mode) { }\npublic override void WriteAllBytes(string path, byte[] bytes) { }\npublic override System.Threading.Tasks.Task WriteAllBytesAsync(string path, byte[] bytes, System.Threading.CancellationToken cancellationToken = default) { }\npublic override void WriteAllLines(string path, System.Collections.Generic.IEnumerable<string> contents) { }\npublic override void WriteAllLines(string path, string[] contents) { }\npublic override void WriteAllLines(string path, System.Collections.Generic.IEnumerable<string> contents, System.Text.Encoding encoding) { }\npublic override void WriteAllLines(string path, string[] contents, System.Text.Encoding encoding) { }\npublic override System.Threading.Tasks.Task WriteAllLinesAsync(string path, System.Collections.Generic.IEnumerable<string> contents, System.Threading.CancellationToken cancellationToken = default) { }\npublic override System.Threading.Tasks.Task WriteAllLinesAsync(string path, System.Collections.Generic.IEnumerable<string> contents, System.Text.Encoding encoding, System.Threading.CancellationToken cancellationToken = default) { }\npublic override void WriteAllText(string path, string contents) { }\npublic override void WriteAllText(string path, string contents, System.Text.Encoding encoding) { }\npublic override System.Threading.Tasks.Task WriteAllTextAsync(string path, string contents, System.Threading.CancellationToken cancellationToken = default) { }\npublic override System.Threading.Tasks.Task WriteAllTextAsync(string path, string contents, System.Text.Encoding encoding, System.Threading.CancellationToken cancellationToken = default) { }\n```\n\n----------------------------------------\n\nTITLE: Defining MockFileSystem in C#\nDESCRIPTION: Defines the `MockFileSystem` class, inheriting from `FileSystemBase` and implementing `IFileSystem` and `IMockFileDataAccessor`. This is the core class for simulating file system interactions in tests. It provides mock implementations for accessing directories (`Directory`), files (`File`), paths (`Path`), drive info (`DriveInfo`), and factories (`FileInfo`, `FileStream`, `FileSystemWatcher`). It manages an in-memory representation of files and directories, allowing operations like adding/getting files (`AddFile`, `GetFile`), adding directories (`AddDirectory`), and querying file system state (`AllFiles`, `AllDirectories`, `FileExists`).\nSOURCE: https://github.com/testableio/system.io.abstractions/blob/main/tests/TestableIO.System.IO.Abstractions.Api.Tests/Expected/TestableIO.System.IO.Abstractions.TestingHelpers_net472.txt#2025-04-22_snippet_12\n\nLANGUAGE: csharp\nCODE:\n```\n[System.Serializable]\npublic class MockFileSystem : System.IO.Abstractions.FileSystemBase, System.IO.Abstractions.IFileSystem, System.IO.Abstractions.TestingHelpers.IMockFileDataAccessor\n{\n    public MockFileSystem() { }\n    public MockFileSystem(System.IO.Abstractions.TestingHelpers.MockFileSystemOptions options) { }\n    public MockFileSystem(System.Collections.Generic.IDictionary<string, System.IO.Abstractions.TestingHelpers.MockFileData> files, System.IO.Abstractions.TestingHelpers.MockFileSystemOptions options) { }\n    public MockFileSystem(System.Collections.Generic.IDictionary<string, System.IO.Abstractions.TestingHelpers.MockFileData> files, string currentDirectory = \"\") { }\n    public System.Collections.Generic.IEnumerable<string> AllDirectories { get; }\n    public System.Collections.Generic.IEnumerable<string> AllDrives { get; }\n    public System.Collections.Generic.IEnumerable<string> AllFiles { get; }\n    public System.Collections.Generic.IEnumerable<string> AllNodes { get; }\n    public System.Collections.Generic.IEnumerable<string> AllPaths { get; }\n    public override System.IO.Abstractions.IDirectory Directory { get; }\n    public override System.IO.Abstractions.IDirectoryInfoFactory DirectoryInfo { get; }\n    public override System.IO.Abstractions.IDriveInfoFactory DriveInfo { get; }\n    public override System.IO.Abstractions.IFile File { get; }\n    public override System.IO.Abstractions.IFileInfoFactory FileInfo { get; }\n    public override System.IO.Abstractions.IFileStreamFactory FileStream { get; }\n    public System.IO.Abstractions.IFileSystem FileSystem { get; }\n    public override System.IO.Abstractions.IFileSystemWatcherFactory FileSystemWatcher { get; }\n    public override System.IO.Abstractions.IFileVersionInfoFactory FileVersionInfo { get; }\n    public override System.IO.Abstractions.IPath Path { get; }\n    public System.IO.Abstractions.TestingHelpers.PathVerifier PathVerifier { get; }\n    public System.IO.Abstractions.TestingHelpers.StringOperations StringOperations { get; }\n    public void AddDirectory(System.IO.Abstractions.IDirectoryInfo path) { }\n    public void AddDirectory(string path) { }\n    public void AddDrive(string name, System.IO.Abstractions.TestingHelpers.MockDriveData mockDrive) { }\n    public void AddEmptyFile(System.IO.Abstractions.IFileInfo path) { }\n    public void AddEmptyFile(string path) { }\n    public void AddFile(System.IO.Abstractions.IFileInfo path, System.IO.Abstractions.TestingHelpers.MockFileData data, bool verifyAccess = true) { }\n    public void AddFile(string path, System.IO.Abstractions.TestingHelpers.MockFileData mockFile, bool verifyAccess = true) { }\n    public void AddFileFromEmbeddedResource(string path, System.Reflection.Assembly resourceAssembly, string embeddedResourcePath) { }\n    public void AddFilesFromEmbeddedNamespace(string path, System.Reflection.Assembly resourceAssembly, string embeddedResourcePath) { }\n    public System.IO.Abstractions.TestingHelpers.MockFileData AdjustTimes(System.IO.Abstractions.TestingHelpers.MockFileData fileData, System.IO.Abstractions.TestingHelpers.TimeAdjustments timeAdjustments) { }\n    public bool FileExists(string path) { }\n    public System.IO.Abstractions.TestingHelpers.MockDriveData GetDrive(string name) { }\n    public System.IO.Abstractions.TestingHelpers.MockFileData GetFile(System.IO.Abstractions.IFileInfo path) { }\n    public System.IO.Abstractions.TestingHelpers.MockFileData GetFile(string path) { }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining and Configuring MockFileData using System.IO.Abstractions in C#\nDESCRIPTION: This class encapsulates mock file data for unit testing scenarios, including file attributes, contents (as both bytes and text), access control, timestamps, and whether the mock file represents a directory. Constructors allow initialization using raw bytes, text content, another MockFileData, or string and encoding combinations. Dependencies include System, System.IO, System.Text, and System.Security.AccessControl. Provides strong mocking support for simulating file contents and metadata in test environments.\nSOURCE: https://github.com/testableio/system.io.abstractions/blob/main/tests/TestableIO.System.IO.Abstractions.Api.Tests/Expected/TestableIO.System.IO.Abstractions.TestingHelpers_netstandard2.1.txt#2025-04-22_snippet_11\n\nLANGUAGE: csharp\nCODE:\n```\n[System.Serializable]\npublic class MockFileData\n{\n    public static readonly System.DateTimeOffset DefaultDateTimeOffset;\n    public static readonly System.Text.Encoding DefaultEncoding;\n    public MockFileData(System.IO.Abstractions.TestingHelpers.MockFileData template) { }\n    public MockFileData(byte[] contents) { }\n    public MockFileData(string textContents) { }\n    public MockFileData(string textContents, System.Text.Encoding encoding) { }\n    public System.Security.AccessControl.FileSecurity AccessControl { get; set; }\n    public System.IO.FileShare AllowedFileShare { get; set; }\n    public System.IO.FileAttributes Attributes { get; set; }\n    public byte[] Contents { get; set; }\n    public System.DateTimeOffset CreationTime { get; set; }\n    public System.IO.Abstractions.IFileVersionInfo FileVersionInfo { get; set; }\n    public bool IsDirectory { get; }\n    public System.DateTimeOffset LastAccessTime { get; set; }\n    public System.DateTimeOffset LastWriteTime { get; set; }\n    public string TextContents { get; set; }\n    public static System.IO.Abstractions.TestingHelpers.MockFileData op_Implicit(string s) { }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing MyComponent with System.IO.Abstractions\nDESCRIPTION: Defines a C# class MyComponent that uses the IFileSystem interface to perform file reading operations. It ensures file contents have a specific string and throws an exception otherwise. It requires the TestableIO.System.IO.Abstractions library for IFileSystem access.\nSOURCE: https://github.com/testableio/system.io.abstractions/blob/main/README.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\npublic class MyComponent\n{\n    readonly IFileSystem fileSystem;\n\n    // <summary>Create MyComponent with the given fileSystem implementation</summary>\n    public MyComponent(IFileSystem fileSystem)\n    {\n        this.fileSystem = fileSystem;\n    }\n    /// <summary>Create MyComponent</summary>\n    public MyComponent() : this(\n        fileSystem: new FileSystem() //use default implementation which calls System.IO\n    )\n    {\n    }\n\n    public void Validate()\n    {\n        foreach (var textFile in fileSystem.Directory.GetFiles(@\"c:\\\", \"*.txt\", SearchOption.TopDirectoryOnly))\n        {\n            var text = fileSystem.File.ReadAllText(textFile);\n            if (text != \"Testing is awesome.\")\n                throw new NotSupportedException(\"We can't go on together. It's not me, it's you.\");\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing FileSystem Class in C#\nDESCRIPTION: FileSystem class implements the FileSystemBase abstract class, providing concrete implementations for various file system operations through properties like Directory, File, and Path.\nSOURCE: https://github.com/testableio/system.io.abstractions/blob/main/tests/TestableIO.System.IO.Abstractions.Api.Tests/Expected/TestableIO.System.IO.Abstractions.Wrappers_net9.0.txt#2025-04-22_snippet_18\n\nLANGUAGE: C#\nCODE:\n```\n[System.Serializable]\npublic class FileSystem : System.IO.Abstractions.FileSystemBase\n{\n    public FileSystem() { }\n    public override System.IO.Abstractions.IDirectory Directory { get; }\n    public override System.IO.Abstractions.IDirectoryInfoFactory DirectoryInfo { get; }\n    public override System.IO.Abstractions.IDriveInfoFactory DriveInfo { get; }\n    public override System.IO.Abstractions.IFile File { get; }\n    public override System.IO.Abstractions.IFileInfoFactory FileInfo { get; }\n    public override System.IO.Abstractions.IFileStreamFactory FileStream { get; }\n    public override System.IO.Abstractions.IFileSystemWatcherFactory FileSystemWatcher { get; }\n    public override System.IO.Abstractions.IFileVersionInfoFactory FileVersionInfo { get; }\n    public override System.IO.Abstractions.IPath Path { get; }\n}\n```\n\n----------------------------------------\n\nTITLE: Describing MockFileData for File Content and Metadata Emulation in C#\nDESCRIPTION: The MockFileData class encapsulates file contents (as byte arrays or strings), file and security attributes, timestamps, and encoding information for simulated files. It provides multiple constructors for different file initialization scenarios including text, bytes, and templates. Static members support default encoding/time settings and implicit conversions. This class underlies the testable in-memory file system model and is a dependency for other mock file/folder abstractions.\nSOURCE: https://github.com/testableio/system.io.abstractions/blob/main/tests/TestableIO.System.IO.Abstractions.Api.Tests/Expected/TestableIO.System.IO.Abstractions.TestingHelpers_netstandard2.0.txt#2025-04-22_snippet_9\n\nLANGUAGE: csharp\nCODE:\n```\n[System.Serializable]\npublic class MockFileData\n{\n    public static readonly System.DateTimeOffset DefaultDateTimeOffset;\n    public static readonly System.Text.Encoding DefaultEncoding;\n    public MockFileData(System.IO.Abstractions.TestingHelpers.MockFileData template) { }\n    public MockFileData(byte[] contents) { }\n    public MockFileData(string textContents) { }\n    public MockFileData(string textContents, System.Text.Encoding encoding) { }\n    public System.Security.AccessControl.FileSecurity AccessControl { get; set; }\n    public System.IO.FileShare AllowedFileShare { get; set; }\n    public System.IO.FileAttributes Attributes { get; set; }\n    public byte[] Contents { get; set; }\n    public System.DateTimeOffset CreationTime { get; set; }\n    public System.IO.Abstractions.IFileVersionInfo FileVersionInfo { get; set; }\n    public bool IsDirectory { get; }\n    public System.DateTimeOffset LastAccessTime { get; set; }\n    public System.DateTimeOffset LastWriteTime { get; set; }\n    public string TextContents { get; set; }\n    public static System.IO.Abstractions.TestingHelpers.MockFileData op_Implicit(string s) { }\n}\n```\n\n----------------------------------------\n\nTITLE: FileBase Abstract Class for File Operations in C#\nDESCRIPTION: An abstract base class that implements IFile interface for file operations. It provides method signatures for various file operations like reading, writing, appending, and manipulating files, with support for both synchronous and asynchronous operations.\nSOURCE: https://github.com/testableio/system.io.abstractions/blob/main/tests/TestableIO.System.IO.Abstractions.Api.Tests/Expected/TestableIO.System.IO.Abstractions.Wrappers_net9.0.txt#2025-04-22_snippet_12\n\nLANGUAGE: C#\nCODE:\n```\n[System.Serializable]\npublic abstract class FileBase : System.IO.Abstractions.IFile, System.IO.Abstractions.IFileSystemEntity\n{\n    protected FileBase(System.IO.Abstractions.IFileSystem fileSystem) { }\n    public System.IO.Abstractions.IFileSystem FileSystem { get; }\n    public abstract void AppendAllBytes(string path, System.ReadOnlySpan<byte> bytes);\n    public abstract void AppendAllBytes(string path, byte[] bytes);\n    public abstract System.Threading.Tasks.Task AppendAllBytesAsync(string path, System.ReadOnlyMemory<byte> bytes, System.Threading.CancellationToken cancellationToken = default);\n    public abstract System.Threading.Tasks.Task AppendAllBytesAsync(string path, byte[] bytes, System.Threading.CancellationToken cancellationToken = default);\n    public abstract void AppendAllLines(string path, System.Collections.Generic.IEnumerable<string> contents);\n    public abstract void AppendAllLines(string path, System.Collections.Generic.IEnumerable<string> contents, System.Text.Encoding encoding);\n    public abstract System.Threading.Tasks.Task AppendAllLinesAsync(string path, System.Collections.Generic.IEnumerable<string> contents, System.Threading.CancellationToken cancellationToken = default);\n    public abstract System.Threading.Tasks.Task AppendAllLinesAsync(string path, System.Collections.Generic.IEnumerable<string> contents, System.Text.Encoding encoding, System.Threading.CancellationToken cancellationToken = default);\n    public abstract void AppendAllText(string path, System.ReadOnlySpan<char> contents);\n    public abstract void AppendAllText(string path, string contents);\n    public abstract void AppendAllText(string path, System.ReadOnlySpan<char> contents, System.Text.Encoding encoding);\n    public abstract void AppendAllText(string path, string contents, System.Text.Encoding encoding);\n    public abstract System.Threading.Tasks.Task AppendAllTextAsync(string path, System.ReadOnlyMemory<char> contents, System.Threading.CancellationToken cancellationToken = default);\n    public abstract System.Threading.Tasks.Task AppendAllTextAsync(string path, string contents, System.Threading.CancellationToken cancellationToken = default);\n    public abstract System.Threading.Tasks.Task AppendAllTextAsync(string path, System.ReadOnlyMemory<char> contents, System.Text.Encoding encoding, System.Threading.CancellationToken cancellationToken = default);\n    public abstract System.Threading.Tasks.Task AppendAllTextAsync(string path, string contents, System.Text.Encoding encoding, System.Threading.CancellationToken cancellationToken = default);\n    public abstract System.IO.StreamWriter AppendText(string path);\n    public abstract void Copy(string sourceFileName, string destFileName);\n    public abstract void Copy(string sourceFileName, string destFileName, bool overwrite);\n    public abstract System.IO.Abstractions.FileSystemStream Create(string path);\n    public abstract System.IO.Abstractions.FileSystemStream Create(string path, int bufferSize);\n    public abstract System.IO.Abstractions.FileSystemStream Create(string path, int bufferSize, System.IO.FileOptions options);\n    public abstract System.IO.Abstractions.IFileSystemInfo CreateSymbolicLink(string path, string pathToTarget);\n    public abstract System.IO.StreamWriter CreateText(string path);\n    public abstract void Decrypt(string path);\n    public abstract void Delete(string path);\n    public abstract void Encrypt(string path);\n    public abstract bool Exists(string path);\n    public abstract System.IO.FileAttributes GetAttributes(Microsoft.Win32.SafeHandles.SafeFileHandle fileHandle);\n    public abstract System.IO.FileAttributes GetAttributes(string path);\n    public abstract System.DateTime GetCreationTime(Microsoft.Win32.SafeHandles.SafeFileHandle fileHandle);\n    public abstract System.DateTime GetCreationTime(string path);\n```\n\n----------------------------------------\n\nTITLE: Defining the Abstract FileBase Class (C#)\nDESCRIPTION: Defines the abstract `FileBase` class, implementing `IFile` and `IFileSystemEntity` from System.IO.Abstractions. It includes a constructor accepting `IFileSystem` and declares numerous abstract methods (both synchronous and asynchronous) mirroring `System.IO.File` operations like appending, copying, creating, deleting, encrypting, checking existence, getting attributes/timestamps, moving, opening, and reading files. This serves as the foundation for testable file operations.\nSOURCE: https://github.com/testableio/system.io.abstractions/blob/main/tests/TestableIO.System.IO.Abstractions.Api.Tests/Expected/TestableIO.System.IO.Abstractions.Wrappers_net6.0.txt#2025-04-22_snippet_12\n\nLANGUAGE: csharp\nCODE:\n```\n    [System.Serializable]\n    public abstract class FileBase : System.IO.Abstractions.IFile, System.IO.Abstractions.IFileSystemEntity\n    {\n        protected FileBase(System.IO.Abstractions.IFileSystem fileSystem) { }\n        public System.IO.Abstractions.IFileSystem FileSystem { get; }\n        public abstract void AppendAllLines(string path, System.Collections.Generic.IEnumerable<string> contents);\n        public abstract void AppendAllLines(string path, System.Collections.Generic.IEnumerable<string> contents, System.Text.Encoding encoding);\n        public abstract System.Threading.Tasks.Task AppendAllLinesAsync(string path, System.Collections.Generic.IEnumerable<string> contents, System.Threading.CancellationToken cancellationToken = default);\n        public abstract System.Threading.Tasks.Task AppendAllLinesAsync(string path, System.Collections.Generic.IEnumerable<string> contents, System.Text.Encoding encoding, System.Threading.CancellationToken cancellationToken = default);\n        public abstract void AppendAllText(string path, string contents);\n        public abstract void AppendAllText(string path, string contents, System.Text.Encoding encoding);\n        public abstract System.Threading.Tasks.Task AppendAllTextAsync(string path, string contents, System.Threading.CancellationToken cancellationToken = default);\n        public abstract System.Threading.Tasks.Task AppendAllTextAsync(string path, string contents, System.Text.Encoding encoding, System.Threading.CancellationToken cancellationToken = default);\n        public abstract System.IO.StreamWriter AppendText(string path);\n        public abstract void Copy(string sourceFileName, string destFileName);\n        public abstract void Copy(string sourceFileName, string destFileName, bool overwrite);\n        public abstract System.IO.Abstractions.FileSystemStream Create(string path);\n        public abstract System.IO.Abstractions.FileSystemStream Create(string path, int bufferSize);\n        public abstract System.IO.Abstractions.FileSystemStream Create(string path, int bufferSize, System.IO.FileOptions options);\n        public abstract System.IO.Abstractions.IFileSystemInfo CreateSymbolicLink(string path, string pathToTarget);\n        public abstract System.IO.StreamWriter CreateText(string path);\n        public abstract void Decrypt(string path);\n        public abstract void Delete(string path);\n        public abstract void Encrypt(string path);\n        public abstract bool Exists(string path);\n        public abstract System.IO.FileAttributes GetAttributes(string path);\n        public abstract System.DateTime GetCreationTime(string path);\n        public abstract System.DateTime GetCreationTimeUtc(string path);\n        public abstract System.DateTime GetLastAccessTime(string path);\n        public abstract System.DateTime GetLastAccessTimeUtc(string path);\n        public abstract System.DateTime GetLastWriteTime(string path);\n        public abstract System.DateTime GetLastWriteTimeUtc(string path);\n        public abstract void Move(string sourceFileName, string destFileName);\n        public abstract void Move(string sourceFileName, string destFileName, bool overwrite);\n        public abstract System.IO.Abstractions.FileSystemStream Open(string path, System.IO.FileMode mode);\n        public abstract System.IO.Abstractions.FileSystemStream Open(string path, System.IO.FileStreamOptions options);\n        public abstract System.IO.Abstractions.FileSystemStream Open(string path, System.IO.FileMode mode, System.IO.FileAccess access);\n        public abstract System.IO.Abstractions.FileSystemStream Open(string path, System.IO.FileMode mode, System.IO.FileAccess access, System.IO.FileShare share);\n        public abstract System.IO.Abstractions.FileSystemStream OpenRead(string path);\n        public abstract System.IO.StreamReader OpenText(string path);\n        public abstract System.IO.Abstractions.FileSystemStream OpenWrite(string path);\n        public abstract byte[] ReadAllBytes(string path);\n        public abstract System.Threading.Tasks.Task<byte[]> ReadAllBytesAsync(string path, System.Threading.CancellationToken cancellationToken = default);\n        public abstract string[] ReadAllLines(string path);\n        public abstract string[] ReadAllLines(string path, System.Text.Encoding encoding);\n    }\n```\n\n----------------------------------------\n\nTITLE: Implementing Abstract FileSystemBase Class in C#\nDESCRIPTION: Abstract base class that implements the IFileSystem interface. Provides the foundation for concrete file system implementations with abstract properties that must be implemented by derived classes.\nSOURCE: https://github.com/testableio/system.io.abstractions/blob/main/tests/TestableIO.System.IO.Abstractions.Api.Tests/Expected/TestableIO.System.IO.Abstractions.Wrappers_netstandard2.0.txt#2025-04-22_snippet_16\n\nLANGUAGE: C#\nCODE:\n```\n[System.Serializable]\npublic abstract class FileSystemBase : System.IO.Abstractions.IFileSystem\n{\n    protected FileSystemBase() { }\n    public abstract System.IO.Abstractions.IDirectory Directory { get; }\n    public abstract System.IO.Abstractions.IDirectoryInfoFactory DirectoryInfo { get; }\n    public abstract System.IO.Abstractions.IDriveInfoFactory DriveInfo { get; }\n    public abstract System.IO.Abstractions.IFile File { get; }\n    public abstract System.IO.Abstractions.IFileInfoFactory FileInfo { get; }\n    public abstract System.IO.Abstractions.IFileStreamFactory FileStream { get; }\n    public abstract System.IO.Abstractions.IFileSystemWatcherFactory FileSystemWatcher { get; }\n    public abstract System.IO.Abstractions.IFileVersionInfoFactory FileVersionInfo { get; }\n    public abstract System.IO.Abstractions.IPath Path { get; }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing MockFileInfo Class in C#\nDESCRIPTION: Definition of the MockFileInfo class which mocks the FileInfo functionality. This class provides access to file properties and operations like copy, move, delete, and stream access without requiring actual files on disk.\nSOURCE: https://github.com/testableio/system.io.abstractions/blob/main/tests/TestableIO.System.IO.Abstractions.Api.Tests/Expected/TestableIO.System.IO.Abstractions.TestingHelpers_net6.0.txt#2025-04-22_snippet_17\n\nLANGUAGE: C#\nCODE:\n```\n[System.Serializable]\npublic class MockFileInfo : System.IO.Abstractions.FileInfoBase, System.IO.Abstractions.IFileSystemAclSupport\n{\n    public MockFileInfo(System.IO.Abstractions.TestingHelpers.IMockFileDataAccessor mockFileSystem, string path) { }\n    public override System.IO.FileAttributes Attributes { get; set; }\n    public override System.DateTime CreationTime { get; set; }\n    public override System.DateTime CreationTimeUtc { get; set; }\n    public override System.IO.Abstractions.IDirectoryInfo Directory { get; }\n    public override string DirectoryName { get; }\n    public override bool Exists { get; }\n    public override string Extension { get; }\n    public override string FullName { get; }\n    public override bool IsReadOnly { get; set; }\n    public override System.DateTime LastAccessTime { get; set; }\n    public override System.DateTime LastAccessTimeUtc { get; set; }\n    public override System.DateTime LastWriteTime { get; set; }\n    public override System.DateTime LastWriteTimeUtc { get; set; }\n    public override long Length { get; }\n    public override string LinkTarget { get; }\n    public override string Name { get; }\n    public override System.IO.StreamWriter AppendText() { }\n    public override System.IO.Abstractions.IFileInfo CopyTo(string destFileName) { }\n    public override System.IO.Abstractions.IFileInfo CopyTo(string destFileName, bool overwrite) { }\n    public override System.IO.Abstractions.FileSystemStream Create() { }\n    public override void CreateAsSymbolicLink(string pathToTarget) { }\n    public override System.IO.StreamWriter CreateText() { }\n    public override void Decrypt() { }\n    public override void Delete() { }\n    public override void Encrypt() { }\n    [System.Runtime.Versioning.SupportedOSPlatform(\"windows\")]\n    public object GetAccessControl() { }\n    [System.Runtime.Versioning.SupportedOSPlatform(\"windows\")]\n    public object GetAccessControl(System.IO.Abstractions.IFileSystemAclSupport.AccessControlSections includeSections) { }\n    public override void MoveTo(string destFileName) { }\n    public override void MoveTo(string destFileName, bool overwrite) { }\n    public override System.IO.Abstractions.FileSystemStream Open(System.IO.FileMode mode) { }\n    public override System.IO.Abstractions.FileSystemStream Open(System.IO.FileStreamOptions options) { }\n    public override System.IO.Abstractions.FileSystemStream Open(System.IO.FileMode mode, System.IO.FileAccess access) { }\n    public override System.IO.Abstractions.FileSystemStream Open(System.IO.FileMode mode, System.IO.FileAccess access, System.IO.FileShare share) { }\n    public override System.IO.Abstractions.FileSystemStream OpenRead() { }\n    public override System.IO.StreamReader OpenText() { }\n    public override System.IO.Abstractions.FileSystemStream OpenWrite() { }\n    public override void Refresh() { }\n    public override System.IO.Abstractions.IFileInfo Replace(string destinationFileName, string destinationBackupFileName) { }\n    public override System.IO.Abstractions.IFileInfo Replace(string destinationFileName, string destinationBackupFileName, bool ignoreMetadataErrors) { }\n    public override System.IO.Abstractions.IFileSystemInfo ResolveLinkTarget(bool returnFinalTarget) { }\n    [System.Runtime.Versioning.SupportedOSPlatform(\"windows\")]\n    public void SetAccessControl(object value) { }\n    public override string ToString() { }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining FileSystem Class in C#\nDESCRIPTION: Concrete implementation of FileSystemBase that provides the actual implementation of the IFileSystem interface. This class serves as the main entry point for file system operations.\nSOURCE: https://github.com/testableio/system.io.abstractions/blob/main/tests/TestableIO.System.IO.Abstractions.Api.Tests/Expected/TestableIO.System.IO.Abstractions.Wrappers_netstandard2.0.txt#2025-04-22_snippet_15\n\nLANGUAGE: C#\nCODE:\n```\n[System.Serializable]\npublic class FileSystem : System.IO.Abstractions.FileSystemBase\n{\n    public FileSystem() { }\n    public override System.IO.Abstractions.IDirectory Directory { get; }\n    public override System.IO.Abstractions.IDirectoryInfoFactory DirectoryInfo { get; }\n    public override System.IO.Abstractions.IDriveInfoFactory DriveInfo { get; }\n    public override System.IO.Abstractions.IFile File { get; }\n    public override System.IO.Abstractions.IFileInfoFactory FileInfo { get; }\n    public override System.IO.Abstractions.IFileStreamFactory FileStream { get; }\n    public override System.IO.Abstractions.IFileSystemWatcherFactory FileSystemWatcher { get; }\n    public override System.IO.Abstractions.IFileVersionInfoFactory FileVersionInfo { get; }\n    public override System.IO.Abstractions.IPath Path { get; }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Mock File Operations in C#\nDESCRIPTION: Defines a serializable class `MockFile` that provides mock implementations for static file operations, inheriting from `System.IO.Abstractions.FileBase`. It includes methods for appending data, copying, creating, decrypting, deleting, encrypting, checking existence, getting attributes/times, moving, opening streams, and reading file content (bytes, lines, text), including asynchronous versions. It depends on an `IMockFileDataAccessor` passed during construction to interact with the mock file system.\nSOURCE: https://github.com/testableio/system.io.abstractions/blob/main/tests/TestableIO.System.IO.Abstractions.Api.Tests/Expected/TestableIO.System.IO.Abstractions.TestingHelpers_netstandard2.1.txt#2025-04-22_snippet_9\n\nLANGUAGE: csharp\nCODE:\n```\n    [System.Serializable]\n    public class MockFile : System.IO.Abstractions.FileBase\n    {\n        public MockFile(System.IO.Abstractions.TestingHelpers.IMockFileDataAccessor mockFileDataAccessor) { }\n        public override void AppendAllLines(string path, System.Collections.Generic.IEnumerable<string> contents) { }\n        public override void AppendAllLines(string path, System.Collections.Generic.IEnumerable<string> contents, System.Text.Encoding encoding) { }\n        public override System.Threading.Tasks.Task AppendAllLinesAsync(string path, System.Collections.Generic.IEnumerable<string> contents, System.Threading.CancellationToken cancellationToken = default) { }\n        public override System.Threading.Tasks.Task AppendAllLinesAsync(string path, System.Collections.Generic.IEnumerable<string> contents, System.Text.Encoding encoding, System.Threading.CancellationToken cancellationToken = default) { }\n        public override void AppendAllText(string path, string contents) { }\n        public override void AppendAllText(string path, string contents, System.Text.Encoding encoding) { }\n        public override System.Threading.Tasks.Task AppendAllTextAsync(string path, string contents, System.Threading.CancellationToken cancellationToken = default) { }\n        public override System.Threading.Tasks.Task AppendAllTextAsync(string path, string contents, System.Text.Encoding encoding, System.Threading.CancellationToken cancellationToken = default) { }\n        public override System.IO.StreamWriter AppendText(string path) { }\n        public override void Copy(string sourceFileName, string destFileName) { }\n        public override void Copy(string sourceFileName, string destFileName, bool overwrite) { }\n        public override System.IO.Abstractions.FileSystemStream Create(string path) { }\n        public override System.IO.Abstractions.FileSystemStream Create(string path, int bufferSize) { }\n        public override System.IO.Abstractions.FileSystemStream Create(string path, int bufferSize, System.IO.FileOptions options) { }\n        public override System.IO.StreamWriter CreateText(string path) { }\n        public override void Decrypt(string path) { }\n        public override void Delete(string path) { }\n        public override void Encrypt(string path) { }\n        public override bool Exists(string path) { }\n        public override System.IO.FileAttributes GetAttributes(string path) { }\n        public override System.DateTime GetCreationTime(string path) { }\n        public override System.DateTime GetCreationTimeUtc(string path) { }\n        public override System.DateTime GetLastAccessTime(string path) { }\n        public override System.DateTime GetLastAccessTimeUtc(string path) { }\n        public override System.DateTime GetLastWriteTime(string path) { }\n        public override System.DateTime GetLastWriteTimeUtc(string path) { }\n        public override void Move(string sourceFileName, string destFileName) { }\n        public override System.IO.Abstractions.FileSystemStream Open(string path, System.IO.FileMode mode) { }\n        public override System.IO.Abstractions.FileSystemStream Open(string path, System.IO.FileMode mode, System.IO.FileAccess access) { }\n        public override System.IO.Abstractions.FileSystemStream Open(string path, System.IO.FileMode mode, System.IO.FileAccess access, System.IO.FileShare share) { }\n        public override System.IO.Abstractions.FileSystemStream OpenRead(string path) { }\n        public override System.IO.StreamReader OpenText(string path) { }\n        public override System.IO.Abstractions.FileSystemStream OpenWrite(string path) { }\n        public override byte[] ReadAllBytes(string path) { }\n        public override System.Threading.Tasks.Task<byte[]> ReadAllBytesAsync(string path, System.Threading.CancellationToken cancellationToken = default) { }\n        public override string[] ReadAllLines(string path) { }\n        public override string[] ReadAllLines(string path, System.Text.Encoding encoding) { }\n        public override System.Threading.Tasks.Task<string[]> ReadAllLinesAsync(string path, System.Threading.CancellationToken cancellationToken = default) { }\n        public override System.Threading.Tasks.Task<string[]> ReadAllLinesAsync(string path, System.Text.Encoding encoding, System.Threading.CancellationToken cancellationToken = default) { }\n        public override string ReadAllText(string path) { }\n        public override string ReadAllText(string path, System.Text.Encoding encoding) { }\n        public override System.Threading.Tasks.Task<string> ReadAllTextAsync(string path, System.Threading.CancellationToken cancellationToken = default) { }\n        public override System.Threading.Tasks.Task<string> ReadAllTextAsync(string path, System.Text.Encoding encoding, System.Threading.CancellationToken cancellationToken = default) { }\n\n```\n\n----------------------------------------\n\nTITLE: Implementing MockFileSystem Class in C#\nDESCRIPTION: Main implementation of the mock file system, providing an in-memory representation of a file system for testing. Supports creating, adding, and managing mock files and directories without accessing actual file system.\nSOURCE: https://github.com/testableio/system.io.abstractions/blob/main/tests/TestableIO.System.IO.Abstractions.Api.Tests/Expected/TestableIO.System.IO.Abstractions.TestingHelpers_net6.0.txt#2025-04-22_snippet_22\n\nLANGUAGE: C#\nCODE:\n```\n[System.Serializable]\npublic class MockFileSystem : System.IO.Abstractions.FileSystemBase, System.IO.Abstractions.IFileSystem, System.IO.Abstractions.TestingHelpers.IMockFileDataAccessor\n{\n    public MockFileSystem() { }\n    public MockFileSystem(System.IO.Abstractions.TestingHelpers.MockFileSystemOptions options) { }\n    public MockFileSystem(System.Collections.Generic.IDictionary<string, System.IO.Abstractions.TestingHelpers.MockFileData> files, System.IO.Abstractions.TestingHelpers.MockFileSystemOptions options) { }\n    public MockFileSystem(System.Collections.Generic.IDictionary<string, System.IO.Abstractions.TestingHelpers.MockFileData> files, string currentDirectory = \"\") { }\n    public System.Collections.Generic.IEnumerable<string> AllDirectories { get; }\n    public System.Collections.Generic.IEnumerable<string> AllDrives { get; }\n    public System.Collections.Generic.IEnumerable<string> AllFiles { get; }\n    public System.Collections.Generic.IEnumerable<string> AllNodes { get; }\n    public System.Collections.Generic.IEnumerable<string> AllPaths { get; }\n    public override System.IO.Abstractions.IDirectory Directory { get; }\n    public override System.IO.Abstractions.IDirectoryInfoFactory DirectoryInfo { get; }\n    public override System.IO.Abstractions.IDriveInfoFactory DriveInfo { get; }\n    public override System.IO.Abstractions.IFile File { get; }\n    public override System.IO.Abstractions.IFileInfoFactory FileInfo { get; }\n    public override System.IO.Abstractions.IFileStreamFactory FileStream { get; }\n    public System.IO.Abstractions.IFileSystem FileSystem { get; }\n    public override System.IO.Abstractions.IFileSystemWatcherFactory FileSystemWatcher { get; }\n    public override System.IO.Abstractions.IFileVersionInfoFactory FileVersionInfo { get; }\n    public override System.IO.Abstractions.IPath Path { get; }\n    public System.IO.Abstractions.TestingHelpers.PathVerifier PathVerifier { get; }\n    public System.IO.Abstractions.TestingHelpers.StringOperations StringOperations { get; }\n    public void AddDirectory(System.IO.Abstractions.IDirectoryInfo path) { }\n    public void AddDirectory(string path) { }\n    public void AddDrive(string name, System.IO.Abstractions.TestingHelpers.MockDriveData mockDrive) { }\n    public void AddEmptyFile(System.IO.Abstractions.IFileInfo path) { }\n    public void AddEmptyFile(string path) { }\n    public void AddFile(System.IO.Abstractions.IFileInfo path, System.IO.Abstractions.TestingHelpers.MockFileData data, bool verifyAccess = true) { }\n    public void AddFile(string path, System.IO.Abstractions.TestingHelpers.MockFileData mockFile, bool verifyAccess = true) { }\n    public void AddFileFromEmbeddedResource(string path, System.Reflection.Assembly resourceAssembly, string embeddedResourcePath) { }\n    public void AddFilesFromEmbeddedNamespace(string path, System.Reflection.Assembly resourceAssembly, string embeddedResourcePath) { }\n    public System.IO.Abstractions.TestingHelpers.MockFileData AdjustTimes(System.IO.Abstractions.TestingHelpers.MockFileData fileData, System.IO.Abstractions.TestingHelpers.TimeAdjustments timeAdjustments) { }\n    public bool FileExists(string path) { }\n    public System.IO.Abstractions.TestingHelpers.MockDriveData GetDrive(string name) { }\n    public System.IO.Abstractions.TestingHelpers.MockFileData GetFile(System.IO.Abstractions.IFileInfo path) { }\n    public System.IO.Abstractions.TestingHelpers.MockFileData GetFile(string path) { }\n    public System.IO.Abstractions.TestingHelpers.MockFileSystem MockTime(System.Func<System.DateTime> dateTimeProvider) { }\n    public void MoveDirectory(string sourcePath, string destPath) { }\n    public void RemoveFile(string path, bool verifyAccess = true) { }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing File Operations in System.IO.Abstractions\nDESCRIPTION: Abstract file system operations implementation with methods for creating, reading, writing, and manipulating files. The implementation provides a consistent interface for file operations while allowing for dependency injection and testing.\nSOURCE: https://github.com/testableio/system.io.abstractions/blob/main/tests/TestableIO.System.IO.Abstractions.Api.Tests/Expected/TestableIO.System.IO.Abstractions.Wrappers_netstandard2.1.txt#2025-04-22_snippet_24\n\nLANGUAGE: C#\nCODE:\n```\npublic override System.IO.Abstractions.FileSystemStream Create(string path) { }\npublic override System.IO.Abstractions.FileSystemStream Create(string path, int bufferSize) { }\npublic override System.IO.Abstractions.FileSystemStream Create(string path, int bufferSize, System.IO.FileOptions options) { }\npublic override System.IO.StreamWriter CreateText(string path) { }\npublic override void Decrypt(string path) { }\npublic override void Delete(string path) { }\npublic override void Encrypt(string path) { }\npublic override bool Exists(string path) { }\npublic override System.IO.FileAttributes GetAttributes(string path) { }\npublic override System.DateTime GetCreationTime(string path) { }\npublic override System.DateTime GetCreationTimeUtc(string path) { }\npublic override System.DateTime GetLastAccessTime(string path) { }\npublic override System.DateTime GetLastAccessTimeUtc(string path) { }\npublic override System.DateTime GetLastWriteTime(string path) { }\npublic override System.DateTime GetLastWriteTimeUtc(string path) { }\npublic override void Move(string sourceFileName, string destFileName) { }\npublic override System.IO.Abstractions.FileSystemStream Open(string path, System.IO.FileMode mode) { }\npublic override System.IO.Abstractions.FileSystemStream Open(string path, System.IO.FileMode mode, System.IO.FileAccess access) { }\npublic override System.IO.Abstractions.FileSystemStream Open(string path, System.IO.FileMode mode, System.IO.FileAccess access, System.IO.FileShare share) { }\npublic override System.IO.Abstractions.FileSystemStream OpenRead(string path) { }\npublic override System.IO.StreamReader OpenText(string path) { }\npublic override System.IO.Abstractions.FileSystemStream OpenWrite(string path) { }\npublic override byte[] ReadAllBytes(string path) { }\npublic override System.Threading.Tasks.Task<byte[]> ReadAllBytesAsync(string path, System.Threading.CancellationToken cancellationToken = default) { }\npublic override string[] ReadAllLines(string path) { }\npublic override string[] ReadAllLines(string path, System.Text.Encoding encoding) { }\npublic override System.Threading.Tasks.Task<string[]> ReadAllLinesAsync(string path, System.Threading.CancellationToken cancellationToken = default) { }\npublic override System.Threading.Tasks.Task<string[]> ReadAllLinesAsync(string path, System.Text.Encoding encoding, System.Threading.CancellationToken cancellationToken = default) { }\npublic override string ReadAllText(string path) { }\npublic override string ReadAllText(string path, System.Text.Encoding encoding) { }\npublic override System.Threading.Tasks.Task<string> ReadAllTextAsync(string path, System.Threading.CancellationToken cancellationToken = default) { }\npublic override System.Threading.Tasks.Task<string> ReadAllTextAsync(string path, System.Text.Encoding encoding, System.Threading.CancellationToken cancellationToken = default) { }\npublic override System.Collections.Generic.IEnumerable<string> ReadLines(string path) { }\npublic override System.Collections.Generic.IEnumerable<string> ReadLines(string path, System.Text.Encoding encoding) { }\npublic override void Replace(string sourceFileName, string destinationFileName, string destinationBackupFileName) { }\npublic override void Replace(string sourceFileName, string destinationFileName, string destinationBackupFileName, bool ignoreMetadataErrors) { }\npublic override void SetAttributes(string path, System.IO.FileAttributes fileAttributes) { }\npublic override void SetCreationTime(string path, System.DateTime creationTime) { }\npublic override void SetCreationTimeUtc(string path, System.DateTime creationTimeUtc) { }\npublic override void SetLastAccessTime(string path, System.DateTime lastAccessTime) { }\npublic override void SetLastAccessTimeUtc(string path, System.DateTime lastAccessTimeUtc) { }\npublic override void SetLastWriteTime(string path, System.DateTime lastWriteTime) { }\npublic override void SetLastWriteTimeUtc(string path, System.DateTime lastWriteTimeUtc) { }\npublic override void WriteAllBytes(string path, byte[] bytes) { }\npublic override System.Threading.Tasks.Task WriteAllBytesAsync(string path, byte[] bytes, System.Threading.CancellationToken cancellationToken = default) { }\npublic override void WriteAllLines(string path, System.Collections.Generic.IEnumerable<string> contents) { }\npublic override void WriteAllLines(string path, string[] contents) { }\npublic override void WriteAllLines(string path, System.Collections.Generic.IEnumerable<string> contents, System.Text.Encoding encoding) { }\npublic override void WriteAllLines(string path, string[] contents, System.Text.Encoding encoding) { }\npublic override System.Threading.Tasks.Task WriteAllLinesAsync(string path, System.Collections.Generic.IEnumerable<string> contents, System.Threading.CancellationToken cancellationToken = default) { }\npublic override System.Threading.Tasks.Task WriteAllLinesAsync(string path, System.Collections.Generic.IEnumerable<string> contents, System.Text.Encoding encoding, System.Threading.CancellationToken cancellationToken = default) { }\npublic override void WriteAllText(string path, string contents) { }\npublic override void WriteAllText(string path, string contents, System.Text.Encoding encoding) { }\npublic override System.Threading.Tasks.Task WriteAllTextAsync(string path, string contents, System.Threading.CancellationToken cancellationToken = default) { }\npublic override System.Threading.Tasks.Task WriteAllTextAsync(string path, string contents, System.Text.Encoding encoding, System.Threading.CancellationToken cancellationToken = default) { }\n    }\n```\n\n----------------------------------------\n\nTITLE: Defining DirectoryBase Abstract Class in C#\nDESCRIPTION: Abstract base class for directory operations, implementing IDirectory and IFileSystemEntity interfaces. Provides methods for creating, deleting, and enumerating directories and files.\nSOURCE: https://github.com/testableio/system.io.abstractions/blob/main/tests/TestableIO.System.IO.Abstractions.Api.Tests/Expected/TestableIO.System.IO.Abstractions.Wrappers_netstandard2.0.txt#2025-04-22_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\n[System.Serializable]\npublic abstract class DirectoryBase : System.IO.Abstractions.IDirectory, System.IO.Abstractions.IFileSystemEntity\n{\n    protected DirectoryBase(System.IO.Abstractions.IFileSystem fileSystem) { }\n    public System.IO.Abstractions.IFileSystem FileSystem { get; }\n    public abstract System.IO.Abstractions.IDirectoryInfo CreateDirectory(string path);\n    public abstract void Delete(string path);\n    public abstract void Delete(string path, bool recursive);\n    public abstract System.Collections.Generic.IEnumerable<string> EnumerateDirectories(string path);\n    public abstract System.Collections.Generic.IEnumerable<string> EnumerateDirectories(string path, string searchPattern);\n    public abstract System.Collections.Generic.IEnumerable<string> EnumerateDirectories(string path, string searchPattern, System.IO.SearchOption searchOption);\n    public abstract System.Collections.Generic.IEnumerable<string> EnumerateFileSystemEntries(string path);\n    public abstract System.Collections.Generic.IEnumerable<string> EnumerateFileSystemEntries(string path, string searchPattern);\n    public abstract System.Collections.Generic.IEnumerable<string> EnumerateFileSystemEntries(string path, string searchPattern, System.IO.SearchOption searchOption);\n    public abstract System.Collections.Generic.IEnumerable<string> EnumerateFiles(string path);\n    public abstract System.Collections.Generic.IEnumerable<string> EnumerateFiles(string path, string searchPattern);\n    public abstract System.Collections.Generic.IEnumerable<string> EnumerateFiles(string path, string searchPattern, System.IO.SearchOption searchOption);\n    public abstract bool Exists(string path);\n    public abstract System.DateTime GetCreationTime(string path);\n    public abstract System.DateTime GetCreationTimeUtc(string path);\n    public abstract string GetCurrentDirectory();\n    public abstract string[] GetDirectories(string path);\n    public abstract string[] GetDirectories(string path, string searchPattern);\n    public abstract string[] GetDirectories(string path, string searchPattern, System.IO.SearchOption searchOption);\n    public abstract string GetDirectoryRoot(string path);\n    public abstract string[] GetFileSystemEntries(string path);\n    public abstract string[] GetFileSystemEntries(string path, string searchPattern);\n    public abstract string[] GetFileSystemEntries(string path, string searchPattern, System.IO.SearchOption searchOption);\n    public abstract string[] GetFiles(string path);\n    public abstract string[] GetFiles(string path, string searchPattern);\n    public abstract string[] GetFiles(string path, string searchPattern, System.IO.SearchOption searchOption);\n    public abstract System.DateTime GetLastAccessTime(string path);\n    public abstract System.DateTime GetLastAccessTimeUtc(string path);\n    public abstract System.DateTime GetLastWriteTime(string path);\n    public abstract System.DateTime GetLastWriteTimeUtc(string path);\n    public abstract string[] GetLogicalDrives();\n    public abstract System.IO.Abstractions.IDirectoryInfo GetParent(string path);\n    public abstract void Move(string sourceDirName, string destDirName);\n    public abstract void SetCreationTime(string path, System.DateTime creationTime);\n    public abstract void SetCreationTimeUtc(string path, System.DateTime creationTimeUtc);\n    public abstract void SetCurrentDirectory(string path);\n    public abstract void SetLastAccessTime(string path, System.DateTime lastAccessTime);\n    public abstract void SetLastAccessTimeUtc(string path, System.DateTime lastAccessTimeUtc);\n    public abstract void SetLastWriteTime(string path, System.DateTime lastWriteTime);\n    public abstract void SetLastWriteTimeUtc(string path, System.DateTime lastWriteTimeUtc);\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Test Helpers Package in Shell\nDESCRIPTION: Guidance for incorporating the TestableIO.System.IO.Abstractions.TestingHelpers package using the dotnet CLI. This package provides mocking capabilities for file system operations, enabling simulated environments for testing.\nSOURCE: https://github.com/testableio/system.io.abstractions/blob/main/README.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ndotnet add package TestableIO.System.IO.Abstractions.TestingHelpers\n```\n\n----------------------------------------\n\nTITLE: Implementing File System Method Signatures in C#\nDESCRIPTION: This code snippet shows the method signatures for a file system abstraction class that inherits and overrides the base functionality of System.IO.File. These methods provide file operations like reading, writing, manipulating files, and managing file metadata, while allowing for testability through abstraction.\nSOURCE: https://github.com/testableio/system.io.abstractions/blob/main/tests/TestableIO.System.IO.Abstractions.Api.Tests/Expected/TestableIO.System.IO.Abstractions.Wrappers_net9.0.txt#2025-04-22_snippet_28\n\nLANGUAGE: C#\nCODE:\n```\npublic override System.Threading.Tasks.Task AppendAllTextAsync(string path, System.ReadOnlyMemory<char> contents, System.Text.Encoding encoding, System.Threading.CancellationToken cancellationToken = default) { }\npublic override System.Threading.Tasks.Task AppendAllTextAsync(string path, string contents, System.Text.Encoding encoding, System.Threading.CancellationToken cancellationToken = default) { }\npublic override System.IO.StreamWriter AppendText(string path) { }\npublic override void Copy(string sourceFileName, string destFileName) { }\npublic override void Copy(string sourceFileName, string destFileName, bool overwrite) { }\npublic override System.IO.Abstractions.FileSystemStream Create(string path) { }\npublic override System.IO.Abstractions.FileSystemStream Create(string path, int bufferSize) { }\npublic override System.IO.Abstractions.FileSystemStream Create(string path, int bufferSize, System.IO.FileOptions options) { }\npublic override System.IO.Abstractions.IFileSystemInfo CreateSymbolicLink(string path, string pathToTarget) { }\npublic override System.IO.StreamWriter CreateText(string path) { }\n[System.Runtime.Versioning.SupportedOSPlatform(\"windows\")]\npublic override void Decrypt(string path) { }\npublic override void Delete(string path) { }\n[System.Runtime.Versioning.SupportedOSPlatform(\"windows\")]\npublic override void Encrypt(string path) { }\npublic override bool Exists(string path) { }\npublic override System.IO.FileAttributes GetAttributes(Microsoft.Win32.SafeHandles.SafeFileHandle fileHandle) { }\npublic override System.IO.FileAttributes GetAttributes(string path) { }\npublic override System.DateTime GetCreationTime(Microsoft.Win32.SafeHandles.SafeFileHandle fileHandle) { }\npublic override System.DateTime GetCreationTime(string path) { }\npublic override System.DateTime GetCreationTimeUtc(Microsoft.Win32.SafeHandles.SafeFileHandle fileHandle) { }\npublic override System.DateTime GetCreationTimeUtc(string path) { }\npublic override System.DateTime GetLastAccessTime(Microsoft.Win32.SafeHandles.SafeFileHandle fileHandle) { }\npublic override System.DateTime GetLastAccessTime(string path) { }\npublic override System.DateTime GetLastAccessTimeUtc(Microsoft.Win32.SafeHandles.SafeFileHandle fileHandle) { }\npublic override System.DateTime GetLastAccessTimeUtc(string path) { }\npublic override System.DateTime GetLastWriteTime(Microsoft.Win32.SafeHandles.SafeFileHandle fileHandle) { }\npublic override System.DateTime GetLastWriteTime(string path) { }\npublic override System.DateTime GetLastWriteTimeUtc(Microsoft.Win32.SafeHandles.SafeFileHandle fileHandle) { }\npublic override System.DateTime GetLastWriteTimeUtc(string path) { }\n[System.Runtime.Versioning.UnsupportedOSPlatform(\"windows\")]\npublic override System.IO.UnixFileMode GetUnixFileMode(Microsoft.Win32.SafeHandles.SafeFileHandle fileHandle) { }\n[System.Runtime.Versioning.UnsupportedOSPlatform(\"windows\")]\npublic override System.IO.UnixFileMode GetUnixFileMode(string path) { }\npublic override void Move(string sourceFileName, string destFileName) { }\npublic override void Move(string sourceFileName, string destFileName, bool overwrite) { }\npublic override System.IO.Abstractions.FileSystemStream Open(string path, System.IO.FileMode mode) { }\npublic override System.IO.Abstractions.FileSystemStream Open(string path, System.IO.FileStreamOptions options) { }\npublic override System.IO.Abstractions.FileSystemStream Open(string path, System.IO.FileMode mode, System.IO.FileAccess access) { }\npublic override System.IO.Abstractions.FileSystemStream Open(string path, System.IO.FileMode mode, System.IO.FileAccess access, System.IO.FileShare share) { }\npublic override System.IO.Abstractions.FileSystemStream OpenRead(string path) { }\npublic override System.IO.StreamReader OpenText(string path) { }\npublic override System.IO.Abstractions.FileSystemStream OpenWrite(string path) { }\npublic override byte[] ReadAllBytes(string path) { }\npublic override System.Threading.Tasks.Task<byte[]> ReadAllBytesAsync(string path, System.Threading.CancellationToken cancellationToken = default) { }\npublic override string[] ReadAllLines(string path) { }\npublic override string[] ReadAllLines(string path, System.Text.Encoding encoding) { }\npublic override System.Threading.Tasks.Task<string[]> ReadAllLinesAsync(string path, System.Threading.CancellationToken cancellationToken = default) { }\npublic override System.Threading.Tasks.Task<string[]> ReadAllLinesAsync(string path, System.Text.Encoding encoding, System.Threading.CancellationToken cancellationToken = default) { }\npublic override string ReadAllText(string path) { }\npublic override string ReadAllText(string path, System.Text.Encoding encoding) { }\npublic override System.Threading.Tasks.Task<string> ReadAllTextAsync(string path, System.Threading.CancellationToken cancellationToken = default) { }\npublic override System.Threading.Tasks.Task<string> ReadAllTextAsync(string path, System.Text.Encoding encoding, System.Threading.CancellationToken cancellationToken = default) { }\npublic override System.Collections.Generic.IEnumerable<string> ReadLines(string path) { }\npublic override System.Collections.Generic.IEnumerable<string> ReadLines(string path, System.Text.Encoding encoding) { }\npublic override System.Collections.Generic.IAsyncEnumerable<string> ReadLinesAsync(string path, System.Threading.CancellationToken cancellationToken = default) { }\npublic override System.Collections.Generic.IAsyncEnumerable<string> ReadLinesAsync(string path, System.Text.Encoding encoding, System.Threading.CancellationToken cancellationToken = default) { }\npublic override void Replace(string sourceFileName, string destinationFileName, string destinationBackupFileName) { }\npublic override void Replace(string sourceFileName, string destinationFileName, string destinationBackupFileName, bool ignoreMetadataErrors) { }\npublic override System.IO.Abstractions.IFileSystemInfo ResolveLinkTarget(string linkPath, bool returnFinalTarget) { }\npublic override void SetAttributes(Microsoft.Win32.SafeHandles.SafeFileHandle fileHandle, System.IO.FileAttributes fileAttributes) { }\npublic override void SetAttributes(string path, System.IO.FileAttributes fileAttributes) { }\npublic override void SetCreationTime(Microsoft.Win32.SafeHandles.SafeFileHandle fileHandle, System.DateTime creationTime) { }\npublic override void SetCreationTime(string path, System.DateTime creationTime) { }\npublic override void SetCreationTimeUtc(Microsoft.Win32.SafeHandles.SafeFileHandle fileHandle, System.DateTime creationTimeUtc) { }\npublic override void SetCreationTimeUtc(string path, System.DateTime creationTimeUtc) { }\npublic override void SetLastAccessTime(Microsoft.Win32.SafeHandles.SafeFileHandle fileHandle, System.DateTime lastAccessTime) { }\npublic override void SetLastAccessTime(string path, System.DateTime lastAccessTime) { }\npublic override void SetLastAccessTimeUtc(Microsoft.Win32.SafeHandles.SafeFileHandle fileHandle, System.DateTime lastAccessTimeUtc) { }\npublic override void SetLastAccessTimeUtc(string path, System.DateTime lastAccessTimeUtc) { }\npublic override void SetLastWriteTime(Microsoft.Win32.SafeHandles.SafeFileHandle fileHandle, System.DateTime lastWriteTime) { }\npublic override void SetLastWriteTime(string path, System.DateTime lastWriteTime) { }\npublic override void SetLastWriteTimeUtc(Microsoft.Win32.SafeHandles.SafeFileHandle fileHandle, System.DateTime lastWriteTimeUtc) { }\npublic override void SetLastWriteTimeUtc(string path, System.DateTime lastWriteTimeUtc) { }\n[System.Runtime.Versioning.UnsupportedOSPlatform(\"windows\")]\npublic override void SetUnixFileMode(Microsoft.Win32.SafeHandles.SafeFileHandle fileHandle, System.IO.UnixFileMode mode) { }\n[System.Runtime.Versioning.UnsupportedOSPlatform(\"windows\")]\npublic override void SetUnixFileMode(string path, System.IO.UnixFileMode mode) { }\npublic override void WriteAllBytes(string path, System.ReadOnlySpan<byte> bytes) { }\npublic override void WriteAllBytes(string path, byte[] bytes) { }\npublic override System.Threading.Tasks.Task WriteAllBytesAsync(string path, System.ReadOnlyMemory<byte> bytes, System.Threading.CancellationToken cancellationToken = default) { }\npublic override System.Threading.Tasks.Task WriteAllBytesAsync(string path, byte[] bytes, System.Threading.CancellationToken cancellationToken = default) { }\npublic override void WriteAllLines(string path, System.Collections.Generic.IEnumerable<string> contents) { }\npublic override void WriteAllLines(string path, string[] contents) { }\npublic override void WriteAllLines(string path, System.Collections.Generic.IEnumerable<string> contents, System.Text.Encoding encoding) { }\npublic override void WriteAllLines(string path, string[] contents, System.Text.Encoding encoding) { }\npublic override System.Threading.Tasks.Task WriteAllLinesAsync(string path, System.Collections.Generic.IEnumerable<string> contents, System.Threading.CancellationToken cancellationToken = default) { }\npublic override System.Threading.Tasks.Task WriteAllLinesAsync(string path, System.Collections.Generic.IEnumerable<string> contents, System.Text.Encoding encoding, System.Threading.CancellationToken cancellationToken = default) { }\npublic override void WriteAllText(string path, System.ReadOnlySpan<char> contents) { }\n```\n\n----------------------------------------\n\nTITLE: Representing Mock File Information for System.IO.Abstractions - C#\nDESCRIPTION: This snippet declares the MockFileInfo class which extends FileInfoBase for simulating file info objects in tests. It brings together properties such as attributes, timestamps, directory references, file lengths, permissions, and supports both property overrides and core file actions like AppendText and CopyTo. Initialized with a mock file accessor and a path, it is designed to interact with the mock file system and support advanced file property emulation, including read-only and link scenarios.\nSOURCE: https://github.com/testableio/system.io.abstractions/blob/main/tests/TestableIO.System.IO.Abstractions.Api.Tests/Expected/TestableIO.System.IO.Abstractions.TestingHelpers_net8.0.txt#2025-04-22_snippet_13\n\nLANGUAGE: csharp\nCODE:\n```\n[System.Serializable]\npublic class MockFileInfo : System.IO.Abstractions.FileInfoBase, System.IO.Abstractions.IFileSystemAclSupport\n{\n    public MockFileInfo(System.IO.Abstractions.TestingHelpers.IMockFileDataAccessor mockFileSystem, string path) { }\n    public override System.IO.FileAttributes Attributes { get; set; }\n    public override System.DateTime CreationTime { get; set; }\n    public override System.DateTime CreationTimeUtc { get; set; }\n    public override System.IO.Abstractions.IDirectoryInfo Directory { get; }\n    public override string DirectoryName { get; }\n    public override bool Exists { get; }\n    public override string Extension { get; }\n    public override string FullName { get; }\n    public override bool IsReadOnly { get; set; }\n    public override System.DateTime LastAccessTime { get; set; }\n    public override System.DateTime LastAccessTimeUtc { get; set; }\n    public override System.DateTime LastWriteTime { get; set; }\n    public override System.DateTime LastWriteTimeUtc { get; set; }\n    public override long Length { get; }\n    public override string LinkTarget { get; }\n    public override string Name { get; }\n    public override System.IO.StreamWriter AppendText() { }\n    public override System.IO.Abstractions.IFileInfo CopyTo(string destFileName) { }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining FileSystemBase Abstract Class in C#\nDESCRIPTION: Abstract class FileSystemBase implements IFileSystem interface and defines abstract properties for various file system operations. It serves as a base for concrete file system implementations.\nSOURCE: https://github.com/testableio/system.io.abstractions/blob/main/tests/TestableIO.System.IO.Abstractions.Api.Tests/Expected/TestableIO.System.IO.Abstractions.Wrappers_net9.0.txt#2025-04-22_snippet_19\n\nLANGUAGE: C#\nCODE:\n```\n[System.Serializable]\npublic abstract class FileSystemBase : System.IO.Abstractions.IFileSystem\n{\n    protected FileSystemBase() { }\n    public abstract System.IO.Abstractions.IDirectory Directory { get; }\n    public abstract System.IO.Abstractions.IDirectoryInfoFactory DirectoryInfo { get; }\n    public abstract System.IO.Abstractions.IDriveInfoFactory DriveInfo { get; }\n    public abstract System.IO.Abstractions.IFile File { get; }\n    public abstract System.IO.Abstractions.IFileInfoFactory FileInfo { get; }\n    public abstract System.IO.Abstractions.IFileStreamFactory FileStream { get; }\n    public abstract System.IO.Abstractions.IFileSystemWatcherFactory FileSystemWatcher { get; }\n    public abstract System.IO.Abstractions.IFileVersionInfoFactory FileVersionInfo { get; }\n    public abstract System.IO.Abstractions.IPath Path { get; }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining IMockFileDataAccessor Interface with C#\nDESCRIPTION: The IMockFileDataAccessor interface extends the IFileSystem interface, facilitating file system operations in a mock environment. It provides properties for accessing directories, drives, and files, alongside methods for adding, adjusting, and removing file properties. Dependencies include the System.IO.Abstractions namespace.\nSOURCE: https://github.com/testableio/system.io.abstractions/blob/main/tests/TestableIO.System.IO.Abstractions.Api.Tests/Expected/TestableIO.System.IO.Abstractions.TestingHelpers_netstandard2.0.txt#2025-04-22_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\npublic interface IMockFileDataAccessor : System.IO.Abstractions.IFileSystem\n{\n    System.Collections.Generic.IEnumerable<string> AllDirectories { get; }\n    System.Collections.Generic.IEnumerable<string> AllDrives { get; }\n    System.Collections.Generic.IEnumerable<string> AllFiles { get; }\n    System.Collections.Generic.IEnumerable<string> AllPaths { get; }\n    System.IO.Abstractions.IFileSystem FileSystem { get; }\n    System.IO.Abstractions.TestingHelpers.PathVerifier PathVerifier { get; }\n    System.IO.Abstractions.TestingHelpers.StringOperations StringOperations { get; }\n    void AddDirectory(string path);\n    void AddDrive(string name, System.IO.Abstractions.TestingHelpers.MockDriveData mockDrive);\n    void AddFile(string path, System.IO.Abstractions.TestingHelpers.MockFileData mockFile, bool verifyAccess = true);\n    void AddFileFromEmbeddedResource(string path, System.Reflection.Assembly resourceAssembly, string embeddedResourcePath);\n    void AddFilesFromEmbeddedNamespace(string path, System.Reflection.Assembly resourceAssembly, string embeddedResourcePath);\n    System.IO.Abstractions.TestingHelpers.MockFileData AdjustTimes(System.IO.Abstractions.TestingHelpers.MockFileData fileData, System.IO.Abstractions.TestingHelpers.TimeAdjustments timeAdjustments);\n    bool FileExists(string path);\n    System.IO.Abstractions.TestingHelpers.MockDriveData GetDrive(string name);\n    System.IO.Abstractions.TestingHelpers.MockFileData GetFile(string path);\n    void MoveDirectory(string sourcePath, string destPath);\n    void RemoveFile(string path, bool verifyAccess = true);\n}\n```\n\n----------------------------------------\n\nTITLE: Defining IMockFileDataAccessor Interface\nDESCRIPTION: Interface that extends IFileSystem to provide mock file system operations and data access methods for testing. Includes methods for managing directories, files, and drives.\nSOURCE: https://github.com/testableio/system.io.abstractions/blob/main/tests/TestableIO.System.IO.Abstractions.Api.Tests/Expected/TestableIO.System.IO.Abstractions.TestingHelpers_netstandard2.1.txt#2025-04-22_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\npublic interface IMockFileDataAccessor : System.IO.Abstractions.IFileSystem\n{\n    System.Collections.Generic.IEnumerable<string> AllDirectories { get; }\n    System.Collections.Generic.IEnumerable<string> AllDrives { get; }\n    System.Collections.Generic.IEnumerable<string> AllFiles { get; }\n    System.Collections.Generic.IEnumerable<string> AllPaths { get; }\n    System.IO.Abstractions.IFileSystem FileSystem { get; }\n    System.IO.Abstractions.TestingHelpers.PathVerifier PathVerifier { get; }\n    System.IO.Abstractions.TestingHelpers.StringOperations StringOperations { get; }\n    void AddDirectory(string path);\n    void AddDrive(string name, System.IO.Abstractions.TestingHelpers.MockDriveData mockDrive);\n    void AddFile(string path, System.IO.Abstractions.TestingHelpers.MockFileData mockFile, bool verifyAccess = true);\n    void AddFileFromEmbeddedResource(string path, System.Reflection.Assembly resourceAssembly, string embeddedResourcePath);\n    void AddFilesFromEmbeddedNamespace(string path, System.Reflection.Assembly resourceAssembly, string embeddedResourcePath);\n    System.IO.Abstractions.TestingHelpers.MockFileData AdjustTimes(System.IO.Abstractions.TestingHelpers.MockFileData fileData, System.IO.Abstractions.TestingHelpers.TimeAdjustments timeAdjustments);\n    bool FileExists(string path);\n    System.IO.Abstractions.TestingHelpers.MockDriveData GetDrive(string name);\n    System.IO.Abstractions.TestingHelpers.MockFileData GetFile(string path);\n    void MoveDirectory(string sourcePath, string destPath);\n    void RemoveFile(string path, bool verifyAccess = true);\n}\n```\n\n----------------------------------------\n\nTITLE: Providing Abstract File Operations with System.IO.Abstractions in C#\nDESCRIPTION: This serializable abstract class defines a broad set of file-related operations, such as reading, writing, encryption, and attribute management, for the System.IO.Abstractions testing framework. It includes both synchronous and asynchronous methods, support for text and binary files, and multiple overloads for encoding and cancellation tokens. Implementers must supply the logic for each operation, and the interface ensures testability and flexibility in consuming applications.\nSOURCE: https://github.com/testableio/system.io.abstractions/blob/main/tests/TestableIO.System.IO.Abstractions.Api.Tests/Expected/TestableIO.System.IO.Abstractions.Wrappers_netstandard2.1.txt#2025-04-22_snippet_9\n\nLANGUAGE: csharp\nCODE:\n```\n[System.Serializable]\npublic abstract class FileBase : System.IO.Abstractions.IFile, System.IO.Abstractions.IFileSystemEntity\n{\n    protected FileBase(System.IO.Abstractions.IFileSystem fileSystem) { }\n    public System.IO.Abstractions.IFileSystem FileSystem { get; }\n    public abstract void AppendAllLines(string path, System.Collections.Generic.IEnumerable<string> contents);\n    public abstract void AppendAllLines(string path, System.Collections.Generic.IEnumerable<string> contents, System.Text.Encoding encoding);\n    public abstract System.Threading.Tasks.Task AppendAllLinesAsync(string path, System.Collections.Generic.IEnumerable<string> contents, System.Threading.CancellationToken cancellationToken = default);\n    public abstract System.Threading.Tasks.Task AppendAllLinesAsync(string path, System.Collections.Generic.IEnumerable<string> contents, System.Text.Encoding encoding, System.Threading.CancellationToken cancellationToken = default);\n    public abstract void AppendAllText(string path, string contents);\n    public abstract void AppendAllText(string path, string contents, System.Text.Encoding encoding);\n    public abstract System.Threading.Tasks.Task AppendAllTextAsync(string path, string contents, System.Threading.CancellationToken cancellationToken = default);\n    public abstract System.Threading.Tasks.Task AppendAllTextAsync(string path, string contents, System.Text.Encoding encoding, System.Threading.CancellationToken cancellationToken = default);\n    public abstract System.IO.StreamWriter AppendText(string path);\n    public abstract void Copy(string sourceFileName, string destFileName);\n    public abstract void Copy(string sourceFileName, string destFileName, bool overwrite);\n    public abstract System.IO.Abstractions.FileSystemStream Create(string path);\n    public abstract System.IO.Abstractions.FileSystemStream Create(string path, int bufferSize);\n    public abstract System.IO.Abstractions.FileSystemStream Create(string path, int bufferSize, System.IO.FileOptions options);\n    public abstract System.IO.StreamWriter CreateText(string path);\n    public abstract void Decrypt(string path);\n    public abstract void Delete(string path);\n    public abstract void Encrypt(string path);\n    public abstract bool Exists(string path);\n    public abstract System.IO.FileAttributes GetAttributes(string path);\n    public abstract System.DateTime GetCreationTime(string path);\n    public abstract System.DateTime GetCreationTimeUtc(string path);\n    public abstract System.DateTime GetLastAccessTime(string path);\n    public abstract System.DateTime GetLastAccessTimeUtc(string path);\n    public abstract System.DateTime GetLastWriteTime(string path);\n    public abstract System.DateTime GetLastWriteTimeUtc(string path);\n    public abstract void Move(string sourceFileName, string destFileName);\n    public abstract System.IO.Abstractions.FileSystemStream Open(string path, System.IO.FileMode mode);\n    public abstract System.IO.Abstractions.FileSystemStream Open(string path, System.IO.FileMode mode, System.IO.FileAccess access);\n    public abstract System.IO.Abstractions.FileSystemStream Open(string path, System.IO.FileMode mode, System.IO.FileAccess access, System.IO.FileShare share);\n    public abstract System.IO.Abstractions.FileSystemStream OpenRead(string path);\n    public abstract System.IO.StreamReader OpenText(string path);\n    public abstract System.IO.Abstractions.FileSystemStream OpenWrite(string path);\n    public abstract byte[] ReadAllBytes(string path);\n    public abstract System.Threading.Tasks.Task<byte[]> ReadAllBytesAsync(string path, System.Threading.CancellationToken cancellationToken = default);\n    public abstract string[] ReadAllLines(string path);\n    public abstract string[] ReadAllLines(string path, System.Text.Encoding encoding);\n    public abstract System.Threading.Tasks.Task<string[]> ReadAllLinesAsync(string path, System.Threading.CancellationToken cancellationToken = default);\n    public abstract System.Threading.Tasks.Task<string[]> ReadAllLinesAsync(string path, System.Text.Encoding encoding, System.Threading.CancellationToken cancellationToken = default);\n    public abstract string ReadAllText(string path);\n    public abstract string ReadAllText(string path, System.Text.Encoding encoding);\n    public abstract System.Threading.Tasks.Task<string> ReadAllTextAsync(string path, System.Threading.CancellationToken cancellationToken = default);\n    public abstract System.Threading.Tasks.Task<string> ReadAllTextAsync(string path, System.Text.Encoding encoding, System.Threading.CancellationToken cancellationToken = default);\n    public abstract System.Collections.Generic.IEnumerable<string> ReadLines(string path);\n    public abstract System.Collections.Generic.IEnumerable<string> ReadLines(string path, System.Text.Encoding encoding);\n    public abstract void Replace(string sourceFileName, string destinationFileName, string destinationBackupFileName);\n    public abstract void Replace(string sourceFileName, string destinationFileName, string destinationBackupFileName, bool ignoreMetadataErrors);\n    public abstract void SetAttributes(string path, System.IO.FileAttributes fileAttributes);\n    public abstract void SetCreationTime(string path, System.DateTime creationTime);\n    public abstract void SetCreationTimeUtc(string path, System.DateTime creationTimeUtc);\n    public abstract void SetLastAccessTime(string path, System.DateTime lastAccessTime);\n    public abstract void SetLastAccessTimeUtc(string path, System.DateTime lastAccessTimeUtc);\n    public abstract void SetLastWriteTime(string path, System.DateTime lastWriteTime);\n    public abstract void SetLastWriteTimeUtc(string path, System.DateTime lastWriteTimeUtc);\n    public abstract void WriteAllBytes(string path, byte[] bytes);\n    public abstract System.Threading.Tasks.Task WriteAllBytesAsync(string path, byte[] bytes, System.Threading.CancellationToken cancellationToken = default);\n}\n```\n\n----------------------------------------\n\nTITLE: Using FileInfo in System.IO.Abstractions\nDESCRIPTION: Illustrates casting a FileInfo object to FileInfoBase to use in testable scenarios. This pattern aids in testing by allowing replacement with mock implementations.\nSOURCE: https://github.com/testableio/system.io.abstractions/blob/main/README.md#2025-04-22_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nFileInfo SomeApiMethodThatReturnsFileInfo()\n{\n    return new FileInfo(\"a\");\n}\n\nvoid MyFancyMethod()\n{\n    var testableFileInfo = (FileInfoBase)SomeApiMethodThatReturnsFileInfo();\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: DirectoryBase Abstract Class Definition\nDESCRIPTION: Abstract base class implementing IDirectory and IFileSystemEntity interfaces. Provides the foundation for directory operations with methods for creating, deleting, enumerating, and manipulating directories in a filesystem.\nSOURCE: https://github.com/testableio/system.io.abstractions/blob/main/tests/TestableIO.System.IO.Abstractions.Api.Tests/Expected/TestableIO.System.IO.Abstractions.Wrappers_net472.txt#2025-04-22_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\n[System.Serializable]\npublic abstract class DirectoryBase : System.IO.Abstractions.IDirectory, System.IO.Abstractions.IFileSystemEntity\n{\n    protected DirectoryBase(System.IO.Abstractions.IFileSystem fileSystem) { }\n    public System.IO.Abstractions.IFileSystem FileSystem { get; }\n    public abstract System.IO.Abstractions.IDirectoryInfo CreateDirectory(string path);\n    public abstract void Delete(string path);\n    public abstract void Delete(string path, bool recursive);\n    public abstract System.Collections.Generic.IEnumerable<string> EnumerateDirectories(string path);\n    public abstract System.Collections.Generic.IEnumerable<string> EnumerateDirectories(string path, string searchPattern);\n    public abstract System.Collections.Generic.IEnumerable<string> EnumerateDirectories(string path, string searchPattern, System.IO.SearchOption searchOption);\n    public abstract System.Collections.Generic.IEnumerable<string> EnumerateFileSystemEntries(string path);\n    public abstract System.Collections.Generic.IEnumerable<string> EnumerateFileSystemEntries(string path, string searchPattern);\n    public abstract System.Collections.Generic.IEnumerable<string> EnumerateFileSystemEntries(string path, string searchPattern, System.IO.SearchOption searchOption);\n    public abstract System.Collections.Generic.IEnumerable<string> EnumerateFiles(string path);\n    public abstract System.Collections.Generic.IEnumerable<string> EnumerateFiles(string path, string searchPattern);\n    public abstract System.Collections.Generic.IEnumerable<string> EnumerateFiles(string path, string searchPattern, System.IO.SearchOption searchOption);\n    public abstract bool Exists(string path);\n    public abstract System.DateTime GetCreationTime(string path);\n    public abstract System.DateTime GetCreationTimeUtc(string path);\n    public abstract string GetCurrentDirectory();\n    public abstract string[] GetDirectories(string path);\n    public abstract string[] GetDirectories(string path, string searchPattern);\n    public abstract string[] GetDirectories(string path, string searchPattern, System.IO.SearchOption searchOption);\n    public abstract string GetDirectoryRoot(string path);\n    public abstract string[] GetFileSystemEntries(string path);\n    public abstract string[] GetFileSystemEntries(string path, string searchPattern);\n    public abstract string[] GetFileSystemEntries(string path, string searchPattern, System.IO.SearchOption searchOption);\n    public abstract string[] GetFiles(string path);\n    public abstract string[] GetFiles(string path, string searchPattern);\n    public abstract string[] GetFiles(string path, string searchPattern, System.IO.SearchOption searchOption);\n    public abstract System.DateTime GetLastAccessTime(string path);\n    public abstract System.DateTime GetLastAccessTimeUtc(string path);\n    public abstract System.DateTime GetLastWriteTime(string path);\n    public abstract System.DateTime GetLastWriteTimeUtc(string path);\n    public abstract string[] GetLogicalDrives();\n    public abstract System.IO.Abstractions.IDirectoryInfo GetParent(string path);\n    public abstract void Move(string sourceDirName, string destDirName);\n    public abstract void SetCreationTime(string path, System.DateTime creationTime);\n    public abstract void SetCreationTimeUtc(string path, System.DateTime creationTimeUtc);\n    public abstract void SetCurrentDirectory(string path);\n    public abstract void SetLastAccessTime(string path, System.DateTime lastAccessTime);\n    public abstract void SetLastAccessTimeUtc(string path, System.DateTime lastAccessTimeUtc);\n    public abstract void SetLastWriteTime(string path, System.DateTime lastWriteTime);\n    public abstract void SetLastWriteTimeUtc(string path, System.DateTime lastWriteTimeUtc);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing MockDirectory Class with C#\nDESCRIPTION: The MockDirectory class extends the DirectoryBase class, providing an implementation for directory-related operations in a mock file system. It allows directory creation, deletion, enumeration, and property retrieval. It requires a mock file data accessor and optionally a FileBase instance for initialization.\nSOURCE: https://github.com/testableio/system.io.abstractions/blob/main/tests/TestableIO.System.IO.Abstractions.Api.Tests/Expected/TestableIO.System.IO.Abstractions.TestingHelpers_netstandard2.0.txt#2025-04-22_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\n[System.Serializable]\npublic class MockDirectory : System.IO.Abstractions.DirectoryBase\n{\n    public MockDirectory(System.IO.Abstractions.TestingHelpers.IMockFileDataAccessor mockFileDataAccessor, string currentDirectory) { }\n    public MockDirectory(System.IO.Abstractions.TestingHelpers.IMockFileDataAccessor mockFileDataAccessor, System.IO.Abstractions.FileBase fileBase, string currentDirectory) { }\n    public override System.IO.Abstractions.IDirectoryInfo CreateDirectory(string path) { }\n    public override void Delete(string path) { }\n    public override void Delete(string path, bool recursive) { }\n    public override System.Collections.Generic.IEnumerable<string> EnumerateDirectories(string path) { }\n    public override System.Collections.Generic.IEnumerable<string> EnumerateDirectories(string path, string searchPattern) { }\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Providing Mock Directory Info Implementation with ACL Support in System.IO.Abstractions (C#)\nDESCRIPTION: Implements the MockDirectoryInfo class, inheriting from DirectoryInfoBase and IFileSystemAclSupport, simulating directory metadata and access control features for the mock file system. Properties and methods support directory creation, deletion, ACL handling, timestamps, enumeration, and symlink logic. Takes a mock file data accessor and directory path as inputs, reflecting directory state in-memory for unit testing. Compatible with .NET file system metadata conventions.\nSOURCE: https://github.com/testableio/system.io.abstractions/blob/main/tests/TestableIO.System.IO.Abstractions.Api.Tests/Expected/TestableIO.System.IO.Abstractions.TestingHelpers_net6.0.txt#2025-04-22_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\n[System.Serializable]\npublic class MockDirectoryInfo : System.IO.Abstractions.DirectoryInfoBase, System.IO.Abstractions.IFileSystemAclSupport\n{\n    public MockDirectoryInfo(System.IO.Abstractions.TestingHelpers.IMockFileDataAccessor mockFileDataAccessor, string directoryPath) { }\n    public override System.IO.FileAttributes Attributes { get; set; }\n    public override System.DateTime CreationTime { get; set; }\n    public override System.DateTime CreationTimeUtc { get; set; }\n    public override bool Exists { get; }\n    public override string Extension { get; }\n    public override string FullName { get; }\n    public override System.DateTime LastAccessTime { get; set; }\n    public override System.DateTime LastAccessTimeUtc { get; set; }\n    public override System.DateTime LastWriteTime { get; set; }\n    public override System.DateTime LastWriteTimeUtc { get; set; }\n    public override string LinkTarget { get; }\n    public override string Name { get; }\n    public override System.IO.Abstractions.IDirectoryInfo Parent { get; }\n    public override System.IO.Abstractions.IDirectoryInfo Root { get; }\n    public override void Create() { }\n    public override void CreateAsSymbolicLink(string pathToTarget) { }\n    public override System.IO.Abstractions.IDirectoryInfo CreateSubdirectory(string path) { }\n    public override void Delete() { }\n    public override void Delete(bool recursive) { }\n    public override System.Collections.Generic.IEnumerable<System.IO.Abstractions.IDirectoryInfo> EnumerateDirectories() { }\n    public override System.Collections.Generic.IEnumerable<System.IO.Abstractions.IDirectoryInfo> EnumerateDirectories(string searchPattern) { }\n    public override System.Collections.Generic.IEnumerable<System.IO.Abstractions.IDirectoryInfo> EnumerateDirectories(string searchPattern, System.IO.EnumerationOptions enumerationOptions) { }\n    public override System.Collections.Generic.IEnumerable<System.IO.Abstractions.IDirectoryInfo> EnumerateDirectories(string searchPattern, System.IO.SearchOption searchOption) { }\n    public override System.Collections.Generic.IEnumerable<System.IO.Abstractions.IFileSystemInfo> EnumerateFileSystemInfos() { }\n\n```\n\n----------------------------------------\n\nTITLE: Implementing FileWrapper Class in C#\nDESCRIPTION: A concrete implementation of FileBase that wraps System.IO.File functionality. This class provides methods for file operations such as reading/writing files, copying, moving, and managing file attributes and timestamps, making them testable by abstracting the file system.\nSOURCE: https://github.com/testableio/system.io.abstractions/blob/main/tests/TestableIO.System.IO.Abstractions.Api.Tests/Expected/TestableIO.System.IO.Abstractions.Wrappers_net6.0.txt#2025-04-22_snippet_26\n\nLANGUAGE: C#\nCODE:\n```\n[System.Serializable]\npublic class FileWrapper : System.IO.Abstractions.FileBase\n{\n    public FileWrapper(System.IO.Abstractions.IFileSystem fileSystem) { }\n    public override void AppendAllLines(string path, System.Collections.Generic.IEnumerable<string> contents) { }\n    public override void AppendAllLines(string path, System.Collections.Generic.IEnumerable<string> contents, System.Text.Encoding encoding) { }\n    public override System.Threading.Tasks.Task AppendAllLinesAsync(string path, System.Collections.Generic.IEnumerable<string> contents, System.Threading.CancellationToken cancellationToken = default) { }\n    public override System.Threading.Tasks.Task AppendAllLinesAsync(string path, System.Collections.Generic.IEnumerable<string> contents, System.Text.Encoding encoding, System.Threading.CancellationToken cancellationToken = default) { }\n    public override void AppendAllText(string path, string contents) { }\n    public override void AppendAllText(string path, string contents, System.Text.Encoding encoding) { }\n    public override System.Threading.Tasks.Task AppendAllTextAsync(string path, string contents, System.Threading.CancellationToken cancellationToken = default) { }\n    public override System.Threading.Tasks.Task AppendAllTextAsync(string path, string contents, System.Text.Encoding encoding, System.Threading.CancellationToken cancellationToken = default) { }\n    public override System.IO.StreamWriter AppendText(string path) { }\n    public override void Copy(string sourceFileName, string destFileName) { }\n    public override void Copy(string sourceFileName, string destFileName, bool overwrite) { }\n    public override System.IO.Abstractions.FileSystemStream Create(string path) { }\n    public override System.IO.Abstractions.FileSystemStream Create(string path, int bufferSize) { }\n    public override System.IO.Abstractions.FileSystemStream Create(string path, int bufferSize, System.IO.FileOptions options) { }\n    public override System.IO.Abstractions.IFileSystemInfo CreateSymbolicLink(string path, string pathToTarget) { }\n    public override System.IO.StreamWriter CreateText(string path) { }\n    [System.Runtime.Versioning.SupportedOSPlatform(\"windows\")]\n    public override void Decrypt(string path) { }\n    public override void Delete(string path) { }\n    [System.Runtime.Versioning.SupportedOSPlatform(\"windows\")]\n    public override void Encrypt(string path) { }\n    public override bool Exists(string path) { }\n    public override System.IO.FileAttributes GetAttributes(string path) { }\n    public override System.DateTime GetCreationTime(string path) { }\n    public override System.DateTime GetCreationTimeUtc(string path) { }\n    public override System.DateTime GetLastAccessTime(string path) { }\n    public override System.DateTime GetLastAccessTimeUtc(string path) { }\n    public override System.DateTime GetLastWriteTime(string path) { }\n    public override System.DateTime GetLastWriteTimeUtc(string path) { }\n    public override void Move(string sourceFileName, string destFileName) { }\n    public override void Move(string sourceFileName, string destFileName, bool overwrite) { }\n    public override System.IO.Abstractions.FileSystemStream Open(string path, System.IO.FileMode mode) { }\n    public override System.IO.Abstractions.FileSystemStream Open(string path, System.IO.FileStreamOptions options) { }\n    public override System.IO.Abstractions.FileSystemStream Open(string path, System.IO.FileMode mode, System.IO.FileAccess access) { }\n    public override System.IO.Abstractions.FileSystemStream Open(string path, System.IO.FileMode mode, System.IO.FileAccess access, System.IO.FileShare share) { }\n    public override System.IO.Abstractions.FileSystemStream OpenRead(string path) { }\n    public override System.IO.StreamReader OpenText(string path) { }\n    public override System.IO.Abstractions.FileSystemStream OpenWrite(string path) { }\n    public override byte[] ReadAllBytes(string path) { }\n    public override System.Threading.Tasks.Task<byte[]> ReadAllBytesAsync(string path, System.Threading.CancellationToken cancellationToken = default) { }\n    public override string[] ReadAllLines(string path) { }\n    public override string[] ReadAllLines(string path, System.Text.Encoding encoding) { }\n    public override System.Threading.Tasks.Task<string[]> ReadAllLinesAsync(string path, System.Threading.CancellationToken cancellationToken = default) { }\n    public override System.Threading.Tasks.Task<string[]> ReadAllLinesAsync(string path, System.Text.Encoding encoding, System.Threading.CancellationToken cancellationToken = default) { }\n    public override string ReadAllText(string path) { }\n    public override string ReadAllText(string path, System.Text.Encoding encoding) { }\n    public override System.Threading.Tasks.Task<string> ReadAllTextAsync(string path, System.Threading.CancellationToken cancellationToken = default) { }\n    public override System.Threading.Tasks.Task<string> ReadAllTextAsync(string path, System.Text.Encoding encoding, System.Threading.CancellationToken cancellationToken = default) { }\n    public override System.Collections.Generic.IEnumerable<string> ReadLines(string path) { }\n    public override System.Collections.Generic.IEnumerable<string> ReadLines(string path, System.Text.Encoding encoding) { }\n    public override void Replace(string sourceFileName, string destinationFileName, string destinationBackupFileName) { }\n    public override void Replace(string sourceFileName, string destinationFileName, string destinationBackupFileName, bool ignoreMetadataErrors) { }\n    public override System.IO.Abstractions.IFileSystemInfo ResolveLinkTarget(string linkPath, bool returnFinalTarget) { }\n    public override void SetAttributes(string path, System.IO.FileAttributes fileAttributes) { }\n    public override void SetCreationTime(string path, System.DateTime creationTime) { }\n    public override void SetCreationTimeUtc(string path, System.DateTime creationTimeUtc) { }\n    public override void SetLastAccessTime(string path, System.DateTime lastAccessTime) { }\n    public override void SetLastAccessTimeUtc(string path, System.DateTime lastAccessTimeUtc) { }\n    public override void SetLastWriteTime(string path, System.DateTime lastWriteTime) { }\n    public override void SetLastWriteTimeUtc(string path, System.DateTime lastWriteTimeUtc) { }\n    public override void WriteAllBytes(string path, byte[] bytes) { }\n    public override System.Threading.Tasks.Task WriteAllBytesAsync(string path, byte[] bytes, System.Threading.CancellationToken cancellationToken = default) { }\n    public override void WriteAllLines(string path, System.Collections.Generic.IEnumerable<string> contents) { }\n    public override void WriteAllLines(string path, string[] contents) { }\n    public override void WriteAllLines(string path, System.Collections.Generic.IEnumerable<string> contents, System.Text.Encoding encoding) { }\n    public override void WriteAllLines(string path, string[] contents, System.Text.Encoding encoding) { }\n    public override System.Threading.Tasks.Task WriteAllLinesAsync(string path, System.Collections.Generic.IEnumerable<string> contents, System.Threading.CancellationToken cancellationToken = default) { }\n```\n\n----------------------------------------\n\nTITLE: Defining Mock Drive Data Structure in C#\nDESCRIPTION: Defines a serializable class `MockDriveData` used to store the state and properties of a mock drive. It includes properties like available free space, total size, drive format, type, readiness status, and volume label. It provides constructors for default initialization and initialization from a template `MockDriveData` object.\nSOURCE: https://github.com/testableio/system.io.abstractions/blob/main/tests/TestableIO.System.IO.Abstractions.Api.Tests/Expected/TestableIO.System.IO.Abstractions.TestingHelpers_netstandard2.1.txt#2025-04-22_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\n    [System.Serializable]\n    public class MockDriveData\n    {\n        public MockDriveData() { }\n        public MockDriveData(System.IO.Abstractions.TestingHelpers.MockDriveData template) { }\n        public long AvailableFreeSpace { get; set; }\n        public string DriveFormat { get; set; }\n        public System.IO.DriveType DriveType { get; set; }\n        public bool IsReady { get; set; }\n        public long TotalFreeSpace { get; set; }\n        public long TotalSize { get; set; }\n        public string VolumeLabel { get; set; }\n    }\n\n```\n\n----------------------------------------\n\nTITLE: FileInfoBase Abstract Class Definition in C#\nDESCRIPTION: Abstract base class that implements the IFileInfo interface. It provides a foundation for file information implementations, including properties for accessing file metadata and methods for file operations.\nSOURCE: https://github.com/testableio/system.io.abstractions/blob/main/tests/TestableIO.System.IO.Abstractions.Api.Tests/Expected/TestableIO.System.IO.Abstractions.Wrappers_net9.0.txt#2025-04-22_snippet_14\n\nLANGUAGE: C#\nCODE:\n```\n[System.Serializable]\npublic abstract class FileInfoBase : System.IO.Abstractions.FileSystemInfoBase, System.IO.Abstractions.IFileInfo, System.IO.Abstractions.IFileSystemInfo\n{\n    protected FileInfoBase(System.IO.Abstractions.IFileSystem fileSystem) { }\n    public abstract System.IO.Abstractions.IDirectoryInfo Directory { get; }\n    public abstract string DirectoryName { get; }\n    public abstract bool IsReadOnly { get; set; }\n    public abstract long Length { get; }\n    public abstract System.IO.StreamWriter AppendText();\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing DirectoryInfoWrapper for System.IO.Abstractions (C#)\nDESCRIPTION: This snippet defines the `DirectoryInfoWrapper` class, which inherits from `DirectoryInfoBase` and implements `IFileSystemAclSupport`. It acts as a wrapper around the standard `System.IO.DirectoryInfo` class, providing an abstraction layer for testing. The class exposes properties like `Attributes`, `CreationTime`, `Exists`, `FullName`, `Parent`, `Root`, etc., and overrides methods for creating, deleting, enumerating, and retrieving directory contents, as well as ACL management methods specific to Windows.\nSOURCE: https://github.com/testableio/system.io.abstractions/blob/main/tests/TestableIO.System.IO.Abstractions.Api.Tests/Expected/TestableIO.System.IO.Abstractions.Wrappers_net9.0.txt#2025-04-22_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\n    [System.Serializable]\n    public class DirectoryInfoWrapper : System.IO.Abstractions.DirectoryInfoBase, System.IO.Abstractions.IFileSystemAclSupport\n    {\n        public DirectoryInfoWrapper(System.IO.Abstractions.IFileSystem fileSystem, System.IO.DirectoryInfo instance) { }\n        public override System.IO.FileAttributes Attributes { get; set; }\n        public override System.DateTime CreationTime { get; set; }\n        public override System.DateTime CreationTimeUtc { get; set; }\n        public override bool Exists { get; }\n        public override string Extension { get; }\n        public override string FullName { get; }\n        public override System.DateTime LastAccessTime { get; set; }\n        public override System.DateTime LastAccessTimeUtc { get; set; }\n        public override System.DateTime LastWriteTime { get; set; }\n        public override System.DateTime LastWriteTimeUtc { get; set; }\n        public override string LinkTarget { get; }\n        public override string Name { get; }\n        public override System.IO.Abstractions.IDirectoryInfo Parent { get; }\n        public override System.IO.Abstractions.IDirectoryInfo Root { get; }\n        public override void Create() { }\n        public override void CreateAsSymbolicLink(string pathToTarget) { }\n        public override System.IO.Abstractions.IDirectoryInfo CreateSubdirectory(string path) { }\n        public override void Delete() { }\n        public override void Delete(bool recursive) { }\n        public override System.Collections.Generic.IEnumerable<System.IO.Abstractions.IDirectoryInfo> EnumerateDirectories() { }\n        public override System.Collections.Generic.IEnumerable<System.IO.Abstractions.IDirectoryInfo> EnumerateDirectories(string searchPattern) { }\n        public override System.Collections.Generic.IEnumerable<System.IO.Abstractions.IDirectoryInfo> EnumerateDirectories(string searchPattern, System.IO.EnumerationOptions enumerationOptions) { }\n        public override System.Collections.Generic.IEnumerable<System.IO.Abstractions.IDirectoryInfo> EnumerateDirectories(string searchPattern, System.IO.SearchOption searchOption) { }\n        public override System.Collections.Generic.IEnumerable<System.IO.Abstractions.IFileSystemInfo> EnumerateFileSystemInfos() { }\n        public override System.Collections.Generic.IEnumerable<System.IO.Abstractions.IFileSystemInfo> EnumerateFileSystemInfos(string searchPattern) { }\n        public override System.Collections.Generic.IEnumerable<System.IO.Abstractions.IFileSystemInfo> EnumerateFileSystemInfos(string searchPattern, System.IO.EnumerationOptions enumerationOptions) { }\n        public override System.Collections.Generic.IEnumerable<System.IO.Abstractions.IFileSystemInfo> EnumerateFileSystemInfos(string searchPattern, System.IO.SearchOption searchOption) { }\n        public override System.Collections.Generic.IEnumerable<System.IO.Abstractions.IFileInfo> EnumerateFiles() { }\n        public override System.Collections.Generic.IEnumerable<System.IO.Abstractions.IFileInfo> EnumerateFiles(string searchPattern) { }\n        public override System.Collections.Generic.IEnumerable<System.IO.Abstractions.IFileInfo> EnumerateFiles(string searchPattern, System.IO.EnumerationOptions enumerationOptions) { }\n        public override System.Collections.Generic.IEnumerable<System.IO.Abstractions.IFileInfo> EnumerateFiles(string searchPattern, System.IO.SearchOption searchOption) { }\n        [System.Runtime.Versioning.SupportedOSPlatform(\"windows\")]\n        public object GetAccessControl() { }\n        [System.Runtime.Versioning.SupportedOSPlatform(\"windows\")]\n        public object GetAccessControl(System.IO.Abstractions.IFileSystemAclSupport.AccessControlSections includeSections) { }\n        public override System.IO.Abstractions.IDirectoryInfo[] GetDirectories() { }\n        public override System.IO.Abstractions.IDirectoryInfo[] GetDirectories(string searchPattern) { }\n        public override System.IO.Abstractions.IDirectoryInfo[] GetDirectories(string searchPattern, System.IO.EnumerationOptions enumerationOptions) { }\n        public override System.IO.Abstractions.IDirectoryInfo[] GetDirectories(string searchPattern, System.IO.SearchOption searchOption) { }\n        public override System.IO.Abstractions.IFileSystemInfo[] GetFileSystemInfos() { }\n        public override System.IO.Abstractions.IFileSystemInfo[] GetFileSystemInfos(string searchPattern) { }\n        public override System.IO.Abstractions.IFileSystemInfo[] GetFileSystemInfos(string searchPattern, System.IO.EnumerationOptions enumerationOptions) { }\n        public override System.IO.Abstractions.IFileSystemInfo[] GetFileSystemInfos(string searchPattern, System.IO.SearchOption searchOption) { }\n        public override System.IO.Abstractions.IFileInfo[] GetFiles() { }\n        public override System.IO.Abstractions.IFileInfo[] GetFiles(string searchPattern) { }\n        public override System.IO.Abstractions.IFileInfo[] GetFiles(string searchPattern, System.IO.EnumerationOptions enumerationOptions) { }\n        public override System.IO.Abstractions.IFileInfo[] GetFiles(string searchPattern, System.IO.SearchOption searchOption) { }\n        public override void MoveTo(string destDirName) { }\n        public override void Refresh() { }\n        public override System.IO.Abstractions.IFileSystemInfo ResolveLinkTarget(bool returnFinalTarget) { }\n        [System.Runtime.Versioning.SupportedOSPlatform(\"windows\")]\n        public void SetAccessControl(object value) { }\n        public override string ToString() { }\n    }\n```\n\n----------------------------------------\n\nTITLE: DirectoryInfoWrapper Class Implementation\nDESCRIPTION: Concrete implementation of DirectoryInfoBase that wraps the System.IO.DirectoryInfo class. Implements IFileSystemAclSupport to provide access control functionality for directory operations.\nSOURCE: https://github.com/testableio/system.io.abstractions/blob/main/tests/TestableIO.System.IO.Abstractions.Api.Tests/Expected/TestableIO.System.IO.Abstractions.Wrappers_net472.txt#2025-04-22_snippet_5\n\nLANGUAGE: C#\nCODE:\n```\n[System.Serializable]\npublic class DirectoryInfoWrapper : System.IO.Abstractions.DirectoryInfoBase, System.IO.Abstractions.IFileSystemAclSupport\n{\n    public DirectoryInfoWrapper(System.IO.Abstractions.IFileSystem fileSystem, System.IO.DirectoryInfo instance) { }\n    public override System.IO.FileAttributes Attributes { get; set; }\n    public override System.DateTime CreationTime { get; set; }\n    public override System.DateTime CreationTimeUtc { get; set; }\n    public override bool Exists { get; }\n    public override string Extension { get; }\n```\n\n----------------------------------------\n\nTITLE: Defining DirectoryInfoBase Abstract Class in C#\nDESCRIPTION: Abstract base class for directory information, implementing IDirectoryInfo and IFileSystemInfo interfaces. Provides methods for creating, deleting, and enumerating subdirectories and files.\nSOURCE: https://github.com/testableio/system.io.abstractions/blob/main/tests/TestableIO.System.IO.Abstractions.Api.Tests/Expected/TestableIO.System.IO.Abstractions.Wrappers_netstandard2.0.txt#2025-04-22_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\n[System.Serializable]\npublic abstract class DirectoryInfoBase : System.IO.Abstractions.FileSystemInfoBase, System.IO.Abstractions.IDirectoryInfo, System.IO.Abstractions.IFileSystemInfo\n{\n    protected DirectoryInfoBase(System.IO.Abstractions.IFileSystem fileSystem) { }\n    public abstract System.IO.Abstractions.IDirectoryInfo Parent { get; }\n    public abstract System.IO.Abstractions.IDirectoryInfo Root { get; }\n    public abstract void Create();\n    public abstract System.IO.Abstractions.IDirectoryInfo CreateSubdirectory(string path);\n    public abstract void Delete(bool recursive);\n    public abstract System.Collections.Generic.IEnumerable<System.IO.Abstractions.IDirectoryInfo> EnumerateDirectories();\n    public abstract System.Collections.Generic.IEnumerable<System.IO.Abstractions.IDirectoryInfo> EnumerateDirectories(string searchPattern);\n    public abstract System.Collections.Generic.IEnumerable<System.IO.Abstractions.IDirectoryInfo> EnumerateDirectories(string searchPattern, System.IO.SearchOption searchOption);\n    public abstract System.Collections.Generic.IEnumerable<System.IO.Abstractions.IFileSystemInfo> EnumerateFileSystemInfos();\n    public abstract System.Collections.Generic.IEnumerable<System.IO.Abstractions.IFileSystemInfo> EnumerateFileSystemInfos(string searchPattern);\n    public abstract System.Collections.Generic.IEnumerable<System.IO.Abstractions.IFileSystemInfo> EnumerateFileSystemInfos(string searchPattern, System.IO.SearchOption searchOption);\n    public abstract System.Collections.Generic.IEnumerable<System.IO.Abstractions.IFileInfo> EnumerateFiles();\n    public abstract System.Collections.Generic.IEnumerable<System.IO.Abstractions.IFileInfo> EnumerateFiles(string searchPattern);\n    public abstract System.Collections.Generic.IEnumerable<System.IO.Abstractions.IFileInfo> EnumerateFiles(string searchPattern, System.IO.SearchOption searchOption);\n    public abstract System.IO.Abstractions.IDirectoryInfo[] GetDirectories();\n    public abstract System.IO.Abstractions.IDirectoryInfo[] GetDirectories(string searchPattern);\n    public abstract System.IO.Abstractions.IDirectoryInfo[] GetDirectories(string searchPattern, System.IO.SearchOption searchOption);\n    public abstract System.IO.Abstractions.IFileSystemInfo[] GetFileSystemInfos();\n    public abstract System.IO.Abstractions.IFileSystemInfo[] GetFileSystemInfos(string searchPattern);\n    public abstract System.IO.Abstractions.IFileSystemInfo[] GetFileSystemInfos(string searchPattern, System.IO.SearchOption searchOption);\n    public abstract System.IO.Abstractions.IFileInfo[] GetFiles();\n    public abstract System.IO.Abstractions.IFileInfo[] GetFiles(string searchPattern);\n    public abstract System.IO.Abstractions.IFileInfo[] GetFiles(string searchPattern, System.IO.SearchOption searchOption);\n    public abstract void MoveTo(string destDirName);\n    public static System.IO.Abstractions.DirectoryInfoBase op_Implicit(System.IO.DirectoryInfo directoryInfo) { }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Mock Directory Class in System.IO.Abstractions (C#)\nDESCRIPTION: Implements the MockDirectory class inherited from DirectoryBase, providing mocked versions of standard directory operations for a virtual file system. Relies on IMockFileDataAccessor for state and supports directory creation, deletion, enumeration, symlink management, and file time manipulation. Key parameters include directory paths, search patterns, and enumeration options. Used mainly for unit testing code dependent on file system directories, with input/output mirroring .NET Directory functionality but affecting only in-memory structures.\nSOURCE: https://github.com/testableio/system.io.abstractions/blob/main/tests/TestableIO.System.IO.Abstractions.Api.Tests/Expected/TestableIO.System.IO.Abstractions.TestingHelpers_net6.0.txt#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n[System.Serializable]\npublic class MockDirectory : System.IO.Abstractions.DirectoryBase\n{\n    public MockDirectory(System.IO.Abstractions.TestingHelpers.IMockFileDataAccessor mockFileDataAccessor, string currentDirectory) { }\n    public MockDirectory(System.IO.Abstractions.TestingHelpers.IMockFileDataAccessor mockFileDataAccessor, System.IO.Abstractions.FileBase fileBase, string currentDirectory) { }\n    public override System.IO.Abstractions.IDirectoryInfo CreateDirectory(string path) { }\n    public override System.IO.Abstractions.IFileSystemInfo CreateSymbolicLink(string path, string pathToTarget) { }\n    public override void Delete(string path) { }\n    public override void Delete(string path, bool recursive) { }\n    public override System.Collections.Generic.IEnumerable<string> EnumerateDirectories(string path) { }\n    public override System.Collections.Generic.IEnumerable<string> EnumerateDirectories(string path, string searchPattern) { }\n    public override System.Collections.Generic.IEnumerable<string> EnumerateDirectories(string path, string searchPattern, System.IO.EnumerationOptions enumerationOptions) { }\n    public override System.Collections.Generic.IEnumerable<string> EnumerateDirectories(string path, string searchPattern, System.IO.SearchOption searchOption) { }\n    public override System.Collections.Generic.IEnumerable<string> EnumerateFileSystemEntries(string path) { }\n    public override System.Collections.Generic.IEnumerable<string> EnumerateFileSystemEntries(string path, string searchPattern) { }\n    public override System.Collections.Generic.IEnumerable<string> EnumerateFileSystemEntries(string path, string searchPattern, System.IO.EnumerationOptions enumerationOptions) { }\n    public override System.Collections.Generic.IEnumerable<string> EnumerateFileSystemEntries(string path, string searchPattern, System.IO.SearchOption searchOption) { }\n    public override System.Collections.Generic.IEnumerable<string> EnumerateFiles(string path) { }\n    public override System.Collections.Generic.IEnumerable<string> EnumerateFiles(string path, string searchPattern) { }\n    public override System.Collections.Generic.IEnumerable<string> EnumerateFiles(string path, string searchPattern, System.IO.EnumerationOptions enumerationOptions) { }\n    public override System.Collections.Generic.IEnumerable<string> EnumerateFiles(string path, string searchPattern, System.IO.SearchOption searchOption) { }\n    public override bool Exists(string path) { }\n    public override System.DateTime GetCreationTime(string path) { }\n    public override System.DateTime GetCreationTimeUtc(string path) { }\n    public override string GetCurrentDirectory() { }\n    public override string[] GetDirectories(string path) { }\n    public override string[] GetDirectories(string path, string searchPattern) { }\n    public override string[] GetDirectories(string path, string searchPattern, System.IO.EnumerationOptions enumerationOptions) { }\n    public override string[] GetDirectories(string path, string searchPattern, System.IO.SearchOption searchOption) { }\n    public override string GetDirectoryRoot(string path) { }\n    public override string[] GetFileSystemEntries(string path) { }\n    public override string[] GetFileSystemEntries(string path, string searchPattern) { }\n    public override string[] GetFileSystemEntries(string path, string searchPattern, System.IO.EnumerationOptions enumerationOptions) { }\n    public override string[] GetFileSystemEntries(string path, string searchPattern, System.IO.SearchOption searchOption) { }\n    public override string[] GetFiles(string path) { }\n    public override string[] GetFiles(string path, string searchPattern) { }\n    public override string[] GetFiles(string path, string searchPattern, System.IO.EnumerationOptions enumerationOptions) { }\n    public override string[] GetFiles(string path, string searchPattern, System.IO.SearchOption searchOption) { }\n    public override System.DateTime GetLastAccessTime(string path) { }\n    public override System.DateTime GetLastAccessTimeUtc(string path) { }\n    public override System.DateTime GetLastWriteTime(string path) { }\n    public override System.DateTime GetLastWriteTimeUtc(string path) { }\n    public override string[] GetLogicalDrives() { }\n    public override System.IO.Abstractions.IDirectoryInfo GetParent(string path) { }\n    public override void Move(string sourceDirName, string destDirName) { }\n    public override System.IO.Abstractions.IFileSystemInfo ResolveLinkTarget(string linkPath, bool returnFinalTarget) { }\n    public override void SetCreationTime(string path, System.DateTime creationTime) { }\n    public override void SetCreationTimeUtc(string path, System.DateTime creationTimeUtc) { }\n    public override void SetCurrentDirectory(string path) { }\n    public override void SetLastAccessTime(string path, System.DateTime lastAccessTime) { }\n    public override void SetLastAccessTimeUtc(string path, System.DateTime lastAccessTimeUtc) { }\n    public override void SetLastWriteTime(string path, System.DateTime lastWriteTime) { }\n    public override void SetLastWriteTimeUtc(string path, System.DateTime lastWriteTimeUtc) { }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining the MockDirectory Class in C#\nDESCRIPTION: This class provides a mock implementation of `System.IO.Abstractions.DirectoryBase`, simulating the behavior of the static `System.IO.Directory` class for testing. It relies on an `IMockFileDataAccessor` instance to interact with the mock file system state. The class defines overrides for various directory operations like creating, deleting, enumerating, moving directories and files, checking existence, getting/setting timestamps, and managing the current directory.\nSOURCE: https://github.com/testableio/system.io.abstractions/blob/main/tests/TestableIO.System.IO.Abstractions.Api.Tests/Expected/TestableIO.System.IO.Abstractions.TestingHelpers_net9.0.txt#2025-04-22_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n[System.Serializable]\npublic class MockDirectory : System.IO.Abstractions.DirectoryBase\n{\n    public MockDirectory(System.IO.Abstractions.TestingHelpers.IMockFileDataAccessor mockFileDataAccessor, string currentDirectory) { }\n    public MockDirectory(System.IO.Abstractions.TestingHelpers.IMockFileDataAccessor mockFileDataAccessor, System.IO.Abstractions.FileBase fileBase, string currentDirectory) { }\n    public override System.IO.Abstractions.IDirectoryInfo CreateDirectory(string path) { }\n    public override System.IO.Abstractions.IDirectoryInfo CreateDirectory(string path, System.IO.UnixFileMode unixCreateMode) { }\n    public override System.IO.Abstractions.IFileSystemInfo CreateSymbolicLink(string path, string pathToTarget) { }\n    public override System.IO.Abstractions.IDirectoryInfo CreateTempSubdirectory(string prefix = null) { }\n    public override void Delete(string path) { }\n    public override void Delete(string path, bool recursive) { }\n    public override System.Collections.Generic.IEnumerable<string> EnumerateDirectories(string path) { }\n    public override System.Collections.Generic.IEnumerable<string> EnumerateDirectories(string path, string searchPattern) { }\n    public override System.Collections.Generic.IEnumerable<string> EnumerateDirectories(string path, string searchPattern, System.IO.EnumerationOptions enumerationOptions) { }\n    public override System.Collections.Generic.IEnumerable<string> EnumerateDirectories(string path, string searchPattern, System.IO.SearchOption searchOption) { }\n    public override System.Collections.Generic.IEnumerable<string> EnumerateFileSystemEntries(string path) { }\n    public override System.Collections.Generic.IEnumerable<string> EnumerateFileSystemEntries(string path, string searchPattern) { }\n    public override System.Collections.Generic.IEnumerable<string> EnumerateFileSystemEntries(string path, string searchPattern, System.IO.EnumerationOptions enumerationOptions) { }\n    public override System.Collections.Generic.IEnumerable<string> EnumerateFileSystemEntries(string path, string searchPattern, System.IO.SearchOption searchOption) { }\n    public override System.Collections.Generic.IEnumerable<string> EnumerateFiles(string path) { }\n    public override System.Collections.Generic.IEnumerable<string> EnumerateFiles(string path, string searchPattern) { }\n    public override System.Collections.Generic.IEnumerable<string> EnumerateFiles(string path, string searchPattern, System.IO.EnumerationOptions enumerationOptions) { }\n    public override System.Collections.Generic.IEnumerable<string> EnumerateFiles(string path, string searchPattern, System.IO.SearchOption searchOption) { }\n    public override bool Exists(string path) { }\n    public override System.DateTime GetCreationTime(string path) { }\n    public override System.DateTime GetCreationTimeUtc(string path) { }\n    public override string GetCurrentDirectory() { }\n    public override string[] GetDirectories(string path) { }\n    public override string[] GetDirectories(string path, string searchPattern) { }\n    public override string[] GetDirectories(string path, string searchPattern, System.IO.EnumerationOptions enumerationOptions) { }\n    public override string[] GetDirectories(string path, string searchPattern, System.IO.SearchOption searchOption) { }\n    public override string GetDirectoryRoot(string path) { }\n    public override string[] GetFileSystemEntries(string path) { }\n    public override string[] GetFileSystemEntries(string path, string searchPattern) { }\n    public override string[] GetFileSystemEntries(string path, string searchPattern, System.IO.EnumerationOptions enumerationOptions) { }\n    public override string[] GetFileSystemEntries(string path, string searchPattern, System.IO.SearchOption searchOption) { }\n    public override string[] GetFiles(string path) { }\n    public override string[] GetFiles(string path, string searchPattern) { }\n    public override string[] GetFiles(string path, string searchPattern, System.IO.EnumerationOptions enumerationOptions) { }\n    public override string[] GetFiles(string path, string searchPattern, System.IO.SearchOption searchOption) { }\n    public override System.DateTime GetLastAccessTime(string path) { }\n    public override System.DateTime GetLastAccessTimeUtc(string path) { }\n    public override System.DateTime GetLastWriteTime(string path) { }\n    public override System.DateTime GetLastWriteTimeUtc(string path) { }\n    public override string[] GetLogicalDrives() { }\n    public override System.IO.Abstractions.IDirectoryInfo GetParent(string path) { }\n    public override void Move(string sourceDirName, string destDirName) { }\n    public override System.IO.Abstractions.IFileSystemInfo ResolveLinkTarget(string linkPath, bool returnFinalTarget) { }\n    public override void SetCreationTime(string path, System.DateTime creationTime) { }\n    public override void SetCreationTimeUtc(string path, System.DateTime creationTimeUtc) { }\n    public override void SetCurrentDirectory(string path) { }\n    public override void SetLastAccessTime(string path, System.DateTime lastAccessTime) { }\n    public override void SetLastAccessTimeUtc(string path, System.DateTime lastAccessTimeUtc) { }\n    public override void SetLastWriteTime(string path, System.DateTime lastWriteTime) { }\n    public override void SetLastWriteTimeUtc(string path, System.DateTime lastWriteTimeUtc) { }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing FileWrapper in C#\nDESCRIPTION: A serializable wrapper class for file operations that implements System.IO.Abstractions.FileBase. It provides methods for reading, writing, and manipulating files.\nSOURCE: https://github.com/testableio/system.io.abstractions/blob/main/tests/TestableIO.System.IO.Abstractions.Api.Tests/Expected/TestableIO.System.IO.Abstractions.Wrappers_netstandard2.0.txt#2025-04-22_snippet_23\n\nLANGUAGE: C#\nCODE:\n```\n[System.Serializable]\npublic class FileWrapper : System.IO.Abstractions.FileBase\n{\n    public FileWrapper(System.IO.Abstractions.IFileSystem fileSystem) { }\n    public override void AppendAllLines(string path, System.Collections.Generic.IEnumerable<string> contents) { }\n    public override void AppendAllLines(string path, System.Collections.Generic.IEnumerable<string> contents, System.Text.Encoding encoding) { }\n    public override void AppendAllText(string path, string contents) { }\n    public override void AppendAllText(string path, string contents, System.Text.Encoding encoding) { }\n    public override System.IO.StreamWriter AppendText(string path) { }\n    public override void Copy(string sourceFileName, string destFileName) { }\n    public override void Copy(string sourceFileName, string destFileName, bool overwrite) { }\n    public override System.IO.Abstractions.FileSystemStream Create(string path) { }\n    public override System.IO.Abstractions.FileSystemStream Create(string path, int bufferSize) { }\n    public override System.IO.Abstractions.FileSystemStream Create(string path, int bufferSize, System.IO.FileOptions options) { }\n    public override System.IO.StreamWriter CreateText(string path) { }\n    public override void Decrypt(string path) { }\n    public override void Delete(string path) { }\n    public override void Encrypt(string path) { }\n    public override bool Exists(string path) { }\n    public override System.IO.FileAttributes GetAttributes(string path) { }\n    public override System.DateTime GetCreationTime(string path) { }\n    public override System.DateTime GetCreationTimeUtc(string path) { }\n    public override System.DateTime GetLastAccessTime(string path) { }\n    public override System.DateTime GetLastAccessTimeUtc(string path) { }\n    public override System.DateTime GetLastWriteTime(string path) { }\n    public override System.DateTime GetLastWriteTimeUtc(string path) { }\n    public override void Move(string sourceFileName, string destFileName) { }\n    public override System.IO.Abstractions.FileSystemStream Open(string path, System.IO.FileMode mode) { }\n    public override System.IO.Abstractions.FileSystemStream Open(string path, System.IO.FileMode mode, System.IO.FileAccess access) { }\n    public override System.IO.Abstractions.FileSystemStream Open(string path, System.IO.FileMode mode, System.IO.FileAccess access, System.IO.FileShare share) { }\n    public override System.IO.Abstractions.FileSystemStream OpenRead(string path) { }\n    public override System.IO.StreamReader OpenText(string path) { }\n    public override System.IO.Abstractions.FileSystemStream OpenWrite(string path) { }\n    public override byte[] ReadAllBytes(string path) { }\n    public override string[] ReadAllLines(string path) { }\n    public override string[] ReadAllLines(string path, System.Text.Encoding encoding) { }\n    public override string ReadAllText(string path) { }\n    public override string ReadAllText(string path, System.Text.Encoding encoding) { }\n    public override System.Collections.Generic.IEnumerable<string> ReadLines(string path) { }\n    public override System.Collections.Generic.IEnumerable<string> ReadLines(string path, System.Text.Encoding encoding) { }\n    public override void Replace(string sourceFileName, string destinationFileName, string destinationBackupFileName) { }\n    public override void Replace(string sourceFileName, string destinationFileName, string destinationBackupFileName, bool ignoreMetadataErrors) { }\n    public override void SetAttributes(string path, System.IO.FileAttributes fileAttributes) { }\n    public override void SetCreationTime(string path, System.DateTime creationTime) { }\n    public override void SetCreationTimeUtc(string path, System.DateTime creationTimeUtc) { }\n    public override void SetLastAccessTime(string path, System.DateTime lastAccessTime) { }\n    public override void SetLastAccessTimeUtc(string path, System.DateTime lastAccessTimeUtc) { }\n    public override void SetLastWriteTime(string path, System.DateTime lastWriteTime) { }\n    public override void SetLastWriteTimeUtc(string path, System.DateTime lastWriteTimeUtc) { }\n    public override void WriteAllBytes(string path, byte[] bytes) { }\n    public override void WriteAllLines(string path, System.Collections.Generic.IEnumerable<string> contents) { }\n    public override void WriteAllLines(string path, string[] contents) { }\n    public override void WriteAllLines(string path, System.Collections.Generic.IEnumerable<string> contents, System.Text.Encoding encoding) { }\n    public override void WriteAllLines(string path, string[] contents, System.Text.Encoding encoding) { }\n    public override void WriteAllText(string path, string contents) { }\n    public override void WriteAllText(string path, string contents, System.Text.Encoding encoding) { }\n}\n```\n\n----------------------------------------\n\nTITLE: Wrapping System.IO.FileInfo with FileInfoWrapper in C#\nDESCRIPTION: Implements `FileInfoBase` and `IFileSystemAclSupport`, providing a concrete wrapper around a `System.IO.FileInfo` instance. It forwards calls to the underlying `FileInfo` object, enabling the abstractions to be used with the actual file system. Requires an `IFileSystem` and a `FileInfo` instance for construction and overrides all base methods/properties.\nSOURCE: https://github.com/testableio/system.io.abstractions/blob/main/tests/TestableIO.System.IO.Abstractions.Api.Tests/Expected/TestableIO.System.IO.Abstractions.Wrappers_net472.txt#2025-04-22_snippet_13\n\nLANGUAGE: csharp\nCODE:\n```\n    [System.Serializable]\n    public class FileInfoWrapper : System.IO.Abstractions.FileInfoBase, System.IO.Abstractions.IFileSystemAclSupport\n    {\n        public FileInfoWrapper(System.IO.Abstractions.IFileSystem fileSystem, System.IO.FileInfo instance) { }\n        public override System.IO.FileAttributes Attributes { get; set; }\n        public override System.DateTime CreationTime { get; set; }\n        public override System.DateTime CreationTimeUtc { get; set; }\n        public override System.IO.Abstractions.IDirectoryInfo Directory { get; }\n        public override string DirectoryName { get; }\n        public override bool Exists { get; }\n        public override string Extension { get; }\n        public override string FullName { get; }\n        public override bool IsReadOnly { get; set; }\n        public override System.DateTime LastAccessTime { get; set; }\n        public override System.DateTime LastAccessTimeUtc { get; set; }\n        public override System.DateTime LastWriteTime { get; set; }\n        public override System.DateTime LastWriteTimeUtc { get; set; }\n        public override long Length { get; }\n        public override string Name { get; }\n        public override System.IO.StreamWriter AppendText() { }\n        public override System.IO.Abstractions.IFileInfo CopyTo(string destFileName) { }\n        public override System.IO.Abstractions.IFileInfo CopyTo(string destFileName, bool overwrite) { }\n        public override System.IO.Abstractions.FileSystemStream Create() { }\n        public override System.IO.StreamWriter CreateText() { }\n        public override void Decrypt() { }\n        public override void Delete() { }\n        public override void Encrypt() { }\n        public object GetAccessControl() { }\n        public object GetAccessControl(System.IO.Abstractions.IFileSystemAclSupport.AccessControlSections includeSections) { }\n        public override void MoveTo(string destFileName) { }\n        public override System.IO.Abstractions.FileSystemStream Open(System.IO.FileMode mode) { }\n        public override System.IO.Abstractions.FileSystemStream Open(System.IO.FileMode mode, System.IO.FileAccess access) { }\n        public override System.IO.Abstractions.FileSystemStream Open(System.IO.FileMode mode, System.IO.FileAccess access, System.IO.FileShare share) { }\n        public override System.IO.Abstractions.FileSystemStream OpenRead() { }\n        public override System.IO.StreamReader OpenText() { }\n        public override System.IO.Abstractions.FileSystemStream OpenWrite() { }\n        public override void Refresh() { }\n    }\n```\n\n----------------------------------------\n\nTITLE: Defining Mock File Data for Testing File Operations - System.IO.Abstractions - C#\nDESCRIPTION: This snippet defines the MockFileData class for representing file content and metadata in a test environment. The class exposes multiple constructors for different initialization patterns, supports both binary and text file content, and manages attributes, timestamps, link targets, security, and access properties. Specializations such as AccessControl are conditionally available for Windows, and the class includes static defaults for time and encoding. It underpins mock file operations and is essential for accurate emulation of the file system in tests.\nSOURCE: https://github.com/testableio/system.io.abstractions/blob/main/tests/TestableIO.System.IO.Abstractions.Api.Tests/Expected/TestableIO.System.IO.Abstractions.TestingHelpers_net8.0.txt#2025-04-22_snippet_12\n\nLANGUAGE: csharp\nCODE:\n```\n[System.Serializable]\npublic class MockFileData\n{\n    public static readonly System.DateTimeOffset DefaultDateTimeOffset;\n    public static readonly System.Text.Encoding DefaultEncoding;\n    public MockFileData(System.IO.Abstractions.TestingHelpers.MockFileData template) { }\n    public MockFileData(byte[] contents) { }\n    public MockFileData(string textContents) { }\n    public MockFileData(string textContents, System.Text.Encoding encoding) { }\n    [System.Runtime.Versioning.SupportedOSPlatform(\"windows\")]\n    public System.Security.AccessControl.FileSecurity AccessControl { get; set; }\n    public System.IO.FileShare AllowedFileShare { get; set; }\n    public System.IO.FileAttributes Attributes { get; set; }\n    public byte[] Contents { get; set; }\n    public System.DateTimeOffset CreationTime { get; set; }\n    public System.IO.Abstractions.IFileVersionInfo FileVersionInfo { get; set; }\n    public bool IsDirectory { get; }\n    public System.DateTimeOffset LastAccessTime { get; set; }\n    public System.DateTimeOffset LastWriteTime { get; set; }\n    public string LinkTarget { get; set; }\n    public string TextContents { get; set; }\n    public System.IO.UnixFileMode UnixMode { get; set; }\n    public static System.IO.Abstractions.TestingHelpers.MockFileData op_Implicit(string s) { }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining File System Operation Methods in C#\nDESCRIPTION: This snippet defines abstract methods for various file system operations including reading and writing files, manipulating file attributes, and handling file metadata. It includes both synchronous and asynchronous versions of these operations.\nSOURCE: https://github.com/testableio/system.io.abstractions/blob/main/tests/TestableIO.System.IO.Abstractions.Api.Tests/Expected/TestableIO.System.IO.Abstractions.Wrappers_net6.0.txt#2025-04-22_snippet_13\n\nLANGUAGE: C#\nCODE:\n```\npublic abstract System.Threading.Tasks.Task<string[]> ReadAllLinesAsync(string path, System.Threading.CancellationToken cancellationToken = default);\npublic abstract System.Threading.Tasks.Task<string[]> ReadAllLinesAsync(string path, System.Text.Encoding encoding, System.Threading.CancellationToken cancellationToken = default);\npublic abstract string ReadAllText(string path);\npublic abstract string ReadAllText(string path, System.Text.Encoding encoding);\npublic abstract System.Threading.Tasks.Task<string> ReadAllTextAsync(string path, System.Threading.CancellationToken cancellationToken = default);\npublic abstract System.Threading.Tasks.Task<string> ReadAllTextAsync(string path, System.Text.Encoding encoding, System.Threading.CancellationToken cancellationToken = default);\npublic abstract System.Collections.Generic.IEnumerable<string> ReadLines(string path);\npublic abstract System.Collections.Generic.IEnumerable<string> ReadLines(string path, System.Text.Encoding encoding);\npublic abstract void Replace(string sourceFileName, string destinationFileName, string destinationBackupFileName);\npublic abstract void Replace(string sourceFileName, string destinationFileName, string destinationBackupFileName, bool ignoreMetadataErrors);\npublic abstract System.IO.Abstractions.IFileSystemInfo ResolveLinkTarget(string linkPath, bool returnFinalTarget);\npublic abstract void SetAttributes(string path, System.IO.FileAttributes fileAttributes);\npublic abstract void SetCreationTime(string path, System.DateTime creationTime);\npublic abstract void SetCreationTimeUtc(string path, System.DateTime creationTimeUtc);\npublic abstract void SetLastAccessTime(string path, System.DateTime lastAccessTime);\npublic abstract void SetLastAccessTimeUtc(string path, System.DateTime lastAccessTimeUtc);\npublic abstract void SetLastWriteTime(string path, System.DateTime lastWriteTime);\npublic abstract void SetLastWriteTimeUtc(string path, System.DateTime lastWriteTimeUtc);\npublic abstract void WriteAllBytes(string path, byte[] bytes);\npublic abstract System.Threading.Tasks.Task WriteAllBytesAsync(string path, byte[] bytes, System.Threading.CancellationToken cancellationToken = default);\npublic abstract void WriteAllLines(string path, System.Collections.Generic.IEnumerable<string> contents);\npublic abstract void WriteAllLines(string path, string[] contents);\npublic abstract void WriteAllLines(string path, System.Collections.Generic.IEnumerable<string> contents, System.Text.Encoding encoding);\npublic abstract void WriteAllLines(string path, string[] contents, System.Text.Encoding encoding);\npublic abstract System.Threading.Tasks.Task WriteAllLinesAsync(string path, System.Collections.Generic.IEnumerable<string> contents, System.Threading.CancellationToken cancellationToken = default);\npublic abstract System.Threading.Tasks.Task WriteAllLinesAsync(string path, System.Collections.Generic.IEnumerable<string> contents, System.Text.Encoding encoding, System.Threading.CancellationToken cancellationToken = default);\npublic abstract void WriteAllText(string path, string contents);\npublic abstract void WriteAllText(string path, string contents, System.Text.Encoding encoding);\npublic abstract System.Threading.Tasks.Task WriteAllTextAsync(string path, string contents, System.Threading.CancellationToken cancellationToken = default);\npublic abstract System.Threading.Tasks.Task WriteAllTextAsync(string path, string contents, System.Text.Encoding encoding, System.Threading.CancellationToken cancellationToken = default);\n```\n\n----------------------------------------\n\nTITLE: MockFile Class Implementation in C#\nDESCRIPTION: Implements file operations such as append, copy, create, delete, and more for a mock file system using System.IO.Abstractions. It provides async versions for several file operations as well.\nSOURCE: https://github.com/testableio/system.io.abstractions/blob/main/tests/TestableIO.System.IO.Abstractions.Api.Tests/Expected/TestableIO.System.IO.Abstractions.TestingHelpers_net6.0.txt#2025-04-22_snippet_14\n\nLANGUAGE: C#\nCODE:\n```\npublic class MockFile : System.IO.Abstractions.FileBase\n{\n    public MockFile(System.IO.Abstractions.TestingHelpers.IMockFileDataAccessor mockFileDataAccessor) { }\n    public override void AppendAllLines(string path, System.Collections.Generic.IEnumerable<string> contents) { }\n    public override void AppendAllLines(string path, System.Collections.Generic.IEnumerable<string> contents, System.Text.Encoding encoding) { }\n    public override System.Threading.Tasks.Task AppendAllLinesAsync(string path, System.Collections.Generic.IEnumerable<string> contents, System.Threading.CancellationToken cancellationToken = default) { }\n    public override System.Threading.Tasks.Task AppendAllLinesAsync(string path, System.Collections.Generic.IEnumerable<string> contents, System.Text.Encoding encoding, System.Threading.CancellationToken cancellationToken = default) { }\n    public override void AppendAllText(string path, string contents) { }\n    public override void AppendAllText(string path, string contents, System.Text.Encoding encoding) { }\n    public override System.Threading.Tasks.Task AppendAllTextAsync(string path, string contents, System.Threading.CancellationToken cancellationToken = default) { }\n    public override System.Threading.Tasks.Task AppendAllTextAsync(string path, string contents, System.Text.Encoding encoding, System.Threading.CancellationToken cancellationToken = default) { }\n    public override System.IO.StreamWriter AppendText(string path) { }\n    public override void Copy(string sourceFileName, string destFileName) { }\n    public override void Copy(string sourceFileName, string destFileName, bool overwrite) { }\n    public override System.IO.Abstractions.FileSystemStream Create(string path) { }\n    public override System.IO.Abstractions.FileSystemStream Create(string path, int bufferSize) { }\n    public override System.IO.Abstractions.FileSystemStream Create(string path, int bufferSize, System.IO.FileOptions options) { }\n    public override System.IO.Abstractions.IFileSystemInfo CreateSymbolicLink(string path, string pathToTarget) { }\n    public override System.IO.StreamWriter CreateText(string path) { }\n    public override void Decrypt(string path) { }\n    public override void Delete(string path) { }\n    public override void Encrypt(string path) { }\n    public override bool Exists(string path) { }\n    public override System.IO.FileAttributes GetAttributes(string path) { }\n    public override System.DateTime GetCreationTime(string path) { }\n    public override System.DateTime GetCreationTimeUtc(string path) { }\n    public override System.DateTime GetLastAccessTime(string path) { }\n    public override System.DateTime GetLastAccessTimeUtc(string path) { }\n    public override System.DateTime GetLastWriteTime(string path) { }\n    public override System.DateTime GetLastWriteTimeUtc(string path) { }\n    public override void Move(string sourceFileName, string destFileName) { }\n    public override void Move(string sourceFileName, string destFileName, bool overwrite) { }\n    public override System.IO.Abstractions.FileSystemStream Open(string path, System.IO.FileMode mode) { }\n    public override System.IO.Abstractions.FileSystemStream Open(string path, System.IO.FileStreamOptions options) { }\n    public override System.IO.Abstractions.FileSystemStream Open(string path, System.IO.FileMode mode, System.IO.FileAccess access) { }\n    public override System.IO.Abstractions.FileSystemStream Open(string path, System.IO.FileMode mode, System.IO.FileAccess access, System.IO.FileShare share) { }\n    public override System.IO.Abstractions.FileSystemStream OpenRead(string path) { }\n    public override System.IO.StreamReader OpenText(string path) { }\n    public override System.IO.Abstractions.FileSystemStream OpenWrite(string path) { }\n    public override byte[] ReadAllBytes(string path) { }\n    public override System.Threading.Tasks.Task<byte[]> ReadAllBytesAsync(string path, System.Threading.CancellationToken cancellationToken = default) { }\n    public override string[] ReadAllLines(string path) { }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining DirectoryBase Abstract Class\nDESCRIPTION: Abstract base class implementing IDirectory and IFileSystemEntity interfaces. Provides the foundation for directory manipulation operations with file system abstraction.\nSOURCE: https://github.com/testableio/system.io.abstractions/blob/main/tests/TestableIO.System.IO.Abstractions.Api.Tests/Expected/TestableIO.System.IO.Abstractions.Wrappers_net6.0.txt#2025-04-22_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\n[System.Serializable]\npublic abstract class DirectoryBase : System.IO.Abstractions.IDirectory, System.IO.Abstractions.IFileSystemEntity\n{\n    protected DirectoryBase(System.IO.Abstractions.IFileSystem fileSystem) { }\n    public System.IO.Abstractions.IFileSystem FileSystem { get; }\n    public abstract System.IO.Abstractions.IDirectoryInfo CreateDirectory(string path);\n    public abstract System.IO.Abstractions.IFileSystemInfo CreateSymbolicLink(string path, string pathToTarget);\n    public abstract void Delete(string path);\n    public abstract void Delete(string path, bool recursive);\n    public abstract System.Collections.Generic.IEnumerable<string> EnumerateDirectories(string path);\n    public abstract System.Collections.Generic.IEnumerable<string> EnumerateDirectories(string path, string searchPattern);\n    public abstract System.Collections.Generic.IEnumerable<string> EnumerateDirectories(string path, string searchPattern, System.IO.EnumerationOptions enumerationOptions);\n    public abstract System.Collections.Generic.IEnumerable<string> EnumerateDirectories(string path, string searchPattern, System.IO.SearchOption searchOption);\n    public abstract System.Collections.Generic.IEnumerable<string> EnumerateFileSystemEntries(string path);\n    public abstract System.Collections.Generic.IEnumerable<string> EnumerateFileSystemEntries(string path, string searchPattern);\n    public abstract System.Collections.Generic.IEnumerable<string> EnumerateFileSystemEntries(string path, string searchPattern, System.IO.EnumerationOptions enumerationOptions);\n    public abstract System.Collections.Generic.IEnumerable<string> EnumerateFileSystemEntries(string path, string searchPattern, System.IO.SearchOption searchOption);\n    public abstract System.Collections.Generic.IEnumerable<string> EnumerateFiles(string path);\n    public abstract System.Collections.Generic.IEnumerable<string> EnumerateFiles(string path, string searchPattern);\n    public abstract System.Collections.Generic.IEnumerable<string> EnumerateFiles(string path, string searchPattern, System.IO.EnumerationOptions enumerationOptions);\n    public abstract System.Collections.Generic.IEnumerable<string> EnumerateFiles(string path, string searchPattern, System.IO.SearchOption searchOption);\n    public abstract bool Exists(string path);\n    public abstract System.DateTime GetCreationTime(string path);\n    public abstract System.DateTime GetCreationTimeUtc(string path);\n    public abstract string GetCurrentDirectory();\n    public abstract string[] GetDirectories(string path);\n    public abstract string[] GetDirectories(string path, string searchPattern);\n    public abstract string[] GetDirectories(string path, string searchPattern, System.IO.EnumerationOptions enumerationOptions);\n    public abstract string[] GetDirectories(string path, string searchPattern, System.IO.SearchOption searchOption);\n    public abstract string GetDirectoryRoot(string path);\n    public abstract string[] GetFileSystemEntries(string path);\n    public abstract string[] GetFileSystemEntries(string path, string searchPattern);\n    public abstract string[] GetFileSystemEntries(string path, string searchPattern, System.IO.EnumerationOptions enumerationOptions);\n    public abstract string[] GetFileSystemEntries(string path, string searchPattern, System.IO.SearchOption searchOption);\n    public abstract string[] GetFiles(string path);\n    public abstract string[] GetFiles(string path, string searchPattern);\n    public abstract string[] GetFiles(string path, string searchPattern, System.IO.EnumerationOptions enumerationOptions);\n    public abstract string[] GetFiles(string path, string searchPattern, System.IO.SearchOption searchOption);\n    public abstract System.DateTime GetLastAccessTime(string path);\n    public abstract System.DateTime GetLastAccessTimeUtc(string path);\n    public abstract System.DateTime GetLastWriteTime(string path);\n    public abstract System.DateTime GetLastWriteTimeUtc(string path);\n    public abstract string[] GetLogicalDrives();\n    public abstract System.IO.Abstractions.IDirectoryInfo GetParent(string path);\n    public abstract void Move(string sourceDirName, string destDirName);\n    public abstract System.IO.Abstractions.IFileSystemInfo ResolveLinkTarget(string linkPath, bool returnFinalTarget);\n    public abstract void SetCreationTime(string path, System.DateTime creationTime);\n    public abstract void SetCreationTimeUtc(string path, System.DateTime creationTimeUtc);\n    public abstract void SetCurrentDirectory(string path);\n    public abstract void SetLastAccessTime(string path, System.DateTime lastAccessTime);\n    public abstract void SetLastAccessTimeUtc(string path, System.DateTime lastAccessTimeUtc);\n    public abstract void SetLastWriteTime(string path, System.DateTime lastWriteTime);\n    public abstract void SetLastWriteTimeUtc(string path, System.DateTime lastWriteTimeUtc);\n}\n```\n\n----------------------------------------\n\nTITLE: Defining FileSystemBase Abstract Class in C#\nDESCRIPTION: This abstract class defines the base structure for file system operations, declaring abstract properties for various file system components.\nSOURCE: https://github.com/testableio/system.io.abstractions/blob/main/tests/TestableIO.System.IO.Abstractions.Api.Tests/Expected/TestableIO.System.IO.Abstractions.Wrappers_net472.txt#2025-04-22_snippet_17\n\nLANGUAGE: C#\nCODE:\n```\n[System.Serializable]\npublic abstract class FileSystemBase : System.IO.Abstractions.IFileSystem\n{\n    protected FileSystemBase() { }\n    public abstract System.IO.Abstractions.IDirectory Directory { get; }\n    public abstract System.IO.Abstractions.IDirectoryInfoFactory DirectoryInfo { get; }\n    public abstract System.IO.Abstractions.IDriveInfoFactory DriveInfo { get; }\n    public abstract System.IO.Abstractions.IFile File { get; }\n    public abstract System.IO.Abstractions.IFileInfoFactory FileInfo { get; }\n    public abstract System.IO.Abstractions.IFileStreamFactory FileStream { get; }\n    public abstract System.IO.Abstractions.IFileSystemWatcherFactory FileSystemWatcher { get; }\n    public abstract System.IO.Abstractions.IFileVersionInfoFactory FileVersionInfo { get; }\n    public abstract System.IO.Abstractions.IPath Path { get; }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing FileInfoWrapper Class in C#\nDESCRIPTION: This snippet defines a concrete implementation of FileInfoBase, wrapping System.IO.FileInfo. It implements various file operations and properties, including Windows-specific features.\nSOURCE: https://github.com/testableio/system.io.abstractions/blob/main/tests/TestableIO.System.IO.Abstractions.Api.Tests/Expected/TestableIO.System.IO.Abstractions.Wrappers_net6.0.txt#2025-04-22_snippet_16\n\nLANGUAGE: C#\nCODE:\n```\n[System.Serializable]\npublic class FileInfoWrapper : System.IO.Abstractions.FileInfoBase, System.IO.Abstractions.IFileSystemAclSupport\n{\n    public FileInfoWrapper(System.IO.Abstractions.IFileSystem fileSystem, System.IO.FileInfo instance) { }\n    public override System.IO.FileAttributes Attributes { get; set; }\n    public override System.DateTime CreationTime { get; set; }\n    public override System.DateTime CreationTimeUtc { get; set; }\n    public override System.IO.Abstractions.IDirectoryInfo Directory { get; }\n    public override string DirectoryName { get; }\n    public override bool Exists { get; }\n    public override string Extension { get; }\n    public override string FullName { get; }\n    public override bool IsReadOnly { get; set; }\n    public override System.DateTime LastAccessTime { get; set; }\n    public override System.DateTime LastAccessTimeUtc { get; set; }\n    public override System.DateTime LastWriteTime { get; set; }\n    public override System.DateTime LastWriteTimeUtc { get; set; }\n    public override long Length { get; }\n    public override string LinkTarget { get; }\n    public override string Name { get; }\n    public override System.IO.StreamWriter AppendText() { }\n    public override System.IO.Abstractions.IFileInfo CopyTo(string destFileName) { }\n    public override System.IO.Abstractions.IFileInfo CopyTo(string destFileName, bool overwrite) { }\n    public override System.IO.Abstractions.FileSystemStream Create() { }\n    public override void CreateAsSymbolicLink(string pathToTarget) { }\n    public override System.IO.StreamWriter CreateText() { }\n    [System.Runtime.Versioning.SupportedOSPlatform(\"windows\")]\n    public override void Decrypt() { }\n    public override void Delete() { }\n    [System.Runtime.Versioning.SupportedOSPlatform(\"windows\")]\n    public override void Encrypt() { }\n    [System.Runtime.Versioning.SupportedOSPlatform(\"windows\")]\n    public object GetAccessControl() { }\n    [System.Runtime.Versioning.SupportedOSPlatform(\"windows\")]\n    public object GetAccessControl(System.IO.Abstractions.IFileSystemAclSupport.AccessControlSections includeSections) { }\n    public override void MoveTo(string destFileName) { }\n    public override void MoveTo(string destFileName, bool overwrite) { }\n    public override System.IO.Abstractions.FileSystemStream Open(System.IO.FileMode mode) { }\n    public override System.IO.Abstractions.FileSystemStream Open(System.IO.FileStreamOptions options) { }\n    public override System.IO.Abstractions.FileSystemStream Open(System.IO.FileMode mode, System.IO.FileAccess access) { }\n    public override System.IO.Abstractions.FileSystemStream Open(System.IO.FileMode mode, System.IO.FileAccess access, System.IO.FileShare share) { }\n    public override System.IO.Abstractions.FileSystemStream OpenRead() { }\n    public override System.IO.StreamReader OpenText() { }\n    public override System.IO.Abstractions.FileSystemStream OpenWrite() { }\n    public override void Refresh() { }\n    public override System.IO.Abstractions.IFileInfo Replace(string destinationFileName, string destinationBackupFileName) { }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Static Directory Operations Wrapper in C#\nDESCRIPTION: Defines the `DirectoryWrapper` class, inheriting from `System.IO.Abstractions.DirectoryBase`. This class serves as a wrapper around static directory operations typically found in `System.IO.Directory`. It takes an `IFileSystem` instance in its constructor, which is used to perform the actual file system operations. The class overrides methods like `CreateDirectory`, `CreateSymbolicLink`, `Delete`, and various `Enumerate*` methods (for directories, files, and file system entries), providing versions that accept paths, search patterns, and enumeration options.\nSOURCE: https://github.com/testableio/system.io.abstractions/blob/main/tests/TestableIO.System.IO.Abstractions.Api.Tests/Expected/TestableIO.System.IO.Abstractions.Wrappers_net6.0.txt#2025-04-22_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\n    [System.Serializable]\n    public class DirectoryWrapper : System.IO.Abstractions.DirectoryBase\n    {\n        public DirectoryWrapper(System.IO.Abstractions.IFileSystem fileSystem) { }\n        public override System.IO.Abstractions.IDirectoryInfo CreateDirectory(string path) { }\n        public override System.IO.Abstractions.IFileSystemInfo CreateSymbolicLink(string path, string pathToTarget) { }\n        public override void Delete(string path) { }\n        public override void Delete(string path, bool recursive) { }\n        public override System.Collections.Generic.IEnumerable<string> EnumerateDirectories(string path) { }\n        public override System.Collections.Generic.IEnumerable<string> EnumerateDirectories(string path, string searchPattern) { }\n        public override System.Collections.Generic.IEnumerable<string> EnumerateDirectories(string path, string searchPattern, System.IO.EnumerationOptions enumerationOptions) { }\n        public override System.Collections.Generic.IEnumerable<string> EnumerateDirectories(string path, string searchPattern, System.IO.SearchOption searchOption) { }\n        public override System.Collections.Generic.IEnumerable<string> EnumerateFileSystemEntries(string path) { }\n        public override System.Collections.Generic.IEnumerable<string> EnumerateFileSystemEntries(string path, string searchPattern) { }\n        public override System.Collections.Generic.IEnumerable<string> EnumerateFileSystemEntries(string path, string searchPattern, System.IO.EnumerationOptions enumerationOptions) { }\n        public override System.Collections.Generic.IEnumerable<string> EnumerateFileSystemEntries(string path, string searchPattern, System.IO.SearchOption searchOption) { }\n        public override System.Collections.Generic.IEnumerable<string> EnumerateFiles(string path) { }\n        public override System.Collections.Generic.IEnumerable<string> EnumerateFiles(string path, string searchPattern) { }\n        public override System.Collections.Generic.IEnumerable<string> EnumerateFiles(string path, string searchPattern, System.IO.EnumerationOptions enumerationOptions) { }\n```\n\n----------------------------------------\n\nTITLE: DirectoryInfoBase Abstract Class Definition\nDESCRIPTION: Abstract base class extending FileSystemInfoBase and implementing IDirectoryInfo interface. Provides methods for directory manipulation including creation, enumeration, and retrieval of directory content.\nSOURCE: https://github.com/testableio/system.io.abstractions/blob/main/tests/TestableIO.System.IO.Abstractions.Api.Tests/Expected/TestableIO.System.IO.Abstractions.Wrappers_net472.txt#2025-04-22_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\n[System.Serializable]\npublic abstract class DirectoryInfoBase : System.IO.Abstractions.FileSystemInfoBase, System.IO.Abstractions.IDirectoryInfo, System.IO.Abstractions.IFileSystemInfo\n{\n    protected DirectoryInfoBase(System.IO.Abstractions.IFileSystem fileSystem) { }\n    public abstract System.IO.Abstractions.IDirectoryInfo Parent { get; }\n    public abstract System.IO.Abstractions.IDirectoryInfo Root { get; }\n    public abstract void Create();\n    public abstract System.IO.Abstractions.IDirectoryInfo CreateSubdirectory(string path);\n    public abstract void Delete(bool recursive);\n    public abstract System.Collections.Generic.IEnumerable<System.IO.Abstractions.IDirectoryInfo> EnumerateDirectories();\n    public abstract System.Collections.Generic.IEnumerable<System.IO.Abstractions.IDirectoryInfo> EnumerateDirectories(string searchPattern);\n    public abstract System.Collections.Generic.IEnumerable<System.IO.Abstractions.IDirectoryInfo> EnumerateDirectories(string searchPattern, System.IO.SearchOption searchOption);\n    public abstract System.Collections.Generic.IEnumerable<System.IO.Abstractions.IFileSystemInfo> EnumerateFileSystemInfos();\n    public abstract System.Collections.Generic.IEnumerable<System.IO.Abstractions.IFileSystemInfo> EnumerateFileSystemInfos(string searchPattern);\n    public abstract System.Collections.Generic.IEnumerable<System.IO.Abstractions.IFileSystemInfo> EnumerateFileSystemInfos(string searchPattern, System.IO.SearchOption searchOption);\n    public abstract System.Collections.Generic.IEnumerable<System.IO.Abstractions.IFileInfo> EnumerateFiles();\n    public abstract System.Collections.Generic.IEnumerable<System.IO.Abstractions.IFileInfo> EnumerateFiles(string searchPattern);\n    public abstract System.Collections.Generic.IEnumerable<System.IO.Abstractions.IFileInfo> EnumerateFiles(string searchPattern, System.IO.SearchOption searchOption);\n    public abstract System.IO.Abstractions.IDirectoryInfo[] GetDirectories();\n    public abstract System.IO.Abstractions.IDirectoryInfo[] GetDirectories(string searchPattern);\n    public abstract System.IO.Abstractions.IDirectoryInfo[] GetDirectories(string searchPattern, System.IO.SearchOption searchOption);\n    public abstract System.IO.Abstractions.IFileSystemInfo[] GetFileSystemInfos();\n    public abstract System.IO.Abstractions.IFileSystemInfo[] GetFileSystemInfos(string searchPattern);\n    public abstract System.IO.Abstractions.IFileSystemInfo[] GetFileSystemInfos(string searchPattern, System.IO.SearchOption searchOption);\n    public abstract System.IO.Abstractions.IFileInfo[] GetFiles();\n    public abstract System.IO.Abstractions.IFileInfo[] GetFiles(string searchPattern);\n    public abstract System.IO.Abstractions.IFileInfo[] GetFiles(string searchPattern, System.IO.SearchOption searchOption);\n    public abstract void MoveTo(string destDirName);\n    public static System.IO.Abstractions.DirectoryInfoBase op_Implicit(System.IO.DirectoryInfo directoryInfo) { }\n}\n```\n\n----------------------------------------\n\nTITLE: Mocking File System in C# Using Moq\nDESCRIPTION: Demonstrates how to mock file system interfaces for unit testing in C# using Moq. Sets up mock behavior and verifies interactions with the mocked file system to validate logic handling file events.\nSOURCE: https://github.com/testableio/system.io.abstractions/blob/main/README.md#2025-04-22_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\n[Test]\npublic void Test1()\n{\n    var watcher = Mock.Of<IFileSystemWatcher>();\n    var file = Mock.Of<IFile>();\n\n    Mock.Get(file).Setup(f => f.Exists(It.IsAny<string>())).Returns(true);\n    Mock.Get(file).Setup(f => f.ReadAllText(It.IsAny<string>())).Throws<OutOfMemoryException>();\n\n    var unitUnderTest = new SomeClassUsingFileSystemWatcher(watcher, file);\n\n    Assert.Throws<OutOfMemoryException>(() => {\n        Mock.Get(watcher).Raise(w => w.Created += null, new System.IO.FileSystemEventArgs(System.IO.WatcherChangeTypes.Created, @\"C:\\Some\\Directory\", \"Some.File\"));\n    });\n\n    Mock.Get(file).Verify(f => f.Exists(It.IsAny<string>()), Times.Once);\n\n    Assert.True(unitUnderTest.FileWasCreated);\n}\n\npublic class SomeClassUsingFileSystemWatcher\n{\n    private readonly IFileSystemWatcher _watcher;\n    private readonly IFile _file;\n\n    public bool FileWasCreated { get; private set; }\n\n    public SomeClassUsingFileSystemWatcher(IFileSystemWatcher watcher, IFile file)\n    {\n        this._file = file;\n        this._watcher = watcher;\n        this._watcher.Created += Watcher_Created;\n    }\n\n    private void Watcher_Created(object sender, System.IO.FileSystemEventArgs e)\n    {\n        FileWasCreated = true;\n\n        if(_file.Exists(e.FullPath))\n        {\n            var text = _file.ReadAllText(e.FullPath);\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining PathBase Abstract Class in System.IO.Abstractions\nDESCRIPTION: Abstract base class for path operations that implements IPath and IFileSystemEntity interfaces. It provides a foundation for path-related operations like combining paths, getting extensions, and manipulating file and directory paths.\nSOURCE: https://github.com/testableio/system.io.abstractions/blob/main/tests/TestableIO.System.IO.Abstractions.Api.Tests/Expected/TestableIO.System.IO.Abstractions.Wrappers_netstandard2.1.txt#2025-04-22_snippet_25\n\nLANGUAGE: C#\nCODE:\n```\n[System.Serializable]\npublic abstract class PathBase : System.IO.Abstractions.IFileSystemEntity, System.IO.Abstractions.IPath\n{\n    protected PathBase(System.IO.Abstractions.IFileSystem fileSystem) { }\n    public abstract char AltDirectorySeparatorChar { get; }\n    public abstract char DirectorySeparatorChar { get; }\n    public System.IO.Abstractions.IFileSystem FileSystem { get; }\n    [System.Obsolete(\"Please use GetInvalidPathChars or GetInvalidFileNameChars instead.\")]\n    public abstract char[] InvalidPathChars { get; }\n    public abstract char PathSeparator { get; }\n    public abstract char VolumeSeparatorChar { get; }\n    public abstract string ChangeExtension(string path, string extension);\n    public abstract string Combine(params string[] paths);\n    public abstract string Combine(string path1, string path2);\n    public abstract string Combine(string path1, string path2, string path3);\n    public abstract string Combine(string path1, string path2, string path3, string path4);\n    public abstract System.ReadOnlySpan<char> GetDirectoryName(System.ReadOnlySpan<char> path);\n    public abstract string GetDirectoryName(string path);\n    public abstract System.ReadOnlySpan<char> GetExtension(System.ReadOnlySpan<char> path);\n    public abstract string GetExtension(string path);\n    public abstract System.ReadOnlySpan<char> GetFileName(System.ReadOnlySpan<char> path);\n    public abstract string GetFileName(string path);\n    public abstract System.ReadOnlySpan<char> GetFileNameWithoutExtension(System.ReadOnlySpan<char> path);\n    public abstract string GetFileNameWithoutExtension(string path);\n    public abstract string GetFullPath(string path);\n    public abstract string GetFullPath(string path, string basePath);\n    public abstract char[] GetInvalidFileNameChars();\n    public abstract char[] GetInvalidPathChars();\n    public abstract System.ReadOnlySpan<char> GetPathRoot(System.ReadOnlySpan<char> path);\n    public abstract string GetPathRoot(string path);\n    public abstract string GetRandomFileName();\n    public abstract string GetRelativePath(string relativeTo, string path);\n    public abstract string GetTempFileName();\n    public abstract string GetTempPath();\n    public abstract bool HasExtension(System.ReadOnlySpan<char> path);\n    public abstract bool HasExtension(string path);\n    public abstract bool IsPathFullyQualified(System.ReadOnlySpan<char> path);\n    public abstract bool IsPathFullyQualified(string path);\n    public abstract bool IsPathRooted(System.ReadOnlySpan<char> path);\n    public abstract bool IsPathRooted(string path);\n    public abstract string Join(System.ReadOnlySpan<char> path1, System.ReadOnlySpan<char> path2);\n    public abstract string Join(System.ReadOnlySpan<char> path1, System.ReadOnlySpan<char> path2, System.ReadOnlySpan<char> path3);\n    public abstract bool TryJoin(System.ReadOnlySpan<char> path1, System.ReadOnlySpan<char> path2, System.Span<char> destination, out int charsWritten);\n    public abstract bool TryJoin(System.ReadOnlySpan<char> path1, System.ReadOnlySpan<char> path2, System.ReadOnlySpan<char> path3, System.Span<char> destination, out int charsWritten);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing FileInfoWrapper Class in C#\nDESCRIPTION: Concrete implementation of FileInfoBase that wraps a System.IO.FileInfo instance. This class provides the actual implementation of the abstracted file system operations by delegating to the wrapped FileInfo instance.\nSOURCE: https://github.com/testableio/system.io.abstractions/blob/main/tests/TestableIO.System.IO.Abstractions.Api.Tests/Expected/TestableIO.System.IO.Abstractions.Wrappers_netstandard2.0.txt#2025-04-22_snippet_13\n\nLANGUAGE: C#\nCODE:\n```\n[System.Serializable]\npublic class FileInfoWrapper : System.IO.Abstractions.FileInfoBase, System.IO.Abstractions.IFileSystemAclSupport\n{\n    public FileInfoWrapper(System.IO.Abstractions.IFileSystem fileSystem, System.IO.FileInfo instance) { }\n    public override System.IO.FileAttributes Attributes { get; set; }\n    public override System.DateTime CreationTime { get; set; }\n    public override System.DateTime CreationTimeUtc { get; set; }\n    public override System.IO.Abstractions.IDirectoryInfo Directory { get; }\n    public override string DirectoryName { get; }\n    public override bool Exists { get; }\n    public override string Extension { get; }\n    public override string FullName { get; }\n    public override bool IsReadOnly { get; set; }\n    public override System.DateTime LastAccessTime { get; set; }\n    public override System.DateTime LastAccessTimeUtc { get; set; }\n    public override System.DateTime LastWriteTime { get; set; }\n    public override System.DateTime LastWriteTimeUtc { get; set; }\n    public override long Length { get; }\n    public override string Name { get; }\n    public override System.IO.StreamWriter AppendText() { }\n    public override System.IO.Abstractions.IFileInfo CopyTo(string destFileName) { }\n    public override System.IO.Abstractions.IFileInfo CopyTo(string destFileName, bool overwrite) { }\n    public override System.IO.Abstractions.FileSystemStream Create() { }\n    public override System.IO.StreamWriter CreateText() { }\n    public override void Decrypt() { }\n    public override void Delete() { }\n    public override void Encrypt() { }\n    public object GetAccessControl() { }\n    public object GetAccessControl(System.IO.Abstractions.IFileSystemAclSupport.AccessControlSections includeSections) { }\n    public override void MoveTo(string destFileName) { }\n    public override System.IO.Abstractions.FileSystemStream Open(System.IO.FileMode mode) { }\n    public override System.IO.Abstractions.FileSystemStream Open(System.IO.FileMode mode, System.IO.FileAccess access) { }\n    public override System.IO.Abstractions.FileSystemStream Open(System.IO.FileMode mode, System.IO.FileAccess access, System.IO.FileShare share) { }\n    public override System.IO.Abstractions.FileSystemStream OpenRead() { }\n    public override System.IO.StreamReader OpenText() { }\n    public override System.IO.Abstractions.FileSystemStream OpenWrite() { }\n    public override void Refresh() { }\n```\n\n----------------------------------------\n\nTITLE: Implementing MockDirectory Class\nDESCRIPTION: A mock implementation of DirectoryBase class that provides directory operations for testing purposes. Includes methods for creating, deleting, and enumerating directories and files.\nSOURCE: https://github.com/testableio/system.io.abstractions/blob/main/tests/TestableIO.System.IO.Abstractions.Api.Tests/Expected/TestableIO.System.IO.Abstractions.TestingHelpers_netstandard2.1.txt#2025-04-22_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\n[System.Serializable]\npublic class MockDirectory : System.IO.Abstractions.DirectoryBase\n{\n    public MockDirectory(System.IO.Abstractions.TestingHelpers.IMockFileDataAccessor mockFileDataAccessor, string currentDirectory) { }\n    public MockDirectory(System.IO.Abstractions.TestingHelpers.IMockFileDataAccessor mockFileDataAccessor, System.IO.Abstractions.FileBase fileBase, string currentDirectory) { }\n    public override System.IO.Abstractions.IDirectoryInfo CreateDirectory(string path) { }\n    public override void Delete(string path) { }\n    public override void Delete(string path, bool recursive) { }\n    // ... additional methods omitted for brevity\n}\n```\n\n----------------------------------------\n\nTITLE: MockFile Class for Testing File Operations with System.IO.Abstractions in C#\nDESCRIPTION: This snippet provides a serializable mock file class inheriting from FileBase, enabling simulation and testing of almost every file operation (read, write, attributes, security, backups) without disk I/O. It overrides methods for all standard System.IO.File functionality, redirecting operations to a memory-based or otherwise virtualized backing via IMockFileDataAccessor. Inputs typically include file paths, content and encoding parameters; outputs are consistent with FileBase signatures (byte arrays, strings, streams, etc).\nSOURCE: https://github.com/testableio/system.io.abstractions/blob/main/tests/TestableIO.System.IO.Abstractions.Api.Tests/Expected/TestableIO.System.IO.Abstractions.TestingHelpers_netstandard2.0.txt#2025-04-22_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\n[System.Serializable]\npublic class MockFile : System.IO.Abstractions.FileBase\n{\n    public MockFile(System.IO.Abstractions.TestingHelpers.IMockFileDataAccessor mockFileDataAccessor) { }\n    public override void AppendAllLines(string path, System.Collections.Generic.IEnumerable<string> contents) { }\n    public override void AppendAllLines(string path, System.Collections.Generic.IEnumerable<string> contents, System.Text.Encoding encoding) { }\n    public override void AppendAllText(string path, string contents) { }\n    public override void AppendAllText(string path, string contents, System.Text.Encoding encoding) { }\n    public override System.IO.StreamWriter AppendText(string path) { }\n    public override void Copy(string sourceFileName, string destFileName) { }\n    public override void Copy(string sourceFileName, string destFileName, bool overwrite) { }\n    public override System.IO.Abstractions.FileSystemStream Create(string path) { }\n    public override System.IO.Abstractions.FileSystemStream Create(string path, int bufferSize) { }\n    public override System.IO.Abstractions.FileSystemStream Create(string path, int bufferSize, System.IO.FileOptions options) { }\n    public override System.IO.StreamWriter CreateText(string path) { }\n    public override void Decrypt(string path) { }\n    public override void Delete(string path) { }\n    public override void Encrypt(string path) { }\n    public override bool Exists(string path) { }\n    public override System.IO.FileAttributes GetAttributes(string path) { }\n    public override System.DateTime GetCreationTime(string path) { }\n    public override System.DateTime GetCreationTimeUtc(string path) { }\n    public override System.DateTime GetLastAccessTime(string path) { }\n    public override System.DateTime GetLastAccessTimeUtc(string path) { }\n    public override System.DateTime GetLastWriteTime(string path) { }\n    public override System.DateTime GetLastWriteTimeUtc(string path) { }\n    public override void Move(string sourceFileName, string destFileName) { }\n    public override System.IO.Abstractions.FileSystemStream Open(string path, System.IO.FileMode mode) { }\n    public override System.IO.Abstractions.FileSystemStream Open(string path, System.IO.FileMode mode, System.IO.FileAccess access) { }\n    public override System.IO.Abstractions.FileSystemStream Open(string path, System.IO.FileMode mode, System.IO.FileAccess access, System.IO.FileShare share) { }\n    public override System.IO.StreamReader OpenText(string path) { }\n    public override System.IO.Abstractions.FileSystemStream OpenWrite(string path) { }\n    public override byte[] ReadAllBytes(string path) { }\n    public override string[] ReadAllLines(string path) { }\n    public override string[] ReadAllLines(string path, System.Text.Encoding encoding) { }\n    public override string ReadAllText(string path) { }\n    public override string ReadAllText(string path, System.Text.Encoding encoding) { }\n    public override System.Collections.Generic.IEnumerable<string> ReadLines(string path) { }\n    public override System.Collections.Generic.IEnumerable<string> ReadLines(string path, System.Text.Encoding encoding) { }\n    public override void Replace(string sourceFileName, string destinationFileName, string destinationBackupFileName) { }\n    public override void Replace(string sourceFileName, string destinationFileName, string destinationBackupFileName, bool ignoreMetadataErrors) { }\n    public override void SetAttributes(string path, System.IO.FileAttributes fileAttributes) { }\n    public override void SetCreationTime(string path, System.DateTime creationTime) { }\n    public override void SetCreationTimeUtc(string path, System.DateTime creationTimeUtc) { }\n    public override void SetLastAccessTime(string path, System.DateTime lastAccessTime) { }\n    public override void SetLastAccessTimeUtc(string path, System.DateTime lastAccessTimeUtc) { }\n    public override void SetLastWriteTime(string path, System.DateTime lastWriteTime) { }\n    public override void SetLastWriteTimeUtc(string path, System.DateTime lastWriteTimeUtc) { }\n    public override void WriteAllBytes(string path, byte[] bytes) { }\n    public override void WriteAllLines(string path, System.Collections.Generic.IEnumerable<string> contents) { }\n    public override void WriteAllLines(string path, string[] contents) { }\n    public override void WriteAllLines(string path, System.Collections.Generic.IEnumerable<string> contents, System.Text.Encoding encoding) { }\n    public override void WriteAllLines(string path, string[] contents, System.Text.Encoding encoding) { }\n    public override void WriteAllText(string path, string contents) { }\n    public override void WriteAllText(string path, string contents, System.Text.Encoding encoding) { }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Abstract File Operations with FileBase in C#\nDESCRIPTION: Provides an abstract base class `FileBase` implementing `IFile` within the `System.IO.Abstractions` namespace. It declares abstract methods corresponding to static methods in `System.IO.File`, enabling dependency injection and testability for file system interactions. Requires concrete implementations for methods like `AppendAllLines`, `Copy`, `Create`, `Delete`, `Exists`, `GetAttributes`, `Move`, `Open`, `Read*`, `Write*`, etc.\nSOURCE: https://github.com/testableio/system.io.abstractions/blob/main/tests/TestableIO.System.IO.Abstractions.Api.Tests/Expected/TestableIO.System.IO.Abstractions.Wrappers_net472.txt#2025-04-22_snippet_10\n\nLANGUAGE: csharp\nCODE:\n```\n    [System.Serializable]\n    public abstract class FileBase : System.IO.Abstractions.IFile\n    {\n        protected FileBase(System.IO.Abstractions.IFileSystem fileSystem) { }\n        public System.IO.Abstractions.IFileSystem FileSystem { get; }\n        public abstract void AppendAllLines(string path, System.Collections.Generic.IEnumerable<string> contents);\n        public abstract void AppendAllLines(string path, System.Collections.Generic.IEnumerable<string> contents, System.Text.Encoding encoding);\n        public abstract void AppendAllText(string path, string contents);\n        public abstract void AppendAllText(string path, string contents, System.Text.Encoding encoding);\n        public abstract System.IO.StreamWriter AppendText(string path);\n        public abstract void Copy(string sourceFileName, string destFileName);\n        public abstract void Copy(string sourceFileName, string destFileName, bool overwrite);\n        public abstract System.IO.Abstractions.FileSystemStream Create(string path);\n        public abstract System.IO.Abstractions.FileSystemStream Create(string path, int bufferSize);\n        public abstract System.IO.Abstractions.FileSystemStream Create(string path, int bufferSize, System.IO.FileOptions options);\n        public abstract System.IO.StreamWriter CreateText(string path);\n        public abstract void Decrypt(string path);\n        public abstract void Delete(string path);\n        public abstract void Encrypt(string path);\n        public abstract bool Exists(string path);\n        public abstract System.IO.FileAttributes GetAttributes(string path);\n        public abstract System.DateTime GetCreationTime(string path);\n        public abstract System.DateTime GetCreationTimeUtc(string path);\n        public abstract System.DateTime GetLastAccessTime(string path);\n        public abstract System.DateTime GetLastAccessTimeUtc(string path);\n        public abstract System.DateTime GetLastWriteTime(string path);\n        public abstract System.DateTime GetLastWriteTimeUtc(string path);\n        public abstract void Move(string sourceFileName, string destFileName);\n        public abstract System.IO.Abstractions.FileSystemStream Open(string path, System.IO.FileMode mode);\n        public abstract System.IO.Abstractions.FileSystemStream Open(string path, System.IO.FileMode mode, System.IO.FileAccess access);\n        public abstract System.IO.Abstractions.FileSystemStream Open(string path, System.IO.FileMode mode, System.IO.FileAccess access, System.IO.FileShare share);\n        public abstract System.IO.Abstractions.FileSystemStream OpenRead(string path);\n        public abstract System.IO.StreamReader OpenText(string path);\n        public abstract System.IO.Abstractions.FileSystemStream OpenWrite(string path);\n        public abstract byte[] ReadAllBytes(string path);\n        public abstract string[] ReadAllLines(string path);\n        public abstract string[] ReadAllLines(string path, System.Text.Encoding encoding);\n        public abstract string ReadAllText(string path);\n        public abstract string ReadAllText(string path, System.Text.Encoding encoding);\n        public abstract System.Collections.Generic.IEnumerable<string> ReadLines(string path);\n        public abstract System.Collections.Generic.IEnumerable<string> ReadLines(string path, System.Text.Encoding encoding);\n        public abstract void Replace(string sourceFileName, string destinationFileName, string destinationBackupFileName);\n        public abstract void Replace(string sourceFileName, string destinationFileName, string destinationBackupFileName, bool ignoreMetadataErrors);\n        public abstract void SetAttributes(string path, System.IO.FileAttributes fileAttributes);\n        public abstract void SetCreationTime(string path, System.DateTime creationTime);\n        public abstract void SetCreationTimeUtc(string path, System.DateTime creationTimeUtc);\n        public abstract void SetLastAccessTime(string path, System.DateTime lastAccessTime);\n        public abstract void SetLastAccessTimeUtc(string path, System.DateTime lastAccessTimeUtc);\n        public abstract void SetLastWriteTime(string path, System.DateTime lastWriteTime);\n        public abstract void SetLastWriteTimeUtc(string path, System.DateTime lastWriteTimeUtc);\n        public abstract void WriteAllBytes(string path, byte[] bytes);\n        public abstract void WriteAllLines(string path, System.Collections.Generic.IEnumerable<string> contents);\n        public abstract void WriteAllLines(string path, string[] contents);\n        public abstract void WriteAllLines(string path, System.Collections.Generic.IEnumerable<string> contents, System.Text.Encoding encoding);\n        public abstract void WriteAllLines(string path, string[] contents, System.Text.Encoding encoding);\n        public abstract void WriteAllText(string path, string contents);\n        public abstract void WriteAllText(string path, string contents, System.Text.Encoding encoding);\n    }\n```\n\n----------------------------------------\n\nTITLE: Implementing FileInfoWrapper Class in C#\nDESCRIPTION: FileInfoWrapper class implements FileInfoBase and IFileSystemAclSupport interfaces. It provides concrete implementations for file operations and includes Windows-specific methods for access control.\nSOURCE: https://github.com/testableio/system.io.abstractions/blob/main/tests/TestableIO.System.IO.Abstractions.Api.Tests/Expected/TestableIO.System.IO.Abstractions.Wrappers_net9.0.txt#2025-04-22_snippet_16\n\nLANGUAGE: C#\nCODE:\n```\n[System.Serializable]\npublic class FileInfoWrapper : System.IO.Abstractions.FileInfoBase, System.IO.Abstractions.IFileSystemAclSupport\n{\n    public FileInfoWrapper(System.IO.Abstractions.IFileSystem fileSystem, System.IO.FileInfo instance) { }\n    public override System.IO.FileAttributes Attributes { get; set; }\n    public override System.DateTime CreationTime { get; set; }\n    public override System.DateTime CreationTimeUtc { get; set; }\n    public override System.IO.Abstractions.IDirectoryInfo Directory { get; }\n    public override string DirectoryName { get; }\n    public override bool Exists { get; }\n    public override string Extension { get; }\n    public override string FullName { get; }\n    public override bool IsReadOnly { get; set; }\n    public override System.DateTime LastAccessTime { get; set; }\n    public override System.DateTime LastAccessTimeUtc { get; set; }\n    public override System.DateTime LastWriteTime { get; set; }\n    public override System.DateTime LastWriteTimeUtc { get; set; }\n    public override long Length { get; }\n    public override string LinkTarget { get; }\n    public override string Name { get; }\n    public override System.IO.StreamWriter AppendText() { }\n    public override System.IO.Abstractions.IFileInfo CopyTo(string destFileName) { }\n    public override System.IO.Abstractions.IFileInfo CopyTo(string destFileName, bool overwrite) { }\n    public override System.IO.Abstractions.FileSystemStream Create() { }\n    public override void CreateAsSymbolicLink(string pathToTarget) { }\n    public override System.IO.StreamWriter CreateText() { }\n    [System.Runtime.Versioning.SupportedOSPlatform(\"windows\")]\n    public override void Decrypt() { }\n    public override void Delete() { }\n    [System.Runtime.Versioning.SupportedOSPlatform(\"windows\")]\n    public override void Encrypt() { }\n    [System.Runtime.Versioning.SupportedOSPlatform(\"windows\")]\n    public object GetAccessControl() { }\n    [System.Runtime.Versioning.SupportedOSPlatform(\"windows\")]\n    public object GetAccessControl(System.IO.Abstractions.IFileSystemAclSupport.AccessControlSections includeSections) { }\n    public override void MoveTo(string destFileName) { }\n    public override void MoveTo(string destFileName, bool overwrite) { }\n    public override System.IO.Abstractions.FileSystemStream Open(System.IO.FileMode mode) { }\n    public override System.IO.Abstractions.FileSystemStream Open(System.IO.FileStreamOptions options) { }\n    public override System.IO.Abstractions.FileSystemStream Open(System.IO.FileMode mode, System.IO.FileAccess access) { }\n    public override System.IO.Abstractions.FileSystemStream Open(System.IO.FileMode mode, System.IO.FileAccess access, System.IO.FileShare share) { }\n    public override System.IO.Abstractions.FileSystemStream OpenRead() { }\n    public override System.IO.StreamReader OpenText() { }\n    public override System.IO.Abstractions.FileSystemStream OpenWrite() { }\n    public override void Refresh() { }\n    public override System.IO.Abstractions.IFileInfo Replace(string destinationFileName, string destinationBackupFileName) { }\n    public override System.IO.Abstractions.IFileInfo Replace(string destinationFileName, string destinationBackupFileName, bool ignoreMetadataErrors) { }\n    public override System.IO.Abstractions.IFileSystemInfo ResolveLinkTarget(bool returnFinalTarget) { }\n    [System.Runtime.Versioning.SupportedOSPlatform(\"windows\")]\n    public void SetAccessControl(object value) { }\n    public override string ToString() { }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing MockFileData Class in C#\nDESCRIPTION: Definition of the MockFileData class which represents file content and metadata in memory. This class provides storage for file contents, attributes, and timestamps, allowing tests to simulate file operations without accessing the actual file system.\nSOURCE: https://github.com/testableio/system.io.abstractions/blob/main/tests/TestableIO.System.IO.Abstractions.Api.Tests/Expected/TestableIO.System.IO.Abstractions.TestingHelpers_net6.0.txt#2025-04-22_snippet_16\n\nLANGUAGE: C#\nCODE:\n```\n[System.Serializable]\npublic class MockFileData\n{\n    public static readonly System.DateTimeOffset DefaultDateTimeOffset;\n    public static readonly System.Text.Encoding DefaultEncoding;\n    public MockFileData(System.IO.Abstractions.TestingHelpers.MockFileData template) { }\n    public MockFileData(byte[] contents) { }\n    public MockFileData(string textContents) { }\n    public MockFileData(string textContents, System.Text.Encoding encoding) { }\n    [System.Runtime.Versioning.SupportedOSPlatform(\"windows\")]\n    public System.Security.AccessControl.FileSecurity AccessControl { get; set; }\n    public System.IO.FileShare AllowedFileShare { get; set; }\n    public System.IO.FileAttributes Attributes { get; set; }\n    public byte[] Contents { get; set; }\n    public System.DateTimeOffset CreationTime { get; set; }\n    public System.IO.Abstractions.IFileVersionInfo FileVersionInfo { get; set; }\n    public bool IsDirectory { get; }\n    public System.DateTimeOffset LastAccessTime { get; set; }\n    public System.DateTimeOffset LastWriteTime { get; set; }\n    public string LinkTarget { get; set; }\n    public string TextContents { get; set; }\n    public static System.IO.Abstractions.TestingHelpers.MockFileData op_Implicit(string s) { }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing PathWrapper Class in System.IO.Abstractions\nDESCRIPTION: Concrete implementation of the PathBase abstract class that wraps System.IO.Path functionality. This class provides path-related operations while allowing for dependency injection and testing.\nSOURCE: https://github.com/testableio/system.io.abstractions/blob/main/tests/TestableIO.System.IO.Abstractions.Api.Tests/Expected/TestableIO.System.IO.Abstractions.Wrappers_netstandard2.1.txt#2025-04-22_snippet_26\n\nLANGUAGE: C#\nCODE:\n```\n[System.Serializable]\npublic class PathWrapper : System.IO.Abstractions.PathBase\n{\n    public PathWrapper(System.IO.Abstractions.IFileSystem fileSystem) { }\n    public override char AltDirectorySeparatorChar { get; }\n    public override char DirectorySeparatorChar { get; }\n    [System.Obsolete(\"Please use GetInvalidPathChars or GetInvalidFileNameChars instead.\")]\n    public override char[] InvalidPathChars { get; }\n    public override char PathSeparator { get; }\n    public override char VolumeSeparatorChar { get; }\n}\n```\n\n----------------------------------------\n\nTITLE: Mock File Data Accessor Interface Definition\nDESCRIPTION: Interface defining methods and properties for accessing mock file system data, including file, directory and drive operations\nSOURCE: https://github.com/testableio/system.io.abstractions/blob/main/tests/TestableIO.System.IO.Abstractions.Api.Tests/Expected/TestableIO.System.IO.Abstractions.TestingHelpers_net472.txt#2025-04-22_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\npublic interface IMockFileDataAccessor : System.IO.Abstractions.IFileSystem\n{\n    System.Collections.Generic.IEnumerable<string> AllDirectories { get; }\n    System.Collections.Generic.IEnumerable<string> AllDrives { get; }\n    System.Collections.Generic.IEnumerable<string> AllFiles { get; }\n    System.Collections.Generic.IEnumerable<string> AllPaths { get; }\n    System.IO.Abstractions.IFileSystem FileSystem { get; }\n    System.IO.Abstractions.TestingHelpers.PathVerifier PathVerifier { get; }\n    System.IO.Abstractions.TestingHelpers.StringOperations StringOperations { get; }\n    void AddDirectory(string path);\n    void AddDrive(string name, System.IO.Abstractions.TestingHelpers.MockDriveData mockDrive);\n    void AddFile(string path, System.IO.Abstractions.TestingHelpers.MockFileData mockFile, bool verifyAccess = true);\n    void AddFileFromEmbeddedResource(string path, System.Reflection.Assembly resourceAssembly, string embeddedResourcePath);\n    void AddFilesFromEmbeddedNamespace(string path, System.Reflection.Assembly resourceAssembly, string embeddedResourcePath);\n    System.IO.Abstractions.TestingHelpers.MockFileData AdjustTimes(System.IO.Abstractions.TestingHelpers.MockFileData fileData, System.IO.Abstractions.TestingHelpers.TimeAdjustments timeAdjustments);\n    bool FileExists(string path);\n    System.IO.Abstractions.TestingHelpers.MockDriveData GetDrive(string name);\n    System.IO.Abstractions.TestingHelpers.MockFileData GetFile(string path);\n    void MoveDirectory(string sourcePath, string destPath);\n    void RemoveFile(string path, bool verifyAccess = true);\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Abstract File Information with FileInfoBase in C#\nDESCRIPTION: Provides an abstract base class `FileInfoBase` implementing `IFileInfo` and inheriting from `FileSystemInfoBase`. It defines abstract properties (`Directory`, `DirectoryName`, `IsReadOnly`, `Length`) and methods (`AppendText`, `CopyTo`, `Create`, `Delete`, `MoveTo`, `Open*`, `Replace`) analogous to `System.IO.FileInfo`, facilitating testable file system abstractions. Includes an implicit conversion operator from `System.IO.FileInfo`.\nSOURCE: https://github.com/testableio/system.io.abstractions/blob/main/tests/TestableIO.System.IO.Abstractions.Api.Tests/Expected/TestableIO.System.IO.Abstractions.Wrappers_net472.txt#2025-04-22_snippet_12\n\nLANGUAGE: csharp\nCODE:\n```\n    [System.Serializable]\n    public abstract class FileInfoBase : System.IO.Abstractions.FileSystemInfoBase, System.IO.Abstractions.IFileInfo, System.IO.Abstractions.IFileSystemInfo\n    {\n        protected FileInfoBase(System.IO.Abstractions.IFileSystem fileSystem) { }\n        public abstract System.IO.Abstractions.IDirectoryInfo Directory { get; }\n        public abstract string DirectoryName { get; }\n        public abstract bool IsReadOnly { get; set; }\n        public abstract long Length { get; }\n        public abstract System.IO.StreamWriter AppendText();\n        public abstract System.IO.Abstractions.IFileInfo CopyTo(string destFileName);\n        public abstract System.IO.Abstractions.IFileInfo CopyTo(string destFileName, bool overwrite);\n        public abstract System.IO.Abstractions.FileSystemStream Create();\n        public abstract System.IO.StreamWriter CreateText();\n        public abstract void Decrypt();\n        public abstract void Encrypt();\n        public abstract void MoveTo(string destFileName);\n        public abstract System.IO.Abstractions.FileSystemStream Open(System.IO.FileMode mode);\n        public abstract System.IO.Abstractions.FileSystemStream Open(System.IO.FileMode mode, System.IO.FileAccess access);\n        public abstract System.IO.Abstractions.FileSystemStream Open(System.IO.FileMode mode, System.IO.FileAccess access, System.IO.FileShare share);\n        public abstract System.IO.Abstractions.FileSystemStream OpenRead();\n        public abstract System.IO.StreamReader OpenText();\n        public abstract System.IO.Abstractions.FileSystemStream OpenWrite();\n        public abstract System.IO.Abstractions.IFileInfo Replace(string destinationFileName, string destinationBackupFileName);\n        public abstract System.IO.Abstractions.IFileInfo Replace(string destinationFileName, string destinationBackupFileName, bool ignoreMetadataErrors);\n        public static System.IO.Abstractions.FileInfoBase op_Implicit(System.IO.FileInfo fileInfo) { }\n    }\n```\n\n----------------------------------------\n\nTITLE: Implementing FileSystem Class in C#\nDESCRIPTION: This class provides a concrete implementation of the IFileSystem interface. It serves as a facade for various file system operations, including directory, file, and drive operations.\nSOURCE: https://github.com/testableio/system.io.abstractions/blob/main/tests/TestableIO.System.IO.Abstractions.Api.Tests/Expected/TestableIO.System.IO.Abstractions.Wrappers_netstandard2.1.txt#2025-04-22_snippet_15\n\nLANGUAGE: C#\nCODE:\n```\n[System.Serializable]\npublic class FileSystem : System.IO.Abstractions.FileSystemBase\n{\n    public FileSystem() { }\n    public override System.IO.Abstractions.IDirectory Directory { get; }\n    public override System.IO.Abstractions.IDirectoryInfoFactory DirectoryInfo { get; }\n    public override System.IO.Abstractions.IDriveInfoFactory DriveInfo { get; }\n    public override System.IO.Abstractions.IFile File { get; }\n    public override System.IO.Abstractions.IFileInfoFactory FileInfo { get; }\n    public override System.IO.Abstractions.IFileStreamFactory FileStream { get; }\n    public override System.IO.Abstractions.IFileSystemWatcherFactory FileSystemWatcher { get; }\n    public override System.IO.Abstractions.IFileVersionInfoFactory FileVersionInfo { get; }\n    public override System.IO.Abstractions.IPath Path { get; }\n}\n```\n\n----------------------------------------\n\nTITLE: Simulating FileStream Functionality with MockFileStream using System.IO.Abstractions in C#\nDESCRIPTION: MockFileStream offers a mock implementation of file stream behavior supporting both synchronous and asynchronous read and write operations, flush, disposal, and file security for unit testing. It implements FileSystemStream and IFileSystemAclSupport interfaces, exposing key stream methods plus access control manipulation. Instantiated via file data accessor, path, file mode, access, and options, it enables robust simulation of stream operations in test suites.\nSOURCE: https://github.com/testableio/system.io.abstractions/blob/main/tests/TestableIO.System.IO.Abstractions.Api.Tests/Expected/TestableIO.System.IO.Abstractions.TestingHelpers_netstandard2.1.txt#2025-04-22_snippet_14\n\nLANGUAGE: csharp\nCODE:\n```\n[System.Serializable]\npublic class MockFileStream : System.IO.Abstractions.FileSystemStream, System.IO.Abstractions.IFileSystemAclSupport\n{\n    public MockFileStream(System.IO.Abstractions.TestingHelpers.IMockFileDataAccessor mockFileDataAccessor, string path, System.IO.FileMode mode, System.IO.FileAccess access = 3, System.IO.FileOptions options = 0) { }\n    public override bool CanRead { get; }\n    public override bool CanWrite { get; }\n    public static System.IO.Abstractions.FileSystemStream Null { get; }\n    protected override void Dispose(bool disposing) { }\n    public override void EndWrite(System.IAsyncResult asyncResult) { }\n    public override void Flush() { }\n    public override void Flush(bool flushToDisk) { }\n    public override System.Threading.Tasks.Task FlushAsync(System.Threading.CancellationToken cancellationToken) { }\n    public object GetAccessControl() { }\n    public object GetAccessControl(System.IO.Abstractions.IFileSystemAclSupport.AccessControlSections includeSections) { }\n    public override int Read(byte[] buffer, int offset, int count) { }\n    public void SetAccessControl(object value) { }\n    public override void SetLength(long value) { }\n    public override void Write(System.ReadOnlySpan<byte> buffer) { }\n    public override void Write(byte[] buffer, int offset, int count) { }\n    public override System.Threading.Tasks.ValueTask WriteAsync(System.ReadOnlyMemory<byte> buffer, System.Threading.CancellationToken cancellationToken = default) { }\n    public override System.Threading.Tasks.Task WriteAsync(byte[] buffer, int offset, int count, System.Threading.CancellationToken cancellationToken) { }\n    public override void WriteByte(byte value) { }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating MockFileStream Class in C#\nDESCRIPTION: Implementation of a mock file stream class that inherits from FileSystemStream and implements IFileSystemAclSupport. This class provides a way to simulate file operations in memory without accessing the file system.\nSOURCE: https://github.com/testableio/system.io.abstractions/blob/main/tests/TestableIO.System.IO.Abstractions.Api.Tests/Expected/TestableIO.System.IO.Abstractions.TestingHelpers_net9.0.txt#2025-04-22_snippet_15\n\nLANGUAGE: C#\nCODE:\n```\n[System.Serializable]\npublic class MockFileStream : System.IO.Abstractions.FileSystemStream, System.IO.Abstractions.IFileSystemAclSupport\n{\n    public MockFileStream(System.IO.Abstractions.TestingHelpers.IMockFileDataAccessor mockFileDataAccessor, string path, System.IO.FileMode mode, System.IO.FileAccess access = 3, System.IO.FileOptions options = 0) { }\n    public override bool CanRead { get; }\n    public override bool CanWrite { get; }\n    public static System.IO.Abstractions.FileSystemStream Null { get; }\n    protected override void Dispose(bool disposing) { }\n    public override void EndWrite(System.IAsyncResult asyncResult) { }\n    public override void Flush() { }\n    public override void Flush(bool flushToDisk) { }\n    public override System.Threading.Tasks.Task FlushAsync(System.Threading.CancellationToken cancellationToken) { }\n    [System.Runtime.Versioning.SupportedOSPlatform(\"windows\")]\n    public object GetAccessControl() { }\n    [System.Runtime.Versioning.SupportedOSPlatform(\"windows\")]\n    public object GetAccessControl(System.IO.Abstractions.IFileSystemAclSupport.AccessControlSections includeSections) { }\n    public override int Read(byte[] buffer, int offset, int count) { }\n    [System.Runtime.Versioning.SupportedOSPlatform(\"windows\")]\n    public void SetAccessControl(object value) { }\n    public override void SetLength(long value) { }\n    public override void Write(System.ReadOnlySpan<byte> buffer) { }\n    public override void Write(byte[] buffer, int offset, int count) { }\n    public override System.Threading.Tasks.ValueTask WriteAsync(System.ReadOnlyMemory<byte> buffer, System.Threading.CancellationToken cancellationToken = default) { }\n    public override System.Threading.Tasks.Task WriteAsync(byte[] buffer, int offset, int count, System.Threading.CancellationToken cancellationToken) { }\n    public override void WriteByte(byte value) { }\n}\n```\n\n----------------------------------------\n\nTITLE: Overriding Directory Enumeration and Operations with System.IO.Abstractions in C#\nDESCRIPTION: This snippet shows overridden methods for directory enumeration and manipulation within a mock directory info implementation using System.IO.Abstractions in C#. Dependencies include System.Collections.Generic, System.IO.Abstractions, and related search and options enums. Methods support various enumeration patterns, getting access control (Windows only), moving and refreshing directories, and resolving link targets. Parameters like searchPattern, enumerationOptions, and searchOption filter or control enumerations; outputs are enumerable or array types for directories/files. Methods allow customization for test scenarios and simulation of file system behaviors.\nSOURCE: https://github.com/testableio/system.io.abstractions/blob/main/tests/TestableIO.System.IO.Abstractions.Api.Tests/Expected/TestableIO.System.IO.Abstractions.TestingHelpers_net8.0.txt#2025-04-22_snippet_5\n\nLANGUAGE: C#\nCODE:\n```\npublic override System.Collections.Generic.IEnumerable<System.IO.Abstractions.IDirectoryInfo> EnumerateDirectories(string searchPattern, System.IO.SearchOption searchOption) { }\npublic override System.Collections.Generic.IEnumerable<System.IO.Abstractions.IFileSystemInfo> EnumerateFileSystemInfos() { }\npublic override System.Collections.Generic.IEnumerable<System.IO.Abstractions.IFileSystemInfo> EnumerateFileSystemInfos(string searchPattern) { }\npublic override System.Collections.Generic.IEnumerable<System.IO.Abstractions.IFileSystemInfo> EnumerateFileSystemInfos(string searchPattern, System.IO.EnumerationOptions enumerationOptions) { }\npublic override System.Collections.Generic.IEnumerable<System.IO.Abstractions.IFileSystemInfo> EnumerateFileSystemInfos(string searchPattern, System.IO.SearchOption searchOption) { }\npublic override System.Collections.Generic.IEnumerable<System.IO.Abstractions.IFileInfo> EnumerateFiles() { }\npublic override System.Collections.Generic.IEnumerable<System.IO.Abstractions.IFileInfo> EnumerateFiles(string searchPattern) { }\npublic override System.Collections.Generic.IEnumerable<System.IO.Abstractions.IFileInfo> EnumerateFiles(string searchPattern, System.IO.EnumerationOptions enumerationOptions) { }\npublic override System.Collections.Generic.IEnumerable<System.IO.Abstractions.IFileInfo> EnumerateFiles(string searchPattern, System.IO.SearchOption searchOption) { }\n[System.Runtime.Versioning.SupportedOSPlatform(\"windows\")]\npublic object GetAccessControl() { }\n[System.Runtime.Versioning.SupportedOSPlatform(\"windows\")]\npublic object GetAccessControl(System.IO.Abstractions.IFileSystemAclSupport.AccessControlSections includeSections) { }\npublic override System.IO.Abstractions.IDirectoryInfo[] GetDirectories() { }\npublic override System.IO.Abstractions.IDirectoryInfo[] GetDirectories(string searchPattern) { }\npublic override System.IO.Abstractions.IDirectoryInfo[] GetDirectories(string searchPattern, System.IO.EnumerationOptions enumerationOptions) { }\npublic override System.IO.Abstractions.IDirectoryInfo[] GetDirectories(string searchPattern, System.IO.SearchOption searchOption) { }\npublic override System.IO.Abstractions.IFileSystemInfo[] GetFileSystemInfos() { }\npublic override System.IO.Abstractions.IFileSystemInfo[] GetFileSystemInfos(string searchPattern) { }\npublic override System.IO.Abstractions.IFileSystemInfo[] GetFileSystemInfos(string searchPattern, System.IO.EnumerationOptions enumerationOptions) { }\npublic override System.IO.Abstractions.IFileSystemInfo[] GetFileSystemInfos(string searchPattern, System.IO.SearchOption searchOption) { }\npublic override System.IO.Abstractions.IFileInfo[] GetFiles() { }\npublic override System.IO.Abstractions.IFileInfo[] GetFiles(string searchPattern) { }\npublic override System.IO.Abstractions.IFileInfo[] GetFiles(string searchPattern, System.IO.EnumerationOptions enumerationOptions) { }\npublic override System.IO.Abstractions.IFileInfo[] GetFiles(string searchPattern, System.IO.SearchOption searchOption) { }\npublic override void MoveTo(string destDirName) { }\npublic override void Refresh() { }\npublic override System.IO.Abstractions.IFileSystemInfo ResolveLinkTarget(bool returnFinalTarget) { }\n[System.Runtime.Versioning.SupportedOSPlatform(\"windows\")]\npublic void SetAccessControl(object value) { }\npublic override string ToString() { }\n```\n\n----------------------------------------\n\nTITLE: File Operations Wrapper Implementation in C#\nDESCRIPTION: Concrete implementation of file system operations including file creation, modification, and attribute management with support for async operations.\nSOURCE: https://github.com/testableio/system.io.abstractions/blob/main/tests/TestableIO.System.IO.Abstractions.Api.Tests/Expected/TestableIO.System.IO.Abstractions.Wrappers_net8.0.txt#2025-04-22_snippet_20\n\nLANGUAGE: C#\nCODE:\n```\npublic class FileWrapper : System.IO.Abstractions.FileBase\n{\n    public FileWrapper(System.IO.Abstractions.IFileSystem fileSystem) { }\n    public override void AppendAllLines(string path, System.Collections.Generic.IEnumerable<string> contents) { }\n    public override void AppendAllText(string path, string contents) { }\n    // ... other file operations\n}\n```\n\n----------------------------------------\n\nTITLE: Defining the IMockFileDataAccessor Interface in C#\nDESCRIPTION: This interface defines the contract for accessing and manipulating mock file system data within the testing helpers. It extends the base `IFileSystem` interface and adds properties and methods specific to managing mock files, directories, and drives, such as retrieving all paths, adding/removing files/directories, and accessing underlying mock data structures.\nSOURCE: https://github.com/testableio/system.io.abstractions/blob/main/tests/TestableIO.System.IO.Abstractions.Api.Tests/Expected/TestableIO.System.IO.Abstractions.TestingHelpers_net9.0.txt#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nnamespace System.IO.Abstractions.TestingHelpers\n{\n    public interface IMockFileDataAccessor : System.IO.Abstractions.IFileSystem\n    {\n        System.Collections.Generic.IEnumerable<string> AllDirectories { get; }\n        System.Collections.Generic.IEnumerable<string> AllDrives { get; }\n        System.Collections.Generic.IEnumerable<string> AllFiles { get; }\n        System.Collections.Generic.IEnumerable<string> AllPaths { get; }\n        System.IO.Abstractions.IFileSystem FileSystem { get; }\n        System.IO.Abstractions.TestingHelpers.PathVerifier PathVerifier { get; }\n        System.IO.Abstractions.TestingHelpers.StringOperations StringOperations { get; }\n        void AddDirectory(string path);\n        void AddDrive(string name, System.IO.Abstractions.TestingHelpers.MockDriveData mockDrive);\n        void AddFile(string path, System.IO.Abstractions.TestingHelpers.MockFileData mockFile, bool verifyAccess = true);\n        void AddFileFromEmbeddedResource(string path, System.Reflection.Assembly resourceAssembly, string embeddedResourcePath);\n        void AddFilesFromEmbeddedNamespace(string path, System.Reflection.Assembly resourceAssembly, string embeddedResourcePath);\n        System.IO.Abstractions.TestingHelpers.MockFileData AdjustTimes(System.IO.Abstractions.TestingHelpers.MockFileData fileData, System.IO.Abstractions.TestingHelpers.TimeAdjustments timeAdjustments);\n        bool FileExists(string path);\n        System.IO.Abstractions.TestingHelpers.MockDriveData GetDrive(string name);\n        System.IO.Abstractions.TestingHelpers.MockFileData GetFile(string path);\n        void MoveDirectory(string sourcePath, string destPath);\n        void RemoveFile(string path, bool verifyAccess = true);\n    }\n```\n\n----------------------------------------\n\nTITLE: Defining Abstract FileInfoBase Class in C#\nDESCRIPTION: This abstract class provides a base implementation for file information operations. It includes methods for file manipulation, such as copying, moving, and opening files in various modes.\nSOURCE: https://github.com/testableio/system.io.abstractions/blob/main/tests/TestableIO.System.IO.Abstractions.Api.Tests/Expected/TestableIO.System.IO.Abstractions.Wrappers_netstandard2.1.txt#2025-04-22_snippet_12\n\nLANGUAGE: C#\nCODE:\n```\n[System.Serializable]\npublic abstract class FileInfoBase : System.IO.Abstractions.FileSystemInfoBase, System.IO.Abstractions.IFileInfo, System.IO.Abstractions.IFileSystemInfo\n{\n    protected FileInfoBase(System.IO.Abstractions.IFileSystem fileSystem) { }\n    public abstract System.IO.Abstractions.IDirectoryInfo Directory { get; }\n    public abstract string DirectoryName { get; }\n    public abstract bool IsReadOnly { get; set; }\n    public abstract long Length { get; }\n    public abstract System.IO.StreamWriter AppendText();\n    public abstract System.IO.Abstractions.IFileInfo CopyTo(string destFileName);\n    public abstract System.IO.Abstractions.IFileInfo CopyTo(string destFileName, bool overwrite);\n    public abstract System.IO.Abstractions.FileSystemStream Create();\n    public abstract System.IO.StreamWriter CreateText();\n    public abstract void Decrypt();\n    public abstract void Encrypt();\n    public abstract void MoveTo(string destFileName);\n    public abstract System.IO.Abstractions.FileSystemStream Open(System.IO.FileMode mode);\n    public abstract System.IO.Abstractions.FileSystemStream Open(System.IO.FileMode mode, System.IO.FileAccess access);\n    public abstract System.IO.Abstractions.FileSystemStream Open(System.IO.FileMode mode, System.IO.FileAccess access, System.IO.FileShare share);\n    public abstract System.IO.Abstractions.FileSystemStream OpenRead();\n    public abstract System.IO.StreamReader OpenText();\n    public abstract System.IO.Abstractions.FileSystemStream OpenWrite();\n    public abstract System.IO.Abstractions.IFileInfo Replace(string destinationFileName, string destinationBackupFileName);\n    public abstract System.IO.Abstractions.IFileInfo Replace(string destinationFileName, string destinationBackupFileName, bool ignoreMetadataErrors);\n    public static System.IO.Abstractions.FileInfoBase op_Implicit(System.IO.FileInfo fileInfo) { }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Mock DirectoryInfo Factory in C#\nDESCRIPTION: Defines a factory class `MockDirectoryInfoFactory` responsible for creating instances of mock directory information objects (`IDirectoryInfo`). It implements `IDirectoryInfoFactory` and requires an `IMockFileDataAccessor` for interacting with the mock file system state. It provides methods to create new mock directory info objects from a path or wrap existing `System.IO.DirectoryInfo` instances (though wrapping might be limited in a purely mock context).\nSOURCE: https://github.com/testableio/system.io.abstractions/blob/main/tests/TestableIO.System.IO.Abstractions.Api.Tests/Expected/TestableIO.System.IO.Abstractions.TestingHelpers_netstandard2.1.txt#2025-04-22_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\n    [System.Serializable]\n    public class MockDirectoryInfoFactory : System.IO.Abstractions.IDirectoryInfoFactory, System.IO.Abstractions.IFileSystemEntity\n    {\n        public MockDirectoryInfoFactory(System.IO.Abstractions.TestingHelpers.IMockFileDataAccessor mockFileSystem) { }\n        public System.IO.Abstractions.IFileSystem FileSystem { get; }\n        public System.IO.Abstractions.IDirectoryInfo New(string path) { }\n        public System.IO.Abstractions.IDirectoryInfo Wrap(System.IO.DirectoryInfo directoryInfo) { }\n    }\n\n```\n\n----------------------------------------\n\nTITLE: Defining Abstract FileInfoBase Class in C#\nDESCRIPTION: This snippet defines an abstract base class for file information. It includes abstract methods and properties for various file operations and attributes.\nSOURCE: https://github.com/testableio/system.io.abstractions/blob/main/tests/TestableIO.System.IO.Abstractions.Api.Tests/Expected/TestableIO.System.IO.Abstractions.Wrappers_net6.0.txt#2025-04-22_snippet_15\n\nLANGUAGE: C#\nCODE:\n```\n[System.Serializable]\npublic abstract class FileInfoBase : System.IO.Abstractions.FileSystemInfoBase, System.IO.Abstractions.IFileInfo, System.IO.Abstractions.IFileSystemInfo\n{\n    protected FileInfoBase(System.IO.Abstractions.IFileSystem fileSystem) { }\n    public abstract System.IO.Abstractions.IDirectoryInfo Directory { get; }\n    public abstract string DirectoryName { get; }\n    public abstract bool IsReadOnly { get; set; }\n    public abstract long Length { get; }\n    public abstract System.IO.StreamWriter AppendText();\n    public abstract System.IO.Abstractions.IFileInfo CopyTo(string destFileName);\n    public abstract System.IO.Abstractions.IFileInfo CopyTo(string destFileName, bool overwrite);\n    public abstract System.IO.Abstractions.FileSystemStream Create();\n    public abstract System.IO.StreamWriter CreateText();\n    public abstract void Decrypt();\n    public abstract void Encrypt();\n    public abstract void MoveTo(string destFileName);\n    public abstract void MoveTo(string destFileName, bool overwrite);\n    public abstract System.IO.Abstractions.FileSystemStream Open(System.IO.FileMode mode);\n    public abstract System.IO.Abstractions.FileSystemStream Open(System.IO.FileStreamOptions options);\n    public abstract System.IO.Abstractions.FileSystemStream Open(System.IO.FileMode mode, System.IO.FileAccess access);\n    public abstract System.IO.Abstractions.FileSystemStream Open(System.IO.FileMode mode, System.IO.FileAccess access, System.IO.FileShare share);\n    public abstract System.IO.Abstractions.FileSystemStream OpenRead();\n    public abstract System.IO.StreamReader OpenText();\n    public abstract System.IO.Abstractions.FileSystemStream OpenWrite();\n    public abstract System.IO.Abstractions.IFileInfo Replace(string destinationFileName, string destinationBackupFileName);\n    public abstract System.IO.Abstractions.IFileInfo Replace(string destinationFileName, string destinationBackupFileName, bool ignoreMetadataErrors);\n    public static System.IO.Abstractions.FileInfoBase op_Implicit(System.IO.FileInfo fileInfo) { }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining FileInfoBase Abstract Class in C#\nDESCRIPTION: Abstract class FileInfoBase defines methods for file operations such as copying, moving, opening, and replacing files. It includes properties for file attributes and timestamps.\nSOURCE: https://github.com/testableio/system.io.abstractions/blob/main/tests/TestableIO.System.IO.Abstractions.Api.Tests/Expected/TestableIO.System.IO.Abstractions.Wrappers_net9.0.txt#2025-04-22_snippet_15\n\nLANGUAGE: C#\nCODE:\n```\npublic abstract class FileInfoBase : System.IO.Abstractions.FileSystemInfoBase, System.IO.Abstractions.IFileInfo\n{\n    public abstract System.IO.Abstractions.IDirectoryInfo Directory { get; }\n    public abstract string DirectoryName { get; }\n    public abstract bool IsReadOnly { get; set; }\n    public abstract long Length { get; }\n    public abstract System.IO.StreamWriter AppendText();\n    public abstract System.IO.Abstractions.IFileInfo CopyTo(string destFileName);\n    public abstract System.IO.Abstractions.IFileInfo CopyTo(string destFileName, bool overwrite);\n    public abstract System.IO.Abstractions.FileSystemStream Create();\n    public abstract System.IO.StreamWriter CreateText();\n    public abstract void Decrypt();\n    public abstract void Encrypt();\n    public abstract void MoveTo(string destFileName);\n    public abstract void MoveTo(string destFileName, bool overwrite);\n    public abstract System.IO.Abstractions.FileSystemStream Open(System.IO.FileMode mode);\n    public abstract System.IO.Abstractions.FileSystemStream Open(System.IO.FileStreamOptions options);\n    public abstract System.IO.Abstractions.FileSystemStream Open(System.IO.FileMode mode, System.IO.FileAccess access);\n    public abstract System.IO.Abstractions.FileSystemStream Open(System.IO.FileMode mode, System.IO.FileAccess access, System.IO.FileShare share);\n    public abstract System.IO.Abstractions.FileSystemStream OpenRead();\n    public abstract System.IO.StreamReader OpenText();\n    public abstract System.IO.Abstractions.FileSystemStream OpenWrite();\n    public abstract System.IO.Abstractions.IFileInfo Replace(string destinationFileName, string destinationBackupFileName);\n    public abstract System.IO.Abstractions.IFileInfo Replace(string destinationFileName, string destinationBackupFileName, bool ignoreMetadataErrors);\n    public static System.IO.Abstractions.FileInfoBase op_Implicit(System.IO.FileInfo fileInfo) { }\n}\n```\n\n----------------------------------------\n\nTITLE: DriveInfoBase Abstract Class Definition in C#\nDESCRIPTION: An abstract base class for drive information operations that implements IDriveInfo interface. It provides properties for accessing drive information like available space, format, and type, while allowing for dependency injection of the file system.\nSOURCE: https://github.com/testableio/system.io.abstractions/blob/main/tests/TestableIO.System.IO.Abstractions.Api.Tests/Expected/TestableIO.System.IO.Abstractions.Wrappers_net9.0.txt#2025-04-22_snippet_9\n\nLANGUAGE: C#\nCODE:\n```\n[System.Serializable]\npublic abstract class DriveInfoBase : System.IO.Abstractions.IDriveInfo, System.IO.Abstractions.IFileSystemEntity\n{\n    protected DriveInfoBase(System.IO.Abstractions.IFileSystem fileSystem) { }\n    public abstract long AvailableFreeSpace { get; }\n    public abstract string DriveFormat { get; }\n    public abstract System.IO.DriveType DriveType { get; }\n    public System.IO.Abstractions.IFileSystem FileSystem { get; }\n    public abstract bool IsReady { get; }\n    public abstract string Name { get; }\n    public abstract System.IO.Abstractions.IDirectoryInfo RootDirectory { get; }\n    public abstract long TotalFreeSpace { get; }\n    public abstract long TotalSize { get; }\n    public abstract string VolumeLabel { get; set; }\n    public static System.IO.Abstractions.DriveInfoBase op_Implicit(System.IO.DriveInfo driveInfo) { }\n}\n```\n\n----------------------------------------\n\nTITLE: Mocking File Operations and Manipulations - System.IO.Abstractions - C#\nDESCRIPTION: This code snippet represents the implementation of the MockFile class, which inherits from FileBase and overrides a comprehensive set of file operation methods for reading, writing, appending, copying, creating, deleting, encrypting, and inspecting file attributes and metadata. It is constructed with an IMockFileDataAccessor and supports both synchronous and asynchronous I/O as well as encoding options. The methods accept parameters like file paths, content, buffer sizes, and cancellation tokens, enabling a highly flexible and testable file abstraction in test environments.\nSOURCE: https://github.com/testableio/system.io.abstractions/blob/main/tests/TestableIO.System.IO.Abstractions.Api.Tests/Expected/TestableIO.System.IO.Abstractions.TestingHelpers_net9.0.txt#2025-04-22_snippet_10\n\nLANGUAGE: csharp\nCODE:\n```\n[System.Serializable]\npublic class MockFile : System.IO.Abstractions.FileBase\n{\n    public MockFile(System.IO.Abstractions.TestingHelpers.IMockFileDataAccessor mockFileDataAccessor) { }\n    public override void AppendAllBytes(string path, System.ReadOnlySpan<byte> bytes) { }\n    public override void AppendAllBytes(string path, byte[] bytes) { }\n    public override System.Threading.Tasks.Task AppendAllBytesAsync(string path, System.ReadOnlyMemory<byte> bytes, System.Threading.CancellationToken cancellationToken = default) { }\n    public override System.Threading.Tasks.Task AppendAllBytesAsync(string path, byte[] bytes, System.Threading.CancellationToken cancellationToken = default) { }\n    public override void AppendAllLines(string path, System.Collections.Generic.IEnumerable<string> contents) { }\n    public override void AppendAllLines(string path, System.Collections.Generic.IEnumerable<string> contents, System.Text.Encoding encoding) { }\n    public override System.Threading.Tasks.Task AppendAllLinesAsync(string path, System.Collections.Generic.IEnumerable<string> contents, System.Threading.CancellationToken cancellationToken = default) { }\n    public override System.Threading.Tasks.Task AppendAllLinesAsync(string path, System.Collections.Generic.IEnumerable<string> contents, System.Text.Encoding encoding, System.Threading.CancellationToken cancellationToken = default) { }\n    public override void AppendAllText(string path, System.ReadOnlySpan<char> contents) { }\n    public override void AppendAllText(string path, string contents) { }\n    public override void AppendAllText(string path, System.ReadOnlySpan<char> contents, System.Text.Encoding encoding) { }\n    public override void AppendAllText(string path, string contents, System.Text.Encoding encoding) { }\n    public override System.Threading.Tasks.Task AppendAllTextAsync(string path, System.ReadOnlyMemory<char> contents, System.Threading.CancellationToken cancellationToken = default) { }\n    public override System.Threading.Tasks.Task AppendAllTextAsync(string path, string contents, System.Threading.CancellationToken cancellationToken = default) { }\n    public override System.Threading.Tasks.Task AppendAllTextAsync(string path, System.ReadOnlyMemory<char> contents, System.Text.Encoding encoding, System.Threading.CancellationToken cancellationToken = default) { }\n    public override System.Threading.Tasks.Task AppendAllTextAsync(string path, string contents, System.Text.Encoding encoding, System.Threading.CancellationToken cancellationToken = default) { }\n    public override System.IO.StreamWriter AppendText(string path) { }\n    public override void Copy(string sourceFileName, string destFileName) { }\n    public override void Copy(string sourceFileName, string destFileName, bool overwrite) { }\n    public override System.IO.Abstractions.FileSystemStream Create(string path) { }\n    public override System.IO.Abstractions.FileSystemStream Create(string path, int bufferSize) { }\n    public override System.IO.Abstractions.FileSystemStream Create(string path, int bufferSize, System.IO.FileOptions options) { }\n    public override System.IO.Abstractions.IFileSystemInfo CreateSymbolicLink(string path, string pathToTarget) { }\n    public override System.IO.StreamWriter CreateText(string path) { }\n    public override void Decrypt(string path) { }\n    public override void Delete(string path) { }\n    public override void Encrypt(string path) { }\n    public override bool Exists(string path) { }\n    public override System.IO.FileAttributes GetAttributes(Microsoft.Win32.SafeHandles.SafeFileHandle fileHandle) { }\n    public override System.IO.FileAttributes GetAttributes(string path) { }\n    public override System.DateTime GetCreationTime(Microsoft.Win32.SafeHandles.SafeFileHandle fileHandle) { }\n\n```\n\n----------------------------------------\n\nTITLE: Implementing FileSystemWatcherWrapper Class in C#\nDESCRIPTION: Defines a concrete class that wraps System.IO.FileSystemWatcher and provides implementation for the abstract methods defined in FileSystemWatcherBase. It includes constructors for various initialization scenarios and overrides for all abstract properties and methods.\nSOURCE: https://github.com/testableio/system.io.abstractions/blob/main/tests/TestableIO.System.IO.Abstractions.Api.Tests/Expected/TestableIO.System.IO.Abstractions.Wrappers_net9.0.txt#2025-04-22_snippet_24\n\nLANGUAGE: C#\nCODE:\n```\n[System.Serializable]\npublic class FileSystemWatcherWrapper : System.IO.Abstractions.FileSystemWatcherBase\n{\n    public FileSystemWatcherWrapper(System.IO.Abstractions.IFileSystem fileSystem) { }\n    public FileSystemWatcherWrapper(System.IO.Abstractions.IFileSystem fileSystem, System.IO.FileSystemWatcher watcher) { }\n    public FileSystemWatcherWrapper(System.IO.Abstractions.IFileSystem fileSystem, string path) { }\n    public FileSystemWatcherWrapper(System.IO.Abstractions.IFileSystem fileSystem, string path, string filter) { }\n    public override System.ComponentModel.IContainer Container { get; }\n    public override bool EnableRaisingEvents { get; set; }\n    public override System.IO.Abstractions.IFileSystem FileSystem { get; }\n    public override string Filter { get; set; }\n    public override System.Collections.ObjectModel.Collection<string> Filters { get; }\n    public override bool IncludeSubdirectories { get; set; }\n    public override int InternalBufferSize { get; set; }\n    public override System.IO.NotifyFilters NotifyFilter { get; set; }\n    public override string Path { get; set; }\n    public override System.ComponentModel.ISite Site { get; set; }\n    public override System.ComponentModel.ISynchronizeInvoke SynchronizingObject { get; set; }\n    public override void BeginInit() { }\n    public override void Dispose(bool disposing) { }\n    public override void EndInit() { }\n    public override System.IO.Abstractions.IWaitForChangedResult WaitForChanged(System.IO.WatcherChangeTypes changeType) { }\n    public override System.IO.Abstractions.IWaitForChangedResult WaitForChanged(System.IO.WatcherChangeTypes changeType, System.TimeSpan timeout) { }\n    public override System.IO.Abstractions.IWaitForChangedResult WaitForChanged(System.IO.WatcherChangeTypes changeType, int timeout) { }\n}\n```\n\n----------------------------------------\n\nTITLE: PathBase Abstract Class Definition in C#\nDESCRIPTION: Abstract base class implementing the IPath interface that serves as the foundation for path manipulation operations. It defines properties for path separators and methods for path manipulation, combining, and validation.\nSOURCE: https://github.com/testableio/system.io.abstractions/blob/main/tests/TestableIO.System.IO.Abstractions.Api.Tests/Expected/TestableIO.System.IO.Abstractions.Wrappers_net9.0.txt#2025-04-22_snippet_30\n\nLANGUAGE: C#\nCODE:\n```\n[System.Serializable]\npublic abstract class PathBase : System.IO.Abstractions.IFileSystemEntity, System.IO.Abstractions.IPath\n{\n    protected PathBase(System.IO.Abstractions.IFileSystem fileSystem) { }\n    public abstract char AltDirectorySeparatorChar { get; }\n    public abstract char DirectorySeparatorChar { get; }\n    public System.IO.Abstractions.IFileSystem FileSystem { get; }\n    [System.Obsolete(\"Please use GetInvalidPathChars or GetInvalidFileNameChars instead.\")]\n    public abstract char[] InvalidPathChars { get; }\n    public abstract char PathSeparator { get; }\n    public abstract char VolumeSeparatorChar { get; }\n    public abstract string ChangeExtension(string path, string extension);\n    public abstract string Combine([System.Runtime.CompilerServices.ScopedRef] System.ReadOnlySpan<string> paths);\n    public abstract string Combine(params string[] paths);\n    public abstract string Combine(string path1, string path2);\n    public abstract string Combine(string path1, string path2, string path3);\n    public abstract string Combine(string path1, string path2, string path3, string path4);\n    public abstract bool EndsInDirectorySeparator(System.ReadOnlySpan<char> path);\n    public abstract bool EndsInDirectorySeparator(string path);\n    public abstract bool Exists(string path);\n    public abstract System.ReadOnlySpan<char> GetDirectoryName(System.ReadOnlySpan<char> path);\n    public abstract string GetDirectoryName(string path);\n    public abstract System.ReadOnlySpan<char> GetExtension(System.ReadOnlySpan<char> path);\n    public abstract string GetExtension(string path);\n    public abstract System.ReadOnlySpan<char> GetFileName(System.ReadOnlySpan<char> path);\n    public abstract string GetFileName(string path);\n    public abstract System.ReadOnlySpan<char> GetFileNameWithoutExtension(System.ReadOnlySpan<char> path);\n    public abstract string GetFileNameWithoutExtension(string path);\n    public abstract string GetFullPath(string path);\n    public abstract string GetFullPath(string path, string basePath);\n    public abstract char[] GetInvalidFileNameChars();\n    public abstract char[] GetInvalidPathChars();\n    public abstract System.ReadOnlySpan<char> GetPathRoot(System.ReadOnlySpan<char> path);\n    public abstract string GetPathRoot(string path);\n    public abstract string GetRandomFileName();\n    public abstract string GetRelativePath(string relativeTo, string path);\n    public abstract string GetTempFileName();\n    public abstract string GetTempPath();\n    public abstract bool HasExtension(System.ReadOnlySpan<char> path);\n    public abstract bool HasExtension(string path);\n    public abstract bool IsPathFullyQualified(System.ReadOnlySpan<char> path);\n    public abstract bool IsPathFullyQualified(string path);\n    public abstract bool IsPathRooted(System.ReadOnlySpan<char> path);\n    public abstract bool IsPathRooted(string path);\n    public abstract string Join([System.Runtime.CompilerServices.ScopedRef] System.ReadOnlySpan<string> paths);\n    public abstract string Join(params string[] paths);\n    public abstract string Join(System.ReadOnlySpan<char> path1, System.ReadOnlySpan<char> path2);\n    public abstract string Join(string path1, string path2);\n    public abstract string Join(System.ReadOnlySpan<char> path1, System.ReadOnlySpan<char> path2, System.ReadOnlySpan<char> path3);\n    public abstract string Join(string path1, string path2, string path3);\n    public abstract string Join(System.ReadOnlySpan<char> path1, System.ReadOnlySpan<char> path2, System.ReadOnlySpan<char> path3, System.ReadOnlySpan<char> path4);\n    public abstract string Join(string path1, string path2, string path3, string path4);\n    public abstract System.ReadOnlySpan<char> TrimEndingDirectorySeparator(System.ReadOnlySpan<char> path);\n    public abstract string TrimEndingDirectorySeparator(string path);\n    public abstract bool TryJoin(System.ReadOnlySpan<char> path1, System.ReadOnlySpan<char> path2, System.Span<char> destination, out int charsWritten);\n    public abstract bool TryJoin(System.ReadOnlySpan<char> path1, System.ReadOnlySpan<char> path2, System.ReadOnlySpan<char> path3, System.Span<char> destination, out int charsWritten);\n}\n```\n\n----------------------------------------\n\nTITLE: Defining IFileSystem Property and File Operation Methods in C#\nDESCRIPTION: Abstract interface methods for file operations including reading, writing, and manipulating files. These methods mirror the System.IO.File class but are abstracted to enable testing and dependency injection.\nSOURCE: https://github.com/testableio/system.io.abstractions/blob/main/tests/TestableIO.System.IO.Abstractions.Api.Tests/Expected/TestableIO.System.IO.Abstractions.Wrappers_netstandard2.0.txt#2025-04-22_snippet_10\n\nLANGUAGE: C#\nCODE:\n```\npublic System.IO.Abstractions.IFileSystem FileSystem { get; }\npublic abstract void AppendAllLines(string path, System.Collections.Generic.IEnumerable<string> contents);\npublic abstract void AppendAllLines(string path, System.Collections.Generic.IEnumerable<string> contents, System.Text.Encoding encoding);\npublic abstract void AppendAllText(string path, string contents);\npublic abstract void AppendAllText(string path, string contents, System.Text.Encoding encoding);\npublic abstract System.IO.StreamWriter AppendText(string path);\npublic abstract void Copy(string sourceFileName, string destFileName);\npublic abstract void Copy(string sourceFileName, string destFileName, bool overwrite);\npublic abstract System.IO.Abstractions.FileSystemStream Create(string path);\npublic abstract System.IO.Abstractions.FileSystemStream Create(string path, int bufferSize);\npublic abstract System.IO.Abstractions.FileSystemStream Create(string path, int bufferSize, System.IO.FileOptions options);\npublic abstract System.IO.StreamWriter CreateText(string path);\npublic abstract void Decrypt(string path);\npublic abstract void Delete(string path);\npublic abstract void Encrypt(string path);\npublic abstract bool Exists(string path);\npublic abstract System.IO.FileAttributes GetAttributes(string path);\npublic abstract System.DateTime GetCreationTime(string path);\npublic abstract System.DateTime GetCreationTimeUtc(string path);\npublic abstract System.DateTime GetLastAccessTime(string path);\npublic abstract System.DateTime GetLastAccessTimeUtc(string path);\npublic abstract System.DateTime GetLastWriteTime(string path);\npublic abstract System.DateTime GetLastWriteTimeUtc(string path);\npublic abstract void Move(string sourceFileName, string destFileName);\npublic abstract System.IO.Abstractions.FileSystemStream Open(string path, System.IO.FileMode mode);\npublic abstract System.IO.Abstractions.FileSystemStream Open(string path, System.IO.FileMode mode, System.IO.FileAccess access);\npublic abstract System.IO.Abstractions.FileSystemStream Open(string path, System.IO.FileMode mode, System.IO.FileAccess access, System.IO.FileShare share);\npublic abstract System.IO.Abstractions.FileSystemStream OpenRead(string path);\npublic abstract System.IO.StreamReader OpenText(string path);\npublic abstract System.IO.Abstractions.FileSystemStream OpenWrite(string path);\npublic abstract byte[] ReadAllBytes(string path);\npublic abstract string[] ReadAllLines(string path);\npublic abstract string[] ReadAllLines(string path, System.Text.Encoding encoding);\npublic abstract string ReadAllText(string path);\npublic abstract string ReadAllText(string path, System.Text.Encoding encoding);\npublic abstract System.Collections.Generic.IEnumerable<string> ReadLines(string path);\npublic abstract System.Collections.Generic.IEnumerable<string> ReadLines(string path, System.Text.Encoding encoding);\npublic abstract void Replace(string sourceFileName, string destinationFileName, string destinationBackupFileName);\npublic abstract void Replace(string sourceFileName, string destinationFileName, string destinationBackupFileName, bool ignoreMetadataErrors);\npublic abstract void SetAttributes(string path, System.IO.FileAttributes fileAttributes);\npublic abstract void SetCreationTime(string path, System.DateTime creationTime);\npublic abstract void SetCreationTimeUtc(string path, System.DateTime creationTimeUtc);\npublic abstract void SetLastAccessTime(string path, System.DateTime lastAccessTime);\npublic abstract void SetLastAccessTimeUtc(string path, System.DateTime lastAccessTimeUtc);\npublic abstract void SetLastWriteTime(string path, System.DateTime lastWriteTime);\npublic abstract void SetLastWriteTimeUtc(string path, System.DateTime lastWriteTimeUtc);\npublic abstract void WriteAllBytes(string path, byte[] bytes);\npublic abstract void WriteAllLines(string path, System.Collections.Generic.IEnumerable<string> contents);\npublic abstract void WriteAllLines(string path, string[] contents);\npublic abstract void WriteAllLines(string path, System.Collections.Generic.IEnumerable<string> contents, System.Text.Encoding encoding);\npublic abstract void WriteAllLines(string path, string[] contents, System.Text.Encoding encoding);\npublic abstract void WriteAllText(string path, string contents);\npublic abstract void WriteAllText(string path, string contents, System.Text.Encoding encoding);\n```\n\n----------------------------------------\n\nTITLE: Defining FileSystemInfoBase Abstract Class in C#\nDESCRIPTION: Abstract class FileSystemInfoBase implements IFileSystemInfo interface and provides a base for file system information objects. It includes properties for file attributes, timestamps, and methods for file operations.\nSOURCE: https://github.com/testableio/system.io.abstractions/blob/main/tests/TestableIO.System.IO.Abstractions.Api.Tests/Expected/TestableIO.System.IO.Abstractions.Wrappers_net9.0.txt#2025-04-22_snippet_20\n\nLANGUAGE: C#\nCODE:\n```\n[System.Serializable]\npublic abstract class FileSystemInfoBase : System.IO.Abstractions.IFileSystemInfo\n{\n    protected FileSystemInfoBase(System.IO.Abstractions.IFileSystem fileSystem) { }\n    public abstract System.IO.FileAttributes Attributes { get; set; }\n    public abstract System.DateTime CreationTime { get; set; }\n    public abstract System.DateTime CreationTimeUtc { get; set; }\n    public abstract bool Exists { get; }\n    public abstract string Extension { get; }\n    public System.IO.Abstractions.IFileSystem FileSystem { get; }\n    public abstract string FullName { get; }\n    public abstract System.DateTime LastAccessTime { get; set; }\n    public abstract System.DateTime LastAccessTimeUtc { get; set; }\n    public abstract System.DateTime LastWriteTime { get; set; }\n    public abstract System.DateTime LastWriteTimeUtc { get; set; }\n    public abstract string LinkTarget { get; }\n    public abstract string Name { get; }\n    [set: System.Runtime.Versioning.UnsupportedOSPlatform(\"windows\")]\n    public System.IO.UnixFileMode UnixFileMode { get; set; }\n    public abstract void CreateAsSymbolicLink(string pathToTarget);\n    public abstract void Delete();\n    public abstract void Refresh();\n    public abstract System.IO.Abstractions.IFileSystemInfo ResolveLinkTarget(bool returnFinalTarget);\n}\n```\n\n----------------------------------------\n\nTITLE: Defining FileSystemInfoBase Abstract Class in C#\nDESCRIPTION: Abstract base class for file system information objects. It declares properties and methods for accessing and manipulating file and directory metadata.\nSOURCE: https://github.com/testableio/system.io.abstractions/blob/main/tests/TestableIO.System.IO.Abstractions.Api.Tests/Expected/TestableIO.System.IO.Abstractions.Wrappers_net6.0.txt#2025-04-22_snippet_20\n\nLANGUAGE: C#\nCODE:\n```\n[System.Serializable]\npublic abstract class FileSystemInfoBase : System.IO.Abstractions.IFileSystemInfo\n{\n    protected FileSystemInfoBase(System.IO.Abstractions.IFileSystem fileSystem) { }\n    public abstract System.IO.FileAttributes Attributes { get; set; }\n    public abstract System.DateTime CreationTime { get; set; }\n    public abstract System.DateTime CreationTimeUtc { get; set; }\n    public abstract bool Exists { get; }\n    public abstract string Extension { get; }\n    public System.IO.Abstractions.IFileSystem FileSystem { get; }\n    public abstract string FullName { get; }\n    public abstract System.DateTime LastAccessTime { get; set; }\n    public abstract System.DateTime LastAccessTimeUtc { get; set; }\n    public abstract System.DateTime LastWriteTime { get; set; }\n    public abstract System.DateTime LastWriteTimeUtc { get; set; }\n    public abstract string LinkTarget { get; }\n    public abstract string Name { get; }\n    public abstract void CreateAsSymbolicLink(string pathToTarget);\n    public abstract void Delete();\n    public abstract void Refresh();\n    public abstract System.IO.Abstractions.IFileSystemInfo ResolveLinkTarget(bool returnFinalTarget);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing FileSystemInfoBase Abstract Class in C#\nDESCRIPTION: Abstract base class that implements the IFileSystemInfo interface. Provides common functionality for both FileInfo and DirectoryInfo with properties for file attributes and timestamps.\nSOURCE: https://github.com/testableio/system.io.abstractions/blob/main/tests/TestableIO.System.IO.Abstractions.Api.Tests/Expected/TestableIO.System.IO.Abstractions.Wrappers_netstandard2.0.txt#2025-04-22_snippet_17\n\nLANGUAGE: C#\nCODE:\n```\n[System.Serializable]\npublic abstract class FileSystemInfoBase : System.IO.Abstractions.IFileSystemInfo\n{\n    protected FileSystemInfoBase(System.IO.Abstractions.IFileSystem fileSystem) { }\n    public abstract System.IO.FileAttributes Attributes { get; set; }\n    public abstract System.DateTime CreationTime { get; set; }\n    public abstract System.DateTime CreationTimeUtc { get; set; }\n    public abstract bool Exists { get; }\n    public abstract string Extension { get; }\n    public System.IO.Abstractions.IFileSystem FileSystem { get; }\n    public abstract string FullName { get; }\n    public abstract System.DateTime LastAccessTime { get; set; }\n    public abstract System.DateTime LastAccessTimeUtc { get; set; }\n    public abstract System.DateTime LastWriteTime { get; set; }\n    public abstract System.DateTime LastWriteTimeUtc { get; set; }\n    public abstract string Name { get; }\n    public abstract void Delete();\n    public abstract void Refresh();\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing FileVersionInfoWrapper Class in C#\nDESCRIPTION: A concrete implementation of FileVersionInfoBase that wraps System.Diagnostics.FileVersionInfo. It provides access to file version information through the abstraction layer.\nSOURCE: https://github.com/testableio/system.io.abstractions/blob/main/tests/TestableIO.System.IO.Abstractions.Api.Tests/Expected/TestableIO.System.IO.Abstractions.Wrappers_netstandard2.1.txt#2025-04-22_snippet_22\n\nLANGUAGE: C#\nCODE:\n```\n[System.Serializable]\npublic class FileVersionInfoWrapper : System.IO.Abstractions.FileVersionInfoBase\n{\n    public FileVersionInfoWrapper(System.Diagnostics.FileVersionInfo fileVersionInfo) { }\n    public override string Comments { get; }\n    public override string CompanyName { get; }\n    public override int FileBuildPart { get; }\n    public override string FileDescription { get; }\n    public override int FileMajorPart { get; }\n    public override int FileMinorPart { get; }\n    public override string FileName { get; }\n    public override int FilePrivatePart { get; }\n    public override string FileVersion { get; }\n    public override string InternalName { get; }\n    public override bool IsDebug { get; }\n    public override bool IsPatched { get; }\n    public override bool IsPreRelease { get; }\n    public override bool IsPrivateBuild { get; }\n    public override bool IsSpecialBuild { get; }\n    public override string Language { get; }\n    public override string LegalCopyright { get; }\n    public override string LegalTrademarks { get; }\n    public override string OriginalFilename { get; }\n    public override string PrivateBuild { get; }\n    public override int ProductBuildPart { get; }\n    public override int ProductMajorPart { get; }\n    public override int ProductMinorPart { get; }\n    public override string ProductName { get; }\n    public override int ProductPrivatePart { get; }\n    public override string ProductVersion { get; }\n    public override string SpecialBuild { get; }\n    public override string ToString() { }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing FileVersionInfoBase Abstract Class in C#\nDESCRIPTION: Defines an abstract class that provides the base functionality for file version information. It includes abstract properties for accessing various aspects of file version information and implements the IFileVersionInfo interface.\nSOURCE: https://github.com/testableio/system.io.abstractions/blob/main/tests/TestableIO.System.IO.Abstractions.Api.Tests/Expected/TestableIO.System.IO.Abstractions.Wrappers_net9.0.txt#2025-04-22_snippet_25\n\nLANGUAGE: C#\nCODE:\n```\n[System.Serializable]\npublic abstract class FileVersionInfoBase : System.IO.Abstractions.IFileVersionInfo\n{\n    protected FileVersionInfoBase() { }\n    public abstract string Comments { get; }\n    public abstract string CompanyName { get; }\n    public abstract int FileBuildPart { get; }\n    public abstract string FileDescription { get; }\n    public abstract int FileMajorPart { get; }\n    public abstract int FileMinorPart { get; }\n    public abstract string FileName { get; }\n    public abstract int FilePrivatePart { get; }\n    public abstract string FileVersion { get; }\n    public abstract string InternalName { get; }\n    public abstract bool IsDebug { get; }\n    public abstract bool IsPatched { get; }\n    public abstract bool IsPreRelease { get; }\n    public abstract bool IsPrivateBuild { get; }\n    public abstract bool IsSpecialBuild { get; }\n    public abstract string Language { get; }\n    public abstract string LegalCopyright { get; }\n    public abstract string LegalTrademarks { get; }\n    public abstract string OriginalFilename { get; }\n    public abstract string PrivateBuild { get; }\n    public abstract int ProductBuildPart { get; }\n    public abstract int ProductMajorPart { get; }\n    public abstract int ProductMinorPart { get; }\n    public abstract string ProductName { get; }\n    public abstract int ProductPrivatePart { get; }\n    public abstract string ProductVersion { get; }\n    public abstract string SpecialBuild { get; }\n    public abstract string ToString();\n    public static System.IO.Abstractions.FileVersionInfoBase op_Implicit(System.Diagnostics.FileVersionInfo fileVersionInfo) { }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Abstract Base Class for Directory Operations in C#\nDESCRIPTION: Defines the `DirectoryBase` abstract class within the System.IO.Abstractions namespace, implementing `IDirectory` and `IFileSystemEntity`. It serves as a base for concrete directory implementations, providing common properties like `FileSystem` and defining abstract methods for core directory operations such as creating, deleting, enumerating files/directories, getting/setting metadata (creation/access/write times), managing the current directory, resolving links, and creating temporary subdirectories. It requires an `IFileSystem` instance in its constructor.\nSOURCE: https://github.com/testableio/system.io.abstractions/blob/main/tests/TestableIO.System.IO.Abstractions.Api.Tests/Expected/TestableIO.System.IO.Abstractions.Wrappers_net8.0.txt#2025-04-22_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nnamespace System.IO.Abstractions\n{\n    // ... DirectoryAclExtensions\n    [System.Serializable]\n    public abstract class DirectoryBase : System.IO.Abstractions.IDirectory, System.IO.Abstractions.IFileSystemEntity\n    {\n        protected DirectoryBase(System.IO.Abstractions.IFileSystem fileSystem) { }\n        public System.IO.Abstractions.IFileSystem FileSystem { get; }\n        public abstract System.IO.Abstractions.IDirectoryInfo CreateDirectory(string path);\n        public abstract System.IO.Abstractions.IDirectoryInfo CreateDirectory(string path, System.IO.UnixFileMode unixCreateMode);\n        public abstract System.IO.Abstractions.IFileSystemInfo CreateSymbolicLink(string path, string pathToTarget);\n        public abstract System.IO.Abstractions.IDirectoryInfo CreateTempSubdirectory(string prefix = null);\n        public abstract void Delete(string path);\n        public abstract void Delete(string path, bool recursive);\n        public abstract System.Collections.Generic.IEnumerable<string> EnumerateDirectories(string path);\n        public abstract System.Collections.Generic.IEnumerable<string> EnumerateDirectories(string path, string searchPattern);\n        public abstract System.Collections.Generic.IEnumerable<string> EnumerateDirectories(string path, string searchPattern, System.IO.EnumerationOptions enumerationOptions);\n        public abstract System.Collections.Generic.IEnumerable<string> EnumerateDirectories(string path, string searchPattern, System.IO.SearchOption searchOption);\n        public abstract System.Collections.Generic.IEnumerable<string> EnumerateFileSystemEntries(string path);\n        public abstract System.Collections.Generic.IEnumerable<string> EnumerateFileSystemEntries(string path, string searchPattern);\n        public abstract System.Collections.Generic.IEnumerable<string> EnumerateFileSystemEntries(string path, string searchPattern, System.IO.EnumerationOptions enumerationOptions);\n        public abstract System.Collections.Generic.IEnumerable<string> EnumerateFileSystemEntries(string path, string searchPattern, System.IO.SearchOption searchOption);\n        public abstract System.Collections.Generic.IEnumerable<string> EnumerateFiles(string path);\n        public abstract System.Collections.Generic.IEnumerable<string> EnumerateFiles(string path, string searchPattern);\n        public abstract System.Collections.Generic.IEnumerable<string> EnumerateFiles(string path, string searchPattern, System.IO.EnumerationOptions enumerationOptions);\n        public abstract System.Collections.Generic.IEnumerable<string> EnumerateFiles(string path, string searchPattern, System.IO.SearchOption searchOption);\n        public abstract bool Exists(string path);\n        public abstract System.DateTime GetCreationTime(string path);\n        public abstract System.DateTime GetCreationTimeUtc(string path);\n        public abstract string GetCurrentDirectory();\n        public abstract string[] GetDirectories(string path);\n        public abstract string[] GetDirectories(string path, string searchPattern);\n        public abstract string[] GetDirectories(string path, string searchPattern, System.IO.EnumerationOptions enumerationOptions);\n        public abstract string[] GetDirectories(string path, string searchPattern, System.IO.SearchOption searchOption);\n        public abstract string GetDirectoryRoot(string path);\n        public abstract string[] GetFileSystemEntries(string path);\n        public abstract string[] GetFileSystemEntries(string path, string searchPattern);\n        public abstract string[] GetFileSystemEntries(string path, string searchPattern, System.IO.EnumerationOptions enumerationOptions);\n        public abstract string[] GetFileSystemEntries(string path, string searchPattern, System.IO.SearchOption searchOption);\n        public abstract string[] GetFiles(string path);\n        public abstract string[] GetFiles(string path, string searchPattern);\n        public abstract string[] GetFiles(string path, string searchPattern, System.IO.EnumerationOptions enumerationOptions);\n        public abstract string[] GetFiles(string path, string searchPattern, System.IO.SearchOption searchOption);\n        public abstract System.DateTime GetLastAccessTime(string path);\n        public abstract System.DateTime GetLastAccessTimeUtc(string path);\n        public abstract System.DateTime GetLastWriteTime(string path);\n        public abstract System.DateTime GetLastWriteTimeUtc(string path);\n        public abstract string[] GetLogicalDrives();\n        public abstract System.IO.Abstractions.IDirectoryInfo GetParent(string path);\n        public abstract void Move(string sourceDirName, string destDirName);\n        public abstract System.IO.Abstractions.IFileSystemInfo ResolveLinkTarget(string linkPath, bool returnFinalTarget);\n        public abstract void SetCreationTime(string path, System.DateTime creationTime);\n        public abstract void SetCreationTimeUtc(string path, System.DateTime creationTimeUtc);\n        public abstract void SetCurrentDirectory(string path);\n        public abstract void SetLastAccessTime(string path, System.DateTime lastAccessTime);\n        public abstract void SetLastAccessTimeUtc(string path, System.DateTime lastAccessTimeUtc);\n        public abstract void SetLastWriteTime(string path, System.DateTime lastWriteTime);\n        public abstract void SetLastWriteTimeUtc(string path, System.DateTime lastWriteTimeUtc);\n    }\n    // ... other classes\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Abstract Base Class for DirectoryInfo Operations in C#\nDESCRIPTION: Defines the `DirectoryInfoBase` abstract class within the System.IO.Abstractions namespace. It inherits from `FileSystemInfoBase` and implements `IDirectoryInfo`. This class acts as a base for specific directory info implementations, providing abstract properties (`Parent`, `Root`) and methods for operations like creating the directory (`Create`) or subdirectories (`CreateSubdirectory`), deleting (`Delete`), and enumerating contained directories (`EnumerateDirectories`) and file system entries (`EnumerateFileSystemInfos`) with various filtering options. It relies on the base class constructor to receive the `IFileSystem` instance.\nSOURCE: https://github.com/testableio/system.io.abstractions/blob/main/tests/TestableIO.System.IO.Abstractions.Api.Tests/Expected/TestableIO.System.IO.Abstractions.Wrappers_net8.0.txt#2025-04-22_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nnamespace System.IO.Abstractions\n{\n    // ... DirectoryInfoAclExtensions\n    [System.Serializable]\n    public abstract class DirectoryInfoBase : System.IO.Abstractions.FileSystemInfoBase, System.IO.Abstractions.IDirectoryInfo, System.IO.Abstractions.IFileSystemInfo\n    {\n        protected DirectoryInfoBase(System.IO.Abstractions.IFileSystem fileSystem) { }\n        public abstract System.IO.Abstractions.IDirectoryInfo Parent { get; }\n        public abstract System.IO.Abstractions.IDirectoryInfo Root { get; }\n        public abstract void Create();\n        public abstract System.IO.Abstractions.IDirectoryInfo CreateSubdirectory(string path);\n        public abstract void Delete(bool recursive);\n        public abstract System.Collections.Generic.IEnumerable<System.IO.Abstractions.IDirectoryInfo> EnumerateDirectories();\n        public abstract System.Collections.Generic.IEnumerable<System.IO.Abstractions.IDirectoryInfo> EnumerateDirectories(string searchPattern);\n        public abstract System.Collections.Generic.IEnumerable<System.IO.Abstractions.IDirectoryInfo> EnumerateDirectories(string searchPattern, System.IO.EnumerationOptions enumerationOptions);\n        public abstract System.Collections.Generic.IEnumerable<System.IO.Abstractions.IDirectoryInfo> EnumerateDirectories(string searchPattern, System.IO.SearchOption searchOption);\n        public abstract System.Collections.Generic.IEnumerable<System.IO.Abstractions.IFileSystemInfo> EnumerateFileSystemInfos();\n        public abstract System.Collections.Generic.IEnumerable<System.IO.Abstractions.IFileSystemInfo> EnumerateFileSystemInfos(string searchPattern);\n        public abstract System.Collections.Generic.IEnumerable<System.IO.Abstractions.IFileSystemInfo> EnumerateFileSystemInfos(string searchPattern, System.IO.EnumerationOptions enumerationOptions);\n        // Note: The closing brace for the class and namespace is missing in the provided input text, but implied.\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing File Info Wrapper in C#\nDESCRIPTION: Concrete implementation of FileInfoBase that wraps a System.IO.FileInfo instance. It provides access to file attributes and creation time, and implements the IFileSystemAclSupport interface.\nSOURCE: https://github.com/testableio/system.io.abstractions/blob/main/tests/TestableIO.System.IO.Abstractions.Api.Tests/Expected/TestableIO.System.IO.Abstractions.Wrappers_net8.0.txt#2025-04-22_snippet_14\n\nLANGUAGE: C#\nCODE:\n```\n[System.Serializable]\npublic class FileInfoWrapper : System.IO.Abstractions.FileInfoBase, System.IO.Abstractions.IFileSystemAclSupport\n{\n    public FileInfoWrapper(System.IO.Abstractions.IFileSystem fileSystem, System.IO.FileInfo instance) { }\n    public override System.IO.FileAttributes Attributes { get; set; }\n    public override System.DateTime CreationTime { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing FileWrapper Class in C#\nDESCRIPTION: Defines a concrete class that extends FileBase and provides implementations for file operations. It includes methods for appending bytes, lines, and text to files with various overloads including async versions.\nSOURCE: https://github.com/testableio/system.io.abstractions/blob/main/tests/TestableIO.System.IO.Abstractions.Api.Tests/Expected/TestableIO.System.IO.Abstractions.Wrappers_net9.0.txt#2025-04-22_snippet_27\n\nLANGUAGE: C#\nCODE:\n```\n[System.Serializable]\npublic class FileWrapper : System.IO.Abstractions.FileBase\n{\n    public FileWrapper(System.IO.Abstractions.IFileSystem fileSystem) { }\n    public override void AppendAllBytes(string path, System.ReadOnlySpan<byte> bytes) { }\n    public override void AppendAllBytes(string path, byte[] bytes) { }\n    public override System.Threading.Tasks.Task AppendAllBytesAsync(string path, System.ReadOnlyMemory<byte> bytes, System.Threading.CancellationToken cancellationToken = default) { }\n    public override System.Threading.Tasks.Task AppendAllBytesAsync(string path, byte[] bytes, System.Threading.CancellationToken cancellationToken = default) { }\n    public override void AppendAllLines(string path, System.Collections.Generic.IEnumerable<string> contents) { }\n    public override void AppendAllLines(string path, System.Collections.Generic.IEnumerable<string> contents, System.Text.Encoding encoding) { }\n    public override System.Threading.Tasks.Task AppendAllLinesAsync(string path, System.Collections.Generic.IEnumerable<string> contents, System.Threading.CancellationToken cancellationToken = default) { }\n    public override System.Threading.Tasks.Task AppendAllLinesAsync(string path, System.Collections.Generic.IEnumerable<string> contents, System.Text.Encoding encoding, System.Threading.CancellationToken cancellationToken = default) { }\n    public override void AppendAllText(string path, System.ReadOnlySpan<char> contents) { }\n    public override void AppendAllText(string path, string contents) { }\n    public override void AppendAllText(string path, System.ReadOnlySpan<char> contents, System.Text.Encoding encoding) { }\n    public override void AppendAllText(string path, string contents, System.Text.Encoding encoding) { }\n    public override System.Threading.Tasks.Task AppendAllTextAsync(string path, System.ReadOnlyMemory<char> contents, System.Threading.CancellationToken cancellationToken = default) { }\n    public override System.Threading.Tasks.Task AppendAllTextAsync(string path, string contents, System.Threading.CancellationToken cancellationToken = default) { }\n```\n\n----------------------------------------\n\nTITLE: MockDirectoryInfo Class Implementation - C#\nDESCRIPTION: Mock implementation of DirectoryInfoBase providing directory information for testing purposes\nSOURCE: https://github.com/testableio/system.io.abstractions/blob/main/tests/TestableIO.System.IO.Abstractions.Api.Tests/Expected/TestableIO.System.IO.Abstractions.TestingHelpers_net8.0.txt#2025-04-22_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\n[System.Serializable]\npublic class MockDirectoryInfo : System.IO.Abstractions.DirectoryInfoBase, System.IO.Abstractions.IFileSystemAclSupport\n{\n    public MockDirectoryInfo(System.IO.Abstractions.TestingHelpers.IMockFileDataAccessor mockFileDataAccessor, string directoryPath) { }\n    public override System.IO.FileAttributes Attributes { get; set; }\n    public override System.DateTime CreationTime { get; set; }\n    public override System.DateTime CreationTimeUtc { get; set; }\n    public override bool Exists { get; }\n    public override string Extension { get; }\n    public override string FullName { get; }\n    public override System.DateTime LastAccessTime { get; set; }\n    public override System.DateTime LastAccessTimeUtc { get; set; }\n    public override System.DateTime LastWriteTime { get; set; }\n    public override System.DateTime LastWriteTimeUtc { get; set; }\n    public override string LinkTarget { get; }\n    public override string Name { get; }\n    public override System.IO.Abstractions.IDirectoryInfo Parent { get; }\n    public override System.IO.Abstractions.IDirectoryInfo Root { get; }\n    public override void Create() { }\n    public override void CreateAsSymbolicLink(string pathToTarget) { }\n    public override System.IO.Abstractions.IDirectoryInfo CreateSubdirectory(string path) { }\n    public override void Delete() { }\n    public override void Delete(bool recursive) { }\n    public override System.Collections.Generic.IEnumerable<System.IO.Abstractions.IDirectoryInfo> EnumerateDirectories() { }\n    public override System.Collections.Generic.IEnumerable<System.IO.Abstractions.IDirectoryInfo> EnumerateDirectories(string searchPattern) { }\n    public override System.Collections.Generic.IEnumerable<System.IO.Abstractions.IDirectoryInfo> EnumerateDirectories(string searchPattern, System.IO.EnumerationOptions enumerationOptions) { }\n```\n\n----------------------------------------\n\nTITLE: Implementing MockFileStream Class in C#\nDESCRIPTION: Defines a serializable MockFileStream class that extends FileSystemStream and implements IFileSystemAclSupport. This class provides mock implementations of file stream operations for testing.\nSOURCE: https://github.com/testableio/system.io.abstractions/blob/main/tests/TestableIO.System.IO.Abstractions.Api.Tests/Expected/TestableIO.System.IO.Abstractions.TestingHelpers_netstandard2.0.txt#2025-04-22_snippet_16\n\nLANGUAGE: C#\nCODE:\n```\n[System.Serializable]\npublic class MockFileStream : System.IO.Abstractions.FileSystemStream, System.IO.Abstractions.IFileSystemAclSupport\n{\n    public MockFileStream(System.IO.Abstractions.TestingHelpers.IMockFileDataAccessor mockFileDataAccessor, string path, System.IO.FileMode mode, System.IO.FileAccess access = 3, System.IO.FileOptions options = 0) { }\n    public override bool CanRead { get; }\n    public override bool CanWrite { get; }\n    public static System.IO.Abstractions.FileSystemStream Null { get; }\n    protected override void Dispose(bool disposing) { }\n    public override void EndWrite(System.IAsyncResult asyncResult) { }\n    public override void Flush() { }\n    public override void Flush(bool flushToDisk) { }\n    public override System.Threading.Tasks.Task FlushAsync(System.Threading.CancellationToken cancellationToken) { }\n    public object GetAccessControl() { }\n    public object GetAccessControl(System.IO.Abstractions.IFileSystemAclSupport.AccessControlSections includeSections) { }\n    public override int Read(byte[] buffer, int offset, int count) { }\n    public void SetAccessControl(object value) { }\n    public override void SetLength(long value) { }\n    public override void Write(byte[] buffer, int offset, int count) { }\n    public override System.Threading.Tasks.Task WriteAsync(byte[] buffer, int offset, int count, System.Threading.CancellationToken cancellationToken) { }\n    public override void WriteByte(byte value) { }\n}\n```\n\n----------------------------------------\n\nTITLE: Simulating FileInfo Functionality with MockFileInfo using System.IO.Abstractions in C#\nDESCRIPTION: The MockFileInfo class provides a comprehensive mock implementation of FileInfo for unit testing, supporting file metadata, stream operations, access control, and standard file manipulation methods like copy, move, open, and replace. Implements both FileInfoBase and IFileSystemAclSupport interfaces, offering full control over mock file attributes, directories, read/write states, and security features. Relies on System.IO.Abstractions and integrates with other mocks for seamless file system simulation.\nSOURCE: https://github.com/testableio/system.io.abstractions/blob/main/tests/TestableIO.System.IO.Abstractions.Api.Tests/Expected/TestableIO.System.IO.Abstractions.TestingHelpers_netstandard2.1.txt#2025-04-22_snippet_12\n\nLANGUAGE: csharp\nCODE:\n```\n[System.Serializable]\npublic class MockFileInfo : System.IO.Abstractions.FileInfoBase, System.IO.Abstractions.IFileSystemAclSupport\n{\n    public MockFileInfo(System.IO.Abstractions.TestingHelpers.IMockFileDataAccessor mockFileSystem, string path) { }\n    public override System.IO.FileAttributes Attributes { get; set; }\n    public override System.DateTime CreationTime { get; set; }\n    public override System.DateTime CreationTimeUtc { get; set; }\n    public override System.IO.Abstractions.IDirectoryInfo Directory { get; }\n    public override string DirectoryName { get; }\n    public override bool Exists { get; }\n    public override string Extension { get; }\n    public override string FullName { get; }\n    public override bool IsReadOnly { get; set; }\n    public override System.DateTime LastAccessTime { get; set; }\n    public override System.DateTime LastAccessTimeUtc { get; set; }\n    public override System.DateTime LastWriteTime { get; set; }\n    public override System.DateTime LastWriteTimeUtc { get; set; }\n    public override long Length { get; }\n    public override string Name { get; }\n    public override System.IO.StreamWriter AppendText() { }\n    public override System.IO.Abstractions.IFileInfo CopyTo(string destFileName) { }\n    public override System.IO.Abstractions.IFileInfo CopyTo(string destFileName, bool overwrite) { }\n    public override System.IO.Abstractions.FileSystemStream Create() { }\n    public override System.IO.StreamWriter CreateText() { }\n    public override void Decrypt() { }\n    public override void Delete() { }\n    public override void Encrypt() { }\n    public object GetAccessControl() { }\n    public object GetAccessControl(System.IO.Abstractions.IFileSystemAclSupport.AccessControlSections includeSections) { }\n    public override void MoveTo(string destFileName) { }\n    public override System.IO.Abstractions.FileSystemStream Open(System.IO.FileMode mode) { }\n    public override System.IO.Abstractions.FileSystemStream Open(System.IO.FileMode mode, System.IO.FileAccess access) { }\n    public override System.IO.Abstractions.FileSystemStream Open(System.IO.FileMode mode, System.IO.FileAccess access, System.IO.FileShare share) { }\n    public override System.IO.Abstractions.FileSystemStream OpenRead() { }\n    public override System.IO.StreamReader OpenText() { }\n    public override System.IO.Abstractions.FileSystemStream OpenWrite() { }\n    public override void Refresh() { }\n    public override System.IO.Abstractions.IFileInfo Replace(string destinationFileName, string destinationBackupFileName) { }\n    public override System.IO.Abstractions.IFileInfo Replace(string destinationFileName, string destinationBackupFileName, bool ignoreMetadataErrors) { }\n    public void SetAccessControl(object value) { }\n    public override string ToString() { }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating MockFileInfo for File Metadata Testing using System.IO.Abstractions in C#\nDESCRIPTION: The MockFileInfo class provides a mock file info implementation that inherits from FileInfoBase and adds file system access control support for simulating file metadata and access rules within test scenarios. By overriding attributes, timestamps, and directory relationships, it enables high-coverage unit tests of file info operations without actual disk access. It depends on an IMockFileDataAccessor and accepts file paths as input.\nSOURCE: https://github.com/testableio/system.io.abstractions/blob/main/tests/TestableIO.System.IO.Abstractions.Api.Tests/Expected/TestableIO.System.IO.Abstractions.TestingHelpers_netstandard2.0.txt#2025-04-22_snippet_10\n\nLANGUAGE: csharp\nCODE:\n```\n[System.Serializable]\npublic class MockFileInfo : System.IO.Abstractions.FileInfoBase, System.IO.Abstractions.IFileSystemAclSupport\n{\n    public MockFileInfo(System.IO.Abstractions.TestingHelpers.IMockFileDataAccessor mockFileSystem, string path) { }\n    public override System.IO.FileAttributes Attributes { get; set; }\n    public override System.DateTime CreationTime { get; set; }\n    public override System.DateTime CreationTimeUtc { get; set; }\n    public override System.IO.Abstractions.IDirectoryInfo Directory { get; }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing MockFileVersionInfo Class in C#\nDESCRIPTION: This class extends FileVersionInfoBase to provide mock file version information for testing purposes, including various file and product details.\nSOURCE: https://github.com/testableio/system.io.abstractions/blob/main/tests/TestableIO.System.IO.Abstractions.Api.Tests/Expected/TestableIO.System.IO.Abstractions.TestingHelpers_net9.0.txt#2025-04-22_snippet_23\n\nLANGUAGE: C#\nCODE:\n```\n[System.Serializable]\npublic class MockFileVersionInfo : System.IO.Abstractions.FileVersionInfoBase\n{\n    public MockFileVersionInfo(\n                string fileName,\n                string fileVersion = null,\n                string productVersion = null,\n                string fileDescription = null,\n                string productName = null,\n                string companyName = null,\n                string comments = null,\n                string internalName = null,\n                bool isDebug = false,\n                bool isPatched = false,\n                bool isPrivateBuild = false,\n                bool isPreRelease = false,\n                bool isSpecialBuild = false,\n                string language = null,\n                string legalCopyright = null,\n                string legalTrademarks = null,\n                string originalFilename = null,\n                string privateBuild = null,\n                string specialBuild = null) { }\n    public override string Comments { get; }\n    public override string CompanyName { get; }\n    public override int FileBuildPart { get; }\n    public override string FileDescription { get; }\n    public override int FileMajorPart { get; }\n    public override int FileMinorPart { get; }\n    public override string FileName { get; }\n    public override int FilePrivatePart { get; }\n    public override string FileVersion { get; }\n    public override string InternalName { get; }\n    public override bool IsDebug { get; }\n    public override bool IsPatched { get; }\n    public override bool IsPreRelease { get; }\n    public override bool IsPrivateBuild { get; }\n    public override bool IsSpecialBuild { get; }\n    public override string Language { get; }\n    public override string LegalCopyright { get; }\n    public override string LegalTrademarks { get; }\n    public override string OriginalFilename { get; }\n    public override string PrivateBuild { get; }\n    public override int ProductBuildPart { get; }\n    public override int ProductMajorPart { get; }\n    public override int ProductMinorPart { get; }\n    public override string ProductName { get; }\n    public override int ProductPrivatePart { get; }\n    public override string ProductVersion { get; }\n    public override string SpecialBuild { get; }\n    public override string ToString() { }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Mock Drive Data for Testing - System.IO.Abstractions - C#\nDESCRIPTION: This code snippet presents the MockDriveData class, a serializable class designed to represent drive information in memory for testing scenarios. Properties such as AvailableFreeSpace, DriveFormat, DriveType, IsReady, TotalFreeSpace, TotalSize, and VolumeLabel enable simulation of various drive states and configurations. It supports creation from scratch or by cloning an existing mock drive, with no direct dependencies other than the base .NET types.\nSOURCE: https://github.com/testableio/system.io.abstractions/blob/main/tests/TestableIO.System.IO.Abstractions.Api.Tests/Expected/TestableIO.System.IO.Abstractions.TestingHelpers_net9.0.txt#2025-04-22_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\n[System.Serializable]\npublic class MockDriveData\n{\n    public MockDriveData() { }\n    public MockDriveData(System.IO.Abstractions.TestingHelpers.MockDriveData template) { }\n    public long AvailableFreeSpace { get; set; }\n    public string DriveFormat { get; set; }\n    public System.IO.DriveType DriveType { get; set; }\n    public bool IsReady { get; set; }\n    public long TotalFreeSpace { get; set; }\n    public long TotalSize { get; set; }\n    public string VolumeLabel { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing DirectoryInfoWrapper Class in C#\nDESCRIPTION: Implements the `DirectoryInfoWrapper` class, inheriting from `DirectoryInfoBase` and implementing `IFileSystemAclSupport`. This class acts as a wrapper around a standard `System.IO.DirectoryInfo` instance, providing concrete implementations (shown as stubs or signatures here) for the abstract members defined in the base class and interface. It includes properties for attributes, times, names, paths, and methods for creation, deletion, enumeration, access control (Windows-specific), and refreshing state. Requires a `System.IO.Abstractions.IFileSystem` and a `System.IO.DirectoryInfo` instance for construction.\nSOURCE: https://github.com/testableio/system.io.abstractions/blob/main/tests/TestableIO.System.IO.Abstractions.Api.Tests/Expected/TestableIO.System.IO.Abstractions.Wrappers_net8.0.txt#2025-04-22_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\n    [System.Serializable]\n    public class DirectoryInfoWrapper : System.IO.Abstractions.DirectoryInfoBase, System.IO.Abstractions.IFileSystemAclSupport\n    {\n        public DirectoryInfoWrapper(System.IO.Abstractions.IFileSystem fileSystem, System.IO.DirectoryInfo instance) { }\n        public override System.IO.FileAttributes Attributes { get; set; }\n        public override System.DateTime CreationTime { get; set; }\n        public override System.DateTime CreationTimeUtc { get; set; }\n        public override bool Exists { get; }\n        public override string Extension { get; }\n        public override string FullName { get; }\n        public override System.DateTime LastAccessTime { get; set; }\n        public override System.DateTime LastAccessTimeUtc { get; set; }\n        public override System.DateTime LastWriteTime { get; set; }\n        public override System.DateTime LastWriteTimeUtc { get; set; }\n        public override string LinkTarget { get; }\n        public override string Name { get; }\n        public override System.IO.Abstractions.IDirectoryInfo Parent { get; }\n        public override System.IO.Abstractions.IDirectoryInfo Root { get; }\n        public override void Create() { }\n        public override void CreateAsSymbolicLink(string pathToTarget) { }\n        public override System.IO.Abstractions.IDirectoryInfo CreateSubdirectory(string path) { }\n        public override void Delete() { }\n        public override void Delete(bool recursive) { }\n        public override System.Collections.Generic.IEnumerable<System.IO.Abstractions.IDirectoryInfo> EnumerateDirectories() { }\n        public override System.Collections.Generic.IEnumerable<System.IO.Abstractions.IDirectoryInfo> EnumerateDirectories(string searchPattern) { }\n        public override System.Collections.Generic.IEnumerable<System.IO.Abstractions.IDirectoryInfo> EnumerateDirectories(string searchPattern, System.IO.EnumerationOptions enumerationOptions) { }\n        public override System.Collections.Generic.IEnumerable<System.IO.Abstractions.IDirectoryInfo> EnumerateDirectories(string searchPattern, System.IO.SearchOption searchOption) { }\n        public override System.Collections.Generic.IEnumerable<System.IO.Abstractions.IFileSystemInfo> EnumerateFileSystemInfos() { }\n        public override System.Collections.Generic.IEnumerable<System.IO.Abstractions.IFileSystemInfo> EnumerateFileSystemInfos(string searchPattern) { }\n        public override System.Collections.Generic.IEnumerable<System.IO.Abstractions.IFileSystemInfo> EnumerateFileSystemInfos(string searchPattern, System.IO.EnumerationOptions enumerationOptions) { }\n        public override System.Collections.Generic.IEnumerable<System.IO.Abstractions.IFileSystemInfo> EnumerateFileSystemInfos(string searchPattern, System.IO.SearchOption searchOption) { }\n        public override System.Collections.Generic.IEnumerable<System.IO.Abstractions.IFileInfo> EnumerateFiles() { }\n        public override System.Collections.Generic.IEnumerable<System.IO.Abstractions.IFileInfo> EnumerateFiles(string searchPattern) { }\n        public override System.Collections.Generic.IEnumerable<System.IO.Abstractions.IFileInfo> EnumerateFiles(string searchPattern, System.IO.EnumerationOptions enumerationOptions) { }\n        public override System.Collections.Generic.IEnumerable<System.IO.Abstractions.IFileInfo> EnumerateFiles(string searchPattern, System.IO.SearchOption searchOption) { }\n        [System.Runtime.Versioning.SupportedOSPlatform(\"windows\")]\n        public object GetAccessControl() { }\n        [System.Runtime.Versioning.SupportedOSPlatform(\"windows\")]\n        public object GetAccessControl(System.IO.Abstractions.IFileSystemAclSupport.AccessControlSections includeSections) { }\n        public override System.IO.Abstractions.IDirectoryInfo[] GetDirectories() { }\n        public override System.IO.Abstractions.IDirectoryInfo[] GetDirectories(string searchPattern) { }\n        public override System.IO.Abstractions.IDirectoryInfo[] GetDirectories(string searchPattern, System.IO.EnumerationOptions enumerationOptions) { }\n        public override System.IO.Abstractions.IDirectoryInfo[] GetDirectories(string searchPattern, System.IO.SearchOption searchOption) { }\n        public override System.IO.Abstractions.IFileSystemInfo[] GetFileSystemInfos() { }\n        public override System.IO.Abstractions.IFileSystemInfo[] GetFileSystemInfos(string searchPattern) { }\n        public override System.IO.Abstractions.IFileSystemInfo[] GetFileSystemInfos(string searchPattern, System.IO.EnumerationOptions enumerationOptions) { }\n        public override System.IO.Abstractions.IFileSystemInfo[] GetFileSystemInfos(string searchPattern, System.IO.SearchOption searchOption) { }\n        public override System.IO.Abstractions.IFileInfo[] GetFiles() { }\n        public override System.IO.Abstractions.IFileInfo[] GetFiles(string searchPattern) { }\n        public override System.IO.Abstractions.IFileInfo[] GetFiles(string searchPattern, System.IO.EnumerationOptions enumerationOptions) { }\n        public override System.IO.Abstractions.IFileInfo[] GetFiles(string searchPattern, System.IO.SearchOption searchOption) { }\n        public override void MoveTo(string destDirName) { }\n        public override void Refresh() { }\n        public override System.IO.Abstractions.IFileSystemInfo ResolveLinkTarget(bool returnFinalTarget) { }\n        [System.Runtime.Versioning.SupportedOSPlatform(\"windows\")]\n        public void SetAccessControl(object value) { }\n        public override string ToString() { }\n    }\n\n```\n\n----------------------------------------\n\nTITLE: Declaring Abstract Directory Enumeration and Retrieval Methods in DirectoryInfoBase (C#)\nDESCRIPTION: This snippet defines abstract methods within the `DirectoryInfoBase` class for enumerating and retrieving file system entries (files, directories, file system infos) within a directory. It includes overloads for specifying search patterns, search options (TopDirectoryOnly, AllDirectories), and enumeration options. It also declares an abstract `MoveTo` method and an implicit operator for converting `System.IO.DirectoryInfo` to `DirectoryInfoBase`.\nSOURCE: https://github.com/testableio/system.io.abstractions/blob/main/tests/TestableIO.System.IO.Abstractions.Api.Tests/Expected/TestableIO.System.IO.Abstractions.Wrappers_net9.0.txt#2025-04-22_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\n        public abstract System.Collections.Generic.IEnumerable<System.IO.Abstractions.IFileSystemInfo> EnumerateFileSystemInfos(string searchPattern, System.IO.SearchOption searchOption);\n        public abstract System.Collections.Generic.IEnumerable<System.IO.Abstractions.IFileInfo> EnumerateFiles();\n        public abstract System.Collections.Generic.IEnumerable<System.IO.Abstractions.IFileInfo> EnumerateFiles(string searchPattern);\n        public abstract System.Collections.Generic.IEnumerable<System.IO.Abstractions.IFileInfo> EnumerateFiles(string searchPattern, System.IO.EnumerationOptions enumerationOptions);\n        public abstract System.Collections.Generic.IEnumerable<System.IO.Abstractions.IFileInfo> EnumerateFiles(string searchPattern, System.IO.SearchOption searchOption);\n        public abstract System.IO.Abstractions.IDirectoryInfo[] GetDirectories();\n        public abstract System.IO.Abstractions.IDirectoryInfo[] GetDirectories(string searchPattern);\n        public abstract System.IO.Abstractions.IDirectoryInfo[] GetDirectories(string searchPattern, System.IO.EnumerationOptions enumerationOptions);\n        public abstract System.IO.Abstractions.IDirectoryInfo[] GetDirectories(string searchPattern, System.IO.SearchOption searchOption);\n        public abstract System.IO.Abstractions.IFileSystemInfo[] GetFileSystemInfos();\n        public abstract System.IO.Abstractions.IFileSystemInfo[] GetFileSystemInfos(string searchPattern);\n        public abstract System.IO.Abstractions.IFileSystemInfo[] GetFileSystemInfos(string searchPattern, System.IO.EnumerationOptions enumerationOptions);\n        public abstract System.IO.Abstractions.IFileSystemInfo[] GetFileSystemInfos(string searchPattern, System.IO.SearchOption searchOption);\n        public abstract System.IO.Abstractions.IFileInfo[] GetFiles();\n        public abstract System.IO.Abstractions.IFileInfo[] GetFiles(string searchPattern);\n        public abstract System.IO.Abstractions.IFileInfo[] GetFiles(string searchPattern, System.IO.EnumerationOptions enumerationOptions);\n        public abstract System.IO.Abstractions.IFileInfo[] GetFiles(string searchPattern, System.IO.SearchOption searchOption);\n        public abstract void MoveTo(string destDirName);\n        public static System.IO.Abstractions.DirectoryInfoBase op_Implicit(System.IO.DirectoryInfo directoryInfo) { }\n    }\n```\n\n----------------------------------------\n\nTITLE: Extending MockDirectoryInfo Class with C#\nDESCRIPTION: MockDirectoryInfo extends the DirectoryInfoBase class, providing properties and operations to manage directory attributes and metadata in a mock file system. It supports directory creation, deletion, and enumeration, and integrates file system access control via the IFileSystemAclSupport interface.\nSOURCE: https://github.com/testableio/system.io.abstractions/blob/main/tests/TestableIO.System.IO.Abstractions.Api.Tests/Expected/TestableIO.System.IO.Abstractions.TestingHelpers_netstandard2.0.txt#2025-04-22_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\n[System.Serializable]\npublic class MockDirectoryInfo : System.IO.Abstractions.DirectoryInfoBase, System.IO.Abstractions.IFileSystemAclSupport\n{\n    public MockDirectoryInfo(System.IO.Abstractions.TestingHelpers.IMockFileDataAccessor mockFileDataAccessor, string directoryPath) { }\n    public override System.IO.FileAttributes Attributes { get; set; }\n    public override System.DateTime CreationTime { get; set; }\n    public override bool Exists { get; }\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing PathWrapper Concrete Class in C#\nDESCRIPTION: Concrete implementation of the PathBase abstract class that provides actual path manipulation functionality. This class wraps the System.IO.Path methods and exposes them through the IPath interface, making file path operations testable.\nSOURCE: https://github.com/testableio/system.io.abstractions/blob/main/tests/TestableIO.System.IO.Abstractions.Api.Tests/Expected/TestableIO.System.IO.Abstractions.Wrappers_net6.0.txt#2025-04-22_snippet_28\n\nLANGUAGE: C#\nCODE:\n```\n[System.Serializable]\npublic class PathWrapper : System.IO.Abstractions.PathBase\n{\n    public PathWrapper(System.IO.Abstractions.IFileSystem fileSystem) { }\n    public override char AltDirectorySeparatorChar { get; }\n    public override char DirectorySeparatorChar { get; }\n    [System.Obsolete(\"Please use GetInvalidPathChars or GetInvalidFileNameChars instead.\")]\n    public override char[] InvalidPathChars { get; }\n    public override char PathSeparator { get; }\n    public override char VolumeSeparatorChar { get; }\n    public override string ChangeExtension(string path, string extension) { }\n    public override string Combine(params string[] paths) { }\n    public override string Combine(string path1, string path2) { }\n    public override string Combine(string path1, string path2, string path3) { }\n    public override string Combine(string path1, string path2, string path3, string path4) { }\n    public override bool EndsInDirectorySeparator(System.ReadOnlySpan<char> path) { }\n    public override bool EndsInDirectorySeparator(string path) { }\n    public override System.ReadOnlySpan<char> GetDirectoryName(System.ReadOnlySpan<char> path) { }\n    public override string GetDirectoryName(string path) { }\n    public override System.ReadOnlySpan<char> GetExtension(System.ReadOnlySpan<char> path) { }\n    public override string GetExtension(string path) { }\n    public override System.ReadOnlySpan<char> GetFileName(System.ReadOnlySpan<char> path) { }\n    public override string GetFileName(string path) { }\n    public override System.ReadOnlySpan<char> GetFileNameWithoutExtension(System.ReadOnlySpan<char> path) { }\n    public override string GetFileNameWithoutExtension(string path) { }\n    public override string GetFullPath(string path) { }\n    public override string GetFullPath(string path, string basePath) { }\n    public override char[] GetInvalidFileNameChars() { }\n    public override char[] GetInvalidPathChars() { }\n    public override System.ReadOnlySpan<char> GetPathRoot(System.ReadOnlySpan<char> path) { }\n    public override string GetPathRoot(string path) { }\n    public override string GetRandomFileName() { }\n    public override string GetRelativePath(string relativeTo, string path) { }\n    public override string GetTempFileName() { }\n    public override string GetTempPath() { }\n    public override bool HasExtension(System.ReadOnlySpan<char> path) { }\n    public override bool HasExtension(string path) { }\n    public override bool IsPathFullyQualified(System.ReadOnlySpan<char> path) { }\n    public override bool IsPathFullyQualified(string path) { }\n    public override bool IsPathRooted(System.ReadOnlySpan<char> path) { }\n    public override bool IsPathRooted(string path) { }\n    public override string Join(params string[] paths) { }\n    public override string Join(System.ReadOnlySpan<char> path1, System.ReadOnlySpan<char> path2) { }\n    public override string Join(string path1, string path2) { }\n    public override string Join(System.ReadOnlySpan<char> path1, System.ReadOnlySpan<char> path2, System.ReadOnlySpan<char> path3) { }\n    public override string Join(string path1, string path2, string path3) { }\n    public override string Join(System.ReadOnlySpan<char> path1, System.ReadOnlySpan<char> path2, System.ReadOnlySpan<char> path3, System.ReadOnlySpan<char> path4) { }\n    public override string Join(string path1, string path2, string path3, string path4) { }\n    public override System.ReadOnlySpan<char> TrimEndingDirectorySeparator(System.ReadOnlySpan<char> path) { }\n    public override string TrimEndingDirectorySeparator(string path) { }\n    public override bool TryJoin(System.ReadOnlySpan<char> path1, System.ReadOnlySpan<char> path2, System.Span<char> destination, out int charsWritten) { }\n    public override bool TryJoin(System.ReadOnlySpan<char> path1, System.ReadOnlySpan<char> path2, System.ReadOnlySpan<char> path3, System.Span<char> destination, out int charsWritten) { }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Mock Directory Information Operations in C#\nDESCRIPTION: Provides method signatures for enumerating and retrieving file system entries (files, directories, file system infos) within a mock directory representation. It also includes methods for getting/setting access control, moving the directory, refreshing its state, and string representation. These methods likely override base class methods from System.IO.Abstractions.DirectoryInfoBase.\nSOURCE: https://github.com/testableio/system.io.abstractions/blob/main/tests/TestableIO.System.IO.Abstractions.Api.Tests/Expected/TestableIO.System.IO.Abstractions.TestingHelpers_netstandard2.1.txt#2025-04-22_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\n        public override System.Collections.Generic.IEnumerable<System.IO.Abstractions.IFileSystemInfo> EnumerateFileSystemInfos(string searchPattern, System.IO.SearchOption searchOption) { }\n        public override System.Collections.Generic.IEnumerable<System.IO.Abstractions.IFileInfo> EnumerateFiles() { }\n        public override System.Collections.Generic.IEnumerable<System.IO.Abstractions.IFileInfo> EnumerateFiles(string searchPattern) { }\n        public override System.Collections.Generic.IEnumerable<System.IO.Abstractions.IFileInfo> EnumerateFiles(string searchPattern, System.IO.EnumerationOptions enumerationOptions) { }\n        public override System.Collections.Generic.IEnumerable<System.IO.Abstractions.IFileInfo> EnumerateFiles(string searchPattern, System.IO.SearchOption searchOption) { }\n        public object GetAccessControl() { }\n        public object GetAccessControl(System.IO.Abstractions.IFileSystemAclSupport.AccessControlSections includeSections) { }\n        public override System.IO.Abstractions.IDirectoryInfo[] GetDirectories() { }\n        public override System.IO.Abstractions.IDirectoryInfo[] GetDirectories(string searchPattern) { }\n        public override System.IO.Abstractions.IDirectoryInfo[] GetDirectories(string searchPattern, System.IO.EnumerationOptions enumerationOptions) { }\n        public override System.IO.Abstractions.IDirectoryInfo[] GetDirectories(string searchPattern, System.IO.SearchOption searchOption) { }\n        public override System.IO.Abstractions.IFileSystemInfo[] GetFileSystemInfos() { }\n        public override System.IO.Abstractions.IFileSystemInfo[] GetFileSystemInfos(string searchPattern) { }\n        public override System.IO.Abstractions.IFileSystemInfo[] GetFileSystemInfos(string searchPattern, System.IO.EnumerationOptions enumerationOptions) { }\n        public override System.IO.Abstractions.IFileSystemInfo[] GetFileSystemInfos(string searchPattern, System.IO.SearchOption searchOption) { }\n        public override System.IO.Abstractions.IFileInfo[] GetFiles() { }\n        public override System.IO.Abstractions.IFileInfo[] GetFiles(string searchPattern) { }\n        public override System.IO.Abstractions.IFileInfo[] GetFiles(string searchPattern, System.IO.EnumerationOptions enumerationOptions) { }\n        public override System.IO.Abstractions.IFileInfo[] GetFiles(string searchPattern, System.IO.SearchOption searchOption) { }\n        public override void MoveTo(string destDirName) { }\n        public override void Refresh() { }\n        public void SetAccessControl(object value) { }\n        public override string ToString() { }\n    }\n\n```\n\n----------------------------------------\n\nTITLE: Mocking File Info with ACL Support using System.IO.Abstractions in C#\nDESCRIPTION: This snippet defines the MockFileInfo class, a serializable file info representation that implements file system access control (ACL) via IFileSystemAclSupport. The constructor accepts a mock file system accessor and a file path. Overridden properties include file attributes and timestamps, with support for directory info retrieval, enabling simulation of OS-level file security for robust test scenarios.\nSOURCE: https://github.com/testableio/system.io.abstractions/blob/main/tests/TestableIO.System.IO.Abstractions.Api.Tests/Expected/TestableIO.System.IO.Abstractions.TestingHelpers_net472.txt#2025-04-22_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\n[System.Serializable]\npublic class MockFileInfo : System.IO.Abstractions.FileInfoBase, System.IO.Abstractions.IFileSystemAclSupport\n{\n    public MockFileInfo(System.IO.Abstractions.TestingHelpers.IMockFileDataAccessor mockFileSystem, string path) { }\n    public override System.IO.FileAttributes Attributes { get; set; }\n    public override System.DateTime CreationTime { get; set; }\n    public override System.DateTime CreationTimeUtc { get; set; }\n    public override System.IO.Abstractions.IDirectoryInfo Directory { get; }\n\n```\n\n----------------------------------------\n\nTITLE: Defining FileInfoBase Abstract Class in C#\nDESCRIPTION: Abstract base class for file information that implements the IFileInfo interface. This class provides the foundation for concrete implementations of file information objects with common file operations.\nSOURCE: https://github.com/testableio/system.io.abstractions/blob/main/tests/TestableIO.System.IO.Abstractions.Api.Tests/Expected/TestableIO.System.IO.Abstractions.Wrappers_netstandard2.0.txt#2025-04-22_snippet_12\n\nLANGUAGE: C#\nCODE:\n```\n[System.Serializable]\npublic abstract class FileInfoBase : System.IO.Abstractions.FileSystemInfoBase, System.IO.Abstractions.IFileInfo, System.IO.Abstractions.IFileSystemInfo\n{\n    protected FileInfoBase(System.IO.Abstractions.IFileSystem fileSystem) { }\n    public abstract System.IO.Abstractions.IDirectoryInfo Directory { get; }\n    public abstract string DirectoryName { get; }\n    public abstract bool IsReadOnly { get; set; }\n    public abstract long Length { get; }\n    public abstract System.IO.StreamWriter AppendText();\n    public abstract System.IO.Abstractions.IFileInfo CopyTo(string destFileName);\n    public abstract System.IO.Abstractions.IFileInfo CopyTo(string destFileName, bool overwrite);\n    public abstract System.IO.Abstractions.FileSystemStream Create();\n    public abstract System.IO.StreamWriter CreateText();\n    public abstract void Decrypt();\n    public abstract void Encrypt();\n    public abstract void MoveTo(string destFileName);\n    public abstract System.IO.Abstractions.FileSystemStream Open(System.IO.FileMode mode);\n    public abstract System.IO.Abstractions.FileSystemStream Open(System.IO.FileMode mode, System.IO.FileAccess access);\n    public abstract System.IO.Abstractions.FileSystemStream Open(System.IO.FileMode mode, System.IO.FileAccess access, System.IO.FileShare share);\n    public abstract System.IO.Abstractions.FileSystemStream OpenRead();\n    public abstract System.IO.StreamReader OpenText();\n    public abstract System.IO.Abstractions.FileSystemStream OpenWrite();\n    public abstract System.IO.Abstractions.IFileInfo Replace(string destinationFileName, string destinationBackupFileName);\n    public abstract System.IO.Abstractions.IFileInfo Replace(string destinationFileName, string destinationBackupFileName, bool ignoreMetadataErrors);\n    public static System.IO.Abstractions.FileInfoBase op_Implicit(System.IO.FileInfo fileInfo) { }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Mock Drive Info Implementation - System.IO.Abstractions - C#\nDESCRIPTION: This snippet provides the implementation of MockDriveInfo, a serializable mock class inheriting from DriveInfoBase and overriding properties such as AvailableFreeSpace, DriveFormat, DriveType, IsReady, Name, RootDirectory, TotalFreeSpace, TotalSize, and VolumeLabel. It is constructed using an IMockFileDataAccessor and drive name, and is intended to provide testable drive info objects within a mock file system. The outputs mimic real drive states for test isolation and flexibility.\nSOURCE: https://github.com/testableio/system.io.abstractions/blob/main/tests/TestableIO.System.IO.Abstractions.Api.Tests/Expected/TestableIO.System.IO.Abstractions.TestingHelpers_net9.0.txt#2025-04-22_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\n[System.Serializable]\npublic class MockDriveInfo : System.IO.Abstractions.DriveInfoBase\n{\n    public MockDriveInfo(System.IO.Abstractions.TestingHelpers.IMockFileDataAccessor mockFileDataAccessor, string name) { }\n    public override long AvailableFreeSpace { get; }\n    public override string DriveFormat { get; }\n    public override System.IO.DriveType DriveType { get; }\n    public override bool IsReady { get; }\n    public override string Name { get; }\n    public override System.IO.Abstractions.IDirectoryInfo RootDirectory { get; }\n    public override long TotalFreeSpace { get; }\n    public override long TotalSize { get; }\n    public override string VolumeLabel { get; set; }\n    public override string ToString() { }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Mock DriveInfo Factory in C#\nDESCRIPTION: Defines a factory class `MockDriveInfoFactory` for creating instances of mock drive information objects (`IDriveInfo`). It implements `IDriveInfoFactory` and requires an `IMockFileDataAccessor`. It provides methods to get all mock drives, create a new mock drive info object from a drive name, or wrap existing `System.IO.DriveInfo` instances (though wrapping might be limited in a purely mock context).\nSOURCE: https://github.com/testableio/system.io.abstractions/blob/main/tests/TestableIO.System.IO.Abstractions.Api.Tests/Expected/TestableIO.System.IO.Abstractions.TestingHelpers_netstandard2.1.txt#2025-04-22_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\n    [System.Serializable]\n    public class MockDriveInfoFactory : System.IO.Abstractions.IDriveInfoFactory, System.IO.Abstractions.IFileSystemEntity\n    {\n        public MockDriveInfoFactory(System.IO.Abstractions.TestingHelpers.IMockFileDataAccessor mockFileSystem) { }\n        public System.IO.Abstractions.IFileSystem FileSystem { get; }\n        public System.IO.Abstractions.IDriveInfo[] GetDrives() { }\n        public System.IO.Abstractions.IDriveInfo New(string driveName) { }\n        public System.IO.Abstractions.IDriveInfo Wrap(System.IO.DriveInfo driveInfo) { }\n    }\n\n```\n\n----------------------------------------\n\nTITLE: Implementing MockFileStream Class in C#\nDESCRIPTION: Definition of the MockFileStream class which provides a simulated file stream without accessing the actual file system. This class enables testing of stream operations by working with in-memory data managed by the MockFileDataAccessor.\nSOURCE: https://github.com/testableio/system.io.abstractions/blob/main/tests/TestableIO.System.IO.Abstractions.Api.Tests/Expected/TestableIO.System.IO.Abstractions.TestingHelpers_net6.0.txt#2025-04-22_snippet_19\n\nLANGUAGE: C#\nCODE:\n```\n[System.Serializable]\npublic class MockFileStream : System.IO.Abstractions.FileSystemStream, System.IO.Abstractions.IFileSystemAclSupport\n{\n    public MockFileStream(System.IO.Abstractions.TestingHelpers.IMockFileDataAccessor mockFileDataAccessor, string path, System.IO.FileMode mode, System.IO.FileAccess access = 3, System.IO.FileOptions options = 0) { }\n    public override bool CanRead { get; }\n    public override bool CanWrite { get; }\n    public static System.IO.Abstractions.FileSystemStream Null { get; }\n}\n```\n\n----------------------------------------\n\nTITLE: MockDirectory Class Implementation - C#\nDESCRIPTION: Mock implementation of DirectoryBase class providing test-specific directory operations\nSOURCE: https://github.com/testableio/system.io.abstractions/blob/main/tests/TestableIO.System.IO.Abstractions.Api.Tests/Expected/TestableIO.System.IO.Abstractions.TestingHelpers_net8.0.txt#2025-04-22_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\n[System.Serializable]\npublic class MockDirectory : System.IO.Abstractions.DirectoryBase\n{\n    public MockDirectory(System.IO.Abstractions.TestingHelpers.IMockFileDataAccessor mockFileDataAccessor, string currentDirectory) { }\n    public MockDirectory(System.IO.Abstractions.TestingHelpers.IMockFileDataAccessor mockFileDataAccessor, System.IO.Abstractions.FileBase fileBase, string currentDirectory) { }\n    public override System.IO.Abstractions.IDirectoryInfo CreateDirectory(string path) { }\n    public override System.IO.Abstractions.IDirectoryInfo CreateDirectory(string path, System.IO.UnixFileMode unixCreateMode) { }\n    public override System.IO.Abstractions.IFileSystemInfo CreateSymbolicLink(string path, string pathToTarget) { }\n    public override System.IO.Abstractions.IDirectoryInfo CreateTempSubdirectory(string prefix = null) { }\n    public override void Delete(string path) { }\n    public override void Delete(string path, bool recursive) { }\n    public override System.Collections.Generic.IEnumerable<string> EnumerateDirectories(string path) { }\n    public override System.Collections.Generic.IEnumerable<string> EnumerateDirectories(string path, string searchPattern) { }\n    public override System.Collections.Generic.IEnumerable<string> EnumerateDirectories(string path, string searchPattern, System.IO.EnumerationOptions enumerationOptions) { }\n    public override System.Collections.Generic.IEnumerable<string> EnumerateDirectories(string path, string searchPattern, System.IO.SearchOption searchOption) { }\n    public override System.Collections.Generic.IEnumerable<string> EnumerateFileSystemEntries(string path) { }\n    public override System.Collections.Generic.IEnumerable<string> EnumerateFileSystemEntries(string path, string searchPattern) { }\n    public override System.Collections.Generic.IEnumerable<string> EnumerateFileSystemEntries(string path, string searchPattern, System.IO.EnumerationOptions enumerationOptions) { }\n    public override System.Collections.Generic.IEnumerable<string> EnumerateFileSystemEntries(string path, string searchPattern, System.IO.SearchOption searchOption) { }\n    public override System.Collections.Generic.IEnumerable<string> EnumerateFiles(string path) { }\n    public override System.Collections.Generic.IEnumerable<string> EnumerateFiles(string path, string searchPattern) { }\n    public override System.Collections.Generic.IEnumerable<string> EnumerateFiles(string path, string searchPattern, System.IO.EnumerationOptions enumerationOptions) { }\n    public override System.Collections.Generic.IEnumerable<string> EnumerateFiles(string path, string searchPattern, System.IO.SearchOption searchOption) { }\n    public override bool Exists(string path) { }\n    public override System.DateTime GetCreationTime(string path) { }\n    public override System.DateTime GetCreationTimeUtc(string path) { }\n    public override string GetCurrentDirectory() { }\n    public override string[] GetDirectories(string path) { }\n    public override string[] GetDirectories(string path, string searchPattern) { }\n    public override string[] GetDirectories(string path, string searchPattern, System.IO.EnumerationOptions enumerationOptions) { }\n    public override string[] GetDirectories(string path, string searchPattern, System.IO.SearchOption searchOption) { }\n    public override string GetDirectoryRoot(string path) { }\n    public override string[] GetFileSystemEntries(string path) { }\n    public override string[] GetFileSystemEntries(string path, string searchPattern) { }\n    public override string[] GetFileSystemEntries(string path, string searchPattern, System.IO.EnumerationOptions enumerationOptions) { }\n    public override string[] GetFileSystemEntries(string path, string searchPattern, System.IO.SearchOption searchOption) { }\n    public override string[] GetFiles(string path) { }\n    public override string[] GetFiles(string path, string searchPattern) { }\n    public override string[] GetFiles(string path, string searchPattern, System.IO.EnumerationOptions enumerationOptions) { }\n    public override string[] GetFiles(string path, string searchPattern, System.IO.SearchOption searchOption) { }\n    public override System.DateTime GetLastAccessTime(string path) { }\n    public override System.DateTime GetLastAccessTimeUtc(string path) { }\n    public override System.DateTime GetLastWriteTime(string path) { }\n    public override System.DateTime GetLastWriteTimeUtc(string path) { }\n    public override string[] GetLogicalDrives() { }\n    public override System.IO.Abstractions.IDirectoryInfo GetParent(string path) { }\n    public override void Move(string sourceDirName, string destDirName) { }\n    public override System.IO.Abstractions.IFileSystemInfo ResolveLinkTarget(string linkPath, bool returnFinalTarget) { }\n    public override void SetCreationTime(string path, System.DateTime creationTime) { }\n    public override void SetCreationTimeUtc(string path, System.DateTime creationTimeUtc) { }\n    public override void SetCurrentDirectory(string path) { }\n    public override void SetLastAccessTime(string path, System.DateTime lastAccessTime) { }\n    public override void SetLastAccessTimeUtc(string path, System.DateTime lastAccessTimeUtc) { }\n    public override void SetLastWriteTime(string path, System.DateTime lastWriteTime) { }\n    public override void SetLastWriteTimeUtc(string path, System.DateTime lastWriteTimeUtc) { }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing DirectoryWrapper for Static Directory Operations (C#)\nDESCRIPTION: This snippet defines the `DirectoryWrapper` class, inheriting from `DirectoryBase`. It wraps the static methods of the standard `System.IO.Directory` class, providing an object-oriented, testable interface for directory operations like creating directories (including with Unix modes or as temp subdirectories), creating symbolic links, deleting directories, and enumerating directory paths or file system entry paths. It uses an `IFileSystem` instance passed during construction.\nSOURCE: https://github.com/testableio/system.io.abstractions/blob/main/tests/TestableIO.System.IO.Abstractions.Api.Tests/Expected/TestableIO.System.IO.Abstractions.Wrappers_net9.0.txt#2025-04-22_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\n    [System.Serializable]\n    public class DirectoryWrapper : System.IO.Abstractions.DirectoryBase\n    {\n        public DirectoryWrapper(System.IO.Abstractions.IFileSystem fileSystem) { }\n        public override System.IO.Abstractions.IDirectoryInfo CreateDirectory(string path) { }\n        [System.Runtime.Versioning.UnsupportedOSPlatform(\"windows\")]\n        public override System.IO.Abstractions.IDirectoryInfo CreateDirectory(string path, System.IO.UnixFileMode unixCreateMode) { }\n        public override System.IO.Abstractions.IFileSystemInfo CreateSymbolicLink(string path, string pathToTarget) { }\n        public override System.IO.Abstractions.IDirectoryInfo CreateTempSubdirectory(string prefix = null) { }\n        public override void Delete(string path) { }\n        public override void Delete(string path, bool recursive) { }\n        public override System.Collections.Generic.IEnumerable<string> EnumerateDirectories(string path) { }\n        public override System.Collections.Generic.IEnumerable<string> EnumerateDirectories(string path, string searchPattern) { }\n        public override System.Collections.Generic.IEnumerable<string> EnumerateDirectories(string path, string searchPattern, System.IO.EnumerationOptions enumerationOptions) { }\n        public override System.Collections.Generic.IEnumerable<string> EnumerateDirectories(string path, string searchPattern, System.IO.SearchOption searchOption) { }\n        public override System.Collections.Generic.IEnumerable<string> EnumerateFileSystemEntries(string path) { }\n        public override System.Collections.Generic.IEnumerable<string> EnumerateFileSystemEntries(string path, string searchPattern) { }\n        public override System.Collections.Generic.IEnumerable<string> EnumerateFileSystemEntries(string path, string searchPattern, System.IO.EnumerationOptions enumerationOptions) { }\n        public override System.Collections.Generic.IEnumerable<string> EnumerateFileSystemEntries(string path, string searchPattern, System.IO.SearchOption searchOption) { }\n\n```\n\n----------------------------------------\n\nTITLE: Defining MockFileInfoFactory in C#\nDESCRIPTION: Defines the `MockFileInfoFactory` class, which implements `IFileInfoFactory` and `IFileSystemEntity` from System.IO.Abstractions. This factory is used within the mock file system to create instances of mock `IFileInfo` objects, allowing simulation of file metadata retrieval for testing purposes. It requires an `IMockFileDataAccessor` for accessing mock file data.\nSOURCE: https://github.com/testableio/system.io.abstractions/blob/main/tests/TestableIO.System.IO.Abstractions.Api.Tests/Expected/TestableIO.System.IO.Abstractions.TestingHelpers_net472.txt#2025-04-22_snippet_9\n\nLANGUAGE: csharp\nCODE:\n```\n[System.Serializable]\npublic class MockFileInfoFactory : System.IO.Abstractions.IFileInfoFactory, System.IO.Abstractions.IFileSystemEntity\n{\n    public MockFileInfoFactory(System.IO.Abstractions.TestingHelpers.IMockFileDataAccessor mockFileSystem) { }\n    public System.IO.Abstractions.IFileSystem FileSystem { get; }\n    public System.IO.Abstractions.IFileInfo New(string fileName) { }\n    public System.IO.Abstractions.IFileInfo Wrap(System.IO.FileInfo fileInfo) { }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing File Operation Methods in C#\nDESCRIPTION: This snippet shows a series of abstract method signatures for various file operations, including moving, opening, reading, and writing files. These methods provide a comprehensive set of file manipulation capabilities.\nSOURCE: https://github.com/testableio/system.io.abstractions/blob/main/tests/TestableIO.System.IO.Abstractions.Api.Tests/Expected/TestableIO.System.IO.Abstractions.Wrappers_net8.0.txt#2025-04-22_snippet_21\n\nLANGUAGE: C#\nCODE:\n```\npublic override void Move(string sourceFileName, string destFileName) { }\npublic override void Move(string sourceFileName, string destFileName, bool overwrite) { }\npublic override System.IO.Abstractions.FileSystemStream Open(string path, System.IO.FileMode mode) { }\npublic override System.IO.Abstractions.FileSystemStream Open(string path, System.IO.FileStreamOptions options) { }\npublic override System.IO.Abstractions.FileSystemStream Open(string path, System.IO.FileMode mode, System.IO.FileAccess access) { }\npublic override System.IO.Abstractions.FileSystemStream Open(string path, System.IO.FileMode mode, System.IO.FileAccess access, System.IO.FileShare share) { }\npublic override System.IO.Abstractions.FileSystemStream OpenRead(string path) { }\npublic override System.IO.StreamReader OpenText(string path) { }\npublic override System.IO.Abstractions.FileSystemStream OpenWrite(string path) { }\npublic override byte[] ReadAllBytes(string path) { }\npublic override System.Threading.Tasks.Task<byte[]> ReadAllBytesAsync(string path, System.Threading.CancellationToken cancellationToken = default) { }\npublic override string[] ReadAllLines(string path) { }\npublic override string[] ReadAllLines(string path, System.Text.Encoding encoding) { }\npublic override System.Threading.Tasks.Task<string[]> ReadAllLinesAsync(string path, System.Threading.CancellationToken cancellationToken = default) { }\npublic override System.Threading.Tasks.Task<string[]> ReadAllLinesAsync(string path, System.Text.Encoding encoding, System.Threading.CancellationToken cancellationToken = default) { }\npublic override string ReadAllText(string path) { }\npublic override string ReadAllText(string path, System.Text.Encoding encoding) { }\npublic override System.Threading.Tasks.Task<string> ReadAllTextAsync(string path, System.Threading.CancellationToken cancellationToken = default) { }\npublic override System.Threading.Tasks.Task<string> ReadAllTextAsync(string path, System.Text.Encoding encoding, System.Threading.CancellationToken cancellationToken = default) { }\npublic override System.Collections.Generic.IEnumerable<string> ReadLines(string path) { }\npublic override System.Collections.Generic.IEnumerable<string> ReadLines(string path, System.Text.Encoding encoding) { }\npublic override System.Collections.Generic.IAsyncEnumerable<string> ReadLinesAsync(string path, System.Threading.CancellationToken cancellationToken = default) { }\npublic override System.Collections.Generic.IAsyncEnumerable<string> ReadLinesAsync(string path, System.Text.Encoding encoding, System.Threading.CancellationToken cancellationToken = default) { }\npublic override void Replace(string sourceFileName, string destinationFileName, string destinationBackupFileName) { }\npublic override void Replace(string sourceFileName, string destinationFileName, string destinationBackupFileName, bool ignoreMetadataErrors) { }\npublic override System.IO.Abstractions.IFileSystemInfo ResolveLinkTarget(string linkPath, bool returnFinalTarget) { }\npublic override void SetAttributes(Microsoft.Win32.SafeHandles.SafeFileHandle fileHandle, System.IO.FileAttributes fileAttributes) { }\npublic override void SetAttributes(string path, System.IO.FileAttributes fileAttributes) { }\npublic override void SetCreationTime(Microsoft.Win32.SafeHandles.SafeFileHandle fileHandle, System.DateTime creationTime) { }\npublic override void SetCreationTime(string path, System.DateTime creationTime) { }\npublic override void SetCreationTimeUtc(Microsoft.Win32.SafeHandles.SafeFileHandle fileHandle, System.DateTime creationTimeUtc) { }\npublic override void SetCreationTimeUtc(string path, System.DateTime creationTimeUtc) { }\npublic override void SetLastAccessTime(Microsoft.Win32.SafeHandles.SafeFileHandle fileHandle, System.DateTime lastAccessTime) { }\npublic override void SetLastAccessTime(string path, System.DateTime lastAccessTime) { }\npublic override void SetLastAccessTimeUtc(Microsoft.Win32.SafeHandles.SafeFileHandle fileHandle, System.DateTime lastAccessTimeUtc) { }\npublic override void SetLastAccessTimeUtc(string path, System.DateTime lastAccessTimeUtc) { }\npublic override void SetLastWriteTime(Microsoft.Win32.SafeHandles.SafeFileHandle fileHandle, System.DateTime lastWriteTime) { }\npublic override void SetLastWriteTime(string path, System.DateTime lastWriteTime) { }\npublic override void SetLastWriteTimeUtc(Microsoft.Win32.SafeHandles.SafeFileHandle fileHandle, System.DateTime lastWriteTimeUtc) { }\npublic override void SetLastWriteTimeUtc(string path, System.DateTime lastWriteTimeUtc) { }\n[System.Runtime.Versioning.UnsupportedOSPlatform(\"windows\")]\npublic override void SetUnixFileMode(Microsoft.Win32.SafeHandles.SafeFileHandle fileHandle, System.IO.UnixFileMode mode) { }\n[System.Runtime.Versioning.UnsupportedOSPlatform(\"windows\")]\npublic override void SetUnixFileMode(string path, System.IO.UnixFileMode mode) { }\npublic override void WriteAllBytes(string path, byte[] bytes) { }\npublic override System.Threading.Tasks.Task WriteAllBytesAsync(string path, byte[] bytes, System.Threading.CancellationToken cancellationToken = default) { }\npublic override void WriteAllLines(string path, System.Collections.Generic.IEnumerable<string> contents) { }\npublic override void WriteAllLines(string path, string[] contents) { }\npublic override void WriteAllLines(string path, System.Collections.Generic.IEnumerable<string> contents, System.Text.Encoding encoding) { }\npublic override void WriteAllLines(string path, string[] contents, System.Text.Encoding encoding) { }\npublic override System.Threading.Tasks.Task WriteAllLinesAsync(string path, System.Collections.Generic.IEnumerable<string> contents, System.Threading.CancellationToken cancellationToken = default) { }\npublic override System.Threading.Tasks.Task WriteAllLinesAsync(string path, System.Collections.Generic.IEnumerable<string> contents, System.Text.Encoding encoding, System.Threading.CancellationToken cancellationToken = default) { }\npublic override void WriteAllText(string path, string contents) { }\npublic override void WriteAllText(string path, string contents, System.Text.Encoding encoding) { }\npublic override System.Threading.Tasks.Task WriteAllTextAsync(string path, string contents, System.Threading.CancellationToken cancellationToken = default) { }\npublic override System.Threading.Tasks.Task WriteAllTextAsync(string path, string contents, System.Text.Encoding encoding, System.Threading.CancellationToken cancellationToken = default) { }\n```\n\n----------------------------------------\n\nTITLE: Overriding File Operations with MockFile and System.IO.Abstractions in C#\nDESCRIPTION: The MockFile class overrides a comprehensive suite of file methods, mimicking real file system operations like reading, writing, moving, deleting, appending, encryption, and attribute manipulation for unit testing. It accepts a mock file data accessor in the constructor and operates via paths and content/encoding parameters, returning results through interface-based streams and writers. The supported methods enable thorough test coverage for applications depending on file I/O.\nSOURCE: https://github.com/testableio/system.io.abstractions/blob/main/tests/TestableIO.System.IO.Abstractions.Api.Tests/Expected/TestableIO.System.IO.Abstractions.TestingHelpers_net472.txt#2025-04-22_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\n[System.Serializable]\npublic class MockFile : System.IO.Abstractions.FileBase\n{\n    public MockFile(System.IO.Abstractions.TestingHelpers.IMockFileDataAccessor mockFileDataAccessor) { }\n    public override void AppendAllLines(string path, System.Collections.Generic.IEnumerable<string> contents) { }\n    public override void AppendAllLines(string path, System.Collections.Generic.IEnumerable<string> contents, System.Text.Encoding encoding) { }\n    public override void AppendAllText(string path, string contents) { }\n    public override void AppendAllText(string path, string contents, System.Text.Encoding encoding) { }\n    public override System.IO.StreamWriter AppendText(string path) { }\n    public override void Copy(string sourceFileName, string destFileName) { }\n    public override void Copy(string sourceFileName, string destFileName, bool overwrite) { }\n    public override System.IO.Abstractions.FileSystemStream Create(string path) { }\n    public override System.IO.Abstractions.FileSystemStream Create(string path, int bufferSize) { }\n    public override System.IO.Abstractions.FileSystemStream Create(string path, int bufferSize, System.IO.FileOptions options) { }\n    public override System.IO.StreamWriter CreateText(string path) { }\n    public override void Decrypt(string path) { }\n    public override void Delete(string path) { }\n    public override void Encrypt(string path) { }\n    public override bool Exists(string path) { }\n    public override System.IO.FileAttributes GetAttributes(string path) { }\n    public override System.DateTime GetCreationTime(string path) { }\n    public override System.DateTime GetCreationTimeUtc(string path) { }\n    public override System.DateTime GetLastAccessTime(string path) { }\n    public override System.DateTime GetLastAccessTimeUtc(string path) { }\n    public override System.DateTime GetLastWriteTime(string path) { }\n    public override System.DateTime GetLastWriteTimeUtc(string path) { }\n    public override void Move(string sourceFileName, string destFileName) { }\n    public override System.IO.Abstractions.FileSystemStream Open(string path, System.IO.FileMode mode) { }\n    public override System.IO.Abstractions.FileSystemStream Open(string path, System.IO.FileMode mode, System.IO.FileAccess access) { }\n    public override System.IO.Abstractions.FileSystemStream Open(string path, System.IO.FileMode mode, System.IO.FileAccess access, System.IO.FileShare share) { }\n    public override System.IO.Abstractions.FileSystemStream OpenRead(string path) { }\n    public override System.IO.StreamReader OpenText(string path) { }\n    public override System.IO.Abstractions.FileSystemStream OpenWrite(string path) { }\n    public override byte[] ReadAllBytes(string path) { }\n    public override string[] ReadAllLines(string path) { }\n    public override string[] ReadAllLines(string path, System.Text.Encoding encoding) { }\n    public override string ReadAllText(string path) { }\n    public override string ReadAllText(string path, System.Text.Encoding encoding) { }\n    public override System.Collections.Generic.IEnumerable<string> ReadLines(string path) { }\n    public override System.Collections.Generic.IEnumerable<string> ReadLines(string path, System.Text.Encoding encoding) { }\n    public override void Replace(string sourceFileName, string destinationFileName, string destinationBackupFileName) { }\n    public override void Replace(string sourceFileName, string destinationFileName, string destinationBackupFileName, bool ignoreMetadataErrors) { }\n    public override void SetAttributes(string path, System.IO.FileAttributes fileAttributes) { }\n    public override void SetCreationTime(string path, System.DateTime creationTime) { }\n    public override void SetCreationTimeUtc(string path, System.DateTime creationTimeUtc) { }\n    public override void SetLastAccessTime(string path, System.DateTime lastAccessTime) { }\n    public override void SetLastAccessTimeUtc(string path, System.DateTime lastAccessTimeUtc) { }\n    public override void SetLastWriteTime(string path, System.DateTime lastWriteTime) { }\n    public override void SetLastWriteTimeUtc(string path, System.DateTime lastWriteTimeUtc) { }\n    public override void WriteAllBytes(string path, byte[] bytes) { }\n    public override void WriteAllLines(string path, System.Collections.Generic.IEnumerable<string> contents) { }\n    public override void WriteAllLines(string path, string[] contents) { }\n    public override void WriteAllLines(string path, System.Collections.Generic.IEnumerable<string> contents, System.Text.Encoding encoding) { }\n    public override void WriteAllLines(string path, string[] contents, System.Text.Encoding encoding) { }\n    public override void WriteAllText(string path, string contents) { }\n    public override void WriteAllText(string path, string contents, System.Text.Encoding encoding) { }\n}\n```\n\n----------------------------------------\n\nTITLE: Constructing a Mock Drive Info Factory - System.IO.Abstractions - C#\nDESCRIPTION: This snippet defines the MockDriveInfoFactory class, which implements IDriveInfoFactory and IFileSystemEntity for managing and creating mock drive info objects. It is designed for testing code dependent on System.IO.DriveInfo using mock drives provided via IMockFileDataAccessor. The factory pattern supports methods for creating new mock drives by name, wrapping existing DriveInfo instances, and listing available mocked drives, facilitating consistent drive-related test setups.\nSOURCE: https://github.com/testableio/system.io.abstractions/blob/main/tests/TestableIO.System.IO.Abstractions.Api.Tests/Expected/TestableIO.System.IO.Abstractions.TestingHelpers_net9.0.txt#2025-04-22_snippet_9\n\nLANGUAGE: csharp\nCODE:\n```\n[System.Serializable]\npublic class MockDriveInfoFactory : System.IO.Abstractions.IDriveInfoFactory, System.IO.Abstractions.IFileSystemEntity\n{\n    public MockDriveInfoFactory(System.IO.Abstractions.TestingHelpers.IMockFileDataAccessor mockFileSystem) { }\n    public System.IO.Abstractions.IFileSystem FileSystem { get; }\n    public System.IO.Abstractions.IDriveInfo[] GetDrives() { }\n    public System.IO.Abstractions.IDriveInfo New(string driveName) { }\n    public System.IO.Abstractions.IDriveInfo Wrap(System.IO.DriveInfo driveInfo) { }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining FileSystemWatcherBase Abstract Class in C#\nDESCRIPTION: An abstract base class that implements IFileSystemWatcher interface. It provides methods and properties for monitoring changes to files and directories in the file system.\nSOURCE: https://github.com/testableio/system.io.abstractions/blob/main/tests/TestableIO.System.IO.Abstractions.Api.Tests/Expected/TestableIO.System.IO.Abstractions.Wrappers_netstandard2.1.txt#2025-04-22_snippet_18\n\nLANGUAGE: C#\nCODE:\n```\n[System.Serializable]\npublic abstract class FileSystemWatcherBase : System.IDisposable, System.IO.Abstractions.IFileSystemEntity, System.IO.Abstractions.IFileSystemWatcher\n{\n    protected FileSystemWatcherBase() { }\n    public abstract System.ComponentModel.IContainer Container { get; }\n    public abstract bool EnableRaisingEvents { get; set; }\n    public abstract System.IO.Abstractions.IFileSystem FileSystem { get; }\n    public abstract string Filter { get; set; }\n    public abstract bool IncludeSubdirectories { get; set; }\n    public abstract int InternalBufferSize { get; set; }\n    public abstract System.IO.NotifyFilters NotifyFilter { get; set; }\n    public abstract string Path { get; set; }\n    public abstract System.ComponentModel.ISite Site { get; set; }\n    public abstract System.ComponentModel.ISynchronizeInvoke SynchronizingObject { get; set; }\n    public virtual event System.IO.FileSystemEventHandler Changed;\n    public virtual event System.IO.FileSystemEventHandler Created;\n    public virtual event System.IO.FileSystemEventHandler Deleted;\n    public virtual event System.IO.ErrorEventHandler Error;\n    public virtual event System.IO.RenamedEventHandler Renamed;\n    public abstract void BeginInit();\n    public void Dispose() { }\n    public virtual void Dispose(bool disposing) { }\n    public abstract void EndInit();\n    protected void OnChanged(object sender, System.IO.FileSystemEventArgs args) { }\n    protected void OnCreated(object sender, System.IO.FileSystemEventArgs args) { }\n    protected void OnDeleted(object sender, System.IO.FileSystemEventArgs args) { }\n    protected void OnError(object sender, System.IO.ErrorEventArgs args) { }\n    protected void OnRenamed(object sender, System.IO.RenamedEventArgs args) { }\n    public abstract System.IO.Abstractions.IWaitForChangedResult WaitForChanged(System.IO.WatcherChangeTypes changeType);\n    public abstract System.IO.Abstractions.IWaitForChangedResult WaitForChanged(System.IO.WatcherChangeTypes changeType, int timeout);\n    public static System.IO.Abstractions.FileSystemWatcherBase op_Implicit(System.IO.FileSystemWatcher watcher) { }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing MockFileInfoFactory Class in C#\nDESCRIPTION: Definition of the MockFileInfoFactory class for creating MockFileInfo instances. This factory class implements the IFileInfoFactory interface to provide mock file info objects for testing file system operations.\nSOURCE: https://github.com/testableio/system.io.abstractions/blob/main/tests/TestableIO.System.IO.Abstractions.Api.Tests/Expected/TestableIO.System.IO.Abstractions.TestingHelpers_net6.0.txt#2025-04-22_snippet_18\n\nLANGUAGE: C#\nCODE:\n```\n[System.Serializable]\npublic class MockFileInfoFactory : System.IO.Abstractions.IFileInfoFactory, System.IO.Abstractions.IFileSystemEntity\n{\n    public MockFileInfoFactory(System.IO.Abstractions.TestingHelpers.IMockFileDataAccessor mockFileSystem) { }\n    public System.IO.Abstractions.IFileSystem FileSystem { get; }\n    public System.IO.Abstractions.IFileInfo New(string fileName) { }\n    public System.IO.Abstractions.IFileInfo Wrap(System.IO.FileInfo fileInfo) { }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining DirectoryInfoBase Abstract Class\nDESCRIPTION: Abstract base class extending FileSystemInfoBase to implement IDirectoryInfo and IFileSystemInfo interfaces. Provides methods for directory-specific information and manipulation.\nSOURCE: https://github.com/testableio/system.io.abstractions/blob/main/tests/TestableIO.System.IO.Abstractions.Api.Tests/Expected/TestableIO.System.IO.Abstractions.Wrappers_net6.0.txt#2025-04-22_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\n[System.Serializable]\npublic abstract class DirectoryInfoBase : System.IO.Abstractions.FileSystemInfoBase, System.IO.Abstractions.IDirectoryInfo, System.IO.Abstractions.IFileSystemInfo\n{\n    protected DirectoryInfoBase(System.IO.Abstractions.IFileSystem fileSystem) { }\n    public abstract System.IO.Abstractions.IDirectoryInfo Parent { get; }\n    public abstract System.IO.Abstractions.IDirectoryInfo Root { get; }\n    public abstract void Create();\n    public abstract System.IO.Abstractions.IDirectoryInfo CreateSubdirectory(string path);\n    public abstract void Delete(bool recursive);\n    public abstract System.Collections.Generic.IEnumerable<System.IO.Abstractions.IDirectoryInfo> EnumerateDirectories();\n    public abstract System.Collections.Generic.IEnumerable<System.IO.Abstractions.IDirectoryInfo> EnumerateDirectories(string searchPattern);\n    public abstract System.Collections.Generic.IEnumerable<System.IO.Abstractions.IDirectoryInfo> EnumerateDirectories(string searchPattern, System.IO.EnumerationOptions enumerationOptions);\n    public abstract System.Collections.Generic.IEnumerable<System.IO.Abstractions.IDirectoryInfo> EnumerateDirectories(string searchPattern, System.IO.SearchOption searchOption);\n    public abstract System.Collections.Generic.IEnumerable<System.IO.Abstractions.IFileSystemInfo> EnumerateFileSystemInfos();\n    public abstract System.Collections.Generic.IEnumerable<System.IO.Abstractions.IFileSystemInfo> EnumerateFileSystemInfos(string searchPattern);\n    public abstract System.Collections.Generic.IEnumerable<System.IO.Abstractions.IFileSystemInfo> EnumerateFileSystemInfos(string searchPattern, System.IO.EnumerationOptions enumerationOptions);\n    public abstract System.Collections.Generic.IEnumerable<System.IO.Abstractions.IFileSystemInfo> EnumerateFileSystemInfos(string searchPattern, System.IO.SearchOption searchOption);\n}\n```\n\n----------------------------------------\n\nTITLE: Simulating DriveInfo with MockDriveInfo using System.IO.Abstractions in C#\nDESCRIPTION: This snippet implements a mock drive info class inheriting from DriveInfoBase, enabling test code to simulate drive queries (e.g., space, type, readiness) without accessing the real system. It wraps all drive properties and is constructed with a mock file data accessor and name. Use cases include testing drive-dependent code logic in isolation. Methods override DriveInfoBase to provide controllable, fake values for all drive attributes.\nSOURCE: https://github.com/testableio/system.io.abstractions/blob/main/tests/TestableIO.System.IO.Abstractions.Api.Tests/Expected/TestableIO.System.IO.Abstractions.TestingHelpers_netstandard2.0.txt#2025-04-22_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\n[System.Serializable]\npublic class MockDriveInfo : System.IO.Abstractions.DriveInfoBase\n{\n    public MockDriveInfo(System.IO.Abstractions.TestingHelpers.IMockFileDataAccessor mockFileDataAccessor, string name) { }\n    public override long AvailableFreeSpace { get; }\n    public override string DriveFormat { get; }\n    public override System.IO.DriveType DriveType { get; }\n    public override bool IsReady { get; }\n    public override string Name { get; }\n    public override System.IO.Abstractions.IDirectoryInfo RootDirectory { get; }\n    public override long TotalFreeSpace { get; }\n    public override long TotalSize { get; }\n    public override string VolumeLabel { get; set; }\n    public override string ToString() { }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing PathBase in C#\nDESCRIPTION: An abstract base class for path operations that implements System.IO.Abstractions.IPath. It provides properties and methods for manipulating file and directory paths.\nSOURCE: https://github.com/testableio/system.io.abstractions/blob/main/tests/TestableIO.System.IO.Abstractions.Api.Tests/Expected/TestableIO.System.IO.Abstractions.Wrappers_netstandard2.0.txt#2025-04-22_snippet_24\n\nLANGUAGE: C#\nCODE:\n```\n[System.Serializable]\npublic abstract class PathBase : System.IO.Abstractions.IFileSystemEntity, System.IO.Abstractions.IPath\n{\n    protected PathBase(System.IO.Abstractions.IFileSystem fileSystem) { }\n    public abstract char AltDirectorySeparatorChar { get; }\n    public abstract char DirectorySeparatorChar { get; }\n    public System.IO.Abstractions.IFileSystem FileSystem { get; }\n    [System.Obsolete(\"Please use GetInvalidPathChars or GetInvalidFileNameChars instead.\")]\n    public abstract char[] InvalidPathChars { get; }\n    public abstract char PathSeparator { get; }\n    public abstract char VolumeSeparatorChar { get; }\n    public abstract string ChangeExtension(string path, string extension);\n    public abstract string Combine(params string[] paths);\n    public abstract string Combine(string path1, string path2);\n    public abstract string Combine(string path1, string path2, string path3);\n    public abstract string Combine(string path1, string path2, string path3, string path4);\n    public abstract string GetDirectoryName(string path);\n    public abstract string GetExtension(string path);\n    public abstract string GetFileName(string path);\n    public abstract string GetFileNameWithoutExtension(string path);\n    public abstract string GetFullPath(string path);\n    public abstract char[] GetInvalidFileNameChars();\n    public abstract char[] GetInvalidPathChars();\n    public abstract string GetPathRoot(string path);\n    public abstract string GetRandomFileName();\n    public abstract string GetTempFileName();\n    public abstract string GetTempPath();\n    public abstract bool HasExtension(string path);\n    public abstract bool IsPathRooted(string path);\n}\n```\n\n----------------------------------------\n\nTITLE: Defining File and Directory Abstractions in C#\nDESCRIPTION: This snippet demonstrates the override of key System.IO.Abstractions properties and methods, providing an abstract base for file and directory operations. The methods support creating, deleting, moving, and accessing filesystem entities. Dependencies include System.IO.Abstractions and System.Collections.Generic. Input parameters for most methods include `string path` and optional search patterns, with outputs often being information arrays or objects. Limitations include relying on underlying System.IO functionality.\nSOURCE: https://github.com/testableio/system.io.abstractions/blob/main/tests/TestableIO.System.IO.Abstractions.Api.Tests/Expected/TestableIO.System.IO.Abstractions.Wrappers_net472.txt#2025-04-22_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\npublic override string FullName { get; } ... public void SetAccessControl(object value) { } ...\n```\n\n----------------------------------------\n\nTITLE: Implementing FileWrapper Class in C#\nDESCRIPTION: A concrete implementation of FileBase that wraps file operation methods. It implements methods for appending, reading, and writing text to files, supporting various encodings and asynchronous operations.\nSOURCE: https://github.com/testableio/system.io.abstractions/blob/main/tests/TestableIO.System.IO.Abstractions.Api.Tests/Expected/TestableIO.System.IO.Abstractions.Wrappers_netstandard2.1.txt#2025-04-22_snippet_23\n\nLANGUAGE: C#\nCODE:\n```\n[System.Serializable]\npublic class FileWrapper : System.IO.Abstractions.FileBase\n{\n    public FileWrapper(System.IO.Abstractions.IFileSystem fileSystem) { }\n    public override void AppendAllLines(string path, System.Collections.Generic.IEnumerable<string> contents) { }\n    public override void AppendAllLines(string path, System.Collections.Generic.IEnumerable<string> contents, System.Text.Encoding encoding) { }\n    public override System.Threading.Tasks.Task AppendAllLinesAsync(string path, System.Collections.Generic.IEnumerable<string> contents, System.Threading.CancellationToken cancellationToken = default) { }\n    public override System.Threading.Tasks.Task AppendAllLinesAsync(string path, System.Collections.Generic.IEnumerable<string> contents, System.Text.Encoding encoding, System.Threading.CancellationToken cancellationToken = default) { }\n    public override void AppendAllText(string path, string contents) { }\n    public override void AppendAllText(string path, string contents, System.Text.Encoding encoding) { }\n    public override System.Threading.Tasks.Task AppendAllTextAsync(string path, string contents, System.Threading.CancellationToken cancellationToken = default) { }\n    public override System.Threading.Tasks.Task AppendAllTextAsync(string path, string contents, System.Text.Encoding encoding, System.Threading.CancellationToken cancellationToken = default) { }\n    public override System.IO.StreamWriter AppendText(string path) { }\n    public override void Copy(string sourceFileName, string destFileName) { }\n    public override void Copy(string sourceFileName, string destFileName, bool overwrite) { }\n```\n\n----------------------------------------\n\nTITLE: Implementing DirectoryWrapper in C#\nDESCRIPTION: The DirectoryWrapper class in C# implements directory operations such as creating, deleting, and enumerating directories using the System.IO.Abstractions library. It extends the DirectoryBase class providing a concrete implementation that interacts with a fictional file system.\nSOURCE: https://github.com/testableio/system.io.abstractions/blob/main/tests/TestableIO.System.IO.Abstractions.Api.Tests/Expected/TestableIO.System.IO.Abstractions.Wrappers_netstandard2.0.txt#2025-04-22_snippet_7\n\nLANGUAGE: C#\nCODE:\n```\n[System.Serializable]\npublic class DirectoryWrapper : System.IO.Abstractions.DirectoryBase {\n    public DirectoryWrapper(System.IO.Abstractions.IFileSystem fileSystem) { }\n    public override System.IO.Abstractions.IDirectoryInfo CreateDirectory(string path) { }\n    public override void Delete(string path) { }\n    public override void Delete(string path, bool recursive) { }\n    public override System.Collections.Generic.IEnumerable<string> EnumerateDirectories(string path) { }\n    public override System.Collections.Generic.IEnumerable<string> EnumerateDirectories(string path, string searchPattern) { }\n    public override System.Collections.Generic.IEnumerable<string> EnumerateDirectories(string path, string searchPattern, System.IO.SearchOption searchOption) { }\n    public override System.Collections.Generic.IEnumerable<string> EnumerateFileSystemEntries(string path) { }\n    public override System.Collections.Generic.IEnumerable<string> EnumerateFileSystemEntries(string path, string searchPattern) { }\n    public override System.Collections.Generic.IEnumerable<string> EnumerateFileSystemEntries(string path, string searchPattern, System.IO.SearchOption searchOption) { }\n    public override System.Collections.Generic.IEnumerable<string> EnumerateFiles(string path) { }\n    public override System.Collections.Generic.IEnumerable<string> EnumerateFiles(string path, string searchPattern) { }\n    public override System.Collections.Generic.IEnumerable<string> EnumerateFiles(string path, string searchPattern, System.IO.SearchOption searchOption) { }\n    public override bool Exists(string path) { }\n    public override System.DateTime GetCreationTime(string path) { }\n    public override System.DateTime GetCreationTimeUtc(string path) { }\n    public override string GetCurrentDirectory() { }\n    public override string[] GetDirectories(string path) { }\n    public override string[] GetDirectories(string path, string searchPattern) { }\n    public override string[] GetDirectories(string path, string searchPattern, System.IO.SearchOption searchOption) { }\n    public override string GetDirectoryRoot(string path) { }\n    public override string[] GetFileSystemEntries(string path) { }\n    public override string[] GetFileSystemEntries(string path, string searchPattern) { }\n    public override string[] GetFileSystemEntries(string path, searchPattern, System.IO.SearchOption searchOption) { }\n    public override string[] GetFiles(string path) { }\n    public override string[] GetFiles(string path, searchPattern) { }\n    public override string[] GetFiles(string path, string searchPattern, System.IO.SearchOption searchOption) { }\n    public override System.DateTime GetLastAccessTime(string path) { }\n    public override System.DateTime GetLastAccessTimeUtc(string path) { }\n    public override System.DateTime GetLastWriteTime(string path) { }\n    public override System.DateTime GetLastWriteTimeUtc(string path) { }\n    public override string[] GetLogicalDrives() { }\n    public override System.IO.Abstractions.IDirectoryInfo GetParent(string path) { }\n    public override void Move(string sourceDirName, string destDirName) { }\n    public override void SetCreationTime(string path, System.DateTime creationTime) { }\n    public override void SetCreationTimeUtc(string path, System.DateTime creationTimeUtc) { }\n    public override void SetCurrentDirectory(string path) { }\n    public override void SetLastAccessTime(string path, System.DateTime lastAccessTime) { }\n    public override void SetLastAccessTimeUtc(string path, System.DateTime lastAccessTimeUtc) { }\n    public override void SetLastWriteTime(string path, System.DateTime lastWriteTime) { }\n    public override void SetLastWriteTimeUtc(string path, System.DateTime lastWriteTimeUtc) { }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing DirectoryWrapper Class in C#\nDESCRIPTION: Implements the `DirectoryWrapper` class, inheriting from `DirectoryBase`. This class wraps static `System.IO.Directory` methods, providing an instance-based, testable way to perform directory operations via the `System.IO.Abstractions` interfaces. It includes methods for creating directories (including with Unix modes), creating symbolic links, creating temporary subdirectories, deleting directories, and enumerating directories and file system entries based on paths and search patterns. Requires a `System.IO.Abstractions.IFileSystem` instance for construction.\nSOURCE: https://github.com/testableio/system.io.abstractions/blob/main/tests/TestableIO.System.IO.Abstractions.Api.Tests/Expected/TestableIO.System.IO.Abstractions.Wrappers_net8.0.txt#2025-04-22_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\n    [System.Serializable]\n    public class DirectoryWrapper : System.IO.Abstractions.DirectoryBase\n    {\n        public DirectoryWrapper(System.IO.Abstractions.IFileSystem fileSystem) { }\n        public override System.IO.Abstractions.IDirectoryInfo CreateDirectory(string path) { }\n        [System.Runtime.Versioning.UnsupportedOSPlatform(\"windows\")]\n        public override System.IO.Abstractions.IDirectoryInfo CreateDirectory(string path, System.IO.UnixFileMode unixCreateMode) { }\n        public override System.IO.Abstractions.IFileSystemInfo CreateSymbolicLink(string path, string pathToTarget) { }\n        public override System.IO.Abstractions.IDirectoryInfo CreateTempSubdirectory(string prefix = null) { }\n        public override void Delete(string path) { }\n        public override void Delete(string path, bool recursive) { }\n        public override System.Collections.Generic.IEnumerable<string> EnumerateDirectories(string path) { }\n        public override System.Collections.Generic.IEnumerable<string> EnumerateDirectories(string path, string searchPattern) { }\n        public override System.Collections.Generic.IEnumerable<string> EnumerateDirectories(string path, string searchPattern, System.IO.EnumerationOptions enumerationOptions) { }\n        public override System.Collections.Generic.IEnumerable<string> EnumerateDirectories(string path, string searchPattern, System.IO.SearchOption searchOption) { }\n        public override System.Collections.Generic.IEnumerable<string> EnumerateFileSystemEntries(string path) { }\n        public override System.Collections.Generic.IEnumerable<string> EnumerateFileSystemEntries(string path, string searchPattern) { }\n        public override System.Collections.Generic.IEnumerable<string> EnumerateFileSystemEntries(string path, string searchPattern, System.IO.EnumerationOptions enumerationOptions) { }\n        public override System.Collections.Generic.IEnumerable<string> EnumerateFileSystemEntries(string path, string searchPattern, System.IO.SearchOption searchOption) { }\n\n```\n\n----------------------------------------\n\nTITLE: Implementing FileSystemWatcherFactory Class in C#\nDESCRIPTION: A factory class for creating and managing file system watchers. It provides methods to create new watchers or wrap existing System.IO.FileSystemWatcher instances.\nSOURCE: https://github.com/testableio/system.io.abstractions/blob/main/tests/TestableIO.System.IO.Abstractions.Api.Tests/Expected/TestableIO.System.IO.Abstractions.Wrappers_netstandard2.1.txt#2025-04-22_snippet_19\n\nLANGUAGE: C#\nCODE:\n```\n[System.Serializable]\npublic class FileSystemWatcherFactory : System.IO.Abstractions.IFileSystemEntity, System.IO.Abstractions.IFileSystemWatcherFactory\n{\n    public FileSystemWatcherFactory(System.IO.Abstractions.IFileSystem fileSystem) { }\n    public System.IO.Abstractions.IFileSystem FileSystem { get; }\n    public System.IO.Abstractions.IFileSystemWatcher New() { }\n    public System.IO.Abstractions.IFileSystemWatcher New(string path) { }\n    public System.IO.Abstractions.IFileSystemWatcher New(string path, string filter) { }\n    public System.IO.Abstractions.IFileSystemWatcher Wrap(System.IO.FileSystemWatcher fileSystemWatcher) { }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Abstract DirectoryInfoBase Class in C#\nDESCRIPTION: Defines the abstract base class `DirectoryInfoBase` within the `System.IO.Abstractions` namespace. It outlines the contract for directory information operations, mirroring many methods and properties of `System.IO.DirectoryInfo`, but using interfaces like `IFileSystemInfo`, `IFileInfo`, and `IDirectoryInfo`. It includes abstract methods for enumerating and getting files, directories, and file system infos, moving directories, and a static implicit operator.\nSOURCE: https://github.com/testableio/system.io.abstractions/blob/main/tests/TestableIO.System.IO.Abstractions.Api.Tests/Expected/TestableIO.System.IO.Abstractions.Wrappers_net8.0.txt#2025-04-22_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\n        public abstract System.Collections.Generic.IEnumerable<System.IO.Abstractions.IFileSystemInfo> EnumerateFileSystemInfos(string searchPattern, System.IO.SearchOption searchOption);\n        public abstract System.Collections.Generic.IEnumerable<System.IO.Abstractions.IFileInfo> EnumerateFiles();\n        public abstract System.Collections.Generic.IEnumerable<System.IO.Abstractions.IFileInfo> EnumerateFiles(string searchPattern);\n        public abstract System.Collections.Generic.IEnumerable<System.IO.Abstractions.IFileInfo> EnumerateFiles(string searchPattern, System.IO.EnumerationOptions enumerationOptions);\n        public abstract System.Collections.Generic.IEnumerable<System.IO.Abstractions.IFileInfo> EnumerateFiles(string searchPattern, System.IO.SearchOption searchOption);\n        public abstract System.IO.Abstractions.IDirectoryInfo[] GetDirectories();\n        public abstract System.IO.Abstractions.IDirectoryInfo[] GetDirectories(string searchPattern);\n        public abstract System.IO.Abstractions.IDirectoryInfo[] GetDirectories(string searchPattern, System.IO.EnumerationOptions enumerationOptions);\n        public abstract System.IO.Abstractions.IDirectoryInfo[] GetDirectories(string searchPattern, System.IO.SearchOption searchOption);\n        public abstract System.IO.Abstractions.IFileSystemInfo[] GetFileSystemInfos();\n        public abstract System.IO.Abstractions.IFileSystemInfo[] GetFileSystemInfos(string searchPattern);\n        public abstract System.IO.Abstractions.IFileSystemInfo[] GetFileSystemInfos(string searchPattern, System.IO.EnumerationOptions enumerationOptions);\n        public abstract System.IO.Abstractions.IFileSystemInfo[] GetFileSystemInfos(string searchPattern, System.IO.SearchOption searchOption);\n        public abstract System.IO.Abstractions.IFileInfo[] GetFiles();\n        public abstract System.IO.Abstractions.IFileInfo[] GetFiles(string searchPattern);\n        public abstract System.IO.Abstractions.IFileInfo[] GetFiles(string searchPattern, System.IO.EnumerationOptions enumerationOptions);\n        public abstract System.IO.Abstractions.IFileInfo[] GetFiles(string searchPattern, System.IO.SearchOption searchOption);\n        public abstract void MoveTo(string destDirName);\n        public static System.IO.Abstractions.DirectoryInfoBase op_Implicit(System.IO.DirectoryInfo directoryInfo) { }\n    }\n\n```\n\n----------------------------------------\n\nTITLE: Defining Abstract Directory Enumeration/Retrieval Methods in C#\nDESCRIPTION: This snippet shows abstract method definitions within a base class (likely `DirectoryInfoBase`) for enumerating and retrieving files (`EnumerateFiles`, `GetFiles`), directories (`GetDirectories`, `EnumerateDirectories`), and file system information (`GetFileSystemInfos`, `EnumerateFileSystemInfos`). It includes various overloads accepting search patterns and enumeration options. It also defines an abstract `MoveTo` method and a static implicit conversion operator from `System.IO.DirectoryInfo`. These abstract members must be implemented by derived classes.\nSOURCE: https://github.com/testableio/system.io.abstractions/blob/main/tests/TestableIO.System.IO.Abstractions.Api.Tests/Expected/TestableIO.System.IO.Abstractions.Wrappers_net6.0.txt#2025-04-22_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\n        public abstract System.Collections.Generic.IEnumerable<System.IO.Abstractions.IFileInfo> EnumerateFiles();\n        public abstract System.Collections.Generic.IEnumerable<System.IO.Abstractions.IFileInfo> EnumerateFiles(string searchPattern);\n        public abstract System.Collections.Generic.IEnumerable<System.IO.Abstractions.IFileInfo> EnumerateFiles(string searchPattern, System.IO.EnumerationOptions enumerationOptions);\n        public abstract System.Collections.Generic.IEnumerable<System.IO.Abstractions.IFileInfo> EnumerateFiles(string searchPattern, System.IO.SearchOption searchOption);\n        public abstract System.IO.Abstractions.IDirectoryInfo[] GetDirectories();\n        public abstract System.IO.Abstractions.IDirectoryInfo[] GetDirectories(string searchPattern);\n        public abstract System.IO.Abstractions.IDirectoryInfo[] GetDirectories(string searchPattern, System.IO.EnumerationOptions enumerationOptions);\n        public abstract System.IO.Abstractions.IDirectoryInfo[] GetDirectories(string searchPattern, System.IO.SearchOption searchOption);\n        public abstract System.IO.Abstractions.IFileSystemInfo[] GetFileSystemInfos();\n        public abstract System.IO.Abstractions.IFileSystemInfo[] GetFileSystemInfos(string searchPattern);\n        public abstract System.IO.Abstractions.IFileSystemInfo[] GetFileSystemInfos(string searchPattern, System.IO.EnumerationOptions enumerationOptions);\n        public abstract System.IO.Abstractions.IFileSystemInfo[] GetFileSystemInfos(string searchPattern, System.IO.SearchOption searchOption);\n        public abstract System.IO.Abstractions.IFileInfo[] GetFiles();\n        public abstract System.IO.Abstractions.IFileInfo[] GetFiles(string searchPattern);\n        public abstract System.IO.Abstractions.IFileInfo[] GetFiles(string searchPattern, System.IO.EnumerationOptions enumerationOptions);\n        public abstract System.IO.Abstractions.IFileInfo[] GetFiles(string searchPattern, System.IO.SearchOption searchOption);\n        public abstract void MoveTo(string destDirName);\n        public static System.IO.Abstractions.DirectoryInfoBase op_Implicit(System.IO.DirectoryInfo directoryInfo) { }\n    }\n```\n\n----------------------------------------\n\nTITLE: Implementing MockDriveInfoFactory for DriveInfo Creation using System.IO.Abstractions in C#\nDESCRIPTION: This snippet defines a serializable factory for creating mock drive info objects. It implements IDriveInfoFactory and IFileSystemEntity to provide test versions of system drives with methods for drive enumeration, creation, and wrapping. The factory is constructed with a mock file system accessor, exposing the abstracted IFileSystem interface. Inputs include the drive name or DriveInfo object; outputs are testable IDriveInfo mocks. Used to simulate multiple drives during unit testing.\nSOURCE: https://github.com/testableio/system.io.abstractions/blob/main/tests/TestableIO.System.IO.Abstractions.Api.Tests/Expected/TestableIO.System.IO.Abstractions.TestingHelpers_netstandard2.0.txt#2025-04-22_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\n[System.Serializable]\npublic class MockDriveInfoFactory : System.IO.Abstractions.IDriveInfoFactory, System.IO.Abstractions.IFileSystemEntity\n{\n    public MockDriveInfoFactory(System.IO.Abstractions.TestingHelpers.IMockFileDataAccessor mockFileSystem) { }\n    public System.IO.Abstractions.IFileSystem FileSystem { get; }\n    public System.IO.Abstractions.IDriveInfo[] GetDrives() { }\n    public System.IO.Abstractions.IDriveInfo New(string driveName) { }\n    public System.IO.Abstractions.IDriveInfo Wrap(System.IO.DriveInfo driveInfo) { }\n}\n```\n\n----------------------------------------\n\nTITLE: Overriding File Operation Methods using System.IO.Abstractions in C#\nDESCRIPTION: This collection of method overrides implements key file operations (reading lines, replacing, setting attributes and times, and writing contents) for a mock file abstraction class using the System.IO.Abstractions library. Dependencies include System, System.Collections.Generic, System.Text, and System.Threading.Tasks. Methods support reading and writing bytes and lines, manipulating file attributes and times, and asynchronous operations. Each method accepts relevant file paths, encoding, or cancellation tokens as parameters, and most serve as building blocks for testable file manipulation code.\nSOURCE: https://github.com/testableio/system.io.abstractions/blob/main/tests/TestableIO.System.IO.Abstractions.Api.Tests/Expected/TestableIO.System.IO.Abstractions.TestingHelpers_netstandard2.1.txt#2025-04-22_snippet_10\n\nLANGUAGE: csharp\nCODE:\n```\npublic override System.Collections.Generic.IEnumerable<string> ReadLines(string path) { }\npublic override System.Collections.Generic.IEnumerable<string> ReadLines(string path, System.Text.Encoding encoding) { }\npublic override void Replace(string sourceFileName, string destinationFileName, string destinationBackupFileName) { }\npublic override void Replace(string sourceFileName, string destinationFileName, string destinationBackupFileName, bool ignoreMetadataErrors) { }\npublic override void SetAttributes(string path, System.IO.FileAttributes fileAttributes) { }\npublic override void SetCreationTime(string path, System.DateTime creationTime) { }\npublic override void SetCreationTimeUtc(string path, System.DateTime creationTimeUtc) { }\npublic override void SetLastAccessTime(string path, System.DateTime lastAccessTime) { }\npublic override void SetLastAccessTimeUtc(string path, System.DateTime lastAccessTimeUtc) { }\npublic override void SetLastWriteTime(string path, System.DateTime lastWriteTime) { }\npublic override void SetLastWriteTimeUtc(string path, System.DateTime lastWriteTimeUtc) { }\npublic override void WriteAllBytes(string path, byte[] bytes) { }\npublic override System.Threading.Tasks.Task WriteAllBytesAsync(string path, byte[] bytes, System.Threading.CancellationToken cancellationToken = default) { }\npublic override void WriteAllLines(string path, System.Collections.Generic.IEnumerable<string> contents) { }\npublic override void WriteAllLines(string path, string[] contents) { }\npublic override void WriteAllLines(string path, System.Collections.Generic.IEnumerable<string> contents, System.Text.Encoding encoding) { }\npublic override void WriteAllLines(string path, string[] contents, System.Text.Encoding encoding) { }\npublic override System.Threading.Tasks.Task WriteAllLinesAsync(string path, System.Collections.Generic.IEnumerable<string> contents, System.Threading.CancellationToken cancellationToken = default) { }\npublic override System.Threading.Tasks.Task WriteAllLinesAsync(string path, System.Collections.Generic.IEnumerable<string> contents, System.Text.Encoding encoding, System.Threading.CancellationToken cancellationToken = default) { }\npublic override void WriteAllText(string path, string contents) { }\npublic override void WriteAllText(string path, string contents, System.Text.Encoding encoding) { }\npublic override System.Threading.Tasks.Task WriteAllTextAsync(string path, string contents, System.Threading.CancellationToken cancellationToken = default) { }\npublic override System.Threading.Tasks.Task WriteAllTextAsync(string path, string contents, System.Text.Encoding encoding, System.Threading.CancellationToken cancellationToken = default) { }\n```\n\n----------------------------------------\n\nTITLE: Defining the MockDirectoryInfo Class in C#\nDESCRIPTION: This class provides a mock implementation of `System.IO.Abstractions.DirectoryInfoBase`, simulating the behavior of the `System.IO.DirectoryInfo` class for testing. It interacts with the mock file system via an `IMockFileDataAccessor`. The class exposes properties like `Attributes`, `CreationTime`, `Exists`, `FullName`, `Name`, `Parent`, `Root`, and methods for directory manipulation such as `Create`, `CreateSubdirectory`, `Delete`, and enumeration methods.\nSOURCE: https://github.com/testableio/system.io.abstractions/blob/main/tests/TestableIO.System.IO.Abstractions.Api.Tests/Expected/TestableIO.System.IO.Abstractions.TestingHelpers_net9.0.txt#2025-04-22_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\n[System.Serializable]\npublic class MockDirectoryInfo : System.IO.Abstractions.DirectoryInfoBase, System.IO.Abstractions.IFileSystemAclSupport\n{\n    public MockDirectoryInfo(System.IO.Abstractions.TestingHelpers.IMockFileDataAccessor mockFileDataAccessor, string directoryPath) { }\n    public override System.IO.FileAttributes Attributes { get; set; }\n    public override System.DateTime CreationTime { get; set; }\n    public override System.DateTime CreationTimeUtc { get; set; }\n    public override bool Exists { get; }\n    public override string Extension { get; }\n    public override string FullName { get; }\n    public override System.DateTime LastAccessTime { get; set; }\n    public override System.DateTime LastAccessTimeUtc { get; set; }\n    public override System.DateTime LastWriteTime { get; set; }\n    public override System.DateTime LastWriteTimeUtc { get; set; }\n    public override string LinkTarget { get; }\n    public override string Name { get; }\n    public override System.IO.Abstractions.IDirectoryInfo Parent { get; }\n    public override System.IO.Abstractions.IDirectoryInfo Root { get; }\n    public override void Create() { }\n    public override void CreateAsSymbolicLink(string pathToTarget) { }\n    public override System.IO.Abstractions.IDirectoryInfo CreateSubdirectory(string path) { }\n    public override void Delete() { }\n    public override void Delete(bool recursive) { }\n    public override System.Collections.Generic.IEnumerable<System.IO.Abstractions.IDirectoryInfo> EnumerateDirectories() { }\n    public override System.Collections.Generic.IEnumerable<System.IO.Abstractions.IDirectoryInfo> EnumerateDirectories(string searchPattern) { }\n    public override System.Collections.Generic.IEnumerable<System.IO.Abstractions.IDirectoryInfo> EnumerateDirectories(string searchPattern, System.IO.EnumerationOptions enumerationOptions) { }\n}\n```\n\n----------------------------------------\n\nTITLE: MockFileData Class Definition in System.IO.Abstractions\nDESCRIPTION: Definition of a MockFileData class used for storing file content and metadata in memory for testing. This class includes static defaults, constructors for different content types, and properties for common file attributes.\nSOURCE: https://github.com/testableio/system.io.abstractions/blob/main/tests/TestableIO.System.IO.Abstractions.Api.Tests/Expected/TestableIO.System.IO.Abstractions.TestingHelpers_net9.0.txt#2025-04-22_snippet_12\n\nLANGUAGE: C#\nCODE:\n```\n[System.Serializable]\npublic class MockFileData\n{\n    public static readonly System.DateTimeOffset DefaultDateTimeOffset;\n    public static readonly System.Text.Encoding DefaultEncoding;\n    public MockFileData(System.IO.Abstractions.TestingHelpers.MockFileData template) { }\n    public MockFileData(byte[] contents) { }\n    public MockFileData(string textContents) { }\n    public MockFileData(string textContents, System.Text.Encoding encoding) { }\n    [System.Runtime.Versioning.SupportedOSPlatform(\"windows\")]\n    public System.Security.AccessControl.FileSecurity AccessControl { get; set; }\n    public System.IO.FileShare AllowedFileShare { get; set; }\n    public System.IO.FileAttributes Attributes { get; set; }\n    public byte[] Contents { get; set; }\n```\n\n----------------------------------------\n\nTITLE: Implementing MockFileSystemWatcherFactory Class in C#\nDESCRIPTION: This class implements the IFileSystemWatcherFactory interface to provide mock file system watcher functionality for testing purposes.\nSOURCE: https://github.com/testableio/system.io.abstractions/blob/main/tests/TestableIO.System.IO.Abstractions.Api.Tests/Expected/TestableIO.System.IO.Abstractions.TestingHelpers_net9.0.txt#2025-04-22_snippet_22\n\nLANGUAGE: C#\nCODE:\n```\n[System.Serializable]\npublic class MockFileSystemWatcherFactory : System.IO.Abstractions.IFileSystemEntity, System.IO.Abstractions.IFileSystemWatcherFactory\n{\n    public MockFileSystemWatcherFactory(System.IO.Abstractions.TestingHelpers.MockFileSystem mockFileSystem) { }\n    public System.IO.Abstractions.IFileSystem FileSystem { get; }\n    public System.IO.Abstractions.IFileSystemWatcher New() { }\n    public System.IO.Abstractions.IFileSystemWatcher New(string path) { }\n    public System.IO.Abstractions.IFileSystemWatcher New(string path, string filter) { }\n    public System.IO.Abstractions.IFileSystemWatcher Wrap(System.IO.FileSystemWatcher fileSystemWatcher) { }\n}\n```\n\n----------------------------------------\n\nTITLE: Testing MyComponent Validation in C#\nDESCRIPTION: Describes a unit test for the MyComponent class using a mocked file system to check exception throwing on unexpected file content. Relies on NUnit for testing and MockFileSystem from TestableIO.System.IO.Abstractions.TestingHelpers for file system mocking.\nSOURCE: https://github.com/testableio/system.io.abstractions/blob/main/README.md#2025-04-22_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\n[Test]\npublic void MyComponent_Validate_ShouldThrowNotSupportedExceptionIfTestingIsNotAwesome()\n{\n    // Arrange\n    var fileSystem = new MockFileSystem(new Dictionary<string, MockFileData>\n    {\n        { @\"c:\\myfile.txt\", new MockFileData(\"Testing is meh.\") },\n        { @\"c:\\demo\\jQuery.js\", new MockFileData(\"some js\") },\n        { @\"c:\\demo\\image.gif\", new MockFileData(new byte[] { 0x12, 0x34, 0x56, 0xd2 }) }\n    });\n    var component = new MyComponent(fileSystem);\n\n    try\n    {\n        // Act\n        component.Validate();\n    }\n    catch (NotSupportedException ex)\n    {\n        // Assert\n        Assert.That(ex.Message, Is.EqualTo(\"We can't go on together. It's not me, it's you.\"));\n        return;\n    }\n\n    Assert.Fail(\"The expected exception was not thrown.\");\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing FileSystemWatcherWrapper Class in C#\nDESCRIPTION: Concrete implementation of FileSystemWatcherBase that wraps a System.IO.FileSystemWatcher. It provides the abstraction layer for the actual FileSystemWatcher class.\nSOURCE: https://github.com/testableio/system.io.abstractions/blob/main/tests/TestableIO.System.IO.Abstractions.Api.Tests/Expected/TestableIO.System.IO.Abstractions.Wrappers_net6.0.txt#2025-04-22_snippet_23\n\nLANGUAGE: C#\nCODE:\n```\n[System.Serializable]\npublic class FileSystemWatcherWrapper : System.IO.Abstractions.FileSystemWatcherBase\n{\n    public FileSystemWatcherWrapper(System.IO.Abstractions.IFileSystem fileSystem) { }\n    public FileSystemWatcherWrapper(System.IO.Abstractions.IFileSystem fileSystem, System.IO.FileSystemWatcher watcher) { }\n    public FileSystemWatcherWrapper(System.IO.Abstractions.IFileSystem fileSystem, string path) { }\n    public FileSystemWatcherWrapper(System.IO.Abstractions.IFileSystem fileSystem, string path, string filter) { }\n    public override System.ComponentModel.IContainer Container { get; }\n    public override bool EnableRaisingEvents { get; set; }\n    public override System.IO.Abstractions.IFileSystem FileSystem { get; }\n    public override string Filter { get; set; }\n    public override System.Collections.ObjectModel.Collection<string> Filters { get; }\n    public override bool IncludeSubdirectories { get; set; }\n    public override int InternalBufferSize { get; set; }\n    public override System.IO.NotifyFilters NotifyFilter { get; set; }\n    public override string Path { get; set; }\n    public override System.ComponentModel.ISite Site { get; set; }\n    public override System.ComponentModel.ISynchronizeInvoke SynchronizingObject { get; set; }\n    public override void BeginInit() { }\n    public override void Dispose(bool disposing) { }\n    public override void EndInit() { }\n    public override System.IO.Abstractions.IWaitForChangedResult WaitForChanged(System.IO.WatcherChangeTypes changeType) { }\n    public override System.IO.Abstractions.IWaitForChangedResult WaitForChanged(System.IO.WatcherChangeTypes changeType, int timeout) { }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing FileSystemWatcherBase Abstract Class in C#\nDESCRIPTION: Abstract base class that implements IFileSystemWatcher interface. Provides functionality for monitoring the file system for changes to files and directories, with event handlers for various file system events.\nSOURCE: https://github.com/testableio/system.io.abstractions/blob/main/tests/TestableIO.System.IO.Abstractions.Api.Tests/Expected/TestableIO.System.IO.Abstractions.Wrappers_netstandard2.0.txt#2025-04-22_snippet_18\n\nLANGUAGE: C#\nCODE:\n```\n[System.Serializable]\npublic abstract class FileSystemWatcherBase : System.IDisposable, System.IO.Abstractions.IFileSystemEntity, System.IO.Abstractions.IFileSystemWatcher\n{\n    protected FileSystemWatcherBase() { }\n    public abstract System.ComponentModel.IContainer Container { get; }\n    public abstract bool EnableRaisingEvents { get; set; }\n    public abstract System.IO.Abstractions.IFileSystem FileSystem { get; }\n    public abstract string Filter { get; set; }\n    public abstract bool IncludeSubdirectories { get; set; }\n    public abstract int InternalBufferSize { get; set; }\n    public abstract System.IO.NotifyFilters NotifyFilter { get; set; }\n    public abstract string Path { get; set; }\n    public abstract System.ComponentModel.ISite Site { get; set; }\n    public abstract System.ComponentModel.ISynchronizeInvoke SynchronizingObject { get; set; }\n    public virtual event System.IO.FileSystemEventHandler Changed;\n    public virtual event System.IO.FileSystemEventHandler Created;\n    public virtual event System.IO.FileSystemEventHandler Deleted;\n    public virtual event System.IO.ErrorEventHandler Error;\n    public virtual event System.IO.RenamedEventHandler Renamed;\n    public abstract void BeginInit();\n    public void Dispose() { }\n    public virtual void Dispose(bool disposing) { }\n    public abstract void EndInit();\n    protected void OnChanged(object sender, System.IO.FileSystemEventArgs args) { }\n    protected void OnCreated(object sender, System.IO.FileSystemEventArgs args) { }\n    protected void OnDeleted(object sender, System.IO.FileSystemEventArgs args) { }\n    protected void OnError(object sender, System.IO.ErrorEventArgs args) { }\n    protected void OnRenamed(object sender, System.IO.RenamedEventArgs args) { }\n    public abstract System.IO.Abstractions.IWaitForChangedResult WaitForChanged(System.IO.WatcherChangeTypes changeType);\n    public abstract System.IO.Abstractions.IWaitForChangedResult WaitForChanged(System.IO.WatcherChangeTypes changeType, int timeout);\n    public static System.IO.Abstractions.FileSystemWatcherBase op_Implicit(System.IO.FileSystemWatcher watcher) { }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing FileSystemWatcherWrapper in C#\nDESCRIPTION: This class wraps a FileSystemWatcher, providing an implementation of FileSystemWatcherBase that can be used with the abstraction layer.\nSOURCE: https://github.com/testableio/system.io.abstractions/blob/main/tests/TestableIO.System.IO.Abstractions.Api.Tests/Expected/TestableIO.System.IO.Abstractions.Wrappers_net472.txt#2025-04-22_snippet_21\n\nLANGUAGE: C#\nCODE:\n```\n[System.Serializable]\npublic class FileSystemWatcherWrapper : System.IO.Abstractions.FileSystemWatcherBase\n{\n    public FileSystemWatcherWrapper(System.IO.Abstractions.IFileSystem fileSystem) { }\n    public FileSystemWatcherWrapper(System.IO.Abstractions.IFileSystem fileSystem, System.IO.FileSystemWatcher watcher) { }\n    public FileSystemWatcherWrapper(System.IO.Abstractions.IFileSystem fileSystem, string path) { }\n    public FileSystemWatcherWrapper(System.IO.Abstractions.IFileSystem fileSystem, string path, string filter) { }\n    public override System.ComponentModel.IContainer Container { get; }\n    public override bool EnableRaisingEvents { get; set; }\n    public override System.IO.Abstractions.IFileSystem FileSystem { get; }\n    public override string Filter { get; set; }\n    public override bool IncludeSubdirectories { get; set; }\n    public override int InternalBufferSize { get; set; }\n    public override System.IO.NotifyFilters NotifyFilter { get; set; }\n    public override string Path { get; set; }\n    public override System.ComponentModel.ISite Site { get; set; }\n    public override System.ComponentModel.ISynchronizeInvoke SynchronizingObject { get; set; }\n    public override void BeginInit() { }\n    public override void Dispose(bool disposing) { }\n    public override void EndInit() { }\n    public override System.IO.Abstractions.IWaitForChangedResult WaitForChanged(System.IO.WatcherChangeTypes changeType) { }\n    public override System.IO.Abstractions.IWaitForChangedResult WaitForChanged(System.IO.WatcherChangeTypes changeType, int timeout) { }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing DirectoryInfoWrapper Class in C#\nDESCRIPTION: Wrapper class for System.IO.DirectoryInfo, implementing DirectoryInfoBase and IFileSystemAclSupport interfaces. Provides access to directory attributes and creation times.\nSOURCE: https://github.com/testableio/system.io.abstractions/blob/main/tests/TestableIO.System.IO.Abstractions.Api.Tests/Expected/TestableIO.System.IO.Abstractions.Wrappers_netstandard2.0.txt#2025-04-22_snippet_5\n\nLANGUAGE: C#\nCODE:\n```\n[System.Serializable]\npublic class DirectoryInfoWrapper : System.IO.Abstractions.DirectoryInfoBase, System.IO.Abstractions.IFileSystemAclSupport\n{\n    public DirectoryInfoWrapper(System.IO.Abstractions.IFileSystem fileSystem, System.IO.DirectoryInfo instance) { }\n    public override System.IO.FileAttributes Attributes { get; set; }\n    public override System.DateTime CreationTime { get; set; }\n    public override System.DateTime CreationTimeUtc { get; set; }\n    public override bool Exists { get; }\n    public override string Extension { get; }\n}\n```\n\n----------------------------------------\n\nTITLE: MockDriveInfo Class Implementation in C#\nDESCRIPTION: Extends DriveInfoBase to simulate drive information for mock environments, providing properties like available space, drive format, type, readiness, root directory, and size using System.IO.Abstractions.\nSOURCE: https://github.com/testableio/system.io.abstractions/blob/main/tests/TestableIO.System.IO.Abstractions.Api.Tests/Expected/TestableIO.System.IO.Abstractions.TestingHelpers_net6.0.txt#2025-04-22_snippet_12\n\nLANGUAGE: C#\nCODE:\n```\npublic class MockDriveInfo : System.IO.Abstractions.DriveInfoBase\n{\n    public MockDriveInfo(System.IO.Abstractions.TestingHelpers.IMockFileDataAccessor mockFileDataAccessor, string name) { }\n    public override long AvailableFreeSpace { get; }\n    public override string DriveFormat { get; }\n    public override System.IO.DriveType DriveType { get; }\n    public override bool IsReady { get; }\n    public override string Name { get; }\n    public override System.IO.Abstractions.IDirectoryInfo RootDirectory { get; }\n    public override long TotalFreeSpace { get; }\n    public override long TotalSize { get; }\n    public override string VolumeLabel { get; set; }\n    public override string ToString() { }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing MockFileSystem Methods in C#\nDESCRIPTION: File system operation methods from a MockFileSystem class including file existence checking, file retrieval, drive information access, directory operations, and time mocking.\nSOURCE: https://github.com/testableio/system.io.abstractions/blob/main/tests/TestableIO.System.IO.Abstractions.Api.Tests/Expected/TestableIO.System.IO.Abstractions.TestingHelpers_net8.0.txt#2025-04-22_snippet_18\n\nLANGUAGE: C#\nCODE:\n```\npublic bool FileExists(string path) { }\npublic System.IO.Abstractions.TestingHelpers.MockDriveData GetDrive(string name) { }\npublic System.IO.Abstractions.TestingHelpers.MockFileData GetFile(System.IO.Abstractions.IFileInfo path) { }\npublic System.IO.Abstractions.TestingHelpers.MockFileData GetFile(string path) { }\npublic System.IO.Abstractions.TestingHelpers.MockFileSystem MockTime(System.Func<System.DateTime> dateTimeProvider) { }\npublic void MoveDirectory(string sourcePath, string destPath) { }\npublic void RemoveFile(string path, bool verifyAccess = true) { }\n```\n\n----------------------------------------\n\nTITLE: Implementing MockDirectoryInfoFactory using System.IO.Abstractions in C#\nDESCRIPTION: This snippet defines a serializable mock directory information factory implementing IDirectoryInfoFactory and IFileSystemEntity. Its main purpose is to construct mock directory info objects and wrap real DirectoryInfo instances for testing code that interacts with the file system abstraction. It depends on System.IO.Abstractions.TestingHelpers for mock backing and exposes the underlying file system plus New and Wrap methods for producing directory info objects. Inputs include a mock file system accessor and directory paths; outputs are mock IDirectoryInfo objects. No real disk access occurs.\nSOURCE: https://github.com/testableio/system.io.abstractions/blob/main/tests/TestableIO.System.IO.Abstractions.Api.Tests/Expected/TestableIO.System.IO.Abstractions.TestingHelpers_netstandard2.0.txt#2025-04-22_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\n[System.Serializable]\npublic class MockDirectoryInfoFactory : System.IO.Abstractions.IDirectoryInfoFactory, System.IO.Abstractions.IFileSystemEntity\n{\n    public MockDirectoryInfoFactory(System.IO.Abstractions.TestingHelpers.IMockFileDataAccessor mockFileSystem) { }\n    public System.IO.Abstractions.IFileSystem FileSystem { get; }\n    public System.IO.Abstractions.IDirectoryInfo New(string path) { }\n    public System.IO.Abstractions.IDirectoryInfo Wrap(System.IO.DirectoryInfo directoryInfo) { }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Mock Directory Info Factory with System.IO.Abstractions in C#\nDESCRIPTION: This class, MockDirectoryInfoFactory, implements the IDirectoryInfoFactory and IFileSystemEntity interfaces to generate mock directory info objects for a testing scenario. It receives a mock file system accessor and provides methods to instantiate and wrap directory info representations for use with System.IO.Abstractions-based tests. Dependencies include the testing helpers and file system accessor interfaces.\nSOURCE: https://github.com/testableio/system.io.abstractions/blob/main/tests/TestableIO.System.IO.Abstractions.Api.Tests/Expected/TestableIO.System.IO.Abstractions.TestingHelpers_net472.txt#2025-04-22_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\n[System.Serializable]\npublic class MockDirectoryInfoFactory : System.IO.Abstractions.IDirectoryInfoFactory, System.IO.Abstractions.IFileSystemEntity\n{\n    public MockDirectoryInfoFactory(System.IO.Abstractions.TestingHelpers.IMockFileDataAccessor mockFileSystem) { }\n    public System.IO.Abstractions.IFileSystem FileSystem { get; }\n    public System.IO.Abstractions.IDirectoryInfo New(string path) { }\n    public System.IO.Abstractions.IDirectoryInfo Wrap(System.IO.DirectoryInfo directoryInfo) { }\n}\n```\n\n----------------------------------------\n\nTITLE: IMockFileDataAccessor Interface Definition - C#\nDESCRIPTION: Defines interface for mock filesystem data access extending IFileSystem with additional testing-specific members\nSOURCE: https://github.com/testableio/system.io.abstractions/blob/main/tests/TestableIO.System.IO.Abstractions.Api.Tests/Expected/TestableIO.System.IO.Abstractions.TestingHelpers_net8.0.txt#2025-04-22_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\npublic interface IMockFileDataAccessor : System.IO.Abstractions.IFileSystem\n{\n    System.Collections.Generic.IEnumerable<string> AllDirectories { get; }\n    System.Collections.Generic.IEnumerable<string> AllDrives { get; }\n    System.Collections.Generic.IEnumerable<string> AllFiles { get; }\n    System.Collections.Generic.IEnumerable<string> AllPaths { get; }\n    System.IO.Abstractions.IFileSystem FileSystem { get; }\n    System.IO.Abstractions.TestingHelpers.PathVerifier PathVerifier { get; }\n    System.IO.Abstractions.TestingHelpers.StringOperations StringOperations { get; }\n    void AddDirectory(string path);\n    void AddDrive(string name, System.IO.Abstractions.TestingHelpers.MockDriveData mockDrive);\n    void AddFile(string path, System.IO.Abstractions.TestingHelpers.MockFileData mockFile, bool verifyAccess = true);\n    void AddFileFromEmbeddedResource(string path, System.Reflection.Assembly resourceAssembly, string embeddedResourcePath);\n    void AddFilesFromEmbeddedNamespace(string path, System.Reflection.Assembly resourceAssembly, string embeddedResourcePath);\n    System.IO.Abstractions.TestingHelpers.MockFileData AdjustTimes(System.IO.Abstractions.TestingHelpers.MockFileData fileData, System.IO.Abstractions.TestingHelpers.TimeAdjustments timeAdjustments);\n    bool FileExists(string path);\n    System.IO.Abstractions.TestingHelpers.MockDriveData GetDrive(string name);\n    System.IO.Abstractions.TestingHelpers.MockFileData GetFile(string path);\n    void MoveDirectory(string sourcePath, string destPath);\n    void RemoveFile(string path, bool verifyAccess = true);\n}\n```\n\n----------------------------------------\n\nTITLE: Abstract Directory Info Base Implementation\nDESCRIPTION: Abstract base class implementing IDirectoryInfo and IFileSystemInfo interfaces for directory information handling.\nSOURCE: https://github.com/testableio/system.io.abstractions/blob/main/tests/TestableIO.System.IO.Abstractions.Api.Tests/Expected/TestableIO.System.IO.Abstractions.Wrappers_netstandard2.1.txt#2025-04-22_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\n[System.Serializable]\npublic abstract class DirectoryInfoBase : System.IO.Abstractions.FileSystemInfoBase, System.IO.Abstractions.IDirectoryInfo, System.IO.Abstractions.IFileSystemInfo\n{\n    protected DirectoryInfoBase(System.IO.Abstractions.IFileSystem fileSystem) { }\n    public abstract System.IO.Abstractions.IDirectoryInfo Parent { get; }\n    public abstract System.IO.Abstractions.IDirectoryInfo Root { get; }\n    public abstract void Create();\n    public abstract System.IO.Abstractions.IDirectoryInfo CreateSubdirectory(string path);\n    public abstract void Delete(bool recursive);\n    // Additional abstract members omitted for brevity\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing FileSystemWatcherFactory Class in C#\nDESCRIPTION: Defines a factory class that creates instances of IFileSystemWatcher. It implements IFileSystemEntity and IFileSystemWatcherFactory interfaces and provides methods to create new file system watchers or wrap existing ones.\nSOURCE: https://github.com/testableio/system.io.abstractions/blob/main/tests/TestableIO.System.IO.Abstractions.Api.Tests/Expected/TestableIO.System.IO.Abstractions.Wrappers_net9.0.txt#2025-04-22_snippet_23\n\nLANGUAGE: C#\nCODE:\n```\n[System.Serializable]\npublic class FileSystemWatcherFactory : System.IO.Abstractions.IFileSystemEntity, System.IO.Abstractions.IFileSystemWatcherFactory\n{\n    public FileSystemWatcherFactory(System.IO.Abstractions.IFileSystem fileSystem) { }\n    public System.IO.Abstractions.IFileSystem FileSystem { get; }\n    public System.IO.Abstractions.IFileSystemWatcher New() { }\n    public System.IO.Abstractions.IFileSystemWatcher New(string path) { }\n    public System.IO.Abstractions.IFileSystemWatcher New(string path, string filter) { }\n    public System.IO.Abstractions.IFileSystemWatcher Wrap(System.IO.FileSystemWatcher fileSystemWatcher) { }\n}\n```\n\n----------------------------------------\n\nTITLE: Mocking Drive Data for Testing with System.IO.Abstractions in C#\nDESCRIPTION: This serializable class provides constructors and properties to represent simulated drive data for .NET testing, using System.IO.Abstractions interfaces. No external dependencies beyond the framework are required. The class exposes properties such as AvailableFreeSpace, DriveFormat, DriveType, IsReady, TotalFreeSpace, TotalSize, and VolumeLabel, allowing detailed configuration for test drives. Parameters can be set to control drive characteristics in tests; all members are mutable via properties.\nSOURCE: https://github.com/testableio/system.io.abstractions/blob/main/tests/TestableIO.System.IO.Abstractions.Api.Tests/Expected/TestableIO.System.IO.Abstractions.TestingHelpers_net8.0.txt#2025-04-22_snippet_7\n\nLANGUAGE: C#\nCODE:\n```\n[System.Serializable]\npublic class MockDriveData\n{\n    public MockDriveData() { }\n    public MockDriveData(System.IO.Abstractions.TestingHelpers.MockDriveData template) { }\n    public long AvailableFreeSpace { get; set; }\n    public string DriveFormat { get; set; }\n    public System.IO.DriveType DriveType { get; set; }\n    public bool IsReady { get; set; }\n    public long TotalFreeSpace { get; set; }\n    public long TotalSize { get; set; }\n    public string VolumeLabel { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: DriveInfoWrapper Class Implementation in C#\nDESCRIPTION: A concrete implementation of DriveInfoBase that wraps System.IO.DriveInfo. It provides actual implementation for drive information properties and methods by delegating to the wrapped DriveInfo instance, enabling testability of code that uses drive information.\nSOURCE: https://github.com/testableio/system.io.abstractions/blob/main/tests/TestableIO.System.IO.Abstractions.Api.Tests/Expected/TestableIO.System.IO.Abstractions.Wrappers_net9.0.txt#2025-04-22_snippet_10\n\nLANGUAGE: C#\nCODE:\n```\n[System.Serializable]\npublic class DriveInfoWrapper : System.IO.Abstractions.DriveInfoBase\n{\n    public DriveInfoWrapper(System.IO.Abstractions.IFileSystem fileSystem, System.IO.DriveInfo instance) { }\n    public override long AvailableFreeSpace { get; }\n    public override string DriveFormat { get; }\n    public override System.IO.DriveType DriveType { get; }\n    public override bool IsReady { get; }\n    public override string Name { get; }\n    public override System.IO.Abstractions.IDirectoryInfo RootDirectory { get; }\n    public override long TotalFreeSpace { get; }\n    public override long TotalSize { get; }\n    [set: System.Runtime.Versioning.SupportedOSPlatform(\"windows\")]\n    public override string VolumeLabel { get; set; }\n    public override string ToString() { }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Mock DriveInfo Class in C#\nDESCRIPTION: Defines a serializable class `MockDriveInfo` that provides a mock implementation of `System.IO.Abstractions.DriveInfoBase`. It represents a drive in the mock file system, exposing properties like available space, format, type, readiness, name, root directory, total space, and volume label. It requires an `IMockFileDataAccessor` and the drive name for construction.\nSOURCE: https://github.com/testableio/system.io.abstractions/blob/main/tests/TestableIO.System.IO.Abstractions.Api.Tests/Expected/TestableIO.System.IO.Abstractions.TestingHelpers_netstandard2.1.txt#2025-04-22_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\n    [System.Serializable]\n    public class MockDriveInfo : System.IO.Abstractions.DriveInfoBase\n    {\n        public MockDriveInfo(System.IO.Abstractions.TestingHelpers.IMockFileDataAccessor mockFileDataAccessor, string name) { }\n        public override long AvailableFreeSpace { get; }\n        public override string DriveFormat { get; }\n        public override System.IO.DriveType DriveType { get; }\n        public override bool IsReady { get; }\n        public override string Name { get; }\n        public override System.IO.Abstractions.IDirectoryInfo RootDirectory { get; }\n        public override long TotalFreeSpace { get; }\n        public override long TotalSize { get; }\n        public override string VolumeLabel { get; set; }\n        public override string ToString() { }\n    }\n\n```\n\n----------------------------------------\n\nTITLE: Implementing File Access Control Extensions in C#\nDESCRIPTION: This snippet defines extension methods for getting and setting access control on file system objects. It extends the IFileInfo interface with methods to manage file security.\nSOURCE: https://github.com/testableio/system.io.abstractions/blob/main/tests/TestableIO.System.IO.Abstractions.Api.Tests/Expected/TestableIO.System.IO.Abstractions.Wrappers_netstandard2.1.txt#2025-04-22_snippet_11\n\nLANGUAGE: C#\nCODE:\n```\npublic static class FileInfoAclExtensions\n{\n    public static System.Security.AccessControl.FileSecurity GetAccessControl(this System.IO.Abstractions.IFileInfo fileInfo) { }\n    public static System.Security.AccessControl.FileSecurity GetAccessControl(this System.IO.Abstractions.IFileInfo fileInfo, System.Security.AccessControl.AccessControlSections includeSections) { }\n    public static void SetAccessControl(this System.IO.Abstractions.IFileInfo fileInfo, System.Security.AccessControl.FileSecurity fileSecurity) { }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Mock Directory Info Factories with System.IO.Abstractions in C#\nDESCRIPTION: This snippet defines a serializable class that implements factory patterns for creating and wrapping directory info objects for use with System.IO.Abstractions in C#. It depends on the IMockFileDataAccessor interface for simulating file system data. Methods allow instantiation, retrieval of the file system, creating new directory info objects, and wrapping existing DirectoryInfo objects, primarily for test scenarios requiring directory simulation.\nSOURCE: https://github.com/testableio/system.io.abstractions/blob/main/tests/TestableIO.System.IO.Abstractions.Api.Tests/Expected/TestableIO.System.IO.Abstractions.TestingHelpers_net8.0.txt#2025-04-22_snippet_6\n\nLANGUAGE: C#\nCODE:\n```\n[System.Serializable]\npublic class MockDirectoryInfoFactory : System.IO.Abstractions.IDirectoryInfoFactory, System.IO.Abstractions.IFileSystemEntity\n{\n    public MockDirectoryInfoFactory(System.IO.Abstractions.TestingHelpers.IMockFileDataAccessor mockFileSystem) { }\n    public System.IO.Abstractions.IFileSystem FileSystem { get; }\n    public System.IO.Abstractions.IDirectoryInfo New(string path) { }\n    public System.IO.Abstractions.IDirectoryInfo Wrap(System.IO.DirectoryInfo directoryInfo) { }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing MockPath Class in C#\nDESCRIPTION: This class extends PathWrapper to provide mock path operations for testing purposes, including methods for checking existence, getting full paths, and handling temporary files and directories.\nSOURCE: https://github.com/testableio/system.io.abstractions/blob/main/tests/TestableIO.System.IO.Abstractions.Api.Tests/Expected/TestableIO.System.IO.Abstractions.TestingHelpers_net9.0.txt#2025-04-22_snippet_25\n\nLANGUAGE: C#\nCODE:\n```\n[System.Serializable]\npublic class MockPath : System.IO.Abstractions.PathWrapper\n{\n    public MockPath(System.IO.Abstractions.TestingHelpers.IMockFileDataAccessor mockFileDataAccessor) { }\n    public MockPath(System.IO.Abstractions.TestingHelpers.IMockFileDataAccessor mockFileDataAccessor, string defaultTempDirectory) { }\n    public override bool Exists(string path) { }\n    public override string GetFullPath(string path) { }\n    public override string GetRelativePath(string relativeTo, string path) { }\n    public override string GetTempFileName() { }\n    public override string GetTempPath() { }\n}\n```\n\n----------------------------------------\n\nTITLE: DirectoryBase Class Method Signatures for Directory Operations in C#\nDESCRIPTION: The DirectoryBase class provides abstract method signatures for various directory operations such as enumeration, creation, and manipulation. These methods serve as wrappers around System.IO.Directory functionality, providing abstraction for better testability.\nSOURCE: https://github.com/testableio/system.io.abstractions/blob/main/tests/TestableIO.System.IO.Abstractions.Api.Tests/Expected/TestableIO.System.IO.Abstractions.Wrappers_net9.0.txt#2025-04-22_snippet_8\n\nLANGUAGE: C#\nCODE:\n```\npublic override System.Collections.Generic.IEnumerable<string> EnumerateFiles(string path) { }\npublic override System.Collections.Generic.IEnumerable<string> EnumerateFiles(string path, string searchPattern) { }\npublic override System.Collections.Generic.IEnumerable<string> EnumerateFiles(string path, string searchPattern, System.IO.EnumerationOptions enumerationOptions) { }\npublic override System.Collections.Generic.IEnumerable<string> EnumerateFiles(string path, string searchPattern, System.IO.SearchOption searchOption) { }\npublic override bool Exists(string path) { }\npublic override System.DateTime GetCreationTime(string path) { }\npublic override System.DateTime GetCreationTimeUtc(string path) { }\npublic override string GetCurrentDirectory() { }\npublic override string[] GetDirectories(string path) { }\npublic override string[] GetDirectories(string path, string searchPattern) { }\npublic override string[] GetDirectories(string path, string searchPattern, System.IO.EnumerationOptions enumerationOptions) { }\npublic override string[] GetDirectories(string path, string searchPattern, System.IO.SearchOption searchOption) { }\npublic override string GetDirectoryRoot(string path) { }\npublic override string[] GetFileSystemEntries(string path) { }\npublic override string[] GetFileSystemEntries(string path, string searchPattern) { }\npublic override string[] GetFileSystemEntries(string path, string searchPattern, System.IO.EnumerationOptions enumerationOptions) { }\npublic override string[] GetFileSystemEntries(string path, string searchPattern, System.IO.SearchOption searchOption) { }\npublic override string[] GetFiles(string path) { }\npublic override string[] GetFiles(string path, string searchPattern) { }\npublic override string[] GetFiles(string path, string searchPattern, System.IO.EnumerationOptions enumerationOptions) { }\npublic override string[] GetFiles(string path, string searchPattern, System.IO.SearchOption searchOption) { }\npublic override System.DateTime GetLastAccessTime(string path) { }\npublic override System.DateTime GetLastAccessTimeUtc(string path) { }\npublic override System.DateTime GetLastWriteTime(string path) { }\npublic override System.DateTime GetLastWriteTimeUtc(string path) { }\npublic override string[] GetLogicalDrives() { }\npublic override System.IO.Abstractions.IDirectoryInfo GetParent(string path) { }\npublic override void Move(string sourceDirName, string destDirName) { }\npublic override System.IO.Abstractions.IFileSystemInfo ResolveLinkTarget(string linkPath, bool returnFinalTarget) { }\npublic override void SetCreationTime(string path, System.DateTime creationTime) { }\npublic override void SetCreationTimeUtc(string path, System.DateTime creationTimeUtc) { }\npublic override void SetCurrentDirectory(string path) { }\npublic override void SetLastAccessTime(string path, System.DateTime lastAccessTime) { }\npublic override void SetLastAccessTimeUtc(string path, System.DateTime lastAccessTimeUtc) { }\npublic override void SetLastWriteTime(string path, System.DateTime lastWriteTime) { }\npublic override void SetLastWriteTimeUtc(string path, System.DateTime lastWriteTimeUtc) { }\n```\n\n----------------------------------------\n\nTITLE: Implementing FileSystemWatcherFactory Class in C#\nDESCRIPTION: Factory class for creating FileSystemWatcher instances. It provides methods to create new watchers or wrap existing FileSystemWatcher objects.\nSOURCE: https://github.com/testableio/system.io.abstractions/blob/main/tests/TestableIO.System.IO.Abstractions.Api.Tests/Expected/TestableIO.System.IO.Abstractions.Wrappers_net6.0.txt#2025-04-22_snippet_22\n\nLANGUAGE: C#\nCODE:\n```\n[System.Serializable]\npublic class FileSystemWatcherFactory : System.IO.Abstractions.IFileSystemEntity, System.IO.Abstractions.IFileSystemWatcherFactory\n{\n    public FileSystemWatcherFactory(System.IO.Abstractions.IFileSystem fileSystem) { }\n    public System.IO.Abstractions.IFileSystem FileSystem { get; }\n    public System.IO.Abstractions.IFileSystemWatcher New() { }\n    public System.IO.Abstractions.IFileSystemWatcher New(string path) { }\n    public System.IO.Abstractions.IFileSystemWatcher New(string path, string filter) { }\n    public System.IO.Abstractions.IFileSystemWatcher Wrap(System.IO.FileSystemWatcher fileSystemWatcher) { }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Mock Drive Info Factories with System.IO.Abstractions in C#\nDESCRIPTION: This snippet provides a serializable factory class for creating and managing mock drive info objects in the testing environment using System.IO.Abstractions. The constructor depends on a mock file data accessor. The class implements IDriveInfoFactory and IFileSystemEntity, exposes FileSystem for test context, and provides methods to get all drives, create new drive info, or wrap existing DriveInfo instances. It enables easy instantiation and management of mock drives in .NET tests.\nSOURCE: https://github.com/testableio/system.io.abstractions/blob/main/tests/TestableIO.System.IO.Abstractions.Api.Tests/Expected/TestableIO.System.IO.Abstractions.TestingHelpers_net8.0.txt#2025-04-22_snippet_9\n\nLANGUAGE: C#\nCODE:\n```\n[System.Serializable]\npublic class MockDriveInfoFactory : System.IO.Abstractions.IDriveInfoFactory, System.IO.Abstractions.IFileSystemEntity\n{\n    public MockDriveInfoFactory(System.IO.Abstractions.TestingHelpers.IMockFileDataAccessor mockFileSystem) { }\n    public System.IO.Abstractions.IFileSystem FileSystem { get; }\n    public System.IO.Abstractions.IDriveInfo[] GetDrives() { }\n    public System.IO.Abstractions.IDriveInfo New(string driveName) { }\n    public System.IO.Abstractions.IDriveInfo Wrap(System.IO.DriveInfo driveInfo) { }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining MockDriveData for Drive Metadata Simulation in C#\nDESCRIPTION: This snippet declares a serializable class representing the metadata and attributes of a mock drive, including free space, format, type, readiness, total size, and volume label. It is used in conjunction with the mock file system to simulate drive-level characteristics for testing file-system-dependent code. No real drive interaction occurs; values are controlled by test code. Dependencies include basic .NET types and System.IO for DriveType enums.\nSOURCE: https://github.com/testableio/system.io.abstractions/blob/main/tests/TestableIO.System.IO.Abstractions.Api.Tests/Expected/TestableIO.System.IO.Abstractions.TestingHelpers_netstandard2.0.txt#2025-04-22_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\n[System.Serializable]\npublic class MockDriveData\n{\n    public MockDriveData() { }\n    public MockDriveData(System.IO.Abstractions.TestingHelpers.MockDriveData template) { }\n    public long AvailableFreeSpace { get; set; }\n    public string DriveFormat { get; set; }\n    public System.IO.DriveType DriveType { get; set; }\n    public bool IsReady { get; set; }\n    public long TotalFreeSpace { get; set; }\n    public long TotalSize { get; set; }\n    public string VolumeLabel { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining the MockDirectoryData Class in C#\nDESCRIPTION: This class represents the metadata associated with a mock directory. It inherits from `MockFileData` and adds specific properties relevant to directories, such as `AccessControl` (a `DirectorySecurity` object) for managing Windows Access Control Lists. This class is used by the mock file system to store state information about simulated directories.\nSOURCE: https://github.com/testableio/system.io.abstractions/blob/main/tests/TestableIO.System.IO.Abstractions.Api.Tests/Expected/TestableIO.System.IO.Abstractions.TestingHelpers_net9.0.txt#2025-04-22_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\n[System.Serializable]\npublic class MockDirectoryData : System.IO.Abstractions.TestingHelpers.MockFileData\n{\n    public MockDirectoryData() { }\n    [System.Runtime.Versioning.SupportedOSPlatform(\"windows\")]\n    public new System.Security.AccessControl.DirectorySecurity AccessControl { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining MockFileStreamFactory in C#\nDESCRIPTION: Defines the `MockFileStreamFactory` class, implementing `IFileStreamFactory` and `IFileSystemEntity`. This factory provides multiple overloaded `New` methods to create instances of `MockFileStream` based on different parameters like path, file mode, access rights, handles, buffer size, and async options. It relies on an `IMockFileDataAccessor` to interact with the underlying mock file system data.\nSOURCE: https://github.com/testableio/system.io.abstractions/blob/main/tests/TestableIO.System.IO.Abstractions.Api.Tests/Expected/TestableIO.System.IO.Abstractions.TestingHelpers_net472.txt#2025-04-22_snippet_11\n\nLANGUAGE: csharp\nCODE:\n```\n[System.Serializable]\npublic class MockFileStreamFactory : System.IO.Abstractions.IFileStreamFactory, System.IO.Abstractions.IFileSystemEntity\n{\n    public MockFileStreamFactory(System.IO.Abstractions.TestingHelpers.IMockFileDataAccessor mockFileSystem) { }\n    public System.IO.Abstractions.IFileSystem FileSystem { get; }\n    public System.IO.Abstractions.FileSystemStream New(Microsoft.Win32.SafeHandles.SafeFileHandle handle, System.IO.FileAccess access) { }\n    public System.IO.Abstractions.FileSystemStream New(string path, System.IO.FileMode mode) { }\n    public System.IO.Abstractions.FileSystemStream New(Microsoft.Win32.SafeHandles.SafeFileHandle handle, System.IO.FileAccess access, int bufferSize) { }\n    public System.IO.Abstractions.FileSystemStream New(string path, System.IO.FileMode mode, System.IO.FileAccess access) { }\n    public System.IO.Abstractions.FileSystemStream New(Microsoft.Win32.SafeHandles.SafeFileHandle handle, System.IO.FileAccess access, int bufferSize, bool isAsync) { }\n    public System.IO.Abstractions.FileSystemStream New(string path, System.IO.FileMode mode, System.IO.FileAccess access, System.IO.FileShare share) { }\n    public System.IO.Abstractions.FileSystemStream New(string path, System.IO.FileMode mode, System.IO.FileAccess access, System.IO.FileShare share, int bufferSize) { }\n    public System.IO.Abstractions.FileSystemStream New(string path, System.IO.FileMode mode, System.IO.FileAccess access, System.IO.FileShare share, int bufferSize, System.IO.FileOptions options) { }\n    public System.IO.Abstractions.FileSystemStream New(string path, System.IO.FileMode mode, System.IO.FileAccess access, System.IO.FileShare share, int bufferSize, bool useAsync) { }\n    public System.IO.Abstractions.FileSystemStream Wrap(System.IO.FileStream fileStream) { }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing FileInfoWrapper Class in C#\nDESCRIPTION: This class wraps a System.IO.FileInfo instance and implements the IFileSystemAclSupport interface. It provides concrete implementations for file information and manipulation methods.\nSOURCE: https://github.com/testableio/system.io.abstractions/blob/main/tests/TestableIO.System.IO.Abstractions.Api.Tests/Expected/TestableIO.System.IO.Abstractions.Wrappers_netstandard2.1.txt#2025-04-22_snippet_13\n\nLANGUAGE: C#\nCODE:\n```\n[System.Serializable]\npublic class FileInfoWrapper : System.IO.Abstractions.FileInfoBase, System.IO.Abstractions.IFileSystemAclSupport\n{\n    public FileInfoWrapper(System.IO.Abstractions.IFileSystem fileSystem, System.IO.FileInfo instance) { }\n    public override System.IO.FileAttributes Attributes { get; set; }\n    public override System.DateTime CreationTime { get; set; }\n    public override System.DateTime CreationTimeUtc { get; set; }\n    public override System.IO.Abstractions.IDirectoryInfo Directory { get; }\n    public override string DirectoryName { get; }\n    public override bool Exists { get; }\n    public override string Extension { get; }\n    public override string FullName { get; }\n    public override bool IsReadOnly { get; set; }\n    public override System.DateTime LastAccessTime { get; set; }\n    public override System.DateTime LastAccessTimeUtc { get; set; }\n    public override System.DateTime LastWriteTime { get; set; }\n    public override System.DateTime LastWriteTimeUtc { get; set; }\n    public override long Length { get; }\n    public override string Name { get; }\n    public override System.IO.StreamWriter AppendText() { }\n    public override System.IO.Abstractions.IFileInfo CopyTo(string destFileName) { }\n    public override System.IO.Abstractions.IFileInfo CopyTo(string destFileName, bool overwrite) { }\n    public override System.IO.Abstractions.FileSystemStream Create() { }\n    public override System.IO.StreamWriter CreateText() { }\n    public override void Decrypt() { }\n    public override void Delete() { }\n    public override void Encrypt() { }\n    public object GetAccessControl() { }\n    public object GetAccessControl(System.IO.Abstractions.IFileSystemAclSupport.AccessControlSections includeSections) { }\n    public override void MoveTo(string destFileName) { }\n    public override System.IO.Abstractions.FileSystemStream Open(System.IO.FileMode mode) { }\n    public override System.IO.Abstractions.FileSystemStream Open(System.IO.FileMode mode, System.IO.FileAccess access) { }\n    public override System.IO.Abstractions.FileSystemStream Open(System.IO.FileMode mode, System.IO.FileAccess access, System.IO.FileShare share) { }\n    public override System.IO.Abstractions.FileSystemStream OpenRead() { }\n    public override System.IO.StreamReader OpenText() { }\n    public override System.IO.Abstractions.FileSystemStream OpenWrite() { }\n    public override void Refresh() { }\n    public override System.IO.Abstractions.IFileInfo Replace(string destinationFileName, string destinationBackupFileName) { }\n    public override System.IO.Abstractions.IFileInfo Replace(string destinationFileName, string destinationBackupFileName, bool ignoreMetadataErrors) { }\n    public void SetAccessControl(object value) { }\n    public override string ToString() { }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining MockFileStream in C#\nDESCRIPTION: Defines the `MockFileStream` class, inheriting from `FileSystemStream` and implementing `IFileSystemAclSupport`. This class simulates file stream operations like reading, writing, flushing, and managing access control for testing. It interacts with an `IMockFileDataAccessor` to manipulate mock file data instead of the actual file system. Key methods like `Read`, `Write`, `Flush`, and `SetLength` are overridden.\nSOURCE: https://github.com/testableio/system.io.abstractions/blob/main/tests/TestableIO.System.IO.Abstractions.Api.Tests/Expected/TestableIO.System.IO.Abstractions.TestingHelpers_net472.txt#2025-04-22_snippet_10\n\nLANGUAGE: csharp\nCODE:\n```\n[System.Serializable]\npublic class MockFileStream : System.IO.Abstractions.FileSystemStream, System.IO.Abstractions.IFileSystemAclSupport\n{\n    public MockFileStream(System.IO.Abstractions.TestingHelpers.IMockFileDataAccessor mockFileDataAccessor, string path, System.IO.FileMode mode, System.IO.FileAccess access = 3, System.IO.FileOptions options = 0) { }\n    public override bool CanRead { get; }\n    public override bool CanWrite { get; }\n    public static System.IO.Abstractions.FileSystemStream Null { get; }\n    protected override void Dispose(bool disposing) { }\n    public override void EndWrite(System.IAsyncResult asyncResult) { }\n    public override void Flush() { }\n    public override void Flush(bool flushToDisk) { }\n    public override System.Threading.Tasks.Task FlushAsync(System.Threading.CancellationToken cancellationToken) { }\n    public object GetAccessControl() { }\n    public object GetAccessControl(System.IO.Abstractions.IFileSystemAclSupport.AccessControlSections includeSections) { }\n    public override int Read(byte[] buffer, int offset, int count) { }\n    public void SetAccessControl(object value) { }\n    public override void SetLength(long value) { }\n    public override void Write(byte[] buffer, int offset, int count) { }\n    public override System.Threading.Tasks.Task WriteAsync(byte[] buffer, int offset, int count, System.Threading.CancellationToken cancellationToken) { }\n    public override void WriteByte(byte value) { }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing MockFileStreamFactory Class in C#\nDESCRIPTION: Defines a serializable MockFileStreamFactory class that implements IFileStreamFactory and IFileSystemEntity interfaces. This factory creates mock file streams with different configurations for testing purposes.\nSOURCE: https://github.com/testableio/system.io.abstractions/blob/main/tests/TestableIO.System.IO.Abstractions.Api.Tests/Expected/TestableIO.System.IO.Abstractions.TestingHelpers_netstandard2.0.txt#2025-04-22_snippet_17\n\nLANGUAGE: C#\nCODE:\n```\n[System.Serializable]\npublic class MockFileStreamFactory : System.IO.Abstractions.IFileStreamFactory, System.IO.Abstractions.IFileSystemEntity\n{\n    public MockFileStreamFactory(System.IO.Abstractions.TestingHelpers.IMockFileDataAccessor mockFileSystem) { }\n    public System.IO.Abstractions.IFileSystem FileSystem { get; }\n    public System.IO.Abstractions.FileSystemStream New(Microsoft.Win32.SafeHandles.SafeFileHandle handle, System.IO.FileAccess access) { }\n    public System.IO.Abstractions.FileSystemStream New(string path, System.IO.FileMode mode) { }\n    public System.IO.Abstractions.FileSystemStream New(Microsoft.Win32.SafeHandles.SafeFileHandle handle, System.IO.FileAccess access, int bufferSize) { }\n    public System.IO.Abstractions.FileSystemStream New(string path, System.IO.FileMode mode, System.IO.FileAccess access) { }\n    public System.IO.Abstractions.FileSystemStream New(Microsoft.Win32.SafeHandles.SafeFileHandle handle, System.IO.FileAccess access, int bufferSize, bool isAsync) { }\n    public System.IO.Abstractions.FileSystemStream New(string path, System.IO.FileMode mode, System.IO.FileAccess access, System.IO.FileShare share) { }\n    public System.IO.Abstractions.FileSystemStream New(string path, System.IO.FileMode mode, System.IO.FileAccess access, System.IO.FileShare share, int bufferSize) { }\n    public System.IO.Abstractions.FileSystemStream New(string path, System.IO.FileMode mode, System.IO.FileAccess access, System.IO.FileShare share, int bufferSize, System.IO.FileOptions options) { }\n    public System.IO.Abstractions.FileSystemStream New(string path, System.IO.FileMode mode, System.IO.FileAccess access, System.IO.FileShare share, int bufferSize, bool useAsync) { }\n    public System.IO.Abstractions.FileSystemStream Wrap(System.IO.FileStream fileStream) { }\n}\n```\n\n----------------------------------------\n\nTITLE: PathWrapper Class Implementation in C#\nDESCRIPTION: A concrete implementation of the PathBase abstract class that wraps the standard System.IO.Path functionality. It implements all required path manipulation methods and properties to provide a testable alternative to direct System.IO.Path usage.\nSOURCE: https://github.com/testableio/system.io.abstractions/blob/main/tests/TestableIO.System.IO.Abstractions.Api.Tests/Expected/TestableIO.System.IO.Abstractions.Wrappers_net8.0.txt#2025-04-22_snippet_24\n\nLANGUAGE: csharp\nCODE:\n```\n[System.Serializable]\npublic class PathWrapper : System.IO.Abstractions.PathBase\n{\n    public PathWrapper(System.IO.Abstractions.IFileSystem fileSystem) { }\n    public override char AltDirectorySeparatorChar { get; }\n    public override char DirectorySeparatorChar { get; }\n    [System.Obsolete(\"Please use GetInvalidPathChars or GetInvalidFileNameChars instead.\")]\n    public override char[] InvalidPathChars { get; }\n    public override char PathSeparator { get; }\n    public override char VolumeSeparatorChar { get; }\n    public override string ChangeExtension(string path, string extension) { }\n    public override string Combine(params string[] paths) { }\n    public override string Combine(string path1, string path2) { }\n    public override string Combine(string path1, string path2, string path3) { }\n    public override string Combine(string path1, string path2, string path3, string path4) { }\n    public override bool EndsInDirectorySeparator(System.ReadOnlySpan<char> path) { }\n    public override bool EndsInDirectorySeparator(string path) { }\n    public override bool Exists(string path) { }\n    public override System.ReadOnlySpan<char> GetDirectoryName(System.ReadOnlySpan<char> path) { }\n    public override string GetDirectoryName(string path) { }\n    public override System.ReadOnlySpan<char> GetExtension(System.ReadOnlySpan<char> path) { }\n    public override string GetExtension(string path) { }\n    public override System.ReadOnlySpan<char> GetFileName(System.ReadOnlySpan<char> path) { }\n    public override string GetFileName(string path) { }\n    public override System.ReadOnlySpan<char> GetFileNameWithoutExtension(System.ReadOnlySpan<char> path) { }\n    public override string GetFileNameWithoutExtension(string path) { }\n    public override string GetFullPath(string path) { }\n    public override string GetFullPath(string path, string basePath) { }\n    public override char[] GetInvalidFileNameChars() { }\n    public override char[] GetInvalidPathChars() { }\n    public override System.ReadOnlySpan<char> GetPathRoot(System.ReadOnlySpan<char> path) { }\n    public override string GetPathRoot(string path) { }\n    public override string GetRandomFileName() { }\n    public override string GetRelativePath(string relativeTo, string path) { }\n    public override string GetTempFileName() { }\n    public override string GetTempPath() { }\n    public override bool HasExtension(System.ReadOnlySpan<char> path) { }\n    public override bool HasExtension(string path) { }\n    public override bool IsPathFullyQualified(System.ReadOnlySpan<char> path) { }\n    public override bool IsPathFullyQualified(string path) { }\n    public override bool IsPathRooted(System.ReadOnlySpan<char> path) { }\n    public override bool IsPathRooted(string path) { }\n    public override string Join(params string[] paths) { }\n    public override string Join(System.ReadOnlySpan<char> path1, System.ReadOnlySpan<char> path2) { }\n    public override string Join(string path1, string path2) { }\n    public override string Join(System.ReadOnlySpan<char> path1, System.ReadOnlySpan<char> path2, System.ReadOnlySpan<char> path3) { }\n    public override string Join(string path1, string path2, string path3) { }\n    public override string Join(System.ReadOnlySpan<char> path1, System.ReadOnlySpan<char> path2, System.ReadOnlySpan<char> path3, System.ReadOnlySpan<char> path4) { }\n    public override string Join(string path1, string path2, string path3, string path4) { }\n    public override System.ReadOnlySpan<char> TrimEndingDirectorySeparator(System.ReadOnlySpan<char> path) { }\n    public override string TrimEndingDirectorySeparator(string path) { }\n    public override bool TryJoin(System.ReadOnlySpan<char> path1, System.ReadOnlySpan<char> path2, System.Span<char> destination, out int charsWritten) { }\n    public override bool TryJoin(System.ReadOnlySpan<char> path1, System.ReadOnlySpan<char> path2, System.ReadOnlySpan<char> path3, System.Span<char> destination, out int charsWritten) { }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining File System Operation Methods in C#\nDESCRIPTION: Abstract methods for various file system operations including moving, opening, reading, and writing files. These methods provide a unified interface for file operations across different implementations.\nSOURCE: https://github.com/testableio/system.io.abstractions/blob/main/tests/TestableIO.System.IO.Abstractions.Api.Tests/Expected/TestableIO.System.IO.Abstractions.Wrappers_net8.0.txt#2025-04-22_snippet_11\n\nLANGUAGE: C#\nCODE:\n```\npublic abstract void Move(string sourceFileName, string destFileName);\npublic abstract void Move(string sourceFileName, string destFileName, bool overwrite);\npublic abstract System.IO.Abstractions.FileSystemStream Open(string path, System.IO.FileMode mode);\npublic abstract System.IO.Abstractions.FileSystemStream Open(string path, System.IO.FileStreamOptions options);\npublic abstract System.IO.Abstractions.FileSystemStream Open(string path, System.IO.FileMode mode, System.IO.FileAccess access);\npublic abstract System.IO.Abstractions.FileSystemStream Open(string path, System.IO.FileMode mode, System.IO.FileAccess access, System.IO.FileShare share);\npublic abstract System.IO.Abstractions.FileSystemStream OpenRead(string path);\npublic abstract System.IO.StreamReader OpenText(string path);\npublic abstract System.IO.Abstractions.FileSystemStream OpenWrite(string path);\npublic abstract byte[] ReadAllBytes(string path);\npublic abstract System.Threading.Tasks.Task<byte[]> ReadAllBytesAsync(string path, System.Threading.CancellationToken cancellationToken = default);\npublic abstract string[] ReadAllLines(string path);\npublic abstract string[] ReadAllLines(string path, System.Text.Encoding encoding);\npublic abstract System.Threading.Tasks.Task<string[]> ReadAllLinesAsync(string path, System.Threading.CancellationToken cancellationToken = default);\npublic abstract System.Threading.Tasks.Task<string[]> ReadAllLinesAsync(string path, System.Text.Encoding encoding, System.Threading.CancellationToken cancellationToken = default);\npublic abstract string ReadAllText(string path);\npublic abstract string ReadAllText(string path, System.Text.Encoding encoding);\npublic abstract System.Threading.Tasks.Task<string> ReadAllTextAsync(string path, System.Threading.CancellationToken cancellationToken = default);\npublic abstract System.Threading.Tasks.Task<string> ReadAllTextAsync(string path, System.Text.Encoding encoding, System.Threading.CancellationToken cancellationToken = default);\npublic abstract System.Collections.Generic.IEnumerable<string> ReadLines(string path);\npublic abstract System.Collections.Generic.IEnumerable<string> ReadLines(string path, System.Text.Encoding encoding);\npublic abstract System.Collections.Generic.IAsyncEnumerable<string> ReadLinesAsync(string path, System.Threading.CancellationToken cancellationToken = default);\npublic abstract System.Collections.Generic.IAsyncEnumerable<string> ReadLinesAsync(string path, System.Text.Encoding encoding, System.Threading.CancellationToken cancellationToken = default);\npublic abstract void Replace(string sourceFileName, string destinationFileName, string destinationBackupFileName);\npublic abstract void Replace(string sourceFileName, string destinationFileName, string destinationBackupFileName, bool ignoreMetadataErrors);\npublic abstract System.IO.Abstractions.IFileSystemInfo ResolveLinkTarget(string linkPath, bool returnFinalTarget);\npublic abstract void SetAttributes(Microsoft.Win32.SafeHandles.SafeFileHandle fileHandle, System.IO.FileAttributes fileAttributes);\npublic abstract void SetAttributes(string path, System.IO.FileAttributes fileAttributes);\npublic abstract void SetCreationTime(Microsoft.Win32.SafeHandles.SafeFileHandle fileHandle, System.DateTime creationTime);\npublic abstract void SetCreationTime(string path, System.DateTime creationTime);\npublic abstract void SetCreationTimeUtc(Microsoft.Win32.SafeHandles.SafeFileHandle fileHandle, System.DateTime creationTimeUtc);\npublic abstract void SetCreationTimeUtc(string path, System.DateTime creationTimeUtc);\npublic abstract void SetLastAccessTime(Microsoft.Win32.SafeHandles.SafeFileHandle fileHandle, System.DateTime lastAccessTime);\npublic abstract void SetLastAccessTime(string path, System.DateTime lastAccessTime);\npublic abstract void SetLastAccessTimeUtc(Microsoft.Win32.SafeHandles.SafeFileHandle fileHandle, System.DateTime lastAccessTimeUtc);\npublic abstract void SetLastAccessTimeUtc(string path, System.DateTime lastAccessTimeUtc);\npublic abstract void SetLastWriteTime(Microsoft.Win32.SafeHandles.SafeFileHandle fileHandle, System.DateTime lastWriteTime);\npublic abstract void SetLastWriteTime(string path, System.DateTime lastWriteTime);\npublic abstract void SetLastWriteTimeUtc(Microsoft.Win32.SafeHandles.SafeFileHandle fileHandle, System.DateTime lastWriteTimeUtc);\npublic abstract void SetLastWriteTimeUtc(string path, System.DateTime lastWriteTimeUtc);\npublic abstract void SetUnixFileMode(Microsoft.Win32.SafeHandles.SafeFileHandle fileHandle, System.IO.UnixFileMode mode);\npublic abstract void SetUnixFileMode(string path, System.IO.UnixFileMode mode);\npublic abstract void WriteAllBytes(string path, byte[] bytes);\npublic abstract System.Threading.Tasks.Task WriteAllBytesAsync(string path, byte[] bytes, System.Threading.CancellationToken cancellationToken = default);\npublic abstract void WriteAllLines(string path, System.Collections.Generic.IEnumerable<string> contents);\npublic abstract void WriteAllLines(string path, string[] contents);\npublic abstract void WriteAllLines(string path, System.Collections.Generic.IEnumerable<string> contents, System.Text.Encoding encoding);\npublic abstract void WriteAllLines(string path, string[] contents, System.Text.Encoding encoding);\npublic abstract System.Threading.Tasks.Task WriteAllLinesAsync(string path, System.Collections.Generic.IEnumerable<string> contents, System.Threading.CancellationToken cancellationToken = default);\npublic abstract System.Threading.Tasks.Task WriteAllLinesAsync(string path, System.Collections.Generic.IEnumerable<string> contents, System.Text.Encoding encoding, System.Threading.CancellationToken cancellationToken = default);\npublic abstract void WriteAllText(string path, string contents);\npublic abstract void WriteAllText(string path, string contents, System.Text.Encoding encoding);\npublic abstract System.Threading.Tasks.Task WriteAllTextAsync(string path, string contents, System.Threading.CancellationToken cancellationToken = default);\npublic abstract System.Threading.Tasks.Task WriteAllTextAsync(string path, string contents, System.Text.Encoding encoding, System.Threading.CancellationToken cancellationToken = default);\n```\n\n----------------------------------------\n\nTITLE: Implementing MockDirectoryData Class\nDESCRIPTION: A serializable class that extends MockFileData to represent directory data in the mock file system. Provides access control functionality for directories.\nSOURCE: https://github.com/testableio/system.io.abstractions/blob/main/tests/TestableIO.System.IO.Abstractions.Api.Tests/Expected/TestableIO.System.IO.Abstractions.TestingHelpers_netstandard2.1.txt#2025-04-22_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\n[System.Serializable]\npublic class MockDirectoryData : System.IO.Abstractions.TestingHelpers.MockFileData\n{\n    public MockDirectoryData() { }\n    public new System.Security.AccessControl.DirectorySecurity AccessControl { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining FileSystemBase Abstract Class in C#\nDESCRIPTION: Abstract base class that defines the core interface for the file system abstraction. It declares abstract properties for accessing file system components.\nSOURCE: https://github.com/testableio/system.io.abstractions/blob/main/tests/TestableIO.System.IO.Abstractions.Api.Tests/Expected/TestableIO.System.IO.Abstractions.Wrappers_net6.0.txt#2025-04-22_snippet_19\n\nLANGUAGE: C#\nCODE:\n```\n[System.Serializable]\npublic abstract class FileSystemBase : System.IO.Abstractions.IFileSystem\n{\n    protected FileSystemBase() { }\n    public abstract System.IO.Abstractions.IDirectory Directory { get; }\n    public abstract System.IO.Abstractions.IDirectoryInfoFactory DirectoryInfo { get; }\n    public abstract System.IO.Abstractions.IDriveInfoFactory DriveInfo { get; }\n    public abstract System.IO.Abstractions.IFile File { get; }\n    public abstract System.IO.Abstractions.IFileInfoFactory FileInfo { get; }\n    public abstract System.IO.Abstractions.IFileStreamFactory FileStream { get; }\n    public abstract System.IO.Abstractions.IFileSystemWatcherFactory FileSystemWatcher { get; }\n    public abstract System.IO.Abstractions.IFileVersionInfoFactory FileVersionInfo { get; }\n    public abstract System.IO.Abstractions.IPath Path { get; }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing PathVerifier Class in C#\nDESCRIPTION: This class provides methods for verifying and normalizing file system paths, including checking for invalid characters and normalizing drive names.\nSOURCE: https://github.com/testableio/system.io.abstractions/blob/main/tests/TestableIO.System.IO.Abstractions.Api.Tests/Expected/TestableIO.System.IO.Abstractions.TestingHelpers_net9.0.txt#2025-04-22_snippet_27\n\nLANGUAGE: C#\nCODE:\n```\n[System.Serializable]\npublic class PathVerifier\n{\n    public PathVerifier(System.IO.Abstractions.TestingHelpers.IMockFileDataAccessor mockFileDataAccessor) { }\n    public void CheckInvalidPathChars(string path, bool checkAdditional = false) { }\n    public bool HasIllegalCharacters(string path, bool checkAdditional) { }\n    public void IsLegalAbsoluteOrRelative(string path, string paramName) { }\n    public string NormalizeDriveName(string name) { }\n    public bool TryNormalizeDriveName(string name, out string result) { }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing MockFileSystem Methods in C#\nDESCRIPTION: Defines methods for the MockFileSystem class that provide functionality for managing mock files, directories, and drives. These methods allow for creation, modification, and retrieval of mock file system entities.\nSOURCE: https://github.com/testableio/system.io.abstractions/blob/main/tests/TestableIO.System.IO.Abstractions.Api.Tests/Expected/TestableIO.System.IO.Abstractions.TestingHelpers_netstandard2.0.txt#2025-04-22_snippet_19\n\nLANGUAGE: C#\nCODE:\n```\npublic void AddDirectory(System.IO.Abstractions.IDirectoryInfo path) { }\npublic void AddDirectory(string path) { }\npublic void AddDrive(string name, System.IO.Abstractions.TestingHelpers.MockDriveData mockDrive) { }\npublic void AddEmptyFile(System.IO.Abstractions.IFileInfo path) { }\npublic void AddEmptyFile(string path) { }\npublic void AddFile(System.IO.Abstractions.IFileInfo path, System.IO.Abstractions.TestingHelpers.MockFileData data, bool verifyAccess = true) { }\npublic void AddFile(string path, System.IO.Abstractions.TestingHelpers.MockFileData mockFile, bool verifyAccess = true) { }\npublic void AddFileFromEmbeddedResource(string path, System.Reflection.Assembly resourceAssembly, string embeddedResourcePath) { }\npublic void AddFilesFromEmbeddedNamespace(string path, System.Reflection.Assembly resourceAssembly, string embeddedResourcePath) { }\npublic System.IO.Abstractions.TestingHelpers.MockFileData AdjustTimes(System.IO.Abstractions.TestingHelpers.MockFileData fileData, System.IO.Abstractions.TestingHelpers.TimeAdjustments timeAdjustments) { }\npublic bool FileExists(string path) { }\npublic System.IO.Abstractions.TestingHelpers.MockDriveData GetDrive(string name) { }\npublic System.IO.Abstractions.TestingHelpers.MockFileData GetFile(System.IO.Abstractions.IFileInfo path) { }\npublic System.IO.Abstractions.TestingHelpers.MockFileData GetFile(string path) { }\n```\n\n----------------------------------------\n\nTITLE: Implementing File Stream Operations in C#\nDESCRIPTION: Defines file stream operation methods that override base implementations. These methods handle opening files in various modes and with different access levels.\nSOURCE: https://github.com/testableio/system.io.abstractions/blob/main/tests/TestableIO.System.IO.Abstractions.Api.Tests/Expected/TestableIO.System.IO.Abstractions.TestingHelpers_netstandard2.0.txt#2025-04-22_snippet_13\n\nLANGUAGE: C#\nCODE:\n```\npublic override System.IO.Abstractions.FileSystemStream Open(System.IO.FileMode mode) { }\npublic override System.IO.Abstractions.FileSystemStream Open(System.IO.FileMode mode, System.IO.FileAccess access) { }\npublic override System.IO.Abstractions.FileSystemStream Open(System.IO.FileMode mode, System.IO.FileAccess access, System.IO.FileShare share) { }\npublic override System.IO.Abstractions.FileSystemStream OpenRead() { }\npublic override System.IO.StreamReader OpenText() { }\npublic override System.IO.Abstractions.FileSystemStream OpenWrite() { }\n```\n\n----------------------------------------\n\nTITLE: Implementing Path Operations in C# with PathBase Class\nDESCRIPTION: This snippet defines an abstract PathBase class that implements IFileSystemEntity and IPath interfaces. It provides methods for various path-related operations such as combining paths, getting file extensions, and checking path validity.\nSOURCE: https://github.com/testableio/system.io.abstractions/blob/main/tests/TestableIO.System.IO.Abstractions.Api.Tests/Expected/TestableIO.System.IO.Abstractions.Wrappers_net8.0.txt#2025-04-22_snippet_22\n\nLANGUAGE: C#\nCODE:\n```\n[System.Serializable]\npublic abstract class PathBase : System.IO.Abstractions.IFileSystemEntity, System.IO.Abstractions.IPath\n{\n    protected PathBase(System.IO.Abstractions.IFileSystem fileSystem) { }\n    public abstract char AltDirectorySeparatorChar { get; }\n    public abstract char DirectorySeparatorChar { get; }\n    public System.IO.Abstractions.IFileSystem FileSystem { get; }\n    [System.Obsolete(\"Please use GetInvalidPathChars or GetInvalidFileNameChars instead.\")]\n    public abstract char[] InvalidPathChars { get; }\n    public abstract char PathSeparator { get; }\n    public abstract char VolumeSeparatorChar { get; }\n    public abstract string ChangeExtension(string path, string extension);\n    public abstract string Combine(params string[] paths);\n    public abstract string Combine(string path1, string path2);\n    public abstract string Combine(string path1, string path2, string path3);\n    public abstract string Combine(string path1, string path2, string path3, string path4);\n    public abstract bool EndsInDirectorySeparator(System.ReadOnlySpan<char> path);\n    public abstract bool EndsInDirectorySeparator(string path);\n    public abstract bool Exists(string path);\n    public abstract System.ReadOnlySpan<char> GetDirectoryName(System.ReadOnlySpan<char> path);\n    public abstract string GetDirectoryName(string path);\n    public abstract System.ReadOnlySpan<char> GetExtension(System.ReadOnlySpan<char> path);\n    public abstract string GetExtension(string path);\n    public abstract System.ReadOnlySpan<char> GetFileName(System.ReadOnlySpan<char> path);\n    public abstract string GetFileName(string path);\n    public abstract System.ReadOnlySpan<char> GetFileNameWithoutExtension(System.ReadOnlySpan<char> path);\n    public abstract string GetFileNameWithoutExtension(string path);\n    public abstract string GetFullPath(string path);\n    public abstract string GetFullPath(string path, string basePath);\n    public abstract char[] GetInvalidFileNameChars();\n    public abstract char[] GetInvalidPathChars();\n    public abstract System.ReadOnlySpan<char> GetPathRoot(System.ReadOnlySpan<char> path);\n    public abstract string GetPathRoot(string path);\n    public abstract string GetRandomFileName();\n    public abstract string GetRelativePath(string relativeTo, string path);\n    public abstract string GetTempFileName();\n    public abstract string GetTempPath();\n    public abstract bool HasExtension(System.ReadOnlySpan<char> path);\n    public abstract bool HasExtension(string path);\n    public abstract bool IsPathFullyQualified(System.ReadOnlySpan<char> path);\n    public abstract bool IsPathFullyQualified(string path);\n    public abstract bool IsPathRooted(System.ReadOnlySpan<char> path);\n    public abstract bool IsPathRooted(string path);\n    public abstract string Join(params string[] paths);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing MockFileStreamFactory Class in C#\nDESCRIPTION: Implementation of a factory class for creating MockFileStream instances. This factory provides various overloaded methods to create mock file streams for testing purposes.\nSOURCE: https://github.com/testableio/system.io.abstractions/blob/main/tests/TestableIO.System.IO.Abstractions.Api.Tests/Expected/TestableIO.System.IO.Abstractions.TestingHelpers_net9.0.txt#2025-04-22_snippet_16\n\nLANGUAGE: C#\nCODE:\n```\n[System.Serializable]\npublic class MockFileStreamFactory : System.IO.Abstractions.IFileStreamFactory, System.IO.Abstractions.IFileSystemEntity\n{\n    public MockFileStreamFactory(System.IO.Abstractions.TestingHelpers.IMockFileDataAccessor mockFileSystem) { }\n    public System.IO.Abstractions.IFileSystem FileSystem { get; }\n    public System.IO.Abstractions.FileSystemStream New(Microsoft.Win32.SafeHandles.SafeFileHandle handle, System.IO.FileAccess access) { }\n    public System.IO.Abstractions.FileSystemStream New(string path, System.IO.FileMode mode) { }\n    public System.IO.Abstractions.FileSystemStream New(string path, System.IO.FileStreamOptions options) { }\n    public System.IO.Abstractions.FileSystemStream New(Microsoft.Win32.SafeHandles.SafeFileHandle handle, System.IO.FileAccess access, int bufferSize) { }\n    public System.IO.Abstractions.FileSystemStream New(string path, System.IO.FileMode mode, System.IO.FileAccess access) { }\n    public System.IO.Abstractions.FileSystemStream New(Microsoft.Win32.SafeHandles.SafeFileHandle handle, System.IO.FileAccess access, int bufferSize, bool isAsync) { }\n    public System.IO.Abstractions.FileSystemStream New(string path, System.IO.FileMode mode, System.IO.FileAccess access, System.IO.FileShare share) { }\n    public System.IO.Abstractions.FileSystemStream New(string path, System.IO.FileMode mode, System.IO.FileAccess access, System.IO.FileShare share, int bufferSize) { }\n    public System.IO.Abstractions.FileSystemStream New(string path, System.IO.FileMode mode, System.IO.FileAccess access, System.IO.FileShare share, int bufferSize, System.IO.FileOptions options) { }\n    public System.IO.Abstractions.FileSystemStream New(string path, System.IO.FileMode mode, System.IO.FileAccess access, System.IO.FileShare share, int bufferSize, bool useAsync) { }\n    public System.IO.Abstractions.FileSystemStream Wrap(System.IO.FileStream fileStream) { }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing File Operation Extensions in C#\nDESCRIPTION: Static extension methods for FileStreamAclExtensions class that provide Windows-specific access control functionality for FileSystemStream objects.\nSOURCE: https://github.com/testableio/system.io.abstractions/blob/main/tests/TestableIO.System.IO.Abstractions.Api.Tests/Expected/TestableIO.System.IO.Abstractions.Wrappers_net6.0.txt#2025-04-22_snippet_17\n\nLANGUAGE: C#\nCODE:\n```\npublic static class FileStreamAclExtensions\n{\n    [System.Runtime.Versioning.SupportedOSPlatform(\"windows\")]\n    public static System.Security.AccessControl.FileSecurity GetAccessControl(this System.IO.Abstractions.FileSystemStream fileStream) { }\n    [System.Runtime.Versioning.SupportedOSPlatform(\"windows\")]\n    public static void SetAccessControl(this System.IO.Abstractions.FileSystemStream fileStream, System.Security.AccessControl.FileSecurity fileSecurity) { }\n}\n```\n\n----------------------------------------\n\nTITLE: Directory Info ACL Extension Methods\nDESCRIPTION: Extension methods for IDirectoryInfo interface providing access control functionality for directory information objects.\nSOURCE: https://github.com/testableio/system.io.abstractions/blob/main/tests/TestableIO.System.IO.Abstractions.Api.Tests/Expected/TestableIO.System.IO.Abstractions.Wrappers_netstandard2.1.txt#2025-04-22_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\npublic static class DirectoryInfoAclExtensions\n{\n    public static void Create(this System.IO.Abstractions.IDirectoryInfo directoryInfo, System.Security.AccessControl.DirectorySecurity directorySecurity) { }\n    public static System.Security.AccessControl.DirectorySecurity GetAccessControl(this System.IO.Abstractions.IDirectoryInfo directoryInfo) { }\n    public static System.Security.AccessControl.DirectorySecurity GetAccessControl(this System.IO.Abstractions.IDirectoryInfo directoryInfo, System.Security.AccessControl.AccessControlSections includeSections) { }\n    public static void SetAccessControl(this System.IO.Abstractions.IDirectoryInfo directoryInfo, System.Security.AccessControl.DirectorySecurity directorySecurity) { }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing DirectoryWrapper in C#\nDESCRIPTION: This snippet provides an implementation of the `DirectoryWrapper` class, which inherits from `DirectoryBase`. It encapsulates methods to perform directory operations, such as creating, deleting, and enumerating directories and filesystem entries. The class requires a `System.IO.Abstractions.IFileSystem` dependency for initialization and primarily takes paths as input parameters. It returns directory information in various enumerable formats.\nSOURCE: https://github.com/testableio/system.io.abstractions/blob/main/tests/TestableIO.System.IO.Abstractions.Api.Tests/Expected/TestableIO.System.IO.Abstractions.Wrappers_net472.txt#2025-04-22_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\npublic class DirectoryWrapper : System.IO.Abstractions.DirectoryBase { ... public override string[] GetFiles(string path, string searchPattern, System.IO.SearchOption searchOption) { } ... }\n```\n\n----------------------------------------\n\nTITLE: Implementing PathVerifier Class for File Path Validation in C#\nDESCRIPTION: The PathVerifier class provides methods for validating and normalizing file paths. It includes functionality to check for invalid characters, normalize drive names, and validate absolute or relative paths.\nSOURCE: https://github.com/testableio/system.io.abstractions/blob/main/tests/TestableIO.System.IO.Abstractions.Api.Tests/Expected/TestableIO.System.IO.Abstractions.TestingHelpers_netstandard2.1.txt#2025-04-22_snippet_23\n\nLANGUAGE: C#\nCODE:\n```\npublic class PathVerifier\n{\n    public PathVerifier(System.IO.Abstractions.TestingHelpers.IMockFileDataAccessor mockFileDataAccessor) { }\n    public void CheckInvalidPathChars(string path, bool checkAdditional = false) { }\n    public bool HasIllegalCharacters(string path, bool checkAdditional) { }\n    public void IsLegalAbsoluteOrRelative(string path, string paramName) { }\n    public string NormalizeDriveName(string name) { }\n    public bool TryNormalizeDriveName(string name, out string result) { }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing File Operation Methods in C#\nDESCRIPTION: Defines file operation methods that override base implementations. These methods provide functionality for common file operations such as copying, moving, creating, and deleting files.\nSOURCE: https://github.com/testableio/system.io.abstractions/blob/main/tests/TestableIO.System.IO.Abstractions.Api.Tests/Expected/TestableIO.System.IO.Abstractions.TestingHelpers_netstandard2.0.txt#2025-04-22_snippet_12\n\nLANGUAGE: C#\nCODE:\n```\npublic override System.IO.StreamWriter AppendText() { }\npublic override System.IO.Abstractions.IFileInfo CopyTo(string destFileName) { }\npublic override System.IO.Abstractions.IFileInfo CopyTo(string destFileName, bool overwrite) { }\npublic override System.IO.Abstractions.FileSystemStream Create() { }\npublic override System.IO.StreamWriter CreateText() { }\npublic override void Decrypt() { }\npublic override void Delete() { }\npublic override void Encrypt() { }\npublic object GetAccessControl() { }\npublic object GetAccessControl(System.IO.Abstractions.IFileSystemAclSupport.AccessControlSections includeSections) { }\npublic override void MoveTo(string destFileName) { }\n```\n\n----------------------------------------\n\nTITLE: Implementing MockFileStream Class for File I/O Operations (C#)\nDESCRIPTION: This snippet defines the MockFileStream class which implements file I/O operations for the mock file system. It includes methods for reading, writing, and managing file streams.\nSOURCE: https://github.com/testableio/system.io.abstractions/blob/main/tests/TestableIO.System.IO.Abstractions.Api.Tests/Expected/TestableIO.System.IO.Abstractions.TestingHelpers_net8.0.txt#2025-04-22_snippet_15\n\nLANGUAGE: C#\nCODE:\n```\npublic class MockFileStream : System.IO.Abstractions.FileSystemStream, System.IO.Abstractions.IFileSystemAclSupport\n{\n    public MockFileStream(System.IO.Abstractions.TestingHelpers.IMockFileDataAccessor mockFileDataAccessor, string path, System.IO.FileMode mode, System.IO.FileAccess access = 3, System.IO.FileOptions options = 0) { }\n    public override bool CanRead { get; }\n    public override bool CanWrite { get; }\n    public static System.IO.Abstractions.FileSystemStream Null { get; }\n    protected override void Dispose(bool disposing) { }\n    public override void EndWrite(System.IAsyncResult asyncResult) { }\n    public override void Flush() { }\n    public override void Flush(bool flushToDisk) { }\n    public override System.Threading.Tasks.Task FlushAsync(System.Threading.CancellationToken cancellationToken) { }\n    [System.Runtime.Versioning.SupportedOSPlatform(\"windows\")]\n    public object GetAccessControl() { }\n    [System.Runtime.Versioning.SupportedOSPlatform(\"windows\")]\n    public object GetAccessControl(System.IO.Abstractions.IFileSystemAclSupport.AccessControlSections includeSections) { }\n    public override int Read(byte[] buffer, int offset, int count) { }\n    [System.Runtime.Versioning.SupportedOSPlatform(\"windows\")]\n    public void SetAccessControl(object value) { }\n    public override void SetLength(long value) { }\n    public override void Write(System.ReadOnlySpan<byte> buffer) { }\n    public override void Write(byte[] buffer, int offset, int count) { }\n    public override System.Threading.Tasks.ValueTask WriteAsync(System.ReadOnlyMemory<byte> buffer, System.Threading.CancellationToken cancellationToken = default) { }\n    public override System.Threading.Tasks.Task WriteAsync(byte[] buffer, int offset, int count, System.Threading.CancellationToken cancellationToken) { }\n    public override void WriteByte(byte value) { }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating FileInfo Instances using MockFileInfoFactory in System.IO.Abstractions (C#)\nDESCRIPTION: MockFileInfoFactory serves as a mock factory for producing MockFileInfo objects, facilitating testing by providing methods to create and wrap file info representations. The class tracks the mock file system context and offers the New() method for instantiating new mock file info by file name, and Wrap() for wrapping existing FileInfo objects. This abstraction helps simulate file info creation in a controlled, testable environment.\nSOURCE: https://github.com/testableio/system.io.abstractions/blob/main/tests/TestableIO.System.IO.Abstractions.Api.Tests/Expected/TestableIO.System.IO.Abstractions.TestingHelpers_netstandard2.1.txt#2025-04-22_snippet_13\n\nLANGUAGE: csharp\nCODE:\n```\n[System.Serializable]\npublic class MockFileInfoFactory : System.IO.Abstractions.IFileInfoFactory, System.IO.Abstractions.IFileSystemEntity\n{\n    public MockFileInfoFactory(System.IO.Abstractions.TestingHelpers.IMockFileDataAccessor mockFileSystem) { }\n    public System.IO.Abstractions.IFileSystem FileSystem { get; }\n    public System.IO.Abstractions.IFileInfo New(string fileName) { }\n    public System.IO.Abstractions.IFileInfo Wrap(System.IO.FileInfo fileInfo) { }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining FileSystemWatcherBase Abstract Class in C#\nDESCRIPTION: This abstract class provides a base implementation for file system watchers, including properties for monitoring settings and methods for handling file system events.\nSOURCE: https://github.com/testableio/system.io.abstractions/blob/main/tests/TestableIO.System.IO.Abstractions.Api.Tests/Expected/TestableIO.System.IO.Abstractions.Wrappers_net472.txt#2025-04-22_snippet_19\n\nLANGUAGE: C#\nCODE:\n```\n[System.Serializable]\npublic abstract class FileSystemWatcherBase : System.IDisposable, System.IO.Abstractions.IFileSystemEntity, System.IO.Abstractions.IFileSystemWatcher\n{\n    protected FileSystemWatcherBase() { }\n    public abstract System.ComponentModel.IContainer Container { get; }\n    public abstract bool EnableRaisingEvents { get; set; }\n    public abstract System.IO.Abstractions.IFileSystem FileSystem { get; }\n    public abstract string Filter { get; set; }\n    public abstract bool IncludeSubdirectories { get; set; }\n    public abstract int InternalBufferSize { get; set; }\n    public abstract System.IO.NotifyFilters NotifyFilter { get; set; }\n    public abstract string Path { get; set; }\n    public abstract System.ComponentModel.ISite Site { get; set; }\n    public abstract System.ComponentModel.ISynchronizeInvoke SynchronizingObject { get; set; }\n    public virtual event System.IO.FileSystemEventHandler Changed;\n    public virtual event System.IO.FileSystemEventHandler Created;\n    public virtual event System.IO.FileSystemEventHandler Deleted;\n    public virtual event System.IO.ErrorEventHandler Error;\n    public virtual event System.IO.RenamedEventHandler Renamed;\n    public abstract void BeginInit();\n    public void Dispose() { }\n    public virtual void Dispose(bool disposing) { }\n    public abstract void EndInit();\n    protected void OnChanged(object sender, System.IO.FileSystemEventArgs args) { }\n    protected void OnCreated(object sender, System.IO.FileSystemEventArgs args) { }\n    protected void OnDeleted(object sender, System.IO.FileSystemEventArgs args) { }\n    protected void OnError(object sender, System.IO.ErrorEventArgs args) { }\n    protected void OnRenamed(object sender, System.IO.RenamedEventArgs args) { }\n    public abstract System.IO.Abstractions.IWaitForChangedResult WaitForChanged(System.IO.WatcherChangeTypes changeType);\n    public abstract System.IO.Abstractions.IWaitForChangedResult WaitForChanged(System.IO.WatcherChangeTypes changeType, int timeout);\n    public static System.IO.Abstractions.FileSystemWatcherBase op_Implicit(System.IO.FileSystemWatcher watcher) { }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining FileSystemWatcherBase Abstract Class in C#\nDESCRIPTION: Abstract class FileSystemWatcherBase implements IFileSystemWatcher interface and provides a base for file system watcher objects. It includes properties and methods for monitoring file system changes.\nSOURCE: https://github.com/testableio/system.io.abstractions/blob/main/tests/TestableIO.System.IO.Abstractions.Api.Tests/Expected/TestableIO.System.IO.Abstractions.Wrappers_net9.0.txt#2025-04-22_snippet_21\n\nLANGUAGE: C#\nCODE:\n```\n[System.Serializable]\npublic abstract class FileSystemWatcherBase : System.IDisposable, System.IO.Abstractions.IFileSystemEntity, System.IO.Abstractions.IFileSystemWatcher\n{\n    protected FileSystemWatcherBase() { }\n    public abstract System.ComponentModel.IContainer Container { get; }\n    public abstract bool EnableRaisingEvents { get; set; }\n    public abstract System.IO.Abstractions.IFileSystem FileSystem { get; }\n    public abstract string Filter { get; set; }\n    public abstract System.Collections.ObjectModel.Collection<string> Filters { get; }\n    public abstract bool IncludeSubdirectories { get; set; }\n    public abstract int InternalBufferSize { get; set; }\n    public abstract System.IO.NotifyFilters NotifyFilter { get; set; }\n    public abstract string Path { get; set; }\n    public abstract System.ComponentModel.ISite Site { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: FileInfoAclExtensions Class Declaration for Windows File Security Operations in C#\nDESCRIPTION: Static extension class that provides methods for managing file access control lists (ACLs) on Windows platforms. It extends IFileInfo with methods to get and set file security information using the Windows security model.\nSOURCE: https://github.com/testableio/system.io.abstractions/blob/main/tests/TestableIO.System.IO.Abstractions.Api.Tests/Expected/TestableIO.System.IO.Abstractions.Wrappers_net9.0.txt#2025-04-22_snippet_13\n\nLANGUAGE: C#\nCODE:\n```\npublic static class FileInfoAclExtensions\n{\n    [System.Runtime.Versioning.SupportedOSPlatform(\"windows\")]\n    public static System.Security.AccessControl.FileSecurity GetAccessControl(this System.IO.Abstractions.IFileInfo fileInfo) { }\n    [System.Runtime.Versioning.SupportedOSPlatform(\"windows\")]\n    public static System.Security.AccessControl.FileSecurity GetAccessControl(this System.IO.Abstractions.IFileInfo fileInfo, System.Security.AccessControl.AccessControlSections includeSections) { }\n    [System.Runtime.Versioning.SupportedOSPlatform(\"windows\")]\n    public static void SetAccessControl(this System.IO.Abstractions.IFileInfo fileInfo, System.Security.AccessControl.FileSecurity fileSecurity) { }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing MockFileSystemWatcherFactory Class in C#\nDESCRIPTION: Factory class for creating mock file system watchers. Implements IFileSystemWatcherFactory to create mock instances that can monitor file system changes in the mock file system.\nSOURCE: https://github.com/testableio/system.io.abstractions/blob/main/tests/TestableIO.System.IO.Abstractions.Api.Tests/Expected/TestableIO.System.IO.Abstractions.TestingHelpers_net6.0.txt#2025-04-22_snippet_24\n\nLANGUAGE: C#\nCODE:\n```\n[System.Serializable]\npublic class MockFileSystemWatcherFactory : System.IO.Abstractions.IFileSystemEntity, System.IO.Abstractions.IFileSystemWatcherFactory\n{\n    public MockFileSystemWatcherFactory(System.IO.Abstractions.TestingHelpers.MockFileSystem mockFileSystem) { }\n    public System.IO.Abstractions.IFileSystem FileSystem { get; }\n    public System.IO.Abstractions.IFileSystemWatcher New() { }\n    public System.IO.Abstractions.IFileSystemWatcher New(string path) { }\n    public System.IO.Abstractions.IFileSystemWatcher New(string path, string filter) { }\n    public System.IO.Abstractions.IFileSystemWatcher Wrap(System.IO.FileSystemWatcher fileSystemWatcher) { }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing MockFileVersionInfoFactory in C#\nDESCRIPTION: Factory class for creating MockFileVersionInfo instances with a dependency on IMockFileDataAccessor. Implements IFileVersionInfoFactory to provide version information for specified files.\nSOURCE: https://github.com/testableio/system.io.abstractions/blob/main/tests/TestableIO.System.IO.Abstractions.Api.Tests/Expected/TestableIO.System.IO.Abstractions.TestingHelpers_net8.0.txt#2025-04-22_snippet_22\n\nLANGUAGE: C#\nCODE:\n```\n[System.Serializable]\npublic class MockFileVersionInfoFactory : System.IO.Abstractions.IFileSystemEntity, System.IO.Abstractions.IFileVersionInfoFactory\n{\n    public MockFileVersionInfoFactory(System.IO.Abstractions.TestingHelpers.IMockFileDataAccessor mockFileSystem) { }\n    public System.IO.Abstractions.IFileSystem FileSystem { get; }\n    public System.IO.Abstractions.IFileVersionInfo GetVersionInfo(string fileName) { }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing FileSystemWatcherFactory Class in C#\nDESCRIPTION: Factory class for creating IFileSystemWatcher instances. Provides methods to create new watchers or wrap existing FileSystemWatcher objects, enabling file system change monitoring.\nSOURCE: https://github.com/testableio/system.io.abstractions/blob/main/tests/TestableIO.System.IO.Abstractions.Api.Tests/Expected/TestableIO.System.IO.Abstractions.Wrappers_netstandard2.0.txt#2025-04-22_snippet_19\n\nLANGUAGE: C#\nCODE:\n```\n[System.Serializable]\npublic class FileSystemWatcherFactory : System.IO.Abstractions.IFileSystemEntity, System.IO.Abstractions.IFileSystemWatcherFactory\n{\n    public FileSystemWatcherFactory(System.IO.Abstractions.IFileSystem fileSystem) { }\n    public System.IO.Abstractions.IFileSystem FileSystem { get; }\n    public System.IO.Abstractions.IFileSystemWatcher New() { }\n    public System.IO.Abstractions.IFileSystemWatcher New(string path) { }\n    public System.IO.Abstractions.IFileSystemWatcher New(string path, string filter) { }\n    public System.IO.Abstractions.IFileSystemWatcher Wrap(System.IO.FileSystemWatcher fileSystemWatcher) { }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining DirectoryBase Abstractions in C#\nDESCRIPTION: The C# snippet represents a class extending DirectoryBase that defines various file system operations such as creating, enumerating, and deleting directories. It includes methods for handling both directories and file system infos, enabling extended functionality by overriding abstract methods. Dependencies include System.IO.Abstractions.\nSOURCE: https://github.com/testableio/system.io.abstractions/blob/main/tests/TestableIO.System.IO.Abstractions.Api.Tests/Expected/TestableIO.System.IO.Abstractions.Wrappers_netstandard2.0.txt#2025-04-22_snippet_6\n\nLANGUAGE: C#\nCODE:\n```\npublic override string FullName { get; }\npublic override System.DateTime LastAccessTime { get; set; }\npublic override System.DateTime LastAccessTimeUtc { get; set; }\npublic override System.DateTime LastWriteTime { get; set; }\npublic override System.DateTime LastWriteTimeUtc { get; set; }\npublic override string Name { get; }\npublic override System.IO.Abstractions.IDirectoryInfo Parent { get; }\npublic override System.IO.Abstractions.IDirectoryInfo Root { get; }\npublic override void Create() { }\npublic override System.IO.Abstractions.IDirectoryInfo CreateSubdirectory(string path) { }\npublic override void Delete() { }\npublic override void Delete(bool recursive) { }\npublic override System.Collections.Generic.IEnumerable<System.IO.Abstractions.IDirectoryInfo> EnumerateDirectories() { }\npublic override System.Collections.Generic.IEnumerable<System.IO.Abstractions.IDirectoryInfo> EnumerateDirectories(string searchPattern) { }\npublic override System.Collections.Generic.IEnumerable<System.IO.Abstractions.IDirectoryInfo> EnumerateDirectories(string searchPattern, System.IO.SearchOption searchOption) { }\npublic override System.Collections.Generic.IEnumerable<System.IO.Abstractions.IFileSystemInfo> EnumerateFileSystemInfos() { }\npublic override System.Collections.Generic.IEnumerable<System.IO.Abstractions.IFileSystemInfo> EnumerateFileSystemInfos(string searchPattern) { }\npublic override System.Collections.Generic.IEnumerable<System.IO.Abstractions.IFileSystemInfo> EnumerateFileSystemInfos(string searchPattern, System.IO.SearchOption searchOption) { }\npublic override System.Collections.Generic.IEnumerable<System.IO.Abstractions.IFileInfo> EnumerateFiles() { }\npublic override System.Collections.Generic.IEnumerable<System.IO.Abstractions.IFileInfo> EnumerateFiles(string searchPattern) { }\npublic override System.Collections.Generic.IEnumerable<System.IO.Abstractions.IFileInfo> EnumerateFiles(string searchPattern, System.IO.SearchOption searchOption) { }\npublic object GetAccessControl() { }\npublic object GetAccessControl(System.IO.Abstractions.IFileSystemAclSupport.AccessControlSections includeSections) { }\npublic override System.IO.Abstractions.IDirectoryInfo[] GetDirectories() { }\npublic override System.IO.Abstractions.IDirectoryInfo[] GetDirectories(string searchPattern) { }\npublic override System.IO.Abstractions.IDirectoryInfo[] GetDirectories(string searchPattern, System.IO.SearchOption searchOption) { }\npublic override System.IO.Abstractions.IFileSystemInfo[] GetFileSystemInfos() { }\npublic override System.IO.Abstractions.IFileSystemInfo[] GetFileSystemInfos(string searchPattern) { }\npublic override System.IO.Abstractions.IFileSystemInfo[] GetFileSystemInfos(string searchPattern, System.IO.SearchOption searchOption) { }\npublic override System.IO.Abstractions.IFileInfo[] GetFiles() { }\npublic override System.IO.Abstractions.IFileInfo[] GetFiles(string searchPattern) { }\npublic override System.IO.Abstractions.IFileInfo[] GetFiles(string searchPattern, System.IO.SearchOption searchOption) { }\npublic override void MoveTo(string destDirName) { }\npublic override void Refresh() { }\npublic void SetAccessControl(object value) { }\npublic override string ToString() { }\n```\n\n----------------------------------------\n\nTITLE: DirectoryInfoAclExtensions Class Implementation\nDESCRIPTION: Extension methods for the IDirectoryInfo interface that provide access control functionality such as creating directories with security settings and getting/setting access control configurations.\nSOURCE: https://github.com/testableio/system.io.abstractions/blob/main/tests/TestableIO.System.IO.Abstractions.Api.Tests/Expected/TestableIO.System.IO.Abstractions.Wrappers_net472.txt#2025-04-22_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\npublic static class DirectoryInfoAclExtensions\n{\n    public static void Create(this System.IO.Abstractions.IDirectoryInfo directoryInfo, System.Security.AccessControl.DirectorySecurity directorySecurity) { }\n    public static System.Security.AccessControl.DirectorySecurity GetAccessControl(this System.IO.Abstractions.IDirectoryInfo directoryInfo) { }\n    public static System.Security.AccessControl.DirectorySecurity GetAccessControl(this System.IO.Abstractions.IDirectoryInfo directoryInfo, System.Security.AccessControl.AccessControlSections includeSections) { }\n    public static void SetAccessControl(this System.IO.Abstractions.IDirectoryInfo directoryInfo, System.Security.AccessControl.DirectorySecurity directorySecurity) { }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing MockFileSystemWatcherFactory in C#\nDESCRIPTION: Factory class for creating and managing file system watchers in a mock environment. Implements IFileSystemWatcherFactory interface with methods to create new watchers and wrap existing FileSystemWatcher instances.\nSOURCE: https://github.com/testableio/system.io.abstractions/blob/main/tests/TestableIO.System.IO.Abstractions.Api.Tests/Expected/TestableIO.System.IO.Abstractions.TestingHelpers_net8.0.txt#2025-04-22_snippet_20\n\nLANGUAGE: C#\nCODE:\n```\n[System.Serializable]\npublic class MockFileSystemWatcherFactory : System.IO.Abstractions.IFileSystemEntity, System.IO.Abstractions.IFileSystemWatcherFactory\n{\n    public MockFileSystemWatcherFactory(System.IO.Abstractions.TestingHelpers.MockFileSystem mockFileSystem) { }\n    public System.IO.Abstractions.IFileSystem FileSystem { get; }\n    public System.IO.Abstractions.IFileSystemWatcher New() { }\n    public System.IO.Abstractions.IFileSystemWatcher New(string path) { }\n    public System.IO.Abstractions.IFileSystemWatcher New(string path, string filter) { }\n    public System.IO.Abstractions.IFileSystemWatcher Wrap(System.IO.FileSystemWatcher fileSystemWatcher) { }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing FileSystemWatcherWrapper Class in C#\nDESCRIPTION: A concrete implementation of FileSystemWatcherBase that wraps System.IO.FileSystemWatcher. It provides constructors for creating wrappers with various initialization parameters.\nSOURCE: https://github.com/testableio/system.io.abstractions/blob/main/tests/TestableIO.System.IO.Abstractions.Api.Tests/Expected/TestableIO.System.IO.Abstractions.Wrappers_netstandard2.1.txt#2025-04-22_snippet_20\n\nLANGUAGE: C#\nCODE:\n```\n[System.Serializable]\npublic class FileSystemWatcherWrapper : System.IO.Abstractions.FileSystemWatcherBase\n{\n    public FileSystemWatcherWrapper(System.IO.Abstractions.IFileSystem fileSystem) { }\n    public FileSystemWatcherWrapper(System.IO.Abstractions.IFileSystem fileSystem, System.IO.FileSystemWatcher watcher) { }\n    public FileSystemWatcherWrapper(System.IO.Abstractions.IFileSystem fileSystem, string path) { }\n    public FileSystemWatcherWrapper(System.IO.Abstractions.IFileSystem fileSystem, string path, string filter) { }\n    public override System.ComponentModel.IContainer Container { get; }\n    public override bool EnableRaisingEvents { get; set; }\n    public override System.IO.Abstractions.IFileSystem FileSystem { get; }\n    public override string Filter { get; set; }\n    public override bool IncludeSubdirectories { get; set; }\n    public override int InternalBufferSize { get; set; }\n    public override System.IO.NotifyFilters NotifyFilter { get; set; }\n    public override string Path { get; set; }\n    public override System.ComponentModel.ISite Site { get; set; }\n    public override System.ComponentModel.ISynchronizeInvoke SynchronizingObject { get; set; }\n    public override void BeginInit() { }\n    public override void Dispose(bool disposing) { }\n    public override void EndInit() { }\n    public override System.IO.Abstractions.IWaitForChangedResult WaitForChanged(System.IO.WatcherChangeTypes changeType) { }\n    public override System.IO.Abstractions.IWaitForChangedResult WaitForChanged(System.IO.WatcherChangeTypes changeType, int timeout) { }\n}\n```\n\n----------------------------------------\n\nTITLE: Extending File System Access Control in C#\nDESCRIPTION: FileAclExtensions class enhances file security by providing extension methods to get and set access control permissions on files. It leverages System.Security.AccessControl to facilitate interaction with file access control lists.\nSOURCE: https://github.com/testableio/system.io.abstractions/blob/main/tests/TestableIO.System.IO.Abstractions.Api.Tests/Expected/TestableIO.System.IO.Abstractions.Wrappers_netstandard2.0.txt#2025-04-22_snippet_9\n\nLANGUAGE: C#\nCODE:\n```\npublic static class FileAclExtensions {\n    public static System.Security.AccessControl.FileSecurity GetAccessControl(this System.IO.Abstractions.IFile file, string path) { }\n    public static System.Security.AccessControl.FileSecurity GetAccessControl(this System.IO.Abstractions.IFile file, string path, System.Security.AccessControl.AccessControlSections includeSections) { }\n    public static void SetAccessControl(this System.IO.Abstractions.IFile file, string path, System.Security.AccessControl.FileSecurity fileSecurity) { }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing MockFileSystemWatcherFactory Class in C#\nDESCRIPTION: A serializable factory class for creating mock file system watchers. It implements IFileSystemEntity and IFileSystemWatcherFactory interfaces to provide methods for creating and wrapping file system watchers.\nSOURCE: https://github.com/testableio/system.io.abstractions/blob/main/tests/TestableIO.System.IO.Abstractions.Api.Tests/Expected/TestableIO.System.IO.Abstractions.TestingHelpers_net472.txt#2025-04-22_snippet_14\n\nLANGUAGE: C#\nCODE:\n```\n[System.Serializable]\npublic class MockFileSystemWatcherFactory : System.IO.Abstractions.IFileSystemEntity, System.IO.Abstractions.IFileSystemWatcherFactory\n{\n    public MockFileSystemWatcherFactory(System.IO.Abstractions.TestingHelpers.MockFileSystem mockFileSystem) { }\n    public System.IO.Abstractions.IFileSystem FileSystem { get; }\n    public System.IO.Abstractions.IFileSystemWatcher New() { }\n    public System.IO.Abstractions.IFileSystemWatcher New(string path) { }\n    public System.IO.Abstractions.IFileSystemWatcher New(string path, string filter) { }\n    public System.IO.Abstractions.IFileSystemWatcher Wrap(System.IO.FileSystemWatcher fileSystemWatcher) { }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing MockFileInfoFactory Class in C#\nDESCRIPTION: Implementation of a factory class for creating MockFileInfo instances. This factory enables the creation of mock file information objects for testing purposes.\nSOURCE: https://github.com/testableio/system.io.abstractions/blob/main/tests/TestableIO.System.IO.Abstractions.Api.Tests/Expected/TestableIO.System.IO.Abstractions.TestingHelpers_net9.0.txt#2025-04-22_snippet_14\n\nLANGUAGE: C#\nCODE:\n```\n[System.Serializable]\npublic class MockFileInfoFactory : System.IO.Abstractions.IFileInfoFactory, System.IO.Abstractions.IFileSystemEntity\n{\n    public MockFileInfoFactory(System.IO.Abstractions.TestingHelpers.IMockFileDataAccessor mockFileSystem) { }\n    public System.IO.Abstractions.IFileSystem FileSystem { get; }\n    public System.IO.Abstractions.IFileInfo New(string fileName) { }\n    public System.IO.Abstractions.IFileInfo Wrap(System.IO.FileInfo fileInfo) { }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing FileSystemWatcherFactory in C#\nDESCRIPTION: This class provides factory methods for creating file system watchers, allowing for easy instantiation and wrapping of FileSystemWatcher objects.\nSOURCE: https://github.com/testableio/system.io.abstractions/blob/main/tests/TestableIO.System.IO.Abstractions.Api.Tests/Expected/TestableIO.System.IO.Abstractions.Wrappers_net472.txt#2025-04-22_snippet_20\n\nLANGUAGE: C#\nCODE:\n```\n[System.Serializable]\npublic class FileSystemWatcherFactory : System.IO.Abstractions.IFileSystemEntity, System.IO.Abstractions.IFileSystemWatcherFactory\n{\n    public FileSystemWatcherFactory(System.IO.Abstractions.IFileSystem fileSystem) { }\n    public System.IO.Abstractions.IFileSystem FileSystem { get; }\n    public System.IO.Abstractions.IFileSystemWatcher New() { }\n    public System.IO.Abstractions.IFileSystemWatcher New(string path) { }\n    public System.IO.Abstractions.IFileSystemWatcher New(string path, string filter) { }\n    public System.IO.Abstractions.IFileSystemWatcher Wrap(System.IO.FileSystemWatcher fileSystemWatcher) { }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing File Operations in MockFileSystem Class (C#)\nDESCRIPTION: This snippet shows the implementation of various file operations in the MockFileSystem class. It includes methods for adding directories, files, and drives to the mock file system.\nSOURCE: https://github.com/testableio/system.io.abstractions/blob/main/tests/TestableIO.System.IO.Abstractions.Api.Tests/Expected/TestableIO.System.IO.Abstractions.TestingHelpers_net8.0.txt#2025-04-22_snippet_14\n\nLANGUAGE: C#\nCODE:\n```\npublic class MockFileSystem : System.IO.Abstractions.FileSystemBase, System.IO.Abstractions.IFileSystem, System.IO.Abstractions.TestingHelpers.IMockFileDataAccessor\n{\n    public MockFileSystem() { }\n    public MockFileSystem(System.IO.Abstractions.TestingHelpers.MockFileSystemOptions options) { }\n    public MockFileSystem(System.Collections.Generic.IDictionary<string, System.IO.Abstractions.TestingHelpers.MockFileData> files, System.IO.Abstractions.TestingHelpers.MockFileSystemOptions options) { }\n    public MockFileSystem(System.Collections.Generic.IDictionary<string, System.IO.Abstractions.TestingHelpers.MockFileData> files, string currentDirectory = \"\") { }\n    \n    // Properties\n    public System.Collections.Generic.IEnumerable<string> AllDirectories { get; }\n    public System.Collections.Generic.IEnumerable<string> AllDrives { get; }\n    public System.Collections.Generic.IEnumerable<string> AllFiles { get; }\n    public System.Collections.Generic.IEnumerable<string> AllNodes { get; }\n    public System.Collections.Generic.IEnumerable<string> AllPaths { get; }\n    \n    // Methods\n    public void AddDirectory(System.IO.Abstractions.IDirectoryInfo path) { }\n    public void AddDirectory(string path) { }\n    public void AddDrive(string name, System.IO.Abstractions.TestingHelpers.MockDriveData mockDrive) { }\n    public void AddEmptyFile(System.IO.Abstractions.IFileInfo path) { }\n    public void AddEmptyFile(string path) { }\n    public void AddFile(System.IO.Abstractions.IFileInfo path, System.IO.Abstractions.TestingHelpers.MockFileData data, bool verifyAccess = true) { }\n    public void AddFile(string path, System.IO.Abstractions.TestingHelpers.MockFileData mockFile, bool verifyAccess = true) { }\n    public void AddFileFromEmbeddedResource(string path, System.Reflection.Assembly resourceAssembly, string embeddedResourcePath) { }\n    public void AddFilesFromEmbeddedNamespace(string path, System.Reflection.Assembly resourceAssembly, string embeddedResourcePath) { }\n    public System.IO.Abstractions.TestingHelpers.MockFileData AdjustTimes(System.IO.Abstractions.TestingHelpers.MockFileData fileData, System.IO.Abstractions.TestingHelpers.TimeAdjustments timeAdjustments) { }\n}\n```\n\n----------------------------------------\n\nTITLE: Extending File Access Control in C#\nDESCRIPTION: This snippet includes static methods contained in `FileAclExtensions` that provide extensions for file access control operations. It defines methods for retrieving and setting `FileSecurity` information for files, leveraging `System.Security.AccessControl`. Dependencies include `System.IO.Abstractions.IFile` and `System.Security.AccessControl.FileSecurity`, with input parameters generally comprising file paths.\nSOURCE: https://github.com/testableio/system.io.abstractions/blob/main/tests/TestableIO.System.IO.Abstractions.Api.Tests/Expected/TestableIO.System.IO.Abstractions.Wrappers_net472.txt#2025-04-22_snippet_9\n\nLANGUAGE: csharp\nCODE:\n```\npublic static class FileAclExtensions { ... public static void SetAccessControl(this System.IO.Abstractions.IFile file, string path, System.Security.AccessControl.FileSecurity fileSecurity) { } }\n```\n\n----------------------------------------\n\nTITLE: MockFileSystemWatcherFactory Class Definition\nDESCRIPTION: Factory class for creating mock file system watchers with various initialization options.\nSOURCE: https://github.com/testableio/system.io.abstractions/blob/main/tests/TestableIO.System.IO.Abstractions.Api.Tests/Expected/TestableIO.System.IO.Abstractions.TestingHelpers_netstandard2.0.txt#2025-04-22_snippet_22\n\nLANGUAGE: C#\nCODE:\n```\npublic class MockFileSystemWatcherFactory : System.IO.Abstractions.IFileSystemEntity, System.IO.Abstractions.IFileSystemWatcherFactory\n{\n    public MockFileSystemWatcherFactory(System.IO.Abstractions.TestingHelpers.MockFileSystem mockFileSystem) { }\n    public System.IO.Abstractions.IFileSystem FileSystem { get; }\n    public System.IO.Abstractions.IFileSystemWatcher New() { }\n    public System.IO.Abstractions.IFileSystemWatcher New(string path) { }\n    public System.IO.Abstractions.IFileSystemWatcher New(string path, string filter) { }\n    public System.IO.Abstractions.IFileSystemWatcher Wrap(System.IO.FileSystemWatcher fileSystemWatcher) { }\n}\n```\n\n----------------------------------------\n\nTITLE: Extending FileStreamAcl Functionality in C#\nDESCRIPTION: Static class FileStreamAclExtensions provides methods for getting and setting access control on FileSystemStream objects. These methods are only supported on Windows platforms.\nSOURCE: https://github.com/testableio/system.io.abstractions/blob/main/tests/TestableIO.System.IO.Abstractions.Api.Tests/Expected/TestableIO.System.IO.Abstractions.Wrappers_net9.0.txt#2025-04-22_snippet_17\n\nLANGUAGE: C#\nCODE:\n```\npublic static class FileStreamAclExtensions\n{\n    [System.Runtime.Versioning.SupportedOSPlatform(\"windows\")]\n    public static System.Security.AccessControl.FileSecurity GetAccessControl(this System.IO.Abstractions.FileSystemStream fileStream) { }\n    [System.Runtime.Versioning.SupportedOSPlatform(\"windows\")]\n    public static void SetAccessControl(this System.IO.Abstractions.FileSystemStream fileStream, System.Security.AccessControl.FileSecurity fileSecurity) { }\n}\n```\n\n----------------------------------------\n\nTITLE: MockDriveInfoFactory Class Implementation in C#\nDESCRIPTION: Simulates the creation and management of drive information, implementing IDriveInfoFactory for use with System.IO.Abstractions in a testing context.\nSOURCE: https://github.com/testableio/system.io.abstractions/blob/main/tests/TestableIO.System.IO.Abstractions.Api.Tests/Expected/TestableIO.System.IO.Abstractions.TestingHelpers_net6.0.txt#2025-04-22_snippet_13\n\nLANGUAGE: C#\nCODE:\n```\npublic class MockDriveInfoFactory : System.IO.Abstractions.IDriveInfoFactory, System.IO.Abstractions.IFileSystemEntity\n{\n    public MockDriveInfoFactory(System.IO.Abstractions.TestingHelpers.IMockFileDataAccessor mockFileSystem) { }\n    public System.IO.Abstractions.IFileSystem FileSystem { get; }\n    public System.IO.Abstractions.IDriveInfo[] GetDrives() { }\n    public System.IO.Abstractions.IDriveInfo New(string driveName) { }\n    public System.IO.Abstractions.IDriveInfo Wrap(System.IO.DriveInfo driveInfo) { }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing the DriveInfoWrapper Class (C#)\nDESCRIPTION: Defines the `DriveInfoWrapper` class, inheriting from `DriveInfoBase`. It wraps an instance of `System.IO.DriveInfo`, providing concrete implementations for the abstract properties defined in the base class. This allows using the abstraction layer with the real `System.IO.DriveInfo` functionality. The `VolumeLabel` setter is marked as Windows-specific.\nSOURCE: https://github.com/testableio/system.io.abstractions/blob/main/tests/TestableIO.System.IO.Abstractions.Api.Tests/Expected/TestableIO.System.IO.Abstractions.Wrappers_net6.0.txt#2025-04-22_snippet_10\n\nLANGUAGE: csharp\nCODE:\n```\n    [System.Serializable]\n    public class DriveInfoWrapper : System.IO.Abstractions.DriveInfoBase\n    {\n        public DriveInfoWrapper(System.IO.Abstractions.IFileSystem fileSystem, System.IO.DriveInfo instance) { }\n        public override long AvailableFreeSpace { get; }\n        public override string DriveFormat { get; }\n        public override System.IO.DriveType DriveType { get; }\n        public override bool IsReady { get; }\n        public override string Name { get; }\n        public override System.IO.Abstractions.IDirectoryInfo RootDirectory { get; }\n        public override long TotalFreeSpace { get; }\n        public override long TotalSize { get; }\n        [set: System.Runtime.Versioning.SupportedOSPlatform(\"windows\")]\n        public override string VolumeLabel { get; set; }\n        public override string ToString() { }\n    }\n```\n\n----------------------------------------\n\nTITLE: Implementing MockFileSystemWatcherFactory Class in C#\nDESCRIPTION: This class implements a factory for creating mock file system watchers. It provides methods for creating new watchers and wrapping existing ones.\nSOURCE: https://github.com/testableio/system.io.abstractions/blob/main/tests/TestableIO.System.IO.Abstractions.Api.Tests/Expected/TestableIO.System.IO.Abstractions.TestingHelpers_netstandard2.1.txt#2025-04-22_snippet_18\n\nLANGUAGE: C#\nCODE:\n```\npublic class MockFileSystemWatcherFactory : System.IO.Abstractions.IFileSystemEntity, System.IO.Abstractions.IFileSystemWatcherFactory\n{\n    public MockFileSystemWatcherFactory(System.IO.Abstractions.TestingHelpers.MockFileSystem mockFileSystem) { }\n    public System.IO.Abstractions.IFileSystem FileSystem { get; }\n    public System.IO.Abstractions.IFileSystemWatcher New() { }\n    public System.IO.Abstractions.IFileSystemWatcher New(string path) { }\n    public System.IO.Abstractions.IFileSystemWatcher New(string path, string filter) { }\n    public System.IO.Abstractions.IFileSystemWatcher Wrap(System.IO.FileSystemWatcher fileSystemWatcher) { }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Mock Directory Info Factory - System.IO.Abstractions - C#\nDESCRIPTION: This snippet defines the MockDirectoryInfoFactory class, a serializable mock implementation of IDirectoryInfoFactory and IFileSystemEntity for creating mock directory info objects in unit tests. The class relies on an IMockFileDataAccessor dependency to manage the mock file system and provides factory methods for generating or wrapping IDirectoryInfo instances from paths or real DirectoryInfo objects. This enables flexible creation and simulation of directory behaviors without system calls.\nSOURCE: https://github.com/testableio/system.io.abstractions/blob/main/tests/TestableIO.System.IO.Abstractions.Api.Tests/Expected/TestableIO.System.IO.Abstractions.TestingHelpers_net9.0.txt#2025-04-22_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\n[System.Serializable]\npublic class MockDirectoryInfoFactory : System.IO.Abstractions.IDirectoryInfoFactory, System.IO.Abstractions.IFileSystemEntity\n{\n    public MockDirectoryInfoFactory(System.IO.Abstractions.TestingHelpers.IMockFileDataAccessor mockFileSystem) { }\n    public System.IO.Abstractions.IFileSystem FileSystem { get; }\n    public System.IO.Abstractions.IDirectoryInfo New(string path) { }\n    public System.IO.Abstractions.IDirectoryInfo Wrap(System.IO.DirectoryInfo directoryInfo) { }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining MockFileSystemOptions Class in C#\nDESCRIPTION: This class defines options for configuring the MockFileSystem. It includes properties for creating a default temporary directory and setting the current directory.\nSOURCE: https://github.com/testableio/system.io.abstractions/blob/main/tests/TestableIO.System.IO.Abstractions.Api.Tests/Expected/TestableIO.System.IO.Abstractions.TestingHelpers_netstandard2.1.txt#2025-04-22_snippet_17\n\nLANGUAGE: C#\nCODE:\n```\npublic class MockFileSystemOptions\n{\n    public MockFileSystemOptions() { }\n    public bool CreateDefaultTempDir { get; init; }\n    public string CurrentDirectory { get; init; }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining FileVersionInfoBase Abstract Class in C#\nDESCRIPTION: An abstract base class that implements IFileVersionInfo interface. It provides properties to access version information for a file, such as file description, version numbers, and company information.\nSOURCE: https://github.com/testableio/system.io.abstractions/blob/main/tests/TestableIO.System.IO.Abstractions.Api.Tests/Expected/TestableIO.System.IO.Abstractions.Wrappers_netstandard2.1.txt#2025-04-22_snippet_21\n\nLANGUAGE: C#\nCODE:\n```\n[System.Serializable]\npublic abstract class FileVersionInfoBase : System.IO.Abstractions.IFileVersionInfo\n{\n    protected FileVersionInfoBase() { }\n    public abstract string Comments { get; }\n    public abstract string CompanyName { get; }\n    public abstract int FileBuildPart { get; }\n    public abstract string FileDescription { get; }\n    public abstract int FileMajorPart { get; }\n    public abstract int FileMinorPart { get; }\n    public abstract string FileName { get; }\n    public abstract int FilePrivatePart { get; }\n    public abstract string FileVersion { get; }\n    public abstract string InternalName { get; }\n    public abstract bool IsDebug { get; }\n    public abstract bool IsPatched { get; }\n    public abstract bool IsPreRelease { get; }\n    public abstract bool IsPrivateBuild { get; }\n    public abstract bool IsSpecialBuild { get; }\n    public abstract string Language { get; }\n    public abstract string LegalCopyright { get; }\n    public abstract string LegalTrademarks { get; }\n    public abstract string OriginalFilename { get; }\n    public abstract string PrivateBuild { get; }\n    public abstract int ProductBuildPart { get; }\n    public abstract int ProductMajorPart { get; }\n    public abstract int ProductMinorPart { get; }\n    public abstract string ProductName { get; }\n    public abstract int ProductPrivatePart { get; }\n    public abstract string ProductVersion { get; }\n    public abstract string SpecialBuild { get; }\n    public abstract string ToString();\n    public static System.IO.Abstractions.FileVersionInfoBase op_Implicit(System.Diagnostics.FileVersionInfo fileVersionInfo) { }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining FileVersionInfoBase Abstract Class in C#\nDESCRIPTION: Abstract base class for file version information. It defines properties for accessing version details of a file such as version numbers, company name, and copyright information.\nSOURCE: https://github.com/testableio/system.io.abstractions/blob/main/tests/TestableIO.System.IO.Abstractions.Api.Tests/Expected/TestableIO.System.IO.Abstractions.Wrappers_net6.0.txt#2025-04-22_snippet_24\n\nLANGUAGE: C#\nCODE:\n```\n[System.Serializable]\npublic abstract class FileVersionInfoBase : System.IO.Abstractions.IFileVersionInfo\n{\n    protected FileVersionInfoBase() { }\n    public abstract string Comments { get; }\n    public abstract string CompanyName { get; }\n    public abstract int FileBuildPart { get; }\n    public abstract string FileDescription { get; }\n    public abstract int FileMajorPart { get; }\n    public abstract int FileMinorPart { get; }\n    public abstract string FileName { get; }\n    public abstract int FilePrivatePart { get; }\n    public abstract string FileVersion { get; }\n    public abstract string InternalName { get; }\n    public abstract bool IsDebug { get; }\n    public abstract bool IsPatched { get; }\n    public abstract bool IsPreRelease { get; }\n    public abstract bool IsPrivateBuild { get; }\n    public abstract bool IsSpecialBuild { get; }\n    public abstract string Language { get; }\n    public abstract string LegalCopyright { get; }\n    public abstract string LegalTrademarks { get; }\n    public abstract string OriginalFilename { get; }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing File Utility Methods in C#\nDESCRIPTION: Defines file utility methods that override base implementations. These methods provide functionality for operations like refreshing file information and replacing files.\nSOURCE: https://github.com/testableio/system.io.abstractions/blob/main/tests/TestableIO.System.IO.Abstractions.Api.Tests/Expected/TestableIO.System.IO.Abstractions.TestingHelpers_netstandard2.0.txt#2025-04-22_snippet_14\n\nLANGUAGE: C#\nCODE:\n```\npublic override void Refresh() { }\npublic override System.IO.Abstractions.IFileInfo Replace(string destinationFileName, string destinationBackupFileName) { }\npublic override System.IO.Abstractions.IFileInfo Replace(string destinationFileName, string destinationBackupFileName, bool ignoreMetadataErrors) { }\npublic void SetAccessControl(object value) { }\npublic override string ToString() { }\n```\n\n----------------------------------------\n\nTITLE: File Enumeration Methods in C#\nDESCRIPTION: Defines multiple methods to enumerate files in a directory, optionally filtered by search patterns and enumeration options. This implementation acts on a mock file system for testing purposes using the System.IO.Abstractions library.\nSOURCE: https://github.com/testableio/system.io.abstractions/blob/main/tests/TestableIO.System.IO.Abstractions.Api.Tests/Expected/TestableIO.System.IO.Abstractions.TestingHelpers_net6.0.txt#2025-04-22_snippet_5\n\nLANGUAGE: C#\nCODE:\n```\npublic override System.Collections.Generic.IEnumerable<System.IO.Abstractions.IFileInfo> EnumerateFiles() { }\n```\n\nLANGUAGE: C#\nCODE:\n```\npublic override System.Collections.Generic.IEnumerable<System.IO.Abstractions.IFileInfo> EnumerateFiles(string searchPattern) { }\n```\n\nLANGUAGE: C#\nCODE:\n```\npublic override System.Collections.Generic.IEnumerable<System.IO.Abstractions.IFileInfo> EnumerateFiles(string searchPattern, System.IO.EnumerationOptions enumerationOptions) { }\n```\n\nLANGUAGE: C#\nCODE:\n```\npublic override System.Collections.Generic.IEnumerable<System.IO.Abstractions.IFileInfo> EnumerateFiles(string searchPattern, System.IO.SearchOption searchOption) { }\n```\n\n----------------------------------------\n\nTITLE: MockDirectoryData Class Definition - C#\nDESCRIPTION: Mock implementation for directory data storage with Windows-specific access control support\nSOURCE: https://github.com/testableio/system.io.abstractions/blob/main/tests/TestableIO.System.IO.Abstractions.Api.Tests/Expected/TestableIO.System.IO.Abstractions.TestingHelpers_net8.0.txt#2025-04-22_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\n[System.Serializable]\npublic class MockDirectoryData : System.IO.Abstractions.TestingHelpers.MockFileData\n{\n    public MockDirectoryData() { }\n    [System.Runtime.Versioning.SupportedOSPlatform(\"windows\")]\n    public new System.Security.AccessControl.DirectorySecurity AccessControl { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing MockFileInfoFactory for Creating File Info Objects (C#)\nDESCRIPTION: This snippet defines the MockFileInfoFactory class which is responsible for creating IFileInfo objects in the mock file system. It provides methods to create new file info objects or wrap existing ones.\nSOURCE: https://github.com/testableio/system.io.abstractions/blob/main/tests/TestableIO.System.IO.Abstractions.Api.Tests/Expected/TestableIO.System.IO.Abstractions.TestingHelpers_net8.0.txt#2025-04-22_snippet_17\n\nLANGUAGE: C#\nCODE:\n```\npublic class MockFileInfoFactory : System.IO.Abstractions.IFileInfoFactory, System.IO.Abstractions.IFileSystemEntity\n{\n    public MockFileInfoFactory(System.IO.Abstractions.TestingHelpers.IMockFileDataAccessor mockFileSystem) { }\n    public System.IO.Abstractions.IFileSystem FileSystem { get; }\n    public System.IO.Abstractions.IFileInfo New(string fileName) { }\n    public System.IO.Abstractions.IFileInfo Wrap(System.IO.FileInfo fileInfo) { }\n}\n```\n\n----------------------------------------\n\nTITLE: Overriding Directory Enumeration and Manipulation Methods - System.IO.Abstractions - C#\nDESCRIPTION: This code snippet contains method overrides for directory operations, leveraging System.IO.Abstractions interfaces to enable directory enumeration, access control retrieval, directory movement, and link resolution in a mock environment. Dependencies include System.IO.Abstractions and potential platform constraints on access control for Windows. Key parameters include searchPattern, searchOption, enumerationOptions, and destDirName, which determine how directories and file system information are retrieved or modified. The outputs are typically collections of mocked IDirectoryInfo, IFileInfo, or IFileSystemInfo objects or control over access and movement, allowing for fine-grained simulation during testing.\nSOURCE: https://github.com/testableio/system.io.abstractions/blob/main/tests/TestableIO.System.IO.Abstractions.Api.Tests/Expected/TestableIO.System.IO.Abstractions.TestingHelpers_net9.0.txt#2025-04-22_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\npublic override System.Collections.Generic.IEnumerable<System.IO.Abstractions.IDirectoryInfo> EnumerateDirectories(string searchPattern, System.IO.SearchOption searchOption) { }\npublic override System.Collections.Generic.IEnumerable<System.IO.Abstractions.IFileSystemInfo> EnumerateFileSystemInfos() { }\npublic override System.Collections.Generic.IEnumerable<System.IO.Abstractions.IFileSystemInfo> EnumerateFileSystemInfos(string searchPattern) { }\npublic override System.Collections.Generic.IEnumerable<System.IO.Abstractions.IFileSystemInfo> EnumerateFileSystemInfos(string searchPattern, System.IO.EnumerationOptions enumerationOptions) { }\npublic override System.Collections.Generic.IEnumerable<System.IO.Abstractions.IFileSystemInfo> EnumerateFileSystemInfos(string searchPattern, System.IO.SearchOption searchOption) { }\npublic override System.Collections.Generic.IEnumerable<System.IO.Abstractions.IFileInfo> EnumerateFiles() { }\npublic override System.Collections.Generic.IEnumerable<System.IO.Abstractions.IFileInfo> EnumerateFiles(string searchPattern) { }\npublic override System.Collections.Generic.IEnumerable<System.IO.Abstractions.IFileInfo> EnumerateFiles(string searchPattern, System.IO.EnumerationOptions enumerationOptions) { }\npublic override System.Collections.Generic.IEnumerable<System.IO.Abstractions.IFileInfo> EnumerateFiles(string searchPattern, System.IO.SearchOption searchOption) { }\n[System.Runtime.Versioning.SupportedOSPlatform(\"windows\")]\npublic object GetAccessControl() { }\n[System.Runtime.Versioning.SupportedOSPlatform(\"windows\")]\npublic object GetAccessControl(System.IO.Abstractions.IFileSystemAclSupport.AccessControlSections includeSections) { }\npublic override System.IO.Abstractions.IDirectoryInfo[] GetDirectories() { }\npublic override System.IO.Abstractions.IDirectoryInfo[] GetDirectories(string searchPattern) { }\npublic override System.IO.Abstractions.IDirectoryInfo[] GetDirectories(string searchPattern, System.IO.EnumerationOptions enumerationOptions) { }\npublic override System.IO.Abstractions.IDirectoryInfo[] GetDirectories(string searchPattern, System.IO.SearchOption searchOption) { }\npublic override System.IO.Abstractions.IFileSystemInfo[] GetFileSystemInfos() { }\npublic override System.IO.Abstractions.IFileSystemInfo[] GetFileSystemInfos(string searchPattern) { }\npublic override System.IO.Abstractions.IFileSystemInfo[] GetFileSystemInfos(string searchPattern, System.IO.EnumerationOptions enumerationOptions) { }\npublic override System.IO.Abstractions.IFileSystemInfo[] GetFileSystemInfos(string searchPattern, System.IO.SearchOption searchOption) { }\npublic override System.IO.Abstractions.IFileInfo[] GetFiles() { }\npublic override System.IO.Abstractions.IFileInfo[] GetFiles(string searchPattern) { }\npublic override System.IO.Abstractions.IFileInfo[] GetFiles(string searchPattern, System.IO.EnumerationOptions enumerationOptions) { }\npublic override System.IO.Abstractions.IFileInfo[] GetFiles(string searchPattern, System.IO.SearchOption searchOption) { }\npublic override void MoveTo(string destDirName) { }\npublic override void Refresh() { }\npublic override System.IO.Abstractions.IFileSystemInfo ResolveLinkTarget(bool returnFinalTarget) { }\n[System.Runtime.Versioning.SupportedOSPlatform(\"windows\")]\npublic void SetAccessControl(object value) { }\npublic override string ToString() { }\n```\n\n----------------------------------------\n\nTITLE: MockFileSystemOptions Class Definition\nDESCRIPTION: Configuration options class for mock file system with properties for temp directory and current directory settings.\nSOURCE: https://github.com/testableio/system.io.abstractions/blob/main/tests/TestableIO.System.IO.Abstractions.Api.Tests/Expected/TestableIO.System.IO.Abstractions.TestingHelpers_netstandard2.0.txt#2025-04-22_snippet_21\n\nLANGUAGE: C#\nCODE:\n```\npublic class MockFileSystemOptions\n{\n    public MockFileSystemOptions() { }\n    public bool CreateDefaultTempDir { get; init; }\n    public string CurrentDirectory { get; init; }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing MockFileVersionInfo Class in C#\nDESCRIPTION: This class implements a mock version of FileVersionInfo. It provides properties for various file version information attributes.\nSOURCE: https://github.com/testableio/system.io.abstractions/blob/main/tests/TestableIO.System.IO.Abstractions.Api.Tests/Expected/TestableIO.System.IO.Abstractions.TestingHelpers_netstandard2.1.txt#2025-04-22_snippet_19\n\nLANGUAGE: C#\nCODE:\n```\npublic class MockFileVersionInfo : System.IO.Abstractions.FileVersionInfoBase\n{\n    public MockFileVersionInfo(\n        string fileName,\n        string fileVersion = null,\n        string productVersion = null,\n        string fileDescription = null,\n        string productName = null,\n        string companyName = null,\n        string comments = null,\n        string internalName = null,\n        bool isDebug = false,\n        bool isPatched = false,\n        bool isPrivateBuild = false,\n        bool isPreRelease = false,\n        bool isSpecialBuild = false,\n        string language = null,\n        string legalCopyright = null,\n        string legalTrademarks = null,\n        string originalFilename = null,\n        string privateBuild = null,\n        string specialBuild = null) { }\n    // ... (properties omitted for brevity)\n}\n```\n\n----------------------------------------\n\nTITLE: Path Manipulation Methods Implementation in C#\nDESCRIPTION: Implementation of various path manipulation methods that override base functionality. These methods handle operations like changing extensions, combining paths, extracting file/directory names, and validating paths. The methods support both string and ReadOnlySpan<char> parameters for efficient memory usage.\nSOURCE: https://github.com/testableio/system.io.abstractions/blob/main/tests/TestableIO.System.IO.Abstractions.Api.Tests/Expected/TestableIO.System.IO.Abstractions.Wrappers_netstandard2.1.txt#2025-04-22_snippet_27\n\nLANGUAGE: C#\nCODE:\n```\n        public override string ChangeExtension(string path, string extension) { }\n        public override string Combine(params string[] paths) { }\n        public override string Combine(string path1, string path2) { }\n        public override string Combine(string path1, string path2, string path3) { }\n        public override string Combine(string path1, string path2, string path3, string path4) { }\n        public override System.ReadOnlySpan<char> GetDirectoryName(System.ReadOnlySpan<char> path) { }\n        public override string GetDirectoryName(string path) { }\n        public override System.ReadOnlySpan<char> GetExtension(System.ReadOnlySpan<char> path) { }\n        public override string GetExtension(string path) { }\n        public override System.ReadOnlySpan<char> GetFileName(System.ReadOnlySpan<char> path) { }\n        public override string GetFileName(string path) { }\n        public override System.ReadOnlySpan<char> GetFileNameWithoutExtension(System.ReadOnlySpan<char> path) { }\n        public override string GetFileNameWithoutExtension(string path) { }\n        public override string GetFullPath(string path) { }\n        public override string GetFullPath(string path, string basePath) { }\n        public override char[] GetInvalidFileNameChars() { }\n        public override char[] GetInvalidPathChars() { }\n        public override System.ReadOnlySpan<char> GetPathRoot(System.ReadOnlySpan<char> path) { }\n        public override string GetPathRoot(string path) { }\n        public override string GetRandomFileName() { }\n        public override string GetRelativePath(string relativeTo, string path) { }\n        public override string GetTempFileName() { }\n        public override string GetTempPath() { }\n        public override bool HasExtension(System.ReadOnlySpan<char> path) { }\n        public override bool HasExtension(string path) { }\n        public override bool IsPathFullyQualified(System.ReadOnlySpan<char> path) { }\n        public override bool IsPathFullyQualified(string path) { }\n        public override bool IsPathRooted(System.ReadOnlySpan<char> path) { }\n        public override bool IsPathRooted(string path) { }\n        public override string Join(System.ReadOnlySpan<char> path1, System.ReadOnlySpan<char> path2) { }\n        public override string Join(System.ReadOnlySpan<char> path1, System.ReadOnlySpan<char> path2, System.ReadOnlySpan<char> path3) { }\n        public override bool TryJoin(System.ReadOnlySpan<char> path1, System.ReadOnlySpan<char> path2, System.Span<char> destination, out int charsWritten) { }\n        public override bool TryJoin(System.ReadOnlySpan<char> path1, System.ReadOnlySpan<char> path2, System.ReadOnlySpan<char> path3, System.Span<char> destination, out int charsWritten) { }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: FileSystem Info Retrieval in C#\nDESCRIPTION: Methods to retrieve information about files and directories using search patterns and enumeration options. These are part of a mock file system for testing, built with System.IO.Abstractions.\nSOURCE: https://github.com/testableio/system.io.abstractions/blob/main/tests/TestableIO.System.IO.Abstractions.Api.Tests/Expected/TestableIO.System.IO.Abstractions.TestingHelpers_net6.0.txt#2025-04-22_snippet_8\n\nLANGUAGE: C#\nCODE:\n```\npublic override System.IO.Abstractions.IFileSystemInfo[] GetFileSystemInfos() { }\n```\n\nLANGUAGE: C#\nCODE:\n```\npublic override System.IO.Abstractions.IFileSystemInfo[] GetFileSystemInfos(string searchPattern) { }\n```\n\nLANGUAGE: C#\nCODE:\n```\npublic override System.IO.Abstractions.IFileSystemInfo[] GetFileSystemInfos(string searchPattern, System.IO.EnumerationOptions enumerationOptions) { }\n```\n\nLANGUAGE: C#\nCODE:\n```\npublic override System.IO.Abstractions.IFileSystemInfo[] GetFileSystemInfos(string searchPattern, System.IO.SearchOption searchOption) { }\n```\n\n----------------------------------------\n\nTITLE: Implementing MockDirectoryInfo Class\nDESCRIPTION: A mock implementation of DirectoryInfoBase that provides directory information and operations for testing. Implements IFileSystemAclSupport for access control functionality.\nSOURCE: https://github.com/testableio/system.io.abstractions/blob/main/tests/TestableIO.System.IO.Abstractions.Api.Tests/Expected/TestableIO.System.IO.Abstractions.TestingHelpers_netstandard2.1.txt#2025-04-22_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\n[System.Serializable]\npublic class MockDirectoryInfo : System.IO.Abstractions.DirectoryInfoBase, System.IO.Abstractions.IFileSystemAclSupport\n{\n    public MockDirectoryInfo(System.IO.Abstractions.TestingHelpers.IMockFileDataAccessor mockFileDataAccessor, string directoryPath) { }\n    public override System.IO.FileAttributes Attributes { get; set; }\n    public override System.DateTime CreationTime { get; set; }\n    public override System.DateTime CreationTimeUtc { get; set; }\n    public override bool Exists { get; }\n    public override string Extension { get; }\n    public override string FullName { get; }\n    public override System.DateTime LastAccessTime { get; set; }\n    public override System.DateTime LastAccessTimeUtc { get; set; }\n    public override System.DateTime LastWriteTime { get; set; }\n    public override System.DateTime LastWriteTimeUtc { get; set; }\n    public override string Name { get; }\n    public override System.IO.Abstractions.IDirectoryInfo Parent { get; }\n    public override System.IO.Abstractions.IDirectoryInfo Root { get; }\n    // ... additional methods omitted for brevity\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing MockFileStreamFactory for Creating File Streams (C#)\nDESCRIPTION: This snippet shows the MockFileStreamFactory class which is responsible for creating new file streams in the mock file system. It provides various overloads for creating file streams with different parameters.\nSOURCE: https://github.com/testableio/system.io.abstractions/blob/main/tests/TestableIO.System.IO.Abstractions.Api.Tests/Expected/TestableIO.System.IO.Abstractions.TestingHelpers_net8.0.txt#2025-04-22_snippet_16\n\nLANGUAGE: C#\nCODE:\n```\npublic class MockFileStreamFactory : System.IO.Abstractions.IFileStreamFactory, System.IO.Abstractions.IFileSystemEntity\n{\n    public MockFileStreamFactory(System.IO.Abstractions.TestingHelpers.IMockFileDataAccessor mockFileSystem) { }\n    public System.IO.Abstractions.IFileSystem FileSystem { get; }\n    public System.IO.Abstractions.FileSystemStream New(Microsoft.Win32.SafeHandles.SafeFileHandle handle, System.IO.FileAccess access) { }\n    public System.IO.Abstractions.FileSystemStream New(string path, System.IO.FileMode mode) { }\n    public System.IO.Abstractions.FileSystemStream New(string path, System.IO.FileStreamOptions options) { }\n    public System.IO.Abstractions.FileSystemStream New(Microsoft.Win32.SafeHandles.SafeFileHandle handle, System.IO.FileAccess access, int bufferSize) { }\n    public System.IO.Abstractions.FileSystemStream New(string path, System.IO.FileMode mode, System.IO.FileAccess access) { }\n    public System.IO.Abstractions.FileSystemStream New(Microsoft.Win32.SafeHandles.SafeFileHandle handle, System.IO.FileAccess access, int bufferSize, bool isAsync) { }\n    public System.IO.Abstractions.FileSystemStream New(string path, System.IO.FileMode mode, System.IO.FileAccess access, System.IO.FileShare share) { }\n    public System.IO.Abstractions.FileSystemStream New(string path, System.IO.FileMode mode, System.IO.FileAccess access, System.IO.FileShare share, int bufferSize) { }\n    public System.IO.Abstractions.FileSystemStream New(string path, System.IO.FileMode mode, System.IO.FileAccess access, System.IO.FileShare share, int bufferSize, System.IO.FileOptions options) { }\n    public System.IO.Abstractions.FileSystemStream New(string path, System.IO.FileMode mode, System.IO.FileAccess access, System.IO.FileShare share, int bufferSize, bool useAsync) { }\n    public System.IO.Abstractions.FileSystemStream Wrap(System.IO.FileStream fileStream) { }\n}\n```\n\n----------------------------------------\n\nTITLE: Directory Operations Interface Implementation in C#\nDESCRIPTION: Defines directory-related operations including enumeration, creation, modification and metadata access. Implements standard System.IO directory functionality with abstraction layer.\nSOURCE: https://github.com/testableio/system.io.abstractions/blob/main/tests/TestableIO.System.IO.Abstractions.Api.Tests/Expected/TestableIO.System.IO.Abstractions.Wrappers_net8.0.txt#2025-04-22_snippet_8\n\nLANGUAGE: C#\nCODE:\n```\npublic override System.Collections.Generic.IEnumerable<string> EnumerateFiles(string path) { }\npublic override System.Collections.Generic.IEnumerable<string> EnumerateFiles(string path, string searchPattern) { }\npublic override System.Collections.Generic.IEnumerable<string> EnumerateFiles(string path, string searchPattern, System.IO.EnumerationOptions enumerationOptions) { }\n```\n\n----------------------------------------\n\nTITLE: Implementing FileVersionInfo Wrapper in C#\nDESCRIPTION: A serializable wrapper class that implements FileVersionInfoBase to provide version information for files. Contains properties for accessing various file metadata like version numbers, company information, and build details.\nSOURCE: https://github.com/testableio/system.io.abstractions/blob/main/tests/TestableIO.System.IO.Abstractions.Api.Tests/Expected/TestableIO.System.IO.Abstractions.Wrappers_net472.txt#2025-04-22_snippet_23\n\nLANGUAGE: C#\nCODE:\n```\n[System.Serializable]\npublic class FileVersionInfoWrapper : System.IO.Abstractions.FileVersionInfoBase\n{\n    public FileVersionInfoWrapper(System.Diagnostics.FileVersionInfo fileVersionInfo) { }\n    public override string Comments { get; }\n    public override string CompanyName { get; }\n    public override int FileBuildPart { get; }\n    public override string FileDescription { get; }\n    public override int FileMajorPart { get; }\n    public override int FileMinorPart { get; }\n    public override string FileName { get; }\n    public override int FilePrivatePart { get; }\n    public override string FileVersion { get; }\n    public override string InternalName { get; }\n    public override bool IsDebug { get; }\n    public override bool IsPatched { get; }\n    public override bool IsPreRelease { get; }\n    public override bool IsPrivateBuild { get; }\n    public override bool IsSpecialBuild { get; }\n    public override string Language { get; }\n    public override string LegalCopyright { get; }\n    public override string LegalTrademarks { get; }\n    public override string OriginalFilename { get; }\n    public override string PrivateBuild { get; }\n    public override int ProductBuildPart { get; }\n    public override int ProductMajorPart { get; }\n    public override int ProductMinorPart { get; }\n    public override string ProductName { get; }\n    public override int ProductPrivatePart { get; }\n    public override string ProductVersion { get; }\n    public override string SpecialBuild { get; }\n    public override string ToString() { }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing FileVersionInfoWrapper Class in C#\nDESCRIPTION: Defines a concrete class that wraps System.Diagnostics.FileVersionInfo and provides implementation for the abstract properties defined in FileVersionInfoBase. It includes a constructor that takes a FileVersionInfo object and overrides all abstract properties and methods.\nSOURCE: https://github.com/testableio/system.io.abstractions/blob/main/tests/TestableIO.System.IO.Abstractions.Api.Tests/Expected/TestableIO.System.IO.Abstractions.Wrappers_net9.0.txt#2025-04-22_snippet_26\n\nLANGUAGE: C#\nCODE:\n```\n[System.Serializable]\npublic class FileVersionInfoWrapper : System.IO.Abstractions.FileVersionInfoBase\n{\n    public FileVersionInfoWrapper(System.Diagnostics.FileVersionInfo fileVersionInfo) { }\n    public override string Comments { get; }\n    public override string CompanyName { get; }\n    public override int FileBuildPart { get; }\n    public override string FileDescription { get; }\n    public override int FileMajorPart { get; }\n    public override int FileMinorPart { get; }\n    public override string FileName { get; }\n    public override int FilePrivatePart { get; }\n    public override string FileVersion { get; }\n    public override string InternalName { get; }\n    public override bool IsDebug { get; }\n    public override bool IsPatched { get; }\n    public override bool IsPreRelease { get; }\n    public override bool IsPrivateBuild { get; }\n    public override bool IsSpecialBuild { get; }\n    public override string Language { get; }\n    public override string LegalCopyright { get; }\n    public override string LegalTrademarks { get; }\n    public override string OriginalFilename { get; }\n    public override string PrivateBuild { get; }\n    public override int ProductBuildPart { get; }\n    public override int ProductMajorPart { get; }\n    public override int ProductMinorPart { get; }\n    public override string ProductName { get; }\n    public override int ProductPrivatePart { get; }\n    public override string ProductVersion { get; }\n    public override string SpecialBuild { get; }\n    public override string ToString() { }\n}\n```\n\n----------------------------------------\n\nTITLE: PathWrapper Implementation Class in C#\nDESCRIPTION: Concrete implementation of the PathBase abstract class that wraps the actual file system path operations. This class provides the actual implementation of all path-related methods defined in the abstract base class.\nSOURCE: https://github.com/testableio/system.io.abstractions/blob/main/tests/TestableIO.System.IO.Abstractions.Api.Tests/Expected/TestableIO.System.IO.Abstractions.Wrappers_net9.0.txt#2025-04-22_snippet_31\n\nLANGUAGE: C#\nCODE:\n```\n[System.Serializable]\npublic class PathWrapper : System.IO.Abstractions.PathBase\n{\n    public PathWrapper(System.IO.Abstractions.IFileSystem fileSystem) { }\n    public override char AltDirectorySeparatorChar { get; }\n    public override char DirectorySeparatorChar { get; }\n    [System.Obsolete(\"Please use GetInvalidPathChars or GetInvalidFileNameChars instead.\")]\n    public override char[] InvalidPathChars { get; }\n    public override char PathSeparator { get; }\n    public override char VolumeSeparatorChar { get; }\n    public override string ChangeExtension(string path, string extension) { }\n    public override string Combine([System.Runtime.CompilerServices.ScopedRef] System.ReadOnlySpan<string> paths) { }\n    public override string Combine(params string[] paths) { }\n    public override string Combine(string path1, string path2) { }\n    public override string Combine(string path1, string path2, string path3) { }\n    public override string Combine(string path1, string path2, string path3, string path4) { }\n    public override bool EndsInDirectorySeparator(System.ReadOnlySpan<char> path) { }\n    public override bool EndsInDirectorySeparator(string path) { }\n    public override bool Exists(string path) { }\n    public override System.ReadOnlySpan<char> GetDirectoryName(System.ReadOnlySpan<char> path) { }\n    public override string GetDirectoryName(string path) { }\n    public override System.ReadOnlySpan<char> GetExtension(System.ReadOnlySpan<char> path) { }\n    public override string GetExtension(string path) { }\n    public override System.ReadOnlySpan<char> GetFileName(System.ReadOnlySpan<char> path) { }\n    public override string GetFileName(string path) { }\n    public override System.ReadOnlySpan<char> GetFileNameWithoutExtension(System.ReadOnlySpan<char> path) { }\n    public override string GetFileNameWithoutExtension(string path) { }\n    public override string GetFullPath(string path) { }\n    public override string GetFullPath(string path, string basePath) { }\n    public override char[] GetInvalidFileNameChars() { }\n    public override char[] GetInvalidPathChars() { }\n    public override System.ReadOnlySpan<char> GetPathRoot(System.ReadOnlySpan<char> path) { }\n    public override string GetPathRoot(string path) { }\n    public override string GetRandomFileName() { }\n    public override string GetRelativePath(string relativeTo, string path) { }\n    public override string GetTempFileName() { }\n    public override string GetTempPath() { }\n    public override bool HasExtension(System.ReadOnlySpan<char> path) { }\n    public override bool HasExtension(string path) { }\n    public override bool IsPathFullyQualified(System.ReadOnlySpan<char> path) { }\n    public override bool IsPathFullyQualified(string path) { }\n    public override bool IsPathRooted(System.ReadOnlySpan<char> path) { }\n    public override bool IsPathRooted(string path) { }\n    public override string Join([System.Runtime.CompilerServices.ScopedRef] System.ReadOnlySpan<string> paths) { }\n    public override string Join(params string[] paths) { }\n    public override string Join(System.ReadOnlySpan<char> path1, System.ReadOnlySpan<char> path2) { }\n    public override string Join(string path1, string path2) { }\n    public override string Join(System.ReadOnlySpan<char> path1, System.ReadOnlySpan<char> path2, System.ReadOnlySpan<char> path3) { }\n    public override string Join(string path1, string path2, string path3) { }\n    public override string Join(System.ReadOnlySpan<char> path1, System.ReadOnlySpan<char> path2, System.ReadOnlySpan<char> path3, System.ReadOnlySpan<char> path4) { }\n    public override string Join(string path1, string path2, string path3, string path4) { }\n    public override System.ReadOnlySpan<char> TrimEndingDirectorySeparator(System.ReadOnlySpan<char> path) { }\n    public override string TrimEndingDirectorySeparator(string path) { }\n    public override bool TryJoin(System.ReadOnlySpan<char> path1, System.ReadOnlySpan<char> path2, System.Span<char> destination, out int charsWritten) { }\n    public override bool TryJoin(System.ReadOnlySpan<char> path1, System.ReadOnlySpan<char> path2, System.ReadOnlySpan<char> path3, System.Span<char> destination, out int charsWritten) { }\n}\n```\n\n----------------------------------------\n\nTITLE: MockDriveData Class Implementation in C#\nDESCRIPTION: Serializable class that represents mock drive data, including information on available free space, drive format, type, readiness, total free space, total size, and volume label for testing purposes.\nSOURCE: https://github.com/testableio/system.io.abstractions/blob/main/tests/TestableIO.System.IO.Abstractions.Api.Tests/Expected/TestableIO.System.IO.Abstractions.TestingHelpers_net6.0.txt#2025-04-22_snippet_11\n\nLANGUAGE: C#\nCODE:\n```\npublic class MockDriveData\n{\n    public MockDriveData() { }\n    public MockDriveData(System.IO.Abstractions.TestingHelpers.MockDriveData template) { }\n    public long AvailableFreeSpace { get; set; }\n    public string DriveFormat { get; set; }\n    public System.IO.DriveType DriveType { get; set; }\n    public bool IsReady { get; set; }\n    public long TotalFreeSpace { get; set; }\n    public long TotalSize { get; set; }\n    public string VolumeLabel { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: FileSystemWatcher Implementation in C#\nDESCRIPTION: Implementation of FileSystemWatcherWrapper class that wraps System.IO.FileSystemWatcher functionality with various constructors and file system monitoring capabilities.\nSOURCE: https://github.com/testableio/system.io.abstractions/blob/main/tests/TestableIO.System.IO.Abstractions.Api.Tests/Expected/TestableIO.System.IO.Abstractions.Wrappers_net8.0.txt#2025-04-22_snippet_18\n\nLANGUAGE: C#\nCODE:\n```\npublic class FileSystemWatcherWrapper : System.IO.Abstractions.FileSystemWatcherBase\n{\n    public FileSystemWatcherWrapper(System.IO.Abstractions.IFileSystem fileSystem) { }\n    public FileSystemWatcherWrapper(System.IO.Abstractions.IFileSystem fileSystem, System.IO.FileSystemWatcher watcher) { }\n    public FileSystemWatcherWrapper(System.IO.Abstractions.IFileSystem fileSystem, string path) { }\n    public FileSystemWatcherWrapper(System.IO.Abstractions.IFileSystem fileSystem, string path, string filter) { }\n    // ... properties and methods\n}\n```\n\n----------------------------------------\n\nTITLE: Creating FileStream Objects using MockFileStreamFactory in System.IO.Abstractions (C#)\nDESCRIPTION: MockFileStreamFactory enables the creation of mock file stream instances for testing by providing factory methods that return FileSystemStream implementations. Supports instantiation using a SafeFileHandle with access or by specifying a file path and file mode. Facilitates dependency injection and improves test isolation by abstracting stream creation away from the actual file system.\nSOURCE: https://github.com/testableio/system.io.abstractions/blob/main/tests/TestableIO.System.IO.Abstractions.Api.Tests/Expected/TestableIO.System.IO.Abstractions.TestingHelpers_netstandard2.1.txt#2025-04-22_snippet_15\n\nLANGUAGE: csharp\nCODE:\n```\n[System.Serializable]\npublic class MockFileStreamFactory : System.IO.Abstractions.IFileStreamFactory, System.IO.Abstractions.IFileSystemEntity\n{\n    public MockFileStreamFactory(System.IO.Abstractions.TestingHelpers.IMockFileDataAccessor mockFileSystem) { }\n    public System.IO.Abstractions.IFileSystem FileSystem { get; }\n    public System.IO.Abstractions.FileSystemStream New(Microsoft.Win32.SafeHandles.SafeFileHandle handle, System.IO.FileAccess access) { }\n    public System.IO.Abstractions.FileSystemStream New(string path, System.IO.FileMode mode) { }\n}\n```\n\n----------------------------------------\n\nTITLE: Mock Directory Implementation\nDESCRIPTION: Implementation of DirectoryBase providing mock directory operations for testing scenarios\nSOURCE: https://github.com/testableio/system.io.abstractions/blob/main/tests/TestableIO.System.IO.Abstractions.Api.Tests/Expected/TestableIO.System.IO.Abstractions.TestingHelpers_net472.txt#2025-04-22_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\n[System.Serializable]\npublic class MockDirectory : System.IO.Abstractions.DirectoryBase\n{\n    public MockDirectory(System.IO.Abstractions.TestingHelpers.IMockFileDataAccessor mockFileDataAccessor, string currentDirectory) { }\n    public MockDirectory(System.IO.Abstractions.TestingHelpers.IMockFileDataAccessor mockFileDataAccessor, System.IO.Abstractions.FileBase fileBase, string currentDirectory) { }\n    public override System.IO.Abstractions.IDirectoryInfo CreateDirectory(string path) { }\n    public override void Delete(string path) { }\n    public override void Delete(string path, bool recursive) { }\n    public override System.Collections.Generic.IEnumerable<string> EnumerateDirectories(string path) { }\n    public override System.Collections.Generic.IEnumerable<string> EnumerateDirectories(string path, string searchPattern) { }\n    public override System.Collections.Generic.IEnumerable<string> EnumerateDirectories(string path, string searchPattern, System.IO.SearchOption searchOption) { }\n    public override System.Collections.Generic.IEnumerable<string> EnumerateFileSystemEntries(string path) { }\n    public override System.Collections.Generic.IEnumerable<string> EnumerateFileSystemEntries(string path, string searchPattern) { }\n    public override System.Collections.Generic.IEnumerable<string> EnumerateFileSystemEntries(string path, string searchPattern, System.IO.SearchOption searchOption) { }\n    public override System.Collections.Generic.IEnumerable<string> EnumerateFiles(string path) { }\n    public override System.Collections.Generic.IEnumerable<string> EnumerateFiles(string path, string searchPattern) { }\n    public override System.Collections.Generic.IEnumerable<string> EnumerateFiles(string path, string searchPattern, System.IO.SearchOption searchOption) { }\n    public override bool Exists(string path) { }\n    public override System.DateTime GetCreationTime(string path) { }\n    public override System.DateTime GetCreationTimeUtc(string path) { }\n    public override string GetCurrentDirectory() { }\n    public override string[] GetDirectories(string path) { }\n    public override string[] GetDirectories(string path, string searchPattern) { }\n    public override string[] GetDirectories(string path, string searchPattern, System.IO.SearchOption searchOption) { }\n    public override string GetDirectoryRoot(string path) { }\n    public override string[] GetFileSystemEntries(string path) { }\n    public override string[] GetFileSystemEntries(string path, string searchPattern) { }\n    public override string[] GetFileSystemEntries(string path, string searchPattern, System.IO.SearchOption searchOption) { }\n    public override string[] GetFiles(string path) { }\n    public override string[] GetFiles(string path, string searchPattern) { }\n    public override string[] GetFiles(string path, string searchPattern, System.IO.SearchOption searchOption) { }\n    public override System.DateTime GetLastAccessTime(string path) { }\n    public override System.DateTime GetLastAccessTimeUtc(string path) { }\n    public override System.DateTime GetLastWriteTime(string path) { }\n    public override System.DateTime GetLastWriteTimeUtc(string path) { }\n    public override string[] GetLogicalDrives() { }\n    public override System.IO.Abstractions.IDirectoryInfo GetParent(string path) { }\n    public override void Move(string sourceDirName, string destDirName) { }\n    public override void SetCreationTime(string path, System.DateTime creationTime) { }\n    public override void SetCreationTimeUtc(string path, System.DateTime creationTimeUtc) { }\n    public override void SetCurrentDirectory(string path) { }\n    public override void SetLastAccessTime(string path, System.DateTime lastAccessTime) { }\n    public override void SetLastAccessTimeUtc(string path, System.DateTime lastAccessTimeUtc) { }\n    public override void SetLastWriteTime(string path, System.DateTime lastWriteTime) { }\n    public override void SetLastWriteTimeUtc(string path, System.DateTime lastWriteTimeUtc) { }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing MockFileVersionInfo in C#\nDESCRIPTION: A mock implementation of the FileVersionInfoBase class that provides version information for files. Includes properties for file version details, product information, and file metadata with customizable parameters through the constructor.\nSOURCE: https://github.com/testableio/system.io.abstractions/blob/main/tests/TestableIO.System.IO.Abstractions.Api.Tests/Expected/TestableIO.System.IO.Abstractions.TestingHelpers_net8.0.txt#2025-04-22_snippet_21\n\nLANGUAGE: C#\nCODE:\n```\n[System.Serializable]\npublic class MockFileVersionInfo : System.IO.Abstractions.FileVersionInfoBase\n{\n    public MockFileVersionInfo(\n                string fileName,\n                string fileVersion = null,\n                string productVersion = null,\n                string fileDescription = null,\n                string productName = null,\n                string companyName = null,\n                string comments = null,\n                string internalName = null,\n                bool isDebug = false,\n                bool isPatched = false,\n                bool isPrivateBuild = false,\n                bool isPreRelease = false,\n                bool isSpecialBuild = false,\n                string language = null,\n                string legalCopyright = null,\n                string legalTrademarks = null,\n                string originalFilename = null,\n                string privateBuild = null,\n                string specialBuild = null) { }\n    public override string Comments { get; }\n    public override string CompanyName { get; }\n    public override int FileBuildPart { get; }\n    public override string FileDescription { get; }\n    public override int FileMajorPart { get; }\n    public override int FileMinorPart { get; }\n    public override string FileName { get; }\n    public override int FilePrivatePart { get; }\n    public override string FileVersion { get; }\n    public override string InternalName { get; }\n    public override bool IsDebug { get; }\n    public override bool IsPatched { get; }\n    public override bool IsPreRelease { get; }\n    public override bool IsPrivateBuild { get; }\n    public override bool IsSpecialBuild { get; }\n    public override string Language { get; }\n    public override string LegalCopyright { get; }\n    public override string LegalTrademarks { get; }\n    public override string OriginalFilename { get; }\n    public override string PrivateBuild { get; }\n    public override int ProductBuildPart { get; }\n    public override int ProductMajorPart { get; }\n    public override int ProductMinorPart { get; }\n    public override string ProductName { get; }\n    public override int ProductPrivatePart { get; }\n    public override string ProductVersion { get; }\n    public override string SpecialBuild { get; }\n    public override string ToString() { }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing MockFileVersionInfoFactory in C#\nDESCRIPTION: This class implements IFileVersionInfoFactory to provide mock file version information. It includes a constructor and methods for accessing the file system and getting version info.\nSOURCE: https://github.com/testableio/system.io.abstractions/blob/main/tests/TestableIO.System.IO.Abstractions.Api.Tests/Expected/TestableIO.System.IO.Abstractions.TestingHelpers_net6.0.txt#2025-04-22_snippet_26\n\nLANGUAGE: C#\nCODE:\n```\n[System.Serializable]\npublic class MockFileVersionInfoFactory : System.IO.Abstractions.IFileSystemEntity, System.IO.Abstractions.IFileVersionInfoFactory\n{\n    public MockFileVersionInfoFactory(System.IO.Abstractions.TestingHelpers.IMockFileDataAccessor mockFileSystem) { }\n    public System.IO.Abstractions.IFileSystem FileSystem { get; }\n    public System.IO.Abstractions.IFileVersionInfo GetVersionInfo(string fileName) { }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining MockFileData Properties in C#\nDESCRIPTION: Properties for the MockFileData class that store metadata about mock files such as creation time, access time, and content. This class is used to represent file data in the mock file system.\nSOURCE: https://github.com/testableio/system.io.abstractions/blob/main/tests/TestableIO.System.IO.Abstractions.Api.Tests/Expected/TestableIO.System.IO.Abstractions.TestingHelpers_net9.0.txt#2025-04-22_snippet_18\n\nLANGUAGE: C#\nCODE:\n```\npublic System.DateTimeOffset CreationTime { get; set; }\npublic System.IO.Abstractions.IFileVersionInfo FileVersionInfo { get; set; }\npublic bool IsDirectory { get; }\npublic System.DateTimeOffset LastAccessTime { get; set; }\npublic System.DateTimeOffset LastWriteTime { get; set; }\npublic string LinkTarget { get; set; }\npublic string TextContents { get; set; }\npublic System.IO.UnixFileMode UnixMode { get; set; }\npublic static System.IO.Abstractions.TestingHelpers.MockFileData op_Implicit(string s) { }\n```\n\n----------------------------------------\n\nTITLE: Implementing FileSystem Class in C#\nDESCRIPTION: Concrete implementation of the FileSystemBase abstract class that represents the actual file system. It provides properties for accessing various file system components.\nSOURCE: https://github.com/testableio/system.io.abstractions/blob/main/tests/TestableIO.System.IO.Abstractions.Api.Tests/Expected/TestableIO.System.IO.Abstractions.Wrappers_net6.0.txt#2025-04-22_snippet_18\n\nLANGUAGE: C#\nCODE:\n```\n[System.Serializable]\npublic class FileSystem : System.IO.Abstractions.FileSystemBase\n{\n    public FileSystem() { }\n    public override System.IO.Abstractions.IDirectory Directory { get; }\n    public override System.IO.Abstractions.IDirectoryInfoFactory DirectoryInfo { get; }\n    public override System.IO.Abstractions.IDriveInfoFactory DriveInfo { get; }\n    public override System.IO.Abstractions.IFile File { get; }\n    public override System.IO.Abstractions.IFileInfoFactory FileInfo { get; }\n    public override System.IO.Abstractions.IFileStreamFactory FileStream { get; }\n    public override System.IO.Abstractions.IFileSystemWatcherFactory FileSystemWatcher { get; }\n    public override System.IO.Abstractions.IFileVersionInfoFactory FileVersionInfo { get; }\n    public override System.IO.Abstractions.IPath Path { get; }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing FileSystemWatcherWrapper Class in C#\nDESCRIPTION: Concrete implementation of FileSystemWatcherBase that wraps a System.IO.FileSystemWatcher instance. Enables monitoring file system events within the abstraction framework.\nSOURCE: https://github.com/testableio/system.io.abstractions/blob/main/tests/TestableIO.System.IO.Abstractions.Api.Tests/Expected/TestableIO.System.IO.Abstractions.Wrappers_netstandard2.0.txt#2025-04-22_snippet_20\n\nLANGUAGE: C#\nCODE:\n```\n[System.Serializable]\npublic class FileSystemWatcherWrapper : System.IO.Abstractions.FileSystemWatcherBase\n{\n    public FileSystemWatcherWrapper(System.IO.Abstractions.IFileSystem fileSystem) { }\n    public FileSystemWatcherWrapper(System.IO.Abstractions.IFileSystem fileSystem, System.IO.FileSystemWatcher watcher) { }\n    public FileSystemWatcherWrapper(System.IO.Abstractions.IFileSystem fileSystem, string path) { }\n    public FileSystemWatcherWrapper(System.IO.Abstractions.IFileSystem fileSystem, string path, string filter) { }\n    public override System.ComponentModel.IContainer Container { get; }\n    public override bool EnableRaisingEvents { get; set; }\n    public override System.IO.Abstractions.IFileSystem FileSystem { get; }\n    public override string Filter { get; set; }\n    public override bool IncludeSubdirectories { get; set; }\n    public override int InternalBufferSize { get; set; }\n    public override System.IO.NotifyFilters NotifyFilter { get; set; }\n    public override string Path { get; set; }\n    public override System.ComponentModel.ISite Site { get; set; }\n    public override System.ComponentModel.ISynchronizeInvoke SynchronizingObject { get; set; }\n    public override void BeginInit() { }\n    public override void Dispose(bool disposing) { }\n    public override void EndInit() { }\n    public override System.IO.Abstractions.IWaitForChangedResult WaitForChanged(System.IO.WatcherChangeTypes changeType) { }\n    public override System.IO.Abstractions.IWaitForChangedResult WaitForChanged(System.IO.WatcherChangeTypes changeType, int timeout) { }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing DirectoryAclExtensions for IDirectory in C#\nDESCRIPTION: Extends IDirectory interface with methods for creating directories with security, getting and setting access control for directories.\nSOURCE: https://github.com/testableio/system.io.abstractions/blob/main/tests/TestableIO.System.IO.Abstractions.Api.Tests/Expected/TestableIO.System.IO.Abstractions.Wrappers_netstandard2.0.txt#2025-04-22_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\npublic static class DirectoryAclExtensions\n{\n    public static void CreateDirectory(this System.IO.Abstractions.IDirectory directory, string path, System.Security.AccessControl.DirectorySecurity directorySecurity) { }\n    public static System.Security.AccessControl.DirectorySecurity GetAccessControl(this System.IO.Abstractions.IDirectory directory, string path) { }\n    public static System.Security.AccessControl.DirectorySecurity GetAccessControl(this System.IO.Abstractions.IDirectory directory, string path, System.Security.AccessControl.AccessControlSections includeSections) { }\n    public static void SetAccessControl(this System.IO.Abstractions.IDirectory directory, string path, System.Security.AccessControl.DirectorySecurity directorySecurity) { }\n}\n```\n\n----------------------------------------\n\nTITLE: Directory Base Class Definition\nDESCRIPTION: Abstract base class implementing core directory operations with file system abstraction\nSOURCE: https://github.com/testableio/system.io.abstractions/blob/main/tests/TestableIO.System.IO.Abstractions.Api.Tests/Expected/TestableIO.System.IO.Abstractions.Wrappers_net9.0.txt#2025-04-22_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\npublic abstract class DirectoryBase : System.IO.Abstractions.IDirectory, System.IO.Abstractions.IFileSystemEntity\n{\n    protected DirectoryBase(System.IO.Abstractions.IFileSystem fileSystem) { }\n    public System.IO.Abstractions.IFileSystem FileSystem { get; }\n    // ... [Additional abstract methods omitted for brevity]\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Base File Info Class in C#\nDESCRIPTION: Abstract base class for file information, implementing IFileInfo and IFileSystemInfo interfaces. It provides a foundation for concrete implementations of file information classes.\nSOURCE: https://github.com/testableio/system.io.abstractions/blob/main/tests/TestableIO.System.IO.Abstractions.Api.Tests/Expected/TestableIO.System.IO.Abstractions.Wrappers_net8.0.txt#2025-04-22_snippet_13\n\nLANGUAGE: C#\nCODE:\n```\n[System.Serializable]\npublic abstract class FileInfoBase : System.IO.Abstractions.FileSystemInfoBase, System.IO.Abstractions.IFileInfo, System.IO.Abstractions.IFileSystemInfo\n{\n    protected FileInfoBase(System.IO.Abstractions.IFileSystem fileSystem) { }\n    public abstract System.IO.Abstractions.IDirectoryInfo Directory { get; }\n    public abstract string DirectoryName { get; }\n    public abstract bool IsReadOnly { get; set; }\n    public abstract long Length { get; }\n    public abstract System.IO.StreamWriter AppendText();\n    public abstract System.IO.Abstractions.IFileInfo CopyTo(string destFileName);\n    public abstract System.IO.Abstractions.IFileInfo CopyTo(string destFileName, bool overwrite);\n    public abstract System.IO.Abstractions.FileSystemStream Create();\n    public abstract System.IO.StreamWriter CreateText();\n    public abstract void Decrypt();\n    public abstract void Encrypt();\n    public abstract void MoveTo(string destFileName);\n    public abstract void MoveTo(string destFileName, bool overwrite);\n    public abstract System.IO.Abstractions.FileSystemStream Open(System.IO.FileMode mode);\n    public abstract System.IO.Abstractions.FileSystemStream Open(System.IO.FileStreamOptions options);\n    public abstract System.IO.Abstractions.FileSystemStream Open(System.IO.FileMode mode, System.IO.FileAccess access);\n    public abstract System.IO.Abstractions.FileSystemStream Open(System.IO.FileMode mode, System.IO.FileAccess access, System.IO.FileShare share);\n    public abstract System.IO.Abstractions.FileSystemStream OpenRead();\n    public abstract System.IO.StreamReader OpenText();\n    public abstract System.IO.Abstractions.FileSystemStream OpenWrite();\n    public abstract System.IO.Abstractions.IFileInfo Replace(string destinationFileName, string destinationBackupFileName);\n    public abstract System.IO.Abstractions.IFileInfo Replace(string destinationFileName, string destinationBackupFileName, bool ignoreMetadataErrors);\n    public static System.IO.Abstractions.FileInfoBase op_Implicit(System.IO.FileInfo fileInfo) { }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing MockFileVersionInfoFactory Class in C#\nDESCRIPTION: This class implements a factory for creating mock file version info objects. It provides a method for getting version info for a given file name.\nSOURCE: https://github.com/testableio/system.io.abstractions/blob/main/tests/TestableIO.System.IO.Abstractions.Api.Tests/Expected/TestableIO.System.IO.Abstractions.TestingHelpers_netstandard2.1.txt#2025-04-22_snippet_20\n\nLANGUAGE: C#\nCODE:\n```\npublic class MockFileVersionInfoFactory : System.IO.Abstractions.IFileSystemEntity, System.IO.Abstractions.IFileVersionInfoFactory\n{\n    public MockFileVersionInfoFactory(System.IO.Abstractions.TestingHelpers.IMockFileDataAccessor mockFileSystem) { }\n    public System.IO.Abstractions.IFileSystem FileSystem { get; }\n    public System.IO.Abstractions.IFileVersionInfo GetVersionInfo(string fileName) { }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing MockUnixSupport Class in C#\nDESCRIPTION: This static class provides utility methods for dealing with Unix-specific file system operations in a mock environment. It includes methods for platform detection and path conversion.\nSOURCE: https://github.com/testableio/system.io.abstractions/blob/main/tests/TestableIO.System.IO.Abstractions.Api.Tests/Expected/TestableIO.System.IO.Abstractions.TestingHelpers_netstandard2.1.txt#2025-04-22_snippet_22\n\nLANGUAGE: C#\nCODE:\n```\npublic static class MockUnixSupport\n{\n    public static bool IsUnixPlatform() { }\n    public static bool IsWindowsPlatform() { }\n    public static string Path(string path) { }\n}\n```\n\n----------------------------------------\n\nTITLE: Abstracting Drive Information in C#\nDESCRIPTION: This snippet defines the `DriveInfoBase` abstract class and `DriveInfoWrapper`, providing an abstraction over drive information. Methods within these classes access drive properties like total size, free space, and format. These methods depend on passing a `System.IO.Abstractions.IFileSystem` and potentially a `System.IO.DriveInfo` instance upon initialization. Primary outputs include drive metrics as integers and strings.\nSOURCE: https://github.com/testableio/system.io.abstractions/blob/main/tests/TestableIO.System.IO.Abstractions.Api.Tests/Expected/TestableIO.System.IO.Abstractions.Wrappers_net472.txt#2025-04-22_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\npublic abstract class DriveInfoBase : System.IO.Abstractions.IDriveInfo { ... public static System.IO.Abstractions.DriveInfoBase op_Implicit(System.IO.DriveInfo driveInfo) { } }\n```\n\n----------------------------------------\n\nTITLE: Implementing StringOperations in C#\nDESCRIPTION: This class provides string manipulation operations with optional case sensitivity. It includes methods for comparison, searching, and case conversion.\nSOURCE: https://github.com/testableio/system.io.abstractions/blob/main/tests/TestableIO.System.IO.Abstractions.Api.Tests/Expected/TestableIO.System.IO.Abstractions.TestingHelpers_net6.0.txt#2025-04-22_snippet_30\n\nLANGUAGE: C#\nCODE:\n```\n[System.Serializable]\npublic class StringOperations\n{\n    public StringOperations(bool caseSensitive) { }\n    public System.StringComparer Comparer { get; }\n    public bool Contains(string s, string substring) { }\n    public bool EndsWith(string s, string suffix) { }\n    public bool Equals(char x, char y) { }\n    public bool Equals(string x, string y) { }\n    public int IndexOf(string s, string substring) { }\n    public int IndexOf(string s, string substring, int startIndex) { }\n    public string Replace(string s, string oldValue, string newValue) { }\n    public bool StartsWith(string s, string prefix) { }\n    public char ToLower(char c) { }\n    public string ToLower(string s) { }\n    public char ToUpper(char c) { }\n    public string ToUpper(string s) { }\n}\n```\n\n----------------------------------------\n\nTITLE: DirectoryAclExtensions Implementation for Directory Access Control\nDESCRIPTION: Extension methods for the IDirectory interface to handle directory security operations including creation with security settings and getting/setting access control configurations.\nSOURCE: https://github.com/testableio/system.io.abstractions/blob/main/tests/TestableIO.System.IO.Abstractions.Api.Tests/Expected/TestableIO.System.IO.Abstractions.Wrappers_net472.txt#2025-04-22_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\npublic static class DirectoryAclExtensions\n{\n    public static void CreateDirectory(this System.IO.Abstractions.IDirectory directory, string path, System.Security.AccessControl.DirectorySecurity directorySecurity) { }\n    public static System.Security.AccessControl.DirectorySecurity GetAccessControl(this System.IO.Abstractions.IDirectory directory, string path) { }\n    public static System.Security.AccessControl.DirectorySecurity GetAccessControl(this System.IO.Abstractions.IDirectory directory, string path, System.Security.AccessControl.AccessControlSections includeSections) { }\n    public static void SetAccessControl(this System.IO.Abstractions.IDirectory directory, string path, System.Security.AccessControl.DirectorySecurity directorySecurity) { }\n}\n```\n\n----------------------------------------\n\nTITLE: Enumerating FileSystem Infos in C#\nDESCRIPTION: Provides various methods to enumerate file system infos using specific search patterns and options. This implementation is used to retrieve file and directory information in a mock environment based on System.IO.Abstractions.\nSOURCE: https://github.com/testableio/system.io.abstractions/blob/main/tests/TestableIO.System.IO.Abstractions.Api.Tests/Expected/TestableIO.System.IO.Abstractions.TestingHelpers_net6.0.txt#2025-04-22_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\npublic override System.Collections.Generic.IEnumerable<System.IO.Abstractions.IFileSystemInfo> EnumerateFileSystemInfos(string searchPattern) { }\n```\n\nLANGUAGE: C#\nCODE:\n```\npublic override System.Collections.Generic.IEnumerable<System.IO.Abstractions.IFileSystemInfo> EnumerateFileSystemInfos(string searchPattern, System.IO.EnumerationOptions enumerationOptions) { }\n```\n\nLANGUAGE: C#\nCODE:\n```\npublic override System.Collections.Generic.IEnumerable<System.IO.Abstractions.IFileSystemInfo> EnumerateFileSystemInfos(string searchPattern, System.IO.SearchOption searchOption) { }\n```\n\n----------------------------------------\n\nTITLE: Implementing DriveInfoBase and DriveInfoWrapper in C#\nDESCRIPTION: This code defines the abstract class DriveInfoBase which provides an interface for drive-related properties and operations, such as checking available space and retrieving drive information. The DriveInfoWrapper class extends this, wrapping functionalities for a specific drive using System.IO.Abstractions.\nSOURCE: https://github.com/testableio/system.io.abstractions/blob/main/tests/TestableIO.System.IO.Abstractions.Api.Tests/Expected/TestableIO.System.IO.Abstractions.Wrappers_netstandard2.0.txt#2025-04-22_snippet_8\n\nLANGUAGE: C#\nCODE:\n```\n[System.Serializable]\npublic abstract class DriveInfoBase : System.IO.Abstractions.IDriveInfo, System.IO.Abstractions.IFileSystemEntity {\n    protected DriveInfoBase(System.IO.Abstractions.IFileSystem fileSystem) { }\n    public abstract long AvailableFreeSpace { get; }\n    public abstract string DriveFormat { get; }\n    public abstract System.IO.DriveType DriveType { get; }\n    public System.IO.Abstractions.IFileSystem FileSystem { get; }\n    public abstract bool IsReady { get; }\n    public abstract string Name { get; }\n    public abstract System.IO.Abstractions.IDirectoryInfo RootDirectory { get; }\n    public abstract long TotalFreeSpace { get; }\n    public abstract long TotalSize { get; }\n    public abstract string VolumeLabel { get; set; }\n    public static System.IO.Abstractions.DriveInfoBase op_Implicit(System.IO.DriveInfo driveInfo) { }\n}\n```\n\nLANGUAGE: C#\nCODE:\n```\n[System.Serializable]\npublic class DriveInfoWrapper : System.IO.Abstractions.DriveInfoBase {\n    public DriveInfoWrapper(System.IO.Abstractions.IFileSystem fileSystem, System.IO.DriveInfo instance) { }\n    public override long AvailableFreeSpace { get; }\n    public override string DriveFormat { get; }\n    public override System.IO.DriveType DriveType { get; }\n    public override bool IsReady { get; }\n    public override string Name { get; }\n    public override System.IO.Abstractions.IDirectoryInfo RootDirectory { get; }\n    public override long TotalFreeSpace { get; }\n    public override long TotalSize { get; }\n    public override string VolumeLabel { get; set; }\n    public override string ToString() { }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing MockPath in C#\nDESCRIPTION: A mock implementation of PathWrapper that provides path operations for the mock file system. Includes methods for path existence checking, getting full paths, relative paths, and temporary file operations.\nSOURCE: https://github.com/testableio/system.io.abstractions/blob/main/tests/TestableIO.System.IO.Abstractions.Api.Tests/Expected/TestableIO.System.IO.Abstractions.TestingHelpers_net8.0.txt#2025-04-22_snippet_23\n\nLANGUAGE: C#\nCODE:\n```\n[System.Serializable]\npublic class MockPath : System.IO.Abstractions.PathWrapper\n{\n    public MockPath(System.IO.Abstractions.TestingHelpers.IMockFileDataAccessor mockFileDataAccessor) { }\n    public MockPath(System.IO.Abstractions.TestingHelpers.IMockFileDataAccessor mockFileDataAccessor, string defaultTempDirectory) { }\n    public override bool Exists(string path) { }\n    public override string GetFullPath(string path) { }\n    public override string GetRelativePath(string relativeTo, string path) { }\n    public override string GetTempFileName() { }\n    public override string GetTempPath() { }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining TimeAdjustments Enum in C#\nDESCRIPTION: Flag enumeration used to specify which timestamp properties should be adjusted when manipulating file times. Provides options for creation time, last access time, last write time, or all times.\nSOURCE: https://github.com/testableio/system.io.abstractions/blob/main/tests/TestableIO.System.IO.Abstractions.Api.Tests/Expected/TestableIO.System.IO.Abstractions.TestingHelpers_net8.0.txt#2025-04-22_snippet_27\n\nLANGUAGE: C#\nCODE:\n```\n[System.Flags]\npublic enum TimeAdjustments\n{\n    None = 0,\n    CreationTime = 1,\n    LastAccessTime = 2,\n    LastWriteTime = 4,\n    All = -1,\n}\n```\n\n----------------------------------------\n\nTITLE: Overriding Drive Info Operations for Mocking with System.IO.Abstractions in C#\nDESCRIPTION: This snippet defines a serializable class that inherits from DriveInfoBase to simulate drive operations and properties for testing purposes with System.IO.Abstractions. The constructor requires a mock file data accessor and a drive name. Overridden read-only properties expose drive characteristics such as space, format, type, readiness, root directory, and volume label. ToString() methods enable drive description; some properties are settable, providing flexibility for test-driven scenarios.\nSOURCE: https://github.com/testableio/system.io.abstractions/blob/main/tests/TestableIO.System.IO.Abstractions.Api.Tests/Expected/TestableIO.System.IO.Abstractions.TestingHelpers_net8.0.txt#2025-04-22_snippet_8\n\nLANGUAGE: C#\nCODE:\n```\n[System.Serializable]\npublic class MockDriveInfo : System.IO.Abstractions.DriveInfoBase\n{\n    public MockDriveInfo(System.IO.Abstractions.TestingHelpers.IMockFileDataAccessor mockFileDataAccessor, string name) { }\n    public override long AvailableFreeSpace { get; }\n    public override string DriveFormat { get; }\n    public override System.IO.DriveType DriveType { get; }\n    public override bool IsReady { get; }\n    public override string Name { get; }\n    public override System.IO.Abstractions.IDirectoryInfo RootDirectory { get; }\n    public override long TotalFreeSpace { get; }\n    public override long TotalSize { get; }\n    public override string VolumeLabel { get; set; }\n    public override string ToString() { }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing MockFileStreamFactory Class in C#\nDESCRIPTION: Implementation of the IFileStreamFactory interface for creating mock file streams. This class provides methods to create FileSystemStream instances with various parameters and options.\nSOURCE: https://github.com/testableio/system.io.abstractions/blob/main/tests/TestableIO.System.IO.Abstractions.Api.Tests/Expected/TestableIO.System.IO.Abstractions.TestingHelpers_net6.0.txt#2025-04-22_snippet_21\n\nLANGUAGE: C#\nCODE:\n```\n[System.Serializable]\npublic class MockFileStreamFactory : System.IO.Abstractions.IFileStreamFactory, System.IO.Abstractions.IFileSystemEntity\n{\n    public MockFileStreamFactory(System.IO.Abstractions.TestingHelpers.IMockFileDataAccessor mockFileSystem) { }\n    public System.IO.Abstractions.IFileSystem FileSystem { get; }\n    public System.IO.Abstractions.FileSystemStream New(Microsoft.Win32.SafeHandles.SafeFileHandle handle, System.IO.FileAccess access) { }\n    public System.IO.Abstractions.FileSystemStream New(string path, System.IO.FileMode mode) { }\n    public System.IO.Abstractions.FileSystemStream New(string path, System.IO.FileStreamOptions options) { }\n    public System.IO.Abstractions.FileSystemStream New(Microsoft.Win32.SafeHandles.SafeFileHandle handle, System.IO.FileAccess access, int bufferSize) { }\n    public System.IO.Abstractions.FileSystemStream New(string path, System.IO.FileMode mode, System.IO.FileAccess access) { }\n    public System.IO.Abstractions.FileSystemStream New(Microsoft.Win32.SafeHandles.SafeFileHandle handle, System.IO.FileAccess access, int bufferSize, bool isAsync) { }\n    public System.IO.Abstractions.FileSystemStream New(string path, System.IO.FileMode mode, System.IO.FileAccess access, System.IO.FileShare share) { }\n    public System.IO.Abstractions.FileSystemStream New(string path, System.IO.FileMode mode, System.IO.FileAccess access, System.IO.FileShare share, int bufferSize) { }\n    public System.IO.Abstractions.FileSystemStream New(string path, System.IO.FileMode mode, System.IO.FileAccess access, System.IO.FileShare share, int bufferSize, System.IO.FileOptions options) { }\n    public System.IO.Abstractions.FileSystemStream New(string path, System.IO.FileMode mode, System.IO.FileAccess access, System.IO.FileShare share, int bufferSize, bool useAsync) { }\n    public System.IO.Abstractions.FileSystemStream Wrap(System.IO.FileStream fileStream) { }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining File ACL Extension Methods (C#)\nDESCRIPTION: Defines static extension methods within the `FileAclExtensions` class for the `System.IO.Abstractions.IFile` interface. These methods (`GetAccessControl`, `SetAccessControl`) provide access to Windows-specific file security and access control list (ACL) functionalities, wrapping `System.Security.AccessControl.FileSecurity` operations.\nSOURCE: https://github.com/testableio/system.io.abstractions/blob/main/tests/TestableIO.System.IO.Abstractions.Api.Tests/Expected/TestableIO.System.IO.Abstractions.Wrappers_net6.0.txt#2025-04-22_snippet_11\n\nLANGUAGE: csharp\nCODE:\n```\n    public static class FileAclExtensions\n    {\n        [System.Runtime.Versioning.SupportedOSPlatform(\"windows\")]\n        public static System.Security.AccessControl.FileSecurity GetAccessControl(this System.IO.Abstractions.IFile file, string path) { }\n        [System.Runtime.Versioning.SupportedOSPlatform(\"windows\")]\n        public static System.Security.AccessControl.FileSecurity GetAccessControl(this System.IO.Abstractions.IFile file, string path, System.Security.AccessControl.AccessControlSections includeSections) { }\n        [System.Runtime.Versioning.SupportedOSPlatform(\"windows\")]\n        public static void SetAccessControl(this System.IO.Abstractions.IFile file, string path, System.Security.AccessControl.FileSecurity fileSecurity) { }\n    }\n```\n\n----------------------------------------\n\nTITLE: Mocking Drive Data and Drive Info with System.IO.Abstractions in C#\nDESCRIPTION: The MockDriveData and MockDriveInfo classes encapsulate drive properties such as available space, format, readiness, and labels for use in simulated environments. Constructors allow initialization with templates or by supplying drive parameters, and both classes support getting and setting drive properties. The factory class enables creation and wrapping of drive info objects, essential for comprehensive mocking of storage devices in unit tests.\nSOURCE: https://github.com/testableio/system.io.abstractions/blob/main/tests/TestableIO.System.IO.Abstractions.Api.Tests/Expected/TestableIO.System.IO.Abstractions.TestingHelpers_net472.txt#2025-04-22_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\n[System.Serializable]\npublic class MockDriveData\n{\n    public MockDriveData() { }\n    public MockDriveData(System.IO.Abstractions.TestingHelpers.MockDriveData template) { }\n    public long AvailableFreeSpace { get; set; }\n    public string DriveFormat { get; set; }\n    public System.IO.DriveType DriveType { get; set; }\n    public bool IsReady { get; set; }\n    public long TotalFreeSpace { get; set; }\n    public long TotalSize { get; set; }\n    public string VolumeLabel { get; set; }\n}\n[System.Serializable]\npublic class MockDriveInfo : System.IO.Abstractions.DriveInfoBase\n{\n    public MockDriveInfo(System.IO.Abstractions.TestingHelpers.IMockFileDataAccessor mockFileDataAccessor, string name) { }\n    public override long AvailableFreeSpace { get; }\n    public override string DriveFormat { get; }\n    public override System.IO.DriveType DriveType { get; }\n    public override bool IsReady { get; }\n    public override string Name { get; }\n    public override System.IO.Abstractions.IDirectoryInfo RootDirectory { get; }\n    public override long TotalFreeSpace { get; }\n    public override long TotalSize { get; }\n    public override string VolumeLabel { get; set; }\n    public override string ToString() { }\n}\n[System.Serializable]\npublic class MockDriveInfoFactory : System.IO.Abstractions.IDriveInfoFactory, System.IO.Abstractions.IFileSystemEntity\n{\n    public MockDriveInfoFactory(System.IO.Abstractions.TestingHelpers.IMockFileDataAccessor mockFileSystem) { }\n    public System.IO.Abstractions.IFileSystem FileSystem { get; }\n    public System.IO.Abstractions.IDriveInfo[] GetDrives() { }\n    public System.IO.Abstractions.IDriveInfo New(string driveName) { }\n    public System.IO.Abstractions.IDriveInfo Wrap(System.IO.DriveInfo driveInfo) { }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing MockUnixSupport Static Class in C#\nDESCRIPTION: A static utility class for handling platform-specific path operations in mock file systems. It provides methods to detect the operating system platform and normalize paths for Unix or Windows environments.\nSOURCE: https://github.com/testableio/system.io.abstractions/blob/main/tests/TestableIO.System.IO.Abstractions.Api.Tests/Expected/TestableIO.System.IO.Abstractions.TestingHelpers_net472.txt#2025-04-22_snippet_18\n\nLANGUAGE: C#\nCODE:\n```\npublic static class MockUnixSupport\n{\n    public static bool IsUnixPlatform() { }\n    public static bool IsWindowsPlatform() { }\n    public static string Path(string path) { }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing File Access Control Extensions in C#\nDESCRIPTION: This snippet defines extension methods for IFileInfo to handle file access control on Windows platforms. It includes methods to get and set file security information.\nSOURCE: https://github.com/testableio/system.io.abstractions/blob/main/tests/TestableIO.System.IO.Abstractions.Api.Tests/Expected/TestableIO.System.IO.Abstractions.Wrappers_net6.0.txt#2025-04-22_snippet_14\n\nLANGUAGE: C#\nCODE:\n```\npublic static class FileInfoAclExtensions\n{\n    [System.Runtime.Versioning.SupportedOSPlatform(\"windows\")]\n    public static System.Security.AccessControl.FileSecurity GetAccessControl(this System.IO.Abstractions.IFileInfo fileInfo) { }\n    [System.Runtime.Versioning.SupportedOSPlatform(\"windows\")]\n    public static System.Security.AccessControl.FileSecurity GetAccessControl(this System.IO.Abstractions.IFileInfo fileInfo, System.Security.AccessControl.AccessControlSections includeSections) { }\n    [System.Runtime.Versioning.SupportedOSPlatform(\"windows\")]\n    public static void SetAccessControl(this System.IO.Abstractions.IFileInfo fileInfo, System.Security.AccessControl.FileSecurity fileSecurity) { }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing FileSystemAclExtensions in C#\nDESCRIPTION: Static extension class that adds access control capabilities to FileSystemStream objects. Provides methods to get and set file system access control security.\nSOURCE: https://github.com/testableio/system.io.abstractions/blob/main/tests/TestableIO.System.IO.Abstractions.Api.Tests/Expected/TestableIO.System.IO.Abstractions.Wrappers_netstandard2.0.txt#2025-04-22_snippet_14\n\nLANGUAGE: C#\nCODE:\n```\npublic static class FileStreamAclExtensions\n{\n    public static System.Security.AccessControl.FileSecurity GetAccessControl(this System.IO.Abstractions.FileSystemStream fileStream) { }\n    public static void SetAccessControl(this System.IO.Abstractions.FileSystemStream fileStream, System.Security.AccessControl.FileSecurity fileSecurity) { }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining TimeAdjustments Enum in C#\nDESCRIPTION: This enum defines flags for specifying which time attributes of a file or directory should be adjusted, including creation time, last access time, and last write time.\nSOURCE: https://github.com/testableio/system.io.abstractions/blob/main/tests/TestableIO.System.IO.Abstractions.Api.Tests/Expected/TestableIO.System.IO.Abstractions.TestingHelpers_net9.0.txt#2025-04-22_snippet_29\n\nLANGUAGE: C#\nCODE:\n```\n[System.Flags]\npublic enum TimeAdjustments\n{\n    None = 0,\n    CreationTime = 1,\n    LastAccessTime = 2,\n    LastWriteTime = 4,\n    All = -1,\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing MockFileVersionInfo Class in C#\nDESCRIPTION: Mock implementation of FileVersionInfoBase providing version information for files. Contains properties for file version, description, company name, and other metadata that would normally be extracted from files.\nSOURCE: https://github.com/testableio/system.io.abstractions/blob/main/tests/TestableIO.System.IO.Abstractions.Api.Tests/Expected/TestableIO.System.IO.Abstractions.TestingHelpers_net6.0.txt#2025-04-22_snippet_25\n\nLANGUAGE: C#\nCODE:\n```\n[System.Serializable]\npublic class MockFileVersionInfo : System.IO.Abstractions.FileVersionInfoBase\n{\n    public MockFileVersionInfo(\n                string fileName,\n                string fileVersion = null,\n                string productVersion = null,\n                string fileDescription = null,\n                string productName = null,\n                string companyName = null,\n                string comments = null,\n                string internalName = null,\n                bool isDebug = false,\n                bool isPatched = false,\n                bool isPrivateBuild = false,\n                bool isPreRelease = false,\n                bool isSpecialBuild = false,\n                string language = null,\n                string legalCopyright = null,\n                string legalTrademarks = null,\n                string originalFilename = null,\n                string privateBuild = null,\n                string specialBuild = null) { }\n    public override string Comments { get; }\n    public override string CompanyName { get; }\n    public override int FileBuildPart { get; }\n    public override string FileDescription { get; }\n    public override int FileMajorPart { get; }\n    public override int FileMinorPart { get; }\n    public override string FileName { get; }\n    public override int FilePrivatePart { get; }\n    public override string FileVersion { get; }\n    public override string InternalName { get; }\n    public override bool IsDebug { get; }\n    public override bool IsPatched { get; }\n    public override bool IsPreRelease { get; }\n```\n\n----------------------------------------\n\nTITLE: Defining MockFileSystemOptions Class in C#\nDESCRIPTION: A class to configure options for the MockFileSystem, allowing customization of default temporary directory and current directory settings. The properties use the init accessor, making them immutable after initialization.\nSOURCE: https://github.com/testableio/system.io.abstractions/blob/main/tests/TestableIO.System.IO.Abstractions.Api.Tests/Expected/TestableIO.System.IO.Abstractions.TestingHelpers_net472.txt#2025-04-22_snippet_13\n\nLANGUAGE: C#\nCODE:\n```\npublic class MockFileSystemOptions\n{\n    public MockFileSystemOptions() { }\n    public bool CreateDefaultTempDir { get; init; }\n    public string CurrentDirectory { get; init; }\n}\n```\n\n----------------------------------------\n\nTITLE: Extending IFileInfo with ACL Methods in C#\nDESCRIPTION: Defines static extension methods within `FileInfoAclExtensions` for the `System.IO.Abstractions.IFileInfo` interface. These methods, `GetAccessControl` and `SetAccessControl`, allow retrieving and setting file security information (ACLs) using `System.Security.AccessControl.FileSecurity`. Depends on `System.IO.Abstractions` and `System.Security.AccessControl`.\nSOURCE: https://github.com/testableio/system.io.abstractions/blob/main/tests/TestableIO.System.IO.Abstractions.Api.Tests/Expected/TestableIO.System.IO.Abstractions.Wrappers_net472.txt#2025-04-22_snippet_11\n\nLANGUAGE: csharp\nCODE:\n```\n    public static class FileInfoAclExtensions\n    {\n        public static System.Security.AccessControl.FileSecurity GetAccessControl(this System.IO.Abstractions.IFileInfo fileInfo) { }\n        public static System.Security.AccessControl.FileSecurity GetAccessControl(this System.IO.Abstractions.IFileInfo fileInfo, System.Security.AccessControl.AccessControlSections includeSections) { }\n        public static void SetAccessControl(this System.IO.Abstractions.IFileInfo fileInfo, System.Security.AccessControl.FileSecurity fileSecurity) { }\n    }\n```\n\n----------------------------------------\n\nTITLE: Implementing File Path Operations in C#\nDESCRIPTION: This code snippet shows the implementation of several file path operations in C#. It includes methods for getting path roots, generating random and temporary file names, retrieving the temporary path, checking for file extensions, and determining if a path is rooted.\nSOURCE: https://github.com/testableio/system.io.abstractions/blob/main/tests/TestableIO.System.IO.Abstractions.Api.Tests/Expected/TestableIO.System.IO.Abstractions.Wrappers_net472.txt#2025-04-22_snippet_27\n\nLANGUAGE: C#\nCODE:\n```\npublic override string GetPathRoot(string path) { }\npublic override string GetRandomFileName() { }\npublic override string GetTempFileName() { }\npublic override string GetTempPath() { }\npublic override bool HasExtension(string path) { }\npublic override bool IsPathRooted(string path) { }\n```\n\n----------------------------------------\n\nTITLE: File Operation Method Declarations in System.IO.Abstractions MockFile Class\nDESCRIPTION: Method declarations for a MockFile class that overrides file system operations from a base class. These methods cover file metadata retrieval, file manipulation, and file content operations.\nSOURCE: https://github.com/testableio/system.io.abstractions/blob/main/tests/TestableIO.System.IO.Abstractions.Api.Tests/Expected/TestableIO.System.IO.Abstractions.TestingHelpers_net9.0.txt#2025-04-22_snippet_11\n\nLANGUAGE: C#\nCODE:\n```\npublic override System.DateTime GetCreationTime(string path) { }\npublic override System.DateTime GetCreationTimeUtc(Microsoft.Win32.SafeHandles.SafeFileHandle fileHandle) { }\npublic override System.DateTime GetCreationTimeUtc(string path) { }\npublic override System.DateTime GetLastAccessTime(Microsoft.Win32.SafeHandles.SafeFileHandle fileHandle) { }\npublic override System.DateTime GetLastAccessTime(string path) { }\npublic override System.DateTime GetLastAccessTimeUtc(Microsoft.Win32.SafeHandles.SafeFileHandle fileHandle) { }\npublic override System.DateTime GetLastAccessTimeUtc(string path) { }\npublic override System.DateTime GetLastWriteTime(Microsoft.Win32.SafeHandles.SafeFileHandle fileHandle) { }\npublic override System.DateTime GetLastWriteTime(string path) { }\npublic override System.DateTime GetLastWriteTimeUtc(Microsoft.Win32.SafeHandles.SafeFileHandle fileHandle) { }\npublic override System.DateTime GetLastWriteTimeUtc(string path) { }\npublic override System.IO.UnixFileMode GetUnixFileMode(Microsoft.Win32.SafeHandles.SafeFileHandle fileHandle) { }\npublic override System.IO.UnixFileMode GetUnixFileMode(string path) { }\npublic override void Move(string sourceFileName, string destFileName) { }\npublic override void Move(string sourceFileName, string destFileName, bool overwrite) { }\npublic override System.IO.Abstractions.FileSystemStream Open(string path, System.IO.FileMode mode) { }\npublic override System.IO.Abstractions.FileSystemStream Open(string path, System.IO.FileStreamOptions options) { }\npublic override System.IO.Abstractions.FileSystemStream Open(string path, System.IO.FileMode mode, System.IO.FileAccess access) { }\npublic override System.IO.Abstractions.FileSystemStream Open(string path, System.IO.FileMode mode, System.IO.FileAccess access, System.IO.FileShare share) { }\npublic override System.IO.Abstractions.FileSystemStream OpenRead(string path) { }\npublic override System.IO.StreamReader OpenText(string path) { }\npublic override System.IO.Abstractions.FileSystemStream OpenWrite(string path) { }\npublic override byte[] ReadAllBytes(string path) { }\npublic override System.Threading.Tasks.Task<byte[]> ReadAllBytesAsync(string path, System.Threading.CancellationToken cancellationToken = default) { }\npublic override string[] ReadAllLines(string path) { }\npublic override string[] ReadAllLines(string path, System.Text.Encoding encoding) { }\npublic override System.Threading.Tasks.Task<string[]> ReadAllLinesAsync(string path, System.Threading.CancellationToken cancellationToken = default) { }\npublic override System.Threading.Tasks.Task<string[]> ReadAllLinesAsync(string path, System.Text.Encoding encoding, System.Threading.CancellationToken cancellationToken = default) { }\npublic override string ReadAllText(string path) { }\npublic override string ReadAllText(string path, System.Text.Encoding encoding) { }\npublic override System.Threading.Tasks.Task<string> ReadAllTextAsync(string path, System.Threading.CancellationToken cancellationToken = default) { }\npublic override System.Threading.Tasks.Task<string> ReadAllTextAsync(string path, System.Text.Encoding encoding, System.Threading.CancellationToken cancellationToken = default) { }\npublic override System.Collections.Generic.IEnumerable<string> ReadLines(string path) { }\npublic override System.Collections.Generic.IEnumerable<string> ReadLines(string path, System.Text.Encoding encoding) { }\npublic override System.Collections.Generic.IAsyncEnumerable<string> ReadLinesAsync(string path, System.Threading.CancellationToken cancellationToken = default) { }\n[System.Runtime.CompilerServices.AsyncIteratorStateMachine(typeof(System.IO.Abstractions.TestingHelpers.MockFile.<ReadLinesAsync>d__14))]\npublic override System.Collections.Generic.IAsyncEnumerable<string> ReadLinesAsync(string path, System.Text.Encoding encoding, [System.Runtime.CompilerServices.EnumeratorCancellation] System.Threading.CancellationToken cancellationToken = default) { }\npublic override void Replace(string sourceFileName, string destinationFileName, string destinationBackupFileName) { }\npublic override void Replace(string sourceFileName, string destinationFileName, string destinationBackupFileName, bool ignoreMetadataErrors) { }\npublic override System.IO.Abstractions.IFileSystemInfo ResolveLinkTarget(string linkPath, bool returnFinalTarget) { }\npublic override void SetAttributes(Microsoft.Win32.SafeHandles.SafeFileHandle fileHandle, System.IO.FileAttributes fileAttributes) { }\npublic override void SetAttributes(string path, System.IO.FileAttributes fileAttributes) { }\npublic override void SetCreationTime(Microsoft.Win32.SafeHandles.SafeFileHandle fileHandle, System.DateTime creationTime) { }\npublic override void SetCreationTime(string path, System.DateTime creationTime) { }\npublic override void SetCreationTimeUtc(Microsoft.Win32.SafeHandles.SafeFileHandle fileHandle, System.DateTime creationTimeUtc) { }\npublic override void SetCreationTimeUtc(string path, System.DateTime creationTimeUtc) { }\npublic override void SetLastAccessTime(Microsoft.Win32.SafeHandles.SafeFileHandle fileHandle, System.DateTime lastAccessTime) { }\npublic override void SetLastAccessTime(string path, System.DateTime lastAccessTime) { }\npublic override void SetLastAccessTimeUtc(Microsoft.Win32.SafeHandles.SafeFileHandle fileHandle, System.DateTime lastAccessTimeUtc) { }\npublic override void SetLastAccessTimeUtc(string path, System.DateTime lastAccessTimeUtc) { }\npublic override void SetLastWriteTime(Microsoft.Win32.SafeHandles.SafeFileHandle fileHandle, System.DateTime lastWriteTime) { }\npublic override void SetLastWriteTime(string path, System.DateTime lastWriteTime) { }\npublic override void SetLastWriteTimeUtc(Microsoft.Win32.SafeHandles.SafeFileHandle fileHandle, System.DateTime lastWriteTimeUtc) { }\npublic override void SetLastWriteTimeUtc(string path, System.DateTime lastWriteTimeUtc) { }\npublic override void SetUnixFileMode(Microsoft.Win32.SafeHandles.SafeFileHandle fileHandle, System.IO.UnixFileMode mode) { }\npublic override void SetUnixFileMode(string path, System.IO.UnixFileMode mode) { }\npublic override void WriteAllBytes(string path, System.ReadOnlySpan<byte> bytes) { }\npublic override void WriteAllBytes(string path, byte[] bytes) { }\npublic override System.Threading.Tasks.Task WriteAllBytesAsync(string path, System.ReadOnlyMemory<byte> bytes, System.Threading.CancellationToken cancellationToken = default) { }\npublic override System.Threading.Tasks.Task WriteAllBytesAsync(string path, byte[] bytes, System.Threading.CancellationToken cancellationToken = default) { }\npublic override void WriteAllLines(string path, System.Collections.Generic.IEnumerable<string> contents) { }\npublic override void WriteAllLines(string path, string[] contents) { }\npublic override void WriteAllLines(string path, System.Collections.Generic.IEnumerable<string> contents, System.Text.Encoding encoding) { }\npublic override void WriteAllLines(string path, string[] contents, System.Text.Encoding encoding) { }\npublic override System.Threading.Tasks.Task WriteAllLinesAsync(string path, System.Collections.Generic.IEnumerable<string> contents, System.Threading.CancellationToken cancellationToken = default) { }\npublic override System.Threading.Tasks.Task WriteAllLinesAsync(string path, System.Collections.Generic.IEnumerable<string> contents, System.Text.Encoding encoding, System.Threading.CancellationToken cancellationToken = default) { }\npublic override void WriteAllText(string path, System.ReadOnlySpan<char> contents) { }\npublic override void WriteAllText(string path, string contents) { }\npublic override void WriteAllText(string path, System.ReadOnlySpan<char> contents, System.Text.Encoding encoding) { }\npublic override void WriteAllText(string path, string contents, System.Text.Encoding encoding) { }\npublic override System.Threading.Tasks.Task WriteAllTextAsync(string path, System.ReadOnlyMemory<char> contents, System.Threading.CancellationToken cancellationToken = default) { }\npublic override System.Threading.Tasks.Task WriteAllTextAsync(string path, string contents, System.Threading.CancellationToken cancellationToken = default) { }\npublic override System.Threading.Tasks.Task WriteAllTextAsync(string path, System.ReadOnlyMemory<char> contents, System.Text.Encoding encoding, System.Threading.CancellationToken cancellationToken = default) { }\npublic override System.Threading.Tasks.Task WriteAllTextAsync(string path, string contents, System.Text.Encoding encoding, System.Threading.CancellationToken cancellationToken = default) { }\n```\n\n----------------------------------------\n\nTITLE: Implementing Windows-Specific DirectoryInfo ACL Extensions\nDESCRIPTION: Extends IDirectoryInfo with Windows-specific methods for directory security control. Provides access control functionality for directory information objects.\nSOURCE: https://github.com/testableio/system.io.abstractions/blob/main/tests/TestableIO.System.IO.Abstractions.Api.Tests/Expected/TestableIO.System.IO.Abstractions.Wrappers_net6.0.txt#2025-04-22_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\npublic static class DirectoryInfoAclExtensions\n{\n    [System.Runtime.Versioning.SupportedOSPlatform(\"windows\")]\n    public static void Create(this System.IO.Abstractions.IDirectoryInfo directoryInfo, System.Security.AccessControl.DirectorySecurity directorySecurity) { }\n    [System.Runtime.Versioning.SupportedOSPlatform(\"windows\")]\n    public static System.Security.AccessControl.DirectorySecurity GetAccessControl(this System.IO.Abstractions.IDirectoryInfo directoryInfo) { }\n    [System.Runtime.Versioning.SupportedOSPlatform(\"windows\")]\n    public static System.Security.AccessControl.DirectorySecurity GetAccessControl(this System.IO.Abstractions.IDirectoryInfo directoryInfo, System.Security.AccessControl.AccessControlSections includeSections) { }\n    [System.Runtime.Versioning.SupportedOSPlatform(\"windows\")]\n    public static void SetAccessControl(this System.IO.Abstractions.IDirectoryInfo directoryInfo, System.Security.AccessControl.DirectorySecurity directorySecurity) { }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing MockFileVersionInfo Class in C#\nDESCRIPTION: A serializable class providing mock implementation of file version information. It inherits from FileVersionInfoBase and allows setting all version-related properties through its constructor for testing purposes.\nSOURCE: https://github.com/testableio/system.io.abstractions/blob/main/tests/TestableIO.System.IO.Abstractions.Api.Tests/Expected/TestableIO.System.IO.Abstractions.TestingHelpers_net472.txt#2025-04-22_snippet_15\n\nLANGUAGE: C#\nCODE:\n```\n[System.Serializable]\npublic class MockFileVersionInfo : System.IO.Abstractions.FileVersionInfoBase\n{\n    public MockFileVersionInfo(\n                string fileName,\n                string fileVersion = null,\n                string productVersion = null,\n                string fileDescription = null,\n                string productName = null,\n                string companyName = null,\n                string comments = null,\n                string internalName = null,\n                bool isDebug = false,\n                bool isPatched = false,\n                bool isPrivateBuild = false,\n                bool isPreRelease = false,\n                bool isSpecialBuild = false,\n                string language = null,\n                string legalCopyright = null,\n                string legalTrademarks = null,\n                string originalFilename = null,\n                string privateBuild = null,\n                string specialBuild = null) { }\n    public override string Comments { get; }\n    public override string CompanyName { get; }\n    public override int FileBuildPart { get; }\n    public override string FileDescription { get; }\n    public override int FileMajorPart { get; }\n    public override int FileMinorPart { get; }\n    public override string FileName { get; }\n    public override int FilePrivatePart { get; }\n    public override string FileVersion { get; }\n    public override string InternalName { get; }\n    public override bool IsDebug { get; }\n    public override bool IsPatched { get; }\n    public override bool IsPreRelease { get; }\n    public override bool IsPrivateBuild { get; }\n    public override bool IsSpecialBuild { get; }\n    public override string Language { get; }\n    public override string LegalCopyright { get; }\n    public override string LegalTrademarks { get; }\n    public override string OriginalFilename { get; }\n    public override string PrivateBuild { get; }\n    public override int ProductBuildPart { get; }\n    public override int ProductMajorPart { get; }\n    public override int ProductMinorPart { get; }\n    public override string ProductName { get; }\n    public override int ProductPrivatePart { get; }\n    public override string ProductVersion { get; }\n    public override string SpecialBuild { get; }\n    public override string ToString() { }\n}\n```\n\n----------------------------------------\n\nTITLE: Overriding Directory and File Methods with System.IO.Abstractions in C#\nDESCRIPTION: These method declarations override standard directory and file operations such as retrieving directory contents, moving directories, and refreshing directory state using interfaces from System.IO.Abstractions. Intended for use within a mock directory or file info class, they provide customizable behavior for querying and manipulating mocked file system entities. Inputs typically include path strings and search patterns; outputs include arrays of file or directory info interfaces.\nSOURCE: https://github.com/testableio/system.io.abstractions/blob/main/tests/TestableIO.System.IO.Abstractions.Api.Tests/Expected/TestableIO.System.IO.Abstractions.TestingHelpers_net472.txt#2025-04-22_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\npublic override System.IO.Abstractions.IFileSystemInfo[] GetFileSystemInfos(string searchPattern, System.IO.SearchOption searchOption) { }\npublic override System.IO.Abstractions.IFileInfo[] GetFiles() { }\npublic override System.IO.Abstractions.IFileInfo[] GetFiles(string searchPattern) { }\npublic override System.IO.Abstractions.IFileInfo[] GetFiles(string searchPattern, System.IO.SearchOption searchOption) { }\npublic override void MoveTo(string destDirName) { }\npublic override void Refresh() { }\npublic void SetAccessControl(object value) { }\npublic override string ToString() { }\n```\n\n----------------------------------------\n\nTITLE: Implementing FileInfoAclExtensions Class in C#\nDESCRIPTION: Static extension methods for the IFileInfo interface to handle file access control lists (ACLs). These methods allow getting and setting file security permissions using the System.Security.AccessControl namespace.\nSOURCE: https://github.com/testableio/system.io.abstractions/blob/main/tests/TestableIO.System.IO.Abstractions.Api.Tests/Expected/TestableIO.System.IO.Abstractions.Wrappers_netstandard2.0.txt#2025-04-22_snippet_11\n\nLANGUAGE: C#\nCODE:\n```\npublic static class FileInfoAclExtensions\n{\n    public static System.Security.AccessControl.FileSecurity GetAccessControl(this System.IO.Abstractions.IFileInfo fileInfo) { }\n    public static System.Security.AccessControl.FileSecurity GetAccessControl(this System.IO.Abstractions.IFileInfo fileInfo, System.Security.AccessControl.AccessControlSections includeSections) { }\n    public static void SetAccessControl(this System.IO.Abstractions.IFileInfo fileInfo, System.Security.AccessControl.FileSecurity fileSecurity) { }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining PathBase Abstract Class in C#\nDESCRIPTION: Abstract base class that implements IFileSystemEntity and IPath interfaces for file path operations. This class serves as a foundation for path manipulation functionality with abstract methods that concrete implementations will override.\nSOURCE: https://github.com/testableio/system.io.abstractions/blob/main/tests/TestableIO.System.IO.Abstractions.Api.Tests/Expected/TestableIO.System.IO.Abstractions.Wrappers_net6.0.txt#2025-04-22_snippet_27\n\nLANGUAGE: C#\nCODE:\n```\n[System.Serializable]\npublic abstract class PathBase : System.IO.Abstractions.IFileSystemEntity, System.IO.Abstractions.IPath\n{\n    protected PathBase(System.IO.Abstractions.IFileSystem fileSystem) { }\n    public abstract char AltDirectorySeparatorChar { get; }\n    public abstract char DirectorySeparatorChar { get; }\n    public System.IO.Abstractions.IFileSystem FileSystem { get; }\n    [System.Obsolete(\"Please use GetInvalidPathChars or GetInvalidFileNameChars instead.\")]\n    public abstract char[] InvalidPathChars { get; }\n    public abstract char PathSeparator { get; }\n    public abstract char VolumeSeparatorChar { get; }\n    public abstract string ChangeExtension(string path, string extension);\n    public abstract string Combine(params string[] paths);\n    public abstract string Combine(string path1, string path2);\n    public abstract string Combine(string path1, string path2, string path3);\n    public abstract string Combine(string path1, string path2, string path3, string path4);\n    public abstract bool EndsInDirectorySeparator(System.ReadOnlySpan<char> path);\n    public abstract bool EndsInDirectorySeparator(string path);\n    public abstract System.ReadOnlySpan<char> GetDirectoryName(System.ReadOnlySpan<char> path);\n    public abstract string GetDirectoryName(string path);\n    public abstract System.ReadOnlySpan<char> GetExtension(System.ReadOnlySpan<char> path);\n    public abstract string GetExtension(string path);\n    public abstract System.ReadOnlySpan<char> GetFileName(System.ReadOnlySpan<char> path);\n    public abstract string GetFileName(string path);\n    public abstract System.ReadOnlySpan<char> GetFileNameWithoutExtension(System.ReadOnlySpan<char> path);\n    public abstract string GetFileNameWithoutExtension(string path);\n    public abstract string GetFullPath(string path);\n    public abstract string GetFullPath(string path, string basePath);\n    public abstract char[] GetInvalidFileNameChars();\n    public abstract char[] GetInvalidPathChars();\n    public abstract System.ReadOnlySpan<char> GetPathRoot(System.ReadOnlySpan<char> path);\n    public abstract string GetPathRoot(string path);\n    public abstract string GetRandomFileName();\n    public abstract string GetRelativePath(string relativeTo, string path);\n    public abstract string GetTempFileName();\n    public abstract string GetTempPath();\n    public abstract bool HasExtension(System.ReadOnlySpan<char> path);\n    public abstract bool HasExtension(string path);\n    public abstract bool IsPathFullyQualified(System.ReadOnlySpan<char> path);\n    public abstract bool IsPathFullyQualified(string path);\n    public abstract bool IsPathRooted(System.ReadOnlySpan<char> path);\n    public abstract bool IsPathRooted(string path);\n    public abstract string Join(params string[] paths);\n    public abstract string Join(System.ReadOnlySpan<char> path1, System.ReadOnlySpan<char> path2);\n    public abstract string Join(string path1, string path2);\n    public abstract string Join(System.ReadOnlySpan<char> path1, System.ReadOnlySpan<char> path2, System.ReadOnlySpan<char> path3);\n    public abstract string Join(string path1, string path2, string path3);\n    public abstract string Join(System.ReadOnlySpan<char> path1, System.ReadOnlySpan<char> path2, System.ReadOnlySpan<char> path3, System.ReadOnlySpan<char> path4);\n    public abstract string Join(string path1, string path2, string path3, string path4);\n    public abstract System.ReadOnlySpan<char> TrimEndingDirectorySeparator(System.ReadOnlySpan<char> path);\n    public abstract string TrimEndingDirectorySeparator(string path);\n    public abstract bool TryJoin(System.ReadOnlySpan<char> path1, System.ReadOnlySpan<char> path2, System.Span<char> destination, out int charsWritten);\n    public abstract bool TryJoin(System.ReadOnlySpan<char> path1, System.ReadOnlySpan<char> path2, System.ReadOnlySpan<char> path3, System.Span<char> destination, out int charsWritten);\n}\n```\n\n----------------------------------------\n\nTITLE: Defining MockFileSystem Class Properties in C#\nDESCRIPTION: This snippet shows the property definitions for the MockFileSystem class, which implements various interfaces from System.IO.Abstractions to mock file system operations.\nSOURCE: https://github.com/testableio/system.io.abstractions/blob/main/tests/TestableIO.System.IO.Abstractions.Api.Tests/Expected/TestableIO.System.IO.Abstractions.TestingHelpers_net9.0.txt#2025-04-22_snippet_19\n\nLANGUAGE: C#\nCODE:\n```\npublic override System.IO.Abstractions.IDriveInfoFactory DriveInfo { get; }\npublic override System.IO.Abstractions.IFile File { get; }\npublic override System.IO.Abstractions.IFileInfoFactory FileInfo { get; }\npublic override System.IO.Abstractions.IFileStreamFactory FileStream { get; }\npublic System.IO.Abstractions.IFileSystem FileSystem { get; }\npublic override System.IO.Abstractions.IFileSystemWatcherFactory FileSystemWatcher { get; }\npublic override System.IO.Abstractions.IFileVersionInfoFactory FileVersionInfo { get; }\npublic override System.IO.Abstractions.IPath Path { get; }\npublic System.IO.Abstractions.TestingHelpers.PathVerifier PathVerifier { get; }\npublic System.IO.Abstractions.TestingHelpers.StringOperations StringOperations { get; }\n```\n\n----------------------------------------\n\nTITLE: Implementing FileInfo Replace Methods in C#\nDESCRIPTION: This snippet shows the implementation of Replace methods for the IFileInfo interface. It allows replacing a file with optional backup and metadata error handling.\nSOURCE: https://github.com/testableio/system.io.abstractions/blob/main/tests/TestableIO.System.IO.Abstractions.Api.Tests/Expected/TestableIO.System.IO.Abstractions.Wrappers_net472.txt#2025-04-22_snippet_14\n\nLANGUAGE: C#\nCODE:\n```\npublic override System.IO.Abstractions.IFileInfo Replace(string destinationFileName, string destinationBackupFileName) { }\npublic override System.IO.Abstractions.IFileInfo Replace(string destinationFileName, string destinationBackupFileName, bool ignoreMetadataErrors) { }\n```\n\n----------------------------------------\n\nTITLE: Implementing MockFileVersionInfoFactory Class in C#\nDESCRIPTION: A serializable factory class for creating mock file version info objects. It implements IFileSystemEntity and IFileVersionInfoFactory interfaces to provide methods for getting version information from files.\nSOURCE: https://github.com/testableio/system.io.abstractions/blob/main/tests/TestableIO.System.IO.Abstractions.Api.Tests/Expected/TestableIO.System.IO.Abstractions.TestingHelpers_net472.txt#2025-04-22_snippet_16\n\nLANGUAGE: C#\nCODE:\n```\n[System.Serializable]\npublic class MockFileVersionInfoFactory : System.IO.Abstractions.IFileSystemEntity, System.IO.Abstractions.IFileVersionInfoFactory\n{\n    public MockFileVersionInfoFactory(System.IO.Abstractions.TestingHelpers.IMockFileDataAccessor mockFileSystem) { }\n    public System.IO.Abstractions.IFileSystem FileSystem { get; }\n    public System.IO.Abstractions.IFileVersionInfo GetVersionInfo(string fileName) { }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Abstract File Writing Methods in C#\nDESCRIPTION: This snippet defines abstract methods for writing lines and text to files, including both synchronous and asynchronous versions. It covers various overloads with different parameter combinations.\nSOURCE: https://github.com/testableio/system.io.abstractions/blob/main/tests/TestableIO.System.IO.Abstractions.Api.Tests/Expected/TestableIO.System.IO.Abstractions.Wrappers_netstandard2.1.txt#2025-04-22_snippet_10\n\nLANGUAGE: C#\nCODE:\n```\npublic abstract void WriteAllLines(string path, System.Collections.Generic.IEnumerable<string> contents);\npublic abstract void WriteAllLines(string path, string[] contents);\npublic abstract void WriteAllLines(string path, System.Collections.Generic.IEnumerable<string> contents, System.Text.Encoding encoding);\npublic abstract void WriteAllLines(string path, string[] contents, System.Text.Encoding encoding);\npublic abstract System.Threading.Tasks.Task WriteAllLinesAsync(string path, System.Collections.Generic.IEnumerable<string> contents, System.Threading.CancellationToken cancellationToken = default);\npublic abstract System.Threading.Tasks.Task WriteAllLinesAsync(string path, System.Collections.Generic.IEnumerable<string> contents, System.Text.Encoding encoding, System.Threading.CancellationToken cancellationToken = default);\npublic abstract void WriteAllText(string path, string contents);\npublic abstract void WriteAllText(string path, string contents, System.Text.Encoding encoding);\npublic abstract System.Threading.Tasks.Task WriteAllTextAsync(string path, string contents, System.Threading.CancellationToken cancellationToken = default);\npublic abstract System.Threading.Tasks.Task WriteAllTextAsync(string path, string contents, System.Text.Encoding encoding, System.Threading.CancellationToken cancellationToken = default);\n```\n\n----------------------------------------\n\nTITLE: Implementing MockFileVersionInfoFactory Class in C#\nDESCRIPTION: This class implements the IFileVersionInfoFactory interface to provide mock file version information factory functionality for testing purposes.\nSOURCE: https://github.com/testableio/system.io.abstractions/blob/main/tests/TestableIO.System.IO.Abstractions.Api.Tests/Expected/TestableIO.System.IO.Abstractions.TestingHelpers_net9.0.txt#2025-04-22_snippet_24\n\nLANGUAGE: C#\nCODE:\n```\n[System.Serializable]\npublic class MockFileVersionInfoFactory : System.IO.Abstractions.IFileSystemEntity, System.IO.Abstractions.IFileVersionInfoFactory\n{\n    public MockFileVersionInfoFactory(System.IO.Abstractions.TestingHelpers.IMockFileDataAccessor mockFileSystem) { }\n    public System.IO.Abstractions.IFileSystem FileSystem { get; }\n    public System.IO.Abstractions.IFileVersionInfo GetVersionInfo(string fileName) { }\n}\n```\n\n----------------------------------------\n\nTITLE: File System Base Class Implementation\nDESCRIPTION: Abstract base class defining core file system operations and properties. Provides foundation for concrete file system implementations.\nSOURCE: https://github.com/testableio/system.io.abstractions/blob/main/tests/TestableIO.System.IO.Abstractions.Api.Tests/Expected/TestableIO.System.IO.Abstractions.Wrappers_net8.0.txt#2025-04-22_snippet_15\n\nLANGUAGE: C#\nCODE:\n```\n[System.Serializable]\npublic abstract class FileSystemBase : System.IO.Abstractions.IFileSystem\n{\n    protected FileSystemBase() { }\n    public abstract System.IO.Abstractions.IDirectory Directory { get; }\n    public abstract System.IO.Abstractions.IDirectoryInfoFactory DirectoryInfo { get; }\n    public abstract System.IO.Abstractions.IDriveInfoFactory DriveInfo { get; }\n    public abstract System.IO.Abstractions.IFile File { get; }\n    public abstract System.IO.Abstractions.IFileInfoFactory FileInfo { get; }\n    public abstract System.IO.Abstractions.IFileStreamFactory FileStream { get; }\n    public abstract System.IO.Abstractions.IFileSystemWatcherFactory FileSystemWatcher { get; }\n    public abstract System.IO.Abstractions.IFileVersionInfoFactory FileVersionInfo { get; }\n    public abstract System.IO.Abstractions.IPath Path { get; }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing File and Directory Operations in MockFileSystem Class\nDESCRIPTION: This snippet shows the method implementations for file and directory operations in the MockFileSystem class, including adding, moving, and removing files and directories.\nSOURCE: https://github.com/testableio/system.io.abstractions/blob/main/tests/TestableIO.System.IO.Abstractions.Api.Tests/Expected/TestableIO.System.IO.Abstractions.TestingHelpers_net9.0.txt#2025-04-22_snippet_20\n\nLANGUAGE: C#\nCODE:\n```\npublic void AddDirectory(System.IO.Abstractions.IDirectoryInfo path) { }\npublic void AddDirectory(string path) { }\npublic void AddDrive(string name, System.IO.Abstractions.TestingHelpers.MockDriveData mockDrive) { }\npublic void AddEmptyFile(System.IO.Abstractions.IFileInfo path) { }\npublic void AddEmptyFile(string path) { }\npublic void AddFile(System.IO.Abstractions.IFileInfo path, System.IO.Abstractions.TestingHelpers.MockFileData data, bool verifyAccess = true) { }\npublic void AddFile(string path, System.IO.Abstractions.TestingHelpers.MockFileData mockFile, bool verifyAccess = true) { }\npublic void AddFileFromEmbeddedResource(string path, System.Reflection.Assembly resourceAssembly, string embeddedResourcePath) { }\npublic void AddFilesFromEmbeddedNamespace(string path, System.Reflection.Assembly resourceAssembly, string embeddedResourcePath) { }\npublic System.IO.Abstractions.TestingHelpers.MockFileData AdjustTimes(System.IO.Abstractions.TestingHelpers.MockFileData fileData, System.IO.Abstractions.TestingHelpers.TimeAdjustments timeAdjustments) { }\npublic bool FileExists(string path) { }\npublic System.IO.Abstractions.TestingHelpers.MockDriveData GetDrive(string name) { }\npublic System.IO.Abstractions.TestingHelpers.MockFileData GetFile(System.IO.Abstractions.IFileInfo path) { }\npublic System.IO.Abstractions.TestingHelpers.MockFileData GetFile(string path) { }\npublic System.IO.Abstractions.TestingHelpers.MockFileSystem MockTime(System.Func<System.DateTime> dateTimeProvider) { }\npublic void MoveDirectory(string sourcePath, string destPath) { }\npublic void RemoveFile(string path, bool verifyAccess = true) { }\n```\n\n----------------------------------------\n\nTITLE: Implementing MockUnixSupport Static Class in C#\nDESCRIPTION: This static class provides utility methods for platform-specific operations, including checking for Unix or Windows platforms and normalizing paths.\nSOURCE: https://github.com/testableio/system.io.abstractions/blob/main/tests/TestableIO.System.IO.Abstractions.Api.Tests/Expected/TestableIO.System.IO.Abstractions.TestingHelpers_net9.0.txt#2025-04-22_snippet_26\n\nLANGUAGE: C#\nCODE:\n```\npublic static class MockUnixSupport\n{\n    public static bool IsUnixPlatform() { }\n    public static bool IsWindowsPlatform() { }\n    public static string Path(string path) { }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing MockPath in C#\nDESCRIPTION: This class extends PathWrapper to provide mock implementations of path-related operations. It includes constructors and overridden methods for path manipulation.\nSOURCE: https://github.com/testableio/system.io.abstractions/blob/main/tests/TestableIO.System.IO.Abstractions.Api.Tests/Expected/TestableIO.System.IO.Abstractions.TestingHelpers_net6.0.txt#2025-04-22_snippet_27\n\nLANGUAGE: C#\nCODE:\n```\n[System.Serializable]\npublic class MockPath : System.IO.Abstractions.PathWrapper\n{\n    public MockPath(System.IO.Abstractions.TestingHelpers.IMockFileDataAccessor mockFileDataAccessor) { }\n    public MockPath(System.IO.Abstractions.TestingHelpers.IMockFileDataAccessor mockFileDataAccessor, string defaultTempDirectory) { }\n    public override string GetFullPath(string path) { }\n    public override string GetRelativePath(string relativeTo, string path) { }\n    public override string GetTempFileName() { }\n    public override string GetTempPath() { }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing DriveInfoWrapper for System.IO.Abstractions in C#\nDESCRIPTION: DriveInfoWrapper is a serializable C# class inheriting from DriveInfoBase, designed to wrap System.IO.DriveInfo in the abstractions API. It provides concrete override implementations for drive properties and supports ToString for diagnostic or display purposes. Instantiation requires an IFileSystem and a DriveInfo instance.\nSOURCE: https://github.com/testableio/system.io.abstractions/blob/main/tests/TestableIO.System.IO.Abstractions.Api.Tests/Expected/TestableIO.System.IO.Abstractions.Wrappers_netstandard2.1.txt#2025-04-22_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\n[System.Serializable]\npublic class DriveInfoWrapper : System.IO.Abstractions.DriveInfoBase\n{\n    public DriveInfoWrapper(System.IO.Abstractions.IFileSystem fileSystem, System.IO.DriveInfo instance) { }\n    public override long AvailableFreeSpace { get; }\n    public override string DriveFormat { get; }\n    public override System.IO.DriveType DriveType { get; }\n    public override bool IsReady { get; }\n    public override string Name { get; }\n    public override System.IO.Abstractions.IDirectoryInfo RootDirectory { get; }\n    public override long TotalFreeSpace { get; }\n    public override long TotalSize { get; }\n    public override string VolumeLabel { get; set; }\n    public override string ToString() { }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing FileVersionInfoBase Abstract Class in C#\nDESCRIPTION: Abstract base class that implements the IFileVersionInfo interface. Provides access to file version properties including product version, file description, and company information.\nSOURCE: https://github.com/testableio/system.io.abstractions/blob/main/tests/TestableIO.System.IO.Abstractions.Api.Tests/Expected/TestableIO.System.IO.Abstractions.Wrappers_netstandard2.0.txt#2025-04-22_snippet_21\n\nLANGUAGE: C#\nCODE:\n```\n[System.Serializable]\npublic abstract class FileVersionInfoBase : System.IO.Abstractions.IFileVersionInfo\n{\n    protected FileVersionInfoBase() { }\n    public abstract string Comments { get; }\n    public abstract string CompanyName { get; }\n    public abstract int FileBuildPart { get; }\n    public abstract string FileDescription { get; }\n    public abstract int FileMajorPart { get; }\n    public abstract int FileMinorPart { get; }\n    public abstract string FileName { get; }\n    public abstract int FilePrivatePart { get; }\n    public abstract string FileVersion { get; }\n    public abstract string InternalName { get; }\n    public abstract bool IsDebug { get; }\n    public abstract bool IsPatched { get; }\n    public abstract bool IsPreRelease { get; }\n    public abstract bool IsPrivateBuild { get; }\n    public abstract bool IsSpecialBuild { get; }\n    public abstract string Language { get; }\n    public abstract string LegalCopyright { get; }\n    public abstract string LegalTrademarks { get; }\n    public abstract string OriginalFilename { get; }\n    public abstract string PrivateBuild { get; }\n    public abstract int ProductBuildPart { get; }\n    public abstract int ProductMajorPart { get; }\n    public abstract int ProductMinorPart { get; }\n    public abstract string ProductName { get; }\n    public abstract int ProductPrivatePart { get; }\n    public abstract string ProductVersion { get; }\n    public abstract string SpecialBuild { get; }\n    public abstract string ToString();\n    public static System.IO.Abstractions.FileVersionInfoBase op_Implicit(System.Diagnostics.FileVersionInfo fileVersionInfo) { }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing DirectoryInfoAclExtensions for IDirectoryInfo in C#\nDESCRIPTION: Extends IDirectoryInfo interface with methods for creating directories with security, getting and setting access control for directory information.\nSOURCE: https://github.com/testableio/system.io.abstractions/blob/main/tests/TestableIO.System.IO.Abstractions.Api.Tests/Expected/TestableIO.System.IO.Abstractions.Wrappers_netstandard2.0.txt#2025-04-22_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\npublic static class DirectoryInfoAclExtensions\n{\n    public static void Create(this System.IO.Abstractions.IDirectoryInfo directoryInfo, System.Security.AccessControl.DirectorySecurity directorySecurity) { }\n    public static System.Security.AccessControl.DirectorySecurity GetAccessControl(this System.IO.Abstractions.IDirectoryInfo directoryInfo) { }\n    public static System.Security.AccessControl.DirectorySecurity GetAccessControl(this System.IO.Abstractions.IDirectoryInfo directoryInfo, System.Security.AccessControl.AccessControlSections includeSections) { }\n    public static void SetAccessControl(this System.IO.Abstractions.IDirectoryInfo directoryInfo, System.Security.AccessControl.DirectorySecurity directorySecurity) { }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining FileSystemWatcherBase Abstract Class in C#\nDESCRIPTION: Abstract base class for file system watchers that monitor directory and file changes. It defines events and methods for handling file system change notifications.\nSOURCE: https://github.com/testableio/system.io.abstractions/blob/main/tests/TestableIO.System.IO.Abstractions.Api.Tests/Expected/TestableIO.System.IO.Abstractions.Wrappers_net6.0.txt#2025-04-22_snippet_21\n\nLANGUAGE: C#\nCODE:\n```\n[System.Serializable]\npublic abstract class FileSystemWatcherBase : System.IDisposable, System.IO.Abstractions.IFileSystemEntity, System.IO.Abstractions.IFileSystemWatcher\n{\n    protected FileSystemWatcherBase() { }\n    public abstract System.ComponentModel.IContainer Container { get; }\n    public abstract bool EnableRaisingEvents { get; set; }\n    public abstract System.IO.Abstractions.IFileSystem FileSystem { get; }\n    public abstract string Filter { get; set; }\n    public abstract System.Collections.ObjectModel.Collection<string> Filters { get; }\n    public abstract bool IncludeSubdirectories { get; set; }\n    public abstract int InternalBufferSize { get; set; }\n    public abstract System.IO.NotifyFilters NotifyFilter { get; set; }\n    public abstract string Path { get; set; }\n    public abstract System.ComponentModel.ISite Site { get; set; }\n    public abstract System.ComponentModel.ISynchronizeInvoke SynchronizingObject { get; set; }\n    public virtual event System.IO.FileSystemEventHandler Changed;\n    public virtual event System.IO.FileSystemEventHandler Created;\n    public virtual event System.IO.FileSystemEventHandler Deleted;\n    public virtual event System.IO.ErrorEventHandler Error;\n    public virtual event System.IO.RenamedEventHandler Renamed;\n    public abstract void BeginInit();\n    public void Dispose() { }\n    public virtual void Dispose(bool disposing) { }\n    public abstract void EndInit();\n    protected void OnChanged(object sender, System.IO.FileSystemEventArgs args) { }\n    protected void OnCreated(object sender, System.IO.FileSystemEventArgs args) { }\n    protected void OnDeleted(object sender, System.IO.FileSystemEventArgs args) { }\n    protected void OnError(object sender, System.IO.ErrorEventArgs args) { }\n    protected void OnRenamed(object sender, System.IO.RenamedEventArgs args) { }\n    public abstract System.IO.Abstractions.IWaitForChangedResult WaitForChanged(System.IO.WatcherChangeTypes changeType);\n    public abstract System.IO.Abstractions.IWaitForChangedResult WaitForChanged(System.IO.WatcherChangeTypes changeType, int timeout);\n    public static System.IO.Abstractions.FileSystemWatcherBase op_Implicit(System.IO.FileSystemWatcher watcher) { }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing PathVerifier in C#\nDESCRIPTION: Utility class for validating file paths in a mock file system. Provides methods to check for invalid path characters, verify path legality, and normalize drive names.\nSOURCE: https://github.com/testableio/system.io.abstractions/blob/main/tests/TestableIO.System.IO.Abstractions.Api.Tests/Expected/TestableIO.System.IO.Abstractions.TestingHelpers_net8.0.txt#2025-04-22_snippet_25\n\nLANGUAGE: C#\nCODE:\n```\n[System.Serializable]\npublic class PathVerifier\n{\n    public PathVerifier(System.IO.Abstractions.TestingHelpers.IMockFileDataAccessor mockFileDataAccessor) { }\n    public void CheckInvalidPathChars(string path, bool checkAdditional = false) { }\n    public bool HasIllegalCharacters(string path, bool checkAdditional) { }\n    public void IsLegalAbsoluteOrRelative(string path, string paramName) { }\n    public string NormalizeDriveName(string name) { }\n    public bool TryNormalizeDriveName(string name, out string result) { }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing MockPath Class in C#\nDESCRIPTION: A serializable class extending PathWrapper to provide mock path operations. It customizes path-related functionality for testing, including methods for getting full paths and temporary file names.\nSOURCE: https://github.com/testableio/system.io.abstractions/blob/main/tests/TestableIO.System.IO.Abstractions.Api.Tests/Expected/TestableIO.System.IO.Abstractions.TestingHelpers_net472.txt#2025-04-22_snippet_17\n\nLANGUAGE: C#\nCODE:\n```\n[System.Serializable]\npublic class MockPath : System.IO.Abstractions.PathWrapper\n{\n    public MockPath(System.IO.Abstractions.TestingHelpers.IMockFileDataAccessor mockFileDataAccessor) { }\n    public MockPath(System.IO.Abstractions.TestingHelpers.IMockFileDataAccessor mockFileDataAccessor, string defaultTempDirectory) { }\n    public override string GetFullPath(string path) { }\n    public override string GetTempFileName() { }\n    public override string GetTempPath() { }\n}\n```\n\n----------------------------------------\n\nTITLE: Abstract Directory Base Implementation\nDESCRIPTION: Abstract base class implementing IDirectory and IFileSystemEntity interfaces, providing core directory operation functionality.\nSOURCE: https://github.com/testableio/system.io.abstractions/blob/main/tests/TestableIO.System.IO.Abstractions.Api.Tests/Expected/TestableIO.System.IO.Abstractions.Wrappers_netstandard2.1.txt#2025-04-22_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\n[System.Serializable]\npublic abstract class DirectoryBase : System.IO.Abstractions.IDirectory, System.IO.Abstractions.IFileSystemEntity\n{\n    protected DirectoryBase(System.IO.Abstractions.IFileSystem fileSystem) { }\n    public System.IO.Abstractions.IFileSystem FileSystem { get; }\n    public abstract System.IO.Abstractions.IDirectoryInfo CreateDirectory(string path);\n    public abstract void Delete(string path);\n    public abstract void Delete(string path, bool recursive);\n    public abstract System.Collections.Generic.IEnumerable<string> EnumerateDirectories(string path);\n    public abstract System.Collections.Generic.IEnumerable<string> EnumerateDirectories(string path, string searchPattern);\n    public abstract System.Collections.Generic.IEnumerable<string> EnumerateDirectories(string path, string searchPattern, System.IO.EnumerationOptions enumerationOptions);\n    public abstract System.Collections.Generic.IEnumerable<string> EnumerateDirectories(string path, string searchPattern, System.IO.SearchOption searchOption);\n    // Additional abstract members omitted for brevity\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing FileVersionInfoWrapper in C#\nDESCRIPTION: A serializable wrapper class for System.Diagnostics.FileVersionInfo that implements System.IO.Abstractions.FileVersionInfoBase. It provides properties for various file version information.\nSOURCE: https://github.com/testableio/system.io.abstractions/blob/main/tests/TestableIO.System.IO.Abstractions.Api.Tests/Expected/TestableIO.System.IO.Abstractions.Wrappers_netstandard2.0.txt#2025-04-22_snippet_22\n\nLANGUAGE: C#\nCODE:\n```\n[System.Serializable]\npublic class FileVersionInfoWrapper : System.IO.Abstractions.FileVersionInfoBase\n{\n    public FileVersionInfoWrapper(System.Diagnostics.FileVersionInfo fileVersionInfo) { }\n    public override string Comments { get; }\n    public override string CompanyName { get; }\n    public override int FileBuildPart { get; }\n    public override string FileDescription { get; }\n    public override int FileMajorPart { get; }\n    public override int FileMinorPart { get; }\n    public override string FileName { get; }\n    public override int FilePrivatePart { get; }\n    public override string FileVersion { get; }\n    public override string InternalName { get; }\n    public override bool IsDebug { get; }\n    public override bool IsPatched { get; }\n    public override bool IsPreRelease { get; }\n    public override bool IsPrivateBuild { get; }\n    public override bool IsSpecialBuild { get; }\n    public override string Language { get; }\n    public override string LegalCopyright { get; }\n    public override string LegalTrademarks { get; }\n    public override string OriginalFilename { get; }\n    public override string PrivateBuild { get; }\n    public override int ProductBuildPart { get; }\n    public override int ProductMajorPart { get; }\n    public override int ProductMinorPart { get; }\n    public override string ProductName { get; }\n    public override int ProductPrivatePart { get; }\n    public override string ProductVersion { get; }\n    public override string SpecialBuild { get; }\n    public override string ToString() { }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Windows ACL Extension Methods for IDirectoryInfo in C#\nDESCRIPTION: Defines extension methods for the System.IO.Abstractions.IDirectoryInfo interface to manage directory access control lists (ACLs) specifically on Windows. It includes methods to create the directory represented by the `IDirectoryInfo` instance with specific security (`Create`), and to get (`GetAccessControl`) or set (`SetAccessControl`) its `DirectorySecurity`. These operations are marked with `SupportedOSPlatform(\"windows\")` attribute, restricting their use to Windows environments.\nSOURCE: https://github.com/testableio/system.io.abstractions/blob/main/tests/TestableIO.System.IO.Abstractions.Api.Tests/Expected/TestableIO.System.IO.Abstractions.Wrappers_net8.0.txt#2025-04-22_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nnamespace System.IO.Abstractions\n{\n    // ... DirectoryBase\n    public static class DirectoryInfoAclExtensions\n    {\n        [System.Runtime.Versioning.SupportedOSPlatform(\"windows\")]\n        public static void Create(this System.IO.Abstractions.IDirectoryInfo directoryInfo, System.Security.AccessControl.DirectorySecurity directorySecurity) { }\n        [System.Runtime.Versioning.SupportedOSPlatform(\"windows\")]\n        public static System.Security.AccessControl.DirectorySecurity GetAccessControl(this System.IO.Abstractions.IDirectoryInfo directoryInfo) { }\n        [System.Runtime.Versioning.SupportedOSPlatform(\"windows\")]\n        public static System.Security.AccessControl.DirectorySecurity GetAccessControl(this System.IO.Abstractions.IDirectoryInfo directoryInfo, System.Security.AccessControl.AccessControlSections includeSections) { }\n        [System.Runtime.Versioning.SupportedOSPlatform(\"windows\")]\n        public static void SetAccessControl(this System.IO.Abstractions.IDirectoryInfo directoryInfo, System.Security.AccessControl.DirectorySecurity directorySecurity) { }\n    }\n    // ... other classes\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing StringOperations Class for Case-Sensitive String Handling in C#\nDESCRIPTION: The StringOperations class provides methods for case-sensitive string operations. It includes functionality for comparison, searching, and case conversion of strings and characters.\nSOURCE: https://github.com/testableio/system.io.abstractions/blob/main/tests/TestableIO.System.IO.Abstractions.Api.Tests/Expected/TestableIO.System.IO.Abstractions.TestingHelpers_netstandard2.1.txt#2025-04-22_snippet_24\n\nLANGUAGE: C#\nCODE:\n```\n[System.Serializable]\npublic class StringOperations\n{\n    public StringOperations(bool caseSensitive) { }\n    public System.StringComparer Comparer { get; }\n    public bool Contains(string s, string substring) { }\n    public bool EndsWith(string s, string suffix) { }\n    public bool Equals(char x, char y) { }\n    public bool Equals(string x, string y) { }\n    public int IndexOf(string s, string substring) { }\n    public int IndexOf(string s, string substring, int startIndex) { }\n    public string Replace(string s, string oldValue, string newValue) { }\n    public bool StartsWith(string s, string prefix) { }\n    public char ToLower(char c) { }\n    public string ToLower(string s) { }\n    public char ToUpper(char c) { }\n    public string ToUpper(string s) { }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing MockUnixSupport in C#\nDESCRIPTION: This static class provides utility methods for platform detection and path normalization in Unix-like environments.\nSOURCE: https://github.com/testableio/system.io.abstractions/blob/main/tests/TestableIO.System.IO.Abstractions.Api.Tests/Expected/TestableIO.System.IO.Abstractions.TestingHelpers_net6.0.txt#2025-04-22_snippet_28\n\nLANGUAGE: C#\nCODE:\n```\npublic static class MockUnixSupport\n{\n    public static bool IsUnixPlatform() { }\n    public static bool IsWindowsPlatform() { }\n    public static string Path(string path) { }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing PathVerifier in C#\nDESCRIPTION: This class provides methods for verifying and normalizing file system paths. It includes checks for invalid characters and path normalization.\nSOURCE: https://github.com/testableio/system.io.abstractions/blob/main/tests/TestableIO.System.IO.Abstractions.Api.Tests/Expected/TestableIO.System.IO.Abstractions.TestingHelpers_net6.0.txt#2025-04-22_snippet_29\n\nLANGUAGE: C#\nCODE:\n```\n[System.Serializable]\npublic class PathVerifier\n{\n    public PathVerifier(System.IO.Abstractions.TestingHelpers.IMockFileDataAccessor mockFileDataAccessor) { }\n    public void CheckInvalidPathChars(string path, bool checkAdditional = false) { }\n    public bool HasIllegalCharacters(string path, bool checkAdditional) { }\n    public void IsLegalAbsoluteOrRelative(string path, string paramName) { }\n    public string NormalizeDriveName(string name) { }\n    public bool TryNormalizeDriveName(string name, out string result) { }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing MockPath Class in C#\nDESCRIPTION: This class implements a mock version of the Path class. It provides methods for getting full paths, relative paths, and temporary file names and paths.\nSOURCE: https://github.com/testableio/system.io.abstractions/blob/main/tests/TestableIO.System.IO.Abstractions.Api.Tests/Expected/TestableIO.System.IO.Abstractions.TestingHelpers_netstandard2.1.txt#2025-04-22_snippet_21\n\nLANGUAGE: C#\nCODE:\n```\npublic class MockPath : System.IO.Abstractions.PathWrapper\n{\n    public MockPath(System.IO.Abstractions.TestingHelpers.IMockFileDataAccessor mockFileDataAccessor) { }\n    public MockPath(System.IO.Abstractions.TestingHelpers.IMockFileDataAccessor mockFileDataAccessor, string defaultTempDirectory) { }\n    public override string GetFullPath(string path) { }\n    public override string GetRelativePath(string relativeTo, string path) { }\n    public override string GetTempFileName() { }\n    public override string GetTempPath() { }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing StringOperations Class in C#\nDESCRIPTION: A serializable utility class for case-sensitive or case-insensitive string operations. It provides methods for comparing strings, finding substrings, and converting case to support platform-specific file system behavior in tests.\nSOURCE: https://github.com/testableio/system.io.abstractions/blob/main/tests/TestableIO.System.IO.Abstractions.Api.Tests/Expected/TestableIO.System.IO.Abstractions.TestingHelpers_net472.txt#2025-04-22_snippet_20\n\nLANGUAGE: C#\nCODE:\n```\n[System.Serializable]\npublic class StringOperations\n{\n    public StringOperations(bool caseSensitive) { }\n    public System.StringComparer Comparer { get; }\n    public bool Contains(string s, string substring) { }\n    public bool EndsWith(string s, string suffix) { }\n    public bool Equals(char x, char y) { }\n    public bool Equals(string x, string y) { }\n    public int IndexOf(string s, string substring) { }\n    public int IndexOf(string s, string substring, int startIndex) { }\n    public string Replace(string s, string oldValue, string newValue) { }\n    public bool StartsWith(string s, string prefix) { }\n    public char ToLower(char c) { }\n    public string ToLower(string s) { }\n    public char ToUpper(char c) { }\n    public string ToUpper(string s) { }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining FileSystemInfoBase Abstract Class in C#\nDESCRIPTION: This abstract class provides a base implementation for file system information, including properties for attributes, creation time, and methods for deletion and refreshing.\nSOURCE: https://github.com/testableio/system.io.abstractions/blob/main/tests/TestableIO.System.IO.Abstractions.Api.Tests/Expected/TestableIO.System.IO.Abstractions.Wrappers_net472.txt#2025-04-22_snippet_18\n\nLANGUAGE: C#\nCODE:\n```\n[System.Serializable]\npublic abstract class FileSystemInfoBase : System.IO.Abstractions.IFileSystemInfo\n{\n    protected FileSystemInfoBase(System.IO.Abstractions.IFileSystem fileSystem) { }\n    public abstract System.IO.FileAttributes Attributes { get; set; }\n    public abstract System.DateTime CreationTime { get; set; }\n    public abstract System.DateTime CreationTimeUtc { get; set; }\n    public abstract bool Exists { get; }\n    public abstract string Extension { get; }\n    public System.IO.Abstractions.IFileSystem FileSystem { get; }\n    public abstract string FullName { get; }\n    public abstract System.DateTime LastAccessTime { get; set; }\n    public abstract System.DateTime LastAccessTimeUtc { get; set; }\n    public abstract System.DateTime LastWriteTime { get; set; }\n    public abstract System.DateTime LastWriteTimeUtc { get; set; }\n    public abstract string Name { get; }\n    public abstract void Delete();\n    public abstract void Refresh();\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing StringOperations in C#\nDESCRIPTION: Utility class that provides case-sensitive or case-insensitive string operations. Includes methods for string comparison, searching, replacement, and case conversion to support file system operations across different platforms.\nSOURCE: https://github.com/testableio/system.io.abstractions/blob/main/tests/TestableIO.System.IO.Abstractions.Api.Tests/Expected/TestableIO.System.IO.Abstractions.TestingHelpers_net8.0.txt#2025-04-22_snippet_26\n\nLANGUAGE: C#\nCODE:\n```\n[System.Serializable]\npublic class StringOperations\n{\n    public StringOperations(bool caseSensitive) { }\n    public System.StringComparer Comparer { get; }\n    public bool Contains(string s, string substring) { }\n    public bool EndsWith(string s, string suffix) { }\n    public bool Equals(char x, char y) { }\n    public bool Equals(string x, string y) { }\n    public int IndexOf(string s, string substring) { }\n    public int IndexOf(string s, string substring, int startIndex) { }\n    public string Replace(string s, string oldValue, string newValue) { }\n    public bool StartsWith(string s, string prefix) { }\n    public char ToLower(char c) { }\n    public string ToLower(string s) { }\n    public char ToUpper(char c) { }\n    public string ToUpper(string s) { }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining TimeAdjustments Enum in C#\nDESCRIPTION: A flags enum for specifying which file time attributes should be adjusted in mock file operations. It includes options for creation time, last access time, and last write time, with a combined 'All' value.\nSOURCE: https://github.com/testableio/system.io.abstractions/blob/main/tests/TestableIO.System.IO.Abstractions.Api.Tests/Expected/TestableIO.System.IO.Abstractions.TestingHelpers_net472.txt#2025-04-22_snippet_21\n\nLANGUAGE: C#\nCODE:\n```\n[System.Flags]\npublic enum TimeAdjustments\n{\n    None = 0,\n    CreationTime = 1,\n    LastAccessTime = 2,\n    LastWriteTime = 4,\n    All = -1,\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing PathVerifier Class in C#\nDESCRIPTION: A serializable utility class for verifying path validity. It provides methods to check for illegal characters, normalize drive names, and validate absolute or relative paths in a mock file system.\nSOURCE: https://github.com/testableio/system.io.abstractions/blob/main/tests/TestableIO.System.IO.Abstractions.Api.Tests/Expected/TestableIO.System.IO.Abstractions.TestingHelpers_net472.txt#2025-04-22_snippet_19\n\nLANGUAGE: C#\nCODE:\n```\n[System.Serializable]\npublic class PathVerifier\n{\n    public PathVerifier(System.IO.Abstractions.TestingHelpers.IMockFileDataAccessor mockFileDataAccessor) { }\n    public void CheckInvalidPathChars(string path, bool checkAdditional = false) { }\n    public bool HasIllegalCharacters(string path, bool checkAdditional) { }\n    public void IsLegalAbsoluteOrRelative(string path, string paramName) { }\n    public string NormalizeDriveName(string name) { }\n    public bool TryNormalizeDriveName(string name, out string result) { }\n}\n```\n\n----------------------------------------\n\nTITLE: File System Info Base Implementation\nDESCRIPTION: Abstract base class for file system information objects. Provides common properties and methods for both file and directory information.\nSOURCE: https://github.com/testableio/system.io.abstractions/blob/main/tests/TestableIO.System.IO.Abstractions.Api.Tests/Expected/TestableIO.System.IO.Abstractions.Wrappers_net8.0.txt#2025-04-22_snippet_17\n\nLANGUAGE: C#\nCODE:\n```\n[System.Serializable]\npublic abstract class FileSystemInfoBase : System.IO.Abstractions.IFileSystemInfo\n{\n    protected FileSystemInfoBase(System.IO.Abstractions.IFileSystem fileSystem) { }\n    public abstract System.IO.FileAttributes Attributes { get; set; }\n    public abstract System.DateTime CreationTime { get; set; }\n    public abstract System.DateTime CreationTimeUtc { get; set; }\n    public abstract bool Exists { get; }\n    public abstract string Extension { get; }\n    public System.IO.Abstractions.IFileSystem FileSystem { get; }\n    public abstract string FullName { get; }\n    public abstract System.DateTime LastAccessTime { get; set; }\n    public abstract System.DateTime LastAccessTimeUtc { get; set; }\n    public abstract System.DateTime LastWriteTime { get; set; }\n    public abstract System.DateTime LastWriteTimeUtc { get; set; }\n    public abstract string LinkTarget { get; }\n    public abstract string Name { get; }\n    [set: System.Runtime.Versioning.UnsupportedOSPlatform(\"windows\")]\n    public System.IO.UnixFileMode UnixFileMode { get; set; }\n    public abstract void CreateAsSymbolicLink(string pathToTarget);\n    public abstract void Delete();\n    public abstract void Refresh();\n    public abstract System.IO.Abstractions.IFileSystemInfo ResolveLinkTarget(bool returnFinalTarget);\n}\n```\n\n----------------------------------------\n\nTITLE: Defining FileSystem Operation Method Signatures in C#\nDESCRIPTION: Class method declarations for file operations including reading and writing files, manipulating file attributes, and handling file system metadata. These methods override the base implementation to provide mock functionality for testing.\nSOURCE: https://github.com/testableio/system.io.abstractions/blob/main/tests/TestableIO.System.IO.Abstractions.Api.Tests/Expected/TestableIO.System.IO.Abstractions.TestingHelpers_net6.0.txt#2025-04-22_snippet_15\n\nLANGUAGE: C#\nCODE:\n```\npublic override string[] ReadAllLines(string path, System.Text.Encoding encoding) { }\npublic override System.Threading.Tasks.Task<string[]> ReadAllLinesAsync(string path, System.Threading.CancellationToken cancellationToken = default) { }\npublic override System.Threading.Tasks.Task<string[]> ReadAllLinesAsync(string path, System.Text.Encoding encoding, System.Threading.CancellationToken cancellationToken = default) { }\npublic override string ReadAllText(string path) { }\npublic override string ReadAllText(string path, System.Text.Encoding encoding) { }\npublic override System.Threading.Tasks.Task<string> ReadAllTextAsync(string path, System.Threading.CancellationToken cancellationToken = default) { }\npublic override System.Threading.Tasks.Task<string> ReadAllTextAsync(string path, System.Text.Encoding encoding, System.Threading.CancellationToken cancellationToken = default) { }\npublic override System.Collections.Generic.IEnumerable<string> ReadLines(string path) { }\npublic override System.Collections.Generic.IEnumerable<string> ReadLines(string path, System.Text.Encoding encoding) { }\npublic override void Replace(string sourceFileName, string destinationFileName, string destinationBackupFileName) { }\npublic override void Replace(string sourceFileName, string destinationFileName, string destinationBackupFileName, bool ignoreMetadataErrors) { }\npublic override System.IO.Abstractions.IFileSystemInfo ResolveLinkTarget(string linkPath, bool returnFinalTarget) { }\npublic override void SetAttributes(string path, System.IO.FileAttributes fileAttributes) { }\npublic override void SetCreationTime(string path, System.DateTime creationTime) { }\npublic override void SetCreationTimeUtc(string path, System.DateTime creationTimeUtc) { }\npublic override void SetLastAccessTime(string path, System.DateTime lastAccessTime) { }\npublic override void SetLastAccessTimeUtc(string path, System.DateTime lastAccessTimeUtc) { }\npublic override void SetLastWriteTime(string path, System.DateTime lastWriteTime) { }\npublic override void SetLastWriteTimeUtc(string path, System.DateTime lastWriteTimeUtc) { }\npublic override void WriteAllBytes(string path, byte[] bytes) { }\npublic override System.Threading.Tasks.Task WriteAllBytesAsync(string path, byte[] bytes, System.Threading.CancellationToken cancellationToken = default) { }\npublic override void WriteAllLines(string path, System.Collections.Generic.IEnumerable<string> contents) { }\npublic override void WriteAllLines(string path, string[] contents) { }\npublic override void WriteAllLines(string path, System.Collections.Generic.IEnumerable<string> contents, System.Text.Encoding encoding) { }\npublic override void WriteAllLines(string path, string[] contents, System.Text.Encoding encoding) { }\npublic override System.Threading.Tasks.Task WriteAllLinesAsync(string path, System.Collections.Generic.IEnumerable<string> contents, System.Threading.CancellationToken cancellationToken = default) { }\npublic override System.Threading.Tasks.Task WriteAllLinesAsync(string path, System.Collections.Generic.IEnumerable<string> contents, System.Text.Encoding encoding, System.Threading.CancellationToken cancellationToken = default) { }\npublic override void WriteAllText(string path, string contents) { }\npublic override void WriteAllText(string path, string contents, System.Text.Encoding encoding) { }\npublic override System.Threading.Tasks.Task WriteAllTextAsync(string path, string contents, System.Threading.CancellationToken cancellationToken = default) { }\npublic override System.Threading.Tasks.Task WriteAllTextAsync(string path, string contents, System.Text.Encoding encoding, System.Threading.CancellationToken cancellationToken = default) { }\n```\n\n----------------------------------------\n\nTITLE: Defining MockFileSystemOptions Class in C#\nDESCRIPTION: This snippet defines the MockFileSystemOptions class, which provides configuration options for the mock file system, such as creating a default temp directory and setting the current directory.\nSOURCE: https://github.com/testableio/system.io.abstractions/blob/main/tests/TestableIO.System.IO.Abstractions.Api.Tests/Expected/TestableIO.System.IO.Abstractions.TestingHelpers_net9.0.txt#2025-04-22_snippet_21\n\nLANGUAGE: C#\nCODE:\n```\npublic class MockFileSystemOptions\n{\n    public MockFileSystemOptions() { }\n    public bool CreateDefaultTempDir { get; init; }\n    public string CurrentDirectory { get; init; }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing StringOperations Class in C#\nDESCRIPTION: This class provides string manipulation operations with optional case sensitivity, including methods for comparison, searching, and character conversion.\nSOURCE: https://github.com/testableio/system.io.abstractions/blob/main/tests/TestableIO.System.IO.Abstractions.Api.Tests/Expected/TestableIO.System.IO.Abstractions.TestingHelpers_net9.0.txt#2025-04-22_snippet_28\n\nLANGUAGE: C#\nCODE:\n```\n[System.Serializable]\npublic class StringOperations\n{\n    public StringOperations(bool caseSensitive) { }\n    public System.StringComparer Comparer { get; }\n    public bool Contains(string s, string substring) { }\n    public bool EndsWith(string s, string suffix) { }\n    public bool Equals(char x, char y) { }\n    public bool Equals(string x, string y) { }\n    public int IndexOf(string s, string substring) { }\n    public int IndexOf(string s, string substring, int startIndex) { }\n    public string Replace(string s, string oldValue, string newValue) { }\n    public bool StartsWith(string s, string prefix) { }\n    public char ToLower(char c) { }\n    public string ToLower(string s) { }\n    public char ToUpper(char c) { }\n    public string ToUpper(string s) { }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing MockFileSystemOptions Class in C#\nDESCRIPTION: Configuration options for the MockFileSystem. Allows setting initial configuration like current directory and whether to create a default temp directory.\nSOURCE: https://github.com/testableio/system.io.abstractions/blob/main/tests/TestableIO.System.IO.Abstractions.Api.Tests/Expected/TestableIO.System.IO.Abstractions.TestingHelpers_net6.0.txt#2025-04-22_snippet_23\n\nLANGUAGE: C#\nCODE:\n```\npublic class MockFileSystemOptions\n{\n    public MockFileSystemOptions() { }\n    public bool CreateDefaultTempDir { get; init; }\n    public string CurrentDirectory { get; init; }\n}\n```\n\n----------------------------------------\n\nTITLE: Windows Access Control Retrieval in C#\nDESCRIPTION: Methods to obtain access control information of a file system object. These methods are platform-specific and apply to Windows operating systems within a testing or mock environment.\nSOURCE: https://github.com/testableio/system.io.abstractions/blob/main/tests/TestableIO.System.IO.Abstractions.Api.Tests/Expected/TestableIO.System.IO.Abstractions.TestingHelpers_net6.0.txt#2025-04-22_snippet_6\n\nLANGUAGE: C#\nCODE:\n```\n[System.Runtime.Versioning.SupportedOSPlatform(\"windows\")]\npublic object GetAccessControl() { }\n```\n\nLANGUAGE: C#\nCODE:\n```\n[System.Runtime.Versioning.SupportedOSPlatform(\"windows\")]\npublic object GetAccessControl(System.IO.Abstractions.IFileSystemAclSupport.AccessControlSections includeSections) { }\n```\n\n----------------------------------------\n\nTITLE: Implementing PathWrapper in C#\nDESCRIPTION: A concrete implementation of PathBase that wraps path operations. It provides methods for manipulating file and directory paths, including combining paths, getting file names, and checking path validity.\nSOURCE: https://github.com/testableio/system.io.abstractions/blob/main/tests/TestableIO.System.IO.Abstractions.Api.Tests/Expected/TestableIO.System.IO.Abstractions.Wrappers_netstandard2.0.txt#2025-04-22_snippet_25\n\nLANGUAGE: C#\nCODE:\n```\n[System.Serializable]\npublic class PathWrapper : System.IO.Abstractions.PathBase\n{\n    public PathWrapper(System.IO.Abstractions.IFileSystem fileSystem) { }\n    public override char AltDirectorySeparatorChar { get; }\n    public override char DirectorySeparatorChar { get; }\n    [System.Obsolete(\"Please use GetInvalidPathChars or GetInvalidFileNameChars instead.\")]\n    public override char[] InvalidPathChars { get; }\n    public override char PathSeparator { get; }\n    public override char VolumeSeparatorChar { get; }\n    public override string ChangeExtension(string path, string extension) { }\n    public override string Combine(params string[] paths) { }\n    public override string Combine(string path1, string path2) { }\n    public override string Combine(string path1, string path2, string path3) { }\n    public override string Combine(string path1, string path2, string path3, string path4) { }\n    public override string GetDirectoryName(string path) { }\n    public override string GetExtension(string path) { }\n    public override string GetFileName(string path) { }\n    public override string GetFileNameWithoutExtension(string path) { }\n    public override string GetFullPath(string path) { }\n    public override char[] GetInvalidFileNameChars() { }\n    public override char[] GetInvalidPathChars() { }\n}\n```\n\n----------------------------------------\n\nTITLE: Path-Related Method Overrides in C#\nDESCRIPTION: A collection of method signatures that override path-related operations from a base class. These methods handle operations like getting path roots, random file names, temporary paths, and checking path characteristics.\nSOURCE: https://github.com/testableio/system.io.abstractions/blob/main/tests/TestableIO.System.IO.Abstractions.Api.Tests/Expected/TestableIO.System.IO.Abstractions.Wrappers_netstandard2.0.txt#2025-04-22_snippet_26\n\nLANGUAGE: C#\nCODE:\n```\npublic override string GetPathRoot(string path) { }\npublic override string GetRandomFileName() { }\npublic override string GetTempFileName() { }\npublic override string GetTempPath() { }\npublic override bool HasExtension(string path) { }\npublic override bool IsPathRooted(string path) { }\n```\n\n----------------------------------------\n\nTITLE: Defining MockFileSystemOptions Class in C#\nDESCRIPTION: Options class for configuring a mock file system with properties for default temporary directory creation and setting the current directory.\nSOURCE: https://github.com/testableio/system.io.abstractions/blob/main/tests/TestableIO.System.IO.Abstractions.Api.Tests/Expected/TestableIO.System.IO.Abstractions.TestingHelpers_net8.0.txt#2025-04-22_snippet_19\n\nLANGUAGE: C#\nCODE:\n```\npublic class MockFileSystemOptions\n{\n    public MockFileSystemOptions() { }\n    public bool CreateDefaultTempDir { get; init; }\n    public string CurrentDirectory { get; init; }\n}\n```\n\n----------------------------------------\n\nTITLE: DriveInfo Base Class Implementation in C#\nDESCRIPTION: Abstract base class for drive information access providing properties for drive characteristics like available space, format, and type. Includes Windows-specific volume label support.\nSOURCE: https://github.com/testableio/system.io.abstractions/blob/main/tests/TestableIO.System.IO.Abstractions.Api.Tests/Expected/TestableIO.System.IO.Abstractions.Wrappers_net8.0.txt#2025-04-22_snippet_9\n\nLANGUAGE: C#\nCODE:\n```\n[System.Serializable]\npublic abstract class DriveInfoBase : System.IO.Abstractions.IDriveInfo, System.IO.Abstractions.IFileSystemEntity\n{\n    protected DriveInfoBase(System.IO.Abstractions.IFileSystem fileSystem) { }\n    public abstract long AvailableFreeSpace { get; }\n    public abstract string DriveFormat { get; }\n    public abstract System.IO.DriveType DriveType { get; }\n    public System.IO.Abstractions.IFileSystem FileSystem { get; }\n    public abstract bool IsReady { get; }\n    public abstract string Name { get; }\n    public abstract System.IO.Abstractions.IDirectoryInfo RootDirectory { get; }\n    public abstract long TotalFreeSpace { get; }\n    public abstract long TotalSize { get; }\n    public abstract string VolumeLabel { get; set; }\n    public static System.IO.Abstractions.DriveInfoBase op_Implicit(System.IO.DriveInfo driveInfo) { }\n}\n```\n\n----------------------------------------\n\nTITLE: True Method Implementations for Mock File Operations in C#\nDESCRIPTION: This selection of methods performs various file operations like moving, refreshing, resolving link targets, and managing access control in a mock file system environment, employing abstractions from System.IO.Abstractions.\nSOURCE: https://github.com/testableio/system.io.abstractions/blob/main/tests/TestableIO.System.IO.Abstractions.Api.Tests/Expected/TestableIO.System.IO.Abstractions.TestingHelpers_net6.0.txt#2025-04-22_snippet_9\n\nLANGUAGE: C#\nCODE:\n```\npublic override void MoveTo(string destDirName) { }\n```\n\nLANGUAGE: C#\nCODE:\n```\npublic override void Refresh() { }\n```\n\nLANGUAGE: C#\nCODE:\n```\npublic override System.IO.Abstractions.IFileSystemInfo ResolveLinkTarget(boolean returnFinalTarget) { }\n```\n\nLANGUAGE: C#\nCODE:\n```\n[System.Runtime.Versioning.SupportedOSPlatform(\"windows\")]\npublic void SetAccessControl(object value) { }\n```\n\n----------------------------------------\n\nTITLE: MockDirectoryInfoFactory Class Implementation in C#\nDESCRIPTION: Mock class that provides functionality to create and wrap directory information. It implements the IDirectoryInfoFactory and IFileSystemEntity interfaces for testing with System.IO.Abstractions.\nSOURCE: https://github.com/testableio/system.io.abstractions/blob/main/tests/TestableIO.System.IO.Abstractions.Api.Tests/Expected/TestableIO.System.IO.Abstractions.TestingHelpers_net6.0.txt#2025-04-22_snippet_10\n\nLANGUAGE: C#\nCODE:\n```\npublic class MockDirectoryInfoFactory : System.IO.Abstractions.IDirectoryInfoFactory, System.IO.Abstractions.IFileSystemEntity\n{\n    public MockDirectoryInfoFactory(System.IO.Abstractions.TestingHelpers.IMockFileDataAccessor mockFileSystem) { }\n    public System.IO.Abstractions.IFileSystem FileSystem { get; }\n    public System.IO.Abstractions.IDirectoryInfo New(string path) { }\n    public System.IO.Abstractions.IDirectoryInfo Wrap(System.IO.DirectoryInfo directoryInfo) { }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Abstract FileSystemBase Class in C#\nDESCRIPTION: This abstract class serves as a base for file system implementations. It defines abstract properties for various file system components like Directory, File, and Path.\nSOURCE: https://github.com/testableio/system.io.abstractions/blob/main/tests/TestableIO.System.IO.Abstractions.Api.Tests/Expected/TestableIO.System.IO.Abstractions.Wrappers_netstandard2.1.txt#2025-04-22_snippet_16\n\nLANGUAGE: C#\nCODE:\n```\n[System.Serializable]\npublic abstract class FileSystemBase : System.IO.Abstractions.IFileSystem\n{\n    protected FileSystemBase() { }\n    public abstract System.IO.Abstractions.IDirectory Directory { get; }\n    public abstract System.IO.Abstractions.IDirectoryInfoFactory DirectoryInfo { get; }\n    public abstract System.IO.Abstractions.IDriveInfoFactory DriveInfo { get; }\n    public abstract System.IO.Abstractions.IFile File { get; }\n    public abstract System.IO.Abstractions.IFileInfoFactory FileInfo { get; }\n    public abstract System.IO.Abstractions.IFileStreamFactory FileStream { get; }\n    public abstract System.IO.Abstractions.IFileSystemWatcherFactory FileSystemWatcher { get; }\n    public abstract System.IO.Abstractions.IFileVersionInfoFactory FileVersionInfo { get; }\n    public abstract System.IO.Abstractions.IPath Path { get; }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing File Stream Access Control Extensions in C#\nDESCRIPTION: This static class provides extension methods for getting and setting access control on file streams. It extends the FileSystemStream class with methods to manage file security.\nSOURCE: https://github.com/testableio/system.io.abstractions/blob/main/tests/TestableIO.System.IO.Abstractions.Api.Tests/Expected/TestableIO.System.IO.Abstractions.Wrappers_netstandard2.1.txt#2025-04-22_snippet_14\n\nLANGUAGE: C#\nCODE:\n```\npublic static class FileStreamAclExtensions\n{\n    public static System.Security.AccessControl.FileSecurity GetAccessControl(this System.IO.Abstractions.FileSystemStream fileStream) { }\n    public static void SetAccessControl(this System.IO.Abstractions.FileSystemStream fileStream, System.Security.AccessControl.FileSecurity fileSecurity) { }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing FileVersionInfoWrapper Class in C#\nDESCRIPTION: A concrete implementation of FileVersionInfoBase that wraps System.Diagnostics.FileVersionInfo to provide version information about physical files. This class implements properties for accessing file metadata such as version numbers, company information, and build details.\nSOURCE: https://github.com/testableio/system.io.abstractions/blob/main/tests/TestableIO.System.IO.Abstractions.Api.Tests/Expected/TestableIO.System.IO.Abstractions.Wrappers_net6.0.txt#2025-04-22_snippet_25\n\nLANGUAGE: C#\nCODE:\n```\n[System.Serializable]\npublic class FileVersionInfoWrapper : System.IO.Abstractions.FileVersionInfoBase\n{\n    public FileVersionInfoWrapper(System.Diagnostics.FileVersionInfo fileVersionInfo) { }\n    public override string Comments { get; }\n    public override string CompanyName { get; }\n    public override int FileBuildPart { get; }\n    public override string FileDescription { get; }\n    public override int FileMajorPart { get; }\n    public override int FileMinorPart { get; }\n    public override string FileName { get; }\n    public override int FilePrivatePart { get; }\n    public override string FileVersion { get; }\n    public override string InternalName { get; }\n    public override bool IsDebug { get; }\n    public override bool IsPatched { get; }\n    public override bool IsPreRelease { get; }\n    public override bool IsPrivateBuild { get; }\n    public override bool IsSpecialBuild { get; }\n    public override string Language { get; }\n    public override string LegalCopyright { get; }\n    public override string LegalTrademarks { get; }\n    public override string OriginalFilename { get; }\n    public override string PrivateBuild { get; }\n    public override int ProductBuildPart { get; }\n    public override int ProductMajorPart { get; }\n    public override int ProductMinorPart { get; }\n    public override string ProductName { get; }\n    public override int ProductPrivatePart { get; }\n    public override string ProductVersion { get; }\n    public override string SpecialBuild { get; }\n    public override string ToString() { }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Path Wrapper in C#\nDESCRIPTION: A concrete implementation of the PathBase class that provides path manipulation functionality. Implements all abstract members for handling file system paths.\nSOURCE: https://github.com/testableio/system.io.abstractions/blob/main/tests/TestableIO.System.IO.Abstractions.Api.Tests/Expected/TestableIO.System.IO.Abstractions.Wrappers_net472.txt#2025-04-22_snippet_26\n\nLANGUAGE: C#\nCODE:\n```\n[System.Serializable]\npublic class PathWrapper : System.IO.Abstractions.PathBase\n{\n    public PathWrapper(System.IO.Abstractions.IFileSystem fileSystem) { }\n    public override char AltDirectorySeparatorChar { get; }\n    public override char DirectorySeparatorChar { get; }\n    [System.Obsolete(\"Please use GetInvalidPathChars or GetInvalidFileNameChars instead.\")]\n    public override char[] InvalidPathChars { get; }\n    public override char PathSeparator { get; }\n    public override char VolumeSeparatorChar { get; }\n    public override string ChangeExtension(string path, string extension) { }\n    public override string Combine(params string[] paths) { }\n    public override string Combine(string path1, string path2) { }\n    public override string Combine(string path1, string path2, string path3) { }\n    public override string Combine(string path1, string path2, string path3, string path4) { }\n    public override string GetDirectoryName(string path) { }\n    public override string GetExtension(string path) { }\n    public override string GetFileName(string path) { }\n    public override string GetFileNameWithoutExtension(string path) { }\n    public override string GetFullPath(string path) { }\n    public override char[] GetInvalidFileNameChars() { }\n    public override char[] GetInvalidPathChars() { }\n```\n\n----------------------------------------\n\nTITLE: Directory ACL Extensions Implementation\nDESCRIPTION: Windows-specific extension methods for directory access control operations\nSOURCE: https://github.com/testableio/system.io.abstractions/blob/main/tests/TestableIO.System.IO.Abstractions.Api.Tests/Expected/TestableIO.System.IO.Abstractions.Wrappers_net9.0.txt#2025-04-22_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\npublic static class DirectoryAclExtensions\n{\n    [System.Runtime.Versioning.SupportedOSPlatform(\"windows\")]\n    public static void CreateDirectory(this System.IO.Abstractions.IDirectory directory, string path, System.Security.AccessControl.DirectorySecurity directorySecurity) { }\n    [System.Runtime.Versioning.SupportedOSPlatform(\"windows\")]\n    public static System.Security.AccessControl.DirectorySecurity GetAccessControl(this System.IO.Abstractions.IDirectory directory, string path) { }\n    [System.Runtime.Versioning.SupportedOSPlatform(\"windows\")]\n    public static System.Security.AccessControl.DirectorySecurity GetAccessControl(this System.IO.Abstractions.IDirectory directory, string path, System.Security.AccessControl.AccessControlSections includeSections) { }\n    [System.Runtime.Versioning.SupportedOSPlatform(\"windows\")]\n    public static void SetAccessControl(this System.IO.Abstractions.IDirectory directory, string path, System.Security.AccessControl.DirectorySecurity directorySecurity) { }\n}\n```\n\n----------------------------------------\n\nTITLE: File Writing Operations in C#\nDESCRIPTION: Methods for writing text content to files with different encodings and asynchronous options. These methods are part of a file system abstraction that allows for testing file IO operations.\nSOURCE: https://github.com/testableio/system.io.abstractions/blob/main/tests/TestableIO.System.IO.Abstractions.Api.Tests/Expected/TestableIO.System.IO.Abstractions.Wrappers_net6.0.txt#2025-04-22_snippet_29\n\nLANGUAGE: C#\nCODE:\n```\npublic override System.Threading.Tasks.Task WriteAllLinesAsync(string path, System.Collections.Generic.IEnumerable<string> contents, System.Text.Encoding encoding, System.Threading.CancellationToken cancellationToken = default) { }\npublic override void WriteAllText(string path, string contents) { }\npublic override void WriteAllText(string path, string contents, System.Text.Encoding encoding) { }\npublic override System.Threading.Tasks.Task WriteAllTextAsync(string path, string contents, System.Threading.CancellationToken cancellationToken = default) { }\npublic override System.Threading.Tasks.Task WriteAllTextAsync(string path, string contents, System.Text.Encoding encoding, System.Threading.CancellationToken cancellationToken = default) { }\n```\n\n----------------------------------------\n\nTITLE: Implementing FileStream Access Control Methods in C#\nDESCRIPTION: This snippet defines extension methods for FileSystemStream to get and set access control. It provides a way to manage file security programmatically.\nSOURCE: https://github.com/testableio/system.io.abstractions/blob/main/tests/TestableIO.System.IO.Abstractions.Api.Tests/Expected/TestableIO.System.IO.Abstractions.Wrappers_net472.txt#2025-04-22_snippet_15\n\nLANGUAGE: C#\nCODE:\n```\npublic static class FileStreamAclExtensions\n{\n    public static System.Security.AccessControl.FileSecurity GetAccessControl(this System.IO.Abstractions.FileSystemStream fileStream) { }\n    public static void SetAccessControl(this System.IO.Abstractions.FileSystemStream fileStream, System.Security.AccessControl.FileSecurity fileSecurity) { }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Path Operations Base Class in C#\nDESCRIPTION: An abstract base class that defines the interface for path-related operations. Provides methods and properties for path manipulation, validation, and information retrieval.\nSOURCE: https://github.com/testableio/system.io.abstractions/blob/main/tests/TestableIO.System.IO.Abstractions.Api.Tests/Expected/TestableIO.System.IO.Abstractions.Wrappers_net472.txt#2025-04-22_snippet_25\n\nLANGUAGE: C#\nCODE:\n```\n[System.Serializable]\npublic abstract class PathBase : System.IO.Abstractions.IFileSystemEntity, System.IO.Abstractions.IPath\n{\n    protected PathBase(System.IO.Abstractions.IFileSystem fileSystem) { }\n    public abstract char AltDirectorySeparatorChar { get; }\n    public abstract char DirectorySeparatorChar { get; }\n    public System.IO.Abstractions.IFileSystem FileSystem { get; }\n    [System.Obsolete(\"Please use GetInvalidPathChars or GetInvalidFileNameChars instead.\")]\n    public abstract char[] InvalidPathChars { get; }\n    public abstract char PathSeparator { get; }\n    public abstract char VolumeSeparatorChar { get; }\n    public abstract string ChangeExtension(string path, string extension);\n    public abstract string Combine(params string[] paths);\n    public abstract string Combine(string path1, string path2);\n    public abstract string Combine(string path1, string path2, string path3);\n    public abstract string Combine(string path1, string path2, string path3, string path4);\n    public abstract string GetDirectoryName(string path);\n    public abstract string GetExtension(string path);\n    public abstract string GetFileName(string path);\n    public abstract string GetFileNameWithoutExtension(string path);\n    public abstract string GetFullPath(string path);\n    public abstract char[] GetInvalidFileNameChars();\n    public abstract char[] GetInvalidPathChars();\n    public abstract string GetPathRoot(string path);\n    public abstract string GetRandomFileName();\n    public abstract string GetTempFileName();\n    public abstract string GetTempPath();\n    public abstract bool HasExtension(string path);\n    public abstract bool IsPathRooted(string path);\n}\n```\n\n----------------------------------------\n\nTITLE: Defining MockFileInfo Class in C#\nDESCRIPTION: Implementation of a mock FileInfo class that inherits from FileInfoBase and implements IFileSystemAclSupport. This class provides a testable implementation of file operations without touching the real file system.\nSOURCE: https://github.com/testableio/system.io.abstractions/blob/main/tests/TestableIO.System.IO.Abstractions.Api.Tests/Expected/TestableIO.System.IO.Abstractions.TestingHelpers_net9.0.txt#2025-04-22_snippet_13\n\nLANGUAGE: C#\nCODE:\n```\n[System.Serializable]\npublic class MockFileInfo : System.IO.Abstractions.FileInfoBase, System.IO.Abstractions.IFileSystemAclSupport\n{\n    public MockFileInfo(System.IO.Abstractions.TestingHelpers.IMockFileDataAccessor mockFileSystem, string path) { }\n    public override System.IO.FileAttributes Attributes { get; set; }\n    public override System.DateTime CreationTime { get; set; }\n    public override System.DateTime CreationTimeUtc { get; set; }\n    public override System.IO.Abstractions.IDirectoryInfo Directory { get; }\n    public override string DirectoryName { get; }\n    public override bool Exists { get; }\n    public override string Extension { get; }\n    public override string FullName { get; }\n    public override bool IsReadOnly { get; set; }\n    public override System.DateTime LastAccessTime { get; set; }\n    public override System.DateTime LastAccessTimeUtc { get; set; }\n    public override System.DateTime LastWriteTime { get; set; }\n    public override System.DateTime LastWriteTimeUtc { get; set; }\n    public override long Length { get; }\n    public override string LinkTarget { get; }\n    public override string Name { get; }\n    public override System.IO.StreamWriter AppendText() { }\n    public override System.IO.Abstractions.IFileInfo CopyTo(string destFileName) { }\n    public override System.IO.Abstractions.IFileInfo CopyTo(string destFileName, bool overwrite) { }\n    public override System.IO.Abstractions.FileSystemStream Create() { }\n    public override void CreateAsSymbolicLink(string pathToTarget) { }\n    public override System.IO.StreamWriter CreateText() { }\n    public override void Decrypt() { }\n    public override void Delete() { }\n    public override void Encrypt() { }\n    [System.Runtime.Versioning.SupportedOSPlatform(\"windows\")]\n    public object GetAccessControl() { }\n    [System.Runtime.Versioning.SupportedOSPlatform(\"windows\")]\n    public object GetAccessControl(System.IO.Abstractions.IFileSystemAclSupport.AccessControlSections includeSections) { }\n    public override void MoveTo(string destFileName) { }\n    public override void MoveTo(string destFileName, bool overwrite) { }\n    public override System.IO.Abstractions.FileSystemStream Open(System.IO.FileMode mode) { }\n    public override System.IO.Abstractions.FileSystemStream Open(System.IO.FileStreamOptions options) { }\n    public override System.IO.Abstractions.FileSystemStream Open(System.IO.FileMode mode, System.IO.FileAccess access) { }\n    public override System.IO.Abstractions.FileSystemStream Open(System.IO.FileMode mode, System.IO.FileAccess access, System.IO.FileShare share) { }\n    public override System.IO.Abstractions.FileSystemStream OpenRead() { }\n    public override System.IO.StreamReader OpenText() { }\n    public override System.IO.Abstractions.FileSystemStream OpenWrite() { }\n    public override void Refresh() { }\n    public override System.IO.Abstractions.IFileInfo Replace(string destinationFileName, string destinationBackupFileName) { }\n    public override System.IO.Abstractions.IFileInfo Replace(string destinationFileName, string destinationBackupFileName, bool ignoreMetadataErrors) { }\n    public override System.IO.Abstractions.IFileSystemInfo ResolveLinkTarget(bool returnFinalTarget) { }\n    [System.Runtime.Versioning.SupportedOSPlatform(\"windows\")]\n    public void SetAccessControl(object value) { }\n    public override string ToString() { }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing File System Wrapper in C#\nDESCRIPTION: A serializable wrapper class that implements FileBase to provide file system operations. Includes methods for file manipulation like reading, writing, copying, and managing file attributes.\nSOURCE: https://github.com/testableio/system.io.abstractions/blob/main/tests/TestableIO.System.IO.Abstractions.Api.Tests/Expected/TestableIO.System.IO.Abstractions.Wrappers_net472.txt#2025-04-22_snippet_24\n\nLANGUAGE: C#\nCODE:\n```\n[System.Serializable]\npublic class FileWrapper : System.IO.Abstractions.FileBase\n{\n    public FileWrapper(System.IO.Abstractions.IFileSystem fileSystem) { }\n    public override void AppendAllLines(string path, System.Collections.Generic.IEnumerable<string> contents) { }\n    public override void AppendAllLines(string path, System.Collections.Generic.IEnumerable<string> contents, System.Text.Encoding encoding) { }\n    public override void AppendAllText(string path, string contents) { }\n    public override void AppendAllText(string path, string contents, System.Text.Encoding encoding) { }\n    public override System.IO.StreamWriter AppendText(string path) { }\n    public override void Copy(string sourceFileName, string destFileName) { }\n    public override void Copy(string sourceFileName, string destFileName, bool overwrite) { }\n    public override System.IO.Abstractions.FileSystemStream Create(string path) { }\n    public override System.IO.Abstractions.FileSystemStream Create(string path, int bufferSize) { }\n    public override System.IO.Abstractions.FileSystemStream Create(string path, int bufferSize, System.IO.FileOptions options) { }\n    public override System.IO.StreamWriter CreateText(string path) { }\n    public override void Decrypt(string path) { }\n    public override void Delete(string path) { }\n    public override void Encrypt(string path) { }\n    public override bool Exists(string path) { }\n    public override System.IO.FileAttributes GetAttributes(string path) { }\n    public override System.DateTime GetCreationTime(string path) { }\n    public override System.DateTime GetCreationTimeUtc(string path) { }\n    public override System.DateTime GetLastAccessTime(string path) { }\n    public override System.DateTime GetLastAccessTimeUtc(string path) { }\n    public override System.DateTime GetLastWriteTime(string path) { }\n    public override System.DateTime GetLastWriteTimeUtc(string path) { }\n    public override void Move(string sourceFileName, string destFileName) { }\n    public override System.IO.Abstractions.FileSystemStream Open(string path, System.IO.FileMode mode) { }\n    public override System.IO.Abstractions.FileSystemStream Open(string path, System.IO.FileMode mode, System.IO.FileAccess access) { }\n    public override System.IO.Abstractions.FileSystemStream Open(string path, System.IO.FileMode mode, System.IO.FileAccess access, System.IO.FileShare share) { }\n    public override System.IO.Abstractions.FileSystemStream OpenRead(string path) { }\n    public override System.IO.StreamReader OpenText(string path) { }\n    public override System.IO.Abstractions.FileSystemStream OpenWrite(string path) { }\n    public override byte[] ReadAllBytes(string path) { }\n    public override string[] ReadAllLines(string path) { }\n    public override string[] ReadAllLines(string path, System.Text.Encoding encoding) { }\n    public override string ReadAllText(string path) { }\n    public override string ReadAllText(string path, System.Text.Encoding encoding) { }\n    public override System.Collections.Generic.IEnumerable<string> ReadLines(string path) { }\n    public override System.Collections.Generic.IEnumerable<string> ReadLines(string path, System.Text.Encoding encoding) { }\n    public override void Replace(string sourceFileName, string destinationFileName, string destinationBackupFileName) { }\n    public override void Replace(string sourceFileName, string destinationFileName, string destinationBackupFileName, bool ignoreMetadataErrors) { }\n    public override void SetAttributes(string path, System.IO.FileAttributes fileAttributes) { }\n    public override void SetCreationTime(string path, System.DateTime creationTime) { }\n    public override void SetCreationTimeUtc(string path, System.DateTime creationTimeUtc) { }\n    public override void SetLastAccessTime(string path, System.DateTime lastAccessTime) { }\n    public override void SetLastAccessTimeUtc(string path, System.DateTime lastAccessTimeUtc) { }\n    public override void SetLastWriteTime(string path, System.DateTime lastWriteTime) { }\n    public override void SetLastWriteTimeUtc(string path, System.DateTime lastWriteTimeUtc) { }\n    public override void WriteAllBytes(string path, byte[] bytes) { }\n    public override void WriteAllLines(string path, System.Collections.Generic.IEnumerable<string> contents) { }\n    public override void WriteAllLines(string path, string[] contents) { }\n    public override void WriteAllLines(string path, System.Collections.Generic.IEnumerable<string> contents, System.Text.Encoding encoding) { }\n    public override void WriteAllLines(string path, string[] contents, System.Text.Encoding encoding) { }\n    public override void WriteAllText(string path, string contents) { }\n    public override void WriteAllText(string path, string contents, System.Text.Encoding encoding) { }\n}\n```\n\n----------------------------------------\n\nTITLE: File System Watcher Implementation\nDESCRIPTION: Base class for file system watchers implementing change notification functionality. Includes event handling for file system changes and configurable watching options.\nSOURCE: https://github.com/testableio/system.io.abstractions/blob/main/tests/TestableIO.System.IO.Abstractions.Api.Tests/Expected/TestableIO.System.IO.Abstractions.Wrappers_net8.0.txt#2025-04-22_snippet_16\n\nLANGUAGE: C#\nCODE:\n```\n[System.Serializable]\npublic abstract class FileSystemWatcherBase : System.IDisposable, System.IO.Abstractions.IFileSystemEntity, System.IO.Abstractions.IFileSystemWatcher\n{\n    protected FileSystemWatcherBase() { }\n    public abstract System.ComponentModel.IContainer Container { get; }\n    public abstract bool EnableRaisingEvents { get; set; }\n    public abstract System.IO.Abstractions.IFileSystem FileSystem { get; }\n    public abstract string Filter { get; set; }\n    public abstract System.Collections.ObjectModel.Collection<string> Filters { get; }\n    public abstract bool IncludeSubdirectories { get; set; }\n    public abstract int InternalBufferSize { get; set; }\n    public abstract System.IO.NotifyFilters NotifyFilter { get; set; }\n    public abstract string Path { get; set; }\n    public abstract System.ComponentModel.ISite Site { get; set; }\n    public abstract System.ComponentModel.ISynchronizeInvoke SynchronizingObject { get; set; }\n    public virtual event System.IO.FileSystemEventHandler Changed;\n    public virtual event System.IO.FileSystemEventHandler Created;\n    public virtual event System.IO.FileSystemEventHandler Deleted;\n    public virtual event System.IO.ErrorEventHandler Error;\n    public virtual event System.IO.RenamedEventHandler Renamed;\n    public abstract void BeginInit();\n    public void Dispose() { }\n    public virtual void Dispose(bool disposing) { }\n    public abstract void EndInit();\n    protected void OnChanged(object sender, System.IO.FileSystemEventArgs args) { }\n    protected void OnCreated(object sender, System.IO.FileSystemEventArgs args) { }\n    protected void OnDeleted(object sender, System.IO.FileSystemEventArgs args) { }\n    protected void OnError(object sender, System.IO.ErrorEventArgs args) { }\n    protected void OnRenamed(object sender, System.IO.RenamedEventArgs args) { }\n    public abstract System.IO.Abstractions.IWaitForChangedResult WaitForChanged(System.IO.WatcherChangeTypes changeType);\n    public abstract System.IO.Abstractions.IWaitForChangedResult WaitForChanged(System.IO.WatcherChangeTypes changeType, System.TimeSpan timeout);\n    public abstract System.IO.Abstractions.IWaitForChangedResult WaitForChanged(System.IO.WatcherChangeTypes changeType, int timeout);\n    public static System.IO.Abstractions.FileSystemWatcherBase op_Implicit(System.IO.FileSystemWatcher watcher) { }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining TimeAdjustments Enum for File Time Modifications in C#\nDESCRIPTION: The TimeAdjustments enum defines flags for different types of file time modifications. It includes options for creation time, last access time, and last write time, as well as a combined 'All' option.\nSOURCE: https://github.com/testableio/system.io.abstractions/blob/main/tests/TestableIO.System.IO.Abstractions.Api.Tests/Expected/TestableIO.System.IO.Abstractions.TestingHelpers_netstandard2.1.txt#2025-04-22_snippet_25\n\nLANGUAGE: C#\nCODE:\n```\n[System.Flags]\npublic enum TimeAdjustments\n{\n    None = 0,\n    CreationTime = 1,\n    LastAccessTime = 2,\n    LastWriteTime = 4,\n    All = -1,\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing File Writing Methods in C#\nDESCRIPTION: A set of overridden methods for writing text content to files with various parameter combinations. Includes both synchronous and asynchronous implementations supporting different encoding options and cancellation tokens.\nSOURCE: https://github.com/testableio/system.io.abstractions/blob/main/tests/TestableIO.System.IO.Abstractions.Api.Tests/Expected/TestableIO.System.IO.Abstractions.Wrappers_net9.0.txt#2025-04-22_snippet_29\n\nLANGUAGE: C#\nCODE:\n```\npublic override void WriteAllText(string path, string contents) { }\npublic override void WriteAllText(string path, System.ReadOnlySpan<char> contents, System.Text.Encoding encoding) { }\npublic override void WriteAllText(string path, string contents, System.Text.Encoding encoding) { }\npublic override System.Threading.Tasks.Task WriteAllTextAsync(string path, System.ReadOnlyMemory<char> contents, System.Threading.CancellationToken cancellationToken = default) { }\npublic override System.Threading.Tasks.Task WriteAllTextAsync(string path, string contents, System.Threading.CancellationToken cancellationToken = default) { }\npublic override System.Threading.Tasks.Task WriteAllTextAsync(string path, System.ReadOnlyMemory<char> contents, System.Text.Encoding encoding, System.Threading.CancellationToken cancellationToken = default) { }\npublic override System.Threading.Tasks.Task WriteAllTextAsync(string path, string contents, System.Text.Encoding encoding, System.Threading.CancellationToken cancellationToken = default) { }\n```\n\n----------------------------------------\n\nTITLE: FileAclExtensions Class for Windows File Access Control in C#\nDESCRIPTION: Extension methods for IFile interface to handle Windows-specific file access control operations. These methods allow getting and setting access control lists (ACLs) for files, and are platform-specific to Windows.\nSOURCE: https://github.com/testableio/system.io.abstractions/blob/main/tests/TestableIO.System.IO.Abstractions.Api.Tests/Expected/TestableIO.System.IO.Abstractions.Wrappers_net9.0.txt#2025-04-22_snippet_11\n\nLANGUAGE: C#\nCODE:\n```\npublic static class FileAclExtensions\n{\n    [System.Runtime.Versioning.SupportedOSPlatform(\"windows\")]\n    public static System.Security.AccessControl.FileSecurity GetAccessControl(this System.IO.Abstractions.IFile file, string path) { }\n    [System.Runtime.Versioning.SupportedOSPlatform(\"windows\")]\n    public static System.Security.AccessControl.FileSecurity GetAccessControl(this System.IO.Abstractions.IFile file, string path, System.Security.AccessControl.AccessControlSections includeSections) { }\n    [System.Runtime.Versioning.SupportedOSPlatform(\"windows\")]\n    public static void SetAccessControl(this System.IO.Abstractions.IFile file, string path, System.Security.AccessControl.FileSecurity fileSecurity) { }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining FileVersionInfoBase Abstract Class in C#\nDESCRIPTION: This abstract class provides a base implementation for file version information, including properties for various version-related attributes and metadata.\nSOURCE: https://github.com/testableio/system.io.abstractions/blob/main/tests/TestableIO.System.IO.Abstractions.Api.Tests/Expected/TestableIO.System.IO.Abstractions.Wrappers_net472.txt#2025-04-22_snippet_22\n\nLANGUAGE: C#\nCODE:\n```\n[System.Serializable]\npublic abstract class FileVersionInfoBase : System.IO.Abstractions.IFileVersionInfo\n{\n    protected FileVersionInfoBase() { }\n    public abstract string Comments { get; }\n    public abstract string CompanyName { get; }\n    public abstract int FileBuildPart { get; }\n    public abstract string FileDescription { get; }\n    public abstract int FileMajorPart { get; }\n    public abstract int FileMinorPart { get; }\n    public abstract string FileName { get; }\n    public abstract int FilePrivatePart { get; }\n    public abstract string FileVersion { get; }\n    public abstract string InternalName { get; }\n    public abstract bool IsDebug { get; }\n    public abstract bool IsPatched { get; }\n    public abstract bool IsPreRelease { get; }\n    public abstract bool IsPrivateBuild { get; }\n    public abstract bool IsSpecialBuild { get; }\n    public abstract string Language { get; }\n    public abstract string LegalCopyright { get; }\n    public abstract string LegalTrademarks { get; }\n    public abstract string OriginalFilename { get; }\n    public abstract string PrivateBuild { get; }\n    public abstract int ProductBuildPart { get; }\n    public abstract int ProductMajorPart { get; }\n    public abstract int ProductMinorPart { get; }\n    public abstract string ProductName { get; }\n    public abstract int ProductPrivatePart { get; }\n    public abstract string ProductVersion { get; }\n    public abstract string SpecialBuild { get; }\n    public abstract string ToString();\n    public static System.IO.Abstractions.FileVersionInfoBase op_Implicit(System.Diagnostics.FileVersionInfo fileVersionInfo) { }\n}\n```\n\n----------------------------------------\n\nTITLE: DirectoryInfo ACL Extensions Implementation\nDESCRIPTION: Windows-specific extension methods for DirectoryInfo access control operations\nSOURCE: https://github.com/testableio/system.io.abstractions/blob/main/tests/TestableIO.System.IO.Abstractions.Api.Tests/Expected/TestableIO.System.IO.Abstractions.Wrappers_net9.0.txt#2025-04-22_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\npublic static class DirectoryInfoAclExtensions\n{\n    [System.Runtime.Versioning.SupportedOSPlatform(\"windows\")]\n    public static void Create(this System.IO.Abstractions.IDirectoryInfo directoryInfo, System.Security.AccessControl.DirectorySecurity directorySecurity) { }\n    [System.Runtime.Versioning.SupportedOSPlatform(\"windows\")]\n    public static System.Security.AccessControl.DirectorySecurity GetAccessControl(this System.IO.Abstractions.IDirectoryInfo directoryInfo) { }\n    [System.Runtime.Versioning.SupportedOSPlatform(\"windows\")]\n    public static System.Security.AccessControl.DirectorySecurity GetAccessControl(this System.IO.Abstractions.IDirectoryInfo directoryInfo, System.Security.AccessControl.AccessControlSections includeSections) { }\n    [System.Runtime.Versioning.SupportedOSPlatform(\"windows\")]\n    public static void SetAccessControl(this System.IO.Abstractions.IDirectoryInfo directoryInfo, System.Security.AccessControl.DirectorySecurity directorySecurity) { }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Windows-Specific Directory ACL Extensions\nDESCRIPTION: Extends IDirectory with Windows-specific methods for directory security control. Provides methods to create directories with security settings and manipulate access controls.\nSOURCE: https://github.com/testableio/system.io.abstractions/blob/main/tests/TestableIO.System.IO.Abstractions.Api.Tests/Expected/TestableIO.System.IO.Abstractions.Wrappers_net6.0.txt#2025-04-22_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\npublic static class DirectoryAclExtensions\n{\n    [System.Runtime.Versioning.SupportedOSPlatform(\"windows\")]\n    public static void CreateDirectory(this System.IO.Abstractions.IDirectory directory, string path, System.Security.AccessControl.DirectorySecurity directorySecurity) { }\n    [System.Runtime.Versioning.SupportedOSPlatform(\"windows\")]\n    public static System.Security.AccessControl.DirectorySecurity GetAccessControl(this System.IO.Abstractions.IDirectory directory, string path) { }\n    [System.Runtime.Versioning.SupportedOSPlatform(\"windows\")]\n    public static System.Security.AccessControl.DirectorySecurity GetAccessControl(this System.IO.Abstractions.IDirectory directory, string path, System.Security.AccessControl.AccessControlSections includeSections) { }\n    [System.Runtime.Versioning.SupportedOSPlatform(\"windows\")]\n    public static void SetAccessControl(this System.IO.Abstractions.IDirectory directory, string path, System.Security.AccessControl.DirectorySecurity directorySecurity) { }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing FileSystemWatcherBase Abstract Class in C#\nDESCRIPTION: Defines an abstract class that wraps the functionality of System.IO.FileSystemWatcher with abstract and virtual methods for file system change monitoring. It includes event handlers for file system change events like Changed, Created, Deleted, Error, and Renamed.\nSOURCE: https://github.com/testableio/system.io.abstractions/blob/main/tests/TestableIO.System.IO.Abstractions.Api.Tests/Expected/TestableIO.System.IO.Abstractions.Wrappers_net9.0.txt#2025-04-22_snippet_22\n\nLANGUAGE: C#\nCODE:\n```\npublic abstract System.ComponentModel.ISynchronizeInvoke SynchronizingObject { get; set; }\npublic virtual event System.IO.FileSystemEventHandler Changed;\npublic virtual event System.IO.FileSystemEventHandler Created;\npublic virtual event System.IO.FileSystemEventHandler Deleted;\npublic virtual event System.IO.ErrorEventHandler Error;\npublic virtual event System.IO.RenamedEventHandler Renamed;\npublic abstract void BeginInit();\npublic void Dispose() { }\npublic virtual void Dispose(bool disposing) { }\npublic abstract void EndInit();\nprotected void OnChanged(object sender, System.IO.FileSystemEventArgs args) { }\nprotected void OnCreated(object sender, System.IO.FileSystemEventArgs args) { }\nprotected void OnDeleted(object sender, System.IO.FileSystemEventArgs args) { }\nprotected void OnError(object sender, System.IO.ErrorEventArgs args) { }\nprotected void OnRenamed(object sender, System.IO.RenamedEventArgs args) { }\npublic abstract System.IO.Abstractions.IWaitForChangedResult WaitForChanged(System.IO.WatcherChangeTypes changeType);\npublic abstract System.IO.Abstractions.IWaitForChangedResult WaitForChanged(System.IO.WatcherChangeTypes changeType, System.TimeSpan timeout);\npublic abstract System.IO.Abstractions.IWaitForChangedResult WaitForChanged(System.IO.WatcherChangeTypes changeType, int timeout);\npublic static System.IO.Abstractions.FileSystemWatcherBase op_Implicit(System.IO.FileSystemWatcher watcher) { }\n```\n\n----------------------------------------\n\nTITLE: Defining Mock Directory Data Structure for System.IO.Abstractions (C#)\nDESCRIPTION: Declares the MockDirectoryData class, derived from MockFileData, representing metadata and access control for a directory in the mock file system. Highlights include a customizable AccessControl (DirectorySecurity) property for Windows platforms, suitable for testing ACL logic. No constructors or methods require arguments; instead, its properties are set after instantiation. Part of the infrastructure for supporting realistic permission scenarios in in-memory tests.\nSOURCE: https://github.com/testableio/system.io.abstractions/blob/main/tests/TestableIO.System.IO.Abstractions.Api.Tests/Expected/TestableIO.System.IO.Abstractions.TestingHelpers_net6.0.txt#2025-04-22_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n[System.Serializable]\npublic class MockDirectoryData : System.IO.Abstractions.TestingHelpers.MockFileData\n{\n    public MockDirectoryData() { }\n    [System.Runtime.Versioning.SupportedOSPlatform(\"windows\")]\n    public new System.Security.AccessControl.DirectorySecurity AccessControl { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing MockFileInfoFactory Class in C#\nDESCRIPTION: Defines a serializable MockFileInfoFactory class that implements IFileInfoFactory and IFileSystemEntity interfaces. This factory creates mock file info objects for testing purposes.\nSOURCE: https://github.com/testableio/system.io.abstractions/blob/main/tests/TestableIO.System.IO.Abstractions.Api.Tests/Expected/TestableIO.System.IO.Abstractions.TestingHelpers_netstandard2.0.txt#2025-04-22_snippet_15\n\nLANGUAGE: C#\nCODE:\n```\n[System.Serializable]\npublic class MockFileInfoFactory : System.IO.Abstractions.IFileInfoFactory, System.IO.Abstractions.IFileSystemEntity\n{\n    public MockFileInfoFactory(System.IO.Abstractions.TestingHelpers.IMockFileDataAccessor mockFileSystem) { }\n    public System.IO.Abstractions.IFileSystem FileSystem { get; }\n    public System.IO.Abstractions.IFileInfo New(string fileName) { }\n    public System.IO.Abstractions.IFileInfo Wrap(System.IO.FileInfo fileInfo) { }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Windows ACL Extension Methods for IDirectory in C#\nDESCRIPTION: Defines extension methods for the System.IO.Abstractions.IDirectory interface to handle directory access control lists (ACLs) on Windows. Provides methods to create directories with specific security settings (`CreateDirectory`) and to get (`GetAccessControl`) or set (`SetAccessControl`) `DirectorySecurity` objects. These methods are marked with `SupportedOSPlatform(\"windows\")`, indicating they are only functional on Windows operating systems.\nSOURCE: https://github.com/testableio/system.io.abstractions/blob/main/tests/TestableIO.System.IO.Abstractions.Api.Tests/Expected/TestableIO.System.IO.Abstractions.Wrappers_net8.0.txt#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nnamespace System.IO.Abstractions\n{\n    public static class DirectoryAclExtensions\n    {\n        [System.Runtime.Versioning.SupportedOSPlatform(\"windows\")]\n        public static void CreateDirectory(this System.IO.Abstractions.IDirectory directory, string path, System.Security.AccessControl.DirectorySecurity directorySecurity) { }\n        [System.Runtime.Versioning.SupportedOSPlatform(\"windows\")]\n        public static System.Security.AccessControl.DirectorySecurity GetAccessControl(this System.IO.Abstractions.IDirectory directory, string path) { }\n        [System.Runtime.Versioning.SupportedOSPlatform(\"windows\")]\n        public static System.Security.AccessControl.DirectorySecurity GetAccessControl(this System.IO.Abstractions.IDirectory directory, string path, System.Security.AccessControl.AccessControlSections includeSections) { }\n        [System.Runtime.Versioning.SupportedOSPlatform(\"windows\")]\n        public static void SetAccessControl(this System.IO.Abstractions.IDirectory directory, string path, System.Security.AccessControl.DirectorySecurity directorySecurity) { }\n    }\n    // ... other classes\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Abstract Directory Operations in DirectoryInfoBase (C#)\nDESCRIPTION: Declares abstract methods representing common directory operations within the `DirectoryInfoBase` class, which serves as a base for directory abstractions in the System.IO.Abstractions library. These methods mirror functionalities found in `System.IO.DirectoryInfo` but are designed for testability.\nSOURCE: https://github.com/testableio/system.io.abstractions/blob/main/tests/TestableIO.System.IO.Abstractions.Api.Tests/Expected/TestableIO.System.IO.Abstractions.Wrappers_net6.0.txt#2025-04-22_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\n        public override System.Collections.Generic.IEnumerable<string> EnumerateFiles(string path, string searchPattern, System.IO.SearchOption searchOption) { }\n```\n\nLANGUAGE: csharp\nCODE:\n```\n        public override bool Exists(string path) { }\n```\n\nLANGUAGE: csharp\nCODE:\n```\n        public override System.DateTime GetCreationTime(string path) { }\n```\n\nLANGUAGE: csharp\nCODE:\n```\n        public override System.DateTime GetCreationTimeUtc(string path) { }\n```\n\nLANGUAGE: csharp\nCODE:\n```\n        public override string GetCurrentDirectory() { }\n```\n\nLANGUAGE: csharp\nCODE:\n```\n        public override string[] GetDirectories(string path) { }\n```\n\nLANGUAGE: csharp\nCODE:\n```\n        public override string[] GetDirectories(string path, string searchPattern) { }\n```\n\nLANGUAGE: csharp\nCODE:\n```\n        public override string[] GetDirectories(string path, string searchPattern, System.IO.EnumerationOptions enumerationOptions) { }\n```\n\nLANGUAGE: csharp\nCODE:\n```\n        public override string[] GetDirectories(string path, string searchPattern, System.IO.SearchOption searchOption) { }\n```\n\nLANGUAGE: csharp\nCODE:\n```\n        public override string GetDirectoryRoot(string path) { }\n```\n\nLANGUAGE: csharp\nCODE:\n```\n        public override string[] GetFileSystemEntries(string path) { }\n```\n\nLANGUAGE: csharp\nCODE:\n```\n        public override string[] GetFileSystemEntries(string path, string searchPattern) { }\n```\n\nLANGUAGE: csharp\nCODE:\n```\n        public override string[] GetFileSystemEntries(string path, string searchPattern, System.IO.EnumerationOptions enumerationOptions) { }\n```\n\nLANGUAGE: csharp\nCODE:\n```\n        public override string[] GetFileSystemEntries(string path, string searchPattern, System.IO.SearchOption searchOption) { }\n```\n\nLANGUAGE: csharp\nCODE:\n```\n        public override string[] GetFiles(string path) { }\n```\n\nLANGUAGE: csharp\nCODE:\n```\n        public override string[] GetFiles(string path, string searchPattern) { }\n```\n\nLANGUAGE: csharp\nCODE:\n```\n        public override string[] GetFiles(string path, string searchPattern, System.IO.EnumerationOptions enumerationOptions) { }\n```\n\nLANGUAGE: csharp\nCODE:\n```\n        public override string[] GetFiles(string path, string searchPattern, System.IO.SearchOption searchOption) { }\n```\n\nLANGUAGE: csharp\nCODE:\n```\n        public override System.DateTime GetLastAccessTime(string path) { }\n```\n\nLANGUAGE: csharp\nCODE:\n```\n        public override System.DateTime GetLastAccessTimeUtc(string path) { }\n```\n\nLANGUAGE: csharp\nCODE:\n```\n        public override System.DateTime GetLastWriteTime(string path) { }\n```\n\nLANGUAGE: csharp\nCODE:\n```\n        public override System.DateTime GetLastWriteTimeUtc(string path) { }\n```\n\nLANGUAGE: csharp\nCODE:\n```\n        public override string[] GetLogicalDrives() { }\n```\n\nLANGUAGE: csharp\nCODE:\n```\n        public override System.IO.Abstractions.IDirectoryInfo GetParent(string path) { }\n```\n\nLANGUAGE: csharp\nCODE:\n```\n        public override void Move(string sourceDirName, string destDirName) { }\n```\n\nLANGUAGE: csharp\nCODE:\n```\n        public override System.IO.Abstractions.IFileSystemInfo ResolveLinkTarget(string linkPath, bool returnFinalTarget) { }\n```\n\nLANGUAGE: csharp\nCODE:\n```\n        public override void SetCreationTime(string path, System.DateTime creationTime) { }\n```\n\nLANGUAGE: csharp\nCODE:\n```\n        public override void SetCreationTimeUtc(string path, System.DateTime creationTimeUtc) { }\n```\n\nLANGUAGE: csharp\nCODE:\n```\n        public override void SetCurrentDirectory(string path) { }\n```\n\nLANGUAGE: csharp\nCODE:\n```\n        public override void SetLastAccessTime(string path, System.DateTime lastAccessTime) { }\n```\n\nLANGUAGE: csharp\nCODE:\n```\n        public override void SetLastAccessTimeUtc(string path, System.DateTime lastAccessTimeUtc) { }\n```\n\nLANGUAGE: csharp\nCODE:\n```\n        public override void SetLastWriteTime(string path, System.DateTime lastWriteTime) { }\n```\n\nLANGUAGE: csharp\nCODE:\n```\n        public override void SetLastWriteTimeUtc(string path, System.DateTime lastWriteTimeUtc) { }\n```\n\n----------------------------------------\n\nTITLE: Defining MockDirectoryData Class in C#\nDESCRIPTION: The MockDirectoryData class inherits from MockFileData, providing a representation of directory metadata in a mock file system. It allows setting and getting directory access control properties.\nSOURCE: https://github.com/testableio/system.io.abstractions/blob/main/tests/TestableIO.System.IO.Abstractions.Api.Tests/Expected/TestableIO.System.IO.Abstractions.TestingHelpers_netstandard2.0.txt#2025-04-22_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\n[System.Serializable]\npublic class MockDirectoryData : System.IO.Abstractions.TestingHelpers.MockFileData\n{\n    public MockDirectoryData() { }\n    public new System.Security.AccessControl.DirectorySecurity AccessControl { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Mock File System Classes and Methods\nDESCRIPTION: Defines core mock file system operations including directory manipulation and file access verification.\nSOURCE: https://github.com/testableio/system.io.abstractions/blob/main/tests/TestableIO.System.IO.Abstractions.Api.Tests/Expected/TestableIO.System.IO.Abstractions.TestingHelpers_netstandard2.0.txt#2025-04-22_snippet_20\n\nLANGUAGE: C#\nCODE:\n```\npublic System.IO.Abstractions.TestingHelpers.MockFileSystem MockTime(System.Func<System.DateTime> dateTimeProvider) { }\npublic void MoveDirectory(string sourcePath, string destPath) { }\npublic void RemoveFile(string path, bool verifyAccess = true) { }\n```\n\n----------------------------------------\n\nTITLE: MockFileVersionInfo Class Definition\nDESCRIPTION: Comprehensive mock implementation of file version information with extensive property support.\nSOURCE: https://github.com/testableio/system.io.abstractions/blob/main/tests/TestableIO.System.IO.Abstractions.Api.Tests/Expected/TestableIO.System.IO.Abstractions.TestingHelpers_netstandard2.0.txt#2025-04-22_snippet_23\n\nLANGUAGE: C#\nCODE:\n```\npublic class MockFileVersionInfo : System.IO.Abstractions.FileVersionInfoBase\n{\n    public MockFileVersionInfo(\n        string fileName,\n        string fileVersion = null,\n        string productVersion = null,\n        string fileDescription = null,\n        string productName = null,\n        string companyName = null,\n        string comments = null,\n        string internalName = null,\n        bool isDebug = false,\n        bool isPatched = false,\n        bool isPrivateBuild = false,\n        bool isPreRelease = false,\n        bool isSpecialBuild = false,\n        string language = null,\n        string legalCopyright = null,\n        string legalTrademarks = null,\n        string originalFilename = null,\n        string privateBuild = null,\n        string specialBuild = null) { }\n```\n\n----------------------------------------\n\nTITLE: File ACL Extensions Implementation in C#\nDESCRIPTION: Windows-specific extension methods for file access control operations. Provides methods to get and set file security information.\nSOURCE: https://github.com/testableio/system.io.abstractions/blob/main/tests/TestableIO.System.IO.Abstractions.Api.Tests/Expected/TestableIO.System.IO.Abstractions.Wrappers_net8.0.txt#2025-04-22_snippet_10\n\nLANGUAGE: C#\nCODE:\n```\npublic static class FileAclExtensions\n{\n    [System.Runtime.Versioning.SupportedOSPlatform(\"windows\")]\n    public static System.Security.AccessControl.FileSecurity GetAccessControl(this System.IO.Abstractions.IFile file, string path) { }\n    [System.Runtime.Versioning.SupportedOSPlatform(\"windows\")]\n    public static System.Security.AccessControl.FileSecurity GetAccessControl(this System.IO.Abstractions.IFile file, string path, System.Security.AccessControl.AccessControlSections includeSections) { }\n    [System.Runtime.Versioning.SupportedOSPlatform(\"windows\")]\n    public static void SetAccessControl(this System.IO.Abstractions.IFile file, string path, System.Security.AccessControl.FileSecurity fileSecurity) { }\n}\n```\n\n----------------------------------------\n\nTITLE: Assembly Metadata and Framework Target Declaration - C#\nDESCRIPTION: Declares assembly metadata for repository URL and target framework version (.NET 8.0)\nSOURCE: https://github.com/testableio/system.io.abstractions/blob/main/tests/TestableIO.System.IO.Abstractions.Api.Tests/Expected/TestableIO.System.IO.Abstractions.TestingHelpers_net8.0.txt#2025-04-22_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\n[assembly: System.Reflection.AssemblyMetadata(\"RepositoryUrl\", \"https://github.com/TestableIO/System.IO.Abstractions.git\")]\n[assembly: System.Runtime.Versioning.TargetFramework(\".NETCoreApp,Version=v8.0\", FrameworkDisplayName=\".NET 8.0\")]\n```\n\n----------------------------------------\n\nTITLE: Declaring DriveInfoBase for Testable Drive Info Abstraction in C#\nDESCRIPTION: This abstract serializable C# class provides a testable abstraction over System.IO.DriveInfo, exposing properties for drive space, format, and identification, compatible with dependency injection and mocking. It serves as a contract for drive info providers and includes an implicit operator for seamless conversion from System.IO.DriveInfo. No implementation is provided, so inheriting classes must supply actual drive interaction.\nSOURCE: https://github.com/testableio/system.io.abstractions/blob/main/tests/TestableIO.System.IO.Abstractions.Api.Tests/Expected/TestableIO.System.IO.Abstractions.Wrappers_netstandard2.1.txt#2025-04-22_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\n[System.Serializable]\npublic abstract class DriveInfoBase : System.IO.Abstractions.IDriveInfo, System.IO.Abstractions.IFileSystemEntity\n{\n    protected DriveInfoBase(System.IO.Abstractions.IFileSystem fileSystem) { }\n    public abstract long AvailableFreeSpace { get; }\n    public abstract string DriveFormat { get; }\n    public abstract System.IO.DriveType DriveType { get; }\n    public System.IO.Abstractions.IFileSystem FileSystem { get; }\n    public abstract bool IsReady { get; }\n    public abstract string Name { get; }\n    public abstract System.IO.Abstractions.IDirectoryInfo RootDirectory { get; }\n    public abstract long TotalFreeSpace { get; }\n    public abstract long TotalSize { get; }\n    public abstract string VolumeLabel { get; set; }\n    public static System.IO.Abstractions.DriveInfoBase op_Implicit(System.IO.DriveInfo driveInfo) { }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing MockUnixSupport Static Class in C#\nDESCRIPTION: Utility class providing platform detection and path normalization for Unix compatibility. Contains methods to check if running on Unix or Windows platforms and to normalize paths for cross-platform support.\nSOURCE: https://github.com/testableio/system.io.abstractions/blob/main/tests/TestableIO.System.IO.Abstractions.Api.Tests/Expected/TestableIO.System.IO.Abstractions.TestingHelpers_net8.0.txt#2025-04-22_snippet_24\n\nLANGUAGE: C#\nCODE:\n```\npublic static class MockUnixSupport\n{\n    public static bool IsUnixPlatform() { }\n    public static bool IsWindowsPlatform() { }\n    public static string Path(string path) { }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Abstract Directory Operations with System.IO.Abstractions in C#\nDESCRIPTION: This set of C# abstract method signatures defines various directory-related operations, such as file retrieval, timestamps, logical drives, and directory movement using System.IO.Abstractions. The methods are intended for inherited implementations that mock or extend system directory behaviors. Primary parameters include file paths, search options, and enumeration parameters, returning results such as file arrays or date-time objects.\nSOURCE: https://github.com/testableio/system.io.abstractions/blob/main/tests/TestableIO.System.IO.Abstractions.Api.Tests/Expected/TestableIO.System.IO.Abstractions.Wrappers_netstandard2.1.txt#2025-04-22_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\npublic override string[] GetFiles(string path, string searchPattern) { }\npublic override string[] GetFiles(string path, string searchPattern, System.IO.EnumerationOptions enumerationOptions) { }\npublic override string[] GetFiles(string path, string searchPattern, System.IO.SearchOption searchOption) { }\npublic override System.DateTime GetLastAccessTime(string path) { }\npublic override System.DateTime GetLastAccessTimeUtc(string path) { }\npublic override System.DateTime GetLastWriteTime(string path) { }\npublic override System.DateTime GetLastWriteTimeUtc(string path) { }\npublic override string[] GetLogicalDrives() { }\npublic override System.IO.Abstractions.IDirectoryInfo GetParent(string path) { }\npublic override void Move(string sourceDirName, string destDirName) { }\npublic override void SetCreationTime(string path, System.DateTime creationTime) { }\npublic override void SetCreationTimeUtc(string path, System.DateTime creationTimeUtc) { }\npublic override void SetCurrentDirectory(string path) { }\npublic override void SetLastAccessTime(string path, System.DateTime lastAccessTime) { }\npublic override void SetLastAccessTimeUtc(string path, System.DateTime lastAccessTimeUtc) { }\npublic override void SetLastWriteTime(string path, System.DateTime lastWriteTime) { }\npublic override void SetLastWriteTimeUtc(string path, System.DateTime lastWriteTimeUtc) { }\n```\n\n----------------------------------------\n\nTITLE: Implementing File Access Control Extensions in C#\nDESCRIPTION: Static class containing extension methods for file access control operations. These methods are platform-specific and only supported on Windows.\nSOURCE: https://github.com/testableio/system.io.abstractions/blob/main/tests/TestableIO.System.IO.Abstractions.Api.Tests/Expected/TestableIO.System.IO.Abstractions.Wrappers_net8.0.txt#2025-04-22_snippet_12\n\nLANGUAGE: C#\nCODE:\n```\npublic static class FileInfoAclExtensions\n{\n    [System.Runtime.Versioning.SupportedOSPlatform(\"windows\")]\n    public static System.Security.AccessControl.FileSecurity GetAccessControl(this System.IO.Abstractions.IFileInfo fileInfo) { }\n    [System.Runtime.Versioning.SupportedOSPlatform(\"windows\")]\n    public static System.Security.AccessControl.FileSecurity GetAccessControl(this System.IO.Abstractions.IFileInfo fileInfo, System.Security.AccessControl.AccessControlSections includeSections) { }\n    [System.Runtime.Versioning.SupportedOSPlatform(\"windows\")]\n    public static void SetAccessControl(this System.IO.Abstractions.IFileInfo fileInfo, System.Security.AccessControl.FileSecurity fileSecurity) { }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Assembly Attributes for System.IO.Abstractions\nDESCRIPTION: Sets up assembly-level attributes for the System.IO.Abstractions library, including CLS compliance, repository URL, and internal visibility.\nSOURCE: https://github.com/testableio/system.io.abstractions/blob/main/tests/TestableIO.System.IO.Abstractions.Api.Tests/Expected/TestableIO.System.IO.Abstractions.Wrappers_netstandard2.0.txt#2025-04-22_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\n[assembly: System.CLSCompliant(true)]\n[assembly: System.Reflection.AssemblyMetadata(\"RepositoryUrl\", \"https://github.com/TestableIO/System.IO.Abstractions.git\")]\n[assembly: System.Runtime.CompilerServices.InternalsVisibleTo(@\"DynamicProxyGenAssembly2, PublicKey=0024000004800000940000000602000000240000525341310004000001000100c547cac37abd99c8db225ef2f6c8a3602f3b3606cc9891605d02baa56104f4cfc0734aa39b93bf7852f7d9266654753cc297e7d2edfe0bac1cdcf9f717241550e0a7b191195b7667bb4f64bcb8e2121380fd1d9d46ad2d92d2d15605093924cceaf74c4861eff62abf69b9291ed0a340e113be11e6a7d3113e92484cf7045cc7\")]\n[assembly: System.Runtime.Versioning.TargetFramework(\".NETStandard,Version=v2.0\", FrameworkDisplayName=\".NET Standard 2.0\")]\n```\n\n----------------------------------------\n\nTITLE: StringOperations Class Definition\nDESCRIPTION: Utility class for case-sensitive string operations including comparison, manipulation and search functions.\nSOURCE: https://github.com/testableio/system.io.abstractions/blob/main/tests/TestableIO.System.IO.Abstractions.Api.Tests/Expected/TestableIO.System.IO.Abstractions.TestingHelpers_netstandard2.0.txt#2025-04-22_snippet_24\n\nLANGUAGE: C#\nCODE:\n```\npublic class StringOperations\n{\n    public StringOperations(bool caseSensitive) { }\n    public System.StringComparer Comparer { get; }\n    public bool Contains(string s, string substring) { }\n    public bool EndsWith(string s, string suffix) { }\n    public bool Equals(char x, char y) { }\n    public bool Equals(string x, string y) { }\n    public int IndexOf(string s, string substring) { }\n    public int IndexOf(string s, string substring, int startIndex) { }\n    public string Replace(string s, string oldValue, string newValue) { }\n    public bool StartsWith(string s, string prefix) { }\n    public char ToLower(char c) { }\n    public string ToLower(string s) { }\n    public char ToUpper(char c) { }\n    public string ToUpper(string s) { }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Assembly Attributes for System.IO.Abstractions in C#\nDESCRIPTION: Defines assembly-level attributes for the System.IO.Abstractions project. It marks the assembly as CLS-compliant, specifies the source code repository URL via AssemblyMetadata, makes internal types visible to a specific dynamic proxy generator assembly (likely for mocking/testing frameworks like Moq), and declares the target framework as .NET 8.0 using TargetFrameworkAttribute.\nSOURCE: https://github.com/testableio/system.io.abstractions/blob/main/tests/TestableIO.System.IO.Abstractions.Api.Tests/Expected/TestableIO.System.IO.Abstractions.Wrappers_net8.0.txt#2025-04-22_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n[assembly: System.CLSCompliant(true)]\n[assembly: System.Reflection.AssemblyMetadata(\"RepositoryUrl\", \"https://github.com/TestableIO/System.IO.Abstractions.git\")]\n[assembly: System.Runtime.CompilerServices.InternalsVisibleTo(@\"DynamicProxyGenAssembly2, PublicKey=0024000004800000940000000602000000240000525341310004000001000100c547cac37abd99c8db225ef2f6c8a3602f3b3606cc9891605d02baa56104f4cfc0734aa39b93bf7852f7d9266654753cc297e7d2edfe0bac1cdcf9f717241550e0a7b191195b7667bb4f64bcb8e2121380fd1d9d46ad2d92d2d15605093924cceaf74c4861eff62abf69b9291ed0a340e113be11e6a7d3113e92484cf7045cc7\")]\n[assembly: System.Runtime.Versioning.TargetFramework(\".NETCoreApp,Version=v8.0\", FrameworkDisplayName=\".NET 8.0\")]\n```\n\n----------------------------------------\n\nTITLE: Extending File ACL Operations with Extension Methods in C#\nDESCRIPTION: The FileAclExtensions static class defines C# extension methods for manipulating file access control using System.Security.AccessControl on System.IO.Abstractions.IFile. The extension methods include getting and setting FileSecurity for files via path parameters and optionally AccessControlSections. These methods facilitate unit-testing and dependency injection by abstracting direct file system interactions.\nSOURCE: https://github.com/testableio/system.io.abstractions/blob/main/tests/TestableIO.System.IO.Abstractions.Api.Tests/Expected/TestableIO.System.IO.Abstractions.Wrappers_netstandard2.1.txt#2025-04-22_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\npublic static class FileAclExtensions\n{\n    public static System.Security.AccessControl.FileSecurity GetAccessControl(this System.IO.Abstractions.IFile file, string path) { }\n    public static System.Security.AccessControl.FileSecurity GetAccessControl(this System.IO.Abstractions.IFile file, string path, System.Security.AccessControl.AccessControlSections includeSections) { }\n    public static void SetAccessControl(this System.IO.Abstractions.IFile file, string path, System.Security.AccessControl.FileSecurity fileSecurity) { }\n}\n```\n\n----------------------------------------\n\nTITLE: Abstract Path Methods Declaration in C#\nDESCRIPTION: Abstract method declarations for path manipulation operations including Join and TrimEndingDirectorySeparator. These methods define the contract that implementations must fulfill to provide path-related functionality.\nSOURCE: https://github.com/testableio/system.io.abstractions/blob/main/tests/TestableIO.System.IO.Abstractions.Api.Tests/Expected/TestableIO.System.IO.Abstractions.Wrappers_net8.0.txt#2025-04-22_snippet_23\n\nLANGUAGE: csharp\nCODE:\n```\npublic abstract string Join(System.ReadOnlySpan<char> path1, System.ReadOnlySpan<char> path2);\npublic abstract string Join(string path1, string path2);\npublic abstract string Join(System.ReadOnlySpan<char> path1, System.ReadOnlySpan<char> path2, System.ReadOnlySpan<char> path3);\npublic abstract string Join(string path1, string path2, string path3);\npublic abstract string Join(System.ReadOnlySpan<char> path1, System.ReadOnlySpan<char> path2, System.ReadOnlySpan<char> path3, System.ReadOnlySpan<char> path4);\npublic abstract string Join(string path1, string path2, string path3, string path4);\npublic abstract System.ReadOnlySpan<char> TrimEndingDirectorySeparator(System.ReadOnlySpan<char> path);\npublic abstract string TrimEndingDirectorySeparator(string path);\npublic abstract bool TryJoin(System.ReadOnlySpan<char> path1, System.ReadOnlySpan<char> path2, System.Span<char> destination, out int charsWritten);\npublic abstract bool TryJoin(System.ReadOnlySpan<char> path1, System.ReadOnlySpan<char> path2, System.ReadOnlySpan<char> path3, System.Span<char> destination, out int charsWritten);\n```\n\n----------------------------------------\n\nTITLE: Adding NuGet Package in Shell\nDESCRIPTION: Instructions for adding the TestableIO.System.IO.Abstractions.Wrappers package using the dotnet CLI. This package allows for testable file system operations by providing wrappers over standard file system calls.\nSOURCE: https://github.com/testableio/system.io.abstractions/blob/main/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndotnet add package TestableIO.System.IO.Abstractions.Wrappers\n```\n\n----------------------------------------\n\nTITLE: Configuring Assembly Metadata and Target Framework in C#\nDESCRIPTION: These assembly attributes define metadata for the project. `AssemblyMetadata` specifies the repository URL associated with the assembly. `TargetFramework` indicates the specific .NET version and framework display name the assembly targets, in this case, .NET 9.0.\nSOURCE: https://github.com/testableio/system.io.abstractions/blob/main/tests/TestableIO.System.IO.Abstractions.Api.Tests/Expected/TestableIO.System.IO.Abstractions.TestingHelpers_net9.0.txt#2025-04-22_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n[assembly: System.Reflection.AssemblyMetadata(\"RepositoryUrl\", \"https://github.com/TestableIO/System.IO.Abstractions.git\")]\n[assembly: System.Runtime.Versioning.TargetFramework(\".NETCoreApp,Version=v9.0\", FrameworkDisplayName=\".NET 9.0\")]\n```\n\n----------------------------------------\n\nTITLE: Defining Assembly-Level Attributes for System.IO.Abstractions\nDESCRIPTION: Sets assembly-level attributes including CLS compliance, repository metadata, and assembly access.\nSOURCE: https://github.com/testableio/system.io.abstractions/blob/main/tests/TestableIO.System.IO.Abstractions.Api.Tests/Expected/TestableIO.System.IO.Abstractions.Wrappers_net6.0.txt#2025-04-22_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\n[assembly: System.CLSCompliant(true)]\n[assembly: System.Reflection.AssemblyMetadata(\"RepositoryUrl\", \"https://github.com/TestableIO/System.IO.Abstractions.git\")]\n[assembly: System.Runtime.CompilerServices.InternalsVisibleTo(@\"DynamicProxyGenAssembly2, PublicKey=0024000004800000940000000602000000240000525341310004000001000100c547cac37abd99c8db225ef2f6c8a3602f3b3606cc9891605d02baa56104f4cfc0734aa39b93bf7852f7d9266654753cc297e7d2edfe0bac1cdcf9f717241550e0a7b191195b7667bb4f64bcb8e2121380fd1d9d46ad2d92d2d15605093924cceaf74c4861eff62abf69b9291ed0a340e113be11e6a7d3113e92484cf7045cc7\")]\n[assembly: System.Runtime.Versioning.TargetFramework(\".NETCoreApp,Version=v6.0\", FrameworkDisplayName=\".NET 6.0\")]\n```\n\n----------------------------------------\n\nTITLE: Defining Abstract FileSystemInfoBase Class in C#\nDESCRIPTION: This abstract class provides a base for file system information objects. It includes properties for common file and directory attributes such as creation time, last access time, and file attributes.\nSOURCE: https://github.com/testableio/system.io.abstractions/blob/main/tests/TestableIO.System.IO.Abstractions.Api.Tests/Expected/TestableIO.System.IO.Abstractions.Wrappers_netstandard2.1.txt#2025-04-22_snippet_17\n\nLANGUAGE: C#\nCODE:\n```\n[System.Serializable]\npublic abstract class FileSystemInfoBase : System.IO.Abstractions.IFileSystemInfo\n{\n    protected FileSystemInfoBase(System.IO.Abstractions.IFileSystem fileSystem) { }\n    public abstract System.IO.FileAttributes Attributes { get; set; }\n    public abstract System.DateTime CreationTime { get; set; }\n    public abstract System.DateTime CreationTimeUtc { get; set; }\n    public abstract bool Exists { get; }\n    public abstract string Extension { get; }\n    public System.IO.Abstractions.IFileSystem FileSystem { get; }\n    public abstract string FullName { get; }\n    public abstract System.DateTime LastAccessTime { get; set; }\n    public abstract System.DateTime LastAccessTimeUtc { get; set; }\n    public abstract System.DateTime LastWriteTime { get; set; }\n```\n\n----------------------------------------\n\nTITLE: DirectoryInfo Base Class Definition\nDESCRIPTION: Abstract base class for directory information handling extending FileSystemInfoBase\nSOURCE: https://github.com/testableio/system.io.abstractions/blob/main/tests/TestableIO.System.IO.Abstractions.Api.Tests/Expected/TestableIO.System.IO.Abstractions.Wrappers_net9.0.txt#2025-04-22_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\npublic abstract class DirectoryInfoBase : System.IO.Abstractions.FileSystemInfoBase, System.IO.Abstractions.IDirectoryInfo, System.IO.Abstractions.IFileSystemInfo\n{\n    protected DirectoryInfoBase(System.IO.Abstractions.IFileSystem fileSystem) { }\n    public abstract System.IO.Abstractions.IDirectoryInfo Parent { get; }\n    public abstract System.IO.Abstractions.IDirectoryInfo Root { get; }\n    // ... [Additional abstract methods omitted for brevity]\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing FileSystemStream Methods in C#\nDESCRIPTION: Empty method implementations for a FileSystemStream class, including stream operations like read, write, flush, and disposal.\nSOURCE: https://github.com/testableio/system.io.abstractions/blob/main/tests/TestableIO.System.IO.Abstractions.Api.Tests/Expected/TestableIO.System.IO.Abstractions.TestingHelpers_net6.0.txt#2025-04-22_snippet_20\n\nLANGUAGE: C#\nCODE:\n```\nprotected override void Dispose(bool disposing) { }\npublic override void EndWrite(System.IAsyncResult asyncResult) { }\npublic override void Flush() { }\npublic override void Flush(bool flushToDisk) { }\npublic override System.Threading.Tasks.Task FlushAsync(System.Threading.CancellationToken cancellationToken) { }\n[System.Runtime.Versioning.SupportedOSPlatform(\"windows\")]\npublic object GetAccessControl() { }\n[System.Runtime.Versioning.SupportedOSPlatform(\"windows\")]\npublic object GetAccessControl(System.IO.Abstractions.IFileSystemAclSupport.AccessControlSections includeSections) { }\npublic override int Read(byte[] buffer, int offset, int count) { }\n[System.Runtime.Versioning.SupportedOSPlatform(\"windows\")]\npublic void SetAccessControl(object value) { }\npublic override void SetLength(long value) { }\npublic override void Write(System.ReadOnlySpan<byte> buffer) { }\npublic override void Write(byte[] buffer, int offset, int count) { }\npublic override System.Threading.Tasks.ValueTask WriteAsync(System.ReadOnlyMemory<byte> buffer, System.Threading.CancellationToken cancellationToken = default) { }\npublic override System.Threading.Tasks.Task WriteAsync(byte[] buffer, int offset, int count, System.Threading.CancellationToken cancellationToken) { }\npublic override void WriteByte(byte value) { }\n```\n\n----------------------------------------\n\nTITLE: Assembly Configuration in C#\nDESCRIPTION: Assembly-level attributes configuring CLS compliance, repository metadata, internal visibility, and target framework.\nSOURCE: https://github.com/testableio/system.io.abstractions/blob/main/tests/TestableIO.System.IO.Abstractions.Api.Tests/Expected/TestableIO.System.IO.Abstractions.Wrappers_netstandard2.1.txt#2025-04-22_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\n[assembly: System.CLSCompliant(true)]\n[assembly: System.Reflection.AssemblyMetadata(\"RepositoryUrl\", \"https://github.com/TestableIO/System.IO.Abstractions.git\")]\n[assembly: System.Runtime.CompilerServices.InternalsVisibleTo(@\"DynamicProxyGenAssembly2, PublicKey=0024000004800000940000000602000000240000525341310004000001000100c547cac37abd99c8db225ef2f6c8a3602f3b3606cc9891605d02baa56104f4cfc0734aa39b93bf7852f7d9266654753cc297e7d2edfe0bac1cdcf9f717241550e0a7b191195b7667bb4f64bcb8e2121380fd1d9d46ad2d92d2d15605093924cceaf74c4861eff62abf69b9291ed0a340e113be11e6a7d3113e92484cf7045cc7\")]\n[assembly: System.Runtime.Versioning.TargetFramework(\".NETStandard,Version=v2.1\", FrameworkDisplayName=\".NET Standard 2.1\")]\n```\n\n----------------------------------------\n\nTITLE: Implementing DirectoryInfo Wrapper with IFileSystemAclSupport in C#\nDESCRIPTION: Defines the `DirectoryInfoWrapper` class, inheriting from `System.IO.Abstractions.DirectoryInfoBase` and implementing `IFileSystemAclSupport`. It wraps a `System.IO.DirectoryInfo` instance, taking an `IFileSystem` and the instance in its constructor. The class overrides properties (like Attributes, Timestamps, Exists, FullName, Parent, Root) and methods (like Create, Delete, Enumerate*, Get*, MoveTo, Refresh, ResolveLinkTarget) defined in the base class, delegating calls to the wrapped `DirectoryInfo` instance. It also implements ACL-related methods (`GetAccessControl`, `SetAccessControl`) specific to Windows.\nSOURCE: https://github.com/testableio/system.io.abstractions/blob/main/tests/TestableIO.System.IO.Abstractions.Api.Tests/Expected/TestableIO.System.IO.Abstractions.Wrappers_net6.0.txt#2025-04-22_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\n    [System.Serializable]\n    public class DirectoryInfoWrapper : System.IO.Abstractions.DirectoryInfoBase, System.IO.Abstractions.IFileSystemAclSupport\n    {\n        public DirectoryInfoWrapper(System.IO.Abstractions.IFileSystem fileSystem, System.IO.DirectoryInfo instance) { }\n        public override System.IO.FileAttributes Attributes { get; set; }\n        public override System.DateTime CreationTime { get; set; }\n        public override System.DateTime CreationTimeUtc { get; set; }\n        public override bool Exists { get; }\n        public override string Extension { get; }\n        public override string FullName { get; }\n        public override System.DateTime LastAccessTime { get; set; }\n        public override System.DateTime LastAccessTimeUtc { get; set; }\n        public override System.DateTime LastWriteTime { get; set; }\n        public override System.DateTime LastWriteTimeUtc { get; set; }\n        public override string LinkTarget { get; }\n        public override string Name { get; }\n        public override System.IO.Abstractions.IDirectoryInfo Parent { get; }\n        public override System.IO.Abstractions.IDirectoryInfo Root { get; }\n        public override void Create() { }\n        public override void CreateAsSymbolicLink(string pathToTarget) { }\n        public override System.IO.Abstractions.IDirectoryInfo CreateSubdirectory(string path) { }\n        public override void Delete() { }\n        public override void Delete(bool recursive) { }\n        public override System.Collections.Generic.IEnumerable<System.IO.Abstractions.IDirectoryInfo> EnumerateDirectories() { }\n        public override System.Collections.Generic.IEnumerable<System.IO.Abstractions.IDirectoryInfo> EnumerateDirectories(string searchPattern) { }\n        public override System.Collections.Generic.IEnumerable<System.IO.Abstractions.IDirectoryInfo> EnumerateDirectories(string searchPattern, System.IO.EnumerationOptions enumerationOptions) { }\n        public override System.Collections.Generic.IEnumerable<System.IO.Abstractions.IDirectoryInfo> EnumerateDirectories(string searchPattern, System.IO.SearchOption searchOption) { }\n        public override System.Collections.Generic.IEnumerable<System.IO.Abstractions.IFileSystemInfo> EnumerateFileSystemInfos() { }\n        public override System.Collections.Generic.IEnumerable<System.IO.Abstractions.IFileSystemInfo> EnumerateFileSystemInfos(string searchPattern) { }\n        public override System.Collections.Generic.IEnumerable<System.IO.Abstractions.IFileSystemInfo> EnumerateFileSystemInfos(string searchPattern, System.IO.EnumerationOptions enumerationOptions) { }\n        public override System.Collections.Generic.IEnumerable<System.IO.Abstractions.IFileSystemInfo> EnumerateFileSystemInfos(string searchPattern, System.IO.SearchOption searchOption) { }\n        public override System.Collections.Generic.IEnumerable<System.IO.Abstractions.IFileInfo> EnumerateFiles() { }\n        public override System.Collections.Generic.IEnumerable<System.IO.Abstractions.IFileInfo> EnumerateFiles(string searchPattern) { }\n        public override System.Collections.Generic.IEnumerable<System.IO.Abstractions.IFileInfo> EnumerateFiles(string searchPattern, System.IO.EnumerationOptions enumerationOptions) { }\n        public override System.Collections.Generic.IEnumerable<System.IO.Abstractions.IFileInfo> EnumerateFiles(string searchPattern, System.IO.SearchOption searchOption) { }\n        [System.Runtime.Versioning.SupportedOSPlatform(\"windows\")]\n        public object GetAccessControl() { }\n        [System.Runtime.Versioning.SupportedOSPlatform(\"windows\")]\n        public object GetAccessControl(System.IO.Abstractions.IFileSystemAclSupport.AccessControlSections includeSections) { }\n        public override System.IO.Abstractions.IDirectoryInfo[] GetDirectories() { }\n        public override System.IO.Abstractions.IDirectoryInfo[] GetDirectories(string searchPattern) { }\n        public override System.IO.Abstractions.IDirectoryInfo[] GetDirectories(string searchPattern, System.IO.EnumerationOptions enumerationOptions) { }\n        public override System.IO.Abstractions.IDirectoryInfo[] GetDirectories(string searchPattern, System.IO.SearchOption searchOption) { }\n        public override System.IO.Abstractions.IFileSystemInfo[] GetFileSystemInfos() { }\n        public override System.IO.Abstractions.IFileSystemInfo[] GetFileSystemInfos(string searchPattern) { }\n        public override System.IO.Abstractions.IFileSystemInfo[] GetFileSystemInfos(string searchPattern, System.IO.EnumerationOptions enumerationOptions) { }\n        public override System.IO.Abstractions.IFileSystemInfo[] GetFileSystemInfos(string searchPattern, System.IO.SearchOption searchOption) { }\n        public override System.IO.Abstractions.IFileInfo[] GetFiles() { }\n        public override System.IO.Abstractions.IFileInfo[] GetFiles(string searchPattern) { }\n        public override System.IO.Abstractions.IFileInfo[] GetFiles(string searchPattern, System.IO.EnumerationOptions enumerationOptions) { }\n        public override System.IO.Abstractions.IFileInfo[] GetFiles(string searchPattern, System.IO.SearchOption searchOption) { }\n        public override void MoveTo(string destDirName) { }\n        public override void Refresh() { }\n        public override System.IO.Abstractions.IFileSystemInfo ResolveLinkTarget(bool returnFinalTarget) { }\n        [System.Runtime.Versioning.SupportedOSPlatform(\"windows\")]\n        public void SetAccessControl(object value) { }\n        public override string ToString() { }\n    }\n```\n\n----------------------------------------\n\nTITLE: Defining TimeAdjustments Enum in C#\nDESCRIPTION: This enumeration defines flags for different types of time adjustments that can be applied to file system entities.\nSOURCE: https://github.com/testableio/system.io.abstractions/blob/main/tests/TestableIO.System.IO.Abstractions.Api.Tests/Expected/TestableIO.System.IO.Abstractions.TestingHelpers_net6.0.txt#2025-04-22_snippet_31\n\nLANGUAGE: C#\nCODE:\n```\n[System.Flags]\npublic enum TimeAdjustments\n{\n    None = 0,\n    CreationTime = 1,\n    LastAccessTime = 2,\n    LastWriteTime = 4,\n    All = -1,\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Assembly Metadata and Target Framework\nDESCRIPTION: Assembly level attributes defining repository URL and target .NET framework version\nSOURCE: https://github.com/testableio/system.io.abstractions/blob/main/tests/TestableIO.System.IO.Abstractions.Api.Tests/Expected/TestableIO.System.IO.Abstractions.TestingHelpers_net472.txt#2025-04-22_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\n[assembly: System.Reflection.AssemblyMetadata(\"RepositoryUrl\", \"https://github.com/TestableIO/System.IO.Abstractions.git\")]\n[assembly: System.Runtime.Versioning.TargetFramework(\".NETFramework,Version=v4.7.2\", FrameworkDisplayName=\".NET Framework 4.7.2\")]\n```\n\n----------------------------------------\n\nTITLE: Defining the Abstract DriveInfoBase Class (C#)\nDESCRIPTION: Defines the abstract `DriveInfoBase` class, which implements `IDriveInfo` and `IFileSystemEntity` from System.IO.Abstractions. It provides a base constructor accepting `IFileSystem` and declares abstract properties mirroring `System.IO.DriveInfo` (like `AvailableFreeSpace`, `DriveFormat`, `Name`, `TotalSize`, etc.) and an implicit conversion operator from `System.IO.DriveInfo`. This class serves as a foundation for mockable drive information.\nSOURCE: https://github.com/testableio/system.io.abstractions/blob/main/tests/TestableIO.System.IO.Abstractions.Api.Tests/Expected/TestableIO.System.IO.Abstractions.Wrappers_net6.0.txt#2025-04-22_snippet_9\n\nLANGUAGE: csharp\nCODE:\n```\n    [System.Serializable]\n    public abstract class DriveInfoBase : System.IO.Abstractions.IDriveInfo, System.IO.Abstractions.IFileSystemEntity\n    {\n        protected DriveInfoBase(System.IO.Abstractions.IFileSystem fileSystem) { }\n        public abstract long AvailableFreeSpace { get; }\n        public abstract string DriveFormat { get; }\n        public abstract System.IO.DriveType DriveType { get; }\n        public System.IO.Abstractions.IFileSystem FileSystem { get; }\n        public abstract bool IsReady { get; }\n        public abstract string Name { get; }\n        public abstract System.IO.Abstractions.IDirectoryInfo RootDirectory { get; }\n        public abstract long TotalFreeSpace { get; }\n        public abstract long TotalSize { get; }\n        public abstract string VolumeLabel { get; set; }\n        public static System.IO.Abstractions.DriveInfoBase op_Implicit(System.IO.DriveInfo driveInfo) { }\n    }\n```\n\n----------------------------------------\n\nTITLE: Directory ACL Extension Methods\nDESCRIPTION: Extension methods for IDirectory interface providing directory access control functionality including creation and access control management.\nSOURCE: https://github.com/testableio/system.io.abstractions/blob/main/tests/TestableIO.System.IO.Abstractions.Api.Tests/Expected/TestableIO.System.IO.Abstractions.Wrappers_netstandard2.1.txt#2025-04-22_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\npublic static class DirectoryAclExtensions\n{\n    public static void CreateDirectory(this System.IO.Abstractions.IDirectory directory, string path, System.Security.AccessControl.DirectorySecurity directorySecurity) { }\n    public static System.Security.AccessControl.DirectorySecurity GetAccessControl(this System.IO.Abstractions.IDirectory directory, string path) { }\n    public static System.Security.AccessControl.DirectorySecurity GetAccessControl(this System.IO.Abstractions.IDirectory directory, string path, System.Security.AccessControl.AccessControlSections includeSections) { }\n    public static void SetAccessControl(this System.IO.Abstractions.IDirectory directory, string path, System.Security.AccessControl.DirectorySecurity directorySecurity) { }\n}\n```\n\n----------------------------------------\n\nTITLE: FileVersionInfo Abstract Base Implementation in C#\nDESCRIPTION: Abstract base class defining the contract for file version information access with properties for version details, company information, and file metadata.\nSOURCE: https://github.com/testableio/system.io.abstractions/blob/main/tests/TestableIO.System.IO.Abstractions.Api.Tests/Expected/TestableIO.System.IO.Abstractions.Wrappers_net8.0.txt#2025-04-22_snippet_19\n\nLANGUAGE: C#\nCODE:\n```\npublic abstract class FileVersionInfoBase : System.IO.Abstractions.IFileVersionInfo\n{\n    protected FileVersionInfoBase() { }\n    public abstract string Comments { get; }\n    public abstract string CompanyName { get; }\n    // ... other properties\n    public abstract string ToString();\n    public static System.IO.Abstractions.FileVersionInfoBase op_Implicit(System.Diagnostics.FileVersionInfo fileVersionInfo) { }\n}\n```\n\n----------------------------------------\n\nTITLE: Assembly Attributes Declaration for System.IO.Abstractions\nDESCRIPTION: Assembly-level attributes that define compiler and runtime behaviors for the library. Includes CLS compliance, repository URL, internal visibility, and target framework specification.\nSOURCE: https://github.com/testableio/system.io.abstractions/blob/main/tests/TestableIO.System.IO.Abstractions.Api.Tests/Expected/TestableIO.System.IO.Abstractions.Wrappers_net472.txt#2025-04-22_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\n[assembly: System.CLSCompliant(true)]\n[assembly: System.Reflection.AssemblyMetadata(\"RepositoryUrl\", \"https://github.com/TestableIO/System.IO.Abstractions.git\")]\n[assembly: System.Runtime.CompilerServices.InternalsVisibleTo(@\"DynamicProxyGenAssembly2, PublicKey=0024000004800000940000000602000000240000525341310004000001000100c547cac37abd99c8db225ef2f6c8a3602f3b3606cc9891605d02baa56104f4cfc0734aa39b93bf7852f7d9266654753cc297e7d2edfe0bac1cdcf9f717241550e0a7b191195b7667bb4f64bcb8e2121380fd1d9d46ad2d92d2d15605093924cceaf74c4861eff62abf69b9291ed0a340e113be11e6a7d3113e92484cf7045cc7\")]\n[assembly: System.Runtime.Versioning.TargetFramework(\".NETFramework,Version=v4.7.2\", FrameworkDisplayName=\".NET Framework 4.7.2\")]\n```\n\n----------------------------------------\n\nTITLE: Assembly Attributes and Configuration\nDESCRIPTION: Assembly-level attributes defining compliance, versioning and internals visibility\nSOURCE: https://github.com/testableio/system.io.abstractions/blob/main/tests/TestableIO.System.IO.Abstractions.Api.Tests/Expected/TestableIO.System.IO.Abstractions.Wrappers_net9.0.txt#2025-04-22_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\n[assembly: System.CLSCompliant(true)]\n[assembly: System.Reflection.AssemblyMetadata(\"RepositoryUrl\", \"https://github.com/TestableIO/System.IO.Abstractions.git\")]\n[assembly: System.Runtime.CompilerServices.InternalsVisibleTo(@\"DynamicProxyGenAssembly2, PublicKey=0024000004800000940000000602000000240000525341310004000001000100c547cac37abd99c8db225ef2f6c8a3602f3b3606cc9891605d02baa56104f4cfc0734aa39b93bf7852f7d9266654753cc297e7d2edfe0bac1cdcf9f717241550e0a7b191195b7667bb4f64bcb8e2121380fd1d9d46ad2d92d2d15605093924cceaf74c4861eff62abf69b9291ed0a340e113be11e6a7d3113e92484cf7045cc7\")]\n[assembly: System.Runtime.Versioning.TargetFramework(\".NETCoreApp,Version=v9.0\", FrameworkDisplayName=\".NET 9.0\")]\n```\n\n----------------------------------------\n\nTITLE: Defining FileSystem Class in C#\nDESCRIPTION: This class implements the FileSystemBase abstract class, providing concrete implementations for various file system operations like Directory, File, and Path.\nSOURCE: https://github.com/testableio/system.io.abstractions/blob/main/tests/TestableIO.System.IO.Abstractions.Api.Tests/Expected/TestableIO.System.IO.Abstractions.Wrappers_net472.txt#2025-04-22_snippet_16\n\nLANGUAGE: C#\nCODE:\n```\n[System.Serializable]\npublic class FileSystem : System.IO.Abstractions.FileSystemBase\n{\n    public FileSystem() { }\n    public override System.IO.Abstractions.IDirectory Directory { get; }\n    public override System.IO.Abstractions.IDirectoryInfoFactory DirectoryInfo { get; }\n    public override System.IO.Abstractions.IDriveInfoFactory DriveInfo { get; }\n    public override System.IO.Abstractions.IFile File { get; }\n    public override System.IO.Abstractions.IFileInfoFactory FileInfo { get; }\n    public override System.IO.Abstractions.IFileStreamFactory FileStream { get; }\n    public override System.IO.Abstractions.IFileSystemWatcherFactory FileSystemWatcher { get; }\n    public override System.IO.Abstractions.IFileVersionInfoFactory FileVersionInfo { get; }\n    public override System.IO.Abstractions.IPath Path { get; }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing File Property Accessors in C#\nDESCRIPTION: Defines various file property accessors and methods that override base implementations. These properties provide access to file metadata such as name, path, size and timestamps.\nSOURCE: https://github.com/testableio/system.io.abstractions/blob/main/tests/TestableIO.System.IO.Abstractions.Api.Tests/Expected/TestableIO.System.IO.Abstractions.TestingHelpers_netstandard2.0.txt#2025-04-22_snippet_11\n\nLANGUAGE: C#\nCODE:\n```\npublic override string DirectoryName { get; }\npublic override bool Exists { get; }\npublic override string Extension { get; }\npublic override string FullName { get; }\npublic override bool IsReadOnly { get; set; }\npublic override System.DateTime LastAccessTime { get; set; }\npublic override System.DateTime LastAccessTimeUtc { get; set; }\npublic override System.DateTime LastWriteTime { get; set; }\npublic override System.DateTime LastWriteTimeUtc { get; set; }\npublic override long Length { get; }\npublic override string Name { get; }\n```\n\n----------------------------------------\n\nTITLE: Directory Retrieval Methods in C#\nDESCRIPTION: Methods to retrieve directory information using optional search patterns and options. These methods are part of a mock implementation for unit testing file system interactions.\nSOURCE: https://github.com/testableio/system.io.abstractions/blob/main/tests/TestableIO.System.IO.Abstractions.Api.Tests/Expected/TestableIO.System.IO.Abstractions.TestingHelpers_net6.0.txt#2025-04-22_snippet_7\n\nLANGUAGE: C#\nCODE:\n```\npublic override System.IO.Abstractions.IDirectoryInfo[] GetDirectories() { }\n```\n\nLANGUAGE: C#\nCODE:\n```\npublic override System.IO.Abstractions.IDirectoryInfo[] GetDirectories(string searchPattern) { }\n```\n\nLANGUAGE: C#\nCODE:\n```\npublic override System.IO.Abstractions.IDirectoryInfo[] GetDirectories(string searchPattern, System.IO.EnumerationOptions enumerationOptions) { }\n```\n\nLANGUAGE: C#\nCODE:\n```\npublic override System.IO.Abstractions.IDirectoryInfo[] GetDirectories(string searchPattern, System.IO.SearchOption searchOption) { }\n```"
  }
]