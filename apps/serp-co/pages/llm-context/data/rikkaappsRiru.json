[
  {
    "owner": "rikkaapps",
    "repo": "riru",
    "content": "TITLE: Building Riru Libraries in CMake\nDESCRIPTION: Defines the build targets for the Riru project, including the utils static library, main riru shared library, riruhide library, and riruloader. Configures dependencies, include directories, and source files for each component.\nSOURCE: https://github.com/rikkaapps/riru/blob/master/riru/src/main/cpp/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nfind_package(xhook REQUIRED CONFIG)\nfind_package(cxx REQUIRED CONFIG)\nfind_package(proc-maps-parser REQUIRED CONFIG)\n\ninclude_directories(include)\ninclude_directories(include_riru)\n\nadd_library(utils STATIC\n        util/android_prop.cpp\n        util/elf_util.cpp\n        util/dl.cpp\n        util/rirud.cpp)\ntarget_link_libraries(utils cxx::cxx)\n\nadd_library(riru SHARED\n        entry.cpp\n        jni_hooks.cpp\n        hide_utils.cpp\n        module.cpp\n        magisk.cpp\n        ${CMAKE_CURRENT_BINARY_DIR}/config.cpp)\ntarget_include_directories(riru PRIVATE ${CMAKE_SOURCE_DIR})\ntarget_link_libraries(riru log utils xhook::xhook cxx::cxx proc-maps-parser::proc-maps-parser)\n\nadd_library(riruhide SHARED hide/hide.cpp)\ntarget_include_directories(riruhide PRIVATE ${CMAKE_SOURCE_DIR})\ntarget_link_libraries(riruhide log utils cxx::cxx proc-maps-parser::proc-maps-parser)\n\nif (\"${ANDROID_ABI}\" STREQUAL \"x86\" OR \"${ANDROID_ABI}\" STREQUAL \"x86_64\")\n    add_definitions(-DHAS_NATIVE_BRIDGE)\nendif ()\n\nadd_library(riruloader SHARED loader/loader.cpp ${CMAKE_CURRENT_BINARY_DIR}/config.cpp)\ntarget_link_libraries(riruloader log utils cxx::cxx)\n```\n\n----------------------------------------\n\nTITLE: Setting Compiler and Linker Flags for Riru in CMake\nDESCRIPTION: Configures compiler and linker flags for the Riru project with different settings for Debug and Release builds. Includes Android-specific flags like '-ffixed-x18' for register reservation and various optimization settings.\nSOURCE: https://github.com/rikkaapps/riru/blob/master/riru/src/main/cpp/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(LINKER_FLAGS \"-ffixed-x18 -Wl,--hash-style=both\")\nset(C_FLAGS \"-Werror=format -fdata-sections -ffunction-sections -fno-exceptions -fno-rtti -fno-threadsafe-statics -D__FILE__=__FILE_NAME__ -Wno-builtin-macro-redefined\")\n\nif (NOT CMAKE_BUILD_TYPE STREQUAL \"Debug\")\n    set(C_FLAGS \"${C_FLAGS} -Os -fvisibility=hidden -fvisibility-inlines-hidden -fno-asynchronous-unwind-tables -fno-unwind-tables\")\n    set(LINKER_FLAGS \"${LINKER_FLAGS} -Wl,-exclude-libs,ALL -Wl,--gc-sections\")\nelse ()\n    set(C_FLAGS \"${C_FLAGS} -Og\")\nendif ()\n\nstring(TOUPPER CMAKE_CXX_FLAGS_${CMAKE_BUILD_TYPE} CXX_FLAGS_WITH_BUILD_TYPE)\nstring(TOUPPER CMAKE_C_FLAGS_${CMAKE_BUILD_TYPE} C_FLAGS_WITH_BUILD_TYPE)\n\nset(${CXX_FLAGS_WITH_BUILD_TYPE} \"${${CXX_FLAGS_WITH_BUILD_TYPE}} ${C_FLAGS}\")\nset(${C_FLAGS_WITH_BUILD_TYPE} \"${${CXX_FLAGS_WITH_BUILD_TYPE}} ${C_FLAGS}\")\n\nset(CMAKE_SHARED_LINKER_FLAGS \"${CMAKE_SHARED_LINKER_FLAGS} ${LINKER_FLAGS}\")\nset(CMAKE_MODULE_LINKER_FLAGS \"${CMAKE_MODULE_LINKER_FLAGS} ${LINKER_FLAGS}\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Riru Project with Version Requirements in CMake\nDESCRIPTION: Sets up the basic CMake project configuration for Riru, including ccache support and version requirement checks. Requires RIRU_VERSION_NAME, RIRU_VERSION_CODE, RIRU_API_VERSION, and RIRU_MIN_API_VERSION to be defined.\nSOURCE: https://github.com/rikkaapps/riru/blob/master/riru/src/main/cpp/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.4.1)\n\nproject(\"riru\")\n\nfind_program(CCACHE ccache)\n\nif (CCACHE)\n    set(CMAKE_CXX_COMPILER_LAUNCHER ${CCACHE})\n    set(CMAKE_C_COMPILER_LAUNCHER ${CCACHE})\nendif ()\n\nmessage(\"Build type: ${CMAKE_BUILD_TYPE}\")\n\n\nif (NOT DEFINED RIRU_VERSION_NAME)\n    message(FATAL_ERROR \"RIRU_VERSION_NAME is not set\")\nendif ()\n\nif (NOT DEFINED RIRU_VERSION_CODE)\n    message(FATAL_ERROR \"RIRU_VERSION_CODE is not set\")\nendif ()\n\nif (NOT DEFINED RIRU_API_VERSION)\n    message(FATAL_ERROR \"RIRU_API_VERSION is not set\")\nendif ()\n\nif (NOT DEFINED RIRU_MIN_API_VERSION)\n    message(FATAL_ERROR \"RIRU_MIN_API_VERSION is not set\")\nendif ()\n\nconfigure_file(template/config.cpp config.cpp)\n```\n\n----------------------------------------\n\nTITLE: Post-Build Stripping of Release Libraries in CMake\nDESCRIPTION: Adds post-build commands to strip debug symbols from the compiled libraries when building in Release mode. This reduces the size of the final binaries by removing sections that aren't needed at runtime.\nSOURCE: https://github.com/rikkaapps/riru/blob/master/riru/src/main/cpp/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nif (NOT CMAKE_BUILD_TYPE STREQUAL \"Debug\")\n    add_custom_command(TARGET riru POST_BUILD\n            COMMAND ${CMAKE_STRIP} --strip-all --remove-section=.comment \"${CMAKE_LIBRARY_OUTPUT_DIRECTORY}/libriru.so\")\n    add_custom_command(TARGET riruhide POST_BUILD\n            COMMAND ${CMAKE_STRIP} --strip-all --remove-section=.comment \"${CMAKE_LIBRARY_OUTPUT_DIRECTORY}/libriruhide.so\")\n    add_custom_command(TARGET riruloader POST_BUILD\n            COMMAND ${CMAKE_STRIP} --strip-all --remove-section=.comment \"${CMAKE_LIBRARY_OUTPUT_DIRECTORY}/libriruloader.so\")\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Building Riru Module using Gradle Tasks\nDESCRIPTION: Provides a list of Gradle tasks available for building, deploying, and flashing the Riru Magisk module. These tasks automate assembling the zip archive, transferring it to the device via adb, and installing it using Magisk commands.\nSOURCE: https://github.com/rikkaapps/riru/blob/master/README.md#_snippet_0\n\nLANGUAGE: Gradle\nCODE:\n```\n:riru:assembleDebug/Release\n```\n\nLANGUAGE: Gradle\nCODE:\n```\n:riru:pushDebug/Release\n```\n\nLANGUAGE: Gradle\nCODE:\n```\n:riru:flashDebug/Release\n```\n\nLANGUAGE: Gradle\nCODE:\n```\n:riru:flashAndRebootDebug/Release\n```\n\n----------------------------------------\n\nTITLE: Installing Magisk Module via ADB Shell\nDESCRIPTION: Command executed via adb shell with superuser (su) privileges to install a Magisk module zip file using the Magisk command-line tool. This command forms the basis of the `:riru:flashDebug/Release` Gradle task.\nSOURCE: https://github.com/rikkaapps/riru/blob/master/README.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nadb shell su -c magisk --install-module\n```"
  }
]