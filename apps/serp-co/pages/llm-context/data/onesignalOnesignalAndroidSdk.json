[
  {
    "owner": "onesignal",
    "repo": "onesignal-android-sdk",
    "content": "TITLE: Adding OneSignal Dependency in Gradle\nDESCRIPTION: Configuration for adding the entire OneSignal SDK v5.0.0 as a dependency in the app's build.gradle file.\nSOURCE: https://github.com/OneSignal/OneSignal-Android-SDK/blob/main/MIGRATION_GUIDE.md#2025-04-18_snippet_0\n\nLANGUAGE: gradle\nCODE:\n```\ndependencies {\n  implementation 'com.onesignal:OneSignal:5.0.0'\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing OneSignal SDK in Java\nDESCRIPTION: Java code for initializing the OneSignal SDK with context and app ID, including optional notification permission request.\nSOURCE: https://github.com/OneSignal/OneSignal-Android-SDK/blob/main/MIGRATION_GUIDE.md#2025-04-18_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nOneSignal.initWithContext(this, ONESIGNAL_APP_ID);\n// requestPermission will show the native Android notification permission prompt.\n// We recommend removing the following code and instead using an In-App Message to prompt for notification permission.\nOneSignal.getNotifications().requestPermission(true, Continue.none());\n```\n\n----------------------------------------\n\nTITLE: Initializing OneSignal SDK in Kotlin\nDESCRIPTION: Kotlin code for initializing the OneSignal SDK with context and app ID, including optional notification permission request.\nSOURCE: https://github.com/OneSignal/OneSignal-Android-SDK/blob/main/MIGRATION_GUIDE.md#2025-04-18_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nOneSignal.initWithContext(this, ONESIGNAL_APP_ID)\n// requestPermission will show the native Android notification permission prompt.\n// We recommend removing the following code and instead using an In-App Message to prompt for notification permission.\nOneSignal.Notifications.requestPermission(true)\n```\n\n----------------------------------------\n\nTITLE: Initializing OneSignal SDK in Kotlin\nDESCRIPTION: Initialize the OneSignal SDK during application startup. This method sets up the SDK with the provided context and app ID.\nSOURCE: https://github.com/OneSignal/OneSignal-Android-SDK/blob/main/MIGRATION_GUIDE.md#2025-04-18_snippet_16\n\nLANGUAGE: kotlin\nCODE:\n```\nfun initWithContext(context: Context, appId: String)\n```\n\n----------------------------------------\n\nTITLE: Initializing OneSignal SDK in Java\nDESCRIPTION: Initialize the OneSignal SDK during application startup. This method sets up the SDK with the provided context and app ID.\nSOURCE: https://github.com/OneSignal/OneSignal-Android-SDK/blob/main/MIGRATION_GUIDE.md#2025-04-18_snippet_17\n\nLANGUAGE: java\nCODE:\n```\nvoid initWithContext(Context context, String appId)\n```\n\n----------------------------------------\n\nTITLE: Adding Individual OneSignal Modules in Gradle\nDESCRIPTION: Alternative configuration for adding specific OneSignal modules as dependencies in the app's build.gradle file for more granular control.\nSOURCE: https://github.com/OneSignal/OneSignal-Android-SDK/blob/main/MIGRATION_GUIDE.md#2025-04-18_snippet_1\n\nLANGUAGE: gradle\nCODE:\n```\ndependencies {\n  implementation 'com.onesignal:core:5.0.0'\n  implementation 'com.onesignal:in-app-messages:5.0.0'\n  implementation 'com.onesignal:notifications:5.0.0'\n  implementation 'com.onesignal:location:5.0.0'\n}\n```\n\n----------------------------------------\n\nTITLE: Logging in User with OneSignal in Kotlin\nDESCRIPTION: Log in a user to OneSignal using their external ID and optional JWT bearer token. This switches the user context and handles push notification and in-app messaging subscriptions.\nSOURCE: https://github.com/OneSignal/OneSignal-Android-SDK/blob/main/MIGRATION_GUIDE.md#2025-04-18_snippet_18\n\nLANGUAGE: kotlin\nCODE:\n```\nfun login(externalId: String, jwtBearerToken: String? = null)\n```\n\n----------------------------------------\n\nTITLE: Logging in User with OneSignal in Java\nDESCRIPTION: Log in a user to OneSignal using their external ID and optional JWT bearer token. This switches the user context and handles push notification and in-app messaging subscriptions.\nSOURCE: https://github.com/OneSignal/OneSignal-Android-SDK/blob/main/MIGRATION_GUIDE.md#2025-04-18_snippet_19\n\nLANGUAGE: java\nCODE:\n```\nvoid login(String externalId, Continuation<? super Unit> completion)\n```\n\nLANGUAGE: java\nCODE:\n```\nvoid login(String externalId, String jwtBearerToken, Continuation<? super Unit> completion)\n```\n\n----------------------------------------\n\nTITLE: User Login in Kotlin\nDESCRIPTION: Kotlin code for logging in a user with an external ID, which associates the device's push subscription with the specified user.\nSOURCE: https://github.com/OneSignal/OneSignal-Android-SDK/blob/main/MIGRATION_GUIDE.md#2025-04-18_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\nOneSignal.login(\"USER_EXTERNAL_ID\")\n```\n\n----------------------------------------\n\nTITLE: User Login in Java\nDESCRIPTION: Java code for logging in a user with an external ID, which associates the device's push subscription with the specified user.\nSOURCE: https://github.com/OneSignal/OneSignal-Android-SDK/blob/main/MIGRATION_GUIDE.md#2025-04-18_snippet_4\n\nLANGUAGE: java\nCODE:\n```\nOneSignal.login(\"USER_EXTERNAL_ID\");\n```\n\n----------------------------------------\n\nTITLE: User Management Methods in OneSignal Android SDK\nDESCRIPTION: Core user management methods including subscription handling, language settings, user identification, and observer patterns.\nSOURCE: https://github.com/OneSignal/OneSignal-Android-SDK/blob/main/MIGRATION_GUIDE.md#2025-04-18_snippet_22\n\nLANGUAGE: kotlin\nCODE:\n```\nval pushSubscription: IPushSubscription\nfun setLanguage(value: String)\nfun pushSubscription.addChangeHandler(handler: ISubscriptionChangedHandler)\nval onesignalId: String\nval externalId: String\nfun addObserver(observer: IUserStateObserver)\nfun removeObserver(observer: IUserStateObserver)\n```\n\nLANGUAGE: java\nCODE:\n```\nIPushSubscription getPushSubscription()\nvoid setLanguage(String value)\nvoid pushSubscription.addChangeHandler(ISubscriptionChangedHandler handler)\nString getOnesignalId()\nString getExternalId()\nvoid addObserve(IUserStateObserver observer)\nvoid removeObserver(IUserStateObserver observer)\n```\n\n----------------------------------------\n\nTITLE: Logging out User from OneSignal in Kotlin\nDESCRIPTION: Log out the currently logged-in user from OneSignal. This creates a new device-scoped user without a retrievable identity.\nSOURCE: https://github.com/OneSignal/OneSignal-Android-SDK/blob/main/MIGRATION_GUIDE.md#2025-04-18_snippet_20\n\nLANGUAGE: kotlin\nCODE:\n```\nfun logout()\n```\n\n----------------------------------------\n\nTITLE: Logging out User from OneSignal in Java\nDESCRIPTION: Log out the currently logged-in user from OneSignal. This creates a new device-scoped user without a retrievable identity.\nSOURCE: https://github.com/OneSignal/OneSignal-Android-SDK/blob/main/MIGRATION_GUIDE.md#2025-04-18_snippet_21\n\nLANGUAGE: java\nCODE:\n```\nvoid logout(Continuation<? super Unit> completion)\n```\n\n----------------------------------------\n\nTITLE: User Logout in Java\nDESCRIPTION: Java code for logging out a user, which reverts to a device-scoped user that becomes the new owner of the device's push subscription.\nSOURCE: https://github.com/OneSignal/OneSignal-Android-SDK/blob/main/MIGRATION_GUIDE.md#2025-04-18_snippet_6\n\nLANGUAGE: java\nCODE:\n```\nOneSignal.logout();\n```\n\n----------------------------------------\n\nTITLE: User Logout in Kotlin\nDESCRIPTION: Kotlin code for logging out a user, which reverts to a device-scoped user that becomes the new owner of the device's push subscription.\nSOURCE: https://github.com/OneSignal/OneSignal-Android-SDK/blob/main/MIGRATION_GUIDE.md#2025-04-18_snippet_7\n\nLANGUAGE: kotlin\nCODE:\n```\nOneSignal.logout()\n```\n\n----------------------------------------\n\nTITLE: Requesting Push Notification Permission in OneSignal Android SDK\nDESCRIPTION: Prompts the user for permission to send push notifications using the native OS dialog. If enabled, automatically adds a push subscription for the device. Can optionally fall back to settings if permission is denied.\nSOURCE: https://github.com/OneSignal/OneSignal-Android-SDK/blob/main/MIGRATION_GUIDE.md#2025-04-18_snippet_28\n\nLANGUAGE: kotlin\nCODE:\n```\nfun suspend requestPermission(fallbackToSettings: Boolean): Boolean\n```\n\nLANGUAGE: java\nCODE:\n```\nvoid requestPermission(boolean fallbackToSettings, Continuation<? super Boolean> completion)\n```\n\n----------------------------------------\n\nTITLE: Checking Push Notification Permission in OneSignal Android SDK\nDESCRIPTION: Gets whether the app has permission to send push notifications. Returns a boolean value indicating permission status.\nSOURCE: https://github.com/OneSignal/OneSignal-Android-SDK/blob/main/MIGRATION_GUIDE.md#2025-04-18_snippet_27\n\nLANGUAGE: kotlin\nCODE:\n```\nval permission: Boolean\n```\n\nLANGUAGE: java\nCODE:\n```\nboolean getPermission()\n```\n\n----------------------------------------\n\nTITLE: Opting Out of Push Notifications in Java and Kotlin\nDESCRIPTION: Shows how to opt out of receiving push notifications on the current device using both Java and Kotlin syntax.\nSOURCE: https://github.com/OneSignal/OneSignal-Android-SDK/blob/main/MIGRATION_GUIDE.md#2025-04-18_snippet_9\n\nLANGUAGE: Java\nCODE:\n```\npushSubscription.optOut();\n```\n\nLANGUAGE: Kotlin\nCODE:\n```\npushSubscription.optOut()\n```\n\n----------------------------------------\n\nTITLE: Opting In to Push Notifications in Java and Kotlin\nDESCRIPTION: Demonstrates how to opt back in to receiving push notifications using both Java and Kotlin syntax.\nSOURCE: https://github.com/OneSignal/OneSignal-Android-SDK/blob/main/MIGRATION_GUIDE.md#2025-04-18_snippet_10\n\nLANGUAGE: Java\nCODE:\n```\npushSubscription.optIn();\n```\n\nLANGUAGE: Kotlin\nCODE:\n```\npushSubscription.optIn()\n```\n\n----------------------------------------\n\nTITLE: User Alias Management in OneSignal Android SDK\nDESCRIPTION: Methods for managing user aliases including adding, removing, and bulk operations for user identification.\nSOURCE: https://github.com/OneSignal/OneSignal-Android-SDK/blob/main/MIGRATION_GUIDE.md#2025-04-18_snippet_23\n\nLANGUAGE: kotlin\nCODE:\n```\nfun addAlias(label: String, id: String)\nfun addAliases(aliases: Map<String, String>)\nfun removeAlias(label: String)\nfun removeAliases(labels: Collection<String>)\n```\n\nLANGUAGE: java\nCODE:\n```\nvoid addAlias(String label, String id)\nvoid addAliases(Map<String, String> aliases)\nvoid removeAlias(String label)\nvoid removeAliases(Collection<String> labels)\n```\n\n----------------------------------------\n\nTITLE: Contact Management Methods in OneSignal Android SDK\nDESCRIPTION: Methods for managing user contact information including email and SMS subscriptions.\nSOURCE: https://github.com/OneSignal/OneSignal-Android-SDK/blob/main/MIGRATION_GUIDE.md#2025-04-18_snippet_24\n\nLANGUAGE: kotlin\nCODE:\n```\nfun addEmail(email: String)\nfun removeEmail(email: String)\nfun addSms(sms: String)\nfun removeSms(sms: String)\n```\n\nLANGUAGE: java\nCODE:\n```\nvoid addEmail(String email)\nvoid removeEmail(String email)\nvoid addSms(String sms)\nvoid removeSms(String sms)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Push Subscription in Java and Kotlin\nDESCRIPTION: Demonstrates how to retrieve the current device's push subscription using both Java and Kotlin syntax.\nSOURCE: https://github.com/OneSignal/OneSignal-Android-SDK/blob/main/MIGRATION_GUIDE.md#2025-04-18_snippet_8\n\nLANGUAGE: Java\nCODE:\n```\nIPushSubscription pushSubscription = OneSignal.getUser().getPushSubscription();\n```\n\nLANGUAGE: Kotlin\nCODE:\n```\nval pushSubscription = OneSignal.User.pushSubscription\n```\n\n----------------------------------------\n\nTITLE: Tag Management in OneSignal Android SDK\nDESCRIPTION: Methods for managing user tags for targeting and personalization purposes.\nSOURCE: https://github.com/OneSignal/OneSignal-Android-SDK/blob/main/MIGRATION_GUIDE.md#2025-04-18_snippet_25\n\nLANGUAGE: kotlin\nCODE:\n```\nfun addTag(key: String, value: String)\nfun addTags(tags: Map<String, String>)\nfun removeTag(key: String)\nfun removeTags(keys: Collection<String>)\nfun getTags()\n```\n\nLANGUAGE: java\nCODE:\n```\nvoid addTag(String key, String value)\nvoid addTags(Map<String, String> tags)\nvoid removeTag(String key)\nvoid removeTags(Collection<String> keys)\nMap<String, String> getTags()\n```\n\n----------------------------------------\n\nTITLE: Implementing Push Subscription Observer in Java\nDESCRIPTION: Shows how to implement the IPushSubscriptionObserver interface and add/remove an observer in Java.\nSOURCE: https://github.com/OneSignal/OneSignal-Android-SDK/blob/main/MIGRATION_GUIDE.md#2025-04-18_snippet_11\n\nLANGUAGE: Java\nCODE:\n```\n@Override\npublic void onPushSubscriptionChange(@NonNull PushSubscriptionChangedState state) {\n    ...\n}\n\npushSubscription.addObserver(this);\n\n// To remove the observer\npushSubscription.removeObserver(this);\n```\n\n----------------------------------------\n\nTITLE: Implementing Push Subscription Observer in Kotlin\nDESCRIPTION: Demonstrates how to implement the IPushSubscriptionObserver interface and add/remove an observer in Kotlin.\nSOURCE: https://github.com/OneSignal/OneSignal-Android-SDK/blob/main/MIGRATION_GUIDE.md#2025-04-18_snippet_12\n\nLANGUAGE: Kotlin\nCODE:\n```\noverride fun onPushSubscriptionChange(state: PushSubscriptionChangedState) {\n    ...\n}\n\npushSubscription.addObserver(this)\n\n// To remove the observer\npushSubscription.removeObserver(this)\n```\n\n----------------------------------------\n\nTITLE: Adding Notification Click Listeners in OneSignal SDK (Kotlin/Java)\nDESCRIPTION: Methods for registering listeners that execute when a user clicks on a notification. These listeners allow for custom handling of notification click events.\nSOURCE: https://github.com/OneSignal/OneSignal-Android-SDK/blob/main/MIGRATION_GUIDE.md#2025-04-18_snippet_36\n\nLANGUAGE: kotlin\nCODE:\n```\nfun addClickListener(listener: INotificationClickListener)\n```\n\nLANGUAGE: java\nCODE:\n```\nvoid addClickListener(INotificationClickListener listener)\n```\n\n----------------------------------------\n\nTITLE: Managing Notification Lifecycle Listeners in OneSignal SDK (Kotlin/Java)\nDESCRIPTION: Methods for adding and removing notification lifecycle listeners to handle events when notifications are processed. These listeners run before notification lifecycle events occur.\nSOURCE: https://github.com/OneSignal/OneSignal-Android-SDK/blob/main/MIGRATION_GUIDE.md#2025-04-18_snippet_34\n\nLANGUAGE: kotlin\nCODE:\n```\nfun addForegroundLifecycleListener(listener: INotificationLifecycleListener)\n```\n\nLANGUAGE: java\nCODE:\n```\nvoid addForegroundLifecycleListener(INotificationLifecycleListener listener)\n```\n\n----------------------------------------\n\nTITLE: Adding Permission Observer in OneSignal Android SDK\nDESCRIPTION: Registers an observer that will be notified when notification permission settings change. This detects when users enable or disable notifications from system settings outside the app. Supports detection on Android 4.4+.\nSOURCE: https://github.com/OneSignal/OneSignal-Android-SDK/blob/main/MIGRATION_GUIDE.md#2025-04-18_snippet_32\n\nLANGUAGE: kotlin\nCODE:\n```\nfun addPermissionObserver(observer: IPermissionObserver)\n```\n\nLANGUAGE: java\nCODE:\n```\nvoid addPermissionObserver(IPermissionObserver observer)\n```\n\n----------------------------------------\n\nTITLE: Managing Email and SMS Subscriptions in Kotlin\nDESCRIPTION: Demonstrates how to add and remove email and SMS subscriptions using Kotlin syntax.\nSOURCE: https://github.com/OneSignal/OneSignal-Android-SDK/blob/main/MIGRATION_GUIDE.md#2025-04-18_snippet_14\n\nLANGUAGE: Kotlin\nCODE:\n```\n// Add email subscription\nOneSignal.User.addEmail(\"customer@company.com\")\n// Remove previously added email subscription\nOneSignal.User.removeEmail(\"customer@company.com\")\n\n// Add SMS subscription\nOneSignal.User.addSms(\"+15558675309\")\n// Remove previously added SMS subscription\nOneSignal.User.removeSms(\"+15558675309\")\n```\n\n----------------------------------------\n\nTITLE: Managing Email and SMS Subscriptions in Java\nDESCRIPTION: Shows how to add and remove email and SMS subscriptions using Java syntax.\nSOURCE: https://github.com/OneSignal/OneSignal-Android-SDK/blob/main/MIGRATION_GUIDE.md#2025-04-18_snippet_13\n\nLANGUAGE: Java\nCODE:\n```\n// Add email subscription\nOneSignal.getUser().addEmail(\"customer@company.com\")\n// Remove previously added email subscription\nOneSignal.getUser().removeEmail(\"customer@company.com\")\n\n// Add SMS subscription\nOneSignal.getUser().addSms(\"+15558675309\")\n// Remove previously added SMS subscription\nOneSignal.getUser().removeSms(\"+15558675309\")\n```\n\n----------------------------------------\n\nTITLE: Removing Grouped Notifications in OneSignal Android SDK\nDESCRIPTION: Cancels a group of OneSignal notifications with the provided group key. Notification grouping is a OneSignal-specific concept with no equivalent in Android's NotificationManager.\nSOURCE: https://github.com/OneSignal/OneSignal-Android-SDK/blob/main/MIGRATION_GUIDE.md#2025-04-18_snippet_30\n\nLANGUAGE: kotlin\nCODE:\n```\nfun removeGroupedNotifications(group: String)\n```\n\nLANGUAGE: java\nCODE:\n```\nvoid removeGroupedNotifications(String group)\n```\n\n----------------------------------------\n\nTITLE: Removing Single Notification in OneSignal Android SDK\nDESCRIPTION: Cancels a single OneSignal notification based on its Android notification integer ID. Should be used instead of Android's native NotificationManager.cancel to prevent notification restoration on app restart.\nSOURCE: https://github.com/OneSignal/OneSignal-Android-SDK/blob/main/MIGRATION_GUIDE.md#2025-04-18_snippet_29\n\nLANGUAGE: kotlin\nCODE:\n```\nfun removeNotification(id: Int)\n```\n\nLANGUAGE: java\nCODE:\n```\nvoid removeNotification(int id)\n```\n\n----------------------------------------\n\nTITLE: Clearing All Notifications in OneSignal Android SDK\nDESCRIPTION: Removes all OneSignal notifications from the Notification Shade. Should be used instead of Android's NotificationManager.cancelAll to prevent notification restoration on app restart.\nSOURCE: https://github.com/OneSignal/OneSignal-Android-SDK/blob/main/MIGRATION_GUIDE.md#2025-04-18_snippet_31\n\nLANGUAGE: kotlin\nCODE:\n```\nfun clearAllNotifications()\n```\n\nLANGUAGE: java\nCODE:\n```\nvoid clearAllNotifications()\n```\n\n----------------------------------------\n\nTITLE: Adding Multiple In-App Message Triggers in OneSignal SDK (Kotlin/Java)\nDESCRIPTION: Methods for adding multiple triggers at once that determine when in-app messages should be displayed. Existing triggers with the same keys will be replaced with new values.\nSOURCE: https://github.com/OneSignal/OneSignal-Android-SDK/blob/main/MIGRATION_GUIDE.md#2025-04-18_snippet_42\n\nLANGUAGE: kotlin\nCODE:\n```\nfun addTriggers(triggers: Map<String, Any>)\n```\n\nLANGUAGE: java\nCODE:\n```\nvoid addTriggers(Map<String, Object> triggers)\n```\n\n----------------------------------------\n\nTITLE: Controlling In-App Message Display in OneSignal SDK (Kotlin/Java)\nDESCRIPTION: Property for pausing and resuming in-app messages. When paused, no in-app messages will be shown regardless of qualification criteria.\nSOURCE: https://github.com/OneSignal/OneSignal-Android-SDK/blob/main/MIGRATION_GUIDE.md#2025-04-18_snippet_40\n\nLANGUAGE: kotlin\nCODE:\n```\nvar paused: Boolean\n```\n\nLANGUAGE: java\nCODE:\n```\nboolean getPaused()\nvoid setPaused(boolean value)\n```\n\n----------------------------------------\n\nTITLE: Adding In-App Message Triggers in OneSignal SDK (Kotlin/Java)\nDESCRIPTION: Methods for adding individual triggers that determine when in-app messages should be displayed. Triggers are used in IAM qualification rules but exist only on the local device.\nSOURCE: https://github.com/OneSignal/OneSignal-Android-SDK/blob/main/MIGRATION_GUIDE.md#2025-04-18_snippet_41\n\nLANGUAGE: kotlin\nCODE:\n```\nfun addTrigger(key: String, value: Any)\n```\n\nLANGUAGE: java\nCODE:\n```\nvoid addTrigger(String key, Object value)\n```\n\n----------------------------------------\n\nTITLE: Removing Notification Click Listeners in OneSignal SDK (Kotlin/Java)\nDESCRIPTION: Methods for removing previously added notification click listeners from the OneSignal SDK.\nSOURCE: https://github.com/OneSignal/OneSignal-Android-SDK/blob/main/MIGRATION_GUIDE.md#2025-04-18_snippet_37\n\nLANGUAGE: kotlin\nCODE:\n```\nfun removeClickListener(listener: INotificationClickListener)\n```\n\nLANGUAGE: java\nCODE:\n```\nvoid removeClickListener(INotificationClickListener listener)\n```\n\n----------------------------------------\n\nTITLE: Removing Permission Observer in OneSignal Android SDK\nDESCRIPTION: Removes a previously added push permission observer, stopping it from receiving permission change notifications.\nSOURCE: https://github.com/OneSignal/OneSignal-Android-SDK/blob/main/MIGRATION_GUIDE.md#2025-04-18_snippet_33\n\nLANGUAGE: kotlin\nCODE:\n```\nfun removePermissionObserver(observer: IPermissionObserver)\n```\n\nLANGUAGE: java\nCODE:\n```\nvoid removePermissionObserver(IPermissionObserver observer)\n```\n\n----------------------------------------\n\nTITLE: Removing Notification Lifecycle Listeners in OneSignal SDK (Kotlin/Java)\nDESCRIPTION: Methods for removing previously added notification lifecycle listeners from the OneSignal SDK.\nSOURCE: https://github.com/OneSignal/OneSignal-Android-SDK/blob/main/MIGRATION_GUIDE.md#2025-04-18_snippet_35\n\nLANGUAGE: kotlin\nCODE:\n```\nfun removeForegroundLifecycleListener(listener: INotificationLifecycleListener)\n```\n\nLANGUAGE: java\nCODE:\n```\nvoid removeForegroundLifecycleListener(INotificationLifecycleListener listener)\n```\n\n----------------------------------------\n\nTITLE: Removing In-App Message Triggers in OneSignal SDK (Kotlin/Java)\nDESCRIPTION: Methods for removing individual triggers from the current user. This prevents in-app messages from displaying based on the removed trigger.\nSOURCE: https://github.com/OneSignal/OneSignal-Android-SDK/blob/main/MIGRATION_GUIDE.md#2025-04-18_snippet_43\n\nLANGUAGE: kotlin\nCODE:\n```\nfun removeTrigger(key: String)\n```\n\nLANGUAGE: java\nCODE:\n```\nvoid removeTrigger(String key)\n```\n\n----------------------------------------\n\nTITLE: Removing Triggers in OneSignal Android SDK (Kotlin and Java)\nDESCRIPTION: Methods for removing triggers from the current user in the OneSignal Android SDK. Includes functions for removing multiple triggers and clearing all triggers.\nSOURCE: https://github.com/OneSignal/OneSignal-Android-SDK/blob/main/MIGRATION_GUIDE.md#2025-04-18_snippet_44\n\nLANGUAGE: kotlin\nCODE:\n```\nfun removeTriggers(keys: Collection<String>)\n```\n\nLANGUAGE: java\nCODE:\n```\nvoid removeTriggers(Collection<String> keys)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nfun clearTriggers()\n```\n\nLANGUAGE: java\nCODE:\n```\nvoid clearTriggers()\n```\n\n----------------------------------------\n\nTITLE: Managing Location Sharing in OneSignal SDK (Kotlin/Java)\nDESCRIPTION: Property for checking and controlling whether location is shared with OneSignal. This allows for enabling or disabling geolocation features.\nSOURCE: https://github.com/OneSignal/OneSignal-Android-SDK/blob/main/MIGRATION_GUIDE.md#2025-04-18_snippet_38\n\nLANGUAGE: kotlin\nCODE:\n```\nvar isShared: Boolean\n```\n\nLANGUAGE: java\nCODE:\n```\nboolean isShared()\nvoid setShared(boolean value)\n```\n\n----------------------------------------\n\nTITLE: Requesting Location Permissions in OneSignal SDK (Kotlin/Java)\nDESCRIPTION: Methods for manually prompting users for location permissions. This enables geotagging functionality to send notifications based on user location.\nSOURCE: https://github.com/OneSignal/OneSignal-Android-SDK/blob/main/MIGRATION_GUIDE.md#2025-04-18_snippet_39\n\nLANGUAGE: kotlin\nCODE:\n```\nfun suspend requestPermission(): Boolean\n```\n\nLANGUAGE: java\nCODE:\n```\nvoid requestPermission(Continuation<? super Boolean> completion)\n```\n\n----------------------------------------\n\nTITLE: Session Management in OneSignal Android SDK\nDESCRIPTION: Methods for tracking session outcomes and metrics.\nSOURCE: https://github.com/OneSignal/OneSignal-Android-SDK/blob/main/MIGRATION_GUIDE.md#2025-04-18_snippet_26\n\nLANGUAGE: kotlin\nCODE:\n```\nfun addOutcome(name: String)\nfun addUniqueOutcome(name: String)\nfun addOutcomeWithValue(name: String, value: Float)\n```\n\nLANGUAGE: java\nCODE:\n```\nvoid addOutcome(String name)\nvoid addUniqueOutcome(String name)\nvoid addOutcomeWithValue(String name, float value)\n```\n\n----------------------------------------\n\nTITLE: Managing In App Message Listeners in OneSignal Android SDK (Kotlin and Java)\nDESCRIPTION: Methods for adding and removing lifecycle and click listeners for In App Messages in the OneSignal Android SDK.\nSOURCE: https://github.com/OneSignal/OneSignal-Android-SDK/blob/main/MIGRATION_GUIDE.md#2025-04-18_snippet_45\n\nLANGUAGE: kotlin\nCODE:\n```\nfun addLifecycleListener(listener: IInAppMessageLifecycleListener)\n```\n\nLANGUAGE: java\nCODE:\n```\nvoid addLifecycleListener(IInAppMessageLifecycleListener listener)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nfun removeLifecycleListener(listener: IInAppMessageLifecycleListener)\n```\n\nLANGUAGE: java\nCODE:\n```\nvoid removeLifecycleListener(IInAppMessageLifecycleListener listener)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nfun addClickListener(listener: IInAppMessageClickListener)\n```\n\nLANGUAGE: java\nCODE:\n```\nvoid addClickListener(IInAppMessageClickListener listener)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nfun removeClickListener(listener: IInAppMessageClickListener)\n```\n\nLANGUAGE: java\nCODE:\n```\nvoid removeClickListener(IInAppMessageClickListener listener)\n```\n\n----------------------------------------\n\nTITLE: Configuring Debug Settings in OneSignal Android SDK (Kotlin and Java)\nDESCRIPTION: Methods for accessing and setting debug-scoped functionality in the OneSignal Android SDK, including log level and alert level configuration.\nSOURCE: https://github.com/OneSignal/OneSignal-Android-SDK/blob/main/MIGRATION_GUIDE.md#2025-04-18_snippet_46\n\nLANGUAGE: kotlin\nCODE:\n```\nvar logLevel: LogLevel\n```\n\nLANGUAGE: java\nCODE:\n```\nLogLevel getLogLevel()\nvoid setLogLevel(LogLevel value)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nvar alertLevel: LogLevel\n```\n\nLANGUAGE: java\nCODE:\n```\nLogLevel getAlertLevel()\nvoid setAlertLevel(LogLevel value)\n```\n\n----------------------------------------\n\nTITLE: Using Coroutines in Java with OneSignal SDK\nDESCRIPTION: Demonstrates how to use the Continue helper class to handle coroutines in Java code when working with the OneSignal SDK.\nSOURCE: https://github.com/OneSignal/OneSignal-Android-SDK/blob/main/MIGRATION_GUIDE.md#2025-04-18_snippet_15\n\nLANGUAGE: Java\nCODE:\n```\nOneSignal.getNotifications().requestPermission(true, Continue.none());\n\nOneSignal.getNotifications().requestPermission(true, Continue.with(r -> {\n    if (r.isSuccess()) {\n      if (r.getData()) {\n        // code to execute once requestPermission has completed successfully and the user has accepted permission.\n      }\n      else {\n        // code to execute once requestPermission has completed successfully but the user has rejected permission.\n      }\n    }\n    else {\n      // code to execute once requestPermission has completed unsuccessfully, `r.getThrowable()` might have more information as to the reason for failure.\n    }\n}));\n```"
  }
]