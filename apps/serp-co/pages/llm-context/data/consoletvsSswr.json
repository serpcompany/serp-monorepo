[
  {
    "owner": "consoletvs",
    "repo": "sswr",
    "content": "TITLE: Basic usage of useSWR hook in Svelte\nDESCRIPTION: This Svelte component demonstrates the basic usage of the `useSWR` hook to fetch data from an API.  It imports the `useSWR` hook from the `sswr` library, fetches data from the specified URL, and displays the fetched data in the template.\nSOURCE: https://github.com/consoletvs/sswr/blob/master/README.md#_snippet_2\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n  import { useSWR } from \"sswr\";\n  // Call the `useSWR` and pass the key you want to use. It will be pased\n  // to the fetcher function. The fetcher function can be configured globally\n  // or passed as one of the options to this function.\n  const { data: posts } = useSWR(\"https://jsonplaceholder.typicode.com/posts\");\n</script>\n\n{#if $posts}\n  {#each $posts as post (post.id)}\n    <h1>{post.title}</h1>\n    <p>{post.body}</p>\n  {/each}\n{/if}\n```\n\n----------------------------------------\n\nTITLE: Dependent Fetching Example (Svelte)\nDESCRIPTION: This Svelte component demonstrates dependent fetching using the `useSWR` hook.  It first fetches a post, and then uses the post's `userId` to fetch a user. A function is used as the key for the second `useSWR` call, allowing it to dynamically update based on the first fetch's result.\nSOURCE: https://github.com/consoletvs/sswr/blob/master/README.md#_snippet_4\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n  import { useSWR } from \"sswr\";\n\n  const { data: post } = useSWR(\"https://jsonplaceholder.typicode.com/posts/1\");\n  // We need to pass a function as the key. Function will throw an error when post is undefined\n  // but we catch that and wait till it re-validates into a valid key to populate the user variable.\n  $: ({ data: user } = useSWR(\n    () => `https://jsonplaceholder.typicode.com/users/${$post.userId}`\n  ));\n</script>\n\n{#if $post}\n  <div>{$post.title}</div>\n{/if}\n{#if $user}\n  <div>{$user.name}</div>\n{/if}\n\n```\n\n----------------------------------------\n\nTITLE: Mutating Data with useSWR in Svelte\nDESCRIPTION: This example demonstrates how to mutate data fetched by `useSWR` within a Svelte component. It imports `useSWR` from `sswr`, fetches a post, and provides buttons to update the post's title using the `mutate` function. The `revalidate` option is set to `false` to prevent overwriting the changes with server data.\nSOURCE: https://github.com/consoletvs/sswr/blob/master/README.md#_snippet_10\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n  import { useSWR } from 'sswr'\n\n  const { data: post, mutate } = useSWR('https://jsonplaceholder.typicode.com/posts/1')\n</script>\n\n{#if $post}\n  <div>{$post.title}</div>\n  <button on:click={() => mutate((state) => ({ ...state, title: 'Sample' }), { revalidate: false })}>\n    Mutate only title\n  </button>\n  <button on:click={() => mutate({ title: 'Sample' }, { revalidate: false })}>\n    Leave only title\n  </button>\n{/if}\n```\n\n----------------------------------------\n\nTITLE: Using SSWR with SvelteKit SSR\nDESCRIPTION: This example illustrates how to integrate SSWR with SvelteKit for server-side rendering (SSR). It demonstrates fetching data in the `load` function on the server and passing it as `initialData` to `useSWR` on the client, effectively providing SSR with client-side revalidation. The `revalidateOnStart` option is set to `false` to prevent initial revalidation on the client.\nSOURCE: https://github.com/consoletvs/sswr/blob/master/README.md#_snippet_14\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\" context=\"module\">\n  import type { Load } from '@sveltejs/kit';\n\n  const url = 'https://jsonplaceholder.typicode.com/posts';\n\n  export const load: Load = async ({ fetch }) => {\n    const response = await fetch(url);\n\n    return {\n      props: {\n        initialData: await response.json()\n      }\n    };\n  };\n</script>\n\n<script lang=\"ts\">\n  import { useSWR } from 'sswr';\n\n  interface Post {\n    id: number;\n    title: string;\n    body: string;\n  }\n\n  export let initialData: Post[];\n\n  const { data: posts } = useSWR<Post[]>(url, {\n    initialData,\n    revalidateOnStart: false\n  });\n</script>\n\n{#if $posts}\n  {#each $posts as post (post.id)}\n    <h1>{post.title}</h1>\n    <p>{post.body}</p>\n  {/each}\n{/if}\n```\n\n----------------------------------------\n\nTITLE: Error Handling with useSWR in Svelte\nDESCRIPTION: This example shows how to handle errors when fetching data using `useSWR` in a Svelte component. It imports `useSWR` from `sswr` and uses the `error` return value to display an error message if the request fails. If the request is successful, it renders a list of posts.\nSOURCE: https://github.com/consoletvs/sswr/blob/master/README.md#_snippet_11\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n  import { useSWR } from 'sswr'\n\n  const { data: posts, error } = useSWR('https://jsonplaceholder.typicode.com/posts')\n</script>\n\n{#if $error}\n  <div>There was an error</div>\n{:else if $posts}\n {#each $posts as post (post.id)}\n    <h1>{post.title}</h1>\n {/each}\n{/if}\n```\n\n----------------------------------------\n\nTITLE: Re-validate on demand Example (Svelte)\nDESCRIPTION: This Svelte component demonstrates how to use the `revalidate` function returned by `useSWR` to manually revalidate data.  It fetches a post and provides a button that, when clicked, triggers a revalidation of the data.\nSOURCE: https://github.com/consoletvs/sswr/blob/master/README.md#_snippet_7\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n  import { useSWR } from 'sswr'\n\n  const { data: post, revalidate } = useSWR('https://jsonplaceholder.typicode.com/posts/1')\n</script>\n\n{#if $post}\n  <div>{$post.title}</div>\n  <button on:click={() => revalidate()}>Revalidate</button>\n{/if}\n```\n\n----------------------------------------\n\nTITLE: useSWR Function Signature (JavaScript)\nDESCRIPTION: This JavaScript code snippet shows the function signature of the `useSWR` hook, demonstrating how to call the hook and destructure the response to access data, error, mutate, and revalidate functions.\nSOURCE: https://github.com/consoletvs/sswr/blob/master/README.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nfunction useSWR(key, options): SWRResponse\n// Can be destructured to get the response as such:\nconst { data, error, mutate, revalidate } = useSWR(key, options)\n```\n\n----------------------------------------\n\nTITLE: Clearing Cache with useSWR in Svelte\nDESCRIPTION: This example demonstrates how to clear the cache for a specific key managed by `useSWR` within a Svelte component. It imports `useSWR` from `sswr`, fetches a post, and provides a button to clear the cached data using the `clear` function associated with the `useSWR` hook.\nSOURCE: https://github.com/consoletvs/sswr/blob/master/README.md#_snippet_13\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n  import { useSWR } from 'sswr'\n\n  const { data: post, clear } = useSWR('https://jsonplaceholder.typicode.com/posts/1')\n</script>\n\n{#if $post}\n  <div>{$post.title}</div>\n  <button on:click={() => clear()}>\n    Clear cacheed data\n  </button>\n{/if}\n```\n\n----------------------------------------\n\nTITLE: Importing mutate function (JavaScript)\nDESCRIPTION: This JavaScript code snippet shows how to import the `mutate` function from the `sswr` library. This function allows you to manually mutate (update) the data associated with a specific key.\nSOURCE: https://github.com/consoletvs/sswr/blob/master/README.md#_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nimport { mutate } from 'sswr'\n```\n\n----------------------------------------\n\nTITLE: Importing revalidate function (JavaScript)\nDESCRIPTION: This JavaScript code snippet shows how to import the `revalidate` function from the `sswr` library. This function allows you to manually trigger a revalidation of data associated with a specific key.\nSOURCE: https://github.com/consoletvs/sswr/blob/master/README.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { revalidate } from 'sswr'\n```\n\n----------------------------------------\n\nTITLE: Mutate Function Signature (TypeScript)\nDESCRIPTION: This TypeScript code snippet defines the signature of the `mutate` function in SSWR, which allows manually updating the cached data associated with a key. It takes a key, a new value for the data, and optional options as arguments.\nSOURCE: https://github.com/consoletvs/sswr/blob/master/README.md#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nfunction mutate(key, value, options): void\n```\n\n----------------------------------------\n\nTITLE: Clearing Cache Globally with SSWR\nDESCRIPTION: This snippet demonstrates how to clear the cache globally using the `clear` function from the `sswr` library. It shows the import statement for the `clear` function, which is used to invalidate cached data.\nSOURCE: https://github.com/consoletvs/sswr/blob/master/README.md#_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nimport { clear } from 'sswr'\n```\n\n----------------------------------------\n\nTITLE: Revalidate Function Signature (TypeScript)\nDESCRIPTION: This TypeScript code snippet defines the signature of the `revalidate` function, which is used to manually trigger revalidation of data in SSWR.  It takes a key (the data identifier) and optional options (like forcing revalidation) as arguments.\nSOURCE: https://github.com/consoletvs/sswr/blob/master/README.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nfunction revalidate(key, options): void\n```\n\n----------------------------------------\n\nTITLE: Installing SSWR using npm\nDESCRIPTION: This command installs the sswr package using npm, allowing you to use the library in your Svelte project.\nSOURCE: https://github.com/consoletvs/sswr/blob/master/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i sswr\n```\n\n----------------------------------------\n\nTITLE: Installing SSWR using yarn\nDESCRIPTION: This command installs the sswr package using yarn, allowing you to use the library in your Svelte project.\nSOURCE: https://github.com/consoletvs/sswr/blob/master/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn add sswr\n```"
  }
]