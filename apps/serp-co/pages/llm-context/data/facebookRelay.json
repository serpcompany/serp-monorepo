[
  {
    "owner": "facebook",
    "repo": "relay",
    "content": "TITLE: Creating a Basic Relay Environment in TypeScript\nDESCRIPTION: A minimal implementation of a Relay Environment that sets up the required Network and Store components. The Network handles GraphQL server requests via a fetch function, while the Store maintains the normalized data cache.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/api-reference/relay-runtime/relay-environment.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Environment, Store, RecordSource, Network, FetchFunction } from \"relay-runtime\";\n\nconst HTTP_ENDPOINT = \"https://graphql.org/graphql/\";\n\nconst fetchGraphQL: FetchFunction = async (request, variables) => {\n  const resp = await fetch(HTTP_ENDPOINT, {\n    method: \"POST\",\n    headers: { \"Content-Type\": \"application/json\" },\n    body: JSON.stringify({ query: request.text, variables }),\n  });\n  if (!resp.ok) {\n    throw new Error(\"Response failed.\");\n  }\n  return await resp.json();\n};\n\nexport const environment = new Environment({\n  store: new Store(new RecordSource({})),\n  network: Network.create(fetchGraphQL),\n});\n```\n\n----------------------------------------\n\nTITLE: Relay Environment Configuration\nDESCRIPTION: This JavaScript code defines the Relay environment, which is responsible for managing the connection to the GraphQL server and caching the data. It imports the necessary modules from `relay-runtime` and the `fetchGraphQL` utility. It creates a new `Environment` instance, configuring it with a `Network` that uses `fetchGraphQL` to make requests and a `Store` for caching data.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/getting-started/step-by-step-guide.md#2025-04-18_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\n\"// your-app-name/src/RelayEnvironment.js\nimport {Environment, Network, RecordSource, Store} from 'relay-runtime';\nimport fetchGraphQL from './fetchGraphQL';\n\n// Relay passes a \\\"params\\\" object with the query name and text. So we define a helper function\n// to call our fetchGraphQL utility with params.text.\nasync function fetchRelay(params, variables) {\n  console.log(`fetching query ${params.name} with ${JSON.stringify(variables)}`);\n  return fetchGraphQL(params.text, variables);\n}\n\n// Export a singleton instance of Relay Environment configured with our network function:\nexport default new Environment({\n  network: Network.create(fetchRelay),\n  store: new Store(new RecordSource()),\n});\"\n```\n\n----------------------------------------\n\nTITLE: Importing DocsRating Component in JSX\nDESCRIPTION: Imports and renders a documentation rating component using JSX syntax. This component is imported from the site's core components directory.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/principles-and-architecture/architecture-overview.md#2025-04-18_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport DocsRating from '@site/src/core/DocsRating';\n\n<DocsRating />\n```\n\n----------------------------------------\n\nTITLE: Fetching Relay Query Data\nDESCRIPTION: This snippet demonstrates how to fetch data using the `useLazyLoadQuery` hook in a React component. It passes the defined `storyQuery` and variables as arguments to retrieve data from the Relay store. The fetched data is then used to render the component's UI, including the `AuthorDetails` component with the `author` data.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/principles-and-architecture/thinking-in-relay.md#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// Story.react.js\nfunction Story(props) {\n  const data = useLazyLoadQuery(storyQuery, props.storyId);\n\n  return (<>\n    <Heading>{data?.story.title}</Heading>\n    {data?.story?.author && <AuthorDetails author={data.story.author} />}\n  </>);\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring a GraphQL Fragment\nDESCRIPTION: Demonstrates how to declare a GraphQL fragment for a User type, selecting specific fields to query.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/guided-tour/rendering/fragments.md#2025-04-18_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nfragment UserFragment on User {\n  name\n  age\n  profile_picture(scale: 2) {\n    uri\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating the Network Layer for Relay in JavaScript\nDESCRIPTION: This snippet demonstrates how to create a Relay Environment with a custom network layer using the fetch API to communicate with a GraphQL server. It includes the fetchQuery function that handles the GraphQL requests and the setup of the Relay Environment with Network and Store. Dependencies include the relay-runtime package.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/guides/network-layer.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport {\\n  Environment,\\n  Network,\\n  RecordSource,\\n  Store,\\n} from 'relay-runtime';\\n\\n// Define a function that fetches the results of an operation (query/mutation/etc)\\n// and returns its results as a Promise:\\nfunction fetchQuery(\\n  operation,\\n  variables,\\n  cacheConfig,\\n  uploadables,\\n) {\\n  return fetch('/graphql', {\\n    method: 'POST',\\n    headers: {\\n      // Add authentication and other headers here\\n      'content-type': 'application/json'\\n    },\\n    body: JSON.stringify({\\n      query: operation.text, // GraphQL text from input\\n      variables,\\n    }),\\n  }).then(response => {\\n    return response.json();\\n  });\\n}\\n\\n// Create a network layer from the fetch function\\nconst network = Network.create(fetchQuery);\\nconst store = new Store(new RecordSource())\\n\\nconst environment = new Environment({\\n  network,\\n  store\\n  // ... other options\\n});\\n\\nexport default environment;\n```\n\n----------------------------------------\n\nTITLE: Implementing GraphQL Query Fetching with useLazyLoadQuery in React/Relay\nDESCRIPTION: Example showing how to use useLazyLoadQuery hook to fetch GraphQL data during component render. The snippet demonstrates querying user data with variables and fetch policy options.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/api-reference/hooks/use-lazy-load-query.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst React = require('React');\n\nconst {graphql, useLazyLoadQuery} = require('react-relay');\n\nfunction App() {\n  const data = useLazyLoadQuery(\n    graphql`\n      query AppQuery($id: ID!) {\n        user(id: $id) {\n          name\n        }\n      }\n    `,\n    {id: 4},\n    {fetchPolicy: 'store-or-network'},\n  );\n\n return <h1>{data.user?.name}</h1>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a GraphQL Subscription for Feedback Likes\nDESCRIPTION: A GraphQL subscription that listens for changes to a feedback item's like count. It uses the subscription keyword and defines a root field with input variables.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/guided-tour/updating-data/graphql-subscriptions.md#2025-04-18_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nsubscription FeedbackLikeSubscription($input: FeedbackLikeSubscribeData!) {\n  feedback_like_subscribe(data: $input) {\n    feedback {\n      like_count\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using usePaginationFragment for Connection Pagination in Relay\nDESCRIPTION: This code snippet demonstrates how to use `usePaginationFragment` to paginate a connection in a Relay application. It defines a `FriendsList` component that fetches and displays a list of friends using a GraphQL fragment with the `@connection` and `@refetchable` directives. The hook provides functions to load more friends and check if there are more available, enabling pagination.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/api-reference/hooks/use-pagination-fragment.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport type {FriendsList_user$key} from 'FriendsList_user.graphql';\n\nconst React = require('React');\n\nconst {graphql, usePaginationFragment} = require('react-relay');\n\ntype Props = {\n  user: FriendsList_user$key,\n};\n\nfunction FriendsList(props: Props) {\n  const {\n    data,\n    loadNext,\n    loadPrevious,\n    hasNext,\n    hasPrevious,\n    isLoadingNext,\n    isLoadingPrevious,\n    refetch, // For refetching connection\n  } = usePaginationFragment(\n    graphql`\n      fragment FriendsListComponent_user on User\n      @refetchable(queryName: \"FriendsListPaginationQuery\") {\n        name\n        friends(first: $count, after: $cursor)\n        @connection(key: \"FriendsList_user_friends\") {\n          edges {\n            node {\n              name\n              age\n            }\n          }\n        }\n      }\n    `,\n    props.user,\n  );\n\n  return (\n    <>\n      <h1>Friends of {data.name}:</h1>\n\n      <List items={data.friends?.edges.map(edge => edge.node)}>\n        {node => {\n          return (\n            <div>\n              {node.name} - {node.age}\n            </div>\n          );\n        }}\n      </List>\n      <Button onClick={() => loadNext(10)}>Load more friends</Button>\n    </>\n  );\n}\n\nmodule.exports = FriendsList;\n```\n\n----------------------------------------\n\nTITLE: Paginating Relay Connection with Preserved Filters\nDESCRIPTION: This snippet illustrates how to paginate a Relay connection while preserving the original filter values used in the initial query.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/guided-tour/list-data/refetching-connections.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nfunction FriendsListComponent(props: Props) {\n  const userRef = props.userRef;\n\n  const {data, loadNext} = usePaginationFragment(\n    graphql`\n      fragment FriendsListComponent_user on User {\n        name\n        friends(order_by: $orderBy, search_term: $searchTerm)\n          @connection(key: \"FriendsListComponent_user_friends_connection\") {\n          edges {\n            node {\n              name\n              age\n            }\n          }\n        }\n      }\n    `,\n    userRef,\n  );\n\n  return (\n    <>\n      <h1>Friends of {data.name}:</h1>\n      <List items={data.friends?.nodes}>{...}</List>\n\n      <Button onClick={() => loadNext(10)}>Load more friends</Button>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Refreshing Fragments using useRefetchableFragment in React\nDESCRIPTION: This snippet demonstrates how to use useRefetchableFragment to manually refresh data for a fragment. It shows how to set up the fragment with @refetchable directive and use the refetch function to fetch the latest data from the server.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/guided-tour/refetching/refreshing-fragments.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport type {UserComponent_user$key} from 'UserComponent_user.graphql';\n\ntype Props = {\n  user: UserComponent_user$key,\n};\n\nfunction UserComponent(props: Props) {\n  const [data, refetch] = useRefetchableFragment(\n    graphql`\n      fragment UserComponent_user on User\n      # @refetchable makes it so Relay autogenerates a query for\n      # fetching this fragment\n      @refetchable(queryName: \"UserComponentRefreshQuery\") {\n        id\n        name\n        friends {\n          count\n        }\n      }\n    `,\n    props.user,\n  );\n\n  const refresh = useCallback(() => {\n    // We call refetch with empty variables: `{}`,\n    // which will refetch the @refetchable query with the same\n    // original variables the fragment was fetched with, and update\n    // this component with the latest fetched data.\n    // The fetchPolicy ensures we always fetch from the server and skip\n    // the local data cache.\n    refetch({}, {fetchPolicy: 'network-only'})\n  }), [/* ... */]);\n\n  return (\n    <>\n      <h1>{data.name}</h1>\n      <div>Friends count: {data.friends?.count}</div>\n      <Button\n        onClick={() => refresh()}>\n        Fetch latest count\n      </Button>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Executing a GraphQL Mutation using useMutation in React with Relay\nDESCRIPTION: This snippet demonstrates how to use the useMutation hook to execute a GraphQL mutation in a React component. It shows the setup of the mutation, handling of in-flight state, and triggering the mutation on button click.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/api-reference/hooks/use-mutation.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport type {FeedbackLikeMutation} from 'FeedbackLikeMutation.graphql';\nconst React = require('React');\n\nconst {graphql, useMutation} = require('react-relay');\n\nfunction LikeButton() {\n  const [commit, isInFlight] = useMutation<FeedbackLikeMutation>(graphql`\n    mutation FeedbackLikeMutation($input: FeedbackLikeData!) {\n      feedback_like(data: $input) {\n        feedback {\n          id\n          viewer_does_like\n          like_count\n        }\n      }\n    }\n  `);\n\n  if (isInFlight) {\n    return <Spinner />;\n  }\n\n  return (\n    <button\n      onClick={() => {\n        commit({\n          variables: {\n            input: {\n              id: '123',\n              text: 'text',\n            },\n          },\n          onCompleted(data) {\n            console.log(data);\n          },\n        });\n      }}\n    />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering a Fragment with useFragment Hook\nDESCRIPTION: Demonstrates how to use the useFragment hook to render data from a GraphQL fragment in a React component.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/guided-tour/rendering/fragments.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport type {UserComponent_user$key} from 'UserComponent_user.graphql';\n\nconst React = require('React');\n\nconst {graphql, useFragment} = require('react-relay');\n\ntype Props = {\n  user: UserComponent_user$key,\n};\n\nfunction UserComponent(props: Props) {\n  const data = useFragment(\n    graphql`\n      fragment UserComponent_user on User {\n        name\n        profile_picture(scale: 2) {\n          uri\n        }\n      }\n    `,\n    props.user,\n  );\n\n  return (\n    <>\n      <h1>{data.name}</h1>\n      <div>\n        <img src={data.profile_picture?.uri} />\n      </div>\n    </>\n  );\n}\n\nmodule.exports = UserComponent;\n```\n\n----------------------------------------\n\nTITLE: Declaring a GraphQL Connection Fragment in Relay\nDESCRIPTION: This snippet demonstrates how to declare a fragment that queries for a GraphQL connection. It includes the @connection directive with a key to enable pagination functionality.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/guided-tour/list-data/rendering-connections.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst {graphql} = require('RelayModern');\n\nconst userFragment = graphql`\n  fragment UserFragment on User {\n    name\n    friends(after: $cursor, first: $count)\n      @connection(key: \"UserFragment_friends\") {\n      edges {\n        node {\n          ...FriendComponent\n        }\n      }\n    }\n  }\n`;\n```\n\n----------------------------------------\n\nTITLE: Assigning Best Friends in Relay using GraphQL and JavaScript\nDESCRIPTION: This JavaScript snippet shows how to use React and Relay to append a user to a list of best friends by utilizing GraphQL fragments. It uses 'useRelayEnvironment', 'useFragment', and 'commitLocalUpdate' for managing local updates. Dependencies include 'react-relay' and valid GraphQL fragments.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/guided-tour/updating-data/imperatively-modifying-linked-fields.md#2025-04-18_snippet_6\n\nLANGUAGE: js\nCODE:\n```\n// AssignBestFriendButton.react.js\nimport type {AssignBestFriendButton_user$key} from 'AssignBestFriendButton_user.graphql';\nimport type {AssignBestFriendButton_viewer$key} from 'AssignBestFriendButton_viewer';\n\nimport type {RecordSourceSelectorProxy} from 'react-relay';\n\nconst {commitLocalUpdate, useFragment, useRelayEnvironment} = require('react-relay');\n\ngraphql`\n  fragment AssignBestFriendButton_assignable_user on User @assignable {\n    __typename\n  }\n`;\n\nexport default function AssignBestFriendButton({\n  someTypeRef: AssignBestFriendButton_someType$key,\n  viewerFragmentRef: AssignBestFriendButton_viewer$key,\n}) {\n  const data = useFragment(graphql`\n    fragment AssignBestFriendButton_someType on SomeType {\n      user {\n        name\n        ...AssignableBestFriendButton_assignable_user\n      }\n    }\n  `, someTypeRef);\n\n  const viewer = useFragment(graphql`\n    fragment AssignBestFriendButton_viewer on Viewer {\n      best_friends {\n        ...AssignableBestFriendButton_assignable_user\n      }\n    }\n  `, viewerFragmentRef);\n\n  const environment = useRelayEnvironment();\n  const onClick = () => {\n    commitLocalUpdate(\n      environment,\n      (store: RecordSourceSelectorProxy) => {\n        const {updatableData} = store.readUpdatableQuery(\n            graphql`\n              query AssignBestFriendButtonUpdatableQuery\n              @updatable {\n                viewer {\n                  best_friends {\n                    ...AssignableBestFriendButton_assignable_user\n                  }\n                }\n              }\n            `,\n            {}\n          );\n\n        if (data.user != null && updatableData.viewer != null && viewer.best_friends != null) {\n          updatableData.viewer.best_friends = [\n            ...viewer.best_friends,\n            data.user,\n          ];\n        }\n      }\n    );\n  };\n\n  return (<button onClick={onClick}>\n    Add {user.name ?? 'someone with no name'} to my list of best friends!\n  </button>);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Like Button with Optimistic Update in Relay\nDESCRIPTION: Complete example of a Like button component using Relay's useMutation hook with an optimistic response. It updates both the like status and count optimistically.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/guided-tour/updating-data/graphql-mutations.md#2025-04-18_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport type {FeedbackLikeData, LikeButtonMutation} from 'LikeButtonMutation.graphql';\nimport type {LikeButton_feedback$fragmentType} from 'LikeButton_feedback.graphql';\n\nconst {useMutation, graphql} = require('react-relay');\n\nfunction LikeButton({\n  feedback: LikeButton_feedback$fragmentType,\n}) {\n  const data = useFragment(\n    graphql`\n      fragment LikeButton_feedback on Feedback {\n        __id\n        viewer_does_like @required(action: THROW)\n        like_count @required(action: THROW)\n      }\n    `,\n    feedback\n  );\n\n  const [commitMutation, isMutationInFlight] = useMutation<LikeButtonMutation>(\n    graphql`\n      mutation LikeButtonMutation($input: FeedbackLikeData!)\n      @raw_response_type {\n        feedback_like(data: $input) {\n          feedback {\n            viewer_does_like\n            like_count\n          }\n        }\n      }\n    `\n  );\n\n  const changeToLikeCount = data.viewer_does_like ? -1 : 1;\n  return <button\n    onClick={() => commitMutation({\n      variables: {\n        input: {id: data.__id},\n      },\n      optimisticResponse: {\n        feedback_like: {\n          feedback: {\n            id: data.__id,\n            viewer_does_like: !data.viewer_does_like,\n            like_count: data.like_count + changeToLikeCount,\n          },\n        },\n      },\n    })}\n    disabled={isMutationInFlight}\n  >\n    Like\n  </button>\n}\n```\n\n----------------------------------------\n\nTITLE: Using Fragment Data in a React Component with useFragment\nDESCRIPTION: Shows how to read fragment data from the Relay store using the useFragment hook in a functional React component. The component receives a fragment reference through props.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/principles-and-architecture/thinking-in-relay.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// AuthorDetails.react.js\nexport default function AuthorDetails(props) {\n  const data = useFragment(authorDetailsFragment, props.author);\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Defining GraphQL Mutation\nDESCRIPTION: Defines a GraphQL mutation named StoryLikeButtonLikeMutation. This mutation takes an ID and a boolean as input variables, and updates the like status of a story. The server returns the updated story details.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/tutorial/mutations-updates.md#2025-04-18_snippet_2\n\nLANGUAGE: graphql\nCODE:\n```\nconst StoryLikeButtonLikeMutation = graphql`\n  mutation StoryLikeButtonLikeMutation(\n    // color1\n    $id: ID!,\n    // color1\n    $doesLike: Boolean!,\n  ) {\n    // color2\n    likeStory(\n      // color3\n      id: $id,\n      // color3\n      doesLike: $doesLike\n    ) {\n      // color4\n      story {\n        // color5\n        id\n        // color5\n        likeCount\n        // color5\n        doesViewerLike\n      }\n    }\n  }\n`;\n```\n\n----------------------------------------\n\nTITLE: Complete Like Button Component with Optimistic Updates in Relay\nDESCRIPTION: Full implementation of a Like button component using useMutation with optimistic updates. Demonstrates reading current state and calculating optimistic changes for like count and viewer status.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/guided-tour/updating-data/graphql-mutations.md#2025-04-18_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport type {FeedbackLikeData, LikeButtonMutation} from 'LikeButtonMutation.graphql';\nimport type {LikeButton_feedback$fragmentType} from 'LikeButton_feedback.graphql';\n\nconst {useMutation, graphql} = require('react-relay');\n\nfunction LikeButton({\n  feedback: LikeButton_feedback$fragmentType,\n}) {\n  const data = useFragment(\n    graphql`\n      fragment LikeButton_feedback on Feedback {\n        __id\n        viewer_does_like @required(action: THROW)\n        like_count @required(action: THROW)\n      }\n    `,\n    feedback\n  );\n\n  const [commitMutation, isMutationInFlight] = useMutation<LikeButtonMutation>(\n    graphql`\n      mutation LikeButtonMutation($input: FeedbackLikeData!)\n      @raw_response_type {\n        feedback_like(data: $input) {\n          feedback {\n            viewer_does_like\n            like_count\n          }\n        }\n      }\n    `\n  );\n\n  const changeToLikeCount = data.viewer_does_like ? -1 : 1;\n  return <button\n    onClick={() => commitMutation({\n      variables: {\n        input: {id: data.__id},\n      },\n      optimisticResponse: {\n        feedback_like: {\n          feedback: {\n            id: data.__id,\n            viewer_does_like: !data.viewer_does_like,\n            like_count: data.like_count + changeToLikeCount,\n          },\n        },\n      },\n    })}\n    disabled={isMutationInFlight}\n  >\n    Like\n  </button>\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring GraphQL Like Mutation\nDESCRIPTION: Defines the GraphQL mutation for liking a story, including required variables and response fields\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/tutorial/mutations-updates.md#2025-04-18_snippet_2\n\nLANGUAGE: graphql\nCODE:\n```\nconst StoryLikeButtonLikeMutation = graphql`\n  mutation StoryLikeButtonLikeMutation(\n    $id: ID!,\n    $doesLike: Boolean!,\n  ) {\n    likeStory(\n      id: $id,\n      doesLike: $doesLike\n    ) {\n      story {\n        id\n        likeCount\n        doesViewerLike\n      }\n    }\n  }\n`;\n```\n\n----------------------------------------\n\nTITLE: Using useFragment to read data in a React component\nDESCRIPTION: This snippet demonstrates how to use the `useFragment` hook to read data from the Relay store in a React component. It defines a `UserComponent` that accepts a `user` prop of type `UserComponent_user$key` (a fragment reference) and uses `useFragment` to retrieve the user's name and profile picture. The component then renders the user's name and profile picture.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/api-reference/hooks/use-fragment.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport type {UserComponent_user$key} from 'UserComponent_user.graphql';\n\nconst React = require('React');\n\nconst {graphql, useFragment} = require('react-relay');\n\ntype Props = {\n  user: UserComponent_user$key,\n};\n\nfunction UserComponent(props: Props) {\n  const data = useFragment(\n    graphql`\n      fragment UserComponent_user on User {\n        name\n        profile_picture(scale: 2) {\n          uri\n        }\n      }\n    `,\n    props.user,\n  );\n\n  return (\n    <>\n      <h1>{data.name}</h1>\n      <div>\n        <img src={data.profile_picture?.uri} />\n      </div>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Relay Environment Configuration\nDESCRIPTION: Setup for Relay Environment including network configuration and store initialization.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/getting-started/step-by-step-guide.md#2025-04-18_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport {Environment, Network, RecordSource, Store} from 'relay-runtime';\nimport fetchGraphQL from './fetchGraphQL';\n\nasync function fetchRelay(params, variables) {\n  console.log(`fetching query ${params.name} with ${JSON.stringify(variables)}`);\n  return fetchGraphQL(params.text, variables);\n}\n\nexport default new Environment({\n  network: Network.create(fetchRelay),\n  store: new Store(new RecordSource()),\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Relay Environment\nDESCRIPTION: JavaScript implementation of a Relay Environment that integrates the fetchGraphQL utility with Relay's runtime, setting up network and store configuration.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/getting-started/step-by-step-guide.md#2025-04-18_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n// your-app-name/src/RelayEnvironment.js\nimport {Environment, Network, RecordSource, Store} from 'relay-runtime';\nimport fetchGraphQL from './fetchGraphQL';\n\n// Relay passes a \"params\" object with the query name and text. So we define a helper function\n// to call our fetchGraphQL utility with params.text.\nasync function fetchRelay(params, variables) {\n  console.log(`fetching query ${params.name} with ${JSON.stringify(variables)}`);\n  return fetchGraphQL(params.text, variables);\n}\n\n// Export a singleton instance of Relay Environment configured with our network function:\nexport default new Environment({\n  network: Network.create(fetchRelay),\n  store: new Store(new RecordSource()),\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Relay Network Layer with Fetch\nDESCRIPTION: Shows how to create a basic Relay network layer using the fetch API to communicate with a GraphQL server. Demonstrates environment setup with network and store configuration, including a fetchQuery implementation that handles GraphQL operations.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/guides/network-layer.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport {\n  Environment,\n  Network,\n  RecordSource,\n  Store,\n} from 'relay-runtime';\n\n// Define a function that fetches the results of an operation (query/mutation/etc)\n// and returns its results as a Promise:\nfunction fetchQuery(\n  operation,\n  variables,\n  cacheConfig,\n  uploadables,\n) {\n  return fetch('/graphql', {\n    method: 'POST',\n    headers: {\n      // Add authentication and other headers here\n      'content-type': 'application/json'\n    },\n    body: JSON.stringify({\n      query: operation.text, // GraphQL text from input\n      variables,\n    }),\n  }).then(response => {\n    return response.json();\n  });\n}\n\n// Create a network layer from the fetch function\nconst network = Network.create(fetchQuery);\nconst store = new Store(new RecordSource())\n\nconst environment = new Environment({\n  network,\n  store\n  // ... other options\n});\n\nexport default environment;\n```\n\n----------------------------------------\n\nTITLE: Initializing RelayEnvironmentProvider in React\nDESCRIPTION: This snippet demonstrates how to set up the RelayEnvironmentProvider at the root of a React application. It imports the necessary components and wraps the app with the provider, passing in the Relay environment.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/guided-tour/rendering/environment.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// App root\n\nconst {RelayEnvironmentProvider} = require('react-relay');\nconst Environment = require('MyEnvironment');\n\nfunction Root() {\n  return (\n    <RelayEnvironmentProvider environment={Environment}>\n      {/*... */}\n    </RelayEnvironmentProvider>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing RelayEnvironmentProvider in React App Root\nDESCRIPTION: This snippet demonstrates how to set up the RelayEnvironmentProvider at the root of a React application. It imports the necessary components and wraps the app content with the provider, passing in the Relay Environment.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/guided-tour/rendering/environment.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// App root\n\nconst {RelayEnvironmentProvider} = require('react-relay');\nconst Environment = require('MyEnvironment');\n\nfunction Root() {\n  return (\n    <RelayEnvironmentProvider environment={Environment}>\n      {/*... */}\n    </RelayEnvironmentProvider>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring a Fragment in JavaScript with Relay\nDESCRIPTION: This code snippet shows how to declare a GraphQL fragment inside JavaScript code using the `graphql` tag from `react-relay`.  It defines a fragment named `UserFragment_user` on the `User` type, selecting the `name`, `age`, and `profile_picture` fields (with a scaled `uri`).\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/guided-tour/rendering/fragments.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst {graphql} = require('react-relay');\n\nconst userFragment = graphql`\n  fragment UserFragment_user on User {\n    name\n    age\n    profile_picture(scale: 2) {\n      uri\n    }\n  }\n`;\n```\n\n----------------------------------------\n\nTITLE: StoryCommentsSection Implementation with Connection Pattern\nDESCRIPTION: Implementation of the StoryCommentsSection component that uses the Connection pattern to retrieve and display comments. This component includes pagination with a 'Load More' button that appears when more comments are available.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/tutorial/connections-pagination.md#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport LoadMoreCommentsButton from \"./LoadMoreCommentsButton\";\n\nconst StoryCommentsSectionFragment = graphql`\n fragment StoryCommentsSectionFragment on Story {\n  // color1\n  comments(first: 3) {\n    edges {\n      node {\n        ...CommentFragment\n      }\n    }\n    pageInfo {\n      hasNextPage\n    }\n  }\n }\n`;\n\nfunction StoryCommentsSection({story}) {\n  const data = useFragment(StoryCommentsSectionFragment, story);\n  const onLoadMore = () => {/* TODO */};\n  return (\n    <>\n      {data.comments.edges.map(commentEdge =>\n        <Comment comment={commentEdge.node} />\n      )}\n      {data.comments.pageInfo.hasNextPage && (\n        <LoadMoreCommentsButton onClick={onLoadMore} />\n      )}\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: GraphQL Query for Story Data\nDESCRIPTION: This GraphQL query retrieves the text, author (name and photo), and comments (text and author) for a specific story given its ID. The query defines the structure of the data to be fetched from the server and specifies the relationships between different data entities, such as a story and its author/comments.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/principles-and-architecture/thinking-in-graphql.md#2025-04-18_snippet_9\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  story(id: \"1\") {\n    text,\n    author { name, photo },\n    comments {\n      text,\n      author { name, photo }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Connection Rendering with usePaginationFragment\nDESCRIPTION: Demonstrates how to implement a component that renders a connection using the usePaginationFragment Hook. Includes pagination query setup, data extraction, and rendering with Suspense.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/guided-tour/list-data/rendering-connections.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport type {FriendsListComponent_user$key} from 'FriendsList_user.graphql';\n\nconst React = require('React');\nconst {Suspense} = require('React');\n\nconst {graphql, usePaginationFragment} = require('react-relay');\n\ntype Props = {\n  user: FriendsListComponent_user$key,\n};\n\nfunction FriendsListComponent(props: Props) {\n  const {data} = usePaginationFragment(\n    graphql`\n      fragment FriendsListComponent_user on User\n      @refetchable(queryName: \"FriendsListPaginationQuery\") {\n        name\n        friends(first: $count, after: $cursor)\n        @connection(key: \"FriendsList_user_friends\") {\n          edges {\n            node {\n              ...FriendComponent\n            }\n          }\n        }\n      }\n    `,\n    props.user,\n  );\n\n\n  return (\n    <>\n      {data.name != null ? <h1>Friends of {data.name}:</h1> : null}\n\n      <div>\n        {/* Extract each friend from the resulting data */}\n        {(data.friends?.edges ?? []).map(edge => {\n          const node = edge.node;\n          return (\n            <Suspense fallback={<Glimmer />}>\n              <FriendComponent user={node} />\n            </Suspense>\n          );\n        })}\n      </div>\n    </>\n  );\n}\n\nmodule.exports = FriendsListComponent;\n```\n\n----------------------------------------\n\nTITLE: Fetching Data with useQueryLoader in React Relay\nDESCRIPTION: This snippet demonstrates how to use the `useQueryLoader` hook in React Relay to fetch a query for a component. It imports necessary types and the query itself, then uses the hook to obtain a query reference and a function to load the query. The `loadHomeTabQuery` function is called in an event handler to initiate data fetching before rendering the target tab. It also shows how to pass the fetched data to a child component.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v13.0.0/guided-tour/rendering/queries.md#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport type {HomeTabQuery as HomeTabQueryType} from 'HomeTabQuery.graphql';\nimport type {PreloadedQuery} from 'react-relay';\n\nconst HomeTabQuery = require('HomeTabQuery.graphql')\nconst {useQueryLoader} = require('react-relay');\n\n\ntype Props = {\n  initialQueryRef: PreloadedQuery<HomeTabQueryType>,\n};\n\nfunction AppTabs(props) {\n  const [\n    homeTabQueryRef,\n    loadHomeTabQuery,\n  ] = useQueryLoader<HomeTabQueryType>(\n    HomeTabQuery,\n    props.initialQueryRef, /* e.g. provided by router */\n  );\n\n  const onSelectHomeTab = () => {\n    // Start loading query for HomeTab immediately in the event handler\n    // that triggers navigation to that tab, *before* we even start\n    // rendering the target tab.\n    // Calling this function will update the value of homeTabQueryRef.\n    loadHomeTabQuery({id: '4'});\n\n    // ...\n  }\n\n  // ...\n\n  return (\n    screen === 'HomeTab' && homeTabQueryRef != null ?\n      // Pass to component that uses usePreloadedQuery\n      <HomeTab queryRef={homeTabQueryRef} /> :\n      // ...\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Connection Using getConnection\nDESCRIPTION: This code snippet shows how to access a Relay connection using the `ConnectionHandler.getConnection` API.  It requires the parent record (storyRecord) and the connection key to directly obtain the connection record from the parent in the Relay store within an updater function.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/guided-tour/list-data/updating-connections.md#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst {ConnectionHandler} = require('relay-runtime');\n\nfunction updater(store: RecordSourceSelectorProxy) {\n  // Get parent story record\n  // storyID is passed as input to the mutation/subscription\n  const storyRecord = store.get(storyID);\n\n  // Get the connection record from the parent\n  const connectionRecord = ConnectionHandler.getConnection(\n    storyRecord,\n    'StoryComponent_story_comments_connection',\n  );\n\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Using useFragment Hook in React Component\nDESCRIPTION: Demonstrates how to use the useFragment hook to read User fragment data in a React component. Shows type imports, fragment definition, and component implementation with automatic data subscription.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v13.0.0/api-reference/hooks/use-fragment.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport type {UserComponent_user$key} from 'UserComponent_user.graphql';\n\nconst React = require('React');\n\nconst {graphql, useFragment} = require('react-relay');\n\ntype Props = {\n  user: UserComponent_user$key,\n};\n\nfunction UserComponent(props: Props) {\n  const data = useFragment(\n    graphql`\n      fragment UserComponent_user on User {\n        name\n        profile_picture(scale: 2) {\n          uri\n        }\n      }\n    `,\n    props.user,\n  );\n\n  return (\n    <>\n      <h1>{data.name}</h1>\n      <div>\n        <img src={data.profile_picture?.uri} />\n      </div>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Defining SelectorStoreUpdater Type in TypeScript\nDESCRIPTION: Defines a function type that enables direct manipulation of the Relay store data. The function takes a RecordSourceSelectorProxy and data parameters, allowing developers to create, update, or delete records in response to subscription payloads.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/api-reference/types/SelectorStoreUpdater.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n(store: RecordSourceSelectorProxy, data) => void\n```\n\n----------------------------------------\n\nTITLE: Implementing Image Component with useFragment in React\nDESCRIPTION: This code snippet illustrates the use of the useFragment hook from React Relay to extract data for an Image component in TypeScript. The Image component is modified to accept a fragment key (Props) and utilizes useFragment to access image data, showcasing dynamic data fetching and component reusability.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/tutorial/fragments-1.md#2025-04-18_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useFragment } from 'react-relay';\nimport type { ImageFragment$key } from \"./__generated__/ImageFragment.graphql\";\n\ntype Props = {\n  image: ImageFragment$key;\n  ...\n};\n\nfunction Image({image}: Props) {\n  const data = useFragment(ImageFragment, image);\n  return <img key={data.url} src={data.url} ... />\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Lazy Query Fetching with useLazyLoadQuery in React-Relay\nDESCRIPTION: Demonstrates how to implement lazy data fetching using the useLazyLoadQuery Hook in React-Relay. The example shows querying user data with variables, handling Flow types, and automatic subscription to data updates. This approach should be used cautiously as it can lead to performance issues with nested round trips.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/guided-tour/rendering/queries.md#2025-04-18_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst React = require('React');\nconst {graphql, useLazyLoadQuery} = require('react-relay');\n\nfunction App() {\n  const data = useLazyLoadQuery(\n    graphql`\n      query AppQuery($id: ID!) {\n        user(id: $id) {\n          name\n        }\n      }\n    `,\n    {id: '4'},\n  );\n\n  return (\n    <h1>{data.user?.name}</h1>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing AssignBestFriendButton Component in React with Relay\nDESCRIPTION: This React component, `AssignBestFriendButton`, uses Relay's `useFragment` hook to fetch the user data and renders a button. Clicking the button will trigger an update to the viewer's `best_friend` field using `commitLocalUpdate` and `readUpdatableQuery`.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/guided-tour/updating-data/imperatively-modifying-linked-fields.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// AssignBestFriendButton.react.js\nimport type {AssignBestFriendButton_user$key} from 'AssignBestFriendButton_user.graphql';\n\nconst {useFragment} = require('react-relay');\n\nexport default function AssignBestFriendButton({\n  someTypeRef: AssignBestFriendButton_user$key,\n}) {\n  const data = useFragment(graphql`\n    fragment AssignBestFriendButton_someType on SomeType {\n      user {\n        name\n        ...AssignableBestFriendButton_assignable_user\n      }\n    }\n  `, someTypeRef);\n\n  // We will replace this stub with the real thing below.\n  const onClick = () => {};\n\n  return (<button onClick={onClick}>\n    Declare {data.user?.name ?? 'someone with no name'} your new best friend!\n  </button>);\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Queries with usePreloadedQuery in React\nDESCRIPTION: This code demonstrates using `usePreloadedQuery` to render a GraphQL query within a React component, requiring Relay and GraphQL query imports, alongside a Relay environment.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/guided-tour/rendering/queries.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport type {HomeTabQuery} from 'HomeTabQuery.graphql';\nimport type {PreloadedQuery} from 'react-relay';\n\nconst React = require('React');\nconst {graphql, usePreloadedQuery} = require('react-relay');\n\ntype Props = {\n  queryRef: PreloadedQuery<HomeTabQuery>,\n};\n\nfunction HomeTab(props: Props) {\n  const data = usePreloadedQuery(\n    graphql`\n      query HomeTabQuery($id: ID!) {\n        user(id: $id) {\n          name\n        }\n      }\n    `,\n    props.queryRef,\n  );\n\n  return (\n    <h1>{data.user?.name}</h1>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Comment Posting Mutation\nDESCRIPTION: Create a GraphQL mutation for posting comments with the ability to prepend the new comment to a connection\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/tutorial/mutations-updates.md#2025-04-18_snippet_10\n\nLANGUAGE: GraphQL\nCODE:\n```\nmutation StoryCommentsComposerPostMutation(\n  $id: ID!,\n  $text: String!,\n  $connections: [ID!]!\n) {\n  postStoryComment(id: $id, text: $text) {\n    commentEdge @prependEdge(connections: $connections) {\n      node {\n        id\n        text\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up RelayEnvironmentProvider in React\nDESCRIPTION: This snippet shows how to set up the RelayEnvironmentProvider as a root component in a React application. It wraps the application to provide the Relay environment to all descendant components, enabling them to interact with Relay's data-fetching capabilities.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/guided-tour/rendering/environment.md#2025-04-18_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n// App root\n\nconst {RelayEnvironmentProvider} = require('react-relay');\nconst Environment = require('MyEnvironment');\n\nfunction Root() {\n  return (\n    <RelayEnvironmentProvider environment={Environment}>\n      {/*... */}\n    </RelayEnvironmentProvider>\n  );\n}\n\n```\n\n----------------------------------------\n\nTITLE: Handling Loading and Error States with React Suspense\nDESCRIPTION: Shows how to handle loading and error states when using Relay hooks with React Suspense and Error Boundaries, replacing the explicit handling in QueryRenderer.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/migration-and-compatibility/relay-hooks-and-legacy-container-apis.md#2025-04-18_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<ErrorBoundary renderError={Error}>\n  <Suspense fallback={<Loading />}>\n    <Home />\n  </Suspense>\n</ErrorBoundary>\n```\n\n----------------------------------------\n\nTITLE: Creating a Query Component using Relay\nDESCRIPTION: Defines a React query component 'App' that uses 'usePreloadedQuery' to fetch data and render a child fragment component that references data from the parent query.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v13.0.0/guided-tour/rendering/fragments.md#2025-04-18_snippet_8\n\nLANGUAGE: JavaScript\nCODE:\n```\n\"/**\\n * App.react.js\\n *\\n * Query Component\\n */\\n\\nimport type {AppQuery} from 'AppQuery.graphql';\\nimport type {PreloadedQuery} from 'react-relay';\\n\\nconst React = require('React');\\nconst {graphql, usePreloadedQuery} = require('react-relay');\\n\\nconst UserComponent = require('./UserComponent.react');\\n\\ntype Props = {\\n  appQueryRef: PreloadedQuery<AppQuery>,\\n}\\n\\nfunction App({appQueryRef}) {\\n  const data = usePreloadedQuery<AppQuery>(\\n    graphql`\\n      query AppQuery($id: ID!) {\\n        user(id: $id) {\\n          name\\n\\n          # Include child fragment:\\n          ...UserComponent_user\\n        }\\n      }\\n    `,\\n    appQueryRef,\\n  );\\n\\n  return (\\n    <>\\n      <h1>{data.user?.name}</h1>\\n      {/* Render child component, passing the fragment reference: */}\\n      <UserComponent user={data.user} />\\n    <>\\n  );\\n}\\n\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Relay Query Fetching in React\nDESCRIPTION: This code snippet shows how to set up a React component to fetch data using Relay. It defines a GraphQL query, preloads the query, and uses Relay hooks to render the fetched data. The component is wrapped with necessary Relay providers for proper functionality.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/getting-started/step-by-step-guide.md#2025-04-18_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nimport React from 'react';\nimport './App.css';\nimport graphql from 'babel-plugin-relay/macro';\nimport {\n  RelayEnvironmentProvider,\n  loadQuery,\n  usePreloadedQuery,\n} from 'react-relay/hooks';\nimport RelayEnvironment from './RelayEnvironment';\n\nconst { Suspense } = React;\n\n// Define a query\nconst RepositoryNameQuery = graphql`\n  query AppRepositoryNameQuery {\n    repository(owner: \"facebook\", name: \"relay\") {\n      name\n    }\n  }\n`;\n\n// Immediately load the query as our app starts. For a real app, we'd move this\n// into our routing configuration, preloading data as we transition to new routes.\nconst preloadedQuery = loadQuery(RelayEnvironment, RepositoryNameQuery, {\n  /* query variables */\n});\n\n// Inner component that reads the preloaded query results via `usePreloadedQuery()`.\n// This works as follows:\n// - If the query has completed, it returns the results of the query.\n// - If the query is still pending, it \"suspends\" (indicates to React that the\n//   component isn't ready to render yet). This will show the nearest <Suspense>\n//   fallback.\n// - If the query failed, it throws the failure error. For simplicity we aren't\n//   handling the failure case here.\nfunction App(props) {\n  const data = usePreloadedQuery(RepositoryNameQuery, props.preloadedQuery);\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <p>{data.repository.name}</p>\n      </header>\n    </div>\n  );\n}\n\n// The above component needs to know how to access the Relay environment, and we\n// need to specify a fallback in case it suspends:\n// - <RelayEnvironmentProvider> tells child components how to talk to the current\n//   Relay Environment instance\n// - <Suspense> specifies a fallback in case a child suspends.\nfunction AppRoot(props) {\n  return (\n    <RelayEnvironmentProvider environment={RelayEnvironment}>\n      <Suspense fallback={'Loading...'}>\n        <App preloadedQuery={preloadedQuery} />\n      </Suspense>\n    </RelayEnvironmentProvider>\n  );\n}\n\nexport default AppRoot;\n```\n\n----------------------------------------\n\nTITLE: Rendering Multiple Fragments with useFragment in Relay\nDESCRIPTION: This example showcases using `useFragment` multiple times within a single React component to render data from different fragments. It fetches both user and viewer data and displays them. The component imports fragment types for both user and viewer, uses `useFragment` twice, and renders data from each fragment.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/guided-tour/rendering/fragments.md#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport type {UserComponent_user$key} from 'UserComponent_user.graphql';\nimport type {UserComponent_viewer$key} from 'UserComponent_viewer.graphql';\n\nconst React = require('React');\nconst {graphql, useFragment} = require('react-relay');\n\ntype Props = {\n  user: UserComponent_user$key,\n  viewer: UserComponent_viewer$key,\n};\n\nfunction UserComponent(props: Props) {\n  const userData = useFragment(\n    graphql`\n      fragment UserComponent_user on User {\n        name\n        profile_picture(scale: 2) {\n          uri\n        }\n      }\n    `,\n    props.user,\n  );\n\n  const viewerData = useFragment(\n    graphql`\n      fragment UserComponent_viewer on Viewer {\n        actor {\n          name\n        }\n      }\n    `,\n    props.viewer,\n  );\n\n  return (\n    <>\n      <h1>{userData.name}</h1>\n      <div>\n        <img src={userData.profile_picture?.uri} />\n        Acting as: {viewerData.actor?.name ?? 'Unknown'}\n      </div>\n    </>\n  );\n}\n\nmodule.exports = UserComponent;\n```\n\n----------------------------------------\n\nTITLE: Implementing Pagination with usePaginationFragment in React\nDESCRIPTION: This snippet demonstrates how to use Relay's usePaginationFragment hook to implement pagination in a React component. It shows how to fetch and render a list of friends, and how to load more items using the loadNext function.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/guided-tour/list-data/pagination.md#2025-04-18_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport type {FriendsListPaginationQuery} from 'FriendsListPaginationQuery.graphql';\nimport type {FriendsListComponent_user$key} from 'FriendsList_user.graphql';\n\nconst React = require('React');\n\nconst {graphql, usePaginationFragment} = require('react-relay');\n\nconst {Suspense} = require('React');\n\ntype Props = {\n  user: FriendsListComponent_user$key,\n};\n\nfunction FriendsListComponent(props: Props) {\n  const {data, loadNext} = usePaginationFragment<FriendsListPaginationQuery, _>(\n    graphql`\n      fragment FriendsListComponent_user on User\n      @refetchable(queryName: \"FriendsListPaginationQuery\") {\n        name\n        friends(first: $count, after: $cursor)\n        @connection(key: \"FriendsList_user_friends\") {\n          edges {\n            node {\n              name\n              age\n            }\n          }\n        }\n      }\n    `,\n    props.user,\n  );\n\n  return (\n    <>\n      <h1>Friends of {data.name}:</h1>\n      <div>\n        {(data.friends?.edges ?? []).map(edge => {\n          const node = edge.node;\n          return (\n            <Suspense fallback={<Glimmer />}>\n              <FriendComponent user={node} />\n            </Suspense>\n          );\n        })}\n      </div>\n\n      <Button\n        onClick={() => {\n          loadNext(10)\n        }}>\n        Load more friends\n      </Button>\n    </>\n  );\n}\n\nmodule.exports = FriendsListComponent;\n```\n\n----------------------------------------\n\nTITLE: Rendering a Fragment with useFragment Hook in Relay\nDESCRIPTION: This React component `UserComponent` renders data from a GraphQL fragment using the `useFragment` hook.  It takes a `user` prop of type `UserComponent_user$key` (a fragment reference), retrieves the corresponding data using `useFragment`, and renders the user's name and profile picture.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/guided-tour/rendering/fragments.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport type {UserComponent_user$key} from 'UserComponent_user.graphql';\n\nconst React = require('React');\n\nconst {graphql, useFragment} = require('react-relay');\n\ntype Props = {\n  user: UserComponent_user$key,\n};\n\nfunction UserComponent(props: Props) {\n  const data = useFragment(\n    graphql`\n      fragment UserComponent_user on User {\n        name\n        profile_picture(scale: 2) {\n          uri\n        }\n      }\n    `,\n    props.user,\n  );\n\n  return (\n    <>\n      <h1>{data.name}</h1>\n      <div>\n        <img src={data.profile_picture?.uri} />\n      </div>\n    </>\n  );\n}\n\nmodule.exports = UserComponent;\n```\n\n----------------------------------------\n\nTITLE: Implementing RelayEnvironmentProvider in React Application Root\nDESCRIPTION: Example showing how to set up RelayEnvironmentProvider at the root of a React application to provide a Relay environment to all child components. The environment is created and passed as a prop to make it available through React Context.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v13.0.0/api-reference/hooks/relay-environment-provider.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst React = require('React');\n\nconst {RelayEnvironmentProvider} = require('react-relay');\n\nconst Environment = createNewEnvironment();\n\nfunction Root() {\n  return (\n    <RelayEnvironmentProvider environment={Environment}>\n      <App />\n    </RelayEnvironmentProvider>\n  );\n}\n\nmodule.exports = Root;\n```\n\n----------------------------------------\n\nTITLE: Implementing Infinite Scroll Pagination with Relay usePaginationFragment\nDESCRIPTION: This code shows how to implement infinite scroll pagination in a React component using Relay's usePaginationFragment hook. It extracts hasNext and isLoadingNext states from the hook to determine when more data is available and when data is being loaded. The component uses an InfiniteScrollTrigger to detect when the user reaches the bottom of the page and loads the next batch of 3 items.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/tutorial/connections-pagination.md#2025-04-18_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\nfunction NewsfeedContents({query}) {\n  const {\n    data,\n    loadNext,\n    // change-line\n    hasNext,\n    // change-line\n    isLoadingNext,\n  } = usePaginationFragment(NewsfeedContentsFragment, query);\n  // change\n  function onEndReached() {\n    loadNext(3);\n  }\n  // end-change\n  const storyEdges = data.viewer.newsfeedStories.edges;\n  return (\n    <>\n      {storyEdges.map(storyEdge =>\n        <Story key={storyEdge.node.id} story={storyEdge.node} />\n      )}\n      // change\n      <InfiniteScrollTrigger\n        onEndReached={onEndReached}\n        hasNext={hasNext}\n        isLoadingNext={isLoadingNext}\n      />\n      // end-change\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Executing Mutation with useMutation Hook\nDESCRIPTION: A functional component LikeButton utilizes Relay's useMutation API to execute GraphQL mutations. It enables mutation triggering through a commitMutation callback. The mutation showcases dynamic feedback liking by updating its status and like count upon execution. The useMutation hook ensures type safety with Flow and provides a boolean indicator to manage ongoing mutations.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/guided-tour/updating-data/graphql-mutations.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport type {FeedbackLikeData, LikeButtonMutation} from 'LikeButtonMutation.graphql';\n\nconst {useMutation, graphql} = require('react-relay');\n\nfunction LikeButton({\n  feedbackId: string,\n}) {\n  const [commitMutation, isMutationInFlight] = useMutation<LikeButtonMutation>(\n    graphql`\n      mutation LikeButtonMutation($input: FeedbackLikeData!) {\n        feedback_like(data: $input) {\n          feedback {\n            viewer_does_like\n            like_count\n          }\n        }\n      }\n    `\n  );\n\n  return <button\n    onClick={() => commitMutation({\n      variables: {\n        input: {id: feedbackId},\n      },\n    })}\n    disabled={isMutationInFlight}\n  >\n    Like\n  </button>\n}\n```\n\n----------------------------------------\n\nTITLE: Executing Mutations with commitMutation in Relay\nDESCRIPTION: Example showing how to execute a mutation using commitMutation from react-relay. The mutation likes a feedback item by providing a feedback ID and receives updated like count and viewer like status in response. Demonstrates usage of graphql template literal and mutation configuration.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/api-reference/relay-runtime/commit-mutation.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport type {FeedbackLikeMutation} from 'FeedbackLikeMutation.graphql';\nconst React = require('React');\n\nconst {graphql, commitMutation} = require('react-relay');\n\nfunction likeFeedback(environment: IEnvironment): Disposable {\n  return commitMutation<FeedbackLikeMutation>(environment, {\n    mutation: graphql`\n      mutation FeedbackLikeMutation($input: FeedbackLikeData!) {\n        feedback_like(data: $input) {\n          feedback {\n            id\n            viewer_does_like\n            like_count\n          }\n        }\n      }\n    `,\n    variables: {\n      input: {\n        id: '123',\n      },\n    },\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing GraphQL Mutation with Relay useMutation Hook in JavaScript\nDESCRIPTION: Example demonstrating how to use the useMutation hook to implement a Like button component that executes a GraphQL mutation. Shows mutation definition, optimistic updates, and handling loading states.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/api-reference/hooks/use-mutation.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport type {FeedbackLikeMutation} from 'FeedbackLikeMutation.graphql';\nconst React = require('React');\n\nconst {graphql, useMutation} = require('react-relay');\n\nfunction LikeButton() {\n  const [commit, isInFlight] = useMutation<FeedbackLikeMutation>(graphql`\n    mutation FeedbackLikeMutation($input: FeedbackLikeData!) {\n      feedback_like(data: $input) {\n        feedback {\n          id\n          viewer_does_like\n          like_count\n        }\n      }\n    }\n  `);\n\n  if (isInFlight) {\n    return <Spinner />;\n  }\n\n  return (\n    <button\n      onClick={() => {\n        commit({\n          variables: {\n            input: {\n              id: '123',\n              text: 'text',\n            },\n          },\n          onCompleted(data) {\n            console.log(data);\n          },\n        });\n      }}\n    />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using `useRefetchableFragment` Hook for Fragment Refreshing (JavaScript)\nDESCRIPTION: This snippet demonstrates how to manually refresh a fragment's data using the `useRefetchableFragment` hook from Relay. It shows how to retrieve data and update the component with the latest information by refetching via a generated query. The snippet also addresses how to properly set fetch policies to ensure the correct data is fetched from the server.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/guided-tour/refetching/refreshing-fragments.md#2025-04-18_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport type {UserComponent_user$key} from 'UserComponent_user.graphql';\n\ntype Props = {\n  user: UserComponent_user$key,\n};\n\nfunction UserComponent(props: Props) {\n  const [data, refetch] = useRefetchableFragment(\n    graphql`\n      fragment UserComponent_user on User\n      # @refetchable makes it so Relay autogenerates a query for\n      # fetching this fragment\n      @refetchable(queryName: \"UserComponentRefreshQuery\") {\n        id\n        name\n        friends {\n          count\n        }\n      }\n    `,\n    props.user,\n  );\n\n  const refresh = useCallback(() => {\n    // We call refetch with empty variables: `{}`,\n    // which will refetch the @refetchable query with the same\n    // original variables the fragment was fetched with, and update\n    // this component with the latest fetched data.\n    // The fetchPolicy ensures we always fetch from the server and skip\n    // the local data cache.\n    refetch({}, {fetchPolicy: 'network-only'})\n  }), [/* ... */];\n\n  return (\n    <>\n      <h1>{data.name}</h1>\n      <div>Friends count: {data.friends?.count}</div>\n      <Button\n        onClick={() => refresh()}>\n        Fetch latest count\n      </Button>\n    </>\n  );\n}\n\n```\n\n----------------------------------------\n\nTITLE: Implementing Pagination with usePaginationFragment in React and Relay\nDESCRIPTION: This code snippet demonstrates how to use the usePaginationFragment hook to render a list of friends and implement pagination. It includes the fragment definition with @connection and @refetchable directives, and shows how to use the returned functions and data to render the list and load more items.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/api-reference/hooks/use-pagination-fragment.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport type {FriendsList_user$key} from 'FriendsList_user.graphql';\n\nconst React = require('React');\n\nconst {graphql, usePaginationFragment} = require('react-relay');\n\ntype Props = {\n  user: FriendsList_user$key,\n};\n\nfunction FriendsList(props: Props) {\n  const {\n    data,\n    loadNext,\n    loadPrevious,\n    hasNext,\n    hasPrevious,\n    isLoadingNext,\n    isLoadingPrevious,\n    refetch, // For refetching connection\n  } = usePaginationFragment(\n    graphql`\n      fragment FriendsListComponent_user on User\n      @refetchable(queryName: \"FriendsListPaginationQuery\") {\n        name\n        friends(first: $count, after: $cursor)\n        @connection(key: \"FriendsList_user_friends\") {\n          edges {\n            node {\n              name\n              age\n            }\n          }\n        }\n      }\n    `,\n    props.user,\n  );\n\n  return (\n    <>\n      <h1>Friends of {data.name}:</h1>\n\n      <List items={data.friends?.edges.map(edge => edge.node)}>\n        {node => {\n          return (\n            <div>\n              {node.name} - {node.age}\n            </div>\n          );\n        }}\n      </List>\n      <Button onClick={() => loadNext(10)}>Load more friends</Button>\n    </>\n  );\n}\n\nmodule.exports = FriendsList;\n```\n\n----------------------------------------\n\nTITLE: Testing Relay Mutations\nDESCRIPTION: Example of testing mutation operations using mock environment, showing both success and completion callback testing.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/guides/testing-relay-components.md#2025-04-18_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nfunction sendMutation(environment, onCompleted, onError, variables)\n  commitMutation(environment, {\n    mutation: graphql`...`,\n    onCompleted,\n    onError,\n    variables,\n  });\n}\n\ntest('it should send mutation', () => {\n  const environment = createMockEnvironment();\n  const onCompleted = jest.fn();\n  sendMutation(environment, onCompleted, jest.fn(), {});\n  const operation = environment.mock.getMostRecentOperation();\n\n  ReactTestRenderer.act(() => {\n    environment.mock.resolve(\n      operation,\n      MockPayloadGenerator.generate(operation)\n    );\n  });\n\n  expect(onCompleted).toBeCalled();\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Relay with create-relay-app\nDESCRIPTION: The easiest way to install Relay using the create-relay-app package, which supports Next, Vite, and Create React App platforms.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/getting-started/installation-and-setup.md#2025-04-18_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm create @tobiastengler/relay-app\n```\n\n----------------------------------------\n\nTITLE: GraphQL Data Normalization Example\nDESCRIPTION: Demonstrates how Relay Runtime normalizes a GraphQL response into a RecordSource with distinct records. Shows the transformation from a GraphQL fragment and response into an internal normalized representation.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/principles-and-architecture/runtime-architecture.md#2025-04-18_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nfragment on User {\n  id\n  name\n  address {\n    city\n  }\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// Response\n{\n  id: '842472',\n  name: 'Joe',\n  address: {\n    city: 'Seattle',\n  }\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// Normalized Representation\nRecordSource {\n  '842472': Record {\n    __id: '842472',\n    __typename: 'User', // the type is known statically from the fragment\n    id: '842472',\n    name: 'Joe',\n    address: {__ref: 'client:842472:address'}, // link to another record\n  },\n  'client:842472:address': Record {\n    // A client ID, derived from the path from parent & parent's ID\n    __id: 'client:842472:address',\n    __typename: 'Address',\n    city: 'Seattle',\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating React Component to Use Relay Query\nDESCRIPTION: Modified Newsfeed component using useLazyLoadQuery hook from react-relay to fetch and render data from the GraphQL query.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/tutorial/queries-1.md#2025-04-18_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useLazyLoadQuery } from \"react-relay\";\n\nexport default function Newsfeed({}) {\n  const data = useLazyLoadQuery(\n    NewsfeedQuery,\n    {},\n  );\n  const story = data.topStory;\n  return (\n    <div className=\"newsfeed\">\n      <Story story={story} />\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering a Query with usePreloadedQuery in React\nDESCRIPTION: Example of using usePreloadedQuery to render a GraphQL query in a React component. This snippet shows how to declare the query, use it with the hook, and render the resulting data.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/guided-tour/rendering/queries.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport type {HomeTabQuery} from 'HomeTabQuery.graphql';\nimport type {PreloadedQuery} from 'react-relay';\n\nconst React = require('React');\nconst {graphql, usePreloadedQuery} = require('react-relay');\n\ntype Props = {\n  queryRef: PreloadedQuery<HomeTabQuery>,\n};\n\nfunction HomeTab(props: Props) {\n  const data = usePreloadedQuery(\n    graphql`\n      query HomeTabQuery($id: ID!) {\n        user(id: $id) {\n          name\n        }\n      }\n    `,\n    props.queryRef,\n  );\n\n  return (\n    <h1>{data.user?.name}</h1>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Setting up and using Relay Runtime Environment with GraphQL\nDESCRIPTION: This example demonstrates how to set up a Relay environment with a custom fetch function, create a store, and execute a GraphQL query. It shows the complete flow from importing required components to handling query responses.\nSOURCE: https://github.com/facebook/relay/blob/main/packages/relay-runtime/README.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// @flow strict-local\n\nimport type {FetchFunction} from 'relay-runtime';\n\nconst {\n  Environment,\n  Network,\n  Observable,\n  RecordSource,\n  Store,\n  fetchQuery,\n  graphql,\n} = require('relay-runtime');\n\nconst fetchFn: FetchFunction = function (request, variables) {\n  return new Observable.create(source => {\n    fetch('/my-graphql-api', {\n      method: 'POST',\n      body: JSON.stringify({\n        text: request.text,\n        variables,\n      }),\n    })\n      .then(response => response.json())\n      .then(data => source.next(data));\n  });\n};\n\nconst network = Network.create(fetchFn);\nconst store = new Store(new RecordSource());\nconst environment = new Environment({\n  network,\n  store,\n});\n\nfetchQuery(\n  environment,\n  graphql`\n    query AppQuery($id: ID!) {\n      user(id: $id) {\n        name\n      }\n    }\n  `,\n  {id: 'my-node-id'},\n).subscribe({\n  error: error => {\n    console.error(error);\n  },\n  next: data => {\n    console.log(data);\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing LikeButton Component with Optimistic Update\nDESCRIPTION: Complete example of a LikeButton component using Relay's useMutation hook with an optimistic response. It shows how to read current data, structure the mutation, and provide an optimistic response that updates both the like status and count.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/guided-tour/updating-data/graphql-mutations.md#2025-04-18_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport type {FeedbackLikeData, LikeButtonMutation} from 'LikeButtonMutation.graphql';\nimport type {LikeButton_feedback$fragmentType} from 'LikeButton_feedback.graphql';\n\nconst {useMutation, graphql} = require('react-relay');\n\nfunction LikeButton({\n  feedback: LikeButton_feedback$fragmentType,\n}) {\n  const data = useFragment(\n    graphql`\n      fragment LikeButton_feedback on Feedback {\n        __id\n        viewer_does_like @required(action: THROW)\n        like_count @required(action: THROW)\n      }\n    `,\n    feedback\n  );\n\n  const [commitMutation, isMutationInFlight] = useMutation<LikeButtonMutation>(\n    graphql`\n      mutation LikeButtonMutation($input: FeedbackLikeData!)\n      @raw_response_type {\n        feedback_like(data: $input) {\n          feedback {\n            viewer_does_like\n            like_count\n          }\n        }\n      }\n    `\n  );\n\n  const changeToLikeCount = data.viewer_does_like ? -1 : 1;\n  return <button\n    onClick={() => commitMutation({\n      variables: {\n        input: {id: data.__id},\n      },\n      optimisticResponse: {\n        feedback_like: {\n          feedback: {\n            id: data.__id,\n            viewer_does_like: !data.viewer_does_like,\n            like_count: data.like_count + changeToLikeCount,\n          },\n        },\n      },\n    })}\n    disabled={isMutationInFlight}\n  >\n    Like\n  </button>\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Infinite Scroll Pagination with Relay in React\nDESCRIPTION: This code snippet demonstrates how to implement infinite scroll pagination in a React component using Relay's usePaginationFragment hook. It uses an InfiniteScrollTrigger component to detect when the bottom of the page is reached and load more data.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/tutorial/connections-pagination.md#2025-04-18_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport InfiniteScrollTrigger from \"./InfiniteScrollTrigger\";\n\nfunction Newsfeed() {\n  const queryData = useLazyLoadQuery<NewsfeedQueryType>(\n    NewsfeedQuery,\n    {},\n  );\n  const {\n    data,\n    loadNext,\n    hasNext,\n    isLoadingNext,\n  } = usePaginationFragment(NewsfeedContentsFragment, queryData);\n  function onEndReached() {\n    loadNext(1);\n  }\n  const storyEdges = data.viewer.newsfeedStories.edges;\n  return (\n    <div className=\"newsfeed\">\n      {storyEdges.map(storyEdge =>\n        <Story key={storyEdge.node.id} story={storyEdge.node} />\n      )}\n      <InfiniteScrollTrigger\n        onEndReached={onEndReached}\n        hasNext={hasNext}\n        isLoadingNext={isLoadingNext}\n      />\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Bi-directional Pagination in React Relay - JavaScript\nDESCRIPTION: This snippet shows how to paginate bi-directionally in React components using `usePaginationFragment`. It requires `react-relay` and GraphQL fragments for data fetching. Key parameters include `after`, `before`, `first`, and `last` to control the pagination direction. Inputs include GraphQL fragment keys, and outputs are the data and state management hooks for both forward and backward pagination.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v13.0.0/guided-tour/list-data/advanced-pagination.md#2025-04-18_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport type {FriendsListComponent_user$key} from 'FriendsListComponent_user.graphql';\n\nconst React = require('React');\nconst {Suspense} = require('React');\n\nconst {graphql, usePaginationFragment} = require('react-relay');\n\ntype Props = {\n  userRef: FriendsListComponent_user$key,\n};\n\nfunction FriendsListComponent(props: Props) {\n  const {\n    data,\n    loadPrevious,\n    hasPrevious,\n    // ... forward pagination values\n  } = usePaginationFragment(\n    graphql`\n      fragment FriendsListComponent_user on User {\n        name\n        friends(after: $after, before: $before, first: $first, last: $last)\n          @connection(key: \"FriendsListComponent_user_friends_connection\") {\n          edges {\n            node {\n              name\n              age\n            }\n          }\n        }\n      }\n    `,\n    userRef,\n  );\n\n  return (\n    <>\n      <h1>Friends of {data.name}:</h1>\n      <List items={data.friends?.edges.map(edge => edge.node)}>\n        {node => {\n          return (\n            <div>\n              {node.name} - {node.age}\n            </div>\n          );\n        }}\n      </List>\n\n      {hasPrevious ? (\n        <Button onClick={() => loadPrevious(10)}>\n          Load more friends\n        </Button>\n      ) : null}\n\n      {/* Forward pagination controls can go simultaneously here */}\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a GraphQL Mutation with useMutation Hook in React-Relay\nDESCRIPTION: Example showing how to use the useMutation hook to implement a Like button. The snippet demonstrates importing dependencies, defining the mutation with graphql template literal, handling the in-flight state, and executing the mutation with variables and callbacks.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/api-reference/hooks/use-mutation.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport type {FeedbackLikeMutation} from 'FeedbackLikeMutation.graphql';\nconst React = require('React');\n\nconst {graphql, useMutation} = require('react-relay');\n\nfunction LikeButton() {\n  const [commit, isInFlight] = useMutation<FeedbackLikeMutation>(graphql`\n    mutation FeedbackLikeMutation($input: FeedbackLikeData!) {\n      feedback_like(data: $input) {\n        feedback {\n          id\n          viewer_does_like\n          like_count\n        }\n      }\n    }\n  `);\n\n  if (isInFlight) {\n    return <Spinner />;\n  }\n\n  return (\n    <button\n      onClick={() => {\n        commit({\n          variables: {\n            input: {\n              id: '123',\n              text: 'text',\n            },\n          },\n          onCompleted(data) {\n            console.log(data);\n          },\n        });\n      }}\n    />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using GraphQL Fragment in Relay Component - JavaScript\nDESCRIPTION: This snippet shows how to use the 'graphql' tag from Relay to declare a fragment within a JavaScript file. It defines a 'userFragment' that can be utilized in components to fetch specific user data.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/guided-tour/rendering/fragments.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst {graphql} = require('react-relay');\n\nconst userFragment = graphql`\n  fragment UserFragment_user on User {\n    name\n    age\n    profile_picture(scale: 2) {\n      uri\n    }\n  }\n`;\n```\n\n----------------------------------------\n\nTITLE: Implementing Pagination in React with Relay's usePaginationFragment\nDESCRIPTION: This example demonstrates how to implement pagination for a list of friends using Relay's usePaginationFragment hook. It shows how to define a refetchable fragment, load additional items with loadNext, and handle the loading state with Suspense.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/guided-tour/list-data/pagination.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport type {FriendsListComponent_user$key} from 'FriendsList_user.graphql';\n\nconst React = require('React');\n\nconst {graphql, usePaginationFragment} = require('react-relay');\n\nconst {Suspense} = require('React');\n\ntype Props = {\n  user: FriendsListComponent_user$key,\n};\n\nfunction FriendsListComponent(props: Props) {\n  const {data, loadNext} = usePaginationFragment(\n    graphql`\n      fragment FriendsListComponent_user on User\n      @refetchable(queryName: \"FriendsListPaginationQuery\") {\n        name\n        friends(first: $count, after: $cursor)\n        @connection(key: \"FriendsList_user_friends\") {\n          edges {\n            node {\n              name\n              age\n            }\n          }\n        }\n      }\n    `,\n    props.user,\n  );\n\n  return (\n    <>\n      <h1>Friends of {data.name}:</h1>\n      <div>\n        {(data.friends?.edges ?? []).map(edge => {\n          const node = edge.node;\n          return (\n            <Suspense fallback={<Glimmer />}>\n              <FriendComponent user={node} />\n            </Suspense>\n          );\n        })}\n      </div>\n\n      <Button\n        onClick={() => {\n          loadNext(10)\n        }}>\n        Load more friends\n      </Button>\n    </>\n  );\n}\n\nmodule.exports = FriendsListComponent;\n```\n\n----------------------------------------\n\nTITLE: React Component with useMutation Hook\nDESCRIPTION: This React component, StoryLikeButton, utilizes the useMutation hook from react-relay to trigger the StoryLikeButtonLikeMutation. It calls commitMutation with the story's ID and the toggled like status. It also uses the `useFragment` hook to fetch the story data.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/tutorial/mutations-updates.md#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nfunction StoryLikeButton({story}) {\n  const data = useFragment(StoryLikeButtonFragment, story);\n  function onLikeButtonClicked() {\n    // To be filled in\n  }\n  return (\n    <>\n      <LikeCount count={data.likeCount} />\n      <LikeButton value={data.doesViewerLike} onChange={onLikeButtonClicked} />\n    </>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Query Loading with useQueryLoader in React Relay\nDESCRIPTION: Example demonstrating how to use useQueryLoader and usePreloadedQuery hooks to fetch and display user data. The code shows a button-triggered query loading pattern with proper disposal handling and loading states.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/api-reference/hooks/use-query-loader.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport type {PreloadedQuery} from 'react-relay';\n\nconst {useQueryLoader, usePreloadedQuery} = require('react-relay');\n\nconst AppQuery = graphql`\n  query AppQuery($id: ID!) {\n    user(id: $id) {\n      name\n    }\n  }\n`;\n\nfunction QueryFetcherExample() {\n  const [\n    queryReference,\n    loadQuery,\n    disposeQuery,\n  ] = useQueryLoader(\n    AppQuery,\n  );\n\n  if (queryReference == null) {\n    return (\n      <Button onClick={() => loadQuery({})}> Click to reveal the name </Button>\n    );\n  }\n\n  return (\n    <>\n      <Button onClick={disposeQuery}>\n        Click to hide the name and dispose the query.\n      </Button>\n      <React.Suspense fallback=\"Loading\">\n        <NameDisplay queryReference={queryReference} />\n      </React.Suspense>\n    </>\n  );\n}\n\nfunction NameDisplay({ queryReference }) {\n  const data = usePreloadedQuery(AppQuery, queryReference);\n\n  return <h1>{data.user?.name}</h1>;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Hovercard Contents Component with Query Variables\nDESCRIPTION: React component implementation showing how to use query variables with useLazyLoadQuery\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/tutorial/queries-2.md#2025-04-18_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nexport default function PosterDetailsHovercardContents({\n  posterID,\n}: {\n  posterID: string;\n}): React.ReactElement {\n  const data = useLazyLoadQuery<QueryType>(\n    PosterDetailsHovercardContentsQuery,\n    {posterID},\n  );\n  return <PosterDetailsHovercardContentsBody poster={data.node} />;\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring a GraphQL Connection Fragment in Relay\nDESCRIPTION: This snippet demonstrates how to declare a fragment that queries for a GraphQL connection in Relay. It includes the @connection directive with a key parameter for pagination support.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/guided-tour/list-data/rendering-connections.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst {graphql} = require('RelayModern');\n\nconst userFragment = graphql`\n  fragment UserFragment on User {\n    name\n    friends(after: $cursor, first: $count)\n      @connection(key: \"UserFragment_friends\") {\n      edges {\n        node {\n          ...FriendComponent\n        }\n      }\n    }\n  }\n`;\n```\n\n----------------------------------------\n\nTITLE: Refreshing Data with useRefetchableFragment in Relay\nDESCRIPTION: This snippet demonstrates how to use the useRefetchableFragment Hook with the @refetchable directive to manually refresh fragment data. It shows how to set up a component that can fetch the latest data from the server using a network-only fetch policy.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/guided-tour/refetching/refreshing-fragments.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport type {UserComponent_user$key} from 'UserComponent_user.graphql';\n\ntype Props = {\n  user: UserComponent_user$key,\n};\n\nfunction UserComponent(props: Props) {\n  const [data, refetch] = useRefetchableFragment(\n    graphql`\n      fragment UserComponent_user on User\n      # @refetchable makes it so Relay autogenerates a query for\n      # fetching this fragment\n      @refetchable(queryName: \"UserComponentRefreshQuery\") {\n        id\n        name\n        friends {\n          count\n        }\n      }\n    `,\n    props.user,\n  );\n\n  const refresh = useCallback(() => {\n    // We call refetch with empty variables: `{}`,\n    // which will refetch the @refetchable query with the same\n    // original variables the fragment was fetched with, and update\n    // this component with the latest fetched data.\n    // The fetchPolicy ensures we always fetch from the server and skip\n    // the local data cache.\n    refetch({}, {fetchPolicy: 'network-only'})\n  }), [/* ... */]);\n\n  return (\n    <>\n      <h1>{data.name}</h1>\n      <div>Friends count: {data.friends?.count}</div>\n      <Button\n        onClick={() => refresh()}>\n        Fetch latest count\n      </Button>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a GraphQL Query in Relay\nDESCRIPTION: Example of a GraphQL query with variables and fragment, demonstrating the structure of a query and its corresponding JSON response\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/guided-tour/rendering/queries.md#2025-04-18_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nquery UserQuery($id: ID!) {\n  user(id: $id) {\n    id\n    name\n    ...UserFragment\n  }\n  viewer {\n    actor {\n      name\n    }\n  }\n}\n\nfragment UserFragment on User {\n  username\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"user\": {\n      \"id\": \"4\",\n      \"name\": \"Mark Zuckerberg\",\n      \"username\": \"zuck\"\n    },\n    \"viewer\": {\n      \"actor\": {\n        \"name\": \"Your Name\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Fragment and Query Component Integration\nDESCRIPTION: Shows how to compose fragments into queries and integrate them in a React application. Demonstrates proper query composition and data flow from query to fragment components.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/guided-tour/rendering/fragments.md#2025-04-18_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * App.react.js\n *\n * Query Component\n */\n\nimport type {AppQuery} from 'AppQuery.graphql';\nimport type {PreloadedQuery} from 'react-relay';\n\nconst React = require('React');\nconst {graphql, usePreloadedQuery} = require('react-relay');\n\nconst UserComponent = require('./UserComponent.react');\n\ntype Props = {\n  appQueryRef: PreloadedQuery<AppQuery>,\n}\n\nfunction App({appQueryRef}) {\n  const data = usePreloadedQuery(\n    graphql`\n      query AppQuery($id: ID!) {\n        user(id: $id) {\n          name\n\n          # Include child fragment:\n          ...UserComponent_user\n        }\n      }\n    `,\n    appQueryRef,\n  );\n\n  return (\n    <>\n      <h1>{data.user?.name}</h1>\n      {/* Render child component, passing the fragment reference: */}\n      <UserComponent user={data.user} />\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using GraphQL Template Tag in JavaScript\nDESCRIPTION: Demonstrates how to use the graphql template tag to write a simple GraphQL query. The tag produces a GraphQLTaggedNode that represents the GraphQL document at runtime.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/getting-started/compiler.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport {graphql} from 'react-relay';\n\ngraphql`\n  query MyQuery {\n    viewer {\n      id\n    }\n  }\n`;\n```\n\n----------------------------------------\n\nTITLE: Implementing Newsfeed Query with Pagination\nDESCRIPTION: Demonstrates how to structure a paginated newsfeed query using Relay connections.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/tutorial/connections-pagination.md#2025-04-18_snippet_6\n\nLANGUAGE: graphql\nCODE:\n```\nconst NewsfeedQuery = graphql`\n  query NewsfeedQuery {\n    viewer {\n      newsfeedStories(first: 3) {\n        edges {\n          node {\n            id\n            ...StoryFragment\n          }\n        }\n      }\n    }\n  }\n`;\n```\n\n----------------------------------------\n\nTITLE: Declaring GraphQL Mutation in Relay\nDESCRIPTION: Shows how to declare a GraphQL mutation using Relay's graphql tag.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/guided-tour/updating-data/graphql-mutations.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst {graphql} = require('react-relay');\n\nconst feedbackLikeMutation = graphql`\n  mutation FeedbackLikeMutation($input: FeedbackLikeData!) {\n    feedback_like(data: $input) {\n      feedback {\n        id\n        viewer_does_like\n        like_count\n      }\n    }\n  }\n`;\n```\n\n----------------------------------------\n\nTITLE: GraphQL Schema Extension for User\nDESCRIPTION: This GraphQL code defines a schema extension for the `User` type, adding a boolean field `is_selected`. This is used to demonstrate updating data in response to user interactions in Relay.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/guided-tour/updating-data/imperatively-modifying-store-data.md#2025-04-18_snippet_2\n\nLANGUAGE: graphql\nCODE:\n```\n\"# User.graphql\nextend type User {\n  is_selected: Boolean\n}\"\n```\n\n----------------------------------------\n\nTITLE: Converting a Query to Use Fragments for Pagination in Relay\nDESCRIPTION: This snippet demonstrates how to separate a query into a fragment, which is necessary for Relay's pagination features. The contents of the NewsfeedQuery are moved into a NewsfeedContentsFragment that can be used with pagination hooks.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/tutorial/connections-pagination.md#2025-04-18_snippet_11\n\nLANGUAGE: graphql\nCODE:\n```\nconst NewsfeedQuery = graphql`\n  query NewsfeedQuery {\n    ...NewsfeedContentsFragment\n  }\n`;\n\nconst NewsfeedContentsFragment = graphql`\n  fragment NewsfeedContentsFragment on Query {\n    viewer {\n      newsfeedStories {\n        edges {\n          node {\n            id\n            ...StoryFragment\n          }\n        }\n      }\n    }\n  }\n`;\n```\n\n----------------------------------------\n\nTITLE: React Component Implementation with Required Fields\nDESCRIPTION: React component showing how to handle nullable fields using Relay's @required directive. Demonstrates conditional rendering based on required field availability and proper null checking patterns.\nSOURCE: https://github.com/facebook/relay/blob/main/website/blog/2023-01-03-resilient-relay-apps.mdx#2025-04-18_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nconst asset = useFragment(\n  graphql`\n    fragment MyFragment on Asset {\n      id\n      name @required(action: LOG)\n      slug @required(action: LOG)\n      color\n      supply {\n        total @required(action: LOG)\n        circulating @required(action: LOG)\n      }\n    }\n  `,\n  assetRef,\n);\n\n// If we couldn't get the required asset name or slug fields, hide this entire UI\nif (asset === null) {\n  return null;\n}\n// Otherwise hide certain portions of the UI if data is missing\nreturn (\n  <>\n    <Title color={asset.color}>{asset.name}</Title>\n    <Subtitle>{asset.slug}</Subtitle>\n    {asset.supply && (\n      <SupplyStats total={asset.supply.total} circulating={asset.supply.circulating} />\n    )}\n  </>\n);\n```\n\n----------------------------------------\n\nTITLE: Using useMutation Hook to Execute Mutations\nDESCRIPTION: React component using Relay's useMutation hook to execute a like mutation. Shows how to initialize the mutation, handle in-flight state, and provide mutation variables.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/guided-tour/updating-data/graphql-mutations.md#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport type {FeedbackLikeData, LikeButtonMutation} from 'LikeButtonMutation.graphql';\n\nconst {useMutation, graphql} = require('react-relay');\n\nfunction LikeButton({\n  feedbackId: string,\n}) {\n  const [commitMutation, isMutationInFlight] = useMutation<LikeButtonMutation>(\n    graphql`\n      mutation LikeButtonMutation($input: FeedbackLikeData!) {\n        feedback_like(data: $input) {\n          feedback {\n            viewer_does_like\n            like_count\n          }\n        }\n      }\n    `\n  );\n\n  return <button\n    onClick={() => commitMutation({\n      variables: {\n        input: {id: feedbackId},\n      },\n    })}\n    disabled={isMutationInFlight}\n  >\n    Like\n  </button>\n}\n```\n\n----------------------------------------\n\nTITLE: Executing a Mutation with commitMutation API\nDESCRIPTION: A complete example of committing a mutation using Relay's commitMutation API. This function takes an environment and input data, executes the mutation, and provides callbacks for completion and error handling.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v13.0.0/guided-tour/updating-data/graphql-mutations.md#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport type {Environment} from 'react-relay';\nimport type {FeedbackLikeData, FeedbackLikeMutation} from 'FeedbackLikeMutation.graphql';\n\nconst {commitMutation, graphql} = require('react-relay');\n\nfunction commitFeedbackLikeMutation(\n  environment: Environment,\n  input: FeedbackLikeData,\n) {\n  return commitMutation<FeedbackLikeMutation>(environment, {\n    mutation: graphql`\n      mutation FeedbackLikeMutation($input: FeedbackLikeData!) {\n        feedback_like(data: $input) {\n          feedback {\n            id\n            viewer_does_like\n            like_count\n          }\n        }\n      }\n    `,\n    variables: {input},\n    onCompleted: response => {} /* Mutation completed */,\n    onError: error => {} /* Mutation errored */,\n  });\n}\n\nmodule.exports = {commit: commitFeedbackLikeMutation};\n```\n\n----------------------------------------\n\nTITLE: Using useLazyLoadQuery Hook to Fetch Data (JSX)\nDESCRIPTION: Updated Newsfeed component that uses Relay's useLazyLoadQuery hook to fetch data from the server. The component passes the GraphQL query and an empty variables object to the hook and renders the returned data.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/tutorial/queries-1.md#2025-04-18_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useLazyLoadQuery } from \"react-relay\";\n\nexport default function Newsfeed({}) {\n  const data = useLazyLoadQuery(\n    NewsfeedQuery,\n    {},\n  );\n  const story = data.topStory;\n  // As before:\n  return (\n    <div className=\"newsfeed\">\n      <Story story={story} />\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering a Fragment with useFragment in Relay\nDESCRIPTION: This code demonstrates how to render data from a fragment using the `useFragment` hook in a React component. It imports the fragment type and uses `useFragment` with the fragment definition and a fragment reference (`props.user`) to retrieve the data.  The component then renders the user's name and profile picture.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/guided-tour/rendering/fragments.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport type {UserComponent_user$key} from 'UserComponent_user.graphql';\n\nconst React = require('React');\n\nconst {graphql, useFragment} = require('react-relay');\n\ntype Props = {\n  user: UserComponent_user$key,\n};\n\nfunction UserComponent(props: Props) {\n  const data = useFragment(\n    graphql`\n      fragment UserComponent_user on User {\n        name\n        profile_picture(scale: 2) {\n          uri\n        }\n      }\n    `,\n    props.user,\n  );\n\n  return (\n    <>\n      <h1>{data.name}</h1>\n      <div>\n        <img src={data.profile_picture?.uri} />\n      </div>\n    </>\n  );\n}\n\nmodule.exports = UserComponent;\n```\n\n----------------------------------------\n\nTITLE: Implementing Multiple Connection Pagination in Relay\nDESCRIPTION: Example of how to paginate over multiple connections within the same component using usePaginationFragment. Shows pagination implementation for both user friends and viewer friends connections.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/guided-tour/list-data/advanced-pagination.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport type {CombinedFriendsListComponent_user$key} from 'CombinedFriendsListComponent_user.graphql';\nimport type {CombinedFriendsListComponent_viewer$key} from 'CombinedFriendsListComponent_viewer.graphql';\n\nconst React = require('React');\n\nconst {graphql, usePaginationFragment} = require('react-relay');\n\ntype Props = {\n  user: CombinedFriendsListComponent_user$key,\n  viewer: CombinedFriendsListComponent_viewer$key,\n};\n\nfunction CombinedFriendsListComponent(props: Props) {\n\n  const {data: userData, ...userPagination} = usePaginationFragment(\n    graphql`\n      fragment CombinedFriendsListComponent_user on User {\n        name\n        friends\n          @connection(\n            key: \"CombinedFriendsListComponent_user_friends_connection\"\n          ) {\n          edges {\n            node {\n              name\n              age\n            }\n          }\n        }\n      }\n    `,\n    props.user,\n  );\n\n  const {data: viewerData, ...viewerPagination} = usePaginationFragment(\n    graphql`\n      fragment CombinedFriendsListComponent_user on Viewer {\n        actor {\n          ... on User {\n            name\n            friends\n              @connection(\n                key: \"CombinedFriendsListComponent_viewer_friends_connection\"\n              ) {\n              edges {\n                node {\n                  name\n                  age\n                }\n              }\n            }\n          }\n        }\n      }\n    `,\n    props.viewer,\n  );\n\n  return (...);\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Relay Environment with useRelayEnvironment Hook\nDESCRIPTION: This snippet shows how to use the useRelayEnvironment hook to access the current Relay Environment within a descendant component of the RelayEnvironmentProvider. It imports the hook and uses it within a functional component.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/guided-tour/rendering/environment.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst {useRelayEnvironment} = require('react-relay');\n\nfunction UserComponent(props: Props) {\n  const environment = useRelayEnvironment();\n\n  return (...);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Pagination with usePaginationFragment in React and Relay\nDESCRIPTION: This snippet demonstrates how to use the usePaginationFragment hook to fetch paginated data for a friends list. It shows how to render the initial list, implement a 'load more' button, and handle the loading of additional items.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/guided-tour/list-data/pagination.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport type {FriendsListComponent_user$key} from 'FriendsList_user.graphql';\n\nconst React = require('React');\n\nconst {graphql, usePaginationFragment} = require('react-relay');\n\nconst {Suspense} = require('React');\n\ntype Props = {\n  user: FriendsListComponent_user$key,\n};\n\nfunction FriendsListComponent(props: Props) {\n  const {data, loadNext} = usePaginationFragment(\n    graphql`\n      fragment FriendsListComponent_user on User\n      @refetchable(queryName: \"FriendsListPaginationQuery\") {\n        name\n        friends(first: $count, after: $cursor)\n        @connection(key: \"FriendsList_user_friends\") {\n          edges {\n            node {\n              name\n              age\n            }\n          }\n        }\n      }\n    `,\n    props.user,\n  );\n\n  return (\n    <>\n      <h1>Friends of {data.name}:</h1>\n      <div>\n        {(data.friends?.edges ?? []).map(edge => {\n          const node = edge.node;\n          return (\n            <Suspense fallback={<Glimmer />}>\n              <FriendComponent user={node} />\n            </Suspense>\n          );\n        })}\n      </div>\n\n      <Button\n        onClick={() => {\n          loadNext(10)\n        }}>\n        Load more friends\n      </Button>\n    </>\n  );\n}\n\nmodule.exports = FriendsListComponent;\n```\n\n----------------------------------------\n\nTITLE: Implementing Query Loading with useQueryLoader Hook\nDESCRIPTION: Shows how to use useQueryLoader and usePreloadedQuery hooks to implement render-as-you-fetch pattern with proper query management and data disposal.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-experimental/RelayHooks-ApiReference.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst React = require('React');\nconst {useQueryLoader, usePreloadedQuery} = require('react-relay/hooks');\n\nconst query = graphql`\n  query AppQuery($id: ID!) {\n    user(id: $id) {\n      name\n    }\n  }\n`;\n\nfunction QueryFetcherExample(): React.MixedElement {\n  const [\n    queryReference,\n    loadQuery,\n    disposeQuery,\n  ] = useQueryLoader(query);\n\n  return (<>\n    {\n      queryReference == null && (<Button\n        onClick={() => loadQuery({})}\n      >\n        Click to reveal the name\n      </Button>)\n    }\n    {\n      queryReference != null && (<>\n        <Button onClick={disposeQuery}>\n          Click to hide the name and dispose the query.\n        </Button>\n        <React.Suspense fallback=\"Loading\">\n          <NameDisplay queryReference={queryReference} />\n        </React.Suspense>\n      </>)\n    }\n  </>);\n}\n\nfunction NameDisplay({ queryReference }) {\n  const data = usePreloadedQuery<AppQuery>(query, queryReference);\n\n  return <h1>{data.user?.name}</h1>;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a GraphQL Fragment with Relay\nDESCRIPTION: Example of a GraphQL fragment definition using the graphql template tag. This fragment will generate a corresponding file in the __generated__ directory with runtime artifacts and Flow types.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/guides/compiler.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ngraphql`\n  fragment MyComponent on Type {\n    field\n  }\n`\n```\n\n----------------------------------------\n\nTITLE: Implementing GraphQL Mutation with Relay useMutation Hook\nDESCRIPTION: Example showing how to use the useMutation hook to implement a like button functionality. The snippet demonstrates mutation definition, execution, and handling loading states.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/api-reference/hooks/use-mutation.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport type {FeedbackLikeMutation} from 'FeedbackLikeMutation.graphql';\nconst React = require('React');\n\nconst {graphql, useMutation} = require('react-relay');\n\nfunction LikeButton() {\n  const [commit, isInFlight] = useMutation<FeedbackLikeMutation>(graphql`\n    mutation FeedbackLikeMutation($input: FeedbackLikeData!) {\n      feedback_like(data: $input) {\n        feedback {\n          id\n          viewer_does_like\n          like_count\n        }\n      }\n    }\n  `);\n\n  if (isInFlight) {\n    return <Spinner />;\n  }\n\n  return (\n    <button\n      onClick={() => {\n        commit({\n          variables: {\n            input: {\n              id: '123',\n              text: 'text',\n            },\n          },\n          onCompleted(data) {\n            console.log(data);\n          },\n        });\n      }}\n    />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Mutating Data with GraphQL for User Actions\nDESCRIPTION: This GraphQL mutation marks a story as liked by the current user, demonstrating how to define input types and specify fields to refetch upon completion of the mutation, enhancing the interactivity of the application.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-experimental/PrinciplesAndArchitecture-ThinkingInGraphQL.md#2025-04-18_snippet_8\n\nLANGUAGE: graphql\nCODE:\n```\n// Give a human-readable name and define the types of the inputs,\n// in this case the id of the story to mark as liked.\nmutation StoryLike($storyID: String) {\n   // Call the mutation field and trigger its side effects\n   storyLike(storyID: $storyID) {\n     // Define fields to re-fetch after the mutation completes\n     likeCount\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing useMutation Hook\nDESCRIPTION: Complete example of implementing a like button component using Relay's useMutation hook to execute the mutation.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/guided-tour/updating-data/graphql-mutations.md#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport type {FeedbackLikeData, LikeButtonMutation} from 'LikeButtonMutation.graphql';\n\nconst {useMutation, graphql} = require('react-relay');\n\nfunction LikeButton({\n  feedbackId: string,\n}) {\n  const [commitMutation, isMutationInFlight] = useMutation<LikeButtonMutation>(\n    graphql`\n      mutation LikeButtonMutation($input: FeedbackLikeData!) {\n        feedback_like(data: $input) {\n          feedback {\n            viewer_does_like\n            like_count\n          }\n        }\n      }\n    `\n  );\n\n  return <button\n    onClick={() => commitMutation({\n      variables: {\n        input: {id: feedbackId},\n      },\n    })}\n    disabled={isMutationInFlight}\n  >\n    Like\n  </button>\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Data with Relay in React\nDESCRIPTION: This snippet integrates Relay into a React application, defining a GraphQL query to fetch a repository name and managing the loading state with React's Suspense. It utilizes components from React and Relay libraries to achieve data fetching within the app's lifecycle.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/getting-started/step-by-step-guide.md#2025-04-18_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nimport React from 'react';\nimport './App.css';\nimport graphql from 'babel-plugin-relay/macro';\nimport {\n  RelayEnvironmentProvider,\n  loadQuery,\n  usePreloadedQuery,\n} from 'react-relay/hooks';\nimport RelayEnvironment from './RelayEnvironment';\n\nconst { Suspense } = React;\n\n// Define a query\nconst RepositoryNameQuery = graphql`\n  query AppRepositoryNameQuery {\n    repository(owner: \"facebook\", name: \"relay\") {\n      name\n    }\n  }\n`;\n\n// Immediately load the query as our app starts. For a real app, we'd move this\n// into our routing configuration, preloading data as we transition to new routes.\nconst preloadedQuery = loadQuery(RelayEnvironment, RepositoryNameQuery, {\n  /* query variables */\n});\n\n// Inner component that reads the preloaded query results via `usePreloadedQuery()`. \n// This works as follows:\n// - If the query has completed, it returns the results of the query.\n// - If the query is still pending, it \"suspends\" (indicates to React that the\n//   component isn't ready to render yet). This will show the nearest <Suspense>\n//   fallback.\n// - If the query failed, it throws the failure error. For simplicity we aren't\n//   handling the failure case here.\nfunction App(props) {\n  const data = usePreloadedQuery(RepositoryNameQuery, props.preloadedQuery);\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <p>{data.repository.name}</p>\n      </header>\n    </div>\n  );\n}\n\n// The above component needs to know how to access the Relay environment, and we\n// need to specify a fallback in case it suspends:\n// - <RelayEnvironmentProvider> tells child components how to talk to the current\n//   Relay Environment instance\n// - <Suspense> specifies a fallback in case a child suspends.\nfunction AppRoot(props) {\n  return (\n    <RelayEnvironmentProvider environment={RelayEnvironment}>\n      <Suspense fallback={'Loading...'}>\n        <App preloadedQuery={preloadedQuery} />\n      </Suspense>\n    </RelayEnvironmentProvider>\n  );\n}\n\nexport default AppRoot;\n```\n\n----------------------------------------\n\nTITLE: Implementing Parent Fragment Component in React and Relay\nDESCRIPTION: This snippet illustrates how to create a parent fragment component that includes a child fragment. It shows how to compose fragments and pass fragment references to child components.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/guided-tour/rendering/fragments.md#2025-04-18_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * UserComponent.react.js\n *\n * Parent Fragment Component\n */\n\nimport type {UserComponent_user$key} from 'UserComponent_user.graphql';\n\nconst React = require('React');\nconst {graphql, useFragment} = require('react-relay');\n\nconst UsernameSection = require('./UsernameSection.react');\n\ntype Props = {\n  user: UserComponent_user$key,\n};\n\nfunction UserComponent(props: Props) {\n  const user = useFragment(\n    graphql`\n      fragment UserComponent_user on User {\n        name\n        age\n        profile_picture(scale: 2) {\n          uri\n        }\n\n        # Include child fragment:\n        ...UsernameSection_user\n      }\n    `,\n    props.user,\n  );\n\n  return (\n    <>\n      <h1>{user.name}</h1>\n      <div>\n        <img src={user.profile_picture?.uri} />\n        {user.age}\n\n        {/* Render child component, passing the _fragment reference_: */}\n        <UsernameSection user={user} />\n      </div>\n    </>\n  );\n}\n\nmodule.exports = UserComponent;\n```\n\n----------------------------------------\n\nTITLE: Accessing Operation Data with Type-Safe Response in TypeScript\nDESCRIPTION: This example shows how Relay's generated TypeScript types for query responses enable type-safe data access. The response data from useLazyLoadQuery is typed according to the GraphQL query structure.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/guides/type-emission.md#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * export type ExampleQuery$variables = {\n *   readonly artistID: string\n * }\n * export type ExampleQuery$data = {\n *   readonly artist?: {\n *     readonly name?: string\n *   }\n * }\n * export type ExampleQuery = {\n *   readonly variables: ExampleQuery$variables\n *   readonly response: ExampleQuery$data\n * }\n */\n\n// data is of type ExampleQuery$data\nconst data = useLazyLoadQuery(\n  graphql`\n    query ExampleQuery($artistID: ID!) {\n      artist(id: $artistID) {\n        name\n      }\n    }\n  `,\n  {artistID: 'banksy'},\n);\n\nreturn props.artist && <div>{props.artist.name} is great!</div>\n```\n\n----------------------------------------\n\nTITLE: Creating a Relay Network Layer with fetchQuery\nDESCRIPTION: This snippet demonstrates how to create a Relay network layer using the `relay-runtime` package and a custom `fetchQuery` function.  The `fetchQuery` function is responsible for sending GraphQL queries to the server and handling the response. It includes setting up the HTTP method, headers (including content-type and potentially authentication), and constructing the request body with the GraphQL query and variables.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/guides/network-layer.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport {\\n  Environment,\\n  Network,\\n  RecordSource,\\n  Store,\\n} from 'relay-runtime';\\n\\n// Define a function that fetches the results of an operation (query/mutation/etc)\\n// and returns its results as a Promise:\\nfunction fetchQuery(\\n  operation,\\n  variables,\\n  cacheConfig,\\n  uploadables,\\n) {\\n  return fetch('/graphql', {\\n    method: 'POST',\\n    headers: {\\n      // Add authentication and other headers here\\n      'content-type': 'application/json'\\n    },\\n    body: JSON.stringify({\\n      query: operation.text, // GraphQL text from input\\n      variables,\\n    }),\\n  }).then(response => {\\n    return response.json();\\n  });\\n}\\n\\n// Create a network layer from the fetch function\\nconst network = Network.create(fetchQuery);\\nconst store = new Store(new RecordSource())\\n\\nconst environment = new Environment({\\n  network,\\n  store\\n  // ... other options\\n});\\n\\nexport default environment;\n```\n\n----------------------------------------\n\nTITLE: Executing a GraphQL Mutation with commitMutation in Relay\nDESCRIPTION: This snippet demonstrates how to use the commitMutation function from react-relay to execute a GraphQL mutation. It includes importing necessary types and functions, defining a mutation, and calling commitMutation with appropriate arguments.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/api-reference/relay-runtime/commit-mutation.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport type {FeedbackLikeMutation} from 'FeedbackLikeMutation.graphql';\nconst React = require('React');\n\nconst {graphql, commitMutation} = require('react-relay');\n\nfunction likeFeedback(environment: IEnvironment): Disposable {\n  return commitMutation<FeedbackLikeMutation>(environment, {\n    mutation: graphql`\n      mutation FeedbackLikeMutation($input: FeedbackLikeData!) {\n        feedback_like(data: $input) {\n          feedback {\n            id\n            viewer_does_like\n            like_count\n          }\n        }\n      }\n    `,\n    variables: {\n      input: {\n        id: '123',\n      },\n    },\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Fragment Data with useFragment Hook\nDESCRIPTION: Complete React component example demonstrating how to use the useFragment hook to read and render data from a GraphQL fragment, including Flow type annotations.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/guided-tour/rendering/fragments.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport type {UserComponent_user$key} from 'UserComponent_user.graphql';\n\nconst React = require('React');\n\nconst {graphql, useFragment} = require('react-relay');\n\ntype Props = {\n  user: UserComponent_user$key,\n};\n\nfunction UserComponent(props: Props) {\n  const data = useFragment(\n    graphql`\n      fragment UserComponent_user on User {\n        name\n        profile_picture(scale: 2) {\n          uri\n        }\n      }\n    `,\n    props.user,\n  );\n\n  return (\n    <>\n      <h1>{data.name}</h1>\n      <div>\n        <img src={data.profile_picture?.uri} />\n      </div>\n    </>\n  );\n}\n\nmodule.exports = UserComponent;\n```\n\n----------------------------------------\n\nTITLE: Defining an Error Boundary in React\nDESCRIPTION: This snippet illustrates how to create an ErrorBoundary component using React that catches rendering errors and updates its state accordingly.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/guided-tour/rendering/error-states.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst React = require('React');\n\ntype State = {error: ?Error};\n\nclass ErrorBoundary extends React.Component<Props, State> {\n  static getDerivedStateFromError(error): State {\n    // Set some state derived from the caught error\n    return {error: error};\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Relay GraphQL Fragment: Specifying Connection Filters\nDESCRIPTION: This code snippet defines a GraphQL fragment for a Story component that includes a connection to comments. It demonstrates how to specify the exact set of filters to use for connection identity using the `filters` argument in the `@connection` directive, excluding `language` from affecting connection identity.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/guided-tour/list-data/updating-connections.md#2025-04-18_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nconst {graphql} = require('relay-runtime');\n\nconst storyFragment = graphql`\n  fragment StoryComponent_story on Story {\n    comments(\n      order_by: $orderBy\n      filter_mode: $filterMode\n      language: $language\n    )\n      @connection(\n        key: \"StoryComponent_story_comments_connection\"\n        filters: [\"order_by\", \"filter_mode\"]\n      ) {\n      edges {\n        nodes {\n          body {\n            text\n          }\n        }\n      }\n    }\n  }\n`;\n```\n\n----------------------------------------\n\nTITLE: Invalidating Specific Records in the Relay Store\nDESCRIPTION: A code example showing how to invalidate a specific record in the Relay store using the invalidateRecord() method. This marks only the targeted record as stale, affecting only queries that reference that specific record.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/guided-tour/reusing-cached-data/staleness-of-data.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nfunction updater(store) {\n  const user = store.get('<id>');\n  if (user != null) {\n    user.invalidateRecord();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Executing a GraphQL Mutation with useMutation in Relay\nDESCRIPTION: This snippet demonstrates how to use the `useMutation` hook to execute a GraphQL mutation in a React component. It defines a mutation using the `graphql` template literal, commits the mutation with variables, and handles the completion of the mutation.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/api-reference/hooks/use-mutation.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n```js\nimport type {FeedbackLikeMutation} from 'FeedbackLikeMutation.graphql';\nconst React = require('React');\n\nconst {graphql, useMutation} = require('react-relay');\n\nfunction LikeButton() {\n  const [commit, isInFlight] = useMutation<FeedbackLikeMutation>(graphql`\n    mutation FeedbackLikeMutation($input: FeedbackLikeData!) {\n      feedback_like(data: $input) {\n        feedback {\n          id\n          viewer_does_like\n          like_count\n        }\n      }\n    }\n  `);\n\n  if (isInFlight) {\n    return <Spinner />;\n  }\n\n  return (\n    <button\n      onClick={() => {\n        commit({\n          variables: {\n            input: {\n              id: '123',\n              text: 'text',\n            },\n          },\n          onCompleted(data) {\n            console.log(data);\n          },\n        });\n      }}\n    />\n  );\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Refreshing Fragments using useRefetchableFragment in Relay\nDESCRIPTION: An example of using the useRefetchableFragment Hook with the @refetchable directive to refresh fragment data. The refetch function is used with network-only fetch policy to ensure the latest data is fetched from the server.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v13.0.0/guided-tour/refetching/refreshing-fragments.md#2025-04-18_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport type {UserComponent_user$key} from 'UserComponent_user.graphql';\n// This type is autogenerated by Relay given @refetchable used below\nimport type {UserComponentRefreshQuery} from 'UserComponentRefreshQuery.graphql';\n\ntype Props = {\n  user: UserComponent_user$key,\n};\n\nfunction UserComponent(props: Props) {\n  const [data, refetch] = useRefetchableFragment<UserComponentRefreshQuery, _>(\n    graphql`\n      fragment UserComponent_user on User\n      # @refetchable makes it so Relay autogenerates a query for\n      # fetching this fragment\n      @refetchable(queryName: \"UserComponentRefreshQuery\") {\n        id\n        name\n        friends {\n          count\n        }\n      }\n    `,\n    props.user,\n  );\n\n  const refresh = useCallback(() => {\n    // We call refetch with empty variables: `{}`,\n    // which will refetch the @refetchable query with the same\n    // original variables the fragment was fetched with, and update\n    // this component with the latest fetched data.\n    // The fetchPolicy ensures we always fetch from the server and skip\n    // the local data cache.\n    refetch({}, {fetchPolicy: 'network-only'})\n  }), [/* ... */]);\n\n  return (\n    <>\n      <h1>{data.name}</h1>\n      <div>Friends count: {data.friends?.count}</div>\n      <Button\n        onClick={() => refresh()}>\n        Fetch latest count\n      </Button>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using loadQuery with usePreloadedQuery in Relay\nDESCRIPTION: This snippet demonstrates how to use loadQuery to fetch data for a GraphQL query. It shows importing the required modules, defining a query with GraphQL template literals, and calling loadQuery with an environment, query, variables, and fetch policy options. The resulting query reference would typically be passed to usePreloadedQuery in a React component.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/api-reference/hooks/load-query.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst MyEnvironment = require('MyEnvironment');\nconst {loadQuery} = require('react-relay');\n\nconst query = graphql`\n  query AppQuery($id: ID!) {\n    user(id: $id) {\n      name\n    }\n  }\n`;\n\n// Note: you should generally not call loadQuery at the top level.\n// Instead, it should be called in response to an event (such a route navigation,\n// click, etc.).\nconst queryReference = loadQuery(\n  MyEnvironment,\n  query,\n  {id: '4'},\n  {fetchPolicy: 'store-or-network'},\n);\n\n// later: pass queryReference to usePreloadedQuery()\n// Note that query reference should have .dispose() called on them,\n// which is missing in this example.\n```\n\n----------------------------------------\n\nTITLE: Annotating useLazyLoadQuery with Relay Generated Types in TypeScript\nDESCRIPTION: This snippet demonstrates how to annotate a call to the `useLazyLoadQuery` hook with Relay's generated types, which informs TypeScript of the expected data structure. Relay generates these types during the build process to match GraphQL's schema. The snippet shows the import statement for the generated type and its application to a query function.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/tutorial/queries-1.md#2025-04-18_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\n// change-line\nimport type {NewsfeedQuery as NewsfeedQueryType} from './__generated__/NewsfeedQuery.graphql';\n\nfunction Newsfeed({}) {\n  const data = useLazyLoadQuery\n  // change-line\n  <NewsfeedQueryType>\n  (NewsfeedQuery, {});\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Relay Environment Configuration\nDESCRIPTION: JavaScript module that configures and exports a Relay Environment with a Network layer utilizing the fetchGraphQL utility and a Store for caching data.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/getting-started/step-by-step-guide.md#2025-04-18_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n// your-app-name/src/RelayEnvironment.js\nimport {Environment, Network, RecordSource, Store} from 'relay-runtime';\nimport fetchGraphQL from './fetchGraphQL';\n\n// Relay passes a \"params\" object with the query name and text. So we define a helper function\n// to call our fetchGraphQL utility with params.text.\nasync function fetchRelay(params, variables) {\n  console.log(`fetching query ${params.name} with ${JSON.stringify(variables)}`);\n  return fetchGraphQL(params.text, variables);\n}\n\n// Export a singleton instance of Relay Environment configured with our network function:\nexport default new Environment({\n  network: Network.create(fetchRelay),\n  store: new Store(new RecordSource()),\n});\n```\n\n----------------------------------------\n\nTITLE: Fetching Queries with useQueryLoader in React\nDESCRIPTION: Shows how to use the useQueryLoader hook to fetch query data and manage its lifecycle in a parent component. Includes type annotations and explains key concepts.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/guided-tour/rendering/queries.md#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport type {HomeTabQuery as HomeTabQueryType} from 'HomeTabQuery.graphql';\nimport type {PreloadedQuery} from 'react-relay';\n\nconst HomeTabQuery = require('HomeTabQuery.graphql')\nconst {useQueryLoader} = require('react-relay');\n\n\ntype Props = {\n  initialQueryRef: PreloadedQuery<HomeTabQueryType>,\n};\n\nfunction AppTabs(props) {\n  const [\n    homeTabQueryRef,\n    loadHomeTabQuery,\n  ] = useQueryLoader<HomeTabQueryType>(\n    HomeTabQuery,\n    props.initialQueryRef, /* e.g. provided by router */\n  );\n\n  const onSelectHomeTab = () => {\n    loadHomeTabQuery({id: '4'});\n    // ...\n  }\n\n  // ...\n\n  return (\n    screen === 'HomeTab' && homeTabQueryRef != null ?\n      <HomeTab queryRef={homeTabQueryRef} /> :\n      // ...\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Infinite Scrolling Newsfeed in GraphQL and React\nDESCRIPTION: This snippet shows how to implement an infinite scrolling newsfeed using Relay, including modifying the GraphQL query, creating a fragment for pagination, and using usePaginationFragment in the React component.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/tutorial/connections-pagination.md#2025-04-18_snippet_6\n\nLANGUAGE: graphql\nCODE:\n```\nconst NewsfeedQuery = graphql`\n  query NewsfeedQuery {\n    ...NewsfeedContentsFragment\n  }\n`;\n\nconst NewsfeedContentsFragment = graphql`\n  fragment NewsfeedContentsFragment on Query\n    @argumentDefinitions (\n      cursor: { type: \"String\" }\n      count: { type: \"Int\", defaultValue: 3 }\n    )\n    @refetchable(queryName: \"NewsfeedContentsRefetchQuery\")\n  {\n    viewer {\n      newsfeedStories(after: $cursor, first: $count)\n        @connection(key: \"NewsfeedContentsFragment_newsfeedStories\")\n      {\n        edges {\n          node {\n            id\n            ...StoryFragment\n          }\n        }\n      }\n    }\n  }\n`;\n```\n\nLANGUAGE: javascript\nCODE:\n```\nfunction Newsfeed() {\n  const queryData = useLazyLoadQuery<NewsfeedQueryType>(\n    NewsfeedQuery,\n    {},\n  );\n  const {data, loadNext} = usePaginationFragment(NewsfeedContentsFragment, queryData);\n  const storyEdges = data.viewer.newsfeedStories.edges;\n  return (\n    <div className=\"newsfeed\">\n      {storyEdges.map(storyEdge =>\n        <Story key={storyEdge.node.id} story={storyEdge.node} />\n      )}\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Relay Environment with useRelayEnvironment Hook\nDESCRIPTION: This code snippet demonstrates how to use the `useRelayEnvironment` hook to access the Relay environment within a React component. The hook retrieves the environment from a `RelayEnvironmentProvider`, allowing the component to use it for Relay operations such as committing mutations. The component uses the environment within a `useCallback` hook to ensure that the mutation is only re-created when the environment changes.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v13.0.0/api-reference/hooks/use-relay-environment.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst React = require('React');\n\nconst {useRelayEnvironment} = require('react-relay');\n\nfunction MyComponent() {\n  const environment = useRelayEnvironment();\n\n  const handler = useCallback(() => {\n    // For example, can be used to pass the environment to functions\n    // that require a Relay environment.\n    commitMutation(environment, ...);\n  }, [environment])\n\n  return (...);\n}\n\nmodule.exports = MyComponent;\n```\n\n----------------------------------------\n\nTITLE: Rendering RelayEnvironmentProvider in React\nDESCRIPTION: Shows how to render a RelayEnvironmentProvider component at the root of a React application. This is a common setup step when using Relay Hooks.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/migration-and-compatibility/relay-hooks-and-legacy-container-apis.md#2025-04-18_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<RelayEnvironmentProvider environment={MyAppEnvironment}>\n  <App />\n</RelayEnvironmentProvider>\n```\n\n----------------------------------------\n\nTITLE: Implementing Mutation with useMutation Hook\nDESCRIPTION: Integration of the like mutation using Relay's useMutation hook with variable handling.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/tutorial/mutations-updates.md#2025-04-18_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport {useMutation, useFragment} from 'react-relay';\n\nfunction StoryLikeButton({story}) {\n  const data = useFragment(StoryLikeButtonFragment, story);\n  const [commitMutation, isMutationInFlight] = useMutation(StoryLikeButtonLikeMutation);\n  function onLikeButtonClicked() {\n    commitMutation({\n      variables: {\n        id: data.id,\n        doesLike: !data.doesViewerLike,\n      },\n    })\n  }\n  return (\n    <>\n      <LikeCount count={data.likeCount} />\n      <LikeButton value={data.doesViewerLike} onChange={onLikeButtonClicked} />\n    </>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a GraphQL Fragment\nDESCRIPTION: This code snippet shows how to define a GraphQL fragment named `UserFragment` on the `User` type. It selects the `name`, `age`, and `profile_picture` fields. The `profile_picture` field includes a `scale` argument with a value of 2, and further selects the `uri` field within the `profile_picture` object.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/guided-tour/rendering/fragments.md#2025-04-18_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nfragment UserFragment on User {\n  name\n  age\n  profile_picture(scale: 2) {\n    uri\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Pagination with usePaginationFragment in React and Relay\nDESCRIPTION: This code snippet demonstrates how to use the usePaginationFragment hook to render a fragment with a @connection directive and paginate over it. It includes the necessary imports, component structure, and usage of the hook's returned values.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-experimental/RelayHooks-ApiReference.md#2025-04-18_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport type {FriendsListPaginationQuery} from 'FriendsListPaginationQuery.graphql';\nimport type {FriendsList_user$key} from 'FriendsList_user.graphql';\n\nconst React = require('React');\n\nconst {graphql, usePaginationFragment} = require('react-relay/hooks');\n\ntype Props = {|\n  user: FriendsList_user$key,\n|};\n\nfunction FriendsList(props: Props) {\n  const {\n    data,\n    loadNext,\n    loadPrevious,\n    hasNext,\n    hasPrevious,\n    isLoadingNext,\n    isLoadingPrevious,\n    refetch, // For refetching connection\n  } = usePaginationFragment<FriendsListPaginationQuery, _>(\n    graphql`\n      fragment FriendsListComponent_user on User\n      @refetchable(queryName: \"FriendsListPaginationQuery\") {\n        name\n        friends(first: $count, after: $cursor)\n        @connection(key: \"FriendsList_user_friends\") {\n          edges {\n            node {\n              name\n              age\n            }\n          }\n        }\n      }\n    `,\n    props.user,\n  );\n\n  return (\n    <>\n      <h1>Friends of {data.name}:</h1>\n\n      <List items={data.friends?.edges.map(edge => edge.node)}>\n        {node => {\n          return (\n            <div>\n              {node.name} - {node.age}\n            </div>\n          );\n        }}\n      </List>\n      <Button onClick={() => loadNext(10)}>Load more friends</Button>\n    </>\n  );\n}\n\nmodule.exports = FriendsList;\n```\n\n----------------------------------------\n\nTITLE: Relay Refetching Connection with useEffect\nDESCRIPTION: This component demonstrates refetching a Relay connection with new filter variables using `usePaginationFragment` and `useEffect`. The `searchTerm` prop triggers a refetch when it changes, updating the connection with the new search term. It also includes a button to refetch the connection sorted by date added.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v13.0.0/guided-tour/list-data/refetching-connections.md#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n\"/**\\n * FriendsListComponent.react.js\\n */\\nimport type {FriendsListComponent_user$key} from 'FriendsListComponent_user.graphql';\\n\\nconst React = require('React');\\nconst {useState, useEffect} = require('React');\\n\\nconst {graphql, usePaginationFragment} = require('react-relay');\\n\\n\\ntype Props = {\\n  searchTerm?: string,\\n  user: FriendsListComponent_user$key,\\n};\\n\\nfunction FriendsListComponent(props: Props) {\\n  const searchTerm = props.searchTerm;\\n  const {data, loadNext, refetch} = usePaginationFragment(\\n    graphql`\\n      fragment FriendsListComponent_user on User {\\n        name\\n        friends(\\n          order_by: $orderBy,\\n          search_term: $searchTerm,\\n          after: $cursor,\\n          first: $count,\\n        ) @connection(key: \\\"FriendsListComponent_user_friends_connection\\\") {\\n          edges {\\n            node {\\n              name\\n              age\\n            }\\n          }\\n        }\\n      }\\n    `,\\n    props.user,\\n  );\\n\\n  useEffect(() => {\\n    // When the searchTerm provided via props changes, refetch the connection\\n    // with the new searchTerm\\n    refetch({first: 10, search_term: searchTerm}, {fetchPolicy: 'store-or-network'});\\n  }, [searchTerm])\\n\\n  return (\\n    <>\\n      <h1>Friends of {data.name}:</h1>\\n\\n      {/* When the button is clicked, refetch the connection but sorted differently */} \\n      <Button\\n        onClick={() =>\\n          refetch({first: 10, orderBy: 'DATE_ADDED'});\\n        }>\\n        Sort by date added\\n      </Button>\\n\\n      <List items={data.friends?.nodes}>...</List>\\n      <Button onClick={() => loadNext(10)}>Load more friends</Button>\\n    <>\n  );\\n}\"\n```\n\n----------------------------------------\n\nTITLE: Creating Relay Fragment Container\nDESCRIPTION: Creation of a Relay container component that wraps a React Story component with its GraphQL data requirements using createFragmentContainer.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-experimental/PrinciplesAndArchitecture-ThinkingInRelay.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst {createFragmentContainer, graphql} = require('react-relay');\n\n// Plain React component.\n// Usage: `<Story story={ ... } />`\nclass Story extends React.Component { ... }\n\n// Higher-order component that wraps `<Story />`\nconst StoryContainer = createFragmentContainer(Story, {\n  // Define a fragment with a name matching the `story` prop expected above\n  story: graphql`\n    fragment Story_story on Story {\n      text\n      author {\n        name\n        photo\n      }\n    }\n  `\n})\n```\n\n----------------------------------------\n\nTITLE: Testing Relay Components with createMockEnvironment and MockPayloadGenerator\nDESCRIPTION: Shows how to test Relay components that use useLazyLoadQuery or QueryRenderer by using createMockEnvironment and MockPayloadGenerator. The example demonstrates testing three states: loading, successful data rendering, and error states.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/guides/testing-relay-components.md#2025-04-18_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n// Say you have a component with the useLazyLoadQuery or a QueryRenderer\nconst MyAwesomeViewRoot = require('MyAwesomeViewRoot');\nconst {\n  createMockEnvironment,\n  MockPayloadGenerator,\n} = require('relay-test-utils');\nconst {act, render} = require('@testing-library/react');\n\n// Relay may trigger 3 different states\n// for this component: Loading, Error, Data Loaded\n// Here is examples of tests for those states.\ntest('Loading State', async () => {\n  const environment = createMockEnvironment();\n  const renderer = render(\n    <MyAwesomeViewRoot environment={environment} />,\n  );\n\n  // Here we just verify that the spinner is rendered\n  expect(await renderer.findByTestId('spinner')).toBeDefined();\n});\n\ntest('Data Render', async () => {\n  const environment = createMockEnvironment();\n  const renderer = render(\n    <MyAwesomeViewRoot environment={environment} />,\n  );\n\n  // Wrapping in act will ensure that components\n  // are fully updated to their final state.\n  act(() => {\n    environment.mock.resolveMostRecentOperation(operation =>\n      MockPayloadGenerator.generate(operation),\n    );\n  });\n\n  // At this point operation will be resolved\n  // and the data for a query will be available in the store\n  expect(await renderer.findByTestId('myButton')).toBeDefined();\n});\n\ntest('Error State', async () => {\n  const environment = createMockEnvironment();\n  const renderer = render(\n    <MyAwesomeViewRoot environment={environment} />,\n  );\n\n  // Wrapping in act will ensure that components\n  // are fully updated to their final state.\n  act(() => {\n    // Error can be simulated with `rejectMostRecentOperation`\n    environment.mock.rejectMostRecentOperation(new Error('Uh-oh'));\n  });\n\n  expect(await renderer.findByTestId('errorMessage')).toBeDefined();\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Relay Component\nDESCRIPTION: React component using Relay to fetch and display Star Wars films data\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/getting-started/quick-start.md#2025-04-18_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nimport { AppQuery } from \"./__generated__/AppQuery.graphql\";\nimport { graphql, useLazyLoadQuery } from \"react-relay\";\n\nexport default function App() {\n  const data = useLazyLoadQuery<AppQuery>(\n    graphql`\n      query AppQuery {\n        allFilms {\n          films {\n            id\n            title\n            director\n          }\n        }\n      }\n    `,\n    {}\n  );\n\n  const films = data?.allFilms?.films?.filter((film) => film != null);\n\n  return (\n    <div>\n      <h1>Star Wars Films</h1>\n      {films?.map((film) => (\n        <li key={film.id}>\n          <b>{film.title}</b>: directed by <i>{film.director}</i>\n        </li>\n      ))}\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Fragment References in Relay Query and Fragment\nDESCRIPTION: This snippet shows how to use fragment references in Relay. It demonstrates querying data with usePreloadedQuery and then accessing that data in a fragment using useFragment.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/glossary/glossary.md#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst queryData = usePreloadedQuery(\n  graphql`query ComponentQuery { viewer { account_user { ...Component_name } } }`,\n  {},\n);\n\n// queryData.viewer is the FragmentReference\n// Though this would usually happen in another file, you can\n// extract the value of Component_name as follows:\nconst fragmentData = useFragment(\n  graphql`fragment Component_name on User { name }`,\n  queryData?.viewer?.account_user,\n);\n```\n\n----------------------------------------\n\nTITLE: Fetching Initial Query Data with loadQuery in React\nDESCRIPTION: Demonstrates how to use the loadQuery function to fetch initial query data outside of a component context, such as during app initialization.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/guided-tour/rendering/queries.md#2025-04-18_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport type {HomeTabQuery as HomeTabQueryType} from 'HomeTabQuery.graphql';\n\nconst HomeTabQuery = require('HomeTabQuery.graphql')\nconst {loadQuery} = require('react-relay');\n\n\nconst environment = createEnvironment(...);\n\nconst initialQueryRef = loadQuery<HomeTabQueryType>(\n  environment,\n  HomeTabQuery,\n  {id: '4'},\n);\n\n// ...\n\nrender(<AppTabs initialQueryRef={initialQueryRef} initialTab={...} />)\n```\n\n----------------------------------------\n\nTITLE: Refreshing Queries without Suspense in Relay (JavaScript)\nDESCRIPTION: This snippet shows how to refresh queries without using Suspense in Relay by leveraging fetchQuery. It necessitates the use of useRelayEnvironment and maintains its own loading state isRefreshing to track loading progress. fetchQuery writes data to the local store, and loadQuery renders the queryRef with store-only fetchPolicy to avoid suspending.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/guided-tour/refetching/refreshing-queries.md#2025-04-18_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n/**\n * App.react.js\n */\n\nconst AppQuery = require('__generated__/AppQuery.graphql');\n\nfunction App(props: Props) {\n  const environment = useRelayEnvironment();\n  const [queryRef, loadQuery] = useQueryLoader(\n    AppQuery,\n    props.appQueryRef /* initial query ref */\n  );\n  const [isRefreshing, setIsRefreshing] = useState(false)\n\n  const refresh = useCallback(() => {\n    if (isRefreshing) { return; }\n    const {variables} = props.appQueryRef;\n    setIsRefreshing(true);\n\n    // fetchQuery will fetch the query and write\n    // the data to the Relay store. This will ensure\n    // that when we re-render, the data is already\n    // cached and we don't suspend\n    fetchQuery(environment, AppQuery, variables)\n      .subscribe({\n        complete: () => {\n          setIsRefreshing(false);\n\n          // *After* the query has been fetched, we call\n          // loadQuery again to re-render with a new\n          // queryRef.\n          // At this point the data for the query should\n          // be cached, so we use the 'store-only'\n          // fetchPolicy to avoid suspending.\n          loadQuery(variables, {fetchPolicy: 'store-only'});\n        },\n        error: () => {\n          setIsRefreshing(false);\n        }\n      });\n  }, [/* ... */]);\n\n  return (\n    <React.Suspense fallback=\"Loading query...\">\n      <MainContent\n        isRefreshing={isRefreshing}\n        refresh={refresh}\n        queryRef={queryRef}\n      />\n    </React.Suspense>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Mapping Over Connection Edges in React Component\nDESCRIPTION: This code demonstrates how to map over the edges of a GraphQL connection to render individual story components.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/tutorial/connections-pagination.md#2025-04-18_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nfunction Newsfeed() {\n  const data = useLazyLoadQuery(NewsfeedFragment, {});\n  const storyEdges = data.newsfeedStories.edges;\n  return (\n    <>\n      {storyEdges.map(storyEdge =>\n        <Story key={storyEdge.node.id} story={storyEdge.node} />\n      )}\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using `useSubscription` Hook in Relay\nDESCRIPTION: This JavaScript snippet demonstrates how to create a subscription in Relay using the `useSubscription` hook. It defines a `useFeedbackSubscription` hook that takes an input, creates a GraphQL subscription config, and returns the result of `useSubscription`.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/guided-tour/updating-data/graphql-subscriptions.md#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport type {Environment} from 'react-relay';\nimport type {FeedbackLikeSubscribeData} from 'FeedbackLikeSubscription.graphql';\n\nconst {graphql, useSubscription} = require('react-relay');\nconst {useMemo} = require('React');\n\nfunction useFeedbackSubscription(\n  input: FeedbackLikeSubscribeData,\n) {\n  const config = useMemo(() => ({\n    subscription: graphql`\n      subscription FeedbackLikeSubscription(\n        $input: FeedbackLikeSubscribeData!\n      ) {\n        feedback_like_subscribe(data: $input) {\n          feedback {\n            like_count\n          }\n        }\n      }\n    `,\n    variables: {input},\n  }), [input]);\n\n  return useSubscription(config);\n}\n```\n\n----------------------------------------\n\nTITLE: Using usePaginationFragment to Load Next Page of Items - React - JavaScript\nDESCRIPTION: This snippet demonstrates how to utilize Relay's usePaginationFragment to fetch the next page of items in a React component. The loadNext function is utilized to trigger the loading of an additional 10 friends, displaying them dynamically as they are fetched.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v13.0.0/guided-tour/list-data/pagination.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport type {FriendsListPaginationQuery} from 'FriendsListPaginationQuery.graphql';\nimport type {FriendsListComponent_user$key} from 'FriendsList_user.graphql';\n\nconst React = require('React');\n\nconst {graphql, usePaginationFragment} = require('react-relay');\n\nconst {Suspense} = require('React');\n\ntype Props = {\n  user: FriendsListComponent_user$key,\n};\n\nfunction FriendsListComponent(props: Props) {\n  const {data, loadNext} = usePaginationFragment<FriendsListPaginationQuery, _>(\n    graphql`\n      fragment FriendsListComponent_user on User\n      @refetchable(queryName: \"FriendsListPaginationQuery\") {\n        name\n        friends(first: $count, after: $cursor)\n        @connection(key: \"FriendsList_user_friends\") {\n          edges {\n            node {\n              name\n              age\n            }\n          }\n        }\n      }\n    `,\n    props.user,\n  );\n\n  return (\n    <>\n      <h1>Friends of {data.name}:</h1>\n      <div>\n        {(data.friends?.edges ?? []).map(edge => {\n          const node = edge.node;\n          return (\n            <Suspense fallback={<Glimmer />}> \n              <FriendComponent user={node} />\n            </Suspense>\n          );\n        })}\n      </div>\n\n      <Button\n        onClick={() => {\n          loadNext(10)\n        }}>\n        Load more friends\n      </Button>\n    </>\n  );\n}\n\nmodule.exports = FriendsListComponent;\n```\n\n----------------------------------------\n\nTITLE: Defining a GraphQL Query with Relay\nDESCRIPTION: This code defines a GraphQL query using Relay's `graphql` tag. The query fetches the name of a repository from Facebook, specifically the 'relay' repository owned by 'facebook'.  The `graphql` tag is processed by the Relay compiler to generate optimized code for fetching and managing the data.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v13.0.0/getting-started/step-by-step-guide.md#2025-04-18_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst RepositoryNameQuery = graphql`\n  query AppRepositoryNameQuery {\n    repository(owner: \\\"facebook\\\", name: \\\"relay\\\") {\n      name\n    }\n  }\n`;\n```\n\n----------------------------------------\n\nTITLE: Example Mutation Response Data Structure\nDESCRIPTION: An example of the response data returned by the server after executing the like mutation. It contains the updated story information including the new like count and the viewer's like status.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/tutorial/mutations-updates.md#2025-04-18_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"likeStory\": {\n    \"story\": {\n      \"id\": \"34a8c\",\n      \"likeCount\": 47,\n      \"doesViewerLike\": true\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Infinite Scroll Component with Pagination\nDESCRIPTION: Demonstrates how to implement an infinite scrolling newsfeed component using Relay's pagination features.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/tutorial/connections-pagination.md#2025-04-18_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nfunction Newsfeed() {\n  const queryData = useLazyLoadQuery<NewsfeedQueryType>(\n    NewsfeedQuery,\n    {},\n  );\n  const {data, loadNext} = usePaginationFragment(NewsfeedContentsFragment, queryData);\n  const storyEdges = data.viewer.newsfeedStories.edges;\n  return (\n    <div className=\"newsfeed\">\n      {storyEdges.map(storyEdge =>\n        <Story key={storyEdge.node.id} story={storyEdge.node} />\n      )}\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing useQueryLoader with GraphQL Query\nDESCRIPTION: Demonstrates how to use useQueryLoader to conditionally load and render a query with dynamic data fetching and user interactions\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/api-reference/hooks/use-query-loader.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport type {PreloadedQuery} from 'react-relay';\n\nconst {useQueryLoader, usePreloadedQuery} = require('react-relay');\n\nconst AppQuery = graphql`\n  query AppQuery($id: ID!) {\n    user(id: $id) {\n      name\n    }\n  }`\n```\n\nLANGUAGE: javascript\nCODE:\n```\nfunction QueryFetcherExample() {\n  const [\n    queryReference,\n    loadQuery,\n    disposeQuery,\n  ] = useQueryLoader(\n    AppQuery,\n  );\n\n  if (queryReference == null) {\n    return (\n      <Button onClick={() => loadQuery({})}> Click to reveal the name </Button>\n    );\n  }\n\n  return (\n    <>\n      <Button onClick={disposeQuery}>\n        Click to hide the name and dispose the query.\n      </Button>\n      <React.Suspense fallback=\"Loading\">\n        <NameDisplay queryReference={queryReference} />\n      </React.Suspense>\n    </>\n  );\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nfunction NameDisplay({ queryReference }) {\n  const data = usePreloadedQuery(AppQuery, queryReference);\n\n  return <h1>{data.user?.name}</h1>;\n}\n```\n\n----------------------------------------\n\nTITLE: GraphQL Subscription with @deleteRecord Directive\nDESCRIPTION: This GraphQL snippet illustrates how to use the `@deleteRecord` directive in a subscription to delete an item from the Relay store in response to a server event.  When the `delete_post_subscribe` event occurs, the post with the specified `id` will be deleted from the store.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/guided-tour/updating-data/graphql-subscriptions.md#2025-04-18_snippet_5\n\nLANGUAGE: graphql\nCODE:\n```\nsubscription DeletePostSubscription($input: DeletePostSubscribeData!) {\n  delete_post_subscribe(data: $input) {\n    deleted_post {\n      id @deleteRecord\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching and Refetching Data with useRefetchableFragment in Relay - JavaScript\nDESCRIPTION: This code snippet demonstrates using the useRefetchableFragment hook in a React component to fetch and refetch GraphQL fragment data. It imports necessary types and modules from React and Relay, defines a component CommentBody, and utilizes the useRefetchableFragment hook to refetch the fragment with different variables, showcasing dynamic data fetching. Dependencies include React and React-Relay, and it works with fragments defined using GraphQL literals.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v13.0.0/api-reference/hooks/use-refetchable-fragment.md#2025-04-18_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport type {CommentBodyRefetchQuery} from 'CommentBodyRefetchQuery.graphql';\nimport type {CommentBody_comment$key} from 'CommentBody_comment.graphql';\n\nconst React = require('React');\n\nconst {graphql, useRefetchableFragment} = require('react-relay');\n\n\ntype Props = {\n  comment: CommentBody_comment$key,\n};\n\nfunction CommentBody(props: Props) {\n  const [data, refetch] = useRefetchableFragment<CommentBodyRefetchQuery, _>(\n    graphql`\n      fragment CommentBody_comment on Comment\n      @refetchable(queryName: \"CommentBodyRefetchQuery\") {\n        body(lang: $lang) {\n          text\n        }\n      }\n    `,\n    props.comment,\n  );\n\n  return (\n    <>\n      <p>{data.body?.text}</p>\n      <Button\n        onClick={() => {\n          refetch({lang: 'SPANISH'}, {fetchPolicy: 'store-or-network'})\n        }}\n      >\n        Translate Comment\n      </Button>\n    </>\n  );\n}\n\nmodule.exports = CommentBody;\n```\n\n----------------------------------------\n\nTITLE: Setting Up Tests for Components with Preloaded Relay Queries\nDESCRIPTION: A complete example showing how to test React components that use Relay's preloaded queries. This includes creating a mock environment, configuring query resolvers, and ensuring proper operation queuing.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/guides/testing-relay-with-preloaded-queries.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst {RelayEnvironmentProvider} = require('react-relay');\nconst {MockPayloadGenerator, createMockEnvironment} = require('relay-test-utils');\nconst {act, render} = require('@testing-library/react');\ntest(\"...\", () => {\n  // arrange\n  const environment = createMockEnvironment();\n  environment.mock.queueOperationResolver(operation => {\n      return MockPayloadGenerator.generate(operation, {\n        CurrencyAmount() {\n          return {\n            formatted_amount: \"1234$\",\n          };\n        },\n      });\n    });\n  const query = YourComponentGraphQLQueryGoesHere; // can be the same, or just identical\n  const variables = {\n    // ACTUAL variables for the invocation goes here\n  };\n  environment.mock.queuePendingOperation(YourComponentGraphQLQuery, variables);\n\n // act\n  const {getByTestId, ..otherStuffYouMightNeed} = render(\n    <RelayEnvironmentProvider environment={environment}>\n        <YourComponent data-testid=\"1234\" {...componentPropsIfAny}/>\n    </RelayEnvironmentProvider>\n  );\n  // trigger the loading - click a button, emit an event, etc. or ...\n  act(() => jest.runAllImmediates()); // ... if loadQuery is in the useEffect()\n  // assert\n  // your assertions go here\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Optimistic Response in Relay Mutation\nDESCRIPTION: Example of providing an optimistic response for a 'Like' mutation in Relay. It demonstrates how to structure the response and update the store immediately before the server responds.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/guided-tour/updating-data/graphql-mutations.md#2025-04-18_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  feedback_like: {\n    feedback: {\n      // Even though the id field is not explicitly selected, the\n      // compiler selected it for us\n      id: feedbackId,\n      viewer_does_like: true,\n    },\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering a Query with usePreloadedQuery in React\nDESCRIPTION: Demonstrates how to use the usePreloadedQuery hook to render query data in a React component. It includes type annotations and explains key concepts.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/guided-tour/rendering/queries.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport type {HomeTabQuery} from 'HomeTabQuery.graphql';\nimport type {PreloadedQuery} from 'react-relay';\n\nconst React = require('React');\nconst {graphql, usePreloadedQuery} = require('react-relay');\n\ntype Props = {\n  queryRef: PreloadedQuery<HomeTabQuery>,\n};\n\nfunction HomeTab(props: Props) {\n  const data = usePreloadedQuery<HomeTabQuery>(\n    graphql`\n      query HomeTabQuery($id: ID!) {\n        user(id: $id) {\n          name\n        }\n      }\n    `,\n    props.queryRef,\n  );\n\n  return (\n    <h1>{data.user?.name}</h1>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Executing GraphQL Mutation for Feedback\nDESCRIPTION: A GraphQL mutation named FeedbackLikeMutation is demonstrated to modify the server data to \"like\" a specified Feedback object. It features a mutation root field feedback_like, which updates and queries data in a single operation. The mutation utilizes parameters to specify inputs and to retrieve the updated feedback data, including the feedback ID, viewer's like status, and like count.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/guided-tour/updating-data/graphql-mutations.md#2025-04-18_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nmutation FeedbackLikeMutation($input: FeedbackLikeData!) {\n  feedback_like(data: $input) {\n    feedback {\n      id\n      viewer_does_like\n      like_count\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Relay Dependencies\nDESCRIPTION: Commands to install Relay runtime, compiler, and type definitions\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/getting-started/quick-start.md#2025-04-18_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncd relay-example\n\nnpm install relay-runtime react-relay --force\nnpm install --dev vite-plugin-relay relay-compiler --force\nnpm install --dev @types/relay-runtime @types/react-relay --force\n```\n\n----------------------------------------\n\nTITLE: Fetching and Rendering Data with Relay's useLazyLoadQuery in a React Component\nDESCRIPTION: This code demonstrates how to use Relay's useLazyLoadQuery hook to fetch data in a React component. It then renders the story title and conditionally renders the AuthorDetails component with the fetched author data.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/principles-and-architecture/thinking-in-relay.md#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nfunction Story(props) {\n  const data = useLazyLoadQuery(storyQuery, props.storyId);\n\n  return (<>\n    <Heading>{data?.story.title}</Heading>\n    {data?.story?.author && <AuthorDetails author={data.story.author} />}\n  </>);\n}\n```\n\n----------------------------------------\n\nTITLE: Using Relay's useLazyLoadQuery Hook in a React Component\nDESCRIPTION: This code snippet shows how to use Relay's useLazyLoadQuery hook to fetch data in a React component. It also demonstrates how to render child components with the fetched data.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/principles-and-architecture/thinking-in-relay.md#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nfunction Story(props) {\n  const data = useLazyLoadQuery(storyQuery, props.storyId);\n\n  return (<>\n    <Heading>{data?.story.title}</Heading>\n    {data?.story?.author && <AuthorDetails author={data.story.author} />}\n  </>);\n}\n```\n\n----------------------------------------\n\nTITLE: Query Component with Suspense\nDESCRIPTION: This code shows how a Relay query component (MainContent) utilizes `usePreloadedQuery` to fetch data and integrates with React Suspense to handle loading states. The MainContent component suspends while the query is being fetched, and a Suspense boundary higher up in the component tree renders a fallback UI until the data is ready.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/guided-tour/rendering/loading-states.md#2025-04-18_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * MainContent.react.js\n *\n * Query Component\n */\n\nconst React = require('React');\nconst {graphql, usePreloadedQuery} = require('react-relay');\n\nfunction MainContent(props) {\n  // Fetch and render a query\n  const data = usePreloadedQuery(\n    graphql`...`,\n    props.queryRef,\n  );\n\n  return (...);\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * App.react.js\n */\n\nconst React = require('React');\nconst {Suspense} = require('React');\n\nfunction App() {\n  return (\n    // LoadingGlimmer is rendered via the Suspense fallback\n    <Suspense fallback={<LoadingGlimmer />}>\n      <MainContent /> {/* MainContent may suspend */}\n    </Suspense>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Executing a GraphQL Mutation with commitMutation in Relay\nDESCRIPTION: This snippet demonstrates how to use the commitMutation function from react-relay to execute a GraphQL mutation. It includes importing necessary types and functions, defining a mutation, and calling commitMutation with the appropriate environment and configuration.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/api-reference/relay-runtime/commit-mutation.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport type {FeedbackLikeMutation} from 'FeedbackLikeMutation.graphql';\nconst React = require('React');\n\nconst {graphql, commitMutation} = require('react-relay');\n\nfunction likeFeedback(environment: IEnvironment): Disposable {\n  return commitMutation<FeedbackLikeMutation>(environment, {\n    mutation: graphql`\n      mutation FeedbackLikeMutation($input: FeedbackLikeData!) {\n        feedback_like(data: $input) {\n          feedback {\n            id\n            viewer_does_like\n            like_count\n          }\n        }\n      }\n    `,\n    variables: {\n      input: {\n        id: '123',\n      },\n    },\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Using useLazyLoadQuery Hook in React Component\nDESCRIPTION: Example showing how to use useLazyLoadQuery hook to fetch GraphQL data during component render. The snippet demonstrates querying user data with variables and fetch policy options.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/api-reference/hooks/use-lazy-load-query.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst React = require('React');\n\nconst {graphql, useLazyLoadQuery} = require('react-relay');\n\nfunction App() {\n  const data = useLazyLoadQuery(\n    graphql`\n      query AppQuery($id: ID!) {\n        user(id: $id) {\n          name\n        }\n      }\n    `,\n    {id: 4},\n    {fetchPolicy: 'store-or-network'},\n  );\n\n return <h1>{data.user?.name}</h1>;\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Relay Runtime and Compiler (NPM)\nDESCRIPTION: These commands install the necessary Relay packages using NPM. `relay-runtime` and `react-relay` are installed as regular dependencies, while `relay-compiler` and `babel-plugin-relay` are installed as development dependencies.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/getting-started/step-by-step-guide.md#2025-04-18_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n\"# NPM Users\nnpm install --save relay-runtime react-relay\nnpm install --save-dev relay-compiler babel-plugin-relay\"\n```\n\n----------------------------------------\n\nTITLE: Setting up Relay Query Fetching in React Component\nDESCRIPTION: Demonstrates how to implement a React component that uses Relay to fetch and display repository data. The code shows the complete setup including query definition, environment configuration, and component structure with Suspense support.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/getting-started/step-by-step-guide.md#2025-04-18_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nimport React from 'react';\nimport './App.css';\nimport graphql from 'babel-plugin-relay/macro';\nimport {\n  RelayEnvironmentProvider,\n  loadQuery,\n  usePreloadedQuery,\n} from 'react-relay/hooks';\nimport RelayEnvironment from './RelayEnvironment';\n\nconst { Suspense } = React;\n\n// Define a query\nconst RepositoryNameQuery = graphql`\n  query AppRepositoryNameQuery {\n    repository(owner: \"facebook\", name: \"relay\") {\n      name\n    }\n  }\n`;\n\n// Immediately load the query as our app starts. For a real app, we'd move this\n// into our routing configuration, preloading data as we transition to new routes.\nconst preloadedQuery = loadQuery(RelayEnvironment, RepositoryNameQuery, {\n  /* query variables */\n});\n\n// Inner component that reads the preloaded query results via `usePreloadedQuery()`.\n// This works as follows:\n// - If the query has completed, it returns the results of the query.\n// - If the query is still pending, it \"suspends\" (indicates to React that the\n//   component isn't ready to render yet). This will show the nearest <Suspense>\n//   fallback.\n// - If the query failed, it throws the failure error. For simplicity we aren't\n//   handling the failure case here.\nfunction App(props) {\n  const data = usePreloadedQuery(RepositoryNameQuery, props.preloadedQuery);\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <p>{data.repository.name}</p>\n      </header>\n    </div>\n  );\n}\n\n// The above component needs to know how to access the Relay environment, and we\n// need to specify a fallback in case it suspends:\n// - <RelayEnvironmentProvider> tells child components how to talk to the current\n//   Relay Environment instance\n// - <Suspense> specifies a fallback in case a child suspends.\nfunction AppRoot(props) {\n  return (\n    <RelayEnvironmentProvider environment={RelayEnvironment}>\n      <Suspense fallback={'Loading...'}>\n        <App preloadedQuery={preloadedQuery} />\n      </Suspense>\n    </RelayEnvironmentProvider>\n  );\n}\n\nexport default AppRoot;\n```\n\n----------------------------------------\n\nTITLE: Lazy Loading Query with useLazyLoadQuery in React and Relay\nDESCRIPTION: This snippet demonstrates how to use the useLazyLoadQuery Hook from Relay to fetch data lazily when a component renders. It includes a GraphQL query to fetch a user's name and renders it in an h1 element. The code also shows how to pass variables to the query and highlights the automatic subscription to data updates.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/guided-tour/rendering/queries.md#2025-04-18_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst React = require('React');\nconst {graphql, useLazyLoadQuery} = require('react-relay');\n\nfunction App() {\n  const data = useLazyLoadQuery(\n    graphql`\n      query AppQuery($id: ID!) {\n        user(id: $id) {\n          name\n        }\n      }\n    `,\n    {id: '4'},\n  );\n\n  return (\n    <h1>{data.user?.name}</h1>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Bi-directional Pagination in React Relay\nDESCRIPTION: This code demonstrates how to implement bi-directional pagination using usePaginationFragment with both forward and backward pagination parameters. It shows how to use loadPrevious and hasPrevious for backward pagination.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/guided-tour/list-data/advanced-pagination.md#2025-04-18_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport type {FriendsListComponent_user$key} from 'FriendsListComponent_user.graphql';\n\nconst React = require('React');\nconst {Suspense} = require('React');\n\nconst {graphql, usePaginationFragment} = require('react-relay');\n\ntype Props = {\n  userRef: FriendsListComponent_user$key,\n};\n\nfunction FriendsListComponent(props: Props) {\n  const {\n    data,\n    loadPrevious,\n    hasPrevious,\n    // ... forward pagination values\n  } = usePaginationFragment(\n    graphql`\n      fragment FriendsListComponent_user on User {\n        name\n        friends(after: $after, before: $before, first: $first, last: $last)\n          @connection(key: \"FriendsListComponent_user_friends_connection\") {\n          edges {\n            node {\n              name\n              age\n            }\n          }\n        }\n      }\n    `,\n    userRef,\n  );\n\n  return (\n    <>\n      <h1>Friends of {data.name}:</h1>\n      <List items={data.friends?.edges.map(edge => edge.node)}>\n        {node => {\n          return (\n            <div>\n              {node.name} - {node.age}\n            </div>\n          );\n        }}\n      </List>\n\n      {hasPrevious ? (\n        <Button onClick={() => loadPrevious(10)}>\n          Load more friends\n        </Button>\n      ) : null}\n\n      {/* Forward pagination controls can go simultaneously here */}\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Defining GraphQL Literal in Relay\nDESCRIPTION: The snippet demonstrates how to create a GraphQL literal using Relay, which will be pre-processed and replaced at build time with a GraphQLTaggedNode containing an AST representation.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/glossary/glossary.md#2025-04-18_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\ngraphql`...`\n```\n\n----------------------------------------\n\nTITLE: Implementing Optimistic Response in Relay Mutation\nDESCRIPTION: Example of providing an optimistic response for a Like button mutation. The optimistic response immediately updates the store with the expected result before the server responds.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/guided-tour/updating-data/graphql-mutations.md#2025-04-18_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  feedback_like: {\n    feedback: {\n      // Even though the id field is not explicitly selected, the\n      // compiler selected it for us\n      id: feedbackId,\n      viewer_does_like: true,\n    },\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Avoiding Suspense with fetchQuery in JavaScript\nDESCRIPTION: This code snippet illustrates how to refresh a Relay query using fetchQuery to avoid triggering React's Suspense during the fetch operation. Instead of relying on Suspense, it uses an internal loading state to manage UI updates. After fetching the data, it uses loadQuery with a store-only fetchPolicy to update the query reference. Dependencies include the Relay environment and the useQueryLoader hook.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/guided-tour/refetching/refreshing-queries.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * App.react.js\n */\n\nconst AppQuery = require('__generated__/AppQuery.graphql');\n\nfunction App(props: Props) {\n  const environment = useRelayEnvironment();\n  const [queryRef, loadQuery] = useQueryLoader(\n    AppQuery,\n    props.appQueryRef /* initial query ref */\n  );\n  const [isRefreshing, setIsRefreshing] = useState(false)\n\n  const refresh = useCallback(() => {\n    if (isRefreshing) { return; }\n    const {variables} = props.appQueryRef;\n    setIsRefreshing(true);\n\n    // fetchQuery will fetch the query and write\n    // the data to the Relay store. This will ensure\n    // that when we re-render, the data is already\n    // cached and we don't suspend\n    fetchQuery(environment, AppQuery, variables)\n      .subscribe({\n        complete: () => {\n          setIsRefreshing(false);\n\n          // *After* the query has been fetched, we call\n          // loadQuery again to re-render with a new\n          // queryRef.\n          // At this point the data for the query should\n          // be cached, so we use the 'store-only'\n          // fetchPolicy to avoid suspending.\n          loadQuery(variables, {fetchPolicy: 'store-only'});\n        }\n        error: () => {\n          setIsRefreshing(false);\n        }\n      });\n  }, [/* ... */]);\n\n  return (\n    <React.Suspense fallback=\"Loading query...\">\n      <MainContent\n        isRefreshing={isRefreshing}\n        refresh={refresh}\n        queryRef={queryRef}\n      />\n    </React.Suspense>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing RelayEnvironmentProvider in React\nDESCRIPTION: This snippet demonstrates how to initialize and use the RelayEnvironmentProvider component at the root of your React application.  It takes a Relay Environment as a prop, making it available to all descendant Relay components. This is crucial for Relay to function correctly.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/guided-tour/rendering/environment.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n```js\n// App root\n\nconst {RelayEnvironmentProvider} = require('react-relay');\nconst Environment = require('MyEnvironment');\n\nfunction Root() {\n  return (\n    <RelayEnvironmentProvider environment={Environment}>\n      {/*... */}\n    </RelayEnvironmentProvider>\n  );\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Implementing a Child Fragment Component in React and Relay\nDESCRIPTION: This code snippet shows how to create a child fragment component using React and Relay. It demonstrates the use of the useFragment hook to fetch data based on a GraphQL fragment.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/guided-tour/rendering/fragments.md#2025-04-18_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * UsernameSection.react.js\n *\n * Child Fragment Component\n */\n\nimport type {UsernameSection_user$key} from 'UsernameSection_user.graphql';\n\nconst React = require('React');\nconst {graphql, useFragment} = require('react-relay');\n\ntype Props = {\n  user: UsernameSection_user$key,\n};\n\nfunction UsernameSection(props: Props) {\n  const data = useFragment(\n    graphql`\n      fragment UsernameSection_user on User {\n        username\n      }\n    `,\n    props.user,\n  );\n\n  return <div>{data.username ?? 'Unknown'}</div>;\n}\n\nmodule.exports = UsernameSection;\n```\n\n----------------------------------------\n\nTITLE: Paginating Multiple Connections with usePaginationFragment in React Relay\nDESCRIPTION: This example demonstrates how to paginate over multiple connections within a single component using multiple usePaginationFragment hooks. The component handles pagination for both user friends and viewer friends connections separately.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/guided-tour/list-data/advanced-pagination.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport type {CombinedFriendsListComponent_user$key} from 'CombinedFriendsListComponent_user.graphql';\nimport type {CombinedFriendsListComponent_viewer$key} from 'CombinedFriendsListComponent_viewer.graphql';\n\nconst React = require('React');\n\nconst {graphql, usePaginationFragment} = require('react-relay');\n\ntype Props = {\n  user: CombinedFriendsListComponent_user$key,\n  viewer: CombinedFriendsListComponent_viewer$key,\n};\n\nfunction CombinedFriendsListComponent(props: Props) {\n\n  const {data: userData, ...userPagination} = usePaginationFragment(\n    graphql`\n      fragment CombinedFriendsListComponent_user on User {\n        name\n        friends\n          @connection(\n            key: \"CombinedFriendsListComponent_user_friends_connection\"\n          ) {\n          edges {\n            node {\n              name\n              age\n            }\n          }\n        }\n      }\n    `,\n    props.user,\n  );\n\n  const {data: viewerData, ...viewerPagination} = usePaginationFragment(\n    graphql`\n      fragment CombinedFriendsListComponent_user on Viewer {\n        actor {\n          ... on User {\n            name\n            friends\n              @connection(\n                key: \"CombinedFriendsListComponent_viewer_friends_connection\"\n              ) {\n              edges {\n                node {\n                  name\n                  age\n                }\n              }\n            }\n          }\n        }\n      }\n    `,\n    props.viewer,\n  );\n\n  return (...);\n}\n```\n\n----------------------------------------\n\nTITLE: Using Error Boundary with useLazyLoadQuery\nDESCRIPTION: The example shows how to implement retry logic with useLazyLoadQuery after an error occurs. By updating a fetchKey, the ErrorBoundaryWithRetry component triggers a refetch of the query, allowing a component to re-evaluate with the updated state.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/guided-tour/rendering/error-states.md#2025-04-18_snippet_3\n\nLANGUAGE: js\nCODE:\n```\n/**\n * ErrorBoundaryWithRetry.react.js\n */\n\nconst React = require('React');\n\n// NOTE: This is NOT actual production code;\n// it is only used to illustrate example\nclass ErrorBoundaryWithRetry extends React.Component<Props, State> {\n  state = {error: null, fetchKey: 0};\n\n  static getDerivedStateFromError(error): State {\n    return {error: error, fetchKey: 0};\n  }\n\n  _retry = () => {\n    this.setState(prev => ({\n      // Clear the error\n      error: null,\n      // Increment and set a new fetchKey in order\n      // to trigger a re-evaluation and refetching\n      // of the query using useLazyLoadQuery\n      fetchKey: prev.fetchKey + 1,\n    }));\n  }\n\n  render() {\n    const {children, fallback} = this.props;\n    const {error, fetchKey} = this.state;\n    if (error) {\n      if (typeof fallback === 'function') {\n        return fallback({error, retry: this._retry});\n      }\n      return fallback;\n    }\n    return children({fetchKey});\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Like Button Component Implementing Optimistic Updates - JavaScript\nDESCRIPTION: This snippet defines a LikeButton component that utilizes Relay's useMutation hook to optimistically update the like count and state of the button. It calculates the new like count based on the current state and provides an optimized UI experience by immediately reflecting user actions before server confirmation.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/guided-tour/updating-data/graphql-mutations.md#2025-04-18_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport type {FeedbackLikeData, LikeButtonMutation} from 'LikeButtonMutation.graphql';\nimport type {LikeButton_feedback$fragmentType} from 'LikeButton_feedback.graphql';\n\nconst {useMutation, graphql} = require('react-relay');\n\nfunction LikeButton({\n  feedback: LikeButton_feedback$fragmentType,\n}) {\n  const data = useFragment(\n    graphql`\n      fragment LikeButton_feedback on Feedback {\n        __id\n        viewer_does_like @required(action: THROW)\n        like_count @required(action: THROW)\n      }\n    `,\n    feedback\n  );\n\n  const [commitMutation, isMutationInFlight] = useMutation<LikeButtonMutation>(\n    graphql`\n      mutation LikeButtonMutation($input: FeedbackLikeData!)\n      @raw_response_type {\n        feedback_like(data: $input) {\n          feedback {\n            viewer_does_like\n            like_count\n          }\n        }\n      }\n    `\n  );\n\n  const changeToLikeCount = data.viewer_does_like ? -1 : 1;\n  return <button\n    onClick={() => commitMutation({\n      variables: {\n        input: {id: data.__id},\n      },\n      optimisticResponse: {\n        feedback_like: {\n          feedback: {\n            id: data.__id,\n            viewer_does_like: !data.viewer_does_like,\n            like_count: data.like_count + changeToLikeCount,\n          },\n        },\n      },\n    })}\n    disabled={isMutationInFlight}\n  >\n    Like\n  </button>\n}\n\n```\n\n----------------------------------------\n\nTITLE: Complete Like Button Implementation with Optimistic Updates\nDESCRIPTION: Full implementation of a Like button component using Relay mutations with optimistic updates, including fragment definition, mutation configuration, and optimistic response handling.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/guided-tour/updating-data/graphql-mutations.md#2025-04-18_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport type {FeedbackLikeData, LikeButtonMutation} from 'LikeButtonMutation.graphql';\nimport type {LikeButton_feedback$fragmentType} from 'LikeButton_feedback.graphql';\n\nconst {useMutation, graphql} = require('react-relay');\n\nfunction LikeButton({\n  feedback: LikeButton_feedback$fragmentType,\n}) {\n  const data = useFragment(\n    graphql`\n      fragment LikeButton_feedback on Feedback {\n        __id\n        viewer_does_like @required(action: THROW)\n        like_count @required(action: THROW)\n      }\n    `,\n    feedback\n  );\n\n  const [commitMutation, isMutationInFlight] = useMutation<LikeButtonMutation>(\n    graphql`\n      mutation LikeButtonMutation($input: FeedbackLikeData!)\n      @raw_response_type {\n        feedback_like(data: $input) {\n          feedback {\n            viewer_does_like\n            like_count\n          }\n        }\n      }\n    `\n  );\n\n  const changeToLikeCount = data.viewer_does_like ? -1 : 1;\n  return <button\n    onClick={() => commitMutation({\n      variables: {\n        input: {id: data.__id},\n      },\n      optimisticResponse: {\n        feedback_like: {\n          feedback: {\n            id: data.__id,\n            viewer_does_like: !data.viewer_does_like,\n            like_count: data.like_count + changeToLikeCount,\n          },\n        },\n      },\n    })}\n    disabled={isMutationInFlight}\n  >\n    Like\n  </button>\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Basic Relay Query Component States\nDESCRIPTION: Demonstrates testing loading, data loaded, and error states of a Relay component using createMockEnvironment and MockPayloadGenerator. Shows how to mock query responses and verify component rendering.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/guides/testing-relay-components.md#2025-04-18_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst MyAwesomeViewRoot = require('MyAwesomeViewRoot');\nconst {\n  createMockEnvironment,\n  MockPayloadGenerator,\n} = require('relay-test-utils');\n\ntest('Loading State', () => {\n  const environment = createMockEnvironment();\n  const renderer = ReactTestRenderer.create(\n    <MyAwesomeViewRoot environment={environment} />,\n  );\n\n  expect(\n    renderer.root.find(node => node.props['data-testid'] === 'spinner'),\n  ).toBeDefined();\n});\n\ntest('Data Render', () => {\n  const environment = createMockEnvironment();\n  const renderer = ReactTestRenderer.create(\n    <MyAwesomeViewRoot environment={environment} />,\n  );\n\n  ReactTestRenderer.act(() => {\n    environment.mock.resolveMostRecentOperation(operation =>\n      MockPayloadGenerator.generate(operation),\n    );\n  });\n\n  expect(\n    renderer.root.find(node => node.props['data-testid'] === 'myButton'),\n  ).toBeDefined();\n});\n\ntest('Error State', () => {\n  const environment = createMockEnvironment();\n  const renderer = ReactTestRenderer.create(\n    <MyAwesomeViewRoot environment={environment} />,\n  );\n\n  ReactTestRenderer.act(() => {\n    environment.mock.rejectMostRecentOperation(new Error('Uh-oh'));\n  });\n\n  expect(\n    renderer.root.find(item => (item.props.testID = 'errorMessage')),\n  ).toBeDefined();\n});\n```\n\n----------------------------------------\n\nTITLE: Testing Data Rendering with Mock Environment in Relay (JavaScript)\nDESCRIPTION: This snippet tests the data rendering capabilities of a Relay component using a mocked environment. It utilizes the queueOperationResolver of the mock environment to resolve queries and verify that the expected component renders correctly. The test expects a UI element identified by a test ID to be defined when the operation is successfully completed.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/guides/testing-relay-components.md#2025-04-18_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\n// Say you have a component with the QueryRenderer\nconst MyAwesomeViewRoot = require('MyAwesomeViewRoot');\nconst {\n  createMockEnvironment,\n  MockPayloadGenerator,\n} = require('relay-test-utils');\n\ntest('Data Render', () => {\n  const environment = createMockEnvironment();\n  environment.mock.queueOperationResolver(operation =>\n    MockPayloadGenerator.generate(operation),\n  );\n\n  const renderer = ReactTestRenderer.create(\n    <MyAwesomeViewRoot environment={environment} />, \n  );\n\n  // At this point operation will be resolved\n  // and the data for a query will be available in the store\n  expect(\n    renderer.root.find(node => node.props['data-testid'] === 'myButton'),\n  ).toBeDefined();\n});\n```\n\n----------------------------------------\n\nTITLE: Using Suspense for Main Content Loading in React\nDESCRIPTION: Shows how to wrap the main content of an application with Suspense to display a loading glimmer while the content is being loaded.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/guided-tour/rendering/loading-states.md#2025-04-18_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nconst React = require('React');\nconst {Suspense} = require('React');\n\nfunction App() {\n  return (\n    // LoadingGlimmer is rendered via the Suspense fallback\n    <Suspense fallback={<LoadingGlimmer />}>\n      <MainContent /> {/* MainContent may suspend */}\n    </Suspense>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Composed Derived Resolver for Checkout Validity\nDESCRIPTION: This snippet shows how to define composite derived resolvers in Relay to check the validity of a checkout item and if a shopping cart can be checked out. Each resolver function uses the `readFragment` function to read specific fragments of a GraphQL object and compute a Boolean value. The resolver for `canCheckout` checks that all items in a cart are valid. This requires dependencies on `relay-runtime` and the definition of `CheckoutItemFragment` and `ShoppingCartFragment` in GraphQL.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/guides/relay-resolvers/derived-fields.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * @RelayResolver CheckoutItem.isValid: Boolean\n * @rootFragment CheckoutItemFragment\n */\nexport function isValid(key): boolean {\n  const item = readFragment(graphql`\n    fragment CheckoutItemFragment on CheckoutItem {\n      product {\n        price\n      }\n      quantity\n    }\n  `, key);\n  return item.product.price * item.quantity > 0;\n}\n\n/**\n * @RelayResolver ShoppingCart.canCheckout: Boolean\n * @rootFragment ShoppingCartFragment\n */\nexport function canCheckout(key): boolean {\n  const cart = readFragment(graphql`\n    fragment ShoppingCartFragment on ShoppingCart {\n      items {\n        isValid\n      }\n    }\n  `, key);\n  return cart.items.every(item => item.isValid);\n}\n```\n\n----------------------------------------\n\nTITLE: Using useLazyLoadQuery Hook in React Relay for GraphQL Queries\nDESCRIPTION: Example of using the useLazyLoadQuery hook to fetch data from a GraphQL endpoint during component render. The hook accepts a query defined with the graphql template literal, variables object, and optional configuration settings.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/api-reference/hooks/use-lazy-load-query.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst React = require('React');\n\nconst {graphql, useLazyLoadQuery} = require('react-relay');\n\nfunction App() {\n  const data = useLazyLoadQuery(\n    graphql`\n      query AppQuery($id: ID!) {\n        user(id: $id) {\n          name\n        }\n      }\n    `,\n    {id: 4},\n    {fetchPolicy: 'store-or-network'},\n  );\n\n return <h1>{data.user?.name}</h1>;\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching and Rendering Data with useLazyLoadQuery\nDESCRIPTION: Demonstrates how to fetch a query using the useLazyLoadQuery hook and pass fragment references to child components. This shows the complete data flow in a Relay application.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/principles-and-architecture/thinking-in-relay.md#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// Story.react.js\nfunction Story(props) {\n  const data = useLazyLoadQuery(storyQuery, props.storyId);\n\n  return (<>\n    <Heading>{data?.story.title}</Heading>\n    {data?.story?.author && <AuthorDetails author={data.story.author} />}\n  </>);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing useMutation Hook\nDESCRIPTION: Complete example of implementing a like button component using Relay's useMutation hook.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/guided-tour/updating-data/graphql-mutations.md#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport type {FeedbackLikeData, LikeButtonMutation} from 'LikeButtonMutation.graphql';\n\nconst {useMutation, graphql} = require('react-relay');\n\nfunction LikeButton({\n  feedbackId: string,\n}) {\n  const [commitMutation, isMutationInFlight] = useMutation<LikeButtonMutation>(\n    graphql`\n      mutation LikeButtonMutation($input: FeedbackLikeData!) {\n        feedback_like(data: $input) {\n          feedback {\n            viewer_does_like\n            like_count\n          }\n        }\n      }\n    `\n  );\n\n  return <button\n    onClick={() => commitMutation({\n      variables: {\n        input: {id: feedbackId},\n      },\n    })}\n    disabled={isMutationInFlight}\n  >\n    Like\n  </button>\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring a Basic GraphQL Fragment\nDESCRIPTION: A simple GraphQL fragment that defines a selection of fields on a User type, including nested fields for profile picture.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v13.0.0/guided-tour/rendering/fragments.md#2025-04-18_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nfragment UserFragment on User {\n  name\n  age\n  profile_picture(scale: 2) {\n    uri\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Refetching a Comment Fragment While Avoiding Suspense - JavaScript\nDESCRIPTION: This snippet shows an alternative implementation of the CommentBody component that avoids showing a Suspense fallback during the refetching process. Instead, it manages a custom loading state while fetching the data to ensure existing content remains visible.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/guided-tour/refetching/refetching-fragments-with-different-data.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport type {CommentBody_comment$key} from 'CommentBody_comment.graphql';\n\nimport {useState} from 'react';\n\ntype Props = {\n  comment: CommentBody_comment$key,\n};\n\nfunction CommentBody(props: Props) {\n  const [data, refetch] = useRefetchableFragment(\n    graphql`\n      fragment CommentBody_comment on Comment\n      # @refetchable makes it so Relay autogenerates a query for\n      # fetching this fragment\n      @refetchable(queryName: \"CommentBodyRefetchQuery\") {\n        body(lang: $lang) {\n          text\n        }\n      }\n    `,\n    props.comment,\n  );\n\n  const [isRefetching, setIsRefreshing] = useState(false)\n  const refetchTranslation = () => {\n    if (isRefetching) { return; }\n    setIsRefreshing(true);\n\n    // fetchQuery will fetch the query and write\n    // the data to the Relay store. This will ensure\n    // that when we re-render, the data is already\n    // cached and we don't suspend\n    fetchQuery(environment, AppQuery, variables)\n      .subscribe({\n        complete: () => {\n          setIsRefreshing(false);\n\n          // *After* the query has been fetched, we call\n          // refetch again to re-render with the updated data.\n          // At this point the data for the query should\n          // be cached, so we use the 'store-only'\n          // fetchPolicy to avoid suspending.\n          refetch({lang: 'SPANISH'}, {fetchPolicy: 'store-only'});\n        },\n        error: () => {\n          setIsRefreshing(false);\n        }\n      });\n  };\n\n  return (\n    <> \n      <p>{data.body?.text}</p>\n      <Button\n        disabled={isRefetching}\n        onClick={() => refetchTranslation()}> \n        Translate Comment {isRefetching ? <LoadingSpinner /> : null}\n      </Button>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a GraphQL Query in Relay\nDESCRIPTION: Example of defining a GraphQL query with variables and fragments. The query requests user data and viewer information.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/guided-tour/rendering/queries.md#2025-04-18_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nquery UserQuery($id: ID!) {\n  user(id: $id) {\n    id\n    name\n    ...UserFragment\n  }\n  viewer {\n    actor {\n      name\n    }\n  }\n}\n\nfragment UserFragment on User {\n  username\n}\n```\n\n----------------------------------------\n\nTITLE: Using useFragment with usePreloadedQuery in Relay Components\nDESCRIPTION: Demonstrates how to use usePreloadedQuery to obtain fragment references and then extract data with useFragment. Shows the pattern for accessing fragment data in React components.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/glossary/glossary.md#2025-04-18_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst queryData = usePreloadedQuery(\n  graphql`query ComponentQuery { viewer { account_user { ...Component_name } } }`,\n  {},\n);\n\n// queryData.viewer is the FragmentReference\n// Though this would usually happen in another file, you can\n// extract the value of Component_name as follows:\nconst fragmentData = useFragment(\n  graphql`fragment Component_name on User { name }`,\n  queryData?.viewer?.account_user,\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring Relay Network Layer with graphql-ws\nDESCRIPTION: Example showing how to set up a network layer using the graphql-ws library for handling GraphQL subscriptions over WebSocket connections. Creates a WebSocket client and configures subscription handling.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/guided-tour/updating-data/graphql-subscriptions.md#2025-04-18_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport {\n    ...\n    Network,\n    Observable\n} from 'relay-runtime';\nimport { createClient } from 'graphql-ws';\n\nconst wsClient = createClient({\n  url:'ws://localhost:3000',\n});\n\nconst subscribe = (operation, variables) => {\n  return Observable.create((sink) => {\n    return wsClient.subscribe(\n      {\n        operationName: operation.name,\n        query: operation.text,\n        variables,\n      },\n      sink,\n    );\n  });\n}\n\nconst network = Network.create(fetchQuery, subscribe);\n```\n\n----------------------------------------\n\nTITLE: Implementing fetchQuery to Avoid Suspense Fallbacks in Relay\nDESCRIPTION: This code demonstrates how to refetch data in a Relay application without showing Suspense fallbacks that would hide already rendered content. It uses fetchQuery to manually fetch data and write it to the Relay store before updating the component state, combined with a store-only fetchPolicy to prevent suspending during re-rendering.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/guided-tour/refetching/refetching-queries-with-different-data.md#2025-04-18_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * App.react.js\n */\nconst AppQuery = require('__generated__/AppQuery.graphql');\n\nfunction App(props: Props) {\n  const environment = useRelayEnvironment();\n  const [isRefreshing, setIsRefreshing] = useState(false)\n  const [queryArgs, setQueryArgs] = useState({\n    options: {fetchKey: 0, fetchPolicy: 'store-or-network'},\n    variables: {id: '4'},\n  });\n\n  const refetch = useCallback(() => {\n    if (isRefreshing) { return; }\n    setIsRefreshing(true);\n    const variables = { id: 'different-id' };\n\n    // fetchQuery will fetch the query and write\n    // the data to the Relay store. This will ensure\n    // that when we re-render, the data is already\n    // cached and we don't suspend\n    fetchQuery(environment, AppQuery, variables)\n      .subscribe({\n        complete: () => {\n          setIsRefreshing(false);\n\n          // *After* the query has been fetched, we update\n          // our state to re-render with the new fetchKey\n          // and fetchPolicy.\n          // At this point the data for the query should\n          // be cached, so we use the 'store-only'\n          // fetchPolicy to avoid suspending.\n          setQueryArgs(prev => ({\n            options: {\n              fetchKey: (prev?.options.fetchKey ?? 0) + 1,\n              fetchPolicy: 'store-only',\n            },\n            variables,\n          }));\n        },\n        error: () => {\n          setIsRefreshing(false);\n        }\n      });\n  }, [/* ... */]);\n\n  return (\n    <React.Suspense fallback=\"Loading query...\">\n      <MainContent\n        isRefetching={isRefetching}\n        refetch={refetch}\n        queryArgs={queryArgs}\n      />\n    </React.Suspense>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing GraphQL Subscription with useSubscription Hook in React-Relay\nDESCRIPTION: Example showing how to implement a GraphQL subscription using the useSubscription hook in a React component. The code demonstrates proper configuration with useMemo for performance optimization and basic subscription setup.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/api-reference/hooks/use-subscription.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport {graphql, useSubscription} from 'react-relay';\nimport {useMemo} from 'react';\n\nconst subscription = graphql`\n  subscription UserDataSubscription($input: InputData!) {\n    # ...\n  }\n`;\n\nfunction UserComponent({ id }) {\n  // IMPORTANT: your config should be memoized.\n  // Otherwise, useSubscription will re-render too frequently.\n  const config = useMemo(() => ({\n    variables: {id},\n    subscription,\n  }), [id, subscription]);\n\n  useSubscription(config);\n\n  return (/* ... */);\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Fragment Arguments with @argumentDefinitions in Relay\nDESCRIPTION: The @argumentDefinitions directive specifies arguments that a fragment accepts. This example defines a fragment with optional and required arguments that are then used as variables within the fragment.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/api-reference/graphql/graphql-directives.md#2025-04-18_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\nfragment TodoList_list on TodoList @argumentDefinitions(\n  count: {type: \"Int\", defaultValue: 10},  # Optional argument\n  userID: {type: \"ID\"},                    # Required argument\n) {\n  title\n  todoItems(userID: $userID, first: $count) {  # Use fragment arguments here as variables\n    ...TodoItem_item\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Refetching Fragments using useRefetchableFragment in React and Relay\nDESCRIPTION: This snippet demonstrates how to use the useRefetchableFragment Hook to refetch a fragment with different data. It includes the fragment definition with @refetchable directive and shows how to trigger a refetch with new variables.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/guided-tour/refetching/refetching-fragments-with-different-data.md#2025-04-18_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport type {CommentBody_comment$key} from 'CommentBody_comment.graphql';\n\ntype Props = {\n  comment: CommentBody_comment$key,\n};\n\nfunction CommentBody(props: Props) {\n  const [data, refetch] = useRefetchableFragment(\n    graphql`\n      fragment CommentBody_comment on Comment\n      # @refetchable makes it so Relay autogenerates a query for\n      # fetching this fragment\n      @refetchable(queryName: \"CommentBodyRefetchQuery\") {\n        body(lang: $lang) {\n          text\n        }\n      }\n    `,\n    props.comment,\n  );\n\n  const refetchTranslation = () => {\n    // We call refetch with new variables,\n    // which will refetch the @refetchable query with the\n    // new variables and update this component with the\n    // latest fetched data.\n    refetch({lang: 'SPANISH'});\n  };\n\n  return (\n    <>\n      <p>{data.body?.text}</p>\n      <Button\n        onClick={() => refetchTranslation()}>\n        Translate Comment\n      </Button>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using Fragment Arguments in Story and PosterByline Components\nDESCRIPTION: This snippet shows how to pass arguments to the ImageFragment when spreading it in the StoryFragment and PosterBylineFragment.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/tutorial/fragments-1.md#2025-04-18_snippet_11\n\nLANGUAGE: GraphQL\nCODE:\n```\nconst StoryFragment = graphql`\n  fragment StoryFragment on Story {\n    title\n    summary\n    postedAt\n    poster {\n      ...PosterBylineFragment\n    }\n    thumbnail {\n      ...ImageFragment @arguments(width: 400)\n    }\n  }\n`;\n```\n\nLANGUAGE: GraphQL\nCODE:\n```\nconst PosterBylineFragment = graphql`\n  fragment PosterBylineFragment on Actor {\n    name\n    profilePicture {\n      ...ImageFragment @arguments(width: 60, height: 60)\n    }\n  }\n`;\n```\n\n----------------------------------------\n\nTITLE: Implementing Bi-directional Pagination with Relay\nDESCRIPTION: Shows how to implement bi-directional pagination using usePaginationFragment, allowing navigation in both forward and backward directions through paginated data.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/guided-tour/list-data/advanced-pagination.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport type {FriendsListComponent_user$key} from 'FriendsListComponent_user.graphql';\n\nconst React = require('React');\nconst {Suspense} = require('React');\n\nconst {graphql, usePaginationFragment} = require('react-relay');\n\ntype Props = {\n  userRef: FriendsListComponent_user$key,\n};\n\nfunction FriendsListComponent(props: Props) {\n  const {\n    data,\n    loadPrevious,\n    hasPrevious,\n    // ... forward pagination values\n  } = usePaginationFragment(\n    graphql`\n      fragment FriendsListComponent_user on User {\n        name\n        friends(after: $after, before: $before, first: $first, last: $last)\n          @connection(key: \"FriendsListComponent_user_friends_connection\") {\n          edges {\n            node {\n              name\n              age\n            }\n          }\n        }\n      }\n    `,\n    userRef,\n  );\n\n  return (\n    <>\n      <h1>Friends of {data.name}:</h1>\n      <List items={data.friends?.edges.map(edge => edge.node)}>\n        {node => {\n          return (\n            <div>\n              {node.name} - {node.age}\n            </div>\n          );\n        }}\n      </List>\n\n      {hasPrevious ? (\n        <Button onClick={() => loadPrevious(10)}>\n          Load more friends\n        </Button>\n      ) : null}\n\n      {/* Forward pagination controls can go simultaneously here */}\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Including Fragments with Different @arguments in Relay\nDESCRIPTION: Demonstrates how to include the same fragment multiple times with different @arguments, using a variable instead of a literal value.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/guided-tour/rendering/variables.md#2025-04-18_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nfunction OtherUserComponent(props) {\n  const data = useFragment(\n    graphql`\n      fragment OtherUserComponent_user on User {\n        name\n\n        # Pass a different value for the scale variable.\n        # The value can be a local variable, global variable or literal:\n        ...PictureComponent_user @arguments(scale: $pictureScale)\n      }\n    `,\n    props.user,\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Loading Queries Directly with loadQuery\nDESCRIPTION: Demonstrates how to use loadQuery to fetch a query reference directly during app initialization, outside of a React component's render cycle\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/guided-tour/rendering/queries.md#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst initialQueryRef = loadQuery<HomeTabQueryType>(\n  environment,\n  HomeTabQuery,\n  {id: '4'},\n);\n\nrender(<AppTabs initialQueryRef={initialQueryRef} initialTab={...} />)\n```\n\n----------------------------------------\n\nTITLE: Implementing Render-as-you-fetch Pattern with usePreloadedQuery in React Relay\nDESCRIPTION: This example demonstrates how to implement the render-as-you-fetch pattern using usePreloadedQuery and useQueryLoader hooks from React Relay. The component NameLoader provides a button to trigger data loading and renders the NameDisplay component which consumes the query data when available, with proper loading state handling via Suspense.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/api-reference/hooks/use-preloaded-query.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport type {AppQueryType} from 'AppQueryType.graphql';\n\nconst React = require('React');\n\nconst {graphql, useQueryLoader, usePreloadedQuery} = require('react-relay');\n\nconst AppQuery = graphql`\n  query AppQuery($id: ID!) {\n    user(id: $id) {\n      name\n    }\n  }\n`;\n\ntype Props = {\n  initialQueryRef: PreloadedQuery<AppQueryType>,\n};\n\nfunction NameLoader(props) {\n  const [queryReference, loadQuery] = useQueryLoader(\n    AppQuery,\n    props.initialQueryRef, /* e.g. provided by router */\n  );\n\n  return (<>\n    <Button\n      onClick={() => loadQuery({id: '4'})}\n      disabled={queryReference != null}\n    >\n      Reveal your name!\n    </Button>\n    <Suspense fallback=\"Loading...\">\n      {queryReference != null\n        ? <NameDisplay queryReference={queryReference} />\n        : null\n      }\n    </Suspense>\n  </>);\n}\n\nfunction NameDisplay({ queryReference }) {\n  const data = usePreloadedQuery(AppQuery, queryReference);\n\n  return <h1>{data.user?.name}</h1>;\n}\n```\n\n----------------------------------------\n\nTITLE: Using usePrefetchableForwardPaginationFragment in React with Relay\nDESCRIPTION: This snippet demonstrates how to use the usePrefetchableForwardPaginationFragment hook in a React component to paginate through a list of friends. It shows the setup of the GraphQL fragment, usage of the hook, and rendering of the paginated data.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/api-reference/hooks/use-prefetchable-forward-pagination-fragment.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport type {FriendsList_user$key} from 'FriendsList_user.graphql';\n\nconst React = require('React');\n\nconst {graphql, usePrefetchableForwardPaginationFragment} = require('react-relay');\n\ntype Props = {\n  user: FriendsList_user$key,\n};\n\nfunction FriendsList(props: Props) {\n  const {\n    data,\n    edges, // NOTE: It is required to use `edges` to access the items\n    loadNext,\n    hasNext,\n    isLoadingNext,\n    refetch, // For refetching connection\n  } = usePrefetchableForwardPaginationFragment(\n    graphql`\n      fragment FriendsListComponent_user on User\n      @refetchable(queryName: \"FriendsListPaginationQuery\") {\n        name\n        friends(first: $count, after: $cursor)\n        @connection(key: \"FriendsList_user_friends\", prefetchable_pagination: true) {\n          edges {\n            node {\n              name\n              age\n            }\n          }\n        }\n      }\n    `,\n    props.user,\n  );\n\n  return (\n    <>\n      <h1>Friends of {data.name}:</h1>\n\n      <List items={edges.map(edge => edge.node)}>\n        {node => {\n          return (\n            <div>\n              {node.name} - {node.age}\n            </div>\n          );\n        }}\n      </List>\n      <Button onClick={() => loadNext(10)}>Load more friends</Button>\n    </>\n  );\n}\n\nmodule.exports = FriendsList;\n```\n\n----------------------------------------\n\nTITLE: Querying the First Ship in a Connection\nDESCRIPTION: A GraphQL query demonstrating the connection pattern by requesting the first ship in the Rebels faction, showing how to paginate through related objects.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/guides/graphql-server-specification.md#2025-04-18_snippet_9\n\nLANGUAGE: graphql\nCODE:\n```\nquery RebelsShipsQuery {\n  rebels {\n    name\n    ships(first: 1) {\n      edges {\n        node {\n          name\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring a GraphQL Connection Fragment in Relay\nDESCRIPTION: This snippet demonstrates how to declare a fragment that queries for a GraphQL connection in Relay. It uses the @connection directive to mark the field for pagination and includes a unique key for the connection.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/guided-tour/list-data/rendering-connections.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst {graphql} = require('RelayModern');\n\nconst userFragment = graphql`\n  fragment UserFragment on User {\n    name\n    friends(after: $cursor, first: $count)\n      @connection(key: \"UserFragment_friends\") {\n      edges {\n        node {\n          ...FriendComponent\n        }\n      }\n    }\n  }\n`;\n```\n\n----------------------------------------\n\nTITLE: Initializing Relay Component Tests with ReactTestRenderer\nDESCRIPTION: Demonstrates testing different states of a Relay component using createMockEnvironment and ReactTestRenderer, covering loading, data rendering, and error scenarios\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/guides/testing-relay-components.md#2025-04-18_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst MyAwesomeViewRoot = require('MyAwesomeViewRoot');\nconst {\n  createMockEnvironment,\n  MockPayloadGenerator,\n} = require('relay-test-utils');\n```\n\n----------------------------------------\n\nTITLE: Relay Environment Setup\nDESCRIPTION: This JavaScript code sets up the Relay Environment, which is responsible for managing the network connection and data store. It imports necessary modules from `relay-runtime`, including `Environment`, `Network`, `RecordSource`, and `Store`. It then defines a `fetchRelay` function that uses the previously defined `fetchGraphQL` function to communicate with the GraphQL server and exports the Relay Environment to be used by the app.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/getting-started/step-by-step-guide.md#2025-04-18_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\n\"// your-app-name/src/RelayEnvironment.js\nimport {Environment, Network, RecordSource, Store} from 'relay-runtime';\nimport fetchGraphQL from './fetchGraphQL';\n\n// Relay passes a \\\"params\\\" object with the query name and text. So we define a helper function\n// to call our fetchGraphQL utility with params.text.\nasync function fetchRelay(params, variables) {\n  console.log(`fetching query ${params.name} with ${JSON.stringify(variables)}`);\n  return fetchGraphQL(params.text, variables);\n}\n\n// Export a singleton instance of Relay Environment configured with our network function:\nexport default new Environment({\n  network: Network.create(fetchRelay),\n  store: new Store(new RecordSource()),\n});\"\n```\n\n----------------------------------------\n\nTITLE: Reading Client-Only Data with Relay's useFragment Hook\nDESCRIPTION: Shows how to query and access client-only fields using Relay's useFragment hook. This example demonstrates selecting a client-only field alongside server fields in a GraphQL fragment.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/guided-tour/updating-data/client-only-data.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst data = *useFragment*(\n  graphql`\n    fragment CommentComponent_comment on Comment {\n\n      # We can select client-only fields as we would any other field\n      is_new_comment\n\n      body {\n        text\n      }\n    }\n  `,\n  props.user,\n);\n```\n\n----------------------------------------\n\nTITLE: Lazily Fetching Query with useLazyLoadQuery in React and Relay\nDESCRIPTION: This snippet demonstrates how to use the useLazyLoadQuery Hook from Relay to fetch data lazily when a component renders. It includes a GraphQL query to fetch a user's name and renders it in an h1 element. The code also highlights the use of Flow types for type-checking.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/guided-tour/rendering/queries.md#2025-04-18_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst React = require('React');\nconst {graphql, useLazyLoadQuery} = require('react-relay');\n\nfunction App() {\n  const data = useLazyLoadQuery(\n    graphql`\n      query AppQuery($id: ID!) {\n        user(id: $id) {\n          name\n        }\n      }\n    `,\n    {id: '4'},\n  );\n\n  return (\n    <h1>{data.user?.name}</h1>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Strong Type with RelayResolver in TypeScript\nDESCRIPTION: This TypeScript code snippet demonstrates how to define a strong type using the `@RelayResolver` annotation in a docblock. It includes a function that receives an `id` and returns a `UserModel` instance. The function relies on `UserService.getById` to retrieve the data. The use of strong types allows Relay to apply optimizations such as memoization.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/guides/relay-resolvers/defining-types.md#2025-04-18_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n/**\n * @RelayResolver User\n */\nexport function User(id: DataID): UserModel {\n  return UserService.getById(id);\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Relay Store with commitPayload\nDESCRIPTION: This code snippet demonstrates how to use `commitPayload` to write a payload to the Relay store. It requires an `OperationDescriptor` created with `createOperationDescriptor` and the payload itself. The payload can be typed using the Flow type generated by adding the directive `@raw_response_type` to the query.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/guided-tour/updating-data/local-data-updates.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport type {FooQueryRawResponse} from 'FooQuery.graphql'\n\nconst {createOperationDescriptor} = require('relay-runtime');\n\nconst operationDescriptor = createOperationDescriptor(FooQuery, {\n  id: 'an-id',\n  otherVariable: 'value',\n});\n\nconst payload: FooQueryRawResponse = {...};\n\nenvironment.commitPayload(operationDescriptor, payload);\n```\n\n----------------------------------------\n\nTITLE: Using useRefetchableFragment with GraphQL\nDESCRIPTION: This code snippet demonstrates how to use the `useRefetchableFragment` hook in a React component to fetch and re-render a GraphQL fragment. The fragment is defined using the `graphql` template literal and must include the `@refetchable` directive. The `refetch` function allows updating the fragment data with new variables.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/api-reference/hooks/use-refetchable-fragment.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport type {CommentBody_comment$key} from 'CommentBody_comment.graphql';\n\nconst React = require('React');\n\nconst {graphql, useRefetchableFragment} = require('react-relay');\n\n\ntype Props = {\n  comment: CommentBody_comment$key,\n};\n\nfunction CommentBody(props: Props) {\n  const [data, refetch] = useRefetchableFragment(\n    graphql`\n      fragment CommentBody_comment on Comment\n      @refetchable(queryName: \\\"CommentBodyRefetchQuery\\\") {\n        body(lang: $lang) {\n          text\n        }\n      }\n    `,\n    props.comment,\n  );\n\n  return (\n    <>\n      <p>{data.body?.text}</p>\n      <Button\n        onClick={() => {\n          refetch({lang: 'SPANISH'}, {fetchPolicy: 'store-or-network'})\n        }}\n      >\n        Translate Comment\n      </Button>\n    </>\n  );\n}\n\nmodule.exports = CommentBody;\n```\n\n----------------------------------------\n\nTITLE: Providing Optimistic Response in Relay Mutation - JavaScript\nDESCRIPTION: This snippet shows how to set an optimistic response for a mutation in Relay. It enables immediate UI updates by simulating expected data before the mutation completes. The optimistic response must be structured correctly to match GraphQL query expectations and utilize Flow typing for error checking.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/guided-tour/updating-data/graphql-mutations.md#2025-04-18_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  feedback_like: {\n    feedback: {\n      // Even though the id field is not explicitly selected, the\n      // compiler selected it for us\n      id: feedbackId,\n      viewer_does_like: true,\n    },\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Using @deleteEdge Directive in a Mutation\nDESCRIPTION: Demonstrates how to use the @deleteEdge directive to delete edges from a connection in a mutation by specifying connection IDs and the field containing deleted node IDs.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/guided-tour/list-data/updating-connections.md#2025-04-18_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n// Get the connection ID using the `__id` field\nconst connectionID = fragmentData?.comments?.__id;\n\n// Or get it using `ConnectionHandler.getConnectionID()`\nconst connectionID = ConnectionHandler.getConnectionID(\n  '<story-id>',\n  'StoryComponent_story_comments_connection',\n);\n\n// ...\n\n// Mutation\ncommitMutation<DeleteCommentsMutation>(environment, {\n  mutation: graphql`\n    mutation DeleteCommentsMutation(\n      # Define a GraphQL variable for the connections array\n      $connections: [ID!]!\n      $input: CommentsDeleteInput\n    ) {\n      commentsDelete(input: $input) {\n        deletedCommentIds @deleteEdge(connections: $connections)\n      }\n    }\n  `,\n  variables: {\n    input,\n    // Pass the `connections` array\n    connections: [connectionID],\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Using usePaginationFragment in React with Relay\nDESCRIPTION: This snippet demonstrates how to use the usePaginationFragment hook to render a paginated list of friends. It shows the hook usage, fragment definition with @connection and @refetchable directives, and basic rendering of the paginated data.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/api-reference/hooks/use-pagination-fragment.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport type {FriendsList_user$key} from 'FriendsList_user.graphql';\n\nconst React = require('React');\n\nconst {graphql, usePaginationFragment} = require('react-relay');\n\ntype Props = {\n  user: FriendsList_user$key,\n};\n\nfunction FriendsList(props: Props) {\n  const {\n    data,\n    loadNext,\n    loadPrevious,\n    hasNext,\n    hasPrevious,\n    isLoadingNext,\n    isLoadingPrevious,\n    refetch, // For refetching connection\n  } = usePaginationFragment(\n    graphql`\n      fragment FriendsListComponent_user on User\n      @refetchable(queryName: \"FriendsListPaginationQuery\") {\n        name\n        friends(first: $count, after: $cursor)\n        @connection(key: \"FriendsList_user_friends\") {\n          edges {\n            node {\n              name\n              age\n            }\n          }\n        }\n      }\n    `,\n    props.user,\n  );\n\n  return (\n    <>\n      <h1>Friends of {data.name}:</h1>\n\n      <List items={data.friends?.edges.map(edge => edge.node)}>\n        {node => {\n          return (\n            <div>\n              {node.name} - {node.age}\n            </div>\n          );\n        }}\n      </List>\n      <Button onClick={() => loadNext(10)}>Load more friends</Button>\n    </>\n  );\n}\n\nmodule.exports = FriendsList;\n```\n\n----------------------------------------\n\nTITLE: Using a GraphQL Fragment in a React Functional Component with Relay\nDESCRIPTION: This code shows how to use the useFragment hook in a React functional component to read data from the Relay store based on a previously defined GraphQL fragment.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/principles-and-architecture/thinking-in-relay.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexport default function AuthorDetails(props) {\n  const data = useFragment(authorDetailsFragment, props.author);\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching GraphQL Data Using fetchQuery with Subscriptions in JavaScript\nDESCRIPTION: Example of using Relay's fetchQuery function to imperatively fetch GraphQL data outside of React components. The function returns an observable that must be subscribed to in order to start the request and handle different events in the request lifecycle.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/api-reference/relay-runtime/fetch-query.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// You should prefer passing an environment that was returned from useRelayEnvironment()\nconst MyEnvironment = require('MyEnvironment');\nconst {fetchQuery} = require('react-relay');\n\nfetchQuery(\n  environment,\n  graphql`\n    query AppQuery($id: ID!) {\n      user(id: $id) {\n        name\n      }\n    }\n  `,\n  {id: 4},\n)\n.subscribe({\n  start: () => {...},\n  complete: () => {...},\n  error: (error) => {...},\n  next: (data) => {...}\n});\n```\n\n----------------------------------------\n\nTITLE: Using useLazyLoadQuery Hook in React Relay\nDESCRIPTION: Example showing how to use the useLazyLoadQuery hook to fetch GraphQL data during component render. The snippet demonstrates querying user data with variables and fetch policy options.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/api-reference/hooks/use-lazy-load-query.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst React = require('React');\n\nconst {graphql, useLazyLoadQuery} = require('react-relay');\n\nfunction App() {\n  const data = useLazyLoadQuery(\n    graphql`\n      query AppQuery($id: ID!) {\n        user(id: $id) {\n          name\n        }\n      }\n    `,\n    {id: 4},\n    {fetchPolicy: 'store-or-network'},\n  );\n\n return <h1>{data.user?.name}</h1>;\n}\n```\n\n----------------------------------------\n\nTITLE: Delete Record Mutation\nDESCRIPTION: Example of a mutation using the @deleteRecord directive to remove an item from the store.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/guided-tour/updating-data/graphql-mutations.md#2025-04-18_snippet_5\n\nLANGUAGE: graphql\nCODE:\n```\nmutation DeletePostMutation($input: DeletePostData!) {\n  delete_post(data: $input) {\n    deleted_post {\n      id @deleteRecord\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Updatable Fragment in Relay with GraphQL\nDESCRIPTION: This code snippet defines an updatable fragment named `StoryLikeButton_updatable` for the `Story` type. The `@updatable` directive indicates that this fragment is used for reading and writing data in the local Relay store. It specifies the fields `likeCount` and `doesViewerLike` to be included in the fragment.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/tutorial/mutations-updates.md#2025-04-18_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nfunction StoryLikeButton({story}) {\n  ...\n      optimisticUpdater: store => {\n        const fragment = graphql`\n          fragment StoryLikeButton_updatable on Story\n            // color1\n            @updatable\n          {\n            likeCount\n            doesViewerLike\n          }\n        `;\n      },\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a GraphQL Query in Relay\nDESCRIPTION: This snippet demonstrates how to define a GraphQL query that requests user data and includes a fragment. The query takes an ID variable and returns user information and viewer data.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v13.0.0/guided-tour/rendering/queries.md#2025-04-18_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nquery UserQuery($id: ID!) {\n  user(id: $id) {\n    id\n    name\n    ...UserFragment\n  }\n  viewer {\n    actor {\n      name\n    }\n  }\n}\n\nfragment UserFragment on User {\n  username\n}\n```\n\n----------------------------------------\n\nTITLE: Paginated Newsfeed Component Implementation\nDESCRIPTION: React component implementation for infinite scrolling newsfeed using Relay pagination hooks\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/tutorial/connections-pagination.md#2025-04-18_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nfunction Newsfeed() {\n  const queryData = useLazyLoadQuery<NewsfeedQueryType>(\n    NewsfeedQuery,\n    {},\n  );\n  const {data, loadNext} = usePaginationFragment(NewsfeedContentsFragment, queryData);\n  const storyEdges = data.viewer.newsfeedStories.edges;\n  return (\n    <div className=\"newsfeed\">\n      {storyEdges.map(storyEdge =>\n        <Story key={storyEdge.node.id} story={storyEdge.node} />\n      )}\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing React Relay Query Loading with usePreloadedQuery\nDESCRIPTION: Example showing how to use usePreloadedQuery and useQueryLoader hooks to implement the render-as-you-fetch pattern in React Relay. The code demonstrates loading and displaying user data with proper suspense handling and type safety.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/api-reference/hooks/use-preloaded-query.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport type {AppQueryType} from 'AppQueryType.graphql';\n\nconst React = require('React');\n\nconst {graphql, useQueryLoader, usePreloadedQuery} = require('react-relay');\n\nconst AppQuery = graphql`\n  query AppQuery($id: ID!) {\n    user(id: $id) {\n      name\n    }\n  }\n`;\n\ntype Props = {\n  initialQueryRef: PreloadedQuery<AppQueryType>,\n};\n\nfunction NameLoader(props) {\n  const [queryReference, loadQuery] = useQueryLoader(\n    AppQuery,\n    props.initialQueryRef, /* e.g. provided by router */\n  );\n\n  return (<>\n    <Button\n      onClick={() => loadQuery({id: '4'})}\n      disabled={queryReference != null}\n    >\n      Reveal your name!\n    </Button>\n    <Suspense fallback=\"Loading...\">\n      {queryReference != null\n        ? <NameDisplay queryReference={queryReference} />\n        : null\n      }\n    </Suspense>\n  </>);\n}\n\nfunction NameDisplay({ queryReference }) {\n  const data = usePreloadedQuery(AppQuery, queryReference);\n\n  return <h1>{data.user?.name}</h1>;\n}\n```\n\n----------------------------------------\n\nTITLE: Setting up RelayEnvironmentProvider\nDESCRIPTION: This snippet demonstrates how to use the `RelayEnvironmentProvider` component to set a Relay environment in React Context. The `fetchFunction` handles GraphQL requests, `createEnvironment` sets up the Relay environment, and the `Root` component wraps the `App` with the provider, making the Relay environment available to all its descendants.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/api-reference/hooks/relay-environment-provider.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst React = require('React');\nconst {\n  Store,\n  RecordSource,\n  Environment,\n  Network,\n  Observable,\n} = require(\"relay-runtime\");\n\nconst {RelayEnvironmentProvider} = require('react-relay');\n\n/**\n * Custom fetch function to handle GraphQL requests for a Relay environment.\n *\n * This function is responsible for sending GraphQL requests over the network and returning\n * the response data. It can be customized to integrate with different network libraries or\n * to add authentication headers as needed.\n *\n * @param {RequestParameters} params - The GraphQL request parameters to send to the server.\n * @param {Variables} variables - Variables used in the GraphQL query.\n */\nfunction fetchFunction(params, variables) {\n  const response = fetch(\"http://my-graphql/api\", {\n    method: \"POST\",\n    headers: [[\"Content-Type\", \"application/json\"]],\n    body: JSON.stringify({\n      query: params.text,\n      variables,\n    }),\n  });\n\n  return Observable.from(response.then((data) => data.json()));\n};\n\n/**\n * Creates a new Relay environment instance for managing (fetching, storing) GraphQL data.\n */\nfunction createEnvironment() {\n  const network = Network.create(fetchFunction);\n  const store = new Store(new RecordSource());\n  return new Environment({ store, network });\n}\n\nconst environment = createEnvironment();\n\nfunction Root() {\n  return (\n    <RelayEnvironmentProvider environment={environment}>\n      <App />\n    </RelayEnvironmentProvider>\n  );\n}\n\nmodule.exports = Root;\n```\n\n----------------------------------------\n\nTITLE: Committing Mutation with Relay in JavaScript\nDESCRIPTION: This code snippet demonstrates how to use the commitMutation function from React Relay to manually execute a GraphQL mutation. The snippet imports necessary modules and defines the likeFeedback function, which commits a mutation using the provided environment and input variables. The mutation updates the feedback status and returns a Disposable object, which can be used to manage the request lifecycle. Dependencies include React and react-relay.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/api-reference/relay-runtime/commit-mutation.md#2025-04-18_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport type {FeedbackLikeMutation} from 'FeedbackLikeMutation.graphql';\nconst React = require('React');\n\nconst {graphql, commitMutation} = require('react-relay');\n\nfunction likeFeedback(environment: IEnvironment): Disposable {\n  return commitMutation<FeedbackLikeMutation>(environment, {\n    mutation: graphql`\n      mutation FeedbackLikeMutation($input: FeedbackLikeData!) {\n        feedback_like(data: $input) {\n          feedback {\n            id\n            viewer_does_like\n            like_count\n          }\n        }\n      }\n    `,\n    variables: {\n      input: {\n        id: '123',\n      },\n    },\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing RefetchableFragment in React Relay\nDESCRIPTION: Example showing how to implement a refetchable fragment in a React component using the useRefetchableFragment hook. The component displays comment body text and allows translating it to Spanish via refetch.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/api-reference/hooks/use-refetchable-fragment.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport type {CommentBody_comment$key} from 'CommentBody_comment.graphql';\n\nconst React = require('React');\n\nconst {graphql, useRefetchableFragment} = require('react-relay');\n\n\ntype Props = {\n  comment: CommentBody_comment$key,\n};\n\nfunction CommentBody(props: Props) {\n  const [data, refetch] = useRefetchableFragment(\n    graphql`\n      fragment CommentBody_comment on Comment\n      @refetchable(queryName: \"CommentBodyRefetchQuery\") {\n        body(lang: $lang) {\n          text\n        }\n      }\n    `,\n    props.comment,\n  );\n\n  return (\n    <>\n      <p>{data.body?.text}</p>\n      <Button\n        onClick={() => {\n          refetch({lang: 'SPANISH'}, {fetchPolicy: 'store-or-network'})\n        }}\n      >\n        Translate Comment\n      </Button>\n    </>\n  );\n}\n\nmodule.exports = CommentBody;\n```\n\n----------------------------------------\n\nTITLE: Initializing Relay Query with useQueryLoader and usePreloadedQuery\nDESCRIPTION: Demonstrates how to use useQueryLoader to load a query and usePreloadedQuery to render data with Suspense support\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/api-reference/hooks/use-preloaded-query.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport type {AppQueryType} from 'AppQueryType.graphql';\n\nconst React = require('React');\n\nconst {graphql, useQueryLoader, usePreloadedQuery} = require('react-relay');\n\nconst AppQuery = graphql`\n  query AppQuery($id: ID!) {\n    user(id: $id) {\n      name\n    }\n  }`\n```\n\nLANGUAGE: javascript\nCODE:\n```\nfunction NameLoader(props) {\n  const [queryReference, loadQuery] = useQueryLoader(\n    AppQuery,\n    props.initialQueryRef, /* e.g. provided by router */\n  );\n\n  return (<>\n    <Button\n      onClick={() => loadQuery({id: '4'})}\n      disabled={queryReference != null}\n    >\n      Reveal your name!\n    </Button>\n    <Suspense fallback=\"Loading...\">\n      {queryReference != null\n        ? <NameDisplay queryReference={queryReference} />\n        : null\n      }\n    </Suspense>\n  </>);\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nfunction NameDisplay({ queryReference }) {\n  const data = usePreloadedQuery(AppQuery, queryReference);\n\n  return <h1>{data.user?.name}</h1>;\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Friends List Component with Pagination\nDESCRIPTION: This snippet shows the implementation of a React component that utilizes the `usePaginationFragment` hook to render a user's friends list with pagination support. It includes handling of the loading state through the Suspense component.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v13.0.0/guided-tour/list-data/rendering-connections.md#2025-04-18_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport type {FriendsListPaginationQuery} from 'FriendsListPaginationQuery.graphql';\nimport type {FriendsListComponent_user$key} from 'FriendsList_user.graphql';\n\nconst React = require('React');\nconst {Suspense} = require('React');\n\nconst {graphql, usePaginationFragment} = require('react-relay');\n\ntype Props = {\n  user: FriendsListComponent_user$key,\n};\n\nfunction FriendsListComponent(props: Props) {\n  const {data} = usePaginationFragment<FriendsListPaginationQuery, _>(\n    graphql`\n      fragment FriendsListComponent_user on User\n      @refetchable(queryName: \"FriendsListPaginationQuery\") {\n        name\n        friends(first: $count, after: $cursor)\n        @connection(key: \"FriendsList_user_friends\") {\n          edges {\n            node {\n              ...FriendComponent\n            }\n          }\n        }\n      }\n    `,\n    props.user,\n  );\n\n  return (\n    <>\n      {data.name != null ? <h1>Friends of {data.name}:</h1> : null}\n\n      <div>\n        {/* Extract each friend from the resulting data */}\n        {(data.friends?.edges ?? []).map(edge => {\n          const node = edge.node;\n          return (\n            <Suspense fallback={<Glimmer />}>\n              <FriendComponent user={node} />\n            </Suspense>\n          );\n        })}\n      </div>\n    </>\n  );\n}\n\nmodule.exports = FriendsListComponent;\n```\n\n----------------------------------------\n\nTITLE: Configuring Network Layer with graphql-ws for GraphQL Subscriptions in Relay\nDESCRIPTION: This snippet demonstrates how to configure the Network Layer using the graphql-ws library to handle GraphQL subscriptions over WebSockets. It creates a WebSocket client and defines a subscribe function that uses the client to handle subscription operations.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v13.0.0/guided-tour/updating-data/graphql-subscriptions.md#2025-04-18_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport {\n    ...\n    Network,\n    Observable\n} from 'relay-runtime';\nimport { createClient } from 'graphql-ws';\n\nconst wsClient = createClient({\n  url:'ws://localhost:3000',\n});\n\nconst subscribe = (operation, variables) => {\n  return Observable.create((sink) => {\n    return wsClient.subscribe(\n      {\n        operationName: operation.name,\n        query: operation.text,\n        variables,\n      },\n      sink,\n    );\n  });\n}\n\nconst network = Network.create(fetchQuery, subscribe);\n```\n\n----------------------------------------\n\nTITLE: Parent Fragment Component Implementation\nDESCRIPTION: Implementation of a parent component (UserComponent) that composes child fragments and renders child components. Shows fragment composition and data passing.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/guided-tour/rendering/fragments.md#2025-04-18_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * UserComponent.react.js\n *\n * Parent Fragment Component\n */\n\nimport type {UserComponent_user$key} from 'UserComponent_user.graphql';\n\nconst React = require('React');\nconst {graphql, useFragment} = require('react-relay');\n\nconst UsernameSection = require('./UsernameSection.react');\n\ntype Props = {\n  user: UserComponent_user$key,\n};\n\nfunction UserComponent(props: Props) {\n  const user = useFragment(\n    graphql`\n      fragment UserComponent_user on User {\n        name\n        age\n        profile_picture(scale: 2) {\n          uri\n        }\n\n        # Include child fragment:\n        ...UsernameSection_user\n      }\n    `,\n    props.user,\n  );\n\n  return (\n    <>\n      <h1>{user.name}</h1>\n      <div>\n        <img src={user.profile_picture?.uri} />\n        {user.age}\n\n        {/* Render child component, passing the _fragment reference_: */}\n        <UsernameSection user={user} />\n      </div>\n    </>\n  );\n}\n\nmodule.exports = UserComponent;\n```\n\n----------------------------------------\n\nTITLE: Implementing Streaming Pagination with Relay in JavaScript\nDESCRIPTION: This snippet demonstrates how to implement streaming pagination using the usePaginationFragment hook from Relay. The example shows a component FriendsListComponent that fetches user data with incremental delivery, enabling interaction with initial items while others are gradually loaded. Required dependencies include React and react-relay. The items are streamed using the @stream_connection directive, which accepts parameters like initial_count to control the initial payload size and subsequent streaming behavior.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v13.0.0/guided-tour/list-data/streaming-pagination.md#2025-04-18_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport type {FriendsListPaginationQuery} from 'FriendsListPaginationQuery.graphql';\nimport type {FriendsListComponent_user$key} from 'FriendsList_user.graphql';\n\nconst React = require('React');\n\nconst {graphql, usePaginationFragment} = require('react-relay');\n\ntype Props = {\n  user: FriendsListComponent_user$key,\n};\n\nfunction FriendsListComponent(props: Props) {\n  // ...\n\n  const {\n    data,\n    loadNext,\n    hasNext,\n  } = usePaginationFragment<FriendsListPaginationQuery, _>(\n    graphql`\n      fragment FriendsListComponent_user on User\n      @refetchable(queryName: \"FriendsListPaginationQuery\") {\n        name\n        friends(first: $count, after: $cursor)\n        @stream_connection(key: \"FriendsList_user_friends\", initial_count: 2,) {\n          edges {\n            node {\n              name\n              age\n            }\n          }\n        }\n      }\n    `,\n    props.user,\n  );\n\n  return (...);\n}\n\nmodule.exports = FriendsListComponent;\n```\n\n----------------------------------------\n\nTITLE: Query Component in Relay with usePreloadedQuery\nDESCRIPTION: This code defines a query component `HomeTab` that uses Relay's `usePreloadedQuery` hook to fetch data. The query `HomeTabQuery` fetches the `name` and includes the `UsernameComponent_user` fragment.  The component renders the user's `name` and the `UsernameComponent`.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/guided-tour/reusing-cached-data/rendering-partially-cached-data.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * HomeTab.react.js\n *\n * Query Component\n */\n\nconst React = require('React');\nconst {graphql, usePreloadedQuery} = require('react-relay');\n\nconst UsernameComponent = require('./UsernameComponent.react');\n\nfunction HomeTab(props: Props) {\n  const data = usePreloadedQuery(\n    graphql`\n      query HomeTabQuery($id: ID!) {\n        user(id: $id) {\n          name\n          ...UsernameComponent_user\n        }\n      }\n    `,\n    props.queryRef,\n  );\n\n  return (\n    <>\n      <h1>{data.user?.name}</h1>\n      <UsernameComponent user={data.user} />\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing RelayEnvironmentProvider in React Application\nDESCRIPTION: Complete example showing how to set up a RelayEnvironmentProvider at the root of a React application. Includes creation of a custom fetch function for GraphQL requests, environment setup, and provider implementation.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/api-reference/hooks/relay-environment-provider.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst React = require('React');\nconst {\n  Store,\n  RecordSource,\n  Environment,\n  Network,\n  Observable,\n} = require(\"relay-runtime\");\n\nconst {RelayEnvironmentProvider} = require('react-relay');\n\n/**\n * Custom fetch function to handle GraphQL requests for a Relay environment.\n *\n * This function is responsible for sending GraphQL requests over the network and returning\n * the response data. It can be customized to integrate with different network libraries or\n * to add authentication headers as needed.\n *\n * @param {RequestParameters} params - The GraphQL request parameters to send to the server.\n * @param {Variables} variables - Variables used in the GraphQL query.\n */\nfunction fetchFunction(params, variables) {\n  const response = fetch(\"http://my-graphql/api\", {\n    method: \"POST\",\n    headers: [[\"Content-Type\", \"application/json\"]],\n    body: JSON.stringify({\n      query: params.text,\n      variables,\n    }),\n  });\n\n  return Observable.from(response.then((data) => data.json()));\n};\n\n/**\n * Creates a new Relay environment instance for managing (fetching, storing) GraphQL data.\n */\nfunction createEnvironment() {\n  const network = Network.create(fetchFunction);\n  const store = new Store(new RecordSource());\n  return new Environment({ store, network });\n}\n\nconst environment = createEnvironment();\n\nfunction Root() {\n  return (\n    <RelayEnvironmentProvider environment={environment}>\n      <App />\n    </RelayEnvironmentProvider>\n  );\n}\n\nmodule.exports = Root;\n```\n\n----------------------------------------\n\nTITLE: Implementing usePaginationFragment Hook in Relay\nDESCRIPTION: This snippet shows how to replace useFragment with usePaginationFragment to implement pagination. The hook returns both the data and a loadNext function that can be used to load more items when needed.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/tutorial/connections-pagination.md#2025-04-18_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\nconst data = useFragment(StoryCommentsSectionFragment, story);\nconst onLoadMore = () => {/* TODO */};\n```\n\nLANGUAGE: jsx\nCODE:\n```\nconst {data, loadNext} = usePaginationFragment(StoryCommentsSectionFragment, story);\nconst onLoadMore = () => loadNext(3);\n```\n\n----------------------------------------\n\nTITLE: Using useFragment Hook in Relay\nDESCRIPTION: Example of how to use the useFragment hook to read fragment data from the Relay store. This component receives a fragment reference as a prop, uses the hook to read the corresponding data, and renders it. The component will automatically re-render if the User data changes.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/api-reference/hooks/use-fragment.md#2025-04-18_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nimport type {UserComponent_user$key} from 'UserComponent_user.graphql';\n\nconst React = require('React');\n\nconst {graphql, useFragment} = require('react-relay');\n\ntype Props = {\n  user: UserComponent_user$key,\n};\n\nfunction UserComponent(props: Props) {\n  const data = useFragment(\n    graphql`\n      fragment UserComponent_user on User {\n        name\n        profile_picture(scale: 2) {\n          uri\n        }\n      }\n    `,\n    props.user,\n  );\n\n  return (\n    <>\n      <h1>{data.name}</h1>\n      <div>\n        <img src={data.profile_picture?.uri} />\n      </div>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Query Component with Suspense in Relay\nDESCRIPTION: Shows how to create a query component in Relay that can suspend, and how to wrap it with Suspense to handle loading states.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/guided-tour/rendering/loading-states.md#2025-04-18_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nconst React = require('React');\nconst {graphql, usePreloadedQuery} = require('react-relay');\n\nfunction MainContent(props) {\n  // Fetch and render a query\n  const data = usePreloadedQuery(\n    graphql`...`,\n    props.queryRef,\n  );\n\n  return (...);\n}\n```\n\nLANGUAGE: jsx\nCODE:\n```\nconst React = require('React');\nconst {Suspense} = require('React');\n\nfunction App() {\n  return (\n    // LoadingGlimmer is rendered via the Suspense fallback\n    <Suspense fallback={<LoadingGlimmer />}>\n      <MainContent /> {/* MainContent may suspend */}\n    </Suspense>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Streaming Pagination with usePaginationFragment in Relay\nDESCRIPTION: This code snippet demonstrates how to use the usePaginationFragment hook with the @stream_connection directive to implement streaming pagination. It shows the fragment definition and how to use the returned data and pagination functions.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/guided-tour/list-data/streaming-pagination.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport type {FriendsListComponent_user$key} from 'FriendsList_user.graphql';\n\nconst React = require('React');\n\nconst {graphql, usePaginationFragment} = require('react-relay');\n\ntype Props = {\n  user: FriendsListComponent_user$key,\n};\n\nfunction FriendsListComponent(props: Props) {\n  // ...\n\n  const {\n    data,\n    loadNext,\n    hasNext,\n  } = usePaginationFragment(\n    graphql`\n      fragment FriendsListComponent_user on User\n      @refetchable(queryName: \"FriendsListPaginationQuery\") {\n        name\n        friends(first: $count, after: $cursor)\n        @stream_connection(key: \"FriendsList_user_friends\", initial_count: 2,) {\n          edges {\n            node {\n              name\n              age\n            }\n          }\n        }\n      }\n    `,\n    props.user,\n  );\n\n  return (...);\n}\n\nmodule.exports = FriendsListComponent;\n```\n\n----------------------------------------\n\nTITLE: Implementing useSubscription in React\nDESCRIPTION: This snippet demonstrates how to use the `useSubscription` hook from `react-relay` to subscribe to a GraphQL subscription. It includes defining the subscription using `graphql`, memoizing the configuration, and calling `useSubscription` with the config. The component automatically subscribes upon mounting and unsubscribes upon unmounting, handling subscription lifecycle management.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/api-reference/hooks/use-subscription.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport {graphql, useSubscription} from 'react-relay';\nimport {useMemo} from 'react';\n\nconst subscription = graphql`\n  subscription UserDataSubscription($input: InputData!) {\n    # ...\n  }\n`;\n\nfunction UserComponent({ id }) {\n  // IMPORTANT: your config should be memoized.\n  // Otherwise, useSubscription will re-render too frequently.\n  const config = useMemo(() => ({\n    variables: {id},\n    subscription,\n  }), [id, subscription]);\n\n  useSubscription(config);\n\n  return (/* ... */);\n}\n```\n\n----------------------------------------\n\nTITLE: Using Pagination Fragment with Stream Connection in Relay (JavaScript)\nDESCRIPTION: This code snippet demonstrates how to implement a React component that uses Relay's `usePaginationFragment` to manage a user's friends list. It employs the `@stream_connection` directive to fetch items incrementally, allowing for a more responsive user interface by displaying items as they are ready. The component manages pagination and updates automatically as new items are streamed.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/guided-tour/list-data/streaming-pagination.md#2025-04-18_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport type {FriendsListComponent_user$key} from 'FriendsList_user.graphql';\n\nconst React = require('React');\n\nconst {graphql, usePaginationFragment} = require('react-relay');\n\ntype Props = {\n  user: FriendsListComponent_user$key,\n};\n\nfunction FriendsListComponent(props: Props) {\n  // ...\n\n  const {\n    data,\n    loadNext,\n    hasNext,\n  } = usePaginationFragment(\n    graphql`\n      fragment FriendsListComponent_user on User\n      @refetchable(queryName: \"FriendsListPaginationQuery\") {\n        name\n        friends(first: $count, after: $cursor)\n        @stream_connection(key: \"FriendsList_user_friends\", initial_count: 2,) {\n          edges {\n            node {\n              name\n              age\n            }\n          }\n        }\n      }\n    `,\n    props.user,\n  );\n\n  return (...);\n}\n\nmodule.exports = FriendsListComponent;\n```\n\n----------------------------------------\n\nTITLE: GraphQL Query with Variable Definition\nDESCRIPTION: Modified GraphQL query that accepts a posterID variable\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/tutorial/queries-2.md#2025-04-18_snippet_3\n\nLANGUAGE: graphql\nCODE:\n```\nconst PosterDetailsHovercardContentsQuery = graphql`\n  query PosterDetailsHovercardContentsQuery(\n    $posterID: ID!\n  ) {\n    node(id: \"1\") {\n      ... on Actor {\n        ...PosterDetailsHovercardContentsBodyFragment\n      }\n    }\n  }\n`;\n```\n\n----------------------------------------\n\nTITLE: Querying GraphQL Data with Operation Variables in TypeScript\nDESCRIPTION: This code demonstrates how Relay generates TypeScript types for a GraphQL query with variables. The generated types enforce that the variables object contains the required 'artistID' field with a non-null string value.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/guides/type-emission.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * export type ExampleQuery$variables = {\n *   readonly artistID: string\n * }\n * export type ExampleQuery$data = {\n *   readonly artist?: {\n *     readonly name?: string\n *   }\n * }\n * export type ExampleQuery = {\n *   readonly variables: ExampleQuery$variables\n *   readonly response: ExampleQuery$data\n * }\n */\nconst data = useLazyLoadQuery(\n  graphql`\n    query ExampleQuery($artistID: ID!) {\n      artist(id: $artistID) {\n        name\n      }\n    }\n  `,\n  // variables are expected to be of type ExampleQuery$variables\n  {artistID: 'banksy'},\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Pagination Hooks in React Component\nDESCRIPTION: Shows how to use usePaginationFragment and useTransition hooks to handle pagination loading states.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/tutorial/connections-pagination.md#2025-04-18_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nfunction StoryCommentsSection({story}) {\n  const [isPending, startTransition] = useTransition();\n  const {data, loadNext} = usePaginationFragment(StoryCommentsSectionFragment, story);\n  const onLoadMore = () => startTransition(() => {\n    loadNext(3);\n  });\n  return (\n    <>\n      {data.comments.edges.map(commentEdge =>\n        <Comment comment={commentEdge.node} />\n      )}\n      {data.comments.pageInfo.hasNextPage && (\n        <LoadMoreCommentsButton\n          onClick={onLoadMore}\n          disabled={isPending}\n        />\n      )}\n      {isPending && <CommentsLoadingSpinner />}\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Relay Query in React Component\nDESCRIPTION: Complete implementation of a React component that fetches repository data using Relay. Shows setup of RelayEnvironmentProvider, query definition, data preloading, and component rendering with Suspense support.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/getting-started/step-by-step-guide.md#2025-04-18_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nimport React from 'react';\nimport './App.css';\nimport graphql from 'babel-plugin-relay/macro';\nimport {\n  RelayEnvironmentProvider,\n  loadQuery,\n  usePreloadedQuery,\n} from 'react-relay/hooks';\nimport RelayEnvironment from './RelayEnvironment';\n\nconst { Suspense } = React;\n\n// Define a query\nconst RepositoryNameQuery = graphql`\n  query AppRepositoryNameQuery {\n    repository(owner: \"facebook\", name: \"relay\") {\n      name\n    }\n  }\n`;\n\n// Immediately load the query as our app starts. For a real app, we'd move this\n// into our routing configuration, preloading data as we transition to new routes.\nconst preloadedQuery = loadQuery(RelayEnvironment, RepositoryNameQuery, {\n  /* query variables */\n});\n\n// Inner component that reads the preloaded query results via `usePreloadedQuery()`.\n// This works as follows:\n// - If the query has completed, it returns the results of the query.\n// - If the query is still pending, it \"suspends\" (indicates to React that the\n//   component isn't ready to render yet). This will show the nearest <Suspense>\n//   fallback.\n// - If the query failed, it throws the failure error. For simplicity we aren't\n//   handling the failure case here.\nfunction App(props) {\n  const data = usePreloadedQuery(RepositoryNameQuery, props.preloadedQuery);\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <p>{data.repository.name}</p>\n      </header>\n    </div>\n  );\n}\n\n// The above component needs to know how to access the Relay environment, and we\n// need to specify a fallback in case it suspends:\n// - <RelayEnvironmentProvider> tells child components how to talk to the current\n//   Relay Environment instance\n// - <Suspense> specifies a fallback in case a child suspends.\nfunction AppRoot(props) {\n  return (\n    <RelayEnvironmentProvider environment={RelayEnvironment}>\n      <Suspense fallback={'Loading...'}>\n        <App preloadedQuery={preloadedQuery} />\n      </Suspense>\n    </RelayEnvironmentProvider>\n  );\n}\n\nexport default AppRoot;\n```\n\n----------------------------------------\n\nTITLE: Creating a New Edge from Scratch in Relay Store\nDESCRIPTION: Demonstrates how to create a new edge locally without server data. The code creates a new Comment record with a client-generated ID and constructs an edge that can be added to a connection.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/guided-tour/list-data/updating-connections.md#2025-04-18_snippet_8\n\nLANGUAGE: js\nCODE:\n```\nconst {ConnectionHandler} = require('relay-runtime');\n\nfunction updater(store: RecordSourceSelectorProxy) {\n  const storyRecord = store.get(storyID);\n  const connectionRecord = ConnectionHandler.getConnection(\n    storyRecord,\n    'StoryComponent_story_comments_connection',\n  );\n\n  // Create a new local Comment record\n  const id = `client:new_comment:${randomID()}`;\n  const newCommentRecord = store.create(id, 'Comment');\n\n  // Create new edge\n  const newEdge = ConnectionHandler.createEdge(\n    store,\n    connectionRecord,\n    newCommentRecord,\n    'CommentEdge', /* GraphQl Type for edge */\n  );\n\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Infinite Scroll in React with Relay usePaginationFragment\nDESCRIPTION: Implementation of a NewsfeedContents component that uses Relay's usePaginationFragment hook to handle pagination. The component uses an InfiniteScrollTrigger to detect when the user reaches the bottom of the page and loads more content. It handles loading states and pagination data through the hasNext and isLoadingNext flags.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/tutorial/connections-pagination.md#2025-04-18_snippet_12\n\nLANGUAGE: jsx\nCODE:\n```\nfunction NewsfeedContents({query}) {\n  const {\n    data,\n    loadNext,\n    hasNext,\n    isLoadingNext,\n  } = usePaginationFragment(NewsfeedContentsFragment, query);\n\n  function onEndReached() {\n    loadNext(3);\n  }\n  const storyEdges = data.viewer.newsfeedStories.edges;\n  return (\n    <>\n      {storyEdges.map(storyEdge =>\n        <Story key={storyEdge.node.id} story={storyEdge.node} />\n      )}\n      <InfiniteScrollTrigger\n        onEndReached={onEndReached}\n        hasNext={hasNext}\n        isLoadingNext={isLoadingNext}\n      />\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using useFragment in React with Relay\nDESCRIPTION: This code snippet shows how to use the `useFragment` hook in a React component to read data from a Relay fragment.  It takes a `fragment key` as input and returns the data for the corresponding fragment.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/tutorial/fragments-1.md#2025-04-18_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useFragment } from 'react-relay';\nimport type { ImageFragment$key } from \"./__generated__/ImageFragment.graphql\";\n\ntype Props = {\n  image: ImageFragment$key;\n  ...\n};\n\nfunction Image({image}: Props) {\n  const data = useFragment(ImageFragment, image);\n  return <img key={data.url} src={data.url} ... />\n}\n```\n\n----------------------------------------\n\nTITLE: Suspense with Main Content Component\nDESCRIPTION: This code demonstrates how to use the React Suspense component to render a fallback UI (LoadingGlimmer) while the MainContent component is loading its data. The Suspense component wraps the MainContent component, and the fallback prop specifies the UI to display while the component is loading.  MainContent may suspend due to async data fetching.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/guided-tour/rendering/loading-states.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * App.react.js\n */\n\nconst React = require('React');\nconst {Suspense} = require('React');\n\nfunction App() {\n  return (\n    // LoadingGlimmer is rendered via the Suspense fallback\n    <Suspense fallback={<LoadingGlimmer />}>\n      <MainContent /> {/* MainContent may suspend */}\n    </Suspense>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Error State in Relay Component (JavaScript)\nDESCRIPTION: This snippet tests the error handling of a Relay component by simulating an error state in the mock environment. The queueOperationResolver is configured to throw an error, and the test checks for the presence of an error message in the component when the operation fails. This ensures that the component correctly handles and displays error states.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/guides/testing-relay-components.md#2025-04-18_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\ntest('Error State', () => {\n  const environment = createMockEnvironment();\n  environment.mock.queueOperationResolver(() =>\n    new Error('Uh-oh'),\n  );\n  const renderer = ReactTestRenderer.create(\n    <MyAwesomeViewRoot environment={environment} />, \n  );\n\n  expect(\n    renderer.root.find(item => (item.props.testID = 'errorMessage')),\n  ).toBeDefined();\n});\n```\n\n----------------------------------------\n\nTITLE: Rendering Queries with usePreloadedQuery in React\nDESCRIPTION: Demonstrates how to use the usePreloadedQuery hook to render data from a preloaded GraphQL query in a React component, with type checking and data subscription\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/guided-tour/rendering/queries.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nfunction HomeTab(props: Props) {\n  const data = usePreloadedQuery(\n    graphql`\n      query HomeTabQuery($id: ID!) {\n        user(id: $id) {\n          name\n        }\n      }\n    `,\n    props.queryRef,\n  );\n\n  return (\n    <h1>{data.user?.name}</h1>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using Fragment Data in React Component\nDESCRIPTION: Shows how to use the useFragment hook to read fragment data in a functional React component.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/principles-and-architecture/thinking-in-relay.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexport default function AuthorDetails(props) {\n  const data = useFragment(authorDetailsFragment, props.author);\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing useFragment Hook in React Component\nDESCRIPTION: Example showing how to use the useFragment hook to read and render User data. The component takes a fragment reference as a prop, uses it to read fragment data from the Relay store, and automatically subscribes to updates for that data.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/api-reference/hooks/use-fragment.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport type {UserComponent_user$key} from 'UserComponent_user.graphql';\n\nconst React = require('React');\n\nconst {graphql, useFragment} = require('react-relay');\n\ntype Props = {\n  user: UserComponent_user$key,\n};\n\nfunction UserComponent(props: Props) {\n  const data = useFragment(\n    graphql`\n      fragment UserComponent_user on User {\n        name\n        profile_picture(scale: 2) {\n          uri\n        }\n      }\n    `,\n    props.user,\n  );\n\n  return (\n    <>\n      <h1>{data.name}</h1>\n      <div>\n        <img src={data.profile_picture?.uri} />\n      </div>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: React Component with Relay Query Implementation\nDESCRIPTION: Updated React component using useLazyLoadQuery to fetch and display data from the GraphQL server.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/tutorial/queries-1.md#2025-04-18_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useLazyLoadQuery } from \"react-relay\";\n\nexport default function Newsfeed({}) {\n  const data = useLazyLoadQuery(\n    NewsfeedQuery,\n    {},\n  );\n  const story = data.topStory;\n  return (\n    <div className=\"newsfeed\">\n      <Story story={story} />\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a GraphQL Mutation\nDESCRIPTION: Example of a GraphQL mutation that likes a feedback object. The mutation takes input data and returns updated information about the feedback object including the id, viewer_does_like status, and updated like_count.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v13.0.0/guided-tour/updating-data/graphql-mutations.md#2025-04-18_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nmutation FeedbackLikeMutation($input: FeedbackLikeData!) {\n  feedback_like(data: $input) {\n    feedback {\n      id\n      viewer_does_like\n      like_count\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Queries with useQueryLoader in React\nDESCRIPTION: Shows how to use the useQueryLoader hook to manage query loading, fetch data on demand, and handle query references in a React component\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/guided-tour/rendering/queries.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nfunction AppTabs(props) {\n  const [\n    homeTabQueryRef,\n    loadHomeTabQuery,\n  ] = useQueryLoader(\n    HomeTabQuery,\n    props.initialQueryRef,\n  );\n\n  const onSelectHomeTab = () => {\n    loadHomeTabQuery({id: '4'});\n  }\n\n  return (\n    screen === 'HomeTab' && homeTabQueryRef != null ?\n      <HomeTab queryRef={homeTabQueryRef} /> :\n      // ...\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Fragment Arguments with @argumentDefinitions\nDESCRIPTION: Shows how to specify arguments that a fragment can accept using the @argumentDefinitions directive.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/api-reference/graphql/graphql-directives.md#2025-04-18_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\nfragment TodoList_list on TodoList\n@argumentDefinitions(\n  count: {type: \"Int\", defaultValue: 10} # Optional argument\n  userID: {type: \"ID\"} # Required argument\n) {\n  title\n  todoItems(userID: $userID, first: $count) {\n    # Use fragment arguments here as variables\n    ...TodoItem_item\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up GraphQL Subscriptions with graphql-ws\nDESCRIPTION: This snippet demonstrates how to configure a WebSocket client using the graphql-ws library to handle GraphQL subscriptions in Relay. It establishes a connection to a WebSocket server and creates a subscription function that integrates with Relay's network layer.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/guided-tour/updating-data/graphql-subscriptions.md#2025-04-18_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport {\\n    ...\\n    Network,\\n    Observable\\n} from 'relay-runtime';\\nimport { createClient } from 'graphql-ws';\\n\\nconst wsClient = createClient({\\n  url:'ws://localhost:3000',\\n});\\n\\nconst subscribe = (operation, variables) => {\\n  return Observable.create((sink) => {\\n    return wsClient.subscribe(\\n      {\\n        operationName: operation.name,,\\n        query: operation.text,\\n        variables,\\n      },\\n      sink,\\n    );\\n  });\\n}\\n\\nconst network = Network.create(fetchQuery, subscribe);\n```\n\n----------------------------------------\n\nTITLE: Using __typename with @required in Inline Fragments\nDESCRIPTION: Improved version using __typename to enable type narrowing, allowing safe access to @required fields in inline fragments.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/guides/required-directive.md#2025-04-18_snippet_8\n\nLANGUAGE: graphql\nCODE:\n```\nfragment MyFrag on Actor {\n  __typename\n  ... on User {\n    name @required(action: THROW)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Local Update for Best Friends List in React and Relay\nDESCRIPTION: This React component demonstrates how to use assignable fragments to update a list of best friends locally in Relay. It includes fragment definitions and a local update function.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/guided-tour/updating-data/imperatively-modifying-linked-fields.md#2025-04-18_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n// AssignBestFriendButton.react.js\nimport type {AssignBestFriendButton_user$key} from 'AssignBestFriendButton_user.graphql';\nimport type {AssignBestFriendButton_viewer$key} from 'AssignBestFriendButton_viewer';\n\nimport type {RecordSourceSelectorProxy} from 'react-relay';\n\nconst {commitLocalUpdate, useFragment, useRelayEnvironment} = require('react-relay');\n\ngraphql`\n  fragment AssignBestFriendButton_assignable_user on User @assignable {\n    __typename\n  }\n`;\n\nexport default function AssignBestFriendButton({\n  someTypeRef: AssignBestFriendButton_someType$key,\n  viewerFragmentRef: AssignBestFriendButton_viewer$key,\n}) {\n  const data = useFragment(graphql`\n    fragment AssignBestFriendButton_someType on SomeType {\n      user {\n        name\n        ...AssignableBestFriendButton_assignable_user\n      }\n    }\n  `, someTypeRef);\n\n  const viewer = useFragment(graphql`\n    fragment AssignBestFriendButton_viewer on Viewer {\n      best_friends {\n        ...AssignableBestFriendButton_assignable_user\n      }\n    }\n  `, viewerRef);\n\n  const environment = useRelayEnvironment();\n  const onClick = () => {\n    commitLocalUpdate(\n      environment,\n      (store: RecordSourceSelectorProxy) => {\n        const {updatableData} = store.readUpdatableQuery(\n            graphql`\n              query AssignBestFriendButtonUpdatableQuery\n              @updatable {\n                viewer {\n                  best_friends {\n                    ...AssignableBestFriendButton_assignable_user\n                  }\n                }\n              }\n            `,\n            {}\n          );\n\n        if (data.user != null && updatableData.viewer != null && viewer.best_friends != null) {\n          updatableData.viewer.best_friends = [\n            ...viewer.best_friends,\n            data.user,\n          ];\n        }\n      }\n    );\n  };\n\n  return (<button onClick={onClick}>\n    Add {user.name ?? 'someone with no name'} to my list of best friends!\n  </button>);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Suspense Fallback in React\nDESCRIPTION: Basic example of using React Suspense to render a fallback loading state when a component suspends. The Suspense component wraps a component that might suspend and displays a loading glimmer until the component is ready.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v13.0.0/guided-tour/rendering/loading-states.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst React = require('React');\nconst {Suspense} = require('React');\n\nfunction App() {\n  return (\n    // Render a fallback using Suspense as a wrapper\n    <Suspense fallback={<LoadingGlimmer />}>\n      <CanSuspend />\n    </Suspense>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating New Edge from Scratch in Relay Store\nDESCRIPTION: This example shows how to create a new edge from scratch using ConnectionHandler.createEdge when the edge is not provided in the mutation response. It creates a new local Comment record and constructs an edge for it.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/guided-tour/list-data/updating-connections.md#2025-04-18_snippet_8\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst {ConnectionHandler} = require('relay-runtime');\n\nfunction updater(store: RecordSourceSelectorProxy) {\n  const storyRecord = store.get(storyID);\n  const connectionRecord = ConnectionHandler.getConnection(\n    storyRecord,\n    'StoryComponent_story_comments_connection',\n  );\n\n  // Create a new local Comment record\n  const id = `client:new_comment:${randomID()}`;\n  const newCommentRecord = store.create(id, 'Comment');\n\n  // Create new edge\n  const newEdge = ConnectionHandler.createEdge(\n    store,\n    connectionRecord,\n    newCommentRecord,\n    'CommentEdge', /* GraphQl Type for edge */\n  );\n\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing RelayEnvironmentProvider in React\nDESCRIPTION: This snippet demonstrates how to set up the RelayEnvironmentProvider at the root of a React application. It imports the necessary components and wraps the app with the provider, passing in the Relay environment.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/guided-tour/rendering/environment.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// App root\n\nconst {RelayEnvironmentProvider} = require('react-relay');\nconst Environment = require('MyEnvironment');\n\nfunction Root() {\n  return (\n    <RelayEnvironmentProvider environment={Environment}>\n      {/*... */}\n    </RelayEnvironmentProvider>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Reading Data from the Relay Store\nDESCRIPTION: Diagram showing how components read data from the Relay store using lookup() to create a Snapshot. The Snapshot contains the initial results of a fragment and is used for rendering and as input to subscribe().\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/principles-and-architecture/runtime-architecture.md#2025-04-18_snippet_4\n\nLANGUAGE: text\nCODE:\n```\n    ┌───────────────────────┐       ┌──────────────┐\n    │     RecordSource      │       │              │\n    │                       │       │              │\n    │┌──────┐┌──────┐┌─────┐│       │   Selector   │\n    ││Record││Record││ ... ││       │              │\n    │└──────┘└──────┘└─────┘│       │              │\n    └───────────────────────┘       └──────────────┘\n                │                           │\n                │                           │\n                └──────────────┬────────────┘\n                               │\n                               │  lookup\n                               │  (read)\n                               │\n                               ▼\n                        ┌─────────────┐\n                        │             │\n                        │  Snapshot   │\n                        │             │\n                        └─────────────┘\n                               │\n                               │  render, etc\n                               │\n                               ▼\n```\n\n----------------------------------------\n\nTITLE: Modifying Updatable Data in Relay\nDESCRIPTION: This code snippet shows how to modify the data obtained from `store.readUpdatableFragment`.  It retrieves the `doesViewerLike` and `likeCount` fields from `updatableData`, toggles the `doesViewerLike` status, and updates the `likeCount` accordingly. These changes are then recorded by Relay and rolled back upon mutation completion.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/tutorial/mutations-updates.md#2025-04-18_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nfunction StoryLikeButton({story}) {\n  ...\n      optimisticUpdater: store => {\n        const fragment = graphql`\n          fragment StoryLikeButton_updatable on Story @updatable {\n            likeCount\n            doesViewerLike\n          }\n        `;\n        const {updatableData} = store.readUpdatableFragment(fragment, story);\n        // change\n        const alreadyLikes = updatableData.doesViewerLike;\n        updatableData.doesViewerLike = !alreadyLikes;\n        updatableData.likeCount += (alreadyLikes ? -1 : 1);\n        // end-change\n      },\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Using useLazyLoadQuery with React and Relay to fetch GraphQL data\nDESCRIPTION: Example demonstrating how to use the useLazyLoadQuery hook to fetch a GraphQL query during component render, providing variables and fetch policy options. The query retrieves a user's name by ID and renders it in an h1 element.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/api-reference/hooks/use-lazy-load-query.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst React = require('React');\n\nconst {graphql, useLazyLoadQuery} = require('react-relay');\n\nfunction App() {\n  const data = useLazyLoadQuery(\n    graphql`\n      query AppQuery($id: ID!) {\n        user(id: $id) {\n          name\n        }\n      }\n    `,\n    {id: 4},\n    {fetchPolicy: 'store-or-network'},\n  );\n\n return <h1>{data.user?.name}</h1>;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing useMutation Hook for Like Button\nDESCRIPTION: Complete example of a like button component that uses Relay's useMutation hook to execute a mutation, with proper typing and loading state management.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/guided-tour/updating-data/graphql-mutations.md#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport type {FeedbackLikeData, LikeButtonMutation} from 'LikeButtonMutation.graphql';\n\nconst {useMutation, graphql} = require('react-relay');\n\nfunction LikeButton({\n  feedbackId: string,\n}) {\n  const [commitMutation, isMutationInFlight] = useMutation<LikeButtonMutation>(\n    graphql`\n      mutation LikeButtonMutation($input: FeedbackLikeData!) {\n        feedback_like(data: $input) {\n          feedback {\n            viewer_does_like\n            like_count\n          }\n        }\n      }\n    `\n  );\n\n  return <button\n    onClick={() => commitMutation({\n      variables: {\n        input: {id: feedbackId},\n      },\n    })}\n    disabled={isMutationInFlight}\n  >\n    Like\n  </button>\n}\n```\n\n----------------------------------------\n\nTITLE: Using Error Boundary with Retry for useLazyLoadQuery\nDESCRIPTION: This example shows how to use an Error Boundary with retry functionality in a Relay application using useLazyLoadQuery. It demonstrates error handling and retry logic by updating the fetchKey.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/guided-tour/rendering/error-states.md#2025-04-18_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * App.react.js\n */\n\nconst ErrorBoundaryWithRetry = require('ErrorBoundaryWithRetry');\nconst React = require('React');\n\nconst MainContent = require('./MainContent.react');\n\n// NOTE: This is NOT actual production code;\n// it is only used to illustrate example\nfunction App() {\n  return (\n    <ErrorBoundaryWithRetry\n      fallback={({error, retry}) =>\n        <>\n          <ErrorUI error={error} />\n          {/* Render a button to retry; this will attempt to re-render the\n            content inside the boundary, i.e. the query component */}\n          <Button onPress={retry}>Retry</Button>\n        </>\n      }>\n      {({fetchKey}) => {\n        // If we have retried, use the new `retryQueryRef` provided\n        // by the Error Boundary\n        return <MainContent fetchKey={fetchKey} />;\n      }}\n    </ErrorBoundaryWithRetry>\n  );\n}\n\n/**\n * MainContent.react.js\n */\nfunction MainContent(props) {\n  const data = useLazyLoadQuery(\n    graphql`...`,\n    variables,\n    {fetchKey: props.fetchKey}\n  );\n\n  return (/* ... */);\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Fallback with React Suspense in JavaScript\nDESCRIPTION: This snippet demonstrates the use of React's Suspense to render a fallback component while waiting for asynchronous operations to complete in a React app. It includes the 'Suspense' component imported from React, which wraps child components that may suspend, rendering a 'fallback' placeholder until they are ready. No additional dependencies are required beyond React itself. The main input is the component tree which might suspend, and the output is either the fallback or the resolved component tree.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/guided-tour/rendering/loading-states.md#2025-04-18_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst React = require('React');\nconst {Suspense} = require('React');\n\nfunction App() {\n  return (\n    // Render a fallback using Suspense as a wrapper\n    <Suspense fallback={<LoadingGlimmer />}>\n      <CanSuspend />\n    </Suspense>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching GraphQL Query using fetchQuery in React Relay\nDESCRIPTION: This snippet demonstrates how to fetch a GraphQL query using the fetchQuery function from the react-relay library. It includes setting up a Relay environment, importing necessary types from a GraphQL file, and subscribing to the observable to manage the query’s lifecycle. Dependencies include the react-relay library and a Relay Environment instance. The key parameters are the environment, query, and variables. The function returns an observable, where the developer subscribes to handle data and error events. Limitations include data retention constraints after the request completes.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v13.0.0/api-reference/relay-runtime/fetch-query.md#2025-04-18_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport type {AppQuery} from 'AppQuery.graphql';\n\n// You should prefer passing an environment that was returned from useRelayEnvironment()\nconst MyEnvironment = require('MyEnvironment');\nconst {fetchQuery} = require('react-relay');\n\nfetchQuery<AppQuery>(\n  environment,\n  graphql`\n    query AppQuery($id: ID!) {\n      user(id: $id) {\n        name\n      }\n    }\n  `,\n  {id: 4},\n)\n.subscribe({\n  start: () => {...},\n  complete: () => {...},\n  error: (error) => {...},\n  next: (data) => {...}\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Comment Composer with Mutation\nDESCRIPTION: Create a React component that uses useMutation hook to post comments and update the local store\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/tutorial/mutations-updates.md#2025-04-18_snippet_11\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction StoryCommentsComposer({story}) {\n  const [text, setText] = useState('');\n  const [commitMutation, isMutationInFlight] = useMutation(StoryCommentsComposerPostMutation);\n  \n  function onPost() {\n    setText('');\n    const connectionID = ConnectionHandler.getConnectionID(\n      data.id,\n      'StoryCommentsSectionFragment_comments'\n    );\n    commitMutation({\n      variables: {\n        id: data.id,\n        text,\n        connections: [connectionID]\n      }\n    });\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Bi-directional Pagination with usePaginationFragment in React and Relay\nDESCRIPTION: Shows how to use usePaginationFragment for bi-directional pagination, allowing both forward and backward pagination in a single component. It includes the necessary GraphQL fragment and demonstrates how to use the loadPrevious and hasPrevious properties.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/guided-tour/list-data/advanced-pagination.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport type {FriendsListComponent_user$key} from 'FriendsListComponent_user.graphql';\n\nconst React = require('React');\nconst {Suspense} = require('React');\n\nconst {graphql, usePaginationFragment} = require('react-relay');\n\ntype Props = {\n  userRef: FriendsListComponent_user$key,\n};\n\nfunction FriendsListComponent(props: Props) {\n  const {\n    data,\n    loadPrevious,\n    hasPrevious,\n    // ... forward pagination values\n  } = usePaginationFragment(\n    graphql`\n      fragment FriendsListComponent_user on User {\n        name\n        friends(after: $after, before: $before, first: $first, last: $last)\n          @connection(key: \"FriendsListComponent_user_friends_connection\") {\n          edges {\n            node {\n              name\n              age\n            }\n          }\n        }\n      }\n    `,\n    userRef,\n  );\n\n  return (\n    <>\n      <h1>Friends of {data.name}:</h1>\n      <List items={data.friends?.edges.map(edge => edge.node)}>\n        {node => {\n          return (\n            <div>\n              {node.name} - {node.age}\n            </div>\n          );\n        }}\n      </List>\n\n      {hasPrevious ? (\n        <Button onClick={() => loadPrevious(10)}>\n          Load more friends\n        </Button>\n      ) : null}\n\n      {/* Forward pagination controls can go simultaneously here */}\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Pagination with Relay usePaginationFragment\nDESCRIPTION: Example showing how to implement pagination in a friends list component using Relay's usePaginationFragment hook. Demonstrates fetching the next page of items and rendering the results.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/guided-tour/list-data/pagination.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport type {FriendsListComponent_user$key} from 'FriendsList_user.graphql';\n\nconst React = require('React');\n\nconst {graphql, usePaginationFragment} = require('react-relay');\n\nconst {Suspense} = require('React');\n\ntype Props = {\n  user: FriendsListComponent_user$key,\n};\n\nfunction FriendsListComponent(props: Props) {\n  const {data, loadNext} = usePaginationFragment(\n    graphql`\n      fragment FriendsListComponent_user on User\n      @refetchable(queryName: \"FriendsListPaginationQuery\") {\n        name\n        friends(first: $count, after: $cursor)\n        @connection(key: \"FriendsList_user_friends\") {\n          edges {\n            node {\n              name\n              age\n            }\n          }\n        }\n      }\n    `,\n    props.user,\n  );\n\n  return (\n    <>\n      <h1>Friends of {data.name}:</h1>\n      <div>\n        {(data.friends?.edges ?? []).map(edge => {\n          const node = edge.node;\n          return (\n            <Suspense fallback={<Glimmer />}>\n              <FriendComponent user={node} />\n            </Suspense>\n          );\n        })}\n      </div>\n\n      <Button\n        onClick={() => {\n          loadNext(10)\n        }}>\n        Load more friends\n      </Button>\n    </>\n  );\n}\n\nmodule.exports = FriendsListComponent;\n```\n\n----------------------------------------\n\nTITLE: Configuring RelayEnvironmentProvider with Custom Fetch Function in JavaScript\nDESCRIPTION: This snippet demonstrates how to set up a RelayEnvironmentProvider with a custom fetch function for GraphQL requests. It includes creating a Relay environment, defining a fetch function, and wrapping the main App component with the provider.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/api-reference/hooks/relay-environment-provider.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst React = require('React');\nconst {\n  Store,\n  RecordSource,\n  Environment,\n  Network,\n  Observable,\n} = require(\"relay-runtime\");\n\nconst {RelayEnvironmentProvider} = require('react-relay');\n\n/**\n * Custom fetch function to handle GraphQL requests for a Relay environment.\n *\n * This function is responsible for sending GraphQL requests over the network and returning\n * the response data. It can be customized to integrate with different network libraries or\n * to add authentication headers as needed.\n *\n * @param {RequestParameters} params - The GraphQL request parameters to send to the server.\n * @param {Variables} variables - Variables used in the GraphQL query.\n */\nfunction fetchFunction(params, variables) {\n  const response = fetch(\"http://my-graphql/api\", {\n    method: \"POST\",\n    headers: [[\"Content-Type\", \"application/json\"]],\n    body: JSON.stringify({\n      query: params.text,\n      variables,\n    }),\n  });\n\n  return Observable.from(response.then((data) => data.json()));\n};\n\n/**\n * Creates a new Relay environment instance for managing (fetching, storing) GraphQL data.\n */\nfunction createEnvironment() {\n  const network = Network.create(fetchFunction);\n  const store = new Store(new RecordSource());\n  return new Environment({ store, network });\n}\n\nconst environment = createEnvironment();\n\nfunction Root() {\n  return (\n    <RelayEnvironmentProvider environment={environment}>\n      <App />\n    </RelayEnvironmentProvider>\n  );\n}\n\nmodule.exports = Root;\n```\n\n----------------------------------------\n\nTITLE: Defining a Comment Posting Mutation in Relay\nDESCRIPTION: This code defines a mutation for posting a comment on a story. It includes the necessary fields for the mutation, including the story ID and comment text.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/tutorial/mutations-updates.md#2025-04-18_snippet_12\n\nLANGUAGE: GraphQL\nCODE:\n```\nconst StoryCommentsComposerPostMutation = graphql`\n  mutation StoryCommentsComposerPostMutation(\n    $id: ID!,\n    $text: String!,\n  ) {\n    postStoryComment(id: $id, text: $text) {\n      commentEdge {\n        node {\n          id\n          text\n        }\n      }\n    }\n  }\n`;\n```\n\n----------------------------------------\n\nTITLE: React Story Component Implementation with Comments Section\nDESCRIPTION: Shows how to implement a Story component that includes a comments section using Relay fragments and components.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/tutorial/connections-pagination.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport StoryCommentsSection from './StoryCommentsSection';\n\nfunction Story({story}) {\n  const data = useFragment(StoryFragment, story);\n  return (\n    <Card>\n      <Heading>{data.title}</Heading>\n      <PosterByline person={data.poster} />\n      <Timestamp time={data.posted_at} />\n      <Image image={data.image} />\n      <StorySummary summary={data.summary} />\n      <StoryCommentsSection story={data} />\n    </Card>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using usePaginationFragment Hook in React\nDESCRIPTION: This snippet demonstrates how to use the usePaginationFragment hook to implement pagination in a React component, including handling loading states with useTransition.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/tutorial/connections-pagination.md#2025-04-18_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nfunction StoryCommentsSection({story}) {\n  const [isPending, startTransition] = useTransition();\n  const {data, loadNext} = usePaginationFragment(StoryCommentsSectionFragment, story);\n  const onLoadMore = () => startTransition(() => {\n    loadNext(3);\n  });\n  return (\n    <>\n      {data.comments.edges.map(commentEdge =>\n        <Comment comment={commentEdge.node} />\n      )}\n      {data.comments.pageInfo.hasNextPage && (\n        <LoadMoreCommentsButton\n          onClick={onLoadMore}\n          disabled={isPending}\n        />\n      )}\n      {isPending && <CommentsLoadingSpinner />}\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Refetching with fetchQuery to avoid Suspense in Relay\nDESCRIPTION: This snippet demonstrates how to refetch a query using `fetchQuery` to avoid suspense in Relay. It maintains a local loading state (`isRefetching`) and calls `loadQuery` with `fetchPolicy: 'store-only'` after the data has been fetched and written to the Relay store. This prevents the component from suspending and showing a fallback loading state.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/guided-tour/refetching/refetching-queries-with-different-data.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * App.react.js\n */\nconst AppQuery = require('__generated__/AppQuery.graphql');\n\nfunction App(props: Props) {\n  const environment = useRelayEnvironment();\n  const [queryRef, loadQuery] = useQueryLoader(\n    AppQuery,\n    props.appQueryRef /* initial query ref */\n  );\n  const [isRefetching, setIsRefetching] = useState(false)\n\n  const refetch = useCallback(() => {\n    if (isRefetching) { return; }\n    setIsRefetching(true);\n\n    // fetchQuery will fetch the query and write\n    // the data to the Relay store. This will ensure\n    // that when we re-render, the data is already\n    // cached and we don't suspend\n    fetchQuery(environment, AppQuery, variables)\n      .subscribe({\n        complete: () => {\n          setIsRefetching(false);\n\n          // *After* the query has been fetched, we call\n          // loadQuery again to re-render with a new\n          // queryRef.\n          // At this point the data for the query should\n          // be cached, so we use the 'store-only'\n          // fetchPolicy to avoid suspending.\n          loadQuery({id: 'different-id'}, {fetchPolicy: 'store-only'});\n        },\n        error: () => {\n          setIsRefetching(false);\n        }\n      });\n  }, [/* ... */]);\n\n  return (\n    <React.Suspense fallback=\"Loading query...\">\n      <MainContent\n        isRefetching={isRefetching}\n        refetch={refetch}\n        queryRef={queryRef}\n      />\n    </React.Suspense>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Defining GraphQL Fragments\nDESCRIPTION: This GraphQL snippet demonstrates how to define reusable fragments that can include other fragments. `UserFragment` includes `AnotherUserFragment`, which in turn includes `FooUserFragment`, showcasing fragment composition.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/guided-tour/rendering/fragments.md#2025-04-18_snippet_4\n\nLANGUAGE: graphql\nCODE:\n```\nfragment UserFragment on User {\n  name\n  age\n  profile_picture(scale: 2) {\n    uri\n  }\n  ...AnotherUserFragment\n}\n\nfragment AnotherUserFragment on User {\n  username\n  ...FooUserFragment\n}\n```\n\n----------------------------------------\n\nTITLE: Managing Suspense Fallbacks in JavaScript Components\nDESCRIPTION: This code snippet shows how to manage loading states using React's Suspense component. By wrapping components like 'MainContent', which may have asynchronous operations, in a Suspense component, the fallback (e.g., 'LoadingGlimmer') is displayed while the resources load. This approach ensures that loading UI is shown only until the content is fully ready. It assumes React is included as a dependency.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/guided-tour/rendering/loading-states.md#2025-04-18_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n/**\n * App.react.js\n */\n\nconst React = require('React');\nconst {Suspense} = require('React');\n\nfunction App() {\n  return (\n    // LoadingGlimmer is rendered via the Suspense fallback\n    <Suspense fallback={<LoadingGlimmer />}>\n      <MainContent /> {/* MainContent may suspend */}\n    </Suspense>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Refetching Fragment with useRefetchableFragment Hook in JavaScript\nDESCRIPTION: This code snippet showcases the usage of the useRefetchableFragment hook in Relay to fetch and render a previously rendered fragment under a new query with different variables. It requires the Relay environment and relevant types from generated GraphQL files. The fragment specified must be annotated with the @refetchable directive on certain eligible types. It uses refetch to repeat the data fetch with new variables, which must include necessary identifiers and can take additional arguments for fetch policies.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v13.0.0/guided-tour/refetching/refetching-fragments-with-different-data.md#2025-04-18_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport type {CommentBodyRefetchQuery} from 'CommentBodyRefetchQuery.graphql';\nimport type {CommentBody_comment$key} from 'CommentBody_comment.graphql';\n\ntype Props = {\n  comment: CommentBody_comment$key,\n};\n\nfunction CommentBody(props: Props) {\n  const [data, refetch] = useRefetchableFragment<CommentBodyRefetchQuery, _>(\n    graphql`\n      fragment CommentBody_comment on Comment\n      # @refetchable makes it so Relay autogenerates a query for\n      # fetching this fragment\n      @refetchable(queryName: \"CommentBodyRefetchQuery\") {\n        body(lang: $lang) {\n          text\n        }\n      }\n    `,\n    props.comment,\n  );\n\n  const refetchTranslation = () => {\n    // We call refetch with new variables,\n    // which will refetch the @refetchable query with the\n    // new variables and update this component with the\n    // latest fetched data.\n    refetch({lang: 'SPANISH'});\n  };\n\n  return (\n    <>\n      <p>{data.body?.text}</p>\n      <Button\n        onClick={() => refetchTranslation()}>\n        Translate Comment\n      </Button>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing useRefetchableFragment in ContactsList\nDESCRIPTION: Switching from useFragment to useRefetchableFragment to enable refetching the contacts list with a new search value when the input changes.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/tutorial/refetchable-fragments.md#2025-04-18_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n// change-line\nimport {useRefetchableFragment} from 'react-relay';\n\nfunction ContactsList({viewer}) {\n  // change-line\n  const [data, refetch] = useRefetchableFragment(ContactsListFragment, viewer);\n  const [searchString, setSearchString] = useState('');\n  const onSearchStringChanged = (value) => {\n    setSearchString(value);\n    // change-line\n    refetch({search: value});\n  };\n  return (\n    // ...\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Optimistic Update Implementation\nDESCRIPTION: Adding optimistic update handler to mutation for immediate UI feedback.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/tutorial/mutations-updates.md#2025-04-18_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nfunction StoryLikeButton({story}) {\n  ...\n  function onLikeButtonClicked(newDoesLike) {\n    commitMutation({\n      variables: {\n        id: data.id,\n        doesLike: newDoesLike,\n      },\n      optimisticUpdater: store => {\n        // TODO fill in optimistic updater\n      },\n    })\n  }\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Defining CacheConfig Type Interface in TypeScript\nDESCRIPTION: TypeScript interface definition for CacheConfig type that specifies optional configuration parameters for Relay's caching and polling behavior. Includes fields for force fetching, polling intervals, live query configuration, metadata, and transaction tracking.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/api-reference/types/CacheConfig.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype CacheConfig = {\n  force?: boolean,\n  poll?: number,\n  liveConfigId?: string,\n  metadata?: Object,\n  transactionId?: string\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Relay Resolver Field with Docblock Syntax in JavaScript\nDESCRIPTION: This snippet demonstrates how to define a Relay resolver field using docblock syntax. It shows the basic structure for defining a field on a GraphQL model type.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/guides/relay-resolvers/defining-fields.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n* @RelayResolver TypeName.fieldName(arg1: ArgTypeName): FieldTypeName\n*/\n```\n\n----------------------------------------\n\nTITLE: Establishing a GraphQL Subscription with requestSubscription in Relay\nDESCRIPTION: This code demonstrates how to create a GraphQL subscription using Relay's requestSubscription API. It imports the necessary functions, defines a subscription GraphQL query with a variable, and creates a function that returns a disposable subscription.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/api-reference/relay-runtime/request-subscription.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport {graphql, requestSubscription} from 'react-relay';\n\nconst subscription = graphql`\n  subscription UserDataSubscription($input: InputData!) {\n    # ...\n  }\n`;\n\nfunction createSubscription(environment: IEnvironment): Disposable {\n  return requestSubscription(environment, {\n    subscription,\n    variables: {input: {userId: '4'}},\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Query with Fragment and Default Argument Values\nDESCRIPTION: Illustrates querying in Relay with a fragment that declares default argument values. TaskView_task uses a default value for showDetailedResults unless explicitly overridden.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/guided-tour/rendering/variables.md#2025-04-18_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nfunction TaskList(props) {\n  const data = usePreloadedQuery(\n    graphql`\n      query TaskListQuery {\n        todays_tasks {\n          ...TaskView_task\n        }\n        tomorrows_tasks {\n          ...TaskView_task @arguments(showDetailedResults: false)\n        }\n      }\n    `,\n    props.queryRef,\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing useTransition with Relay in React\nDESCRIPTION: This code snippet demonstrates how to use the useTransition hook in a React component that uses Relay's useRefetchableFragment. It shows how to wrap the refetch call in a transition to prevent the UI from showing a loading spinner unnecessarily.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/tutorial/refetchable-fragments.md#2025-04-18_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nconst {useState, useTransition} = React;\n\nfunction ContactsList({viewer}) {\n  const [isPending, startTransition] = useTransition();\n  const [searchString, setSearchString] = useState('');\n  const [data, refetch] = useRefetchableFragment(ContactsListFragment, viewer);\n  const onSearchStringChanged = (value) => {\n    setSearchString(value);\n    startTransition(() => {\n      refetch({search: value});\n    });\n  };\n  return (\n    <Card dim={true}>\n      <h3>Contacts</h3>\n      <SearchInput\n        value={searchString}\n        onChange={onSearchStringChanged}\n        isPending={isPending}\n      />\n      {data.contacts.map(contact =>\n        <ContactRow key={contact.id} contact={contact} />\n      )}\n    </Card>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a component with a fragment and button click handler (JavaScript)\nDESCRIPTION: This JavaScript code defines a React component `AssignBestFriendButton` that uses a Relay fragment to fetch user data and includes a button. The `onClick` handler, which is initially a stub, is later implemented to update the viewer's best friend using `commitLocalUpdate` and `readUpdatableQuery`.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/guided-tour/updating-data/imperatively-modifying-linked-fields.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// AssignBestFriendButton.react.js\nimport type {AssignBestFriendButton_user$key} from 'AssignBestFriendButton_user.graphql';\n\nconst {useFragment} = require('react-relay');\n\nexport default function AssignBestFriendButton({\n  someTypeRef: AssignBestFriendButton_user$key,\n}) {\n  const data = useFragment(graphql`\n    fragment AssignBestFriendButton_someType on SomeType {\n      user {\n        name\n        ...AssignableBestFriendButton_assignable_user\n      }\n    }\n  `, someTypeRef);\n\n  // We will replace this stub with the real thing below.\n  const onClick = () => {};\n\n  return (<button onClick={onClick}>\n    Declare {data.user?.name ?? 'someone with no name'} your new best friend!\n  </button>);\n}\n```\n\n----------------------------------------\n\nTITLE: Including Documentation Rating Component in JSX\nDESCRIPTION: This code adds a component that allows users to rate the documentation page. It's typically placed at the bottom of documentation pages to collect user feedback.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/guided-tour/introduction.md#2025-04-18_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<DocsRating />\n```\n\n----------------------------------------\n\nTITLE: Defining Story Fragment\nDESCRIPTION: Creating a GraphQL fragment for Story component data requirements\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/tutorial/fragments-1.md#2025-04-18_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { graphql } from 'relay-runtime';\n\nconst StoryFragment = graphql`\n  fragment StoryFragment on Story {\n    title\n    summary\n    createdAt\n    poster {\n      name\n      profilePicture {\n        url\n      }\n    }\n    thumbnail {\n      url\n    }\n  }\n`;\n```\n\n----------------------------------------\n\nTITLE: Implementing a Button to Assign Users to Best Friends List\nDESCRIPTION: React component that uses Relay to add a user to a list of best friends. This demonstrates working with assignable fragments and updating local state with commitLocalUpdate.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/guided-tour/updating-data/imperatively-modifying-linked-fields.md#2025-04-18_snippet_7\n\nLANGUAGE: js\nCODE:\n```\n// AssignBestFriendButton.react.js\nimport type {AssignBestFriendButton_user$key} from 'AssignBestFriendButton_user.graphql';\nimport type {AssignBestFriendButton_viewer$key} from 'AssignBestFriendButton_viewer';\n\nimport type {RecordSourceSelectorProxy} from 'react-relay';\n\nconst {commitLocalUpdate, useFragment, useRelayEnvironment} = require('react-relay');\n\ngraphql`\n  fragment AssignBestFriendButton_assignable_user on User @assignable {\n    __typename\n  }\n`;\n\nexport default function AssignBestFriendButton({\n  someTypeRef: AssignBestFriendButton_someType$key,\n  viewerFragmentRef: AssignBestFriendButton_viewer$key,\n}) {\n  const data = useFragment(graphql`\n    fragment AssignBestFriendButton_someType on SomeType {\n      user {\n        name\n        ...AssignableBestFriendButton_assignable_user\n      }\n    }\n  `, someTypeRef);\n\n  const viewer = useFragment(graphql`\n    fragment AssignBestFriendButton_viewer on Viewer {\n      best_friends {\n        # since viewer.best_friends appears in the right hand side of the assignment\n        # (i.e. updatableData.viewer.best_friends = viewer.best_friends.concat(...)),\n        # the best_friends field must contain the correct assignable fragment spread\n        ...AssignableBestFriendButton_assignable_user\n      }\n    }\n  `, viewerRef);\n\n  const environment = useRelayEnvironment();\n  const onClick = () => {\n    commitLocalUpdate(\n      environment,\n      (store: RecordSourceSelectorProxy) => {\n        const {updatableData} = store.readUpdatableQuery(\n            graphql`\n              query AssignBestFriendButtonUpdatableQuery\n              @updatable {\n                viewer {\n                  best_friends {\n                    ...AssignableBestFriendButton_assignable_user\n                  }\n                }\n              }\n            `,\n            {}\n          );\n\n        if (data.user != null && updatableData.viewer != null && viewer.best_friends != null) {\n          updatableData.viewer.best_friends = [\n            ...viewer.best_friends,\n            data.user,\n          ];\n        }\n      }\n    );\n  };\n\n  return (<button onClick={onClick}>\n    Add {user.name ?? 'someone with no name'} to my list of best friends!\n  </button>);\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring and Using GraphQL Query Variables\nDESCRIPTION: Demonstrates how to declare and use variables in a GraphQL query. The $id variable is declared and used as an argument to the user query.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/guided-tour/rendering/variables.md#2025-04-18_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nquery UserQuery($id: ID!) {\n  # The value of $id is used as input to the user() call:\n  user(id: $id) {\n    id\n    name\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Relay QueryRenderer\nDESCRIPTION: Example showing how to use Relay's QueryRenderer component to fetch data and render a Story container with proper loading and error states.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-experimental/PrinciplesAndArchitecture-ThinkingInRelay.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nReactDOM.render(\n  <QueryRenderer\n    environment={\n      // defined or imported above...\n    }\n    query={graphql`\n      query StoryQuery($storyID: ID!) {\n        node(id: $storyID) {\n          ...Story_story\n        }\n      }\n    `}\n    variables={{\n      storyID: '123',\n    }}\n    render={(props, error) => {\n      if (error) {\n        return <ErrorView />;\n      } else if (props) {\n        return <StoryContainer story={props.story} />;\n      } else {\n        return <LoadingIndicator />;\n      }\n    }}\n  />,\n  rootElement\n)\n```\n\n----------------------------------------\n\nTITLE: Refetching Queries Using useLazyLoadQuery with Different Data in React\nDESCRIPTION: Example demonstrating how to refetch a query with different data using the useLazyLoadQuery hook. This approach updates query variables and uses a fetchKey to ensure the query is fully re-evaluated and refetched.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/guided-tour/refetching/refetching-queries-with-different-data.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * App.react.js\n */\nconst AppQuery = require('__generated__/AppQuery.graphql');\n\nfunction App(props: Props) {\n  const [queryArgs, setQueryArgs] = useState({\n    options: {fetchKey: 0},\n    variables: {id: '4'},\n  });\n\n  const refetch = useCallback(() => {\n    // Trigger a re-render of useLazyLoadQuery with new variables,\n    // *and* an updated fetchKey.\n    // The new fetchKey will ensure that the query is fully\n    // re-evaluated and refetched.\n    setQueryArgs(prev => ({\n      options: {\n        fetchKey: (prev?.options.fetchKey ?? 0) + 1,\n      },\n      variables: {id: 'different-id'}\n    }));\n  }, [/* ... */]);\n\n  return (\n    <React.Suspense fallback=\"Loading query...\">\n      <MainContent\n        refetch={refetch}\n        queryArgs={queryArgs}\n      />\n    </React.Suspense>\n  );\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * MainContent.react.js\n */\n// Fetches and renders the query, given the fetch options\nfunction MainContent(props) {\n  const {refetch, queryArgs} = props;\n  const data = useLazyLoadQuery(\n    graphql`\n      query AppQuery($id: ID!) {\n        user(id: $id) {\n          name\n          friends {\n            count\n          }\n        }\n      }\n    `,\n    queryArgs.variables,\n    queryArgs.options,\n  );\n\n  return (\n    <>\n      <h1>{data.user?.name}</h1>\n      <div>Friends count: {data.user.friends?.count}</div>\n      <Button\n        onClick={() => refetch()}>\n        Fetch latest count\n      </Button>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a GraphQL Fragment\nDESCRIPTION: This GraphQL fragment defines the data to be queried from a `User` type. It selects the `name`, `age`, and `profile_picture` fields. The `profile_picture` field also includes a nested selection for the `uri` field.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/guided-tour/rendering/fragments.md#2025-04-18_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nfragment UserFragment on User {\n  name\n  age\n  profile_picture(scale: 2) {\n    uri\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Loading Queries with loadQuery Function in React Relay\nDESCRIPTION: Shows how to use loadQuery function to implement render-as-you-fetch pattern. Includes proper query reference handling and cleanup to prevent memory leaks.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-experimental/RelayHooks-ApiReference.md#2025-04-18_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nconst React = require('React');\nconst {loadQuery, useRelayEnvironment} = require('react-relay/hooks');\n\nconst query = graphql`\n  query AppQuery($id: ID!) {\n    user(id: $id) {\n      name\n    }\n  }\n`;\n\nfunction MyComponent() {\n  // Do not call this during render\n  const onClick = React.useCallback(() => {\n    const queryReference = loadQuery(\n      RelayFBEnvironment,\n      query,\n      {id: '4'},\n      {fetchPolicy: 'store-or-network'},\n    );\n\n    processQuery(queryQeference);\n    // the processQuery function must ensure that `queryReference.dispose()` is called.\n  });\n\n  return <div onClick={onClick}>Click me</div>;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Pagination with usePaginationFragment in Relay\nDESCRIPTION: This code demonstrates how to implement pagination in a React component using Relay's usePaginationFragment. It shows how to define a refetchable fragment with a connection, render the items, and load more items on button click.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/guided-tour/list-data/pagination.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport type {FriendsListComponent_user$key} from 'FriendsList_user.graphql';\n\nconst React = require('React');\n\nconst {graphql, usePaginationFragment} = require('react-relay');\n\nconst {Suspense} = require('React');\n\ntype Props = {\n  user: FriendsListComponent_user$key,\n};\n\nfunction FriendsListComponent(props: Props) {\n  const {data, loadNext} = usePaginationFragment(\n    graphql`\n      fragment FriendsListComponent_user on User\n      @refetchable(queryName: \"FriendsListPaginationQuery\") {\n        name\n        friends(first: $count, after: $cursor)\n        @connection(key: \"FriendsList_user_friends\") {\n          edges {\n            node {\n              name\n              age\n            }\n          }\n        }\n      }\n    `,\n    props.user,\n  );\n\n  return (\n    <>\n      <h1>Friends of {data.name}:</h1>\n      <div>\n        {(data.friends?.edges ?? []).map(edge => {\n          const node = edge.node;\n          return (\n            <Suspense fallback={<Glimmer />}>\n              <FriendComponent user={node} />\n            </Suspense>\n          );\n        })}\n      </div>\n\n      <Button\n        onClick={() => {\n          loadNext(10)\n        }}>\n        Load more friends\n      </Button>\n    </>\n  );\n}\n\nmodule.exports = FriendsListComponent;\n```\n\n----------------------------------------\n\nTITLE: Adding Type Annotations to Relay's useLazyLoadQuery in TypeScript\nDESCRIPTION: This code demonstrates how to properly type a Relay query by importing the generated type definitions and annotating the useLazyLoadQuery hook with the correct type. This enables TypeScript to properly type-check the query results.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/tutorial/queries-1.md#2025-04-18_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// change-line\nimport type {NewsfeedQuery as NewsfeedQueryType} from './__generated__/NewsfeedQuery.graphql';\n\nfunction Newsfeed({}) {\n  const data = useLazyLoadQuery\n  // change-line\n  <NewsfeedQueryType>\n  (NewsfeedQuery, {});\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: GraphQL Query Caching Implementation\nDESCRIPTION: Implements a basic query-text based cache for GraphQL requests using a Map.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/principles-and-architecture/thinking-in-graphql.md#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nvar _cache = new Map();\ngraphql.get = queryText => {\n  if (!_cache.has(queryText)) {\n    _cache.set(queryText, fetchGraphQL(queryText));\n  }\n  return _cache.get(queryText);\n};\n```\n\n----------------------------------------\n\nTITLE: Testing Fragment Components in Relay\nDESCRIPTION: Shows how to test Relay components that use useFragment by wrapping them in a TestRenderer component that uses useLazyLoadQuery to fetch the data. This approach allows testing specific fragment components independently.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/guides/testing-relay-components.md#2025-04-18_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\ntest('Fragment', () => {\n  const environment = createMockEnvironment();\n  const TestRenderer = () => {\n    const data = useLazyLoadQuery(\n      graphql`\n        query TestQuery @relay_test_operation {\n          myData: node(id: \"test-id\") {\n            # Spread the fragment you want to test here\n            ...MyFragment\n          }\n        }\n      `,\n      {},\n    );\n    return <MyFragmentComponent myData={data.myData} />\n  };\n\n  const renderer = render(\n    <RelayEnvironmentProvider environment={environment}>\n      <Suspense fallback=\"Loading...\">\n        <TestRenderer />\n      </Suspense>\n    </RelayEnvironmentProvider>\n  );\n\n  // Wrapping in act will ensure that components\n  // are fully updated to their final state.\n  act(() => {\n    environment.mock.resolveMostRecentOperation(operation =>\n      MockPayloadGenerator.generate(operation),\n    );\n  });\n\n  expect(renderer).toMatchSnapshot();\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Granular Loading States with Multiple Suspense Boundaries\nDESCRIPTION: Example showing how to use multiple Suspense boundaries to create more granular loading states for different parts of the UI. This allows components to render as soon as they're ready, without waiting for all components.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v13.0.0/guided-tour/rendering/loading-states.md#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * App.react.js\n */\n\nconst React = require('React');\nconst {Suspense} = require('React');\n\nfunction App() {\n  return (\n    <>\n      {/* Show a separate loading UI for the LeftHandColumn */}\n      <Suspense fallback={<LeftColumnPlaceholder />}>\n        <LeftColumn />\n      </Suspense>\n\n      {/* Show a separate loading UI for both the Main and Secondary content */}\n      <Suspense fallback={<LoadingGlimmer />}>\n        <MainContent />\n        <SecondaryContent />\n      </Suspense>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using useRefetchableFragment in ContactsList Component in TypeScript\nDESCRIPTION: This snippet demonstrates how to use useRefetchableFragment instead of useFragment in the ContactsList component, and how to call the refetch function when the search string changes.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/tutorial/refetchable-fragments.md#2025-04-18_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n// change-line\nimport {useRefetchableFragment} from 'react-relay';\n\nfunction ContactsList({viewer}) {\n  // change-line\n  const [data, refetch] = useRefetchableFragment(ContactsListFragment, viewer);\n  const [searchString, setSearchString] = useState('');\n  const onSearchStringChanged = (value) => {\n    setSearchString(value);\n    // change-line\n    refetch({search: value});\n  };\n  return (\n    // ...\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using Relay Fragment in a React Component\nDESCRIPTION: This example illustrates how to use the `useFragment` hook in a React component to read data from the Relay store based on a GraphQL fragment. The hook takes the fragment and a fragment reference as arguments, providing the component with access to the data specified in the fragment.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/principles-and-architecture/thinking-in-relay.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// AuthorDetails.react.js\nexport default function AuthorDetails(props) {\n  const data = useFragment(authorDetailsFragment, props.author);\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Using useRefetchableFragment Hook in React Component\nDESCRIPTION: Example showing how to use useRefetchableFragment hook to fetch and update comment data with language translation support. Demonstrates fragment definition, refetch functionality, and type safety with Flow.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/api-reference/hooks/use-refetchable-fragment.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport type {CommentBody_comment$key} from 'CommentBody_comment.graphql';\n\nconst React = require('React');\n\nconst {graphql, useRefetchableFragment} = require('react-relay');\n\n\ntype Props = {\n  comment: CommentBody_comment$key,\n};\n\nfunction CommentBody(props: Props) {\n  const [data, refetch] = useRefetchableFragment(\n    graphql`\n      fragment CommentBody_comment on Comment\n      @refetchable(queryName: \"CommentBodyRefetchQuery\") {\n        body(lang: $lang) {\n          text\n        }\n      }\n    `,\n    props.comment,\n  );\n\n  return (\n    <>\n      <p>{data.body?.text}</p>\n      <Button\n        onClick={() => {\n          refetch({lang: 'SPANISH'}, {fetchPolicy: 'store-or-network'})\n        }}\n      >\n        Translate Comment\n      </Button>\n    </>\n  );\n}\n\nmodule.exports = CommentBody;\n```\n\n----------------------------------------\n\nTITLE: React Component with Relay Query: App\nDESCRIPTION: This JavaScript code defines a React component `App` that uses a Relay query to fetch data. It utilizes `usePreloadedQuery` hook to read the data from the preloaded query reference. It renders the `UserComponent` and passes a fragment reference.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/guided-tour/rendering/fragments.md#2025-04-18_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * App.react.js\n *\n * Query Component\n */\n\nimport type {AppQuery} from 'AppQuery.graphql';\nimport type {PreloadedQuery} from 'react-relay';\n\nconst React = require('React');\nconst {graphql, usePreloadedQuery} = require('react-relay');\n\nconst UserComponent = require('./UserComponent.react');\n\ntype Props = {\n  appQueryRef: PreloadedQuery<AppQuery>,\n}\n\nfunction App({appQueryRef}) {\n  const data = usePreloadedQuery(\n    graphql`\n      query AppQuery($id: ID!) {\n        user(id: $id) {\n          name\n\n          # Include child fragment:\n          ...UserComponent_user\n        }\n      }\n    `,\n    appQueryRef,\n  );\n\n  return (\n    <>\n      <h1>{data.user?.name}</h1>\n      {/* Render child component, passing the fragment reference: */}\n      <UserComponent user={data.user} />\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: React Component with commitLocalUpdate\nDESCRIPTION: This React component uses `commitLocalUpdate` to toggle an `is_selected` field on a `User` object in the Relay store in response to a user click. It uses `useFragment` to access user data and `readUpdatableFragment` within the updater function.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/guided-tour/updating-data/imperatively-modifying-store-data.md#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// UserSelectToggle.react.js\nimport type {RecordSourceSelectorProxy} from 'react-relay';\nimport type {UserSelectToggle_viewer$key} from 'UserSelectToggle_viewer.graphql';\n\nconst {useRelayEnvironment, commitLocalUpdate} = require('react-relay');\n\nfunction UserSelectToggle({ userId, viewerRef }: { userId: string, viewerRef: UserSelectToggle_viewer$key, }) {\n  const viewer = useFragment(graphql`\n    fragment UserSelectToggle_viewer on Viewer {\n      user(user_id: $user_id) {\n        id\n        name\n        is_selected\n        ...UserSelectToggle_updatable_user\n      }\n    }\n  `, viewerRef);\n\n  const environment = useRelayEnvironment();\n\n  return <button\n    onClick={() => {\n      commitLocalUpdate(\n        environment,\n        (store: RecordSourceSelectorProxy) => {\n          const userRef = viewer.user;\n          if (userRef == null) {\n            return;\n          }\n\n          const {updatableData} = store.readUpdatableFragment(\n            graphql`\n              fragment UserSelectToggle_updatable_user on User @updatable {\n                is_selected\n              }\n            `,\n            userRef\n          );\n\n          updatableData.is_selected = !viewer?.user?.is_selected;\n        }\n      );\n    }}\n  >\n    {viewer?.user?.is_selected ? 'Deselect' : 'Select'} {viewer?.user?.name}\n  </button>\n}\n```\n\n----------------------------------------\n\nTITLE: Using Relay to Declare and Execute Mutation\nDESCRIPTION: This JavaScript code snippet imports the graphql tag from react-relay to declare a GraphQL mutation in Relay. It follows similar structure and parameters as GraphQL declarations and shows how mutations can reference GraphQL variables for dynamic data manipulation. The example demonstrates using Relay's capabilities to execute mutations and refresh UI components accordingly.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/guided-tour/updating-data/graphql-mutations.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst {graphql} = require('react-relay');\n\nconst feedbackLikeMutation = graphql`\n  mutation FeedbackLikeMutation($input: FeedbackLikeData!) {\n    feedback_like(data: $input) {\n      feedback {\n        id\n        viewer_does_like\n        like_count\n      }\n    }\n  }\n`;\n```\n\n----------------------------------------\n\nTITLE: Mutation for Comment Posting in Relay (JavaScript)\nDESCRIPTION: Defines a GraphQL mutation to post a comment, specifying the story ID and comment text. Uses the mutation response to update the local store by adding the newly-created comment edge.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/tutorial/mutations-updates.md#2025-04-18_snippet_11\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst StoryCommentsComposerPostMutation = graphql`\n  mutation StoryCommentsComposerPostMutation(\n    $id: ID!,\n    $text: String!,\n  ) {\n    postStoryComment(id: $id, text: $text) {\n      commentEdge {\n        node {\n          id\n          text\n        }\n      }\n    }\n  }\n`;\n```\n\n----------------------------------------\n\nTITLE: Creating Updatable Fragment in Relay\nDESCRIPTION: This snippet demonstrates how to define an updatable fragment in Relay using the `graphql` template literal and the `@updatable` directive. Updatable fragments allow reading and writing data in the local Relay store, enabling optimistic UI updates. The fragment specifies the fields to be updated.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/tutorial/mutations-updates.md#2025-04-18_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nfunction StoryLikeButton({story}) {\n  ...\n      optimisticUpdater: store => {\n        const fragment = graphql`\n          fragment StoryLikeButton_updatable on Story\n            // color1\n            @updatable\n          {\n            likeCount\n            doesViewerLike\n          }\n        `;\n      },\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Contacts List Fragment with GraphQL\nDESCRIPTION: This snippet defines a GraphQL fragment for selecting a list of contacts from the Viewer. The fragment is designed to be refetchable based on a search argument.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/tutorial/refetchable-fragments.md#2025-04-18_snippet_1\n\nLANGUAGE: GraphQL\nCODE:\n```\n\"const ContactsListFragment = graphql`\\n  fragment ContactsListFragment on Viewer {\\n    contacts {\\n      id\\n      ...ContactRowFragment\\n    }\\n  }\\n`;\\n\"\n```\n\n----------------------------------------\n\nTITLE: Defining a Simple Relay Resolver in TypeScript\nDESCRIPTION: This snippet demonstrates how to define a basic Relay Resolver that augments the Query type with a 'greeting' field returning a string. It uses the @RelayResolver docblock to annotate the function for the Relay compiler.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/guides/relay-resolvers/introduction.md#2025-04-18_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n/**\n * @RelayResolver Query.greeting: String\n */\nexport function greeting(): string {\n  return \"Hello World\";\n}\n```\n\n----------------------------------------\n\nTITLE: Using Provided Variables with @argumentDefinitions in Relay\nDESCRIPTION: This example shows how to use provided variables in a fragment with @argumentDefinitions. The include_timestamp variable is supplied by a provider function at runtime rather than being passed explicitly.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/api-reference/graphql/graphql-directives.md#2025-04-18_snippet_2\n\nLANGUAGE: graphql\nCODE:\n```\nfragment TodoItem_item on TodoList\n@argumentDefinitions(\n  include_timestamp: {\n    type: \"Boolean!\",\n    provider: \"Todo_ShouldIncludeTimestamp.relayprovider\"\n  },\n) {\n  timestamp @include(if: $include_timestamp)\n  text\n}\n```\n\n----------------------------------------\n\nTITLE: Adding an Optimistic Updater to the Like Mutation\nDESCRIPTION: This code adds an optimistic updater callback to the mutation options, which will be used to immediately update the UI before the server responds, providing better user feedback.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/tutorial/mutations-updates.md#2025-04-18_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\nfunction StoryLikeButton({story}) {\n  ...\n  function onLikeButtonClicked(newDoesLike) {\n    commitMutation({\n      variables: {\n        id: data.id,\n        doesViewerLike: newDoesLike,\n      },\n      // change\n      optimisticUpdater: store => {\n        // TODO fill in optimistic updater\n      },\n      // end-change\n    })\n  }\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching GraphQL Query Data with React Relay JavaScript\nDESCRIPTION: This code snippet demonstrates how to use the fetchQuery function from the react-relay library to fetch data defined in a GraphQL query. The snippet shows the import of fetchQuery, the specification of a GraphQL query with variable inputs, and then the subscription to the observable returned by fetchQuery. The expected environment is obtained from useRelayEnvironment, while the query defines expected data and variables. Key arguments include the Relay environment, the query itself, and the variables object, with options for network cache configuration. The snippet illustrates handling observer events like start, complete, next, and error.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/api-reference/relay-runtime/fetch-query.md#2025-04-18_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n// You should prefer passing an environment that was returned from useRelayEnvironment()\nconst environment = require('MyEnvironment');\nconst {fetchQuery} = require('react-relay');\n\nfetchQuery(\n  environment,\n  graphql`\n    query AppQuery($id: ID!) {\n      user(id: $id) {\n        name\n      }\n    }\n  `,\n  {id: 4},\n)\n.subscribe({\n  start: () => {...},\n  complete: () => {...},\n  error: (error) => {...},\n  next: (data) => {...}\n});\n```\n\n----------------------------------------\n\nTITLE: Fetching Queries Lazily with useLazyLoadQuery in Relay (JavaScript)\nDESCRIPTION: This code snippet demonstrates how to use the `useLazyLoadQuery` hook from Relay to fetch data lazily when a React component renders. Dependencies include React, Relay, and pre-generated Flow types for GraphQL queries. Key parameters are the GraphQL query and variables necessary for the query execution. It outputs fetched data compliant with Flow types. Note that the Relay environment must be established, and re-renders with changed variables refetch the query.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v13.0.0/guided-tour/rendering/queries.md#2025-04-18_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport type {AppQuery} from 'AppQuery.graphql';\n\nconst React = require('React');\nconst {graphql, useLazyLoadQuery} = require('react-relay');\n\nfunction App() {\n  const data = useLazyLoadQuery<AppQuery>(\n    graphql`\n      query AppQuery($id: ID!) {\n        user(id: $id) {\n          name\n        }\n      }\n    `,\n    {id: '4'},\n  );\n\n  return (\n    <h1>{data.user?.name}</h1>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Inserting Edges into a Connection\nDESCRIPTION: Shows how to insert a new edge at the beginning or end of a connection using ConnectionHandler.insertEdgeBefore and ConnectionHandler.insertEdgeAfter in an updater function.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/guided-tour/list-data/updating-connections.md#2025-04-18_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nconst {ConnectionHandler} = require('relay-runtime');\n\nfunction updater(store: RecordSourceSelectorProxy) {\n  const storyRecord = store.get(storyID);\n  const connectionRecord = ConnectionHandler.getConnection(\n    storyRecord,\n    'StoryComponent_story_comments_connection',\n  );\n\n  const newEdge = (...);\n\n  // Add edge to the end of the connection\n  ConnectionHandler.insertEdgeAfter(\n    connectionRecord,\n    newEdge,\n  );\n\n  // Add edge to the beginning of the connection\n  ConnectionHandler.insertEdgeBefore(\n    connectionRecord,\n    newEdge,\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Generated GraphQL Artifacts\nDESCRIPTION: This snippet shows how to import a generated GraphQL artifact directly. This allows access to the compiled query, mutation, fragment, or subscription. It is used when the artifact needs to be accessed from multiple files.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/guides/compiler.md#2025-04-18_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport DictionaryComponent_word from './__generated__/DictionaryComponent_word.graphql';\n```\n\n----------------------------------------\n\nTITLE: Example Queries Demonstrating Data Reuse Potential in Relay\nDESCRIPTION: Two different queries that reference the same data through different paths - one directly querying a user by ID, the other using the node interface to access the same user.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/guided-tour/reusing-cached-data/filling-in-missing-data.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// Query 1\n\nquery UserQuery {\n  user(id: 4) {\n    name\n  }\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// Query 2\n\nquery NodeQuery {\n  node(id: 4) {\n    ... on User {\n      name\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering a Relay Container with QueryRenderer\nDESCRIPTION: Demonstrates how to render a Relay container using QueryRenderer to manage data-fetching and rendering lifecycle. This example shows how to define a GraphQL query, pass data variables, and conditionally render components based on whether data is ready or an error occurs, with QueryRenderer managing asynchronous rendering logic.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-classic/PrinciplesAndArchitecture-ThinkingInRelay.md#2025-04-18_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n\"ReactDOM.render(\\n  <QueryRenderer\\n    environment={\\n      // defined or imported above...\\n    }\\n    query={graphql`\\n      query StoryQuery($storyID: ID!) {\\n        node(id: $storyID) {\\n          ...Story_story\\n        }\\n      }\\n    `}\\n    variables={{\\n      storyID: '123',\\n    }}\\n    render={(props, error) => {\\n      if (error) {\\n        return <ErrorView />;\\n      } else if (props) {\\n        return <StoryContainer story={props.story} />;\\n      } else {\\n        return <LoadingIndicator />;\\n      }\\n    }}\\n  />,\\n  rootElement\\n)\\n\"\n```\n\n----------------------------------------\n\nTITLE: Fragment Component with React and Relay\nDESCRIPTION: This snippet defines a React component that utilizes a GraphQL fragment to fetch and render a specific piece of user data, namely the username. This component relies on the Relay framework to facilitate data fetching. The component suspends if the required data is not fully available, integrating with React Suspense for better asynchronous data handling. Dependencies: React, react-relay.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/guided-tour/reusing-cached-data/rendering-partially-cached-data.md#2025-04-18_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nimport type {UsernameComponent_user$key} from 'UsernameComponent_user.graphql';\n\nconst React = require('React');\nconst {graphql, useFragment} = require('react-relay');\n\ntype Props = {\n  user: UsernameComponent_user$key,\n};\n\nfunction UsernameComponent(props: Props) {\n  const user = useFragment(\n    graphql`\n      fragment UsernameComponent_user on User {\n        username\n      }\n    `,\n    props.user,\n  );\n  return (...);\n}\n\nmodule.exports = UsernameComponent;\n```\n\n----------------------------------------\n\nTITLE: GraphQL Schema Definition\nDESCRIPTION: Example of a GraphQL schema file defining the API structure with types for Root, Word, and WordDefinition. This schema serves as the foundation for the Relay Compiler to validate GraphQL operations.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/guides/compiler.md#2025-04-18_snippet_2\n\nLANGUAGE: graphql\nCODE:\n```\nschema {\n  query: Root\n}\n\ntype Root {\n  dictionary: [Word]\n}\n\ntype Word {\n  id: String!\n  definition: WordDefinition\n}\n\ntype WordDefinition {\n  text: String\n  image: String\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Optimistic Response in Relay Mutation (JavaScript)\nDESCRIPTION: This snippet shows how to use an optimistic response in a Relay mutation to immediately update the local data before the server responds. It demonstrates the structure of the optimisticResponse object and how it simulates a successful server response.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v13.0.0/guided-tour/updating-data/graphql-mutations.md#2025-04-18_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport type {Environment} from 'react-relay';\nimport type {FeedbackLikeData, FeedbackLikeMutation} from 'FeedbackLikeMutation.graphql';\n\nconst {commitMutation, graphql} = require('react-relay');\n\nfunction commitFeedbackLikeMutation(\n  environment: Environment,\n  feedbackID: string,\n  input: FeedbackLikeData,\n) {\n  return commitMutation<FeedbackLikeMutation>(environment, {\n    mutation: graphql`\n      mutation FeedbackLikeMutation($input: FeedbackLikeData!)\n        @raw_response_type {\n        feedback_like(data: $input) {\n          feedback {\n            id\n            viewer_does_like\n          }\n        }\n      }\n    `,\n    variables: {input},\n    optimisticResponse: {\n      feedback_like: {\n        feedback: {\n          id: feedbackID,\n          viewer_does_like: true,\n        },\n      },\n    },\n    onCompleted: () => {} /* Mutation completed */,\n    onError: error => {} /* Mutation errored */,\n  });\n}\n\nmodule.exports = {commit: commitFeedbackLikeMutation};\n```\n\n----------------------------------------\n\nTITLE: Refetching Queries Using useLazyLoadQuery in React\nDESCRIPTION: Demonstrates how to refetch a query with different variables using useLazyLoadQuery. It shows how to update query arguments and use a fetchKey to ensure the query is fully re-evaluated and refetched.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/guided-tour/refetching/refetching-queries-with-different-data.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * App.react.js\n */\nconst AppQuery = require('__generated__/AppQuery.graphql');\n\nfunction App(props: Props) {\n  const [queryArgs, setQueryArgs] = useState({\n    options: {fetchKey: 0},\n    variables: {id: '4'},\n  });\n\n  const refetch = useCallback(() => {\n    // Trigger a re-render of useLazyLoadQuery with new variables,\n    // *and* an updated fetchKey.\n    // The new fetchKey will ensure that the query is fully\n    // re-evaluated and refetched.\n    setQueryArgs(prev => ({\n      options: {\n        fetchKey: (prev?.options.fetchKey ?? 0) + 1,\n      },\n      variables: {id: 'different-id'}\n    }));\n  }, [/* ... */]);\n\n  return (\n    <React.Suspense fallback=\"Loading query...\">\n      <MainContent\n        refetch={refetch}\n        queryArgs={queryArgs}\n      />\n    </React.Suspense>\n  );\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * MainContent.react.js\n */\n// Fetches and renders the query, given the fetch options\nfunction MainContent(props) {\n  const {refetch, queryArgs} = props;\n  const data = useLazyLoadQuery(\n    graphql`\n      query AppQuery($id: ID!) {\n        user(id: $id) {\n          name\n          friends {\n            count\n          }\n        }\n      }\n    `,\n    queryArgs.variables,\n    queryArgs.options,\n  );\n\n  return (\n    <>\n      <h1>{data.user?.name}</h1>\n      <div>Friends count: {data.user.friends?.count}</div>\n      <Button\n        onClick={() => refetch()}>\n        Fetch latest count\n      </Button>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using commitLocalUpdate in Relay\nDESCRIPTION: Example showing how to use commitLocalUpdate API to make local updates to the Relay store. Takes an environment and updater function as parameters to imperatively mutate store data.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/guided-tour/updating-data/local-data-updates.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport type {Environment} from 'react-relay';\n\nconst {commitLocalUpdate, graphql} = require('react-relay');\n\nfunction commitCommentCreateLocally(\n  environment: Environment,\n  feedbackID: string,\n) {\n  return commitLocalUpdate(environment, store => {\n    // Imperatively mutate the store here\n  });\n}\n\nmodule.exports = {commit: commitCommentCreateLocally};\n```\n\n----------------------------------------\n\nTITLE: Implementing Story Component with Like Button in React/Relay\nDESCRIPTION: TSX code showing how to integrate a Like button into a Story component, including fragment spreading and component composition.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/tutorial/mutations-updates.md#2025-04-18_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n// change-line\nimport StoryLikeButton from './StoryLikeButton';\n\n...\n\nconst StoryFragment = graphql`\n  fragment StoryFragment on Story {\n    title\n    summary\n    // ... etc\n    // change-line\n    ...StoryLikeButtonFragment\n  }\n`;\n\n...\n\nexport default function Story({story}: Props) {\n  const data = useFragment(StoryFragment, story);\n  return (\n    <Card>\n      <PosterByline person={data.poster} />\n      <Heading>{data.title}</Heading>\n      <Timestamp time={data.posterAt} />\n      <Image image={story.thumbnail} width={400} height={400} />\n      <StorySummary summary={data.summary} />\n      // change-line\n      <StoryLikeButton story={data} />\n      <StoryCommentsSection story={data} />\n    </Card>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Composing Fragments into Queries with React and Relay\nDESCRIPTION: This code demonstrates how to compose fragments into queries using React and Relay. It shows the implementation of a query component that includes a fragment and passes the fragment reference to a child component.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/guided-tour/rendering/fragments.md#2025-04-18_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * App.react.js\n *\n * Query Component\n */\n\nimport type {AppQuery} from 'AppQuery.graphql';\nimport type {PreloadedQuery} from 'react-relay';\n\nconst React = require('React');\nconst {graphql, usePreloadedQuery} = require('react-relay');\n\nconst UserComponent = require('./UserComponent.react');\n\ntype Props = {\n  appQueryRef: PreloadedQuery<AppQuery>,\n}\n\nfunction App({appQueryRef}) {\n  const data = usePreloadedQuery(\n    graphql`\n      query AppQuery($id: ID!) {\n        user(id: $id) {\n          name\n\n          # Include child fragment:\n          ...UserComponent_user\n        }\n      }\n    `,\n    appQueryRef,\n  );\n\n  return (\n    <>\n      <h1>{data.user?.name}</h1>\n      {/* Render child component, passing the fragment reference: */}\n      <UserComponent user={data.user} />\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Globally Invalidating Relay Store\nDESCRIPTION: Method to mark all cached data as stale, forcing complete refetch of store contents when next evaluated\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/guided-tour/reusing-cached-data/staleness-of-data.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nfunction updater(store) {\n  store.invalidateStore();\n}\n```\n\n----------------------------------------\n\nTITLE: Executing GraphQL Mutation with Relay commitMutation\nDESCRIPTION: Example showing how to execute a like mutation using Relay's commitMutation API. The code demonstrates setting up a mutation with GraphQL, providing variables, and handling the environment configuration.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/api-reference/relay-runtime/commit-mutation.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport type {FeedbackLikeMutation} from 'FeedbackLikeMutation.graphql';\nconst React = require('React');\n\nconst {graphql, commitMutation} = require('react-relay');\n\nfunction likeFeedback(environment: IEnvironment): Disposable {\n  return commitMutation<FeedbackLikeMutation>(environment, {\n    mutation: graphql`\n      mutation FeedbackLikeMutation($input: FeedbackLikeData!) {\n        feedback_like(data: $input) {\n          feedback {\n            id\n            viewer_does_like\n            like_count\n          }\n        }\n      }\n    `,\n    variables: {\n      input: {\n        id: '123',\n      },\n    },\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Refreshing Relay Query with fetchQuery (Avoiding Suspense)\nDESCRIPTION: This snippet demonstrates how to refresh a Relay query using `fetchQuery` to avoid Suspense fallback. It uses an `isRefreshing` state to prevent multiple concurrent refreshes and updates the state after the data is fetched. A `fetchPolicy` of `'store-only'` is used to avoid suspending when the data is already cached.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/guided-tour/refetching/refreshing-queries.md#2025-04-18_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * App.react.js\n */\nimport type {AppQuery as AppQueryType} from 'AppQuery.graphql';\n\nconst AppQuery = require('__generated__/AppQuery.graphql');\n\nfunction App(props: Props) {\n  const variables = {id: '4'}\n  const environment = useRelayEnvironment();\n  const [refreshedQueryOptions, setRefreshedQueryOptions] = useState(null);\n  const [isRefreshing, setIsRefreshing] = useState(false)\n\n  const refresh = useCallback(() => {\n    if (isRefreshing) { return; }\n    setIsRefreshing(true);\n\n    // fetchQuery will fetch the query and write\n    // the data to the Relay store. This will ensure\n    // that when we re-render, the data is already\n    // cached and we don't suspend\n    fetchQuery(environment, AppQuery, variables)\n      .subscribe({\n        complete: () => {\n          setIsRefreshing(false);\n\n          // *After* the query has been fetched, we update\n          // our state to re-render with the new fetchKey\n          // and fetchPolicy.\n          // At this point the data for the query should\n          // be cached, so we use the 'store-only'\n          // fetchPolicy to avoid suspending.\n          setRefreshedQueryOptions(prev => ({\n            fetchKey: (prev?.fetchKey ?? 0) + 1,\n            fetchPolicy: 'store-only',\n          }));\n        }\n        error: () => {\n          setIsRefreshing(false);\n        }\n      });\n  }, [/* ... */]);\n\n  return (\n    <React.Suspense fallback=\"Loading query...\">\n      <MainContent\n        isRefreshing={isRefreshing}\n        refresh={refresh}\n        queryOptions={refreshedQueryOptions ?? {}}\n        variables={variables}\n      />\n    </React.Suspense>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Adding React Keys Using Node IDs - Step 3\nDESCRIPTION: Complete solution showing how to add 'id' to the query and use it as a React key when mapping over multiple stories, which helps React efficiently update the DOM.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/tutorial/arrays-lists.md#2025-04-18_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nconst NewsfeedQuery = graphql`\n  query NewsfeedQuery {\n    topStories {\n      // change-line\n      id\n      ...StoryFragment\n    }\n  }\n`;\n\n...\n\nexport default function Newsfeed({}) {\n  const data = useLazyLoadQuery<NewsfeedQueryType>(NewsfeedQuery, {});\n  const stories = data.topStories;\n  return (\n    <div className=\"newsfeed\">\n      {stories.map(story => (\n        <Story\n          // change-line\n          key={story.id}\n          story={story}\n        />\n      ))}\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing GraphQL Subscriptions with graphql-ws in Relay\nDESCRIPTION: Example showing how to configure Relay's network layer using the graphql-ws library for WebSocket-based GraphQL subscriptions. Creates a WebSocket client and sets up a subscription handler that interfaces with Relay's Observable API.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/guided-tour/updating-data/graphql-subscriptions.md#2025-04-18_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport {\n    ...\n    Network,\n    Observable\n} from 'relay-runtime';\nimport { createClient } from 'graphql-ws';\n\nconst wsClient = createClient({\n  url:'ws://localhost:3000',\n});\n\nconst subscribe = (operation, variables) => {\n  return Observable.create((sink) => {\n    return wsClient.subscribe(\n      {\n        operationName: operation.name,\n        query: operation.text,\n        variables,\n      },\n      sink,\n    );\n  });\n}\n\nconst network = Network.create(fetchQuery, subscribe);\n```\n\n----------------------------------------\n\nTITLE: Inserting Edge into Connection - Relay Runtime\nDESCRIPTION: Demonstrates how to insert an edge into a Relay connection using insertEdgeAfter and insertEdgeBefore methods. It modifies the connection by adding a new edge either at the beginning or end. The code utilizes relay-runtime and works within a Relay updater function.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/guided-tour/updating-data/updating-connections.md#2025-04-18_snippet_10\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst {ConnectionHandler} = require('relay-runtime');\n\nfunction updater(store: RecordSourceSelectorProxy) {\n  const storyRecord = store.get(storyID);\n  const connectionRecord = ConnectionHandler.getConnection(\n    storyRecord,\n    'StoryComponent_story_comments_connection',\n  );\n\n  const newEdge = (...);\n\n  // Add edge to the end of the connection\n  ConnectionHandler.insertEdgeAfter(\n    connectionRecord,\n    newEdge,\n  );\n\n  // Add edge to the beginning of the connection\n  ConnectionHandler.insertEdgeBefore(\n    connectionRecord,\n    newEdge,\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Refetching Queries with useQueryLoader in React\nDESCRIPTION: Example showing how to refetch a Relay query with different variables using useQueryLoader and usePreloadedQuery hooks. Demonstrates proper Suspense boundary setup and query reference management.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/guided-tour/refetching/refetching-queries-with-different-data.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * App.react.js\n */\nconst AppQuery = require('__generated__/AppQuery.graphql');\n\nfunction App(props: Props) {\n  const variables = {id: '4'};\n  const [queryRef, loadQuery] = useQueryLoader(\n    AppQuery,\n    props.appQueryRef /* initial query ref */\n  );\n\n  const refetch = useCallback(() => {\n    // Load the query again using the same original variables.\n    // Calling loadQuery will update the value of queryRef.\n    loadQuery({id: 'different-id'});\n  }, [/* ... */]);\n\n  return (\n    <React.Suspense fallback=\"Loading query...\">\n      <MainContent\n        refetch={refetch}\n        queryRef={queryRef}\n      />\n    </React.Suspense>\n  );\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * MainContent.react.js\n */\n\n// Renders the preloaded query, given the query reference\nfunction MainContent(props) {\n  const {refetch, queryRef} = props;\n  const data = usePreloadedQuery(\n    graphql`\n      query AppQuery($id: ID!) {\n        user(id: $id) {\n          name\n          friends {\n            count\n          }\n        }\n      }\n    `,\n    queryRef,\n  );\n\n  return (\n    <>\n      <h1>{data.user?.name}</h1>\n      <div>Friends count: {data.user?.friends?.count}</div>\n      <Button\n        onClick={() => refetch()}>\n        Fetch latest count\n      </Button>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Lazy Load Query in React Relay\nDESCRIPTION: Demonstrates how to use useLazyLoadQuery hook to fetch GraphQL query data with custom variables and fetch policy. Retrieves user name by ID with store-or-network fetch strategy.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/api-reference/hooks/use-lazy-load-query.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst React = require('React');\n\nconst {graphql, useLazyLoadQuery} = require('react-relay');\n\nfunction App() {\n  const data = useLazyLoadQuery(\n    graphql`\n      query AppQuery($id: ID!) {\n        user(id: $id) {\n          name\n        }\n      }\n    `,\n    {id: 4},\n    {fetchPolicy: 'store-or-network'},\n  );\n\n return <h1>{data.user?.name}</h1>;\n}\n```\n\n----------------------------------------\n\nTITLE: Refetching with useQueryLoader in Relay\nDESCRIPTION: This snippet demonstrates how to refetch a query using the `useQueryLoader` hook in Relay. It shows how to call `loadQuery` with different variables to fetch new data and update the UI.  The `loadQuery` function is called within a useCallback hook to ensure the component re-renders with the updated data.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/guided-tour/refetching/refetching-queries-with-different-data.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * App.react.js\n */\nconst AppQuery = require('__generated__/AppQuery.graphql');\n\nfunction App(props: Props) {\n  const variables = {id: '4'};\n  const [queryRef, loadQuery] = useQueryLoader(\n    AppQuery,\n    props.appQueryRef /* initial query ref */\n  );\n\n  const refetch = useCallback(() => {\n    // Load the query again using the same original variables.\n    // Calling loadQuery will update the value of queryRef.\n    loadQuery({id: 'different-id'});\n  }, [/* ... */]);\n\n  return (\n    <React.Suspense fallback=\"Loading query...\">\n      <MainContent\n        refetch={refetch}\n        queryRef={queryRef}\n      />\n    </React.Suspense>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Refetching Queries with useQueryLoader and loadQuery in Relay\nDESCRIPTION: Example of refetching a query with different data using useQueryLoader and loadQuery. This implementation loads the query with different variables and updates the component with potentially new data, requiring a Suspense boundary to handle loading states.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v13.0.0/guided-tour/refetching/refetching-queries-with-different-data.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * App.react.js\n */\nconst AppQuery = require('__generated__/AppQuery.graphql');\n\nfunction App(props: Props) {\n  const variables = {id: '4'};\n  const [queryRef, loadQuery] = useQueryLoader<AppQueryType>(\n    AppQuery,\n    props.appQueryRef /* initial query ref */\n  );\n\n  const refetch = useCallback(() => {\n    // Load the query again using the same original variables.\n    // Calling loadQuery will update the value of queryRef.\n    loadQuery({id: 'different-id'});\n  }, [/* ... */]);\n\n  return (\n    <React.Suspense fallback=\"Loading query...\">\n      <MainContent\n        refetch={refetch}\n        queryRef={queryRef}\n      />\n    </React.Suspense>\n  );\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * MainContent.react.js\n */\nimport type {AppQuery as AppQueryType} from 'AppQuery.graphql';\n\n// Renders the preloaded query, given the query reference\nfunction MainContent(props) {\n  const {refetch, queryRef} = props;\n  const data = usePreloadedQuery<AppQueryType>(\n    graphql`\n      query AppQuery($id: ID!) {\n        user(id: $id) {\n          name\n          friends {\n            count\n          }\n        }\n      }\n    `,\n    queryRef,\n  );\n\n  return (\n    <>\n      <h1>{data.user?.name}</h1>\n      <div>Friends count: {data.user?.friends?.count}</div>\n      <Button\n        onClick={() => refetch()}>\n        Fetch latest count\n      </Button>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Executing GraphQL Query\nDESCRIPTION: This snippet executes a GraphQL query to fetch user and viewer data based on an ID, utilizing fragments to extend query fields.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/guided-tour/rendering/queries.md#2025-04-18_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nquery UserQuery($id: ID!) {\n  user(id: $id) {\n    id\n    name\n    ...UserFragment\n  }\n  viewer {\n    actor {\n      name\n    }\n  }\n}\n\nfragment UserFragment on User {\n  username\n}\n```\n\n----------------------------------------\n\nTITLE: Using useRelayEnvironment Hook in React Components\nDESCRIPTION: Example showing how to use the useRelayEnvironment hook to access the Relay environment within a React component. The hook returns the environment instance which can be used for operations like committing mutations.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/api-reference/hooks/use-relay-environment.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst React = require('React');\n\nconst {useRelayEnvironment} = require('react-relay');\n\nfunction MyComponent() {\n  const environment = useRelayEnvironment();\n\n  const handler = useCallback(() => {\n    // For example, can be used to pass the environment to functions\n    // that require a Relay environment.\n    commitMutation(environment, ...);\n  }, [environment])\n\n  return (...);\n}\n\nmodule.exports = MyComponent;\n```\n\n----------------------------------------\n\nTITLE: Fetching Queries with useQueryLoader - React Relay\nDESCRIPTION: This code snippet demonstrates fetching GraphQL data in React using the `useQueryLoader` hook from Relay. It requires importing the query and initializing a Relay environment. It fetches the query with variables and provides a reference and load function, enhancing component reusability by managing data fetching outside render logic.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/guided-tour/rendering/queries.md#2025-04-18_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nimport type {HomeTabQuery as HomeTabQueryType} from 'HomeTabQuery.graphql';\nimport type {PreloadedQuery} from 'react-relay';\n\nconst HomeTabQuery = require('HomeTabQuery.graphql')\nconst {useQueryLoader} = require('react-relay');\n\ntype Props = {\n  initialQueryRef: PreloadedQuery<HomeTabQueryType>,\n};\n\nfunction AppTabs(props) {\n  const [\n    homeTabQueryRef,\n    loadHomeTabQuery,\n  ] = useQueryLoader(\n    HomeTabQuery,\n    props.initialQueryRef, /* e.g. provided by router */\n  );\n\n  const onSelectHomeTab = () => {\n    // Start loading query for HomeTab immediately in the event handler\n    // that triggers navigation to that tab, *before* we even start\n    // rendering the target tab.\n    // Calling this function will update the value of homeTabQueryRef.\n    loadHomeTabQuery({id: '4'});\n\n    // ...\n  }\n\n  // ...\n\n  return (\n    screen === 'HomeTab' && homeTabQueryRef != null ?\n      // Pass to component that uses usePreloadedQuery\n      <HomeTab queryRef={homeTabQueryRef} /> :\n      // ...\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Comment Creation Mutation with Custom Connection Updater in Relay\nDESCRIPTION: Example implementation of commitCommentCreateMutation that modifies a connection in the Relay store. It demonstrates how to use an updater function to manually insert a new comment edge into a connection after mutation completion.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/guided-tour/updating-data/imperatively-modifying-store-data-legacy.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport type {Environment} from 'react-relay';\nimport type {CommentCreateData, CreateCommentMutation} from 'CreateCommentMutation.graphql';\n\nconst {commitMutation, graphql} = require('react-relay');\nconst {ConnectionHandler} = require('relay-runtime');\n\nfunction commitCommentCreateMutation(\n  environment: Environment,\n  feedbackID: string,\n  input: CommentCreateData,\n) {\n  return commitMutation<CreateCommentMutation>(environment, {\n    mutation: graphql`\n      mutation CreateCommentMutation($input: CommentCreateData!) {\n        comment_create(input: $input) {\n          comment_edge {\n            cursor\n            node {\n              body {\n                text\n              }\n            }\n          }\n        }\n      }\n    `,\n    variables: {input},\n    updater: (store: RecordSourceSelectorProxy, _response: ?CreateCommentMutation$data) => {\n      // we are not using _response in this example, but it is\n      // provided and statically typed.\n\n      const feedbackRecord = store.get(feedbackID);\n\n      // Get connection record\n      const connectionRecord = ConnectionHandler.getConnection(\n        feedbackRecord,\n        'CommentsComponent_comments_connection',\n      );\n\n      // Get the payload returned from the server\n      const payload = store.getRootField('comment_create');\n\n      // Get the edge inside the payload\n      const serverEdge = payload.getLinkedRecord('comment_edge');\n\n      // Build edge for adding to the connection\n      const newEdge = ConnectionHandler.buildConnectionEdge(\n        store,\n        connectionRecord,\n        serverEdge,\n      );\n\n      // Add edge to the end of the connection\n      ConnectionHandler.insertEdgeAfter(\n        connectionRecord,\n        newEdge,\n      );\n    },\n  });\n}\n\nmodule.exports = {commit: commitCommentCreateMutation};\n```\n\n----------------------------------------\n\nTITLE: Using Suspense with Relay for Partial Rendering\nDESCRIPTION: This code shows how to wrap fragment components in Suspense to enable partial rendering. This pattern allows the app to render cached data immediately while showing fallbacks for components with missing data.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v13.0.0/guided-tour/reusing-cached-data/rendering-partially-cached-data.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * HomeTab.react.js\n *\n * Query Component\n */\n\nconst React = require('React');\nconst {Suspense} = require('React');\nconst {graphql, usePreloadedQuery} = require('react-relay');\n\nconst UsernameComponent = require('./UsernameComponent.react');\n\n\nfunction HomeTab() {\n  const data = usePreloadedQuery<AppQuery>(\n    graphql`\n      query AppQuery($id: ID!) {\n        user(id: $id) {\n          name\n          ...UsernameComponent_user\n        }\n      }\n    `,\n    props.queryRef,\n  );\n\n  return (\n    <>\n      <h1>{data.user?.name}</h1>\n\n      {/*\n        Wrap the UserComponent in Suspense to allow other parts of the\n        App to be rendered even if the username is missing.\n      */}\n      <Suspense fallback={<LoadingSpinner label=\"Fetching username\" />}>\n        <UsernameComponent user={data.user} />\n      </Suspense>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Relay Compiler in JSON\nDESCRIPTION: Minimal configuration for the Relay compiler specifying the source directory, GraphQL schema location, and programming language.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/getting-started/compiler.md#2025-04-18_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"src\": \"./src\",\n  \"schema\": \"./schema.graphql\",\n  \"language\": \"typescript\"\n}\n```\n\n----------------------------------------\n\nTITLE: Adding @refetchable Directive to Fragment\nDESCRIPTION: Adding the @refetchable directive to the ContactsList fragment, which tells Relay to generate a query for refetching the fragment with different variables.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/tutorial/refetchable-fragments.md#2025-04-18_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst ContactsListFragment = graphql`\n  fragment ContactsListFragment on Viewer\n    // change-line\n    @refetchable(queryName: \"ContactsListRefetchQuery\")\n    @argumentDefinitions(\n      search: {type: \"String\", defaultValue: null}\n    )\n  {\n     // ...\n  }\n`;\n```\n\n----------------------------------------\n\nTITLE: Installing Relay Packages with Yarn\nDESCRIPTION: This code snippet demonstrates how to install the necessary Relay packages using Yarn.  It installs the `relay-runtime` and `react-relay` packages as dependencies, and the `relay-compiler` and `babel-plugin-relay` as development dependencies.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/getting-started/step-by-step-guide.md#2025-04-18_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n\"# Yarn Users\nyarn add relay-runtime react-relay\nyarn add --dev relay-compiler babel-plugin-relay\"\n```\n\n----------------------------------------\n\nTITLE: Using Error Boundary with Retry in Relay Application\nDESCRIPTION: Illustrates how to use an Error Boundary with retry functionality in a Relay application, handling query loading and error states.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/guided-tour/rendering/error-states.md#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * App.react.js\n */\n\nconst ErrorBoundaryWithRetry = require('ErrorBoundaryWithRetry');\nconst React = require('React');\n\nconst MainContent = require('./MainContent.react');\n\nconst query = require('__generated__/MainContentQuery.graphql');\n\n// NOTE: This is NOT actual production code;\n// it is only used to illustrate example\nfunction App(props) {\n  // E.g., initialQueryRef provided by router\n  const [queryRef, loadQuery] = useQueryLoader(query, props.initialQueryRef);\n\n  return (\n    <ErrorBoundaryWithRetry\n      // On retry we call loadQuery again, which will update\n      // the value of queryRef from useQueryLoader with a new\n      // fresh query reference\n      onRetry={() => loadQuery(/* ... */)}\n      fallback={({error, retry}) =>\n        <>\n          <ErrorUI error={error} />\n          {/* Render a button to retry; this will attempt to re-render the\n          content inside the boundary, i.e. the query component */}\n          <Button onPress={retry}>Retry</Button>\n        </>\n      }>\n      {/* The value of queryRef will be updated after calling\n      loadQuery again */}\n      <MainContent queryRef={queryRef} />\n    </ErrorBoundaryWithRetry>\n  );\n}\n\n/**\n * MainContent.react.js\n */\nfunction MainContent(props) {\n  const data = usePreloadedQuery(\n    graphql`...`,\n    props.queryRef\n  );\n\n  return (/* ... */);\n}\n```\n\n----------------------------------------\n\nTITLE: Using Fragment Hook in React Component\nDESCRIPTION: Implementation of useFragment hook to access fragment data in a React component\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/tutorial/fragments-1.md#2025-04-18_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useFragment } from 'react-relay';\n\nexport default function Story({story}: Props) {\n  const data = useFragment(\n    StoryFragment,\n    story,\n  );\n  return (\n    <Card>\n      <Heading>{data.title}</Heading>\n      <PosterByline poster={data.poster} />\n      <Timestamp time={data.createdAt} />\n      <Image image={data.image} />\n      <StorySummary summary={data.summary} />\n    </Card>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Relay Subscriptions with Mock Environment\nDESCRIPTION: Shows how to test a subscription function that uses requestSubscription. The test creates a mock environment, initializes the subscription, and verifies that the callback is triggered when new data arrives.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/guides/testing-relay-components.md#2025-04-18_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\n// Example subscribe function\nfunction subscribe(environment, onNext, onError, variables)\n  requestSubscription(environment, {\n    subscription: graphql`...`,\n    onNext,\n    onError,\n    variables,\n  });\n}\n\n// Example test may be written like so\ntest('it should subscribe', () => {\n  const environment = createMockEnvironment();\n  const onNext = jest.fn();\n  subscribe(environment, onNext, jest.fn(), {});\n  const operation = environment.mock.getMostRecentOperation();\n\n  act(() => {\n    environment.mock.nextValue(\n      operation,\n      MockPayloadGenerator.generate(operation)\n    );\n  });\n\n  expect(onNext).toBeCalled();\n});\n```\n\n----------------------------------------\n\nTITLE: Defining a Live Resolver for a Counter in TypeScript\nDESCRIPTION: This snippet demonstrates how to create a live resolver for a counter using the @live annotation and LiveState type. It includes a read function to get the current state and a subscribe function to listen for changes.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/guides/relay-resolvers/live-fields.md#2025-04-18_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport type { LiveState } from 'relay-runtime';\n\n/**\n * @RelayResolver Query.counter: Int\n * @live\n */\nexport function counter(): LiveState<number> {\n  return {\n    read: () => store.getState().counter,\n    subscribe: (callback) => {\n      return store.subscribe(callback);\n    },\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Relay Fragment Components\nDESCRIPTION: Shows how to test a specific Fragment component by wrapping it with a useLazyLoadQuery component. This approach allows testing individual fragments within a larger component structure.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v13.0.0/guides/testing-relay-components.md#2025-04-18_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\ntest('Fragment', () => {\n  const environment = createMockEnvironment();\n  const TestRenderer = () => {\n    const data = useLazyLoadQuery(\n      graphql`\n        query TestQuery @relay_test_operation {\n          myData: node(id: \"test-id\") {\n            # Spread the fragment you want to test here\n            ...MyFragment\n          }\n        }\n      `,\n      {},\n    );\n    return <MyFragmentComponent myData={data.myData} />\n  };\n\n  const renderer = ReactTestRenderer.create(\n    <RelayEnvironmentProvider environment={environment}>\n      <Suspense fallback=\"Loading...\">\n        <TestRenderer />\n      </Suspense>\n    </RelayEnvironmentProvider>\n  );\n\n  ReactTestRenderer.act(() => {\n    environment.mock.resolveMostRecentOperation(operation =>\n      MockPayloadGenerator.generate(operation),\n    );\n  });\n\n  expect(renderer).toMatchSnapshot();\n});\n```\n\n----------------------------------------\n\nTITLE: Relay Pagination Component with Load Next\nDESCRIPTION: This code shows a Relay component using `usePaginationFragment` to fetch and display a list of friends with pagination. The `loadNext` function is used to load more friends, preserving the original `order_by` and `search_term` values. It includes a button to trigger the loading of additional friends.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v13.0.0/guided-tour/list-data/refetching-connections.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n\"type Props = {\\n  userRef: FriendsListComponent_user$key,\\n};\\n\\nfunction FriendsListComponent(props: Props) {\\n  const userRef = props.userRef;\\n\\n  const {data, loadNext} = usePaginationFragment(\\n    graphql`\\n      fragment FriendsListComponent_user on User {\\n        name\\n        friends(order_by: $orderBy, search_term: $searchTerm)\\n          @connection(key: \\\"FriendsListComponent_user_friends_connection\\\") {\\n          edges {\\n            node {\\n              name\\n              age\\n            }\\n          }\\n        }\\n      }\\n    `,\\n    userRef,\\n  );\\n\\n  return (\\n    <>\\n      <h1>Friends of {data.name}:</h1>\\n      <List items={data.friends?.nodes}>{...}</List>\\n\\n      {/*\\n       Loading the next items will use the original order_by and search_term\\n       values used for the initial query\\n      */} \\n      <Button onClick={() => loadNext(10)}>Load more friends</Button>\\n    <>\n  );\\n}\"\n```\n\n----------------------------------------\n\nTITLE: React Component with Relay Fragment: UserComponent (Fragment)\nDESCRIPTION: This JavaScript code defines a React component `UserComponent` that uses a Relay fragment. It utilizes `useFragment` hook to read the data from the fragment reference passed as a prop. The component is designed to be part of a larger query.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/guided-tour/rendering/fragments.md#2025-04-18_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * UserComponent.react.js\n *\n * Fragment Component\n */\n\nimport type {UserComponent_user$key} from 'UserComponent_user.graphql';\n\nconst React = require('React');\nconst {graphql, useFragment} = require('react-relay');\n\ntype Props = {\n  user: UserComponent_user$key,\n};\n\nfunction UserComponent(props: Props) {\n  const data = useFragment(\n    graphql`...`,\n    props.user,\n  );\n\n  return (...);\n}\n\nmodule.exports = UserComponent;\n```\n\n----------------------------------------\n\nTITLE: Implementing Streaming Pagination with Relay usePaginationFragment\nDESCRIPTION: Example showing how to use @stream_connection directive to implement streaming pagination in a React component. The code demonstrates setting up a friends list with initial count and cursor-based pagination, allowing incremental loading of friends' data.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/guided-tour/list-data/streaming-pagination.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport type {FriendsListComponent_user$key} from 'FriendsList_user.graphql';\n\nconst React = require('React');\n\nconst {graphql, usePaginationFragment} = require('react-relay');\n\ntype Props = {\n  user: FriendsListComponent_user$key,\n};\n\nfunction FriendsListComponent(props: Props) {\n  // ...\n\n  const {\n    data,\n    loadNext,\n    hasNext,\n  } = usePaginationFragment(\n    graphql`\n      fragment FriendsListComponent_user on User\n      @refetchable(queryName: \"FriendsListPaginationQuery\") {\n        name\n        friends(first: $count, after: $cursor)\n        @stream_connection(key: \"FriendsList_user_friends\", initial_count: 2,) {\n          edges {\n            node {\n              name\n              age\n            }\n          }\n        }\n      }\n    `,\n    props.user,\n  );\n\n  return (...);\n}\n\nmodule.exports = FriendsListComponent;\n```\n\n----------------------------------------\n\nTITLE: GraphQL Schema Definition\nDESCRIPTION: Shows the type system definition for a newsfeed app, including Story, Actor, Person, and Category types.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/tutorial/graphql.md#2025-04-18_snippet_3\n\nLANGUAGE: graphql\nCODE:\n```\ntype Story {\n  id: ID!\n  category: Category\n  title: String\n  summary: String\n  thumbnail: Image\n  poster: Actor\n}\n\ninterface Actor {\n  id: ID!\n  name: String\n  profilePicture: Image\n}\n\ntype Person implements Actor {\n  id: ID!\n  name: String\n  email: String\n  profilePicture: Image\n  location: Location\n}\n\nenum Category {\n  EDUCATION\n  NEWS\n  COOKING\n}\n```\n\n----------------------------------------\n\nTITLE: Providing Relay Environment and Suspense Fallback\nDESCRIPTION: This snippet demonstrates how to provide the Relay environment to child components using `RelayEnvironmentProvider`. It also uses the `Suspense` component to handle the case where the data is still loading.  The `fallback` prop of `Suspense` specifies what to render while the data is being fetched.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v13.0.0/getting-started/step-by-step-guide.md#2025-04-18_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nfunction AppRoot(props) {\n  return (\n    <RelayEnvironmentProvider environment={RelayEnvironment}>\n      <Suspense fallback={'Loading...'}>\n        <App preloadedQuery={preloadedQuery} />\n      </Suspense>\n    </RelayEnvironmentProvider>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Relay Environment with Custom Network Layer in JavaScript\nDESCRIPTION: Demonstrates how to create a Relay Environment with a custom network layer using the Network.create helper function. The example includes a fetchQuery implementation that handles GraphQL operations via HTTP POST requests and returns the results as a Promise.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v13.0.0/guides/network-layer.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport {\n  Environment,\n  Network,\n  RecordSource,\n  Store,\n} from 'relay-runtime';\n\n// Define a function that fetches the results of an operation (query/mutation/etc)\n// and returns its results as a Promise:\nfunction fetchQuery(\n  operation,\n  variables,\n  cacheConfig,\n  uploadables,\n) {\n  return fetch('/graphql', {\n    method: 'POST',\n    headers: {\n      // Add authentication and other headers here\n      'content-type': 'application/json'\n    },\n    body: JSON.stringify({\n      query: operation.text, // GraphQL text from input\n      variables,\n    }),\n  }).then(response => {\n    return response.json();\n  });\n}\n\n// Create a network layer from the fetch function\nconst network = Network.create(fetchQuery);\nconst store = new Store(new RecordSource())\n\nconst environment = new Environment({\n  network,\n  store\n  // ... other options\n});\n\nexport default environment;\n```\n\n----------------------------------------\n\nTITLE: Consuming a Relay Resolver in a React Component\nDESCRIPTION: This example shows how to use a Relay Resolver in a React component. It demonstrates the use of useClientQuery for queries containing only client-defined fields.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/guides/relay-resolvers/introduction.md#2025-04-18_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport {useLazyLoadQuery, graphql} from 'react-relay';\nimport {useClientQuery, graphql} from 'react-relay';\n\nfunction Greeting() {\n  const data = useClientQuery(graphql`\n    query GreetingQuery {\n      greeting\n    }`, {});\n  return <p>{data.greeting}</p>;\n}\n```\n\n----------------------------------------\n\nTITLE: Newsfeed Query with Pagination\nDESCRIPTION: GraphQL query structure for paginated newsfeed stories using the viewer pattern\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/tutorial/connections-pagination.md#2025-04-18_snippet_6\n\nLANGUAGE: graphql\nCODE:\n```\nconst NewsfeedQuery = graphql`\n  query NewsfeedQuery {\n    viewer {\n      newsfeedStories(first: 3) {\n        edges {\n          node {\n            id\n            ...StoryFragment\n          }\n        }\n      }\n    }\n  }\n`;\n```\n\n----------------------------------------\n\nTITLE: Basic GraphQL Fragment Composition\nDESCRIPTION: Shows how to compose multiple GraphQL fragments together using the spread operator. Demonstrates fragment reusability and nesting capabilities.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/guided-tour/rendering/fragments.md#2025-04-18_snippet_4\n\nLANGUAGE: graphql\nCODE:\n```\nfragment UserFragment on User {\n  name\n  age\n  profile_picture(scale: 2) {\n    uri\n  }\n  ...AnotherUserFragment\n}\n\nfragment AnotherUserFragment on User {\n  username\n  ...FooUserFragment\n}\n```\n\n----------------------------------------\n\nTITLE: Error Boundary with Retry Functionality\nDESCRIPTION: Implementation of an Error Boundary component with retry capabilities for useQueryLoader/loadQuery scenarios.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/guided-tour/rendering/error-states.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * ErrorBoundaryWithRetry.react.js\n */\n\nconst React = require('React');\n\n// NOTE: This is NOT actual production code;\n// it is only used to illustrate example\nclass ErrorBoundaryWithRetry extends React.Component<Props, State> {\n  state = {error: null};\n\n  static getDerivedStateFromError(error): State {\n    return {error: error};\n  }\n\n  _retry = () => {\n    // This ends up calling loadQuery again to get and render\n    // a new query reference\n    this.props.onRetry();\n    this.setState({\n      // Clear the error\n      error: null,\n    });\n  }\n\n  render() {\n    const {children, fallback} = this.props;\n    const {error} = this.state;\n    if (error) {\n      if (typeof fallback === 'function') {\n        return fallback({error, retry: this._retry});\n      }\n      return fallback;\n    }\n    return children;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing useQueryLoader in React\nDESCRIPTION: This code snippet demonstrates the use of the useQueryLoader hook from the react-relay package. The hook manages GraphQL queries by loading, retaining, and disposing of query references in a React component. It shows how to set up the useQueryLoader hook with an AppQuery and interact with it using loadQuery and disposeQuery callbacks. Dependencies include react-relay and preloaded GraphQL queries.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v13.0.0/api-reference/hooks/use-query-loader.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport type {AppQuery as AppQueryType} from 'AppQuery.graphql';\nimport type {PreloadedQuery} from 'react-relay';\n\nconst {useQueryLoader, usePreloadedQuery} = require('react-relay');\n\nconst AppQuery = graphql`\n  query AppQuery($id: ID!) {\n    user(id: $id) {\n      name\n    }\n  }\n`;\n\ntype Props = {\n  initialQueryRef: PreloadedQuery<AppQueryType>,\n};\n\nfunction QueryFetcherExample(props: Props) {\n  const [\n    queryReference,\n    loadQuery,\n    disposeQuery,\n  ] = useQueryLoader(\n    AppQuery,\n    props.initialQueryRef, /* e.g. provided by router */\n  );\n\n  if (queryReference == null) {\n    return (\n      <Button onClick={() => loadQuery({})}> Click to reveal the name </Button>\n    );\n  }\n\n  return (\n    <>\n      <Button onClick={disposeQuery}>\n        Click to hide the name and dispose the query.\n      </Button>\n      <React.Suspense fallback=\"Loading\">\n        <NameDisplay queryReference={queryReference} />\n      </React.Suspense>\n    </>\n  );\n}\n\nfunction NameDisplay({ queryReference }) {\n  const data = usePreloadedQuery<AppQueryType>(AppQuery, queryReference);\n\n  return <h1>{data.user?.name}</h1>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Relay-Compatible GraphQL Schema with Node Interface\nDESCRIPTION: A GraphQL schema definition that implements the Node interface for object identification and includes connection patterns for pagination. The schema models Star Wars factions and ships with proper relay connections.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/guides/graphql-server-specification.md#2025-04-18_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\ninterface Node {\n  id: ID!\n}\n\ntype Faction implements Node {\n  id: ID!\n  name: String\n  ships: ShipConnection\n}\n\ntype Ship implements Node {\n  id: ID!\n  name: String\n}\n\ntype ShipConnection {\n  edges: [ShipEdge]\n  pageInfo: PageInfo!\n}\n\ntype ShipEdge {\n  cursor: String!\n  node: Ship\n}\n\ntype PageInfo {\n  hasNextPage: Boolean!\n  hasPreviousPage: Boolean!\n  startCursor: String\n  endCursor: String\n}\n\ntype Query {\n  rebels: Faction\n  empire: Faction\n  node(id: ID!): Node\n}\n```\n\n----------------------------------------\n\nTITLE: Refreshing Fragments without Suspense in React\nDESCRIPTION: This snippet shows how to refresh fragments without using Suspense, using fetchQuery to manually manage loading states. It demonstrates fetching data, updating the Relay store, and re-rendering with updated data without causing a suspension.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/guided-tour/refetching/refreshing-fragments.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport type {UserComponent_user$key} from 'UserComponent_user.graphql';\n// This type is autogenerated by Relay given @refetchable used below\nimport type {UserComponentRefreshQuery} from 'UserComponentRefreshQuery.graphql';\n\ntype Props = {\n  user: UserComponent_user$key,\n};\n\nfunction UserComponent(props: Props) {\n  const [data, refetch] = useRefetchableFragment<UserComponentRefreshQuery, _>(\n    graphql`\n      fragment UserComponent_user on User\n      # @refetchable makes it so Relay autogenerates a query for\n      # fetching this fragment\n      @refetchable(queryName: \"UserComponentRefreshQuery\") {\n        id\n        name\n        friends {\n          count\n        }\n      }\n    `,\n    props.user,\n  );\n\n  const [isRefreshing, setIsRefreshing] = useState(false);\n  const refresh = useCallback(() => {\n    if (isRefreshing) { return; }\n    setIsRefreshing(true);\n\n    // fetchQuery will fetch the query and write\n    // the data to the Relay store. This will ensure\n    // that when we re-render, the data is already\n    // cached and we don't suspend\n    fetchQuery(environment, AppQuery, variables)\n      .subscribe({\n        complete: () => {\n          setIsRefreshing(false);\n\n          // *After* the query has been fetched, we call\n          // refetch again to re-render with the updated data.\n          // At this point the data for the query should\n          // be cached, so we use the 'store-only'\n          // fetchPolicy to avoid suspending.\n          refetch({}, {fetchPolicy: 'store-only'});\n        },\n        error: () => {\n          setIsRefreshing(false);\n        }\n      });\n  }, [/* ... */]);\n\n  return (\n    <>\n      <h1>{data.name}</h1>\n      <div>Friends count: {data.friends?.count}</div>\n      <Button\n        disabled={isRefreshing}\n        onClick={() => refresh()}>\n        Fetch latest count {isRefreshing ? <LoadingSpinner /> : null}\n      </Button>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Bi-directional Pagination with usePaginationFragment in React and Relay\nDESCRIPTION: Shows how to use usePaginationFragment to implement bi-directional pagination. It includes both forward and backward pagination controls, using the before, last, after, and first connection arguments.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/guided-tour/list-data/advanced-pagination.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport type {FriendsListComponent_user$key} from 'FriendsListComponent_user.graphql';\n\nconst React = require('React');\nconst {Suspense} = require('React');\n\nconst {graphql, usePaginationFragment} = require('react-relay');\n\ntype Props = {\n  userRef: FriendsListComponent_user$key,\n};\n\nfunction FriendsListComponent(props: Props) {\n  const {\n    data,\n    loadPrevious,\n    hasPrevious,\n    // ... forward pagination values\n  } = usePaginationFragment(\n    graphql`\n      fragment FriendsListComponent_user on User {\n        name\n        friends(after: $after, before: $before, first: $first, last: $last)\n          @connection(key: \"FriendsListComponent_user_friends_connection\") {\n          edges {\n            node {\n              name\n              age\n            }\n          }\n        }\n      }\n    `,\n    userRef,\n  );\n\n  return (\n    <>\n      <h1>Friends of {data.name}:</h1>\n      <List items={data.friends?.edges.map(edge => edge.node)}>\n        {node => {\n          return (\n            <div>\n              {node.name} - {node.age}\n            </div>\n          );\n        }}\n      </List>\n\n      {hasPrevious ? (\n        <Button onClick={() => loadPrevious(10)}>\n          Load more friends\n        </Button>\n      ) : null}\n\n      {/* Forward pagination controls can go simultaneously here */}\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using MatchContainer for Dynamic Component Rendering in React\nDESCRIPTION: This React component demonstrates how to use MatchContainer to render the dynamically selected component based on the 3D selection. It uses the useFragment hook from react-relay.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/guides/data-driven-dependencies/server-3d.md#2025-04-18_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nconst React = require('React');\nconst {Suspense} = React;\nconst {graphql, useFragment, MatchContainer} = require('react-relay');\n\nfunction CommentRenderer(props) {\n  const comment = useFragment(\n    /* fragment from above */,\n    props.comment,\n  );\n\n  if (comment.comment_content_renderer == null) {\n    // Handle cases where the field failed to load or was null\n    return null;\n  }\n\n  // MatchContainer may suspend while loading the component/its data,\n  // consider wrapping with React.Suspense.\n  return (\n    <Suspense fallback={null}>\n      <MatchContainer\n        // data for field containing at-module selection\n        match={comment.comment_content_renderer}\n        props={{/* other props */}}\n      />\n    </Suspense>\n  );\n}\nmodule.exports = CommentRenderer;\n```\n\n----------------------------------------\n\nTITLE: Defining GraphQL Query for Newsfeed\nDESCRIPTION: GraphQL query definition using the graphql tag from relay-runtime. This query fetches data for a top story including title, summary, poster details, and thumbnail.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/tutorial/queries-1.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { graphql } from 'relay-runtime';\n\nconst NewsfeedQuery = graphql`\n  query NewsfeedQuery {\n    topStory {\n      title\n      summary\n      poster {\n        name\n        profilePicture {\n          url\n        }\n      }\n      thumbnail {\n        url\n      }\n    }\n  }\n`;\n```\n\n----------------------------------------\n\nTITLE: Comments Section Implementation with Pagination\nDESCRIPTION: Shows the implementation of a paginated comments section using Relay's connection pattern, including the fragment definition and component rendering logic.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/tutorial/connections-pagination.md#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst StoryCommentsSectionFragment = graphql`\n fragment StoryCommentsSectionFragment on Story {\n  comments(first: 3) {\n    edges {\n      node {\n        ...CommentFragment\n      }\n    }\n    pageInfo {\n      hasNextPage\n    }\n  }\n };\n`;\n\nfunction StoryCommentsSection({story}) {\n  const data = useFragment(StoryCommentsSectionFragment, story);\n  const onLoadMore = () => {/* TODO */};\n  return (\n    <>\n      {data.comments.edges.map(commentEdge =>\n        <Comment comment={commentEdge.node} />\n      )}\n      {data.comments.pageInfo.hasNextPage && (\n        <LoadMoreCommentsButton onClick={onLoadMore} />\n      )}\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Retry Logic in ErrorBoundary\nDESCRIPTION: This snippet shows how to create an ErrorBoundary component that offers retry functionality to reload queries after an error has occurred.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/guided-tour/rendering/error-states.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * ErrorBoundaryWithRetry.react.js\n */\n\nconst React = require('React');\n\n// NOTE: This is NOT actual production code;\n// it is only used to illustrate example\nclass ErrorBoundaryWithRetry extends React.Component<Props, State> {\n  state = {error: null};\n\n  static getDerivedStateFromError(error): State {\n    return {error: error};\n  }\n\n  _retry = () => {\n    // This ends up calling loadQuery again to get and render\n    // a new query reference\n    this.props.onRetry();\n    this.setState({\n      // Clear the error\n      error: null,\n    });\n  }\n\n  render() {\n    const {children, fallback} = this.props;\n    const {error} = this.state;\n    if (error) {\n      if (typeof fallback === 'function') {\n        return fallback({error, retry: this._retry});\n      }\n      return fallback;\n    }\n    return children;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Nested GraphQL Fragments\nDESCRIPTION: This snippet demonstrates how to compose GraphQL fragments by including one fragment within another. It shows the structure for defining nested fragments on a User type.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/guided-tour/rendering/fragments.md#2025-04-18_snippet_4\n\nLANGUAGE: graphql\nCODE:\n```\nfragment UserFragment on User {\n  name\n  age\n  profile_picture(scale: 2) {\n    uri\n  }\n  ...AnotherUserFragment\n}\n\nfragment AnotherUserFragment on User {\n  username\n  ...FooUserFragment\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Fragment Component using Relay\nDESCRIPTION: Defines a React fragment component 'UserComponent' that utilizes Relay's 'useFragment' to access and render data passed as a fragment reference.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v13.0.0/guided-tour/rendering/fragments.md#2025-04-18_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\n\"/**\\n * UserComponent.react.js\\n *\\n * Fragment Component\\n */\\n\\nimport type {UserComponent_user$key} from 'UserComponent_user.graphql';\\n\\nconst React = require('React');\\nconst {graphql, useFragment} = require('react-relay');\\n\\ntype Props = {\\n  user: UserComponent_user$key,\\n};\\n\\nfunction UserComponent(props: Props) {\\n  const data = useFragment(\\n    graphql`...`,\\n    props.user,\\n  );\\n\\n  return (...);\\n}\\n\\nmodule.exports = UserComponent;\n```\n\n----------------------------------------\n\nTITLE: Implementing Complex Mutation with Optimistic Updates in Relay\nDESCRIPTION: This snippet shows a full example of a complex mutation scenario in Relay, including optimisticResponse, optimisticUpdater, and updater functions to handle creating a new comment and updating connections.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v13.0.0/guided-tour/updating-data/graphql-mutations.md#2025-04-18_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport type {Environment} from 'react-relay';\nimport type {CommentCreateData, CreateCommentMutation} from 'CreateCommentMutation.graphql';\n\nconst {commitMutation, graphql} = require('react-relay');\nconst {ConnectionHandler} = require('relay-runtime');\n\nfunction commitCommentCreateMutation(\n  environment: Environment,\n  feedbackID: string,\n  input: CommentCreateData,\n) {\n  return commitMutation<CreateCommentMutation>(environment, {\n    mutation: graphql`\n      mutation CreateCommentMutation($input: CommentCreateData!) {\n        comment_create(input: $input) {\n          feedback {\n            id\n            viewer_has_commented\n          }\n          comment_edge {\n            cursor\n            node {\n              body {\n                text\n              }\n            }\n          }\n        }\n      }\n    `,\n    variables: {input},\n    onCompleted: () => {},\n    onError: error => {},\n\n    // Optimistically set the value for `viewer_has_commented`\n    optimisticResponse: {\n      feedback: {\n        id: feedbackID,\n        viewer_has_commented: true,\n      },\n    },\n\n    // Optimistically add a new comment to the comments connection\n    optimisticUpdater: store => {\n      const feedbackRecord = store.get(feedbackID);\n      const connectionRecord = ConnectionHandler.getConnection(\n        userRecord,\n        'CommentsComponent_comments_connection',\n      );\n\n      // Create a new local Comment from scratch\n      const id = `client:new_comment:${randomID()}`;\n      const newCommentRecord = store.create(id, 'Comment');\n\n      // ... update new comment with content\n\n      // Create new edge from scratch\n      const newEdge = ConnectionHandler.createEdge(\n        store,\n        connectionRecord,\n        newCommentRecord,\n        'CommentEdge' /* GraphQl Type for edge */,\n      );\n\n      // Add edge to the end of the connection\n      ConnectionHandler.insertEdgeAfter(connectionRecord, newEdge);\n    },\n    updater: store => {\n      const feedbackRecord = store.get(feedbackID);\n      const connectionRecord = ConnectionHandler.getConnection(\n        userRecord,\n        'CommentsComponent_comments_connection',\n      );\n\n      // Get the payload returned from the server\n      const payload = store.getRootField('comment_create');\n\n      // Get the edge from server payload\n      const newEdge = payload.getLinkedRecord('comment_edge');\n\n      // Add edge to the end of the connection\n      ConnectionHandler.insertEdgeAfter(connectionRecord, newEdge);\n    },\n  });\n}\n\nmodule.exports = {commit: commitCommentCreateMutation};\n```\n\n----------------------------------------\n\nTITLE: Fetching Data with useLazyLoadQuery in React Component\nDESCRIPTION: Modified React component using Relay's useLazyLoadQuery hook to fetch data based on the defined GraphQL query.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/tutorial/queries-1.md#2025-04-18_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useLazyLoadQuery } from \"react-relay\";\n\nexport default function Newsfeed({}) {\n  const data = useLazyLoadQuery(\n    NewsfeedQuery,\n    {},\n  );\n  const story = data.topStory;\n  return (\n    <div className=\"newsfeed\">\n      <Story story={story} />\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using useTransition to Manage Loading State in Relay React Component\nDESCRIPTION: This snippet demonstrates how to implement the useTransition hook from React to control loading states when refetching data in a Relay component. The snippet shows how to mark a refetch operation as a transition to maintain user experience by displaying the current data while new data is being fetched.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/tutorial/refetchable-fragments.md#2025-04-18_snippet_8\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst {useState, useTransition} = React;\n\nfunction ContactsList({viewer}) {\n  const [isPending, startTransition] = useTransition();\n  const [searchString, setSearchString] = useState('');\n  const [data, refetch] = useRefetchableFragment(ContactsListFragment, viewer);\n  const onSearchStringChanged = (value) => {\n    setSearchString(value);\n    startTransition(() => {\n      refetch({search: value});\n    });\n  };\n  return (\n    <Card dim={true}>\n      <h3>Contacts</h3>\n      <SearchInput\n        value={searchString}\n        onChange={onSearchStringChanged}\n        isPending={isPending}\n      />\n      {data.contacts.map(contact =>\n        <ContactRow key={contact.id} contact={contact} />\n      )}\n    </Card>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Pagination with usePaginationFragment in React Relay\nDESCRIPTION: Example showing how to use usePaginationFragment hook to paginate through a friends list connection. Demonstrates setting up the fragment with @connection and @refetchable directives, handling pagination states, and rendering the paginated data.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v13.0.0/api-reference/hooks/use-pagination-fragment.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport type {FriendsListPaginationQuery} from 'FriendsListPaginationQuery.graphql';\nimport type {FriendsList_user$key} from 'FriendsList_user.graphql';\n\nconst React = require('React');\n\nconst {graphql, usePaginationFragment} = require('react-relay');\n\ntype Props = {\n  user: FriendsList_user$key,\n};\n\nfunction FriendsList(props: Props) {\n  const {\n    data,\n    loadNext,\n    loadPrevious,\n    hasNext,\n    hasPrevious,\n    isLoadingNext,\n    isLoadingPrevious,\n    refetch, // For refetching connection\n  } = usePaginationFragment<FriendsListPaginationQuery, _>(\n    graphql`\n      fragment FriendsListComponent_user on User\n      @refetchable(queryName: \"FriendsListPaginationQuery\") {\n        name\n        friends(first: $count, after: $cursor)\n        @connection(key: \"FriendsList_user_friends\") {\n          edges {\n            node {\n              name\n              age\n            }\n          }\n        }\n      }\n    `,\n    props.user,\n  );\n\n  return (\n    <>\n      <h1>Friends of {data.name}:</h1>\n\n      <List items={data.friends?.edges.map(edge => edge.node)}>\n        {node => {\n          return (\n            <div>\n              {node.name} - {node.age}\n            </div>\n          );\n        }}\n      </List>\n      <Button onClick={() => loadNext(10)}>Load more friends</Button>\n    </>\n  );\n}\n\nmodule.exports = FriendsList;\n```\n\n----------------------------------------\n\nTITLE: Implementing Missing Field Handlers in Relay Environment\nDESCRIPTION: Configuring the Relay Environment with missing field handlers to recognize when different query patterns reference the same data, enabling data reuse between queries like user and node queries.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v13.0.0/guided-tour/reusing-cached-data/filling-in-missing-data.md#2025-04-18_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nconst {ROOT_TYPE, Environment} = require('relay-runtime');\n\nconst missingFieldHandlers = [\n  {\n    handle(field, record, argValues): ?string {\n      if (\n        record != null &&\n        record.__typename === ROOT_TYPE &&\n        field.name === 'user' &&\n        argValues.hasOwnProperty('id')\n      ) {\n        // If field is user(id: $id), look up the record by the value of $id\n        return argValues.id;\n      }\n      if (\n        record != null &&\n        record.__typename === ROOT_TYPE &&\n        field.name === 'story' &&\n        argValues.hasOwnProperty('story_id')\n      ) {\n        // If field is story(story_id: $story_id), look up the record by the\n        // value of $story_id.\n        return argValues.story_id;\n      }\n      return undefined;\n    },\n    kind: 'linked',\n  },\n];\n\nconst environment = new Environment({/*...*/, missingFieldHandlers});\n```\n\n----------------------------------------\n\nTITLE: Updating Viewer's Name using readUpdatableQuery in Relay\nDESCRIPTION: This code snippet demonstrates how to use the readUpdatableQuery API in Relay to update a viewer's name in response to an event. It includes a React component that renders a form for updating the name and uses commitLocalUpdate to perform the update.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/guided-tour/updating-data/imperatively-modifying-store-data.md#2025-04-18_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\n// NameUpdater.react.js\nfunction NameUpdater({ queryRef }: {\n  queryRef: NameUpdater_viewer$key,\n}) {\n  const environment = useRelayEnvironment();\n  const data = useFragment(\n    graphql`\n      fragment NameUpdater_viewer on Viewer {\n        name\n      }\n    `,\n    queryRef\n  );\n  const [newName, setNewName] = useState(data?.viewer?.name);\n  const onSubmit = () => {\n    commitLocalUpdate(environment, store => {\n      const {updatableData} = store.readUpdatableQuery(\n        graphql`\n          query NameUpdaterUpdateQuery @updatable {\n            viewer {\n              name\n            }\n          }\n        `,\n        {}\n      );\n      const viewer = updatableData.viewer;\n      if (viewer != null) {\n        viewer.name = newName;\n      }\n    });\n  };\n\n  // etc\n}\n```\n\n----------------------------------------\n\nTITLE: Refetching Fragment without Suspense using fetchQuery in React and Relay\nDESCRIPTION: This code snippet shows how to refetch a fragment without triggering Suspense by using fetchQuery. It manually manages a loading state and ensures the data is cached before calling refetch with a 'store-only' fetch policy.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/guided-tour/refetching/refetching-fragments-with-different-data.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport type {CommentBodyRefetchQuery} from 'CommentBodyRefetchQuery.graphql';\nimport type {CommentBody_comment$key} from 'CommentBody_comment.graphql';\n\ntype Props = {\n  comment: CommentBody_comment$key,\n};\n\nfunction CommentBody(props: Props) {\n  const [data, refetch] = useRefetchableFragment<CommentBodyRefetchQuery, _>(\n    graphql`\n      fragment CommentBody_comment on Comment\n      @refetchable(queryName: \"CommentBodyRefetchQuery\") {\n        body(lang: $lang) {\n          text\n        }\n      }\n    `,\n    props.comment,\n  );\n\n  const [isRefetching, setIsRefreshing] = useState(false)\n  const refetchTranslation = () => {\n    if (isRefetching) { return; }\n    setIsRefreshing(true);\n\n    fetchQuery(environment, AppQuery, variables)\n      .subscribe({\n        complete: () => {\n          setIsRefreshing(false);\n          refetch({lang: 'SPANISH'}, {fetchPolicy: 'store-only'});\n        },\n        error: () => {\n          setIsRefreshing(false);\n        }\n      });\n  };\n\n  return (\n    <>\n      <p>{data.body?.text}</p>\n      <Button\n        disabled={isRefetching}\n        onClick={() => refetchTranslation()}>\n        Translate Comment {isRefetching ? <LoadingSpinner /> : null}\n      </Button>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Network Layer with graphql-ws for GraphQL Subscriptions in JavaScript\nDESCRIPTION: This snippet demonstrates how to configure the Network Layer using the 'graphql-ws' library to handle GraphQL subscriptions over WebSockets. It creates a WebSocket client and defines a subscribe function that creates an Observable for each subscription operation.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/guided-tour/updating-data/graphql-subscriptions.md#2025-04-18_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport {\n    ...\n    Network,\n    Observable\n} from 'relay-runtime';\nimport { createClient } from 'graphql-ws';\n\nconst wsClient = createClient({\n  url:'ws://localhost:3000',\n});\n\nconst subscribe = (operation, variables) => {\n  return Observable.create((sink) => {\n    return wsClient.subscribe(\n      {\n        operationName: operation.name,\n        query: operation.text,\n        variables,\n      },\n      sink,\n    );\n  });\n}\n\nconst network = Network.create(fetchQuery, subscribe);\n```\n\n----------------------------------------\n\nTITLE: Using commitLocalUpdate in Relay for Local Store Updates\nDESCRIPTION: This snippet demonstrates how to use commitLocalUpdate to make local updates to the Relay store. It defines a function that takes an environment and feedbackID, then calls commitLocalUpdate with an updater function to imperatively mutate the store.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/guided-tour/updating-data/local-data-updates.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport type {Environment} from 'react-relay';\n\nconst {commitLocalUpdate, graphql} = require('react-relay');\n\nfunction commitCommentCreateLocally(\n  environment: Environment,\n  feedbackID: string,\n) {\n  return commitLocalUpdate(environment, store => {\n    // Imperatively mutate the store here\n  });\n}\n\nmodule.exports = {commit: commitCommentCreateLocally};\n```\n\n----------------------------------------\n\nTITLE: Using Client-Only Query with useClientQuery Hook (TypeScript)\nDESCRIPTION: Demonstrates how to use the useClientQuery hook for queries that contain only client fields. This hook is used instead of usePreloadedQuery or useLazyLoadQuery when no network request is needed.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/api-reference/relay-resolvers/runtime-functions.md#2025-04-18_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport {useClientQuery} from 'react-relay';\n\nexport function MyComponent() {\n  const data = useClientQuery(graphql`\n    query MyQuery {\n      myIp\n    }\n  `);\n  return <div>{data.myIp}</div>;\n}\n```\n\n----------------------------------------\n\nTITLE: Composing Derived Resolvers for Shopping Cart Validation in Relay\nDESCRIPTION: This example shows how to compose multiple derived resolvers to create a complex validation logic for a shopping cart. It defines an isValid resolver for individual items and a canCheckout resolver for the entire cart.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/guides/relay-resolvers/derived-fields.md#2025-04-18_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n/**\n * @RelayResolver CheckoutItem.isValid: Boolean\n * @rootFragment CheckoutItemFragment\n */\nexport function isValid(key): boolean {\n  const item = readFragment(graphql`\n    fragment CheckoutItemFragment on CheckoutItem {\n      product {\n        price\n      }\n      quantity\n    }\n  `, key);\n  return item.product.price * item.quantity > 0;\n}\n\n/**\n * @RelayResolver ShoppingCart.canCheckout: Boolean\n * @rootFragment ShoppingCartFragment\n */\nexport function canCheckout(key): boolean {\n  const cart = readFragment(graphql`\n    fragment ShoppingCartFragment on ShoppingCart {\n      items {\n        isValid\n      }\n    }\n  `, key);\n  return cart.items.every(item => item.isValid);\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a GraphQL Query with Fragment Spreading in JavaScript\nDESCRIPTION: This snippet illustrates how to define a GraphQL query that includes a fragment spread. It fetches a story's title and author details using the previously defined AuthorDetails_author fragment.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/principles-and-architecture/thinking-in-relay.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst storyQuery = graphql`\n  query StoryQuery($storyID: ID!) {\n    story(id: $storyID) {\n      title\n      author {\n        ...AuthorDetails_author\n      }\n    }\n  }\n`;\n```\n\n----------------------------------------\n\nTITLE: Complete Like Button Implementation with Optimistic Updates\nDESCRIPTION: Full implementation of a Like button component using Relay mutations with optimistic updates, including fragment definitions and mutation handling\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/guided-tour/updating-data/graphql-mutations.md#2025-04-18_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport type {FeedbackLikeData, LikeButtonMutation} from 'LikeButtonMutation.graphql';\nimport type {LikeButton_feedback$fragmentType} from 'LikeButton_feedback.graphql';\n\nconst {useMutation, graphql} = require('react-relay');\n\nfunction LikeButton({\n  feedback: LikeButton_feedback$fragmentType,\n}) {\n  const data = useFragment(\n    graphql`\n      fragment LikeButton_feedback on Feedback {\n        __id\n        viewer_does_like @required(action: THROW)\n        like_count @required(action: THROW)\n      }\n    `,\n    feedback\n  );\n\n  const [commitMutation, isMutationInFlight] = useMutation<LikeButtonMutation>(\n    graphql`\n      mutation LikeButtonMutation($input: FeedbackLikeData!)\n      @raw_response_type {\n        feedback_like(data: $input) {\n          feedback {\n            viewer_does_like\n            like_count\n          }\n        }\n      }\n    `\n  );\n\n  const changeToLikeCount = data.viewer_does_like ? -1 : 1;\n  return <button\n    onClick={() => commitMutation({\n      variables: {\n        input: {id: data.__id},\n      },\n      optimisticResponse: {\n        feedback_like: {\n          feedback: {\n            id: data.__id,\n            viewer_does_like: !data.viewer_does_like,\n            like_count: data.like_count + changeToLikeCount,\n          },\n        },\n      },\n    })}\n    disabled={isMutationInFlight}\n  >\n    Like\n  </button>\n}\n```\n\n----------------------------------------\n\nTITLE: Mutation with @appendEdge\nDESCRIPTION: This code demonstrates a Relay mutation using the `@appendEdge` directive to add a new edge to a connection. The mutation defines a GraphQL variable `$connections` which is an array of connection IDs. The `feedbackCommentEdge` field is annotated with `@appendEdge`, specifying that the newly created edge should be appended to the connections specified in the `$connections` variable.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/guided-tour/list-data/updating-connections.md#2025-04-18_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// Get the connection ID using the `__id` field\nconst connectionID = fragmentData?.comments?.__id;\n\n// Or get it using `ConnectionHandler.getConnectionID()`\nconst connectionID = ConnectionHandler.getConnectionID(\n  '<story-id>',\n  'StoryComponent_story_comments_connection',\n);\n\n// ...\n\n// Mutation\ncommitMutation<AppendCommentMutation>(environment, {\n  mutation: graphql`\n    mutation AppendCommentMutation(\n      # Define a GraphQL variable for the connections array\n      $connections: [ID!]!\n      $input: CommentCreateInput\n    ) {\n      commentCreate(input: $input) {\n        # Use @appendEdge or @prependEdge on the edge field\n        feedbackCommentEdge @appendEdge(connections: $connections) {\n          cursor\n          node {\n            id\n          }\n        }\n      }\n    }\n  `,\n  variables: {\n    input,\n    // Pass the `connections` array\n    connections: [connectionID],\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Testing Relay with queueOperationResolver\nDESCRIPTION: These tests demonstrate how to use `queueOperationResolver` to define mock responses for Relay operations executed within a component. The first test mocks a successful data fetch, and the second mocks an error state, allowing for testing different scenarios within the component's lifecycle.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/guides/testing-relay-components.md#2025-04-18_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\n```javascript\n// Say you have a component with the QueryRenderer\nconst MyAwesomeViewRoot = require('MyAwesomeViewRoot');\nconst {\n  createMockEnvironment,\n  MockPayloadGenerator,\n} = require('relay-test-utils');\n\ntest('Data Render', async () => {\n  const environment = createMockEnvironment();\n  environment.mock.queueOperationResolver(operation =>\n    MockPayloadGenerator.generate(operation),\n  );\n\n  const renderer = render(\n    <MyAwesomeViewRoot environment={environment} />,\n  );\n\n  // At this point operation will be resolved\n  // and the data for a query will be available in the store\n  expect(await renderer.findByTestId('myButton')).toBeDefined();\n});\n\ntest('Error State', async () => {\n  const environment = createMockEnvironment();\n  environment.mock.queueOperationResolver(() =>\n    new Error('Uh-oh'),\n  );\n  const renderer = render(\n    <MyAwesomeViewRoot environment={environment} />,\n  );\n\n  expect(await renderer.findByTestId('myButton')).toBeDefined();\n});\n```\n```\n\n----------------------------------------\n\nTITLE: Using selectorAsLiveState in a Counter Resolver in TypeScript\nDESCRIPTION: This snippet shows how to use the selectorAsLiveState helper function in a live resolver for a counter field. It demonstrates a more efficient way of creating LiveState objects.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/guides/relay-resolvers/live-fields.md#2025-04-18_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n/**\n * @RelayResolver Query.counter: Int\n * @live\n */\nexport function counter(): LiveState<number> {\n  return selectorAsLiveState(getCounter);\n}\n\nfunction getCounter(state) {\n  return state.counter;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating and Inserting Edges with ConnectionHandler\nDESCRIPTION: Example of using ConnectionHandler to create new edges and insert them into a connection. This demonstrates creating an edge and adding it either at the beginning or end of the connection.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/api-reference/relay-runtime/store.md#2025-04-18_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nconst user = store.get(userID);\nconst friends = ConnectionHandler.getConnection(user, 'FriendsFragment_friends');\nconst newFriend = store.get(newFriendId);\nconst edge = ConnectionHandler.createEdge(store, friends, newFriend, 'UserEdge');\n\n// No cursor provided, append the edge at the end.\nConnectionHandler.insertEdgeAfter(friends, edge);\n\n// No cursor provided, insert the edge at the front:\nConnectionHandler.insertEdgeBefore(friends, edge);\n```\n\n----------------------------------------\n\nTITLE: Using GraphQL Variables with usePaginationFragment\nDESCRIPTION: A React component using usePaginationFragment to handle a connection with variables for ordering and filtering. This shows how to set up the basic fragment structure with variables.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/guided-tour/list-data/refetching-connections.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ntype Props = {\n  userRef: FriendsListComponent_user$key,\n};\n\nfunction FriendsListComponent(props: Props) {\n  const userRef = props.userRef;\n\n  const {data, ...} = usePaginationFragment(\n    graphql`\n      fragment FriendsListComponent_user on User {\n        name\n        friends(\n          order_by: $orderBy,\n          search_term: $searchTerm,\n          after: $cursor,\n          first: $count,\n        ) @connection(key: \"FriendsListComponent_user_friends_connection\") {\n          edges {\n            node {\n              name\n              age\n            }\n          }\n        }\n      }\n    `,\n    userRef,\n  );\n\n  return (...);\n}\n```\n\n----------------------------------------\n\nTITLE: Using useFragment Hook in Story Component\nDESCRIPTION: This code snippet uses the `useFragment` hook to access the data selected by the StoryFragment. It takes the StoryFragment and the story object as arguments and returns the data selected by the fragment. The component then uses the data to render the Story.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/tutorial/fragments-1.md#2025-04-18_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useFragment } from 'react-relay';\n\nexport default function Story({story}: Props) {\n  const data = useFragment(\n    // color1\n    StoryFragment,\n    // color2\n    story,\n  );\n  return (\n    <Card>\n      <Heading>{data.title}</Heading>\n      <PosterByline person={data.poster} />\n      <Timestamp time={data.createdAt} />\n      <Image image={data.image} />\n      <StorySummary summary={data.summary} />\n    </Card>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Subscribing to Invalidation State Changes in JavaScript\nDESCRIPTION: Through the use of 'useSubscribeToInvalidationState', this snippet allows components to subscribe to invalidation events of specific record IDs. Aimed at scenarios requiring immediate data refresh post-invalidation, the callback facilitates query reevaluation, enhancing data freshness on pages without navigation.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/guided-tour/reusing-cached-data/staleness-of-data.md#2025-04-18_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction ProfilePage(props) {\n  // Example of querying data for the current page for a given user\n  const data = usePreloadedQuery(\n    graphql`...`,\n    props.preloadedQuery,\n  )\n\n  // Here we subscribe to changes in invalidation state for the given user ID.\n  // Whenever the user with that ID is marked as stale, the provided callback will\n  // be executed\n  useSubscribeToInvalidationState([props.userID], () => {\n    // Here we can do things like:\n    // - re-evaluate the query by passing a new preloadedQuery to usePreloadedQuery.\n    // - imperatively refetch any data\n    // - render a loading spinner or gray out the page to indicate that refetch\n    //   is happening.\n  })\n\n  return (...);\n}\n```\n\n----------------------------------------\n\nTITLE: Imperatively Fetching Data with fetchQuery in React Relay using JavaScript\nDESCRIPTION: This code snippet demonstrates how to use the fetchQuery function from the react-relay package to fetch a GraphQL query imperatively outside React components. It requires a Relay Environment and a GraphQL query with matching variables. The fetchQuery function returns an observable that can be subscribed to handle the network request's lifecycle events. The environment should typically be obtained via useRelayEnvironment when used within React components.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/api-reference/relay-runtime/fetch-query.md#2025-04-18_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n// You should prefer passing an environment that was returned from useRelayEnvironment()\nconst MyEnvironment = require('MyEnvironment');\nconst {fetchQuery} = require('react-relay');\n\nfetchQuery(\n  environment,\n  graphql`\n    query AppQuery($id: ID!) {\n      user(id: $id) {\n        name\n      }\n    }\n  `,\n  {id: 4},\n)\n.subscribe({\n  start: () => {...},\n  complete: () => {...},\n  error: (error) => {...},\n  next: (data) => {...}\n});\n```\n\n----------------------------------------\n\nTITLE: Creating GraphQL Subscription with React Relay\nDESCRIPTION: This snippet demonstrates how to create a GraphQL subscription using the `requestSubscription` function from React Relay. It defines a subscription for user data and returns a disposable object to manage the subscription lifecycle. The function requires a Relay environment and a configuration object, which includes the GraphQL subscription and its variables.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v13.0.0/api-reference/relay-runtime/request-subscription.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport {graphql, requestSubscription} from 'react-relay';\n\nconst subscription = graphql`\n  subscription UserDataSubscription($input: InputData!) {\n    # ...\n  }\n`;\n\nfunction createSubscription(environment: IEnvironment): Disposable {\n  return requestSubscription(environment, {\n    subscription,\n    variables: {input: {userId: '4'}},\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Fragment and Query Usage in Relay\nDESCRIPTION: Demonstrates how to use fragments and queries together in Relay, showing the relationship between usePreloadedQuery and useFragment. The example shows how fragment references are passed between components.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/glossary/glossary.md#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst queryData = usePreloadedQuery(\n  graphql`query ComponentQuery { viewer { account_user { ...Component_name } } }`,\n  {},\n);\n\n// queryData.viewer is the FragmentReference\n// Though this would usually happen in another file, you can\n// extract the value of Component_name as follows:\nconst fragmentData = useFragment(\n  graphql`fragment Component_name on User { name }`,\n  queryData?.viewer?.account_user,\n);\n```\n\n----------------------------------------\n\nTITLE: Using ErrorBoundary to Wrap Components\nDESCRIPTION: This code demonstrates how to wrap components with the ErrorBoundary to render a fallback UI when an error occurs within the wrapped components.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/guided-tour/rendering/error-states.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * App.react.js\n */\n\nconst ErrorBoundary = require('ErrorBoundary');\nconst React = require('React');\n\nconst MainContent = require('./MainContent.react');\nconst SecondaryContent = require('./SecondaryContent.react');\n\nfunction App() {\n  return (\n    // Render an ErrorSection if an error occurs within\n    // MainContent or Secondary Content\n    <ErrorBoundary fallback={error => <ErrorUI error={error} />}>  \n      <MainContent />\n      <SecondaryContent />\n    </ErrorBoundary>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Setting up RelayEnvironmentProvider with Custom Fetch Function in JavaScript\nDESCRIPTION: This snippet demonstrates how to create a Relay environment with a custom fetch function and use RelayEnvironmentProvider to make it available throughout a React application. It includes creating a network layer, store, and environment, then wrapping the main App component with the provider.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/api-reference/hooks/relay-environment-provider.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst React = require('React');\nconst {\n  Store,\n  RecordSource,\n  Environment,\n  Network,\n  Observable,\n} = require(\"relay-runtime\");\n\nconst {RelayEnvironmentProvider} = require('react-relay');\n\n/**\n * Custom fetch function to handle GraphQL requests for a Relay environment.\n *\n * This function is responsible for sending GraphQL requests over the network and returning\n * the response data. It can be customized to integrate with different network libraries or\n * to add authentication headers as needed.\n *\n * @param {RequestParameters} params - The GraphQL request parameters to send to the server.\n * @param {Variables} variables - Variables used in the GraphQL query.\n */\nfunction fetchFunction(params, variables) {\n  const response = fetch(\"http://my-graphql/api\", {\n    method: \"POST\",\n    headers: [[\"Content-Type\", \"application/json\"]],\n    body: JSON.stringify({\n      query: params.text,\n      variables,\n    }),\n  });\n\n  return Observable.from(response.then((data) => data.json()));\n};\n\n/**\n * Creates a new Relay environment instance for managing (fetching, storing) GraphQL data.\n */\nfunction createEnvironment() {\n  const network = Network.create(fetchFunction);\n  const store = new Store(new RecordSource());\n  return new Environment({ store, network });\n}\n\nconst environment = createEnvironment();\n\nfunction Root() {\n  return (\n    <RelayEnvironmentProvider environment={environment}>\n      <App />\n    </RelayEnvironmentProvider>\n  );\n}\n\nmodule.exports = Root;\n```\n\n----------------------------------------\n\nTITLE: Using Error Boundary with Retry in Relay Application\nDESCRIPTION: This example shows how to use an Error Boundary with retry functionality in a Relay application. It demonstrates error handling and retry logic for components using useQueryLoader and usePreloadedQuery.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/guided-tour/rendering/error-states.md#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * App.react.js\n */\n\nconst ErrorBoundaryWithRetry = require('ErrorBoundaryWithRetry');\nconst React = require('React');\n\nconst MainContent = require('./MainContent.react');\n\nconst query = require('__generated__/MainContentQuery.graphql');\n\n// NOTE: This is NOT actual production code;\n// it is only used to illustrate example\nfunction App(props) {\n  // E.g., initialQueryRef provided by router\n  const [queryRef, loadQuery] = useQueryLoader(query, props.initialQueryRef);\n\n  return (\n    <ErrorBoundaryWithRetry\n      // On retry we call loadQuery again, which will update\n      // the value of queryRef from useQueryLoader with a new\n      // fresh query reference\n      onRetry={() => loadQuery(/* ... */)}\n      fallback={({error, retry}) =>\n        <>\n          <ErrorUI error={error} />\n          {/* Render a button to retry; this will attempt to re-render the\n          content inside the boundary, i.e. the query component */}\n          <Button onPress={retry}>Retry</Button>\n        </>\n      }>\n      {/* The value of queryRef will be updated after calling\n      loadQuery again */}\n      <MainContent queryRef={queryRef} />\n    </ErrorBoundaryWithRetry>\n  );\n}\n\n/**\n * MainContent.react.js\n */\nfunction MainContent(props) {\n  const data = usePreloadedQuery(\n    graphql`...`,\n    props.queryRef\n  );\n\n  return (/* ... */);\n}\n```\n\n----------------------------------------\n\nTITLE: Loading GraphQL Query with Relay loadQuery\nDESCRIPTION: Demonstrates how to use loadQuery to fetch data for a GraphQL query. The example shows creating an environment, defining a query, and loading it with variables and fetch policy options. Note that the query reference should have .dispose() called when no longer needed to prevent memory leaks.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/api-reference/hooks/load-query.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst MyEnvironment = require('MyEnvironment');\nconst {loadQuery} = require('react-relay');\n\nconst query = graphql`\n  query AppQuery($id: ID!) {\n    user(id: $id) {\n      name\n    }\n  }\n`;\n\n// Note: you should generally not call loadQuery at the top level.\n// Instead, it should be called in response to an event (such a route navigation,\n// click, etc.).\nconst queryReference = loadQuery(\n  MyEnvironment,\n  query,\n  {id: '4'},\n  {fetchPolicy: 'store-or-network'},\n);\n\n// later: pass queryReference to usePreloadedQuery()\n// Note that query reference should have .dispose() called on them,\n// which is missing in this example.\n```\n\n----------------------------------------\n\nTITLE: Granular Loading UI with Multiple Suspense Components\nDESCRIPTION: Shows how to use multiple Suspense components to create more granular loading UI for different parts of the component tree.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/guided-tour/rendering/loading-states.md#2025-04-18_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n/**\n * App.react.js\n */\n\nconst React = require('React');\nconst {Suspense} = require('React');\n\nfunction App() {\n  return (\n    <>\n      {/* Show a separate loading UI for the LeftHandColumn */}\n      <Suspense fallback={<LeftColumnPlaceholder />}>\n        <LeftColumn />\n      </Suspense>\n\n      {/* Show a separate loading UI for both the Main and Secondary content */}\n      <Suspense fallback={<LoadingGlimmer />}>\n        <MainContent />\n        <SecondaryContent />\n      </Suspense>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing useQueryLoader in a React Function Component\nDESCRIPTION: This code snippet demonstrates how to use the useQueryLoader hook in a React functional component named QueryFetcherExample. It shows how to load a GraphQL query and manage its state, including displaying user data and disposing of the query.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/api-reference/hooks/use-query-loader.md#2025-04-18_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport type {PreloadedQuery} from 'react-relay';\n\nconst {useQueryLoader, usePreloadedQuery} = require('react-relay');\n\nconst AppQuery = graphql`\n  query AppQuery($id: ID!) {\n    user(id: $id) {\n      name\n    }\n  }\n`;\n\nfunction QueryFetcherExample() {\n  const [\n    queryReference,\n    loadQuery,\n    disposeQuery,\n  ] = useQueryLoader(\n    AppQuery,\n  );\n\n  if (queryReference == null) {\n    return (\n      <Button onClick={() => loadQuery({})}> Click to reveal the name </Button>\n    );\n  }\n\n  return (\n    <>\n      <Button onClick={disposeQuery}>\n        Click to hide the name and dispose the query.\n      </Button>\n      <React.Suspense fallback=\"Loading\">\n        <NameDisplay queryReference={queryReference} />\n      </React.Suspense>\n    </>\n  );\n}\n\nfunction NameDisplay({ queryReference }) {\n  const data = usePreloadedQuery(AppQuery, queryReference);\n\n  return <h1>{data.user?.name}</h1>;\n}\n```\n\n----------------------------------------\n\nTITLE: Using the GraphQL Template Tag in Relay\nDESCRIPTION: This snippet demonstrates how to use the `graphql` template tag provided by Relay to define a GraphQL query. The `graphql` tag is used to write queries, fragments, mutations, and subscriptions in the GraphQL language. The result of using the `graphql` template tag is a `GraphQLTaggedNode`; a runtime representation of the GraphQL document.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/guides/compiler.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport {graphql} from 'react-relay';\n\ngraphql`\n  query MyQuery {\n    viewer {\n      id\n    }\n  }\n`;\n```\n\n----------------------------------------\n\nTITLE: Proper Node-based Refetch Query in GraphQL\nDESCRIPTION: A proper refetch query example using the node pattern. This shows how Relay constructs refetch queries by using a node field with a stable ID to reliably fetch the exact graph node needed, regardless of how it was originally accessed.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/tutorial/refetchable-fragments.md#2025-04-18_snippet_10\n\nLANGUAGE: graphql\nCODE:\n```\nquery RefetchQuery {\n  node(id: \"abcdef\") {\n    ...PosterFragment\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Composing Fragments into Queries with React and Relay\nDESCRIPTION: This code demonstrates how to compose fragments into queries using React and Relay. It shows the implementation of a query component that includes a fragment and passes the fragment reference to a child component.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/guided-tour/rendering/fragments.md#2025-04-18_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * App.react.js\n *\n * Query Component\n */\n\nimport type {AppQuery} from 'AppQuery.graphql';\nimport type {PreloadedQuery} from 'react-relay';\n\nconst React = require('React');\nconst {graphql, usePreloadedQuery} = require('react-relay');\n\nconst UserComponent = require('./UserComponent.react');\n\ntype Props = {\n  appQueryRef: PreloadedQuery<AppQuery>,\n}\n\nfunction App({appQueryRef}) {\n  const data = usePreloadedQuery<AppQuery>(\n    graphql`\n      query AppQuery($id: ID!) {\n        user(id: $id) {\n          name\n\n          # Include child fragment:\n          ...UserComponent_user\n        }\n      }\n    `,\n    appQueryRef,\n  );\n\n  return (\n    <>\n      <h1>{data.user?.name}</h1>\n      {/* Render child component, passing the fragment reference: */}\n      <UserComponent user={data.user} />\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Like Button with Relay useMutation Hook\nDESCRIPTION: Example showing how to use the useMutation hook to implement a Like button component that executes a GraphQL mutation. Demonstrates mutation definition, handling loading state, and executing the mutation with variables and callbacks.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/api-reference/hooks/use-mutation.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport type {FeedbackLikeMutation} from 'FeedbackLikeMutation.graphql';\nconst React = require('React');\n\nconst {graphql, useMutation} = require('react-relay');\n\nfunction LikeButton() {\n  const [commit, isInFlight] = useMutation<FeedbackLikeMutation>(graphql`\n    mutation FeedbackLikeMutation($input: FeedbackLikeData!) {\n      feedback_like(data: $input) {\n        feedback {\n          id\n          viewer_does_like\n          like_count\n        }\n      }\n    }\n  `);\n\n  if (isInFlight) {\n    return <Spinner />;\n  }\n\n  return (\n    <button\n      onClick={() => {\n        commit({\n          variables: {\n            input: {\n              id: '123',\n              text: 'text',\n            },\n          },\n          onCompleted(data) {\n            console.log(data);\n          },\n        });\n      }}\n    />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Relay Environment to Enable Resolvers\nDESCRIPTION: This TypeScript snippet details how to enable Relay Resolvers in the runtime environment by using the experimental `LiveResolverStore` and setting the `ENABLE_RELAY_RESOLVERS` feature flag. It also includes a field logger function to log resolver errors. Dependencies include `relay-runtime` and proper network setup. Expected input is the fetch function for the network, and the output is a configured environment.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/guides/relay-resolvers/enabling.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Environment, RecordSource, RelayFeatureFlags } from \"relay-runtime\";\n// highlight-next-line\nimport LiveResolverStore from \"relay-runtime/lib/store/experimental-live-resolvers/LiveResolverStore\";\n\nRelayFeatureFlags.ENABLE_RELAY_RESOLVERS = true;\n\n// It is recommended to log errors thrown by Resolvers\nfunction fieldLogger(event) {\n  if(event.kind === \"relay_resolver.error\") {\n    // Log this somewhere!\n    console.warn(`Resolver error encountered in ${event.owner}.${event.fieldPath}`)\n    console.warn(event.error)\n  }\n}\n\nconst environment = new Environment({\n  network: Network.create(/* your fetch function here */),\n  store: new LiveResolverStore(new RecordSource()),\n  relayFieldLogger: fieldLogger\n});\n\n// ... create your Relay context with your environment\n```\n\n----------------------------------------\n\nTITLE: Configuring Relay Environment with Missing Field Handlers\nDESCRIPTION: This code snippet demonstrates how to configure a Relay environment with `missingFieldHandlers`.  The `missingFieldHandlers` array contains a handler function that intercepts missing 'linked' fields and attempts to resolve them based on arguments like `id` or `story_id`. This enables Relay to reuse cached data across different queries.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/guided-tour/reusing-cached-data/filling-in-missing-data.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst {ROOT_TYPE, Environment} = require('relay-runtime');\n\nconst missingFieldHandlers = [\n  {\n    handle(field, record, argValues): ?string {\n      // Make sure to add a handler for the node field\n      if (\n        record != null &&\n        record.getType() === ROOT_TYPE &&\n        field.name === 'node' &&\n        argValues.hasOwnProperty('id')\n      ) {\n        return argValues.id\n      }\n      if (\n        record != null &&\n        record.getType() === ROOT_TYPE &&\n        field.name === 'user' &&\n        argValues.hasOwnProperty('id')\n      ) {\n        // If field is user(id: $id), look up the record by the value of $id\n        return argValues.id;\n      }\n      if (\n        record != null &&\n        record.getType() === ROOT_TYPE &&\n        field.name === 'story' &&\n        argValues.hasOwnProperty('story_id')\n      ) {\n        // If field is story(story_id: $story_id), look up the record by the\n        // value of $story_id.\n        return argValues.story_id;\n      }\n      return undefined;\n    },\n    kind: 'linked',\n  },\n];\n\nconst environment = new Environment({/*...*/, missingFieldHandlers});\n\n```\n\n----------------------------------------\n\nTITLE: Defining RecordSourceSelectorProxy Interface in JavaScript\nDESCRIPTION: Defines the interface for RecordSourceSelectorProxy, which is used in updater functions to interact with the Relay store. It includes methods for creating, deleting, and retrieving records.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/api-reference/relay-runtime/store.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ninterface RecordSourceSelectorProxy {\n  create(dataID: string, typeName: string): RecordProxy;\n  delete(dataID: string): void;\n  get(dataID: string): ?RecordProxy;\n  getRoot(): RecordProxy;\n  getRootField(fieldName: string): ?RecordProxy;\n  getPluralRootField(fieldName: string): ?Array<?RecordProxy>;\n  invalidateStore(): void;\n}\n```\n\n----------------------------------------\n\nTITLE: Pass Connection ID as Mutation Variable in Relay\nDESCRIPTION: This snippet demonstrates how to pass the Connection ID as a mutation variable using `ConnectionHandler.getConnectionID`. It identifies the connection based on the story's ID and the connection key (`StoryCommentsSectionFragment_comments`). The resulting connection ID is then included in the mutation variables passed to `commitMutation` to update the connection.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/tutorial/mutations-updates.md#2025-04-18_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\n// change-line\nimport {useFragment, useMutation, ConnectionHandler} from 'react-relay';\n\n...\n\nexport default function StoryCommentsComposer({story}: Props) {\n  ...\n  function onPost() {\n    setText('');\n    // change\n    const connectionID = ConnectionHandler.getConnectionID(\n      data.id,\n      'StoryCommentsSectionFragment_comments',\n    );\n    // end-change\n    commitMutation({\n      variables: {\n        id: data.id,\n        text,\n        // change-line\n        connections: [connectionID],\n      },\n    })\n  }\n  ...\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst StoryCommentsSectionFragment = graphql`\n  fragment StoryCommentsSectionFragment on Story\n  ...\n  {\n    comments(after: $cursor, first: $count)\n     @connection(key: \"StoryCommentsSectionFragment_comments\")\n    {\n      ...\n  }\n`;\n```\n\n----------------------------------------\n\nTITLE: TypeScript Integration with Relay\nDESCRIPTION: Adding TypeScript type annotations to the Relay query implementation for type safety.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/tutorial/queries-1.md#2025-04-18_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport type {NewsfeedQuery as NewsfeedQueryType} from './__generated__/NewsfeedQuery.graphql';\n\nfunction Newsfeed({}) {\n  const data = useLazyLoadQuery<NewsfeedQueryType>(NewsfeedQuery, {});\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: React Component with Relay Fragment: UsernameSection\nDESCRIPTION: This JavaScript code defines a React component `UsernameSection` that uses a Relay fragment to fetch the username of a user. It utilizes `useFragment` hook to read the data from the fragment reference passed as a prop.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/guided-tour/rendering/fragments.md#2025-04-18_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * UsernameSection.react.js\n *\n * Child Fragment Component\n */\n\nimport type {UsernameSection_user$key} from 'UsernameSection_user.graphql';\n\nconst React = require('React');\nconst {graphql, useFragment} = require('react-relay');\n\ntype Props = {\n  user: UsernameSection_user$key,\n};\n\nfunction UsernameSection(props: Props) {\n  const data = useFragment(\n    graphql`\n      fragment UsernameSection_user on User {\n        username\n      }\n    `,\n    props.user,\n  );\n\n  return <div>{data.username ?? 'Unknown'}</div>;\n}\n\nmodule.exports = UsernameSection;\n```\n\n----------------------------------------\n\nTITLE: Defining a GraphQL Query in Relay\nDESCRIPTION: Example of a GraphQL query definition with variables and a fragment. This query requests user data and viewer information.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/guided-tour/rendering/queries.md#2025-04-18_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nquery UserQuery($id: ID!) {\n  user(id: $id) {\n    id\n    name\n    ...UserFragment\n  }\n  viewer {\n    actor {\n      name\n    }\n  }\n}\n\nfragment UserFragment on User {\n  username\n}\n```\n\n----------------------------------------\n\nTITLE: Using the graphql Tagged Template Literal in JavaScript\nDESCRIPTION: Shows how the graphql tagged template literal is used in JavaScript to define GraphQL operations. This is a core Relay pattern for defining queries and fragments in code.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v13.0.0/glossary/glossary.md#2025-04-18_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\ngraphql`...`\n```\n\n----------------------------------------\n\nTITLE: Refreshing Queries with Suspense using useLazyLoadQuery\nDESCRIPTION: Demonstrates how to refresh a query by updating fetchKey and fetchPolicy to trigger a network request and re-render component with new data\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v13.0.0/guided-tour/refetching/refreshing-queries.md#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nfunction App(props: Props) {\n  const variables = {id: '4'};\n  const [refreshedQueryOptions, setRefreshedQueryOptions] = useState(null);\n\n  const refresh = useCallback(() => {\n    setRefreshedQueryOptions(prev => ({\n      fetchKey: (prev?.fetchKey ?? 0) + 1,\n      fetchPolicy: 'network-only',\n    }));\n  }, [/* ... */]);\n\n  return (\n    <React.Suspense fallback=\"Loading query...\">\n      <MainContent\n        refresh={refresh}\n        queryOptions={refreshedQueryOptions ?? {}}\n        variables={variables}\n      />\n    </React.Suspense>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using preloadQuery_DEPRECATED with GraphQL in Relay\nDESCRIPTION: Demonstrates how to preload a GraphQL query using preloadQuery_DEPRECATED. This function is used with usePreloadedQuery hook to implement the render-as-you-fetch pattern. The example shows querying user data with a specific ID.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-experimental/RelayHooks-ApiReference.md#2025-04-18_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nconst {graphql, preloadQuery_DEPRECATED} = require('react-relay/hooks');\n\nconst AppEnvironment = require('./AppEnvironment'); // user-defined\n\nconst query = graphql`\n  query AppQuery($id: ID!) {\n    user(id: $id) {\n      name\n    }\n  }\n`;\n\nconst result = preloadQuery_DEPRECATED(\n  AppEnvironment,\n  query,\n  {id: '4'},\n  {fetchPolicy: 'store-or-network'},\n);\n\n// later: pass result to usePreloadedQuery()\n```\n\n----------------------------------------\n\nTITLE: Using queueOperationResolver for Testing Relay Components in JavaScript\nDESCRIPTION: This example demonstrates how to test a React component that uses Relay by creating a mock environment and queuing operation resolvers. It shows examples for both successful data rendering and error state testing scenarios.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/guides/testing-relay-components.md#2025-04-18_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\n// Say you have a component with the QueryRenderer\nconst MyAwesomeViewRoot = require('MyAwesomeViewRoot');\nconst {\n  createMockEnvironment,\n  MockPayloadGenerator,\n} = require('relay-test-utils');\n\ntest('Data Render', () => {\n  const environment = createMockEnvironment();\n  environment.mock.queueOperationResolver(operation =>\n    MockPayloadGenerator.generate(operation),\n  );\n\n  const renderer = ReactTestRenderer.create(\n    <MyAwesomeViewRoot environment={environment} />,\n  );\n\n  // At this point operation will be resolved\n  // and the data for a query will be available in the store\n  expect(\n    renderer.root.find(node => node.props['data-testid'] === 'myButton'),\n  ).toBeDefined();\n});\n\ntest('Error State', () => {\n  const environment = createMockEnvironment();\n  environment.mock.queueOperationResolver(() =>\n    new Error('Uh-oh'),\n  );\n  const renderer = ReactTestRenderer.create(\n    <MyAwesomeViewRoot environment={environment} />,\n  );\n\n  expect(\n    renderer.root.find(item => (item.props.testID = 'errorMessage')),\n  ).toBeDefined();\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Lazy Query Fetching with Relay's useLazyLoadQuery Hook\nDESCRIPTION: Demonstrates how to lazily fetch data using Relay's useLazyLoadQuery Hook in a React component. The example shows querying user data with GraphQL, handling variables, and rendering the fetched data. The component automatically subscribes to data updates and supports Flow type checking.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/guided-tour/rendering/queries.md#2025-04-18_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst React = require('React');\nconst {graphql, useLazyLoadQuery} = require('react-relay');\n\nfunction App() {\n  const data = useLazyLoadQuery(\n    graphql`\n      query AppQuery($id: ID!) {\n        user(id: $id) {\n          name\n        }\n      }\n    `,\n    {id: '4'},\n  );\n\n  return (\n    <h1>{data.user?.name}</h1>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Complete AssignBestFriendButton Component\nDESCRIPTION: The full implementation of the AssignBestFriendButton component including imports, fragment definitions, and the onClick handler that updates the viewer's best_friend field using commitLocalUpdate and readUpdatableQuery.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/guided-tour/updating-data/imperatively-modifying-linked-fields.md#2025-04-18_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// AssignBestFriendButton.react.js\nimport type {AssignBestFriendButton_user$key} from 'AssignBestFriendButton_user.graphql';\nimport type {RecordSourceSelectorProxy} from 'react-relay';\n\nconst {commitLocalUpdate, useFragment, useRelayEnvironment} = require('react-relay');\n\ngraphql`\n  fragment AssignBestFriendButton_assignable_user on User @assignable {\n    __typename\n  }\n`;\n\nexport default function AssignBestFriendButton({\n  someTypeRef: AssignBestFriendButton_someType$key,\n}) {\n  const data = useFragment(graphql`\n    fragment AssignBestFriendButton_someType on SomeType {\n      user {\n        name\n        ...AssignableBestFriendButton_assignable_user\n      }\n    }\n  `, someTypeRef);\n\n  const environment = useRelayEnvironment();\n  const onClick = () => {\n    const updatableData = commitLocalUpdate(\n      environment,\n      (store: RecordSourceSelectorProxy) => {\n        const {updatableData} = store.readUpdatableQuery(\n            graphql`\n              query AssignBestFriendButtonUpdatableQuery\n              @updatable {\n                viewer {\n                  best_friend {\n                    ...AssignableBestFriendButton_assignable_user\n                  }\n                }\n              }\n            `,\n            {}\n          );\n\n        if (data.user != null && updatableData.viewer != null) {\n          updatableData.viewer.best_friend = data.user;\n        }\n      }\n    );\n  };\n\n  return (<button onClick={onClick}>\n    Declare {user.name ?? 'someone with no name'} my best friend!\n  </button>);\n}\n```\n\n----------------------------------------\n\nTITLE: Using Provided Variables with @argumentDefinitions\nDESCRIPTION: Example showing how to use provided variables in a fragment with @argumentDefinitions and its corresponding provider implementation.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/api-reference/graphql/graphql-directives.md#2025-04-18_snippet_2\n\nLANGUAGE: graphql\nCODE:\n```\nfragment TodoItem_item on TodoList\n@argumentDefinitions(\n  include_timestamp: {\n    type: \"Boolean!\"\n    provider: \"Todo_ShouldIncludeTimestamp.relayprovider\"\n  }\n) {\n  timestamp @include(if: $include_timestamp)\n  text\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// Todo_ShouldIncludeTimestamp.relayprovider.js\nexport default {\n  get(): boolean {\n    // must always return true or false for a given run\n    return check('todo_should_include_timestamp');\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Preloading a Relay Query\nDESCRIPTION: This snippet demonstrates how to preload a Relay query using the `loadQuery` function. The function takes the Relay environment, the GraphQL query, and query variables as arguments. Preloading the query allows the data to be fetched before the component is rendered, improving the user experience.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v13.0.0/getting-started/step-by-step-guide.md#2025-04-18_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst preloadedQuery = loadQuery(RelayEnvironment, RepositoryNameQuery, {\n  /* query variables */\n});\n```\n\n----------------------------------------\n\nTITLE: Using useSubscription Hook in React Relay\nDESCRIPTION: This snippet demonstrates how to use the useSubscription hook in a React component. It shows the import statements, defining a GraphQL subscription, and using the hook with a memoized configuration object.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/api-reference/hooks/use-subscription.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport {graphql, useSubscription} from 'react-relay';\nimport {useMemo} from 'react';\n\nconst subscription = graphql`\n  subscription UserDataSubscription($input: InputData!) {\n    # ...\n  }\n`;\n\nfunction UserComponent({ id }) {\n  // IMPORTANT: your config should be memoized.\n  // Otherwise, useSubscription will re-render too frequently.\n  const config = useMemo(() => ({\n    variables: {id},\n    subscription,\n  }), [id, subscription]);\n\n  useSubscription(config);\n\n  return (/* ... */);\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Queries with useQueryLoader Hook in React/Relay\nDESCRIPTION: Shows how to use useQueryLoader to manage query loading and fetching, with dynamic query loading in an event handler\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/guided-tour/rendering/queries.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport type {HomeTabQuery as HomeTabQueryType} from 'HomeTabQuery.graphql';\nimport type {PreloadedQuery} from 'react-relay';\n\nconst HomeTabQuery = require('HomeTabQuery.graphql')\nconst {useQueryLoader} = require('react-relay');\n\ntype Props = {\n  initialQueryRef: PreloadedQuery<HomeTabQueryType>,\n};\n\nfunction AppTabs(props) {\n  const [\n    homeTabQueryRef,\n    loadHomeTabQuery,\n  ] = useQueryLoader(\n    HomeTabQuery,\n    props.initialQueryRef, /* e.g. provided by router */\n  );\n\n  const onSelectHomeTab = () => {\n    loadHomeTabQuery({id: '4'});\n    // ...\n  }\n\n  return (\n    screen === 'HomeTab' && homeTabQueryRef != null ?\n      <HomeTab queryRef={homeTabQueryRef} /> :\n      // ...\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Comment Mutation with Relay Store Updates\nDESCRIPTION: Example showing how to commit a mutation to create a comment and update the Relay store using updater functions. Demonstrates handling connection updates, accessing store data, and working with mutation responses.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/guided-tour/updating-data/imperatively-modifying-store-data-legacy.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport type {Environment} from 'react-relay';\nimport type {CommentCreateData, CreateCommentMutation} from 'CreateCommentMutation.graphql';\n\nconst {commitMutation, graphql} = require('react-relay');\nconst {ConnectionHandler} = require('relay-runtime');\n\nfunction commitCommentCreateMutation(\n  environment: Environment,\n  feedbackID: string,\n  input: CommentCreateData,\n) {\n  return commitMutation<CreateCommentMutation>(environment, {\n    mutation: graphql`\n      mutation CreateCommentMutation($input: CommentCreateData!) {\n        comment_create(input: $input) {\n          comment_edge {\n            cursor\n            node {\n              body {\n                text\n              }\n            }\n          }\n        }\n      }\n    `,\n    variables: {input},\n    updater: (store: RecordSourceSelectorProxy, _response: ?CreateCommentMutation$data) => {\n      // we are not using _response in this example, but it is\n      // provided and statically typed.\n\n      const feedbackRecord = store.get(feedbackID);\n\n      // Get connection record\n      const connectionRecord = ConnectionHandler.getConnection(\n        feedbackRecord,\n        'CommentsComponent_comments_connection',\n      );\n\n      // Get the payload returned from the server\n      const payload = store.getRootField('comment_create');\n\n      // Get the edge inside the payload\n      const serverEdge = payload.getLinkedRecord('comment_edge');\n\n      // Build edge for adding to the connection\n      const newEdge = ConnectionHandler.buildConnectionEdge(\n        store,\n        connectionRecord,\n        serverEdge,\n      );\n\n      // Add edge to the end of the connection\n      ConnectionHandler.insertEdgeAfter(\n        connectionRecord,\n        newEdge,\n      );\n    },\n  });\n}\n\nmodule.exports = {commit: commitCommentCreateMutation};\n```\n\n----------------------------------------\n\nTITLE: Inserting Edges into Relay Connection\nDESCRIPTION: This code snippet demonstrates how to insert a new edge into a Relay connection using ConnectionHandler.insertEdgeAfter and ConnectionHandler.insertEdgeBefore. These methods allow adding edges to the end or beginning of the connection respectively.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/guided-tour/list-data/updating-connections.md#2025-04-18_snippet_9\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst {ConnectionHandler} = require('relay-runtime');\n\nfunction updater(store: RecordSourceSelectorProxy) {\n  const storyRecord = store.get(storyID);\n  const connectionRecord = ConnectionHandler.getConnection(\n    storyRecord,\n    'StoryComponent_story_comments_connection',\n  );\n\n  const newEdge = (...);\n\n  // Add edge to the end of the connection\n  ConnectionHandler.insertEdgeAfter(\n    connectionRecord,\n    newEdge,\n  );\n\n  // Add edge to the beginning of the connection\n  ConnectionHandler.insertEdgeBefore(\n    connectionRecord,\n    newEdge,\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Pagination Fragment in React Relay\nDESCRIPTION: Demonstrates how to use usePaginationFragment to render and paginate a list of friends with forward and backward pagination capabilities\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/api-reference/hooks/use-pagination-fragment.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport type {FriendsList_user$key} from 'FriendsList_user.graphql';\n\nconst React = require('React');\n\nconst {graphql, usePaginationFragment} = require('react-relay');\n\ntype Props = {\n  user: FriendsList_user$key,\n};\n\nfunction FriendsList(props: Props) {\n  const {\n    data,\n    loadNext,\n    loadPrevious,\n    hasNext,\n    hasPrevious,\n    isLoadingNext,\n    isLoadingPrevious,\n    refetch, // For refetching connection\n  } = usePaginationFragment(\n    graphql`\n      fragment FriendsListComponent_user on User\n      @refetchable(queryName: \"FriendsListPaginationQuery\") {\n        name\n        friends(first: $count, after: $cursor)\n        @connection(key: \"FriendsList_user_friends\") {\n          edges {\n            node {\n              name\n              age\n            }\n          }\n        }\n      }\n    `,\n    props.user,\n  );\n\n  return (\n    <>\n      <h1>Friends of {data.name}:</h1>\n\n      <List items={data.friends?.edges.map(edge => edge.node)}>\n        {node => {\n          return (\n            <div>\n              {node.name} - {node.age}\n            </div>\n          );\n        }}\n      </List>\n      <Button onClick={() => loadNext(10)}>Load more friends</Button>\n    </>\n  );\n}\n\nmodule.exports = FriendsList;\n```\n\n----------------------------------------\n\nTITLE: Implementing Entry Point Loading with React Relay\nDESCRIPTION: Example showing how to use useEntryPointLoader hook to manage an EntryPoint's lifecycle. The code demonstrates loading, displaying, and disposing of an EntryPoint component with proper error boundaries and loading states.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/api-reference/entrypoint-apis/use-entrypoint-loader.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst {useEntryPointLoader, EntryPointContainer} = require('react-relay');\n\nconst ComponentEntryPoint = require('Component.entrypoint');\n\nfunction EntryPointRevealer(): React.MixedElement {\n  const environmentProvider = useMyEnvironmentProvider();\n  const [\n    entryPointReference,\n    loadEntryPoint,\n    disposeEntryPoint,\n  ] = useEntryPointLoader(environmentProvider, ComponentEntryPoint);\n\n  return (\n    <>\n      {\n        entryPointReference == null && (\n          <Button onClick={() => loadEntryPoint({})}>\n            Click to reveal the contents of the EntryPoint\n          </Button>\n        )\n      }\n      {\n        entryPointReference != null && (\n          <>\n            <Button onClick={disposeEntryPoint}>\n              Click to hide and dispose the EntryPoint.\n            </Button>\n            <Suspense fallback=\"Loading...\">\n              <EntryPointContainer\n                entryPointReference={entryPointReference}\n                props={{}}\n              />\n            </Suspense>\n          </>\n        )\n      }\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Relay Network Layer with Fetch API\nDESCRIPTION: Shows how to create a basic network layer implementation for Relay using the fetch API. The code demonstrates setting up an Environment instance with a custom network layer that handles GraphQL operations through HTTP POST requests.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/guides/network-layer.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport {\n  Environment,\n  Network,\n  RecordSource,\n  Store,\n} from 'relay-runtime';\n\n// Define a function that fetches the results of an operation (query/mutation/etc)\n// and returns its results as a Promise:\nfunction fetchQuery(\n  operation,\n  variables,\n  cacheConfig,\n  uploadables,\n) {\n  return fetch('/graphql', {\n    method: 'POST',\n    headers: {\n      // Add authentication and other headers here\n      'content-type': 'application/json'\n    },\n    body: JSON.stringify({\n      query: operation.text, // GraphQL text from input\n      variables,\n    }),\n  }).then(response => {\n    return response.json();\n  });\n}\n\n// Create a network layer from the fetch function\nconst network = Network.create(fetchQuery);\nconst store = new Store(new RecordSource())\n\nconst environment = new Environment({\n  network,\n  store\n  // ... other options\n});\n\nexport default environment;\n```\n\n----------------------------------------\n\nTITLE: Refreshing Components with Fragment Spreading in Subscriptions\nDESCRIPTION: A GraphQL subscription that spreads component fragments to automatically refresh components when subscription events occur. This approach is preferred over manually selecting specific fields.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/guided-tour/updating-data/graphql-subscriptions.md#2025-04-18_snippet_4\n\nLANGUAGE: graphql\nCODE:\n```\nsubscription FeedbackLikeSubscription($input: FeedbackLikeSubscribeData!) {\n  feedback_like_subscribe(data: $input) {\n    feedback {\n      ...FeedbackDisplay_feedback\n      ...FeedbackDetail_feedback\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Newsfeed Query with Pagination\nDESCRIPTION: Shows how to modify a basic query to use a connection-based field for pagination in a newsfeed implementation.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/tutorial/connections-pagination.md#2025-04-18_snippet_9\n\nLANGUAGE: graphql\nCODE:\n```\nconst NewsfeedQuery = graphql`\n  query NewsfeedQuery {\n    viewer {\n      newsfeedStories(first: 3) {\n        edges {\n          node {\n            id\n            ...StoryFragment\n          }\n        }\n      }\n    }\n  }\n`;\n```\n\n----------------------------------------\n\nTITLE: Converting Refetch Container to useRefetchableFragment in React Relay\nDESCRIPTION: This snippet illustrates how to migrate from a Refetch Container to useRefetchableFragment, simplifying the refetching process by integrating new inputs into the API.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/migration-and-compatibility/relay-hooks-and-legacy-container-apis.md#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as React from 'React';\nimport {graphql, createRefetchContainer} from 'react-relay';\n\nfunction CommentBody(props: Props) {\n  const relay = props.relay;\n\n  return (\n    <>\n      <p>{data.body?.text}</p>\n      <Button\n        onClick={() => relay.refetch(\n          {lang: 'SPANISH'},\n          null,\n          error => { ... },\n          {force: true}\n        )}>\n        Translate Comment\n      </Button>\n    </>\n  );\n}\n\nexport default createRefetchContainer(\n  CommentBody,\n  {\n    user: graphql`\n      fragment CommentBody_comment on Comment {\n        body(lang: $lang) {\n          text\n        }\n      }\n    `,\n  },\n\n  graphql`\n    query AppQuery($id: ID!, lang: Lang) {\n      node(id: $id) {\n        ...CommentBody_comment\n      }\n    }\n  `,\n);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as React from 'React';\nimport {graphql, useRefetchableFragment} from 'react-relay';\n\nexport default function CommentBody(props: Props) {\n  const [data, refetch] = useRefetchableFragment(\n    graphql`\n      fragment CommentBody_comment on Comment\n      @refetchable(queryName: \"CommentBodyRefetchQuery\") {\n        body(lang: $lang) {\n          text\n        }\n      }\n    `,\n    props.comment,\n  );\n\n  const handleClick = useCallback(() => {\n    refetch({lang: 'SPANISH'});\n  }, [refetch]);\n\n  return (\n    <>\n      <p>{data.body?.text}</p>\n      <Button\n        onClick={handleClick}>\n        Translate Comment\n      </Button>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using useRefetchableFragment from React Relay\nDESCRIPTION: This snippet demonstrates how to implement the useRefetchableFragment hook in a React component to fetch and re-render data for a specific fragment. It shows the GraphQL fragment structure, the component's props, and how to handle refetching when user interacts with the translated comment.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/api-reference/hooks/use-refetchable-fragment.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport type {CommentBody_comment$key} from 'CommentBody_comment.graphql';\n\nconst React = require('React');\n\nconst {graphql, useRefetchableFragment} = require('react-relay');\n\n\ntype Props = {\n  comment: CommentBody_comment$key,\n};\n\nfunction CommentBody(props: Props) {\n  const [data, refetch] = useRefetchableFragment(\n    graphql`\n      fragment CommentBody_comment on Comment\n      @refetchable(queryName: \"CommentBodyRefetchQuery\") {\n        body(lang: $lang) {\n          text\n        }\n      }\n    `,\n    props.comment,\n  );\n\n  return (\n    <>\n      <p>{data.body?.text}</p>\n      <Button\n        onClick={() => {\n          refetch({lang: 'SPANISH'}, {fetchPolicy: 'store-or-network'})\n        }}\n      >\n        Translate Comment\n      </Button>\n    </>\n  );\n}\n\nmodule.exports = CommentBody;\n```\n\n----------------------------------------\n\nTITLE: Implementing CreateFeedback Mutation with Store Updates\nDESCRIPTION: JavaScript implementation of a mutation that creates feedback and updates the store data using updater functions. Demonstrates using readUpdatableFragment to modify client-only fields.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/guided-tour/updating-data/imperatively-modifying-store-data.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport type {Environment} from 'react-relay';\nimport type {\n  FeedbackCreateData,\n  CreateFeedbackMutation,\n  CreateFeedbackMutation$data,\n} from 'CreateFeedbackMutation.graphql';\n\nconst {commitMutation, graphql} = require('react-relay');\nconst {ConnectionHandler} = require('relay-runtime');\n\nfunction commitCreateFeedbackMutation(\n  environment: Environment,\n  input: FeedbackCreateData,\n) {\n  return commitMutation<FeedbackCreateData>(environment, {\n    mutation: graphql`\n      mutation CreateFeedbackMutation($input: FeedbackCreateData!) {\n        feedback_create(input: $input) {\n          feedback {\n            id\n            ...CreateFeedback_updatable_feedback\n          }\n        }\n      }\n    `,\n    variables: {input},\n\n    updater: (store: RecordSourceSelectorProxy, response: ?CreateCommentMutation$data) => {\n      const feedbackRef = response?.feedback_create?.feedback;\n      if (feedbackRef == null) {\n        return;\n      }\n\n      const {updatableData} = store.readUpdatableFragment(\n          graphql`\n            fragment CreateFeedback_updatable_feedback on Feedback @updatable {\n              is_new_comment\n            }\n          `,\n          feedbackRef\n        );\n\n      updatableData.is_new_comment = true;\n    },\n  });\n}\n\nmodule.exports = {commit: commitCreateFeedbackMutation};\n```\n\n----------------------------------------\n\nTITLE: Using useRefetchableFragment in a React Component - JavaScript\nDESCRIPTION: This snippet demonstrates how to implement the useRefetchableFragment hook within a React component to allow refetching of fragment data based on dynamic parameters. The component subscribes to fragment data and re-renders upon data updates or refetch requests.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/api-reference/hooks/use-refetchable-fragment.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport type {CommentBodyRefetchQuery} from 'CommentBodyRefetchQuery.graphql';\nimport type {CommentBody_comment$key} from 'CommentBody_comment.graphql';\n\nconst React = require('React');\n\nconst {graphql, useRefetchableFragment} = require('react-relay');\n\n\ntype Props = {\n  comment: CommentBody_comment$key,\n};\n\nfunction CommentBody(props: Props) {\n  const [data, refetch] = useRefetchableFragment<CommentBodyRefetchQuery, _>(\n    graphql`\n      fragment CommentBody_comment on Comment\n      @refetchable(queryName: \"CommentBodyRefetchQuery\") {\n        body(lang: $lang) {\n          text\n        }\n      }\n    `,\n    props.comment,\n  );\n\n  return (\n    <>  \n      <p>{data.body?.text}</p>\n      <Button\n        onClick={() => {\n          refetch({lang: 'SPANISH'}, {fetchPolicy: 'store-or-network'})\n        }}\n      >\n        Translate Comment\n      </Button>\n    </>\n  );\n}\n\nmodule.exports = CommentBody;\n```\n\n----------------------------------------\n\nTITLE: Using Query in React Component\nDESCRIPTION: Shows how to use the useLazyLoadQuery hook to fetch data and render child components with the retrieved data. Demonstrates proper handling of nullable fields.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/principles-and-architecture/thinking-in-relay.md#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nfunction Story(props) {\n  const data = useLazyLoadQuery(storyQuery, props.storyId);\n\n  return (<>\n    <Heading>{data?.story.title}</Heading>\n    {data?.story?.author && <AuthorDetails author={data.story.author} />}\n  </>);\n}\n```\n\n----------------------------------------\n\nTITLE: Installing babel-plugin-relay\nDESCRIPTION: Command to install the Babel plugin required by Relay to convert GraphQL to runtime artifacts, along with the GraphQL dependency.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/getting-started/installation-and-setup.md#2025-04-18_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\nyarn add --dev babel-plugin-relay graphql\n```\n\n----------------------------------------\n\nTITLE: Implementing a Subscription Hook with useSubscription\nDESCRIPTION: Demonstrates how to create a custom hook using Relay's useSubscription API to manage a GraphQL subscription. It includes proper type annotations and memoization for optimal performance.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/guided-tour/updating-data/graphql-subscriptions.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport type {Environment} from 'react-relay';\nimport type {FeedbackLikeSubscribeData} from 'FeedbackLikeSubscription.graphql';\n\nconst {graphql, useSubscription} = require('react-relay');\nconst {useMemo} = require('React');\n\nfunction useFeedbackSubscription(\n  input: FeedbackLikeSubscribeData,\n) {\n  const config = useMemo(() => ({\n    subscription: graphql`\n      subscription FeedbackLikeSubscription(\n        $input: FeedbackLikeSubscribeData!\n      ) {\n        feedback_like_subscribe(data: $input) {\n          feedback {\n            like_count\n          }\n        }\n      }\n    `,\n    variables: {input},\n  }), [input]);\n\n  return useSubscription(config);\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Relay Query with usePreloadedQuery\nDESCRIPTION: Demonstrates how to use usePreloadedQuery hook to load and display query data, including query loading, suspense handling, and data rendering\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/api-reference/hooks/use-preloaded-query.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport type {AppQueryType} from 'AppQueryType.graphql';\n\nconst React = require('React');\n\nconst {graphql, useQueryLoader, usePreloadedQuery} = require('react-relay');\n\nconst AppQuery = graphql`\n  query AppQuery($id: ID!) {\n    user(id: $id) {\n      name\n    }\n  }`\n```\n\nLANGUAGE: javascript\nCODE:\n```\nfunction NameLoader(props) {\n  const [queryReference, loadQuery] = useQueryLoader(\n    AppQuery,\n    props.initialQueryRef, /* e.g. provided by router */\n  );\n\n  return (<>\n    <Button\n      onClick={() => loadQuery({id: '4'})}\n      disabled={queryReference != null}\n    >\n      Reveal your name!\n    </Button>\n    <Suspense fallback=\"Loading...\">\n      {queryReference != null\n        ? <NameDisplay queryReference={queryReference} />\n        : null\n      }\n    </Suspense>\n  </>);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nfunction NameDisplay({ queryReference }) {\n  const data = usePreloadedQuery(AppQuery, queryReference);\n\n  return <h1>{data.user?.name}</h1>;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Mutation Updater in Relay\nDESCRIPTION: This code snippet demonstrates how to implement an updater function for a comment creation mutation in Relay. It shows how to use the RecordSourceSelectorProxy to read and write data to the Relay store, and how to add a new edge to a connection.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/guided-tour/updating-data/imperatively-modifying-store-data-legacy.md#2025-04-18_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport type {Environment} from 'react-relay';\nimport type {CommentCreateData, CreateCommentMutation} from 'CreateCommentMutation.graphql';\n\nconst {commitMutation, graphql} = require('react-relay');\nconst {ConnectionHandler} = require('relay-runtime');\n\nfunction commitCommentCreateMutation(\n  environment: Environment,\n  feedbackID: string,\n  input: CommentCreateData,\n) {\n  return commitMutation<CreateCommentMutation>(environment, {\n    mutation: graphql`\n      mutation CreateCommentMutation($input: CommentCreateData!) {\n        comment_create(input: $input) {\n          comment_edge {\n            cursor\n            node {\n              body {\n                text\n              }\n            }\n          }\n        }\n      }\n    `,\n    variables: {input},\n    updater: (store: RecordSourceSelectorProxy, _response: ?CreateCommentMutation$data) => {\n      // we are not using _response in this example, but it is\n      // provided and statically typed.\n\n      const feedbackRecord = store.get(feedbackID);\n\n      // Get connection record\n      const connectionRecord = ConnectionHandler.getConnection(\n        feedbackRecord,\n        'CommentsComponent_comments_connection',\n      );\n\n      // Get the payload returned from the server\n      const payload = store.getRootField('comment_create');\n\n      // Get the edge inside the payload\n      const serverEdge = payload.getLinkedRecord('comment_edge');\n\n      // Build edge for adding to the connection\n      const newEdge = ConnectionHandler.buildConnectionEdge(\n        store,\n        connectionRecord,\n        serverEdge,\n      );\n\n      // Add edge to the end of the connection\n      ConnectionHandler.insertEdgeAfter(\n        connectionRecord,\n        newEdge,\n      );\n    },\n  });\n}\n\nmodule.exports = {commit: commitCommentCreateMutation};\n```\n\n----------------------------------------\n\nTITLE: Using requestSubscription with Updater Function\nDESCRIPTION: This JavaScript snippet shows how to use requestSubscription with an updater function in Relay. The updater function provides fine-grained control over the Relay store, allowing for manipulating data beyond simple updates, such as modifying connections.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v13.0.0/guided-tour/updating-data/graphql-subscriptions.md#2025-04-18_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport type {Environment} from 'react-relay';\nimport type {CommentCreateSubscribeData} from 'CommentCreateSubscription.graphql';\n\nconst {graphql, requestSubscription} = require('react-relay');\n\nfunction commentCreateSubscribe(\n  environment: Environment,\n  feedbackID: string,\n  input: CommentCreateSubscribeData,\n) {\n  return requestSubscription(environment, {\n    subscription: graphql`\n      subscription CommentCreateSubscription(\n        $input: CommentCreateSubscribeData!\n      ) {\n        comment_create_subscribe(data: $input) {\n          feedback_comment_edge {\n            cursor\n            node {\n              body {\n                text\n              }\n            }\n          }\n        }\n      }\n    `,\n    variables: {input},\n    updater: store => {\n      const feedbackRecord = store.get(feedbackID);\n\n      // Get connection record\n      const connectionRecord = ConnectionHandler.getConnection(\n        feedbackRecord,\n        'CommentsComponent_comments_connection',\n      );\n\n      // Get the payload returned from the server\n      const payload = store.getRootField('comment_create_subscribe');\n\n      // Get the edge inside the payload\n      const serverEdge = payload.getLinkedRecord('feedback_comment_edge');\n\n      // Build edge for adding to the connection\n      const newEdge = ConnectionHandler.buildConnectionEdge(\n        store,\n        connectionRecord,\n        serverEdge,\n      );\n\n      // Add edge to the end of the connection\n      ConnectionHandler.insertEdgeAfter(connectionRecord, newEdge);\n    },\n    onCompleted: () => {} /* Subscription established */,\n    onError: error => {} /* Subscription errored */,\n    onNext: response => {} /* Subscription payload received */,\n  });\n}\n\nmodule.exports = {subscribe: commentCreateSubscribe};\n```\n\n----------------------------------------\n\nTITLE: Avoiding Suspense When Refetching Queries in React\nDESCRIPTION: Shows how to use fetchQuery instead of loadQuery to avoid showing a Suspense fallback when refetching. This approach manually tracks the loading state and ensures the data is cached before re-rendering.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/guided-tour/refetching/refetching-queries-with-different-data.md#2025-04-18_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n/**\n * App.react.js\n */\nconst AppQuery = require('__generated__/AppQuery.graphql');\n\nfunction App(props: Props) {\n  const environment = useRelayEnvironment();\n  const [queryRef, loadQuery] = useQueryLoader(\n    AppQuery,\n    props.appQueryRef /* initial query ref */\n  );\n  const [isRefetching, setIsRefetching] = useState(false)\n\n  const refetch = useCallback(() => {\n    if (isRefetching) { return; }\n    setIsRefetching(true);\n\n    // fetchQuery will fetch the query and write\n    // the data to the Relay store. This will ensure\n    // that when we re-render, the data is already\n    // cached and we don't suspend\n    fetchQuery(environment, AppQuery, variables)\n      .subscribe({\n        complete: () => {\n          setIsRefetching(false);\n\n          // *After* the query has been fetched, we call\n          // loadQuery again to re-render with a new\n          // queryRef.\n          // At this point the data for the query should\n          // be cached, so we use the 'store-only'\n          // fetchPolicy to avoid suspending.\n          loadQuery({id: 'different-id'}, {fetchPolicy: 'store-only'});\n        },\n        error: () => {\n          setIsRefetching(false);\n        }\n      });\n  }, [/* ... */]);\n\n  return (\n    <React.Suspense fallback=\"Loading query...\">\n      <MainContent\n        isRefetching={isRefetching}\n        refetch={refetch}\n        queryRef={queryRef}\n      />\n    </React.Suspense>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a GraphQL Subscription in Relay\nDESCRIPTION: This snippet demonstrates how to define a GraphQL Subscription in Relay. The subscription allows clients to listen for changes in specified data. Dependencies include a GraphQL schema that supports subscriptions and a Relay environment to execute the query. The input parameter is a custom object defined by FeedbackLikeSubscribeData. The output is the updated feedback including its id and like_count. Note that the field names and input type must match those in the server's schema.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/glossary/glossary.md#2025-04-18_snippet_8\n\nLANGUAGE: GraphQL\nCODE:\n```\n```graphql\nsubscription FeedbackLikeSubscription($input: FeedbackLikeSubscribeData!) {\n  feedback_like_subscribe(data: $input) {\n    feedback {\n      id\n      like_count\n    }\n  }\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Implementing a Subscription Hook with useSubscription in Relay\nDESCRIPTION: Demonstrates how to create a custom hook using Relay's useSubscription API to establish a GraphQL subscription. It includes proper memoization and type annotations for best practices.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/guided-tour/updating-data/graphql-subscriptions.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport type {Environment} from 'react-relay';\nimport type {FeedbackLikeSubscribeData} from 'FeedbackLikeSubscription.graphql';\n\nconst {graphql, useSubscription} = require('react-relay');\nconst {useMemo} = require('React');\n\nfunction useFeedbackSubscription(\n  input: FeedbackLikeSubscribeData,\n) {\n  const config = useMemo({{\n    subscription: graphql`\n      subscription FeedbackLikeSubscription(\n        $input: FeedbackLikeSubscribeData!\n      ) {\n        feedback_like_subscribe(data: $input) {\n          feedback {\n            like_count\n          }\n        }\n      }\n    `,\n    variables: {{input}},\n  }}, [input])\n\n  return useSubscription(config);\n}\n```\n\n----------------------------------------\n\nTITLE: React Component with GraphQL Data Fetching\nDESCRIPTION: Demonstrate a React component that fetches repository data using the fetchGraphQL function and manages state with useState and useEffect hooks\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v13.0.0/getting-started/step-by-step-guide.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nfunction App() {\n  const [name, setName] = useState(null);\n\n  useEffect(() => {\n    let isMounted = true;\n    fetchGraphQL(`\n      query RepositoryNameQuery {\n        repository(owner: \"facebook\" name: \"relay\") {\n          name\n        }\n      }\n    `).then(response => {\n      if (!isMounted) {\n        return;\n      }\n      const data = response.data;\n      setName(data.repository.name);\n    }).catch(error => {\n      console.error(error);\n    });\n\n    return () => {\n      isMounted = false;\n    };\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <p>\n          {name != null ? `Repository: ${name}` : \"Loading\"}\n        </p>\n      </header>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Refreshing Queries Using useLazyLoadQuery in React\nDESCRIPTION: Demonstrates how to refresh a GraphQL query using useLazyLoadQuery with Suspense. Shows implementation of App and MainContent components with query refresh functionality using fetchKey and network-only fetchPolicy.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/guided-tour/refetching/refreshing-queries.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * App.react.js\n */\nconst AppQuery = require('__generated__/AppQuery.graphql');\n\nfunction App(props: Props) {\n  const variables = {id: '4'};\n  const [refreshedQueryOptions, setRefreshedQueryOptions] = useState(null);\n\n  const refresh = useCallback(() => {\n    // Trigger a re-render of useLazyLoadQuery with the same variables,\n    // but an updated fetchKey and fetchPolicy.\n    // The new fetchKey will ensure that the query is fully\n    // re-evaluated and refetched.\n    // The fetchPolicy ensures that we always fetch from the network\n    // and skip the local data cache.\n    setRefreshedQueryOptions(prev => ({\n      fetchKey: (prev?.fetchKey ?? 0) + 1,\n      fetchPolicy: 'network-only',\n    }));\n  }, [/* ... */]);\n\n  return (\n    <React.Suspense fallback=\"Loading query...\">\n      <MainContent\n        refresh={refresh}\n        queryOptions={refreshedQueryOptions ?? {}}\n        variables={variables}\n      />\n    </React.Suspense>\n  );\n```\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * MainContent.react.js\n */\n\n// Fetches and renders the query, given the fetch options\nfunction MainContent(props) {\n  const {refresh, queryOptions, variables} = props;\n  const data = useLazyLoadQuery(\n    graphql`\n      query AppQuery($id: ID!) {\n        user(id: $id) {\n          name\n          friends {\n            count\n          }\n        }\n      }\n    `,\n    variables,\n    queryOptions,\n  );\n\n  return (\n    <>\n      <h1>{data.user?.name}</h1>\n      <div>Friends count: {data.user.friends?.count}</div>\n      <Button\n        onClick={() => refresh()}>\n        Fetch latest count\n      </Button>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting a Node from a Connection in JavaScript\nDESCRIPTION: Demonstrates how to delete a node from a connection using ConnectionHandler.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/api-reference/relay-runtime/store.md#2025-04-18_snippet_31\n\nLANGUAGE: javascript\nCODE:\n```\nconst user = store.get(userID);\nconst friends = ConnectionHandler.getConnection(user, 'FriendsFragment_friends');\nConnectionHandler.deleteNode(friends, idToDelete);\n```\n\n----------------------------------------\n\nTITLE: Pagination Component Testing\nDESCRIPTION: Demonstrates testing pagination components by simulating load more functionality and verifying pagination state changes\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/guides/testing-relay-components.md#2025-04-18_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\ntest('`Pagination` Container', () => {\n  const environment = createMockEnvironment();\n  const TestRenderer = () => {\n    const data = useLazyLoadQuery(\n      graphql`\n        query TestQuery @relay_test_operation {\n          myConnection: node(id: \"test-id\") {\n            connection {\n              ...MyConnectionFragment\n            }\n          }\n        }\n      `,\n      {},\n    );\n    return <MyPaginationContainer connection={data.myConnection.connection} />\n  };\n```\n\n----------------------------------------\n\nTITLE: Using usePreloadedQuery with React Relay\nDESCRIPTION: This snippet demonstrates how to use the usePreloadedQuery hook in conjunction with useQueryLoader to access preloaded query data in a React component. It shows how to manage the query lifecycle and display user data, including handling loading states via React's Suspense.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-experimental/RelayHooks-ApiReference.md#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst React = require('React');\nconst {useQueryLoader, usePreloadedQuery} = require('react-relay/hooks');\n\nconst query = graphql`\n  query AppQuery($id: ID!) {\n    user(id: $id) {\n      name\n    }\n  }\n`;\n\nfunction QueryFetcherExample(): React.MixedElement {\n  const [\n    queryReference,\n    loadQuery,\n    disposeQuery,\n  ] = useQueryLoader(query);\n\n  return (<>\n    {\n      queryReference == null && (<Button\n        onClick={() => loadQuery({})}\n      >\n        Click to reveal the name\n      </Button>)\n    }\n    {\n      queryReference != null && (<>\n        <Button onClick={disposeQuery}>\n          Click to hide the name and dispose the query.\n        </Button>\n        <React.Suspense fallback=\"Loading\">\n          <NameDisplay queryReference={queryReference} />\n        </React.Suspense>\n      </>)\n    }\n  </>);\n}\n\nfunction NameDisplay({ queryReference }) {\n  const data = usePreloadedQuery<AppQuery>(query, queryReference);\n\n  return <h1>{data.user?.name}</h1>;\n}\n\n```\n\n----------------------------------------\n\nTITLE: Using useFragment Hook in a React Component\nDESCRIPTION: This example demonstrates how to use the useFragment hook to read data for a User component. It imports the necessary types, defines the component props, and uses the hook to extract and render user data from a fragment reference.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/api-reference/hooks/use-fragment.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport type {UserComponent_user$key} from 'UserComponent_user.graphql';\n\nconst React = require('React');\n\nconst {graphql, useFragment} = require('react-relay');\n\ntype Props = {\n  user: UserComponent_user$key,\n};\n\nfunction UserComponent(props: Props) {\n  const data = useFragment(\n    graphql`\n      fragment UserComponent_user on User {\n        name\n        profile_picture(scale: 2) {\n          uri\n        }\n      }\n    `,\n    props.user,\n  );\n\n  return (\n    <>\n      <h1>{data.name}</h1>\n      <div>\n        <img src={data.profile_picture?.uri} />\n      </div>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Mutation with @appendNode\nDESCRIPTION: This example shows a Relay mutation using the `@appendNode` directive to add a new node to a connection.  The mutation takes a `$connections` variable and uses `@appendNode` on the `feedbackCommentNode` field, specifying the `edgeTypeName` as \"CommentsEdge\". This directive automatically creates an edge wrapping the new node and appends it to the specified connections.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/guided-tour/list-data/updating-connections.md#2025-04-18_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n// Get the connection ID using the `__id` field\nconst connectionID = fragmentData?.comments?.__id;\n\n// Or get it using `ConnectionHandler.getConnectionID()`\nconst connectionID = ConnectionHandler.getConnectionID(\n  '<story-id>',\n  'StoryComponent_story_comments_connection',\n);\n\n// ...\n\n// Mutation\ncommitMutation<AppendCommentMutation>(environment, {\n  mutation: graphql`\n    mutation AppendCommentMutation(\n      # Define a GraphQL variable for the connections array\n      $connections: [ID!]!\n      $input: CommentCreateInput\n    ) {\n      commentCreate(input: $input) {\n        # Use @appendNode or @prependNode on the node field\n        feedbackCommentNode @appendNode(connections: $connections, edgeTypeName: \"CommentsEdge\") {\n          id\n        }\n      }\n    }\n  `,\n  variables: {\n    input,\n    // Pass the `connections` array\n    connections: [connectionID],\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Loading States for Pagination UI\nDESCRIPTION: Shows how to improve user experience by implementing loading states during pagination using isLoadingNext from usePaginationFragment.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/tutorial/connections-pagination.md#2025-04-18_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nfunction StoryCommentsSection({story}) {\n  const {data, loadNext, isLoadingNext} = usePaginationFragment(StoryCommentsSectionFragment, story);\n  return (\n    <>\n      {data.comments.edges.map(commentEdge =>\n        <Comment comment={commentEdge.node} />\n      )}\n      {data.comments.pageInfo.hasNextPage && (\n        <LoadMoreCommentsButton\n          onClick={onLoadMore}\n          disabled={isLoadingNext}\n        />\n      )}\n      {isLoadingNext && <SmallSpinner />}\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Multiple Fragments in a Single Component\nDESCRIPTION: Example of using multiple useFragment hooks in a single component to access data from different fragment references passed as props.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/guided-tour/rendering/fragments.md#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport type {UserComponent_user$key} from 'UserComponent_user.graphql';\nimport type {UserComponent_viewer$key} from 'UserComponent_viewer.graphql';\n\nconst React = require('React');\nconst {graphql, useFragment} = require('react-relay');\n\ntype Props = {\n  user: UserComponent_user$key,\n  viewer: UserComponent_viewer$key,\n};\n\nfunction UserComponent(props: Props) {\n  const userData = useFragment(\n    graphql`\n      fragment UserComponent_user on User {\n        name\n        profile_picture(scale: 2) {\n          uri\n        }\n      }\n    `,\n    props.user,\n  );\n\n  const viewerData = useFragment(\n    graphql`\n      fragment UserComponent_viewer on Viewer {\n        actor {\n          name\n        }\n      }\n    `,\n    props.viewer,\n  );\n\n  return (\n    <>\n      <h1>{userData.name}</h1>\n      <div>\n        <img src={userData.profile_picture?.uri} />\n        Acting as: {viewerData.actor?.name ?? 'Unknown'}\n      </div>\n    </>\n  );\n}\n\nmodule.exports = UserComponent;\n```\n\n----------------------------------------\n\nTITLE: Extending Existing Types with Client Fields in GraphQL\nDESCRIPTION: Demonstrates how to extend an existing server type (Comment) with a client-only field using GraphQL schema extensions. This allows adding client-specific data to server entities.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v13.0.0/guided-tour/updating-data/client-only-data.md#2025-04-18_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nextend type Comment {\n  is_new_comment: Boolean\n}\n```\n\n----------------------------------------\n\nTITLE: Relay cache example for story with author\nDESCRIPTION: This javascript snippet demonstrates how Relay would cache the GraphQL query response. It shows a normalized cache implemented as a Map, where entities are stored as records and links connect related entities. This is an example of Relay cache.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/principles-and-architecture/thinking-in-graphql.md#2025-04-18_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nMap {\n  // `story(id: \\\"1\\\")`\n  1: Map {\n    text: 'Relay is open-source!',\n    author: Link(2),\n  },\n  // `story.author`\n  2: Map {\n    name: 'Jan',\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Declaring a Fragment in JavaScript with Relay\nDESCRIPTION: This JavaScript code snippet demonstrates how to declare a GraphQL fragment using the `graphql` tag from `react-relay`. The fragment is named `UserFragment_user` and selects the `name`, `age`, and `profile_picture` fields from the `User` type.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/guided-tour/rendering/fragments.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst {graphql} = require('react-relay');\n\nconst userFragment = graphql`\n  fragment UserFragment_user on User {\n    name\n    age\n    profile_picture(scale: 2) {\n      uri\n    }\n  }\n`;\n```\n\n----------------------------------------\n\nTITLE: Referencing Query Variables in Relay Fragment Components\nDESCRIPTION: Example of a React component using a Relay fragment that references a query variable $scale. This demonstrates how components can use the useFragment hook with fragments that access query variables.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v13.0.0/guided-tour/rendering/variables.md#2025-04-18_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nfunction UserComponent(props: Props) {\n  const data = useFragment(\n    graphql`\n    fragment UserComponent_user on User {\n      name\n      profile_picture(scale: $scale) {\n        uri\n      }\n    }\n    `,\n    props.user,\n  );\n\n  return (...);\n}\n```\n\n----------------------------------------\n\nTITLE: StoryLikeButton Fragment in GraphQL\nDESCRIPTION: This GraphQL fragment defines the data requirements for the StoryLikeButton component. It requests the story's id, like count, and whether the viewer likes the story.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/tutorial/mutations-updates.md#2025-04-18_snippet_1\n\nLANGUAGE: GraphQL\nCODE:\n```\nconst StoryLikeButtonFragment = graphql`\n  fragment StoryLikeButtonFragment on Story {\n    id\n    likeCount\n    doesViewerLike\n  }\n`;\n```\n\n----------------------------------------\n\nTITLE: Using useFragment to read data\nDESCRIPTION: This code demonstrates how to use the `useFragment` hook to read data from the Relay store based on a GraphQL fragment. The component receives a `user` prop, which is a fragment reference, and uses `useFragment` to retrieve the user's name and profile picture URI. The component then renders the user's name and profile picture.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/api-reference/hooks/use-fragment.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport type {UserComponent_user$key} from 'UserComponent_user.graphql';\n\nconst React = require('React');\n\nconst {graphql, useFragment} = require('react-relay');\n\ntype Props = {\n  user: UserComponent_user$key,\n};\n\nfunction UserComponent(props: Props) {\n  const data = useFragment(\n    graphql`\n      fragment UserComponent_user on User {\n        name\n        profile_picture(scale: 2) {\n          uri\n        }\n      }\n    `,\n    props.user,\n  );\n\n  return (\n    <>\n      <h1>{data.name}</h1>\n      <div>\n        <img src={data.profile_picture?.uri} />\n      </div>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Reading and Modifying Updatable Fragment Data in Relay\nDESCRIPTION: This code shows how to read an updatable fragment and modify its data in the local store. It demonstrates toggling the like status and updating the like count.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/tutorial/mutations-updates.md#2025-04-18_snippet_10\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction StoryLikeButton({story}) {\n  ...\n      optimisticUpdater: store => {\n        const fragment = graphql`\n          fragment StoryLikeButton_updatable on Story @updatable {\n            likeCount\n            doesViewerLike\n          }\n        `;\n        const {updatableData} = store.readUpdatableFragment(fragment, story);\n        const alreadyLikes = updatableData.doesViewerLike;\n        updatableData.doesViewerLike = !alreadyLikes;\n        updatableData.likeCount += (alreadyLikes ? -1 : 1);\n      },\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Error Boundary in React\nDESCRIPTION: This JavaScript code snippet shows how to implement an ErrorBoundary component in React. It utilizes the static method getDerivedStateFromError to catch errors and update the component state. This ErrorBoundary can catch errors in its child components and render a fallback UI.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/guided-tour/rendering/error-states.md#2025-04-18_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nconst React = require('React');\n\ntype State = {error: ?Error};\n\nclass ErrorBoundary extends React.Component<Props, State> {\n  static getDerivedStateFromError(error): State {\n    // Set some state derived from the caught error\n    return {error: error};\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Converting Refetch Container to useRefetchableFragment in Relay Hooks\nDESCRIPTION: Example of converting a Refetch Container to useRefetchableFragment Hook which provides a simpler API for refetching data with different variables. The @refetchable directive automatically generates the refetch query.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v13.0.0/migration-and-compatibility/relay-hooks-and-legacy-container-apis.md#2025-04-18_snippet_9\n\nLANGUAGE: jsx\nCODE:\n```\nimport * as React from 'React';\nimport {graphql, useRefetchableFragment} from 'react-relay';\n\nexport default function CommentBody(props: Props) {\n  const [data, refetch] = useRefetchableFragment(\n    graphql`\n      fragment CommentBody_comment on Comment\n      @refetchable(queryName: \"CommentBodyRefetchQuery\") {\n        body(lang: $lang) {\n          text\n        }\n      }\n    `,\n    props.comment,\n  );\n\n  const handleClick = useCallback(() => {\n    refetch({lang: 'SPANISH'});\n  }, [refetch]);\n\n  return (\n    <>\n      <p>{data.body?.text}</p>\n      <Button\n        onClick={handleClick}>\n        Translate Comment\n      </Button>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up Basic Relay Test Environment with Preloaded Queries\nDESCRIPTION: Demonstrates the basic setup for testing a Relay component with preloaded queries using testing-library-react. Shows environment configuration, query resolver setup, and component rendering.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/guides/testing-relay-with-preloaded-queries.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst {RelayEnvironmentProvider} = require('react-relay');\nconst { MockPayloadGenerator, createMockEnvironment } = require('relay-test-utils');\nconst {render} = require('testing-library-react');\nconst {act} = require('ReactTestUtils');\ntest(\"...\", () => {\n  const environment = createMockEnvironment();\n  environment.mock.queueOperationResolver(operation => {\n      return MockPayloadGenerator.generate(operation, {\n        CurrencyAmount() {\n          return {\n            formatted_amount: \"1234$\",\n          };\n        },\n      });\n    });\n  const query = YourComponentGraphQLQueryGoesHere;\n  const variables = {};\n  environment.mock.queuePendingOperation(YourComponentGraphQLQuery, variables);\n\n  const {getByTestId, ..otherStuffYouMightNeed} = render(\n    <RelayEnvironmentProvider environment={environment}>\n        <YourComponent data-testid=\"1234\" {...componentPropsIfAny}/>\n    </RelayEnvironmentProvider>\n  );\n  act(() => jest.runAllImmediates());\n});\n```\n\n----------------------------------------\n\nTITLE: Defining and Using GraphQL Fragments in Relay\nDESCRIPTION: Demonstrates how to define a GraphQL fragment and use it within a query. Shows the connection between fragment references and the useFragment hook.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/glossary/glossary.md#2025-04-18_snippet_3\n\nLANGUAGE: graphql\nCODE:\n```\nquery ComponentQuery { viewer { account_user { ...Component_name } } }\n```\n\nLANGUAGE: graphql\nCODE:\n```\nfragment Component_name on User { name }\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst queryData = usePreloadedQuery(\n  graphql`query ComponentQuery { viewer { account_user { ...Component_name } } }`,\n  {},\n);\n\n// queryData.viewer is the FragmentReference\n// Though this would usually happen in another file, you can\n// extract the value of Component_name as follows:\nconst fragmentData = useFragment(\n  graphql`fragment Component_name on User { name }`,\n  queryData?.viewer?.account_user,\n);\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Relay's Normalized Data Representation from GraphQL Response\nDESCRIPTION: This example illustrates how Relay normalizes a GraphQL response into its internal record-based representation. It shows the transformation from a GraphQL fragment and response object into a normalized RecordSource with separate records for each entity, linked by references.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/principles-and-architecture/runtime-architecture.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// GraphQL Fragment\nfragment on User {\n  id\n  name\n  address {\n    city\n  }\n}\n\n// Response\n{\n  id: '842472',\n  name: 'Joe',\n  address: {\n    city: 'Seattle',\n  }\n}\n\n// Normalized Representation\nRecordSource {\n  '842472': Record {\n    __id: '842472',\n    __typename: 'User', // the type is known statically from the fragment\n    id: '842472',\n    name: 'Joe',\n    address: {__ref: 'client:842472:address'}, // link to another record\n  },\n  'client:842472:address': Record {\n    // A client ID, derived from the path from parent & parent's ID\n    __id: 'client:842472:address',\n    __typename: 'Address',\n    city: 'Seattle',\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring Connection Fragment in Relay\nDESCRIPTION: Shows how to declare a GraphQL fragment that queries a connection using the @connection directive. The fragment queries a User's friends connection with pagination parameters.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/guided-tour/list-data/rendering-connections.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst {graphql} = require('RelayModern');\n\nconst userFragment = graphql`\n  fragment UserFragment on User {\n    name\n    friends(after: $cursor, first: $count)\n      @connection(key: \"UserFragment_friends\") {\n      edges {\n        node {\n          ...FriendComponent\n        }\n      }\n    }\n  }\n`;\n```\n\n----------------------------------------\n\nTITLE: React Comments Section Component with Pagination\nDESCRIPTION: Implementation of the StoryCommentsSection component showing pagination setup with Relay connections\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/tutorial/connections-pagination.md#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst StoryCommentsSectionFragment = graphql`\n fragment StoryCommentsSectionFragment on Story {\n  comments(first: 3) {\n    edges {\n      node {\n        ...CommentFragment\n      }\n    }\n    pageInfo {\n      hasNextPage\n    }\n  }\n };\n`;\n\nfunction StoryCommentsSection({story}) {\n  const data = useFragment(StoryCommentsSectionFragment, story);\n  const onLoadMore = () => {/* TODO */};\n  return (\n    <>\n      {data.comments.edges.map(commentEdge =>\n        <Comment comment={commentEdge.node} />\n      )}\n      {data.comments.pageInfo.hasNextPage && (\n        <LoadMoreCommentsButton onClick={onLoadMore} />\n      )}\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a GraphQL Query with Relay (JavaScript/GraphQL)\nDESCRIPTION: Declaration of a GraphQL query using the graphql tag from relay-runtime. The query fetches a top story with its title, summary, poster information, and thumbnail URL.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/tutorial/queries-1.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { graphql } from 'relay-runtime';\n\nconst NewsfeedQuery = graphql`\n  query NewsfeedQuery {\n    topStory {\n      title\n      summary\n      poster {\n        name\n        profilePicture {\n          url\n        }\n      }\n      thumbnail {\n        url\n      }\n    }\n  }\n`;\n```\n\n----------------------------------------\n\nTITLE: Rendering Query with usePreloadedQuery\nDESCRIPTION: This snippet shows how to render data using `usePreloadedQuery` once the query is loaded with the help of `useQueryLoader`. The `queryRef` is used to access the query data, and a refetch callback is provided to reload the query on user interaction.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/guided-tour/refetching/refetching-queries-with-different-data.md#2025-04-18_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n\n/**\n * MainContent.react.js\n */\n\n// Renders the preloaded query, given the query reference\nfunction MainContent(props) {\n  const {refetch, queryRef} = props;\n  const data = usePreloadedQuery(\n    graphql`\n      query AppQuery($id: ID!) {\n        user(id: $id) {\n          name\n          friends {\n            count\n          }\n        }\n      }\n    `,\n    queryRef,\n  );\n\n  return (\n    <>\n      <h1>{data.user?.name}</h1>\n      <div>Friends count: {data.user?.friends?.count}</div>\n      <Button\n        onClick={() => refetch()}>\n        Fetch latest count\n      </Button>\n    </>\n  );\n}\n\n```\n\n----------------------------------------\n\nTITLE: Using commitLocalUpdate in Relay\nDESCRIPTION: Example showing how to use commitLocalUpdate API to make local updates to the Relay store. The function takes an environment and an updater function that can imperatively mutate store data.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/guided-tour/updating-data/local-data-updates.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport type {Environment} from 'react-relay';\n\nconst {commitLocalUpdate, graphql} = require('react-relay');\n\nfunction commitCommentCreateLocally(\n  environment: Environment,\n  feedbackID: string,\n) {\n  return commitLocalUpdate(environment, store => {\n    // Imperatively mutate the store here\n  });\n}\n\nmodule.exports = {commit: commitCommentCreateLocally};\n```\n\n----------------------------------------\n\nTITLE: Updating ContactsListFragment to Include Argument for Search\nDESCRIPTION: This snippet updates the ContactsListFragment to accept a search argument, which will be used to filter the contacts fetched. The search argument is included in the definition of the contacts field.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/tutorial/refetchable-fragments.md#2025-04-18_snippet_2\n\nLANGUAGE: GraphQL\nCODE:\n```\n\"const ContactsListFragment = graphql`\\n  fragment ContactsListFragment on Viewer\\n    @argumentDefinitions(\\n      search: {type: \\\"String\\\", defaultValue: null}\\n    )\\n  {\\n    contacts {\\n      id\\n      ...ContactRowFragment\\n    }\\n  }\\n`;\\n\"\n```\n\n----------------------------------------\n\nTITLE: Refetching Fragment with useRefetchableFragment in React\nDESCRIPTION: Demonstrates how to use `useRefetchableFragment` to refetch a comment fragment with new language variables. The example shows how to dynamically translate a comment body by calling the `refetch` function with new language parameters.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/guided-tour/refetching/refetching-fragments-with-different-data.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport type {CommentBody_comment$key} from 'CommentBody_comment.graphql';\n\ntype Props = {\n  comment: CommentBody_comment$key,\n};\n\nfunction CommentBody(props: Props) {\n  const [data, refetch] = useRefetchableFragment(\n    graphql`\n      fragment CommentBody_comment on Comment\n      # @refetchable makes it so Relay autogenerates a query for\n      # fetching this fragment\n      @refetchable(queryName: \"CommentBodyRefetchQuery\") {\n        body(lang: $lang) {\n          text\n        }\n      }\n    `,\n    props.comment,\n  );\n\n  const refetchTranslation = () => {\n    // We call refetch with new variables,\n    // which will refetch the @refetchable query with the\n    // new variables and update this component with the\n    // latest fetched data.\n    refetch({lang: 'SPANISH'});\n  };\n\n  return (\n    <>\n      <p>{data.body?.text}</p>\n      <Button\n        onClick={() => refetchTranslation()}>\n        Translate Comment\n      </Button>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Manual Data Loading with Relay fetchQuery\nDESCRIPTION: Example React component demonstrating how to fetch data using Relay's fetchQuery while avoiding Suspense fallbacks. Shows state management for loading states, query arguments handling, and proper data fetching patterns with store-only fetch policies.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/guided-tour/refetching/refetching-queries-with-different-data.md#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * App.react.js\n */\nconst AppQuery = require('__generated__/AppQuery.graphql');\n\nfunction App(props: Props) {\n  const environment = useRelayEnvironment();\n  const [isRefreshing, setIsRefreshing] = useState(false)\n  const [queryArgs, setQueryArgs] = useState({\n    options: {fetchKey: 0, fetchPolicy: 'store-or-network'},\n    variables: {id: '4'},\n  });\n\n  const refetch = useCallback(() => {\n    if (isRefreshing) { return; }\n    setIsRefreshing(true);\n\n    // fetchQuery will fetch the query and write\n    // the data to the Relay store. This will ensure\n    // that when we re-render, the data is already\n    // cached and we don't suspend\n    fetchQuery(environment, AppQuery, variables)\n      .subscribe({\n        complete: () => {\n          setIsRefreshing(false);\n\n          // *After* the query has been fetched, we update\n          // our state to re-render with the new fetchKey\n          // and fetchPolicy.\n          // At this point the data for the query should\n          // be cached, so we use the 'store-only'\n          // fetchPolicy to avoid suspending.\n          setQueryArgs(prev => ({\n            options: {\n              fetchKey: (prev?.options.fetchKey ?? 0) + 1,\n              fetchPolicy: 'store-only',\n            },\n            variables: {id: 'different-id'}\n          }));\n        },\n        error: () => {\n          setIsRefreshing(false);\n        }\n      });\n  }, [/* ... */]);\n\n  return (\n    <React.Suspense fallback=\"Loading query...\">\n      <MainContent\n        isRefetching={isRefetching}\n        refetch={refetch}\n        queryArgs={queryArgs}\n      />\n    </React.Suspense>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using useLazyLoadQuery in a Component to Display Data in Relay\nDESCRIPTION: Shows how to implement a component that uses useLazyLoadQuery to fetch and display data, plus a refresh button to trigger data refetching. This component will suspend when refreshed.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/guided-tour/refetching/refreshing-queries.md#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * MainContent.react.js\n */\n\n// Fetches and renders the query, given the fetch options\nfunction MainContent(props) {\n  const {refresh, queryOptions, variables} = props;\n  const data = useLazyLoadQuery(\n    graphql`\n      query AppQuery($id: ID!) {\n        user(id: $id) {\n          name\n          friends {\n            count\n          }\n        }\n      }\n    `,\n    variables,\n    queryOptions,\n  );\n\n  return (\n    <>\n      <h1>{data.user?.name}</h1>\n      <div>Friends count: {data.user.friends?.count}</div>\n      <Button\n        onClick={() => refresh()}>\n        Fetch latest count\n      </Button>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Bi-directional Pagination in Relay\nDESCRIPTION: Demonstrates how to implement bi-directional pagination using usePaginationFragment, allowing both forward and backward pagination through a connection with before/after and first/last arguments.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/guided-tour/list-data/advanced-pagination.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport type {FriendsListComponent_user$key} from 'FriendsListComponent_user.graphql';\n\nconst React = require('React');\nconst {Suspense} = require('React');\n\nconst {graphql, usePaginationFragment} = require('react-relay');\n\ntype Props = {\n  userRef: FriendsListComponent_user$key,\n};\n\nfunction FriendsListComponent(props: Props) {\n  const {\n    data,\n    loadPrevious,\n    hasPrevious,\n    // ... forward pagination values\n  } = usePaginationFragment(\n    graphql`\n      fragment FriendsListComponent_user on User {\n        name\n        friends(after: $after, before: $before, first: $first, last: $last)\n          @connection(key: \"FriendsListComponent_user_friends_connection\") {\n          edges {\n            node {\n              name\n              age\n            }\n          }\n        }\n      }\n    `,\n    userRef,\n  );\n\n  return (\n    <>\n      <h1>Friends of {data.name}:</h1>\n      <List items={data.friends?.edges.map(edge => edge.node)}>\n        {node => {\n          return (\n            <div>\n              {node.name} - {node.age}\n            </div>\n          );\n        }}\n      </List>\n\n      {hasPrevious ? (\n        <Button onClick={() => loadPrevious(10)}>\n          Load more friends\n        </Button>\n      ) : null}\n\n      {/* Forward pagination controls can go simultaneously here */}\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Pagination with usePaginationFragment in React\nDESCRIPTION: This code snippet demonstrates how to use the usePaginationFragment hook from Relay to implement pagination in a React component. It includes the integration of an InfiniteScrollTrigger component to load more items when the user reaches the end of the page.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/tutorial/connections-pagination.md#2025-04-18_snippet_15\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction NewsfeedContents({query}) {\n  const {\n    data,\n    loadNext,\n    hasNext,\n    isLoadingNext,\n  } = usePaginationFragment(NewsfeedContentsFragment, query);\n  function onEndReached() {\n    loadNext(3);\n  }\n  const storyEdges = data.viewer.newsfeedStories.edges;\n  return (\n    <>\n      {storyEdges.map(storyEdge =>\n        <Story key={storyEdge.node.id} story={storyEdge.node} />\n      )}\n      <InfiniteScrollTrigger\n        onEndReached={onEndReached}\n        hasNext={hasNext}\n        isLoadingNext={isLoadingNext}\n      />\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Composing Fragments with Type-Safe References in TypeScript\nDESCRIPTION: Illustrates how to compose fragments with type-safe references in TypeScript. The example shows a parent component that spreads a child fragment and passes the correct fragment reference.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/guides/type-emission.md#2025-04-18_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ExampleFragmentComponent } from \"./ExampleFragmentComponent\"\n\n/**\n * import { ExampleFragmentComponent_artist$fragmentType } from \"ExampleFragmentComponent_artist.graphql\";\n *\n * export type ExampleQuery$data = {\n *   readonly artist?: {\n *     readonly name: ?string,\n *     readonly \" $fragmentSpreads\": ExampleFragmentComponent_artist$fragmentType\n *   }\n * }\n * export type ExampleQuery$variables = {\n *   readonly artistID: string\n * }\n * export type ExampleQuery = {\n *   readonly variables: ExampleQuery$variables\n *   readonly response: ExampleQuery$data\n * }\n */\n\n// data is of type ExampleQuery$data\nconst data = useLazyLoadQuery(\n  graphql`\n    query ExampleQuery($artistID: ID!) {\n      artist(id: $artistID) {\n        name\n        ...ExampleFragmentComponent_artist\n      }\n    }\n  `,\n  {artistID: 'banksy'},\n);\n\n// Here only `data.artist.name` is directly visible,\n// the marker prop $fragmentSpreads indicates that `data.artist`\n// can be used for the component expecting this fragment spread.\nreturn <ExampleFragmentComponent artist={data.artist} />;\n```\n\n----------------------------------------\n\nTITLE: Like Button Fragment in StoryLikeButton.tsx\nDESCRIPTION: GraphQL fragment for the StoryLikeButton component that fetches the story ID, like count, and whether the current viewer likes the story. These fields are used to render the Like button's state.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/tutorial/mutations-updates.md#2025-04-18_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\nconst StoryLikeButtonFragment = graphql`\n  fragment StoryLikeButtonFragment on Story {\n    id\n    likeCount\n    doesViewerLike\n  }\n`;\n```\n\n----------------------------------------\n\nTITLE: Chaining @required Fields in React Component\nDESCRIPTION: Example of chaining @required directives to make deeply nested fields accessible with a single null check\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/guides/required-directive.md#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst user = useFragment(graphql`\n  fragment MyUser on User {\n    name @required(action: LOG)\n    profile_picture @required(action: LOG) {\n      url @required(action: LOG)\n    }\n  }`, key);\n if(user == null) {\n   return null;\n }\n return <img src={user.profile_picture.url} alt={user.name} />\n```\n\n----------------------------------------\n\nTITLE: Granular Suspense Boundaries\nDESCRIPTION: This code demonstrates how to use multiple Suspense components to create separate loading UIs for different parts of the component tree. This allows for more granular control over loading states and enables other components to render earlier as they become ready. Here, LeftColumn has its own loading UI, while MainContent and SecondaryContent share another.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/guided-tour/rendering/loading-states.md#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * App.react.js\n */\n\nconst React = require('React');\nconst {Suspense} = require('React');\n\nfunction App() {\n  return (\n    <>\n      {/* Show a separate loading UI for the LeftHandColumn */}\n      <Suspense fallback={<LeftColumnPlaceholder />}>\n        <LeftColumn />\n      </Suspense>\n\n      {/* Show a separate loading UI for both the Main and Secondary content */}\n      <Suspense fallback={<LoadingGlimmer />}>\n        <MainContent />\n        <SecondaryContent />\n      </Suspense>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using usePaginationFragment Hook in React Component\nDESCRIPTION: This snippet demonstrates how to use the usePaginationFragment hook in a React component to implement pagination functionality.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/tutorial/connections-pagination.md#2025-04-18_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst {data, loadNext} = usePaginationFragment(StoryCommentsSectionFragment, story);\nconst onLoadMore = () => loadNext(3);\n```\n\n----------------------------------------\n\nTITLE: GraphQL Mutation with Fragment Spread\nDESCRIPTION: The StoryLikeButtonLikeMutation is updated to include a fragment spread within the story field. This ensures that the mutation response always contains all the data required by the StoryLikeButtonFragment.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/tutorial/mutations-updates.md#2025-04-18_snippet_6\n\nLANGUAGE: graphql\nCODE:\n```\nconst StoryLikeButtonLikeMutation = graphql`\n  mutation StoryLikeButtonLikeMutation(\n    $id: ID,\n    $doesLike: Boolean,\n  ) {\n    likeStory(id: $id, doesLike: $doesLike) {\n      story {\n        // change-line\n        ...StoryLikeButtonFragment\n      }\n    }\n  }\n`;\n```\n\n----------------------------------------\n\nTITLE: Using useRefetchableFragment Hook in React Component\nDESCRIPTION: This snippet demonstrates how to use the useRefetchableFragment hook in a React component to fetch and update fragment data. It includes a refetchable fragment definition and shows how to trigger a refetch with new variables.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/api-reference/hooks/use-refetchable-fragment.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport type {CommentBody_comment$key} from 'CommentBody_comment.graphql';\n\nconst React = require('React');\n\nconst {graphql, useRefetchableFragment} = require('react-relay');\n\n\ntype Props = {\n  comment: CommentBody_comment$key,\n};\n\nfunction CommentBody(props: Props) {\n  const [data, refetch] = useRefetchableFragment(\n    graphql`\n      fragment CommentBody_comment on Comment\n      @refetchable(queryName: \"CommentBodyRefetchQuery\") {\n        body(lang: $lang) {\n          text\n        }\n      }\n    `,\n    props.comment,\n  );\n\n  return (\n    <>\n      <p>{data.body?.text}</p>\n      <Button\n        onClick={() => {\n          refetch({lang: 'SPANISH'}, {fetchPolicy: 'store-or-network'})\n        }}\n      >\n        Translate Comment\n      </Button>\n    </>\n  );\n}\n\nmodule.exports = CommentBody;\n```\n\n----------------------------------------\n\nTITLE: GraphQL Query Definition with Relay\nDESCRIPTION: This code snippet defines a GraphQL query using the `graphql` tag from `relay-runtime`. The query, named `NewsfeedQuery`, fetches the `topStory` which includes the `title`, `summary`, `poster` (with nested `name` and `profilePicture.url`), and `thumbnail.url`. This query specifies the data to be retrieved from the GraphQL server.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/tutorial/queries-1.md#2025-04-18_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\nimport { graphql } from 'relay-runtime';\n\n// color1\nconst NewsfeedQuery = graphql`\n  // color2\n  query NewsfeedQuery {\n    topStory {\n      // color3\n      title\n      // color3\n      summary\n      // color4\n      poster {\n        name\n        profilePicture {\n          url\n        }\n      }\n      thumbnail {\n        url\n      }\n    }\n  }\n`;\n```\n\n----------------------------------------\n\nTITLE: Creating a Local Note with commitLocalUpdate\nDESCRIPTION: This function uses `commitLocalUpdate` to create a new `Note` record and associate it with the `User`'s `notes` field in the Relay store.  It generates a unique client-side ID and updates the store directly via an updater function. Requires 'react-relay' dependency.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/guides/client-schema-extensions.md#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport {commitLocalUpdate} from 'react-relay';\n\nlet tempID = 0;\n\nfunction createUserNote(environment) {\n  commitLocalUpdate(environment, store => {\n    const user = store.getRoot().getLinkedRecord('viewer');\n    const userNoteRecords = user.getLinkedRecords('notes') || [];\n\n    // Create a unique ID.\n    const dataID = `client:Note:${tempID++}`;\n\n    //Create a new note record.\n    const newNoteRecord = store.create(dataID, 'Note');\n\n    // Add the record to the user's list of notes.\n    user.setLinkedRecords([...userNoteRecords, newNoteRecord], 'notes');\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Story Query with Fragment Spread\nDESCRIPTION: Demonstrates how to create a GraphQL query that incorporates the author details fragment and fetches story data.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/principles-and-architecture/thinking-in-relay.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst storyQuery = graphql`\n  query StoryQuery($storyID: ID!) {\n    story(id: $storyID) {\n      title\n      author {\n        ...AuthorDetails_author\n      }\n    }\n  }\n`;\n```\n\n----------------------------------------\n\nTITLE: Refreshing Queries Without Suspense Using fetchQuery in React/Relay\nDESCRIPTION: Implementation showing how to refresh queries while avoiding Suspense by using fetchQuery. Manages manual loading state and ensures data is cached before re-rendering.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/guided-tour/refetching/refreshing-queries.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * App.react.js\n */\n\nconst AppQuery = require('__generated__/AppQuery.graphql');\n\nfunction App(props: Props) {\n  const environment = useRelayEnvironment();\n  const [queryRef, loadQuery] = useQueryLoader(\n    AppQuery,\n    props.appQueryRef /* initial query ref */\n  );\n  const [isRefreshing, setIsRefreshing] = useState(false)\n\n  const refresh = useCallback(() => {\n    if (isRefreshing) { return; }\n    const {variables} = props.appQueryRef;\n    setIsRefreshing(true);\n\n    // fetchQuery will fetch the query and write\n    // the data to the Relay store. This will ensure\n    // that when we re-render, the data is already\n    // cached and we don't suspend\n    fetchQuery(environment, AppQuery, variables)\n      .subscribe({\n        complete: () => {\n          setIsRefreshing(false);\n\n          // *After* the query has been fetched, we call\n          // loadQuery again to re-render with a new\n          // queryRef.\n          // At this point the data for the query should\n          // be cached, so we use the 'store-only'\n          // fetchPolicy to avoid suspending.\n          loadQuery(variables, {fetchPolicy: 'store-only'});\n        }\n        error: () => {\n          setIsRefreshing(false);\n        }\n      });\n  }, [/* ... */]);\n\n  return (\n    <React.Suspense fallback=\"Loading query...\">\n      <MainContent\n        isRefreshing={isRefreshing}\n        refresh={refresh}\n        queryRef={queryRef}\n      />\n    </React.Suspense>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing useLazyLoadQuery Hook in React Relay\nDESCRIPTION: Example showing how to use useLazyLoadQuery hook to fetch GraphQL data during component render. The hook accepts a query, variables, and optional fetch policy settings to control caching behavior.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v13.0.0/api-reference/hooks/use-lazy-load-query.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport type {AppQuery} from 'AppQuery.graphql';\n\nconst React = require('React');\n\nconst {graphql, useLazyLoadQuery} = require('react-relay');\n\nfunction App() {\n  const data = useLazyLoadQuery<AppQuery>(\n    graphql`\n      query AppQuery($id: ID!) {\n        user(id: $id) {\n          name\n        }\n      }\n    `,\n    {id: 4},\n    {fetchPolicy: 'store-or-network'},\n  );\n\n return <h1>{data.user?.name}</h1>;\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Connection using ConnectionHandler.getConnection\nDESCRIPTION: This snippet shows how to access a connection record via the parent record using the ConnectionHandler.getConnection API.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/guided-tour/updating-data/updating-connections.md#2025-04-18_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst {ConnectionHandler} = require('relay-runtime');\n\nfunction updater(store: RecordSourceSelectorProxy) {\n  // Get parent story record\n  // storyID is passed as input to the mutation/subscription\n  const storyRecord = store.get(storyID);\n\n  // Get the connection record from the parent\n  const connectionRecord = ConnectionHandler.getConnection(\n    storyRecord,\n    'StoryComponent_story_comments_connection',\n  );\n\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Retaining Relay Query Data Using environment.retain\nDESCRIPTION: Demonstrates how to manually retain a Relay query to prevent its data from being garbage collected. Shows the complete flow from creating query descriptors to retaining and disposing of the query data. Uses relay-runtime utilities including createOperationDescriptor and getRequest.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/guided-tour/managing-data-outside-react/retaining-queries.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst {\n  createOperationDescriptor,\n  getRequest,\n  graphql,\n} = require('relay-runtime')\n\n// Query graphql object\nconst query = graphql`...`;\n\n// Construct Relay's internal representation of the query\nconst queryRequest = getRequest(query);\nconst queryDescriptor = createOperationDescriptor(\n  queryRequest,\n  variables\n);\n\n// Retain query; this will prevent the data for this query and\n// variables from being garbage collected by Relay\nconst disposable = environment.retain(queryDescriptor);\n\n// Disposing of the disposable will release the data for this query\n// and variables, meaning that it can be deleted at any moment\n// by Relay's garbage collection if it hasn't been retained elsewhere\ndisposable.dispose();\n```\n\n----------------------------------------\n\nTITLE: Using Error Boundary in React Application\nDESCRIPTION: This example demonstrates how to use an Error Boundary component to wrap parts of a React application. It shows how to provide a fallback UI when an error occurs within the boundary.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/guided-tour/rendering/error-states.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * App.react.js\n */\n\nconst ErrorBoundary = require('ErrorBoundary');\nconst React = require('React');\n\nconst MainContent = require('./MainContent.react');\nconst SecondaryContent = require('./SecondaryContent.react');\n\nfunction App() {\n  return (\n    // Render an ErrorSection if an error occurs within\n    // MainContent or Secondary Content\n    <ErrorBoundary fallback={error => <ErrorUI error={error} />}>\n      <MainContent />\n      <SecondaryContent />\n    </ErrorBoundary>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Nodes Using @appendNode Directive in GraphQL Mutation\nDESCRIPTION: Example of using the @appendNode directive in a GraphQL mutation to add newly created nodes as edges to specified connections. This method uses declarative directives for updating connections.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/guided-tour/list-data/updating-connections.md#2025-04-18_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n// Get the connection ID using the `__id` field\nconst connectionID = fragmentData?.comments?.__id;\n\n// Or get it using `ConnectionHandler.getConnectionID()`\nconst connectionID = ConnectionHandler.getConnectionID(\n  '<story-id>',\n  'StoryComponent_story_comments_connection',\n);\n\n// ...\n\n// Mutation\ncommitMutation<AppendCommentMutation>(environment, {\n  mutation: graphql`\n    mutation AppendCommentMutation(\n      # Define a GraphQL variable for the connections array\n      $connections: [ID!]!\n      $input: CommentCreateInput\n    ) {\n      commentCreate(input: $input) {\n        # Use @appendNode or @prependNode on the node field\n        feedbackCommentNode @appendNode(connections: $connections, edgeTypeName: \"CommentsEdge\") {\n          id\n        }\n      }\n    }\n  `,\n  variables: {\n    input,\n    // Pass the `connections` array\n    connections: [connectionID],\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Streaming Pagination with @stream_connection in Relay\nDESCRIPTION: This snippet demonstrates how to use the @stream_connection directive with usePaginationFragment to enable incremental data delivery. It shows how to configure initial_count to control how many items are included in the initial payload before streaming begins. The component will automatically re-render as new items are streamed in.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/guided-tour/list-data/streaming-pagination.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport type {FriendsListComponent_user$key} from 'FriendsList_user.graphql';\n\nconst React = require('React');\n\nconst {graphql, usePaginationFragment} = require('react-relay');\n\ntype Props = {\n  user: FriendsListComponent_user$key,\n};\n\nfunction FriendsListComponent(props: Props) {\n  // ...\n\n  const {\n    data,\n    loadNext,\n    hasNext,\n  } = usePaginationFragment(\n    graphql`\n      fragment FriendsListComponent_user on User\n      @refetchable(queryName: \"FriendsListPaginationQuery\") {\n        name\n        friends(first: $count, after: $cursor)\n        @stream_connection(key: \"FriendsList_user_friends\", initial_count: 2,) {\n          edges {\n            node {\n              name\n              age\n            }\n          }\n        }\n      }\n    `,\n    props.user,\n  );\n\n  return (...);\n}\n\nmodule.exports = FriendsListComponent;\n```\n\n----------------------------------------\n\nTITLE: Updating a Component to Map Over Connection Edges in Relay\nDESCRIPTION: This snippet shows how to update a component to map over the edges of a Connection and render each node. This is necessary when working with Connection fields rather than simple arrays.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/tutorial/connections-pagination.md#2025-04-18_snippet_10\n\nLANGUAGE: jsx\nCODE:\n```\nfunction Newsfeed() {\n  const data = useLazyLoadQuery(NewsfeedQuery, {});\n  // change-line\n  const storyEdges = data.viewer.newsfeedStories.edges;\n  return (\n    <>\n      {storyEdges.map(storyEdge =>\n        <Story key={storyEdge.node.id} story={storyEdge.node} />\n      )}\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring a GraphQL Subscription in Relay\nDESCRIPTION: Shows how to declare a GraphQL subscription using Relay's graphql tag. This allows the subscription to be used within Relay components.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/guided-tour/updating-data/graphql-subscriptions.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst {graphql} = require('react-relay');\n\nconst feedbackLikeSubscription = graphql`\n  subscription FeedbackLikeSubscription($input: FeedbackLikeSubscribeData!) {\n    feedback_like_subscribe(data: $input) {\n      feedback {\n        like_count\n      }\n    }\n  }\n`;\n```\n\n----------------------------------------\n\nTITLE: Accessing Relay Environment in React\nDESCRIPTION: This code snippet demonstrates the use of the useRelayEnvironment hook to access a Relay environment within a React component. It shows how to retrieve the environment set by a RelayEnvironmentProvider. The environment is then used in an example handler function to commit mutations. Dependencies include React and react-relay packages, and it is expected to have a set Relay environment context.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/api-reference/hooks/use-relay-environment.md#2025-04-18_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst React = require('React');\n\nconst {useRelayEnvironment} = require('react-relay');\n\nfunction MyComponent() {\n  const environment = useRelayEnvironment();\n\n  const handler = useCallback(() => {\n    // For example, can be used to pass the environment to functions\n    // that require a Relay environment.\n    commitMutation(environment, ...);\n  }, [environment])\n\n  return (...);\n}\n\nmodule.exports = MyComponent;\n```\n\n----------------------------------------\n\nTITLE: Refetching Connections with Different Filter Variables\nDESCRIPTION: Complete implementation showing how to refetch a connection with different filter variables. Uses the refetch function from usePaginationFragment and demonstrates both automatic refetching based on prop changes and manual refetching via UI interactions.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/guided-tour/list-data/refetching-connections.md#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * FriendsListComponent.react.js\n */\nimport type {FriendsListComponent_user$key} from 'FriendsListComponent_user.graphql';\n\nconst React = require('React');\nconst {useState, useEffect} = require('React');\n\nconst {graphql, usePaginationFragment} = require('react-relay');\n\n\ntype Props = {\n  searchTerm?: string,\n  user: FriendsListComponent_user$key,\n};\n\nfunction FriendsListComponent(props: Props) {\n  const searchTerm = props.searchTerm;\n  const {data, loadNext, refetch} = usePaginationFragment(\n    graphql`\n      fragment FriendsListComponent_user on User {\n        name\n        friends(\n          order_by: $orderBy,\n          search_term: $searchTerm,\n          after: $cursor,\n          first: $count,\n        ) @connection(key: \"FriendsListComponent_user_friends_connection\") {\n          edges {\n            node {\n              name\n              age\n            }\n          }\n        }\n      }\n    `,\n    props.user,\n  );\n\n  useEffect(() => {\n    // When the searchTerm provided via props changes, refetch the connection\n    // with the new searchTerm\n    refetch({first: 10, search_term: searchTerm}, {fetchPolicy: 'store-or-network'});\n  }, [searchTerm])\n\n  return (\n    <>\n      <h1>Friends of {data.name}:</h1>\n\n      {/* When the button is clicked, refetch the connection but sorted differently */}\n      <Button\n        onClick={() =>\n          refetch({first: 10, orderBy: 'DATE_ADDED'});\n        }>\n        Sort by date added\n      </Button>\n\n      <List items={data.friends?.nodes}>...</List>\n      <Button onClick={() => loadNext(10)}>Load more friends</Button>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using @appendEdge Directive in GraphQL Mutation\nDESCRIPTION: This snippet shows how to use the @appendEdge directive in a GraphQL mutation to add newly created edges to specified connections.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/guided-tour/list-data/updating-connections.md#2025-04-18_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// Get the connection ID using the `__id` field\nconst connectionID = fragmentData?.comments?.__id;\n\n// Or get it using `ConnectionHandler.getConnectionID()`\nconst connectionID = ConnectionHandler.getConnectionID(\n  '<story-id>',\n  'StoryComponent_story_comments_connection',\n);\n\n// ...\n\n// Mutation\ncommitMutation<AppendCommentMutation>(environment, {\n  mutation: graphql`\n    mutation AppendCommentMutation(\n      # Define a GraphQL variable for the connections array\n      $connections: [ID!]!\n      $input: CommentCreateInput\n    ) {\n      commentCreate(input: $input) {\n        # Use @appendEdge or @prependEdge on the edge field\n        feedbackCommentEdge @appendEdge(connections: $connections) {\n          cursor\n          node {\n            id\n          }\n        }\n      }\n    }\n  `,\n  variables: {\n    input,\n    // Pass the `connections` array\n    connections: [connectionID],\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Complete AssignBestFriendButton Component (JavaScript)\nDESCRIPTION: This is the complete code for the `AssignBestFriendButton` component. It combines the fragment definition, the React component structure, and the `onClick` handler implementation to allow a user to assign another user as their best friend.  It demonstrates how to use Relay's `commitLocalUpdate` and `readUpdatableQuery` APIs with `@updatable` queries and assignable fragments to modify linked fields.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/guided-tour/updating-data/imperatively-modifying-linked-fields.md#2025-04-18_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// AssignBestFriendButton.react.js\nimport type {AssignBestFriendButton_user$key} from 'AssignBestFriendButton_user.graphql';\nimport type {RecordSourceSelectorProxy} from 'react-relay';\n\nconst {commitLocalUpdate, useFragment, useRelayEnvironment} = require('react-relay');\n\ngraphql`\n  fragment AssignBestFriendButton_assignable_user on User @assignable {\n    __typename\n  }\n`;\n\nexport default function AssignBestFriendButton({\n  someTypeRef: AssignBestFriendButton_someType$key,\n}) {\n  const data = useFragment(graphql`\n    fragment AssignBestFriendButton_someType on SomeType {\n      user {\n        name\n        ...AssignableBestFriendButton_assignable_user\n      }\n    }\n  `, someTypeRef);\n\n  const environment = useRelayEnvironment();\n  const onClick = () => {\n    const updatableData = commitLocalUpdate(\n      environment,\n      (store: RecordSourceSelectorProxy) => {\n        const {updatableData} = store.readUpdatableQuery(\n            graphql`\n              query AssignBestFriendButtonUpdatableQuery\n              @updatable {\n                viewer {\n                  best_friend {\n                    ...AssignableBestFriendButton_assignable_user\n                  }\n                }\n              }\n            `,\n            {}\n          );\n\n        if (data.user != null && updatableData.viewer != null) {\n          updatableData.viewer.best_friend = data.user;\n        }\n      }\n    );\n  };\n\n  return (<button onClick={onClick}>\n    Declare {user.name ?? 'someone with no name'} my best friend!\n  </button>);\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up Relay Test Environment for Preloaded Queries in JavaScript\nDESCRIPTION: This snippet demonstrates how to set up a test environment for Relay components using preloaded queries. It includes creating a mock environment, configuring the query resolver, and rendering the component with the necessary providers.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/guides/testing-relay-with-preloaded-queries.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst {RelayEnvironmentProvider} = require('react-relay');\nconst {MockPayloadGenerator, createMockEnvironment} = require('relay-test-utils');\nconst {act, render} = require('@testing-library/react');\ntest(\"...\", () => {\n  // arrange\n  const environment = createMockEnvironment();\n  environment.mock.queueOperationResolver(operation => {\n      return MockPayloadGenerator.generate(operation, {\n        CurrencyAmount() {\n          return {\n            formatted_amount: \"1234$\",\n          };\n        },\n      });\n    });\n  const query = YourComponentGraphQLQueryGoesHere; // can be the same, or just identical\n  const variables = {\n    // ACTUAL variables for the invocation goes here\n  };\n  environment.mock.queuePendingOperation(YourComponentGraphQLQuery, variables);\n\n // act\n  const {getByTestId, ..otherStuffYouMightNeed} = render(\n    <RelayEnvironmentProvider environment={environment}>\n        <YourComponent data-testid=\"1234\" {...componentPropsIfAny}/>\n    </RelayEnvironmentProvider>\n  );\n  // trigger the loading - click a button, emit an event, etc. or ...\n  act(() => jest.runAllImmediates()); // ... if loadQuery is in the useEffect()\n  // assert\n  // your assertions go here\n});\n```\n\n----------------------------------------\n\nTITLE: Local Data Update with commitLocalUpdate in Relay\nDESCRIPTION: This code snippet demonstrates how to use the `commitLocalUpdate` API in Relay to make local updates to the store. It takes an environment and an updater function as arguments. The updater function receives a `store` argument, allowing imperative writes and reads of data directly to and from the Relay store.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/guided-tour/updating-data/local-data-updates.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport type {Environment} from 'react-relay';\n\nconst {commitLocalUpdate, graphql} = require('react-relay');\n\nfunction commitCommentCreateLocally(\n  environment: Environment,\n  feedbackID: string,\n) {\n  return commitLocalUpdate(environment, store => {\n    // Imperatively mutate the store here\n  });\n}\n\nmodule.exports = {commit: commitCommentCreateLocally};\n```\n\n----------------------------------------\n\nTITLE: Using useQueryLoader in React\nDESCRIPTION: This snippet demonstrates how to use the `useQueryLoader` Hook to refetch a query with new variables in a React component using Relay. It requires importing `useQueryLoader` from the Relay module and setting initial query references. This approach utilizes `React.Suspense` for managing loading states.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/guided-tour/refetching/refetching-queries-with-different-data.md#2025-04-18_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n\n/**\n * App.react.js\n */\nconst AppQuery = require('__generated__/AppQuery.graphql');\n\nfunction App(props: Props) {\n  const variables = {id: '4'};\n  const [queryRef, loadQuery] = useQueryLoader(\n    AppQuery,\n    props.appQueryRef /* initial query ref */\n  );\n\n  const refetch = useCallback(() => {\n    // Load the query again using the same original variables.\n    // Calling loadQuery will update the value of queryRef.\n    loadQuery({id: 'different-id'});\n  }, [/* ... */]);\n\n  return (\n    <React.Suspense fallback=\"Loading query...\">\n      <MainContent\n        refetch={refetch}\n        queryRef={queryRef}\n      />\n    </React.Suspense>\n  );\n}\n\n```\n\n----------------------------------------\n\nTITLE: Refreshing Queries Using fetchQuery to Avoid Suspense in React and Relay\nDESCRIPTION: This snippet shows how to refresh a query using fetchQuery instead of useQueryLoader to avoid showing a Suspense fallback. It manually tracks the loading state and updates the query data without suspending.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/guided-tour/refetching/refreshing-queries.md#2025-04-18_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n/**\n * App.react.js\n */\nimport type {AppQuery as AppQueryType} from 'AppQuery.graphql';\n\nconst AppQuery = require('__generated__/AppQuery.graphql');\n\nfunction App(props: Props) {\n  const environment = useRelayEnvironment();\n  const [queryRef, loadQuery] = useQueryLoader<AppQueryType>(\n    AppQuery,\n    props.appQueryRef /* initial query ref */\n  );\n  const [isRefreshing, setIsRefreshing] = useState(false)\n\n  const refresh = useCallback(() => {\n    if (isRefreshing) { return; }\n    const {variables} = props.appQueryRef;\n    setIsRefreshing(true);\n\n    // fetchQuery will fetch the query and write\n    // the data to the Relay store. This will ensure\n    // that when we re-render, the data is already\n    // cached and we don't suspend\n    fetchQuery(environment, AppQuery, variables)\n      .subscribe({\n        complete: () => {\n          setIsRefreshing(false);\n\n          // *After* the query has been fetched, we call\n          // loadQuery again to re-render with a new\n          // queryRef.\n          // At this point the data for the query should\n          // be cached, so we use the 'store-only'\n          // fetchPolicy to avoid suspending.\n          loadQuery(variables, {fetchPolicy: 'store-only'});\n        }\n        error: () => {\n          setIsRefreshing(false);\n        }\n      });\n  }, [/* ... */]);\n\n  return (\n    <React.Suspense fallback=\"Loading query...\">\n      <MainContent\n        isRefreshing={isRefreshing}\n        refresh={refresh}\n        queryRef={queryRef}\n      />\n    </React.Suspense>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing useTransition with Refetchable Fragments in React and Relay\nDESCRIPTION: This code demonstrates how to use React's useTransition hook with Relay's useRefetchableFragment to improve the loading experience. By wrapping the refetch call in startTransition, the component can show a pending state while keeping the previous data visible instead of displaying a Suspense fallback during data loading.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/tutorial/refetchable-fragments.md#2025-04-18_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n// change-line\nconst {useState, useTransition} = React;\n\nfunction ContactsList({viewer}) {\n  // change-line\n  const [isPending, startTransition] = useTransition();\n  const [searchString, setSearchString] = useState('');\n  const [data, refetch] = useRefetchableFragment(ContactsListFragment, viewer);\n  const onSearchStringChanged = (value) => {\n    setSearchString(value);\n    // change\n    startTransition(() => {\n      refetch({search: value});\n    });\n    // end-change\n  };\n  return (\n    <Card dim={true}>\n      <h3>Contacts</h3>\n      <SearchInput\n        value={searchString}\n        onChange={onSearchStringChanged}\n        // change-line\n        isPending={isPending}\n      />\n      {data.contacts.map(contact =>\n        <ContactRow key={contact.id} contact={contact} />\n      )}\n    </Card>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Edge Creation and Insertion Example\nDESCRIPTION: This JavaScript code demonstrates how to create a new edge using `ConnectionHandler.createEdge` and insert it into a connection using `ConnectionHandler.insertEdgeAfter` and `ConnectionHandler.insertEdgeBefore`. The code first gets the connection and new friend records, then creates the edge, and finally inserts it at the end and at the beginning of the connection.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/api-reference/relay-runtime/store.md#2025-04-18_snippet_24\n\nLANGUAGE: javascript\nCODE:\n```\nconst user = store.get(userID);\nconst friends = ConnectionHandler.getConnection(user, 'FriendsFragment_friends');\nconst newFriend = store.get(newFriendId);\nconst edge = ConnectionHandler.createEdge(store, friends, newFriend, 'UserEdge');\n\n// No cursor provided, append the edge at the end.\nConnectionHandler.insertEdgeAfter(friends, edge);\n\n// No cursor provided, insert the edge at the front:\nConnectionHandler.insertEdgeBefore(friends, edge);\n```\n\n----------------------------------------\n\nTITLE: Declaring Basic GraphQL Fragment Structure\nDESCRIPTION: Shows the basic structure of a GraphQL fragment that selects specific fields from a User type including name, age and profile picture.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/guided-tour/rendering/fragments.md#2025-04-18_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nfragment UserFragment on User {\n  name\n  age\n  profile_picture(scale: 2) {\n    uri\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom Subscription Hook with useSubscription\nDESCRIPTION: Creates a custom React hook that uses Relay's useSubscription API to establish a subscription. Includes proper memoization of the config object and type definitions for better type safety.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/guided-tour/updating-data/graphql-subscriptions.md#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport type {Environment} from 'react-relay';\nimport type {FeedbackLikeSubscribeData} from 'FeedbackLikeSubscription.graphql';\n\nconst {graphql, useSubscription} = require('react-relay');\nconst {useMemo} = require('React');\n\nfunction useFeedbackSubscription(\n  input: FeedbackLikeSubscribeData,\n) {\n  const config = useMemo(() => ({\n    subscription: graphql`\n      subscription FeedbackLikeSubscription(\n        $input: FeedbackLikeSubscribeData!\n      ) {\n        feedback_like_subscribe(data: $input) {\n          feedback {\n            like_count\n          }\n        }\n      }\n    `,\n    variables: {input},\n  }), [input]);\n\n  return useSubscription(config);\n}\n```\n\n----------------------------------------\n\nTITLE: Converting PaginationContainer to usePaginationFragment in React and Relay\nDESCRIPTION: This snippet demonstrates how to migrate from a class-based PaginationContainer to a functional component using usePaginationFragment. It shows the simplification of pagination logic and removal of unnecessary configuration options.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/migration-and-compatibility/relay-hooks-and-legacy-container-apis.md#2025-04-18_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as React from 'React';\nimport {graphql, createPaginationContainer} from 'react-relay';\n\nclass UserContainerComponent extends React.Component {\n  render(): React.Node {\n    const isLoading = this.props.relay.isLoading() || this.state.loading;\n    const hasMore = this.props.relay.hasMore();\n\n    return (\n      <>\n        <FriendsList friends={this.props.user?.friends} />\n        <Button\n          onClick={() => this.loadMore()}\n          disabled={!hasMore || isLoading}>\n          Load More\n          {isLoading && <InlineSpinner />}\n        </Button>\n      </>\n    );\n  }\n\n  loadMore() {\n    if (\n      !this.props.relay.hasMore() ||\n      this.props.relay.isLoading() ||\n      this.state.loading\n    ) {\n      return;\n    }\n\n    this.setState({loading: true});\n\n    this.props.relay.loadMore(5, () => this.setState({loading: false}));\n  }\n}\n\nexport default createPaginationContainer(\n  UserContainerComponent,\n  {\n    user: graphql`\n      fragment UserContainerComponent_user on User\n      @argumentDefinitions(count: {type: \"Int!\"}, cursor: {type: \"ID\"})\n      @refetchable(queryName: \"UserComponentRefetchQuery\") {\n        friends(first: $count, after: $cursor)\n          @connection(key: \"UserComponent_user_friends\") {\n          edges {\n            node {\n              name\n            }\n          }\n        }\n      }\n    `,\n  },\n  {\n    // This option is no longer necessary, usePaginationFragment supports\n    // bi-directional pagination out of the box.\n    direction: 'forward',\n\n    // This option is no longer required, and will be automatically\n    // determined by usePaginationFragment\n    getConnectionFromProps(props: Props) {\n      return props.user?.friends;\n    },\n\n    // This option is no longer required, and will be automatically\n    // determined by usePaginationFragment\n    getFragmentVariables(vars, count) {\n      return {...vars, count};\n    },\n\n    // This option is no longer required, and will be automatically\n    // determined by usePaginationFragment\n    getVariables(props: Props, {count, cursor}) {\n      return {\n        cursor,\n        count,\n      };\n    },\n\n    // This option is no longer required, the pagination query\n    // will automatically be generated by Relay using the @refetchable\n    // directive.\n    query: graphql`\n      query UserContainerComponentQuery {\n        viewer {\n          actor {\n            ... on User {\n              ...UserContainerComponent_user @arguments(count: 10)\n            }\n          }\n        }\n      }\n    `,\n  },\n);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as React from 'React';\nimport {graphql, usePaginationFragment} from 'react-relay';\n\nexport default function UserComponent(props: Props) {\n  const {data, loadNext, hasNext, isLoadingNext} = usePaginationFragment(\n    graphql`\n      fragment UserComponent_user on User\n      @refetchable(queryName: \"UserComponentRefetchQuery\") {\n        friends(first: $count, after: $after)\n          @connection(key: \"UserComponent_user_friends\") {\n          edges {\n            node {\n              name\n            }\n          }\n        }\n      }\n    `,\n    props.user,\n  );\n\n  const handleClick = useCallback(() => {\n    loadNext(5)\n  }, [loadNext])\n\n  return (\n    <>\n      <FriendsList friends={data?.friends?.edges} />\n      <Button onClick={handleClick} disabled={!hasNext || isLoadingNext}>\n        Load More\n        {isLoadingNext && <InlineSpinner />}\n      </Button>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Queries with usePreloadedQuery Hook in React/Relay\nDESCRIPTION: Demonstrates using the usePreloadedQuery hook to render data from a preloaded GraphQL query, with type annotations and Flow integration\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/guided-tour/rendering/queries.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport type {HomeTabQuery} from 'HomeTabQuery.graphql';\nimport type {PreloadedQuery} from 'react-relay';\n\nconst React = require('React');\nconst {graphql, usePreloadedQuery} = require('react-relay');\n\ntype Props = {\n  queryRef: PreloadedQuery<HomeTabQuery>,\n};\n\nfunction HomeTab(props: Props) {\n  const data = usePreloadedQuery(\n    graphql`\n      query HomeTabQuery($id: ID!) {\n        user(id: $id) {\n          name\n        }\n      }\n    `,\n    props.queryRef,\n  );\n\n  return (\n    <h1>{data.user?.name}</h1>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a GraphQL Fragment in Relay\nDESCRIPTION: Demonstrates how to create a named GraphQL fragment that specifies which fields to select from an Author object, including the author's name and photo URL.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/principles-and-architecture/thinking-in-relay.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// AuthorDetails.react.js\nconst authorDetailsFragment = graphql`\n  fragment AuthorDetails_author on Author {\n    name\n    photo {\n      url\n    }\n  }\n`;\n```\n\n----------------------------------------\n\nTITLE: Implementing Like Button Using Relay useMutation Hook\nDESCRIPTION: Example implementation of a Like button component using the useMutation hook from Relay. It demonstrates how to define and execute a GraphQL mutation, handle loading states, and respond to mutation completion.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v13.0.0/api-reference/hooks/use-mutation.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport type {FeedbackLikeMutation} from 'FeedbackLikeMutation.graphql';\nconst React = require('React');\n\nconst {graphql, useMutation} = require('react-relay');\n\nfunction LikeButton() {\n  const [commit, isInFlight] = useMutation<FeedbackLikeMutation>(graphql`\n    mutation FeedbackLikeMutation($input: FeedbackLikeData!) {\n      feedback_like(data: $input) {\n        feedback {\n          id\n          viewer_does_like\n          like_count\n        }\n      }\n    }\n  `);\n\n  if (isInFlight) {\n    return <Spinner />;\n  }\n\n  return (\n    <button\n      onClick={() => {\n        commit({\n          variables: {\n            input: {\n              id: '123',\n              text: 'text',\n            },\n          },\n          onCompleted(data) {\n            console.log(data);\n          },\n        });\n      }}\n    />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Querying for New Edge in GraphQL Mutation\nDESCRIPTION: This GraphQL mutation queries for a newly created comment edge, including the cursor and node data. The cursor is useful for pagination operations.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/guided-tour/list-data/updating-connections.md#2025-04-18_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst {graphql} = require('react-relay');\n\nconst createCommentMutation = graphql`\n  mutation CreateCommentMutation($input: CommentCreateData!) {\n    comment_create(input: $input) {\n      comment_edge {\n        cursor\n        node {\n          body {\n            text\n          }\n        }\n      }\n    }\n  }\n`;\n```\n\n----------------------------------------\n\nTITLE: Implementing Suspense-free data fetching in Relay with React\nDESCRIPTION: This code snippet demonstrates how to implement a data fetching strategy in a Relay-based React application that avoids showing a Suspense fallback. It uses fetchQuery to pre-fetch data, manages a custom loading state, and updates the UI without hiding existing content.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/guided-tour/refetching/refetching-queries-with-different-data.md#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * App.react.js\n */\nconst AppQuery = require('__generated__/AppQuery.graphql');\n\nfunction App(props: Props) {\n  const environment = useRelayEnvironment();\n  const [isRefreshing, setIsRefreshing] = useState(false)\n  const [queryArgs, setQueryArgs] = useState({\n    options: {fetchKey: 0, fetchPolicy: 'store-or-network'},\n    variables: {id: '4'},\n  });\n\n  const refetch = useCallback(() => {\n    if (isRefreshing) { return; }\n    setIsRefreshing(true);\n    const variables = { id: 'different-id' };\n\n    // fetchQuery will fetch the query and write\n    // the data to the Relay store. This will ensure\n    // that when we re-render, the data is already\n    // cached and we don't suspend\n    fetchQuery(environment, AppQuery, variables)\n      .subscribe({\n        complete: () => {\n          setIsRefreshing(false);\n\n          // *After* the query has been fetched, we update\n          // our state to re-render with the new fetchKey\n          // and fetchPolicy.\n          // At this point the data for the query should\n          // be cached, so we use the 'store-only'\n          // fetchPolicy to avoid suspending.\n          setQueryArgs(prev => ({\n            options: {\n              fetchKey: (prev?.options.fetchKey ?? 0) + 1,\n              fetchPolicy: 'store-only',\n            },\n            variables,\n          }));\n        },\n        error: () => {\n          setIsRefreshing(false);\n        }\n      });\n  }, [/* ... */]);\n\n  return (\n    <React.Suspense fallback=\"Loading query...\">\n      <MainContent\n        isRefetching={isRefreshing}\n        refetch={refetch}\n        queryArgs={queryArgs}\n      />\n    </React.Suspense>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Connection Using getConnectionID\nDESCRIPTION: This code snippet demonstrates how to access a Relay connection using the `ConnectionHandler.getConnectionID` API. It requires the ID of the parent record (storyID) and the connection key to generate the connection ID, which is then used to access the connection record in the Relay store within an updater function.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/guided-tour/list-data/updating-connections.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst {ConnectionHandler} = require('relay-runtime');\n\nfunction updater(store: RecordSourceSelectorProxy) {\n  // Get the connection ID\n  const connectionID = ConnectionHandler.getConnectionID(\n    storyID, // passed as input to the mutation/subscription\n    'StoryComponent_story_comments_connection',\n  );\n\n  // Get the connection record\n  const connectionRecord = store.get(connectionID);\n\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring WebSocket Subscriptions with subscriptions-transport-ws\nDESCRIPTION: Implements GraphQL subscriptions using the legacy subscriptions-transport-ws library, converting its observable to Relay's observable type\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/guided-tour/updating-data/graphql-subscriptions.md#2025-04-18_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport {\n    ...\n    Network,\n    Observable\n} from 'relay-runtime';\nimport { SubscriptionClient } from 'subscriptions-transport-ws';\n\nconst subscriptionClient = new SubscriptionClient('ws://localhost:3000', {\n  reconnect: true,\n});\n\nconst subscribe = (request, variables) => {\n  const subscribeObservable = subscriptionClient.request({\n    query: request.text,\n    operationName: request.name,\n    variables,\n  });\n  // Important: Convert subscriptions-transport-ws observable type to Relay's\n  return Observable.from(subscribeObservable);\n};\n\nconst network = Network.create(fetchQuery, subscribe);\n```\n\n----------------------------------------\n\nTITLE: Using commitLocalUpdate in Relay\nDESCRIPTION: Example showing how to use commitLocalUpdate to make local updates to the Relay store. The function takes an environment and an updater function that can imperatively mutate store data.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/guided-tour/updating-data/local-data-updates.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport type {Environment} from 'react-relay';\n\nconst {commitLocalUpdate, graphql} = require('react-relay');\n\nfunction commitCommentCreateLocally(\n  environment: Environment,\n  feedbackID: string,\n) {\n  return commitLocalUpdate(environment, store => {\n    // Imperatively mutate the store here\n  });\n}\n\nmodule.exports = {commit: commitCommentCreateLocally};\n```\n\n----------------------------------------\n\nTITLE: Using usePaginationFragment with a GraphQL Connection in React-Relay\nDESCRIPTION: This snippet demonstrates how to implement pagination on a GraphQL connection using the usePaginationFragment hook from React-Relay. It shows how to define a component that renders a list of friends and includes pagination controls for loading more items.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/api-reference/hooks/use-pagination-fragment.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport type {FriendsListPaginationQuery} from 'FriendsListPaginationQuery.graphql';\nimport type {FriendsList_user$key} from 'FriendsList_user.graphql';\n\nconst React = require('React');\n\nconst {graphql, usePaginationFragment} = require('react-relay');\n\ntype Props = {\n  user: FriendsList_user$key,\n};\n\nfunction FriendsList(props: Props) {\n  const {\n    data,\n    loadNext,\n    loadPrevious,\n    hasNext,\n    hasPrevious,\n    isLoadingNext,\n    isLoadingPrevious,\n    refetch, // For refetching connection\n  } = usePaginationFragment<FriendsListPaginationQuery, _>(\n    graphql`\n      fragment FriendsListComponent_user on User\n      @refetchable(queryName: \"FriendsListPaginationQuery\") {\n        name\n        friends(first: $count, after: $cursor)\n        @connection(key: \"FriendsList_user_friends\") {\n          edges {\n            node {\n              name\n              age\n            }\n          }\n        }\n      }\n    `,\n    props.user,\n  );\n\n  return (\n    <>\n      <h1>Friends of {data.name}:</h1>\n\n      <List items={data.friends?.edges.map(edge => edge.node)}>\n        {node => {\n          return (\n            <div>\n              {node.name} - {node.age}\n            </div>\n          );\n        }}\n      </List>\n      <Button onClick={() => loadNext(10)}>Load more friends</Button>\n    </>\n  );\n}\n\nmodule.exports = FriendsList;\n```\n\n----------------------------------------\n\nTITLE: Modifying PosterDetailsHovercardContents to Use usePreloadedQuery in JavaScript/JSX\nDESCRIPTION: This code snippet demonstrates how to update the PosterDetailsHovercardContents component to use usePreloadedQuery instead of useLazyLoadQuery, accepting a queryRef prop instead of variables.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/tutorial/queries-2.md#2025-04-18_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport {usePreloadedQuery} from 'react-relay';\nimport type {PreloadedQuery} from 'react-relay';\nimport type {PosterDetailsHovercardContentsQuery as QueryType} from './__generated__/PosterDetailsHovercardContentsQuery.graphql';\n\nexport default function PosterDetailsHovercardContents({\n  // change-line\n  queryRef,\n}: {\n  // change-line\n  queryRef: PreloadedQuery<QueryType>,\n}): React.ReactElement {\n  // change-line\n  const data = usePreloadedQuery(\n    PosterDetailsHovercardContentsQuery,\n    // change-line\n    queryRef,\n  );\n  ...\n```\n\n----------------------------------------\n\nTITLE: Defining a Connection in a GraphQL Fragment\nDESCRIPTION: This snippet shows how to define a connection in a GraphQL fragment using the @connection directive. It's used to store and accumulate items fetched for the connection.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/guided-tour/updating-data/updating-connections.md#2025-04-18_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst {graphql} = require('react-relay');\n\nconst storyFragment = graphql`\n  fragment StoryComponent_story on Story {\n    comments @connection(key: \"StoryComponent_story_comments_connection\") {\n      nodes {\n        body {\n          text\n        }\n      }\n    }\n  }\n`;\n```\n\n----------------------------------------\n\nTITLE: Refetching Fragment Data with useRefetchableFragment in Relay\nDESCRIPTION: Example demonstrating how to use useRefetchableFragment Hook with the @refetchable directive to fetch a different version of data for a comment. The snippet shows fetching a comment's body text in a different language.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/guided-tour/refetching/refetching-fragments-with-different-data.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport type {CommentBody_comment$key} from 'CommentBody_comment.graphql';\n\ntype Props = {\n  comment: CommentBody_comment$key,\n};\n\nfunction CommentBody(props: Props) {\n  const [data, refetch] = useRefetchableFragment(\n    graphql`\n      fragment CommentBody_comment on Comment\n      # @refetchable makes it so Relay autogenerates a query for\n      # fetching this fragment\n      @refetchable(queryName: \"CommentBodyRefetchQuery\") {\n        body(lang: $lang) {\n          text\n        }\n      }\n    `,\n    props.comment,\n  );\n\n  const refetchTranslation = () => {\n    // We call refetch with new variables,\n    // which will refetch the @refetchable query with the\n    // new variables and update this component with the\n    // latest fetched data.\n    refetch({lang: 'SPANISH'});\n  };\n\n  return (\n    <>\n      <p>{data.body?.text}</p>\n      <Button\n        onClick={() => refetchTranslation()}>\n        Translate Comment\n      </Button>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Mutation with useMutation Hook\nDESCRIPTION: Enhanced component implementation using Relay's useMutation hook to handle like functionality\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/tutorial/mutations-updates.md#2025-04-18_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport {useMutation, useFragment} from 'react-relay';\n\nfunction StoryLikeButton({story}) {\n  const data = useFragment(StoryLikeButtonFragment, story);\n  const [commitMutation, isMutationInFlight] = useMutation(StoryLikeButtonLikeMutation);\n  function onLikeButtonClicked() {\n    commitMutation({\n      variables: {\n        id: data.id,\n        doesLike: !data.doesViewerLike,\n      },\n    })\n  }\n  return (\n    <>\n      <LikeCount count={data.likeCount} />\n      <LikeButton value={data.doesViewerLike} onChange={onLikeButtonClicked} disabled={isMutationInFlight} />\n    </>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Connection ID Using __id Field\nDESCRIPTION: Example showing how to query and access a connection's __id field in Relay fragment.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/guided-tour/list-data/updating-connections.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst fragmentData = useFragment(\n  graphql`\n    fragment StoryComponent_story on Story {\n      comments @connection(key: \"StoryComponent_story_comments_connection\") {\n        # Query for the __id field\n        __id\n\n        # ...\n      }\n    }\n  `,\n  props.story,\n);\n\n// Get the connection record id\nconst connectionID = fragmentData?.comments?.__id;\n```\n\n----------------------------------------\n\nTITLE: Testing Relay Mutations (JavaScript)\nDESCRIPTION: This snippet shows how to test a Relay mutation function. It creates a mock environment, calls the mutation function, and verifies that the onCompleted callback is called after resolving the operation.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/guides/testing-relay-components.md#2025-04-18_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n// Say, you have a mutation function\nfunction sendMutation(environment, onCompleted, onError, variables)\n  commitMutation(environment, {\n    mutation: graphql`...`,\n    onCompleted,\n    onError,\n    variables,\n  });\n}\n\n// Example test may be written like so\ntest('it should send mutation', () => {\n  const environment = createMockEnvironment();\n  const onCompleted = jest.fn();\n  sendMutation(environment, onCompleted, jest.fn(), {});\n  const operation = environment.mock.getMostRecentOperation();\n\n  act(() => {\n    environment.mock.resolve(\n      operation,\n      MockPayloadGenerator.generate(operation)\n    );\n  });\n\n  expect(onCompleted).toBeCalled();\n});\n```\n\n----------------------------------------\n\nTITLE: Rendering a Connection using usePaginationFragment in Relay\nDESCRIPTION: This snippet demonstrates how to use the usePaginationFragment Hook to render a GraphQL connection in a React component. It includes Flow type annotations, fragment definition with @refetchable directive, and rendering of connection edges.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/guided-tour/list-data/rendering-connections.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport type {FriendsListPaginationQuery} from 'FriendsListPaginationQuery.graphql';\nimport type {FriendsListComponent_user$key} from 'FriendsList_user.graphql';\n\nconst React = require('React');\nconst {Suspense} = require('React');\n\nconst {graphql, usePaginationFragment} = require('react-relay');\n\ntype Props = {\n  user: FriendsListComponent_user$key,\n};\n\nfunction FriendsListComponent(props: Props) {\n  const {data} = usePaginationFragment<FriendsListPaginationQuery, _>(\n    graphql`\n      fragment FriendsListComponent_user on User\n      @refetchable(queryName: \"FriendsListPaginationQuery\") {\n        name\n        friends(first: $count, after: $cursor)\n        @connection(key: \"FriendsList_user_friends\") {\n          edges {\n            node {\n              ...FriendComponent\n            }\n          }\n        }\n      }\n    `,\n    props.user,\n  );\n\n\n  return (\n    <>\n      {data.name != null ? <h1>Friends of {data.name}:</h1> : null}\n\n      <div>\n        {/* Extract each friend from the resulting data */}\n        {(data.friends?.edges ?? []).map(edge => {\n          const node = edge.node;\n          return (\n            <Suspense fallback={<Glimmer />}>\n              <FriendComponent user={node} />\n            </Suspense>\n          );\n        })}\n      </div>\n    </>\n  );\n}\n\nmodule.exports = FriendsListComponent;\n```\n\n----------------------------------------\n\nTITLE: Retaining Queries with Relay in JavaScript\nDESCRIPTION: The snippet demonstrates how to manually retain a query in Relay using the `environment.retain` method. This prevents the referenced data from being garbage collected. It requires the Relay runtime, specifically the `createOperationDescriptor` and `getRequest` functions, and a valid GraphQL query object. The retained data can later be released by disposing of the returned disposable object.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v13.0.0/guided-tour/managing-data-outside-react/retaining-queries.md#2025-04-18_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nconst {\n  createOperationDescriptor,\n  getRequest,\n  graphql,\n} = require('relay-runtime')\n\n// Query graphql object\nconst query = graphql`...`;\n\n// Construct Relay's internal representation of the query\nconst queryRequest = getRequest(query);\nconst queryDescriptor = createOperationDescriptor(\n  queryRequest,\n  variables\n);\n\n// Retain query; this will prevent the data for this query and\n// variables from being gabrage collected by Relay\nconst disposable = environment.retain(queryDescriptor);\n\n// Disposing of the disposable will release the data for this query\n// and variables, meaning that it can be deleted at any moment\n// by Relay's garbage collection if it hasn't been retained elsewhere\ndisposable.dispose();\n```\n\n----------------------------------------\n\nTITLE: Loading an EntryPoint with loadEntryPoint in JavaScript\nDESCRIPTION: Example demonstrating how to use loadEntryPoint to load an EntryPoint and its associated queries. The function creates an EntryPoint reference that must be properly disposed when no longer needed to prevent memory leaks.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/api-reference/entrypoint-apis/load-entrypoint.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst EntryPoint = require('MyComponent.entrypoint.js');\n\nconst {loadQuery} = require('react-relay');\n\n// Generally, your component should access the environment from the React context,\n// and pass that environment to this function.\nconst getEntrypointReference = environment => loadEntryPoint(\n  { getEnvironment: () => environment },\n  EntryPoint,\n  {id: '4'},\n);\n\n// later: pass entryPointReference to EntryPointContainer\n// Note that EntryPoint references should have .dispose() called on them,\n// which is missing in this example.\n```\n\n----------------------------------------\n\nTITLE: Updating TypeScript Types for Fragment References\nDESCRIPTION: Modifying the Props type definition to work with fragment keys instead of raw data. This ensures type safety when components receive fragment references from their parents.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/tutorial/fragments-1.md#2025-04-18_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// change-line\nimport type {StoryFragment$key} from './__generated__/StoryFragment.graphql';\n\ntype Props = {\n  // change-line\n  story: StoryFragment$key;\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Pagination Over Multiple Connections in React Relay\nDESCRIPTION: This code demonstrates how to paginate over multiple connections within the same component using multiple calls to usePaginationFragment. It shows separate pagination for user friends and viewer friends connections.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/guided-tour/list-data/advanced-pagination.md#2025-04-18_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nimport type {CombinedFriendsListComponent_user$key} from 'CombinedFriendsListComponent_user.graphql';\nimport type {CombinedFriendsListComponent_viewer$key} from 'CombinedFriendsListComponent_viewer.graphql';\n\nconst React = require('React');\n\nconst {graphql, usePaginationFragment} = require('react-relay');\n\ntype Props = {\n  user: CombinedFriendsListComponent_user$key,\n  viewer: CombinedFriendsListComponent_viewer$key,\n};\n\nfunction CombinedFriendsListComponent(props: Props) {\n\n  const {data: userData, ...userPagination} = usePaginationFragment(\n    graphql`\n      fragment CombinedFriendsListComponent_user on User {\n        name\n        friends\n          @connection(\n            key: \"CombinedFriendsListComponent_user_friends_connection\"\n          ) {\n          edges {\n            node {\n              name\n              age\n            }\n          }\n        }\n      }\n    `,\n    props.user,\n  );\n\n  const {data: viewerData, ...viewerPagination} = usePaginationFragment(\n    graphql`\n      fragment CombinedFriendsListComponent_user on Viewer {\n        actor {\n          ... on User {\n            name\n            friends\n              @connection(\n                key: \"CombinedFriendsListComponent_viewer_friends_connection\"\n              ) {\n              edges {\n                node {\n                  name\n                  age\n                }\n              }\n            }\n          }\n        }\n      }\n    `,\n    props.viewer,\n  );\n\n  return (...);\n}\n```\n\n----------------------------------------\n\nTITLE: Refreshing Queries Using fetchQuery to Avoid Suspense in React and Relay\nDESCRIPTION: This snippet shows how to refresh a query using fetchQuery instead of useQueryLoader to avoid showing a Suspense fallback. It manually tracks the loading state and ensures the data is cached before re-rendering.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/guided-tour/refetching/refreshing-queries.md#2025-04-18_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n/**\n * App.react.js\n */\n\nconst AppQuery = require('__generated__/AppQuery.graphql');\n\nfunction App(props: Props) {\n  const environment = useRelayEnvironment();\n  const [queryRef, loadQuery] = useQueryLoader(\n    AppQuery,\n    props.appQueryRef /* initial query ref */\n  );\n  const [isRefreshing, setIsRefreshing] = useState(false)\n\n  const refresh = useCallback(() => {\n    if (isRefreshing) { return; }\n    const {variables} = props.appQueryRef;\n    setIsRefreshing(true);\n\n    // fetchQuery will fetch the query and write\n    // the data to the Relay store. This will ensure\n    // that when we re-render, the data is already\n    // cached and we don't suspend\n    fetchQuery(environment, AppQuery, variables)\n      .subscribe({\n        complete: () => {\n          setIsRefreshing(false);\n\n          // *After* the query has been fetched, we call\n          // loadQuery again to re-render with a new\n          // queryRef.\n          // At this point the data for the query should\n          // be cached, so we use the 'store-only'\n          // fetchPolicy to avoid suspending.\n          loadQuery(variables, {fetchPolicy: 'store-only'});\n        }\n        error: () => {\n          setIsRefreshing(false);\n        }\n      });\n  }, [/* ... */]);\n\n  return (\n    <React.Suspense fallback=\"Loading query...\">\n      <MainContent\n        isRefreshing={isRefreshing}\n        refresh={refresh}\n        queryRef={queryRef}\n      />\n    </React.Suspense>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring GraphQL Mutation in Relay\nDESCRIPTION: Example showing how to declare a GraphQL mutation using Relay's graphql tag.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/guided-tour/updating-data/graphql-mutations.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst {graphql} = require('react-relay');\n\nconst feedbackLikeMutation = graphql`\n  mutation FeedbackLikeMutation($input: FeedbackLikeData!) {\n    feedback_like(data: $input) {\n      feedback {\n        id\n        viewer_does_like\n        like_count\n      }\n    }\n  }\n`;\n```\n\n----------------------------------------\n\nTITLE: Querying New Edge from Mutation - Relay GraphQL\nDESCRIPTION: This snippet demonstrates how to query a newly created edge from a mutation response using Relay's graphql. Dependencies include React Relay and a predefined GraphQL mutation. The parameters involve input data for comment creation, and the output is the comment edge structure containing cursor and node details.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/guided-tour/updating-data/updating-connections.md#2025-04-18_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst {graphql} = require('react-relay');\n\nconst createCommentMutation = graphql`\n  mutation CreateCommentMutation($input: CommentCreateData!) {\n    comment_create(input: $input) {\n      comment_edge {\n        cursor\n        node {\n          body {\n            text\n          }\n        }\n      }\n    }\n  }\n`;\n```\n\n----------------------------------------\n\nTITLE: Deleting a Local Note with commitLocalUpdate\nDESCRIPTION: This function uses `commitLocalUpdate` to delete a `Note` record from the Relay store and remove it from the `User`'s `notes` list.  It updates the store and removes the record by the dataID. Requires 'react-relay' dependency.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/guides/client-schema-extensions.md#2025-04-18_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport {commitLocalUpdate} from 'react-relay';\n\nfunction deleteUserNote(environment, dataID) {\n  commitLocalUpdate(environment, store => {\n    const user = store.getRoot().getLinkedRecord('viewer');\n    const userNoteRecords = user.getLinkedRecords('notes');\n\n    // Remove the note from the list of user notes.\n    const newUserNoteRecords = userNoteRecords.filter(x => x.getDataID() !== dataID);\n\n    // Delete the note from the store.\n    store.delete(dataID);\n\n    // Set the new list of notes.\n    user.setLinkedRecords(newUserNoteRecords, 'notes');\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Connection in Relay Runtime with JavaScript\nDESCRIPTION: This snippet demonstrates how to use the `getConnection` method of `ConnectionHandler` to retrieve a connection record associated with the provided parent record and connection key, optionally applying filters to the lookup.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/api-reference/relay-runtime/store.md#2025-04-18_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\nconst user = store.get(userID);\nconst friends = ConnectionHandler.getConnection(\n user,                        // parent record\n 'FriendsFragment_friends',   // connection key\n {orderby: 'firstname'}       // 'filters' that is used to identify the connection\n);\n// Access fields on the connection:\nconst edges = friends.getLinkedRecords('edges');\n```\n\n----------------------------------------\n\nTITLE: Using @deleteEdge Directive in GraphQL Mutation\nDESCRIPTION: This snippet demonstrates how to use the @deleteEdge directive in a GraphQL mutation to delete edges from connections. It includes obtaining the connection ID and passing it to the mutation.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/guided-tour/list-data/updating-connections.md#2025-04-18_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n// Get the connection ID using the `__id` field\nconst connectionID = fragmentData?.comments?.__id;\n\n// Or get it using `ConnectionHandler.getConnectionID()`\nconst connectionID = ConnectionHandler.getConnectionID(\n  '<story-id>',\n  'StoryComponent_story_comments_connection',\n);\n\n// ...\n\n// Mutation\ncommitMutation<DeleteCommentsMutation>(environment, {\n  mutation: graphql`\n    mutation DeleteCommentsMutation(\n      # Define a GraphQL variable for the connections array\n      $connections: [ID!]!\n      $input: CommentsDeleteInput\n    ) {\n      commentsDelete(input: $input) {\n        deletedCommentIds @deleteEdge(connections: $connections)\n      }\n    }\n  `,\n  variables: {\n    input,\n    // Pass the `connections` array\n    connections: [connectionID],\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Actor Interface in GraphQL Types\nDESCRIPTION: Schema definitions for Person and Organization types that implement the Actor interface, showing both shared and type-specific fields.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/tutorial/interfaces-polymorphism.md#2025-04-18_snippet_2\n\nLANGUAGE: graphql\nCODE:\n```\ntype Person implements Actor {\n  id: ID!\n  name: String\n  profilePicture: Image\n  joined: DateTime\n  email: String\n  location: Location\n}\n\ntype Organization implements Actor {\n  id: ID!\n  name: String\n  profilePicture: Image\n  joined: DateTime\n  organizationKind: OrganizationKind\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Relay Query Loading Pattern with usePreloadedQuery\nDESCRIPTION: Example showing how to use usePreloadedQuery and useQueryLoader hooks to implement render-as-you-fetch pattern in Relay. The code demonstrates a component that loads and displays a user's name based on an ID, handling loading states with React Suspense.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/api-reference/hooks/use-preloaded-query.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport type {AppQueryType} from 'AppQueryType.graphql';\n\nconst React = require('React');\n\nconst {graphql, useQueryLoader, usePreloadedQuery} = require('react-relay');\n\nconst AppQuery = graphql`\n  query AppQuery($id: ID!) {\n    user(id: $id) {\n      name\n    }\n  }\n`;\n\ntype Props = {\n  initialQueryRef: PreloadedQuery<AppQueryType>,\n};\n\nfunction NameLoader(props) {\n  const [queryReference, loadQuery] = useQueryLoader(\n    AppQuery,\n    props.initialQueryRef, /* e.g. provided by router */\n  );\n\n  return (<>\n    <Button\n      onClick={() => loadQuery({id: '4'})}\n      disabled={queryReference != null}\n    >\n      Reveal your name!\n    </Button>\n    <Suspense fallback=\"Loading...\">\n      {queryReference != null\n        ? <NameDisplay queryReference={queryReference} />\n        : null\n      }\n    </Suspense>\n  </>);\n}\n\nfunction NameDisplay({ queryReference }) {\n  const data = usePreloadedQuery(AppQuery, queryReference);\n\n  return <h1>{data.user?.name}</h1>;\n}\n```\n\n----------------------------------------\n\nTITLE: Specify Connection Details for Mutation in Relay (JavaScript)\nDESCRIPTION: Demonstrates how to pass specific connection details to a mutation using the ConnectionHandler API in Relay to ensure newly created comments are added to the correct connection.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/tutorial/mutations-updates.md#2025-04-18_snippet_14\n\nLANGUAGE: JavaScript\nCODE:\n```\n// change-line\nimport {useFragment, useMutation, ConnectionHandler} from 'react-relay';\n\n...\n\nexport default function StoryCommentsComposer({story}: Props) {\n  ...\n  function onPost() {\n    setText('');\n    // change\n    const connectionID = ConnectionHandler.getConnectionID(\n      data.id,\n      'StoryCommentsSectionFragment_comments',\n    );\n    // end-change\n    commitMutation({\n      variables: {\n        id: data.id,\n        text,\n        // change-line\n        connections: [connectionID],\n      },\n    })\n  }\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Normalizing GraphQL Response Data in Relay Runtime\nDESCRIPTION: Demonstrates how Relay normalizes a GraphQL response into a RecordSource with separate Records. The example shows a User object with a nested Address, where the nested object is stored as a separate record with a client-generated ID and referenced via a pointer.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v13.0.0/principles-and-architecture/runtime-architecture.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// GraphQL Fragment\nfragment on User {\n  id\n  name\n  address {\n    city\n  }\n}\n\n// Response\n{\n  id: '842472',\n  name: 'Joe',\n  address: {\n    city: 'Seattle',\n  }\n}\n\n// Normalized Representation\nRecordSource {\n  '842472': Record {\n    __id: '842472',\n    __typename: 'User', // the type is known statically from the fragment\n    id: '842472',\n    name: 'Joe',\n    address: {__ref: 'client:842472:address'}, // link to another record\n  },\n  'client:842472:address': Record {\n    // A client ID, derived from the path from parent & parent's ID\n    __id: 'client:842472:address',\n    __typename: 'Address',\n    city: 'Seattle',\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Downloading GraphQL Schema\nDESCRIPTION: Command to download the Star Wars GraphQL schema\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/getting-started/quick-start.md#2025-04-18_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncurl -O https://raw.githubusercontent.com/graphql/swapi-graphql/refs/heads/master/schema.graphql\n```\n\n----------------------------------------\n\nTITLE: Implementing useQueryLoader in PosterByline Component in JavaScript\nDESCRIPTION: This snippet shows how to use useQueryLoader in the PosterByline component to create a query reference and load function for the hovercard query.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/tutorial/queries-2.md#2025-04-18_snippet_9\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport {useQueryLoader} from 'react-relay';\nimport type {PosterDetailsHovercardContentsQuery as HovercardQueryType} from './__generated__/PosterDetailsHovercardContentsQuery.graphql';\nimport {PosterDetailsHovercardContentsQuery} from './PosterDetailsHovercardContents';\n\nexport default function PosterByline({ poster }: Props): React.ReactElement {\n  ...\n  // change\n  const [\n    hovercardQueryRef,\n    loadHovercardQuery,\n  ] = useQueryLoader<HovercardQueryType>(PosterDetailsHovercardContentsQuery);\n  // end-change\n  return (\n   ...\n    <PosterDetailsHovercardContents\n      // change-line\n      queryRef={hovercardQueryRef}\n    />\n   ...\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using hasNext for Conditional Rendering in Relay Pagination\nDESCRIPTION: This snippet showcases how to use the hasNext property from usePaginationFragment to conditionally render a 'Load more' button based on whether there are more items available in the connection.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/guided-tour/list-data/pagination.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport type {FriendsListPaginationQuery} from 'FriendsListPaginationQuery.graphql';\nimport type {FriendsListComponent_user$key} from 'FriendsList_user.graphql';\n\nconst React = require('React');\nconst {Suspense} = require('React');\n\nconst {graphql, usePaginationFragment} = require('react-relay');\n\ntype Props = {\n  user: FriendsListComponent_user$key,\n};\n\nfunction FriendsListComponent(props: Props) {\n  // ...\n  const {\n    data,\n    loadNext,\n    hasNext,\n  } = usePaginationFragment(\n    graphql`...`,\n    props.user,\n  );\n\n  return (\n    <>\n      <h1>Friends of {data.name}:</h1>\n      {/* ... */}\n\n      {/* Only render button if there are more friends to load in the list */}\n      {hasNext ? (\n        <Button\n          onClick={/* ... */}>\n          Load more friends\n        </Button>\n      ) : null}\n    </>\n  );\n}\n\nmodule.exports = FriendsListComponent;\n```\n\n----------------------------------------\n\nTITLE: Using useEntryPointLoader Hook with EntryPointContainer in React-Relay\nDESCRIPTION: This example demonstrates how to implement the useEntryPointLoader hook to safely manage EntryPoints. The component shows a button to load an EntryPoint, displays its contents after loading, and provides another button to dispose of it when no longer needed. The example highlights proper usage of EntryPointContainer within a Suspense boundary.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/api-reference/entrypoint-apis/use-entrypoint-loader.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst {useEntryPointLoader, EntryPointContainer} = require('react-relay');\n\nconst ComponentEntryPoint = require('Component.entrypoint');\n\nfunction EntryPointRevealer(): React.MixedElement {\n  const environmentProvider = useMyEnvironmentProvider();\n  const [\n    entryPointReference,\n    loadEntryPoint,\n    disposeEntryPoint,\n  ] = useEntryPointLoader(environmentProvider, ComponentEntryPoint);\n\n  return (\n    <>\n      {\n        entryPointReference == null && (\n          <Button onClick={() => loadEntryPoint({})}>\n            Click to reveal the contents of the EntryPoint\n          </Button>\n        )\n      }\n      {\n        entryPointReference != null && (\n          <>\n            <Button onClick={disposeEntryPoint}>\n              Click to hide and dispose the EntryPoint.\n            </Button>\n            <Suspense fallback=\"Loading...\">\n              <EntryPointContainer\n                entryPointReference={entryPointReference}\n                props={{}}\n              />\n            </Suspense>\n          </>\n        )\n      }\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Converting QueryRenderer to useLazyLoadQuery in React\nDESCRIPTION: Demonstrates how to convert a QueryRenderer component to use the useLazyLoadQuery hook. This includes handling loading and error states with Suspense and Error Boundaries.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/migration-and-compatibility/relay-hooks-and-legacy-container-apis.md#2025-04-18_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport * as React from 'React';\nimport {graphql, useLazyLoadQuery} from 'react-relay';\n\nexport default function Home() {\n  const data = useLazyLoadQuery(\n    graphql`\n      query HomeQuery($id: ID!) {\n        user(id: $id) {\n          name\n        }\n      }\n    `,\n    {id: 4},\n  );\n\n return <h1>{data.user?.name}</h1>;\n}\n```\n\nLANGUAGE: jsx\nCODE:\n```\n<ErrorBoundary renderError={Error}>\n  <Suspense fallback={<Loading />}>\n    <Home />\n  </Suspense>\n</ErrorBoundary>\n```\n\n----------------------------------------\n\nTITLE: Appending a Node to a Connection using @appendNode\nDESCRIPTION: Shows use of @appendNode directive to add nodes to a connection in a Relay mutation. Relies on acquiring connection IDs and importing graphql.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v13.0.0/guided-tour/list-data/updating-connections.md#2025-04-18_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Get the connection ID using the `__id` field\nconst connectionID = fragmentData?.comments?.__id;\n\n// Or get it using `ConnectionHandler.getConnectionID()`\nconst connectionID = ConnectionHandler.getConnectionID(\n  '<story-id>',\n  'StoryComponent_story_comments_connection',\n);\n\n// ...\n\n// Mutation\ncommitMutation<AppendCommentMutation>(environment, {\n  mutation: graphql`\n    mutation AppendCommentMutation(\n      # Define a GraphQL variable for the connections array\n      $connections: [ID!]!\n      $input: CommentCreateInput\n    ) {\n      commentCreate(input: $input) {\n        # Use @appendNode or @prependNode on the node field\n        feedbackCommentNode @appendNode(connections: $connections, edgeTypeName: \"CommentsEdge\") {\n          id\n        }\n      }\n    }\n  `,\n  variables: {\n    input,\n    // Pass the `connections` array\n    connections: [connectionID],\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Garbage Collection Release Buffer Size in Relay\nDESCRIPTION: This code demonstrates how to configure the release buffer size for the Relay Store, which determines how many released queries are temporarily retained to improve data reuse when navigating back to previously visited content.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/guided-tour/reusing-cached-data/presence-of-data.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst store = new Store(source, {gcReleaseBufferSize: 10});\n```\n\n----------------------------------------\n\nTITLE: Mapping over the list of stories in a React component\nDESCRIPTION: This React component iterates over the `topStories` array and renders a `Story` component for each story. The `useLazyLoadQuery` hook fetches the data using the `NewsfeedQuery`. The `key` prop is set to `story.id` for efficient React rendering.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/tutorial/arrays-lists.md#2025-04-18_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport default function Newsfeed({}) {\n  const data = useLazyLoadQuery<NewsfeedQueryType>(NewsfeedQuery, {});\n  const stories = data.topStories;\n  return (\n    <div className=\"newsfeed\">\n      {stories.map(story => (\n        <Story\n          key={story.id}\n          story={story}\n        />\n      ))}\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Preloading Queries with loadQuery - React Relay\nDESCRIPTION: This snippet shows how to use the `loadQuery` function from Relay to preload a GraphQL query outside a component's lifecycle. It requires a Relay environment and the query. It preloads a query with specified variables and prepares data before rendering the root component, catching errors if called during render.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/guided-tour/rendering/queries.md#2025-04-18_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nimport type {HomeTabQuery as HomeTabQueryType} from 'HomeTabQuery.graphql';\n\nconst HomeTabQuery = require('HomeTabQuery.graphql')\nconst {loadQuery} = require('react-relay');\n\nconst environment = createEnvironment(...);\n\n// At some point during app initialization\nconst initialQueryRef = loadQuery<HomeTabQueryType>(\n  environment,\n  HomeTabQuery,\n  {id: '4'},\n);\n\n// ...\n\n// E.g. passing the initialQueryRef to the root component\nrender(<AppTabs initialQueryRef={initialQueryRef} initialTab={...} />)\n```\n\n----------------------------------------\n\nTITLE: Fragment Component in Relay with useFragment\nDESCRIPTION: This code defines a fragment component `UsernameComponent` using React and Relay's `useFragment` hook. It retrieves the `username` field from the `User` type and utilizes a GraphQL fragment `UsernameComponent_user`. The component suspends if the `username` is missing during render.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/guided-tour/reusing-cached-data/rendering-partially-cached-data.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * UsernameComponent.react.js\n *\n * Fragment Component\n */\n\nimport type {UsernameComponent_user$key} from 'UsernameComponent_user.graphql';\n\nconst React = require('React');\nconst {graphql, useFragment} = require('react-relay');\n\ntype Props = {\n  user: UsernameComponent_user$key,\n};\n\nfunction UsernameComponent(props: Props) {\n  const user = useFragment(\n    graphql`\n      fragment UsernameComponent_user on User {\n        username\n      }\n    `,\n    props.user,\n  );\n  return (...);\n}\n\nmodule.exports = UsernameComponent;\n```\n\n----------------------------------------\n\nTITLE: Implementing Query Refresh with useQueryLoader Hook in JavaScript\nDESCRIPTION: This code snippet demonstrates how to use the useQueryLoader hook in a React component to refresh GraphQL queries in Relay. It involves calling loadQuery with network-only fetch policy to ensure data is fetched from the server. Expected inputs include the query reference and variables from the original query. The snippet assumes a Relay environment is set up and requires the useQueryLoader hook.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/guided-tour/refetching/refreshing-queries.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * App.react.js\n */\n\nconst AppQuery = require('__generated__/AppQuery.graphql');\n\nfunction App(props: Props) {\n  const [queryRef, loadQuery] = useQueryLoader(\n    AppQuery,\n    props.appQueryRef /* initial query ref */\n  );\n\n  const refresh = useCallback(() => {\n    // Load the query again using the same original variables.\n    // Calling loadQuery will update the value of queryRef.\n    // The fetchPolicy ensures we always fetch from the server and skip\n    // the local data cache.\n    const {variables} = props.appQueryRef;\n    loadQuery(variables, {fetchPolicy: 'network-only'});\n  }, [/* ... */]);\n\n  return (\n    <React.Suspense fallback=\"Loading query...\">\n      <MainContent\n        refresh={refresh}\n        queryRef={queryRef}\n      />\n    </React.Suspense>\n  );\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * MainContent.react.js\n */\n\n// Renders the preloaded query, given the query reference\nfunction MainContent(props) {\n  const {refresh, queryRef} = props;\n  const data = usePreloadedQuery(\n    graphql`\n      query AppQuery($id: ID!) {\n        user(id: $id) {\n          name\n          friends {\n            count\n          }\n        }\n      }\n    `,\n    queryRef,\n  );\n\n  return (\n    <>\n      <h1>{data.user?.name}</h1>\n      <div>Friends count: {data.user.friends?.count}</div>\n      <Button\n        onClick={() => refresh()}>\n        Fetch latest count\n      </Button>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Consuming a Relay Resolver in a React Component\nDESCRIPTION: An example showing how to query and consume a client-defined resolver field in a React component using the useClientQuery hook. This demonstrates how product code can access resolver data using familiar GraphQL patterns.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/guides/relay-resolvers/introduction.md#2025-04-18_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport {useLazyLoadQuery, graphql} from 'react-relay';\nimport {useClientQuery, graphql} from 'react-relay';\n\nfunction Greeting() {\n  const data = useClientQuery(graphql`\n    query GreetingQuery {\n      greeting\n    }`, {});\n  return <p>{data.greeting}</p>;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing RelayEnvironmentProvider with Custom Network Setup in JavaScript\nDESCRIPTION: Demonstrates how to set up and configure a RelayEnvironmentProvider at the root of a React application. It includes creating a custom fetch function for GraphQL requests, initializing a Relay environment, and wrapping the app with the provider component.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/api-reference/hooks/relay-environment-provider.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst React = require('React');\nconst {\n  Store,\n  RecordSource,\n  Environment,\n  Network,\n  Observable,\n} = require(\"relay-runtime\");\n\nconst {RelayEnvironmentProvider} = require('react-relay');\n\n/**\n * Custom fetch function to handle GraphQL requests for a Relay environment.\n *\n * This function is responsible for sending GraphQL requests over the network and returning\n * the response data. It can be customized to integrate with different network libraries or\n * to add authentication headers as needed.\n *\n * @param {RequestParameters} params - The GraphQL request parameters to send to the server.\n * @param {Variables} variables - Variables used in the GraphQL query.\n */\nfunction fetchFunction(params, variables) {\n  const response = fetch(\"http://my-graphql/api\", {\n    method: \"POST\",\n    headers: [[\"Content-Type\", \"application/json\"]],\n    body: JSON.stringify({\n      query: params.text,\n      variables,\n    }),\n  });\n\n  return Observable.from(response.then((data) => data.json()));\n};\n\n/**\n * Creates a new Relay environment instance for managing (fetching, storing) GraphQL data.\n */\nfunction createEnvironment() {\n  const network = Network.create(fetchFunction);\n  const store = new Store(new RecordSource());\n  return new Environment({ store, network });\n}\n\nconst environment = createEnvironment();\n\nfunction Root() {\n  return (\n    <RelayEnvironmentProvider environment={environment}>\n      <App />\n    </RelayEnvironmentProvider>\n  );\n}\n\nmodule.exports = Root;\n```\n\n----------------------------------------\n\nTITLE: Implementing Comment Posting with useMutation in Relay\nDESCRIPTION: This snippet demonstrates how to use the useMutation hook to commit a mutation for posting a comment. It sets up the mutation variables and resets the UI after posting.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/tutorial/mutations-updates.md#2025-04-18_snippet_13\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction StoryCommentsComposer({story}) {\n  const data = useFragment(StoryCommentsComposerFragment, story);\n  const [text, setText] = useState('');\n  const [commitMutation, isMutationInFlight] = useMutation(StoryCommentsComposerPostMutation);\n  function onPost() {\n    setText(''); // Reset the UI\n    commitMutation({\n      variables: {\n        id: data.id,\n        text,\n      },\n    })\n  }\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Using Error Boundaries to Wrap React Components\nDESCRIPTION: Example of how to wrap React components with an Error Boundary to catch rendering errors and display an alternative UI. This demonstrates the basic pattern for implementing error handling in a React application.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v13.0.0/guided-tour/rendering/error-states.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * App.react.js\n */\n\nconst ErrorBoundary = require('ErrorBoundary');\nconst React = require('React');\n\nconst MainContent = require('./MainContent.react');\nconst SecondaryContent = require('./SecondaryContent.react');\n\nfunction App() {\n  return (\n    // Render an ErrorSection if an error occurs within\n    // MainContent or Secondary Content\n    <ErrorBoundary fallback={error => <ErrorUI error={error} />}>\n      <MainContent />\n      <SecondaryContent />\n    </ErrorBoundary>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using Suspense with Query Renderer in Relay\nDESCRIPTION: This code demonstrates how to utilize Suspense alongside a Relay query renderer to manage loading states. 'MainContent' uses Relay's 'usePreloadedQuery' to fetch and render a query, and suspends while data is being fetched. Wrapped in a Suspense component, it shows a loading state until the data fetch is complete. This requires React and Relay as dependencies.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/guided-tour/rendering/loading-states.md#2025-04-18_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\n/**\n * MainContent.react.js\n *\n * Query Component\n */\n\nconst React = require('React');\nconst {graphql, usePreloadedQuery} = require('react-relay');\n\nfunction MainContent(props) {\n  // Fetch and render a query\n  const data = usePreloadedQuery(\n    graphql`...`,\n    props.queryRef,\n  );\n\n  return (...);\n}\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\n/**\n * App.react.js\n */\n\nconst React = require('React');\nconst {Suspense} = require('React');\n\nfunction App() {\n  return (\n    // LoadingGlimmer is rendered via the Suspense fallback\n    <Suspense fallback={<LoadingGlimmer />}>\n      <MainContent /> {/* MainContent may suspend */}\n    </Suspense>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Error Boundary in React\nDESCRIPTION: This snippet shows how to create a basic Error Boundary component in React. It uses the getDerivedStateFromError method to capture errors and update the component's state.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/guided-tour/rendering/error-states.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst React = require('React');\n\ntype State = {error: ?Error};\n\nclass ErrorBoundary extends React.Component<Props, State> {\n  static getDerivedStateFromError(error): State {\n    // Set some state derived from the caught error\n    return {error: error};\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Refreshing Queries Using useQueryLoader in React and Relay\nDESCRIPTION: This snippet demonstrates how to refresh a query using the useQueryLoader Hook in Relay. It shows the implementation in both the parent App component and the child MainContent component.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/guided-tour/refetching/refreshing-queries.md#2025-04-18_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n/**\n * App.react.js\n */\nimport type {AppQuery as AppQueryType} from 'AppQuery.graphql';\n\nconst AppQuery = require('__generated__/AppQuery.graphql');\n\nfunction App(props: Props) {\n  const [queryRef, loadQuery] = useQueryLoader<AppQueryType>(\n    AppQuery,\n    props.appQueryRef /* initial query ref */\n  );\n\n  const refresh = useCallback(() => {\n    // Load the query again using the same original variables.\n    // Calling loadQuery will update the value of queryRef.\n    // The fetchPolicy ensures we always fetch from the server and skip\n    // the local data cache.\n    const {variables} = props.appQueryRef;\n    loadQuery(variables, {fetchPolicy: 'network-only'});\n  }, [/* ... */]);\n\n  return (\n    <React.Suspense fallback=\"Loading query...\">\n      <MainContent\n        refresh={refresh}\n        queryRef={queryRef}\n      />\n    </React.Suspense>\n  );\n}\n```\n\nLANGUAGE: jsx\nCODE:\n```\n/**\n * MainContent.react.js\n */\nimport type {AppQuery as AppQueryType} from 'AppQuery.graphql';\n\n// Renders the preloaded query, given the query reference\nfunction MainContent(props) {\n  const {refresh, queryRef} = props;\n  const data = usePreloadedQuery<AppQueryType>(\n    graphql`\n      query AppQuery($id: ID!) {\n        user(id: $id) {\n          name\n          friends {\n            count\n          }\n        }\n      }\n    `,\n    queryRef,\n  );\n\n  return (\n    <>\n      <h1>{data.user?.name}</h1>\n      <div>Friends count: {data.user.friends?.count}</div>\n      <Button\n        onClick={() => refresh()}>\n        Fetch latest count\n      </Button>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Wrapping a Relay Query Component with Suspense\nDESCRIPTION: Example showing how to wrap a Relay query component with Suspense to handle loading states while the query is being fetched. This demonstrates the complete pattern of using Suspense with Relay queries.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v13.0.0/guided-tour/rendering/loading-states.md#2025-04-18_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * App.react.js\n */\n\nconst React = require('React');\nconst {Suspense} = require('React');\n\nfunction App() {\n  return (\n    // LoadingGlimmer is rendered via the Suspense fallback\n    <Suspense fallback={<LoadingGlimmer />}>\n      <MainContent /> {/* MainContent may suspend */}\n    </Suspense>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting Edge with Directive - Relay GraphQL\nDESCRIPTION: Shows how to use the @deleteEdge directive in a GraphQL mutation to remove edges in Relay. It involves querying for node IDs to be deleted and applying the directive to remove those nodes from connections. The snippet includes a setup for passing connection IDs as part of the variables.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/guided-tour/updating-data/updating-connections.md#2025-04-18_snippet_11\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Get the connection ID using the `__id` field\nconst connectionID = fragmentData?.comments?.__id;\n\n// Or get it using `ConnectionHandler.getConnectionID()`\nconst connectionID = ConnectionHandler.getConnectionID(\n  '<story-id>',\n  'StoryComponent_story_comments_connection',\n);\n\n// ...\n\n// Mutation\ncommitMutation<DeleteCommentsMutation>(environment, {\n  mutation: graphql`\n    mutation DeleteCommentsMutation(\n      # Define a GraphQL variable for the connections array\n      $connections: [ID!]!\n      $input: CommentsDeleteInput\n    ) {\n      commentsDelete(input: $input) {\n        deletedCommentIds @deleteEdge(connections: $connections)\n      }\n    }\n  `,\n  variables: {\n    input,\n    // Pass the `connections` array\n    connections: [connectionID],\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Updating Multiple Connection Records with Filter Awareness\nDESCRIPTION: This snippet shows how to update relevant connection records based on their filter values. It demonstrates conditionally adding a new comment edge to different connection records depending on whether it meets the filter criteria.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/guided-tour/list-data/updating-connections.md#2025-04-18_snippet_14\n\nLANGUAGE: js\nCODE:\n```\nconst {ConnectionHandler} = require('relay-runtime');\n\nfunction updater(store: RecordSourceSelectorProxy) {\n  const storyRecord = store.get(storyID);\n\n  // Get the connection instance for the connection with comments sorted\n  // by the date they were added\n  const connectionRecordSortedByDate = ConnectionHandler.getConnection(\n    storyRecord,\n    'StoryComponent_story_comments_connection',\n    {order_by: '*DATE_ADDED*', filter_mode: null, language: null}\n  );\n\n  // Get the connection instance for the connection that only contains\n  // comments made by friends\n  const connectionRecordFriendsOnly = ConnectionHandler.getConnection(\n    storyRecord,\n    'StoryComponent_story_comments_connection',\n    {order_by: null, filter_mode: '*FRIENDS_ONLY*', language: null}\n  );\n\n  const newComment = (...);\n  const newEdge = (...);\n\n  ConnectionHandler.insertEdgeAfter(\n    connectionRecordSortedByDate,\n    newEdge,\n  );\n\n  if (isMadeByFriend(storyRecord, newComment) {\n    // Only add new comment to friends-only connection if the comment\n    // was made by a friend\n    ConnectionHandler.insertEdgeAfter(\n      connectionRecordFriendsOnly,\n      newEdge,\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Mock Resolver Context Example\nDESCRIPTION: This code snippet shows how to use the Mock Resolver Context to return dynamic values based on the field name, alias, path in the selection, arguments, or parent type.  It provides examples of how to conditionally return different string values based on these context properties.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/guides/testing-relay-components.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  String(context) {\n    if (context.name === 'zip') {\n      return '94025';\n    }\n    if (context.path != null && context.path.join('.') === 'node.actor.name') {\n      return 'Current Actor Name';\n    }\n    if (context.parentType === 'Image' && context.name === 'uri') {\n       return 'http://my-image.url';\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting a Record\nDESCRIPTION: Demonstrates how to delete a record from the store using the `delete` method of the `RecordSourceSelectorProxy`. The method takes a `dataID` (string) of the record to be deleted.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v13.0.0/api-reference/relay-runtime/store.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nstore.delete(dataID);\n```\n\n----------------------------------------\n\nTITLE: Using useSubscribeToInvalidationState Hook for Immediate Refetching\nDESCRIPTION: Example of how to use the useSubscribeToInvalidationState hook to subscribe to changes in invalidation state for specific records and trigger immediate refetching when those records become stale.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/guided-tour/reusing-cached-data/staleness-of-data.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nfunction ProfilePage(props) {\n  // Example of querying data for the current page for a given user\n  const data = usePreloadedQuery(\n    graphql`...`,\n    props.preloadedQuery,\n  )\n\n  // Here we subscribe to changes in invalidation state for the given user ID.\n  // Whenever the user with that ID is marked as stale, the provided callback will\n  // be executed\n  useSubscribeToInvalidationState([props.userID], () => {\n    // Here we can do things like:\n    // - re-evaluate the query by passing a new preloadedQuery to usePreloadedQuery.\n    // - imperatively refetch any data\n    // - render a loading spinner or gray out the page to indicate that refetch\n    //   is happening.\n  })\n\n  return (...);\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Optimistic Update\nDESCRIPTION: Implementation of optimistic updates for immediate UI feedback during mutation.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/tutorial/mutations-updates.md#2025-04-18_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nfunction StoryLikeButton({story}) {\n  ...\n  function onLikeButtonClicked(newDoesLike) {\n    commitMutation({\n      variables: {\n        id: data.id,\n        doesLike: newDoesLike,\n      },\n      optimisticUpdater: store => {\n        // TODO fill in optimistic updater\n      },\n    })\n  }\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Manually Removing Edges from Relay Connection\nDESCRIPTION: This updater function demonstrates how to manually remove an edge from a Relay connection using ConnectionHandler.deleteNode. It removes the edge containing a node with the specified ID from the connection.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/guided-tour/list-data/updating-connections.md#2025-04-18_snippet_11\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst {ConnectionHandler} = require('RelayModern');\n\nfunction updater(store: RecordSourceSelectorProxy) {\n  const storyRecord = store.get(storyID);\n  const connectionRecord = ConnectionHandler.getConnection(\n    storyRecord,\n    'StoryComponent_story_comments_connection',\n  );\n\n  // Remove edge from the connection, given the ID of the node\n  ConnectionHandler.deleteNode(\n    connectionRecord,\n    commentIDToDelete,\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing GraphQL Subscription with Relay requestSubscription\nDESCRIPTION: Demonstrates how to create a GraphQL subscription using Relay's requestSubscription API. The example shows importing necessary dependencies, defining a subscription query, and creating a subscription with environment and variables configuration.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/api-reference/relay-runtime/request-subscription.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport {graphql, requestSubscription} from 'react-relay';\n\nconst subscription = graphql`\n  subscription UserDataSubscription($input: InputData!) {\n    # ...\n  }\n`;\n\nfunction createSubscription(environment: IEnvironment): Disposable {\n  return requestSubscription(environment, {\n    subscription,\n    variables: {input: {userId: '4'}},\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: GraphQL Subscription Definition\nDESCRIPTION: This GraphQL snippet defines a subscription named `FeedbackLikeSubscription` that subscribes to the `feedback_like_subscribe` stream. It queries the `feedback` object and its `like_count` in response to server-side events.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/guided-tour/updating-data/graphql-subscriptions.md#2025-04-18_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nsubscription FeedbackLikeSubscription($input: FeedbackLikeSubscribeData!) {\n  feedback_like_subscribe(data: $input) {\n    feedback {\n      like_count\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Relay Compiler configuration file\nDESCRIPTION: Sample configuration file for the Relay Compiler that specifies source directory, language, schema location, and excluded paths.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/getting-started/installation-and-setup.md#2025-04-18_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// relay.config.js\nmodule.exports = {\n  // ...\n  // Configuration options accepted by the `relay-compiler` command-line tool and `babel-plugin-relay`.\n  src: \"./src\",\n  language: \"javascript\", // \"javascript\" | \"typescript\" | \"flow\"\n  schema: \"./data/schema.graphql\",\n  excludes: [\"**/node_modules/**\", \"**/__mocks__/**\", \"**/__generated__/**\"],\n}\n```\n\n----------------------------------------\n\nTITLE: Basic ContactsList Component Implementation\nDESCRIPTION: Initial React component implementation using useFragment hook.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/tutorial/refetchable-fragments.md#2025-04-18_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nexport default function ContactsList({ viewer }: Props) {\n  const data = useFragment(ContactsListFragment, viewer);\n  return (\n    <Card dim={true}>\n      <h3>Contacts</h3>\n      {data.contacts.map(contact =>\n        <ContactRow key={contact.id} contact={contact} />\n      )}\n    </Card>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Query Component with Partial Rendering in React-Relay\nDESCRIPTION: This code demonstrates how to create a query component that renders partially cached data. It includes a query loader component, a query component, and shows how to use Suspense for handling loading states of child components.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/guided-tour/reusing-cached-data/rendering-partially-cached-data.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * AppTabs.react.js\n *\n * Query Loader Component\n */\n\n // ....\n\n  const onSelectHomeTab = () => {\n    loadHomeTabQuery({id: '4'}, {fetchPolicy: 'store-or-network'});\n  }\n\n // ...\n\n/**\n * HomeTab.react.js\n *\n * Query Component\n */\n\nconst React = require('React');\nconst {Suspense} = require('React');\nconst {graphql, usePreloadedQuery} = require('react-relay');\n\nconst UsernameComponent = require('./UsernameComponent.react');\n\n\nfunction HomeTab() {\n  const data = usePreloadedQuery<AppQuery>(\n    graphql`\n      query AppQuery($id: ID!) {\n        user(id: $id) {\n          name\n          ...UsernameComponent_user\n        }\n      }\n    `,\n    props.queryRef,\n  );\n\n  return (\n    <>\n      <h1>{data.user?.name}</h1>\n\n      {/*\n        Wrap the UserComponent in Suspense to allow other parts of the\n        App to be rendered even if the username is missing.\n      */}\n      <Suspense fallback={<LoadingSpinner label=\"Fetching username\" />}>\n        <UsernameComponent user={data.user} />\n      </Suspense>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: GraphQL Schema Design for Error Handling\nDESCRIPTION: Example of how to model error information in a GraphQL schema to display user-friendly messages. This approach allows for structured error handling at the schema level rather than relying on GraphQL's top-level errors field.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v13.0.0/guided-tour/rendering/error-states.md#2025-04-18_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\ntype Error {\n  # User friendly message\n  message: String!\n}\n\ntype Foo {\n  bar: Result | Error\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Parent Fragment Component in React and Relay\nDESCRIPTION: This snippet illustrates how to create a parent fragment component that incorporates a child fragment. It shows fragment composition and how to pass fragment references to child components.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/guided-tour/rendering/fragments.md#2025-04-18_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * UserComponent.react.js\n *\n * Parent Fragment Component\n */\n\nimport type {UserComponent_user$key} from 'UserComponent_user.graphql';\n\nconst React = require('React');\nconst {graphql, useFragment} = require('react-relay');\n\nconst UsernameSection = require('./UsernameSection.react');\n\ntype Props = {\n  user: UserComponent_user$key,\n};\n\nfunction UserComponent(props: Props) {\n  const user = useFragment(\n    graphql`\n      fragment UserComponent_user on User {\n        name\n        age\n        profile_picture(scale: 2) {\n          uri\n        }\n\n        # Include child fragment:\n        ...UsernameSection_user\n      }\n    `,\n    props.user,\n  );\n\n  return (\n    <>\n      <h1>{user.name}</h1>\n      <div>\n        <img src={user.profile_picture?.uri} />\n        {user.age}\n\n        {/* Render child component, passing the _fragment reference_: */}\n        <UsernameSection user={user} />\n      </div>\n    </>\n  );\n}\n\nmodule.exports = UserComponent;\n```\n\n----------------------------------------\n\nTITLE: Implementing Query Loader in Parent Component\nDESCRIPTION: Demonstrates how to use useQueryLoader hook to preload queries and handle hover events in a parent component.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/tutorial/queries-2.md#2025-04-18_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nimport {useQueryLoader} from 'react-relay';\nimport type {PosterDetailsHovercardContentsQuery as HovercardQueryType} from './__generated__/PosterDetailsHovercardContentsQuery.graphql';\nimport {PosterDetailsHovercardContentsQuery} from './PosterDetailsHovercardContents';\n\nexport default function PosterByline({ poster }: Props): React.ReactElement {\n  ...\n  // change\n  const [\n    hovercardQueryRef,\n    loadHovercardQuery,\n  ] = useQueryLoader<HovercardQueryType>(PosterDetailsHovercardContentsQuery);\n  // end-change\n  return (\n   ...\n    <PosterDetailsHovercardContents\n      // change-line\n      queryRef={hovercardQueryRef}\n    />\n   ...\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Retaining Queries in Relay to Prevent Garbage Collection\nDESCRIPTION: This code demonstrates how to manually retain and release queries in Relay to prevent data from being garbage collected. The retain operation returns a disposable that can be used to release the query when it's no longer needed.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/guided-tour/reusing-cached-data/presence-of-data.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// Retain query; this will prevent the data for this query and\n// variables from being garbage collected by Relay\nconst disposable = environment.retain(queryDescriptor);\n\n// Disposing of the disposable will release the data for this query\n// and variables, meaning that it can be deleted at any moment\n// by Relay's garbage collection if it hasn't been retained elsewhere\ndisposable.dispose();\n```\n\n----------------------------------------\n\nTITLE: Creating Live State Queries with suspenseSentinel() in Relay\nDESCRIPTION: Example of implementing a live resolver field Query.myIp that uses suspenseSentinel() to handle pending states. This pattern allows the resolver to indicate when data is not yet available and notify Relay when it becomes available.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/api-reference/relay-resolvers/runtime-functions.md#2025-04-18_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport {suspenseSentinel} from 'relay-runtime';\n\n/**\n * @RelayResolver Query.myIp: String\n * @live\n */\nexport function myIp(): LiveState<string> {\n  return {\n    read: () => {\n      const state = store.getState();\n      const ipLoadObject = state.ip;\n      if (ipLoadObject.status === \"LOADING\") {\n        return suspenseSentinel();\n      }\n      return state.ip;\n    },\n    subscribe: (callback) => {\n      return store.subscribe(callback);\n    },\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Reading Client-Only Data in Relay Fragment\nDESCRIPTION: Demonstrates how to read client-only data within a Relay fragment. This example selects the client-only field 'is_new_comment' alongside server-defined fields.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/guided-tour/updating-data/client-only-data.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst data = *useFragment*(\n  graphql`\n    fragment CommentComponent_comment on Comment {\n\n      # We can select client-only fields as we would any other field\n      is_new_comment\n\n      body {\n        text\n      }\n    }\n  `,\n  props.user,\n);\n```\n\n----------------------------------------\n\nTITLE: Adding Sidebar Component to App\nDESCRIPTION: Example showing how to integrate the Sidebar component into the main App component structure.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/tutorial/refetchable-fragments.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport Sidebar from './Sidebar';\n\nexport default function App(): React.ReactElement {\n  return (\n    <RelayEnvironment>\n      <React.Suspense fallback={<LoadingSpinner />}>\n        <div className=\"app\">\n          <Newsfeed />\n          <Sidebar />\n        </div>\n      </React.Suspense>\n    </RelayEnvironment>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using Error Boundary with Retry for useLazyLoadQuery in Relay\nDESCRIPTION: Demonstrates how to use an Error Boundary with retry functionality in a Relay application using useLazyLoadQuery.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/guided-tour/rendering/error-states.md#2025-04-18_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * App.react.js\n */\n\nconst ErrorBoundaryWithRetry = require('ErrorBoundaryWithRetry');\nconst React = require('React');\n\nconst MainContent = require('./MainContent.react');\n\n// NOTE: This is NOT actual production code;\n// it is only used to illustrate example\nfunction App() {\n  return (\n    <ErrorBoundaryWithRetry\n      fallback={({error, retry}) =>\n        <>\n          <ErrorUI error={error} />\n          {/* Render a button to retry; this will attempt to re-render the\n            content inside the boundary, i.e. the query component */}\n          <Button onPress={retry}>Retry</Button>\n        </>\n      }>\n      {({fetchKey}) => {\n        // If we have retried, use the new `retryQueryRef` provided\n        // by the Error Boundary\n        return <MainContent fetchKey={fetchKey} />;\n      }}\n    </ErrorBoundaryWithRetry>\n  );\n}\n\n/**\n * MainContent.react.js\n */\nfunction MainContent(props) {\n  const data = useLazyLoadQuery(\n    graphql`...`,\n    variables,\n    {fetchKey: props.fetchKey}\n  );\n\n  return (/* ... */);\n}\n```\n\n----------------------------------------\n\nTITLE: Refreshing Components with Fragment Spreading in Subscriptions\nDESCRIPTION: Shows how to use fragment spreading in subscriptions to automatically refresh components when subscription data changes, promoting better maintainability and consistency.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/guided-tour/updating-data/graphql-subscriptions.md#2025-04-18_snippet_3\n\nLANGUAGE: graphql\nCODE:\n```\nsubscription FeedbackLikeSubscription($input: FeedbackLikeSubscribeData!) {\n  feedback_like_subscribe(data: $input) {\n    feedback {\n      ...FeedbackDisplay_feedback\n      ...FeedbackDetail_feedback\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using @argumentDefinitions Directive in GraphQL Fragment\nDESCRIPTION: Example demonstrating how to define arguments for a fragment using @argumentDefinitions with required and optional parameters.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/api-reference/graphql/graphql-directives.md#2025-04-18_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\nfragment TodoList_list on TodoList\n@argumentDefinitions(\n  count: {type: \"Int\", defaultValue: 10} # Optional argument\n  userID: {type: \"ID\"} # Required argument\n) {\n  title\n  todoItems(userID: $userID, first: $count) {\n    # Use fragment arguments here as variables\n    ...TodoItem_item\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing User Selection Toggle Component\nDESCRIPTION: React component implementation that demonstrates updating store data in response to user interactions using commitLocalUpdate\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/guided-tour/updating-data/imperatively-modifying-store-data.md#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport type {RecordSourceSelectorProxy} from 'react-relay';\nimport type {UserSelectToggle_viewer$key} from 'UserSelectToggle_viewer.graphql';\n\nconst {useRelayEnvironment, commitLocalUpdate} = require('react-relay');\n\nfunction UserSelectToggle({ userId, viewerRef }: {\n  userId: string,\n  viewerRef: UserSelectToggle_viewer$key,\n}) {\n  const viewer = useFragment(graphql`\n    fragment UserSelectToggle_viewer on Viewer {\n      user(user_id: $user_id) {\n        id\n        name\n        is_selected\n        ...UserSelectToggle_updatable_user\n      }\n    }\n  `, viewerRef);\n\n  const environment = useRelayEnvironment();\n\n  return <button\n    onClick={() => {\n      commitLocalUpdate(\n        environment,\n        (store: RecordSourceSelectorProxy) => {\n          const userRef = viewer.user;\n          if (userRef == null) {\n            return;\n          }\n\n          const {updatableData} = store.readUpdatableFragment(\n            graphql`\n              fragment UserSelectToggle_updatable_user on User @updatable {\n                is_selected\n              }\n            `,\n            userRef\n          );\n\n          updatableData.is_selected = !viewer?.user?.is_selected;\n        }\n      );\n    }}\n  >\n    {viewer?.user?.is_selected ? 'Deselect' : 'Select'} {viewer?.user?.name}\n  </button>\n}\n```\n\n----------------------------------------\n\nTITLE: GraphQL Query Definition with Relay\nDESCRIPTION: Definition of a GraphQL query using the graphql tag from relay-runtime to fetch story data.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/tutorial/queries-1.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { graphql } from 'relay-runtime';\n\nconst NewsfeedQuery = graphql`\n  query NewsfeedQuery {\n    topStory {\n      title\n      summary\n      poster {\n        name\n        profilePicture {\n          url\n        }\n      }\n      thumbnail {\n        url\n      }\n    }\n  }\n`;\n```\n\n----------------------------------------\n\nTITLE: Retrying After an Error with useQueryLoader\nDESCRIPTION: Demonstrates handling errors and retrying queries using the useQueryLoader hook. Includes an ErrorBoundaryWithRetry component that features a retry mechanism to clear errors and re-fetch the query using loadQuery.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/guided-tour/rendering/error-states.md#2025-04-18_snippet_2\n\nLANGUAGE: js\nCODE:\n```\n/**\n * ErrorBoundaryWithRetry.react.js\n */\n\nconst React = require('React');\n\n// NOTE: This is NOT actual production code;\n// it is only used to illustrate example\nclass ErrorBoundaryWithRetry extends React.Component<Props, State> {\n  state = {error: null};\n\n  static getDerivedStateFromError(error): State {\n    return {error: error};\n  }\n\n  _retry = () => {\n    // This ends up calling loadQuery again to get and render\n    // a new query reference\n    this.props.onRetry();\n    this.setState({\n      // Clear the error\n      error: null,\n    });\n  }\n\n  render() {\n    const {children, fallback} = this.props;\n    const {error} = this.state;\n    if (error) {\n      if (typeof fallback === 'function') {\n        return fallback({error, retry: this._retry});\n      }\n      return fallback;\n    }\n    return children;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Refetching with useLazyLoadQuery in Relay\nDESCRIPTION: This snippet demonstrates how to refetch a query using the `useLazyLoadQuery` hook in Relay. It uses `useState` to manage the query arguments (`queryArgs`) and updates these arguments with a new `fetchKey` and variables in the refetch function.  Updating the `fetchKey` triggers a full re-evaluation and refetch of the query.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/guided-tour/refetching/refetching-queries-with-different-data.md#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * App.react.js\n */\nconst AppQuery = require('__generated__/AppQuery.graphql');\n\nfunction App(props: Props) {\n  const [queryArgs, setQueryArgs] = useState({\n    options: {fetchKey: 0},\n    variables: {id: '4'},\n  });\n\n  const refetch = useCallback(() => {\n    // Trigger a re-render of useLazyLoadQuery with new variables,\n    // *and* an updated fetchKey.\n    // The new fetchKey will ensure that the query is fully\n    // re-evaluated and refetched.\n    setQueryArgs(prev => ({\n      options: {\n        fetchKey: (prev?.options.fetchKey ?? 0) + 1,\n      },\n      variables: {id: 'different-id'}\n    }));\n  }, [/* ... */]);\n\n  return (\n    <React.Suspense fallback=\"Loading query...\">\n      <MainContent\n        refetch={refetch}\n        queryArgs={queryArgs}\n      />\n    </React.Suspense>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring a GraphQL Subscription with Relay's graphql Tag\nDESCRIPTION: Shows how to declare a GraphQL subscription using Relay's graphql tag in JavaScript. This allows for static type checking and integration with Relay's compilation process.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/guided-tour/updating-data/graphql-subscriptions.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst {graphql} = require('react-relay');\n\nconst feedbackLikeSubscription = graphql`\n  subscription FeedbackLikeSubscription($input: FeedbackLikeSubscribeData!) {\n    feedback_like_subscribe(data: $input) {\n      feedback {\n        like_count\n      }\n    }\n  }\n`;\n```\n\n----------------------------------------\n\nTITLE: Using readUpdatableQuery to Update Viewer Name in Relay\nDESCRIPTION: This example demonstrates how to use the readUpdatableQuery API to update a user's name field. The component reads the current name via a fragment, allows editing through a state variable, and commits the change locally using commitLocalUpdate with readUpdatableQuery.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/guided-tour/updating-data/imperatively-modifying-store-data.md#2025-04-18_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// NameUpdater.react.js\nfunction NameUpdater({ queryRef }: {\n  queryRef: NameUpdater_viewer$key,\n}) {\n  const environment = useRelayEnvironment();\n  const data = useFragment(\n    graphql`\n      fragment NameUpdater_viewer on Viewer {\n        name\n      }\n    `,\n    queryRef\n  );\n  const [newName, setNewName] = useState(data?.viewer?.name);\n  const onSubmit = () => {\n    commitLocalUpdate(environment, store => {\n      const {updatableData} = store.readUpdatableQuery(\n        graphql`\n          query NameUpdaterUpdateQuery @updatable {\n            viewer {\n              name\n            }\n          }\n        `,\n        {}\n      );\n      const viewer = updatableData.viewer;\n      if (viewer != null) {\n        viewer.name = newName;\n      }\n    });\n  };\n\n  // etc\n}\n```\n\n----------------------------------------\n\nTITLE: Refetching Queries Using useQueryLoader in React\nDESCRIPTION: Demonstrates how to refetch a query with different variables using useQueryLoader and usePreloadedQuery. It shows how to update the queryRef and handle loading states with Suspense.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/guided-tour/refetching/refetching-queries-with-different-data.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * App.react.js\n */\nimport type {AppQuery as AppQueryType} from 'AppQuery.graphql';\n\nconst AppQuery = require('__generated__/AppQuery.graphql');\n\nfunction App(props: Props) {\n  const variables = {id: '4'};\n  const [queryRef, loadQuery] = useQueryLoader<AppQueryType>(\n    AppQuery,\n    props.appQueryRef /* initial query ref */\n  );\n\n  const refetch = useCallback(() => {\n    // Load the query again using the same original variables.\n    // Calling loadQuery will update the value of queryRef.\n    loadQuery({id: 'different-id'});\n  }, [/* ... */]);\n\n  return (\n    <React.Suspense fallback=\"Loading query...\">\n      <MainContent\n        refetch={refetch}\n        queryRef={queryRef}\n      />\n    </React.Suspense>\n  );\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * MainContent.react.js\n */\nimport type {AppQuery as AppQueryType} from 'AppQuery.graphql';\n\n// Renders the preloaded query, given the query reference\nfunction MainContent(props) {\n  const {refetch, queryRef} = props;\n  const data = usePreloadedQuery<AppQueryType>(\n    graphql`\n      query AppQuery($id: ID!) {\n        user(id: $id) {\n          name\n          friends {\n            count\n          }\n        }\n      }\n    `,\n    queryRef,\n  );\n\n  return (\n    <>\n      <h1>{data.user?.name}</h1>\n      <div>Friends count: {data.user?.friends?.count}</div>\n      <Button\n        onClick={() => refetch()}>\n        Fetch latest count\n      </Button>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Connections Using usePaginationFragment in Relay\nDESCRIPTION: This example shows how to implement a component that renders a connection using the usePaginationFragment hook. It includes the required @refetchable directive and demonstrates how to extract and render nodes from connection edges.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/guided-tour/list-data/rendering-connections.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport type {FriendsListComponent_user$key} from 'FriendsList_user.graphql';\n\nconst React = require('React');\nconst {Suspense} = require('React');\n\nconst {graphql, usePaginationFragment} = require('react-relay');\n\ntype Props = {\n  user: FriendsListComponent_user$key,\n};\n\nfunction FriendsListComponent(props: Props) {\n  const {data} = usePaginationFragment(\n    graphql`\n      fragment FriendsListComponent_user on User\n      @refetchable(queryName: \"FriendsListPaginationQuery\") {\n        name\n        friends(first: $count, after: $cursor)\n        @connection(key: \"FriendsList_user_friends\") {\n          edges {\n            node {\n              ...FriendComponent\n            }\n          }\n        }\n      }\n    `,\n    props.user,\n  );\n\n\n  return (\n    <>\n      {data.name != null ? <h1>Friends of {data.name}:</h1> : null}\n\n      <div>\n        {/* Extract each friend from the resulting data */}\n        {(data.friends?.edges ?? []).map(edge => {\n          const node = edge.node;\n          return (\n            <Suspense fallback={<Glimmer />}>\n              <FriendComponent user={node} />\n            </Suspense>\n          );\n        })}\n      </div>\n    </>\n  );\n}\n\nmodule.exports = FriendsListComponent;\n```\n\n----------------------------------------\n\nTITLE: Declaring a GraphQL Subscription with Relay\nDESCRIPTION: Code example showing how to declare a GraphQL subscription using Relay's graphql tag. This creates a subscription that can be used with Relay's subscription APIs.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/guided-tour/updating-data/graphql-subscriptions.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst {graphql} = require('react-relay');\n\nconst feedbackLikeSubscription = graphql`\n  subscription FeedbackLikeSubscription($input: FeedbackLikeSubscribeData!) {\n    feedback_like_subscribe(data: $input) {\n      feedback {\n        like_count\n      }\n    }\n  }\n`;\n```\n\n----------------------------------------\n\nTITLE: Testing Refetch Container in Relay (JavaScript)\nDESCRIPTION: This snippet demonstrates how to test a Relay refetch container using a mock environment. It sets up a test renderer, resolves mock data, and simulates a refetch operation.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/guides/testing-relay-components.md#2025-04-18_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\ntest('Refetch Container', async () => {\n  const environment = createMockEnvironment();\n  const TestRenderer = () => {\n    const data = useLazyLoadQuery(\n      graphql`\n        query TestQuery @relay_test_operation {\n          myData: node(id: \"test-id\") {\n            # Spread the pagination fragment you want to test here\n            ...MyRefetchableFragment\n          }\n        }\n      `,\n      {},\n    );\n    return <MyRefetchContainer data={data.myData} />\n  };\n\n  const renderer = render(\n    <RelayEnvironmentProvider environment={environment}>\n      <Suspense fallback=\"Loading...\">\n        <TestRenderer />\n      </Suspense>\n    </RelayEnvironmentProvider>\n  );\n\n  act(() => {\n    environment.mock.resolveMostRecentOperation(operation =>\n      MockPayloadGenerator.generate(operation),\n    );\n  });\n\n  // Assuming we have refetch button in the Container\n  const refetchButton = await renderer.findByTestId('refetch');\n\n  // This should trigger the `refetch`\n  refetchButton.props.onClick();\n\n  act(() => {\n    environment.mock.resolveMostRecentOperation(operation =>\n      MockPayloadGenerator.generate(operation, {\n        // We can customize mock resolvers, to change the output of the refetch query\n      }),\n    );\n  });\n\n  expect(renderer).toMatchSnapshot();\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Optimistic Update Handler\nDESCRIPTION: Implementation of optimistic updates for immediate UI feedback during mutation\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/tutorial/mutations-updates.md#2025-04-18_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nfunction StoryLikeButton({story}) {\n  ...\n  function onLikeButtonClicked(newDoesLike) {\n    commitMutation({\n      variables: {\n        id: data.id,\n        doesViewerLike: newDoesLike,\n      },\n      optimisticUpdater: store => {\n        // TODO fill in optimistic updater\n      },\n    })\n  }\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Committing Local Updates Using commitLocalUpdate in Relay\nDESCRIPTION: The snippet uses the commitLocalUpdate API from Relay to make local updates to the store based on a provided updater function. It requires the environment from Relay and the function allows for imperatively mutating the store, enabling creation, updating, or deletion of records.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/guided-tour/updating-data/local-data-updates.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport type {Environment} from 'react-relay';\n\nconst {commitLocalUpdate, graphql} = require('react-relay');\n\nfunction commitCommentCreateLocally(\n  environment: Environment,\n  feedbackID: string,\n) {\n  return commitLocalUpdate(environment, store => {\n    // Imperatively mutate the store here\n  });\n}\n\nmodule.exports = {commit: commitCommentCreateLocally};\n```\n\n----------------------------------------\n\nTITLE: Refetching with fetchQuery to Avoid Suspense\nDESCRIPTION: This snippet illustrates refetching with `fetchQuery` to manually handle loading states without relying on `Suspense` in React using Relay. It tracks a loading state using `useState` and requires `RelayEnvironment` for executing the query.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/guided-tour/refetching/refetching-queries-with-different-data.md#2025-04-18_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n\n/**\n * App.react.js\n */\nconst AppQuery = require('__generated__/AppQuery.graphql');\n\nfunction App(props: Props) {\n  const environment = useRelayEnvironment();\n  const [queryRef, loadQuery] = useQueryLoader(\n    AppQuery,\n    props.appQueryRef /* initial query ref */\n  );\n  const [isRefetching, setIsRefetching] = useState(false)\n\n  const refetch = useCallback(() => {\n    if (isRefetching) { return; }\n    setIsRefetching(true);\n    const variables = { id: 'different-id' };\n\n    // fetchQuery will fetch the query and write\n    // the data to the Relay store. This will ensure\n    // that when we re-render, the data is already\n    // cached and we don't suspend\n    fetchQuery(environment, AppQuery, variables)\n      .subscribe({\n        complete: () => {\n          setIsRefetching(false);\n\n          // *After* the query has been fetched, we call\n          // loadQuery again to re-render with a new\n          // queryRef.\n          // At this point the data for the query should\n          // be cached, so we use the 'store-only'\n          // fetchPolicy to avoid suspending.\n          loadQuery(variables, {fetchPolicy: 'store-only'});\n        },\n        error: () => {\n          setIsRefetching(false);\n        }\n      });\n  }, [/* ... */]);\n\n  return (\n    <React.Suspense fallback=\"Loading query...\">\n      <MainContent\n        isRefetching={isRefetching}\n        refetch={refetch}\n        queryRef={queryRef}\n      />\n    </React.Suspense>\n  );\n}\n\n```\n\n----------------------------------------\n\nTITLE: Refreshing Queries with useLazyLoadQuery in React and Relay\nDESCRIPTION: This snippet demonstrates how to refresh a query using useLazyLoadQuery in a React component. It uses useState and useCallback to manage the refresh state and trigger a re-render with updated fetch options.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/guided-tour/refetching/refreshing-queries.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * App.react.js\n */\nconst AppQuery = require('__generated__/AppQuery.graphql');\n\nfunction App(props: Props) {\n  const variables = {id: '4'};\n  const [refreshedQueryOptions, setRefreshedQueryOptions] = useState(null);\n\n  const refresh = useCallback(() => {\n    // Trigger a re-render of useLazyLoadQuery with the same variables,\n    // but an updated fetchKey and fetchPolicy.\n    // The new fetchKey will ensure that the query is fully\n    // re-evaluated and refetched.\n    // The fetchPolicy ensures that we always fetch from the network\n    // and skip the local data cache.\n    setRefreshedQueryOptions(prev => ({\n      fetchKey: (prev?.fetchKey ?? 0) + 1,\n      fetchPolicy: 'network-only',\n    }));\n  }, [/* ... */]);\n\n  return (\n    <React.Suspense fallback=\"Loading query...\">\n      <MainContent\n        refresh={refresh}\n        queryOptions={refreshedQueryOptions ?? {}}\n        variables={variables}\n      />\n    </React.Suspense>\n  );\n```\n\n----------------------------------------\n\nTITLE: Defining Relay Resolver Field with Docblock Syntax\nDESCRIPTION: Demonstrates the standard docblock approach for defining a Relay resolver field, specifying the type, field name, and return type using GraphQL schema definition language\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/guides/relay-resolvers/defining-fields.md#2025-04-18_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\n/**\n* @RelayResolver TypeName.fieldName(arg1: ArgTypeName): FieldTypeName\n*/\n```\n\n----------------------------------------\n\nTITLE: Implementing the onClick handler to update the viewer's best friend (JavaScript)\nDESCRIPTION: This JavaScript code implements the `onClick` handler within the `AssignBestFriendButton` component. It uses `commitLocalUpdate` and `readUpdatableQuery` to update the viewer's `best_friend` field in the Relay store. The code ensures that the `AssignableBestFriendButton_assignable_user` fragment is spread under the `best_friend` field in the updatable query and checks if `data.user` is not null before assigning.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/guided-tour/updating-data/imperatively-modifying-linked-fields.md#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport type {RecordSourceSelectorProxy} from 'react-relay';\n\nconst {commitLocalUpdate, useRelayEnvironment} = require('react-relay');\n\n// ...\n\nconst environment = useRelayEnvironment();\nconst onClick = () => {\n  const updatableData = commitLocalUpdate(\n    environment,\n    (store: RecordSourceSelectorProxy) => {\n      const {updatableData} = store.readUpdatableQuery(\n          graphql`\n            query AssignBestFriendButtonUpdatableQuery\n            @updatable {\n              viewer {\n                best_friend {\n                  ...AssignableBestFriendButton_assignable_user\n                }\n              }\n            }\n          `,\n          {}\n        );\n\n      if (data.user != null && updatableData.viewer != null) {\n        updatableData.viewer.best_friend = data.user;\n      }\n    }\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Manual Loading State with Relay's fetchQuery\nDESCRIPTION: React component implementation showing how to manage manual loading states with Relay's fetchQuery to avoid Suspense fallbacks. Uses useState for tracking refresh state and queryArgs, and implements a refetch callback that fetches data without triggering Suspense.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/guided-tour/refetching/refetching-queries-with-different-data.md#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * App.react.js\n */\nconst AppQuery = require('__generated__/AppQuery.graphql');\n\nfunction App(props: Props) {\n  const environment = useRelayEnvironment();\n  const [isRefreshing, setIsRefreshing] = useState(false)\n  const [queryArgs, setQueryArgs] = useState({\n    options: {fetchKey: 0, fetchPolicy: 'store-or-network'},\n    variables: {id: '4'},\n  });\n\n  const refetch = useCallback(() => {\n    if (isRefreshing) { return; }\n    setIsRefreshing(true);\n\n    // fetchQuery will fetch the query and write\n    // the data to the Relay store. This will ensure\n    // that when we re-render, the data is already\n    // cached and we don't suspend\n    fetchQuery(environment, AppQuery, variables)\n      .subscribe({\n        complete: () => {\n          setIsRefreshing(false);\n\n          // *After* the query has been fetched, we update\n          // our state to re-render with the new fetchKey\n          // and fetchPolicy.\n          // At this point the data for the query should\n          // be cached, so we use the 'store-only'\n          // fetchPolicy to avoid suspending.\n          setQueryArgs(prev => ({\n            options: {\n              fetchKey: (prev?.options.fetchKey ?? 0) + 1,\n              fetchPolicy: 'store-only',\n            },\n            variables: {id: 'different-id'}\n          }));\n        },\n        error: () => {\n          setIsRefreshing(false);\n        }\n      });\n  }, [/* ... */]);\n\n  return (\n    <React.Suspense fallback=\"Loading query...\">\n      <MainContent\n        isRefetching={isRefetching}\n        refetch={refetch}\n        queryArgs={queryArgs}\n      />\n    </React.Suspense>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Reading Updatable Fragment Data in Relay\nDESCRIPTION: This code snippet demonstrates how to use `store.readUpdatableFragment` to read data from the local Relay store using the updatable fragment defined previously. It takes the fragment and the story's fragment ref as input and returns an `updatableData` object containing the data specified in the fragment.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/tutorial/mutations-updates.md#2025-04-18_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nfunction StoryLikeButton({story}) {\n  ...\n      optimisticUpdater: store => {\n        const fragment = graphql`\n          fragment StoryLikeButton_updatable on Story @updatable {\n            likeCount\n            doesViewerLike\n          }\n        `;\n        const {\n          // color1\n          updatableData\n        } = store.readUpdatableFragment(\n          // color2\n          fragment,\n          // color3\n          story\n        );\n      },\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a GraphQL Fragment with Connection Filters - Relay - JavaScript\nDESCRIPTION: This snippet defines a GraphQL fragment for a Story component that includes comments filtered by several arguments. It uses the RelayModern library's graphql function to specify how comments should be retrieved, including their connection identity based on filter values.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/guided-tour/list-data/updating-connections.md#2025-04-18_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nconst {graphql} = require('RelayModern');\n\nconst storyFragment = graphql`\n  fragment StoryComponent_story on Story {\n    comments(\n      order_by: $orderBy,\n      filter_mode: $filterMode,\n      language: $language,\n    ) @connection(key: \"StoryComponent_story_comments_connection\") {\n      edges {\n        nodes {\n          body {\n            text\n          }\n        }\n      }\n    }\n  }\n`; \n\n```\n\n----------------------------------------\n\nTITLE: Extended Actor Fragment with Type Refinements\nDESCRIPTION: GraphQL fragment using type refinements to select type-specific fields for Person and Organization types.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/tutorial/interfaces-polymorphism.md#2025-04-18_snippet_4\n\nLANGUAGE: graphql\nCODE:\n```\nfragment PosterDetailsHovercardContentsBodyFragment on Actor {\n  name\n  joined\n  profilePicture {\n    ...ImageFragment\n  }\n  ... on Organization {\n    organizationKind\n  }\n  ... on Person {\n    location {\n      name\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Complete AssignBestFriendButton Component Implementation in React with Relay\nDESCRIPTION: This provides the complete implementation of the `AssignBestFriendButton` component. It encompasses the fragment definition, component logic, and the update function using `commitLocalUpdate` and `readUpdatableQuery` to modify the `viewer.best_friend` field.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/guided-tour/updating-data/imperatively-modifying-linked-fields.md#2025-04-18_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// AssignBestFriendButton.react.js\nimport type {AssignBestFriendButton_user$key} from 'AssignBestFriendButton_user.graphql';\nimport type {RecordSourceSelectorProxy} from 'react-relay';\n\nconst {commitLocalUpdate, useFragment, useRelayEnvironment} = require('react-relay');\n\ngraphql`\n  fragment AssignBestFriendButton_assignable_user on User @assignable {\n    __typename\n  }\n`;\n\nexport default function AssignBestFriendButton({\n  someTypeRef: AssignBestFriendButton_someType$key,\n}) {\n  const data = useFragment(graphql`\n    fragment AssignBestFriendButton_someType on SomeType {\n      user {\n        name\n        ...AssignableBestFriendButton_assignable_user\n      }\n    }\n  `, someTypeRef);\n\n  const environment = useRelayEnvironment();\n  const onClick = () => {\n    const updatableData = commitLocalUpdate(\n      environment,\n      (store: RecordSourceSelectorProxy) => {\n        const {updatableData} = store.readUpdatableQuery(\n            graphql`\n              query AssignBestFriendButtonUpdatableQuery\n              @updatable {\n                viewer {\n                  best_friend {\n                    ...AssignableBestFriendButton_assignable_user\n                  }\n                }\n              }\n            `,\n            {}\n          );\n\n        if (data.user != null && updatableData.viewer != null) {\n          updatableData.viewer.best_friend = data.user;\n        }\n      }\n    );\n  };\n\n  return (<button onClick={onClick}>\n    Declare {user.name ?? 'someone with no name'} my best friend!\n  </button>);\n}\n```\n\n----------------------------------------\n\nTITLE: Relay Fragment Definition\nDESCRIPTION: This snippet demonstrates a GraphQL fragment definition within a JavaScript file using the `graphql` template tag. The Relay Compiler will process this fragment and generate a corresponding file in the `__generated__` directory, including runtime artifacts and Flow types.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/guides/compiler.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ngraphql`\n  fragment MyComponent on Type {\n    field\n  }\n`\n```\n\n----------------------------------------\n\nTITLE: Component Fragment Definitions\nDESCRIPTION: Example showing how to define multiple related fragments in a component file using the graphql template tag.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/getting-started/compiler.md#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst DictionaryWordFragment = graphql`\n  fragment DictionaryComponent_word on Word {\n    id\n    definition {\n      ...DictionaryComponent_definition\n    }\n  }\n`\n\nconst DictionaryDefinitionFragment = graphql`\n  fragment DictionaryComponent_definition on WordDefinition {\n    text\n    image\n  }\n`\n```\n\n----------------------------------------\n\nTITLE: Example JSON Subscription Payload\nDESCRIPTION: A sample JSON response from a GraphQL subscription showing updated feedback data with a like count. This demonstrates the structure of data received by the client after a server-side event.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/guided-tour/updating-data/graphql-subscriptions.md#2025-04-18_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"feedback_like_subscribe\": {\n    \"feedback\": {\n      \"id\": \"feedback-id\",\n      \"like_count\": 321,\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Retaining Queries in Relay\nDESCRIPTION: This snippet demonstrates how to retain a query in Relay's environment, preventing it from being garbage collected. This allows components to reuse data without needing to wait for a network request, even after a component that uses that query has unmounted. The disposable object returned allows for releasing the query later.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/guided-tour/reusing-cached-data/presence-of-data.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// Retain query; this will prevent the data for this query and\n// variables from being garbage collected by Relay\nconst disposable = environment.retain(queryDescriptor);\n\n// Disposing of the disposable will release the data for this query\n// and variables, meaning that it can be deleted at any moment\n// by Relay's garbage collection if it hasn't been retained elsewhere\ndisposable.dispose();\n```\n\n----------------------------------------\n\nTITLE: Testing Relay Component States: Loading, Data Render, and Error\nDESCRIPTION: Demonstrates how to test different states of a Relay component using createMockEnvironment and MockPayloadGenerator. Covers loading state, data rendering, and error handling.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/guides/testing-relay-components.md#2025-04-18_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n// Say you have a component with the useLazyLoadQuery or a QueryRenderer\nconst MyAwesomeViewRoot = require('MyAwesomeViewRoot');\nconst {\n  createMockEnvironment,\n  MockPayloadGenerator,\n} = require('relay-test-utils');\nconst {act, render} = require('@testing-library/react');\n\n// Relay may trigger 3 different states\n// for this component: Loading, Error, Data Loaded\n// Here is examples of tests for those states.\ntest('Loading State', async () => {\n  const environment = createMockEnvironment();\n  const renderer = render(\n    <MyAwesomeViewRoot environment={environment} />,\n  );\n\n  // Here we just verify that the spinner is rendered\n  expect(await renderer.findByTestId('spinner')).toBeDefined();\n});\n\ntest('Data Render', async () => {\n  const environment = createMockEnvironment();\n  const renderer = render(\n    <MyAwesomeViewRoot environment={environment} />,\n  );\n\n  // Wrapping in act will ensure that components\n  // are fully updated to their final state.\n  act(() => {\n    environment.mock.resolveMostRecentOperation(operation =>\n      MockPayloadGenerator.generate(operation),\n    );\n  });\n\n  // At this point operation will be resolved\n  // and the data for a query will be available in the store\n  expect(await renderer.findByTestId('myButton')).toBeDefined();\n});\n\ntest('Error State', async () => {\n  const environment = createMockEnvironment();\n  const renderer = render(\n    <MyAwesomeViewRoot environment={environment} />,\n  );\n\n  // Wrapping in act will ensure that components\n  // are fully updated to their final state.\n  act(() => {\n    // Error can be simulated with `rejectMostRecentOperation`\n    environment.mock.rejectMostRecentOperation(new Error('Uh-oh'));\n  });\n\n  expect(await renderer.findByTestId('errorMessage')).toBeDefined();\n});\n```\n\n----------------------------------------\n\nTITLE: Prefetching Data Before Rendering a Component with Relay Hooks\nDESCRIPTION: This example shows how to use useQueryLoader and usePreloadedQuery to start fetching data before a component renders. It demonstrates prefetching on hover and rendering the data in a popover, which wasn't possible with container-based APIs.\nSOURCE: https://github.com/facebook/relay/blob/main/website/blog/2021-03-09-introducing-relay-hooks.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst UserQuery = graphql`\n  query UserLinkQuery($userId: ID!) {\n    user(id: $userId) {\n      user_details_blurb\n    }\n  }\n`;\n\nfunction UserLink({ userId, userName }) {\n  const [queryReference, loadQuery] = useQueryLoader(UserQuery);\n\n  const [isPopoverVisible, setIsPopoverVisible] = useState(false);\n\n  const maybePrefetchUserData = useCallback(() => {\n    if (!queryReference) {\n      // calling loadQuery will cause this component to re-render.\n      // During that re-render, queryReference will be defined.\n      loadQuery({ userId });\n    }\n  }, [queryReference, loadQuery]);\n\n  const showPopover = useCallback(() => {\n    maybePrefetchUserData();\n    setIsPopoverVisible(true);\n  }, [maybePrefetchUserData, setIsPopoverVisible]);\n\n  return <>\n    <Button\n      onMouseOver={maybePrefetchUserData}\n      onPress={showPopover}\n    >\n      {userName}\n    </Button>\n    {isPopoverVisible && queryReference && (\n      <Popover>\n        <React.Suspense fallback={<Glimmer />}>\n          <UserPopoverContent queryRef={queryReference} />\n        </React.Suspense>\n      </Popover>\n    )}\n  </>\n}\n\nfunction UserPopoverContent({queryRef}) {\n  // The following call will Suspend if the request for the data is still\n  // in flight:\n  const data = usePreloadedQuery(UserQuery, queryRef);\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Optimistic Updater in Relay Mutation\nDESCRIPTION: This snippet demonstrates how to use an optimisticUpdater function in a Relay mutation to optimistically update the like count and viewer's like status for a feedback item.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v13.0.0/guided-tour/updating-data/graphql-mutations.md#2025-04-18_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport type {Environment} from 'react-relay';\nimport type {FeedbackLikeData} from 'FeedbackLikeMutation.graphql';\n\nconst {commitMutation, graphql} = require('react-relay');\n\nfunction commitFeedbackLikeMutation(\n  environment: Environment,\n  feedbackID: string,\n  input: FeedbackLikeData,\n) {\n  return commitMutation(environment, {\n    mutation: graphql`\n      mutation FeedbackLikeMutation($input: FeedbackLikeData!) {\n        feedback_like(data: $input) {\n          feedback {\n            id\n            like_count\n            viewer_does_like\n          }\n        }\n      }\n    `,\n    variables: {input},\n    optimisticUpdater: store => {\n      // Get the record for the Feedback object\n      const feedbackRecord = store.get(feedbackID);\n\n      // Read the current value for the like_count\n      const currentLikeCount = feedbackRecord.getValue('like_count');\n\n      // Optimistically increment the like_count by 1\n      feedbackRecord.setValue((currentLikeCount ?? 0) + 1, 'like_count');\n\n      // Optimistically set viewer_does_like to true\n      feedbackRecord.setValue(true, 'viewer_does_like');\n    },\n    onCompleted: () => {} /* Mutation completed */,\n    onError: error => {} /* Mutation errored */,\n  });\n}\n\nmodule.exports = {commit: commitFeedbackLikeMutation};\n```\n\n----------------------------------------\n\nTITLE: Using useLazyLoadQuery Hook in React Component\nDESCRIPTION: Example of a React component using the useLazyLoadQuery hook to fetch data from a GraphQL query during render, as an alternative to QueryRenderer.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/migration-and-compatibility/relay-hooks-and-legacy-container-apis.md#2025-04-18_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport * as React from 'React';\nimport {graphql, useLazyLoadQuery} from 'react-relay';\n\nexport default function Home() {\n  const data = useLazyLoadQuery(\n    graphql`\n      query HomeQuery($id: ID!) {\n        user(id: $id) {\n          name\n        }\n      }\n    `,\n    {id: 4},\n  );\n\n return <h1>{data.user?.name}</h1>;\n}\n```\n\n----------------------------------------\n\nTITLE: Refreshing Queries with useQueryLoader Hook in Relay (JavaScript)\nDESCRIPTION: This snippet demonstrates how to refresh queries using the useQueryLoader hook in Relay. It requires the AppQuery GraphQL definition and utilizes the loadQuery method to attempt fetching fresh data directly from the server by using a fetchPolicy of 'network-only'. Suspense is used to handle loading states effectively, making it essential to properly wrap the component with a <Suspense> boundary.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/guided-tour/refetching/refreshing-queries.md#2025-04-18_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n/**\n * App.react.js\n */\n\nconst AppQuery = require('__generated__/AppQuery.graphql');\n\nfunction App(props: Props) {\n  const [queryRef, loadQuery] = useQueryLoader(\n    AppQuery,\n    props.appQueryRef /* initial query ref */\n  );\n\n  const refresh = useCallback(() => {\n    // Load the query again using the same original variables.\n    // Calling loadQuery will update the value of queryRef.\n    // The fetchPolicy ensures we always fetch from the server and skip\n    // the local data cache.\n    const {variables} = props.appQueryRef;\n    loadQuery(variables, {fetchPolicy: 'network-only'});\n  }, [/* ... */]);\n\n  return (\n    <React.Suspense fallback=\"Loading query...\">\n      <MainContent\n        refresh={refresh}\n        queryRef={queryRef}\n      />\n    </React.Suspense>\n  );\n}\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\n/**\n * MainContent.react.js\n */\n\n// Renders the preloaded query, given the query reference\nfunction MainContent(props) {\n  const {refresh, queryRef} = props;\n  const data = usePreloadedQuery(\n    graphql`\n      query AppQuery($id: ID!) {\n        user(id: $id) {\n          name\n          friends {\n            count\n          }\n        }\n      }\n    `,\n    queryRef,\n  );\n\n  return (\n    <>\n      <h1>{data.user?.name}</h1>\n      <div>Friends count: {data.user.friends?.count}</div>\n      <Button\n        onClick={() => refresh()}>\n        Fetch latest count\n      </Button>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing observeFragment with React useEffect\nDESCRIPTION: Example showing how to use observeFragment to monitor changes in a User fragment and update the window title accordingly. The code demonstrates fragment subscription, handling different states (loading, error, success), and proper cleanup.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/api-reference/relay-runtime/observe-fragment.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {observeFragment} from \"relay-runtime/experimental\";\nimport { useEffect } from \"react\";\nimport { useFragment } from \"react-relay\";\nimport { graphql } from \"relay-runtime\";\n\nfunction MyComponent({ key }) {\n  const user = useFragment(\n    graphql`\n      fragment UserFragment on User {\n        ...TitleFragment\n      }\n    `,\n    key,\n  );\n\n  // Update the title as the user's name changes without triggering rerenders.\n  useEffect(() => {\n    const subscription = observeFragment(\n      graphql`\n        fragment TitleFragment on User {\n          name\n        }\n      `,\n      user,\n    ).subscribe({\n      next: (result) => {\n        switch(result.kind) {\n          case \"loading\":\n            window.title = \"...loading\";\n            break;\n          case \"error\":\n            window.title = \"Oops, we hit an error\";\n            break;\n          case \"ok\":\n            window.title = `Welcome ${result.value.name}`;\n            break;\n        }\n      }\n    });\n    return () => {\n      subscription.unsubscribe();\n    };\n  }, [user]);\n\n  return <div>Check out the document title!</div>;\n}\n```\n\n----------------------------------------\n\nTITLE: Modifying Updatable Fragment Data in Relay\nDESCRIPTION: This snippet demonstrates how to directly modify the `updatableData` object retrieved from `store.readUpdatableFragment`. Changes made to this object are recorded by Relay and are automatically rolled back if the mutation fails. The example shows toggling `doesViewerLike` and updating `likeCount` based on the current state.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/tutorial/mutations-updates.md#2025-04-18_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nfunction StoryLikeButton({story}) {\n  ...\n      optimisticUpdater: store => {\n        const fragment = graphql`\n          fragment StoryLikeButton_updatable on Story @updatable {\n            likeCount\n            doesViewerLike\n          }\n        `;\n        const {updatableData} = store.readUpdatableFragment(fragment, story);\n        // change\n        const alreadyLikes = updatableData.doesViewerLike;\n        updatableData.doesViewerLike = !alreadyLikes;\n        updatableData.likeCount += (alreadyLikes ? -1 : 1);\n        // end-change\n      },\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: fetchGraphQL Helper Function\nDESCRIPTION: This JavaScript function, `fetchGraphQL`, is responsible for making HTTP requests to a GraphQL server. It takes a GraphQL query string (`text`) and optional variables, sets the necessary headers (including the GitHub authentication token), and returns the JSON response from the server.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/getting-started/step-by-step-guide.md#2025-04-18_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n\"// your-app-name/src/fetchGraphQL.js\nasync function fetchGraphQL(text, variables) {\n  const REACT_APP_GITHUB_AUTH_TOKEN = process.env.REACT_APP_GITHUB_AUTH_TOKEN;\n\n  // Fetch data from GitHub's GraphQL API:\n  const response = await fetch('https://api.github.com/graphql', {\n    method: 'POST',\n    headers: {\n      Authorization: `bearer ${REACT_APP_GITHUB_AUTH_TOKEN}`,\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify({\n      query: text,\n      variables,\n    }),\n  });\n\n  // Get the response as JSON\n  return await response.json();\n}\n\nexport default fetchGraphQL;\"\n```\n\n----------------------------------------\n\nTITLE: Refetching Queries with useLazyLoadQuery in Relay\nDESCRIPTION: Example of refetching a query with different data using useLazyLoadQuery. This technique updates state to trigger a re-render with new variables and an incremented fetchKey to ensure the query is fully refetched.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v13.0.0/guided-tour/refetching/refetching-queries-with-different-data.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * App.react.js\n */\nimport type {AppQuery as AppQueryType} from 'AppQuery.graphql';\n\nconst AppQuery = require('__generated__/AppQuery.graphql');\n\nfunction App(props: Props) {\n  const [queryArgs, setQueryArgs] = useState({\n    options: {fetchKey: 0},\n    variables: {id: '4'},\n  });\n\n  const refetch = useCallback(() => {\n    // Trigger a re-render of useLazyLoadQuery with new variables,\n    // *and* an updated fetchKey.\n    // The new fetchKey will ensure that the query is fully\n    // re-evaluated and refetched.\n    setQueryArgs(prev => ({\n      options: {\n        fetchKey: (prev?.options.fetchKey ?? 0) + 1,\n      },\n      variables: {id: 'different-id'}\n    }));\n  }, [/* ... */]);\n\n  return (\n    <React.Suspense fallback=\"Loading query...\">\n      <MainContent\n        refetch={refetch}\n        queryArgs={queryArgs}\n      />\n    </React.Suspense>\n  );\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * MainContent.react.js\n */\nimport type {AppQuery as AppQueryType} from 'AppQuery.graphql';\n\n// Fetches and renders the query, given the fetch options\nfunction MainContent(props) {\n  const {refetch, queryArgs} = props;\n  const data = useLazyLoadQuery<AppQueryType>(\n    graphql`\n      query AppQuery($id: ID!) {\n        user(id: $id) {\n          name\n          friends {\n            count\n          }\n        }\n      }\n    `,\n    queryArgs.variables,\n    queryArgs.options,\n  );\n\n  return (\n    <>\n      <h1>{data.user?.name}</h1>\n      <div>Friends count: {data.user.friends?.count}</div>\n      <Button\n        onClick={() => refetch()}>\n        Fetch latest count\n      </Button>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Relay Mutations with Mock Environment\nDESCRIPTION: Demonstrates how to test a mutation function that uses commitMutation. The test creates a mock environment, calls the mutation function, and verifies that the completion callback was called after resolving the operation.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/guides/testing-relay-components.md#2025-04-18_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n// Say, you have a mutation function\nfunction sendMutation(environment, onCompleted, onError, variables)\n  commitMutation(environment, {\n    mutation: graphql`...`,\n    onCompleted,\n    onError,\n    variables,\n  });\n}\n\n// Example test may be written like so\ntest('it should send mutation', () => {\n  const environment = createMockEnvironment();\n  const onCompleted = jest.fn();\n  sendMutation(environment, onCompleted, jest.fn(), {});\n  const operation = environment.mock.getMostRecentOperation();\n\n  act(() => {\n    environment.mock.resolve(\n      operation,\n      MockPayloadGenerator.generate(operation)\n    );\n  });\n\n  expect(onCompleted).toBeCalled();\n});\n```\n\n----------------------------------------\n\nTITLE: Using Image Fragment with Arguments in Story Component\nDESCRIPTION: This snippet applies the ImageFragment with specific width argument in the Story component. By spreading the fragment with specified arguments, the component can fetch images at a desired size, optimizing network usage and aligning with component layout needs.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/tutorial/fragments-1.md#2025-04-18_snippet_12\n\nLANGUAGE: graphql\nCODE:\n```\nconst StoryFragment = graphql`\n  fragment StoryFragment on Story {\n    title\n    summary\n    postedAt\n    poster {\n      ...PosterBylineFragment\n    }\n    thumbnail {\n      // change-line\n      ...ImageFragment @arguments(width: 400)\n    }\n  }\n`;\n```\n\n----------------------------------------\n\nTITLE: Creating Relay Environment Configuration\nDESCRIPTION: Set up a Relay Environment that defines network communication and data store, integrating the previously created fetchGraphQL function\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v13.0.0/getting-started/step-by-step-guide.md#2025-04-18_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport {Environment, Network, RecordSource, Store} from 'relay-runtime';\nimport fetchGraphQL from './fetchGraphQL';\n\nasync function fetchRelay(params, variables) {\n  console.log(`fetching query ${params.name} with ${JSON.stringify(variables)}`);\n  return fetchGraphQL(params.text, variables);\n}\n\nexport default new Environment({\n  network: Network.create(fetchRelay),\n  store: new Store(new RecordSource()),\n});\n```\n\n----------------------------------------\n\nTITLE: Converting QueryRenderer to useQueryLoader and usePreloadedQuery in React\nDESCRIPTION: Shows how to convert a QueryRenderer to use useQueryLoader and usePreloadedQuery hooks. This pattern allows for fetching data ahead of render.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/migration-and-compatibility/relay-hooks-and-legacy-container-apis.md#2025-04-18_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport * as React from 'React';\nimport {graphql, usePreloadedQuery} from 'react-relay';\n\nexport default function UserPopover(props) {\n  const data = usePreloadedQuery(\n    graphql`\n      query UserPopoverQuery($id: ID!) {\n        user(id: $id) {\n          name\n        }\n      }\n    `,\n    props.queryRef,\n  );\n\n return <h1>{data.user?.name}</h1>;\n}\n```\n\nLANGUAGE: jsx\nCODE:\n```\nimport * as React from 'React';\nimport {useQueryLoader} from 'react-relay';\n\n// Import the query defined in the UserPopover component\nimport UserPopoverQuery from '__generated__/UserPopoverQuery.graphql';\n\n// This is *NOT* a real-world example, only used\n// to illustrate usage.\n\nexport default function UserPopoverButton(props) {\n  const [queryRef, loadQuery] = useQueryLoader(UserPopoverQuery)\n\n  const handleClick = useCallback(() => {\n    // Load the query in the event handler, onClick\n    loadQuery({id: props.userID})\n  }, [loadQuery, props.userID]);\n\n  return (\n    <>\n      <Button onClick={handleClick} />\n      {queryRef != null ?\n        <Popover>\n\n          {/* Loading and error states are handled by\n          Suspense and Error Boundaries */}\n          <ErrorBoundary renderError={Error}>\n            <Suspense fallback={<Loading />}>\n\n              {/*Pass the queryRef*/}\n              <UserPopover queryRef={queryRef} />\n\n            </Suspense>\n          </ErrorBoundary>\n        </Popover>\n        : null\n      }\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Multiple Connection Pagination with Relay and React\nDESCRIPTION: Demonstrates how to paginate over multiple connections within the same component using usePaginationFragment. Example shows pagination over both user friends and viewer friends connections.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/guided-tour/list-data/advanced-pagination.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport type {CombinedFriendsListComponent_user$key} from 'CombinedFriendsListComponent_user.graphql';\nimport type {CombinedFriendsListComponent_viewer$key} from 'CombinedFriendsListComponent_viewer.graphql';\n\nconst React = require('React');\n\nconst {graphql, usePaginationFragment} = require('react-relay');\n\ntype Props = {\n  user: CombinedFriendsListComponent_user$key,\n  viewer: CombinedFriendsListComponent_viewer$key,\n};\n\nfunction CombinedFriendsListComponent(props: Props) {\n\n  const {data: userData, ...userPagination} = usePaginationFragment(\n    graphql`\n      fragment CombinedFriendsListComponent_user on User {\n        name\n        friends\n          @connection(\n            key: \"CombinedFriendsListComponent_user_friends_connection\"\n          ) {\n          edges {\n            node {\n              name\n              age\n            }\n          }\n        }\n      }\n    `,\n    props.user,\n  );\n\n  const {data: viewerData, ...viewerPagination} = usePaginationFragment(\n    graphql`\n      fragment CombinedFriendsListComponent_user on Viewer {\n        actor {\n          ... on User {\n            name\n            friends\n              @connection(\n                key: \"CombinedFriendsListComponent_viewer_friends_connection\"\n              ) {\n              edges {\n                node {\n                  name\n                  age\n                }\n              }\n            }\n          }\n        }\n      }\n    `,\n    props.viewer,\n  );\n\n  return (...);\n}\n```\n\n----------------------------------------\n\nTITLE: Preloading Queries with loadQuery API in React/Relay\nDESCRIPTION: Demonstrates loading a query outside of a component using loadQuery, typically for initial app data fetching\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/guided-tour/rendering/queries.md#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport type {HomeTabQuery as HomeTabQueryType} from 'HomeTabQuery.graphql';\n\nconst HomeTabQuery = require('HomeTabQuery.graphql')\nconst {loadQuery} = require('react-relay');\n\nconst environment = createEnvironment(...);\n\n// At some point during app initialization\nconst initialQueryRef = loadQuery<HomeTabQueryType>(\n  environment,\n  HomeTabQuery,\n  {id: '4'},\n);\n\n// ...\n\n// E.g. passing the initialQueryRef to the root component\nrender(<AppTabs initialQueryRef={initialQueryRef} initialTab={...} />)\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Relay Test Setup with Preloaded Queries\nDESCRIPTION: Example of setting up a test environment for a Relay component using preloaded queries. Shows configuration of mock environment, query resolver, and component rendering with testing-library-react.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/guides/testing-relay-with-preloaded-queries.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst {RelayEnvironmentProvider} = require('react-relay');\nconst { MockPayloadGenerator, createMockEnvironment } = require('relay-test-utils');\nconst {render} = require('testing-library-react');\nconst {act} = require('ReactTestUtils');\ntest(\"...\", () => {\n  const environment = createMockEnvironment();\n  environment.mock.queueOperationResolver(operation => {\n      return MockPayloadGenerator.generate(operation, {\n        CurrencyAmount() {\n          return {\n            formatted_amount: \"1234$\",\n          };\n        },\n      });\n    });\n  const query = YourComponentGraphQLQueryGoesHere;\n  const variables = {};\n  environment.mock.queuePendingOperation(YourComponentGraphQLQuery, variables);\n\n  const {getByTestId, ..otherStuffYouMightNeed} = render(\n    <RelayEnvironmentProvider environment={environment}>\n        <YourComponent data-testid=\"1234\" {...componentPropsIfAny}/>\n    </RelayEnvironmentProvider>\n  );\n  act(() => jest.runAllImmediates());\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Local Note with commitLocalUpdate (JavaScript)\nDESCRIPTION: Uses commitLocalUpdate to create a new Note record in the local store and add it to the user's list of notes.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/guides/client-schema-extensions.md#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport {commitLocalUpdate} from 'react-relay';\n\nlet tempID = 0;\n\nfunction createUserNote(environment) {\n  commitLocalUpdate(environment, store => {\n    const user = store.getRoot().getLinkedRecord('viewer');\n    const userNoteRecords = user.getLinkedRecords('notes') || [];\n\n    // Create a unique ID.\n    const dataID = `client:Note:${tempID++}`;\n\n    //Create a new note record.\n    const newNoteRecord = store.create(dataID, 'Note');\n\n    // Add the record to the user's list of notes.\n    user.setLinkedRecords([...userNoteRecords, newNoteRecord], 'notes');\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a New Edge from Scratch\nDESCRIPTION: Demonstrates how to create a new edge from scratch for a connection using ConnectionHandler.createEdge, including creating a new local record for the node.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/guided-tour/list-data/updating-connections.md#2025-04-18_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst {ConnectionHandler} = require('relay-runtime');\n\nfunction updater(store: RecordSourceSelectorProxy) {\n  const storyRecord = store.get(storyID);\n  const connectionRecord = ConnectionHandler.getConnection(\n    storyRecord,\n    'StoryComponent_story_comments_connection',\n  );\n\n  // Create a new local Comment record\n  const id = `client:new_comment:${randomID()}`;\n  const newCommentRecord = store.create(id, 'Comment');\n\n  // Create new edge\n  const newEdge = ConnectionHandler.createEdge(\n    store,\n    connectionRecord,\n    newCommentRecord,\n    'CommentEdge', /* GraphQl Type for edge */\n  );\n\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Passing Connection ID to Mutation Variables\nDESCRIPTION: This code snippet shows how to obtain the Connection ID using `ConnectionHandler.getConnectionID` and pass it to the mutation variables.  `getConnectionID` requires the ID of the node (the story) and the key used in the `@connection` directive when fetching the connection (`StoryCommentsSectionFragment_comments`).\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/tutorial/mutations-updates.md#2025-04-18_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\n// change-line\nimport {useFragment, useMutation, ConnectionHandler} from 'react-relay';\n\n...\n\nexport default function StoryCommentsComposer({story}: Props) {\n  ...\n  function onPost() {\n    setText('');\n    // change\n    const connectionID = ConnectionHandler.getConnectionID(\n      data.id,\n      'StoryCommentsSectionFragment_comments',\n    );\n    // end-change\n    commitMutation({\n      variables: {\n        id: data.id,\n        text,\n        // change-line\n        connections: [connectionID],\n      },\n    })\n  }\n  ...\n}\n```\n\nLANGUAGE: graphql\nCODE:\n```\nconst StoryCommentsSectionFragment = graphql`\n  fragment StoryCommentsSectionFragment on Story\n  ...\n  {\n    comments(after: $cursor, first: $count)\n     @connection(key: \"StoryCommentsSectionFragment_comments\")\n    {\n      ...\n  }\n`;\n```\n\n----------------------------------------\n\nTITLE: Refetching a Comment Fragment Using useRefetchableFragment - JavaScript\nDESCRIPTION: This snippet demonstrates using the useRefetchableFragment hook to refetch a GraphQL fragment for a comment component by providing new query variables. It showcases how to initiate refetching based on user interaction (like a button click) and updates the component with the newly fetched data.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/guided-tour/refetching/refetching-fragments-with-different-data.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport type {CommentBody_comment$key} from 'CommentBody_comment.graphql';\n\ntype Props = {\n  comment: CommentBody_comment$key,\n};\n\nfunction CommentBody(props: Props) {\n  const [data, refetch] = useRefetchableFragment(\n    graphql`\n      fragment CommentBody_comment on Comment\n      # @refetchable makes it so Relay autogenerates a query for\n      # fetching this fragment\n      @refetchable(queryName: \"CommentBodyRefetchQuery\") {\n        body(lang: $lang) {\n          text\n        }\n      }\n    `,\n    props.comment,\n  );\n\n  const refetchTranslation = () => {\n    // We call refetch with new variables,\n    // which will refetch the @refetchable query with the\n    // new variables and update this component with the\n    // latest fetched data.\n    refetch({lang: 'SPANISH'});\n  };\n\n  return (\n    <> \n      <p>{data.body?.text}</p>\n      <Button\n        onClick={() => refetchTranslation()}> \n        Translate Comment\n      </Button>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using @appendEdge Directive in GraphQL Mutation\nDESCRIPTION: This snippet demonstrates how to use the @appendEdge directive in a GraphQL mutation to add newly created edges to specified connections.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/guided-tour/updating-data/updating-connections.md#2025-04-18_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Get the connection ID using the `__id` field\nconst connectionID = fragmentData?.comments?.__id;\n\n// Or get it using `ConnectionHandler.getConnectionID()`\nconst connectionID = ConnectionHandler.getConnectionID(\n  '<story-id>',\n  'StoryComponent_story_comments_connection',\n);\n\n// ...\n\n// Mutation\ncommitMutation<AppendCommentMutation>(environment, {\n  mutation: graphql`\n    mutation AppendCommentMutation(\n      # Define a GraphQL variable for the connections array\n      $connections: [ID!]!\n      $input: CommentCreateInput\n    ) {\n      commentCreate(input: $input) {\n        # Use @appendEdge or @prependEdge on the edge field\n        feedbackCommentEdge @appendEdge(connections: $connections) {\n          cursor\n          node {\n            id\n          }\n        }\n      }\n    }\n  `,\n  variables: {\n    input,\n    // Pass the `connections` array\n    connections: [connectionID],\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Invalidating Specific Records in Relay Store in JavaScript\nDESCRIPTION: This snippet details how to invalidate specific records within the Relay store using 'invalidateRecord()'. It targets individual records to be marked as stale, necessitating their refetch when queries reference them. This approach enables granular invalidation, associated with mutations, subscriptions, or local updates.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/guided-tour/reusing-cached-data/staleness-of-data.md#2025-04-18_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction updater(store) {\n  const user = store.get('<id>');\n  if (user != null) {\n    user.invalidateRecord();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: React Component Using Type Refinements\nDESCRIPTION: React component implementation that handles both Person and Organization data using type refinements and conditional rendering.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/tutorial/interfaces-polymorphism.md#2025-04-18_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport OrganizationKind from './OrganizationKind';\n\nfunction PosterDetailsHovercardContentsBody({ poster }: Props): React.ReactElement {\n  const data = useFragment(PosterDetailsHovercardContentsBodyFragment, poster);\n  return (\n    <>\n      <Image image={data.profilePicture} width={128} height={128} className=\"posterHovercard__image\" />\n      <div className=\"posterHovercard__name\">{data.name}</div>\n      <ul className=\"posterHovercard__details\">\n         <li>Joined <Timestamp time={poster.joined} /></li>\n         {data.location != null && (\n           <li>{data.location.name}</li>\n         )}\n        {data.organizationKind != null && (\n          <li><OrganizationKind kind={data.organizationKind} /></li>\n         )}\n      </ul>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing and Adding Edge in Relay Store Updater\nDESCRIPTION: This updater function demonstrates how to access a newly created edge from the mutation payload and add it to a connection using Relay store APIs. It uses ConnectionHandler to build and insert the new edge.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/guided-tour/list-data/updating-connections.md#2025-04-18_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst {ConnectionHandler} = require('relay-runtime');\n\nfunction updater(store: RecordSourceSelectorProxy) {\n  const storyRecord = store.get(storyID);\n  const connectionRecord = ConnectionHandler.getConnection(\n    storyRecord,\n    'StoryComponent_story_comments_connection',\n  );\n\n  // Get the payload returned from the server\n  const payload = store.getRootField('comment_create');\n\n  // Get the edge inside the payload\n  const serverEdge = payload.getLinkedRecord('comment_edge');\n\n  // Build edge for adding to the connection\n  const newEdge = ConnectionHandler.buildConnectionEdge(\n    store,\n    connectionRecord,\n    serverEdge,\n  );\n\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Basic GraphQL Subscription\nDESCRIPTION: Demonstrates the basic structure of a GraphQL subscription for monitoring feedback likes. Uses the subscription keyword and defines input parameters.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/guided-tour/updating-data/graphql-subscriptions.md#2025-04-18_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nsubscription FeedbackLikeSubscription($input: FeedbackLikeSubscribeData!) {\n  feedback_like_subscribe(data: $input) {\n    feedback {\n      like_count\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Inserting Edges into Relay Connection\nDESCRIPTION: This code snippet shows how to insert new edges at the beginning or end of a Relay connection using ConnectionHandler.insertEdgeBefore and ConnectionHandler.insertEdgeAfter.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/guided-tour/list-data/updating-connections.md#2025-04-18_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nconst {ConnectionHandler} = require('relay-runtime');\n\nfunction updater(store: RecordSourceSelectorProxy) {\n  const storyRecord = store.get(storyID);\n  const connectionRecord = ConnectionHandler.getConnection(\n    storyRecord,\n    'StoryComponent_story_comments_connection',\n  );\n\n  const newEdge = (...);\n\n  // Add edge to the end of the connection\n  ConnectionHandler.insertEdgeAfter(\n    connectionRecord,\n    newEdge,\n  );\n\n  // Add edge to the beginning of the connection\n  ConnectionHandler.insertEdgeBefore(\n    connectionRecord,\n    newEdge,\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: RecordSourceSelectorProxy Interface\nDESCRIPTION: Defines the interface for `RecordSourceSelectorProxy`, which is the type of the `store` argument received by `updater` functions. It includes methods for creating, deleting, retrieving, and invalidating records, as well as accessing root fields.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v13.0.0/api-reference/relay-runtime/store.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ninterface RecordSourceSelectorProxy {\n  create(dataID: string, typeName: string): RecordProxy;\n  delete(dataID: string): void;\n  get(dataID: string): ?RecordProxy;\n  getRoot(): RecordProxy;\n  getRootField(fieldName: string): ?RecordProxy;\n  getPluralRootField(fieldName: string): ?Array<?RecordProxy>;\n  invalidateStore(): void;\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Artist Data with Variables in Flow\nDESCRIPTION: Demonstrates how to use the emitted types for operation variables and data in a Flow-typed React component using useLazyLoadQuery.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/guides/type-emission.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * export type ExampleQuery$variables = {\n *   +artistID: string,\n * }\n * export type ExampleQuery$data = {\n *   +artist: {\n *     +name: ?string,\n *   }\n * }\n * export type ExampleQuery = {\n *   +variables: ExampleQuery$variables,\n *   +response: ExampleQuery$data,\n * }\n */\n\nconst data = useLazyLoadQuery(\n  graphql`\n    query ExampleQuery($artistID: ID!) {\n      artist(id: $artistID) {\n        name\n      }\n    }\n  `,\n  // variables are expected to be of type ExampleQuery$variables\n  {artistID: 'banksy'},\n);\n```\n\n----------------------------------------\n\nTITLE: Defining a Derived Resolver in Relay using TypeScript\nDESCRIPTION: This snippet demonstrates how to define a derived resolver in Relay using TypeScript. It uses the `readFragment` function from `relay-runtime` to read data from a fragment defined in the GraphQL schema. It is structured as a pure function that derives the full name of a user by composing their first and last names. This resolver requires the `relay-runtime` dependency.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/guides/relay-resolvers/derived-fields.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {readFragment} from 'relay-runtime';\n\n/**\n * @RelayResolver User.fullName: String\n * @rootFragment UserFullNameFragment\n */\nexport function fullName(key: UserFullNameFragment$key): string {\n  const user = readFragment(graphql`\n    fragment UserFullNameFragment on User {\n        firstName\n        lastName\n    }\n  `, key);\n  return `${user.firstName} ${user.lastName}`;\n}\n```\n\n----------------------------------------\n\nTITLE: Executing Subscription with Hooks\nDESCRIPTION: This JavaScript snippet illustrates how to use hooks for executing a subscription query in a functional component with Relay. The useMemo hook optimizes the subscription configuration to prevent unnecessary re-computations and re-renders.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v13.0.0/guided-tour/updating-data/graphql-subscriptions.md#2025-04-18_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport {graphql, useSubscription} from 'react-relay';\nimport {useMemo} from 'react';\n\nconst subscription = graphql`subscription ...`;\nfunction MyFunctionalComponent({ id }) {\n  // IMPORTANT: your config should be memoized, or at least not re-computed\n  // every render. Otherwise, useSubscription will re-render too frequently.\n  const config = useMemo(() => { variables: { id }, subscription }, [id]);\n  useSubscription(config);\n  return <div>Move Fast</div>\n}\n```\n\n----------------------------------------\n\nTITLE: Refreshing Data without Using Suspense (JavaScript)\nDESCRIPTION: This snippet illustrates how to perform a manual refresh of data without triggering a Suspense fallback in a React component. It uses the `fetchQuery` method from Relay to directly fetch data and update the local store, thereby avoiding suspension while still providing a loading indicator during the data fetching process.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/guided-tour/refetching/refreshing-fragments.md#2025-04-18_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport type {UserComponent_user$key} from 'UserComponent_user.graphql';\n\ntype Props = {\n  user: UserComponent_user$key,\n};\n\nfunction UserComponent(props: Props) {\n  const [data, refetch] = useRefetchableFragment(\n    graphql`\n      fragment UserComponent_user on User\n      # @refetchable makes it so Relay autogenerates a query for\n      # fetching this fragment\n      @refetchable(queryName: \"UserComponentRefreshQuery\") {\n        id\n        name\n        friends {\n          count\n        }\n      }\n    `,\n    props.user,\n  );\n\n  const [isRefreshing, setIsRefreshing] = useState(false);\n  const refresh = useCallback(() => {\n    if (isRefreshing) { return; }\n    setIsRefreshing(true);\n\n    // fetchQuery will fetch the query and write\n    // the data to the Relay store. This will ensure\n    // that when we re-render, the data is already\n    // cached and we don't suspend\n    fetchQuery(environment, AppQuery, variables)\n      .subscribe({\n        complete: () => {\n          setIsRefreshing(false);\n\n          // *After* the query has been fetched, we call\n          // refetch again to re-render with the updated data.\n          // At this point the data for the query should\n          // be cached, so we use the 'store-only'\n          // fetchPolicy to avoid suspending.\n          refetch({}, {fetchPolicy: 'store-only'});\n        },\n        error: () => {\n          setIsRefreshing(false);\n        }\n      });\n  }, [/* ... */]);\n\n  return (\n    <>\n      <h1>{data.name}</h1>\n      <div>Friends count: {data.friends?.count}</div>\n      <Button\n        disabled={isRefreshing}\n        onClick={() => refresh()}>\n        Fetch latest count {isRefreshing ? <LoadingSpinner /> : null}\n      </Button>\n    </>\n  );\n}\n\n```\n\n----------------------------------------\n\nTITLE: GraphQL Data Normalization Example\nDESCRIPTION: Demonstrates how Relay Runtime normalizes GraphQL data into an internal record format, showing the transformation from a GraphQL fragment and response into a normalized RecordSource structure with linked records.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/principles-and-architecture/runtime-architecture.md#2025-04-18_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nfragment on User {\n  id\n  name\n  address {\n    city\n  }\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// Response\n{\n  id: '842472',\n  name: 'Joe',\n  address: {\n    city: 'Seattle',\n  }\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// Normalized Representation\nRecordSource {\n  '842472': Record {\n    __id: '842472',\n    __typename: 'User', // the type is known statically from the fragment\n    id: '842472',\n    name: 'Joe',\n    address: {__ref: 'client:842472:address'}, // link to another record\n  },\n  'client:842472:address': Record {\n    // A client ID, derived from the path from parent & parent's ID\n    __id: 'client:842472:address',\n    __typename: 'Address',\n    city: 'Seattle',\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing useFragment Hook in Story Component\nDESCRIPTION: Demonstrates how to use the useFragment hook to access fragment data in a React component.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/tutorial/fragments-1.md#2025-04-18_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useFragment } from 'react-relay';\n\nexport default function Story({story}: Props) {\n  const data = useFragment(\n    StoryFragment,\n    story,\n  );\n  return (\n    <Card>\n      <Heading>{data.title}</Heading>\n      <PosterByline person={data.poster} />\n      <Timestamp time={data.createdAt} />\n      <Image image={data.image} />\n      <StorySummary summary={data.summary} />\n    </Card>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using usePaginationFragment in Newsfeed Component\nDESCRIPTION: This code shows how to use the usePaginationFragment hook in a React component to implement pagination for a newsfeed.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/tutorial/connections-pagination.md#2025-04-18_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nfunction NewsfeedContents({viewer}) {\n  const {data, loadNext} = usePaginationFragment(NewsfeedFragment, viewer);\n  const storyEdges = data.newsfeedStories.edges;\n  return (\n    <>\n      {storyEdges.map(storyEdge =>\n        <Story key={storyEdge.node.id} story={storyEdge.node} />\n      )}\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Complete Friends List Component with Refetching\nDESCRIPTION: Full implementation of a friends list component with search, sorting, and pagination functionality using Relay's usePaginationFragment.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/guided-tour/list-data/refetching-connections.md#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * FriendsListComponent.react.js\n */\nimport type {FriendsListComponent_user$key} from 'FriendsListComponent_user.graphql';\n\nconst React = require('React');\nconst {useState, useEffect} = require('React');\n\nconst {graphql, usePaginationFragment} = require('react-relay');\n\ntype Props = {\n  searchTerm?: string,\n  user: FriendsListComponent_user$key,\n};\n\nfunction FriendsListComponent(props: Props) {\n  const searchTerm = props.searchTerm;\n  const {data, loadNext, refetch} = usePaginationFragment(\n    graphql`\n      fragment FriendsListComponent_user on User {\n        name\n        friends(\n          order_by: $orderBy,\n          search_term: $searchTerm,\n          after: $cursor,\n          first: $count,\n        ) @connection(key: \"FriendsListComponent_user_friends_connection\") {\n          edges {\n            node {\n              name\n              age\n            }\n          }\n        }\n      }\n    `,\n    props.user,\n  );\n\n  useEffect(() => {\n    refetch({first: 10, search_term: searchTerm}, {fetchPolicy: 'store-or-network'});\n  }, [searchTerm])\n\n  return (\n    <>\n      <h1>Friends of {data.name}:</h1>\n      <Button\n        onClick={() =>\n          refetch({first: 10, orderBy: 'DATE_ADDED'});\n        }>\n        Sort by date added\n      </Button>\n      <List items={data.friends?.nodes}>...</List>\n      <Button onClick={() => loadNext(10)}>Load more friends</Button>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing PosterByline Component with Hovercard\nDESCRIPTION: React component implementation showing how to add a hovercard to display additional user information on hover\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/tutorial/queries-2.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport default function PosterByline({ poster }: Props): React.ReactElement {\n  const data = useFragment(PosterBylineFragment, poster);\n  const hoverRef = useRef(null);\n  return (\n    <div\n      ref={hoverRef}\n      className=\"byline\">\n      <Image image={data.profilePicture} width={60} height={60} className=\"byline__image\" />\n      <div className=\"byline__name\">{data.name}</div>\n      <Hovercard targetRef={hoverRef}>\n        <PosterDetailsHovercardContents />\n      </Hovercard>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Defining MutationConfig Type in Relay - JavaScript\nDESCRIPTION: This TypeScript type, MutationConfig, details the configuration options available for executing mutations in Relay. It specifies various optional fields such as cacheConfig, mutation, and several callback functions that handle success, error, and completion events.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v13.0.0/api-reference/types/MutationConfig.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ntype MutationConfig<TMutationConfig: MutationParameters> = {\n  cacheConfig?: CacheConfig,\n  mutation: GraphQLTaggedNode,\n  onError?: (Error) => void,\n  onCompleted?: ($ElementType<TMutationConfig, 'response'>) => void,\n  onUnsubscribe?: () => void,\n  optimisticResponse?: any,\n  optimisticUpdater?: SelectorStoreUpdater,\n  updater?: SelectorStoreUpdater,\n  uploadables?: UploadableMap,\n  variables: $ElementType<TMutationConfig, 'variables'>,\n};\n```\n\n----------------------------------------\n\nTITLE: Using ErrorBoundaryWithRetry with useQueryLoader Pattern\nDESCRIPTION: Example implementation showing how to use the ErrorBoundaryWithRetry component with Relay's useQueryLoader pattern. This demonstrates a complete error handling approach for Relay data fetching.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v13.0.0/guided-tour/rendering/error-states.md#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * App.react.js\n */\n\nconst ErrorBoundaryWithRetry = require('ErrorBoundaryWithRetry');\nconst React = require('React');\n\nconst MainContent = require('./MainContent.react');\n\nconst query = require('__generated__/MainContentQuery.graphql');\n\n// NOTE: This is NOT actual production code;\n// it is only used to illustrate example\nfunction App(props) {\n  // E.g., initialQueryRef provided by router\n  const [queryRef, loadQuery] = useQueryLoader(query, props.initialQueryRef);\n\n  return (\n    <ErrorBoundaryWithRetry\n      // On retry we call loadQuery again, which will update\n      // the value of queryRef from useQueryLoader with a new\n      // fresh query reference\n      onRetry={() => loadQuery(/* ... */)}\n      fallback={({error, retry}) =>\n        <>\n          <ErrorUI error={error} />\n          {/* Render a button to retry; this will attempt to re-render the\n          content inside the boundary, i.e. the query component */}\n          <Button onPress={retry}>Retry</Button>\n        </>\n      }>\n      {/* The value of queryRef will be updated after calling\n      loadQuery again */}\n      <MainContent queryRef={queryRef} />\n    </ErrorBoundaryWithRetry>\n  );\n}\n\n/**\n * MainContent.react.js\n */\nfunction MainContent(props) {\n  const data = usePreloadedQuery(\n    graphql`...`,\n    props.queryRef\n  );\n\n  return (/* ... */);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Query Loading with React Relay useQueryLoader\nDESCRIPTION: Example showing how to use useQueryLoader hook to implement render-as-you-fetch pattern. The code demonstrates loading a query to fetch user data, managing query lifecycle with load and dispose functions, and rendering the results using Suspense.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/api-reference/hooks/use-query-loader.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport type {PreloadedQuery} from 'react-relay';\n\nconst {useQueryLoader, usePreloadedQuery} = require('react-relay');\n\nconst AppQuery = graphql`\n  query AppQuery($id: ID!) {\n    user(id: $id) {\n      name\n    }\n  }\n`;\n\nfunction QueryFetcherExample() {\n  const [\n    queryReference,\n    loadQuery,\n    disposeQuery,\n  ] = useQueryLoader(\n    AppQuery,\n  );\n\n  if (queryReference == null) {\n    return (\n      <Button onClick={() => loadQuery({})}> Click to reveal the name </Button>\n    );\n  }\n\n  return (\n    <>\n      <Button onClick={disposeQuery}>\n        Click to hide the name and dispose the query.\n      </Button>\n      <React.Suspense fallback=\"Loading\">\n        <NameDisplay queryReference={queryReference} />\n      </React.Suspense>\n    </>\n  );\n}\n\nfunction NameDisplay({ queryReference }) {\n  const data = usePreloadedQuery(AppQuery, queryReference);\n\n  return <h1>{data.user?.name}</h1>;\n}\n```\n\n----------------------------------------\n\nTITLE: Reading Client-Only Data with useFragment\nDESCRIPTION: This JavaScript code shows how to read client-only data using Relay's `useFragment` hook. It demonstrates selecting the `is_new_comment` field, which was added via client schema extensions, within a fragment defined on the `Comment` type. The code utilizes the graphql tagged template literal.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/guided-tour/updating-data/client-only-data.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n\"const data = *useFragment*(\\n  graphql`\\n    fragment CommentComponent_comment on Comment {\\n\\n      # We can select client-only fields as we would any other field\\n      is_new_comment\\n\\n      body {\\n        text\\n      }\\n    }\\n  `,\\n  props.user,\\n);\"\n```\n\n----------------------------------------\n\nTITLE: Passing Connection ID for Comment Posting Mutation in Relay\nDESCRIPTION: This snippet shows how to pass the connection ID as a mutation variable when posting a comment. It uses ConnectionHandler to generate the connection ID based on the story ID and connection key.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/tutorial/mutations-updates.md#2025-04-18_snippet_15\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport {useFragment, useMutation, ConnectionHandler} from 'react-relay';\n\n...\n\nexport default function StoryCommentsComposer({story}: Props) {\n  ...\n  function onPost() {\n    setText('');\n    const connectionID = ConnectionHandler.getConnectionID(\n      data.id,\n      'StoryCommentsSectionFragment_comments',\n    );\n    commitMutation({\n      variables: {\n        id: data.id,\n        text,\n        connections: [connectionID],\n      },\n    })\n  }\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Redux Selector-based LiveState Helper\nDESCRIPTION: A utility function that converts a Redux selector into a LiveState object. It handles subscription management and only notifies when the selected value actually changes.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/guides/relay-resolvers/live-fields.md#2025-04-18_snippet_3\n\nLANGUAGE: ts\nCODE:\n```\ntype Selector<T> = (state: State) => T;\n\nfunction selectorAsLiveState<T>(selector: Selector<T>): LiveState<T> {\n  let currentValue = selector(store.getState());\n  return {\n    read: () => currentValue,\n    subscribe: (cb) => {\n      return store.subscribe(() => {\n        const newValue = selector(store.getState());\n        if (newValue === currentValue) {\n          return;\n        }\n        currentValue = newValue;\n        cb();\n      });\n      return unsubscribe;\n    },\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Getting linked records associated with a current record\nDESCRIPTION: This snippet demonstrates how to retrieve multiple linked records using the getLinkedRecords method, returning an array of linked RecordProxies as defined in the GraphQL document.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/api-reference/relay-runtime/store.md#2025-04-18_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nconst rootField = store.getRootField('rootField');\nconst nodes = rootField.getLinkedRecords('nodes');\n```\n\n----------------------------------------\n\nTITLE: Accessing Connection Using __id Field\nDESCRIPTION: This snippet demonstrates how to query for a connection's __id field and use it to access the record in the store.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/guided-tour/list-data/updating-connections.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst fragmentData = useFragment(\n  graphql`\n    fragment StoryComponent_story on Story {\n      comments @connection(key: \"StoryComponent_story_comments_connection\") {\n        # Query for the __id field\n        __id\n\n        # ...\n      }\n    }\n  `,\n  props.story,\n);\n\n// Get the connection record id\nconst connectionID = fragmentData?.comments?.__id;\n```\n\nLANGUAGE: javascript\nCODE:\n```\nfunction updater(store: RecordSourceSelectorProxy) {\n  // connectionID is passed as input to the mutation/subscription\n  const connection = store.get(connectionID);\n\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Modifying Updatable Data in Relay\nDESCRIPTION: Shows how to modify the updatable data obtained from reading an updatable fragment, demonstrating toggling of likes and updating like count.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/tutorial/mutations-updates.md#2025-04-18_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction StoryLikeButton({story}) {\n  ...\n      optimisticUpdater: store => {\n        const fragment = graphql`\n          fragment StoryLikeButton_updatable on Story @updatable {\n            likeCount\n            doesViewerLike\n          }\n        `;\n        const {updatableData} = store.readUpdatableFragment(fragment, story);\n        const alreadyLikes = updatableData.doesViewerLike;\n        updatableData.doesViewerLike = !alreadyLikes;\n        updatableData.likeCount += (alreadyLikes ? -1 : 1);\n      },\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a GraphQL Mutation for Posting Story Comments\nDESCRIPTION: This code snippet defines a GraphQL mutation `StoryCommentsComposerPostMutation` for posting comments on a story. The mutation takes the story ID (`$id`) and comment text (`$text`) as input variables. The response includes the newly created `commentEdge` containing the `id` and `text` of the comment.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/tutorial/mutations-updates.md#2025-04-18_snippet_12\n\nLANGUAGE: graphql\nCODE:\n```\nconst StoryCommentsComposerPostMutation = graphql`\n  mutation StoryCommentsComposerPostMutation(\n    $id: ID!,\n    $text: String!,\n  ) {\n    postStoryComment(id: $id, text: $text) {\n      commentEdge {\n        node {\n          id\n          text\n        }\n      }\n    }\n  }\n`;\n```\n\n----------------------------------------\n\nTITLE: Adding New Types in GraphQL for Relay\nDESCRIPTION: Shows how to define new client-only types in GraphQL, including an enum and a regular type. It also demonstrates extending server types with client-only types and referencing both client and server types.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/guided-tour/updating-data/client-only-data.md#2025-04-18_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\nenum FetchStatus {\n  FETCHED\n  PENDING\n  ERRORED\n}\n\n\ntype FetchState {\n  status: FetchStatus\n\n  started_by: User!\n}\n\nextend type Item {\n  fetch_state: FetchState\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Multiple Fragments in Single Component\nDESCRIPTION: Demonstrates how to use multiple useFragment hooks to render data from different fragments in a single React component.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/guided-tour/rendering/fragments.md#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport type {UserComponent_user$key} from 'UserComponent_user.graphql';\nimport type {UserComponent_viewer$key} from 'UserComponent_viewer.graphql';\n\nconst React = require('React');\nconst {graphql, useFragment} = require('react-relay');\n\ntype Props = {\n  user: UserComponent_user$key,\n  viewer: UserComponent_viewer$key,\n};\n\nfunction UserComponent(props: Props) {\n  const userData = useFragment(\n    graphql`\n      fragment UserComponent_user on User {\n        name\n        profile_picture(scale: 2) {\n          uri\n        }\n      }\n    `,\n    props.user,\n  );\n\n  const viewerData = useFragment(\n    graphql`\n      fragment UserComponent_viewer on Viewer {\n        actor {\n          name\n        }\n      }\n    `,\n    props.viewer,\n  );\n\n  return (\n    <>\n      <h1>{userData.name}</h1>\n      <div>\n        <img src={userData.profile_picture?.uri} />\n        Acting as: {viewerData.actor?.name ?? 'Unknown'}\n      </div>\n    </>\n  );\n}\n\nmodule.exports = UserComponent;\n```\n\n----------------------------------------\n\nTITLE: Creating local data with commitLocalUpdate in Relay\nDESCRIPTION: Creates a new Note record and adds it to the user's notes array using commitLocalUpdate to modify the Relay Store.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/guides/client-schema-extensions.md#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport {commitLocalUpdate} from 'react-relay';\n\nlet tempID = 0;\n\nfunction createUserNote(environment) {\n  commitLocalUpdate(environment, store => {\n    const user = store.getRoot().getLinkedRecord('viewer');\n    const userNoteRecords = user.getLinkedRecords('notes') || [];\n\n    // Create a unique ID.\n    const dataID = `client:Note:${tempID++}`;\n\n    //Create a new note record.\n    const newNoteRecord = store.create(dataID, 'Note');\n\n    // Add the record to the user's list of notes.\n    user.setLinkedRecords([...userNoteRecords, newNoteRecord], 'notes');\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Integrating StoryLikeButton Component in Story.tsx\nDESCRIPTION: Code snippet showing how to add a StoryLikeButton component to a Story component, including spreading the button's fragment into the Story fragment to ensure all required data is fetched.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/tutorial/mutations-updates.md#2025-04-18_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n// change-line\nimport StoryLikeButton from './StoryLikeButton';\n\n...\n\nconst StoryFragment = graphql`\n  fragment StoryFragment on Story {\n    title\n    summary\n    // ... etc\n    // change-line\n    ...StoryLikeButtonFragment\n  }\n`;\n\n...\n\nexport default function Story({story}: Props) {\n  const data = useFragment(StoryFragment, story);\n  return (\n    <Card>\n      <PosterByline person={data.poster} />\n      <Heading>{data.title}</Heading>\n      <Timestamp time={data.posterAt} />\n      <Image image={story.thumbnail} width={400} height={400} />\n      <StorySummary summary={data.summary} />\n      // change-line\n      <StoryLikeButton story={data} />\n      <StoryCommentsSection story={data} />\n    </Card>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Linked Record from Relay Store\nDESCRIPTION: Example of retrieving a linked record from the Relay Store using the getLinkedRecord method of RecordProxy. It can optionally take arguments for fields with parameters.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/api-reference/relay-runtime/store.md#2025-04-18_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nconst rootField = store.getRootField('rootField');\nconst viewer = rootField.getLinkedRecord('viewer');\n\n// With arguments\nconst viewer = rootField.getLinkedRecord('viewer', {arg: 'value'});\n```\n\n----------------------------------------\n\nTITLE: Querying List Data with GraphQL\nDESCRIPTION: Example of a GraphQL query that retrieves a list of contacts with their IDs and names, showing both the request and response structure.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/tutorial/arrays-lists.md#2025-04-18_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nquery MyQuery {\n  viewer {\n    contacts { // List of edges\n      id // field on a single item\n      name\n    }\n  }\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  viewer: {\n    contacts: [ // array in response\n      {\n        id: \"123\",\n        name: \"Chris\",\n      },\n      {\n        id: \"789\",\n        name: \"Sue\",\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a GraphQL Query with Fragment Spreading in JavaScript\nDESCRIPTION: This snippet demonstrates how to define a GraphQL query that includes a fragment spread. The query fetches story data and incorporates the AuthorDetails fragment.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/principles-and-architecture/thinking-in-relay.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst storyQuery = graphql`\n  query StoryQuery($storyID: ID!) {\n    story(id: $storyID) {\n      title\n      author {\n        ...AuthorDetails_author\n      }\n    }\n  }\n`;\n```\n\n----------------------------------------\n\nTITLE: Using commitLocalUpdate to Make Local Changes in Relay\nDESCRIPTION: This snippet demonstrates how to use the commitLocalUpdate API to create a new comment locally and add it to a connection in the Relay store. It creates a new record, sets up the edge, and adds it to the connection.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v13.0.0/guided-tour/updating-data/local-data-updates.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport type {Environment} from 'react-relay';\n\nconst {commitLocalUpdate, graphql} = require('react-relay');\n\nfunction commitCommentCreateLocally(\n  environment: Environment,\n  feedbackID: string,\n) {\n  return commitLocalUpdate(environment, store => {\n    const feedbackRecord = store.get(feedbackID);\n    const connectionRecord = ConnectionHandler.getConnection(\n      userRecord,\n      'CommentsComponent_comments_connection',\n    );\n\n    // Create a new local Comment from scratch\n    const id = `client:new_comment:${randomID()}`;\n    const newCommentRecord = store.create(id, 'Comment');\n\n    // ... update new comment with content\n\n    // Create new edge from scratch\n    const newEdge = ConnectionHandler.createEdge(\n      store,\n      connectionRecord,\n      newCommentRecord,\n      'CommentEdge' /* GraphQl Type for edge */,\n    );\n\n    // Add edge to the end of the connection\n    ConnectionHandler.insertEdgeAfter(connectionRecord, newEdge);\n  });\n}\n\nmodule.exports = {commit: commitCommentCreateLocally};\n```\n\n----------------------------------------\n\nTITLE: Augmenting Fragment for Pagination in GraphQL\nDESCRIPTION: This snippet shows how to modify a GraphQL fragment to support pagination by adding argument definitions, making it refetchable, and marking the connection field.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/tutorial/connections-pagination.md#2025-04-18_snippet_3\n\nLANGUAGE: graphql\nCODE:\n```\nconst StoryCommentsSectionFragment = graphql`\n  fragment StoryCommentsSectionFragment on Story\n    @refetchable(queryName: \"StoryCommentsSectionPaginationQuery\")\n    @argumentDefinitions(\n      cursor: { type: \"String\" }\n      count: { type: \"Int\", defaultValue: 3 }\n    )\n  {\n    comments(after: $cursor, first: $count)\n      @connection(key: \"StoryCommentsSectionFragment_comments\")\n    {\n      edges {\n        node {\n          ...CommentFragment\n        }\n      }\n      pageInfo {\n        hasNextPage\n      }\n    }\n  }\n`;\n```\n\n----------------------------------------\n\nTITLE: Declaring and Using GraphQL Variables in a Query\nDESCRIPTION: A basic example of a GraphQL query that declares a variable $id of type ID! and uses it as input to the user() field. The ID! type signifies that this is a required ID value.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v13.0.0/guided-tour/rendering/variables.md#2025-04-18_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nquery UserQuery($id: ID!) {\n\n  # The value of $id is used as input to the user() call:\n  user(id: $id) {\n    id\n    name\n  }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Multiple Stories in React Component\nDESCRIPTION: This code snippet demonstrates how to update a React component to render multiple stories using the data fetched from the GraphQL query. It maps over the array of stories to render each one.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/tutorial/arrays-lists.md#2025-04-18_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nexport default function Newsfeed({}) {\n  const data = useLazyLoadQuery<NewsfeedQueryType>(NewsfeedQuery, {});\n  const stories = data.topStories;\n  return (\n    <div className=\"newsfeed\">\n      {stories.map(story => <Story story={story} />)}\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing usePaginationFragment in a Component for Infinite Scrolling\nDESCRIPTION: This final snippet shows how to modify a component to use usePaginationFragment instead of useFragment. The hook provides access to both the data and loadNext function, which can be used to implement infinite scrolling.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/tutorial/connections-pagination.md#2025-04-18_snippet_14\n\nLANGUAGE: jsx\nCODE:\n```\nfunction NewsfeedContents({viewer}) {\n  // change-line\n  const {data, loadNext} = usePaginationFragment(NewsfeedFragment, viewer);\n  const storyEdges = data.newsfeedStories.edges;\n  return (\n    <>\n      {storyEdges.map(storyEdge =>\n        <Story key={storyEdge.node.id} story={storyEdge.node} />\n      )}\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using useClientQuery Hook in React\nDESCRIPTION: This JavaScript snippet demonstrates how to use the useClientQuery hook within a React component to fetch and render a client-only query for the 'client_field'. It illustrates the integration of Relay's GraphQL functionality in React.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/api-reference/hooks/use-client-query.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst React = require('React');\n\nconst {graphql, useClientQuery} = require('react-relay');\n\nfunction ClientQueryComponent() {\n  const data = useClientQuery(\n    graphql`\n      query ClientQueryComponentQuery {\n        client_field\n      }\n    `,\n    {}, // variables\n  );\n\n  return (\n    <div>{data.client_field}</div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Relay Pagination Fragment with Filters\nDESCRIPTION: This code snippet demonstrates a Relay pagination fragment using `usePaginationFragment` to fetch a user's friends. It includes variables for ordering (`orderBy`), searching (`searchTerm`), and pagination (`cursor`, `count`). The `FriendsListComponent_user` fragment defines the data requirements for the component.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v13.0.0/guided-tour/list-data/refetching-connections.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n\"type Props = {\\n  userRef: FriendsListComponent_user$key,\\n};\\n\\nfunction FriendsListComponent(props: Props) {\\n  const userRef = props.userRef;\\n\\n  const {data, ...} = usePaginationFragment(\\n    graphql`\\n      fragment FriendsListComponent_user on User {\\n        name\\n        friends(\\n          order_by: $orderBy,\\n          search_term: $searchTerm,\\n          after: $cursor,\\n          first: $count,\\n        ) @connection(key: \\\"FriendsListComponent_user_friends_connection\\\") {\\n          edges {\\n            node {\\n              name\\n              age\\n            }\\n          }\\n        }\\n      }\\n    `,\\n    userRef,\\n  );\\n\\n  return (...);\\n}\"\n```\n\n----------------------------------------\n\nTITLE: Defining a Relay Fragment with @relay(mask: false)\nDESCRIPTION: This snippet shows how to define a Relay fragment with the `@relay(mask: false)` directive. This directive prevents data masking, making the data directly available to the parent component. The `Component_internUser` fragment fetches the `id` and `name` fields from the `InternUser` type, and these fields will be directly available wherever the fragment is included.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/api-reference/graphql/graphql-directives.md#2025-04-18_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\ngraphql`\n  fragment Component_internUser on InternUser @relay(mask: false) {\n    id\n    name\n  }\n`;\n```\n\n----------------------------------------\n\nTITLE: Updating Multiple Filtered Connections in Relay\nDESCRIPTION: Shows how to update multiple connection records when adding new edges, taking into account different filter conditions.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/guided-tour/list-data/updating-connections.md#2025-04-18_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nconst {ConnectionHandler} = require('relay-runtime');\n\nfunction updater(store: RecordSourceSelectorProxy) {\n  const storyRecord = store.get(storyID);\n\n  // Get the connection instance for the connection with comments sorted\n  // by the date they were added\n  const connectionRecordSortedByDate = ConnectionHandler.getConnection(\n    storyRecord,\n    'StoryComponent_story_comments_connection',\n    {order_by: '*DATE_ADDED*', filter_mode: null, language: null}\n  );\n\n  // Get the connection instance for the connection that only contains\n  // comments made by friends\n  const connectionRecordFriendsOnly = ConnectionHandler.getConnection(\n    storyRecord,\n    'StoryComponent_story_comments_connection',\n    {order_by: null, filter_mode: '*FRIENDS_ONLY*', language: null}\n  );\n\n  const newComment = (...);\n  const newEdge = (...);\n\n  ConnectionHandler.insertEdgeAfter(\n    connectionRecordSortedByDate,\n    newEdge,\n  );\n\n  if (isMadeByFriend(storyRecord, newComment) {\n    // Only add new comment to friends-only connection if the comment\n    // was made by a friend\n    ConnectionHandler.insertEdgeAfter(\n      connectionRecordFriendsOnly,\n      newEdge,\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Default Values with @argumentDefinitions in Relay\nDESCRIPTION: Example of defining default values for fragment arguments using @argumentDefinitions. This makes the arguments optional when including the fragment.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/guided-tour/rendering/variables.md#2025-04-18_snippet_7\n\nLANGUAGE: js\nCODE:\n```\n/**\n * Declare a fragment that accepts arguments with default values\n */\n\nfunction TaskView(props) {\n  const data = useFragment(\n    graphql`\n      fragment TaskView_task on Task\n        @argumentDefinitions(showDetailedResults: {type: \"Boolean!\", defaultValue: true}) {\n        name\n        is_completed\n        ... @include(if: $showDetailedResults) {\n          description\n        }\n      }\n    `,\n    props.task,\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Refreshing Fragments using useRefetchableFragment in React\nDESCRIPTION: This snippet demonstrates how to use the useRefetchableFragment Hook to manually refresh data for a fragment. It shows how to define a refetchable fragment, use the refetch function, and handle the refresh operation.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/guided-tour/refetching/refreshing-fragments.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport type {UserComponent_user$key} from 'UserComponent_user.graphql';\n// This type is autogenerated by Relay given @refetchable used below\nimport type {UserComponentRefreshQuery} from 'UserComponentRefreshQuery.graphql';\n\ntype Props = {\n  user: UserComponent_user$key,\n};\n\nfunction UserComponent(props: Props) {\n  const [data, refetch] = useRefetchableFragment<UserComponentRefreshQuery, _>(\n    graphql`\n      fragment UserComponent_user on User\n      # @refetchable makes it so Relay autogenerates a query for\n      # fetching this fragment\n      @refetchable(queryName: \"UserComponentRefreshQuery\") {\n        id\n        name\n        friends {\n          count\n        }\n      }\n    `,\n    props.user,\n  );\n\n  const refresh = useCallback(() => {\n    // We call refetch with empty variables: `{}`,\n    // which will refetch the @refetchable query with the same\n    // original variables the fragment was fetched with, and update\n    // this component with the latest fetched data.\n    // The fetchPolicy ensures we always fetch from the server and skip\n    // the local data cache.\n    refetch({}, {fetchPolicy: 'network-only'})\n  }), [/* ... */]);\n\n  return (\n    <>\n      <h1>{data.name}</h1>\n      <div>Friends count: {data.friends?.count}</div>\n      <Button\n        onClick={() => refresh()}>\n        Fetch latest count\n      </Button>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Connection with New Edge - Relay Runtime\nDESCRIPTION: This code snippet shows how to update a Relay connection by adding a new edge fetched from a server response after a mutation. It utilizes the Relay runtime, specifically ConnectionHandler and RecordSourceSelectorProxy. Key steps include accessing the mutation payload and building a new connection edge.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/guided-tour/updating-data/updating-connections.md#2025-04-18_snippet_8\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst {ConnectionHandler} = require('relay-runtime');\n\nfunction updater(store: RecordSourceSelectorProxy) {\n  const storyRecord = store.get(storyID);\n  const connectionRecord = ConnectionHandler.getConnection(\n    storyRecord,\n    'StoryComponent_story_comments_connection',\n  );\n\n  // Get the payload returned from the server\n  const payload = store.getRootField('comment_create');\n\n  // Get the edge inside the payload\n  const serverEdge = payload.getLinkedRecord('comment_edge');\n\n  // Build edge for adding to the connection\n  const newEdge = ConnectionHandler.buildConnectionEdge(\n    store,\n    connectionRecord,\n    serverEdge,\n  );\n\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Executing a Mutation to Like a Story with GraphQL\nDESCRIPTION: This GraphQL mutation marks a story as liked. It takes a story ID as input and returns updated fields such as `likeCount`, reflecting the change after execution. The mutation demonstrates interacting with data that updates the server state.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v13.0.0/principles-and-architecture/thinking-in-graphql.md#2025-04-18_snippet_12\n\nLANGUAGE: graphql\nCODE:\n```\nmutation StoryLike($storyID: String) {\n   storyLike(storyID: $storyID) {\n     likeCount\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Connection Using ConnectionHandler.getConnectionID\nDESCRIPTION: This snippet shows how to access a connection record using the ConnectionHandler.getConnectionID API when you have the parent record ID.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/guided-tour/list-data/updating-connections.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst {ConnectionHandler} = require('relay-runtime');\n\nfunction updater(store: RecordSourceSelectorProxy) {\n  // Get the connection ID\n  const connectionID = ConnectionHandler.getConnectionID(\n    storyID, // passed as input to the mutation/subscription\n    'StoryComponent_story_comments_connection',\n  );\n\n  // Get the connection record\n  const connectionRecord = store.get(connectionID);\n\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Converting QueryRenderer to useQueryLoader and usePreloadedQuery in React Relay\nDESCRIPTION: This snippet illustrates the transformation from QueryRenderer to a combination of useQueryLoader and usePreloadedQuery, allowing for data fetching ahead of rendering. The conversion process requires integrating the Relay environment provider and adapting the component structure.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/migration-and-compatibility/relay-hooks-and-legacy-container-apis.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n<RelayEnvironmentProvider environment={MyAppEnvironment}>\n  <App />\n</RelayEnvironmentProvider>\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as React from 'React';\nimport {graphql, QueryRenderer} from 'react-relay';\n\nexport default function UserPopover() {\n  return (\n    <QueryRenderer\n      environment={MyAppEnvironment}\n      query={graphql`\n        query UserPopoverQuery($id: ID!) {\n          user(id: $id) {\n            name\n          }\n        }\n      `}\n      variables={{id: 4}}\n      render={(props, error) => {\n        if (error) {\n          return <Error />;\n        }\n        if (!props) {\n          return <Loading />;\n        }\n        return <h1>{props.user?.name}</h1>\n      }}\n    />\n  );\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as React from 'React';\nimport {graphql, usePreloadedQuery} from 'react-relay';\n\nexport default function UserPopover(props) {\n  const data = usePreloadedQuery(\n    graphql`\n      query UserPopoverQuery($id: ID!) {\n        user(id: $id) {\n          name\n        }\n      }\n    `,\n    props.queryRef,\n  );\n\n return <h1>{data.user?.name}</h1>;\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as React from 'React';\nimport {useQueryLoader} from 'react-relay';\n\n// Import the query defined in the UserPopover component\nimport UserPopoverQuery from '__generated__/UserPopoverQuery.graphql';\n\nexport default function UserPopoverButton(props) {\n  const [queryRef, loadQuery] = useQueryLoader(UserPopoverQuery)\n\n  const handleClick = useCallback(() => {\n    loadQuery({id: props.userID})\n  }, [loadQuery, props.userID]);\n\n  return (\n    <>\n      <Button onClick={handleClick} />\n      {queryRef != null ?\n        <Popover>\n\n          <ErrorBoundary renderError={Error}>\n            <Suspense fallback={<Loading />}>\n              <UserPopover queryRef={queryRef} />\n            </Suspense>\n          </ErrorBoundary>\n        </Popover>\n        : null\n      }\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Basic GraphQL Mutation Structure\nDESCRIPTION: Demonstrates the basic structure of a GraphQL mutation for liking feedback, showing the mutation keyword and field selection.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/guided-tour/updating-data/graphql-mutations.md#2025-04-18_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nmutation FeedbackLikeMutation($input: FeedbackLikeData!) {\n  feedback_like(data: $input) {\n    feedback {\n      id\n      viewer_does_like\n      like_count\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Example of a Relay local persisting server\nDESCRIPTION: This snippet presents a simple implementation of a Node.js server that saves query texts to a JSON file using HTTP requests. It includes functions for computing MD5 hashes and handling incoming requests.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/guides/persisted-queries.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst http = require('http');\nconst crypto = require('crypto');\nconst fs = require('fs');\n\nfunction md5(input) {\n  return crypto.createHash('md5').update(input).digest('hex');\n}\n\nclass QueryMap {\n  constructor(fileMapName) {\n    this._fileMapName = fileMapName;\n    this._queryMap = new Map(JSON.parse(fs.readFileSync(this._fileMapName)));\n  }\n\n  _flush() {\n    const data = JSON.stringify(Array.from(this._queryMap.entries()));\n    fs.writeFileSync(this._fileMapName, data);\n  }\n\n  saveQuery(text) {\n    const id = md5(text);\n    this._queryMap.set(id, text);\n    this._flush();\n    return id;\n  }\n}\n\nconst queryMap = new QueryMap('./queryMap.json');\n\nasync function requestListener(req, res) {\n  if (req.method === 'POST') {\n    const buffers = [];\n    for await (const chunk of req) {\n      buffers.push(chunk);\n    }\n    const data = Buffer.concat(buffers).toString();\n    res.writeHead(200, {\n      'Content-Type': 'application/json'\n    });\n    try {\n      if (req.headers['content-type'] !== 'application/x-www-form-urlencoded') {\n        throw new Error(\n          'Only \"application/x-www-form-urlencoded\" requests are supported.'\n        );\n      }\n      const text = new URLSearchParams(data).get('text');\n      if (text == null) {\n        throw new Error('Expected to have `text` parameter in the POST.');\n      }\n      const id = queryMap.saveQuery(text);\n      res.end(JSON.stringify({\"id\": id}));\n    } catch (e) {\n      console.error(e);\n      res.writeHead(400);\n      res.end(`Unable to save query: ${e}.`);\n    }\n  } else {\n    res.writeHead(400);\n    res.end(\"Request is not supported.\")\n  }\n}\n\nconst PORT = 2999;\nconst server = http.createServer(requestListener);\nserver.listen(PORT);\n\nconsole.log(`Relay persisting server listening on ${PORT} port.`);\n```\n\n----------------------------------------\n\nTITLE: Rendering Multiple Fragments in a Component\nDESCRIPTION: Shows how to use multiple useFragment hooks to render data from multiple GraphQL fragments in a single React component.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/guided-tour/rendering/fragments.md#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport type {UserComponent_user$key} from 'UserComponent_user.graphql';\nimport type {UserComponent_viewer$key} from 'UserComponent_viewer.graphql';\n\nconst React = require('React');\nconst {graphql, useFragment} = require('react-relay');\n\ntype Props = {\n  user: UserComponent_user$key,\n  viewer: UserComponent_viewer$key,\n};\n\nfunction UserComponent(props: Props) {\n  const userData = useFragment(\n    graphql`\n      fragment UserComponent_user on User {\n        name\n        profile_picture(scale: 2) {\n          uri\n        }\n      }\n    `,\n    props.user,\n  );\n\n  const viewerData = useFragment(\n    graphql`\n      fragment UserComponent_viewer on Viewer {\n        actor {\n          name\n        }\n      }\n    `,\n    props.viewer,\n  );\n\n  return (\n    <>\n      <h1>{userData.name}</h1>\n      <div>\n        <img src={userData.profile_picture?.uri} />\n        Acting as: {viewerData.actor?.name ?? 'Unknown'}\n      </div>\n    </>\n  );\n}\n\nmodule.exports = UserComponent;\n```\n\n----------------------------------------\n\nTITLE: Paginating Multiple Connections with usePaginationFragment in React and Relay\nDESCRIPTION: Demonstrates how to use usePaginationFragment multiple times within a single component to paginate over different connections. It includes fragments for both user and viewer data, each with their own connection.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/guided-tour/list-data/advanced-pagination.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport type {CombinedFriendsListComponent_user$key} from 'CombinedFriendsListComponent_user.graphql';\nimport type {CombinedFriendsListComponent_viewer$key} from 'CombinedFriendsListComponent_viewer.graphql';\n\nconst React = require('React');\n\nconst {graphql, usePaginationFragment} = require('react-relay');\n\ntype Props = {\n  user: CombinedFriendsListComponent_user$key,\n  viewer: CombinedFriendsListComponent_viewer$key,\n};\n\nfunction CombinedFriendsListComponent(props: Props) {\n\n  const {data: userData, ...userPagination} = usePaginationFragment(\n    graphql`\n      fragment CombinedFriendsListComponent_user on User {\n        name\n        friends\n          @connection(\n            key: \"CombinedFriendsListComponent_user_friends_connection\"\n          ) {\n          edges {\n            node {\n              name\n              age\n            }\n          }\n        }\n      }\n    `,\n    props.user,\n  );\n\n  const {data: viewerData, ...viewerPagination} = usePaginationFragment(\n    graphql`\n      fragment CombinedFriendsListComponent_user on Viewer {\n        actor {\n          ... on User {\n            name\n            friends\n              @connection(\n                key: \"CombinedFriendsListComponent_viewer_friends_connection\"\n              ) {\n              edges {\n                node {\n                  name\n                  age\n                }\n              }\n            }\n          }\n        }\n      }\n    `,\n    props.viewer,\n  );\n\n  return (...);\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Query Resolver for Mock Payload Generation in JavaScript\nDESCRIPTION: This snippet shows how to configure a query resolver to generate a mock response using MockPayloadGenerator.generate(). It demonstrates how to specify custom field values for a GraphQL type.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/guides/testing-relay-with-preloaded-queries.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nreturn MockPayloadGenerator.generate(operation, {\n  CurrencyAmount() { // <-- the GraphQL type\n    return {\n      formatted_amount: \"response_value\" <-- CurrencyAmount fields, selected in the query\n    };\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Using Fragments in Mutation Response\nDESCRIPTION: Enhanced mutation that reuses the component's fragment to ensure consistent data requirements\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/tutorial/mutations-updates.md#2025-04-18_snippet_6\n\nLANGUAGE: graphql\nCODE:\n```\nconst StoryLikeButtonLikeMutation = graphql`\n  mutation StoryLikeButtonLikeMutation(\n    $id: ID,\n    $doesLike: Boolean,\n  ) {\n    likeStory(id: $id, doesLike: $doesLike) {\n      story {\n        ...StoryLikeButtonFragment\n      }\n    }\n  }\n`;\n```\n\n----------------------------------------\n\nTITLE: Refetching Connections with Different Variables\nDESCRIPTION: Complete example showing how to refetch a connection with different filter variables, both in response to prop changes and user interactions.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/guided-tour/list-data/refetching-connections.md#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * FriendsListComponent.react.js\n */\nimport type {FriendsListComponent_user$key} from 'FriendsListComponent_user.graphql';\n\nconst React = require('React');\nconst {useState, useEffect} = require('React');\n\nconst {graphql, usePaginationFragment} = require('react-relay');\n\n\ntype Props = {\n  searchTerm?: string,\n  user: FriendsListComponent_user$key,\n};\n\nfunction FriendsListComponent(props: Props) {\n  const searchTerm = props.searchTerm;\n  const {data, loadNext, refetch} = usePaginationFragment(\n    graphql`\n      fragment FriendsListComponent_user on User {\n        name\n        friends(\n          order_by: $orderBy,\n          search_term: $searchTerm,\n          after: $cursor,\n          first: $count,\n        ) @connection(key: \"FriendsListComponent_user_friends_connection\") {\n          edges {\n            node {\n              name\n              age\n            }\n          }\n        }\n      }\n    `,\n    props.user,\n  );\n\n  useEffect(() => {\n    // When the searchTerm provided via props changes, refetch the connection\n    // with the new searchTerm\n    refetch({first: 10, search_term: searchTerm}, {fetchPolicy: 'store-or-network'});\n  }, [searchTerm])\n\n  return (\n    <>\n      <h1>Friends of {data.name}:</h1>\n\n      {/* When the button is clicked, refetch the connection but sorted differently */}\n      <Button\n        onClick={() =>\n          refetch({first: 10, orderBy: 'DATE_ADDED'});\n        }>\n        Sort by date added\n      </Button>\n\n      <List items={data.friends?.nodes}>...</List>\n      <Button onClick={() => loadNext(10)}>Load more friends</Button>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Enhancing Pagination with React useTransition for Loading States\nDESCRIPTION: This snippet demonstrates how to improve the user experience during pagination by wrapping the loadNext call inside a React transition. This provides immediate feedback with a spinner while new data is loading, without hiding the existing UI.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/tutorial/connections-pagination.md#2025-04-18_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\nfunction StoryCommentsSection({story}) {\n  // change-line\n  const [isPending, startTransition] = useTransition();\n  const {data, loadNext} = usePaginationFragment(StoryCommentsSectionFragment, story);\n  // change\n  const onLoadMore = () => startTransition(() => {\n    loadNext(3);\n  });\n  // end-change\n  return (\n    <>\n      {data.comments.edges.map(commentEdge =>\n        <Comment comment={commentEdge.node} />\n      )}\n      {data.comments.pageInfo.hasNextPage && (\n        <LoadMoreCommentsButton\n          onClick={onLoadMore}\n            // change-line\n          disabled={isPending}\n        />\n      )}\n      // change-line\n      {isPending && <CommentsLoadingSpinner />}\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Defining GraphQL Connection with Filters in JavaScript\nDESCRIPTION: This snippet uses Relay to define a GraphQL fragment with connections that include filters as arguments. The filters 'order_by', 'filter_mode', and 'language' are used to define the unique connection identity in the Relay store. This ensures that queries with different filter values result in distinct connection records.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/guided-tour/list-data/updating-connections.md#2025-04-18_snippet_12\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst {graphql} = require('RelayModern');\n\nconst storyFragment = graphql`\n  fragment StoryComponent_story on Story {\n    comments(\n      order_by: $orderBy,\n      filter_mode: $filterMode,\n      language: $language,\n    ) @connection(key: \"StoryComponent_story_comments_connection\") {\n      edges {\n        nodes {\n          body {\n            text\n          }\n        }\n      }\n    }\n  }\n`;\n```\n\n----------------------------------------\n\nTITLE: Testing Pagination Components in Relay\nDESCRIPTION: Demonstrates how to test components that use usePaginationFragment in Relay. The example shows how to simulate pagination behavior by resolving operations with different mock data for first and second pages, and testing UI state changes.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/guides/testing-relay-components.md#2025-04-18_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n// Pagination Example\ntest('`Pagination` Container', async () => {\n  const environment = createMockEnvironment();\n  const TestRenderer = () => {\n    const data = useLazyLoadQuery(\n      graphql`\n        query TestQuery @relay_test_operation {\n          myConnection: node(id: \"test-id\") {\n            connection {\n              # Spread the pagination fragment you want to test here\n              ...MyConnectionFragment\n            }\n          }\n        }\n      `,\n      {},\n    );\n    return <MyPaginationContainer connection={data.myConnection.connection} />\n  };\n\n  const renderer = render(\n    <RelayEnvironmentProvider environment={environment}>\n      <Suspense fallback=\"Loading...\">\n        <TestRenderer />\n      </Suspense>\n    </RelayEnvironmentProvider>\n  );\n\n  // Wrapping in act will ensure that components\n  // are fully updated to their final state.\n  act(() => {\n    environment.mock.resolveMostRecentOperation(operation =>\n      MockPayloadGenerator.generate(operation, {\n        ID(_, generateId) {\n          // Why we're doing this?\n          // To make sure that we will generate a different set of ID\n          // for elements on first page and the second page.\n          return `first-page-id-${generateId()}`;\n        },\n        PageInfo() {\n          return {\n            has_next_page: true,\n          };\n        },\n      }),\n    );\n  });\n\n  // Let's find a `loadMore` button and click on it to initiate pagination request, for example\n  const loadMore = await renderer.findByTestId('loadMore');\n  expect(loadMore.props.disabled).toBe(false);\n  loadMore.props.onClick();\n\n  // Wrapping in act will ensure that components\n  // are fully updated to their final state.\n  act(() => {\n    environment.mock.resolveMostRecentOperation(operation =>\n      MockPayloadGenerator.generate(operation, {\n        ID(_, generateId) {\n          // See, the second page IDs will be different\n          return `second-page-id-${generateId()}`;\n        },\n        PageInfo() {\n          return {\n            // And the button should be disabled, now. Probably.\n            has_next_page: false,\n          };\n        },\n      }),\n    );\n  });\n\n  expect(loadMore.props.disabled).toBe(true);\n});\n```\n\n----------------------------------------\n\nTITLE: Publishing Results to Store in Relay\nDESCRIPTION: The diagram illustrates how a RecordSource is added to the Relay Store, updating records but deferring subscription notifications. This is part of Relay's data management flow.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/principles-and-architecture/runtime-architecture.md#2025-04-18_snippet_4\n\nLANGUAGE: none\nCODE:\n```\n                        publish\n                           │\n                           ▼\n             ┌───────────────────────────┐\n             │           Store           │\n             │ ┌───────────────────────┐ │\n             │ │     RecordSource      │ │\n             │ │                       │ │\n             │ │┌──────┐┌──────┐┌─────┐│ │\n             │ ││Record││Record││ ... ││ │ <--- records are updated\n             │ │└──────┘└──────┘└─────┘│ │\n             │ └───────────────────────┘ │\n             │ ┌───────────────────────┐ │\n             │ │     Subscriptions     │ │\n             │ │                       │ │\n             │ │┌──────┐┌──────┐┌─────┐│ │\n             │ ││ Sub. ││ Sub. ││ ... ││ │ <--- subscriptions do not fire yet\n             │ │└──────┘└──────┘└─────┘│ │\n             │ └───────────────────────┘ │\n             └───────────────────────────┘\n```\n\n----------------------------------------\n\nTITLE: Defining GraphQL Like Mutation\nDESCRIPTION: Defines the GraphQL mutation for liking/unliking a story, including required variables and response fields.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/tutorial/mutations-updates.md#2025-04-18_snippet_2\n\nLANGUAGE: graphql\nCODE:\n```\nconst StoryLikeButtonLikeMutation = graphql`\n  mutation StoryLikeButtonLikeMutation(\n    $id: ID!,\n    $doesLike: Boolean!,\n  ) {\n    likeStory(\n      id: $id,\n      doesLike: $doesLike\n    ) {\n      story {\n        id\n        likeCount\n        doesViewerLike\n      }\n    }\n  }\n`;\n```\n\n----------------------------------------\n\nTITLE: Transforming Relay Queries to MD5 in JavaScript\nDESCRIPTION: This JavaScript snippet demonstrates how a Relay ConcreteRequest generates an object with queries and mutations transformed into MD5 hashes. This process reduces the server's payload and increases security by hide the actual query text.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/guides/persisted-queries.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst node/*: ConcreteRequest*/ = (function(){\n//... excluded for brevity\nreturn {\n  \"kind\": \"Request\",\n  \"operationKind\": \"query\",\n  \"name\": \"TodoItemRefetchQuery\",\n  \"id\": \"3be4abb81fa595e25eb725b2c6a87508\", // NOTE: id is now an md5 hash\n  // of the query text\n  \"text\": null, // NOTE: text is null now\n  //... excluded for brevity\n};\n})();\n```\n\n----------------------------------------\n\nTITLE: Defining GraphQL Schema Types\nDESCRIPTION: Shows examples of GraphQL schema definitions, including object types, interfaces, and enums. This snippet demonstrates how to structure and define data types in a GraphQL schema.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/tutorial/graphql.md#2025-04-18_snippet_2\n\nLANGUAGE: graphql\nCODE:\n```\ntype Story {\n  id: ID!\n  category: Category\n  title: String\n  summary: String\n  thumbnail: Image\n  poster: Actor\n}\n\ninterface Actor {\n  id: ID!\n  name: String\n  profilePicture: Image\n}\n\ntype Person implements Actor {\n  id: ID!\n  name: String\n  email: String\n  profilePicture: Image\n  location: Location\n}\n\nenum Category {\n  EDUCATION\n  NEWS\n  COOKING\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring a GraphQL Connection Fragment in Relay\nDESCRIPTION: This snippet shows how to declare a fragment that queries for a GraphQL connection in Relay. It uses the @connection directive to enable pagination and includes a recommended naming convention for the connection key.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/guided-tour/list-data/rendering-connections.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst {graphql} = require('RelayModern');\n\nconst userFragment = graphql`\n  fragment UserFragment on User {\n    name\n    friends(after: $cursor, first: $count)\n      @connection(key: \"UserFragment_friends\") {\n      edges {\n        node {\n          ...FriendComponent\n        }\n      }\n    }\n  }\n`;\n```\n\n----------------------------------------\n\nTITLE: Implementing Refetchable Fragment with useTransition in React\nDESCRIPTION: A React component that uses useTransition to manage search functionality in a contacts list, allowing smooth data refetching with pending state\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/tutorial/refetchable-fragments.md#2025-04-18_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst {useState, useTransition} = React;\n\nfunction ContactsList({viewer}) {\n  const [isPending, startTransition] = useTransition();\n  const [searchString, setSearchString] = useState('');\n  const [data, refetch] = useRefetchableFragment(ContactsListFragment, viewer);\n  const onSearchStringChanged = (value) => {\n    setSearchString(value);\n    startTransition(() => {\n      refetch({search: value});\n    });\n  };\n  return (\n    <Card dim={true}>\n      <h3>Contacts</h3>\n      <SearchInput\n        value={searchString}\n        onChange={onSearchStringChanged}\n        isPending={isPending}\n      />\n      {data.contacts.map(contact =>\n        <ContactRow key={contact.id} contact={contact} />\n      )}\n    </Card>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: JavaScript: useFragment Hook Example\nDESCRIPTION: This JavaScript code uses `useFragment` hook to extract data from a fragment reference (`queryData?.viewer?.account_user`). It showcases how to access the data defined within a fragment using Relay's `useFragment` hook.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/glossary/glossary.md#2025-04-18_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst fragmentData = useFragment(\n  graphql`fragment Component_name on User { name }`,\n  queryData?.viewer?.account_user,\n);\n```\n\n----------------------------------------\n\nTITLE: Reading Client-Only Data in Relay Fragment\nDESCRIPTION: Illustrates how to read client-only data by selecting it inside a Relay fragment. This example shows querying both client-only and server fields in the same fragment.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/guided-tour/updating-data/client-only-data.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst data = *useFragment*(\n  graphql`\n    fragment CommentComponent_comment on Comment {\n\n      is_new_comment\n\n      body {\n        text\n      }\n    }\n  `,\n  props.user,\n);\n```\n\n----------------------------------------\n\nTITLE: Specifying Connection Identity Filters in Relay\nDESCRIPTION: This snippet demonstrates how to explicitly specify which filters should be used for connection identity using the 'filters' parameter in @connection directive. It shows how to limit which filter arguments are considered part of the connection's identity.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/guided-tour/list-data/updating-connections.md#2025-04-18_snippet_15\n\nLANGUAGE: js\nCODE:\n```\nconst {graphql} = require('relay-runtime');\n\nconst storyFragment = graphql`\n  fragment StoryComponent_story on Story {\n    comments(\n      order_by: $orderBy\n      filter_mode: $filterMode\n      language: $language\n    )\n      @connection(\n        key: \"StoryComponent_story_comments_connection\"\n        filters: [\"order_by\", \"filter_mode\"]\n      ) {\n      edges {\n        nodes {\n          body {\n            text\n          }\n        }\n      }\n    }\n  }\n`;\n```\n\n----------------------------------------\n\nTITLE: Relay Environment Configuration\nDESCRIPTION: Setup of Relay Environment including network configuration and store initialization.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-experimental/RelayHooks-StepByStep.md#2025-04-18_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Environment, Network, RecordSource, Store } from 'relay-runtime';\nimport fetchGraphQL from './fetchGraphQL';\n\nasync function fetchRelay(params, variables) {\n  console.log(`fetching query ${params.name} with ${JSON.stringify(variables)}`);\n  return fetchGraphQL(params.text, variables);\n}\n\nexport default new Environment({\n  network: Network.create(fetchRelay),\n  store: new Store(new RecordSource()),\n});\n```\n\n----------------------------------------\n\nTITLE: Removing Edge from Relay Connection\nDESCRIPTION: This code snippet demonstrates how to remove an edge from a Relay connection using ConnectionHandler.deleteNode within an updater function.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/guided-tour/list-data/updating-connections.md#2025-04-18_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nconst {ConnectionHandler} = require('RelayModern');\n\nfunction updater(store: RecordSourceSelectorProxy) {\n  const storyRecord = store.get(storyID);\n  const connectionRecord = ConnectionHandler.getConnection(\n    storyRecord,\n    'StoryComponent_story_comments_connection',\n  );\n\n  // Remove edge from the connection, given the ID of the node\n  ConnectionHandler.deleteNode(\n    connectionRecord,\n    commentIDToDelete,\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Object Type Mock Resolver for User Object\nDESCRIPTION: Demonstrates how to define mock resolvers for complex Object types like User\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/guides/testing-relay-components.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  // This will be the default values for User object in the query response\n  User() {\n    return {\n      id: 4,\n      name: \"Mark\",\n      profile_picture: {\n        uri: \"http://my-image...\",\n      },\n    };\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Legacy Pagination Container Implementation in React Relay\nDESCRIPTION: Example of a pagination container using the older class-based createPaginationContainer API. Shows implementation of loading states, pagination controls and connection handling with extensive configuration options.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/migration-and-compatibility/relay-hooks-and-legacy-container-apis.md#2025-04-18_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as React from 'React';\nimport {graphql, createPaginationContainer} from 'react-relay';\n\nclass UserContainerComponent extends React.Component {\n  render(): React.Node {\n    const isLoading = this.props.relay.isLoading() || this.state.loading;\n    const hasMore = this.props.relay.hasMore();\n\n    return (\n      <>\n        <FriendsList friends={this.props.user?.friends} />\n        <Button\n          onClick={() => this.loadMore()}\n          disabled={!hasMore || isLoading}>\n          Load More\n          {isLoading && <InlineSpinner />}\n        </Button>\n      </>\n    );\n  }\n\n  loadMore() {\n    if (\n      !this.props.relay.hasMore() ||\n      this.props.relay.isLoading() ||\n      this.state.loading\n    ) {\n      return;\n    }\n\n    this.setState({loading: true});\n\n    this.props.relay.loadMore(5, () => this.setState({loading: false}));\n  }\n}\n\nexport default createPaginationContainer(\n  UserContainerComponent,\n  {\n    user: graphql`\n      fragment UserContainerComponent_user on User\n      @argumentDefinitions(count: {type: \"Int!\"}, cursor: {type: \"ID\"})\n      @refetchable(queryName: \"UserComponentRefetchQuery\") {\n        friends(first: $count, after: $cursor)\n          @connection(key: \"UserComponent_user_friends\") {\n          edges {\n            node {\n              name\n            }\n          }\n        }\n      }\n    `,\n  },\n  {\n    direction: 'forward',\n    getConnectionFromProps(props: Props) {\n      return props.user?.friends;\n    },\n    getFragmentVariables(vars, count) {\n      return {...vars, count};\n    },\n    getVariables(props: Props, {count, cursor}) {\n      return {\n        cursor,\n        count,\n      };\n    },\n    query: graphql`\n      query UserContainerComponentQuery {\n        viewer {\n          actor {\n            ... on User {\n              ...UserContainerComponent_user @arguments(count: 10)\n            }\n          }\n        }\n      }\n    `,\n  },\n);\n```\n\n----------------------------------------\n\nTITLE: Using @refetchable Directive in GraphQL Fragment\nDESCRIPTION: The @refetchable directive modifies a fragment, causing Relay to generate a query for that fragment. This allows for efficient initial loading as part of a larger query and independent refetching.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/glossary/glossary.md#2025-04-18_snippet_8\n\nLANGUAGE: GraphQL\nCODE:\n```\n@refetchable\n```\n\n----------------------------------------\n\nTITLE: Fragment Component Type Emission in TypeScript\nDESCRIPTION: Shows TypeScript type generation for fragment components, demonstrating proper typing of fragment references and component interfaces.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/guides/type-emission.md#2025-04-18_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ExampleFragmentComponent_artist$key } from \"__generated__/ExampleFragmentComponent_artist.graphql\"\n\ninterface Props {\n  artist: ExampleFragmentComponent_artist$key,\n};\n\nexport default ExampleFragmentComponent(props: Props) {\n  const data = useFragment(\n    graphql`\n      fragment ExampleFragmentComponent_artist on Artist {\n        biography\n      }\n    `,\n    props.artist,\n  );\n\n  return <div>About the artist: {props.artist.biography}</div>;\n}\n```\n\n----------------------------------------\n\nTITLE: Subscribing to Data Invalidation Events with useSubscribeToInvalidationState\nDESCRIPTION: Example of using the useSubscribeToInvalidationState hook to respond to invalidation events for specific records. This allows immediate refetching of stale data that's currently visible without requiring navigation.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v13.0.0/guided-tour/reusing-cached-data/staleness-of-data.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nfunction ProfilePage(props) {\n  // Example of querying data for the current page for a given user\n  const data = usePreloadedQuery(\n    graphql`...`,\n    props.preloadedQuery,\n  )\n\n  // Here we subscribe to changes in invalidation state for the given user ID.\n  // Whenever the user with that ID is marked as stale, the provided callback will\n  // be executed\n  useSubscribeToInvalidationState([props.userID], () => {\n    // Here we can do things like:\n    // - re-evaluate the query by passing a new preloadedQuery to usePreloadedQuery.\n    // - imperatively refetch any data\n    // - render a loading spinner or gray out the page to indicate that refetch\n    //   is happening.\n  })\n\n  return (...);\n}\n```\n\n----------------------------------------\n\nTITLE: Refreshing Queries Using fetchQuery to Avoid Suspense\nDESCRIPTION: Shows how to refresh queries without triggering Suspense by using fetchQuery. Implements manual loading state management and ensures data is cached before re-rendering.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/guided-tour/refetching/refreshing-queries.md#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * App.react.js\n */\nimport type {AppQuery as AppQueryType} from 'AppQuery.graphql';\n\nconst AppQuery = require('__generated__/AppQuery.graphql');\n\nfunction App(props: Props) {\n  const variables = {id: '4'}\n  const environment = useRelayEnvironment();\n  const [refreshedQueryOptions, setRefreshedQueryOptions] = useState(null);\n  const [isRefreshing, setIsRefreshing] = useState(false)\n\n  const refresh = useCallback(() => {\n    if (isRefreshing) { return; }\n    setIsRefreshing(true);\n\n    // fetchQuery will fetch the query and write\n    // the data to the Relay store. This will ensure\n    // that when we re-render, the data is already\n    // cached and we don't suspend\n    fetchQuery(environment, AppQuery, variables)\n      .subscribe({\n        complete: () => {\n          setIsRefreshing(false);\n\n          // *After* the query has been fetched, we update\n          // our state to re-render with the new fetchKey\n          // and fetchPolicy.\n          // At this point the data for the query should\n          // be cached, so we use the 'store-only'\n          // fetchPolicy to avoid suspending.\n          setRefreshedQueryOptions(prev => ({\n            fetchKey: (prev?.fetchKey ?? 0) + 1,\n            fetchPolicy: 'store-only',\n          }));\n        }\n        error: () => {\n          setIsRefreshing(false);\n        }\n      });\n  }, [/* ... */]);\n\n  return (\n    <React.Suspense fallback=\"Loading query...\">\n      <MainContent\n        isRefreshing={isRefreshing}\n        refresh={refresh}\n        queryOptions={refreshedQueryOptions ?? {}}\n        variables={variables}\n      />\n    </React.Suspense>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Fetch Policy with useQueryLoader in React Relay\nDESCRIPTION: Demonstrates how to use loadQuery with a specified fetch policy to control data retrieval strategy. Shows setting 'store-or-network' policy when loading a query for a home tab.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/guided-tour/reusing-cached-data/fetch-policies.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst React = require('React');\nconst {graphql} = require('react-relay');\n\nfunction AppTabs() {\n  const [\n    queryRef,\n    loadQuery,\n  ] = useQueryLoader(HomeTabQuery);\n\n  const onSelectHomeTab = () => {\n    loadQuery({id: '4'}, {fetchPolicy: 'store-or-network'});\n  }\n\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Queries with usePreloadedQuery Hook in React\nDESCRIPTION: This code demonstrates how to use the usePreloadedQuery hook to render a GraphQL query in a React component. The component takes a queryRef prop, executes the query, and displays the resulting user data.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v13.0.0/guided-tour/rendering/queries.md#2025-04-18_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport type {HomeTabQuery} from 'HomeTabQuery.graphql';\n\nconst React = require('React');\nconst {graphql, usePreloadedQuery} = require('react-relay');\n\ntype Props = {\n  queryRef: PreloadedQuery<HomeTabQuery>,\n};\n\nfunction HomeTab(props: Props) {\n  const data = usePreloadedQuery<HomeTabQuery>(\n    graphql`\n      query HomeTabQuery($id: ID!) {\n        user(id: $id) {\n          name\n        }\n      }\n    `,\n    props.queryRef,\n  );\n\n  return (\n    <h1>{data.user?.name}</h1>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring GC Scheduler for Relay Store\nDESCRIPTION: This code snippet shows how to provide a custom garbage collection scheduler function for the Relay Store. This function determines when garbage collection execution should be scheduled, allowing for potentially less aggressive scheduling strategies based on time or other heuristics.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/guided-tour/reusing-cached-data/presence-of-data.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// Sample scheduler function\n// Accepts a callback and schedules it to run at some future time.\nfunction gcScheduler(run: () => void) {\n  resolveImmediate(run);\n}\n\nconst store = new Store(source, {gcScheduler});\n```\n\n----------------------------------------\n\nTITLE: Using ConnectionHandler to Manage Comments Connection - Relay - JavaScript\nDESCRIPTION: This snippet shows how to use ConnectionHandler to manage comments connection for a Story record, including retrieving connection records based on different filters for ordering and filtering comments. It also demonstrates inserting a new comment into the connection and conditionally adding it to a friends-only connection.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/guided-tour/list-data/updating-connections.md#2025-04-18_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nconst {ConnectionHandler} = require('RelayModern');\n\nfunction updater(store: RecordSourceSelectorProxy) {\n  const storyRecord = store.get(storyID);\n\n  // Get the connection instance for the connection with comments sorted\n  // by the date they were added\n  const connectionRecordSortedByDate = ConnectionHandler.getConnection(\n    storyRecord,\n    'StoryComponent_story_comments_connection',\n    {order_by: '*DATE_ADDED*', filter_mode: null, language: null}\n  );\n\n  // Get the connection instance for the connection that only contains\n  // comments made by friends\n  const connectionRecordFriendsOnly = ConnectionHandler.getConnection(\n    storyRecord,\n    'StoryComponent_story_comments_connection',\n    {order_by: null, filter_mode: '*FRIENDS_ONLY*', language: null}\n  );\n\n  const newComment = (...);\n  const newEdge = (...);\n\n  ConnectionHandler.insertEdgeAfter(\n    connectionRecordSortedByDate,\n    newEdge,\n  );\n\n  if (isMadeByFriend(storyRecord, newComment)) {\n    // Only add new comment to friends-only connection if the comment\n    // was made by a friend\n    ConnectionHandler.insertEdgeAfter(\n      connectionRecordFriendsOnly,\n      newEdge,\n    );\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Retaining Queries Using environment.retain in Relay\nDESCRIPTION: This snippet demonstrates how to manually retain a query in Relay to prevent garbage collection of referenced data. It shows the process of creating an operation descriptor, retaining the query, and disposing of the retention when no longer needed.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/guided-tour/managing-data-outside-react/retaining-queries.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst {\n  createOperationDescriptor,\n  getRequest,\n  graphql,\n} = require('relay-runtime')\n\n// Query graphql object\nconst query = graphql`...`;\n\n// Construct Relay's internal representation of the query\nconst queryRequest = getRequest(query);\nconst queryDescriptor = createOperationDescriptor(\n  queryRequest,\n  variables\n);\n\n// Retain query; this will prevent the data for this query and\n// variables from being garbage collected by Relay\nconst disposable = environment.retain(queryDescriptor);\n\n// Disposing of the disposable will release the data for this query\n// and variables, meaning that it can be deleted at any moment\n// by Relay's garbage collection if it hasn't been retained elsewhere\ndisposable.dispose();\n```\n\n----------------------------------------\n\nTITLE: Adding altText to Image Fragment in GraphQL\nDESCRIPTION: This snippet shows the modification of the ImageFragment to include an altText field, providing accessibility improvements. By enhancing the Image component with altText, all components utilizing this fragment automatically inherit the alt text feature, demonstrating scalable data dependency management.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/tutorial/fragments-1.md#2025-04-18_snippet_9\n\nLANGUAGE: graphql\nCODE:\n```\nconst ImageFragment = graphql`\n  fragment ImageFragment on Image {\n    url\n    // change-line\n    altText\n  }\n`;\n```\n\n----------------------------------------\n\nTITLE: Initial StoryLikeButton Component\nDESCRIPTION: Basic implementation of the StoryLikeButton component before adding mutation functionality.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/tutorial/mutations-updates.md#2025-04-18_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nfunction StoryLikeButton({story}) {\n  const data = useFragment(StoryLikeButtonFragment, story);\n  function onLikeButtonClicked() {\n    // To be filled in\n  }\n  return (\n    <>\n      <LikeCount count={data.likeCount} />\n      <LikeButton value={data.doesViewerLike} onChange={onLikeButtonClicked} />\n    </>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a GraphQL Fragment for Story Component in Relay\nDESCRIPTION: Creating a StoryFragment to encapsulate the data requirements of the Story component. This fragment specifies all fields needed by the component and will be used with useFragment hook.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/tutorial/fragments-1.md#2025-04-18_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { graphql } from 'relay-runtime';\n\nconst StoryFragment = graphql`\n  fragment StoryFragment on Story {\n    title\n    summary\n    createdAt\n    poster {\n      name\n      profilePicture {\n        url\n      }\n    }\n    thumbnail {\n      url\n    }\n  }\n`;\n```\n\n----------------------------------------\n\nTITLE: Simple Field Resolver Example (TypeScript)\nDESCRIPTION: This TypeScript example defines a resolver for the `name` field on the `User` type. The resolver function `name` accepts a `UserModel` instance as input and returns a string representing the user's name. The `@RelayResolver` docblock associates this function with the `User.name: String` field.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/guides/relay-resolvers/defining-fields.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * @RelayResolver User.name: String\n */\nexport function name(user: UserModel): string {\n  return user.name;\n}\n```\n\n----------------------------------------\n\nTITLE: Refreshing Fragments without Suspense using fetchQuery in React\nDESCRIPTION: This example shows how to refresh fragment data without using Suspense. It uses fetchQuery to manually fetch data and update the Relay store, then calls refetch with a 'store-only' fetchPolicy to avoid suspending.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/guided-tour/refetching/refreshing-fragments.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport type {UserComponent_user$key} from 'UserComponent_user.graphql';\n\ntype Props = {\n  user: UserComponent_user$key,\n};\n\nfunction UserComponent(props: Props) {\n  const [data, refetch] = useRefetchableFragment(\n    graphql`\n      fragment UserComponent_user on User\n      # @refetchable makes it so Relay autogenerates a query for\n      # fetching this fragment\n      @refetchable(queryName: \"UserComponentRefreshQuery\") {\n        id\n        name\n        friends {\n          count\n        }\n      }\n    `,\n    props.user,\n  );\n\n  const [isRefreshing, setIsRefreshing] = useState(false);\n  const refresh = useCallback(() => {\n    if (isRefreshing) { return; }\n    setIsRefreshing(true);\n\n    // fetchQuery will fetch the query and write\n    // the data to the Relay store. This will ensure\n    // that when we re-render, the data is already\n    // cached and we don't suspend\n    fetchQuery(environment, AppQuery, variables)\n      .subscribe({\n        complete: () => {\n          setIsRefreshing(false);\n\n          // *After* the query has been fetched, we call\n          // refetch again to re-render with the updated data.\n          // At this point the data for the query should\n          // be cached, so we use the 'store-only'\n          // fetchPolicy to avoid suspending.\n          refetch({}, {fetchPolicy: 'store-only'});\n        },\n        error: () => {\n          setIsRefreshing(false);\n        }\n      });\n  }, [/* ... */]);\n\n  return (\n    <>\n      <h1>{data.name}</h1>\n      <div>Friends count: {data.friends?.count}</div>\n      <Button\n        disabled={isRefreshing}\n        onClick={() => refresh()}>\n        Fetch latest count {isRefreshing ? <LoadingSpinner /> : null}\n      </Button>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Running Relay Compiler in Watch Mode\nDESCRIPTION: Command to run the Relay compiler in watch mode, which automatically updates generated files as product code is edited. Requires watchman to be installed.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/getting-started/compiler.md#2025-04-18_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nnpm run relay --watch\n```\n\n----------------------------------------\n\nTITLE: Defining and Using a Plural Fragment with @relay Directive\nDESCRIPTION: The `@relay(plural: true)` directive defines that a fragment is intended to represent a list of items, allowing the parent query to handle array data structures efficiently. By using the fragment `TodoItems_items`, Relay facilitates composing UI components that need to iterate over a list of `TodoItem` objects. This example highlights plural fragments' role in processing multiple entries using the `@relay` directive.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/api-reference/graphql/graphql-directives.md#2025-04-18_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// Plural fragment definition\ngraphql`\n  fragment TodoItems_items on TodoItem @relay(plural: true) {\n    id\n    text\n  }\n`;\n\n// Plural fragment usage: note the parent type is a list of items (`TodoItem[]`)\nfragment TodoApp_app on App {\n  items {\n    // parent type is a list here\n    ...TodoItem_items\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Relay Subscription\nDESCRIPTION: This example demonstrates how to test a Relay subscription using a mock environment and the `requestSubscription` API. It defines a function to initiate the subscription and then verifies that the subscription is established and its results are processed correctly by mocking the environment and asserting that the `onNext` callback is triggered.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/guides/testing-relay-components.md#2025-04-18_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\n```js\n// Example subscribe function\nfunction subscribe(environment, onNext, onError, variables)\n  requestSubscription(environment, {\n    subscription: graphql`...`,\n    onNext,\n    onError,\n    variables,\n  });\n}\n\n// Example test may be written like so\ntest('it should subscribe', () => {\n  const environment = createMockEnvironment();\n  const onNext = jest.fn();\n  subscribe(environment, onNext, jest.fn(), {});\n  const operation = environment.mock.getMostRecentOperation();\n\n  act(() => {\n    environment.mock.nextValue(\n      operation,\n      MockPayloadGenerator.generate(operation)\n    );\n  });\n\n  expect(onNext).toBeCalled();\n});\n```\n```\n\n----------------------------------------\n\nTITLE: Defining Nested GraphQL Fragments\nDESCRIPTION: This snippet demonstrates how to define GraphQL fragments that include other fragments, creating a nested structure of reusable data units.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/guided-tour/rendering/fragments.md#2025-04-18_snippet_4\n\nLANGUAGE: graphql\nCODE:\n```\nfragment UserFragment on User {\n  name\n  age\n  profile_picture(scale: 2) {\n    uri\n  }\n  ...AnotherUserFragment\n}\n\nfragment AnotherUserFragment on User {\n  username\n  ...FooUserFragment\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Refetchable Directive to Fragment\nDESCRIPTION: Making the fragment refetchable by adding the @refetchable directive with a queryName\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/tutorial/connections-pagination.md#2025-04-18_snippet_4\n\nLANGUAGE: graphql\nCODE:\n```\nconst StoryCommentsSectionFragment = graphql`\n  fragment StoryCommentsSectionFragment on Story\n    @refetchable(queryName: \"StoryCommentsSectionPaginationQuery\")\n    @argumentDefinitions(\n    ... as before\n`;\n```\n\n----------------------------------------\n\nTITLE: Mutation with @appendEdge Directive\nDESCRIPTION: Example showing how to use the @appendEdge directive to add new edges to a connection in a mutation.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/guided-tour/list-data/updating-connections.md#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\ncommitMutation<AppendCommentMutation>(environment, {\n  mutation: graphql`\n    mutation AppendCommentMutation(\n      # Define a GraphQL variable for the connections array\n      $connections: [ID!]!\n      $input: CommentCreateInput\n    ) {\n      commentCreate(input: $input) {\n        # Use @appendEdge or @prependEdge on the edge field\n        feedbackCommentEdge @appendEdge(connections: $connections) {\n          cursor\n          node {\n            id\n          }\n        }\n      }\n    }\n  `,\n  variables: {\n    input,\n    // Pass the `connections` array\n    connections: [connectionID],\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Loading Query Data Using usePreloadedQuery in React Relay\nDESCRIPTION: This code snippet demonstrates how to use the usePreloadedQuery hook to fetch and display user information from a Relay store, utilizing the useQueryLoader hook to handle query loading. The initial query reference is provided as a prop, enabling the loading of new query data with a button click.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v13.0.0/api-reference/hooks/use-preloaded-query.md#2025-04-18_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport type {AppQuery as AppQueryType} from 'AppQuery.graphql';\n\nconst React = require('React');\n\nconst {graphql, useQueryLoader, usePreloadedQuery} = require('react-relay');\n\nconst AppQuery = graphql`\n  query AppQuery($id: ID!) {\n    user(id: $id) {\n      name\n    }\n  }\n`;\n\ntype Props = {\n  initialQueryRef: PreloadedQuery<AppQueryType>,\n};\n\nfunction NameLoader(props) {\n  const [queryReference, loadQuery] = useQueryLoader(\n    AppQuery,\n    props.initialQueryRef, /* e.g. provided by router */\n  );\n\n  return (<>\n    <Button\n      onClick={() => loadQuery({id: '4'})}\n      disabled={queryReference != null}\n    >\n      Reveal your name!\n    </Button>\n    <Suspense fallback=\"Loading...\">\n      {queryReference != null\n        ? <NameDisplay queryReference={queryReference} />\n        : null\n      }\n    </Suspense>\n  </>);\n}\n\nfunction NameDisplay({ queryReference }) {\n  const data = usePreloadedQuery<AppQueryType>(AppQuery, queryReference);\n\n  return <h1>{data.user?.name}</h1>;\n}\n\n```\n\n----------------------------------------\n\nTITLE: Using hasNext for Conditional Rendering in Relay Pagination\nDESCRIPTION: This snippet shows how to use the hasNext boolean from usePaginationFragment to conditionally render a 'Load more' button based on whether there are more items available in the connection.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/guided-tour/list-data/pagination.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport type {FriendsListPaginationQuery} from 'FriendsListPaginationQuery.graphql';\nimport type {FriendsListComponent_user$key} from 'FriendsList_user.graphql';\n\nconst React = require('React');\nconst {Suspense} = require('React');\n\nconst {graphql, usePaginationFragment} = require('react-relay');\n\ntype Props = {\n  user: FriendsListComponent_user$key,\n};\n\nfunction FriendsListComponent(props: Props) {\n  // ...\n  const {\n    data,\n    loadNext,\n    hasNext,\n  } = usePaginationFragment(\n    graphql`...`,\n    props.user,\n  );\n\n  return (\n    <>\n      <h1>Friends of {data.name}:</h1>\n      {/* ... */}\n\n      {/* Only render button if there are more friends to load in the list */}\n      {hasNext ? (\n        <Button\n          onClick={/* ... */}>\n          Load more friends\n        </Button>\n      ) : null}\n    </>\n  );\n}\n\nmodule.exports = FriendsListComponent;\n```\n\n----------------------------------------\n\nTITLE: Managing Subscriptions with useSubscription Hook in React Relay\nDESCRIPTION: Demonstrates using the useSubscription hook to handle GraphQL subscriptions in a React component. Shows proper configuration memoization to prevent unnecessary re-renders.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-experimental/RelayHooks-ApiReference.md#2025-04-18_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nimport {graphql, useSubscription} from 'RelayHooks';\nimport {useMemo} from 'react';\n\nconst subscription = graphql`subscription ...`;\nfunction MyFunctionalComponent({ id }) {\n  // IMPORTANT: your config should be memoized, or at least not re-computed\n  // every render. Otherwise, useSubscription will re-render too frequently.\n  const config = useMemo(() => { variables: { id }, subscription }, [id]);\n  useSubscription(config);\n  return (\n    <div>Move Fast</div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Resolver Field with JS and GraphQL Arguments\nDESCRIPTION: A Relay resolver function that combines JavaScript and GraphQL arguments, using a fragment to access type-specific data and resolving a string output\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/guides/relay-resolvers.md#2025-04-18_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n* @RelayResolver MyType.my_resolver_field(my_js_arg: String!): String\n* @rootFragment myResolverFragment\n*/\nexport function my_resolver_field(\n   fragmentKey: myResolverFragment$key,\n   args: {\n      my_js_arg: string\n   },\n): ?string {\n   const data = readFragment(graphql`\n       fragment myResolverFragment on MyType\n            @argumentDefinitions(my_gql_arg: {type: \"Float!\"}) {\n            field_with_arg(arg: $my_arg) {\n               __typename\n            }\n       }\n   `, fragmentKey);\n\n   return `Hello ${args.my_js_arg}, ${data.field_with_arg.__typename}`;\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Mutation Integration\nDESCRIPTION: Enhanced StoryLikeButton component with mutation integration using useMutation hook.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/tutorial/mutations-updates.md#2025-04-18_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport {useMutation, useFragment} from 'react-relay';\n\nfunction StoryLikeButton({story}) {\n  const data = useFragment(StoryLikeButtonFragment, story);\n  const [commitMutation, isMutationInFlight] = useMutation(StoryLikeButtonLikeMutation);\n  function onLikeButtonClicked() {\n    commitMutation({\n      variables: {\n        id: data.id,\n        doesLike: !data.doesViewerLike,\n      },\n    })\n  }\n  return (\n    <>\n      <LikeCount count={data.likeCount} />\n      <LikeButton value={data.doesViewerLike} onChange={onLikeButtonClicked} />\n    </>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Creating or Retrieving Linked Record in Relay Store\nDESCRIPTION: Example of creating or retrieving a linked record in the Relay Store using the getOrCreateLinkedRecord method of RecordProxy. It creates the record if it doesn't exist.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/api-reference/relay-runtime/store.md#2025-04-18_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nconst rootField = store.getRootField('rootField');\nconst newViewer = rootField.getOrCreateLinkedRecord('viewer', 'User'); // Will create if it doesn't exist\n```\n\n----------------------------------------\n\nTITLE: Refreshing Queries Without Suspense Using fetchQuery in Relay\nDESCRIPTION: Technique for refreshing queries while avoiding Suspense fallbacks that would hide already rendered content. Uses fetchQuery and manual loading state tracking to first fetch data to the store, then loads the query with store-only fetchPolicy.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v13.0.0/guided-tour/refetching/refreshing-queries.md#2025-04-18_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n/**\n * App.react.js\n */\nimport type {AppQuery as AppQueryType} from 'AppQuery.graphql';\n\nconst AppQuery = require('__generated__/AppQuery.graphql');\n\nfunction App(props: Props) {\n  const environment = useRelayEnvironment();\n  const [queryRef, loadQuery] = useQueryLoader<AppQueryType>(\n    AppQuery,\n    props.appQueryRef /* initial query ref */\n  );\n  const [isRefreshing, setIsRefreshing] = useState(false)\n\n  const refresh = useCallback(() => {\n    if (isRefreshing) { return; }\n    const {variables} = props.appQueryRef;\n    setIsRefreshing(true);\n\n    // fetchQuery will fetch the query and write\n    // the data to the Relay store. This will ensure\n    // that when we re-render, the data is already\n    // cached and we don't suspend\n    fetchQuery(environment, AppQuery, variables)\n      .subscribe({\n        complete: () => {\n          setIsRefreshing(false);\n\n          // *After* the query has been fetched, we call\n          // loadQuery again to re-render with a new\n          // queryRef.\n          // At this point the data for the query should\n          // be cached, so we use the 'store-only'\n          // fetchPolicy to avoid suspending.\n          loadQuery(variables, {fetchPolicy: 'store-only'});\n        }\n        error: () => {\n          setIsRefreshing(false);\n        }\n      });\n  }, [/* ... */]);\n\n  return (\n    <React.Suspense fallback=\"Loading query...\">\n      <MainContent\n        isRefreshing={isRefreshing}\n        refresh={refresh}\n        queryRef={queryRef}\n      />\n    </React.Suspense>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing useSubscription Hook for Feedback Likes\nDESCRIPTION: A custom React hook that implements the useSubscription API to create a GraphQL subscription. It properly memoizes the subscription config to prevent unnecessary resubscription and includes proper type definitions.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/guided-tour/updating-data/graphql-subscriptions.md#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport type {Environment} from 'react-relay';\nimport type {FeedbackLikeSubscribeData} from 'FeedbackLikeSubscription.graphql';\n\nconst {graphql, useSubscription} = require('react-relay');\nconst {useMemo} = require('React');\n\nfunction useFeedbackSubscription(\n  input: FeedbackLikeSubscribeData,\n) {\n  const config = useMemo(() => ({\n    subscription: graphql`\n      subscription FeedbackLikeSubscription(\n        $input: FeedbackLikeSubscribeData!\n      ) {\n        feedback_like_subscribe(data: $input) {\n          feedback {\n            like_count\n          }\n        }\n      }\n    `,\n    variables: {input},\n  }), [input]);\n\n  return useSubscription(config);\n}\n```\n\n----------------------------------------\n\nTITLE: Paginating Multiple Connections with usePaginationFragment in React and Relay\nDESCRIPTION: Demonstrates how to paginate over multiple connections within the same component using usePaginationFragment multiple times. It includes fragments for both user and viewer data, each with their own connection.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/guided-tour/list-data/advanced-pagination.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport type {CombinedFriendsListComponent_user$key} from 'CombinedFriendsListComponent_user.graphql';\nimport type {CombinedFriendsListComponent_viewer$key} from 'CombinedFriendsListComponent_viewer.graphql';\n\nconst React = require('React');\n\nconst {graphql, usePaginationFragment} = require('react-relay');\n\ntype Props = {\n  user: CombinedFriendsListComponent_user$key,\n  viewer: CombinedFriendsListComponent_viewer$key,\n};\n\nfunction CombinedFriendsListComponent(props: Props) {\n\n  const {data: userData, ...userPagination} = usePaginationFragment(\n    graphql`\n      fragment CombinedFriendsListComponent_user on User {\n        name\n        friends\n          @connection(\n            key: \"CombinedFriendsListComponent_user_friends_connection\"\n          ) {\n          edges {\n            node {\n              name\n              age\n            }\n          }\n        }\n      }\n    `,\n    props.user,\n  );\n\n  const {data: viewerData, ...viewerPagination} = usePaginationFragment(\n    graphql`\n      fragment CombinedFriendsListComponent_viewer on Viewer {\n        actor {\n          ... on User {\n            name\n            friends\n              @connection(\n                key: \"CombinedFriendsListComponent_viewer_friends_connection\"\n              ) {\n              edges {\n                node {\n                  name\n                  age\n                }\n              }\n            }\n          }\n        }\n      }\n    `,\n    props.viewer,\n  );\n\n  return (...);\n}\n```\n\n----------------------------------------\n\nTITLE: Using loadQuery with React Relay\nDESCRIPTION: Demonstrates how to use loadQuery to fetch data for a GraphQL query. Shows setup of environment, query definition, and query execution. Note that this example requires proper disposal of query references to prevent memory leaks.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v13.0.0/api-reference/hooks/load-query.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst MyEnvironment = require('MyEnvironment');\nconst {loadQuery} = require('react-relay');\n\nconst query = graphql`\n  query AppQuery($id: ID!) {\n    user(id: $id) {\n      name\n    }\n  }\n`;\n\n// Note: you should generally not call loadQuery at the top level.\n// Instead, it should be called in response to an event (such a route navigation,\n// click, etc.).\nconst queryReference = loadQuery(\n  MyEnvironment,\n  query,\n  {id: '4'},\n  {fetchPolicy: 'store-or-network'},\n);\n\n// later: pass queryReference to usePreloadedQuery()\n// Note that query reference should have .dispose() called on them,\n// which is missing in this example.\n```\n\n----------------------------------------\n\nTITLE: Using @appendEdge Directive to Add Edges to Connections in Relay\nDESCRIPTION: This snippet demonstrates how to use the @appendEdge declarative mutation directive to add newly created edges to specified connections. It shows obtaining connection IDs and using them in a mutation.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/guided-tour/list-data/updating-connections.md#2025-04-18_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n// Get the connection ID using the `__id` field\nconst connectionID = fragmentData?.comments?.__id;\n\n// Or get it using `ConnectionHandler.getConnectionID()`\nconst connectionID = ConnectionHandler.getConnectionID(\n  '<story-id>',\n  'StoryComponent_story_comments_connection',\n);\n\n// ...\n\n// Mutation\ncommitMutation<AppendCommentMutation>(environment, {\n  mutation: graphql`\n    mutation AppendCommentMutation(\n      # Define a GraphQL variable for the connections array\n      $connections: [ID!]!\n      $input: CommentCreateInput\n    ) {\n      commentCreate(input: $input) {\n        # Use @appendEdge or @prependEdge on the edge field\n        feedbackCommentEdge @appendEdge(connections: $connections) {\n          cursor\n          node {\n            id\n          }\n        }\n      }\n    }\n  `,\n  variables: {\n    input,\n    // Pass the `connections` array\n    connections: [connectionID],\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Accessing Root Query in Relay Store\nDESCRIPTION: Example of accessing the root query in the Relay Store using the getRoot method of RecordSourceSelectorProxy. It returns a RecordProxy representing the root of the GraphQL document.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/api-reference/relay-runtime/store.md#2025-04-18_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst root = store.getRoot();\n```\n\n----------------------------------------\n\nTITLE: Adding React Keys to List Items\nDESCRIPTION: This snippet shows how to add proper React keys to list items when rendering an array of components. It modifies both the GraphQL query to fetch the 'id' field and the React component to use it as a key.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/tutorial/arrays-lists.md#2025-04-18_snippet_3\n\nLANGUAGE: graphql\nCODE:\n```\nconst NewsfeedQuery = graphql`\n  query NewsfeedQuery {\n    topStories {\n      id\n      ...StoryFragment\n    }\n  }\n`;\n```\n\nLANGUAGE: tsx\nCODE:\n```\nexport default function Newsfeed({}) {\n  const data = useLazyLoadQuery<NewsfeedQueryType>(NewsfeedQuery, {});\n  const stories = data.topStories;\n  return (\n    <div className=\"newsfeed\">\n      {stories.map(story => (\n        <Story\n          key={story.id}\n          story={story}\n        />\n      ))}\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Basic GraphQL Mutation Structure\nDESCRIPTION: Example of a GraphQL mutation to like a feedback item. This mutation uses the 'mutation' keyword, accepts input variables, and requests updated data in the response.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/guided-tour/updating-data/graphql-mutations.md#2025-04-18_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nmutation FeedbackLikeMutation($input: FeedbackLikeData!) {\n  feedback_like(data: $input) {\n    feedback {\n      id\n      viewer_does_like\n      like_count\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Refetchable Fragment in ContactsList\nDESCRIPTION: Final implementation using useRefetchableFragment hook to enable dynamic data fetching based on search input.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/tutorial/refetchable-fragments.md#2025-04-18_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport {useRefetchableFragment} from 'react-relay';\n\nfunction ContactsList({viewer}) {\n  const [data, refetch] = useRefetchableFragment(ContactsListFragment, viewer);\n  const [searchString, setSearchString] = useState('');\n  const onSearchStringChanged = (value) => {\n    setSearchString(value);\n    refetch({search: value});\n  };\n  return (\n    // ...\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Babel to use the Relay plugin\nDESCRIPTION: This snippet demonstrates how to configure Babel to use the `relay` plugin. This plugin is essential for transforming GraphQL template literals into Relay runtime artifacts during the build process. Ensure the plugin is added to your `.babelrc` or babel configuration file.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/getting-started/installation-and-setup.md#2025-04-18_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"plugins\": [\n    \"relay\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Defining FeedbackLikeSubscription with GraphQL\nDESCRIPTION: This GraphQL subscription snippet describes how to define a subscription for tracking the `FeedbackLike` event. The subscription listens for changes in the `like_count` of feedback in real-time, providing a mechanism to react to data modifications dynamically. The `input` parameter supplies necessary dynamic values for the subscription execution.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/glossary/glossary.md#2025-04-18_snippet_8\n\nLANGUAGE: GraphQL\nCODE:\n```\nsubscription FeedbackLikeSubscription($input: FeedbackLikeSubscribeData!) {\n  feedback_like_subscribe(data: $input) {\n    feedback {\n      id\n      like_count\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Nested GraphQL Fragments\nDESCRIPTION: This snippet demonstrates how to compose GraphQL fragments, including one fragment within another. It shows the structure for defining reusable units of data fetching in GraphQL.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/guided-tour/rendering/fragments.md#2025-04-18_snippet_4\n\nLANGUAGE: graphql\nCODE:\n```\nfragment UserFragment on User {\n  name\n  age\n  profile_picture(scale: 2) {\n    uri\n  }\n  ...AnotherUserFragment\n}\n\nfragment AnotherUserFragment on User {\n  username\n  ...FooUserFragment\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Record\nDESCRIPTION: Demonstrates how to create a new record in the store using the `create` method of the `RecordSourceSelectorProxy`.  It requires a `dataID` (string) and a `typeName` (string) that corresponds to the GraphQL schema.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v13.0.0/api-reference/relay-runtime/store.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst record = store.create(dataID, 'Todo');\n```\n\n----------------------------------------\n\nTITLE: Querying for New Edge in GraphQL Mutation\nDESCRIPTION: This snippet demonstrates how to query for a newly created edge in a GraphQL mutation response. It includes the cursor and node data for the new comment edge.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/guided-tour/list-data/updating-connections.md#2025-04-18_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst {graphql} = require('react-relay');\n\nconst createCommentMutation = graphql`\n  mutation CreateCommentMutation($input: CommentCreateData!) {\n    comment_create(input: $input) {\n      comment_edge {\n        cursor\n        node {\n          body {\n            text\n          }\n        }\n      }\n    }\n  }\n`;\n```\n\n----------------------------------------\n\nTITLE: Granular Loading UI with Suspense\nDESCRIPTION: This example illustrates how to use multiple Suspense boundaries to control loading states for different parts of the UI independently. `LeftColumn` has its own loading indicator (`LeftColumnPlaceholder`), while `MainContent` and `SecondaryContent` share a common loading indicator (`LoadingGlimmer`).\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/guided-tour/rendering/loading-states.md#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * App.react.js\n */\n\nconst React = require('React');\nconst {Suspense} = require('React');\n\nfunction App() {\n  return (\n    <>\n      {/* Show a separate loading UI for the LeftHandColumn */}\n      <Suspense fallback={<LeftColumnPlaceholder />}>\n        <LeftColumn />\n      </Suspense>\n\n      {/* Show a separate loading UI for both the Main and Secondary content */}\n      <Suspense fallback={<LoadingGlimmer />}>\n        <MainContent />\n        <SecondaryContent />\n      </Suspense>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: GraphQL Schema Definition\nDESCRIPTION: Example schema definition showing the structure of a GraphQL API including types and fields.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/guides/compiler.md#2025-04-18_snippet_2\n\nLANGUAGE: graphql\nCODE:\n```\nschema {\n  query: Root\n}\n\ntype Root {\n  dictionary: [Word]\n}\n\ntype Word {\n  id: String!\n  definition: WordDefinition\n}\n\ntype WordDefinition {\n  text: String\n  image: String\n}\n```\n\n----------------------------------------\n\nTITLE: Return Object Properties - JavaScript\nDESCRIPTION: This snippet describes the properties contained within the object returned from the Relay pagination fragment, detailing their types and functionalities. This includes boolean flags for loading states, functions for pagination, and a refetch method with detailed arguments and return values.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/api-reference/hooks/use-pagination-fragment.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nObject containing the following properties:\n\n* `data`: Object that contains data which has been read out from the Relay store; the object matches the shape of specified fragment.\n    * The Flow type for data will also match this shape, and contain types derived from the GraphQL Schema.\n* `isLoadingNext`: Boolean value which indicates if a pagination request for the *next* items in the connection is currently in flight, including any incremental data payloads.\n* `isLoadingPrevious`: Boolean value which indicates if a pagination request for the *previous* items in the connection is currently in flight, including any incremental data payloads.\n* `hasNext`: Boolean value which indicates if the end of the connection has been reached in the \"forward\" direction. It will be true if there are more items to query for available in that direction, or false otherwise.\n* `hasPrevious`: Boolean value which indicates if the end of the connection has been reached in the \"backward\" direction. It will be true if there are more items to query for available in that direction, or false otherwise.\n* `loadNext`: Function used to fetch more items in the connection in the \"forward\" direction.\n    * Arguments:\n        * `count`*:* Number that indicates how many items to query for in the pagination request.\n        * `options`: *_[Optional]_* options object\n            * `onComplete`: Function that will be called whenever the refetch request has completed, including any incremental data payloads. If an error occurs during the request, `onComplete` will be called with an `Error` object as the first parameter.\n    * Return Value:\n        * `disposable`: Object containing a `dispose` function. Calling `disposable.dispose()` will cancel the pagination request.\n    * Behavior:\n        * Calling `loadNext`  *will not* cause the component to suspend. Instead, the `isLoadingNext` value will be set to true while the request is in flight, and the new items from the pagination request will be added to the connection, causing the component to re-render.\n        * Pagination requests initiated from calling `loadNext` will *always* use the same variables that were originally used to fetch the connection, *except* pagination variables (which need to change in order to perform pagination); changing variables other than the pagination variables during pagination doesn't make sense, since that'd mean we'd be querying for a different connection.\n* `loadPrevious`: Function used to fetch more items in the connection in the \"backward\" direction.\n    * Arguments:\n        * `count`*:* Number that indicates how many items to query for in the pagination request.\n        * `options`: *_[Optional]_* options object\n            * `onComplete`: Function that will be called whenever the refetch request has completed, including any incremental data payloads. If an error occurs during the request, `onComplete` will be called with an `Error` object as the first parameter.\n    * Return Value:\n        * `disposable`: Object containing a `dispose` function. Calling `disposable.dispose()` will cancel the pagination request.\n    * Behavior:\n        * Calling `loadPrevious`  *will not* cause the component to suspend. Instead, the `isLoadingPrevious` value will be set to true while the request is in flight, and the new items from the pagination request will be added to the connection, causing the component to re-render.\n        * Pagination requests initiated from calling `loadPrevious` will *always* use the same variables that were originally used to fetch the connection, *except* pagination variables (which need to change in order to perform pagination); changing variables other than the pagination variables during pagination doesn't make sense, since that'd mean we'd be querying for a different connection.\n* `refetch`: Function used to refetch the connection fragment with a potentially new set of variables.\n    * Arguments:\n        * `variables`: Object containing the new set of variable values to be used to fetch the `@refetchable` query.\n            * These variables need to match GraphQL variables referenced inside the fragment.\n            * However, only the variables that are intended to change for the refetch request need to be specified; any variables referenced by the fragment that are omitted from this input will fall back to using the value specified in the original parent query. So for example, to refetch the fragment with the exact same variables as it was originally fetched, you can call `refetch({})`.\n            * Similarly, passing an `id` value for the `$id` variable is _*optional*_, unless the fragment wants to be refetched with a different `id`. When refetching a `@refetchable` fragment, Relay will already know the id of the rendered object.\n        * `options`: *_[Optional]_* options object\n            * `fetchPolicy`: Determines if cached data should be used, and when to send a network request based on cached data that is available. See the [Fetch Policies](../../guided-tour/reusing-cached-data/fetch-policies/) section for full specification.\n            * `onComplete`: Function that will be called whenever the refetch request has completed, including any incremental data payloads.\n    * Return value:\n        * `disposable`: Object containing a `dispose` function. Calling `disposable.dispose()` will cancel the refetch request.\n    * Behavior:\n        * Calling `refetch` with a new set of variables will fetch the fragment again *with the newly provided variables*. Note that the variables you need to provide are only the ones referenced inside the fragment. In this example, it means fetching the translated body of the currently rendered Comment, by passing a new value to the `lang` variable.\n        * Calling `refetch` will re-render your component and may cause it to *[suspend](../../guided-tour/rendering/loading-states)*, depending on the specified `fetchPolicy` and whether cached data is available or if it needs to send and wait for a network request. If refetch causes the component to suspend, you'll need to make sure that there's a `Suspense` boundary wrapping this component.\n        * For more details on Suspense, see our [Loading States with Suspense](../../guided-tour/rendering/loading-states/) guide.\n```\n\n----------------------------------------\n\nTITLE: Fetching a Query with fetchQuery in JavaScript\nDESCRIPTION: Demonstrates how to use fetchQuery to execute a GraphQL query outside of React. It shows setting up the environment, defining the query, and subscribing to the results.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/api-reference/relay-runtime/fetch-query.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// You should prefer passing an environment that was returned from useRelayEnvironment()\nconst MyEnvironment = require('MyEnvironment');\nconst {fetchQuery} = require('react-relay');\n\nfetchQuery(\n  environment,\n  graphql`\n    query AppQuery($id: ID!) {\n      user(id: $id) {\n        name\n      }\n    }\n  `,\n  {id: 4},\n)\n.subscribe({\n  start: () => {...},\n  complete: () => {...},\n  error: (error) => {...},\n  next: (data) => {...}\n});\n```\n\n----------------------------------------\n\nTITLE: Updating Story Component with Like Button in TypeScript and GraphQL\nDESCRIPTION: This snippet shows how to modify the Story component to include a Like button. It imports the StoryLikeButton component, updates the GraphQL fragment to include the button's fragment, and adds the button to the component's JSX.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/tutorial/mutations-updates.md#2025-04-18_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n// change-line\nimport StoryLikeButton from './StoryLikeButton';\n\n...\n\nconst StoryFragment = graphql`\n  fragment StoryFragment on Story {\n    title\n    summary\n    // ... etc\n    // change-line\n    ...StoryLikeButtonFragment\n  }\n`;\n\n...\n\nexport default function Story({story}: Props) {\n  const data = useFragment(StoryFragment, story);\n  return (\n    <Card>\n      <PosterByline person={data.poster} />\n      <Heading>{data.title}</Heading>\n      <Timestamp time={data.posterAt} />\n      <Image image={story.thumbnail} width={400} height={400} />\n      <StorySummary summary={data.summary} />\n      // change-line\n      <StoryLikeButton story={data} />\n      <StoryCommentsSection story={data} />\n    </Card>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Relay Environment with useRelayEnvironment - React - JavaScript\nDESCRIPTION: The useRelayEnvironment hook is used within React components to access the Relay environment set by a RelayEnvironmentProvider. The hook returns the current environment, which can then be utilized to commit mutations or interact with Relay features. Ensure that the component is wrapped within a RelayEnvironmentProvider to properly access the context.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/api-reference/hooks/use-relay-environment.md#2025-04-18_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst React = require('React');\n\nconst {useRelayEnvironment} = require('react-relay');\n\nfunction MyComponent() {\n  const environment = useRelayEnvironment();\n\n  const handler = useCallback(() => {\n    // For example, can be used to pass the environment to functions\n    // that require a Relay environment.\n    commitMutation(environment, ...);\n  }, [environment])\n\n  return (...);\n}\n\nmodule.exports = MyComponent;\n```\n\n----------------------------------------\n\nTITLE: Refetching Fragments without Suspense in React and Relay\nDESCRIPTION: This snippet shows how to refetch fragments without triggering Suspense. It uses fetchQuery to manually fetch data and update the Relay store, then calls refetch with a 'store-only' fetchPolicy to avoid suspending.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/guided-tour/refetching/refetching-fragments-with-different-data.md#2025-04-18_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport type {CommentBody_comment$key} from 'CommentBody_comment.graphql';\n\ntype Props = {\n  comment: CommentBody_comment$key,\n};\n\nfunction CommentBody(props: Props) {\n  const [data, refetch] = useRefetchableFragment(\n    graphql`\n      fragment CommentBody_comment on Comment\n      # @refetchable makes it so Relay autogenerates a query for\n      # fetching this fragment\n      @refetchable(queryName: \"CommentBodyRefetchQuery\") {\n        body(lang: $lang) {\n          text\n        }\n      }\n    `,\n    props.comment,\n  );\n\n  const [isRefetching, setIsRefreshing] = useState(false)\n  const refetchTranslation = () => {\n    if (isRefetching) { return; }\n    setIsRefreshing(true);\n\n    // fetchQuery will fetch the query and write\n    // the data to the Relay store. This will ensure\n    // that when we re-render, the data is already\n    // cached and we don't suspend\n    fetchQuery(environment, AppQuery, variables)\n      .subscribe({\n        complete: () => {\n          setIsRefreshing(false);\n\n          // *After* the query has been fetched, we call\n          // refetch again to re-render with the updated data.\n          // At this point the data for the query should\n          // be cached, so we use the 'store-only'\n          // fetchPolicy to avoid suspending.\n          refetch({lang: 'SPANISH'}, {fetchPolicy: 'store-only'});\n        },\n        error: () => {\n          setIsRefreshing(false);\n        }\n      });\n  };\n\n  return (\n    <>\n      <p>{data.body?.text}</p>\n      <Button\n        disabled={isRefetching}\n        onClick={() => refetchTranslation()}>\n        Translate Comment {isRefetching ? <LoadingSpinner /> : null}\n      </Button>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Mutation Response Example in JSON\nDESCRIPTION: Sample JSON response from a successful like mutation, showing the updated feedback object with new like status and count.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/guided-tour/updating-data/graphql-mutations.md#2025-04-18_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"feedback_like\": {\n    \"feedback\": {\n      \"id\": \"feedback-id\",\n      \"viewer_does_like\": true,\n      \"like_count\": 1,\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Actor Details with Type-Specific Information in React\nDESCRIPTION: This React component uses the fragment data to render actor details, including type-specific information for Person and Organization.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/tutorial/interfaces-polymorphism.md#2025-04-18_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport OrganizationKind from './OrganizationKind';\n\nfunction PosterDetailsHovercardContentsBody({ poster }: Props): React.ReactElement {\n  const data = useFragment(PosterDetailsHovercardContentsBodyFragment, poster);\n  return (\n    <>\n      <Image image={data.profilePicture} width={128} height={128} className=\"posterHovercard__image\" />\n      <div className=\"posterHovercard__name\">{data.name}</div>\n      <ul className=\"posterHovercard__details\">\n         <li>Joined <Timestamp time={poster.joined} /></li>\n         {data.location != null && (\n           <li>{data.location.name}</li>\n         )}\n        {data.organizationKind != null && (\n          <li><OrganizationKind kind={data.organizationKind} /></li>\n         )}\n      </ul>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Returning Client-defined GraphQL Types in Relay Resolver (TypeScript)\nDESCRIPTION: Illustrates how to return a client-defined GraphQL type (User) from a Relay Resolver. For 'strong' types, the function returns an object with an ID.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/guides/relay-resolvers/return-types.md#2025-04-18_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport {DataID} from 'relay-runtime';\n/**\n * @RelayResolver Post.author: User\n */\nexport function author(post: PostModel): { id: DataID } {\n  return { id: post.authorId };\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting a Node from Connection in JavaScript\nDESCRIPTION: Example showing how to delete edges from a connection using ConnectionHandler.deleteNode. This removes all edges whose node ID matches the specified ID.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v13.0.0/api-reference/relay-runtime/store.md#2025-04-18_snippet_45\n\nLANGUAGE: javascript\nCODE:\n```\nconst user = store.get(userID);\nconst friends = ConnectionHandler.getConnection(user, 'FriendsFragment_friends');\nConnectionHandler.deleteNode(friends, idToDelete);\n```\n\n----------------------------------------\n\nTITLE: Defining an Error Boundary Component in React\nDESCRIPTION: This code snippet defines a basic Error Boundary component that catches rendering errors and updates the state accordingly. It uses the static method getDerivedStateFromError to derive state from a caught error before rendering.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/guided-tour/rendering/error-states.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst React = require('React');\n\ntype State = {error: ?Error};\n\nclass ErrorBoundary extends React.Component<Props, State> {\n  static getDerivedStateFromError(error): State {\n    // Set some state derived from the caught error\n    return {error: error};\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Refreshing Data without Suspense in Relay\nDESCRIPTION: This snippet shows how to refresh fragment data without triggering Suspense, using fetchQuery to pre-load data and then updating the UI with a custom loading state indicator.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/guided-tour/refetching/refreshing-fragments.md#2025-04-18_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport type {UserComponent_user$key} from 'UserComponent_user.graphql';\n\ntype Props = {\n  user: UserComponent_user$key,\n};\n\nfunction UserComponent(props: Props) {\n  const [data, refetch] = useRefetchableFragment(\n    graphql`\n      fragment UserComponent_user on User\n      # @refetchable makes it so Relay autogenerates a query for\n      # fetching this fragment\n      @refetchable(queryName: \"UserComponentRefreshQuery\") {\n        id\n        name\n        friends {\n          count\n        }\n      }\n    `,\n    props.user,\n  );\n\n  const [isRefreshing, setIsRefreshing] = useState(false);\n  const refresh = useCallback(() => {\n    if (isRefreshing) { return; }\n    setIsRefreshing(true);\n\n    // fetchQuery will fetch the query and write\n    // the data to the Relay store. This will ensure\n    // that when we re-render, the data is already\n    // cached and we don't suspend\n    fetchQuery(environment, AppQuery, variables)\n      .subscribe({\n        complete: () => {\n          setIsRefreshing(false);\n\n          // *After* the query has been fetched, we call\n          // refetch again to re-render with the updated data.\n          // At this point the data for the query should\n          // be cached, so we use the 'store-only'\n          // fetchPolicy to avoid suspending.\n          refetch({}, {fetchPolicy: 'store-only'});\n        },\n        error: () => {\n          setIsRefreshing(false);\n        }\n      });\n  }, [/* ... */]);\n\n  return (\n    <>\n      <h1>{data.name}</h1>\n      <div>Friends count: {data.friends?.count}</div>\n      <Button\n        disabled={isRefreshing}\n        onClick={() => refresh()}>\n        Fetch latest count {isRefreshing ? <LoadingSpinner /> : null}\n      </Button>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Converting Lazy Query to Preloaded Query Component\nDESCRIPTION: Shows the transformation of a component from using useLazyLoadQuery to usePreloadedQuery for better performance.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/tutorial/queries-2.md#2025-04-18_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nimport {usePreloadedQuery} from 'react-relay';\nimport type {PreloadedQuery} from 'react-relay';\nimport type {PosterDetailsHovercardContentsQuery as QueryType} from './__generated__/PosterDetailsHovercardContentsQuery.graphql';\n\nexport default function PosterDetailsHovercardContents({\n  // change-line\n  queryRef,\n}: {\n  // change-line\n  queryRef: PreloadedQuery<QueryType>,\n}): React.ReactElement {\n  // change-line\n  const data = usePreloadedQuery(\n    PosterDetailsHovercardContentsQuery,\n    // change-line\n    queryRef,\n  );\n  ...\n```\n\n----------------------------------------\n\nTITLE: Implementing Runtime Arguments in Relay Resolver Functions\nDESCRIPTION: Demonstrates how to define arguments in a resolver field definition using a docblock and access them in the resolver function. The resolver accesses the argument via the second parameter of the function.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/guides/relay-resolvers/field-arguments.md#2025-04-18_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n/**\n * @RelayResolver User.greet(salutation: String!): String\n */\nexport function greet(user: UserModel, args: { salutation: string }): string {\n  return `${args.salutation}, ${user.name}!`;\n}\n```\n\n----------------------------------------\n\nTITLE: Using @arguments in Relay Fragments - JavaScript\nDESCRIPTION: This snippet exemplifies how to include a fragment in a query while passing local arguments using the @arguments directive, enabling context-sensitive fragment reuse.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/guided-tour/rendering/variables.md#2025-04-18_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * Include fragment using @arguments\n */\n\nfunction TaskList(props) {\n  const data = usePreloadedQuery(\n    graphql`\n      query TaskListQuery {\n        todays_tasks {\n          ...TaskView_task @arguments(showDetailedResults: true)\n        }\n        tomorrows_tasks {\n          ...TaskView_task @arguments(showDetailedResults: false)\n        }\n      }\n    `,\n    props.queryRef,\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using GraphQL Variables in Relay Connection Query\nDESCRIPTION: This code shows how to use GraphQL variables in a Relay connection query, allowing for dynamic filtering and ordering of a friends list.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/guided-tour/list-data/refetching-connections.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nfunction FriendsListComponent(props: Props) {\n  const userRef = props.userRef;\n\n  const {data, ...} = usePaginationFragment(\n    graphql`\n      fragment FriendsListComponent_user on User {\n        name\n        friends(\n          order_by: $orderBy,\n          search_term: $searchTerm,\n          after: $cursor,\n          first: $count,\n        ) @connection(key: \"FriendsListComponent_user_friends_connection\") {\n          edges {\n            node {\n              name\n              age\n            }\n          }\n        }\n      }\n    `,\n    userRef,\n  );\n\n  return (...);\n}\n```\n\n----------------------------------------\n\nTITLE: Using useFragment to Read Image Data\nDESCRIPTION: This snippet demonstrates how to use the `useFragment` hook in the `Image` component to read data from the `ImageFragment`. It defines the component's props, including the `image` prop of type `ImageFragment$key`, and uses `useFragment` to retrieve the data associated with the fragment.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/tutorial/fragments-1.md#2025-04-18_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useFragment } from 'react-relay';\nimport type { ImageFragment$key } from \"./__generated__/ImageFragment.graphql\";\n\ntype Props = {\n  image: ImageFragment$key;\n  ...\n};\n\nfunction Image({image}: Props) {\n  const data = useFragment(ImageFragment, image);\n  return <img key={data.url} src={data.url} ... />\n}\n```\n\n----------------------------------------\n\nTITLE: Defining SelectorStoreUpdater Type in TypeScript\nDESCRIPTION: Type definition for a function that allows direct manipulation of the Relay store. The function takes a RecordSourceSelectorProxy and data parameters, enabling creation, updating, and deletion of records in the store.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/api-reference/types/SelectorStoreUpdater.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n(store: RecordSourceSelectorProxy, data) => void\n```\n\n----------------------------------------\n\nTITLE: Rendering RelayEnvironmentProvider Component in React\nDESCRIPTION: Shows how to render a RelayEnvironmentProvider component at the root of your app to provide the Relay environment to components that use Relay Hooks.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v13.0.0/migration-and-compatibility/relay-hooks-and-legacy-container-apis.md#2025-04-18_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<RelayEnvironmentProvider environment={MyAppEnvironment}>\n  <App />\n</RelayEnvironmentProvider>\n```\n\n----------------------------------------\n\nTITLE: GraphQL: Fragment Spread Example\nDESCRIPTION: Illustrates how a fragment is spread within a query using the `...FragmentName` syntax. It demonstrates the relationship between a query and a fragment and the syntax for including the fragment in a query.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/glossary/glossary.md#2025-04-18_snippet_7\n\nLANGUAGE: graphql\nCODE:\n```\nquery ComponentQuery {\n  viewer {\n    account_user {\n      ...Component_name\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using useRelayEnvironment Hook in React Component\nDESCRIPTION: Demonstrates how to use the useRelayEnvironment hook to access the Relay environment within a React component. The environment can then be used for operations like committing mutations. Requires React and react-relay as dependencies.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/api-reference/hooks/use-relay-environment.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst React = require('React');\n\nconst {useRelayEnvironment} = require('react-relay');\n\nfunction MyComponent() {\n  const environment = useRelayEnvironment();\n\n  const handler = useCallback(() => {\n    // For example, can be used to pass the environment to functions\n    // that require a Relay environment.\n    commitMutation(environment, ...);\n  }, [environment])\n\n  return (...);\n}\n\nmodule.exports = MyComponent;\n```\n\n----------------------------------------\n\nTITLE: Mutation with Fragment Spreading\nDESCRIPTION: Example showing how to spread fragments in a mutation to refresh component data.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/guided-tour/updating-data/graphql-mutations.md#2025-04-18_snippet_4\n\nLANGUAGE: graphql\nCODE:\n```\nmutation FeedbackLikeMutation($input: FeedbackLikeData!) {\n  feedback_like(data: $input) {\n    feedback {\n      ...FeedbackDisplay_feedback\n      ...FeedbackDetail_feedback\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using @deleteEdge Directive in GraphQL Mutation\nDESCRIPTION: This example demonstrates using the declarative @deleteEdge directive to remove edges from connections. The mutation passes connection IDs as parameters and applies the directive to a field returning deleted node IDs.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v13.0.0/guided-tour/list-data/updating-connections.md#2025-04-18_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\n// Get the connection ID using the `__id` field\nconst connectionID = fragmentData?.comments?.__id;\n\n// Or get it using `ConnectionHandler.getConnectionID()`\nconst connectionID = ConnectionHandler.getConnectionID(\n  '<story-id>',\n  'StoryComponent_story_comments_connection',\n);\n\n// ...\n\n// Mutation\ncommitMutation<DeleteCommentsMutation>(environment, {\n  mutation: graphql`\n    mutation DeleteCommentsMutation(\n      # Define a GraphQL variable for the connections array\n      $connections: [ID!]!\n      $input: CommentsDeleteInput\n    ) {\n      commentsDelete(input: $input) {\n        deletedCommentIds @deleteEdge(connections: $connections)\n      }\n    }\n  `,\n  variables: {\n    input,\n    // Pass the `connections` array\n    connections: [connectionID],\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Comment Creation Mutation with Relay Store Updates\nDESCRIPTION: Example showing how to commit a mutation that creates a comment and updates the local Relay store. Demonstrates using updater functions to handle connection updates after successful mutation completion.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/guided-tour/updating-data/imperatively-modifying-store-data-legacy.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport type {Environment} from 'react-relay';\nimport type {CommentCreateData, CreateCommentMutation} from 'CreateCommentMutation.graphql';\n\nconst {commitMutation, graphql} = require('react-relay');\nconst {ConnectionHandler} = require('relay-runtime');\n\nfunction commitCommentCreateMutation(\n  environment: Environment,\n  feedbackID: string,\n  input: CommentCreateData,\n) {\n  return commitMutation<CreateCommentMutation>(environment, {\n    mutation: graphql`\n      mutation CreateCommentMutation($input: CommentCreateData!) {\n        comment_create(input: $input) {\n          comment_edge {\n            cursor\n            node {\n              body {\n                text\n              }\n            }\n          }\n        }\n      }\n    `,\n    variables: {input},\n    updater: (store: RecordSourceSelectorProxy, _response: ?CreateCommentMutation$data) => {\n      // we are not using _response in this example, but it is\n      // provided and statically typed.\n\n      const feedbackRecord = store.get(feedbackID);\n\n      // Get connection record\n      const connectionRecord = ConnectionHandler.getConnection(\n        feedbackRecord,\n        'CommentsComponent_comments_connection',\n      );\n\n      // Get the payload returned from the server\n      const payload = store.getRootField('comment_create');\n\n      // Get the edge inside the payload\n      const serverEdge = payload.getLinkedRecord('comment_edge');\n\n      // Build edge for adding to the connection\n      const newEdge = ConnectionHandler.buildConnectionEdge(\n        store,\n        connectionRecord,\n        serverEdge,\n      );\n\n      // Add edge to the end of the connection\n      ConnectionHandler.insertEdgeAfter(\n        connectionRecord,\n        newEdge,\n      );\n    },\n  });\n}\n\nmodule.exports = {commit: commitCommentCreateMutation};\n```\n\n----------------------------------------\n\nTITLE: App Component Rendering Relay Query with Suspense\nDESCRIPTION: This example demonstrates wrapping a Relay query component (`MainContent`) with a Suspense boundary. When `MainContent` suspends (while fetching data), the `LoadingGlimmer` fallback will be displayed.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/guided-tour/rendering/loading-states.md#2025-04-18_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * App.react.js\n */\n\nconst React = require('React');\nconst {Suspense} = require('React');\n\nfunction App() {\n  return (\n    // LoadingGlimmer is rendered via the Suspense fallback\n    <Suspense fallback={<LoadingGlimmer />}>\n      <MainContent /> {/* MainContent may suspend */}\n    </Suspense>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Extending a server schema type with local fields in GraphQL\nDESCRIPTION: Extends the server's User type with a local field called 'notes' that returns an array of Note objects.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/guides/client-schema-extensions.md#2025-04-18_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\nextend type User {\n  notes: [Note]\n}\n```\n\n----------------------------------------\n\nTITLE: Loading Home Tab Query in Relay\nDESCRIPTION: Code that loads the HomeTabQuery with store-or-network fetchPolicy, which will attempt to use cached data when available.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/guided-tour/reusing-cached-data/rendering-partially-cached-data.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * AppTabs.react.js\n *\n * Query Loader Component\n */\n\n // ....\n\n  const onSelectHomeTab = () => {\n    loadHomeTabQuery({id: '4'}, {fetchPolicy: 'store-or-network'});\n  }\n\n // ...\n```\n\n----------------------------------------\n\nTITLE: Implementing a Resolver with Runtime JavaScript Arguments\nDESCRIPTION: Example of a Relay Resolver that accepts runtime JavaScript arguments. This resolver defines two arguments ('my_arg' and 'my_other_arg') that are passed directly to the resolver function rather than to the GraphQL fragment.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/guides/relay-resolvers.md#2025-04-18_snippet_5\n\nLANGUAGE: js\nCODE:\n```\n/**\n* @RelayResolver MyType.my_resolver_field(my_arg: String, my_other_arg: Int): String\n* @rootFragment myResolverFragment\n*/\nexport function my_resolver_field(\n   fragmentKey: myResolverFragment$key,\n   args: {\n      my_arg: ?string,\n      my_other_arg: ?number\n   },\n): ?string {\n   if (args.my_other_arg === 0) {\n       return \"The other arg is 0\";\n   }\n\n   const data = readFragment(graphql`\n       fragment myResolverFragment on MyType\n           some_field\n       }\n   `, fragmentKey);\n\n   return data.some_field.concat(args.my_arg);\n}\n```\n\n----------------------------------------\n\nTITLE: Using the @deleteEdge Directive in a Mutation\nDESCRIPTION: Demonstrates how to use the @deleteEdge directive to remove edges from connections. The mutation includes a field that returns the IDs of deleted nodes, and the directive specifies which connections should be updated.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/guided-tour/list-data/updating-connections.md#2025-04-18_snippet_10\n\nLANGUAGE: js\nCODE:\n```\n// Get the connection ID using the `__id` field\nconst connectionID = fragmentData?.comments?.__id;\n\n// Or get it using `ConnectionHandler.getConnectionID()`\nconst connectionID = ConnectionHandler.getConnectionID(\n  '<story-id>',\n  'StoryComponent_story_comments_connection',\n);\n\n// ...\n\n// Mutation\ncommitMutation<DeleteCommentsMutation>(environment, {\n  mutation: graphql`\n    mutation DeleteCommentsMutation(\n      # Define a GraphQL variable for the connections array\n      $connections: [ID!]!\n      $input: CommentsDeleteInput\n    ) {\n      commentsDelete(input: $input) {\n        deletedCommentIds @deleteEdge(connections: $connections)\n      }\n    }\n  `,\n  variables: {\n    input,\n    // Pass the `connections` array\n    connections: [connectionID],\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: RecordProxy Interface Definition\nDESCRIPTION: Defines the interface for manipulating individual records in the Relay store, including methods for getting and setting values and linked records.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/api-reference/relay-runtime/store.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ninterface RecordProxy {\n  copyFieldsFrom(sourceRecord: RecordProxy): void;\n  getDataID(): string;\n  getLinkedRecord(name: string, arguments?: ?Object): ?RecordProxy;\n  getLinkedRecords(name: string, arguments?: ?Object): ?Array<?RecordProxy>;\n  getOrCreateLinkedRecord(\n    name: string,\n    typeName: string,\n    arguments?: ?Object,\n  ): RecordProxy;\n  getType(): string;\n  getValue(name: string, arguments?: ?Object): mixed;\n  setLinkedRecord(\n    record: RecordProxy,\n    name: string,\n    arguments?: ?Object,\n  ): RecordProxy;\n  setLinkedRecords(\n    records: Array<?RecordProxy>,\n    name: string,\n    arguments?: ?Object,\n  ): RecordProxy;\n  setValue(value: mixed, name: string, arguments?: ?Object): RecordProxy;\n  invalidateRecord(): void;\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Viewer Name using readUpdatableQuery in Relay\nDESCRIPTION: This snippet demonstrates how to use the readUpdatableQuery API in Relay to update a viewer's name. It includes a React component that renders a form for updating the name and uses commitLocalUpdate to perform the update.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/guided-tour/updating-data/imperatively-modifying-store-data.md#2025-04-18_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// NameUpdater.react.js\nfunction NameUpdater({ queryRef }: {\n  queryRef: NameUpdater_viewer$key,\n}) {\n  const environment = useRelayEnvironment();\n  const data = useFragment(\n    graphql`\n      fragment NameUpdater_viewer on Viewer {\n        name\n      }\n    `,\n    queryRef\n  );\n  const [newName, setNewName] = useState(data?.viewer?.name);\n  const onSubmit = () => {\n    commitLocalUpdate(environment, store => {\n      const {updatableData} = store.readUpdatableQuery(\n        graphql`\n          query NameUpdaterUpdateQuery @updatable {\n            viewer {\n              name\n            }\n          }\n        `,\n        {}\n      );\n      const viewer = updatableData.viewer;\n      if (viewer != null) {\n        viewer.name = newName;\n      }\n    });\n  };\n\n  // etc\n}\n```\n\n----------------------------------------\n\nTITLE: MutationConfig Type Definition\nDESCRIPTION: Describes the `MutationConfig` type used for configuring Relay mutations. It outlines the various optional fields available, such as `cacheConfig`, `mutation`, `onError`, `onCompleted`, `onUnsubscribe`, `optimisticResponse`, `optimisticUpdater`, `updater`, `uploadables`, and `variables`. Each field's purpose and expected type are specified, providing a comprehensive overview of mutation configuration options.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/api-reference/types/MutationConfig.md#2025-04-18_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n* An object with the following fields:\n  * `cacheConfig`: *_[Optional]_* [`CacheConfig`](#type-cacheconfig)\n  * `mutation`: `GraphQLTaggedNode`. A mutation specified using a GraphQL literal\n  * `onError`: *_[Optional]_* `(Error) => void`. An optional callback executed if the mutation results in an error.\n  * `onCompleted`: *_[Optional]_* `($ElementType<TMutationConfig, 'response'>) => void`. An optional callback that is executed when the mutation completes.\n    * The value passed to `onCompleted` is the the mutation fragment, as read out from the store, **after** updaters and declarative mutation directives are applied. This means that data from within unmasked fragments will not be read, and records that were deleted (e.g. by `@deleteRecord`) may also be null.\n  * `onUnsubscribe`: *_[Optional]_* `() => void`. An optional callback that is executed when the mutation the mutation is unsubscribed, which occurs when the returned `Disposable` is disposed.\n  * `optimisticResponse`: *_[Optional]_* An object whose type matches the raw response type of the mutation. Make sure you decorate your mutation with `@raw_response_type` if you are using this field.\n  * `optimisticUpdater`: *_[Optional]_* [`SelectorStoreUpdater`](#type-selectorstoreupdater). A callback that is executed when `commitMutation` is called, after the `optimisticResponse` has been normalized into the store.\n  * `updater`: *_[Optional]_* [`SelectorStoreUpdater`](#type-selectorstoreupdater). A callback that is executed when a payload is received, after the payload has been written into the store.\n  * `uploadables`: *_[Optional]_* [`UploadableMap`](#type-uploadablemap). An optional uploadable map.\n  * `variables`: `$ElementType<TMutationConfig, 'variables'>`. The variables to pass to the mutation.\n```\n\n----------------------------------------\n\nTITLE: Rendering Fallback with React Suspense\nDESCRIPTION: This snippet demonstrates how to use React's Suspense component to wrap a component that might suspend during rendering (e.g., while waiting for data). It shows how to specify a fallback UI (LoadingGlimmer) that will be displayed while the wrapped component is not ready.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/guided-tour/rendering/loading-states.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst React = require('React');\nconst {Suspense} = require('React');\n\nfunction App() {\n  return (\n    // Render a fallback using Suspense as a wrapper\n    <Suspense fallback={<LoadingGlimmer />}>\n      <CanSuspend />\n    </Suspense>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using Fragment References in TypeScript Components\nDESCRIPTION: This snippet demonstrates how Relay generates TypeScript types for fragment data and references. The Fragment component receives a fragment reference as a prop and uses useFragment to access the actual data.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/guides/type-emission.md#2025-04-18_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * export type ExampleFragmentComponent_artist$data = {\n *   readonly name: string\n * }\n *\n * export type ExampleFragmentComponent_artist$key = { ... }\n */\n\nimport { ExampleFragmentComponent_artist$key } from \"__generated__/ExampleFragmentComponent_artist.graphql\"\n\ninterface Props {\n  artist: ExampleFragmentComponent_artist$key,\n};\n\nexport default ExampleFragmentComponent(props: Props) {\n  // data is of type ExampleFragmentComponent_artist$data\n  const data = useFragment(\n    graphql`\n      fragment ExampleFragmentComponent_artist on Artist {\n        biography\n      }\n    `,\n    props.artist,\n  );\n\n  return <div>About the artist: {props.artist.biography}</div>;\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing a Plain Connection\nDESCRIPTION: This JavaScript code demonstrates how to access a plain connection field (without @connection) from a Relay store, retrieve the 'friends' linked record, and then access the 'edges' linked records.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/api-reference/relay-runtime/store.md#2025-04-18_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\n// The `friends` connection record can be accessed with:\nconst user = store.get(userID);\nconst friends = user && user.getLinkedRecord('friends');\n\n// Access fields on the connection:\nconst edges = friends && friends.getLinkedRecords('edges');\n```\n\n----------------------------------------\n\nTITLE: Accessing Relay Environment using useRelayEnvironment Hook\nDESCRIPTION: This code snippet demonstrates how to use the `useRelayEnvironment` hook to access the Relay environment within a React component.  The hook retrieves the environment provided by a `RelayEnvironmentProvider`. The environment can then be used to perform Relay operations such as committing mutations.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/api-reference/hooks/use-relay-environment.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst React = require('React');\n\nconst {useRelayEnvironment} = require('react-relay');\n\nfunction MyComponent() {\n  const environment = useRelayEnvironment();\n\n  const handler = useCallback(() => {\n    // For example, can be used to pass the environment to functions\n    // that require a Relay environment.\n    commitMutation(environment, ...);\n  }, [environment])\n\n  return (...);\n}\n\nmodule.exports = MyComponent;\n```\n\n----------------------------------------\n\nTITLE: Using useLazyLoadQuery for Retrying\nDESCRIPTION: This snippet illustrates how to manage retries by using useLazyLoadQuery alongside an updated fetchKey to trigger data fetching upon error recovery.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/guided-tour/rendering/error-states.md#2025-04-18_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * ErrorBoundaryWithRetry.react.js\n */\n\nconst React = require('React');\n\n// NOTE: This is NOT actual production code;\n// it is only used to illustrate example\nclass ErrorBoundaryWithRetry extends React.Component<Props, State> {\n  state = {error: null, fetchKey: 0};\n\n  static getDerivedStateFromError(error): State {\n    return {error: error, fetchKey: 0};\n  }\n\n  _retry = () => {\n    this.setState(prev => ({\n      // Clear the error\n      error: null,\n      // Increment and set a new fetchKey in order\n      // to trigger a re-evaluation and refetching\n      // of the query using useLazyLoadQuery\n      fetchKey: prev.fetchKey + 1,\n    }));\n  }\n\n  render() {\n    const {children, fallback} = this.props;\n    const {error, fetchKey} = this.state;\n    if (error) {\n      if (typeof fallback === 'function') {\n        return fallback({error, retry: this._retry});\n      }\n      return fallback;\n    }\n    return children({fetchKey});\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Suspense in a Live Resolver for Query.myIp field in TypeScript\nDESCRIPTION: This code snippet demonstrates how to implement a Live Resolver that returns a suspense sentinel when data is loading. It uses a store to check the loading status of an IP address and returns the suspense sentinel if the data is still loading.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/guides/relay-resolvers/suspense.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {suspenseSentinel} from 'relay-runtime';\n\n/**\n * @RelayResolver Query.myIp: String\n * @live\n */\nexport function myIp(): LiveState<string> {\n  return {\n    read: () => {\n      const state = store.getState();\n      const ipLoadObject = state.ip;\n      if (ipLoadObject.status === \"LOADING\") {\n        return suspenseSentinel();\n      }\n      return state.ip;\n    },\n    subscribe: (cb) => {\n      return store.subscribe(cb);\n    },\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Adding altText to ImageFragment\nDESCRIPTION: This snippet shows how to add a new field (altText) to the ImageFragment and use it in the Image component without modifying other components.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/tutorial/fragments-1.md#2025-04-18_snippet_9\n\nLANGUAGE: GraphQL\nCODE:\n```\nconst ImageFragment = graphql`\n  fragment ImageFragment on Image {\n    url\n    altText\n  }\n`;\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\nfunction Image({image}) {\n  // ...\n  <img\n    alt={data.altText}\n  //...\n}\n```\n\n----------------------------------------\n\nTITLE: QueryRenderer Example in Relay Container API\nDESCRIPTION: Example of using QueryRenderer from the legacy container API to fetch and render data. The QueryRenderer handles loading states, errors, and rendering the data once available.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v13.0.0/migration-and-compatibility/relay-hooks-and-legacy-container-apis.md#2025-04-18_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport * as React from 'React';\nimport {graphql, QueryRenderer} from 'react-relay';\n\nexport default function Home() {\n  return (\n    <QueryRenderer\n      environment={MyAppEnvironment}\n      query={graphql`\n        query HomeQuery($id: ID!) {\n          user(id: $id) {\n            name\n          }\n        }\n      `}\n      variables={{id: 4}}\n      render={(props, error) => {\n        if (error) {\n          return <Error />;\n        }\n        if (!props) {\n          return <Loading />;\n        }\n        return <h1>{props.user?.name}</h1>\n      }}\n    />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Hover Event Handler for Query Preloading\nDESCRIPTION: Shows how to implement an onBeginHover event handler to trigger query preloading when hovering over a component.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/tutorial/queries-2.md#2025-04-18_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\nexport default function PosterByline({ poster }: Props): React.ReactElement {\n  ...\n  const [\n    hovercardQueryRef,\n    loadHovercardQuery,\n  ] = useQueryLoader<HovercardQueryType>(PosterDetailsHovercardContentsQuery);\n  // change\n  function onBeginHover() {\n    loadHovercardQuery({posterID: data.id});\n  }\n  // end-change\n  return (\n    <div className=\"byline\">\n      ...\n      <Hovercard\n        // change-line\n        onBeginHover={onBeginHover}\n        targetRef={hoverRef}>\n        <PosterDetailsHovercardContents queryRef={hovercardQueryRef} />\n      </Hovercard>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Actor Interface Types\nDESCRIPTION: GraphQL type definitions for User and Organization implementing the Actor interface with additional type-specific fields\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/tutorial/interfaces-polymorphism.md#2025-04-18_snippet_2\n\nLANGUAGE: graphql\nCODE:\n```\ntype User implements Actor {\n  id: ID!\n  name: String\n  profilePicture: Image\n  joined: DateTime\n  email: String\n  location: Location\n}\n\ntype Organization implements Actor {\n  id: ID!\n  name: String\n  profilePicture: Image\n  joined: DateTime\n  organizationKind: OrganizationKind\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Relay Query Components with createMockEnvironment\nDESCRIPTION: Demonstrates how to test different states (Loading, Data Render, Error) of a Relay Query component using createMockEnvironment and MockPayloadGenerator. It shows how to simulate query resolution and rejection.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v13.0.0/guides/testing-relay-components.md#2025-04-18_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst MyAwesomeViewRoot = require('MyAwesomeViewRoot');\nconst {\n  createMockEnvironment,\n  MockPayloadGenerator,\n} = require('relay-test-utils');\n\ntest('Loading State', () => {\n  const environment = createMockEnvironment();\n  const renderer = ReactTestRenderer.create(\n    <MyAwesomeViewRoot environment={environment} />,\n  );\n\n  expect(\n    renderer.root.find(node => node.props['data-testid'] === 'spinner'),\n  ).toBeDefined();\n});\n\ntest('Data Render', () => {\n  const environment = createMockEnvironment();\n  const renderer = ReactTestRenderer.create(\n    <MyAwesomeViewRoot environment={environment} />,\n  );\n\n  ReactTestRenderer.act(() => {\n    environment.mock.resolveMostRecentOperation(operation =>\n      MockPayloadGenerator.generate(operation),\n    );\n  });\n\n  expect(\n    renderer.root.find(node => node.props['data-testid'] === 'myButton'),\n  ).toBeDefined();\n});\n\ntest('Error State', () => {\n  const environment = createMockEnvironment();\n  const renderer = ReactTestRenderer.create(\n    <MyAwesomeViewRoot environment={environment} />,\n  );\n\n  ReactTestRenderer.act(() => {\n    environment.mock.rejectMostRecentOperation(new Error('Uh-oh'));\n  });\n\n  expect(\n    renderer.root.find(item => (item.props.testID = 'errorMessage')),\n  ).toBeDefined();\n});\n```\n\n----------------------------------------\n\nTITLE: Accessing Relay Environment with useRelayEnvironment Hook\nDESCRIPTION: This snippet shows how to use the useRelayEnvironment hook to access the current Relay environment within a descendant component of the RelayEnvironmentProvider. It imports the hook and uses it within a functional component.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/guided-tour/rendering/environment.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst {useRelayEnvironment} = require('react-relay');\n\nfunction UserComponent(props: Props) {\n  const environment = useRelayEnvironment();\n\n  return (...);\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Pagination in Relay Components\nDESCRIPTION: Demonstrates testing pagination functionality including load more behavior and different page states using mock data generation.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/guides/testing-relay-components.md#2025-04-18_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\ntest('`Pagination` Container', async () => {\n  const environment = createMockEnvironment();\n  const TestRenderer = () => {\n    const data = useLazyLoadQuery(\n      graphql`\n        query TestQuery @relay_test_operation {\n          myConnection: node(id: \"test-id\") {\n            connection {\n              ...MyConnectionFragment\n            }\n          }\n        }\n      `,\n      {},\n    );\n    return <MyPaginationContainer connection={data.myConnection.connection} />\n  };\n\n  const renderer = render(\n    <RelayEnvironmentProvider environment={environment}>\n      <Suspense fallback=\"Loading...\">\n        <TestRenderer />\n      </Suspense>\n    </RelayEnvironmentProvider>\n  );\n\n  act(() => {\n    environment.mock.resolveMostRecentOperation(operation =>\n      MockPayloadGenerator.generate(operation, {\n        ID(_, generateId) {\n          return `first-page-id-${generateId()}`;\n        },\n        PageInfo() {\n          return {\n            has_next_page: true,\n          };\n        },\n      }),\n    );\n  });\n\n  const loadMore = await renderer.findByTestId('loadMore');\n  expect(loadMore.props.disabled).toBe(false);\n  loadMore.props.onClick();\n\n  act(() => {\n    environment.mock.resolveMostRecentOperation(operation =>\n      MockPayloadGenerator.generate(operation, {\n        ID(_, generateId) {\n          return `second-page-id-${generateId()}`;\n        },\n        PageInfo() {\n          return {\n            has_next_page: false,\n          };\n        },\n      }),\n    );\n  });\n\n  expect(loadMore.props.disabled).toBe(true);\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Search Input to ContactsList Component\nDESCRIPTION: Enhanced ContactsList component with search input functionality using React useState.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/tutorial/refetchable-fragments.md#2025-04-18_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport SearchInput from './SearchInput';\nconst {useState} = React;\n\nfunction ContactsList({viewer}) {\n  const data = useFragment(ContactsListFragment, viewer);\n  const [searchString, setSearchString] = useState('');\n  const onSearchStringChanged = (value: string) => {\n    setSearchString(value);\n  };\n  return (\n    <Card dim={true}>\n      <h3>Contacts</h3>\n      <SearchInput\n        value={searchString}\n        onChange={onSearchStringChanged}\n      />\n      {data.contacts.map(contact =>\n        <ContactRow key={contact.id} contact={contact} />\n      )}\n    </Card>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Missing Field Handlers in Relay Environment with JavaScript\nDESCRIPTION: This snippet demonstrates how to create and configure missing field handlers within the Relay environment. These handlers define logic to return expected data references, particularly for `node`, `user`, and `story` fields, ensuring the data can be reused when needed. Relay uses these handlers when cache misses occur to attempt filling missing fields with available data.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/guided-tour/reusing-cached-data/filling-in-missing-data.md#2025-04-18_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst {ROOT_TYPE, Environment} = require('relay-runtime');\n\nconst missingFieldHandlers = [\n  {\n    handle(field, record, argValues): ?string {\n      // Make sure to add a handler for the node field\n      if (\n        record != null &&\n        record.getType() === ROOT_TYPE &&\n        field.name === 'node' &&\n        argValues.hasOwnProperty('id')\n      ) {\n        return argValues.id\n      }\n      if (\n        record != null &&\n        record.getType() === ROOT_TYPE &&\n        field.name === 'user' &&\n        argValues.hasOwnProperty('id')\n      ) {\n        // If field is user(id: $id), look up the record by the value of $id\n        return argValues.id;\n      }\n      if (\n        record != null &&\n        record.getType() === ROOT_TYPE &&\n        field.name === 'story' &&\n        argValues.hasOwnProperty('story_id')\n      ) {\n        // If field is story(story_id: $story_id), look up the record by the\n        // value of $story_id.\n        return argValues.story_id;\n      }\n      return undefined;\n    },\n    kind: 'linked',\n  },\n];\n\nconst environment = new Environment({/*...*/, missingFieldHandlers});\n```\n\n----------------------------------------\n\nTITLE: Defining a GraphQL Mutation for Story Likes in Relay\nDESCRIPTION: This GraphQL mutation definition allows a user to like or unlike a story. It includes required variables for the story ID and the like status, and selects fields from the story that will be updated after the mutation.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/tutorial/mutations-updates.md#2025-04-18_snippet_2\n\nLANGUAGE: graphql\nCODE:\n```\nconst StoryLikeButtonLikeMutation = graphql`\n  mutation StoryLikeButtonLikeMutation(\n    // color1\n    $id: ID!,\n    // color1\n    $doesLike: Boolean!,\n  ) {\n    // color2\n    likeStory(\n      // color3\n      id: $id,\n      // color3\n      doesLike: $doesLike\n    ) {\n      // color4\n      story {\n        // color5\n        id\n        // color5\n        likeCount\n        // color5\n        doesViewerLike\n      }\n    }\n  }\n`;\n```\n\n----------------------------------------\n\nTITLE: Using useSubscription Hook in React with Relay\nDESCRIPTION: This snippet demonstrates how to use the useSubscription hook in a React component. It imports necessary dependencies, defines a GraphQL subscription, and uses the hook with a memoized configuration object.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/api-reference/hooks/use-subscription.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport {graphql, useSubscription} from 'react-relay';\nimport {useMemo} from 'react';\n\nconst subscription = graphql`\n  subscription UserDataSubscription($input: InputData!) {\n    # ...\n  }\n`;\n\nfunction UserComponent({ id }) {\n  // IMPORTANT: your config should be memoized.\n  // Otherwise, useSubscription will re-render too frequently.\n  const config = useMemo(() => ({\n    variables: {id},\n    subscription,\n  }), [id, subscription]);\n\n  useSubscription(config);\n\n  return (/* ... */);\n}\n```\n\n----------------------------------------\n\nTITLE: Relay Resolver Syntax Example (JavaScript)\nDESCRIPTION: This code snippet demonstrates the syntax for defining a Relay Resolver in JavaScript. It shows how to use the `@RelayResolver` docblock tag to indicate the start of the resolver definition, specifying the GraphQL model type, field name, arguments (if any), and return type.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/guides/relay-resolvers/defining-fields.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n* @RelayResolver TypeName.fieldName(arg1: ArgTypeName): FieldTypeName\n*/\n```\n\n----------------------------------------\n\nTITLE: Implementing PosterByline Component with Hovercard\nDESCRIPTION: React component implementation showing how to add a hovercard to display user details on hover\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/tutorial/queries-2.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport default function PosterByline({ poster }: Props): React.ReactElement {\n  const data = useFragment(PosterBylineFragment, poster);\n  const hoverRef = useRef(null);\n  return (\n    <div\n      ref={hoverRef}\n      className=\"byline\">\n      <Image image={data.profilePicture} width={60} height={60} className=\"byline__image\" />\n      <div className=\"byline__name\">{data.name}</div>\n      <Hovercard targetRef={hoverRef}>\n        <PosterDetailsHovercardContents />\n      </Hovercard>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Converting Refetch Container to useRefetchableFragment Hook\nDESCRIPTION: Demonstrates migration from Refetch Container to useRefetchableFragment Hook with simplified refetch API.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/migration-and-compatibility/relay-hooks-and-legacy-container-apis.md#2025-04-18_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport * as React from 'React';\nimport {graphql, createRefetchContainer} from 'react-relay';\n\nfunction CommentBody(props: Props) {\n  const relay = props.relay;\n\n  return (\n    <>\n      <p>{data.body?.text}</p>\n      <Button\n        onClick={() => relay.refetch(\n          {lang: 'SPANISH'}, // fragmentVariables\n          null,  // renderVariables\n          error => { ... },\n          {force: true}\n        )}>\n        Translate Comment\n      </Button>\n    </>\n  );\n}\n\nexport default createRefetchContainer(\n  CommentBody,\n  {\n    user: graphql`\n      fragment CommentBody_comment on Comment {\n        body(lang: $lang) {\n          text\n        }\n      }\n    `,\n  },\n\n  graphql`\n    query AppQuery($id: ID!, lang: Lang) {\n      node(id: $id) {\n        ...CommentBody_comment\n      }\n    }\n  `,\n);\n```\n\nLANGUAGE: jsx\nCODE:\n```\nimport * as React from 'React';\nimport {graphql, useRefetchableFragment} from 'react-relay';\n\nexport default function CommentBody(props: Props) {\n  const [data, refetch] = useRefetchableFragment(\n    graphql`\n      fragment CommentBody_comment on Comment\n      @refetchable(queryName: \"CommentBodyRefetchQuery\") {\n        body(lang: $lang) {\n          text\n        }\n      }\n    `,\n    props.comment,\n  );\n\n  const handleClick = useCallback(() => {\n    refetch({lang: 'SPANISH'});\n  }, [refetch]);\n\n  return (\n    <>\n      <p>{data.body?.text}</p>\n      <Button\n        onClick={handleClick}>\n        Translate Comment\n      </Button>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Providing Variables with a GraphQL Query\nDESCRIPTION: Example showing how to provide both a query and its variables when sending a network request to fetch data. The query declares an $id variable, and the variables object provides the actual value to use.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v13.0.0/guided-tour/rendering/variables.md#2025-04-18_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\n# Query:\nquery UserQuery($id: ID!) {\n  # ...\n}\n\n# Variables:\n{\"id\": 4}\n```\n\n----------------------------------------\n\nTITLE: Using @inline Directive in React-Relay\nDESCRIPTION: The `@inline` directive allows accessing Relay data outside the render phase by using the `readInlineData` function. This feature is beneficial when needing specific data parts for processing within non-React functions. The provided example illustrates reading data for `processItemData_item` inline fragment to ensure all requested fields are loaded before performing operations.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/api-reference/graphql/graphql-directives.md#2025-04-18_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport {graphql, readInlineData} from 'react-relay';\n\n// non-React function called from React\nfunction processItemData(itemRef) {\n  const item = readInlineData(graphql`\n    fragment processItemData_item on Item @inline {\n      title\n      price\n      creator {\n        name\n      }\n    }\n  `, itemRef);\n  sendToThirdPartyApi({\n    title: item.title,\n    price: item.price,\n    creatorName: item.creator.name\n  });\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nexport default function MyComponent({item}) {\n  function handleClick() {\n    processItemData(item);\n  }\n\n  const data = useFragment(\n    graphql`\n      fragment MyComponent_item on Item {\n        ...processItemData_item\n        title\n      }\n    `,\n    item\n  );\n\n  return (\n    <button onClick={handleClick}>Process {item.title}</button>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using commitPayload in Relay\nDESCRIPTION: Example demonstrating how to use commitPayload API to write query payloads directly to the Relay Store. Takes an OperationDescriptor and payload as parameters to resolve like a normal server response.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/guided-tour/updating-data/local-data-updates.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport type {FooQueryRawResponse} from 'FooQuery.graphql'\n\nconst {createOperationDescriptor} = require('relay-runtime');\n\nconst operationDescriptor = createOperationDescriptor(FooQuery, {\n  id: 'an-id',\n  otherVariable: 'value',\n});\n\nconst payload: FooQueryRawResponse = {...};\n\nenvironment.commitPayload(operation, payload);\n```\n\n----------------------------------------\n\nTITLE: Creating and Inserting Edges Using ConnectionHandler in JavaScript\nDESCRIPTION: Illustrates the creation and insertion of edges into a connection using `createEdge`, `insertEdgeBefore`, and `insertEdgeAfter`, which positions edges at given cursors or default positions in the connection.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/api-reference/relay-runtime/store.md#2025-04-18_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nconst user = store.get(userID);\nconst friends = ConnectionHandler.getConnection(user, 'FriendsFragment_friends');\nconst newFriend = store.get(newFriendId);\nconst edge = ConnectionHandler.createEdge(store, friends, newFriend, 'UserEdge');\n\nConnectionHandler.insertEdgeAfter(friends, edge);\nConnectionHandler.insertEdgeBefore(friends, edge);\n```\n\n----------------------------------------\n\nTITLE: Rendering a Connection using usePaginationFragment in Relay\nDESCRIPTION: This snippet shows how to use the usePaginationFragment Hook to render a GraphQL connection in Relay. It includes a refetchable fragment with @connection directive and demonstrates how to map over the connection edges to render individual items.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/guided-tour/list-data/rendering-connections.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport type {FriendsListComponent_user$key} from 'FriendsList_user.graphql';\n\nconst React = require('React');\nconst {Suspense} = require('React');\n\nconst {graphql, usePaginationFragment} = require('react-relay');\n\ntype Props = {\n  user: FriendsListComponent_user$key,\n};\n\nfunction FriendsListComponent(props: Props) {\n  const {data} = usePaginationFragment(\n    graphql`\n      fragment FriendsListComponent_user on User\n      @refetchable(queryName: \"FriendsListPaginationQuery\") {\n        name\n        friends(first: $count, after: $cursor)\n        @connection(key: \"FriendsList_user_friends\") {\n          edges {\n            node {\n              ...FriendComponent\n            }\n          }\n        }\n      }\n    `,\n    props.user,\n  );\n\n\n  return (\n    <>\n      {data.name != null ? <h1>Friends of {data.name}:</h1> : null}\n\n      <div>\n        {/* Extract each friend from the resulting data */}\n        {(data.friends?.edges ?? []).map(edge => {\n          const node = edge.node;\n          return (\n            <Suspense fallback={<Glimmer />}>\n              <FriendComponent user={node} />\n            </Suspense>\n          );\n        })}\n      </div>\n    </>\n  );\n}\n\nmodule.exports = FriendsListComponent;\n```\n\n----------------------------------------\n\nTITLE: Using Query Variables in React Component\nDESCRIPTION: React component implementation using Relay's useLazyLoadQuery hook with query variables.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/tutorial/queries-2.md#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nexport default function PosterDetailsHovercardContents({\n  posterID,\n}: {\n  posterID: string;\n}): React.ReactElement {\n  const data = useLazyLoadQuery<QueryType>(\n    PosterDetailsHovercardContentsQuery,\n    {posterID},\n  );\n  return <PosterDetailsHovercardContentsBody poster={data.node} />;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Arguments with @argumentDefinitions in GraphQL\nDESCRIPTION: The `@argumentDefinitions` directive in GraphQL is used to specify the arguments a fragment can accept. This facilitates creating dynamic fragments by defining optional and required arguments. In the example provided, a fragment `TodoList_list` is defined with two arguments: `count` and `userID`. This setup enhances flexibility in data querying with Relay.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/api-reference/graphql/graphql-directives.md#2025-04-18_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\nfragment TodoList_list on TodoList @argumentDefinitions(\n  count: {type: \"Int\", defaultValue: 10},  # Optional argument\n  userID: {type: \"ID\"},                    # Required argument\n) {\n  title\n  todoItems(userID: $userID, first: $count) {  # Use fragment arguments here as variables\n    ...TodoItem_item\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Basic GraphQL Mutation\nDESCRIPTION: Example of a GraphQL mutation that adds a 'like' to a feedback item, requesting updated like count and viewer like status in the response.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/guided-tour/updating-data/graphql-mutations.md#2025-04-18_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nmutation FeedbackLikeMutation($input: FeedbackLikeData!) {\n  feedback_like(data: $input) {\n    feedback {\n      id\n      viewer_does_like\n      like_count\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Relay Environment with useRelayEnvironment Hook\nDESCRIPTION: This code snippet demonstrates how to access the current Relay Environment within a descendant of a `RelayEnvironmentProvider` component using the `useRelayEnvironment` Hook. This hook returns the current Relay Environment instance, allowing components to interact with the Relay data fetching and caching mechanisms.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/guided-tour/rendering/environment.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n```js\nconst {useRelayEnvironment} = require('react-relay');\n\nfunction UserComponent(props: Props) {\n  const environment = useRelayEnvironment();\n\n  return (...);\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Filtering Connection Data with GraphQL\nDESCRIPTION: Example of querying filtered connection data using GraphQL arguments for sorting and searching friends list.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/guided-tour/list-data/refetching-connections.md#2025-04-18_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nfragment UserFragment on User {\n  name\n  friends(order_by: DATE_ADDED, search_term: \"Alice\", first: 10) {\n    edges {\n      node {\n        name\n        age\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Feedback Mutation with Store Updates\nDESCRIPTION: Implementation of a mutation that creates feedback and updates the store using updater functions. Shows how to use readUpdatableFragment to modify client-side fields.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/guided-tour/updating-data/imperatively-modifying-store-data.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport type {Environment} from 'react-relay';\nimport type {\n  FeedbackCreateData,\n  CreateFeedbackMutation,\n  CreateFeedbackMutation$data,\n} from 'CreateFeedbackMutation.graphql';\n\nconst {commitMutation, graphql} = require('react-relay');\nconst {ConnectionHandler} = require('relay-runtime');\n\nfunction commitCreateFeedbackMutation(\n  environment: Environment,\n  input: FeedbackCreateData,\n) {\n  return commitMutation<FeedbackCreateData>(environment, {\n    mutation: graphql`\n      mutation CreateFeedbackMutation($input: FeedbackCreateData!) {\n        feedback_create(input: $input) {\n          feedback {\n            id\n            ...CreateFeedback_updatable_feedback\n          }\n        }\n      }\n    `,\n    variables: {input},\n\n    updater: (store: RecordSourceSelectorProxy, response: ?CreateCommentMutation$data) => {\n      const feedbackRef = response?.feedback_create?.feedback;\n      if (feedbackRef == null) {\n        return;\n      }\n\n      const {updatableData} = store.readUpdatableFragment(\n          graphql`\n            fragment CreateFeedback_updatable_feedback on Feedback @updatable {\n              is_new_comment\n            }\n          `,\n          feedbackRef\n        );\n\n      updatableData.is_new_comment = true;\n    },\n  });\n}\n\nmodule.exports = {commit: commitCreateFeedbackMutation};\n```\n\n----------------------------------------\n\nTITLE: Inserting edges into connection using updater\nDESCRIPTION: This JavaScript code snippet shows how to insert a new edge into a Relay connection using `ConnectionHandler.insertEdgeAfter` or `ConnectionHandler.insertEdgeBefore` within an updater function.  It retrieves the connection record and then adds the new edge to the beginning or end of the connection.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/guided-tour/list-data/updating-connections.md#2025-04-18_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nconst {ConnectionHandler} = require('relay-runtime');\n\nfunction updater(store: RecordSourceSelectorProxy) {\n  const storyRecord = store.get(storyID);\n  const connectionRecord = ConnectionHandler.getConnection(\n    storyRecord,\n    'StoryComponent_story_comments_connection',\n  );\n\n  const newEdge = (...);\n\n  // Add edge to the end of the connection\n  ConnectionHandler.insertEdgeAfter(\n    connectionRecord,\n    newEdge,\n  );\n\n  // Add edge to the beginning of the connection\n  ConnectionHandler.insertEdgeBefore(\n    connectionRecord,\n    newEdge,\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Fragment Data Type Emission in Relay with Flow\nDESCRIPTION: This snippet shows how Relay emits type information for fragment data in a component using Flow. The `ExampleFragmentComponent_artist$data` type defines the shape of the data expected by the `useFragment` hook. The example emphasizes how the component's props type is derived from the generated fragment key.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/guides/type-emission.md#2025-04-18_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * export type ExampleFragmentComponent_artist$data = {\n *   +name: string\n * }\n *\n * export type ExampleFragmentComponent_artist$key = { ... }\n */\n\nimport type { ExampleFragmentComponent_artist$key } from \"__generated__/ExampleFragmentComponent_artist.graphql\"\n\ntype Props = {\n  artist: ExampleFragmentComponent_artist$key,\n};\n\nexport default ExampleFragmentComponent(props) {\n  // data is of type ExampleFragmentComponent_artist$data\n  const data = useFragment(\n    graphql`\n      fragment ExampleFragmentComponent_artist on Artist {\n        biography\n      }\n    `,\n    props.artist,\n  );\n\n  return <div>About the artist: {props.artist.biography}</div>;\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting Records with @deleteRecord Directive in Subscriptions\nDESCRIPTION: A GraphQL subscription that uses the @deleteRecord directive to remove an item from the store when a deletion event occurs. This demonstrates declarative store manipulation.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/guided-tour/updating-data/graphql-subscriptions.md#2025-04-18_snippet_5\n\nLANGUAGE: graphql\nCODE:\n```\nsubscription DeletePostSubscription($input: DeletePostSubscribeData!) {\n  delete_post_subscribe(data: $input) {\n    deleted_post {\n      id @deleteRecord\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Loading Queries with Relay in JavaScript\nDESCRIPTION: The code snippet demonstrates how to use the loadQuery function from react-relay to fetch a GraphQL query within a React application. It sets up the environment and specifies the query using a graphql template literal. The query reference obtained must be disposed of when no longer needed to avoid memory leaks. This example highlights typical invocation patterns such as responding to events rather than executing at the top level.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/api-reference/hooks/load-query.md#2025-04-18_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst MyEnvironment = require('MyEnvironment');\nconst {loadQuery} = require('react-relay');\n\nconst query = graphql`\n  query AppQuery($id: ID!) {\n    user(id: $id) {\n      name\n    }\n  }\n`;\n\n// Note: you should generally not call loadQuery at the top level.\n// Instead, it should be called in response to an event (such a route navigation,\n// click, etc.).\nconst queryReference = loadQuery(\n  MyEnvironment,\n  query,\n  {id: '4'},\n  {fetchPolicy: 'store-or-network'},\n);\n\n// later: pass queryReference to usePreloadedQuery()\n// Note that query reference should have .dispose() called on them,\n// which is missing in this example.\n```\n\n----------------------------------------\n\nTITLE: Refetching Queries Using fetchQuery to Avoid Suspense in React\nDESCRIPTION: Shows how to refetch a query using fetchQuery to manually manage loading states and avoid Suspense. It demonstrates updating the Relay store and then calling loadQuery with a store-only fetch policy.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/guided-tour/refetching/refetching-queries-with-different-data.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * App.react.js\n */\nimport type {AppQuery as AppQueryType} from 'AppQuery.graphql';\n\nconst AppQuery = require('__generated__/AppQuery.graphql');\n\nfunction App(props: Props) {\n  const environment = useRelayEnvironment();\n  const [queryRef, loadQuery] = useQueryLoader<AppQueryType>(\n    AppQuery,\n    props.appQueryRef /* initial query ref */\n  );\n  const [isRefetching, setIsRefetching] = useState(false)\n\n  const refetch = useCallback(() => {\n    if (isRefetching) { return; }\n    setIsRefetching(true);\n\n    // fetchQuery will fetch the query and write\n    // the data to the Relay store. This will ensure\n    // that when we re-render, the data is already\n    // cached and we don't suspend\n    fetchQuery(environment, AppQuery, variables)\n      .subscribe({\n        complete: () => {\n          setIsRefetching(false);\n\n          // *After* the query has been fetched, we call\n          // loadQuery again to re-render with a new\n          // queryRef.\n          // At this point the data for the query should\n          // be cached, so we use the 'store-only'\n          // fetchPolicy to avoid suspending.\n          loadQuery({id: 'different-id'}, {fetchPolicy: 'store-only'});\n        }\n        error: () => {\n          setIsRefetching(false);\n        }\n      });\n  }, [/* ... */]);\n\n  return (\n    <React.Suspense fallback=\"Loading query...\">\n      <MainContent\n        isRefetching={isRefetching}\n        refetch={refetch}\n        queryRef={queryRef}\n      />\n    </React.Suspense>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: GraphQL Tagged String Literal Compilation Example (JavaScript)\nDESCRIPTION: Demonstration of how the Relay compiler transforms GraphQL tagged string literals into JavaScript objects that represent the query structure. This optimization improves runtime performance and enables type safety.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/tutorial/queries-1.md#2025-04-18_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst MyQuery = graphql`\n  query MyQuery {\n    viewer {\n      name\n    }\n  }\n`;\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst MyQuery = {\n  kind: \"query\",\n  selections: [\n    {\n      name: \"viewer\",\n      kind: \"LinkedField\",\n      selections: [\n        name: \"name\",\n        kind: \"ScalarField\",\n      ],\n    }\n  ]\n};\n```\n\n----------------------------------------\n\nTITLE: Setting Multiple Linked Records in Relay Store\nDESCRIPTION: Shows how to set multiple linked records in the Relay store using the setLinkedRecords method of RecordProxy.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/api-reference/relay-runtime/store.md#2025-04-18_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nconst rootField = store.getRootField('rootField');\nconst newNode = store.create(/* ... */);\nconst newNodes = [...rootField.getLinkedRecords('nodes'), newNode];\nrootField.setLinkedRecords(newNodes, 'nodes');\n```\n\n----------------------------------------\n\nTITLE: Implementing a Basic Live Resolver with LiveState in Relay\nDESCRIPTION: This example shows how to create a basic live resolver using the @live annotation and the LiveState interface. The resolver returns a LiveState object that reads from and subscribes to changes in a store.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/guides/relay-resolvers/live-fields.md#2025-04-18_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport type { LiveState } from 'relay-runtime';\n\n/**\n * @RelayResolver Query.counter: Int\n * @live\n */\nexport function counter(): LiveState<number> {\n  return {\n    read: () => store.getState().counter,\n    subscribe: (callback) => {\n      return store.subscribe(callback);\n    },\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing useRefetchableFragment\nDESCRIPTION: Final implementation using useRefetchableFragment to enable dynamic data refetching based on search input.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/tutorial/refetchable-fragments.md#2025-04-18_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport {useRefetchableFragment} from 'react-relay';\n\nfunction ContactsList({viewer}) {\n  const [data, refetch] = useRefetchableFragment(ContactsListFragment, viewer);\n  const [searchString, setSearchString] = useState('');\n  const onSearchStringChanged = (value) => {\n    setSearchString(value);\n    refetch({search: value});\n  };\n  return (\n    // ...\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: React Component Using Type-Specific Data\nDESCRIPTION: React component that uses data from a GraphQL fragment with type refinements, conditionally rendering different UI elements based on the available fields for each type.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/tutorial/interfaces-polymorphism.md#2025-04-18_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport OrganizationKind from './OrganizationKind';\n\nfunction PosterDetailsHovercardContentsBody({ poster }: Props): React.ReactElement {\n  const data = useFragment(PosterDetailsHovercardContentsBodyFragment, poster);\n  return (\n    <>\n      <Image image={data.profilePicture} width={128} height={128} className=\"posterHovercard__image\" />\n      <div className=\"posterHovercard__name\">{data.name}</div>\n      <ul className=\"posterHovercard__details\">\n         <li>Joined <Timestamp time={poster.joined} /></li>\n         // change\n         {data.location != null && (\n           <li>{data.location.name}</li>\n         )}\n        {data.organizationKind != null && (\n          <li><OrganizationKind kind={data.organizationKind} /></li>\n         )}\n         // end-change\n      </ul>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a GraphQL Subscription in Relay\nDESCRIPTION: Example of a GraphQL subscription for receiving updates on feedback likes. It demonstrates the subscription keyword and structure of a subscription query.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/guided-tour/updating-data/graphql-subscriptions.md#2025-04-18_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nsubscription FeedbackLikeSubscription($input: FeedbackLikeSubscribeData!) {\n  feedback_like_subscribe(data: $input) {\n    feedback {\n      like_count\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Variables with usePaginationFragment in Relay\nDESCRIPTION: Implementation of connection querying using Relay's usePaginationFragment hook with variables for filtering and sorting.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/guided-tour/list-data/refetching-connections.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ntype Props = {\n  userRef: FriendsListComponent_user$key,\n};\n\nfunction FriendsListComponent(props: Props) {\n  const userRef = props.userRef;\n\n  const {data, ...} = usePaginationFragment(\n    graphql`\n      fragment FriendsListComponent_user on User {\n        name\n        friends(\n          order_by: $orderBy,\n          search_term: $searchTerm,\n          after: $cursor,\n          first: $count,\n        ) @connection(key: \"FriendsListComponent_user_friends_connection\") {\n          edges {\n            node {\n              name\n              age\n            }\n          }\n        }\n      }\n    `,\n    userRef,\n  );\n\n  return (...);\n}\n```\n\n----------------------------------------\n\nTITLE: Normalizing GraphQL Response into RecordSource in JavaScript\nDESCRIPTION: Demonstrates how a GraphQL response is normalized into a RecordSource with separate records for a User and their Address. It shows the transformation from a nested object structure to a flat, normalized record structure with references.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/principles-and-architecture/runtime-architecture.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// GraphQL Fragment\nfragment on User {\n  id\n  name\n  address {\n    city\n  }\n}\n\n// Response\n{\n  id: '842472',\n  name: 'Joe',\n  address: {\n    city: 'Seattle',\n  }\n}\n\n// Normalized Representation\nRecordSource {\n  '842472': Record {\n    __id: '842472',\n    __typename: 'User', // the type is known statically from the fragment\n    id: '842472',\n    name: 'Joe',\n    address: {__ref: 'client:842472:address'}, // link to another record\n  },\n  'client:842472:address': Record {\n    // A client ID, derived from the path from parent & parent's ID\n    __id: 'client:842472:address',\n    __typename: 'Address',\n    city: 'Seattle',\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Example GraphQL Query for Fetching a Single Story\nDESCRIPTION: A GraphQL query to fetch a single story by its id, including id, text, and likeCount fields.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/principles-and-architecture/thinking-in-graphql.md#2025-04-18_snippet_5\n\nLANGUAGE: graphql\nCODE:\n```\nquery { story(id: \"123\") { id, text, likeCount } }\n```\n\n----------------------------------------\n\nTITLE: Loading Newsfeed Stories with Relay and Infinite Scroll\nDESCRIPTION: This snippet defines a Newsfeed component that loads stories using Relay's usePaginationFragment hook and implements infinite scrolling by utilizing an InfiniteScrollTrigger component. The component retrieves data and checks whether more pages are available to be loaded while maintaining the loading state.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/tutorial/connections-pagination.md#2025-04-18_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nimport InfiniteScrollTrigger from \"./InfiniteScrollTrigger\";\n\nfunction Newsfeed() {\n  const queryData = useLazyLoadQuery<NewsfeedQueryType>(\n    NewsfeedQuery,\n    {},\n  );\n  const {\n    data,\n    loadNext,\n    // change-line\n    hasNext,\n    // change-line\n    isLoadingNext,\n  } = usePaginationFragment(NewsfeedContentsFragment, queryData);\n  // change\n  function onEndReached() {\n    loadNext(1);\n  }\n  // end-change\n  const storyEdges = data.viewer.newsfeedStories.edges;\n  return (\n    <div className=\"newsfeed\">\n      {storyEdges.map(storyEdge =>\n        <Story key={storyEdge.node.id} story={storyEdge.node} />\n      )}\n      // change\n      <InfiniteScrollTrigger\n        onEndReached={onEndReached}\n        hasNext={hasNext}\n        isLoadingNext={isLoadingNext}\n      />\n      // end-change\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing useClientQuery Hook in React\nDESCRIPTION: Example React component demonstrating the usage of useClientQuery hook to read client-only fields from the Relay store\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/api-reference/hooks/use-client-query.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst React = require('React');\n\nconst {graphql, useClientQuery} = require('react-relay');\n\nfunction ClientQueryComponent() {\n  const data = useClientQuery(\n    graphql`\n      query ClientQueryComponentQuery {\n        client_field\n      }\n    `,\n    {}, // variables\n  );\n\n  return (\n    <div>{data.client_field}</div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: ConnectionHandler Interface in JavaScript\nDESCRIPTION: The interface definition for the ConnectionHandler module exposed by relay-runtime. It outlines methods for getting connections, creating edges, inserting edges before or after cursors, and deleting nodes.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v13.0.0/api-reference/relay-runtime/store.md#2025-04-18_snippet_39\n\nLANGUAGE: javascript\nCODE:\n```\ninterface ConnectionHandler {\n  getConnection(\n    record: RecordProxy,\n    key: string,\n    filters?: ?Object,\n  ): ?RecordProxy,\n  createEdge(\n    store: RecordSourceProxy,\n    connection: RecordProxy,\n    node: RecordProxy,\n    edgeType: string,\n  ): RecordProxy,\n  insertEdgeBefore(\n    connection: RecordProxy,\n    newEdge: RecordProxy,\n    cursor?: ?string,\n  ): void,\n  insertEdgeAfter(\n    connection: RecordProxy,\n    newEdge: RecordProxy,\n    cursor?: ?string,\n  ): void,\n  deleteNode(connection: RecordProxy, nodeID: string): void\n}\n```\n\n----------------------------------------\n\nTITLE: Spreading Fragment in Newsfeed Query\nDESCRIPTION: Updating the Newsfeed query to use the Story fragment instead of inline fields\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/tutorial/fragments-1.md#2025-04-18_snippet_3\n\nLANGUAGE: graphql\nCODE:\n```\nconst NewsfeedQuery = graphql`\n  query NewsfeedQuery {\n    topStory {\n      ...StoryFragment\n    }\n  }\n`;\n```\n\n----------------------------------------\n\nTITLE: @argumentDefinitions directive in GraphQL\nDESCRIPTION: The `@argumentDefinitions` directive defines the arguments that a fragment accepts. The example shows how to specify an optional and a required argument in a fragment.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/api-reference/graphql/graphql-directives.md#2025-04-18_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\nfragment TodoList_list on TodoList @argumentDefinitions(\n  count: {type: \"Int\", defaultValue: 10},  # Optional argument\n  userID: {type: \"ID\"},                    # Required argument\n) {\n  title\n  todoItems(userID: $userID, first: $count) {  # Use fragment arguments here as variables\n    ...TodoItem_item\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Story Data with GraphQL\nDESCRIPTION: This GraphQL query fetches a story's text, author details, and comments. It demonstrates the structure of a typical GraphQL query for nested data.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/principles-and-architecture/thinking-in-graphql.md#2025-04-18_snippet_5\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  story(id: \"1\") {\n    text,\n    author { name, photo },\n    comments {\n      text,\n      author { name, photo }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Normalizing GraphQL Response in Relay Runtime (JavaScript/GraphQL)\nDESCRIPTION: Demonstrates how Relay normalizes a GraphQL response into a RecordSource with separate records for nested objects. It shows the transformation from a GraphQL fragment and response to the internal normalized representation.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/principles-and-architecture/runtime-architecture.md#2025-04-18_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nfragment on User {\n  id\n  name\n  address {\n    city\n  }\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// Response\n{\n  id: '842472',\n  name: 'Joe',\n  address: {\n    city: 'Seattle',\n  }\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// Normalized Representation\nRecordSource {\n  '842472': Record {\n    __id: '842472',\n    __typename: 'User', // the type is known statically from the fragment\n    id: '842472',\n    name: 'Joe',\n    address: {__ref: 'client:842472:address'}, // link to another record\n  },\n  'client:842472:address': Record {\n    // A client ID, derived from the path from parent & parent's ID\n    __id: 'client:842472:address',\n    __typename: 'Address',\n    city: 'Seattle',\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Local Notes - JavaScript\nDESCRIPTION: This snippet creates a local note for a user using the 'commitLocalUpdate' function from Relay. It demonstrates creating a unique identifier for the note and adding it to the user's list of notes in the Relay Store.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/guides/client-schema-extensions.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport {commitLocalUpdate} from 'react-relay';\n\nlet tempID = 0;\n\nfunction createUserNote(environment) {\n  commitLocalUpdate(environment, store => {\n    const user = store.getRoot().getLinkedRecord('viewer');\n    const userNoteRecords = user.getLinkedRecords('notes') || [];\n\n    // Create a unique ID.\n    const dataID = `client:Note:${tempID++}`;\n\n    //Create a new note record.\n    const newNoteRecord = store.create(dataID, 'Note');\n\n    // Add the record to the user's list of notes.\n    user.setLinkedRecords([...userNoteRecords, newNoteRecord], 'notes');\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: GraphQL Request and Response Example\nDESCRIPTION: An example of a GraphQL request is shown where specific fields of a person are queried, demonstrating GraphQL's flexibility in requesting only required data. The dependencies include a GraphQL server endpoint. The input is a GraphQL query, and the output is a JSON object containing the specified fields.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/tutorial/graphql.md#2025-04-18_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  person(id: \"24601\") {\n    name\n    occupation\n  }\n}\n\nResponse:\n{\n  \"person\": {\n    \"name\": \"Jean Valjean\",\n    \"occupation\": \"Mayor\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using useEntryPointLoader Hook in React Component\nDESCRIPTION: This code snippet demonstrates how to use the useEntryPointLoader hook in a React component to load and manage an EntryPoint. It shows how to reveal and dispose of the EntryPoint based on user interactions.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/api-reference/entrypoint-apis/use-entrypoint-loader.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst {useEntryPointLoader, EntryPointContainer} = require('react-relay');\n\nconst ComponentEntryPoint = require('Component.entrypoint');\n\nfunction EntryPointRevealer(): React.MixedElement {\n  const environmentProvider = useMyEnvironmentProvider();\n  const [\n    entryPointReference,\n    loadEntryPoint,\n    disposeEntryPoint,\n  ] = useEntryPointLoader(environmentProvider, ComponentEntryPoint);\n\n  return (\n    <>\n      {\n        entryPointReference == null && (\n          <Button onClick={() => loadEntryPoint({})}>\n            Click to reveal the contents of the EntryPoint\n          </Button>\n        )\n      }\n      {\n        entryPointReference != null && (\n          <>\n            <Button onClick={disposeEntryPoint}>\n              Click to hide and dispose the EntryPoint.\n            </Button>\n            <Suspense fallback=\"Loading...\">\n              <EntryPointContainer\n                entryPointReference={entryPointReference}\n                props={{}}\n              />\n            </Suspense>\n          </>\n        )\n      }\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing GraphQL Connections with Specific Filters in JavaScript\nDESCRIPTION: This snippet demonstrates how to retrieve specific connection instances from the Relay store by providing concrete filter values. Through 'ConnectionHandler.getConnection', connections are accessed based on the values passed for the filters, ensuring that the correct connection records are interacted with.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/guided-tour/list-data/updating-connections.md#2025-04-18_snippet_13\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst {ConnectionHandler} = require('RelayModern');\n\nfunction updater(store: RecordSourceSelectorProxy) {\n  const storyRecord = store.get(storyID);\n\n  const connectionRecordSortedByDate = ConnectionHandler.getConnection(\n    storyRecord,\n    'StoryComponent_story_comments_connection',\n    {order_by: '*DATE_ADDED*', filter_mode: null, language: null}\n  );\n\n  const connectionRecordFriendsOnly = ConnectionHandler.getConnection(\n    storyRecord,\n    'StoryComponent_story_comments_connection',\n    {order_by: null, filter_mode: '*FRIENDS_ONLY*', langugage: null}\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Defining GraphQL Schema for Relay Server\nDESCRIPTION: Core GraphQL schema definition showing Node interface, Faction and Ship types, connection types for pagination, and mutation definitions for a Star Wars-themed example.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-experimental/GraphQL-ServerSpecification.md#2025-04-18_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\ninterface Node {\n  id: ID!\n}\n\ntype Faction : Node {\n  id: ID!\n  name: String\n  ships: ShipConnection\n}\n\ntype Ship : Node {\n  id: ID!\n  name: String\n}\n\ntype ShipConnection {\n  edges: [ShipEdge]\n  pageInfo: PageInfo!\n}\n\ntype ShipEdge {\n  cursor: String!\n  node: Ship\n}\n\ntype PageInfo {\n  hasNextPage: Boolean!\n  hasPreviousPage: Boolean!\n  startCursor: String\n  endCursor: String\n}\n\ntype Query {\n  rebels: Faction\n  empire: Faction\n  node(id: ID!): Node\n}\n\ninput IntroduceShipInput {\n  factionId: String!\n  shipNamed: String!\n  clientMutationId: String!\n}\n\ntype IntroduceShipPayload {\n  faction: Faction\n  ship: Ship\n  clientMutationId: String!\n}\n\ntype Mutation {\n  introduceShip(input: IntroduceShipInput!): IntroduceShipPayload\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing fetchGraphQL Helper Function in JavaScript\nDESCRIPTION: Create a utility function to perform GraphQL requests using the Fetch API, with GitHub API authentication and JSON response handling\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v13.0.0/getting-started/step-by-step-guide.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nasync function fetchGraphQL(text, variables) {\n  const REACT_APP_GITHUB_AUTH_TOKEN = process.env.REACT_APP_GITHUB_AUTH_TOKEN;\n\n  const response = await fetch('https://api.github.com/graphql', {\n    method: 'POST',\n    headers: {\n      Authorization: `bearer ${REACT_APP_GITHUB_AUTH_TOKEN}`,\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify({\n      query: text,\n      variables,\n    }),\n  });\n\n  return await response.json();\n}\n```\n\n----------------------------------------\n\nTITLE: Reading an Updatable Query in Relay Store with JavaScript\nDESCRIPTION: Explains how to read an updatable query from the Relay store using `readUpdatableQuery`, allowing updates to query fields for store modification. Unlike fragments, no fragmentReference is needed.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/api-reference/relay-runtime/store.md#2025-04-18_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nconst {updatableData} = store.readUpdatableQuery(\n  graphql`\n    query NameUpdaterUpdateQuery @updatable {\n      viewer {\n        name\n      }\n    }\n  `,\n  {}\n);\nconst viewer = updatableData.viewer;\nviewer.name = newName;\n```\n\n----------------------------------------\n\nTITLE: Defining Local Variables in Fragments using Relay - JavaScript\nDESCRIPTION: This snippet shows how to declare local variables in Relay fragments using @argumentDefinitions, allowing for easier fragment reuse and customization without reliance on global query variables.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/guided-tour/rendering/variables.md#2025-04-18_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * Declare a fragment that accepts arguments with @argumentDefinitions\n */\n\nfunction TaskView(props) {\n  const data = useFragment(\n    graphql`\n      fragment TaskView_task on Task\n        @argumentDefinitions(showDetailedResults: {type: \"Boolean!\"}) {\n        name\n        is_completed\n        ... @include(if: $showDetailedResults) {\n          description\n        }\n      }\n    `,\n    props.task,\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Querying for New Edge in Mutation Response\nDESCRIPTION: Defines a GraphQL mutation that creates a comment and queries for the newly created edge in the mutation response, including the cursor and node data.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/guided-tour/list-data/updating-connections.md#2025-04-18_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst {graphql} = require('react-relay');\n\nconst createCommentMutation = graphql`\n  mutation CreateCommentMutation($input: CommentCreateData!) {\n    comment_create(input: $input) {\n      comment_edge {\n        cursor\n        node {\n          body {\n            text\n          }\n        }\n      }\n    }\n  }\n`;\n```\n\n----------------------------------------\n\nTITLE: Importing StoryCommentsComposer Component\nDESCRIPTION: This code snippet imports the `StoryCommentsComposer` component and includes its fragment in `StoryCommentsSectionFragment`. This allows the `StoryCommentsComposer` component to be rendered within the `StoryCommentsSection` and have access to the necessary data via the `useFragment` hook.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/tutorial/mutations-updates.md#2025-04-18_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\n// change-line\nimport StoryCommentsComposer from './StoryCommentsComposer';\n\nconst StoryCommentsSectionFragment = graphql`\n  fragment StoryCommentsSectionFragment on Story\n    ...\n  {\n    comments(after: $cursor, first: $count)\n      @connection(key: \"StoryCommentsSectionFragment_comments\")\n    {\n      ...\n    }\n    // change-line\n    ...StoryCommentsComposerFragment\n  }\n`\n\nfunction StoryCommentsSection({story}) {\n  ...\n  return (\n    <>\n      // change-line\n      <StoryCommentsComposer story={data} />\n      ...\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: ConnectionHandler Interface Definition in JavaScript\nDESCRIPTION: TypeScript-style interface definition showing the complete API surface of the ConnectionHandler utility module, including methods for managing connection edges.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/api-reference/relay-runtime/store.md#2025-04-18_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\ninterface ConnectionHandler {\n  getConnection(\n    record: RecordProxy,\n    key: string,\n    filters?: ?Object,\n  ): ?RecordProxy,\n  createEdge(\n    store: RecordSourceProxy,\n    connection: RecordProxy,\n    node: RecordProxy,\n    edgeType: string,\n  ): RecordProxy,\n  insertEdgeBefore(\n    connection: RecordProxy,\n    newEdge: RecordProxy,\n    cursor?: ?string,\n  ): void,\n  insertEdgeAfter(\n    connection: RecordProxy,\n    newEdge: RecordProxy,\n    cursor?: ?string,\n  ): void,\n  deleteNode(connection: RecordProxy, nodeID: string): void\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Resolver Field with Combined Arguments\nDESCRIPTION: An example query demonstrating how to invoke a Relay resolver field with both JavaScript and GraphQL arguments\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/guides/relay-resolvers.md#2025-04-18_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nconst data = useLazyLoadQuery(graphql`\n    query myQuery($id: ID, $my_arg: String!) {\n        node(id: $id) {\n           ... on MyType {\n                my_resolver_field(my_js_arg: \"World\", my_qql_arg: 2.5)\n           }\n        }\n   }\n`, { id: \"some id\" });\n```\n\n----------------------------------------\n\nTITLE: Relay Mutation with Updater Function\nDESCRIPTION: This JavaScript code defines a Relay mutation using `commitMutation` and includes an `updater` function. The updater reads an updatable fragment from the store, then updates the `is_new_comment` field on a newly created `Feedback` object.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/guided-tour/updating-data/imperatively-modifying-store-data.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// CreateFeedback.js\nimport type {Environment} from 'react-relay';\nimport type {\n  FeedbackCreateData,\n  CreateFeedbackMutation,\n  CreateFeedbackMutation$data,\n} from 'CreateFeedbackMutation.graphql';\n\nconst {commitMutation, graphql} = require('react-relay');\nconst {ConnectionHandler} = require('relay-runtime');\n\nfunction commitCreateFeedbackMutation(\n  environment: Environment,\n  input: FeedbackCreateData,\n) {\n  return commitMutation<FeedbackCreateData>(environment, {\n    mutation: graphql`\n      mutation CreateFeedbackMutation($input: FeedbackCreateData!) {\n        feedback_create(input: $input) {\n          feedback {\n            id\n            # Step 1: in the mutation response, spread an updatable fragment (defined below).\n            # This updatable fragment will select the fields that we want to update on this\n            # particular feedback object.\n            ...CreateFeedback_updatable_feedback\n          }\n        }\n      }\n    `,\n    variables: {input},\n\n    // Step 2: define an updater\n    updater: (store: RecordSourceSelectorProxy, response: ?CreateCommentMutation$data) => {\n      // Step 3: Access and nullcheck the feedback object.\n      // Note that this could also have been achieved with the @required directive.\n      const feedbackRef = response?.feedback_create?.feedback;\n      if (feedbackRef == null) {\n        return;\n      }\n\n      // Step 3: call store.readUpdatableFragment\n      const {updatableData} = store.readUpdatableFragment(\n          // Step 4: Pass it a fragment literal, where the fragment contains the @updatable directive.\n          // This fragment selects the fields that you wish to update on the feedback object.\n          // In step 1, we spread this fragment in the query response.\n          graphql`\n            fragment CreateFeedback_updatable_feedback on Feedback @updatable {\n              is_new_comment\n            }\n          `,\n          // Step 5: Pass the fragment reference.\n          feedbackRef\n        );\n\n      // Step 6: Mutate the updatableData object!\n      updatableData.is_new_comment = true;\n    },\n  });\n}\n\nmodule.exports = {commit: commitCreateFeedbackMutation};\n```\n\n----------------------------------------\n\nTITLE: Configuring Query Cache Expiration Time in Relay Store\nDESCRIPTION: An example showing how to configure the query cache expiration time when creating a new Relay Store. This setting determines how long cached data remains fresh before being considered stale, even without explicit invalidation.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/guided-tour/reusing-cached-data/staleness-of-data.md#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst store = new Store(source, {queryCacheExpirationTime: 5 * 60 * 1000 });\n```\n\n----------------------------------------\n\nTITLE: Inserting Edge into Connection with ConnectionHandler\nDESCRIPTION: Shows how to add an edge to either the beginning or end of a connection using ConnectionHandler.insertEdgeBefore and ConnectionHandler.insertEdgeAfter. These methods mutate the connection in place.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/guided-tour/list-data/updating-connections.md#2025-04-18_snippet_9\n\nLANGUAGE: js\nCODE:\n```\nconst {ConnectionHandler} = require('relay-runtime');\n\nfunction updater(store: RecordSourceSelectorProxy) {\n  const storyRecord = store.get(storyID);\n  const connectionRecord = ConnectionHandler.getConnection(\n    storyRecord,\n    'StoryComponent_story_comments_connection',\n  );\n\n  const newEdge = (...);\n\n  // Add edge to the end of the connection\n  ConnectionHandler.insertEdgeAfter(\n    connectionRecord,\n    newEdge,\n  );\n\n  // Add edge to the beginning of the connection\n  ConnectionHandler.insertEdgeBefore(\n    connectionRecord,\n    newEdge,\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Retaining Queries in Relay to Prevent Garbage Collection\nDESCRIPTION: This code demonstrates how to manually retain a query in Relay to prevent its data from being garbage collected. It shows the retain operation and how to dispose of the retained query when it's no longer needed.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/guided-tour/reusing-cached-data/presence-of-data.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// Retain query; this will prevent the data for this query and\n// variables from being garbage collected by Relay\nconst disposable = environment.retain(queryDescriptor);\n\n// Disposing of the disposable will release the data for this query\n// and variables, meaning that it can be deleted at any moment\n// by Relay's garbage collection if it hasn't been retained elsewhere\ndisposable.dispose();\n```\n\n----------------------------------------\n\nTITLE: Converting QueryRenderer to useLazyLoadQuery in Relay Hooks\nDESCRIPTION: Example of converting a QueryRenderer to useLazyLoadQuery Hook which fetches data during render. The loading and error states are now handled by React Suspense and Error Boundaries.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v13.0.0/migration-and-compatibility/relay-hooks-and-legacy-container-apis.md#2025-04-18_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport * as React from 'React';\nimport {graphql, useLazyLoadQuery} from 'react-relay';\n\nexport default function Home() {\n  const data = useLazyLoadQuery(\n    graphql`\n      query HomeQuery($id: ID!) {\n        user(id: $id) {\n          name\n        }\n      }\n    `,\n    {id: 4},\n  );\n\n return <h1>{data.user?.name}</h1>;\n}\n```\n\n----------------------------------------\n\nTITLE: User Selection Toggle Component with Store Updates\nDESCRIPTION: React component implementing a toggle button that updates a user's selection state in the Relay store using commitLocalUpdate\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/guided-tour/updating-data/imperatively-modifying-store-data.md#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport type {RecordSourceSelectorProxy} from 'react-relay';\nimport type {UserSelectToggle_viewer$key} from 'UserSelectToggle_viewer.graphql';\n\nconst {useRelayEnvironment, commitLocalUpdate} = require('react-relay');\n\nfunction UserSelectToggle({ userId, viewerRef }: {\n  userId: string,\n  viewerRef: UserSelectToggle_viewer$key,\n}) {\n  const viewer = useFragment(graphql`\n    fragment UserSelectToggle_viewer on Viewer {\n      user(user_id: $user_id) {\n        id\n        name\n        is_selected\n        ...UserSelectToggle_updatable_user\n      }\n    }\n  `, viewerRef);\n\n  const environment = useRelayEnvironment();\n\n  return <button\n    onClick={() => {\n      commitLocalUpdate(\n        environment,\n        (store: RecordSourceSelectorProxy) => {\n          const userRef = viewer.user;\n          if (userRef == null) {\n            return;\n          }\n\n          const {updatableData} = store.readUpdatableFragment(\n            graphql`\n              fragment UserSelectToggle_updatable_user on User @updatable {\n                is_selected\n              }\n            `,\n            userRef\n          );\n\n          updatableData.is_selected = !viewer?.user?.is_selected;\n        }\n      );\n    }}\n  >\n    {viewer?.user?.is_selected ? 'Deselect' : 'Select'} {viewer?.user?.name}\n  </button>\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring Fragment Arguments with Default Values in Relay\nDESCRIPTION: Shows how to declare fragment arguments with default values using @argumentDefinitions, making the arguments optional when including the fragment.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/guided-tour/rendering/variables.md#2025-04-18_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nfunction PictureComponent(props) {\n  const data = useFragment(\n    graphql`\n      fragment PictureComponent_user on User\n        @argumentDefinitions(scale: {type: \"Float!\", defaultValue: 2.0}) {\n\n        # $scale is a local variable here, declared above\n        # as an argument scale, of type Float! with a default value of 2.0\n        profile_picture(scale: $scale) {\n          uri\n        }\n      }\n    `,\n    props.user,\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Defining EntryPointContainer React Component in JavaScript\nDESCRIPTION: This code snippet defines the EntryPointContainer function component. It takes two props: entryPointReference (a preloaded EntryPoint) and props (additional runtime props). The component is used to render a preloaded EntryPoint in a Relay application.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/api-reference/entrypoint-apis/entrypoint-container.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nfunction EntryPointContainer({\n  entryPointReference,\n  props,\n}: {\n  +entryPointReference: PreloadedEntryPoint<TEntryPointComponent>,\n  +props: TRuntimeProps,\n}): ReactElement\n```\n\n----------------------------------------\n\nTITLE: Mutation Testing in Relay\nDESCRIPTION: Demonstrates testing mutation functions by using mock environments and verifying completion callbacks\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/guides/testing-relay-components.md#2025-04-18_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\ntest('it should send mutation', () => {\n  const environment = createMockEnvironment();\n  const onCompleted = jest.fn();\n  sendMutation(environment, onCompleted, jest.fn(), {});\n  const operation = environment.mock.getMostRecentOperation();\n```\n\n----------------------------------------\n\nTITLE: Configuring Relay Connection Interface in TypeScript\nDESCRIPTION: Demonstrates how to customize the Connection Interface implementation by injecting custom field names that match your schema's connection specification. This configuration must align with the Relay Compiler Config settings.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/api-reference/relay-runtime/runtime-configuration.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ConnectionInterface } from 'relay-runtime';\n\n// Note: This must match the values configured in the Relay compiler config.\nConnectionInterface.inject({\n  END_CURSOR: 'end_cursor',\n  HAS_NEXT_PAGE: 'has_next_page',\n  HAS_PREV_PAGE: 'has_previous_page',\n  START_CURSOR: 'start_cursor',\n  PAGE_INFO: 'page_info',\n  NODE: 'node',\n  CURSOR: 'cursor',\n  EDGES: 'edges',\n  PAGE_INFO_TYPE: 'PageInfo',\n});\n```\n\n----------------------------------------\n\nTITLE: Accumulating Loading States with Suspense\nDESCRIPTION: This code demonstrates how to use a single Suspense component to manage the loading states of multiple components (MainContent and SecondaryContent). The LoadingGlimmer fallback will be displayed until both MainContent and SecondaryContent are fully loaded, providing a unified loading experience.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/guided-tour/rendering/loading-states.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * App.react.js\n */\n\nconst React = require('React');\nconst {Suspense} = require('React');\n\nfunction App() {\n  return (\n    // A LoadingGlimmer for all content is rendered via the Suspense fallback\n    <Suspense fallback={<LoadingGlimmer />}>\n      <MainContent />\n      <SecondaryContent /> {/* SecondaryContent can also suspend */}\n    </Suspense>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Defining GraphQL Schema for Star Wars Data\nDESCRIPTION: This GraphQL schema defines the structure for querying Star Wars data, including factions and ships. It includes interfaces for Node with ID, types for Faction and Ship, and types for Connection and PageInfo for pagination.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v13.0.0/guides/graphql-server-specification.md#2025-04-18_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\n\"\"\"\ninterface Node {\n  id: ID!\n}\n\ntype Faction implements Node {\n  id: ID!\n  name: String\n  ships: ShipConnection\n}\n\ntype Ship implements Node {\n  id: ID!\n  name: String\n}\n\ntype ShipConnection {\n  edges: [ShipEdge]\n  pageInfo: PageInfo!\n}\n\ntype ShipEdge {\n  cursor: String!\n  node: Ship\n}\n\ntype PageInfo {\n  hasNextPage: Boolean!\n  hasPreviousPage: Boolean!\n  startCursor: String\n  endCursor: String\n}\n\ntype Query {\n  rebels: Faction\n  empire: Faction\n  node(id: ID!): Node\n}\n\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Converting QueryRenderer to useLazyLoadQuery in JavaScript\nDESCRIPTION: Demonstrates how to replace QueryRenderer with useLazyLoadQuery for fetching data. It removes the need for explicit loading and error handling, which are managed by React Suspense and Error Boundaries. Initialize the RelayEnvironmentProvider beforehand.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/migration-and-compatibility/relay-hooks-and-legacy-container-apis.md#2025-04-18_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport * as React from 'React';\nimport {graphql, useLazyLoadQuery} from 'react-relay';\n\nexport default function Home() {\n  const data = useLazyLoadQuery(\n    graphql`\n      query HomeQuery($id: ID!) {\n        user(id: $id) {\n          name\n        }\n      }\n    `,\n    {id: 4},\n  );\n\n return <h1>{data.user?.name}</h1>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Simple Mock Resolvers in JavaScript\nDESCRIPTION: This snippet demonstrates how to create basic mock resolvers for ID and String types using MockPayloadGenerator. It shows how to return default values for scalar fields.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/guides/testing-relay-components.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  ID() {\n    // Return mock value for a scalar filed with type ID\n    return 'my-id';\n  },\n  String() {\n    // Every scalar field with type String will have this default value\n    return \"Lorem Ipsum\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving a plural root field from the Relay Store\nDESCRIPTION: This snippet shows how to retrieve a root field that represents a collection from the Relay Store using the fieldName, returning an array of RecordProxies.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/api-reference/relay-runtime/store.md#2025-04-18_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst nodes = store.getPluralRootField('nodes');\n```\n\n----------------------------------------\n\nTITLE: Testing Relay Fragment Components\nDESCRIPTION: Demonstrates testing individual fragment components by wrapping them in a test query. Shows how to mock data for specific fragments and verify rendering.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/guides/testing-relay-components.md#2025-04-18_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\ntest('Fragment', () => {\n  const environment = createMockEnvironment();\n  const TestRenderer = () => {\n    const data = useLazyLoadQuery(\n      graphql`\n        query TestQuery @relay_test_operation {\n          myData: node(id: \"test-id\") {\n            ...MyFragment\n          }\n        }\n      `,\n      {},\n    );\n    return <MyFragmentComponent myData={data.myData} />\n  };\n\n  const renderer = ReactTestRenderer.create(\n    <RelayEnvironmentProvider environment={environment}>\n      <Suspense fallback=\"Loading...\">\n        <TestRenderer />\n      </Suspense>\n    </RelayEnvironmentProvider>\n  );\n\n  ReactTestRenderer.act(() => {\n    environment.mock.resolveMostRecentOperation(operation =>\n      MockPayloadGenerator.generate(operation),\n    );\n  });\n\n  expect(renderer).toMatchSnapshot();\n});\n```\n\n----------------------------------------\n\nTITLE: Converting Fragment Container to useFragment Hook\nDESCRIPTION: Shows the migration from a Fragment Container to the useFragment Hook, maintaining the same fragment query functionality.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/migration-and-compatibility/relay-hooks-and-legacy-container-apis.md#2025-04-18_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport * as React from 'React';\nimport {graphql, createFragmentContainer} from 'react-relay';\n\nfunction UserComponent(props: Props) {\n  const user = props.user;\n  return (\n    <>\n      <h1>{user.name}</h1>\n      <div>\n        <img src={user.profile_picture?.uri} />\n      </div>\n    </>\n  );\n}\n\nexport default createFragmentContainer(UserComponent, {\n  user: graphql`\n    fragment UserComponent_user on User {\n      name\n      age\n      profile_picture(scale: 2) {\n        uri\n      }\n    }\n  `,\n});\n```\n\nLANGUAGE: jsx\nCODE:\n```\nimport * as React from 'React';\nimport {graphql, useFragment} from 'react-relay';\n\nexport default function UserComponent(props: Props) {\n  const data = useFragment(\n    graphql`\n      fragment UserComponent_user on User {\n        name\n        profile_picture(scale: $scale) {\n          uri\n        }\n      }\n    `,\n    props.user,\n  );\n\n  return (\n    <>\n      <h1>{data.name}</h1>\n      <div>\n        <img src={data.profile_picture?.uri} />\n      </div>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Chaining @required Fields in Fragment\nDESCRIPTION: Example demonstrating how to chain @required directives for deeply nested fields with null checking\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/guides/required-directive.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst user = useFragment(graphql`\n  fragment MyUser on User {\n    name @required(action: LOG)\n    profile_picture @required(action: LOG) {\n      url @required(action: LOG)\n    }\n  }`, key);\n if(user == null) {\n   return null;\n }\n return <img src={user.profile_picture.url} alt={user.name} />\n```\n\n----------------------------------------\n\nTITLE: Mutation Response Format\nDESCRIPTION: Example of a successful mutation response showing the updated feedback data.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/guided-tour/updating-data/graphql-mutations.md#2025-04-18_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"feedback_like\": {\n    \"feedback\": {\n      \"id\": \"feedback-id\",\n      \"viewer_does_like\": true,\n      \"like_count\": 1,\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Mutations with useMutation Hook in React Relay\nDESCRIPTION: Example showing how to use the useMutation hook to execute a GraphQL mutation in a React component. The snippet demonstrates creating a like button that triggers a mutation with variables and handles loading states.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-experimental/RelayHooks-ApiReference.md#2025-04-18_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nimport type {FeedbackLikeMutation} from 'FeedbackLikeMutation.graphql';\n\nconst React = require('React');\nconst {graphql, useMutation} = require('react-relay/hooks');\n\nfunction LikeButton() {\n  const [commit, isInFlight] = useMutation<FeedbackLikeMutation>(graphql`\n    mutation FeedbackLikeMutation($input: FeedbackLikeData!) {\n      feedback_like(data: $input) {\n        feedback {\n          id\n          viewer_does_like\n          like_count\n        }\n      }\n    }\n  `);\n  if (isInFlight) {\n    return <Spinner />;\n  }\n  return (\n    <button\n      onClick={() => {\n        commit({\n          variables: {\n            input: {\n              id: '123',\n              text: 'text',\n            },\n          },\n          onCompleted(data) {\n            console.log(data);\n          },\n        });\n      }}\n    />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Newsfeed with GraphQL\nDESCRIPTION: This GraphQL query fetches the top story's title, summary, creation date, poster details (name and profile picture URL), and image URL. It is used to retrieve data for the newsfeed component.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/tutorial/fragments-1.md#2025-04-18_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nconst NewsfeedQuery = graphql`\n  query NewsfeedQuery {\n    topStory {\n      title\n      summary\n      // change-line\n      createdAt // Add this line\n      poster {\n        name\n        profilePicture {\n          url\n        }\n      }\n      image {\n        url\n      }\n    }\n  }\n`;\n```\n\n----------------------------------------\n\nTITLE: Implementing a Fragment Component in Relay\nDESCRIPTION: This code snippet shows how to create a fragment component in Relay that requests a specific piece of data (username). Fragment components will suspend if their required data is missing during render.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v13.0.0/guided-tour/reusing-cached-data/rendering-partially-cached-data.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * UsernameComponent.react.js\n *\n * Fragment Component\n */\n\nimport type {UsernameComponent_user$key} from 'UsernameComponent_user.graphql';\n\nconst React = require('React');\nconst {graphql, useFragment} = require('react-relay');\n\ntype Props = {\n  user: UsernameComponent_user$key,\n};\n\nfunction UsernameComponent(props: Props) {\n  const user = useFragment(\n    graphql`\n      fragment UsernameComponent_user on User {\n        username\n      }\n    `,\n    props.user,\n  );\n  return (...);\n}\n\nmodule.exports = UsernameComponent;\n```\n\n----------------------------------------\n\nTITLE: Defining a Simple Relay Resolver in TypeScript\nDESCRIPTION: A basic example showing how to define a Relay Resolver that adds a 'greeting' field to the Query type. The resolver returns a simple string and doesn't require any inputs.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/guides/relay-resolvers/introduction.md#2025-04-18_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n/**\n * @RelayResolver Query.greeting: String\n */\nexport function greeting(): string {\n  return \"Hello World\";\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Feedback Mutation with Updater Function in React Relay\nDESCRIPTION: Implements a mutation with an updater function to set a client-side field after successful mutation completion\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/guided-tour/updating-data/imperatively-modifying-store-data.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nfunction commitCreateFeedbackMutation(\n  environment: Environment,\n  input: FeedbackCreateData,\n) {\n  return commitMutation<FeedbackCreateData>(environment, {\n    mutation: graphql`\n      mutation CreateFeedbackMutation($input: FeedbackCreateData!) {\n        feedback_create(input: $input) {\n          feedback {\n            id\n            ...CreateFeedback_updatable_feedback\n          }\n        }\n      }\n    `,\n    variables: {input},\n    updater: (store: RecordSourceSelectorProxy, response: ?CreateCommentMutation$data) => {\n      const feedbackRef = response?.feedback_create?.feedback;\n      if (feedbackRef == null) {\n        return;\n      }\n\n      const {updatableData} = store.readUpdatableFragment(\n        graphql`\n          fragment CreateFeedback_updatable_feedback on Feedback @updatable {\n            is_new_comment\n          }\n        `,\n        feedbackRef\n      );\n\n      updatableData.is_new_comment = true;\n    },\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Composing Fragments with Type-Safe References in TypeScript\nDESCRIPTION: This example shows how Relay enables type-safe fragment composition in TypeScript. The parent component spreads a child component's fragment, and the generated types ensure that the correct fragment reference is passed to the child component.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/guides/type-emission.md#2025-04-18_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ExampleFragmentComponent } from \"./ExampleFragmentComponent\"\n\n/**\n * import { ExampleFragmentComponent_artist$fragmentType } from \"ExampleFragmentComponent_artist.graphql\";\n *\n * export type ExampleQuery$data = {\n *   readonly artist?: {\n *     readonly name: ?string,\n *     readonly \" $fragmentSpreads\": ExampleFragmentComponent_artist$fragmentType\n *   }\n * }\n * export type ExampleQuery$variables = {\n *   readonly artistID: string\n * }\n * export type ExampleQuery = {\n *   readonly variables: ExampleQuery$variables\n *   readonly response: ExampleQuery$data\n * }\n */\n\n// data is of type ExampleQuery$data\nconst data = useLazyLoadQuery(\n  graphql`\n    query ExampleQuery($artistID: ID!) {\n      artist(id: $artistID) {\n        name\n        ...ExampleFragmentComponent_artist\n      }\n    }\n  `,\n  {artistID: 'banksy'},\n);\n\n// Here only `data.artist.name` is directly visible,\n// the marker prop $fragmentSpreads indicates that `data.artist`\n// can be used for the component expecting this fragment spread.\nreturn <ExampleFragmentComponent artist={data.artist} />;\n```\n\n----------------------------------------\n\nTITLE: Refreshing Queries with useLazyLoadQuery and Suspense in React and Relay\nDESCRIPTION: This code demonstrates how to refresh a query using useLazyLoadQuery in Relay. It uses React's useState and useCallback hooks to manage refresh state and trigger re-renders with updated fetch options. The approach leverages Suspense for loading states.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/guided-tour/refetching/refreshing-queries.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * App.react.js\n */\nconst AppQuery = require('__generated__/AppQuery.graphql');\n\nfunction App(props: Props) {\n  const variables = {id: '4'};\n  const [refreshedQueryOptions, setRefreshedQueryOptions] = useState(null);\n\n  const refresh = useCallback(() => {\n    // Trigger a re-render of useLazyLoadQuery with the same variables,\n    // but an updated fetchKey and fetchPolicy.\n    // The new fetchKey will ensure that the query is fully\n    // re-evaluated and refetched.\n    // The fetchPolicy ensures that we always fetch from the network\n    // and skip the local data cache.\n    setRefreshedQueryOptions(prev => ({\n      fetchKey: (prev?.fetchKey ?? 0) + 1,\n      fetchPolicy: 'network-only',\n    }));\n  }, [/* ... */]);\n\n  return (\n    <React.Suspense fallback=\"Loading query...\">\n      <MainContent\n        refresh={refresh}\n        queryOptions={refreshedQueryOptions ?? {}}\n        variables={variables}\n      />\n    </React.Suspense>\n  );\n```\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * MainContent.react.js\n */\n\n// Fetches and renders the query, given the fetch options\nfunction MainContent(props) {\n  const {refresh, queryOptions, variables} = props;\n  const data = useLazyLoadQuery(\n    graphql`\n      query AppQuery($id: ID!) {\n        user(id: $id) {\n          name\n          friends {\n            count\n          }\n        }\n      }\n    `,\n    variables,\n    queryOptions,\n  );\n\n  return (\n    <>\n      <h1>{data.user?.name}</h1>\n      <div>Friends count: {data.user.friends?.count}</div>\n      <Button\n        onClick={() => refresh()}>\n        Fetch latest count\n      </Button>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up Retry in the Application Component\nDESCRIPTION: This example shows how to implement the App component that utilizes ErrorBoundaryWithRetry to handle errors and allow users to retry fetching data.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/guided-tour/rendering/error-states.md#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * App.react.js\n */\n\nconst ErrorBoundaryWithRetry = require('ErrorBoundaryWithRetry');\nconst React = require('React');\n\nconst MainContent = require('./MainContent.react');\n\nconst query = require('__generated__/MainContentQuery.graphql');\n\n// NOTE: This is NOT actual production code;\n// it is only used to illustrate example\nfunction App(props) {\n  // E.g., initialQueryRef provided by router\n  const [queryRef, loadQuery] = useQueryLoader(query, props.initialQueryRef);\n\n  return (\n    <ErrorBoundaryWithRetry\n      // On retry we call loadQuery again, which will update\n      // the value of queryRef from useQueryLoader with a new\n      // fresh query reference\n      onRetry={() => loadQuery(/* ... */)}\n      fallback={({error, retry}) =>\n        <>\n          <ErrorUI error={error} />\n          {/* Render a button to retry; this will attempt to re-render the\n          content inside the boundary, i.e. the query component */}\n          <Button onPress={retry}>Retry</Button>\n        </>\n      }>\n      {/* The value of queryRef will be updated after calling\n      loadQuery again */}\n      <MainContent queryRef={queryRef} />\n    </ErrorBoundaryWithRetry>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Relay Component with Preloaded Queries\nDESCRIPTION: This code snippet demonstrates the necessary steps to test a Relay component using preloaded queries. It involves creating a mock Relay environment, configuring a query resolver to generate mock responses, and recording a pending operation. The component is then rendered within a `RelayEnvironmentProvider` and the loading is triggered, followed by assertions to validate the expected behavior.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v13.0.0/guides/testing-relay-with-preloaded-queries.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst {RelayEnvironmentProvider} = require('react-relay');\nconst { MockPayloadGenerator, createMockEnvironment } = require('relay-test-utils');\nconst {render} = require('testing-library-react');\n// at the time of writing, act is not re-exported by our internal testing-library-react\n// but is re-exported by the \"external\" version\nconst {act} = require('ReactTestUtils');\ntest(\"...\") => {\n  // arrange\n  const environment = createMockEnvironment();\n  environment.mock.queueOperationResolver(operation => {\n      return MockPayloadGenerator.generate(operation, {\n        CurrencyAmount() {\n          return {\n            formatted_amount: \"1234$\",\n          };\n        },\n      });\n    });\n  const query = YourComponentGraphQLQueryGoesHere; // can be the same, or just identical\n  const variables = {\n    // ACTUAL variables for the invocation goes here\n  };\n  environment.mock.queuePendingOperation(YourComponentGraphQLQuery, variables);\n\n // act\n  const {getByTestId, ..otherStuffYouMightNeed} = render(\n    <RelayEnvironmentProvider environment={environment}>\n        <YourComponent data-testid=\"1234\" {...componentPropsIfAny}/>\n    </RelayEnvironmentProvider>\n  );\n  // trigger the loading - click a button, emit an event, etc. or ...\n  act(() => jest.runAllImmediates()); // ... if loadQuery is in the useEffect()\n  // assert\n  // your assertions go here\n});\n```\n\n----------------------------------------\n\nTITLE: Suspense for Multiple Components\nDESCRIPTION: This example illustrates how to wrap multiple components (MainContent and SecondaryContent) within a single Suspense boundary. This allows for displaying a single loading state until all wrapped components are ready to render. This approach provides coordinated loading and avoids flickering by waiting for all content to load before painting.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/guided-tour/rendering/loading-states.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * App.react.js\n */\n\nconst React = require('React');\nconst {Suspense} = require('React');\n\nfunction App() {\n  return (\n    // A LoadingGlimmer for all content is rendered via the Suspense fallback\n    <Suspense fallback={<LoadingGlimmer />}>\n      <MainContent />\n      <SecondaryContent /> {/* SecondaryContent can also suspend */}\n    </Suspense>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing and Adding Server-Returned Edge to Connection\nDESCRIPTION: Shows how to access a connection record, retrieve an edge from the server payload, and prepare it for insertion into the connection using ConnectionHandler utilities in an updater function.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/guided-tour/list-data/updating-connections.md#2025-04-18_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst {ConnectionHandler} = require('relay-runtime');\n\nfunction updater(store: RecordSourceSelectorProxy) {\n  const storyRecord = store.get(storyID);\n  const connectionRecord = ConnectionHandler.getConnection(\n    storyRecord,\n    'StoryComponent_story_comments_connection',\n  );\n\n  // Get the payload returned from the server\n  const payload = store.getRootField('comment_create');\n\n  // Get the edge inside the payload\n  const serverEdge = payload.getLinkedRecord('comment_edge');\n\n  // Build edge for adding to the connection\n  const newEdge = ConnectionHandler.buildConnectionEdge(\n    store,\n    connectionRecord,\n    serverEdge,\n  );\n\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Integrating Sidebar Component with Relay Environment in React\nDESCRIPTION: This snippet demonstrates how to integrate a Sidebar component into an existing React application that utilizes Relay for state management. The Sidebar contains the filterable contacts list.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/tutorial/refetchable-fragments.md#2025-04-18_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n\"// change-line\\nimport Sidebar from './Sidebar';\\n\\nexport default function App(): React.ReactElement {\\n  return (\\n    <RelayEnvironment>\\n      <React.Suspense fallback={<LoadingSpinner />}>\\n        <div className=\\\"app\\\">\\n          <Newsfeed />\\n          // change-line\\n          <Sidebar />\\n        </div>\\n      </React.Suspense>\\n    </RelayEnvironment>\\n  );\\n}\\n\"\n```\n\n----------------------------------------\n\nTITLE: Extending GraphQL Types for Client-Only Data\nDESCRIPTION: This snippet shows how to use the `extend` keyword in GraphQL to add fields to existing types, allowing for client-only data representation. In this example, a new Boolean field, `is_new_comment`, is added to the `Comment` type to indicate new comments. It is presumed that this field will be used within client components and updated as needed via Relay APIs.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/guided-tour/updating-data/client-only-data.md#2025-04-18_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nextend type Comment {\n  is_new_comment: Boolean\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing User.fullName Resolver with readFragment() in Relay\nDESCRIPTION: Example of using readFragment() to create a derived User.fullName field that combines firstName and lastName. The readFragment() function reads data from the GraphQL fragment and ensures the resolver recomputes when fragment data changes.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/api-reference/relay-resolvers/runtime-functions.md#2025-04-18_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport {readFragment} from \"relay-runtime\";\n\n/**\n * @RelayResolver User.fullName: String\n * @rootFragment UserFullNameFragment\n */\nexport function fullName(key: UserFullNameFragment$key): string {\n  const user = readFragment(graphql`\n    fragment UserFullNameFragment on User {\n      firstName\n      lastName\n    }\n  `, key);\n  return `${user.firstName} ${user.lastName}`;\n}\n```\n\n----------------------------------------\n\nTITLE: Relay Mutation Directives Overview\nDESCRIPTION: Key directives for manipulating connection edges in Relay mutations: @appendEdge for adding items to the end, @prependEdge for adding items to the beginning, and @deleteEdge for removing items from connections.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/tutorial/mutations-updates.md#2025-04-18_snippet_16\n\nLANGUAGE: markdown\nCODE:\n```\n@appendEdge, @prependEdge, @deleteEdge\n```\n\n----------------------------------------\n\nTITLE: Using ErrorBoundary to Wrap Main Components\nDESCRIPTION: This snippet shows how to wrap multiple components within an Error Boundary, providing fallback UI in case of errors occurring in either of the wrapped components. The fallback is specified as a function that receives the error.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/guided-tour/rendering/error-states.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst ErrorBoundary = require('ErrorBoundary');\nconst React = require('React');\n\nconst MainContent = require('./MainContent.react');\nconst SecondaryContent = require('./SecondaryContent.react');\n\nfunction App() {\n  return (\n    // Render an ErrorSection if an error occurs within\n    // MainContent or Secondary Content\n    <ErrorBoundary fallback={error => <ErrorUI error={error} />}> \n      <MainContent />\n      <SecondaryContent />\n    </ErrorBoundary>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing StoryCommentsSection with Pagination\nDESCRIPTION: Create a component that displays comments with pagination, using Relay's Connection pattern to fetch and display the first three comments and a 'Load More' button\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/tutorial/connections-pagination.md#2025-04-18_snippet_2\n\nLANGUAGE: graphql\nCODE:\n```\nconst StoryCommentsSectionFragment = graphql`\n fragment StoryCommentsSectionFragment on Story {\n  comments(first: 3) {\n    edges {\n      node {\n        ...CommentFragment\n      }\n    }\n    pageInfo {\n      hasNextPage\n    }\n  }\n }\n`;\n```\n\nLANGUAGE: javascript\nCODE:\n```\nfunction StoryCommentsSection({story}) {\n  const data = useFragment(StoryCommentsSectionFragment, story);\n  const onLoadMore = () => {/* TODO */};\n  return (\n    <>\n      {data.comments.edges.map(commentEdge =>\n        <Comment comment={commentEdge.node} />\n      )}\n      {data.comments.pageInfo.hasNextPage && (\n        <LoadMoreCommentsButton onClick={onLoadMore} />\n      )}\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Fragment Arguments in ImageFragment using GraphQL\nDESCRIPTION: This code snippet demonstrates defining fragment arguments (`width` and `height`) in the `ImageFragment` using the `@argumentDefinitions` directive. This allows parent components to specify the desired image size.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/tutorial/fragments-1.md#2025-04-18_snippet_12\n\nLANGUAGE: graphql\nCODE:\n```\nconst ImageFragment = graphql`\n  fragment ImageFragment on Image\n    @argumentDefinitions(\n      // color1\n      width: {\n        // color2\n        type: \"Int\",\n        // color3\n        defaultValue: null\n      }\n      height: {\n        type: \"Int\",\n        defaultValue: null\n      }\n    )\n  {\n    url(\n      // color4\n      width: $width,\n      // color4\n      height: $height\n    )\n    altText\n  }\n`;\n```\n\n----------------------------------------\n\nTITLE: Manipulating Edges in a Connection in JavaScript\nDESCRIPTION: Shows how to create an edge and insert it into a connection using ConnectionHandler.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/api-reference/relay-runtime/store.md#2025-04-18_snippet_30\n\nLANGUAGE: javascript\nCODE:\n```\nconst user = store.get(userID);\nconst friends = ConnectionHandler.getConnection(user, 'FriendsFragment_friends');\nconst newFriend = store.get(newFriendId);\nconst edge = ConnectionHandler.createEdge(store, friends, newFriend, 'UserEdge');\n\n// No cursor provided, append the edge at the end.\nConnectionHandler.insertEdgeAfter(friends, edge);\n\n// No cursor provided, insert the edge at the front:\nConnectionHandler.insertEdgeBefore(friends, edge);\n```\n\n----------------------------------------\n\nTITLE: Composing Derived Resolvers in Relay with TypeScript\nDESCRIPTION: This snippet illustrates the composition of derived resolvers. The 'isValid' function checks if a checkout item has a valid price and quantity, while 'canCheckout' verifies if all cart items are valid. Both leverage root fragments and the readFragment method from Relay. They depend on relay-runtime and require corresponding CheckoutItemFragment and ShoppingCartFragment GraphQL fragments.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/guides/relay-resolvers/derived-fields.md#2025-04-18_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\n/**\n * @RelayResolver CheckoutItem.isValid: Boolean\n * @rootFragment CheckoutItemFragment\n */\nexport function isValid(key): boolean {\n  const item = readFragment(graphql`\n    fragment CheckoutItemFragment on CheckoutItem {\n      product {\n        price\n      }\n      quantity\n    }\n  `, key);\n  return item.product.price * item.quantity > 0;\n}\n\n/**\n * @RelayResolver ShoppingCart.canCheckout: Boolean\n * @rootFragment ShoppingCartFragment\n */\nexport function canCheckout(key): boolean {\n  const cart = readFragment(graphql`\n    fragment ShoppingCartFragment on ShoppingCart {\n      items {\n        isValid\n      }\n    }\n  `, key);\n  return cart.items.every(item => item.isValid);\n}\n```\n\n----------------------------------------\n\nTITLE: Adding New Field to ImageFragment (GraphQL)\nDESCRIPTION: Adding the altText field to ImageFragment to enhance accessibility. This demonstrates how fragments allow you to update a component's data requirements in a single place.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/tutorial/fragments-1.md#2025-04-18_snippet_9\n\nLANGUAGE: graphql\nCODE:\n```\nconst ImageFragment = graphql`\n  fragment ImageFragment on Image {\n    url\n    // change-line\n    altText\n  }\n`;\n```\n\n----------------------------------------\n\nTITLE: Using useFragment Hook in Image Component\nDESCRIPTION: This code demonstrates how to use the useFragment hook to read fields from the ImageFragment and modify the Image component's props to accept a fragment key.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/tutorial/fragments-1.md#2025-04-18_snippet_8\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { useFragment } from 'react-relay';\nimport type { ImageFragment$key } from \"./__generated__/ImageFragment.graphql\";\n\ntype Props = {\n  image: ImageFragment$key;\n  ...\n};\n\nfunction Image({image}: Props) {\n  const data = useFragment(ImageFragment, image);\n  return <img key={data.url} src={data.url} ... />\n}\n```\n\n----------------------------------------\n\nTITLE: Express GraphQL Server with Persisted Queries\nDESCRIPTION: Server-side implementation showing how to use express-graphql with persisted queries middleware.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/guides/persisted-queries.md#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport express from 'express';\nimport {graphqlHTTP} from 'express-graphql';\nimport {persistedQueries} from 'express-graphql-persisted-queries';\nimport queryMap from './path/to/queryMap.json';\n\nconst app = express();\n\napp.use(\n  '/graphql',\n  persistedQueries({\n    queryMap,\n    queryIdKey: 'doc_id',\n  }),\n  graphqlHTTP({schema}),\n);\n```\n\n----------------------------------------\n\nTITLE: GraphQL Query Example\nDESCRIPTION: Shows how GraphQL allows specific field selection in queries and returns only requested data.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/tutorial/graphql.md#2025-04-18_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  person(id: \"24601\") {\n    name\n    occupation\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Mutation with Updaters in Relay to Modify Store Data\nDESCRIPTION: Complete implementation of a mutation that creates feedback and uses updater functions to set client-only fields. This example demonstrates using readUpdatableFragment to update the 'is_new_comment' field.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/guided-tour/updating-data/imperatively-modifying-store-data.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// CreateFeedback.js\nimport type {Environment} from 'react-relay';\nimport type {\n  FeedbackCreateData,\n  CreateFeedbackMutation,\n  CreateFeedbackMutation$data,\n} from 'CreateFeedbackMutation.graphql';\n\nconst {commitMutation, graphql} = require('react-relay');\nconst {ConnectionHandler} = require('relay-runtime');\n\nfunction commitCreateFeedbackMutation(\n  environment: Environment,\n  input: FeedbackCreateData,\n) {\n  return commitMutation<FeedbackCreateData>(environment, {\n    mutation: graphql`\n      mutation CreateFeedbackMutation($input: FeedbackCreateData!) {\n        feedback_create(input: $input) {\n          feedback {\n            id\n            # Step 1: in the mutation response, spread an updatable fragment (defined below).\n            # This updatable fragment will select the fields that we want to update on this\n            # particular feedback object.\n            ...CreateFeedback_updatable_feedback\n          }\n        }\n      }\n    `,\n    variables: {input},\n\n    // Step 2: define an updater\n    updater: (store: RecordSourceSelectorProxy, response: ?CreateCommentMutation$data) => {\n      // Step 3: Access and nullcheck the feedback object.\n      // Note that this could also have been achieved with the @required directive.\n      const feedbackRef = response?.feedback_create?.feedback;\n      if (feedbackRef == null) {\n        return;\n      }\n\n      // Step 3: call store.readUpdatableFragment\n      const {updatableData} = store.readUpdatableFragment(\n          // Step 4: Pass it a fragment literal, where the fragment contains the @updatable directive.\n          // This fragment selects the fields that you wish to update on the feedback object.\n          // In step 1, we spread this fragment in the query response.\n          graphql`\n            fragment CreateFeedback_updatable_feedback on Feedback @updatable {\n              is_new_comment\n            }\n          `,\n          // Step 5: Pass the fragment reference.\n          feedbackRef\n        );\n\n      // Step 6: Mutate the updatableData object!\n      updatableData.is_new_comment = true;\n    },\n  });\n}\n\nmodule.exports = {commit: commitCreateFeedbackMutation};\n```\n\n----------------------------------------\n\nTITLE: Accessing Connection Using ConnectionHandler.getConnection\nDESCRIPTION: Demonstrates how to access a connection record using the ConnectionHandler.getConnection API when the parent record is available. This method is useful in updater functions.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/guided-tour/list-data/updating-connections.md#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst {ConnectionHandler} = require('relay-runtime');\n\nfunction updater(store: RecordSourceSelectorProxy) {\n  // Get parent story record\n  // storyID is passed as input to the mutation/subscription\n  const storyRecord = store.get(storyID);\n\n  // Get the connection record from the parent\n  const connectionRecord = ConnectionHandler.getConnection(\n    storyRecord,\n    'StoryComponent_story_comments_connection',\n  );\n\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Data with GraphQL in JavaScript\nDESCRIPTION: Shows how to fetch the same story data using GraphQL in a single network request. This approach is more efficient and decouples the client and server logic.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/principles-and-architecture/thinking-in-graphql.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ngraphql.get(`query { stories { id, text } }`).then(\n  stories => {\n    console.log(stories);\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Getting Field Value in Relay Store\nDESCRIPTION: The `getValue` method fetches the value of a specified field from the current record, allowing optional argument passing for fields requiring variables.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/api-reference/relay-runtime/store.md#2025-04-18_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nconst name = viewer.getValue('name');\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst name = viewer.getValue('name', {arg: 'value'});\n```\n\n----------------------------------------\n\nTITLE: Basic GraphQL Query with Variables\nDESCRIPTION: Demonstrates a simple GraphQL query that uses a variable to fetch user data. The query declares an ID variable that is required for the user lookup.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/guided-tour/rendering/variables.md#2025-04-18_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nquery UserQuery($id: ID!) {\n  # The value of $id is used as input to the user() call:\n  user(id: $id) {\n    id\n    name\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Executing Mutations with commitMutation - React Relay - JavaScript\nDESCRIPTION: This snippet demonstrates how to use 'commitMutation' from 'react-relay' to execute a mutation for liking feedback. It imports required types and libraries, defines the mutation with 'graphql', and provides necessary variables. This function takes 'environment' as a parameter and returns a 'Disposable' object. Key prerequisites include Relay environment setup and relevant type imports from auto-generated GraphQL files.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/api-reference/relay-runtime/commit-mutation.md#2025-04-18_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport type {FeedbackLikeMutation} from 'FeedbackLikeMutation.graphql';\nconst React = require('React');\n\nconst {graphql, commitMutation} = require('react-relay');\n\nfunction likeFeedback(environment: IEnvironment): Disposable {\n  return commitMutation<FeedbackLikeMutation>(environment, {\n    mutation: graphql`\n      mutation FeedbackLikeMutation($input: FeedbackLikeData!) {\n        feedback_like(data: $input) {\n          feedback {\n            id\n            viewer_does_like\n            like_count\n          }\n        }\n      }\n    `,\n    variables: {\n      input: {\n        id: '123',\n      },\n    },\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Defining GraphQL Subscription Configuration Type in TypeScript\nDESCRIPTION: Type definition for GraphQL subscription configuration that specifies the structure for setting up GraphQL subscriptions in Relay. Includes cache configuration, subscription query, variables, and various callback handlers for subscription lifecycle events.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/api-reference/types/GraphQLSubscriptionConfig.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype GraphQLSubscriptionConfig<TSubscriptionPayload> = {\n  cacheConfig?: CacheConfig;\n  subscription: GraphQLTaggedNode;\n  variables: Record<string, any>;\n  onCompleted?: () => void;\n  onError?: (error: Error) => void;\n  onNext?: (payload: TSubscriptionPayload) => void;\n  updater?: SelectorStoreUpdater;\n}\n```\n\n----------------------------------------\n\nTITLE: Setting up Relay Environment and Rendering Component for Testing in JavaScript\nDESCRIPTION: This snippet demonstrates how to set up a mock Relay environment, configure query resolvers, queue pending operations, and render a component for testing using react-relay and testing-library/react.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/guides/testing-relay-with-preloaded-queries.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst {RelayEnvironmentProvider} = require('react-relay');\nconst {MockPayloadGenerator, createMockEnvironment} = require('relay-test-utils');\nconst {act, render} = require('@testing-library/react');\ntest(\"...\", () => {\n  // arrange\n  const environment = createMockEnvironment();\n  environment.mock.queueOperationResolver(operation => {\n      return MockPayloadGenerator.generate(operation, {\n        CurrencyAmount() {\n          return {\n            formatted_amount: \"1234$\",\n          };\n        },\n      });\n    });\n  const query = YourComponentGraphQLQueryGoesHere; // can be the same, or just identical\n  const variables = {\n    // ACTUAL variables for the invocation goes here\n  };\n  environment.mock.queuePendingOperation(YourComponentGraphQLQuery, variables);\n\n // act\n  const {getByTestId, ..otherStuffYouMightNeed} = render(\n    <RelayEnvironmentProvider environment={environment}>\n        <YourComponent data-testid=\"1234\" {...componentPropsIfAny}/>\n    </RelayEnvironmentProvider>\n  );\n  // trigger the loading - click a button, emit an event, etc. or ...\n  act(() => jest.runAllImmediates()); // ... if loadQuery is in the useEffect()\n  // assert\n  // your assertions go here\n});\n```\n\n----------------------------------------\n\nTITLE: Using Fragment in Image Component\nDESCRIPTION: Shows how to use useFragment hook to read fragment data in the Image component and define proper typing.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/tutorial/fragments-1.md#2025-04-18_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useFragment } from 'react-relay';\nimport type { ImageFragment$key } from \"./__generated__/ImageFragment.graphql\";\n\ntype Props = {\n  image: ImageFragment$key;\n  ...\n};\n\nfunction Image({image}: Props) {\n  const data = useFragment(ImageFragment, image);\n  return <img key={data.url} src={data.url} ... />\n}\n```\n\n----------------------------------------\n\nTITLE: Using Fetch Policies with React Relay\nDESCRIPTION: This snippet illustrates how to implement fetch policies using the `loadQuery` function in a React component defined by `react-relay`. The dependencies include React and Relay libraries, specifically using `require` to import React and `graphql`. The main parameter focuses on the `fetchPolicy`, which determines how and when data should be fetched from local cache versus network. Inputs are specified through the `queryRef` and `loadQuery` functions, while the outcomes ensure data retrieval aligning with the designated policy.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/guided-tour/reusing-cached-data/fetch-policies.md#2025-04-18_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst React = require('React');\nconst {graphql} = require('react-relay');\n\nfunction AppTabs() {\n  const [\n    queryRef,\n    loadQuery,\n  ] = useQueryLoader(HomeTabQuery);\n\n  const onSelectHomeTab = () => {\n    loadQuery({id: '4'}, {fetchPolicy: 'store-or-network'});\n  }\n\n  // ...\n}\n\n```\n\n----------------------------------------\n\nTITLE: Fixing TypeScript Error with useLazyLoadQuery\nDESCRIPTION: This TypeScript snippet demonstrates how to annotate the call to `useLazyLoadQuery` with types generated by Relay to resolve type errors. It shows importing the generated type and applying it to ensure `data` has the correct type.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/tutorial/queries-1.md#2025-04-18_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n// change-line\nimport type {NewsfeedQuery as NewsfeedQueryType} from './__generated__/NewsfeedQuery.graphql';\n\nfunction Newsfeed({}) {\n  const data = useLazyLoadQuery\n  // change-line\n  <NewsfeedQueryType>\n  (NewsfeedQuery, {});\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: GraphQL Mutation with @deleteEdge directive\nDESCRIPTION: This GraphQL mutation demonstrates the use of the `@deleteEdge` directive to remove edges from a connection. The mutation takes a list of connection IDs and an input object, and the `deletedCommentIds` field uses the `@deleteEdge` directive to delete the corresponding edges from the specified connections. The connections are passed as a variable to the mutation.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/guided-tour/list-data/updating-connections.md#2025-04-18_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\n// Get the connection ID using the `__id` field\nconst connectionID = fragmentData?.comments?.__id;\n\n// Or get it using `ConnectionHandler.getConnectionID()`\nconst connectionID = ConnectionHandler.getConnectionID(\n  '<story-id>',\n  'StoryComponent_story_comments_connection',\n);\n\n// ...\n\n// Mutation\ncommitMutation<DeleteCommentsMutation>(environment, {\n  mutation: graphql`\n    mutation DeleteCommentsMutation(\n      # Define a GraphQL variable for the connections array\n      $connections: [ID!]!\n      $input: CommentsDeleteInput\n    ) {\n      commentsDelete(input: $input) {\n        deletedCommentIds @deleteEdge(connections: $connections)\n      }\n    }\n  `,\n  variables: {\n    input,\n    // Pass the `connections` array\n    connections: [connectionID],\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Rendering Refreshed Query Data with usePreloadedQuery in Relay\nDESCRIPTION: Implementation of the MainContent component that uses usePreloadedQuery to render the data fetched from the refreshed query. It displays the user data and provides a button to refresh the data.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v13.0.0/guided-tour/refetching/refreshing-queries.md#2025-04-18_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n/**\n * MainContent.react.js\n */\nimport type {AppQuery as AppQueryType} from 'AppQuery.graphql';\n\n// Renders the preloaded query, given the query reference\nfunction MainContent(props) {\n  const {refresh, queryRef} = props;\n  const data = usePreloadedQuery<AppQueryType>(\n    graphql`\n      query AppQuery($id: ID!) {\n        user(id: $id) {\n          name\n          friends {\n            count\n          }\n        }\n      }\n    `,\n    queryRef,\n  );\n\n  return (\n    <>\n      <h1>{data.user?.name}</h1>\n      <div>Friends count: {data.user.friends?.count}</div>\n      <Button\n        onClick={() => refresh()}>\n        Fetch latest count\n      </Button>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: GraphQL Fragment with @connection Directive\nDESCRIPTION: This GraphQL fragment defines a connection for friends of a user using the @connection directive. It fetches the first 10 friends, orders them by firstname, and assigns a key for pagination.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/api-reference/relay-runtime/store.md#2025-04-18_snippet_22\n\nLANGUAGE: graphql\nCODE:\n```\nfragment FriendsFragment on User {\n  friends(first: 10, orderby: \"firstname\") @connection(\n    key: \"FriendsFragment_friends\",\n  ) {\n    edges {\n      node {\n        id\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Fragment References with useFragment and usePreloadedQuery in Relay\nDESCRIPTION: Demonstrates how to pass fragment references between components using Relay's useFragment and usePreloadedQuery hooks. This example shows how to query data and pass the fragment reference to access a User's name.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v13.0.0/glossary/glossary.md#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst queryData = usePreloadedQuery(\n  graphql`query ComponentQuery { viewer { account_user { ...Component_name } } }`,\n  {},\n);\n\n// queryData.viewer is the FragmentReference\n// Though this would usually happen in another file, you can\n// extract the value of Component_name as follows:\nconst fragmentData = useFragment(\n  graphql`fragment Component_name on User { name }`,\n  queryData?.viewer?.account_user,\n);\n```\n\n----------------------------------------\n\nTITLE: Enhanced Mutation with Fragment\nDESCRIPTION: Improved mutation definition using fragment spreading for better data consistency.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/tutorial/mutations-updates.md#2025-04-18_snippet_6\n\nLANGUAGE: graphql\nCODE:\n```\nconst StoryLikeButtonLikeMutation = graphql`\n  mutation StoryLikeButtonLikeMutation(\n    $id: ID,\n    $doesLike: Boolean,\n  ) {\n    likeStory(id: $id, doesLike: $doesLike) {\n      story {\n        ...StoryLikeButtonFragment\n      }\n    }\n  }\n`;\n```\n\n----------------------------------------\n\nTITLE: Using Relay Fragment and Inline Data in a React Component\nDESCRIPTION: This code snippet illustrates how to use a Relay fragment within a React component to fetch data and pass it to a function that utilizes `@inline` data. The `MyComponent` component uses `useFragment` to retrieve data for an `Item`, includes the `processItemData_item` fragment to ensure required data is loaded, and calls the `processItemData` function upon a button click.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/api-reference/graphql/graphql-directives.md#2025-04-18_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nexport default function MyComponent({item}) {\n  function handleClick() {\n    processItemData(item);\n  }\n\n  const data = useFragment(\n    graphql`\n      fragment MyComponent_item on Item {\n        ...processItemData_item\n        title\n      }\n    `,\n    item,\n  );\n\n  return <button onClick={handleClick}>Process {item.title}</button>;\n}\n```\n\n----------------------------------------\n\nTITLE: Interface Definition: RecordSourceProxy in JavaScript\nDESCRIPTION: Defines the `RecordSourceProxy` interface, which provides methods for creating, deleting, retrieving, and reading updatable fragments and queries in a Relay store. This interface requires definitions for data handling and updating in Relay applications.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/api-reference/relay-runtime/store.md#2025-04-18_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\ninterface RecordSourceProxy {\n  create(dataID: DataID, typeName: string): RecordProxy;\n  delete(dataID: DataID): void;\n  get(dataID: DataID): ?RecordProxy;\n  getRoot(): RecordProxy;\n  invalidateStore(): void;\n  readUpdatableFragment<TFragmentType: FragmentType, TData>(\n    fragment: UpdatableFragment<TFragmentType, TData>,\n    fragmentReference: HasUpdatableSpread<TFragmentType>,\n  ): UpdatableData<TData>;\n  readUpdatableQuery<TVariables: Variables, TData>(\n    query: UpdatableQuery<TVariables, TData>,\n    variables: TVariables,\n  ): UpdatableData<TData>;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a User Note with commitLocalUpdate - JavaScript\nDESCRIPTION: This snippet highlights the process of creating a new note for a user. It demonstrates how to use 'commitLocalUpdate' to manage local data in the Relay Store, ensuring the new note is linked correctly to the user.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v13.0.0/guides/client-schema-extensions.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport {commitLocalUpdate} from 'react-relay';\n\nlet tempID = 0;\n\nfunction createUserNote(environment) {\n  commitLocalUpdate(environment, store => {\n    const user = store.getRoot().getLinkedRecord('viewer');\n    const userNoteRecords = user.getLinkedRecords('notes') || [];\n\n    // Create a unique ID.\n    const dataID = `client:Note:${tempID++}`;\n\n    //Create a new note record.\n    const newNoteRecord = store.create(dataID, 'Note');\n\n    // Add the record to the user's list of notes.\n    user.setLinkedRecords([...userNoteRecords, newNoteRecord], 'notes');\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Extending Existing Types in GraphQL for Relay\nDESCRIPTION: Demonstrates how to extend an existing GraphQL type by adding a new field. This example adds an 'is_new_comment' boolean field to the Comment type.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/guided-tour/updating-data/client-only-data.md#2025-04-18_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nextend type Comment {\n  is_new_comment: Boolean\n}\n```\n\n----------------------------------------\n\nTITLE: Checking for More Items with hasNext in Relay Pagination\nDESCRIPTION: This code snippet demonstrates how to use the hasNext property from usePaginationFragment to conditionally render UI elements based on whether more items are available to load in the connection.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/guided-tour/list-data/pagination.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport type {FriendsListPaginationQuery} from 'FriendsListPaginationQuery.graphql';\nimport type {FriendsListComponent_user$key} from 'FriendsList_user.graphql';\n\nconst React = require('React');\nconst {Suspense} = require('React');\n\nconst {graphql, usePaginationFragment} = require('react-relay');\n\ntype Props = {\n  user: FriendsListComponent_user$key,\n};\n\nfunction FriendsListComponent(props: Props) {\n  // ...\n  const {\n    data,\n    loadNext,\n    hasNext,\n  } = usePaginationFragment(\n    graphql`...`,\n    props.user,\n  );\n\n  return (\n    <>\n      <h1>Friends of {data.name}:</h1>\n      {/* ... */}\n\n      {/* Only render button if there are more friends to load in the list */}\n      {hasNext ? (\n        <Button\n          onClick={/* ... */}>\n          Load more friends\n        </Button>\n      ) : null}\n    </>\n  );\n}\n\nmodule.exports = FriendsListComponent;\n```\n\n----------------------------------------\n\nTITLE: Overriding shouldComponentUpdate in RelayContainer (JavaScript)\nDESCRIPTION: Example of overriding the default shouldComponentUpdate method in a RelayContainer. This ensures the component always updates when its data changes.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-classic/Classic-APIReference-Container.md#2025-04-18_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nmodule.exports = Relay.createContainer(ProfilePicture, {\n  shouldComponentUpdate: () => true,\n  // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Testing Relay Fragment Components\nDESCRIPTION: Demonstrates how to test a specific fragment component by wrapping it with a useLazyLoadQuery component that spreads the fragment to be tested.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/guides/testing-relay-components.md#2025-04-18_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\ntest('Fragment', () => {\n  const environment = createMockEnvironment();\n  const TestRenderer = () => {\n    const data = useLazyLoadQuery(\n      graphql`\n        query TestQuery @relay_test_operation {\n          myData: node(id: \"test-id\") {\n            # Spread the fragment you want to test here\n            ...MyFragment\n          }\n        }\n      `,\n      {},\n    );\n    return <MyFragmentComponent myData={data.myData} />\n  };\n\n  const renderer = render(\n    <RelayEnvironmentProvider environment={environment}>\n      <Suspense fallback=\"Loading...\">\n        <TestRenderer />\n      </Suspense>\n    </RelayEnvironmentProvider>\n  );\n\n  // Wrapping in act will ensure that components\n  // are fully updated to their final state.\n  act(() => {\n    environment.mock.resolveMostRecentOperation(operation =>\n      MockPayloadGenerator.generate(operation),\n    );\n  });\n\n  expect(renderer).toMatchSnapshot();\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Fragment Arguments to ContactsList\nDESCRIPTION: Modifying the ContactsList fragment to accept a search argument using the @argumentDefinitions directive, which will be used for filtering contacts.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/tutorial/refetchable-fragments.md#2025-04-18_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst ContactsListFragment = graphql`\n  fragment ContactsListFragment on Viewer\n    // change\n    @argumentDefinitions(\n      search: {type: \"String\", defaultValue: null}\n    )\n    // end-change\n  {\n    contacts {\n      id\n      ...ContactRowFragment\n    }\n  }\n`;\n```\n\n----------------------------------------\n\nTITLE: Defining Semantic Non-Null Fields in GraphQL Schema\nDESCRIPTION: Example of how to use the @semanticNonNull directive in a GraphQL schema to indicate that a field should be treated as non-nullable for type generation, while still allowing it to be null in error cases.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/guides/semantic-nullability.md#2025-04-18_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\ndirective @semanticNonNull(levels: [Int] = [0]) on FIELD_DEFINITION\n\ntype User {\n  name: String @semanticNonNull\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Multiple Fragments in a Component\nDESCRIPTION: Example showing how to define multiple GraphQL fragments in a component file. Each fragment will generate a separate file in the __generated__ directory corresponding to the component.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/guides/compiler.md#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst DictionaryWordFragment = graphql`\n  fragment DictionaryComponent_word on Word {\n    id\n    definition {\n      ...DictionaryComponent_definition\n    }\n  }\n`\n\nconst DictionaryDefinitionFragment = graphql`\n  fragment DictionaryComponent_definition on WordDefinition {\n    text\n    image\n  }\n`\n```\n\n----------------------------------------\n\nTITLE: Complex Object Type Mock Resolver in JavaScript\nDESCRIPTION: Demonstrates how to define mock resolvers for complex object types like User, showing how to structure nested data with multiple fields.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/guides/testing-relay-components.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  // This will be the default values for User object in the query response\n  User() {\n    return {\n      id: 4,\n      name: \"Mark\",\n      profile_picture: {\n        uri: \"http://my-image...\",\n      },\n    };\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Assigning Best Friend Button in React and Relay\nDESCRIPTION: This React component uses Relay to assign a user as a best friend. It reads from a query, manages the state of the viewer's best friends list, and updates the local store upon button click.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/guided-tour/updating-data/imperatively-modifying-linked-fields.md#2025-04-18_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n// AssignBestFriendButton.react.js\nimport type {AssignBestFriendButton_user$key} from 'AssignBestFriendButton_user.graphql';\nimport type {AssignBestFriendButton_viewer$key} from 'AssignBestFriendButton_viewer';\n\nimport type {RecordSourceSelectorProxy} from 'react-relay';\n\nconst {commitLocalUpdate, useFragment, useRelayEnvironment} = require('react-relay');\n\ngraphql`\n  fragment AssignBestFriendButton_assignable_user on User @assignable {\n    __typename\n  }\n`;\n\nexport default function AssignBestFriendButton({\n  someTypeRef: AssignBestFriendButton_someType$key,\n  viewerFragmentRef: AssignBestFriendButton_viewer$key,\n}) {\n  const data = useFragment(graphql`\n    fragment AssignBestFriendButton_someType on SomeType {\n      user {\n        name\n        ...AssignableBestFriendButton_assignable_user\n      }\n    }\n  `, someTypeRef);\n\n  const viewer = useFragment(graphql`\n    fragment AssignBestFriendButton_viewer on Viewer {\n      best_friends {\n        # since viewer.best_friends appears in the right hand side of the assignment\n        # (i.e. updatableData.viewer.best_friends = viewer.best_friends.concat(...)),\n        # the best_friends field must contain the correct assignable fragment spread\n        ...AssignableBestFriendButton_assignable_user\n      }\n    }\n  `, viewerRef);\n\n  const environment = useRelayEnvironment();\n  const onClick = () => {\n    commitLocalUpdate(\n      environment,\n      (store: RecordSourceSelectorProxy) => {\n        const {updatableData} = store.readUpdatableQuery(\n            graphql`\n              query AssignBestFriendButtonUpdatableQuery\n              @updatable {\n                viewer {\n                  best_friends {\n                    ...AssignableBestFriendButton_assignable_user\n                  }\n                }\n              }\n            `,\n            {}\n          );\n\n        if (data.user != null && updatableData.viewer != null && viewer.best_friends != null) {\n          updatableData.viewer.best_friends = [\n            ...viewer.best_friends,\n            data.user,\n          ];\n        }\n      }\n    );\n  };\n\n  return (<button onClick={onClick}>\n    Add {user.name ?? 'someone with no name'} to my list of best friends!\n  </button>);\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Edges Using @appendEdge Directive in GraphQL Mutation\nDESCRIPTION: Example of using the @appendEdge directive in a GraphQL mutation to add newly created edges to specified connections. This method uses declarative directives for updating connections.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/guided-tour/list-data/updating-connections.md#2025-04-18_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// Get the connection ID using the `__id` field\nconst connectionID = fragmentData?.comments?.__id;\n\n// Or get it using `ConnectionHandler.getConnectionID()`\nconst connectionID = ConnectionHandler.getConnectionID(\n  '<story-id>',\n  'StoryComponent_story_comments_connection',\n);\n\n// ...\n\n// Mutation\ncommitMutation<AppendCommentMutation>(environment, {\n  mutation: graphql`\n    mutation AppendCommentMutation(\n      # Define a GraphQL variable for the connections array\n      $connections: [ID!]!\n      $input: CommentCreateInput\n    ) {\n      commentCreate(input: $input) {\n        # Use @appendEdge or @prependEdge on the edge field\n        feedbackCommentEdge @appendEdge(connections: $connections) {\n          cursor\n          node {\n            id\n          }\n        }\n      }\n    }\n  `,\n  variables: {\n    input,\n    // Pass the `connections` array\n    connections: [connectionID],\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Query Component with Fragment References in Relay\nDESCRIPTION: This code demonstrates a Relay query component that loads data and includes a fragment reference. The example shows how a component can render immediately with cached data while other parts might be fetching.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v13.0.0/guided-tour/reusing-cached-data/rendering-partially-cached-data.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * AppTabs.react.js\n *\n * Query Loader Component\n */\n\n // ....\n\n  const onSelectHomeTab = () => {\n    loadHomeTabQuery({id: '4'}, {fetchPolicy: 'store-or-network'});\n  }\n\n // ...\n\n/**\n * HomeTab.react.js\n *\n * Query Component\n */\n\nconst React = require('React');\nconst {graphql, usePreloadedQuery} = require('react-relay');\n\nconst UsernameComponent = require('./UsernameComponent.react');\n\nfunction HomeTab(props: Props) {\n  const data = usePreloadedQuery<AppQuery>(\n    graphql`\n      query HomeTabQuery($id: ID!) {\n        user(id: $id) {\n          name\n          ...UsernameComponent_user\n        }\n      }\n    `,\n    props.queryRef,\n  );\n\n  return (\n    <>\n      <h1>{data.user?.name}</h1>\n      <UsernameComponent user={data.user} />\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Converting PaginationContainer to usePaginationFragment in React Relay\nDESCRIPTION: This comparison demonstrates how to migrate from a class-based PaginationContainer to a functional component using usePaginationFragment. The new API eliminates the need for several configuration options like direction, getConnectionFromProps, and getFragmentVariables, as these are now determined automatically.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/migration-and-compatibility/relay-hooks-and-legacy-container-apis.md#2025-04-18_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as React from 'React';\nimport {graphql, createPaginationContainer} from 'react-relay';\n\nclass UserContainerComponent extends React.Component {\n  render(): React.Node {\n    const isLoading = this.props.relay.isLoading() || this.state.loading;\n    const hasMore = this.props.relay.hasMore();\n\n    return (\n      <>\n        <FriendsList friends={this.props.user?.friends} />\n        <Button\n          onClick={() => this.loadMore()}\n          disabled={!hasMore || isLoading}>\n          Load More\n          {isLoading && <InlineSpinner />}\n        </Button>\n      </>\n    );\n  }\n\n  loadMore() {\n    if (\n      !this.props.relay.hasMore() ||\n      this.props.relay.isLoading() ||\n      this.state.loading\n    ) {\n      return;\n    }\n\n    this.setState({loading: true});\n\n    this.props.relay.loadMore(5, () => this.setState({loading: false}));\n  }\n}\n\nexport default createPaginationContainer(\n  UserContainerComponent,\n  {\n    user: graphql`\n      fragment UserContainerComponent_user on User\n      @argumentDefinitions(count: {type: \"Int!\"}, cursor: {type: \"ID\"})\n      @refetchable(queryName: \"UserComponentRefetchQuery\") {\n        friends(first: $count, after: $cursor)\n          @connection(key: \"UserComponent_user_friends\") {\n          edges {\n            node {\n              name\n            }\n          }\n        }\n      }\n    `,\n  },\n  {\n    // This option is no longer necessary, usePaginationFragment supports\n    // bi-directional pagination out of the box.\n    direction: 'forward',\n\n    // This option is no longer required, and will be automatically\n    // determined by usePaginationFragment\n    getConnectionFromProps(props: Props) {\n      return props.user?.friends;\n    },\n\n    // This option is no longer required, and will be automatically\n    // determined by usePaginationFragment\n    getFragmentVariables(vars, count) {\n      return {...vars, count};\n    },\n\n    // This option is no longer required, and will be automatically\n    // determined by usePaginationFragment\n    getVariables(props: Props, {count, cursor}) {\n      return {\n        cursor,\n        count,\n      };\n    },\n\n    // This option is no longer required, the pagination query\n    // will automatically be generated by Relay using the @refetchable\n    // directive.\n    query: graphql`\n      query UserContainerComponentQuery {\n        viewer {\n          actor {\n            ... on User {\n              ...UserContainerComponent_user @arguments(count: 10)\n            }\n          }\n        }\n      }\n    `,\n  },\n);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as React from 'React';\nimport {graphql, usePaginationFragment} from 'react-relay';\n\nexport default function UserComponent(props: Props) {\n  const {data, loadNext, hasNext, isLoadingNext} = usePaginationFragment(\n    graphql`\n      fragment UserComponent_user on User\n      @refetchable(queryName: \"UserComponentRefetchQuery\") {\n        friends(first: $count, after: $after)\n          @connection(key: \"UserComponent_user_friends\") {\n          edges {\n            node {\n              name\n            }\n          }\n        }\n      }\n    `,\n    props.user,\n  );\n\n  const handleClick = useCallback(() => {\n    loadNext(5)\n  }, [loadNext])\n\n  return (\n    <>\n      <FriendsList friends={data?.friends?.edges} />\n      <Button onClick={handleClick} disabled={!hasNext || isLoadingNext}>\n        Load More\n        {isLoadingNext && <InlineSpinner />}\n      </Button>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Child Fragment Component in React and Relay\nDESCRIPTION: This code snippet shows how to create a child fragment component using React and Relay. It demonstrates the use of the useFragment hook to fetch data for the component.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/guided-tour/rendering/fragments.md#2025-04-18_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * UsernameSection.react.js\n *\n * Child Fragment Component\n */\n\nimport type {UsernameSection_user$key} from 'UsernameSection_user.graphql';\n\nconst React = require('React');\nconst {graphql, useFragment} = require('react-relay');\n\ntype Props = {\n  user: UsernameSection_user$key,\n};\n\nfunction UsernameSection(props: Props) {\n  const data = useFragment(\n    graphql`\n      fragment UsernameSection_user on User {\n        username\n      }\n    `,\n    props.user,\n  );\n\n  return <div>{data.username ?? 'Unknown'}</div>;\n}\n\nmodule.exports = UsernameSection;\n```\n\n----------------------------------------\n\nTITLE: Using Error Boundary in an Application\nDESCRIPTION: This snippet illustrates how to use the ErrorBoundary component in an app's main file. Components that may throw errors are wrapped within the ErrorBoundary, allowing a fallback UI to be rendered when an error occurs.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/guided-tour/rendering/error-states.md#2025-04-18_snippet_1\n\nLANGUAGE: js\nCODE:\n```\n/**\n * App.react.js\n */\n\nconst ErrorBoundary = require('ErrorBoundary');\nconst React = require('React');\n\nconst MainContent = require('./MainContent.react');\nconst SecondaryContent = require('./SecondaryContent.react');\n\nfunction App() {\n  return (\n    // Render an ErrorSection if an error occurs within\n    // MainContent or Secondary Content\n    <ErrorBoundary fallback={error => <ErrorUI error={error} />}>\n      <MainContent />\n      <SecondaryContent />\n    </ErrorBoundary>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Local State with commitLocalUpdate\nDESCRIPTION: This function uses `commitLocalUpdate` to initialize the `notes` field of the `User` to an empty array in the Relay store. It primes the local state by setting the initial value for the field.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/guides/client-schema-extensions.md#2025-04-18_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport {commitLocalUpdate} from 'react-relay';\n\ncommitLocalUpdate(environment, store => {\n  const user = store.getRoot().getLinkedRecord('viewer');\n\n  // initialize user notes to an empty array.\n  user.setLinkedRecords([], 'notes');\n});\n```\n\n----------------------------------------\n\nTITLE: Define Return Value of Pagination Fragment - GraphQL\nDESCRIPTION: This section defines the structure of the return value for a Relay pagination fragment, including various properties such as data, loading states, and pagination functions. Each property has specific purposes and types that align with the GraphQL schema.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/api-reference/hooks/use-pagination-fragment.md#2025-04-18_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\n<FbInternalOnly>\n  <FbUsePaginationFragmentReturnValue />\n</FbInternalOnly>\n```\n\n----------------------------------------\n\nTITLE: Defining Comment Creation Mutation with GraphQL and Relay\nDESCRIPTION: GraphQL mutation definition for creating comments with a nested fragment for user profile picture. The mutation accepts a CommentCreateInput parameter and returns viewer/actor data including profile picture information. Also includes an additional fragment definition for user name.\nSOURCE: https://github.com/facebook/relay/blob/main/packages/babel-plugin-relay/__tests__/fixtures/unexpected-fragment.error.txt#2025-04-18_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst testMutation = graphql`\n  mutation CompatCommentCreateMutation($input: CommentCreateInput!) {\n    commentCreate(input: $input) {\n      viewer {\n        actor {\n          id\n          ...CompatProfilePic_user\n        }\n      }\n    }\n  }\n\n  fragment Whoopsie_key on User {\n    name\n  }\n`;\n```\n\n----------------------------------------\n\nTITLE: Refetching a Fragment with Different Variables using Relay Hooks\nDESCRIPTION: This example demonstrates how to use useRefetchableFragment to refetch a fragment with different variables. It shows the simplified syntax and improved type-checking compared to container-based approaches.\nSOURCE: https://github.com/facebook/relay/blob/main/website/blog/2021-03-09-introducing-relay-hooks.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ntype Props = {\n  comment: CommentBody_comment$key,\n};\n\nfunction CommentBody(props: Props) {\n  const [data, refetch] = useRefetchableFragment<CommentBodyRefetchQuery, _>(\n    graphql`\n      fragment CommentBody_comment on Comment\n      @refetchable(queryName: \"CommentBodyRefetchQuery\") {\n        body(lang: $lang) {\n          text\n        }\n      }\n    `,\n    props.comment,\n  );\n\n  return <>\n    <CommentText text={data?.text} />\n    <Button\n      onClick={() =>\n        refetch({ lang: 'SPANISH' }, { fetchPolicy: 'store-or-network' })\n      }>\n    >\n      Translate\n    </Button>\n  </>\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Runtime Arguments in Relay Resolver\nDESCRIPTION: Demonstrates how to define and access runtime arguments in a Relay resolver field. The resolver takes a salutation argument and returns a greeting string combining the salutation with the user's name.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/guides/relay-resolvers/field-arguments.md#2025-04-18_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n/**\n * @RelayResolver User.greet(salutation: String!): String\n */\nexport function greet(user: UserModel, args: { salutation: string }): string {\n  return `${args.salutation}, ${user.name}!`;\n}\n```\n\n----------------------------------------\n\nTITLE: GraphQL Subscription with Fragments\nDESCRIPTION: This GraphQL snippet demonstrates how to use fragments in a subscription to ensure components are refreshed with the latest data. By spreading fragments like `FeedbackDisplay_feedback` and `FeedbackDetail_feedback`, the subscription ensures those components' data is refetched upon receiving an event.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/guided-tour/updating-data/graphql-subscriptions.md#2025-04-18_snippet_4\n\nLANGUAGE: graphql\nCODE:\n```\nsubscription FeedbackLikeSubscription($input: FeedbackLikeSubscribeData!) {\n  feedback_like_subscribe(data: $input) {\n    feedback {\n      ...FeedbackDisplay_feedback\n      ...FeedbackDetail_feedback\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Refetch Component Testing\nDESCRIPTION: Shows how to test refetchable components by simulating refetch operations and verifying component behavior\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/guides/testing-relay-components.md#2025-04-18_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\ntest('Refetch Container', () => {\n  const environment = createMockEnvironment();\n  const TestRenderer = () => {\n    const data = useLazyLoadQuery(\n      graphql`\n        query TestQuery @relay_test_operation {\n          myData: node(id: \"test-id\") {\n            ...MyRefetchableFragment\n          }\n        }\n      `,\n      {},\n    );\n    return <MyRefetchContainer data={data.myData} />\n  };\n```\n\n----------------------------------------\n\nTITLE: Copying fields from one record to another\nDESCRIPTION: This snippet shows how to copy all fields from one record to another using the copyFieldsFrom method, allowing for easy duplication of record data.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/api-reference/relay-runtime/store.md#2025-04-18_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nconst record = store.get(id1);\nconst otherRecord = store.get(id2);\nrecord.copyFieldsFrom(otherRecord);\n```\n\n----------------------------------------\n\nTITLE: Passing Arguments to ImageFragment in StoryFragment\nDESCRIPTION: This code shows how to pass an argument to the `ImageFragment` when it's spread in the `StoryFragment`. Here, the `width` argument is set to 400, so the image fetched for the story thumbnail will have a width of 400.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/tutorial/fragments-1.md#2025-04-18_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nconst StoryFragment = graphql`\n  fragment StoryFragment on Story {\n    title\n    summary\n    postedAt\n    poster {\n      ...PosterBylineFragment\n    }\n    image {\n      // change-line\n      ...ImageFragment @arguments(width: 400)\n    }\n  }\n`;\n```\n\n----------------------------------------\n\nTITLE: Using a Fragment with useFragment Hook in React Component\nDESCRIPTION: This snippet demonstrates how to read data from the Relay store using the useFragment hook in a functional React component. The hook requires the fragment and a fragment reference as parameters.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v13.0.0/principles-and-architecture/thinking-in-relay.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// AuthorDetails.react.js\nexport default function AuthorDetails(props) {\n  const data = useFragment(authorDetailsFragment, props.author);\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Filtered Connection Data in GraphQL\nDESCRIPTION: This snippet demonstrates how to query a connection with filters in GraphQL, specifically for a User's friends list with ordering and search term filters.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/guided-tour/list-data/refetching-connections.md#2025-04-18_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nfragment UserFragment on User {\n  name\n  friends(order_by: DATE_ADDED, search_term: \"Alice\", first: 10) {\n    edges {\n      node {\n        name\n        age\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering preloaded query with usePreloadedQuery\nDESCRIPTION: This snippet demonstrates how to render a preloaded query using the `usePreloadedQuery` hook in Relay. It takes a query reference and a GraphQL query as input and renders the data fetched by the query. A button is included to trigger a refetch operation.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/guided-tour/refetching/refetching-queries-with-different-data.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * MainContent.react.js\n */\n\n// Renders the preloaded query, given the query reference\nfunction MainContent(props) {\n  const {refetch, queryRef} = props;\n  const data = usePreloadedQuery(\n    graphql`\n      query AppQuery($id: ID!) {\n        user(id: $id) {\n          name\n          friends {\n            count\n          }\n        }\n      }\n    `,\n    queryRef,\n  );\n\n  return (\n    <>\n      <h1>{data.user?.name}</h1>\n      <div>Friends count: {data.user?.friends?.count}</div>\n      <Button\n        onClick={() => refetch()}>\n        Fetch latest count\n      </Button>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Weak Type Return in Relay Resolver\nDESCRIPTION: Example of a Relay Resolver that returns a weak GraphQL type. The resolver constructs and returns a ProfilePicture object from User model data.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/guides/relay-resolvers/return-types.md#2025-04-18_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n/**\n * @RelayResolver User.profilePicture: ProfilePicture\n */\nexport function profilePicture(user: UserModel): ProfilePicture {\n  return {\n    url: user.profilePicture.url,\n    width: user.profilePicture.width,\n    height: user.profilePicture.width,\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Updater Function in Relay Mutation (JavaScript)\nDESCRIPTION: This snippet demonstrates how to use an updater function in a Relay mutation to add a new comment to a connection. It shows how to interact with the Relay store, retrieve the mutation payload, and update the local data.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v13.0.0/guided-tour/updating-data/graphql-mutations.md#2025-04-18_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport type {Environment} from 'react-relay';\nimport type {CommentCreateData, CreateCommentMutation} from 'CreateCommentMutation.graphql';\n\nconst {commitMutation, graphql} = require('react-relay');\nconst {ConnectionHandler} = require('relay-runtime');\n\nfunction commitCommentCreateMutation(\n  environment: Environment,\n  feedbackID: string,\n  input: CommentCreateData,\n) {\n  return commitMutation<CreateCommentMutation>(environment, {\n    mutation: graphql`\n      mutation CreateCommentMutation($input: CommentCreateData!) {\n        comment_create(input: $input) {\n          comment_edge {\n            cursor\n            node {\n              body {\n                text\n              }\n            }\n          }\n        }\n      }\n    `,\n    variables: {input},\n    onCompleted: () => {},\n    onError: error => {},\n    updater: store => {\n      const feedbackRecord = store.get(feedbackID);\n\n      // Get connection record\n      const connectionRecord = ConnectionHandler.getConnection(\n        feedbackRecord,\n        'CommentsComponent_comments_connection',\n      );\n\n      // Get the payload returned from the server\n      const payload = store.getRootField('comment_create');\n\n      // Get the edge inside the payload\n      const serverEdge = payload.getLinkedRecord('comment_edge');\n\n      // Build edge for adding to the connection\n      const newEdge = ConnectionHandler.buildConnectionEdge(\n        store,\n        connectionRecord,\n        serverEdge,\n      );\n\n      // Add edge to the end of the connection\n      ConnectionHandler.insertEdgeAfter(\n        connectionRecord,\n        newEdge,\n      );\n    },\n  });\n}\n\nmodule.exports = {commit: commitCommentCreateMutation};\n```\n\n----------------------------------------\n\nTITLE: Using GraphQL Template Tag in JavaScript with Relay\nDESCRIPTION: Demonstrates how to use the graphql template tag to write a simple GraphQL query. The tag creates a GraphQLTaggedNode that represents the GraphQL document, which is later processed by the Relay compiler.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v13.0.0/guides/compiler.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport {graphql} from 'react-relay';\n\ngraphql`\n  query MyQuery {\n    viewer {\n      id\n    }\n  }\n`;\n```\n\n----------------------------------------\n\nTITLE: Grouping Required Fields with @alias\nDESCRIPTION: This snippet demonstrates how to use `@alias` with `@required(action: NONE)` to group required fields together and handle nullability gracefully.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/guides/alias-directive.md#2025-04-18_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nfunction MyUser({userKey}) {\n  const user = useFragment(graphql`\n    fragment MyFragment on User {\n      id\n      ... @alias(as: \"requiredFields\") {\n        name @required(action: NONE)\n        email @required(action: NONE)\n      }\n    }`, userKey);\n\n  if(user.requiredFields == null) {\n    return `Missing required fields for user ${user.id}`;\n  }\n  return `Hello ${user.requiredFields.name} (${user.requiredFields.email}).!`;\n}\n```\n\n----------------------------------------\n\nTITLE: Querying a GraphQL Connection with Pagination\nDESCRIPTION: Example query demonstrating how to use a GraphQL connection with pagination, including slicing, cursor-based navigation, and retrieving page information.\nSOURCE: https://github.com/facebook/relay/blob/main/website/spec/Connections.md#2025-04-18_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\n{\n  user {\n    id\n    name\n    friends(first: 10, after: \"opaqueCursor\") {\n      edges {\n        cursor\n        node {\n          id\n          name\n        }\n      }\n      pageInfo {\n        hasNextPage\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Mock Resolvers with @relay_test_operation\nDESCRIPTION: This example shows how to define Mock resolvers for Scalar and Abstract types using the @relay_test_operation directive, which provides additional metadata about GraphQL types. It allows for more precise mock data generation, especially for boolean, float, and interface types.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/guides/testing-relay-components.md#2025-04-18_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  Float() {\n    return 123.456;\n  },\n  Boolean(context) {\n    if (context.name === 'can_edit') {\n      return true;\n    }\n    return false;\n  },\n  Node() {\n    return {\n      __typename: 'User',\n      id: 'my-user-id',\n    };\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Suspense for Partial Rendering in Relay\nDESCRIPTION: This code demonstrates how to use React's `Suspense` component to enable partial rendering in Relay. By wrapping the `UsernameComponent` in `Suspense`, the `HomeTab` component can render the user's `name` even if the `username` is still being fetched.  A fallback UI (LoadingSpinner) is shown while the `UsernameComponent` suspends.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/guided-tour/reusing-cached-data/rendering-partially-cached-data.md#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * HomeTab.react.js\n *\n * Query Component\n */\n\nconst React = require('React');\nconst {Suspense} = require('React');\nconst {graphql, usePreloadedQuery} = require('react-relay');\n\nconst UsernameComponent = require('./UsernameComponent.react');\n\n\nfunction HomeTab() {\n  const data = usePreloadedQuery(\n    graphql`\n      query AppQuery($id: ID!) {\n        user(id: $id) {\n          name\n          ...UsernameComponent_user\n        }\n      }`,\n    props.queryRef,\n  );\n\n  return (\n    <>\n      <h1>{data.user?.name}</h1>\n\n      {/*\n        Wrap the UserComponent in Suspense to allow other parts of the\n        App to be rendered even if the username is missing.\n      */}\n      <Suspense fallback={<LoadingSpinner label=\"Fetching username\" />}>\n        <UsernameComponent user={data.user} />\n      </Suspense>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Adding an edge to a connection using updater function\nDESCRIPTION: This JavaScript code snippet shows how to add an edge to a Relay connection inside an updater function. It retrieves the connection record, gets the payload from the server, and constructs the new edge using `ConnectionHandler.buildConnectionEdge` before adding it to the connection.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/guided-tour/list-data/updating-connections.md#2025-04-18_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nconst {ConnectionHandler} = require('relay-runtime');\n\nfunction updater(store: RecordSourceSelectorProxy) {\n  const storyRecord = store.get(storyID);\n  const connectionRecord = ConnectionHandler.getConnection(\n    storyRecord,\n    'StoryComponent_story_comments_connection',\n  );\n\n  // Get the payload returned from the server\n  const payload = store.getRootField('comment_create');\n\n  // Get the edge inside the payload\n  const serverEdge = payload.getLinkedRecord('comment_edge');\n\n  // Build edge for adding to the connection\n  const newEdge = ConnectionHandler.buildConnectionEdge(\n    store,\n    connectionRecord,\n    serverEdge,\n  );\n\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Getting a Connection with ConnectionHandler\nDESCRIPTION: This JavaScript code demonstrates how to use `ConnectionHandler.getConnection` to retrieve a connection record from the Relay store, given a parent record (user), a connection key ('FriendsFragment_friends'), and filters (orderby: 'firstname').\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/api-reference/relay-runtime/store.md#2025-04-18_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\nimport {ConnectionHandler} from 'relay-runtime';\n\n// The `friends` connection record can be accessed with:\nconst user = store.get(userID);\nconst friends = ConnectionHandler.getConnection(\n user,                        // parent record\n 'FriendsFragment_friends',   // connection key\n {orderby: 'firstname'}       // 'filters' that is used to identify the connection\n);\n// Access fields on the connection:\nconst edges = friends.getLinkedRecords('edges');\n```\n\n----------------------------------------\n\nTITLE: Invalidating Individual Records in Relay Store\nDESCRIPTION: The `invalidateRecord` method marks the record as stale, prompting data refetch requirements for queries referencing this record.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/api-reference/relay-runtime/store.md#2025-04-18_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nconst record = store.get('4');\nrecord.invalidateRecord();\n```\n\nLANGUAGE: javascript\nCODE:\n```\nenvironment.check(query) === 'stale'\n```\n\n----------------------------------------\n\nTITLE: Defining a GraphQL Mutation\nDESCRIPTION: This snippet shows the GraphQL mutation definition used with the `useMutation` hook.  It takes an input variable and updates the `feedback_like` field. It returns the updated feedback data including id, viewer_does_like, and like_count.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/api-reference/hooks/use-mutation.md#2025-04-18_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\n```js\ngraphql`\n    mutation FeedbackLikeMutation($input: FeedbackLikeData!) {\n      feedback_like(data: $input) {\n        feedback {\n          id\n          viewer_does_like\n          like_count\n        }\n      }\n    }\n  `\n```\n```\n\n----------------------------------------\n\nTITLE: Rendering Loading States with Suspense\nDESCRIPTION: This example showcases how to wrap a component with Suspense to display a loading indicator while the component fetches data.  The `LoadingGlimmer` component will be rendered as a fallback until `MainContent` is ready.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/guided-tour/rendering/loading-states.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * App.react.js\n */\n\nconst React = require('React');\nconst {Suspense} = require('React');\n\nfunction App() {\n  return (\n    // LoadingGlimmer is rendered via the Suspense fallback\n    <Suspense fallback={<LoadingGlimmer />}>\n      <MainContent /> {/* MainContent may suspend */}\n    </Suspense>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Queries with loadQuery Outside of React Components\nDESCRIPTION: Example of using loadQuery to fetch a GraphQL query outside of a React component context. This snippet shows how to load a query during app initialization and pass the reference to the root component.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/guided-tour/rendering/queries.md#2025-04-18_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport type {HomeTabQuery as HomeTabQueryType} from 'HomeTabQuery.graphql';\n\nconst HomeTabQuery = require('HomeTabQuery.graphql')\nconst {loadQuery} = require('react-relay');\n\n\nconst environment = createEnvironment(...);\n\nconst initialQueryRef = loadQuery<HomeTabQueryType>(\n  environment,\n  HomeTabQuery,\n  {id: '4'},\n);\n\n// ...\n\nrender(<AppTabs initialQueryRef={initialQueryRef} initialTab={...} />)\n```\n\n----------------------------------------\n\nTITLE: Converting Lazy Query to Preloaded Query Component\nDESCRIPTION: Shows how to modify a component to use usePreloadedQuery instead of useLazyLoadQuery for better performance\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/tutorial/queries-2.md#2025-04-18_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\nexport default function PosterDetailsHovercardContents({\n  posterID,\n}: {\n  posterID: string;\n}): React.ReactElement {\n  const data = useLazyLoadQuery<QueryType>(\n    PosterDetailsHovercardContentsQuery,\n    {posterID},\n  );\n  return <PosterDetailsHovercardContentsBody data={data.node} />;\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring GraphQL Connection Fragment in Relay\nDESCRIPTION: Shows how to declare a fragment that queries for a GraphQL connection using the @connection directive. The fragment queries a User's friends connection with pagination parameters.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/guided-tour/list-data/rendering-connections.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst {graphql} = require('RelayModern');\n\nconst userFragment = graphql`\n  fragment UserFragment on User {\n    name\n    friends(after: $cursor, first: $count)\n      @connection(key: \"UserFragment_friends\") {\n      edges {\n        node {\n          ...FriendComponent\n        }\n      }\n    }\n  }\n`;\n```\n\n----------------------------------------\n\nTITLE: Using Query Variables in Fragments\nDESCRIPTION: Example showing how fragments can reference variables declared by a query. The UserFragment uses the $scale variable that must be declared by any query that includes this fragment.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v13.0.0/guided-tour/rendering/variables.md#2025-04-18_snippet_3\n\nLANGUAGE: graphql\nCODE:\n```\nfragment UserFragment on User {\n  name\n  profile_picture(scale: $scale) {\n    uri\n  }\n}\n\n\nquery ViewerQuery($scale: Float!) {\n  viewer {\n    actor {\n      ...UserFragment\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Mutation with Component Fragments\nDESCRIPTION: Example of a mutation that spreads component fragments to ensure proper data refresh.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/guided-tour/updating-data/graphql-mutations.md#2025-04-18_snippet_4\n\nLANGUAGE: graphql\nCODE:\n```\nmutation FeedbackLikeMutation($input: FeedbackLikeData!) {\n  feedback_like(data: $input) {\n    feedback {\n      ...FeedbackDisplay_feedback\n      ...FeedbackDetail_feedback\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Type Refinements in GraphQL Fragment\nDESCRIPTION: This snippet demonstrates how to use type refinements to select fields specific to Organization and Person types within a fragment on the Actor interface.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/tutorial/interfaces-polymorphism.md#2025-04-18_snippet_4\n\nLANGUAGE: graphql\nCODE:\n```\nfragment PosterDetailsHovercardContentsBodyFragment on Actor {\n  name\n  joined\n  profilePicture {\n    ...ImageFragment\n  }\n  ... on Organization {\n    organizationKind\n  }\n  ... on Person {\n    location {\n      name\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Extending GraphQL Schema for Client-side Field\nDESCRIPTION: Demonstrates how to extend a GraphQL schema to add a client-side boolean field for tracking new comments\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/guided-tour/updating-data/imperatively-modifying-store-data.md#2025-04-18_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nextend type Feedback {\n  is_new_comment: Boolean\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Actor Interface in GraphQL\nDESCRIPTION: GraphQL type definitions for Person and Organization types that implement the Actor interface, showing type-specific fields.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/tutorial/interfaces-polymorphism.md#2025-04-18_snippet_2\n\nLANGUAGE: graphql\nCODE:\n```\ntype Person implements Actor {\n  id: ID!\n  name: String\n  profilePicture: Image\n  joined: DateTime\n  email: String\n  location: Location\n}\n\ntype Organization implements Actor {\n  id: ID!\n  name: String\n  profilePicture: Image\n  joined: DateTime\n  organizationKind: OrganizationKind\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Image Fragment with Arguments in GraphQL\nDESCRIPTION: This code block defines a GraphQL fragment that accepts width and height as arguments to dictate image size, promoting efficiency and flexibility. By setting default values to null, this supports inherent sizes and allows parent components to specify dimensions when spreading the fragment.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/tutorial/fragments-1.md#2025-04-18_snippet_11\n\nLANGUAGE: graphql\nCODE:\n```\nconst ImageFragment = graphql`\n  fragment ImageFragment on Image\n    @argumentDefinitions(\n      // color1\n      width: {\n        // color2\n        type: \"Int\",\n        // color3\n        defaultValue: null\n      }\n      height: {\n        type: \"Int\",\n        defaultValue: null\n      }\n    )\n  {\n    url(\n      // color4\n      width: $width,\n      // color4\n      height: $height\n    )\n    altText\n  }\n`;\n```\n\n----------------------------------------\n\nTITLE: Normalized Cache Implementation Example\nDESCRIPTION: Shows how Relay implements a normalized cache structure for storing GraphQL response data.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-experimental/PrinciplesAndArchitecture-ThinkingInGraphQL.md#2025-04-18_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nMap {\n  1: Map {\n    text: 'Relay is open-source!',\n    author: Link(2),\n  },\n  2: Map {\n    name: 'Jan',\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Spreading ImageFragment in Story Component\nDESCRIPTION: Shows how to spread the ImageFragment into the StoryFragment to handle image data requirements.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/tutorial/fragments-1.md#2025-04-18_snippet_6\n\nLANGUAGE: graphql\nCODE:\n```\nconst StoryFragment = graphql`\n  fragment StoryFragment on Story {\n    title\n    summary\n    postedAt\n    poster {\n      ...PosterBylineFragment\n    }\n    thumbnail {\n      ...ImageFragment\n    }\n  }\n`;\n```\n\n----------------------------------------\n\nTITLE: Chaining @required Directives in React Component\nDESCRIPTION: Demonstrates how to chain @required directives in a React component using a GraphQL fragment to ensure nested fields are accessible after a single null check.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/guides/required-directive.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst user = useFragment(graphql`\n  fragment MyUser on User {\n    name @required(action: LOG)\n    profile_picture @required(action: LOG) {\n      url @required(action: LOG)\n    }\n  }`, key);\n if(user == null) {\n   return null;\n }\n return <img src={user.profile_picture.url} alt={user.name} />\n```\n\n----------------------------------------\n\nTITLE: Fragment References Type Emission in Relay with TypeScript\nDESCRIPTION: This snippet explains how Relay emits type information for fragment references using TypeScript. It shows how a parent component receives a fragment reference from a child component's fragment and passes it as a prop. This ensures type safety when composing fragments and passing data between components.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/guides/type-emission.md#2025-04-18_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ExampleFragmentComponent } from \"./ExampleFragmentComponent\"\n\n/**\n * import { ExampleFragmentComponent_artist$fragmentType } from \"ExampleFragmentComponent_artist.graphql\";\n *\n * export type ExampleQuery$data = {\n *   readonly artist?: {\n *     readonly name: ?string,\n *     readonly \" $fragmentSpreads\": ExampleFragmentComponent_artist$fragmentType\n *   }\n * }\n * export type ExampleQuery$variables = {\n *   readonly artistID: string\n * }\n * export type ExampleQuery = {\n *   readonly variables: ExampleQuery$variables\n *   readonly response: ExampleQuery$data\n * }\n */\n\n// data is of type ExampleQuery$data\nconst data = useLazyLoadQuery(\n  graphql`\n    query ExampleQuery($artistID: ID!) {\n      artist(id: $artistID) {\n        name\n        ...ExampleFragmentComponent_artist\n      }\n    }\n  `,\n  {artistID: 'banksy'},\n);\n\n// Here only `data.artist.name` is directly visible,\n// the marker prop $fragmentSpreads indicates that `data.artist`\n// can be used for the component expecting this fragment spread.\nreturn <ExampleFragmentComponent artist={data.artist} />;\n```\n\n----------------------------------------\n\nTITLE: Establishing a GraphQL Subscription using requestSubscription in Relay\nDESCRIPTION: This snippet demonstrates how to import and use the requestSubscription function from Relay to create a GraphQL subscription. It defines a subscription query and a function that establishes the subscription with the Relay environment.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/api-reference/relay-runtime/request-subscription.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport {graphql, requestSubscription} from 'react-relay';\n\nconst subscription = graphql`\n  subscription UserDataSubscription($input: InputData!) {\n    # ...\n  }\n`;\n\nfunction createSubscription(environment: IEnvironment): Disposable {\n  return requestSubscription(environment, {\n    subscription,\n    variables: {input: {userId: '4'}},\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Client-Only Fields with useClientQuery() in React-Relay\nDESCRIPTION: Example of using useClientQuery() hook for queries containing only client fields. This hook is necessary when working with client-only queries since hooks like usePreloadedQuery and useLazyLoadQuery expect network requests.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/api-reference/relay-resolvers/runtime-functions.md#2025-04-18_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport {useClientQuery} from 'react-relay';\n\nexport function MyComponent() {\n  const data = useClientQuery(graphql`\n    query MyQuery {\n      myIp\n    }\n  `);\n  return <div>{data.myIp}</div>;\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up Suspense and ErrorBoundary for JavaScript Queries\nDESCRIPTION: Illustrates the configuration of Suspense and ErrorBoundary to manage loading and error states in components effectively. Wrap the component fetching data with Suspense and ErrorBoundary.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/migration-and-compatibility/relay-hooks-and-legacy-container-apis.md#2025-04-18_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n<ErrorBoundary renderError={Error}>\n  <Suspense fallback={<Loading />}>\n    <Home />\n  </Suspense>\n</ErrorBoundary>\n```\n\n----------------------------------------\n\nTITLE: Creating a Complete Pagination-Ready Fragment in Relay\nDESCRIPTION: This snippet shows a complete fragment with all the necessary directives for pagination: @argumentDefinitions for cursor and count, @refetchable to allow refetching with new arguments, and @connection to mark the paginated field.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/tutorial/connections-pagination.md#2025-04-18_snippet_13\n\nLANGUAGE: graphql\nCODE:\n```\nconst NewsfeedContentsFragment = graphql`\n  fragment NewsfeedContentsFragment on Query\n    @argumentDefinitions (\n      cursor: { type: \"String\" }\n      count: { type: \"Int\", defaultValue: 3 }\n    )\n    @refetchable(queryName: \"NewsfeedContentsRefetchQuery\")\n  {\n    viewer {\n      newsfeedStories(after: $cursor, first: $count)\n        @connection(key: \"NewsfeedContentsFragment_newsfeedStories\")\n      {\n        edges {\n          node {\n            id\n            ...StoryFragment\n          }\n        }\n      }\n    }\n  }\n`;\n```\n\n----------------------------------------\n\nTITLE: Using @appendNode Directive to Add Nodes as Edges to Connections in Relay\nDESCRIPTION: This snippet shows how to use the @appendNode directive to add newly created nodes as edges to specified connections. It demonstrates obtaining connection IDs and configuring the mutation with the appropriate edge type name.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/guided-tour/list-data/updating-connections.md#2025-04-18_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n// Get the connection ID using the `__id` field\nconst connectionID = fragmentData?.comments?.__id;\n\n// Or get it using `ConnectionHandler.getConnectionID()`\nconst connectionID = ConnectionHandler.getConnectionID(\n  '<story-id>',\n  'StoryComponent_story_comments_connection',\n);\n\n// ...\n\n// Mutation\ncommitMutation<AppendCommentMutation>(environment, {\n  mutation: graphql`\n    mutation AppendCommentMutation(\n      # Define a GraphQL variable for the connections array\n      $connections: [ID!]!\n      $input: CommentCreateInput\n    ) {\n      commentCreate(input: $input) {\n        # Use @appendNode or @prependNode on the node field\n        feedbackCommentNode @appendNode(connections: $connections, edgeTypeName: \"CommentsEdge\") {\n          id\n        }\n      }\n    }\n  `,\n  variables: {\n    input,\n    // Pass the `connections` array\n    connections: [connectionID],\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: GraphQL Fetch Utility Implementation\nDESCRIPTION: Helper function to fetch data from GitHub's GraphQL API with proper authentication and request formatting.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/getting-started/step-by-step-guide.md#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nasync function fetchGraphQL(text, variables) {\n  const REACT_APP_GITHUB_AUTH_TOKEN = process.env.REACT_APP_GITHUB_AUTH_TOKEN;\n\n  // Fetch data from GitHub's GraphQL API:\n  const response = await fetch('https://api.github.com/graphql', {\n    method: 'POST',\n    headers: {\n      Authorization: `bearer ${REACT_APP_GITHUB_AUTH_TOKEN}`,\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify({\n      query: text,\n      variables,\n    }),\n  });\n\n  // Get the response as JSON\n  return await response.json();\n}\n\nexport default fetchGraphQL;\n```\n\n----------------------------------------\n\nTITLE: Refreshing Queries Using useLazyLoadQuery in React/Relay\nDESCRIPTION: Example demonstrating query refresh using useLazyLoadQuery Hook. Uses state management to trigger re-fetches with updated fetchKey and network-only fetch policy.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/guided-tour/refetching/refreshing-queries.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * App.react.js\n */\nconst AppQuery = require('__generated__/AppQuery.graphql');\n\nfunction App(props: Props) {\n  const variables = {id: '4'};\n  const [refreshedQueryOptions, setRefreshedQueryOptions] = useState(null);\n\n  const refresh = useCallback(() => {\n    // Trigger a re-render of useLazyLoadQuery with the same variables,\n    // but an updated fetchKey and fetchPolicy.\n    // The new fetchKey will ensure that the query is fully\n    // re-evaluated and refetched.\n    // The fetchPolicy ensures that we always fetch from the network\n    // and skip the local data cache.\n    setRefreshedQueryOptions(prev => ({\n      fetchKey: (prev?.fetchKey ?? 0) + 1,\n      fetchPolicy: 'network-only',\n    }));\n  }, [/* ... */]);\n\n  return (\n    <React.Suspense fallback=\"Loading query...\">\n      <MainContent\n        refresh={refresh}\n        queryOptions={refreshedQueryOptions ?? {}}\n        variables={variables}\n      />\n    </React.Suspense>\n  );\n```\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * MainContent.react.js\n */\n\n// Fetches and renders the query, given the fetch options\nfunction MainContent(props) {\n  const {refresh, queryOptions, variables} = props;\n  const data = useLazyLoadQuery(\n    graphql`\n      query AppQuery($id: ID!) {\n        user(id: $id) {\n          name\n          friends {\n            count\n          }\n        }\n      }\n    `,\n    variables,\n    queryOptions,\n  );\n\n  return (\n    <>\n      <h1>{data.user?.name}</h1>\n      <div>Friends count: {data.user.friends?.count}</div>\n      <Button\n        onClick={() => refresh()}>\n        Fetch latest count\n      </Button>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using @required in Inline Fragments with Nullable Fields\nDESCRIPTION: Example showing how @required fields in inline fragments remain nullable since the parent type might not match the inline fragment type.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/guides/required-directive.md#2025-04-18_snippet_7\n\nLANGUAGE: graphql\nCODE:\n```\nfragment MyFrag on Actor {\n  ... on User {\n    name @required(action: THROW)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: GraphQL Fragment for usePaginationFragment\nDESCRIPTION: This GraphQL fragment defines the data requirements for the `FriendsList` component, including the user's name and a connection to their friends.  The `@connection` directive specifies the key for the connection, and the `@refetchable` directive enables pagination and refetching.  The `first` and `after` arguments are used for pagination.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/api-reference/hooks/use-pagination-fragment.md#2025-04-18_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\nfragment FriendsListComponent_user on User\n@refetchable(queryName: \"FriendsListPaginationQuery\") {\n  name\n  friends(first: $count, after: $cursor)\n  @connection(key: \"FriendsList_user_friends\") {\n    edges {\n      node {\n        name\n        age\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining GraphQL Schema for Star Wars Factions and Ships\nDESCRIPTION: This GraphQL schema defines types for Node, Faction, Ship, ShipConnection, ShipEdge, PageInfo, and Query. It implements the Node interface for object identification and sets up connections for pagination.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/guides/graphql-server-specification.md#2025-04-18_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\ninterface Node {\n  id: ID!\n}\n\ntype Faction implements Node {\n  id: ID!\n  name: String\n  ships: ShipConnection\n}\n\ntype Ship implements Node {\n  id: ID!\n  name: String\n}\n\ntype ShipConnection {\n  edges: [ShipEdge]\n  pageInfo: PageInfo!\n}\n\ntype ShipEdge {\n  cursor: String!\n  node: Ship\n}\n\ntype PageInfo {\n  hasNextPage: Boolean!\n  hasPreviousPage: Boolean!\n  startCursor: String\n  endCursor: String\n}\n\ntype Query {\n  rebels: Faction\n  empire: Faction\n  node(id: ID!): Node\n}\n```\n\n----------------------------------------\n\nTITLE: Refreshing Relay Query with useLazyLoadQuery\nDESCRIPTION: This code snippet demonstrates how to refresh a Relay query using `useLazyLoadQuery` by updating the `fetchKey` and `fetchPolicy` in the component's state.  The `fetchKey` ensures the query is re-evaluated, while `fetchPolicy: 'network-only'` forces a network fetch. The component suspends during the network request, requiring a Suspense boundary.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/guided-tour/refetching/refreshing-queries.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * App.react.js\n */\nimport type {AppQuery as AppQueryType} from 'AppQuery.graphql';\n\nconst AppQuery = require('__generated__/AppQuery.graphql');\n\nfunction App(props: Props) {\n  const variables = {id: '4'};\n  const [refreshedQueryOptions, setRefreshedQueryOptions] = useState(null);\n\n  const refresh = useCallback(() => {\n    // Trigger a re-render of useLazyLoadQuery with the same variables,\n    // but an updated fetchKey and fetchPolicy.\n    // The new fetchKey will ensure that the query is fully\n    // re-evaluated and refetched.\n    // The fetchPolicy ensures that we always fetch from the network\n    // and skip the local data cache.\n    setRefreshedQueryOptions(prev => ({\n      fetchKey: (prev?.fetchKey ?? 0) + 1,\n      fetchPolicy: 'network-only',\n    }));\n  }, [/* ... */]);\n\n  return (\n    <React.Suspense fallback=\"Loading query...\">\n      <MainContent\n        refresh={refresh}\n        queryOptions={refreshedQueryOptions ?? {}}\n        variables={variables}\n      />\n    </React.Suspense>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Root Query in Relay Store\nDESCRIPTION: Demonstrates how to access the root query of a GraphQL document in the Relay store using getRoot and getLinkedRecord methods.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/api-reference/relay-runtime/store.md#2025-04-18_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// Represents root query\nconst root = store.getRoot();\n// Get the viewer linked record\nconst viewer = root.getLinkedRecord('viewer');\n```\n\n----------------------------------------\n\nTITLE: Defining GraphQLSubscriptionConfig Type in TypeScript for Relay\nDESCRIPTION: This code snippet defines the GraphQLSubscriptionConfig type, which is used to configure GraphQL subscriptions in Relay. It includes fields for the subscription query, variables, cache configuration, and callback functions for different subscription events.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/api-reference/types/GraphQLSubscriptionConfig.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype GraphQLSubscriptionConfig<TSubscriptionPayload> = {\n  cacheConfig?: CacheConfig;\n  subscription: GraphQLTaggedNode;\n  variables: any;\n  onCompleted?: () => void;\n  onError?: (error: Error) => void;\n  onNext?: (payload: TSubscriptionPayload) => void;\n  updater?: SelectorStoreUpdater;\n}\n```\n\n----------------------------------------\n\nTITLE: Setting a Field Value\nDESCRIPTION: Demonstrates how to mutate the current record by setting a new value on the specified field using the `setValue` method of the `RecordProxy`.  The method takes the `value` (mixed) and `name` (string) of the field, and optionally an object of `arguments`. Returns the mutated record.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v13.0.0/api-reference/relay-runtime/store.md#2025-04-18_snippet_29\n\nLANGUAGE: javascript\nCODE:\n```\nviewer.setValue('New Name', 'name');\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Type in Client Schema (GraphQL)\nDESCRIPTION: Creates a new type called Note in the client schema, which can be used for local data management.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/guides/client-schema-extensions.md#2025-04-18_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\ntype Note {\n  id: ID!\n  title: String\n  body: String\n}\n```\n\n----------------------------------------\n\nTITLE: Interface Definition: ConnectionHandler in JavaScript\nDESCRIPTION: Defines the `ConnectionHandler` interface, a utility for managing connections within the Relay store, providing methods to access, create, insert, and delete connection edges.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/api-reference/relay-runtime/store.md#2025-04-18_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\ninterface ConnectionHandler {\n  getConnection(\n    record: RecordProxy,\n    key: string,\n    filters?: ?Object,\n  ): ?RecordProxy,\n  createEdge(\n    store: RecordSourceProxy,\n    connection: RecordProxy,\n    node: RecordProxy,\n    edgeType: string,\n  ): RecordProxy,\n  insertEdgeBefore(\n    connection: RecordProxy,\n    newEdge: RecordProxy,\n    cursor?: ?string,\n  ): void,\n  insertEdgeAfter(\n    connection: RecordProxy,\n    newEdge: RecordProxy,\n    cursor?: ?string,\n  ): void,\n  deleteNode(connection: RecordProxy, nodeID: string): void\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Story Fragment to Include Comments Section\nDESCRIPTION: Updated GraphQL fragment for the Story component that includes the StoryCommentsSectionFragment. This change enables the retrieval of comment data for each story.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/tutorial/connections-pagination.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst StoryFragment = graphql`\n  fragment StoryFragment on Story {\n    // ... as before\n    // change-line\n    ...StoryCommentsSectionFragment\n  }\n`;\n```\n\n----------------------------------------\n\nTITLE: Defining RecordProxy Interface in JavaScript\nDESCRIPTION: Interface definition for RecordProxy, which provides methods for mutating and accessing record data in the Relay Store. It includes methods for getting and setting values, linked records, and invalidating records.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/api-reference/relay-runtime/store.md#2025-04-18_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\ninterface RecordProxy {\n  copyFieldsFrom(sourceRecord: RecordProxy): void;\n  getDataID(): string;\n  getLinkedRecord(name: string, arguments?: ?Object): ?RecordProxy;\n  getLinkedRecords(name: string, arguments?: ?Object): ?Array<?RecordProxy>;\n  getOrCreateLinkedRecord(\n    name: string,\n    typeName: string,\n    arguments?: ?Object,\n  ): RecordProxy;\n  getType(): string;\n  getValue(name: string, arguments?: ?Object): mixed;\n  setLinkedRecord(\n    record: RecordProxy,\n    name: string,\n    arguments?: ?Object,\n  ): RecordProxy;\n  setLinkedRecords(\n    records: Array<?RecordProxy>,\n    name: string,\n    arguments?: ?Object,\n  ): RecordProxy;\n  setValue(value: mixed, name: string, arguments?: ?Object): RecordProxy;\n  invalidateRecord(): void;\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting Records with Declarative Mutation Directives\nDESCRIPTION: GraphQL mutation using the @deleteRecord directive to remove an item from the Relay store after deletion on the server, demonstrating Relay's declarative approach to store updates.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/guided-tour/updating-data/graphql-mutations.md#2025-04-18_snippet_5\n\nLANGUAGE: graphql\nCODE:\n```\nmutation DeletePostMutation($input: DeletePostData!) {\n  delete_post(data: $input) {\n    deleted_post {\n      id @deleteRecord\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting a Node from a Connection\nDESCRIPTION: This JavaScript code demonstrates how to delete a node from a connection using `ConnectionHandler.deleteNode`.  It retrieves the connection and then calls `deleteNode` with the connection and the ID of the node to delete.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/api-reference/relay-runtime/store.md#2025-04-18_snippet_25\n\nLANGUAGE: javascript\nCODE:\n```\nconst user = store.get(userID);\nconst friends = ConnectionHandler.getConnection(user, 'FriendsFragment_friends');\nConnectionHandler.deleteNode(friends, idToDelete);\n```\n\n----------------------------------------\n\nTITLE: Converting PosterDetailsHovercardContents to Use Preloaded Query in JavaScript\nDESCRIPTION: This code snippet demonstrates how to modify the PosterDetailsHovercardContents component to use usePreloadedQuery instead of useLazyLoadQuery, accepting a queryRef prop instead of posterID.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/tutorial/queries-2.md#2025-04-18_snippet_8\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport {usePreloadedQuery} from 'react-relay';\nimport type {PreloadedQuery} from 'react-relay';\nimport type {PosterDetailsHovercardContentsQuery as QueryType} from './__generated__/PosterDetailsHovercardContentsQuery.graphql';\n\nexport default function PosterDetailsHovercardContents({\n  // change-line\n  queryRef,\n}: {\n  // change-line\n  queryRef: PreloadedQuery<QueryType>,\n}): React.ReactElement {\n  // change-line\n  const data = usePreloadedQuery(\n    PosterDetailsHovercardContentsQuery,\n    // change-line\n    queryRef,\n  );\n  ...\n```\n\n----------------------------------------\n\nTITLE: Configuring Query Cache Expiration Time for the Relay Store\nDESCRIPTION: Example of how to configure the query cache expiration time when creating a new Relay Store, which affects whether operations can be fulfilled with data already present in the store.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/guided-tour/reusing-cached-data/staleness-of-data.md#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst store = new Store(source, {queryCacheExpirationTime: 5 * 60 * 1000 });\n```\n\n----------------------------------------\n\nTITLE: Defining Weak Type with Automatic Resolver Generation in TypeScript\nDESCRIPTION: This snippet demonstrates how to define a weak type with an automatically generated resolver using the @gqlField docblock in TypeScript. It shows how to expose a field from the underlying model without writing an explicit resolver function.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/guides/relay-resolvers/defining-fields.md#2025-04-18_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * @RelayResolver\n */\nexport type UserModel = {\n  /**\n   * @gqlField\n   */\n  name: string,\n}\n```\n\n----------------------------------------\n\nTITLE: Using Relay Resolver with Combined Arguments\nDESCRIPTION: Demonstrates how to query a resolver field that uses combined arguments in a Relay query. Shows the usage of both JavaScript and GraphQL arguments in the query structure.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/guides/relay-resolvers.md#2025-04-18_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst data = useLazyLoadQuery(graphql`\n    query myQuery($id: ID, $my_arg: String!) {\n        node(id: $id) {\n           ... on MyType {\n                my_resolver_field(my_js_arg: \"World\", my_qql_arg: 2.5)\n           }\n        }\n   }\n`, { id: \"some id\" });\n```\n\n----------------------------------------\n\nTITLE: Disabling Button During Mutation\nDESCRIPTION: The LikeButton component is modified to disable the button while the mutation is in flight. This improves the user experience by preventing multiple likes from being triggered simultaneously.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/tutorial/mutations-updates.md#2025-04-18_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n<LikeButton\n  value={data.doesViewerLike}\n  onChange={onLikeButtonClicked}\n  // change-line\n  disabled={isMutationInFlight}\n/>\n```\n\n----------------------------------------\n\nTITLE: Rendering Data from a Fragment with useFragment Hook\nDESCRIPTION: A React component that uses the useFragment hook to access data from a fragment. It includes Flow type annotations for type safety and renders user data.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v13.0.0/guided-tour/rendering/fragments.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport type {UserComponent_user$key} from 'UserComponent_user.graphql';\n\nconst React = require('React');\n\nconst {graphql, useFragment} = require('react-relay');\n\ntype Props = {\n  user: UserComponent_user$key,\n};\n\nfunction UserComponent(props: Props) {\n  const data = useFragment(\n    graphql`\n      fragment UserComponent_user on User {\n        name\n        profile_picture(scale: 2) {\n          uri\n        }\n      }\n    `,\n    props.user,\n  );\n\n  return (\n    <>\n      <h1>{data.name}</h1>\n      <div>\n        <img src={data.profile_picture?.uri} />\n      </div>\n    </>\n  );\n}\n\nmodule.exports = UserComponent;\n```\n\n----------------------------------------\n\nTITLE: Converting Fragment Container to useFragment in React Relay\nDESCRIPTION: This snippet demonstrates how to migrate a Fragment Container to the useFragment hook, which simplifies the process of working with fragments in functional components.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/migration-and-compatibility/relay-hooks-and-legacy-container-apis.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as React from 'React';\nimport {graphql, createFragmentContainer} from 'react-relay';\n\nfunction UserComponent(props: Props) {\n  const user = props.user;\n  return (\n    <>\n      <h1>{user.name}</h1>\n      <div>\n        <img src={user.profile_picture?.uri} />\n      </div>\n    </>\n  );\n}\n\nexport default createFragmentContainer(UserComponent, {\n  user: graphql`\n    fragment UserComponent_user on User {\n      name\n      age\n      profile_picture(scale: 2) {\n        uri\n      }\n    }\n  `,\n});\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as React from 'React';\nimport {graphql, useFragment} from 'react-relay';\n\nexport default function UserComponent(props: Props) {\n  const data = useFragment(\n    graphql`\n      fragment UserComponent_user on User {\n        name\n        profile_picture(scale: $scale) {\n          uri\n        }\n      }\n    `,\n    props.user,\n  );\n\n  return (\n    <>\n      <h1>{data.name}</h1>\n      <div>\n        <img src={data.profile_picture?.uri} />\n      </div>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Running Relay Compiler in Watch Mode\nDESCRIPTION: This command runs the Relay Compiler in watch mode, which automatically re-generates artifacts as the source code is updated. This is particularly useful during development to ensure that the latest changes are compiled immediately. The command should be executed where the project's dependencies are accessible.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/guided-tour/workflow.md#2025-04-18_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nyarn run relay --watch\n```\n\n----------------------------------------\n\nTITLE: Specifying Connection Identity Filters with the filters Parameter\nDESCRIPTION: This snippet shows how to use the filters parameter with the @connection directive to specify exactly which arguments should be part of the connection identity. This helps manage complexity when dealing with many filter arguments.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/guided-tour/updating-data/updating-connections.md#2025-04-18_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nconst {graphql} = require('relay-runtime');\n\nconst storyFragment = graphql`\n  fragment StoryComponent_story on Story {\n    comments(\n      order_by: $orderBy\n      filter_mode: $filterMode\n      language: $language\n    )\n      @connection(\n        key: \"StoryComponent_story_comments_connection\"\n        filters: [\"order_by\", \"filter_mode\"]\n      ) {\n      edges {\n        nodes {\n          body {\n            text\n          }\n        }\n      }\n    }\n  }\n`;\n```\n\n----------------------------------------\n\nTITLE: Visualizing Relay Query Data Fetching Flow\nDESCRIPTION: ASCII diagram showing the process of fetching a query from the server and normalizing the response into Record objects stored in a RecordSource.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v13.0.0/principles-and-architecture/runtime-architecture.md#2025-04-18_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n               ┌───────────────────────┐\n               │         Query         │\n               └───────────────────────┘\n                           │\n                           ▼\n                                             ┌ ─ ─ ─ ┐\n                         fetch ◀────────────▶ Server\n                                             └ ─ ─ ─ ┘\n                           │\n                     ┌─────┴───────┐\n                     ▼             ▼\n               ┌──────────┐  ┌──────────┐\n               │  Query   │  │ Response │\n               └──────────┘  └──────────┘\n                     │             │\n                     └─────┬───────┘\n                           │\n                           ▼\n                       normalize\n                           │\n                           ▼\n               ┌───────────────────────┐\n               │     RecordSource      │\n               │                       │\n               │┌──────┐┌──────┐┌─────┐│\n               ││Record││Record││ ... ││\n               │└──────┘└──────┘└─────┘│\n               └───────────────────────┘\n```\n\n----------------------------------------\n\nTITLE: Refetching Fragment without Suspense in JavaScript\nDESCRIPTION: This snippet demonstrates how to manually manage loading states during data refetching to avoid using Suspense. It replaces the need for a Suspense fallback by using fetchQuery to previously cache data in the Relay store. This method involves keeping a custom isRefetching state to manage the component's loading UI externally and refetches data using a store-only policy once the query is complete to ensure no suspension occurs.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v13.0.0/guided-tour/refetching/refetching-fragments-with-different-data.md#2025-04-18_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport type {CommentBodyRefetchQuery} from 'CommentBodyRefetchQuery.graphql';\nimport type {CommentBody_comment$key} from 'CommentBody_comment.graphql';\n\ntype Props = {\n  comment: CommentBody_comment$key,\n};\n\nfunction CommentBody(props: Props) {\n  const [data, refetch] = useRefetchableFragment<CommentBodyRefetchQuery, _>(\n    graphql`\n      fragment CommentBody_comment on Comment\n      # @refetchable makes it so Relay autogenerates a query for\n      # fetching this fragment\n      @refetchable(queryName: \"CommentBodyRefetchQuery\") {\n        body(lang: $lang) {\n          text\n        }\n      }\n    `,\n    props.comment,\n  );\n\n  const [isRefetching, setIsRefreshing] = useState(false)\n  const refetchTranslation = () => {\n    if (isRefetching) { return; }\n    setIsRefreshing(true);\n\n    // fetchQuery will fetch the query and write\n    // the data to the Relay store. This will ensure\n    // that when we re-render, the data is already\n    // cached and we don't suspend\n    fetchQuery(environment, AppQuery, variables)\n      .subscribe({\n        complete: () => {\n          setIsRefreshing(false);\n\n          // *After* the query has been fetched, we call\n          // refetch again to re-render with the updated data.\n          // At this point the data for the query should\n          // be cached, so we use the 'store-only'\n          // fetchPolicy to avoid suspending.\n          refetch({lang: 'SPANISH'}, {fetchPolicy: 'store-only'});\n        }\n        error: () => {\n          setIsRefreshing(false);\n        }\n      });\n  };\n\n  return (\n    <>\n      <p>{data.body?.text}</p>\n      <Button\n        disabled={isRefetching}\n        onClick={() => refetchTranslation()}>\n        Translate Comment {isRefetching ? <LoadingSpinner /> : null}\n      </Button>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Queries with loadQuery in React\nDESCRIPTION: Demonstrates using the `loadQuery` function to fetch a GraphQL query outside of React component context, emphasizing early fetch before component render.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/guided-tour/rendering/queries.md#2025-04-18_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport type {HomeTabQuery as HomeTabQueryType} from 'HomeTabQuery.graphql';\n\nconst HomeTabQuery = require('HomeTabQuery.graphql')\nconst {loadQuery} = require('react-relay');\n\n\nconst environment = createEnvironment(...);\n\n// At some point during app initialization\nconst initialQueryRef = loadQuery<HomeTabQueryType>(\n  environment,\n  HomeTabQuery,\n  {id: '4'},\n);\n\n// ...\n\n// E.g. passing the initialQueryRef to the root component\nrender(<AppTabs initialQueryRef={initialQueryRef} initialTab={...} />)\n```\n\n----------------------------------------\n\nTITLE: Updating a Local Note with commitLocalUpdate\nDESCRIPTION: This function uses `commitLocalUpdate` to update the `body` and `title` fields of an existing `Note` record in the Relay store.  It directly modifies the store using the provided `dataID`. Requires 'react-relay' dependency.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/guides/client-schema-extensions.md#2025-04-18_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport {commitLocalUpdate} from 'react-relay';\n\nfunction updateUserNote(environment, dataID, body, title) {\n  commitLocalUpdate(environment, store => {\n    const note = store.get(dataID);\n\n    note.setValue(body, 'body');\n    note.setValue(title, 'title')\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Relay Resolver Transform in Relay Compiler Config in JSON\nDESCRIPTION: This JSON snippet demonstrates the configuration of the Relay compiler to enable the 'enable_relay_resolver_transform' feature flag. It is part of a Relay compiler configuration file used to specify paths for source and schema files and to set the language to TypeScript.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/guides/relay-resolvers/enabling.md#2025-04-18_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"src\": \"./src\",\n  \"schema\": \"./schema.graphql\",\n  \"language\": \"typescript\",\n  \"featureFlags\": {\n    // highlight-next-line\n    \"enable_relay_resolver_transform\": true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: GraphQL Query with @required Directive\nDESCRIPTION: This GraphQL query demonstrates the use of the `@required` directive on the `name` field. If `name` is null, Relay will return `{ viewer: null }`, effectively bubbling the nullness up to the parent field. The action `LOG` specifies that the error should be logged but rendering can continue.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/guides/required-directive.md#2025-04-18_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nquery MyQuery {\n  viewer {\n    name @required(action: LOG)\n    age\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Spreading Component Fragments in Mutations\nDESCRIPTION: Example of spreading fragment references in a mutation to ensure components are refreshed with updated data after the mutation completes.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/guided-tour/updating-data/graphql-mutations.md#2025-04-18_snippet_4\n\nLANGUAGE: graphql\nCODE:\n```\nmutation FeedbackLikeMutation($input: FeedbackLikeData!) {\n  feedback_like(data: $input) {\n    feedback {\n      ...FeedbackDisplay_feedback\n      ...FeedbackDetail_feedback\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using useClientQuery Hook in React Component\nDESCRIPTION: A React component example demonstrating how to use the useClientQuery hook to fetch client-only fields. This component renders the client_field value from the local store without making a network request.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/api-reference/hooks/use-client-query.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst React = require('React');\n\nconst {graphql, useClientQuery} = require('react-relay');\n\nfunction ClientQueryComponent() {\n  const data = useClientQuery(\n    graphql`\n      query ClientQueryComponentQuery {\n        client_field\n      }\n    `,\n    {}, // variables\n  );\n\n  return (\n    <div>{data.client_field}</div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Ships and Checking for Page End\nDESCRIPTION: Queries for Rebel ships and checks if more pages are available by using the `pageInfo` type within the Relay connection model.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/guides/graphql-server-specification.md#2025-04-18_snippet_8\n\nLANGUAGE: graphql\nCODE:\n```\nquery EndOfRebelShipsQuery { rebels { name originalShips: ships(first: 2) { edges { node { name } } pageInfo { hasNextPage } } moreShips: ships(first: 3 after: \"YXJyYXljb25uZWN0aW9uOjE=\") { edges { node { name } } pageInfo { hasNextPage } } } }\n```\n\n----------------------------------------\n\nTITLE: Defining a Fragment Component for Username in React-Relay\nDESCRIPTION: This snippet shows how to create a fragment component for rendering a user's username using React-Relay. It defines the component props, uses the useFragment hook, and declares a GraphQL fragment.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/guided-tour/reusing-cached-data/rendering-partially-cached-data.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * UsernameComponent.react.js\n *\n * Fragment Component\n */\n\nimport type {UsernameComponent_user$key} from 'UsernameComponent_user.graphql';\n\nconst React = require('React');\nconst {graphql, useFragment} = require('react-relay');\n\ntype Props = {\n  user: UsernameComponent_user$key,\n};\n\nfunction UsernameComponent(props: Props) {\n  const user = useFragment(\n    graphql`\n      fragment UsernameComponent_user on User {\n        username\n      }\n    `,\n    props.user,\n  );\n  return (...);\n}\n\nmodule.exports = UsernameComponent;\n```\n\n----------------------------------------\n\nTITLE: Implementing Paginated Newsfeed Component\nDESCRIPTION: Shows the complete implementation of a newsfeed component with pagination support using Relay fragments.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/tutorial/connections-pagination.md#2025-04-18_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nfunction NewsfeedContents({viewer}) {\n  const {data, loadNext} = usePaginationFragment(NewsfeedFragment, viewer);\n  const storyEdges = data.newsfeedStories.edges;\n  return (\n    <>\n      {storyEdges.map(storyEdge =>\n        <Story key={storyEdge.node.id} story={storyEdge.node} />\n      )}\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Consuming Relay Resolver Field in Component\nDESCRIPTION: Shows how to use a Relay Resolver field in a React component using useFragment hook.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/guides/relay-resolvers.md#2025-04-18_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nfunction MyGreeting({userKey}) {\n  const user = useFragment(`\n    fragment MyGreeting on User {\n      greeting\n    }`, userKey);\n  return<h1>{user.greeting}<h1>;\n}\n```\n\n----------------------------------------\n\nTITLE: Using useEntryPointLoader in React\nDESCRIPTION: This snippet demonstrates how to use the `useEntryPointLoader` hook in a React component to load and dispose of an EntryPoint. It uses a button to trigger the loading and disposal of the EntryPoint, and renders the EntryPoint's content using `EntryPointContainer` within a `Suspense` component.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/api-reference/entrypoint-apis/use-entrypoint-loader.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst {useEntryPointLoader, EntryPointContainer} = require('react-relay');\n\nconst ComponentEntryPoint = require('Component.entrypoint');\n\nfunction EntryPointRevealer(): React.MixedElement {\n  const environmentProvider = useMyEnvironmentProvider();\n  const [\n    entryPointReference,\n    loadEntryPoint,\n    disposeEntryPoint,\n  ] = useEntryPointLoader(environmentProvider, ComponentEntryPoint);\n\n  return (\n    <>\n      {\n        entryPointReference == null && (\n          <Button onClick={() => loadEntryPoint({})}>\n            Click to reveal the contents of the EntryPoint\n          </Button>\n        )\n      }\n      {\n        entryPointReference != null && (\n          <>\n            <Button onClick={disposeEntryPoint}>\n              Click to hide and dispose the EntryPoint.\n            </Button>\n            <Suspense fallback=\"Loading...\">\n              <EntryPointContainer\n                entryPointReference={entryPointReference}\n                props={{}}\n              />\n            </Suspense>\n          </>\n        )\n      }\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using @inline directive in Relay\nDESCRIPTION: The `@inline` directive allows for reading data from a fragment outside of React's render phase. This example showcases how to define a fragment with `@inline` and use it in a React component.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/api-reference/graphql/graphql-directives.md#2025-04-18_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport {graphql, readInlineData} from 'react-relay';\n\n// non-React function called from React\nfunction processItemData(itemRef) {\n  const item = readInlineData(graphql`\n    fragment processItemData_item on Item @inline {\n      title\n      price\n      creator {\n        name\n      }\n    }\n  `, itemRef);\n  sendToThirdPartyApi({\n    title: item.title,\n    price: item.price,\n    creatorName: item.creator.name\n  });\n}\n\nexport default function MyComponent({item}) {\n  function handleClick() {\n    processItemData(item);\n  }\n\n  const data = useFragment(\n    graphql`\n      fragment MyComponent_item on Item {\n        ...processItemData_item\n        title\n      }\n    `,\n    item\n  );\n\n  return (\n    <button onClick={handleClick}>Process {item.title}</button>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using ErrorBoundaryWithRetry with useLazyLoadQuery Pattern\nDESCRIPTION: Example application using the ErrorBoundaryWithRetry component with Relay's useLazyLoadQuery pattern. This demonstrates how to re-evaluate and refetch a query on error recovery.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v13.0.0/guided-tour/rendering/error-states.md#2025-04-18_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * App.react.js\n */\n\nconst ErrorBoundaryWithRetry = require('ErrorBoundaryWithRetry');\nconst React = require('React');\n\nconst MainContent = require('./MainContent.react');\n\n// NOTE: This is NOT actual production code;\n// it is only used to illustrate example\nfunction App() {\n  return (\n    <ErrorBoundaryWithRetry\n      fallback={({error, retry}) =>\n        <>\n          <ErrorUI error={error} />\n          {/* Render a button to retry; this will attempt to re-render the\n            content inside the boundary, i.e. the query component */}\n          <Button onPress={retry}>Retry</Button>\n        </>\n      }>\n      {({fetchKey}) => {\n        // If we have retried, use the new `retryQueryRef` provided\n        // by the Error Boundary\n        return <MainContent fetchKey={fetchKey} />;\n      }}\n    </ErrorBoundaryWithRetry>\n  );\n}\n\n/**\n * MainContent.react.js\n */\nfunction MainContent(props) {\n  const data = useLazyLoadQuery(\n    graphql`...`,\n    variables,\n    {fetchKey: props.fetchKey}\n  );\n\n  return (/* ... */);\n}\n```\n\n----------------------------------------\n\nTITLE: Using Error Boundary in React Application\nDESCRIPTION: Shows how to wrap components with an Error Boundary to handle errors and render fallback UI when errors occur.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/guided-tour/rendering/error-states.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * App.react.js\n */\n\nconst ErrorBoundary = require('ErrorBoundary');\nconst React = require('React');\n\nconst MainContent = require('./MainContent.react');\nconst SecondaryContent = require('./SecondaryContent.react');\n\nfunction App() {\n  return (\n    // Render an ErrorSection if an error occurs within\n    // MainContent or Secondary Content\n    <ErrorBoundary fallback={error => <ErrorUI error={error} />}>\n      <MainContent />\n      <SecondaryContent />\n    </ErrorBoundary>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using Multiple Fragments in a Single Component\nDESCRIPTION: A React component that uses useFragment multiple times to access data from different fragments. It shows how to handle multiple fragment references as props.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v13.0.0/guided-tour/rendering/fragments.md#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport type {UserComponent_user$key} from 'UserComponent_user.graphql';\nimport type {UserComponent_viewer$key} from 'UserComponent_viewer.graphql';\n\nconst React = require('React');\nconst {graphql, useFragment} = require('react-relay');\n\ntype Props = {\n  user: UserComponent_user$key,\n  viewer: UserComponent_viewer$key,\n};\n\nfunction UserComponent(props: Props) {\n  const userData = useFragment(\n    graphql`\n      fragment UserComponent_user on User {\n        name\n        profile_picture(scale: 2) {\n          uri\n        }\n      }\n    `,\n    props.user,\n  );\n\n  const viewerData = useFragment(\n    graphql`\n      fragment UserComponent_viewer on Viewer {\n        actor {\n          name\n        }\n      }\n    `,\n    props.viewer,\n  );\n\n  return (\n    <>\n      <h1>{userData.name}</h1>\n      <div>\n        <img src={userData.profile_picture?.uri} />\n        Acting as: {viewerData.actor?.name ?? 'Unknown'}\n      </div>\n    </>\n  );\n}\n\nmodule.exports = UserComponent;\n```\n\n----------------------------------------\n\nTITLE: Story Fragment with Comments Section\nDESCRIPTION: GraphQL fragment showing how to compose the StoryCommentsSection fragment into the main Story fragment\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/tutorial/connections-pagination.md#2025-04-18_snippet_2\n\nLANGUAGE: graphql\nCODE:\n```\nconst StoryFragment = graphql`\n  fragment StoryFragment on Story {\n    // ... as before\n    ...StoryCommentsSectionFragment\n  }\n`;\n```\n\n----------------------------------------\n\nTITLE: Implementing Optional UI Fields with Relay Required Directive\nDESCRIPTION: Example fragment showing how to use @required directive with LOG action to handle optional UI elements. The fragment demonstrates both component-level and object-field-level required fields.\nSOURCE: https://github.com/facebook/relay/blob/main/website/blog/2023-01-03-resilient-relay-apps.mdx#2025-04-18_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nfragment MyFragment on Asset {\n  id\n  name @required(action: LOG)\n  slug @required(action: LOG)\n  color\n  supply {\n    total @required(action: LOG)\n    circulating @required(action: LOG)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Multiple Suspense Boundaries in React\nDESCRIPTION: Demonstrates how to use multiple Suspense components to provide granular control over loading states for different parts of the application.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/guided-tour/rendering/loading-states.md#2025-04-18_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nconst React = require('React');\nconst {Suspense} = require('React');\n\nfunction App() {\n  return (\n    <>\n      {/* Show a separate loading UI for the LeftHandColumn */}\n      <Suspense fallback={<LeftColumnPlaceholder />}>\n        <LeftColumn />\n      </Suspense>\n\n      {/* Show a separate loading UI for both the Main and Secondary content */}\n      <Suspense fallback={<LoadingGlimmer />}>\n        <MainContent />\n        <SecondaryContent />\n      </Suspense>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Retaining Queries in Relay\nDESCRIPTION: Demonstrates how to retain a query in Relay to prevent its data from being garbage collected. It shows retaining a query using the environment.retain() method and disposing of the retention when no longer needed.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/guided-tour/reusing-cached-data/presence-of-data.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// Retain query; this will prevent the data for this query and\n// variables from being garbage collected by Relay\nconst disposable = environment.retain(queryDescriptor);\n\n// Disposing of the disposable will release the data for this query\n// and variables, meaning that it can be deleted at any moment\n// by Relay's garbage collection if it hasn't been retained elsewhere\ndisposable.dispose();\n```\n\n----------------------------------------\n\nTITLE: Defining Story Like Button Fragment in GraphQL\nDESCRIPTION: GraphQL fragment definition for the Like button component that fetches the story's like count and viewer's like status.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/tutorial/mutations-updates.md#2025-04-18_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\nconst StoryLikeButtonFragment = graphql`\n  fragment StoryLikeButtonFragment on Story {\n    id\n    likeCount\n    doesViewerLike\n  }\n`;\n```\n\n----------------------------------------\n\nTITLE: Getting Field Value from Record in Relay Store\nDESCRIPTION: Example of retrieving a field value from a record in the Relay Store using the getValue method of RecordProxy. It can optionally take arguments for fields with parameters.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/api-reference/relay-runtime/store.md#2025-04-18_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nconst name = viewer.getValue('name');\n\n// With arguments\nconst name = viewer.getValue('name', {arg: 'value'});\n```\n\n----------------------------------------\n\nTITLE: Understanding Relay's Fragment Refetching\nDESCRIPTION: This section explains the criteria under which fragments can be refetched in Relay, detailing how to construct queries that identify fragments by their unique IDs instead of relying on their original path. It emphasizes the necessity of unique IDs for node identification and outlines the structure required by GraphQL to support refetchable fragments.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/tutorial/refetchable-fragments.md#2025-04-18_snippet_8\n\nLANGUAGE: GraphQL\nCODE:\n```\nquery MyQuery {\n  topTrendingPosts {\n    title\n    summary\n    date\n    poster {\n     ...PosterFragment\n    }\n  }\n}\n\n```\n\nLANGUAGE: GraphQL\nCODE:\n```\nquery RefetchQuery {\n  node(id: \"abcdef\") {\n    ...PosterFragment\n  }\n}\n\n```\n\nLANGUAGE: GraphQL\nCODE:\n```\ntype Person implements Node {\n  id: ID!\n  ...\n}\n\n```\n\nLANGUAGE: GraphQL\nCODE:\n```\ninterface Node {\n  id: ID!\n}\n\n```\n\n----------------------------------------\n\nTITLE: Implementing Error Boundary with Retry Functionality\nDESCRIPTION: Demonstrates an Error Boundary component with retry functionality for use with useQueryLoader and loadQuery in Relay.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/guided-tour/rendering/error-states.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * ErrorBoundaryWithRetry.react.js\n */\n\nconst React = require('React');\n\n// NOTE: This is NOT actual production code;\n// it is only used to illustrate example\nclass ErrorBoundaryWithRetry extends React.Component<Props, State> {\n  state = {error: null};\n\n  static getDerivedStateFromError(error): State {\n    return {error: error};\n  }\n\n  _retry = () => {\n    // This ends up calling loadQuery again to get and render\n    // a new query reference\n    this.props.onRetry();\n    this.setState({\n      // Clear the error\n      error: null,\n    });\n  }\n\n  render() {\n    const {children, fallback} = this.props;\n    const {error} = this.state;\n    if (error) {\n      if (typeof fallback === 'function') {\n        return fallback({error, retry: this._retry});\n      }\n      return fallback;\n    }\n    return children;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring a Fragment in JavaScript with Relay\nDESCRIPTION: Shows how to declare a GraphQL fragment in JavaScript using Relay's graphql tag.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/guided-tour/rendering/fragments.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst {graphql} = require('react-relay');\n\nconst userFragment = graphql`\n  fragment UserFragment_user on User {\n    name\n    age\n    profile_picture(scale: 2) {\n      uri\n    }\n  }\n`;\n```\n\n----------------------------------------\n\nTITLE: Spreading ImageFragment in StoryFragment\nDESCRIPTION: This code snippet demonstrates how to spread the `ImageFragment` into the `StoryFragment`. By spreading the fragment, the `StoryFragment` now includes the data requirements defined in the `ImageFragment` when querying for the `thumbnail` field.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/tutorial/fragments-1.md#2025-04-18_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst StoryFragment = graphql`\n  fragment StoryFragment on Story {\n    title\n    summary\n    postedAt\n    poster {\n      ...PosterBylineFragment\n    }\n    thumbnail {\n      // change-line\n      ...ImageFragment\n    }\n  }\n`;\n```\n\n----------------------------------------\n\nTITLE: Composing Relay Fragments\nDESCRIPTION: Implementation of fragment composition in Relay, showing how to combine parent and child component data requirements.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-classic/Classic-Guides-Containers.md#2025-04-18_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = Relay.createContainer(Profile, {\n  fragments: {\n    user: () => Relay.QL`\n      fragment on User {\n        # Specify any fields required by '<Profile>' itself.\n        name,\n\n        # Include a reference to the fragment from the child component.\n        ${ProfilePicture.getFragment('user')},\n      }\n    `,\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Using ConnectionHandler.getConnection to Access Connections via Parent Record in Relay\nDESCRIPTION: This code shows how to access a connection record via its parent record by using the ConnectionHandler.getConnection API when you have access to the parent record that holds the connection.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/guided-tour/list-data/updating-connections.md#2025-04-18_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst {ConnectionHandler} = require('relay-runtime');\n\nfunction updater(store: RecordSourceSelectorProxy) {\n  // Get parent story record\n  // storyID is passed as input to the mutation/subscription\n  const storyRecord = store.get(storyID);\n\n  // Get the connection record from the parent\n  const connectionRecord = ConnectionHandler.getConnection(\n    storyRecord,\n    'StoryComponent_story_comments_connection',\n  );\n\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Using @deleteEdge Directive in GraphQL Mutation\nDESCRIPTION: This example shows how to use the @deleteEdge directive in a GraphQL mutation to delete edges from connections. It demonstrates passing connection IDs and using the directive on the deletedCommentIds field to remove edges from specified connections.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/guided-tour/list-data/updating-connections.md#2025-04-18_snippet_10\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Get the connection ID using the `__id` field\nconst connectionID = fragmentData?.comments?.__id;\n\n// Or get it using `ConnectionHandler.getConnectionID()`\nconst connectionID = ConnectionHandler.getConnectionID(\n  '<story-id>',\n  'StoryComponent_story_comments_connection',\n);\n\n// ...\n\n// Mutation\ncommitMutation<DeleteCommentsMutation>(environment, {\n  mutation: graphql`\n    mutation DeleteCommentsMutation(\n      # Define a GraphQL variable for the connections array\n      $connections: [ID!]!\n      $input: CommentsDeleteInput\n    ) {\n      commentsDelete(input: $input) {\n        deletedCommentIds @deleteEdge(connections: $connections)\n      }\n    }\n  `,\n  variables: {\n    input,\n    // Pass the `connections` array\n    connections: [connectionID],\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Querying Data with Variables in TypeScript\nDESCRIPTION: Shows how to use the emitted type information for query variables and response data in TypeScript. The example includes a query with an artistID variable and the corresponding type definitions.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/guides/type-emission.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * export type ExampleQuery$variables = {\n *   readonly artistID: string\n * }\n * export type ExampleQuery$data = {\n *   readonly artist?: {\n *     readonly name?: string\n *   }\n * }\n * export type ExampleQuery = {\n *   readonly variables: ExampleQuery$variables\n *   readonly response: ExampleQuery$data\n * }\n */\nconst data = useLazyLoadQuery(\n  graphql`\n    query ExampleQuery($artistID: ID!) {\n      artist(id: $artistID) {\n        name\n      }\n    }\n  `,\n  // variables are expected to be of type ExampleQuery$variables\n  {artistID: 'banksy'},\n);\n```\n\n----------------------------------------\n\nTITLE: Refetching Fragment with useRefetchableFragment in React and Relay\nDESCRIPTION: This snippet demonstrates how to use the useRefetchableFragment Hook to refetch a fragment with different data. It includes the fragment definition with @refetchable directive and shows how to call the refetch function with new variables.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/guided-tour/refetching/refetching-fragments-with-different-data.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport type {CommentBodyRefetchQuery} from 'CommentBodyRefetchQuery.graphql';\nimport type {CommentBody_comment$key} from 'CommentBody_comment.graphql';\n\ntype Props = {\n  comment: CommentBody_comment$key,\n};\n\nfunction CommentBody(props: Props) {\n  const [data, refetch] = useRefetchableFragment<CommentBodyRefetchQuery, _>(\n    graphql`\n      fragment CommentBody_comment on Comment\n      @refetchable(queryName: \"CommentBodyRefetchQuery\") {\n        body(lang: $lang) {\n          text\n        }\n      }\n    `,\n    props.comment,\n  );\n\n  const refetchTranslation = () => {\n    refetch({lang: 'SPANISH'});\n  };\n\n  return (\n    <>\n      <p>{data.body?.text}</p>\n      <Button\n        onClick={() => refetchTranslation()}>\n        Translate Comment\n      </Button>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Refetchable Directive\nDESCRIPTION: Adding the @refetchable directive to enable fragment refetching with a specified query name.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/tutorial/refetchable-fragments.md#2025-04-18_snippet_4\n\nLANGUAGE: graphql\nCODE:\n```\nconst ContactsListFragment = graphql`\n  fragment ContactsListFragment on Viewer\n    @refetchable(queryName: \"ContactsListRefetchQuery\")\n    @argumentDefinitions(\n      search: {type: \"String\", defaultValue: null}\n    )\n  {\n     // ...\n  }\n`;\n```\n\n----------------------------------------\n\nTITLE: Edge Creation and Insertion Example in JavaScript\nDESCRIPTION: Example code showing how to create and insert edges using ConnectionHandler. This demonstrates creating an edge for a new friend and inserting it at the beginning or end of a connection.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v13.0.0/api-reference/relay-runtime/store.md#2025-04-18_snippet_44\n\nLANGUAGE: javascript\nCODE:\n```\nconst user = store.get(userID);\nconst friends = ConnectionHandler.getConnection(user, 'FriendsFragment_friends');\nconst newFriend = store.get(newFriendId);\nconst edge = ConnectionHandler.createEdge(store, friends, newFriend, 'UserEdge');\n\n// No cursor provided, append the edge at the end.\nConnectionHandler.insertEdgeAfter(friends, edge);\n\n// No cursor provided, insert the edge at the front:\nConnectionHandler.insertEdgeBefore(friends, edge);\n```\n\n----------------------------------------\n\nTITLE: Querying Nested Data with GraphQL\nDESCRIPTION: Illustrates a more complex GraphQL query that retrieves nested data, including a person's information and details about their location. This demonstrates GraphQL's ability to traverse relationships in a single query.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/tutorial/graphql.md#2025-04-18_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  person(id: \"24601\") {\n    name\n    occupation\n    location {\n      name\n      population\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Optimistic Updater to commitMutation\nDESCRIPTION: The commitMutation call is updated to include an optimisticUpdater. This callback is executed immediately when the mutation is dispatched, allowing for immediate UI updates.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/tutorial/mutations-updates.md#2025-04-18_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nfunction StoryLikeButton({story}) {\n  ...\n  function onLikeButtonClicked(newDoesLike) {\n    commitMutation({\n      variables: {\n        id: data.id,\n        doesLike: newDoesLike,\n      },\n      // change\n      optimisticUpdater: store => {\n        // TODO fill in optimistic updater\n      },\n      // end-change\n    })\n  }\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Creating New Client-Only Types in GraphQL\nDESCRIPTION: Shows how to define completely new client-only types in GraphQL, including enums, regular types, and extending server types with fields of client-only types. This example creates a fetch state tracking system.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v13.0.0/guided-tour/updating-data/client-only-data.md#2025-04-18_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\n# You can define more than one type in a single file\nenum FetchStatus {\n  FETCHED\n  PENDING\n  ERRORED\n}\n\n\ntype FetchState {\n  # You can reuse client types to define other types\n  status: FetchStatus\n\n  # You can also reference regular server types\n  started_by: User!\n}\n\nextend type Item {\n  # You can extend server types with client-only types\n  fetch_state: FetchState\n}\n```\n\n----------------------------------------\n\nTITLE: Using Aliased Fragments for Safety\nDESCRIPTION: This snippet shows how to use the `@alias` directive in the `MyNode` component to ensure type safety when fetching a fragment that might be of a different type.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/guides/alias-directive.md#2025-04-18_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nfunction MyNode({nodeKey}) {\n  const node = useFragment(graphql`\n    fragment MyFragment on Node {\n      ...MyViewer @alias(as: \"my_viewer\")\n    }`, nodeKey);\n\n  if(node.my_viewer == null) {\n    return null;\n  }\n\n  return <MyViewer viewerKey={node.my_viewer} />\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Connections with Specific Filter Values in Relay\nDESCRIPTION: This snippet shows how to access connection records from the Relay store using specific filter values. It demonstrates getting connections for comments sorted by date and for friends-only comments.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v13.0.0/guided-tour/list-data/updating-connections.md#2025-04-18_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nconst {ConnectionHandler} = require('RelayModern');\n\nfunction updater(store: RecordSourceSelectorProxy) {\n  const storyRecord = store.get(storyID);\n\n  // Get the connection instance for the connection with comments sorted\n  // by the date they were added\n  const connectionRecordSortedByDate = ConnectionHandler.getConnection(\n    storyRecord,\n    'StoryComponent_story_comments_connection',\n    {order_by: '*DATE_ADDED*', filter_mode: null, language: null}\n  );\n\n  // Get the connection instance for the connection that only contains\n  // comments made by friends\n  const connectionRecordFriendsOnly = ConnectionHandler.getConnection(\n    storyRecord,\n    'StoryComponent_story_comments_connection',\n    {order_by: null, filter_mode: '*FRIENDS_ONLY*', langugage: null}\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Local GraphQL Types - GraphQL\nDESCRIPTION: This code snippet defines a new GraphQL type 'Note' with fields for id, title, and body. It also demonstrates how to extend the existing 'User' type to include a list of 'Note' types under 'notes'. The snippet shows how to expand local data for querying in Relay.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/guides/client-schema-extensions.md#2025-04-18_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\ntype Note {\n  id: ID!\n  title: String\n  body: String\n}\n\nextend type User {\n  notes: [Note]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Derived Fields with @rootFragment in Relay\nDESCRIPTION: Illustrates how to define a derived field using the @rootFragment tag, which specifies a fragment defining the data dependencies. The resolver function uses readFragment to access the dependent data.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/api-reference/relay-resolvers/docblock-format.md#2025-04-18_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport {readFragment} from 'relay-runtime';\n\n/**\n * @RelayResolver User.fullName: String\n * @rootFragment UserFullNameFragment\n */\nexport function fullName(key: UserFullNameFragment$key): string {\n  const user = readFragment(\n    graphql`\n      fragment UserFullNameFragment on User {\n        firstName\n        lastName\n      }\n    `,\n    key,\n  );\n  return `${user.firstName} ${user.lastName}`;\n}\n```\n\n----------------------------------------\n\nTITLE: Using @required in Inline Fragment with __typename\nDESCRIPTION: Shows how to use @required in an inline fragment with __typename to generate more specific Flow types for nullable fields.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/guides/required-directive.md#2025-04-18_snippet_5\n\nLANGUAGE: graphql\nCODE:\n```\nfragment MyFrag on Actor {\n  __typename\n  ... on User {\n    name @required(action: THROW)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Executing Mutation with useMutation Hook in Relay (JavaScript)\nDESCRIPTION: Illustrates using the useMutation hook to commit a previously defined mutation for posting comments and update the UI optimistically by resetting the input field.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/tutorial/mutations-updates.md#2025-04-18_snippet_12\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction StoryCommentsComposer({story}) {\n  const data = useFragment(StoryCommentsComposerFragment, story);\n  const [text, setText] = useState('');\n  // change-line\n  const [commitMutation, isMutationInFlight] = useMutation(StoryCommentsComposerPostMutation);\n  function onPost() {\n    // change\n    setText(''); // Reset the UI\n    commitMutation({\n      variables: {\n        id: data.id,\n        text,\n      },\n    })\n    // end-change\n  }\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Complete Implementation\nDESCRIPTION: Full implementation combining all components including schema extension, assignable fragment, component logic, and store updates.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/guided-tour/updating-data/imperatively-modifying-linked-fields.md#2025-04-18_snippet_4\n\nLANGUAGE: graphql\nCODE:\n```\nextend type Viewer {\n  best_friend: User,\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// AssignBestFriendButton.react.js\nimport type {AssignBestFriendButton_user$key} from 'AssignBestFriendButton_user.graphql';\nimport type {RecordSourceSelectorProxy} from 'react-relay';\n\nconst {commitLocalUpdate, useFragment, useRelayEnvironment} = require('react-relay');\n\ngraphql`\n  fragment AssignBestFriendButton_assignable_user on User @assignable {\n    __typename\n  }\n`;\n\nexport default function AssignBestFriendButton({\n  someTypeRef: AssignBestFriendButton_someType$key,\n}) {\n  const data = useFragment(graphql`\n    fragment AssignBestFriendButton_someType on SomeType {\n      user {\n        name\n        ...AssignableBestFriendButton_assignable_user\n      }\n    }\n  `, someTypeRef);\n\n  const environment = useRelayEnvironment();\n  const onClick = () => {\n    const updatableData = commitLocalUpdate(\n      environment,\n      (store: RecordSourceSelectorProxy) => {\n        const {updatableData} = store.readUpdatableQuery(\n            graphql`\n              query AssignBestFriendButtonUpdatableQuery\n              @updatable {\n                viewer {\n                  best_friend {\n                    ...AssignableBestFriendButton_assignable_user\n                  }\n                }\n              }\n            `,\n            {}\n          );\n\n        if (data.user != null && updatableData.viewer != null) {\n          updatableData.viewer.best_friend = data.user;\n        }\n      }\n    );\n  };\n\n  return (<button onClick={onClick}>\n    Declare {user.name ?? 'someone with no name'} my best friend!\n  </button>);\n}\n```\n\n----------------------------------------\n\nTITLE: Installing React and Relay using yarn\nDESCRIPTION: This snippet demonstrates how to install the necessary React and Relay packages using `yarn`. These packages are essential for building Relay applications. Make sure you have `yarn` installed before running this command.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/getting-started/installation-and-setup.md#2025-04-18_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n\"yarn add react react-dom react-relay\"\n```\n\n----------------------------------------\n\nTITLE: Defining Connection Fragment in Relay\nDESCRIPTION: Example showing how to declare a connection using @connection directive in a Relay fragment.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/guided-tour/list-data/updating-connections.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst {graphql} = require('react-relay');\n\nconst storyFragment = graphql`\n  fragment StoryComponent_story on Story {\n    comments @connection(key: \"StoryComponent_story_comments_connection\") {\n      nodes {\n        body {\n          text\n        }\n      }\n    }\n  }\n`;\n```\n\n----------------------------------------\n\nTITLE: Implementing Relay Container with GraphQL Fragments\nDESCRIPTION: Creates a Relay compatibility container for a null-rendering Profile component. Defines two GraphQL fragments that query user name data, one for regular user and one for viewer contexts.\nSOURCE: https://github.com/facebook/relay/blob/main/packages/babel-plugin-relay/__tests__/fixtures/too-many-fragments.error.txt#2025-04-18_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst CompatProfile = () => null;\n\nmodule.exports = RelayCompatContainer.createContainer(CompatProfile, {\n  user: graphql`\n    fragment CompatProfile_user on User {\n      name\n    }\n\n    fragment CompatProfile_viewer on User {\n      name\n    }\n  `,\n});\n```\n\n----------------------------------------\n\nTITLE: Testing Refetch Container with Relay\nDESCRIPTION: This code snippet demonstrates how to test a Relay refetch container using `useLazyLoadQuery` and a mock Relay environment. It simulates a refetch operation by mocking the initial query and the subsequent refetch query, and then asserts that the component's rendered output matches the expected snapshot.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/guides/testing-relay-components.md#2025-04-18_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n```js\ntest('Refetch Container', async () => {\n  const environment = createMockEnvironment();\n  const TestRenderer = () => {\n    const data = useLazyLoadQuery(\n      graphql`\n        query TestQuery @relay_test_operation {\n          myData: node(id: \\\"test-id\\\") {\n            # Spread the pagination fragment you want to test here\n            ...MyRefetchableFragment\n          }\n        }\n      `,\n      {},\n    );\n    return <MyRefetchContainer data={data.myData} />\n  };\n\n  const renderer = render(\n    <RelayEnvironmentProvider environment={environment}>\n      <Suspense fallback=\\\"Loading...\\\">\n        <TestRenderer />\n      </Suspense>\n    </RelayEnvironmentProvider>\n  );\n\n  act(() => {\n    environment.mock.resolveMostRecentOperation(operation =>\n      MockPayloadGenerator.generate(operation),\n    );\n  });\n\n  // Assuming we have refetch button in the Container\n  const refetchButton = await renderer.findByTestId('refetch');\n\n  // This should trigger the `refetch`\n  refetchButton.props.onClick();\n\n  act(() => {\n    environment.mock.resolveMostRecentOperation(operation =>\n      MockPayloadGenerator.generate(operation, {\n        // We can customize mock resolvers, to change the output of the refetch query\n      }),\n    );\n  });\n\n  expect(renderer).toMatchSnapshot();\n});\n```\n```\n\n----------------------------------------\n\nTITLE: Defining RecordSourceSelectorProxy interface in JavaScript\nDESCRIPTION: This code snippet defines the RecordSourceSelectorProxy interface, which outlines methods for managing records within the Relay Store. It includes methods for creating, deleting, and retrieving records, as well as for managing the store state.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/api-reference/relay-runtime/store.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ninterface RecordSourceSelectorProxy {\n  create(dataID: string, typeName: string): RecordProxy;\n  delete(dataID: string): void;\n  get(dataID: string): ?RecordProxy;\n  getRoot(): RecordProxy;\n  getRootField(fieldName: string): ?RecordProxy;\n  getPluralRootField(fieldName: string): ?Array<?RecordProxy>;\n  invalidateStore(): void;\n}\n```\n\n----------------------------------------\n\nTITLE: Using @required with Inline Fragments\nDESCRIPTION: Example showing how @required works with inline fragments and type checking\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/guides/required-directive.md#2025-04-18_snippet_3\n\nLANGUAGE: graphql\nCODE:\n```\nfragment MyFrag on Actor {\n  ... on User {\n    name @required(action: THROW)\n  }\n}\n```\n\nLANGUAGE: graphql\nCODE:\n```\nfragment MyFrag on Actor {\n  __typename\n  ... on User {\n    name @required(action: THROW)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Static GraphQL Query Example\nDESCRIPTION: This code snippet illustrates that GraphQL queries in Relay apps need to be static string literals, allowing Relay to generate type definitions and optimize the query processing. `MyQuery` is a graphql tagged string literal.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/tutorial/queries-1.md#2025-04-18_snippet_4\n\nLANGUAGE: graphql\nCODE:\n```\nconst MyQuery = graphql`\n  query MyQuery {\n    viewer {\n      name\n    }\n  }\n`;\n```\n\n----------------------------------------\n\nTITLE: Defining GraphQL Interface IUser\nDESCRIPTION: This GraphQL snippet shows the declaration of an interface `IUser`, which includes a `name` field of type `String`. This interface is intended to be implemented by multiple concrete resolver types in the Relay client state.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/guides/relay-resolvers/defining-types.md#2025-04-18_snippet_3\n\nLANGUAGE: GraphQL\nCODE:\n```\n# IUser.graphql\ninterface IUser {\n  name: String\n}\n```\n\n----------------------------------------\n\nTITLE: Required Field with @catch in GraphQL Query\nDESCRIPTION: Demonstrates combining @required directive with @catch to handle required field errors gracefully instead of throwing exceptions.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/guides/catch-directive.md#2025-04-18_snippet_2\n\nLANGUAGE: graphql\nCODE:\n```\nquery MyQuery {\n  viewer @catch {\n    name @required(action: THROW)\n    age\n  }\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  viewer: {\n    ok: false,\n    errors: [{ path: [\"viewer\", \"name\"] }]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Validators for Interface Assignment in Relay\nDESCRIPTION: Explains using validators to safely assign values to interface fields when the source type is not guaranteed to implement the interface in Relay. It describes how to validate and ensure type safety before making assignments.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/guided-tour/updating-data/imperatively-modifying-linked-fields.md#2025-04-18_snippet_9\n\nLANGUAGE: js\nCODE:\n```\nimport {validate as validateActor} from 'Foo_actor.graphql';\n\ngraphql`\n  fragment Foo_actor on Actor @assignable {\n    __typename\n  }\n`;\n\nconst data = useFragment(graphql`\n  fragment Foo_query on Query {\n    node(id: \"4\") {\n      ...Foo_actor\n    }\n  }\n`, queryRef);\n\nconst environment = useRelayEnvironment();\nconst onClick = () => {\n  commitLocalUpdate(environment, store => {\n    const {updatableData} = store.readUpdatableQuery(\n      graphql`\n        query FooUpdatableQuery @updatable {\n          viewer {\n            actor {\n              ...Foo_actor\n            }\n          }\n        }\n      `,\n      {}\n    );\n\n    if (updatableData.viewer != null && data.node != null) {\n      const validActor = validateActor(data.node);\n      if (validActor !== false) {\n        updatableData.viewer.actor = validActor;\n      }\n    }\n  });\n};\n```\n\n----------------------------------------\n\nTITLE: Using useSubscribeToInvalidationState Hook to React to Data Invalidation\nDESCRIPTION: An example of how to use the useSubscribeToInvalidationState hook to subscribe to invalidation events for specific records. This allows components to immediately react when referenced data becomes stale, even without navigation events.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/guided-tour/reusing-cached-data/staleness-of-data.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nfunction ProfilePage(props) {\n  // Example of querying data for the current page for a given user\n  const data = usePreloadedQuery(\n    graphql`...`,\n    props.preloadedQuery,\n  )\n\n  // Here we subscribe to changes in invalidation state for the given user ID.\n  // Whenever the user with that ID is marked as stale, the provided callback will\n  // be executed\n  useSubscribeToInvalidationState([props.userID], () => {\n    // Here we can do things like:\n    // - re-evaluate the query by passing a new preloadedQuery to usePreloadedQuery.\n    // - imperatively refetch any data\n    // - render a loading spinner or gray out the page to indicate that refetch\n    //   is happening.\n  })\n\n  return (...);\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring Relay GraphQL Subscription\nDESCRIPTION: This JavaScript snippet uses Relay's graphql tag to declare the 'FeedbackLikeSubscription' in a JavaScript file. The subscription listens for updates on feedback likes and prepares for execution using Relay's approach.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v13.0.0/guided-tour/updating-data/graphql-subscriptions.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst {graphql} = require('react-relay');\n\nconst feedbackLikeSubscription = graphql`\n  subscription FeedbackLikeSubscription($input: FeedbackLikeSubscribeData!) {\n    feedback_like_subscribe(data: $input) {\n      feedback {\n        id\n        like_count\n      }\n    }\n  }\n`;\n```\n\n----------------------------------------\n\nTITLE: Retaining Queries to Prevent Garbage Collection in Relay\nDESCRIPTION: Demonstrates how to manually retain a query in Relay to prevent its data from being garbage collected, allowing it to be reused even after components unmount. The code shows both retention and proper disposal of the retained query.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v13.0.0/guided-tour/reusing-cached-data/presence-of-data.md#2025-04-18_snippet_0\n\nLANGUAGE: js\nCODE:\n```\n// Retain query; this will prevent the data for this query and\n// variables from being garbage collected by Relay\nconst disposable = environment.retain(queryDescriptor);\n\n// Disposing of the disposable will release the data for this query\n// and variables, meaning that it can be deleted at any moment\n// by Relay's garbage collection if it hasn't been retained elsewhere\ndisposable.dispose();\n```\n\n----------------------------------------\n\nTITLE: Executing Persisted Queries on Server with Express in JavaScript\nDESCRIPTION: This JavaScript snippet shows how to setup a server using Express to handle persisted queries. It loads the query map and matches incoming requests using persistedQueries middleware from express-graphql-persisted-queries.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/guides/persisted-queries.md#2025-04-18_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport express from 'express';\nimport {graphqlHTTP} from 'express-graphql';\nimport {persistedQueries} from 'express-graphql-persisted-queries';\nimport queryMap from './path/to/queryMap.json';\n\nconst app = express();\n\napp.use(\n  '/graphql',\n  persistedQueries({\n    queryMap,\n    queryIdKey: 'doc_id',\n  }),\n  graphqlHTTP({schema}),\n);\n```\n\n----------------------------------------\n\nTITLE: Converting Fragment Container to useFragment in React\nDESCRIPTION: Illustrates how to convert a Fragment Container to use the useFragment hook. This conversion is straightforward and maintains the same functionality.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/migration-and-compatibility/relay-hooks-and-legacy-container-apis.md#2025-04-18_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport * as React from 'React';\nimport {graphql, useFragment} from 'react-relay';\n\nexport default function UserComponent(props: Props) {\n  const data = useFragment(\n    graphql`\n      fragment UserComponent_user on User {\n        name\n        profile_picture(scale: $scale) {\n          uri\n        }\n      }\n    `,\n    props.user,\n  );\n\n  return (\n    <>\n      <h1>{data.name}</h1>\n      <div>\n        <img src={data.profile_picture?.uri} />\n      </div>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Refetching Queries with useLazyLoadQuery in React\nDESCRIPTION: Example demonstrating how to refetch queries using useLazyLoadQuery hook with different variables and fetch keys for proper cache management.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/guided-tour/refetching/refetching-queries-with-different-data.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * App.react.js\n */\nconst AppQuery = require('__generated__/AppQuery.graphql');\n\nfunction App(props: Props) {\n  const [queryArgs, setQueryArgs] = useState({\n    options: {fetchKey: 0},\n    variables: {id: '4'},\n  });\n\n  const refetch = useCallback(() => {\n    // Trigger a re-render of useLazyLoadQuery with new variables,\n    // *and* an updated fetchKey.\n    // The new fetchKey will ensure that the query is fully\n    // re-evaluated and refetched.\n    setQueryArgs(prev => ({\n      options: {\n        fetchKey: (prev?.options.fetchKey ?? 0) + 1,\n      },\n      variables: {id: 'different-id'}\n    }));\n  }, [/* ... */]);\n\n  return (\n    <React.Suspense fallback=\"Loading query...\">\n      <MainContent\n        refetch={refetch}\n        queryArgs={queryArgs}\n      />\n    </React.Suspense>\n  );\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * MainContent.react.js\n */\n// Fetches and renders the query, given the fetch options\nfunction MainContent(props) {\n  const {refetch, queryArgs} = props;\n  const data = useLazyLoadQuery(\n    graphql`\n      query AppQuery($id: ID!) {\n        user(id: $id) {\n          name\n          friends {\n            count\n          }\n        }\n      }\n    `,\n    queryArgs.variables,\n    queryArgs.options,\n  );\n\n  return (\n    <>\n      <h1>{data.user?.name}</h1>\n      <div>Friends count: {data.user.friends?.count}</div>\n      <Button\n        onClick={() => refetch()}>\n        Fetch latest count\n      </Button>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Running Relay Compiler in watch mode with yarn\nDESCRIPTION: This snippet shows how to run the Relay Compiler in watch mode using `yarn run relay --watch`. This command monitors file changes and automatically re-generates compiled artifacts whenever your source code is modified. Requires watchman to be installed.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/getting-started/installation-and-setup.md#2025-04-18_snippet_9\n\nLANGUAGE: sh\nCODE:\n```\n\"yarn run relay --watch\"\n```\n\n----------------------------------------\n\nTITLE: Using Resolver Field with Fragment Arguments\nDESCRIPTION: Demonstrates how to use a Relay Resolver field that accepts fragment arguments in a query.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/guides/relay-resolvers.md#2025-04-18_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nconst data = useLazyLoadQuery(graphql`\n    query myQuery($id: ID, $my_arg: Float!) {\n        node(id: $id) {\n           ... on MyType {\n                my_resolver_field(my_arg: $my_arg)\n           }\n        }\n   }\n`, { id: \"some id\", my_arg: 2.5 });\n```\n\n----------------------------------------\n\nTITLE: Defining a Derived Resolver with Relay in TypeScript\nDESCRIPTION: This snippet demonstrates how to define a derived resolver in Relay for a user's full name. It involves reading a root fragment using Relay's readFragment function. Dependencies include relay-runtime, and the context requires a UserFullNameFragment GraphQL fragment. The output is a string concatenation of firstName and lastName fields.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/guides/relay-resolvers/derived-fields.md#2025-04-18_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport {readFragment} from 'relay-runtime';\n\n/**\n * @RelayResolver User.fullName: String\n * @rootFragment UserFullNameFragment\n */\nexport function fullName(key: UserFullNameFragment$key): string {\n  const user = readFragment(graphql`\n    fragment UserFullNameFragment on User {\n        firstName\n        lastName\n    }\n  `, key);\n  return `${user.firstName} ${user.lastName}`;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Strong Type with Relay Resolver\nDESCRIPTION: Example of defining a strong type using @RelayResolver tag for a User type that has a unique ID. The function accepts a DataID parameter and returns a UserModel instance.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/guides/relay-resolvers/defining-types.md#2025-04-18_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n/**\n * @RelayResolver User\n */\nexport function User(id: DataID): UserModel {\n  return UserService.getById(id);\n}\n```\n\n----------------------------------------\n\nTITLE: App Component with Lazy Load Query and Retry\nDESCRIPTION: This example demonstrates how the App component can be structured to utilize the ErrorBoundaryWithRetry for lazy-loaded queries, enabling error management and retries.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/guided-tour/rendering/error-states.md#2025-04-18_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * App.react.js\n */\n\nconst ErrorBoundaryWithRetry = require('ErrorBoundaryWithRetry');\nconst React = require('React');\n\nconst MainContent = require('./MainContent.react');\n\n// NOTE: This is NOT actual production code;\n// it is only used to illustrate example\nfunction App() {\n  return (\n    <ErrorBoundaryWithRetry\n      fallback={({error, retry}) =>\n        <>\n          <ErrorUI error={error} />\n          {/* Render a button to retry; this will attempt to re-render the\n            content inside the boundary, i.e. the query component */}\n          <Button onPress={retry}>Retry</Button>\n        </>\n      }>\n      {({fetchKey}) => {\n        // If we have retried, use the new `retryQueryRef` provided\n        // by the Error Boundary\n        return <MainContent fetchKey={fetchKey} />;\n      }}\n    </ErrorBoundaryWithRetry>\n  );\n}\n\n/**\n * MainContent.react.js\n */\nfunction MainContent(props) {\n  const data = useLazyLoadQuery(\n    graphql`...`,\n    variables,\n    {fetchKey: props.fetchKey}\n  );\n\n  return (/* ... */);\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting Edge Manually - Relay Runtime\nDESCRIPTION: Illustrates manual deletion of an edge from a connection using the deleteNode method provided by ConnectionHandler. Requires relay-runtime and involves specifying the node ID for the edge to be removed. The operation mutates the connection directly in the Relay store.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/guided-tour/updating-data/updating-connections.md#2025-04-18_snippet_12\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst {ConnectionHandler} = require('RelayModern');\n\nfunction updater(store: RecordSourceSelectorProxy) {\n  const storyRecord = store.get(storyID);\n  const connectionRecord = ConnectionHandler.getConnection(\n    storyRecord,\n    'StoryComponent_story_comments_connection',\n  );\n\n  // Remove edge from the connection, given the ID of the node\n  ConnectionHandler.deleteNode(\n    connectionRecord,\n    commentIDToDelete,\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Artist Data with Variables in TypeScript\nDESCRIPTION: Shows how to use the emitted types for operation variables and data in a TypeScript-typed React component using useLazyLoadQuery.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/guides/type-emission.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * export type ExampleQuery$variables = {\n *   readonly artistID: string\n * }\n * export type ExampleQuery$data = {\n *   readonly artist?: {\n *     readonly name?: string\n *   }\n * }\n * export type ExampleQuery = {\n *   readonly variables: ExampleQuery$variables\n *   readonly response: ExampleQuery$data\n * }\n */\nconst data = useLazyLoadQuery(\n  graphql`\n    query ExampleQuery($artistID: ID!) {\n      artist(id: $artistID) {\n        name\n      }\n    }\n  `,\n  // variables are expected to be of type ExampleQuery$variables\n  {artistID: 'banksy'},\n);\n```\n\n----------------------------------------\n\nTITLE: Accessing query variables in Mock Resolver Context\nDESCRIPTION: This JavaScript code snippet illustrates how to access query variables within a Mock Resolver Context during Relay testing. The `CurrencyAmount` function receives a `context` object containing the query arguments, which can be accessed using `context.args`.  This enables the generation of different mock data based on the provided query variables.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/guides/testing-relay-with-preloaded-queries.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nCurrencyAmount(context) {\n  console.log(JSON.stringify(context, null, 2)); // <==\n  return { formatted_amount: mockResponse }\n}\n// <== logs { ...snip..., \"name\": \"subtotal_price_for_offers\", args: { offer_ids: [...] } }\n```\n\n----------------------------------------\n\nTITLE: Writing a GraphQL Fragment in Relay\nDESCRIPTION: Shows how to define a GraphQL fragment using the graphql template tag. This fragment will be compiled into a generated file in the __generated__ directory with runtime artifacts and Flow types.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v13.0.0/guides/compiler.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ngraphql`\n  fragment MyComponent on Type {\n    field\n  }\n`\n```\n\n----------------------------------------\n\nTITLE: Implementing a Local Persisting Server\nDESCRIPTION: Example implementation of relayLocalPersisting.js that creates a simple HTTP server to save query text to a queryMap.json file. It generates MD5 hashes for queries and maintains a mapping between IDs and query text.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/guides/persisted-queries.md#2025-04-18_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst http = require('http');\nconst crypto = require('crypto');\nconst fs = require('fs');\n\nfunction md5(input) {\n  return crypto.createHash('md5').update(input).digest('hex');\n}\n\nclass QueryMap {\n  constructor(fileMapName) {\n    this._fileMapName = fileMapName;\n    this._queryMap = new Map(JSON.parse(fs.readFileSync(this._fileMapName)));\n  }\n\n  _flush() {\n    const data = JSON.stringify(Array.from(this._queryMap.entries()));\n    fs.writeFileSync(this._fileMapName, data);\n  }\n\n  saveQuery(text) {\n    const id = md5(text);\n    this._queryMap.set(id, text);\n    this._flush();\n    return id;\n  }\n}\n\nconst queryMap = new QueryMap('./queryMap.json');\n\nasync function requestListener(req, res) {\n  if (req.method === 'POST') {\n    const buffers = [];\n    for await (const chunk of req) {\n      buffers.push(chunk);\n    }\n    const data = Buffer.concat(buffers).toString();\n    res.writeHead(200, {\n      'Content-Type': 'application/json'\n    });\n    try {\n      if (req.headers['content-type'] !== 'application/x-www-form-urlencoded') {\n        throw new Error(\n          'Only \"application/x-www-form-urlencoded\" requests are supported.'\n        );\n      }\n      const text = new URLSearchParams(data).get('text');\n      if (text == null) {\n        throw new Error('Expected to have `text` parameter in the POST.');\n      }\n      const id = queryMap.saveQuery(text);\n      res.end(JSON.stringify({\"id\": id}));\n    } catch (e) {\n      console.error(e);\n      res.writeHead(400);\n      res.end(`Unable to save query: ${e}.`);\n    }\n  } else {\n    res.writeHead(400);\n    res.end(\"Request is not supported.\")\n  }\n}\n\nconst PORT = 2999;\nconst server = http.createServer(requestListener);\nserver.listen(PORT);\n\nconsole.log(`Relay persisting server listening on ${PORT} port.`);\n```\n\n----------------------------------------\n\nTITLE: Defining Connection with Filters in Relay GraphQL Fragment\nDESCRIPTION: Example showing how to define a GraphQL fragment with a connection that takes filter arguments. The connection accepts orderBy, filterMode and language parameters.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/guided-tour/list-data/updating-connections.md#2025-04-18_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nconst {graphql} = require('RelayModern');\n\nconst storyFragment = graphql`\n  fragment StoryComponent_story on Story {\n    comments(\n      order_by: $orderBy,\n      filter_mode: $filterMode,\n      language: $language,\n    ) @connection(key: \"StoryComponent_story_comments_connection\") {\n      edges {\n        nodes {\n          body {\n            text\n          }\n        }\n      }\n    }\n  }\n`;\n```\n\n----------------------------------------\n\nTITLE: Story Component with Fragment Hook\nDESCRIPTION: Updated Story component using useFragment hook to access fragment data\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/tutorial/fragments-1.md#2025-04-18_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useFragment } from 'react-relay';\n\nexport default function Story({story}: Props) {\n  const data = useFragment(\n    StoryFragment,\n    story,\n  );\n  return (\n    <Card>\n      <Heading>{data.title}</Heading>\n      <PosterByline poster={data.poster} />\n      <Timestamp time={data.createdAt} />\n      <Image image={data.image} />\n      <StorySummary summary={data.summary} />\n    </Card>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a GraphQL Type\nDESCRIPTION: This GraphQL code defines a new type called `Note` with fields `id`, `title`, and `body`.  This schema describes what local data can be queried on the client and can even be used to extend an existing server schema.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/guides/client-schema-extensions.md#2025-04-18_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\n\"\"\"\ntype Note {\n  id: ID!\n  title: String\n  body: String\n}\n\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Assigning from an Abstract Field to a Concrete Field\nDESCRIPTION: Example of assigning a Node type to a User field by refining the type with an inline fragment and checking the __typename. This demonstrates type refinement for assignable fields.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/guided-tour/updating-data/imperatively-modifying-linked-fields.md#2025-04-18_snippet_8\n\nLANGUAGE: js\nCODE:\n```\nconst data = useFragment(graphql`\n  fragment AssignBestFriendButton_someType on Query {\n    node(id: \"4\") {\n      ... on User {\n        __typename\n        ...AssignableBestFriendButton_assignable_user\n      }\n    }\n  }\n`, queryRef);\n\nconst environment = useRelayEnvironment();\nconst onClick = () => {\n  const updatableData = commitLocalUpdate(\n    environment,\n    (store: RecordSourceSelectorProxy) => {\n      const {updatableData} = store.readUpdatableQuery(\n          graphql`\n            query AssignBestFriendButtonUpdatableQuery\n            @updatable {\n              viewer {\n                best_friend {\n                  ...AssignableBestFriendButton_assignable_user\n                }\n              }\n            }\n          `,\n          {}\n        );\n\n      if (data.node != null && data.node.__typename === \"User\" && updatableData.viewer != null) {\n        updatableData.viewer.best_friend = data.node;\n      }\n    }\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: JSON Response with PageInfo Pagination Metadata\nDESCRIPTION: The JSON response including PageInfo data that indicates whether more results are available, demonstrating how to efficiently implement pagination UIs.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/guides/graphql-server-specification.md#2025-04-18_snippet_18\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"rebels\": {\n    \"name\": \"Alliance to Restore the Republic\",\n    \"originalShips\": {\n      \"edges\": [\n        {\n          \"node\": {\n            \"name\": \"X-Wing\"\n          }\n        },\n        {\n          \"node\": {\n            \"name\": \"Y-Wing\"\n          }\n        }\n      ],\n      \"pageInfo\": {\n        \"hasNextPage\": true\n      }\n    },\n    \"moreShips\": {\n      \"edges\": [\n        {\n          \"node\": {\n            \"name\": \"A-Wing\"\n          }\n        },\n        {\n          \"node\": {\n            \"name\": \"Millenium Falcon\"\n          }\n        },\n        {\n          \"node\": {\n            \"name\": \"Home One\"\n          }\n        }\n      ],\n      \"pageInfo\": {\n        \"hasNextPage\": false\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Extending Existing Types with Client Schema Extensions in GraphQL\nDESCRIPTION: Example of extending a server-defined Comment type with a client-only boolean field is_new_comment. This field can be used to track client-specific state for comments.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/guided-tour/updating-data/client-only-data.md#2025-04-18_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nextend type Comment {\n  is_new_comment: Boolean\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Local State with useLazyLoadQuery\nDESCRIPTION: This React component uses `useLazyLoadQuery` to fetch data, including server data and local data defined through schema extensions.  It queries the `viewer` field to get the user's `id`, `name`, and `notes` which are defined locally.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/guides/client-schema-extensions.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n\"// Example.js\nimport * as React from 'react';\nimport { useLazyLoadQuery, graphql } from 'react-relay';\n\nconst Example = (props) => {\n  const data = useLazyLoadQuery(graphql`\n    query ExampleQuery {\n      viewer {\n        id\n        name\n        notes {\n          id\n          title\n          body\n        }\n      }\n    }\n  `, {});\n  // ...\n}\"\n```\n\n----------------------------------------\n\nTITLE: Spreading StoryFragment in NewsfeedQuery\nDESCRIPTION: This code snippet modifies the NewsfeedQuery to spread the StoryFragment. It replaces the direct selections inside `topStory` with `...StoryFragment`. This allows the Newsfeed component to fetch the data required by the Story component without explicitly defining it.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/tutorial/fragments-1.md#2025-04-18_snippet_3\n\nLANGUAGE: graphql\nCODE:\n```\nconst NewsfeedQuery = graphql`\n  query NewsfeedQuery {\n    topStory {\n      // change-line\n      ...StoryFragment\n    }\n  }\n`;\n```\n\n----------------------------------------\n\nTITLE: Example Mutation Response in JSON\nDESCRIPTION: An example of a successful response for the FeedbackLikeMutation, showing the updated feedback object with its id, viewer_does_like status set to true, and updated like_count of 1.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v13.0.0/guided-tour/updating-data/graphql-mutations.md#2025-04-18_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"feedback_like\": {\n    \"feedback\": {\n      \"id\": \"feedback-id\",\n      \"viewer_does_like\": true,\n      \"like_count\": 1,\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Filtered Connections in Relay Store\nDESCRIPTION: Demonstrates how to access connection records from the Relay store using different filter combinations. Shows how to use ConnectionHandler.getConnection with filter values.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/guided-tour/list-data/updating-connections.md#2025-04-18_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nconst {ConnectionHandler} = require('RelayModern');\n\nfunction updater(store: RecordSourceSelectorProxy) {\n  const storyRecord = store.get(storyID);\n\n  // Get the connection instance for the connection with comments sorted\n  // by the date they were added\n  const connectionRecordSortedByDate = ConnectionHandler.getConnection(\n    storyRecord,\n    'StoryComponent_story_comments_connection',\n    {order_by: '*DATE_ADDED*', filter_mode: null, language: null}\n  );\n\n  // Get the connection instance for the connection that only contains\n  // comments made by friends\n  const connectionRecordFriendsOnly = ConnectionHandler.getConnection(\n    storyRecord,\n    'StoryComponent_story_comments_connection',\n    {order_by: null, filter_mode: '*FRIENDS_ONLY*', langugage: null}\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Invalidating the Entire Relay Store\nDESCRIPTION: Example of an updater function that invalidates the entire Relay store, causing all cached data to be considered stale and requiring all queries to be refetched the next time they're evaluated.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v13.0.0/guided-tour/reusing-cached-data/staleness-of-data.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nfunction updater(store) {\n  store.invalidateStore();\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Data with useLazyLoadQuery and Rendering Components in Relay\nDESCRIPTION: This snippet demonstrates how to fetch data using useLazyLoadQuery and pass fragment references to child components. The Story component fetches the query data and passes the author fragment reference to AuthorDetails.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v13.0.0/principles-and-architecture/thinking-in-relay.md#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// Story.react.js\nfunction Story(props) {\n  const data = useLazyLoadQuery(storyQuery, props.storyId);\n\n  return (<>\n    <Heading>{data?.story.title}</Heading>\n    {data?.story?.author && <AuthorDetails author={data.story.author} />}\n  </>);\n}\n```\n\n----------------------------------------\n\nTITLE: Refetch Container Example in Relay Container API\nDESCRIPTION: Example of using a Refetch Container from the legacy container API to define a component that can refetch its data with different variables or force reload data.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v13.0.0/migration-and-compatibility/relay-hooks-and-legacy-container-apis.md#2025-04-18_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\nimport * as React from 'React';\nimport {graphql, createRefetchContainer} from 'react-relay';\n\nfunction CommentBody(props: Props) {\n  const relay = props.relay;\n\n  return (\n    <>\n      <p>{data.body?.text}</p>\n      <Button\n        onClick={() => relay.refetch(\n          {lang: 'SPANISH'}, // fragmentVariables\n          null,  // renderVariables\n          error => { ... },\n          {force: true}\n        )}>\n        Translate Comment\n      </Button>\n    </>\n  );\n}\n\nexport default createRefetchContainer(\n  CommentBody,\n  {\n    user: graphql`\n      fragment CommentBody_comment on Comment {\n        body(lang: $lang) {\n          text\n        }\n      }\n    `,\n  },\n\n  // This option is no longer required, the refetch query\n  // will automatically be generated by Relay using the @refetchable\n  // directive.\n  graphql`\n    query AppQuery($id: ID!, lang: Lang) {\n      node(id: $id) {\n        ...CommentBody_comment\n      }\n    }\n  `,\n);\n```\n\n----------------------------------------\n\nTITLE: Fragment Composition Type Example in Flow/TypeScript\nDESCRIPTION: Demonstrates type safety in fragment composition, showing how parent components properly type and pass fragment references to child components.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/guides/type-emission.md#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst data = useLazyLoadQuery(\n  graphql`\n    query ExampleQuery($artistID: ID!) {\n      artist(id: $artistID) {\n        name\n        ...ExampleFragmentComponent_artist\n      }\n    }\n  `,\n  {artistID: 'banksy'},\n);\n\nreturn <ExampleFragmentComponent artist={data.artist} />;\n```\n\n----------------------------------------\n\nTITLE: Running Relay Compiler\nDESCRIPTION: Commands to run the Relay Compiler which analyzes GraphQL literals in JavaScript code and produces runtime artifacts. Shows both one-time compilation and watch mode options.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/guided-tour/workflow.md#2025-04-18_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nyarn run relay\n```\n\nLANGUAGE: sh\nCODE:\n```\nyarn run relay --watch\n```\n\n----------------------------------------\n\nTITLE: Defining a Flow-typed Live Resolver in Relay\nDESCRIPTION: An alternative implementation of a live resolver that uses Flow return type annotations instead of the @live docblock tag. The LiveState return type indicates this is a live resolver.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/guides/relay-resolvers/live-fields.md#2025-04-18_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport type { LiveState } from 'relay-runtime';\n\n/**\n * @RelayResolver\n */\nexport function counter(): LiveState<number> {\n  return {\n    read: () => store.getState().counter,\n    subscribe: (callback) => {\n      return store.subscribe(callback);\n    },\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Extending GraphQL Type\nDESCRIPTION: This GraphQL code snippet demonstrates how to extend an existing type in the schema by adding a new field, `is_new_comment`, to the `Comment` type. This allows you to store and manage client-specific data directly within the existing schema.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/guided-tour/updating-data/client-only-data.md#2025-04-18_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\n\"extend type Comment {\\n  is_new_comment: Boolean\\n}\"\n```\n\n----------------------------------------\n\nTITLE: Defining StoryFragment with GraphQL\nDESCRIPTION: This GraphQL fragment defines the data requirements for the Story component. It includes the title, summary, createdAt, poster details (name and profile picture URL), and thumbnail URL. It specifies that this fragment operates on the `Story` type.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/tutorial/fragments-1.md#2025-04-18_snippet_2\n\nLANGUAGE: graphql\nCODE:\n```\nimport { graphql } from 'relay-runtime';\n\nconst StoryFragment = graphql`\n  fragment StoryFragment on Story {\n    title\n    summary\n    createdAt\n    poster {\n      name\n      profilePicture {\n        url\n      }\n    }\n    thumbnail {\n      url\n    }\n  }\n`;\n```\n\n----------------------------------------\n\nTITLE: Implementing Mutation Functionality in the Like Button Component\nDESCRIPTION: This updated component implementation uses Relay's useMutation hook to trigger the like mutation when the button is clicked. It passes the story ID and toggled like status as variables to the mutation.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/tutorial/mutations-updates.md#2025-04-18_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\n// change-line\nimport {useMutation, useFragment} from 'react-relay';\n\nfunction StoryLikeButton({story}) {\n  const data = useFragment(StoryLikeButtonFragment, story);\n  // change-line\n  const [commitMutation, isMutationInFlight] = useMutation(StoryLikeButtonLikeMutation);\n  function onLikeButtonClicked() {\n    // change\n    commitMutation({\n      variables: {\n        id: data.id,\n        doesLike: !data.doesViewerLike,\n      },\n    })\n    // end-change\n  }\n  return (\n    <>\n      <LikeCount count={data.likeCount} />\n      <LikeButton value={data.doesViewerLike} onChange={onLikeButtonClicked} />\n    </>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Integrating useQueryLoader in JavaScript for Event Handling\nDESCRIPTION: Shows how to integrate useQueryLoader for loading data on user interaction such as button clicks. Typically, this setup would occur within UI infrastructure like routing to manage query lifecycle.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/migration-and-compatibility/relay-hooks-and-legacy-container-apis.md#2025-04-18_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport * as React from 'React';\nimport {useQueryLoader} from 'react-relay';\n\n// Import the query defined in the UserPopover component\nimport UserPopoverQuery from '__generated__/UserPopoverQuery.graphql';\n\nexport default function UserPopoverButton(props) {\n  const [queryRef, loadQuery] = useQueryLoader(UserPopoverQuery)\n\n  const handleClick = useCallback(() => {\n    loadQuery({id: props.userID})\n  }, [loadQuery, props.userID]);\n\n  return (\n    <>\n      <Button onClick={handleClick} />\n      {queryRef != null ?\n        <Popover>\n          <ErrorBoundary renderError={Error}>\n            <Suspense fallback={<Loading />}>\n              <UserPopover queryRef={queryRef} />\n            </Suspense>\n          </ErrorBoundary>\n        </Popover>\n        : null\n      }\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Consuming a Relay Resolver in a React Component\nDESCRIPTION: This example shows how to use a Relay Resolver in a React component. It demonstrates the use of useClientQuery hook to fetch client-only data, and renders the result in a paragraph element.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/guides/relay-resolvers/introduction.md#2025-04-18_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport {useLazyLoadQuery, graphql} from 'react-relay';\nimport {useClientQuery, graphql} from 'react-relay';\n\nfunction Greeting() {\n  const data = useClientQuery(graphql`\n    query GreetingQuery {\n      greeting\n    }`, {});\n  return <p>{data.greeting}</p>;\n}\n```\n\n----------------------------------------\n\nTITLE: Refreshing Queries with fetchQuery to Avoid Suspense\nDESCRIPTION: This snippet demonstrates how to refresh a query using fetchQuery to avoid Suspense. It manually tracks the loading state and updates the Relay store before re-rendering the component.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/guided-tour/refetching/refreshing-queries.md#2025-04-18_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * App.react.js\n */\nimport type {AppQuery as AppQueryType} from 'AppQuery.graphql';\n\nconst AppQuery = require('__generated__/AppQuery.graphql');\n\nfunction App(props: Props) {\n  const variables = {id: '4'}\n  const environment = useRelayEnvironment();\n  const [refreshedQueryOptions, setRefreshedQueryOptions] = useState(null);\n  const [isRefreshing, setIsRefreshing] = useState(false)\n\n  const refresh = useCallback(() => {\n    if (isRefreshing) { return; }\n    setIsRefreshing(true);\n\n    // fetchQuery will fetch the query and write\n    // the data to the Relay store. This will ensure\n    // that when we re-render, the data is already\n    // cached and we don't suspend\n    fetchQuery(environment, AppQuery, variables)\n      .subscribe({\n        complete: () => {\n          setIsRefreshing(false);\n\n          // *After* the query has been fetched, we update\n          // our state to re-render with the new fetchKey\n          // and fetchPolicy.\n          // At this point the data for the query should\n          // be cached, so we use the 'store-only'\n          // fetchPolicy to avoid suspending.\n          setRefreshedQueryOptions(prev => ({\n            fetchKey: (prev?.fetchKey ?? 0) + 1,\n            fetchPolicy: 'store-only',\n          }));\n        }\n        error: () => {\n          setIsRefreshing(false);\n        }\n      });\n  }, [/* ... */]);\n\n  return (\n    <React.Suspense fallback=\"Loading query...\">\n      <MainContent\n        isRefreshing={isRefreshing}\n        refresh={refresh}\n        queryOptions={refreshedQueryOptions ?? {}}\n        variables={variables}\n      />\n    </React.Suspense>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Child Fragment Component Implementation\nDESCRIPTION: A child React component that declares its own fragment. This component will be composed with a parent component that includes this fragment.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v13.0.0/guided-tour/rendering/fragments.md#2025-04-18_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * UsernameSection.react.js\n *\n * Child Fragment Component\n */\n\nimport type {UsernameSection_user$key} from 'UsernameSection_user.graphql';\n\nconst React = require('React');\nconst {graphql, useFragment} = require('react-relay');\n\ntype Props = {\n  user: UsernameSection_user$key,\n};\n\nfunction UsernameSection(props: Props) {\n  const data = useFragment(\n    graphql`\n      fragment UsernameSection_user on User {\n        username\n      }\n    `,\n    props.user,\n  );\n\n  return <div>{data.username ?? 'Unknown'}</div>;\n}\n\nmodule.exports = UsernameSection;\n```\n\n----------------------------------------\n\nTITLE: Adding Type Annotations to Relay Query\nDESCRIPTION: Shows how to properly annotate a useLazyLoadQuery call with generated TypeScript types to ensure type safety.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/tutorial/queries-1.md#2025-04-18_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport type {NewsfeedQuery as NewsfeedQueryType} from './__generated__/NewsfeedQuery.graphql';\n\nfunction Newsfeed({}) {\n  const data = useLazyLoadQuery\n  <NewsfeedQueryType>\n  (NewsfeedQuery, {});\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: GraphQL Query with Concrete Type Fragment Spread\nDESCRIPTION: Illustrates spreading a fragment defined on a concrete type (`User`) onto an interface. Shows how to retrieve a field (`name`) when querying a node that could be of type `User`.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/glossary/glossary.md#2025-04-18_snippet_10\n\nLANGUAGE: graphql\nCODE:\n```\nquery MyQuery { node(id: 4) { ... on User { name } } }\n```\n\n----------------------------------------\n\nTITLE: Defining GraphQL Story Fragment in TypeScript\nDESCRIPTION: This code snippet defines a GraphQL fragment for the Story component in TypeScript. It leverages Relay to create a fragment that accesses the title, summary, posting time, poster information, and thumbnail. The thumbnail uses the ImageFragment to integrate image data efficiently. No additional dependencies are required other than Relay.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/tutorial/fragments-1.md#2025-04-18_snippet_6\n\nLANGUAGE: graphql\nCODE:\n```\nconst StoryFragment = graphql`\n  fragment StoryFragment on Story {\n    title\n    summary\n    postedAt\n    poster {\n      ...PosterBylineFragment\n    }\n    thumbnail {\n      // change-line\n      ...ImageFragment\n    }\n  }\n`;\n```\n\n----------------------------------------\n\nTITLE: Accessing Connection Using ConnectionHandler.getConnectionID\nDESCRIPTION: Shows how to access a connection record using the ConnectionHandler.getConnectionID API when the parent record ID is available. This method is useful in updater functions.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/guided-tour/list-data/updating-connections.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst {ConnectionHandler} = require('relay-runtime');\n\nfunction updater(store: RecordSourceSelectorProxy) {\n  // Get the connection ID\n  const connectionID = ConnectionHandler.getConnectionID(\n    storyID, // passed as input to the mutation/subscription\n    'StoryComponent_story_comments_connection',\n  );\n\n  // Get the connection record\n  const connectionRecord = store.get(connectionID);\n\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Loading State with Suspense\nDESCRIPTION: This snippet illustrates how to use the Suspense component to render a LoadingGlimmer fallback while the MainContent component is being loaded. It showcases a basic setup where the Suspense component wraps the MainContent component and displays the fallback until MainContent is ready.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/guided-tour/rendering/loading-states.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * App.react.js\n */\n\nconst React = require('React');\nconst {Suspense} = require('React');\n\nfunction App() {\n  return (\n    // LoadingGlimmer is rendered via the Suspense fallback\n    <Suspense fallback={<LoadingGlimmer />}>\n      <MainContent /> {/* MainContent may suspend */}\n    </Suspense>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Modifying GraphQL Query to Add New Field in Relay\nDESCRIPTION: Adding a new field (createdAt) to the NewsfeedQuery GraphQL query to fetch the date a story was posted. This demonstrates how to fetch additional data by modifying the query.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/tutorial/fragments-1.md#2025-04-18_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nconst NewsfeedQuery = graphql`\n  query NewsfeedQuery {\n    topStory {\n      title\n      summary\n      // change-line\n      createdAt // Add this line\n      poster {\n        name\n        profilePicture {\n          url\n        }\n      }\n      thumbnail {\n        url\n      }\n    }\n  }\n`;\n```\n\n----------------------------------------\n\nTITLE: Basic Optimistic Response Example in Relay\nDESCRIPTION: Simple example showing how to structure an optimistic response for a like button mutation\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/guided-tour/updating-data/graphql-mutations.md#2025-04-18_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  feedback_like: {\n    feedback: {\n      // Even though the id field is not explicitly selected, the\n      // compiler selected it for us\n      id: feedbackId,\n      viewer_does_like: true,\n    },\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Linked Records with Arguments\nDESCRIPTION: Demonstrates how to retrieve a set of linked records with arguments associated with the current record using the `getLinkedRecords` method of the `RecordProxy`.  The method takes the `name` of the linked records as a string, and an optional object of `arguments`. Returns an array of `RecordProxy` objects.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v13.0.0/api-reference/relay-runtime/store.md#2025-04-18_snippet_25\n\nLANGUAGE: javascript\nCODE:\n```\nconst rootField = store.getRootField('rootField');\nconst nodes = rootField.getLinkedRecords('nodes', {count: 10});\n```\n\n----------------------------------------\n\nTITLE: Using loadQuery with React Relay\nDESCRIPTION: Example demonstrating how to use loadQuery to fetch data for a GraphQL query. It shows creating a query reference that can be passed to usePreloadedQuery. Note that this example is missing proper cleanup by not calling dispose() on the query reference.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/api-reference/hooks/load-query.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst MyEnvironment = require('MyEnvironment');\nconst {loadQuery} = require('react-relay');\n\nconst query = graphql`\n  query AppQuery($id: ID!) {\n    user(id: $id) {\n      name\n    }\n  }\n`;\n\n// Note: you should generally not call loadQuery at the top level.\n// Instead, it should be called in response to an event (such a route navigation,\n// click, etc.).\nconst queryReference = loadQuery(\n  MyEnvironment,\n  query,\n  {id: '4'},\n  {fetchPolicy: 'store-or-network'},\n);\n\n// later: pass queryReference to usePreloadedQuery()\n// Note that query reference should have .dispose() called on them,\n// which is missing in this example.\n```\n\n----------------------------------------\n\nTITLE: ConnectionHandler Interface Definition in JavaScript\nDESCRIPTION: Defines the ConnectionHandler interface, which provides methods for manipulating connections in the Relay store.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/api-reference/relay-runtime/store.md#2025-04-18_snippet_28\n\nLANGUAGE: javascript\nCODE:\n```\ninterface ConnectionHandler {\n  getConnection(\n    record: RecordProxy,\n    key: string,\n    filters?: ?Object,\n  ): ?RecordProxy,\n  createEdge(\n    store: RecordSourceProxy,\n    connection: RecordProxy,\n    node: RecordProxy,\n    edgeType: string,\n  ): RecordProxy,\n  insertEdgeBefore(\n    connection: RecordProxy,\n    newEdge: RecordProxy,\n    cursor?: ?string,\n  ): void,\n  insertEdgeAfter(\n    connection: RecordProxy,\n    newEdge: RecordProxy,\n    cursor?: ?string,\n  ): void,\n  deleteNode(connection: RecordProxy, nodeID: string): void\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Fragment Arguments\nDESCRIPTION: Adding argument definitions to the ContactsList fragment to support search functionality.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/tutorial/refetchable-fragments.md#2025-04-18_snippet_2\n\nLANGUAGE: graphql\nCODE:\n```\nconst ContactsListFragment = graphql`\n  fragment ContactsListFragment on Viewer\n    @argumentDefinitions(\n      search: {type: \"String\", defaultValue: null}\n    )\n  {\n    contacts {\n      id\n      ...ContactRowFragment\n    }\n  }\n`;\n```\n\n----------------------------------------\n\nTITLE: Declaring a Connection with Filters in Relay GraphQL\nDESCRIPTION: This snippet demonstrates how to declare a connection that takes arguments as filters in a Relay GraphQL fragment. The comments field uses variables for order_by, filter_mode, and language filters.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v13.0.0/guided-tour/list-data/updating-connections.md#2025-04-18_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nconst {graphql} = require('RelayModern');\n\nconst storyFragment = graphql`\n  fragment StoryComponent_story on Story {\n    comments(\n      order_by: $orderBy,\n      filter_mode: $filterMode,\n      language: $language,\n    ) @connection(key: \"StoryComponent_story_comments_connection\") {\n      edges {\n        nodes {\n          body {\n            text\n          }\n        }\n      }\n    }\n  }\n`;\n```\n\n----------------------------------------\n\nTITLE: Accessing Connection Records in an Updater Function in Relay\nDESCRIPTION: This code demonstrates how to access a connection record in the Relay store within an updater function using the connection ID obtained previously.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/guided-tour/list-data/updating-connections.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nfunction updater(store: RecordSourceSelectorProxy) {\n  // connectionID is passed as input to the mutation/subscription\n  const connection = store.get(connectionID);\n\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Query Fetch in Event Handler for PosterByline in JavaScript\nDESCRIPTION: This code snippet demonstrates how to implement the onBeginHover event handler in the PosterByline component to fetch the hovercard query when hovering begins.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/tutorial/queries-2.md#2025-04-18_snippet_10\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport default function PosterByline({ poster }: Props): React.ReactElement {\n  ...\n  const [\n    hovercardQueryRef,\n    loadHovercardQuery,\n  ] = useQueryLoader<HovercardQueryType>(PosterDetailsHovercardContentsQuery);\n  // change\n  function onBeginHover() {\n    loadHovercardQuery({posterID: data.id});\n  }\n  // end-change\n  return (\n    <div className=\"byline\">\n      ...\n      <Hovercard\n        // change-line\n        onBeginHover={onBeginHover}\n        targetRef={hoverRef}>\n        <PosterDetailsHovercardContents queryRef={hovercardQueryRef} />\n      </Hovercard>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Paginating a Connection While Preserving Filters\nDESCRIPTION: JavaScript component showing how the original filter values are preserved during pagination when using loadNext.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/guided-tour/list-data/refetching-connections.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ntype Props = {\n  userRef: FriendsListComponent_user$key,\n};\n\nfunction FriendsListComponent(props: Props) {\n  const userRef = props.userRef;\n\n  const {data, loadNext} = usePaginationFragment(\n    graphql`\n      fragment FriendsListComponent_user on User {\n        name\n        friends(order_by: $orderBy, search_term: $searchTerm)\n          @connection(key: \"FriendsListComponent_user_friends_connection\") {\n          edges {\n            node {\n              name\n              age\n            }\n          }\n        }\n      }\n    `,\n    userRef,\n  );\n\n  return (\n    <>\n      <h1>Friends of {data.name}:</h1>\n      <List items={data.friends?.nodes}>{...}</List>\n\n      {/*\n       Loading the next items will use the original order_by and search_term\n       values used for the initial query\n      */ }\n      <Button onClick={() => loadNext(10)}>Load more friends</Button>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using Suspense for Partial Rendering in Relay\nDESCRIPTION: Shows how to wrap fragment components in React Suspense to enable partial rendering. This approach allows parts of the UI with available data to render while other parts wait for data to load.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/guided-tour/reusing-cached-data/rendering-partially-cached-data.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * HomeTab.react.js\n *\n * Query Component\n */\n\nconst React = require('React');\nconst {Suspense} = require('React');\nconst {graphql, usePreloadedQuery} = require('react-relay');\n\nconst UsernameComponent = require('./UsernameComponent.react');\n\n\nfunction HomeTab() {\n  const data = usePreloadedQuery(\n    graphql`\n      query AppQuery($id: ID!) {\n        user(id: $id) {\n          name\n          ...UsernameComponent_user\n        }\n      }\n    `,\n    props.queryRef,\n  );\n\n  return (\n    <>\n      <h1>{data.user?.name}</h1>\n\n      {/*\n        Wrap the UserComponent in Suspense to allow other parts of the\n        App to be rendered even if the username is missing.\n      */}\n      <Suspense fallback={<LoadingSpinner label=\"Fetching username\" />}>\n        <UsernameComponent user={data.user} />\n      </Suspense>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Suspense in Live Resolvers with TypeScript\nDESCRIPTION: This example demonstrates how to create a Live Resolver that handles loading states by returning the suspenseSentinel when data is not yet available. The resolver provides both a read method to check the current state and a subscribe method to notify when state changes.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/guides/relay-resolvers/suspense.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {suspenseSentinel} from 'relay-runtime';\n\n/**\n * @RelayResolver Query.myIp: String\n * @live\n */\nexport function myIp(): LiveState<string> {\n  return {\n    read: () => {\n      const state = store.getState();\n      const ipLoadObject = state.ip;\n      if (ipLoadObject.status === \"LOADING\") {\n        return suspenseSentinel();\n      }\n      return state.ip;\n    },\n    subscribe: (cb) => {\n      return store.subscribe(cb);\n    },\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Relay Components with Deferred Fragments\nDESCRIPTION: Shows how to test Relay components that use deferred fragments (@defer) using MockPayloadGenerator.generateWithDefer and the generateDeferredPayload option.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/guides/testing-relay-components.md#2025-04-18_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n// Say you have a component with useFragment\nconst ChildComponent = (props: {user: ChildComponentFragment_user$key}) => {\n  const data = useFragment(graphql`\n  fragment ChildComponentFragment_user on User {\n    name\n  }\n  `, props.user);\n  return <View>{data?.name}</View>;\n};\n\n// Say you have a parent component that fetches data with useLazyLoadQuery and `@defer`s the data for the ChildComponent.\nconst ParentComponent = () => {\n  const data = useLazyLoadQuery(graphql`\n  query ParentComponentQuery {\n    user {\n      id\n      ...ChildComponentFragment_user @defer\n    }\n  }\n  `, {});\n  return (\n    <View>\n      {id}\n      <Suspense fallback={null}>\n        {data?.user && <ChildComponent user={data.user} />}\n      </Suspense>\n    </View>\n  );\n};\n\nconst {\n  createMockEnvironment,\n  MockPayloadGenerator,\n} = require('relay-test-utils');\nconst {act, render} = require('@testing-library/react');\n\ntest('Data Render with @defer', () => {\n  const environment = createMockEnvironment();\n  const renderer = render(\n    <RelayEnvironmentProvider environment={environment}>\n      <ParentComponent />,\n    </RelayEnvironmentProvider>\n  );\n\n  // Wrapping in ReactTestRenderer.act will ensure that components\n  // are fully updated to their final state.\n  act(() => {\n    const operation = environment.mock.getMostRecentOperation();\n    const mockData = MockPayloadGenerator.generateWithDefer(operation, null, {generateDeferredPayload: true});\n    environment.mock.resolve(mockData);\n\n    // You may need this to make sure all payloads are retrieved\n    jest.runAllTimers();\n  });\n\n  // At this point operation will be resolved\n  // and the data for a query will be available in the store\n  expect(renderer.container.textContent).toEqual(['id', 'name']);\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Declarative Connection Handler in Relay (JavaScript)\nDESCRIPTION: Uses @prependEdge directive to add a newly created comment to the top of the list by modifying the Connections through mutation responses.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/tutorial/mutations-updates.md#2025-04-18_snippet_13\n\nLANGUAGE: JavaScript\nCODE:\n```\n  mutation StoryCommentsComposerPostMutation(\n    $id: ID!,\n    $text: String!,\n    // change-line\n    $connections: [ID!]!,\n  ) {\n    postStoryComment(id: $id, text: $text) {\n      commentEdge\n        // change-line\n        @prependEdge(connections: $connections)\n      {\n        node {\n          id\n          text\n        }\n      }\n    }\n  }\n\n```\n\n----------------------------------------\n\nTITLE: Invalidating Global Relay Store\nDESCRIPTION: Demonstrates how to invalidate the entire Relay store using the invalidateStore() method within an updater function. This causes all cached data to be considered stale and require refetching.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/guided-tour/reusing-cached-data/staleness-of-data.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nfunction updater(store) {\n  store.invalidateStore();\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Relay Compiler script to package.json\nDESCRIPTION: Package.json configuration to add a script for running the Relay Compiler using yarn or npm.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/getting-started/installation-and-setup.md#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n\"scripts\": {\n  \"relay\": \"relay-compiler\"\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Connections with Specific Filters in Relay\nDESCRIPTION: This snippet demonstrates how to access connection records from the Relay store by providing the specific filter values used to identify the connection. It shows how to retrieve different connection instances based on different filter values.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/guided-tour/list-data/updating-connections.md#2025-04-18_snippet_13\n\nLANGUAGE: js\nCODE:\n```\nconst {ConnectionHandler} = require('RelayModern');\n\nfunction updater(store: RecordSourceSelectorProxy) {\n  const storyRecord = store.get(storyID);\n\n  // Get the connection instance for the connection with comments sorted\n  // by the date they were added\n  const connectionRecordSortedByDate = ConnectionHandler.getConnection(\n    storyRecord,\n    'StoryComponent_story_comments_connection',\n    {order_by: '*DATE_ADDED*', filter_mode: null, language: null}\n  );\n\n  // Get the connection instance for the connection that only contains\n  // comments made by friends\n  const connectionRecordFriendsOnly = ConnectionHandler.getConnection(\n    storyRecord,\n    'StoryComponent_story_comments_connection',\n    {order_by: null, filter_mode: '*FRIENDS_ONLY*', langugage: null}\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Complete Fragment with Multiple Type Refinements\nDESCRIPTION: Final GraphQL fragment that selects common Actor fields plus type-specific fields for both Person and Organization types using type refinements.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/tutorial/interfaces-polymorphism.md#2025-04-18_snippet_5\n\nLANGUAGE: graphql\nCODE:\n```\nfragment PosterDetailsHovercardContentsBodyFragment on Actor {\n  name\n  joined\n  profilePicture {\n    ...ImageFragment\n  }\n  ... on Organization {\n    organizationKind\n  }\n  // change\n  ... on Person {\n    location {\n      name\n    }\n  }\n  // end-change\n}\n```\n\n----------------------------------------\n\nTITLE: Modifying Network Layer for Persisted Queries\nDESCRIPTION: Example of how to modify the network layer fetch implementation to pass an ID parameter in the POST body instead of a query parameter when using persisted queries.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/guides/persisted-queries.md#2025-04-18_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nfunction fetchQuery(operation, variables) {\n  return fetch('/graphql', {\n    method: 'POST',\n    headers: {\n      'content-type': 'application/json'\n    },\n    body: JSON.stringify({\n      doc_id: operation.id, // NOTE: pass md5 hash to the server\n      // query: operation.text, // this is now obsolete because text is null\n      variables,\n    }),\n  }).then(response => {\n    return response.json();\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Querying for Rebel Faction Information\nDESCRIPTION: This snippet shows how to query for information about the Rebels faction using GraphQL. The query retrieves the ID and name of the Rebels faction, demonstrating basic data retrieval in Relay.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/guides/graphql-server-specification.md#2025-04-18_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\nquery RebelsQuery {\n  rebels {\n    id\n    name\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Invalidating Specific Records in Relay Store\nDESCRIPTION: Shows how to invalidate specific records in the Relay store using invalidateRecord() method. Only queries referencing the invalidated records will be considered stale.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/guided-tour/reusing-cached-data/staleness-of-data.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nfunction updater(store) {\n  const user = store.get('<id>');\n  if (user != null) {\n    user.invalidateRecord();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Plural Root Field from Relay Store\nDESCRIPTION: Example of retrieving a plural root field from the Relay Store using the getPluralRootField method of RecordSourceSelectorProxy. It takes a fieldName as an argument and returns an array of RecordProxies.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/api-reference/relay-runtime/store.md#2025-04-18_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst nodes = store.getPluralRootField('nodes');\n```\n\n----------------------------------------\n\nTITLE: Deleting Records with @deleteRecord Directive\nDESCRIPTION: Illustrates using the @deleteRecord directive within a GraphQL mutation to delete items from the store. The example shows a mutation deleting a post with the directive applied to its ID, ensuring the record is removed from the client store following the server-side action.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/guided-tour/updating-data/graphql-mutations.md#2025-04-18_snippet_4\n\nLANGUAGE: graphql\nCODE:\n```\nmutation DeletePostMutation($input: DeletePostData!) {\n  delete_post(data: $input) {\n    deleted_post {\n      id @deleteRecord\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Fragment in React Component\nDESCRIPTION: Shows how to use the useFragment hook in a React functional component to read data specified by a fragment. The component receives a fragment reference through props.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/principles-and-architecture/thinking-in-relay.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexport default function AuthorDetails(props) {\n  const data = useFragment(authorDetailsFragment, props.author);\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Using Suspense for Multiple Content Components\nDESCRIPTION: Demonstrates how to use a single Suspense component to handle loading states for multiple content components that may suspend.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/guided-tour/rendering/loading-states.md#2025-04-18_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n/**\n * App.react.js\n */\n\nconst React = require('React');\nconst {Suspense} = require('React');\n\nfunction App() {\n  return (\n    // A LoadingGlimmer for all content is rendered via the Suspense fallback\n    <Suspense fallback={<LoadingGlimmer />}>\n      <MainContent />\n      <SecondaryContent /> {/* SecondaryContent can also suspend */}\n    </Suspense>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Mocking GraphQL Type with MockPayloadGenerator\nDESCRIPTION: This code snippet showcases how to mock a GraphQL type using `MockPayloadGenerator` when configuring a query resolver. It demonstrates how to define a function for a specific GraphQL type (e.g., `CurrencyAmount`) that returns a mocked object with the expected fields (e.g., `formatted_amount`). This is crucial for simulating the expected response from a Relay query during testing.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v13.0.0/guides/testing-relay-with-preloaded-queries.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nreturn MockPayloadGenerator.generate(operation, {\n  CurrencyAmount() { // <-- the GraphQL type\n    return {\n      formatted_amount: \"response_value\" <-- CurrencyAmount fields, selected in the query\n    };\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Raw Representation of Cached GraphQL Data\nDESCRIPTION: This pseudo-code example illustrates how cached data might be structured in a normalized fashion using Maps. It shows the relationships between stories, authors, and comments.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v13.0.0/principles-and-architecture/thinking-in-graphql.md#2025-04-18_snippet_10\n\nLANGUAGE: pseudocode\nCODE:\n```\nMap {\n  1: Map {\n    text: 'got GraphQL?',\n    author: Link(2),\n    comments: [Link(3)],\n  },\n  2: Map {\n    name: 'Yuzhi',\n    photo: 'http://.../photo1.jpg',\n  },\n  3: Map {\n    text: 'Here\\'s how to get one!',\n    author: Link(2),\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Executing Mutation with commitMutation in React Relay\nDESCRIPTION: Demonstrates how to use commitMutation to perform a feedback like mutation by passing an environment and mutation configuration with GraphQL query and variables\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v13.0.0/api-reference/relay-runtime/commit-mutation.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport type {FeedbackLikeMutation} from 'FeedbackLikeMutation.graphql';\nconst React = require('React');\n\nconst {graphql, useMutation} = require('react-relay');\n\nfunction likeFeedback(environment: IEnvironment): Disposable {\n  return commitMutation<FeedbackLikeMutation>(environment, {\n    mutation: graphql`\n      mutation FeedbackLikeMutation($input: FeedbackLikeData!) {\n        feedback_like(data: $input) {\n          feedback {\n            id\n            viewer_does_like\n            like_count\n          }\n        }\n      }\n    `,\n    variables: {\n      input: {\n        id: '123',\n      },\n    },\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Network Layer for Relay\nDESCRIPTION: This snippet demonstrates how to create and inject a custom network layer object that conforms to the RelayNetworkLayer interface. It includes placeholder methods for sendMutation, sendQueries, and supports.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-classic/Classic-Guides-NetworkLayer.md#2025-04-18_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nvar myNetworkLayer = {\n  sendMutation(mutationRequest) {\n    // ...\n  },\n  sendQueries(queryRequests) {\n    // ...\n  },\n  supports(...options) {\n    // ...\n  },\n};\n\nRelay.injectNetworkLayer(myNetworkLayer);\n```\n\n----------------------------------------\n\nTITLE: Modifying Network Layer for Persisted Queries\nDESCRIPTION: Implementation of a fetchQuery function that sends the operation ID (MD5 hash) instead of the query text in the request body. This modification is necessary when using persisted queries.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/guides/persisted-queries.md#2025-04-18_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nfunction fetchQuery(operation, variables) {\n  return fetch('/graphql', {\n    method: 'POST',\n    headers: {\n      'content-type': 'application/json'\n    },\n    body: JSON.stringify({\n      doc_id: operation.id, // NOTE: pass md5 hash to the server\n      // query: operation.text, // this is now obsolete because text is null\n      variables,\n    }),\n  }).then(response => {\n    return response.json();\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Field Logger for Relay Environment in TypeScript\nDESCRIPTION: This example demonstrates how to implement a field logger function and create a Relay Environment with the logger. The logger checks for resolver errors and logs them to the console with relevant details.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/guides/relay-resolvers/errors.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nfunction fieldLogger(event) {\n  if(event.kind === \"relay_resolver.error\") {\n    // Log this somewhere!\n    console.warn(`Resolver error encountered in ${event.owner}.${event.fieldPath}`)\n    console.warn(event.error)\n  }\n}\n\nconst environment = new Environment({\n  network: Network.create(/* your fetch function here */),\n  store: new RelayModernStore(new RecordSource()),\n  relayFieldLogger: fieldLogger\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Abstract Types in RelayResolvers with TypeScript\nDESCRIPTION: This TypeScript example showcases the implementation of abstract types using the Relay Resolvers. Specifically, it defines two resolver types, `BasicUser` and `SpecialUser`, which implement the `IUser` interface declared in the GraphQL schema. Each function returns a user model object enhanced with a name property.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/guides/relay-resolvers/defining-types.md#2025-04-18_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\n/**\n * @RelayResolver BasicUser implements IUser\n */\nexport function BasicUser(id: DataID): BasicUserModel {\n  return { ...BasicUserService.getById(id), name: 'BasicUser1'};\n}\n\n/**\n * @RelayResolver SpecialUser implements IUser\n */\nexport function SpecialUser(id: DataID): SpecialUserModel {\n  return { ...SpecialUserService.getById(id), name: 'SpecalUser1'};\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Relay Pagination Components\nDESCRIPTION: Demonstrates how to test a Pagination component using usePaginationFragment. It shows how to simulate pagination behavior, including loading more data and updating the UI accordingly.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v13.0.0/guides/testing-relay-components.md#2025-04-18_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\ntest('`Pagination` Container', () => {\n  const environment = createMockEnvironment();\n  const TestRenderer = () => {\n    const data = useLazyLoadQuery(\n      graphql`\n        query TestQuery @relay_test_operation {\n          myConnection: node(id: \"test-id\") {\n            connection {\n              # Spread the pagination fragment you want to test here\n              ...MyConnectionFragment\n            }\n          }\n        }\n      `,\n      {},\n    );\n    return <MyPaginationContainer connection={data.myConnection.connection} />\n  };\n\n  const renderer = ReactTestRenderer.create(\n    <RelayEnvironmentProvider environment={environment}>\n      <Suspense fallback=\"Loading...\">\n        <TestRenderer />\n      </Suspense>\n    </RelayEnvironmentProvider>\n  );\n\n  ReactTestRenderer.act(() => {\n    environment.mock.resolveMostRecentOperation(operation =>\n      MockPayloadGenerator.generate(operation, {\n        ID(_, generateId) {\n          return `first-page-id-${generateId()}`;\n        },\n        PageInfo() {\n          return {\n            has_next_page: true,\n          };\n        },\n      }),\n    );\n  });\n\n  const loadMore = renderer.root.find(node => node.props['data-testid'] === 'loadMore')\n  expect(loadMore.props.disabled).toBe(false);\n  loadMore.props.onClick();\n\n  ReactTestRenderer.act(() => {\n    environment.mock.resolveMostRecentOperation(operation =>\n      MockPayloadGenerator.`generate`(operation, {\n        ID(_, generateId) {\n          return `second-page-id-${generateId()}`;\n        },\n        PageInfo() {\n          return {\n            has_next_page: false,\n          };\n        },\n      }),\n    );\n  });\n\n  expect(loadMore.props.disabled).toBe(true);\n});\n```\n\n----------------------------------------\n\nTITLE: Reading Client-Only Data in JavaScript with Relay\nDESCRIPTION: This JavaScript snippet demonstrates how to read client-only data in Relay by selecting it inside a fragment. The `useFragment` hook is used to read the `is_new_comment` field along with other fields such as `body.text` from the `Comment` type. This pattern allows integration of client-only fields seamlessly within component logic.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/guided-tour/updating-data/client-only-data.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst data = *useFragment*(\n  graphql`\n    fragment CommentComponent_comment on Comment {\n\n      # We can select client-only fields as we would any other field\n      is_new_comment\n\n      body {\n        text\n      }\n    }\n  `,\n  props.user,\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing loadQuery with React Relay\nDESCRIPTION: Example demonstrating how to use loadQuery to fetch data imperatively. Shows basic setup with a GraphQL query, environment configuration, and query reference creation. Note that this example excludes proper cleanup via dispose()\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/api-reference/hooks/load-query.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst MyEnvironment = require('MyEnvironment');\nconst {loadQuery} = require('react-relay');\n\nconst query = graphql`\n  query AppQuery($id: ID!) {\n    user(id: $id) {\n      name\n    }\n  }\n`;\n\n// Note: you should generally not call loadQuery at the top level.\n// Instead, it should be called in response to an event (such a route navigation,\n// click, etc.).\nconst queryReference = loadQuery(\n  MyEnvironment,\n  query,\n  {id: '4'},\n  {fetchPolicy: 'store-or-network'},\n);\n\n// later: pass queryReference to usePreloadedQuery()\n// Note that query reference should have .dispose() called on them,\n// which is missing in this example.\n```\n\n----------------------------------------\n\nTITLE: Defining Mock Resolvers for Object Types in Relay Tests\nDESCRIPTION: Example showing how to define mock resolvers for complex object types like User. This pattern allows providing structured default data for GraphQL objects in test environments.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/guides/testing-relay-components.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  // This will be the default values for User object in the query response\n  User() {\n    return {\n      id: 4,\n      name: \"Mark\",\n      profile_picture: {\n        uri: \"http://my-image...\",\n      },\n    };\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Garbage Collection Release Buffer Size in Relay\nDESCRIPTION: Demonstrates how to configure the garbage collection release buffer size in the Relay Store. This buffer temporarily retains queries after they've been released, making data reuse more likely when navigating back to previously visited content.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v13.0.0/guided-tour/reusing-cached-data/presence-of-data.md#2025-04-18_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nconst store = new Store(source, {gcReleaseBufferSize: 10});\n```\n\n----------------------------------------\n\nTITLE: SelectorStoreUpdater Type Definition\nDESCRIPTION: Defines the structure and functionality of the `SelectorStoreUpdater` type in Relay. It's a function that receives a `RecordSourceSelectorProxy` and data, enabling imperative data manipulation within the Relay store. This includes creating, updating, and deleting records based on subscription payloads.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/api-reference/types/SelectorStoreUpdater.md#2025-04-18_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n/**\n * A function with signature `(store: RecordSourceSelectorProxy, data) => void`\n * This interface allows you to *imperatively* write and read data directly to and from the Relay store. This means that you have full control over how to update the store in response to the subscription payload: you can *create entirely new records*, or *update or delete existing ones*. The full API for reading and writing to the Relay store is available <a href={useBaseUrl('docs/api-reference/store/#recordsourceselectorproxy')}>here</a>.\n */\n```\n\n----------------------------------------\n\nTITLE: Implementing Story Component with Comments Section\nDESCRIPTION: React component showing how to integrate the StoryCommentsSection component into the Story component with proper fragment composition\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/tutorial/connections-pagination.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport StoryCommentsSection from './StoryCommentsSection';\n\nfunction Story({story}) {\n  const data = useFragment(StoryFragment, story);\n  return (\n    <Card>\n      <Heading>{data.title}</Heading>\n      <PosterByline person={data.poster} />\n      <Timestamp time={data.posted_at} />\n      <Image image={data.image} />\n      <StorySummary summary={data.summary} />\n      <StoryCommentsSection story={data} />\n    </Card>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Fragment Component for Username in Relay\nDESCRIPTION: Defines a fragment component that displays a user's username. This component will suspend rendering if the username data is missing and being fetched.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/guided-tour/reusing-cached-data/rendering-partially-cached-data.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * UsernameComponent.react.js\n *\n * Fragment Component\n */\n\nimport type {UsernameComponent_user$key} from 'UsernameComponent_user.graphql';\n\nconst React = require('React');\nconst {graphql, useFragment} = require('react-relay');\n\ntype Props = {\n  user: UsernameComponent_user$key,\n};\n\nfunction UsernameComponent(props: Props) {\n  const user = useFragment(\n    graphql`\n      fragment UsernameComponent_user on User {\n        username\n      }\n    `,\n    props.user,\n  );\n  return (...);\n}\n\nmodule.exports = UsernameComponent;\n```\n\n----------------------------------------\n\nTITLE: Using Fragment Arguments in StoryFragment (GraphQL)\nDESCRIPTION: Updated StoryFragment that passes a width argument to ImageFragment using the @arguments directive. This allows the parent component to control the size of images fetched by child components.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/tutorial/fragments-1.md#2025-04-18_snippet_13\n\nLANGUAGE: graphql\nCODE:\n```\nconst StoryFragment = graphql`\n  fragment StoryFragment on Story {\n    title\n    summary\n    postedAt\n    poster {\n      ...PosterBylineFragment\n    }\n    image {\n      // change-line\n      ...ImageFragment @arguments(width: 400)\n    }\n  }\n`;\n```\n\n----------------------------------------\n\nTITLE: Refetching Queries Using useQueryLoader with Different Data in React\nDESCRIPTION: Example showing how to refetch a query with different data using the useQueryLoader hook. The code demonstrates loading a query with different ID variables and rendering the updated data using usePreloadedQuery.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/guided-tour/refetching/refetching-queries-with-different-data.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * App.react.js\n */\nconst AppQuery = require('__generated__/AppQuery.graphql');\n\nfunction App(props: Props) {\n  const variables = {id: '4'};\n  const [queryRef, loadQuery] = useQueryLoader(\n    AppQuery,\n    props.appQueryRef /* initial query ref */\n  );\n\n  const refetch = useCallback(() => {\n    // Load the query again using the same original variables.\n    // Calling loadQuery will update the value of queryRef.\n    loadQuery({id: 'different-id'});\n  }, [/* ... */]);\n\n  return (\n    <React.Suspense fallback=\"Loading query...\">\n      <MainContent\n        refetch={refetch}\n        queryRef={queryRef}\n      />\n    </React.Suspense>\n  );\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * MainContent.react.js\n */\n\n// Renders the preloaded query, given the query reference\nfunction MainContent(props) {\n  const {refetch, queryRef} = props;\n  const data = usePreloadedQuery(\n    graphql`\n      query AppQuery($id: ID!) {\n        user(id: $id) {\n          name\n          friends {\n            count\n          }\n        }\n      }\n    `,\n    queryRef,\n  );\n\n  return (\n    <>\n      <h1>{data.user?.name}</h1>\n      <div>Friends count: {data.user?.friends?.count}</div>\n      <Button\n        onClick={() => refetch()}>\n        Fetch latest count\n      </Button>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Network Layer Implementation for Persisted Queries\nDESCRIPTION: Example of how to modify the network layer fetch implementation to use persisted query IDs instead of full query text.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/guides/persisted-queries.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nfunction fetchQuery(operation, variables) {\n  return fetch('/graphql', {\n    method: 'POST',\n    headers: {\n      'content-type': 'application/json'\n    },\n    body: JSON.stringify({\n      doc_id: operation.id,\n      variables,\n    }),\n  }).then(response => {\n    return response.json();\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Multiple Filtered Connections in Relay\nDESCRIPTION: This snippet demonstrates how to update multiple connection records when adding a new edge, based on their filter values. It shows conditional logic to only add the new edge to connections where it belongs based on filter criteria.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/guided-tour/updating-data/updating-connections.md#2025-04-18_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nconst {ConnectionHandler} = require('relay-runtime');\n\nfunction updater(store: RecordSourceSelectorProxy) {\n  const storyRecord = store.get(storyID);\n\n  // Get the connection instance for the connection with comments sorted\n  // by the date they were added\n  const connectionRecordSortedByDate = ConnectionHandler.getConnection(\n    storyRecord,\n    'StoryComponent_story_comments_connection',\n    {order_by: '*DATE_ADDED*', filter_mode: null, language: null}\n  );\n\n  // Get the connection instance for the connection that only contains\n  // comments made by friends\n  const connectionRecordFriendsOnly = ConnectionHandler.getConnection(\n    storyRecord,\n    'StoryComponent_story_comments_connection',\n    {order_by: null, filter_mode: '*FRIENDS_ONLY*', language: null}\n  );\n\n  const newComment = (...);\n  const newEdge = (...);\n\n  ConnectionHandler.insertEdgeAfter(\n    connectionRecordSortedByDate,\n    newEdge,\n  );\n\n  if (isMadeByFriend(storyRecord, newComment) {\n    // Only add new comment to friends-only connection if the comment\n    // was made by a friend\n    ConnectionHandler.insertEdgeAfter(\n      connectionRecordFriendsOnly,\n      newEdge,\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using @required Directive in GraphQL Query\nDESCRIPTION: Demonstrates how to use the @required directive in a GraphQL query to handle null values for the 'name' field.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/guides/required-directive.md#2025-04-18_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nquery MyQuery {\n  viewer {\n    name @required(action: LOG)\n    age\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Paginated Fragment with Arguments\nDESCRIPTION: GraphQL fragment definition with pagination arguments and connection directive for story comments\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/tutorial/connections-pagination.md#2025-04-18_snippet_3\n\nLANGUAGE: graphql\nCODE:\n```\nconst StoryCommentsSectionFragment = graphql`\n  fragment StoryCommentsSectionFragment on Story\n    @argumentDefinitions(\n      cursor: { type: \"String\" }\n      count: { type: \"Int\", defaultValue: 3 }\n    )\n  {\n    comments(after: $cursor, first: $count) {\n      edges {\n        node {\n          ...CommentFragment\n        }\n      }\n      pageInfo {\n        hasNextPage\n      }\n    }\n  }\n`;\n```\n\n----------------------------------------\n\nTITLE: Implementing Strong Type Return in Relay Resolver\nDESCRIPTION: Example of a Relay Resolver that returns a reference to a strong GraphQL type. The resolver returns an object with the ID of the User that authored a Post.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/guides/relay-resolvers/return-types.md#2025-04-18_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport {DataID} from 'relay-runtime';\n/**\n * @RelayResolver Post.author: User\n */\nexport function author(post: PostModel): { id: DataID } {\n  return { id: post.authorId };\n}\n```\n\n----------------------------------------\n\nTITLE: Refetching by Node ID in GraphQL\nDESCRIPTION: Performs a refetch using a `node` query by ID. This demonstrates how to retrieve additional details of an entity using its globally unique ID and leverage interfaces in GraphQL.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/guides/graphql-server-specification.md#2025-04-18_snippet_2\n\nLANGUAGE: graphql\nCODE:\n```\nquery RebelsRefetchQuery { node(id: \"RmFjdGlvbjox\") { id ... on Faction { name } } }\n```\n\n----------------------------------------\n\nTITLE: Example GraphQL Query for a List of Contacts\nDESCRIPTION: A sample GraphQL query demonstrating how to request a list of contacts, showing the query structure for retrieving multiple items.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/tutorial/arrays-lists.md#2025-04-18_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nquery MyQuery {\n  viewer {\n    contacts { // List of edges\n      id // field on a single item\n      name\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ContactsListFragment in GraphQL\nDESCRIPTION: This snippet shows the initial definition of the ContactsListFragment in GraphQL, which selects the list of contacts.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/tutorial/refetchable-fragments.md#2025-04-18_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\nconst ContactsListFragment = graphql`\n  fragment ContactsListFragment on Viewer {\n    contacts {\n      id\n      ...ContactRowFragment\n    }\n  }\n`;\n```\n\n----------------------------------------\n\nTITLE: Using Query Variables in React Components with useFragment Hook\nDESCRIPTION: Example of a React component using the useFragment hook to reference a global query variable $scale in its fragment definition. Any query that includes this fragment must declare the $scale variable.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/guided-tour/rendering/variables.md#2025-04-18_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nfunction UserComponent(props: Props) {\n  const data = useFragment(\n    graphql`\n    fragment UserComponent_user on User {\n      name\n      profile_picture(scale: $scale) {\n        uri\n      }\n    }\n    `,\n    props.user,\n  );\n\n  return (...);\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Filtered Connection Data with GraphQL\nDESCRIPTION: A GraphQL fragment that queries a user's friends connection with filtering arguments like order_by and search_term to control sorting and filtering of the result set.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/guided-tour/list-data/refetching-connections.md#2025-04-18_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nfragment UserFragment on User {\n  name\n  friends(order_by: DATE_ADDED, search_term: \"Alice\", first: 10) {\n    edges {\n      node {\n        name\n        age\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Executing Multiple Queries Concurrently in Relay\nDESCRIPTION: Shows how to execute multiple queries concurrently using Promise.all with fetchQuery. This approach allows for efficient data fetching when multiple independent queries need to be executed.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/guided-tour/managing-data-outside-react/reading-queries.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport {fetchQuery, graphql} from 'react-relay';\n\nconst UserQuery = graphql`\n  query UserQuery($id: ID!) {\n    user(id: $id) {\n      name\n    }\n  }\n`;\n\nconst PageQuery = graphql`\n  query PageQuery($id: ID!) {\n    page(id: $id) {\n      title\n    }\n  }\n`;\n\nPromise.all([\n  fetchQuery(environment, UserQuery, {id: 4}).toPromise(),\n  fetchQuery(environment, PageQuery, {id: 'home'}).toPromise(),\n]).then(\n  ([userData, pageData]) => {\n    console.log(userData, pageData);\n  },\n);\n```\n\n----------------------------------------\n\nTITLE: Example of Different Queries Referencing Same Data in Relay\nDESCRIPTION: Two different query examples that reference the same data (a user with id: 4), showing why missing field handlers are useful for data reuse between different query structures.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/guided-tour/reusing-cached-data/filling-in-missing-data.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// Query 1\n\nquery UserQuery {\n  user(id: 4) {\n    name\n  }\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// Query 2\n\nquery NodeQuery {\n  node(id: 4) {\n    ... on User {\n      name\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Multiple Fragments with useFragment in Relay\nDESCRIPTION: This React component `UserComponent` demonstrates rendering data from multiple GraphQL fragments using the `useFragment` hook. It retrieves `userData` and `viewerData` using their respective fragment references and renders information from both.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/guided-tour/rendering/fragments.md#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport type {UserComponent_user$key} from 'UserComponent_user.graphql';\nimport type {UserComponent_viewer$key} from 'UserComponent_viewer.graphql';\n\nconst React = require('React');\nconst {graphql, useFragment} = require('react-relay');\n\ntype Props = {\n  user: UserComponent_user$key,\n  viewer: UserComponent_viewer$key,\n};\n\nfunction UserComponent(props: Props) {\n  const userData = useFragment(\n    graphql`\n      fragment UserComponent_user on User {\n        name\n        profile_picture(scale: 2) {\n          uri\n        }\n      }\n    `,\n    props.user,\n  );\n\n  const viewerData = useFragment(\n    graphql`\n      fragment UserComponent_viewer on Viewer {\n        actor {\n          name\n        }\n      }\n    `,\n    props.viewer,\n  );\n\n  return (\n    <>\n      <h1>{userData.name}</h1>\n      <div>\n        <img src={userData.profile_picture?.uri} />\n        Acting as: {viewerData.actor?.name ?? 'Unknown'}\n      </div>\n    </>\n  );\n}\n\nmodule.exports = UserComponent;\n```\n\n----------------------------------------\n\nTITLE: Using Fragments with Default Arguments in Relay\nDESCRIPTION: Example showing how to include fragments that have default argument values. If arguments aren't provided, the fragment will use its default values.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/guided-tour/rendering/variables.md#2025-04-18_snippet_8\n\nLANGUAGE: js\nCODE:\n```\nfunction TaskList(props) {\n  const data = usePreloadedQuery(\n    graphql`\n      query TaskListQuery {\n        todays_tasks {\n          ...TaskView_task\n        }\n        tomorrows_tasks {\n          ...TaskView_task @arguments(showDetailedResults: false)\n        }\n      }\n    `,\n    props.queryRef,\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Paginating Multiple Connections with React Relay - JavaScript\nDESCRIPTION: This snippet demonstrates how to paginate over multiple data connections within the same React component using `usePaginationFragment`. Dependencies include `react-relay` for Relay hooks and types for GraphQL fragments. It requires connection keys to identify each data source, handling pagination states independently for each connection. Inputs are GraphQL fragment keys and the outputs are paginated data sets for users and viewers.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v13.0.0/guided-tour/list-data/advanced-pagination.md#2025-04-18_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport type {CombinedFriendsListComponent_user$key} from 'CombinedFriendsListComponent_user.graphql';\nimport type {CombinedFriendsListComponent_viewer$key} from 'CombinedFriendsListComponent_viewer.graphql';\n\nconst React = require('React');\n\nconst {graphql, usePaginationFragment} = require('react-relay');\n\ntype Props = {\n  user: CombinedFriendsListComponent_user$key,\n  viewer: CombinedFriendsListComponent_viewer$key,\n};\n\nfunction CombinedFriendsListComponent(props: Props) {\n\n  const {data: userData, ...userPagination} = usePaginationFragment(\n    graphql`\n      fragment CombinedFriendsListComponent_user on User {\n        name\n        friends\n          @connection(\n            key: \"CombinedFriendsListComponent_user_friends_connection\"\n          ) {\n          edges {\n            node {\n              name\n              age\n            }\n          }\n        }\n      }\n    `,\n    props.user,\n  );\n\n  const {data: viewerData, ...viewerPagination} = usePaginationFragment(\n    graphql`\n      fragment CombinedFriendsListComponent_user on Viewer {\n        actor {\n          ... on User {\n            name\n            friends\n              @connection(\n                key: \"CombinedFriendsListComponent_viewer_friends_connection\"\n              ) {\n              edges {\n                node {\n                  name\n                  age\n                }\n              }\n            }\n          }\n        }\n      }\n    `,\n    props.viewer,\n  );\n\n  return (...);\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Query Resolver for Mock Payload Generation in JavaScript\nDESCRIPTION: This code snippet shows how to configure a query resolver to generate a mock payload for a Relay test. It demonstrates the use of MockPayloadGenerator to create a response for a specific GraphQL type.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/guides/testing-relay-with-preloaded-queries.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nreturn MockPayloadGenerator.generate(operation, {\n  CurrencyAmount() { // <-- the GraphQL type\n    return {\n      formatted_amount: \"response_value\" <-- CurrencyAmount fields, selected in the query\n    };\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Invalidating Specific Record in Relay Store\nDESCRIPTION: Mechanism to mark a specific record as stale, causing only queries referencing that record to be refetched\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/guided-tour/reusing-cached-data/staleness-of-data.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nfunction updater(store) {\n  const user = store.get('<id>');\n  if (user != null) {\n    user.invalidateRecord();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing RecordProxy Interface Methods\nDESCRIPTION: The snippet illustrates methods within the `RecordProxy` interface for manipulating individual records in the Relay Store, such as copying fields, accessing or setting values, and invalidating records.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/api-reference/relay-runtime/store.md#2025-04-18_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\ninterface RecordProxy {\n  copyFieldsFrom(sourceRecord: RecordProxy): void;\n  getDataID(): string;\n  getLinkedRecord(name: string, arguments?: ?Object): ?RecordProxy;\n  getLinkedRecords(name: string, arguments?: ?Object): ?Array<?RecordProxy>;\n  getOrCreateLinkedRecord(\n    name: string,\n    typeName: string,\n    arguments?: ?Object,\n  ): RecordProxy;\n  getType(): string;\n  getValue(name: string, arguments?: ?Object): mixed;\n  setLinkedRecord(\n    record: RecordProxy,\n    name: string,\n    arguments?: ?Object,\n  ): RecordProxy;\n  setLinkedRecords(\n    records: Array<?RecordProxy>,\n    name: string,\n    arguments?: ?Object,\n  ): RecordProxy;\n  setValue(value: mixed, name: string, arguments?: ?Object): RecordProxy;\n  invalidateRecord(): void;\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring a Connection in GraphQL Fragment\nDESCRIPTION: This snippet shows how to declare a connection using the @connection directive in a GraphQL fragment.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/guided-tour/list-data/updating-connections.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst {graphql} = require('react-relay');\n\nconst storyFragment = graphql`\n  fragment StoryComponent_story on Story {\n    comments @connection(key: \"StoryComponent_story_comments_connection\") {\n      nodes {\n        body {\n          text\n        }\n      }\n    }\n  }\n`;\n```\n\n----------------------------------------\n\nTITLE: Testing Relay Subscriptions\nDESCRIPTION: Demonstrates how to test subscription operations using mock environment and verify subscription callbacks.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/guides/testing-relay-components.md#2025-04-18_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nfunction subscribe(environment, onNext, onError, variables)\n  requestSubscription(environment, {\n    subscription: graphql`...`,\n    onNext,\n    onError,\n    variables,\n  });\n}\n\ntest('it should subscribe', () => {\n  const environment = createMockEnvironment();\n  const onNext = jest.fn();\n  subscribe(environment, onNext, jest.fn(), {});\n  const operation = environment.mock.getMostRecentOperation();\n\n  ReactTestRenderer.act(() => {\n    environment.mock.nextValue(\n      operation,\n      MockPayloadGenerator.generate(operation)\n    );\n  });\n\n  expect(onNext).toBeCalled();\n});\n```\n\n----------------------------------------\n\nTITLE: GraphQL Subscription Example for Feedback Likes\nDESCRIPTION: A GraphQL subscription definition that allows clients to subscribe to changes in feedback likes data. Takes FeedbackLikeSubscribeData as input and returns the feedback ID and like count.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/glossary/glossary.md#2025-04-18_snippet_14\n\nLANGUAGE: graphql\nCODE:\n```\nsubscription FeedbackLikeSubscription($input: FeedbackLikeSubscribeData!) {\n  feedback_like_subscribe(data: $input) {\n    feedback {\n      id\n      like_count\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Manual Data Fetching to Avoid Suspense in React and Relay\nDESCRIPTION: This code snippet shows how to implement a React component that fetches data using Relay's fetchQuery, avoiding Suspense fallbacks. It manages its own loading state and updates the Relay store before re-rendering with new data.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/guided-tour/refetching/refetching-queries-with-different-data.md#2025-04-18_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * App.react.js\n */\nconst AppQuery = require('__generated__/AppQuery.graphql');\n\nfunction App(props: Props) {\n  const environment = useRelayEnvironment();\n  const [isRefreshing, setIsRefreshing] = useState(false)\n  const [queryArgs, setQueryArgs] = useState({\n    options: {fetchKey: 0, fetchPolicy: 'store-or-network'},\n    variables: {id: '4'},\n  });\n\n  const refetch = useCallback(() => {\n    if (isRefreshing) { return; }\n    setIsRefreshing(true);\n\n    // fetchQuery will fetch the query and write\n    // the data to the Relay store. This will ensure\n    // that when we re-render, the data is already\n    // cached and we don't suspend\n    fetchQuery(environment, AppQuery, variables)\n      .subscribe({\n        complete: () => {\n          setIsRefreshing(false);\n\n          // *After* the query has been fetched, we update\n          // our state to re-render with the new fetchKey\n          // and fetchPolicy.\n          // At this point the data for the query should\n          // be cached, so we use the 'store-only'\n          // fetchPolicy to avoid suspending.\n          setQueryArgs(prev => ({\n            options: {\n              fetchKey: (prev?.options.fetchKey ?? 0) + 1,\n              fetchPolicy: 'store-only',\n            },\n            variables: {id: 'different-id'}\n          }));\n        },\n        error: () => {\n          setIsRefreshing(false);\n        }\n      });\n  }, [/* ... */]);\n\n  return (\n    <React.Suspense fallback=\"Loading query...\">\n      <MainContent\n        isRefetching={isRefetching}\n        refetch={refetch}\n        queryArgs={queryArgs}\n      />\n    </React.Suspense>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Relay Fragment with Local Arguments\nDESCRIPTION: Demonstrates a Relay fragment that accepts locally-scoped arguments via @argumentDefinitions. The fragment can be customized without depending on global variables.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/guided-tour/rendering/variables.md#2025-04-18_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * Declare a fragment that accepts arguments with @argumentDefinitions\n */\n\nfunction TaskView(props) {\n  const data = useFragment(\n    graphql`\n      fragment TaskView_task on Task\n        @argumentDefinitions(showDetailedResults: {type: \"Boolean!\"}) {\n        name\n        is_completed\n        ... @include(if: $showDetailedResults) {\n          description\n        }\n      }\n    `,\n    props.task,\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using Arguments with GraphQL Fragment\nDESCRIPTION: Illustrates how to include a fragment with @arguments directive while querying. The fragment TaskView_task is used with different values for showDetailedResults argument.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/guided-tour/rendering/variables.md#2025-04-18_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * Include fragment using @arguments\n */\n\nfunction TaskList(props) {\n  const data = usePreloadedQuery(\n    graphql`\n      query TaskListQuery {\n        todays_tasks {\n          ...TaskView_task @arguments(showDetailedResults: true)\n        }\n        tomorrows_tasks {\n          ...TaskView_task @arguments(showDetailedResults: false)\n        }\n      }\n    `,\n    props.queryRef,\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using useFragment in Image Component (TypeScript/JSX)\nDESCRIPTION: Implementation of the Image component that uses the useFragment hook to read data from its fragment. The component accepts a fragment key as a prop and extracts data from it.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/tutorial/fragments-1.md#2025-04-18_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useFragment } from 'react-relay';\nimport type { ImageFragment$key } from \"./__generated__/ImageFragment.graphql\";\n\ntype Props = {\n  image: ImageFragment$key;\n  ...\n};\n\nfunction Image({image}: Props) {\n  const data = useFragment(ImageFragment, image);\n  return <img key={data.url} src={data.url} ... />\n}\n```\n\n----------------------------------------\n\nTITLE: Creating New Edge from Scratch in Relay Store Updater\nDESCRIPTION: This snippet demonstrates how to create a new edge from scratch using ConnectionHandler.createEdge within a Relay store updater function.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/guided-tour/list-data/updating-connections.md#2025-04-18_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nconst {ConnectionHandler} = require('relay-runtime');\n\nfunction updater(store: RecordSourceSelectorProxy) {\n  const storyRecord = store.get(storyID);\n  const connectionRecord = ConnectionHandler.getConnection(\n    storyRecord,\n    'StoryComponent_story_comments_connection',\n  );\n\n  // Create a new local Comment record\n  const id = `client:new_comment:${randomID()}`;\n  const newCommentRecord = store.create(id, 'Comment');\n\n  // Create new edge\n  const newEdge = ConnectionHandler.createEdge(\n    store,\n    connectionRecord,\n    newCommentRecord,\n    'CommentEdge', /* GraphQl Type for edge */\n  );\n\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Fragment Arguments in ImageFragment\nDESCRIPTION: This snippet demonstrates how to define fragment arguments in the `ImageFragment` to allow the parent component to specify the image size. The `@argumentDefinitions` directive is used to define `width` and `height` arguments with default values of `null`.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/tutorial/fragments-1.md#2025-04-18_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nconst ImageFragment = graphql`\n  fragment ImageFragment on Image\n    @argumentDefinitions(\n      // color1\n      width: {\n        // color2\n        type: \"Int\",\n        // color3\n        defaultValue: null\n      }\n      height: {\n        type: \"Int\",\n        defaultValue: null\n      }\n    )\n  {\n    url(\n      // color4\n      width: $width,\n      // color4\n      height: $height\n    )\n    altText\n  }\n`;\n```\n\n----------------------------------------\n\nTITLE: Defining GraphQL Query with New Field in TypeScript\nDESCRIPTION: Example of adding a new field (createdAt) to an existing GraphQL query in Newsfeed component\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/tutorial/fragments-1.md#2025-04-18_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nconst NewsfeedQuery = graphql`\n  query NewsfeedQuery {\n    topStory {\n      title\n      summary\n      createdAt\n      poster {\n        name\n        profilePicture {\n          url\n        }\n      }\n      thumbnail {\n        url\n      }\n    }\n  }\n`;\n```\n\n----------------------------------------\n\nTITLE: Defining a GraphQL Connection with Filter Arguments\nDESCRIPTION: A GraphQL fragment showing how to define a connection field with arguments for sorting and filtering the results.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/guided-tour/list-data/refetching-connections.md#2025-04-18_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nfragment UserFragment on User {\n  name\n  friends(order_by: DATE_ADDED, search_term: \"Alice\", first: 10) {\n    edges {\n      node {\n        name\n        age\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Components with Deferred Fragments in Relay\nDESCRIPTION: Illustrates how to test components that use @defer directive in Relay queries. The example uses MockPayloadGenerator.generateWithDefer with the generateDeferredPayload option to generate data for both immediate and deferred fragments.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/guides/testing-relay-components.md#2025-04-18_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n// Say you have a component with useFragment\nconst ChildComponent = (props: {user: ChildComponentFragment_user$key}) => {\n  const data = useFragment(graphql`\n  fragment ChildComponentFragment_user on User {\n    name\n  }\n  `, props.user);\n  return <View>{data?.name}</View>;\n};\n\n// Say you have a parent component that fetches data with useLazyLoadQuery and `@defer`s the data for the ChildComponent.\nconst ParentComponent = () => {\n  const data = useLazyLoadQuery(graphql`\n  query ParentComponentQuery {\n    user {\n      id\n      ...ChildComponentFragment_user @defer\n    }\n  }\n  `, {});\n  return (\n    <View>\n      {id}\n      <Suspense fallback={null}>\n        {data?.user && <ChildComponent user={data.user} />}\n      </Suspense>\n    </View>\n  );\n};\n\nconst {\n  createMockEnvironment,\n  MockPayloadGenerator,\n} = require('relay-test-utils');\nconst {act, render} = require('@testing-library/react');\n\ntest('Data Render with @defer', () => {\n  const environment = createMockEnvironment();\n  const renderer = render(\n    <RelayEnvironmentProvider environment={environment}>\n      <ParentComponent />,\n    </RelayEnvironmentProvider>\n  );\n\n  // Wrapping in ReactTestRenderer.act will ensure that components\n  // are fully updated to their final state.\n  act(() => {\n    const operation = environment.mock.getMostRecentOperation();\n    const mockData = MockPayloadGenerator.generateWithDefer(operation, null, {generateDeferredPayload: true});\n    environment.mock.resolve(mockData);\n\n    // You may need this to make sure all payloads are retrieved\n    jest.runAllTimers();\n  });\n\n  // At this point operation will be resolved\n  // and the data for a query will be available in the store\n  expect(renderer.container.textContent).toEqual(['id', 'name']);\n});\n```\n\n----------------------------------------\n\nTITLE: Retaining and Releasing Queries in Relay\nDESCRIPTION: Demonstrates how to retain a query to prevent its data from being garbage collected, and how to release it when no longer needed. This is useful for retaining data outside of a component's lifecycle.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/guided-tour/reusing-cached-data/presence-of-data.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// Retain query; this will prevent the data for this query and\n// variables from being garbage collected by Relay\nconst disposable = environment.retain(queryDescriptor);\n\n// Disposing of the disposable will release the data for this query\n// and variables, meaning that it can be deleted at any moment\n// by Relay's garbage collection if it hasn't been retained elsewhere\ndisposable.dispose();\n```\n\n----------------------------------------\n\nTITLE: Defining Relay Query Variables with TypeScript\nDESCRIPTION: This code snippet demonstrates how Relay emits type information for query variables using TypeScript. The `ExampleQuery$variables` type defines the shape of the variables object, requiring a readonly `artistID` key of type string. This ensures that the `useLazyLoadQuery` hook receives correctly typed variables, leveraging the `ExampleQuery` type imported from a generated file.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v13.0.0/guides/type-emission.md#2025-04-18_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n/**\n * export type ExampleQuery$variables = {\n *   readonly artistID: string\n * }\n * export type ExampleQuery$data = {\n *   readonly artist?: {\n *     readonly name?: string\n *   }\n * }\n * export type ExampleQuery = {\n *   readonly variables: ExampleQuery$variables\n *   readonly response: ExampleQuery$data\n * }\n */\n\nimport { ExampleQuery } from \"__generated__/ExampleQuery.graphql\"\n\nconst data = useLazyLoadQuery<ExampleQuery>(\n  graphql`\n    query ExampleQuery($artistID: ID!) {\n      artist(id: $artistID) {\n        name\n      }\n    }\n  `,\n  // variables are expected to be of type ExampleQuery$variables\n  {artistID: 'banksy'},\n);\n```\n\n----------------------------------------\n\nTITLE: Querying local state with React and Relay\nDESCRIPTION: Uses Relay's useLazyLoadQuery hook to query both server data (id, name) and local data (notes) for the current user.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/guides/client-schema-extensions.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// Example.js\nimport * as React from 'react';\nimport { useLazyLoadQuery, graphql } from 'react-relay';\n\nconst Example = (props) => {\n  const data = useLazyLoadQuery(graphql`\n    query ExampleQuery {\n      viewer {\n        id\n        name\n        notes {\n          id\n          title\n          body\n        }\n      }\n    }\n  `, {});\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing File Upload Mutations in Relay\nDESCRIPTION: Demonstrates how to implement file uploads with Relay mutations. The example shows an AttachDocumentMutation class that implements the getFiles() method to handle file data, and a FileUploader component that commits the mutation with a file from an input element.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-classic/Classic-APIReference-Mutation.md#2025-04-18_snippet_10\n\nLANGUAGE: jsx\nCODE:\n```\nclass AttachDocumentMutation extends Relay.Mutation {\n  getFiles() {\n    return {\n      file: this.props.file,\n    };\n  }\n}\nclass FileUploader extends React.Component {\n  handleSubmit() {\n    var fileToAttach = this.refs.fileInput.files.item(0);\n    Relay.Store.commitUpdate(\n      new AttachDocumentMutation({file: fileToAttach})\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Actor Fragment Definition\nDESCRIPTION: GraphQL fragment selecting common fields from the Actor interface\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/tutorial/interfaces-polymorphism.md#2025-04-18_snippet_3\n\nLANGUAGE: graphql\nCODE:\n```\nfragment PosterDetailsHovercardContentsBodyFragment on Actor {\n  name\n  joined\n  profilePicture {\n    ...ImageFragment\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Relay Operation Naming Patterns\nDESCRIPTION: Examples showing the required naming patterns for Relay operations in different file contexts. The operation name must begin with the module name and end with the operation type.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/tutorial/organizing-mutations-queries-and-subscriptions.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nMyComponent[MyDescriptiveNameHere]Mutation\n```\n\nLANGUAGE: javascript\nCODE:\n```\nMyComponent*Query\n```\n\nLANGUAGE: javascript\nCODE:\n```\nuseAddPostCommentMutation\n```\n\n----------------------------------------\n\nTITLE: Implementing Error Boundary with Retry for useQueryLoader Pattern\nDESCRIPTION: An Error Boundary implementation that includes retry functionality for Relay's useQueryLoader/loadQuery pattern. This allows users to retry failed queries by initiating a new query fetch when an error occurs.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v13.0.0/guided-tour/rendering/error-states.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * ErrorBoundaryWithRetry.react.js\n */\n\nconst React = require('React');\n\n// NOTE: This is NOT actual production code;\n// it is only used to illustrate example\nclass ErrorBoundaryWithRetry extends React.Component<Props, State> {\n  state = {error: null};\n\n  static getDerivedStateFromError(error): State {\n    return {error: error};\n  }\n\n  _retry = () => {\n    // This ends up calling loadQuery again to get and render\n    // a new query reference\n    this.props.onRetry();\n    this.setState({\n      // Clear the error\n      error: null,\n    });\n  }\n\n  render() {\n    const {children, fallback} = this.props;\n    const {error} = this.state;\n    if (error) {\n      if (typeof fallback === 'function') {\n        return fallback({error, retry: this._retry});\n      }\n      return fallback;\n    }\n    return children;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: GraphQL Mutation for Creating a Comment\nDESCRIPTION: This GraphQL mutation defines the structure for creating a new comment, including querying for the new comment's edge and cursor. The cursor is useful for pagination purposes. The `graphql` template literal tag is used from `react-relay`.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/guided-tour/list-data/updating-connections.md#2025-04-18_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst {graphql} = require('react-relay');\n\nconst createCommentMutation = graphql`\n  mutation CreateCommentMutation($input: CommentCreateData!) {\n    comment_create(input: $input) {\n      comment_edge {\n        cursor\n        node {\n          body {\n            text\n          }\n        }\n      }\n    }\n  }\n`;\n```\n\n----------------------------------------\n\nTITLE: Modifying Query to Use Variables - GraphQL\nDESCRIPTION: This snippet updates the previously defined GraphQL query to use a variable for the node ID, replacing the hard-coded value to dynamically fetch data for the specified poster.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/tutorial/queries-2.md#2025-04-18_snippet_4\n\nLANGUAGE: GraphQL\nCODE:\n```\nconst PosterDetailsHovercardContentsQuery = graphql`\n  query PosterDetailsHovercardContentsQuery($posterID: ID!) {\n    node(\n      // change-line\n      id: $posterID\n    ) {\n    ... on Actor {\n      ...PosterDetailsHovercardContentsBodyFragment\n      }\n    }\n  }\n`;\n```\n\n----------------------------------------\n\nTITLE: Refreshing Queries with useLazyLoadQuery Avoiding Suspense in React and Relay\nDESCRIPTION: This code shows how to refresh a query using useLazyLoadQuery in Relay while avoiding Suspense. It uses fetchQuery to manually manage the loading state and update the Relay store before triggering a re-render with new fetch options.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/guided-tour/refetching/refreshing-queries.md#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * App.react.js\n */\nimport type {AppQuery as AppQueryType} from 'AppQuery.graphql';\n\nconst AppQuery = require('__generated__/AppQuery.graphql');\n\nfunction App(props: Props) {\n  const variables = {id: '4'}\n  const environment = useRelayEnvironment();\n  const [refreshedQueryOptions, setRefreshedQueryOptions] = useState(null);\n  const [isRefreshing, setIsRefreshing] = useState(false)\n\n  const refresh = useCallback(() => {\n    if (isRefreshing) { return; }\n    setIsRefreshing(true);\n\n    // fetchQuery will fetch the query and write\n    // the data to the Relay store. This will ensure\n    // that when we re-render, the data is already\n    // cached and we don't suspend\n    fetchQuery(environment, AppQuery, variables)\n      .subscribe({\n        complete: () => {\n          setIsRefreshing(false);\n\n          // *After* the query has been fetched, we update\n          // our state to re-render with the new fetchKey\n          // and fetchPolicy.\n          // At this point the data for the query should\n          // be cached, so we use the 'store-only'\n          // fetchPolicy to avoid suspending.\n          setRefreshedQueryOptions(prev => ({\n            fetchKey: (prev?.fetchKey ?? 0) + 1,\n            fetchPolicy: 'store-only',\n          }));\n        }\n        error: () => {\n          setIsRefreshing(false);\n        }\n      });\n  }, [/* ... */]);\n\n  return (\n    <React.Suspense fallback=\"Loading query...\">\n      <MainContent\n        isRefreshing={isRefreshing}\n        refresh={refresh}\n        queryOptions={refreshedQueryOptions ?? {}}\n        variables={variables}\n      />\n    </React.Suspense>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: GraphQL Query with Interface Fragment Spread\nDESCRIPTION: Example showing a fragment spread on an interface within a query.  It demonstrates abstract type refinement by querying a field (`can_viewer_message`) defined on a concrete type implementing an interface (`Actor`).\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/glossary/glossary.md#2025-04-18_snippet_9\n\nLANGUAGE: graphql\nCODE:\n```\nquery MyQuery { viewer { account_user { ...on Actor { can_viewer_message } } } }\n```\n\n----------------------------------------\n\nTITLE: Enhanced Actor Fragment with Type Refinements\nDESCRIPTION: Extended GraphQL fragment using type refinements to select type-specific fields for both Organization and Person types.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/tutorial/interfaces-polymorphism.md#2025-04-18_snippet_4\n\nLANGUAGE: graphql\nCODE:\n```\nfragment PosterDetailsHovercardContentsBodyFragment on Actor {\n  name\n  joined\n  profilePicture {\n    ...ImageFragment\n  }\n  ... on Organization {\n    organizationKind\n  }\n  ... on Person {\n    location {\n      name\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Fragment Data Type Emission in Relay with TypeScript\nDESCRIPTION: This snippet shows how Relay emits type information for fragment data in a component using TypeScript. The `ExampleFragmentComponent_artist$data` type defines the shape of the data expected by the `useFragment` hook. The example emphasizes how the component's props interface is derived from the generated fragment key.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/guides/type-emission.md#2025-04-18_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * export type ExampleFragmentComponent_artist$data = {\n *   readonly name: string\n * }\n *\n * export type ExampleFragmentComponent_artist$key = { ... }\n */\n\nimport { ExampleFragmentComponent_artist$key } from \"__generated__/ExampleFragmentComponent_artist.graphql\"\n\ninterface Props {\n  artist: ExampleFragmentComponent_artist$key,\n};\n\nexport default ExampleFragmentComponent(props: Props) {\n  // data is of type ExampleFragmentComponent_artist$data\n  const data = useFragment(\n    graphql`\n      fragment ExampleFragmentComponent_artist on Artist {\n        biography\n      }\n    `,\n    props.artist,\n  );\n\n  return <div>About the artist: {props.artist.biography}</div>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Story Type in GraphQL Schema\nDESCRIPTION: GraphQL schema definition for a Story type showing basic scalar fields and relationships to other types.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/tutorial/interfaces-polymorphism.md#2025-04-18_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\ntype Story {\n  id: ID!\n  title: String\n  summary: String\n  createdAt: Date\n  poster: Actor\n  image: Image\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing GraphQL Query with New Field in Relay\nDESCRIPTION: Demonstrates how to modify a GraphQL query to add a new field (createdAt) for story timestamp functionality.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/tutorial/fragments-1.md#2025-04-18_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nconst NewsfeedQuery = graphql`\n  query NewsfeedQuery {\n    topStory {\n      title\n      summary\n      createdAt\n      poster {\n        name\n        profilePicture {\n          url\n        }\n      }\n      image {\n        url\n      }\n    }\n  }\n`;\n```\n\n----------------------------------------\n\nTITLE: Modifying fetch implementation for persisted queries\nDESCRIPTION: This snippet illustrates the necessary modifications to the fetch implementation for sending persisted query IDs in client requests attached to the POST body.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/guides/persisted-queries.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nfunction fetchQuery(operation, variables) {\n  return fetch('/graphql', {\n    method: 'POST',\n    headers: {\n      'content-type': 'application/json'\n    },\n    body: JSON.stringify({\n      doc_id: operation.id, // NOTE: pass md5 hash to the server\n      // query: operation.text, // this is now obsolete because text is null\n      variables,\n    }),\n  }).then(response => {\n    return response.json();\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Using @relay(plural) Directive in Fragment Definition\nDESCRIPTION: Example showing how to define and use a plural fragment with the @relay directive.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/api-reference/graphql/graphql-directives.md#2025-04-18_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// Plural fragment definition\ngraphql`\n  fragment TodoItems_items on TodoItem @relay(plural: true) {\n    id\n    text\n  }\n`;\n\n// Plural fragment usage: note the parent type is a list of items (`TodoItem[]`)\nfragment TodoApp_app on App {\n  items {\n    // parent type is a list here\n    ...TodoItem_items\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Connection Using ConnectionHandler in JavaScript\nDESCRIPTION: Describes how to obtain a connection using `getConnection` in ConnectionHandler, which extracts a RecordProxy for a connection identified by a key and optional filters.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/api-reference/relay-runtime/store.md#2025-04-18_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nimport {ConnectionHandler} from 'relay-runtime';\n\nconst user = store.get(userID);\nconst friends = ConnectionHandler.getConnection(\n user,                        // parent record\n 'FriendsFragment_friends',   // connection key\n {orderby: 'firstname'}       // 'filters' that is used to identify the connection\n);\nconst edges = friends.getLinkedRecords('edges');\n```\n\n----------------------------------------\n\nTITLE: Using Suspense for Single Content Area in React\nDESCRIPTION: Example showing how to wrap a main content area with Suspense to handle loading states. This demonstrates the pattern of displaying a loading glimmer while the main content is being loaded.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v13.0.0/guided-tour/rendering/loading-states.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * App.react.js\n */\n\nconst React = require('React');\nconst {Suspense} = require('React');\n\nfunction App() {\n  return (\n    // LoadingGlimmer is rendered via the Suspense fallback\n    <Suspense fallback={<LoadingGlimmer />}>\n      <MainContent /> {/* MainContent may suspend */}\n    </Suspense>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Relay Query Data Typing with Flow\nDESCRIPTION: This code snippet illustrates how Relay emits type information for the data returned by a query using Flow. The `ExampleQuery$data` type represents the shape of the data returned by the `useLazyLoadQuery` hook, specifically the `artist` field with a potentially null `name` property. This allows for type-safe access to the query results.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v13.0.0/guides/type-emission.md#2025-04-18_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n/**\n * export type ExampleQuery$variables = {\n *   +artistID: string,\n * }\n * export type ExampleQuery$data = {\n *   +artist: {\n *     +name: ?string,\n *   }\n * }\n * export type ExampleQuery = {\n *   +variables: ExampleQuery$variables,\n *   +response: ExampleQuery$data,\n * }\n */\n\n// data is of type ExampleQuery$data\nconst data = useLazyLoadQuery(\n  graphql`\n    query ExampleQuery($artistID: ID!) {\n      artist(id: $artistID) {\n        name\n      }\n    }\n  `,\n  {artistID: 'banksy'},\n);\n\nreturn props.artist && <div>{props.artist.name} is great!</div>\n```\n\n----------------------------------------\n\nTITLE: Relay Fragment Data Typing with TypeScript\nDESCRIPTION: This code snippet shows how Relay emits type information for fragment data using TypeScript. The `ExampleFragmentComponent_artist$data` type, which would be located in a generated file, describes the shape of the data expected by the `useFragment` hook within the `ExampleFragmentComponent`. This ensures type safety when accessing data from the fragment in the component, with strong typing for the props.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v13.0.0/guides/type-emission.md#2025-04-18_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\n/**\n * export type ExampleFragmentComponent_artist$data = {\n *   readonly name: string\n * }\n *\n * export type ExampleFragmentComponent_artist$key = { ... }\n */\n\nimport { ExampleFragmentComponent_artist$key } from \"__generated__/ExampleFragmentComponent_artist.graphql\"\n\ninterface Props {\n  artist: ExampleFragmentComponent_artist$key,\n};\n\nexport default ExampleFragmentComponent(props: Props) {\n  // data is of type ExampleFragmentComponent_artist$data\n  const data = useFragment(\n    graphql`\n      fragment ExampleFragmentComponent_artist on Artist {\n        biography\n      }\n    `,\n    props.artist,\n  );\n\n  return <div>About the artist: {props.artist.biography}</div>;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Network Layer with subscriptions-transport-ws for GraphQL Subscriptions in JavaScript\nDESCRIPTION: This snippet shows an alternative configuration of the Network Layer using the legacy 'subscriptions-transport-ws' library for handling GraphQL subscriptions. It creates a SubscriptionClient and defines a subscribe function that converts the library's observable to Relay's Observable type.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/guided-tour/updating-data/graphql-subscriptions.md#2025-04-18_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport {\n    ...\n    Network,\n    Observable\n} from 'relay-runtime';\nimport { SubscriptionClient } from 'subscriptions-transport-ws';\n\nconst subscriptionClient = new SubscriptionClient('ws://localhost:3000', {\n  reconnect: true,\n});\n\nconst subscribe = (request, variables) => {\n  const subscribeObservable = subscriptionClient.request({\n    query: request.text,\n    operationName: request.name,\n    variables,\n  });\n  // Important: Convert subscriptions-transport-ws observable type to Relay's\n  return Observable.from(subscribeObservable);\n};\n\nconst network = Network.create(fetchQuery, subscribe);\n```\n\n----------------------------------------\n\nTITLE: Implementing Server Type Return in Relay Resolver\nDESCRIPTION: Example of a Relay Resolver that returns a reference to a server-defined Node type. The resolver returns the ID of the User that authored a Post.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/guides/relay-resolvers/return-types.md#2025-04-18_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport {DataID} from 'relay-runtime';\n/**\n * @RelayResolver Post.author: User\n */\nexport function author(post: PostModel): DataID {\n  return post.authorId;\n}\n```\n\n----------------------------------------\n\nTITLE: Generated ConcreteRequest With Persisted Queries\nDESCRIPTION: Example of a generated ConcreteRequest object with persisted queries enabled. The query text is replaced with null and an MD5 hash of the query is used as the id.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/guides/persisted-queries.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst node/*: ConcreteRequest*/ = (function(){\n//... excluded for brevity\nreturn {\n  \"kind\": \"Request\",\n  \"operationKind\": \"query\",\n  \"name\": \"TodoItemRefetchQuery\",\n  \"id\": \"3be4abb81fa595e25eb725b2c6a87508\", // NOTE: id is now an md5 hash\n  // of the query text\n  \"text\": null, // NOTE: text is null now\n  //... excluded for brevity\n};\n})();\n```\n\n----------------------------------------\n\nTITLE: Using useClientQuery Hook in React\nDESCRIPTION: Example React component demonstrating how to use useClientQuery hook to read client-only fields. Shows hook usage with GraphQL query and variables, and how to render the retrieved data.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/api-reference/hooks/use-client-query.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst React = require('React');\n\nconst {graphql, useClientQuery} = require('react-relay');\n\nfunction ClientQueryComponent() {\n  const data = useClientQuery(\n    graphql`\n      query ClientQueryComponentQuery {\n        client_field\n      }\n    `,\n    {}, // variables\n  );\n\n  return (\n    <div>{data.client_field}</div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Returning Scalar Types in Relay Resolver (TypeScript)\nDESCRIPTION: Demonstrates how to return a boolean scalar value from a Relay Resolver function. The resolver checks if a post is valid based on its content and author.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/guides/relay-resolvers/return-types.md#2025-04-18_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n/**\n * @RelayResolver Post.isValid: Boolean\n */\nexport function isValid(post: PostModel): boolean {\n  return post.content !== \"\" && post.author != null;\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Relay Refetch Components\nDESCRIPTION: Shows how to test refetchable components by triggering refetch operations and verifying the results.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/guides/testing-relay-components.md#2025-04-18_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\ntest('Refetch Container', () => {\n  const environment = createMockEnvironment();\n  const TestRenderer = () => {\n    const data = useLazyLoadQuery(\n      graphql`\n        query TestQuery @relay_test_operation {\n          myData: node(id: \"test-id\") {\n            # Spread the pagination fragment you want to test here\n            ...MyRefetchableFragment\n          }\n        }\n      `,\n      {},\n    );\n    return <MyRefetchContainer data={data.myData} />\n  };\n\n  const renderer = ReactTestRenderer.create(\n    <RelayEnvironmentProvider environment={environment}>\n      <Suspense fallback=\"Loading...\">\n        <TestRenderer />\n      </Suspense>\n    </RelayEnvironmentProvider>\n  );\n\n  ReactTestRenderer.act(() => {\n    environment.mock.resolveMostRecentOperation(operation =>\n      MockPayloadGenerator.generate(operation),\n    );\n  });\n\n  const refetchButton = renderer.root.find(node => node.props['data-testid'] === 'refetch');\n\n  refetchButton.props.onClick();\n\n  ReactTestRenderer.act(() => {\n    environment.mock.resolveMostRecentOperation(operation =>\n      MockPayloadGenerator.generate(operation, {\n      }),\n    );\n  });\n\n  expect(renderer).toMatchSnapshot();\n});\n```\n\n----------------------------------------\n\nTITLE: Call commitMutation to Post Comment in Relay\nDESCRIPTION: This snippet shows how to use the `useMutation` hook to get access to the `commitMutation` callback and call it within the `onPost` function. It resets the UI text input, constructs the mutation variables (including the story ID and comment text), and then commits the mutation.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/tutorial/mutations-updates.md#2025-04-18_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nfunction StoryCommentsComposer({story}) {\n  const data = useFragment(StoryCommentsComposerFragment, story);\n  const [text, setText] = useState('');\n  // change-line\n  const [commitMutation, isMutationInFlight] = useMutation(StoryCommentsComposerPostMutation);\n  function onPost() {\n    // change\n    setText(''); // Reset the UI\n    commitMutation({\n      variables: {\n        id: data.id,\n        text,\n      },\n    })\n    // end-change\n  }\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Including Fragments with @arguments in Relay Queries\nDESCRIPTION: Example of a component using @arguments to provide values to fragments with local variables. It shows how different instances of the same fragment can receive different argument values.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/guided-tour/rendering/variables.md#2025-04-18_snippet_6\n\nLANGUAGE: js\nCODE:\n```\n/**\n * Include fragment using @arguments\n */\n\nfunction TaskList(props) {\n  const data = usePreloadedQuery(\n    graphql`\n      query TaskListQuery {\n        todays_tasks {\n          ...TaskView_task @arguments(showDetailedResults: true)\n        }\n        tomorrows_tasks {\n          ...TaskView_task @arguments(showDetailedResults: false)\n        }\n      }\n    `,\n    props.queryRef,\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Manually Removing Edges from a Connection\nDESCRIPTION: Shows how to manually remove an edge from a connection using ConnectionHandler.deleteNode in an updater function by providing the node ID to delete.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/guided-tour/list-data/updating-connections.md#2025-04-18_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nconst {ConnectionHandler} = require('RelayModern');\n\nfunction updater(store: RecordSourceSelectorProxy) {\n  const storyRecord = store.get(storyID);\n  const connectionRecord = ConnectionHandler.getConnection(\n    storyRecord,\n    'StoryComponent_story_comments_connection',\n  );\n\n  // Remove edge from the connection, given the ID of the node\n  ConnectionHandler.deleteNode(\n    connectionRecord,\n    commentIDToDelete,\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Connection ID using __id\nDESCRIPTION: Accesses a connection record's ID via the __id field in a Relay fragment. Uses the useFragment hook from 'react-relay'.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v13.0.0/guided-tour/list-data/updating-connections.md#2025-04-18_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst fragmentData = useFragment(\n  graphql`\n    fragment StoryComponent_story on Story {\n      comments @connection(key: \"StoryComponent_story_comments_connection\") {\n        # Query for the __id field\n        __id\n\n        # ...\n      }\n    }\n  `,\n  props.story,\n);\n\n// Get the connection record id\nconst connectionID = fragmentData?.comments?.__id;\n```\n\n----------------------------------------\n\nTITLE: Extending Existing Types in GraphQL for Relay\nDESCRIPTION: Demonstrates how to extend an existing type in GraphQL by adding a new field to the Comment type. This allows for client-side management of additional data not present in the server schema.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/guided-tour/updating-data/client-only-data.md#2025-04-18_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nextend type Comment {\n  is_new_comment: Boolean\n}\n```\n\n----------------------------------------\n\nTITLE: Differences with PaginationContainer - JavaScript\nDESCRIPTION: This section outlines the differences between the new pagination functionality and the old `PaginationContainer` approach, emphasizing automatic query generation, bi-directional support, and the removal of certain configuration functions that previously complicated the pagination setup.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/api-reference/hooks/use-pagination-fragment.md#2025-04-18_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n* A pagination query no longer needs to be specified in this api, since it will be automatically generated by Relay by using a `@refetchable` fragment.\n* This api supports simultaneous bi-directional pagination out of the box.\n* This api no longer requires passing a `getVariables` or `getFragmentVariables` configuration functions, like the `PaginationContainer` does.\n    * This implies that pagination no longer has a between `variables` and `fragmentVariables`, which were previously vaguely defined concepts. Pagination requests will always use the same variables that were originally used to fetch the connection, *except* pagination variables (which need to change in order to perform pagination); changing variables other than the pagination variables during pagination doesn't make sense, since that'd mean we'd be querying for a different connection.\n* This api no longer takes additional configuration like `direction` or `getConnectionFromProps` function (like Pagination Container does). These values will be automatically determined by Relay.\n* Refetching no longer has a distinction between `variables` and `fragmentVariables`, which were previously vaguely defined concepts. Refetching will always correctly refetch and render the fragment with the variables you provide (any variables omitted in the input will fallback to using the original values in the parent query).\n* Refetching will unequivocally update the component, which was not always true when calling `refetchConnection` from `PaginationContainer` (it would depend on what you were querying for in the refetch query and if your fragment was defined on the right object type).\n```\n\n----------------------------------------\n\nTITLE: Story Comments Section Implementation\nDESCRIPTION: Complete implementation of the StoryCommentsSection component showing pagination setup with Connection pattern and Load More functionality\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/tutorial/connections-pagination.md#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport LoadMoreCommentsButton from \"./LoadMoreCommentsButton\";\n\nconst StoryCommentsSectionFragment = graphql`\n fragment StoryCommentsSectionFragment on Story {\n  comments(first: 3) {\n    edges {\n      node {\n        ...CommentFragment\n      }\n    }\n    pageInfo {\n      hasNextPage\n    }\n  }\n };\n`;\n\nfunction StoryCommentsSection({story}) {\n  const data = useFragment(StoryCommentsSectionFragment, story);\n  const onLoadMore = () => {/* TODO */};\n  return (\n    <>\n      {data.comments.edges.map(commentEdge =>\n        <Comment comment={commentEdge.node} />\n      )}\n      {data.comments.pageInfo.hasNextPage && (\n        <LoadMoreCommentsButton onClick={onLoadMore} />\n      )}\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using Fetch Policies with Relay's useQueryLoader\nDESCRIPTION: Demonstrates how to provide a fetch policy when loading a query with useQueryLoader. The example shows setting a 'store-or-network' policy when selecting a tab, which will use cached data if available or fetch from the network if needed.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v13.0.0/guided-tour/reusing-cached-data/fetch-policies.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst React = require('React');\nconst {graphql} = require('react-relay');\n\nfunction AppTabs() {\n  const [\n    queryRef,\n    loadQuery,\n  ] = useQueryLoader<HomeTabQueryType>(HomeTabQuery);\n\n  const onSelectHomeTab = () => {\n    loadQuery({id: '4'}, {fetchPolicy: 'store-or-network'});\n  }\n\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Query Cache Expiration Time\nDESCRIPTION: Setting custom expiration time for query cache to control data staleness and network request behavior\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/guided-tour/reusing-cached-data/staleness-of-data.md#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst store = new Store(source, {queryCacheExpirationTime: 5 * 60 * 1000 });\n```\n\n----------------------------------------\n\nTITLE: Initializing GraphQL Subscription with React Relay\nDESCRIPTION: Demonstrates how to use useSubscription hook to subscribe to a GraphQL subscription with proper memoization and configuration\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/api-reference/hooks/use-subscription.md#2025-04-18_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nsubscription UserDataSubscription($input: InputData!) {\n  # ...\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport {graphql, useSubscription} from 'react-relay';\nimport {useMemo} from 'react';\n\nconst subscription = graphql`\n  subscription UserDataSubscription($input: InputData!) {\n    # ...\n  }`;\n\nfunction UserComponent({ id }) {\n  const config = useMemo(() => ({\n    variables: {id},\n    subscription,\n  }), [id, subscription]);\n\n  useSubscription(config);\n\n  return (/* ... */);\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Generated Types\nDESCRIPTION: Examples showing how to import generated Flow types and GraphQL artifacts.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/guides/compiler.md#2025-04-18_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport type {DictionaryComponent_word} from './__generated__/DictionaryComponent_word.graphql';\n\n// Direct import example\nimport DictionaryComponent_word from './__generated__/DictionaryComponent_word.graphql';\n```\n\n----------------------------------------\n\nTITLE: Updating Story Component with Timestamp\nDESCRIPTION: TypeScript React component modification to display story timestamp using newly added createdAt field\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/tutorial/fragments-1.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport Timestamp from './Timestamp';\n\ntype Props = {\n  story: {\n    createdAt: string;\n    ...\n  };\n};\n\nexport default function Story({story}: Props) {\n  return (\n    <Card>\n      <PosterByline poster={story.poster} />\n      <Heading>{story.title}</Heading>\n      <Timestamp time={story.createdAt} />\n      <Image image={story.image} />\n      <StorySummary summary={story.summary} />\n    </Card>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using waitForFragmentData with React and Relay\nDESCRIPTION: Example demonstrating how to use waitForFragmentData to defer fetching data needed in an event handler. The component renders a user's name immediately while deferring age-related data until a button click.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/api-reference/relay-runtime/wait-for-fragment-data.md#2025-04-18_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useCallback } from \"react\";\nimport { useFragment } from \"react-relay\";\nimport { graphql } from \"relay-runtime\";\nimport { waitForFragmentData } from \"relay-runtime/experimental\";\n\nfunction MyComponent({ key }) {\n  const user = useFragment(\n    graphql`\n      fragment UserFragment on User {\n        name\n        # Page load can complete before this data has streamed in from the server.\n        ...EventHandlerFragment @defer\n      }\n    `,\n    key,\n  );\n\n  const onClick = useCallback(async () => {\n    // Once the user clicks, we may need to wait for the data to finish loading.\n    const userData = await waitForFragmentData(\n      graphql`\n        fragment EventHandlerFragment on User {\n          age\n        }\n      `,\n      user,\n    );\n\n    if (userData.age < 10) {\n      alert(\"Hello kiddo!\");\n    } else if (userData.age < 18) {\n      alert(\"Hello young person!\");\n    } else {\n      alert(\"Hello adult person!\");\n    }\n  }, [user]);\n\n  return (\n    <div>\n      My name is {user.name}\n      <button onClick={onClick}>Greet</button>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Parent Fragment Component in React and Relay\nDESCRIPTION: This snippet demonstrates how to create a parent fragment component that includes a child fragment. It shows how to compose fragments and pass fragment references to child components.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/guided-tour/rendering/fragments.md#2025-04-18_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * UserComponent.react.js\n *\n * Parent Fragment Component\n */\n\nimport type {UserComponent_user$key} from 'UserComponent_user.graphql';\n\nconst React = require('React');\nconst {graphql, useFragment} = require('react-relay');\n\nconst UsernameSection = require('./UsernameSection.react');\n\ntype Props = {\n  user: UserComponent_user$key,\n};\n\nfunction UserComponent(props: Props) {\n  const user = useFragment(\n    graphql`\n      fragment UserComponent_user on User {\n        name\n        age\n        profile_picture(scale: 2) {\n          uri\n        }\n\n        # Include child fragment:\n        ...UsernameSection_user\n      }\n    `,\n    props.user,\n  );\n\n  return (\n    <>\n      <h1>{user.name}</h1>\n      <div>\n        <img src={user.profile_picture?.uri} />\n        {user.age}\n\n        {/* Render child component, passing the _fragment reference_: */}\n        <UsernameSection user={user} />\n      </div>\n    </>\n  );\n}\n\nmodule.exports = UserComponent;\n```\n\n----------------------------------------\n\nTITLE: Assigning to Interface with Validation in Relay\nDESCRIPTION: Example of assigning to an interface field when the source is not guaranteed to implement that interface, using a validator function for type checking and proper assignment.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/guided-tour/updating-data/imperatively-modifying-linked-fields.md#2025-04-18_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport {validate as validateActor} from 'Foo_actor.graphql';\n\ngraphql`\n  fragment Foo_actor on Actor @assignable {\n    __typename\n  }\n`;\n\nconst data = useFragment(graphql`\n  fragment Foo_query on Query {\n    node(id: \"4\") {\n      ...Foo_actor\n    }\n  }\n`, queryRef);\n\nconst environment = useRelayEnvironment();\nconst onClick = () => {\n  commitLocalUpdate(environment, store => {\n    const {updatableData} = store.readUpdatableQuery(\n      graphql`\n        query FooUpdatableQuery @updatable {\n          viewer {\n            actor {\n              ...Foo_actor\n            }\n          }\n        }\n      `,\n      {}\n    );\n\n    if (updatableData.viewer != null && data.node != null) {\n      const validActor = validateActor(data.node);\n      if (validActor !== false) {\n        updatableData.viewer.actor = validActor;\n      }\n    }\n  });\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Story Fragment in Relay\nDESCRIPTION: Creation of a GraphQL fragment for the Story component\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/tutorial/fragments-1.md#2025-04-18_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { graphql } from 'relay-runtime';\n\nconst StoryFragment = graphql`\n  fragment StoryFragment on Story {\n    title\n    summary\n    createdAt\n    poster {\n      name\n      profilePicture {\n        url\n      }\n    }\n    thumbnail {\n      url\n    }\n  }\n`;\n```\n\n----------------------------------------\n\nTITLE: Basic HTTP API Request Example\nDESCRIPTION: Demonstrates a traditional HTTP GET request and response format for retrieving person data.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/tutorial/graphql.md#2025-04-18_snippet_0\n\nLANGUAGE: json\nCODE:\n```\nRequest:\nGET /person?id=24601\n\nResponse:\n{\"id\": \"24601\", \"name\": \"Jean Valjean\", \"age\": 64, \"occupation\": \"Mayor\"}\n```\n\n----------------------------------------\n\nTITLE: JavaScript: usePreloadedQuery Hook Example\nDESCRIPTION: This JavaScript code demonstrates the usage of `usePreloadedQuery` hook with a GraphQL query to fetch viewer data and access the `account_user` field. It shows how to integrate a preloaded query within a React component using Relay.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/glossary/glossary.md#2025-04-18_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst queryData = usePreloadedQuery(\n  graphql`query ComponentQuery { viewer { account_user { ...Component_name } } }`,\n  {},\n);\n```\n\n----------------------------------------\n\nTITLE: Creating a Query That Uses Fragments\nDESCRIPTION: Example of a query file that defines a GraphQL query which spreads a fragment defined elsewhere. This demonstrates how queries can reuse fragments from components.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v13.0.0/guides/compiler.md#2025-04-18_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst DictionaryQuery = graphql`\n  query DictionaryQuery {\n    dictionary {\n      ...DictionaryComponent_word\n    }\n  }\n`\n```\n\n----------------------------------------\n\nTITLE: Declaring GraphQL Mutations in Relay\nDESCRIPTION: Example of declaring a GraphQL mutation using Relay's graphql tag. This creates a mutation that can be used with Relay's mutation APIs.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/guided-tour/updating-data/graphql-mutations.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst {graphql} = require('react-relay');\n\nconst feedbackLikeMutation = graphql`\n  mutation FeedbackLikeMutation($input: FeedbackLikeData!) {\n    feedback_like(data: $input) {\n      feedback {\n        id\n        viewer_does_like\n        like_count\n      }\n    }\n  }\n`;\n```\n\n----------------------------------------\n\nTITLE: Subscribing to Invalidation State in React Component\nDESCRIPTION: Example of using useSubscribeToInvalidationState hook to react to data invalidation in a React component. Allows immediate response when specific records become stale.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/guided-tour/reusing-cached-data/staleness-of-data.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nfunction ProfilePage(props) {\n  // Example of querying data for the current page for a given user\n  const data = usePreloadedQuery(\n    graphql`...`,\n    props.preloadedQuery,\n  )\n\n  // Here we subscribe to changes in invalidation state for the given user ID.\n  // Whenever the user with that ID is marked as stale, the provided callback will\n  // be executed\n  useSubscribeToInvalidationState([props.userID], () => {\n    // Here we can do things like:\n    // - re-evaluate the query by passing a new preloadedQuery to usePreloadedQuery.\n    // - imperatively refetch any data\n    // - render a loading spinner or gray out the page to indicate that refetch\n    //   is happening.\n  })\n\n  return (...);\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Relay Resolver Syntax in JavaScript\nDESCRIPTION: Basic syntax for defining a Relay Resolver function with a special docblock annotation. This shows the format where TypeName and fieldName are specified along with argument and return types.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/guides/relay-resolvers.md#2025-04-18_snippet_0\n\nLANGUAGE: js\nCODE:\n```\n/**\n* @RelayResolver TypeName.fieldName(arg1: ArgTypeName): FieldTypeName\n*/\n```\n\n----------------------------------------\n\nTITLE: Declaring a Fragment with a Connection in Relay\nDESCRIPTION: This code snippet demonstrates how to declare a GraphQL fragment with a @connection directive that can be used to track and update connection data in Relay.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/guided-tour/list-data/updating-connections.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst {graphql} = require('react-relay');\n\nconst storyFragment = graphql`\n  fragment StoryComponent_story on Story {\n    comments @connection(key: \"StoryComponent_story_comments_connection\") {\n      nodes {\n        body {\n          text\n        }\n      }\n    }\n  }\n`;\n```\n\n----------------------------------------\n\nTITLE: Implementing Streaming Pagination with usePaginationFragment in Relay\nDESCRIPTION: This code snippet demonstrates how to use the usePaginationFragment hook with the @stream_connection directive to implement streaming pagination. It fetches a connection of friends and allows for incremental loading of items as they become available from the server.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/guided-tour/list-data/streaming-pagination.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport type {FriendsListPaginationQuery} from 'FriendsListPaginationQuery.graphql';\nimport type {FriendsListComponent_user$key} from 'FriendsList_user.graphql';\n\nconst React = require('React');\n\nconst {graphql, usePaginationFragment} = require('react-relay');\n\ntype Props = {\n  user: FriendsListComponent_user$key,\n};\n\nfunction FriendsListComponent(props: Props) {\n  // ...\n\n  const {\n    data,\n    loadNext,\n    hasNext,\n  } = usePaginationFragment<FriendsListPaginationQuery, _>(\n    graphql`\n      fragment FriendsListComponent_user on User\n      @refetchable(queryName: \"FriendsListPaginationQuery\") {\n        name\n        friends(first: $count, after: $cursor)\n        @stream_connection(key: \"FriendsList_user_friends\", initial_count: 2,) {\n          edges {\n            node {\n              name\n              age\n            }\n          }\n        }\n      }\n    `,\n    props.user,\n  );\n\n  return (...);\n}\n\nmodule.exports = FriendsListComponent;\n```\n\n----------------------------------------\n\nTITLE: Using hasNext for Conditional Rendering in Relay Pagination\nDESCRIPTION: This snippet shows how to use the hasNext boolean from usePaginationFragment to conditionally render a 'Load more' button based on whether there are more items available in the connection.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/guided-tour/list-data/pagination.md#2025-04-18_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport type {FriendsListPaginationQuery} from 'FriendsListPaginationQuery.graphql';\nimport type {FriendsListComponent_user$key} from 'FriendsList_user.graphql';\n\nconst React = require('React');\nconst {Suspense} = require('React');\n\nconst {graphql, usePaginationFragment} = require('react-relay');\n\ntype Props = {\n  user: FriendsListComponent_user$key,\n};\n\nfunction FriendsListComponent(props: Props) {\n  // ...\n  const {\n    data,\n    loadNext,\n    hasNext,\n  } = usePaginationFragment<FriendsListPaginationQuery, _>(\n    graphql`...`,\n    props.user,\n  );\n\n  return (\n    <>\n      <h1>Friends of {data.name}:</h1>\n      {/* ... */}\n\n      {/* Only render button if there are more friends to load in the list */}\n      {hasNext ? (\n        <Button\n          onClick={/* ... */}>\n          Load more friends\n        </Button>\n      ) : null}\n    </>\n  );\n}\n\nmodule.exports = FriendsListComponent;\n```\n\n----------------------------------------\n\nTITLE: Defining Plural Fragments with @relay Directive\nDESCRIPTION: The @relay(plural: true) directive indicates that a fragment container expects a list of items instead of a single item. This example shows both the plural fragment definition and its usage in a parent fragment.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/api-reference/graphql/graphql-directives.md#2025-04-18_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// Plural fragment definition\ngraphql`\n  fragment TodoItems_items on TodoItem @relay(plural: true) {\n    id\n    text\n  }\n`;\n\n// Plural fragment usage: note the parent type is a list of items (`TodoItem[]`)\nfragment TodoApp_app on App {\n  items {\n    // parent type is a list here\n    ...TodoItem_items\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Exporting GraphQL Query for Parent Component Access\nDESCRIPTION: Exports the GraphQL query from the child component so that the parent component can access it for preloading.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/tutorial/queries-2.md#2025-04-18_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nexport const PosterDetailsHovercardContentsQuery = graphql`...`\n```\n\n----------------------------------------\n\nTITLE: Configuring Mock Query Resolver for Relay Tests\nDESCRIPTION: Shows how to configure a mock query resolver using MockPayloadGenerator to return specific GraphQL type data for testing purposes.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/guides/testing-relay-with-preloaded-queries.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nreturn MockPayloadGenerator.generate(operation, {\n  CurrencyAmount() {\n    return {\n      formatted_amount: \"response_value\"\n    };\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Refreshing Components with Fragments in Mutations\nDESCRIPTION: GraphQL mutation that spreads component fragments to ensure components are refreshed with the latest data after a mutation completes, which is more maintainable than manually selecting fields.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/guided-tour/updating-data/graphql-mutations.md#2025-04-18_snippet_4\n\nLANGUAGE: graphql\nCODE:\n```\nmutation FeedbackLikeMutation($input: FeedbackLikeData!) {\n  feedback_like(data: $input) {\n    feedback {\n      ...FeedbackDisplay_feedback\n      ...FeedbackDetail_feedback\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Client-Side Note Type in GraphQL\nDESCRIPTION: Creates a new GraphQL type called Note with ID, title, and body fields for client-side data management.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/guides/client-schema-extensions.md#2025-04-18_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\ntype Note {\n  id: ID!\n  title: String\n  body: String\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Error Boundary in React\nDESCRIPTION: Basic implementation of a React Error Boundary component that catches rendering errors and updates component state.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/guided-tour/rendering/error-states.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst React = require('React');\n\ntype State = {error: ?Error};\n\nclass ErrorBoundary extends React.Component<Props, State> {\n  static getDerivedStateFromError(error): State {\n    // Set some state derived from the caught error\n    return {error: error};\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Disabled State to Like Button During Mutation\nDESCRIPTION: This code adds a disabled state to the LikeButton component while the mutation is in flight, improving user feedback during the mutation process.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/tutorial/mutations-updates.md#2025-04-18_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\n<LikeButton\n  value={data.doesViewerLike}\n  onChange={onLikeButtonClicked}\n  // change-line\n  disabled={isMutationInFlight}\n/>\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Relay Network Layer Implementation with fetch\nDESCRIPTION: This code demonstrates how to create a Relay Environment with a custom network layer. It defines a fetchQuery function that sends GraphQL operations to a server via HTTP POST requests and creates a network layer using Network.create(). The example shows a complete setup including store initialization.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/guides/network-layer.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport {\n  Environment,\n  Network,\n  RecordSource,\n  Store,\n} from 'relay-runtime';\n\n// Define a function that fetches the results of an operation (query/mutation/etc)\n// and returns its results as a Promise:\nfunction fetchQuery(\n  operation,\n  variables,\n  cacheConfig,\n  uploadables,\n) {\n  return fetch('/graphql', {\n    method: 'POST',\n    headers: {\n      // Add authentication and other headers here\n      'content-type': 'application/json'\n    },\n    body: JSON.stringify({\n      query: operation.text, // GraphQL text from input\n      variables,\n    }),\n  }).then(response => {\n    return response.json();\n  });\n}\n\n// Create a network layer from the fetch function\nconst network = Network.create(fetchQuery);\nconst store = new Store(new RecordSource())\n\nconst environment = new Environment({\n  network,\n  store\n  // ... other options\n});\n\nexport default environment;\n```\n\n----------------------------------------\n\nTITLE: Updating Story Fragment to Include Comments Section\nDESCRIPTION: Modify the Story fragment to spread the StoryCommentsSectionFragment, enabling fragment composition and comment data retrieval\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/tutorial/connections-pagination.md#2025-04-18_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\nconst StoryFragment = graphql`\n  fragment StoryFragment on Story {\n    // ... as before\n    ...StoryCommentsSectionFragment\n  }\n`;\n```\n\n----------------------------------------\n\nTITLE: Specifying Connection Identity Filters in Relay GraphQL\nDESCRIPTION: This snippet shows how to specify which filters should be used for connection identity when declaring a @connection. It demonstrates excluding the 'language' filter from the connection identity.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v13.0.0/guided-tour/list-data/updating-connections.md#2025-04-18_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nconst {graphql} = require('relay-runtime');\n\nconst storyFragment = graphql`\n  fragment StoryComponent_story on Story {\n    comments(\n      order_by: $orderBy\n      filter_mode: $filterMode\n      language: $language\n    )\n      @connection(\n        key: \"StoryComponent_story_comments_connection\"\n        filters: [\"order_by\", \"filter_mode\"]\n      ) {\n      edges {\n        nodes {\n          body {\n            text\n          }\n        }\n      }\n    }\n  }\n`;\n```\n\n----------------------------------------\n\nTITLE: Using usePaginationFragment Hook for Load More Functionality\nDESCRIPTION: Shows how to implement load more functionality using the usePaginationFragment hook from Relay.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/tutorial/connections-pagination.md#2025-04-18_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst {data, loadNext} = usePaginationFragment(StoryCommentsSectionFragment, story);\nconst onLoadMore = () => loadNext(3);\n```\n\n----------------------------------------\n\nTITLE: GraphQL Fragment with Default Argument Values\nDESCRIPTION: Shows how to define a fragment in Relay that includes default values for arguments via @argumentDefinitions. The showDetailedResults argument defaults to true if not provided.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/guided-tour/rendering/variables.md#2025-04-18_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * Declare a fragment that accepts arguments with default values\n */\n\nfunction TaskView(props) {\n  const data = useFragment(\n    graphql`\n      fragment TaskView_task on Task\n        @argumentDefinitions(showDetailedResults: {type: \"Boolean!\", defaultValue: true}) {\n        name\n        is_completed\n        ... @include(if: $showDetailedResults) {\n          description\n        }\n      }\n    `,\n    props.task,\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Defining GraphQL Fragment for Actor Interface\nDESCRIPTION: This snippet shows a GraphQL fragment defined on the Actor interface, selecting common fields.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/tutorial/interfaces-polymorphism.md#2025-04-18_snippet_3\n\nLANGUAGE: graphql\nCODE:\n```\nfragment PosterDetailsHovercardContentsBodyFragment on Actor {\n  name\n  joined\n  profilePicture {\n    ...ImageFragment\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Modifying Network Layer for Relay Queries in JavaScript\nDESCRIPTION: This JavaScript snippet modifies the network layer fetch implementation to pass an md5 hash (ID parameter) instead of query text as the POST body. This change supports the use of persisted queries with Relay.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/guides/persisted-queries.md#2025-04-18_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nfunction fetchQuery(operation, variables) {\n  return fetch('/graphql', {\n    method: 'POST',\n    headers: {\n      'content-type': 'application/json'\n    },\n    body: JSON.stringify({\n      doc_id: operation.id, // NOTE: pass md5 hash to the server\n      // query: operation.text, // this is now obsolete because text is null\n      variables,\n    }),\n  }).then(response => {\n    return response.json();\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Record in Relay Store with JavaScript\nDESCRIPTION: Depicts retrieving a record from the Relay store by using the `get` method of RecordSourceProxy, which returns a RecordProxy for data reading or mutation.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/api-reference/relay-runtime/store.md#2025-04-18_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nconst record = store.get(dataID);\n```\n\n----------------------------------------\n\nTITLE: Implementing getOptimisticResponse in Relay Mutations\nDESCRIPTION: Shows how to implement the getOptimisticResponse() method in a Relay mutation to create a response that will be used to update the client cache optimistically before the server responds. The example demonstrates a LikeStoryMutation that immediately updates like counts and viewer state.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-classic/Classic-APIReference-Mutation.md#2025-04-18_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\ngetOptimisticResponse(): ?{[key: string]: mixed}\n```\n\nLANGUAGE: jsx\nCODE:\n```\nclass LikeStoryMutation extends Relay.Mutation {\n  getOptimisticResponse() {\n    return {\n      story: {\n        id: this.props.story.id,\n        likers: {\n          count: this.props.story.likers.count + 1,\n        },\n        viewerDoesLike: !this.props.story.viewerDoesLike,\n      },\n    };\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Example Implementation of sendMutation\nDESCRIPTION: Example showing how to implement the sendMutation method using fetch, handling both success and error cases properly.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-classic/Classic-Interfaces-NetworkLayer.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nsendMutation(mutationRequest) {\n  return fetch(...).then(result => {\n    if (result.errors) {\n      mutationRequest.reject(new Error(...))\n    } else {\n      mutationRequest.resolve({response: result.data});\n    }\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of @required Directive in GraphQL Query\nDESCRIPTION: A simple example showing how to use the @required directive on a field in a GraphQL query. If the 'name' field is null, Relay will return { viewer: null }.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/guides/required-directive.md#2025-04-18_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nquery MyQuery {\n  viewer {\n    name @required(action: LOG)\n    age\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Relay Compiler\nDESCRIPTION: This snippet shows how to run the Relay Compiler using the yarn package manager. It is necessary to run the compiler to analyze GraphQL literals and produce required artifacts for Relay's operation. The command should be executed in the project's root directory. No special permissions are required.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/guided-tour/workflow.md#2025-04-18_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nyarn run relay\n```\n\n----------------------------------------\n\nTITLE: Using useRefetchableFragment Hook in React-Relay\nDESCRIPTION: Example of a React component using the useRefetchableFragment hook to refetch data with different variables, replacing the legacy Refetch Container pattern.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/migration-and-compatibility/relay-hooks-and-legacy-container-apis.md#2025-04-18_snippet_10\n\nLANGUAGE: jsx\nCODE:\n```\nimport * as React from 'React';\nimport {graphql, useRefetchableFragment} from 'react-relay';\n\nexport default function CommentBody(props: Props) {\n  const [data, refetch] = useRefetchableFragment(\n    graphql`\n      fragment CommentBody_comment on Comment\n      @refetchable(queryName: \"CommentBodyRefetchQuery\") {\n        body(lang: $lang) {\n          text\n        }\n      }\n    `,\n    props.comment,\n  );\n\n  const handleClick = useCallback(() => {\n    refetch({lang: 'SPANISH'});\n  }, [refetch]);\n\n  return (\n    <>\n      <p>{data.body?.text}</p>\n      <Button\n        onClick={handleClick}>\n        Translate Comment\n      </Button>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: @refetchable directive in GraphQL\nDESCRIPTION: The `@refetchable` directive is used in fragments to indicate that a query can be refetched. This example illustrates how to define a refetchable fragment and specify associated directives.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/api-reference/graphql/graphql-directives.md#2025-04-18_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\ngraphql`\n  fragment FriendsListComponent_user on User\n  @refetchable(\n    queryName: \"FriendsListFetchQuery\"\n    directives: [\"@relay_test_operation\"]\n  ) {\n    ...\n  }\n`\n```\n\n----------------------------------------\n\nTITLE: Creating an Assignable Fragment for User Type\nDESCRIPTION: Defines an assignable fragment on the User type with the @assignable directive. This fragment can only contain the __typename field and is required for imperatively assigning values to linked fields.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/guided-tour/updating-data/imperatively-modifying-linked-fields.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ngraphql`\n  fragment AssignBestFriendButton_assignable_user on User @assignable {\n    __typename\n  }\n`;\n```\n\n----------------------------------------\n\nTITLE: Querying Data with GraphQL\nDESCRIPTION: Demonstrates a basic GraphQL query to retrieve specific fields for a person entity. This example shows how GraphQL allows clients to request only the data they need.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/tutorial/graphql.md#2025-04-18_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  person(id: \"24601\") {\n    name\n    occupation\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Basic GraphQL Schema for Relay Server\nDESCRIPTION: Core schema definition showing Node interface, Faction and Ship types, along with connection types required for Relay pagination support.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/guides/graphql-server-specification.md#2025-04-18_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\ninterface Node {\n  id: ID!\n}\n\ntype Faction implements Node {\n  id: ID!\n  name: String\n  ships: ShipConnection\n}\n\ntype Ship implements Node {\n  id: ID!\n  name: String\n}\n\ntype ShipConnection {\n  edges: [ShipEdge]\n  pageInfo: PageInfo!\n}\n\ntype ShipEdge {\n  cursor: String!\n  node: Ship\n}\n\ntype PageInfo {\n  hasNextPage: Boolean!\n  hasPreviousPage: Boolean!\n  startCursor: String\n  endCursor: String\n}\n\ntype Query {\n  rebels: Faction\n  empire: Faction\n  node(id: ID!): Node\n}\n```\n\n----------------------------------------\n\nTITLE: Injecting Custom GraphQL Endpoint in Relay Network Layer\nDESCRIPTION: This snippet demonstrates how to inject a custom GraphQL endpoint into Relay's default network layer. It uses the Relay.injectNetworkLayer method to set a new instance of Relay.DefaultNetworkLayer with a custom URL.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-classic/Classic-Guides-NetworkLayer.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nRelay.injectNetworkLayer(\n  new Relay.DefaultNetworkLayer('http://example.com/graphql')\n);\n```\n\n----------------------------------------\n\nTITLE: Initializing local state in Relay\nDESCRIPTION: Sets up initial local state by initializing the user's notes field to an empty array before querying local data.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/guides/client-schema-extensions.md#2025-04-18_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport {commitLocalUpdate} from 'react-relay';\n\ncommitLocalUpdate(environment, store => {\n  const user = store.getRoot().getLinkedRecord('viewer');\n\n  // initialize user notes to an empty array.\n  user.setLinkedRecords([], 'notes');\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Weak Types with @weak Tag in Relay\nDESCRIPTION: Demonstrates how to define a \"weak\" type for objects without identifiers using the @weak tag. Instead of a resolver function, the type is defined with an exported type definition.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/api-reference/relay-resolvers/docblock-format.md#2025-04-18_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n/**\n* @RelayResolver ProfilePicture\n* @weak\n*/\nexport type ProfilePicture = {\n  url: string;\n  width: number;\n  height: number;\n};\n```\n\n----------------------------------------\n\nTITLE: Testing Relay Fragment Components\nDESCRIPTION: Shows how to test fragment components by wrapping them in a test query that spreads the fragment.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/guides/testing-relay-components.md#2025-04-18_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\ntest('Fragment', () => {\n  const environment = createMockEnvironment();\n  const TestRenderer = () => {\n    const data = useLazyLoadQuery(\n      graphql`\n        query TestQuery @relay_test_operation {\n          myData: node(id: \"test-id\") {\n            # Spread the fragment you want to test here\n            ...MyFragment\n          }\n        }\n      `,\n      {},\n    );\n    return <MyFragmentComponent myData={data.myData} />\n  };\n\n  const renderer = ReactTestRenderer.create(\n    <RelayEnvironmentProvider environment={environment}>\n      <Suspense fallback=\"Loading...\">\n        <TestRenderer />\n      </Suspense>\n    </RelayEnvironmentProvider>\n  );\n\n  ReactTestRenderer.act(() => {\n    environment.mock.resolveMostRecentOperation(operation =>\n      MockPayloadGenerator.generate(operation),\n    );\n  });\n\n  expect(renderer).toMatchSnapshot();\n});\n```\n\n----------------------------------------\n\nTITLE: Spreading Fragment in Newsfeed Query\nDESCRIPTION: Example of spreading a fragment within a GraphQL query\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/tutorial/fragments-1.md#2025-04-18_snippet_3\n\nLANGUAGE: graphql\nCODE:\n```\nconst NewsfeedQuery = graphql`\n  query NewsfeedQuery {\n    topStory {\n      ...StoryFragment\n    }\n  }\n`;\n```\n\n----------------------------------------\n\nTITLE: Defining GraphQL Story Type Schema\nDESCRIPTION: GraphQL schema definition for a Story type showing basic scalar fields and relationships to other types\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/tutorial/interfaces-polymorphism.md#2025-04-18_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\ntype Story {\n  id: ID!\n  title: String\n  summary: String\n  createdAt: Date\n  poster: Actor\n  image: Image\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting a Record in Relay Store with JavaScript\nDESCRIPTION: Shows how to delete a record from the Relay store using the `delete` method of RecordSourceProxy, which requires the data ID of the record to be removed. Deleted edges return `undefined` by default.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/api-reference/relay-runtime/store.md#2025-04-18_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nstore.delete(dataID);\n```\n\n----------------------------------------\n\nTITLE: Checking for More Items with hasNext in Relay Pagination\nDESCRIPTION: This snippet demonstrates how to use the hasNext boolean from usePaginationFragment to conditionally render a 'Load more' button only when more items are available to be loaded in the connection.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/guided-tour/list-data/pagination.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport type {FriendsListPaginationQuery} from 'FriendsListPaginationQuery.graphql';\nimport type {FriendsListComponent_user$key} from 'FriendsList_user.graphql';\n\nconst React = require('React');\nconst {Suspense} = require('React');\n\nconst {graphql, usePaginationFragment} = require('react-relay');\n\ntype Props = {\n  user: FriendsListComponent_user$key,\n};\n\nfunction FriendsListComponent(props: Props) {\n  // ...\n  const {\n    data,\n    loadNext,\n    hasNext,\n  } = usePaginationFragment(\n    graphql`...`,\n    props.user,\n  );\n\n  return (\n    <>\n      <h1>Friends of {data.name}:</h1>\n      {/* ... */}\n\n      {/* Only render button if there are more friends to load in the list */}\n      {hasNext ? (\n        <Button\n          onClick={/* ... */}>\n          Load more friends\n        </Button>\n      ) : null}\n    </>\n  );\n}\n\nmodule.exports = FriendsListComponent;\n```\n\n----------------------------------------\n\nTITLE: Accessing Different Filtered Connections from the Relay Store\nDESCRIPTION: This snippet shows how to retrieve specific connection instances from the Relay store based on different filter values. It demonstrates accessing two different connections with the same connection key but different filter values.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/guided-tour/updating-data/updating-connections.md#2025-04-18_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nconst {ConnectionHandler} = require('RelayModern');\n\nfunction updater(store: RecordSourceSelectorProxy) {\n  const storyRecord = store.get(storyID);\n\n  // Get the connection instance for the connection with comments sorted\n  // by the date they were added\n  const connectionRecordSortedByDate = ConnectionHandler.getConnection(\n    storyRecord,\n    'StoryComponent_story_comments_connection',\n    {order_by: '*DATE_ADDED*', filter_mode: null, language: null}\n  );\n\n  // Get the connection instance for the connection that only contains\n  // comments made by friends\n  const connectionRecordFriendsOnly = ConnectionHandler.getConnection(\n    storyRecord,\n    'StoryComponent_story_comments_connection',\n    {order_by: null, filter_mode: '*FRIENDS_ONLY*', language: null}\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Cache Data Structure Example\nDESCRIPTION: Pseudo-code showing the normalized cache structure for storing story, author, and comment data with links between related records.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/principles-and-architecture/thinking-in-graphql.md#2025-04-18_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nMap {\n  // `story(id: \"1\")`\n  1: Map {\n    text: 'got GraphQL?',\n    author: Link(2),\n    comments: [Link(3)],\n  },\n  // `story.author`\n  2: Map {\n    name: 'Yuzhi',\n    photo: 'http://.../photo1.jpg',\n  },\n  // `story.comments[0]`\n  3: Map {\n    text: 'Here\\'s how to get one!',\n    author: Link(2),\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Local Notes in Relay Store\nDESCRIPTION: Function to update the body and title of an existing Note record in the local Relay store.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/guides/client-schema-extensions.md#2025-04-18_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport {commitLocalUpdate} from 'react-relay';\n\nfunction updateUserNote(environment, dataID, body, title) {\n  commitLocalUpdate(environment, store => {\n    const note = store.get(dataID);\n\n    note.setValue(body, 'body');\n    note.setValue(title, 'title')\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: JSON Response from Node Refetch Query\nDESCRIPTION: The JSON response from refetching a faction by its node ID, showing how the object can be retrieved using the global identification system.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/guides/graphql-server-specification.md#2025-04-18_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"node\": {\n    \"id\": \"RmFjdGlvbjox\",\n    \"name\": \"Alliance to Restore the Republic\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Fragment Components in Relay\nDESCRIPTION: Shows how to test individual fragment components by wrapping them in a test query component using useLazyLoadQuery.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/guides/testing-relay-components.md#2025-04-18_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\ntest('Fragment', () => {\n  const environment = createMockEnvironment();\n  const TestRenderer = () => {\n    const data = useLazyLoadQuery(\n      graphql`\n        query TestQuery @relay_test_operation {\n          myData: node(id: \"test-id\") {\n            ...MyFragment\n          }\n        }\n      `,\n      {},\n    );\n    return <MyFragmentComponent myData={data.myData} />\n  };\n\n  const renderer = render(\n    <RelayEnvironmentProvider environment={environment}>\n      <Suspense fallback=\"Loading...\">\n        <TestRenderer />\n      </Suspense>\n    </RelayEnvironmentProvider>\n  );\n\n  act(() => {\n    environment.mock.resolveMostRecentOperation(operation =>\n      MockPayloadGenerator.generate(operation),\n    );\n  });\n\n  expect(renderer).toMatchSnapshot();\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Boolean Scalar Return Type in Relay Resolver\nDESCRIPTION: Example of a Relay Resolver that returns a Boolean scalar value. The resolver checks if a Post model has valid content and an author.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/guides/relay-resolvers/return-types.md#2025-04-18_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n/**\n * @RelayResolver Post.isValid: Boolean\n */\nexport function isValid(post: PostModel): boolean {\n  return post.content !== \"\" && post.author != null;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Pagination Loading State\nDESCRIPTION: Component implementation using useTransition and usePaginationFragment for handling loading states during pagination\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/tutorial/connections-pagination.md#2025-04-18_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nfunction StoryCommentsSection({story}) {\n  const [isPending, startTransition] = useTransition();\n  const {data, loadNext} = usePaginationFragment(StoryCommentsSectionFragment, story);\n  const onLoadMore = () => startTransition(() => {\n    loadNext(3);\n  });\n  return (\n    <>\n      {data.comments.edges.map(commentEdge =>\n        <Comment comment={commentEdge.node} />\n      )}\n      {data.comments.pageInfo.hasNextPage && (\n        <LoadMoreCommentsButton\n          onClick={onLoadMore}\n          disabled={isPending}\n        />\n      )}\n      {isPending && <CommentsLoadingSpinner />}\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Refetching with useLazyLoadQuery in React\nDESCRIPTION: This snippet demonstrates using the `useLazyLoadQuery` Hook with state to refetch a query by updating query variables and a fetch key. It shows how to ensure the query is re-evaluated by changing `fetchKey` and managing `Suspense` states in a React component using Relay.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/guided-tour/refetching/refetching-queries-with-different-data.md#2025-04-18_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\n\n/**\n * App.react.js\n */\nconst AppQuery = require('__generated__/AppQuery.graphql');\n\nfunction App(props: Props) {\n  const [queryArgs, setQueryArgs] = useState({\n    options: {fetchKey: 0},\n    variables: {id: '4'},\n  });\n\n  const refetch = useCallback(() => {\n    // Trigger a re-render of useLazyLoadQuery with new variables,\n    // *and* an updated fetchKey.\n    // The new fetchKey will ensure that the query is fully\n    // re-evaluated and refetched.\n    setQueryArgs(prev => ({\n      options: {\n        fetchKey: (prev?.options.fetchKey ?? 0) + 1,\n      },\n      variables: {id: 'different-id'}\n    }));\n  }, [/* ... */]);\n\n  return (\n    <React.Suspense fallback=\"Loading query...\">\n      <MainContent\n        refetch={refetch}\n        queryArgs={queryArgs}\n      />\n    </React.Suspense>\n  );\n}\n\n```\n\n----------------------------------------\n\nTITLE: Creating Relay Fragment Container in JavaScript\nDESCRIPTION: Creates a Relay container that wraps a React component for a Story, using the GraphQL fragment defined to ensure data dependencies are fetched. The container, created using createFragmentContainer, wraps the Story component to fetch the specified fragment, managing data dependencies dynamically.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-classic/PrinciplesAndArchitecture-ThinkingInRelay.md#2025-04-18_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n\"const {createFragmentContainer, graphql} = require('react-relay');\\n\\n// Plain React component.\\n// Usage: `<Story story={ ... } />`\\nclass Story extends React.Component { ... }\\n\\n// Higher-order component that wraps `<Story />`\\nconst StoryContainer = createFragmentContainer(Story, {\\n  // Define a fragment with a name matching the `story` prop expected above\\n  story: graphql`\\n    fragment Story_story on Story {\\n      text\\n      author {\\n        name\\n        photo\\n      }\\n    }\\n  `\\n})\\n\"\n```\n\n----------------------------------------\n\nTITLE: Using Variables with Relay Connections\nDESCRIPTION: JavaScript component using usePaginationFragment to query a connection with variables for filtering and sorting.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/guided-tour/list-data/refetching-connections.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ntype Props = {\n  userRef: FriendsListComponent_user$key,\n};\n\nfunction FriendsListComponent(props: Props) {\n  const userRef = props.userRef;\n\n  const {data, ...} = usePaginationFragment(\n    graphql`\n      fragment FriendsListComponent_user on User {\n        name\n        friends(\n          order_by: $orderBy,\n          search_term: $searchTerm,\n          after: $cursor,\n          first: $count,\n        ) @connection(key: \"FriendsListComponent_user_friends_connection\") {\n          edges {\n            node {\n              name\n              age\n            }\n          }\n        }\n      }\n    `,\n    userRef,\n  );\n\n  return (...);\n}\n```\n\n----------------------------------------\n\nTITLE: GraphQL Fragment Referencing Variables\nDESCRIPTION: Defines a GraphQL fragment that references a variable $scale defined in a query. The fragment can only be used in queries where the variable is declared.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/guided-tour/rendering/variables.md#2025-04-18_snippet_3\n\nLANGUAGE: graphql\nCODE:\n```\nfragment UserFragment on User {\n  name\n  profile_picture(scale: $scale) {\n    uri\n  }\n}\n\nquery ViewerQuery($scale: Float!) {\n  viewer {\n    actor {\n      ...UserFragment\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating an Updatable Fragment for Story Likes in Relay\nDESCRIPTION: This snippet demonstrates how to create an updatable fragment for a Story like button. It uses the @updatable directive to specify fields that can be modified locally.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/tutorial/mutations-updates.md#2025-04-18_snippet_9\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction StoryLikeButton({story}) {\n  ...\n      optimisticUpdater: store => {\n        const fragment = graphql`\n          fragment StoryLikeButton_updatable on Story\n            @updatable\n          {\n            likeCount\n            doesViewerLike\n          }\n        `;\n      },\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Defining GraphQL Subscription Operation\nDESCRIPTION: Example of a GraphQL subscription operation that subscribes to feedback like events. The subscription takes an input parameter and returns the feedback ID and like count when changes occur.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/glossary/glossary.md#2025-04-18_snippet_13\n\nLANGUAGE: graphql\nCODE:\n```\nsubscription FeedbackLikeSubscription($input: FeedbackLikeSubscribeData!) {\n  feedback_like_subscribe(data: $input) {\n    feedback {\n      id\n      like_count\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Getting the Record Type\nDESCRIPTION: Demonstrates how to get the type of the current record using the `getType` method of the `RecordProxy`. This method returns a string that represents the type of the record, as defined by the GraphQL schema.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v13.0.0/api-reference/relay-runtime/store.md#2025-04-18_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nconst type = user.getType();  // User\n```\n\n----------------------------------------\n\nTITLE: Adding Search Input UI\nDESCRIPTION: Implementing the search input UI component with state management.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/tutorial/refetchable-fragments.md#2025-04-18_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport SearchInput from './SearchInput';\n\nconst {useState} = React;\n\nfunction ContactsList({viewer}) {\n  const data = useFragment(ContactsListFragment, viewer);\n  const [searchString, setSearchString] = useState('');\n  const onSearchStringChanged = (value: string) => {\n    setSearchString(value);\n  };\n  return (\n    <Card dim={true}>\n      <h3>Contacts</h3>\n      <SearchInput\n        value={searchString}\n        onChange={onSearchStringChanged}\n      />\n      {data.contacts.map(contact =>\n        <ContactRow key={contact.id} contact={contact} />\n      )}\n    </Card>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Refreshing Queries Using useQueryLoader in React/Relay\nDESCRIPTION: Example showing how to refresh a query using useQueryLoader Hook. The code demonstrates refreshing data by calling loadQuery again with network-only fetch policy to ensure fresh data from server.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/guided-tour/refetching/refreshing-queries.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * App.react.js\n */\n\nconst AppQuery = require('__generated__/AppQuery.graphql');\n\nfunction App(props: Props) {\n  const [queryRef, loadQuery] = useQueryLoader(\n    AppQuery,\n    props.appQueryRef /* initial query ref */\n  );\n\n  const refresh = useCallback(() => {\n    // Load the query again using the same original variables.\n    // Calling loadQuery will update the value of queryRef.\n    // The fetchPolicy ensures we always fetch from the server and skip\n    // the local data cache.\n    const {variables} = props.appQueryRef;\n    loadQuery(variables, {fetchPolicy: 'network-only'});\n  }, [/* ... */]);\n\n  return (\n    <React.Suspense fallback=\"Loading query...\">\n      <MainContent\n        refresh={refresh}\n        queryRef={queryRef}\n      />\n    </React.Suspense>\n  );\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * MainContent.react.js\n */\n\n// Renders the preloaded query, given the query reference\nfunction MainContent(props) {\n  const {refresh, queryRef} = props;\n  const data = usePreloadedQuery(\n    graphql`\n      query AppQuery($id: ID!) {\n        user(id: $id) {\n          name\n          friends {\n            count\n          }\n        }\n      }\n    `,\n    queryRef,\n  );\n\n  return (\n    <>\n      <h1>{data.user?.name}</h1>\n      <div>Friends count: {data.user.friends?.count}</div>\n      <Button\n        onClick={() => refresh()}>\n        Fetch latest count\n      </Button>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using @arguments Directive in GraphQL\nDESCRIPTION: The `@arguments` directive is used in GraphQL queries to pass arguments to a fragment that is defined by the `@argumentDefinitions` directive. This mechanism allows the use of variables within fragments. The directive is primarily utilized when querying data using Relay and is essential for dynamic data fetching.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/api-reference/graphql/graphql-directives.md#2025-04-18_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nquery TodoListQuery($userID: ID) {\n  ...TodoList_list @arguments(count: $count, userID: $userID) # Pass arguments here\n}\n```\n\n----------------------------------------\n\nTITLE: Importing StoryLikeButton in Story.tsx\nDESCRIPTION: This code snippet demonstrates how to import the `StoryLikeButton` component into the `Story.tsx` file. It also shows how to spread the `StoryLikeButtonFragment` into the `StoryFragment` and how to include the `StoryLikeButton` component within the `Story` component.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/tutorial/mutations-updates.md#2025-04-18_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n// change-line\nimport StoryLikeButton from './StoryLikeButton';\n\n...\n\nconst StoryFragment = graphql`\n  fragment StoryFragment on Story {\n    title\n    summary\n    // ... etc\n    // change-line\n    ...StoryLikeButtonFragment\n  }\n`;\n\n...\n\nexport default function Story({story}: Props) {\n  const data = useFragment(StoryFragment, story);\n  return (\n    <Card>\n      <PosterByline person={data.poster} />\n      <Heading>{data.title}</Heading>\n      <Timestamp time={data.posterAt} />\n      <Image image={story.thumbnail} width={400} height={400} />\n      <StorySummary summary={data.summary} />\n      // change-line\n      <StoryLikeButton story={data} />\n      <StoryCommentsSection story={data} />\n    </Card>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Relay Hooks\nDESCRIPTION: Example showing how to import Relay Hooks either from the main react-relay module or specifically from react-relay/hooks.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/migration-and-compatibility/upgrading-to-relay-hooks.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport {graphql, useFragment} from 'react-relay'; // or 'react-relay/hooks'\n\n// ...\n```\n\n----------------------------------------\n\nTITLE: Querying Rebel Ships with Pagination\nDESCRIPTION: This code snippet queries the Rebel faction for its ships using pagination. It demonstrates the ability to limit results to the first ship and utilize Relay's connection model.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/guides/graphql-server-specification.md#2025-04-18_snippet_5\n\nLANGUAGE: graphql\nCODE:\n```\nquery RebelsShipsQuery {\n  rebels {\n    name\n    ships(first: 1) {\n      edges {\n        node {\n          name\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Props Type for StoryFragment\nDESCRIPTION: This code snippet updates the Props type definition for the Story component to accept a StoryFragment$key instead of the raw data. It imports the StoryFragment$key type from the generated file and uses it in the Props type definition. This ensures that the component receives a fragment key and not the raw data.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/tutorial/fragments-1.md#2025-04-18_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// change-line\nimport type {StoryFragment$key} from './__generated__/StoryFragment.graphql';\n\ntype Props = {\n  // change-line\n  story: StoryFragment$key;\n};\n\n```\n\n----------------------------------------\n\nTITLE: Implementing UI Component with Local Store Updates in Relay\nDESCRIPTION: React component that uses commitLocalUpdate to toggle the 'is_selected' state of a user in response to click events. Demonstrates how to update store data without network requests.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/guided-tour/updating-data/imperatively-modifying-store-data.md#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// UserSelectToggle.react.js\nimport type {RecordSourceSelectorProxy} from 'react-relay';\nimport type {UserSelectToggle_viewer$key} from 'UserSelectToggle_viewer.graphql';\n\nconst {useRelayEnvironment, commitLocalUpdate} = require('react-relay');\n\nfunction UserSelectToggle({ userId, viewerRef }: {\n  userId: string,\n  viewerRef: UserSelectToggle_viewer$key,\n}) {\n  const viewer = useFragment(graphql`\n    fragment UserSelectToggle_viewer on Viewer {\n      user(user_id: $user_id) {\n        id\n        name\n        is_selected\n        ...UserSelectToggle_updatable_user\n      }\n    }\n  `, viewerRef);\n\n  const environment = useRelayEnvironment();\n\n  return <button\n    onClick={() => {\n      commitLocalUpdate(\n        environment,\n        (store: RecordSourceSelectorProxy) => {\n          const userRef = viewer.user;\n          if (userRef == null) {\n            return;\n          }\n\n          const {updatableData} = store.readUpdatableFragment(\n            graphql`\n              fragment UserSelectToggle_updatable_user on User @updatable {\n                is_selected\n              }\n            `,\n            userRef\n          );\n\n          updatableData.is_selected = !viewer?.user?.is_selected;\n        }\n      );\n    }}\n  >\n    {viewer?.user?.is_selected ? 'Deselect' : 'Select'} {viewer?.user?.name}\n  </button>\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Query Cache Expiration Time in Relay Store\nDESCRIPTION: Example of configuring the query cache expiration time when creating a Relay Store. This setting determines how long data remains fresh before being considered stale, even if not explicitly invalidated.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v13.0.0/guided-tour/reusing-cached-data/staleness-of-data.md#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst store = new Store(source, {queryCacheExpirationTime: 5 * 60 * 1000 });\n```\n\n----------------------------------------\n\nTITLE: Installing Relay Babel Plugin with Yarn\nDESCRIPTION: Command to install the Relay Babel plugin and GraphQL dependencies using Yarn package manager.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/getting-started/babel-plugin.md#2025-04-18_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nyarn add --dev babel-plugin-relay graphql\n```\n\n----------------------------------------\n\nTITLE: GraphQL Story Query Example\nDESCRIPTION: Example of a GraphQL query fetching story details including text and author information.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/principles-and-architecture/thinking-in-graphql.md#2025-04-18_snippet_4\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  story(id: \"1\") {\n    text,\n    author {\n      name\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Local Notes in Relay Store\nDESCRIPTION: Function to create a new Note record in the local Relay store and link it to the user's notes list.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/guides/client-schema-extensions.md#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport {commitLocalUpdate} from 'react-relay';\n\nlet tempID = 0;\n\nfunction createUserNote(environment) {\n  commitLocalUpdate(environment, store => {\n    const user = store.getRoot().getLinkedRecord('viewer');\n    const userNoteRecords = user.getLinkedRecords('notes') || [];\n\n    // Create a unique ID.\n    const dataID = `client:Note:${tempID++}`;\n\n    //Create a new note record.\n    const newNoteRecord = store.create(dataID, 'Note');\n\n    // Add the record to the user's list of notes.\n    user.setLinkedRecords([...userNoteRecords, newNoteRecord], 'notes');\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Installing and Running the Relay Tutorial Project\nDESCRIPTION: Command sequence to clone the relay-examples repository, navigate to the newsfeed project directory, install dependencies, and start the development server. This launches a Webpack server, GraphQL server, and Relay compiler.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/tutorial/intro.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/relayjs/relay-examples.git\ncd relay-examples/newsfeed\nnpm install\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Using Fragments in Mutation Response for Consistency\nDESCRIPTION: This updated mutation definition uses the same fragment as the component to ensure consistent data requirements between the component rendering and mutation response.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/tutorial/mutations-updates.md#2025-04-18_snippet_7\n\nLANGUAGE: graphql\nCODE:\n```\nconst StoryLikeButtonLikeMutation = graphql`\n  mutation StoryLikeButtonLikeMutation(\n    $id: ID,\n    $doesLike: Boolean,\n  ) {\n    likeStory(id: $id, doesLike: $doesLike) {\n      story {\n        // change-line\n        ...StoryLikeButtonFragment\n      }\n    }\n  }\n`;\n```\n\n----------------------------------------\n\nTITLE: RecordProxy Interface Definition\nDESCRIPTION: TypeScript interface definition for RecordProxy, which provides methods to mutate records in the store.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/api-reference/relay-runtime/store.md#2025-04-18_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\ninterface RecordProxy {\n  copyFieldsFrom(sourceRecord: RecordProxy): void;\n  getDataID(): string;\n  getLinkedRecord(name: string, arguments?: ?Object): ?RecordProxy;\n  getLinkedRecords(name: string, arguments?: ?Object): ?Array<?RecordProxy>;\n  getOrCreateLinkedRecord(\n    name: string,\n    typeName: string,\n    arguments?: ?Object,\n  ): RecordProxy;\n  getType(): string;\n  getValue(name: string, arguments?: ?Object): mixed;\n  setLinkedRecord(\n    record: RecordProxy,\n    name: string,\n    arguments?: ?Object,\n  ): RecordProxy;\n  setLinkedRecords(\n    records: Array<?RecordProxy>,\n    name: string,\n    arguments?: ?Object,\n  ): RecordProxy;\n  setValue(value: mixed, name: string, arguments?: ?Object): RecordProxy;\n  invalidateRecord(): void;\n}\n```\n\n----------------------------------------\n\nTITLE: Fetch GraphQL Data as Promise using toPromise in React Relay\nDESCRIPTION: This code snippet shows how to use the toPromise method on a fetchQuery call in react-relay to convert the request into a promise-based approach. Import the necessary types and relay functions, and note that the use of toPromise will resolve the promise on the first data reception, possibly leading to incomplete data handling. This pattern is generally discouraged due to potential data completeness issues.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v13.0.0/api-reference/relay-runtime/fetch-query.md#2025-04-18_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport type {AppQuery} from 'AppQuery.graphql';\n\nconst {fetchQuery} = require('react-relay');\n\nfetchQuery<AppQuery>(\n  environment,\n  graphql`\n    query AppQuery($id: ID!) {\n      user(id: $id) {\n        name\n      }\n    }\n  `,\n  {id: 4},\n)\n.toPromise() // NOTE: don't use, this can cause data to be missing!\n.then(data => {...})\n.catch(error => {...};\n```\n\n----------------------------------------\n\nTITLE: Providing Query Variables with GraphQL Request\nDESCRIPTION: Example showing how to provide variables when sending a GraphQL query request. It includes both the query definition and the variables object to be sent with the request.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/guided-tour/rendering/variables.md#2025-04-18_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\n# Query:\nquery UserQuery($id: ID!) {\n  # ...\n}\n\n# Variables:\n{\"id\": 4}\n```\n\n----------------------------------------\n\nTITLE: Fetching data with GraphQL\nDESCRIPTION: This snippet demonstrates how to fetch the same data as the previous REST example, but using GraphQL. It fetches the list of stories and their IDs and texts using a single network request. This eliminates the n+1 problem present in the REST approach.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/principles-and-architecture/thinking-in-graphql.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ngraphql.get(`query { stories { id, text } }`).then(\n  stories => {\n    // A list of story items:\n    // `[ { id: \\\"...\\\", text: \\\"...\\\" } ]`\n    console.log(stories);\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Adding @connection Directive to Identify Pagination Field in Relay\nDESCRIPTION: This snippet shows how to mark a field with the @connection directive, which Relay uses to identify which field within the fragment represents the Connection to be paginated over. The directive requires a unique key.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/tutorial/connections-pagination.md#2025-04-18_snippet_6\n\nLANGUAGE: graphql\nCODE:\n```\nconst StoryCommentsSectionFragment = graphql`\n  fragment StoryCommentsSectionFragment on Story\n    @refetchable(queryName: \"StoryCommentsSectionPaginationQuery\")\n    @argumentDefinitions(\n      cursor: { type: \"String\" }\n      count: { type: \"Int\", defaultValue: 3 }\n    )\n  {\n    comments(after: $cursor, first: $count)\n      // change-line\n      @connection(key: \"StoryCommentsSectionFragment_comments\")\n    {\n      edges {\n        node {\n          ...CommentFragment\n        }\n      }\n      pageInfo {\n        hasNextPage\n      }\n    }\n  }\n`;\n```\n\n----------------------------------------\n\nTITLE: Demonstrating FlattenTransform in GraphQL\nDESCRIPTION: This example shows how the FlattenTransform reduces extraneous levels of indirection in a GraphQL query by inlining fields from anonymous fragments that match the parent type.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/principles-and-architecture/compiler-architecture.md#2025-04-18_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\n# before: `id` is processed twice\nfoo { # type FooType\n   id\n   ... on FooType { # matches the parent type, so this is extraneous\n     id\n   }\n }\n\n # after: `id` is processed once\n foo {\n   id\n }\n```\n\n----------------------------------------\n\nTITLE: Defining Client-Only Types in GraphQL\nDESCRIPTION: This example illustrates how to define new types and enumerations in a GraphQL schema for client-only data. It includes two types: `FetchStatus`, an enum type representing the status of a fetch operation, and `FetchState`, a type containing a reference to `FetchStatus` and a regular server type `User`. Additionally, the `Item` type is extended with a field of type `FetchState`.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/guided-tour/updating-data/client-only-data.md#2025-04-18_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\n# You can define more than one type in a single file\nenum FetchStatus {\n  FETCHED\n  PENDING\n  ERRORED\n}\n\ntype FetchState {\n  # You can reuse client types to define other types\n  status: FetchStatus\n\n  # You can also reference regular server types\n  started_by: User!\n}\n\nextend type Item {\n  # You can extend server types with client-only types\n  fetch_state: FetchState\n}\n```\n\n----------------------------------------\n\nTITLE: Assigning from Abstract Field to Concrete Field in Relay\nDESCRIPTION: This code snippet demonstrates how to assign from an abstract field (Node) to a concrete field (User) using an inline fragment and type checking in Relay.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/guided-tour/updating-data/imperatively-modifying-linked-fields.md#2025-04-18_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst data = useFragment(graphql`\n  fragment AssignBestFriendButton_someType on Query {\n    node(id: \"4\") {\n      ... on User {\n        __typename\n        ...AssignableBestFriendButton_assignable_user\n      }\n    }\n  }\n`, queryRef);\n\nconst environment = useRelayEnvironment();\nconst onClick = () => {\n  const updatableData = commitLocalUpdate(\n    environment,\n    (store: RecordSourceSelectorProxy) => {\n      const {updatableData} = store.readUpdatableQuery(\n          graphql`\n            query AssignBestFriendButtonUpdatableQuery\n            @updatable {\n              viewer {\n                best_friend {\n                  ...AssignableBestFriendButton_assignable_user\n                }\n              }\n            }\n          `,\n          {}\n        );\n\n      if (data.node != null && data.node.__typename === \"User\" && updatableData.viewer != null) {\n        updatableData.viewer.best_friend = data.node;\n      }\n    }\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Defining GraphQL Query with New Field in Relay\nDESCRIPTION: Example of adding a new field (createdAt) to an existing GraphQL query in Relay\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/tutorial/fragments-1.md#2025-04-18_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nconst NewsfeedQuery = graphql`\n  query NewsfeedQuery {\n    topStory {\n      title\n      summary\n      createdAt\n      poster {\n        name\n        profilePicture {\n          url\n        }\n      }\n      image {\n        url\n      }\n    }\n  }\n`;\n```\n\n----------------------------------------\n\nTITLE: Deleting Local Data with commitLocalUpdate in Relay\nDESCRIPTION: Shows how to remove a Note record from the User's list of notes and delete it from the store using commitLocalUpdate.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/guides/client-schema-extensions.md#2025-04-18_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nfunction deleteUserNote(environment, dataID) {\n  commitLocalUpdate(environment, store => {\n    const user = store.getRoot().getLinkedRecord('viewer');\n    const userNoteRecords = user.getLinkedRecords('notes');\n\n    // Remove the note from the list of user notes.\n    const newUserNoteRecords = userNoteRecords.filter(x => x.getDataID() !== dataID);\n\n    // Delete the note from the store.\n    store.delete(dataID);\n\n    // Set the new list of notes.\n    user.setLinkedRecords(newUserNoteRecords, 'notes');\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Retry Functionality in Error Boundary\nDESCRIPTION: This code implements a retry mechanism within an Error Boundary component. It allows the application to call loadQuery again upon retrying after an error has occurred, which provides a new query reference for fetching data.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/guided-tour/rendering/error-states.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nclass ErrorBoundaryWithRetry extends React.Component<Props, State> {\n  state = {error: null};\n\n  static getDerivedStateFromError(error): State {\n    return {error: error};\n  }\n\n  _retry = () => {\n    this.props.onRetry();\n    this.setState({\n      // Clear the error\n      error: null,\n    });\n  }\n\n  render() {\n    const {children, fallback} = this.props;\n    const {error} = this.state;\n    if (error) {\n      if (typeof fallback === 'function') {\n        return fallback({error, retry: this._retry});\n      }\n      return fallback;\n    }\n    return children;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting Records in Relay Store\nDESCRIPTION: The `delete` method removes a record identified by its `dataID` from the Relay store, thus updating the client-side data.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/api-reference/relay-runtime/store.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nstore.delete(dataID);\n```\n\n----------------------------------------\n\nTITLE: Using Fragment Data in Flow\nDESCRIPTION: Illustrates how to use emitted type information for fragment data in Flow. The example shows a fragment component with its corresponding type definitions.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/guides/type-emission.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * export type ExampleFragmentComponent_artist$data = {\n *   +name: string\n * }\n *\n * export type ExampleFragmentComponent_artist$key = { ... }\n */\n\nimport type { ExampleFragmentComponent_artist$key } from \"__generated__/ExampleFragmentComponent_artist.graphql\"\n\ntype Props = {\n  artist: ExampleFragmentComponent_artist$key,\n};\n\nexport default ExampleFragmentComponent(props) {\n  // data is of type ExampleFragmentComponent_artist$data\n  const data = useFragment(\n    graphql`\n      fragment ExampleFragmentComponent_artist on Artist {\n        biography\n      }\n    `,\n    props.artist,\n  );\n\n  return <div>About the artist: {props.artist.biography}</div>;\n}\n```\n\n----------------------------------------\n\nTITLE: Generated TypeScript Definitions for a Relay GraphQL Query\nDESCRIPTION: This snippet shows an example of the TypeScript type definitions automatically generated by the Relay compiler for a GraphQL query. It defines the structure of the query response data with all the selected fields and their types.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/tutorial/queries-1.md#2025-04-18_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nexport type NewsfeedQuery$data = {\n  readonly topStory: {\n    readonly poster: {\n      readonly name: string | null;\n      readonly profilePicture: {\n        readonly url: string;\n      } | null;\n    };\n    readonly summary: string | null;\n    readonly thumbnail: {\n      readonly url: string;\n    } | null;\n    readonly title: string;\n  } | null;\n};\n```\n\n----------------------------------------\n\nTITLE: Referencing Query Variables in Relay Fragment Components\nDESCRIPTION: Shows how to use query variables within Relay fragment components, which can be included by multiple queries and rendered by different components.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/guided-tour/rendering/variables.md#2025-04-18_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nfunction UserComponent(props: Props) {\n  const data = useFragment(\n    graphql`\n    fragment UserComponent_user on User {\n      name\n      profile_picture(scale: $scale) {\n        uri\n      }\n    }\n    `,\n    props.user,\n  );\n\n  return (...);\n}\n```\n\n----------------------------------------\n\nTITLE: Avoiding Suspense with fetchQuery and Manual Loading State\nDESCRIPTION: Implements a query refresh mechanism that prevents Suspense by manually tracking loading state and using fetchQuery to update data\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v13.0.0/guided-tour/refetching/refreshing-queries.md#2025-04-18_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nfunction App(props: Props) {\n  const variables = {id: '4'}\n  const environment = useRelayEnvironment();\n  const [refreshedQueryOptions, setRefreshedQueryOptions] = useState(null);\n  const [isRefreshing, setIsRefreshing] = useState(false)\n\n  const refresh = useCallback(() => {\n    if (isRefreshing) { return; }\n    setIsRefreshing(true);\n\n    fetchQuery(environment, AppQuery, variables)\n      .subscribe({\n        complete: () => {\n          setIsRefreshing(false);\n          setRefreshedQueryOptions(prev => ({\n            fetchKey: (prev?.fetchKey ?? 0) + 1,\n            fetchPolicy: 'store-only',\n          }));\n        }\n      });\n  }, [/* ... */]);\n\n  return (\n    <React.Suspense fallback=\"Loading query...\">\n      <MainContent\n        isRefreshing={isRefreshing}\n        refresh={refresh}\n        queryOptions={refreshedQueryOptions ?? {}}\n        variables={variables}\n      />\n    </React.Suspense>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using useFragment Hook to Access Fragment Data in React\nDESCRIPTION: Implementing the useFragment hook to access data selected by a fragment. This demonstrates data masking in Relay, where components must explicitly request data through fragments.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/tutorial/fragments-1.md#2025-04-18_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useFragment } from 'react-relay';\n\nexport default function Story({story}: Props) {\n  const data = useFragment(\n    // color1\n    StoryFragment,\n    // color2\n    story,\n  );\n  return (\n    <Card>\n      <Heading>{data.title}</Heading>\n      <PosterByline poster={data.poster} />\n      <Timestamp time={data.createdAt} />\n      <Image image={data.thumbnail} />\n      <StorySummary summary={data.summary} />\n    </Card>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Defining PosterByline Component with Fragment Usage - JavaScript\nDESCRIPTION: This snippet defines the 'PosterByline' functional component utilizing Relay's 'useFragment' to load poster data and render the user's profile picture and name, integrating the hovercard feature.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/tutorial/queries-2.md#2025-04-18_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport default function PosterByline({ poster }: Props): React.ReactElement {\n  const data = useFragment(PosterBylineFragment, poster);\n  return (\n    <div className=\"byline\">\n      <Image image={data.profilePicture} width={60} height={60} className=\"byline__image\" />\n      <div className=\"byline__name\" ref={hoverRef}>{data.name}</div>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Relay Query Component with Suspense\nDESCRIPTION: This example demonstrates a query renderer component (MainContent) that fetches data using usePreloadedQuery from react-relay. The MainContent component suspends while the data is being fetched.  The App component wraps MainContent in a Suspense component to display a LoadingGlimmer fallback during the data fetching process.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/guided-tour/rendering/loading-states.md#2025-04-18_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * MainContent.react.js\n *\n * Query Component\n */\n\nconst React = require('React');\nconst {graphql, usePreloadedQuery} = require('react-relay');\n\nfunction MainContent(props) {\n  // Fetch and render a query\n  const data = usePreloadedQuery(\n    graphql`...`,\n    props.queryRef,\n  );\n\n  return (...);\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * App.react.js\n */\n\nconst React = require('React');\nconst {Suspense} = require('React');\n\nfunction App() {\n  return (\n    // LoadingGlimmer is rendered via the Suspense fallback\n    <Suspense fallback={<LoadingGlimmer />}>\n      <MainContent /> {/* MainContent may suspend */}\n    </Suspense>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating New Edge from Scratch in Relay\nDESCRIPTION: This snippet demonstrates how to create a new edge from scratch using ConnectionHandler.createEdge. This is useful when you need to add client-side records to a connection that don't come from a server response.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v13.0.0/guided-tour/list-data/updating-connections.md#2025-04-18_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nconst {ConnectionHandler} = require('relay-runtime');\n\nfunction updater(store: RecordSourceSelectorProxy) {\n  const storyRecord = store.get(storyID);\n  const connectionRecord = ConnectionHandler.getConnection(\n    storyRecord,\n    'StoryComponent_story_comments_connection',\n  );\n\n  // Create a new local Comment record\n  const id = `client:new_comment:${randomID()}`;\n  const newCommentRecord = store.create(id, 'Comment');\n\n  // Create new edge\n  const newEdge = ConnectionHandler.createEdge(\n    store,\n    connectionRecord,\n    newCommentRecord,\n    'CommentEdge', /* GraphQl Type for edge */\n  );\n\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Using GraphQL in React Component\nDESCRIPTION: React component implementation that fetches data from a GraphQL endpoint using useEffect and useState hooks to display repository information.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/getting-started/step-by-step-guide.md#2025-04-18_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// your-app-name/src/App.js\nimport React from 'react';\nimport './App.css';\nimport fetchGraphQL from './fetchGraphQL';\n\nconst { useState, useEffect } = React;\n\nfunction App() {\n  // We'll load the name of a repository, initially setting it to null\n  const [name, setName] = useState(null);\n\n  // When the component mounts we'll fetch a repository name\n  useEffect(() => {\n    let isMounted = true;\n    fetchGraphQL(`\n      query RepositoryNameQuery {\n        # feel free to change owner/name here\n        repository(owner: \"facebook\" name: \"relay\") {\n          name\n        }\n      }\n    `).then(response => {\n      // Avoid updating state if the component unmounted before the fetch completes\n      if (!isMounted) {\n        return;\n      }\n      const data = response.data;\n      setName(data.repository.name);\n    }).catch(error => {\n      console.error(error);\n    });\n\n    return () => {\n      isMounted = false;\n    };\n  }, []);\n\n  // Render \"Loading\" until the query completes\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <p>\n          {name != null ? `Repository: ${name}` : \"Loading\"}\n        </p>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Server Response Example\nDESCRIPTION: Example of server response structure for the like mutation showing updated story data.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/tutorial/mutations-updates.md#2025-04-18_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"likeStory\": {\n    \"story\": {\n      \"id\": \"34a8c\",\n      \"likeCount\": 47,\n      \"doesViewerLike\": true\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting a Record from Relay Store\nDESCRIPTION: Shows how to delete a record from the Relay store using the delete method of RecordSourceSelectorProxy.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/api-reference/relay-runtime/store.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nstore.delete(dataID);\n```\n\n----------------------------------------\n\nTITLE: Complex GraphQL Query with Nested Fields\nDESCRIPTION: Illustrates a more complex GraphQL query that retrieves nested data, including information about a person's location. This showcases GraphQL's ability to traverse relationships in the data graph.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/tutorial/graphql.md#2025-04-18_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  person(id: \"24601\") {\n    name\n    occupation\n    location {\n      name\n      population\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using @refetchable Directive with Test Operation\nDESCRIPTION: Example of using @refetchable directive with additional test directives for fragment definition.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/api-reference/graphql/graphql-directives.md#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\ngraphql`\n  fragment FriendsListComponent_user on User\n  @refetchable(\n    queryName: \"FriendsListFetchQuery\"\n    directives: [\"@relay_test_operation\"]\n  ) {\n    ...\n  }\n`;\n```\n\n----------------------------------------\n\nTITLE: Implementing Query Fetching with useQueryLoader in React and Relay\nDESCRIPTION: This snippet demonstrates how to use useQueryLoader to load a query in response to a user event, and then render the results using usePreloadedQuery. It includes error handling and query disposal functionality.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/api-reference/hooks/use-query-loader.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport type {PreloadedQuery} from 'react-relay';\n\nconst {useQueryLoader, usePreloadedQuery} = require('react-relay');\n\nconst AppQuery = graphql`\n  query AppQuery($id: ID!) {\n    user(id: $id) {\n      name\n    }\n  }\n`;\n\nfunction QueryFetcherExample() {\n  const [\n    queryReference,\n    loadQuery,\n    disposeQuery,\n  ] = useQueryLoader(\n    AppQuery,\n  );\n\n  if (queryReference == null) {\n    return (\n      <Button onClick={() => loadQuery({})}> Click to reveal the name </Button>\n    );\n  }\n\n  return (\n    <>\n      <Button onClick={disposeQuery}>\n        Click to hide the name and dispose the query.\n      </Button>\n      <React.Suspense fallback=\"Loading\">\n        <NameDisplay queryReference={queryReference} />\n      </React.Suspense>\n    </>\n  );\n}\n\nfunction NameDisplay({ queryReference }) {\n  const data = usePreloadedQuery(AppQuery, queryReference);\n\n  return <h1>{data.user?.name}</h1>;\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Query Status after Record Invalidation\nDESCRIPTION: Demonstrates how to check a query's status after invalidating a record. The `environment.check()` method will return 'stale' until the query is refetched.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v13.0.0/api-reference/relay-runtime/store.md#2025-04-18_snippet_38\n\nLANGUAGE: javascript\nCODE:\n```\nenvironment.check(query) === 'stale'\n```\n\n----------------------------------------\n\nTITLE: React Component with Relay Fragment Composition: UserComponent\nDESCRIPTION: This JavaScript code defines a React component `UserComponent` that includes another fragment (`UsernameSection_user`) and renders the `UsernameSection` component. It showcases fragment composition where `UserComponent` includes `UsernameSection_user` fragment.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/guided-tour/rendering/fragments.md#2025-04-18_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * UserComponent.react.js\n *\n * Parent Fragment Component\n */\n\nimport type {UserComponent_user$key} from 'UserComponent_user.graphql';\n\nconst React = require('React');\nconst {graphql, useFragment} = require('react-relay');\n\nconst UsernameSection = require('./UsernameSection.react');\n\ntype Props = {\n  user: UserComponent_user$key,\n};\n\nfunction UserComponent(props: Props) {\n  const user = useFragment(\n    graphql`\n      fragment UserComponent_user on User {\n        name\n        age\n        profile_picture(scale: 2) {\n          uri\n        }\n\n        # Include child fragment:\n        ...UsernameSection_user\n      }\n    `,\n    props.user,\n  );\n\n  return (\n    <>\n      <h1>{user.name}</h1>\n      <div>\n        <img src={user.profile_picture?.uri} />\n        {user.age}\n\n        {/* Render child component, passing the _fragment reference_: */}\n        <UsernameSection user={user} />\n      </div>\n    </>\n  );\n}\n\nmodule.exports = UserComponent;\n```\n\n----------------------------------------\n\nTITLE: Implementing Missing Field Handlers in Relay Environment\nDESCRIPTION: Configuration for RelayEnvironment that defines missing field handlers to recognize when different query paths point to the same data. This example handles node, user, and story fields to enable data reuse.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/guided-tour/reusing-cached-data/filling-in-missing-data.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst {ROOT_TYPE, Environment} = require('relay-runtime');\n\nconst missingFieldHandlers = [\n  {\n    handle(field, record, argValues): ?string {\n      // Make sure to add a handler for the node field\n      if (\n        record != null &&\n        record.getType() === ROOT_TYPE &&\n        field.name === 'node' &&\n        argValues.hasOwnProperty('id')\n      ) {\n        return argValues.id\n      }\n      if (\n        record != null &&\n        record.getType() === ROOT_TYPE &&\n        field.name === 'user' &&\n        argValues.hasOwnProperty('id')\n      ) {\n        // If field is user(id: $id), look up the record by the value of $id\n        return argValues.id;\n      }\n      if (\n        record != null &&\n        record.getType() === ROOT_TYPE &&\n        field.name === 'story' &&\n        argValues.hasOwnProperty('story_id')\n      ) {\n        // If field is story(story_id: $story_id), look up the record by the\n        // value of $story_id.\n        return argValues.story_id;\n      }\n      return undefined;\n    },\n    kind: 'linked',\n  },\n];\n\nconst environment = new Environment({/*...*/, missingFieldHandlers});\n```\n\n----------------------------------------\n\nTITLE: Fragment Spreading in Mutations\nDESCRIPTION: Example showing how to spread component fragments in mutation responses for automatic component updates.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/guided-tour/updating-data/graphql-mutations.md#2025-04-18_snippet_4\n\nLANGUAGE: graphql\nCODE:\n```\nmutation FeedbackLikeMutation($input: FeedbackLikeData!) {\n  feedback_like(data: $input) {\n    feedback {\n      ...FeedbackDisplay_feedback\n      ...FeedbackDetail_feedback\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Story Like Mutation in GraphQL\nDESCRIPTION: Example GraphQL mutation showing how to like a story and refetch updated data after the mutation completes.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/principles-and-architecture/thinking-in-graphql.md#2025-04-18_snippet_10\n\nLANGUAGE: graphql\nCODE:\n```\nmutation StoryLike($storyID: String) {\n   storyLike(storyID: $storyID) {\n     likeCount\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Query Status after Invalidation\nDESCRIPTION: Demonstrates how to check a query's status after invalidating the store. The `environment.check()` method will return 'stale' until the query is refetched.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v13.0.0/api-reference/relay-runtime/store.md#2025-04-18_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nenvironment.check(query) === 'stale'\n```\n\n----------------------------------------\n\nTITLE: Creating an Updatable Fragment in Relay\nDESCRIPTION: Defines an updatable fragment for a Story, which allows reading and writing data in the local store using GraphQL syntax. The fragment is annotated with the @updatable directive.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/tutorial/mutations-updates.md#2025-04-18_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction StoryLikeButton({story}) {\n  ...\n      optimisticUpdater: store => {\n        const fragment = graphql`\n          fragment StoryLikeButton_updatable on Story\n            @updatable\n          {\n            likeCount\n            doesViewerLike\n          }\n        `;\n      },\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Search Input in ContactsList React Component\nDESCRIPTION: This snippet demonstrates how to add a search input to the ContactsList component, including state management for the search string.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/tutorial/refetchable-fragments.md#2025-04-18_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport SearchInput from './SearchInput';\n\nconst {useState} = React;\n\nfunction ContactsList({viewer}) {\n  const data = useFragment(ContactsListFragment, viewer);\n  const [searchString, setSearchString] = useState('');\n  const onSearchStringChanged = (value: string) => {\n    setSearchString(value);\n  };\n  return (\n    <Card dim={true}>\n      <h3>Contacts</h3>\n      <SearchInput\n        value={searchString}\n        onChange={onSearchStringChanged}\n      />\n      {data.contacts.map(contact =>\n        <ContactRow key={contact.id} contact={contact} />\n      )}\n    </Card>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using @deleteRecord Directive in Subscriptions\nDESCRIPTION: Demonstrates how to use the @deleteRecord directive in a subscription to delete items from the store in response to subscription events.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/guided-tour/updating-data/graphql-subscriptions.md#2025-04-18_snippet_4\n\nLANGUAGE: graphql\nCODE:\n```\nsubscription DeletePostSubscription($input: DeletePostSubscribeData!) {\n  delete_post_subscribe(data: $input) {\n    deleted_post {\n      id @deleteRecord\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Story Comments Section with Composer in Relay\nDESCRIPTION: This snippet shows how to update a Story Comments Section component to include a comment composer. It demonstrates spreading the composer's fragment into the main fragment.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/tutorial/mutations-updates.md#2025-04-18_snippet_11\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport StoryCommentsComposer from './StoryCommentsComposer';\n\nconst StoryCommentsSectionFragment = graphql`\n  fragment StoryCommentsSectionFragment on Story\n    ...\n  {\n    comments(after: $cursor, first: $count)\n      @connection(key: \"StoryCommentsSectionFragment_comments\")\n    {\n      ...\n    }\n    ...StoryCommentsComposerFragment\n  }\n`\n\nfunction StoryCommentsSection({story}) {\n  ...\n  return (\n    <>\n      <StoryCommentsComposer story={data} />\n      ...\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Writing Basic GraphQL Mutation\nDESCRIPTION: Example of a GraphQL mutation that likes a feedback item, requesting updated feedback data including like status and count.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/guided-tour/updating-data/graphql-mutations.md#2025-04-18_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nmutation FeedbackLikeMutation($input: FeedbackLikeData!) {\n  feedback_like(data: $input) {\n    feedback {\n      id\n      viewer_does_like\n      like_count\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Client Schema Extension in GraphQL\nDESCRIPTION: Extension of the Feedback type to add a custom is_new_comment boolean field\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/guided-tour/updating-data/imperatively-modifying-store-data.md#2025-04-18_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nextend type Feedback {\n  is_new_comment: Boolean\n}\n```\n\n----------------------------------------\n\nTITLE: Augmenting GraphQL Fragment for Newsfeed Pagination\nDESCRIPTION: This snippet demonstrates how to augment a GraphQL fragment to support pagination for a newsfeed, including adding arguments and connection directives.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/tutorial/connections-pagination.md#2025-04-18_snippet_10\n\nLANGUAGE: graphql\nCODE:\n```\nconst NewsfeedContentsFragment = graphql`\n  fragment NewsfeedContentsFragment on Query\n    @argumentDefinitions (\n      cursor: { type: \"String\" }\n      count: { type: \"Int\", defaultValue: 3 }\n    )\n    @refetchable(queryName: \"NewsfeedContentsRefetchQuery\")\n  {\n    viewer {\n      newsfeedStories(after: $cursor, first: $count)\n        @connection(key: \"NewsfeedContentsFragment_newsfeedStories\")\n      {\n        edges {\n          node {\n            id\n            ...StoryFragment\n          }\n        }\n      }\n    }\n  }\n`;\n```\n\n----------------------------------------\n\nTITLE: Implementing Actor Interface with Person Type\nDESCRIPTION: This snippet shows the implementation of the 'Actor' interface by defining the 'Person' type, which must include all the fields from the 'Actor' interface along with additional fields specific to 'Person'.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/tutorial/interfaces-polymorphism.md#2025-04-18_snippet_2\n\nLANGUAGE: graphql\nCODE:\n```\ntype Person implements Actor {\n  id: ID!\n  name: String\n  profilePicture: Image\n  joined: DateTime\n  email: String\n  location: Location\n}\n```\n\n----------------------------------------\n\nTITLE: Assigning from Node to User with Inline Fragment\nDESCRIPTION: This snippet demonstrates how to use an inline fragment to assign a Node type to a User type using a Relay fragment and validation of the type.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/guided-tour/updating-data/imperatively-modifying-linked-fields.md#2025-04-18_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst data = useFragment(graphql`\n  fragment AssignBestFriendButton_someType on Query {\n    node(id: \"4\") {\n      ... on User {\n        __typename\n        ...AssignableBestFriendButton_assignable_user\n      }\n    }\n  }\n`, queryRef);\n\nconst environment = useRelayEnvironment();\nconst onClick = () => {\n  const updatableData = commitLocalUpdate(\n    environment,\n    (store: RecordSourceSelectorProxy) => {\n      const {updatableData} = store.readUpdatableQuery(\n          graphql`\n            query AssignBestFriendButtonUpdatableQuery\n            @updatable {\n              viewer {\n                best_friend {\n                  ...AssignableBestFriendButton_assignable_user\n                }\n              }\n            }\n          `,\n          {}\n        );\n\n      if (data.node != null && data.node.__typename === \"User\" && updatableData.viewer != null) {\n        updatableData.viewer.best_friend = data.node;\n      }\n    }\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Creating a New Record in Relay Store\nDESCRIPTION: Example of creating a new record in the Relay Store using the create method of RecordSourceSelectorProxy. It takes a dataID and typeName as arguments and returns a RecordProxy.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/api-reference/relay-runtime/store.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst record = store.create(dataID, 'Todo');\n```\n\n----------------------------------------\n\nTITLE: Configuring package.json for Compiling and Pushing Queries\nDESCRIPTION: Script configuration in package.json for compiling Relay queries and pushing them to a server for persisted query handling.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/guides/persisted-queries.md#2025-04-18_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n\"scripts\": {\n  \"push-queries\": \"node ./pushQueries.js\",\n  \"persist-server\": \"node ./relayLocalPersisting.js\",\n  \"relay\": \"relay-compiler && npm run push-queries\"\n}\n}\n```\n\n----------------------------------------\n\nTITLE: Using Query Variables in Relay Components - JavaScript\nDESCRIPTION: This JavaScript snippet demonstrates how to create a Relay component that utilizes a fragment with global query variables. It ensures that queries rendering this fragment declare the variables appropriately.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/guided-tour/rendering/variables.md#2025-04-18_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nfunction UserComponent(props: Props) {\n  const data = useFragment(\n    graphql`\n    fragment UserComponent_user on User {\n      name\n      profile_picture(scale: $scale) {\n        uri\n      }\n    }\n    `,\n    props.user,\n  );\n\n  return (...);\n}\n```\n\n----------------------------------------\n\nTITLE: Using ConnectionHandler.getConnectionID to Access Connection Records in Relay\nDESCRIPTION: This snippet shows how to access a connection record by using the ConnectionHandler.getConnectionID API when you have access to the ID of the parent record that holds the connection.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/guided-tour/list-data/updating-connections.md#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst {ConnectionHandler} = require('relay-runtime');\n\nfunction updater(store: RecordSourceSelectorProxy) {\n  // Get the connection ID\n  const connectionID = ConnectionHandler.getConnectionID(\n    storyID, // passed as input to the mutation/subscription\n    'StoryComponent_story_comments_connection',\n  );\n\n  // Get the connection record\n  const connectionRecord = store.get(connectionID);\n\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Using Waterfall Directive with Server Type Fields\nDESCRIPTION: Example of using the @waterfall directive when querying a server type field returned by a Relay Resolver. This indicates a potential network roundtrip.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/guides/relay-resolvers/return-types.md#2025-04-18_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nfunction Post() {\n  const data = useLazyLoadQuery(graphql`\n    query PostQuery {\n      post {\n        author @waterfall {\n          name\n        }\n      }\n    }`, {});\n  return <p>{data.post.author.name}</p>;\n}\n```\n\n----------------------------------------\n\nTITLE: Using @inline Directive with readInlineData in Relay\nDESCRIPTION: The @inline directive allows reading data outside of the render phase or from outside React. This example demonstrates defining an inline fragment and using readInlineData to access the data in a non-React function.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/api-reference/graphql/graphql-directives.md#2025-04-18_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport {graphql, readInlineData} from 'react-relay';\n\n// non-React function called from React\nfunction processItemData(itemRef) {\n  const item = readInlineData(graphql`\n    fragment processItemData_item on Item @inline {\n      title\n      price\n      creator {\n        name\n      }\n    }\n  `, itemRef);\n  sendToThirdPartyApi({\n    title: item.title,\n    price: item.price,\n    creatorName: item.creator.name\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Relay Components with queueOperationResolver\nDESCRIPTION: This example demonstrates how to test a Relay-powered component using createMockEnvironment and queueOperationResolver. It shows two test cases: one for successful data rendering using MockPayloadGenerator to generate mock data, and another for testing error handling by returning an error from the resolver.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v13.0.0/guides/testing-relay-components.md#2025-04-18_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\n// Say you have a component with the QueryRenderer\nconst MyAwesomeViewRoot = require('MyAwesomeViewRoot');\nconst {\n  createMockEnvironment,\n  MockPayloadGenerator,\n} = require('relay-test-utils');\n\ntest('Data Render', () => {\n  const environment = createMockEnvironment();\n  environment.mock.queueOperationResolver(operation =>\n    MockPayloadGenerator.generate(operation),\n  );\n\n  const renderer = ReactTestRenderer.create(\n    <MyAwesomeViewRoot environment={environment} />,\n  );\n\n  // At this point operation will be resolved\n  // and the data for a query will be available in the store\n  expect(\n    renderer.root.find(node => node.props['data-testid'] === 'myButton'),\n  ).toBeDefined();\n});\n\ntest('Error State', () => {\n  const environment = createMockEnvironment();\n  environment.mock.queueOperationResolver(() =>\n    new Error('Uh-oh'),\n  );\n  const renderer = ReactTestRenderer.create(\n    <MyAwesomeViewRoot environment={environment} />,\n  );\n\n  expect(\n    renderer.root.find(item => (item.props.testID = 'errorMessage')),\n  ).toBeDefined();\n});\n```\n\n----------------------------------------\n\nTITLE: Retrieving a record from the Relay Store\nDESCRIPTION: This code retrieves a record from the Relay Store using the get method with the provided dataID, returning a RecordProxy to interact with the retrieved record.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/api-reference/relay-runtime/store.md#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst record = store.get(dataID);\n```\n\n----------------------------------------\n\nTITLE: Initializing Local State in Relay\nDESCRIPTION: Demonstrates how to set initial local state for client-side schema fields using commitLocalUpdate.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/guides/client-schema-extensions.md#2025-04-18_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\ncommitLocalUpdate(environment, store => {\n  const user = store.getRoot().getLinkedRecord('viewer');\n\n  // initialize user notes to an empty array.\n  user.setLinkedRecords([], 'notes');\n});\n```\n\n----------------------------------------\n\nTITLE: Updating GraphQL Query for Multiple Stories\nDESCRIPTION: Modified GraphQL query to fetch multiple stories instead of a single story using topStories field.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/tutorial/arrays-lists.md#2025-04-18_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst NewsfeedQuery = graphql`\n  query NewsfeedQuery {\n    // change-line\n    topStories {\n      ...StoryFragment\n    }\n  }\n`;\n```\n\n----------------------------------------\n\nTITLE: Using Provided Variables with @argumentDefinitions\nDESCRIPTION: Demonstrates how to use provided variables in a fragment with @argumentDefinitions and its corresponding provider implementation.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/api-reference/graphql/graphql-directives.md#2025-04-18_snippet_2\n\nLANGUAGE: graphql\nCODE:\n```\nfragment TodoItem_item on TodoList\n@argumentDefinitions(\n  include_timestamp: {\n    type: \"Boolean!\"\n    provider: \"Todo_ShouldIncludeTimestamp.relayprovider\"\n  }\n) {\n  timestamp @include(if: $include_timestamp)\n  text\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// Todo_ShouldIncludeTimestamp.relayprovider.js\nexport default {\n  get(): boolean {\n    // must always return true or false for a given run\n    return check('todo_should_include_timestamp');\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Enhanced Actor Fragment with Type Refinements\nDESCRIPTION: GraphQL fragment using type refinements to access type-specific fields for Organization and Person types\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/tutorial/interfaces-polymorphism.md#2025-04-18_snippet_4\n\nLANGUAGE: graphql\nCODE:\n```\nfragment PosterDetailsHovercardContentsBodyFragment on Actor {\n  name\n  joined\n  profilePicture {\n    ...ImageFragment\n  }\n  ... on Organization {\n    organizationKind\n  }\n  ... on Person {\n    location {\n      name\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Passing Fragment Argument as Field Argument in GraphQL\nDESCRIPTION: This snippet shows how to pass the fragment argument as an argument to the contacts field in the ContactsListFragment.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/tutorial/refetchable-fragments.md#2025-04-18_snippet_3\n\nLANGUAGE: graphql\nCODE:\n```\nconst ContactsListFragment = graphql`\n  fragment ContactsListFragment on Viewer\n    @argumentDefinitions(\n      search: {type: \"String\", defaultValue: null}\n    )\n  {\n    // change-line\n    contacts(search: $search) {\n      id\n      ...ContactRowFragment\n    }\n  }\n`;\n```\n\n----------------------------------------\n\nTITLE: Updating Local Data with commitLocalUpdate in Relay\nDESCRIPTION: Demonstrates how to update an existing Note record in the local store using commitLocalUpdate.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/guides/client-schema-extensions.md#2025-04-18_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nfunction updateUserNote(environment, dataID, body, title) {\n  commitLocalUpdate(environment, store => {\n    const note = store.get(dataID);\n\n    note.setValue(body, 'body');\n    note.setValue(title, 'title')\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Relay Data Fetching in a React Application\nDESCRIPTION: Complete implementation of a React application that uses Relay to fetch data from GitHub's GraphQL API. The code demonstrates setting up the Relay environment provider, defining a GraphQL query, preloading query data, and using Relay hooks to access fetched data within React components.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-experimental/RelayHooks-StepByStep.md#2025-04-18_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport React from 'react';\nimport './App.css';\nimport fetchGraphQL from './fetchGraphQL';\nimport graphql from 'babel-plugin-relay/macro';\nimport {\n  RelayEnvironmentProvider,\n  preloadQuery,\n  usePreloadedQuery,\n} from 'react-relay/hooks';\nimport RelayEnvironment from './RelayEnvironment';\n\nconst { Suspense } = React;\n\n// Define a query\nconst RepositoryNameQuery = graphql`\n  query AppRepositoryNameQuery {\n    repository(owner: \"facebook\", name: \"relay\") {\n      name\n    }\n  }\n`;\n\n// Immediately load the query as our app starts. For a real app, we'd move this\n// into our routing configuration, preloading data as we transition to new routes.\nconst preloadedQuery = preloadQuery(RelayEnvironment, RepositoryNameQuery, {\n  /* query variables */\n});\n\n// Inner component that reads the preloaded query results via `usePreloadedQuery()`.\n// This works as follows:\n// - If the query has completed, it returns the results of the query.\n// - If the query is still pending, it \"suspends\" (indicates to React that the\n//   component isn't ready to render yet). This will show the nearest <Suspense>\n//   fallback.\n// - If the query failed, it throws the failure error. For simplicity we aren't\n//   handling the failure case here.\nfunction App(props) {\n  const data = usePreloadedQuery(RepositoryNameQuery, props.preloadedQuery);\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <p>{data.repository.name}</p>\n      </header>\n    </div>\n  );\n}\n\n// The above component needs to know how to access the Relay environment, and we\n// need to specify a fallback in case it suspends:\n// - <RelayEnvironmentProvider> tells child components how to talk to the current\n//   Relay Environment instance\n// - <Suspense> specifies a fallback in case a child suspends.\nfunction AppRoot(props) {\n  return (\n    <RelayEnvironmentProvider environment={RelayEnvironment}>\n      <Suspense fallback={'Loading...'}>\n        <App preloadedQuery={preloadedQuery} />\n      </Suspense>\n    </RelayEnvironmentProvider>\n  );\n}\n\nexport default AppRoot;\n```\n\n----------------------------------------\n\nTITLE: Using Image Fragment with Arguments in PosterByline Component\nDESCRIPTION: This code illustrates the use of ImageFragment with width and height arguments within the PosterByline component. By specifying dimensions, the profile picture is efficiently fetched, adhering to the component's display requirements while conserving resources.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/tutorial/fragments-1.md#2025-04-18_snippet_13\n\nLANGUAGE: graphql\nCODE:\n```\nconst PosterBylineFragment = graphql`\n  fragment PosterBylineFragment on Actor {\n    name\n    profilePicture {\n      // change-line\n      ...ImageFragment @arguments(width: 60, height: 60)\n    }\n  }\n`;\n```\n\n----------------------------------------\n\nTITLE: Testing Relay Pagination Components\nDESCRIPTION: Demonstrates testing pagination components with load more functionality, including custom ID generation and page info mock data.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/guides/testing-relay-components.md#2025-04-18_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\ntest('`Pagination` Container', () => {\n  const environment = createMockEnvironment();\n  const TestRenderer = () => {\n    const data = useLazyLoadQuery(\n      graphql`\n        query TestQuery @relay_test_operation {\n          myConnection: node(id: \"test-id\") {\n            connection {\n              # Spread the pagination fragment you want to test here\n              ...MyConnectionFragment\n            }\n          }\n        }\n      `,\n      {},\n    );\n    return <MyPaginationContainer connection={data.myConnection.connection} />\n  };\n\n  const renderer = ReactTestRenderer.create(\n    <RelayEnvironmentProvider environment={environment}>\n      <Suspense fallback=\"Loading...\">\n        <TestRenderer />\n      </Suspense>\n    </RelayEnvironmentProvider>\n  );\n\n  ReactTestRenderer.act(() => {\n    environment.mock.resolveMostRecentOperation(operation =>\n      MockPayloadGenerator.generate(operation, {\n        ID(_, generateId) {\n          return `first-page-id-${generateId()}`;\n        },\n        PageInfo() {\n          return {\n            has_next_page: true,\n          };\n        },\n      }),\n    );\n  });\n\n  const loadMore = renderer.root.find(node => node.props['data-testid'] === 'loadMore')\n  expect(loadMore.props.disabled).toBe(false);\n  loadMore.props.onClick();\n\n  ReactTestRenderer.act(() => {\n    environment.mock.resolveMostRecentOperation(operation =>\n      MockPayloadGenerator.generate(operation, {\n        ID(_, generateId) {\n          return `second-page-id-${generateId()}`;\n        },\n        PageInfo() {\n          return {\n            has_next_page: false,\n          };\n        },\n      }),\n    );\n  });\n\n  expect(loadMore.props.disabled).toBe(true);\n});\n```\n\n----------------------------------------\n\nTITLE: Relay Compiler Configuration File\nDESCRIPTION: This JavaScript code snippet shows the basic structure of the `relay.config.js` file, which is used to configure the Relay Compiler.  It specifies the source directory, schema location, and files to exclude from compilation.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v13.0.0/getting-started/installation-and-setup.md#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n\"// relay.config.js\\nmodule.exports = {\\n  // ...\\n  // Configuration options accepted by the `relay-compiler` command-line tool and `babel-plugin-relay`.\\n  src: \\\"./src\\\",\\n  schema: \\\"./data/schema.graphql\\\",\\n  exclude: [\\\"**/node_modules/**\\\", \\\"**/__mocks__/**\\\", \\\"**/__generated__/**\\\"],\\n}\"\n```\n\n----------------------------------------\n\nTITLE: Using Fragment Arguments in PosterBylineFragment (GraphQL)\nDESCRIPTION: Updated PosterBylineFragment that passes both width and height arguments to ImageFragment. This demonstrates how different components can request differently sized images for the same component.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/tutorial/fragments-1.md#2025-04-18_snippet_14\n\nLANGUAGE: graphql\nCODE:\n```\nconst PosterBylineFragment = graphql`\n  fragment PosterBylineFragment on Actor {\n    name\n    profilePicture {\n      // change-line\n      ...ImageFragment @arguments(width: 60, height: 60)\n    }\n  }\n`;\n```\n\n----------------------------------------\n\nTITLE: Testing Data Rendering with QueryRenderer - JavaScript\nDESCRIPTION: This snippet illustrates how to test a component utilizing Relay's QueryRenderer by mocking environment operations and verifying that the correct elements render based on the provided data.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/guides/testing-relay-components.md#2025-04-18_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\n// Say you have a component with the QueryRenderer\nconst MyAwesomeViewRoot = require('MyAwesomeViewRoot');\nconst {\n  createMockEnvironment,\n  MockPayloadGenerator,\n} = require('relay-test-utils');\n\ntest('Data Render', () => {\n  const environment = createMockEnvironment();\n  environment.mock.queueOperationResolver(operation =>\n    MockPayloadGenerator.generate(operation),\n  );\n\n  const renderer = ReactTestRenderer.create(\n    <MyAwesomeViewRoot environment={environment} />, \n  );\n\n  // At this point operation will be resolved\n  // and the data for a query will be available in the store\n  expect(\n    renderer.root.find(node => node.props['data-testid'] === 'myButton'),\n  ).toBeDefined();\n});\n\ntest('Error State', () => {\n  const environment = createMockEnvironment();\n  environment.mock.queueOperationResolver(() =>\n    new Error('Uh-oh'),\n  );\n  const renderer = ReactTestRenderer.create(\n    <MyAwesomeViewRoot environment={environment} />, \n  );\n\n  expect(\n    renderer.root.find(item => (item.props.testID = 'errorMessage')),\n  ).toBeDefined();\n});\n\n```\n\n----------------------------------------\n\nTITLE: Creating Assignable Fragment in Relay with GraphQL\nDESCRIPTION: This Relay fragment is defined on the `User` type and uses the `@assignable` directive, making it an assignable fragment. Assignable fragments are used to ensure type safety when assigning linked fields in the Relay store.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/guided-tour/updating-data/imperatively-modifying-linked-fields.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// AssignBestFriendButton.react.js\ngraphql`\n  fragment AssignBestFriendButton_assignable_user on User @assignable {\n    __typename\n  }\n`;\n```\n\n----------------------------------------\n\nTITLE: Implementing @argumentDefinitions in a GraphQL Fragment for Pagination in Relay\nDESCRIPTION: This snippet shows how to modify a GraphQL fragment to accept page size and cursor as arguments rather than using hard-coded values. The @argumentDefinitions directive is added to enable pagination parameters.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/tutorial/connections-pagination.md#2025-04-18_snippet_4\n\nLANGUAGE: graphql\nCODE:\n```\nconst StoryCommentsSectionFragment = graphql`\n  fragment StoryCommentsSectionFragment on Story\n    // change\n    @argumentDefinitions(\n      cursor: { type: \"String\" }\n      count: { type: \"Int\", defaultValue: 3 }\n    )\n    // end-change\n  {\n    // change-line\n    comments(after: $cursor, first: $count) {\n      edges {\n        node {\n          ...CommentFragment\n        }\n      }\n      pageInfo {\n        hasNextPage\n      }\n    }\n  }\n`;\n```\n\n----------------------------------------\n\nTITLE: Sample GraphQL Response JSON\nDESCRIPTION: A sample JSON response structure for a GraphQL query request fetching user and viewer actor information.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/guided-tour/rendering/queries.md#2025-04-18_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"user\": {\n      \"id\": \"4\",\n      \"name\": \"Mark Zuckerberg\",\n      \"username\": \"zuck\"\n    },\n    \"viewer\": {\n      \"actor\": {\n        \"name\": \"Your Name\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Sample JSON Response for GraphQL Query\nDESCRIPTION: Example of a JSON response matching the structure of the GraphQL query, including user and viewer data.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/guided-tour/rendering/queries.md#2025-04-18_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"user\": {\n      \"id\": \"4\",\n      \"name\": \"Mark Zuckerberg\",\n      \"username\": \"zuck\"\n    },\n    \"viewer\": {\n      \"actor\": {\n        \"name\": \"Your Name\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining MutationParameters Type in TypeScript\nDESCRIPTION: Defines the MutationParameters interface that specifies the expected structure for mutation parameter objects in Relay. This type provides typing for response, variables, and optional raw response data.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/api-reference/types/MutationConfig.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nType `MutationParameters`\n```\n\n----------------------------------------\n\nTITLE: GraphQL Query Definition with Relay\nDESCRIPTION: Definition of a GraphQL query using the graphql tag to fetch story data including title, summary, poster details, and thumbnail.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/tutorial/queries-1.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { graphql } from 'relay-runtime';\n\nconst NewsfeedQuery = graphql`\n  query NewsfeedQuery {\n    topStory {\n      title\n      summary\n      poster {\n        name\n        profilePicture {\n          url\n        }\n      }\n      thumbnail {\n        url\n      }\n    }\n  }\n`;\n```\n\n----------------------------------------\n\nTITLE: Implementing Suspense in Relay Live Resolver\nDESCRIPTION: Demonstrates how to implement a Live Resolver that handles loading states using suspense sentinel. The resolver checks if data is loading and returns a suspense sentinel value, causing consumers to suspend until actual data is available.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/guides/relay-resolvers/suspense.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {suspenseSentinel} from 'relay-runtime';\n\n/**\n * @RelayResolver Query.myIp: String\n * @live\n */\nexport function myIp(): LiveState<string> {\n  return {\n    read: () => {\n      const state = store.getState();\n      const ipLoadObject = state.ip;\n      if (ipLoadObject.status === \"LOADING\") {\n        return suspenseSentinel();\n      }\n      return state.ip;\n    },\n    subscribe: (cb) => {\n      return store.subscribe(cb);\n    },\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Client3DHelloWorld Relay Resolver\nDESCRIPTION: This TypeScript snippet defines the Client3DHelloWorld Relay Resolver, implementing the IClient3D interface and providing the data resolver function.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/guides/data-driven-dependencies/client-3d.md#2025-04-18_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * @RelayResolver Client3DHelloWorld implements IClient3D\n */\nfunction Client3DHelloWorld(id: DataID): ?Client3DModel {\n  if (id === INVALID_ID) {\n    return null;\n  }\n  return {\n    __id: id,\n  };\n}\n\n/**\n * @RelayResolver Client3DHelloWorld.data: Client3DData\n */\nfunction data(client3DModel: Client3DModel): Client3DData {\n  return {\n    type: 'HELLO_WORLD',\n    info: 'someHelloWorldInfo',\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Manually Removing Edge with ConnectionHandler.deleteNode\nDESCRIPTION: This updater function demonstrates how to manually remove an edge from a connection using ConnectionHandler.deleteNode. This method finds and removes an edge by the ID of its node.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v13.0.0/guided-tour/list-data/updating-connections.md#2025-04-18_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nconst {ConnectionHandler} = require('RelayModern');\n\nfunction updater(store: RecordSourceSelectorProxy) {\n  const storyRecord = store.get(storyID);\n  const connectionRecord = ConnectionHandler.getConnection(\n    storyRecord,\n    'StoryComponent_story_comments_connection',\n  );\n\n  // Remove edge from the connection, given the ID of the node\n  ConnectionHandler.deleteNode(\n    connectionRecord,\n    commentIDToDelete,\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Extending Client Schema in GraphQL\nDESCRIPTION: This snippet illustrates how to extend the server's GraphQL schema on the client side by defining a new type called `Setting` in the client schema file. It also shows how to extend the existing `Root` type to include a field for settings of type `Setting`. This enables client-side queries to fetch settings data as part of the overall GraphQL queries.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-experimental/Modern-GraphQLInRelay.md#2025-04-18_snippet_8\n\nLANGUAGE: graphql\nCODE:\n```\ntype Setting {\n  name: String!\n  active: Boolean!\n}\n```\n\nLANGUAGE: graphql\nCODE:\n```\nextend type Root {\n  settings: [Setting]\n}\n```\n\n----------------------------------------\n\nTITLE: Defining EntryPointContainer Component in React/Relay\nDESCRIPTION: React component definition for EntryPointContainer that renders a preloaded EntryPoint. Takes entryPointReference from loadEntryPoint or useEntryPointLoader hook, and runtime props to be passed to the Component.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/api-reference/entrypoint-apis/entrypoint-container.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nfunction EntryPointContainer({\n  entryPointReference,\n  props,\n}: {\n  +entryPointReference: PreloadedEntryPoint<TEntryPointComponent>,\n  +props: TRuntimeProps,\n}): ReactElement\n```\n\n----------------------------------------\n\nTITLE: Using @relay(mask: false) directive in GraphQL fragment\nDESCRIPTION: Example of applying the @relay(mask: false) directive to a GraphQL fragment, which prevents data masking and makes fields directly available to the parent. This is generally considered an anti-pattern but can be useful for nested or recursive data within a single component.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/api-reference/graphql/graphql-directives.md#2025-04-18_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\ngraphql`\n  fragment Component_internUser on InternUser @relay(mask: false) {\n    id\n    name\n  }\n`;\n```\n\n----------------------------------------\n\nTITLE: Sending Mutation - JavaScript\nDESCRIPTION: This snippet shows how to define and test a mutation function using Relay's commitMutation API. It includes a test case to verify if the mutation calls the onCompleted callback successfully.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/guides/testing-relay-components.md#2025-04-18_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n// Say, you have a mutation function\nfunction sendMutation(environment, onCompleted, onError, variables)\n  commitMutation(environment, {\n    mutation: graphql`...`,\n    onCompleted,\n    onError,\n    variables,\n  });\n\n// Example test may be written like so\ntest('it should send mutation', () => {\n  const environment = createMockEnvironment();\n  const onCompleted = jest.fn();\n  sendMutation(environment, onCompleted, jest.fn(), {});\n  const operation = environment.mock.getMostRecentOperation();\n\n  ReactTestRenderer.act(() => {\n    environment.mock.resolve(\n      operation,\n      MockPayloadGenerator.generate(operation)\n    );\n  });\n\n  expect(onCompleted).toBeCalled();\n});\n\n```\n\n----------------------------------------\n\nTITLE: Refreshing Components with Fragment Spreading in Subscriptions\nDESCRIPTION: Demonstrates how to spread component fragments within subscriptions to ensure components are refreshed when subscription events occur, promoting better data consistency and component independence.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/guided-tour/updating-data/graphql-subscriptions.md#2025-04-18_snippet_4\n\nLANGUAGE: graphql\nCODE:\n```\nsubscription FeedbackLikeSubscription($input: FeedbackLikeSubscribeData!) {\n  feedback_like_subscribe(data: $input) {\n    feedback {\n      ...FeedbackDisplay_feedback\n      ...FeedbackDetail_feedback\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a GraphQL Query with Variables in Relay\nDESCRIPTION: A basic GraphQL query declaration that uses a variable $id of type ID! to fetch user data. The variable is used as an input to the user query field.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/guided-tour/rendering/variables.md#2025-04-18_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nquery UserQuery($id: ID!) {\n  # The value of $id is used as input to the user() call:\n  user(id: $id) {\n    id\n    name\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Fragments in a Dictionary Component\nDESCRIPTION: Example of a component file that defines two related GraphQL fragments for a dictionary application. The first fragment references the second one, demonstrating composition of fragments.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v13.0.0/guides/compiler.md#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst DictionaryWordFragment = graphql`\n  fragment DictionaryComponent_word on Word {\n    id\n    definition {\n      ...DictionaryComponent_definition\n    }\n  }\n`\n\nconst DictionaryDefinitionFragment = graphql`\n  fragment DictionaryComponent_definition on WordDefinition {\n    text\n    image\n  }\n`\n```\n\n----------------------------------------\n\nTITLE: Adding React Keys with GraphQL IDs\nDESCRIPTION: Final implementation showing how to properly key list items using GraphQL node IDs and combine individual fields with fragment spreads.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/tutorial/arrays-lists.md#2025-04-18_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst NewsfeedQuery = graphql`\n  query NewsfeedQuery {\n    topStories {\n      // change-line\n      id\n      ...StoryFragment\n    }\n  }\n`;\n\nexport default function Newsfeed({}) {\n  const data = useLazyLoadQuery<NewsfeedQueryType>(NewsfeedQuery, {});\n  const stories = data.topStories;\n  return (\n    <div className=\"newsfeed\">\n      {stories.map(story => (\n        <Story\n          // change-line\n          key={story.id}\n          story={story}\n        />\n      ))}\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Relay Environment with useRelayEnvironment Hook in JavaScript\nDESCRIPTION: Demonstrates how to use the useRelayEnvironment hook to access a Relay environment within a React component. The environment can then be used for operations like committing mutations. The environment must be previously set using RelayEnvironmentProvider.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/api-reference/hooks/use-relay-environment.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst React = require('React');\n\nconst {useRelayEnvironment} = require('react-relay');\n\nfunction MyComponent() {\n  const environment = useRelayEnvironment();\n\n  const handler = useCallback(() => {\n    // For example, can be used to pass the environment to functions\n    // that require a Relay environment.\n    commitMutation(environment, ...);\n  }, [environment])\n\n  return (...);\n}\n\nmodule.exports = MyComponent;\n```\n\n----------------------------------------\n\nTITLE: Store Creation Example\nDESCRIPTION: Example showing how to create a new record in the Relay store.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/api-reference/relay-runtime/store.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst record = store.create(dataID, 'Todo');\n```\n\n----------------------------------------\n\nTITLE: Using a GraphQL Fragment in a React Functional Component\nDESCRIPTION: This code shows how to use the useFragment hook in a React functional component to read data from the Relay store based on a previously defined GraphQL fragment.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/principles-and-architecture/thinking-in-relay.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexport default function AuthorDetails(props) {\n  const data = useFragment(authorDetailsFragment, props.author);\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Legacy PaginationContainer Implementation in React Relay\nDESCRIPTION: Example of the older class-based PaginationContainer pattern in Relay, showing pagination implementation with createPaginationContainer HOC. Includes connection management, loading states, and pagination configuration options.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v13.0.0/migration-and-compatibility/relay-hooks-and-legacy-container-apis.md#2025-04-18_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as React from 'React';\nimport {graphql, createPaginationContainer} from 'react-relay';\n\nclass UserContainerComponent extends React.Component {\n  render(): React.Node {\n    const isLoading = this.props.relay.isLoading() || this.state.loading;\n    const hasMore = this.props.relay.hasMore();\n\n    return (\n      <>\n        <FriendsList friends={this.props.user?.friends} />\n        <Button\n          onClick={() => this.loadMore()}\n          disabled={!hasMore || isLoading}>\n          Load More\n          {isLoading && <InlineSpinner />}\n        </Button>\n      </>\n    );\n  }\n\n  loadMore() {\n    if (\n      !this.props.relay.hasMore() ||\n      this.props.relay.isLoading() ||\n      this.state.loading\n    ) {\n      return;\n    }\n\n    this.setState({loading: true});\n\n    this.props.relay.loadMore(5, () => this.setState({loading: false}));\n  }\n}\n\nexport default createPaginationContainer(\n  UserContainerComponent,\n  {\n    user: graphql`\n      fragment UserContainerComponent_user on User\n      @argumentDefinitions(count: {type: \"Int!\"}, cursor: {type: \"ID\"})\n      @refetchable(queryName: \"UserComponentRefetchQuery\") {\n        friends(first: $count, after: $cursor)\n          @connection(key: \"UserComponent_user_friends\") {\n          edges {\n            node {\n              name\n            }\n          }\n        }\n      }\n    `,\n  },\n  {\n    direction: 'forward',\n    getConnectionFromProps(props: Props) {\n      return props.user?.friends;\n    },\n    getFragmentVariables(vars, count) {\n      return {...vars, count};\n    },\n    getVariables(props: Props, {count, cursor}) {\n      return {\n        cursor,\n        count,\n      };\n    },\n    query: graphql`\n      query UserContainerComponentQuery {\n        viewer {\n          actor {\n            ... on User {\n              ...UserContainerComponent_user @arguments(count: 10)\n            }\n          }\n        }\n      }\n    `,\n  },\n);\n```\n\n----------------------------------------\n\nTITLE: Declaring a Fragment in JavaScript with Relay\nDESCRIPTION: How to declare a GraphQL fragment in JavaScript code using the graphql tag from Relay.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/guided-tour/rendering/fragments.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst {graphql} = require('react-relay');\n\nconst userFragment = graphql`\n  fragment UserFragment_user on User {\n    name\n    age\n    profile_picture(scale: 2) {\n      uri\n    }\n  }\n`;\n```\n\n----------------------------------------\n\nTITLE: Modern usePaginationFragment Implementation in Relay\nDESCRIPTION: Example of the same pagination functionality implemented using the modern usePaginationFragment hook API. Shows simplified approach without need for complex configuration options.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/migration-and-compatibility/relay-hooks-and-legacy-container-apis.md#2025-04-18_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as React from 'React';\nimport {graphql, usePaginationFragment} from 'react-relay';\n\nexport default function UserComponent(props: Props) {\n  const {data, loadNext, hasNext, isLoadingNext} = usePaginationFragment(\n    graphql`\n      fragment UserComponent_user on User\n      @refetchable(queryName: \"UserComponentRefetchQuery\") {\n        friends(first: $count, after: $after)\n          @connection(key: \"UserComponent_user_friends\") {\n          edges {\n            node {\n              name\n            }\n          }\n        }\n      }\n    `,\n    props.user,\n  );\n\n  const handleClick = useCallback(() => {\n    loadNext(5)\n  }, [loadNext])\n\n  return (\n    <>\n      <FriendsList friends={data?.friends?.edges} />\n      <Button onClick={handleClick} disabled={!hasNext || isLoadingNext}>\n        Load More\n        {isLoadingNext && <InlineSpinner />}\n      </Button>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Manually Retaining Relay Queries to Prevent Garbage Collection\nDESCRIPTION: This snippet demonstrates how to manually retain a query in Relay to prevent its data from being garbage collected. It shows how to create an operation descriptor from a GraphQL query, retain it using environment.retain(), and properly dispose of it when no longer needed.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/guided-tour/managing-data-outside-react/retaining-queries.md#2025-04-18_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nconst {\n  createOperationDescriptor,\n  getRequest,\n  graphql,\n} = require('relay-runtime')\n\n// Query graphql object\nconst query = graphql`...`;\n\n// Construct Relay's internal representation of the query\nconst queryRequest = getRequest(query);\nconst queryDescriptor = createOperationDescriptor(\n  queryRequest,\n  variables\n);\n\n// Retain query; this will prevent the data for this query and\n// variables from being gabrage collected by Relay\nconst disposable = environment.retain(queryDescriptor);\n\n// Disposing of the disposable will release the data for this query\n// and variables, meaning that it can be deleted at any moment\n// by Relay's garbage collection if it hasn't been retained elsewhere\ndisposable.dispose();\n```\n\n----------------------------------------\n\nTITLE: Using GraphQL Literal for Queries in JavaScript\nDESCRIPTION: This snippet demonstrates the use of GraphQL literals as a template literal syntax to define queries in JavaScript. It is essential for creating a pre-processed GraphQL query that is transformed into a GraphQLTaggedNode containing an AST representation.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/glossary/glossary.md#2025-04-18_snippet_11\n\nLANGUAGE: JavaScript\nCODE:\n```\ngraphql`...`\n```\n\n----------------------------------------\n\nTITLE: Committing Comment Creation Mutation with Updater\nDESCRIPTION: Example of using an updater function to imperatively add a new comment to a connection in the Relay store after a successful mutation. Demonstrates how to manipulate store data manually using ConnectionHandler APIs.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/guided-tour/updating-data/imperatively-modifying-store-data-legacy.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nfunction commitCommentCreateMutation(\n  environment: Environment,\n  feedbackID: string,\n  input: CommentCreateData,\n) {\n  return commitMutation<CreateCommentMutation>(environment, {\n    mutation: graphql`\n      mutation CreateCommentMutation($input: CommentCreateData!) {\n        comment_create(input: $input) {\n          comment_edge {\n            cursor\n            node {\n              body {\n                text\n              }\n            }\n          }\n        }\n      }\n    `,\n    variables: {input},\n    updater: (store: RecordSourceSelectorProxy, _response: ?CreateCommentMutation$data) => {\n      const feedbackRecord = store.get(feedbackID);\n\n      const connectionRecord = ConnectionHandler.getConnection(\n        feedbackRecord,\n        'CommentsComponent_comments_connection',\n      );\n\n      const payload = store.getRootField('comment_create');\n\n      const serverEdge = payload.getLinkedRecord('comment_edge');\n\n      const newEdge = ConnectionHandler.buildConnectionEdge(\n        store,\n        connectionRecord,\n        serverEdge,\n      );\n\n      ConnectionHandler.insertEdgeAfter(\n        connectionRecord,\n        newEdge,\n      );\n    },\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Connection Directive for Pagination\nDESCRIPTION: Demonstrates how to mark a field as a connection for pagination using the @connection directive with a unique key.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/tutorial/connections-pagination.md#2025-04-18_snippet_6\n\nLANGUAGE: graphql\nCODE:\n```\nconst StoryCommentsSectionFragment = graphql`\n  fragment StoryCommentsSectionFragment on Story\n    @refetchable(queryName: \"StoryCommentsSectionPaginationQuery\")\n    @argumentDefinitions(\n      cursor: { type: \"String\" }\n      count: { type: \"Int\", defaultValue: 3 }\n    )\n  {\n    comments(after: $cursor, first: $count)\n      @connection(key: \"StoryCommentsSectionFragment_comments\")\n    {\n      edges {\n        node {\n          ...CommentFragment\n        }\n      }\n      pageInfo {\n        hasNextPage\n      }\n    }\n  }\n`;\n```\n\n----------------------------------------\n\nTITLE: Defining a Live Relay Resolver Field in TypeScript\nDESCRIPTION: Shows how to define a live field that can update over time using the @live tag. The resolver returns a LiveState object with read and subscribe methods.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/api-reference/relay-resolvers/docblock-format.md#2025-04-18_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport type {LiveState} from 'relay-runtime';\n\n/**\n* @RelayResolver Query.counter: Int\n* @live\n*/\nexport function counter(): LiveState<number> {\n  return {\n    read: () => store.getState().counter,\n    subscribe: cb => {\n      return store.subscribe(cb);\n    },\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Record from Relay Store\nDESCRIPTION: Illustrates how to retrieve a record from the Relay store using the get method of RecordSourceSelectorProxy.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/api-reference/relay-runtime/store.md#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst record = store.get(dataID);\n```\n\n----------------------------------------\n\nTITLE: Invalidating Relay Store Globally\nDESCRIPTION: The `invalidateStore` method invalidates the entire Relay store, marking all data as stale and necessitating a refetch on the next query check.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/api-reference/relay-runtime/store.md#2025-04-18_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nstore.invalidateStore();\n```\n\nLANGUAGE: javascript\nCODE:\n```\nenvironment.check(query) === 'stale'\n```\n\n----------------------------------------\n\nTITLE: Modeling Errors in GraphQL Schema\nDESCRIPTION: This snippet suggests how to extend a GraphQL schema to return error messages alongside query results, enhancing the error handling experience in applications.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/guided-tour/rendering/error-states.md#2025-04-18_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\ntype Error {\n  # User friendly message\n  message: String!\n}\n\ntype Foo {\n  bar: Result | Error\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting a record from the Relay Store\nDESCRIPTION: This snippet demonstrates how to delete a record from the Relay Store by calling the delete method with the specified dataID, ensuring the selected record is removed.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/api-reference/relay-runtime/store.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nstore.delete(dataID);\n```\n\n----------------------------------------\n\nTITLE: Defining Client Schema Extension in GraphQL\nDESCRIPTION: Example of extending the Query type with a client-side field in GraphQL schema. Shows how to define local fields that won't be sent to the server.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/api-reference/hooks/use-client-query.md#2025-04-18_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\n# example client extension of the `Query` type\nextend type Query {\n  client_field: String\n}\n```\n\n----------------------------------------\n\nTITLE: Subscribing to Data Invalidation State with React Hook\nDESCRIPTION: React hook for tracking and responding to data invalidation for specific record IDs, allowing immediate reactivity to stale data\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/guided-tour/reusing-cached-data/staleness-of-data.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nfunction ProfilePage(props) {\n  const data = usePreloadedQuery(\n    graphql`...`,\n    props.preloadedQuery,\n  )\n\n  useSubscribeToInvalidationState([props.userID], () => {\n    // Refetch or update view in response to stale data\n  })\n\n  return (...);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Child Fragment Component in React and Relay\nDESCRIPTION: This code snippet shows how to create a child fragment component using React and Relay. It demonstrates the use of the useFragment hook to fetch data based on a fragment definition.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/guided-tour/rendering/fragments.md#2025-04-18_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * UsernameSection.react.js\n *\n * Child Fragment Component\n */\n\nimport type {UsernameSection_user$key} from 'UsernameSection_user.graphql';\n\nconst React = require('React');\nconst {graphql, useFragment} = require('react-relay');\n\ntype Props = {\n  user: UsernameSection_user$key,\n};\n\nfunction UsernameSection(props: Props) {\n  const data = useFragment(\n    graphql`\n      fragment UsernameSection_user on User {\n        username\n      }\n    `,\n    props.user,\n  );\n\n  return <div>{data.username ?? 'Unknown'}</div>;\n}\n\nmodule.exports = UsernameSection;\n```\n\n----------------------------------------\n\nTITLE: Refreshing Data with useRefetchableFragment in Relay\nDESCRIPTION: This snippet demonstrates how to refresh a fragment's data using the useRefetchableFragment hook with the @refetchable directive, which automatically generates a query to refetch the fragment with the same original variables.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/guided-tour/refetching/refreshing-fragments.md#2025-04-18_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport type {UserComponent_user$key} from 'UserComponent_user.graphql';\n\ntype Props = {\n  user: UserComponent_user$key,\n};\n\nfunction UserComponent(props: Props) {\n  const [data, refetch] = useRefetchableFragment(\n    graphql`\n      fragment UserComponent_user on User\n      # @refetchable makes it so Relay autogenerates a query for\n      # fetching this fragment\n      @refetchable(queryName: \"UserComponentRefreshQuery\") {\n        id\n        name\n        friends {\n          count\n        }\n      }\n    `,\n    props.user,\n  );\n\n  const refresh = useCallback(() => {\n    // We call refetch with empty variables: `{}`,\n    // which will refetch the @refetchable query with the same\n    // original variables the fragment was fetched with, and update\n    // this component with the latest fetched data.\n    // The fetchPolicy ensures we always fetch from the server and skip\n    // the local data cache.\n    refetch({}, {fetchPolicy: 'network-only'})\n  }), [/* ... */]);\n\n  return (\n    <>\n      <h1>{data.name}</h1>\n      <div>Friends count: {data.friends?.count}</div>\n      <Button\n        onClick={() => refresh()}>\n        Fetch latest count\n      </Button>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using Variables in GraphQL Fragments in Relay\nDESCRIPTION: Example showing how fragments can reference variables that have been declared by a query. The UserFragment uses the $scale variable which must be declared by any query that includes this fragment.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/guided-tour/rendering/variables.md#2025-04-18_snippet_3\n\nLANGUAGE: graphql\nCODE:\n```\nfragment UserFragment on User {\n  name\n  profile_picture(scale: $scale) {\n    uri\n  }\n}\n\n\nquery ViewerQuery($scale: Float!) {\n  viewer {\n    actor {\n      ...UserFragment\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Invalid Fragment Refetch Query Example\nDESCRIPTION: This GraphQL query demonstrates an invalid approach to refetching just a fragment. The example shows why simply extracting a fragment's path from the original query doesn't work for refetching, as the parent data could change between requests.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/tutorial/refetchable-fragments.md#2025-04-18_snippet_9\n\nLANGUAGE: graphql\nCODE:\n```\nquery MyQuery {\n  topTrendingPosts {\n    poster {\n     ...PosterFragment\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Connection Record in Updater Function\nDESCRIPTION: This snippet shows how to use the connection ID to access the connection record in the store within an updater function.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/guided-tour/updating-data/updating-connections.md#2025-04-18_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction updater(store: RecordSourceSelectorProxy) {\n  // connectionID is passed as input to the mutation/subscription\n  const connection = store.get(connectionID);\n\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Story Like Button Fragment in GraphQL\nDESCRIPTION: GraphQL fragment definition for the Like button component, selecting fields for like count and viewer's like status.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/tutorial/mutations-updates.md#2025-04-18_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\nconst StoryLikeButtonFragment = graphql`\n  fragment StoryLikeButtonFragment on Story {\n    id\n    likeCount\n    doesViewerLike\n  }\n`;\n```\n\n----------------------------------------\n\nTITLE: Server-Side Implementation Using express-graphql\nDESCRIPTION: Example of server-side implementation using express-graphql with the persistedQueries middleware to handle persisted queries. This middleware maps query IDs to their corresponding query text.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/guides/persisted-queries.md#2025-04-18_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nimport express from 'express';\nimport {graphqlHTTP} from 'express-graphql';\nimport {persistedQueries} from 'express-graphql-persisted-queries';\nimport queryMap from './path/to/queryMap.json';\n\nconst app = express();\n\napp.use(\n  '/graphql',\n  persistedQueries({\n    queryMap,\n    queryIdKey: 'doc_id',\n  }),\n  graphqlHTTP({schema}),\n);\n```\n\n----------------------------------------\n\nTITLE: Using ConnectionHandler.getConnection in JavaScript\nDESCRIPTION: Code example showing how to access a connection annotated with @connection directive using ConnectionHandler.getConnection. This demonstrates retrieving a connection record by its key and filters.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/api-reference/relay-runtime/store.md#2025-04-18_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nimport {ConnectionHandler} from 'relay-runtime';\n\n// The `friends` connection record can be accessed with:\nconst user = store.get(userID);\nconst friends = ConnectionHandler.getConnection(\n user,                        // parent record\n 'FriendsFragment_friends',   // connection key\n {orderby: 'firstname'}       // 'filters' that is used to identify the connection\n);\n// Access fields on the connection:\nconst edges = friends.getLinkedRecords('edges');\n```\n\n----------------------------------------\n\nTITLE: Validating Node Type Before Assignment\nDESCRIPTION: This snippet validates that a Node can be assigned to an Actor interface type by checking the presence of a specific field before performing the assignment.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/guided-tour/updating-data/imperatively-modifying-linked-fields.md#2025-04-18_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nimport {validate as validateActor} from 'Foo_actor.graphql';\n\ngraphql`\n  fragment Foo_actor on Actor @assignable {\n    __typename\n  }\n`;\n\nconst data = useFragment(graphql`\n  fragment Foo_query on Query {\n    node(id: \"4\") {\n      ...Foo_actor\n    }\n  }\n`, queryRef);\n\nconst environment = useRelayEnvironment();\nonClick = () => {\n  commitLocalUpdate(environment, store => {\n    const {updatableData} = store.readUpdatableQuery(\n      graphql`\n        query FooUpdatableQuery @updatable {\n          viewer {\n            actor {\n              ...Foo_actor\n            }\n          }\n        }\n      `,\n      {}\n    );\n\n    if (updatableData.viewer != null && data.node != null) {\n      const validActor = validateActor(data.node);\n      if (validActor !== false) {\n        updatableData.viewer.actor = validActor;\n      }\n    }\n  });\n};\n```\n\n----------------------------------------\n\nTITLE: Querying Story Data with GraphQL\nDESCRIPTION: Example GraphQL query to fetch a story's text, author details, and comments including nested author information for each comment.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/principles-and-architecture/thinking-in-graphql.md#2025-04-18_snippet_6\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  story(id: \"1\") {\n    text,\n    author { name, photo },\n    comments {\n      text,\n      author { name, photo }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Babel Transformation for GraphQL in JavaScript\nDESCRIPTION: Illustrates a Babel transformation in JavaScript where GraphQL tagged templates are converted into require statements for the corresponding generated artifact. This requires Relay's Babel plugin for performing code transformations during build time.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/glossary/glossary.md#2025-04-18_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\ngraphql`...`\n```\n\n----------------------------------------\n\nTITLE: Composing Fragments with Type-Safe References in Flow\nDESCRIPTION: Demonstrates how to compose fragments with type-safe references in a Flow-typed React component, ensuring correct fragment spreading and prop passing.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/guides/type-emission.md#2025-04-18_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ExampleFragmentComponent } from \"./ExampleFragmentComponent\"\n\n/**\n * import type { ExampleFragmentComponent_artist$fragmentType } from \"ExampleFragmentComponent_artist.graphql\";\n *\n * export type ExampleQuery$data = {\n *   +artist: ?{\n *     +name: ?string,\n *     +$fragmentSpreads: ExampleFragmentComponent_artist$fragmentType,\n *   }\n * };\n * export type ExampleQuery$variables = {\n *   +artistID: string,\n * }\n * export type ExampleQuery = {\n *   +variables: ExampleQuery$variables,\n *   +response: ExampleQuery$data,\n * }\n */\n\n// data is of type ExampleQuery$data\nconst data = useLazyLoadQuery(\n  graphql`\n    query ExampleQuery($artistID: ID!) {\n      artist(id: $artistID) {\n        name\n        ...ExampleFragmentComponent_artist\n      }\n    }\n  `,\n  {artistID: 'banksy'},\n);\n\n// Here only `data.artist.name` is directly visible,\n// the marker prop $fragmentSpreads indicates that `data.artist`\n// can be used for the component expecting this fragment spread.\nreturn <ExampleFragmentComponent artist={data.artist} />;\n```\n\n----------------------------------------\n\nTITLE: Extending the Viewer type with a best_friend field (GraphQL)\nDESCRIPTION: This GraphQL code extends the `Viewer` type to include a `best_friend` field, which is of type `User`. This extension allows the application to store and manage the viewer's best friend.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/guided-tour/updating-data/imperatively-modifying-linked-fields.md#2025-04-18_snippet_5\n\nLANGUAGE: graphql\nCODE:\n```\n\"extend type Viewer {\\n  best_friend: User,\\n}\"\n```\n\n----------------------------------------\n\nTITLE: Defining a GraphQL Query for a Story with Author and Comments\nDESCRIPTION: A GraphQL query that fetches a story with its text, author information (name and photo), and comments including the comment text and author details.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/principles-and-architecture/thinking-in-graphql.md#2025-04-18_snippet_7\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  story(id: \"1\") {\n    text,\n    author { name, photo },\n    comments {\n      text,\n      author { name, photo }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Optimistic Updates in a Feed Component\nDESCRIPTION: This example demonstrates how to use `hasOptimisticUpdate` to differentiate between data from the server and data affected by optimistic updates. It renders a `PendingStory` component for stories with pending optimistic mutations and a regular `Story` component for other stories.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-classic/Classic-APIReference-Container.md#2025-04-18_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nclass Feed extends React.Component {\n  render() {\n    var edges = this.props.viewer.feed.edges;\n    return (\n      <div>\n        {edges.map(edge => {\n          var node = edge.node;\n          if (this.props.relay.hasOptimisticUpdate(node)) {\n            // Render pending story that has not been stored\n            // on the server using a different component.\n            return (\n              <PendingStory\n                key={edge.node.id}\n                story={edge.node}\n              />\n            );\n          } else {\n            return (\n              <Story\n                key={edge.node.id}\n                story={edge.node}\n              />\n            );\n          }\n        })}\n      </div>\n    );\n  }\n}\n\nmodule.exports = Relay.createContainer(Feed, {\n  initialVariables: {count: 10},\n  fragments: {\n    viewer: () => Relay.QL`\n      fragment on Viewer {\n        feed(first: $count) {\n          edges {\n            node {\n              id,\n              ${Story.getFragment('story')},\n              ${PendingStory.getFragment('story')}\n            }\n          }\n        }\n      }\n    `,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Resolver Error Event Type in TypeScript\nDESCRIPTION: Defines the TypeScript type for logging errors encountered by Relay Resolvers. This type, `ResolverErrorEvent`, includes the component kind, owner, field path, and error object. This allows for consistent error logging, ensuring that all necessary information is captured when an error is encountered during field resolution.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/guides/relay-resolvers/errors.md#2025-04-18_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\ntype ResolverErrorEvent = {\n  kind: 'relay_resolver.error',\n  // The name of the fragment/query in which the field was read\n  owner: string,\n  // The path from the owner root to the field which threw the error\n  fieldPath: string,\n  // The error thrown by the resolver\n  error: Error,\n}\n```\n\n----------------------------------------\n\nTITLE: Using Fragment Data in TypeScript\nDESCRIPTION: Demonstrates how to use emitted type information for fragment data in TypeScript. The example includes a fragment component with its corresponding type definitions.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/guides/type-emission.md#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * export type ExampleFragmentComponent_artist$data = {\n *   readonly name: string\n * }\n *\n * export type ExampleFragmentComponent_artist$key = { ... }\n */\n\nimport { ExampleFragmentComponent_artist$key } from \"__generated__/ExampleFragmentComponent_artist.graphql\"\n\ninterface Props {\n  artist: ExampleFragmentComponent_artist$key,\n};\n\nexport default ExampleFragmentComponent(props: Props) {\n  // data is of type ExampleFragmentComponent_artist$data\n  const data = useFragment(\n    graphql`\n      fragment ExampleFragmentComponent_artist on Artist {\n        biography\n      }\n    `,\n    props.artist,\n  );\n\n  return <div>About the artist: {props.artist.biography}</div>;\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Deferred Fragments in Relay\nDESCRIPTION: Shows how to test components that use @defer directive with fragments using MockPayloadGenerator.generateWithDefer. Includes setup for parent and child components with deferred data loading.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/guides/testing-relay-components.md#2025-04-18_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\ntest('Data Render with @defer', () => {\n  const environment = createMockEnvironment();\n  const renderer = ReactTestRenderer.create(\n    <RelayEnvironmentProvider environment={environment}>\n      <ParentComponent />,\n    </RelayEnvironmentProvider>\n  );\n\n  ReactTestRenderer.act(() => {\n    const operation = environment.mock.getMostRecentOperation();\n    const mockData = MockPayloadGenerator.generateWithDefer(operation, null, {generateDeferredPayload: true});\n    environment.mock.resolve(mockData);\n\n    jest.runAllTimers();\n  });\n\n  expect(renderer.toJSON()).toEqual(['id', 'name']);\n});\n```\n\n----------------------------------------\n\nTITLE: Defining GraphQL Queries\nDESCRIPTION: These code snippets define two GraphQL queries, `UserQuery` and `NodeQuery`, which both request the `name` field for a user with `id: 4`. The purpose is to illustrate a scenario where different queries point to the same underlying data, which can be optimized using Relay's missing field handlers.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/guided-tour/reusing-cached-data/filling-in-missing-data.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// Query 1\n\nquery UserQuery {\n  user(id: 4) {\n    name\n  }\n}\n\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// Query 2\n\nquery NodeQuery {\n  node(id: 4) {\n    ... on User {\n      name\n    }\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Mock Resolver Example\nDESCRIPTION: This code snippet demonstrates a simple Mock Resolver that returns mock values for scalar fields with types ID and String. It shows how to define default data for specific GraphQL types.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/guides/testing-relay-components.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  ID() {\n    // Return mock value for a scalar filed with type ID\n    return 'my-id';\n  },\n  String() {\n    // Every scalar field with type String will have this default value\n    return \"Lorem Ipsum\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Persisted Queries in package.json\nDESCRIPTION: Configuration for enabling persisted queries in Relay by specifying persistConfig with a URL endpoint in package.json. This setup converts operation texts to MD5 hashes and sends them to the specified URL.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/guides/persisted-queries.md#2025-04-18_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"scripts\": {\n    \"relay\": \"relay-compiler\",\n    \"relay-persisting\": \"node relayLocalPersisting.js\"\n  },\n  \"relay\": {\n    \"src\": \"./src\",\n    \"schema\": \"./schema.graphql\",\n    \"persistConfig\": {\n      \"url\": \"http://localhost:2999\",\n      \"params\": {}\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Rendering with Relay Root Container\nDESCRIPTION: Example showing how to use the renderFetched callback to customize the rendering of fetched data, including wrapping the component in additional elements.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-classic/Classic-Guides-RootContainer.md#2025-04-18_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<Relay.RootContainer\n  Component={ProfilePicture}\n  route={profileRoute}\n  renderFetched={function(data) {\n    return (\n      <ScrollView>\n        <ProfilePicture {...data} />\n      </ScrollView>\n    );\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Adding Event Handler to Preload Query on Hover\nDESCRIPTION: Implements an onBeginHover event handler in the parent component to trigger query preloading when the user starts hovering over the component, passing the required variable.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/tutorial/queries-2.md#2025-04-18_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\nexport default function PosterByline({ poster }: Props): React.ReactElement {\n  ...\n  const [\n    hovercardQueryRef,\n    loadHovercardQuery,\n  ] = useQueryLoader<HovercardQueryType>(PosterDetailsHovercardContentsQuery);\n  // change\n  function onBeginHover() {\n    loadHovercardQuery({posterID: data.id});\n  }\n  // end-change\n  return (\n    <div className=\"byline\">\n      ...\n      <Hovercard\n        // change-line\n        onBeginHover={onBeginHover}\n        targetRef={hoverRef}>\n        <PosterDetailsHovercardContents queryRef={hovercardQueryRef} />\n      </Hovercard>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Inserting Edge After in Relay Runtime with JavaScript\nDESCRIPTION: This snippet demonstrates the use of the `insertEdgeAfter` method from `ConnectionHandler` to append an edge to the end of a connection, which can also take a cursor position as an optional argument.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/api-reference/relay-runtime/store.md#2025-04-18_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\nConnectionHandler.insertEdgeAfter(friends, edge);\n```\n\n----------------------------------------\n\nTITLE: GraphQL Query with Hard-coded ID\nDESCRIPTION: Initial GraphQL query implementation with a hard-coded node ID\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/tutorial/queries-2.md#2025-04-18_snippet_2\n\nLANGUAGE: graphql\nCODE:\n```\nconst PosterDetailsHovercardContentsQuery = graphql`\n  query PosterDetailsHovercardContentsQuery {\n    node(id: \"1\") {\n      ... on Actor {\n        ...PosterDetailsHovercardContentsBodyFragment\n      }\n    }\n  }\n`;\n```\n\n----------------------------------------\n\nTITLE: Declaring Local Fragment Variables with @argumentDefinitions\nDESCRIPTION: Component using a fragment with locally scoped variables using the @argumentDefinitions directive. This approach allows fragments to declare and use variables without requiring them to be declared globally in the query.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v13.0.0/guided-tour/rendering/variables.md#2025-04-18_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * Declare a fragment that accepts arguments with @argumentDefinitions\n */\n\nfunction PictureComponent(props) {\n  const data = useFragment(\n    graphql`\n      fragment PictureComponent_user on User\n        @argumentDefinitions(scale: {type: \"Float!\"}) {\n\n        # *`**$scale**`* is a local variable here, declared above\n        # as an argument *`**scale**`*, of type *`**Float!`*\n        profile_picture(scale: $scale) {\n          uri\n        }\n      }\n    `,\n    props.user,\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: GraphQL Query Response\nDESCRIPTION: Demonstrates the JSON response returned from a server after executing the GraphQL query with the specified id variable.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/guided-tour/rendering/variables.md#2025-04-18_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"user\": {\n      \"id\": \"4\",\n      \"name\": \"Mark Zuckerberg\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using useLazyLoadQuery with React Relay\nDESCRIPTION: This snippet illustrates the use of the useLazyLoadQuery hook for fetching GraphQL data during the rendering of a React component. It highlights the potential performance implications and details how to effectively utilize the hook to retrieve query data based on specified variables.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-experimental/RelayHooks-ApiReference.md#2025-04-18_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport type {AppQuery} from 'AppQuery.graphql';\n\nconst React = require('React');\n\nconst {graphql, useLazyLoadQuery} = require('react-relay/hooks');\n\nfunction App() {\n  const data = useLazyLoadQuery<AppQuery>(\n    graphql`\n      query AppQuery($id: ID!) {\n        user(id: $id) {\n          name\n        }\n      }\n    `,\n    {id: 4},\n    {fetchPolicy: 'store-or-network'},\n  );\n\n  return <h1>{data.user?.name}</h1>;\n}\n\n```\n\n----------------------------------------\n\nTITLE: Passing Connection ID as Mutation Variable in Relay\nDESCRIPTION: Demonstrates how to identify and pass the connection ID as a mutation variable using ConnectionHandler.getConnectionID.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/tutorial/mutations-updates.md#2025-04-18_snippet_9\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport {useFragment, useMutation, ConnectionHandler} from 'react-relay';\n\n...\n\nexport default function StoryCommentsComposer({story}: Props) {\n  ...\n  function onPost() {\n    setText('');\n    const connectionID = ConnectionHandler.getConnectionID(\n      data.id,\n      'StoryCommentsSection_comments',\n    );\n    commitMutation({\n      variables: {\n        id: data.id,\n        text,\n        connections: [connectionID],\n      },\n    })\n  }\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Mutation with @appendNode Directive\nDESCRIPTION: Example showing how to use the @appendNode directive to add new nodes to a connection in a mutation.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/guided-tour/list-data/updating-connections.md#2025-04-18_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\ncommitMutation<AppendCommentMutation>(environment, {\n  mutation: graphql`\n    mutation AppendCommentMutation(\n      # Define a GraphQL variable for the connections array\n      $connections: [ID!]!\n      $input: CommentCreateInput\n    ) {\n      commentCreate(input: $input) {\n        # Use @appendNode or @prependNode on the node field\n        feedbackCommentNode @appendNode(connections: $connections, edgeTypeName: \"CommentsEdge\") {\n          id\n        }\n      }\n    }\n  `,\n  variables: {\n    input,\n    // Pass the `connections` array\n    connections: [connectionID],\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Rendering Loading Fallback with React Suspense\nDESCRIPTION: Demonstrates how to use the Suspense component to render a loading fallback while waiting for a component that may suspend.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/guided-tour/rendering/loading-states.md#2025-04-18_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nconst React = require('React');\nconst {Suspense} = require('React');\n\nfunction App() {\n  return (\n    // Render a fallback using Suspense as a wrapper\n    <Suspense fallback={<LoadingGlimmer />}>\n      <CanSuspend />\n    </Suspense>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Query Component for Home Tab in Relay\nDESCRIPTION: This code snippet demonstrates how to create a query component in Relay that fetches user data and incorporates the UsernameComponent fragment. It uses the usePreloadedQuery hook to execute the query.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/guided-tour/reusing-cached-data/rendering-partially-cached-data.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * AppTabs.react.js\n *\n * Query Loader Component\n */\n\n // ....\n\n  const onSelectHomeTab = () => {\n    loadHomeTabQuery({id: '4'}, {fetchPolicy: 'store-or-network'});\n  }\n\n // ...\n\n/**\n * HomeTab.react.js\n *\n * Query Component\n */\n\nconst React = require('React');\nconst {graphql, usePreloadedQuery} = require('react-relay');\n\nconst UsernameComponent = require('./UsernameComponent.react');\n\nfunction HomeTab(props: Props) {\n  const data = usePreloadedQuery(\n    graphql`\n      query HomeTabQuery($id: ID!) {\n        user(id: $id) {\n          name\n          ...UsernameComponent_user\n        }\n      }\n    `,\n    props.queryRef,\n  );\n\n  return (\n    <>\n      <h1>{data.user?.name}</h1>\n      <UsernameComponent user={data.user} />\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Custom Mutation Class in Relay Classic\nDESCRIPTION: Creates a LikeStoryMutation class extending Relay.Mutation to like a story. Implements required methods for defining the mutation, variables, fat query, and configurations.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-classic/Classic-Guides-Mutations.md#2025-04-18_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nclass LikeStoryMutation extends Relay.Mutation {\n  getMutation() {\n    return Relay.QL`mutation {likeStory}`;\n  }\n  getVariables() {\n    return {storyID: this.props.story.id};\n  }\n  getFatQuery() {\n    return Relay.QL`\n      fragment on LikeStoryPayload {\n        story {\n          likers {\n            count,\n          },\n          likeSentence,\n          viewerDoesLike,\n        },\n      }\n    `;\n  }\n  getConfigs() {\n    return [{\n      type: 'FIELDS_CHANGE',\n      fieldIDs: {\n        story: this.props.story.id,\n      },\n    }];\n  }\n  static fragments = {\n    story: () => Relay.QL`\n      fragment on Story {\n        id,\n      }\n    `,\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Actor Interface in GraphQL Schema\nDESCRIPTION: This snippet defines a GraphQL interface named 'Actor' that includes fields common to different actor types, specifically 'name', 'profilePicture', and 'joined'. This allows for polymorphism in GraphQL queries.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/tutorial/interfaces-polymorphism.md#2025-04-18_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\ninterface Actor {\n  name: String\n  profilePicture: Image\n  joined: DateTime\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Missing Data with @catch in JavaScript\nDESCRIPTION: This JavaScript snippet illustrates how missing data errors are managed using the @catch directive, providing detailed error messages in the response when data is unexpectedly absent.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/guides/catch-directive.md#2025-04-18_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    viewer: {\n        ok: false,\n        errors: [\n            {\n                message: \"Relay: Missing data for one or more fields in MyQuery\",\n            }\n        ]\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Relay Runtime with LiveResolverStore in TypeScript\nDESCRIPTION: This TypeScript snippet configures the Relay runtime to use the experimental LiveResolverStore and enables the ENABLE_RELAY_RESOLVERS feature flag. Error logging for resolvers is also demonstrated using a custom fieldLogger function.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/guides/relay-resolvers/enabling.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Environment, RecordSource, RelayFeatureFlags } from \"relay-runtime\";\n// highlight-next-line\nimport LiveResolverStore from \"relay-runtime/lib/store/live-resolvers/LiveResolverStore\";\n\nRelayFeatureFlags.ENABLE_RELAY_RESOLVERS = true;\n\n// It is recommended to log errors thrown by Resolvers\nfunction fieldLogger(event) {\n  if(event.kind === \"relay_resolver.error\") {\n    // Log this somewhere!\n    console.warn(`Resolver error encountered in ${event.owner}.${event.fieldPath}`)\n    console.warn(event.error)\n  }\n}\n\nconst environment = new Environment({\n  network: Network.create(/* your fetch function here */),\n  store: new LiveResolverStore(new RecordSource()),\n  requiredFieldLogger: fieldLogger\n});\n\n// ... create your Relay context with your environment\n```\n\n----------------------------------------\n\nTITLE: Implementing a User Greeting Resolver in JSX\nDESCRIPTION: Complete example of a Relay Resolver that adds a 'greeting' field to the User type. It reads the honorific and last_name fields and combines them into a greeting message.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/guides/relay-resolvers.md#2025-04-18_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport type {UserGreetingResolver$key} from 'UserGreetingResolver.graphql';\nimport {graphql} from 'relay-runtime';\nimport {readFragment} from 'relay-runtime/store/ResolverFragments';\n\n/**\n * @RelayResolver User.greeting: String\n * @rootFragment UserGreetingResolver\n *\n * A greeting for the user which includes their name and title.\n */\nexport function greeting(userKey: UserGreetingResolver$key): string {\n  const user = readFragment(graphql`\n    fragment UserGreetingResolver on User {\n      honorific\n      last_name\n    }`, userKey);\n\n  return `Hello ${user.honorific} ${user.last_name}!`;\n}\n```\n\n----------------------------------------\n\nTITLE: Committing Comment Create Mutation with Updater Function\nDESCRIPTION: Demonstrates how to use an updater function to imperatively modify the Relay store after creating a comment, specifically adding a new edge to a connection.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/guided-tour/updating-data/imperatively-modifying-store-data-legacy.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nfunction commitCommentCreateMutation(\n  environment: Environment,\n  feedbackID: string,\n  input: CommentCreateData,\n) {\n  return commitMutation<CreateCommentMutation>(environment, {\n    mutation: graphql`\n      mutation CreateCommentMutation($input: CommentCreateData!) {\n        comment_create(input: $input) {\n          comment_edge {\n            cursor\n            node {\n              body {\n                text\n              }\n            }\n          }\n        }\n      }\n    `,\n    variables: {input},\n    updater: (store: RecordSourceSelectorProxy, _response: ?CreateCommentMutation$data) => {\n      const feedbackRecord = store.get(feedbackID);\n\n      const connectionRecord = ConnectionHandler.getConnection(\n        feedbackRecord,\n        'CommentsComponent_comments_connection',\n      );\n\n      const payload = store.getRootField('comment_create');\n\n      const serverEdge = payload.getLinkedRecord('comment_edge');\n\n      const newEdge = ConnectionHandler.buildConnectionEdge(\n        store,\n        connectionRecord,\n        serverEdge,\n      );\n\n      ConnectionHandler.insertEdgeAfter(\n        connectionRecord,\n        newEdge,\n      );\n    },\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Data with fetchQuery in Relay\nDESCRIPTION: Demonstrates how to use fetchQuery to execute a GraphQL query and retrieve data. It shows the process of creating a Relay environment, defining a query, and fetching data asynchronously.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/guided-tour/managing-data-outside-react/reading-queries.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport {fetchQuery, graphql} from 'react-relay';\nimport {Environment, Network, RecordSource, Store} from 'relay-runtime';\n\nconst source = new RecordSource();\nconst store = new Store(source);\nconst network = Network.create(async (request, variables) => {\n  const resp = await fetch('/graphql', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify({\n      query: request.text,\n      variables,\n    }),\n  });\n  return await resp.json();\n});\n\nconst environment = new Environment({\n  network,\n  store,\n});\n\nconst UserQuery = graphql`\n  query UserQuery($id: ID!) {\n    user(id: $id) {\n      name\n    }\n  }\n`;\n\n// Fetch query\nfetchQuery(environment, UserQuery, {id: 4}).subscribe({\n  next: (data) => {\n    console.log(data);\n  },\n  error: (error) => {\n    console.error(error);\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Invalidating a Specific Record in the Relay Store\nDESCRIPTION: Example of how to invalidate a specific record in the Relay store within an updater function, causing only queries that reference the invalidated record to be considered stale.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/guided-tour/reusing-cached-data/staleness-of-data.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nfunction updater(store) {\n  const user = store.get('<id>');\n  if (user != null) {\n    user.invalidateRecord();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Error Boundary with Retry for useLazyLoadQuery\nDESCRIPTION: Shows how to create an Error Boundary with retry functionality specifically for use with useLazyLoadQuery in Relay.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/guided-tour/rendering/error-states.md#2025-04-18_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * ErrorBoundaryWithRetry.react.js\n */\n\nconst React = require('React');\n\n// NOTE: This is NOT actual production code;\n// it is only used to illustrate example\nclass ErrorBoundaryWithRetry extends React.Component<Props, State> {\n  state = {error: null, fetchKey: 0};\n\n  static getDerivedStateFromError(error): State {\n    return {error: error, fetchKey: 0};\n  }\n\n  _retry = () => {\n    this.setState(prev => ({\n      // Clear the error\n      error: null,\n      // Increment and set a new fetchKey in order\n      // to trigger a re-evaluation and refetching\n      // of the query using useLazyLoadQuery\n      fetchKey: prev.fetchKey + 1,\n    }));\n  }\n\n  render() {\n    const {children, fallback} = this.props;\n    const {error, fetchKey} = this.state;\n    if (error) {\n      if (typeof fallback === 'function') {\n        return fallback({error, retry: this._retry});\n      }\n      return fallback;\n    }\n    return children({fetchKey});\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting an edge using updater function\nDESCRIPTION: This JavaScript code snippet shows how to remove an edge from a Relay connection using `ConnectionHandler.deleteNode` within an updater function. The function retrieves the connection record and then uses the node ID to remove the corresponding edge from the connection.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/guided-tour/list-data/updating-connections.md#2025-04-18_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nconst {ConnectionHandler} = require('RelayModern');\n\nfunction updater(store: RecordSourceSelectorProxy) {\n  const storyRecord = store.get(storyID);\n  const connectionRecord = ConnectionHandler.getConnection(\n    storyRecord,\n    'StoryComponent_story_comments_connection',\n  );\n\n  // Remove edge from the connection, given the ID of the node\n  ConnectionHandler.deleteNode(\n    connectionRecord,\n    commentIDToDelete,\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering a Connection with usePaginationFragment in Relay\nDESCRIPTION: This snippet shows how to use the usePaginationFragment hook to render a GraphQL connection. It includes the @refetchable directive to enable pagination and demonstrates how to extract and render the connection edges/nodes.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/guided-tour/list-data/rendering-connections.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport type {FriendsListComponent_user$key} from 'FriendsList_user.graphql';\n\nconst React = require('React');\nconst {Suspense} = require('React');\n\nconst {graphql, usePaginationFragment} = require('react-relay');\n\ntype Props = {\n  user: FriendsListComponent_user$key,\n};\n\nfunction FriendsListComponent(props: Props) {\n  const {data} = usePaginationFragment(\n    graphql`\n      fragment FriendsListComponent_user on User\n      @refetchable(queryName: \"FriendsListPaginationQuery\") {\n        name\n        friends(first: $count, after: $cursor)\n        @connection(key: \"FriendsList_user_friends\") {\n          edges {\n            node {\n              ...FriendComponent\n            }\n          }\n        }\n      }\n    `,\n    props.user,\n  );\n\n\n  return (\n    <>\n      {data.name != null ? <h1>Friends of {data.name}:</h1> : null}\n\n      <div>\n        {/* Extract each friend from the resulting data */}\n        {(data.friends?.edges ?? []).map(edge => {\n          const node = edge.node;\n          return (\n            <Suspense fallback={<Glimmer />}>\n              <FriendComponent user={node} />\n            </Suspense>\n          );\n        })}\n      </div>\n    </>\n  );\n}\n\nmodule.exports = FriendsListComponent;\n```\n\n----------------------------------------\n\nTITLE: React Component with GraphQL Integration\nDESCRIPTION: React component implementation demonstrating GraphQL data fetching using the fetchGraphQL utility and React hooks.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/getting-started/step-by-step-guide.md#2025-04-18_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport React from 'react';\nimport './App.css';\nimport fetchGraphQL from './fetchGraphQL';\n\nconst { useState, useEffect } = React;\n\nfunction App() {\n  const [name, setName] = useState(null);\n\n  useEffect(() => {\n    let isMounted = true;\n    fetchGraphQL(`\n      query RepositoryNameQuery {\n        # feel free to change owner/name here\n        repository(owner: \"facebook\" name: \"relay\") {\n          name\n        }\n      }\n    `).then(response => {\n      if (!isMounted) {\n        return;\n      }\n      const data = response.data;\n      setName(data.repository.name);\n    }).catch(error => {\n      console.error(error);\n    });\n\n    return () => {\n      isMounted = false;\n    };\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <p>\n          {name != null ? `Repository: ${name}` : \"Loading\"}\n        </p>\n      </header>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Bubbling Errors with @catch on Parent Field in GraphQL\nDESCRIPTION: This snippet shows a GraphQL query where the @catch directive is applied to the parent 'viewer' field, causing errors in the 'name' field to be captured at the parent level, illustrating error bubbling.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/guides/catch-directive.md#2025-04-18_snippet_2\n\nLANGUAGE: graphql\nCODE:\n```\nquery MyQuery {\n  viewer @catch {\n    name\n    age\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Getting a Linked Record with Arguments\nDESCRIPTION: Demonstrates how to retrieve a linked record associated with the current record using the `getLinkedRecord` method of the `RecordProxy`. The method takes the `name` of the linked record as a string, and an optional object of `arguments`. Returns a `RecordProxy`.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v13.0.0/api-reference/relay-runtime/store.md#2025-04-18_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\nconst rootField = store.getRootField('rootField');\nconst viewer = rootField.getLinkedRecord('viewer', {arg: 'value'});\n```\n\n----------------------------------------\n\nTITLE: Using fetchQuery with Promise in JavaScript\nDESCRIPTION: Demonstrates converting fetchQuery observable to a Promise using toPromise(). Note that this approach is not recommended as it may miss deferred or 3D data in the query.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/api-reference/relay-runtime/fetch-query.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst {fetchQuery} = require('react-relay');\n\nfetchQuery(\n  environment,\n  graphql`\n    query AppQuery($id: ID!) {\n      user(id: $id) {\n        name\n      }\n    }\n  `,\n  {id: 4},\n)\n.toPromise() // NOTE: don't use, this can cause data to be missing!\n.then(data => {...})\n.catch(error => {...};\n```\n\n----------------------------------------\n\nTITLE: Invalidating a Specific Record in the Relay Store\nDESCRIPTION: Example of an updater function that invalidates a specific record in the Relay store. Only queries that reference this invalidated record will be considered stale and need refetching.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v13.0.0/guided-tour/reusing-cached-data/staleness-of-data.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nfunction updater(store) {\n  const user = store.get('<id>');\n  if (user != null) {\n    user.invalidateRecord();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Relay Network Layer with Fetch API\nDESCRIPTION: Shows how to create a basic network layer implementation for Relay using the fetch API. This example demonstrates setting up a GraphQL client with proper environment configuration, including network transport and store setup.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/guides/network-layer.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport {\n  Environment,\n  Network,\n  RecordSource,\n  Store,\n} from 'relay-runtime';\n\n// Define a function that fetches the results of an operation (query/mutation/etc)\n// and returns its results as a Promise:\nfunction fetchQuery(\n  operation,\n  variables,\n  cacheConfig,\n  uploadables,\n) {\n  return fetch('/graphql', {\n    method: 'POST',\n    headers: {\n      // Add authentication and other headers here\n      'content-type': 'application/json'\n    },\n    body: JSON.stringify({\n      query: operation.text, // GraphQL text from input\n      variables,\n    }),\n  }).then(response => {\n    return response.json();\n  });\n}\n\n// Create a network layer from the fetch function\nconst network = Network.create(fetchQuery);\nconst store = new Store(new RecordSource())\n\nconst environment = new Environment({\n  network,\n  store\n  // ... other options\n});\n\nexport default environment;\n```\n\n----------------------------------------\n\nTITLE: Fetching Query in Event Handler for PosterByline Component in JavaScript/JSX\nDESCRIPTION: This snippet shows how to implement the onBeginHover event handler in the PosterByline component to fetch the query when the hovercard is shown.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/tutorial/queries-2.md#2025-04-18_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nexport default function PosterByline({ poster }: Props): React.ReactElement {\n  ...\n  const [\n    hovercardQueryRef,\n    loadHovercardQuery,\n  ] = useQueryLoader<HovercardQueryType>(PosterDetailsHovercardContentsQuery);\n  // change\n  function onBeginHover() {\n    loadHovercardQuery({posterID: data.id});\n  }\n  // end-change\n  return (\n    <div className=\"byline\">\n      ...\n      <Hovercard\n        // change-line\n        onBeginHover={onBeginHover}\n        targetRef={hoverRef}>\n        <PosterDetailsHovercardContents queryRef={hovercardQueryRef} />\n      </Hovercard>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Lazy Query Loading with useLazyLoadQuery in React Relay\nDESCRIPTION: Demonstrates how to lazily fetch data using the useLazyLoadQuery Hook in React Relay. The example shows querying user data with GraphQL, handling variables, and rendering the result. Includes automatic subscription to data updates and Flow type checking support.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/guided-tour/rendering/queries.md#2025-04-18_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst React = require('React');\nconst {graphql, useLazyLoadQuery} = require('react-relay');\n\nfunction App() {\n  const data = useLazyLoadQuery(\n    graphql`\n      query AppQuery($id: ID!) {\n        user(id: $id) {\n          name\n        }\n      }\n    `,\n    {id: '4'},\n  );\n\n  return (\n    <h1>{data.user?.name}</h1>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using loadQuery with React Relay\nDESCRIPTION: Example demonstrating how to use loadQuery to fetch data imperatively. Shows initialization of environment, query definition, and loading data with variables and fetch policy options.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/api-reference/hooks/load-query.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst MyEnvironment = require('MyEnvironment');\nconst {loadQuery} = require('react-relay');\n\nconst query = graphql`\n  query AppQuery($id: ID!) {\n    user(id: $id) {\n      name\n    }\n  }\n`;\n\n// Note: you should generally not call loadQuery at the top level.\n// Instead, it should be called in response to an event (such a route navigation,\n// click, etc.).\nconst queryReference = loadQuery(\n  MyEnvironment,\n  query,\n  {id: '4'},\n  {fetchPolicy: 'store-or-network'},\n);\n\n// later: pass queryReference to usePreloadedQuery()\n// Note that query reference should have .dispose() called on them,\n// which is missing in this example.\n```\n\n----------------------------------------\n\nTITLE: Defining a GraphQL Query with Fragment Spreading in Relay\nDESCRIPTION: This snippet shows how to define a GraphQL query that spreads the AuthorDetails fragment. The query fetches a story by ID along with its title and author data.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v13.0.0/principles-and-architecture/thinking-in-relay.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// Story.react.js\nconst storyQuery = graphql`\n  query StoryQuery($storyID: ID!) {\n    story(id: $storyID) {\n      title\n      author {\n        ...AuthorDetails_author\n      }\n    }\n  }\n`;\n```\n\n----------------------------------------\n\nTITLE: Refreshing Data without Suspense in Relay\nDESCRIPTION: This snippet shows how to refresh fragment data without triggering Suspense by using fetchQuery and manually tracking the loading state. This approach allows displaying a loading indicator without hiding the existing content.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/guided-tour/refetching/refreshing-fragments.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport type {UserComponent_user$key} from 'UserComponent_user.graphql';\n\ntype Props = {\n  user: UserComponent_user$key,\n};\n\nfunction UserComponent(props: Props) {\n  const [data, refetch] = useRefetchableFragment(\n    graphql`\n      fragment UserComponent_user on User\n      # @refetchable makes it so Relay autogenerates a query for\n      # fetching this fragment\n      @refetchable(queryName: \"UserComponentRefreshQuery\") {\n        id\n        name\n        friends {\n          count\n        }\n      }\n    `,\n    props.user,\n  );\n\n  const [isRefreshing, setIsRefreshing] = useState(false);\n  const refresh = useCallback(() => {\n    if (isRefreshing) { return; }\n    setIsRefreshing(true);\n\n    // fetchQuery will fetch the query and write\n    // the data to the Relay store. This will ensure\n    // that when we re-render, the data is already\n    // cached and we don't suspend\n    fetchQuery(environment, AppQuery, variables)\n      .subscribe({\n        complete: () => {\n          setIsRefreshing(false);\n\n          // *After* the query has been fetched, we call\n          // refetch again to re-render with the updated data.\n          // At this point the data for the query should\n          // be cached, so we use the 'store-only'\n          // fetchPolicy to avoid suspending.\n          refetch({}, {fetchPolicy: 'store-only'});\n        },\n        error: () => {\n          setIsRefreshing(false);\n        }\n      });\n  }, [/* ... */]);\n\n  return (\n    <>\n      <h1>{data.name}</h1>\n      <div>Friends count: {data.friends?.count}</div>\n      <Button\n        disabled={isRefreshing}\n        onClick={() => refresh()}>\n        Fetch latest count {isRefreshing ? <LoadingSpinner /> : null}\n      </Button>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Defining MutationParameters Type in TypeScript for Relay\nDESCRIPTION: This code snippet defines the MutationParameters type, which specifies the structure for response, variables, and an optional rawResponse in a Relay mutation.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/api-reference/types/MutationConfig.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nType `MutationParameters` = {\n  response: Object,\n  variables: Object,\n  rawResponse?: Object\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating FlattenTransform in GraphQL\nDESCRIPTION: Example of how the FlattenTransform reduces extraneous levels of indirection in a GraphQL query by inlining fields from anonymous fragments that match the parent type.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/principles-and-architecture/compiler-architecture.md#2025-04-18_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\n# before: `id` is processed twice\nfoo { # type FooType\n   id\n   ... on FooType { # matches the parent type, so this is extraneous\n     id\n   }\n }\n\n # after: `id` is processed once\n foo {\n   id\n }\n```\n\n----------------------------------------\n\nTITLE: Setting GC Release Buffer Size in Relay Store\nDESCRIPTION: This snippet illustrates how to set the release buffer size for the Relay Store. This is important for retaining a specific number of queries temporarily to facilitate data reuse when navigating back to previously visited content. A buffer size of 0 indicates that queries will be immediately released.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/guided-tour/reusing-cached-data/presence-of-data.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst store = new Store(source, {gcReleaseBufferSize: 10});\n```\n\n----------------------------------------\n\nTITLE: Basic @required Usage in GraphQL Query\nDESCRIPTION: Example showing basic usage of @required directive to make a field non-nullable with LOG action. If name is null, the viewer object becomes null.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/guides/required-directive.md#2025-04-18_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nquery MyQuery {\n  viewer {\n    name @required(action: LOG)\n    age\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: JavaScript Response for Missing Required Field with @catch\nDESCRIPTION: This JavaScript object demonstrates the response format when a required field error is captured using the @catch directive. It provides an error message related to the missing required field in the query.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/guides/catch-directive.md#2025-04-18_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    viewer: {\n        ok: false,\n        errors: [\n            {\n                message: \"Relay: Missing @required value at path 'viewer.name' in 'MyQuery'.\",\n            }\n        ]\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Fragment Arguments with @argumentDefinitions in GraphQL\nDESCRIPTION: Example of using the @argumentDefinitions directive to define local arguments that a fragment can accept, including their types. This allows fragments to be parameterized.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/glossary/glossary.md#2025-04-18_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\nfragment Store_story on Story\n  @argumentDefinitions(storyId: {type: \"ID!\"}) {\n  # etc\n}\n```\n\n----------------------------------------\n\nTITLE: Type Error Example in Untyped Relay Query\nDESCRIPTION: Example showing TypeScript error when accessing query data without proper type annotations.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/tutorial/queries-1.md#2025-04-18_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst story = data.topStory;\n```\n\n----------------------------------------\n\nTITLE: GraphQL Fragment for User Friends\nDESCRIPTION: This GraphQL fragment defines the structure for querying a user's friends. It includes arguments for ordering (`order_by`), filtering by search term (`search_term`), and pagination (`first`). The fragment targets the `User` type and retrieves the name and age of each friend.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v13.0.0/guided-tour/list-data/refetching-connections.md#2025-04-18_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\n\"fragment UserFragment on User {\\n  name\\n  friends(order_by: DATE_ADDED, search_term: \\\"Alice\\\", first: 10) {\\n    edges {\\n      node {\\n        name\\n        age\\n      }\\n    }\\n  }\\n}\"\n```\n\n----------------------------------------\n\nTITLE: Creating a new record in the Relay Store\nDESCRIPTION: This snippet illustrates how to create a new record in the Relay Store using the create method. The parameters include dataID and typeName, which are essential for defining the record's identity and type.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/api-reference/relay-runtime/store.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst record = store.create(dataID, 'Todo');\n```\n\n----------------------------------------\n\nTITLE: Data Flow: Store Publishing Process\nDESCRIPTION: Shows how records are published to the store without immediately triggering subscriptions\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/principles-and-architecture/runtime-architecture.md#2025-04-18_snippet_2\n\nLANGUAGE: ascii-diagram\nCODE:\n```\n                        publish\n                           │\n                           ▼\n             ┌───────────────────────────┐\n             │           Store           │\n             │ ┌───────────────────────┐ │\n             │ │     RecordSource      │ │\n             │ │                       │ │\n             │ │┌──────┐┌──────┐┌─────┐│ │\n             │ ││Record││Record││ ... ││ │ <--- records are updated\n             │ │└──────┘└──────┘└─────┘│ │\n             │ └───────────────────────┘ │\n             │ ┌───────────────────────┐ │\n             │ │     Subscriptions     │ │\n             │ │                       │ │\n             │ │┌──────┐┌──────┐┌─────┐│ │\n             │ ││ Sub. ││ Sub. ││ ... ││ │ <--- subscriptions do not fire yet\n             │ │└──────┘└──────┘└─────┘│ │\n             │ └───────────────────────┘ │\n             └───────────────────────────┘\n```\n\n----------------------------------------\n\nTITLE: Getting Linked Records\nDESCRIPTION: Demonstrates how to retrieve a set of linked records associated with the current record using the `getLinkedRecords` method of the `RecordProxy`. The method takes the `name` of the linked records as a string, and optionally an object of `arguments`. Returns an array of `RecordProxy` objects.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v13.0.0/api-reference/relay-runtime/store.md#2025-04-18_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\nconst rootField = store.getRootField('rootField');\nconst nodes = rootField.getLinkedRecords('nodes');\n```\n\n----------------------------------------\n\nTITLE: Reading Updatable Fragments in Relay (JavaScript)\nDESCRIPTION: Demonstrates how to read an updatable fragment to obtain a special object called updatableData, which represents data for a specified object allowing updates in the local store.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/tutorial/mutations-updates.md#2025-04-18_snippet_9\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction StoryLikeButton({story}) {\n  ...\n      optimisticUpdater: store => {\n        const fragment = graphql`\n          fragment StoryLikeButton_updatable on Story @updatable {\n            likeCount\n            doesViewerLike\n          }\n        `;\n        const {\n          // color1\n          updatableData\n        } = store.readUpdatableFragment(\n          // color2\n          fragment,\n          // color3\n          story\n        );\n      },\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Refetch with Spread Fragments in Mutation\nDESCRIPTION: This GraphQL snippet demonstrates using fragment spreads within a mutation to ensure related components fully refresh their data post-mutation. By leveraging fragment spreads like ...FeedbackDisplay_feedback, Relay maintains UI consistency and efficient data fetching, minimizing extra network calls by updating related data in a single fetch operation.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/guided-tour/updating-data/graphql-mutations.md#2025-04-18_snippet_3\n\nLANGUAGE: graphql\nCODE:\n```\nmutation FeedbackLikeMutation($input: FeedbackLikeData!) {\n  feedback_like(data: $input) {\n    feedback {\n      ...FeedbackDisplay_feedback\n      ...FeedbackDetail_feedback\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: GraphQL query for linked record\nDESCRIPTION: An example GraphQL query that retrieves the viewer nested under the rootField.  The query retrieves the id and name of the viewer.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v13.0.0/api-reference/relay-runtime/store.md#2025-04-18_snippet_20\n\nLANGUAGE: graphql\nCODE:\n```\nrootField {\n  viewer {\n    id\n    name\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Extending Viewer Type with GraphQL Schema\nDESCRIPTION: GraphQL schema extension defining a best_friend field on the Viewer type that links to a User.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/guided-tour/updating-data/imperatively-modifying-linked-fields.md#2025-04-18_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nextend type Viewer {\n  best_friend: User,\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Relay Pagination Components\nDESCRIPTION: Shows how to test components that use usePaginationFragment, including mocking pagination responses and testing load more functionality.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/guides/testing-relay-components.md#2025-04-18_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\ntest('`Pagination` Container', () => {\n  const environment = createMockEnvironment();\n  const TestRenderer = () => {\n    const data = useLazyLoadQuery(\n      graphql`\n        query TestQuery @relay_test_operation {\n          myConnection: node(id: \"test-id\") {\n            connection {\n              ...MyConnectionFragment\n            }\n          }\n        }\n      `,\n      {},\n    );\n    return <MyPaginationContainer connection={data.myConnection.connection} />\n  };\n\n  const renderer = ReactTestRenderer.create(\n    <RelayEnvironmentProvider environment={environment}>\n      <Suspense fallback=\"Loading...\">\n        <TestRenderer />\n      </Suspense>\n    </RelayEnvironmentProvider>\n  );\n\n  ReactTestRenderer.act(() => {\n    environment.mock.resolveMostRecentOperation(operation =>\n      MockPayloadGenerator.generate(operation, {\n        ID(_, generateId) {\n          return `first-page-id-${generateId()}`;\n        },\n        PageInfo() {\n          return {\n            has_next_page: true,\n          };\n        },\n      }),\n    );\n  });\n\n  const loadMore = renderer.root.find(node => node.props['data-testid'] === 'loadMore')\n  expect(loadMore.props.disabled).toBe(false);\n  loadMore.props.onClick();\n\n  ReactTestRenderer.act(() => {\n    environment.mock.resolveMostRecentOperation(operation =>\n      MockPayloadGenerator.generate(operation, {\n        ID(_, generateId) {\n          return `second-page-id-${generateId()}`;\n        },\n        PageInfo() {\n          return {\n            has_next_page: false,\n          };\n        },\n      }),\n    );\n  });\n\n  expect(loadMore.props.disabled).toBe(true);\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Linked Record in Relay Store\nDESCRIPTION: Illustrates how to set a linked record in the Relay store using the setLinkedRecord method of RecordProxy.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/api-reference/relay-runtime/store.md#2025-04-18_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nconst rootField = store.getRootField('rootField');\nconst newViewer = store.create(/* ... */);\nrootField.setLinkedRecord(newViewer, 'viewer');\n```\n\n----------------------------------------\n\nTITLE: Updating PosterByline Component with ID Field in GraphQL Fragment\nDESCRIPTION: Modifies the PosterByline component to include an ID field in its GraphQL fragment and pass that ID as a prop to the child hovercard component.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/tutorial/queries-2.md#2025-04-18_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nconst PosterBylineFragment = graphql`\n  fragment PosterBylineFragment on Actor {\n    // change-line\n    id\n    ...\n  }\n`;\n\nexport default function PosterByline({ poster }: Props): React.ReactElement {\n  ...\n  return (\n   ...\n    <PosterDetailsHovercardContents\n      // change-line\n      posterID={data.id}\n    />\n   ...\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring a Connection in GraphQL Fragment\nDESCRIPTION: Example of declaring a connection using the @connection directive in a GraphQL fragment. This setup allows accessing the connection record inside updater functions.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/guided-tour/list-data/updating-connections.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst {graphql} = require('react-relay');\n\nconst storyFragment = graphql`\n  fragment StoryComponent_story on Story {\n    comments @connection(key: \"StoryComponent_story_comments_connection\") {\n      nodes {\n        body {\n          text\n        }\n      }\n    }\n  }\n`;\n```\n\n----------------------------------------\n\nTITLE: Adding the Refetchable Directive to the Fragment\nDESCRIPTION: This snippet demonstrates how to add the @refetchable directive to the ContactsListFragment, which instructs Relay to create a separate query for refetching the fragment data based on updated arguments.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/tutorial/refetchable-fragments.md#2025-04-18_snippet_3\n\nLANGUAGE: GraphQL\nCODE:\n```\n\"const ContactsListFragment = graphql`\\n  fragment ContactsListFragment on Viewer\\n    // change-line\\n    @refetchable(queryName: \\\"ContactsListRefetchQuery\\\")\\n    @argumentDefinitions(\\n      search: {type: \\\"String\\\", defaultValue: null}\\n    )\\n  {\\n     // ...\\n  }\\n`;\\n\"\n```\n\n----------------------------------------\n\nTITLE: Modifying Image Component to Use altText in React\nDESCRIPTION: This snippet demonstrates how to update the Image component's implementation to utilize the newly added altText field from the ImageFragment. It shows how to extend the component's functionality without disturbing other components using it, highlighting the modular approach enabled by Relay fragments.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/tutorial/fragments-1.md#2025-04-18_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nfunction Image({image}) {\n  // ...\n  <img\n    // change-line\n    alt={data.altText}\n  //...\n}\n```\n\n----------------------------------------\n\nTITLE: Getting a Record ID\nDESCRIPTION: Demonstrates how to get the `dataID` of the current record using the `getDataID` method of the `RecordProxy`. This method returns a string.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v13.0.0/api-reference/relay-runtime/store.md#2025-04-18_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nconst id = record.getDataID();\n```\n\n----------------------------------------\n\nTITLE: Paginating with Preserved Filter Values\nDESCRIPTION: Example showing how the loadNext function preserves the original connection variables during pagination. This demonstrates that filter values are maintained when loading more items.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/guided-tour/list-data/refetching-connections.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ntype Props = {\n  userRef: FriendsListComponent_user$key,\n};\n\nfunction FriendsListComponent(props: Props) {\n  const userRef = props.userRef;\n\n  const {data, loadNext} = usePaginationFragment(\n    graphql`\n      fragment FriendsListComponent_user on User {\n        name\n        friends(order_by: $orderBy, search_term: $searchTerm)\n          @connection(key: \"FriendsListComponent_user_friends_connection\") {\n          edges {\n            node {\n              name\n              age\n            }\n          }\n        }\n      }\n    `,\n    userRef,\n  );\n\n  return (\n    <>\n      <h1>Friends of {data.name}:</h1>\n      <List items={data.friends?.nodes}>{...}</List>\n\n      {/*\n       Loading the next items will use the original order_by and search_term\n       values used for the initial query\n      */ }\n      <Button onClick={() => loadNext(10)}>Load more friends</Button>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Fragment Definition with Arguments\nDESCRIPTION: Shows how to define a GraphQL fragment with @argumentDefinitions directive to specify required and optional arguments.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-experimental/Modern-GraphQLInRelay.md#2025-04-18_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\nfragment TodoList_list on TodoList @argumentDefinitions(\n  count: {type: \"Int\", defaultValue: 10},  # Optional argument\n  userID: {type: \"ID\"},                    # Required argument\n) {\n  title\n  todoItems(userID: $userID, first: $count) {  # Use fragment arguments here as variables\n    ...TodoItem_item\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining GraphQL Subscription Configuration Type in TypeScript\nDESCRIPTION: Type definition for GraphQL subscription configuration that specifies the structure for setting up subscriptions in Relay. Includes fields for cache configuration, subscription query, variables, and callback handlers for completion, errors, and data updates.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/api-reference/types/GraphQLSubscriptionConfig.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype GraphQLSubscriptionConfig<TSubscriptionPayload> = {\n  cacheConfig?: CacheConfig,\n  subscription: GraphQLTaggedNode,\n  variables: any,\n  onCompleted?: () => void,\n  onError?: (error: Error) => void,\n  onNext?: (payload: TSubscriptionPayload) => void,\n  updater?: SelectorStoreUpdater\n}\n```\n\n----------------------------------------\n\nTITLE: Using Fragment Data in TypeScript\nDESCRIPTION: Shows how to use emitted types for fragment data and references in a TypeScript-typed React component using useFragment.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/guides/type-emission.md#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * export type ExampleFragmentComponent_artist$data = {\n *   readonly name: string\n * }\n *\n * export type ExampleFragmentComponent_artist$key = { ... }\n */\n\nimport { ExampleFragmentComponent_artist$key } from \"__generated__/ExampleFragmentComponent_artist.graphql\"\n\ninterface Props {\n  artist: ExampleFragmentComponent_artist$key,\n};\n\nexport default ExampleFragmentComponent(props: Props) {\n  // data is of type ExampleFragmentComponent_artist$data\n  const data = useFragment(\n    graphql`\n      fragment ExampleFragmentComponent_artist on Artist {\n        biography\n      }\n    `,\n    props.artist,\n  );\n\n  return <div>About the artist: {props.artist.biography}</div>;\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering a Feed Component with Relay\nDESCRIPTION: This snippet shows how to create a Relay container for a `Feed` component. It fetches data using Relay fragments and renders a list of `Story` components. The `setVariables` method is used to load more stories when scrolling.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-classic/Classic-APIReference-Container.md#2025-04-18_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nclass Feed extends React.Component {\n  render() {\n    return (\n      <div>\n        {this.props.viewer.feed.edges.map(\n          edge => <Story story={edge.node} key={edge.node.id} />\n        )}\n      </div>\n    );\n  }\n  _handleScrollLoad() {\n    // Increments the number of stories being rendered by 10.\n    this.props.relay.setVariables({\n      count: this.props.relay.variables.count + 10\n    });\n  }\n}\nmodule.exports = Relay.createContainer(Feed, {\n  initialVariables: {count: 10},\n  fragments: {\n    viewer: () => Relay.QL`\n      fragment on Viewer {\n        feed(first: $count) {\n          edges {\n            node {\n              id,\n              ${Story.getFragment('story')},\n            },\n          },\n        },\n      }\n    `,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Spreading ImageFragment in PosterBylineFragment using GraphQL\nDESCRIPTION: This code snippet demonstrates how to spread the `ImageFragment` into the `PosterBylineFragment`. This allows the `PosterBylineFragment` to reuse the data requirements defined in `ImageFragment` for the `profilePicture` field.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/tutorial/fragments-1.md#2025-04-18_snippet_8\n\nLANGUAGE: graphql\nCODE:\n```\nconst PosterBylineFragment = graphql`\n  fragment PosterBylineFragment on Actor {\n    name\n    profilePicture {\n      // change-line\n      ...ImageFragment\n    }\n  }\n`;\n```\n\n----------------------------------------\n\nTITLE: Using @arguments Directive in GraphQL\nDESCRIPTION: Demonstrates how to use the @arguments directive in a GraphQL fragment spread to pass arguments to a fragment. The example passes a storyId to the Story_story fragment. To execute this, Relay must be properly set up with the necessary GraphQL schema.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/glossary/glossary.md#2025-04-18_snippet_0\n\nLANGUAGE: GraphQL\nCODE:\n```\n...Story_story @arguments(storyId: \"1234\")\n```\n\n----------------------------------------\n\nTITLE: Using fetchQuery to Create a Promise in React Relay JavaScript\nDESCRIPTION: This snippet shows how fetchQuery from react-relay can be used to convert a network request into a promise using the toPromise method. The method starts the query and returns a promise that resolves when the first data is received. However, using toPromise can cause deferred or 3D data to be missed, so it's generally not recommended. The promise resolves on successful data retrieval and rejects if the request fails. The snippet also illustrates promise handling with then for successful data and catch for any errors.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/api-reference/relay-runtime/fetch-query.md#2025-04-18_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst {fetchQuery} = require('react-relay');\n\nfetchQuery(\n  environment,\n  graphql`\n    query AppQuery($id: ID!) {\n      user(id: $id) {\n        name\n      }\n    }\n  `,\n  {id: 4},\n)\n.toPromise() // NOTE: don't use, this can cause data to be missing!\n.then(data => {...})\n.catch(error => {...};\n```\n\n----------------------------------------\n\nTITLE: Using getConnection Method in JavaScript\nDESCRIPTION: Example demonstrating how to use ConnectionHandler.getConnection to retrieve a connection that has been annotated with @connection directive. It includes passing the parent record, connection key, and filter parameters.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v13.0.0/api-reference/relay-runtime/store.md#2025-04-18_snippet_43\n\nLANGUAGE: javascript\nCODE:\n```\nimport {ConnectionHandler} from 'relay-runtime';\n\n// The `friends` connection record can be accessed with:\nconst user = store.get(userID);\nconst friends = ConnectionHandler.getConnection(\n user,                        // parent record\n 'FriendsFragment_friends',   // connection key\n {orderby: 'firstname'}       // 'filters' that is used to identify the connection\n);\n// Access fields on the connection:\nconst edges = friends.getLinkedRecords('edges');\n```\n\n----------------------------------------\n\nTITLE: Adding altText to ImageFragment using GraphQL\nDESCRIPTION: This code snippet demonstrates adding a new field, `altText`, to the `ImageFragment`.  This allows the `Image` component to fetch alt text for the image, improving accessibility.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/tutorial/fragments-1.md#2025-04-18_snippet_10\n\nLANGUAGE: graphql\nCODE:\n```\nconst ImageFragment = graphql`\n  fragment ImageFragment on Image {\n    url\n    // change-line\n    altText\n  }\n`;\n```\n\n----------------------------------------\n\nTITLE: Using useEntryPointLoader Hook with React and Relay\nDESCRIPTION: Example demonstrating how to use useEntryPointLoader hook to safely manage EntryPoints in a React component. Shows loading, displaying, and disposing of an EntryPoint with proper error boundaries and loading states.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/api-reference/entrypoint-apis/use-entrypoint-loader.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst {useEntryPointLoader, EntryPointContainer} = require('react-relay');\n\nconst ComponentEntryPoint = require('Component.entrypoint');\n\nfunction EntryPointRevealer(): React.MixedElement {\n  const environmentProvider = useMyEnvironmentProvider();\n  const [\n    entryPointReference,\n    loadEntryPoint,\n    disposeEntryPoint,\n  ] = useEntryPointLoader(environmentProvider, ComponentEntryPoint);\n\n  return (\n    <>\n      {\n        entryPointReference == null && (\n          <Button onClick={() => loadEntryPoint({})}>\n            Click to reveal the contents of the EntryPoint\n          </Button>\n        )\n      }\n      {\n        entryPointReference != null && (\n          <>\n            <Button onClick={disposeEntryPoint}>\n              Click to hide and dispose the EntryPoint.\n            </Button>\n            <Suspense fallback=\"Loading...\">\n              <EntryPointContainer\n                entryPointReference={entryPointReference}\n                props={{}}\n              />\n            </Suspense>\n          </>\n        )\n      }\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting a User Note with commitLocalUpdate - JavaScript\nDESCRIPTION: This snippet provides a function to delete a user's note from the Relay Store. It demonstrates how to use 'commitLocalUpdate' to remove a note both from the user’s record and the store.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v13.0.0/guides/client-schema-extensions.md#2025-04-18_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport {commitLocalUpdate} from 'react-relay';\n\nfunction deleteUserNote(environment, dataID) {\n  commitLocalUpdate(environment, store => {\n    const user = store.getRoot().getLinkedRecord('viewer');\n    const userNoteRecords = user.getLinkedRecords('notes');\n\n    // Remove the note from the list of user notes.\n    const newUserNoteRecords = userNoteRecords.filter(x => x.getDataID() !== dataID);\n\n    // Delete the note from the store.\n    store.delete(dataID);\n\n    // Set the new list of notes.\n    user.setLinkedRecords(newUserNoteRecords, 'notes');\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Returning Server Types in Relay Resolver (TypeScript)\nDESCRIPTION: Shows how to return a server-defined type (User) that implements the Node specification. The resolver returns the unique ID of the object.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/guides/relay-resolvers/return-types.md#2025-04-18_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport {DataID} from 'relay-runtime';\n/**\n * @RelayResolver Post.author: User\n */\nexport function author(post: PostModel): DataID {\n  return post.authorId;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a GraphQL Mutation\nDESCRIPTION: This GraphQL mutation demonstrates how to like a story. It includes input variables, the mutation field, and fields to re-fetch after the mutation completes.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/principles-and-architecture/thinking-in-graphql.md#2025-04-18_snippet_9\n\nLANGUAGE: graphql\nCODE:\n```\nmutation StoryLike($storyID: String) {\n   storyLike(storyID: $storyID) {\n     likeCount\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Query Loader in Parent Component\nDESCRIPTION: Shows how to set up query loading in a parent component using useQueryLoader and handling hover events\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/tutorial/queries-2.md#2025-04-18_snippet_9\n\nLANGUAGE: jsx\nCODE:\n```\nexport default function PosterByline({ poster }: Props): React.ReactElement {\n  ...\n  const [\n    hovercardQueryRef,\n    loadHovercardQuery,\n  ] = useQueryLoader<HovercardQueryType>(PosterDetailsHovercardContentsQuery);\n  function onBeginHover() {\n    loadHovercardQuery({posterID: data.id});\n  }\n  return (\n    <div className=\"byline\">\n      ...\n      <Hovercard\n        onBeginHover={onBeginHover}\n        targetRef={hoverRef}>\n        <PosterDetailsHovercardContents queryRef={hovercardQueryRef} />\n      </Hovercard>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using @arguments Directive with Fragment Spread in GraphQL\nDESCRIPTION: Example of the @arguments directive being applied to a fragment spread to pass arguments to a fragment. This allows passing values to fragments that have defined parameters.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/glossary/glossary.md#2025-04-18_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\n...Story_story @arguments(storyId: \"1234\")\n```\n\n----------------------------------------\n\nTITLE: Using @arguments Directive in GraphQL Fragment Spread\nDESCRIPTION: Demonstrates how to use the @arguments directive to pass arguments to a fragment spread. This directive allows passing values to fragment parameters when spreading a fragment within a query or another fragment.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/glossary/glossary.md#2025-04-18_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\n...Story_story @arguments(storyId: \"1234\")\n```\n\n----------------------------------------\n\nTITLE: Defining a GraphQL Type with @RelayResolver\nDESCRIPTION: This code snippet demonstrates how to define a new GraphQL type using the `@RelayResolver` tag. The resolver function `User` accepts an ID and returns a JavaScript model/object representing the data for the type. The function name is expected to match the type name specified in the tag.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/api-reference/relay-resolvers/docblock-format.md#2025-04-18_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n/**\n * @RelayResolver User\n */\nexport function User(id): UserModel {\n  return UserModel.getById(id);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Fragment Component in Relay\nDESCRIPTION: A username component that uses the useFragment hook to request User data. This component will suspend if the username field is not available in the cache during render.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/guided-tour/reusing-cached-data/rendering-partially-cached-data.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * UsernameComponent.react.js\n *\n * Fragment Component\n */\n\nimport type {UsernameComponent_user$key} from 'UsernameComponent_user.graphql';\n\nconst React = require('React');\nconst {graphql, useFragment} = require('react-relay');\n\ntype Props = {\n  user: UsernameComponent_user$key,\n};\n\nfunction UsernameComponent(props: Props) {\n  const user = useFragment(\n    graphql`\n      fragment UsernameComponent_user on User {\n        username\n      }\n    `,\n    props.user,\n  );\n  return (...);\n}\n\nmodule.exports = UsernameComponent;\n```\n\n----------------------------------------\n\nTITLE: Server Response Example\nDESCRIPTION: Shows the JSON response format from the server after executing a GraphQL query with variables.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/guided-tour/rendering/variables.md#2025-04-18_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"user\": {\n      \"id\": \"4\",\n      \"name\": \"Mark Zuckerberg\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Resolver with GraphQL Fragment Arguments\nDESCRIPTION: Example of a Relay Resolver that uses GraphQL fragment arguments. This resolver defines a field that accepts a 'my_arg' parameter of type Float which is passed to the underlying fragment.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/guides/relay-resolvers.md#2025-04-18_snippet_3\n\nLANGUAGE: js\nCODE:\n```\n/**\n* @RelayResolver MyType.my_resolver_field: String\n* @rootFragment myResolverFragment\n*/\nexport function my_resolver_field(fragmentKey: myResolverFragment$key): ?string {\n   const data = readFragment(graphql`\n       fragment myResolverFragment on MyType\n            @argumentDefinitions(my_arg: {type: \"Float!\"}) {\n            field_with_arg(arg: $my_arg) {\n               __typename\n            }\n       }\n   `, fragmentKey);\n\n   return data.field_with_arg.__typename;\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Relay Hooks Components in JavaScript\nDESCRIPTION: Example showing how to import Relay Hooks components from either the main react-relay module or specifically from react-relay/hooks if you want to minimize bundle size.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/migration-and-compatibility/upgrading-to-relay-hooks.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport {graphql, useFragment} from 'react-relay'; // or 'react-relay/hooks'\n\n// ...\n```\n\n----------------------------------------\n\nTITLE: Using @inline Directive with readInlineData\nDESCRIPTION: Example demonstrating how to use the @inline directive with readInlineData to access data outside of React render phase.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/api-reference/graphql/graphql-directives.md#2025-04-18_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport {graphql, readInlineData} from 'react-relay';\n\n// non-React function called from React\nfunction processItemData(itemRef) {\n  const item = readInlineData(graphql`\n    fragment processItemData_item on Item @inline {\n      title\n      price\n      creator {\n        name\n      }\n    }\n  `, itemRef);\n  sendToThirdPartyApi({\n    title: item.title,\n    price: item.price,\n    creatorName: item.creator.name\n  });\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nexport default function MyComponent({item}) {\n  function handleClick() {\n    processItemData(item);\n  }\n\n  const data = useFragment(\n    graphql`\n      fragment MyComponent_item on Item {\n        ...processItemData_item\n        title\n      }\n    `,\n    item\n  );\n\n  return (\n    <button onClick={handleClick}>Process {item.title}</button>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Data with Variables in Flow\nDESCRIPTION: Demonstrates how to use the emitted type information for query variables and response data in Flow. The example shows a query with an artistID variable and the corresponding type definitions.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/guides/type-emission.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * export type ExampleQuery$variables = {\n *   +artistID: string,\n * }\n * export type ExampleQuery$data = {\n *   +artist: {\n *     +name: ?string,\n *   }\n * }\n * export type ExampleQuery = {\n *   +variables: ExampleQuery$variables,\n *   +response: ExampleQuery$data,\n * }\n */\n\nconst data = useLazyLoadQuery(\n  graphql`\n    query ExampleQuery($artistID: ID!) {\n      artist(id: $artistID) {\n        name\n      }\n    }\n  `,\n  // variables are expected to be of type ExampleQuery$variables\n  {artistID: 'banksy'},\n);\n```\n\n----------------------------------------\n\nTITLE: Testing Relay Components with queueOperationResolver (JavaScript)\nDESCRIPTION: This snippet shows how to use queueOperationResolver to define responses for operations that will be executed on the environment. It includes examples for both successful data rendering and error state testing.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/guides/testing-relay-components.md#2025-04-18_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\n// Say you have a component with the QueryRenderer\nconst MyAwesomeViewRoot = require('MyAwesomeViewRoot');\nconst {\n  createMockEnvironment,\n  MockPayloadGenerator,\n} = require('relay-test-utils');\n\ntest('Data Render', async () => {\n  const environment = createMockEnvironment();\n  environment.mock.queueOperationResolver(operation =>\n    MockPayloadGenerator.generate(operation),\n  );\n\n  const renderer = render(\n    <MyAwesomeViewRoot environment={environment} />,\n  );\n\n  // At this point operation will be resolved\n  // and the data for a query will be available in the store\n  expect(await renderer.findByTestId('myButton')).toBeDefined();\n});\n\ntest('Error State', async () => {\n  const environment = createMockEnvironment();\n  environment.mock.queueOperationResolver(() =>\n    new Error('Uh-oh'),\n  );\n  const renderer = render(\n    <MyAwesomeViewRoot environment={environment} />,\n  );\n\n  expect(await renderer.findByTestId('myButton')).toBeDefined();\n});\n```\n\n----------------------------------------\n\nTITLE: Setting a linked record on a specific field\nDESCRIPTION: This snippet illustrates how to set a new linked record on the specified field of the current record using the setLinkedRecord method.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/api-reference/relay-runtime/store.md#2025-04-18_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nconst rootField = store.getRootField('rootField');\nconst newViewer = store.create(/* ... */);\nrootField.setLinkedRecord(newViewer, 'viewer');\n```\n\n----------------------------------------\n\nTITLE: Updating Linked Field Using commitLocalUpdate and readUpdatableQuery\nDESCRIPTION: This code snippet shows how to use `commitLocalUpdate` and `readUpdatableQuery` to imperatively update the viewer's `best_friend` field in the Relay store. It retrieves the updatable data, assigns the new best friend, and triggers a re-render of components that depend on the `best_friend` field.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/guided-tour/updating-data/imperatively-modifying-linked-fields.md#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport type {RecordSourceSelectorProxy} from 'react-relay';\n\nconst {commitLocalUpdate, useRelayEnvironment} = require('react-relay');\n\n// ...\n\nconst environment = useRelayEnvironment();\nconst onClick = () => {\n  const updatableData = commitLocalUpdate(\n    environment,\n    (store: RecordSourceSelectorProxy) => {\n      const {updatableData} = store.readUpdatableQuery(\n          graphql`\n            query AssignBestFriendButtonUpdatableQuery\n            @updatable {\n              viewer {\n                best_friend {\n                  ...AssignableBestFriendButton_assignable_user\n                }\n              }\n            }\n          `,\n          {}\n        );\n\n      if (data.user != null && updatableData.viewer != null) {\n        updatableData.viewer.best_friend = data.user;\n      }\n    }\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Accessing Connection Using __id\nDESCRIPTION: This code snippet demonstrates how to access a Relay connection using its `__id` field. The `useFragment` hook is used to retrieve the `__id` of the connection from the `fragmentData`, which is then used to access the connection record in the Relay store within an updater function.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/guided-tour/list-data/updating-connections.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst fragmentData = useFragment(\n  graphql`\n    fragment StoryComponent_story on Story {\n      comments @connection(key: \"StoryComponent_story_comments_connection\") {\n        # Query for the __id field\n        __id\n\n        # ...\n      }\n    }\n  `,\n  props.story,\n);\n\n// Get the connection record id\nconst connectionID = fragmentData?.comments?.__id;\n```\n\nLANGUAGE: javascript\nCODE:\n```\nfunction updater(store: RecordSourceSelectorProxy) {\n  // connectionID is passed as input to the mutation/subscription\n  const connection = store.get(connectionID);\n\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Garbage Collection Scheduler in Relay\nDESCRIPTION: Shows how to configure a custom garbage collection scheduler for the Relay Store. This example uses a sample scheduler function that uses resolveImmediate to schedule garbage collection runs.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/guided-tour/reusing-cached-data/presence-of-data.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// Sample scheduler function\n// Accepts a callback and schedules it to run at some future time.\nfunction gcScheduler(run: () => void) {\n  resolveImmediate(run);\n}\n\nconst store = new Store(source, {gcScheduler});\n```\n\n----------------------------------------\n\nTITLE: Pagination with Preserved Filters in Relay\nDESCRIPTION: Example showing how pagination maintains original filter values when loading more data.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/guided-tour/list-data/refetching-connections.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ntype Props = {\n  userRef: FriendsListComponent_user$key,\n};\n\nfunction FriendsListComponent(props: Props) {\n  const userRef = props.userRef;\n\n  const {data, loadNext} = usePaginationFragment(\n    graphql`\n      fragment FriendsListComponent_user on User {\n        name\n        friends(order_by: $orderBy, search_term: $searchTerm)\n          @connection(key: \"FriendsListComponent_user_friends_connection\") {\n          edges {\n            node {\n              name\n              age\n            }\n          }\n        }\n      }\n    `,\n    userRef,\n  );\n\n  return (\n    <>\n      <h1>Friends of {data.name}:</h1>\n      <List items={data.friends?.nodes}>{...}</List>\n      <Button onClick={() => loadNext(10)}>Load more friends</Button>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a GraphQL Subscription\nDESCRIPTION: Example of a GraphQL subscription for receiving updates on feedback likes. It uses the subscription keyword and defines the data to be returned when a like event occurs.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/guided-tour/updating-data/graphql-subscriptions.md#2025-04-18_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nsubscription FeedbackLikeSubscription($input: FeedbackLikeSubscribeData!) {\n  feedback_like_subscribe(data: $input) {\n    feedback {\n      like_count\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Extending a GraphQL Type\nDESCRIPTION: This GraphQL code extends an existing type `User` from the server schema with a new field `notes`, which is a list of `Note` types. This allows querying for the notes associated with a user on the client-side.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/guides/client-schema-extensions.md#2025-04-18_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\n\"\"\"\nextend type User {\n  notes: [Note]\n}\n\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Integrating Hovercard Component into PosterByline - JavaScript\nDESCRIPTION: This snippet modifies the 'PosterByline' component to integrate the 'Hovercard', enabling the display of additional poster details when the user's name is hovered over, implementing a reference for the hover target.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/tutorial/queries-2.md#2025-04-18_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n// change-line\nimport Hovercard from './Hovercard';\n// change-line\nimport PosterDetailsHovercardContents from './PosterDetailsHovercardContents';\n// change-line\nconst {useRef} = React;\n\n...\n\nexport default function PosterByline({ poster }: Props): React.ReactElement {\n  const data = useFragment(PosterBylineFragment, poster);\n  // change-line\n  const hoverRef = useRef(null);\n  return (\n    <div\n      // change-line\n      ref={hoverRef}\n      className=\"byline\">\n      <Image image={data.profilePicture} width={60} height={60} className=\"byline__image\" />\n      <div className=\"byline__name\">{data.name}</div>\n      // change\n      <Hovercard targetRef={hoverRef}>\n        <PosterDetailsHovercardContents />\n      </Hovercard>\n      // end-change\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Defining New Client-Only Types in GraphQL\nDESCRIPTION: Example of creating entirely new client-only types including an enum FetchStatus and a type FetchState, and extending a server type Item with a field using the client-only type. These types only exist in the client and are managed by Relay.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/guided-tour/updating-data/client-only-data.md#2025-04-18_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\n# You can define more than one type in a single file\nenum FetchStatus {\n  FETCHED\n  PENDING\n  ERRORED\n}\n\n\ntype FetchState {\n  # You can reuse client types to define other types\n  status: FetchStatus\n\n  # You can also reference regular server types\n  started_by: User!\n}\n\nextend type Item {\n  # You can extend server types with client-only types\n  fetch_state: FetchState\n}\n```\n\n----------------------------------------\n\nTITLE: Using Lazy Load Query with Dynamic Variables - JavaScript\nDESCRIPTION: This snippet showcases how to utilize the 'useLazyLoadQuery' hook in the 'PosterDetailsHovercardContents' component, passing the poster ID as a variable to fetch appropriate data at runtime.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/tutorial/queries-2.md#2025-04-18_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport default function PosterDetailsHovercardContents({\n  // change-line\n  posterID,\n}: {\n  // change-line\n  posterID: string;\n}): React.ReactElement {\n  const data = useLazyLoadQuery<QueryType>(\n    PosterDetailsHovercardContentsQuery,\n    // change-line\n    {posterID},\n  );\n  return <PosterDetailsHovercardContentsBody poster={data.node} />;\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying Filters for Connection Identity - Relay - JavaScript\nDESCRIPTION: This snippet illustrates how to declare a GraphQL fragment with specified filters for connection identity in Relay. By defining the specific filters to consider, it allows for more efficient connection management, excluding unnecessary filters.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/guided-tour/list-data/updating-connections.md#2025-04-18_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nconst {graphql} = require('relay-runtime');\n\nconst storyFragment = graphql`\n  fragment StoryComponent_story on Story {\n    comments(\n      order_by: $orderBy\n      filter_mode: $filterMode\n      language: $language\n    )\n      @connection(\n        key: \"StoryComponent_story_comments_connection\"\n        filters: [\"order_by\", \"filter_mode\"]\n      ) {\n      edges {\n        nodes {\n          body {\n            text\n          }\n        }\n      }\n    }\n  }\n`; \n\n```\n\n----------------------------------------\n\nTITLE: Getting a Linked Record\nDESCRIPTION: Demonstrates how to retrieve a linked record associated with the current record using the `getLinkedRecord` method of the `RecordProxy`. The method takes the `name` of the linked record as a string, and optionally an object of `arguments`.  Returns a `RecordProxy`.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v13.0.0/api-reference/relay-runtime/store.md#2025-04-18_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nconst rootField = store.getRootField('rootField');\nconst viewer = rootField.getLinkedRecord('viewer');\n```\n\n----------------------------------------\n\nTITLE: Relay Cache Implementation\nDESCRIPTION: Example of how Relay implements normalized caching using a Map data structure.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/principles-and-architecture/thinking-in-graphql.md#2025-04-18_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nMap {\n  1: Map {\n    text: 'Relay is open-source!',\n    author: Link(2),\n  },\n  2: Map {\n    name: 'Jan',\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Importing Generated Flow Types in Relay\nDESCRIPTION: Example showing how to import Flow types generated by the Relay Compiler. These types provide static type checking for GraphQL operations and their results.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/guides/compiler.md#2025-04-18_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport type {DictionaryComponent_word} from './__generated__/DictionaryComponent_word.graphql';\n```\n\n----------------------------------------\n\nTITLE: Querying for First Ship of Rebels Faction\nDESCRIPTION: This GraphQL query demonstrates how to fetch the first ship of the Rebels faction, introducing the concept of connections and pagination in Relay.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/guides/graphql-server-specification.md#2025-04-18_snippet_5\n\nLANGUAGE: graphql\nCODE:\n```\nquery RebelsShipsQuery {\n  rebels {\n    name\n    ships(first: 1) {\n      edges {\n        node {\n          name\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Mapping Fragment Container to useFragment in JavaScript\nDESCRIPTION: Converts a legacy Fragment Container to useFragment for more direct and efficient data querying. Adjust the graphql fragment to match the required data fields, and use this hook within new component definitions.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/migration-and-compatibility/relay-hooks-and-legacy-container-apis.md#2025-04-18_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport * as React from 'React';\nimport {graphql, useFragment} from 'react-relay';\n\nexport default function UserComponent(props: Props) {\n  const data = useFragment(\n    graphql`\n      fragment UserComponent_user on User {\n        name\n        profile_picture(scale: $scale) {\n          uri\n        }\n      }\n    `,\n    props.user,\n  );\n\n  return (\n    <>\n      <h1>{data.name}</h1>\n      <div>\n        <img src={data.profile_picture?.uri} />\n      </div>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Extending Existing Types in GraphQL Schema for Relay\nDESCRIPTION: Shows how to extend an existing server-defined type with a client-only field using a .graphql file. This example adds a Boolean field 'is_new_comment' to the Comment type.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/guided-tour/updating-data/client-only-data.md#2025-04-18_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nextend type Comment {\n  is_new_comment: Boolean\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting Node from Connection Example\nDESCRIPTION: Example demonstrating how to delete a node from a connection using ConnectionHandler.deleteNode.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/api-reference/relay-runtime/store.md#2025-04-18_snippet_26\n\nLANGUAGE: javascript\nCODE:\n```\nconst user = store.get(userID);\nconst friends = ConnectionHandler.getConnection(user, 'FriendsFragment_friends');\nConnectionHandler.deleteNode(friends, idToDelete);\n```\n\n----------------------------------------\n\nTITLE: Updating Story Component with Like Button in React and Relay\nDESCRIPTION: This code snippet shows how to modify the Story component to include a Like button. It imports the StoryLikeButton component, updates the GraphQL fragment to include the button's fragment, and adds the button to the component's JSX.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/tutorial/mutations-updates.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// change-line\nimport StoryLikeButton from './StoryLikeButton';\n\n...\n\nconst StoryFragment = graphql`\n  fragment StoryFragment on Story {\n    title\n    summary\n    // ... etc\n    // change-line\n    ...StoryLikeButtonFragment\n  }\n`;\n\n...\n\nexport default function Story({story}: Props) {\n  const data = useFragment(StoryFragment, story);\n  return (\n    <Card>\n      <PosterByline person={data.poster} />\n      <Heading>{data.title}</Heading>\n      <Timestamp time={data.posterAt} />\n      <Image image={story.thumbnail} width={400} height={400} />\n      <StorySummary summary={data.summary} />\n      // change-line\n      <StoryLikeButton story={data} />\n      <StoryCommentsSection story={data} />\n    </Card>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Installing and Running Relay TodoMVC Example\nDESCRIPTION: This snippet demonstrates how to clone, install dependencies, build, and run the Relay TodoMVC example application. It uses Git and Yarn commands to set up the project.\nSOURCE: https://github.com/facebook/relay/blob/main/README.md#2025-04-18_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ngit clone https://github.com/relayjs/relay-examples.git\ncd relay-examples/todo\nyarn\nyarn build\nyarn start\n```\n\n----------------------------------------\n\nTITLE: Refreshing Queries with useLazyLoadQuery in Relay\nDESCRIPTION: Demonstrates how to refresh a query using useLazyLoadQuery by updating fetchKey and fetchPolicy. This technique causes the component to suspend during refresh, showing a fallback loading state.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/guided-tour/refetching/refreshing-queries.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * App.react.js\n */\nconst AppQuery = require('__generated__/AppQuery.graphql');\n\nfunction App(props: Props) {\n  const variables = {id: '4'};\n  const [refreshedQueryOptions, setRefreshedQueryOptions] = useState(null);\n\n  const refresh = useCallback(() => {\n    // Trigger a re-render of useLazyLoadQuery with the same variables,\n    // but an updated fetchKey and fetchPolicy.\n    // The new fetchKey will ensure that the query is fully\n    // re-evaluated and refetched.\n    // The fetchPolicy ensures that we always fetch from the network\n    // and skip the local data cache.\n    setRefreshedQueryOptions(prev => ({\n      fetchKey: (prev?.fetchKey ?? 0) + 1,\n      fetchPolicy: 'network-only',\n    }));\n  }, [/* ... */]);\n\n  return (\n    <React.Suspense fallback=\"Loading query...\">\n      <MainContent\n        refresh={refresh}\n        queryOptions={refreshedQueryOptions ?? {}}\n        variables={variables}\n      />\n    </React.Suspense>\n  );\n\n```\n\n----------------------------------------\n\nTITLE: Query Data Fetching Flow Diagram\nDESCRIPTION: ASCII diagram showing the flow of query data from initial fetch through normalization into the RecordSource. Illustrates how queries are processed from the server response into normalized records.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/principles-and-architecture/runtime-architecture.md#2025-04-18_snippet_1\n\nLANGUAGE: ascii-art\nCODE:\n```\n               ┌───────────────────────┐\n               │         Query         │\n               └───────────────────────┘\n                           │\n                           ▼\n                                             ┌ ─ ─ ─ ┐\n                         fetch ◀────────────▶ Server\n                                             └ ─ ─ ─ ┘\n                           │\n                     ┌─────┴───────┐\n                     ▼             ▼\n               ┌──────────┐  ┌──────────┐\n               │  Query   │  │ Response │\n               └──────────┘  └──────────┘\n                     │             │\n                     └─────┬───────┘\n                           │\n                           ▼\n                       normalize\n                           │\n                           ▼\n               ┌───────────────────────┐\n               │     RecordSource      │\n               │                       │\n               │┌──────┐┌──────┐┌─────┐│\n               ││Record││Record││ ... ││\n               │└──────┘└──────┘└─────┘│\n               └───────────────────────┘\n```\n\n----------------------------------------\n\nTITLE: Defining Best Friends Fragment in GraphQL\nDESCRIPTION: This snippet defines a GraphQL fragment to represent the best friends field, ensuring that the proper type is used for assignments.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/guided-tour/updating-data/imperatively-modifying-linked-fields.md#2025-04-18_snippet_5\n\nLANGUAGE: graphql\nCODE:\n```\nextend type Viewer {\n  # We are now defined a \"best_friends\" field instead of a \"best_friend\" field\n  best_friends: [User!],\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a new edge from scratch using updater function\nDESCRIPTION: This JavaScript code demonstrates how to create a new edge from scratch within a Relay updater function. It creates a new comment record and then uses `ConnectionHandler.createEdge` to build the new edge, linking it to the connection. This is useful when the edge is not returned from the server.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/guided-tour/list-data/updating-connections.md#2025-04-18_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nconst {ConnectionHandler} = require('relay-runtime');\n\nfunction updater(store: RecordSourceSelectorProxy) {\n  const storyRecord = store.get(storyID);\n  const connectionRecord = ConnectionHandler.getConnection(\n    storyRecord,\n    'StoryComponent_story_comments_connection',\n  );\n\n  // Create a new local Comment record\n  const id = `client:new_comment:${randomID()}`;\n  const newCommentRecord = store.create(id, 'Comment');\n\n  // Create new edge\n  const newEdge = ConnectionHandler.createEdge(\n    store,\n    connectionRecord,\n    newCommentRecord,\n    'CommentEdge', /* GraphQl Type for edge */\n  );\n\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Using the graphql Tag in JavaScript for Relay\nDESCRIPTION: Example of using the graphql template tag in JavaScript that gets transformed by Relay's Babel plugin into a require call for the generated artifact during build time.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/glossary/glossary.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ngraphql`...`\n```\n\n----------------------------------------\n\nTITLE: Local Query Persistence Server Implementation\nDESCRIPTION: Example implementation of a local server that handles persisted queries, saving them to a JSON file and generating MD5 hashes.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/guides/persisted-queries.md#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst http = require('http');\nconst crypto = require('crypto');\nconst fs = require('fs');\n\nfunction md5(input) {\n  return crypto.createHash('md5').update(input).digest('hex');\n}\n\nclass QueryMap {\n  constructor(fileMapName) {\n    this._fileMapName = fileMapName;\n    this._queryMap = new Map(JSON.parse(fs.readFileSync(this._fileMapName)));\n  }\n\n  _flush() {\n    const data = JSON.stringify(Array.from(this._queryMap.entries()));\n    fs.writeFileSync(this._fileMapName, data);\n  }\n\n  saveQuery(text) {\n    const id = md5(text);\n    this._queryMap.set(id, text);\n    this._flush();\n    return id;\n  }\n}\n\nconst queryMap = new QueryMap('./queryMap.json');\n\nasync function requestListener(req, res) {\n  if (req.method === 'POST') {\n    const buffers = [];\n    for await (const chunk of req) {\n      buffers.push(chunk);\n    }\n    const data = Buffer.concat(buffers).toString();\n    res.writeHead(200, {\n      'Content-Type': 'application/json'\n    });\n    try {\n      if (req.headers['content-type'] !== 'application/x-www-form-urlencoded') {\n        throw new Error(\n          'Only \"application/x-www-form-urlencoded\" requests are supported.'\n        );\n      }\n      const text = new URLSearchParams(data).get('text');\n      if (text == null) {\n        throw new Error('Expected to have `text` parameter in the POST.');\n      }\n      const id = queryMap.saveQuery(text);\n      res.end(JSON.stringify({\"id\": id}));\n    } catch (e) {\n      console.error(e);\n      res.writeHead(400);\n      res.end(`Unable to save query: ${e}.`);\n    }\n  } else {\n    res.writeHead(400);\n    res.end(\"Request is not supported.\")\n  }\n}\n\nconst PORT = 2999;\nconst server = http.createServer(requestListener);\nserver.listen(PORT);\n\nconsole.log(`Relay persisting server listening on ${PORT} port.`);\n```\n\n----------------------------------------\n\nTITLE: Defining GraphQL Subscription Configuration Type in TypeScript\nDESCRIPTION: This code snippet defines a TypeScript type `GraphQLSubscriptionConfig<TSubscriptionPayload>` which structures the necessary parameters for a GraphQL subscription in Relay. It includes mandatory fields such as `subscription`, as well as optional fields for `cacheConfig`, callbacks (`onCompleted`, `onError`, `onNext`), and an `updater`. This type helps ensure correct and efficient subscription management within a Relay application.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/api-reference/types/GraphQLSubscriptionConfig.md#2025-04-18_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ntype GraphQLSubscriptionConfig<TSubscriptionPayload> = {\n  cacheConfig?: CacheConfig,\n  subscription: GraphQLTaggedNode,\n  variables: { [key: string]: any },\n  onCompleted?: () => void,\n  onError?: (error: Error) => void,\n  onNext?: (payload: TSubscriptionPayload) => void,\n  updater?: SelectorStoreUpdater\n};\n```\n\n----------------------------------------\n\nTITLE: Setting a Linked Record\nDESCRIPTION: Demonstrates how to mutate the current record by setting a new linked record on the given field name using the `setLinkedRecord` method of the `RecordProxy`.  The method takes the `record` of type `RecordProxy` and the field `name` (string), and optionally an object of `arguments`.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v13.0.0/api-reference/relay-runtime/store.md#2025-04-18_snippet_33\n\nLANGUAGE: javascript\nCODE:\n```\nconst rootField = store.getRootField('rootField');\nconst newViewer = store.create(/* ... */);\nrootField.setLinkedRecord(newViewer, 'viewer');\n```\n\n----------------------------------------\n\nTITLE: Converting fetchQuery to a Promise in React Relay using JavaScript\nDESCRIPTION: This code snippet shows how to convert a fetchQuery call result into a promise using the toPromise method. This approach only resolves after receiving the first network response, potentially missing additional data due to cancellation of further processing. This method is not recommended for fetching deferred data.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/api-reference/relay-runtime/fetch-query.md#2025-04-18_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst {fetchQuery} = require('react-relay');\n\nfetchQuery(\n  environment,\n  graphql`\n    query AppQuery($id: ID!) {\n      user(id: $id) {\n        name\n      }\n    }\n  `,\n  {id: 4},\n)\n.toPromise() // NOTE: don't use, this can cause data to be missing!\n.then(data => {...})\n.catch(error => {...};\n```\n\n----------------------------------------\n\nTITLE: Using @arguments Directive in GraphQL Query\nDESCRIPTION: Demonstrates how to pass arguments to a fragment using the @arguments directive in a GraphQL query.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/api-reference/graphql/graphql-directives.md#2025-04-18_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nquery TodoListQuery($userID: ID) {\n  ...TodoList_list @arguments(count: $count, userID: $userID) # Pass arguments here\n}\n```\n\n----------------------------------------\n\nTITLE: Inserting Edge into Connection using ConnectionHandler\nDESCRIPTION: This snippet shows how to add an edge to a connection using ConnectionHandler.insertEdgeAfter or ConnectionHandler.insertEdgeBefore. These methods allow adding edges to either the beginning or end of a connection.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v13.0.0/guided-tour/list-data/updating-connections.md#2025-04-18_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nconst {ConnectionHandler} = require('relay-runtime');\n\nfunction updater(store: RecordSourceSelectorProxy) {\n  const storyRecord = store.get(storyID);\n  const connectionRecord = ConnectionHandler.getConnection(\n    storyRecord,\n    'StoryComponent_story_comments_connection',\n  );\n\n  const newEdge = (...);\n\n  // Add edge to the end of the connection\n  ConnectionHandler.insertEdgeAfter(\n    connectionRecord,\n    newEdge,\n  );\n\n  // Add edge to the beginning of the connection\n  ConnectionHandler.insertEdgeBefore(\n    connectionRecord,\n    newEdge,\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching GraphQL Data in React Component\nDESCRIPTION: This JavaScript code demonstrates fetching data using GraphQL within a React component's `useEffect` hook.  It uses the `fetchGraphQL` function to query the GitHub GraphQL API for a repository name and updates the component's state with the result.  It also includes a cleanup function to prevent state updates on unmounted components.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/getting-started/step-by-step-guide.md#2025-04-18_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n\"// your-app-name/src/App.js\nimport React from 'react';\nimport './App.css';\nimport fetchGraphQL from './fetchGraphQL';\n\nconst { useState, useEffect } = React;\n\nfunction App() {\n  // We'll load the name of a repository, initially setting it to null\n  const [name, setName] = useState(null);\n\n  // When the component mounts we'll fetch a repository name\n  useEffect(() => {\n    let isMounted = true;\n    fetchGraphQL(`\n      query RepositoryNameQuery {\n        # feel free to change owner/name here\n        repository(owner: \\\"facebook\\\" name: \\\"relay\\\") {\n          name\n        }\n      }\n    `).then(response => {\n      // Avoid updating state if the component unmounted before the fetch completes\n      if (!isMounted) {\n        return;\n      }\n      const data = response.data;\n      setName(data.repository.name);\n    }).catch(error => {\n      console.error(error);\n    });\n\n    return () => {\n      isMounted = false;\n    };\n  }, []);\n\n  // Render \\\"Loading\\\" until the query completes\n  return (\n    <div className=\\\"App\\\">\n      <header className=\\\"App-header\\\">\n        <p>\n          {name != null ? `Repository: ${name}` : \\\"Loading\\\"}\n        </p>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\"\n```\n\n----------------------------------------\n\nTITLE: Example Mutation Response\nDESCRIPTION: Shows the expected server response format for the like mutation\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/tutorial/mutations-updates.md#2025-04-18_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"likeStory\": {\n    \"story\": {\n      \"id\": \"34a8c\",\n      \"likeCount\": 47,\n      \"doesViewerLike\": true\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Assignable Fragment for User in GraphQL\nDESCRIPTION: This GraphQL fragment defines an assignable fragment for a User type, which is used in local updates.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/guided-tour/updating-data/imperatively-modifying-linked-fields.md#2025-04-18_snippet_5\n\nLANGUAGE: graphql\nCODE:\n```\nfragment AssignBestFriendButton_assignable_user on User @assignable {\n  __typename\n}\n```\n\n----------------------------------------\n\nTITLE: Legacy PaginationContainer Implementation in Relay\nDESCRIPTION: Example of a class-based PaginationContainer implementation using the legacy Relay container API. Shows pagination setup with configuration options for connection handling and variable management.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/migration-and-compatibility/relay-hooks-and-legacy-container-apis.md#2025-04-18_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as React from 'React';\nimport {graphql, createPaginationContainer} from 'react-relay';\n\nclass UserContainerComponent extends React.Component {\n  render(): React.Node {\n    const isLoading = this.props.relay.isLoading() || this.state.loading;\n    const hasMore = this.props.relay.hasMore();\n\n    return (\n      <>\n        <FriendsList friends={this.props.user?.friends} />\n        <Button\n          onClick={() => this.loadMore()}\n          disabled={!hasMore || isLoading}>\n          Load More\n          {isLoading && <InlineSpinner />}\n        </Button>\n      </>\n    );\n  }\n\n  loadMore() {\n    if (\n      !this.props.relay.hasMore() ||\n      this.props.relay.isLoading() ||\n      this.state.loading\n    ) {\n      return;\n    }\n\n    this.setState({loading: true});\n\n    this.props.relay.loadMore(5, () => this.setState({loading: false}));\n  }\n}\n\nexport default createPaginationContainer(\n  UserContainerComponent,\n  {\n    user: graphql`\n      fragment UserContainerComponent_user on User\n      @argumentDefinitions(count: {type: \"Int!\"}, cursor: {type: \"ID\"})\n      @refetchable(queryName: \"UserComponentRefetchQuery\") {\n        friends(first: $count, after: $cursor)\n          @connection(key: \"UserComponent_user_friends\") {\n          edges {\n            node {\n              name\n            }\n          }\n        }\n      }\n    `,\n  },\n  {\n    direction: 'forward',\n    getConnectionFromProps(props: Props) {\n      return props.user?.friends;\n    },\n    getFragmentVariables(vars, count) {\n      return {...vars, count};\n    },\n    getVariables(props: Props, {count, cursor}) {\n      return {\n        cursor,\n        count,\n      };\n    },\n    query: graphql`\n      query UserContainerComponentQuery {\n        viewer {\n          actor {\n            ... on User {\n              ...UserContainerComponent_user @arguments(count: 10)\n            }\n          }\n        }\n      }\n    `,\n  },\n);\n```\n\n----------------------------------------\n\nTITLE: Retrieving Linked Records from Relay Store\nDESCRIPTION: Demonstrates how to retrieve multiple linked records from the Relay store using the getLinkedRecords method of RecordProxy.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/api-reference/relay-runtime/store.md#2025-04-18_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nconst rootField = store.getRootField('rootField');\nconst nodes = rootField.getLinkedRecords('nodes');\n```\n\n----------------------------------------\n\nTITLE: Using GraphQL Template Tag in JavaScript\nDESCRIPTION: Example of using the graphql template tag to define a GraphQL query. The tag creates a GraphQLTaggedNode that represents the query at runtime.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/guides/compiler.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport {graphql} from 'react-relay';\n\ngraphql`\n  query MyQuery {\n    viewer {\n      id\n    }\n  }\n`;\n```\n\n----------------------------------------\n\nTITLE: Starting the React Application\nDESCRIPTION: Commands to navigate to the project directory and start the React development server using either NPM or Yarn.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/getting-started/step-by-step-guide.md#2025-04-18_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# NPM\ncd your-app-name\nnpm start\n\n# Yarn\ncd your-app-name\nyarn start\n```\n\n----------------------------------------\n\nTITLE: GraphQL Type Definition with Node Interface\nDESCRIPTION: This GraphQL schema snippet defines a Person type that implements the Node interface. The Node interface is used by Relay to indicate that a type has a stable and unique ID, which is necessary for refetchable fragments.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/tutorial/refetchable-fragments.md#2025-04-18_snippet_8\n\nLANGUAGE: graphql\nCODE:\n```\ntype Person implements Node {\n  id: ID!\n  ...\n}\n\ninterface Node {\n  id: ID!\n}\n```\n\n----------------------------------------\n\nTITLE: GraphQL Story Fragment with Comments Section\nDESCRIPTION: Demonstrates how to compose GraphQL fragments by including the comments section fragment in the main story fragment.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/tutorial/connections-pagination.md#2025-04-18_snippet_2\n\nLANGUAGE: graphql\nCODE:\n```\nconst StoryFragment = graphql`\n  fragment StoryFragment on Story {\n    // ... as before\n    ...StoryCommentsSectionFragment\n  }\n`;\n```\n\n----------------------------------------\n\nTITLE: Fetching Data with REST\nDESCRIPTION: Demonstrates traditional REST approach for fetching a list of stories requiring n+1 requests - one for the list and n requests for individual stories.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/principles-and-architecture/thinking-in-graphql.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nrest.get('/stories').then(stories =>\n  Promise.all(stories.map(story =>\n    rest.get(story.href)\n  ))\n).then(stories => {\n  console.log(stories);\n});\n```\n\n----------------------------------------\n\nTITLE: Defining a Weak Type with Relay Resolver - TypeScript\nDESCRIPTION: This snippet shows how to define a weak GraphQL type by using the @weak docblock tag. It exports a type definition that represents a fully populated model object.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/guides/relay-resolvers/defining-types.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * @RelayResolver ProfilePicture\n * @weak\n */\nexport type ProfilePicture = { url: string, height: number, width: number };\n```\n\n----------------------------------------\n\nTITLE: Testing Relay Fragment Components\nDESCRIPTION: Shows how to test fragment components by wrapping them with a query that spreads the specific fragment, using useLazyLoadQuery and RelayEnvironmentProvider\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/guides/testing-relay-components.md#2025-04-18_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\ntest('Fragment', () => {\n  const environment = createMockEnvironment();\n  const TestRenderer = () => {\n    const data = useLazyLoadQuery(\n      graphql`\n        query TestQuery @relay_test_operation {\n          myData: node(id: \"test-id\") {\n            ...MyFragment\n          }\n        }\n      `,\n      {},\n    );\n    return <MyFragmentComponent myData={data.myData} />\n  };\n```\n\n----------------------------------------\n\nTITLE: Defining UploadableMap Type for File Uploads in Relay\nDESCRIPTION: UploadableMap is a type representing an object whose values are File or Blob objects. This type is used in Relay for handling file uploads in GraphQL mutations.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/api-reference/types/UploadableMap.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype UploadableMap = {\n  [key: string]: File | Blob\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Search in ContactsList Fragment\nDESCRIPTION: GraphQL fragment with search argument passed to contacts field.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/tutorial/refetchable-fragments.md#2025-04-18_snippet_3\n\nLANGUAGE: graphql\nCODE:\n```\nconst ContactsListFragment = graphql`\n  fragment ContactsListFragment on Viewer\n    @argumentDefinitions(\n      search: {type: \"String\", defaultValue: null}\n    )\n  {\n    contacts(search: $search) {\n      id\n      ...ContactRowFragment\n    }\n  }\n`;\n```\n\n----------------------------------------\n\nTITLE: Deleting a Record from Relay Store\nDESCRIPTION: Example of deleting a record from the Relay Store using the delete method of RecordSourceSelectorProxy. It takes a dataID as an argument.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/api-reference/relay-runtime/store.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nstore.delete(dataID);\n```\n\n----------------------------------------\n\nTITLE: Getting Linked Records from Relay Store\nDESCRIPTION: Example of retrieving linked records from the Relay Store using the getLinkedRecords method of RecordProxy. It can optionally take arguments for fields with parameters.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/api-reference/relay-runtime/store.md#2025-04-18_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nconst rootField = store.getRootField('rootField');\nconst nodes = rootField.getLinkedRecords('nodes');\n\n// With arguments\nconst nodes = rootField.getLinkedRecords('nodes', {count: 10});\n```\n\n----------------------------------------\n\nTITLE: Implementing Hovercard in PosterByline Component\nDESCRIPTION: React component implementation of PosterByline with added hovercard functionality using Relay fragments.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/tutorial/queries-2.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport Hovercard from './Hovercard';\nimport PosterDetailsHovercardContents from './PosterDetailsHovercardContents';\nconst {useRef} = React;\n\nexport default function PosterByline({ poster }: Props): React.ReactElement {\n  const data = useFragment(PosterBylineFragment, poster);\n  const hoverRef = useRef(null);\n  return (\n    <div\n      ref={hoverRef}\n      className=\"byline\">\n      <Image image={data.profilePicture} width={60} height={60} className=\"byline__image\" />\n      <div className=\"byline__name\">{data.name}</div>\n      <Hovercard targetRef={hoverRef}>\n        <PosterDetailsHovercardContents />\n      </Hovercard>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using ModuleResource.read() for Dynamic Module Loading in React Relay\nDESCRIPTION: This example demonstrates how to manually read and use @module results instead of using MatchContainer. The CommentRenderer component uses useFragment to fetch data with @match directive and ModuleResource.read() to dynamically load the appropriate renderer module.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/guides/data-driven-dependencies/server-3d.md#2025-04-18_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nconst React = require('React');\nconst {Suspense} = React;\nconst {graphql, useFragment, ModuleResource} = require('react-relay');\nconst CommentFragment = graphql`\n  fragment Comment_comment on Comment {\n    comment_content_renderer @match {\n      ...CommentMarkdownRenderer_comment\n        @module(name: \"CommentMarkdownRenderer.react\")\n      ...CommentPlaintextRenderer_comment\n        @module(name: \"CommentPlaintextRenderer.react\")\n    }\n  }\n`;\nfunction CommentRenderer(props) {\n  const comment = useFragment(\n    CommentFragment,\n    props.comment,\n  );\n  if (comment.image == null) {\n    // Handle cases where the field failed to load or was null\n    return null;\n  }\n  // NOTE: this will suspend if the module is not loaded:\n  // the *parent* component should wrap this one in a Suspense boundary\n  // MatchedModule will be:\n  // - null if there was no match\n  // - CommentMarkdownRenderer.react if the result was markdown\n  // - CommentPlaintextRenderer.react if the result was plaintext\n\n  const MatchedModule = ModuleResource.read(comment.image);\n\n  if (MatchedModule == null) {\n    return null; // no match\n  }\n  // Here we ensure that all possible matched components accept the data\n  // on the same prop key, in this case 'comment'\n  // Note that MatchContainer automatically determines the\n  // correct prop key to use for the matched data.\n  return (\n    <MatchedModule\n      comment={comment.image}\n    />\n  );\n}\nmodule.exports = CommentRenderer;\n```\n\n----------------------------------------\n\nTITLE: Implementing Fetch Policy in Relay Query Loading (JavaScript)\nDESCRIPTION: This snippet demonstrates how to use a fetch policy when loading a query in Relay. It shows the usage of useQueryLoader hook and setting the fetchPolicy option when calling loadQuery.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/guided-tour/reusing-cached-data/fetch-policies.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst React = require('React');\nconst {graphql} = require('react-relay');\n\nfunction AppTabs() {\n  const [\n    queryRef,\n    loadQuery,\n  ] = useQueryLoader<HomeTabQueryType>(HomeTabQuery);\n\n  const onSelectHomeTab = () => {\n    loadQuery({id: '4'}, {fetchPolicy: 'store-or-network'});\n  }\n\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Adding @refetchable Directive to ContactsListFragment in GraphQL\nDESCRIPTION: This snippet demonstrates how to add the @refetchable directive to the ContactsListFragment, which tells Relay to generate an extra query for refetching.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/tutorial/refetchable-fragments.md#2025-04-18_snippet_4\n\nLANGUAGE: graphql\nCODE:\n```\nconst ContactsListFragment = graphql`\n  fragment ContactsListFragment on Viewer\n    // change-line\n    @refetchable(queryName: \"ContactsListRefetchQuery\")\n    @argumentDefinitions(\n      search: {type: \"String\", defaultValue: null}\n    )\n  {\n     // ...\n  }\n`;\n```\n\n----------------------------------------\n\nTITLE: Example Subscription Response Payload\nDESCRIPTION: Shows the structure of a typical subscription response payload containing updated feedback data.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/guided-tour/updating-data/graphql-subscriptions.md#2025-04-18_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"feedback_like_subscribe\": {\n    \"feedback\": {\n      \"id\": \"feedback-id\",\n      \"like_count\": 321\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Querying a Story and Related Data with GraphQL\nDESCRIPTION: This GraphQL query retrieves a story's text, author details, and comments, establishing a structure for a normalized cache. It demonstrates how to efficiently organize data, linking author records to both stories and comments.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-experimental/PrinciplesAndArchitecture-ThinkingInGraphQL.md#2025-04-18_snippet_5\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  story(id: \"1\") {\n    text,\n    author { name, photo },\n    comments {\n      text,\n      author { name, photo }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Globally Invalidating the Relay Store in an Updater Function\nDESCRIPTION: Example of how to invalidate the entire Relay store within an updater function, causing all cached data to be considered stale and requiring any query to be refetched the next time it's evaluated.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/guided-tour/reusing-cached-data/staleness-of-data.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nfunction updater(store) {\n  store.invalidateStore();\n}\n```\n\n----------------------------------------\n\nTITLE: Invalidating Specific Records in Relay\nDESCRIPTION: Demonstrates how to invalidate specific records in the Relay store using invalidateRecord() method. This allows for granular control over which data is marked as stale.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/guided-tour/reusing-cached-data/staleness-of-data.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nfunction updater(store) {\n  const user = store.get('<id>');\n  if (user != null) {\n    user.invalidateRecord();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: GraphQL query for stories with likeCount\nDESCRIPTION: This GraphQL query is used to fetch a list of stories with their id, text, and likeCount. This is used as an example for illustrating cache inconsistency.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/principles-and-architecture/thinking-in-graphql.md#2025-04-18_snippet_4\n\nLANGUAGE: graphql\nCODE:\n```\nquery { stories { id, text, likeCount } }\n```\n\n----------------------------------------\n\nTITLE: Updated React Component with Relay Query\nDESCRIPTION: Modified Newsfeed component using useLazyLoadQuery hook to fetch data from the GraphQL server.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/tutorial/queries-1.md#2025-04-18_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useLazyLoadQuery } from \"react-relay\";\n\nexport default function Newsfeed({}) {\n  const data = useLazyLoadQuery(\n    NewsfeedQuery,\n    {},\n  );\n  const story = data.topStory;\n  return (\n    <div className=\"newsfeed\">\n      <Story story={story} />\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting Local Note with commitLocalUpdate (JavaScript)\nDESCRIPTION: Shows how to remove a Note record from the user's list of notes and delete it from the local store using commitLocalUpdate.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/guides/client-schema-extensions.md#2025-04-18_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport {commitLocalUpdate} from 'react-relay';\n\nfunction deleteUserNote(environment, dataID) {\n  commitLocalUpdate(environment, store => {\n    const user = store.getRoot().getLinkedRecord('viewer');\n    const userNoteRecords = user.getLinkedRecords('notes');\n\n    // Remove the note from the list of user notes.\n    const newUserNoteRecords = userNoteRecords.filter(x => x.getDataID() !== dataID);\n\n    // Delete the note from the store.\n    store.delete(dataID);\n\n    // Set the new list of notes.\n    user.setLinkedRecords(newUserNoteRecords, 'notes');\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Adding altText to ImageFragment\nDESCRIPTION: This snippet demonstrates adding the `altText` field to the `ImageFragment`. By modifying the fragment, the `Image` component can now access the `altText` field without requiring changes to any components that use the `Image` component.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/tutorial/fragments-1.md#2025-04-18_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nconst ImageFragment = graphql`\n  fragment ImageFragment on Image {\n    url\n    // change-line\n    altText\n  }\n`;\n```\n\n----------------------------------------\n\nTITLE: Generating Sequential IDs in Relay Test Mock Resolvers\nDESCRIPTION: Example showing how to use the generateId function (second parameter of mock resolvers) to create unique, sequential identifiers during testing, which is useful for simulating database IDs.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/guides/testing-relay-components.md#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  // will generate strings \"my-id-1\", \"my-id-2\", etc.\n  ID(_, generateId) {\n     return `my-id-${generateId()}`;\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a basic client schema type in GraphQL\nDESCRIPTION: Creates a new client-side type called 'Note' with ID, title, and body fields using a .graphql file in the src directory.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/guides/client-schema-extensions.md#2025-04-18_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\ntype Note {\n  id: ID!\n  title: String\n  body: String\n}\n```\n\n----------------------------------------\n\nTITLE: Query Persistence Server Implementation\nDESCRIPTION: Example implementation of a Node.js server that handles query persistence, saving query text to a JSON file with MD5 hashing.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/guides/persisted-queries.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst http = require('http');\nconst crypto = require('crypto');\nconst fs = require('fs');\n\nfunction md5(input) {\n  return crypto.createHash('md5').update(input).digest('hex');\n}\n\nclass QueryMap {\n  constructor(fileMapName) {\n    this._fileMapName = fileMapName;\n    this._queryMap = new Map(JSON.parse(fs.readFileSync(this._fileMapName)));\n  }\n\n  _flush() {\n    const data = JSON.stringify(Array.from(this._queryMap.entries()));\n    fs.writeFileSync(this._fileMapName, data);\n  }\n\n  saveQuery(text) {\n    const id = md5(text);\n    this._queryMap.set(id, text);\n    this._flush();\n    return id;\n  }\n}\n\nconst queryMap = new QueryMap('./queryMap.json');\n\nasync function requestListener(req, res) {\n  if (req.method === 'POST') {\n    const buffers = [];\n    for await (const chunk of req) {\n      buffers.push(chunk);\n    }\n    const data = Buffer.concat(buffers).toString();\n    res.writeHead(200, {\n      'Content-Type': 'application/json'\n    });\n    try {\n      if (req.headers['content-type'] !== 'application/x-www-form-urlencoded') {\n        throw new Error(\n          'Only \"application/x-www-form-urlencoded\" requests are supported.'\n        );\n      }\n      const text = new URLSearchParams(data).get('text');\n      if (text == null) {\n        throw new Error('Expected to have `text` parameter in the POST.');\n      }\n      const id = queryMap.saveQuery(text);\n      res.end(JSON.stringify({\"id\": id}));\n    } catch (e) {\n      console.error(e);\n      res.writeHead(400);\n      res.end(`Unable to save query: ${e}.`);\n    }\n  } else {\n    res.writeHead(400);\n    res.end(\"Request is not supported.\")\n  }\n}\n\nconst PORT = 2999;\nconst server = http.createServer(requestListener);\nserver.listen(PORT);\n\nconsole.log(`Relay persisting server listening on ${PORT} port.`);\n```\n\n----------------------------------------\n\nTITLE: Comparing User and Node Queries in GraphQL\nDESCRIPTION: Two different GraphQL queries that reference the same data, demonstrating a case where data reuse would be beneficial.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/guided-tour/reusing-cached-data/filling-in-missing-data.md#2025-04-18_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\n// Query 1\n\nquery UserQuery {\n  user(id: 4) {\n    name\n  }\n}\n```\n\nLANGUAGE: graphql\nCODE:\n```\n// Query 2\n\nquery NodeQuery {\n  node(id: 4) {\n    ... on User {\n      name\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Querying for New Edge in GraphQL Mutation\nDESCRIPTION: Demonstrates how to define a GraphQL mutation that creates a comment and returns the newly created edge with its cursor and node data. The mutation includes the comment_edge field that will be used to update connections.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/guided-tour/list-data/updating-connections.md#2025-04-18_snippet_6\n\nLANGUAGE: js\nCODE:\n```\nconst {graphql} = require('react-relay');\n\nconst createCommentMutation = graphql`\n  mutation CreateCommentMutation($input: CommentCreateData!) {\n    comment_create(input: $input) {\n      comment_edge {\n        cursor\n        node {\n          body {\n            text\n          }\n        }\n      }\n    }\n  }\n`;\n```\n\n----------------------------------------\n\nTITLE: Modern usePaginationFragment Hook Implementation in React Relay\nDESCRIPTION: Updated implementation using the new usePaginationFragment hook API, demonstrating simplified pagination with React hooks. Shows how the complex configuration options are now handled automatically by the hook.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v13.0.0/migration-and-compatibility/relay-hooks-and-legacy-container-apis.md#2025-04-18_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as React from 'React';\nimport {graphql, usePaginationFragment} from 'react-relay';\n\nexport default function UserComponent(props: Props) {\n  const {data, loadNext, hasNext, isLoadingNext} = usePaginationFragment(\n    graphql`\n      fragment UserComponent_user on User\n      @refetchable(queryName: \"UserComponentRefetchQuery\") {\n        friends(first: $count, after: $after)\n          @connection(key: \"UserComponent_user_friends\") {\n          edges {\n            node {\n              name\n            }\n          }\n        }\n      }\n    `,\n    props.user,\n  );\n\n  const handleClick = useCallback(() => {\n    loadNext(5)\n  }, [loadNext])\n\n  return (\n    <>\n      <FriendsList friends={data?.friends?.edges} />\n      <Button onClick={handleClick} disabled={!hasNext || isLoadingNext}>\n        Load More\n        {isLoadingNext && <InlineSpinner />}\n      </Button>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Story Query with Like Count\nDESCRIPTION: GraphQL query example showing how to fetch stories with their like counts.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/principles-and-architecture/thinking-in-graphql.md#2025-04-18_snippet_4\n\nLANGUAGE: graphql\nCODE:\n```\nquery { stories { id, text, likeCount } }\n```\n\n----------------------------------------\n\nTITLE: Using @deleteRecord Directive for Item Deletion\nDESCRIPTION: Example of a delete mutation that uses the @deleteRecord directive to remove an item from Relay's store when it's deleted on the server.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/guided-tour/updating-data/graphql-mutations.md#2025-04-18_snippet_5\n\nLANGUAGE: graphql\nCODE:\n```\nmutation DeletePostMutation($input: DeletePostData!) {\n  delete_post(data: $input) {\n    deleted_post {\n      id @deleteRecord\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Providing Query Variables for Execution - GraphQL\nDESCRIPTION: This snippet shows how to provide variables in JSON format while executing a GraphQL query. It illustrates the expected structure of the variables object.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/guided-tour/rendering/variables.md#2025-04-18_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\n{\n  \"id\": 4\n}\n```\n\n----------------------------------------\n\nTITLE: Querying GraphQL Server - GraphQL\nDESCRIPTION: This GraphQL snippet defines a user query with an ID parameter and a fragment. It requires a GraphQL server with a schema. The input is an ID, and the output contains user details, including nested actors. Dependencies include the GraphQL schema that must support such queries.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/guided-tour/rendering/queries.md#2025-04-18_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nquery UserQuery($id: ID!) {\n  user(id: $id) {\n    id\n    name\n    ...UserFragment\n  }\n  viewer {\n    actor {\n      name\n    }\n  }\n}\n\nfragment UserFragment on User {\n  username\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Comment Posting with useMutation in Relay\nDESCRIPTION: Uses the useMutation hook to get access to the commitMutation callback and implements the onPost function to post a new comment.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/tutorial/mutations-updates.md#2025-04-18_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction StoryCommentsComposer({story}) {\n  const data = useFragment(StoryCommentsComposerFragment, story);\n  const [text, setText] = useState('');\n  const [commitMutation, isMutationInFlight] = useMutation(StoryCommentsComposerPostMutation);\n  function onPost() {\n    setText(''); // Reset the UI\n    commitMutation({\n      variables: {\n        id: data.id,\n        text,\n      },\n    })\n  }\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Using @module Directly Without @match in React Relay\nDESCRIPTION: This example shows how to use the @module directive directly to load a non-React module for a field without using @match. It demonstrates using ModuleResource.read() to consume the module when the field isn't null.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/guides/data-driven-dependencies/server-3d.md#2025-04-18_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nfunction CommentRenderer(props) {\n  const comment = useFragment(\n    graphql`\n      fragment Comment_comment on Comment {\n        image {\n          ...CommentImage_image\n            @module(name: \"ImageProcessingModule\")\n        }\n      }\n    `,\n    props.comment,\n  );\n\n  if (comment.image == null) {\n    // Handle cases where the field failed to load or was null\n    return null;\n  }\n\n  // NOTE: this will suspend if the module is not loaded\n  const ImageProcessingModule = ModuleResource.read(comment.image);\n\n  if (ImageProcessingModule == null) {\n    return null; // no match\n  }\n\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Consuming Resolver Fields with Arguments in GraphQL Queries\nDESCRIPTION: Shows how to query a resolver field that requires arguments. The query must pass the required argument to the field, which may come from a variable.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/guides/relay-resolvers/field-arguments.md#2025-04-18_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\nquery MyQuery($salutation: String!) {\n  me {\n    greet(salutation: $salutation)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Relay Refetch Components\nDESCRIPTION: Demonstrates testing components that use refetch functionality, including mocking refetch responses and verifying component updates.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/guides/testing-relay-components.md#2025-04-18_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\ntest('Refetch Container', () => {\n  const environment = createMockEnvironment();\n  const TestRenderer = () => {\n    const data = useLazyLoadQuery(\n      graphql`\n        query TestQuery @relay_test_operation {\n          myData: node(id: \"test-id\") {\n            ...MyRefetchableFragment\n          }\n        }\n      `,\n      {},\n    );\n    return <MyRefetchContainer data={data.myData} />\n  };\n\n  const renderer = ReactTestRenderer.create(\n    <RelayEnvironmentProvider environment={environment}>\n      <Suspense fallback=\"Loading...\">\n        <TestRenderer />\n      </Suspense>\n    </RelayEnvironmentProvider>\n  );\n\n  ReactTestRenderer.act(() => {\n    environment.mock.resolveMostRecentOperation(operation =>\n      MockPayloadGenerator.generate(operation),\n    );\n  });\n\n  const refetchButton = renderer.root.find(node => node.props['data-testid'] === 'refetch');\n\n  refetchButton.props.onClick();\n\n  ReactTestRenderer.act(() => {\n    environment.mock.resolveMostRecentOperation(operation =>\n      MockPayloadGenerator.generate(operation, {\n      }),\n    );\n  });\n\n  expect(renderer).toMatchSnapshot();\n});\n```\n\n----------------------------------------\n\nTITLE: Deleting Nodes with ConnectionHandler\nDESCRIPTION: Example showing how to delete nodes from a connection using ConnectionHandler.deleteNode. This demonstrates removing an edge from the connection based on its node ID.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/api-reference/relay-runtime/store.md#2025-04-18_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nconst user = store.get(userID);\nconst friends = ConnectionHandler.getConnection(user, 'FriendsFragment_friends');\nConnectionHandler.deleteNode(friends, idToDelete);\n```\n\n----------------------------------------\n\nTITLE: Basic GraphQL Friends Connection Query Example\nDESCRIPTION: Demonstrates a simple GraphQL query fragment showing how to access edge properties and node data in a friends connection.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/tutorial/connections-pagination.md#2025-04-18_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nfragment FriendsFragment1 on Viewer {\n  friends {\n    since // a property of the edge\n    node {\n      name // a property of the friend itself\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Fragment Arguments for Pagination in GraphQL\nDESCRIPTION: Demonstrates how to configure a GraphQL fragment with pagination arguments for cursor-based pagination, including count and cursor parameters.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/tutorial/connections-pagination.md#2025-04-18_snippet_4\n\nLANGUAGE: graphql\nCODE:\n```\nconst StoryCommentsSectionFragment = graphql`\n  fragment StoryCommentsSectionFragment on Story\n    @argumentDefinitions(\n      cursor: { type: \"String\" }\n      count: { type: \"Int\", defaultValue: 3 }\n    )\n  {\n    comments(after: $cursor, first: $count) {\n      edges {\n        node {\n          ...CommentFragment\n        }\n      }\n      pageInfo {\n        hasNextPage\n      }\n    }\n  }\n`;\n```\n\n----------------------------------------\n\nTITLE: Setting Field Value in Relay Store\nDESCRIPTION: The `setValue` method allows mutation of a record by setting a new value to a specified field, with support for optional argument-driven updates.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/api-reference/relay-runtime/store.md#2025-04-18_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nviewer.setValue('New Name', 'name');\n```\n\nLANGUAGE: javascript\nCODE:\n```\nviewer.setValue('New Name', 'name', {arg: 'value'});\n```\n\n----------------------------------------\n\nTITLE: Setting up RelayEnvironmentProvider at Application Root in JavaScript\nDESCRIPTION: This snippet demonstrates how to set up the RelayEnvironmentProvider at the root of a React application. The RelayEnvironmentProvider makes the Relay environment available to all descendant Relay components, which is necessary for Relay to function properly.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v13.0.0/guided-tour/rendering/environment.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// App root\n\nconst {RelayEnvironmentProvider} = require('react-relay');\nconst Environment = require('MyEnvironment');\n\nfunction Root() {\n  return (\n    <RelayEnvironmentProvider environment={Environment}>\n      {/*... */}\n    </RelayEnvironmentProvider>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: GitHub Authentication Environment Configuration\nDESCRIPTION: Environment variable configuration for GitHub GraphQL API authentication token.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/getting-started/step-by-step-guide.md#2025-04-18_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# your-app-name/.env.local\nREACT_APP_GITHUB_AUTH_TOKEN=<TOKEN>\n```\n\n----------------------------------------\n\nTITLE: Querying Local State Using useLazyLoadQuery - JavaScript\nDESCRIPTION: This snippet demonstrates how to query local state using the 'useLazyLoadQuery' hook from Relay, retrieving data for the 'viewer' and the related notes.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v13.0.0/guides/client-schema-extensions.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// Example.js\nimport * as React from 'react';\nimport { useLazyLoadQuery, graphql } from 'react-relay';\n\nconst Example = (props) => {\n  const data = useLazyLoadQuery(graphql`\n    query ExampleQuery {\n      viewer {\n        id\n        name\n        notes {\n          id\n          title\n          body\n        }\n      }\n    }\n  `, {});\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Selecting a list of stories in GraphQL\nDESCRIPTION: This GraphQL query selects a list of top stories from the server. It replaces the original `topStory` field with `topStories` to retrieve multiple stories and also selects the `id` field. The `StoryFragment` is spread to include fields needed by the `Story` component.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/tutorial/arrays-lists.md#2025-04-18_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\nconst NewsfeedQuery = graphql`\n  query NewsfeedQuery {\n    topStories {\n      id\n      ...StoryFragment\n    }\n  }\n`;\n```\n\n----------------------------------------\n\nTITLE: Modern usePaginationFragment Hook Implementation in React Relay\nDESCRIPTION: Updated implementation using the modern usePaginationFragment hook API. Shows simplified pagination handling with built-in loading states and pagination controls.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/migration-and-compatibility/relay-hooks-and-legacy-container-apis.md#2025-04-18_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as React from 'React';\nimport {graphql, usePaginationFragment} from 'react-relay';\n\nexport default function UserComponent(props: Props) {\n  const {data, loadNext, hasNext, isLoadingNext} = usePaginationFragment(\n    graphql`\n      fragment UserComponent_user on User\n      @refetchable(queryName: \"UserComponentRefetchQuery\") {\n        friends(first: $count, after: $after)\n          @connection(key: \"UserComponent_user_friends\") {\n          edges {\n            node {\n              name\n            }\n          }\n        }\n      }\n    `,\n    props.user,\n  );\n\n  const handleClick = useCallback(() => {\n    loadNext(5)\n  }, [loadNext])\n\n  return (\n    <>\n      <FriendsList friends={data?.friends?.edges} />\n      <Button onClick={handleClick} disabled={!hasNext || isLoadingNext}>\n        Load More\n        {isLoadingNext && <InlineSpinner />}\n      </Button>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing GraphQL Subscription using requestSubscription in Relay\nDESCRIPTION: Example showing how to create a GraphQL subscription using the requestSubscription API. The code demonstrates importing the necessary functions, defining a subscription query, and creating a subscription with environment and variables configuration.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/api-reference/relay-runtime/request-subscription.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport {graphql, requestSubscription} from 'react-relay';\n\nconst subscription = graphql`\n  subscription UserDataSubscription($input: InputData!) {\n    # ...\n  }\n`;\n\nfunction createSubscription(environment: IEnvironment): Disposable {\n  return requestSubscription(environment, {\n    subscription,\n    variables: {input: {userId: '4'}},\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Relay Query Data with useLazyLoadQuery\nDESCRIPTION: This code snippet shows how to use `useLazyLoadQuery` to fetch and render data from a Relay query. It takes variables and fetch options as input, renders the retrieved data, and includes a button to trigger a refresh. The component receives a `refresh` function, `queryOptions`, and `variables` as props.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/guided-tour/refetching/refreshing-queries.md#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * MainContent.react.js\n */\n\n// Fetches and renders the query, given the fetch options\nfunction MainContent(props) {\n  const {refresh, queryOptions, variables} = props;\n  const data = useLazyLoadQuery(\n    graphql`\n      query AppQuery($id: ID!) {\n        user(id: $id) {\n          name\n          friends {\n            count\n          }\n        }\n      }\n    `,\n    variables,\n    queryOptions,\n  );\n\n  return (\n    <>\n      <h1>{data.user?.name}</h1>\n      <div>Friends count: {data.user.friends?.count}</div>\n      <Button\n        onClick={() => refresh()}>\n        Fetch latest count\n      </Button>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Flattening Transform Example\nDESCRIPTION: This example demonstrates how the FlattenTransform reduces levels of indirection in a query by inlining fields from anonymous fragments. It simplifies the processing of query results by reducing duplicate field processing.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/principles-and-architecture/compiler-architecture.md#2025-04-18_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\n\"# before: `id` is processed twice\nfoo { # type FooType\n   id\n   ... on FooType { # matches the parent type, so this is extraneous\n     id\n   }\n }\n\n # after: `id` is processed once\n foo {\n   id\n }\"\n```\n\n----------------------------------------\n\nTITLE: Handling Stale Data during Force Fetch\nDESCRIPTION: Advanced example showing how to handle and indicate stale data state during force fetching using renderFetched callback with readyState parameter.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-classic/Classic-Guides-RootContainer.md#2025-04-18_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\n<Relay.RootContainer\n  Component={ProfilePicture}\n  route={profileRoute}\n  forceFetch={true}\n  renderFetched={function(data, readyState) {\n    var isRefreshing = readyState.stale;\n    return (\n      <ScrollView>\n        <Spinner style={{display: isRefreshing ? 'block' : 'none' }}\n        <ProfilePicture {...data} />\n      </ScrollView>\n    );\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Plain GraphQL Connection Fragment\nDESCRIPTION: A GraphQL fragment showing a plain connection without @connection directive. This represents a basic way to define a connection to friends with pagination.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/api-reference/relay-runtime/store.md#2025-04-18_snippet_7\n\nLANGUAGE: graphql\nCODE:\n```\nfragment FriendsFragment on User {\n  friends(first: 10) {\n    edges {\n      node {\n        id\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Relay Resolver with Fragment Arguments\nDESCRIPTION: Example of defining a Relay Resolver that accepts fragment arguments and uses them in the resolver function.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/guides/relay-resolvers.md#2025-04-18_snippet_2\n\nLANGUAGE: js\nCODE:\n```\n/**\n* @RelayResolver\n* @fieldName my_resolver_field\n* @onType MyType\n* @rootFragment myResolverFragment\n*/\nfunction myResolver(key) {\n   const data = readFragment(graphql`\n       fragment myResolverFragment on MyType\n            @argumentDefinitions(my_arg: {type: \"Float!\"}) {\n            field_with_arg(arg: $my_arg) {\n               __typename\n            }\n       }\n   `, key);\n\n   return data.field_with_arg.__typename;\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Multiple Connection Records in Relay\nDESCRIPTION: This snippet demonstrates how to update multiple connection records when adding a new comment. It checks if the new comment should be added to both the date-sorted and friends-only connections.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v13.0.0/guided-tour/list-data/updating-connections.md#2025-04-18_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nconst {ConnectionHandler} = require('relay-runtime');\n\nfunction updater(store: RecordSourceSelectorProxy) {\n  const storyRecord = store.get(storyID);\n\n  // Get the connection instance for the connection with comments sorted\n  // by the date they were added\n  const connectionRecordSortedByDate = ConnectionHandler.getConnection(\n    storyRecord,\n    'StoryComponent_story_comments_connection',\n    {order_by: '*DATE_ADDED*', filter_mode: null, language: null}\n  );\n\n  // Get the connection instance for the connection that only contains\n  // comments made by friends\n  const connectionRecordFriendsOnly = ConnectionHandler.getConnection(\n    storyRecord,\n    'StoryComponent_story_comments_connection',\n    {order_by: null, filter_mode: '*FRIENDS_ONLY*', language: null}\n  );\n\n  const newComment = (...);\n  const newEdge = (...);\n\n  ConnectionHandler.insertEdgeAfter(\n    connectionRecordSortedByDate,\n    newEdge,\n  );\n\n  if (isMadeByFriend(storyRecord, newComment) {\n    // Only add new comment to friends-only connection if the comment\n    // was made by a friend\n    ConnectionHandler.insertEdgeAfter(\n      connectionRecordFriendsOnly,\n      newEdge,\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Story Details with GraphQL\nDESCRIPTION: This GraphQL snippet queries for a story's text, its author's details, and the comments on the story. It requires a story ID as input and outputs the story text, author name and photo, and comments. This forms the base data for caching in an application.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v13.0.0/principles-and-architecture/thinking-in-graphql.md#2025-04-18_snippet_9\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  story(id: \"1\") {\n    text,\n    author { name, photo },\n    comments {\n      text,\n      author { name, photo }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Image Fragment in TypeScript\nDESCRIPTION: Creating a reusable fragment for the Image component\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/tutorial/fragments-1.md#2025-04-18_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { graphql } from 'relay-runtime';\n\nconst ImageFragment = graphql`\n  fragment ImageFragment on Image {\n    url\n  }\n`;\n```\n\n----------------------------------------\n\nTITLE: Configuring Babel for Relay Plugin\nDESCRIPTION: JSON configuration for .babelrc file to include the Relay plugin. The plugin should be added to the list of plugins to enable GraphQL template literal transformation.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/getting-started/babel-plugin.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"plugins\": [\"relay\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing useTransition with Relay Refetchable Fragment\nDESCRIPTION: Shows how to implement smooth data loading transitions in a React component using useTransition hook with Relay's refetchable fragment. The code demonstrates managing loading states while keeping the UI responsive during data fetches.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/tutorial/refetchable-fragments.md#2025-04-18_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nconst {useState, useTransition} = React;\n\nfunction ContactsList({viewer}) {\n  const [isPending, startTransition] = useTransition();\n  const [searchString, setSearchString] = useState('');\n  const [data, refetch] = useRefetchableFragment(ContactsListFragment, viewer);\n  const onSearchStringChanged = (value) => {\n    setSearchString(value);\n    startTransition(() => {\n      refetch({search: value});\n    });\n  };\n  return (\n    <Card dim={true}>\n      <h3>Contacts</h3>\n      <SearchInput\n        value={searchString}\n        onChange={onSearchStringChanged}\n        isPending={isPending}\n      />\n      {data.contacts.map(contact =>\n        <ContactRow key={contact.id} contact={contact} />\n      )}\n    </Card>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Garbage Collection Scheduler in Relay\nDESCRIPTION: This snippet shows how to provide a custom garbage collection scheduler function to the Relay Store. The scheduler determines when a garbage collection execution should run.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/guided-tour/reusing-cached-data/presence-of-data.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// Sample scheduler function\n// Accepts a callback and schedules it to run at some future time.\nfunction gcScheduler(run: () => void) {\n  resolveImmediate(run);\n}\n\nconst store = new Store(source, {gcScheduler});\n```\n\n----------------------------------------\n\nTITLE: Implementing GraphQL Subscriptions with subscriptions-transport-ws in Relay\nDESCRIPTION: Alternative implementation using the legacy subscriptions-transport-ws library for WebSocket-based GraphQL subscriptions. Sets up a subscription client with reconnection support and converts the library's observable type to Relay's Observable.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/guided-tour/updating-data/graphql-subscriptions.md#2025-04-18_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport {\n    ...\n    Network,\n    Observable\n} from 'relay-runtime';\nimport { SubscriptionClient } from 'subscriptions-transport-ws';\n\nconst subscriptionClient = new SubscriptionClient('ws://localhost:3000', {\n  reconnect: true,\n});\n\nconst subscribe = (request, variables) => {\n  const subscribeObservable = subscriptionClient.request({\n    query: request.text,\n    operationName: request.name,\n    variables,\n  });\n  // Important: Convert subscriptions-transport-ws observable type to Relay's\n  return Observable.from(subscribeObservable);\n};\n\nconst network = Network.create(fetchQuery, subscribe);\n```\n\n----------------------------------------\n\nTITLE: Javascript graphql tagged nodes transformation\nDESCRIPTION: This snippet shows how `graphql` tagged template literals are transformed into query ASTs (concrete requests) during the build process using a Babel transform.  These ASTs are essential for Relay to understand and execute queries.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v13.0.0/glossary/glossary.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ngraphql`...`\n```\n\n----------------------------------------\n\nTITLE: Invalid @required Action Chaining\nDESCRIPTION: Example of invalid @required chaining where child field has less severe action than parent\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/guides/required-directive.md#2025-04-18_snippet_4\n\nLANGUAGE: graphql\nCODE:\n```\nfragment MyUser on User {\n  profile_picture @required(action: THROW) {\n    url @required(action: LOG)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring a Relay Query\nDESCRIPTION: This code snippet shows how to declare a Relay query using a GraphQL literal. The query specifies which data to fetch from the server and includes a fragment spread (`...AuthorDetails_author`) to incorporate the data requirements of another component. The query takes a `$storyID` variable as input.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/principles-and-architecture/thinking-in-relay.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// Story.react.js\nconst storyQuery = graphql`\n  query StoryQuery($storyID: ID!) {\n    story(id: $storyID) {\n      title\n      author {\n        ...AuthorDetails_author\n      }\n    }\n  }\n`;\n```\n\n----------------------------------------\n\nTITLE: Fetching data with REST\nDESCRIPTION: This code snippet demonstrates how to fetch a list of story IDs and their details using a resource-oriented REST approach. It involves making an initial request to get the list of story IDs, and then making separate requests for each individual story's details. It requires n+1 requests to the server.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/principles-and-architecture/thinking-in-graphql.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// Fetch the list of story IDs but not their details:\nrest.get('/stories').then(stories =>\n  // This resolves to a list of items with linked resources:\n  // `[ { href: \\\"http://.../story/1\\\" }, ... ]`\n  Promise.all(stories.map(story =>\n    rest.get(story.href) // Follow the links\n  ))\n).then(stories => {\n  // This resolves to a list of story items:\n  // `[ { id: \\\"...\\\", text: \\\"...\\\" } ]`\n  console.log(stories);\n});\n```\n\n----------------------------------------\n\nTITLE: Using @waterfall Directive for Server Types in Relay Query (TypeScript)\nDESCRIPTION: Demonstrates the use of the @waterfall directive when selecting a client-to-server edge field in a Relay query. This is required for lazy loading of server data.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/guides/relay-resolvers/return-types.md#2025-04-18_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nfunction Post() {\n  const data = useLazyLoadQuery(graphql`\n    query PostQuery {\n      post {\n        author @waterfall {\n          name\n        }\n      }\n    }`, {});\n  return <p>{data.post.author.name}</p>;\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Data with GraphQL\nDESCRIPTION: Shows how to fetch the same story data using GraphQL in a single network request.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-experimental/PrinciplesAndArchitecture-ThinkingInGraphQL.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ngraphql.get(`query { stories { id, text } }`).then(\n  stories => {\n    console.log(stories);\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: RecordSourceProxy Interface Definition in JavaScript\nDESCRIPTION: Defines the RecordSourceProxy interface, which provides methods for mutating records in the Relay store.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/api-reference/relay-runtime/store.md#2025-04-18_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\ninterface RecordSourceProxy {\n  create(dataID: DataID, typeName: string): RecordProxy;\n  delete(dataID: DataID): void;\n  get(dataID: DataID): ?RecordProxy;\n  getRoot(): RecordProxy;\n  invalidateStore(): void;\n  readUpdatableFragment<TFragmentType: FragmentType, TData>(\n    fragment: UpdatableFragment<TFragmentType, TData>,\n    fragmentReference: HasUpdatableSpread<TFragmentType>,\n  ): UpdatableData<TData>;\n  readUpdatableQuery<TVariables: Variables, TData>(\n    query: UpdatableQuery<TVariables, TData>,\n    variables: TVariables,\n  ): UpdatableData<TData>;\n}\n```\n\n----------------------------------------\n\nTITLE: Updating a User Note with commitLocalUpdate - JavaScript\nDESCRIPTION: This snippet shows how to update an existing user's note by using 'commitLocalUpdate'. The function modifies fields such as body and title based on provided parameters, ensuring the local state reflects the changes.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v13.0.0/guides/client-schema-extensions.md#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport {commitLocalUpdate} from 'react-relay';\n\nfunction updateUserNote(environment, dataID, body, title) {\n  commitLocalUpdate(environment, store => {\n    const note = store.get(dataID);\n\n    note.setValue(body, 'body');\n    note.setValue(title, 'title')\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Record in Relay Store with JavaScript\nDESCRIPTION: Illustrates creating a new record in the Relay store by using the `create` function of RecordSourceProxy, which takes a data ID and typeName, returning a RecordProxy for data mutations.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/api-reference/relay-runtime/store.md#2025-04-18_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nconst record = store.create(dataID, 'Todo');\n```\n\n----------------------------------------\n\nTITLE: GraphQL Query with Node Interface for Refetchable Fragments\nDESCRIPTION: This GraphQL snippet shows the structure of a query that can be used to refetch a fragment. It demonstrates the use of the 'node' field, which is a convention used by Relay to fetch a specific graph node by its ID.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/tutorial/refetchable-fragments.md#2025-04-18_snippet_7\n\nLANGUAGE: graphql\nCODE:\n```\nquery RefetchQuery {\n  node(id: \"abcdef\") {\n    ...PosterFragment\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Basic GraphQL Mutation\nDESCRIPTION: Example of a GraphQL mutation that likes a feedback item, showing the mutation structure and field selection.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/guided-tour/updating-data/graphql-mutations.md#2025-04-18_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nmutation FeedbackLikeMutation($input: FeedbackLikeData!) {\n  feedback_like(data: $input) {\n    feedback {\n      id\n      viewer_does_like\n      like_count\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Store Notification Flow Diagram\nDESCRIPTION: ASCII diagram showing how the store notifies subscribers of changes after publishing, including the subscription callback execution flow.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/principles-and-architecture/runtime-architecture.md#2025-04-18_snippet_3\n\nLANGUAGE: ascii-diagram\nCODE:\n```\n                        notify\n                           │\n                           ▼\n             ┌───────────────────────────┐\n             │           Store           │\n             │ ┌───────────────────────┐ │\n             │ │     RecordSource      │ │\n             │ │                       │ │\n             │ │┌──────┐┌──────┐┌─────┐│ │\n             │ ││Record││Record││ ... ││ │\n             │ │└──────┘└──────┘└─────┘│ │\n             │ └───────────────────────┘ │\n             │ ┌───────────────────────┐ │\n             │ │     Subscriptions     │ │\n             │ │                       │ │\n             │ │┌──────┐┌──────┐┌─────┐│ │\n             │ ││  Sub.││  Sub.││  ...││ │ <--- affected subscriptions fire\n             │ │└──────┘└──────┘└─────┘│ │\n             │ └───┼───────┼───────┼───┘ │\n             └─────┼───────┼───────┼─────┘\n                   │       │       │\n                   ▼       │       │\n               callback    │       │\n                           ▼       │\n                       callback    │\n                                   ▼\n                               callback\n```\n\n----------------------------------------\n\nTITLE: Using useEntryPointLoader Hook with React and Relay\nDESCRIPTION: Example showing how to use the useEntryPointLoader hook to manage EntryPoint loading and disposal in a React component. Demonstrates integration with EntryPointContainer and handling of loading states.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/api-reference/entrypoint-apis/use-entrypoint-loader.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst {useEntryPointLoader, EntryPointContainer} = require('react-relay');\n\nconst ComponentEntryPoint = require('Component.entrypoint');\n\nfunction EntryPointRevealer(): React.MixedElement {\n  const environmentProvider = useMyEnvironmentProvider();\n  const [\n    entryPointReference,\n    loadEntryPoint,\n    disposeEntryPoint,\n  ] = useEntryPointLoader(environmentProvider, ComponentEntryPoint);\n\n  return (\n    <>\n      {\n        entryPointReference == null && (\n          <Button onClick={() => loadEntryPoint({})}>\n            Click to reveal the contents of the EntryPoint\n          </Button>\n        )\n      }\n      {\n        entryPointReference != null && (\n          <>\n            <Button onClick={disposeEntryPoint}>\n              Click to hide and dispose the EntryPoint.\n            </Button>\n            <Suspense fallback=\"Loading...\">\n              <EntryPointContainer\n                entryPointReference={entryPointReference}\n                props={{}}\n              />\n            </Suspense>\n          </>\n        )\n      }\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: JavaScript: Chaining @required Directives\nDESCRIPTION: This JavaScript snippet shows how to chain `@required` directives to make deeply nested fields accessible with a single null check. If any of the `@required` fields are null, the nullness will bubble up, allowing for concise null checks. The `useFragment` hook is used to access the data.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/guides/required-directive.md#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst user = useFragment(graphql`\n  fragment MyUser on User {\n    name @required(action: LOG)\n    profile_picture @required(action: LOG) {\n      url @required(action: LOG)\n    }\n  }`, key);\n if(user == null) {\n   return null;\n }\n return <img src={user.profile_picture.url} alt={user.name} />\n```\n\n----------------------------------------\n\nTITLE: Example Usage of Relay.Renderer with Custom Render Function in JSX\nDESCRIPTION: Demonstrates how to use Relay.Renderer with a custom render function that handles loading, error, and success states. It uses ProfilePicture as the Container component and profileRoute as the queryConfig.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-classic/Classic-APIReference-Renderer.md#2025-04-18_snippet_5\n\nLANGUAGE: JSX\nCODE:\n```\n// In this example, `ErrorComponent` and `LoadingComponent`\n// simply display a static error message / loading indicator.\n<Relay.Renderer\n  Container={ProfilePicture}\n  queryConfig={profileRoute}\n  environment={Relay.Store}\n  render={({done, error, props, retry, stale}) => {\n        if (error) {\n          return <ErrorComponent />;\n        } else if (props) {\n          return <ProfilePicture {...props} />;\n        } else {\n          return <LoadingComponent />;\n        }\n      }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Specifying GraphQL Variables for Query Execution\nDESCRIPTION: Provides an example of how to specify variables when executing a GraphQL query. Here, the variable id is set to 4.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/guided-tour/rendering/variables.md#2025-04-18_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\n# Query:\nquery UserQuery($id: ID!) {\n  # ...\n}\n\n# Variables:\n{\"id\": 4}\n```\n\n----------------------------------------\n\nTITLE: Configuring Persisted Queries in Relay\nDESCRIPTION: Setup for persisted queries in the relay configuration within package.json. It defines the relay's source and schema, along with the persistConfig settings for URL and parameters.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v13.0.0/guides/persisted-queries.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n\"scripts\": {\n  \"relay\": \"relay-compiler\",\n  \"relay-persisting\": \"node relayLocalPersisting.js\"\n},\n\"relay\": {\n  \"src\": \"./src\",\n  \"schema\": \"./schema.graphql\",\n  \"persistConfig\": {\n    \"url\": \"http://localhost:2999\",\n    \"params\": {}\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Copying Fields Between Records in Relay Store\nDESCRIPTION: Demonstrates how to copy fields from one record to another in the Relay store using the copyFieldsFrom method of RecordProxy.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/api-reference/relay-runtime/store.md#2025-04-18_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nconst record = store.get(id1);\nconst otherRecord = store.get(id2);\nrecord.copyFieldsFrom(otherRecord); // Mutates `record`\n```\n\n----------------------------------------\n\nTITLE: Configuring relayFieldLogger in Relay Environment\nDESCRIPTION: This snippet demonstrates how to set up a relayFieldLogger function in the Relay Environment configuration. The logger receives events for different types of field errors and can be used to handle or monitor these errors.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/api-reference/relay-runtime/field-logger.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Environment} from \"relay-runtime\";\n\nconst environment = new Environment({\n    relayFieldLogger: (event) => {\n        switch(event.kind) {\n            case \"missing_expected_data.log\":\n                // ...\n                break;\n            // ... handle other events\n        }\n    },\n    network: // ...\n    store: // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing a Field Logger for Relay Resolver Errors\nDESCRIPTION: Example implementation of a fieldLogger function that handles resolver errors and configuring a Relay Environment with the logger. The logger logs errors to the console with context information.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/guides/relay-resolvers/errors.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nfunction fieldLogger(event) {\n  if(event.kind === \"relay_resolver.error\") {\n    // Log this somewhere!\n    console.warn(`Resolver error encountered in ${event.owner}.${event.fieldPath}`)\n    console.warn(event.error)\n  }\n}\n\nconst environment = new Environment({\n  network: Network.create(/* your fetch function here */),\n  store: new LiveResolverStore(new RecordSource()),\n  relayFieldLogger: fieldLogger\n});\n```\n\n----------------------------------------\n\nTITLE: Defining GraphQL Query with Fragment Spread\nDESCRIPTION: Demonstrates how to create a query that includes a fragment spread, allowing data fetching for both parent and child components in a single request.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/principles-and-architecture/thinking-in-relay.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst storyQuery = graphql`\n  query StoryQuery($storyID: ID!) {\n    story(id: $storyID) {\n      title\n      author {\n        ...AuthorDetails_author\n      }\n    }\n  }\n`;\n```\n\n----------------------------------------\n\nTITLE: Passing Fragment Argument to Contacts Field\nDESCRIPTION: Updating the contacts field to accept the search parameter from the fragment argument, enabling filtering of the contacts list.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/tutorial/refetchable-fragments.md#2025-04-18_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst ContactsListFragment = graphql`\n  fragment ContactsListFragment on Viewer\n    @argumentDefinitions(\n      search: {type: \"String\", defaultValue: null}\n    )\n  {\n    // change-line\n    contacts(search: $search) {\n      id\n      ...ContactRowFragment\n    }\n  }\n`;\n```\n\n----------------------------------------\n\nTITLE: Fetching Persisted Queries\nDESCRIPTION: Implementation of a fetch function that sends a persisted query ID to the server instead of the query itself. This allows for fetching using an md5 hash.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v13.0.0/guides/persisted-queries.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nfunction fetchQuery(operation, variables) {\n  return fetch('/graphql', {\n    method: 'POST',\n    headers: {\n      'content-type': 'application/json'\n    },\n    body: JSON.stringify({\n      doc_id: operation.id, // NOTE: pass md5 hash to the server\n      // query: operation.text, // this is now obsolete because text is null\n      variables,\n    }),\n  }).then(response => {\n    return response.json();\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Returning Client-defined GraphQL Type in Relay Resolver (TypeScript)\nDESCRIPTION: Demonstrates returning a 'strong' type object with an ID for a Post.author field in a Relay Resolver.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/guides/relay-resolvers/return-types.md#2025-04-18_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport {DataID} from 'relay-runtime';\n/**\n * @RelayResolver Post.author: User\n */\nexport function author(post: PostModel): { id: DataID } {\n  return { id: post.authorId };\n}\n```\n\n----------------------------------------\n\nTITLE: Relay Query Definition\nDESCRIPTION: This snippet defines a GraphQL query using the `graphql` template tag.  The query `DictionaryQuery` fetches a list of dictionaries and includes the `DictionaryComponent_word` fragment. The Relay Compiler will process this query to generate optimized code.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/guides/compiler.md#2025-04-18_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst DictionaryQuery = graphql`\n  query DictionaryQuery {\n    dictionary {\n      ...DictionaryComponent_word\n    }\n  }\n`\n```\n\n----------------------------------------\n\nTITLE: Getting the Root Record\nDESCRIPTION: Demonstrates how to get the root record using the `getRoot` method of the `RecordSourceSelectorProxy`. This method returns a `RecordProxy` representing the root of the GraphQL document.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v13.0.0/api-reference/relay-runtime/store.md#2025-04-18_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// Represents root query\nconst root = store.getRoot();\n```\n\n----------------------------------------\n\nTITLE: Displaying Date in Story Component\nDESCRIPTION: This code snippet modifies the Story component to display the date. It includes importing the Timestamp component, adding the createdAt property to the Props type definition, and rendering the Timestamp component with the createdAt prop.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/tutorial/fragments-1.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// change-line\nimport Timestamp from './Timestamp';\n\ntype Props = {\n  story: {\n    // change-line\n    createdAt: string; // Add this line\n    ...\n  };\n};\n\nexport default function Story({story}: Props) {\n  return (\n    <Card>\n      <PosterByline person={story.poster} />\n      <Heading>{story.title}</Heading>\n      // change-line\n      <Timestamp time={story.createdAt} /> // Add this line\n      <Image image={story.image} />\n      <StorySummary summary={story.summary} />\n    </Card>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Spreading ImageFragment in StoryFragment (GraphQL)\nDESCRIPTION: GraphQL fragment definition for Story component that includes spread of ImageFragment for the thumbnail field. This demonstrates fragment composition in Relay.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/tutorial/fragments-1.md#2025-04-18_snippet_6\n\nLANGUAGE: graphql\nCODE:\n```\nconst StoryFragment = graphql`\n  fragment StoryFragment on Story {\n    title\n    summary\n    postedAt\n    poster {\n      ...PosterBylineFragment\n    }\n    thumbnail {\n      // change-line\n      ...ImageFragment\n    }\n  }\n`;\n```\n\n----------------------------------------\n\nTITLE: Retaining Local Data in Relay Store\nDESCRIPTION: Shows how to manually retain local data in the Relay store to prevent garbage collection when no component is rendering it.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/guides/client-schema-extensions.md#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst localDataQuery = graphql`\n  query LocalDataQuery {\n    viewer {\n      notes {\n        __typename\n      }\n    }\n  }\n`;\n\nconst request = getRequest(localDataQuery);\nconst operation = createOperationDescriptor(request, {} /* variables */);\n\nconst disposable = environment.retain(operation);\n\n// Dispose when no longer needed\ndisposable.dispose();\n```\n\n----------------------------------------\n\nTITLE: Notifying Subscribers in Relay\nDESCRIPTION: Diagram illustrating how the notify process works in Relay, triggering callbacks for subscriptions whose data has changed. The process checks for data ID overlaps, compares results, and notifies only affected subscriptions.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/principles-and-architecture/runtime-architecture.md#2025-04-18_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n                        notify\n                           │\n                           ▼\n             ┌───────────────────────────┐\n             │           Store           │\n             │ ┌───────────────────────┐ │\n             │ │     RecordSource      │ │\n             │ │                       │ │\n             │ │┌──────┐┌──────┐┌─────┐│ │\n             │ ││Record││Record││ ... ││ │\n             │ │└──────┘└──────┘└─────┘│ │\n             │ └───────────────────────┘ │\n             │ ┌───────────────────────┐ │\n             │ │     Subscriptions     │ │\n             │ │                       │ │\n             │ │┌──────┐┌──────┐┌─────┐│ │\n             │ ││  Sub.││  Sub.││  ...││ │ <--- affected subscriptions fire\n             │ │└──────┘└──────┘└─────┘│ │\n             │ └───┼───────┼───────┼───┘ │\n             └─────┼───────┼───────┼─────┘\n                   │       │       │\n                   ▼       │       │\n               callback    │       │\n                           ▼       │\n                       callback    │\n                                   ▼\n                               callback\n```\n\n----------------------------------------\n\nTITLE: Invalidating Relay Store Globally in JavaScript\nDESCRIPTION: This snippet demonstrates how to globally mark all data in the Relay store as stale using the 'invalidateStore()' API. It can be used within updater functions, commonly in mutation, subscription, or local store updates, to ensure that all data is considered stale and requires refetching.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/guided-tour/reusing-cached-data/staleness-of-data.md#2025-04-18_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction updater(store) {\n  store.invalidateStore();\n}\n```\n\n----------------------------------------\n\nTITLE: Getting a Root Field\nDESCRIPTION: Demonstrates how to retrieve a root field using the `getRootField` method of the `RecordSourceSelectorProxy`. The method takes a `fieldName` (string) and returns a `RecordProxy`.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v13.0.0/api-reference/relay-runtime/store.md#2025-04-18_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst viewer = store.getRootField('viewer');\n```\n\n----------------------------------------\n\nTITLE: Refreshing Queries Using useQueryLoader in Relay\nDESCRIPTION: Example of refreshing a query using the useQueryLoader Hook in Relay. This approach loads the query again with the same variables and uses the network-only fetchPolicy to ensure data is fetched from the server rather than the cache.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v13.0.0/guided-tour/refetching/refreshing-queries.md#2025-04-18_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n/**\n * App.react.js\n */\nimport type {AppQuery as AppQueryType} from 'AppQuery.graphql';\n\nconst AppQuery = require('__generated__/AppQuery.graphql');\n\nfunction App(props: Props) {\n  const [queryRef, loadQuery] = useQueryLoader<AppQueryType>(\n    AppQuery,\n    props.appQueryRef /* initial query ref */\n  );\n\n  const refresh = useCallback(() => {\n    // Load the query again using the same original variables.\n    // Calling loadQuery will update the value of queryRef.\n    // The fetchPolicy ensures we always fetch from the server and skip\n    // the local data cache.\n    const {variables} = props.appQueryRef;\n    loadQuery(variables, {fetchPolicy: 'network-only'});\n  }, [/* ... */]);\n\n  return (\n    <React.Suspense fallback=\"Loading query...\">\n      <MainContent\n        refresh={refresh}\n        queryRef={queryRef}\n      />\n    </React.Suspense>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: GraphQL Query for Refetching Fragments\nDESCRIPTION: This snippet provides examples of GraphQL queries and the requirements for successfully refetching fragments in Relay. It highlights the need for stable IDs and the implementation of a Node interface in the schema.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/tutorial/refetchable-fragments.md#2025-04-18_snippet_9\n\nLANGUAGE: GraphQL\nCODE:\n```\nquery MyQuery {\n  topTrendingPosts {\n    title\n    summary\n    date\n    poster {\n     ...PosterFragment\n    }\n  }\n}\n\nquery RefetchQuery {\n  node(id: \"abcdef\") {\n    ...PosterFragment\n  }\n}\n\ntype Person implements Node {\n  id: ID!\n  ...\n}\n\ninterface Node {\n  id: ID!\n}\n```\n\n----------------------------------------\n\nTITLE: Relay GraphQL Fragment with Connection and Filters\nDESCRIPTION: This code snippet defines a GraphQL fragment for a Story component that includes a connection to comments. The connection takes arguments such as `order_by`, `filter_mode`, and `language` as filters. The `@connection` directive specifies a key for the connection.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/guided-tour/list-data/updating-connections.md#2025-04-18_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nconst {graphql} = require('RelayModern');\n\nconst storyFragment = graphql`\n  fragment StoryComponent_story on Story {\n    comments(\n      order_by: $orderBy,\n      filter_mode: $filterMode,\n      language: $language,\n    ) @connection(key: \"StoryComponent_story_comments_connection\") {\n      edges {\n        nodes {\n          body {\n            text\n          }\n        }\n      }\n    }\n  }\n`;\n```\n\n----------------------------------------\n\nTITLE: Invalidating the Relay Store\nDESCRIPTION: Example of globally invalidating the Relay Store using the invalidateStore method of RecordSourceSelectorProxy. This causes all data in the store to be considered stale.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/api-reference/relay-runtime/store.md#2025-04-18_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nstore.invalidateStore();\n```\n\n----------------------------------------\n\nTITLE: Defining GraphQL Query with Variables\nDESCRIPTION: GraphQL query definition showing how to declare and use query variables for fetching specific poster details\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/tutorial/queries-2.md#2025-04-18_snippet_2\n\nLANGUAGE: graphql\nCODE:\n```\nconst PosterDetailsHovercardContentsQuery = graphql`\n  query PosterDetailsHovercardContentsQuery($posterID: ID!) {\n    node(id: $posterID) {\n      ... on Actor {\n        ...PosterDetailsHovercardContentsBodyFragment\n      }\n    }\n  }\n`;\n```\n\n----------------------------------------\n\nTITLE: Accessing and Adding Edge in Relay Store Updater\nDESCRIPTION: This code snippet shows how to access the mutation payload, retrieve the new edge, and prepare it for adding to a connection within a Relay store updater function.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/guided-tour/list-data/updating-connections.md#2025-04-18_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst {ConnectionHandler} = require('relay-runtime');\n\nfunction updater(store: RecordSourceSelectorProxy) {\n  const storyRecord = store.get(storyID);\n  const connectionRecord = ConnectionHandler.getConnection(\n    storyRecord,\n    'StoryComponent_story_comments_connection',\n  );\n\n  // Get the payload returned from the server\n  const payload = store.getRootField('comment_create');\n\n  // Get the edge inside the payload\n  const serverEdge = payload.getLinkedRecord('comment_edge');\n\n  // Build edge for adding to the connection\n  const newEdge = ConnectionHandler.buildConnectionEdge(\n    store,\n    connectionRecord,\n    serverEdge,\n  );\n\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Client3DBar Relay Resolver\nDESCRIPTION: This TypeScript snippet defines the Client3DBar Relay Resolver, implementing the IClient3D interface and providing the data resolver function.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/guides/data-driven-dependencies/client-3d.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport type Client3DModel = {\n  __id: DataID,\n};\n\n/**\n * @RelayResolver Client3DBar implements IClient3D\n */\nfunction Client3DBar(id: DataID): ?Client3DModel {\n  if (id === INVALID_ID) {\n    return null;\n  }\n  return {\n    __id: id,\n  };\n}\n\n/**\n * @RelayResolver Client3DBar.data: Client3DData\n */\nfunction data(client3DModel: Client3DModel): Client3DData {\n  return {\n    type: 'BAR',\n    info: 'someBarInfo',\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing useFragment Hook in React Component\nDESCRIPTION: Demonstrates how to read fragment data using useFragment hook in a React component. Shows type imports, fragment definition, and component implementation that renders user data including name and profile picture.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/api-reference/hooks/use-fragment.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport type {UserComponent_user$key} from 'UserComponent_user.graphql';\n\nconst React = require('React');\n\nconst {graphql, useFragment} = require('react-relay');\n\ntype Props = {\n  user: UserComponent_user$key,\n};\n\nfunction UserComponent(props: Props) {\n  const data = useFragment(\n    graphql`\n      fragment UserComponent_user on User {\n        name\n        profile_picture(scale: 2) {\n          uri\n        }\n      }\n    `,\n    props.user,\n  );\n\n  return (\n    <>\n      <h1>{data.name}</h1>\n      <div>\n        <img src={data.profile_picture?.uri} />\n      </div>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating GraphQL Fragment and Query Structure in Relay\nDESCRIPTION: Example showing the structure of GraphQL fragments and queries in Relay. Illustrates how fragments may have identical reader ASTs despite different syntax.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/glossary/glossary.md#2025-04-18_snippet_3\n\nLANGUAGE: graphql\nCODE:\n```\nquery Foo {\n  actor { name }\n}\n```\n\nLANGUAGE: graphql\nCODE:\n```\nfragment Bar on Query {\n  actor { name }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ImageFragment with GraphQL\nDESCRIPTION: This GraphQL fragment defines the data requirements for the Image component. It includes the url field from the Image type. This fragment can be used to fetch the image URL from any part of the graph that contains an Image node.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/tutorial/fragments-1.md#2025-04-18_snippet_6\n\nLANGUAGE: graphql\nCODE:\n```\nimport { graphql } from 'relay-runtime';\n\nconst ImageFragment = graphql`\n  fragment ImageFragment on Image {\n    url\n  }\n`;\n```\n\n----------------------------------------\n\nTITLE: Using queueOperationResolver for Relay Testing\nDESCRIPTION: Demonstrates how to use queueOperationResolver to define responses for operations that will be executed on the environment. Shows both success and error handling examples with a component that uses QueryRenderer.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/guides/testing-relay-components.md#2025-04-18_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\n// Say you have a component with the QueryRenderer\nconst MyAwesomeViewRoot = require('MyAwesomeViewRoot');\nconst {\n  createMockEnvironment,\n  MockPayloadGenerator,\n} = require('relay-test-utils');\n\ntest('Data Render', async () => {\n  const environment = createMockEnvironment();\n  environment.mock.queueOperationResolver(operation =>\n    MockPayloadGenerator.generate(operation),\n  );\n\n  const renderer = render(\n    <MyAwesomeViewRoot environment={environment} />,\n  );\n\n  // At this point operation will be resolved\n  // and the data for a query will be available in the store\n  expect(await renderer.findByTestId('myButton')).toBeDefined();\n});\n\ntest('Error State', async () => {\n  const environment = createMockEnvironment();\n  environment.mock.queueOperationResolver(() =>\n    new Error('Uh-oh'),\n  );\n  const renderer = render(\n    <MyAwesomeViewRoot environment={environment} />,\n  );\n\n  expect(await renderer.findByTestId('myButton')).toBeDefined();\n});\n```\n\n----------------------------------------\n\nTITLE: Data Lookup and Subscription in Store Management\nDESCRIPTION: This diagram showcases how data is read from the store with `lookup()` and observed for changes with `subscribe()`. It outlines the role of snapshots and selectors in optimizing Relay subscriptions.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/principles-and-architecture/runtime-architecture.md#2025-04-18_snippet_6\n\nLANGUAGE: none\nCODE:\n```\n    ┌───────────────────────┐       ┌──────────────┐\n    │     RecordSource      │       │              │\n    │                       │       │              │\n    │┌──────┐┌──────┐┌─────┐│       │   Selector   │\n    ││Record││Record││ ... ││       │              │\n    │└──────┘└──────┘└─────┘│       │              │\n    └───────────────────────┘       └──────────────┘\n                │                           │\n                │                           │\n                └──────────────┬────────────┘\n                               │\n                               │  lookup\n                               │  (read)\n                               │\n                               ▼\n                        ┌─────────────┐\n                        │             │\n                        │  Snapshot   │\n                        │             │\n                        └─────────────┘\n                               │\n                               │  render, etc\n                               │\n                               ▼\n```\n\n----------------------------------------\n\nTITLE: Querying Story Data with GraphQL\nDESCRIPTION: GraphQL query to fetch a story's text, author details, and comments with their respective author information.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/principles-and-architecture/thinking-in-graphql.md#2025-04-18_snippet_9\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  story(id: \"1\") {\n    text,\n    author { name, photo },\n    comments {\n      text,\n      author { name, photo }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing GraphQL Subscription Query\nDESCRIPTION: Example of a GraphQL subscription query for monitoring feedback likes. The subscription listens for changes to feedback like counts and returns the updated feedback data.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/glossary/glossary.md#2025-04-18_snippet_8\n\nLANGUAGE: graphql\nCODE:\n```\nsubscription FeedbackLikeSubscription($input: FeedbackLikeSubscribeData!) {\n  feedback_like_subscribe(data: $input) {\n    feedback {\n      id\n      like_count\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Linked Records Set in Relay Store\nDESCRIPTION: The `getLinkedRecords` method retrieves a set of associated records by field name, with capabilities to handle variables for argument-dependent fields.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/api-reference/relay-runtime/store.md#2025-04-18_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nconst rootField = store.getRootField('rootField');\nconst nodes = rootField.getLinkedRecords('nodes');\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst nodes = rootField.getLinkedRecords('nodes', {count: 10});\n```\n\n----------------------------------------\n\nTITLE: Using fetchPolicy with useQueryLoader in Relay\nDESCRIPTION: This snippet demonstrates how to use the fetchPolicy option when loading a query with useQueryLoader in Relay. The example shows setting a store-or-network policy when selecting a tab in a React component.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/guided-tour/reusing-cached-data/fetch-policies.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst React = require('React');\nconst {graphql} = require('react-relay');\n\nfunction AppTabs() {\n  const [\n    queryRef,\n    loadQuery,\n  ] = useQueryLoader(HomeTabQuery);\n\n  const onSelectHomeTab = () => {\n    loadQuery({id: '4'}, {fetchPolicy: 'store-or-network'});\n  }\n\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Modifying a GraphQL Query to Use Connection Field for Pagination\nDESCRIPTION: This snippet shows how to modify a query to use a Connection field (newsfeedStories) instead of a simple array (topStories). This is the first step in implementing infinite scrolling for a newsfeed.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/tutorial/connections-pagination.md#2025-04-18_snippet_9\n\nLANGUAGE: graphql\nCODE:\n```\nconst NewsfeedQuery = graphql`\n  query NewsfeedQuery {\n    topStories {\n      id\n      ...StoryFragment\n    }\n  }\n`;\n```\n\nLANGUAGE: graphql\nCODE:\n```\nconst NewsfeedQuery = graphql`\n  query NewsfeedQuery {\n    viewer {\n      newsfeedStories(first: 3) {\n        edges {\n          node {\n            id\n            ...StoryFragment\n          }\n        }\n      }\n    }\n  }\n`;\n```\n\n----------------------------------------\n\nTITLE: Declaring a GraphQL Fragment for Connection\nDESCRIPTION: This code snippet demonstrates how to declare a fragment that queries a GraphQL connection for a user's friends, including pagination using the `@connection` directive and a unique connection key.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v13.0.0/guided-tour/list-data/rendering-connections.md#2025-04-18_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst {graphql} = require('RelayModern');\n\nconst userFragment = graphql`\n  fragment UserFragment on User {\n    name\n    friends(after: $cursor, first: $count)\n      @connection(key: \"UserFragment_friends\") {\n      edges {\n        node {\n          ...FriendComponent\n        }\n      }\n    }\n  }\n`;\n```\n\n----------------------------------------\n\nTITLE: Using Fragment Arguments\nDESCRIPTION: Shows how to include fragments with different argument values using the @arguments directive.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/guided-tour/rendering/variables.md#2025-04-18_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nfunction TaskList(props) {\n  const data = usePreloadedQuery(\n    graphql`\n      query TaskListQuery {\n        todays_tasks {\n          ...TaskView_task @arguments(showDetailedResults: true)\n        }\n        tomorrows_tasks {\n          ...TaskView_task @arguments(showDetailedResults: false)\n        }\n      }\n    `,\n    props.queryRef,\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: @required with @catch in GraphQL Queries\nDESCRIPTION: In this GraphQL query, the @required(action: THROW) directive is used with a parent @catch, allowing required field errors to be caught and returned in the response data rather than throwing an exception.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/guides/catch-directive.md#2025-04-18_snippet_4\n\nLANGUAGE: graphql\nCODE:\n```\nquery MyQuery {\n  viewer @catch {\n    name @required(action: THROW)\n    age\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing JavaScript Value Return in Relay Resolver\nDESCRIPTION: Example of a Relay Resolver that returns an arbitrary JavaScript value using the RelayResolverValue type. The resolver returns a Date object from Post metadata.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/guides/relay-resolvers/return-types.md#2025-04-18_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\n/**\n * @RelayResolver Post.publishDate: RelayResolverValue\n */\nexport function metadata(post: PostModel): Date {\n  return post.publishDate;\n}\n```\n\n----------------------------------------\n\nTITLE: Setting a value on a record\nDESCRIPTION: This snippet demonstrates how to set a value on a specific field of the current record using the setValue method, allowing for mutation of the record's state.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/api-reference/relay-runtime/store.md#2025-04-18_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nviewer.setValue('New Name', 'name');\n```\n\n----------------------------------------\n\nTITLE: React Component with Fragment Variables\nDESCRIPTION: Shows how to use fragment variables within a React component using Relay's useFragment hook.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/guided-tour/rendering/variables.md#2025-04-18_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nfunction UserComponent(props: Props) {\n  const data = useFragment(\n    graphql`\n    fragment UserComponent_user on User {\n      name\n      profile_picture(scale: $scale) {\n        uri\n      }\n    }\n    `,\n    props.user,\n  );\n\n  return (...);\n}\n```\n\n----------------------------------------\n\nTITLE: Defining CacheConfig Interface in TypeScript\nDESCRIPTION: Type definition for CacheConfig object that controls query caching, polling, and live updates in Relay. Contains optional fields for force refresh, polling interval, live query configuration, metadata, and transaction tracking.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/api-reference/types/CacheConfig.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface CacheConfig {\n  force?: boolean;\n  poll?: number;\n  liveConfigId?: string;\n  metadata?: object;\n  transactionId?: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Data with GraphQL\nDESCRIPTION: Shows how GraphQL allows fetching the same data as the REST example but in a single network request, demonstrating improved efficiency.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v13.0.0/principles-and-architecture/thinking-in-graphql.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ngraphql.get(`query { stories { id, text } }`).then(\n  stories => {\n    // A list of story items:\n    // `[ { id: \"...\", text: \"...\" } ]`\n    console.log(stories);\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Adding Hovercard to PosterByline Component\nDESCRIPTION: Updates to the PosterByline component to incorporate a hovercard that appears when hovering over a poster's name, including imports, ref creation, and component integration.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/tutorial/queries-2.md#2025-04-18_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// change-line\nimport Hovercard from './Hovercard';\n// change-line\nimport PosterDetailsHovercardContents from './PosterDetailsHovercardContents';\n// change-line\nconst {useRef} = React;\n\n...\n\nexport default function PosterByline({ poster }: Props): React.ReactElement {\n  const data = useFragment(PosterBylineFragment, poster);\n  // change-line\n  const hoverRef = useRef(null);\n  return (\n    <div\n      // change-line\n      ref={hoverRef}\n      className=\"byline\">\n      <Image image={data.profilePicture} width={60} height={60} className=\"byline__image\" />\n      <div className=\"byline__name\">{data.name}</div>\n      // change\n      <Hovercard targetRef={hoverRef}>\n        <PosterDetailsHovercardContents />\n      </Hovercard>\n      // end-change\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Define Comment Posting Mutation in Relay\nDESCRIPTION: This snippet defines a Relay mutation (`StoryCommentsComposerPostMutation`) for posting a new comment to a story. It includes the story ID and the comment text as input variables. The mutation response selects the newly-created edge to the newly-created comment, which will be used to update the local store by inserting this edge into the Connection.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/tutorial/mutations-updates.md#2025-04-18_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nconst StoryCommentsComposerPostMutation = graphql`\n  mutation StoryCommentsComposerPostMutation(\n    $id: ID!,\n    $text: String!,\n  ) {\n    postStoryComment(id: $id, text: $text) {\n      commentEdge {\n        node {\n          id\n          text\n        }\n      }\n    }\n  }\n`;\n```\n\n----------------------------------------\n\nTITLE: Displaying Hard-coded Data in React Component\nDESCRIPTION: Initial React component rendering placeholder data without using GraphQL or Relay.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/tutorial/queries-1.md#2025-04-18_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nexport default function Newsfeed() {\n  const story = {\n    title: \"Placeholder Story\",\n    summary:\n      \"Placeholder data, to be replaced with data fetched via GraphQL\",\n    poster: {\n      name: \"Placeholder Person\",\n      profilePicture: {\n        url: \"/assets/cat_avatar.png\",\n      },\n    },\n    thumbnail: {\n      url: \"/assets/placeholder.jpeg\",\n    },\n  };\n  return (\n    <div className=\"newsfeed\">\n      <Story story={story} />\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Preparing Variables in Relay Mutation\nDESCRIPTION: Shows how to use the static prepareVariables method to modify fragment builder variables based on previous variables, meta route, and runtime environment.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-classic/Classic-APIReference-Mutation.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nclass BuySongMutation extends Relay.Mutation {\n  static initialVariables = {format: 'mp3'};\n  static prepareVariables = (prevVariables) => {\n    var overrideVariables = {};\n    var formatPreference = localStorage.getItem('formatPreference');\n    if (formatPreference) {\n      overrideVariables.format = formatPreference;  // Lossless, hopefully\n    }\n    return {...prevVariables, overrideVariables};\n  };\n  /* ... */\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Relay Compiler in package.json\nDESCRIPTION: This snippet shows how to configure the Relay compiler in the `package.json` file. It adds `relay` commands to the `start` and `build` scripts, ensuring that the Relay compiler runs before the app is built or started. It also defines the `relay` configuration, specifying the source directory, schema file, and language.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/getting-started/step-by-step-guide.md#2025-04-18_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n\"// your-app-name/package.json\n{\n  ...\n  \\\"scripts\\\": {\n    ...\n    \\\"start\\\": \\\"yarn run relay && react-scripts start\\\",\n    \\\"build\\\": \\\"yarn run relay && react-scripts build\\\",\n    \\\"relay\\\": \\\"yarn run relay-compiler\\\"\\n    ...\n  },\n  \\\"relay\\\": {\n    \\\"src\\\": \\\"./src/\\\",\n    \\\"schema\\\": \\\"./schema.graphql\\\",\n    \\\"language\\\": \\\"javascript\\\"\n  }\n  ...\n}\"\n```\n\n----------------------------------------\n\nTITLE: Defining a Semantic Non-Null Relay Resolver Field in TypeScript\nDESCRIPTION: This snippet shows how to define a Relay resolver field as semantically non-null using the @semanticNonNull directive. The resolver returns a default value if the field is null, demonstrating error handling for non-nullable fields.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/guides/relay-resolvers/errors.md#2025-04-18_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * @RelayResolver RelayExample.semantic_non_null_field: String @semanticNonNull\n */\nexport function semantic_non_null_field(\n  model: RelayExampleModel,\n): string {\n  return model.someField ?? 'field was null, this is the default';\n}\n```\n\n----------------------------------------\n\nTITLE: Creating or Retrieving Linked Record in Relay Store\nDESCRIPTION: Illustrates how to get or create a linked record in the Relay store using the getOrCreateLinkedRecord method of RecordProxy.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/api-reference/relay-runtime/store.md#2025-04-18_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nconst rootField = store.getRootField('rootField');\nconst newViewer = rootField.getOrCreateLinkedRecord('viewer', 'User'); // Will create if it doesn't exist\n```\n\n----------------------------------------\n\nTITLE: Defining a GraphQL Subscription in Relay Modern\nDESCRIPTION: This snippet demonstrates how to define a GraphQL subscription in Relay Modern. It shows the structure of a subscription query, including the use of variables and selection of fields to be updated when the subscribed data changes.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v13.0.0/glossary/glossary.md#2025-04-18_snippet_11\n\nLANGUAGE: graphql\nCODE:\n```\nsubscription FeedbackLikeSubscription($input: FeedbackLikeSubscribeData!) {\n  feedback_like_subscribe(data: $input) {\n    feedback {\n      id\n      like_count\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining GraphQL Query with Relay\nDESCRIPTION: GraphQL query definition using the graphql tag from relay-runtime. This query fetches data for a top story including title, summary, poster details, and thumbnail.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/tutorial/queries-1.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { graphql } from 'relay-runtime';\n\nconst NewsfeedQuery = graphql`\n  query NewsfeedQuery {\n    topStory {\n      title\n      summary\n      poster {\n        name\n        profilePicture {\n          url\n        }\n      }\n      thumbnail {\n        url\n      }\n    }\n  }\n`;\n```\n\n----------------------------------------\n\nTITLE: Integrating useMutation and commitMutation\nDESCRIPTION: The StoryLikeButton component is updated to use the `useMutation` hook. It retrieves the `commitMutation` function and calls it within the `onLikeButtonClicked` function.  The `commitMutation` function is called with variables containing the story id and the toggled `doesViewerLike` value.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/tutorial/mutations-updates.md#2025-04-18_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// change-line\nimport {useMutation, useFragment} from 'react-relay';\n\nfunction StoryLikeButton({story}) {\n  const data = useFragment(StoryLikeButtonFragment, story);\n  // change-line\n  const [commitMutation, isMutationInFlight] = useMutation(StoryLikeButtonLikeMutation);\n  function onLikeButtonClicked() {\n    // change\n    commitMutation({\n      variables: {\n        id: data.id,\n        doesLike: !data.doesViewerLike,\n      },\n    })\n    // end-change\n  }\n  return (\n    <>\n      <LikeCount count={data.likeCount} />\n      <LikeButton value={data.doesViewerLike} onChange={onLikeButtonClicked} />\n    </>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: React Component with Placeholder Data in JSX\nDESCRIPTION: This code snippet demonstrates a React component (`Newsfeed`) that displays hard-coded placeholder data.  The `story` object contains properties like `title`, `summary`, `poster`, and `thumbnail`, each with their respective placeholder values. This serves as a starting point before integrating with GraphQL and Relay.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/tutorial/queries-1.md#2025-04-18_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nexport default function Newsfeed() {\n  const story = {\n    title: \"Placeholder Story\",\n    summary:\n      \"Placeholder data, to be replaced with data fetched via GraphQL\",\n    poster: {\n      name: \"Placeholder Person\",\n      profilePicture: {\n        url: \"/assets/cat_avatar.png\",\n      },\n    },\n    thumbnail: {\n      url: \"/assets/placeholder.jpeg\",\n    },\n  };\n  return (\n    <div className=\"newsfeed\">\n      <Story story={story} />\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Example GraphQL Query for Story and Author\nDESCRIPTION: A GraphQL query that demonstrates fetching nested data - a story with its text and author's name.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v13.0.0/principles-and-architecture/thinking-in-graphql.md#2025-04-18_snippet_4\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  story(id: \"1\") {\n    text,\n    author {\n      name\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting a Field Value with Arguments\nDESCRIPTION: Demonstrates how to mutate the current record by setting a new value on the specified field using the `setValue` method of the `RecordProxy`.  The method takes the `value` (mixed) and `name` (string) of the field, and an optional object of `arguments`. Returns the mutated record.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v13.0.0/api-reference/relay-runtime/store.md#2025-04-18_snippet_30\n\nLANGUAGE: javascript\nCODE:\n```\nviewer.setValue('New Name', 'name', {arg: 'value'});\n```\n\n----------------------------------------\n\nTITLE: Relay Get Connection with Specific Filter Values\nDESCRIPTION: This code snippet demonstrates how to retrieve a connection record from the Relay store using `ConnectionHandler.getConnection`. It shows how to pass concrete filter values as a third argument to identify the connection based on the `order_by`, `filter_mode`, and `language` filters. Two different connection records are fetched with different filter value combinations.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/guided-tour/list-data/updating-connections.md#2025-04-18_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nconst {ConnectionHandler} = require('RelayModern');\n\nfunction updater(store: RecordSourceSelectorProxy) {\n  const storyRecord = store.get(storyID);\n\n  // Get the connection instance for the connection with comments sorted\n  // by the date they were added\n  const connectionRecordSortedByDate = ConnectionHandler.getConnection(\n    storyRecord,\n    'StoryComponent_story_comments_connection',\n    {order_by: '*DATE_ADDED*', filter_mode: null, language: null}\n  );\n\n  // Get the connection instance for the connection that only contains\n  // comments made by friends\n  const connectionRecordFriendsOnly = ConnectionHandler.getConnection(\n    storyRecord,\n    'StoryComponent_story_comments_connection',\n    {order_by: null, filter_mode: '*FRIENDS_ONLY*', language: null}\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using @arguments Directive in GraphQL Fragment Spread\nDESCRIPTION: Demonstrates how to use the @arguments directive to pass arguments to a fragment spread in a GraphQL query.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/glossary/glossary.md#2025-04-18_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\n...Story_story @arguments(storyId: \"1234\")\n```\n\n----------------------------------------\n\nTITLE: Updating Local Notes - JavaScript\nDESCRIPTION: This snippet updates an existing note's body and title within the Relay Store. It leverages the 'commitLocalUpdate' method to ensure smooth state management in a Relay application.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/guides/client-schema-extensions.md#2025-04-18_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport {commitLocalUpdate} from 'react-relay';\n\nfunction updateUserNote(environment, dataID, body, title) {\n  commitLocalUpdate(environment, store => {\n    const note = store.get(dataID);\n\n    note.setValue(body, 'body');\n    note.setValue(title, 'title')\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Query Component Using a Fragment in Relay\nDESCRIPTION: A component that fetches data with usePreloadedQuery and includes a fragment from the UsernameComponent. This shows how Relay handles rendering when the name field is cached but username is not.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/guided-tour/reusing-cached-data/rendering-partially-cached-data.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * HomeTab.react.js\n *\n * Query Component\n */\n\nconst React = require('React');\nconst {graphql, usePreloadedQuery} = require('react-relay');\n\nconst UsernameComponent = require('./UsernameComponent.react');\n\nfunction HomeTab(props: Props) {\n  const data = usePreloadedQuery(\n    graphql`\n      query HomeTabQuery($id: ID!) {\n        user(id: $id) {\n          name\n          ...UsernameComponent_user\n        }\n      }\n    `,\n    props.queryRef,\n  );\n\n  return (\n    <>\n      <h1>{data.user?.name}</h1>\n      <UsernameComponent user={data.user} />\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a GraphQL Connection with Filters in Relay\nDESCRIPTION: This snippet shows how to declare a GraphQL fragment with a connection that takes filter arguments. These filter values (order_by, filter_mode, language) will be part of the connection identifier in the Relay store.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/guided-tour/list-data/updating-connections.md#2025-04-18_snippet_12\n\nLANGUAGE: js\nCODE:\n```\nconst {graphql} = require('RelayModern');\n\nconst storyFragment = graphql`\n  fragment StoryComponent_story on Story {\n    comments(\n      order_by: $orderBy,\n      filter_mode: $filterMode,\n      language: $language,\n    ) @connection(key: \"StoryComponent_story_comments_connection\") {\n      edges {\n        nodes {\n          body {\n            text\n          }\n        }\n      }\n    }\n  }\n`;\n```\n\n----------------------------------------\n\nTITLE: Defining Image Fragment in Relay\nDESCRIPTION: Shows how to create a reusable GraphQL fragment for the Image component.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/tutorial/fragments-1.md#2025-04-18_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { graphql } from 'relay-runtime';\n\nconst ImageFragment = graphql`\n  fragment ImageFragment on Image {\n    url\n  }\n`;\n```\n\n----------------------------------------\n\nTITLE: Implementing Response Cache for REST\nDESCRIPTION: Demonstrates a simple caching mechanism for REST API calls using URIs as cache keys to avoid redundant network requests.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v13.0.0/principles-and-architecture/thinking-in-graphql.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nvar _cache = new Map();\nrest.get = uri => {\n  if (!_cache.has(uri)) {\n    _cache.set(uri, fetch(uri));\n  }\n  return _cache.get(uri);\n};\n```\n\n----------------------------------------\n\nTITLE: Defining and Using GraphQL Fragments with Variables - GraphQL\nDESCRIPTION: This snippet illustrates the use of GraphQL fragments that can reference variables declared in a query. It emphasizes the requirement for a query to declare variables used in fragments.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/guided-tour/rendering/variables.md#2025-04-18_snippet_3\n\nLANGUAGE: graphql\nCODE:\n```\nfragment UserFragment on User {\n  name\n  profile_picture(scale: $scale) {\n    uri\n  }\n}\n\n\nquery ViewerQuery($scale: Float!) {\n  viewer {\n    actor {\n      ...UserFragment\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Initial StoryLikeButton Component Implementation\nDESCRIPTION: The basic implementation of the StoryLikeButton component before adding mutation functionality. It shows the like count and renders a like button that calls an empty click handler.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/tutorial/mutations-updates.md#2025-04-18_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nfunction StoryLikeButton({story}) {\n  const data = useFragment(StoryLikeButtonFragment, story);\n  function onLikeButtonClicked() {\n    // To be filled in\n  }\n  return (\n    <>\n      <LikeCount count={data.likeCount} />\n      <LikeButton value={data.doesViewerLike} onChange={onLikeButtonClicked} />\n    </>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Using @required with @connection Directive in GraphQL\nDESCRIPTION: Demonstrates the limitations of using @required directive with @connection directive in a GraphQL fragment for a friends list connection.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/guides/required-directive.md#2025-04-18_snippet_5\n\nLANGUAGE: graphql\nCODE:\n```\nfragment FriendsList on User @refetchable(queryName: \"FriendsListQuery\") {\n  friends(after: $cursor, first: $count) @connection(key: \"FriendsList_friends\") {\n    edges {\n      node @required(action: LOG) {\n        job @required(action: LOG) {\n          title @required(action: LOG)\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Extending Fragment with Type Refinement for Organization\nDESCRIPTION: This snippet extends the 'PosterDetailsHovercardContentsBodyFragment' to include organization-specific fields using type refinement. It demonstrates how to add fields from specific types implementing the 'Actor' interface.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/tutorial/interfaces-polymorphism.md#2025-04-18_snippet_5\n\nLANGUAGE: graphql\nCODE:\n```\nfragment PosterDetailsHovercardContentsBodyFragment on Actor {\n  name\n  joined\n  profilePicture {\n    ...ImageFragment\n  }\n  ... on Organization {\n    organizationKind\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Network Layer Implementation for Persisted Queries\nDESCRIPTION: Example of how to modify the network layer fetch implementation to use persisted query IDs instead of full query text.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/guides/persisted-queries.md#2025-04-18_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nfunction fetchQuery(operation, variables) {\n  return fetch('/graphql', {\n    method: 'POST',\n    headers: {\n      'content-type': 'application/json'\n    },\n    body: JSON.stringify({\n      doc_id: operation.id, // NOTE: pass md5 hash to the server\n      // query: operation.text, // this is now obsolete because text is null\n      variables,\n    }),\n  }).then(response => {\n    return response.json();\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Error: Missing Handler for deleteRecord in RelayFBHandlerProvider\nDESCRIPTION: This error occurs when the Relay environment's handlerProvider doesn't recognize the 'deleteRecord' handle. It indicates that the appropriate mutation handler needs to be returned.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/debugging/declarative-mutation-directives.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nRelayFBHandlerProvider: No handler defined for `deleteRecord`. [Caught in: An uncaught error was thrown inside `RelayObservable`.]\n```\n\n----------------------------------------\n\nTITLE: Defining a GraphQL Interface for Actor\nDESCRIPTION: Definition of an Actor interface in GraphQL that specifies the common fields that all implementing types must include.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/tutorial/interfaces-polymorphism.md#2025-04-18_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\ninterface Actor {\n  name: String\n  profilePicture: Image\n  joined: DateTime\n}\n```\n\n----------------------------------------\n\nTITLE: Consuming Relay Resolver Field\nDESCRIPTION: Example showing how to use a Relay Resolver field in a React component.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/guides/relay-resolvers.md#2025-04-18_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nfunction MyGreeting({userKey}) {\n  const user = useFragment(`\n    fragment MyGreeting on User {\n      greeting\n    }`, userKey);\n  return <h1>{user.greeting}</h1>;\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Person Data with GraphQL\nDESCRIPTION: Demonstrates a simple GraphQL query to retrieve specific fields (name and occupation) for a person with a given ID. This showcases GraphQL's ability to request only the needed data.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/tutorial/graphql.md#2025-04-18_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  person(id: \"24601\") {\n    name\n    occupation\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Avoiding Suspense during Query Refresh\nDESCRIPTION: Illustrates a technique to refresh queries without triggering Suspense by manually managing loading state and using fetchQuery\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/guided-tour/refetching/refreshing-queries.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nfunction App(props: Props) {\n  const environment = useRelayEnvironment();\n  const [queryRef, loadQuery] = useQueryLoader(\n    AppQuery,\n    props.appQueryRef\n  );\n  const [isRefreshing, setIsRefreshing] = useState(false)\n\n  const refresh = useCallback(() => {\n    if (isRefreshing) { return; }\n    const {variables} = props.appQueryRef;\n    setIsRefreshing(true);\n\n    fetchQuery(environment, AppQuery, variables)\n      .subscribe({\n        complete: () => {\n          setIsRefreshing(false);\n          loadQuery(variables, {fetchPolicy: 'store-only'});\n        },\n        error: () => {\n          setIsRefreshing(false);\n        }\n      });\n  }, [/* ... */]);\n\n  return (\n    <React.Suspense fallback=\"Loading query...\">\n      <MainContent\n        isRefreshing={isRefreshing}\n        refresh={refresh}\n        queryRef={queryRef}\n      />\n    </React.Suspense>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Example JSON Response from GraphQL Query\nDESCRIPTION: This code snippet shows an example JSON response that `useLazyLoadQuery` hook returns.  The structure of the JSON corresponds to the fields selected in the GraphQL query. It illustrates the shape of the data that the `Newsfeed` component will receive after the query is executed successfully.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/tutorial/queries-1.md#2025-04-18_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  topStory: {\n    title: \"Local Yak Named Yak of the Year\",\n    summary: \"The annual Yak of the Year awards ceremony ...\",\n    poster: {\n      name: \"Baller Bovine Board\",\n      profilePicture: {\n        url: '/images/baller_bovine_board.jpg',\n      },\n    },\n    thumbnail: {\n      url: '/images/max_the_yak.jpg',\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: GraphQL Schema Definition Example\nDESCRIPTION: Shows a partial schema definition for a newsfeed app, including type definitions for Story, Actor interface, Person implementation, and Category enum.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/tutorial/graphql.md#2025-04-18_snippet_4\n\nLANGUAGE: graphql\nCODE:\n```\n// A newsfeed story. It has fields, some of which are scalars (e.g. strings\n// and numbers) and some that are edges that point to other nodes in the graph,\n// such as the 'thumbnail' and 'poster' fields:\ntype Story {\n  id: ID!\n  category: Category\n  title: String\n  summary: String\n  thumbnail: Image\n  poster: Actor\n}\n\n// An Actor is an entity that can do something on the site. This is an\n// interface that multiple different types can implement, in this case\n// Person and Organization:\ninterface Actor {\n  id: ID!\n  name: String\n  profilePicture: Image\n}\n\n// This is a specific type that implements that interface:\ntype Person implements Actor {\n  id: ID!\n  name: String\n  email: String\n  profilePicture: Image\n  location: Location\n}\n\n// The schema also lets you define enums, such as the category\n// of a newsfeed story:\nenum Category {\n  EDUCATION\n  NEWS\n  COOKING\n}\n```\n\n----------------------------------------\n\nTITLE: Relay Cache Structure Example\nDESCRIPTION: Demonstrates how Relay implements a normalized cache structure using Maps to store record data.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/principles-and-architecture/thinking-in-graphql.md#2025-04-18_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nMap {\n  1: Map {\n    text: 'Relay is open-source!',\n    author: Link(2),\n  },\n  2: Map {\n    name: 'Jan',\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Defining a Fragment with @required\nDESCRIPTION: This snippet defines a fragment `MyViewer` on the `Viewer` type, requiring the `name` field to be present, thus ensuring runtime safety.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/guides/alias-directive.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction MyViewer({viewerKey}) {\n  const {name} = useFragment(graphql`\n    fragment MyViewer on Viewer {\n      name @required(action: THROW)\n    }`, viewerKey);\n\n  return `My name is ${name}. That's ${name.length} letters long!`;\n}\n```\n\n----------------------------------------\n\nTITLE: React Component with GraphQL Fragment\nDESCRIPTION: Illustrates using a GraphQL fragment within a React component using Relay's useFragment hook. The fragment references a query variable $scale.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/guided-tour/rendering/variables.md#2025-04-18_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nfunction UserComponent(props: Props) {\n  const data = useFragment(\n    graphql`\n    fragment UserComponent_user on User {\n      name\n      profile_picture(scale: $scale) {\n        uri\n      }\n    }\n    `,\n    props.user,\n  );\n\n  return (...);\n}\n```\n\n----------------------------------------\n\nTITLE: GraphQL Fragment with Inconsistent @required Declarations\nDESCRIPTION: This GraphQL fragment illustrates a scenario where the `@required` directive is used inconsistently in inline fragments. The Relay compiler will throw an error if the `@required` directive isn't consistently used across all fields selected in the inline fragment. This can be resolved by either including the directive in each fragment or removing it entirely.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/guides/required-directive.md#2025-04-18_snippet_2\n\nLANGUAGE: graphql\nCODE:\n```\nfragment UserInfo on User {\n  job {\n    ... on Actor {\n      certifications\n    }\n    ... on Lawyer {\n      certifications @required(action: LOG)\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Query Variables in GraphQL Query\nDESCRIPTION: GraphQL query definition with a query variable for fetching specific poster details.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/tutorial/queries-2.md#2025-04-18_snippet_2\n\nLANGUAGE: graphql\nCODE:\n```\nconst PosterDetailsHovercardContentsQuery = graphql`\n  query PosterDetailsHovercardContentsQuery(\n    $posterID: ID!\n  ) {\n    node(id: $posterID) {\n      ... on Actor {\n        ...PosterDetailsHovercardContentsBodyFragment\n      }\n    }\n  }\n`;\n```\n\n----------------------------------------\n\nTITLE: Querying First Two Rebel Ships with Cursors\nDESCRIPTION: This query fetches the first two ships of the Rebels, including cursors for pagination. It demonstrates how to retrieve multiple items in a connection.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/guides/graphql-server-specification.md#2025-04-18_snippet_6\n\nLANGUAGE: graphql\nCODE:\n```\nquery MoreRebelShipsQuery {\n  rebels {\n    name\n    ships(first: 2) {\n      edges {\n        cursor\n        node {\n          name\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Relay Update Connection Based on Filters\nDESCRIPTION: This code snippet demonstrates how to update connections based on filter values when adding a new comment. It retrieves two connection records with different filter combinations and conditionally adds the new comment to the `FRIENDS_ONLY` connection based on whether the comment was made by a friend.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/guided-tour/list-data/updating-connections.md#2025-04-18_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nconst {ConnectionHandler} = require('relay-runtime');\n\nfunction updater(store: RecordSourceSelectorProxy) {\n  const storyRecord = store.get(storyID);\n\n  // Get the connection instance for the connection with comments sorted\n  // by the date they were added\n  const connectionRecordSortedByDate = ConnectionHandler.getConnection(\n    storyRecord,\n    'StoryComponent_story_comments_connection',\n    {order_by: '*DATE_ADDED*', filter_mode: null, language: null}\n  );\n\n  // Get the connection instance for the connection that only contains\n  // comments made by friends\n  const connectionRecordFriendsOnly = ConnectionHandler.getConnection(\n    storyRecord,\n    'StoryComponent_story_comments_connection',\n    {order_by: null, filter_mode: '*FRIENDS_ONLY*', language: null}\n  );\n\n  const newComment = (...);\n  const newEdge = (...);\n\n  ConnectionHandler.insertEdgeAfter(\n    connectionRecordSortedByDate,\n    newEdge,\n  );\n\n  if (isMadeByFriend(storyRecord, newComment) {\n    // Only add new comment to friends-only connection if the comment\n    // was made by a friend\n    ConnectionHandler.insertEdgeAfter(\n      connectionRecordFriendsOnly,\n      newEdge,\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Visualizing Relay Compiler Data Flow\nDESCRIPTION: ASCII diagram illustrating the high-level flow of data through the Relay compiler, from parsing GraphQL and schema inputs to generating optimized GraphQL and artifacts.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/principles-and-architecture/compiler-architecture.md#2025-04-18_snippet_0\n\nLANGUAGE: ascii\nCODE:\n```\n                   ┌─────────────┐┌─────────────┐\n                   │   GraphQL   ││   Schema    │\n                   └─────────────┘└─────────────┘\n                          │              │              parse\n                          └───────┬──────┘\n                                  ▼\n                   ┌────────────────────────────┐\n                   │      CompilerContext       │\n                   │                            │\n                   │   ┌─────┐ ┌─────┐ ┌─────┐  │──┐\n                   │   │ IR  │ │ IR  │ │ ... │  │  │\n                   │   └─────┘ └─────┘ └─────┘  │  │\n                   └────────────────────────────┘  │  transform/\n                          │    │      ▲            │   optimize\n                          │    │      └────────────┘\n                          │    │\n                          │    └──────────┐\n                          │  print        │  codegen\n                          ▼               ▼\n                   ┌─────────────┐ ┌─────────────┐\n                   │   GraphQL   │ │  Artifacts  │\n                   └─────────────┘ └─────────────┘\n```\n\n----------------------------------------\n\nTITLE: Using @arguments Directive in GraphQL Query\nDESCRIPTION: Example showing how to pass arguments to a fragment using the @arguments directive in a GraphQL query.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v13.0.0/api-reference/graphql/graphql-directives.md#2025-04-18_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nquery TodoListQuery($userID: ID) {\n  ...TodoList_list @arguments(count: $count, userID: $userID) # Pass arguments here\n}\n```\n\n----------------------------------------\n\nTITLE: Using express-graphql with persisted queries\nDESCRIPTION: This snippet demonstrates how to configure an Express server to handle persisted queries using the persistedQueries middleware from the express-graphql-persisted-queries library.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/guides/persisted-queries.md#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport express from 'express';\nimport {graphqlHTTP} from 'express-graphql';\nimport {persistedQueries} from 'express-graphql-persisted-queries';\nimport queryMap from './path/to/queryMap.json';\n\nconst app = express();\n\napp.use(\n  '/graphql',\n  persistedQueries({\n    queryMap,\n    queryIdKey: 'doc_id',\n  }),\n  graphqlHTTP({schema}),\n);\n```\n\n----------------------------------------\n\nTITLE: Example JSON Response from a GraphQL Query\nDESCRIPTION: This sample JSON response shows the data structure returned by the GraphQL server. It matches the shape of the query, containing user information with ID, name, username and viewer data.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v13.0.0/guided-tour/rendering/queries.md#2025-04-18_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"user\": {\n      \"id\": \"4\",\n      \"name\": \"Mark Zuckerberg\",\n      \"username\": \"zuck\"\n    },\n    \"viewer\": {\n      \"actor\": {\n        \"name\": \"Your Name\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: GraphQL Schema Definition\nDESCRIPTION: This snippet defines a GraphQL schema, including types and their fields. This schema is used by the Relay Compiler to validate queries and generate optimized code. The example showcases a simple schema with a `Root` query type, a `Word` type, and a `WordDefinition` type.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/guides/compiler.md#2025-04-18_snippet_2\n\nLANGUAGE: graphql\nCODE:\n```\nschema {\n  query: Root\n}\n\ntype Root {\n  dictionary: [Word]\n}\n\ntype Word {\n  id: String!\n  definition: WordDefinition\n}\n\ntype WordDefinition {\n  text: String\n  image: String\n}\n```\n\n----------------------------------------\n\nTITLE: Mapping Over a List in React Component - Step 2\nDESCRIPTION: Updating the React component to handle multiple stories by mapping over the array of fragment refs returned in 'data.topStories'.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/tutorial/arrays-lists.md#2025-04-18_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nexport default function Newsfeed({}) {\n  const data = useLazyLoadQuery<NewsfeedQueryType>(NewsfeedQuery, {});\n  // change-line\n  const stories = data.topStories;\n  return (\n    <div className=\"newsfeed\">\n      // change-line\n      {stories.map(story => <Story story={story} />)}\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Defining an Assignable Fragment for User in GraphQL\nDESCRIPTION: Creates an assignable fragment on the User type with the @assignable directive, containing only the __typename field.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/guided-tour/updating-data/imperatively-modifying-linked-fields.md#2025-04-18_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\nfragment AssignBestFriendButton_assignable_user on User @assignable {\n  __typename\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Linked Records\nDESCRIPTION: Demonstrates how to mutate the current record by setting a new set of linked records on the given field name using the `setLinkedRecords` method of the `RecordProxy`. The method takes the `records` (Array<RecordProxy>) and the field `name` (string), and optionally an object of `variables`.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v13.0.0/api-reference/relay-runtime/store.md#2025-04-18_snippet_35\n\nLANGUAGE: javascript\nCODE:\n```\nconst rootField = store.getRootField('rootField');\nconst newNode = store.create(/* ... */);\nconst newNodes = [...rootField.getLinkedRecords('nodes'), newNode];\nrootField.setLinkedRecords(newNodes, 'nodes');\n```\n\n----------------------------------------\n\nTITLE: GraphQL Interface Fragment Example with Type Casting\nDESCRIPTION: Demonstrates how to use type casting with GraphQL interfaces using the spread operator. This example shows querying the Actor interface and User concrete type.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v13.0.0/glossary/glossary.md#2025-04-18_snippet_7\n\nLANGUAGE: graphql\nCODE:\n```\nquery MyQuery { viewer { account_user { ...on Actor { can_viewer_message } } } }\n```\n\n----------------------------------------\n\nTITLE: Using Both useLazyLoadQuery and useFragment Hooks in Relay\nDESCRIPTION: This snippet shows how to use both useLazyLoadQuery and useFragment hooks in the same component. The query data is fetched with useLazyLoadQuery and then passed to useFragment to access the fragment data.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/tutorial/connections-pagination.md#2025-04-18_snippet_12\n\nLANGUAGE: jsx\nCODE:\n```\nexport default function Newsfeed() {\n  // change-line\n  const queryData = useLazyLoadQuery(NewsfeedQuery, {});\n  // change-line\n  const data = useFragment(NewsfeedContentsFragment, queryData);\n  const storyEdges = data.newsfeedStories.edges;\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Edge Creation and Insertion Example\nDESCRIPTION: Example showing how to create and insert edges into a connection using ConnectionHandler methods.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/api-reference/relay-runtime/store.md#2025-04-18_snippet_25\n\nLANGUAGE: javascript\nCODE:\n```\nconst user = store.get(userID);\nconst friends = ConnectionHandler.getConnection(user, 'FriendsFragment_friends');\nconst newFriend = store.get(newFriendId);\nconst edge = ConnectionHandler.createEdge(store, friends, newFriend, 'UserEdge');\n\n// No cursor provided, append the edge at the end.\nConnectionHandler.insertEdgeAfter(friends, edge);\n\n// No cursor provided, insert the edge at the front:\nConnectionHandler.insertEdgeBefore(friends, edge);\n```\n\n----------------------------------------\n\nTITLE: Returning List Types in Relay Resolver (TypeScript)\nDESCRIPTION: Shows how to return an array of strings (favorite colors) from a Relay Resolver function. This example demonstrates the usage of list types in resolvers.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/guides/relay-resolvers/return-types.md#2025-04-18_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n/**\n * @RelayResolver User.favoriteColors: [String]\n */\nexport function favoriteColors(user: UserModel): string[] {\n  return user.favoriteColors;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Single Artifact Directory in package.json for Relay Compiler\nDESCRIPTION: This snippet shows how to specify the artifactDirectory in the Relay compiler configuration within package.json. This setting tells the compiler to store all artifacts in a single directory.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/guides/type-emission.md#2025-04-18_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  // package.json\n  \"relay\": {\n    \"artifactDirectory\": \"./src/__generated__\",\n    ...\n  },\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Batched LiveState Updates with Redux in TypeScript\nDESCRIPTION: This code demonstrates how to batch live state updates when using Redux. It wraps the store's dispatch function to use Relay's batchLiveStateUpdates for improved performance.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/guides/relay-resolvers/live-fields.md#2025-04-18_snippet_4\n\nLANGUAGE: ts\nCODE:\n```\nconst store = createStore(reducer);\nconst originalDispatch = store.dispatch;\n\nfunction wrapped(action) {\n  relayStore.batchLiveStateUpdates(() => {\n    originalDispatch(action);\n  })\n}\n\nstore.dispatch = wrapped;\n```\n\n----------------------------------------\n\nTITLE: Refetching Connection with Different Variables\nDESCRIPTION: Shows how to refetch a connection with different variables using the refetch function from usePaginationFragment.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/guided-tour/list-data/refetching-connections.md#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nfunction FriendsListComponent(props: Props) {\n  const searchTerm = props.searchTerm;\n  const {data, loadNext, refetch} = usePaginationFragment(\n    graphql`\n      fragment FriendsListComponent_user on User {\n        name\n        friends(\n          order_by: $orderBy,\n          search_term: $searchTerm,\n          after: $cursor,\n          first: $count,\n        ) @connection(key: \"FriendsListComponent_user_friends_connection\") {\n          edges {\n            node {\n              name\n              age\n            }\n          }\n        }\n      }\n    `,\n    props.user,\n  );\n\n  useEffect(() => {\n    refetch({first: 10, search_term: searchTerm}, {fetchPolicy: 'store-or-network'});\n  }, [searchTerm])\n\n  return (\n    <>\n      <h1>Friends of {data.name}:</h1>\n\n      <Button\n        onClick={() =>\n          refetch({first: 10, orderBy: 'DATE_ADDED'});\n        }>\n        Sort by date added\n      </Button>\n\n      <List items={data.friends?.nodes}>...</List>\n      <Button onClick={() => loadNext(10)}>Load more friends</Button>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Passing Different @arguments to the Same Fragment\nDESCRIPTION: Component that includes the same fragment as the previous example but passes a different variable value using @arguments. This shows how the same fragment can be reused with different variable values.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v13.0.0/guided-tour/rendering/variables.md#2025-04-18_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * Include same fragment using *_different_* @arguments\n */\n\nfunction OtherUserComponent(props) {\n  const data = useFragment(\n    graphql`\n      fragment OtherUserComponent_user on User {\n        name\n\n        # Pass a different value for the scale variable.\n        # The value can be another local or global variable:\n        ...PictureComponent_user @arguments(scale: $pictureScale)\n      }\n    `,\n    props.user,\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Spreading ImageFragment in PosterBylineFragment\nDESCRIPTION: This code snippet shows how to spread the `ImageFragment` into the `PosterBylineFragment`. This integration allows the `PosterBylineFragment` to include the data defined in `ImageFragment` when querying the `profilePicture` field.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/tutorial/fragments-1.md#2025-04-18_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst PosterBylineFragment = graphql`\n  fragment PosterBylineFragment on Actor {\n    name\n    profilePicture {\n      // change-line\n      ...ImageFragment\n    }\n  }\n`;\n```\n\n----------------------------------------\n\nTITLE: Deleting a Node from Connection Using ConnectionHandler in JavaScript\nDESCRIPTION: Demonstrates deletion of a node from a connection using `deleteNode` in ConnectionHandler, which removes any edges corresponding to the specified node ID from the connection.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/api-reference/relay-runtime/store.md#2025-04-18_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\nconst user = store.get(userID);\nconst friends = ConnectionHandler.getConnection(user, 'FriendsFragment_friends');\nConnectionHandler.deleteNode(friends, idToDelete);\n```\n\n----------------------------------------\n\nTITLE: Modifying GraphQL Query for List Selection\nDESCRIPTION: Updated GraphQL query to select multiple stories instead of a single story using the topStories field.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/tutorial/arrays-lists.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst NewsfeedQuery = graphql`\n  query NewsfeedQuery {\n    // change-line\n    topStories {\n      ...StoryFragment\n    }\n  }\n`;\n```\n\n----------------------------------------\n\nTITLE: Basic Fragment on Actor Interface\nDESCRIPTION: A GraphQL fragment that selects common fields from the Actor interface, which can be used with any implementing type.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/tutorial/interfaces-polymorphism.md#2025-04-18_snippet_3\n\nLANGUAGE: graphql\nCODE:\n```\nfragment PosterDetailsHovercardContentsBodyFragment on Actor {\n  name\n  joined\n  profilePicture {\n    ...ImageFragment\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Querying for Faction ID with GraphQL\nDESCRIPTION: A GraphQL query to fetch the ID and name of the Rebels faction, demonstrating how to retrieve globally unique identifiers for object refetching.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/guides/graphql-server-specification.md#2025-04-18_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\nquery RebelsQuery {\n  rebels {\n    id\n    name\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Current Implementation of PosterByline Component\nDESCRIPTION: The existing PosterByline component implementation that uses fragments to display basic poster information, showing the current state before adding hovercard functionality.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/tutorial/queries-2.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport default function PosterByline({ poster }: Props): React.ReactElement {\n  const data = useFragment(PosterBylineFragment, poster);\n  return (\n    <div className=\"byline\">\n      <Image image={data.profilePicture} width={60} height={60} className=\"byline__image\" />\n      <div className=\"byline__name\">{data.name}</div>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using Suspense with Fragment Components in Relay\nDESCRIPTION: Modified HomeTab component that wraps the UsernameComponent in Suspense to allow partial rendering. This allows the name field to be displayed immediately while the username is still loading.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/guided-tour/reusing-cached-data/rendering-partially-cached-data.md#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * HomeTab.react.js\n *\n * Query Component\n */\n\nconst React = require('React');\nconst {Suspense} = require('React');\nconst {graphql, usePreloadedQuery} = require('react-relay');\n\nconst UsernameComponent = require('./UsernameComponent.react');\n\n\nfunction HomeTab() {\n  const data = usePreloadedQuery(\n    graphql`\n      query AppQuery($id: ID!) {\n        user(id: $id) {\n          name\n          ...UsernameComponent_user\n        }\n      }\n    `,\n    props.queryRef,\n  );\n\n  return (\n    <>\n      <h1>{data.user?.name}</h1>\n\n      {/*\n        Wrap the UserComponent in Suspense to allow other parts of the\n        App to be rendered even if the username is missing.\n      */}\n      <Suspense fallback={<LoadingSpinner label=\"Fetching username\" />}>\n        <UsernameComponent user={data.user} />\n      </Suspense>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Relay Environment with useRelayEnvironment Hook\nDESCRIPTION: This snippet shows how to access the current Relay Environment within a descendant component of RelayEnvironmentProvider using the useRelayEnvironment Hook. It imports the hook and uses it within a functional component.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/guided-tour/rendering/environment.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst {useRelayEnvironment} = require('react-relay');\n\nfunction UserComponent(props: Props) {\n  const environment = useRelayEnvironment();\n\n  return (...);\n}\n```\n\n----------------------------------------\n\nTITLE: Setting up babel-plugin-relay\nDESCRIPTION: This code installs the babel-plugin-relay and demonstrates how to configure it in a .babelrc file to work with Relay.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/getting-started/installation-and-setup.md#2025-04-18_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nyarn add --dev babel-plugin-relay graphql\n```\n\n----------------------------------------\n\nTITLE: Updating PosterByline Fragment and Component in JavaScript\nDESCRIPTION: This snippet shows how to modify the PosterByline component to include the 'id' field in its fragment and pass it as a prop to the PosterDetailsHovercardContents component.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/tutorial/queries-2.md#2025-04-18_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst PosterBylineFragment = graphql`\n  fragment PosterBylineFragment on Actor {\n    // change-line\n    id\n    ...\n  }\n`;\n\nexport default function PosterByline({ poster }: Props): React.ReactElement {\n  ...\n  return (\n   ...\n    <PosterDetailsHovercardContents\n      // change-line\n      posterID={data.id}\n    />\n   ...\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Actor Fragment in Relay\nDESCRIPTION: Initial GraphQL fragment definition selecting common fields from the Actor interface.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/tutorial/interfaces-polymorphism.md#2025-04-18_snippet_3\n\nLANGUAGE: graphql\nCODE:\n```\nfragment PosterDetailsHovercardContentsBodyFragment on Actor {\n  name\n  joined\n  profilePicture {\n    ...ImageFragment\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: GraphQL Query with Pagination Using Cursors\nDESCRIPTION: This snippet shows how to continue querying more results using the cursor obtained from the previous query, fetching the next three rebel ships. Demonstrates how to pass the 'after' argument using cursor-based pagination.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-experimental/GraphQL-ServerSpecification.md#2025-04-18_snippet_9\n\nLANGUAGE: graphql\nCODE:\n```\nquery EndOfRebelShipsQuery {\n  rebels {\n    name,\n    ships(first: 3 after: \"YXJyYXljb25uZWN0aW9uOjE=\") {\n      edges {\n        cursor,\n        node {\n          name\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Relay PropTypes Validation in React Component\nDESCRIPTION: Demonstrates how to use Relay.PropTypes.Container and Relay.PropTypes.QueryConfig validators to ensure proper typing of Relay components and routes in a React application. The example shows validation of Component and route props in a MyApplication component that renders a Relay.RootContainer.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-classic/Classic-APIReference-PropTypes.md#2025-04-18_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nclass MyApplication extends React.Component {\n  static propTypes = {\n    // Warns if `Component` is not a valid RelayContainer.\n    Component: Relay.PropTypes.Container.isRequired,\n    // Warns if `route` is not a valid route.\n    route: Relay.PropTypes.QueryConfig.isRequired,\n  };\n  render() {\n    return (\n      <Relay.RootContainer\n        Component={this.props.Component}\n        route={this.props.route}\n      />\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Refetch Container Component in React-Relay\nDESCRIPTION: Example of a React component using the legacy Refetch Container pattern to refetch data with different variables.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/migration-and-compatibility/relay-hooks-and-legacy-container-apis.md#2025-04-18_snippet_9\n\nLANGUAGE: jsx\nCODE:\n```\nimport * as React from 'React';\nimport {graphql, createRefetchContainer} from 'react-relay';\n\nfunction CommentBody(props: Props) {\n  const relay = props.relay;\n\n  return (\n    <>\n      <p>{data.body?.text}</p>\n      <Button\n        onClick={() => relay.refetch(\n          {lang: 'SPANISH'}, // fragmentVariables\n          null,  // renderVariables\n          error => { ... },\n          {force: true}\n        )}>\n        Translate Comment\n      </Button>\n    </>\n  );\n}\n\nexport default createRefetchContainer(\n  CommentBody,\n  {\n    user: graphql`\n      fragment CommentBody_comment on Comment {\n        body(lang: $lang) {\n          text\n        }\n      }\n    `,\n  },\n\n  // This option is no longer required, the refetch query\n  // will automatically be generated by Relay using the @refetchable\n  // directive.\n  graphql`\n    query AppQuery($id: ID!, lang: Lang) {\n      node(id: $id) {\n        ...CommentBody_comment\n      }\n    }\n  `,\n);\n```\n\n----------------------------------------\n\nTITLE: Example Usage of applyUpdate\nDESCRIPTION: Practical example demonstrating how to use applyUpdate to create and commit a mutation transaction with proper error handling.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-classic/Classic-APIReference-Store.md#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nvar onSuccess = () => {\n  console.log('Mutation successful!');\n};\nvar onFailure = (transaction) => {\n  var error = transaction.getError() || new Error('Mutation failed.');\n  console.error(error);\n};\nvar mutation = new MyMutation({...});\n\nvar transaction = Relay.Store.applyUpdate(mutation, {onFailure, onSuccess});\n\ntransaction.commit();\n```\n\n----------------------------------------\n\nTITLE: Configuring Babel Plugin for Relay Artifact Directory\nDESCRIPTION: This snippet demonstrates how to configure the Babel plugin for Relay to use the specified artifact directory. It sets the 'artifactDirectory' option in the .babelrc configuration file.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/guides/type-emission.md#2025-04-18_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"plugins\": [\n    [\"relay\", { \"artifactDirectory\": \"./src/__generated__\" }]\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Observable in Relay\nDESCRIPTION: This snippet illustrates how to create an observable that handles data fetching in Relay, allowing for synchronous access to data that may not yet be available. The example shows subscribing to the observable.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/glossary/glossary.md#2025-04-18_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst completedObservable = Observable.from(\"Relay is awesome!\");\nlet valueFromObservable;\nobservable.subscribe({\n  next: (value) => {\n    valueFromObservable = value;\n    /* this will execute in the same tick */\n  },\n});\nconsole.log(valueFromObservable); // logs out \"Relay is awesome!\"\n```\n\n----------------------------------------\n\nTITLE: Deprecating Author Field in Relay Resolver\nDESCRIPTION: Example showing how to mark a Relay Resolver field as deprecated using the @deprecated docblock tag. The example demonstrates deprecating an Author's fullName field with a markdown-formatted reason that will be displayed in the VSCode extension.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/guides/relay-resolvers/deprecated.md#2025-04-18_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n/**\n * @RelayResolver Author.fullName: String\n *\n * @deprecated Google \"Falsehoods Programmers Believe About Names\"\n */\nexport function fullName(author: AuthorModel): string {\n  return `${author.firstName} ${author.lastName}`;\n}\n```\n\n----------------------------------------\n\nTITLE: Retaining Local Data in Relay\nDESCRIPTION: Shows how to manually retain local data to prevent garbage collection when no component is rendering it.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/guides/client-schema-extensions.md#2025-04-18_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport {createOperationDescriptor, getRequest} from 'relay-runtime';\n\n// Create a query that references that record\nconst localDataQuery = graphql`\n  query LocalDataQuery {\n    viewer {\n      notes {\n        __typename\n      }\n    }\n  }\n`;\n\n// Create an operation descriptor for the query\nconst request = getRequest(localDataQuery);\nconst operation = createOperationDescriptor(request, {} /* variables */);\n\n\n// Tell Relay to retain this operation so any data referenced by it isn't garbage collected\n// In this case, all the notes linked to the `viewer` will be retained\nconst disposable = environment.retain(operation);\n\n\n// Whenever you don't need that data anymore and it's okay for Relay to garbage collect it,\n// you can dispose of the retain\ndisposable.dispose();\n```\n\n----------------------------------------\n\nTITLE: Defining a GraphQL Subscription in Relay\nDESCRIPTION: Example of a GraphQL Subscription that allows clients to subscribe to changes in feedback likes. This subscription uses the subscription keyword and accepts input data to specify which feedback to monitor.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/glossary/glossary.md#2025-04-18_snippet_7\n\nLANGUAGE: graphql\nCODE:\n```\nsubscription FeedbackLikeSubscription($input: FeedbackLikeSubscribeData!) {\n  feedback_like_subscribe(data: $input) {\n    feedback {\n      id\n      like_count\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Establishing GraphQL Subscription with react-relay in JavaScript\nDESCRIPTION: This snippet demonstrates how to use requestSubscription to establish a GraphQL subscription imperatively with 'react-relay'. It imports necessary modules and sets up a subscription using the Relay Environment. The key parameters include 'environment' for the Relay Environment and the 'config' which accepts GraphQLSubscriptionConfig. The function returns a Disposable object which terminates the subscription when invoked. It assumes the 'graphql' tag for defining the subscription and requires 'react-relay' as a dependency.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/api-reference/relay-runtime/request-subscription.md#2025-04-18_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport {graphql, requestSubscription} from 'react-relay';\n\nconst subscription = graphql`\n  subscription UserDataSubscription($input: InputData!) {\n    # ...\n  }\n`;\n\nfunction createSubscription(environment: IEnvironment): Disposable {\n  return requestSubscription(environment, {\n    subscription,\n    variables: {input: {userId: '4'}},\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Querying with @required Directive in GraphQL\nDESCRIPTION: Demonstrates how to use the @required directive in a GraphQL query to make the 'name' field required for the 'viewer' object.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/guides/required-directive.md#2025-04-18_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nquery MyQuery {\n  viewer {\n    name @required(action: LOG)\n    age\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Debugging Error for Missing deleteRecord Handler in Relay\nDESCRIPTION: An error message that appears when the Relay environment's handlerProvider doesn't have a handler defined for the deleteRecord directive. This indicates that the environment is missing the appropriate mutation handler configuration.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/debugging/declarative-mutation-directives.md#2025-04-18_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nRelayFBHandlerProvider: No handler defined for `deleteRecord`. [Caught in: An uncaught error was thrown inside `RelayObservable`.]\n```\n\n----------------------------------------\n\nTITLE: Inserting Edge Before in Relay Runtime with JavaScript\nDESCRIPTION: This snippet illustrates how to insert an edge at the beginning of a connection using the `insertEdgeBefore` method in `ConnectionHandler`, allowing an optional cursor parameter for precise placement.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/api-reference/relay-runtime/store.md#2025-04-18_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\nConnectionHandler.insertEdgeBefore(friends, edge);\n```\n\n----------------------------------------\n\nTITLE: Querying for Empire Faction ID with GraphQL\nDESCRIPTION: A GraphQL query to fetch the ID and name of the Empire faction, demonstrating another example of retrieving globally unique identifiers.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/guides/graphql-server-specification.md#2025-04-18_snippet_5\n\nLANGUAGE: graphql\nCODE:\n```\nquery EmpireQuery {\n  empire {\n    id\n    name\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using GraphQL Template Tag in JavaScript\nDESCRIPTION: Example of using the graphql template tag to define a GraphQL query. The tag produces a GraphQLTaggedNode that represents the GraphQL document at runtime.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/guides/compiler.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport {graphql} from 'react-relay';\n\ngraphql`\n  query MyQuery {\n    viewer {\n      id\n    }\n  }\n`;\n```\n\n----------------------------------------\n\nTITLE: Passing Arguments to ImageFragment in StoryFragment using GraphQL\nDESCRIPTION: This code snippet demonstrates passing the `width` argument to the `ImageFragment` when spreading it in the `StoryFragment`. This allows the `StoryFragment` to request a specific width for the thumbnail image.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/tutorial/fragments-1.md#2025-04-18_snippet_13\n\nLANGUAGE: graphql\nCODE:\n```\nconst StoryFragment = graphql`\n  fragment StoryFragment on Story {\n    title\n    summary\n    postedAt\n    poster {\n      ...PosterBylineFragment\n    }\n    image {\n      // change-line\n      ...ImageFragment @arguments(width: 400)\n    }\n  }\n`;\n```\n\n----------------------------------------\n\nTITLE: Configuring a Query Resolver for Mock Relay Environment\nDESCRIPTION: Example of how to configure a query resolver to generate mock responses for GraphQL types. Shows how to return specific field values for a GraphQL type used in the query.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/guides/testing-relay-with-preloaded-queries.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nreturn MockPayloadGenerator.generate(operation, {\n  CurrencyAmount() { // <-- the GraphQL type\n    return {\n      formatted_amount: \"response_value\" <-- CurrencyAmount fields, selected in the query\n    };\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Declaring a GraphQL Connection with Filter Arguments in Relay\nDESCRIPTION: This snippet demonstrates how to declare a connection field that takes filter arguments in a GraphQL fragment. The comments field accepts orderBy, filterMode, and language as filter parameters that will affect connection identity.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/guided-tour/updating-data/updating-connections.md#2025-04-18_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nconst {graphql} = require('RelayModern');\n\nconst storyFragment = graphql`\n  fragment StoryComponent_story on Story {\n    comments(\n      order_by: $orderBy,\n      filter_mode: $filterMode,\n      language: $language,\n    ) @connection(key: \"StoryComponent_story_comments_connection\") {\n      edges {\n        nodes {\n          body {\n            text\n          }\n        }\n      }\n    }\n  }\n`;\n```\n\n----------------------------------------\n\nTITLE: Deleting local data with commitLocalUpdate in Relay\nDESCRIPTION: Removes a Note record from the user's notes array and deletes it from the Relay Store using commitLocalUpdate.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/guides/client-schema-extensions.md#2025-04-18_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport {commitLocalUpdate} from 'react-relay';\n\nfunction deleteUserNote(environment, dataID) {\n  commitLocalUpdate(environment, store => {\n    const user = store.getRoot().getLinkedRecord('viewer');\n    const userNoteRecords = user.getLinkedRecords('notes');\n\n    // Remove the note from the list of user notes.\n    const newUserNoteRecords = userNoteRecords.filter(x => x.getDataID() !== dataID);\n\n    // Delete the note from the store.\n    store.delete(dataID);\n\n    // Set the new list of notes.\n    user.setLinkedRecords(newUserNoteRecords, 'notes');\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: JSON Response for Empty Pagination Result\nDESCRIPTION: The JSON response showing empty edges when querying beyond available data, demonstrating how connections handle the end of available results.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/guides/graphql-server-specification.md#2025-04-18_snippet_16\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"rebels\": {\n    \"name\": \"Alliance to Restore the Republic\",\n    \"ships\": {\n      \"edges\": []\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: GraphQL query for setting linked records\nDESCRIPTION: An example GraphQL query that retrieves a set of nodes under the rootField.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v13.0.0/api-reference/relay-runtime/store.md#2025-04-18_snippet_36\n\nLANGUAGE: graphql\nCODE:\n```\nrootField {\n  nodes {\n    # ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Relay Subscriptions (JavaScript)\nDESCRIPTION: This snippet demonstrates how to test a Relay subscription function. It sets up a mock environment, initiates a subscription, and verifies that the onNext callback is called when new data is received.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/guides/testing-relay-components.md#2025-04-18_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\n// Example subscribe function\nfunction subscribe(environment, onNext, onError, variables)\n  requestSubscription(environment, {\n    subscription: graphql`...`,\n    onNext,\n    onError,\n    variables,\n  });\n}\n\n// Example test may be written like so\ntest('it should subscribe', () => {\n  const environment = createMockEnvironment();\n  const onNext = jest.fn();\n  subscribe(environment, onNext, jest.fn(), {});\n  const operation = environment.mock.getMostRecentOperation();\n\n  act(() => {\n    environment.mock.nextValue(\n      operation,\n      MockPayloadGenerator.generate(operation)\n    );\n  });\n\n  expect(onNext).toBeCalled();\n});\n```\n\n----------------------------------------\n\nTITLE: GraphQL Fragment for Inline Fragment Issue\nDESCRIPTION: Illustrates a GraphQL fragment where the `@required` directive within an inline fragment can still result in a nullable field. This happens when the object might not be of the specific type (e.g., `User`). To address this, adding a `__typename` field and checking its value can help narrow down the object's type and guarantee a non-nullable `name` field.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/guides/required-directive.md#2025-04-18_snippet_7\n\nLANGUAGE: graphql\nCODE:\n```\nfragment MyFrag on Actor {\n  ... on User {\n    name @required(action: THROW)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Extending Fragment with Type Refinement for Person\nDESCRIPTION: This snippet further extends the 'PosterDetailsHovercardContentsBodyFragment' to include fields specific to 'Person', utilizing type refinement to access fields not available in the 'Actor' interface.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/tutorial/interfaces-polymorphism.md#2025-04-18_snippet_6\n\nLANGUAGE: graphql\nCODE:\n```\nfragment PosterDetailsHovercardContentsBodyFragment on Actor {\n  name\n  joined\n  profilePicture {\n    ...ImageFragment\n  }\n  ... on Organization {\n    organizationKind\n  }\n  ... on Person {\n    location {\n      name\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: GraphQL Response Caching Implementation\nDESCRIPTION: Simple GraphQL query-based caching implementation using a Map to store query results.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/principles-and-architecture/thinking-in-graphql.md#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nvar _cache = new Map();\ngraphql.get = queryText => {\n  if (!_cache.has(queryText)) {\n    _cache.set(queryText, fetchGraphQL(queryText));\n  }\n  return _cache.get(queryText);\n};\n```\n\n----------------------------------------\n\nTITLE: Using @alias with @skip and @include\nDESCRIPTION: This code demonstrates how to use the `@alias` directive with `@skip` to conditionally fetch a fragment.  It shows how to check if the conditional fragment `ConditionalData` was fetched by assigning the fragment an alias and checking if the alias is null. The `useFragment` hook is used to fetch the fragment data based on `$someVar`.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/guides/alias-directive.md#2025-04-18_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nfunction MyUser({userKey}) {\n  const user = useFragment(graphql`\n    fragment MyFragment on User {\n      ...ConditionalData @skip(if: $someVar) @alias\n    }`, userKey);\n\n  if(user.ConditionalData == null) {\n    return \\\"No data fetched\\\";\n  }\n  return <ConditionalData userKey={user.ConditionalData} />\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Client Field in GraphQL\nDESCRIPTION: This snippet illustrates how to extend the Query type in GraphQL to include a client-only field called 'client_field'. This extension allows the definition of local fields that are not sent to the server.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/api-reference/hooks/use-client-query.md#2025-04-18_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\n# example client extension of the `Query` type\nextend type Query {\n  client_field: String\n}\n```\n\n----------------------------------------\n\nTITLE: Paginating Through Rebel Ships\nDESCRIPTION: This snippet illustrates how to paginate through the Rebel faction's ships. It asks for two ships and retrieves their cursors for further navigation in the dataset.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/guides/graphql-server-specification.md#2025-04-18_snippet_6\n\nLANGUAGE: graphql\nCODE:\n```\nquery MoreRebelShipsQuery {\n  rebels {\n    name\n    ships(first: 2) {\n      edges {\n        cursor\n        node {\n          name\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: ImageFragment with Fragment Arguments (GraphQL)\nDESCRIPTION: Enhanced ImageFragment that accepts width and height arguments using the @argumentDefinitions directive. These fragment arguments are then passed to the url field as field arguments.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/tutorial/fragments-1.md#2025-04-18_snippet_12\n\nLANGUAGE: graphql\nCODE:\n```\nconst ImageFragment = graphql`\n  fragment ImageFragment on Image\n    @argumentDefinitions(\n      // color1\n      width: {\n        // color2\n        type: \"Int\",\n        // color3\n        defaultValue: null\n      }\n      height: {\n        type: \"Int\",\n        defaultValue: null\n      }\n    )\n  {\n    url(\n      // color4\n      width: $width,\n      // color4\n      height: $height\n    )\n    altText\n  }\n`;\n```\n\n----------------------------------------\n\nTITLE: GraphQL Connection Fragment with @connection Directive\nDESCRIPTION: A GraphQL fragment showing a connection with @connection directive for pagination. This annotates the connection field to enable Relay's pagination features.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/api-reference/relay-runtime/store.md#2025-04-18_snippet_9\n\nLANGUAGE: graphql\nCODE:\n```\nfragment FriendsFragment on User {\n  friends(first: 10, orderby: \"firstname\") @connection(\n    key: \"FriendsFragment_friends\",\n  ) {\n    edges {\n      node {\n        id\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing useQueryLoader in Parent Component\nDESCRIPTION: Adds the useQueryLoader hook to the parent component (PosterByline) to create a query reference that can be passed to the child component for preloaded query usage.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/tutorial/queries-2.md#2025-04-18_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\nimport {useQueryLoader} from 'react-relay';\nimport type {PosterDetailsHovercardContentsQuery as HovercardQueryType} from './__generated__/PosterDetailsHovercardContentsQuery.graphql';\nimport {PosterDetailsHovercardContentsQuery} from './PosterDetailsHovercardContents';\n\nexport default function PosterByline({ poster }: Props): React.ReactElement {\n  ...\n  // change\n  const [\n    hovercardQueryRef,\n    loadHovercardQuery,\n  ] = useQueryLoader<HovercardQueryType>(PosterDetailsHovercardContentsQuery);\n  // end-change\n  return (\n   ...\n    <PosterDetailsHovercardContents\n      // change-line\n      queryRef={hovercardQueryRef}\n    />\n   ...\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Local State with commitLocalUpdate - JavaScript\nDESCRIPTION: This snippet initializes the local state for the notes field in the user record by using 'commitLocalUpdate'. It sets this field to an empty array to ensure no null references when accessing local data.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v13.0.0/guides/client-schema-extensions.md#2025-04-18_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport {commitLocalUpdate} from 'react-relay';\n\ncommitLocalUpdate(environment, store => {\n  const user = store.getRoot().getLinkedRecord('viewer');\n\n  // initialize user notes to an empty array.\n  user.setLinkedRecords([], 'notes');\n});\n```\n\n----------------------------------------\n\nTITLE: Invalid Action Severity in Chained @required Directives\nDESCRIPTION: Example of a chained @required usage with inconsistent action severity that would cause a compiler error. Child fields cannot have less severe actions than their parents.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/guides/required-directive.md#2025-04-18_snippet_4\n\nLANGUAGE: graphql\nCODE:\n```\nfragment MyUser on User {\n  profile_picture @required(action: THROW) {\n    url @required(action: LOG)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using MyViewer with Node fragment\nDESCRIPTION: This code demonstrates a React component `MyNode` rendering `MyViewer` by passing a `nodeKey` prop of type `Node`. The code attempts to pass the result of the `useFragment` hook directly as the `viewerKey` to `MyViewer`. This is an example of an unsafe type cast, which `@alias` can help resolve.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/guides/alias-directive.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nfunction MyNode({nodeKey}) {\n  const node = useFragment(graphql`\n    fragment MyFragment on Node {\n      ...MyViewer\n    }`, nodeKey);\n\n  return <MyViewer viewerKey={node} />\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Basic Relay Resolver Syntax\nDESCRIPTION: Shows the basic syntax for defining a Relay Resolver field using special docblock notation.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/guides/relay-resolvers.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n* @RelayResolver TypeName.fieldName(arg1: ArgTypeName): FieldTypeName\n*/\n```\n\n----------------------------------------\n\nTITLE: Defining Assignable Fragment\nDESCRIPTION: Creating an assignable fragment with @assignable directive for User type, containing only __typename field.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/guided-tour/updating-data/imperatively-modifying-linked-fields.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ngraphql`\n  fragment AssignBestFriendButton_assignable_user on User @assignable {\n    __typename\n  }\n`;\n```\n\n----------------------------------------\n\nTITLE: Nested Query Response Example\nDESCRIPTION: Shows the response to the nested GraphQL query, demonstrating how the data structure in the response mirrors the query structure.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/tutorial/graphql.md#2025-04-18_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"person\": {\n    \"name\": \"Jean Valjean\",\n    \"occupation\": \"Mayor\",\n    \"location\": {\n      \"name\": \"Montreuil-sur-Mer\",\n      \"population\": 1935\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Compact Query Text for File-based Persisted Queries in JavaScript\nDESCRIPTION: Demonstrates how to enable the new 'compact_query_text' feature flag in the Relay config file, which removes whitespace from persisted query text to reduce file size.\nSOURCE: https://github.com/facebook/relay/blob/main/website/blog/2023-03-30-relay-15.mdx#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\npersistConfig: {\n  file: 'path/to/file.json',\n  algorithm: 'SHA256'\n},\nfeatureFlags: {\n  compact_query_text: true\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering List Items in React Component\nDESCRIPTION: React component implementation showing how to map over an array of stories and render them\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/tutorial/arrays-lists.md#2025-04-18_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport default function Newsfeed({}) {\n  const data = useLazyLoadQuery<NewsfeedQueryType>(NewsfeedQuery, {});\n  const stories = data.topStories;\n  return (\n    <div className=\"newsfeed\">\n      {stories.map(story => <Story story={story} />)}\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Connection using ConnectionHandler.getConnectionID\nDESCRIPTION: This snippet demonstrates how to access a connection record using the ConnectionHandler.getConnectionID API when you have access to the parent record ID.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/guided-tour/updating-data/updating-connections.md#2025-04-18_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst {ConnectionHandler} = require('relay-runtime');\n\nfunction updater(store: RecordSourceSelectorProxy) {\n  // Get the connection ID\n  const connectionID = ConnectionHandler.getConnectionID(\n    storyID, // passed as input to the mutation/subscription\n    'StoryComponent_story_comments_connection',\n  );\n\n  // Get the connection record\n  const connectionRecord = store.get(connectionID);\n\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Mocking GraphQL type with MockPayloadGenerator\nDESCRIPTION: This JavaScript code snippet demonstrates how to mock a GraphQL type using `MockPayloadGenerator` in Relay testing.  It defines a function for the `CurrencyAmount` GraphQL type that returns a mocked object with the `formatted_amount` field.  This allows for simulating GraphQL responses in tests.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/guides/testing-relay-with-preloaded-queries.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nreturn MockPayloadGenerator.generate(operation, {\n  CurrencyAmount() { // <-- the GraphQL type\n    return {\n      formatted_amount: \"response_value\" <-- CurrencyAmount fields, selected in the query\n    };\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Using @required Directive in GraphQL\nDESCRIPTION: The @required directive makes handling potentially null values more ergonomic in Relay. It helps in dealing with nullable fields in a more convenient way.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/glossary/glossary.md#2025-04-18_snippet_10\n\nLANGUAGE: GraphQL\nCODE:\n```\n@required\n```\n\n----------------------------------------\n\nTITLE: Implementing Pagination with usePaginationFragment in React/Relay\nDESCRIPTION: Example showing how to use usePaginationFragment hook to paginate through a friends list connection. The component renders a list of friends and includes a load more button. Uses GraphQL fragments with @connection and @refetchable directives.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/api-reference/hooks/use-pagination-fragment.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport type {FriendsList_user$key} from 'FriendsList_user.graphql';\n\nconst React = require('React');\n\nconst {graphql, usePaginationFragment} = require('react-relay');\n\ntype Props = {\n  user: FriendsList_user$key,\n};\n\nfunction FriendsList(props: Props) {\n  const {\n    data,\n    loadNext,\n    loadPrevious,\n    hasNext,\n    hasPrevious,\n    isLoadingNext,\n    isLoadingPrevious,\n    refetch, // For refetching connection\n  } = usePaginationFragment(\n    graphql`\n      fragment FriendsListComponent_user on User\n      @refetchable(queryName: \"FriendsListPaginationQuery\") {\n        name\n        friends(first: $count, after: $cursor)\n        @connection(key: \"FriendsList_user_friends\") {\n          edges {\n            node {\n              name\n              age\n            }\n          }\n        }\n      }\n    `,\n    props.user,\n  );\n\n  return (\n    <>\n      <h1>Friends of {data.name}:</h1>\n\n      <List items={data.friends?.edges.map(edge => edge.node)}>\n        {node => {\n          return (\n            <div>\n              {node.name} - {node.age}\n            </div>\n          );\n        }}\n      </List>\n      <Button onClick={() => loadNext(10)}>Load more friends</Button>\n    </>\n  );\n}\n\nmodule.exports = FriendsList;\n```\n\n----------------------------------------\n\nTITLE: Using @appendNode Directive in GraphQL Mutation\nDESCRIPTION: This snippet shows how to use the @appendNode directive in a GraphQL mutation to add newly created nodes, wrapped inside edges, to specified connections.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/guided-tour/updating-data/updating-connections.md#2025-04-18_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Get the connection ID using the `__id` field\nconst connectionID = fragmentData?.comments?.__id;\n\n// Or get it using `ConnectionHandler.getConnectionID()`\nconst connectionID = ConnectionHandler.getConnectionID(\n  '<story-id>',\n  'StoryComponent_story_comments_connection',\n);\n\n// ...\n\n// Mutation\ncommitMutation<AppendCommentMutation>(environment, {\n  mutation: graphql`\n    mutation AppendCommentMutation(\n      # Define a GraphQL variable for the connections array\n      $connections: [ID!]!\n      $input: CommentCreateInput\n    ) {\n      commentCreate(input: $input) {\n        # Use @appendNode or @prependNode on the node field\n        feedbackCommentNode @appendNode(connections: $connections, edgeTypeName: \"CommentsEdge\") {\n          id\n        }\n      }\n    }\n  `,\n  variables: {\n    input,\n    // Pass the `connections` array\n    connections: [connectionID],\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Loading EntryPoint Example in JavaScript\nDESCRIPTION: Example showing how to use loadEntryPoint to load an EntryPoint component with parameters. The code demonstrates creating an entrypoint reference using environment and parameters, though missing proper disposal handling.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/api-reference/entrypoint-apis/load-entrypoint.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst EntryPoint = require('MyComponent.entrypoint.js');\n\nconst {loadQuery} = require('react-relay');\n\n// Generally, your component should access the environment from the React context,\n// and pass that environment to this function.\nconst getEntrypointReference = environment => loadEntryPoint(\n  { getEnvironment: () => environment },\n  EntryPoint,\n  {id: '4'},\n);\n\n// later: pass entryPointReference to EntryPointContainer\n// Note that EntryPoint references should have .dispose() called on them,\n// which is missing in this example.\n```\n\n----------------------------------------\n\nTITLE: GraphQL Fragment with @waterfall Directive\nDESCRIPTION: This code snippet demonstrates the usage of the `@waterfall` directive in a GraphQL fragment. The `@waterfall` directive is used to explicitly mark fields that require a lazy fetch of server data, particularly when reading client-defined edges via Relay Resolvers. In this example, the `author` field on the `DraftPost` type is annotated with `@waterfall`, indicating that fetching the author's name requires a separate request.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/api-reference/graphql/graphql-directives.md#2025-04-18_snippet_9\n\nLANGUAGE: graphql\nCODE:\n```\nfragment EditPost on DraftPost {\n  author @waterfall {\n    name\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: GraphQL Schema Definition\nDESCRIPTION: Example schema showing type definitions for a newsfeed application, including types, interfaces, and enums.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/tutorial/graphql.md#2025-04-18_snippet_3\n\nLANGUAGE: graphql\nCODE:\n```\ntype Story {\n  id: ID!\n  category: Category\n  title: String\n  summary: String\n  thumbnail: Image\n  poster: Actor\n}\n\ninterface Actor {\n  id: ID!\n  name: String\n  profilePicture: Image\n}\n\ntype Person implements Actor {\n  id: ID!\n  name: String\n  email: String\n  profilePicture: Image\n  location: Location\n}\n\nenum Category {\n  EDUCATION\n  NEWS\n  COOKING\n}\n```\n\n----------------------------------------\n\nTITLE: Example Error Message in Relay GraphQL Response\nDESCRIPTION: Sample error message shown when Relay encounters conflicting typenames for the same ID, indicating a violation of the globally unique ID requirement.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/debugging/inconsistent-typename-error.md#2025-04-18_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nRelayResponseNormalizer: Invalid record '543'. Expected __typename to be consistent, but the record was assigned conflicting types Foo and Bar. The GraphQL server likely violated the globally unique ID requirement by returning the same ID for different objects.\n```\n\n----------------------------------------\n\nTITLE: Defining Story Fragment in Relay\nDESCRIPTION: Shows how to create a GraphQL fragment for the Story component to encapsulate its data requirements.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/tutorial/fragments-1.md#2025-04-18_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { graphql } from 'relay-runtime';\n\nconst StoryFragment = graphql`\n  fragment StoryFragment on Story {\n    title\n    summary\n    createdAt\n    poster {\n      name\n      profilePicture {\n        url\n      }\n    }\n    thumbnail {\n      url\n    }\n  }\n`;\n```\n\n----------------------------------------\n\nTITLE: Augmenting Fragment for Pagination in GraphQL\nDESCRIPTION: This snippet shows how to modify a GraphQL fragment to support pagination by adding argument definitions, making it refetchable, and marking the connection field.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/tutorial/connections-pagination.md#2025-04-18_snippet_4\n\nLANGUAGE: graphql\nCODE:\n```\nconst StoryCommentsSectionFragment = graphql`\n  fragment StoryCommentsSectionFragment on Story\n    @refetchable(queryName: \"StoryCommentsSectionPaginationQuery\")\n    @argumentDefinitions(\n      cursor: { type: \"String\" }\n      count: { type: \"Int\", defaultValue: 3 }\n    )\n  {\n    comments(after: $cursor, first: $count)\n      @connection(key: \"StoryCommentsSectionFragment_comments\")\n    {\n      edges {\n        node {\n          ...CommentFragment\n        }\n      }\n      pageInfo {\n        hasNextPage\n      }\n    }\n  }\n`;\n```\n\n----------------------------------------\n\nTITLE: Querying GraphQL Data with Operation Variables in Flow\nDESCRIPTION: This code demonstrates how Relay generates Flow types for a GraphQL query with variables. The generated types enforce that the variables object contains the required 'artistID' field with a non-null string value.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/guides/type-emission.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * export type ExampleQuery$variables = {\n *   +artistID: string,\n * }\n * export type ExampleQuery$data = {\n *   +artist: {\n *     +name: ?string,\n *   }\n * }\n * export type ExampleQuery = {\n *   +variables: ExampleQuery$variables,\n *   +response: ExampleQuery$data,\n * }\n */\n\nconst data = useLazyLoadQuery(\n  graphql`\n    query ExampleQuery($artistID: ID!) {\n      artist(id: $artistID) {\n        name\n      }\n    }\n  `,\n  // variables are expected to be of type ExampleQuery$variables\n  {artistID: 'banksy'},\n);\n```\n\n----------------------------------------\n\nTITLE: Including Fragments with @arguments in Relay\nDESCRIPTION: Shows how to include a fragment that accepts arguments using the @arguments directive, passing a literal value for the scale variable.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/guided-tour/rendering/variables.md#2025-04-18_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nfunction UserComponent(props) {\n  const data = useFragment(\n    graphql`\n      fragment UserComponent_user on User {\n        name\n\n        # Pass value of 2.0 for the $scale variable\n        ...PictureComponent_user @arguments(scale: 2.0)\n      }\n    `,\n    props.user,\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Refetching Rebel Faction Information with Node Interface\nDESCRIPTION: This snippet demonstrates how to refetch the Rebels faction's information using its ID via the Node interface. The query ensures that the correct object can be retrieved again by its globally unique identifier.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/guides/graphql-server-specification.md#2025-04-18_snippet_2\n\nLANGUAGE: graphql\nCODE:\n```\nquery RebelsRefetchQuery {\n  node(id: \"RmFjdGlvbjox\") {\n    id\n    ... on Faction {\n      name\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Operation Variables Type Emission in TypeScript\nDESCRIPTION: Shows TypeScript type generation for query variables and response data, demonstrating how Relay handles typing for queries with parameters.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/guides/type-emission.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst data = useLazyLoadQuery(\n  graphql`\n    query ExampleQuery($artistID: ID!) {\n      artist(id: $artistID) {\n        name\n      }\n    }\n  `,\n  // variables are expected to be of type ExampleQuery$variables\n  {artistID: 'banksy'},\n);\n```\n\n----------------------------------------\n\nTITLE: Declaring Default Values for Fragment Arguments - JavaScript\nDESCRIPTION: This snippet shows how to declare a Relay fragment with default values for its arguments, allowing for optional fragment parameters during query execution.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/guided-tour/rendering/variables.md#2025-04-18_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * Declare a fragment that accepts arguments with default values\n */\n\nfunction TaskView(props) {\n  const data = useFragment(\n    graphql`\n      fragment TaskView_task on Task\n        @argumentDefinitions(showDetailedResults: {type: \"Boolean!\", defaultValue: true}) {\n        name\n        is_completed\n        ... @include(if: $showDetailedResults) {\n          description\n        }\n      }\n    `,\n    props.task,\n  );\n}\n\nfunction TaskList(props) {\n  const data = usePreloadedQuery(\n    graphql`\n      query TaskListQuery {\n        todays_tasks {\n          ...TaskView_task\n        }\n        tomorrows_tasks {\n          ...TaskView_task @arguments(showDetailedResults: false)\n        }\n      }\n    `,\n    props.queryRef,\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Connection Record Using __id Field\nDESCRIPTION: Demonstrates how to query for a connection's __id field and use it to access the record in the store. This method is useful for accessing connection records in updater functions.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/guided-tour/list-data/updating-connections.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst fragmentData = useFragment(\n  graphql`\n    fragment StoryComponent_story on Story {\n      comments @connection(key: \"StoryComponent_story_comments_connection\") {\n        # Query for the __id field\n        __id\n\n        # ...\n      }\n    }\n  `,\n  props.story,\n);\n\n// Get the connection record id\nconst connectionID = fragmentData?.comments?.__id;\n```\n\nLANGUAGE: javascript\nCODE:\n```\nfunction updater(store: RecordSourceSelectorProxy) {\n  // connectionID is passed as input to the mutation/subscription\n  const connection = store.get(connectionID);\n\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Image Fragment in Relay\nDESCRIPTION: Creation of a reusable fragment for the Image component\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/tutorial/fragments-1.md#2025-04-18_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport { graphql } from 'relay-runtime';\n\nconst ImageFragment = graphql`\n  fragment ImageFragment on Image {\n    url\n  }\n`;\n```\n\n----------------------------------------\n\nTITLE: Implementing User Selection Toggle Component\nDESCRIPTION: React component implementation that uses commitLocalUpdate to toggle a user's selection state in the Relay store.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/guided-tour/updating-data/imperatively-modifying-store-data.md#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport type {RecordSourceSelectorProxy} from 'react-relay';\nimport type {UserSelectToggle_viewer$key} from 'UserSelectToggle_viewer.graphql';\n\nconst {useRelayEnvironment, commitLocalUpdate} = require('react-relay');\n\nfunction UserSelectToggle({ userId, viewerRef }: {\n  userId: string,\n  viewerRef: UserSelectToggle_viewer$key,\n}) {\n  const viewer = useFragment(graphql`\n    fragment UserSelectToggle_viewer on Viewer {\n      user(user_id: $user_id) {\n        id\n        name\n        is_selected\n        ...UserSelectToggle_updatable_user\n      }\n    }\n  `, viewerRef);\n\n  const environment = useRelayEnvironment();\n\n  return <button\n    onClick={() => {\n      commitLocalUpdate(\n        environment,\n        (store: RecordSourceSelectorProxy) => {\n          const userRef = viewer.user;\n          if (userRef == null) {\n            return;\n          }\n\n          const {updatableData} = store.readUpdatableFragment(\n            graphql`\n              fragment UserSelectToggle_updatable_user on User @updatable {\n                is_selected\n              }\n            `,\n            userRef\n          );\n\n          updatableData.is_selected = !viewer?.user?.is_selected;\n        }\n      );\n    }}\n  >\n    {viewer?.user?.is_selected ? 'Deselect' : 'Select'} {viewer?.user?.name}\n  </button>\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Client Schema Extension in GraphQL\nDESCRIPTION: Example of extending the Query type with a client-side field in GraphQL schema\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/api-reference/hooks/use-client-query.md#2025-04-18_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\n# example client extension of the `Query` type\nextend type Query {\n  client_field: String\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing useQueryLoader with React and Relay\nDESCRIPTION: This snippet demonstrates how to use the `useQueryLoader` hook in a React component to fetch and display data. It includes defining a GraphQL query using `graphql`, using `useQueryLoader` to manage the query lifecycle, and using `usePreloadedQuery` to access the fetched data within a `React.Suspense` component.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/api-reference/hooks/use-query-loader.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport type {AppQuery as AppQueryType} from 'AppQuery.graphql';\nimport type {PreloadedQuery} from 'react-relay';\n\nconst {useQueryLoader, usePreloadedQuery} = require('react-relay');\n\nconst AppQuery = graphql`\n  query AppQuery($id: ID!) {\n    user(id: $id) {\n      name\n    }\n  }\n`;\n\ntype Props = {\n  initialQueryRef: PreloadedQuery<AppQueryType>,\n};\n\nfunction QueryFetcherExample(props: Props) {\n  const [\n    queryReference,\n    loadQuery,\n    disposeQuery,\n  ] = useQueryLoader(\n    AppQuery,\n    props.initialQueryRef, /* e.g. provided by router */\n  );\n\n  if (queryReference == null) {\n    return (\n      <Button onClick={() => loadQuery({})}> Click to reveal the name </Button>\n    );\n  }\n\n  return (\n    <>\n      <Button onClick={disposeQuery}>\n        Click to hide the name and dispose the query.\n      </Button>\n      <React.Suspense fallback=\"Loading\">\n        <NameDisplay queryReference={queryReference} />\n      </React.Suspense>\n    </>\n  );\n}\n\nfunction NameDisplay({ queryReference }) {\n  const data = usePreloadedQuery<AppQueryType>(AppQuery, queryReference);\n\n  return <h1>{data.user?.name}</h1>;\n}\n```\n\n----------------------------------------\n\nTITLE: Fragment Container Example in Relay Container API\nDESCRIPTION: Example of using a Fragment Container from the legacy container API to define a component that consumes a fragment of GraphQL data provided by a parent component.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v13.0.0/migration-and-compatibility/relay-hooks-and-legacy-container-apis.md#2025-04-18_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nimport * as React from 'React';\nimport {graphql, createFragmentContainer} from 'react-relay';\n\nfunction UserComponent(props: Props) {\n  const user = props.user;\n  return (\n    <>\n      <h1>{user.name}</h1>\n      <div>\n        <img src={user.profile_picture?.uri} />\n      </div>\n    </>\n  );\n}\n\nexport default createFragmentContainer(UserComponent, {\n  user: graphql`\n    fragment UserComponent_user on User {\n      name\n      age\n      profile_picture(scale: 2) {\n        uri\n      }\n    }\n  `,\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Local State - JavaScript\nDESCRIPTION: This snippet initializes local state for user notes in Relay, setting the initial notes to an empty array. It uses the 'commitLocalUpdate' function to ensure that the state is ready for querying.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/guides/client-schema-extensions.md#2025-04-18_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport {commitLocalUpdate} from 'react-relay';\n\ncommitLocalUpdate(environment, store => {\n  const user = store.getRoot().getLinkedRecord('viewer');\n\n  // initialize user notes to an empty array.\n  user.setLinkedRecords([], 'notes');\n});\n```\n\n----------------------------------------\n\nTITLE: Basic Mock Resolver Implementation in JavaScript\nDESCRIPTION: Example showing how to create simple mock resolvers for ID and String GraphQL types using MockPayloadGenerator\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/guides/testing-relay-components.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  ID() {\n    // Return mock value for a scalar filed with type ID\n    return 'my-id';\n  },\n  String() {\n    // Every scalar field with type String will have this default value\n    return \"Lorem Ipsum\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using a Resolver with Runtime Arguments in a Query\nDESCRIPTION: Shows how to use a Relay Resolver field with runtime arguments in a GraphQL query. The query passes both 'my_arg' and 'my_other_arg' parameters to the resolver field.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/guides/relay-resolvers.md#2025-04-18_snippet_6\n\nLANGUAGE: js\nCODE:\n```\nconst data = useLazyLoadQuery(graphql`\n    query myQuery($id: ID, $my_arg: String!) {\n        node(id: $id) {\n           ... on MyType {\n                my_resolver_field(my_arg: $my_arg, my_other_arg: 1)\n           }\n        }\n   }\n`, { id: \"some id\", my_arg: \"hello world!\"});\n```\n\n----------------------------------------\n\nTITLE: Running Relay Compiler - Watch Mode\nDESCRIPTION: Command to run the Relay Compiler in watch mode, which automatically regenerates artifacts whenever source code changes are detected.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/guided-tour/workflow.md#2025-04-18_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nyarn run relay --watch\n```\n\n----------------------------------------\n\nTITLE: Configuring Single Artifact Directory in package.json for Relay\nDESCRIPTION: This snippet shows how to specify the artifactDirectory in the Relay compiler configuration within package.json. This setting tells the compiler to store all artifacts in a single directory.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/guides/type-emission.md#2025-04-18_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  // package.json\n  \"relay\": {\n    \"artifactDirectory\": \"./src/__generated__\",\n    ...\n  },\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Legacy Pagination Container Implementation in React-Relay\nDESCRIPTION: Shows the original implementation using createPaginationContainer with class components. Includes pagination logic, loading states, and GraphQL fragment definitions with connection handling.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/migration-and-compatibility/relay-hooks-and-legacy-container-apis.md#2025-04-18_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as React from 'React';\nimport {graphql, createPaginationContainer} from 'react-relay';\n\nclass UserContainerComponent extends React.Component {\n  render(): React.Node {\n    const isLoading = this.props.relay.isLoading() || this.state.loading;\n    const hasMore = this.props.relay.hasMore();\n\n    return (\n      <>\n        <FriendsList friends={this.props.user?.friends} />\n        <Button\n          onClick={() => this.loadMore()}\n          disabled={!hasMore || isLoading}>\n          Load More\n          {isLoading && <InlineSpinner />}\n        </Button>\n      </>\n    );\n  }\n\n  loadMore() {\n    if (\n      !this.props.relay.hasMore() ||\n      this.props.relay.isLoading() ||\n      this.state.loading\n    ) {\n      return;\n    }\n\n    this.setState({loading: true});\n\n    this.props.relay.loadMore(5, () => this.setState({loading: false}));\n  }\n}\n\nexport default createPaginationContainer(\n  UserContainerComponent,\n  {\n    user: graphql`\n      fragment UserContainerComponent_user on User\n      @argumentDefinitions(count: {type: \"Int!\"}, cursor: {type: \"ID\"})\n      @refetchable(queryName: \"UserComponentRefetchQuery\") {\n        friends(first: $count, after: $cursor)\n          @connection(key: \"UserComponent_user_friends\") {\n          edges {\n            node {\n              name\n            }\n          }\n        }\n      }\n    `,\n  },\n  {\n    direction: 'forward',\n    getConnectionFromProps(props: Props) {\n      return props.user?.friends;\n    },\n    getFragmentVariables(vars, count) {\n      return {...vars, count};\n    },\n    getVariables(props: Props, {count, cursor}) {\n      return {\n        cursor,\n        count,\n      };\n    },\n    query: graphql`\n      query UserContainerComponentQuery {\n        viewer {\n          actor {\n            ... on User {\n              ...UserContainerComponent_user @arguments(count: 10)\n            }\n          }\n        }\n      }\n    `,\n  },\n);\n```\n\n----------------------------------------\n\nTITLE: Adding Type Refinement for Organization in a Fragment\nDESCRIPTION: Extension of the Actor fragment to include Organization-specific fields using GraphQL type refinement syntax.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/tutorial/interfaces-polymorphism.md#2025-04-18_snippet_4\n\nLANGUAGE: graphql\nCODE:\n```\nfragment PosterDetailsHovercardContentsBodyFragment on Actor {\n  name\n  joined\n  profilePicture {\n    ...ImageFragment\n  }\n  // change\n  ... on Organization {\n    organizationKind\n  }\n  // end-change\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Deferred Fragments in Relay\nDESCRIPTION: Example of testing components with deferred fragments using MockPayloadGenerator.generateWithDefer and handling async data loading.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/guides/testing-relay-components.md#2025-04-18_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\ntest('Data Render with @defer', () => {\n  const environment = createMockEnvironment();\n  const renderer = render(\n    <RelayEnvironmentProvider environment={environment}>\n      <ParentComponent />,\n    </RelayEnvironmentProvider>\n  );\n\n  act(() => {\n    const operation = environment.mock.getMostRecentOperation();\n    const mockData = MockPayloadGenerator.generateWithDefer(operation, null, {generateDeferredPayload: true});\n    environment.mock.resolve(mockData);\n\n    jest.runAllTimers();\n  });\n\n  expect(renderer.container.textContent).toEqual(['id', 'name']);\n});\n```\n\n----------------------------------------\n\nTITLE: Reading Fragment Data with Relay Resolvers in Typescript\nDESCRIPTION: This code demonstrates how to use `readFragment()` within a Relay Resolver to access data from a specified GraphQL fragment. The function takes a fragment key as input, reads the necessary data using `readFragment()`, and returns a derived value (in this case, a full name) based on the fragment data. This resolver ensures recomputation when data in the fragment changes.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/api-reference/relay-resolvers/runtime-functions.md#2025-04-18_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport {readFragment} from \"relay-runtime\";\n\n/**\n * @RelayResolver User.fullName: String\n * @rootFragment UserFullNameFragment\n */\nexport function fullName(key: UserFullNameFragment$key): string {\n  const user = readFragment(graphql`\n    fragment UserFullNameFragment on User {\n      firstName\n      lastName\n    }\n  `, key);\n  return `${user.firstName} ${user.lastName}`;\n}\n```\n\n----------------------------------------\n\nTITLE: Retaining Local Data\nDESCRIPTION: This snippet demonstrates how to retain local data that isn't being rendered by a component. `environment.retain` is used to prevent Relay from garbage collecting data referenced by the provided query. The `disposable.dispose()` call releases the retained data.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/guides/client-schema-extensions.md#2025-04-18_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport {createOperationDescriptor, getRequest} from 'relay-runtime';\n\n// Create a query that references that record\nconst localDataQuery = graphql`\n  query LocalDataQuery {\n    viewer {\n      notes {\n        __typename\n      }\n    }\n  }\n`;\n\n// Create an operation descriptor for the query\nconst request = getRequest(localDataQuery);\nconst operation = createOperationDescriptor(request, {} /* variables */);\n\n\n// Tell Relay to retain this operation so any data referenced by it isn't garbage collected\n// In this case, all the notes linked to the `viewer` will be retained\nconst disposable = environment.retain(operation);\n\n\n// Whenever you don't need that data anymore and it's okay for Relay to garbage collect it,\n// you can dispose of the retain\ndisposable.dispose();\n```\n\n----------------------------------------\n\nTITLE: Adding Fragment Arguments to ContactsList\nDESCRIPTION: Enhanced GraphQL fragment with argument definitions for search functionality.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/tutorial/refetchable-fragments.md#2025-04-18_snippet_2\n\nLANGUAGE: graphql\nCODE:\n```\nconst ContactsListFragment = graphql`\n  fragment ContactsListFragment on Viewer\n    @argumentDefinitions(\n      search: {type: \"String\", defaultValue: null}\n    )\n  {\n    contacts {\n      id\n      ...ContactRowFragment\n    }\n  }\n`;\n```\n\n----------------------------------------\n\nTITLE: Returning Scalar Type in Relay Resolver (TypeScript)\nDESCRIPTION: Demonstrates how to return a boolean scalar value from a Relay Resolver function for a Post.isValid field.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/guides/relay-resolvers/return-types.md#2025-04-18_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n/**\n * @RelayResolver Post.isValid: Boolean\n */\nexport function isValid(post: PostModel): boolean {\n  return post.content !== \"\" && post.author != null;\n}\n```\n\n----------------------------------------\n\nTITLE: Using useFragment Hook with GraphQL in a React Component\nDESCRIPTION: Demonstrates how to use Relay's useFragment hook to fetch user data with a GraphQL fragment. The component receives a fragment reference as props and uses it to fetch the user's name and profile picture, then renders them in the UI.\nSOURCE: https://github.com/facebook/relay/blob/main/packages/react-relay/README.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// @flow\n\nimport type {UserComponent_user$key} from 'UserComponent_user.graphql';\n\nconst React = require('react');\n\nconst {graphql, useFragment} = require('react-relay');\n\ntype Props = {\n  user: UserComponent_user$key,\n};\n\nfunction UserComponent(props: Props) {\n  const data = useFragment(\n    graphql`\n      fragment UserComponent_user on User {\n        name\n        profile_picture(scale: 2) {\n          uri\n        }\n      }\n    `,\n    props.user,\n  );\n\n  return (\n    <>\n      <h1>{data.name}</h1>\n      <div>\n        <img src={data.profile_picture?.uri} />\n      </div>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Simple User Name Resolver Implementation in TypeScript\nDESCRIPTION: A basic Relay resolver that retrieves the name field from a user model instance, returning a string value using Flow type annotations\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/guides/relay-resolvers/defining-fields.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * @RelayResolver User.name: String\n */\nexport function name(user: UserModel): string {\n  return user.name;\n}\n```\n\n----------------------------------------\n\nTITLE: Node Interface Introspection Query\nDESCRIPTION: Introspection query to verify correct implementation of the Node interface with its id field.\nSOURCE: https://github.com/facebook/relay/blob/main/website/spec/ObjectIdentification.md#2025-04-18_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\n{\n  __type(name: \"Node\") {\n    name\n    kind\n    fields {\n      name\n      type {\n        kind\n        ofType {\n          name\n          kind\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Inconsistent Server Response Example in GraphQL\nDESCRIPTION: Example showing how inconsistent server responses for the same ID can lead to conflicting field values in the normalized store.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/debugging/why-null.md#2025-04-18_snippet_2\n\nLANGUAGE: graphql\nCODE:\n```\n{\n  me {\n    id: 1\n    name: \"Alice\"\n  }\n  me_elsewhere_in_the_graph {\n    id: 1 # Note this is the same as the `me` field above...\n    name: null\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: React Component with Query Variables\nDESCRIPTION: Updated React component implementation that passes the posterID variable to useLazyLoadQuery\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/tutorial/queries-2.md#2025-04-18_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nexport default function PosterDetailsHovercardContents({\n  posterID,\n}: {\n  posterID: string;\n}): React.ReactElement {\n  const data = useLazyLoadQuery<QueryType>(\n    PosterDetailsHovercardContentsQuery,\n    {posterID},\n  );\n  return <PosterDetailsHovercardContentsBody poster={data.node} />;\n}\n```\n\n----------------------------------------\n\nTITLE: Force Fetching Data with Relay Root Container\nDESCRIPTION: Example showing how to force data fetching from the server using the forceFetch prop, even when data is available in the client store.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-classic/Classic-Guides-RootContainer.md#2025-04-18_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n<Relay.RootContainer\n  Component={ProfilePicture}\n  route={profileRoute}\n  forceFetch={true}\n/>\n```\n\n----------------------------------------\n\nTITLE: Generated ConcreteRequest Without Persisted Queries\nDESCRIPTION: Example of a generated ConcreteRequest structure before enabling persisted queries, showing full query text.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/guides/persisted-queries.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst node/*: ConcreteRequest*/ = (function(){\n//... excluded for brevity\nreturn {\n  \"kind\": \"Request\",\n  \"operationKind\": \"query\",\n  \"name\": \"TodoItemRefetchQuery\",\n  \"id\": null, // NOTE: id is null\n  \"text\": \"query TodoItemRefetchQuery(\\n  $itemID: ID!\\n) {\\n  node(id: $itemID) {\\n    ...TodoItem_item_2FOrhs\\n  }\\n}\\n\\nfragment TodoItem_item_2FOrhs on Todo {\\n    text\\n    isComplete\\n}\\n\",\n  //... excluded for brevity\n};\n})();\n```\n\n----------------------------------------\n\nTITLE: Basic GraphQL Friends Query Fragment\nDESCRIPTION: Example GraphQL fragment showing how to query friends data with edge properties using the Connection pattern\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/tutorial/connections-pagination.md#2025-04-18_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nfragment FriendsFragment1 on Viewer {\n  friends {\n    since // a property of the edge\n    node {\n      name // a property of the friend itself\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Composing GraphQL Fragments\nDESCRIPTION: Example of GraphQL fragment composition where one fragment includes another fragment, showing how fragments can be reused and combined.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v13.0.0/guided-tour/rendering/fragments.md#2025-04-18_snippet_4\n\nLANGUAGE: graphql\nCODE:\n```\nfragment UserFragment on User {\n  name\n  age\n  profile_picture(scale: 2) {\n    uri\n  }\n  ...AnotherUserFragment\n}\n\nfragment AnotherUserFragment on User {\n  username\n  ...FooUserFragment\n}\n```\n\n----------------------------------------\n\nTITLE: Observable Data Access Pattern\nDESCRIPTION: Shows how to synchronously access data from a Relay Observable, which differs from Promises by allowing immediate access to already-loaded data without suspending.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/glossary/glossary.md#2025-04-18_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst completedObservable = Observable.from(\"Relay is awesome!\");\nlet valueFromObservable;\nobservable.subscribe({\n  next: (value) => {\n    valueFromObservable = value;\n    /* this will execute in the same tick */\n  },\n});\nconsole.log(valueFromObservable); // logs out \"Relay is awesome!\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Resolver Context Type with Package Import in JSON\nDESCRIPTION: This JSON configuration shows how to specify the resolver context type from a package import for type checking in a Relay project.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/guides/relay-resolvers/context.md#2025-04-18_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"name\": \"project\",\n    \"language\": \"flow\",\n    \"resolverContextType\": {\n        \"name\": \"IResolverContextType\",\n        \"package\": \"@package/name\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic React Component for Best Friend Button\nDESCRIPTION: A React component that renders a button to assign a user as the viewer's best friend. This initial version shows the component structure and UI but lacks the implementation of the onClick handler.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/guided-tour/updating-data/imperatively-modifying-linked-fields.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// AssignBestFriendButton.react.js\nimport type {AssignBestFriendButton_user$key} from 'AssignBestFriendButton_user.graphql';\n\nconst {useFragment} = require('react-relay');\n\nexport default function AssignBestFriendButton({\n  someTypeRef: AssignBestFriendButton_user$key,\n}) {\n  const data = useFragment(graphql`\n    fragment AssignBestFriendButton_someType on SomeType {\n      user {\n        name\n        ...AssignableBestFriendButton_assignable_user\n      }\n    }\n  `, someTypeRef);\n\n  // We will replace this stub with the real thing below.\n  const onClick = () => {};\n\n  return (<button onClick={onClick}>\n    Declare {data.user?.name ?? 'someone with no name'} your new best friend!\n  </button>);\n}\n```\n\n----------------------------------------\n\nTITLE: Adding New Client-Only Types in GraphQL for Relay\nDESCRIPTION: Shows how to define new client-only types using GraphQL syntax. This example creates an enum 'FetchStatus', a type 'FetchState', and extends the 'Item' type with a new field.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/guided-tour/updating-data/client-only-data.md#2025-04-18_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\nenum FetchStatus {\n  FETCHED\n  PENDING\n  ERRORED\n}\n\n\ntype FetchState {\n  status: FetchStatus\n\n  started_by: User!\n}\n\nextend type Item {\n  fetch_state: FetchState\n}\n```\n\n----------------------------------------\n\nTITLE: Setting multiple linked records on a specific field\nDESCRIPTION: This snippet demonstrates how to set an array of linked records on a specific field using the setLinkedRecords method, allowing for mutation of the current record's linked records.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/api-reference/relay-runtime/store.md#2025-04-18_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nconst rootField = store.getRootField('rootField');\nconst newNode = store.create(/* ... */);\nconst newNodes = [...rootField.getLinkedRecords('nodes'), newNode];\nrootField.setLinkedRecords(newNodes, 'nodes');\n```\n\n----------------------------------------\n\nTITLE: Relay Fragment References with Flow\nDESCRIPTION: This code snippet demonstrates how Relay handles fragment references in Flow. The generated `ExampleQuery$data` type includes a `$fragmentSpreads` marker, indicating that the `artist` field can be used for components expecting a fragment spread of `ExampleFragmentComponent_artist$fragmentType`. This ensures that the correct fragment reference is passed to the child component at runtime.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v13.0.0/guides/type-emission.md#2025-04-18_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { ExampleFragmentComponent } from \"./ExampleFragmentComponent\"\n\n/**\n * import type { ExampleFragmentComponent_artist$fragmentType } from \"ExampleFragmentComponent_artist.graphql\";\n *\n * export type ExampleQuery$data = {\n *   +artist: ?{\n *     +name: ?string,\n *     +$fragmentSpreads: ExampleFragmentComponent_artist$fragmentType,\n *   }\n * };\n * export type ExampleQuery$variables = {\n *   +artistID: string,\n * }\n * export type ExampleQuery = {\n *   +variables: ExampleQuery$variables,\n *   +response: ExampleQuery$data,\n * }\n */\n\n// data is of type ExampleQuery$data\nconst data = useLazyLoadQuery(\n  graphql`\n    query ExampleQuery($artistID: ID!) {\n      artist(id: $artistID) {\n        name\n        ...ExampleFragmentComponent_artist\n      }\n    }\n  `,\n  {artistID: 'banksy'},\n);\n\n// Here only `data.artist.name` is directly visible,\n// the marker prop $fragmentSpreads indicates that `data.artist`\n// can be used for the component expecting this fragment spread.\nreturn <ExampleFragmentComponent artist={data.artist} />;\n```\n\n----------------------------------------\n\nTITLE: Using @alias with @required for Field Groups\nDESCRIPTION: Demonstrates grouping required fields using @alias and @required directives\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/guides/alias-directive.md#2025-04-18_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nfunction MyUser({userKey}) {\n  const user = useFragment(graphql`\n    fragment MyFragment on User {\n      id\n      ... @alias(as: \"requiredFields\") {\n        name @required(action: NONE)\n        email @required(action: NONE)\n      }\n    }`, userKey);\n\n  if(user.requiredFields == null) {\n    return `Missing required fields for user ${user.id}`;\n  }\n  return `Hello ${user.requiredFields.name} (${user.requiredFields.email}).!`;\n}\n```\n\n----------------------------------------\n\nTITLE: Getting a value from a record\nDESCRIPTION: This snippet shows how to get the value of a specific field from the current record using the getValue method, allowing for field retrieval based on the GraphQL document.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/api-reference/relay-runtime/store.md#2025-04-18_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nconst name = viewer.getValue('name');\n```\n\n----------------------------------------\n\nTITLE: Refetching Node Data by ID\nDESCRIPTION: Query showing how to refetch faction data using the node interface with a specific ID.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/guides/graphql-server-specification.md#2025-04-18_snippet_2\n\nLANGUAGE: graphql\nCODE:\n```\nquery RebelsRefetchQuery {\n  node(id: \"RmFjdGlvbjox\") {\n    id\n    ... on Faction {\n      name\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining GraphQL PosterByline Fragment in TypeScript\nDESCRIPTION: This code snippet defines a GraphQL fragment for the PosterByline component in TypeScript. The fragment retrieves the actor's name and profile picture, using the ImageFragment to enhance image handling. This makes the component's data dependencies clear and maintainable.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/tutorial/fragments-1.md#2025-04-18_snippet_7\n\nLANGUAGE: graphql\nCODE:\n```\nconst PosterBylineFragment = graphql`\n  fragment PosterBylineFragment on Actor {\n    name\n    profilePicture {\n      // change-line\n      ...ImageFragment\n    }\n  }\n`;\n```\n\n----------------------------------------\n\nTITLE: Fragment with Local Arguments\nDESCRIPTION: Demonstrates how to declare and use local fragment arguments using @argumentDefinitions directive.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/guided-tour/rendering/variables.md#2025-04-18_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nfunction TaskView(props) {\n  const data = useFragment(\n    graphql`\n      fragment TaskView_task on Task\n        @argumentDefinitions(showDetailedResults: {type: \"Boolean!\"}) {\n        name\n        is_completed\n        ... @include(if: $showDetailedResults) {\n          description\n        }\n      }\n    `,\n    props.task,\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring package.json for Local Persisting\nDESCRIPTION: Scripts configuration in package.json for running the local persisting server alongside Relay compiler.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/guides/persisted-queries.md#2025-04-18_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n\"scripts\": {\n  \"persist-server\": \"node ./relayLocalPersisting.js\",\n  \"relay\": \"relay-compiler\"\n}\n}\n```\n\n----------------------------------------\n\nTITLE: Server-Received GraphQL Query with Supported Argument for 3D\nDESCRIPTION: This GraphQL query shows how the server receives the client's query, including the automatically generated 'supported' argument based on the provided fragments.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/guides/data-driven-dependencies/server-3d.md#2025-04-18_snippet_8\n\nLANGUAGE: graphql\nCODE:\n```\nfragment Comment_comment on Comment {\n  comment_content_renderer(supported: [\"CommentMarkdownRenderer\", \"CommentPlaintextRenderer\"]) {\n    ... on CommentMarkdownRenderer {\n       ...CommentMarkdownRenderer_comment\n       __component: js(\"CommentMarkdownRenderer.react\")\n       __fragment: js(\"CommentMarkdownRenderer_comment$normalization.graphql\")\n    }\n    ... on CommentPlaintextRenderer {\n       ...CommentPlaintextRenderer_comment\n       __component: js(\"CommentPlaintextRenderer.react\")\n       __fragment: js(\"CommentPlaintextRenderer_comment$normalization.graphql\")\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Relay Component Fragment\nDESCRIPTION: This snippet defines two GraphQL fragments used in a React component. These fragments specify the data requirements for the `DictionaryComponent`, focusing on the `Word` and `WordDefinition` types. The Relay compiler will generate corresponding files in the `__generated__` directory.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/guides/compiler.md#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst DictionaryWordFragment = graphql`\n  fragment DictionaryComponent_word on Word {\n    id\n    definition {\n      ...DictionaryComponent_definition\n    }\n  }\n`\n\nconst DictionaryDefinitionFragment = graphql`\n  fragment DictionaryComponent_definition on WordDefinition {\n    text\n    image\n  }\n`\n```\n\n----------------------------------------\n\nTITLE: Inconsistent Server Response Example in GraphQL\nDESCRIPTION: This GraphQL query illustrates an inconsistent server response where the same user ID has conflicting values for the 'name' field in different parts of the response.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/debugging/why-null.md#2025-04-18_snippet_2\n\nLANGUAGE: graphql\nCODE:\n```\n{\n  me {\n    id: 1\n    name: \"Alice\"\n  }\n  me_elsewhere_in_the_graph {\n    id: 1 # Note this is the same as the `me` field above...\n    name: null\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: JavaScript Representation of a Field Error with @catch\nDESCRIPTION: This JavaScript object represents the response of a GraphQL query where the 'name' field contains an error, handled using the @catch directive. It demonstrates how the error is returned in the data object, including the message and path of the error.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/guides/catch-directive.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    viewer: {\n        name: {\n            ok: false,\n            errors: [\n                {\n                    message: \"Couldn't get name\",\n                    path: ['viewer', 'name']\n                }\n            ]\n        }\n        age: 39\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Publishing Data to the Relay Store\nDESCRIPTION: Diagram showing how normalized data is published to the Relay store. This step updates records in the RecordSource but does not immediately notify subscriptions of changes.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/principles-and-architecture/runtime-architecture.md#2025-04-18_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n                        publish\n                           │\n                           ▼\n             ┌───────────────────────────┐\n             │           Store           │\n             │ ┌───────────────────────┐ │\n             │ │     RecordSource      │ │\n             │ │                       │ │\n             │ │┌──────┐┌──────┐┌─────┐│ │\n             │ ││Record││Record││ ... ││ │ <--- records are updated\n             │ │└──────┘└──────┘└─────┘│ │\n             │ └───────────────────────┘ │\n             │ ┌───────────────────────┐ │\n             │ │     Subscriptions     │ │\n             │ │                       │ │\n             │ │┌──────┐┌──────┐┌─────┐│ │\n             │ ││ Sub. ││ Sub. ││ ... ││ │ <--- subscriptions do not fire yet\n             │ │└──────┘└──────┘└─────┘│ │\n             │ └───────────────────────┘ │\n             └───────────────────────────┘\n```\n\n----------------------------------------\n\nTITLE: Defining Multiple Relay Resolvers in a Single JavaScript File\nDESCRIPTION: Illustrates the new ability to define multiple Relay Resolvers in a single file using named exports, showcasing the simplified docblock tags for resolver functions.\nSOURCE: https://github.com/facebook/relay/blob/main/website/blog/2023-03-30-relay-15.mdx#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * @RelayResolver User.favorite_page: Page\n * @rootFragment favoritePageFragment\n */\nfunction usersFavoritePage(){\n  ...\n}\n\n/**\n * @RelayResolver User.best_friend: RelayResolverValue\n * @rootFragment bestFriendFragment\n */\nfunction usersBestFriend(){\n  ...\n}\n\nmodule.exports = {\n  usersFavoritePage,\n  usersBestFriend\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Story Type in GraphQL Schema\nDESCRIPTION: This snippet defines a GraphQL type named 'Story' with various fields such as 'id', 'title', and 'poster'. The 'poster' field is of type 'Actor', which is an interface that can represent different kinds of entities.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/tutorial/interfaces-polymorphism.md#2025-04-18_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\ntype Story {\n  id: ID!\n  title: String\n  summary: String\n  createdAt: Date\n  poster: Actor\n  image: Image\n}\n```\n\n----------------------------------------\n\nTITLE: Marking a Field as Deprecated with @deprecated\nDESCRIPTION: This code snippet demonstrates how to mark a field as deprecated using the `@deprecated` tag. The tag may be followed by a string which will be used as the deprecation reason. Deprecated fields receive special treatment in the editor if you are using the Relay VSCode extension.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/api-reference/relay-resolvers/docblock-format.md#2025-04-18_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\n/**\n * @RelayResolver User.name: String\n * @deprecated Use `fullName` instead.\n */\nexport function name(user: UserModel): string {\n  return user.name;\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Single Fragment with useFragment Hook\nDESCRIPTION: Shows how to render data from a fragment using the useFragment hook in a React component with Flow types.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/guided-tour/rendering/fragments.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport type {UserComponent_user$key} from 'UserComponent_user.graphql';\n\nconst React = require('React');\n\nconst {graphql, useFragment} = require('react-relay');\n\ntype Props = {\n  user: UserComponent_user$key,\n};\n\nfunction UserComponent(props: Props) {\n  const data = useFragment(\n    graphql`\n      fragment UserComponent_user on User {\n        name\n        profile_picture(scale: 2) {\n          uri\n        }\n      }\n    `,\n    props.user,\n  );\n\n  return (\n    <>\n      <h1>{data.name}</h1>\n      <div>\n        <img src={data.profile_picture?.uri} />\n      </div>\n    </>\n  );\n}\n\nmodule.exports = UserComponent;\n```\n\n----------------------------------------\n\nTITLE: Basic Mock Resolver Implementation in JavaScript\nDESCRIPTION: Example showing basic mock resolvers for ID and String GraphQL types. These resolvers provide default values for scalar fields in test data.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/guides/testing-relay-components.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  ID() {\n    // Return mock value for a scalar filed with type ID\n    return 'my-id';\n  },\n  String() {\n    // Every scalar field with type String will have this default value\n    return \"Lorem Ipsum\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: MutationParameters Type Definition\nDESCRIPTION: Describes the structure of `MutationParameters`, which defines the shape of the input to a mutation. It specifies the required `response` and `variables` fields, along with the optional `rawResponse` field.  These fields represent the expected response type, the variables passed to the mutation, and the raw response from the server, respectively.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/api-reference/types/MutationConfig.md#2025-04-18_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n* An object with the following fields:\n  * `response`: An object\n  * `variables`: An object\n  * `rawResponse`: An optional object\n```\n\n----------------------------------------\n\nTITLE: Resolver with Root Fragment and Argument (TypeScript)\nDESCRIPTION: This TypeScript code defines a Relay resolver function `fancyGreeting` that uses a root fragment `UserFancyGreetingFragment`. The fragment defines an argument `salutation` using the `@argumentDefinitions` directive. The resolver then reads the fragment data, including the `greet` field which is passed the `salutation` argument defined in the fragment.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/guides/relay-resolvers/field-arguments.md#2025-04-18_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * @RelayResolver User.fancyGreeting: String\n * @rootFragment UserFancyGreetingFragment\n */\nexport function fancyGreeting(key: UserFancyGreetingFragment$key): string {\n  const user = readFragment(graphql`\n    fragment UserFancyGreetingFragment on User @argumentDefinitions(\n      salutation: {type: \"String\"},\n    ) {\n      name\n      greet(salutation: $salutation)\n    }\n  `, key);\n  return `${user.name} says ${user.greet}`;\n}\n```\n\n----------------------------------------\n\nTITLE: Assigning to Interface with Uncertain Implementation in Relay\nDESCRIPTION: This example demonstrates how to assign to a field with an interface type when the source is not guaranteed to implement that interface, using validators in Relay.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/guided-tour/updating-data/imperatively-modifying-linked-fields.md#2025-04-18_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nimport {validate as validateActor} from 'Foo_actor.graphql';\n\ngraphql`\n  fragment Foo_actor on Actor @assignable {\n    __typename\n  }\n`;\n\nconst data = useFragment(graphql`\n  fragment Foo_query on Query {\n    node(id: \"4\") {\n      ...Foo_actor\n    }\n  }\n`, queryRef);\n\nconst environment = useRelayEnvironment();\nconst onClick = () => {\n  commitLocalUpdate(environment, store => {\n    const {updatableData} = store.readUpdatableQuery(\n      graphql`\n        query FooUpdatableQuery @updatable {\n          viewer {\n            actor {\n              ...Foo_actor\n            }\n          }\n        }\n      `,\n      {}\n    );\n\n    if (updatableData.viewer != null && data.node != null) {\n      const validActor = validateActor(data.node);\n      if (validActor !== false) {\n        updatableData.viewer.actor = validActor;\n      }\n    }\n  });\n};\n```\n\n----------------------------------------\n\nTITLE: GraphQL Query for Stories\nDESCRIPTION: A GraphQL query to fetch a list of stories with their ID, text, and like count.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v13.0.0/principles-and-architecture/thinking-in-graphql.md#2025-04-18_snippet_7\n\nLANGUAGE: graphql\nCODE:\n```\nquery { stories { id, text, likeCount } }\n```\n\n----------------------------------------\n\nTITLE: Using altText in Image Component using React\nDESCRIPTION: This code snippet demonstrates the usage of `altText` in the `Image` component. The `altText` is obtained through Relay's `useFragment` and is set as the value for the `alt` attribute on the `<img>` tag.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/tutorial/fragments-1.md#2025-04-18_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nfunction Image({image}) {\n  // ...\n  <img\n    // change-line\n    alt={data.altText}\n  //...\n}\n```\n\n----------------------------------------\n\nTITLE: Extending GraphQL Schema for Best Friend Field\nDESCRIPTION: A GraphQL schema extension that adds a best_friend field to the Viewer type, which references a User type.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/guided-tour/updating-data/imperatively-modifying-linked-fields.md#2025-04-18_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nextend type Viewer {\n  best_friend: User,\n}\n```\n\n----------------------------------------\n\nTITLE: GraphQL JSON Response with Next Page Info\nDESCRIPTION: This JSON snippet shows the response when querying the next set of ships using cursors, demonstrating a typical output with node data and cursor strings, as well as indicating if more pages are available using 'PageInfo'.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-experimental/GraphQL-ServerSpecification.md#2025-04-18_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"rebels\": {\n    \"name\": \"Alliance to Restore the Republic\",\n    \"originalShips\": {\n      \"edges\": [\n        {\n          \"node\": {\n            \"name\": \"X-Wing\"\n          }\n        },\n        {\n          \"node\": {\n            \"name\": \"Y-Wing\"\n          }\n        }\n      ],\n      \"pageInfo\": {\n        \"hasNextPage\": true\n      }\n    },\n    \"moreShips\": {\n      \"edges\": [\n        {\n          \"node\": {\n            \"name\": \"A-Wing\"\n          }\n        },\n        {\n          \"node\": {\n            \"name\": \"Millenium Falcon\"\n          }\n        },\n        {\n          \"node\": {\n            \"name\": \"Home One\"\n          }\n        }\n      ],\n      \"pageInfo\": {\n        \"hasNextPage\": false\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using commitPayload in Relay to Write Query Data to Store\nDESCRIPTION: This snippet illustrates how to use commitPayload to directly write a query payload to the Relay store. It creates an OperationDescriptor for a query with variables, prepares a payload, and commits it to the environment.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/guided-tour/updating-data/local-data-updates.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport type {FooQueryRawResponse} from 'FooQuery.graphql'\n\nconst {createOperationDescriptor} = require('relay-runtime');\n\nconst operationDescriptor = createOperationDescriptor(FooQuery, {\n  id: 'an-id',\n  otherVariable: 'value',\n});\n\nconst payload: FooQueryRawResponse = {...};\n\nenvironment.commitPayload(operation, payload);\n```\n\n----------------------------------------\n\nTITLE: Implementing Missing Field Handlers in Relay\nDESCRIPTION: Configuration of missingFieldHandlers in a Relay environment to enable data reuse between different queries. This example handles 'user' and 'story' fields, returning appropriate IDs for linked records.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/guided-tour/reusing-cached-data/filling-in-missing-data.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst {ROOT_TYPE, Environment} = require('relay-runtime');\n\nconst missingFieldHandlers = [\n  {\n    handle(field, record, argValues): ?string {\n      if (\n        record != null &&\n        record.__typename === ROOT_TYPE &&\n        field.name === 'user' &&\n        argValues.hasOwnProperty('id')\n      ) {\n        // If field is user(id: $id), look up the record by the value of $id\n        return argValues.id;\n      }\n      if (\n        record != null &&\n        record.__typename === ROOT_TYPE &&\n        field.name === 'story' &&\n        argValues.hasOwnProperty('story_id')\n      ) {\n        // If field is story(story_id: $story_id), look up the record by the\n        // value of $story_id.\n        return argValues.story_id;\n      }\n      return undefined;\n    },\n    kind: 'linked',\n  },\n];\n\nconst environment = new Environment({/*...*/, missingFieldHandlers});\n```\n\n----------------------------------------\n\nTITLE: Defining GraphQL Schema with List of Users\nDESCRIPTION: GraphQL schema extension that defines a best_friends field as a list of User objects. This represents the schema that will be used in subsequent examples for assigning users to a list.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/guided-tour/updating-data/imperatively-modifying-linked-fields.md#2025-04-18_snippet_6\n\nLANGUAGE: graphql\nCODE:\n```\nextend type Viewer {\n  # We are now defined a \"best_friends\" field instead of a \"best_friend\" field\n  best_friends: [User!],\n}\n```\n\n----------------------------------------\n\nTITLE: GraphQL Query with Root Fragment Argument (GraphQL)\nDESCRIPTION: This GraphQL query `MyQuery` includes a `fancyGreeting` field that implicitly takes a `salutation` argument via the underlying fragment. The query defines a variable `$salutation` of type `String!` which is then implicitly passed as an argument to the `fancyGreeting` field through the fragment definition.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/guides/relay-resolvers/field-arguments.md#2025-04-18_snippet_3\n\nLANGUAGE: graphql\nCODE:\n```\nquery MyQuery($salutation: String!) {\n  me {\n    fancyGreeting(salutation: $salutation)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Advanced Mock Resolver with Scalar and Abstract Types\nDESCRIPTION: Demonstrates mock resolver implementation for Float, Boolean, and Node types using @relay_test_operation directive\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/guides/testing-relay-components.md#2025-04-18_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  Float() {\n    return 123.456;\n  },\n  Boolean(context) {\n    if (context.name === 'can_edit') {\n      return true;\n    }\n    return false;\n  },\n  Node() {\n    return {\n      __typename: 'User',\n      id: 'my-user-id',\n    };\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a GraphQL Field with @RelayResolver\nDESCRIPTION: This code snippet demonstrates how to define a new field on a GraphQL type using the `@RelayResolver` tag. The resolver function `name` accepts the model/object returned by the type resolver as its argument and returns the value of the field. The function name matches the field name specified in the tag.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/api-reference/relay-resolvers/docblock-format.md#2025-04-18_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n/**\n * @RelayResolver User.name: String\n */\nexport function name(user: UserModel): string {\n  return user.name;\n}\n```\n\n----------------------------------------\n\nTITLE: Using @arguments Directive in Relay GraphQL Queries\nDESCRIPTION: The @arguments directive is used to pass arguments to a fragment that was defined using @argumentDefinitions. This example shows how to pass count and userID arguments to the TodoList_list fragment.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/api-reference/graphql/graphql-directives.md#2025-04-18_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nquery TodoListQuery($userID: ID) {\n  ...TodoList_list @arguments(count: $count, userID: $userID) # Pass arguments here\n}\n```\n\n----------------------------------------\n\nTITLE: Example GraphQL Query Response JSON\nDESCRIPTION: Sample JSON response from executing a GraphQL query. This shows the structure of data returned from the server after using the query variables.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v13.0.0/guided-tour/rendering/variables.md#2025-04-18_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"user\": {\n      \"id\": \"4\",\n      \"name\": \"Mark Zuckerberg\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Relay Fragment References with TypeScript\nDESCRIPTION: This code snippet demonstrates Relay's fragment reference handling using TypeScript. The generated `ExampleQuery$data` type includes a ` $fragmentSpreads` marker, indicating that the `artist` field can be used for components expecting a fragment spread of `ExampleFragmentComponent_artist$fragmentType`. This ensures that the correct fragment reference is passed to the child component at runtime, and leverages TypeScript's type system for compile-time safety.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v13.0.0/guides/type-emission.md#2025-04-18_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { ExampleFragmentComponent } from \"./ExampleFragmentComponent\"\n\n/**\n * import { ExampleFragmentComponent_artist$fragmentType } from \"ExampleFragmentComponent_artist.graphql\";\n *\n * export type ExampleQuery$data = {\n *   readonly artist?: {\n *     readonly name: ?string,\n *     readonly \" $fragmentSpreads\": ExampleFragmentComponent_artist$fragmentType\n *   }\n * }\n * export type ExampleQuery$variables = {\n *   readonly artistID: string\n * }\n * export type ExampleQuery = {\n *   readonly variables: ExampleQuery$variables\n *   readonly response: ExampleQuery$data\n * }\n */\nimport { ExampleQuery } from \"__generated__/ExampleQuery.graphql\"\n\n// data is of type ExampleQuery$data\nconst data = useLazyLoadQuery<ExampleQuery>(\n  graphql`\n    query ExampleQuery($artistID: ID!) {\n      artist(id: $artistID) {\n        name\n        ...ExampleFragmentComponent_artist\n      }\n    }\n  `,\n  {artistID: 'banksy'},\n);\n\n// Here only `data.artist.name` is directly visible,\n// the marker prop $fragmentSpreads indicates that `data.artist`\n// can be used for the component expecting this fragment spread.\nreturn <ExampleFragmentComponent artist={data.artist} />;\n```\n\n----------------------------------------\n\nTITLE: Configuring Network Layer with subscriptions-transport-ws for GraphQL Subscriptions in JavaScript\nDESCRIPTION: This snippet shows an alternative configuration of the Network Layer using the legacy subscriptions-transport-ws library. It creates a SubscriptionClient and defines a subscribe function that converts the library's observable to Relay's Observable type.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/guided-tour/updating-data/graphql-subscriptions.md#2025-04-18_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport {\n    ...\n    Network,\n    Observable\n} from 'relay-runtime';\nimport { SubscriptionClient } from 'subscriptions-transport-ws';\n\nconst subscriptionClient = new SubscriptionClient('ws://localhost:3000', {\n  reconnect: true,\n});\n\nconst subscribe = (request, variables) => {\n  const subscribeObservable = subscriptionClient.request({\n    query: request.text,\n    operationName: request.name,\n    variables,\n  });\n  // Important: Convert subscriptions-transport-ws observable type to Relay's\n  return Observable.from(subscribeObservable);\n};\n\nconst network = Network.create(fetchQuery, subscribe);\n```\n\n----------------------------------------\n\nTITLE: Adding StoryCommentsSection to Story Component\nDESCRIPTION: Import and integrate the StoryCommentsSection component into the Story component, enabling comment display with fragment composition\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/tutorial/connections-pagination.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport StoryCommentsSection from './StoryCommentsSection';\n\nfunction Story({story}) {\n  const data = useFragment(StoryFragment, story);\n  return (\n    <Card>\n      <Heading>{data.title}</Heading>\n      <PosterByline person={data.poster} />\n      <Timestamp time={data.posted_at} />\n      <Image image={data.image} />\n      <StorySummary summary={data.summary} />\n      <StoryCommentsSection story={data} />\n    </Card>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: GraphQL Type with Node Interface\nDESCRIPTION: This snippet shows how to define a GraphQL type that implements the Node interface, which is required for types that need to be refetchable in Relay. The Node interface indicates that the type has a stable and unique ID.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/tutorial/refetchable-fragments.md#2025-04-18_snippet_11\n\nLANGUAGE: graphql\nCODE:\n```\ntype Person implements Node {\n  id: ID!\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: @arguments directive in GraphQL\nDESCRIPTION: The `@arguments` directive allows for passing arguments to a fragment defined using `@argumentDefinitions`. This example demonstrates how to use `@arguments` in a query to pass user-specific arguments.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/api-reference/graphql/graphql-directives.md#2025-04-18_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nquery TodoListQuery($userID: ID) {\n  ...TodoList_list @arguments(count: $count, userID: $userID) # Pass arguments here\n}\n```\n\n----------------------------------------\n\nTITLE: Invalidating a Record in Relay Store\nDESCRIPTION: Example of invalidating a record in the Relay Store using the invalidateRecord method of RecordProxy. This causes queries referencing the record to be considered stale.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/api-reference/relay-runtime/store.md#2025-04-18_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nconst record = store.get('4');\nrecord.invalidateRecord();\n```\n\n----------------------------------------\n\nTITLE: Defining a Weak Type with RelayResolver in TypeScript\nDESCRIPTION: This snippet provides a TypeScript example of defining a weak type with the `@RelayResolver` and `@weak` annotations. A weak type does not have a unique identifier, which requires resolvers to return fully populated model objects. The `ProfilePicture` type includes fields for `url`, `height`, and `width`.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/guides/relay-resolvers/defining-types.md#2025-04-18_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\n/**\n * @RelayResolver ProfilePicture\n * @weak\n */\nexport type ProfilePicture = { url: string, height: number, width: number };\n```\n\n----------------------------------------\n\nTITLE: Using usePreloadedQuery with Relay Hooks\nDESCRIPTION: Shows how to render a component with a preloaded query using usePreloadedQuery Hook, which follows the render-as-you-fetch pattern for better performance.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v13.0.0/migration-and-compatibility/relay-hooks-and-legacy-container-apis.md#2025-04-18_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport * as React from 'React';\nimport {graphql, usePreloadedQuery} from 'react-relay';\n\nexport default function UserPopover(props) {\n  const data = usePreloadedQuery(\n    graphql`\n      query UserPopoverQuery($id: ID!) {\n        user(id: $id) {\n          name\n        }\n      }\n    `,\n    props.queryRef,\n  );\n\n return <h1>{data.user?.name}</h1>;\n}\n```\n\n----------------------------------------\n\nTITLE: Returning JavaScript Values in Relay Resolver (TypeScript)\nDESCRIPTION: Illustrates how to return an arbitrary JavaScript value (Date) from a Relay Resolver using the RelayResolverValue type. This is considered an escape hatch for special cases.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/guides/relay-resolvers/return-types.md#2025-04-18_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\n/**\n * @RelayResolver Post.publishDate: RelayResolverValue\n */\nexport function metadata(post: PostModel): Date {\n  return post.publishDate;\n}\n```\n\n----------------------------------------\n\nTITLE: Using Fragment Arguments in Parent Components\nDESCRIPTION: Shows how to pass size arguments when spreading ImageFragment in Story and PosterByline components.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/tutorial/fragments-1.md#2025-04-18_snippet_10\n\nLANGUAGE: graphql\nCODE:\n```\nconst StoryFragment = graphql`\n  fragment StoryFragment on Story {\n    title\n    summary\n    postedAt\n    poster {\n      ...PosterBylineFragment\n    }\n    thumbnail {\n      ...ImageFragment @arguments(width: 400)\n    }\n  }\n`;\n```\n\nLANGUAGE: graphql\nCODE:\n```\nconst PosterBylineFragment = graphql`\n  fragment PosterBylineFragment on Actor {\n    name\n    profilePicture {\n      ...ImageFragment @arguments(width: 60, height: 60)\n    }\n  }\n`;\n```\n\n----------------------------------------\n\nTITLE: Creating a Record in JavaScript\nDESCRIPTION: Shows how to create a new record in the Relay store using the RecordSourceProxy.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/api-reference/relay-runtime/store.md#2025-04-18_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\nconst record = store.create(dataID, 'Todo');\n```\n\n----------------------------------------\n\nTITLE: Installing Relay Compiler\nDESCRIPTION: Command to install the Relay Compiler as a development dependency, which is required for ahead-of-time compilation of GraphQL queries.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/getting-started/installation-and-setup.md#2025-04-18_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nyarn add --dev relay-compiler\n```\n\n----------------------------------------\n\nTITLE: Flow-based Relay Resolver with Implicit Typing\nDESCRIPTION: An alternative implementation of a Relay resolver using Flow type annotations, demonstrating a more concise approach to defining resolver functions\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/guides/relay-resolvers/defining-fields.md#2025-04-18_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport {TypeName} from 'TypeObject';\n\n/**\n * @RelayResolver\n */\nexport function fieldName(user: TypeName): string {\n  return user.name;\n}\n```\n\n----------------------------------------\n\nTITLE: Passing Variables to Mutation Fragments in Relay\nDESCRIPTION: Shows how to pass variables from an outer fragment to a mutation's fragment builder using the getFragment method.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-classic/Classic-APIReference-Mutation.md#2025-04-18_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nclass Movie extends React.Component {\n  /* ... */\n  static fragments = {\n    movie: (variables) => Relay.QL`\n      fragment on Movie {\n        posterImage(lang: $lang) { url },\n        trailerVideo(format: $format, lang: $lang) { url },\n        ${RentMovieMutation.getFragment('movie', {\n          format: variables.format,\n          lang: variables.lang,\n        })},\n      }\n    `,\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Using GraphQL Literals in Relay\nDESCRIPTION: GraphQL literals are created using the graphql tag function and are pre-processed at build time into GraphQLTaggedNode objects containing AST representations of the queries.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/glossary/glossary.md#2025-04-18_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\ngraphql`...`\n```\n\n----------------------------------------\n\nTITLE: Composing Fragments with Type-Safe References in Flow\nDESCRIPTION: Shows how to compose fragments with type-safe references in Flow. The example demonstrates a parent component that spreads a child fragment and passes the correct fragment reference.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/guides/type-emission.md#2025-04-18_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ExampleFragmentComponent } from \"./ExampleFragmentComponent\"\n\n/**\n * import type { ExampleFragmentComponent_artist$fragmentType } from \"ExampleFragmentComponent_artist.graphql\";\n *\n * export type ExampleQuery$data = {\n *   +artist: ?{\n *     +name: ?string,\n *     +$fragmentSpreads: ExampleFragmentComponent_artist$fragmentType,\n *   }\n * };\n * export type ExampleQuery$variables = {\n *   +artistID: string,\n * }\n * export type ExampleQuery = {\n *   +variables: ExampleQuery$variables,\n *   +response: ExampleQuery$data,\n * }\n */\n\n// data is of type ExampleQuery$data\nconst data = useLazyLoadQuery(\n  graphql`\n    query ExampleQuery($artistID: ID!) {\n      artist(id: $artistID) {\n        name\n        ...ExampleFragmentComponent_artist\n      }\n    }\n  `,\n  {artistID: 'banksy'},\n);\n\n// Here only `data.artist.name` is directly visible,\n// the marker prop $fragmentSpreads indicates that `data.artist`\n// can be used for the component expecting this fragment spread.\nreturn <ExampleFragmentComponent artist={data.artist} />;\n```\n\n----------------------------------------\n\nTITLE: Reading Inline Data with Relay and GraphQL\nDESCRIPTION: This code snippet demonstrates how to use `readInlineData` with a GraphQL fragment annotated with `@inline` to read data outside of the React render phase.  It defines a function `processItemData` that takes an `itemRef`, extracts data using `readInlineData`, and sends it to a third-party API. The GraphQL fragment specifies the fields to be read from the `Item` object.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/api-reference/graphql/graphql-directives.md#2025-04-18_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport {graphql, readInlineData} from 'react-relay';\n\n// non-React function called from React\nfunction processItemData(itemRef) {\n  const item = readInlineData(\n    graphql`\n      fragment processItemData_item on Item @inline {\n        title\n        price\n        creator {\n          name\n        }\n      }\n    `,\n    itemRef,\n  );\n  sendToThirdPartyApi({\n    title: item.title,\n    price: item.price,\n    creatorName: item.creator.name,\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Querying a list of contacts with GraphQL\nDESCRIPTION: This GraphQL query retrieves a list of contacts for the viewer, including their ID and name. The `contacts` field returns a list of edges.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/tutorial/arrays-lists.md#2025-04-18_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nquery MyQuery {\n  viewer {\n    contacts { // List of edges\n      id // field on a single item\n      name\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Connection Records using __id Field in Relay\nDESCRIPTION: This snippet shows how to query for a connection's __id field and use it to access the connection record in the Relay store. The __id is automatically added by Relay to identify connection records.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/guided-tour/list-data/updating-connections.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst fragmentData = useFragment(\n  graphql`\n    fragment StoryComponent_story on Story {\n      comments @connection(key: \"StoryComponent_story_comments_connection\") {\n        # Query for the __id field\n        __id\n\n        # ...\n      }\n    }\n  `,\n  props.story,\n);\n\n// Get the connection record id\nconst connectionID = fragmentData?.comments?.__id;\n```\n\n----------------------------------------\n\nTITLE: Continuing Pagination of Rebel Ships\nDESCRIPTION: This snippet demonstrates continuing the pagination for the Rebel faction's ships by requesting the next set of ships after a given cursor. This showcases how Relay manages pagination effectively.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/guides/graphql-server-specification.md#2025-04-18_snippet_7\n\nLANGUAGE: graphql\nCODE:\n```\nquery EndOfRebelShipsQuery {\n  rebels {\n    name\n    ships(first: 3 after: \"YXJyYXljb25uZWN0aW9uOjE=\") {\n      edges {\n        cursor\n        node {\n          name\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining GraphQL Subscription Configuration Type in TypeScript\nDESCRIPTION: Type definition for GraphQLSubscriptionConfig that specifies the structure for configuring GraphQL subscriptions. Includes options for cache configuration, subscription query, variables, callbacks for completion/errors/updates, and store updater function.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/api-reference/types/GraphQLSubscriptionConfig.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype GraphQLSubscriptionConfig<TSubscriptionPayload> = {\n  cacheConfig?: CacheConfig;\n  subscription: GraphQLTaggedNode;\n  variables: any;\n  onCompleted?: () => void;\n  onError?: (error: Error) => void;\n  onNext?: (payload: TSubscriptionPayload) => void;\n  updater?: SelectorStoreUpdater;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining CacheConfig Type for Relay Query Configuration\nDESCRIPTION: This TypeScript interface defines the CacheConfig type used in Relay for configuring query caching and update behavior. It includes optional fields for forcing queries, setting up polling, configuring live queries, adding metadata, and specifying transaction IDs.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/api-reference/types/CacheConfig.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype CacheConfig = {\n  force?: boolean;\n  poll?: number;\n  liveConfigId?: string;\n  metadata?: object;\n  transactionId?: string;\n};\n```\n\n----------------------------------------\n\nTITLE: Using Conditional Fields in Relay Queries\nDESCRIPTION: Shows how to include or skip fields in a Relay query based on boolean variables. This example demonstrates the use of the @include directive for conditional field inclusion.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-classic/Classic-APIReference-QL.md#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nRelay.createContainer(Story, {\n  initialVariables: {\n    numCommentsToShow: 10,\n    showComments: false,\n  },\n  fragments: {\n    story: (variables) => Relay.QL`\n      fragment on Story {\n        comments(first: $numCommentsToShow) @include(if: $showComments) {\n          edges {\n            node {\n              author { name },\n              id,\n              text,\n            },\n          },\n        },\n      }\n    `,\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Relay Compiler\nDESCRIPTION: JSON configuration for Relay compiler settings\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/getting-started/quick-start.md#2025-04-18_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"src\": \"./src\",\n  \"schema\": \"./schema.graphql\",\n  \"language\": \"typescript\",\n  \"eagerEsModules\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Returning JavaScript Value in Relay Resolver (TypeScript)\nDESCRIPTION: Demonstrates using RelayResolverValue to return an arbitrary JavaScript value (Date object) from a Relay Resolver function.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/guides/relay-resolvers/return-types.md#2025-04-18_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\n/**\n * @RelayResolver Post.publishDate: RelayResolverValue\n */\nexport function metadata(post: PostModel): Date {\n  return post.publishDate;\n}\n```\n\n----------------------------------------\n\nTITLE: Committing Mutations with Relay Store\nDESCRIPTION: Definition of the commitUpdate static method signature showing the required parameters and types. The method handles mutation processing including optimistic updates and server communication.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-classic/Classic-APIReference-Store.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nstatic commitUpdate(mutation: RelayMutation, callbacks: {\n  onFailure?: (transaction: RelayMutationTransaction) => void;\n  onSuccess?: (response: Object) => void;\n}): RelayMutationTransaction\n\n// Argument to `onFailure` callback\ntype Transaction = {\n  getError(): ?Error;\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Local State with commitLocalUpdate (JavaScript)\nDESCRIPTION: Demonstrates how to set initial local state before querying local data, initializing the user's notes to an empty array.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/guides/client-schema-extensions.md#2025-04-18_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport {commitLocalUpdate} from 'react-relay';\n\ncommitLocalUpdate(environment, store => {\n  const user = store.getRoot().getLinkedRecord('viewer');\n\n  // initialize user notes to an empty array.\n  user.setLinkedRecords([], 'notes');\n});\n```\n\n----------------------------------------\n\nTITLE: Using EntryPointContainer React Component in Relay\nDESCRIPTION: A React component that renders a preloaded EntryPoint. It takes an entryPointReference from loadEntryPoint or useEntryPointLoader hook, and additional runtime props that will be passed to the underlying Component.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/api-reference/entrypoint-apis/entrypoint-container.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nfunction EntryPointContainer({\n  entryPointReference,\n  props,\n}: {\n  +entryPointReference: PreloadedEntryPoint<TEntryPointComponent>,\n  +props: TRuntimeProps,\n}): ReactElement\n```\n\n----------------------------------------\n\nTITLE: GitHub Authentication Token setup in .env.local\nDESCRIPTION: This code snippet shows how to create a `.env.local` file and set the GitHub authentication token as an environment variable.  This token is used to authenticate requests to the GitHub GraphQL API.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/getting-started/step-by-step-guide.md#2025-04-18_snippet_4\n\nLANGUAGE: text\nCODE:\n```\n\"# your-app-name/.env.local\nREACT_APP_GITHUB_AUTH_TOKEN=<TOKEN>\"\n```\n\n----------------------------------------\n\nTITLE: Rendering Viewer information\nDESCRIPTION: This code snippet demonstrates a React component `MyViewer` that uses `useFragment` to retrieve and render a viewer's name and its length.  It assumes the `viewerKey` prop contains a fragment conforming to the `MyViewer` GraphQL fragment. The component utilizes a `graphql` tagged template literal for defining the fragment.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/guides/alias-directive.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction MyViewer({viewerKey}) {\n  const {name} = useFragment(graphql`\n    fragment MyViewer on Viewer {\n      name @required(action: THROW)\n    }`, viewerKey);\n\n  return `My name is ${name}. That's ${name.length} letters long!`;\n}\n```\n\n----------------------------------------\n\nTITLE: Adding ID to Relay Fragment and Passing Props\nDESCRIPTION: Updates the PosterByline component's GraphQL fragment to include ID field and passes it as a prop to the hovercard component.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/tutorial/queries-2.md#2025-04-18_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nconst PosterBylineFragment = graphql`\n  fragment PosterBylineFragment on Actor {\n    // change-line\n    id\n    ...\n  }\n`;\n\nexport default function PosterByline({ poster }: Props): React.ReactElement {\n  ...\n  return (\n   ...\n    <PosterDetailsHovercardContents\n      // change-line\n      posterID={data.id}\n    />\n   ...\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Setting up Relay Tutorial Example Project\nDESCRIPTION: Commands to clone the relay-examples repository, navigate to the newsfeed project, install dependencies, and start the development server. This initializes the tutorial project with a webpack server, GraphQL server, and Relay compiler.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/tutorial/intro.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/relayjs/relay-examples.git\ncd relay-examples/newsfeed\nnpm install\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Defining GraphQL Queries in JavaScript\nDESCRIPTION: These snippets define two GraphQL queries in JavaScript, `UserQuery` and `NodeQuery`, which both attempt to retrieve the name of a user with id 4. If the data for one query is cached, ideally it should be reused for the other.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/guided-tour/reusing-cached-data/filling-in-missing-data.md#2025-04-18_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Query 1\n\nquery UserQuery {\n  user(id: 4) {\n    name\n  }\n}\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Query 2\n\nquery NodeQuery {\n  node(id: 4) {\n    ... on User {\n      name\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Garbage Collection Scheduler in Relay\nDESCRIPTION: Example of creating a custom garbage collection scheduler function for the Relay Store. This function determines when garbage collection should be scheduled to run.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/guided-tour/reusing-cached-data/presence-of-data.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// Sample scheduler function\n// Accepts a callback and schedules it to run at some future time.\nfunction gcScheduler(run: () => void) {\n  resolveImmediate(run);\n}\n\nconst store = new Store(source, {gcScheduler});\n```\n\n----------------------------------------\n\nTITLE: Retrieving Field Value from Relay Store Record\nDESCRIPTION: Illustrates how to get the value of a field from a record in the Relay store using the getValue method of RecordProxy.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/api-reference/relay-runtime/store.md#2025-04-18_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nconst name = viewer.getValue('name');\n```\n\n----------------------------------------\n\nTITLE: Dynamically Loaded Component with useFragment in React\nDESCRIPTION: This React component shows how a dynamically loaded component via 3D can also use the useFragment hook. It includes a GraphQL fragment for the image data.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/guides/data-driven-dependencies/server-3d.md#2025-04-18_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nimport type {CommentImageRenderer_image$key} from 'CommentImageRenderer_image.graphql'\n\nconst {useFragment} = require('react-relay');\n\ntype Props = {\n  image: CommentImageRenderer_image$key,\n};\n\nfunction CommentImageRenderer(props) {\n  const data = useFragment(\n    graphql`\n      fragment CommentImageRenderer_image on Image {\n        src\n      }\n    `,\n    props.image,\n  );\n\n  return (...);\n}\n\nmodule.exports = CommentImageRenderer;\n```\n\n----------------------------------------\n\nTITLE: Defining Simple Mock Resolvers in JavaScript\nDESCRIPTION: Example of creating basic mock resolvers for ID and String types in Relay tests. These resolvers return default values for scalar fields.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/guides/testing-relay-components.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  ID() {\n    // Return mock value for a scalar filed with type ID\n    return 'my-id';\n  },\n  String() {\n    // Every scalar field with type String will have this default value\n    return \"Lorem Ipsum\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Unsafe Fragment Spread Example\nDESCRIPTION: Demonstrates a potential type safety issue when spreading fragments without alias\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/guides/alias-directive.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nfunction MyNode({nodeKey}) {\n  const node = useFragment(graphql`\n    fragment MyFragment on Node {\n      ...MyViewer\n    }`, nodeKey);\n\n  return <MyViewer viewerKey={node} />\n}\n```\n\n----------------------------------------\n\nTITLE: React Component Using Type-Specific Fields\nDESCRIPTION: React component implementation that handles both Person and Organization-specific fields using conditional rendering.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/tutorial/interfaces-polymorphism.md#2025-04-18_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport OrganizationKind from './OrganizationKind';\n\nfunction PosterDetailsHovercardContentsBody({ poster }: Props): React.ReactElement {\n  const data = useFragment(PosterDetailsHovercardContentsBodyFragment, poster);\n  return (\n    <>\n      <Image image={data.profilePicture} width={128} height={128} className=\"posterHovercard__image\" />\n      <div className=\"posterHovercard__name\">{data.name}</div>\n      <ul className=\"posterHovercard__details\">\n         <li>Joined <Timestamp time={poster.joined} /></li>\n         {data.location != null && (\n           <li>{data.location.name}</li>\n         )}\n        {data.organizationKind != null && (\n          <li><OrganizationKind kind={data.organizationKind} /></li>\n         )}\n      </ul>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a GraphQL Story Type\nDESCRIPTION: Example GraphQL schema definition for a Story type, showing scalar fields, nullable vs. non-nullable fields, and relationships to other types.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/tutorial/interfaces-polymorphism.md#2025-04-18_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\ntype Story {\n  id: ID!\n  title: String\n  summary: String\n  createdAt: Date\n  poster: Actor\n  image: Image\n}\n```\n\n----------------------------------------\n\nTITLE: Checking for Fetched Fragments with @skip and @include\nDESCRIPTION: This snippet illustrates the use of the `@alias` directive with `@skip` to safely check if a conditionally fetched fragment has been included.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/guides/alias-directive.md#2025-04-18_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nfunction MyUser({userKey}) {\n  const user = useFragment(graphql`\n    fragment MyFragment on User {\n      ...ConditionalData @skip(if: $someVar) @alias\n    }`, userKey);\n\n  if(user.ConditionalData == null) {\n    return \"No data fetched\";\n  }\n  return <ConditionalData userKey={user.ConditionalData} />\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing PosterDetailsHovercardContents Component\nDESCRIPTION: React component implementation showing how to use query variables with useLazyLoadQuery\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/tutorial/queries-2.md#2025-04-18_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nexport default function PosterDetailsHovercardContents({\n  posterID,\n}: {\n  posterID: string;\n}): React.ReactElement {\n  const data = useLazyLoadQuery<QueryType>(\n    PosterDetailsHovercardContentsQuery,\n    {posterID},\n  );\n  return <PosterDetailsHovercardContentsBody poster={data.node} />;\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Server-Returned Edge to Connection in Updater Function\nDESCRIPTION: Shows how to access a server-returned edge from a mutation response and add it to a connection. This code retrieves the connection record, gets the edge from the server payload, and prepares it for insertion.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/guided-tour/list-data/updating-connections.md#2025-04-18_snippet_7\n\nLANGUAGE: js\nCODE:\n```\nconst {ConnectionHandler} = require('relay-runtime');\n\nfunction updater(store: RecordSourceSelectorProxy) {\n  const storyRecord = store.get(storyID);\n  const connectionRecord = ConnectionHandler.getConnection(\n    storyRecord,\n    'StoryComponent_story_comments_connection',\n  );\n\n  // Get the payload returned from the server\n  const payload = store.getRootField('comment_create');\n\n  // Get the edge inside the payload\n  const serverEdge = payload.getLinkedRecord('comment_edge');\n\n  // Build edge for adding to the connection\n  const newEdge = ConnectionHandler.buildConnectionEdge(\n    store,\n    connectionRecord,\n    serverEdge,\n  );\n\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Including Fragments with @arguments in Relay\nDESCRIPTION: Component that includes a fragment and passes specific arguments to it using the @arguments directive. This example shows how to provide a literal value (2.0) to a fragment's local variable.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v13.0.0/guided-tour/rendering/variables.md#2025-04-18_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * Include fragment using @arguments\n */\n\nfunction UserComponent(props) {\n  const data = useFragment(\n    graphql`\n      fragment UserComponent_user on User {\n        name\n\n        # Pass value of 2.0 for the *`*scale*`* variable\n        ...PictureComponent_user @arguments(scale: 2.0)\n      }\n    `,\n    props.user,\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Type with @RelayResolver in Relay\nDESCRIPTION: Demonstrates how to define a new GraphQL type using the @RelayResolver tag followed by a type name. The function accepts an ID as its argument and returns the JavaScript model for the type.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/api-reference/relay-resolvers/docblock-format.md#2025-04-18_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n/**\n * @RelayResolver User\n */\nexport function User(id): UserModel {\n  return UserModel.getById(id);\n}\n```\n\n----------------------------------------\n\nTITLE: JavaScript Violation Logging Example\nDESCRIPTION: This JavaScript code illustrates how to log violations using `recoverableViolation`. The example demonstrates how to provide an error string and a logger project to report errors. It also shows that `@required` directive with `THROW` or `LOG` actions will log to the `relay-required` logger project instead.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v13.0.0/guides/required-directive.md#2025-04-18_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nrecoverableViolation('My error string', 'my_logger_project');\n```\n\n----------------------------------------\n\nTITLE: Querying List Data with GraphQL\nDESCRIPTION: Example of a GraphQL query that requests multiple contacts from a viewer, demonstrating list syntax.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/tutorial/arrays-lists.md#2025-04-18_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nquery MyQuery {\n  viewer {\n    contacts { // List of edges\n      id // field on a single item\n      name\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Context in Mock Resolvers for Dynamic Values in JavaScript\nDESCRIPTION: Demonstrates how to use the context object in mock resolvers to return dynamic values based on field names, paths, or parent types.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/guides/testing-relay-components.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  String(context) {\n    if (context.name === 'zip') {\n      return '94025';\n    }\n    if (context.path != null && context.path.join('.') === 'node.actor.name') {\n      return 'Current Actor Name';\n    }\n    if (context.parentType === 'Image' && context.name === 'uri') {\n       return 'http://my-image.url';\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Friends with Edge Properties in GraphQL\nDESCRIPTION: Example GraphQL query demonstrating how to fetch friends with edge-specific properties using the Connection model.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/tutorial/connections-pagination.md#2025-04-18_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nfragment FriendsFragment1 on Viewer {\n  friends {\n    since // a property of the edge\n    node {\n      name // a property of the friend itself\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Retaining Local Data - JavaScript\nDESCRIPTION: This snippet describes how to retain local data related to notes in Relay by creating an operation descriptor for the query and using environment.retain(). It ensures that the data referenced remains accessible until it is no longer needed.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/guides/client-schema-extensions.md#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport {createOperationDescriptor, getRequest} from 'relay-runtime';\n\n// Create a query that references that record\nconst localDataQuery = graphql`\n  query LocalDataQuery {\n    viewer {\n      notes {\n        __typename\n      }\n    }\n  }\n`;\n\n// Create an operation descriptor for the query\nconst request = getRequest(localDataQuery);\nconst operation = createOperationDescriptor(request, {} /* variables */);\n\n// Tell Relay to retain this operation so any data referenced by it isn't garbage collected\n// In this case, all the notes linked to the `viewer` will be retained\nconst disposable = environment.retain(operation);\n\n// Whenever you don't need that data anymore and it's okay for Relay to garbage collect it,\n// you can dispose of the retain\ndisposable.dispose();\n```\n\n----------------------------------------\n\nTITLE: Implementing String Array Return Type in Relay Resolver\nDESCRIPTION: Example of a Relay Resolver that returns a list of String values. The resolver returns the favorite colors from a User model.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/guides/relay-resolvers/return-types.md#2025-04-18_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n/**\n * @RelayResolver User.favoriteColors: [String]\n */\nexport function favoriteColors(user: UserModel): string[] {\n  return user.favoriteColors;\n}\n```\n\n----------------------------------------\n\nTITLE: Response with Pagination Cursors\nDESCRIPTION: This JSON snippet shows the response for a paginated query fetching two rebel ships with their cursors. Provides insight into how pagination data is structured including cursors in the GraphQL response.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-experimental/GraphQL-ServerSpecification.md#2025-04-18_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"rebels\": {\n    \"name\": \"Alliance to Restore the Republic\",\n    \"ships\": {\n      \"edges\": [\n        {\n          \"cursor\": \"YXJyYXljb25uZWN0aW9uOjA=\",\n          \"node\": {\n            \"name\": \"X-Wing\"\n          }\n        },\n        {\n          \"cursor\": \"YXJyYXljb25uZWN0aW9uOjE=\",\n          \"node\": {\n            \"name\": \"Y-Wing\"\n          }\n        }\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: LiveState Type Definition for Relay Resolvers\nDESCRIPTION: The type definition for the LiveState interface used by live resolvers. It includes a read method to get the current value and a subscribe method to listen for changes.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/guides/relay-resolvers/live-fields.md#2025-04-18_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\nexport type LiveState<T> = {\n  /**\n   * Returns the current value of the live state.\n   */\n  read(): T,\n  /**\n   * Subscribes to changes in the live state. The state provider should\n   * call the callback when the value of the live state changes.\n   */\n  subscribe(cb: () => void): () => void,\n};\n```\n\n----------------------------------------\n\nTITLE: Relay Local Persisting Example Server\nDESCRIPTION: A simple example of a Node.js server that persists queries to a JSON file. It includes handling HTTP POST requests to save queries as md5 hashes to a query map.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v13.0.0/guides/persisted-queries.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst http = require('http');\nconst crypto = require('crypto');\nconst fs = require('fs');\n\nfunction md5(input) {\n  return crypto.createHash('md5').update(input).digest('hex');\n}\n\nclass QueryMap {\n  constructor(fileMapName) {\n    this._fileMapName = fileMapName;\n    this._queryMap = new Map(JSON.parse(fs.readFileSync(this._fileMapName)));\n  }\n\n  _flush() {\n    const data = JSON.stringify(Array.from(this._queryMap.entries()));\n    fs.writeFileSync(this._fileMapName, data);\n  }\n\n  saveQuery(text) {\n    const id = md5(text);\n    this._queryMap.set(id, text);\n    this._flush();\n    return id;\n  }\n}\n\nconst queryMap = new QueryMap('./queryMap.json');\n\nasync function requestListener(req, res) {\n  if (req.method === 'POST') {\n    const buffers = [];\n    for await (const chunk of req) {\n      buffers.push(chunk);\n    }\n    const data = Buffer.concat(buffers).toString();\n    res.writeHead(200, {\n      'Content-Type': 'application/json'\n    });\n    try {\n      if (req.headers['content-type'] !== 'application/x-www-form-urlencoded') {\n        throw new Error(\n          'Only \"application/x-www-form-urlencoded\" requests are supported.'\n        );\n      }\n      const text = new URLSearchParams(data).get('text');\n      if (text == null) {\n        throw new Error('Expected to have `text` parameter in the POST.');\n      }\n      const id = queryMap.saveQuery(text);\n      res.end(JSON.stringify({\"id\": id}));\n    } catch (e) {\n      console.error(e);\n      res.writeHead(400);\n      res.end(`Unable to save query: ${e}.`);\n    }\n  } else {\n    res.writeHead(400);\n    res.end(\"Request is not supported.\")\n  }\n}\n\nconst PORT = 2999;\nconst server = http.createServer(requestListener);\nserver.listen(PORT);\n\nconsole.log(`Relay persisting server listening on ${PORT} port.`);\n```\n\n----------------------------------------\n\nTITLE: Defining GraphQL Fragment in Relay\nDESCRIPTION: Demonstrates how to define a GraphQL fragment for specifying data requirements of an Author component. The fragment selects name and photo URL fields from an Author type.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/principles-and-architecture/thinking-in-relay.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst authorDetailsFragment = graphql`\n  fragment AuthorDetails_author on Author {\n    name\n    photo {\n      url\n    }\n  }\n`;\n```\n\n----------------------------------------\n\nTITLE: Deleting a Node from Connection in Relay Runtime with JavaScript\nDESCRIPTION: This snippet describes how to delete a node from a connection in Relay using the `deleteNode` method from `ConnectionHandler`. It identifies the node by its ID and removes all associated edges.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/api-reference/relay-runtime/store.md#2025-04-18_snippet_24\n\nLANGUAGE: javascript\nCODE:\n```\nConnectionHandler.deleteNode(friends, idToDelete);\n```\n\n----------------------------------------\n\nTITLE: Setting Linked Record in Relay Store\nDESCRIPTION: The `setLinkedRecord` method mutates the current record by assigning a new linked record to a specified field name, with optional argument support.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/api-reference/relay-runtime/store.md#2025-04-18_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nconst rootField = store.getRootField('rootField');\nconst newViewer = store.create(/* ... */);\nrootField.setLinkedRecord(newViewer, 'viewer');\n```\n\n----------------------------------------\n\nTITLE: Using @skip Directive in GraphQL\nDESCRIPTION: The @skip directive is added to fields, inline fragments, and fragment spreads to allow conditional inclusion. It is the opposite of the @include directive.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/glossary/glossary.md#2025-04-18_snippet_11\n\nLANGUAGE: GraphQL\nCODE:\n```\n@skip\n```\n\n----------------------------------------\n\nTITLE: GraphQL Subscription with Relay `graphql` Tag\nDESCRIPTION: This JavaScript snippet shows how to define a GraphQL subscription using the `graphql` tag from `react-relay`.  It's functionally equivalent to the first GraphQL snippet but is embedded within JavaScript code.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/guided-tour/updating-data/graphql-subscriptions.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst {graphql} = require('react-relay');\n\nconst feedbackLikeSubscription = graphql`\n  subscription FeedbackLikeSubscription($input: FeedbackLikeSubscribeData!) {\n    feedback_like_subscribe(data: $input) {\n      feedback {\n        like_count\n      }\n    }\n  }\n`;\n```\n\n----------------------------------------\n\nTITLE: Example JSON Response for Story and Author Query\nDESCRIPTION: A sample JSON response for the GraphQL query that fetches a story's text and author's name.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/principles-and-architecture/thinking-in-graphql.md#2025-04-18_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"query\": {\n    \"story\": {\n      \"text\": \"Relay is open-source!\",\n      \"author\": {\n        \"name\": \"Jan\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Optimistic Response in Relay Mutation\nDESCRIPTION: Example of an optimistic response structure for a like button mutation. This optimistically updates the viewer_does_like field in the store before the server responds.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/guided-tour/updating-data/graphql-mutations.md#2025-04-18_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  feedback_like: {\n    feedback: {\n      // Even though the id field is not explicitly selected, the\n      // compiler selected it for us\n      id: feedbackId,\n      viewer_does_like: true,\n    },\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Loading EntryPoint with Relay's `loadEntryPoint`\nDESCRIPTION: This code demonstrates how to use `loadEntryPoint` to load an entrypoint and its associated queries. It showcases the required imports, the function call with necessary parameters like `environmentProvider`, `EntryPoint`, and `entryPointParams`. It also emphasizes the importance of disposing of the `entryPointReference` via `.dispose()` to avoid memory leaks, although it's missing in this example.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/api-reference/entrypoint-apis/load-entrypoint.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst EntryPoint = require('MyComponent.entrypoint.js');\n\nconst {loadQuery} = require('react-relay');\n\n// Generally, your component should access the environment from the React context,\n// and pass that environment to this function.\nconst getEntrypointReference = environment => loadEntryPoint(\n  { getEnvironment: () => environment },\n  EntryPoint,\n  {id: '4'},\n);\n\n// later: pass entryPointReference to EntryPointContainer\n// Note that EntryPoint references should have .dispose() called on them,\n// which is missing in this example.\n```\n\n----------------------------------------\n\nTITLE: Defining Resolver with Runtime Argument (TypeScript)\nDESCRIPTION: This TypeScript code defines a Relay resolver function `greet` that accepts a `salutation` argument. The argument is defined in the resolver's docblock using the `@RelayResolver` annotation. The function then uses the `salutation` argument to construct a greeting string.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/guides/relay-resolvers/field-arguments.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * @RelayResolver User.greet(salutation: String!): String\n */\nexport function greet(user: UserModel, args: { salutation: string }): string {\n  return `${args.salutation}, ${user.name}!`;\n}\n```\n\n----------------------------------------\n\nTITLE: Using Fetch Policies with useQueryLoader in React-Relay\nDESCRIPTION: This snippet demonstrates how to use a fetch policy with the loadQuery function provided by useQueryLoader. It shows setting the 'store-or-network' policy when loading a query for a home tab.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/guided-tour/reusing-cached-data/fetch-policies.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst React = require('React');\nconst {graphql} = require('react-relay');\n\nfunction AppTabs() {\n  const [\n    queryRef,\n    loadQuery,\n  ] = useQueryLoader(HomeTabQuery);\n\n  const onSelectHomeTab = () => {\n    loadQuery({id: '4'}, {fetchPolicy: 'store-or-network'});\n  }\n\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Local State in Relay\nDESCRIPTION: Shows how to set initial state for client-side schema fields using commitLocalUpdate.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/guides/client-schema-extensions.md#2025-04-18_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport {commitLocalUpdate} from 'react-relay';\n\ncommitLocalUpdate(environment, store => {\n  const user = store.getRoot().getLinkedRecord('viewer');\n\n  // initialize user notes to an empty array.\n  user.setLinkedRecords([], 'notes');\n});\n```\n\n----------------------------------------\n\nTITLE: Declaring a Connection Fragment in Relay\nDESCRIPTION: This snippet declares a Relay fragment with a @connection directive, enabling storage and manipulation of related records. Requires 'react-relay' for GraphQL integration.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v13.0.0/guided-tour/list-data/updating-connections.md#2025-04-18_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst {graphql} = require('react-relay');\n\nconst storyFragment = graphql`\n  fragment StoryComponent_story on Story {\n    comments @connection(key: \"StoryComponent_story_comments_connection\") {\n      nodes {\n        body {\n          text\n        }\n      }\n    }\n  }\n`;\n```\n\n----------------------------------------\n\nTITLE: Defining Client Schema Extensions in GraphQL for Relay Store Modification\nDESCRIPTION: Client schema extension that adds a boolean field 'is_new_comment' to the Feedback type, which will be used in mutation updaters.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/guided-tour/updating-data/imperatively-modifying-store-data.md#2025-04-18_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\n# Feedback.graphql\nextend type Feedback {\n  is_new_comment: Boolean\n}\n```\n\n----------------------------------------\n\nTITLE: Multiple 3D Selections with Distinct Keys in GraphQL\nDESCRIPTION: This GraphQL fragment shows how to use multiple 3D selections in a single fragment by specifying distinct keys using the @match directive.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/guides/data-driven-dependencies/server-3d.md#2025-04-18_snippet_10\n\nLANGUAGE: graphql\nCODE:\n```\nfragment Example_comment on Comment {\n  comment_content_renderer @match {\n    ...CommentMarkdownRenderer_comment\n      @module(name: \"CommentMarkdownRenderer.react\")\n  }\n  attachments {\n    attachment_renderer @match(key: \"Example_comment__attachment\") {\n      ...CommentAttachmentPhotoRenderer_comment\n        @module(name: \"CommentPhotoRenderer.react\")\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: GraphQL Fragment with __typename for Inline Fragment Issue\nDESCRIPTION: This GraphQL fragment demonstrates adding a `__typename` field to address the nullable field issue in inline fragments when using the `@required` directive.  By including `__typename`, you can then check the `__typename` property in your code to narrow the type and ensure the `name` field is non-nullable when the type is `User`.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/guides/required-directive.md#2025-04-18_snippet_8\n\nLANGUAGE: graphql\nCODE:\n```\nfragment MyFrag on Actor {\n  __typename\n  ... on User {\n    name @required(action: THROW)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Root Field from Relay Store\nDESCRIPTION: Example of retrieving a root field from the Relay Store using the getRootField method of RecordSourceSelectorProxy. It takes a fieldName as an argument and returns a RecordProxy.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/api-reference/relay-runtime/store.md#2025-04-18_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst viewer = store.getRootField('viewer');\n```\n\n----------------------------------------\n\nTITLE: GraphQL Node Query Example\nDESCRIPTION: Demonstrates the structure of a GraphQL query that fetches data using the Node interface pattern, showing how Relay handles refetching specific nodes in the graph.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/tutorial/refetchable-fragments.md#2025-04-18_snippet_9\n\nLANGUAGE: graphql\nCODE:\n```\nquery MyQuery {\n  topTrendingPosts {\n    title\n    summary\n    date\n    poster {\n     ...PosterFragment\n    }\n  }\n}\n```\n\nLANGUAGE: graphql\nCODE:\n```\nquery RefetchQuery {\n  node(id: \"abcdef\") {\n    ...PosterFragment\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing AssignBestFriendButton Component in JavaScript\nDESCRIPTION: Creates a React component that renders a button to assign a user as the viewer's best friend, using Relay's useFragment and commitLocalUpdate APIs.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/guided-tour/updating-data/imperatively-modifying-linked-fields.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport {validate as ValidateUser} from 'AssignableBestFriendButton_assignable_user.graphql';\nimport type {AssignBestFriendButton_user$key} from 'AssignBestFriendButton_user.graphql';\nimport type {RecordSourceSelectorProxy} from 'react-relay';\n\nconst {commitLocalUpdate, useFragment, useRelayEnvironment} = require('react-relay');\n\ngraphql`\n  fragment AssignBestFriendButton_assignable_user on User @assignable {\n    __typename\n  }\n`;\n\nexport default function AssignBestFriendButton({\n  userFragmentRef: AssignBestFriendButton_someType$key,\n}) {\n  const data = useFragment(graphql`\n    fragment AssignBestFriendButton_someType on SomeType {\n      user {\n        name\n        ...AssignableBestFriendButton_assignable_user\n      }\n    }\n  `, userFragmentRef);\n\n  const environment = useRelayEnvironment();\n  const onClick = () => {\n    const updatableData = commitLocalUpdate(\n      environment,\n      (store: RecordSourceSelectorProxy) => {\n        const {updatableData} = store.readUpdatableQuery(\n            graphql`\n              query AssignBestFriendButtonUpdatableQuery\n              @updatable {\n                viewer {\n                  best_friend {\n                    ...AssignableBestFriendButton_assignable_user\n                  }\n                }\n              }\n            `,\n            {}\n          );\n\n        const user = data.user;\n        if (user != null && updatableData.viewer != null) {\n          const validUser = validateUser(user);\n          if (validUser !== false) {\n            updatableData.viewer.best_friend = validUser;\n          }\n        }\n      }\n    );\n  };\n\n  return (<button onClick={onClick}>\n    Declare {user.name ?? 'someone with no name'} my best friend!\n  </button>);\n}\n```\n\n----------------------------------------\n\nTITLE: Globally Invalidating Relay Store with JavaScript\nDESCRIPTION: Details global invalidation of the Relay store using `invalidateStore`, marking all pre-existing data as stale until refetch, prompted by the next query check or store-or-network fetch.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/api-reference/relay-runtime/store.md#2025-04-18_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nstore.invalidateStore();\nenvironment.check(query) === 'stale';\n```\n\n----------------------------------------\n\nTITLE: Implementing StoryCommentsSection with Pagination in React and Relay\nDESCRIPTION: React component code for StoryCommentsSection, demonstrating how to use Relay's Connection model to fetch paginated comments and implement a 'Load More' button.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/tutorial/connections-pagination.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport LoadMoreCommentsButton from \"./LoadMoreCommentsButton\";\nconst StoryCommentsSectionFragment = graphql`\n fragment StoryCommentsSectionFragment on Story {\n  comments(first: 3) {\n    edges {\n      node {\n        ...CommentFragment\n      }\n    }\n    pageInfo {\n      hasNextPage\n    }\n  }\n }\n`;\n\nfunction StoryCommentsSection({story}) {\n  const data = useFragment(StoryCommentsSectionFragment, story);\n  const onLoadMore = () => {/* TODO */};\n  return (\n    <>\n      {data.comments.edges.map(commentEdge =>\n        <Comment comment={commentEdge.node} />\n      )}\n      {data.comments.pageInfo.hasNextPage && (\n        <LoadMoreCommentsButton onClick={onLoadMore} />\n      )}\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Updating GraphQL Query to Fetch Multiple Stories\nDESCRIPTION: This snippet shows how to modify a GraphQL query to fetch multiple stories instead of a single story. It uses the 'topStories' field which returns a list of Stories.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/tutorial/arrays-lists.md#2025-04-18_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\nconst NewsfeedQuery = graphql`\n  query NewsfeedQuery {\n    topStories {\n      ...StoryFragment\n    }\n  }\n`;\n```\n\n----------------------------------------\n\nTITLE: Returning Weak Client-defined GraphQL Type in Relay Resolver (TypeScript)\nDESCRIPTION: Shows how to return a 'weak' type object for a User.profilePicture field in a Relay Resolver.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/guides/relay-resolvers/return-types.md#2025-04-18_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n/**\n * @RelayResolver User.profilePicture: ProfilePicture\n */\nexport function profilePicture(user: UserModel): ProfilePicture {\n  return {\n    url: user.profilePicture.url,\n    width: user.profilePicture.width,\n    height: user.profilePicture.width,\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Getting the dataID of a record\nDESCRIPTION: This snippet retrieves the dataID of the current record using the getDataID method, which identifies the record within the Relay Store.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/api-reference/relay-runtime/store.md#2025-04-18_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nconst id = record.getDataID();\n```\n\n----------------------------------------\n\nTITLE: Declaring and Using Locally Scoped Variables in Fragments - JavaScript\nDESCRIPTION: The following JavaScript snippet illustrates how to use locally scoped variables with `@argumentDefinitions` in Relay fragments. This allows for greater flexibility and reusability without depending on global variables.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/guided-tour/rendering/variables.md#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * Declare a fragment that accepts arguments with @argumentDefinitions\n */\n\nfunction TaskView(props) {\n  const data = useFragment(\n    graphql`\n      fragment TaskView_task on Task\n        @argumentDefinitions(showDetailedResults: {type: \"Boolean!\"}) {\n        name\n        is_completed\n        ... @include(if: $showDetailedResults) {\n          description\n        }\n      }\n    `,\n    props.task,\n  );\n}\n\n```\n\n----------------------------------------\n\nTITLE: Implementing Story Component with Like Button in TypeScript/React\nDESCRIPTION: Shows how to integrate a Like button into a Story component by importing the StoryLikeButton component and spreading its fragment into the Story's fragment query.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/tutorial/mutations-updates.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// change-line\nimport StoryLikeButton from './StoryLikeButton';\n\n...\n\nconst StoryFragment = graphql`\n  fragment StoryFragment on Story {\n    title\n    summary\n    // ... etc\n    // change-line\n    ...StoryLikeButtonFragment\n  }\n`;\n\n...\n\nexport default function Story({story}: Props) {\n  const data = useFragment(StoryFragment, story);\n  return (\n    <Card>\n      <PosterByline person={data.poster} />\n      <Heading>{data.title}</Heading>\n      <Timestamp time={data.posterAt} />\n      <Image image={story.thumbnail} width={400} height={400} />\n      <StorySummary summary={data.summary} />\n      // change-line\n      <StoryLikeButton story={data} />\n      <StoryCommentsSection story={data} />\n    </Card>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering EntryPoint with Relay in JavaScript\nDESCRIPTION: This snippet defines the EntryPointContainer component, which is a React component that renders a preloaded entrypoint in a Relay application. The component requires an entryPointReference, typically obtained from loadEntryPoint or useEntryPointLoader, and supports additional runtime props passed to the component being rendered.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/api-reference/entrypoint-apis/entrypoint-container.md#2025-04-18_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction EntryPointContainer({\n  entryPointReference,\n  props,\n}: {\n  +entryPointReference: PreloadedEntryPoint<TEntryPointComponent>,\n  +props: TRuntimeProps,\n}): ReactElement\n```\n\n----------------------------------------\n\nTITLE: Invalidating Relay Store\nDESCRIPTION: Demonstrates how to globally invalidate the Relay store, causing all data to be considered stale and requiring refetch.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/api-reference/relay-runtime/store.md#2025-04-18_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nstore.invalidateStore();\n```\n\n----------------------------------------\n\nTITLE: Composing Child Component Fragments in Relay Container\nDESCRIPTION: Shows how to compose fragments from child components within a parent Relay container. This is a common pattern for building complex queries from reusable parts.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-classic/Classic-APIReference-QL.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nRelay.createContainer(Foo, {\n  fragments: {\n    bar: () => Relay.QL`\n      fragment on Bar {\n        ${ChildComponent.getFragment('childFragmentName')},\n      }\n    `,\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Record from Relay Store\nDESCRIPTION: Example of retrieving a record from the Relay Store using the get method of RecordSourceSelectorProxy. It takes a dataID as an argument and returns a RecordProxy.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/api-reference/relay-runtime/store.md#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst record = store.get(dataID);\n```\n\n----------------------------------------\n\nTITLE: Using Relay with babel-plugin-macros\nDESCRIPTION: Alternative approach to use Relay with babel-plugin-macros instead of babel-plugin-relay after installing and configuring babel-plugin-macros.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/getting-started/installation-and-setup.md#2025-04-18_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst graphql = require('babel-plugin-relay/macro');\n```\n\n----------------------------------------\n\nTITLE: Defining fragment arguments with @argumentDefinitions in GraphQL\nDESCRIPTION: This snippet demonstrates how the `@argumentDefinitions` directive is used to define the local arguments that a fragment can take, along with their types. This allows for more modular and reusable fragments that can accept different inputs.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v13.0.0/glossary/glossary.md#2025-04-18_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\nfragment Store_story on Story\n  @argumentDefinitions(storyId: {type: \\\"ID!\\\"}) {\n  # etc\n}\n```\n\n----------------------------------------\n\nTITLE: Defining SelectorStoreUpdater Function Type\nDESCRIPTION: Describes a function type that takes a RecordSourceSelectorProxy and data, allowing direct manipulation of the Relay store. Enables creating, updating, or deleting records imperatively.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v13.0.0/api-reference/types/SelectorStoreUpdater.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n(store: RecordSourceSelectorProxy, data) => void\n```\n\n----------------------------------------\n\nTITLE: Defining Abstract Types in Client Schema (GraphQL)\nDESCRIPTION: Shows how to define interfaces and unions using Client Schema Extensions in a GraphQL schema file.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/guides/relay-resolvers/return-types.md#2025-04-18_snippet_7\n\nLANGUAGE: graphql\nCODE:\n```\ninterface Animal {\n legs: Int\n}\n\nextend type Cat implements Animal {\n  __do_not_use: String # Placeholder because GraphQL does not allow empty field sets.\n}\n```\n\n----------------------------------------\n\nTITLE: Example GraphQL Query for Fetching Story Text and Author Name\nDESCRIPTION: A GraphQL query that fetches a story's text and its author's name, demonstrating nested data fetching.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/principles-and-architecture/thinking-in-graphql.md#2025-04-18_snippet_6\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  story(id: \"1\") {\n    text,\n    author {\n      name\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Correct Usage of @required with @connection Directive\nDESCRIPTION: Shows the correct way to use @required directive with @connection directive by removing @required from node and job fields.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/guides/required-directive.md#2025-04-18_snippet_6\n\nLANGUAGE: graphql\nCODE:\n```\nfragment FriendsList on User @refetchable(queryName: \"FriendsListQuery\") {\n  friends(after: $cursor, first: $count) @connection(key: \"FriendsList_friends\") {\n    edges {\n      node {\n        job {\n          title @required(action: LOG)\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Basic GraphQL Query with Relay\nDESCRIPTION: Creates a GraphQL query named TestQuery using the graphql template tag. The query requests only the __typename field, which returns the type name of the queried object.\nSOURCE: https://github.com/facebook/relay/blob/main/packages/babel-plugin-relay/__tests__/fixtures/query.txt#2025-04-18_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst testQuery = graphql`\n  query TestQuery {\n    __typename\n  }\n`;\n```\n\n----------------------------------------\n\nTITLE: Querying for Empire Faction ID and Name\nDESCRIPTION: This GraphQL query fetches the ID and name of the Empire faction, further illustrating the use of globally unique IDs for different objects.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/guides/graphql-server-specification.md#2025-04-18_snippet_3\n\nLANGUAGE: graphql\nCODE:\n```\nquery EmpireQuery {\n  empire {\n    id\n    name\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining RenderLoading Function Type\nDESCRIPTION: Type definition for renderLoading callback that returns a React element when data is loading.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-classic/Classic-APIReference-RootContainer.md#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nrenderLoading(): ?ReactElement\n```\n\n----------------------------------------\n\nTITLE: Updating Local Note with commitLocalUpdate (JavaScript)\nDESCRIPTION: Demonstrates how to update an existing Note record in the local store using commitLocalUpdate.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/guides/client-schema-extensions.md#2025-04-18_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport {commitLocalUpdate} from 'react-relay';\n\nfunction updateUserNote(environment, dataID, body, title) {\n  commitLocalUpdate(environment, store => {\n    const note = store.get(dataID);\n\n    note.setValue(body, 'body');\n    note.setValue(title, 'title')\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Defining GraphQL Query with Variables\nDESCRIPTION: GraphQL query definition showing how to use query variables for fetching poster details\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/tutorial/queries-2.md#2025-04-18_snippet_2\n\nLANGUAGE: graphql\nCODE:\n```\nconst PosterDetailsHovercardContentsQuery = graphql`\n  query PosterDetailsHovercardContentsQuery($posterID: ID!) {\n    node(id: $posterID) {\n      ... on Actor {\n        ...PosterDetailsHovercardContentsBodyFragment\n      }\n    }\n  }\n`;\n```\n\n----------------------------------------\n\nTITLE: Using Variables in GraphQL Fragments\nDESCRIPTION: Demonstrates how fragments can reference variables declared by a parent query, making those variables globally available to all descendant fragments.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/guided-tour/rendering/variables.md#2025-04-18_snippet_3\n\nLANGUAGE: graphql\nCODE:\n```\nfragment UserFragment on User {\n  name\n  profile_picture(scale: $scale) {\n    uri\n  }\n}\n\n\nquery ViewerQuery($scale: Float!) {\n  viewer {\n    actor {\n      ...UserFragment\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Abstract Types with Relay Resolver\nDESCRIPTION: Example of implementing an interface with multiple concrete resolver types (BasicUser and SpecialUser) that implement the IUser interface.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/guides/relay-resolvers/defining-types.md#2025-04-18_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n/**\n * @RelayResolver BasicUser implements IUser\n */\nexport function BasicUser(id: DataID): BasicUserModel {\n  return { ...BasicUserService.getById(id), name: 'BasicUser1'};\n}\n\n/**\n * @RelayResolver SpecialUser implements IUser\n */\nexport function SpecialUser(id: DataID): SpecialUserModel {\n  return { ...SpecialUserService.getById(id), name: 'SpecalUser1'};\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Client-Side Schema Extensions in GraphQL\nDESCRIPTION: Demonstrates how to create a new client-side type 'Note' and extend the server 'User' type with a list of Notes using GraphQL schema language.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/guides/client-schema-extensions.md#2025-04-18_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\ntype Note {\n  id: ID!\n  title: String\n  body: String\n}\n\nextend type User {\n  notes: [Note]\n}\n```\n\n----------------------------------------\n\nTITLE: GraphQL Fetch Helper Implementation\nDESCRIPTION: Utility function to handle GraphQL requests to GitHub's API with proper authentication and request formatting.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-experimental/RelayHooks-StepByStep.md#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nasync function fetchGraphQL(text, variables) {\n  const REACT_APP_GITHUB_AUTH_TOKEN = process.env.REACT_APP_GITHUB_AUTH_TOKEN;\n\n  // Fetch data from GitHub's GraphQL API:\n  const response = await fetch('https://api.github.com/graphql', {\n    method: 'POST',\n    headers: {\n      Authorization: `bearer ${REACT_APP_GITHUB_AUTH_TOKEN}`,\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify({\n      query: text,\n      variables,\n    }),\n  });\n\n  // Get the response as JSON\n  return await response.json();\n}\n\nexport default fetchGraphQL;\n```\n\n----------------------------------------\n\nTITLE: Implementing Response Cache for GraphQL\nDESCRIPTION: Shows a basic approach to caching GraphQL queries using the query text as a cache key, similar to REST response caching.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v13.0.0/principles-and-architecture/thinking-in-graphql.md#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nvar _cache = new Map();\ngraphql.get = queryText => {\n  if (!_cache.has(queryText)) {\n    _cache.set(queryText, fetchGraphQL(queryText));\n  }\n  return _cache.get(queryText);\n};\n```\n\n----------------------------------------\n\nTITLE: Error Handling in Relay Root Container\nDESCRIPTION: Example demonstrating error handling using the renderFailure callback prop, including displaying error messages and providing retry functionality.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-classic/Classic-Guides-RootContainer.md#2025-04-18_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<Relay.RootContainer\n  Component={ProfilePicture}\n  route={profileRoute}\n  renderFailure={function(error, retry) {\n    return (\n      <div>\n        <p>{error.message}</p>\n        <p><button onClick={retry}>Retry?</button></p>\n      </div>\n    );\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Mock Resolver Example for Object Types\nDESCRIPTION: This code snippet illustrates how to define mock resolvers for object types like User. It demonstrates setting default values for fields within the User object in the query response, including nested objects like profile_picture.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/guides/testing-relay-components.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  // This will be the default values for User object in the query response\n  User() {\n    return {\n      id: 4,\n      name: \"Mark\",\n      profile_picture: {\n        uri: \"http://my-image...\",\n      },\n    };\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Modifying GraphQL Query for Newsfeed Stories Pagination\nDESCRIPTION: This snippet shows how to modify a GraphQL query to use a paginated connection field for fetching newsfeed stories.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/tutorial/connections-pagination.md#2025-04-18_snippet_6\n\nLANGUAGE: graphql\nCODE:\n```\nconst NewsfeedQuery = graphql`\n  query NewsfeedQuery {\n    viewer {\n      newsfeedStories(first: 3) {\n        edges {\n          node {\n            id\n            ...StoryFragment\n          }\n        }\n      }\n    }\n  }\n`;\n```\n\n----------------------------------------\n\nTITLE: Running the Relay Compiler in watch mode\nDESCRIPTION: Command to run the Relay Compiler with the watch option to automatically regenerate compiled artifacts when source code changes. Requires watchman to be installed.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/getting-started/installation-and-setup.md#2025-04-18_snippet_9\n\nLANGUAGE: sh\nCODE:\n```\nyarn run relay --watch\n```\n\n----------------------------------------\n\nTITLE: GraphQL Query: Fetch Best Friend's Name\nDESCRIPTION: This GraphQL query fetches the name of the user's best friend. It's used to illustrate a scenario where a subsequent query might change the best friend, leading to a null value if the new best friend's name isn't fetched.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/debugging/why-null.md#2025-04-18_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nquery MyQuery {\n  me {\n    best_friend {\n      # id: 1\n      name\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Returning Weak Client-defined GraphQL Types in Relay Resolver (TypeScript)\nDESCRIPTION: Demonstrates returning a 'weak' client-defined GraphQL type (ProfilePicture) from a Relay Resolver. The function returns an object matching the type's model.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/guides/relay-resolvers/return-types.md#2025-04-18_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n/**\n * @RelayResolver User.profilePicture: ProfilePicture\n */\nexport function profilePicture(user: UserModel): ProfilePicture {\n  return {\n    url: user.profilePicture.url,\n    width: user.profilePicture.width,\n    height: user.profilePicture.width,\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Fragment Arguments with @argumentDefinitions in GraphQL\nDESCRIPTION: Shows how to use the @argumentDefinitions directive to define local arguments for a GraphQL fragment, including their names and types.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/glossary/glossary.md#2025-04-18_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\nfragment Store_story on Story\n  @argumentDefinitions(storyId: {type: \"ID!\"}) {\n  # etc\n}\n```\n\n----------------------------------------\n\nTITLE: Marking a Field as Deprecated in a Relay Resolver - TypeScript\nDESCRIPTION: This snippet demonstrates how to mark a field in a Relay Resolver as deprecated using a docblock annotation. The @deprecated tag allows for an optional reason to be provided, which will be displayed in tools that support Relay. The function concatenates the first and last name of an author model.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/guides/relay-resolvers/deprecated.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * @RelayResolver Author.fullName: String\n *\n * @deprecated Google \"Falsehoods Programmers Believe About Names\"\n */\nexport function fullName(author: AuthorModel): string {\n  return `${author.firstName} ${author.lastName}`;\n}\n```\n\n----------------------------------------\n\nTITLE: Using a Resolver Field with Fragment Arguments in a Query\nDESCRIPTION: Demonstrates how to pass arguments to a Relay Resolver field in a GraphQL query. The query passes the 'my_arg' parameter to the resolver field which is then passed to the resolver's fragment.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/guides/relay-resolvers.md#2025-04-18_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nconst data = useLazyLoadQuery(graphql`\n    query myQuery($id: ID, $my_arg: Float!) {\n        node(id: $id) {\n           ... on MyType {\n                my_resolver_field(my_arg: $my_arg)\n           }\n        }\n   }\n`, { id: \"some id\", my_arg: 2.5 });\n```\n\n----------------------------------------\n\nTITLE: Basic GraphQL Query Example\nDESCRIPTION: Shows a simple GraphQL query that requests specific fields (name and occupation) for a person, and the corresponding response with only the requested data.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/tutorial/graphql.md#2025-04-18_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\nRequest:\nquery {\n  person(id: \"24601\") {\n    name\n    occupation\n  }\n}\n\nResponse:\n{\n  \"person\": {\n    \"name\": \"Jean Valjean\",\n    \"occupation\": \"Mayor\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying Connection Identity Filters in Relay\nDESCRIPTION: Shows how to explicitly specify which filters should be used for connection identity using the filters argument in the @connection directive.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/guided-tour/list-data/updating-connections.md#2025-04-18_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nconst {graphql} = require('relay-runtime');\n\nconst storyFragment = graphql`\n  fragment StoryComponent_story on Story {\n    comments(\n      order_by: $orderBy\n      filter_mode: $filterMode\n      language: $language\n    )\n      @connection(\n        key: \"StoryComponent_story_comments_connection\"\n        filters: [\"order_by\", \"filter_mode\"]\n      ) {\n      edges {\n        nodes {\n          body {\n            text\n          }\n        }\n      }\n    }\n  }\n`;\n```\n\n----------------------------------------\n\nTITLE: Using @relay(mask: false) to Prevent Data Masking\nDESCRIPTION: The @relay(mask: false) directive prevents data masking, making the fragment's data directly available to the parent. This example defines a fragment on InternUser that can be included without masking.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/api-reference/graphql/graphql-directives.md#2025-04-18_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\ngraphql`\n  fragment Component_internUser on InternUser @relay(mask: false) {\n    id\n    name\n  }\n`;\n```\n\n----------------------------------------\n\nTITLE: Basic Actor Fragment Definition\nDESCRIPTION: GraphQL fragment selecting common fields from the Actor interface.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/tutorial/interfaces-polymorphism.md#2025-04-18_snippet_3\n\nLANGUAGE: graphql\nCODE:\n```\nfragment PosterDetailsHovercardContentsBodyFragment on Actor {\n  name\n  joined\n  profilePicture {\n    ...ImageFragment\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Example Subscription Payload\nDESCRIPTION: This JSON snippet represents a sample payload received by a client when a subscription event occurs. It includes the feedback ID and the updated like count.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v13.0.0/guided-tour/updating-data/graphql-subscriptions.md#2025-04-18_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"feedback_like_subscribe\": {\n    \"feedback\": {\n      \"id\": \"feedback-id\",\n      \"like_count\": 321,\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Executing a GraphQL Mutation to Introduce a New Ship\nDESCRIPTION: This snippet outlines a mutation operation for introducing a new ship to a faction, using defined input types. This example requires implementing client logic to manage inputs and read mutation responses.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-experimental/GraphQL-ServerSpecification.md#2025-04-18_snippet_12\n\nLANGUAGE: graphql\nCODE:\n```\nmutation AddBWingQuery($input: IntroduceShipInput!) {\n  introduceShip(input: $input) {\n    ship {\n      id\n      name\n    }\n    faction {\n      name\n    }\n    clientMutationId\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Type Refinement Example with Discriminated Union\nDESCRIPTION: Example showing how to handle type refinement using __typename discriminator without explicit validation\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/guided-tour/updating-data/imperatively-modifying-linked-fields.md#2025-04-18_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst data = useFragment(graphql`\n  fragment TestComponent_bar on SomeType {\n    node(id: \"4\") {\n      ... on User {\n        __typename\n        ...MyAssignableFragment_assignable_user\n      }\n      # other selections\n    }\n  }\n`, fragmentReference);\n\nconst onClick = () => {\n  commitLocalUpdate(\n    environment,\n    store => {\n      const {updatableData} = store.readUpdatableQuery(\n        graphql`\n          TestComponentUpdatableQuery {\n            best_friend {\n              ...MyAssignableFragment_assignable_user\n            }\n          }\n        `\n      );\n\n      if (data.node?.__typename === 'User') {\n        // because the generated type for data has a discriminated union at data.node,\n        // in this block, flow correctly infers that data.node has typename \"User\"\n        // and you can assign the user without runtime validation\n        updatableData.best_friend = data.node;\n      }\n    }\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Using @appendNode Directive in GraphQL Mutation\nDESCRIPTION: This snippet demonstrates how to use the @appendNode directive in a GraphQL mutation to add newly created nodes, wrapped inside edges, to specified connections.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/guided-tour/list-data/updating-connections.md#2025-04-18_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n// Get the connection ID using the `__id` field\nconst connectionID = fragmentData?.comments?.__id;\n\n// Or get it using `ConnectionHandler.getConnectionID()`\nconst connectionID = ConnectionHandler.getConnectionID(\n  '<story-id>',\n  'StoryComponent_story_comments_connection',\n);\n\n// ...\n\n// Mutation\ncommitMutation<AppendCommentMutation>(environment, {\n  mutation: graphql`\n    mutation AppendCommentMutation(\n      # Define a GraphQL variable for the connections array\n      $connections: [ID!]!\n      $input: CommentCreateInput\n    ) {\n      commentCreate(input: $input) {\n        # Use @appendNode or @prependNode on the node field\n        feedbackCommentNode @appendNode(connections: $connections, edgeTypeName: \"CommentsEdge\") {\n          id\n        }\n      }\n    }\n  `,\n  variables: {\n    input,\n    // Pass the `connections` array\n    connections: [connectionID],\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: GraphQL Literal Declaration in Relay\nDESCRIPTION: Demonstrates the syntax for declaring a GraphQL literal, which is preprocessed and replaced with a GraphQLTaggedNode at build time\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/glossary/glossary.md#2025-04-18_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\ngraphql`...`\n```\n\n----------------------------------------\n\nTITLE: Chaining @required Directives in React and Relay\nDESCRIPTION: Shows how to chain @required directives to make deeply nested fields accessible after a single null check in a React component using Relay.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/guides/required-directive.md#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst user = useFragment(graphql`\n  fragment MyUser on User {\n    name @required(action: LOG)\n    profile_picture @required(action: LOG) {\n      url @required(action: LOG)\n    }\n  }`, key);\n if(user == null) {\n   return null;\n }\n return <img src={user.profile_picture.url} alt={user.name} />\n```\n\n----------------------------------------\n\nTITLE: Using Error Boundary in React Application\nDESCRIPTION: Example showing how to implement Error Boundary in a React application to handle errors in different content sections.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/guided-tour/rendering/error-states.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * App.react.js\n */\n\nconst ErrorBoundary = require('ErrorBoundary');\nconst React = require('React');\n\nconst MainContent = require('./MainContent.react');\nconst SecondaryContent = require('./SecondaryContent.react');\n\nfunction App() {\n  return (\n    // Render an ErrorSection if an error occurs within\n    // MainContent or Secondary Content\n    <ErrorBoundary fallback={error => <ErrorUI error={error} />}>\n      <MainContent />\n      <SecondaryContent />\n    </ErrorBoundary>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Field Value in Relay Store Record\nDESCRIPTION: Example of setting a field value in a Relay Store record using the setValue method of RecordProxy. It can optionally take arguments for fields with parameters.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/api-reference/relay-runtime/store.md#2025-04-18_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nviewer.setValue('New Name', 'name');\n\n// With arguments\nviewer.setValue('New Name', 'name', {arg: 'value'});\n```\n\n----------------------------------------\n\nTITLE: Operation/Fragment Data Type Emission in Relay with TypeScript\nDESCRIPTION: This snippet illustrates how Relay emits type information for operation or fragment data with TypeScript. The `ExampleQuery$data` type defines the shape of the data returned by `useLazyLoadQuery`. The example highlights how to use this type information when accessing the fetched data.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/guides/type-emission.md#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * export type ExampleQuery$variables = {\n *   readonly artistID: string\n * }\n * export type ExampleQuery$data = {\n *   readonly artist?: {\n *     readonly name?: string\n *   }\n * }\n * export type ExampleQuery = {\n *   readonly variables: ExampleQuery$variables\n *   readonly response: ExampleQuery$data\n * }\n */\n\n// data is of type ExampleQuery$data\nconst data = useLazyLoadQuery(\n  graphql`\n    query ExampleQuery($artistID: ID!) {\n      artist(id: $artistID) {\n        name\n      }\n    }\n  `,\n  {artistID: 'banksy'},\n);\n\nreturn props.artist && <div>{props.artist.name} is great!</div>\n```\n\n----------------------------------------\n\nTITLE: JSON Response for Paginated Ships Query\nDESCRIPTION: The JSON response showing the next three ships after the cursor position, demonstrating how pagination works in the Relay connection model.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/guides/graphql-server-specification.md#2025-04-18_snippet_14\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"rebels\": {\n    \"name\": \"Alliance to Restore the Republic\",\n    \"ships\": {\n      \"edges\": [\n        {\n          \"cursor\": \"YXJyYXljb25uZWN0aW9uOjI=\",\n          \"node\": {\n            \"name\": \"A-Wing\"\n          }\n        },\n        {\n          \"cursor\": \"YXJyYXljb25uZWN0aW9uOjM=\",\n          \"node\": {\n            \"name\": \"Millenium Falcon\"\n          }\n        },\n        {\n          \"cursor\": \"YXJyYXljb25uZWN0aW9uOjQ=\",\n          \"node\": {\n            \"name\": \"Home One\"\n          }\n        }\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Disposable Interface in TypeScript\nDESCRIPTION: Defines an interface for objects that can be disposed of. The interface requires implementing a dispose() method that releases resources and performs cleanup.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/api-reference/types/Disposable.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Disposable {\n  dispose(): void;\n}\n```\n\n----------------------------------------\n\nTITLE: Using ErrorBoundaryWithRetry in Application\nDESCRIPTION: This snippet showcases how to implement ErrorBoundaryWithRetry in an App component to handle errors during data fetching. Upon retrying, it fetches a new query reference and re-renders the MainContent with the updated data.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/guided-tour/rendering/error-states.md#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nfunction App(props) {\n  // E.g., initialQueryRef provided by router\n  const [queryRef, loadQuery] = useQueryLoader(query, props.initialQueryRef);\n\n  return (\n    <ErrorBoundaryWithRetry\n      onRetry={() => loadQuery(/* ... */)}\n      fallback={({error, retry}) =>\n        <>\n          <ErrorUI error={error} />\n          <Button onPress={retry}>Retry</Button>\n        </>\n      }> \n      <MainContent queryRef={queryRef} />\n    </ErrorBoundaryWithRetry>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Relay Mutations\nDESCRIPTION: Shows how to test a Relay mutation function independently. It demonstrates setting up a mock environment, triggering the mutation, and verifying the completion callback.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v13.0.0/guides/testing-relay-components.md#2025-04-18_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nfunction sendMutation(environment, onCompleted, onError, variables)\n  commitMutation(environment, {\n    mutation: graphql`...`,\n    onCompleted,\n    onError,\n    variables,\n  });\n}\n\ntest('it should send mutation', () => {\n  const environment = createMockEnvironment();\n  const onCompleted = jest.fn();\n  sendMutation(environment, onCompleted, jest.fn(), {});\n  const operation = environment.mock.getMostRecentOperation();\n\n  ReactTestRenderer.act(() => {\n    environment.mock.resolve(\n      operation,\n      MockPayloadGenerator.generate(operation)\n    );\n  });\n\n  expect(onCompleted).toBeCalled();\n});\n```\n\n----------------------------------------\n\nTITLE: GraphQL Fragment for StoryLikeButton\nDESCRIPTION: This GraphQL fragment defines the data requirements for the `StoryLikeButton` component. It fetches the `id`, `likeCount`, and `doesViewerLike` fields from the `Story` type. These fields are used to display the like count and determine if the current viewer has liked the story.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/tutorial/mutations-updates.md#2025-04-18_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\nconst StoryLikeButtonFragment = graphql`\n  fragment StoryLikeButtonFragment on Story {\n    id\n    likeCount\n    doesViewerLike\n  }\n`;\n```\n\n----------------------------------------\n\nTITLE: Updating Story Comments Section with Composer in Relay\nDESCRIPTION: Updates the StoryCommentsSection component to include a StoryCommentsComposer, spreading its fragment into the main fragment.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/tutorial/mutations-updates.md#2025-04-18_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport StoryCommentsComposer from './StoryCommentsComposer';\n\nconst StoryCommentsSectionFragment = graphql`\n  fragment StoryCommentsSectionFragment on Story\n    ...\n  {\n    comments(after: $cursor, first: $count)\n      @connection(key: \"StoryCommentsSectionFragment_comments\")\n    {\n      ...\n    }\n    ...StoryCommentsComposerFragment\n  }\n`\n\nfunction StoryCommentsSection({story}) {\n  ...\n  return (\n    <>\n      <StoryCommentsComposer story={data} />\n      ...\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Refactoring Hovercard Component from useLazyLoadQuery to usePreloadedQuery\nDESCRIPTION: Converts the PosterDetailsHovercardContents component from using useLazyLoadQuery to usePreloadedQuery, changing the component interface to accept a query reference instead of variables.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/tutorial/queries-2.md#2025-04-18_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nimport {usePreloadedQuery} from 'react-relay';\nimport type {PreloadedQuery} from 'react-relay';\nimport type {PosterDetailsHovercardContentsQuery as QueryType} from './__generated__/PosterDetailsHovercardContentsQuery.graphql';\n\nexport default function PosterDetailsHovercardContents({\n  // change-line\n  queryRef,\n}: {\n  // change-line\n  queryRef: PreloadedQuery<QueryType>,\n}): React.ReactElement {\n  // change-line\n  const data = usePreloadedQuery(\n    PosterDetailsHovercardContentsQuery,\n    // change-line\n    queryRef,\n  );\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Example Usage of commitUpdate\nDESCRIPTION: Practical example showing how to use commitUpdate with success and failure callbacks to handle mutation results.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-classic/Classic-APIReference-Store.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar onSuccess = () => {\n  console.log('Mutation successful!');\n};\nvar onFailure = (transaction) => {\n  var error = transaction.getError() || new Error('Mutation failed.');\n  console.error(error);\n};\nvar mutation = new MyMutation({...});\n\nRelay.Store.commitUpdate(mutation, {onFailure, onSuccess});\n```\n\n----------------------------------------\n\nTITLE: Using Runtime Arguments Query\nDESCRIPTION: Demonstrates using a Relay Resolver field with runtime arguments in a query.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/guides/relay-resolvers.md#2025-04-18_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst data = useLazyLoadQuery(graphql`\n    query myQuery($id: ID, $my_arg: String!) {\n        node(id: $id) {\n           ... on MyType {\n                my_resolver_field(my_arg: $my_arg, my_other_arg: 1)\n           }\n        }\n   }\n`, { id: \"some id\", my_arg: \"hello world!\"});\n```\n\n----------------------------------------\n\nTITLE: Defining a GraphQL Mutation for Liking a Story\nDESCRIPTION: A GraphQL mutation example that marks a story as liked by the current user and fetches the updated like count, demonstrating how mutations can both perform an action and retrieve updated data.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/principles-and-architecture/thinking-in-graphql.md#2025-04-18_snippet_11\n\nLANGUAGE: graphql\nCODE:\n```\n// Give a human-readable name and define the types of the inputs,\n// in this case the id of the story to mark as liked.\nmutation StoryLike($storyID: String) {\n   // Call the mutation field and trigger its side effects\n   storyLike(storyID: $storyID) {\n     // Define fields to re-fetch after the mutation completes\n     likeCount\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Server Edge and Adding to Connection in Updater\nDESCRIPTION: This updater function retrieves the edge from a mutation payload and adds it to a connection. It uses ConnectionHandler to get the connection record and build a proper edge from the server response.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v13.0.0/guided-tour/list-data/updating-connections.md#2025-04-18_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nconst {ConnectionHandler} = require('relay-runtime');\n\nfunction updater(store: RecordSourceSelectorProxy) {\n  const storyRecord = store.get(storyID);\n  const connectionRecord = ConnectionHandler.getConnection(\n    storyRecord,\n    'StoryComponent_story_comments_connection',\n  );\n\n  // Get the payload returned from the server\n  const payload = store.getRootField('comment_create');\n\n  // Get the edge inside the payload\n  const serverEdge = payload.getLinkedRecord('comment_edge');\n\n  // Build edge for adding to the connection\n  const newEdge = ConnectionHandler.buildConnectionEdge(\n    store,\n    connectionRecord,\n    serverEdge,\n  );\n\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Relay Compiler script to package.json\nDESCRIPTION: This snippet shows how to add a script to your `package.json` file to easily run the Relay Compiler.  This allows running the compiler with `yarn relay` instead of directly invoking the `relay-compiler` executable in `node_modules`. This simplifies the build process.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/getting-started/installation-and-setup.md#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n\"scripts\": {\n  \"relay\": \"relay-compiler\"\n}\"\n```\n\n----------------------------------------\n\nTITLE: Ensuring Linked Record in Relay Store\nDESCRIPTION: The method `getOrCreateLinkedRecord` ensures retrieval or creation of a linked record when fetching by field name, allowing for optional argument usage.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/api-reference/relay-runtime/store.md#2025-04-18_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nconst rootField = store.getRootField('rootField');\nconst newViewer = rootField.getOrCreateLinkedRecord('viewer', 'User');\n```\n\n----------------------------------------\n\nTITLE: Relay Compiler Error for Disallowed ID Type\nDESCRIPTION: An example error message from the Relay compiler indicating an invalid type being used for an 'id' field on a GraphQL object.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/debugging/disallowed-id-types-error.md#2025-04-18_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nDisallowed type `String` of field `id` on parent type `Foo` cannot be used by Relay to identify entities\n```\n\n----------------------------------------\n\nTITLE: @relay(plural: Boolean) directive in GraphQL\nDESCRIPTION: The `@relay(plural: true)` directive indicates that a fragment expects a list of items instead of a single item. This example shows both a plural fragment definition and its usage.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/api-reference/graphql/graphql-directives.md#2025-04-18_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n// Plural fragment definition\ngraphql`\n  fragment TodoItems_items on TodoItem @relay(plural: true) {\n    id\n    text\n  }\n`;\n\n// Plural fragment usage: note the parent type is a list of items (`TodoItem[]`)\nfragment TodoApp_app on App {\n  items {\n    // parent type is a list here\n    ...TodoItem_items\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Story Like Mutation in GraphQL\nDESCRIPTION: GraphQL mutation example showing how to mark a story as liked and fetch updated data after the mutation.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/principles-and-architecture/thinking-in-graphql.md#2025-04-18_snippet_12\n\nLANGUAGE: graphql\nCODE:\n```\nmutation StoryLike($storyID: String) {\n   storyLike(storyID: $storyID) {\n     likeCount\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Generating ConcreteRequest with Persisted Query ID\nDESCRIPTION: Comparison of ConcreteRequest generation with and without persistConfig, showing how the query text is replaced with an MD5 hash ID.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/guides/persisted-queries.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst node/*: ConcreteRequest*/ = (function(){\n//... excluded for brevity\nreturn {\n  \"kind\": \"Request\",\n  \"operationKind\": \"query\",\n  \"name\": \"TodoItemRefetchQuery\",\n  \"id\": \"3be4abb81fa595e25eb725b2c6a87508\", // NOTE: id is now an md5 hash\n  // of the query text\n  \"text\": null, // NOTE: text is null now\n  //... excluded for brevity\n};\n})();\n```\n\n----------------------------------------\n\nTITLE: Invalidating Global Store in Relay\nDESCRIPTION: Example showing how to invalidate the entire Relay store using the invalidateStore() method within an updater function. This causes all cached data to be considered stale.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/guided-tour/reusing-cached-data/staleness-of-data.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nfunction updater(store) {\n  store.invalidateStore();\n}\n```\n\n----------------------------------------\n\nTITLE: Using Invalidation State Subscription Hook in Relay\nDESCRIPTION: Shows implementation of useSubscribeToInvalidationState hook to react to data invalidation events. This hook allows components to respond when specific records become stale.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/guided-tour/reusing-cached-data/staleness-of-data.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nfunction ProfilePage(props) {\n  // Example of querying data for the current page for a given user\n  const data = usePreloadedQuery(\n    graphql`...`,\n    props.preloadedQuery,\n  )\n\n  // Here we subscribe to changes in invalidation state for the given user ID.\n  // Whenever the user with that ID is marked as stale, the provided callback will\n  // be executed\n  useSubscribeToInvalidationState([props.userID], () => {\n    // Here we can do things like:\n    // - re-evaluate the query by passing a new preloadedQuery to usePreloadedQuery.\n    // - imperatively refetch any data\n    // - render a loading spinner or gray out the page to indicate that refetch\n    //   is happening.\n  })\n\n  return (...);\n}\n```\n\n----------------------------------------\n\nTITLE: Query Variables Type Emission in Relay with TypeScript\nDESCRIPTION: This snippet demonstrates how Relay emits type information for query variables when using TypeScript. The `ExampleQuery$variables` type enforces the shape of the variables object, requiring a readonly string `artistID`. The `useLazyLoadQuery` hook fetches data using these typed variables.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/guides/type-emission.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * export type ExampleQuery$variables = {\n *   readonly artistID: string\n * }\n * export type ExampleQuery$data = {\n *   readonly artist?: {\n *     readonly name?: string\n *   }\n * }\n * export type ExampleQuery = {\n *   readonly variables: ExampleQuery$variables\n *   readonly response: ExampleQuery$data\n * }\n */\nconst data = useLazyLoadQuery(\n  graphql`\n    query ExampleQuery($artistID: ID!) {\n      artist(id: $artistID) {\n        name\n      }\n    }\n  `,\n  // variables are expected to be of type ExampleQuery$variables\n  {artistID: 'banksy'},\n);\n```\n\n----------------------------------------\n\nTITLE: Client Schema Extension in GraphQL for Relay\nDESCRIPTION: An example of how to extend the Query type with a client-side field in Relay. This extension adds a client_field of type String that won't be sent to the server.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/api-reference/hooks/use-client-query.md#2025-04-18_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\n# example client extension of the `Query` type\nextend type Query {\n  client_field: String\n}\n```\n\n----------------------------------------\n\nTITLE: Basic GraphQL Connection Fragment\nDESCRIPTION: Example of a basic GraphQL fragment showing a friends connection without @connection directive.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/api-reference/relay-runtime/store.md#2025-04-18_snippet_21\n\nLANGUAGE: graphql\nCODE:\n```\nfragment FriendsFragment on User {\n  friends(first: 10) {\n    edges {\n      node {\n        id\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Unique IDs in Mock Resolvers for JavaScript\nDESCRIPTION: Shows how to use the generateId function in mock resolvers to create unique ID values for testing purposes.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/guides/testing-relay-components.md#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  // will generate strings \"my-id-1\", \"my-id-2\", etc.\n  ID(_, generateId) {\n     return `my-id-${generateId()}`;\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Linked Record from Relay Store\nDESCRIPTION: Shows how to retrieve a linked record from the Relay store using the getLinkedRecord method of RecordProxy.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/api-reference/relay-runtime/store.md#2025-04-18_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nconst rootField = store.getRootField('rootField');\nconst viewer = rootField.getLinkedRecord('viewer');\n```\n\n----------------------------------------\n\nTITLE: Submitting Name Update Using readUpdatableQuery in Relay\nDESCRIPTION: This snippet defines a React component 'NameUpdater' that uses the readUpdatableQuery API to update the viewer's name in response to user input. It utilizes several Relay hooks and performs a local state update on form submission.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/guided-tour/updating-data/imperatively-modifying-store-data.md#2025-04-18_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\n// NameUpdater.react.js\nfunction NameUpdater({ queryRef }: {\n  queryRef: NameUpdater_viewer$key,\n}) {\n  const environment = useRelayEnvironment();\n  const data = useFragment(\n    graphql`\n      fragment NameUpdater_viewer on Viewer {\n        name\n      }\n    `,\n    queryRef\n  );\n  const [newName, setNewName] = useState(data?.viewer?.name);\n  const onSubmit = () => {\n    commitLocalUpdate(environment, store => {\n      const {updatableData} = store.readUpdatableQuery(\n        graphql`\n          query NameUpdaterUpdateQuery @updatable {\n            viewer {\n              name\n            }\n          }\n        `,\n        {}\n      );\n      const viewer = updatableData.viewer;\n      if (viewer != null) {\n        viewer.name = newName;\n      }\n    });\n  };\n\n  // etc\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Linked Record in Relay Store\nDESCRIPTION: The `getLinkedRecord` method retrieves a record linked to the current one by a field name, supporting argument passing for variable-based linked fields.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/api-reference/relay-runtime/store.md#2025-04-18_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nconst rootField = store.getRootField('rootField');\nconst viewer = rootField.getLinkedRecord('viewer');\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst viewer = rootField.getLinkedRecord('viewer', {arg: 'value'});\n```\n\n----------------------------------------\n\nTITLE: Fetching Client-Only Data with useClientQuery\nDESCRIPTION: This code demonstrates the usage of `useClientQuery` hook for fetching data from client-only queries. The `MyComponent` uses the hook to execute a GraphQL query that retrieves the `myIp` field. The component then renders the value of `data.myIp` within a div.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/api-reference/relay-resolvers/runtime-functions.md#2025-04-18_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport {useClientQuery} from 'react-relay';\n\nexport function MyComponent() {\n  const data = useClientQuery(graphql`\n    query MyQuery {\n      myIp\n    }\n  `);\n  return <div>{data.myIp}</div>;\n}\n```\n\n----------------------------------------\n\nTITLE: GraphQL Fragment Example\nDESCRIPTION: This GraphQL fragment defines a reusable unit that selects the `name` field on the `Query` type's `actor` field. It highlights the structure of a GraphQL fragment.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/glossary/glossary.md#2025-04-18_snippet_4\n\nLANGUAGE: graphql\nCODE:\n```\nfragment Bar on Query {\n  actor { name }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting up and running Relay documentation locally using shell commands\nDESCRIPTION: A shell script that demonstrates how to clone the Relay repository, navigate to the website directory, install dependencies with yarn, and start the local documentation server. Once executed, the documentation will be accessible at localhost:3000.\nSOURCE: https://github.com/facebook/relay/blob/main/website/README.md#2025-04-18_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ngit clone git@github.com:facebook/relay.git\n# or git clone https://github.com/facebook/relay.git\ncd relay/website/\nyarn\nyarn start\n```\n\n----------------------------------------\n\nTITLE: @connection directive in GraphQL\nDESCRIPTION: The `@connection` directive is used in conjunction with `usePaginationFragment` in Relay to manage pagination on connection fields. This snippet indicates how to annotate connection fields properly.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/api-reference/graphql/graphql-directives.md#2025-04-18_snippet_3\n\nLANGUAGE: graphql\nCODE:\n```\n@connection(key: String!, filters: [String])\n```\n\n----------------------------------------\n\nTITLE: GraphQL Type Refinement with Node Interface\nDESCRIPTION: Shows how to refine a GraphQL interface type to a concrete type using inline fragments. This example demonstrates querying the Node interface and accessing User-specific fields.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v13.0.0/glossary/glossary.md#2025-04-18_snippet_8\n\nLANGUAGE: graphql\nCODE:\n```\nquery MyQuery { node(id: 4) { ... on User { name } } }\n```\n\n----------------------------------------\n\nTITLE: Deletion Subscription with DeleteRecord Directive\nDESCRIPTION: Demonstrates how to use the @deleteRecord directive in a subscription to handle item deletion.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/guided-tour/updating-data/graphql-subscriptions.md#2025-04-18_snippet_5\n\nLANGUAGE: graphql\nCODE:\n```\nsubscription DeletePostSubscription($input: DeletePostSubscribeData!) {\n  delete_post_subscribe(data: $input) {\n    deleted_post {\n      id @deleteRecord\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: GraphQL Subscription Payload Example\nDESCRIPTION: This JSON snippet demonstrates the structure of a subscription payload received by the client.  It contains the updated `feedback` data, including the `id` and `like_count`.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/guided-tour/updating-data/graphql-subscriptions.md#2025-04-18_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"feedback_like_subscribe\": {\n    \"feedback\": {\n      \"id\": \"feedback-id\",\n      \"like_count\": 321,\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Error Boundary with Retry for useLazyLoadQuery Pattern\nDESCRIPTION: An Error Boundary implementation with retry functionality for Relay's useLazyLoadQuery pattern. This uses a fetchKey mechanism to trigger re-evaluation of the query component when retrying.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v13.0.0/guided-tour/rendering/error-states.md#2025-04-18_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * ErrorBoundaryWithRetry.react.js\n */\n\nconst React = require('React');\n\n// NOTE: This is NOT actual production code;\n// it is only used to illustrate example\nclass ErrorBoundaryWithRetry extends React.Component<Props, State> {\n  state = {error: null, fetchKey: 0};\n\n  static getDerivedStateFromError(error): State {\n    return {error: error, fetchKey: 0};\n  }\n\n  _retry = () => {\n    this.setState(prev => ({\n      // Clear the error\n      error: null,\n      // Increment and set a new fetchKey in order\n      // to trigger a re-evaluation and refetching\n      // of the query using useLazyLoadQuery\n      fetchKey: prev.fetchKey + 1,\n    }));\n  }\n\n  render() {\n    const {children, fallback} = this.props;\n    const {error, fetchKey} = this.state;\n    if (error) {\n      if (typeof fallback === 'function') {\n        return fallback({error, retry: this._retry});\n      }\n      return fallback;\n    }\n    return children({fetchKey});\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Store Update Logic\nDESCRIPTION: Implementation of onClick handler using commitLocalUpdate and readUpdatableQuery to update the best_friend field.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/guided-tour/updating-data/imperatively-modifying-linked-fields.md#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport type {RecordSourceSelectorProxy} from 'react-relay';\n\nconst {commitLocalUpdate, useRelayEnvironment} = require('react-relay');\n\n// ...\n\nconst environment = useRelayEnvironment();\nconst onClick = () => {\n  const updatableData = commitLocalUpdate(\n    environment,\n    (store: RecordSourceSelectorProxy) => {\n      const {updatableData} = store.readUpdatableQuery(\n          graphql`\n            query AssignBestFriendButtonUpdatableQuery\n            @updatable {\n              viewer {\n                best_friend {\n                  ...AssignableBestFriendButton_assignable_user\n                }\n              }\n            }\n          `,\n          {}\n        );\n\n      if (data.user != null && updatableData.viewer != null) {\n        updatableData.viewer.best_friend = data.user;\n      }\n    }\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Generating Sequential IDs in Relay Mock Resolvers\nDESCRIPTION: Example of using the generateId function in mock resolvers to create sequences of unique IDs. This is useful for ensuring unique identifiers in test data.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v13.0.0/guides/testing-relay-components.md#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  // will generate strings \"my-id-1\", \"my-id-2\", etc.\n  ID(_, generateId) {\n     return `my-id-${generateId()}`;\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Defining EntryPointContainer Component in React/Relay\nDESCRIPTION: React component definition for EntryPointContainer that handles rendering of preloaded EntryPoints. Takes entryPointReference (from loadEntryPoint or useEntryPointLoader) and runtime props as parameters, returning a ReactElement.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/api-reference/entrypoint-apis/entrypoint-container.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nfunction EntryPointContainer({\n  entryPointReference,\n  props,\n}: {\n  +entryPointReference: PreloadedEntryPoint<TEntryPointComponent>,\n  +props: TRuntimeProps,\n}): ReactElement\n```\n\n----------------------------------------\n\nTITLE: ID Generation Mock Resolver in JavaScript\nDESCRIPTION: Example of using the generateId function to create unique sequential IDs in mock data.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/guides/testing-relay-components.md#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  // will generate strings \"my-id-1\", \"my-id-2\", etc.\n  ID(_, generateId) {\n     return `my-id-${generateId()}`;\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Provided Variables with @argumentDefinitions\nDESCRIPTION: Example showing how to use provided variables in a fragment with @argumentDefinitions and its corresponding provider implementation.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/api-reference/graphql/graphql-directives.md#2025-04-18_snippet_2\n\nLANGUAGE: graphql\nCODE:\n```\nfragment TodoItem_item on TodoList\n@argumentDefinitions(\n  include_timestamp: {\n    type: \"Boolean!\",\n    provider: \"Todo_ShouldIncludeTimestamp.relayprovider\"\n  },\n) {\n  timestamp @include(if: $include_timestamp)\n  text\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// Todo_ShouldIncludeTimestamp.relayprovider.js\nexport default {\n  get(): boolean {\n    // must always return true or false for a given run\n    return check('todo_should_include_timestamp');\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Assigning to Interface Field in Relay\nDESCRIPTION: Example of assigning to a field with an interface type (Actor) when the source is guaranteed to implement that interface, using Relay fragments and local updates.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/guided-tour/updating-data/imperatively-modifying-linked-fields.md#2025-04-18_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\ngraphql`\n  fragment Foo_actor on Actor @assignable {\n    __typename\n  }\n`;\n\nconst data = useFragment(graphql`\n  fragment Foo_query on Query {\n    user {\n      ...Foo_actor\n    }\n    viewer {\n      actor {\n        ...Foo_actor\n      }\n    }\n  }\n`, queryRef);\n\nconst environment = useRelayEnvironment();\nconst onClick = () => {\n  commitLocalUpdate(environment, store => {\n    const {updatableData} = store.readUpdatableQuery(\n      graphql`\n        query FooUpdatableQuery @updatable {\n          viewer {\n            actor {\n              ...Foo_actor\n            }\n          }\n        }\n      `,\n      {}\n    );\n\n    // Assigning the user works as you would expect\n    if (updatableData.viewer != null && data.user != null) {\n      updatableData.viewer = data.user;\n    }\n\n    // As does assigning the viewer\n    if (updatableData.viewer != null && data.viewer?.actor != null) {\n      updatableData.viewer = data.viewer.actor;\n    }\n  });\n};\n```\n\n----------------------------------------\n\nTITLE: Querying User Data with Global Variables - GraphQL\nDESCRIPTION: This GraphQL snippet demonstrates how to declare and use a global variable in a query to retrieve user data. The variable `$id` is required and must be provided as part of the input when executing the query.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/guided-tour/rendering/variables.md#2025-04-18_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nquery UserQuery($id: ID!) {\n  # The value of $id is used as input to the user() call:\n  user(id: $id) {\n    id\n    name\n  }\n}\n```\n\nLANGUAGE: graphql\nCODE:\n```\n# Variables:\n{\"id\": 4}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"user\": {\n      \"id\": \"4\",\n      \"name\": \"Mark Zuckerberg\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Query with Fragment Arguments\nDESCRIPTION: GraphQL query demonstrating how to consume a derived resolver field that requires fragment arguments. Shows the syntax for passing the salutation argument to the fancyGreeting field.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/guides/relay-resolvers/field-arguments.md#2025-04-18_snippet_3\n\nLANGUAGE: graphql\nCODE:\n```\nquery MyQuery($salutation: String!) {\n  me {\n    fancyGreeting(salutation: $salutation)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: GraphQL Query Example\nDESCRIPTION: Shows how GraphQL allows clients to request specific fields, demonstrating its flexible query capability.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/tutorial/graphql.md#2025-04-18_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  person(id: \"24601\") {\n    name\n    occupation\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: GraphQL Story Query Example\nDESCRIPTION: Example of a GraphQL query fetching story data with author information.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/principles-and-architecture/thinking-in-graphql.md#2025-04-18_snippet_4\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  story(id: \"1\") {\n    text,\n    author {\n      name\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Eliminating Redundant Field Fetches with SkipRedundantNodeTransform\nDESCRIPTION: Advanced query optimization technique that removes duplicate field fetches, especially in conditional and unconditional scenarios.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v13.0.0/principles-and-architecture/compiler-architecture.md#2025-04-18_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\n# before: `id` processed up to 2x\nfoo {\n  bar {\n    id\n  }\n  ... on FooType @include(if: $cond) { # can't be flattened due to conditional\n    id # but this field is guaranteed to be fetched regardless\n  }\n}\n\n# after: `id` processed at most once\nfoo {\n  bar {\n    id\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Spreading ImageFragment in PosterBylineFragment (GraphQL)\nDESCRIPTION: GraphQL fragment definition for PosterByline component that includes spread of ImageFragment for the profilePicture field, showing fragment reuse across components.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/tutorial/fragments-1.md#2025-04-18_snippet_7\n\nLANGUAGE: graphql\nCODE:\n```\nconst PosterBylineFragment = graphql`\n  fragment PosterBylineFragment on Actor {\n    name\n    profilePicture {\n      // change-line\n      ...ImageFragment\n    }\n  }\n`;\n```\n\n----------------------------------------\n\nTITLE: Using Mock Resolver Context in JavaScript\nDESCRIPTION: This snippet demonstrates how to use the context object in mock resolvers to return dynamic values based on field names, paths, or parent types.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/guides/testing-relay-components.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  String(context) {\n    if (context.name === 'zip') {\n      return '94025';\n    }\n    if (context.path != null && context.path.join('.') === 'node.actor.name') {\n      return 'Current Actor Name';\n    }\n    if (context.parentType === 'Image' && context.name === 'uri') {\n       return 'http://my-image.url';\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic GraphQL Friends Connection Example\nDESCRIPTION: A simplified example fragment showing how edge properties are represented in a GraphQL connection pattern. This demonstrates the concept of separating edge properties from node properties.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/tutorial/connections-pagination.md#2025-04-18_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\n// XXX example only, not final code\nfragment FriendsFragment1 on Viewer {\n  friends {\n    since // a property of the edge\n    node {\n      name // a property of the friend itself\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using @relay(plural) Directive in Fragment\nDESCRIPTION: Example demonstrating how to use the @relay directive with plural flag to handle lists of items in a fragment.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/api-reference/graphql/graphql-directives.md#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// Plural fragment definition\ngraphql`\n  fragment TodoItems_items on TodoItem @relay(plural: true) {\n    id\n    text\n  }\n`;\n\n// Plural fragment usage: note the parent type is a list of items (`TodoItem[]`)\nfragment TodoApp_app on App {\n  items {\n    // parent type is a list here\n    ...TodoItem_items\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Extending the Viewer type with a best_friend field (GraphQL)\nDESCRIPTION: This GraphQL code extends the `Viewer` type to include a `best_friend` field, which is of type `User`. This extension allows the application to store and manage the viewer's best friend.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/guided-tour/updating-data/imperatively-modifying-linked-fields.md#2025-04-18_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\n\"extend type Viewer {\\n  best_friend: User,\\n}\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Relay Compiler in package.json\nDESCRIPTION: This code snippet shows how to configure the Relay compiler within the `package.json` file. It defines scripts to run the compiler before starting or building the app, and specifies the source directory, schema file, and language for the compiler.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/getting-started/step-by-step-guide.md#2025-04-18_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n\"// your-app-name/package.json\n{\n  ...\n  \\\"scripts\\\": {\n    ...\n    \\\"start\\\": \\\"yarn run relay && react-scripts start\\\",\n    \\\"build\\\": \\\"yarn run relay && react-scripts build\\\",\n    \\\"relay\\\": \\\"yarn run relay-compiler\\\"\\n    ...\n  },\n  \\\"relay\\\": {\n    \\\"src\\\": \\\"./src/\\\",\n    \\\"schema\\\": \\\"./schema.graphql\\\",\n    \\\"language\\\": \\\"javascript\\\"\n  }\n  ...\n}\"\n```\n\n----------------------------------------\n\nTITLE: Defining an Author Resolver with Description in TypeScript\nDESCRIPTION: This snippet demonstrates how to define a Relay Resolver for an Author type in TypeScript, including a detailed docblock description of the type. The description enhances readability and provides context for users of the schema.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/guides/relay-resolvers/descriptions.md#2025-04-18_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n/**\n * @RelayResolver Author\n *\n * An author in our **amazing** CMS. Authors can\n * write posts but not necessarily change their permissions.\n */\nexport function Author(id: DataID): AuthorModel {\n  return AuthorService.getById(id);\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Relay Hooks Dependencies\nDESCRIPTION: Commands to install the required dependencies for using Relay Hooks with React.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/migration-and-compatibility/upgrading-to-relay-hooks.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn add react react-dom react-relay\n```\n\n----------------------------------------\n\nTITLE: Import StoryCommentsComposer and Update StoryCommentsSectionFragment\nDESCRIPTION: This snippet shows how to import a `StoryCommentsComposer` component and include its fragment in the `StoryCommentsSectionFragment`. It also demonstrates how to render the `StoryCommentsComposer` component within the `StoryCommentsSection` component, passing the necessary data.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/tutorial/mutations-updates.md#2025-04-18_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\n// change-line\nimport StoryCommentsComposer from './StoryCommentsComposer';\n\nconst StoryCommentsSectionFragment = graphql`\n  fragment StoryCommentsSectionFragment on Story\n    ...\n  {\n    comments(after: $cursor, first: $count)\n      @connection(key: \"StoryCommentsSectionFragment_comments\")\n    {\n      ...\n    }\n    // change-line\n    ...StoryCommentsComposerFragment\n  }\n`\n\nfunction StoryCommentsSection({story}) {\n  ...\n  return (\n    <>\n      // change-line\n      <StoryCommentsComposer story={data} />\n      ...\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Description to Author.fullName Field in Relay Resolver (TSX)\nDESCRIPTION: This snippet shows how to add a description to the fullName field of the Author type in a Relay Resolver. The description explains what the field represents and includes a link for additional information.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/guides/relay-resolvers/descriptions.md#2025-04-18_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n/**\n * @RelayResolver Author.fullName: String\n *\n * The author's first and last name. Does not include\n * any [honorifics](https://en.wikipedia.org/wiki/Honorific).\n */\nexport function fullName(author: AuthorModel): string {\n  return `${author.firstName} ${author.lastName}`;\n}\n```\n\n----------------------------------------\n\nTITLE: Suppressing Data Masking with @relay(mask: false)\nDESCRIPTION: The `@relay(mask: false)` directive permits bypassing the usual data masking that Relay enforces. By disabling masking, data can be accessed directly by the parent without intermediary containers, hence modifying the generated Flow types. Despite its utility in certain contexts, this approach is generally discouraged due to the risk of over-fetching, and should be used sparingly.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/api-reference/graphql/graphql-directives.md#2025-04-18_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\ngraphql`\n  fragment Component_internUser on InternUser @relay(mask: false) {\n    id\n    name\n  }\n`;\n```\n\n----------------------------------------\n\nTITLE: Querying Rebels First Ship\nDESCRIPTION: This GraphQL query retrieves the name of the first ship associated with the Rebels faction using the `first` argument on the `ships` connection.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v13.0.0/guides/graphql-server-specification.md#2025-04-18_snippet_9\n\nLANGUAGE: graphql\nCODE:\n```\n\"\"\"\nquery RebelsShipsQuery {\n  rebels {\n    name,\n    ships(first: 1) {\n      edges {\n        node {\n          name\n        }\n      }\n    }\n  }\n}\n\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Defining Strong Type with Flow Syntax\nDESCRIPTION: Alternative example using Flow syntax to define a strong type with @RelayResolver.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/guides/relay-resolvers/defining-types.md#2025-04-18_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n/**\n * @RelayResolver\n */\nexport function User(id: DataID): UserModel {\n  return UserService.getById(id);\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a GraphQL Query using Relay\nDESCRIPTION: This snippet defines a GraphQL query named `DictionaryQuery` which retrieves data from the 'dictionary'. The query utilizes the previously defined fragment `DictionaryComponent_word` to specify the structure of the requested data related to dictionary entries.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-experimental/Modern-GraphQLInRelay.md#2025-04-18_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst DictionaryQuery = graphql`\n  query DictionaryQuery {\n    dictionary {\n      ...DictionaryComponent_word\n    }\n  }\n`\n```\n\n----------------------------------------\n\nTITLE: GraphQL Fragment with Connection\nDESCRIPTION: This GraphQL fragment defines a connection on the `comments` field of a `Story` type. It uses the `@connection` directive to specify a key, which is used to access the connection in the Relay store. The fragment queries for the `body.text` of each comment node.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/guided-tour/list-data/updating-connections.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst {graphql} = require('react-relay');\n\nconst storyFragment = graphql`\n  fragment StoryComponent_story on Story {\n    comments @connection(key: \"StoryComponent_story_comments_connection\") {\n      nodes {\n        body {\n          text\n        }\n      }\n    }\n  }\n`;\n```\n\n----------------------------------------\n\nTITLE: Defining GraphQL Schema for Star Wars Factions and Ships\nDESCRIPTION: This code defines the GraphQL schema for the Star Wars universe, implementing interfaces and types for Factions and Ships in Relay. It includes types such as Node, Faction, Ship, ShipConnection, and PageInfo to support querying and pagination functionality.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/guides/graphql-server-specification.md#2025-04-18_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\ninterface Node {\n  id: ID!\n}\n\ntype Faction implements Node {\n  id: ID!\n  name: String\n  ships: ShipConnection\n}\n\ntype Ship implements Node {\n  id: ID!\n  name: String\n}\n\ntype ShipConnection {\n  edges: [ShipEdge]\n  pageInfo: PageInfo!\n}\n\ntype ShipEdge {\n  cursor: String!\n  node: Ship\n}\n\ntype PageInfo {\n  hasNextPage: Boolean!\n  hasPreviousPage: Boolean!\n  startCursor: String\n  endCursor: String\n}\n\ntype Query {\n  rebels: Faction\n  empire: Faction\n  node(id: ID!): Node\n}\n```\n\n----------------------------------------\n\nTITLE: Appending Required Children in Create Coupon Mutation with Relay\nDESCRIPTION: This mutation is structured to create a new coupon and includes additional fields that need to be fetched as part of the mutation process, utilizing REQUIRED_CHILDREN to ensure data retrieval even without prior fetches.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-classic/Classic-Guides-Mutations.md#2025-04-18_snippet_9\n\nLANGUAGE: JavaScript\nCODE:\n```\nclass CreateCouponMutation extends Relay.Mutation<Props> {\n  getMutation() {\n    return Relay.QL`mutation {\n      create_coupon(data: $input)\n    }`;\n  }\n\n  getFatQuery() {\n    return Relay.QL`\n      // Note the use of `pattern: true` here to show that this\n      // connection field is to be used for pattern-matching only\n      // (to determine what to fetch) and that Relay shouldn't\n      // require the usual connection arguments like (`first` etc)\n      // to be present.\n      fragment on CouponCreatePayload @relay(pattern: true) {\n        coupons\n      }\n    `;\n  }\n\n  getConfigs() {\n    return [{\n      // If we haven't shown the coupons in the UI at the time the\n      // mutation runs, they've never been fetched and the `coupons`\n      // field in the fat query would normally be ignored.\n      // `REQUIRED_CHILDREN` forces it to be retrieved anyway.\n      type: RelayMutationType.REQUIRED_CHILDREN,\n      children: [\n        Relay.QL`\n          fragment on CouponCreatePayload {\n            coupons\n          }\n        `,\n      ],\n    }];\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Defining and Using Validators for Interface Type Assignment\nDESCRIPTION: Example of generated validator function that checks if a value can be assigned to an interface type. This is used when assigning from types that aren't guaranteed to implement the target interface.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/guided-tour/updating-data/imperatively-modifying-linked-fields.md#2025-04-18_snippet_10\n\nLANGUAGE: js\nCODE:\n```\nfunction validate(value/*: {\n  +__id: string,\n  +__isFoo_actor?: string,\n  +$fragmentSpreads: Foo_actor$fragmentType,\n  ...\n}*/)/*: false | {\n  +__id: string,\n  +__isFoo_actor: string,\n  +$fragmentSpreads: Foo_actor$fragmentType,\n  ...\n}*/ {\n  return value.__isFoo_actor != null ? (value/*: any*/) : false;\n}\n```\n\n----------------------------------------\n\nTITLE: Using ConnectionHandler.getConnection\nDESCRIPTION: Example demonstrating how to use ConnectionHandler to access a connection with @connection directive.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/api-reference/relay-runtime/store.md#2025-04-18_snippet_24\n\nLANGUAGE: javascript\nCODE:\n```\nimport {ConnectionHandler} from 'relay-runtime';\n\n// The `friends` connection record can be accessed with:\nconst user = store.get(userID);\nconst friends = ConnectionHandler.getConnection(\n user,                        // parent record\n 'FriendsFragment_friends',   // connection key\n {orderby: 'firstname'}       // 'filters' that is used to identify the connection\n);\n// Access fields on the connection:\nconst edges = friends.getLinkedRecords('edges');\n```\n\n----------------------------------------\n\nTITLE: Server-Received GraphQL Fragment\nDESCRIPTION: Demonstrates how the server receives and processes the @module directive, including component and normalization references.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/guides/data-driven-dependencies/server-3d.md#2025-04-18_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\nfragment Comment_comment on Comment {\n  image {\n    ... on CommentImage {\n       ...CommentImage_image\n       __component: js(\"CommentImage.react\")\n       __fragment: js(\"CommentImage_image$normalization.graphql\")\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Relay Environment with Error Logger in JavaScript\nDESCRIPTION: Implements a field logger function in JavaScript to handle errors from Relay Resolvers. The logger checks for errors of type 'relay_resolver.error' and logs the error details, including the owner and field path. This snippet demonstrates integrating the logger into the Relay environment for capturing and handling errors dynamically.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/guides/relay-resolvers/errors.md#2025-04-18_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nfunction fieldLogger(event) {\n  if(event.kind === \"relay_resolver.error\") {\n    // Log this somewhere!\n    console.warn(`Resolver error encountered in ${event.owner}.${event.fieldPath}`)\n    console.warn(event.error)\n  }\n}\n\nconst environment = new Environment({\n  network: Network.create(/* your fetch function here */),\n  store: new LiveResolverStore(new RecordSource()),\n  relayFieldLogger: fieldLogger\n});\n```\n\n----------------------------------------\n\nTITLE: Passing Arguments to ImageFragment in PosterBylineFragment using GraphQL\nDESCRIPTION: This code snippet demonstrates passing both the `width` and `height` arguments to the `ImageFragment` when spreading it in the `PosterBylineFragment`. This allows the `PosterBylineFragment` to request a specific width and height for the profile picture image.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/tutorial/fragments-1.md#2025-04-18_snippet_14\n\nLANGUAGE: graphql\nCODE:\n```\nconst PosterBylineFragment = graphql`\n  fragment PosterBylineFragment on Actor {\n    name\n    profilePicture {\n      // change-line\n      ...ImageFragment @arguments(width: 60, height: 60)\n    }\n  }\n`;\n```\n\n----------------------------------------\n\nTITLE: Fetching Multiple Rebel Ships with Cursors\nDESCRIPTION: Illustrates how to use cursors and pagination to fetch more than one ship from the Rebels faction, using `first` argument and retrieving cursor values.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/guides/graphql-server-specification.md#2025-04-18_snippet_6\n\nLANGUAGE: graphql\nCODE:\n```\nquery MoreRebelShipsQuery { rebels { name ships(first: 2) { edges { cursor node { name } } } } }\n```\n\n----------------------------------------\n\nTITLE: Using @relay Directive in GraphQL\nDESCRIPTION: The @relay directive is used to turn off data masking and is applied on plural types. It provides more control over how Relay handles certain GraphQL types.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/glossary/glossary.md#2025-04-18_snippet_9\n\nLANGUAGE: GraphQL\nCODE:\n```\n@relay\n```\n\n----------------------------------------\n\nTITLE: GraphQL Error Handling Schema Design\nDESCRIPTION: Illustrates a way to model error handling in a GraphQL schema. This schema excerpt shows defining types where a field can return either a Result or an Error object, providing a user-friendly message via the Error type.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/guided-tour/rendering/error-states.md#2025-04-18_snippet_4\n\nLANGUAGE: js\nCODE:\n```\ntype Error {\n  # User friendly message\n  message: String!\n}\n\ntype Foo {\n  bar: Result | Error\n}\n```\n\n----------------------------------------\n\nTITLE: Parent Fragment Component with Composition\nDESCRIPTION: A parent React component that includes a child fragment and passes the fragment reference to the child component, demonstrating fragment composition with component composition.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v13.0.0/guided-tour/rendering/fragments.md#2025-04-18_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * UserComponent.react.js\n *\n * Parent Fragment Component\n */\n\nimport type {UserComponent_user$key} from 'UserComponent_user.graphql';\n\nconst React = require('React');\nconst {graphql, useFragment} = require('react-relay');\n\nconst UsernameSection = require('./UsernameSection.react');\n\ntype Props = {\n  user: UserComponent_user$key,\n};\n\nfunction UserComponent(props: Props) {\n  const user = useFragment(\n    graphql`\n      fragment UserComponent_user on User {\n        name\n        age\n        profile_picture(scale: 2) {\n          uri\n        }\n\n        # Include child fragment:\n        ...UsernameSection_user\n      }\n    `,\n    props.user,\n  );\n\n  return (\n    <>\n      <h1>{user.name}</h1>\n      <div>\n        <img src={user.profile_picture?.uri} />\n        {user.age}\n\n        {/* Render child component, passing the _fragment reference_: */}\n        <UsernameSection user={user} />\n      </div>\n    </>\n  );\n}\n\nmodule.exports = UserComponent;\n```\n\n----------------------------------------\n\nTITLE: Defining a Strong Type with Relay Resolver - TypeScript\nDESCRIPTION: This snippet demonstrates how to define a strong GraphQL type using the @RelayResolver tag. The function accepts an ID of the type and returns an instance of the type's model using the UserService.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/guides/relay-resolvers/defining-types.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * @RelayResolver User\n */\nexport function User(id: DataID): UserModel {\n  return UserService.getById(id);\n}\n```\n\n----------------------------------------\n\nTITLE: Using Provided Variables in GraphQL with JavaScript\nDESCRIPTION: Provided variables in GraphQL allow fragment variables to get their values from a provider function defined at runtime. This is crucial for handling device-specific or experiment flag-based data. The example outlines defining a provided variable using `@argumentDefinitions` with `provider` and implements it in JavaScript by returning a consistent boolean value across runs, using `check()` function.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/api-reference/graphql/graphql-directives.md#2025-04-18_snippet_2\n\nLANGUAGE: graphql\nCODE:\n```\nfragment TodoItem_item on TodoList\n@argumentDefinitions(\n  include_timestamp: {\n    type: \"Boolean!\",\n    provider: \"Todo_ShouldIncludeTimestamp.relayprovider\"\n  },\n) {\n  timestamp @include(if: $include_timestamp)\n  text\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Refetchable Directive to ContactsList\nDESCRIPTION: GraphQL fragment with @refetchable directive for enabling fragment refetching.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/tutorial/refetchable-fragments.md#2025-04-18_snippet_4\n\nLANGUAGE: graphql\nCODE:\n```\nconst ContactsListFragment = graphql`\n  fragment ContactsListFragment on Viewer\n    @refetchable(queryName: \"ContactsListRefetchQuery\")\n    @argumentDefinitions(\n      search: {type: \"String\", defaultValue: null}\n    )\n  {\n     // ...\n  }\n`;\n```\n\n----------------------------------------\n\nTITLE: Querying Local State with useLazyLoadQuery (JavaScript/React)\nDESCRIPTION: Demonstrates how to query both server and local data using useLazyLoadQuery, including the locally defined notes field.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/guides/client-schema-extensions.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// Example.js\nimport * as React from 'react';\nimport { useLazyLoadQuery, graphql } from 'react-relay';\n\nconst Example = (props) => {\n  const data = useLazyLoadQuery(graphql`\n    query ExampleQuery {\n      viewer {\n        id\n        name\n        notes {\n          id\n          title\n          body\n        }\n      }\n    }\n  `, {});\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Using commitPayload to Write Query Data to Relay Store\nDESCRIPTION: This snippet shows how to use the commitPayload API to write a query payload directly to the Relay Store. It creates an OperationDescriptor and then commits a payload that will be resolved like a normal server response.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v13.0.0/guided-tour/updating-data/local-data-updates.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport type {FooQueryRawResponse} from 'FooQuery.graphql'\n\nconst {createOperationDescriptor} = require('relay-runtime');\n\nconst operationDescriptor = createOperationDescriptor(FooQuery, {\n  id: 'an-id',\n  otherVariable: 'value',\n});\n\nconst payload: FooQueryRawResponse = {...};\n\nenvironment.commitPayload(operation, payload);\n```\n\n----------------------------------------\n\nTITLE: Invalidating a Record in JavaScript\nDESCRIPTION: Demonstrates how to invalidate a record in the Relay store, causing queries referencing it to be considered stale.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/api-reference/relay-runtime/store.md#2025-04-18_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nconst record = store.get('4');\nrecord.invalidateRecord();\n```\n\n----------------------------------------\n\nTITLE: Loading Relay EntryPoint Example\nDESCRIPTION: Demonstrates how to load an EntryPoint using loadEntryPoint function with an environment provider and entry point parameters. This example shows basic usage but omits proper disposal of the EntryPoint reference.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/api-reference/entrypoint-apis/load-entrypoint.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst EntryPoint = require('MyComponent.entrypoint.js');\n\nconst {loadQuery} = require('react-relay');\n\n// Generally, your component should access the environment from the React context,\n// and pass that environment to this function.\nconst getEntrypointReference = environment => loadEntryPoint(\n  { getEnvironment: () => environment },\n  EntryPoint,\n  {id: '4'},\n);\n\n// later: pass entryPointReference to EntryPointContainer\n// Note that EntryPoint references should have .dispose() called on them,\n// which is missing in this example.\n```\n\n----------------------------------------\n\nTITLE: Using QueryRenderer in React Component\nDESCRIPTION: Example of a React component using the legacy QueryRenderer approach to fetch and render data from a GraphQL query.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/migration-and-compatibility/relay-hooks-and-legacy-container-apis.md#2025-04-18_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport * as React from 'React';\nimport {graphql, QueryRenderer} from 'react-relay';\n\nexport default function Home() {\n  return (\n    <QueryRenderer\n      environment={MyAppEnvironment}\n      query={graphql`\n        query HomeQuery($id: ID!) {\n          user(id: $id) {\n            name\n          }\n        }\n      `}\n      variables={{id: 4}}\n      render={(props, error) => {\n        if (error) {\n          return <Error />;\n        }\n        if (!props) {\n          return <Loading />;\n        }\n        return <h1>{props.user?.name}</h1>\n      }}\n    />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Consuming a Resolver Field in a React Component\nDESCRIPTION: Example of how to use a Relay Resolver field in a React component. This component uses the 'greeting' field from a User object to display a personalized greeting.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/guides/relay-resolvers.md#2025-04-18_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nfunction MyGreeting({userKey}) {\n  const user = useFragment(`\n    fragment MyGreeting on User {\n      greeting\n    }`, userKey);\n  return <h1>{user.greeting}</h1>;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Streaming Pagination with usePaginationFragment in React and Relay\nDESCRIPTION: This code snippet demonstrates how to use the usePaginationFragment hook with the @stream_connection directive to implement streaming pagination. It fetches friends data incrementally, allowing for faster initial rendering of available items.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/guided-tour/list-data/streaming-pagination.md#2025-04-18_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport type {FriendsListComponent_user$key} from 'FriendsList_user.graphql';\n\nconst React = require('React');\n\nconst {graphql, usePaginationFragment} = require('react-relay');\n\ntype Props = {\n  user: FriendsListComponent_user$key,\n};\n\nfunction FriendsListComponent(props: Props) {\n  // ...\n\n  const {\n    data,\n    loadNext,\n    hasNext,\n  } = usePaginationFragment(\n    graphql`\n      fragment FriendsListComponent_user on User\n      @refetchable(queryName: \"FriendsListPaginationQuery\") {\n        name\n        friends(first: $count, after: $cursor)\n        @stream_connection(key: \"FriendsList_user_friends\", initial_count: 2,) {\n          edges {\n            node {\n              name\n              age\n            }\n          }\n        }\n      }\n    `,\n    props.user,\n  );\n\n  return (...);\n}\n\nmodule.exports = FriendsListComponent;\n```\n\n----------------------------------------\n\nTITLE: Implementing Client 3D Component in React\nDESCRIPTION: This JSX snippet demonstrates how to implement a Client 3D component in React using Relay. It defines separate fragments for each concrete type, adds the @module directive, and uses Relay's MatchContainer for rendering.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/guides/data-driven-dependencies/client-3d.md#2025-04-18_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nconst {graphql, useFragment, useClientQuery, MatchContainer} = require('react-relay');\n\ncomponent Client3DRelayRenderer() {\n  const FOO_FRAGMENT = graphql`\n    fragment Client3DFooComponent_Fragment on Client3DFoo {\n      data {\n        type\n        info\n      }\n    }\n  `;\n  const BAR_FRAGMENT = graphql`\n    fragment Client3DBarComponent_Fragment on Client3DBar {\n      data {\n        type\n        info\n      }\n    }\n  `;\n  const HELLO_WORLD_FRAGMENT = graphql`\n    fragment Client3DHelloWorldComponent_Fragment on Client3DHelloWorld {\n      data {\n        type\n        info\n      }\n    }\n  `;\n  const client3DData = useClientQuery(\n    graphql`\n      query Client3DRelayQuery {\n        client3D {\n          ...Client3DFooComponent_Fragment\n            @module(name: \"Client3DFooComponent.react\")\n          ...Client3DBarComponent_Fragment\n            @module(name: \"Client3DBarComponent.react\")\n          ...Client3DHelloWorldComponent_Fragment\n            @module(name: \"Client3DHelloWorldComponent.react\")\n        }\n      }\n    `\n  );\n  return (\n    <MatchContainer match={client3DData.client3D} />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Component Behavior and Pagination Logic - JavaScript\nDESCRIPTION: This snippet elaborates on component behavior related to data subscription and re-rendering based on data updates, as well as specific behaviors regarding pagination methods and the conditions under which the component may suspend or continuously render updated data.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/api-reference/hooks/use-pagination-fragment.md#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n* The component is automatically subscribed to updates to the fragment data: if the data for this particular `User` is updated anywhere in the app (e.g. via fetching new data, or mutating existing data), the component will automatically re-render with the latest updated data.\n* The component will suspend if any data for that specific fragment is missing, and the data is currently being fetched by a parent query.\n    * For more details on Suspense, see our [Loading States with Suspense](../../guided-tour/rendering/loading-states/) guide.\n* Note that pagination (`loadNext` or `loadPrevious`), *will not* cause the component to suspend.\n```\n\n----------------------------------------\n\nTITLE: Defining Mock Resolvers for Object Types in Relay Tests\nDESCRIPTION: Example of creating mock resolvers for GraphQL object types like User. This shows how to return structured objects with predefined values for specific fields.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v13.0.0/guides/testing-relay-components.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  // This will be the default values for User object in the query response\n  User() {\n    return {\n      id: 4,\n      name: \"Mark\",\n      profile_picture: {\n        uri: \"http://my-image...\",\n      },\n    };\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Babel Plugin for Relay Artifact Directory\nDESCRIPTION: This snippet demonstrates how to configure the Babel plugin in .babelrc to specify the location of the artifact directory. This ensures that Babel can locate and process the generated artifacts correctly.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/guides/type-emission.md#2025-04-18_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"plugins\": [\n    [\"relay\", { \"artifactDirectory\": \"./src/__generated__\" }]\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring FIELDS_CHANGE Mutator in Relay Classic\nDESCRIPTION: Demonstrates how to configure a mutation to update specific fields in the client-side store using the FIELDS_CHANGE type.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-classic/Classic-Guides-Mutations.md#2025-04-18_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nclass RenameDocumentMutation extends Relay.Mutation {\n  static fragments = {\n    document: () => Relay.QL`fragment on Document { id }`,\n  };\n  getFatQuery() {\n    return Relay.QL`\n      fragment on RenameDocumentMutationPayload { updatedDocument { name } }\n    `;\n  }\n  getVariables() {\n    return {id: this.props.document.id, newName: this.props.newName};\n  }\n  getConfigs() {\n    return [{\n      type: 'FIELDS_CHANGE',\n      fieldIDs: {updatedDocument: this.props.document.id},\n    }];\n  }\n  /* ... */\n}\n```\n\n----------------------------------------\n\nTITLE: Setting up RelayEnvironmentProvider at Application Root in JavaScript\nDESCRIPTION: This example demonstrates how to set up a RelayEnvironmentProvider at the root of a React application to make a Relay environment available throughout the component tree. It creates an environment and passes it to the provider which wraps the App component.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/api-reference/hooks/relay-environment-provider.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst React = require('React');\n\nconst {RelayEnvironmentProvider} = require('react-relay');\n\nconst Environment = createNewEnvironment();\n\nfunction Root() {\n  return (\n    <RelayEnvironmentProvider environment={Environment}>\n      <App />\n    </RelayEnvironmentProvider>\n  );\n}\n\nmodule.exports = Root;\n```\n\n----------------------------------------\n\nTITLE: Providing Values for GraphQL Query Variables\nDESCRIPTION: Shows how to provide values for declared variables when sending a network request to fetch a GraphQL query.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/guided-tour/rendering/variables.md#2025-04-18_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\n# Query:\nquery UserQuery($id: ID!) {\n  # ...\n}\n\n# Variables:\n{\"id\": 4}\n```\n\n----------------------------------------\n\nTITLE: Getting Plural Root Field in Relay Store\nDESCRIPTION: The method `getPluralRootField` retrieves an array of records representing a collection from the store, based on the given `fieldName`, useful for handling list data.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/api-reference/relay-runtime/store.md#2025-04-18_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst nodes = store.getPluralRootField('nodes');\n```\n\n----------------------------------------\n\nTITLE: Defining a Relay Query with Fragment Spreading\nDESCRIPTION: Illustrates how to create a GraphQL query that includes a fragment spread, allowing the query to fetch data for both itself and components that use the spread fragment.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/principles-and-architecture/thinking-in-relay.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// Story.react.js\nconst storyQuery = graphql`\n  query StoryQuery($storyID: ID!) {\n    story(id: $storyID) {\n      title\n      author {\n        ...AuthorDetails_author\n      }\n    }\n  }\n`;\n```\n\n----------------------------------------\n\nTITLE: Defining Story Fragment in TypeScript\nDESCRIPTION: Creating a GraphQL fragment for Story component to encapsulate its data requirements\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/tutorial/fragments-1.md#2025-04-18_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { graphql } from 'relay-runtime';\n\nconst StoryFragment = graphql`\n  fragment StoryFragment on Story {\n    title\n    summary\n    createdAt\n    poster {\n      name\n      profilePicture {\n        url\n      }\n    }\n    thumbnail {\n      url\n    }\n  }\n`;\n```\n\n----------------------------------------\n\nTITLE: Defining GraphQL Subscription Configuration Type\nDESCRIPTION: Describes the structure of a GraphQL subscription configuration with optional fields for caching, variables, and event handling\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/api-reference/types/GraphQLSubscriptionConfig.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype GraphQLSubscriptionConfig<TSubscriptionPayload> = {\n  cacheConfig?: CacheConfig;\n  subscription: GraphQLTaggedNode;\n  variables: any;\n  onCompleted?: () => void;\n  onError?: (Error) => void;\n  onNext?: (TSubscriptionPayload) => void;\n  updater?: SelectorStoreUpdater;\n}\n```\n\n----------------------------------------\n\nTITLE: Using graphql Template Tag in Relay\nDESCRIPTION: Example of using the graphql template tag to define a GraphQL query. This tag creates a GraphQLTaggedNode runtime representation that gets compiled by the Relay Compiler into artifacts.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/guides/compiler.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport {graphql} from 'react-relay';\n\ngraphql`\n  query MyQuery {\n    viewer {\n      id\n    }\n  }\n`;\n```\n\n----------------------------------------\n\nTITLE: GraphQL Fetch Helper Function\nDESCRIPTION: This JavaScript code defines a helper function `fetchGraphQL` that makes HTTP POST requests to a GraphQL endpoint. It uses the `fetch` API, sets the `Authorization` header with a GitHub token (if available via environment variable), and parses the JSON response.  It exports the function for use elsewhere in the application.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/getting-started/step-by-step-guide.md#2025-04-18_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n\"// your-app-name/src/fetchGraphQL.js\nasync function fetchGraphQL(text, variables) {\n  const REACT_APP_GITHUB_AUTH_TOKEN = process.env.REACT_APP_GITHUB_AUTH_TOKEN;\n\n  // Fetch data from GitHub's GraphQL API:\n  const response = await fetch('https://api.github.com/graphql', {\n    method: 'POST',\n    headers: {\n      Authorization: `bearer ${REACT_APP_GITHUB_AUTH_TOKEN}`,\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify({\n      query: text,\n      variables,\n    }),\n  });\n\n  // Get the response as JSON\n  return await response.json();\n}\n\nexport default fetchGraphQL;\"\n```\n\n----------------------------------------\n\nTITLE: Naming Relay Operations in Component Files\nDESCRIPTION: Examples of proper naming conventions for Relay operations in component files. Mutations must include the module name and end with 'Mutation', while Queries must include the module name and end with 'Query'.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/tutorial/organizing-mutations-queries-and-subscriptions.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nMyComponent[MyDescriptiveNameHere]Mutation\n```\n\nLANGUAGE: javascript\nCODE:\n```\nMyComponent*Query\n```\n\n----------------------------------------\n\nTITLE: Fetching Queries with useQueryLoader in React\nDESCRIPTION: Example of using useQueryLoader to fetch a GraphQL query in a React component. This snippet demonstrates how to load a query, manage its reference, and pass it to a child component.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/guided-tour/rendering/queries.md#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport type {HomeTabQuery as HomeTabQueryType} from 'HomeTabQuery.graphql';\nimport type {PreloadedQuery} from 'react-relay';\n\nconst HomeTabQuery = require('HomeTabQuery.graphql')\nconst {useQueryLoader} = require('react-relay');\n\n\ntype Props = {\n  initialQueryRef: PreloadedQuery<HomeTabQueryType>,\n};\n\nfunction AppTabs(props) {\n  const [\n    homeTabQueryRef,\n    loadHomeTabQuery,\n  ] = useQueryLoader(\n    HomeTabQuery,\n    props.initialQueryRef, /* e.g. provided by router */\n  );\n\n  const onSelectHomeTab = () => {\n    loadHomeTabQuery({id: '4'});\n    // ...\n  }\n\n  // ...\n\n  return (\n    screen === 'HomeTab' && homeTabQueryRef != null ?\n      <HomeTab queryRef={homeTabQueryRef} /> :\n      // ...\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Crafting Optimistic Response for Like Story Mutation with Relay\nDESCRIPTION: This mutation represents the process of liking a story, including the crafting of an optimistic response that simulates the expected server response to provide immediate feedback to users before server acknowledgment.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-classic/Classic-Guides-Mutations.md#2025-04-18_snippet_10\n\nLANGUAGE: JavaScript\nCODE:\n```\nclass LikeStoryMutation extends Relay.Mutation {\n  /* ... */\n  // Here's the fat query from before\n  getFatQuery() {\n    return Relay.QL`\n      fragment on LikeStoryPayload {\n        story {\n          likers {\n            count,\n          },\n          likeSentence,\n          viewerDoesLike,\n        },\n      }\n    `;\n  }\n  // Let's craft an optimistic response that mimics the shape of the\n  // LikeStoryPayload, as well as the values we expect to receive.\n  getOptimisticResponse() {\n    return {\n      story: {\n        id: this.props.story.id,\n        likers: {\n          count: this.props.story.likers.count + (this.props.story.viewerDoesLike ? -1 : 1),\n        },\n        viewerDoesLike: !this.props.story.viewerDoesLike,\n      },\n    };\n  }\n  // To be able to increment the likers count, and flip the viewerDoesLike\n  // bit, we need to ensure that those pieces of data will be available to\n  // this mutation, in addition to the ID of the story.\n  static fragments = {\n    story: () => Relay.QL`\n      fragment on Story {\n        id,\n        likers { count },\n        viewerDoesLike,\n      }\n    `,\n  };\n  /* ... */\n}\n\n```\n\n----------------------------------------\n\nTITLE: Invalidating the Store\nDESCRIPTION: Demonstrates how to invalidate the entire Relay store using the `invalidateStore` method of the `RecordSourceSelectorProxy`.  This marks all data in the store as stale, forcing a refetch on the next query check.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v13.0.0/api-reference/relay-runtime/store.md#2025-04-18_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nstore.invalidateStore();\n```\n\n----------------------------------------\n\nTITLE: Advanced Type Mock Resolver in JavaScript\nDESCRIPTION: Demonstrates mock resolvers for various GraphQL types including Float, Boolean, and Node, using the @relay_test_operation directive.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/guides/testing-relay-components.md#2025-04-18_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  Float() {\n    return 123.456;\n  },\n  Boolean(context) {\n    if (context.name === 'can_edit') {\n      return true;\n    }\n    return false;\n  },\n  Node() {\n    return {\n      __typename: 'User',\n      id: 'my-user-id',\n    };\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Fragment Spread in Relay Query Example\nDESCRIPTION: Demonstrates how to spread a fragment into a query in GraphQL. The example shows the pattern of spreading a component fragment into a parent query for data composition.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/glossary/glossary.md#2025-04-18_snippet_5\n\nLANGUAGE: graphql\nCODE:\n```\nquery ComponentQuery {\n  viewer {\n    account_user {\n      ...Component_name\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Store Record Retrieval Example\nDESCRIPTION: Example showing how to get a record from the Relay store.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/api-reference/relay-runtime/store.md#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst record = store.get(dataID);\n```\n\n----------------------------------------\n\nTITLE: Operation Variables Type Example in Flow/TypeScript\nDESCRIPTION: Demonstrates type emission for query variables using a sample artist query. Shows how variables are typed and how type safety is enforced when using useLazyLoadQuery.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/guides/type-emission.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst data = useLazyLoadQuery(\n  graphql`\n    query ExampleQuery($artistID: ID!) {\n      artist(id: $artistID) {\n        name\n      }\n    }\n  `,\n  // variables are expected to be of type ExampleQuery$variables\n  {artistID: 'banksy'},\n);\n```\n\n----------------------------------------\n\nTITLE: Declaring GraphQL Mutations with Relay\nDESCRIPTION: Using Relay's graphql tag to declare a mutation. This creates a GraphQL mutation document that can be used with Relay's mutation APIs.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v13.0.0/guided-tour/updating-data/graphql-mutations.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst {graphql} = require('react-relay');\n\nconst feedbackLikeMutation = graphql`\n  mutation FeedbackLikeMutation($input: FeedbackLikeData!) {\n    feedback_like(data: $input) {\n      feedback {\n        id\n        viewer_does_like\n        like_count\n      }\n    }\n  }\n`;\n```\n\n----------------------------------------\n\nTITLE: Accessing Connection ID with ConnectionHandler.getConnectionID\nDESCRIPTION: Utilizes ConnectionHandler.getConnectionID from 'relay-runtime' to obtain a connection record's ID from a parent ID.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v13.0.0/guided-tour/list-data/updating-connections.md#2025-04-18_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst {ConnectionHandler} = require('relay-runtime');\n\nfunction updater(store: RecordSourceSelectorProxy) {\n  // Get the connection ID\n  const connectionID = ConnectionHandler.getConnectionID(\n    storyID, // passed as input to the mutation/subscription\n    'StoryComponent_story_comments_connection',\n  );\n\n  // Get the connection record\n  const connectionRecord = store.get(connectionID);\n\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Using @relay(plural) Directive in Fragment\nDESCRIPTION: Example showing how to use the @relay(plural: true) directive to handle lists of items in a fragment container.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v13.0.0/api-reference/graphql/graphql-directives.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// Plural fragment definition\ngraphql`\n  fragment TodoItems_items on TodoItem @relay(plural: true) {\n    id\n    text\n  }\n`;\n\n// Plural fragment usage: note the parent type is a list of items (`TodoItem[]`)\nfragment TodoApp_app on App {\n  items {\n    // parent type is a list here\n    ...TodoItem_items\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Immutable Data Structure Example for Cache\nDESCRIPTION: Pseudo-code showing how an immutable data structure would represent the cache after an update to the author's photo, with only record 2 being replaced.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/principles-and-architecture/thinking-in-graphql.md#2025-04-18_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nImmutableMap {\n  1: ImmutableMap // same as before\n  2: ImmutableMap {\n    ... // other fields unchanged\n    photo: 'http://.../photo2.jpg',\n  },\n  3: ImmutableMap // same as before\n}\n```\n\n----------------------------------------\n\nTITLE: Defining an Author Field FullName Resolver with Description in TypeScript\nDESCRIPTION: This snippet shows how to define the fullName field resolver for the Author type in TypeScript, complete with a markdown formatted docblock description. The description explains what the fullName field represents, including any limitations.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/guides/relay-resolvers/descriptions.md#2025-04-18_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n/**\n * @RelayResolver Author.fullName: String\n *\n * The author's first and last name. Does not include\n * any [honorifics](https://en.wikipedia.org/wiki/Honorific).\n */\nexport function fullName(author: AuthorModel): string {\n  return `${author.firstName} ${author.lastName}`;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing GraphQL Interface with Person and Organization Types\nDESCRIPTION: Two GraphQL type definitions (Person and Organization) that implement the Actor interface, showing both shared fields and type-specific fields.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/tutorial/interfaces-polymorphism.md#2025-04-18_snippet_2\n\nLANGUAGE: graphql\nCODE:\n```\ntype Person implements Actor {\n  id: ID!\n  name: String\n  profilePicture: Image\n  joined: DateTime\n  email: String\n  location: Location\n}\n\ntype Organization implements Actor {\n  id: ID!\n  name: String\n  profilePicture: Image\n  joined: DateTime\n  organizationKind: OrganizationKind\n}\n```\n\n----------------------------------------\n\nTITLE: Adding @refetchable Directive to ContactsListFragment\nDESCRIPTION: This snippet shows how to add the @refetchable directive to the ContactsListFragment, enabling Relay to generate an extra query for refetching.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/tutorial/refetchable-fragments.md#2025-04-18_snippet_4\n\nLANGUAGE: graphql\nCODE:\n```\nconst ContactsListFragment = graphql`\n  fragment ContactsListFragment on Viewer\n    @refetchable(queryName: \"ContactsListRefetchQuery\")\n    @argumentDefinitions(\n      search: {type: \"String\", defaultValue: null}\n    )\n  {\n     // ...\n  }\n`;\n```\n\n----------------------------------------\n\nTITLE: Defining Client Schema Extension in GraphQL\nDESCRIPTION: GraphQL schema extension adding an is_new_comment boolean field to the Feedback type.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/guided-tour/updating-data/imperatively-modifying-store-data.md#2025-04-18_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nextend type Feedback {\n  is_new_comment: Boolean\n}\n```\n\n----------------------------------------\n\nTITLE: GraphQL Story Fragment with Comments\nDESCRIPTION: GraphQL fragment showing how to include the StoryCommentsSection fragment in the Story fragment\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/tutorial/connections-pagination.md#2025-04-18_snippet_2\n\nLANGUAGE: graphql\nCODE:\n```\nconst StoryFragment = graphql`\n  fragment StoryFragment on Story {\n    // ... as before\n    ...StoryCommentsSectionFragment\n  }\n`;\n```\n\n----------------------------------------\n\nTITLE: Composing Fragments with Type-Safe References in Flow\nDESCRIPTION: This example shows how Relay enables type-safe fragment composition in Flow. The parent component spreads a child component's fragment, and the generated types ensure that the correct fragment reference is passed to the child component.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/guides/type-emission.md#2025-04-18_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ExampleFragmentComponent } from \"./ExampleFragmentComponent\"\n\n/**\n * import type { ExampleFragmentComponent_artist$fragmentType } from \"ExampleFragmentComponent_artist.graphql\";\n *\n * export type ExampleQuery$data = {\n *   +artist: ?{\n *     +name: ?string,\n *     +$fragmentSpreads: ExampleFragmentComponent_artist$fragmentType,\n *   }\n * };\n * export type ExampleQuery$variables = {\n *   +artistID: string,\n * }\n * export type ExampleQuery = {\n *   +variables: ExampleQuery$variables,\n *   +response: ExampleQuery$data,\n * }\n */\n\n// data is of type ExampleQuery$data\nconst data = useLazyLoadQuery(\n  graphql`\n    query ExampleQuery($artistID: ID!) {\n      artist(id: $artistID) {\n        name\n        ...ExampleFragmentComponent_artist\n      }\n    }\n  `,\n  {artistID: 'banksy'},\n);\n\n// Here only `data.artist.name` is directly visible,\n// the marker prop $fragmentSpreads indicates that `data.artist`\n// can be used for the component expecting this fragment spread.\nreturn <ExampleFragmentComponent artist={data.artist} />;\n```\n\n----------------------------------------\n\nTITLE: Committing Payload Using commitPayload in Relay\nDESCRIPTION: This snippet demonstrates how to use the commitPayload API from Relay to write a payload to the store using an OperationDescriptor, which includes the query and query variables for local data updates. The payload requires a matching Flow type for type safety.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/guided-tour/updating-data/local-data-updates.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport type {FooQueryRawResponse} from 'FooQuery.graphql'\n\nconst {createOperationDescriptor} = require('relay-runtime');\n\nconst operationDescriptor = createOperationDescriptor(FooQuery, {\n  id: 'an-id',\n  otherVariable: 'value',\n});\n\nconst payload: FooQueryRawResponse = {...};\n\nenvironment.commitPayload(operationDescriptor, payload);\n```\n\n----------------------------------------\n\nTITLE: Running Relay Compiler and Development Server\nDESCRIPTION: Commands to compile Relay artifacts and start the development server\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/getting-started/quick-start.md#2025-04-18_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nnpx relay-compiler\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Incorrect @required Action Severity in GraphQL Fragment\nDESCRIPTION: Shows an example of incorrect @required action severity in a GraphQL fragment, which would result in a compiler error due to mismatched action severity.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/guides/required-directive.md#2025-04-18_snippet_3\n\nLANGUAGE: graphql\nCODE:\n```\nfragment MyUser on User {\n  profile_picture @required(action: THROW) {\n    url @required(action: LOG)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Relay Dependencies\nDESCRIPTION: Commands to install the required Relay packages including the runtime, React integration, compiler, and Babel plugin using NPM or Yarn.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/getting-started/step-by-step-guide.md#2025-04-18_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n# NPM Users\nnpm install --save relay-runtime react-relay\nnpm install --save-dev relay-compiler babel-plugin-relay\n\n# Yarn Users\nyarn add relay-runtime react-relay\nyarn add --dev relay-compiler babel-plugin-relay\n```\n\n----------------------------------------\n\nTITLE: Getting Record Type in Relay Store\nDESCRIPTION: Demonstrates how to get the type of a record in the Relay store using the getType method of RecordProxy.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/api-reference/relay-runtime/store.md#2025-04-18_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nconst type = user.getType();  // User\n```\n\n----------------------------------------\n\nTITLE: Deleting Records with Subscription Directives\nDESCRIPTION: Demonstrates how to use the @deleteRecord directive in a subscription to remove items from the store in response to subscription events.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/guided-tour/updating-data/graphql-subscriptions.md#2025-04-18_snippet_4\n\nLANGUAGE: graphql\nCODE:\n```\nsubscription DeletePostSubscription($input: DeletePostSubscribeData!) {\n  delete_post_subscribe(data: $input) {\n    deleted_post {\n      id @deleteRecord\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Actor Interface in GraphQL\nDESCRIPTION: GraphQL interface definition for Actor type specifying common fields shared between Person and Organization types.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/tutorial/interfaces-polymorphism.md#2025-04-18_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\ninterface Actor {\n  name: String\n  profilePicture: Image\n  joined: DateTime\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Mock Resolvers for Various GraphQL Types with @relay_test_operation\nDESCRIPTION: Example of mock resolvers for Float, Boolean, and interface types (Node) that can be used with the @relay_test_operation directive. This directive provides additional type information during testing.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v13.0.0/guides/testing-relay-components.md#2025-04-18_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  Float() {\n    return 123.456;\n  },\n  Boolean(context) {\n    if (context.name === 'can_edit') {\n      return true;\n    }\n    return false;\n  },\n  Node() {\n    return {\n      __typename: 'User',\n      id: 'my-user-id',\n    };\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Relay Environment in Components Using useRelayEnvironment Hook\nDESCRIPTION: This snippet shows how to access the current Relay Environment within a component that is a descendant of a RelayEnvironmentProvider. The useRelayEnvironment Hook provides access to the environment that was set up at the application root.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v13.0.0/guided-tour/rendering/environment.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst {useRelayEnvironment} = require('react-relay');\n\nfunction UserComponent(props: Props) {\n  const environment = useRelayEnvironment();\n\n  return (...);\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Headers to Relay Network Layer\nDESCRIPTION: This code example shows how to add custom HTTP headers to the Relay network layer. It demonstrates setting an Authorization header with a Basic Auth token.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-classic/Classic-Guides-NetworkLayer.md#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nRelay.injectNetworkLayer(\n  new Relay.DefaultNetworkLayer('http://example.com/graphql', {\n    headers: {\n      Authorization: 'Basic SSdsbCBmaW5kIHNvbWV0aGluZyB0byBwdXQgaGVyZQ==',\n    },\n  })\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Query Loader in Parent Component\nDESCRIPTION: Adds useQueryLoader hook in the PosterByline component to manage query loading state and provide query reference.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/tutorial/queries-2.md#2025-04-18_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nimport {useQueryLoader} from 'react-relay';\nimport type {PosterDetailsHovercardContentsQuery as HovercardQueryType} from './__generated__/PosterDetailsHovercardContentsQuery.graphql';\nimport {PosterDetailsHovercardContentsQuery} from './PosterDetailsHovercardContents';\n\nexport default function PosterByline({ poster }: Props): React.ReactElement {\n  ...\n  const [\n    hovercardQueryRef,\n    loadHovercardQuery,\n  ] = useQueryLoader<HovercardQueryType>(PosterDetailsHovercardContentsQuery);\n  return (\n   ...\n    <PosterDetailsHovercardContents\n      queryRef={hovercardQueryRef}\n    />\n   ...\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Fragment Arguments for Pagination in GraphQL\nDESCRIPTION: Demonstrates how to add pagination arguments and connection directive to a Relay fragment for story comments.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/tutorial/connections-pagination.md#2025-04-18_snippet_4\n\nLANGUAGE: graphql\nCODE:\n```\nconst StoryCommentsSectionFragment = graphql`\n  fragment StoryCommentsSectionFragment on Story\n    @argumentDefinitions(\n      cursor: { type: \"String\" }\n      count: { type: \"Int\", defaultValue: 3 }\n    )\n  {\n    comments(after: $cursor, first: $count) {\n      edges {\n        node {\n          ...CommentFragment\n        }\n      }\n      pageInfo {\n        hasNextPage\n      }\n    }\n  }\n`;\n```\n\n----------------------------------------\n\nTITLE: Defining ContactsListFragment in GraphQL\nDESCRIPTION: This snippet demonstrates the initial definition of the ContactsListFragment in GraphQL, which selects the list of contacts.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/tutorial/refetchable-fragments.md#2025-04-18_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\nconst ContactsListFragment = graphql`\n  fragment ContactsListFragment on Viewer {\n    contacts {\n      id\n      ...ContactRowFragment\n    }\n  }\n`;\n```\n\n----------------------------------------\n\nTITLE: GraphQL fragment example\nDESCRIPTION: This GraphQL fragment shows how Relay compiler inserts the `__typename` field to determine if the fragment matched.  The fragment checks if the Node is a Viewer and includes the `__typename` as `isViewer` and the name. This helps to determine if a type matches when using inline fragments.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/guides/alias-directive.md#2025-04-18_snippet_5\n\nLANGUAGE: graphql\nCODE:\n```\nfragment Foo on Node {\n  ... on Viewer {\n    isViewer: __typename # <-- Relay inserts this\n    name\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Problematic @required Usage with @connection Directive\nDESCRIPTION: An example showing incompatible usage of @required with @connection directive. Relay automatically inserts additional fields into connections which can cause inconsistencies.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/guides/required-directive.md#2025-04-18_snippet_5\n\nLANGUAGE: graphql\nCODE:\n```\nfragment FriendsList on User @refetchable(queryName: \"FriendsListQuery\") {\n  friends(after: $cursor, first: $count) @connection(key: \"FriendsList_friends\") {\n    edges {\n      node @required(action: LOG) {\n        job @required(action: LOG) {\n          title @required(action: LOG)\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Query Variables in Mock Resolver Context for Relay Tests in JavaScript\nDESCRIPTION: This snippet demonstrates how to access query variables within the mock resolver context when setting up Relay tests. It shows how to log the context object to inspect available arguments.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/guides/testing-relay-with-preloaded-queries.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nCurrencyAmount(context) {\n  console.log(JSON.stringify(context, null, 2)); // <--\n  return { formatted_amount: mockResponse }\n}\n// <-- logs { ...snip..., \"name\": \"subtotal_price_for_offers\", args: { offer_ids: [...] } }\n```\n\n----------------------------------------\n\nTITLE: Generated ConcreteRequest Without Persisted Queries\nDESCRIPTION: Example of a generated ConcreteRequest object without persisted queries enabled. The query text is included directly in the request object with null id.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/guides/persisted-queries.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst node/*: ConcreteRequest*/ = (function(){\n//... excluded for brevity\nreturn {\n  \"kind\": \"Request\",\n  \"operationKind\": \"query\",\n  \"name\": \"TodoItemRefetchQuery\",\n  \"id\": null, // NOTE: id is null\n  \"text\": \"query TodoItemRefetchQuery(\\n  $itemID: ID!\\n) {\\n  node(id: $itemID) {\\n    ...TodoItem_item_2FOrhs\\n  }\\n}\\n\\nfragment TodoItem_item_2FOrhs on Todo {\\n    text\\n    isComplete\\n}\\n\",\n  //... excluded for brevity\n};\n})();\n```\n\n----------------------------------------\n\nTITLE: Accessing Query Variables in Mock Resolver Context in JavaScript\nDESCRIPTION: This snippet demonstrates how to access query variables within the mock resolver context. It shows how to log the context object to inspect available arguments.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/guides/testing-relay-with-preloaded-queries.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nCurrencyAmount(context) {\n  console.log(JSON.stringify(context, null, 2)); // <--\n  return { formatted_amount: mockResponse }\n}\n// <-- logs { ...snip..., \"name\": \"subtotal_price_for_offers\", args: { offer_ids: [...] } }\n```\n\n----------------------------------------\n\nTITLE: Executing Subscription with requestSubscription API\nDESCRIPTION: This JavaScript snippet demonstrates how to execute a GraphQL subscription using the requestSubscription API in Relay. It outlines the process of initializing the subscription, handling subscription payloads, and managing errors. Inputs include the environment and feedback ID.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v13.0.0/guided-tour/updating-data/graphql-subscriptions.md#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport type {Environment} from 'react-relay';\nimport type {FeedbackLikeSubscribeData} from 'FeedbackLikeSubscription.graphql';\n\nconst {graphql, requestSubscription} = require('react-relay');\n\nfunction feedbackLikeSubscribe(\n  environment: Environment,\n  feedbackID: string,\n  input: FeedbackLikeSubscribeData,\n) {\n  return requestSubscription(environment, {\n    subscription: graphql`\n      subscription FeedbackLikeSubscription(\n        $input: FeedbackLikeSubscribeData!\n      ) {\n        feedback_like_subscribe(data: $input) {\n          feedback {\n            id\n            like_count\n          }\n        }\n      }\n    `,\n    variables: {input},\n    onCompleted: () => {} /* Subscription established */,\n    onError: error => {} /* Subscription errored */,\n    onNext: response => {} /* Subscription payload received */\n  });\n}\n\nmodule.exports = {subscribe: feedbackLikeSubscribe};\n```\n\n----------------------------------------\n\nTITLE: Using @alias with @required\nDESCRIPTION: This code snippet demonstrates how to use `@alias` with `@required(action: NONE)` to group required fields. If any of the fields inside the aliased fragment are null, the entire aliased field will be null, allowing for a single null check.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/guides/alias-directive.md#2025-04-18_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nfunction MyUser({userKey}) {\n  const user = useFragment(graphql`\n    fragment MyFragment on User {\n      id\n      ... @alias(as: \\\"requiredFields\\\") {\n        name @required(action: NONE)\n        email @required(action: NONE)\n      }\n    }`, userKey);\n\n  if(user.requiredFields == null) {\n    return `Missing required fields for user ${user.id}`;\n  }\n  return `Hello ${user.requiredFields.name} (${user.requiredFields.email}).!`;\n}\n```\n\n----------------------------------------\n\nTITLE: Setting up Relay Query Fetching in React Application\nDESCRIPTION: This code demonstrates how to implement Relay in a React application to fetch data from a GraphQL API. It includes defining a GraphQL query, preloading the query data, creating components that use the preloaded data, and setting up the Relay environment provider with Suspense for loading states.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/getting-started/step-by-step-guide.md#2025-04-18_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport React from 'react';\nimport './App.css';\nimport graphql from 'babel-plugin-relay/macro';\nimport {\n  RelayEnvironmentProvider,\n  loadQuery,\n  usePreloadedQuery,\n} from 'react-relay/hooks';\nimport RelayEnvironment from './RelayEnvironment';\n\nconst { Suspense } = React;\n\n// Define a query\nconst RepositoryNameQuery = graphql`\n  query AppRepositoryNameQuery {\n    repository(owner: \"facebook\", name: \"relay\") {\n      name\n    }\n  }\n`;\n\n// Immediately load the query as our app starts. For a real app, we'd move this\n// into our routing configuration, preloading data as we transition to new routes.\nconst preloadedQuery = loadQuery(RelayEnvironment, RepositoryNameQuery, {\n  /* query variables */\n});\n\n// Inner component that reads the preloaded query results via `usePreloadedQuery()`.\n// This works as follows:\n// - If the query has completed, it returns the results of the query.\n// - If the query is still pending, it \"suspends\" (indicates to React that the\n//   component isn't ready to render yet). This will show the nearest <Suspense>\n//   fallback.\n// - If the query failed, it throws the failure error. For simplicity we aren't\n//   handling the failure case here.\nfunction App(props) {\n  const data = usePreloadedQuery(RepositoryNameQuery, props.preloadedQuery);\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <p>{data.repository.name}</p>\n      </header>\n    </div>\n  );\n}\n\n// The above component needs to know how to access the Relay environment, and we\n// need to specify a fallback in case it suspends:\n// - <RelayEnvironmentProvider> tells child components how to talk to the current\n//   Relay Environment instance\n// - <Suspense> specifies a fallback in case a child suspends.\nfunction AppRoot(props) {\n  return (\n    <RelayEnvironmentProvider environment={RelayEnvironment}>\n      <Suspense fallback={'Loading...'}>\n        <App preloadedQuery={preloadedQuery} />\n      </Suspense>\n    </RelayEnvironmentProvider>\n  );\n}\n\nexport default AppRoot;\n```\n\n----------------------------------------\n\nTITLE: Copying Fields Between Records in Relay Store\nDESCRIPTION: The `copyFieldsFrom` method allows field-level mutation by copying fields from a source record to the target record, facilitating data duplication or updates.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/api-reference/relay-runtime/store.md#2025-04-18_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nconst record = store.get(id1);\nconst otherRecord = store.get(id2);\nrecord.copyFieldsFrom(otherRecord);\n```\n\n----------------------------------------\n\nTITLE: Spreading ImageFragment in StoryFragment using GraphQL\nDESCRIPTION: This code snippet demonstrates how to spread the `ImageFragment` into the `StoryFragment`. This allows the `StoryFragment` to reuse the data requirements defined in `ImageFragment` for the `thumbnail` field.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/tutorial/fragments-1.md#2025-04-18_snippet_7\n\nLANGUAGE: graphql\nCODE:\n```\nconst StoryFragment = graphql`\n  fragment StoryFragment on Story {\n    title\n    summary\n    postedAt\n    poster {\n      ...PosterBylineFragment\n    }\n    thumbnail {\n      // change-line\n      ...ImageFragment\n    }\n  }\n`;\n```\n\n----------------------------------------\n\nTITLE: Invalidating a specific record\nDESCRIPTION: This snippet shows how to invalidate a specific record using the invalidateRecord method, which ensures that any referencing queries consider it stale until refetched.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/api-reference/relay-runtime/store.md#2025-04-18_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nconst record = store.get('4');\nrecord.invalidateRecord();\n```\n\n----------------------------------------\n\nTITLE: Normalized Cache Implementation\nDESCRIPTION: Shows how Relay would normalize the hierarchical GraphQL response into a flat collection of records with links between related data.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v13.0.0/principles-and-architecture/thinking-in-graphql.md#2025-04-18_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nMap {\n  // `story(id: \"1\")`\n  1: Map {\n    text: 'Relay is open-source!',\n    author: Link(2),\n  },\n  // `story.author`\n  2: Map {\n    name: 'Jan',\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Defining a GraphQL Fragment in Relay\nDESCRIPTION: This snippet shows how to define a GraphQL fragment that specifies the data requirements for an author component. The fragment selects the author's name and photo URL.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v13.0.0/principles-and-architecture/thinking-in-relay.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// AuthorDetails.react.js\nconst authorDetailsFragment = graphql`\n  fragment AuthorDetails_author on Author {\n    name\n    photo {\n      url\n    }\n  }\n`;\n```\n\n----------------------------------------\n\nTITLE: Defining Fragment Arguments with @argumentDefinitions\nDESCRIPTION: Example demonstrating how to specify arguments that a fragment can accept using the @argumentDefinitions directive.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v13.0.0/api-reference/graphql/graphql-directives.md#2025-04-18_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\nfragment TodoList_list on TodoList @argumentDefinitions(\n  count: {type: \"Int\", defaultValue: 10},  # Optional argument\n  userID: {type: \"ID\"},                    # Required argument\n) {\n  title\n  todoItems(userID: $userID, first: $count) {  # Use fragment arguments here as variables\n    ...TodoItem_item\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Relay Component States (Loading/Data/Error)\nDESCRIPTION: Example of testing a Relay component in different states using createMockEnvironment. Shows how to test loading state, successful data loading, and error handling.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/guides/testing-relay-components.md#2025-04-18_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst MyAwesomeViewRoot = require('MyAwesomeViewRoot');\nconst {\n  createMockEnvironment,\n  MockPayloadGenerator,\n} = require('relay-test-utils');\n\ntest('Loading State', () => {\n  const environment = createMockEnvironment();\n  const renderer = ReactTestRenderer.create(\n    <MyAwesomeViewRoot environment={environment} />,\n  );\n\n  expect(\n    renderer.root.find(node => node.props['data-testid'] === 'spinner'),\n  ).toBeDefined();\n});\n\ntest('Data Render', () => {\n  const environment = createMockEnvironment();\n  const renderer = ReactTestRenderer.create(\n    <MyAwesomeViewRoot environment={environment} />,\n  );\n\n  ReactTestRenderer.act(() => {\n    environment.mock.resolveMostRecentOperation(operation =>\n      MockPayloadGenerator.generate(operation),\n    );\n  });\n\n  expect(\n    renderer.root.find(node => node.props['data-testid'] === 'myButton'),\n  ).toBeDefined();\n});\n\ntest('Error State', () => {\n  const environment = createMockEnvironment();\n  const renderer = ReactTestRenderer.create(\n    <MyAwesomeViewRoot environment={environment} />,\n  );\n\n  ReactTestRenderer.act(() => {\n    environment.mock.rejectMostRecentOperation(new Error('Uh-oh'));\n  });\n\n  expect(\n    renderer.root.find(item => (item.props.testID = 'errorMessage')),\n  ).toBeDefined();\n});\n```\n\n----------------------------------------\n\nTITLE: Retaining Queries in Relay\nDESCRIPTION: This code snippet demonstrates how to retain a query in Relay to prevent it from being garbage collected, ensuring that the data remains available for future use.  The `retain` method on the environment is used to retain the query, and `dispose` is used to release it when no longer needed.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/guided-tour/reusing-cached-data/presence-of-data.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// Retain query; this will prevent the data for this query and\n// variables from being garbage collected by Relay\nconst disposable = environment.retain(queryDescriptor);\n\n// Disposing of the disposable will release the data for this query\n// and variables, meaning that it can be deleted at any moment\n// by Relay's garbage collection if it hasn't been retained elsewhere\ndisposable.dispose();\n```\n\n----------------------------------------\n\nTITLE: Local Store Update for User Selection Toggle\nDESCRIPTION: Implements a local store update using commitLocalUpdate to toggle a user's selection state\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/guided-tour/updating-data/imperatively-modifying-store-data.md#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nfunction UserSelectToggle({ userId, viewerRef }: {\n  userId: string,\n  viewerRef: UserSelectToggle_viewer$key,\n}) {\n  const viewer = useFragment(graphql`\n    fragment UserSelectToggle_viewer on Viewer {\n      user(user_id: $user_id) {\n        id\n        name\n        is_selected\n        ...UserSelectToggle_updatable_user\n      }\n    }\n  `, viewerRef);\n\n  const environment = useRelayEnvironment();\n\n  return <button\n    onClick={() => {\n      commitLocalUpdate(\n        environment,\n        (store: RecordSourceSelectorProxy) => {\n          const userRef = viewer.user;\n          if (userRef == null) {\n            return;\n          }\n\n          const {updatableData} = store.readUpdatableFragment(\n            graphql`\n              fragment UserSelectToggle_updatable_user on User @updatable {\n                is_selected\n              }\n            `,\n            userRef\n          );\n\n          updatableData.is_selected = !viewer?.user?.is_selected;\n        }\n      );\n    }}\n  >\n    {viewer?.user?.is_selected ? 'Deselect' : 'Select'} {viewer?.user?.name}\n  </button>\n}\n```\n\n----------------------------------------\n\nTITLE: Assigning Linked Records Set in Relay Store\nDESCRIPTION: The `setLinkedRecords` method allows updating a record by setting a new linked records set on a field name, including optional variable handling for arguments.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/api-reference/relay-runtime/store.md#2025-04-18_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nconst rootField = store.getRootField('rootField');\nconst newNode = store.create(/* ... */);\nconst newNodes = [...rootField.getLinkedRecords('nodes'), newNode];\nrootField.setLinkedRecords(newNodes, 'nodes');\n```\n\n----------------------------------------\n\nTITLE: Paginating Through Rebel Ships\nDESCRIPTION: This query shows how to paginate through the Rebels' ships by using the 'after' argument with a cursor, fetching the next three ships after a specific point.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/guides/graphql-server-specification.md#2025-04-18_snippet_7\n\nLANGUAGE: graphql\nCODE:\n```\nquery EndOfRebelShipsQuery {\n  rebels {\n    name\n    ships(first: 3 after: \"YXJyYXljb25uZWN0aW9uOjE=\") {\n      edges {\n        cursor\n        node {\n          name\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Relay Resolver with Combined Arguments\nDESCRIPTION: A Relay resolver function that defines arguments at both fragment and resolver levels, combining GraphQL fragment reading with JavaScript argument handling\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/guides/relay-resolvers.md#2025-04-18_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n* @RelayResolver MyType.my_resolver_field(my_js_arg: String!): String\n* @rootFragment myResolverFragment\n*/\nexport function my_resolver_field(\n   fragmentKey: myResolverFragment$key,\n   args: {\n      my_js_arg: string\n   },\n): ?string {\n   const data = readFragment(graphql`\n       fragment myResolverFragment on MyType\n            @argumentDefinitions(my_gql_arg: {type: \"Float!\"}) {\n            field_with_arg(arg: $my_arg) {\n               __typename\n            }\n       }\n   `, fragmentKey);\n\n   return `Hello ${args.my_js_arg}, ${data.field_with_arg.__typename}`;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Event-Based Query Preloading\nDESCRIPTION: Adds event handler to trigger query preloading when hovering begins, optimizing the data fetching timeline.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/tutorial/queries-2.md#2025-04-18_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\nexport default function PosterByline({ poster }: Props): React.ReactElement {\n  ...\n  const [\n    hovercardQueryRef,\n    loadHovercardQuery,\n  ] = useQueryLoader<HovercardQueryType>(PosterDetailsHovercardContentsQuery);\n  function onBeginHover() {\n    loadHovercardQuery({posterID: data.id});\n  }\n  return (\n    <div className=\"byline\">\n      ...\n      <Hovercard\n        onBeginHover={onBeginHover}\n        targetRef={hoverRef}>\n        <PosterDetailsHovercardContents queryRef={hovercardQueryRef} />\n      </Hovercard>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Query Variables in Mock Resolver Context\nDESCRIPTION: Demonstrates how to access and use query variables within a mock resolver context for dynamic response generation.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/guides/testing-relay-with-preloaded-queries.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nCurrencyAmount(context) {\n  console.log(JSON.stringify(context, null, 2));\n  return { formatted_amount: mockResponse }\n}\n```\n\n----------------------------------------\n\nTITLE: Example JSON response for story with author\nDESCRIPTION: This is a possible JSON response to the GraphQL query for fetching a story with the author's name. It illustrates the hierarchical structure of a typical GraphQL response.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/principles-and-architecture/thinking-in-graphql.md#2025-04-18_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"query\": {\n    \"story\": {\n      \"text\": \"Relay is open-source!\",\n      \"author\": {\n        \"name\": \"Jan\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Fetch Credentials in Relay Network Layer\nDESCRIPTION: This code shows how to set the 'credentials' option when injecting a new network layer. It uses the 'same-origin' value, which is useful for including cookies in requests to the same origin as the application.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-classic/Classic-Guides-NetworkLayer.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nRelay.injectNetworkLayer(\n  new Relay.DefaultNetworkLayer('http://example.com/graphql', {\n    credentials: 'same-origin',\n  })\n);\n```\n\n----------------------------------------\n\nTITLE: Querying for Next Set of Rebel Ships\nDESCRIPTION: This GraphQL query attempts to fetch the next four ships after the last known cursor, demonstrating how to handle reaching the end of a connection.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/guides/graphql-server-specification.md#2025-04-18_snippet_8\n\nLANGUAGE: graphql\nCODE:\n```\nquery RebelsQuery {\n  rebels {\n    name\n    ships(first: 4 after: \"YXJyYXljb25uZWN0aW9uOjQ=\") {\n      edges {\n        cursor\n        node {\n          name\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Generated TypeScript Type for Relay Query\nDESCRIPTION: This GraphQL snippet defines the TypeScript type structure generated by Relay for a GraphQL query. The type describes the structure of the `data` object expected as a result of the query execution.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/tutorial/queries-1.md#2025-04-18_snippet_7\n\nLANGUAGE: graphql\nCODE:\n```\nexport type NewsfeedQuery$data = {\n  readonly topStory: {\n    readonly poster: {\n      readonly name: string | null;\n      readonly profilePicture: {\n        readonly url: string;\n      } | null;\n    };\n    readonly summary: string | null;\n    readonly thumbnail: {\n      readonly url: string;\n    } | null;\n    readonly title: string;\n  } | null;\n};\n```\n\n----------------------------------------\n\nTITLE: Adding Fragment Arguments for Image Sizing\nDESCRIPTION: Demonstrates how to add width and height arguments to ImageFragment for flexible image size fetching.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/tutorial/fragments-1.md#2025-04-18_snippet_9\n\nLANGUAGE: graphql\nCODE:\n```\nconst ImageFragment = graphql`\n  fragment ImageFragment on Image\n    @argumentDefinitions(\n      width: {\n        type: \"Int\",\n        defaultValue: null\n      }\n      height: {\n        type: \"Int\",\n        defaultValue: null\n      }\n    )\n  {\n    url(\n      width: $width,\n      height: $height\n    )\n    altText\n  }\n`;\n```\n\n----------------------------------------\n\nTITLE: Converting fetchQuery Results to a Promise in JavaScript\nDESCRIPTION: Example of using the toPromise() method on fetchQuery results to convert the observable to a Promise. This approach is generally discouraged as it will only process the first piece of data and may miss deferred or 3D data in the query.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/api-reference/relay-runtime/fetch-query.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst {fetchQuery} = require('react-relay');\n\nfetchQuery(\n  environment,\n  graphql`\n    query AppQuery($id: ID!) {\n      user(id: $id) {\n        name\n      }\n    }\n  `,\n  {id: 4},\n)\n.toPromise() // NOTE: don't use, this can cause data to be missing!\n.then(data => {...})\n.catch(error => {...};\n```\n\n----------------------------------------\n\nTITLE: Testing Refetch Container with React and Relay\nDESCRIPTION: A test example showing how to test a component with refetchable fragments. It demonstrates setting up a mock environment, rendering a component with a query, resolving the query operation, and testing the refetch functionality.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/guides/testing-relay-components.md#2025-04-18_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\ntest('Refetch Container', async () => {\n  const environment = createMockEnvironment();\n  const TestRenderer = () => {\n    const data = useLazyLoadQuery(\n      graphql`\n        query TestQuery @relay_test_operation {\n          myData: node(id: \"test-id\") {\n            # Spread the pagination fragment you want to test here\n            ...MyRefetchableFragment\n          }\n        }\n      `,\n      {},\n    );\n    return <MyRefetchContainer data={data.myData} />\n  };\n\n  const renderer = render(\n    <RelayEnvironmentProvider environment={environment}>\n      <Suspense fallback=\"Loading...\">\n        <TestRenderer />\n      </Suspense>\n    </RelayEnvironmentProvider>\n  );\n\n  act(() => {\n    environment.mock.resolveMostRecentOperation(operation =>\n      MockPayloadGenerator.generate(operation),\n    );\n  });\n\n  // Assuming we have refetch button in the Container\n  const refetchButton = await renderer.findByTestId('refetch');\n\n  // This should trigger the `refetch`\n  refetchButton.props.onClick();\n\n  act(() => {\n    environment.mock.resolveMostRecentOperation(operation =>\n      MockPayloadGenerator.generate(operation, {\n        // We can customize mock resolvers, to change the output of the refetch query\n      }),\n    );\n  });\n\n  expect(renderer).toMatchSnapshot();\n});\n```\n\n----------------------------------------\n\nTITLE: Refetching GraphQL Fragments in React with Relay\nDESCRIPTION: This snippet showcases the `useRefetchableFragment` hook, allowing React components to refetch and render updated GraphQL fragment data. It uses a refetchable directive, automatically generating query types necessary for fetching. Dependencies include React, Relay, and Flow types specific to queries.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-experimental/RelayHooks-ApiReference.md#2025-04-18_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport type {CommentBodyRefetchQuery} from 'CommentBodyRefetchQuery.graphql';\nimport type {CommentBody_comment$key} from 'CommentBody_comment.graphql';\n\nconst React = require('React');\nconst {useTransition} = require('React');\n\n// RN or WWW:\nconst {graphql, useRefetchableFragment} = require('react-relay/hooks');\n\n\ntype Props = {|  \n  comment: CommentBody_comment$key,\n|};\n\nfunction CommentBody(props: Props) {\n  const [_, startTransition] = useTransition();\n  const [data, refetch] = useRefetchableFragment<CommentBodyRefetchQuery, _>(\n    graphql`\n      fragment CommentBody_comment on Comment\n      @refetchable(queryName: \"CommentBodyRefetchQuery\") {\n        body(lang: $lang) {\n          text\n        }\n      }\n    `,\n    props.comment,\n  );\n\n  return (\n    <>\n      <p>{data.body?.text}</p>\n      <Button\n        onClick={() => {\n          startTransition(() => {\n            refetch({lang: 'SPANISH'}, {fetchPolicy: 'store-or-network'})}\n          );\n        }}>\n        Translate Comment\n      </Button>\n    </>\n  );\n}\n\nmodule.exports = CommentBody;\n```\n\n----------------------------------------\n\nTITLE: Defining GraphQL Query with New Field\nDESCRIPTION: Example of adding a new field (createdAt) to an existing GraphQL query in Relay\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/tutorial/fragments-1.md#2025-04-18_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nconst NewsfeedQuery = graphql`\n  query NewsfeedQuery {\n    topStory {\n      title\n      summary\n      createdAt\n      poster {\n        name\n        profilePicture {\n          url\n        }\n      }\n      image {\n        url\n      }\n    }\n  }\n`;\n```\n\n----------------------------------------\n\nTITLE: Defining a GraphQL Fragment for Author Details in JavaScript\nDESCRIPTION: This snippet demonstrates how to define a GraphQL fragment for an Author's details using a GraphQL literal in JavaScript. It specifies the fields to be selected from an Author object.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/principles-and-architecture/thinking-in-relay.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst authorDetailsFragment = graphql`\n  fragment AuthorDetails_author on Author {\n    name\n    photo {\n      url\n    }\n  }\n`;\n```\n\n----------------------------------------\n\nTITLE: Accessing Query Variables in Mock Resolver Context\nDESCRIPTION: Shows how to access query variables within a mock resolver context. This allows returning different mock data based on the variables provided to the query.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/guides/testing-relay-with-preloaded-queries.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nCurrencyAmount(context) {\n  console.log(JSON.stringify(context, null, 2)); // <--\n  return { formatted_amount: mockResponse }\n}\n// <-- logs { ...snip..., \"name\": \"subtotal_price_for_offers\", args: { offer_ids: [...] } }\n```\n\n----------------------------------------\n\nTITLE: Refetching ContactsList Fragment with New Search Value\nDESCRIPTION: This snippet shows how to use the useRefetchableFragment hook to refetch the ContactsListFragment when the search input changes, allowing for updated data to be fetched seamlessly.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/tutorial/refetchable-fragments.md#2025-04-18_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\n\"// change-line\\nimport {useRefetchableFragment} from 'react-relay';\\n\\nfunction ContactsList({viewer}) {\\n  // change-line\\n  const [data, refetch] = useRefetchableFragment(ContactsListFragment, viewer);\\n  const [searchString, setSearchString] = useState('');\\n  const onSearchStringChanged = (value) => {\\n    setSearchString(value);\\n    // change-line\\n    refetch({search: value});\\n  };\\n  return (\\n    // ...\\n  );\\n}\\n\"\n```\n\n----------------------------------------\n\nTITLE: Initial StoryLikeButton Component\nDESCRIPTION: Basic React component structure before implementing mutation functionality\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/tutorial/mutations-updates.md#2025-04-18_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nfunction StoryLikeButton({story}) {\n  const data = useFragment(StoryLikeButtonFragment, story);\n  function onLikeButtonClicked() {\n    // To be filled in\n  }\n  return (\n    <>\n      <LikeCount count={data.likeCount} />\n      <LikeButton value={data.doesViewerLike} onChange={onLikeButtonClicked} />\n    </>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Provider Function for Relay Provided Variables\nDESCRIPTION: This JavaScript file exports a provider function that returns a boolean value used by the Relay compiler for provided variables. The get() function must return the same value for a given application run.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/api-reference/graphql/graphql-directives.md#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// Todo_ShouldIncludeTimestamp.relayprovider.js\nexport default {\n  get(): boolean {\n    // must always return true or false for a given run\n    return check('todo_should_include_timestamp');\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Pagination through Rebel Ships with Cursors\nDESCRIPTION: Demonstrates how to paginate through the list of Rebel ships using the `after` argument to continue fetching ships after a cursor.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/guides/graphql-server-specification.md#2025-04-18_snippet_7\n\nLANGUAGE: graphql\nCODE:\n```\nquery EndOfRebelShipsQuery { rebels { name ships(first: 3 after: \"YXJyYXljb25uZWN0aW9uOjE=\") { edges { cursor node { name } } } } }\n```\n\n----------------------------------------\n\nTITLE: Configuring Babel Plugin for Relay Artifacts\nDESCRIPTION: Configuration in .babelrc to specify the artifact directory location for the Relay babel plugin. This tells the plugin where to look for the generated artifacts.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/guides/type-emission.md#2025-04-18_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"plugins\": [\n    [\"relay\", { \"artifactDirectory\": \"./src/__generated__\" }]\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Defining GraphQL Queries and Fragments\nDESCRIPTION: Illustrates the similarity between queries and fragments in GraphQL, showing how they can have identical reader ASTs despite different syntax.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/glossary/glossary.md#2025-04-18_snippet_5\n\nLANGUAGE: graphql\nCODE:\n```\nquery Foo {\n  actor { name }\n}\n```\n\nLANGUAGE: graphql\nCODE:\n```\nfragment Bar on Query {\n  actor { name }\n}\n```\n\n----------------------------------------\n\nTITLE: GraphQL Viewer Query\nDESCRIPTION: Example GraphQL query showing viewer field structure.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/api-reference/relay-runtime/store.md#2025-04-18_snippet_4\n\nLANGUAGE: graphql\nCODE:\n```\nviewer {\n  id\n}\n```\n\n----------------------------------------\n\nTITLE: Store Root Field Access Example\nDESCRIPTION: Example of accessing the root field and viewer data from the Relay store.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/api-reference/relay-runtime/store.md#2025-04-18_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst viewer = store.getRootField('viewer');\n```\n\n----------------------------------------\n\nTITLE: Image Component Fragment Definition\nDESCRIPTION: Creating a reusable fragment for the Image component\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/tutorial/fragments-1.md#2025-04-18_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { graphql } from 'relay-runtime';\n\nconst ImageFragment = graphql`\n  fragment ImageFragment on Image {\n    url\n  }\n`;\n```\n\n----------------------------------------\n\nTITLE: Implementing supports in RelayNetworkLayer\nDESCRIPTION: Method signature for declaring supported features in the network layer implementation.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-classic/Classic-Interfaces-NetworkLayer.md#2025-04-18_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nsupports(...options: Array<string>): boolean\n```\n\n----------------------------------------\n\nTITLE: Client Schema Extension for User Selection in Relay\nDESCRIPTION: GraphQL schema extension that adds a boolean 'is_selected' field to the User type, which will be used in client-side toggle functionality.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/guided-tour/updating-data/imperatively-modifying-store-data.md#2025-04-18_snippet_2\n\nLANGUAGE: graphql\nCODE:\n```\n# User.graphql\nextend type User {\n  is_selected: Boolean\n}\n```\n\n----------------------------------------\n\nTITLE: GraphQL query for root record\nDESCRIPTION: An example GraphQL query that retrieves the id of the viewer.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v13.0.0/api-reference/relay-runtime/store.md#2025-04-18_snippet_5\n\nLANGUAGE: graphql\nCODE:\n```\nviewer {\n  id\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Arguments for Derived Resolvers with Root Fragments\nDESCRIPTION: Shows how to define and pass arguments to a derived resolver that requires arguments for its root fragment. This uses @argumentDefinitions directive to define fragment arguments.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/guides/relay-resolvers/field-arguments.md#2025-04-18_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n/**\n * @RelayResolver User.fancyGreeting: String\n * @rootFragment UserFancyGreetingFragment\n */\nexport function fancyGreeting(key: UserFancyGreetingFragment$key): string {\n  const user = readFragment(graphql`\n    fragment UserFancyGreetingFragment on User @argumentDefinitions(\n      salutation: {type: \"String\"},\n    ) {\n      name\n      greet(salutation: $salutation)\n    }\n  `, key);\n  return `${user.name} says ${user.greet}`;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining GraphQL Actor Interface\nDESCRIPTION: Schema definition for an Actor interface specifying common fields shared across different actor types.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/tutorial/interfaces-polymorphism.md#2025-04-18_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\ninterface Actor {\n  name: String\n  profilePicture: Image\n  joined: DateTime\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Live Field with @live\nDESCRIPTION: This code snippet demonstrates how to define a live field using the `@live` tag. The resolver function `counter` must return an object with the shape of a `LiveStateValue` to allow Relay to read the current value and subscribe to changes. This is used to model client state that changes over time.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/api-reference/relay-resolvers/docblock-format.md#2025-04-18_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport type {LiveState} from 'relay-runtime';\n\n/**\n * @RelayResolver Query.counter: Int\n * @live\n */\nexport function counter(): LiveState<number> {\n  return {\n    read: () => store.getState().counter,\n    subscribe: cb => {\n      return store.subscribe(cb);\n    },\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Using Variables in Relay Fragments - JavaScript\nDESCRIPTION: This JavaScript snippet exemplifies how Relay's `useFragment` function works with a fragment that requires a variable. The fragment `UserComponent_user` expects the presence of the `$scale` variable in any enclosing query.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/guided-tour/rendering/variables.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nfunction UserComponent(props: Props) {\n  const data = useFragment(\n    graphql`\n    fragment UserComponent_user on User {\n      name\n      profile_picture(scale: $scale) {\n        uri\n      }\n    }\n    `,\n    props.user,\n  );\n\n  return (...);\n}\n```\n\n----------------------------------------\n\nTITLE: Using @alias for type safety\nDESCRIPTION: This code demonstrates the use of the `@alias` directive to improve type safety when spreading a fragment. By aliasing the `MyViewer` fragment, the component can safely check if the underlying data satisfies the type requirements of `MyViewer` before passing it to the component.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/guides/alias-directive.md#2025-04-18_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nfunction MyNode({nodeKey}) {\n  const node = useFragment(graphql`\n    fragment MyFragment on Node {\n      ...MyViewer @alias(as: \\\"my_viewer\\\")\n    }`, nodeKey);\n\n  // Relay returns the fragment key as its own nullable property\n  if(node.my_viewer == null) {\n    return null;\n  }\n\n  // Because `my_viewer` is typed as nullable, Flow/TypeScript will\n  // show an error if you try to use the `my_viewer` without first\n  // performing a null check.\n  //                          VVVVVVVVVVVVVV\n  return <MyViewer viewerKey={node.my_viewer} />\n}\n```\n\n----------------------------------------\n\nTITLE: Using Fragment References in Flow Components\nDESCRIPTION: This snippet demonstrates how Relay generates Flow types for fragment data and references. The Fragment component receives a fragment reference as a prop and uses useFragment to access the actual data.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/guides/type-emission.md#2025-04-18_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * export type ExampleFragmentComponent_artist$data = {\n *   +name: string\n * }\n *\n * export type ExampleFragmentComponent_artist$key = { ... }\n */\n\nimport type { ExampleFragmentComponent_artist$key } from \"__generated__/ExampleFragmentComponent_artist.graphql\"\n\ntype Props = {\n  artist: ExampleFragmentComponent_artist$key,\n};\n\nexport default ExampleFragmentComponent(props) {\n  // data is of type ExampleFragmentComponent_artist$data\n  const data = useFragment(\n    graphql`\n      fragment ExampleFragmentComponent_artist on Artist {\n        biography\n      }\n    `,\n    props.artist,\n  );\n\n  return <div>About the artist: {props.artist.biography}</div>;\n}\n```\n\n----------------------------------------\n\nTITLE: Manually Removing Edges with ConnectionHandler.deleteNode\nDESCRIPTION: Shows how to programmatically remove an edge from a connection using the ConnectionHandler.deleteNode API. This method takes a connection record and the ID of the node to remove, then finds and removes the corresponding edge.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/guided-tour/list-data/updating-connections.md#2025-04-18_snippet_11\n\nLANGUAGE: js\nCODE:\n```\nconst {ConnectionHandler} = require('RelayModern');\n\nfunction updater(store: RecordSourceSelectorProxy) {\n  const storyRecord = store.get(storyID);\n  const connectionRecord = ConnectionHandler.getConnection(\n    storyRecord,\n    'StoryComponent_story_comments_connection',\n  );\n\n  // Remove edge from the connection, given the ID of the node\n  ConnectionHandler.deleteNode(\n    connectionRecord,\n    commentIDToDelete,\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Dictionary Component Fragments\nDESCRIPTION: Example component showing how to define multiple related GraphQL fragments.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/guides/compiler.md#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst DictionaryWordFragment = graphql`\n  fragment DictionaryComponent_word on Word {\n    id\n    definition {\n      ...DictionaryComponent_definition\n    }\n  }\n`\n\nconst DictionaryDefinitionFragment = graphql`\n  fragment DictionaryComponent_definition on WordDefinition {\n    text\n    image\n  }\n`\n```\n\n----------------------------------------\n\nTITLE: ID Generation in Mock Resolvers\nDESCRIPTION: Example of generating sequential IDs in mock resolvers using the generateId function\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/guides/testing-relay-components.md#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  // will generate strings \"my-id-1\", \"my-id-2\", etc.\n  ID(_, generateId) {\n     return `my-id-${generateId()}`;\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Relay Compiler in package.json\nDESCRIPTION: Configuration in package.json to set up Relay compiler scripts and settings, including source directory, schema location, and language preference.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/getting-started/step-by-step-guide.md#2025-04-18_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n// your-app-name/package.json\n{\n  ...\n  \"scripts\": {\n    ...\n    \"start\": \"yarn run relay && react-scripts start\",\n    \"build\": \"yarn run relay && react-scripts build\",\n    \"relay\": \"yarn run relay-compiler\"\n    ...\n  },\n  \"relay\": {\n    \"src\": \"./src/\",\n    \"schema\": \"./schema.graphql\",\n    \"language\": \"javascript\"\n  }\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: SkipRedundantNodeTransform Example\nDESCRIPTION: This example illustrates how SkipRedundantNodeTransform eliminates field duplication, even in complex cases involving conditionals and sub-fragments. This transform optimizes the query by ensuring that fields are processed at most once.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/principles-and-architecture/compiler-architecture.md#2025-04-18_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\n\"# before: `id` processed up to 2x\nfoo {\n  bar {\n    id\n  }\n  ... on FooType @include(if: $cond) { # can't be flattened due to conditional\n    id # but this field is guaranteed to be fetched regardless\n  }\n}\n\n# after: `id` processed at most once\nfoo {\n  bar {\n    id\n  }\n}\"\n```\n\n----------------------------------------\n\nTITLE: Declaring GraphQL Fragment for User Data - GraphQL\nDESCRIPTION: This snippet demonstrates how to declare a GraphQL fragment named 'UserFragment' that selects user fields for querying a GraphQL type. It identifies the relevant fields that will be requested from the API when this fragment is used.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/guided-tour/rendering/fragments.md#2025-04-18_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nfragment UserFragment on User {\n  name\n  age\n  profile_picture(scale: 2) {\n    uri\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Logging Error with Project Name in JavaScript\nDESCRIPTION: Example showing how to use recoverableViolation to log an error with a specific project name. This demonstrates the basic logging pattern before using @required directive.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/guides/required-directive.md#2025-04-18_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nrecoverableViolation('My error string', 'my_logger_project');\n```\n\n----------------------------------------\n\nTITLE: Implementing RelayEnvironmentProvider in React\nDESCRIPTION: Shows how to set up the RelayEnvironmentProvider at the root of a React application to provide the Relay environment.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/migration-and-compatibility/relay-hooks-and-legacy-container-apis.md#2025-04-18_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<RelayEnvironmentProvider environment={MyAppEnvironment}>\n  <App />\n</RelayEnvironmentProvider>\n```\n\n----------------------------------------\n\nTITLE: Configuring Subscriptions with subscriptions-transport-ws\nDESCRIPTION: This snippet provides an alternative setup using the subscriptions-transport-ws library for managing GraphQL subscriptions in Relay. It connects to a WebSocket server and establishes a subscription function that converts observable types to work with Relay.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/guided-tour/updating-data/graphql-subscriptions.md#2025-04-18_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport {\\n    ...\\n    Network,\\n    Observable\\n} from 'relay-runtime';\\nimport { SubscriptionClient } from 'subscriptions-transport-ws';\\n\\nconst subscriptionClient = new SubscriptionClient('ws://localhost:3000', {\\n  reconnect: true,\\n});\\n\\nconst subscribe = (request, variables) => {\\n  const subscribeObservable = subscriptionClient.request({\\n    query: request.text,\\n    operationName: request.name,\\n    variables,\\n  });\\n  // Important: Convert subscriptions-transport-ws observable type to Relay's\\n  return Observable.from(subscribeObservable);\\n};\\n\\nconst network = Network.create(fetchQuery, subscribe);\n```\n\n----------------------------------------\n\nTITLE: Converting Lazy Query to Preloaded Query Component\nDESCRIPTION: Modifies the PosterDetailsHovercardContents component to use usePreloadedQuery instead of useLazyLoadQuery for optimized data fetching.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/tutorial/queries-2.md#2025-04-18_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nimport {usePreloadedQuery} from 'react-relay';\nimport type {PreloadedQuery} from 'react-relay';\nimport type {PosterDetailsHovercardContentsQuery as QueryType} from './__generated__/PosterDetailsHovercardContentsQuery.graphql';\n\nexport default function PosterDetailsHovercardContents({\n  queryRef,\n}: {\n  queryRef: PreloadedQuery<QueryType>,\n}): React.ReactElement {\n  const data = usePreloadedQuery(\n    PosterDetailsHovercardContentsQuery,\n    queryRef,\n  );\n  return <PosterDetailsHovercardContentsBody poster={data.node} />;\n}\n```\n\n----------------------------------------\n\nTITLE: Reading Client-Only Data in Relay Components\nDESCRIPTION: Demonstrates how to query client-only fields in a Relay fragment. Client-only fields can be selected just like regular server fields in fragments or queries.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v13.0.0/guided-tour/updating-data/client-only-data.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst data = *useFragment*(\n  graphql`\n    fragment CommentComponent_comment on Comment {\n\n      # We can select client-only fields as we would any other field\n      is_new_comment\n\n      body {\n        text\n      }\n    }\n  `,\n  props.user,\n);\n```\n\n----------------------------------------\n\nTITLE: Adding StoryCommentsSection to Story Component in React\nDESCRIPTION: React component code showing how to import and add the StoryCommentsSection component to the Story component, including updating the GraphQL fragment.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/tutorial/connections-pagination.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport StoryCommentsSection from './StoryCommentsSection';\n\nfunction Story({story}) {\n  const data = useFragment(StoryFragment, story);\n  return (\n    <Card>\n      <Heading>{data.title}</Heading>\n      <PosterByline person={data.poster} />\n      <Timestamp time={data.posted_at} />\n      <Image image={data.image} />\n      <StorySummary summary={data.summary} />\n      <StoryCommentsSection story={data} />\n    </Card>\n  );\n}\n\nconst StoryFragment = graphql`\n  fragment StoryFragment on Story {\n    // ... as before\n    ...StoryCommentsSectionFragment\n  }\n`;\n```\n\n----------------------------------------\n\nTITLE: Store Reading Flow Diagram\nDESCRIPTION: ASCII diagram illustrating how components read data from the store using lookup() to get a Snapshot. Shows the relationship between RecordSource, Selector and the resulting Snapshot.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/principles-and-architecture/runtime-architecture.md#2025-04-18_snippet_4\n\nLANGUAGE: ascii-art\nCODE:\n```\n    ┌───────────────────────┐       ┌──────────────┐\n    │     RecordSource      │       │              │\n    │                       │       │              │\n    │┌──────┐┌──────┐┌─────┐│       │   Selector   │\n    ││Record││Record││ ... ││       │              │\n    │└──────┘└──────┘└─────┘│       │              │\n    └───────────────────────┘       └──────────────┘\n                │                           │\n                │                           │\n                └──────────────┬────────────┘\n                               │\n                               │  lookup\n                               │  (read)\n                               │\n                               ▼\n                        ┌─────────────┐\n                        │             │\n                        │  Snapshot   │\n                        │             │\n                        └─────────────┘\n                               │\n                               │  render, etc\n                               │\n                               ▼\n```\n\n----------------------------------------\n\nTITLE: Running Relay Compiler with npm\nDESCRIPTION: Shows how to run the Relay Compiler using npm, specifying a custom configuration file path.\nSOURCE: https://github.com/facebook/relay/blob/main/packages/relay-compiler/README.md#2025-04-18_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpm run relay ./relay.json\n```\n\n----------------------------------------\n\nTITLE: Relay Generated TypeScript Type Definition\nDESCRIPTION: This type definition is generated by the Relay compiler and is used by TypeScript to enforce type safety in the application. It describes the expected structure of the data returned by a GraphQL query, including nested fields and nullable types. Having up-to-date type definitions improves maintainability and safety by preventing runtime errors due to type mismatches.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/tutorial/queries-1.md#2025-04-18_snippet_6\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport type NewsfeedQuery$data = {\n  readonly topStory: {\n    readonly poster: {\n      readonly name: string | null;\n      readonly profilePicture: {\n        readonly url: string;\n      } | null;\n    };\n    readonly summary: string | null;\n    readonly thumbnail: {\n      readonly url: string;\n    } | null;\n    readonly title: string;\n  } | null;\n};\n```\n\n----------------------------------------\n\nTITLE: Passing Arguments to ImageFragment in PosterBylineFragment\nDESCRIPTION: This snippet demonstrates passing arguments to the `ImageFragment` when spreading it in the `PosterBylineFragment`. The `width` and `height` arguments are both set to 60, meaning that the profile picture fetched for the poster will be a 60x60 image.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/tutorial/fragments-1.md#2025-04-18_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nconst PosterBylineFragment = graphql`\n  fragment PosterBylineFragment on Actor {\n    name\n    profilePicture {\n      // change-line\n      ...ImageFragment @arguments(width: 60, height: 60)\n    }\n  }\n`;\n```\n\n----------------------------------------\n\nTITLE: Querying Empire by ID with GraphQL\nDESCRIPTION: Shows an example of querying the Empire faction in a GraphQL schema, returning its ID and name. The pattern is similar to querying other factions.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/guides/graphql-server-specification.md#2025-04-18_snippet_3\n\nLANGUAGE: graphql\nCODE:\n```\nquery EmpireQuery { empire { id name } }\n```\n\n----------------------------------------\n\nTITLE: Relay Query Component with Fragment References\nDESCRIPTION: Demonstrates a query component that references a fragment and loads user data. The example shows how the component will render when only part of the data is cached.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/guided-tour/reusing-cached-data/rendering-partially-cached-data.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * AppTabs.react.js\n *\n * Query Loader Component\n */\n\n // ....\n\n  const onSelectHomeTab = () => {\n    loadHomeTabQuery({id: '4'}, {fetchPolicy: 'store-or-network'});\n  }\n\n // ...\n\n/**\n * HomeTab.react.js\n *\n * Query Component\n */\n\nconst React = require('React');\nconst {graphql, usePreloadedQuery} = require('react-relay');\n\nconst UsernameComponent = require('./UsernameComponent.react');\n\nfunction HomeTab(props: Props) {\n  const data = usePreloadedQuery(\n    graphql`\n      query HomeTabQuery($id: ID!) {\n        user(id: $id) {\n          name\n          ...UsernameComponent_user\n        }\n      }\n    `,\n    props.queryRef,\n  );\n\n  return (\n    <>\n      <h1>{data.user?.name}</h1>\n      <UsernameComponent user={data.user} />\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using usePreloadedQuery Relay Hook\nDESCRIPTION: This code showcases the usage of the `usePreloadedQuery` hook from `react-relay/hooks`. It retrieves the data from the preloaded query.  The hook suspends if the query is still loading, triggering the Suspense fallback. When the data is available, it renders the repository name.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v13.0.0/getting-started/step-by-step-guide.md#2025-04-18_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nfunction App(props) {\n  const data = usePreloadedQuery(RepositoryNameQuery, props.preloadedQuery);\n\n  return (\n    <div className=\\\"App\\\">\n      <header className=\\\"App-header\\\">\n        <p>{data.repository.name}</p>\n      </header>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Querying for Rebel Ships with PageInfo\nDESCRIPTION: This GraphQL query demonstrates how to use the PageInfo type to determine if there are more pages in the connection, improving efficiency in pagination.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/guides/graphql-server-specification.md#2025-04-18_snippet_9\n\nLANGUAGE: graphql\nCODE:\n```\nquery EndOfRebelShipsQuery {\n  rebels {\n    name\n    originalShips: ships(first: 2) {\n      edges {\n        node {\n          name\n        }\n      }\n      pageInfo {\n        hasNextPage\n      }\n    }\n    moreShips: ships(first: 3 after: \"YXJyYXljb25uZWN0aW9uOjE=\") {\n      edges {\n        node {\n          name\n        }\n      }\n      pageInfo {\n        hasNextPage\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: GraphQL Node Interface Definition\nDESCRIPTION: The GraphQL definition of the Node interface, which requires an ID field. This interface is a convention that indicates the ID is stable and unique, making it possible for Relay to refetch the node directly.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/tutorial/refetchable-fragments.md#2025-04-18_snippet_12\n\nLANGUAGE: graphql\nCODE:\n```\ninterface Node {\n  id: ID!\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Weak Type with Relay Resolver\nDESCRIPTION: Example of defining a weak type using @RelayResolver and @weak tags for a ProfilePicture type that doesn't require a unique identifier.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/guides/relay-resolvers/defining-types.md#2025-04-18_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n/**\n * @RelayResolver ProfilePicture\n * @weak\n */\nexport type ProfilePicture = { url: string, height: number, width: number };\n```\n\n----------------------------------------\n\nTITLE: Avoiding Suspense with fetchQuery in Relay\nDESCRIPTION: Implementation showing how to refetch queries while avoiding Suspense fallbacks using fetchQuery. Manages manual loading states and ensures smooth transitions.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/guided-tour/refetching/refetching-queries-with-different-data.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * App.react.js\n */\nconst AppQuery = require('__generated__/AppQuery.graphql');\n\nfunction App(props: Props) {\n  const environment = useRelayEnvironment();\n  const [queryRef, loadQuery] = useQueryLoader(\n    AppQuery,\n    props.appQueryRef /* initial query ref */\n  );\n  const [isRefetching, setIsRefetching] = useState(false)\n\n  const refetch = useCallback(() => {\n    if (isRefetching) { return; }\n    setIsRefetching(true);\n    const variables = { id: 'different-id' };\n\n    // fetchQuery will fetch the query and write\n    // the data to the Relay store. This will ensure\n    // that when we re-render, the data is already\n    // cached and we don't suspend\n    fetchQuery(environment, AppQuery, variables)\n      .subscribe({\n        complete: () => {\n          setIsRefetching(false);\n\n          // *After* the query has been fetched, we call\n          // loadQuery again to re-render with a new\n          // queryRef.\n          // At this point the data for the query should\n          // be cached, so we use the 'store-only'\n          // fetchPolicy to avoid suspending.\n          loadQuery(variables, {fetchPolicy: 'store-only'});\n        },\n        error: () => {\n          setIsRefetching(false);\n        }\n      });\n  }, [/* ... */]);\n\n  return (\n    <React.Suspense fallback=\"Loading query...\">\n      <MainContent\n        isRefetching={isRefetching}\n        refetch={refetch}\n        queryRef={queryRef}\n      />\n    </React.Suspense>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Optimistic Response Example in Relay\nDESCRIPTION: Example of a simple optimistic response structure for a like mutation that immediately updates the viewer_does_like field.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/guided-tour/updating-data/graphql-mutations.md#2025-04-18_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  feedback_like: {\n    feedback: {\n      // Even though the id field is not explicitly selected, the\n      // compiler selected it for us\n      id: feedbackId,\n      viewer_does_like: true,\n    },\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Using Context in Mock Resolvers for Dynamic Data Generation\nDESCRIPTION: Example showing how to use the context parameter in mock resolvers to return different values based on field names, paths, or parent types. This enables more flexible and context-aware mock data.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v13.0.0/guides/testing-relay-components.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  String(context) {\n    if (context.name === 'zip') {\n      return '94025';\n    }\n    if (context.path != null && context.path.join('.') === 'node.actor.name') {\n      return 'Current Actor Name';\n    }\n    if (context.parentType === 'Image' && context.name === 'uri') {\n       return 'http://my-image.url';\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Refetching a Faction Using Node ID\nDESCRIPTION: A GraphQL query that demonstrates refetching a specific object using its globally unique ID through the node field, a core pattern in Relay.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/guides/graphql-server-specification.md#2025-04-18_snippet_3\n\nLANGUAGE: graphql\nCODE:\n```\nquery RebelsRefetchQuery {\n  node(id: \"RmFjdGlvbjox\") {\n    id\n    ... on Faction {\n      name\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Secondary Query Causing Relationship Change in GraphQL\nDESCRIPTION: A subsequent GraphQL query that fetches different fields from a changed relationship. This demonstrates how querying a different field set on a changed relationship can lead to missing data in normalized stores.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/debugging/why-null.md#2025-04-18_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\nquery OtherQuery {\n  me {\n    best_friend {\n      # new id: 2\n      # Note: name is not fetched here\n      age\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining GraphQL Schema for Client 3D\nDESCRIPTION: This snippet shows the GraphQL schema definition for Client 3D, including the Client3DData type, IClient3D interface, and Query extension.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/guides/data-driven-dependencies/client-3d.md#2025-04-18_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\ntype Client3DData {\n  type: String!\n  info: String!\n}\n\ninterface IClient3D {\n  id: ID!\n  data: Client3DData!\n}\n\nextend type Query {\n  client3D: IClient3D\n}\n```\n\n----------------------------------------\n\nTITLE: RecordSourceSelectorProxy Interface Definition\nDESCRIPTION: Defines the interface for the store object passed to updater functions, including methods for creating, deleting, and retrieving records.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/api-reference/relay-runtime/store.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ninterface RecordSourceSelectorProxy {\n  create(dataID: string, typeName: string): RecordProxy;\n  delete(dataID: string): void;\n  get(dataID: string): ?RecordProxy;\n  getRoot(): RecordProxy;\n  getRootField(fieldName: string): ?RecordProxy;\n  getPluralRootField(fieldName: string): ?Array<?RecordProxy>;\n  invalidateStore(): void;\n}\n```\n\n----------------------------------------\n\nTITLE: Paginating with After Cursor in GraphQL\nDESCRIPTION: A GraphQL query demonstrating pagination by requesting ships after a specific cursor, showing how to navigate through connection data in chunks.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/guides/graphql-server-specification.md#2025-04-18_snippet_13\n\nLANGUAGE: graphql\nCODE:\n```\nquery EndOfRebelShipsQuery {\n  rebels {\n    name\n    ships(first: 3 after: \"YXJyYXljb25uZWN0aW9uOjE=\") {\n      edges {\n        cursor\n        node {\n          name\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Node Interface Introspection Response\nDESCRIPTION: Expected JSON response from the Node interface introspection query showing interface definition.\nSOURCE: https://github.com/facebook/relay/blob/main/website/spec/ObjectIdentification.md#2025-04-18_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"__type\": {\n    \"name\": \"Node\",\n    \"kind\": \"INTERFACE\",\n    \"fields\": [\n      {\n        \"name\": \"id\",\n        \"type\": {\n          \"kind\": \"NON_NULL\",\n          \"ofType\": {\n            \"name\": \"ID\",\n            \"kind\": \"SCALAR\"\n          }\n        }\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Passing Fragment Argument as Field Argument in GraphQL\nDESCRIPTION: This snippet demonstrates how to pass the fragment argument as a field argument to the contacts field in the ContactsListFragment.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/tutorial/refetchable-fragments.md#2025-04-18_snippet_3\n\nLANGUAGE: graphql\nCODE:\n```\nconst ContactsListFragment = graphql`\n  fragment ContactsListFragment on Viewer\n    @argumentDefinitions(\n      search: {type: \"String\", defaultValue: null}\n    )\n  {\n    contacts(search: $search) {\n      id\n      ...ContactRowFragment\n    }\n  }\n`;\n```\n\n----------------------------------------\n\nTITLE: Assigning to an Interface when Source May Not Implement Interface\nDESCRIPTION: Complete example showing how to use a validator when assigning a value to an interface type when the source type is not guaranteed to implement that interface. Demonstrates importing and using a validator function.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/guided-tour/updating-data/imperatively-modifying-linked-fields.md#2025-04-18_snippet_11\n\nLANGUAGE: js\nCODE:\n```\nimport {validate as validateActor} from 'Foo_actor.graphql';\n\ngraphql`\n  fragment Foo_actor on Actor @assignable {\n    __typename\n  }\n`;\n\nconst data = useFragment(graphql`\n  fragment Foo_query on Query {\n    node(id: \"4\") {\n      ...Foo_actor\n    }\n  }\n`, queryRef);\n\nconst environment = useRelayEnvironment();\nconst onClick = () => {\n  commitLocalUpdate(environment, store => {\n    const {updatableData} = store.readUpdatableQuery(\n      graphql`\n        query FooUpdatableQuery @updatable {\n          viewer {\n            actor {\n              ...Foo_actor\n            }\n          }\n        }\n      `,\n      {}\n    );\n\n    if (updatableData.viewer != null && data.node != null) {\n      const validActor = validateActor(data.node);\n      if (validActor !== false) {\n        updatableData.viewer.actor = validActor;\n      }\n    }\n  });\n};\n```\n\n----------------------------------------\n\nTITLE: Package.json Relay Compiler Configuration\nDESCRIPTION: NPM script configuration for running Relay compiler with schema and source directory specifications.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-experimental/RelayHooks-StepByStep.md#2025-04-18_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"scripts\": {\n    \"start\": \"yarn run relay && react-scripts start\",\n    \"build\": \"yarn run relay && react-scripts build\",\n    \"relay\": \"yarn run relay-compiler --schema schema.graphql --src ./src/ --watchman false $@\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Derived Resolvers with Arguments\nDESCRIPTION: Demonstrates how to query a derived resolver that requires arguments to be passed to its root fragment. The arguments must be supplied when fetching the query.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/guides/relay-resolvers/field-arguments.md#2025-04-18_snippet_3\n\nLANGUAGE: graphql\nCODE:\n```\nquery MyQuery($salutation: String!) {\n  me {\n    fancyGreeting(salutation: $salutation)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Simple Relay Resolver Field Example with Docblock Syntax in TypeScript\nDESCRIPTION: This snippet provides a simple example of a Relay resolver field using docblock syntax in TypeScript. It defines a 'name' field on a 'User' type that returns a string.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/guides/relay-resolvers/defining-fields.md#2025-04-18_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * @RelayResolver User.name: String\n */\nexport function name(user: UserModel): string {\n  return user.name;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Array Fields in Relay Queries\nDESCRIPTION: Demonstrates how to use the @relay(plural: true) directive to resolve a fragment into an array of objects. This is useful when working with list fields in GraphQL schemas.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-classic/Classic-APIReference-QL.md#2025-04-18_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nRelay.createContainer(Story, {\n  fragments: {\n    bars: () => Relay.QL`\n      fragment on Bar @relay(plural: true) {\n        id\n        name\n      }\n    `,\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing NodeTokenResolver for ID Compliance - JavaScript\nDESCRIPTION: This code snippet demonstrates how to implement a NodeTokenResolver using the helper trait NodeTokenResolverWithPrefix to ensure that IDs are globally unique by encoding them with a unique prefix.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v13.0.0/debugging/inconsistent-typename-error.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport DocsRating from '@site/src/core/DocsRating';\nimport {FbInternalOnly, OssOnly} from 'docusaurus-plugin-internaldocs-fb/internal';\n```\n\n----------------------------------------\n\nTITLE: Simple Assignment to a Viewer Actor in Relay\nDESCRIPTION: This snippet shows how to directly assign a user to a viewer's actor field using the Relay local updating system, assuming the types match.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/guided-tour/updating-data/imperatively-modifying-linked-fields.md#2025-04-18_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\ngraphql`\n  fragment Foo_actor on Actor @assignable {\n    __typename\n  }\n`;\n\nconst data = useFragment(graphql`\n  fragment Foo_query on Query {\n    user {\n      ...Foo_actor\n    }\n    viewer {\n      actor {\n        ...Foo_actor\n      }\n    }\n  }\n`, queryRef);\n\nconst environment = useRelayEnvironment();\nonClick = () => {\n  commitLocalUpdate(environment, store => {\n    const {updatableData} = store.readUpdatableQuery(\n      graphql`\n        query FooUpdatableQuery @updatable {\n          viewer {\n            actor {\n              ...Foo_actor\n            }\n          }\n        }\n      `,\n      {}\n    );\n\n    // Assigning the user works as you would expect\n    if (updatableData.viewer != null && data.user != null) {\n      updatableData.viewer = data.user;\n    }\n\n    // As does assigning the viewer\n    if (updatableData.viewer != null && data.viewer?.actor != null) {\n      updatableData.viewer = data.viewer.actor;\n    }\n  });\n};\n```\n\n----------------------------------------\n\nTITLE: Fragment with Query Variables\nDESCRIPTION: Demonstrates how fragments can reference variables declared by a parent query, showing the relationship between fragments and query variables.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/guided-tour/rendering/variables.md#2025-04-18_snippet_3\n\nLANGUAGE: graphql\nCODE:\n```\nfragment UserFragment on User {\n  name\n  profile_picture(scale: $scale) {\n    uri\n  }\n}\n\n\nquery ViewerQuery($scale: Float!) {\n  viewer {\n    actor {\n      ...UserFragment\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Relay Artifact Directory in package.json\nDESCRIPTION: Configuration in package.json to specify a single directory for storing Relay compiler artifacts. This enables strict fragment reference type-information instead of using 'any' types.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/guides/type-emission.md#2025-04-18_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"relay\": {\n    \"artifactDirectory\": \"./src/__generated__\",\n    ...\n  },\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Semantic NonNull Schema in GraphQL\nDESCRIPTION: Schema definition showing how to implement the @semanticNonNull directive for a User type with a non-nullable name field that can only be null in case of errors.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/guides/semantic-nullability.md#2025-04-18_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\ndirective @semanticNonNull(levels: [Int] = [0]) on FIELD_DEFINITION\n\ntype User {\n  name: String @semanticNonNull\n}\n```\n\n----------------------------------------\n\nTITLE: Querying with Pagination Cursors\nDESCRIPTION: A GraphQL query requesting the first two ships in the Rebels faction and including cursor information, demonstrating how to implement pagination in Relay connections.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/guides/graphql-server-specification.md#2025-04-18_snippet_11\n\nLANGUAGE: graphql\nCODE:\n```\nquery MoreRebelShipsQuery {\n  rebels {\n    name\n    ships(first: 2) {\n      edges {\n        cursor\n        node {\n          name\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Reusable Image Fragment in Relay\nDESCRIPTION: Defining an ImageFragment that can be reused in multiple places in the component tree. This fragment selects the url field from any Image type node in the GraphQL schema.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/tutorial/fragments-1.md#2025-04-18_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { graphql } from 'relay-runtime';\n\nconst ImageFragment = graphql`\n  fragment ImageFragment on Image {\n    url\n  }\n`;\n```\n\n----------------------------------------\n\nTITLE: Defining GraphQL Query with Relay and React\nDESCRIPTION: Demonstrates creating a GraphQL query using the graphql template literal and defining a React component that uses useQueryLoader and usePreloadedQuery hooks\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/api-reference/hooks/use-preloaded-query.md#2025-04-18_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nquery AppQuery($id: ID!) {\n  user(id: $id) {\n    name\n  }\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst React = require('React');\n\nconst {graphql, useQueryLoader, usePreloadedQuery} = require('react-relay');\n\nfunction NameLoader(props) {\n  const [queryReference, loadQuery] = useQueryLoader(\n    AppQuery,\n    props.initialQueryRef\n  );\n\n  return (<>\n    <Button\n      onClick={() => loadQuery({id: '4'})}\n      disabled={queryReference != null}\n    >\n      Reveal your name!\n    </Button>\n    <Suspense fallback=\"Loading...\">\n      {queryReference != null\n        ? <NameDisplay queryReference={queryReference} />\n        : null\n      }\n    </Suspense>\n  </>);\n}\n\nfunction NameDisplay({ queryReference }) {\n  const data = usePreloadedQuery<AppQueryType>(AppQuery, queryReference);\n\n  return <h1>{data.user?.name}</h1>;\n}\n```\n\n----------------------------------------\n\nTITLE: GraphQL Query with Variables Example\nDESCRIPTION: Shows how to provide both the query and variables when making a request. Includes the query definition and the variables object.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/guided-tour/rendering/variables.md#2025-04-18_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\n# Query:\nquery UserQuery($id: ID!) {\n  # ...\n}\n\n# Variables:\n{\"id\": 4}\n```\n\n----------------------------------------\n\nTITLE: GraphQL Single Request Data Fetching\nDESCRIPTION: GraphQL method for retrieving story data in a single network request, showcasing improved efficiency and client-side data specification\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/principles-and-architecture/thinking-in-graphql.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ngraphql.get(`query { stories { id, text } }`).then(\n  stories => {\n    console.log(stories);\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: GraphQL Fragment Definition Example\nDESCRIPTION: A simple example of defining a GraphQL fragment on the User type that selects the name field. This demonstrates the basic syntax for creating reusable fragments in Relay.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v13.0.0/glossary/glossary.md#2025-04-18_snippet_5\n\nLANGUAGE: graphql\nCODE:\n```\nfragment Component_name on User { name }\n```\n\n----------------------------------------\n\nTITLE: Appending an Edge to a Connection using @appendEdge\nDESCRIPTION: Illustrates using @appendEdge directive in a Relay mutation to add edges to a connection. Requires access to connection IDs and importing graphql from 'react-relay'.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v13.0.0/guided-tour/list-data/updating-connections.md#2025-04-18_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Get the connection ID using the `__id` field\nconst connectionID = fragmentData?.comments?.__id;\n\n// Or get it using `ConnectionHandler.getConnectionID()`\nconst connectionID = ConnectionHandler.getConnectionID(\n  '<story-id>',\n  'StoryComponent_story_comments_connection',\n);\n\n// ...\n\n// Mutation\ncommitMutation<AppendCommentMutation>(environment, {\n  mutation: graphql`\n    mutation AppendCommentMutation(\n      # Define a GraphQL variable for the connections array\n      $connections: [ID!]!\n      $input: CommentCreateInput\n    ) {\n      commentCreate(input: $input) {\n        # Use @appendEdge or @prependEdge on the edge field\n        feedbackCommentEdge @appendEdge(connections: $connections) {\n          cursor\n          node {\n            id\n          }\n        }\n      }\n    }\n  `,\n  variables: {\n    input,\n    // Pass the `connections` array\n    connections: [connectionID],\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Required Fields Event Logging Structure\nDESCRIPTION: Structure of the logging event that occurs when a field with action: LOG is null\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/guides/required-directive.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  name: 'read.missing_required_field',\n  owner: string, // MyFragmentOrQueryName\n  fieldPath: string, // path.to.my.field\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing User Greeting Resolver\nDESCRIPTION: Example of a Relay Resolver that creates a greeting field for User type by combining honorific and last name.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/guides/relay-resolvers.md#2025-04-18_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport type {UserGreetingResolver$key} from 'UserGreetingResolver.graphql';\nimport {graphql} from 'relay-runtime';\nimport {readFragment} from 'relay-runtime/store/ResolverFragments';\n\n/**\n * @RelayResolver User.greeting: String\n * @rootFragment UserGreetingResolver\n *\n * A greeting for the user which includes their name and title.\n */\nexport function greeting(userKey: UserGreetingResolver$key): string {\n  const user = readFragment(graphql`\n    fragment UserGreetingResolver on User {\n      honorific\n      last_name\n    }`, userKey);\n\n  return `Hello ${user.honorific} ${user.last_name}!`;\n}\n```\n\n----------------------------------------\n\nTITLE: GraphQL Schema Definition Snippet\nDESCRIPTION: Provides part of a schema definition for a newsfeed app, illustrating GraphQL types and interfaces. Dependencies include a GraphQL server capable of processing schema definitions. Defines structure and relationships of data types like Story, Person, and Category. There are no direct inputs or outputs in this snippet.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/tutorial/graphql.md#2025-04-18_snippet_3\n\nLANGUAGE: graphql\nCODE:\n```\n// A newsfeed story. It has fields, some of which are scalars (e.g. strings\n// and numbers) and some that are edges that point to other nodes in the graph,\n// such as the 'thumbnail' and 'poster' fields:\ntype Story {\n  id: ID!\n  category: Category\n  title: String\n  summary: String\n  thumbnail: Image\n  poster: Actor\n}\n\n// An Actor is an entity that can do something on the site. This is an\n// interface that multiple different types can implement, in this case\n// Person and Organization:\ninterface Actor {\n  id: ID!\n  name: String\n  profilePicture: Image\n}\n\n// This is a specific type that implements that interface:\ntype Person implements Actor {\n  id: ID!\n  name: String\n  email: String\n  profilePicture: Image\n  location: Location\n}\n\n// The schema also lets you define enums, such as the category\n// of a newsfeed story:\nenum Category {\n  EDUCATION\n  NEWS\n  COOKING\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Fragment Arguments to ImageFragment\nDESCRIPTION: This code demonstrates how to add fragment arguments to ImageFragment for specifying image dimensions, and how to use these arguments as field arguments.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/tutorial/fragments-1.md#2025-04-18_snippet_10\n\nLANGUAGE: GraphQL\nCODE:\n```\nconst ImageFragment = graphql`\n  fragment ImageFragment on Image\n    @argumentDefinitions(\n      width: {\n        type: \"Int\",\n        defaultValue: null\n      }\n      height: {\n        type: \"Int\",\n        defaultValue: null\n      }\n    )\n  {\n    url(\n      width: $width,\n      height: $height\n    )\n    altText\n  }\n`;\n```\n\n----------------------------------------\n\nTITLE: Operation Data Type Example in Flow/TypeScript\nDESCRIPTION: Shows how operation data is typed when using useLazyLoadQuery. Demonstrates type checking for the returned data structure.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/guides/type-emission.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst data = useLazyLoadQuery(\n  graphql`\n    query ExampleQuery($artistID: ID!) {\n      artist(id: $artistID) {\n        name\n      }\n    }\n  `,\n  {artistID: 'banksy'},\n);\n\nreturn props.artist && <div>{props.artist.name} is great!</div>\n```\n\n----------------------------------------\n\nTITLE: Querying Best Friend Name in GraphQL\nDESCRIPTION: An example GraphQL query that fetches the name of the user's best friend. Used to demonstrate how relationship changes can lead to null values when the best friend ID changes but required fields aren't fetched.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/debugging/why-null.md#2025-04-18_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nquery MyQuery {\n  me {\n    best_friend {\n      # id: 1\n      name\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: User Schema Extension for Selection State\nDESCRIPTION: GraphQL schema extension adding an is_selected boolean field to User type\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/guided-tour/updating-data/imperatively-modifying-store-data.md#2025-04-18_snippet_2\n\nLANGUAGE: graphql\nCODE:\n```\nextend type User {\n  is_selected: Boolean\n}\n```\n\n----------------------------------------\n\nTITLE: Root Access Example\nDESCRIPTION: Example showing how to access the root of a GraphQL document.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/api-reference/relay-runtime/store.md#2025-04-18_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst root = store.getRoot();\n```\n\n----------------------------------------\n\nTITLE: Logging Missing Required Fields in JavaScript\nDESCRIPTION: Shows the structure of the log event generated when a field with @required(action: LOG) is null.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/guides/required-directive.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  name: 'read.missing_required_field',\n  owner: string, // MyFragmentOrQueryName\n  fieldPath: string, // path.to.my.field\n};\n```\n\n----------------------------------------\n\nTITLE: Providing Variables with @argumentDefinitions in GraphQL\nDESCRIPTION: A provided variable is a fragment variable whose value is supplied by a provider function at runtime. This snippet illustrates how to declare a provided variable in a fragment using `@argumentDefinitions`.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/api-reference/graphql/graphql-directives.md#2025-04-18_snippet_2\n\nLANGUAGE: graphql\nCODE:\n```\nfragment TodoItem_item on TodoList\n@argumentDefinitions(\n  include_timestamp: {\n    type: \"Boolean!\",\n    provider: \"Todo_ShouldIncludeTimestamp.relayprovider\"\n  },\n) {\n  timestamp @include(if: $include_timestamp)\n  text\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// Todo_ShouldIncludeTimestamp.relayprovider.js\nexport default {\n  get(): boolean {\n    // must always return true or false for a given run\n    return check('todo_should_include_timestamp');\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Best Friend Assignment Component\nDESCRIPTION: React component that handles assigning users to a best friends list using Relay fragments and local updates\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/guided-tour/updating-data/imperatively-modifying-linked-fields.md#2025-04-18_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// AssignBestFriendButton.react.js\nimport {validate as ValidateUser} from 'AssignableBestFriendButton_assignable_user.graphql';\nimport type {AssignBestFriendButton_user$key} from 'AssignBestFriendButton_user.graphql';\nimport type {AssignBestFriendButton_viewer$key} from 'AssignBestFriendButton_viewer';\n\nimport type {RecordSourceSelectorProxy} from 'react-relay';\n\nconst {commitLocalUpdate, useFragment, useRelayEnvironment} = require('react-relay');\n\ngraphql`\n  fragment AssignBestFriendButton_assignable_user on User @assignable {\n    __typename\n  }\n`;\n\nexport default function AssignBestFriendButton({\n  someTypeRef: AssignBestFriendButton_someType$key,\n  viewerFragmentRef: AssignBestFriendButton_viewer$key,\n}) {\n  const data = useFragment(graphql`\n    fragment AssignBestFriendButton_someType on SomeType {\n      user {\n        name\n        ...AssignableBestFriendButton_assignable_user\n      }\n    }\n  `, someTypeRef);\n\n  const viewer = useFragment(graphql`\n    fragment AssignBestFriendButton_viewer on Viewer {\n      best_friends {\n        # since viewer.best_friends appears in the right hand side of the assignment\n        # (i.e. updatableData.viewer.best_friends = viewer.best_friends.concat(...)),\n        # the best_friends field must contain the correct assignable fragment spread\n        ...AssignableBestFriendButton_assignable_user\n      }\n    }\n  `, viewerRef);\n\n  const environment = useRelayEnvironment();\n  const onClick = () => {\n    commitLocalUpdate(\n      environment,\n      (store: RecordSourceSelectorProxy) => {\n        const {updatableData} = store.readUpdatableQuery(\n            graphql`\n              query AssignBestFriendButtonUpdatableQuery\n              @updatable {\n                viewer {\n                  best_friends {\n                    ...AssignableBestFriendButton_assignable_user\n                  }\n                }\n              }\n            `,\n            {}\n          );\n\n        // See the note above about reducing the cases in which we need to validate\n        // at runtime.\n        const existingBestFriends = viewer.best_friends == null ? [] : viewer.best_friends\n          .flatMap(friend => {\n            const validFriend = validateUser(friend);\n            if (validFriend === false) {\n              return [];\n            } else {\n              return [validFriend];\n            }\n          });\n\n        const user = data.user;\n        if (updatableData.viewer != null && user != null) {\n          const validUser = validateUser(user);\n          if (validUser !== false) {\n            updatableData.viewer.best_friends = existingBestFriends.concat([validUser]);\n          }\n        }\n      }\n    );\n  };\n\n  return (<button onClick={onClick}>\n    Add {user.name ?? 'someone with no name'} to my list of best friends!\n  </button>);\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Record Type in Relay Store\nDESCRIPTION: Example of retrieving the type of a record in the Relay Store using the getType method of RecordProxy.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/api-reference/relay-runtime/store.md#2025-04-18_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nconst type = user.getType();  // User\n```\n\n----------------------------------------\n\nTITLE: Reading an Updatable Fragment in Relay\nDESCRIPTION: Demonstrates how to read an updatable fragment using store.readUpdatableFragment, passing the fragment and the original fragment ref to obtain updatable data.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/tutorial/mutations-updates.md#2025-04-18_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction StoryLikeButton({story}) {\n  ...\n      optimisticUpdater: store => {\n        const fragment = graphql`\n          fragment StoryLikeButton_updatable on Story @updatable {\n            likeCount\n            doesViewerLike\n          }\n        `;\n        const {\n          updatableData\n        } = store.readUpdatableFragment(\n          fragment,\n          story\n        );\n      },\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Using Fragment with Default Arguments\nDESCRIPTION: Shows how to use fragments with default arguments, demonstrating both explicit argument passing and default value usage.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/guided-tour/rendering/variables.md#2025-04-18_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nfunction TaskList(props) {\n  const data = usePreloadedQuery(\n    graphql`\n      query TaskListQuery {\n        todays_tasks {\n          ...TaskView_task\n        }\n        tomorrows_tasks {\n          ...TaskView_task @arguments(showDetailedResults: false)\n        }\n      }\n    `,\n    props.queryRef,\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Relay Feature Flags in TypeScript\nDESCRIPTION: Shows how to enable experimental features in Relay by modifying the global RelayFeatureFlags object. This is intended for unstable features and should not be needed for regular Relay usage.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/api-reference/relay-runtime/runtime-configuration.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { RelayFeatureFlags } from 'relay-runtime';\n\nRelayFeatureFlags.ENABLE_SOME_EXPERIMENT = true;\n```\n\n----------------------------------------\n\nTITLE: Deleting Local Notes in Relay Store\nDESCRIPTION: Function to remove a Note record from the user's notes list and delete it from the local Relay store.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/guides/client-schema-extensions.md#2025-04-18_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport {commitLocalUpdate} from 'react-relay';\n\nfunction deleteUserNote(environment, dataID) {\n  commitLocalUpdate(environment, store => {\n    const user = store.getRoot().getLinkedRecord('viewer');\n    const userNoteRecords = user.getLinkedRecords('notes');\n\n    // Remove the note from the list of user notes.\n    const newUserNoteRecords = userNoteRecords.filter(x => x.getDataID() !== dataID);\n\n    // Delete the note from the store.\n    store.delete(dataID);\n\n    // Set the new list of notes.\n    user.setLinkedRecords(newUserNoteRecords, 'notes');\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Visualizing Relay Publish Process\nDESCRIPTION: ASCII diagram illustrating how normalized records are published to the store, updating records but not yet notifying subscriptions of changes.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v13.0.0/principles-and-architecture/runtime-architecture.md#2025-04-18_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n                        publish\n                           │\n                           ▼\n             ┌───────────────────────────┐\n             │           Store           │\n             │ ┌───────────────────────┐ │\n             │ │     RecordSource      │ │\n             │ │                       │ │\n             │ │┌──────┐┌──────┐┌─────┐│ │\n             │ ││Record││Record││ ... ││ │ <--- records are updated\n             │ │└──────┘└──────┘└─────┘│ │\n             │ └───────────────────────┘ │\n             │ ┌───────────────────────┐ │\n             │ │     Subscriptions     │ │\n             │ │                       │ │\n             │ │┌──────┐┌──────┐┌─────┐│ │\n             │ ││ Sub. ││ Sub. ││ ... ││ │ <--- subscriptions do not fire yet\n             │ │└──────┘└──────┘└─────┘│ │\n             │ └───────────────────────┘ │\n             └───────────────────────────┘\n```\n\n----------------------------------------\n\nTITLE: Installing Relay via create-relay-app\nDESCRIPTION: This snippet shows how to quickly install Relay in an existing application using the create-relay-app package. It supports applications built on Next, Vite, and Create React App.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/getting-started/installation-and-setup.md#2025-04-18_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm create @tobiastengler/relay-app\n```\n\n----------------------------------------\n\nTITLE: Implementing IRenderStrategy for Comment Renderers in PHP\nDESCRIPTION: This snippet demonstrates how to implement the IRenderStrategy interface for different comment rendering strategies. It includes classes for markup, markdown, and plaintext rendering with genShouldShow methods to determine eligibility.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/guides/data-driven-dependencies/server-3d.md#2025-04-18_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<<\n  GraphQLObject('CommentMarkupRenderer', 'Comment with markup rendering'),\n  Oncalls('<todo>')\n>>\nfinal class CommentMarkupRenderer implements ICommentRenderer, IRenderStrategy {\n\n  use HasJSDependency;\n\n  <<GraphQLField('markup', 'Markdown text')>>\n  public function markdown(): string {\n    return 'markup'; // todo: load markup content from the comment\n  }\n\n  <<__Override>>\n  public async function genShouldShow(): Awaitable<bool> {\n    return userIsEligibleForMarkupContent();\n  }\n}\nfinal class CommentMarkdownRenderer implements ICommentRenderer, IRenderStrategy {\n  // ...\n  <<__Override>>\n  public async function genShouldShow(): Awaitable<bool> {\n    return userIsEligibleForMarkdownContent();\n  }\n}\n\nfinal class CommentPlaintextRenderer implements ICommentRenderer, IRenderStrategy {\n  // ...\n  <<__Override>>\n  public async function genShouldShow(): Awaitable<bool> {\n    // By default we want to use this strategy as a fallback\n    return true;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Author Type in Relay Resolvers TypeScript\nDESCRIPTION: This TypeScript snippet defines a Relay resolver function for the 'Author' type, meant to represent an author entity within the CMS. It utilizes the 'RelayResolver' annotation for documentation, and integrates with 'AuthorService' to retrieve author data by their identifier. This function returns an 'AuthorModel' object and requires the 'DataID' parameter for execution.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/guides/relay-resolvers/descriptions.md#2025-04-18_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n/**\n * @RelayResolver Author\n *\n * An author in our **amazing** CMS. Authors can\n * write posts but not necessarily change their permissions.\n */\nexport function Author(id: DataID): AuthorModel {\n  return AuthorService.getById(id);\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring a GraphQL Fragment in GraphQL\nDESCRIPTION: Example of a basic GraphQL fragment definition on a User type, showing the selection of fields like name, age, and profile picture.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/guided-tour/rendering/fragments.md#2025-04-18_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nfragment UserFragment on User {\n  name\n  age\n  profile_picture(scale: 2) {\n    uri\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: HTTP API Request and Response\nDESCRIPTION: Demonstrates a traditional HTTP API query fetching information about a person with a fixed set of data returned. No specific dependencies required. Inputs include a GET request with query parameters, with a JSON object expected as output.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/tutorial/graphql.md#2025-04-18_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nGET /person?id=24601\n\nResponse:\n{\"id\": \"24601\", \"name\": \"Jean Valjean\", \"age\": 64, \"occupation\": \"Mayor\"}\n```\n\n----------------------------------------\n\nTITLE: Setting GitHub Authentication Environment Variables\nDESCRIPTION: Environment variable configuration for GitHub API authentication token to be used in GraphQL requests.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/getting-started/step-by-step-guide.md#2025-04-18_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# your-app-name/.env.local\nREACT_APP_GITHUB_AUTH_TOKEN=<TOKEN>\n```\n\n----------------------------------------\n\nTITLE: Querying Local State with React Relay\nDESCRIPTION: Demonstrates how to query both server and local data using useLazyLoadQuery hook in React Relay.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/guides/client-schema-extensions.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// Example.js\nimport * as React from 'react';\nimport { useLazyLoadQuery, graphql } from 'react-relay';\n\nconst Example = (props) => {\n  const data = useLazyLoadQuery(graphql`\n    query ExampleQuery {\n      viewer {\n        id\n        name\n        notes {\n          id\n          title\n          body\n        }\n      }\n    }\n  `, {});\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Fallback with React Suspense\nDESCRIPTION: This code snippet demonstrates how to use the React Suspense component to render a fallback UI (LoadingGlimmer) while a component (CanSuspend) is loading. The Suspense component wraps the potentially suspending component and specifies the fallback to display while waiting for the component to be ready.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/guided-tour/rendering/loading-states.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst React = require('React');\nconst {Suspense} = require('React');\n\nfunction App() {\n  return (\n    // Render a fallback using Suspense as a wrapper\n    <Suspense fallback={<LoadingGlimmer />}>\n      <CanSuspend />\n    </Suspense>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Context-Aware Mock Resolver in JavaScript\nDESCRIPTION: Shows how to use context in mock resolvers to return different values based on field names, paths, and parent types.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/guides/testing-relay-components.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  String(context) {\n    if (context.name === 'zip') {\n      return '94025';\n    }\n    if (context.path != null && context.path.join('.') === 'node.actor.name') {\n      return 'Current Actor Name';\n    }\n    if (context.parentType === 'Image' && context.name === 'uri') {\n       return 'http://my-image.url';\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Separating GraphQL Query into Fragment for Pagination\nDESCRIPTION: This snippet shows how to separate a GraphQL query into a fragment to support pagination features in Relay.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/tutorial/connections-pagination.md#2025-04-18_snippet_8\n\nLANGUAGE: graphql\nCODE:\n```\nconst NewsfeedQuery = graphql`\n  query NewsfeedQuery {\n    ...NewsfeedContentsFragment\n  }\n`;\n\nconst NewsfeedContentsFragment = graphql`\n  fragment NewsfeedContentsFragment on Query {\n    viewer {\n      newsfeedStories {\n        edges {\n          node {\n            id\n            ...StoryFragment\n          }\n        }\n      }\n    }\n  }\n`;\n```\n\n----------------------------------------\n\nTITLE: Defining MutationConfig Type in TypeScript\nDESCRIPTION: Defines the MutationConfig type that specifies all configuration options for executing a mutation in Relay. This type includes options for caching, error handling, optimistic updates, and more.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/api-reference/types/MutationConfig.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nType `MutationConfig<TMutationConfig: MutationParameters>`\n```\n\n----------------------------------------\n\nTITLE: Defining UploadableMap Type in TypeScript for Relay\nDESCRIPTION: The UploadableMap type represents an object whose values are File or Blob instances, commonly used for file upload operations in Relay. This type provides a structured way to handle uploadable content in network requests.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/api-reference/types/UploadableMap.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nUploadableMap\n```\n\n----------------------------------------\n\nTITLE: Implementing Error Boundary with Retry for useQueryLoader\nDESCRIPTION: This snippet shows an implementation of an Error Boundary with retry functionality, specifically designed for use with Relay's useQueryLoader hook. It provides a retry method to clear errors and reload queries.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/guided-tour/rendering/error-states.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * ErrorBoundaryWithRetry.react.js\n */\n\nconst React = require('React');\n\n// NOTE: This is NOT actual production code;\n// it is only used to illustrate example\nclass ErrorBoundaryWithRetry extends React.Component<Props, State> {\n  state = {error: null};\n\n  static getDerivedStateFromError(error): State {\n    return {error: error};\n  }\n\n  _retry = () => {\n    // This ends up calling loadQuery again to get and render\n    // a new query reference\n    this.props.onRetry();\n    this.setState({\n      // Clear the error\n      error: null,\n    });\n  }\n\n  render() {\n    const {children, fallback} = this.props;\n    const {error} = this.state;\n    if (error) {\n      if (typeof fallback === 'function') {\n        return fallback({error, retry: this._retry});\n      }\n      return fallback;\n    }\n    return children;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Actor Interface with Organization Type\nDESCRIPTION: This snippet illustrates the implementation of the 'Actor' interface by defining the 'Organization' type, which must include the fields from the 'Actor' interface and additional organization-specific fields.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/tutorial/interfaces-polymorphism.md#2025-04-18_snippet_3\n\nLANGUAGE: graphql\nCODE:\n```\ntype Organization implements Actor {\n  id: ID!\n  name: String\n  profilePicture: Image\n  joined: DateTime\n  organizationKind: OrganizationKind\n}\n```\n\n----------------------------------------\n\nTITLE: Querying for Empire Faction Information\nDESCRIPTION: This snippet queries for information about the Empire faction, retrieving the ID and name of the faction to demonstrate the use of GraphQL queries in Relay.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/guides/graphql-server-specification.md#2025-04-18_snippet_3\n\nLANGUAGE: graphql\nCODE:\n```\nquery EmpireQuery {\n  empire {\n    id\n    name\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Markdown Frontmatter Configuration\nDESCRIPTION: YAML frontmatter configuration for the documentation page, defining metadata like ID, title, slug, description, and keywords related to data updating in Relay.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/guided-tour/updating-data/introduction.md#2025-04-18_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n---\nid: introduction\ntitle: Introduction\nslug: /guided-tour/updating-data/\ndescription: Relay guide to updating data\nkeywords:\n- updating\n- mutation\n- useMutation\n- commitMutation\n---\n```\n\n----------------------------------------\n\nTITLE: Initializing RelayEnvironmentProvider in React\nDESCRIPTION: Example showing how to set up a Relay environment at the root of a React application using RelayEnvironmentProvider component.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-experimental/RelayHooks-ApiReference.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst React = require('React');\n\nconst {RelayEnvironmentProvider} = require('react-relay/hooks');\n\nfunction Root() {\n  return (\n    <RelayEnvironmentProvider environment={environment}>\n      <App />\n    </RelayEnvironmentProvider>\n  );\n}\n\nmodule.exports = Root;\n```\n\n----------------------------------------\n\nTITLE: Rendering User Component with useFragment Hook - JavaScript\nDESCRIPTION: This code snippet illustrates how to create a React component that utilizes the 'useFragment' hook from Relay to fetch and render user data. The data fields are accessed directly from the fragment for rendering in the component.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/guided-tour/rendering/fragments.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport type {UserComponent_user$key} from 'UserComponent_user.graphql';\n\nconst React = require('React');\n\nconst {graphql, useFragment} = require('react-relay');\n\ntype Props = {\n  user: UserComponent_user$key,\n};\n\nfunction UserComponent(props: Props) {\n  const data = useFragment(\n    graphql`\n      fragment UserComponent_user on User {\n        name\n        profile_picture(scale: 2) {\n          uri\n        }\n      }\n    `,\n    props.user,\n  );\n\n  return (\n    <> \n      <h1>{data.name}</h1>\n      <div>\n        <img src={data.profile_picture?.uri} />\n      </div>\n    </>\n  );\n}\n\nmodule.exports = UserComponent;\n```\n\n----------------------------------------\n\nTITLE: Accessing Data from Completed Observables in Relay\nDESCRIPTION: Example of how to synchronously access data from a completed Observable in Relay. Unlike Promises, completed Observables allow immediate access to their values without waiting for the next tick.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/glossary/glossary.md#2025-04-18_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst completedObservable = Observable.from(\"Relay is awesome!\");\nlet valueFromObservable;\nobservable.subscribe({\n  next: (value) => {\n    valueFromObservable = value;\n    /* this will execute in the same tick */\n  },\n});\nconsole.log(valueFromObservable); // logs out \"Relay is awesome!\"\n```\n\n----------------------------------------\n\nTITLE: Assigning to an Interface when Source Implements Interface\nDESCRIPTION: Example of assigning to an Actor interface field when the source is guaranteed to implement that interface. This shows the straightforward case of interface type assignment.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/guided-tour/updating-data/imperatively-modifying-linked-fields.md#2025-04-18_snippet_9\n\nLANGUAGE: js\nCODE:\n```\ngraphql`\n  fragment Foo_actor on Actor @assignable {\n    __typename\n  }\n`;\n\nconst data = useFragment(graphql`\n  fragment Foo_query on Query {\n    user {\n      ...Foo_actor\n    }\n    viewer {\n      actor {\n        ...Foo_actor\n      }\n    }\n  }\n`, queryRef);\n\nconst environment = useRelayEnvironment();\nconst onClick = () => {\n  commitLocalUpdate(environment, store => {\n    const {updatableData} = store.readUpdatableQuery(\n      graphql`\n        query FooUpdatableQuery @updatable {\n          viewer {\n            actor {\n              ...Foo_actor\n            }\n          }\n        }\n      `,\n      {}\n    );\n\n    // Assigning the user works as you would expect\n    if (updatableData.viewer != null && data.user != null) {\n      updatableData.viewer = data.user;\n    }\n\n    // As does assigning the viewer\n    if (updatableData.viewer != null && data.viewer?.actor != null) {\n      updatableData.viewer = data.viewer.actor;\n    }\n  });\n};\n```\n\n----------------------------------------\n\nTITLE: Installing Relay Dependencies with NPM or Yarn\nDESCRIPTION: Commands to install Relay dependencies including runtime, React integration, compiler, and Babel plugin using either NPM or Yarn.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/getting-started/step-by-step-guide.md#2025-04-18_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n# NPM Users\nnpm install --save relay-runtime react-relay\nnpm install --save-dev relay-compiler babel-plugin-relay\n\n# Yarn Users\nyarn add relay-runtime react-relay\nyarn add --dev relay-compiler babel-plugin-relay\n```\n\n----------------------------------------\n\nTITLE: Configuring Relay Mutation Updates\nDESCRIPTION: Example of implementing the required getConfigs method to instruct Relay on how to update the client-side store with the mutation response payload.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-classic/Classic-APIReference-Mutation.md#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nclass LikeStoryMutation extends Relay.Mutation {\n  getConfigs() {\n    return [{\n      type: 'FIELDS_CHANGE',\n      fieldIDs: {\n        story: this.props.story.id,\n      },\n    }];\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using @arguments Directive in GraphQL Query\nDESCRIPTION: Example of using the @arguments directive to pass arguments to a fragment in a GraphQL query.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/api-reference/graphql/graphql-directives.md#2025-04-18_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nquery TodoListQuery($userID: ID) {\n  ...TodoList_list @arguments(count: $count, userID: $userID) # Pass arguments here\n}\n```\n\n----------------------------------------\n\nTITLE: Using @stream Directive in GraphQL\nDESCRIPTION: The @stream directive is used in GraphQL queries, likely for streaming data in chunks, though its specific implementation details are not provided in the given context.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/glossary/glossary.md#2025-04-18_snippet_12\n\nLANGUAGE: GraphQL\nCODE:\n```\n@stream\n```\n\n----------------------------------------\n\nTITLE: Refreshing Components with Subscription Fragments\nDESCRIPTION: Shows how to use fragments in subscriptions to automatically refresh components when subscription data changes, promoting better maintainability and consistency.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/guided-tour/updating-data/graphql-subscriptions.md#2025-04-18_snippet_3\n\nLANGUAGE: graphql\nCODE:\n```\nsubscription FeedbackLikeSubscription($input: FeedbackLikeSubscribeData!) {\n  feedback_like_subscribe(data: $input) {\n    feedback {\n      ...FeedbackDisplay_feedback\n      ...FeedbackDetail_feedback\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Fragment Arguments Resolver Example\nDESCRIPTION: Demonstrates defining a Relay Resolver with fragment arguments.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/guides/relay-resolvers.md#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n* @RelayResolver MyType.my_resolver_field: String\n* @rootFragment myResolverFragment\n*/\nexport function my_resolver_field(fragmentKey: myResolverFragment$key): ?string {\n   const data = readFragment(graphql`\n       fragment myResolverFragment on MyType\n            @argumentDefinitions(my_arg: {type: \"Float!\"}) {\n            field_with_arg(arg: $my_arg) {\n               __typename\n            }\n       }\n   `, fragmentKey);\n\n   return data.field_with_arg.__typename;\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Garbage Collection Release Buffer Size in Relay\nDESCRIPTION: Demonstrates how to configure the size of the release buffer in the Relay Store. This buffer temporarily retains queries after they've been released, increasing the likelihood of data reuse when revisiting previously loaded content.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/guided-tour/reusing-cached-data/presence-of-data.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst store = new Store(source, {gcReleaseBufferSize: 10});\n```\n\n----------------------------------------\n\nTITLE: Implementing Client Query Component with useClientQuery\nDESCRIPTION: Example React component demonstrating how to use the useClientQuery hook to read client-only fields from the Relay store.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/api-reference/hooks/use-client-query.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst React = require('React');\n\nconst {graphql, useClientQuery} = require('react-relay');\n\nfunction ClientQueryComponent() {\n  const data = useClientQuery(\n    graphql`\n      query ClientQueryComponentQuery {\n        client_field\n      }\n    `,\n    {}, // variables\n  );\n\n  return (\n    <div>{data.client_field}</div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Data Flow: Subscription Notification Process\nDESCRIPTION: Demonstrates how store notifications are processed and subscriptions are triggered based on data changes\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/principles-and-architecture/runtime-architecture.md#2025-04-18_snippet_3\n\nLANGUAGE: ascii-diagram\nCODE:\n```\n                        notify\n                           │\n                           ▼\n             ┌───────────────────────────┐\n             │           Store           │\n             │ ┌───────────────────────┐ │\n             │ │     RecordSource      │ │\n             │ │                       │ │\n             │ │┌──────┐┌──────┐┌─────┐│ │\n             │ ││Record││Record││ ... ││ │\n             │ │└──────┘└──────┘└─────┘│ │\n             │ └───────────────────────┘ │\n             │ ┌───────────────────────┐ │\n             │ │     Subscriptions     │ │\n             │ │                       │ │\n             │ │┌──────┐┌──────┐┌─────┐│ │\n             │ ││  Sub.││  Sub.││  ...││ │ <--- affected subscriptions fire\n             │ │└──────┘└──────┘└─────┘│ │\n             │ └───┼───────┼───────┼───┘ │\n             └─────┼───────┼───────┼─────┘\n                   │       │       │\n                   ▼       │       │\n               callback    │       │\n                           ▼       │\n                       callback    │\n                                   ▼\n                               callback\n```\n\n----------------------------------------\n\nTITLE: Adding Search Input to ContactsList Component in TypeScript\nDESCRIPTION: This snippet shows how to add a search input to the ContactsList component, including state management for the search string.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/tutorial/refetchable-fragments.md#2025-04-18_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// change-line\nimport SearchInput from './SearchInput';\n\n// change-line\nconst {useState} = React;\n\nfunction ContactsList({viewer}) {\n  const data = useFragment(ContactsListFragment, viewer);\n  // change-line\n  const [searchString, setSearchString] = useState('');\n  // change\n  const onSearchStringChanged = (value: string) => {\n    setSearchString(value);\n  };\n  // end-change\n  return (\n    <Card dim={true}>\n      <h3>Contacts</h3>\n      // change\n      <SearchInput\n        value={searchString}\n        onChange={onSearchStringChanged}\n      />\n      // end-change\n      {data.contacts.map(contact =>\n        <ContactRow key={contact.id} contact={contact} />\n      )}\n    </Card>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Basic HTTP API Request/Response Example\nDESCRIPTION: Demonstrates a traditional HTTP API endpoint with a fixed response structure.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/tutorial/graphql.md#2025-04-18_snippet_0\n\nLANGUAGE: json\nCODE:\n```\nRequest:\nGET /person?id=24601\n\nResponse:\n{\"id\": \"24601\", \"name\": \"Jean Valjean\", \"age\": 64, \"occupation\": \"Mayor\"}\n```\n\n----------------------------------------\n\nTITLE: Setting up polyfills for older browsers\nDESCRIPTION: Example of including core-js polyfills to support older browsers that may not have modern JavaScript global types required by Relay, such as Map, Set, Promise, and Object.assign.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/getting-started/installation-and-setup.md#2025-04-18_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nrequire('core-js/es6/map');\nrequire('core-js/es6/set');\nrequire('core-js/es6/promise');\nrequire('core-js/es6/object');\n\nrequire('./myRelayApplication');\n```\n\n----------------------------------------\n\nTITLE: Defining LiveState Type in TypeScript\nDESCRIPTION: This code defines the LiveState type, which is used as the return type for live resolvers. It includes a read method to get the current value and a subscribe method to listen for changes.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/guides/relay-resolvers/live-fields.md#2025-04-18_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\nexport type LiveState<T> = {\n  /**\n   * Returns the current value of the live state.\n   */\n  read(): T,\n  /**\n   * Subscribes to changes in the live state. The state provider should\n   * call the callback when the value of the live state changes.\n   */\n  subscribe(cb: () => void): () => void,\n};\n```\n\n----------------------------------------\n\nTITLE: Returning Abstract Type in Relay Resolver (TypeScript)\nDESCRIPTION: Demonstrates returning an abstract type (union or interface) from a Relay Resolver function for a User.pet field.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/guides/relay-resolvers/return-types.md#2025-04-18_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nimport {DataID} from 'relay-runtime';\n\ntype AnimalTypenames = \"Cat\" | \"Dog\";\n/**\n * @RelayResolver User.pet: Animal\n */\nexport function pet(user: User): {id: DataID, __typename: AnimalTypenames } {\n  return {id: \"5\", __typename: \"Dog\" }\n}\n```\n\n----------------------------------------\n\nTITLE: Step 2: Using the Variable as a Field Argument\nDESCRIPTION: Replacing the hard-coded ID with the query variable in the GraphQL query to dynamically specify which node to fetch.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/tutorial/queries-2.md#2025-04-18_snippet_5\n\nLANGUAGE: graphql\nCODE:\n```\nconst PosterDetailsHovercardContentsQuery = graphql`\n  query PosterDetailsHovercardContentsQuery($posterID: ID!) {\n    node(\n      // change-line\n      id: $posterID\n    ) {\n    ... on Actor {\n      ...PosterDetailsHovercardContentsBodyFragment\n      }\n    }\n  }\n`;\n```\n\n----------------------------------------\n\nTITLE: Accessing Plain Connection in JavaScript\nDESCRIPTION: Example code showing how to access a plain connection field without using ConnectionHandler. It demonstrates retrieving the friends connection and edges from a user record.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v13.0.0/api-reference/relay-runtime/store.md#2025-04-18_snippet_41\n\nLANGUAGE: javascript\nCODE:\n```\n// The `friends` connection record can be accessed with:\nconst user = store.get(userID);\nconst friends = user && user.getLinkedRecord('friends');\n\n// Access fields on the connection:\nconst edges = friends && friends.getLinkedRecords('edges');\n```\n\n----------------------------------------\n\nTITLE: Updating Viewer Name using readUpdatableQuery in Relay\nDESCRIPTION: Demonstrates how to use readUpdatableQuery to update a viewer's name field locally within a React component using Relay's commitLocalUpdate method\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/guided-tour/updating-data/imperatively-modifying-store-data.md#2025-04-18_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nfunction NameUpdater({ queryRef }: {\n  queryRef: NameUpdater_viewer$key,\n}) {\n  const environment = useRelayEnvironment();\n  const data = useFragment(\n    graphql`\n      fragment NameUpdater_viewer on Viewer {\n        name\n      }\n    `,\n    queryRef\n  );\n  const [newName, setNewName] = useState(data?.viewer?.name);\n  const onSubmit = () => {\n    commitLocalUpdate(environment, store => {\n      const {updatableData} = store.readUpdatableQuery(\n        graphql`\n          query NameUpdaterUpdateQuery @updatable {\n            viewer {\n              name\n            }\n          }\n        `,\n        {}\n      );\n      const viewer = updatableData.viewer;\n      if (viewer != null) {\n        viewer.name = newName;\n      }\n    });\n  };\n\n  // etc\n}\n```\n\nLANGUAGE: graphql\nCODE:\n```\nquery NameUpdaterUpdateQuery @updatable {\n  viewer {\n    name\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining onReadyStateChange Prop for Relay.Renderer in JavaScript\nDESCRIPTION: Specifies the onReadyStateChange prop function signature for Relay.Renderer. This callback is called as various events of data resolution occur, providing detailed information about the ready state.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-classic/Classic-APIReference-Renderer.md#2025-04-18_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\nonReadyStateChange(\n  readyState: {\n    aborted: boolean;\n    done: boolean;\n    error: ?Error;\n    events: Array<ReadyStateEvent>;\n    ready: boolean;\n    stale: boolean;\n  }\n): void\n```\n\n----------------------------------------\n\nTITLE: Adding Type Annotations to Relay Query\nDESCRIPTION: Demonstrates how to properly type a Relay query by importing and using generated TypeScript types.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/tutorial/queries-1.md#2025-04-18_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport type {NewsfeedQuery as NewsfeedQueryType} from './__generated__/NewsfeedQuery.graphql';\n\nfunction Newsfeed({}) {\n  const data = useLazyLoadQuery\n  <NewsfeedQueryType>\n  (NewsfeedQuery, {});\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Field on a Type with @RelayResolver\nDESCRIPTION: Shows how to define a new field on a GraphQL type using the @RelayResolver tag with dot notation. The function accepts the model/object returned by the type resolver and returns the field value.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/api-reference/relay-resolvers/docblock-format.md#2025-04-18_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n/**\n * @RelayResolver User.name: String\n */\nexport function name(user: UserModel): string {\n  return user.name;\n}\n```\n\n----------------------------------------\n\nTITLE: Generated Relay TypeScript Definition\nDESCRIPTION: Example of an automatically generated TypeScript type definition for a Relay GraphQL query, showing the structure of the response data.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/tutorial/queries-1.md#2025-04-18_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nexport type NewsfeedQuery$data = {\n  readonly topStory: {\n    readonly poster: {\n      readonly name: string | null;\n      readonly profilePicture: {\n        readonly url: string;\n      } | null;\n    };\n    readonly summary: string | null;\n    readonly thumbnail: {\n      readonly url: string;\n    } | null;\n    readonly title: string;\n  } | null;\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing GraphQL Subscription using useSubscription Hook in React-Relay\nDESCRIPTION: Example showing how to implement a subscription using the useSubscription hook in React-Relay. The code demonstrates proper configuration with useMemo for optimization and basic subscription setup. The subscription is automatically managed based on component lifecycle.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/api-reference/hooks/use-subscription.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport {graphql, useSubscription} from 'react-relay';\nimport {useMemo} from 'react';\n\nconst subscription = graphql`\n  subscription UserDataSubscription($input: InputData!) {\n    # ...\n  }\n`;\n\nfunction UserComponent({ id }) {\n  // IMPORTANT: your config should be memoized.\n  // Otherwise, useSubscription will re-render too frequently.\n  const config = useMemo(() => ({\n    variables: {id},\n    subscription,\n  }), [id, subscription]);\n\n  useSubscription(config);\n\n  return (/* ... */);\n}\n```\n\n----------------------------------------\n\nTITLE: Recommended Hook Module Naming for Mutations\nDESCRIPTION: Example of naming convention for a mutation hook module, where the module name describes the mutation's purpose. Shows how to name a mutation for adding a comment to a post.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/tutorial/organizing-mutations-queries-and-subscriptions.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nuseAddPostCommentMutation\n```\n\n----------------------------------------\n\nTITLE: Invalid @required Usage with Inline Fragments\nDESCRIPTION: Example of inconsistent @required usage that will fail compilation due to mismatched declarations across inline fragments\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/guides/required-directive.md#2025-04-18_snippet_2\n\nLANGUAGE: graphql\nCODE:\n```\nfragment UserInfo on User {\n  job {\n    ... on Actor {\n      certifications\n    }\n    ... on Lawyer {\n      certifications @required(action: LOG)\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Mock Resolvers with @relay_test_operation Directive in JavaScript\nDESCRIPTION: Demonstrates how to define mock resolvers for Scalar and Abstract GraphQL types using the @relay_test_operation directive. This allows for improved quality of generated test data by providing GraphQL type information for fields in the operation's selection.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/guides/testing-relay-components.md#2025-04-18_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  Float() {\n    return 123.456;\n  },\n  Boolean(context) {\n    if (context.name === 'can_edit') {\n      return true;\n    }\n    return false;\n  },\n  Node() {\n    return {\n      __typename: 'User',\n      id: 'my-user-id',\n    };\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Necessary Modules\nDESCRIPTION: This section imports required modules for using Relay with React, including React itself, the CSS file, the `graphql` macro, components from `react-relay/hooks` (RelayEnvironmentProvider, loadQuery, usePreloadedQuery), and the Relay environment configuration.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v13.0.0/getting-started/step-by-step-guide.md#2025-04-18_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nimport React from 'react';\nimport './App.css';\nimport graphql from 'babel-plugin-relay/macro';\nimport {\n  RelayEnvironmentProvider,\n  loadQuery,\n  usePreloadedQuery,\n} from 'react-relay/hooks';\nimport RelayEnvironment from './RelayEnvironment';\n\nconst { Suspense } = React;\n```\n\n----------------------------------------\n\nTITLE: Handling Optional UI with @required\nDESCRIPTION: Demonstrates how to properly handle a mix of required and optional fields in a component, showing proper error handling and UI conditional rendering.\nSOURCE: https://github.com/facebook/relay/blob/main/website/blog/2023-01-03-resilient-relay-apps.mdx#2025-04-18_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nfunction SomeComponent({ queryRef }) {\n  const { asset } = useFragment(\n    graphql`\n   asset {\n     latestQuote @required(action: THROW) # Required data\n     buyPercent  # Optional data\n   }`,\n    queryRef,\n  );\n\n  return (\n    <div>\n      <div>Price: {asset.latestQuote}</div>\n      {asset.buyPercent !== null && (\n        <>\n          <div>Buy Percent: {asset.buyPercent}</div>\n          <div>Sell Percent: {1 - asset.buyPercent}</div>\n        </>\n      )}\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Batching Live State Updates with Redux\nDESCRIPTION: Implementation of a Redux middleware that batches updates to live resolvers using Relay's batchLiveStateUpdates method to optimize performance when multiple resolvers are updated.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/guides/relay-resolvers/live-fields.md#2025-04-18_snippet_5\n\nLANGUAGE: ts\nCODE:\n```\nconst store = createStore(reducer);\nconst originalDispatch = store.dispatch;\n\nfunction wrapped(action) {\n  relayStore.batchLiveStateUpdates(() => {\n    originalDispatch(action);\n  })\n}\n\nstore.dispatch = wrapped;\n```\n\n----------------------------------------\n\nTITLE: Polyfill Setup for Relay\nDESCRIPTION: Example of setting up polyfills for older browser support using core-js.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/getting-started/installation-and-setup.md#2025-04-18_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nrequire('core-js/es6/map');\nrequire('core-js/es6/set');\nrequire('core-js/es6/promise');\nrequire('core-js/es6/object');\n\nrequire('./myRelayApplication');\n```\n\n----------------------------------------\n\nTITLE: Refetching Empire Using Node ID\nDESCRIPTION: This query refetches the Empire faction using its unique ID, further demonstrating the object identification system.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/guides/graphql-server-specification.md#2025-04-18_snippet_4\n\nLANGUAGE: graphql\nCODE:\n```\nquery EmpireRefetchQuery {\n  node(id: \"RmFjdGlvbjoy\") {\n    id\n    ... on Faction {\n      name\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Relay Resolver with Combined Arguments\nDESCRIPTION: Shows how to create a Relay resolver that accepts both JavaScript and GraphQL arguments. The resolver combines field-level and fragment-level argument definitions using @RelayResolver and @argumentDefinitions directives.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/guides/relay-resolvers.md#2025-04-18_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n* @RelayResolver\n* @fieldName **my_resolver_field(my_js_arg: String)**\n* @onType **MyType**\n* @rootFragment myResolverFragment\n*/\nfunction myResolver(key, args) {\n   const data = readFragment(graphql`\n       fragment myResolverFragment on MyType\n            @argumentDefinitions(**my_gql_arg**: {type: \"Float!\"}) {\n            field_with_arg(arg: $my_arg) {\n               __typename\n            }\n       }\n   `, key);\n\n   return `Hello ${args.my_js_arg}, ${data.field_with_arg.__typename}`;\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Cache Structure Initialization with Pseudo-Code\nDESCRIPTION: The pseudo-code illustrates the structure of a normalized cache for a story, its author, and comments using a Map. This structure demonstrates how entities relate within the cache, emphasizing the connections between them.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-experimental/PrinciplesAndArchitecture-ThinkingInGraphQL.md#2025-04-18_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n// Note: This is pseudo-code for `Map` initialization to make the structure\n// more obvious.\nMap {\n  // `story(id: \"1\")`\n  1: Map {\n    text: 'got GraphQL?',\n    author: Link(2),\n    comments: [Link(3)],\n  },\n  // `story.author`\n  2: Map {\n    name: 'Yuzhi',\n    photo: 'http://.../photo1.jpg',\n  },\n  // `story.comments[0]`\n  3: Map {\n    text: 'Here\\'s how to get one!',\n    author: Link(2),\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Best Friend's Age in GraphQL\nDESCRIPTION: This GraphQL query fetches the age of the user's best friend. It's used to demonstrate how a different query can update the graph relationship without fetching all required fields.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/debugging/why-null.md#2025-04-18_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\nquery OtherQuery {\n  me {\n    best_friend {\n      # new id: 2\n      # Note: name is not fetched here\n      age\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: ConnectionHandler Interface Definition in JavaScript\nDESCRIPTION: Interface definition for the ConnectionHandler utility module that provides methods for manipulating connections in Relay. It includes methods for retrieving connections, creating edges, inserting edges at specific positions, and deleting nodes.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/api-reference/relay-runtime/store.md#2025-04-18_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\ninterface ConnectionHandler {\n  getConnection(\n    record: RecordProxy,\n    key: string,\n    filters?: ?Object,\n  ): ?RecordProxy,\n  createEdge(\n    store: RecordSourceProxy,\n    connection: RecordProxy,\n    node: RecordProxy,\n    edgeType: string,\n  ): RecordProxy,\n  insertEdgeBefore(\n    connection: RecordProxy,\n    newEdge: RecordProxy,\n    cursor?: ?string,\n  ): void,\n  insertEdgeAfter(\n    connection: RecordProxy,\n    newEdge: RecordProxy,\n    cursor?: ?string,\n  ): void,\n  deleteNode(connection: RecordProxy, nodeID: string): void\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Assignable Fragment for User in GraphQL\nDESCRIPTION: Defines an assignable fragment on the User type with the @assignable directive, containing only the __typename field.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/guided-tour/updating-data/imperatively-modifying-linked-fields.md#2025-04-18_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\nfragment AssignBestFriendButton_assignable_user on User @assignable {\n  __typename\n}\n```\n\n----------------------------------------\n\nTITLE: Sample JSON Response for GraphQL Query\nDESCRIPTION: Example of a JSON response matching the structure of the GraphQL query, including user and viewer data.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/guided-tour/rendering/queries.md#2025-04-18_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"user\": {\n      \"id\": \"4\",\n      \"name\": \"Mark Zuckerberg\",\n      \"username\": \"zuck\"\n    },\n    \"viewer\": {\n      \"actor\": {\n        \"name\": \"Your Name\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Conditional Fragment with @skip and @alias\nDESCRIPTION: Example of using @alias with @skip directive for conditional fragment rendering\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/guides/alias-directive.md#2025-04-18_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nfunction MyUser({userKey}) {\n  const user = useFragment(graphql`\n    fragment MyFragment on User {\n      ...ConditionalData @skip(if: $someVar) @alias\n    }`, userKey);\n\n  if(user.ConditionalData == null) {\n    return \"No data fetched\";\n  }\n  return <ConditionalData userKey={user.ConditionalData} />\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Full Name Field in Relay Resolvers TypeScript\nDESCRIPTION: This TypeScript function defines a Relay resolver field for 'Author.fullName', producing a string representation of an author's full name composed of their first and last names. The field is part of the author's model and deliberately excludes any honorifics. This function takes an 'AuthorModel' as input and returns a concatenated string output.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/guides/relay-resolvers/descriptions.md#2025-04-18_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\n/**\n * @RelayResolver Author.fullName: String\n *\n * The author's first and last name. Does not include\n * any [honorifics](https://en.wikipedia.org/wiki/Honorific).\n */\nexport function fullName(author: AuthorModel): string {\n  return `${author.firstName} ${author.lastName}`;\n}\n```\n\n----------------------------------------\n\nTITLE: Modern Pagination Implementation using usePaginationFragment Hook\nDESCRIPTION: Shows the modern implementation using the usePaginationFragment Hook. Demonstrates simplified pagination logic with automatic connection handling and reduced boilerplate code.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/migration-and-compatibility/relay-hooks-and-legacy-container-apis.md#2025-04-18_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as React from 'React';\nimport {graphql, usePaginationFragment} from 'react-relay';\n\nexport default function UserComponent(props: Props) {\n  const {data, loadNext, hasNext, isLoadingNext} = usePaginationFragment(\n    graphql`\n      fragment UserComponent_user on User\n      @refetchable(queryName: \"UserComponentRefetchQuery\") {\n        friends(first: $count, after: $after)\n          @connection(key: \"UserComponent_user_friends\") {\n          edges {\n            node {\n              name\n            }\n          }\n        }\n      }\n    `,\n    props.user,\n  );\n\n  const handleClick = useCallback(() => {\n    loadNext(5)\n  }, [loadNext])\n\n  return (\n    <>\n      <FriendsList friends={data?.friends?.edges} />\n      <Button onClick={handleClick} disabled={!hasNext || isLoadingNext}>\n        Load More\n        {isLoadingNext && <InlineSpinner />}\n      </Button>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring GraphQL Subscription in Relay\nDESCRIPTION: Shows how to declare a GraphQL subscription using Relay's graphql tag with variables.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/guided-tour/updating-data/graphql-subscriptions.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst {graphql} = require('react-relay');\n\nconst feedbackLikeSubscription = graphql`\n  subscription FeedbackLikeSubscription($input: FeedbackLikeSubscribeData!) {\n    feedback_like_subscribe(data: $input) {\n      feedback {\n        like_count\n      }\n    }\n  }\n`;\n```\n\n----------------------------------------\n\nTITLE: Example Subscription Payload JSON Response\nDESCRIPTION: Shows the format of a subscription payload received by the client after a subscription event. Contains the updated feedback data with the like count.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/guided-tour/updating-data/graphql-subscriptions.md#2025-04-18_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"feedback_like_subscribe\": {\n    \"feedback\": {\n      \"id\": \"feedback-id\",\n      \"like_count\": 321,\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Relay Query Variables with Flow\nDESCRIPTION: This code snippet demonstrates how Relay emits type information for query variables using Flow.  The `ExampleQuery$variables` type defines the shape of the variables object, requiring an `artistID` key of type string. This ensures that the `useLazyLoadQuery` hook receives correctly typed variables.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v13.0.0/guides/type-emission.md#2025-04-18_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n/**\n * export type ExampleQuery$variables = {\n *   +artistID: string,\n * }\n * export type ExampleQuery$data = {\n *   +artist: {\n *     +name: ?string,\n *   }\n * }\n * export type ExampleQuery = {\n *   +variables: ExampleQuery$variables,\n *   +response: ExampleQuery$data,\n * }\n */\n\nconst data = useLazyLoadQuery(\n  graphql`\n    query ExampleQuery($artistID: ID!) {\n      artist(id: $artistID) {\n        name\n      }\n    }\n  `,\n  // variables are expected to be of type ExampleQuery$variables\n  {artistID: 'banksy'},\n);\n```\n\n----------------------------------------\n\nTITLE: Getting or Creating a Linked Record\nDESCRIPTION: Demonstrates how to retrieve or create a linked record associated with the current record using the `getOrCreateLinkedRecord` method of the `RecordProxy`. The method takes the `name` of the linked record as a string and the `typeName` of the record to be created, and optionally an object of `arguments`.  Returns a `RecordProxy`.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v13.0.0/api-reference/relay-runtime/store.md#2025-04-18_snippet_27\n\nLANGUAGE: javascript\nCODE:\n```\nconst rootField = store.getRootField('rootField');\nconst newViewer = rootField.getOrCreateLinkedRecord('viewer', 'User'); // Will create if it doesn't exist\n```\n\n----------------------------------------\n\nTITLE: Creating a React App using Create React App\nDESCRIPTION: Commands to initialize a new React application using Create React App via NPM or Yarn, which provides a foundation for implementing Relay.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/getting-started/step-by-step-guide.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# NPM\nnpx create-react-app your-app-name\n\n# Yarn\nyarn create react-app your-app-name\n```\n\n----------------------------------------\n\nTITLE: Accessing Plain Connection in JavaScript\nDESCRIPTION: Code example showing how to access a plain connection field in JavaScript without using ConnectionHandler. This demonstrates the standard approach to access connection data.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/api-reference/relay-runtime/store.md#2025-04-18_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n// The `friends` connection record can be accessed with:\nconst user = store.get(userID);\nconst friends = user && user.getLinkedRecord('friends');\n\n// Access fields on the connection:\nconst edges = friends && friends.getLinkedRecords('edges');\n```\n\n----------------------------------------\n\nTITLE: GitHub API Authentication Environment Configuration\nDESCRIPTION: Environment variable setup for GitHub GraphQL API authentication, storing the authentication token in a .env.local file.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/getting-started/step-by-step-guide.md#2025-04-18_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# your-app-name/.env.local\nREACT_APP_GITHUB_AUTH_TOKEN=<TOKEN>\n```\n\n----------------------------------------\n\nTITLE: Flow Type Configuration for Resolver Context\nDESCRIPTION: Specifies type configurations to ensure resolvers are implemented with correct types in Flow. Requires specifying a type name and its import path or package.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/guides/relay-resolvers/context.md#2025-04-18_snippet_2\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"name\": \"project\",\n    \"language\": \"flow\",\n    \"resolverContextType\": {\n        \"name\": \"IResolverContextType\",\n        \"path\": \"path/to/file/IResolverContextType\"\n    }\n}\n```\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"name\": \"project\",\n    \"language\": \"flow\",\n    \"resolverContextType\": {\n        \"name\": \"IResolverContextType\",\n        \"package\": \"@package/name\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: GraphQL Query Example\nDESCRIPTION: This GraphQL query selects the `name` field within the `actor` field. It demonstrates a basic query structure in GraphQL.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/glossary/glossary.md#2025-04-18_snippet_3\n\nLANGUAGE: graphql\nCODE:\n```\nquery Foo {\n  actor { name }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining GraphQL Schema for Star Wars Factions and Ships\nDESCRIPTION: This GraphQL schema defines types for Node, Faction, Ship, ShipConnection, ShipEdge, PageInfo, and Query. It implements the Node interface for object identification and includes connection types for pagination.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/guides/graphql-server-specification.md#2025-04-18_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\ninterface Node {\n  id: ID!\n}\n\ntype Faction implements Node {\n  id: ID!\n  name: String\n  ships: ShipConnection\n}\n\ntype Ship implements Node {\n  id: ID!\n  name: String\n}\n\ntype ShipConnection {\n  edges: [ShipEdge]\n  pageInfo: PageInfo!\n}\n\ntype ShipEdge {\n  cursor: String!\n  node: Ship\n}\n\ntype PageInfo {\n  hasNextPage: Boolean!\n  hasPreviousPage: Boolean!\n  startCursor: String\n  endCursor: String\n}\n\ntype Query {\n  rebels: Faction\n  empire: Faction\n  node(id: ID!): Node\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Relay Persisted Queries in package.json\nDESCRIPTION: Package.json configuration for enabling persisted queries in Relay, showing how to set up the persistConfig with URL and parameters.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/guides/persisted-queries.md#2025-04-18_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"scripts\": {\n    \"relay\": \"relay-compiler\",\n    \"relay-persisting\": \"node relayLocalPersisting.js\"\n  },\n  \"relay\": {\n    \"src\": \"./src\",\n    \"schema\": \"./schema.graphql\",\n    \"persistConfig\": {\n      \"url\": \"http://localhost:2999\",\n      \"params\": {}\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: GraphQL query for story with author\nDESCRIPTION: This GraphQL query fetches a story's text and its author's name. This query is used as an example to demonstrate how Relay caches the query response.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/principles-and-architecture/thinking-in-graphql.md#2025-04-18_snippet_6\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  story(id: \\\"1\\\") {\n    text,\n    author {\n      name\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Declarative Connection Handler for Comment Posting in Relay\nDESCRIPTION: This code adds a declarative connection handler to the comment posting mutation. It uses the @prependEdge directive to specify how the new comment should be added to the connection.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/tutorial/mutations-updates.md#2025-04-18_snippet_14\n\nLANGUAGE: GraphQL\nCODE:\n```\nmutation StoryCommentsComposerPostMutation(\n  $id: ID!,\n  $text: String!,\n  $connections: [ID!]!,\n) {\n  postStoryComment(id: $id, text: $text) {\n    commentEdge\n      @prependEdge(connections: $connections)\n    {\n      node {\n        id\n        text\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring persistConfig in package.json\nDESCRIPTION: This snippet shows how to specify the 'persistConfig' option in the 'relay' configuration section of your 'package.json'. It defines settings for persisted queries including the URL to send the requests.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/guides/persisted-queries.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n\"scripts\": {\n  \"relay\": \"relay-compiler\",\n  \"relay-persisting\": \"node relayLocalPersisting.js\"\n},\n\"relay\": {\n  \"src\": \"./src\",\n  \"schema\": \"./schema.graphql\",\n  \"persistConfig\": {\n    \"url\": \"http://localhost:2999\",\n    \"params\": {}\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using fetchPolicy with loadQuery in React Relay\nDESCRIPTION: This snippet demonstrates how to use the `loadQuery` function with a specified `fetchPolicy` within a React component using Relay. The `fetchPolicy` determines whether the query is fulfilled from the local cache or a network request is made, or both. This particular example shows usage of 'store-or-network' fetch policy.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/guided-tour/reusing-cached-data/fetch-policies.md#2025-04-18_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nconst React = require('React');\nconst {graphql} = require('react-relay');\n\nfunction AppTabs() {\n  const [\n    queryRef,\n    loadQuery,\n  ] = useQueryLoader(HomeTabQuery);\n\n  const onSelectHomeTab = () => {\n    loadQuery({id: '4'}, {fetchPolicy: 'store-or-network'});\n  }\n\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Best Friend's Age in GraphQL\nDESCRIPTION: This GraphQL query fetches the age of the user's best friend. It's used to demonstrate how a different query can update the graph relationship, potentially causing null values in other queries.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/debugging/why-null.md#2025-04-18_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\nquery OtherQuery {\n  me {\n    best_friend {\n      # new id: 2\n      # Note: name is not fetched here\n      age\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Babel Plugin for Relay\nDESCRIPTION: Command to install the required Babel plugin for converting GraphQL to runtime artifacts\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-experimental/Introduction-InstallationAndSetup.md#2025-04-18_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nyarn add --dev babel-plugin-relay graphql\n```\n\n----------------------------------------\n\nTITLE: Implementing Suspense Boundary in React\nDESCRIPTION: Demonstrates how to use the Suspense component to wrap a component that may suspend, providing a fallback UI while waiting for the component to be ready.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/guided-tour/rendering/loading-states.md#2025-04-18_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nconst React = require('React');\nconst {Suspense} = require('React');\n\nfunction App() {\n  return (\n    // Render a fallback using Suspense as a wrapper\n    <Suspense fallback={<LoadingGlimmer />}>\n      <CanSuspend />\n    </Suspense>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Defining MutationConfig Type in JavaScript\nDESCRIPTION: This snippet defines the 'MutationConfig' type, which specifies the structure and optional fields necessary for configuring GraphQL mutations. It includes callbacks for error handling, completion actions, and optimistically updating the state.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/api-reference/types/MutationConfig.md#2025-04-18_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport CacheConfig from './CacheConfig.md';\nimport SelectorStoreUpdater from './SelectorStoreUpdater.md';\nimport UploadableMap from './UploadableMap.md';\n\n#### Type `MutationConfig<TMutationConfig: MutationParameters>`\n\n* An object with the following fields:\n  * `cacheConfig`: *_[Optional]_* [`CacheConfig`](#type-cacheconfig)\n  * `mutation`: `GraphQLTaggedNode`. A mutation specified using a GraphQL literal\n  * `onError`: *_[Optional]_* `(Error) => void`. An optional callback executed if the mutation results in an error.\n  * `onCompleted`: *_[Optional]_* `($ElementType<TMutationConfig, 'response'>) => void`. An optional callback that is executed when the mutation completes.\n    * The value passed to `onCompleted` is the the mutation fragment, as read out from the store, **after** updaters and declarative mutation directives are applied. This means that data from within unmasked fragments will not be read, and records that were deleted (e.g. by `@deleteRecord`) may also be null.\n  * `onUnsubscribe`: *_[Optional]_* `() => void`. An optional callback that is executed when the mutation the mutation is unsubscribed, which occurs when the returned `Disposable` is disposed.\n  * `optimisticResponse`: *_[Optional]_* An object whose type matches the raw response type of the mutation. Make sure you decorate your mutation with `@raw_response_type` if you are using this field.\n  * `optimisticUpdater`: *_[Optional]_* [`SelectorStoreUpdater`](#type-selectorstoreupdater). A callback that is executed when `commitMutation` is called, after the `optimisticResponse` has been normalized into the store.\n  * `updater`: *_[Optional]_* [`SelectorStoreUpdater`](#type-selectorstoreupdater). A callback that is executed when a payload is received, after the payload has been written into the store.\n  * `uploadables`: *_[Optional]_* [`UploadableMap`](#type-uploadablemap). An optional uploadable map.\n  * `variables`: `$ElementType<TMutationConfig, 'variables'>`. The variables to pass to the mutation.\n```\n\n----------------------------------------\n\nTITLE: Accessing Data from a Completed Observable in JavaScript\nDESCRIPTION: Shows how to synchronously access data from a completed Observable. This is advantageous for Relay hooks as it allows them to avoid suspending if data is already present in the store.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/glossary/glossary.md#2025-04-18_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst completedObservable = Observable.from(\"Relay is awesome!\");\nlet valueFromObservable;\nobservable.subscribe({\n  next: (value) => {\n    valueFromObservable = value;\n    /* this will execute in the same tick */\n  },\n});\nconsole.log(valueFromObservable); // logs out \"Relay is awesome!\"\n```\n\n----------------------------------------\n\nTITLE: Querying for Rebels Faction ID and Name\nDESCRIPTION: This GraphQL query fetches the ID and name of the Rebels faction, demonstrating how to retrieve globally unique IDs for object identification.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/guides/graphql-server-specification.md#2025-04-18_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\nquery RebelsQuery {\n  rebels {\n    id\n    name\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Delete Record Mutation\nDESCRIPTION: Example of using the @deleteRecord directive to remove items from the store in response to mutations.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/guided-tour/updating-data/graphql-mutations.md#2025-04-18_snippet_5\n\nLANGUAGE: graphql\nCODE:\n```\nmutation DeletePostMutation($input: DeletePostData!) {\n  delete_post(data: $input) {\n    deleted_post {\n      id @deleteRecord\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Relay Root Container Implementation in React\nDESCRIPTION: Basic example showing how to render a Relay.RootContainer with a Component and route prop to fetch and render data from a GraphQL server.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-classic/Classic-Guides-RootContainer.md#2025-04-18_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nReactDOM.render(\n  <Relay.RootContainer\n    Component={ProfilePicture}\n    route={profileRoute}\n  />,\n  container\n);\n```\n\n----------------------------------------\n\nTITLE: Updating React Component to Display New Data in TypeScript\nDESCRIPTION: Modifying the Story component to display the date using the newly fetched createdAt field. This involves updating the Props type definition and JSX structure to include the Timestamp component.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/tutorial/fragments-1.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// change-line\nimport Timestamp from './Timestamp';\n\ntype Props = {\n  story: {\n    // change-line\n    createdAt: string; // Add this line\n    ...\n  };\n};\n\nexport default function Story({story}: Props) {\n  return (\n    <Card>\n      <PosterByline poster={story.poster} />\n      <Heading>{story.title}</Heading>\n      // change-line\n      <Timestamp time={story.createdAt} /> // Add this line\n      <Image image={story.image} />\n      <StorySummary summary={story.summary} />\n    </Card>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Generated Definitions Directly\nDESCRIPTION: Example showing how to directly import a generated fragment definition for use across multiple files. This is less common but useful when the same GraphQL operation is needed in different components.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/guides/compiler.md#2025-04-18_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport DictionaryComponent_word from './__generated__/DictionaryComponent_word.graphql';\n```\n\n----------------------------------------\n\nTITLE: Manually retaining local data in Relay\nDESCRIPTION: Shows how to manually retain local data using environment.retain() to prevent it from being garbage collected when no component is rendering it.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/guides/client-schema-extensions.md#2025-04-18_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport {createOperationDescriptor, getRequest} from 'relay-runtime';\n\n// Create a query that references that record\nconst localDataQuery = graphql`\n  query LocalDataQuery {\n    viewer {\n      notes {\n        __typename\n      }\n    }\n  }\n`;\n\n// Create an operation descriptor for the query\nconst request = getRequest(localDataQuery);\nconst operation = createOperationDescriptor(request, {} /* variables */);\n\n\n// Tell Relay to retain this operation so any data referenced by it isn't garbage collected\n// In this case, all the notes linked to the `viewer` will be retained\nconst disposable = environment.retain(operation);\n\n\n// Whenever you don't need that data anymore and it's okay for Relay to garbage collect it,\n// you can dispose of the retain\ndisposable.dispose();\n```\n\n----------------------------------------\n\nTITLE: Running Relay Compiler in Watch Mode for Development\nDESCRIPTION: Command to run the Relay Compiler in watch mode, which automatically regenerates artifacts as source code changes are made. This is useful during active development of Relay components.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/guided-tour/workflow.md#2025-04-18_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nyarn run relay --watch\n```\n\n----------------------------------------\n\nTITLE: Basic ContactsList Fragment Definition\nDESCRIPTION: Initial GraphQL fragment definition for the contacts list before adding refetch capability.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/tutorial/refetchable-fragments.md#2025-04-18_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\nconst ContactsListFragment = graphql`\n  fragment ContactsListFragment on Viewer {\n    contacts {\n      id\n      ...ContactRowFragment\n    }\n  }\n`;\n```\n\n----------------------------------------\n\nTITLE: Returning Server Type in Relay Resolver (TypeScript)\nDESCRIPTION: Demonstrates returning a server type ID for a Post.author field in a Relay Resolver, which will trigger lazy data fetching.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/guides/relay-resolvers/return-types.md#2025-04-18_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport {DataID} from 'relay-runtime';\n/**\n * @RelayResolver Post.author: User\n */\nexport function author(post: PostModel): DataID {\n  return post.authorId;\n}\n```\n\n----------------------------------------\n\nTITLE: Using graphql Template Literal in JavaScript\nDESCRIPTION: Illustrates the use of the graphql template literal in JavaScript, which is transformed by Babel into a require call for the generated artifact.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/glossary/glossary.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ngraphql`...`\n```\n\n----------------------------------------\n\nTITLE: Testing Relay Subscriptions\nDESCRIPTION: Demonstrates how to test a Relay subscription function. It shows setting up a mock environment, triggering the subscription, and verifying the next value callback.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v13.0.0/guides/testing-relay-components.md#2025-04-18_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nfunction subscribe(environment, onNext, onError, variables)\n  requestSubscription(environment, {\n    subscription: graphql`...`,\n    onNext,\n    onError,\n    variables,\n  });\n\ntest('it should subscribe', () => {\n  const environment = createMockEnvironment();\n  const onNext = jest.fn();\n  subscribe(environment, onNext, jest.fn(), {});\n  const operation = environment.mock.getMostRecentOperation();\n\n  ReactTestRenderer.act(() => {\n    environment.mock.nextValue(\n      operation,\n      MockPayloadGenerator.generate(operation)\n    );\n  });\n\n  expect(onNext).toBeCalled();\n});\n```\n\n----------------------------------------\n\nTITLE: Using @stream_connection Directive in GraphQL\nDESCRIPTION: The @stream_connection directive is used in GraphQL queries, possibly for handling streamed connections, though specific details are not provided in the given context.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/glossary/glossary.md#2025-04-18_snippet_13\n\nLANGUAGE: GraphQL\nCODE:\n```\n@stream_connection\n```\n\n----------------------------------------\n\nTITLE: Defining MutationParameters Type in TypeScript for Relay\nDESCRIPTION: This type definition specifies the structure for mutation parameters in Relay. It includes fields for response, variables, and an optional raw response.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/api-reference/types/MutationConfig.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nType `MutationParameters` = {\n  response: Object,\n  variables: Object,\n  rawResponse?: Object\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Actor Interface for Person and Organization Types\nDESCRIPTION: This snippet shows how Person and Organization types implement the Actor interface, including their specific fields.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/tutorial/interfaces-polymorphism.md#2025-04-18_snippet_2\n\nLANGUAGE: graphql\nCODE:\n```\ntype Person implements Actor {\n  id: ID!\n  name: String\n  profilePicture: Image\n  joined: DateTime\n  email: String\n  location: Location\n}\n\ntype Organization implements Actor {\n  id: ID!\n  name: String\n  profilePicture: Image\n  joined: DateTime\n  organizationKind: OrganizationKind\n}\n```\n\n----------------------------------------\n\nTITLE: Querying for Empire's ID and Name\nDESCRIPTION: Similar to the Rebels query, this fetches the ID and name of the Empire faction, showing how different objects have unique IDs.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/guides/graphql-server-specification.md#2025-04-18_snippet_3\n\nLANGUAGE: graphql\nCODE:\n```\nquery EmpireQuery {\n  empire {\n    id\n    name\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Single Username Query Example\nDESCRIPTION: Example of querying a single user by username.\nSOURCE: https://github.com/facebook/relay/blob/main/website/spec/ObjectIdentification.md#2025-04-18_snippet_7\n\nLANGUAGE: graphql\nCODE:\n```\n{\n  username(username: \"zuck\") {\n    id\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing AssignBestFriendButton Component in React and Relay\nDESCRIPTION: Defines a React component that uses Relay hooks to fetch user data and provide a button to assign a new best friend. It uses commitLocalUpdate and readUpdatableQuery to update the store.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/guided-tour/updating-data/imperatively-modifying-linked-fields.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport type {AssignBestFriendButton_user$key} from 'AssignBestFriendButton_user.graphql';\nimport type {RecordSourceSelectorProxy} from 'react-relay';\n\nconst {commitLocalUpdate, useFragment, useRelayEnvironment} = require('react-relay');\n\ngraphql`\n  fragment AssignBestFriendButton_assignable_user on User @assignable {\n    __typename\n  }\n`;\n\nexport default function AssignBestFriendButton({\n  someTypeRef: AssignBestFriendButton_someType$key,\n}) {\n  const data = useFragment(graphql`\n    fragment AssignBestFriendButton_someType on SomeType {\n      user {\n        name\n        ...AssignableBestFriendButton_assignable_user\n      }\n    }\n  `, someTypeRef);\n\n  const environment = useRelayEnvironment();\n  const onClick = () => {\n    const updatableData = commitLocalUpdate(\n      environment,\n      (store: RecordSourceSelectorProxy) => {\n        const {updatableData} = store.readUpdatableQuery(\n            graphql`\n              query AssignBestFriendButtonUpdatableQuery\n              @updatable {\n                viewer {\n                  best_friend {\n                    ...AssignableBestFriendButton_assignable_user\n                  }\n                }\n              }\n            `,\n            {}\n          );\n\n        if (data.user != null && updatableData.viewer != null) {\n          updatableData.viewer.best_friend = data.user;\n        }\n      }\n    );\n  };\n\n  return (<button onClick={onClick}>\n    Declare {user.name ?? 'someone with no name'} my best friend!\n  </button>);\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Button Component Implementation\nDESCRIPTION: Initial React component implementation showing fragment usage and button rendering without update logic.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/guided-tour/updating-data/imperatively-modifying-linked-fields.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport type {AssignBestFriendButton_user$key} from 'AssignBestFriendButton_user.graphql';\n\nconst {useFragment} = require('react-relay');\n\nexport default function AssignBestFriendButton({\n  someTypeRef: AssignBestFriendButton_user$key,\n}) {\n  const data = useFragment(graphql`\n    fragment AssignBestFriendButton_someType on SomeType {\n      user {\n        name\n        ...AssignableBestFriendButton_assignable_user\n      }\n    }\n  `, someTypeRef);\n\n  // We will replace this stub with the real thing below.\n  const onClick = () => {};\n\n  return (<button onClick={onClick}>\n    Declare {data.user?.name ?? 'someone with no name'} your new best friend!\n  </button>);\n}\n```\n\n----------------------------------------\n\nTITLE: Using toPromise with fetchQuery in Relay\nDESCRIPTION: Shows how to convert the fetchQuery observable to a Promise using toPromise(). This method is not recommended for general use as it may result in incomplete data processing, especially for deferred or 3D data.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/api-reference/relay-runtime/fetch-query.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst {fetchQuery} = require('react-relay');\n\nfetchQuery(\n  environment,\n  graphql`\n    query AppQuery($id: ID!) {\n      user(id: $id) {\n        name\n      }\n    }\n  `,\n  {id: 4},\n)\n.toPromise() // NOTE: don't use, this can cause data to be missing!\n.then(data => {...})\n.catch(error => {...};\n```\n\n----------------------------------------\n\nTITLE: Using fetchQuery with Promises in JavaScript\nDESCRIPTION: Shows how to convert the fetchQuery observable to a Promise using toPromise(). This approach is generally not recommended as it may miss deferred or 3D data in the query.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/api-reference/relay-runtime/fetch-query.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst {fetchQuery} = require('react-relay');\n\nfetchQuery(\n  environment,\n  graphql`\n    query AppQuery($id: ID!) {\n      user(id: $id) {\n        name\n      }\n    }\n  `,\n  {id: 4},\n)\n.toPromise() // NOTE: don't use, this can cause data to be missing!\n.then(data => {...})\n.catch(error => {...};\n```\n\n----------------------------------------\n\nTITLE: Configuring Relay Persisted Queries in package.json\nDESCRIPTION: Example of how to configure persisted queries in the Relay section of package.json, including the persistConfig option with URL and parameters.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/guides/persisted-queries.md#2025-04-18_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"scripts\": {\n    \"relay\": \"relay-compiler\",\n    \"relay-persisting\": \"node relayLocalPersisting.js\"\n  },\n  \"relay\": {\n    \"src\": \"./src\",\n    \"schema\": \"./schema.graphql\",\n    \"persistConfig\": {\n      \"url\": \"http://localhost:2999\",\n      \"params\": {}\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: GraphQL Mutation Input Parameters\nDESCRIPTION: This JSON object details parameters used for the 'introduceShip' mutation, providing the necessary data to create a new ship associated with a faction. Key parameters include 'shipName', 'factionId', and 'clientMutationId'.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-experimental/GraphQL-ServerSpecification.md#2025-04-18_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"input\": {\n    \"shipName\": \"B-Wing\",\n    \"factionId\": \"1\",\n    \"clientMutationId\": \"abcde\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Weak Relay Resolver Type in TypeScript\nDESCRIPTION: Demonstrates defining a weak type without an identifier using the @weak tag. Exports a type definition instead of a resolver function.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/api-reference/relay-resolvers/docblock-format.md#2025-04-18_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n/**\n* @RelayResolver ProfilePicture\n* @weak\n*/\nexport type ProfilePicture = {\n  url: string;\n  width: number;\n  height: number;\n};\n```\n\n----------------------------------------\n\nTITLE: Defining RecordProxy Interface in JavaScript\nDESCRIPTION: Defines the interface for RecordProxy, which provides methods for mutating and accessing data in Relay store records.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/api-reference/relay-runtime/store.md#2025-04-18_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\ninterface RecordProxy {\n  copyFieldsFrom(sourceRecord: RecordProxy): void;\n  getDataID(): string;\n  getLinkedRecord(name: string, arguments?: ?Object): ?RecordProxy;\n  getLinkedRecords(name: string, arguments?: ?Object): ?Array<?RecordProxy>;\n  getOrCreateLinkedRecord(\n    name: string,\n    typeName: string,\n    arguments?: ?Object,\n  ): RecordProxy;\n  getType(): string;\n  getValue(name: string, arguments?: ?Object): mixed;\n  setLinkedRecord(\n    record: RecordProxy,\n    name: string,\n    arguments?: ?Object,\n  ): RecordProxy;\n  setLinkedRecords(\n    records: Array<?RecordProxy>,\n    name: string,\n    arguments?: ?Object,\n  ): RecordProxy;\n  setValue(value: mixed, name: string, arguments?: ?Object): RecordProxy;\n  invalidateRecord(): void;\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring Fragment with JavaScript and Relay\nDESCRIPTION: Demonstrates how to declare a GraphQL fragment in JavaScript using Relay's graphql tag.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/guided-tour/rendering/fragments.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst {graphql} = require('react-relay');\n\nconst userFragment = graphql`\n  fragment UserFragment_user on User {\n    name\n    age\n    profile_picture(scale: 2) {\n      uri\n    }\n  }\n`;\n```\n\n----------------------------------------\n\nTITLE: Defining a Simple Relay Resolver in TypeScript\nDESCRIPTION: This snippet demonstrates how to define a basic Relay Resolver that augments an existing type without any inputs. It returns a greeting string.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/guides/relay-resolvers/introduction.md#2025-04-18_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n/**\n * @RelayResolver Query.greeting: String\n */\nexport function greeting(): string {\n  return \"Hello World\";\n}\n```\n\n----------------------------------------\n\nTITLE: Defining GraphQL Actor Interface\nDESCRIPTION: This snippet defines the Actor interface in GraphQL, specifying the common fields for entities that can be actors in the system.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/tutorial/interfaces-polymorphism.md#2025-04-18_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\ninterface Actor {\n  name: String\n  profilePicture: Image\n  joined: DateTime\n}\n```\n\n----------------------------------------\n\nTITLE: Logging Error with RecoverableViolation in Javascript\nDESCRIPTION: Example showing how to use recoverableViolation for error logging with a project name parameter. This demonstrates the standard logging pattern before using @required annotation.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/guides/required-directive.md#2025-04-18_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nrecoverableViolation('My error string', 'my_logger_project');\n```\n\n----------------------------------------\n\nTITLE: Basic GraphQL Fragment Definition\nDESCRIPTION: Demonstrates defining a simple GraphQL fragment that will be processed by the Relay Compiler to generate artifacts.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/guides/compiler.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ngraphql`\n  fragment MyComponent on Type {\n    field\n  }\n`\n```\n\n----------------------------------------\n\nTITLE: Implementing a Live Counter Resolver in TypeScript\nDESCRIPTION: This snippet demonstrates how to create a live resolver for a counter field using the @live annotation and returning a LiveState object. It reads from a store and subscribes to changes.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/guides/relay-resolvers/live-fields.md#2025-04-18_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport type { LiveState } from 'relay-runtime';\n\n/**\n * @RelayResolver Query.counter: Int\n * @live\n */\nexport function counter(): LiveState<number> {\n  return {\n    read: () => store.getState().counter,\n    subscribe: (callback) => {\n      return store.subscribe(callback);\n    },\n  };\n\n}\n```\n\n----------------------------------------\n\nTITLE: Returning List Type in Relay Resolver (TypeScript)\nDESCRIPTION: Shows how to return an array of strings from a Relay Resolver function for a User.favoriteColors field.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/guides/relay-resolvers/return-types.md#2025-04-18_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n/**\n * @RelayResolver User.favoriteColors: [String]\n */\nexport function favoriteColors(user: UserModel): string[] {\n  return user.favoriteColors;\n}\n```\n\n----------------------------------------\n\nTITLE: Cloning and Running the Newsfeed App\nDESCRIPTION: These commands clone the example project, navigate to the directory, install dependencies, and start the development server. This sets up the environment for the Relay tutorial.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/tutorial/intro.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/relayjs/relay-examples.git\ncd relay-examples/newsfeed\nnpm install\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Checking for More Ships using PageInfo\nDESCRIPTION: This code checks if there are more ships available using the PageInfo type. The query requests both the ships and the pagination information, enabling efficient navigation of results.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/guides/graphql-server-specification.md#2025-04-18_snippet_8\n\nLANGUAGE: graphql\nCODE:\n```\nquery EndOfRebelShipsQuery {\n  rebels {\n    name\n    originalShips: ships(first: 2) {\n      edges {\n        node {\n          name\n        }\n      }\n      pageInfo {\n        hasNextPage\n      }\n    }\n    moreShips: ships(first: 3 after: \"YXJyYXljb25uZWN0aW9uOjE=\") {\n      edges {\n        node {\n          name\n        }\n      }\n      pageInfo {\n        hasNextPage\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Client Schema Extension in GraphQL\nDESCRIPTION: GraphQL schema extension defining a boolean field is_new_comment on the Feedback type\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/guided-tour/updating-data/imperatively-modifying-store-data.md#2025-04-18_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nextend type Feedback {\n  is_new_comment: Boolean\n}\n```\n\n----------------------------------------\n\nTITLE: Getting the root record of the Relay Store\nDESCRIPTION: This snippet showcases how to obtain the root record of the GraphQL document using the getRoot method, which returns a RecordProxy representing the root.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/api-reference/relay-runtime/store.md#2025-04-18_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst root = store.getRoot();\n```\n\n----------------------------------------\n\nTITLE: Retrieving a root field from the Relay Store\nDESCRIPTION: This snippet illustrates how to retrieve a specific root field from the Relay Store using its fieldName, returning a RecordProxy for mutating that field's values.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/api-reference/relay-runtime/store.md#2025-04-18_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst viewer = store.getRootField('viewer');\n```\n\n----------------------------------------\n\nTITLE: Defining Disposable Interface in TypeScript\nDESCRIPTION: Interface definition for a Disposable type that contains a dispose method which takes no arguments and returns void. Used for resource cleanup and memory management.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/api-reference/types/Disposable.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Disposable {\n  dispose(): void;\n}\n```\n\n----------------------------------------\n\nTITLE: Representing Normalized Cache Structure in Pseudo-code\nDESCRIPTION: Pseudo-code showing how normalized data might be stored in a Map structure after fetching a story. The example demonstrates how the story and comment data both link to the same author record.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/principles-and-architecture/thinking-in-graphql.md#2025-04-18_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n// Note: This is pseudo-code for `Map` initialization to make the structure\n// more obvious.\nMap {\n  // `story(id: \"1\")`\n  1: Map {\n    text: 'got GraphQL?',\n    author: Link(2),\n    comments: [Link(3)],\n  },\n  // `story.author`\n  2: Map {\n    name: 'Yuzhi',\n    photo: 'http://.../photo1.jpg',\n  },\n  // `story.comments[0]`\n  3: Map {\n    text: 'Here\\'s how to get one!',\n    author: Link(2),\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Using fetchQuery in Relay\nDESCRIPTION: Shows how to fetch GraphQL data outside of React components using fetchQuery. The function returns an observable that can be subscribed to for handling the network request lifecycle. Includes type parameters for Flow typing support.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-experimental/RelayHooks-ApiReference.md#2025-04-18_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nimport type {AppQuery} from 'AppQuery.graphql';\n\nconst {fetchQuery} = require('react-relay/hooks');\n\nfetchQuery<AppQuery>(\n  environment,\n  graphql`\n    query AppQuery($id: ID!) {\n      user(id: $id) {\n        name\n      }\n    }\n  `,\n  {id: 4},\n)\n.subscribe({\n  start: () => {...},\n  complete: () => {...},\n  error: (error) => {...},\n  next: (data) => {...}\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Client Schema Extension for Viewer's Best Friend in GraphQL\nDESCRIPTION: Extends the Viewer type to include a best_friend field of type User.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/guided-tour/updating-data/imperatively-modifying-linked-fields.md#2025-04-18_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nextend type Viewer {\n  best_friend: User,\n}\n```\n\n----------------------------------------\n\nTITLE: Example Usage of RenderLoading\nDESCRIPTION: Example showing how to use the renderLoading prop to display a loading state.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-classic/Classic-APIReference-RootContainer.md#2025-04-18_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n<Relay.RootContainer\n  Component={ProfilePicture}\n  route={profileRoute}\n  renderLoading={function() {\n    return <div>Loading...</div>;\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: GraphQL Introspection Query for PageInfo Type\nDESCRIPTION: GraphQL introspection query to verify correct implementation of the PageInfo type fields and their types.\nSOURCE: https://github.com/facebook/relay/blob/main/website/spec/Connections.md#2025-04-18_snippet_5\n\nLANGUAGE: graphql\nCODE:\n```\n{\n  __type(name: \"PageInfo\") {\n    fields {\n      name\n      type {\n        name\n        kind\n        ofType {\n          name\n          kind\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using @arguments Directive in GraphQL Fragment Spread\nDESCRIPTION: Demonstrates how to pass arguments to a fragment using the @arguments directive\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/glossary/glossary.md#2025-04-18_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\n...Story_story @arguments(storyId: \"1234\")\n```\n\n----------------------------------------\n\nTITLE: Using New altText Field in Image Component (JSX)\nDESCRIPTION: Updated Image component implementation that uses the newly added altText field for accessibility, showing how components can directly use new fields after they're added to fragments.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/tutorial/fragments-1.md#2025-04-18_snippet_10\n\nLANGUAGE: jsx\nCODE:\n```\nfunction Image({image}) {\n  // ...\n  <img\n    // change-line\n    alt={data.altText}\n  //...\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Relay Compiler Error for Disallowed ID Types\nDESCRIPTION: An example error message from the Relay compiler indicating that a GraphQL schema has defined an 'id' field with an invalid type. The error shows that a String type was used instead of the required ID type.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/debugging/disallowed-id-types-error.md#2025-04-18_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nDisallowed type `String` of field `id` on parent type `Foo` cannot be used by Relay to identify entities\n```\n\n----------------------------------------\n\nTITLE: Implementing REST Response Cache\nDESCRIPTION: Implementation of a basic REST response cache using URIs as cache keys.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-experimental/PrinciplesAndArchitecture-ThinkingInGraphQL.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nvar _cache = new Map();\nrest.get = uri => {\n  if (!_cache.has(uri)) {\n    _cache.set(uri, fetch(uri));\n  }\n  return _cache.get(uri);\n};\n```\n\n----------------------------------------\n\nTITLE: Extending Viewer Type in GraphQL Schema\nDESCRIPTION: This GraphQL schema extension defines a `best_friend` field of type `User` on the `Viewer` type. This allows the application to represent and update the viewer's best friend.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/guided-tour/updating-data/imperatively-modifying-linked-fields.md#2025-04-18_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\n\"extend type Viewer {\\n  best_friend: User,\\n}\"\n```\n\n----------------------------------------\n\nTITLE: Initial Query with Hard-coded ID in PosterDetailsHovercardContents\nDESCRIPTION: The initial GraphQL query used in the hovercard that fetches data for a hard-coded ID instead of using the ID of the poster being hovered over.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/tutorial/queries-2.md#2025-04-18_snippet_3\n\nLANGUAGE: graphql\nCODE:\n```\nconst PosterDetailsHovercardContentsQuery = graphql`\n  query PosterDetailsHovercardContentsQuery {\n    // color1\n    node(id: \"1\") {\n      // color2\n      ... on Actor {\n        ...PosterDetailsHovercardContentsBodyFragment\n      }\n    }\n  }\n`;\n```\n\n----------------------------------------\n\nTITLE: Implementing Story Component with Data Fetching\nDESCRIPTION: Shows how to use useLazyLoadQuery to fetch data and render a story component with its author details.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/principles-and-architecture/thinking-in-relay.md#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nfunction Story(props) {\n  const data = useLazyLoadQuery(storyQuery, props.storyId);\n\n  return (<>\n    <Heading>{data?.story.title}</Heading>\n    {data?.story?.author && <AuthorDetails author={data.story.author} />}\n  </>);\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Relay Resolvers Transformation in Compiler\nDESCRIPTION: This JSON configuration snippet sets the necessary `enable_relay_resolver_transform` feature flag in the Relay compiler configuration file `relay.config.json`. It includes the paths for the source and schema and specifies TypeScript as the language. This setting is essential for supporting Relay Resolvers transformation during the compilation process.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/guides/relay-resolvers/enabling.md#2025-04-18_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"src\": \"./src\",\n  \"schema\": \"./schema.graphql\",\n  \"language\": \"typescript\",\n  \"featureFlags\": {\n    // highlight-next-line\n    \"enable_relay_resolver_transform\": true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Query Variables in Mock Resolver Context\nDESCRIPTION: This code snippet illustrates how to access query variables within the mock resolver context when using `MockPayloadGenerator`. It demonstrates how the `context.args` property contains the arguments passed to the innermost function call in the GraphQL query, allowing for conditional mocking based on the input variables.  The variables are available on the `context.args`, but only to the *innermost function call*.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v13.0.0/guides/testing-relay-with-preloaded-queries.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nCurrencyAmount(context) {\n  console.log(JSON.stringify(context, null, 2)); // <== logs { ...snip..., \"name\": \"subtotal_price_for_offers\", args: { offer_ids: [...] } }\n  return { formatted_amount: mockResponse }\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Root Field in Relay Store\nDESCRIPTION: The `getRootField` method retrieves a specified root field from the Relay store, returning a `RecordProxy` for interacting with the field's data.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/api-reference/relay-runtime/store.md#2025-04-18_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst viewer = store.getRootField('viewer');\n```\n\n----------------------------------------\n\nTITLE: Query Data Fetching Flow Diagram\nDESCRIPTION: ASCII diagram showing the flow of query data from initial fetch through normalization into the RecordSource. Illustrates how queries are processed from the server response into normalized records.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/principles-and-architecture/runtime-architecture.md#2025-04-18_snippet_1\n\nLANGUAGE: ascii-diagram\nCODE:\n```\n               ┌───────────────────────┐\n               │         Query         │\n               └───────────────────────┘\n                           │\n                           ▼\n                                             ┌ ─ ─ ─ ┐\n                         fetch ◀────────────▶ Server\n                                             └ ─ ─ ─ ┘\n                           │\n                     ┌─────┴───────┐\n                     ▼             ▼\n               ┌──────────┐  ┌──────────┐\n               │  Query   │  │ Response │\n               └──────────┘  └──────────┘\n                     │             │\n                     └─────┬───────┘\n                           │\n                           ▼\n                       normalize\n                           │\n                           ▼\n               ┌───────────────────────┐\n               │     RecordSource      │\n               │                       │\n               │┌──────┐┌──────┐┌─────┐│\n               ││Record││Record││ ... ││\n               │└──────┘└──────┘└─────┘│\n               └───────────────────────┘\n```\n\n----------------------------------------\n\nTITLE: Implementing relayLocalPersisting.js for Persisted Queries in JavaScript\nDESCRIPTION: This JavaScript example implements a simple persist server using Node.js to save query text to a JSON file. It supports POST requests with form-urlencoded content, computes MD5 hashes for queries, and stores these in queryMap.json.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/guides/persisted-queries.md#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst http = require('http');\nconst crypto = require('crypto');\nconst fs = require('fs');\n\nfunction md5(input) {\n  return crypto.createHash('md5').update(input).digest('hex');\n}\n\nclass QueryMap {\n  constructor(fileMapName) {\n    this._fileMapName = fileMapName;\n    this._queryMap = new Map(JSON.parse(fs.readFileSync(this._fileMapName)));\n  }\n\n  _flush() {\n    const data = JSON.stringify(Array.from(this._queryMap.entries()));\n    fs.writeFileSync(this._fileMapName, data);\n  }\n\n  saveQuery(text) {\n    const id = md5(text);\n    this._queryMap.set(id, text);\n    this._flush();\n    return id;\n  }\n}\n\nconst queryMap = new QueryMap('./queryMap.json');\n\nasync function requestListener(req, res) {\n  if (req.method === 'POST') {\n    const buffers = [];\n    for await (const chunk of req) {\n      buffers.push(chunk);\n    }\n    const data = Buffer.concat(buffers).toString();\n    res.writeHead(200, {\n      'Content-Type': 'application/json'\n    });\n    try {\n      if (req.headers['content-type'] !== 'application/x-www-form-urlencoded') {\n        throw new Error(\n          'Only \"application/x-www-form-urlencoded\" requests are supported.'\n        );\n      }\n      const text = new URLSearchParams(data).get('text');\n      if (text == null) {\n        throw new Error('Expected to have `text` parameter in the POST.');\n      }\n      const id = queryMap.saveQuery(text);\n      res.end(JSON.stringify({\"id\": id}));\n    } catch (e) {\n      console.error(e);\n      res.writeHead(400);\n      res.end(`Unable to save query: ${e}.`);\n    }\n  } else {\n    res.writeHead(400);\n    res.end(\"Request is not supported.\")\n  }\n}\n\nconst PORT = 2999;\nconst server = http.createServer(requestListener);\nserver.listen(PORT);\n\nconsole.log(`Relay persisting server listening on ${PORT} port.`);\n```\n\n----------------------------------------\n\nTITLE: Getting the type of a record\nDESCRIPTION: This snippet illustrates how to obtain the type of a record using the getType method. This type is defined by the GraphQL schema and can help identify the record's nature.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/api-reference/relay-runtime/store.md#2025-04-18_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nconst type = user.getType();  // User\n```\n\n----------------------------------------\n\nTITLE: Defining a Derived Relay Resolver Field in TypeScript\nDESCRIPTION: Demonstrates defining a derived field using @rootFragment. The resolver reads data from a fragment and computes a new value.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/api-reference/relay-resolvers/docblock-format.md#2025-04-18_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport {readFragment} from 'relay-runtime';\n\n/**\n * @RelayResolver User.fullName: String\n * @rootFragment UserFullNameFragment\n */\nexport function fullName(key: UserFullNameFragment$key): string {\n  const user = readFragment(\n    graphql`\n      fragment UserFullNameFragment on User {\n        firstName\n        lastName\n      }\n    `,\n    key,\n  );\n  return `${user.firstName} ${user.lastName}`;\n}\n```\n\n----------------------------------------\n\nTITLE: Marking Relay Resolvers Field as Deprecated\nDESCRIPTION: Demonstrates how to use the `@deprecated` tag on a Relay Resolver field to indicate its deprecation status. By adding this tag, developers can communicate that a field is deprecated and optionally provide a reason for it. Essential for keeping client state schema aligned with server-deprecated fields.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/guides/relay-resolvers/deprecated.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n\n/**\n * @RelayResolver Author.fullName: String\n *\n * @deprecated Google \\\"Falsehoods Programmers Believe About Names\\\"\n */\nexport function fullName(author: AuthorModel): string {\n  return `${author.firstName} ${author.lastName}`;\n}\n```\n\n----------------------------------------\n\nTITLE: Querying First Ship of Rebels\nDESCRIPTION: This query demonstrates how to fetch the first ship in the Rebels' fleet, introducing the concept of connections and pagination in GraphQL.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/guides/graphql-server-specification.md#2025-04-18_snippet_5\n\nLANGUAGE: graphql\nCODE:\n```\nquery RebelsShipsQuery {\n  rebels {\n    name\n    ships(first: 1) {\n      edges {\n        node {\n          name\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting up LiveResolverStore with Context in JavaScript\nDESCRIPTION: Initializes the LiveResolverStore with a resolverContext to pass custom store values to all resolvers. Requires a custom store object to define the shared values.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/guides/relay-resolvers/context.md#2025-04-18_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst store = new LiveResolverStore(source, {\n  resolverContext: {\n    store: customStore,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Batching Live State Updates with Redux\nDESCRIPTION: This snippet shows how to batch live state updates when using Redux to improve performance. It wraps the Redux dispatch function with Relay's batchLiveStateUpdates to reduce duplicate work.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/guides/relay-resolvers/live-fields.md#2025-04-18_snippet_3\n\nLANGUAGE: ts\nCODE:\n```\nconst store = createStore(reducer);\nconst originalDispatch = store.dispatch;\n\nfunction wrapped(action) {\n  relayStore.batchLiveStateUpdates(() => {\n    originalDispatch(action);\n  })\n}\n\nstore.dispatch = wrapped;\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Result Publishing to Store in Relay\nDESCRIPTION: This ASCII diagram illustrates the process of publishing results to the Relay store, updating records without immediately notifying subscribers.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/principles-and-architecture/runtime-architecture.md#2025-04-18_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n                        publish\n                           │\n                           ▼\n             ┌───────────────────────────┐\n             │           Store           │\n             │ ┌───────────────────────┐ │\n             │ │     RecordSource      │ │\n             │ │                       │ │\n             │ │┌──────┐┌──────┐┌─────┐│ │\n             │ ││Record││Record││ ... ││ │ <--- records are updated\n             │ │└──────┘└──────┘└─────┘│ │\n             │ └───────────────────────┘ │\n             │ ┌───────────────────────┐ │\n             │ │     Subscriptions     │ │\n             │ │                       │ │\n             │ │┌──────┐┌──────┐┌─────┐│ │\n             │ ││ Sub. ││ Sub. ││ ... ││ │ <--- subscriptions do not fire yet\n             │ │└──────┘└──────┘└─────┘│ │\n             │ └───────────────────────┘ │\n             └───────────────────────────┘\n```\n\n----------------------------------------\n\nTITLE: Subscription Testing in Relay\nDESCRIPTION: Shows how to test subscription functions by simulating subscription events and verifying callback invocation\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/guides/testing-relay-components.md#2025-04-18_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\ntest('it should subscribe', () => {\n  const environment = createMockEnvironment();\n  const onNext = jest.fn();\n  subscribe(environment, onNext, jest.fn(), {});\n  const operation = environment.mock.getMostRecentOperation();\n```\n\n----------------------------------------\n\nTITLE: Illustrating Query Data Fetching Flow in Relay\nDESCRIPTION: This ASCII diagram shows the process of fetching query data in Relay, including the query, server interaction, response handling, and normalization into the RecordSource.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/principles-and-architecture/runtime-architecture.md#2025-04-18_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n               ┌───────────────────────┐\n               │         Query         │\n               └───────────────────────┘\n                           │\n                           ▼\n                                             ┌ ─ ─ ─ ┐\n                         fetch ◀────────────▶ Server\n                                             └ ─ ─ ─ ┘\n                           │\n                     ┌─────┴───────┐\n                     ▼             ▼\n               ┌──────────┐  ┌──────────┐\n               │  Query   │  │ Response │\n               └──────────┘  └──────────┘\n                     │             │\n                     └─────┬───────┘\n                           │\n                           ▼\n                       normalize\n                           │\n                           ▼\n               ┌───────────────────────┐\n               │     RecordSource      │\n               │                       │\n               │┌──────┐┌──────┐┌─────┐│\n               ││Record││Record││ ... ││\n               │└──────┘└──────┘└─────┘│\n               └───────────────────────┘\n```\n\n----------------------------------------\n\nTITLE: GraphQL Response Structure for Lists\nDESCRIPTION: Sample JSON response showing how GraphQL returns array data for a list query.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/tutorial/arrays-lists.md#2025-04-18_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  viewer: {\n    contacts: [ // array in response\n      {\n        id: \"123\",\n        name: \"Chris\",\n      },\n      {\n        id: \"789\",\n        name: \"Sue\",\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing React and Relay manually\nDESCRIPTION: Command to install React and Relay dependencies using package managers like yarn or npm.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/getting-started/installation-and-setup.md#2025-04-18_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nyarn add react react-dom react-relay\n```\n\n----------------------------------------\n\nTITLE: GraphQL Fragment with Inline Fragment and @required\nDESCRIPTION: This GraphQL fragment demonstrates a scenario where `@required` is used within an inline fragment. Because the `Actor` may not always be a `User`, the `name` field within the `User` inline fragment remains nullable. The example then shows how adding `__typename` resolves the nullability issue.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v13.0.0/guides/required-directive.md#2025-04-18_snippet_3\n\nLANGUAGE: graphql\nCODE:\n```\nfragment MyFrag on Actor {\n  ... on User {\n    name @required(action: THROW)\n  }\n}\n```\n\nLANGUAGE: graphql\nCODE:\n```\nfragment MyFrag on Actor {\n  __typename\n  ... on User {\n    name @required(action: THROW)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Relay Resolver in JSX\nDESCRIPTION: Demonstrates how to create a basic Relay Resolver that adds a greeting field to a User type. The resolver combines honorific and last_name fields to create a greeting string.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/guides/relay-resolvers.md#2025-04-18_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport type {UserGreetingResolver$key} from 'UserGreetingResolver.graphql';\nimport {graphql} from 'relay-runtime';\nimport {readFragment} from 'relay-runtime/store/ResolverFragments';\n\n/**\n * @RelayResolver\n *\n * @onType User\n * @fieldName greeting\n * @rootFragment UserGreetingResolver\n *\n * A greeting for the user which includes their name and title.\n */\nexport default function userGreetingResolver(userKey: UserGreetingResolver$key): string {\n  const user = readFragment(graphql`\n    fragment UserGreetingResolver on User {\n      honorific\n      last_name\n    }`, userKey);\n\n  return `Hello ${user.honorific} ${user.last_name}!`;\n}\n```\n\n----------------------------------------\n\nTITLE: Example GraphQL Response with an Array\nDESCRIPTION: A sample GraphQL response showing how list data is returned as an array in the JSON response, corresponding to the contacts query.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/tutorial/arrays-lists.md#2025-04-18_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  viewer: {\n    contacts: [ // array in response\n      {\n        id: \"123\",\n        name: \"Chris\",\n      },\n      {\n        id: \"789\",\n        name: \"Sue\",\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Relay Compiler in Watch Mode\nDESCRIPTION: This code snippet shows how to run the Relay Compiler in watch mode using yarn. This ensures that artifacts are automatically regenerated as the source code is updated, streamlining the development process.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/guided-tour/workflow.md#2025-04-18_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n```sh\nyarn run relay --watch\n```\n```\n\n----------------------------------------\n\nTITLE: Adding Fragment Argument to ContactsListFragment in GraphQL\nDESCRIPTION: This snippet demonstrates how to add a fragment argument to the ContactsListFragment, which will become a query variable for the refetch query.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/tutorial/refetchable-fragments.md#2025-04-18_snippet_2\n\nLANGUAGE: graphql\nCODE:\n```\nconst ContactsListFragment = graphql`\n  fragment ContactsListFragment on Viewer\n    // change\n    @argumentDefinitions(\n      search: {type: \"String\", defaultValue: null}\n    )\n    // end-change\n  {\n    contacts {\n      id\n      ...ContactRowFragment\n    }\n  }\n`;\n```\n\n----------------------------------------\n\nTITLE: Testing Relay Component States\nDESCRIPTION: Comprehensive example of testing different component states (Loading, Data Render, Error) using createMockEnvironment and MockPayloadGenerator.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/guides/testing-relay-components.md#2025-04-18_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst MyAwesomeViewRoot = require('MyAwesomeViewRoot');\nconst {\n  createMockEnvironment,\n  MockPayloadGenerator,\n} = require('relay-test-utils');\nconst {act, render} = require('@testing-library/react');\n\ntest('Loading State', async () => {\n  const environment = createMockEnvironment();\n  const renderer = render(\n    <MyAwesomeViewRoot environment={environment} />,\n  );\n\n  expect(await renderer.findByTestId('spinner')).toBeDefined();\n});\n\ntest('Data Render', async () => {\n  const environment = createMockEnvironment();\n  const renderer = render(\n    <MyAwesomeViewRoot environment={environment} />,\n  );\n\n  act(() => {\n    environment.mock.resolveMostRecentOperation(operation =>\n      MockPayloadGenerator.generate(operation),\n    );\n  });\n\n  expect(await renderer.findByTestId('myButton')).toBeDefined();\n});\n\ntest('Error State', async () => {\n  const environment = createMockEnvironment();\n  const renderer = render(\n    <MyAwesomeViewRoot environment={environment} />,\n  );\n\n  act(() => {\n    environment.mock.rejectMostRecentOperation(new Error('Uh-oh'));\n  });\n\n  expect(await renderer.findByTestId('errorMessage')).toBeDefined();\n});\n```\n\n----------------------------------------\n\nTITLE: Simple Relay Resolver Field Example with Flow Syntax in TypeScript\nDESCRIPTION: This snippet shows a simple example of a Relay resolver field using Flow syntax in TypeScript. It defines a 'name' field that returns a string from a UserModel object.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/guides/relay-resolvers/defining-fields.md#2025-04-18_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * @RelayResolver\n */\nexport function name(user: UserModel): string {\n  return user.name;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Fat Query in Relay Mutation\nDESCRIPTION: Demonstrates how to implement the required getFatQuery method to specify all fields that could change as a result of the mutation.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-classic/Classic-APIReference-Mutation.md#2025-04-18_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nclass BuySongMutation extends Relay.Mutation {\n  getFatQuery() {\n    return Relay.QL`\n      fragment on BuySongPayload {\n        songs {\n          count,\n          edges,\n        },\n        totalRunTime,\n      }\n    `,\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Comparing Traditional HTTP API Request and Response\nDESCRIPTION: Demonstrates a traditional HTTP API call where a fixed set of information is returned for a person with ID 24601.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/tutorial/graphql.md#2025-04-18_snippet_0\n\nLANGUAGE: json\nCODE:\n```\nRequest:\nGET /person?id=24601\n\nResponse:\n{\"id\": \"24601\", \"name\": \"Jean Valjean\", \"age\": 64, \"occupation\": \"Mayor\"}\n```\n\n----------------------------------------\n\nTITLE: Implementing sendQueries in RelayNetworkLayer\nDESCRIPTION: Method signature for sending multiple queries to the server. Handles an array of query requests for efficient batching.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-classic/Classic-Interfaces-NetworkLayer.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nsendQueries(queryRequests: Array<RelayQueryRequest>): ?Promise\n```\n\n----------------------------------------\n\nTITLE: Plural Fragment Definition with Relay Directive\nDESCRIPTION: Example of using the @relay(plural: true) directive to handle GraphQL lists in fragments.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-experimental/Modern-GraphQLInRelay.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ngraphql`\nfragment TodoItems_items on TodoItem @relay(plural: true) {\n  id\n  text\n}`;\n\n// Plural fragment usage: note the parent type is a list of items (`TodoItem[]`)\nfragment TodoApp_app on App {\n  items {\n    // parent type is a list here\n    ...TodoItem_items\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Server Response JSON Structure\nDESCRIPTION: Example of the JSON data structure returned from the server in response to the GraphQL query. Shows how the response structure mirrors the shape of the GraphQL query.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/tutorial/queries-1.md#2025-04-18_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  topStory: {\n    title: \"Local Yak Named Yak of the Year\",\n    summary: \"The annual Yak of the Year awards ceremony ...\",\n    poster: {\n      name: \"Baller Bovine Board\",\n      profilePicture: {\n        url: '/images/baller_bovine_board.jpg',\n      },\n    },\n    thumbnail: {\n      url: '/images/max_the_yak.jpg',\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Fragment Component Type Emission in Flow\nDESCRIPTION: Example of Flow type generation for fragment components, showing how fragment references are typed and used in component props.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/guides/type-emission.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport type { ExampleFragmentComponent_artist$key } from \"__generated__/ExampleFragmentComponent_artist.graphql\"\n\ntype Props = {\n  artist: ExampleFragmentComponent_artist$key,\n};\n\nexport default ExampleFragmentComponent(props) {\n  const data = useFragment(\n    graphql`\n      fragment ExampleFragmentComponent_artist on Artist {\n        biography\n      }\n    `,\n    props.artist,\n  );\n\n  return <div>About the artist: {props.artist.biography}</div>;\n}\n```\n\n----------------------------------------\n\nTITLE: Example Implementation of sendQueries\nDESCRIPTION: Example showing how to implement the sendQueries method using Promise.all for handling multiple queries simultaneously.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-classic/Classic-Interfaces-NetworkLayer.md#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nsendQueries(queryRequests) {\n  return Promise.all(queryRequests.map(\n    queryRequest => fetch(...).then(result => {\n      if (result.errors) {\n        queryRequest.reject(new Error(...));\n      } else {\n        queryRequest.resolve({response: result.data});\n      }\n    })\n  ));\n}\n```\n\n----------------------------------------\n\nTITLE: GraphQL Response: Inconsistent Server Data\nDESCRIPTION: This example illustrates an inconsistent server response where the same entity (user with id 1) has different values for the `name` field in different parts of the response. This violates field stability and can cause Relay to store a null value.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/debugging/why-null.md#2025-04-18_snippet_2\n\nLANGUAGE: graphql\nCODE:\n```\n{\n  me {\n    id: 1\n    name: \"Alice\"\n  }\n  me_elsewhere_in_the_graph {\n    id: 1 # Note this is the same as the `me` field above...\n    name: null\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering DocsRating Component\nDESCRIPTION: This snippet renders the DocsRating component within the JSX structure, enabling users to rate the documentation. The component uses props defined within the DocsRating structure to function correctly.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/migration-and-compatibility/suspense-compatibility.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n<DocsRating />\n```\n\n----------------------------------------\n\nTITLE: Example Fragments With and Without Field Arguments (GraphQL)\nDESCRIPTION: Two example fragments showing the difference between fetching an image URL with and without size arguments. The second example uses field arguments to request a specific image size.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/tutorial/fragments-1.md#2025-04-18_snippet_11\n\nLANGUAGE: graphql\nCODE:\n```\nfragment Example1 on Image {\n  url\n}\n```\n\nLANGUAGE: graphql\nCODE:\n```\nfragment Example2 on Image {\n  url(height: 100, width: 100)\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Collision Key in Relay Mutation\nDESCRIPTION: Example of implementing the getCollisionKey method to ensure mutations affecting the same entity are sent to the server serially and in-order.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-classic/Classic-APIReference-Mutation.md#2025-04-18_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nclass LikeStoryMutation extends Relay.Mutation {\n  getCollisionKey() {\n    // Give the same key to like mutations that affect the same story\n    return `like_${this.props.story.id}`;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Reading a Best Friend's Name in GraphQL Query\nDESCRIPTION: A GraphQL query example that demonstrates fetching a best friend's name through a relationship. This example is used to illustrate how changes in graph relationships can lead to null values when the relationship changes but not all required fields are fetched.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/debugging/why-null.md#2025-04-18_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nquery MyQuery {\n  me {\n    best_friend {\n      # id: 1\n      name\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: JavaScript Representation of a Bubbled Error with @catch\nDESCRIPTION: This JavaScript object depicts how errors are reported at the parent level when using the @catch directive in a GraphQL query. It highlights error bubbling by presenting the error message and structure in the response.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/guides/catch-directive.md#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    viewer: {\n        ok: false,\n        errors: [\n            {\n                message: \"Couldn't get name\",\n                path: ['viewer', 'name']\n            }\n        ]\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: GraphQL Fragment Example\nDESCRIPTION: This GraphQL fragment defines the structure for fetching user data, including the user's ID, name, and address, specifically the city within the address. It is used to specify the data requirements for a Relay component.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/principles-and-architecture/runtime-architecture.md#2025-04-18_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\n\"// GraphQL Fragment\nfragment on User {\n  id\n  name\n  address {\n    city\n  }\n}\"\n```\n\n----------------------------------------\n\nTITLE: Defining a Derived Resolver for User's Full Name in Relay\nDESCRIPTION: This code snippet demonstrates how to create a derived resolver for a User's full name by combining firstName and lastName fields. It uses the @RelayResolver and @rootFragment annotations to define the resolver and its data dependencies.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/guides/relay-resolvers/derived-fields.md#2025-04-18_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport {readFragment} from 'relay-runtime';\n\n/**\n * @RelayResolver User.fullName: String\n * @rootFragment UserFullNameFragment\n */\nexport function fullName(key: UserFullNameFragment$key): string {\n  const user = readFragment(graphql`\n    fragment UserFullNameFragment on User {\n        firstName\n        lastName\n    }\n  `, key);\n  return `${user.firstName} ${user.lastName}`;\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Initial Variables in Relay Mutation\nDESCRIPTION: Demonstrates how to use the static initialVariables property to set default variables that will be available to fragment builders in a Relay mutation.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-classic/Classic-APIReference-Mutation.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nclass ChangeTodoStatusMutation extends Relay.Mutation {\n  static initialVariables = {orderby: 'priority'};\n  static fragments = {\n    todos: () => Relay.QL`\n      # The variable defined above is available here as $orderby\n      fragment on User { todos(orderby: $orderby) { ... } }\n    `,\n  };\n  /* ... */\n}\n```\n\n----------------------------------------\n\nTITLE: Defining GraphQL Fragment for a Story Component\nDESCRIPTION: Defines a GraphQL fragment to describe the data required by a Story component, encapsulating required fields such as text and author details. The fragment specifies what data to fetch for a Story type, facilitating data-fetching in Relay by identifying unique data needs for components.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-classic/PrinciplesAndArchitecture-ThinkingInRelay.md#2025-04-18_snippet_0\n\nLANGUAGE: GraphQL\nCODE:\n```\n\"fragment Story_story on Story {\\n  text\\n  author {\\n    name\\n    photo\\n  }\\n}\"\n```\n\n----------------------------------------\n\nTITLE: Executing GraphQL Query with fetchQuery in JavaScript\nDESCRIPTION: Example showing how to use fetchQuery to execute a GraphQL query with variables and handle the response using observable subscription. The function fetches user data based on an ID and provides callbacks for different stages of the request.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/api-reference/relay-runtime/fetch-query.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// You should prefer passing an environment that was returned from useRelayEnvironment()\nconst MyEnvironment = require('MyEnvironment');\nconst {fetchQuery} = require('react-relay');\n\nfetchQuery(\n  environment,\n  graphql`\n    query AppQuery($id: ID!) {\n      user(id: $id) {\n        name\n      }\n    }\n  `,\n  {id: 4},\n)\n.subscribe({\n  start: () => {...},\n  complete: () => {...},\n  error: (error) => {...},\n  next: (data) => {...}\n});\n```\n\n----------------------------------------\n\nTITLE: Declaring a Fragment with JavaScript in Relay\nDESCRIPTION: Using the graphql tag in JavaScript to declare a fragment that can be used in Relay components. This shows the JS equivalent of the previous GraphQL fragment.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v13.0.0/guided-tour/rendering/fragments.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst {graphql} = require('react-relay');\n\nconst userFragment = graphql`\n  fragment UserFragment_user on User {\n    name\n    age\n    profile_picture(scale: 2) {\n      uri\n    }\n  }\n`;\n```\n\n----------------------------------------\n\nTITLE: Plain GraphQL Connection Fragment Example\nDESCRIPTION: A GraphQL fragment showing a plain connection without @connection directive. This example retrieves the first 10 friends of a User.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v13.0.0/api-reference/relay-runtime/store.md#2025-04-18_snippet_40\n\nLANGUAGE: graphql\nCODE:\n```\nfragment FriendsFragment on User {\n  friends(first: 10) {\n    edges {\n      node {\n        id\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Store Deletion Example\nDESCRIPTION: Example demonstrating how to delete a record from the Relay store.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/api-reference/relay-runtime/store.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nstore.delete(dataID);\n```\n\n----------------------------------------\n\nTITLE: Installing Relay Packages\nDESCRIPTION: Install necessary Relay packages for runtime, compiler, and React integration using NPM or Yarn\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v13.0.0/getting-started/step-by-step-guide.md#2025-04-18_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n# NPM Users\nnpm install --save relay-runtime react-relay\nnpm install --save-dev relay-compiler babel-plugin-relay\n\n# Yarn Users\nyarn add relay-runtime react-relay\nyarn add --dev relay-compiler babel-plugin-relay\n```\n\n----------------------------------------\n\nTITLE: Importing React Components\nDESCRIPTION: Import statements for React components used in the documentation page, including a custom DocsRating component and internal documentation components.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/guided-tour/updating-data/introduction.md#2025-04-18_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport DocsRating from '@site/src/core/DocsRating';\nimport {OssOnly, FbInternalOnly} from 'docusaurus-plugin-internaldocs-fb/internal';\n```\n\n----------------------------------------\n\nTITLE: Copying Fields Between Records in Relay Store\nDESCRIPTION: Example of copying fields from one record to another in the Relay Store using the copyFieldsFrom method of RecordProxy.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/api-reference/relay-runtime/store.md#2025-04-18_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nconst record = store.get(id1);\nconst otherRecord = store.get(id2);\nrecord.copyFieldsFrom(otherRecord); // Mutates `record`\n```\n\n----------------------------------------\n\nTITLE: Defining Destroy Ship Mutation with Relay\nDESCRIPTION: This mutation defines the process of destroying a ship within a faction by declaring dependencies on specific ship and faction IDs. It outlines a fat query to retrieve necessary data upon mutation execution.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-classic/Classic-Guides-Mutations.md#2025-04-18_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\nclass DestroyShipMutation extends Relay.Mutation {\n  // This mutation declares a dependency on an enemy ship's ID\n  // and the ID of the faction that ship belongs to.\n  static fragments = {\n    ship: () => Relay.QL`fragment on Ship { id, faction { id } }`,\n  };\n  // Destroying a ship will remove it from a faction's fleet, so we\n  // specify the faction's ships connection as part of the fat query.\n  getFatQuery() {\n    return Relay.QL`\n      fragment on DestroyShipMutationPayload {\n        destroyedShipID,\n        faction { ships },\n      }\n    `;\n  }\n  getConfigs() {\n    return [{\n      type: 'NODE_DELETE',\n      parentName: 'faction',\n      parentID: this.props.ship.faction.id,\n      connectionName: 'ships',\n      deletedIDFieldName: 'destroyedShipID',\n    }];\n  }\n  /* ... */\n}\n\n```\n\n----------------------------------------\n\nTITLE: Assigning to Interface with Guaranteed Implementation in Relay\nDESCRIPTION: This example shows how to assign to a field with an interface type when the source is guaranteed to implement that interface in Relay.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/guided-tour/updating-data/imperatively-modifying-linked-fields.md#2025-04-18_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\ngraphql`\n  fragment Foo_actor on Actor @assignable {\n    __typename\n  }\n`;\n\nconst data = useFragment(graphql`\n  fragment Foo_query on Query {\n    user {\n      ...Foo_actor\n    }\n    viewer {\n      actor {\n        ...Foo_actor\n      }\n    }\n  }\n`, queryRef);\n\nconst environment = useRelayEnvironment();\nconst onClick = () => {\n  commitLocalUpdate(environment, store => {\n    const {updatableData} = store.readUpdatableQuery(\n      graphql`\n        query FooUpdatableQuery @updatable {\n          viewer {\n            actor {\n              ...Foo_actor\n            }\n          }\n        }\n      `,\n      {}\n    );\n\n    // Assigning the user works as you would expect\n    if (updatableData.viewer != null && data.user != null) {\n      updatableData.viewer = data.user;\n    }\n\n    // As does assigning the viewer\n    if (updatableData.viewer != null && data.viewer?.actor != null) {\n      updatableData.viewer = data.viewer.actor;\n    }\n  });\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Mock Resolvers with @relay_test_operation\nDESCRIPTION: Example of implementing mock resolvers for Scalar and Abstract types using the @relay_test_operation directive. Shows how to handle Float, Boolean, and Node type resolutions.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/guides/testing-relay-components.md#2025-04-18_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  Float() {\n    return 123.456;\n  },\n  Boolean(context) {\n    if (context.name === 'can_edit') {\n      return true;\n    }\n    return false;\n  },\n  Node() {\n    return {\n      __typename: 'User',\n      id: 'my-user-id',\n    };\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Downloading GraphQL Schema\nDESCRIPTION: Command to download the GraphQL schema file from GitHub for use with Relay compiler.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/getting-started/step-by-step-guide.md#2025-04-18_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ncd your-app-name\ncurl https://raw.githubusercontent.com/relayjs/relay-examples/main/issue-tracker/schema/schema.graphql > schema.graphql\n```\n\n----------------------------------------\n\nTITLE: Debugging RelayModernEnvironment Error\nDESCRIPTION: Alternative error message indicating a missing deleteRecord handler in the Relay environment configuration.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/debugging/declarative-mutation-directives.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nRelayModernEnvironment: Expected a handler to be provided for handle `deleteRecord`.\n```\n\n----------------------------------------\n\nTITLE: Rendering RelayEnvironmentProvider Component in React\nDESCRIPTION: Shows how to render a RelayEnvironmentProvider component at the root of a React application, which is necessary when migrating from QueryRenderer to hooks-based approaches.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/migration-and-compatibility/relay-hooks-and-legacy-container-apis.md#2025-04-18_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<RelayEnvironmentProvider environment={MyAppEnvironment}>\n  <App />\n</RelayEnvironmentProvider>\n```\n\n----------------------------------------\n\nTITLE: Defining forceFetch Prop for Relay.Renderer in JavaScript\nDESCRIPTION: Specifies the forceFetch prop type for Relay.Renderer. If set to true, a request for data will always be made to the server regardless of whether data is available on the client.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-classic/Classic-APIReference-Renderer.md#2025-04-18_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nforceFetch: boolean\n```\n\n----------------------------------------\n\nTITLE: Paginating Connection with Preserved Filters\nDESCRIPTION: Demonstrates how filters are preserved when paginating a connection using loadNext.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/guided-tour/list-data/refetching-connections.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nfunction FriendsListComponent(props: Props) {\n  const userRef = props.userRef;\n\n  const {data, loadNext} = usePaginationFragment(\n    graphql`\n      fragment FriendsListComponent_user on User {\n        name\n        friends(order_by: $orderBy, search_term: $searchTerm)\n          @connection(key: \"FriendsListComponent_user_friends_connection\") {\n          edges {\n            node {\n              name\n              age\n            }\n          }\n        }\n      }\n    `,\n    userRef,\n  );\n\n  return (\n    <>\n      <h1>Friends of {data.name}:</h1>\n      <List items={data.friends?.nodes}>{...}</List>\n\n      <Button onClick={() => loadNext(10)}>Load more friends</Button>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using 3D with Relay Hooks in React Component\nDESCRIPTION: This React component demonstrates how to use 3D with the useFragment hook from react-relay. It includes a GraphQL fragment with a @module directive and uses MatchContainer for rendering.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/guides/data-driven-dependencies/server-3d.md#2025-04-18_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nconst {graphql, useFragment, MatchContainer} = require('react-relay');\n\nfunction CommentRenderer(props) {\n  const comment = useFragment(\n    graphql`\n      fragment Comment_comment on Comment {\n        image {\n          ...CommentImageRenderer_image @module(name: \"CommentImageRenderer.react\")\n        }\n      }\n    `,\n    props.comment,\n  );\n\n  if (comment.image == null) {\n    // Handle cases where the field failed to load or was null\n    return null;\n  }\n\n  // MatchContainer may suspend while loading the component/its data,\n  // consider wrapping with React.Suspense.\n  return (\n    <Suspense fallback={null}>\n      <MatchContainer\n        // data for field containing @module selection\n        match={comment.image}\n        props={{...other props...}}\n      />\n    </Suspense>\n  );\n}\nmodule.exports = CommentRenderer;\n```\n\n----------------------------------------\n\nTITLE: Creating a JavaScript Relay Provider\nDESCRIPTION: This JavaScript snippet defines a Relay provider, `Todo_ShouldIncludeTimestamp.relayprovider.js`, implementing the `get()` function to provide runtime values for the provided variable `include_timestamp`. The provider function ensures a boolean is returned consistently across invocations. This aids in dynamically supplying flags or configuration to Relay's GraphQL fragments.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/api-reference/graphql/graphql-directives.md#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// Todo_ShouldIncludeTimestamp.relayprovider.js\nexport default {\n  get(): boolean {\n    // must always return true or false for a given run\n    return check('todo_should_include_timestamp');\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Globally Invalidating the Relay Store in an Updater Function\nDESCRIPTION: An example of how to invalidate the entire Relay store using the invalidateStore() method within an updater function. This marks all cached data as stale, requiring all queries to be refetched the next time they're evaluated.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/guided-tour/reusing-cached-data/staleness-of-data.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nfunction updater(store) {\n  store.invalidateStore();\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Sidebar Component to App.tsx\nDESCRIPTION: Code showing how to import and add a Sidebar component to the App component, which contains the contacts list functionality.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/tutorial/refetchable-fragments.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// change-line\nimport Sidebar from './Sidebar';\n\nexport default function App(): React.ReactElement {\n  return (\n    <RelayEnvironment>\n      <React.Suspense fallback={<LoadingSpinner />}>\n        <div className=\"app\">\n          <Newsfeed />\n          // change-line\n          <Sidebar />\n        </div>\n      </React.Suspense>\n    </RelayEnvironment>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Example of SkipRedundantNodeTransform in GraphQL\nDESCRIPTION: Shows how SkipRedundantNodeTransform eliminates complex cases of field duplication, such as when a field is fetched both conditionally and unconditionally, optimizing query processing efficiency.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/principles-and-architecture/compiler-architecture.md#2025-04-18_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\n# before: `id` processed up to 2x\nfoo {\n  bar {\n    id\n  }\n  ... on FooType @include(if: $cond) { # can't be flattened due to conditional\n    id # but this field is guaranteed to be fetched regardless\n  }\n}\n\n# after: `id` processed at most once\nfoo {\n  bar {\n    id\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Relay Compiler\nDESCRIPTION: Command to install the Relay Compiler for ahead-of-time compilation\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-experimental/Introduction-InstallationAndSetup.md#2025-04-18_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nyarn add --dev relay-compiler graphql\n```\n\n----------------------------------------\n\nTITLE: GraphQL Data Fetching Example\nDESCRIPTION: Shows how to fetch the same story data using GraphQL in a single network request.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/principles-and-architecture/thinking-in-graphql.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ngraphql.get(`query { stories { id, text } }`).then(\n  stories => {\n    console.log(stories);\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Importing DocsRating Component in JSX\nDESCRIPTION: This snippet shows the import statement for the DocsRating component, which is likely used for rating documentation pages.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/guided-tour/managing-data-outside-react/reading-fragments.md#2025-04-18_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport DocsRating from '@site/src/core/DocsRating';\n```\n\n----------------------------------------\n\nTITLE: Configuring Relay Babel Plugin with Artifact Directory\nDESCRIPTION: Babel configuration that tells the Relay plugin where to find the generated artifacts. Must match the artifactDirectory specified in package.json configuration.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/guides/type-emission.md#2025-04-18_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"plugins\": [\n    [\"relay\", { \"artifactDirectory\": \"./src/__generated__\" }]\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Beyond Available Data with Pagination\nDESCRIPTION: A GraphQL query that attempts to fetch ships beyond what's available, demonstrating how connections handle requests that exceed available data.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/guides/graphql-server-specification.md#2025-04-18_snippet_15\n\nLANGUAGE: graphql\nCODE:\n```\nquery RebelsQuery {\n  rebels {\n    name\n    ships(first: 4 after: \"YXJyYXljb25uZWN0aW9uOjQ=\") {\n      edges {\n        cursor\n        node {\n          name\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Invalidating a Record\nDESCRIPTION: Demonstrates how to invalidate a record using the `invalidateRecord` method of the `RecordProxy`.  This marks the record as stale, forcing a refetch on the next query check.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v13.0.0/api-reference/relay-runtime/store.md#2025-04-18_snippet_37\n\nLANGUAGE: javascript\nCODE:\n```\nconst record = store.get('4');\nrecord.invalidateRecord();\n```\n\n----------------------------------------\n\nTITLE: Importing DocsRating and Internal Components - JavaScript\nDESCRIPTION: This snippet imports the DocsRating component and two specific components from the internal Docusaurus plugin used for documentation. It sets up the environment for the documentation page, allowing for ratings and internal visibility controls.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/guided-tour/reusing-cached-data/availability-of-data.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport DocsRating from '@site/src/core/DocsRating';\nimport {OssOnly, FbInternalOnly} from 'docusaurus-plugin-internaldocs-fb/internal';\n```\n\n----------------------------------------\n\nTITLE: Initializing RelayModernStore with Context in JavaScript\nDESCRIPTION: This snippet shows how to initialize RelayModernStore with a resolverContext argument to pass custom context to resolvers.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/guides/relay-resolvers/context.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst store = new RelayModernStore(source, {\n  resolverContext: {\n    store: customStore,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Safe Fragment Spread with @alias\nDESCRIPTION: Shows how to use @alias directive to safely spread fragments with proper null checking\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/guides/alias-directive.md#2025-04-18_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nfunction MyNode({nodeKey}) {\n  const node = useFragment(graphql`\n    fragment MyFragment on Node {\n      ...MyViewer @alias(as: \"my_viewer\")\n    }`, nodeKey);\n\n  if(node.my_viewer == null) {\n    return null;\n  }\n\n  return <MyViewer viewerKey={node.my_viewer} />\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Field Errors with @catch in GraphQL Queries\nDESCRIPTION: This GraphQL snippet demonstrates the usage of the @catch directive to handle errors in the response data. Specifically, it shows how errors in the 'name' field are captured and included in the response instead of returning null.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/guides/catch-directive.md#2025-04-18_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nquery MyQuery {\n  viewer {\n    name @catch\n    age\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: GraphQL User Profile Photo Fragment\nDESCRIPTION: A GraphQL fragment that defines fields for fetching a User's profile photo URI.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-classic/Classic-Guides-Routes.md#2025-04-18_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\nfragment UserProfilePhoto on User {\n  profilePhoto(size: $size) {\n    uri,\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Getting a Field Value\nDESCRIPTION: Demonstrates how to get the value of a field in the current record using the `getValue` method of the `RecordProxy`. The method takes the `name` of the field as a string, and optionally an object of `arguments`. Returns the field's value.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v13.0.0/api-reference/relay-runtime/store.md#2025-04-18_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nconst name = viewer.getValue('name');\n```\n\n----------------------------------------\n\nTITLE: GraphQL Response for User Query - JSON\nDESCRIPTION: This snippet represents a typical JSON response structure received after executing a GraphQL query that retrieves user information based on provided variables.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/guided-tour/rendering/variables.md#2025-04-18_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"user\": {\n      \"id\": \"4\",\n      \"name\": \"Mark Zuckerberg\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Refactoring to useRefetchableFragment in JavaScript\nDESCRIPTION: Simplifies refetch operations with useRefetchableFragment by leveraging autogenerated queries with the @refetchable directive. Replace the existing refetch logic with the new hook to streamline component updates.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/migration-and-compatibility/relay-hooks-and-legacy-container-apis.md#2025-04-18_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport * as React from 'React';\nimport {graphql, useRefetchableFragment} from 'react-relay';\n\nexport default function CommentBody(props: Props) {\n  const [data, refetch] = useRefetchableFragment(\n    graphql`\n      fragment CommentBody_comment on Comment\n      @refetchable(queryName: \"CommentBodyRefetchQuery\") {\n        body(lang: $lang) {\n          text\n        }\n      }\n    `,\n    props.comment,\n  );\n\n  const handleClick = useCallback(() => {\n    refetch({lang: 'SPANISH'});\n  }, [refetch]);\n\n  return (\n    <>\n      <p>{data.body?.text}</p>\n      <Button\n        onClick={handleClick}>\n        Translate Comment\n      </Button>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: REST Data Fetching with Multiple Requests\nDESCRIPTION: Traditional REST approach for fetching story lists that requires multiple network requests, demonstrating the inefficiency of resource-oriented data retrieval\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/principles-and-architecture/thinking-in-graphql.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nrest.get('/stories').then(stories =>\n  Promise.all(stories.map(story =>\n    rest.get(story.href)\n  ))\n).then(stories => {\n  console.log(stories);\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring babel-plugin-relay in .babelrc\nDESCRIPTION: Configuration to add the Relay plugin to Babel's configuration file, ensuring GraphQL template literals are correctly transformed.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/getting-started/installation-and-setup.md#2025-04-18_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"plugins\": [\n    \"relay\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Client caching with GraphQL\nDESCRIPTION: This code snippet demonstrates a basic approach to client-side caching for GraphQL. It uses a `Map` to store responses based on the query text. If a query has already been executed, it returns the cached response; otherwise, it fetches the data using `fetchGraphQL` and caches it.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/principles-and-architecture/thinking-in-graphql.md#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nvar _cache = new Map();\ngraphql.get = queryText => {\n  if (!_cache.has(queryText)) {\n    _cache.set(queryText, fetchGraphQL(queryText));\n  }\n  return _cache.get(queryText);\n};\n```\n\n----------------------------------------\n\nTITLE: Query Definition Example\nDESCRIPTION: Demonstrates how to define a GraphQL query that composes fragments together.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/getting-started/compiler.md#2025-04-18_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst DictionaryQuery = graphql`\n  query DictionaryQuery {\n    dictionary {\n      ...DictionaryComponent_word\n    }\n  }\n`\n```\n\n----------------------------------------\n\nTITLE: Updating Viewer Name Using readUpdatableQuery in React Component\nDESCRIPTION: React component example demonstrating how to use readUpdatableQuery to modify a viewer's name field. The component uses Relay environment and local updates to modify data from the root Query type, with state management for the new name value.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/guided-tour/updating-data/imperatively-modifying-store-data.md#2025-04-18_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nfunction NameUpdater({ queryRef }: {\n  queryRef: NameUpdater_viewer$key,\n}) {\n  const environment = useRelayEnvironment();\n  const data = useFragment(\n    graphql`\n      fragment NameUpdater_viewer on Viewer {\n        name\n      }\n    `,\n    queryRef\n  );\n  const [newName, setNewName] = useState(data?.viewer?.name);\n  const onSubmit = () => {\n    commitLocalUpdate(environment, store => {\n      const {updatableData} = store.readUpdatableQuery(\n        graphql`\n          viewer {\n            name\n          }\n        `,\n        {}\n      );\n      const viewer = updatableData.viewer;\n      if (viewer != null) {\n        viewer.name = newName;\n      }\n    });\n  };\n\n  // etc\n}\n```\n\n----------------------------------------\n\nTITLE: Defining EntryPointContainer Component in React\nDESCRIPTION: A React component that renders a preloaded EntryPoint. Takes two props: entryPointReference (returned from loadEntryPoint or useEntryPointLoader) and props (additional runtime props passed to the Component).\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/api-reference/entrypoint-apis/entrypoint-container.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nfunction EntryPointContainer({\n  entryPointReference,\n  props,\n}: {\n  +entryPointReference: PreloadedEntryPoint<TEntryPointComponent>,\n  +props: TRuntimeProps,\n}): ReactElement\n```\n\n----------------------------------------\n\nTITLE: Copying Fields From Another Record\nDESCRIPTION: Demonstrates how to mutate the current record by copying the fields over from another record using the `copyFieldsFrom` method of the `RecordProxy`. The method takes the `sourceRecord` of type `RecordProxy`.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v13.0.0/api-reference/relay-runtime/store.md#2025-04-18_snippet_32\n\nLANGUAGE: javascript\nCODE:\n```\nconst record = store.get(id1);\nconst otherRecord = store.get(id2);\nrecord.copyFieldsFrom(otherRecord); // Mutates `record`\n```\n\n----------------------------------------\n\nTITLE: Immutable Cache Structure Example\nDESCRIPTION: Example demonstrating how immutable data structures handle cache updates in a normalized store.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/principles-and-architecture/thinking-in-graphql.md#2025-04-18_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nImmutableMap {\n  1: ImmutableMap // same as before\n  2: ImmutableMap {\n    ... // other fields unchanged\n    photo: 'http://.../photo2.jpg',\n  },\n  3: ImmutableMap // same as before\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a GraphQL Literal in JavaScript\nDESCRIPTION: Demonstrates how to create a GraphQL literal using the graphql tag function. These literals are pre-processed and replaced at build time with a GraphQLTaggedNode containing an AST representation of the contents.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/glossary/glossary.md#2025-04-18_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\ngraphql`...`\n```\n\n----------------------------------------\n\nTITLE: Step 3: Providing Variable Values in useLazyLoadQuery\nDESCRIPTION: Modifying the component to accept a posterID prop and pass it to the GraphQL query, completing the implementation of dynamic data fetching based on the hovered poster.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/tutorial/queries-2.md#2025-04-18_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nexport default function PosterDetailsHovercardContents({\n  // change-line\n  posterID,\n}: {\n  // change-line\n  posterID: string;\n}): React.ReactElement {\n  const data = useLazyLoadQuery<QueryType>(\n    PosterDetailsHovercardContentsQuery,\n    // change-line\n    {posterID},\n  );\n  return <PosterDetailsHovercardContentsBody poster={data.node} />;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Weak Type Field with Description and Deprecation in TypeScript\nDESCRIPTION: This snippet shows how to define a field in a weak type with additional metadata such as a description and deprecation notice using docblock syntax in TypeScript.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/guides/relay-resolvers/defining-fields.md#2025-04-18_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n  * @gqlField\n  * @deprecated Do not use this field anymore\n  * \n  * This is a description. Include more information\n  * about your field here.\n  */\n```\n\n----------------------------------------\n\nTITLE: Defining Disposable Interface in TypeScript\nDESCRIPTION: Interface definition for a Disposable object that contains a dispose method for cleaning up resources. The dispose method takes no parameters and returns void.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/api-reference/types/Disposable.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Disposable {\n  dispose(): void;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining MutationParameters Type in TypeScript\nDESCRIPTION: Specifies the structure of MutationParameters type, which encapsulates response and variable management for GraphQL mutations. This type enables Relay to handle both raw and structured responses properly, offering flexibility for different mutation scenarios.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/api-reference/types/MutationConfig.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ntype MutationParameters = {\n  response: Object,\n  variables: Object,\n  rawResponse?: Object,\n};\n```\n\n----------------------------------------\n\nTITLE: Ancestor @catch Usage in GraphQL Query\nDESCRIPTION: Shows how @catch directive on an ancestor field bubbles up errors from nested fields. The error response includes the full path to the erroring field.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/guides/catch-directive.md#2025-04-18_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\nquery MyQuery {\n  viewer @catch {\n    name\n    age\n  }\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  viewer: {\n    ok: false,\n    errors: [{ path: ['viewer', 'name'] } ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating GraphQL Query for List Selection\nDESCRIPTION: Modified query to use topStories instead of topStory to retrieve multiple stories\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/tutorial/arrays-lists.md#2025-04-18_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\nconst NewsfeedQuery = graphql`\n  query NewsfeedQuery {\n    topStories {\n      ...StoryFragment\n    }\n  }\n`;\n```\n\n----------------------------------------\n\nTITLE: Store Notification Flow Diagram\nDESCRIPTION: ASCII diagram showing how the notify process works to trigger subscription callbacks. Illustrates the flow of notifications to affected subscriptions after store updates.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/principles-and-architecture/runtime-architecture.md#2025-04-18_snippet_3\n\nLANGUAGE: ascii-art\nCODE:\n```\n                        notify\n                           │\n                           ▼\n             ┌───────────────────────────┐\n             │           Store           │\n             │ ┌───────────────────────┐ │\n             │ │     RecordSource      │ │\n             │ │                       │ │\n             │ │┌──────┐┌──────┐┌─────┐│ │\n             │ ││Record││Record││ ... ││ │\n             │ │└──────┘└──────┘└─────┘│ │\n             │ └───────────────────────┘ │\n             │ ┌───────────────────────┐ │\n             │ │     Subscriptions     │ │\n             │ │                       │ │\n             │ │┌──────┐┌──────┐┌─────┐│ │\n             │ ││  Sub.││  Sub.││  ...││ │ <--- affected subscriptions fire\n             │ │└──────┘└──────┘└─────┘│ │\n             │ └───┼───────┼───────┼───┘ │\n             └─────┼───────┼───────┼─────┘\n                   │       │       │\n                   ▼       │       │\n               callback    │       │\n                           ▼       │\n                       callback    │\n                                   ▼\n                               callback\n```\n\n----------------------------------------\n\nTITLE: Running Relay Compiler\nDESCRIPTION: This code snippet shows how to run the Relay Compiler using yarn. The first command executes a single compilation, while the second runs the compiler in watch mode, regenerating artifacts as source code changes.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/guided-tour/workflow.md#2025-04-18_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n```sh\nyarn run relay\n```\n```\n\n----------------------------------------\n\nTITLE: Inconsistent @required Usage in GraphQL Fragment\nDESCRIPTION: Demonstrates an incorrect usage of @required directive in a GraphQL fragment, which will fail to compile due to inconsistent declarations.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/guides/required-directive.md#2025-04-18_snippet_2\n\nLANGUAGE: graphql\nCODE:\n```\nfragment UserInfo on User {\n  job {\n    ... on Actor {\n      certifications\n    }\n    ... on Lawyer {\n      certifications @required(action: LOG)\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Extending Viewer Type with Best Friends Field in GraphQL\nDESCRIPTION: This GraphQL snippet demonstrates how to extend the Viewer type with a new 'best_friends' field, which is a list of User objects. This is foundational for making updates and assignments involving a list of best friends.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/guided-tour/updating-data/imperatively-modifying-linked-fields.md#2025-04-18_snippet_5\n\nLANGUAGE: graphql\nCODE:\n```\nextend type Viewer {\n  # We are now defined a \"best_friends\" field instead of a \"best_friend\" field\n  best_friends: [User!],\n}\n```\n\n----------------------------------------\n\nTITLE: Updating React Component with New Props Type\nDESCRIPTION: Modification of a React component to include new timestamp functionality and updated prop types\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/tutorial/fragments-1.md#2025-04-18_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport Timestamp from './Timestamp';\n\ntype Props = {\n  story: {\n    createdAt: string;\n    ...\n  };\n};\n\nexport default function Story({story}: Props) {\n  return (\n    <Card>\n      <PosterByline poster={story.poster} />\n      <Heading>{story.title}</Heading>\n      <Timestamp time={story.createdAt} />\n      <Image image={story.image} />\n      <StorySummary summary={story.summary} />\n    </Card>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using useQueryLoader to Prefetch Data in Relay Hooks\nDESCRIPTION: Demonstrates using useQueryLoader Hook to load a query ahead of render time, typically integrated with event handlers or routing. The loaded query reference is then passed to components using usePreloadedQuery.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v13.0.0/migration-and-compatibility/relay-hooks-and-legacy-container-apis.md#2025-04-18_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nimport * as React from 'React';\nimport {useQueryLoader} from 'react-relay';\n\n// Import the query defined in the UserPopover component\nimport UserPopoverQuery from '__generated__/UserPopoverQuery.graphql';\n\n// This is *NOT* a real-world example, only used\n// to illustrate usage.\n\nexport default function UserPopoverButton(props) {\n  const [queryRef, loadQuery] = useQueryLoader(UserPopoverQuery)\n\n  const handleClick = useCallback(() => {\n    // Load the query in the event handler, onClick\n    loadQuery({id: props.userID})\n  }, [loadQuery, props.userID]);\n\n  return (\n    <>\n      <Button onClick={handleClick} />\n      {queryRef != null ?\n        <Popover>\n\n          {/* Loading and error states are handled by\n          Suspense and Error Boundaries */}\n          <ErrorBoundary renderError={Error}>\n            <Suspense fallback={<Loading />}>\n\n              {/*Pass the queryRef*/}\n              <UserPopover queryRef={queryRef} />\n\n            </Suspense>\n          </ErrorBoundary>\n        </Popover>\n        : null\n      }\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Defining RelayRoute Type\nDESCRIPTION: Type definition for the route prop that must be a Relay.Route instance or object with required properties.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-classic/Classic-APIReference-RootContainer.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nroute: RelayRoute\n```\n\n----------------------------------------\n\nTITLE: Using @raw_response_type Directive in GraphQL Query\nDESCRIPTION: The @raw_response_type directive is added to queries to generate types covering the optimisticResponse parameter in commitMutation. It helps with type generation for optimistic updates.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/glossary/glossary.md#2025-04-18_snippet_7\n\nLANGUAGE: GraphQL\nCODE:\n```\n@raw_response_type\n```\n\n----------------------------------------\n\nTITLE: Basic Connection Access in JavaScript\nDESCRIPTION: Example showing how to access a basic connection field without using ConnectionHandler.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/api-reference/relay-runtime/store.md#2025-04-18_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\n// The `friends` connection record can be accessed with:\nconst user = store.get(userID);\nconst friends = user && user.getLinkedRecord('friends');\n\n// Access fields on the connection:\nconst edges = friends && friends.getLinkedRecords('edges');\n```\n\n----------------------------------------\n\nTITLE: Using the @arguments directive in GraphQL\nDESCRIPTION: This snippet demonstrates how the `@arguments` directive is used to modify a fragment spread and pass arguments to that fragment. The directive takes arguments which are defined in the corresponding `@argumentDefinitions` directive on the fragment definition.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v13.0.0/glossary/glossary.md#2025-04-18_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\n\"...Story_story @arguments(storyId: \\\"1234\\\")\"\n```\n\n----------------------------------------\n\nTITLE: Updating Cached Data in JavaScript\nDESCRIPTION: This snippet shows how a specific field in the cached data structure can be updated. It demonstrates the minimal change required when updating normalized data.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/principles-and-architecture/thinking-in-graphql.md#2025-04-18_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nMap {\n  ...\n  2: Map {\n    ...\n    photo: 'http://.../photo2.jpg',\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering with useLazyLoadQuery\nDESCRIPTION: This code snippet demonstrates how to fetch and render queries using `useLazyLoadQuery` in a React component with Relay. The snippet handles queries with dynamic variables and options, allowing for interactive updates through a refetch callback.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/guided-tour/refetching/refetching-queries-with-different-data.md#2025-04-18_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\n\n/**\n * MainContent.react.js\n */\n// Fetches and renders the query, given the fetch options\nfunction MainContent(props) {\n  const {refetch, queryArgs} = props;\n  const data = useLazyLoadQuery(\n    graphql`\n      query AppQuery($id: ID!) {\n        user(id: $id) {\n          name\n          friends {\n            count\n          }\n        }\n      }\n    `,\n    queryArgs.variables,\n    queryArgs.options,\n  );\n\n  return (\n    <>\n      <h1>{data.user?.name}</h1>\n      <div>Friends count: {data.user.friends?.count}</div>\n      <Button\n        onClick={() => refetch()}>\n        Fetch latest count\n      </Button>\n    </>\n  );\n}\n\n```\n\n----------------------------------------\n\nTITLE: Relay Compiler Configuration\nDESCRIPTION: Configuration file for the Relay compiler specifying source directory, language, and schema location.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/getting-started/installation-and-setup.md#2025-04-18_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// relay.config.js\nmodule.exports = {\n  // ...\n  // Configuration options accepted by the `relay-compiler` command-line tool and `babel-plugin-relay`.\n  src: \"./src\",\n  language: \"javascript\", // \"javascript\" | \"typescript\" | \"flow\"\n  schema: \"./data/schema.graphql\",\n  excludes: [\"**/node_modules/**\", \"**/__mocks__/**\", \"**/__generated__/**\"],\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing PosterByline Component with Hovercard\nDESCRIPTION: React component implementation showing how to add a hovercard to display additional user information on hover\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/tutorial/queries-2.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexport default function PosterByline({ poster }: Props): React.ReactElement {\n  const data = useFragment(PosterBylineFragment, poster);\n  const hoverRef = useRef(null);\n  return (\n    <div\n      ref={hoverRef}\n      className=\"byline\">\n      <Image image={data.profilePicture} width={60} height={60} className=\"byline__image\" />\n      <div className=\"byline__name\">{data.name}</div>\n      <Hovercard targetRef={hoverRef}>\n        <PosterDetailsHovercardContents />\n      </Hovercard>\n    </div>\n  );\n```\n\n----------------------------------------\n\nTITLE: GraphQL Fragment for Plain Connection\nDESCRIPTION: This GraphQL fragment defines a connection for friends of a user without using the @connection directive. It fetches the first 10 friends and their IDs.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/api-reference/relay-runtime/store.md#2025-04-18_snippet_20\n\nLANGUAGE: graphql\nCODE:\n```\nfragment FriendsFragment on User {\n  friends(first: 10) {\n    edges {\n      node {\n        id\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Relay Compiler script to package.json\nDESCRIPTION: This JavaScript snippet shows how to add a script to your `package.json` file to run the Relay Compiler. This allows you to easily run the compiler using `yarn relay` or `npm run relay`.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v13.0.0/getting-started/installation-and-setup.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n\"\\\"scripts\\\": {\\n  \\\"relay\\\": \\\"relay-compiler\\\"\\n}\"\n```\n\n----------------------------------------\n\nTITLE: Conditional Rendering Component (FbInternalOnly)\nDESCRIPTION: The `<FbInternalOnly>` component renders its children only when the documentation is viewed internally at Facebook. This allows for displaying content specific to Facebook employees.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v13.0.0/getting-started/introduction.md#2025-04-18_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<FbInternalOnly>\n\n- The **[guided tour](./guided-tour/)**, for a comprehensive overview of Relay's different APIs and concepts, and usage examples for different use cases.\n- The **[API reference](./api-reference/relay-environment-provider/)**, for a reference of our APIs including a detailed overview of their inputs and outputs.\n\n</FbInternalOnly>\n```\n\n----------------------------------------\n\nTITLE: Configuring Relay Compiler Artifact Directory in package.json\nDESCRIPTION: This snippet shows how to configure the Relay Compiler to use a single artifact directory in the package.json file. It specifies the 'artifactDirectory' option in the 'relay' configuration.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/guides/type-emission.md#2025-04-18_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  // package.json\n  \"relay\": {\n    \"artifactDirectory\": \"./src/__generated__\",\n    ...\n  },\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Relay Network Layer with subscriptions-transport-ws\nDESCRIPTION: Example demonstrating network layer setup using the legacy subscriptions-transport-ws library for GraphQL subscriptions. Creates a subscription client with reconnection support and converts the observable type to be compatible with Relay.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/guided-tour/updating-data/graphql-subscriptions.md#2025-04-18_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport {\n    ...\n    Network,\n    Observable\n} from 'relay-runtime';\nimport { SubscriptionClient } from 'subscriptions-transport-ws';\n\nconst subscriptionClient = new SubscriptionClient('ws://localhost:3000', {\n  reconnect: true,\n});\n\nconst subscribe = (request, variables) => {\n  const subscribeObservable = subscriptionClient.request({\n    query: request.text,\n    operationName: request.name,\n    variables,\n  });\n  // Important: Convert subscriptions-transport-ws observable type to Relay's\n  return Observable.from(subscribeObservable);\n};\n\nconst network = Network.create(fetchQuery, subscribe);\n```\n\n----------------------------------------\n\nTITLE: Accessing Mutation Props in Relay Classic\nDESCRIPTION: Shows how to access props in a Relay mutation class, including data populated from fragments.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-classic/Classic-Guides-Mutations.md#2025-04-18_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nclass LikeStoryMutation extends Relay.Mutation {\n  static fragments = {\n    story: () => Relay.QL`\n      fragment on Story {\n        id,\n        viewerDoesLike,\n      }\n    `,\n  };\n  getMutation() {\n    return this.props.story.viewerDoesLike\n      ? Relay.QL`mutation {unlikeStory}`\n      : Relay.QL`mutation {likeStory}`;\n  }\n  /* ... */\n}\n```\n\n----------------------------------------\n\nTITLE: GraphQL Connection Fragment with @connection Directive\nDESCRIPTION: Example of a GraphQL fragment using the @connection directive for pagination support.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/api-reference/relay-runtime/store.md#2025-04-18_snippet_23\n\nLANGUAGE: graphql\nCODE:\n```\nfragment FriendsFragment on User {\n  friends(first: 10, orderby: \"firstname\") @connection(\n    key: \"FriendsFragment_friends\",\n  ) {\n    edges {\n      node {\n        id\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic ContactsList Fragment in Relay\nDESCRIPTION: Initial GraphQL fragment definition for fetching contacts list without search functionality.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/tutorial/refetchable-fragments.md#2025-04-18_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\nconst ContactsListFragment = graphql`\n  fragment ContactsListFragment on Viewer {\n    contacts {\n      id\n      ...ContactRowFragment\n    }\n  }\n`;\n```\n\n----------------------------------------\n\nTITLE: Declaring GraphQL Mutation in Relay\nDESCRIPTION: Example of declaring a GraphQL mutation using Relay's graphql tag.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/guided-tour/updating-data/graphql-mutations.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst {graphql} = require('react-relay');\n\nconst feedbackLikeMutation = graphql`\n  mutation FeedbackLikeMutation($input: FeedbackLikeData!) {\n    feedback_like(data: $input) {\n      feedback {\n        id\n        viewer_does_like\n        like_count\n      }\n    }\n  }\n`;\n```\n\n----------------------------------------\n\nTITLE: Decompiled GraphQL Query Object\nDESCRIPTION: This snippet presents the JavaScript object representation of a GraphQL query after it has been processed by the Relay compiler. This object contains information about the query's kind, selections, and fields, which allows Relay to execute the query efficiently.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/tutorial/queries-1.md#2025-04-18_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst MyQuery = {\n  kind: \"query\",\n  selections: [\n    {\n      name: \"viewer\",\n      kind: \"LinkedField\",\n      selections: [\n        name: \"name\",\n        kind: \"ScalarField\",\n      ],\n    }\n  ]\n};\n```\n\n----------------------------------------\n\nTITLE: Defining RecordProxy interface in JavaScript\nDESCRIPTION: This snippet defines the RecordProxy interface, providing methods for mutating records within the Relay Store, such as getting values, setting values, and managing linked records.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/api-reference/relay-runtime/store.md#2025-04-18_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\ninterface RecordProxy {\n  copyFieldsFrom(sourceRecord: RecordProxy): void;\n  getDataID(): string;\n  getLinkedRecord(name: string, arguments?: ?Object): ?RecordProxy;\n  getLinkedRecords(name: string, arguments?: ?Object): ?Array<?RecordProxy>;\n  getOrCreateLinkedRecord(\n    name: string,\n    typeName: string,\n    arguments?: ?Object,\n  ): RecordProxy;\n  getType(): string;\n  getValue(name: string, arguments?: ?Object): mixed;\n  setLinkedRecord(\n    record: RecordProxy,\n    name: string,\n    arguments?: ?Object,\n  ): RecordProxy;\n  setLinkedRecords(\n    records: Array<?RecordProxy>,\n    name: string,\n    arguments?: ?Object,\n  ): RecordProxy;\n  setValue(value: mixed, name: string, arguments?: ?Object): RecordProxy;\n  invalidateRecord(): void;\n}\n```\n\n----------------------------------------\n\nTITLE: GraphQL Schema Definition\nDESCRIPTION: Sample GraphQL schema showing type definitions for a dictionary application.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-experimental/Modern-GraphQLInRelay.md#2025-04-18_snippet_4\n\nLANGUAGE: graphql\nCODE:\n```\nschema {\n  query: Root\n}\n\ntype Root {\n  dictionary: [Word]\n}\n\ntype Word {\n  id: String!\n  definition: WordDefinition\n}\n\ntype WordDefinition {\n  text: String\n  image: String\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Mutation Variables\nDESCRIPTION: Method to retrieve the variables used by the mutation that should be serialized and sent in the GraphQL request.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-classic/Classic-Interfaces-MutationRequest.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ngetVariables(): {[name: string]: mixed}\n```\n\n----------------------------------------\n\nTITLE: Handling GraphQL Connection Responses\nDESCRIPTION: This JSON snippet represents a typical response from a GraphQL query fetching the first ship of the rebels. The JSON structure includes the name of the rebels and the name of the first ship, demonstrating the typical output structure for such queries.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-experimental/GraphQL-ServerSpecification.md#2025-04-18_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"rebels\": {\n    \"name\": \"Alliance to Restore the Republic\",\n    \"ships\": {\n      \"edges\": [\n        {\n          \"node\": {\n            \"name\": \"X-Wing\"\n          }\n        }\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: GraphQL Response Example\nDESCRIPTION: This JSON represents a sample response from a GraphQL server when querying for user data according to the fragment defined above. It includes the user's ID, name, and the city from their address.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/principles-and-architecture/runtime-architecture.md#2025-04-18_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"// Response\n{\n  id: '842472',\n  name: 'Joe',\n  address: {\n    city: 'Seattle',\n  }\n}\"\n```\n\n----------------------------------------\n\nTITLE: Using @relay(mask) Directive in Fragment\nDESCRIPTION: Demonstrates the use of @relay(mask: false) directive to prevent data masking in fragments, allowing direct access to fragment data from the parent.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/api-reference/graphql/graphql-directives.md#2025-04-18_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\ngraphql`\n  fragment Component_internUser on InternUser @relay(mask: false) {\n    id\n    name\n  }\n`;\n```\n\n----------------------------------------\n\nTITLE: GraphQL Query with Fragment\nDESCRIPTION: Example of using a fragment within a query to fetch a user's profile photo.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-classic/Classic-Guides-Routes.md#2025-04-18_snippet_2\n\nLANGUAGE: graphql\nCODE:\n```\nquery UserQuery {\n  user(id: \"123\") {\n    ...UserProfilePhoto,\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Client caching with REST\nDESCRIPTION: This snippet shows a basic implementation of client-side caching for REST APIs. It uses a `Map` to store responses based on URIs. If a URI is already cached, it returns the cached response, otherwise, it fetches the data and caches it.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/principles-and-architecture/thinking-in-graphql.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nvar _cache = new Map();\nrest.get = uri => {\n  if (!_cache.has(uri)) {\n    _cache.set(uri, fetch(uri));\n  }\n  return _cache.get(uri);\n};\n```\n\n----------------------------------------\n\nTITLE: GraphQL Query with Nested Data Structure\nDESCRIPTION: Demonstrates a GraphQL query that traverses relationships, showing how to request information about a person and their location in a single query.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/tutorial/graphql.md#2025-04-18_snippet_2\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  person(id: \"24601\") {\n    name\n    occupation\n    location {\n      name\n      population\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Running the Relay Compiler\nDESCRIPTION: Command to generate compiled artifacts after making edits to application files using the relay script.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/getting-started/installation-and-setup.md#2025-04-18_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\nyarn run relay\n```\n\n----------------------------------------\n\nTITLE: Relay Normalized GraphQL Cache Example\nDESCRIPTION: Demonstration of Relay's normalized caching approach, flattening hierarchical GraphQL responses into a map of unique records\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/principles-and-architecture/thinking-in-graphql.md#2025-04-18_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nMap {\n  1: Map {\n    text: 'Relay is open-source!',\n    author: Link(2),\n  },\n  2: Map {\n    name: 'Jan',\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Single Artifact Directory in package.json\nDESCRIPTION: Configuration in package.json to specify the artifact directory for Relay compiler. This enables strict fragment reference type-information by storing all artifacts in a single directory.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/guides/type-emission.md#2025-04-18_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"relay\": {\n    \"artifactDirectory\": \"./src/__generated__\",\n    ...\n  },\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: JSON Response for Rebels First Ship Query\nDESCRIPTION: This JSON response shows the result of querying the first ship of the Rebels. It returns the name of the ship within the edges and node structure.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v13.0.0/guides/graphql-server-specification.md#2025-04-18_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n\"\"\"\n{\n  \"rebels\": {\n    \"name\": \"Alliance to Restore the Republic\",\n    \"ships\": {\n      \"edges\": [\n        {\n          \"node\": {\n            \"name\": \"X-Wing\"\n          }\n        }\n      ]\n    }\n  }\n}\n\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Defining an Updatable Fragment in Relay (JavaScript)\nDESCRIPTION: Defines an updatable fragment within a Relay component, allowing for reading and writing data in the local store without needing to fetch from the server. Uses the @updatable directive to achieve this functionality.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/tutorial/mutations-updates.md#2025-04-18_snippet_8\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction StoryLikeButton({story}) {\n  ...\n      optimisticUpdater: store => {\n        const fragment = graphql`\n          fragment StoryLikeButton_updatable on Story\n            // color1\n            @updatable\n          {\n            likeCount\n            doesViewerLike\n          }\n        `;\n      },\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Missing Mutation Handlers in Relay\nDESCRIPTION: This code snippet explores how to resolve errors related to missing mutation handlers in a Relay environment. When using a handler provider, ensure that it correctly handles mutations like 'deleteRecord', 'appendEdge', and 'prependEdge'. The snippet indicates the need to import specific handlers from 'relay-runtime' to address such cases.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v13.0.0/debugging/declarative-mutation-directives.md#2025-04-18_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport FbEnvHandlerExample from './fb/FbEnvHandlerExample.md';\n\n// Ensure correct imports for mutation handlers\n// Example of error message encountered:\n// RelayFBHandlerProvider: No handler defined for `deleteRecord`. [Caught in: An uncaught error was thrown inside `RelayObservable`].\n// RelayModernEnvironment: Expected a handler to be provided for handle `deleteRecord`.\n\n// If errors occur, ensure to include the following:\n// import MutationHandlers from 'relay-runtime';\n// Return appropriate handlers:\n// MutationHandlers.DeleteRecordHandler,\n// MutationHandlers.AppendEdgeHandler,\n// MutationHandlers.PrependEdgeHandler.\n```\n\n----------------------------------------\n\nTITLE: Adding @throwOnFieldError to GraphQL Fragment\nDESCRIPTION: Example showing how to add the @throwOnFieldError directive to a GraphQL fragment named MyFragment. When used, this directive will cause Relay to throw an exception if any field errors occur during data reading.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/guides/throw-on-field-error-directive.md#2025-04-18_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nfragment MyFragment on User @throwOnFieldError {\n  id\n  name\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring GC Release Buffer Size in Relay Store\nDESCRIPTION: This code snippet illustrates how to configure the garbage collection release buffer size for the Relay Store. The `gcReleaseBufferSize` option determines how many queries are temporarily retained after being released, increasing the likelihood of data reuse when navigating back to previously visited content. A larger buffer size increases the chance of reusing data, but also increases memory usage.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/guided-tour/reusing-cached-data/presence-of-data.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst store = new Store(source, {gcReleaseBufferSize: 10});\n```\n\n----------------------------------------\n\nTITLE: Declaring GraphQL Subscription\nDESCRIPTION: This GraphQL snippet demonstrates how to declare a subscription for the 'FeedbackLikeSubscription'. The subscription listens for changes to feedback likes and returns the feedback ID and updated like count. It requires input of type 'FeedbackLikeSubscribeData' to set up the subscription.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v13.0.0/guided-tour/updating-data/graphql-subscriptions.md#2025-04-18_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nsubscription FeedbackLikeSubscription($input: FeedbackLikeSubscribeData!) {\n  feedback_like_subscribe(data: $input) {\n    feedback {\n      id\n      like_count\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining RecordSourceSelectorProxy Interface in JavaScript\nDESCRIPTION: Interface definition for RecordSourceSelectorProxy, which represents the store passed to updater functions. It includes methods for creating, deleting, and retrieving records, as well as accessing root fields and invalidating the store.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/api-reference/relay-runtime/store.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ninterface RecordSourceSelectorProxy {\n  create(dataID: string, typeName: string): RecordProxy;\n  delete(dataID: string): void;\n  get(dataID: string): ?RecordProxy;\n  getRoot(): RecordProxy;\n  getRootField(fieldName: string): ?RecordProxy;\n  getPluralRootField(fieldName: string): ?Array<?RecordProxy>;\n  invalidateStore(): void;\n}\n```\n\n----------------------------------------\n\nTITLE: GraphQL query for setting a linked record\nDESCRIPTION: An example GraphQL query that retrieves the viewer nested under the rootField. The query retrieves the id of the viewer.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v13.0.0/api-reference/relay-runtime/store.md#2025-04-18_snippet_34\n\nLANGUAGE: graphql\nCODE:\n```\nrootField {\n  viewer {\n    id\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining GraphQL Schema for Best Friends List\nDESCRIPTION: GraphQL schema extension defining a best_friends field as an array of User types\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/guided-tour/updating-data/imperatively-modifying-linked-fields.md#2025-04-18_snippet_3\n\nLANGUAGE: graphql\nCODE:\n```\nextend type Viewer {\n  # We are now defined a \"best_friends\" field instead of a \"best_friend\" field\n  best_friends: [User!],\n}\n```\n\n----------------------------------------\n\nTITLE: Using @required with Inline Fragments in GraphQL\nDESCRIPTION: Demonstrates how to use @required directive with inline fragments and __typename to generate more specific Flow types.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/guides/required-directive.md#2025-04-18_snippet_7\n\nLANGUAGE: graphql\nCODE:\n```\nfragment MyFrag on Actor {\n  __typename\n  ... on User {\n    name @required(action: THROW)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: React Story Component with Comments Section\nDESCRIPTION: React component implementation showing how to integrate the StoryCommentsSection component into the Story component\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/tutorial/connections-pagination.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport StoryCommentsSection from './StoryCommentsSection';\n\nfunction Story({story}) {\n  const data = useFragment(StoryFragment, story);\n  return (\n    <Card>\n      <Heading>{data.title}</Heading>\n      <PosterByline person={data.poster} />\n      <Timestamp time={data.posted_at} />\n      <Image image={data.image} />\n      <StorySummary summary={data.summary} />\n      <StoryCommentsSection story={data} />\n    </Card>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Composing Fragments with getFragment\nDESCRIPTION: This code demonstrates fragment composition using `getFragment`. The `Parent` component includes the `Child` component's fragment, enabling the parent to fetch data required by the child. This example also shows how to override the initial variables of a child fragment from the parent.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-classic/Classic-APIReference-Container.md#2025-04-18_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n// Parent.js\nRelay.createContainer(Parent, {\n  fragments: {\n    parentFragment: () => Relay.QL`\n      fragment on Foo {\n        id\n        ${Child.getFragment('childFragment')}\n      }\n    `,\n  }\n});\n// Child.js\nRelay.createContainer(Child, {\n  initialVariables: {\n    size: 64,\n  },\n  fragments: {\n    childFragment: () => Relay.QL`\n      fragment on Foo {\n        photo(size: $size) { uri }\n      }\n    `,\n  }\n});\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// Parent.js\nRelay.createContainer(Parent, {\n  fragments: {\n    parentFragment: () => Relay.QL`\n      fragment on Foo {\n        id\n        ${Child.getFragment('childFragment', {size: 128})}\n      }\n    `,\n  }\n});\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst Parent = (props) => {\n  return (\n    <Child\n      childFragment={props.parentFragment}\n      size={128}\n    />;\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Store Publishing Flow Diagram\nDESCRIPTION: ASCII diagram depicting how records are published to the store and how subscriptions are handled. Shows the relationship between RecordSource updates and subscription notifications.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/principles-and-architecture/runtime-architecture.md#2025-04-18_snippet_2\n\nLANGUAGE: ascii-art\nCODE:\n```\n                        publish\n                           │\n                           ▼\n             ┌───────────────────────────┐\n             │           Store           │\n             │ ┌───────────────────────┐ │\n             │ │     RecordSource      │ │\n             │ │                       │ │\n             │ │┌──────┐┌──────┐┌─────┐│ │\n             │ ││Record││Record││ ... ││ │ <--- records are updated\n             │ │└──────┘└──────┘└─────┘│ │\n             │ └───────────────────────┘ │\n             │ ┌───────────────────────┐ │\n             │ │     Subscriptions     │ │\n             │ │                       │ │\n             │ │┌──────┐┌──────┐┌─────┐│ │\n             │ ││ Sub. ││ Sub. ││ ... ││ │ <--- subscriptions do not fire yet\n             │ │└──────┘└──────┘└─────┘│ │\n             │ └───────────────────────┘ │\n             └───────────────────────────┘\n```\n\n----------------------------------------\n\nTITLE: Defining Client Schema Extension in GraphQL\nDESCRIPTION: Example of extending the Query type with a client-side field using GraphQL schema extension syntax.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/api-reference/hooks/use-client-query.md#2025-04-18_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\n# example client extension of the `Query` type\nextend type Query {\n  client_field: String\n}\n```\n\n----------------------------------------\n\nTITLE: Reading an Updatable Fragment in Relay Store with JavaScript\nDESCRIPTION: Demonstrates how to read and update an updatable fragment in the Relay store by using `readUpdatableFragment`, which allows direct modification of fragment fields for store updates.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/api-reference/relay-runtime/store.md#2025-04-18_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nconst fragment = graphql`\n  fragment StoryLikeButton_updatable on Story @updatable {\n    likeCount\n    doesViewerLike\n  }\n`;\nconst {\n  updatableData\n} = store.readUpdatableFragment(\n  fragment,\n  story\n);\nupdatableData.likeCount = updatableData.likeCount + 1;\n```\n\n----------------------------------------\n\nTITLE: Using GraphQL Fragments in React Components with Relay\nDESCRIPTION: This snippet demonstrates how to use the `useFragment` hook from Relay to fetch and render GraphQL fragment data in a React component. The component subscribes to updates in the fragment data and re-renders automatically upon data changes. Required dependencies include React, Relay, and Flow types for GraphQL fragments.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-experimental/RelayHooks-ApiReference.md#2025-04-18_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport type {UserComponent_user$key} from 'UserComponent_user.graphql';\n\nconst React = require('React');\n\nconst {graphql, useFragment} = require('react-relay/hooks');\n\ntype Props = {|  \n  user: UserComponent_user$key,\n|};\n\nfunction UserComponent(props: Props) {\n  const data = useFragment(\n    graphql`\n      fragment UserComponent_user on User {\n        name\n        profile_picture(scale: 2) {\n          uri\n        }\n      }\n    `,\n    props.user,\n  );\n\n  return (\n    <>\n      <h1>{data.name}</h1>\n      <div>\n        <img src={data.profile_picture?.uri} />\n      </div>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Updating local data with commitLocalUpdate in Relay\nDESCRIPTION: Updates the body and title fields of an existing Note record in the Relay Store using commitLocalUpdate.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/guides/client-schema-extensions.md#2025-04-18_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport {commitLocalUpdate} from 'react-relay';\n\nfunction updateUserNote(environment, dataID, body, title) {\n  commitLocalUpdate(environment, store => {\n    const note = store.get(dataID);\n\n    note.setValue(body, 'body');\n    note.setValue(title, 'title')\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Refetching Empire Faction Using Node ID\nDESCRIPTION: This GraphQL query shows how to refetch the Empire faction using its globally unique ID, reinforcing the concept of object identification in Relay.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/guides/graphql-server-specification.md#2025-04-18_snippet_4\n\nLANGUAGE: graphql\nCODE:\n```\nquery EmpireRefetchQuery {\n  node(id: \"RmFjdGlvbjoy\") {\n    id\n    ... on Faction {\n      name\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Querying for First Two Rebel Ships with Cursors\nDESCRIPTION: This GraphQL query fetches the first two ships of the Rebels faction along with their cursors, demonstrating how to paginate through connections in Relay.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/guides/graphql-server-specification.md#2025-04-18_snippet_6\n\nLANGUAGE: graphql\nCODE:\n```\nquery MoreRebelShipsQuery {\n  rebels {\n    name\n    ships(first: 2) {\n      edges {\n        cursor\n        node {\n          name\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Spreading ImageFragment in PosterByline Component\nDESCRIPTION: Demonstrates spreading ImageFragment into PosterBylineFragment for profile picture handling.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/tutorial/fragments-1.md#2025-04-18_snippet_7\n\nLANGUAGE: graphql\nCODE:\n```\nconst PosterBylineFragment = graphql`\n  fragment PosterBylineFragment on Actor {\n    name\n    profilePicture {\n      ...ImageFragment\n    }\n  }\n`;\n```\n\n----------------------------------------\n\nTITLE: Initial React Component with Hard-coded Data\nDESCRIPTION: Example of a React Newsfeed component using placeholder data before implementing GraphQL queries.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/tutorial/queries-1.md#2025-04-18_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nexport default function Newsfeed() {\n  const story = {\n    title: \"Placeholder Story\",\n    summary:\n      \"Placeholder data, to be replaced with data fetched via GraphQL\",\n    poster: {\n      name: \"Placeholder Person\",\n      profilePicture: {\n        url: \"/assets/cat_avatar.png\",\n      },\n    },\n    thumbnail: {\n      url: \"/assets/placeholder.jpeg\",\n    },\n  };\n  return (\n    <div className=\"newsfeed\">\n      <Story story={story} />\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Documentation Components\nDESCRIPTION: Module imports for documentation components including rating widget and internal/external content controls.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/debugging/relay-devtools.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport DocsRating from '@site/src/core/DocsRating';\nimport {FbInternalOnly, OssOnly} from 'docusaurus-plugin-internaldocs-fb/internal';\n```\n\n----------------------------------------\n\nTITLE: Configuring Relay Persisted Queries in package.json\nDESCRIPTION: Configuration setup in package.json for enabling persisted queries with Relay compiler, specifying persistence URL and parameters.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/guides/persisted-queries.md#2025-04-18_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"scripts\": {\n    \"relay\": \"relay-compiler\",\n    \"relay-persisting\": \"node relayLocalPersisting.js\"\n  },\n  \"relay\": {\n    \"src\": \"./src\",\n    \"schema\": \"./schema.graphql\",\n    \"persistConfig\": {\n      \"url\": \"http://localhost:2999\",\n      \"params\": {}\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Illustrating SkipRedundantNodeTransform in GraphQL\nDESCRIPTION: Example of how the SkipRedundantNodeTransform eliminates complex cases of field duplication, such as when a field is fetched both unconditionally and conditionally.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/principles-and-architecture/compiler-architecture.md#2025-04-18_snippet_2\n\nLANGUAGE: graphql\nCODE:\n```\n# before: `id` processed up to 2x\nfoo {\n  bar {\n    id\n  }\n  ... on FooType @include(if: $cond) { # can't be flattened due to conditional\n    id # but this field is guaranteed to be fetched regardless\n  }\n}\n\n# after: `id` processed at most once\nfoo {\n  bar {\n    id\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: GraphQL Schema Definition\nDESCRIPTION: Example of a GraphQL schema file defining types and relationships for a dictionary API.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/guides/compiler.md#2025-04-18_snippet_2\n\nLANGUAGE: graphql\nCODE:\n```\nschema {\n  query: Root\n}\n\ntype Root {\n  dictionary: [Word]\n}\n\ntype Word {\n  id: String!\n  definition: WordDefinition\n}\n\ntype WordDefinition {\n  text: String\n  image: String\n}\n```\n\n----------------------------------------\n\nTITLE: Running Relay Compiler in a JavaScript Project\nDESCRIPTION: Command to execute the Relay Compiler to analyze GraphQL literals in JavaScript code and generate runtime artifacts. This should be run whenever developing Relay components with Fragments or Queries.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v13.0.0/guided-tour/workflow.md#2025-04-18_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nyarn run relay\n```\n\n----------------------------------------\n\nTITLE: Querying Filtered Connection in GraphQL\nDESCRIPTION: Demonstrates how to query a connection field with arguments for sorting and filtering in GraphQL.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/guided-tour/list-data/refetching-connections.md#2025-04-18_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nfragment UserFragment on User {\n  name\n  friends(order_by: DATE_ADDED, search_term: \"Alice\", first: 10) {\n    edges {\n      node {\n        name\n        age\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Pending States with suspenseSentinel() in Relay Resolver\nDESCRIPTION: This snippet illustrates how to use `suspenseSentinel()` within a live resolver to handle pending states when data is not immediately available. The `myIp` resolver returns a `LiveState` object with a `read` function that checks the state of `ipLoadObject`. If the status is \"LOADING\", it returns `suspenseSentinel()` to indicate that the data is not yet available.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/api-reference/relay-resolvers/runtime-functions.md#2025-04-18_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport {suspenseSentinel} from 'relay-runtime';\n\n/**\n * @RelayResolver Query.myIp: String\n * @live\n */\nexport function myIp(): LiveState<string> {\n  return {\n    read: () => {\n      const state = store.getState();\n      const ipLoadObject = state.ip;\n      if (ipLoadObject.status === \"LOADING\") {\n        return suspenseSentinel();\n      }\n      return state.ip;\n    },\n    subscribe: (callback) => {\n      return store.subscribe(callback);\n    },\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Defining GraphQL Fragment for User Data\nDESCRIPTION: GraphQL fragment definition specifying the data requirements for the ProfilePicture component.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-classic/Classic-Guides-Containers.md#2025-04-18_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\nRelay.QL`\n  # This fragment only applies to objects of type 'User'.\n  fragment on User {\n    # Set the 'size' argument to a GraphQL variable named '$size' so that we can\n    # later change its value via the slider.\n    profilePhoto(size: $size) {\n      # Get the appropriate URI for the given size, for example on a CDN.\n      uri,\n    },\n  }\n`\n```\n\n----------------------------------------\n\nTITLE: Defining StoryLikeButton Fragment in GraphQL\nDESCRIPTION: This GraphQL fragment defines the data requirements for the StoryLikeButton component. It includes the story's id, like count, and whether the viewer likes the story.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/tutorial/mutations-updates.md#2025-04-18_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\nconst StoryLikeButtonFragment = graphql`\n  fragment StoryLikeButtonFragment on Story {\n    id\n    likeCount\n    doesViewerLike\n  }\n`;\n```\n\n----------------------------------------\n\nTITLE: Fetching Query Data with fetchQuery in Relay\nDESCRIPTION: Demonstrates how to use fetchQuery to execute a GraphQL query outside of React components. It shows how to set up the environment, define the query, and subscribe to the observable returned by fetchQuery.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/api-reference/relay-runtime/fetch-query.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// You should prefer passing an environment that was returned from useRelayEnvironment()\nconst MyEnvironment = require('MyEnvironment');\nconst {fetchQuery} = require('react-relay');\n\nfetchQuery(\n  environment,\n  graphql`\n    query AppQuery($id: ID!) {\n      user(id: $id) {\n        name\n      }\n    }\n  `,\n  {id: 4},\n)\n.subscribe({\n  start: () => {...},\n  complete: () => {...},\n  error: (error) => {...},\n  next: (data) => {...}\n});\n```\n\n----------------------------------------\n\nTITLE: Chaining @required Directives for Nested Field Access\nDESCRIPTION: Example showing how to chain @required directives to make deeply nested fields accessible after a single null check, with proper React implementation using useFragment.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/guides/required-directive.md#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst user = useFragment(graphql`\n  fragment MyUser on User {\n    name @required(action: LOG)\n    profile_picture @required(action: LOG) {\n      url @required(action: LOG)\n    }\n  }`, key);\n if(user == null) {\n   return null;\n }\n return <img src={user.profile_picture.url} alt={user.name} />\n```\n\n----------------------------------------\n\nTITLE: React Component Using GraphQL Fetching with useEffect\nDESCRIPTION: React component that fetches a repository name from GitHub's GraphQL API using the fetchGraphQL helper function and the useEffect hook.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/getting-started/step-by-step-guide.md#2025-04-18_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// your-app-name/src/App.js\nimport React from 'react';\nimport './App.css';\nimport fetchGraphQL from './fetchGraphQL';\n\nconst { useState, useEffect } = React;\n\nfunction App() {\n  // We'll load the name of a repository, initially setting it to null\n  const [name, setName] = useState(null);\n\n  // When the component mounts we'll fetch a repository name\n  useEffect(() => {\n    let isMounted = true;\n    fetchGraphQL(`\n      query RepositoryNameQuery {\n        # feel free to change owner/name here\n        repository(owner: \"facebook\" name: \"relay\") {\n          name\n        }\n      }\n    `).then(response => {\n      // Avoid updating state if the component unmounted before the fetch completes\n      if (!isMounted) {\n        return;\n      }\n      const data = response.data;\n      setName(data.repository.name);\n    }).catch(error => {\n      console.error(error);\n    });\n\n    return () => {\n      isMounted = false;\n    };\n  }, []);\n\n  // Render \"Loading\" until the query completes\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <p>\n          {name != null ? `Repository: ${name}` : \"Loading\"}\n        </p>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Example GraphQL Query for Fetching Stories\nDESCRIPTION: A GraphQL query to fetch stories with their id, text, and likeCount fields.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/principles-and-architecture/thinking-in-graphql.md#2025-04-18_snippet_4\n\nLANGUAGE: graphql\nCODE:\n```\nquery { stories { id, text, likeCount } }\n```\n\n----------------------------------------\n\nTITLE: Defining GraphQL Comment Creation Mutation in Relay\nDESCRIPTION: Defines a GraphQL mutation using the Relay runtime for creating comments. The mutation accepts a CommentCreateInput parameter and returns the typename of the created comment.\nSOURCE: https://github.com/facebook/relay/blob/main/packages/babel-plugin-relay/__tests__/fixtures/mutation.txt#2025-04-18_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst {graphql} = require('relay-runtime');\n\nconst testMutation = graphql`\n  mutation TestMutation($input: CommentCreateInput!) {\n    commentCreate(input: $input) {\n      __typename\n    }\n  }\n`;\n```\n\n----------------------------------------\n\nTITLE: Logging Errors with recoverableViolation in JavaScript\nDESCRIPTION: Example showing how to use recoverableViolation with a project logger name for error reporting.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/guides/required-directive.md#2025-04-18_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nrecoverableViolation('My error string', 'my_logger_project');\n```\n\n----------------------------------------\n\nTITLE: Testing Relay Pagination Components\nDESCRIPTION: Illustrates how to test pagination components using usePaginationFragment, including asserting behavior when performing pagination operations like load more and refetch.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/guides/testing-relay-components.md#2025-04-18_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n// Pagination Example\ntest('`Pagination` Container', async () => {\n  const environment = createMockEnvironment();\n  const TestRenderer = () => {\n    const data = useLazyLoadQuery(\n      graphql`\n        query TestQuery @relay_test_operation {\n          myConnection: node(id: \"test-id\") {\n            connection {\n              # Spread the pagination fragment you want to test here\n              ...MyConnectionFragment\n            }\n          }\n        }\n      `,\n      {},\n    );\n    return <MyPaginationContainer connection={data.myConnection.connection} />\n  };\n\n  const renderer = render(\n    <RelayEnvironmentProvider environment={environment}>\n      <Suspense fallback=\"Loading...\">\n        <TestRenderer />\n      </Suspense>\n    </RelayEnvironmentProvider>\n  );\n\n  // Wrapping in act will ensure that components\n  // are fully updated to their final state.\n  act(() => {\n    environment.mock.resolveMostRecentOperation(operation =>\n      MockPayloadGenerator.generate(operation, {\n        ID(_, generateId) {\n          // Why we're doing this?\n          // To make sure that we will generate a different set of ID\n          // for elements on first page and the second page.\n          return `first-page-id-${generateId()}`;\n        },\n        PageInfo() {\n          return {\n            has_next_page: true,\n          };\n        },\n      }),\n    );\n  });\n\n  // Let's find a `loadMore` button and click on it to initiate pagination request, for example\n  const loadMore = await renderer.findByTestId('loadMore');\n  expect(loadMore.props.disabled).toBe(false);\n  loadMore.props.onClick();\n\n  // Wrapping in act will ensure that components\n  // are fully updated to their final state.\n  act(() => {\n    environment.mock.resolveMostRecentOperation(operation =>\n      MockPayloadGenerator.generate(operation, {\n        ID(_, generateId) {\n          // See, the second page IDs will be different\n          return `second-page-id-${generateId()}`;\n        },\n        PageInfo() {\n          return {\n            // And the button should be disabled, now. Probably.\n            has_next_page: false,\n          };\n        },\n      }),\n    );\n  });\n\n  expect(loadMore.props.disabled).toBe(true);\n});\n```\n\n----------------------------------------\n\nTITLE: Querying Rebels by ID with GraphQL\nDESCRIPTION: Executes a GraphQL query to retrieve the ID and name of the Rebels faction, demonstrating the capability to query specific objects by type and ID.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/guides/graphql-server-specification.md#2025-04-18_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\nquery RebelsQuery { rebels { id name } }\n```\n\n----------------------------------------\n\nTITLE: Updating GraphQL Fragment with ID Field\nDESCRIPTION: Example showing how to add an ID field to a GraphQL fragment and pass it as a prop to a child component.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/tutorial/queries-2.md#2025-04-18_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nconst PosterBylineFragment = graphql`\n  fragment PosterBylineFragment on Actor {\n    // change-line\n    id\n    ...\n  }\n`;\n\nexport default function PosterByline({ poster }: Props): React.ReactElement {\n  ...\n  return (\n   ...\n    <PosterDetailsHovercardContents\n      // change-line\n      posterID={data.id}\n    />\n   ...\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: GraphQL Query with Fragment Spread Example\nDESCRIPTION: Shows how to create a GraphQL query that includes a fragment spread on a User type. This example demonstrates proper fragment integration within a query structure.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v13.0.0/glossary/glossary.md#2025-04-18_snippet_4\n\nLANGUAGE: graphql\nCODE:\n```\nquery ComponentQuery {\n  viewer {\n    account_user {\n      ...Component_name\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Relay in package.json\nDESCRIPTION: Package.json configuration for Relay compiler setup, including scripts to run the compiler before starting or building the app.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/getting-started/step-by-step-guide.md#2025-04-18_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n// your-app-name/package.json\n{\n  ...\n  \"scripts\": {\n    ...\n    \"start\": \"yarn run relay && react-scripts start\",\n    \"build\": \"yarn run relay && react-scripts build\",\n    \"relay\": \"yarn run relay-compiler\"\n    ...\n  },\n  \"relay\": {\n    \"src\": \"./src/\",\n    \"schema\": \"./schema.graphql\",\n    \"language\": \"javascript\"\n  }\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Sidebar Component to App in React\nDESCRIPTION: This snippet shows how to import and add the Sidebar component to the main App component in a React application using Relay.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/tutorial/refetchable-fragments.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Sidebar from './Sidebar';\n\nexport default function App(): React.ReactElement {\n  return (\n    <RelayEnvironment>\n      <React.Suspense fallback={<LoadingSpinner />}>\n        <div className=\"app\">\n          <Newsfeed />\n          <Sidebar />\n        </div>\n      </React.Suspense>\n    </RelayEnvironment>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Query with Runtime Arguments\nDESCRIPTION: GraphQL query showing how to consume a resolver field that requires arguments. Demonstrates the syntax for passing a salutation argument to the greet field.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/guides/relay-resolvers/field-arguments.md#2025-04-18_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\nquery MyQuery($salutation: String!) {\n  me {\n    greet(salutation: $salutation)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Record Data ID in Relay Store\nDESCRIPTION: Shows how to retrieve the data ID of a record in the Relay store using the getDataID method of RecordProxy.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/api-reference/relay-runtime/store.md#2025-04-18_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nconst id = record.getDataID();\n```\n\n----------------------------------------\n\nTITLE: Creating a LiveState Object from a Redux Selector\nDESCRIPTION: This snippet shows how to create a helper function that converts a Redux selector into a LiveState object. It includes optimizations to prevent unnecessary updates when the selected value hasn't changed.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/guides/relay-resolvers/live-fields.md#2025-04-18_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\ntype Selector<T> = (state: State) => T;\n\nfunction selectorAsLiveState<T>(selector: Selector<T>): LiveState<T> {\n  let currentValue = selector(store.getState());\n  return {\n    read: () => currentValue,\n    subscribe: (cb) => {\n      return store.subscribe(() => {\n        const newValue = selector(store.getState());\n        if (newValue === currentValue) {\n          return;\n        }\n        currentValue = newValue;\n        cb();\n      });\n      return unsubscribe;\n    },\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Visualizing Query Data Fetching Flow in Relay\nDESCRIPTION: Diagram illustrating how a query is fetched from the server and normalized into Records that are stored in a RecordSource. The process involves fetching the query data and then normalizing the response into individual records.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/principles-and-architecture/runtime-architecture.md#2025-04-18_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n               ┌───────────────────────┐\n               │         Query         │\n               └───────────────────────┘\n                           │\n                           ▼\n                                             ┌ ─ ─ ─ ┐\n                         fetch ◀────────────▶ Server\n                                             └ ─ ─ ─ ┘\n                           │\n                     ┌─────┴───────┐\n                     ▼             ▼\n               ┌──────────┐  ┌──────────┐\n               │  Query   │  │ Response │\n               └──────────┘  └──────────┘\n                     │             │\n                     └─────┬───────┘\n                           │\n                           ▼\n                       normalize\n                           │\n                           ▼\n               ┌───────────────────────┐\n               │     RecordSource      │\n               │                       │\n               │┌──────┐┌──────┐┌─────┐│\n               ││Record││Record││ ... ││\n               │└──────┘└──────┘└─────┘│\n               └───────────────────────┘\n```\n\n----------------------------------------\n\nTITLE: Using Relay with babel-plugin-macros\nDESCRIPTION: This JavaScript code snippet illustrates how to use Relay with `babel-plugin-macros`. This is an alternative to using `babel-plugin-relay` directly. `babel-plugin-macros` allows importing and using macros directly in your code.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/getting-started/installation-and-setup.md#2025-04-18_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst graphql = require('babel-plugin-relay/macro');\n```\n\n----------------------------------------\n\nTITLE: Example GraphQL Schema Definition\nDESCRIPTION: An example GraphQL schema file that defines types for a dictionary application. The schema includes Root, Word, and WordDefinition types with their respective fields.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v13.0.0/guides/compiler.md#2025-04-18_snippet_2\n\nLANGUAGE: graphql\nCODE:\n```\nschema {\n  query: Root\n}\n\ntype Root {\n  dictionary: [Word]\n}\n\ntype Word {\n  id: String!\n  definition: WordDefinition\n}\n\ntype WordDefinition {\n  text: String\n  image: String\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Babel for Relay\nDESCRIPTION: Babel configuration to enable the Relay plugin for GraphQL template literal transformation\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-experimental/Introduction-InstallationAndSetup.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"plugins\": [\n    \"relay\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Checking for More Rebel Ships\nDESCRIPTION: This query attempts to fetch more ships after the last known ship, demonstrating how to handle reaching the end of a connection.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/guides/graphql-server-specification.md#2025-04-18_snippet_8\n\nLANGUAGE: graphql\nCODE:\n```\nquery RebelsQuery {\n  rebels {\n    name\n    ships(first: 4 after: \"YXJyYXljb25uZWN0aW9uOjQ=\") {\n      edges {\n        cursor\n        node {\n          name\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Local Persisted Queries in package.json\nDESCRIPTION: Configuration for generating a local JSON file containing a map of operation IDs to full operation texts, specifying the file path and hashing algorithm.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/guides/persisted-queries.md#2025-04-18_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"scripts\": {\n    \"relay\": \"relay-compiler\"\n  },\n  \"relay\": {\n    \"src\": \"./src\",\n    \"schema\": \"./schema.graphql\",\n    \"persistConfig\": {\n      \"file\": \"./persisted_queries.json\",\n      \"algorithm\": \"MD5\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: JSON Response for Next Three Rebel Ships Query\nDESCRIPTION: This JSON response shows the result of querying the next three ships after the specified cursor, including their names and cursors.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v13.0.0/guides/graphql-server-specification.md#2025-04-18_snippet_14\n\nLANGUAGE: json\nCODE:\n```\n\"\"\"\n{\n  \"rebels\": {\n    \"name\": \"Alliance to Restore the Republic\",\n    \"ships\": {\n      \"edges\": [\n        {\n          \"cursor\": \"YXJyYXljb25uZWN0aW9uOjI=\",\n          \"node\": {\n            \"name\": \"A-Wing\"\n          }\n        },\n        {\n          \"cursor\": \"YXJyYXljb25uZWN0aW9uOjM=\",\n          \"node\": {\n            \"name\": \"Millenium Falcon\"\n          }\n        },\n        {\n          \"cursor\": \"YXJyYXljb25uZWN0aW9uOjQ=\",\n          \"node\": {\n            \"name\": \"Home One\"\n          }\n        }\n      ]\n    }\n  }\n}\n\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Normalized Cache Structure in JavaScript\nDESCRIPTION: Demonstrates how Relay would cache the query response in a normalized form using a Map data structure.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/principles-and-architecture/thinking-in-graphql.md#2025-04-18_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nMap {\n  1: Map {\n    text: 'Relay is open-source!',\n    author: Link(2),\n  },\n  2: Map {\n    name: 'Jan',\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Using @inline Directive with readInlineData\nDESCRIPTION: Example demonstrating how to use the @inline directive to read data outside of React's render phase using readInlineData.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v13.0.0/api-reference/graphql/graphql-directives.md#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport {graphql, readInlineData} from 'react-relay';\n\n// non-React function called from React\nfunction processItemData(itemRef) {\n  const item = readInlineData(graphql`\n    fragment processItemData_item on Item @inline {\n      title\n      price\n      creator {\n        name\n      }\n    }\n  `, itemRef);\n  sendToThirdPartyApi({\n    title: item.title,\n    price: item.price,\n    creatorName: item.creator.name\n  });\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nexport default function MyComponent({item}) {\n  function handleClick() {\n    processItemData(item);\n  }\n\n  const data = useFragment(\n    graphql`\n      fragment MyComponent_item on Item {\n        ...processItemData_item\n        title\n      }\n    `,\n    item\n  );\n\n  return (\n    <button onClick={handleClick}>Process {item.title}</button>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Derived Resolver with Fragment Arguments\nDESCRIPTION: Example of a derived resolver that uses argument definitions in its root fragment. Shows how to define and pass arguments through fragments using @argumentDefinitions directive.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/guides/relay-resolvers/field-arguments.md#2025-04-18_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n/**\n * @RelayResolver User.fancyGreeting: String\n * @rootFragment UserFancyGreetingFragment\n */\nexport function fancyGreeting(key: UserFancyGreetingFragment$key): string {\n  const user = readFragment(graphql`\n    fragment UserFancyGreetingFragment on User @argumentDefinitions(\n      salutation: {type: \"String\"},\n    ) {\n      name\n      greet(salutation: $salutation)\n    }\n  `, key);\n  return `${user.name} says ${user.greet}`;\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating FlattenTransform in GraphQL\nDESCRIPTION: Example of how the FlattenTransform reduces extraneous levels of indirection in a GraphQL query by inlining fields from anonymous fragments that match the parent type.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/principles-and-architecture/compiler-architecture.md#2025-04-18_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\n# before: `id` is processed twice\nfoo { # type FooType\n   id\n   ... on FooType { # matches the parent type, so this is extraneous\n     id\n   }\n }\n\n # after: `id` is processed once\n foo {\n   id\n }\n```\n\n----------------------------------------\n\nTITLE: Defining GraphQL Schema for Relay Server\nDESCRIPTION: Defines a schema with interface `Node` and types such as `Faction`, `Ship`, `ShipConnection`, `ShipEdge`, and `PageInfo`. The schema includes a root `Query` type for fetching `Faction` and using globally unique IDs for refetching objects.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/guides/graphql-server-specification.md#2025-04-18_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\ninterface Node { id: ID! } type Faction implements Node { id: ID! name: String ships: ShipConnection } type Ship implements Node { id: ID! name: String } type ShipConnection { edges: [ShipEdge] pageInfo: PageInfo! } type ShipEdge { cursor: String! node: Ship } type PageInfo { hasNextPage: Boolean! hasPreviousPage: Boolean! startCursor: String endCursor: String } type Query { rebels: Faction empire: Faction node(id: ID!): Node }\n```\n\n----------------------------------------\n\nTITLE: Node Query Example in Relay\nDESCRIPTION: Alternative query structure to fetch the same user data using the node interface.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/guided-tour/reusing-cached-data/filling-in-missing-data.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nquery NodeQuery {\n  node(id: 4) {\n    ... on User {\n      name\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Normalized Cache Structure\nDESCRIPTION: Example showing how Relay implements a normalized cache using a Map structure.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/principles-and-architecture/thinking-in-graphql.md#2025-04-18_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nMap {\n  1: Map {\n    text: 'Relay is open-source!',\n    author: Link(2),\n  },\n  2: Map {\n    name: 'Jan',\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Marking Fields as Deprecated with @deprecated Tag\nDESCRIPTION: Shows how to mark a field as deprecated using the @deprecated tag, which can include a reason. Deprecated fields receive special treatment in the Relay VSCode extension.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/api-reference/relay-resolvers/docblock-format.md#2025-04-18_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\n/**\n * @RelayResolver User.name: String\n * @deprecated Use `fullName` instead.\n */\nexport function name(user: UserModel): string {\n  return user.name;\n}\n```\n\n----------------------------------------\n\nTITLE: Running Relay Compiler via npm\nDESCRIPTION: Command to run the Relay compiler using the npm script defined in package.json.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/getting-started/compiler.md#2025-04-18_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nnpm run relay\n```\n\n----------------------------------------\n\nTITLE: GraphQL Connection Type Introspection Response\nDESCRIPTION: JSON response to the introspection query for a connection type, showing the required 'pageInfo' and 'edges' fields.\nSOURCE: https://github.com/facebook/relay/blob/main/website/spec/Connections.md#2025-04-18_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"__type\": {\n      \"fields\": [\n        {\n          \"name\": \"pageInfo\",\n          \"type\": {\n            \"name\": null,\n            \"kind\": \"NON_NULL\",\n            \"ofType\": {\n              \"name\": \"PageInfo\",\n              \"kind\": \"OBJECT\"\n            }\n          }\n        },\n        {\n          \"name\": \"edges\",\n          \"type\": {\n            \"name\": null,\n            \"kind\": \"LIST\",\n            \"ofType\": {\n              \"name\": \"ExampleEdge\",\n              \"kind\": \"OBJECT\"\n            }\n          }\n        }\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Story with Author Query\nDESCRIPTION: Example GraphQL query showing nested data fetching for a story and its author.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/principles-and-architecture/thinking-in-graphql.md#2025-04-18_snippet_6\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  story(id: \"1\") {\n    text,\n    author {\n      name\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Preparing Fragment Variables in Relay Classic Mutations\nDESCRIPTION: Demonstrates preparing variables for mutation fragments based on previous variables and runtime environment.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-classic/Classic-Guides-Mutations.md#2025-04-18_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nclass RentMovieMutation extends Relay.Mutation {\n  static initialVariables = {\n    format: 'hd',\n    lang: 'en-CA',\n  };\n  static prepareVariables = (prevVariables) => {\n    var overrideVariables = {};\n    if (navigator.language) {\n      overrideVariables.lang = navigator.language;\n    }\n    var formatPreference = localStorage.getItem('formatPreference');\n    if (formatPreference) {\n      overrideVariables.format = formatPreference;\n    }\n    return {...prevVariables, ...overrideVariables};\n  };\n  static fragments = {\n    movie: () => Relay.QL`\n      fragment on Movie {\n        posterImage(lang: $lang) { url },\n        trailerVideo(format: $format, lang: $lang) { url },\n      }\n    `,\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Chaining @required Directives in a Fragment\nDESCRIPTION: This example showcases how `@required` directives can be chained to ensure that a deeply nested field is accessible after a single null check. If any of the fields `name`, `profile_picture`, or `url` are null, the entire fragment will be considered null. The code also handles the case where the fragment's root is nullable due to the use of `@required`.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v13.0.0/guides/required-directive.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst user = useFragment(graphql`\n  fragment MyUser on User {\n    name @required(action: LOG)\n    profile_picture @required(action: LOG) {\n      url @required(action: LOG)\n    }\n  }`, key);\n if(user == null) {\n   return null;\n }\n return <img src={user.profile_picture.url} alt={user.name} />\n```\n\n----------------------------------------\n\nTITLE: Creating Local Data with commitLocalUpdate in Relay\nDESCRIPTION: Demonstrates how to create a new Note record and add it to the User's list of notes using commitLocalUpdate.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/guides/client-schema-extensions.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nfunction createUserNote(environment) {\n  commitLocalUpdate(environment, store => {\n    const user = store.getRoot().getLinkedRecord('viewer');\n    const userNoteRecords = user.getLinkedRecords('notes') || [];\n\n    // Create a unique ID.\n    const dataID = `client:Note:${tempID++}`;\n\n    //Create a new note record.\n    const newNoteRecord = store.create(dataID, 'Note');\n\n    // Add the record to the user's list of notes.\n    user.setLinkedRecords([...userNoteRecords, newNoteRecord], 'notes');\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Dependencies for Relay\nDESCRIPTION: Imports necessary components for the Relay guide. 'DocsRating' is used for rating the documentation, and 'OssOnly' and 'FbInternalOnly' are imported from the internal Docusaurus plugin.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/guided-tour/updating-data/introduction.md#2025-04-18_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport DocsRating from '@site/src/core/DocsRating';\nimport {OssOnly, FbInternalOnly} from 'docusaurus-plugin-internaldocs-fb/internal';\n```\n\n----------------------------------------\n\nTITLE: Defining ResolverErrorEvent Type Structure in TypeScript\nDESCRIPTION: TypeScript type definition for the ResolverErrorEvent object that is passed to the relayFieldLogger when a resolver throws an error, containing information about the error context.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/guides/relay-resolvers/errors.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype ResolverErrorEvent = {\n  kind: 'relay_resolver.error',\n  // The name of the fragment/query in which the field was read\n  owner: string,\n  // The path from the owner root to the field which threw the error\n  fieldPath: string,\n  // The error thrown by the resolver\n  error: Error,\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering with useLazyLoadQuery in Relay\nDESCRIPTION: This snippet shows how to render data using the `useLazyLoadQuery` hook, consuming the `queryArgs` (including variables and options like `fetchKey`) provided by the parent component. The hook fetches the data based on these arguments. The results of the query are then rendered in the component.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/guided-tour/refetching/refetching-queries-with-different-data.md#2025-04-18_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * MainContent.react.js\n */\n// Fetches and renders the query, given the fetch options\nfunction MainContent(props) {\n  const {refetch, queryArgs} = props;\n  const data = useLazyLoadQuery(\n    graphql`\n      query AppQuery($id: ID!) {\n        user(id: $id) {\n          name\n          friends {\n            count\n          }\n        }\n      `,\n    queryArgs.variables,\n    queryArgs.options,\n  );\n\n  return (\n    <>\n      <h1>{data.user?.name}</h1>\n      <div>Friends count: {data.user.friends?.count}</div>\n      <Button\n        onClick={() => refetch()}>\n        Fetch latest count\n      </Button>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Response Caching for GraphQL in JavaScript\nDESCRIPTION: Shows a basic approach to response caching for GraphQL queries, using the query text as a cache key.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/principles-and-architecture/thinking-in-graphql.md#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nvar _cache = new Map();\ngraphql.get = queryText => {\n  if (!_cache.has(queryText)) {\n    _cache.set(queryText, fetchGraphQL(queryText));\n  }\n  return _cache.get(queryText);\n};\n```\n\n----------------------------------------\n\nTITLE: Component Fragment Definitions\nDESCRIPTION: Example of defining multiple related GraphQL fragments in a component file.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/guides/compiler.md#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst DictionaryWordFragment = graphql`\n  fragment DictionaryComponent_word on Word {\n    id\n    definition {\n      ...DictionaryComponent_definition\n    }\n  }\n`\n\nconst DictionaryDefinitionFragment = graphql`\n  fragment DictionaryComponent_definition on WordDefinition {\n    text\n    image\n  }\n`\n```\n\n----------------------------------------\n\nTITLE: User Schema Extension for Selection State\nDESCRIPTION: GraphQL schema extension adding a boolean selection state field to User type\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/guided-tour/updating-data/imperatively-modifying-store-data.md#2025-04-18_snippet_2\n\nLANGUAGE: graphql\nCODE:\n```\nextend type User {\n  is_selected: Boolean\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Relay Compiler Error with Suggestion for Typo\nDESCRIPTION: This code snippet illustrates how the Relay compiler provides a helpful suggestion when it detects a potential typo in a field name. It shows the error message along with a suggestion for a similar, existing field name.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/error-reference/unknown-field.md#2025-04-18_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\nError in the project `some_project`: ✖︎ The type `UserInfo` has no field `mail`. Did you mean `email`?\n```\n\n----------------------------------------\n\nTITLE: Adding StoryCommentsSection to Story Component\nDESCRIPTION: Code modification showing how to import and add a StoryCommentsSection component to the Story component. This change enables the display of comments for each story.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/tutorial/connections-pagination.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// change-line\nimport StoryCommentsSection from './StoryCommentsSection';\n\nfunction Story({story}) {\n  const data = useFragment(StoryFragment, story);\n  return (\n    <Card>\n      <Heading>{data.title}</Heading>\n      <PosterByline person={data.poster} />\n      <Timestamp time={data.posted_at} />\n      <Image image={data.image} />\n      <StorySummary summary={data.summary} />\n      // change-line\n      <StoryCommentsSection story={data} />\n    </Card>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing a Connection in JavaScript\nDESCRIPTION: Demonstrates how to access a connection using ConnectionHandler.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/api-reference/relay-runtime/store.md#2025-04-18_snippet_29\n\nLANGUAGE: javascript\nCODE:\n```\nimport {ConnectionHandler} from 'relay-runtime';\n\n// The `friends` connection record can be accessed with:\nconst user = store.get(userID);\nconst friends = ConnectionHandler.getConnection(\n user,                        // parent record\n 'FriendsFragment_friends',   // connection key\n {orderby: 'firstname'}       // 'filters' that is used to identify the connection\n);\n// Access fields on the connection:\nconst edges = friends.getLinkedRecords('edges');\n```\n\n----------------------------------------\n\nTITLE: Nested GraphQL Query Example\nDESCRIPTION: Shows a GraphQL query that navigates through connected nodes, retrieving related information like a person's city. This requires a GraphQL backend with a defined schema. Inputs include the nested GraphQL query, and a JSON object with requested nested data is expected as output.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/tutorial/graphql.md#2025-04-18_snippet_2\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  person(id: \"24601\") {\n    name\n    occupation\n    location {\n      name\n      population\n    }\n  }\n}\n\nResponse:\n{\n  \"person\": {\n    \"name\": \"Jean Valjean\",\n    \"occupation\": \"Mayor\",\n    \"location\": {\n      \"name\": \"Montreuil-sur-Mer\",\n      \"population\": 1935\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Fragment Arguments with @argumentDefinitions Directive\nDESCRIPTION: Shows how to define local arguments that a fragment can accept using the @argumentDefinitions directive. This allows fragments to be reusable with different parameter values when used across the application.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/glossary/glossary.md#2025-04-18_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\nfragment Store_story on Story\n  @argumentDefinitions(storyId: {type: \"ID!\"}) {\n  # etc\n}\n```\n\n----------------------------------------\n\nTITLE: Mapping Over List Data in React Component\nDESCRIPTION: React component implementation showing how to map over an array of story data to render multiple Story components.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/tutorial/arrays-lists.md#2025-04-18_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport default function Newsfeed({}) {\n  const data = useLazyLoadQuery<NewsfeedQueryType>(NewsfeedQuery, {});\n  // change-line\n  const stories = data.topStories;\n  return (\n    <div className=\"newsfeed\">\n      // change-line\n      {stories.map(story => <Story story={story} />)}\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Assigning to Interface from Guaranteed Source in Relay\nDESCRIPTION: Illustrates assigning a field with an interface type ('Actor') from a source guaranteed to implement that interface using GraphQL in Relay. It involves handling fragments and validating types while maintaining type safety.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/guided-tour/updating-data/imperatively-modifying-linked-fields.md#2025-04-18_snippet_8\n\nLANGUAGE: js\nCODE:\n```\ngraphql`\n  fragment Foo_actor on Actor @assignable {\n    __typename\n  }\n`;\n\nconst data = useFragment(graphql`\n  fragment Foo_query on Query {\n    user {\n      ...Foo_actor\n    }\n    viewer {\n      actor {\n        ...Foo_actor\n      }\n    }\n  }\n`, queryRef);\n\nconst environment = useRelayEnvironment();\nconst onClick = () => {\n  commitLocalUpdate(environment, store => {\n    const {updatableData} = store.readUpdatableQuery(\n      graphql`\n        query FooUpdatableQuery @updatable {\n          viewer {\n            actor {\n              ...Foo_actor\n            }\n          }\n        }\n      `,\n      {}\n    );\n\n    if (updatableData.viewer != null && data.user != null) {\n      updatableData.viewer = data.user;\n    }\n\n    if (updatableData.viewer != null && data.viewer?.actor != null) {\n      updatableData.viewer = data.viewer.actor;\n    }\n  });\n};\n```\n\n----------------------------------------\n\nTITLE: Updated Cached GraphQL Data with Immutable Map\nDESCRIPTION: This code modifies a cached photo URL within an Immutable Map structure, illustrating how changes propagate in an immutable data structure. It shows that while specific records are updated, others remain unchanged.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v13.0.0/principles-and-architecture/thinking-in-graphql.md#2025-04-18_snippet_11\n\nLANGUAGE: pseudocode\nCODE:\n```\nImmutableMap {\n  1: ImmutableMap // same as before\n  2: ImmutableMap {\n    ... // other fields unchanged\n    photo: 'http://.../photo2.jpg',\n  },\n  3: ImmutableMap // same as before\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing AssignBestFriendButton Component in React and Relay\nDESCRIPTION: React component that uses Relay fragments and local updates to add a user to the viewer's list of best friends. Demonstrates proper usage of assignable fragments and updatable queries.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/guided-tour/updating-data/imperatively-modifying-linked-fields.md#2025-04-18_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// AssignBestFriendButton.react.js\nimport type {AssignBestFriendButton_user$key} from 'AssignBestFriendButton_user.graphql';\nimport type {AssignBestFriendButton_viewer$key} from 'AssignBestFriendButton_viewer';\n\nimport type {RecordSourceSelectorProxy} from 'react-relay';\n\nconst {commitLocalUpdate, useFragment, useRelayEnvironment} = require('react-relay');\n\ngraphql`\n  fragment AssignBestFriendButton_assignable_user on User @assignable {\n    __typename\n  }\n`;\n\nexport default function AssignBestFriendButton({\n  someTypeRef: AssignBestFriendButton_someType$key,\n  viewerFragmentRef: AssignBestFriendButton_viewer$key,\n}) {\n  const data = useFragment(graphql`\n    fragment AssignBestFriendButton_someType on SomeType {\n      user {\n        name\n        ...AssignableBestFriendButton_assignable_user\n      }\n    }\n  `, someTypeRef);\n\n  const viewer = useFragment(graphql`\n    fragment AssignBestFriendButton_viewer on Viewer {\n      best_friends {\n        # since viewer.best_friends appears in the right hand side of the assignment\n        # (i.e. updatableData.viewer.best_friends = viewer.best_friends.concat(...)),\n        # the best_friends field must contain the correct assignable fragment spread\n        ...AssignableBestFriendButton_assignable_user\n      }\n    }\n  `, viewerRef);\n\n  const environment = useRelayEnvironment();\n  const onClick = () => {\n    commitLocalUpdate(\n      environment,\n      (store: RecordSourceSelectorProxy) => {\n        const {updatableData} = store.readUpdatableQuery(\n            graphql`\n              query AssignBestFriendButtonUpdatableQuery\n              @updatable {\n                viewer {\n                  best_friends {\n                    ...AssignableBestFriendButton_assignable_user\n                  }\n                }\n              }\n            `,\n            {}\n          );\n\n        if (data.user != null && updatableData.viewer != null && viewer.best_friends != null) {\n          updatableData.viewer.best_friends = [\n            ...viewer.best_friends,\n            data.user,\n          ];\n        }\n      }\n    );\n  };\n\n  return (<button onClick={onClick}>\n    Add {user.name ?? 'someone with no name'} to my list of best friends!\n  </button>);\n}\n```\n\n----------------------------------------\n\nTITLE: Example Query Response Structure\nDESCRIPTION: Sample JSON response structure showing the shape of data returned by the GraphQL query.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/tutorial/queries-1.md#2025-04-18_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topStory\": {\n    \"title\": \"Local Yak Named Yak of the Year\",\n    \"summary\": \"The annual Yak of the Year awards ceremony ...\",\n    \"poster\": {\n      \"name\": \"Baller Bovine Board\",\n      \"profilePicture\": {\n        \"url\": \"/images/baller_bovine_board.jpg\"\n      }\n    },\n    \"thumbnail\": {\n      \"url\": \"/images/max_the_yak.jpg\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing RelayEnvironmentProvider in JavaScript\nDESCRIPTION: Sets up the Relay environment at the root of the application using RelayEnvironmentProvider. Ensure to replace MyAppEnvironment with the actual environment configuration of the app. This component should wrap the main App component.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/migration-and-compatibility/relay-hooks-and-legacy-container-apis.md#2025-04-18_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n<RelayEnvironmentProvider environment={MyAppEnvironment}>\n  <App />\n</RelayEnvironmentProvider>\n```\n\n----------------------------------------\n\nTITLE: Converting Fragment Container to useFragment in Relay Hooks\nDESCRIPTION: Example of converting a Fragment Container to useFragment Hook which provides a more direct way to consume a GraphQL fragment in a React component.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v13.0.0/migration-and-compatibility/relay-hooks-and-legacy-container-apis.md#2025-04-18_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\nimport * as React from 'React';\nimport {graphql, useFragment} from 'react-relay';\n\nexport default function UserComponent(props: Props) {\n  const data = useFragment(\n    graphql`\n      fragment UserComponent_user on User {\n        name\n        profile_picture(scale: $scale) {\n          uri\n        }\n      }\n    `,\n    props.user,\n  );\n\n  return (\n    <>\n      <h1>{data.name}</h1>\n      <div>\n        <img src={data.profile_picture?.uri} />\n      </div>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Relay Hooks\nDESCRIPTION: Imports the `graphql` and `useFragment` hooks from the `react-relay` module.  This allows you to use Relay Hooks in your React components. Alternatively, importing from `react-relay/hooks` reduces bundle size when only using hooks.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/migration-and-compatibility/upgrading-to-relay-hooks.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport {graphql, useFragment} from 'react-relay'; // or 'react-relay/hooks'\n\n// ...\n```\n\n----------------------------------------\n\nTITLE: Using @relay(mask) Directive in Fragment\nDESCRIPTION: Example showing how to use @relay(mask: false) directive to prevent data masking in fragments, though this is not recommended.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v13.0.0/api-reference/graphql/graphql-directives.md#2025-04-18_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\ngraphql`\n  fragment Component_internUser on InternUser @relay(mask: false) {\n    id\n    name\n  }\n`;\n```\n\n----------------------------------------\n\nTITLE: Implementing Manual Data Fetching with Relay and React\nDESCRIPTION: Example implementation showing how to avoid Suspense fallbacks when fetching data in Relay by using fetchQuery and managing loading states manually. The code demonstrates handling query refreshes, managing loading states, and updating the UI without hiding content behind Suspense fallbacks.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/guided-tour/refetching/refreshing-queries.md#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * App.react.js\n */\nimport type {AppQuery as AppQueryType} from 'AppQuery.graphql';\n\nconst AppQuery = require('__generated__/AppQuery.graphql');\n\nfunction App(props: Props) {\n  const variables = {id: '4'}\n  const environment = useRelayEnvironment();\n  const [refreshedQueryOptions, setRefreshedQueryOptions] = useState(null);\n  const [isRefreshing, setIsRefreshing] = useState(false)\n\n  const refresh = useCallback(() => {\n    if (isRefreshing) { return; }\n    setIsRefreshing(true);\n\n    // fetchQuery will fetch the query and write\n    // the data to the Relay store. This will ensure\n    // that when we re-render, the data is already\n    // cached and we don't suspend\n    fetchQuery(environment, AppQuery, variables)\n      .subscribe({\n        complete: () => {\n          setIsRefreshing(false);\n\n          // *After* the query has been fetched, we update\n          // our state to re-render with the new fetchKey\n          // and fetchPolicy.\n          // At this point the data for the query should\n          // be cached, so we use the 'store-only'\n          // fetchPolicy to avoid suspending.\n          setRefreshedQueryOptions(prev => ({\n            fetchKey: (prev?.fetchKey ?? 0) + 1,\n            fetchPolicy: 'store-only',\n          }));\n        }\n        error: () => {\n          setIsRefreshing(false);\n        }\n      });\n  }, [/* ... */]);\n\n  return (\n    <React.Suspense fallback=\"Loading query...\">\n      <MainContent\n        isRefreshing={isRefreshing}\n        refresh={refresh}\n        queryOptions={refreshedQueryOptions ?? {}}\n        variables={variables}\n      />\n    </React.Suspense>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Running Relay Compiler\nDESCRIPTION: Commands for running the Relay compiler, including watch mode.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/getting-started/installation-and-setup.md#2025-04-18_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\nyarn run relay\n\nyarn run relay --watch\n```\n\n----------------------------------------\n\nTITLE: Reading Fragment Data in Relay Resolver (TypeScript)\nDESCRIPTION: Demonstrates how to use readFragment() function in a Relay Resolver to derive a User's full name from firstName and lastName fields. This function is specifically for use in Relay Resolvers and will throw an error if used elsewhere.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/api-reference/relay-resolvers/runtime-functions.md#2025-04-18_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport {readFragment} from \"relay-runtime\";\n\n/**\n * @RelayResolver User.fullName: String\n * @rootFragment UserFullNameFragment\n */\nexport function fullName(key: UserFullNameFragment$key): string {\n  const user = readFragment(graphql`\n    fragment UserFullNameFragment on User {\n      firstName\n      lastName\n    }\n  `, key);\n  return `${user.firstName} ${user.lastName}`;\n}\n```\n\n----------------------------------------\n\nTITLE: Relay Query Data Typing with TypeScript\nDESCRIPTION: This code snippet illustrates how Relay emits type information for the data returned by a query using TypeScript. The `ExampleQuery$data` type, imported from a generated file, represents the shape of the data returned by the `useLazyLoadQuery` hook, with readonly properties including a potentially undefined `artist` field. This enables type-safe access to the query results with TypeScript.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v13.0.0/guides/type-emission.md#2025-04-18_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\n/**\n * export type ExampleQuery$variables = {\n *   readonly artistID: string\n * }\n * export type ExampleQuery$data = {\n *   readonly artist?: {\n *     readonly name?: string\n *   }\n * }\n * export type ExampleQuery = {\n *   readonly variables: ExampleQuery$variables\n *   readonly response: ExampleQuery$data\n * }\n */\n\nimport { ExampleQuery } from \"__generated__/ExampleQuery.graphql\"\n\n// data is of type ExampleQuery$data\nconst data = useLazyLoadQuery<ExampleQuery>(\n  graphql`\n    query ExampleQuery($artistID: ID!) {\n      artist(id: $artistID) {\n        name\n      }\n    }\n  `,\n  {artistID: 'banksy'},\n);\n\nreturn props.artist && <div>{props.artist.name} is great!</div>\n```\n\n----------------------------------------\n\nTITLE: Adding Refetchable Directive to Pagination Fragment\nDESCRIPTION: Shows how to make a fragment refetchable by adding the @refetchable directive with a queryName parameter.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/tutorial/connections-pagination.md#2025-04-18_snippet_5\n\nLANGUAGE: graphql\nCODE:\n```\nconst StoryCommentsSectionFragment = graphql`\n  fragment StoryCommentsSectionFragment on Story\n    @refetchable(queryName: \"StoryCommentsSectionPaginationQuery\")\n    @argumentDefinitions(\n    ... as before\n`;\n```\n\n----------------------------------------\n\nTITLE: Extending Viewer Type with Best Friend Field in GraphQL\nDESCRIPTION: Defines a schema extension to add a best_friend field of type User to the Viewer type.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/guided-tour/updating-data/imperatively-modifying-linked-fields.md#2025-04-18_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nextend type Viewer {\n  best_friend: User,\n}\n```\n\n----------------------------------------\n\nTITLE: Normalized Representation Example\nDESCRIPTION: This JavaScript code represents how Relay normalizes the GraphQL response into its internal cache (RecordSource). It demonstrates how the data is structured as a mapping of data IDs to Record instances, with references between related records.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/principles-and-architecture/runtime-architecture.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n\"// Normalized Representation\nRecordSource {\n  '842472': Record {\n    __id: '842472',\n    __typename: 'User', // the type is known statically from the fragment\n    id: '842472',\n    name: 'Joe',\n    address: {__ref: 'client:842472:address'}, // link to another record\n  },\n  'client:842472:address': Record {\n    // A client ID, derived from the path from parent & parent's ID\n    __id: 'client:842472:address',\n    __typename: 'Address',\n    city: 'Seattle',\n  }\n}\"\n```\n\n----------------------------------------\n\nTITLE: Declaring RelayContainer Component Type\nDESCRIPTION: Type definition for the Component prop that must be a valid RelayContainer.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-classic/Classic-APIReference-RootContainer.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nComponent: RelayContainer\n```\n\n----------------------------------------\n\nTITLE: Creating a fetchGraphQL Helper Function for GitHub API\nDESCRIPTION: JavaScript utility function to fetch data from GitHub's GraphQL API using the fetch API with proper authentication and request formatting.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/getting-started/step-by-step-guide.md#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// your-app-name/src/fetchGraphQL.js\nasync function fetchGraphQL(text, variables) {\n  const REACT_APP_GITHUB_AUTH_TOKEN = process.env.REACT_APP_GITHUB_AUTH_TOKEN;\n\n  // Fetch data from GitHub's GraphQL API:\n  const response = await fetch('https://api.github.com/graphql', {\n    method: 'POST',\n    headers: {\n      Authorization: `bearer ${REACT_APP_GITHUB_AUTH_TOKEN}`,\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify({\n      query: text,\n      variables,\n    }),\n  });\n\n  // Get the response as JSON\n  return await response.json();\n}\n\nexport default fetchGraphQL;\n```\n\n----------------------------------------\n\nTITLE: Modifying Cached Author Data\nDESCRIPTION: This snippet shows an example of how the photo field of a cached author might be updated in response to external changes. The focus is on the impact of the change on the cached structure without affecting the overall cache.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-experimental/PrinciplesAndArchitecture-ThinkingInGraphQL.md#2025-04-18_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nMap {\n  ...\n  2: Map {\n    ...\n    photo: 'http://.../photo2.jpg',\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Relay Route Object Definition\nDESCRIPTION: Example of defining a Relay route as an object literal with queries and parameters.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-classic/Classic-Guides-Routes.md#2025-04-18_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nvar profileRoute = {\n  queries: {\n    user: () => Relay.QL`\n      query { user(id: $userID) }\n    `,\n  },\n  params: {\n    userID: '123',\n  },\n  name: 'ProfileRoute',\n};\n```\n\n----------------------------------------\n\nTITLE: Defining MutationConfig Type in TypeScript\nDESCRIPTION: Defines the MutationConfig type with mandatory and optional fields for GraphQL mutations in a Relay setup. This includes caching options, completion handlers, and response management. The type captures the structure and semantics required for configuring a mutation call effectively.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/api-reference/types/MutationConfig.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype MutationConfig<TMutationConfig: MutationParameters> = {\n  cacheConfig?: CacheConfig,\n  mutation: GraphQLTaggedNode,\n  onError?: (Error) => void,\n  onCompleted?: ($ElementType<TMutationConfig, 'response'>) => void,\n  onUnsubscribe?: () => void,\n  optimisticResponse?: any,\n  optimisticUpdater?: SelectorStoreUpdater,\n  updater?: SelectorStoreUpdater,\n  uploadables?: UploadableMap,\n  variables: $ElementType<TMutationConfig, 'variables'>,\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring package.json for Relay Compiler\nDESCRIPTION: Update package.json scripts to run Relay compiler during start and build processes, with configuration for source and schema paths\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v13.0.0/getting-started/step-by-step-guide.md#2025-04-18_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"scripts\": {\n    \"start\": \"yarn run relay && react-scripts start\",\n    \"build\": \"yarn run relay && react-scripts build\",\n    \"relay\": \"yarn run relay-compiler $@\"\n  },\n  \"relay\": {\n    \"src\": \"./src/\",\n    \"schema\": \"./schema.graphql\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Story Component with New Field in TypeScript\nDESCRIPTION: Modification of Story component to display timestamp using the newly added createdAt field\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/tutorial/fragments-1.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport Timestamp from './Timestamp';\n\ntype Props = {\n  story: {\n    createdAt: string;\n    ...\n  };\n};\n\nexport default function Story({story}: Props) {\n  return (\n    <Card>\n      <PosterByline poster={story.poster} />\n      <Heading>{story.title}</Heading>\n      <Timestamp time={story.createdAt} />\n      <Image image={story.thumbnail} />\n      <StorySummary summary={story.summary} />\n    </Card>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a GraphQL Query with Fragment References\nDESCRIPTION: Example of a GraphQL query that references a fragment defined in another file. The Relay Compiler will ensure that all referenced fragments are included in the generated artifacts.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/guides/compiler.md#2025-04-18_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst DictionaryQuery = graphql`\n  query DictionaryQuery {\n    dictionary {\n      ...DictionaryComponent_word\n    }\n  }\n`\n```\n\n----------------------------------------\n\nTITLE: Defining getOptimisticConfigs Method in Relay Mutation\nDESCRIPTION: Shows the signature of the getOptimisticConfigs() method for Relay mutations. This method is implemented when the mutation configuration for optimistic updates needs to differ from the server response configuration.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-classic/Classic-APIReference-Mutation.md#2025-04-18_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\ngetOptimisticConfigs(): Array<{[key: string]: mixed}>\n```\n\n----------------------------------------\n\nTITLE: Implementing Loading State in Relay Root Container\nDESCRIPTION: Example demonstrating how to use the renderLoading callback prop to display a loading state while data is being fetched.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-classic/Classic-Guides-RootContainer.md#2025-04-18_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Relay.RootContainer\n  Component={ProfilePicture}\n  route={profileRoute}\n  renderLoading={function() {\n    return <div>Loading...</div>;\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Installing Relay Compiler\nDESCRIPTION: Command to install the Relay Compiler as a development dependency, which is required for Relay's ahead-of-time compilation.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/getting-started/installation-and-setup.md#2025-04-18_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nyarn add --dev relay-compiler\n```\n\n----------------------------------------\n\nTITLE: Defining GraphQL Fragment for Story Component\nDESCRIPTION: GraphQL fragment definition that specifies the data requirements for a Story component, including text content and author details.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-experimental/PrinciplesAndArchitecture-ThinkingInRelay.md#2025-04-18_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nfragment Story_story on Story {\n  text\n  author {\n    name\n    photo\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using QueryRenderer for User Popover Component\nDESCRIPTION: Example of a React component implementing a user popover with the legacy QueryRenderer approach.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/migration-and-compatibility/relay-hooks-and-legacy-container-apis.md#2025-04-18_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport * as React from 'React';\nimport {graphql, QueryRenderer} from 'react-relay';\n\nexport default function UserPopover() {\n  return (\n    <QueryRenderer\n      environment={MyAppEnvironment}\n      query={graphql`\n        query UserPopoverQuery($id: ID!) {\n          user(id: $id) {\n            name\n          }\n        }\n      `}\n      variables={{id: 4}}\n      render={(props, error) => {\n        if (error) {\n          return <Error />;\n        }\n        if (!props) {\n          return <Loading />;\n        }\n        return <h1>{props.user?.name}</h1>\n      }}\n    />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: GraphQL Fragment with @connection and @required Caveats\nDESCRIPTION: This GraphQL fragment shows a limitation when using `@required` and `@connection` directives together. Relay automatically inserts additional fields into connections, and these fields won't be generated with the `@required` directive.  This can lead to inconsistencies and cause the Relay compiler to produce an error if `@required` is used on connection node or direct child fields. In such cases, it is advised to remove `@required` on those fields.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/guides/required-directive.md#2025-04-18_snippet_5\n\nLANGUAGE: graphql\nCODE:\n```\nfragment FriendsList on User @refetchable(queryName: \"FriendsListQuery\") {\n  friends(after: $cursor, first: $count) @connection(key: \"FriendsList_friends\") {\n    edges {\n      node @required(action: LOG) {\n        job @required(action: LOG) {\n          title @required(action: LOG)\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Relay Compiler - Basic Command\nDESCRIPTION: Command to execute the Relay Compiler to generate artifacts from GraphQL literals in JavaScript code. These artifacts are used by Relay at runtime in the browser.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/guided-tour/workflow.md#2025-04-18_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nyarn run relay\n```\n\n----------------------------------------\n\nTITLE: Dictionary Query Definition\nDESCRIPTION: Example of defining a GraphQL query that composes fragments.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/guides/compiler.md#2025-04-18_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst DictionaryQuery = graphql`\n  query DictionaryQuery {\n    dictionary {\n      ...DictionaryComponent_word\n    }\n  }\n`\n```\n\n----------------------------------------\n\nTITLE: Adding Declarative Connection Handler for Prepending Edge\nDESCRIPTION: This code snippet modifies the GraphQL mutation definition to include a `$connections` variable and the `@prependEdge` directive.  The `@prependEdge` directive tells Relay to prepend the newly created `commentEdge` to the specified connections.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/tutorial/mutations-updates.md#2025-04-18_snippet_14\n\nLANGUAGE: graphql\nCODE:\n```\n  mutation StoryCommentsComposerPostMutation(\n    $id: ID!,\n    $text: String!,\n    // change-line\n    $connections: [ID!]!,\n  ) {\n    postStoryComment(id: $id, text: $text) {\n      commentEdge\n        // change-line\n        @prependEdge(connections: $connections)\n      {\n        node {\n          id\n          text\n        }\n      }\n    }\n  }\n```\n\n----------------------------------------\n\nTITLE: Querying for Rebels' ID and Name\nDESCRIPTION: This GraphQL query fetches the ID and name of the Rebels faction, demonstrating how to retrieve globally unique IDs for objects.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/guides/graphql-server-specification.md#2025-04-18_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\nquery RebelsQuery {\n  rebels {\n    id\n    name\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Semantic Non-Null Fields in Relay Components with throwOnFieldError\nDESCRIPTION: Example of a React component using Relay's useFragment hook with the @throwOnFieldError directive, which enables fields with @semanticNonNull to be typed as non-nullable in the generated TypeScript/Flow types.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/guides/semantic-nullability.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport type {UserComponent_user$key} from 'UserComponent_user.graphql';\n\nconst React = require('React');\nconst {graphql, useFragment} = require('react-relay');\n\ntype Props = {\n  user: UserComponent_user$key,\n};\n\nfunction UserComponent(props: Props) {\n  const user = useFragment(\n    graphql`\n      fragment UserComponent_user on User @throwOnFieldError {\n        name # Will be typed as non-nullable\n      }\n    `,\n    props.user,\n  );\n\n  return <div>{user.name}</div>\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Relay Compiler Error for Unknown Field\nDESCRIPTION: This code snippet shows an example of a Relay compiler error message when an unknown field is encountered. It demonstrates how the compiler identifies the project, type, and the specific field that is not found.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/error-reference/unknown-field.md#2025-04-18_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## [ERROR] Error in the project `some_project`: ✖︎ The type `Some_Type` has no field `some_unknown_field`.\n```\n\n----------------------------------------\n\nTITLE: Moving Future Components to Source Directory\nDESCRIPTION: Shell command to move components from the future directory to src/components\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/tutorial/queries-2.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmv future/* src/components\n```\n\n----------------------------------------\n\nTITLE: Updating Field Example with Typesafe Updaters\nDESCRIPTION: Example showing how to update a field using typesafe updaters in Relay. This demonstrates the basic syntax for updating a field value using the updatable proxy pattern.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/guided-tour/updating-data/typesafe-updaters-faq.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nupdatableData.name = \"Godzilla\"\n```\n\n----------------------------------------\n\nTITLE: Updating GraphQL Fragment with ID Field\nDESCRIPTION: Example showing how to modify a GraphQL fragment to include an ID field and pass it as a prop to a child component\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/tutorial/queries-2.md#2025-04-18_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nconst PosterBylineFragment = graphql`\n  fragment PosterBylineFragment on Actor {\n    // change-line\n    id\n    ...\n  }\n`;\n\nexport default function PosterByline({ poster }: Props): React.ReactElement {\n  ...\n  return (\n   ...\n    <PosterDetailsHovercardContents\n      // change-line\n      posterID={data.id}\n    />\n   ...\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using create Method in Relay Store\nDESCRIPTION: The `create` method creates a new record in the Relay store with a specified `dataID` and `typeName`, returning a `RecordProxy` to interact with the newly created record.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/api-reference/relay-runtime/store.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst record = store.create(dataID, 'Todo');\n```\n\n----------------------------------------\n\nTITLE: Selecting a List in GraphQL Fragment - Step 1\nDESCRIPTION: Modifying a Relay query to use 'topStories' instead of 'topStory' to retrieve multiple stories instead of just one.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/tutorial/arrays-lists.md#2025-04-18_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nconst NewsfeedQuery = graphql`\n  query NewsfeedQuery {\n    // change-line\n    topStories {\n      ...StoryFragment\n    }\n  }\n`;\n```\n\n----------------------------------------\n\nTITLE: Avoiding Suspense When Refetching Queries in Relay\nDESCRIPTION: Example showing how to refetch a query while avoiding Suspense fallbacks. This approach uses fetchQuery to manually manage loading states, ensuring the UI doesn't hide already rendered content during refetching.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/guided-tour/refetching/refetching-queries-with-different-data.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * App.react.js\n */\nconst AppQuery = require('__generated__/AppQuery.graphql');\n\nfunction App(props: Props) {\n  const environment = useRelayEnvironment();\n  const [queryRef, loadQuery] = useQueryLoader(\n    AppQuery,\n    props.appQueryRef /* initial query ref */\n  );\n  const [isRefetching, setIsRefetching] = useState(false)\n\n  const refetch = useCallback(() => {\n    if (isRefetching) { return; }\n    setIsRefetching(true);\n\n    // fetchQuery will fetch the query and write\n    // the data to the Relay store. This will ensure\n    // that when we re-render, the data is already\n    // cached and we don't suspend\n    fetchQuery(environment, AppQuery, variables)\n      .subscribe({\n        complete: () => {\n          setIsRefetching(false);\n\n          // *After* the query has been fetched, we call\n          // loadQuery again to re-render with a new\n          // queryRef.\n          // At this point the data for the query should\n          // be cached, so we use the 'store-only'\n          // fetchPolicy to avoid suspending.\n          loadQuery({id: 'different-id'}, {fetchPolicy: 'store-only'});\n        },\n        error: () => {\n          setIsRefetching(false);\n        }\n      });\n  }, [/* ... */]);\n\n  return (\n    <React.Suspense fallback=\"Loading query...\">\n      <MainContent\n        isRefetching={isRefetching}\n        refetch={refetch}\n        queryRef={queryRef}\n      />\n    </React.Suspense>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Fragment Container Component in React-Relay\nDESCRIPTION: Example of a React component using the legacy Fragment Container pattern to consume GraphQL fragment data.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/migration-and-compatibility/relay-hooks-and-legacy-container-apis.md#2025-04-18_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\nimport * as React from 'React';\nimport {graphql, createFragmentContainer} from 'react-relay';\n\nfunction UserComponent(props: Props) {\n  const user = props.user;\n  return (\n    <>\n      <h1>{user.name}</h1>\n      <div>\n        <img src={user.profile_picture?.uri} />\n      </div>\n    </>\n  );\n}\n\nexport default createFragmentContainer(UserComponent, {\n  user: graphql`\n    fragment UserComponent_user on User {\n      name\n      age\n      profile_picture(scale: 2) {\n        uri\n      }\n    }\n  `,\n});\n```\n\n----------------------------------------\n\nTITLE: Displaying Internal Facebook Suspense Transitions Component\nDESCRIPTION: Internal Facebook-specific component for displaying Suspense integration with Relay transitions.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/guided-tour/rendering/loading-states.md#2025-04-18_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\n<FbInternalOnly>\n  <FbSuspenseInRelayTransitions />\n</FbInternalOnly>\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Record in JavaScript\nDESCRIPTION: Shows how to retrieve a record from the Relay store using its dataID.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/api-reference/relay-runtime/store.md#2025-04-18_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\nconst record = store.get(dataID);\n```\n\n----------------------------------------\n\nTITLE: Generated Relay TypeScript Type Definition\nDESCRIPTION: Example of an automatically generated TypeScript type definition for a Relay GraphQL query, showing the structure of the query response data.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/tutorial/queries-1.md#2025-04-18_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nexport type NewsfeedQuery$data = {\n  readonly topStory: {\n    readonly poster: {\n      readonly name: string | null;\n      readonly profilePicture: {\n        readonly url: string;\n      } | null;\n    };\n    readonly summary: string | null;\n    readonly thumbnail: {\n      readonly url: string;\n    } | null;\n    readonly title: string;\n  } | null;\n};\n```\n\n----------------------------------------\n\nTITLE: Using pendingVariables in RelayContainer (JavaScript)\nDESCRIPTION: Shows how to use pendingVariables to display a loading state while new data is being fetched after a variable change. This example displays a spinner while a new profile picture size is loading.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-classic/Classic-APIReference-Container.md#2025-04-18_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nclass ProfilePicture extends React.Component {\n  requestRandomPictureSize = () => {\n    const randIntMin = 10;\n    const randIntMax = 200;\n    const size = (Math.floor(Math.random() * (randIntMax - randIntMin + 1)) + randIntMin);\n    this.props.relay.setVariables({size});\n  }\n\n  render() {\n    const {relay, user} = this.props;\n    const {pendingVariables} = relay;\n    if (pendingVariables && 'size' in pendingVariables) {\n      // Profile picture with new size is loading\n      return (\n        <View>\n          <LoadingSpinner />\n        </View>\n      )\n    }\n\n    return (\n      <View>\n        <Image\n          uri={user.profilePicture.uri}\n          width={relay.variables.size}\n        />\n        <button onclick={this.requestRandomPictureSize}>\n          Request random picture size\n        </button>\n      </View>\n    );\n  }\n}\nmodule.exports = Relay.createContainer(ProfilePicture, {\n  initialVariables: {size: 50},\n  fragments: {\n    user: () => Relay.QL`\n      fragment on User { profilePicture(size: $size) { ... } }\n    `,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Connection Fields with @required Limitations\nDESCRIPTION: Example showing connection fields where @required usage is limited due to automatically inserted fields\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/guides/required-directive.md#2025-04-18_snippet_5\n\nLANGUAGE: graphql\nCODE:\n```\nfragment FriendsList on User @refetchable(queryName: \"FriendsListQuery\") {\n  friends(after: $cursor, first: $count) @connection(key: \"FriendsList_friends\") {\n    edges {\n      node @required(action: LOG) {\n        job @required(action: LOG) {\n          title @required(action: LOG)\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: JavaScript Logger Event Example\nDESCRIPTION: This JavaScript code snippet shows the structure of a log event that Relay environment logger will receive when a field with `action: LOG` is null. The event includes the name of the event, the owner (fragment or query name), and the path to the field.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v13.0.0/guides/required-directive.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  name: 'read.missing_required_field',\n  owner: string, // MyFragmentOrQueryName\n  fieldPath: string, // path.to.my.field\n};\n```\n\n----------------------------------------\n\nTITLE: Cache Update Example\nDESCRIPTION: Example showing how a change to the author's photo is represented in the normalized cache structure.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/principles-and-architecture/thinking-in-graphql.md#2025-04-18_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nMap {\n  ...\n  2: Map {\n    ...\n    photo: 'http://.../photo2.jpg',\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Defining New GraphQL Types\nDESCRIPTION: This GraphQL code defines new client-only types, including an enum `FetchStatus` and a type `FetchState`. It also shows how to extend a server-defined type `Item` with a field of the client-only type `FetchState`. This enables client-side data to be structured and related to server-side data.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/guided-tour/updating-data/client-only-data.md#2025-04-18_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\n\"# You can define more than one type in a single file\\nenum FetchStatus {\\n  FETCHED\\n  PENDING\\n  ERRORED\\n}\\n\\n\\ntype FetchState {\\n  # You can reuse client types to define other types\\n  status: FetchStatus\\n\\n  # You can also reference regular server types\\n  started_by: User!\\n}\\n\\nextend type Item {\\n  # You can extend server types with client-only types\\n  fetch_state: FetchState\\n}\"\n```\n\n----------------------------------------\n\nTITLE: ID Generation Example\nDESCRIPTION: This code snippet demonstrates how to use the generateId function within a Mock Resolver to create a sequence of unique IDs for testing purposes. It shows how to generate strings with incrementing integer suffixes.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/guides/testing-relay-components.md#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  // will generate strings \"my-id-1\", \"my-id-2\", etc.\n  ID(_, generateId) {\n     return `my-id-${generateId()}`;\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Composing Fragments into Queries with React and Relay\nDESCRIPTION: This code snippet shows how to compose fragments into queries using React and Relay. It demonstrates the use of usePreloadedQuery to fetch data and pass fragment references to child components.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/guided-tour/rendering/fragments.md#2025-04-18_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * App.react.js\n *\n * Query Component\n */\n\nimport type {AppQuery} from 'AppQuery.graphql';\nimport type {PreloadedQuery} from 'react-relay';\n\nconst React = require('React');\nconst {graphql, usePreloadedQuery} = require('react-relay');\n\nconst UserComponent = require('./UserComponent.react');\n\ntype Props = {\n  appQueryRef: PreloadedQuery<AppQuery>,\n}\n\nfunction App({appQueryRef}) {\n  const data = usePreloadedQuery(\n    graphql`\n      query AppQuery($id: ID!) {\n        user(id: $id) {\n          name\n\n          # Include child fragment:\n          ...UserComponent_user\n        }\n      }\n    `,\n    appQueryRef,\n  );\n\n  return (\n    <>\n      <h1>{data.user?.name}</h1>\n      {/* Render child component, passing the fragment reference: */}\n      <UserComponent user={data.user} />\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Defining OnReadyStateChange Function Type\nDESCRIPTION: Type definition for onReadyStateChange callback that handles various data resolution states.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-classic/Classic-APIReference-RootContainer.md#2025-04-18_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nonReadyStateChange(\n  readyState: {\n    aborted: boolean;\n    done: boolean;\n    error: ?Error;\n    events: Array<ReadyStateEvent>;\n    ready: boolean;\n    stale: boolean;\n  }\n): void\n```\n\n----------------------------------------\n\nTITLE: Running Relay Compiler for GraphQL Processing in Shell\nDESCRIPTION: Command to run the Relay Compiler which analyzes GraphQL literals in JavaScript code and produces necessary runtime artifacts. This needs to be executed after making changes to Relay components.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/guided-tour/workflow.md#2025-04-18_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nyarn run relay\n```\n\n----------------------------------------\n\nTITLE: Importing Generated GraphQL Artifacts\nDESCRIPTION: Demonstrates how to directly import generated GraphQL artifacts when they need to be accessed from multiple files. This is less common than using the Babel plugin for automatic requires.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v13.0.0/guides/compiler.md#2025-04-18_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport DictionaryComponent_word from './__generated__/DictionaryComponent_word.graphql';\n```\n\n----------------------------------------\n\nTITLE: Accessing Relay Compiler Help Documentation\nDESCRIPTION: Command to display the help documentation for the Relay compiler, showing its capabilities and options.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/getting-started/compiler.md#2025-04-18_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nnpm run relay --help\n```\n\n----------------------------------------\n\nTITLE: JSON Response for Rebels Query\nDESCRIPTION: The JSON response from the Rebels query showing the globally unique ID of the Rebels faction that can be used for refetching.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/guides/graphql-server-specification.md#2025-04-18_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"rebels\": {\n    \"id\": \"RmFjdGlvbjox\",\n    \"name\": \"Alliance to Restore the Republic\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Granular Loading UI with React Suspense\nDESCRIPTION: This snippet illustrates how to provide more granular loading states by wrapping different parts of a React component tree in separate Suspense components. Different UI placeholders are rendered for different components, allowing some content to become visible sooner as it resolves. It highlights the flexibility Suspense offers in customizing loading behavior of application sections.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/guided-tour/rendering/loading-states.md#2025-04-18_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n/**\n * App.react.js\n */\n\nconst React = require('React');\nconst {Suspense} = require('React');\n\nfunction App() {\n  return (\n    <>\n      {/* Show a separate loading UI for the LeftHandColumn */}\n      <Suspense fallback={<LeftColumnPlaceholder />}>\n        <LeftColumn />\n      </Suspense>\n\n      {/* Show a separate loading UI for both the Main and Secondary content */}\n      <Suspense fallback={<LoadingGlimmer />}>\n        <MainContent />\n        <SecondaryContent />\n      </Suspense>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Ships and HasNextPage\nDESCRIPTION: This GraphQL query fetches ships along with the `hasNextPage` field from `PageInfo`.  It demonstrates checking whether there are more pages in the connection without fetching them.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v13.0.0/guides/graphql-server-specification.md#2025-04-18_snippet_17\n\nLANGUAGE: graphql\nCODE:\n```\n\"\"\"\nquery EndOfRebelShipsQuery {\n  rebels {\n    name,\n    originalShips: ships(first: 2) {\n      edges {\n        node {\n          name\n        }\n      }\n      pageInfo {\n        hasNextPage\n      }\n    }\n    moreShips: ships(first: 3 after: \"YXJyYXljb25uZWN0aW9uOjE=\") {\n      edges {\n        node {\n          name\n        }\n      }\n      pageInfo {\n        hasNextPage\n      }\n    }\n  }\n}\n\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Setting Linked Record in Relay Store\nDESCRIPTION: Example of setting a linked record in the Relay Store using the setLinkedRecord method of RecordProxy. It can optionally take arguments for fields with parameters.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/api-reference/relay-runtime/store.md#2025-04-18_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nconst rootField = store.getRootField('rootField');\nconst newViewer = store.create(/* ... */);\nrootField.setLinkedRecord(newViewer, 'viewer');\n```\n\n----------------------------------------\n\nTITLE: Relay Compiler configuration file\nDESCRIPTION: This snippet illustrates a basic `relay.config.js` file, which configures the Relay Compiler. It specifies the source directory, language, schema path, and directories to exclude. This configuration is crucial for the compiler to correctly process GraphQL queries and generate artifacts.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/getting-started/installation-and-setup.md#2025-04-18_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// relay.config.js\nmodule.exports = {\n  // ...\n  // Configuration options accepted by the `relay-compiler` command-line tool and `babel-plugin-relay`.\n  src: \"./src\",\n  language: \"javascript\", // \\\"javascript\\\" | \\\"typescript\\\" | \\\"flow\\\"\n  schema: \"./data/schema.graphql\",\n  excludes: [\"**/node_modules/**\", \"**/__mocks__/**\", \"**/__generated__/**\"],\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Mock Resolvers for Scalar Types in Relay Tests\nDESCRIPTION: Example of simple mock resolvers that generate default values for ID and String scalar types. These resolvers will be used by MockPayloadGenerator to create test data for Relay operations.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v13.0.0/guides/testing-relay-components.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  ID() {\n    // Return mock value for a scalar filed with type ID\n    return 'my-id';\n  },\n  String() {\n    // Every scalar field with type String will have this default value\n    return \"Lorem Ipsum\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Illustrating Store Reading and Observation in Relay\nDESCRIPTION: This ASCII diagram demonstrates the process of reading from the RecordSource using a Selector and creating a Snapshot, which is then used for subscribing to changes.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/principles-and-architecture/runtime-architecture.md#2025-04-18_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\n    ┌───────────────────────┐       ┌──────────────┐\n    │     RecordSource      │       │              │\n    │                       │       │              │\n    │┌──────┐┌──────┐┌─────┐│       │   Selector   │\n    ││Record││Record││ ... ││       │              │\n    │└──────┘└──────┘└─────┘│       │              │\n    └───────────────────────┘       └──────────────┘\n                │                           │\n                │                           │\n                └──────────────┬────────────┘\n                               │\n                               │  lookup\n                               │  (read)\n                               │\n                               ▼\n                        ┌─────────────┐\n                        │             │\n                        │  Snapshot   │\n                        │             │\n                        └─────────────┘\n                               │\n                               │  render, etc\n                               │\n                               ▼\n```\n\n----------------------------------------\n\nTITLE: Extending Server Schema Type (GraphQL)\nDESCRIPTION: Extends the User type from the server schema to include a list of Notes, allowing local data to be associated with server data.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/guides/client-schema-extensions.md#2025-04-18_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\nextend type User {\n  notes: [Note]\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring ForceFetch Boolean Type\nDESCRIPTION: Type definition for the forceFetch prop that determines if data should be fetched from server.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-classic/Classic-APIReference-RootContainer.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nforceFetch: boolean\n```\n\n----------------------------------------\n\nTITLE: Polyfills for JavaScript Environment Requirements\nDESCRIPTION: This snippet installs polyfills necessary for older browsers to support modern JavaScript features needed by Relay.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/getting-started/installation-and-setup.md#2025-04-18_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nrequire('core-js/es6/map');\nrequire('core-js/es6/set');\nrequire('core-js/es6/promise');\nrequire('core-js/es6/object');\n\nrequire('./myRelayApplication');\n```\n\n----------------------------------------\n\nTITLE: Importing GraphQL from Relay Runtime in JavaScript\nDESCRIPTION: Imports the graphql tag function from the relay-runtime package, which is used for defining GraphQL queries in Relay applications.\nSOURCE: https://github.com/facebook/relay/blob/main/packages/babel-plugin-relay/__tests__/fixtures/query.txt#2025-04-18_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst {graphql} = require('relay-runtime');\n```\n\n----------------------------------------\n\nTITLE: Installing Relay Packages with NPM\nDESCRIPTION: This code snippet demonstrates how to install the necessary Relay packages using NPM.  It installs the `relay-runtime` and `react-relay` packages as dependencies, and the `relay-compiler` and `babel-plugin-relay` as development dependencies.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/getting-started/step-by-step-guide.md#2025-04-18_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n\"# NPM Users\nnpm install --save relay-runtime react-relay\nnpm install --save-dev relay-compiler babel-plugin-relay\"\n```\n\n----------------------------------------\n\nTITLE: Refetching Rebels Using Node Interface\nDESCRIPTION: Example of refetching rebels data using the node interface and previously obtained ID\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-experimental/GraphQL-ServerSpecification.md#2025-04-18_snippet_2\n\nLANGUAGE: graphql\nCODE:\n```\nquery RebelsRefetchQuery {\n  node(id: \"RmFjdGlvbjox\") {\n    id\n    ... on Faction {\n      name\n    }\n  }\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"node\": {\n    \"id\": \"RmFjdGlvbjox\",\n    \"name\": \"Alliance to Restore the Republic\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Relay with create-relay-app\nDESCRIPTION: Command to install Relay on an existing app using create-relay-app package which supports Next, Vite, and Create React App platforms.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/getting-started/installation-and-setup.md#2025-04-18_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm create @tobiastengler/relay-app\n```\n\n----------------------------------------\n\nTITLE: Babel Configuration for Relay Plugin\nDESCRIPTION: This snippet defines the configuration for Babel to include the Relay plugin in the .babelrc file.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/getting-started/installation-and-setup.md#2025-04-18_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"plugins\": [\n    \"relay\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Adding React Keys with GraphQL IDs\nDESCRIPTION: Updated implementation that includes proper React keys using GraphQL node IDs\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/tutorial/arrays-lists.md#2025-04-18_snippet_3\n\nLANGUAGE: graphql\nCODE:\n```\nconst NewsfeedQuery = graphql`\n  query NewsfeedQuery {\n    topStories {\n      id\n      ...StoryFragment\n    }\n  }\n`;\n```\n\nLANGUAGE: typescript\nCODE:\n```\nexport default function Newsfeed({}) {\n  const data = useLazyLoadQuery<NewsfeedQueryType>(NewsfeedQuery, {});\n  const stories = data.topStories;\n  return (\n    <div className=\"newsfeed\">\n      {stories.map(story => (\n        <Story\n          key={story.id}\n          story={story}\n        />\n      ))}\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Running Relay Compiler in Watch Mode\nDESCRIPTION: This code shows how to run the Relay compiler in watch mode, allowing it to automatically regenerate compiled artifacts on file changes.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/getting-started/installation-and-setup.md#2025-04-18_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\nyarn run relay --watch\n```\n\n----------------------------------------\n\nTITLE: Making a Fragment Refetchable in Relay with @refetchable\nDESCRIPTION: This snippet demonstrates how to make a fragment refetchable using the @refetchable directive, enabling Relay to fetch it again with new argument values such as a new cursor for pagination.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/tutorial/connections-pagination.md#2025-04-18_snippet_5\n\nLANGUAGE: graphql\nCODE:\n```\nconst StoryCommentsSectionFragment = graphql`\n  fragment StoryCommentsSectionFragment on Story\n    // change-line\n    @refetchable(queryName: \"StoryCommentsSectionPaginationQuery\")\n    @argumentDefinitions(\n    ... as before\n`;\n```\n\n----------------------------------------\n\nTITLE: Implementing the onClick Handler with commitLocalUpdate\nDESCRIPTION: Implementation of the onClick handler that uses commitLocalUpdate and readUpdatableQuery APIs to assign a user as the viewer's best friend. The handler reads an updatable query with the @updatable directive and assigns the user to the best_friend field.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/guided-tour/updating-data/imperatively-modifying-linked-fields.md#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport type {RecordSourceSelectorProxy} from 'react-relay';\n\nconst {commitLocalUpdate, useRelayEnvironment} = require('react-relay');\n\n// ...\n\nconst environment = useRelayEnvironment();\nconst onClick = () => {\n  const updatableData = commitLocalUpdate(\n    environment,\n    (store: RecordSourceSelectorProxy) => {\n      const {updatableData} = store.readUpdatableQuery(\n          graphql`\n            query AssignBestFriendButtonUpdatableQuery\n            @updatable {\n              viewer {\n                best_friend {\n                  ...AssignableBestFriendButton_assignable_user\n                }\n              }\n            }\n          `,\n          {}\n        );\n\n      if (data.user != null && updatableData.viewer != null) {\n        updatableData.viewer.best_friend = data.user;\n      }\n    }\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Headers for URL-based Persisted Queries in JavaScript\nDESCRIPTION: Shows how to specify custom headers for URL-based persisted queries, allowing for authentication headers to be sent with the query persistence request.\nSOURCE: https://github.com/facebook/relay/blob/main/website/blog/2023-03-30-relay-15.mdx#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\npersistConfig: {\n  url: 'example.com/persist',\n  headers: {\n    Authorization: 'bearer TOKEN'\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting up npm script for Relay Compiler\nDESCRIPTION: Adding a script to package.json to facilitate running the Relay Compiler using yarn/npm.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/getting-started/installation-and-setup.md#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n\"scripts\": {\n  \"relay\": \"relay-compiler\"\n}\n```\n\n----------------------------------------\n\nTITLE: Using Fragment Spreads in GraphQL Queries\nDESCRIPTION: Shows how to use fragment spreads within a GraphQL query. This example demonstrates spreading a fragment named 'Component_name' into a query.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/glossary/glossary.md#2025-04-18_snippet_4\n\nLANGUAGE: graphql\nCODE:\n```\nquery ComponentQuery {\n  viewer {\n    account_user {\n      ...Component_name\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing sendMutation in RelayNetworkLayer\nDESCRIPTION: Method signature for sending mutations to the server. Must resolve or reject the mutationRequest based on server response.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-classic/Classic-Interfaces-NetworkLayer.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nsendMutation(mutationRequest: RelayMutationRequest): ?Promise\n```\n\n----------------------------------------\n\nTITLE: Example Usage of RenderFetched\nDESCRIPTION: Example showing how to use the renderFetched prop to render fetched data.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-classic/Classic-APIReference-RootContainer.md#2025-04-18_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\n<Relay.RootContainer\n  Component={ProfilePicture}\n  route={profileRoute}\n  renderFetched={function(data) {\n    return (\n      <ScrollView>\n        <ProfilePicture {...data} />\n      </ScrollView>\n    );\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Using a Custom Mutation in a Relay Container Component\nDESCRIPTION: Demonstrates how to use the LikeStoryMutation in a LikeButton component. Shows committing the mutation and composing its fragment with the component's fragment.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-classic/Classic-Guides-Mutations.md#2025-04-18_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nclass LikeButton extends React.Component {\n  _handleLike = () => {\n    this.props.relay.commitUpdate(\n      new LikeStoryMutation({story: this.props.story})\n    );\n  }\n  render() {\n    return (\n      <div>\n        {this.props.story.viewerDoesLike\n          ? 'You like this'\n          : <button onClick={this._handleLike}>Like this</button>\n        }\n      </div>\n    );\n  }\n}\n\nmodule.exports = Relay.createContainer(LikeButton, {\n  fragments: {\n    story: () => Relay.QL`\n      fragment on Story {\n        viewerDoesLike,\n        ${LikeStoryMutation.getFragment('story')},\n      }\n    `,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Avoiding Suspense in React with Relay fetchQuery\nDESCRIPTION: This code snippet illustrates how to avoid Suspense fallbacks in a React component by manually managing the loading states through the fetchQuery function in a Relay application. It uses hooks such as useState and useCallback to track loading states and refetch data while ensuring the data is cached in the Relay store. Prerequisites include a Relay environment setup and the AppQuery generated from a GraphQL query. The code accepts props and maintains a boolean isRefreshing state to determine loading and a queryArgs state to update fetch policies. Inputs include environment variables and fetch policies, with outputs being the updated state and re-rendered components.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v13.0.0/guided-tour/refetching/refetching-queries-with-different-data.md#2025-04-18_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\n/**\n * App.react.js\n */\nimport type {AppQuery as AppQueryType} from 'AppQuery.graphql';\n\nconst AppQuery = require('__generated__/AppQuery.graphql');\n\nfunction App(props: Props) {\n  const environment = useRelayEnvironment();\n  const [isRefreshing, setIsRefreshing] = useState(false)\n  const [queryArgs, setQueryArgs] = useState({\n    options: {fetchKey: 0, fetchPolicy: 'store-or-network'},\n    variables: {id: '4'},\n  });\n\n  const refetch = useCallback(() => {\n    if (isRefreshing) { return; }\n    setIsRefreshing(true);\n\n    // fetchQuery will fetch the query and write\n    // the data to the Relay store. This will ensure\n    // that when we re-render, the data is already\n    // cached and we don't suspend\n    fetchQuery(environment, AppQuery, variables)\n      .subscribe({\n        complete: () => {\n          setIsRefreshing(false);\n\n          // *After* the query has been fetched, we update\n          // our state to re-render with the new fetchKey\n          // and fetchPolicy.\n          // At this point the data for the query should\n          // be cached, so we use the 'store-only'\n          // fetchPolicy to avoid suspending.\n          setQueryArgs(prev => ({\n            options: {\n              fetchKey: (prev?.options.fetchKey ?? 0) + 1,\n              fetchPolicy: 'store-only',\n            },\n            variables: {id: 'different-id'}\n          }));\n        },\n        error: () => {\n          setIsRefreshing(false);\n        }\n      });\n  }, [/* ... */]);\n\n  return (\n    <React.Suspense fallback=\"Loading query...\">\n      <MainContent\n        isRefetching={isRefetching}\n        refetch={refetch}\n        queryArgs={queryArgs}\n      />\n    </React.Suspense>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using altText in Image Component\nDESCRIPTION: This code demonstrates using the newly added `altText` field in the `Image` component. The `alt` attribute of the `img` tag is now dynamically set using the `data.altText` value fetched from the `ImageFragment`.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/tutorial/fragments-1.md#2025-04-18_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nfunction Image({image}) {\n  // ...\n  <img\n    // change-line\n    alt={data.altText}\n  //...\n}\n```\n\n----------------------------------------\n\nTITLE: Defining User Schema Extension\nDESCRIPTION: GraphQL schema extension adding an is_selected boolean field to the User type.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/guided-tour/updating-data/imperatively-modifying-store-data.md#2025-04-18_snippet_2\n\nLANGUAGE: graphql\nCODE:\n```\nextend type User {\n  is_selected: Boolean\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Rebels Data in GraphQL\nDESCRIPTION: Example query to fetch rebels faction data including ID and name\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-experimental/GraphQL-ServerSpecification.md#2025-04-18_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\nquery RebelsQuery {\n  rebels {\n    id\n    name\n  }\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"rebels\": {\n    \"id\": \"RmFjdGlvbjox\",\n    \"name\": \"Alliance to Restore the Republic\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Data with REST in JavaScript\nDESCRIPTION: Demonstrates fetching a list of stories and their details using a resource-oriented REST approach. This method requires n+1 requests: 1 to fetch the list and n to fetch each story's details.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/principles-and-architecture/thinking-in-graphql.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nrest.get('/stories').then(stories =>\n  Promise.all(stories.map(story =>\n    rest.get(story.href)\n  ))\n).then(stories => {\n  console.log(stories);\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a LiveState Object from Redux Selector in TypeScript\nDESCRIPTION: This function creates a LiveState object from a Redux selector. It efficiently handles subscriptions and updates, only notifying when the selected value actually changes.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/guides/relay-resolvers/live-fields.md#2025-04-18_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\ntype Selector<T> = (state: State) => T;\n\nfunction selectorAsLiveState<T>(selector: Selector<T>): LiveState<T> {\n  let currentValue = selector(store.getState());\n  return {\n    read: () => currentValue,\n    subscribe: (cb) => {\n      return store.subscribe(() => {\n        const newValue = selector(store.getState());\n        if (newValue === currentValue) {\n          return;\n        }\n        currentValue = newValue;\n        cb();\n      });\n      return unsubscribe;\n    },\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Using Fragment with Default Argument Values in Relay\nDESCRIPTION: Demonstrates how to include a fragment that has default argument values without passing any arguments, which will use the default values.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/guided-tour/rendering/variables.md#2025-04-18_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nfunction UserComponent(props) {\n  const data = useFragment(\n    graphql`\n      fragment UserComponent_user on User {\n        name\n\n        # Do not pass an argument, value for scale will be 2.0\n        ...PictureComponent_user\n      }\n    `,\n    props.user,\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Inconsistent @required Usage in GraphQL Fragment\nDESCRIPTION: Example of inconsistent @required usage that would fail to compile. Relay requires matching @required declarations across all references to the same field in a fragment.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/guides/required-directive.md#2025-04-18_snippet_2\n\nLANGUAGE: graphql\nCODE:\n```\nfragment UserInfo on User {\n  job {\n    ... on Actor {\n      certifications\n    }\n    ... on Lawyer {\n      certifications @required(action: LOG)\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Reading Client-Only Data with Relay Fragment\nDESCRIPTION: Example of reading client-only data by selecting it in a Relay fragment. This demonstrates how client-only fields like is_new_comment can be queried alongside regular server fields.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/guided-tour/updating-data/client-only-data.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst data = *useFragment*(\n  graphql`\n    fragment CommentComponent_comment on Comment {\n\n      # We can select client-only fields as we would any other field\n      is_new_comment\n\n      body {\n        text\n      }\n    }\n  `,\n  props.user,\n);\n```\n\n----------------------------------------\n\nTITLE: GraphQL Fragment Definition\nDESCRIPTION: Example of defining a GraphQL fragment that will be compiled into generated artifacts.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/guides/compiler.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ngraphql`\n  fragment MyComponent on Type {\n    field\n  }\n`\n```\n\n----------------------------------------\n\nTITLE: Querying Node by ID in GraphQL\nDESCRIPTION: Example of querying a node by ID to fetch a User object with their name.\nSOURCE: https://github.com/facebook/relay/blob/main/website/spec/ObjectIdentification.md#2025-04-18_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\n{\n  node(id: \"4\") {\n    id\n    ... on User {\n      name\n    }\n  }\n```\n\n----------------------------------------\n\nTITLE: Defining render Prop for Relay.Renderer in JavaScript\nDESCRIPTION: Specifies the render prop function signature for Relay.Renderer. This function is called to render when data requirements are being fulfilled, providing props, done status, error, retry function, and stale status.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-classic/Classic-APIReference-Renderer.md#2025-04-18_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nrender({\n  props: ?{[propName: string]: mixed},\n  done: boolean,\n  error: ?Error,\n  retry: ?Function,\n  stale: boolean\n}): ?React$Element\n```\n\n----------------------------------------\n\nTITLE: Demonstrating GraphQL Fragment Usage in Relay\nDESCRIPTION: While no explicit code is shown, the article references how components in Relay define GraphQL fragments to declare their data requirements. These fragments include both concrete values and references to child component fragments, which the Relay compiler then combines into optimized root queries.\nSOURCE: https://github.com/facebook/relay/blob/main/website/blog/2023-10-24-how-relay-enables-optimal-data-fetching.md#2025-04-18_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\n# Example structure mentioned in article:\nfragment ComponentName on Type {\n  field1\n  field2\n  ...ChildComponentFragment\n}\n```\n\n----------------------------------------\n\nTITLE: Using Fallback Values Instead of @required\nDESCRIPTION: Shows how to handle optional boolean fields with fallback values instead of using @required directive, particularly useful for feature flags and optional UI elements.\nSOURCE: https://github.com/facebook/relay/blob/main/website/blog/2023-01-03-resilient-relay-apps.mdx#2025-04-18_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nfunction SomeComponent({ queryRef }) {\n  const asset = useFragment(\n    graphql`\n      fragment MyFragment on Asset {\n        canTrade @required(action: THROW) # Required data\n        hasOfferToStake # Optional data\n      }\n    `,\n    assetRef,\n  );\n\n  const showStakeOffer = asset.hasOfferToStake ?? false;\n\n  return (\n    <div>\n      {asset.canTrade && <Button>Trade</Button>}\n      {showStakeOffer && <Button>Stake your currency</Button>}\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Different Best Friend Query Example in GraphQL\nDESCRIPTION: Second GraphQL query showing how fetching different fields for the same relationship can lead to missing data in normalized store.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/debugging/why-null.md#2025-04-18_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\nquery OtherQuery {\n  me {\n    best_friend {\n      # new id: 2\n      # Note: name is not fetched here\n      age\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching First Rebel Ship with GraphQL\nDESCRIPTION: Queries for the first ship in the Rebels’ faction using the Relay connection model, demonstrating the use of `first` argument to limit query results.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/guides/graphql-server-specification.md#2025-04-18_snippet_5\n\nLANGUAGE: graphql\nCODE:\n```\nquery RebelsShipsQuery { rebels { name ships(first: 1) { edges { node { name } } } } }\n```\n\n----------------------------------------\n\nTITLE: Configuring Persisted Queries in Relay using JSON\nDESCRIPTION: This JSON configuration snippet in a package.json file outlines how to set up the persistConfig option for Relay. The configuration includes a URL for sending queries and parameters that can be added to the request body for persisted queries, allowing for the conversion of query texts to MD5 hashes.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/guides/persisted-queries.md#2025-04-18_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"scripts\": {\n  \"relay\": \"relay-compiler\",\n  \"relay-persisting\": \"node relayLocalPersisting.js\"\n},\n\"relay\": {\n  \"src\": \"./src\",\n  \"schema\": \"./schema.graphql\",\n  \"persistConfig\": {\n    \"url\": \"http://localhost:2999\",\n    \"params\": {}\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining GraphQL Schema for Best Friends List\nDESCRIPTION: Extends the Viewer type to include a best_friends field as a list of User objects.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/guided-tour/updating-data/imperatively-modifying-linked-fields.md#2025-04-18_snippet_3\n\nLANGUAGE: graphql\nCODE:\n```\nextend type Viewer {\n  # We are now defined a \"best_friends\" field instead of a \"best_friend\" field\n  best_friends: [User!],\n}\n```\n\n----------------------------------------\n\nTITLE: Start React App with Yarn\nDESCRIPTION: This snippet shows how to navigate to the created app's directory and start the development server using Yarn. This command launches the React application in a browser.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/getting-started/step-by-step-guide.md#2025-04-18_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n\"cd your-app-name\nyarn start\"\n```\n\n----------------------------------------\n\nTITLE: Basic @required Usage in GraphQL Query\nDESCRIPTION: Example showing how to use @required directive on a field in a GraphQL query. If the name field is null, the viewer object becomes null.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/guides/required-directive.md#2025-04-18_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nquery MyQuery {\n  viewer {\n    name @required(action: LOG)\n    age\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Local State - JavaScript\nDESCRIPTION: This snippet uses React and Relay's 'useLazyLoadQuery' hook to fetch and display user data along with associated local notes. It demonstrates the inclusion of at least one server field in the query to access local state.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/guides/client-schema-extensions.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// Example.js\nimport * as React from 'react';\nimport { useLazyLoadQuery, graphql } from 'react-relay';\n\nconst Example = (props) => {\n  const data = useLazyLoadQuery(graphql`\n    query ExampleQuery {\n      viewer {\n        id\n        name\n        notes {\n          id\n          title\n          body\n        }\n      }\n    }\n  `, {});\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Creating an Updatable Fragment in Relay\nDESCRIPTION: Define a GraphQL fragment with @updatable directive to read and modify local store data during optimistic updates\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/tutorial/mutations-updates.md#2025-04-18_snippet_8\n\nLANGUAGE: GraphQL\nCODE:\n```\nfragment StoryLikeButton_updatable on Story @updatable {\n  likeCount\n  doesViewerLike\n}\n```\n\n----------------------------------------\n\nTITLE: Moving Future Components in Shell\nDESCRIPTION: Shell command to move components from the 'future' directory to 'src/components'.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/tutorial/queries-2.md#2025-04-18_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmv future/* src/components\n```\n\n----------------------------------------\n\nTITLE: Flattening GraphQL Queries with FlattenTransform\nDESCRIPTION: Demonstrates query optimization by reducing redundant field processing and removing extraneous fragment levels that match the parent type.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v13.0.0/principles-and-architecture/compiler-architecture.md#2025-04-18_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\n# before: `id` is processed twice\nfoo { # type FooType\n   id\n   ... on FooType { # matches the parent type, so this is extraneous\n     id\n   }\n }\n\n # after: `id` is processed once\n foo {\n   id\n }\n```\n\n----------------------------------------\n\nTITLE: Querying First Two Rebel Ships with Cursors\nDESCRIPTION: This GraphQL query retrieves the first two ships associated with the Rebels faction and includes the cursor for each edge, which is used for pagination.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v13.0.0/guides/graphql-server-specification.md#2025-04-18_snippet_11\n\nLANGUAGE: graphql\nCODE:\n```\n\"\"\"\nquery MoreRebelShipsQuery {\n  rebels {\n    name,\n    ships(first: 2) {\n      edges {\n        cursor\n        node {\n          name\n        }\n      }\n    }\n  }\n}\n\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Defining QueryConfig Prop for Relay.Renderer in JavaScript\nDESCRIPTION: Specifies the queryConfig prop type for Relay.Renderer. It can be either an instance of Relay.Route or an object with name, queries, and optionally params properties.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-classic/Classic-APIReference-Renderer.md#2025-04-18_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nqueryConfig: RelayRoute\n```\n\n----------------------------------------\n\nTITLE: Committing a GraphQLMutation with configs in JavaScript\nDESCRIPTION: Shows how to commit a GraphQLMutation to the server using the commit method. It includes an example of specifying configs for a RANGE_ADD mutation type.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-classic/Classic-APIReference-GraphQLMutation.md#2025-04-18_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst configs = [{\n  type: 'RANGE_ADD',\n  connectionName: 'topLevelComments',\n  edgeName: 'feedbackCommentEdge',\n  parentID: 'aFeedbackId',\n  parentName: 'feedback',\n  rangeBehaviors: {\n    '': GraphQLMutatorConstants.PREPEND,\n  },\n}];\nconst transaction = mutation.commit(configs);\n```\n\n----------------------------------------\n\nTITLE: Implementing a Live Resolver with Context in JavaScript\nDESCRIPTION: This example demonstrates how to implement a live resolver that uses the context argument to access a custom store.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/guides/relay-resolvers/context.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport type { LiveState } from 'relay-runtime';\n\n/**\n * @RelayResolver Query.counter: Int\n * @live\n */\nexport function counter(\n  _args,\n  context\n) {\n  return {\n    read: () => context.store.getState().counter,\n    subscribe: (callback) => {\n      return context.store.subscribe(callback);\n    },\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Field Stability Example Response\nDESCRIPTION: JSON response showing consistent field values between related nodes.\nSOURCE: https://github.com/facebook/relay/blob/main/website/spec/ObjectIdentification.md#2025-04-18_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"fourNode\": {\n    \"id\": \"4\",\n    \"name\": \"Mark Zuckerberg\",\n    \"userWithIdOneGreater\": {\n      \"id\": \"5\",\n      \"name\": \"Chris Hughes\"\n    }\n  },\n  \"fiveNode\": {\n    \"id\": \"5\",\n    \"name\": \"Chris Hughes\",\n    \"userWithIdOneLess\": {\n      \"id\": \"4\",\n      \"name\": \"Mark Zuckerberg\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using @inline Directive with readInlineData in Relay\nDESCRIPTION: Demonstrates how to use the @inline directive with readInlineData to access fragment data outside of React components. The example shows a utility function that processes item data and sends it to a third-party API.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/api-reference/graphql/graphql-directives.md#2025-04-18_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport {graphql, readInlineData} from 'react-relay';\n\n// non-React function called from React\nfunction processItemData(itemRef) {\n  const item = readInlineData(\n    graphql`\n      fragment processItemData_item on Item @inline {\n        title\n        price\n        creator {\n          name\n        }\n      }\n    `,\n    itemRef,\n  );\n  sendToThirdPartyApi({\n    title: item.title,\n    price: item.price,\n    creatorName: item.creator.name,\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Running Relay Compiler\nDESCRIPTION: This snippet provides the command to run the Relay compiler script, which generates compiled artifacts from your application files.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/getting-started/installation-and-setup.md#2025-04-18_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\nyarn run relay\n```\n\n----------------------------------------\n\nTITLE: TypeScript Error with Untyped Relay Query Data\nDESCRIPTION: This snippet shows a TypeScript error that occurs when attempting to access a property from untyped GraphQL query data. The error indicates that the 'topStory' property does not exist on the 'unknown' type because the query result hasn't been properly typed.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/tutorial/queries-1.md#2025-04-18_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst story = data.topStory;\n                   ^^^^^^^^\nProperty 'topStory' does not exist on type 'unknown'\n```\n\n----------------------------------------\n\nTITLE: Implementing Search in Fragment\nDESCRIPTION: Passing the search argument to the contacts field in the fragment.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/tutorial/refetchable-fragments.md#2025-04-18_snippet_3\n\nLANGUAGE: graphql\nCODE:\n```\nconst ContactsListFragment = graphql`\n  fragment ContactsListFragment on Viewer\n    @argumentDefinitions(\n      search: {type: \"String\", defaultValue: null}\n    )\n  {\n    contacts(search: $search) {\n      id\n      ...ContactRowFragment\n    }\n  }\n`;\n```\n\n----------------------------------------\n\nTITLE: Configuring babel-plugin-relay in .babelrc\nDESCRIPTION: Babel configuration to add the Relay plugin to the list of Babel plugins. This should run before other plugins to correctly transform GraphQL template literals.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/getting-started/installation-and-setup.md#2025-04-18_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"plugins\": [\n    \"relay\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Installing React and Relay Dependencies\nDESCRIPTION: Command to install React and Relay core dependencies using yarn.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/getting-started/installation-and-setup.md#2025-04-18_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nyarn add react react-dom react-relay\n```\n\n----------------------------------------\n\nTITLE: Running the App\nDESCRIPTION: This command navigates to the app's directory and starts the development server using yarn, which triggers the relay compiler based on the scripts defined in package.json.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/getting-started/step-by-step-guide.md#2025-04-18_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\n\"cd your-app-name\nyarn start\"\n```\n\n----------------------------------------\n\nTITLE: Importing Components for Documentation - JavaScript\nDESCRIPTION: This snippet imports necessary components for rendering documentation ratings as part of the Relay guide. The imports are from external libraries, enabling the usage of specific functionalities from those libraries.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/guided-tour/reusing-cached-data/availability-of-data.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport DocsRating from '@site/src/core/DocsRating';\nimport {OssOnly, FbInternalOnly} from 'docusaurus-plugin-internaldocs-fb/internal';\n```\n\n----------------------------------------\n\nTITLE: Accessing Relay Environment with useRelayEnvironment\nDESCRIPTION: This snippet shows how to access the current Relay Environment within a descendant of a RelayEnvironmentProvider component using the useRelayEnvironment hook.  The hook returns the current Relay Environment instance, which can then be used for Relay operations. This allows components deep within the component tree to easily access the Relay Environment.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/guided-tour/rendering/environment.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n```js\nconst {useRelayEnvironment} = require('react-relay');\n\nfunction UserComponent(props: Props) {\n  const environment = useRelayEnvironment();\n\n  return (...);\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Customizing Timeout and Retry Settings in Relay Network Layer\nDESCRIPTION: This snippet illustrates how to customize the fetch timeout and retry delays for the Relay network layer. It sets a 30-second timeout and a single retry after 5 seconds for failed requests.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-classic/Classic-Guides-NetworkLayer.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nRelay.injectNetworkLayer(\n  new Relay.DefaultNetworkLayer('http://example.com/graphql', {\n    fetchTimeout: 30000,   // Timeout after 30s.\n    retryDelays: [5000],   // Only retry once after a 5s delay.\n  })\n);\n```\n\n----------------------------------------\n\nTITLE: Relay Fragment Data Typing with Flow\nDESCRIPTION: This code snippet demonstrates how Relay emits type information for fragment data using Flow.  The `ExampleFragmentComponent_artist$data` type describes the shape of the data expected by the `useFragment` hook within the `ExampleFragmentComponent`. This ensures type safety when accessing data from the fragment in the component.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v13.0.0/guides/type-emission.md#2025-04-18_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\n/**\n * export type ExampleFragmentComponent_artist$data = {\n *   +name: string\n * }\n *\n * export type ExampleFragmentComponent_artist$key = { ... }\n */\n\nimport type { ExampleFragmentComponent_artist$key } from \"__generated__/ExampleFragmentComponent_artist.graphql\"\n\ntype Props = {\n  artist: ExampleFragmentComponent_artist$key,\n};\n\nexport default ExampleFragmentComponent(props) {\n  // data is of type ExampleFragmentComponent_artist$data\n  const data = useFragment(\n    graphql`\n      fragment ExampleFragmentComponent_artist on Artist {\n        biography\n      }\n    `,\n    props.artist,\n  );\n\n  return <div>About the artist: {props.artist.biography}</div>;\n}\n```\n\n----------------------------------------\n\nTITLE: React Component with Hard-coded Data\nDESCRIPTION: Initial React component implementation using placeholder data for a newsfeed story.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/tutorial/queries-1.md#2025-04-18_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nexport default function Newsfeed() {\n  const story = {\n    title: \"Placeholder Story\",\n    summary:\n      \"Placeholder data, to be replaced with data fetched via GraphQL\",\n    poster: {\n      name: \"Placeholder Person\",\n      profilePicture: {\n        url: \"/assets/cat_avatar.png\",\n      },\n    },\n    thumbnail: {\n      url: \"/assets/placeholder.jpeg\",\n    },\n  };\n  return (\n    <div className=\"newsfeed\">\n      <Story story={story} />\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Recoverable Violations with FBLogger in JavaScript\nDESCRIPTION: This snippet demonstrates how to use the `recoverableViolation` method from FBLogger, specifying a project for logging purposes. The logger project is determined by the second argument, which should be a string identifying the project within FB's logging infrastructure. There are considerations when using directives like `@required` that may change logging behavior.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/guides/required-directive.md#2025-04-18_snippet_9\n\nLANGUAGE: JavaScript\nCODE:\n```\nrecoverableViolation('My error string', 'my_logger_project');\n```\n\n----------------------------------------\n\nTITLE: Fetching Data with REST\nDESCRIPTION: Demonstrates a traditional REST approach to fetching a list of stories, requiring n+1 network requests - one for the list and one for each item detail.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v13.0.0/principles-and-architecture/thinking-in-graphql.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// Fetch the list of story IDs but not their details:\nrest.get('/stories').then(stories =>\n  // This resolves to a list of items with linked resources:\n  // `[ { href: \"http://.../story/1\" }, ... ]`\n  Promise.all(stories.map(story =>\n    rest.get(story.href) // Follow the links\n  ))\n).then(stories => {\n  // This resolves to a list of story items:\n  // `[ { id: \"...\", text: \"...\" } ]`\n  console.log(stories);\n});\n```\n\n----------------------------------------\n\nTITLE: Basic @catch Field Usage in GraphQL Query\nDESCRIPTION: Demonstrates using @catch directive directly on a field to handle errors at the field level. When an error occurs, it returns an object with ok status and errors array.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/guides/catch-directive.md#2025-04-18_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nquery MyQuery {\n  viewer {\n    name @catch\n    age\n  }\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  viewer: {\n    name: {\n      ok: false,\n      errors: [{path: ['viewer', 'name']}]\n    }\n    age: 39\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing DocsRating Component - JavaScript\nDESCRIPTION: This snippet imports the DocsRating component from a specified module to facilitate documentation rating functionality within the Relay guided tour.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v13.0.0/guided-tour/introduction.md#2025-04-18_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport DocsRating from '@site/src/core/DocsRating';\n```\n\n----------------------------------------\n\nTITLE: Creating React App with NPM or Yarn\nDESCRIPTION: Commands to create a new React application using either NPM or Yarn through the create-react-app utility.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/getting-started/step-by-step-guide.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# NPM\nnpx create-react-app your-app-name\n\n# Yarn\nyarn create react-app your-app-name\n```\n\n----------------------------------------\n\nTITLE: Implementing Pagination with usePaginationFragment in React and Relay\nDESCRIPTION: This snippet demonstrates how to use the usePaginationFragment hook from Relay to implement pagination in a React component. It shows how to fetch and render a list of friends, and how to load more items when a button is clicked.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/guided-tour/list-data/pagination.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport type {FriendsListComponent_user$key} from 'FriendsList_user.graphql';\n\nconst React = require('React');\n\nconst {graphql, usePaginationFragment} = require('react-relay');\n\nconst {Suspense} = require('React');\n\ntype Props = {\n  user: FriendsListComponent_user$key,\n};\n\nfunction FriendsListComponent(props: Props) {\n  const {data, loadNext} = usePaginationFragment(\n    graphql`\n      fragment FriendsListComponent_user on User\n      @refetchable(queryName: \"FriendsListPaginationQuery\") {\n        name\n        friends(first: $count, after: $cursor)\n        @connection(key: \"FriendsList_user_friends\") {\n          edges {\n            node {\n              name\n              age\n            }\n          }\n        }\n      }\n    `,\n    props.user,\n  );\n\n  return (\n    <>\n      <h1>Friends of {data.name}:</h1>\n      <div>\n        {(data.friends?.edges ?? []).map(edge => {\n          const node = edge.node;\n          return (\n            <Suspense fallback={<Glimmer />}>\n              <FriendComponent user={node} />\n            </Suspense>\n          );\n        })}\n      </div>\n\n      <Button\n        onClick={() => {\n          loadNext(10)\n        }}>\n        Load more friends\n      </Button>\n    </>\n  );\n}\n\nmodule.exports = FriendsListComponent;\n```\n\n----------------------------------------\n\nTITLE: Defining a Relay Resolver Type in TypeScript\nDESCRIPTION: Demonstrates how to define a new GraphQL type using the @RelayResolver tag. The resolver function accepts an ID and returns the backing data model.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/api-reference/relay-resolvers/docblock-format.md#2025-04-18_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n/**\n * @RelayResolver User\n */\nexport function User(id): UserModel {\n  return UserModel.getById(id);\n}\n```\n\n----------------------------------------\n\nTITLE: GraphQL query for field value with arguments\nDESCRIPTION: An example GraphQL query that retrieves the id of the viewer.  The name field accepts an argument.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v13.0.0/api-reference/relay-runtime/store.md#2025-04-18_snippet_18\n\nLANGUAGE: graphql\nCODE:\n```\nviewer {\n  id\n  name(arg: $arg)\n}\n```\n\n----------------------------------------\n\nTITLE: Running the Relay Compiler in watch mode\nDESCRIPTION: Command to run the Relay Compiler with the watch option to automatically regenerate compiled artifacts when source files change. Requires watchman to be installed.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/getting-started/installation-and-setup.md#2025-04-18_snippet_9\n\nLANGUAGE: sh\nCODE:\n```\nyarn run relay --watch\n```\n\n----------------------------------------\n\nTITLE: Setting up Relay Environment\nDESCRIPTION: Configuration of Relay Environment with GraphQL endpoint and network layer setup\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/getting-started/quick-start.md#2025-04-18_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport { StrictMode, Suspense } from \"react\";\nimport { createRoot } from \"react-dom/client\";\nimport \"./index.css\";\nimport App from \"./App.tsx\";\nimport { RelayEnvironmentProvider } from \"react-relay\";\nimport {\n  Environment,\n  Store,\n  RecordSource,\n  Network,\n  FetchFunction,\n} from \"relay-runtime\";\n\nconst HTTP_ENDPOINT = \"https://graphql.org/graphql/\";\n\nconst fetchGraphQL: FetchFunction = async (request, variables) => {\n  const resp = await fetch(HTTP_ENDPOINT, {\n    method: \"POST\",\n    headers: { \"Content-Type\": \"application/json\" },\n    body: JSON.stringify({ query: request.text, variables }),\n  });\n  if (!resp.ok) {\n    throw new Error(\"Response failed.\");\n  }\n  return await resp.json();\n};\n\nconst environment = new Environment({\n  store: new Store(new RecordSource({})),\n  network: Network.create(fetchGraphQL),\n});\n\ncreateRoot(document.getElementById(\"root\")!).render(\n  <StrictMode>\n    <RelayEnvironmentProvider environment={environment}>\n      <Suspense fallback=\"Loading...\">\n        <App />\n      </Suspense>\n    </RelayEnvironmentProvider>\n  </StrictMode>\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing a Counter Resolver with Context in JavaScript\nDESCRIPTION: Defines a resolver function that utilizes the context to read and subscribe to the store's counter state. Depends on a correctly initialized LiveResolverStore and relies on Relay's type assertions for verification.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/guides/relay-resolvers/context.md#2025-04-18_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport type { LiveState } from 'relay-runtime';\n\n/**\n * @RelayResolver Query.counter: Int\n * @live\n */\nexport function counter(\n  _args,\n  context\n) {\n  return {\n    read: () => context.store.getState().counter,\n    subscribe: (callback) => {\n      return context.store.subscribe(callback);\n    },\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Retaining Queries with Relay JavaScript\nDESCRIPTION: This JavaScript snippet demonstrates how to use the Relay environment.retain method to manually retain a query. The dependencies include relay-runtime for accessing the createOperationDescriptor, getRequest, and graphql methods. The purpose is to prevent Relay's garbage collection from deleting the data for a specific query. Inputs include the query object and variables, and the output is a disposable object used to release the retained data when necessary.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/guided-tour/managing-data-outside-react/retaining-queries.md#2025-04-18_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst {\n  createOperationDescriptor,\n  getRequest,\n  graphql,\n} = require('relay-runtime')\n\n// Query graphql object\nconst query = graphql`...`;\n\n// Construct Relay's internal representation of the query\nconst queryRequest = getRequest(query);\nconst queryDescriptor = createOperationDescriptor(\n  queryRequest,\n  variables\n);\n\n// Retain query; this will prevent the data for this query and\n// variables from being gabrage collected by Relay\nconst disposable = environment.retain(queryDescriptor);\n\n// Disposing of the disposable will release the data for this query\n// and variables, meaning that it can be deleted at any moment\n// by Relay's garbage collection if it hasn't been retained elsewhere\ndisposable.dispose();\n```\n\n----------------------------------------\n\nTITLE: REST Cache Implementation\nDESCRIPTION: Simple REST caching implementation using URI-based response cache.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/principles-and-architecture/thinking-in-graphql.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nvar _cache = new Map();\nrest.get = uri => {\n  if (!_cache.has(uri)) {\n    _cache.set(uri, fetch(uri));\n  }\n  return _cache.get(uri);\n};\n```\n\n----------------------------------------\n\nTITLE: Querying GraphQL Lists\nDESCRIPTION: Example of a GraphQL query that retrieves a list of contacts with their IDs and names\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/tutorial/arrays-lists.md#2025-04-18_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nquery MyQuery {\n  viewer {\n    contacts { // List of edges\n      id // field on a single item\n      name\n    }\n  }\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  viewer: {\n    contacts: [ // array in response\n      {\n        id: \"123\",\n        name: \"Chris\",\n      },\n      {\n        id: \"789\",\n        name: \"Sue\",\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Query Identifier\nDESCRIPTION: Method that returns a unique identifier for the query, useful for matching responses to their corresponding queries in batch requests.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-classic/Classic-Interfaces-QueryRequest.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ngetID(): string\n```\n\n----------------------------------------\n\nTITLE: Implementing a React Component with Relay QueryRenderer and GraphQL Query\nDESCRIPTION: A React functional component that returns a QueryRenderer with a GraphQL query to fetch data. The component sets up a Relay environment, defines a GraphQL query using the graphql template literal tag, and passes an ID variable to the query.\nSOURCE: https://github.com/facebook/relay/blob/main/packages/babel-plugin-relay/__tests__/fixtures/memoize-inner-scope.txt#2025-04-18_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction SomeTopLevelView() {\n  const _graphql = 'unrelated';\n\n  return (\n    <View>\n      <QueryRenderer\n        environment={RelayEnvironment}\n        query={graphql`\n          query ExampleQuery($id: ID!) {\n            node(id: $id) {\n              ...ProfilePic_user\n            }\n          }\n        `}\n        variables={{id: '12345'}}\n      />\n    </View>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating React App with Create React App CLI\nDESCRIPTION: Commands to create a new React application using Create React App with either NPM or Yarn package managers.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/getting-started/step-by-step-guide.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# NPM\nnpx create-react-app your-app-name\n\n# Yarn\nyarn create react-app your-app-name\n```\n\n----------------------------------------\n\nTITLE: Observable Example in Relay JavaScript\nDESCRIPTION: Demonstrates synchronous data access in Relay's Observable implementation, showing how values can be retrieved immediately if already loaded\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/glossary/glossary.md#2025-04-18_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst completedObservable = Observable.from(\"Relay is awesome!\");\nlet valueFromObservable;\nobservable.subscribe({\n  next: (value) => {\n    valueFromObservable = value;\n    /* this will execute in the same tick */\n  },\n});\nconsole.log(valueFromObservable); // logs out \"Relay is awesome!\"\n```\n\n----------------------------------------\n\nTITLE: Retrieving Debug Name\nDESCRIPTION: Method that returns a debug-friendly string name for the request, used for logging and debugging purposes.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-classic/Classic-Interfaces-QueryRequest.md#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\ngetDebugName(): string\n```\n\n----------------------------------------\n\nTITLE: Creating a Relay Container in JavaScript\nDESCRIPTION: Demonstrates how to create a new Relay Container using the createContainer method. This method wraps components with data declarations and allows for configuration of initial variables, variable preparation, and fragments.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-classic/Classic-APIReference-Relay.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar Container = Relay.createContainer(Component, {\n  initialVariables?: Object,\n  prepareVariables?: (variables: Object, route: string) => Object,\n  fragments: {[key: string]: Function}\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Search Input in ContactsList Component\nDESCRIPTION: In this snippet, a search input field is added to the ContactsList component, allowing users to filter contacts based on the input value. The current search string state is also maintained.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/tutorial/refetchable-fragments.md#2025-04-18_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\n\"// change-line\\nimport SearchInput from './SearchInput';\\n\\n// change-line\\nconst {useState} = React;\\n\\nfunction ContactsList({viewer}) {\\n  const data = useFragment(ContactsListFragment, viewer);\\n  // change-line\\n  const [searchString, setSearchString] = useState('');\\n  // change\\n  const onSearchStringChanged = (value: string) => {\\n    setSearchString(value);\\n  };\\n  // end-change\\n  return (\\n    <Card dim={true}>\\n      <h3>Contacts</h3>\\n      // change\\n      <SearchInput\\n        value={searchString}\\n        onChange={onSearchStringChanged}\\n      />\\n      // end-change\\n      {data.contacts.map(contact =>\\n        <ContactRow key={contact.id} contact={contact} />\\n      )}\\n    </Card>\\n  );\\n}\\n\"\n```\n\n----------------------------------------\n\nTITLE: Correct @required Usage with @connection Directive\nDESCRIPTION: A fixed version of the previous example showing compatible usage of @required with @connection directive, where @required is only used on deeply nested fields.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/guides/required-directive.md#2025-04-18_snippet_6\n\nLANGUAGE: graphql\nCODE:\n```\nfragment FriendsList on User @refetchable(queryName: \"FriendsListQuery\") {\n  friends(after: $cursor, first: $count) @connection(key: \"FriendsList_friends\") {\n    edges {\n      node {\n        job {\n          title @required(action: LOG)\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Reading and Updating an Updatable Query in JavaScript\nDESCRIPTION: Shows how to read an updatable query from the store and modify its data.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/api-reference/relay-runtime/store.md#2025-04-18_snippet_27\n\nLANGUAGE: javascript\nCODE:\n```\nconst {updatableData} = store.readUpdatableQuery(\n  graphql`\n    query NameUpdaterUpdateQuery @updatable {\n      viewer {\n        name\n      }\n    }\n  `,\n  {}\n);\nconst viewer = updatableData.viewer;\nviewer.name = newName;\n```\n\n----------------------------------------\n\nTITLE: Using @waterfall Directive in GraphQL\nDESCRIPTION: Shows the usage of @waterfall directive for annotating lazy data fetching when using Relay Resolvers with client-defined edges that point to server types.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/api-reference/graphql/graphql-directives.md#2025-04-18_snippet_9\n\nLANGUAGE: graphql\nCODE:\n```\nfragment EditPost on DraftPost {\n  author @waterfall {\n    name\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing GraphQL Response Cache\nDESCRIPTION: Basic implementation of GraphQL response cache using query text as cache keys.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-experimental/PrinciplesAndArchitecture-ThinkingInGraphQL.md#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nvar _cache = new Map();\ngraphql.get = queryText => {\n  if (!_cache.has(queryText)) {\n    _cache.set(queryText, fetchGraphQL(queryText));\n  }\n  return _cache.get(queryText);\n};\n```\n\n----------------------------------------\n\nTITLE: Defining GraphQL Schema Types\nDESCRIPTION: Shows a snippet of a GraphQL schema definition, including type definitions for Story, Actor interface, Person type, and Category enum. This demonstrates how GraphQL schemas are structured to define the shape of the data.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/tutorial/graphql.md#2025-04-18_snippet_2\n\nLANGUAGE: graphql\nCODE:\n```\ntype Story {\n  id: ID!\n  category: Category\n  title: String\n  summary: String\n  thumbnail: Image\n  poster: Actor\n}\n\ninterface Actor {\n  id: ID!\n  name: String\n  profilePicture: Image\n}\n\ntype Person implements Actor {\n  id: ID!\n  name: String\n  email: String\n  profilePicture: Image\n  location: Location\n}\n\nenum Category {\n  EDUCATION\n  NEWS\n  COOKING\n}\n```\n\n----------------------------------------\n\nTITLE: Refreshing Fragments without Suspense using fetchQuery in Relay\nDESCRIPTION: This approach demonstrates how to refresh fragment data without triggering Suspense, by using fetchQuery to prefetch data before calling refetch with a store-only fetch policy. It includes a manual loading state implementation.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v13.0.0/guided-tour/refetching/refreshing-fragments.md#2025-04-18_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport type {UserComponent_user$key} from 'UserComponent_user.graphql';\n// This type is autogenerated by Relay given @refetchable used below\nimport type {UserComponentRefreshQuery} from 'UserComponentRefreshQuery.graphql';\n\ntype Props = {\n  user: UserComponent_user$key,\n};\n\nfunction UserComponent(props: Props) {\n  const [data, refetch] = useRefetchableFragment<UserComponentRefreshQuery, _>(\n    graphql`\n      fragment UserComponent_user on User\n      # @refetchable makes it so Relay autogenerates a query for\n      # fetching this fragment\n      @refetchable(queryName: \"UserComponentRefreshQuery\") {\n        id\n        name\n        friends {\n          count\n        }\n      }\n    `,\n    props.user,\n  );\n\n  const [isRefreshing, setIsRefreshing] = useState(false);\n  const refresh = useCallback(() => {\n    if (isRefreshing) { return; }\n    setIsRefreshing(true);\n\n    // fetchQuery will fetch the query and write\n    // the data to the Relay store. This will ensure\n    // that when we re-render, the data is already\n    // cached and we don't suspend\n    fetchQuery(environment, AppQuery, variables)\n      .subscribe({\n        complete: () => {\n          setIsRefreshing(false);\n\n          // *After* the query has been fetched, we call\n          // refetch again to re-render with the updated data.\n          // At this point the data for the query should\n          // be cached, so we use the 'store-only'\n          // fetchPolicy to avoid suspending.\n          refetch({}, {fetchPolicy: 'store-only'});\n        },\n        error: () => {\n          setIsRefreshing(false);\n        }\n      });\n  }, [/* ... */]);\n\n  return (\n    <>\n      <h1>{data.name}</h1>\n      <div>Friends count: {data.friends?.count}</div>\n      <Button\n        disabled={isRefreshing}\n        onClick={() => refresh()}>\n        Fetch latest count {isRefreshing ? <LoadingSpinner /> : null}\n      </Button>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using @alias Directive in GraphQL Fragment\nDESCRIPTION: Example showing how to use the @alias directive to give a fragment spread or inline fragment an alias.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/api-reference/graphql/graphql-directives.md#2025-04-18_snippet_4\n\nLANGUAGE: graphql\nCODE:\n```\nfragment MyFragment on User {\n  ... on User @alias(as: \"myGreatAlias\") {\n    name\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Updated Cache Data Example\nDESCRIPTION: Example showing how a single field update affects the normalized cache structure.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/principles-and-architecture/thinking-in-graphql.md#2025-04-18_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nMap {\n  ...\n  2: Map {\n    ...\n    photo: 'http://.../photo2.jpg',\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting a Record in JavaScript\nDESCRIPTION: Demonstrates how to delete a record from the Relay store using its dataID.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/api-reference/relay-runtime/store.md#2025-04-18_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\nstore.delete(dataID);\n```\n\n----------------------------------------\n\nTITLE: React Component with GraphQL Integration\nDESCRIPTION: React component implementation showing basic GraphQL data fetching using the fetchGraphQL utility.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-experimental/RelayHooks-StepByStep.md#2025-04-18_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport React from 'react';\nimport './App.css';\nimport fetchGraphQL from './fetchGraphQL';\n\nconst { useState, useEffect } = React;\n\nfunction App() {\n  const [name, setName] = useState(null);\n\n  useEffect(() => {\n    let isMounted = true;\n    fetchGraphQL(`\n      query RepositoryNameQuery {\n        # feel free to change owner/name here\n        repository(owner: \"facebook\" name: \"relay\") {\n          name\n        }\n      }\n    `).then(response => {\n      if (!isMounted) {\n        return;\n      }\n      const data = response.data;\n      setName(data.repository.name);\n    }).catch(error => {\n      console.error(error);\n    });\n\n    return () => {\n      isMounted = false;\n    };\n  }, [fetchGraphQL]);\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <p>\n          {name != null ? `Repository: ${name}` : \"Loading\"}\n        </p>\n      </header>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Create React App with NPM\nDESCRIPTION: This code snippet demonstrates how to create a new React application using Create React App with NPM. It initializes a basic React project structure and installs necessary dependencies.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/getting-started/step-by-step-guide.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n\"npx create-react-app your-app-name\"\n```\n\n----------------------------------------\n\nTITLE: Importing Components from Docusaurus and Internal Plugins\nDESCRIPTION: This snippet imports required components and plugins for creating documentation ratings and URL handling within a Docusaurus site. Dependencies include Docusaurus itself and specific internal plugins for Facebook's documentation system.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/guided-tour/list-data/connections.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport DocsRating from '@site/src/core/DocsRating';\nimport {OssOnly, FbInternalOnly} from 'docusaurus-plugin-internaldocs-fb/internal';\nimport useBaseUrl from '@docusaurus/useBaseUrl';\n```\n\n----------------------------------------\n\nTITLE: JSResource Mode Configuration for Meta Internal Use\nDESCRIPTION: Configuration example for using JSResource mode in moduleImportConfig, which enables dynamic loading of 3D components as JSResource modules.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/guides/data-driven-dependencies/configuration.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n\"moduleImportConfig\": {\n    \"dynamicModuleProvider\": {\n        \"mode\": \"JSResource\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: @relay(mask: Boolean) directive in GraphQL\nDESCRIPTION: The `@relay(mask: false)` directive can be used to prevent data masking in fragments. This example shows how to define a fragment where the data is directly available to the parent, while highlighting the potential anti-pattern it creates.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/api-reference/graphql/graphql-directives.md#2025-04-18_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\ngraphql`\n  fragment Component_internUser on InternUser @relay(mask: false) {\n    id\n    name\n  }\n`;\n```\n\n----------------------------------------\n\nTITLE: Importing DocsRating and Internal Components in Markdown\nDESCRIPTION: This code snippet imports the DocsRating component and internal-only components for use in the documentation. It demonstrates how to include custom React components within a Markdown file.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/home.md#2025-04-18_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nimport DocsRating from '@site/src/core/DocsRating';\nimport {OssOnly, FbInternalOnly} from 'docusaurus-plugin-internaldocs-fb/internal';\n```\n\n----------------------------------------\n\nTITLE: JSON Response with Pagination Cursors\nDESCRIPTION: The JSON response showing the first two ships in the Rebels faction with cursor information that can be used for pagination in subsequent queries.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/guides/graphql-server-specification.md#2025-04-18_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"rebels\": {\n    \"name\": \"Alliance to Restore the Republic\",\n    \"ships\": {\n      \"edges\": [\n        {\n          \"cursor\": \"YXJyYXljb25uZWN0aW9uOjA=\",\n          \"node\": {\n            \"name\": \"X-Wing\"\n          }\n        },\n        {\n          \"cursor\": \"YXJyYXljb25uZWN0aW9uOjE=\",\n          \"node\": {\n            \"name\": \"Y-Wing\"\n          }\n        }\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Operation Data with Type-Safe Response in Flow\nDESCRIPTION: This example shows how Relay's generated Flow types for query responses enable type-safe data access. The response data from useLazyLoadQuery is typed according to the GraphQL query structure.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/guides/type-emission.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * export type ExampleQuery$variables = {\n *   +artistID: string,\n * }\n * export type ExampleQuery$data = {\n *   +artist: {\n *     +name: ?string,\n *   }\n * }\n * export type ExampleQuery = {\n *   +variables: ExampleQuery$variables,\n *   +response: ExampleQuery$data,\n * }\n */\n\n// data is of type ExampleQuery$data\nconst data = useLazyLoadQuery(\n  graphql`\n    query ExampleQuery($artistID: ID!) {\n      artist(id: $artistID) {\n        name\n      }\n    }\n  `,\n  {artistID: 'banksy'},\n);\n\nreturn props.artist && <div>{props.artist.name} is great!</div>\n```\n\n----------------------------------------\n\nTITLE: Sample GraphQL Query Response\nDESCRIPTION: Displays the JSON response structure returned by the server after fetching a GraphQL query with variables.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/guided-tour/rendering/variables.md#2025-04-18_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"user\": {\n      \"id\": \"4\",\n      \"name\": \"Mark Zuckerberg\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Components for Documentation\nDESCRIPTION: This snippet imports the DocsRating component from the Docusaurus core and two specific components from an internal plugin. These components are essential for rendering ratings in documentation pages.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/guided-tour/managing-data-outside-react/reading-queries.md#2025-04-18_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport DocsRating from '@site/src/core/DocsRating';\nimport {OssOnly, FbInternalOnly} from 'docusaurus-plugin-internaldocs-fb/internal';\n\n\n<DocsRating />\n```\n\n----------------------------------------\n\nTITLE: Defining GraphQL Fragment with @match Directive for 3D in Relay\nDESCRIPTION: This GraphQL fragment demonstrates how to use the @match directive to specify data-driven dependencies for rendering comments. It includes module annotations for loading dynamic components.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/guides/data-driven-dependencies/server-3d.md#2025-04-18_snippet_7\n\nLANGUAGE: graphql\nCODE:\n```\nfragment Comment_comment on Comment {\n  comment_content_renderer @match {\n    ...CommentMarkdownRenderer_comment\n      @module(name: \"CommentMarkdownRenderer.react\")\n\n    ...CommentPlaintextRenderer_comment\n      @module(name: \"CommentPlaintextRenderer.react\")\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Sidebar Component to App in TypeScript\nDESCRIPTION: This snippet shows how to import and add the Sidebar component to the main App component in TypeScript.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/tutorial/refetchable-fragments.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// change-line\nimport Sidebar from './Sidebar';\n\nexport default function App(): React.ReactElement {\n  return (\n    <RelayEnvironment>\n      <React.Suspense fallback={<LoadingSpinner />}>\n        <div className=\"app\">\n          <Newsfeed />\n          // change-line\n          <Sidebar />\n        </div>\n      </React.Suspense>\n    </RelayEnvironment>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Including a Fragment Without Arguments (Using Default Values)\nDESCRIPTION: Component that includes a fragment without passing any arguments, which causes the fragment to use its declared default values. This demonstrates how default values simplify fragment composition.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v13.0.0/guided-tour/rendering/variables.md#2025-04-18_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nfunction UserComponent(props) {\n  const data = useFragment(\n    graphql`\n      fragment UserComponent_user on User {\n        name\n\n        # Do not pass an argument, value for scale will be **`2.0**`**\n        ...PictureComponent_user\n      }\n    `,\n    props.user,\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Query Definition Example\nDESCRIPTION: Example of defining a GraphQL query that composes fragments.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/guides/compiler.md#2025-04-18_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst DictionaryQuery = graphql`\n  query DictionaryQuery {\n    dictionary {\n      ...DictionaryComponent_word\n    }\n  }\n`\n```\n\n----------------------------------------\n\nTITLE: Getting the Root Record in Relay Store with JavaScript\nDESCRIPTION: Explains how to obtain the root RecordProxy from the Relay store using the `getRoot` method, mainly used for accessing a document's root query records.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/api-reference/relay-runtime/store.md#2025-04-18_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nconst root = store.getRoot();\nconst viewer = root.getLinkedRecord('viewer');\n```\n\n----------------------------------------\n\nTITLE: Refetching Empire by Node ID in GraphQL\nDESCRIPTION: Demonstrates how to refetch information about the Empire using its unique node ID in a GraphQL query.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/guides/graphql-server-specification.md#2025-04-18_snippet_4\n\nLANGUAGE: graphql\nCODE:\n```\nquery EmpireRefetchQuery { node(id: \"RmFjdGlvbjoy\") { id ... on Faction { name } } }\n```\n\n----------------------------------------\n\nTITLE: Applying an optimistic update with GraphQLMutation in JavaScript\nDESCRIPTION: Demonstrates how to apply an optimistic update using the applyOptimistic method of GraphQLMutation. It includes defining an optimistic query and response object.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-classic/Classic-APIReference-GraphQLMutation.md#2025-04-18_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst optimisticQuery = Relay.QL`mutation FeedbackLikeOptimisticUpdate {\n  feedbackLike(input: $input) {\n    clientMutationId\n    feedback {\n      doesViewerLike\n      id\n    }\n  }\n}`;\nconst optimisticResponse = {\n  feedback: {\n    doesViewerLike: true,\n    id: 'aFeedbackId',\n    __typename: 'Feedback',\n  },\n};\n\nconst transaction = mutation.applyOptimistic(\n  optimisticQuery,\n  optimisticResponse,\n);\n```\n\n----------------------------------------\n\nTITLE: Querying GraphQL Connections with Relay\nDESCRIPTION: This GraphQL snippet demonstrates querying the first ship for the rebels using Relay's connection model. Requires a GraphQL server implementation supporting connections and pagination. The focus is on slicing the result set to get only the first record.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-experimental/GraphQL-ServerSpecification.md#2025-04-18_snippet_5\n\nLANGUAGE: graphql\nCODE:\n```\nquery RebelsShipsQuery {\n  rebels {\n    name,\n    ships(first: 1) {\n      edges {\n        node {\n          name\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining MutationParameters Type in Relay - JavaScript\nDESCRIPTION: This TypeScript type, MutationParameters, is structured to hold the parameters necessary for a mutation, including response data and variables. It allows the handling of optional rawResponse data, facilitating flexible mutation executions in Relay.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v13.0.0/api-reference/types/MutationConfig.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ntype MutationParameters = {\n  response: Object,\n  variables: Object,\n  rawResponse?: Object,\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Fragment Arguments with @argumentDefinitions in GraphQL\nDESCRIPTION: Shows how to use the @argumentDefinitions directive to define local arguments for a GraphQL fragment, including their types.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/glossary/glossary.md#2025-04-18_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\nfragment Store_story on Story\n  @argumentDefinitions(storyId: {type: \"ID!\"}) {\n  # etc\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Package.json for Relay Compilation\nDESCRIPTION: Script configuration in package.json for running the Relay compiler\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-experimental/Introduction-InstallationAndSetup.md#2025-04-18_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n\"scripts\": {\n  \"relay\": \"relay-compiler --src ./src --schema ./schema.graphql\"\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Components for Docs Rating in Docusaurus\nDESCRIPTION: This snippet imports the DocsRating component from the site core and some specific internal dependencies from the Docusaurus plugin. It is intended to display a rating component on documentation pages. The main dependencies include the DocsRating component and the internal Docusaurus functionalities needed for Facebook's internal documentation.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v13.0.0/guided-tour/managing-data-outside-react/prefetching-queries.md#2025-04-18_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport DocsRating from '@site/src/core/DocsRating';\nimport {OssOnly, FbInternalOnly} from 'docusaurus-plugin-internaldocs-fb/internal';\n\n<DocsRating />\n```\n\n----------------------------------------\n\nTITLE: Configuring Relay Artifact Directory in package.json\nDESCRIPTION: Configuration for specifying the artifact directory in package.json to enable strict fragment reference type-information. Sets the artifactDirectory to store all generated files in a single location.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/guides/type-emission.md#2025-04-18_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"relay\": {\n    \"artifactDirectory\": \"./src/__generated__\",\n    ...\n  },\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Using Relay with babel-plugin-macros\nDESCRIPTION: This code demonstrates how to integrate Relay with `babel-plugin-macros`, offering an alternative to `babel-plugin-relay`.  It showcases the necessary import statement to use Relay's macro.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v13.0.0/getting-started/installation-and-setup.md#2025-04-18_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n\"const graphql = require('babel-plugin-relay/macro');\"\n```\n\n----------------------------------------\n\nTITLE: Fragment References Type Emission in Relay with Flow\nDESCRIPTION: This snippet explains how Relay emits type information for fragment references using Flow. It shows how a parent component receives a fragment reference from a child component's fragment and passes it as a prop. This ensures type safety when composing fragments and passing data between components.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/guides/type-emission.md#2025-04-18_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ExampleFragmentComponent } from \"./ExampleFragmentComponent\"\n\n/**\n * import type { ExampleFragmentComponent_artist$fragmentType } from \"ExampleFragmentComponent_artist.graphql\";\n *\n * export type ExampleQuery$data = {\n *   +artist: ?{\n *     +name: ?string,\n *     +$fragmentSpreads: ExampleFragmentComponent_artist$fragmentType,\n *   }\n * };\n * export type ExampleQuery$variables = {\n *   +artistID: string,\n * }\n * export type ExampleQuery = {\n *   +variables: ExampleQuery$variables,\n *   +response: ExampleQuery$data,\n * }\n */\n\n// data is of type ExampleQuery$data\nconst data = useLazyLoadQuery(\n  graphql`\n    query ExampleQuery($artistID: ID!) {\n      artist(id: $artistID) {\n        name\n        ...ExampleFragmentComponent_artist\n      }\n    }\n  `,\n  {artistID: 'banksy'},\n);\n\n// Here only `data.artist.name` is directly visible,\n// the marker prop $fragmentSpreads indicates that `data.artist`\n// can be used for the component expecting this fragment spread.\nreturn <ExampleFragmentComponent artist={data.artist} />;\n```\n\n----------------------------------------\n\nTITLE: Using @waterfall directive with Relay Resolvers\nDESCRIPTION: Example of using the @waterfall directive on a field in a GraphQL fragment. This directive is required when reading client-defined edge fields that point to server types, highlighting that a second server request will be needed to fetch the data.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/api-reference/graphql/graphql-directives.md#2025-04-18_snippet_7\n\nLANGUAGE: graphql\nCODE:\n```\nfragment EditPost on DraftPost {\n  author @waterfall {\n    name\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Converting QueryRenderer to useLazyLoadQuery in React Relay\nDESCRIPTION: This snippet shows how to transition from using QueryRenderer to the useLazyLoadQuery hook, which fetches data during rendering. The conversion requires rendering a RelayEnvironmentProvider and modifying the component to use useLazyLoadQuery instead.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/migration-and-compatibility/relay-hooks-and-legacy-container-apis.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n<RelayEnvironmentProvider environment={MyAppEnvironment}>\n  <App />\n</RelayEnvironmentProvider>\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as React from 'React';\nimport {graphql, QueryRenderer} from 'react-relay';\n\nexport default function Home() {\n  return (\n    <QueryRenderer\n      environment={MyAppEnvironment}\n      query={graphql`\n        query HomeQuery($id: ID!) {\n          user(id: $id) {\n            name\n          }\n        }\n      `}\n      variables={{id: 4}}\n      render={(props, error) => {\n        if (error) {\n          return <Error />;\n        }\n        if (!props) {\n          return <Loading />;\n        }\n        return <h1>{props.user?.name}</h1>\n      }}\n    />\n  );\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as React from 'React';\nimport {graphql, useLazyLoadQuery} from 'react-relay';\n\nexport default function Home() {\n  const data = useLazyLoadQuery(\n    graphql`\n      query HomeQuery($id: ID!) {\n        user(id: $id) {\n          name\n        }\n      }\n    `,\n    {id: 4},\n  );\n\n return <h1>{data.user?.name}</h1>;\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\n<ErrorBoundary renderError={Error}>\n  <Suspense fallback={<Loading />}>\n    <Home />\n  </Suspense>\n</ErrorBoundary>\n```\n\n----------------------------------------\n\nTITLE: Fetching Data with useLazyLoadQuery in React\nDESCRIPTION: This code snippet shows how to use the `useLazyLoadQuery` hook from `react-relay` to fetch data using the defined GraphQL query. The `useLazyLoadQuery` hook takes the `NewsfeedQuery` and an empty object for variables as arguments, and returns the data fetched from the server.  The fetched data is then used to populate the `Story` component.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/tutorial/queries-1.md#2025-04-18_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useLazyLoadQuery } from \"react-relay\";\n\nexport default function Newsfeed({}) {\n  const data = useLazyLoadQuery(\n    // color1\n    NewsfeedQuery,\n    // color2\n    {},\n  );\n  const story = data.topStory;\n  // As before:\n  return (\n    <div className=\"newsfeed\">\n      <Story story={story} />\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Root Record in Relay Store\nDESCRIPTION: The `getRoot` method returns the `RecordProxy` representing the root of the GraphQL document, providing a base for accessing and mutating root-level data.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/api-reference/relay-runtime/store.md#2025-04-18_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst root = store.getRoot();\n```\n\n----------------------------------------\n\nTITLE: REST Data Fetching Implementation\nDESCRIPTION: Example showing how to fetch a list of stories using traditional REST approach, demonstrating the n+1 request problem.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/principles-and-architecture/thinking-in-graphql.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nrest.get('/stories').then(stories =>\n  Promise.all(stories.map(story =>\n    rest.get(story.href)\n  ))\n).then(stories => {\n  console.log(stories);\n});\n```\n\n----------------------------------------\n\nTITLE: Refetching Empire Faction by ID\nDESCRIPTION: This GraphQL query refetches the Empire faction using its ID through the `node` field, demonstrating the refetching capability with a different entity.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v13.0.0/guides/graphql-server-specification.md#2025-04-18_snippet_7\n\nLANGUAGE: graphql\nCODE:\n```\n\"\"\"\nquery EmpireRefetchQuery {\n  node(id: \"RmFjdGlvbjoy\") {\n    id\n    ... on Faction {\n      name\n    }\n  }\n}\n\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Inconsistent @required Usage in GraphQL Fragment\nDESCRIPTION: Shows an example of inconsistent @required usage in a GraphQL fragment, which would fail to compile due to mismatched declarations.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/guides/required-directive.md#2025-04-18_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\nfragment UserInfo on User {\n  job {\n    ... on Actor {\n      certifications\n    }\n    ... on Lawyer {\n      certifications @required(action: LOG)\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Documentation Page Header in Markdown with JSX\nDESCRIPTION: Front matter and import declarations for the Relay documentation home page, including metadata and custom components.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/home.md#2025-04-18_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\nid: home\ntitle: Home\nslug: /\ndescription: Relay documentation landing page\nkeywords:\n- relay\n- graphql\n- data\n- introduction\n- home\n---\n\n# Relay Docs\n\nimport DocsRating from '@site/src/core/DocsRating';\nimport {OssOnly, FbInternalOnly} from 'docusaurus-plugin-internaldocs-fb/internal';\n```\n\n----------------------------------------\n\nTITLE: Sample JSON Response from GraphQL Query\nDESCRIPTION: Example of the JSON structure returned by the server in response to the GraphQL query, showing the shape of the data that matches the query structure.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/tutorial/queries-1.md#2025-04-18_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topStory\": {\n    \"title\": \"Local Yak Named Yak of the Year\",\n    \"summary\": \"The annual Yak of the Year awards ceremony ...\",\n    \"poster\": {\n      \"name\": \"Baller Bovine Board\",\n      \"profilePicture\": {\n        \"url\": \"/images/baller_bovine_board.jpg\"\n      }\n    },\n    \"thumbnail\": {\n      \"url\": \"/images/max_the_yak.jpg\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Connection __id in a GraphQL Fragment\nDESCRIPTION: This snippet demonstrates how to query for a connection's __id field, which can be used to access the connection record in the store.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/guided-tour/updating-data/updating-connections.md#2025-04-18_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst fragmentData = useFragment(\n  graphql`\n    fragment StoryComponent_story on Story {\n      comments @connection(key: \"StoryComponent_story_comments_connection\") {\n        # Query for the __id field\n        __id\n\n        # ...\n      }\n    }\n  `,\n  props.story,\n);\n\n// Get the connection record id\nconst connectionID = fragmentData?.comments?.__id;\n```\n\n----------------------------------------\n\nTITLE: Store Publishing Flow Diagram\nDESCRIPTION: ASCII diagram depicting how normalized records are published to the store, updating records while deferring subscription notifications.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/principles-and-architecture/runtime-architecture.md#2025-04-18_snippet_2\n\nLANGUAGE: ascii-diagram\nCODE:\n```\n                        publish\n                           │\n                           ▼\n             ┌───────────────────────────┐\n             │           Store           │\n             │ ┌───────────────────────┐ │\n             │ │     RecordSource      │ │\n             │ │                       │ │\n             │ │┌──────┐┌──────┐┌─────┐│ │\n             │ ││Record││Record││ ... ││ │ <--- records are updated\n             │ │└──────┘└──────┘└─────┘│ │\n             │ └───────────────────────┘ │\n             │ ┌───────────────────────┐ │\n             │ │     Subscriptions     │ │\n             │ │                       │ │\n             │ │┌──────┐┌──────┐┌─────┐│ │\n             │ ││ Sub. ││ Sub. ││ ... ││ │ <--- subscriptions do not fire yet\n             │ │└──────┘└──────┘└─────┘│ │\n             │ └───────────────────────┘ │\n             └───────────────────────────┘\n```\n\n----------------------------------------\n\nTITLE: Defining ResolverErrorEvent Type in TypeScript\nDESCRIPTION: This snippet defines the structure of the error event object passed to the relayFieldLogger when a resolver throws an error. It includes the kind of error, owner fragment/query name, field path, and the error object.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/guides/relay-resolvers/errors.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype ResolverErrorEvent = {\n  kind: 'relay_resolver.error',\n  // The name of the fragment/query in which the field was read\n  owner: string,\n  // The path from the owner root to the field which threw the error\n  fieldPath: string,\n  // The error thrown by the resolver\n  error: Error,\n}\n```\n\n----------------------------------------\n\nTITLE: JSON Response for Empire Query\nDESCRIPTION: This JSON response shows the result of the EmpireQuery, providing the ID and name of the Galactic Empire.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v13.0.0/guides/graphql-server-specification.md#2025-04-18_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n\"\"\"\n{\n  \"empire\": {\n    \"id\": \"RmFjdGlvbjoy\",\n    \"name\": \"Galactic Empire\"\n  }\n}\n\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Local Persisted Queries Configuration in JSON\nDESCRIPTION: This JSON configuration demonstrates setting up the relay compiler and persistence of queries locally. It utilizes a file to map operation IDs to full operation texts and includes a choice of MD5, SHA256, or SHA1 algorithms.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/guides/persisted-queries.md#2025-04-18_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n\"scripts\": {\n  \"relay\": \"relay-compiler\"\n},\n\"relay\": {\n  \"src\": \"./src\",\n  \"schema\": \"./schema.graphql\",\n  \"persistConfig\": {\n    \"file\": \"./persisted_queries.json\",\n    \"algorithm\": \"MD5\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Record Data ID in Relay Store\nDESCRIPTION: The `getDataID` method retrieves the unique identifier of the current record within the Relay store, which is critical for referencing and managing specific records.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/api-reference/relay-runtime/store.md#2025-04-18_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nconst id = record.getDataID();\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage of @required THROW in Array Fields\nDESCRIPTION: Demonstrates an anti-pattern where @required(action: THROW) is incorrectly used on individual array items, which could cause entire component failure if any single item is null.\nSOURCE: https://github.com/facebook/relay/blob/main/website/blog/2023-01-03-resilient-relay-apps.mdx#2025-04-18_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nfunction Component({ assetPriceRef }) {\n  const { quotes } = useFragment(\n    graphql`\n      fragment ComponentFragment on AssetPriceData {\n        quotes {\n          # Returns an array of items\n          timestamp\n          price @required(action: THROW)\n        }\n      }\n    `,\n    assetPriceRef,\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Injecting a Task Scheduler in JavaScript\nDESCRIPTION: Demonstrates how to inject a custom task scheduler into Relay. The default implementation is shown, which immediately executes tasks. An example for React Native is also provided, using InteractionManager to schedule tasks after interactions.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-classic/Classic-APIReference-Relay.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nRelay.injectTaskScheduler(task => task());\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar {InteractionManager} = require('react-native');\n\nRelay.injectTaskScheduler(InteractionManager.runAfterInteractions);\n```\n\n----------------------------------------\n\nTITLE: Using Fragment Data in Flow\nDESCRIPTION: Illustrates how to use emitted types for fragment data and references in a Flow-typed React component using useFragment.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/guides/type-emission.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * export type ExampleFragmentComponent_artist$data = {\n *   +name: string\n * }\n *\n * export type ExampleFragmentComponent_artist$key = { ... }\n */\n\nimport type { ExampleFragmentComponent_artist$key } from \"__generated__/ExampleFragmentComponent_artist.graphql\"\n\ntype Props = {\n  artist: ExampleFragmentComponent_artist$key,\n};\n\nexport default ExampleFragmentComponent(props) {\n  // data is of type ExampleFragmentComponent_artist$data\n  const data = useFragment(\n    graphql`\n      fragment ExampleFragmentComponent_artist on Artist {\n        biography\n      }\n    `,\n    props.artist,\n  );\n\n  return <div>About the artist: {props.artist.biography}</div>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Environment Prop for Relay.Renderer in JavaScript\nDESCRIPTION: Specifies the environment prop type for Relay.Renderer. It should be an object that conforms to the Relay.Environment interface, such as Relay.Store.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-classic/Classic-APIReference-Renderer.md#2025-04-18_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nenvironment: RelayEnvironment\n```\n\n----------------------------------------\n\nTITLE: Reading and Updating an Updatable Fragment in JavaScript\nDESCRIPTION: Demonstrates how to read an updatable fragment from the store and modify its data.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/api-reference/relay-runtime/store.md#2025-04-18_snippet_26\n\nLANGUAGE: javascript\nCODE:\n```\nconst fragment = graphql`\n  fragment StoryLikeButton_updatable on Story @updatable {\n    likeCount\n    doesViewerLike\n  }\n`;\nconst {\n  updatableData\n} = store.readUpdatableFragment(\n  fragment,\n  story\n);\nupdatableData.likeCount = updatableData.likeCount + 1\n```\n\n----------------------------------------\n\nTITLE: Adding React Keys with GraphQL IDs\nDESCRIPTION: Final implementation showing how to properly key list items using GraphQL node IDs and combine individual fields with fragment spreads.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/tutorial/arrays-lists.md#2025-04-18_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst NewsfeedQuery = graphql`\n  query NewsfeedQuery {\n    topStories {\n      // change-line\n      id\n      ...StoryFragment\n    }\n  }\n`;\n\n...\n\nexport default function Newsfeed({}) {\n  const data = useLazyLoadQuery<NewsfeedQueryType>(NewsfeedQuery, {});\n  const stories = data.topStories;\n  return (\n    <div className=\"newsfeed\">\n      {stories.map(story => (\n        <Story\n          // change-line\n          key={story.id}\n          story={story}\n        />\n      ))}\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Example JSON Response Structure\nDESCRIPTION: Sample JSON response structure showing the shape of data returned by the GraphQL query.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/tutorial/queries-1.md#2025-04-18_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topStory\": {\n    \"title\": \"Local Yak Named Yak of the Year\",\n    \"summary\": \"The annual Yak of the Year awards ceremony ...\",\n    \"poster\": {\n      \"name\": \"Baller Bovine Board\",\n      \"profilePicture\": {\n        \"url\": \"/images/baller_bovine_board.jpg\"\n      }\n    },\n    \"thumbnail\": {\n      \"url\": \"/images/max_the_yak.jpg\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring Parameter Definitions in Relay Route\nDESCRIPTION: Example showing how to declare required parameters in a Relay Route using the paramDefinitions static property.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-classic/Classic-APIReference-Route.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nclass ProfileRoute extends Relay.Route {\n  static paramDefinitions = {\n    userID: {required: true},\n  };\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Mock Resolvers for Scalar Types in Relay Tests\nDESCRIPTION: Example of simple mock resolvers for scalar GraphQL types (ID and String) that return consistent values for testing. This demonstrates the basic pattern for providing default values for scalar fields in test environments.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/guides/testing-relay-components.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  ID() {\n    // Return mock value for a scalar filed with type ID\n    return 'my-id';\n  },\n  String() {\n    // Every scalar field with type String will have this default value\n    return \"Lorem Ipsum\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Avoiding Suspense When Refetching Fragments in Relay\nDESCRIPTION: Implementation showing how to refetch fragment data without triggering Suspense by using fetchQuery to preload data and manually tracking loading state. This approach prevents hiding already rendered content during data refetching.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/guided-tour/refetching/refetching-fragments-with-different-data.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport type {CommentBody_comment$key} from 'CommentBody_comment.graphql';\n\ntype Props = {\n  comment: CommentBody_comment$key,\n};\n\nfunction CommentBody(props: Props) {\n  const [data, refetch] = useRefetchableFragment(\n    graphql`\n      fragment CommentBody_comment on Comment\n      # @refetchable makes it so Relay autogenerates a query for\n      # fetching this fragment\n      @refetchable(queryName: \"CommentBodyRefetchQuery\") {\n        body(lang: $lang) {\n          text\n        }\n      }\n    `,\n    props.comment,\n  );\n\n  const [isRefetching, setIsRefreshing] = useState(false)\n  const refetchTranslation = () => {\n    if (isRefetching) { return; }\n    setIsRefreshing(true);\n\n    // fetchQuery will fetch the query and write\n    // the data to the Relay store. This will ensure\n    // that when we re-render, the data is already\n    // cached and we don't suspend\n    fetchQuery(environment, AppQuery, variables)\n      .subscribe({\n        complete: () => {\n          setIsRefreshing(false);\n\n          // *After* the query has been fetched, we call\n          // refetch again to re-render with the updated data.\n          // At this point the data for the query should\n          // be cached, so we use the 'store-only'\n          // fetchPolicy to avoid suspending.\n          refetch({lang: 'SPANISH'}, {fetchPolicy: 'store-only'});\n        },\n        error: () => {\n          setIsRefreshing(false);\n        }\n      });\n  };\n\n  return (\n    <>\n      <p>{data.body?.text}</p>\n      <Button\n        disabled={isRefetching}\n        onClick={() => refetchTranslation()}>\n        Translate Comment {isRefetching ? <LoadingSpinner /> : null}\n      </Button>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Different Fields in a Subsequent GraphQL Query\nDESCRIPTION: A follow-up GraphQL query example that fetches different fields (age instead of name) from a potentially different best friend object. This illustrates how normalized store updates can lead to missing data when relationships change.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/debugging/why-null.md#2025-04-18_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\nquery OtherQuery {\n  me {\n    best_friend {\n      # new id: 2\n      # Note: name is not fetched here\n      age\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Fragment Argument to ContactsListFragment\nDESCRIPTION: This snippet shows how to add a fragment argument to the ContactsListFragment, allowing it to accept a search parameter.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/tutorial/refetchable-fragments.md#2025-04-18_snippet_2\n\nLANGUAGE: graphql\nCODE:\n```\nconst ContactsListFragment = graphql`\n  fragment ContactsListFragment on Viewer\n    @argumentDefinitions(\n      search: {type: \"String\", defaultValue: null}\n    )\n  {\n    contacts {\n      id\n      ...ContactRowFragment\n    }\n  }\n`;\n```\n\n----------------------------------------\n\nTITLE: Getting Record Data ID in Relay Store\nDESCRIPTION: Example of retrieving the data ID of a record in the Relay Store using the getDataID method of RecordProxy.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/api-reference/relay-runtime/store.md#2025-04-18_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nconst id = record.getDataID();\n```\n\n----------------------------------------\n\nTITLE: Loading Query with useQueryLoader and usePreloadedQuery in JavaScript\nDESCRIPTION: Explains how to use useQueryLoader and usePreloadedQuery for preloading data before rendering. This pattern is useful for improving the performance by fetching data ahead of time. Integrate query loading into components like routing.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/migration-and-compatibility/relay-hooks-and-legacy-container-apis.md#2025-04-18_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport * as React from 'React';\nimport {graphql, usePreloadedQuery} from 'react-relay';\n\nexport default function UserPopover(props) {\n  const data = usePreloadedQuery(\n    graphql`\n      query UserPopoverQuery($id: ID!) {\n        user(id: $id) {\n          name\n        }\n      }\n    `,\n    props.queryRef,\n  );\n\n return <h1>{data.user?.name}</h1>;\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Search Input to ContactsList Component\nDESCRIPTION: Adding a search input to the ContactsList component and state to track the search string.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/tutorial/refetchable-fragments.md#2025-04-18_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n// change-line\nimport SearchInput from './SearchInput';\n\n// change-line\nconst {useState} = React;\n\nfunction ContactsList({viewer}) {\n  const data = useFragment(ContactsListFragment, viewer);\n  // change-line\n  const [searchString, setSearchString] = useState('');\n  // change\n  const onSearchStringChanged = (value: string) => {\n    setSearchString(value);\n  };\n  // end-change\n  return (\n    <Card dim={true}>\n      <h3>Contacts</h3>\n      // change\n      <SearchInput\n        value={searchString}\n        onChange={onSearchStringChanged}\n      />\n      // end-change\n      {data.contacts.map(contact =>\n        <ContactRow key={contact.id} contact={contact} />\n      )}\n    </Card>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Avoiding Suspense when Refetching Queries in Relay\nDESCRIPTION: Implementation that avoids showing Suspense fallback during refetching by using fetchQuery to pre-load data into the Relay store before calling loadQuery with a store-only fetch policy. This technique preserves the current UI while fetching new data.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v13.0.0/guided-tour/refetching/refetching-queries-with-different-data.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * App.react.js\n */\nimport type {AppQuery as AppQueryType} from 'AppQuery.graphql';\n\nconst AppQuery = require('__generated__/AppQuery.graphql');\n\nfunction App(props: Props) {\n  const environment = useRelayEnvironment();\n  const [queryRef, loadQuery] = useQueryLoader<AppQueryType>(\n    AppQuery,\n    props.appQueryRef /* initial query ref */\n  );\n  const [isRefetching, setIsRefetching] = useState(false)\n\n  const refetch = useCallback(() => {\n    if (isRefetching) { return; }\n    setIsRefetching(true);\n\n    // fetchQuery will fetch the query and write\n    // the data to the Relay store. This will ensure\n    // that when we re-render, the data is already\n    // cached and we don't suspend\n    fetchQuery(environment, AppQuery, variables)\n      .subscribe({\n        complete: () => {\n          setIsRefetching(false);\n\n          // *After* the query has been fetched, we call\n          // loadQuery again to re-render with a new\n          // queryRef.\n          // At this point the data for the query should\n          // be cached, so we use the 'store-only'\n          // fetchPolicy to avoid suspending.\n          loadQuery({id: 'different-id'}, {fetchPolicy: 'store-only'});\n        }\n        error: () => {\n          setIsRefetching(false);\n        }\n      });\n  }, [/* ... */]);\n\n  return (\n    <React.Suspense fallback=\"Loading query...\">\n      <MainContent\n        isRefetching={isRefetching}\n        refetch={refetch}\n        queryRef={queryRef}\n      />\n    </React.Suspense>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Avoiding Suspense During Fragment Refetching\nDESCRIPTION: Illustrates a technique to refetch fragments without triggering Suspense by manually managing loading state and using `fetchQuery`. This approach allows rendering a loading spinner within the component without hiding the existing content.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/guided-tour/refetching/refetching-fragments-with-different-data.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport type {CommentBody_comment$key} from 'CommentBody_comment.graphql';\n\ntype Props = {\n  comment: CommentBody_comment$key,\n};\n\nfunction CommentBody(props: Props) {\n  const [data, refetch] = useRefetchableFragment(\n    graphql`\n      fragment CommentBody_comment on Comment\n      # @refetchable makes it so Relay autogenerates a query for\n      # fetching this fragment\n      @refetchable(queryName: \"CommentBodyRefetchQuery\") {\n        body(lang: $lang) {\n          text\n        }\n      }\n    `,\n    props.comment,\n  );\n\n  const [isRefetching, setIsRefreshing] = useState(false)\n  const refetchTranslation = () => {\n    if (isRefetching) { return; }\n    setIsRefreshing(true);\n\n    // fetchQuery will fetch the query and write\n    // the data to the Relay store. This will ensure\n    // that when we re-render, the data is already\n    // cached and we don't suspend\n    fetchQuery(environment, AppQuery, variables)\n      .subscribe({\n        complete: () => {\n          setIsRefreshing(false);\n\n          // *After* the query has been fetched, we call\n          // refetch again to re-render with the updated data.\n          // At this point the data for the query should\n          // be cached, so we use the 'store-only'\n          // fetchPolicy to avoid suspending.\n          refetch({lang: 'SPANISH'}, {fetchPolicy: 'store-only'});\n        }\n        error: () => {\n          setIsRefreshing(false);\n        }\n      });\n  };\n\n  return (\n    <>\n      <p>{data.body?.text}</p>\n      <Button\n        disabled={isRefetching}\n        onClick={() => refetchTranslation()}>\n        Translate Comment {isRefetching ? <LoadingSpinner /> : null}\n      </Button>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: GraphQL Data Fetching Implementation\nDESCRIPTION: Example showing how to fetch the same data using GraphQL in a single request.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/principles-and-architecture/thinking-in-graphql.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ngraphql.get(`query { stories { id, text } }`).then(\n  stories => {\n    console.log(stories);\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Updated Cache Entry After Data Change\nDESCRIPTION: Pseudo-code showing how only the author's photo field in the cache would change after an update, demonstrating the efficiency of normalized data.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/principles-and-architecture/thinking-in-graphql.md#2025-04-18_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nMap {\n  ...\n  2: Map {\n    ...\n    photo: 'http://.../photo2.jpg',\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Defining RenderFetched Function Type\nDESCRIPTION: Type definition for renderFetched callback that handles successful data fetching.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-classic/Classic-APIReference-RootContainer.md#2025-04-18_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nrenderFetched(\n  data: {[propName: string]: $RelayData},\n  readyState: {stale: boolean}\n): ?ReactElement\n```\n\n----------------------------------------\n\nTITLE: Creating an Observable in Relay for Asynchronous Data Handling\nDESCRIPTION: This code illustrates how to create an observable using Relay for managing asynchronous data. It shows the ability to access data synchronously if it is already available, enabling efficient rendering of components without suspending.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/glossary/glossary.md#2025-04-18_snippet_12\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst completedObservable = Observable.from(\"Relay is awesome!\");\nlet valueFromObservable;\nobservable.subscribe({\n  next: (value) => {\n    valueFromObservable = value;\n    /* this will execute in the same tick */\n  },\n});\nconsole.log(valueFromObservable); // logs out \"Relay is awesome!\"\n```\n\n----------------------------------------\n\nTITLE: Create React App with Yarn\nDESCRIPTION: This code snippet demonstrates how to create a new React application using Create React App with Yarn. It initializes a basic React project structure and installs necessary dependencies.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/getting-started/step-by-step-guide.md#2025-04-18_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n\"yarn create react-app your-app-name\"\n```\n\n----------------------------------------\n\nTITLE: GraphQL Error Type Definition\nDESCRIPTION: Example of modeling error information in GraphQL schema for user-friendly error handling.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/guided-tour/rendering/error-states.md#2025-04-18_snippet_3\n\nLANGUAGE: graphql\nCODE:\n```\ntype Error {\n  # User friendly message\n  message: String!\n}\n\ntype Foo {\n  bar: Result | Error\n}\n```\n\n----------------------------------------\n\nTITLE: GraphQL Fragment with Conflicting @required Actions\nDESCRIPTION: This GraphQL fragment demonstrates a scenario where a parent `@required` field has a more severe action (THROW) than its child field (LOG).  The Relay compiler will throw an error because the nullness from the child will bubble up and trigger the parent's more severe action.  To fix this, the parent action must be no more severe than that of the child.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/guides/required-directive.md#2025-04-18_snippet_4\n\nLANGUAGE: graphql\nCODE:\n```\nfragment MyUser on User {\n  profile_picture @required(action: THROW) {\n    url @required(action: LOG)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using @alias Directive in GraphQL Fragment\nDESCRIPTION: Example demonstrating how to use the @alias directive to give an inline fragment a custom alias name.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/api-reference/graphql/graphql-directives.md#2025-04-18_snippet_5\n\nLANGUAGE: graphql\nCODE:\n```\nfragment MyFragment on User {\n  ... on User @alias(as: \"myGreatAlias\") {\n    name\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Error: Missing Handler for deleteRecord in RelayModernEnvironment\nDESCRIPTION: This error occurs when the Relay environment expects a handler for the 'deleteRecord' mutation, but none is provided. It suggests that the handlerProvider is not correctly configured to handle deleteRecord mutations.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/debugging/declarative-mutation-directives.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nRelayModernEnvironment: Expected a handler to be provided for handle `deleteRecord`.\n```\n\n----------------------------------------\n\nTITLE: Defining Relay Store Interface Methods\nDESCRIPTION: The code snippets define the methods available in the `RecordSourceSelectorProxy` interface, which provides an API to manipulate client-side data in the Relay store, such as creating, retrieving, and deleting records.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/api-reference/relay-runtime/store.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ninterface RecordSourceSelectorProxy {\n  create(dataID: string, typeName: string): RecordProxy;\n  delete(dataID: string): void;\n  get(dataID: string): ?RecordProxy;\n  getRoot(): RecordProxy;\n  getRootField(fieldName: string): ?RecordProxy;\n  getPluralRootField(fieldName: string): ?Array<?RecordProxy>;\n  invalidateStore(): void;\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Data from a Completed Observable in JavaScript\nDESCRIPTION: This snippet demonstrates how to synchronously access data from a completed Observable in JavaScript. It shows the advantage of Observables over Promises in allowing immediate access to data if it's already available.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v13.0.0/glossary/glossary.md#2025-04-18_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nconst completedObservable = Observable.from(\"Relay is awesome!\");\nlet valueFromObservable;\nobservable.subscribe({\n  next: (value) => {\n    valueFromObservable = value;\n    /* this will execute in the same tick */\n  },\n});\nconsole.log(valueFromObservable); // logs out \"Relay is awesome!\"\n```\n\n----------------------------------------\n\nTITLE: Applying Mutations with Relay Store\nDESCRIPTION: Definition of the applyUpdate static method signature showing the required parameters and types for creating uncommitted mutation transactions.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-classic/Classic-APIReference-Store.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nstatic applyUpdate(mutation: RelayMutation, callbacks: {\n  onFailure?: (transaction: RelayMutationTransaction) => void;\n  onSuccess?: (response: Object) => void;\n}): RelayMutationTransaction\n\n```\n\n----------------------------------------\n\nTITLE: GraphQL Query with @required Directive\nDESCRIPTION: This GraphQL query demonstrates the use of the `@required` directive on the `name` field. If the `name` field is null at runtime, Relay will return `{ viewer: null }`, effectively making the `viewer` field null as well. This indicates that the `viewer` data is considered useless without a `name`.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v13.0.0/guides/required-directive.md#2025-04-18_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nquery MyQuery {\n  viewer {\n    name @required(action: LOG)\n    age\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: GraphQL Schema Definition\nDESCRIPTION: Example of a GraphQL schema file defining types and relationships for a dictionary API.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/getting-started/compiler.md#2025-04-18_snippet_2\n\nLANGUAGE: graphql\nCODE:\n```\nschema {\n  query: Root\n}\n\ntype Root {\n  dictionary: [Word]\n}\n\ntype Word {\n  id: String!\n  definition: WordDefinition\n}\n\ntype WordDefinition {\n  text: String\n  image: String\n}\n```\n\n----------------------------------------\n\nTITLE: Example of FlattenTransform in GraphQL\nDESCRIPTION: Demonstrates how the FlattenTransform reduces extraneous levels of indirection in a query by inlining fields from anonymous fragments that match the parent type. This optimization reduces duplicate field processing.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/principles-and-architecture/compiler-architecture.md#2025-04-18_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\n# before: `id` is processed twice\nfoo { # type FooType\n   id\n   ... on FooType { # matches the parent type, so this is extraneous\n     id\n   }\n }\n\n # after: `id` is processed once\n foo {\n   id\n }\n```\n\n----------------------------------------\n\nTITLE: Assigning from Abstract Field using Inline Fragment in Relay\nDESCRIPTION: Demonstrates assigning a 'Node' type to a 'User' type by using inline fragments in a Relay environment. It shows how to refine a node to a user and ensure proper type-checking with GraphQL and JavaScript. It requires the use of 'useRelayEnvironment' and 'commitLocalUpdate'.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/guided-tour/updating-data/imperatively-modifying-linked-fields.md#2025-04-18_snippet_7\n\nLANGUAGE: js\nCODE:\n```\nconst data = useFragment(graphql`\n  fragment AssignBestFriendButton_someType on Query {\n    node(id: \"4\") {\n      ... on User {\n        __typename\n        ...AssignableBestFriendButton_assignable_user\n      }\n    }\n  }\n`, queryRef);\n\nconst environment = useRelayEnvironment();\nconst onClick = () => {\n  const updatableData = commitLocalUpdate(\n    environment,\n    (store: RecordSourceSelectorProxy) => {\n      const {updatableData} = store.readUpdatableQuery(\n          graphql`\n            query AssignBestFriendButtonUpdatableQuery\n            @updatable {\n              viewer {\n                best_friend {\n                  ...AssignableBestFriendButton_assignable_user\n                }\n              }\n            }\n          `,\n          {}\n        );\n\n      if (data.node != null && data.node.__typename === \"User\" && updatableData.viewer != null) {\n        updatableData.viewer.best_friend = data.node;\n      }\n    }\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Implement Infinite Scrolling in React with Relay\nDESCRIPTION: This code snippet demonstrates how to implement infinite scrolling in a React component using Relay's usePaginationFragment. It establishes a Newsfeed component that retrieves query data and uses the InfiniteScrollTrigger component to detect when the user has reached the bottom of the page. The component then loads additional stories, creating the effect of an infinite scroll. Dependencies include React and Relay, specifically the usePaginationFragment and useLazyLoadQuery hooks. Key parameters include queryData, hasNext, and isLoadingNext.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/tutorial/connections-pagination.md#2025-04-18_snippet_11\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport InfiniteScrollTrigger from \"./InfiniteScrollTrigger\";\n\nfunction Newsfeed() {\n  const queryData = useLazyLoadQuery<NewsfeedQueryType>(\n    NewsfeedQuery,\n    {},\n  );\n  const {\n    data,\n    loadNext,\n    hasNext,\n    isLoadingNext,\n  } = usePaginationFragment(NewsfeedContentsFragment, queryData);\n  function onEndReached() {\n    loadNext(1);\n  }\n  const storyEdges = data.viewer.newsfeedStories.edges;\n  return (\n    <div className=\"newsfeed\">\n      {storyEdges.map(storyEdge =>\n        <Story key={storyEdge.node.id} story={storyEdge.node} />\n      )}\n      <InfiniteScrollTrigger\n        onEndReached={onEndReached}\n        hasNext={hasNext}\n        isLoadingNext={isLoadingNext}\n      />\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Fragments in RelayContainer (JavaScript)\nDESCRIPTION: Example of defining data requirements using GraphQL fragments in a RelayContainer. This snippet shows how to declare a fragment for a 'ship' prop that requests the 'name' field.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-classic/Classic-APIReference-Container.md#2025-04-18_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nclass StarWarsShip extends React.Component {\n  render() {\n    return <div>{this.props.ship.name}</div>;\n  }\n}\n\nmodule.exports = Relay.createContainer(StarWarsShip, {\n  fragments: {\n    ship: () => Relay.QL`\n      fragment on Ship {\n        name\n      }\n    `,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Accessing RelayContainer Variables in Component (JavaScript)\nDESCRIPTION: Demonstrates how to access the current variables within a component wrapped by RelayContainer. This example uses the 'size' variable to set an image width.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-classic/Classic-APIReference-Container.md#2025-04-18_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nclass ProfilePicture extends React.Component {\n  render() {\n    var user = this.props.user;\n    return (\n      <View>\n        <Image\n          uri={user.profilePicture.uri}\n          width={this.props.relay.variables.size}\n        />\n      </View>\n    );\n  }\n}\nmodule.exports = Relay.createContainer(ProfilePicture, {\n  initialVariables: {size: 50},\n  fragments: {\n    user: () => Relay.QL`\n      fragment on User { profilePicture(size: $size) { ... } }\n    `,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Using Fragment Arguments Query\nDESCRIPTION: Shows how to use a Relay Resolver field with fragment arguments in a query.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/guides/relay-resolvers.md#2025-04-18_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst data = useLazyLoadQuery(graphql`\n    query myQuery($id: ID, $my_arg: Float!) {\n        node(id: $id) {\n           ... on MyType {\n                my_resolver_field(my_arg: $my_arg)\n           }\n        }\n   }\n`, { id: \"some id\", my_arg: 2.5 });\n```\n\n----------------------------------------\n\nTITLE: Store Creation Example\nDESCRIPTION: Example of creating a new record in the Relay store with a specific dataID and type.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/api-reference/relay-runtime/store.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst record = store.create(dataID, 'Todo');\n```\n\n----------------------------------------\n\nTITLE: Query Variables Type Emission in Relay with Flow\nDESCRIPTION: This snippet demonstrates how Relay emits type information for query variables when using Flow. The `ExampleQuery$variables` type enforces the shape of the variables object, requiring a non-null string `artistID`. The `useLazyLoadQuery` hook fetches data using these typed variables.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/guides/type-emission.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * export type ExampleQuery$variables = {\n *   +artistID: string,\n * }\n * export type ExampleQuery$data = {\n *   +artist: {\n *     +name: ?string,\n *   }\n * }\n * export type ExampleQuery = {\n *   +variables: ExampleQuery$variables,\n *   +response: ExampleQuery$data,\n * }\n */\n\nconst data = useLazyLoadQuery(\n  graphql`\n    query ExampleQuery($artistID: ID!) {\n      artist(id: $artistID) {\n        name\n      }\n    }\n  `,\n  // variables are expected to be of type ExampleQuery$variables\n  {artistID: 'banksy'},\n);\n```\n\n----------------------------------------\n\nTITLE: Using @argumentDefinitions Directive in GraphQL Fragment\nDESCRIPTION: Example of using @argumentDefinitions to specify arguments that a fragment can accept, including optional and required arguments.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/api-reference/graphql/graphql-directives.md#2025-04-18_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\nfragment TodoList_list on TodoList @argumentDefinitions(\n  count: {type: \"Int\", defaultValue: 10},  # Optional argument\n  userID: {type: \"ID\"},                    # Required argument\n) {\n  title\n  todoItems(userID: $userID, first: $count) {  # Use fragment arguments here as variables\n    ...TodoItem_item\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating GraphQL Connections with Conditional Logic in JavaScript\nDESCRIPTION: This code snippet shows the procedure for conditionally updating GraphQL connections in Relay based on filter values. It involves determining whether a new comment should be added to a specific connection instance, for example, only adding comments made by friends to a 'friends-only' connection.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/guided-tour/list-data/updating-connections.md#2025-04-18_snippet_14\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst {ConnectionHandler} = require('relay-runtime');\n\nfunction updater(store: RecordSourceSelectorProxy) {\n  const storyRecord = store.get(storyID);\n\n  const connectionRecordSortedByDate = ConnectionHandler.getConnection(\n    storyRecord,\n    'StoryComponent_story_comments_connection',\n    {order_by: '*DATE_ADDED*', filter_mode: null, language: null}\n  );\n\n  const connectionRecordFriendsOnly = ConnectionHandler.getConnection(\n    storyRecord,\n    'StoryComponent_story_comments_connection',\n    {order_by: null, filter_mode: '*FRIENDS_ONLY*', language: null}\n  );\n\n  const newComment = (...);\n  const newEdge = (...);\n\n  ConnectionHandler.insertEdgeAfter(\n    connectionRecordSortedByDate,\n    newEdge,\n  );\n\n  if (isMadeByFriend(storyRecord, newComment) {\n    ConnectionHandler.insertEdgeAfter(\n      connectionRecordFriendsOnly,\n      newEdge,\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing babel-plugin-relay and graphql using Yarn\nDESCRIPTION: This snippet shows how to install the `babel-plugin-relay` and `graphql` packages as development dependencies using Yarn. These are required for transforming GraphQL code at build time.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v13.0.0/getting-started/installation-and-setup.md#2025-04-18_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\n\"yarn add --dev babel-plugin-relay graphql\"\n```\n\n----------------------------------------\n\nTITLE: Example Mutation Response in JSON\nDESCRIPTION: Sample JSON response from the server after executing a feedback like mutation. Shows the updated state of the feedback object with the new like status and count.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/guided-tour/updating-data/graphql-mutations.md#2025-04-18_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"feedback_like\": {\n    \"feedback\": {\n      \"id\": \"feedback-id\",\n      \"viewer_does_like\": true,\n      \"like_count\": 1,\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Skip Redundant Node Transform\nDESCRIPTION: Advanced query optimization transform that eliminates complex field duplication scenarios, reducing unnecessary field processing in conditional and unconditional selections\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/principles-and-architecture/compiler-architecture.md#2025-04-18_snippet_2\n\nLANGUAGE: graphql\nCODE:\n```\n# before: `id` processed up to 2x\nfoo {\n  bar {\n    id\n  }\n  ... on FooType @include(if: $cond) { # can't be flattened due to conditional\n    id # but this field is guaranteed to be fetched regardless\n  }\n}\n\n# after: `id` processed at most once\nfoo {\n  bar {\n    id\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Garbage Collection Scheduler in Relay\nDESCRIPTION: Shows how to set up a custom garbage collection scheduler for the Relay Store. This allows for fine-tuning when garbage collection should occur, potentially making it less aggressive than the default behavior.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/guided-tour/reusing-cached-data/presence-of-data.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// Sample scheduler function\n// Accepts a callback and schedules it to run at some future time.\nfunction gcScheduler(run: () => void) {\n  resolveImmediate(run);\n}\n\nconst store = new Store(source, {gcScheduler});\n```\n\n----------------------------------------\n\nTITLE: Using @alias Directive in GraphQL\nDESCRIPTION: Shows how to use the @alias directive to give fragment spreads or inline fragments custom aliases.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/api-reference/graphql/graphql-directives.md#2025-04-18_snippet_5\n\nLANGUAGE: graphql\nCODE:\n```\nfragment MyFragment on User {\n  ... on User @alias(as: \"myGreatAlias\") {\n    name\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Including Documentation Rating Component\nDESCRIPTION: JSX component for including a documentation rating widget in the page, allowing users to rate the quality of the documentation.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/guided-tour/managing-data-outside-react/prefetching-queries.md#2025-04-18_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<DocsRating />\n```\n\n----------------------------------------\n\nTITLE: Running the Relay Compiler\nDESCRIPTION: Command to generate new compiled artifacts after making edits to application files using the relay script defined in package.json.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/getting-started/installation-and-setup.md#2025-04-18_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\nyarn run relay\n```\n\n----------------------------------------\n\nTITLE: Creating Edge from Scratch - Relay Runtime\nDESCRIPTION: Illustrates how to create a new edge in Relay when it is not provided by a server response. It involves creating a local comment record and using the ConnectionHandler's createEdge function. Dependencies include relay-runtime, and parameters involve specifying a client-generated ID.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/guided-tour/updating-data/updating-connections.md#2025-04-18_snippet_9\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst {ConnectionHandler} = require('relay-runtime');\n\nfunction updater(store: RecordSourceSelectorProxy) {\n  const storyRecord = store.get(storyID);\n  const connectionRecord = ConnectionHandler.getConnection(\n    storyRecord,\n    'StoryComponent_story_comments_connection',\n  );\n\n  // Create a new local Comment record\n  const id = `client:new_comment:${randomID()}`;\n  const newCommentRecord = store.create(id, 'Comment');\n\n  // Create new edge\n  const newEdge = ConnectionHandler.createEdge(\n    store,\n    connectionRecord,\n    newCommentRecord,\n    'CommentEdge', /* GraphQl Type for edge */\n  );\n\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Babel Configuration for Relay\nDESCRIPTION: Babel configuration file setup for the Relay plugin.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/getting-started/installation-and-setup.md#2025-04-18_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"plugins\": [\n    \"relay\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Generated Flow Types\nDESCRIPTION: Shows how to import Flow types that are automatically generated by the Relay Compiler. These type definitions can be used for type checking in Flow-enabled JavaScript code.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v13.0.0/guides/compiler.md#2025-04-18_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport type {DictionaryComponent_word} from './__generated__/DictionaryComponent_word.graphql';\n```\n\n----------------------------------------\n\nTITLE: Configuring Local Persisted Queries\nDESCRIPTION: Configuration for generating a local JSON file containing a map of operation IDs to full operation text. This allows queries to be persisted locally instead of sending them to a remote endpoint.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/guides/persisted-queries.md#2025-04-18_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"scripts\": {\n    \"relay\": \"relay-compiler\"\n  },\n  \"relay\": {\n    \"src\": \"./src\",\n    \"schema\": \"./schema.graphql\",\n    \"persistConfig\": {\n      \"file\": \"./persisted_queries.json\",\n      \"algorithm\": \"MD5\" // this can be one of MD5, SHA256, SHA1\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Markdown Documentation Structure\nDESCRIPTION: Front matter and content structure for Relay architecture documentation page, including metadata and section organization.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/principles-and-architecture/architecture-overview.md#2025-04-18_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\nid: architecture-overview\ntitle: Architecture Overview\nslug: /principles-and-architecture/architecture-overview/\ndescription: Relay architecture overview guide\nkeywords:\n- architecture\n---\n```\n\n----------------------------------------\n\nTITLE: JavaScript: GraphQL Tagged Node\nDESCRIPTION: Demonstrates the usage of `graphql` template literal tag. Indicates that the tag returns a `GraphQLTaggedNode`.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/glossary/glossary.md#2025-04-18_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\ngraphql`...`\n```\n\n----------------------------------------\n\nTITLE: GraphQL Query for Single Story\nDESCRIPTION: A GraphQL query to fetch details of a specific story by ID.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v13.0.0/principles-and-architecture/thinking-in-graphql.md#2025-04-18_snippet_8\n\nLANGUAGE: graphql\nCODE:\n```\nquery { story(id: \"123\") { id, text, likeCount } }\n```\n\n----------------------------------------\n\nTITLE: Installing Babel Plugin for Relay\nDESCRIPTION: Command to install the Babel plugin for Relay and GraphQL.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/getting-started/installation-and-setup.md#2025-04-18_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\nyarn add --dev babel-plugin-relay graphql\n```\n\n----------------------------------------\n\nTITLE: Using Error Boundary and Suspense with Relay Hooks\nDESCRIPTION: Shows how to handle loading states and error states when using Relay Hooks by wrapping components with React's ErrorBoundary and Suspense components.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v13.0.0/migration-and-compatibility/relay-hooks-and-legacy-container-apis.md#2025-04-18_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<ErrorBoundary renderError={Error}>\n  <Suspense fallback={<Loading />}>\n    <Home />\n  </Suspense>\n</ErrorBoundary>\n```\n\n----------------------------------------\n\nTITLE: Preparing Mutation Variables in Relay\nDESCRIPTION: Example of implementing the required getVariables method to prepare input variables for the server-side mutation.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-classic/Classic-APIReference-Mutation.md#2025-04-18_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nclass DestroyShipMutation extends Relay.Mutation {\n  getVariables() {\n    return {\n      // Assume that the server exposes a `destroyShip` mutation\n      // that accepts a `shipIDToDestroy` variable as input:\n      shipIDToDestroy: this.props.ship.id,\n    };\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining @refetchable Fragment on Interface in GraphQL\nDESCRIPTION: Demonstrates how to use the @refetchable directive on a fragment definition for a server interface type, which was not previously possible.\nSOURCE: https://github.com/facebook/relay/blob/main/website/blog/2023-03-30-relay-15.mdx#2025-04-18_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\n// schema.graphql\n\ninterface RefetchableInterfaceFoo @fetchable(field_name: \"id\") {\n    id: ID!\n}\n\nextend type Query {\n  fetch__RefetchableInterfaceFoo(id: ID!): RefetchableInterfaceFoo\n}\n\n// fragment\n\nfragment RefetchableFragmentFoo on RefetchableInterfaceFoo\n  @refetchable(queryName: \"RefetchableFragmentFooQuery\") {\n  id\n}\n```\n\n----------------------------------------\n\nTITLE: Notifying Subscribers in Relay\nDESCRIPTION: This part of the code visually represents how subscribers are notified of changes after the store is updated, detailing the subscription check process. It follows Relay's notification pattern.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/principles-and-architecture/runtime-architecture.md#2025-04-18_snippet_5\n\nLANGUAGE: none\nCODE:\n```\n                        notify\n                           │\n                           ▼\n             ┌───────────────────────────┐\n             │           Store           │\n             │ ┌───────────────────────┐ │\n             │ │     RecordSource      │ │\n             │ │                       │ │\n             │ │┌──────┐┌──────┐┌─────┐│ │\n             │ ││Record││Record││ ... ││ │\n             │ │└──────┘└──────┘└─────┘│ │\n             │ └───────────────────────┘ │\n             │ ┌───────────────────────┐ │\n             │ │     Subscriptions     │ │\n             │ │                       │ │\n             │ │┌──────┐┌──────┐┌─────┐│ │\n             │ ││  Sub.││  Sub.││  ...││ │ <--- affected subscriptions fire\n             │ │└──────┘└──────┘└─────┘│ │\n             │ └───┼───────┼───────┼───┘ │\n             └─────┼───────┼───────┼─────┘\n                   │       │       │\n                   ▼       │       │\n               callback    │       │\n                           ▼       │\n                       callback    │\n                                   ▼\n                               callback\n```\n\n----------------------------------------\n\nTITLE: Client Schema Extension for User Selection State\nDESCRIPTION: Extends the GraphQL schema to add a client-side selection state for users\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/guided-tour/updating-data/imperatively-modifying-store-data.md#2025-04-18_snippet_2\n\nLANGUAGE: graphql\nCODE:\n```\nextend type User {\n  is_selected: Boolean\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Server for Persisted Queries with express-graphql\nDESCRIPTION: Example of how to set up a server to handle persisted queries using express-graphql and the express-graphql-persisted-queries middleware.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/guides/persisted-queries.md#2025-04-18_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport express from 'express';\nimport {graphqlHTTP} from 'express-graphql';\nimport {persistedQueries} from 'express-graphql-persisted-queries';\nimport queryMap from './path/to/queryMap.json';\n\nconst app = express();\n\napp.use(\n  '/graphql',\n  persistedQueries({\n    queryMap,\n    queryIdKey: 'doc_id',\n  }),\n  graphqlHTTP({schema}),\n);\n```\n\n----------------------------------------\n\nTITLE: Using Mutation Fragments in Relay Queries\nDESCRIPTION: Demonstrates how to use the static getFragment method to include a mutation's fragment in a parent query fragment.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-classic/Classic-APIReference-Mutation.md#2025-04-18_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nclass StoryComponent extends React.Component {\n  /* ... */\n  static fragments = {\n    story: () => Relay.QL`\n      fragment on Story {\n        id,\n        text,\n        ${LikeStoryMutation.getFragment('story')},\n      }\n    `,\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Pending State in Live Resolver (TypeScript)\nDESCRIPTION: Shows how to use suspenseSentinel() in a live resolver to handle pending state when fetching data. The resolver returns a LiveState object with read and subscribe methods to manage the state and notify Relay of updates.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/api-reference/relay-resolvers/runtime-functions.md#2025-04-18_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport {suspenseSentinel} from 'relay-runtime';\n\n/**\n * @RelayResolver Query.myIp: String\n * @live\n */\nexport function myIp(): LiveState<string> {\n  return {\n    read: () => {\n      const state = store.getState();\n      const ipLoadObject = state.ip;\n      if (ipLoadObject.status === \"LOADING\") {\n        return suspenseSentinel();\n      }\n      return state.ip;\n    },\n    subscribe: (callback) => {\n      return store.subscribe(callback);\n    },\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic React ProfilePicture Component\nDESCRIPTION: A basic React component implementation that displays a user's profile photo and size adjustment slider, without data fetching logic.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-classic/Classic-Guides-Containers.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nclass ProfilePicture extends React.Component {\n  render() {\n    // Expects the `user` prop to have the following shape:\n    // {\n    //   profilePhoto: {\n    //     uri,\n    //   }\n    // }\n    var user = this.props.user;\n    return (\n      <View>\n        <Image uri={user.profilePhoto.uri} width={...} />\n        <Slider onChange={value => this.setSize(value)} />\n      </View>\n    );\n  }\n\n  // Update the size of the photo\n  setSize(photoSize) {\n    // TODO: Fetch the profile photo URI for the given size...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing App Component with Sidebar in React/Relay\nDESCRIPTION: Basic App component setup showing how to add a Sidebar component within a Relay environment with suspense handling.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/tutorial/refetchable-fragments.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport Sidebar from './Sidebar';\n\nexport default function App(): React.ReactElement {\n  return (\n    <RelayEnvironment>\n      <React.Suspense fallback={<LoadingSpinner />}>\n        <div className=\"app\">\n          <Newsfeed />\n          <Sidebar />\n        </div>\n      </React.Suspense>\n    </RelayEnvironment>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Error: Missing Handler for deleteRecord in RelayFBHandlerProvider\nDESCRIPTION: This error occurs when the Relay environment's handlerProvider doesn't recognize the 'deleteRecord' handle. It indicates that the handler for deleteRecord mutations is not properly defined or registered.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/debugging/declarative-mutation-directives.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nRelayFBHandlerProvider: No handler defined for `deleteRecord`. [Caught in: An uncaught error was thrown inside `RelayObservable`.]\n```\n\n----------------------------------------\n\nTITLE: Original ContactsList Component Implementation\nDESCRIPTION: The initial implementation of the ContactsList component, using useFragment to read data from the fragment.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/tutorial/refetchable-fragments.md#2025-04-18_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nexport default function ContactsList({ viewer }: Props) {\n  const data = useFragment(ContactsListFragment, viewer);\n  return (\n    <Card dim={true}>\n      <h3>Contacts</h3>\n      {data.contacts.map(contact =>\n        <ContactRow key={contact.id} contact={contact} />\n      )}\n    </Card>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Query with GraphQL Variables\nDESCRIPTION: Defines a GraphQL query that uses a variable $id for fetching user data. The query expects a key-value pair, representing the variable value, to be provided during execution. The id variable is required and of type ID!\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/guided-tour/rendering/variables.md#2025-04-18_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nquery UserQuery($id: ID!) {\n  # The value of $id is used as input to the user() call:\n  user(id: $id) {\n    id\n    name\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining GraphQL Actor Interface\nDESCRIPTION: GraphQL interface definition for Actor type specifying common fields for entities that can post stories\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/tutorial/interfaces-polymorphism.md#2025-04-18_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\ninterface Actor {\n  name: String\n  profilePicture: Image\n  joined: DateTime\n}\n```\n\n----------------------------------------\n\nTITLE: Checking if a Component is a Relay Container in JavaScript\nDESCRIPTION: Shows how to use the isContainer method to determine if a given object is a Relay.Container. This can be useful when conditionally accessing container-specific methods.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-classic/Classic-APIReference-Relay.md#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nvar Component = require('...');\n\nif (Relay.isContainer(Component)) {\n  Component.getFragment('...');\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Unique IDs in Mock Resolvers with JavaScript\nDESCRIPTION: This example shows how to use the generateId function to create unique IDs in mock resolvers, which is useful for generating sequential identifier strings.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/guides/testing-relay-components.md#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  // will generate strings \"my-id-1\", \"my-id-2\", etc.\n  ID(_, generateId) {\n     return `my-id-${generateId()}`;\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying Filters for GraphQL Connection Identity in JavaScript\nDESCRIPTION: This snippet illustrates the definition of a GraphQL connection with specified filters for identity in Relay. By using the @connection directive with specific filters, it controls which arguments affect the connection identity, in this case excluding 'language' from driving connection differentiation.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/guided-tour/list-data/updating-connections.md#2025-04-18_snippet_15\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst {graphql} = require('relay-runtime');\n\nconst storyFragment = graphql`\n  fragment StoryComponent_story on Story {\n    comments(\n      order_by: $orderBy\n      filter_mode: $filterMode\n      language: $language\n    )\n      @connection(\n        key: \"StoryComponent_story_comments_connection\"\n        filters: [\"order_by\", \"filter_mode\"]\n      ) {\n      edges {\n        nodes {\n          body {\n            text\n          }\n        }\n      }\n    }\n  }\n`;\n```\n\n----------------------------------------\n\nTITLE: Inline Data Processing with Relay\nDESCRIPTION: Demonstrates using @inline directive with readInlineData for processing data in non-React functions.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-experimental/Modern-GraphQLInRelay.md#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport {graphql, readInlineData} from 'react-relay';\n\n// non-React function called from React\nfunction processItemData(itemRef) {\n  const item = readInlineData(graphql`\n    fragment processItemData_item on Item @inline {\n      title\n      price\n      creator {\n        name\n      }\n    }\n  `, itemRef);\n  sendToThirdPartyApi({\n    title: item.title,\n    price: item.price,\n    creatorName: item.creator.name\n  });\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// React Component\nfunction MyComponent({item}) {\n  function handleClick() {\n    processItemData(item);\n  }\n\n  return (\n    <button onClick={handleClick}>Process {item.title}</button>\n  );\n}\n\nexport default createFragmentContainer(MyComponent, {\n  item: graphql`\n    fragment MyComponent_item on Item {\n      ...processItemData_item\n      title\n    }\n  `\n});\n```\n\n----------------------------------------\n\nTITLE: Using an Inline Fragment in a React Component\nDESCRIPTION: This example shows how to use the processItemData function in a React component by spreading the inline fragment in the component's fragment to ensure all required data is loaded.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/api-reference/graphql/graphql-directives.md#2025-04-18_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nexport default function MyComponent({item}) {\n  function handleClick() {\n    processItemData(item);\n  }\n\n  const data = useFragment(\n    graphql`\n      fragment MyComponent_item on Item {\n        ...processItemData_item\n        title\n      }\n    `,\n    item\n  );\n\n  return (\n    <button onClick={handleClick}>Process {item.title}</button>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: GraphQL Query Example\nDESCRIPTION: Sample GraphQL query structure showing viewer field with ID.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/api-reference/relay-runtime/store.md#2025-04-18_snippet_4\n\nLANGUAGE: graphql\nCODE:\n```\nviewer {\n  id\n}\n```\n\n----------------------------------------\n\nTITLE: React Component Using Type-Specific Fields\nDESCRIPTION: React component implementation that renders different information based on the Actor type using type refinements\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/tutorial/interfaces-polymorphism.md#2025-04-18_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nimport OrganizationKind from './OrganizationKind';\n\nfunction PosterDetailsHovercardContentsBody({ poster }: Props): React.ReactElement {\n  const data = useFragment(PosterDetailsHovercardContentsBodyFragment, poster);\n  return (\n    <>\n      <Image image={data.profilePicture} width={128} height={128} className=\"posterHovercard__image\" />\n      <div className=\"posterHovercard__name\">{data.name}</div>\n      <ul className=\"posterHovercard__details\">\n         <li>Joined <Timestamp time={poster.joined} /></li>\n         {data.location != null && (\n           <li>{data.location.name}</li>\n         )}\n        {data.organizationKind != null && (\n          <li><OrganizationKind kind={data.organizationKind} /></li>\n         )}\n      </ul>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Flattening GraphQL Query Transform\nDESCRIPTION: Example of FlattenTransform reducing query complexity by removing redundant fragment selections, optimizing query processing by eliminating duplicate field selections\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/principles-and-architecture/compiler-architecture.md#2025-04-18_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\n# before: `id` is processed twice\nfoo { # type FooType\n   id\n   ... on FooType { # matches the parent type, so this is extraneous\n     id\n   }\n }\n\n # after: `id` is processed once\n foo {\n   id\n }\n```\n\n----------------------------------------\n\nTITLE: RecordProxy Interface\nDESCRIPTION: Defines the interface for `RecordProxy`, which serves as an interface to mutate records. It includes methods for getting and setting values, linked records, and invalidating records.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v13.0.0/api-reference/relay-runtime/store.md#2025-04-18_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\ninterface RecordProxy {\n  copyFieldsFrom(sourceRecord: RecordProxy): void;\n  getDataID(): string;\n  getLinkedRecord(name: string, arguments?: ?Object): ?RecordProxy;\n  getLinkedRecords(name: string, arguments?: ?Object): ?Array<?RecordProxy>;\n  getOrCreateLinkedRecord(\n    name: string,\n    typeName: string,\n    arguments?: ?Object,\n  ): RecordProxy;\n  getType(): string;\n  getValue(name: string, arguments?: ?Object): mixed;\n  setLinkedRecord(\n    record: RecordProxy,\n    name: string,\n    arguments?: ?Object,\n  ): RecordProxy;\n  setLinkedRecords(\n    records: Array<?RecordProxy>,\n    name: string,\n    arguments?: ?Object,\n  ): RecordProxy;\n  setValue(value: mixed, name: string, arguments?: ?Object): RecordProxy;\n  invalidateRecord(): void;\n}\n```\n\n----------------------------------------\n\nTITLE: Data Flow: Query Fetching and Record Normalization\nDESCRIPTION: Illustrates the process of retrieving data from a server, extracting records, and normalizing them into a RecordSource\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/principles-and-architecture/runtime-architecture.md#2025-04-18_snippet_1\n\nLANGUAGE: ascii-diagram\nCODE:\n```\n               ┌───────────────────────┐\n               │         Query         │\n               └───────────────────────┘\n                           │\n                           ▼\n                                             ┌ ─ ─ ─ ┐\n                         fetch ◀────────────▶ Server\n                                             └ ─ ─ ─ ┘\n                           │\n                     ┌─────┴───────┐\n                     ▼             ▼\n               ┌──────────┐  ┌──────────┐\n               │  Query   │  │ Response │\n               └──────────┘  └──────────┘\n                     │             │\n                     └─────┬───────┘\n                           │\n                           ▼\n                       normalize\n                           │\n                           ▼\n               ┌───────────────────────┐\n               │     RecordSource      │\n               │                       │\n               │┌──────┐┌──────┐┌─────┐│\n               ││Record││Record││ ... ││\n               │└──────┘└──────┘└─────┘│\n               └───────────────────────┘\n```\n\n----------------------------------------\n\nTITLE: Resolver Surface Configuration for Meta Internal Use\nDESCRIPTION: Configuration example showing the resolver surface setting, which enables Client 3D for data fields determined by Relay Resolvers.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/guides/data-driven-dependencies/configuration.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n\"moduleImportConfig\": {\n    \"dynamicModuleProvider\": {\n        \"mode\": \"JSResource\",\n    },\n    \"surface\": \"resolvers\"\n}\n```\n\n----------------------------------------\n\nTITLE: Running Relay Codemod Help Command\nDESCRIPTION: Shows how to view available codemods in the Relay compiler by running the help command. Displays usage information, available commands, and options for the codemod functionality.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/guides/codemods.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n> relay codemod --help\nApply codemod (verification with auto-applied fixes)\n\nUsage: relay codemod [OPTIONS] [CONFIG] <COMMAND>\n\nCommands:\n  mark-dangerous-conditional-fragment-spreads  Marks unaliased conditional fragment spreads as @dangerously_unaliased_fixme\n  help                                         Print this message or the help of the given subcommand(s)\n\nArguments:\n  [CONFIG]  Compile using this config file. If not provided, searches for a config in package.json under the `relay` key or `relay.config.json` files among other up from the current working directory\n\nOptions:\n  -p, --project <project>  Compile only this project. You can pass this argument multiple times. to compile multiple projects. If excluded, all projects will be compiled\n  -h, --help               Print help\n```\n\n----------------------------------------\n\nTITLE: Single Story Query\nDESCRIPTION: GraphQL query example demonstrating how to fetch a single story by ID.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/principles-and-architecture/thinking-in-graphql.md#2025-04-18_snippet_5\n\nLANGUAGE: graphql\nCODE:\n```\nquery { story(id: \"123\") { id, text, likeCount } }\n```\n\n----------------------------------------\n\nTITLE: Creating React App with NPM/Yarn\nDESCRIPTION: Commands to create a new React application using Create React App with either NPM or Yarn package managers.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-experimental/RelayHooks-StepByStep.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# NPM\nnpx create-react-app your-app-name\n\n# Yarn\nyarn create react-app your-app-name\n```\n\n----------------------------------------\n\nTITLE: Starting React Application\nDESCRIPTION: Commands to navigate to the app directory and start the development server using NPM or Yarn.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-experimental/RelayHooks-StepByStep.md#2025-04-18_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# NPM\ncd your-app-name\nnpm start\n\n# Yarn\ncd your-app-name\nyarn start\n```\n\n----------------------------------------\n\nTITLE: Introspecting a GraphQL Connection Type\nDESCRIPTION: GraphQL introspection query to examine the structure of a connection type, specifically looking at the fields of an 'ExampleConnection' type.\nSOURCE: https://github.com/facebook/relay/blob/main/website/spec/Connections.md#2025-04-18_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\n{\n  __type(name: \"ExampleConnection\") {\n    fields {\n      name\n      type {\n        name\n        kind\n        ofType {\n          name\n          kind\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing React and Relay manually with package manager\nDESCRIPTION: Command to manually install React and Relay dependencies using a package manager like yarn or npm.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/getting-started/installation-and-setup.md#2025-04-18_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nyarn add react react-dom react-relay\n```\n\n----------------------------------------\n\nTITLE: Implementing Loading Spinner with useTransition in React\nDESCRIPTION: This code shows how to improve the loading experience by using useTransition to display a loading spinner while fetching more data.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/tutorial/connections-pagination.md#2025-04-18_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nfunction StoryCommentsSection({story}) {\n  const [isPending, startTransition] = useTransition();\n  const {data, loadNext} = usePaginationFragment(StoryCommentsSectionFragment, story);\n  const onLoadMore = () => startTransition(() => {\n    loadNext(3);\n  });\n  return (\n    <>\n      {data.comments.edges.map(commentEdge =>\n        <Comment comment={commentEdge.node} />\n      )}\n      {data.comments.pageInfo.hasNextPage && (\n        <LoadMoreCommentsButton\n          onClick={onLoadMore}\n          disabled={isPending}\n        />\n      )}\n      {isPending && <CommentsLoadingSpinner />}\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using graphql Tagged Template Literals in JavaScript\nDESCRIPTION: Shows the basic syntax for using graphql tagged template literals in JavaScript, which the Relay Babel transform will convert into require calls for the generated artifacts at build time.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/glossary/glossary.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ngraphql`...`\n```\n\n----------------------------------------\n\nTITLE: Updated Newsfeed Query with Fragment\nDESCRIPTION: Modified GraphQL query using the Story fragment\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/tutorial/fragments-1.md#2025-04-18_snippet_3\n\nLANGUAGE: graphql\nCODE:\n```\nconst NewsfeedQuery = graphql`\n  query NewsfeedQuery {\n    topStory {\n      ...StoryFragment\n    }\n  }\n`;\n```\n\n----------------------------------------\n\nTITLE: Rendering Lists in React Component\nDESCRIPTION: React component implementation showing how to map over GraphQL list data to render multiple Story components.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/tutorial/arrays-lists.md#2025-04-18_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nexport default function Newsfeed({}) {\n  const data = useLazyLoadQuery<NewsfeedQueryType>(NewsfeedQuery, {});\n  // change-line\n  const stories = data.topStories;\n  return (\n    <div className=\"newsfeed\">\n      // change-line\n      {stories.map(story => <Story story={story} />)}\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Relay Hooks\nDESCRIPTION: Example showing how to import Relay Hooks from either the main react-relay module or the dedicated hooks module.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/migration-and-compatibility/upgrading-to-relay-hooks.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport {graphql, useFragment} from 'react-relay'; // or 'react-relay/hooks'\n\n// ...\n```\n\n----------------------------------------\n\nTITLE: Basic GraphQL Fragment Definition\nDESCRIPTION: Shows how to define a simple GraphQL fragment that will be processed by the Relay Compiler to generate corresponding artifacts.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/getting-started/compiler.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ngraphql`\n  fragment MyComponent on Type {\n    field\n  }\n`\n```\n\n----------------------------------------\n\nTITLE: GraphQL Query with Nested Fragment\nDESCRIPTION: Example showing how to use fragments in a nested query structure to fetch profile photos of a user's friends.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-classic/Classic-Guides-Routes.md#2025-04-18_snippet_3\n\nLANGUAGE: graphql\nCODE:\n```\nquery UserQuery {\n  user(id: \"123\") {\n    friends(first: 10) {\n      edges {\n        node {\n          ...UserProfilePhoto,\n        },\n      },\n    },\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying Mutation Operation in Relay\nDESCRIPTION: Shows how to implement the required getMutation method to return the GraphQL mutation operation to be performed.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-classic/Classic-APIReference-Mutation.md#2025-04-18_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nclass LikeStoryMutation extends Relay.Mutation {\n  getMutation() {\n    return this.props.story.viewerDoesLike\n      ? return Relay.QL`mutation {unlikeStory}`\n      : return Relay.QL`mutation {likeStory}`;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Immutable Data Structures in JavaScript\nDESCRIPTION: This example illustrates how immutable data structures could be used to represent the cached data. It shows the limitations of this approach when dealing with normalized data.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/principles-and-architecture/thinking-in-graphql.md#2025-04-18_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nImmutableMap {\n  1: ImmutableMap // same as before\n  2: ImmutableMap {\n    ... // other fields unchanged\n    photo: 'http://.../photo2.jpg',\n  },\n  3: ImmutableMap // same as before\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Record\nDESCRIPTION: Demonstrates how to retrieve a record from the store using the `get` method of the `RecordSourceSelectorProxy`. The method takes a `dataID` (string) and returns a `RecordProxy`.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v13.0.0/api-reference/relay-runtime/store.md#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst record = store.get(dataID);\n```\n\n----------------------------------------\n\nTITLE: Refetching Relay Connection with Different Variables\nDESCRIPTION: This code demonstrates how to refetch a Relay connection with different variables, allowing for dynamic updating of filters and sorting. It uses the refetch function from usePaginationFragment.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/guided-tour/list-data/refetching-connections.md#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nfunction FriendsListComponent(props: Props) {\n  const searchTerm = props.searchTerm;\n  const {data, loadNext, refetch} = usePaginationFragment(\n    graphql`\n      fragment FriendsListComponent_user on User {\n        name\n        friends(\n          order_by: $orderBy,\n          search_term: $searchTerm,\n          after: $cursor,\n          first: $count,\n        ) @connection(key: \"FriendsListComponent_user_friends_connection\") {\n          edges {\n            node {\n              name\n              age\n            }\n          }\n        }\n      }\n    `,\n    props.user,\n  );\n\n  useEffect(() => {\n    refetch({first: 10, search_term: searchTerm}, {fetchPolicy: 'store-or-network'});\n  }, [searchTerm])\n\n  return (\n    <>\n      <h1>Friends of {data.name}:</h1>\n\n      <Button\n        onClick={() =>\n          refetch({first: 10, orderBy: 'DATE_ADDED'});\n        }>\n        Sort by date added\n      </Button>\n\n      <List items={data.friends?.nodes}>...</List>\n      <Button onClick={() => loadNext(10)}>Load more friends</Button>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Refetching Queries Using useQueryLoader in React\nDESCRIPTION: Demonstrates how to use useQueryLoader and loadQuery to refetch a query with different variables. It shows the implementation in both App and MainContent components, including handling the refetch action and rendering the updated data.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/guided-tour/refetching/refetching-queries-with-different-data.md#2025-04-18_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n/**\n * App.react.js\n */\nconst AppQuery = require('__generated__/AppQuery.graphql');\n\nfunction App(props: Props) {\n  const variables = {id: '4'};\n  const [queryRef, loadQuery] = useQueryLoader(\n    AppQuery,\n    props.appQueryRef /* initial query ref */\n  );\n\n  const refetch = useCallback(() => {\n    // Load the query again using the same original variables.\n    // Calling loadQuery will update the value of queryRef.\n    loadQuery({id: 'different-id'});\n  }, [/* ... */]);\n\n  return (\n    <React.Suspense fallback=\"Loading query...\">\n      <MainContent\n        refetch={refetch}\n        queryRef={queryRef}\n      />\n    </React.Suspense>\n  );\n}\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\n/**\n * MainContent.react.js\n */\n\n// Renders the preloaded query, given the query reference\nfunction MainContent(props) {\n  const {refetch, queryRef} = props;\n  const data = usePreloadedQuery(\n    graphql`\n      query AppQuery($id: ID!) {\n        user(id: $id) {\n          name\n          friends {\n            count\n          }\n        }\n      }\n    `,\n    queryRef,\n  );\n\n  return (\n    <>\n      <h1>{data.user?.name}</h1>\n      <div>Friends count: {data.user?.friends?.count}</div>\n      <Button\n        onClick={() => refetch()}>\n        Fetch latest count\n      </Button>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Operation/Fragment Data Type Emission in Relay with Flow\nDESCRIPTION: This snippet illustrates how Relay emits type information for operation or fragment data with Flow. The `ExampleQuery$data` type defines the shape of the data returned by `useLazyLoadQuery`. The example highlights how to use this type information when accessing the fetched data.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/guides/type-emission.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * export type ExampleQuery$variables = {\n *   +artistID: string,\n * }\n * export type ExampleQuery$data = {\n *   +artist: {\n *     +name: ?string,\n *   }\n * }\n * export type ExampleQuery = {\n *   +variables: ExampleQuery$variables,\n *   +response: ExampleQuery$data,\n * }\n */\n\n// data is of type ExampleQuery$data\nconst data = useLazyLoadQuery(\n  graphql`\n    query ExampleQuery($artistID: ID!) {\n      artist(id: $artistID) {\n        name\n      }\n    }\n  `,\n  {artistID: 'banksy'},\n);\n\nreturn props.artist && <div>{props.artist.name} is great!</div>\n```\n\n----------------------------------------\n\nTITLE: Installing babel-plugin-relay\nDESCRIPTION: Command to install babel-plugin-relay and GraphQL as development dependencies, required for transforming GraphQL queries at build time.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/getting-started/installation-and-setup.md#2025-04-18_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\nyarn add --dev babel-plugin-relay graphql\n```\n\n----------------------------------------\n\nTITLE: Defining Fragment Arguments with @argumentDefinitions\nDESCRIPTION: Shows how to define local arguments for a fragment using the @argumentDefinitions directive\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/glossary/glossary.md#2025-04-18_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\nfragment Store_story on Story\n  @argumentDefinitions(storyId: {type: \"ID!\"}) {\n  # etc\n}\n```\n\n----------------------------------------\n\nTITLE: Using Persisted Queries with Express\nDESCRIPTION: An example of an Express server setup that utilizes persisted queries through the express-graphql-persisted-queries middleware.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v13.0.0/guides/persisted-queries.md#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport express from 'express';\nimport {graphqlHTTP} from 'express-graphql';\nimport {persistedQueries} from 'express-graphql-persisted-queries';\nimport queryMap from './path/to/queryMap.json';\n\nconst app = express();\n\napp.use(\n  '/graphql',\n  persistedQueries({\n    queryMap,\n    queryIdKey: 'doc_id',\n  }),\n  graphqlHTTP({schema}),\n);\n```\n\n----------------------------------------\n\nTITLE: Defining a GraphQL Fragment with Relay.QL in JavaScript\nDESCRIPTION: Demonstrates how to create a basic GraphQL fragment using Relay.QL template literal. This snippet shows the syntax for defining a fragment on a User type with a single field.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-classic/Classic-APIReference-QL.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar fragment = Relay.QL`\n  fragment on User {\n    name\n  }\n`;\n```\n\n----------------------------------------\n\nTITLE: Spreading Fragment in a Relay Query\nDESCRIPTION: Modifying the NewsfeedQuery to use the StoryFragment instead of direct field selection. This demonstrates how the Relay compiler stitches fragments together into complete queries.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/tutorial/fragments-1.md#2025-04-18_snippet_3\n\nLANGUAGE: graphql\nCODE:\n```\nconst NewsfeedQuery = graphql`\n  query NewsfeedQuery {\n    topStory {\n      // change-line\n      ...StoryFragment\n    }\n  }\n`;\n```\n\n----------------------------------------\n\nTITLE: Defining RANGE_DELETE Behavior for Tag Removal from a Todo Mutation\nDESCRIPTION: This mutation handles the removal of tags from a todo item. It utilizes the RANGE_DELETE strategy to specify which tags are removed based on their DataIDs while keeping the records in the store.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-classic/Classic-Guides-Mutations.md#2025-04-18_snippet_8\n\nLANGUAGE: JavaScript\nCODE:\n```\nclass RemoveTagMutation extends Relay.Mutation {\n  // This mutation declares a dependency on the\n  // todo from which this tag is being removed.\n  static fragments = {\n    todo: () => Relay.QL`fragment on Todo { id }`,\n  };\n  // Removing a tag from a todo will affect its tags connection\n  // so we specify it here as part of the fat query.\n  getFatQuery() {\n    return Relay.QL`\n      fragment on RemoveTagMutationPayload {\n        todo { tags },\n        removedTagIDs,\n      }\n    `;\n  }\n  getConfigs() {\n    return [{\n      type: 'RANGE_DELETE',\n      deletedIDFieldName: 'removedTagIDs',\n      pathToConnection: ['todo', 'tags'],\n    }];\n  }\n  /* ... */\n}\n\n```\n\n----------------------------------------\n\nTITLE: Using useRelayEnvironment Hook\nDESCRIPTION: This snippet illustrates how to access the current Relay environment within a component that is a descendant of RelayEnvironmentProvider. The useRelayEnvironment hook is utilized to gain access to the Relay environment for data fetching or manipulation tasks.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/guided-tour/rendering/environment.md#2025-04-18_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst {useRelayEnvironment} = require('react-relay');\n\nfunction UserComponent(props: Props) {\n  const environment = useRelayEnvironment();\n\n  return (...);\n}\n\n```\n\n----------------------------------------\n\nTITLE: Using Dummy Fragment with @module in React Relay\nDESCRIPTION: This example demonstrates how to use @module when you don't need to fetch any data from the server. It creates a 'dummy' fragment that only includes __typename to serve as a wrapper for the module directive.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/guides/data-driven-dependencies/server-3d.md#2025-04-18_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\n// Define a fragment as a wrapper to use with @module\n// The fragment below will be able to reference this fragment by name\ngraphql`\n  fragment FragmentForModule_image on Image {\n    __typename # only use __typename here since we don't need any data\n  }\n`;\n\nfunction CommentRenderer(props) {\n  const comment = useFragment(\n    graphql`\n      fragment Comment_comment on Comment {\n        image {\n          # Spread wrapper fragment\n          ...FragmentForModule_image\n            @module(name: \"ImageProcessingModule\")\n        }\n      }\n    `,\n    props.comment,\n  );\n\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Generated ConcreteRequest With Persisted Queries\nDESCRIPTION: Example of a generated ConcreteRequest structure after enabling persisted queries, showing MD5 hash instead of query text.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/guides/persisted-queries.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst node/*: ConcreteRequest*/ = (function(){\n//... excluded for brevity\nreturn {\n  \"kind\": \"Request\",\n  \"operationKind\": \"query\",\n  \"name\": \"TodoItemRefetchQuery\",\n  \"id\": \"3be4abb81fa595e25eb725b2c6a87508\", // NOTE: id is now an md5 hash\n  \"text\": null, // NOTE: text is null now\n  //... excluded for brevity\n};\n})();\n```\n\n----------------------------------------\n\nTITLE: Querying Rebels Faction ID and Name\nDESCRIPTION: This GraphQL query retrieves the ID and name of the Rebels faction. It demonstrates basic data fetching and provides the ID needed for refetching.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v13.0.0/guides/graphql-server-specification.md#2025-04-18_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\n\"\"\"\nquery RebelsQuery {\n  rebels {\n    id\n    name\n  }\n}\n\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Comparing Two Equivalent Queries in Relay (Query 1)\nDESCRIPTION: An example of a simple user query that fetches a user's name by ID, which will be compared with another query to demonstrate how different queries can reference the same data.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v13.0.0/guided-tour/reusing-cached-data/filling-in-missing-data.md#2025-04-18_snippet_0\n\nLANGUAGE: js\nCODE:\n```\n// Query 1\n\nquery UserQuery {\n  user(id: 4) {\n    name\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Immutable Cache Example\nDESCRIPTION: Demonstration of how immutable data structures would represent the same cache update.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/principles-and-architecture/thinking-in-graphql.md#2025-04-18_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nImmutableMap {\n  1: ImmutableMap // same as before\n  2: ImmutableMap {\n    ... // other fields unchanged\n    photo: 'http://.../photo2.jpg',\n  },\n  3: ImmutableMap // same as before\n}\n```\n\n----------------------------------------\n\nTITLE: Installing React and Relay Dependencies for Hooks\nDESCRIPTION: Command to install the latest versions of React and Relay, which are required for using Relay Hooks.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/migration-and-compatibility/upgrading-to-relay-hooks.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn add react react-dom react-relay\n```\n\n----------------------------------------\n\nTITLE: Setting up polyfills for older browsers\nDESCRIPTION: Example code showing how to include polyfills from core-js to support older browsers that may not natively provide modern JavaScript features required by Relay.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/getting-started/installation-and-setup.md#2025-04-18_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nrequire('core-js/es6/map');\nrequire('core-js/es6/set');\nrequire('core-js/es6/promise');\nrequire('core-js/es6/object');\n\nrequire('./myRelayApplication');\n```\n\n----------------------------------------\n\nTITLE: Example JSON Response from a GraphQL Query\nDESCRIPTION: Example JSON response from fetching a user query. It shows the structure of data returned by a GraphQL server in response to the user query.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/guided-tour/rendering/variables.md#2025-04-18_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"user\": {\n      \"id\": \"4\",\n      \"name\": \"Mark Zuckerberg\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Relay Route Integration with Browser History\nDESCRIPTION: Example of using Relay Routes with browser history API to handle URL-based routing.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-classic/Classic-Guides-Routes.md#2025-04-18_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nwindow.addEventListener('popstate', () => {\n  var userID = getQueryParamFromURI('userID', document.location.href);\n  var profileRoute = new ProfileRoute({userID: userID});\n  ReactDOM.render(\n    <Relay.RootContainer\n      Component={UserProfile}\n      route={profileRoute}\n    />,\n    document.getElementById('app')\n  );\n});\n```\n\n----------------------------------------\n\nTITLE: Defining MutationConfig Type in TypeScript for Relay\nDESCRIPTION: This type definition specifies the structure for configuring mutations in Relay. It includes options for cache configuration, GraphQL mutation, error and completion callbacks, optimistic updates, and more.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/api-reference/types/MutationConfig.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nType `MutationConfig<TMutationConfig: MutationParameters>` = {\n  cacheConfig?: CacheConfig,\n  mutation: GraphQLTaggedNode,\n  onError?: (Error) => void,\n  onCompleted?: ($ElementType<TMutationConfig, 'response'>) => void,\n  onUnsubscribe?: () => void,\n  optimisticResponse?: Object,\n  optimisticUpdater?: SelectorStoreUpdater,\n  updater?: SelectorStoreUpdater,\n  uploadables?: UploadableMap,\n  variables: $ElementType<TMutationConfig, 'variables'>\n}\n```\n\n----------------------------------------\n\nTITLE: MissingRequiredFieldThrowEvent Type Definition\nDESCRIPTION: This type definition describes the structure of the event object for a missing required field that causes a throw. It includes the kind of event, the owner, the field path, and a boolean indicating if the error was handled.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/api-reference/relay-runtime/field-logger.md#2025-04-18_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nexport type MissingRequiredFieldThrowEvent = {\n  +kind: 'missing_required_field.throw',\n  +owner: string,\n  +fieldPath: string,\n  +handled: boolean,\n};\n```\n\n----------------------------------------\n\nTITLE: Field Stability Example Query\nDESCRIPTION: Query demonstrating field stability between two nodes with related IDs.\nSOURCE: https://github.com/facebook/relay/blob/main/website/spec/ObjectIdentification.md#2025-04-18_snippet_5\n\nLANGUAGE: graphql\nCODE:\n```\n{\n  fourNode: node(id: \"4\") {\n    id\n    ... on User {\n      name\n      userWithIdOneGreater {\n        id\n        name\n      }\n    }\n  }\n  fiveNode: node(id: \"5\") {\n    id\n    ... on User {\n      name\n      userWithIdOneLess {\n        id\n        name\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Partial Rendering with Suspense in Relay\nDESCRIPTION: This snippet shows how to use Suspense to enable partial rendering in Relay. It wraps the UsernameComponent in a Suspense boundary, allowing the name to render immediately even if the username data is missing.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/guided-tour/reusing-cached-data/rendering-partially-cached-data.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * HomeTab.react.js\n *\n * Query Component\n */\n\nconst React = require('React');\nconst {Suspense} = require('React');\nconst {graphql, usePreloadedQuery} = require('react-relay');\n\nconst UsernameComponent = require('./UsernameComponent.react');\n\n\nfunction HomeTab() {\n  const data = usePreloadedQuery(\n    graphql`\n      query AppQuery($id: ID!) {\n        user(id: $id) {\n          name\n          ...UsernameComponent_user\n        }\n      }\n    `,\n    props.queryRef,\n  );\n\n  return (\n    <>\n      <h1>{data.user?.name}</h1>\n\n      {/*\n        Wrap the UserComponent in Suspense to allow other parts of the\n        App to be rendered even if the username is missing.\n      */}\n      <Suspense fallback={<LoadingSpinner label=\"Fetching username\" />}>\n        <UsernameComponent user={data.user} />\n      </Suspense>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Moving Hovercard Component to Source Directory - Shell Command\nDESCRIPTION: This snippet is a shell command used to move the hovercard component from a temporary `future` directory into the `src/components` directory, preparing it for use in the application.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/tutorial/queries-2.md#2025-04-18_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmv future/* src/components\n```\n\n----------------------------------------\n\nTITLE: Running Relay Compiler in Watch Mode\nDESCRIPTION: Command to run the Relay Compiler in watch mode, which automatically regenerates artifacts when source code changes are detected. This is useful during active development of Relay components.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v13.0.0/guided-tour/workflow.md#2025-04-18_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nyarn run relay --watch\n```\n\n----------------------------------------\n\nTITLE: Defining Interface in GraphQL Schema\nDESCRIPTION: GraphQL interface definition for IUser that can be implemented by resolver types.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/guides/relay-resolvers/defining-types.md#2025-04-18_snippet_3\n\nLANGUAGE: graphql\nCODE:\n```\ninterface IUser {\n  name: String\n}\n```\n\n----------------------------------------\n\nTITLE: Example of Field Name Typo Error Message in Relay Compiler\nDESCRIPTION: An example error message from the Relay compiler showing a field name typo suggestion. The compiler detects that 'mail' doesn't exist but suggests 'email' as a possible alternative.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/error-reference/unknown-field.md#2025-04-18_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nError in the project `some_project`: ✖︎ The type `UserInfo` has no field `mail`. Did you mean `email`?\n```\n\n----------------------------------------\n\nTITLE: Importing FbCrashCourse Markdown - JavaScript\nDESCRIPTION: This snippet imports the FbCrashCourse markdown file, which contains introductory content for users that may enhance their understanding before engaging with the Relay API.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v13.0.0/guided-tour/introduction.md#2025-04-18_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport FbCrashCourse from './fb/FbCrashCourse.md';\n```\n\n----------------------------------------\n\nTITLE: Querying Empire Data in GraphQL\nDESCRIPTION: Example query to fetch empire faction data including ID and name\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-experimental/GraphQL-ServerSpecification.md#2025-04-18_snippet_3\n\nLANGUAGE: graphql\nCODE:\n```\nquery EmpireQuery {\n  empire {\n    id\n    name\n  }\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"empire\": {\n    \"id\": \"RmFjdGlvbjoy\",\n    \"name\": \"Galactic Empire\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Fragments with Global Variables - GraphQL\nDESCRIPTION: This GraphQL snippet showcases the declaration of a fragment that references a global variable `$scale` for customizing the profile picture in user queries. It emphasizes the importance of declaring the variable in any queries which utilize this fragment.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/guided-tour/rendering/variables.md#2025-04-18_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\nfragment UserFragment on User {\n  name\n  profile_picture(scale: $scale) {\n    uri\n  }\n}\n\n\nquery ViewerQuery($scale: Float!) {\n  viewer {\n    actor {\n      ...UserFragment\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Story Data with GraphQL\nDESCRIPTION: A GraphQL query that fetches a story's text, author details, and comments including nested author information.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/principles-and-architecture/thinking-in-graphql.md#2025-04-18_snippet_8\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  story(id: \"1\") {\n    text,\n    author { name, photo },\n    comments {\n      text,\n      author { name, photo }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining GraphQL Story Type\nDESCRIPTION: This snippet shows the GraphQL schema definition for the Story type, including its fields and their types.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/tutorial/interfaces-polymorphism.md#2025-04-18_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\ntype Story {\n  id: ID!\n  title: String\n  summary: String\n  createdAt: Date\n  poster: Actor\n  image: Image\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Word Fragment in GraphQL with Relay\nDESCRIPTION: This snippet defines two GraphQL fragments: `DictionaryComponent_word` and `DictionaryComponent_definition` using Relay's graphql tag. These fragments are intended for use in a Relay component that displays dictionary information. The first fragment contains the id and a definition, which in turn references the second fragment that details the text and image of the definition.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-experimental/Modern-GraphQLInRelay.md#2025-04-18_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst DictionaryWordFragment = graphql`\n  fragment DictionaryComponent_word on Word {\n    id\n    definition {\n      ...DictionaryComponent_definition\n    }\n  }\n`\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst DictionaryDefinitionFragment = graphql`\n  fragment DictionaryComponent_definition on WordDefinition {\n    text\n    image\n  }\n`\n```\n\n----------------------------------------\n\nTITLE: Converting Refetch Container to useRefetchableFragment in React\nDESCRIPTION: Demonstrates how to convert a Refetch Container to use the useRefetchableFragment hook. This conversion simplifies the refetch API and requires mapping inputs to the new API.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/migration-and-compatibility/relay-hooks-and-legacy-container-apis.md#2025-04-18_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport * as React from 'React';\nimport {graphql, useRefetchableFragment} from 'react-relay';\n\nexport default function CommentBody(props: Props) {\n  const [data, refetch] = useRefetchableFragment(\n    graphql`\n      fragment CommentBody_comment on Comment\n      @refetchable(queryName: \"CommentBodyRefetchQuery\") {\n        body(lang: $lang) {\n          text\n        }\n      }\n    `,\n    props.comment,\n  );\n\n  const handleClick = useCallback(() => {\n    refetch({lang: 'SPANISH'});\n  }, [refetch]);\n\n  return (\n    <>\n      <p>{data.body?.text}</p>\n      <Button\n        onClick={handleClick}>\n        Translate Comment\n      </Button>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Error Boundary in React\nDESCRIPTION: Demonstrates how to create a basic Error Boundary component in React by implementing the static getDerivedStateFromError method.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/guided-tour/rendering/error-states.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst React = require('React');\n\ntype State = {error: ?Error};\n\nclass ErrorBoundary extends React.Component<Props, State> {\n  static getDerivedStateFromError(error): State {\n    // Set some state derived from the caught error\n    return {error: error};\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: GraphQL query for field value\nDESCRIPTION: An example GraphQL query that retrieves the id and name of the viewer.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v13.0.0/api-reference/relay-runtime/store.md#2025-04-18_snippet_16\n\nLANGUAGE: graphql\nCODE:\n```\nviewer {\n  id\n  name\n}\n```\n\n----------------------------------------\n\nTITLE: Runtime Arguments Resolver Example\nDESCRIPTION: Shows how to define a Relay Resolver with runtime JavaScript arguments.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/guides/relay-resolvers.md#2025-04-18_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n* @RelayResolver MyType.my_resolver_field(my_arg: String, my_other_arg: Int): String\n* @rootFragment myResolverFragment\n*/\nexport function my_resolver_field(\n   fragmentKey: myResolverFragment$key,\n   args: {\n      my_arg: ?string,\n      my_other_arg: ?number\n   },\n): ?string {\n   if (args.my_other_arg === 0) {\n       return \"The other arg is 0\";\n   }\n\n   const data = readFragment(graphql`\n       fragment myResolverFragment on MyType\n           some_field\n       }\n   `, fragmentKey);\n\n   return data.some_field.concat(args.my_arg);\n}\n```\n\n----------------------------------------\n\nTITLE: Create React App via Yarn\nDESCRIPTION: This command uses Yarn to create a new React application named 'your-app-name'. Similar to the NPM command, it provides a fully configured React app environment.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/getting-started/step-by-step-guide.md#2025-04-18_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n\"# Yarn\nyarn create react-app your-app-name\"\n```\n\n----------------------------------------\n\nTITLE: Store Deletion Example\nDESCRIPTION: Example of deleting a record from the Relay store using its dataID.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/api-reference/relay-runtime/store.md#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nstore.delete(dataID);\n```\n\n----------------------------------------\n\nTITLE: Example Code Mention in Documentation\nDESCRIPTION: Example showing how to use updatable proxies with a setter pattern. This is referenced in the FAQ explaining how developers use typesafe updaters.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/guided-tour/updating-data/typesafe-updaters-faq.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nupdatableData.name = \"Godzilla\"\n```\n\n----------------------------------------\n\nTITLE: User Query Example in Relay\nDESCRIPTION: Example of a simple query to fetch a user's name by ID.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/guided-tour/reusing-cached-data/filling-in-missing-data.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nquery UserQuery {\n  user(id: 4) {\n    name\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Example Mutation Response\nDESCRIPTION: Sample JSON response from the feedback like mutation showing the updated data structure.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/guided-tour/updating-data/graphql-mutations.md#2025-04-18_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"feedback_like\": {\n    \"feedback\": {\n      \"id\": \"feedback-id\",\n      \"viewer_does_like\": true,\n      \"like_count\": 1,\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a GraphQL Fragment with Relay\nDESCRIPTION: Creates a GraphQL fragment named TestFragment on the User type, which retrieves only the __typename field. This fragment could be used in Relay queries to fetch user type information.\nSOURCE: https://github.com/facebook/relay/blob/main/packages/babel-plugin-relay/__tests__/fixtures/fragment.txt#2025-04-18_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst testFragment = graphql`\n  fragment TestFragment on User {\n    __typename\n  }\n`;\n```\n\n----------------------------------------\n\nTITLE: React Component with Hard-coded Data (JSX)\nDESCRIPTION: Initial Newsfeed component that uses placeholder data before implementing GraphQL queries. The component renders a Story component with hard-coded story data.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/tutorial/queries-1.md#2025-04-18_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nexport default function Newsfeed() {\n  const story = {\n    title: \"Placeholder Story\",\n    summary:\n      \"Placeholder data, to be replaced with data fetched via GraphQL\",\n    poster: {\n      name: \"Placeholder Person\",\n      profilePicture: {\n        url: \"/assets/cat_avatar.png\",\n      },\n    },\n    thumbnail: {\n      url: \"/assets/placeholder.jpeg\",\n    },\n  };\n  return (\n    <div className=\"newsfeed\">\n      <Story story={story} />\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: JSON Response for Rebels Refetch Query\nDESCRIPTION: This JSON response shows the result of refetching the Rebels faction. The 'node' field returns the faction with its ID and name.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v13.0.0/guides/graphql-server-specification.md#2025-04-18_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n\"\"\"\n{\n  \"node\": {\n    \"id\": \"RmFjdGlvbjox\",\n    \"name\": \"Alliance to Restore the Republic\"\n  }\n}\n\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Adding Relay Plugin to Babel Configuration\nDESCRIPTION: This JavaScript snippet shows how to add the `relay` plugin to your `.babelrc` file. The `relay` plugin transforms GraphQL code to runtime artifacts, and it's important to ensure its placement at the beginning of the plugin list.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v13.0.0/getting-started/installation-and-setup.md#2025-04-18_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n\"{\\n  \\\"plugins\\\": [\\n    \\\"relay\\\"\\n  ]\\n}\"\n```\n\n----------------------------------------\n\nTITLE: JSX Import Statements for Relay Documentation\nDESCRIPTION: Import statements for documentation components including DocsRating and internal documentation handling utilities.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/guided-tour/list-data/connections.md#2025-04-18_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport DocsRating from '@site/src/core/DocsRating';\nimport {OssOnly, FbInternalOnly} from 'docusaurus-plugin-internaldocs-fb/internal';\nimport useBaseUrl from '@docusaurus/useBaseUrl';\n```\n\n----------------------------------------\n\nTITLE: Defining GraphQL Input and Payload Types for Mutations\nDESCRIPTION: This snippet defines the required input and output types for executing a 'introduceShip' mutation, which can add a new ship to a faction. It requires a GraphQL server that supports the common mutation pattern of Relay.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-experimental/GraphQL-ServerSpecification.md#2025-04-18_snippet_11\n\nLANGUAGE: graphql\nCODE:\n```\ninput IntroduceShipInput {\n  factionId: ID!\n  shipName: String!\n  clientMutationId: String!\n}\n\ntype IntroduceShipPayload {\n  faction: Faction\n  ship: Ship\n  clientMutationId: String!\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Internal Documentation Components in JSX\nDESCRIPTION: This code imports components used for differentiating between open-source and Facebook-internal documentation.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/guided-tour/managing-data-outside-react/reading-fragments.md#2025-04-18_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport {OssOnly, FbInternalOnly} from 'docusaurus-plugin-internaldocs-fb/internal';\n```\n\n----------------------------------------\n\nTITLE: Handling Query Variables in Mock Resolver Context\nDESCRIPTION: Shows how to access and use query variables within the mock resolver context for conditional response generation.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/guides/testing-relay-with-preloaded-queries.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nCurrencyAmount(context) {\n  console.log(JSON.stringify(context, null, 2));\n  return { formatted_amount: mockResponse }\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Empire Faction ID and Name\nDESCRIPTION: This GraphQL query retrieves the ID and name of the Empire faction, similar to the Rebels query.  This provides the ID needed for refetching the Empire.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v13.0.0/guides/graphql-server-specification.md#2025-04-18_snippet_5\n\nLANGUAGE: graphql\nCODE:\n```\n\"\"\"\nquery EmpireQuery {\n  empire {\n    id\n    name\n  }\n}\n\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Sample GraphQL Query with Fragments\nDESCRIPTION: An example GraphQL query that demonstrates how fragments are used in a query structure. This shows a query fetching trending posts with a nested fragment on the poster field, which helps explain why certain fragments can be refetchable.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/tutorial/refetchable-fragments.md#2025-04-18_snippet_8\n\nLANGUAGE: graphql\nCODE:\n```\nquery MyQuery {\n  topTrendingPosts {\n    title\n    summary\n    date\n    poster {\n     ...PosterFragment\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Rebels Data with GraphQL\nDESCRIPTION: Example query demonstrating how to fetch rebels faction data with its ID and name.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/guides/graphql-server-specification.md#2025-04-18_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\nquery RebelsQuery {\n  rebels {\n    id\n    name\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing and Running the Relay Tutorial Project\nDESCRIPTION: Commands to clone the relay-examples repository, navigate to the newsfeed example project, install dependencies and start the development server. This launches a Webpack server, GraphQL server, and Relay compiler.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/tutorial/intro.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/relayjs/relay-examples.git\ncd relay-examples/newsfeed\nnpm install\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Using useLazyLoadQuery and useFragment in React Component\nDESCRIPTION: This code shows how to use both useLazyLoadQuery and useFragment hooks in a React component to fetch and consume data.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/tutorial/connections-pagination.md#2025-04-18_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nexport default function Newsfeed() {\n  const queryData = useLazyLoadQuery(NewsfeedFragment, {});\n  const data = useFragment(NewsfeedContentsFragment, queryData);\n  const storyEdges = data.newsfeedStories.edges;\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing RANGE_ADD Behavior for Ship Introduction Mutation with Relay\nDESCRIPTION: This mutation defines the introduction of a new ship into a faction by specifying how the new ship should be added to the ships connection using range behaviors. It includes arguments for parent and edge identifiers.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-classic/Classic-Guides-Mutations.md#2025-04-18_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\nclass IntroduceShipMutation extends Relay.Mutation {\n  // This mutation declares a dependency on the faction\n  // into which this ship is to be introduced.\n  static fragments = {\n    faction: () => Relay.QL`fragment on Faction { id }`,\n  };\n  // Introducing a ship will add it to a faction's fleet, so we\n  // specify the faction's ships connection as part of the fat query.\n  getFatQuery() {\n    return Relay.QL`\n      fragment on IntroduceShipPayload {\n        faction { ships },\n        newShipEdge,\n      }\n    `;\n  }\n  getConfigs() {\n    return [{\n      type: 'RANGE_ADD',\n      parentName: 'faction',\n      parentID: this.props.faction.id,\n      connectionName: 'ships',\n      edgeName: 'newShipEdge',\n      rangeBehaviors: {\n        // When the ships connection is not under the influence\n        // of any call, append the ship to the end of the connection\n        '': 'append',\n        // Prepend the ship, wherever the connection is sorted by age\n        'orderby(newest)': 'prepend',\n      },\n    }];\n  }\n  /* ... */\n}\n\n```\n\n----------------------------------------\n\nTITLE: Defining a Relay Resolver Field in TypeScript\nDESCRIPTION: Shows how to define a new field on a type using the @RelayResolver tag. The resolver function accepts the model object and returns the field value.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/api-reference/relay-resolvers/docblock-format.md#2025-04-18_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n/**\n * @RelayResolver User.name: String\n */\nexport function name(user: UserModel): string {\n  return user.name;\n}\n```\n\n----------------------------------------\n\nTITLE: Schema Introspection Query for Node Root Field\nDESCRIPTION: Introspection query to verify correct implementation of the node root field.\nSOURCE: https://github.com/facebook/relay/blob/main/website/spec/ObjectIdentification.md#2025-04-18_snippet_3\n\nLANGUAGE: graphql\nCODE:\n```\n{\n  __schema {\n    queryType {\n      fields {\n        name\n        type {\n          name\n          kind\n        }\n        args {\n          name\n          type {\n            kind\n            ofType {\n              name\n              kind\n            }\n          }\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Constructing a GraphQLMutation with custom options in JavaScript\nDESCRIPTION: Illustrates the use of the GraphQLMutation constructor with additional options such as callbacks and a collision key. It demonstrates setting up error handling and success callbacks.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-classic/Classic-APIReference-GraphQLMutation.md#2025-04-18_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst collisionKey = 'feedback-like: ' + variables.input.feedbackId;\nconst mutation = new Relay.GraphQLMutation(\n  query,\n  variables,\n  null, // No files.\n  environment,\n  {\n    onFailure: err => console.warn(err),\n    onSuccess: () => console.log('Success!'),\n  },\n  collisionKey\n);\n```\n\n----------------------------------------\n\nTITLE: Retrieving a linked record associated with a current record\nDESCRIPTION: This example illustrates how to retrieve a linked record using the getLinkedRecord method with optional arguments to pass variables if needed.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/api-reference/relay-runtime/store.md#2025-04-18_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nconst rootField = store.getRootField('rootField');\nconst viewer = rootField.getLinkedRecord('viewer');\n```\n\n----------------------------------------\n\nTITLE: Adding hasNext Check to Relay Pagination\nDESCRIPTION: Enhanced pagination example that includes checking if more items are available using the hasNext property from usePaginationFragment.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/guided-tour/list-data/pagination.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport type {FriendsListPaginationQuery} from 'FriendsListPaginationQuery.graphql';\nimport type {FriendsListComponent_user$key} from 'FriendsList_user.graphql';\n\nconst React = require('React');\nconst {Suspense} = require('React');\n\nconst {graphql, usePaginationFragment} = require('react-relay');\n\ntype Props = {\n  user: FriendsListComponent_user$key,\n};\n\nfunction FriendsListComponent(props: Props) {\n  // ...\n  const {\n    data,\n    loadNext,\n    hasNext,\n  } = usePaginationFragment(\n    graphql`...`,\n    props.user,\n  );\n\n  return (\n    <>\n      <h1>Friends of {data.name}:</h1>\n      {/* ... */}\n\n      {/* Only render button if there are more friends to load in the list */}\n      {hasNext ? (\n        <Button\n          onClick={/* ... */}>\n          Load more friends\n        </Button>\n      ) : null}\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Complex GraphQL Query with Nested Fields\nDESCRIPTION: Illustrates a more complex GraphQL query that traverses relationships between entities to fetch nested data.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/tutorial/graphql.md#2025-04-18_snippet_2\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  person(id: \"24601\") {\n    name\n    occupation\n    location {\n      name\n      population\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using useQueryLoader Hook for Preloading Data\nDESCRIPTION: Example of a React component using the useQueryLoader hook to preload data ahead of rendering, implementing the render-as-you-fetch pattern.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/migration-and-compatibility/relay-hooks-and-legacy-container-apis.md#2025-04-18_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nimport * as React from 'React';\nimport {useQueryLoader} from 'react-relay';\n\n// Import the query defined in the UserPopover component\nimport UserPopoverQuery from '__generated__/UserPopoverQuery.graphql';\n\n// This is *NOT* a real-world example, only used\n// to illustrate usage.\n\nexport default function UserPopoverButton(props) {\n  const [queryRef, loadQuery] = useQueryLoader(UserPopoverQuery)\n\n  const handleClick = useCallback(() => {\n    // Load the query in the event handler, onClick\n    loadQuery({id: props.userID})\n  }, [loadQuery, props.userID]);\n\n  return (\n    <>\n      <Button onClick={handleClick} />\n      {queryRef != null ?\n        <Popover>\n\n          {/* Loading and error states are handled by\n          Suspense and Error Boundaries */}\n          <ErrorBoundary renderError={Error}>\n            <Suspense fallback={<Loading />}>\n\n              {/*Pass the queryRef*/}\n              <UserPopover queryRef={queryRef} />\n\n            </Suspense>\n          </ErrorBoundary>\n        </Popover>\n        : null\n      }\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Missing Field Handlers in Relay Environment\nDESCRIPTION: Configuration of missing field handlers to enable data reuse between different query patterns. Handles user, node, and story fields by their respective IDs.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/guided-tour/reusing-cached-data/filling-in-missing-data.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst {ROOT_TYPE, Environment} = require('relay-runtime');\n\nconst missingFieldHandlers = [\n  {\n    handle(field, record, argValues): ?string {\n      // Make sure to add a handler for the node field\n      if (\n        record != null &&\n        record.getType() === ROOT_TYPE &&\n        field.name === 'node' &&\n        argValues.hasOwnProperty('id')\n      ) {\n        return argValues.id\n      }\n      if (\n        record != null &&\n        record.getType() === ROOT_TYPE &&\n        field.name === 'user' &&\n        argValues.hasOwnProperty('id')\n      ) {\n        // If field is user(id: $id), look up the record by the value of $id\n        return argValues.id;\n      }\n      if (\n        record != null &&\n        record.getType() === ROOT_TYPE &&\n        field.name === 'story' &&\n        argValues.hasOwnProperty('story_id')\n      ) {\n        // If field is story(story_id: $story_id), look up the record by the\n        // value of $story_id.\n        return argValues.story_id;\n      }\n      return undefined;\n    },\n    kind: 'linked',\n  },\n];\n\nconst environment = new Environment({/*...*/, missingFieldHandlers});\n```\n\n----------------------------------------\n\nTITLE: Defining Local Arguments in GraphQL with @argumentDefinitions\nDESCRIPTION: Illustrates the usage of the @argumentDefinitions directive in a GraphQL fragment to specify the names and types of local arguments a fragment accepts, aiding in defining parameterized queries. Requires integration with a Relay environment that supports fragments.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/glossary/glossary.md#2025-04-18_snippet_1\n\nLANGUAGE: GraphQL\nCODE:\n```\nfragment Store_story on Story\n  @argumentDefinitions(storyId: {type: \"ID!\"}) {\n  # etc\n}\n```\n\n----------------------------------------\n\nTITLE: Moving Future Components to Source Directory\nDESCRIPTION: Shell command to move components from future directory to src/components\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/tutorial/queries-2.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmv future/* src/components\n```\n\n----------------------------------------\n\nTITLE: Debugging RelayFBHandlerProvider Error\nDESCRIPTION: Example error message shown when a deleteRecord handler is not properly defined in the Relay environment's handlerProvider.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/debugging/declarative-mutation-directives.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nRelayFBHandlerProvider: No handler defined for `deleteRecord`. [Caught in: An uncaught error was thrown inside `RelayObservable`.]\n```\n\n----------------------------------------\n\nTITLE: Retrieving Root Field from Relay Store\nDESCRIPTION: Shows how to retrieve a root field from the Relay store using the getRootField method of RecordSourceSelectorProxy.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/api-reference/relay-runtime/store.md#2025-04-18_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst viewer = store.getRootField('viewer');\n```\n\n----------------------------------------\n\nTITLE: JSON Response for Next Four Rebel Ships Query (Empty)\nDESCRIPTION: This JSON response shows the result of querying for ships after the last cursor when there are no more ships in the connection.  It shows an empty edge set.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v13.0.0/guides/graphql-server-specification.md#2025-04-18_snippet_16\n\nLANGUAGE: json\nCODE:\n```\n\"\"\"\n{\n  \"rebels\": {\n    \"name\": \"Alliance to Restore the Republic\",\n    \"ships\": {\n      \"edges\": []\n    }\n  }\n}\n\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Example GraphQL Query Demonstrating Refetch Limitations\nDESCRIPTION: Illustrates the challenges of refetching fragments in dynamic queries like trending posts\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/tutorial/refetchable-fragments.md#2025-04-18_snippet_9\n\nLANGUAGE: graphql\nCODE:\n```\nquery MyQuery {\n  topTrendingPosts {\n    title\n    summary\n    date\n    poster {\n     ...PosterFragment\n    }\n  }\n}\n\nquery RefetchQuery {\n  node(id: \"abcdef\") {\n    ...PosterFragment\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Data with loadQuery in React Relay\nDESCRIPTION: This snippet demonstrates how to use the `loadQuery` API directly to fetch data for the initial load of an application. It imports necessary types and the query, creates a Relay environment, and then calls `loadQuery` to obtain a `PreloadedQuery` instance.  This instance is then passed as a prop to the root component. The snippet emphasizes that `loadQuery` should be called outside of a component's render function.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v13.0.0/guided-tour/rendering/queries.md#2025-04-18_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport type {HomeTabQuery as HomeTabQueryType} from 'HomeTabQuery.graphql';\n\nconst HomeTabQuery = require('HomeTabQuery.graphql')\nconst {loadQuery} = require('react-relay');\n\n\nconst environment = createEnvironment(...);\n\n// At some point during app initialization\nconst initialQueryRef = loadQuery<HomeTabQueryType>(\n  environment,\n  HomeTabQuery,\n  {id: '4'},\n);\n\n// ...\n\n// E.g. passing the initialQueryRef to the root component\nrender(<AppTabs initialQueryRef={initialQueryRef} initialTab={...} />)\n```\n\n----------------------------------------\n\nTITLE: Relay Route Instance Creation\nDESCRIPTION: Simple example of instantiating a ProfileRoute with a specific userID.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-classic/Classic-Guides-Routes.md#2025-04-18_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nvar profileRoute = new ProfileRoute({userID: '123'});\n```\n\n----------------------------------------\n\nTITLE: Installing Relay using create-relay-app with npm\nDESCRIPTION: This snippet shows how to install Relay in an existing application using the `create-relay-app` package.  It leverages `npm` to create a new Relay application. Ensure you have a clean working directory before running this command.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/getting-started/installation-and-setup.md#2025-04-18_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n\"npm create @tobiastengler/relay-app\"\n```\n\n----------------------------------------\n\nTITLE: Installing React and Relay using Yarn\nDESCRIPTION: This snippet shows how to install React, React DOM, and Relay using the Yarn package manager. It adds these libraries as dependencies to your project.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v13.0.0/getting-started/installation-and-setup.md#2025-04-18_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n\"yarn add react react-dom react-relay\"\n```\n\n----------------------------------------\n\nTITLE: Immutable Data Structure Example\nDESCRIPTION: Example showing how immutable data structures would handle the same cache update.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/principles-and-architecture/thinking-in-graphql.md#2025-04-18_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nImmutableMap {\n  1: ImmutableMap // same as before\n  2: ImmutableMap {\n    ... // other fields unchanged\n    photo: 'http://.../photo2.jpg',\n  },\n  3: ImmutableMap // same as before\n}\n```\n\n----------------------------------------\n\nTITLE: Change Directory and Start App via NPM\nDESCRIPTION: These commands first change the current directory to the newly created app directory ('your-app-name') and then start the React application using NPM. This will typically launch a development server.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/getting-started/step-by-step-guide.md#2025-04-18_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n\"# NPM\ncd your-app-name\nnpm start\"\n```\n\n----------------------------------------\n\nTITLE: Defining a Deprecated Relay Resolver Field in TypeScript\nDESCRIPTION: Shows how to mark a field as deprecated using the @deprecated tag, optionally providing a reason for the deprecation.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/api-reference/relay-resolvers/docblock-format.md#2025-04-18_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\n/**\n * @RelayResolver User.name: String\n * @deprecated Use `fullName` instead.\n */\nexport function name(user: UserModel): string {\n  return user.name;\n}\n```\n\n----------------------------------------\n\nTITLE: Alternative Error for Missing Handler in RelayModernEnvironment\nDESCRIPTION: Another form of error message that appears when a handler for the deleteRecord directive is expected but not provided in the Relay environment configuration.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/debugging/declarative-mutation-directives.md#2025-04-18_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nRelayModernEnvironment: Expected a handler to be provided for handle `deleteRecord`.\n```\n\n----------------------------------------\n\nTITLE: Markdown Frontmatter Configuration\nDESCRIPTION: YAML frontmatter configuration for the documentation page, defining metadata like ID, title, slug, description and keywords.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/principles-and-architecture/architecture-overview.md#2025-04-18_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n---\nid: architecture-overview\ntitle: Architecture Overview\nslug: /principles-and-architecture/architecture-overview/\ndescription: Relay architecture overview guide\nkeywords:\n- architecture\n---\n```\n\n----------------------------------------\n\nTITLE: JSON Response for First Two Rebel Ships Query\nDESCRIPTION: This JSON response shows the result of querying the first two ships of the Rebels, including their names and cursors for pagination.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v13.0.0/guides/graphql-server-specification.md#2025-04-18_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n\"\"\"\n{\n  \"rebels\": {\n    \"name\": \"Alliance to Restore the Republic\",\n    \"ships\": {\n      \"edges\": [\n        {\n          \"cursor\": \"YXJyYXljb25uZWN0aW9uOjA=\",\n          \"node\": {\n            \"name\": \"X-Wing\"\n          }\n        },\n        {\n          \"cursor\": \"YXJyYXljb25uZWN0aW9uOjE=\",\n          \"node\": {\n            \"name\": \"Y-Wing\"\n          }\n        }\n      ]\n    }\n  }\n}\n\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Correct Usage of @required LOG in Array Fields\nDESCRIPTION: Shows the proper way to handle required fields in arrays using LOG action instead of THROW, allowing for graceful handling of partial null data.\nSOURCE: https://github.com/facebook/relay/blob/main/website/blog/2023-01-03-resilient-relay-apps.mdx#2025-04-18_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nfunction Component({ assetPriceRef }) {\n  const { quotes } = useFragment(\n    graphql`\n      fragment ComponentFragment on AssetPriceData {\n        quotes {\n          # Returns an array of items\n          timestamp\n          price @required(action: LOG)\n        }\n      }\n    `,\n    assetPriceRef,\n  );\n  const validQuotes = quotes.filter(removeNull);\n}\n```\n\n----------------------------------------\n\nTITLE: Example Implementation of supports\nDESCRIPTION: Example showing how to implement the supports method to declare specific feature support.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-classic/Classic-Interfaces-NetworkLayer.md#2025-04-18_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nsupports(...options) {\n  return options.every(option => {\n    if (option === 'future-feature') {\n      return true;\n    }\n    return false;\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Single Username Response Example\nDESCRIPTION: JSON response for single username query.\nSOURCE: https://github.com/facebook/relay/blob/main/website/spec/ObjectIdentification.md#2025-04-18_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"username\": {\n    \"id\": \"4\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Illustrating SkipRedundantNodeTransform in GraphQL\nDESCRIPTION: This example demonstrates how the SkipRedundantNodeTransform eliminates more complex cases of field duplication, such as when a field is fetched both unconditionally and conditionally.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/principles-and-architecture/compiler-architecture.md#2025-04-18_snippet_2\n\nLANGUAGE: graphql\nCODE:\n```\n# before: `id` processed up to 2x\nfoo {\n  bar {\n    id\n  }\n  ... on FooType @include(if: $cond) { # can't be flattened due to conditional\n    id # but this field is guaranteed to be fetched regardless\n  }\n}\n\n# after: `id` processed at most once\nfoo {\n  bar {\n    id\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Create React App via NPM\nDESCRIPTION: This command uses NPM to create a new React application named 'your-app-name'. It sets up a fully configured React app with all necessary dependencies and configurations.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/getting-started/step-by-step-guide.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n\"# NPM\nnpx create-react-app your-app-name\"\n```\n\n----------------------------------------\n\nTITLE: Importing Generated Types and Definitions\nDESCRIPTION: Examples of importing Flow types and generated definitions from compiler output.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/guides/compiler.md#2025-04-18_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport type {DictionaryComponent_word} from './__generated__/DictionaryComponent_word.graphql';\n\n// Direct import example\nimport DictionaryComponent_word from './__generated__/DictionaryComponent_word.graphql';\n```\n\n----------------------------------------\n\nTITLE: Embedding YouTube Video with Start Time Parameter in HTML\nDESCRIPTION: HTML iframe for embedding a YouTube video with a timestamp parameter to start playback at a specific point. The iframe includes extended permissions for media playback features.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v13.0.0/principles-and-architecture/videos.md#2025-04-18_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<iframe src=\"https://www.youtube-nocookie.com/embed/WxPtYJRjLL0?start=215\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen width=\"640\" height=\"360\" frameBorder=\"0\"></iframe>\n```\n\n----------------------------------------\n\nTITLE: Running Relay Compiler in Watch Mode\nDESCRIPTION: Command to run the Relay compiler in watch mode for automatic regeneration of artifacts\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-experimental/Introduction-InstallationAndSetup.md#2025-04-18_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\nyarn run relay -- --watch\n```\n\n----------------------------------------\n\nTITLE: Defining a Fragment Component for Username in Relay\nDESCRIPTION: This snippet shows how to create a fragment component in Relay that renders a user's username. It demonstrates the use of the useFragment hook and graphql template literal for defining the fragment.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/guided-tour/reusing-cached-data/rendering-partially-cached-data.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * UsernameComponent.react.js\n *\n * Fragment Component\n */\n\nimport type {UsernameComponent_user$key} from 'UsernameComponent_user.graphql';\n\nconst React = require('React');\nconst {graphql, useFragment} = require('react-relay');\n\ntype Props = {\n  user: UsernameComponent_user$key,\n};\n\nfunction UsernameComponent(props: Props) {\n  const user = useFragment(\n    graphql`\n      fragment UsernameComponent_user on User {\n        username\n      }\n    `,\n    props.user,\n  );\n  return (...);\n}\n\nmodule.exports = UsernameComponent;\n```\n\n----------------------------------------\n\nTITLE: Refetching Empire Faction Using Node ID\nDESCRIPTION: A GraphQL query demonstrating refetching the Empire faction using its globally unique ID through the node field.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/guides/graphql-server-specification.md#2025-04-18_snippet_7\n\nLANGUAGE: graphql\nCODE:\n```\nquery EmpireRefetchQuery {\n  node(id: \"RmFjdGlvbjoy\") {\n    id\n    ... on Faction {\n      name\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Documentation Components in JSX\nDESCRIPTION: This snippet imports React components used for documentation purposes, including a ratings component and conditional components for showing content based on whether it's the open-source or Facebook internal version.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/guided-tour/introduction.md#2025-04-18_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport DocsRating from '@site/src/core/DocsRating';\nimport {OssOnly, FbInternalOnly} from 'docusaurus-plugin-internaldocs-fb/internal';\n\nimport FbCrashCourse from './fb/FbCrashCourse.md';\n```\n\n----------------------------------------\n\nTITLE: Importing Generated Definitions for Flow Types\nDESCRIPTION: This snippet demonstrates how to import generated Flow types for the `DictionaryComponent_word` fragment. The imported types can be used for type-checking in a Relay component, ensuring that the component receives the correct data structure for the fragment.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-experimental/Modern-GraphQLInRelay.md#2025-04-18_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport type {DictionaryComponent_word} from './__generated__/DictionaryComponent_word.graphql';\n```\n\n----------------------------------------\n\nTITLE: Adding Relay Compiler Script to package.json\nDESCRIPTION: Adds a 'relay' script to package.json for easily running the Relay compiler.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/getting-started/compiler.md#2025-04-18_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"scripts\": {\n    \"relay\": \"relay-compiler\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Relay App Using NPM\nDESCRIPTION: Command to create a new Relay app using the create-relay-app package.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/getting-started/installation-and-setup.md#2025-04-18_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm create @tobiastengler/relay-app\n```\n\n----------------------------------------\n\nTITLE: Implementing GraphQL Fetch Utility\nDESCRIPTION: A JavaScript utility function that handles GraphQL requests to GitHub's API, with authentication and proper request formatting.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/getting-started/step-by-step-guide.md#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// your-app-name/src/fetchGraphQL.js\nasync function fetchGraphQL(text, variables) {\n  const REACT_APP_GITHUB_AUTH_TOKEN = process.env.REACT_APP_GITHUB_AUTH_TOKEN;\n\n  // Fetch data from GitHub's GraphQL API:\n  const response = await fetch('https://api.github.com/graphql', {\n    method: 'POST',\n    headers: {\n      Authorization: `bearer ${REACT_APP_GITHUB_AUTH_TOKEN}`,\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify({\n      query: text,\n      variables,\n    }),\n  });\n\n  // Get the response as JSON\n  return await response.json();\n}\n\nexport default fetchGraphQL;\n```\n\n----------------------------------------\n\nTITLE: Importing Internal Docs Only Components - JavaScript\nDESCRIPTION: This snippet imports two components that are restricted for internal use only, which are designed to conditionally render content based on user roles in the guide.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v13.0.0/guided-tour/introduction.md#2025-04-18_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport {OssOnly, FbInternalOnly} from 'docusaurus-plugin-internaldocs-fb/internal';\n```\n\n----------------------------------------\n\nTITLE: Illustrating Query Data Fetching Flow in Relay\nDESCRIPTION: This diagram shows the step-by-step process of fetching query data from a server and normalizing it into a RecordSource in Relay. No specific code dependencies are required as this is a conceptual flowchart.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/principles-and-architecture/runtime-architecture.md#2025-04-18_snippet_3\n\nLANGUAGE: none\nCODE:\n```\n               ┌───────────────────────┐\n               │         Query         │\n               └───────────────────────┘\n                           │\n                           ▼\n                                             ┌ ─ ─ ─ ┐\n                         fetch ◀────────────▶ Server\n                                             └ ─ ─ ─ ┘\n                           │\n                     ┌─────┴───────┐\n                     ▼             ▼\n               ┌──────────┐  ┌──────────┐\n               │  Query   │  │ Response │\n               └──────────┘  └──────────┘\n                     │             │\n                     └─────┬───────┘\n                           │\n                           ▼\n                       normalize\n                           │\n                           ▼\n               ┌───────────────────────┐\n               │     RecordSource      │\n               │                       │\n               │┌──────┐┌──────┐┌─────┐│\n               ││Record││Record││ ... ││\n               │└──────┘└──────┘└─────┘│\n               └───────────────────────┘\n```\n\n----------------------------------------\n\nTITLE: Refetching Empire Faction Information with Node Interface\nDESCRIPTION: This snippet illustrates refetching the Empire faction's information using its ID. It shows the application of Relay's Node interface to accurately retrieve objects from the GraphQL server.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/guides/graphql-server-specification.md#2025-04-18_snippet_4\n\nLANGUAGE: graphql\nCODE:\n```\nquery EmpireRefetchQuery {\n  node(id: \"RmFjdGlvbjoy\") {\n    id\n    ... on Faction {\n      name\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching GraphQL in React Component\nDESCRIPTION: This React component (`App`) uses the `fetchGraphQL` function to fetch data from the GitHub GraphQL API when the component mounts. It uses the `useState` and `useEffect` hooks to manage the component's state and trigger the data fetching. The component renders \"Loading\" initially and then displays the repository name once the data is fetched.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/getting-started/step-by-step-guide.md#2025-04-18_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n\"// your-app-name/src/App.js\nimport React from 'react';\nimport './App.css';\nimport fetchGraphQL from './fetchGraphQL';\n\nconst { useState, useEffect } = React;\n\nfunction App() {\n  // We'll load the name of a repository, initially setting it to null\n  const [name, setName] = useState(null);\n\n  // When the component mounts we'll fetch a repository name\n  useEffect(() => {\n    let isMounted = true;\n    fetchGraphQL(`\n      query RepositoryNameQuery {\n        # feel free to change owner/name here\n        repository(owner: \\\"facebook\\\" name: \\\"relay\\\") {\n          name\n        }\n      }\n    `).then(response => {\n      // Avoid updating state if the component unmounted before the fetch completes\n      if (!isMounted) {\n        return;\n      }\n      const data = response.data;\n      setName(data.repository.name);\n    }).catch(error => {\n      console.error(error);\n    });\n\n    return () => {\n      isMounted = false;\n    };\n  }, []);\n\n  // Render \\\"Loading\\\" until the query completes\n  return (\n    <div className=\\\"App\\\">\n      <header className=\\\"App-header\\\">\n        <p>\n          {name != null ? `Repository: ${name}` : \\\"Loading\\\"}\n        </p>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\"\n```\n\n----------------------------------------\n\nTITLE: Updating Test Snapshots for GraphQL Syntax Parser\nDESCRIPTION: Instructions for updating test snapshots by setting an environment variable when running tests. This is useful for maintaining the test suite as the parser implementation evolves.\nSOURCE: https://github.com/facebook/relay/blob/main/compiler/crates/graphql-syntax/README.md#2025-04-18_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nNote that snapshots can be updated by running tests with the `UPDATE_SNAPSHOTS=1` environment variable set.\n```\n\n----------------------------------------\n\nTITLE: JSON Response for Rebels Query\nDESCRIPTION: This JSON response shows the result of the RebelsQuery, providing the ID and name of the Rebels faction.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v13.0.0/guides/graphql-server-specification.md#2025-04-18_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n\"\"\"\n{\n  \"rebels\": {\n    \"id\": \"RmFjdGlvbjox\",\n    \"name\": \"Alliance to Restore the Republic\"\n  }\n}\n\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Creating a GraphQLMutation with files using createWithFiles method in JavaScript\nDESCRIPTION: Shows how to create a Relay.GraphQLMutation instance that includes file uploads using the static createWithFiles method. It assumes the existence of query, variables, and environment objects.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-classic/Classic-APIReference-GraphQLMutation.md#2025-04-18_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst mutation = Relay.GraphQLMutation.createWithFiles(\n  query,\n  variables,\n  files,\n  environment\n);\n```\n\n----------------------------------------\n\nTITLE: JSON Response for Empire Refetch Query\nDESCRIPTION: This JSON response shows the result of refetching the Empire faction.  The 'node' field returns the faction with its ID and name.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v13.0.0/guides/graphql-server-specification.md#2025-04-18_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n\"\"\"\n{\n  \"node\": {\n    \"id\": \"RmFjdGlvbjoy\",\n    \"name\": \"Galactic Empire\"\n  }\n}\n\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Updating PosterByline Component with GraphQL Fragment in JavaScript/JSX\nDESCRIPTION: This snippet shows how to modify the PosterByline component to include the 'id' field in its GraphQL fragment and pass it as a prop to the PosterDetailsHovercardContents component.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/tutorial/queries-2.md#2025-04-18_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst PosterBylineFragment = graphql`\n  fragment PosterBylineFragment on Actor {\n    // change-line\n    id\n    ...\n  }\n`;\n\nexport default function PosterByline({ poster }: Props): React.ReactElement {\n  ...\n  return (\n   ...\n    <PosterDetailsHovercardContents\n      // change-line\n      posterID={data.id}\n    />\n   ...\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: React Component for PosterDetailsHovercardContentsBody\nDESCRIPTION: This snippet implements a React component named 'PosterDetailsHovercardContentsBody' which utilizes the fragment to render details for either a Person or an Organization by conditionally checking the fields.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/tutorial/interfaces-polymorphism.md#2025-04-18_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport OrganizationKind from './OrganizationKind';\n\nfunction PosterDetailsHovercardContentsBody({ poster }: Props): React.ReactElement {\n  const data = useFragment(PosterDetailsHovercardContentsBodyFragment, poster);\n  return (\n    <>\n      <Image image={data.profilePicture} width={128} height={128} className=\"posterHovercard__image\" />\n      <div className=\"posterHovercard__name\">{data.name}</div>\n      <ul className=\"posterHovercard__details\">\n         <li>Joined <Timestamp time={poster.joined} /></li>\n         // change\n         {data.location != null && (\n           <li>{data.location.name}</li>\n         )}\n        {data.organizationKind != null && (\n          <li><OrganizationKind kind={data.organizationKind} /></li>\n         )}\n         // end-change\n      </ul>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing useQueryLoader in PosterByline Component in JavaScript/JSX\nDESCRIPTION: This code demonstrates how to use the useQueryLoader hook in the PosterByline component to create a query reference and a function to trigger the query fetch.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/tutorial/queries-2.md#2025-04-18_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nimport {useQueryLoader} from 'react-relay';\nimport type {PosterDetailsHovercardContentsQuery as HovercardQueryType} from './__generated__/PosterDetailsHovercardContentsQuery.graphql';\nimport {PosterDetailsHovercardContentsQuery} from './PosterDetailsHovercardContents';\n\nexport default function PosterByline({ poster }: Props): React.ReactElement {\n  ...\n  // change\n  const [\n    hovercardQueryRef,\n    loadHovercardQuery,\n  ] = useQueryLoader<HovercardQueryType>(PosterDetailsHovercardContentsQuery);\n  // end-change\n  return (\n   ...\n    <PosterDetailsHovercardContents\n      // change-line\n      queryRef={hovercardQueryRef}\n    />\n   ...\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Weak Type with @weak\nDESCRIPTION: This code snippet demonstrates how to define a weak type using the `@RelayResolver` tag followed by the `@weak` tag. Weak type declarations are expected to be followed by an exported type definition whose name matches the type name. Weak types are used when objects of a given type do not have identifiers.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/api-reference/relay-resolvers/docblock-format.md#2025-04-18_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n/**\n * @RelayResolver ProfilePicture\n * @weak\n */\nexport type ProfilePicture = {\n  url: string;\n  width: number;\n  height: number;\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing fetchQuery to Avoid Suspense in Relay (JavaScript/React)\nDESCRIPTION: This code snippet demonstrates how to use fetchQuery in a React component to avoid Suspense fallbacks in Relay. It manages a custom loading state, fetches data, and updates the component state to re-render with new data without suspending.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/guided-tour/refetching/refetching-queries-with-different-data.md#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * App.react.js\n */\nconst AppQuery = require('__generated__/AppQuery.graphql');\n\nfunction App(props: Props) {\n  const environment = useRelayEnvironment();\n  const [isRefreshing, setIsRefreshing] = useState(false)\n  const [queryArgs, setQueryArgs] = useState({\n    options: {fetchKey: 0, fetchPolicy: 'store-or-network'},\n    variables: {id: '4'},\n  });\n\n  const refetch = useCallback(() => {\n    if (isRefreshing) { return; }\n    setIsRefreshing(true);\n\n    // fetchQuery will fetch the query and write\n    // the data to the Relay store. This will ensure\n    // that when we re-render, the data is already\n    // cached and we don't suspend\n    fetchQuery(environment, AppQuery, variables)\n      .subscribe({\n        complete: () => {\n          setIsRefreshing(false);\n\n          // *After* the query has been fetched, we update\n          // our state to re-render with the new fetchKey\n          // and fetchPolicy.\n          // At this point the data for the query should\n          // be cached, so we use the 'store-only'\n          // fetchPolicy to avoid suspending.\n          setQueryArgs(prev => ({\n            options: {\n              fetchKey: (prev?.options.fetchKey ?? 0) + 1,\n              fetchPolicy: 'store-only',\n            },\n            variables: {id: 'different-id'}\n          }));\n        },\n        error: () => {\n          setIsRefreshing(false);\n        }\n      });\n  }, [/* ... */]);\n\n  return (\n    <React.Suspense fallback=\"Loading query...\">\n      <MainContent\n        isRefetching={isRefetching}\n        refetch={refetch}\n        queryArgs={queryArgs}\n      />\n    </React.Suspense>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Comparing Two Equivalent Queries in Relay (Query 2)\nDESCRIPTION: An example of a node query that fetches the same user data as Query 1 but using a different query structure, demonstrating the need for missing field handlers.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v13.0.0/guided-tour/reusing-cached-data/filling-in-missing-data.md#2025-04-18_snippet_1\n\nLANGUAGE: js\nCODE:\n```\n// Query 2\n\nquery NodeQuery {\n  node(id: 4) {\n    ... on User {\n      name\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Initial ContactsList Fragment Definition\nDESCRIPTION: The basic GraphQL fragment that selects the list of contacts from the Viewer type.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/tutorial/refetchable-fragments.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst ContactsListFragment = graphql`\n  fragment ContactsListFragment on Viewer {\n    contacts {\n      id\n      ...ContactRowFragment\n    }\n  }\n`;\n```\n\n----------------------------------------\n\nTITLE: Querying a List of Contacts in GraphQL\nDESCRIPTION: This snippet demonstrates how to query a list of contacts using GraphQL. It shows the structure of the query and the corresponding response format.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/tutorial/arrays-lists.md#2025-04-18_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nquery MyQuery {\n  viewer {\n    contacts { // List of edges\n      id // field on a single item\n      name\n    }\n  }\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  viewer: {\n    contacts: [ // array in response\n      {\n        id: \"123\",\n        name: \"Chris\",\n      },\n      {\n        id: \"789\",\n        name: \"Sue\",\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating React TypeScript Project with Vite\nDESCRIPTION: Command to scaffold a new React application with TypeScript using Vite bundler\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/getting-started/quick-start.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm create vite -- --template react-ts\n```\n\n----------------------------------------\n\nTITLE: Cache Update Example\nDESCRIPTION: Example showing how a cache update affects only the changed record while maintaining references.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/principles-and-architecture/thinking-in-graphql.md#2025-04-18_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nMap {\n  ...\n  2: Map {\n    ...\n    photo: 'http://.../photo2.jpg',\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Query Variables\nDESCRIPTION: Method that returns an object containing the variables used in the GraphQL query. These variables are meant to be serialized for the GraphQL request.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-classic/Classic-Interfaces-QueryRequest.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ngetVariables(): {[name: string]: mixed}\n```\n\n----------------------------------------\n\nTITLE: Refetching Rebels Faction by ID\nDESCRIPTION: This GraphQL query refetches the Rebels faction using its ID through the `node` field. It demonstrates how Relay can refetch objects by their unique IDs.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v13.0.0/guides/graphql-server-specification.md#2025-04-18_snippet_3\n\nLANGUAGE: graphql\nCODE:\n```\n\"\"\"\nquery RebelsRefetchQuery {\n  node(id: \"RmFjdGlvbjox\") {\n    id\n    ... on Faction {\n      name\n    }\n  }\n}\n\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Using a Selector Helper in a Live Resolver\nDESCRIPTION: An example of a live resolver that uses the selectorAsLiveState helper function to create a LiveState object from a Redux selector function.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/guides/relay-resolvers/live-fields.md#2025-04-18_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n/**\n * @RelayResolver Query.counter: Int\n * @live\n */\nexport function counter(): LiveState<number> {\n  return selectorAsLiveState(getCounter);\n}\n\nfunction getCounter(state) {\n  return state.counter;\n}\n```\n\n----------------------------------------\n\nTITLE: JSON Response for PageInfo Introspection\nDESCRIPTION: Expected JSON response from the PageInfo introspection query showing the required field definitions with their types and nullability.\nSOURCE: https://github.com/facebook/relay/blob/main/website/spec/Connections.md#2025-04-18_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"__type\": {\n      \"fields\": [\n        // May contain other fields.\n        {\n          \"name\": \"hasNextPage\",\n          \"type\": {\n            \"name\": null,\n            \"kind\": \"NON_NULL\",\n            \"ofType\": {\n              \"name\": \"Boolean\",\n              \"kind\": \"SCALAR\"\n            }\n          }\n        },\n        {\n          \"name\": \"hasPreviousPage\",\n          \"type\": {\n            \"name\": null,\n            \"kind\": \"NON_NULL\",\n            \"ofType\": {\n              \"name\": \"Boolean\",\n              \"kind\": \"SCALAR\"\n            }\n          }\n        },\n        {\n          \"name\": \"startCursor\",\n          \"type\": {\n            \"name\": \"String\",\n            \"kind\": \"SCALAR\",\n            \"ofType\": null\n          }\n        },\n        {\n          \"name\": \"endCursor\",\n          \"type\": {\n            \"name\": \"String\",\n            \"kind\": \"SCALAR\",\n            \"ofType\": null\n          }\n        }\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using GraphQL Template Literal Transform\nDESCRIPTION: Example of using the graphql template literal that gets transformed by Babel at build time\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/glossary/glossary.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ngraphql`...`\n```\n\n----------------------------------------\n\nTITLE: Creating a Query Component with Suspense in Relay\nDESCRIPTION: Example of a Relay query component that can suspend while fetching data. This component uses usePreloadedQuery to fetch and render data from a GraphQL query.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v13.0.0/guided-tour/rendering/loading-states.md#2025-04-18_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * MainContent.react.js\n *\n * Query Component\n */\n\nconst React = require('React');\nconst {graphql, usePreloadedQuery} = require('react-relay');\n\nfunction MainContent(props) {\n  // Fetch and render a query\n  const data = usePreloadedQuery<...>(\n    graphql`...`,\n    props.queryRef,\n  );\n\n  return (...);\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Local State with React and Relay\nDESCRIPTION: Shows how to use useLazyLoadQuery to fetch both server and local data, including the locally defined 'notes' field on the User type.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/guides/client-schema-extensions.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst Example = (props) => {\n  const data = useLazyLoadQuery(graphql`\n    query ExampleQuery {\n      viewer {\n        id\n        name\n        notes {\n          id\n          title\n          body\n        }\n      }\n    }\n  `, {});\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: GraphQL Fragment with @connection and Corrected @required\nDESCRIPTION: This GraphQL fragment shows the corrected usage of `@required` with the `@connection` directive.  The `@required` directives on the `node` and `job` fields are removed to avoid the compiler error. The usage on the `title` field does not create an error.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/guides/required-directive.md#2025-04-18_snippet_6\n\nLANGUAGE: graphql\nCODE:\n```\nfragment FriendsList on User @refetchable(queryName: \"FriendsListQuery\") {\n  friends(after: $cursor, first: $count) @connection(key: \"FriendsList_friends\") {\n    edges {\n      node {\n        job {\n          title @required(action: LOG)\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing React and Relay Dependencies\nDESCRIPTION: Command to install the necessary npm packages for using React and Relay Hooks.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v13.0.0/migration-and-compatibility/upgrading-to-relay-hooks.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn add react react-dom react-relay\n```\n\n----------------------------------------\n\nTITLE: Getting Mutation Identifier\nDESCRIPTION: Method to retrieve a unique identifier for the mutation, useful for matching response payloads to their corresponding mutations in batch requests.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-classic/Classic-Interfaces-MutationRequest.md#2025-04-18_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ngetID(): string\n```\n\n----------------------------------------\n\nTITLE: GraphQL Edge Type Introspection Response\nDESCRIPTION: JSON response to the introspection query for an edge type, showing the required 'node' and 'cursor' fields.\nSOURCE: https://github.com/facebook/relay/blob/main/website/spec/Connections.md#2025-04-18_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"__type\": {\n      \"fields\": [\n        {\n          \"name\": \"node\",\n          \"type\": {\n            \"name\": \"Example\",\n            \"kind\": \"OBJECT\",\n            \"ofType\": null\n          }\n        },\n        {\n          \"name\": \"cursor\",\n          \"type\": {\n            \"name\": null,\n            \"kind\": \"NON_NULL\",\n            \"ofType\": {\n              \"name\": \"String\",\n              \"kind\": \"SCALAR\"\n            }\n          }\n        }\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing React Components\nDESCRIPTION: This code snippet imports React components for documentation rendering. `DocsRating` is used for rating the documentation, while `OssOnly` and `FbInternalOnly` are used for conditional rendering based on the environment.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v13.0.0/getting-started/introduction.md#2025-04-18_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport DocsRating from '@site/src/core/DocsRating';\nimport {OssOnly, FbInternalOnly} from 'docusaurus-plugin-internaldocs-fb/internal';\n```\n\n----------------------------------------\n\nTITLE: Configuring Garbage Collection Release Buffer Size in Relay\nDESCRIPTION: Code showing how to configure the garbage collection release buffer size in Relay. This buffer temporarily retains queries after they've been released, making it more likely to reuse data when navigating back to previously visited pages.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/guided-tour/reusing-cached-data/presence-of-data.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst store = new Store(source, {gcReleaseBufferSize: 10});\n```\n\n----------------------------------------\n\nTITLE: Preparing Variables in RelayContainer (JavaScript)\nDESCRIPTION: Shows how to use the prepareVariables method in a RelayContainer to modify variables before they are used in fragments. This example adjusts the 'size' variable based on the device pixel ratio.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-classic/Classic-APIReference-Container.md#2025-04-18_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nmodule.exports = Relay.createContainer(ProfilePicture, {\n  initialVariables: {size: 50},\n  prepareVariables: prevVariables => {\n    return {\n      ...prevVariables,\n      // If devicePixelRatio is `2`, the new size will be `100`.\n      size: prevVariables.size * window.devicePixelRatio,\n    };\n  },\n  // ...\n});\n```\n\n----------------------------------------\n\nTITLE: GraphQL query for getting or creating a linked record\nDESCRIPTION: An example GraphQL query that retrieves a viewer nested under the rootField.  The query retrieves the id of the viewer.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v13.0.0/api-reference/relay-runtime/store.md#2025-04-18_snippet_28\n\nLANGUAGE: graphql\nCODE:\n```\nrootField {\n  viewer {\n    id\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing React and Relay Dependencies\nDESCRIPTION: Command to install the required React and Relay packages using Yarn package manager.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/migration-and-compatibility/upgrading-to-relay-hooks.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn add react react-dom react-relay\n```\n\n----------------------------------------\n\nTITLE: Data Flow: Store Lookup and Subscription Process\nDESCRIPTION: Illustrates how components read initial data via lookup and then subscribe to changes using snapshots\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/principles-and-architecture/runtime-architecture.md#2025-04-18_snippet_4\n\nLANGUAGE: ascii-diagram\nCODE:\n```\n    ┌───────────────────────┐       ┌──────────────┐\n    │     RecordSource      │       │              │\n    │                       │       │              │\n    │┌──────┐┌──────┐┌─────┐│       │   Selector   │\n    ││Record││Record││ ... ││       │              │\n    │└──────┘└──────┘└─────┘│       │              │\n    └───────────────────────┘       └──────────────┘\n                │                           │\n                │                           │\n                └──────────────┬────────────┘\n                               │\n                               │  lookup\n                               │  (read)\n                               │\n                               ▼\n                        ┌─────────────┐\n                        │             │\n                        │  Snapshot   │\n                        │             │\n                        └─────────────┘\n                               │\n                               │  render, etc\n                               │\n                               ▼\n```\n\n----------------------------------------\n\nTITLE: Assigning from Abstract Field to Concrete Field in Relay\nDESCRIPTION: Example of assigning a Node (abstract type) to a User (concrete type) field, demonstrating the use of inline fragments and type checking for proper assignment.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/guided-tour/updating-data/imperatively-modifying-linked-fields.md#2025-04-18_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst data = useFragment(graphql`\n  fragment AssignBestFriendButton_someType on Query {\n    node(id: \"4\") {\n      ... on User {\n        __typename\n        ...AssignableBestFriendButton_assignable_user\n      }\n    }\n  }\n`, queryRef);\n\nconst environment = useRelayEnvironment();\nconst onClick = () => {\n  const updatableData = commitLocalUpdate(\n    environment,\n    (store: RecordSourceSelectorProxy) => {\n      const {updatableData} = store.readUpdatableQuery(\n          graphql`\n            query AssignBestFriendButtonUpdatableQuery\n            @updatable {\n              viewer {\n                best_friend {\n                  ...AssignableBestFriendButton_assignable_user\n                }\n              }\n            }\n          `,\n          {}\n        );\n\n      if (data.node != null && data.node.__typename === \"User\" && updatableData.viewer != null) {\n        updatableData.viewer.best_friend = data.node;\n      }\n    }\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Importing DocsRating Component in JSX\nDESCRIPTION: This snippet imports a custom DocsRating component, likely used for rating documentation pages.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/guided-tour/managing-data-outside-react/reading-fragments.md#2025-04-18_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport DocsRating from '@site/src/core/DocsRating';\n```\n\n----------------------------------------\n\nTITLE: Refetching Empire Using Node Interface\nDESCRIPTION: Example of refetching empire data using the node interface and previously obtained ID\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-experimental/GraphQL-ServerSpecification.md#2025-04-18_snippet_4\n\nLANGUAGE: graphql\nCODE:\n```\nquery EmpireRefetchQuery {\n  node(id: \"RmFjdGlvbjoy\") {\n    id\n    ... on Faction {\n      name\n    }\n  }\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"node\": {\n    \"id\": \"RmFjdGlvbjoy\",\n    \"name\": \"Galactic Empire\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Representing Cached Data Structure in JavaScript\nDESCRIPTION: This pseudo-code illustrates how Relay might structure cached data in a normalized form using a Map. It shows the relationships between different entities like story, author, and comments.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/principles-and-architecture/thinking-in-graphql.md#2025-04-18_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nMap {\n  // `story(id: \"1\")`\n  1: Map {\n    text: 'got GraphQL?',\n    author: Link(2),\n    comments: [Link(3)],\n  },\n  // `story.author`\n  2: Map {\n    name: 'Yuzhi',\n    photo: 'http://.../photo1.jpg',\n  },\n  // `story.comments[0]`\n  3: Map {\n    text: 'Here\\'s how to get one!',\n    author: Link(2),\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Importing DocsRating Component into a React Application\nDESCRIPTION: This snippet imports the DocsRating component from a specified path within a React application, presumably to display a rating interface or feedback mechanism. This setup likely assumes the existence of a React environment with the appropriate file structure where DocsRating is defined.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/principles-and-architecture/videos.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport DocsRating from '@site/src/core/DocsRating';\n```\n\n----------------------------------------\n\nTITLE: Refreshing Queries Using useQueryLoader in React and Relay\nDESCRIPTION: This snippet demonstrates how to refresh a query using the useQueryLoader Hook in Relay. It shows the implementation in both the parent App component and the child MainContent component.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/guided-tour/refetching/refreshing-queries.md#2025-04-18_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n/**\n * App.react.js\n */\n\nconst AppQuery = require('__generated__/AppQuery.graphql');\n\nfunction App(props: Props) {\n  const [queryRef, loadQuery] = useQueryLoader(\n    AppQuery,\n    props.appQueryRef /* initial query ref */\n  );\n\n  const refresh = useCallback(() => {\n    // Load the query again using the same original variables.\n    // Calling loadQuery will update the value of queryRef.\n    // The fetchPolicy ensures we always fetch from the server and skip\n    // the local data cache.\n    const {variables} = props.appQueryRef;\n    loadQuery(variables, {fetchPolicy: 'network-only'});\n  }, [/* ... */]);\n\n  return (\n    <React.Suspense fallback=\"Loading query...\">\n      <MainContent\n        refresh={refresh}\n        queryRef={queryRef}\n      />\n    </React.Suspense>\n  );\n}\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\n/**\n * MainContent.react.js\n */\n\n// Renders the preloaded query, given the query reference\nfunction MainContent(props) {\n  const {refresh, queryRef} = props;\n  const data = usePreloadedQuery(\n    graphql`\n      query AppQuery($id: ID!) {\n        user(id: $id) {\n          name\n          friends {\n            count\n          }\n        }\n      }\n    `,\n    queryRef,\n  );\n\n  return (\n    <>\n      <h1>{data.user?.name}</h1>\n      <div>Friends count: {data.user.friends?.count}</div>\n      <Button\n        onClick={() => refresh()}>\n        Fetch latest count\n      </Button>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Step 1: Defining a Query Variable\nDESCRIPTION: First step in implementing dynamic data fetching: defining a query variable in the GraphQL query to accept the ID of the poster to fetch details for.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/tutorial/queries-2.md#2025-04-18_snippet_4\n\nLANGUAGE: graphql\nCODE:\n```\nconst PosterDetailsHovercardContentsQuery = graphql`\n  query PosterDetailsHovercardContentsQuery(\n    // change-line\n    $posterID: ID!\n  ) {\n    node(id: \"1\") {\n      ... on Actor {\n        ...PosterDetailsHovercardContentsBodyFragment\n      }\n    }\n  }\n`;\n```\n\n----------------------------------------\n\nTITLE: Fetching Data with REST API\nDESCRIPTION: Demonstrates how to fetch a list of stories using traditional REST approach, requiring n+1 requests to get both the list and individual story details.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-experimental/PrinciplesAndArchitecture-ThinkingInGraphQL.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nrest.get('/stories').then(stories =>\n  Promise.all(stories.map(story =>\n    rest.get(story.href)\n  ))\n).then(stories => {\n  console.log(stories);\n});\n```\n\n----------------------------------------\n\nTITLE: JSON Response for First Ship Query\nDESCRIPTION: The JSON response showing the first ship in the Rebels faction, demonstrating how connections return edges with nodes in the standard Relay connection pattern.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/guides/graphql-server-specification.md#2025-04-18_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"rebels\": {\n    \"name\": \"Alliance to Restore the Republic\",\n    \"ships\": {\n      \"edges\": [\n        {\n          \"node\": {\n            \"name\": \"X-Wing\"\n          }\n        }\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: PHP Comment Field Implementation\nDESCRIPTION: Implements a GraphQL field that selects appropriate rendering strategy based on client capabilities.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/guides/data-driven-dependencies/server-3d.md#2025-04-18_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<<\n  GraphQLObject('Comment', 'Comment on a post'),\n  Oncalls('<todo>')\n>>\nfinal class Comment {\n  <<GraphQLField(\n    'comment_content_renderer',\n    'Field that returns a rendering strategy for the main content of the comment',\n  )>>\n  public function commentContentRenderer(Traversable<string> $supported): ICommentRenderer {\n    if (C\\contains($supported, 'CommentMarkdownRenderer') && userIsEligibleForMarkdownContent()) {\n      return new CommentMarkdownRenderer();\n    }\n    return new CommentPlaintextRenderer();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Relay Compiler using Yarn\nDESCRIPTION: This command line snippet shows how to execute the Relay Compiler using Yarn. This command triggers the compilation process, generating the necessary artifacts based on your GraphQL schema and queries.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v13.0.0/getting-started/installation-and-setup.md#2025-04-18_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\n\"yarn run relay\"\n```\n\n----------------------------------------\n\nTITLE: Visualizing Relay Compiler Data Flow\nDESCRIPTION: ASCII diagram illustrating the high-level flow of data through the Relay compiler, from parsing GraphQL and schema to generating optimized output and artifacts.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/principles-and-architecture/compiler-architecture.md#2025-04-18_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n                   ┌─────────────┐┌─────────────┐\n                   │   GraphQL   ││   Schema    │\n                   └─────────────┘└─────────────┘\n                          │              │              parse\n                          └───────┬──────┘\n                                  ▼\n                   ┌────────────────────────────┐\n                   │      CompilerContext       │\n                   │                            │\n                   │   ┌─────┐ ┌─────┐ ┌─────┐  │──┐\n                   │   │ IR  │ │ IR  │ │ ... │  │  │\n                   │   └─────┘ └─────┘ └─────┘  │  │\n                   └────────────────────────────┘  │  transform/\n                          │    │      ▲            │   optimize\n                          │    │      └────────────┘\n                          │    │\n                          │    └──────────┐\n                          │  print        │  codegen\n                          ▼               ▼\n                   ┌─────────────┐ ┌─────────────┐\n                   │   GraphQL   │ │  Artifacts  │\n                   └─────────────┘ └─────────────┘\n```\n\n----------------------------------------\n\nTITLE: Adding Relay Compiler Script\nDESCRIPTION: Package.json script configuration for running the Relay compiler.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/getting-started/installation-and-setup.md#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n\"scripts\": {\n  \"relay\": \"relay-compiler\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Mock Resolvers for Scalar and Abstract Types in Relay Tests\nDESCRIPTION: Example of defining mock resolvers for Float, Boolean, and Node types in Relay tests using the @relay_test_operation directive.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/guides/testing-relay-components.md#2025-04-18_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  Float() {\n    return 123.456;\n  },\n  Boolean(context) {\n    if (context.name === 'can_edit') {\n      return true;\n    }\n    return false;\n  },\n  Node() {\n    return {\n      __typename: 'User',\n      id: 'my-user-id',\n    };\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Required Dependencies for Relay Hooks\nDESCRIPTION: Command to install the necessary packages for using Relay Hooks, including React, React DOM, and React Relay.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/migration-and-compatibility/upgrading-to-relay-hooks.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn add react react-dom react-relay\n```\n\n----------------------------------------\n\nTITLE: Defining GraphQL Query for Hovercard Contents - GraphQL\nDESCRIPTION: This snippet illustrates the definition of a GraphQL query to fetch details of a poster using a variable, allowing the functionality of displaying dynamic content based on user interactions.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/tutorial/queries-2.md#2025-04-18_snippet_3\n\nLANGUAGE: GraphQL\nCODE:\n```\nconst PosterDetailsHovercardContentsQuery = graphql`\n  query PosterDetailsHovercardContentsQuery(\n    // change-line\n    $posterID: ID!\n  ) {\n    node(id: \"1\") {\n      ... on Actor {\n        ...PosterDetailsHovercardContentsBodyFragment\n      }\n    }\n  }\n`;\n```\n\n----------------------------------------\n\nTITLE: Querying Next Three Rebel Ships After Cursor\nDESCRIPTION: This GraphQL query retrieves the next three ships after a specified cursor using the `after` argument, demonstrating pagination through the connection.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v13.0.0/guides/graphql-server-specification.md#2025-04-18_snippet_13\n\nLANGUAGE: graphql\nCODE:\n```\n\"\"\"\nquery EndOfRebelShipsQuery {\n  rebels {\n    name,\n    ships(first: 3 after: \"YXJyYXljb25uZWN0aW9uOjE=\") {\n      edges {\n        cursor,\n        node {\n          name\n        }\n      }\n    }\n  }\n}\n\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Running Relay Compiler\nDESCRIPTION: Command to execute the Relay compiler for generating compiled artifacts\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-experimental/Introduction-InstallationAndSetup.md#2025-04-18_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\nyarn run relay\n```\n\n----------------------------------------\n\nTITLE: Installing babel-plugin-relay and graphql using yarn\nDESCRIPTION: This snippet shows how to install `babel-plugin-relay` and `graphql` as development dependencies using `yarn`. `babel-plugin-relay` transforms GraphQL queries into runtime artifacts, while `graphql` is the JavaScript reference implementation for GraphQL.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/getting-started/installation-and-setup.md#2025-04-18_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\n\"yarn add --dev babel-plugin-relay graphql\"\n```\n\n----------------------------------------\n\nTITLE: Installing Relay Compiler\nDESCRIPTION: Command to install the Relay Compiler as a dev dependency.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/getting-started/installation-and-setup.md#2025-04-18_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nyarn add --dev relay-compiler\n```\n\n----------------------------------------\n\nTITLE: Starting React Application\nDESCRIPTION: Commands to navigate to the app directory and start the development server using NPM or Yarn.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/getting-started/step-by-step-guide.md#2025-04-18_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# NPM\ncd your-app-name\nnpm start\n\n# Yarn\ncd your-app-name\nyarn start\n```\n\n----------------------------------------\n\nTITLE: Importing Documentation Components in Docusaurus\nDESCRIPTION: Import statements for Docusaurus documentation components, including the DocsRating component and conditional rendering components for open source versus Facebook internal documentation.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/guided-tour/managing-data-outside-react/prefetching-queries.md#2025-04-18_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport DocsRating from '@site/src/core/DocsRating';\nimport {OssOnly, FbInternalOnly} from 'docusaurus-plugin-internaldocs-fb/internal';\n```\n\n----------------------------------------\n\nTITLE: GraphQL Component Example - With @required Directive\nDESCRIPTION: An example showing how the @required directive reduces null-checking boilerplate in a React component by handling nullability at the GraphQL schema level.\nSOURCE: https://github.com/facebook/relay/blob/main/website/blog/2021-12-08-introducing-the-new-relay-compiler.mdx#2025-04-18_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\n# Note: Code snippet is referenced in text but not directly shown in the content\n```\n\n----------------------------------------\n\nTITLE: Implementing a Basic Error Boundary Component in React\nDESCRIPTION: A minimal implementation of an Error Boundary component that catches errors during rendering and stores them in state. This implements the static getDerivedStateFromError method required for React Error Boundaries.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v13.0.0/guided-tour/rendering/error-states.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst React = require('React');\n\ntype State = {error: ?Error};\n\nclass ErrorBoundary extends React.Component<Props, State> {\n  static getDerivedStateFromError(error): State {\n    // Set some state derived from the caught error\n    return {error: error};\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Description to Author Type in Relay Resolver (TSX)\nDESCRIPTION: This snippet demonstrates how to add a description to an Author type in a Relay Resolver. The description is added as a comment in the docblock tag and explains the purpose and capabilities of the Author type.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/guides/relay-resolvers/descriptions.md#2025-04-18_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n/**\n * @RelayResolver Author\n *\n * An author in our **amazing** CMS. Authors can\n * write posts but not necessarily change their permissions.\n */\nexport function Author(id: DataID): AuthorModel {\n  return AuthorService.getById(id);\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Relay component with mocked data\nDESCRIPTION: This JavaScript code snippet demonstrates how to test a Relay component that uses preloaded queries by mocking the GraphQL data. It configures the query resolver to generate a mocked response and records a pending queue invocation before rendering the component using `react-relay` and `relay-test-utils`.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/guides/testing-relay-with-preloaded-queries.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst {RelayEnvironmentProvider} = require('react-relay');\nconst { MockPayloadGenerator, createMockEnvironment } = require('relay-test-utils');\nconst {render} = require('testing-library-react');\n// at the time of writing, act is not re-exported by our internal testing-library-react\n// but is re-exported by the \"external\" version\nconst {act} = require('ReactTestUtils');\ntest(\"...\") => {\n  // arrange\n  const environment = createMockEnvironment();\n  environment.mock.queueOperationResolver(operation => {\n      return MockPayloadGenerator.generate(operation, {\n        CurrencyAmount() {\n          return {\n            formatted_amount: \"1234$\",\n          };\n        },\n      });\n    });\n  const query = YourComponentGraphQLQueryGoesHere; // can be the same, or just identical\n  const variables = {\n    // ACTUAL variables for the invocation goes here\n  };\n  environment.mock.queuePendingOperation(YourComponentGraphQLQuery, variables);\n\n // act\n  const {getByTestId, ..otherStuffYouMightNeed} = render(\n    <RelayEnvironmentProvider environment={environment}>\n        <YourComponent data-testid=\"1234\" {...componentPropsIfAny}/>\n    </RelayEnvironmentProvider>\n  );\n  // trigger the loading - click a button, emit an event, etc. or ...\n  act(() => jest.runAllImmediates()); // ... if loadQuery is in the useEffect()\n  // assert\n  // your assertions go here\n});\n```\n\n----------------------------------------\n\nTITLE: Converting QueryRenderer to useLazyLoadQuery\nDESCRIPTION: Demonstrates migration from QueryRenderer pattern to useLazyLoadQuery Hook, including query definition and data rendering.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/migration-and-compatibility/relay-hooks-and-legacy-container-apis.md#2025-04-18_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport * as React from 'React';\nimport {graphql, QueryRenderer} from 'react-relay';\n\nexport default function Home() {\n  return (\n    <QueryRenderer\n      environment={MyAppEnvironment}\n      query={graphql`\n        query HomeQuery($id: ID!) {\n          user(id: $id) {\n            name\n          }\n        }\n      `}\n      variables={{id: 4}}\n      render={(props, error) => {\n        if (error) {\n          return <Error />;\n        }\n        if (!props) {\n          return <Loading />;\n        }\n        return <h1>{props.user?.name}</h1>\n      }}\n    />\n  );\n}\n```\n\nLANGUAGE: jsx\nCODE:\n```\nimport * as React from 'React';\nimport {graphql, useLazyLoadQuery} from 'react-relay';\n\nexport default function Home() {\n  const data = useLazyLoadQuery(\n    graphql`\n      query HomeQuery($id: ID!) {\n        user(id: $id) {\n          name\n        }\n      }\n    `,\n    {id: 4},\n  );\n\n return <h1>{data.user?.name}</h1>;\n}\n```\n\n----------------------------------------\n\nTITLE: GraphQL query for plural root field\nDESCRIPTION: An example GraphQL query that retrieves a set of nodes with a limit of 10.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v13.0.0/api-reference/relay-runtime/store.md#2025-04-18_snippet_9\n\nLANGUAGE: graphql\nCODE:\n```\nnodes(first: 10) {\n  # ...\n}\n```\n\n----------------------------------------\n\nTITLE: REST Response Caching Implementation\nDESCRIPTION: Basic REST caching implementation using a Map to store URI-based responses.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/principles-and-architecture/thinking-in-graphql.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nvar _cache = new Map();\nrest.get = uri => {\n  if (!_cache.has(uri)) {\n    _cache.set(uri, fetch(uri));\n  }\n  return _cache.get(uri);\n};\n```\n\n----------------------------------------\n\nTITLE: Retrieving GraphQL Mutation String\nDESCRIPTION: Method to get the string representation of the GraphQL mutation query.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-classic/Classic-Interfaces-MutationRequest.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ngetQueryString(): string\n```\n\n----------------------------------------\n\nTITLE: GraphQL query for linked record with argument\nDESCRIPTION: An example GraphQL query that retrieves the viewer under the rootField.  The viewer accepts an argument.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v13.0.0/api-reference/relay-runtime/store.md#2025-04-18_snippet_22\n\nLANGUAGE: graphql\nCODE:\n```\nrootField {\n  viewer(arg: $arg) {\n    id\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a GraphQLMutation using static create method in JavaScript\nDESCRIPTION: Demonstrates how to create a Relay.GraphQLMutation instance using the static create method. It shows setting up the environment, defining the mutation query, and specifying variables.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-classic/Classic-APIReference-GraphQLMutation.md#2025-04-18_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst environment = new Relay.Environment();\nconst query = Relay.QL`mutation FeedbackLikeMutation {\n  feedbackLike(input: $input) {\n    clientMutationId\n    feedback {\n      doesViewerLike\n    }\n  }\n}`;\nconst variables = {\n  input: {\n    feedbackId: 'aFeedbackId',\n  },\n};\n\nconst mutation = Relay.GraphQLMutation.create(\n  query,\n  variables,\n  environment\n);\n```\n\n----------------------------------------\n\nTITLE: Frontmatter Configuration\nDESCRIPTION: YAML frontmatter defining metadata for the documentation page including ID, title, slug, description and keywords.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/guided-tour/updating-data/introduction.md#2025-04-18_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n---\nid: introduction\ntitle: Introduction\nslug: /guided-tour/updating-data/introduction\ndescription: Relay guide to updating data\nkeywords:\n- updating\n- mutation\n- useMutation\n- commitMutation\n- relay store\n---\n```\n\n----------------------------------------\n\nTITLE: Polyfill Configuration for Relay\nDESCRIPTION: Example of including necessary polyfills for older browser support using core-js\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-experimental/Introduction-InstallationAndSetup.md#2025-04-18_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nrequire('core-js/es6/map');\nrequire('core-js/es6/set');\nrequire('core-js/es6/promise');\nrequire('core-js/es6/object');\n\nrequire('./myRelayApplication');\n```\n\n----------------------------------------\n\nTITLE: Publishing Relay Compiler Playground NPM Module\nDESCRIPTION: Steps to publish the Relay Compiler Playground NPM module. Requires bumping the version in cargo.toml and building the module first.\nSOURCE: https://github.com/facebook/relay/blob/main/compiler/crates/relay-compiler-playground/README.md#2025-04-18_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncd pkg\nnpm publish\n```\n\n----------------------------------------\n\nTITLE: Updating React Component with New Data Field\nDESCRIPTION: Shows how to modify a React component to display the newly added createdAt field using a Timestamp component.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/tutorial/fragments-1.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport Timestamp from './Timestamp';\n\ntype Props = {\n  story: {\n    createdAt: string;\n    ...\n  };\n};\n\nexport default function Story({story}: Props) {\n  return (\n    <Card>\n      <PosterByline person={story.poster} />\n      <Heading>{story.title}</Heading>\n      <Timestamp time={story.createdAt} />\n      <Image image={story.image} />\n      <StorySummary summary={story.summary} />\n    </Card>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Getting a Plural Root Field\nDESCRIPTION: Demonstrates how to retrieve a plural root field (collection) using the `getPluralRootField` method of the `RecordSourceSelectorProxy`. The method takes a `fieldName` (string) and returns an array of `RecordProxy` objects.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v13.0.0/api-reference/relay-runtime/store.md#2025-04-18_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nconst nodes = store.getPluralRootField('nodes');\n```\n\n----------------------------------------\n\nTITLE: GraphQL Component Example - Pre @required Directive\nDESCRIPTION: An example showing a React component with manual null-checking before using the @required directive. Demonstrates the verbose boilerplate needed for null safety.\nSOURCE: https://github.com/facebook/relay/blob/main/website/blog/2021-12-08-introducing-the-new-relay-compiler.mdx#2025-04-18_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\n# Note: Code snippet is referenced in text but not directly shown in the content\n```\n\n----------------------------------------\n\nTITLE: Defining Data Dependencies in Relay Mutation\nDESCRIPTION: Example of using the static fragments property to declare a mutation's data dependencies, which is useful for ensuring fields are fetched for optimistic responses.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-classic/Classic-APIReference-Mutation.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nclass LikeStoryMutation extends Relay.Mutation {\n  static fragments = {\n    story: () => Relay.QL`\n      fragment on Story {\n        likers { count },\n        viewerDoesLike,\n      }\n    `,\n  };\n  getOptimisticResponse() {\n    // this.props.story.likers.count and this.props.story.viewerDoesLike\n    // are guaranteed to have been fetched since we've declared\n    // them to be part of this mutation's data dependencies above.\n    return { /* ... */ };\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using @arguments Directive in GraphQL Query\nDESCRIPTION: Example showing how to pass arguments to a fragment using the @arguments directive within a query.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/api-reference/graphql/graphql-directives.md#2025-04-18_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nquery TodoListQuery($userID: ID) {\n  ...TodoList_list @arguments(count: $count, userID: $userID) # Pass arguments here\n}\n```\n\n----------------------------------------\n\nTITLE: Schema Introspection Response for Node Root Field\nDESCRIPTION: Expected JSON response showing the node root field implementation in the schema.\nSOURCE: https://github.com/facebook/relay/blob/main/website/spec/ObjectIdentification.md#2025-04-18_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"__schema\": {\n    \"queryType\": {\n      \"fields\": [\n        {\n          \"name\": \"node\",\n          \"type\": {\n            \"name\": \"Node\",\n            \"kind\": \"INTERFACE\"\n          },\n          \"args\": [\n            {\n              \"name\": \"id\",\n              \"type\": {\n                \"kind\": \"NON_NULL\",\n                \"ofType\": {\n                  \"name\": \"ID\",\n                  \"kind\": \"SCALAR\"\n                }\n              }\n            }\n          ]\n        }\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding a Description to a Relay Resolver Field in TypeScript\nDESCRIPTION: Demonstrates how to add a description to a Relay Resolver field using free text in the docblock. This description can be surfaced in editor tooling.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/api-reference/relay-resolvers/docblock-format.md#2025-04-18_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\n/**\n * @RelayResolver User.name: String\n *\n * What's in a name? That which we call a rose by any other name would smell\n * just as sweet.\n */\nexport function name(user: UserModel): string {\n  return user.name;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining an assignable fragment on User type (JavaScript)\nDESCRIPTION: This JavaScript code defines a Relay fragment named `AssignBestFriendButton_assignable_user` on the `User` type. The `@assignable` directive makes this fragment assignable, allowing it to be used in conjunction with `readUpdatableQuery` to update linked fields. Assignable fragments can only contain a single field, `__typename`.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/guided-tour/updating-data/imperatively-modifying-linked-fields.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// AssignBestFriendButton.react.js\ngraphql`\n  fragment AssignBestFriendButton_assignable_user on User @assignable {\n    __typename\n  }\n`;\n```\n\n----------------------------------------\n\nTITLE: Rendering FbInternalOnly Component - JavaScript\nDESCRIPTION: This snippet utilizes the FbInternalOnly component to conditionally display content that is accessible only to internal users, ensuring that sensitive information isn't disclosed to the public.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v13.0.0/guided-tour/introduction.md#2025-04-18_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\n<FbInternalOnly>\n* [Javascript](https://our.internmc.facebook.com/intern/wiki/JavaScript/)\n* [React](https://our.internmc.facebook.com/intern/wiki/ReactGuide/)\n* [GraphQL](https://our.internmc.facebook.com/intern/wiki/GraphQL/) and our internal [GraphQL Server](https://our.internmc.facebook.com/intern/wiki/Graphql-for-hack-developers/)\n</FbInternalOnly>\n```\n\n----------------------------------------\n\nTITLE: Implementing Missing Field Handlers in Relay Environment\nDESCRIPTION: Example of configuring missingFieldHandlers in a Relay Environment to handle different field types including node, user, and story fields. The handlers map fields to their corresponding data by ID to enable data reuse.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/guided-tour/reusing-cached-data/filling-in-missing-data.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst {ROOT_TYPE, Environment} = require('relay-runtime');\n\nconst missingFieldHandlers = [\n  {\n    handle(field, record, argValues): ?string {\n      // Make sure to add a handler for the node field\n      if (\n        record != null &&\n        record.getType() === ROOT_TYPE &&\n        field.name === 'node' &&\n        argValues.hasOwnProperty('id')\n      ) {\n        return argValues.id\n      }\n      if (\n        record != null &&\n        record.getType() === ROOT_TYPE &&\n        field.name === 'user' &&\n        argValues.hasOwnProperty('id')\n      ) {\n        // If field is user(id: $id), look up the record by the value of $id\n        return argValues.id;\n      }\n      if (\n        record != null &&\n        record.getType() === ROOT_TYPE &&\n        field.name === 'story' &&\n        argValues.hasOwnProperty('story_id')\n      ) {\n        // If field is story(story_id: $story_id), look up the record by the\n        // value of $story_id.\n        return argValues.story_id;\n      }\n      return undefined;\n    },\n    kind: 'linked',\n  },\n];\n\nconst environment = new Environment({/*...*/, missingFieldHandlers});\n```\n\n----------------------------------------\n\nTITLE: Configuring Query Resolver with MockPayloadGenerator\nDESCRIPTION: Demonstrates how to configure a query resolver using MockPayloadGenerator to return mocked GraphQL data for testing. Shows type definition and field specification.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/guides/testing-relay-with-preloaded-queries.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nreturn MockPayloadGenerator.generate(operation, {\n  CurrencyAmount() { // <-- the GraphQL type\n    return {\n      formatted_amount: \"response_value\" <-- CurrencyAmount fields, selected in the query\n    };\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Retrieving Associated Files\nDESCRIPTION: Method to get an optional map of file objects associated with the mutation.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-classic/Classic-Interfaces-MutationRequest.md#2025-04-18_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ngetFiles(): ?{[key: string]: File}\n```\n\n----------------------------------------\n\nTITLE: Importing Relay Hooks in JavaScript\nDESCRIPTION: Example of importing Relay Hooks from either the main 'react-relay' module or the specific 'react-relay/hooks' module for more targeted inclusion.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/migration-and-compatibility/upgrading-to-relay-hooks.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport {graphql, useFragment} from 'react-relay'; // or 'react-relay/hooks'\n\n// ...\n```\n\n----------------------------------------\n\nTITLE: Embedding Facebook Video in JSX\nDESCRIPTION: This code snippet shows how to embed a Facebook video using an iframe in JSX. It includes a complex URL with encoded parameters and sets various attributes for video display.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/principles-and-architecture/videos.md#2025-04-18_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<iframe src=\"https://www.facebook.com/plugins/video.php?href=https%3A%2F%2Fwww.facebook.com%2FFacebookforDevelopers%2Fvideos%2F10154614710193553%2F&show_text=0&width=640\" width={640} height={360} frameBorder=\"0\" allowFullScreen={true} />\n```\n\n----------------------------------------\n\nTITLE: Starting a React App with NPM or Yarn\nDESCRIPTION: Commands to navigate to the app's directory and start the development server using either NPM or Yarn.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/getting-started/step-by-step-guide.md#2025-04-18_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# NPM\ncd your-app-name\nnpm start\n\n# Yarn\ncd your-app-name\nyarn start\n```\n\n----------------------------------------\n\nTITLE: Moving Prepared Components with Shell Command\nDESCRIPTION: Shell command to move the prepared hovercard component files from the 'future' directory to 'src/components' for use in the application.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/tutorial/queries-2.md#2025-04-18_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmv future/* src/components\n```\n\n----------------------------------------\n\nTITLE: Downloading GraphQL Schema with CURL\nDESCRIPTION: This code snippet demonstrates how to download a GraphQL schema from a remote URL using `curl`.  It saves the schema to a file named `schema.graphql` in the current directory.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/getting-started/step-by-step-guide.md#2025-04-18_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n\"cd your-app-name\ncurl https://raw.githubusercontent.com/relayjs/relay-examples/main/issue-tracker/schema/schema.graphql > schema.graphql\"\n```\n\n----------------------------------------\n\nTITLE: Configuring WebSocket Subscriptions with graphql-ws\nDESCRIPTION: Sets up a WebSocket subscription client using graphql-ws library for Relay network layer, creating an observable for handling GraphQL subscriptions\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/guided-tour/updating-data/graphql-subscriptions.md#2025-04-18_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport {\n    ...\n    Network,\n    Observable\n} from 'relay-runtime';\nimport { createClient } from 'graphql-ws';\n\nconst wsClient = createClient({\n  url:'ws://localhost:3000',\n});\n\nconst subscribe = (operation, variables) => {\n  return Observable.create((sink) => {\n    return wsClient.subscribe(\n      {\n        operationName: operation.name,\n        query: operation.text,\n        variables,\n      },\n      sink,\n    );\n  });\n}\n\nconst network = Network.create(fetchQuery, subscribe);\n```\n\n----------------------------------------\n\nTITLE: Defining a GraphQL Subscription for Feedback Likes\nDESCRIPTION: A basic GraphQL subscription that listens for like events on a feedback item. It demonstrates the subscription keyword and structure with a subscription root field.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/guided-tour/updating-data/graphql-subscriptions.md#2025-04-18_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nsubscription FeedbackLikeSubscription($input: FeedbackLikeSubscribeData!) {\n  feedback_like_subscribe(data: $input) {\n    feedback {\n      like_count\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Visualizing Relay Notify Process\nDESCRIPTION: ASCII diagram showing how the notify() process triggers affected subscriptions to fire callbacks when record data changes.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v13.0.0/principles-and-architecture/runtime-architecture.md#2025-04-18_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n                        notify\n                           │\n                           ▼\n             ┌───────────────────────────┐\n             │           Store           │\n             │ ┌───────────────────────┐ │\n             │ │     RecordSource      │ │\n             │ │                       │ │\n             │ │┌──────┐┌──────┐┌─────┐│ │\n             │ ││Record││Record││ ... ││ │\n             │ │└──────┘└──────┘└─────┘│ │\n             │ └───────────────────────┘ │\n             │ ┌───────────────────────┐ │\n             │ │     Subscriptions     │ │\n             │ │                       │ │\n             │ │┌──────┐┌──────┐┌─────┐│ │\n             │ ││  Sub.││  Sub.││  ...││ │ <--- affected subscriptions fire\n             │ │└──────┘└──────┘└─────┘│ │\n             │ └───┼───────┼───────┼───┘ │\n             └─────┼───────┼───────┼─────┘\n                   │       │       │\n                   ▼       │       │\n               callback    │       │\n                           ▼       │\n                       callback    │\n                                   ▼\n                               callback\n```\n\n----------------------------------------\n\nTITLE: Importing Relay Hooks in React Components\nDESCRIPTION: Shows how to import Relay Hooks either from the main react-relay module or from the dedicated hooks submodule.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v13.0.0/migration-and-compatibility/upgrading-to-relay-hooks.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport {graphql, useFragment} from 'react-relay'; // or 'react-relay/hooks'\n\n// ...\n```\n\n----------------------------------------\n\nTITLE: Using Fragment References with useFragment Hook\nDESCRIPTION: Shows how to use fragment references in Relay by combining usePreloadedQuery and useFragment hooks to access fragmented data from a query result.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/glossary/glossary.md#2025-04-18_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst queryData = usePreloadedQuery(\n  graphql`query ComponentQuery { viewer { account_user { ...Component_name } } }`,\n  {},\n);\n\n// queryData.viewer is the FragmentReference\n// Though this would usually happen in another file, you can\n// extract the value of Component_name as follows:\nconst fragmentData = useFragment(\n  graphql`fragment Component_name on User { name }`,\n  queryData?.viewer?.account_user,\n);\n```\n\n----------------------------------------\n\nTITLE: Visualizing Relay Compiler Data Flow with ASCII Diagram\nDESCRIPTION: This ASCII diagram illustrates the high-level flow of data through the Relay compiler, showing the process from parsing GraphQL and schema to generating optimized GraphQL and artifacts.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/principles-and-architecture/compiler-architecture.md#2025-04-18_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n                   ┌─────────────┐┌─────────────┐\n                   │   GraphQL   ││   Schema    │\n                   └─────────────┘└─────────────┘\n                          │              │              parse\n                          └───────┬──────┘\n                                  ▼\n                   ┌────────────────────────────┐\n                   │      CompilerContext       │\n                   │                            │\n                   │   ┌─────┐ ┌─────┐ ┌─────┐  │──┐\n                   │   │ IR  │ │ IR  │ │ ... │  │  │\n                   │   └─────┘ └─────┘ └─────┘  │  │\n                   └────────────────────────────┘  │  transform/\n                          │    │      ▲            │   optimize\n                          │    │      └────────────┘\n                          │    │\n                          │    └──────────┐\n                          │  print        │  codegen\n                          ▼               ▼\n                   ┌─────────────┐ ┌─────────────┐\n                   │   GraphQL   │ │  Artifacts  │\n                   └─────────────┘ └─────────────┘\n```\n\n----------------------------------------\n\nTITLE: Importing Docusaurus Components\nDESCRIPTION: React/JSX imports for documentation components including DocsRating and internal documentation conditionals.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/guided-tour/updating-data/introduction.md#2025-04-18_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport DocsRating from '@site/src/core/DocsRating';\nimport {OssOnly, FbInternalOnly} from 'docusaurus-plugin-internaldocs-fb/internal';\n```\n\n----------------------------------------\n\nTITLE: Creating Relay Container for ProfilePicture\nDESCRIPTION: Implementation of a Relay Container that wraps the ProfilePicture component and defines its data requirements using GraphQL fragments.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-classic/Classic-Guides-Containers.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = Relay.createContainer(ProfilePicture, {\n  // Specify the initial value of the `$size` variable.\n  initialVariables: {\n    size: 32\n  },\n  // For each of the props that depend on server data, we define a corresponding\n  // key in `fragments`. Here, the component expects server data to populate the\n  // `user` prop, so we'll specify the fragment from above as `fragments.user`.\n  fragments: {\n    user: () => Relay.QL`\n      fragment on User {\n        profilePhoto(size: $size) {\n          uri,\n        },\n      }\n    `,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: GraphQL Mutation for Liking a Story\nDESCRIPTION: This GraphQL mutation defines an operation to mark a story as liked by the current user. It includes a human-readable name, input types (storyID), and specifies the field (likeCount) to be refetched after the mutation completes. This allows the client to update the UI with the new like count without refetching the entire story.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/principles-and-architecture/thinking-in-graphql.md#2025-04-18_snippet_10\n\nLANGUAGE: graphql\nCODE:\n```\n// Give a human-readable name and define the types of the inputs,\n// in this case the id of the story to mark as liked.\nmutation StoryLike($storyID: String) {\n   // Call the mutation field and trigger its side effects\n   storyLike(storyID: $storyID) {\n     // Define fields to re-fetch after the mutation completes\n     likeCount\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a GraphQL Fragment for Author Details in JavaScript\nDESCRIPTION: This snippet demonstrates how to define a GraphQL fragment using a GraphQL literal in JavaScript. The fragment specifies the data requirements for an Author component.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/principles-and-architecture/thinking-in-relay.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst authorDetailsFragment = graphql`\n  fragment AuthorDetails_author on Author {\n    name\n    photo {\n      url\n    }\n  }\n`;\n```\n\n----------------------------------------\n\nTITLE: Manual Testing Setup for Relay Compiler Playground\nDESCRIPTION: Steps for manually testing the Relay Compiler Playground. Involves linking the package, clearing Docusaurus cache, and launching the website in dev mode.\nSOURCE: https://github.com/facebook/relay/blob/main/compiler/crates/relay-compiler-playground/README.md#2025-04-18_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncd relay-compiler-playground/pkg\nyarn link\n\ncd ~/fbsource/xplat/js/RKJSModules/Libraries/Relay/oss/__github__/website\nyarn link relay-compiler-playground\n\n# You may need to clear Docusaurus cache\nnpx docusaurus clear\n\n# Launch the website in dev mode\nyarn start\n```\n\n----------------------------------------\n\nTITLE: Markdown Frontmatter Configuration\nDESCRIPTION: YAML frontmatter configuration for the documentation page defining metadata like ID, title, slug, description and keywords.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/guided-tour/list-data/connections.md#2025-04-18_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n---\nid: connections\ntitle: Connections\nslug: /guided-tour/list-data/connections/\ndescription: Relay guide for connections\nkeywords:\n- pagination\n- connections\n---\n```\n\n----------------------------------------\n\nTITLE: Installing Relay Runtime and Compiler (Yarn)\nDESCRIPTION: These commands install the necessary Relay packages using Yarn. Similar to the NPM commands, `relay-runtime` and `react-relay` are installed as regular dependencies, while `relay-compiler` and `babel-plugin-relay` are installed as development dependencies.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/getting-started/step-by-step-guide.md#2025-04-18_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n\"# Yarn Users\nyarn add relay-runtime react-relay\nyarn add --dev relay-compiler babel-plugin-relay\"\n```\n\n----------------------------------------\n\nTITLE: Testing Relay Refetch Components\nDESCRIPTION: Illustrates how to test a Refetch component by wrapping it with a useLazyLoadQuery component. It shows how to trigger and resolve a refetch operation, and verify the results.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v13.0.0/guides/testing-relay-components.md#2025-04-18_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\ntest('Refetch Container', () => {\n  const environment = createMockEnvironment();\n  const TestRenderer = () => {\n    const data = useLazyLoadQuery(\n      graphql`\n        query TestQuery @relay_test_operation {\n          myData: node(id: \"test-id\") {\n            # Spread the pagination fragment you want to test here\n            ...MyRefetchableFragment\n          }\n        }\n      `,\n      {},\n    );\n    return <MyRefetchContainer data={data.myData} />\n  };\n\n  const renderer = ReactTestRenderer.create(\n    <RelayEnvironmentProvider environment={environment}>\n      <Suspense fallback=\"Loading...\">\n        <TestRenderer />\n      </Suspense>\n    </RelayEnvironmentProvider>\n  );\n\n  ReactTestRenderer.act(() => {\n    environment.mock.resolveMostRecentOperation(operation =>\n      MockPayloadGenerator.generate(operation),\n    );\n  });\n\n  const refetchButton = renderer.root.find(node => node.props['data-testid'] === 'refetch');\n\n  refetchButton.props.onClick();\n\n  ReactTestRenderer.act(() => {\n    environment.mock.resolveMostRecentOperation(operation =>\n      MockPayloadGenerator.generate(operation, {\n        // We can customize mock resolvers, to change the output of the refetch query\n      }),\n    );\n  });\n\n  expect(renderer).toMatchSnapshot();\n});\n```\n\n----------------------------------------\n\nTITLE: Running the Relay Compiler using yarn\nDESCRIPTION: This snippet demonstrates how to run the Relay Compiler using the `yarn run relay` command. This command executes the `relay-compiler` script defined in your `package.json` file. This command compiles the GraphQL queries in your project.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/getting-started/installation-and-setup.md#2025-04-18_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\n\"yarn run relay\"\n```\n\n----------------------------------------\n\nTITLE: Displaying DocsRating Component in JSX\nDESCRIPTION: This code snippet uses the <DocsRating /> component within a JSX file. The purpose is to render the DocsRating component, possibly allowing users to rate or provide feedback for the documentation. It assumes the DocsRating component has been correctly imported and defined.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/principles-and-architecture/videos.md#2025-04-18_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<DocsRating />\n```\n\n----------------------------------------\n\nTITLE: Creating Relay compiler configuration file\nDESCRIPTION: Configuration file that defines options for the Relay compiler including source directory, language, schema location, and excluded paths.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/getting-started/installation-and-setup.md#2025-04-18_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// relay.config.js\nmodule.exports = {\n  // ...\n  // Configuration options accepted by the `relay-compiler` command-line tool and `babel-plugin-relay`.\n  src: \"./src\",\n  language: \"javascript\", // \"javascript\" | \"typescript\" | \"flow\"\n  schema: \"./data/schema.graphql\",\n  excludes: [\"**/node_modules/**\", \"**/__mocks__/**\", \"**/__generated__/**\"],\n}\n```\n\n----------------------------------------\n\nTITLE: Open Source Relay Configuration\nDESCRIPTION: Example configuration for open-source Relay implementations, showing how to set up client 3D with custom module importing and resolver surface.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/guides/data-driven-dependencies/configuration.md#2025-04-18_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n\"moduleImportConfig\": {\n    \"dynamicModuleProvider\": {\n        \"mode\": \"Custom\",\n        \"statement\": \"() => require('./.<$module>')\"\n    },\n    \"surface\": \"resolvers\"\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Descriptions to Relay Resolver Definitions\nDESCRIPTION: Demonstrates how to add a description to a type or field by including free text in the docblock. These descriptions are surfaced in the Relay VSCode extension.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/api-reference/relay-resolvers/docblock-format.md#2025-04-18_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\n/**\n * @RelayResolver User.name: String\n *\n * What's in a name? That which we call a rose by any other name would smell\n * just as sweet.\n */\nexport function name(user: UserModel): string {\n  return user.name;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing useFragment Hook in Story Component\nDESCRIPTION: Using useFragment hook to access fragment data in the Story component\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/tutorial/fragments-1.md#2025-04-18_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useFragment } from 'react-relay';\n\nexport default function Story({story}: Props) {\n  const data = useFragment(\n    StoryFragment,\n    story,\n  );\n  return (\n    <Card>\n      <Heading>{data.title}</Heading>\n      <PosterByline poster={data.poster} />\n      <Timestamp time={data.createdAt} />\n      <Image image={data.thumbnail} />\n      <StorySummary summary={data.summary} />\n    </Card>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Rebel Ships with PageInfo\nDESCRIPTION: This complex query fetches two sets of Rebel ships and includes PageInfo to check if there are more results. It demonstrates how to use hasNextPage for efficient pagination.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/guides/graphql-server-specification.md#2025-04-18_snippet_9\n\nLANGUAGE: graphql\nCODE:\n```\nquery EndOfRebelShipsQuery {\n  rebels {\n    name\n    originalShips: ships(first: 2) {\n      edges {\n        node {\n          name\n        }\n      }\n      pageInfo {\n        hasNextPage\n      }\n    }\n    moreShips: ships(first: 3 after: \"YXJyYXljb25uZWN0aW9uOjE=\") {\n      edges {\n        node {\n          name\n        }\n      }\n      pageInfo {\n        hasNextPage\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining UploadableMap Type for File/Blob Objects in TypeScript\nDESCRIPTION: TypeScript type definition for an object map that accepts File or Blob values. Used for handling file uploads in Relay applications, where each property can contain either a File or Blob object.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/api-reference/types/UploadableMap.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype UploadableMap = {\n  [key: string]: File | Blob\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Response Caching for REST in JavaScript\nDESCRIPTION: Demonstrates a simple response caching mechanism for REST requests using a Map to store responses based on URIs.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/principles-and-architecture/thinking-in-graphql.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nvar _cache = new Map();\nrest.get = uri => {\n  if (!_cache.has(uri)) {\n    _cache.set(uri, fetch(uri));\n  }\n  return _cache.get(uri);\n};\n```\n\n----------------------------------------\n\nTITLE: Using useTransition for Refetching Data in React\nDESCRIPTION: This code demonstrates how to implement the useTransition hook to manage loading states when refetching data in a React component. The ContactsList component utilizes the useTransition hook to distinguish between input changes and data fetching, ensuring a seamless user experience by showing a spinner while retaining the previous data.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/tutorial/refetchable-fragments.md#2025-04-18_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\n// change-line\nconst {useState, useTransition} = React;\n\nfunction ContactsList({viewer}) {\n  // change-line\n  const [isPending, startTransition] = useTransition();\n  const [searchString, setSearchString] = useState('');\n  const [data, refetch] = useRefetchableFragment(ContactsListFragment, viewer);\n  const onSearchStringChanged = (value) => {\n    setSearchString(value);\n    // change\n    startTransition(() => {\n      refetch({search: value});\n    });\n    // end-change\n  };\n  return (\n    <Card dim={true}>\n      <h3>Contacts</h3>\n      <SearchInput\n        value={searchString}\n        onChange={onSearchStringChanged}\n        // change-line\n        isPending={isPending}\n      />\n      {data.contacts.map(contact =>\n        <ContactRow key={contact.id} contact={contact} />\n      )}\n    </Card>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Base URL Hook for Docusaurus\nDESCRIPTION: This snippet shows how to import the useBaseUrl hook from Docusaurus to construct relative URLs for images or documents within the documentation site.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/editor-support.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport useBaseUrl from '@docusaurus/useBaseUrl';\n```\n\n----------------------------------------\n\nTITLE: Using DocsRating Component in JSX\nDESCRIPTION: Renders a documentation rating component in the page.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/guided-tour/managing-data-outside-react/prefetching-queries.md#2025-04-18_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<DocsRating />\n```\n\n----------------------------------------\n\nTITLE: Modifying Updatable Data in Relay (JavaScript)\nDESCRIPTION: Shows how to modify fields of updatableData, like toggling 'doesViewerLike' and adjusting 'likeCount'. These changes are optimistically applied until the mutation completes.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/tutorial/mutations-updates.md#2025-04-18_snippet_10\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction StoryLikeButton({story}) {\n  ...\n      optimisticUpdater: store => {\n        const fragment = graphql`\n          fragment StoryLikeButton_updatable on Story @updatable {\n            likeCount\n            doesViewerLike\n          }\n        `;\n        const {updatableData} = store.readUpdatableFragment(fragment, story);\n        // change\n        const alreadyLikes = updatableData.doesViewerLike;\n        updatableData.doesViewerLike = !alreadyLikes;\n        updatableData.likeCount += (alreadyLikes ? -1 : 1);\n        // end-change\n      },\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Relay Compiler Error for Invalid ID Field Type\nDESCRIPTION: Example error message shown by the Relay compiler when an invalid type is used for an 'id' field in a GraphQL schema. The error indicates that a String type is being used instead of the required ID type.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/debugging/disallowed-id-types-error.md#2025-04-18_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nDisallowed type `String` of field `id` on parent type `Foo` cannot be used by Relay to identify entities\n```\n\n----------------------------------------\n\nTITLE: GraphQL Connection with @connection Directive\nDESCRIPTION: A GraphQL fragment using the @connection directive, which enables Relay pagination. The connection is annotated with a key and includes ordering by firstname.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v13.0.0/api-reference/relay-runtime/store.md#2025-04-18_snippet_42\n\nLANGUAGE: graphql\nCODE:\n```\nfragment FriendsFragment on User {\n  friends(first: 10, orderby: \"firstname\") @connection(\n    key: \"FriendsFragment_friends\",\n  ) {\n    edges {\n      node {\n        id\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Refreshing Queries without Suspense in Relay\nDESCRIPTION: Demonstrates how to refresh a query without suspending the component by using fetchQuery to pre-fetch data before updating the component. This approach maintains visibility of existing content during refresh.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/guided-tour/refetching/refreshing-queries.md#2025-04-18_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * App.react.js\n */\nimport type {AppQuery as AppQueryType} from 'AppQuery.graphql';\n\nconst AppQuery = require('__generated__/AppQuery.graphql');\n\nfunction App(props: Props) {\n  const variables = {id: '4'}\n  const environment = useRelayEnvironment();\n  const [refreshedQueryOptions, setRefreshedQueryOptions] = useState(null);\n  const [isRefreshing, setIsRefreshing] = useState(false)\n\n  const refresh = useCallback(() => {\n    if (isRefreshing) { return; }\n    setIsRefreshing(true);\n\n    // fetchQuery will fetch the query and write\n    // the data to the Relay store. This will ensure\n    // that when we re-render, the data is already\n    // cached and we don't suspend\n    fetchQuery(environment, AppQuery, variables)\n      .subscribe({\n        complete: () => {\n          setIsRefreshing(false);\n\n          // *After* the query has been fetched, we update\n          // our state to re-render with the new fetchKey\n          // and fetchPolicy.\n          // At this point the data for the query should\n          // be cached, so we use the 'store-only'\n          // fetchPolicy to avoid suspending.\n          setRefreshedQueryOptions(prev => ({\n            fetchKey: (prev?.fetchKey ?? 0) + 1,\n            fetchPolicy: 'store-only',\n          }));\n        }\n        error: () => {\n          setIsRefreshing(false);\n        }\n      });\n  }, [/* ... */]);\n\n  return (\n    <React.Suspense fallback=\"Loading query...\">\n      <MainContent\n        isRefreshing={isRefreshing}\n        refresh={refresh}\n        queryOptions={refreshedQueryOptions ?? {}}\n        variables={variables}\n      />\n    </React.Suspense>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: GitHub Authentication Token Configuration\nDESCRIPTION: Environment variable configuration for GitHub GraphQL API authentication.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-experimental/RelayHooks-StepByStep.md#2025-04-18_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# your-app-name/.env.local\nREACT_APP_GITHUB_AUTH_TOKEN=<TOKEN>\n```\n\n----------------------------------------\n\nTITLE: GraphQL query for setting a field value\nDESCRIPTION: An example GraphQL query that retrieves the id and name of the viewer.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v13.0.0/api-reference/relay-runtime/store.md#2025-04-18_snippet_31\n\nLANGUAGE: graphql\nCODE:\n```\nviewer {\n  id\n  name\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Connections with Pagination\nDESCRIPTION: Example showing how to query paginated ship connections with cursors and edge information.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/guides/graphql-server-specification.md#2025-04-18_snippet_3\n\nLANGUAGE: graphql\nCODE:\n```\nquery EndOfRebelShipsQuery {\n  rebels {\n    name\n    originalShips: ships(first: 2) {\n      edges {\n        node {\n          name\n        }\n      }\n      pageInfo {\n        hasNextPage\n      }\n    }\n    moreShips: ships(first: 3 after: \"YXJyYXljb25uZWN0aW9uOjE=\") {\n      edges {\n        node {\n          name\n        }\n      }\n      pageInfo {\n        hasNextPage\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Client3DFoo Relay Resolver\nDESCRIPTION: This TypeScript snippet defines the Client3DFoo Relay Resolver, implementing the IClient3D interface and providing the data resolver function.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/guides/data-driven-dependencies/client-3d.md#2025-04-18_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * @RelayResolver Client3DFoo implements IClient3D\n */\nfunction Client3DFoo(id: DataID): ?Client3DModel {\n  if (id === INVALID_ID) {\n    return null;\n  }\n  return {\n    __id: id,\n  };\n}\n\n/**\n * @RelayResolver Client3DFoo.data: Client3DData\n */\nfunction data(client3DModel: Client3DModel): Client3DData {\n  return {\n    type: 'FOO',\n    info: 'someFooInfo',\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering OssOnly Component - JavaScript\nDESCRIPTION: This snippet uses the OssOnly component to provide resources and links that are publicly accessible, aimed at users who may not be part of the internal organization, thereby enhancing the experience for external users.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v13.0.0/guided-tour/introduction.md#2025-04-18_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\n<OssOnly>\n* [Javascript](https://felix-kling.de/jsbasics/)\n* [React](https://reactjs.org/docs/getting-started.html)\n* [GraphQL](https://graphql.org/learn/)\n</OssOnly>\n```\n\n----------------------------------------\n\nTITLE: Defining Object Type Mock Resolver in JavaScript\nDESCRIPTION: This example shows how to create a mock resolver for a User object type, providing default values for its fields including nested objects.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/guides/testing-relay-components.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  // This will be the default values for User object in the query response\n  User() {\n    return {\n      id: 4,\n      name: \"Mark\",\n      profile_picture: {\n        uri: \"http://my-image...\",\n      },\n    };\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Error Message Example for Unknown Field in Relay\nDESCRIPTION: Example of an error message when the Relay compiler cannot find a field on a type, suggesting a possible alternative field name.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/error-reference/unknown-field.md#2025-04-18_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nError in the project `some_project`: ✖︎ The type `UserInfo` has no field `mail`. Did you mean `email`?\n```\n\n----------------------------------------\n\nTITLE: Custom Mode Configuration for Meta Internal Use\nDESCRIPTION: Example of custom mode configuration that uses a custom import statement for loading 3D components, utilizing JSResource with a custom implementation.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/guides/data-driven-dependencies/configuration.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n\"moduleImportConfig\": {\n    \"dynamicModuleProvider\": {\n        \"mode\": \"Custom\",\n        \"statement\": \"function() { var JSResource = require('JSResource'); return JSResource('m#<$module>'); }\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Git Status in CI Script - Bash\nDESCRIPTION: A bash script that checks if the Relay compiler has produced any changes to generated files in CI. This helps ensure that committed artifacts are in sync with source code.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/getting-started/production.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n#!/bin/bash\n\nstatus=$(git status --porcelain)\n\nif [ -n \"$status\" ]; then\n  echo \"Error: The working directory is not clean.\"\n  echo \"Please commit or stash your changes.\"\n  exit 1\nfi\n```\n\n----------------------------------------\n\nTITLE: Configuring GC Scheduler in Relay Store\nDESCRIPTION: This code snippet shows how to configure a custom garbage collection scheduler for the Relay Store. The `gcScheduler` function allows you to control when garbage collection is executed, potentially optimizing performance based on application-specific criteria. It accepts a callback that should be executed at some later time.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/guided-tour/reusing-cached-data/presence-of-data.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// Sample scheduler function\n// Accepts a callback and schedules it to run at some future time.\nfunction gcScheduler(run: () => void) {\n  resolveImmediate(run);\n}\n\nconst store = new Store(source, {gcScheduler});\n```\n\n----------------------------------------\n\nTITLE: Cache Data Structure Example\nDESCRIPTION: Pseudo-code showing how normalized data is stored in Relay's cache using a Map structure with linked records.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/principles-and-architecture/thinking-in-graphql.md#2025-04-18_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nMap {\n  // `story(id: \"1\")`\n  1: Map {\n    text: 'got GraphQL?',\n    author: Link(2),\n    comments: [Link(3)],\n  },\n  // `story.author`\n  2: Map {\n    name: 'Yuzhi',\n    photo: 'http://.../photo1.jpg',\n  },\n  // `story.comments[0]`\n  3: Map {\n    text: 'Here\\'s how to get one!',\n    author: Link(2),\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Comment Posting Mutation in Relay\nDESCRIPTION: Defines a mutation for posting a comment on a story, selecting the newly created edge to the comment in the response.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/tutorial/mutations-updates.md#2025-04-18_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst StoryCommentsComposerPostMutation = graphql`\n  mutation StoryCommentsComposerPostMutation(\n    $id: ID!,\n    $text: String!,\n  ) {\n    postStoryComment(id: $id, text: $text) {\n      commentEdge {\n        node {\n          id\n          text\n        }\n      }\n    }\n  }\n`;\n```\n\n----------------------------------------\n\nTITLE: Fetching Data with GraphQL\nDESCRIPTION: Shows how GraphQL can fetch the same story data in a single network request using a query.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/principles-and-architecture/thinking-in-graphql.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ngraphql.get(`query { stories { id, text } }`).then(\n  stories => {\n    console.log(stories);\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Polyfilling JavaScript environment for Relay\nDESCRIPTION: This snippet shows how to polyfill the JavaScript environment for Relay using `core-js` to support older browsers. It includes polyfills for `Map`, `Set`, `Promise`, and `Object`. These polyfills ensure that Relay works correctly in environments lacking native support for these features.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/getting-started/installation-and-setup.md#2025-04-18_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nrequire('core-js/es6/map');\nrequire('core-js/es6/set');\nrequire('core-js/es6/promise');\nrequire('core-js/es6/object');\n\nrequire('./myRelayApplication');\n```\n\n----------------------------------------\n\nTITLE: Implementing Suspense with Relay Query Component\nDESCRIPTION: Demonstrates how to use Suspense with a Relay query component to handle loading states while fetching data.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/guided-tour/rendering/loading-states.md#2025-04-18_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n/**\n * MainContent.react.js\n *\n * Query Component\n */\n\nconst React = require('React');\nconst {graphql, usePreloadedQuery} = require('react-relay');\n\nfunction MainContent(props) {\n  // Fetch and render a query\n  const data = usePreloadedQuery<...>(\n    graphql`...`,\n    props.queryRef,\n  );\n\n  return (...);\n}\n```\n\nLANGUAGE: jsx\nCODE:\n```\n/**\n * App.react.js\n */\n\nconst React = require('React');\nconst {Suspense} = require('React');\n\nfunction App() {\n  return (\n    // LoadingGlimmer is rendered via the Suspense fallback\n    <Suspense fallback={<LoadingGlimmer />}>\n      <MainContent /> {/* MainContent may suspend */}\n    </Suspense>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Components in React Using Docusaurus\nDESCRIPTION: This code snippet imports the DocsRating component and specific internal plugins from Docusaurus. The main purpose is to utilize the rating functionality for documentation pages. Ensure that the necessary dependencies, such as Docusaurus and the internal plugin framework, are installed and correctly set up in your project.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/guided-tour/managing-data-outside-react/prefetching-queries.md#2025-04-18_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport DocsRating from '@site/src/core/DocsRating';\nimport {OssOnly, FbInternalOnly} from 'docusaurus-plugin-internaldocs-fb/internal';\n\n<DocsRating />\n```\n\n----------------------------------------\n\nTITLE: Importing DocsRating Component in Docusaurus\nDESCRIPTION: This snippet imports the DocsRating component from the site's core components and also imports 'OssOnly' and 'FbInternalOnly' from the internal Docusaurus plugin. The purpose is to use the DocsRating component in the documentation.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v13.0.0/guided-tour/managing-data-outside-react/subscribing-to-queries.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport DocsRating from '@site/src/core/DocsRating';\nimport {OssOnly, FbInternalOnly} from 'docusaurus-plugin-internaldocs-fb/internal';\n\n\n<DocsRating />\n```\n\n----------------------------------------\n\nTITLE: Integrating @inline Fragment in React Component\nDESCRIPTION: Shows how to use an @inline fragment within a React component by spreading it into a component's fragment and handling the data in a click event.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/api-reference/graphql/graphql-directives.md#2025-04-18_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nexport default function MyComponent({item}) {\n  function handleClick() {\n    processItemData(item);\n  }\n\n  const data = useFragment(\n    graphql`\n      fragment MyComponent_item on Item {\n        ...processItemData_item\n        title\n      }\n    `,\n    item,\n  );\n\n  return <button onClick={handleClick}>Process {item.title}</button>;\n}\n```\n\n----------------------------------------\n\nTITLE: Error: Missing Handler for deleteRecord in RelayModernEnvironment\nDESCRIPTION: This error suggests that the Relay environment expects a handler for the 'deleteRecord' operation, but none is provided. It's similar to the previous error but thrown from a different part of Relay.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/debugging/declarative-mutation-directives.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nRelayModernEnvironment: Expected a handler to be provided for handle `deleteRecord`.\n```\n\n----------------------------------------\n\nTITLE: GraphQL Literal Syntax in JavaScript\nDESCRIPTION: Demonstrates the basic syntax for writing GraphQL literals in JavaScript code. These literals are pre-processed at build time and replaced with a GraphQLTaggedNode containing an AST representation.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/glossary/glossary.md#2025-04-18_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\ngraphql`...`\n```\n\n----------------------------------------\n\nTITLE: Importing Internal Documentation Components in JSX\nDESCRIPTION: This snippet imports components for handling internal-only and open-source-only content in documentation.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/guided-tour/managing-data-outside-react/reading-fragments.md#2025-04-18_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport {OssOnly, FbInternalOnly} from 'docusaurus-plugin-internaldocs-fb/internal';\n```\n\n----------------------------------------\n\nTITLE: Displaying GitHub User Links in Markdown\nDESCRIPTION: This snippet demonstrates how to create clickable links to GitHub user profiles using Markdown syntax. It's used in the status updates section to reference team members.\nSOURCE: https://github.com/facebook/relay/blob/main/meta/meeting-notes/2016-03-14-team-sync.md#2025-04-18_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[@steveluscher](https://github.com/steveluscher)\n```\n\n----------------------------------------\n\nTITLE: Defining RenderFailure Function Type\nDESCRIPTION: Type definition for renderFailure callback that handles error states.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-classic/Classic-APIReference-RootContainer.md#2025-04-18_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nrenderFailure(error: Error, retry: Function): ?ReactElement\n```\n\n----------------------------------------\n\nTITLE: Defining SelectorStoreUpdater Type in TypeScript for Relay\nDESCRIPTION: Defines the SelectorStoreUpdater type as a function that takes a RecordSourceSelectorProxy and data as parameters, and returns void. This function allows for imperative reading and writing to the Relay store, enabling creation, updating, and deletion of records in response to subscription payloads.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/api-reference/types/SelectorStoreUpdater.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n(store: RecordSourceSelectorProxy, data) => void\n```\n\n----------------------------------------\n\nTITLE: Cache Data Structure Example\nDESCRIPTION: Pseudo-code showing the normalized cache structure for storing story, author, and comment data with proper linking between entities.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/principles-and-architecture/thinking-in-graphql.md#2025-04-18_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nMap {\n  // `story(id: \"1\")`\n  1: Map {\n    text: 'got GraphQL?',\n    author: Link(2),\n    comments: [Link(3)],\n  },\n  // `story.author`\n  2: Map {\n    name: 'Yuzhi',\n    photo: 'http://.../photo1.jpg',\n  },\n  // `story.comments[0]`\n  3: Map {\n    text: 'Here\\'s how to get one!',\n    author: Link(2),\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Object Type Mock Resolver in JavaScript\nDESCRIPTION: Example of creating a mock resolver for a User object type in Relay tests. This defines default values for User objects in query responses.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/guides/testing-relay-components.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  // This will be the default values for User object in the query response\n  User() {\n    return {\n      id: 4,\n      name: \"Mark\",\n      profile_picture: {\n        uri: \"http://my-image...\",\n      },\n    };\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Visualizing Relay Lookup Process\nDESCRIPTION: ASCII diagram showing how components read data from the store using lookup() to create a Snapshot that can be used for rendering and subscription.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v13.0.0/principles-and-architecture/runtime-architecture.md#2025-04-18_snippet_4\n\nLANGUAGE: text\nCODE:\n```\n    ┌───────────────────────┐       ┌──────────────┐\n    │     RecordSource      │       │              │\n    │                       │       │              │\n    │┌──────┐┌──────┐┌─────┐│       │   Selector   │\n    ││Record││Record││ ... ││       │              │\n    │└──────┘└──────┘└─────┘│       │              │\n    └───────────────────────┘       └──────────────┘\n                │                           │\n                │                           │\n                └──────────────┬────────────┘\n                               │\n                               │  lookup\n                               │  (read)\n                               │\n                               ▼\n                        ┌─────────────┐\n                        │             │\n                        │  Snapshot   │\n                        │             │\n                        └─────────────┘\n                               │\n                               │  render, etc\n                               │\n                               ▼\n```\n\n----------------------------------------\n\nTITLE: Introspecting a GraphQL Edge Type\nDESCRIPTION: GraphQL introspection query to examine the structure of an edge type, specifically looking at the fields of an 'ExampleEdge' type.\nSOURCE: https://github.com/facebook/relay/blob/main/website/spec/Connections.md#2025-04-18_snippet_3\n\nLANGUAGE: graphql\nCODE:\n```\n{\n  __type(name: \"ExampleEdge\") {\n    fields {\n      name\n      type {\n        name\n        kind\n        ofType {\n          name\n          kind\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using graphql Tagged Template Literal in JavaScript\nDESCRIPTION: Illustrates the use of the graphql tagged template literal, which is transformed by Babel into a require call for the generated artifact at build time.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/glossary/glossary.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ngraphql`...`\n```\n\n----------------------------------------\n\nTITLE: GraphQL Response Structure\nDESCRIPTION: Example JSON response structure from a GraphQL query.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/principles-and-architecture/thinking-in-graphql.md#2025-04-18_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"query\": {\n    \"story\": {\n      \"text\": \"Relay is open-source!\",\n      \"author\": {\n        \"name\": \"Jan\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Logging Example with Project Name in JavaScript\nDESCRIPTION: Demonstrates how to use recoverableViolation with a specific logger project name in Relay\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/guides/required-directive.md#2025-04-18_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nrecoverableViolation('My error string', 'my_logger_project');\n```\n\n----------------------------------------\n\nTITLE: Complete GraphQL Fragment Composition\nDESCRIPTION: The final composed GraphQL fragments showing how parent and child data requirements are combined.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-classic/Classic-Guides-Containers.md#2025-04-18_snippet_6\n\nLANGUAGE: graphql\nCODE:\n```\n`\n  fragment Profile on User {\n    name,\n    ...ProfilePhoto,\n  }\n\n  fragment ProfilePhoto on User {\n    profilePhoto(size: $size) {\n      uri,\n    },\n  }\n`\n```\n\n----------------------------------------\n\nTITLE: JSON Response for Ships and HasNextPage\nDESCRIPTION: This JSON response shows the result of querying ships along with `hasNextPage`. It demonstrates the use of `hasNextPage` to determine if more data is available.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v13.0.0/guides/graphql-server-specification.md#2025-04-18_snippet_18\n\nLANGUAGE: json\nCODE:\n```\n\"\"\"\n{\n  \"rebels\": {\n    \"name\": \"Alliance to Restore the Republic\",\n    \"originalShips\": {\n      \"edges\": [\n        {\n          \"node\": {\n            \"name\": \"X-Wing\"\n          }\n        },\n        {\n          \"node\": {\n            \"name\": \"Y-Wing\"\n          }\n        }\n      ],\n      \"pageInfo\": {\n        \"hasNextPage\": true\n      }\n    },\n    \"moreShips\": {\n      \"edges\": [\n        {\n          \"node\": {\n            \"name\": \"A-Wing\"\n          }\n        },\n        {\n          \"node\": {\n            \"name\": \"Millenium Falcon\"\n          }\n        },\n        {\n          \"node\": {\n            \"name\": \"Home One\"\n          }\n        }\n      ],\n      \"pageInfo\": {\n        \"hasNextPage\": false\n      }\n    }\n  }\n}\n\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Implementing a Local Persisting Server for Relay\nDESCRIPTION: Example implementation of a simple persist server that saves query text to a queryMap.json file, using Node.js http module and file system operations.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/guides/persisted-queries.md#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst http = require('http');\nconst crypto = require('crypto');\nconst fs = require('fs');\n\nfunction md5(input) {\n  return crypto.createHash('md5').update(input).digest('hex');\n}\n\nclass QueryMap {\n  constructor(fileMapName) {\n    this._fileMapName = fileMapName;\n    this._queryMap = new Map(JSON.parse(fs.readFileSync(this._fileMapName)));\n  }\n\n  _flush() {\n    const data = JSON.stringify(Array.from(this._queryMap.entries()));\n    fs.writeFileSync(this._fileMapName, data);\n  }\n\n  saveQuery(text) {\n    const id = md5(text);\n    this._queryMap.set(id, text);\n    this._flush();\n    return id;\n  }\n}\n\nconst queryMap = new QueryMap('./queryMap.json');\n\nasync function requestListener(req, res) {\n  if (req.method === 'POST') {\n    const buffers = [];\n    for await (const chunk of req) {\n      buffers.push(chunk);\n    }\n    const data = Buffer.concat(buffers).toString();\n    res.writeHead(200, {\n      'Content-Type': 'application/json'\n    });\n    try {\n      if (req.headers['content-type'] !== 'application/x-www-form-urlencoded') {\n        throw new Error(\n          'Only \"application/x-www-form-urlencoded\" requests are supported.'\n        );\n      }\n      const text = new URLSearchParams(data).get('text');\n      if (text == null) {\n        throw new Error('Expected to have `text` parameter in the POST.');\n      }\n      const id = queryMap.saveQuery(text);\n      res.end(JSON.stringify({\"id\": id}));\n    } catch (e) {\n      console.error(e);\n      res.writeHead(400);\n      res.end(`Unable to save query: ${e}.`);\n    }\n  } else {\n    res.writeHead(400);\n    res.end(\"Request is not supported.\")\n  }\n}\n\nconst PORT = 2999;\nconst server = http.createServer(requestListener);\nserver.listen(PORT);\n\nconsole.log(`Relay persisting server listening on ${PORT} port.`);\n```\n\n----------------------------------------\n\nTITLE: Illustrating SkipRedundantNodeTransform in GraphQL\nDESCRIPTION: Example showing how SkipRedundantNodeTransform eliminates complex cases of field duplication, such as when a field is fetched both unconditionally and conditionally.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/principles-and-architecture/compiler-architecture.md#2025-04-18_snippet_2\n\nLANGUAGE: graphql\nCODE:\n```\n# before: `id` processed up to 2x\nfoo {\n  bar {\n    id\n  }\n  ... on FooType @include(if: $cond) { # can't be flattened due to conditional\n    id # but this field is guaranteed to be fetched regardless\n  }\n}\n\n# after: `id` processed at most once\nfoo {\n  bar {\n    id\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Internal Version of Relay DevTools\nDESCRIPTION: Provides a command to acquire the internal version of the Relay DevTools extension immediately on a machine. It requires prior deletion of older versions and membership in the Relay DevTools Support group. The command \"sudo soloctl -i\" is used to expedite the installation process directly to Chrome.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/debugging/relay-devtools.md#2025-04-18_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nsudo soloctl -i\n```\n\n----------------------------------------\n\nTITLE: Installing React and Relay\nDESCRIPTION: Installs the latest versions of React, React DOM, and React Relay using yarn.  This ensures that the necessary dependencies are in place for using Relay Hooks.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/migration-and-compatibility/upgrading-to-relay-hooks.md#2025-04-18_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nyarn add react react-dom react-relay\n```\n\n----------------------------------------\n\nTITLE: Accumulating Loading States with Suspense\nDESCRIPTION: This snippet demonstrates how to wrap multiple components within a single Suspense boundary.  A single loading state (`LoadingGlimmer`) will be displayed until all wrapped components (`MainContent` and `SecondaryContent`) are ready to render, ensuring a coordinated loading experience.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/guided-tour/rendering/loading-states.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * App.react.js\n */\n\nconst React = require('React');\nconst {Suspense} = require('React');\n\nfunction App() {\n  return (\n    // A LoadingGlimmer for all content is rendered via the Suspense fallback\n    <Suspense fallback={<LoadingGlimmer />}>\n      <MainContent />\n      <SecondaryContent /> {/* SecondaryContent can also suspend */}\n    </Suspense>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Root Query in JavaScript\nDESCRIPTION: Demonstrates how to access the root query record and a linked record from it.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/api-reference/relay-runtime/store.md#2025-04-18_snippet_24\n\nLANGUAGE: javascript\nCODE:\n```\n// Represents root query\nconst root = store.getRoot();\n// Get the viewer linked record\nconst viewer = root.getLinkedRecord('viewer');\n```\n\n----------------------------------------\n\nTITLE: Demonstrating GraphQL Tag Transformation with babel-plugin-relay\nDESCRIPTION: This example shows how babel-plugin-relay transforms GraphQL template literals in JavaScript code into require statements that reference generated GraphQL artifacts. The plugin converts inline GraphQL fragments into imports of pre-compiled GraphQL ASTs.\nSOURCE: https://github.com/facebook/relay/blob/main/packages/babel-plugin-relay/README.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// It converts this code\nconst fragment = graphql`\n  fragment User_fragment on User {\n    name\n  }\n`;\n\n// To require generated ASTs for fragments and queries\nconst fragment = require('__generated__/User_fragment.graphql');\n```\n\n----------------------------------------\n\nTITLE: Defining MutationConfig Type in TypeScript for Relay\nDESCRIPTION: This code snippet defines the MutationConfig type, which is a generic type that extends MutationParameters. It specifies various optional and required fields for configuring a mutation in Relay.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/api-reference/types/MutationConfig.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nType `MutationConfig<TMutationConfig: MutationParameters>` = {\n  cacheConfig?: CacheConfig,\n  mutation: GraphQLTaggedNode,\n  onError?: (Error) => void,\n  onCompleted?: ($ElementType<TMutationConfig, 'response'>) => void,\n  onUnsubscribe?: () => void,\n  optimisticResponse?: Object,\n  optimisticUpdater?: SelectorStoreUpdater,\n  updater?: SelectorStoreUpdater,\n  uploadables?: UploadableMap,\n  variables: $ElementType<TMutationConfig, 'variables'>\n}\n```\n\n----------------------------------------\n\nTITLE: GraphQL query for linked records\nDESCRIPTION: An example GraphQL query that retrieves a set of nodes under the rootField.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v13.0.0/api-reference/relay-runtime/store.md#2025-04-18_snippet_24\n\nLANGUAGE: graphql\nCODE:\n```\nrootField {\n  nodes {\n    # ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Relay Babel Plugin for Artifact Directory\nDESCRIPTION: Configuration in .babelrc to tell the Babel plugin where to find the Relay compiler artifacts. This complements the package.json configuration and enables proper type resolution.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/guides/type-emission.md#2025-04-18_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"plugins\": [\n    [\"relay\", { \"artifactDirectory\": \"./src/__generated__\" }]\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: GraphQL Query: Fetch Best Friend's Age\nDESCRIPTION: This GraphQL query fetches the age of the user's best friend. It's used in conjunction with the previous query to demonstrate how a relationship change and incomplete data fetching can lead to null values.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/debugging/why-null.md#2025-04-18_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\nquery OtherQuery {\n  me {\n    best_friend {\n      # new id: 2\n      # Note: name is not fetched here\n      age\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: TypeScript Error Example with Relay Query\nDESCRIPTION: Demonstrates a TypeScript error when accessing query data without proper type annotations.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/tutorial/queries-1.md#2025-04-18_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst story = data.topStory;\n```\n\n----------------------------------------\n\nTITLE: REST Response Caching Implementation\nDESCRIPTION: Simple caching mechanism for REST requests using a Map to store and retrieve previous responses by URI\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/principles-and-architecture/thinking-in-graphql.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nvar _cache = new Map();\nrest.get = uri => {\n  if (!_cache.has(uri)) {\n    _cache.set(uri, fetch(uri));\n  }\n  return _cache.get(uri);\n};\n```\n\n----------------------------------------\n\nTITLE: Initial StoryLikeButton Component\nDESCRIPTION: Basic React component structure for the like button before mutation integration.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/tutorial/mutations-updates.md#2025-04-18_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nfunction StoryLikeButton({story}) {\n  const data = useFragment(StoryLikeButtonFragment, story);\n  function onLikeButtonClicked() {\n    // To be filled in\n  }\n  return (\n    <>\n      <LikeCount count={data.likeCount} />\n      <LikeButton value={data.doesViewerLike} onChange={onLikeButtonClicked} />\n    </>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Defining UploadableMap Type for File and Blob Uploads in TypeScript\nDESCRIPTION: This snippet defines the UploadableMap type as an object with values of type File or Blob. It's used for handling file uploads in Relay applications, allowing for structured management of uploadable content.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/api-reference/types/UploadableMap.md#2025-04-18_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ntype UploadableMap = {\n  [key: string]: File | Blob\n};\n```\n\n----------------------------------------\n\nTITLE: Importing GraphQL Tag from Relay Runtime\nDESCRIPTION: Imports the graphql template tag from relay-runtime, which is used to define GraphQL queries and fragments in Relay applications.\nSOURCE: https://github.com/facebook/relay/blob/main/packages/babel-plugin-relay/__tests__/fixtures/fragment.txt#2025-04-18_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst {graphql} = require('relay-runtime');\n```\n\n----------------------------------------\n\nTITLE: Query Loader Component with fetchPolicy\nDESCRIPTION: This code defines a function `onSelectHomeTab` that loads the `HomeTabQuery` with a specified `fetchPolicy`. The `fetchPolicy` is set to `'store-or-network'`, instructing Relay to use cached data if available and fetch from the network if not. This is important for reusing locally cached data.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/guided-tour/reusing-cached-data/rendering-partially-cached-data.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * AppTabs.react.js\n *\n * Query Loader Component\n */\n\n // ....\n\n  const onSelectHomeTab = () => {\n    loadHomeTabQuery({id: '4'}, {fetchPolicy: 'store-or-network'});\n  }\n\n // ...\n```\n\n----------------------------------------\n\nTITLE: Creating or retrieving a linked record\nDESCRIPTION: This snippet shows how to create a linked record if it doesn't exist using the getOrCreateLinkedRecord method, based on the provided type name.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/api-reference/relay-runtime/store.md#2025-04-18_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nconst rootField = store.getRootField('rootField');\nconst newViewer = rootField.getOrCreateLinkedRecord('viewer', 'User');\n```\n\n----------------------------------------\n\nTITLE: Implementing Preloaded Query Component\nDESCRIPTION: Implementation of a component using usePreloadedQuery with proper type definitions and query reference handling\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/tutorial/queries-2.md#2025-04-18_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\nimport {usePreloadedQuery} from 'react-relay';\nimport type {PreloadedQuery} from 'react-relay';\nimport type {PosterDetailsHovercardContentsQuery as QueryType} from './__generated__/PosterDetailsHovercardContentsQuery.graphql';\n\nexport default function PosterDetailsHovercardContents({\n  queryRef,\n}: {\n  queryRef: PreloadedQuery<QueryType>,\n}): React.ReactElement {\n  const data = usePreloadedQuery(\n    PosterDetailsHovercardContentsQuery,\n    queryRef,\n  );\n  ...\n```\n\n----------------------------------------\n\nTITLE: Using Updater Function to Access Connection Record\nDESCRIPTION: An updater function leveraging the Relay store to access a connection record using a pre-obtained connection ID.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v13.0.0/guided-tour/list-data/updating-connections.md#2025-04-18_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction updater(store: RecordSourceSelectorProxy) {\n  // connectionID is passed as input to the mutation/subscription\n  const connection = store.get(connectionID);\n\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Embedding YouTube Iframes in JSX\nDESCRIPTION: These snippets demonstrate how to embed YouTube videos within a React JSX file using <iframe> tags, setting properties like source URL, dimensions, and fullscreen capabilities. It assumes the presence of a React application environment supporting JSX syntax.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/principles-and-architecture/videos.md#2025-04-18_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<iframe src=\"https://www.youtube-nocookie.com/embed/lhVGdErZuN4\" width={640} height={360} allowFullScreen={true} frameBorder=\"0\" />\n```\n\nLANGUAGE: jsx\nCODE:\n```\n<iframe src=\"https://www.youtube-nocookie.com/embed/Tl0S7QkxFE4\" width={640} height={360} allowFullScreen={true} frameBorder=\"0\" />\n```\n\nLANGUAGE: jsx\nCODE:\n```\n<iframe src=\"https://www.youtube-nocookie.com/embed/WxPtYJRjLL0?start=215\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen width=\"640\" height=\"360\" frameBorder=\"0\"></iframe>\n```\n\nLANGUAGE: jsx\nCODE:\n```\n<iframe src=\"https://www.facebook.com/plugins/video.php?href=https%3A%2F%2Fwww.facebook.com%2FFacebookforDevelopers%2Fvideos%2F10154614710193553%2F&show_text=0&width=640\" width={640} height={360} frameBorder=\"0\" allowFullScreen={true} />\n```\n\nLANGUAGE: jsx\nCODE:\n```\n<iframe width={640} height={360} src=\"https://www.youtube-nocookie.com/embed/OEfUBN9dAI8\" frameBorder=\"0\" allowFullScreen={true} />\n```\n\nLANGUAGE: jsx\nCODE:\n```\n<iframe width={640} height={360} src=\"https://www.youtube-nocookie.com/embed/UBGzsb2UkeY\" frameBorder=\"0\" allowFullScreen={true} />\n```\n\nLANGUAGE: jsx\nCODE:\n```\n<iframe width={640} height={360} src=\"https://www.youtube-nocookie.com/embed/ww5UQ50oHok\" frameBorder=\"0\" allowFullScreen={true} />\n```\n\n----------------------------------------\n\nTITLE: Setting Garbage Collection Release Buffer Size in Relay\nDESCRIPTION: Demonstrates how to configure the garbage collection release buffer size for the Relay Store. This buffer determines how many released queries are temporarily retained before being eligible for garbage collection.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/guided-tour/reusing-cached-data/presence-of-data.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst store = new Store(source, {gcReleaseBufferSize: 10});\n```\n\n----------------------------------------\n\nTITLE: All Surface Configuration for Meta Internal Use\nDESCRIPTION: Configuration example that enables both resolver and None case functionality for Client 3D implementation.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/guides/data-driven-dependencies/configuration.md#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n\"moduleImportConfig\": {\n    \"dynamicModuleProvider\": {\n        \"mode\": \"JSResource\",\n    },\n    \"surface\": \"all\"\n}\n```\n\n----------------------------------------\n\nTITLE: PHP GraphQL Union Type Definition\nDESCRIPTION: Defines a GraphQL union type with multiple rendering strategies for comments using PHP.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/guides/data-driven-dependencies/server-3d.md#2025-04-18_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<<\n  GraphQLUnion('CommentRenderer', 'Data-driven dependency for comments...'),\n  Oncalls('<todo>')\n>>\ninterface ICommentRenderer extends IGraphQLUnion {}\n\n<<\n  GraphQLObject('CommentMarkdownRenderer', 'Comment with markdown rendering'),\n  Oncalls('<todo>')\n>>\nfinal class CommentMarkdownRenderer implements ICommentRenderer {\n  use HasJSDependency;\n\n  <<GraphQLField('markdown', 'Markdown text')>>\n  public function markdown(): string {\n    return 'markdown';\n  }\n}\n\n<<\n  GraphQLObject('CommentPlaintextRenderer', 'Comment with plaintext rendering'),\n  Oncalls('<todo>')\n>>\nfinal class CommentPlaintextRenderer implements ICommentRenderer {\n  use HasJSDependency;\n\n  <<GraphQLField('plaintext', 'Plaintext')>>\n  public function plaintext(): string {\n    return 'plaintext';\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Start React App with NPM\nDESCRIPTION: This snippet shows how to navigate to the created app's directory and start the development server using NPM. This command launches the React application in a browser.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/getting-started/step-by-step-guide.md#2025-04-18_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n\"cd your-app-name\nnpm start\"\n```\n\n----------------------------------------\n\nTITLE: Documentation Rating Component\nDESCRIPTION: The `<DocsRating />` component allows users to rate the documentation. This provides feedback to the documentation team on the quality and usefulness of the documentation.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v13.0.0/getting-started/introduction.md#2025-04-18_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<DocsRating />\n```\n\n----------------------------------------\n\nTITLE: Retrieving Records from Relay Store\nDESCRIPTION: The `get` method fetches a record from the Relay store using its `dataID`, returning a `RecordProxy` for interfacing with the record.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/api-reference/relay-runtime/store.md#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst record = store.get(dataID);\n```\n\n----------------------------------------\n\nTITLE: Operation Variables Type Emission in Flow\nDESCRIPTION: Demonstrates how Relay generates Flow types for query variables and response data. The example shows type generation for a simple artist query with required ID parameter.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/guides/type-emission.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst data = useLazyLoadQuery(\n  graphql`\n    query ExampleQuery($artistID: ID!) {\n      artist(id: $artistID) {\n        name\n      }\n    }\n  `,\n  // variables are expected to be of type ExampleQuery$variables\n  {artistID: 'banksy'},\n);\n```\n\n----------------------------------------\n\nTITLE: Using a LiveState Helper in a Relay Resolver\nDESCRIPTION: This example demonstrates how to use a LiveState helper function in a Relay Resolver to create a live counter. It separates the selector logic from the resolver definition.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/guides/relay-resolvers/live-fields.md#2025-04-18_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n/**\n * @RelayResolver Query.counter: Int\n * @live\n */\nexport function counter(): LiveState<number> {\n  return selectorAsLiveState(getCounter);\n}\n\nfunction getCounter(state) {\n  return state.counter;\n}\n```\n\n----------------------------------------\n\nTITLE: Example Mutation Response JSON\nDESCRIPTION: Sample JSON response from a successful feedback like mutation showing updated feedback data.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/guided-tour/updating-data/graphql-mutations.md#2025-04-18_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"feedback_like\": {\n    \"feedback\": {\n      \"id\": \"feedback-id\",\n      \"viewer_does_like\": true,\n      \"like_count\": 1,\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using @arguments Directive in GraphQL Fragment Spread\nDESCRIPTION: Demonstrates how to use the @arguments directive to pass arguments to a fragment spread in a GraphQL query.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/glossary/glossary.md#2025-04-18_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\n...Story_story @arguments(storyId: \"1234\")\n```\n\n----------------------------------------\n\nTITLE: Rendering DocsRating Component in JSX\nDESCRIPTION: This snippet renders the DocsRating component, which is likely used to display and collect ratings for the documentation page.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/guided-tour/managing-data-outside-react/reading-fragments.md#2025-04-18_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<DocsRating />\n```\n\n----------------------------------------\n\nTITLE: Rendering DocsRating Component - JavaScript\nDESCRIPTION: This snippet includes the DocsRating component in the guide, providing an interactive rating feature for users to evaluate the documentation.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v13.0.0/guided-tour/introduction.md#2025-04-18_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\n<DocsRating />\n```\n\n----------------------------------------\n\nTITLE: Multiple Usernames Query Example\nDESCRIPTION: Example of querying multiple users by username list.\nSOURCE: https://github.com/facebook/relay/blob/main/website/spec/ObjectIdentification.md#2025-04-18_snippet_9\n\nLANGUAGE: graphql\nCODE:\n```\n{\n  usernames(usernames: [\"zuck\", \"moskov\"]) {\n    id\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: GraphQL Schema Extension for Feedback\nDESCRIPTION: This GraphQL code defines a schema extension for the `Feedback` type, adding a boolean field `is_new_comment`. This is used to demonstrate updating client schema extensions in Relay.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/guided-tour/updating-data/imperatively-modifying-store-data.md#2025-04-18_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\n\"# Feedback.graphql\nextend type Feedback {\n  is_new_comment: Boolean\n}\"\n```\n\n----------------------------------------\n\nTITLE: Relay Query Component with Suspense\nDESCRIPTION: This snippet shows a Relay query component (`MainContent`) that uses `usePreloadedQuery` to fetch data.  When the query is being fetched, the component suspends, triggering the Suspense fallback.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/guided-tour/rendering/loading-states.md#2025-04-18_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * MainContent.react.js\n *\n * Query Component\n */\n\nconst React = require('React');\nconst {graphql, usePreloadedQuery} = require('react-relay');\n\nfunction MainContent(props) {\n  // Fetch and render a query\n  const data = usePreloadedQuery(\n    graphql`...`,\n    props.queryRef,\n  );\n\n  return (...);\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Documentation Components in JSX\nDESCRIPTION: Import statements for documentation-specific React components used in the page layout.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/guided-tour/reusing-cached-data/introduction.md#2025-04-18_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport DocsRating from '@site/src/core/DocsRating';\nimport {OssOnly, FbInternalOnly} from 'docusaurus-plugin-internaldocs-fb/internal';\n```\n\n----------------------------------------\n\nTITLE: GraphQL query for a specific story with likeCount\nDESCRIPTION: This GraphQL query fetches the information for a specific story, identified by its ID, including its id, text, and likeCount. It's used to demonstrate how a normalized cache solves data inconsistency issues when fetching the same data through different queries.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/principles-and-architecture/thinking-in-graphql.md#2025-04-18_snippet_5\n\nLANGUAGE: graphql\nCODE:\n```\nquery { story(id: \\\"123\\\") { id, text, likeCount } }\n```\n\n----------------------------------------\n\nTITLE: JSON Response for Empire Query\nDESCRIPTION: The JSON response from the Empire query showing the globally unique ID of the Empire faction that can be used for refetching.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/guides/graphql-server-specification.md#2025-04-18_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"empire\": {\n    \"id\": \"RmFjdGlvbjoy\",\n    \"name\": \"Galactic Empire\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Refetching Rebels Faction Using Node ID\nDESCRIPTION: This GraphQL query demonstrates how to refetch the Rebels faction using its globally unique ID through the node field, showcasing Relay's object identification mechanism.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/guides/graphql-server-specification.md#2025-04-18_snippet_2\n\nLANGUAGE: graphql\nCODE:\n```\nquery RebelsRefetchQuery {\n  node(id: \"RmFjdGlvbjox\") {\n    id\n    ... on Faction {\n      name\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Components and Rendering in React\nDESCRIPTION: This snippet imports the DocsRating component from the specified path and prepares to use it in a React environment. It also imports specific components from the internal Docusaurus plugin, which suggests that this is part of a larger documentation system. The primary dependency here is the '@site/src/core/DocsRating' and 'docusaurus-plugin-internaldocs-fb/internal' packages.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v13.0.0/guided-tour/managing-data-outside-react/reading-queries.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport DocsRating from '@site/src/core/DocsRating';\nimport {OssOnly, FbInternalOnly} from 'docusaurus-plugin-internaldocs-fb/internal';\n\n\n<DocsRating />\n```\n\n----------------------------------------\n\nTITLE: Relay Route Class Definition\nDESCRIPTION: Example of creating a reusable Relay Route by extending the Relay.Route class.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-classic/Classic-Guides-Routes.md#2025-04-18_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nclass ProfileRoute extends Relay.Route {\n  static queries = {\n    user: () => Relay.QL`\n      query { user(id: $userID) }\n    `,\n  };\n  static paramDefinitions = {\n    userID: {required: true},\n  };\n  static routeName = 'ProfileRoute';\n}\n```\n\n----------------------------------------\n\nTITLE: Embedding YouTube Video with iframe in HTML\nDESCRIPTION: HTML iframe element used to embed YouTube videos with no-cookie domain for privacy. The iframe includes configuration for dimensions, border styling, and playback permissions.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v13.0.0/principles-and-architecture/videos.md#2025-04-18_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<iframe src=\"https://www.youtube-nocookie.com/embed/lhVGdErZuN4\" width={640} height={360} allowFullScreen={true} frameBorder=\"0\" />\n```\n\n----------------------------------------\n\nTITLE: Setting Initial Variables in RelayContainer (JavaScript)\nDESCRIPTION: Demonstrates how to set initial variables for a RelayContainer. This example sets an initial 'size' variable for a ProfilePicture component.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-classic/Classic-APIReference-Container.md#2025-04-18_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nclass ProfilePicture extends React.Component {...}\n\nmodule.exports = Relay.createContainer(ProfilePicture, {\n  initialVariables: {size: 50},\n  fragments: {\n    user: () => Relay.QL`\n      # The variable defined above is available here as '$size'.\n      # Any variable referenced here is required to have been defined in initialVariables above.\n      # An 'undefined' variable value will throw an 'Invariant Violation' exception.\n      # Use 'null' to initialize unknown values.\n      fragment on User { profilePicture(size: $size) { ... } }\n    `,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: GraphQL query for root field\nDESCRIPTION: An example GraphQL query that retrieves the id of the viewer.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v13.0.0/api-reference/relay-runtime/store.md#2025-04-18_snippet_7\n\nLANGUAGE: graphql\nCODE:\n```\nviewer {\n  id\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing @throwOnFieldError Directive in GraphQL Fragment\nDESCRIPTION: Example of adding the @throwOnFieldError directive to a GraphQL fragment to ensure exceptions are thrown when field errors occur. This prevents the application from receiving null values for fields with errors.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/guides/throw-on-field-error-directive.md#2025-04-18_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nfragment MyFragment on User @throwOnFieldError {\n  id\n  name\n}\n```\n\n----------------------------------------\n\nTITLE: Getting a Field Value with Arguments\nDESCRIPTION: Demonstrates how to get the value of a field with arguments in the current record using the `getValue` method of the `RecordProxy`. The method takes the `name` of the field and an object of `arguments`. Returns the field's value.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v13.0.0/api-reference/relay-runtime/store.md#2025-04-18_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nconst name = viewer.getValue('name', {arg: 'value'});\n```\n\n----------------------------------------\n\nTITLE: JSON Response from Empire Node Refetch\nDESCRIPTION: The JSON response from refetching the Empire faction by its node ID, showing how different objects can be retrieved using the same interface.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/guides/graphql-server-specification.md#2025-04-18_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"node\": {\n    \"id\": \"RmFjdGlvbjoy\",\n    \"name\": \"Galactic Empire\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: GraphQL Fragment with @module Directive\nDESCRIPTION: Shows how to define a Relay fragment using @module directive to dynamically load a CommentImage component when image data is present.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/guides/data-driven-dependencies/server-3d.md#2025-04-18_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nfragment Comment_comment on Comment {\n  image {\n    ...CommentImage_image\n      @module(name: \"CommentImage.react\")\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Multiple Usernames Response Example\nDESCRIPTION: JSON response for multiple usernames query.\nSOURCE: https://github.com/facebook/relay/blob/main/website/spec/ObjectIdentification.md#2025-04-18_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"usernames\": [\n    {\n      \"id\": \"4\"\n    },\n    {\n      \"id\": \"6\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Example of Field Name Typo Error in GraphQL Schema\nDESCRIPTION: An example error message that shows how the Relay compiler suggests a correct field name when it detects a likely typo, such as using 'mail' instead of 'email'.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/error-reference/unknown-field.md#2025-04-18_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nError in the project `some_project`: ✖︎ The type `UserInfo` has no field `mail`. Did you mean `email`?\n```\n\n----------------------------------------\n\nTITLE: Moving Future Components to Source Directory\nDESCRIPTION: Shell command to move components from the future directory to the src/components directory\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/tutorial/queries-2.md#2025-04-18_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmv future/* src/components\n```\n\n----------------------------------------\n\nTITLE: Designing a Fat Query for Relay Classic Mutations\nDESCRIPTION: Shows how to create a comprehensive fat query that covers all possible field changes resulting from a mutation.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-classic/Classic-Guides-Mutations.md#2025-04-18_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nclass AcceptFriendRequestMutation extends Relay.Mutation {\n  getFatQuery() {\n    return Relay.QL`\n      fragment on AcceptFriendRequestPayload {\n        friendEdge,\n        friendRequester {\n          friends,\n          friendshipStatusWithViewer,\n        },\n        viewer {\n          friends,\n        },\n      }\n    `;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding a Description to a Field/Type\nDESCRIPTION: This code snippet shows how to add a description to a field or type using free text in the docblock. This description will be displayed in the editor if you are using the Relay VSCode extension, improving developer experience.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/api-reference/relay-resolvers/docblock-format.md#2025-04-18_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\n/**\n * @RelayResolver User.name: String\n *\n * What's in a name? That which we call a rose by any other name would smell\n * just as sweet.\n */\nexport function name(user: UserModel): string {\n  return user.name;\n}\n```\n\n----------------------------------------\n\nTITLE: Using Relay with babel-plugin-macros\nDESCRIPTION: Alternative approach to using babel-plugin-relay by importing Relay through babel-plugin-macros after installing and configuring it.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/getting-started/installation-and-setup.md#2025-04-18_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst graphql = require('babel-plugin-relay/macro');\n```\n\n----------------------------------------\n\nTITLE: Implementing Data Variable Updates\nDESCRIPTION: Enhanced ProfilePicture component implementation showing how to update data requirements using relay.setVariables().\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-classic/Classic-Guides-Containers.md#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nclass ProfilePicture extends React.Component {\n  render() {\n    // Access the resolved data for the `user` fragment.\n    var user = this.props.user;\n    // Access the current `variables` that were used to fetch the `user`.\n    var variables = this.props.relay.variables;\n    return (\n      <View>\n        <Image\n          uri={user.profilePhoto.uri}\n          width={variables.size}\n        />\n        <Slider onChange={value => this.setSize(value)} />\n      </View>\n    );\n  }\n\n  // Update the size of the photo.\n  setSize(photoSize) {\n    this.props.relay.setVariables({\n      size: photoSize,\n    });\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Preparing Parameters in Relay Route\nDESCRIPTION: Demonstrates parameter transformation and preparation using prepareParams static method to handle default values, transformations, and parameter passing.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-classic/Classic-APIReference-Route.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nclass ProfileRoute extends Relay.Route {\n  static queries = {\n    viewer: () => Relay.QL`query { viewer }`\n  };\n  static prepareParams = (prevParams) => {\n    return {\n      // Pass base set of supplied params through:\n      ...prevParams,\n      // Transform a param to meet internal requirements:\n      id: toGlobalId('Profile', prevParams.id),\n      // Provide a starting `limit` variable:\n      limit: 10,\n    }\n  }\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Defining MutationParameters Type in JavaScript\nDESCRIPTION: This snippet defines the 'MutationParameters' type which details the expected structure of parameters used in GraphQL mutations. It includes mandatory fields such as 'response' and 'variables', along with an optional 'rawResponse'.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/api-reference/types/MutationConfig.md#2025-04-18_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n#### Type `MutationParameters`\n\n* An object with the following fields:\n  * `response`: An object\n  * `variables`: An object\n  * `rawResponse`: An optional object\n```\n\n----------------------------------------\n\nTITLE: Paginating GraphQL Connections with Relay\nDESCRIPTION: This snippet expands the previous query to paginate through the rebel ships by requesting the first two and including cursors for further pagination. Requires a GraphQL server supporting base64 cursor encoding to manage paging.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-experimental/GraphQL-ServerSpecification.md#2025-04-18_snippet_7\n\nLANGUAGE: graphql\nCODE:\n```\nquery MoreRebelShipsQuery {\n  rebels {\n    name,\n    ships(first: 2) {\n      edges {\n        cursor\n        node {\n          name\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Downloading GraphQL Schema from GitHub\nDESCRIPTION: Command to download the GraphQL schema file from the Relay example repository for use in configuring the Relay compiler.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/getting-started/step-by-step-guide.md#2025-04-18_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ncd your-app-name\ncurl https://raw.githubusercontent.com/relayjs/relay-examples/main/issue-tracker/schema/schema.graphql > schema.graphql\n```\n\n----------------------------------------\n\nTITLE: Rendering Hard-coded Data in React Component\nDESCRIPTION: Initial React component rendering placeholder data without using Relay or GraphQL queries.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/tutorial/queries-1.md#2025-04-18_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nexport default function Newsfeed() {\n  const story = {\n    title: \"Placeholder Story\",\n    summary:\n      \"Placeholder data, to be replaced with data fetched via GraphQL\",\n    poster: {\n      name: \"Placeholder Person\",\n      profilePicture: {\n        url: \"/assets/cat_avatar.png\",\n      },\n    },\n    thumbnail: {\n      url: \"/assets/placeholder.jpeg\",\n    },\n  };\n  return (\n    <div className=\"newsfeed\">\n      <Story story={story} />\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: GitHub Authentication Token in .env.local\nDESCRIPTION: This snippet shows how to store the GitHub authentication token in the `.env.local` file. The `REACT_APP_GITHUB_AUTH_TOKEN` environment variable will be used to authenticate requests to the GitHub GraphQL API.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/getting-started/step-by-step-guide.md#2025-04-18_snippet_4\n\nLANGUAGE: text\nCODE:\n```\n\"# your-app-name/.env.local\nREACT_APP_GITHUB_AUTH_TOKEN=<TOKEN>\"\n```\n\n----------------------------------------\n\nTITLE: Store Reading Flow Diagram\nDESCRIPTION: ASCII diagram illustrating how components read data from the store using lookup() to get a Snapshot from a Selector and RecordSource.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/principles-and-architecture/runtime-architecture.md#2025-04-18_snippet_4\n\nLANGUAGE: ascii-diagram\nCODE:\n```\n    ┌───────────────────────┐       ┌──────────────┐\n    │     RecordSource      │       │              │\n    │                       │       │              │\n    │┌──────┐┌──────┐┌─────┐│       │   Selector   │\n    ││Record││Record││ ... ││       │              │\n    │└──────┘└──────┘└─────┘│       │              │\n    └───────────────────────┘       └──────────────┘\n                │                           │\n                │                           │\n                └──────────────┬────────────┘\n                               │\n                               │  lookup\n                               │  (read)\n                               │\n                               ▼\n                        ┌─────────────┐\n                        │             │\n                        │  Snapshot   │\n                        │             │\n                        └─────────────┘\n                               │\n                               │  render, etc\n                               │\n                               ▼\n```\n\n----------------------------------------\n\nTITLE: Installing React and Relay Dependencies\nDESCRIPTION: Command to install core React and Relay packages using yarn\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-experimental/Introduction-InstallationAndSetup.md#2025-04-18_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nyarn add react react-dom react-relay\n```\n\n----------------------------------------\n\nTITLE: Example GraphQL Response\nDESCRIPTION: The JSON response for the story and author query, showing the hierarchical structure of GraphQL responses.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v13.0.0/principles-and-architecture/thinking-in-graphql.md#2025-04-18_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"query\": {\n    \"story\": {\n      \"text\": \"Relay is open-source!\",\n      \"author\": {\n        \"name\": \"Jan\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Debug Name\nDESCRIPTION: Method to get a string name used for debugging purposes when printing request information.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-classic/Classic-Interfaces-MutationRequest.md#2025-04-18_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\ngetDebugName(): string\n```\n\n----------------------------------------\n\nTITLE: Invalidating the Entire Store in JavaScript\nDESCRIPTION: Shows how to globally invalidate the Relay store, causing all data to be considered stale.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/api-reference/relay-runtime/store.md#2025-04-18_snippet_25\n\nLANGUAGE: javascript\nCODE:\n```\nstore.invalidateStore();\n```\n\n----------------------------------------\n\nTITLE: Add Declarative Connection Handler in Relay Mutation\nDESCRIPTION: This snippet demonstrates how to add the `@prependEdge` directive to the Relay mutation definition to declaratively update connections when a new comment is posted. It adds a `$connections` variable to the mutation and uses it as an argument to the `@prependEdge` directive, specifying which connections should be updated with the newly created comment edge.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/tutorial/mutations-updates.md#2025-04-18_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nmutation StoryCommentsComposerPostMutation(\n    $id: ID!,\n    $text: String!,\n    // change-line\n    $connections: [ID!]!,\n  ) {\n    postStoryComment(id: $id, text: $text) {\n      commentEdge\n        // change-line\n        @prependEdge(connections: $connections)\n      {\n        node {\n          id\n          text\n        }\n      }\n    }\n  }\n```\n\n----------------------------------------\n\nTITLE: Extending User Type with Notes in GraphQL\nDESCRIPTION: Extends the server's User type to include a list of client-side Notes.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/guides/client-schema-extensions.md#2025-04-18_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\nextend type User {\n  notes: [Note]\n}\n```\n\n----------------------------------------\n\nTITLE: Logger Event Structure for @required\nDESCRIPTION: Structure of the logger event generated when a field with action: LOG is null\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/guides/required-directive.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  name: 'read.missing_required_field',\n  owner: string, // MyFragmentOrQueryName\n  fieldPath: string, // path.to.my.field\n};\n```\n\n----------------------------------------\n\nTITLE: Fragment with Default Arguments\nDESCRIPTION: Demonstrates how to declare fragment arguments with default values using @argumentDefinitions.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/guided-tour/rendering/variables.md#2025-04-18_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nfunction TaskView(props) {\n  const data = useFragment(\n    graphql`\n      fragment TaskView_task on Task\n        @argumentDefinitions(showDetailedResults: {type: \"Boolean!\", defaultValue: true}) {\n        name\n        is_completed\n        ... @include(if: $showDetailedResults) {\n          description\n        }\n      }\n    `,\n    props.task,\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Example Query with Resolver Field Arguments\nDESCRIPTION: A sample GraphQL query demonstrating how to invoke a Relay resolver field with combined arguments\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/guides/relay-resolvers.md#2025-04-18_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nconst data = useLazyLoadQuery(graphql`\n    query myQuery($id: ID, $my_arg: String!) {\n        node(id: $id) {\n           ... on MyType {\n                my_resolver_field(my_js_arg: \"World\", my_qql_arg: 2.5)\n           }\n        }\n   }\n`, { id: \"some id\" });\n```\n\n----------------------------------------\n\nTITLE: Polyfilling JavaScript Environment for Relay\nDESCRIPTION: This JavaScript snippet demonstrates how to polyfill the JavaScript environment to support older browsers and devices. It includes polyfills for `Map`, `Set`, `Promise`, and `Object.assign` using `core-js` and then imports the Relay application.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v13.0.0/getting-started/installation-and-setup.md#2025-04-18_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n\"require('core-js/es6/map');\\nrequire('core-js/es6/set');\\nrequire('core-js/es6/promise');\\nrequire('core-js/es6/object');\\n\\nrequire('./myRelayApplication');\"\n```\n\n----------------------------------------\n\nTITLE: Incorrect Chaining of @required Directives in GraphQL\nDESCRIPTION: Illustrates an incorrect chaining of @required directives with mismatched action severity, which will result in a compiler error.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/guides/required-directive.md#2025-04-18_snippet_4\n\nLANGUAGE: graphql\nCODE:\n```\nfragment MyUser on User {\n  profile_picture @required(action: THROW) {\n    url @required(action: LOG)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Relay Compiler\nDESCRIPTION: This code installs the Relay Compiler package, essential for Relay's ahead-of-time compilation.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/getting-started/installation-and-setup.md#2025-04-18_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nyarn add --dev relay-compiler\n```\n\n----------------------------------------\n\nTITLE: Displaying Internal Facebook Suspense Fragment Component\nDESCRIPTION: Internal Facebook-specific component for displaying Suspense integration with Relay fragments.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/guided-tour/rendering/loading-states.md#2025-04-18_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\n<FbInternalOnly>\n  <FbSuspenseInRelayFragments />\n</FbInternalOnly>\n```\n\n----------------------------------------\n\nTITLE: Using commitPayload in Relay\nDESCRIPTION: Demonstrates how to use commitPayload API to write query payloads directly to the Relay Store. It shows creating an operation descriptor and committing a payload that matches the query structure.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/guided-tour/updating-data/local-data-updates.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport type {FooQueryRawResponse} from 'FooQuery.graphql'\n\nconst {createOperationDescriptor} = require('relay-runtime');\n\nconst operationDescriptor = createOperationDescriptor(FooQuery, {\n  id: 'an-id',\n  otherVariable: 'value',\n});\n\nconst payload: FooQueryRawResponse = {...};\n\nenvironment.commitPayload(operationDescriptor, payload);\n```\n\n----------------------------------------\n\nTITLE: Defining GraphQL Like Mutation\nDESCRIPTION: GraphQL mutation definition for liking/unliking a story, including variable declarations and field selections.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/tutorial/mutations-updates.md#2025-04-18_snippet_2\n\nLANGUAGE: graphql\nCODE:\n```\nconst StoryLikeButtonLikeMutation = graphql`\n  mutation StoryLikeButtonLikeMutation(\n    $id: ID!,\n    $doesLike: Boolean!,\n  ) {\n    likeStory(\n      id: $id,\n      doesLike: $doesLike\n    ) {\n      story {\n        id\n        likeCount\n        doesViewerLike\n      }\n    }\n  }\n`;\n```\n\n----------------------------------------\n\nTITLE: Spreading ImageFragment in Story and PosterByline Components\nDESCRIPTION: This snippet shows how to spread the ImageFragment into the StoryFragment and PosterBylineFragment to reuse the image data requirements.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/tutorial/fragments-1.md#2025-04-18_snippet_7\n\nLANGUAGE: GraphQL\nCODE:\n```\nconst StoryFragment = graphql`\n  fragment StoryFragment on Story {\n    title\n    summary\n    postedAt\n    poster {\n      ...PosterBylineFragment\n    }\n    thumbnail {\n      ...ImageFragment\n    }\n  }\n`;\n```\n\nLANGUAGE: GraphQL\nCODE:\n```\nconst PosterBylineFragment = graphql`\n  fragment PosterBylineFragment on Actor {\n    name\n    profilePicture {\n      ...ImageFragment\n    }\n  }\n`;\n```\n\n----------------------------------------\n\nTITLE: Error Boundary and Suspense Implementation\nDESCRIPTION: Shows how to handle loading and error states using React Suspense and Error Boundary components.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/migration-and-compatibility/relay-hooks-and-legacy-container-apis.md#2025-04-18_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<ErrorBoundary renderError={Error}>\n  <Suspense fallback={<Loading />}>\n    <Home />\n  </Suspense>\n</ErrorBoundary>\n```\n\n----------------------------------------\n\nTITLE: Implementing useSubscription Hook\nDESCRIPTION: Demonstrates how to create a custom hook using Relay's useSubscription API for handling feedback subscriptions.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/guided-tour/updating-data/graphql-subscriptions.md#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport type {Environment} from 'react-relay';\nimport type {FeedbackLikeSubscribeData} from 'FeedbackLikeSubscription.graphql';\n\nconst {graphql, useSubscription} = require('react-relay');\nconst {useMemo} = require('React');\n\nfunction useFeedbackSubscription(\n  input: FeedbackLikeSubscribeData,\n) {\n  const config = useMemo(() => ({\n    subscription: graphql`\n      subscription FeedbackLikeSubscription(\n        $input: FeedbackLikeSubscribeData!\n      ) {\n        feedback_like_subscribe(data: $input) {\n          feedback {\n            like_count\n          }\n        }\n      }\n    `,\n    variables: {input},\n  }), [input]);\n\n  return useSubscription(config);\n}\n```\n\n----------------------------------------\n\nTITLE: Defining GraphQL Story Type Schema\nDESCRIPTION: Schema definition for a Story type in GraphQL showing basic scalar fields and relationships to other types.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/tutorial/interfaces-polymorphism.md#2025-04-18_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\ntype Story {\n  id: ID!\n  title: String\n  summary: String\n  createdAt: Date\n  poster: Actor\n  image: Image\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Pending Transactions in a Story Component\nDESCRIPTION: This snippet illustrates how to use `getPendingTransactions` to check for pending mutations on a record. If a mutation has failed, it displays an error message with a retry link that uses `transaction.recommit`.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-classic/Classic-APIReference-Container.md#2025-04-18_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nclass Story extends React.Component {\n  render() {\n    var story = this.props.story;\n    var transactions = this.props.relay.getPendingTransactions(story);\n    // For this example, assume there is only one transaction.\n    var transaction = transactions ? transactions[0] : null;\n    if (transaction) {\n      // Display an error message with a retry link if a mutation failed.\n      if (transaction.getStatus() === 'COMMIT_FAILED') {\n        return (\n          <span>\n            This story failed to post.\n            <a onClick={transaction.recommit}>Try Again.</a>\n          </span>\n        );\n      }\n    }\n    // Render story normally.\n  }\n}\n\nmodule.exports = Relay.createContainer(ProfilePicture, {\n  fragments: {\n    story: () => Relay.QL`\n      fragment on story {\n        # ...\n      }\n    `,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Running Relay Compiler with yarn\nDESCRIPTION: Demonstrates running the Relay Compiler using yarn, with a custom configuration file path.\nSOURCE: https://github.com/facebook/relay/blob/main/packages/relay-compiler/README.md#2025-04-18_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nyarn relay ./relay.json\n```\n\n----------------------------------------\n\nTITLE: Example Usage of RenderFailure\nDESCRIPTION: Example showing how to use the renderFailure prop to handle and display errors.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-classic/Classic-APIReference-RootContainer.md#2025-04-18_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\n<Relay.RootContainer\n  Component={ProfilePicture}\n  route={profileRoute}\n  renderFailure={function(error, retry) {\n    return (\n      <div>\n        <p>{error.message}</p>\n        <p><button onClick={retry}>Retry?</button></p>\n      </div>\n    );\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Accessing Connection Using ConnectionHandler.getConnection\nDESCRIPTION: This snippet demonstrates how to access a connection record using the ConnectionHandler.getConnection API when you have access to the parent record.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/guided-tour/list-data/updating-connections.md#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst {ConnectionHandler} = require('relay-runtime');\n\nfunction updater(store: RecordSourceSelectorProxy) {\n  // Get parent story record\n  // storyID is passed as input to the mutation/subscription\n  const storyRecord = store.get(storyID);\n\n  // Get the connection record from the parent\n  const connectionRecord = ConnectionHandler.getConnection(\n    storyRecord,\n    'StoryComponent_story_comments_connection',\n  );\n\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring a GraphQL Subscription with Relay's graphql Tag\nDESCRIPTION: Shows how to define a GraphQL subscription using Relay's graphql tag, which is similar to how queries and fragments are defined. The subscription references variables for passing parameters.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/guided-tour/updating-data/graphql-subscriptions.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst {graphql} = require('react-relay');\n\nconst feedbackLikeSubscription = graphql`\n  subscription FeedbackLikeSubscription($input: FeedbackLikeSubscribeData!) {\n    feedback_like_subscribe(data: $input) {\n      feedback {\n        like_count\n      }\n    }\n  }\n`;\n```\n\n----------------------------------------\n\nTITLE: Server Response Example\nDESCRIPTION: Example of the server response format for the like mutation.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/tutorial/mutations-updates.md#2025-04-18_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"likeStory\": {\n    \"story\": {\n      \"id\": \"34a8c\",\n      \"likeCount\": 47,\n      \"doesViewerLike\": true\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing and Running Relay Example Project\nDESCRIPTION: Commands to clone the Relay examples repository, navigate to the newsfeed example, install dependencies, and start the development server. This launches a Webpack server, GraphQL server, and Relay compiler.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/tutorial/intro.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/relayjs/relay-examples.git\ncd relay-examples/newsfeed\nnpm install\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Formatting Team Status Updates in Markdown\nDESCRIPTION: This snippet demonstrates how to structure team status updates using Markdown formatting. It includes headers, bullet points, and links to team members' GitHub profiles.\nSOURCE: https://github.com/facebook/relay/blob/main/meta/meeting-notes/2016-08-23-team-sync.md#2025-04-18_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Agenda\n\n* Status updates\n\n## Status Updates\n\n* [@JenniferWang](https://github.com/JenniferWang)\n  * Finished Java wrapper for disk cache\n  * Figuring out `RelayConnection` + paths\n* [@kassens](https://github.com/kassens)\n  * Discussed interop + product integration with Yuzhi\n    * Plan is first take a quick look at Events Dashboard\n    * Then quick take a look at internal app\n  * Worked on getting provided variables in Relay\n  * Helped some Goodwill people using fbsync, Instant Articles also looking into using it\n* [@yuzhi](https://github.com/yuzhi)\n  * Discussing interop + product integration with Jan (as mentioned above)\n    * Focus on solving Relay 1 patterns in Relay 2\n```\n\n----------------------------------------\n\nTITLE: Using MyViewer in a Node Fragment\nDESCRIPTION: This snippet demonstrates how to use the `MyViewer` fragment within the `MyNode` component. It handles the situation where the passed node may not be of type `Viewer`.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/guides/alias-directive.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nfunction MyNode({nodeKey}) {\n  const node = useFragment(graphql`\n    fragment MyFragment on Node {\n      ...MyViewer\n    }`, nodeKey);\n\n  return <MyViewer viewerKey={node} />\n}\n```\n\n----------------------------------------\n\nTITLE: Fragment-based Mutation Response\nDESCRIPTION: Enhanced mutation definition using fragment spreading for consistent data requirements.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/tutorial/mutations-updates.md#2025-04-18_snippet_6\n\nLANGUAGE: graphql\nCODE:\n```\nconst StoryLikeButtonLikeMutation = graphql`\n  mutation StoryLikeButtonLikeMutation(\n    $id: ID,\n    $doesLike: Boolean,\n  ) {\n    likeStory(id: $id, doesLike: $doesLike) {\n      story {\n        ...StoryLikeButtonFragment\n      }\n    }\n  }\n`;\n```\n\n----------------------------------------\n\nTITLE: Querying Best Friend's Name in GraphQL\nDESCRIPTION: This GraphQL query fetches the name of the user's best friend. It's used to illustrate how graph relationship changes can lead to null values.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/debugging/why-null.md#2025-04-18_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nquery MyQuery {\n  me {\n    best_friend {\n      # id: 1\n      name\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Generated Flow Types\nDESCRIPTION: This snippet demonstrates how to import generated Flow types from the `__generated__` directory. This allows you to use the generated types in your code for type safety. The `DictionaryComponent_word` type is imported from the corresponding generated file.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/guides/compiler.md#2025-04-18_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport type {DictionaryComponent_word} from './__generated__/DictionaryComponent_word.graphql';\n```\n\n----------------------------------------\n\nTITLE: GraphQL Node Interface Definition\nDESCRIPTION: Shows the schema definition for the Node interface and a type implementing it, demonstrating how to mark entities as refetchable in a GraphQL schema.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/tutorial/refetchable-fragments.md#2025-04-18_snippet_10\n\nLANGUAGE: graphql\nCODE:\n```\ntype Person implements Node {\n  id: ID!\n  ...\n}\n```\n\nLANGUAGE: graphql\nCODE:\n```\ninterface Node {\n  id: ID!\n}\n```\n\n----------------------------------------\n\nTITLE: Data Flow Diagram\nDESCRIPTION: High-level representation of the compiler's data processing workflow, showing stages of parsing, transformation, and artifact generation\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/principles-and-architecture/compiler-architecture.md#2025-04-18_snippet_0\n\nLANGUAGE: ascii\nCODE:\n```\n                   ┌─────────────┐┌─────────────┐\n                   │   GraphQL   ││   Schema    │\n                   └─────────────┘└─────────────┘\n                          │              │              parse\n                          └───────┬──────┘\n                                  ▼\n                   ┌────────────────────────────┐\n                   │      CompilerContext       │\n                   │                            │\n                   │   ┌─────┐ ┌─────┐ ┌─────┐  │──┐\n                   │   │ IR  │ │ IR  │ │ ... │  │  │\n                   │   └─────┘ └─────┘ └─────┘  │  │\n                   └────────────────────────────┘  │  transform/\n                          │    │      ▲            │   optimize\n                          │    │      └────────────┘\n                          │    │\n                          │    └──────────┐\n                          │  print        │  codegen\n                          ▼               ▼\n                   ┌─────────────┐ ┌─────────────┐\n                   │   GraphQL   │ │  Artifacts  │\n                   └─────────────┘ └─────────────┘\n```\n\n----------------------------------------\n\nTITLE: Change Directory and Start App via Yarn\nDESCRIPTION: These commands perform the same actions as the NPM commands, but use Yarn instead. They change the directory to the app's root and start the development server using Yarn.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/getting-started/step-by-step-guide.md#2025-04-18_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n\"# Yarn\ncd your-app-name\nyarn start\"\n```\n\n----------------------------------------\n\nTITLE: Structure of LOG Action Event in Relay Environment\nDESCRIPTION: When a field with 'action: LOG' is null, the Relay environment logger receives an event with this structure including the name, owner, and fieldPath.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/guides/required-directive.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  name: 'read.missing_required_field',\n  owner: string, // MyFragmentOrQueryName\n  fieldPath: string, // path.to.my.field\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Resolver Context Type in JSON\nDESCRIPTION: This JSON configuration specifies the resolver context type for type checking in a Relay project.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/guides/relay-resolvers/context.md#2025-04-18_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"name\": \"project\",\n    \"language\": \"flow\",\n    \"resolverContextType\": {\n        \"name\": \"IResolverContextType\",\n        \"path\": \"path/to/file/IResolverContextType\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Resolver Field with Runtime Arguments\nDESCRIPTION: Example of using a Relay Resolver field that accepts runtime arguments in a query.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/guides/relay-resolvers.md#2025-04-18_snippet_5\n\nLANGUAGE: js\nCODE:\n```\nconst data = useLazyLoadQuery(graphql`\n    query myQuery($id: ID, $my_arg: String!) {\n        node(id: $id) {\n           ... on MyType {\n                my_resolver_field(my_arg: $my_arg, my_other_arg: 1)\n           }\n        }\n   }\n`, { id: \"some id\", my_arg: \"hello world!\"});\n```\n\n----------------------------------------\n\nTITLE: Manually Retaining Local Data (JavaScript)\nDESCRIPTION: Shows how to manually retain local data using environment.retain() to prevent garbage collection when no component is rendering the data.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/guides/client-schema-extensions.md#2025-04-18_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport {createOperationDescriptor, getRequest} from 'relay-runtime';\n\n// Create a query that references that record\nconst localDataQuery = graphql`\n  query LocalDataQuery {\n    viewer {\n      notes {\n        __typename\n      }\n    }\n  }\n`;\n\n// Create an operation descriptor for the query\nconst request = getRequest(localDataQuery);\nconst operation = createOperationDescriptor(request, {} /* variables */);\n\n\n// Tell Relay to retain this operation so any data referenced by it isn't garbage collected\n// In this case, all the notes linked to the `viewer` will be retained\nconst disposable = environment.retain(operation);\n\n\n// Whenever you don't need that data anymore and it's okay for Relay to garbage collect it,\n// you can dispose of the retain\ndisposable.dispose();\n```\n\n----------------------------------------\n\nTITLE: Using @required with @connection Directive\nDESCRIPTION: Demonstrates the limitations of using @required with @connection directive in a GraphQL fragment, showing which fields can and cannot have @required applied.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/guides/required-directive.md#2025-04-18_snippet_4\n\nLANGUAGE: graphql\nCODE:\n```\nfragment FriendsList on User @refetchable(queryName: \"FriendsListQuery\") {\n  friends(after: $cursor, first: $count) @connection(key: \"FriendsList_friends\") {\n    edges {\n      node {\n        job {\n          title @required(action: LOG)\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Relay Compiler using Yarn\nDESCRIPTION: This code snippet demonstrates how to install the Relay Compiler as a development dependency using Yarn. The Relay Compiler is required for ahead-of-time compilation of Relay code.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v13.0.0/getting-started/installation-and-setup.md#2025-04-18_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n\"yarn add --dev relay-compiler\"\n```\n\n----------------------------------------\n\nTITLE: Exporting GraphQL Query for Parent Component Access in JavaScript\nDESCRIPTION: This snippet shows how to export the PosterDetailsHovercardContentsQuery to make it accessible from the parent component.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/tutorial/queries-2.md#2025-04-18_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nexport const PosterDetailsHovercardContentsQuery = graphql`...`;\n```\n\n----------------------------------------\n\nTITLE: Using commitPayload in Relay\nDESCRIPTION: Example demonstrating how to use commitPayload to write query payloads directly to the Relay Store. Takes an OperationDescriptor and payload, resolving like a normal server response.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/guided-tour/updating-data/local-data-updates.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport type {FooQueryRawResponse} from 'FooQuery.graphql'\n\nconst {createOperationDescriptor} = require('relay-runtime');\n\nconst operationDescriptor = createOperationDescriptor(FooQuery, {\n  id: 'an-id',\n  otherVariable: 'value',\n});\n\nconst payload: FooQueryRawResponse = {...};\n\nenvironment.commitPayload(operation, payload);\n```\n\n----------------------------------------\n\nTITLE: Complex GraphQL Query with Nested Fields\nDESCRIPTION: Demonstrates a more complex GraphQL query that traverses relationships between entities to fetch nested data.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/tutorial/graphql.md#2025-04-18_snippet_2\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  person(id: \"24601\") {\n    name\n    occupation\n    location {\n      name\n      population\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: RelayResolverErrorEvent Type Definition\nDESCRIPTION: This type definition describes the structure of the event object for a Relay Resolver error. It includes the kind of event, the owner, the field path, the error object, and booleans indicating if it should throw and if it was handled.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/api-reference/relay-runtime/field-logger.md#2025-04-18_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nexport type RelayResolverErrorEvent = {\n  +kind: 'relay_resolver.error',\n  +owner: string,\n  +fieldPath: string,\n  +error: Error,\n  +shouldThrow: boolean,\n  +handled: boolean,\n};\n```\n\n----------------------------------------\n\nTITLE: Reading Best Friend Query Example in GraphQL\nDESCRIPTION: Example GraphQL query demonstrating how to fetch a user's best friend's name, used to illustrate potential graph relationship changes that can lead to null values.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/debugging/why-null.md#2025-04-18_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nquery MyQuery {\n  me {\n    best_friend {\n      # id: 1\n      name\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using @relay(plural) Directive\nDESCRIPTION: Demonstrates how to use the @relay(plural: true) directive to handle lists of items in fragments.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/api-reference/graphql/graphql-directives.md#2025-04-18_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// Plural fragment definition\ngraphql`\n  fragment TodoItems_items on TodoItem @relay(plural: true) {\n    id\n    text\n  }\n`;\n\n// Plural fragment usage: note the parent type is a list of items (`TodoItem[]`)\nfragment TodoApp_app on App {\n  items {\n    // parent type is a list here\n    ...TodoItem_items\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Best Friend's Name in GraphQL\nDESCRIPTION: This GraphQL query fetches the name of the user's best friend. It's used to illustrate how graph relationship changes can lead to null values.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/debugging/why-null.md#2025-04-18_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nquery MyQuery {\n  me {\n    best_friend {\n      # id: 1\n      name\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Documentation Components in JSX\nDESCRIPTION: Import statements for documentation components including DocsRating and internal/external content filters for Facebook documentation.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/guided-tour/managing-data-outside-react/prefetching-queries.md#2025-04-18_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport DocsRating from '@site/src/core/DocsRating';\nimport {OssOnly, FbInternalOnly} from 'docusaurus-plugin-internaldocs-fb/internal';\n```\n\n----------------------------------------\n\nTITLE: Using useRelayEnvironment Hook in React\nDESCRIPTION: Demonstrates how to access a Relay environment from React components using the useRelayEnvironment hook.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-experimental/RelayHooks-ApiReference.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst React = require('React');\n\nconst {useRelayEnvironment} = require('react-relay/hooks');\n\nfunction MyComponent() {\n  const environment = useRelayEnvironment();\n\n  const handler = useCallback(() => {\n    // For example, can be used to pass the environment to functions\n    // that require a Relay environment.\n    commitMutation(environment, ...);\n  }, [environment])\n\n  return (...);\n}\n\nmodule.exports = Root;\n```\n\n----------------------------------------\n\nTITLE: Composing Fragments with Type-Safe References in TypeScript\nDESCRIPTION: Shows how to compose fragments with type-safe references in a TypeScript-typed React component, ensuring correct fragment spreading and prop passing.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/guides/type-emission.md#2025-04-18_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ExampleFragmentComponent } from \"./ExampleFragmentComponent\"\n\n/**\n * import { ExampleFragmentComponent_artist$fragmentType } from \"ExampleFragmentComponent_artist.graphql\";\n *\n * export type ExampleQuery$data = {\n *   readonly artist?: {\n *     readonly name: ?string,\n *     readonly \" $fragmentSpreads\": ExampleFragmentComponent_artist$fragmentType\n *   }\n * }\n * export type ExampleQuery$variables = {\n *   readonly artistID: string\n * }\n * export type ExampleQuery = {\n *   readonly variables: ExampleQuery$variables\n *   readonly response: ExampleQuery$data\n * }\n */\n\n// data is of type ExampleQuery$data\nconst data = useLazyLoadQuery(\n  graphql`\n    query ExampleQuery($artistID: ID!) {\n      artist(id: $artistID) {\n        name\n        ...ExampleFragmentComponent_artist\n      }\n    }\n  `,\n  {artistID: 'banksy'},\n);\n\n// Here only `data.artist.name` is directly visible,\n// the marker prop $fragmentSpreads indicates that `data.artist`\n// can be used for the component expecting this fragment spread.\nreturn <ExampleFragmentComponent artist={data.artist} />;\n```\n\n----------------------------------------\n\nTITLE: Composing React Components with Relay\nDESCRIPTION: Example of composing Relay containers by creating a Profile component that includes ProfilePicture.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-classic/Classic-Guides-Containers.md#2025-04-18_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nclass Profile extends React.Component {\n  render() {\n    // Expects a `user` with a string `name`, as well as the information\n    // for `<ProfilePicture>` (we'll get that next).\n    var user = this.props.user;\n    return (\n      <View>\n        // It works just like a React component, because it is one!\n        <ProfilePicture user={user} />\n        <Text>{user.name}</Text>\n      </View>\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: JavaScript: Relay Environment Logger Event\nDESCRIPTION: This JavaScript snippet shows the format of the event that the Relay environment logger will receive if a field with `action: LOG` is null.  It includes the name of the event, the owner (fragment or query name), and the field path of the missing required field. This can be used for debugging.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/guides/required-directive.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  name: 'read.missing_required_field',\n  owner: string, // MyFragmentOrQueryName\n  fieldPath: string, // path.to.my.field\n};\n```\n\n----------------------------------------\n\nTITLE: Paginating Through Rebel Ships Using Cursor\nDESCRIPTION: This GraphQL query shows how to paginate through the Rebels' ships by using the after argument with a cursor, fetching the next three ships after a specific point in the connection.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/guides/graphql-server-specification.md#2025-04-18_snippet_7\n\nLANGUAGE: graphql\nCODE:\n```\nquery EndOfRebelShipsQuery {\n  rebels {\n    name\n    ships(first: 3 after: \"YXJyYXljb25uZWN0aW9uOjE=\") {\n      edges {\n        cursor\n        node {\n          name\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: MissingExpectedDataLogEvent Type Definition\nDESCRIPTION: This type definition describes the structure of the event object for missing expected data that is logged. It includes the kind of event, the owner, and the field path where the data is missing.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/api-reference/relay-runtime/field-logger.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport type MissingExpectedDataLogEvent = {\n  +kind: 'missing_expected_data.log',\n  +owner: string,\n  +fieldPath: string,\n};\n```\n\n----------------------------------------\n\nTITLE: Basic GraphQL User Query Example\nDESCRIPTION: A simple GraphQL query that fetches a user's name by their ID.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-classic/Classic-Guides-Routes.md#2025-04-18_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nquery UserQuery {\n  user(id: \"123\") {\n    name,\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Basic GraphQL Query with Relay Template Tag\nDESCRIPTION: Demonstrates how to write a basic GraphQL query using Relay's graphql template tag to fetch viewer data.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-experimental/Modern-GraphQLInRelay.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport {graphql} from 'react-relay';\n\ngraphql`\n  query MyQuery {\n    viewer {\n      id\n    }\n  }\n`;\n```\n\n----------------------------------------\n\nTITLE: Spreading Fragments in Relay GraphQL Queries\nDESCRIPTION: Shows the syntax for spreading fragments within queries in Relay. This example demonstrates how the fragment Component_name is included in a ComponentQuery using the spread operator.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/glossary/glossary.md#2025-04-18_snippet_5\n\nLANGUAGE: graphql\nCODE:\n```\nquery ComponentQuery {\n  viewer {\n    account_user {\n      ...Component_name\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Relay in package.json\nDESCRIPTION: Demonstrates how to add a 'relay' section to package.json for configuring the Relay Compiler. It specifies the source directory and schema location, and includes a script for running the compiler.\nSOURCE: https://github.com/facebook/relay/blob/main/packages/relay-compiler/README.md#2025-04-18_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"scripts\": {\n    \"relay\": \"relay-compiler\"\n  },\n  \"relay\": {\n    \"src\": \"./src\",\n    \"schema\": \"./src/schema/app_schema.graphql\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Query Component with React and Relay\nDESCRIPTION: This code snippet illustrates a React component that uses Relay's data fetching capabilities via a preloaded query. It includes a GraphQL query that selects user data, which is partially rendered if cached. The component shows how to handle missing data with React Suspense to ensure smooth UI rendering. Dependencies: React, react-relay.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/guided-tour/reusing-cached-data/rendering-partially-cached-data.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst React = require('React');\nconst {Suspense} = require('React');\nconst {graphql, usePreloadedQuery} = require('react-relay');\n\nconst UsernameComponent = require('./UsernameComponent.react');\n\nfunction HomeTab() {\n  const data = usePreloadedQuery(\n    graphql`\n      query AppQuery($id: ID!) {\n        user(id: $id) {\n          name\n          ...UsernameComponent_user\n        }\n      }\n    `,\n    props.queryRef,\n  );\n\n  return (\n    <>\n      <h1>{data.user?.name}</h1>\n\n      {/*\n        Wrap the UserComponent in Suspense to allow other parts of the\n        App to be rendered even if the username is missing.\n      */}\n      <Suspense fallback={<LoadingSpinner label=\"Fetching username\" />}>\n        <UsernameComponent user={data.user} />\n      </Suspense>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Building Wasm Module for Relay Compiler Playground\nDESCRIPTION: Commands to build the Wasm module for the Relay Compiler Playground. Requires wasm-pack >= 0.10.0 and may need the rust-src component.\nSOURCE: https://github.com/facebook/relay/blob/main/compiler/crates/relay-compiler-playground/README.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncd relay-compiler-playground\nwasm-pack build --target web\n```\n\n----------------------------------------\n\nTITLE: Relay Resolver with Runtime Arguments\nDESCRIPTION: Shows how to implement a Relay Resolver that accepts runtime JavaScript arguments using Schema Definition Language.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/guides/relay-resolvers.md#2025-04-18_snippet_4\n\nLANGUAGE: js\nCODE:\n```\n/**\n* @RelayResolver\n* @fieldName my_resolver_field(my_arg: String, my_other_arg: Int)\n* @onType MyType\n* @rootFragment myResolverFragment\n*/\nfunction myResolver(key, args) {\n   if (args.my_other_arg === 0) {\n       return \"The other arg is 0\";\n   }\n\n   const data = readFragment(graphql`\n       fragment myResolverFragment on MyType\n           some_field\n       }\n   `, key);\n   return data.some_field.concat(args.my_arg);\n}\n```\n\n----------------------------------------\n\nTITLE: Composing Inline Fragments in Relay Queries\nDESCRIPTION: Demonstrates how to use inline fragments defined as local variables within a larger Relay query. This example shows fragment composition for fetching user data in different parts of a query.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-classic/Classic-APIReference-QL.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nvar userFragment = Relay.QL`\n  fragment on User {\n    name,\n  }\n`;\nRelay.createContainer(Story, {\n  fragments: {\n    bar: () => Relay.QL`\n      fragment on Story {\n        author {\n          # Fetch the same information about the story's author ...\n          ${userFragment},\n        },\n        comments {\n          edges {\n            node {\n              author {\n                # ... and the authors of the comments.\n                ${userFragment},\n              },\n            },\n          },\n        },\n      }\n    `,\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Importing Generated Types\nDESCRIPTION: Shows how to import Flow types and generated artifacts from compiler output files.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/getting-started/compiler.md#2025-04-18_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport type {DictionaryComponent_word} from './__generated__/DictionaryComponent_word.graphql';\n\n// Direct import example\nimport DictionaryComponent_word from './__generated__/DictionaryComponent_word.graphql';\n```\n\n----------------------------------------\n\nTITLE: Using PageInfo to Check for More Data\nDESCRIPTION: A GraphQL query that uses the PageInfo type to determine if more data is available without additional queries, showing best practices for efficient pagination.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/guides/graphql-server-specification.md#2025-04-18_snippet_17\n\nLANGUAGE: graphql\nCODE:\n```\nquery EndOfRebelShipsQuery {\n  rebels {\n    name\n    originalShips: ships(first: 2) {\n      edges {\n        node {\n          name\n        }\n      }\n      pageInfo {\n        hasNextPage\n      }\n    }\n    moreShips: ships(first: 3 after: \"YXJyYXljb25uZWN0aW9uOjE=\") {\n      edges {\n        node {\n          name\n        }\n      }\n      pageInfo {\n        hasNextPage\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Markdown Links to External Resources\nDESCRIPTION: This snippet shows how to create links to external resources using Markdown syntax. It's used to reference various Facebook engineering blog posts and announcements.\nSOURCE: https://github.com/facebook/relay/blob/main/meta/meeting-notes/2016-03-14-team-sync.md#2025-04-18_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n[on mobile devices on slower networks](https://newsroom.fb.com/news/2015/10/news-feed-fyi-building-for-all-connectivity/)\n```\n\n----------------------------------------\n\nTITLE: Importing Components in Docusaurus (JavaScript)\nDESCRIPTION: This snippet imports necessary components from the Docusaurus framework to enable rating functionality and manage internal documentation viewing.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/guided-tour/reusing-cached-data/introduction.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport DocsRating from '@site/src/core/DocsRating';\nimport {OssOnly, FbInternalOnly} from 'docusaurus-plugin-internaldocs-fb/internal';\n```\n\n----------------------------------------\n\nTITLE: Defining Disposable Interface with dispose Method in JavaScript\nDESCRIPTION: This code snippet defines the Disposable interface, which consists of a single method 'dispose'. The dispose method is a function that takes no arguments and returns void, used for cleaning up resources.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/api-reference/types/Disposable.md#2025-04-18_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\ninterface Disposable {\n  dispose: () => void;\n}\n```\n\n----------------------------------------\n\nTITLE: Using @deleteRecord Directive in Subscriptions\nDESCRIPTION: Shows how to use the @deleteRecord directive in a subscription to delete records from the Relay store when subscription events indicate an item has been removed from the server.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/guided-tour/updating-data/graphql-subscriptions.md#2025-04-18_snippet_5\n\nLANGUAGE: graphql\nCODE:\n```\nsubscription DeletePostSubscription($input: DeletePostSubscribeData!) {\n  delete_post_subscribe(data: $input) {\n    deleted_post {\n      id @deleteRecord\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Downloading GraphQL Schema\nDESCRIPTION: This command downloads the GraphQL schema from a remote URL using `curl` and saves it as `schema.graphql` in the app's directory. This schema is required by the Relay compiler to generate code for GraphQL queries.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/getting-started/step-by-step-guide.md#2025-04-18_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n\"cd your-app-name\ncurl https://raw.githubusercontent.com/relayjs/relay-examples/main/issue-tracker/schema/schema.graphql > schema.graphql\"\n```\n\n----------------------------------------\n\nTITLE: MissingExpectedDataThrowEvent Type Definition\nDESCRIPTION: This type definition describes the structure of the event object for missing expected data that causes a throw. It includes the kind of event, the owner, the field path, and a boolean indicating if the error was handled.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/api-reference/relay-runtime/field-logger.md#2025-04-18_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport type MissingExpectedDataThrowEvent = {\n  +kind: 'missing_expected_data.throw',\n  +owner: string,\n  +fieldPath: string,\n  +handled: boolean,\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing React Component with Semantic NonNull Fields in Relay\nDESCRIPTION: React component implementation showing usage of @throwOnFieldError directive with Relay fragment to handle semantically non-nullable fields. Demonstrates type-safe access to user.name field.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/guides/semantic-nullability.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport type {UserComponent_user$key} from 'UserComponent_user.graphql';\n\nconst React = require('React');\nconst {graphql, useFragment} = require('react-relay');\n\ntype Props = {\n  user: UserComponent_user$key,\n};\n\nfunction UserComponent(props: Props) {\n  const user = useFragment(\n    graphql`\n      fragment UserComponent_user on User @throwOnFieldError {\n        name # Will be typed as non-nullable\n      }\n    `,\n    props.user,\n  );\n\n  return <div>{user.name}</div>\n}\n```\n\n----------------------------------------\n\nTITLE: GraphQL Query Definition with Fragment\nDESCRIPTION: Example of a GraphQL query that retrieves user information with a fragment, demonstrating query structure and variable usage\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/guided-tour/rendering/queries.md#2025-04-18_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nquery UserQuery($id: ID!) {\n  user(id: $id) {\n    id\n    name\n    ...UserFragment\n  }\n  viewer {\n    actor {\n      name\n    }\n  }\n}\n\nfragment UserFragment on User {\n  username\n}\n```\n\n----------------------------------------\n\nTITLE: Reading and Updating Updatable Fragment Data\nDESCRIPTION: Use store.readUpdatableFragment to access and modify local store data for optimistic UI updates\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/tutorial/mutations-updates.md#2025-04-18_snippet_9\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst {updatableData} = store.readUpdatableFragment(fragment, story);\nconst alreadyLikes = updatableData.doesViewerLike;\nupdatableData.doesViewerLike = !alreadyLikes;\nupdatableData.likeCount += (alreadyLikes ? -1 : 1);\n```\n\n----------------------------------------\n\nTITLE: Refetching Queries Using useLazyLoadQuery in React\nDESCRIPTION: Illustrates how to use useLazyLoadQuery to refetch a query with different variables. It demonstrates updating query arguments and fetch key to trigger a re-render and refetch in both App and MainContent components.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/guided-tour/refetching/refetching-queries-with-different-data.md#2025-04-18_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n/**\n * App.react.js\n */\nconst AppQuery = require('__generated__/AppQuery.graphql');\n\nfunction App(props: Props) {\n  const [queryArgs, setQueryArgs] = useState({\n    options: {fetchKey: 0},\n    variables: {id: '4'},\n  });\n\n  const refetch = useCallback(() => {\n    // Trigger a re-render of useLazyLoadQuery with new variables,\n    // *and* an updated fetchKey.\n    // The new fetchKey will ensure that the query is fully\n    // re-evaluated and refetched.\n    setQueryArgs(prev => ({\n      options: {\n        fetchKey: (prev?.options.fetchKey ?? 0) + 1,\n      },\n      variables: {id: 'different-id'}\n    }));\n  }, [/* ... */]);\n\n  return (\n    <React.Suspense fallback=\"Loading query...\">\n      <MainContent\n        refetch={refetch}\n        queryArgs={queryArgs}\n      />\n    </React.Suspense>\n  );\n}\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\n/**\n * MainContent.react.js\n */\n// Fetches and renders the query, given the fetch options\nfunction MainContent(props) {\n  const {refetch, queryArgs} = props;\n  const data = useLazyLoadQuery(\n    graphql`\n      query AppQuery($id: ID!) {\n        user(id: $id) {\n          name\n          friends {\n            count\n          }\n        }\n      }\n    `,\n    queryArgs.variables,\n    queryArgs.options,\n  );\n\n  return (\n    <>\n      <h1>{data.user?.name}</h1>\n      <div>Friends count: {data.user.friends?.count}</div>\n      <Button\n        onClick={() => refetch()}>\n        Fetch latest count\n      </Button>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Uploadable Map Type in TypeScript\nDESCRIPTION: Specifies a type definition for an object containing File or Blob values, enabling type-safe file uploads in Relay applications\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/api-reference/types/UploadableMap.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype UploadableMap = { [key: string]: File | Blob }\n```\n\n----------------------------------------\n\nTITLE: Invalidating a Relay Store Record in JavaScript\nDESCRIPTION: Demonstrates invalidation of a specific record in the Relay store using the `invalidateRecord` method, which marks queries referencing that record as stale until they are refetched.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/api-reference/relay-runtime/store.md#2025-04-18_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nconst record = store.get('4');\nrecord.invalidateRecord();\n```\n\nLANGUAGE: javascript\nCODE:\n```\nenvironment.check(query) === 'stale'\n```\n\n----------------------------------------\n\nTITLE: Defining Query Roots in Relay Route\nDESCRIPTION: Shows how to define query roots using Relay.QL, which automatically compose with matching fragments on Relay containers.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-classic/Classic-APIReference-Route.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nclass ProfileRoute extends Relay.Route {\n  static queries = {\n    user: () => Relay.QL`query { user(id: $userID) }`,\n  };\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a New Record in Relay Store\nDESCRIPTION: Demonstrates how to create a new record in the Relay store using the create method of RecordSourceSelectorProxy.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/api-reference/relay-runtime/store.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst record = store.create(dataID, 'Todo');\n```\n\n----------------------------------------\n\nTITLE: Visualizing Subscription Notification Process in Relay\nDESCRIPTION: This ASCII diagram shows the notify process in Relay, where affected subscriptions are identified and their callbacks are triggered based on data changes.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/principles-and-architecture/runtime-architecture.md#2025-04-18_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\n                        notify\n                           │\n                           ▼\n             ┌───────────────────────────┐\n             │           Store           │\n             │ ┌───────────────────────┐ │\n             │ │     RecordSource      │ │\n             │ │                       │ │\n             │ │┌──────┐┌──────┐┌─────┐│ │\n             │ ││Record││Record││ ... ││ │\n             │ │└──────┘└──────┘└─────┘│ │\n             │ └───────────────────────┘ │\n             │ ┌───────────────────────┐ │\n             │ │     Subscriptions     │ │\n             │ │                       │ │\n             │ │┌──────┐┌──────┐┌─────┐│ │\n             │ ││  Sub.││  Sub.││  ...││ │ <--- affected subscriptions fire\n             │ │└──────┘└──────┘└─────┘│ │\n             │ └───┼───────┼───────┼───┘ │\n             └─────┼───────┼───────┼─────┘\n                   │       │       │\n                   ▼       │       │\n               callback    │       │\n                           ▼       │\n                       callback    │\n                                   ▼\n                               callback\n```\n\n----------------------------------------\n\nTITLE: Initializing GraphQL Subscription with Relay useSubscription Hook\nDESCRIPTION: Demonstrates how to use the useSubscription hook to subscribe to GraphQL subscription with proper configuration and memoization. The example shows creating a subscription, memoizing configuration, and applying the hook in a React component.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v13.0.0/api-reference/hooks/use-subscription.md#2025-04-18_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nsubscription UserDataSubscription($input: InputData!) {\n  # ...\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport {graphql, useSubscription} from 'react-relay';\nimport {useMemo} from 'react';\n\nfunction UserComponent({ id }) {\n  const config = useMemo(() => ({\n    variables: {id},\n    subscription,\n  }), [id, subscription]);\n\n  useSubscription(config);\n\n  return (/* ... */);\n}\n```\n\n----------------------------------------\n\nTITLE: Embedding Facebook Video with iframe in HTML\nDESCRIPTION: HTML iframe element configured to embed a video from Facebook's platform. The URL includes encoded parameters to specify the video source while hiding text elements.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v13.0.0/principles-and-architecture/videos.md#2025-04-18_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<iframe src=\"https://www.facebook.com/plugins/video.php?href=https%3A%2F%2Fwww.facebook.com%2FFacebookforDevelopers%2Fvideos%2F10154614710193553%2F&show_text=0&width=640\" width={640} height={360} frameBorder=\"0\" allowFullScreen={true} />\n```\n\n----------------------------------------\n\nTITLE: Selecting Render Strategy using RenderStrategySelector in PHP\nDESCRIPTION: This snippet shows how to use RenderStrategySelector::genChooseStrategy to select the appropriate rendering strategy based on the implemented IRenderStrategy interface.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/guides/data-driven-dependencies/server-3d.md#2025-04-18_snippet_6\n\nLANGUAGE: php\nCODE:\n```\npublic function commentContentRenderer(Traversable<string> $supported): Awaitable<ICommentRenderer> {\n  return await RenderStrategySelector::genChooseStrategy(\n    vec[\n      CommentMarkdownRenderer(),\n      CommentMarkupRenderer(),\n      CommentPlaintextRenderer(),\n    ],\n    $supported,\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Bi-directional Pagination in React Relay\nDESCRIPTION: This code demonstrates how to implement bi-directional pagination using usePaginationFragment. It includes support for loading previous items with the loadPrevious function and checking if previous items exist with hasPrevious.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/guided-tour/list-data/advanced-pagination.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport type {FriendsListComponent_user$key} from 'FriendsListComponent_user.graphql';\n\nconst React = require('React');\nconst {Suspense} = require('React');\n\nconst {graphql, usePaginationFragment} = require('react-relay');\n\ntype Props = {\n  userRef: FriendsListComponent_user$key,\n};\n\nfunction FriendsListComponent(props: Props) {\n  const {\n    data,\n    loadPrevious,\n    hasPrevious,\n    // ... forward pagination values\n  } = usePaginationFragment(\n    graphql`\n      fragment FriendsListComponent_user on User {\n        name\n        friends(after: $after, before: $before, first: $first, last: $last)\n          @connection(key: \"FriendsListComponent_user_friends_connection\") {\n          edges {\n            node {\n              name\n              age\n            }\n          }\n        }\n      }\n    `,\n    userRef,\n  );\n\n  return (\n    <>\n      <h1>Friends of {data.name}:</h1>\n      <List items={data.friends?.edges.map(edge => edge.node)}>\n        {node => {\n          return (\n            <div>\n              {node.name} - {node.age}\n            </div>\n          );\n        }}\n      </List>\n\n      {hasPrevious ? (\n        <Button onClick={() => loadPrevious(10)}>\n          Load more friends\n        </Button>\n      ) : null}\n\n      {/* Forward pagination controls can go simultaneously here */}\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: MissingRequiredFieldLogEvent Type Definition\nDESCRIPTION: This type definition describes the structure of the event object for a missing required field that is logged. It includes the kind of event, the owner, and the field path of the missing required field.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/api-reference/relay-runtime/field-logger.md#2025-04-18_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nexport type MissingRequiredFieldLogEvent = {\n  +kind: 'missing_required_field.log',\n  +owner: string,\n  +fieldPath: string,\n};\n```\n\n----------------------------------------\n\nTITLE: Using Context in Mock Resolvers for Dynamic Test Data\nDESCRIPTION: Example demonstrating how to use the context parameter in mock resolvers to return dynamic values based on field names, paths in the selection, arguments, or parent types.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/guides/testing-relay-components.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  String(context) {\n    if (context.name === 'zip') {\n      return '94025';\n    }\n    if (context.path != null && context.path.join('.') === 'node.actor.name') {\n      return 'Current Actor Name';\n    }\n    if (context.parentType === 'Image' && context.name === 'uri') {\n       return 'http://my-image.url';\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Loading EntryPoints using Relay in JavaScript\nDESCRIPTION: This JavaScript snippet demonstrates how to load an EntryPoint in a Relay environment. It involves fetching the associated data and managing the lifecycle of the EntryPoint reference. The function relies on a React context-provided environment and emphasizes the need for disposing of EntryPoint references to prevent data leaks. Key parameters include the environment provider, EntryPoint, and entryPointParams, which are required for loading the EntryPoint's data effectively.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/api-reference/entrypoint-apis/load-entrypoint.md#2025-04-18_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst EntryPoint = require('MyComponent.entrypoint.js');\n\nconst {loadQuery} = require('react-relay');\n\n// Generally, your component should access the environment from the React context,\n// and pass that environment to this function.\nconst getEntrypointReference = environment => loadEntryPoint(\n  { getEnvironment: () => environment },\n  EntryPoint,\n  {id: '4'},\n);\n\n// later: pass entryPointReference to EntryPointContainer\n// Note that EntryPoint references should have .dispose() called on them,\n// which is missing in this example.\n```\n\n----------------------------------------\n\nTITLE: Using Multiple Fragments in User Component - JavaScript\nDESCRIPTION: This snippet demonstrates how to handle multiple fragments within the same React component. It outlines fetching both user and viewer data using 'useFragment' for each, allowing the component to render data from both fragments seamlessly.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/guided-tour/rendering/fragments.md#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport type {UserComponent_user$key} from 'UserComponent_user.graphql';\nimport type {UserComponent_viewer$key} from 'UserComponent_viewer.graphql';\n\nconst React = require('React');\nconst {graphql, useFragment} = require('react-relay');\n\ntype Props = {\n  user: UserComponent_user$key,\n  viewer: UserComponent_viewer$key,\n};\n\nfunction UserComponent(props: Props) {\n  const userData = useFragment(\n    graphql`\n      fragment UserComponent_user on User {\n        name\n        profile_picture(scale: 2) {\n          uri\n        }\n      }\n    `,\n    props.user,\n  );\n\n  const viewerData = useFragment(\n    graphql`\n      fragment UserComponent_viewer on Viewer {\n        actor {\n          name\n        }\n      }\n    `,\n    props.viewer,\n  );\n\n  return (\n    <> \n      <h1>{userData.name}</h1>\n      <div>\n        <img src={userData.profile_picture?.uri} />\n        Acting as: {viewerData.actor?.name ?? 'Unknown'}\n      </div>\n    </>\n  );\n}\n\nmodule.exports = UserComponent;\n```\n\n----------------------------------------\n\nTITLE: Implementing Pagination with usePaginationFragment\nDESCRIPTION: Demonstrates how to use the usePaginationFragment hook to render a paginated list of friends. The component includes type definitions, fragment declaration, and rendering logic with Suspense support.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/guided-tour/list-data/rendering-connections.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport type {FriendsListComponent_user$key} from 'FriendsList_user.graphql';\n\nconst React = require('React');\nconst {Suspense} = require('React');\n\nconst {graphql, usePaginationFragment} = require('react-relay');\n\ntype Props = {\n  user: FriendsListComponent_user$key,\n};\n\nfunction FriendsListComponent(props: Props) {\n  const {data} = usePaginationFragment(\n    graphql`\n      fragment FriendsListComponent_user on User\n      @refetchable(queryName: \"FriendsListPaginationQuery\") {\n        name\n        friends(first: $count, after: $cursor)\n        @connection(key: \"FriendsList_user_friends\") {\n          edges {\n            node {\n              ...FriendComponent\n            }\n          }\n        }\n      }\n    `,\n    props.user,\n  );\n\n\n  return (\n    <>\n      {data.name != null ? <h1>Friends of {data.name}:</h1> : null}\n\n      <div>\n        {/* Extract each friend from the resulting data */}\n        {(data.friends?.edges ?? []).map(edge => {\n          const node = edge.node;\n          return (\n            <Suspense fallback={<Glimmer />}>\n              <FriendComponent user={node} />\n            </Suspense>\n          );\n        })}\n      </div>\n    </>\n  );\n}\n\nmodule.exports = FriendsListComponent;\n```\n\n----------------------------------------\n\nTITLE: Implementing CreateFeedback Mutation with Updater\nDESCRIPTION: JavaScript implementation of a feedback creation mutation that uses an updater function to set a client-side field. Shows usage of commitMutation with updater functions and fragment handling.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/guided-tour/updating-data/imperatively-modifying-store-data.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport type {Environment} from 'react-relay';\nimport type {\n  FeedbackCreateData,\n  CreateFeedbackMutation,\n  CreateFeedbackMutation$data,\n} from 'CreateFeedbackMutation.graphql';\n\nconst {commitMutation, graphql} = require('react-relay');\nconst {ConnectionHandler} = require('relay-runtime');\n\nfunction commitCreateFeedbackMutation(\n  environment: Environment,\n  input: FeedbackCreateData,\n) {\n  return commitMutation<FeedbackCreateData>(environment, {\n    mutation: graphql`\n      mutation CreateFeedbackMutation($input: FeedbackCreateData!) {\n        feedback_create(input: $input) {\n          feedback {\n            id\n            ...CreateFeedback_updatable_feedback\n          }\n        }\n      }\n    `,\n    variables: {input},\n\n    updater: (store: RecordSourceSelectorProxy, response: ?CreateCommentMutation$data) => {\n      const feedbackRef = response?.feedback_create?.feedback;\n      if (feedbackRef == null) {\n        return;\n      }\n\n      const {updatableData} = store.readUpdatableFragment(\n          graphql`\n            fragment CreateFeedback_updatable_feedback on Feedback @updatable {\n              is_new_comment\n            }\n          `,\n          feedbackRef\n        );\n\n      updatableData.is_new_comment = true;\n    },\n  });\n}\n\nmodule.exports = {commit: commitCreateFeedbackMutation};\n```\n\n----------------------------------------\n\nTITLE: Accessing Pagination Status with hasNext - React - JavaScript\nDESCRIPTION: This code snippet shows how to access pagination status using the hasNext property from the usePaginationFragment. It conditionally renders the 'Load more friends' button depending on whether there are more items available to fetch.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v13.0.0/guided-tour/list-data/pagination.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport type {FriendsListPaginationQuery} from 'FriendsListPaginationQuery.graphql';\nimport type {FriendsListComponent_user$key} from 'FriendsList_user.graphql';\n\nconst React = require('React');\nconst {Suspense} = require('React');\n\nconst {graphql, usePaginationFragment} = require('react-relay');\n\ntype Props = {\n  user: FriendsListComponent_user$key,\n};\n\nfunction FriendsListComponent(props: Props) {\n  // ...\n  const {\n    data,\n    loadNext,\n    hasNext,\n  } = usePaginationFragment<FriendsListPaginationQuery, _>(\n    graphql`...`,\n    props.user,\n  );\n\n  return (\n    <>\n      <h1>Friends of {data.name}:</h1>\n      {/* ... */}\n\n      {/* Only render button if there are more friends to load in the list */}\n      {hasNext ? (\n        <Button\n          onClick={/* ... */}>\n          Load more friends\n        </Button>\n      ) : null}\n    </>\n  );\n}\n\nmodule.exports = FriendsListComponent;\n```\n\n----------------------------------------\n\nTITLE: Rendering Queries with usePreloadedQuery - React Relay\nDESCRIPTION: This JavaScript snippet demonstrates how to render a GraphQL query result using the `usePreloadedQuery` hook in a React component. It requires a preloaded query reference, a compiled GraphQL query, and a properly configured Relay environment. The function takes a `queryRef` as input and renders the user's name.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/guided-tour/rendering/queries.md#2025-04-18_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport type {HomeTabQuery} from 'HomeTabQuery.graphql';\nimport type {PreloadedQuery} from 'react-relay';\n\nconst React = require('React');\nconst {graphql, usePreloadedQuery} = require('react-relay');\n\ntype Props = {\n  queryRef: PreloadedQuery<HomeTabQuery>,\n};\n\nfunction HomeTab(props: Props) {\n  const data = usePreloadedQuery(\n    graphql`\n      query HomeTabQuery($id: ID!) {\n        user(id: $id) {\n          name\n        }\n      }\n    `,\n    props.queryRef,\n  );\n\n  return (\n    <h1>{data.user?.name}</h1>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Queries with useQueryLoader in React\nDESCRIPTION: Illustrates how to use `useQueryLoader` in a React component to fetch a GraphQL query, manage its reference, and enable prefetching data before rendering.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/guided-tour/rendering/queries.md#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport type {HomeTabQuery as HomeTabQueryType} from 'HomeTabQuery.graphql';\nimport type {PreloadedQuery} from 'react-relay';\n\nconst HomeTabQuery = require('HomeTabQuery.graphql')\nconst {useQueryLoader} = require('react-relay');\n\n\ntype Props = {\n  initialQueryRef: PreloadedQuery<HomeTabQueryType>,\n};\n\nfunction AppTabs(props) {\n  const [\n    homeTabQueryRef,\n    loadHomeTabQuery,\n  ] = useQueryLoader(\n    HomeTabQuery,\n    props.initialQueryRef, /* e.g. provided by router */\n  );\n\n  const onSelectHomeTab = () => {\n    // Start loading query for HomeTab immediately in the event handler\n    // that triggers navigation to that tab, *before* we even start\n    // rendering the target tab.\n    // Calling this function will update the value of homeTabQueryRef.\n    loadHomeTabQuery({id: '4'});\n\n    // ...\n  }\n\n  // ...\n\n  return (\n    screen === 'HomeTab' && homeTabQueryRef != null ?\n      // Pass to component that uses usePreloadedQuery\n      <HomeTab queryRef={homeTabQueryRef} /> :\n      // ...\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Embedding Facebook Video in JSX\nDESCRIPTION: This code shows how to embed a Facebook video in a React/JSX application. The iframe uses Facebook's plugin URL structure with encoded parameters and includes width, height, frameBorder, and allowFullScreen attributes.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/principles-and-architecture/videos.md#2025-04-18_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<iframe src=\"https://www.facebook.com/plugins/video.php?href=https%3A%2F%2Fwww.facebook.com%2FFacebookforDevelopers%2Fvideos%2F10154614710193553%2F&show_text=0&width=640\" width={640} height={360} frameBorder=\"0\" allowFullScreen={true} />\n```\n\n----------------------------------------\n\nTITLE: Instantiating a Relay Route\nDESCRIPTION: Example of creating a new Route instance with parameters using the constructor.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-classic/Classic-APIReference-Route.md#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nvar profileRoute = new ProfileRoute({userID: '123'});\n```\n\n----------------------------------------\n\nTITLE: Implementing Error Boundary with Retry for useLazyLoadQuery\nDESCRIPTION: This snippet demonstrates an Error Boundary implementation with retry functionality for use with Relay's useLazyLoadQuery hook. It uses a fetchKey to trigger query re-evaluation and refetching.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/guided-tour/rendering/error-states.md#2025-04-18_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * ErrorBoundaryWithRetry.react.js\n */\n\nconst React = require('React');\n\n// NOTE: This is NOT actual production code;\n// it is only used to illustrate example\nclass ErrorBoundaryWithRetry extends React.Component<Props, State> {\n  state = {error: null, fetchKey: 0};\n\n  static getDerivedStateFromError(error): State {\n    return {error: error, fetchKey: 0};\n  }\n\n  _retry = () => {\n    this.setState(prev => ({\n      // Clear the error\n      error: null,\n      // Increment and set a new fetchKey in order\n      // to trigger a re-evaluation and refetching\n      // of the query using useLazyLoadQuery\n      fetchKey: prev.fetchKey + 1,\n    }));\n  }\n\n  render() {\n    const {children, fallback} = this.props;\n    const {error, fetchKey} = this.state;\n    if (error) {\n      if (typeof fallback === 'function') {\n        return fallback({error, retry: this._retry});\n      }\n      return fallback;\n    }\n    return children({fetchKey});\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Calling commitMutation Hook for Posting Comment in Relay\nDESCRIPTION: This code snippet demonstrates using the `useMutation` hook to obtain the `commitMutation` function and calling it within the `onPost` function to post a new comment. The `variables` object includes the story's `id` and the comment `text`. After submitting, the text input is cleared.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/tutorial/mutations-updates.md#2025-04-18_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nfunction StoryCommentsComposer({story}) {\n  const data = useFragment(StoryCommentsComposerFragment, story);\n  const [text, setText] = useState('');\n  // change-line\n  const [commitMutation, isMutationInFlight] = useMutation(StoryCommentsComposerPostMutation);\n  function onPost() {\n    // change\n    setText(''); // Reset the UI\n    commitMutation({\n      variables: {\n        id: data.id,\n        text,\n      },\n    })\n    // end-change\n  }\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing EntryPoint Loading with React Relay\nDESCRIPTION: Example showing how to use useEntryPointLoader hook to manage loading and disposal of EntryPoints. The component demonstrates conditional rendering based on EntryPoint state, loading handling with Suspense, and proper cleanup.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v13.0.0/api-reference/entrypoint-apis/use-entrypoint-loader.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst {useEntryPointLoader, EntryPointContainer} = require('react-relay');\n\nconst ComponentEntryPoint = require('Component.entrypoint');\n\nfunction EntryPointRevealer(): React.MixedElement {\n  const environmentProvider = useMyEnvironmentProvider();\n  const [\n    entryPointReference,\n    loadEntryPoint,\n    disposeEntryPoint,\n  ] = useEntryPointLoader(environmentProvider, ComponentEntryPoint);\n\n  return (\n    <>\n      {\n        entryPointReference == null && (\n          <Button onClick={() => loadEntryPoint({})}>\n            Click to reveal the contents of the EntryPoint\n          </Button>\n        )\n      }\n      {\n        entryPointReference != null && (\n          <>\n            <Button onClick={disposeEntryPoint}>\n              Click to hide and dispose the EntryPoint.\n            </Button>\n            <Suspense fallback=\"Loading...\">\n              <EntryPointContainer\n                entryPointReference={entryPointReference}\n                props={{}}\n              />\n            </Suspense>\n          </>\n        )\n      }\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Relay Mutation\nDESCRIPTION: This snippet illustrates how to test a Relay mutation using a mock environment and the `commitMutation` API.  It defines a function to send the mutation and then verifies that the mutation is called and its results are handled correctly by mocking the environment and asserting that the completion callback is invoked.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/guides/testing-relay-components.md#2025-04-18_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n```js\n// Say, you have a mutation function\nfunction sendMutation(environment, onCompleted, onError, variables)\n  commitMutation(environment, {\n    mutation: graphql`...`,\n    onCompleted,\n    onError,\n    variables,\n  });\n}\n\n// Example test may be written like so\ntest('it should send mutation', () => {\n  const environment = createMockEnvironment();\n  const onCompleted = jest.fn();\n  sendMutation(environment, onCompleted, jest.fn(), {});\n  const operation = environment.mock.getMostRecentOperation();\n\n  act(() => {\n    environment.mock.resolve(\n      operation,\n      MockPayloadGenerator.generate(operation)\n    );\n  });\n\n  expect(onCompleted).toBeCalled();\n});\n```\n```\n\n----------------------------------------\n\nTITLE: Reading Updatable Fragment Data in Relay\nDESCRIPTION: This snippet shows how to use `store.readUpdatableFragment` to retrieve data from the Relay store based on an updatable fragment and a fragment reference (story). The `readUpdatableFragment` function returns an object (`updatableData`) that represents the data currently stored in the Relay store for the specified fragment and story.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/tutorial/mutations-updates.md#2025-04-18_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nfunction StoryLikeButton({story}) {\n  ...\n      optimisticUpdater: store => {\n        const fragment = graphql`\n          fragment StoryLikeButton_updatable on Story @updatable {\n            likeCount\n            doesViewerLike\n          }\n        `;\n        const {\n          // color1\n          updatableData\n        } = store.readUpdatableFragment(\n          // color2\n          fragment,\n          // color3\n          story\n        );\n      },\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Granular Loading UI with Suspense\nDESCRIPTION: This snippet shows how to implement a more granular loading UI by wrapping different sections of the component tree with separate Suspense components. This allows the LeftColumn to render independently while the MainContent and SecondaryContent load under a separate LoadingGlimmer, improving perceived performance.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/guided-tour/rendering/loading-states.md#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * App.react.js\n */\n\nconst React = require('React');\nconst {Suspense} = require('React');\n\nfunction App() {\n  return (\n    <>\n      {/* Show a separate loading UI for the LeftHandColumn */}\n      <Suspense fallback={<LeftColumnPlaceholder />}>\n        <LeftColumn />\n      </Suspense>\n\n      {/* Show a separate loading UI for both the Main and Secondary content */}\n      <Suspense fallback={<LoadingGlimmer />}>\n        <MainContent />\n        <SecondaryContent />\n      </Suspense>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Derived Field with @rootFragment\nDESCRIPTION: This code snippet demonstrates how to define a derived field using the `@rootFragment` tag. The resolver function `fullName` accepts a fragment key, and uses it to read the fragment data using `readFragment()` from `relay-runtime`. The field is automatically recomputed when the data it depends on changes.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/api-reference/relay-resolvers/docblock-format.md#2025-04-18_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport {readFragment} from 'relay-runtime';\n\n/**\n * @RelayResolver User.fullName: String\n * @rootFragment UserFullNameFragment\n */\nexport function fullName(key: UserFullNameFragment$key): string {\n  const user = readFragment(\n    graphql`\n      fragment UserFullNameFragment on User {\n        firstName\n        lastName\n      }\n    `,\n    key,\n  );\n  return `${user.firstName} ${user.lastName}`;\n}\n```\n\n----------------------------------------\n\nTITLE: Using useLazyLoadQuery Hook in React with Relay\nDESCRIPTION: This snippet demonstrates how to lazily fetch data during component rendering using Relay's useLazyLoadQuery Hook. It shows querying user data with GraphQL, passing variables, and rendering the result. The component will automatically re-render if the query data is updated elsewhere in the app.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/guided-tour/rendering/queries.md#2025-04-18_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst React = require('React');\nconst {graphql, useLazyLoadQuery} = require('react-relay');\n\nfunction App() {\n  const data = useLazyLoadQuery(\n    graphql`\n      query AppQuery($id: ID!) {\n        user(id: $id) {\n          name\n        }\n      }\n    `,\n    {id: '4'},\n  );\n\n  return (\n    <h1>{data.user?.name}</h1>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Retaining Queries with Relay Runtime in JavaScript\nDESCRIPTION: This snippet demonstrates how to manually retain a query using the environment.retain method from Relay Runtime. It shows the process of creating an operation descriptor, retaining the query, and disposing of the retention when no longer needed.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/guided-tour/managing-data-outside-react/retaining-queries.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst {\n  createOperationDescriptor,\n  getRequest,\n  graphql,\n} = require('relay-runtime')\n\n// Query graphql object\nconst query = graphql`...`;\n\n// Construct Relay's internal representation of the query\nconst queryRequest = getRequest(query);\nconst queryDescriptor = createOperationDescriptor(\n  queryRequest,\n  variables\n);\n\n// Retain query; this will prevent the data for this query and\n// variables from being gabrage collected by Relay\nconst disposable = environment.retain(queryDescriptor);\n\n// Disposing of the disposable will release the data for this query\n// and variables, meaning that it can be deleted at any moment\n// by Relay's garbage collection if it hasn't been retained elsewhere\ndisposable.dispose();\n```\n\n----------------------------------------\n\nTITLE: Loading an EntryPoint with loadEntryPoint in JavaScript\nDESCRIPTION: Example of how to use loadEntryPoint to load an EntryPoint component with parameters. This demonstrates creating an EntryPoint reference that can be passed to EntryPointContainer. Note that the example includes a reminder about the importance of calling dispose() on EntryPoint references to prevent memory leaks.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/api-reference/entrypoint-apis/load-entrypoint.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst EntryPoint = require('MyComponent.entrypoint.js');\n\nconst {loadQuery} = require('react-relay');\n\n// Generally, your component should access the environment from the React context,\n// and pass that environment to this function.\nconst getEntrypointReference = environment => loadEntryPoint(\n  { getEnvironment: () => environment },\n  EntryPoint,\n  {id: '4'},\n);\n\n// later: pass entryPointReference to EntryPointContainer\n// Note that EntryPoint references should have .dispose() called on them,\n// which is missing in this example.\n```\n\n----------------------------------------\n\nTITLE: Configuring Network Layer with subscriptions-transport-ws for GraphQL Subscriptions in Relay\nDESCRIPTION: This snippet shows an alternative configuration of the Network Layer using the legacy subscriptions-transport-ws library. It sets up a SubscriptionClient and defines a subscribe function that converts the library's observable type to Relay's Observable.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v13.0.0/guided-tour/updating-data/graphql-subscriptions.md#2025-04-18_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport {\n    ...\n    Network,\n    Observable\n} from 'relay-runtime';\nimport { SubscriptionClient } from 'subscriptions-transport-ws';\n\n...\n\nconst subscriptionClient = new SubscriptionClient('ws://localhost:3000', {\n    reconnect: true,\n});\n\nconst subscribe = (request, variables) => {\n    const subscribeObservable = subscriptionClient.request({\n        query: request.text,\n        operationName: request.name,\n        variables,\n    });\n    // Important: Convert subscriptions-transport-ws observable type to Relay's\n    return Observable.from(subscribeObservable);\n};\n\nconst network = Network.create(fetchQuery, subscribe);\n\n...\n```\n\n----------------------------------------\n\nTITLE: Manually Retaining Queries in Relay using JavaScript\nDESCRIPTION: This snippet demonstrates how to manually retain a query using the environment.retain method in Relay. It shows the process of creating an operation descriptor, retaining the query, and disposing of the retained data when no longer needed.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/guided-tour/managing-data-outside-react/retaining-queries.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst {\n  createOperationDescriptor,\n  getRequest,\n  graphql,\n} = require('relay-runtime')\n\n// Query graphql object\nconst query = graphql`...`;\n\n// Construct Relay's internal representation of the query\nconst queryRequest = getRequest(query);\nconst queryDescriptor = createOperationDescriptor(\n  queryRequest,\n  variables\n);\n\n// Retain query; this will prevent the data for this query and\n// variables from being gabrage collected by Relay\nconst disposable = environment.retain(queryDescriptor);\n\n// Disposing of the disposable will release the data for this query\n// and variables, meaning that it can be deleted at any moment\n// by Relay's garbage collection if it hasn't been retained elsewhere\ndisposable.dispose();\n```\n\n----------------------------------------\n\nTITLE: Configuring Network Layer with graphql-ws for GraphQL Subscriptions in JavaScript\nDESCRIPTION: This snippet demonstrates how to configure the Network Layer using the graphql-ws library to handle GraphQL subscriptions over WebSockets. It creates a WebSocket client and defines a subscribe function that creates an Observable for each subscription operation.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/guided-tour/updating-data/graphql-subscriptions.md#2025-04-18_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport {\n    ...\n    Network,\n    Observable\n} from 'relay-runtime';\nimport { createClient } from 'graphql-ws';\n\nconst wsClient = createClient({\n  url:'ws://localhost:3000',\n});\n\nconst subscribe = (operation, variables) => {\n  return Observable.create((sink) => {\n    return wsClient.subscribe(\n      {\n        operationName: operation.name,\n        query: operation.text,\n        variables,\n      },\n      sink,\n    );\n  });\n}\n\nconst network = Network.create(fetchQuery, subscribe);\n```\n\n----------------------------------------\n\nTITLE: Import statements for Docusaurus components\nDESCRIPTION: These import statements are used to include custom components for documentation purposes.  `DocsRating` is likely a component used to rate the documentation page. `OssOnly` and `FbInternalOnly` appear to be components that control the visibility of content depending on whether the documentation is being viewed in an open-source or internal Facebook environment.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/guided-tour/reusing-cached-data/introduction.md#2025-04-18_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport DocsRating from '@site/src/core/DocsRating';\nimport {OssOnly, FbInternalOnly} from 'docusaurus-plugin-internaldocs-fb/internal';\n```\n\n----------------------------------------\n\nTITLE: Subscribing with useSubscription - JavaScript\nDESCRIPTION: This snippet demonstrates how to set up a subscription using Relay's requestSubscription API, including a test case to validate the onNext callback being called correctly when the subscription sends data.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/guides/testing-relay-components.md#2025-04-18_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\n// Example subscribe function\nfunction subscribe(environment, onNext, onError, variables)\n  requestSubscription(environment, {\n    subscription: graphql`...`,\n    onNext,\n    onError,\n    variables,\n  });\n\n// Example test may be written like so\ntest('it should subscribe', () => {\n  const environment = createMockEnvironment();\n  const onNext = jest.fn();\n  subscribe(environment, onNext, jest.fn(), {});\n  const operation = environment.mock.getMostRecentOperation();\n\n  ReactTestRenderer.act(() => {\n    environment.mock.nextValue(\n      operation,\n      MockPayloadGenerator.generate(operation)\n    );\n  });\n\n  expect(onNext).toBeCalled();\n});\n\n```\n\n----------------------------------------\n\nTITLE: Establishing a GraphQL Subscription using requestSubscription in JavaScript\nDESCRIPTION: The snippet demonstrates how to use the requestSubscription function to establish a GraphQL subscription within a Relay environment. It includes details on the subscription query and the required input variables. The function returns a Disposable object that can be used to clean up the subscription when it is no longer needed.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/api-reference/relay-runtime/request-subscription.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport {graphql, requestSubscription} from 'react-relay';\n\nconst subscription = graphql`\n  subscription UserDataSubscription($input: InputData!) {\n    # ...\n  }\n`;\n\nfunction createSubscription(environment: IEnvironment): Disposable {\n  return requestSubscription(environment, {\n    subscription,\n    variables: {input: {userId: '4'}},\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Loading EntryPoint with React Relay\nDESCRIPTION: Example showing how to use loadEntryPoint to load an EntryPoint component with environment and parameters. The code demonstrates basic setup and usage pattern, noting the importance of proper disposal of EntryPoint references.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v13.0.0/api-reference/entrypoint-apis/load-entrypoint.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst EntryPoint = require('MyComponent.entrypoint.js');\n\nconst {loadQuery} = require('react-relay');\n\n// Generally, your component should access the environment from the React context,\n// and pass that environment to this function.\nconst getEntrypointReference = environment => loadEntryPoint(\n  { getEnvironment: () => environment },\n  EntryPoint,\n  {id: '4'},\n);\n\n// later: pass entryPointReference to EntryPointContainer\n// Note that EntryPoint references should have .dispose() called on them,\n// which is missing in this example.\n```\n\n----------------------------------------\n\nTITLE: Declaring Fragment Arguments with Default Values\nDESCRIPTION: Component with a fragment that declares arguments with default values using @argumentDefinitions. The scale parameter has a default value of 2.0, making it optional when including this fragment.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v13.0.0/guided-tour/rendering/variables.md#2025-04-18_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * Declare a fragment that accepts arguments with default values\n */\n\nfunction PictureComponent(props) {\n  const data = useFragment(\n    graphql`\n      fragment PictureComponent_user on User\n        @argumentDefinitions(scale: {type: \"Float!\", defaultValue: 2.0}) {\n\n        # *`**$scale**`* is a local variable here, declared above\n        # as an argument *`**scale**`*, of type *`**Float!` with a default value of *`2.0**`**\n        profile_picture(scale: $scale) {\n          uri\n        }\n      }\n    `,\n    props.user,\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using useLazyLoadQuery in MainContent Component\nDESCRIPTION: This snippet shows the implementation of the MainContent component that uses useLazyLoadQuery to fetch and render query data. It includes a button to trigger the refresh function.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/guided-tour/refetching/refreshing-queries.md#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * MainContent.react.js\n */\n\n// Fetches and renders the query, given the fetch options\nfunction MainContent(props) {\n  const {refresh, queryOptions, variables} = props;\n  const data = useLazyLoadQuery(\n    graphql`\n      query AppQuery($id: ID!) {\n        user(id: $id) {\n          name\n          friends {\n            count\n          }\n        }\n      }\n    `,\n    variables,\n    queryOptions,\n  );\n\n  return (\n    <>\n      <h1>{data.user?.name}</h1>\n      <div>Friends count: {data.user.friends?.count}</div>\n      <Button\n        onClick={() => refresh()}>\n        Fetch latest count\n      </Button>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting Local Notes - JavaScript\nDESCRIPTION: This snippet shows how to delete a user note from the Relay Store. It involves filtering the user's notes and updating the store accordingly using 'commitLocalUpdate'.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/guides/client-schema-extensions.md#2025-04-18_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport {commitLocalUpdate} from 'react-relay';\n\nfunction deleteUserNote(environment, dataID) {\n  commitLocalUpdate(environment, store => {\n    const user = store.getRoot().getLinkedRecord('viewer');\n    const userNoteRecords = user.getLinkedRecords('notes');\n\n    // Remove the note from the list of user notes.\n    const newUserNoteRecords = userNoteRecords.filter(x => x.getDataID() !== dataID);\n\n    // Delete the note from the store.\n    store.delete(dataID);\n\n    // Set the new list of notes.\n    user.setLinkedRecords(newUserNoteRecords, 'notes');\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Conditional Rendering Component (OssOnly)\nDESCRIPTION: The `<OssOnly>` component renders its children only when the documentation is viewed in an open-source context. This allows for displaying content specific to open-source users.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v13.0.0/getting-started/introduction.md#2025-04-18_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<OssOnly>\n\n- A **[step-by-step guide](./getting-started/step-by-step-guide/)** to cover the very basics and quickly get up and running.\n- An overview of the **[prerequisites](./getting-started/prerequisites/)** for using Relay, and an **[installation and setup guide](./getting-started/installation-and-setup/)**.\n- The **[guided tour](./guided-tour/)**, for a comprehensive overview of Relay's different APIs and concepts, and usage examples for different use cases.\n- The **[API reference](./api-reference/relay-environment-provider/)**, for a reference of our APIs including a detailed overview of their inputs and outputs.\n\n</OssOnly>\n```\n\n----------------------------------------\n\nTITLE: Configuring Relay Environment with Field Logger\nDESCRIPTION: Setup for Relay Environment configuration with a field logger to track resolver errors. Creates a new Environment instance with network, store, and logging capabilities to monitor resolver execution errors.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/guides/relay-resolvers/enabling.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Environment, RecordSource, RelayFeatureFlags } from \"relay-runtime\";\nimport RelayModernStore from \"relay-runtime/lib/store/RelayModernStore\";\n\n// It is recommended to log errors thrown by Resolvers\nfunction fieldLogger(event) {\n  if(event.kind === \"relay_resolver.error\") {\n    // Log this somewhere!\n    console.warn(`Resolver error encountered in ${event.owner}.${event.fieldPath}`)\n    console.warn(event.error)\n  }\n}\n\nconst environment = new Environment({\n  network: Network.create(/* your fetch function here */),\n  store: new RelayModernStore(new RecordSource()),\n  relayFieldLogger: fieldLogger\n});\n\n// ... create your Relay context with your environment\n```\n\n----------------------------------------\n\nTITLE: Declaring a GraphQL Fragment with Relay\nDESCRIPTION: This code snippet demonstrates how to define a GraphQL fragment in Relay using a GraphQL literal. The fragment specifies which fields to select from an object of a particular type. This example selects the `name` and `url` fields from the `Author` type.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/principles-and-architecture/thinking-in-relay.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// AuthorDetails.react.js\nconst authorDetailsFragment = graphql`\n  fragment AuthorDetails_author on Author {\n    name\n    photo {\n      url\n    }\n  }\n`;\n```\n\n----------------------------------------\n\nTITLE: Implementing Live Fields with @live Tag in Relay\nDESCRIPTION: Shows how to create fields that return streams of values over time using the @live tag. The resolver returns a LiveState object with read and subscribe methods to track changes to the value.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/api-reference/relay-resolvers/docblock-format.md#2025-04-18_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport type {LiveState} from 'relay-runtime';\n\n/**\n* @RelayResolver Query.counter: Int\n* @live\n*/\nexport function counter(): LiveState<number> {\n  return {\n    read: () => store.getState().counter,\n    subscribe: cb => {\n      return store.subscribe(cb);\n    },\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Test Snapshots for JavaScript Docblock Parser\nDESCRIPTION: Instructions for updating test snapshots during development. This is done by setting an environment variable when running tests.\nSOURCE: https://github.com/facebook/relay/blob/main/compiler/crates/docblock-syntax/README.md#2025-04-18_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nUPDATE_SNAPSHOTS=1\n```\n\n----------------------------------------\n\nTITLE: Configuring Query Cache Expiration Time in Relay in JavaScript\nDESCRIPTION: Demonstrates setting the 'queryCacheExpirationTime' to define how long a cache remains valid before queries are marked stale automatically. If no time is set, staleness checks rely purely on record invalidation status. The example sets a 5-minute expiration period.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/guided-tour/reusing-cached-data/staleness-of-data.md#2025-04-18_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst store = new Store(source, {queryCacheExpirationTime: 5 * 60 * 1000 });\n```\n\n----------------------------------------\n\nTITLE: Rendering Fallback with Suspense\nDESCRIPTION: This code demonstrates how to use the React Suspense component to render a fallback UI (LoadingGlimmer) while a component (CanSuspend) is loading its data. The Suspense component wraps the component that may suspend, and the fallback prop specifies the UI to display while the component is loading.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/guided-tour/rendering/loading-states.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst React = require('React');\nconst {Suspense} = require('React');\n\nfunction App() {\n  return (\n    // Render a fallback using Suspense as a wrapper\n    <Suspense fallback={<LoadingGlimmer />}>\n      <CanSuspend />\n    </Suspense>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Child Fragment Component Implementation\nDESCRIPTION: Implementation of a child component (UsernameSection) that uses useFragment hook to access user data. Shows proper typing and fragment definition.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/guided-tour/rendering/fragments.md#2025-04-18_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * UsernameSection.react.js\n *\n * Child Fragment Component\n */\n\nimport type {UsernameSection_user$key} from 'UsernameSection_user.graphql';\n\nconst React = require('React');\nconst {graphql, useFragment} = require('react-relay');\n\ntype Props = {\n  user: UsernameSection_user$key,\n};\n\nfunction UsernameSection(props: Props) {\n  const data = useFragment(\n    graphql`\n      fragment UsernameSection_user on User {\n        username\n      }\n    `,\n    props.user,\n  );\n\n  return <div>{data.username ?? 'Unknown'}</div>;\n}\n\nmodule.exports = UsernameSection;\n```\n\n----------------------------------------\n\nTITLE: RelayFieldPayloadErrorEvent Type Definition\nDESCRIPTION: This type definition describes the structure of the event object for a GraphQL payload field error. It includes the kind of event, the owner, the field path, the error object, and booleans indicating if it should throw and if it was handled.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/api-reference/relay-runtime/field-logger.md#2025-04-18_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nexport type RelayFieldPayloadErrorEvent = {\n  +kind: 'relay_field_payload.error',\n  +owner: string,\n  +fieldPath: string,\n  +error: TRelayFieldError,\n  +shouldThrow: boolean,\n  +handled: boolean,\n};\n```\n\n----------------------------------------\n\nTITLE: Defining GraphQL Types for Local Data - GraphQL\nDESCRIPTION: This snippet illustrates how to define a new GraphQL type named 'Note' and extend the existing 'User' type to include a relationship with this new type. These definitions help in querying local data effectively.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v13.0.0/guides/client-schema-extensions.md#2025-04-18_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\ntype Note {\n  id: ID!\n  title: String\n  body: String\n}\n\nextend type User {\n  notes: [Note]\n}\n```\n\n----------------------------------------\n\nTITLE: React Component with MatchContainer Implementation\nDESCRIPTION: React component example showing how to use MatchContainer to dynamically render components based on 3D data dependencies.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/guides/data-driven-dependencies/server-3d.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst {useFragment, graphql, MatchContainer} = require('react-relay');\n\nfunction CommentRenderer(props) {\n  const comment = useFragment(\n    /* fragment Comment_comment from above */,\n    props.comment,\n  );\n\n  if (comment.image == null) {\n    // Handle cases where the field failed to load or was null\n    return null;\n  }\n  // MatchContainer may suspend while loading the component or its data,\n  // consider wrapping with React.Suspense.\n  return (\n    <Suspense fallback={null}>\n      <MatchContainer\n        // data for field containing @module selection\n        match={comment.image}\n        props={{ /* ...other props... */ }}\n      />\n    </Suspense>\n  );\n}\nmodule.exports = CommentRenderer;\n```\n\n----------------------------------------\n\nTITLE: Embedding YouTube Video iframes using JSX\nDESCRIPTION: This code snippet demonstrates how to embed YouTube videos using iframe elements in JSX. The embed uses YouTube's nocookie domain for privacy considerations and includes width, height, allowFullScreen, and frameBorder attributes.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/principles-and-architecture/videos.md#2025-04-18_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<iframe src=\"https://www.youtube-nocookie.com/embed/lhVGdErZuN4\" width={640} height={360} allowFullScreen={true} frameBorder=\"0\" />\n```\n\n----------------------------------------\n\nTITLE: Using Suspense for Multiple Content Areas in React\nDESCRIPTION: Example of using a single Suspense boundary to handle loading states for multiple content areas. This shows how to display a unified loading state while waiting for multiple components to load.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v13.0.0/guided-tour/rendering/loading-states.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * App.react.js\n */\n\nconst React = require('React');\nconst {Suspense} = require('React');\n\nfunction App() {\n  return (\n    // A LoadingGlimmer for *_all_* content is rendered via the Suspense fallback\n    <Suspense fallback={<LoadingGlimmer />}>\n      <MainContent />\n      <SecondaryContent /> {/* SecondaryContent can also suspend */}\n    </Suspense>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using usePreloadedQuery Hook for User Popover Component\nDESCRIPTION: Example of a React component implementing a user popover with the usePreloadedQuery hook, which consumes a preloaded query reference.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/migration-and-compatibility/relay-hooks-and-legacy-container-apis.md#2025-04-18_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nimport * as React from 'React';\nimport {graphql, usePreloadedQuery} from 'react-relay';\n\nexport default function UserPopover(props) {\n  const data = usePreloadedQuery(\n    graphql`\n      query UserPopoverQuery($id: ID!) {\n        user(id: $id) {\n          name\n        }\n      }\n    `,\n    props.queryRef,\n  );\n\n return <h1>{data.user?.name}</h1>;\n}\n```\n\n----------------------------------------\n\nTITLE: GraphQL Mutation Response for Ship Introduction\nDESCRIPTION: This JSON snippet provides a format of the expected response after executing a 'introduceShip' mutation. Shows the newly introduced ship details, linked faction, and the client mutation identifier.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-experimental/GraphQL-ServerSpecification.md#2025-04-18_snippet_14\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"introduceShip\": {\n    \"ship\": {\n      \"id\": \"U2hpcDo5\",\n      \"name\": \"B-Wing\"\n    },\n    \"faction\": {\n      \"name\": \"Alliance to Restore the Republic\"\n    },\n    \"clientMutationId\": \"abcde\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Querying for New Edge in GraphQL Mutation\nDESCRIPTION: This snippet shows how to query for a newly created edge in a mutation response, including the cursor and node data. This is useful for later adding the edge to a connection.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v13.0.0/guided-tour/list-data/updating-connections.md#2025-04-18_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst {graphql} = require('react-relay');\n\nconst createCommentMutation = graphql`\n  mutation CreateCommentMutation($input: CommentCreateData!) {\n    comment_create(input: $input) {\n      comment_edge {\n        cursor\n        node {\n          body {\n            text\n          }\n        }\n      }\n    }\n  }\n`;\n```\n\n----------------------------------------\n\nTITLE: Creating New Client-Only Types in GraphQL Schema for Relay\nDESCRIPTION: Demonstrates how to define entirely new client-only types using GraphQL syntax. Includes examples of creating an enum type, a regular type, and extending server types with client-only fields.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/guided-tour/updating-data/client-only-data.md#2025-04-18_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\n# You can define more than one type in a single file\nenum FetchStatus {\n  FETCHED\n  PENDING\n  ERRORED\n}\n\n\ntype FetchState {\n  # You can reuse client types to define other types\n  status: FetchStatus\n\n  # You can also reference regular server types\n  started_by: User!\n}\n\nextend type Item {\n  # You can extend server types with client-only types\n  fetch_state: FetchState\n}\n```\n\n----------------------------------------\n\nTITLE: Injecting a Custom Network Layer in JavaScript\nDESCRIPTION: Shows how to override the DefaultNetworkLayer by injecting a custom network layer. This example creates a MutationLoggingNetworkLayer that logs each mutation sent to the server.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-classic/Classic-APIReference-Relay.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar DefaultNetworkLayer = Relay.DefaultNetworkLayer;\n\nclass MutationLoggingNetworkLayer extends DefaultNetworkLayer {\n  sendMutation(mutation) {\n    // log the response or error (note that `mutation` is a promise)\n    mutation.then(\n      response => console.log(response),\n      error => console.error(error),\n    );\n    // Send the mutation using the default network implementation\n    return super.sendMutation(mutation);\n  }\n};\n\nRelay.injectNetworkLayer(new MutationLoggingNetworkLayer());\n```\n\n----------------------------------------\n\nTITLE: Using useFragment Hook in React-Relay\nDESCRIPTION: Example of a React component using the useFragment hook to consume GraphQL fragment data, replacing the legacy Fragment Container pattern.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/migration-and-compatibility/relay-hooks-and-legacy-container-apis.md#2025-04-18_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\nimport * as React from 'React';\nimport {graphql, useFragment} from 'react-relay';\n\nexport default function UserComponent(props: Props) {\n  const data = useFragment(\n    graphql`\n      fragment UserComponent_user on User {\n        name\n        profile_picture(scale: $scale) {\n          uri\n        }\n      }\n    `,\n    props.user,\n  );\n\n  return (\n    <>\n      <h1>{data.name}</h1>\n      <div>\n        <img src={data.profile_picture?.uri} />\n      </div>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Refreshing Queries using useQueryLoader in React\nDESCRIPTION: Demonstrates how to refresh a query using loadQuery with a network-only fetch policy to always get the latest data from the server\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/guided-tour/refetching/refreshing-queries.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nfunction App(props: Props) {\n  const [queryRef, loadQuery] = useQueryLoader(\n    AppQuery,\n    props.appQueryRef\n  );\n\n  const refresh = useCallback(() => {\n    const {variables} = props.appQueryRef;\n    loadQuery(variables, {fetchPolicy: 'network-only'});\n  }, [/* ... */]);\n\n  return (\n    <React.Suspense fallback=\"Loading query...\">\n      <MainContent\n        refresh={refresh}\n        queryRef={queryRef}\n      />\n    </React.Suspense>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Components and Plugins in React with JavaScript\nDESCRIPTION: This snippet imports essential components and plugins for a React project using Relay, including DocsRating and internal documentation plugins. These components facilitate documentation rating and access control based on environment, respectively.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v13.0.0/guided-tour/refetching/introduction.md#2025-04-18_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport DocsRating from '@site/src/core/DocsRating';\nimport {OssOnly, FbInternalOnly} from 'docusaurus-plugin-internaldocs-fb/internal';\n```\n\n----------------------------------------\n\nTITLE: Implementing useMutation Hook\nDESCRIPTION: Complete example of implementing a like button component using Relay's useMutation hook to execute the mutation.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/guided-tour/updating-data/graphql-mutations.md#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport type {FeedbackLikeData, LikeButtonMutation} from 'LikeButtonMutation.graphql';\n\nconst {useMutation, graphql} = require('react-relay');\n\nfunction LikeButton({\n  feedbackId: string,\n}) {\n  const [commitMutation, isMutationInFlight] = useMutation<LikeButtonMutation>(\n    graphql`\n      mutation LikeButtonMutation($input: FeedbackLikeData!) {\n        feedback_like(data: $input) {\n          feedback {\n            viewer_does_like\n            like_count\n          }\n        }\n      }\n    `\n  );\n\n  return <button\n    onClick={() => commitMutation({\n      variables: {\n        input: {id: feedbackId},\n      },\n    })}\n    disabled={isMutationInFlight}\n  >\n    Like\n  </button>\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering RelayEnvironmentProvider in React\nDESCRIPTION: This code snippet demonstrates how to render a `RelayEnvironmentProvider` component at the root of a React application. The `RelayEnvironmentProvider` makes the Relay Environment available to all descendant Relay components.  It takes an environment instance as a prop.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/guided-tour/rendering/environment.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n```js\n// App root\n\nconst {RelayEnvironmentProvider} = require('react-relay');\nconst Environment = require('MyEnvironment');\n\nfunction Root() {\n  return (\n    <RelayEnvironmentProvider environment={Environment}>\n      {/*... */}\n    </RelayEnvironmentProvider>\n  );\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Importing DocsRating Component from Core\nDESCRIPTION: This snippet imports the DocsRating component from the core library, which is used for rendering the documentation rating in a React component. Ensure that the '@site/src/core/DocsRating' module is accessible within the project structure.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/migration-and-compatibility/suspense-compatibility.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport DocsRating from '@site/src/core/DocsRating';\n```\n\n----------------------------------------\n\nTITLE: Querying Next Four Rebel Ships After Last Cursor\nDESCRIPTION: This GraphQL query attempts to retrieve the next four ships after the previous cursor.  Since there are no more ships it returns an empty list.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v13.0.0/guides/graphql-server-specification.md#2025-04-18_snippet_15\n\nLANGUAGE: graphql\nCODE:\n```\n\"\"\"\nquery RebelsQuery {\n  rebels {\n    name,\n    ships(first: 4 after: \"YXJyYXljb25uZWN0aW9uOjQ=\") {\n      edges {\n        cursor,\n        node {\n          name\n        }\n      }\n    }\n  }\n}\n\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Context-Aware Mock Resolver Implementation\nDESCRIPTION: Shows how to use context object in mock resolvers to return dynamic values based on field names, paths, and parent types\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/guides/testing-relay-components.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  String(context) {\n    if (context.name === 'zip') {\n      return '94025';\n    }\n    if (context.path != null && context.path.join('.') === 'node.actor.name') {\n      return 'Current Actor Name';\n    }\n    if (context.parentType === 'Image' && context.name === 'uri') {\n       return 'http://my-image.url';\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using useRefetchableFragment in ContactsList Component\nDESCRIPTION: This snippet shows how to use the useRefetchableFragment hook to refetch the fragment when the search string changes in the ContactsList component.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/tutorial/refetchable-fragments.md#2025-04-18_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport {useRefetchableFragment} from 'react-relay';\n\nfunction ContactsList({viewer}) {\n  const [data, refetch] = useRefetchableFragment(ContactsListFragment, viewer);\n  const [searchString, setSearchString] = useState('');\n  const onSearchStringChanged = (value) => {\n    setSearchString(value);\n    refetch({search: value});\n  };\n  return (\n    // ...\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Relay Compiler using yarn\nDESCRIPTION: This snippet shows how to install the Relay Compiler as a development dependency using `yarn`. The Relay Compiler is required for ahead-of-time compilation of Relay queries. It's added as a dev dependency since it's used during the build process.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/getting-started/installation-and-setup.md#2025-04-18_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\n\"yarn add --dev relay-compiler\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Relay Compiler\nDESCRIPTION: This code snippet shows how to configure the Relay Compiler in a relay.config.js file, detailing options such as source directory and schema location.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/getting-started/installation-and-setup.md#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// relay.config.js\nmodule.exports = {\n  // ...\n  // Configuration options accepted by the `relay-compiler` command-line tool and `babel-plugin-relay`.\n  src: \"./src\",\n  language: \"javascript\", // \"javascript\" | \"typescript\" | \"flow\"\n  schema: \"./data/schema.graphql\",\n  exclude: [\"**/node_modules/**\", \"**/__mocks__/**\", \"**/__generated__/**\"],\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Edge in Relay Runtime with JavaScript\nDESCRIPTION: This snippet shows how to create an edge using the `createEdge` method of `ConnectionHandler`, by passing the store, the connection record, the new node, and the edge type.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/api-reference/relay-runtime/store.md#2025-04-18_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\nconst user = store.get(userID);\nconst friends = ConnectionHandler.getConnection(user, 'FriendsFragment_friends');\nconst newFriend = store.get(newFriendId);\nconst edge = ConnectionHandler.createEdge(store, friends, newFriend, 'UserEdge');\n```\n\n----------------------------------------\n\nTITLE: GraphQL Query with Runtime Argument (GraphQL)\nDESCRIPTION: This GraphQL query `MyQuery` includes a `greet` field that takes a `salutation` argument. The query defines a variable `$salutation` of type `String!` which is then passed as an argument to the `greet` field.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/guides/relay-resolvers/field-arguments.md#2025-04-18_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\nquery MyQuery($salutation: String!) {\n  me {\n    greet(salutation: $salutation)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Babel Plugin for Relay Artifact Directory\nDESCRIPTION: This snippet demonstrates how to configure the Babel plugin in .babelrc to locate the Relay artifacts. This is required in addition to the package.json configuration to enable strict fragment reference type-information.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v13.0.0/guides/type-emission.md#2025-04-18_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"plugins\": [\n    [\"relay\", { \"artifactDirectory\": \"./src/__generated__\" }]\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Running Relay Compiler in Watch Mode\nDESCRIPTION: This command line snippet shows how to run the Relay Compiler in watch mode using Yarn. Watch mode automatically recompiles artifacts whenever changes are detected in your source code. Note: Requires watchman.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v13.0.0/getting-started/installation-and-setup.md#2025-04-18_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\n\"yarn run relay --watch\"\n```\n\n----------------------------------------\n\nTITLE: Adding Declarative Connection Handler in Relay Mutation\nDESCRIPTION: Modifies the mutation definition to include a connections variable and adds the @prependEdge directive to the commentEdge field for updating connections.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/tutorial/mutations-updates.md#2025-04-18_snippet_8\n\nLANGUAGE: JavaScript\nCODE:\n```\n  mutation StoryCommentsComposerPostMutation(\n    $id: ID!,\n    $text: String!,\n    $connections: [ID!]!,\n  ) {\n    postStoryComment(id: $id, text: $text) {\n      commentEdge\n        @prependEdge(connections: $connections)\n      {\n        node {\n          id\n          text\n        }\n      }\n    }\n  }\n```\n\n----------------------------------------\n\nTITLE: Including DocsRating Component in JSX\nDESCRIPTION: This snippet shows how to import and use a DocsRating component, which is likely used to allow users to rate documentation pages. The component is imported from a specific path and then rendered in the JSX.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/principles-and-architecture/videos.md#2025-04-18_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport DocsRating from '@site/src/core/DocsRating';\n\n<DocsRating />\n```\n\n----------------------------------------\n\nTITLE: Implementing a Semantically Non-Null Relay Resolver Field\nDESCRIPTION: Example of defining a Relay resolver field with the @semanticNonNull directive, which indicates the field is non-nullable in the semantic sense while still allowing for error handling.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/guides/relay-resolvers/errors.md#2025-04-18_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * @RelayResolver RelayExample.semantic_non_null_field: String @semanticNonNull\n */\nexport function semantic_non_null_field(\n  model: RelayExampleModel,\n): string {\n  return model.someField ?? 'field was null, this is the default';\n}\n```\n\n----------------------------------------\n\nTITLE: Defining EntryPointContainer React Component\nDESCRIPTION: A React component that handles rendering of preloaded EntryPoints. It accepts an entryPointReference from loadEntryPoint or useEntryPointLoader hook, and additional runtime props that will be passed to the Component.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v13.0.0/api-reference/entrypoint-apis/entrypoint-container.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nfunction EntryPointContainer({\n  entryPointReference,\n  props,\n}: {\n  +entryPointReference: PreloadedEntryPoint<TEntryPointComponent>,\n  +props: TRuntimeProps,\n}): ReactElement\n```\n\n----------------------------------------\n\nTITLE: Defining Local Fragment Variables with @argumentDefinitions in Relay\nDESCRIPTION: Example of a component using @argumentDefinitions to declare a local fragment variable. This allows for fragment reuse without depending on global query variables.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/guided-tour/rendering/variables.md#2025-04-18_snippet_5\n\nLANGUAGE: js\nCODE:\n```\n/**\n * Declare a fragment that accepts arguments with @argumentDefinitions\n */\n\nfunction TaskView(props) {\n  const data = useFragment(\n    graphql`\n      fragment TaskView_task on Task\n        @argumentDefinitions(showDetailedResults: {type: \"Boolean!\"}) {\n        name\n        is_completed\n        ... @include(if: $showDetailedResults) {\n          description\n        }\n      }\n    `,\n    props.task,\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Relay Resolver Field with Flow Syntax in TypeScript\nDESCRIPTION: This snippet shows how to define a Relay resolver field using Flow syntax in TypeScript. It imports the type for the object and uses the function name as the field name.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/guides/relay-resolvers/defining-fields.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport {TypeName} from 'TypeObject';\n\n/**\n * @RelayResolver\n */\nexport function fieldName(user: TypeName): string {\n  return user.name;\n}\n```\n\n----------------------------------------\n\nTITLE: Refetching Rebels Using Node ID\nDESCRIPTION: This query demonstrates how to refetch an object using its globally unique ID through the 'node' field, a key concept in Relay's object identification system.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/guides/graphql-server-specification.md#2025-04-18_snippet_2\n\nLANGUAGE: graphql\nCODE:\n```\nquery RebelsRefetchQuery {\n  node(id: \"RmFjdGlvbjox\") {\n    id\n    ... on Faction {\n      name\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Embedding YouTube Video in JSX\nDESCRIPTION: This code snippet demonstrates how to embed a YouTube video using an iframe in JSX. It sets the video source, dimensions, and various attributes for proper display and functionality.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/principles-and-architecture/videos.md#2025-04-18_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<iframe src=\"https://www.youtube-nocookie.com/embed/lhVGdErZuN4\" width={640} height={360} allowFullScreen={true} frameBorder=\"0\" />\n```\n\n----------------------------------------\n\nTITLE: Implementing Suspense in a React App Component\nDESCRIPTION: Shows how to use Suspense to wrap a main content component that may suspend, rendering a loading glimmer as a fallback.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/guided-tour/rendering/loading-states.md#2025-04-18_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n/**\n * App.react.js\n */\n\nconst React = require('React');\nconst {Suspense} = require('React');\n\nfunction App() {\n  return (\n    // LoadingGlimmer is rendered via the Suspense fallback\n    <Suspense fallback={<LoadingGlimmer />}>\n      <MainContent /> {/* MainContent may suspend */}\n    </Suspense>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Importing React Components\nDESCRIPTION: This snippet imports React components for documentation purposes. It imports `DocsRating` for rating the documentation page and `OssOnly` and `FbInternalOnly` for controlling content visibility based on the environment.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/guided-tour/reusing-cached-data/availability-of-data.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport DocsRating from '@site/src/core/DocsRating';\nimport {OssOnly, FbInternalOnly} from 'docusaurus-plugin-internaldocs-fb/internal';\n```\n\n----------------------------------------\n\nTITLE: Importing Custom Components for Relay Documentation\nDESCRIPTION: This code snippet imports custom components used for enhancing the documentation page. It includes a component for rating the documentation and components for differentiating between open-source and Facebook-internal content.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/guided-tour/managing-data-outside-react/reading-queries.md#2025-04-18_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport DocsRating from '@site/src/core/DocsRating';\nimport {OssOnly, FbInternalOnly} from 'docusaurus-plugin-internaldocs-fb/internal';\n```\n\n----------------------------------------\n\nTITLE: Defining Fragment for Actor\nDESCRIPTION: This snippet defines a GraphQL fragment named 'PosterDetailsHovercardContentsBodyFragment' which selects fields from the 'Actor' interface, allowing the inclusion of common actor details in queries.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/tutorial/interfaces-polymorphism.md#2025-04-18_snippet_4\n\nLANGUAGE: graphql\nCODE:\n```\nfragment PosterDetailsHovercardContentsBodyFragment on Actor {\n  name\n  joined\n  profilePicture {\n    ...ImageFragment\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Inconsistent Server Response Example in GraphQL\nDESCRIPTION: This GraphQL query illustrates an inconsistent server response where the same user ID has different values for the 'name' field in different parts of the response.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/debugging/why-null.md#2025-04-18_snippet_2\n\nLANGUAGE: graphql\nCODE:\n```\n{\n  me {\n    id: 1\n    name: \"Alice\"\n  }\n  me_elsewhere_in_the_graph {\n    id: 1 # Note this is the same as the `me` field above...\n    name: null\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Error Message for Disallowed ID Field Type in Relay\nDESCRIPTION: Example of the error message thrown by the Relay compiler when an `id` field uses a type other than `ID` or `ID!`, which prevents Relay from properly identifying entities.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/debugging/disallowed-id-types-error.md#2025-04-18_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nDisallowed type `String` of field `id` on parent type `Foo` cannot be used by Relay to identify entities\n```\n\n----------------------------------------\n\nTITLE: Querying User Data with GraphQL Variables - GraphQL\nDESCRIPTION: This snippet demonstrates how to define a GraphQL query that utilizes variables to fetch user data. It specifies the user ID as a variable to retrieve the user's details dynamically.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/guided-tour/rendering/variables.md#2025-04-18_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nquery UserQuery($id: ID!) {\n  # The value of $id is used as input to the user() call:\n  user(id: $id) {\n    id\n    name\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Garbage Collection Scheduler in Relay\nDESCRIPTION: Shows how to configure a custom garbage collection scheduler function for the Relay Store. The scheduler determines when garbage collection should run, allowing for customized collection timing.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v13.0.0/guided-tour/reusing-cached-data/presence-of-data.md#2025-04-18_snippet_1\n\nLANGUAGE: js\nCODE:\n```\n// Sample scheduler function\n// Accepts a callback and schedules it to run at some future time.\nfunction gcScheduler(run: () => void) {\n  resolveImmediate(run);\n}\n\nconst store = new Store(source, {gcScheduler});\n```\n\n----------------------------------------\n\nTITLE: Using ConnectionHandler for Mutation Updates\nDESCRIPTION: Example demonstrating how to use ConnectionHandler APIs to access connection records in mutation updater functions.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/guided-tour/list-data/updating-connections.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst {ConnectionHandler} = require('relay-runtime');\n\nfunction updater(store: RecordSourceSelectorProxy) {\n  // Get the connection ID\n  const connectionID = ConnectionHandler.getConnectionID(\n    storyID, // passed as input to the mutation/subscription\n    'StoryComponent_story_comments_connection',\n  );\n\n  // Get the connection record\n  const connectionRecord = store.get(connectionID);\n\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Single Artifact Directory in package.json for Relay\nDESCRIPTION: This snippet shows how to configure the Relay compiler in package.json to use a single artifact directory. This is necessary to enable strict fragment reference type-information.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v13.0.0/guides/type-emission.md#2025-04-18_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  // package.json\n  \"relay\": {\n    \"artifactDirectory\": \"./src/__generated__\",\n    ...\n  },\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Defining GraphQL Fragment for Author Details\nDESCRIPTION: Demonstrates how to define a GraphQL fragment that specifies data requirements for an author's details, including name and photo URL.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/principles-and-architecture/thinking-in-relay.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst authorDetailsFragment = graphql`\n  fragment AuthorDetails_author on Author {\n    name\n    photo {\n      url\n    }\n  }\n`;\n```\n\n----------------------------------------\n\nTITLE: Using Variables in Relay Component\nDESCRIPTION: Shows how to use variables in a Relay component when querying a connection with filters.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/guided-tour/list-data/refetching-connections.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nfunction FriendsListComponent(props: Props) {\n  const userRef = props.userRef;\n\n  const {data, ...} = usePaginationFragment(\n    graphql`\n      fragment FriendsListComponent_user on User {\n        name\n        friends(\n          order_by: $orderBy,\n          search_term: $searchTerm,\n          after: $cursor,\n          first: $count,\n        ) @connection(key: \"FriendsListComponent_user_friends_connection\") {\n          edges {\n            node {\n              name\n              age\n            }\n          }\n        }\n      }\n    `,\n    userRef,\n  );\n\n  return (...);\n}\n```\n\n----------------------------------------\n\nTITLE: Comparing Fragment and Query GraphQL Syntax\nDESCRIPTION: Demonstrates how queries and fragments can have identical reader ASTs in Relay, showing equivalent ways to request the same data.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/glossary/glossary.md#2025-04-18_snippet_3\n\nLANGUAGE: graphql\nCODE:\n```\nquery Foo {\n  actor { name }\n}\n\nfragment Bar on Query {\n  actor { name }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Query Cache Expiration Time\nDESCRIPTION: Shows how to configure the query cache expiration time when creating a new Relay Store. This affects when queries are considered stale based on time.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/guided-tour/reusing-cached-data/staleness-of-data.md#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst store = new Store(source, {queryCacheExpirationTime: 5 * 60 * 1000 });\n```\n\n----------------------------------------\n\nTITLE: Using @waterfall Directive for Server Type Edge (TypeScript)\nDESCRIPTION: Shows how to use the @waterfall directive when selecting a client to server edge field in a GraphQL query.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/guides/relay-resolvers/return-types.md#2025-04-18_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nfunction Post() {\n  const data = useLazyLoadQuery(graphql`\n    query PostQuery {\n      post {\n        author @waterfall {\n          name\n        }\n      }\n    }`, {});\n  return <p>{data.post.author.name}</p>;\n}\n```\n\n----------------------------------------\n\nTITLE: GraphQL Query with Linked Records Example\nDESCRIPTION: Demonstrates the concept of linked records in GraphQL by showing a query that traverses multiple nested objects. This example shows how to query from viewer down to an Application entity.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v13.0.0/glossary/glossary.md#2025-04-18_snippet_9\n\nLANGUAGE: graphql\nCODE:\n```\nquery MyQuery { viewer { account_user { active_instant_game { id } } } }\n```\n\n----------------------------------------\n\nTITLE: Defining Relay GraphQL Fragment and Query\nDESCRIPTION: Creates a GraphQL fragment for User profile data and a simple query named 'Whoopsie'. Uses the graphql tag from relay-runtime to define the operations.\nSOURCE: https://github.com/facebook/relay/blob/main/packages/babel-plugin-relay/__tests__/fixtures/unexpected-operation.error.txt#2025-04-18_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst {graphql} = require('relay-runtime');\n\nconst testFragment = graphql`\n  fragment CompatProfile_user on User {\n    name\n  }\n\n  query Whoopsie {\n    name\n  }\n`;\n```\n\n----------------------------------------\n\nTITLE: Rendering DocsRating Component - JavaScript\nDESCRIPTION: This snippet is responsible for rendering the DocsRating component within the documentation. It allows users to give feedback or ratings on the guide, which can be useful for determining the effectiveness of the content.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/guided-tour/reusing-cached-data/availability-of-data.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n<DocsRating />\n```\n\n----------------------------------------\n\nTITLE: REST Data Fetching Example\nDESCRIPTION: Demonstrates traditional REST approach for fetching a list of stories requiring n+1 requests - one for the list and n requests for individual stories.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/principles-and-architecture/thinking-in-graphql.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nrest.get('/stories').then(stories =>\n  Promise.all(stories.map(story =>\n    rest.get(story.href)\n  ))\n).then(stories => {\n  console.log(stories);\n});\n```\n\n----------------------------------------\n\nTITLE: Creating React App with NPM and Yarn\nDESCRIPTION: Initialize a new React application using Create React App, demonstrating installation commands for both NPM and Yarn package managers\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v13.0.0/getting-started/step-by-step-guide.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# NPM\nnpx create-react-app your-app-name\n\n# Yarn\nyarn create react-app your-app-name\n```\n\n----------------------------------------\n\nTITLE: Setting Linked Records in Relay Store\nDESCRIPTION: Example of setting linked records in the Relay Store using the setLinkedRecords method of RecordProxy. It can optionally take arguments for fields with parameters.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/api-reference/relay-runtime/store.md#2025-04-18_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nconst rootField = store.getRootField('rootField');\nconst newNode = store.create(/* ... */);\nconst newNodes = [...rootField.getLinkedRecords('nodes'), newNode];\nrootField.setLinkedRecords(newNodes, 'nodes');\n```\n\n----------------------------------------\n\nTITLE: Declaring Local Fragment Arguments with @argumentDefinitions\nDESCRIPTION: Demonstrates how to declare variables scoped locally to a fragment using the @argumentDefinitions directive in Relay.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/guided-tour/rendering/variables.md#2025-04-18_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nfunction PictureComponent(props) {\n  const data = useFragment(\n    graphql`\n      fragment PictureComponent_user on User\n        @argumentDefinitions(scale: {type: \"Float!\"}) {\n        profile_picture(scale: $scale) {\n          uri\n        }\n      }\n    `,\n    props.user,\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Documentation Rating Component in Relay Guide\nDESCRIPTION: This code snippet renders the DocsRating component, which is likely used to collect user feedback on the documentation quality for the Relay 'Reading Queries' guide.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/guided-tour/managing-data-outside-react/reading-queries.md#2025-04-18_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<DocsRating />\n```\n\n----------------------------------------\n\nTITLE: Configuring Query Cache Expiration in Relay\nDESCRIPTION: Example of configuring the query cache expiration time when creating a new Relay Store. This setting determines when cached data becomes stale based on time.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/guided-tour/reusing-cached-data/staleness-of-data.md#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst store = new Store(source, {queryCacheExpirationTime: 5 * 60 * 1000 });\n```\n\n----------------------------------------\n\nTITLE: Invalidating the Relay Store\nDESCRIPTION: This snippet demonstrates how to globally invalidate the Relay Store using the invalidateStore method. All data will be treated as stale after this point until refetched.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/api-reference/relay-runtime/store.md#2025-04-18_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nstore.invalidateStore();\n```\n\n----------------------------------------\n\nTITLE: Fragment Component Type Example in Flow/TypeScript\nDESCRIPTION: Illustrates type emission for fragment components, showing how fragment references are typed and used with useFragment.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/guides/type-emission.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nexport default ExampleFragmentComponent(props) {\n  const data = useFragment(\n    graphql`\n      fragment ExampleFragmentComponent_artist on Artist {\n        biography\n      }\n    `,\n    props.artist,\n  );\n\n  return <div>About the artist: {props.artist.biography}</div>;\n}\n```\n\n----------------------------------------\n\nTITLE: GraphQL Query and Fragment Definitions\nDESCRIPTION: Shows examples of equivalent query and fragment definitions in GraphQL syntax. Demonstrates how a query and fragment can have identical reader ASTs when they select the same fields.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/glossary/glossary.md#2025-04-18_snippet_4\n\nLANGUAGE: graphql\nCODE:\n```\nquery Foo {\n  actor { name }\n}\n```\n\nLANGUAGE: graphql\nCODE:\n```\nfragment Bar on Query {\n  actor { name }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Container Prop for Relay.Renderer in JavaScript\nDESCRIPTION: Specifies the Container prop type for Relay.Renderer, which must be a valid RelayContainer. Relay will attempt to fulfill its data requirements before rendering it.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-classic/Classic-APIReference-Renderer.md#2025-04-18_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nContainer: RelayContainer\n```\n\n----------------------------------------\n\nTITLE: RecordSourceSelectorProxy Interface Definition\nDESCRIPTION: TypeScript interface definition for RecordSourceSelectorProxy, which provides methods to manipulate the Relay store.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/api-reference/relay-runtime/store.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ninterface RecordSourceSelectorProxy {\n  create(dataID: string, typeName: string): RecordProxy;\n  delete(dataID: string): void;\n  get(dataID: string): ?RecordProxy;\n  getRoot(): RecordProxy;\n  getRootField(fieldName: string): ?RecordProxy;\n  getPluralRootField(fieldName: string): ?Array<?RecordProxy>;\n  invalidateStore(): void;\n}\n```\n\n----------------------------------------\n\nTITLE: Access Connection using ConnectionHandler.getConnection\nDESCRIPTION: Demonstrates accessing a connection record through a parent record using ConnectionHandler.getConnection in Relay.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v13.0.0/guided-tour/list-data/updating-connections.md#2025-04-18_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst {ConnectionHandler} = require('relay-runtime');\n\nfunction updater(store: RecordSourceSelectorProxy) {\n  // Get parent story record\n  // storyID is passed as input to the mutation/subscription\n  const storyRecord = store.get(storyID);\n\n  // Get the connection record from the parent\n  const connectionRecord = ConnectionHandler.getConnection(\n    storyRecord,\n    'StoryComponent_story_comments_connection',\n  );\n\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Babel Plugin for Relay Artifact Directory in .babelrc\nDESCRIPTION: This snippet demonstrates how to configure the Babel plugin in .babelrc to locate the Relay artifacts. It specifies the artifactDirectory for the Relay plugin.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/guides/type-emission.md#2025-04-18_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"plugins\": [\n    [\"relay\", { \"artifactDirectory\": \"./src/__generated__\" }]\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Relay Compiler Playground\nDESCRIPTION: Commands to build and test the Relay Compiler Playground. Uses wasm-pack to build for NodeJS and yarn for running tests.\nSOURCE: https://github.com/facebook/relay/blob/main/compiler/crates/relay-compiler-playground/README.md#2025-04-18_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncd relay-compiler-playground\nwasm-pack build --target nodejs # NOTE: We build for node in tests and web to publish\nyarn\nyarn test\n```\n\n----------------------------------------\n\nTITLE: Video Iframe Embeds in React\nDESCRIPTION: Collection of iframe elements used to embed various conference presentation videos with consistent styling and dimensions.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/principles-and-architecture/videos.md#2025-04-18_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<iframe src=\"https://www.youtube-nocookie.com/embed/lhVGdErZuN4\" width={640} height={360} allowFullScreen={true} frameBorder=\"0\" />\n```\n\nLANGUAGE: jsx\nCODE:\n```\n<iframe src=\"https://www.youtube-nocookie.com/embed/Tl0S7QkxFE4\" width={640} height={360} allowFullScreen={true} frameBorder=\"0\" />\n```\n\nLANGUAGE: jsx\nCODE:\n```\n<iframe src=\"https://www.youtube-nocookie.com/embed/WxPtYJRjLL0?start=215\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen width=\"640\" height=\"360\" frameBorder=\"0\"></iframe>\n```\n\nLANGUAGE: jsx\nCODE:\n```\n<iframe src=\"https://www.facebook.com/plugins/video.php?href=https%3A%2F%2Fwww.facebook.com%2FFacebookforDevelopers%2Fvideos%2F10154614710193553%2F&show_text=0&width=640\" width={640} height={360} frameBorder=\"0\" allowFullScreen={true} />\n```\n\nLANGUAGE: jsx\nCODE:\n```\n<iframe width={640} height={360} src=\"https://www.youtube-nocookie.com/embed/OEfUBN9dAI8\" frameBorder=\"0\" allowFullScreen={true} />\n```\n\nLANGUAGE: jsx\nCODE:\n```\n<iframe width={640} height={360} src=\"https://www.youtube-nocookie.com/embed/UBGzsb2UkeY\" frameBorder=\"0\" allowFullScreen={true} />\n```\n\nLANGUAGE: jsx\nCODE:\n```\n<iframe width={640} height={360} src=\"https://www.youtube-nocookie.com/embed/ww5UQ50oHok\" frameBorder=\"0\" allowFullScreen={true} />\n```\n\n----------------------------------------\n\nTITLE: Declaring a GraphQL Mutation in Relay\nDESCRIPTION: Example of defining a GraphQL mutation using Relay's graphql tag, allowing the mutation to be used with Relay's mutation APIs.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/guided-tour/updating-data/graphql-mutations.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst {graphql} = require('react-relay');\n\nconst feedbackLikeMutation = graphql`\n  mutation FeedbackLikeMutation($input: FeedbackLikeData!) {\n    feedback_like(data: $input) {\n      feedback {\n        id\n        viewer_does_like\n        like_count\n      }\n    }\n  }\n`;\n```\n\n----------------------------------------\n\nTITLE: Basic Fragment with Required Field in TypeScript\nDESCRIPTION: Example showing a basic component using useFragment hook with a required name field\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/guides/alias-directive.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction MyViewer({viewerKey}) {\n  const {name} = useFragment(graphql`\n    fragment MyViewer on Viewer {\n      name @required(action: THROW)\n    }`, viewerKey);\n\n  return `My name is ${name}. That's ${name.length} letters long!`;\n}\n```\n\n----------------------------------------\n\nTITLE: Importing React Components in Markdown/MDX\nDESCRIPTION: Import statements for Docusaurus components and custom React components used in the documentation page.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/community/learning-resources.md#2025-04-18_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport useBaseUrl from '@docusaurus/useBaseUrl';\nimport DocsRating from '@site/src/core/DocsRating';\nimport {FbInternalOnly, OssOnly} from 'docusaurus-plugin-internaldocs-fb/internal';\n```\n\n----------------------------------------\n\nTITLE: GraphQL Story Like Mutation\nDESCRIPTION: Example of a GraphQL mutation for liking a story, demonstrating how to define inputs and specify fields to re-fetch after the mutation.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/principles-and-architecture/thinking-in-graphql.md#2025-04-18_snippet_13\n\nLANGUAGE: graphql\nCODE:\n```\nmutation StoryLike($storyID: String) {\n   storyLike(storyID: $storyID) {\n     likeCount\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: GraphQL query for linked records with argument\nDESCRIPTION: An example GraphQL query that retrieves a set of nodes under the rootField.  The nodes accept a first argument.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v13.0.0/api-reference/relay-runtime/store.md#2025-04-18_snippet_26\n\nLANGUAGE: graphql\nCODE:\n```\nrootField {\n  nodes(first: $count) {\n    # ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Package.json Relay Configuration\nDESCRIPTION: Configuration for Relay compiler and build scripts in package.json.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/getting-started/step-by-step-guide.md#2025-04-18_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"scripts\": {\n    \"start\": \"yarn run relay && react-scripts start\",\n    \"build\": \"yarn run relay && react-scripts build\",\n    \"relay\": \"yarn run relay-compiler\"\n  },\n  \"relay\": {\n    \"src\": \"./src/\",\n    \"schema\": \"./schema.graphql\",\n    \"language\": \"javascript\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Example Field Not Found Error in Relay\nDESCRIPTION: Example of a Relay compiler error message showing a field not found error with a suggested correction from 'mail' to 'email'\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/error-reference/unknown-field.md#2025-04-18_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nError in the project `some_project`: ✖︎ The type `UserInfo` has no field `mail`. Did you mean `email`?\n```\n\n----------------------------------------\n\nTITLE: Rendering DocsRating Component in JSX\nDESCRIPTION: This snippet shows how to render the DocsRating component, which is likely used to display a rating interface for the documentation page.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/guided-tour/managing-data-outside-react/reading-fragments.md#2025-04-18_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<DocsRating />\n```\n\n----------------------------------------\n\nTITLE: Using @refetchable with Directives\nDESCRIPTION: Shows how to use the @refetchable directive with additional test directives in a fragment component.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/api-reference/graphql/graphql-directives.md#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\ngraphql`\n  fragment FriendsListComponent_user on User\n  @refetchable(\n    queryName: \"FriendsListFetchQuery\"\n    directives: [\"@relay_test_operation\"]\n  ) {\n    ...\n  }\n`;\n```\n\n----------------------------------------\n\nTITLE: Defining a GraphQL Query with Fragment Spread\nDESCRIPTION: This GraphQL query demonstrates how to use a fragment spread. The '...Component_name' syntax spreads the Component_name fragment into the query.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/glossary/glossary.md#2025-04-18_snippet_4\n\nLANGUAGE: graphql\nCODE:\n```\nquery ComponentQuery {\n  viewer {\n    account_user {\n      ...Component_name\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing useBaseUrl from Docusaurus in JSX\nDESCRIPTION: Import statement for the useBaseUrl hook from Docusaurus, which is used to create relative URLs to documentation resources.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v17.0.0/api-reference/types/SelectorStoreUpdater.md#2025-04-18_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport useBaseUrl from '@docusaurus/useBaseUrl';\n```\n\n----------------------------------------\n\nTITLE: REST Response Caching Implementation\nDESCRIPTION: Implements a basic URI-based response cache for REST requests using a Map.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/principles-and-architecture/thinking-in-graphql.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nvar _cache = new Map();\nrest.get = uri => {\n  if (!_cache.has(uri)) {\n    _cache.set(uri, fetch(uri));\n  }\n  return _cache.get(uri);\n};\n```\n\n----------------------------------------\n\nTITLE: GraphQL Node Interface Example\nDESCRIPTION: Demonstrates the Node interface implementation in GraphQL, which provides a stable and unique ID for refetchable types\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/tutorial/refetchable-fragments.md#2025-04-18_snippet_8\n\nLANGUAGE: graphql\nCODE:\n```\ntype Person implements Node {\n  id: ID!\n  ...\n}\n\ninterface Node {\n  id: ID!\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Record Type in Relay Store\nDESCRIPTION: The `getType` method returns the GraphQL schema-defined type of the current record, aiding in schema management and type validation.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/api-reference/relay-runtime/store.md#2025-04-18_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nconst type = user.getType();  // User\n```\n\n----------------------------------------\n\nTITLE: Configuring Vite for Relay\nDESCRIPTION: Configuration to enable Relay plugin in Vite build system\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/getting-started/quick-start.md#2025-04-18_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from 'vite'\nimport react from '@vitejs/plugin-react'\nimport relay from 'vite-plugin-relay';\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    relay\n  ],\n})\n```\n\n----------------------------------------\n\nTITLE: Subscription with Component Fragments\nDESCRIPTION: Shows how to include component fragments in a subscription to automatically refresh components when data changes.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/guided-tour/updating-data/graphql-subscriptions.md#2025-04-18_snippet_4\n\nLANGUAGE: graphql\nCODE:\n```\nsubscription FeedbackLikeSubscription($input: FeedbackLikeSubscribeData!) {\n  feedback_like_subscribe(data: $input) {\n    feedback {\n      ...FeedbackDisplay_feedback\n      ...FeedbackDetail_feedback\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic GraphQL Friends Fragment Example\nDESCRIPTION: Example GraphQL fragment showing how to query friend connections with edge properties\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/tutorial/connections-pagination.md#2025-04-18_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nfragment FriendsFragment1 on Viewer {\n  friends {\n    since // a property of the edge\n    node {\n      name // a property of the friend itself\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: GraphQL Query Using Variable as Argument\nDESCRIPTION: GraphQL query implementation using the posterID variable as a node argument\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/tutorial/queries-2.md#2025-04-18_snippet_4\n\nLANGUAGE: graphql\nCODE:\n```\nconst PosterDetailsHovercardContentsQuery = graphql`\n  query PosterDetailsHovercardContentsQuery($posterID: ID!) {\n    node(\n      id: $posterID\n    ) {\n    ... on Actor {\n      ...PosterDetailsHovercardContentsBodyFragment\n      }\n    }\n  }\n`;\n```\n\n----------------------------------------\n\nTITLE: Retrieving Plural Root Field from Relay Store\nDESCRIPTION: Illustrates how to retrieve a plural root field from the Relay store using the getPluralRootField method of RecordSourceSelectorProxy.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/api-reference/relay-runtime/store.md#2025-04-18_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst nodes = store.getPluralRootField('nodes');\n```\n\n----------------------------------------\n\nTITLE: Basic GraphQL Response Caching\nDESCRIPTION: Initial approach to caching GraphQL queries using the query text as a cache key\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v15.0.0/principles-and-architecture/thinking-in-graphql.md#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nvar _cache = new Map();\ngraphql.get = queryText => {\n  if (!_cache.has(queryText)) {\n    _cache.set(queryText, fetchGraphQL(queryText));\n  }\n  return _cache.get(queryText);\n};\n```\n\n----------------------------------------\n\nTITLE: GraphQL Cache Implementation\nDESCRIPTION: Basic GraphQL caching implementation using query text as cache key.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v16.0.0/principles-and-architecture/thinking-in-graphql.md#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nvar _cache = new Map();\ngraphql.get = queryText => {\n  if (!_cache.has(queryText)) {\n    _cache.set(queryText, fetchGraphQL(queryText));\n  }\n  return _cache.get(queryText);\n};\n```\n\n----------------------------------------\n\nTITLE: Delete Record Mutation\nDESCRIPTION: Demonstrates using the @deleteRecord directive to remove items from the store.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/guided-tour/updating-data/graphql-mutations.md#2025-04-18_snippet_5\n\nLANGUAGE: graphql\nCODE:\n```\nmutation DeletePostMutation($input: DeletePostData!) {\n  delete_post(data: $input) {\n    deleted_post {\n      id @deleteRecord\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Field Value in Relay Store Record\nDESCRIPTION: Shows how to set the value of a field in a Relay store record using the setValue method of RecordProxy.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/api-reference/relay-runtime/store.md#2025-04-18_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nviewer.setValue('New Name', 'name');\n```\n\n----------------------------------------\n\nTITLE: Embedding React Component for Docs Rating\nDESCRIPTION: JSX import statement for a documentation rating component used at the bottom of the page.\nSOURCE: https://github.com/facebook/relay/blob/main/website/docs/principles-and-architecture/videos.md#2025-04-18_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport DocsRating from '@site/src/core/DocsRating';\n```\n\n----------------------------------------\n\nTITLE: Manual Installation of React and Relay\nDESCRIPTION: This snippet demonstrates the manual installation of React and Relay using yarn or npm package managers.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v14.0.0/getting-started/installation-and-setup.md#2025-04-18_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nyarn add react react-dom react-relay\n```\n\n----------------------------------------\n\nTITLE: Root Field Access Example\nDESCRIPTION: Example demonstrating how to access a root field from the store.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/api-reference/relay-runtime/store.md#2025-04-18_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst viewer = store.getRootField('viewer');\n```\n\n----------------------------------------\n\nTITLE: Retrieving GraphQL Query String\nDESCRIPTION: Method that returns the string representation of a GraphQL query.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-classic/Classic-Interfaces-QueryRequest.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ngetQueryString(): string\n```\n\n----------------------------------------\n\nTITLE: Using Relay with Babel Macros\nDESCRIPTION: Alternative setup using Relay with babel-plugin-macros.\nSOURCE: https://github.com/facebook/relay/blob/main/website/versioned_docs/version-v18.0.0/getting-started/installation-and-setup.md#2025-04-18_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst graphql = require('babel-plugin-relay/macro');\n```"
  }
]