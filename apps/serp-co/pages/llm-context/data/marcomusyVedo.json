[
  {
    "owner": "marcomusy",
    "repo": "vedo",
    "content": "TITLE: Loading and Visualizing a 3D Mesh (Bunny) with vedo\nDESCRIPTION: Loads a 3D bunny model from vedo's data URL and creates a Mesh object. The mesh is named \"Mr. Rabbit\" and its quality is computed with a \"Reds\" colormap applied to visualize quality metrics.\nSOURCE: https://github.com/marcomusy/vedo/blob/master/examples/notebooks/test_types.ipynb#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom vedo import dataurl, Mesh\nmesh = Mesh(dataurl + \"bunny.obj\")\nmesh.name = \"Mr. Rabbit\"\nmesh.compute_quality().cmap(\"Reds\")\nmesh\n```\n\n----------------------------------------\n\nTITLE: Computing Signed Distance Between Meshes in vedo\nDESCRIPTION: This code creates two 3D meshes (sphere and cube), calculates the signed distance from the sphere to the cube, and visualizes the result using a color map. The distance values are stored as scalar data on the sphere mesh and displayed with a color bar.\nSOURCE: https://github.com/marcomusy/vedo/blob/master/examples/notebooks/distance2mesh.ipynb#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n\"\"\"Compute the (signed) distance from one mesh to another.\"\"\"\nfrom vedo import *\n\nsettings.default_backend = 'vtk' # or 2d, ipyvtk, or vtk\n\ns1 = Sphere().flat() # flat shading\ns2 = Cube(pos=(3,0,0), c='white', alpha=0.2)\n\n# add scalars to the sphere that correspond to their distance from the cube\ns1.distance_to(s2, signed=True, invert=False)\ns1.cmap(\"magma_r\").add_scalarbar()\n\nprint(\"Distance:\", s1.pointdata[\"Distance\"])\nshow(s1, s2, viewup='z', axes=1, bg='bb')\n```\n\n----------------------------------------\n\nTITLE: Loading and Visualizing a 3D Volume (Embryo) with vedo\nDESCRIPTION: Loads a 3D volume dataset of an embryo from a TIFF file and creates a Volume object. The volume is named \"Wild-type Embryo\" for identification in the visualization.\nSOURCE: https://github.com/marcomusy/vedo/blob/master/examples/notebooks/test_types.ipynb#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom vedo import dataurl, Volume\nvol = Volume(dataurl+\"embryo.tif\")\nvol.name = \"Wild-type Embryo\"\nvol\n```\n\n----------------------------------------\n\nTITLE: Creating PCA Ellipsoid Visualization in Python using Vedo\nDESCRIPTION: Creates a 3D visualization of a PCA ellipsoid containing 50% of a random point cloud. The code generates random points, calculates the PCA ellipsoid, identifies points inside and outside the ellipsoid, and visualizes them in different colors.\nSOURCE: https://github.com/marcomusy/vedo/blob/master/examples/notebooks/pca.ipynb#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n\"\"\"\\nDraw the PCA (Principal Component Analysis) ellipsoid that contains\\n50% of a cloud of a pointcloud, then check how many points are inside the surface.\\n\"\"\"\\nfrom vedo import *\\nimport numpy as np\\n\\nsettings.default_backend = 'k3d'  # or k3d, ipyvtk, trame, or vtk\\n\\nplt = Plotter(size=(1000,500))\\n\\npts = np.random.randn(5000, 3) * [3,2,1] # random gaussian point cloud\\n\\nelli = pca_ellipsoid(pts, pvalue=0.5)    # group of [ellipse, 3 axes]\\nplt += elli\\n\\nipts = elli.inside_points(pts)           # extract points inside mesh\\nopts = elli.inside_points(pts, invert=True)\\nplt += Points(ipts, c=\"g\")\\nplt += Points(opts, c=\"r\")\\n\\nprintc(\"inside  points #\", ipts.npoints, c='g')\\nprintc(\"outside points #\", opts.npoints, c='r')\\nprintc(\"asphericity:\", elli.asphericity())\\nplt.show(axes=1)\n```\n\n----------------------------------------\n\nTITLE: Shrinking Mesh Triangulation with Vedo in Python\nDESCRIPTION: This snippet loads a teapot mesh, applies a shrink operation to make its interior visible, adds a sphere positioned beneath it, and displays both objects in a 3D viewer. It uses the k3d backend for rendering and sets up the visualization environment with axes and a dark gray background.\nSOURCE: https://github.com/marcomusy/vedo/blob/master/examples/notebooks/shrink.ipynb#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n\"\"\"Shrink the triangulation of a mesh to make the inside visible.\"\"\"\nfrom vedo import *\n\nsettings.default_backend = 'k3d' # or k3d, 2d or vtk\n\npot = Mesh(dataurl+\"teapot.vtk\").shrink(0.75)\ns = Sphere(r=0.2).pos(0, 0, -0.5)\nshow(pot, s, axes=1, bg=\"gray1\", viewup='z')\n```\n\n----------------------------------------\n\nTITLE: Aligning a Line to a Polygonal Mesh with vedo in Python\nDESCRIPTION: This code loads a 3D mesh and a rim line, then demonstrates how to align the rim to the mesh surface using the align_to() method. It also calculates the average squared distance between aligned points to quantify alignment quality.\nSOURCE: https://github.com/marcomusy/vedo/blob/master/examples/notebooks/align1.ipynb#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n\"\"\"Align 2 shapes: a simple line to a polygonal mesh\"\"\"\nfrom vedo import *\n\nsettings.default_backend = '2d' # or k3d, ipyvtk,trame or vtk\n\nlimb = Mesh(dataurl + \"270.vtk\").alpha(0.5)\nrim  = Mesh(dataurl + \"270_rim.vtk\").c(\"red4\").lw(3)\n\n# make a clone copy of the rim line and align it to the surface\narim = rim.clone().align_to(limb, rigid=True).c(\"g\")\n\nplt = Plotter()\nplt += [limb, rim, arim]\n\n# compute how well it fits\nd = 0\nfor p in arim.vertices:\n    cpt = limb.closest_point(p)\n    d += mag2(p - cpt)  # square of residual distance\n\nprintc(\"ave. squared distance =\", d / arim.npoints, c=\"g\")\nplt.show()\n```\n\n----------------------------------------\n\nTITLE: Creating and Displaying a Cut Sphere with Vedo\nDESCRIPTION: Creates a sphere object, cuts it with a plane, applies color mapping based on z-coordinates of vertices, and displays it with axes. Uses k3d as the default backend renderer.\nSOURCE: https://github.com/marcomusy/vedo/blob/master/examples/notebooks/sphere.ipynb#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom vedo import *\n\nsettings.default_backend = 'k3d'  # or k3d, ipyvtk,trame or vtk\n\nsph = Sphere()\nsph.cut_with_plane(normal=(1,1,1))\nscalars = sph.vertices[:,2] # use z-coords to color vertices\n\n# NB, actions can be concatenated into a pipeline:\n# add point scalars with a choice of color map, use flat shading, print infos and then show\nsph.cmap('Set3', scalars).add_scalarbar()\nsph.show(axes=1, viewup='z')\n```\n\n----------------------------------------\n\nTITLE: Creating and Visualizing Random Points in 3D with vedo\nDESCRIPTION: Generates a cloud of 1000 random 3D points using NumPy and visualizes them with vedo's Points class. The points are colored with a green shade (\"green5\").\nSOURCE: https://github.com/marcomusy/vedo/blob/master/examples/notebooks/test_types.ipynb#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom vedo import np, Points\npts = Points(np.random.randn(1000,3)).color(\"green5\")\npts\n```\n\n----------------------------------------\n\nTITLE: Setting up IPython Widgets for Vedo Visualization\nDESCRIPTION: Creates an interactive 3D visualization with a button for changing the color and a slider for adjusting the x-position of a 3D mesh. The code includes callback functions for the widgets and configures the vedo Plotter to display a bunny mesh with dynamic controls.\nSOURCE: https://github.com/marcomusy/vedo/blob/master/examples/notebooks/slider2d.ipynb#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom IPython.display import display, clear_output\nimport ipywidgets as widgets\nfrom vedo import *\n\n############################## button\nbutton = widgets.Button(\n    description='Change Color',\n    button_style='info',\n    tooltip='click to select a random color',\n)\n\ndef on_button_click(b):\n    with out:\n        rgb = (np.random.rand(3)*255).astype(int)\n        mesh.color(rgb)\n        vtxt.text(f\"RGB: {rgb} \\n({get_color_name(rgb)})\")\n        clear_output(wait=True)\n        img = plt.show()\n        display(img)\nbutton.on_click(on_button_click)\n\n############################## slider\nslider = widgets.FloatSlider(\n    description='x-position', \n    min=-0.2, value=0, max=0.2, \n    step=0.02,\n    continuous_update=True,\n)\n\ndef on_slider(change):\n    with out:\n        value = change['new']\n        mesh.x(slider.value)\n        clear_output(wait=True)\n        img = plt.show(resetcam=True)\n        display(img)\nslider.observe(on_slider, names='value')\n\n############################################## vedo\n# settings.default_backend = \"2d\"  # this example only works with \"2d\"\nsettings.backend_autoclose = False  # do not close Plotter after show()\n\nplt = Plotter(size=[600,500], axes=1, bg2=\"lightblue\")\nmesh = Mesh(dataurl+\"bunny.obj\").color(\"white\")\nvtxt = Text2D(font=\"Cartoons123\")\nplt += [mesh, vtxt]\n\nout = widgets.Output()\ndisplay(out, button, slider)\nwith out:\n    img = plt.show()\n    display(img)\n```\n\n----------------------------------------\n\nTITLE: Basic Vedo Usage in Python\nDESCRIPTION: Simple Python code to import vedo and display a 3D cone object.\nSOURCE: https://github.com/marcomusy/vedo/blob/master/docs/documentation.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport vedo\nvedo.Cone().show(axes=1).close()\n```\n\n----------------------------------------\n\nTITLE: Creating and Composing Linear Transformations with vedo\nDESCRIPTION: Demonstrates how to create and chain multiple linear transformations using vedo's LinearTransform class. The example applies a translation [1,2,3] followed by a 45-degree rotation around the z-axis and a 30-degree rotation around the y-axis.\nSOURCE: https://github.com/marcomusy/vedo/blob/master/examples/notebooks/test_types.ipynb#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nfrom vedo import LinearTransform\nT = LinearTransform()\nT.shift([1,2,3]).rotate_z(45).rotate_y(30)\nT\n```\n\n----------------------------------------\n\nTITLE: Loading and Displaying an Image from URL with vedo\nDESCRIPTION: Demonstrates how to load and display an image from a URL using vedo's Image class. The image, a National Geographic photograph of a domestic cat, is named appropriately for identification.\nSOURCE: https://github.com/marcomusy/vedo/blob/master/examples/notebooks/test_types.ipynb#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom vedo import Image\npic = Image(\"https://i.natgeofe.com/n/548467d8-c5f1-4551-9f58-6817a8d2c45e/NationalGeographic_2572187_2x3.jpg\")\npic.name = \"Domestic Cat\"\npic\n```\n\n----------------------------------------\n\nTITLE: Loading and Visualizing a Structured Grid with vedo\nDESCRIPTION: Creates a StructuredGrid object by loading data from a VTS (VTK structured grid) file. Structured grids organize data in a regular, logical 3D grid pattern with potentially non-uniform physical spacing.\nSOURCE: https://github.com/marcomusy/vedo/blob/master/examples/notebooks/test_types.ipynb#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom vedo import StructuredGrid, dataurl\nsgrid1 = StructuredGrid(dataurl + \"structgrid.vts\")\nsgrid1\n```\n\n----------------------------------------\n\nTITLE: Creating and Cutting an Unstructured Grid with a Cylinder in vedo\nDESCRIPTION: Loads an unstructured grid from a VTK file and cuts it with a cylindrical mesh. The cylinder is created with a radius of 3 and height of 7, positioned 3 units along the x-axis before performing the cut operation.\nSOURCE: https://github.com/marcomusy/vedo/blob/master/examples/notebooks/test_types.ipynb#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom vedo import dataurl, UnstructuredGrid, Cylinder\nug1 = UnstructuredGrid(dataurl+'ugrid.vtk')\ncyl = Cylinder(r=3, height=7).x(3)\nug1.cut_with_mesh(cyl)\n```\n\n----------------------------------------\n\nTITLE: Loading and Visualizing a Tetrahedral Mesh with vedo\nDESCRIPTION: Creates a TetMesh object from a mouse limb VTK file. Tetrahedral meshes are used for volumetric finite element analysis and similar applications. The mesh is named \"MouseLimb\" for identification.\nSOURCE: https://github.com/marcomusy/vedo/blob/master/examples/notebooks/test_types.ipynb#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom vedo import dataurl, TetMesh\ntet = TetMesh(dataurl+\"limb_ugrid.vtk\")\ntet.name = \"MouseLimb\"\ntet\n```\n\n----------------------------------------\n\nTITLE: Creating a Histogram of Random Data with vedo.pyplot\nDESCRIPTION: Generates a histogram visualization of normally-distributed random data using vedo's pyplot module. This demonstrates vedo's 2D plotting capabilities alongside its 3D visualization features.\nSOURCE: https://github.com/marcomusy/vedo/blob/master/examples/notebooks/test_types.ipynb#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nfrom vedo.pyplot import np, histogram\nhisto = histogram(np.random.randn(1000))\nhisto\n```\n\n----------------------------------------\n\nTITLE: Manually Setting K3D Camera Parameters\nDESCRIPTION: Demonstrates how to manually configure the camera in K3D using a 9-element list format. The list specifies position, target, and up-vector coordinates for the camera.\nSOURCE: https://github.com/marcomusy/vedo/blob/master/examples/notebooks/manipulate_camera.ipynb#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# Manually set the k3d camera. Syntax is:\n# [posx,posy,posz, targetx,targety,targetz, upx,upy,upz]\nvedo.notebook_plotter.camera = [0., 0. ,1.,\n                                0., 0., 0.,\n                                0., 1., 0.]\n```\n\n----------------------------------------\n\nTITLE: Creating a Rectilinear Grid with Non-uniform Coordinates in vedo\nDESCRIPTION: Generates a RectilinearGrid using non-uniform spacing along the x-axis (using a square root function) and uniform spacing along y and z axes. Rectilinear grids allow axis-aligned grid lines with varying spacing between them.\nSOURCE: https://github.com/marcomusy/vedo/blob/master/examples/notebooks/test_types.ipynb#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom vedo import np, RectilinearGrid\nxcoords = 7 + np.sqrt(np.arange(0,900,25))\nycoords = np.arange(0, 20)\nzcoords = np.arange(0, 20)\nrgrid = RectilinearGrid([xcoords, ycoords, zcoords])\nrgrid\n```\n\n----------------------------------------\n\nTITLE: Creating Coordinate Axes Around a Sphere with vedo\nDESCRIPTION: Creates a visualization of coordinate axes around a sphere object. This is useful for providing spatial orientation and scale reference in 3D visualizations.\nSOURCE: https://github.com/marcomusy/vedo/blob/master/examples/notebooks/test_types.ipynb#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom vedo import Sphere, Axes\naxes = Axes(Sphere())\naxes\n```\n\n----------------------------------------\n\nTITLE: Configuring Vedo in Jupyter Notebook\nDESCRIPTION: Python code to set up vedo for use in a Jupyter notebook, including backend selection.\nSOURCE: https://github.com/marcomusy/vedo/blob/master/docs/documentation.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport vedo\nvedo.settings.default_backend= '...' # Choose backend: 2d, vtk, k3d, ipyvtklink, or trame\n```\n\n----------------------------------------\n\nTITLE: Customizing Vedo Plot Output for FEniCS/Dolfin Mesh\nDESCRIPTION: Python code snippet demonstrating how to access and modify properties of the mesh object returned by the plot() function. This allows for more advanced customization of the visualization.\nSOURCE: https://github.com/marcomusy/vedo/blob/master/examples/other/dolfin/README.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nplt = plot(u_solution)\nmsh = plt.actors[0]\nmsh.color('blue').alpha(0.5).cut_with_plane()  # etc\nplt.show()\n```\n\n----------------------------------------\n\nTITLE: Visualizing 3D Data via Command Line Interface\nDESCRIPTION: Example of using Vedo's command line interface to visualize a 3D volumetric file directly from a URL. This demonstrates Vedo's capability to quickly visualize data without writing Python code.\nSOURCE: https://github.com/marcomusy/vedo/blob/master/README.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nvedo https://vedo.embl.es/examples/data/embryo.tif\n```\n\n----------------------------------------\n\nTITLE: Converting File Formats with Vedo\nDESCRIPTION: Command to convert a 3D file format using vedo's command line interface.\nSOURCE: https://github.com/marcomusy/vedo/blob/master/docs/documentation.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nvedo --convert bunny.obj --to ply\n```\n\n----------------------------------------\n\nTITLE: Initializing vedo with K3D Backend and Displaying a 3D Model\nDESCRIPTION: Sets the default backend to K3D and loads a 3D bunny model for visualization. This creates a basic visualization using the K3D renderer.\nSOURCE: https://github.com/marcomusy/vedo/blob/master/examples/notebooks/manipulate_camera.ipynb#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n\"\"\"Manipulate Camera for K3D backend\"\"\"\nimport vedo\n\nvedo.settings.default_backend = 'k3d'\n\nbu = vedo.Mesh(vedo.dataurl+'bunny.obj')\nbu.show()\n```\n\n----------------------------------------\n\nTITLE: Installing Vedo via pip\nDESCRIPTION: Basic installation command for Vedo using pip package manager. This is the recommended and simplest way to install the stable version of the library.\nSOURCE: https://github.com/marcomusy/vedo/blob/master/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install vedo\n```\n\n----------------------------------------\n\nTITLE: Installing Vedo with pip\nDESCRIPTION: Commands to install vedo using pip, including the latest development version from GitHub.\nSOURCE: https://github.com/marcomusy/vedo/blob/master/docs/documentation.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install vedo\n\n# Or, install the latest development version with:\npip install -U git+https://github.com/marcomusy/vedo.git\n```\n\n----------------------------------------\n\nTITLE: Configuring PyInstaller Spec File for Vedo Applications\nDESCRIPTION: A complete PyInstaller specification file that configures the bundling of a Vedo-based application. It includes system configuration, font directory location, hidden imports for VTK modules, and executable build settings.\nSOURCE: https://github.com/marcomusy/vedo/blob/master/docs/documentation.md#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nimport os\n\nimport sys\nsys.setrecursionlimit(sys.getrecursionlimit() * 5)\n\nfrom vedo import installdir as vedo_installdir\nvedo_fontsdir = os.path.join(vedo_installdir, 'fonts')\nprint('vedo installation is in', vedo_installdir)\nprint('fonts are in', vedo_fontsdir)\n\nblock_cipher = None\n\nadded_files = [\n    (os.path.join('tuning','*'), 'tuning'),\n    (os.path.join(vedo_fontsdir,'*'), os.path.join('vedo','fonts')),\n]\n\na = Analysis(['myscript.py'],\n             pathex=[],\n             binaries=[],\n             hiddenimports=[\n                 'vtkmodules',\n                 'vtkmodules.all',\n                 'vtkmodules.util',\n                 'vtkmodules.util.numpy_support',\n                 'vtkmodules.qt.QVTKRenderWindowInteractor',\n             ],\n             datas = added_files,\n             hookspath=[],\n             hooksconfig={},\n             runtime_hooks=[],\n             excludes=[],\n             win_no_prefer_redirects=False,\n             win_private_assemblies=False,\n             cipher=block_cipher,\n             noarchive=False)\npyz = PYZ(a.pure, a.zipped_data,\n             cipher=block_cipher)\nexe = EXE(pyz,\n          a.scripts,\n          a.binaries,\n          a.zipfiles,\n          a.datas,\n          [],\n          name='my_program_name',\n          debug=False,\n          bootloader_ignore_signals=False,\n          strip=False,\n          upx=True,\n          upx_exclude=[],\n          runtime_tmpdir=None,\n          console=True,\n          disable_windowed_traceback=False,\n          target_arch=None,\n          codesign_identity=None,\n          entitlements_file=None)\n```\n\n----------------------------------------\n\nTITLE: Inspecting Mesh Processing Pipeline in vedo\nDESCRIPTION: This code accesses the processing pipeline of the sphere mesh to display the sequence of operations that have been applied to it. This is useful for understanding the transformation history of the mesh.\nSOURCE: https://github.com/marcomusy/vedo/blob/master/examples/notebooks/distance2mesh.ipynb#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ns1.pipeline\n```\n\n----------------------------------------\n\nTITLE: Setting Up Vedo on Google Colab\nDESCRIPTION: Python code to initialize and test vedo in a Google Colab environment.\nSOURCE: https://github.com/marcomusy/vedo/blob/master/docs/documentation.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nimport vedo\nvedo.settings.init_colab()\n\n# Test with:\nimport vedo\nprint(\"vedo\", vedo.__version__)\nsphere = vedo.Sphere().linewidth(1)\nplt = vedo.Plotter()\nplt += sphere\nplt.show(axes=1, viewup='z', zoom=1.5)\n```\n\n----------------------------------------\n\nTITLE: Converting VTK Camera to K3D Camera Format\nDESCRIPTION: Creates a VTK camera object with specific parameters and converts it to K3D format using a utility function. This enables using VTK camera configurations with the K3D renderer.\nSOURCE: https://github.com/marcomusy/vedo/blob/master/examples/notebooks/manipulate_camera.ipynb#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# Convert a vtkCamera object into the appropiate K3D list\nimport vtk\nvcam = vtk.vtkCamera()\nvcam.SetPosition( [-0.017, 0.11, 0.48] )\nvcam.SetFocalPoint( [-0.017, 0.11, -0.001] )\nvcam.SetViewUp( [0.0, 1.0, 0.0] )\nvcam.SetDistance( 0.4 )\nk3dcam = vedo.utils.vtkCameraToK3D(vcam)\nprint('k3dcam is', k3dcam)\n\nvedo.notebook_plotter.camera = k3dcam\n```\n\n----------------------------------------\n\nTITLE: Installing Vedo from Conda-Forge Channel\nDESCRIPTION: Command to install Vedo using the conda package manager from the conda-forge channel. This is an alternative installation method for users who prefer using conda environments.\nSOURCE: https://github.com/marcomusy/vedo/blob/master/README.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nconda install -c conda-forge vedo\n```\n\n----------------------------------------\n\nTITLE: VTK Module Import Reference List\nDESCRIPTION: Comprehensive list of VTK module imports covering InfovisLayout, InteractionStyle, and InteractionWidgets components. These modules provide functionality for graph layouts, interaction handling, and widget implementations.\nSOURCE: https://github.com/marcomusy/vedo/blob/master/docs/vtkmodules_9.3.0_hierarchy.txt#2025-04-21_snippet_13\n\nLANGUAGE: Python\nCODE:\n```\nvtkmodules.vtkInfovisLayout.vtkForceDirectedLayoutStrategy\nvtkmodules.vtkInfovisLayout.vtkGeoEdgeStrategy\nvtkmodules.vtkInfovisLayout.vtkGeoMath\nvtkmodules.vtkInfovisLayout.vtkGraphLayout\n# ... additional module imports omitted for brevity\n```\n\n----------------------------------------\n\nTITLE: Searching for Vedo Examples via Command Line\nDESCRIPTION: Command-line instructions for searching through Vedo's built-in examples. This shows how to use the vedo command with the --search flag to find examples related to alignment.\nSOURCE: https://github.com/marcomusy/vedo/blob/master/examples/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nvedo --search align\n```\n\n----------------------------------------\n\nTITLE: Running Vedo Examples via Command Line\nDESCRIPTION: Command-line instruction for executing a specific built-in Vedo example. This demonstrates how to run the align1 example directly using the vedo command with the -r flag.\nSOURCE: https://github.com/marcomusy/vedo/blob/master/examples/README.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nvedo -r align1\n```\n\n----------------------------------------\n\nTITLE: VTK Common Data Model Module Imports\nDESCRIPTION: List of imports from the VTK Common Data Model module showing available classes, constants, and data structures for 3D visualization and geometric processing.\nSOURCE: https://github.com/marcomusy/vedo/blob/master/docs/vtkmodules_9.3.0_hierarchy.txt#2025-04-21_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nvtkmodules.vtkCommonDataModel.VTK_ICP_MODE_AV\nvtkmodules.vtkCommonDataModel.VTK_ICP_MODE_RMS\nvtkmodules.vtkCommonDataModel.VTK_LAGRANGE_CURVE\nvtkmodules.vtkCommonDataModel.VTK_LAGRANGE_HEXAHEDRON\n# ... additional imports ...\nvtkmodules.vtkCommonDataModel.vtkHyperTreeGridNonOrientedUnlimitedGeometryCursor\n```\n\n----------------------------------------\n\nTITLE: Installing Vedo Dependencies on a Server\nDESCRIPTION: Bash commands to install necessary libraries for running vedo on a server.\nSOURCE: https://github.com/marcomusy/vedo/blob/master/docs/documentation.md#2025-04-21_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt install libgl1-mesa-glx libgl1-mesa-dev xvfb\npip install vedo\n```\n\n----------------------------------------\n\nTITLE: Running Vedo Tutorials\nDESCRIPTION: Executes various Vedo tutorials from different courses and workshops.\nSOURCE: https://github.com/marcomusy/vedo/blob/master/tests/pipeline.txt#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncd ~/Projects/server/vedo-embo-course/scripts && ./run_all.sh \ncd ~/Projects/server/vedo-bias-course/scripts && ./run_all.sh \ncd ~/Projects/server/vedo-epug-tutorial/scripts && ./run_all.sh \n```\n\n----------------------------------------\n\nTITLE: Importing VTK Modules in Python\nDESCRIPTION: This code snippet demonstrates how to import various VTK modules in Python. It includes modules for filters, readers, writers, and other data processing tools across different domains.\nSOURCE: https://github.com/marcomusy/vedo/blob/master/docs/vtkmodules_9.3.0_hierarchy.txt#2025-04-21_snippet_9\n\nLANGUAGE: Python\nCODE:\n```\nfrom vtkmodules.vtkFiltersTexture import vtkScalarsToTextureFilter, vtkTextureMapToCylinder, vtkTextureMapToPlane, vtkTextureMapToSphere, vtkThresholdTextureCoords, vtkTransformTextureCoords, vtkTriangularTCoords\nfrom vtkmodules.vtkFiltersTopology import vtkFiberSurface\nfrom vtkmodules.vtkFiltersVerdict import vtkBoundaryMeshQuality, vtkCellQuality, vtkCellSizeFilter, vtkMatrixMathFilter, vtkMeshQuality\nfrom vtkmodules.vtkGeovisCore import vtkGeoProjection, vtkGeoTransform\nfrom vtkmodules.vtkIOAMR import vtkAMRBaseParticlesReader, vtkAMRBaseReader, vtkAMRDataSetCache, vtkAMREnzoParticlesReader, vtkAMREnzoReader, vtkAMRFlashParticlesReader, vtkAMRFlashReader, vtkAMRVelodyneReader, vtkAMReXGridReader, vtkAMReXParticlesReader\nfrom vtkmodules.vtkIOAsynchronous import vtkThreadedImageWriter\nfrom vtkmodules.vtkIOCGNSReader import vtkCGNSFileSeriesReader, vtkCGNSReader\nfrom vtkmodules.vtkIOCONVERGECFD import vtkCONVERGECFDReader\nfrom vtkmodules.vtkIOCellGrid import vtkCellGridReader\nfrom vtkmodules.vtkIOCesium3DTiles import vtkCesium3DTilesWriter, vtkCesiumPointCloudWriter\nfrom vtkmodules.vtkIOChemistry import vtkCMLMoleculeReader, vtkGaussianCubeReader, vtkGaussianCubeReader2, vtkMoleculeReaderBase, vtkPDBReader, vtkVASPAnimationReader, vtkVASPTessellationReader, vtkXYZMolReader, vtkXYZMolReader2\nfrom vtkmodules.vtkIOCityGML import vtkCityGMLReader\n# ... (more import statements)\n```\n\n----------------------------------------\n\nTITLE: Setting Up and Running FEniCS Examples\nDESCRIPTION: Creates a Conda environment for FEniCS, installs Vedo, and runs FEniCS-related examples.\nSOURCE: https://github.com/marcomusy/vedo/blob/master/tests/pipeline.txt#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncd $VEDODIR\nconda activate fenics\npip install -qe .\ncd $VEDODIR/examples/other/dolfin && ./run_all.sh\nconda deactivate\n```\n\n----------------------------------------\n\nTITLE: Importing VTK Rendering Core Constants and Classes in Python\nDESCRIPTION: This code snippet demonstrates how to import various constants and classes from the VTK Rendering Core module. These imports provide access to a wide range of rendering functionality, including cursor types, material modes, and classes for actors, mappers, and renderers.\nSOURCE: https://github.com/marcomusy/vedo/blob/master/docs/vtkmodules_9.3.0_hierarchy.txt#2025-04-21_snippet_14\n\nLANGUAGE: Python\nCODE:\n```\nfrom vtkmodules.vtkRenderingCore import (\n    VTK_CURSOR_DEFAULT,\n    VTK_CURSOR_HAND,\n    VTK_CURSOR_SIZEALL,\n    # ... (other constants)\n    vtkAbstractHyperTreeGridMapper,\n    vtkAbstractInteractionDevice,\n    # ... (other classes)\n    vtkWorldPointPicker\n)\n\n# Example usage:\ncursor_type = VTK_CURSOR_DEFAULT\nrenderer = vtkRenderer()\nactor = vtkActor()\n```\n\n----------------------------------------\n\nTITLE: Importing VTK Infovis Core Modules in Python\nDESCRIPTION: This snippet shows the import statements for VTK Infovis Core modules. These modules provide functionality for information visualization, including graph and tree operations, data transformations, and statistical analysis.\nSOURCE: https://github.com/marcomusy/vedo/blob/master/docs/vtkmodules_9.3.0_hierarchy.txt#2025-04-21_snippet_12\n\nLANGUAGE: Python\nCODE:\n```\nvtkmodules.vtkInfovisCore.vtkAddMembershipArray\nvtkmodules.vtkInfovisCore.vtkAdjacencyMatrixToEdgeTable\nvtkmodules.vtkInfovisCore.vtkArrayNorm\nvtkmodules.vtkInfovisCore.vtkArrayToTable\nvtkmodules.vtkInfovisCore.vtkCollapseGraph\nvtkmodules.vtkInfovisCore.vtkCollapseVerticesByArray\nvtkmodules.vtkInfovisCore.vtkContinuousScatterplot\nvtkmodules.vtkInfovisCore.vtkDataObjectToTable\nvtkmodules.vtkInfovisCore.vtkDotProductSimilarity\nvtkmodules.vtkInfovisCore.vtkEdgeCenters\nvtkmodules.vtkInfovisCore.vtkExpandSelectedGraph\nvtkmodules.vtkInfovisCore.vtkExtractSelectedGraph\nvtkmodules.vtkInfovisCore.vtkExtractSelectedTree\nvtkmodules.vtkInfovisCore.vtkGenerateIndexArray\nvtkmodules.vtkInfovisCore.vtkGraphHierarchicalBundleEdges\nvtkmodules.vtkInfovisCore.vtkGroupLeafVertices\nvtkmodules.vtkInfovisCore.vtkKCoreDecomposition\nvtkmodules.vtkInfovisCore.vtkMergeColumns\nvtkmodules.vtkInfovisCore.vtkMergeGraphs\nvtkmodules.vtkInfovisCore.vtkMergeTables\nvtkmodules.vtkInfovisCore.vtkMutableGraphHelper\nvtkmodules.vtkInfovisCore.vtkNetworkHierarchy\nvtkmodules.vtkInfovisCore.vtkPipelineGraphSource\nvtkmodules.vtkInfovisCore.vtkPruneTreeFilter\nvtkmodules.vtkInfovisCore.vtkRandomGraphSource\nvtkmodules.vtkInfovisCore.vtkReduceTable\nvtkmodules.vtkInfovisCore.vtkRemoveHiddenData\nvtkmodules.vtkInfovisCore.vtkRemoveIsolatedVertices\nvtkmodules.vtkInfovisCore.vtkSparseArrayToTable\nvtkmodules.vtkInfovisCore.vtkStreamGraph\nvtkmodules.vtkInfovisCore.vtkStringToCategory\nvtkmodules.vtkInfovisCore.vtkStringToNumeric\nvtkmodules.vtkInfovisCore.vtkTableToArray\nvtkmodules.vtkInfovisCore.vtkTableToGraph\nvtkmodules.vtkInfovisCore.vtkTableToSparseArray\nvtkmodules.vtkInfovisCore.vtkTableToTreeFilter\nvtkmodules.vtkInfovisCore.vtkThresholdGraph\nvtkmodules.vtkInfovisCore.vtkThresholdTable\nvtkmodules.vtkInfovisCore.vtkTransferAttributes\nvtkmodules.vtkInfovisCore.vtkTransposeMatrix\nvtkmodules.vtkInfovisCore.vtkTreeDifferenceFilter\nvtkmodules.vtkInfovisCore.vtkTreeFieldAggregator\nvtkmodules.vtkInfovisCore.vtkTreeLevelsFilter\nvtkmodules.vtkInfovisCore.vtkVertexDegree\nvtkmodules.vtkInfovisCore.vtkWordCloud\n```\n\n----------------------------------------\n\nTITLE: Importing VTK Rendering Modules in Python\nDESCRIPTION: This snippet demonstrates how to import various VTK rendering modules in Python. These modules provide functionality for different rendering techniques and visualization components.\nSOURCE: https://github.com/marcomusy/vedo/blob/master/docs/vtkmodules_9.3.0_hierarchy.txt#2025-04-21_snippet_15\n\nLANGUAGE: Python\nCODE:\n```\nfrom vtkmodules.vtkRenderingOpenGL2 import vtkOpenGLRenderWindow, vtkOpenGLRenderer, vtkOpenGLPolyDataMapper\nfrom vtkmodules.vtkRenderingVR import vtkVRRenderWindow, vtkVRRenderer\nfrom vtkmodules.vtkRenderingVolume import vtkVolumeMapper\nfrom vtkmodules.vtkRenderingFreeType import vtkFreeTypeStringToImage\n# ... and so on for other modules\n```\n\n----------------------------------------\n\nTITLE: Importing VTK Filters Geometry Module\nDESCRIPTION: This snippet shows the import of constants and geometry-related filter classes from the vtkFiltersGeometry module. These filters are used for manipulating and extracting geometric information from datasets.\nSOURCE: https://github.com/marcomusy/vedo/blob/master/docs/vtkmodules_9.3.0_hierarchy.txt#2025-04-21_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\nfrom vtkmodules.vtkFiltersGeometry import VTK_EDGE_OVERLAP, VTK_NO_OVERLAP, vtkGeometryFilter, vtkImageDataToUniformGrid\n```\n\n----------------------------------------\n\nTITLE: Cloning and Running Vedo Examples via Command Line\nDESCRIPTION: Instructions for cloning the Vedo repository from GitHub and running a basic alignment example script. This snippet shows the necessary commands to get started with the Vedo visualization library examples.\nSOURCE: https://github.com/marcomusy/vedo/blob/master/examples/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/marcomusy/vedo.git\ncd vedo/examples/basic\npython align1.py\n```\n\n----------------------------------------\n\nTITLE: Importing VTK Imaging Core Modules in Python\nDESCRIPTION: This snippet shows the import statements for various VTK Imaging Core modules. These modules provide fundamental image processing capabilities such as resampling, resizing, thresholding, and data manipulation.\nSOURCE: https://github.com/marcomusy/vedo/blob/master/docs/vtkmodules_9.3.0_hierarchy.txt#2025-04-21_snippet_10\n\nLANGUAGE: Python\nCODE:\n```\nvtkmodules.vtkImagingCore.vtkImageResample\nvtkmodules.vtkImagingCore.vtkImageResize\nvtkmodules.vtkImagingCore.vtkImageReslice\nvtkmodules.vtkImagingCore.vtkImageResliceToColors\nvtkmodules.vtkImagingCore.vtkImageShiftScale\nvtkmodules.vtkImagingCore.vtkImageShrink3D\nvtkmodules.vtkImagingCore.vtkImageSincInterpolator\nvtkmodules.vtkImagingCore.vtkImageStencilAlgorithm\nvtkmodules.vtkImagingCore.vtkImageStencilData\nvtkmodules.vtkImagingCore.vtkImageStencilRaster\nvtkmodules.vtkImagingCore.vtkImageStencilSource\nvtkmodules.vtkImagingCore.vtkImageThreshold\nvtkmodules.vtkImagingCore.vtkImageTranslateExtent\nvtkmodules.vtkImagingCore.vtkImageWrapPad\nvtkmodules.vtkImagingCore.vtkRTAnalyticSource\n```\n\n----------------------------------------\n\nTITLE: Importing VTK Filters General Module\nDESCRIPTION: This snippet shows how to import various filter classes from the vtkFiltersGeneral module. These filters provide general-purpose data processing operations in VTK.\nSOURCE: https://github.com/marcomusy/vedo/blob/master/docs/vtkmodules_9.3.0_hierarchy.txt#2025-04-21_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nfrom vtkmodules.vtkFiltersGeneral import vtkRemovePolyData, vtkRotationFilter, vtkSampleImplicitFunctionFilter\n```\n\n----------------------------------------\n\nTITLE: Running Vedo from Command Line\nDESCRIPTION: Examples of using vedo's command line interface to display help and render a 3D model.\nSOURCE: https://github.com/marcomusy/vedo/blob/master/docs/documentation.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nvedo --help\nvedo https://vedo.embl.es/examples/data/panther.stl.gz\n```\n\n----------------------------------------\n\nTITLE: Importing VTK Filters Generic Module\nDESCRIPTION: This code demonstrates the import of constants and filter classes from the vtkFiltersGeneric module. These filters are designed to work with generic datasets in VTK.\nSOURCE: https://github.com/marcomusy/vedo/blob/master/docs/vtkmodules_9.3.0_hierarchy.txt#2025-04-21_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\nfrom vtkmodules.vtkFiltersGeneric import VTK_COLOR_BY_SCALAR, VTK_SCALE_BY_VECTOR, vtkGenericClip, vtkGenericContourFilter\n```\n\n----------------------------------------\n\nTITLE: Importing VTK Filters Hybrid Module\nDESCRIPTION: This code demonstrates the import of constants and hybrid filter classes from the vtkFiltersHybrid module. These filters combine multiple techniques or work with different types of data representations.\nSOURCE: https://github.com/marcomusy/vedo/blob/master/docs/vtkmodules_9.3.0_hierarchy.txt#2025-04-21_snippet_5\n\nLANGUAGE: Python\nCODE:\n```\nfrom vtkmodules.vtkFiltersHybrid import VTK_BSPLINE_EDGE, VTK_COLOR_MODE_LUT, vtkDepthSortPolyData, vtkTemporalInterpolator\n```\n\n----------------------------------------\n\nTITLE: Testing Vedo Offscreen Rendering\nDESCRIPTION: Python script to test vedo's offscreen rendering capabilities on a server.\nSOURCE: https://github.com/marcomusy/vedo/blob/master/docs/documentation.md#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nimport vedo\nplt = vedo.Plotter(offscreen=True, size=(500,500))\nplt.show(vedo.Cube()).screenshot('mycube.png').close()\n```\n\n----------------------------------------\n\nTITLE: Importing VTK Imaging Fourier Modules in Python\nDESCRIPTION: This snippet demonstrates the import statements for VTK Imaging Fourier modules. These modules provide functionality for Fourier transforms and related operations on images.\nSOURCE: https://github.com/marcomusy/vedo/blob/master/docs/vtkmodules_9.3.0_hierarchy.txt#2025-04-21_snippet_11\n\nLANGUAGE: Python\nCODE:\n```\nvtkmodules.vtkImagingFourier.vtkImageButterworthHighPass\nvtkmodules.vtkImagingFourier.vtkImageButterworthLowPass\nvtkmodules.vtkImagingFourier.vtkImageComplex_t\nvtkmodules.vtkImagingFourier.vtkImageFFT\nvtkmodules.vtkImagingFourier.vtkImageFourierCenter\nvtkmodules.vtkImagingFourier.vtkImageFourierFilter\nvtkmodules.vtkImagingFourier.vtkImageIdealHighPass\nvtkmodules.vtkImagingFourier.vtkImageIdealLowPass\nvtkmodules.vtkImagingFourier.vtkImageRFFT\n```\n\n----------------------------------------\n\nTITLE: Accessing Mesh Variable in vedo\nDESCRIPTION: This simple code snippet accesses a previously defined 'limb' variable that contains a Mesh object from the vedo library. This is likely used for debugging or inspection within an interactive environment.\nSOURCE: https://github.com/marcomusy/vedo/blob/master/examples/notebooks/align1.ipynb#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nlimb\n```\n\n----------------------------------------\n\nTITLE: Importing VTK Filters Imaging Module\nDESCRIPTION: This code demonstrates the import of imaging-related filter classes from the vtkFiltersImaging module. These filters are used for processing and analyzing image data in VTK.\nSOURCE: https://github.com/marcomusy/vedo/blob/master/docs/vtkmodules_9.3.0_hierarchy.txt#2025-04-21_snippet_7\n\nLANGUAGE: Python\nCODE:\n```\nfrom vtkmodules.vtkFiltersImaging import vtkComputeHistogram2DOutliers, vtkExtractHistogram2D, vtkPairwiseExtractHistogram2D\n```\n\n----------------------------------------\n\nTITLE: Accessing the Mesh Object\nDESCRIPTION: Returns the mesh object for inspection or further manipulation in the notebook environment.\nSOURCE: https://github.com/marcomusy/vedo/blob/master/examples/notebooks/slider2d.ipynb#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nmesh\n\n```\n\n----------------------------------------\n\nTITLE: Accessing the Points Object in vedo\nDESCRIPTION: Retrieves the Points object 'apts' which contains the scattered 3D points with assigned scalar values.\nSOURCE: https://github.com/marcomusy/vedo/blob/master/examples/notebooks/interpolate_volume.ipynb#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\napts\n```\n\n----------------------------------------\n\nTITLE: Importing VTK Filters Modeling Module\nDESCRIPTION: This snippet shows the import of constants and modeling-related filter classes from the vtkFiltersModeling module. These filters are used for various modeling operations on geometric data in VTK.\nSOURCE: https://github.com/marcomusy/vedo/blob/master/docs/vtkmodules_9.3.0_hierarchy.txt#2025-04-21_snippet_8\n\nLANGUAGE: Python\nCODE:\n```\nfrom vtkmodules.vtkFiltersModeling import VTK_DIJKSTRA_EDGE_SEARCH, VTK_NORMAL_EXTRUSION, vtkBandedPolyDataContourFilter, vtkDijkstraGraphGeodesicPath\n```\n\n----------------------------------------\n\nTITLE: Closing Vedo Plotter\nDESCRIPTION: Closes the Vedo plotter window to clean up resources.\nSOURCE: https://github.com/marcomusy/vedo/blob/master/examples/notebooks/pca.ipynb#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nplt.close()\n```\n\n----------------------------------------\n\nTITLE: Closing vedo Visualization Window\nDESCRIPTION: Closes the vedo visualization window that was opened by the previous show() function call.\nSOURCE: https://github.com/marcomusy/vedo/blob/master/examples/notebooks/interpolate_volume.ipynb#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nplt.close()\n```\n\n----------------------------------------\n\nTITLE: Importing VTK Filters HyperTree Module\nDESCRIPTION: This snippet shows the import of hypertree grid filter classes from the vtkFiltersHyperTree module. These filters are specifically designed to work with hypertree grid data structures in VTK.\nSOURCE: https://github.com/marcomusy/vedo/blob/master/docs/vtkmodules_9.3.0_hierarchy.txt#2025-04-21_snippet_6\n\nLANGUAGE: Python\nCODE:\n```\nfrom vtkmodules.vtkFiltersHyperTree import vtkHyperTreeGridAxisClip, vtkHyperTreeGridContour, vtkHyperTreeGridToUnstructuredGrid\n```\n\n----------------------------------------\n\nTITLE: List of New/Revised Examples in vedo\nDESCRIPTION: This snippet lists the paths to new and revised example files in the vedo library, showcasing the breadth of functionality across basic interactions, advanced features, volumetric rendering, simulations, and other specialized use cases.\nSOURCE: https://github.com/marcomusy/vedo/blob/master/CHANGELOG.md#2025-04-21_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nexamples/basic/sliders_hsv.py\nexamples/basic/buttons1.py\nexamples/basic/buttons2.py\nexamples/basic/input_box.py\n\nexamples/advanced/warp4b.py\nexamples/advanced/diffuse_data.py\nexamples/advanced/moving_least_squares1D.py\n\nexamples/volumetric/slab_vol.py\nexamples/volumetric/streamlines1.py\nexamples/volumetric/streamlines2.py\nexamples/volumetric/streamlines3.py\nexamples/volumetric/streamlines4.py\nexamples/volumetric/office.py\nexamples/volumetric/slice_plane1.py\nexamples/volumetric/slice_plane3.py\nexamples/volumetric/mesh2volume.py\nexamples/volumetric/read_volume3.py\nexamples/volumetric/rectl_grid1.py\nexamples/volumetric/struc_grid1.py\nexamples/volumetric/app_raycaster.py\nexamples/volumetric/isosurfaces1.py\nexamples/volumetric/isosurfaces2.py\n\nexamples/simulations/mag_field1.py\nexamples/pyplot/andrews_cluster.py\n\nexamples/other/madcad1.py\nexamples/other/tetgen1.py\nexamples/other/nelder-mead.py\nexamples/other/fast_simpl.py\n\ntests/issues/issue_968.py\ntests/issues/issue_1025.py\ntests/issues/test_force_anim.py\ntests/snippets/test_discourse_1956.py\ntests/snippets/test_ellipsoid_main_axes.py\ntests/snippets/test_compare_fit1.py\n```\n\n----------------------------------------\n\nTITLE: Installing Latest Development Version of Vedo\nDESCRIPTION: Command to install the latest development version of Vedo directly from the GitHub repository. This provides access to the newest features and fixes before they are released in the stable version.\nSOURCE: https://github.com/marcomusy/vedo/blob/master/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npip install -U git+https://github.com/marcomusy/vedo.git\n```\n\n----------------------------------------\n\nTITLE: New/Revised Examples in vedo 2023.4.5\nDESCRIPTION: This snippet lists example files updated or created in vedo version 2023.4.5, covering basic UI interactions, advanced features like timer callbacks and warping, plotting, simulations, volumetric rendering, and other specialized functionality.\nSOURCE: https://github.com/marcomusy/vedo/blob/master/CHANGELOG.md#2025-04-21_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\nexamples/basic/buttons.py\nexamples/basic/input_box.py\nexamples/basic/sliders2.py\nexamples/basic/spline_tool.py\nexamples/basic/interaction_modes2.py\nexamples/advanced/timer_callback1.py\nexamples/advanced/timer_callback2.py\nexamples/advanced/warp4a.py\nexamples/advanced/warp4b.py\nexamples/pyplot/embed_matplotlib.py\nexamples/pyplot/plot_fxy2.py\nexamples/simulations/springs_fem.py\nexamples/simulations/lorenz.py\nexamples/volumetric/numpy2volume0.py\nexamples/volumetric/slicer1.py\nexamples/volumetric/tet_astyle.py\nexamples/volumetric/tet_cut1.py\nexamples/volumetric/tet_cut2.py\nexamples/other/flag_labels1.py\n```\n\n----------------------------------------\n\nTITLE: Generating and Visualizing Voxel Dataset with Scattered Point Interpolation in vedo\nDESCRIPTION: Creates a voxel dataset by interpolating scalar values from randomly scattered 3D points. Uses the 'shepard' kernel for interpolation, applies a colormap, and applies thresholding to create a special middle layer by replacing values between 0.3 and 0.4 with 0.9.\nSOURCE: https://github.com/marcomusy/vedo/blob/master/examples/notebooks/interpolate_volume.ipynb#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n\"\"\"Generate a voxel dataset by interpolating a scalar\nwhich is only known on a scattered set of points or mesh.\nAvailable interpolation kernels are: shepard, gaussian, voronoi, linear.\nThe middle layer is the result of thresholding the volume\nbetween 0.3 and 0.4 and assigning it the new value of 0.9\"\"\"\nfrom vedo import *\nimport numpy as np\n\nsettings.default_backend = 'vtk'  # or k3d, ipyvtk, or vtk\n\nnpts = 500                       # nr. of points of known scalar value\ncoords = np.random.rand(npts, 3) # range is [0, 1]\nscals = np.abs(coords[:, 2])     # let the scalar be the z of point itself\n\napts = Points(coords)\napts.pointdata['scals'] = scals\n\nvol = apts.tovolume(kernel='shepard', radius=0.2, dims=(90,90,90))\nvol.cmap([\"tomato\", \"g\", \"b\"])   # set color transfer functions\n\n# this produces a hole in the histogram in the range [0.3, 0.4]'\nvol.threshold(above=0.3, below=0.4, replace=0.9) # replace voxel value in [vmin,vmax]\n\nplt = show(apts, vol, axes=1, elevation=-30)\n```\n\n----------------------------------------\n\nTITLE: Listing Updated Example Files in Vedo\nDESCRIPTION: A list of updated or new example files organized by category (basic, advanced, pyplot, other, simulations) showing the relative paths to the example scripts.\nSOURCE: https://github.com/marcomusy/vedo/blob/master/CHANGELOG.md#2025-04-21_snippet_4\n\nLANGUAGE: text\nCODE:\n```\nexamples/basic/sliders_range.py\nexamples/basic/interaction_modes.py\nexamples/advanced/timer_callback3.py\nexamples/advanced/warp6.py\nexamples/pyplot/histo_1d_e.py\nexamples/other/tensor_grid2.py\nexamples/simulations/airplane1.py\nexamples/simulations/lorenz.py\nexamples/simulations/gas.py\nexamples/simulations/aspring2_player.py\n```\n\n----------------------------------------\n\nTITLE: Installing Vedo and Dependencies in Bash\nDESCRIPTION: Sets up the Vedo project directory and installs Vedo along with its dependencies using pip. It also installs additional packages for extended functionality.\nSOURCE: https://github.com/marcomusy/vedo/blob/master/tests/pipeline.txt#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nexport VEDODIR=$HOME/Projects/vedo\nexport VEDOLOGFILE=$VEDODIR/output_vedo_test.txt\n\ncd $VEDODIR\npip install -q -e .\npip install treelib\npip install colorcet\npip install scikit-image\npip install scikit-learn\npip install nevergrad -U\npip install pyefd -U\npip install iminuit -U\npip install meshio -U\npip install morphomatics -U\npip install pygeodesic -U\npip install pygmsh -U\npip install pymeshlab -U\npip install pymadcad -U\npip install pyshtools -U\npip install rtree\npip install trimesh -U\npip install -q trame==2.5.2\npip install qtpy\npip install magic-class -U\npip install tetgenpy -U\npip install gustaf -U\npip install fast-simplification -U\n```\n\n----------------------------------------\n\nTITLE: Running Vedo Test Suites\nDESCRIPTION: Executes various test suites for the Vedo project, including pytest, common tests, issue-related tests, and code snippets.\nSOURCE: https://github.com/marcomusy/vedo/blob/master/tests/pipeline.txt#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npytest tests\n\ncd $VEDODIR/tests/common && ./run_all.sh \ncd $VEDODIR/tests/issues && ./run_all.sh \ncd $VEDODIR/tests/snippets && ./run_all.sh \n```\n\n----------------------------------------\n\nTITLE: Releasing Vedo to PyPI\nDESCRIPTION: Prepares and uploads a new Vedo release to PyPI, including building the distribution and using twine for upload.\nSOURCE: https://github.com/marcomusy/vedo/blob/master/tests/pipeline.txt#2025-04-21_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ncd $VEDODIR\nrm -rf dist/\npython -m build\npython -m twine upload dist/*\n```\n\n----------------------------------------\n\nTITLE: Running Vedo Examples and Logging Results\nDESCRIPTION: Executes all Vedo examples and logs the output to a file. It then searches for specific error patterns in the log file.\nSOURCE: https://github.com/marcomusy/vedo/blob/master/tests/pipeline.txt#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncd $VEDODIR/examples && time ./run_all.sh 2>&1 | tee $VEDOLOGFILE && alert \"scan done.\"\n\ngrep -aA 1 \"Error\" $VEDOLOGFILE\ngrep -aA 3 \"Trace\" $VEDOLOGFILE\ngrep -aA 3 \"ailure\" $VEDOLOGFILE\ngrep -aA 3 \"invalid\" $VEDOLOGFILE\ncode $VEDOLOGFILE  #### inspect logfile\n```\n\n----------------------------------------\n\nTITLE: Building Vedo Documentation\nDESCRIPTION: Installs pdoc and builds the HTML documentation for Vedo.\nSOURCE: https://github.com/marcomusy/vedo/blob/master/tests/pipeline.txt#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ncd $VEDODIR\npip install -qe .\ncd $VEDODIR/docs/pdoc\n./build_html.py \n```\n\n----------------------------------------\n\nTITLE: Installing and Running Trimesh Examples with Vedo\nDESCRIPTION: Commands to clone the vedo repository and run the trimesh example scripts. Note that when running from Jupyter notebook, embedWindow(False) should be used.\nSOURCE: https://github.com/marcomusy/vedo/blob/master/examples/other/trimesh/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/marcomusy/vedo.git\ncd vedo/vedo/examples/other/trimesh\npython example.py\n```\n\n----------------------------------------\n\nTITLE: Useful Bash Aliases for Vedo\nDESCRIPTION: Bash aliases to simplify common vedo command line operations.\nSOURCE: https://github.com/marcomusy/vedo/blob/master/docs/documentation.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nalias vr='vedo --run '      # to search and run examples by name\nalias vs='vedo --search '   # to search for a string in examples\nalias ve='vedo --eog '      # to view single and multiple images\n```\n\n----------------------------------------\n\nTITLE: Running PyInstaller with the Spec File\nDESCRIPTION: A bash command to execute PyInstaller using the custom specification file. This command builds the standalone executable according to the configuration in the spec file.\nSOURCE: https://github.com/marcomusy/vedo/blob/master/docs/documentation.md#2025-04-21_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\npyinstaller myscript.spec\n```\n\n----------------------------------------\n\nTITLE: Server Startup Script for Vedo\nDESCRIPTION: Bash script to set up the display environment for vedo on a server.\nSOURCE: https://github.com/marcomusy/vedo/blob/master/docs/documentation.md#2025-04-21_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nset -x\nexport DISPLAY=:99.0\nwhich Xvfb\nXvfb :99 -screen 0 1024x768x24 > /dev/null 2>&1 &\nsleep 3\nset +x\nexec \"$@\"\n```\n\n----------------------------------------\n\nTITLE: Vedo Citation Reference in Markdown\nDESCRIPTION: Markdown formatted citation reference for the Vedo Python module, including author, title, and DOI information.\nSOURCE: https://github.com/marcomusy/vedo/blob/master/README.md#2025-04-21_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\nM. Musy  <em>et al.</em>,\n\"<code>vedo</code>, a python module for scientific analysis and visualization of 3D objects and point clouds\",\nZenodo, 2021, <a href=\"https://doi.org/10.5281/zenodo.7019968\">doi: 10.5281/zenodo.7019968</a>.\n```\n\n----------------------------------------\n\nTITLE: Listing Example Files Path References in Python\nDESCRIPTION: Lists of Python example and test files that were added or revised in the project. These include various visualization examples, issue tests, and interactive demonstration scripts.\nSOURCE: https://github.com/marcomusy/vedo/blob/master/CHANGELOG.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nexamples/pyplot/plot_fxy0.py\nexamples/other/pysr_regression.py\nexamples/other/chemistry1.py\n\ntests/issues/issue_1230.py\n```\n\nLANGUAGE: python\nCODE:\n```\nexamples/advanced/spline_draw2.py\nexamples/volumetric/isosurfaces2.py\nexamples/pyplot/fit_curve2.py\n\ntests/issues/issue_1146.py\ntests/issues/discussion_1190.py\ntests/issues/test_sph_harm2.py\ntests/issues/issue_1218.py\n\ntests/snippets/test_interactive_plotxy1.py\ntests/snippets/test_interactive_plotxy2.py\ntests/snippets/test_elastic_pendulum.py\n```\n\nLANGUAGE: python\nCODE:\n```\nexamples/basic/interaction_modes3.py\nexamples/basic/interaction_modes4.py\nexamples/basic/buttons3.py\nexamples/advanced/warp4b.py\nexamples/other/magic-class1.py\nexamples/other/iminuit2.py\nexamples/other/meshlib1.py\ntests/issues/issue_1077.py\n```\n\n----------------------------------------\n\nTITLE: Installing mshr package using Conda\nDESCRIPTION: Command to install the mshr package using Conda package manager. This package is required for some FEniCS/Dolfin functionalities.\nSOURCE: https://github.com/marcomusy/vedo/blob/master/examples/other/dolfin/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nconda install conda-forge::mshr\n```\n\n----------------------------------------\n\nTITLE: Listing Broken Examples in Python\nDESCRIPTION: Lists of Python examples that are currently broken or not fully functional, along with brief descriptions of the issues. These include problems with mesh visualization, rendering, and exporting to specific formats.\nSOURCE: https://github.com/marcomusy/vedo/blob/master/CHANGELOG.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nmarkpoint.py (misplaced leader indicator)\ncut_and_cap.py (incomplete capping)\ntests/issues/discussion_800.py (incomplete capping of tube)\nadvanced/warp4b.py (probs with picker?)\n```\n\nLANGUAGE: python\nCODE:\n```\nboolean.py\ncartoony.py\nmesh_lut.py\nmesh_map2cell.py\ntexturecubes.py\nmeshquality.py\nstreamlines1.py\n```\n\n----------------------------------------\n\nTITLE: Toggling Dry Run Mode in Vedo Settings\nDESCRIPTION: Uses sed commands to enable or disable the dry run mode in Vedo's settings file. This allows for testing without actual execution.\nSOURCE: https://github.com/marcomusy/vedo/blob/master/tests/pipeline.txt#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsed -i \"s/dry_run_mode = 0/dry_run_mode = 2/g\" $VEDODIR/vedo/settings.py  #->DISABLE\nsed -i \"s/dry_run_mode = 2/dry_run_mode = 0/g\" $VEDODIR/vedo/settings.py  #->ENABLE\n```\n\n----------------------------------------\n\nTITLE: VTK Module Import Structure\nDESCRIPTION: Hierarchical listing of VTK module imports showing the available classes and components across different VTK subsystems including execution models, math utilities, transformations, and domain-specific filters\nSOURCE: https://github.com/marcomusy/vedo/blob/master/docs/vtkmodules_9.3.0_hierarchy.txt#2025-04-21_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nvtkmodules.vtkCommonExecutionModel.vtkExplicitStructuredGridAlgorithm\nvtkmodules.vtkCommonExecutionModel.vtkExtentRCBPartitioner\n# ... additional module imports\n```\n\n----------------------------------------\n\nTITLE: Displaying Sphere Object\nDESCRIPTION: Simple command to display the sphere object variable in the interactive environment.\nSOURCE: https://github.com/marcomusy/vedo/blob/master/examples/notebooks/sphere.ipynb#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nsph\n```\n\n----------------------------------------\n\nTITLE: Accessing Sphere Mesh Object in vedo\nDESCRIPTION: This snippet retrieves the sphere mesh object (s1) for inspection, likely displaying its properties or representation in an interactive environment.\nSOURCE: https://github.com/marcomusy/vedo/blob/master/examples/notebooks/distance2mesh.ipynb#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ns1\n```\n\n----------------------------------------\n\nTITLE: Accessing Mesh Object in Vedo Python\nDESCRIPTION: This snippet returns or references the pot object, which is the teapot mesh that was created and shrunk in the previous code. It's likely used to inspect the mesh properties or manipulate it further in an interactive environment.\nSOURCE: https://github.com/marcomusy/vedo/blob/master/examples/notebooks/shrink.ipynb#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\npot\n```\n\n----------------------------------------\n\nTITLE: Closing the Vedo Plotter\nDESCRIPTION: Closes the vedo Plotter instance to release resources and end the visualization session.\nSOURCE: https://github.com/marcomusy/vedo/blob/master/examples/notebooks/slider2d.ipynb#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nplt.close()\n```\n\n----------------------------------------\n\nTITLE: Running Vedo Command\nDESCRIPTION: Executes the vedo command in the terminal/notebook environment.\nSOURCE: https://github.com/marcomusy/vedo/blob/master/examples/notebooks/pca.ipynb#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n!vedo\n```"
  }
]