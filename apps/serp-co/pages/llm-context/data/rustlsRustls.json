[
  {
    "owner": "rustls",
    "repo": "rustls",
    "content": "TITLE: Running Rustls Client Example with HTTPS\nDESCRIPTION: Demonstrates how to use the Rustls client example program to make an HTTPS request to a secure website. The example shows successful connection to a valid site and error handling for an expired certificate.\nSOURCE: https://github.com/rustls/rustls/blob/main/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ cargo run --bin tlsclient-mio -- --http mozilla-modern.badssl.com\nHTTP/1.1 200 OK\nServer: nginx/1.6.2 (Ubuntu)\nDate: Wed, 01 Jun 2016 18:44:00 GMT\nContent-Type: text/html\nContent-Length: 644\n(...)\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ cargo run --bin tlsclient-mio -- --http expired.badssl.com\nTLS error: InvalidCertificate(Expired)\nConnection closed\n```\n\n----------------------------------------\n\nTITLE: Running Rustls Server Example with OpenSSL Client\nDESCRIPTION: Shows how to start a TLS echo server using the Rustls server example, then connect to it using both OpenSSL and the Rustls client example. This demonstrates interoperability and basic functionality.\nSOURCE: https://github.com/rustls/rustls/blob/main/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ cargo run --bin tlsserver-mio -- --certs test-ca/rsa-2048/end.fullchain --key test-ca/rsa-2048/end.key -p 8443 echo &\n$ echo hello world | openssl s_client -ign_eof -quiet -connect localhost:8443\ndepth=2 CN = ponytown RSA CA\nverify error:num=19:self signed certificate in certificate chain\nhello world\n^C\n$ echo hello world | cargo run --bin tlsclient-mio -- --cafile test-ca/rsa-2048/ca.cert --port 8443 localhost\nhello world\n^C\n```\n\n----------------------------------------\n\nTITLE: Building Rustls Benchmarks\nDESCRIPTION: Command to build the rustls benchmark binary with AWS-LC support enabled. This compiles the benchmark code located in rustls-bench/src/main.rs with the bench profile for optimal performance.\nSOURCE: https://github.com/rustls/rustls/blob/main/BENCHMARKING.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncargo build --profile=bench -p rustls-bench --features aws-lc-rs\n```\n\n----------------------------------------\n\nTITLE: Running Nightly Benchmarks\nDESCRIPTION: Command to run fine-grained benchmarks with Rust nightly compiler. These benchmarks use the #[bench] attribute and require the nightly toolchain with the bench configuration flag.\nSOURCE: https://github.com/rustls/rustls/blob/main/BENCHMARKING.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nRUSTFLAGS=--cfg=bench cargo +nightly bench\n```\n\n----------------------------------------\n\nTITLE: Running Rustls Benchmarks with Noise Reduction\nDESCRIPTION: Sets the BENCH_MULTIPLIER environment variable to extend benchmark duration, which helps neutralize the effects of cold CPU and page caches for more accurate results. This multiplies the benchmark workload by 8 times.\nSOURCE: https://github.com/rustls/rustls/blob/main/BENCHMARKING.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nBENCH_MULTIPLIER=8\n```\n\n----------------------------------------\n\nTITLE: Running rustls Benchmarks with bench-measure.mk\nDESCRIPTION: Command for executing performance benchmarks on rustls using a custom Makefile. It sets a multiplier of 16 and uses setarch -R to disable address space randomization for consistent results.\nSOURCE: https://github.com/rustls/rustls/blob/main/website/content/perf/2024-10-18-report.md#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nBENCH_MULTIPLIER=16 setarch -R make -f admin/bench-measure.mk measure\n```\n\n----------------------------------------\n\nTITLE: Running BoringSSL Benchmarks with openssl-bench\nDESCRIPTION: Command for executing performance benchmarks on BoringSSL using the openssl-bench tool. It sets a multiplier of 16 and uses setarch -R to disable address space randomization for consistent results.\nSOURCE: https://github.com/rustls/rustls/blob/main/website/content/perf/2024-10-18-report.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nBENCH_MULTIPLIER=16 setarch -R make measure BORINGSSL=1\n```\n\n----------------------------------------\n\nTITLE: Running OpenSSL Benchmarks with openssl-bench\nDESCRIPTION: Command for executing performance benchmarks on OpenSSL using the openssl-bench tool. It sets a multiplier of 16 and uses setarch -R to disable address space randomization for consistent results.\nSOURCE: https://github.com/rustls/rustls/blob/main/website/content/perf/2024-10-18-report.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nBENCH_MULTIPLIER=16 setarch -R make measure\n```\n\n----------------------------------------\n\nTITLE: Running rustls Benchmarks on ARM64\nDESCRIPTION: Shell command to execute benchmarks for rustls with increased benchmark multiplier and address randomization disabled using a custom makefile target.\nSOURCE: https://github.com/rustls/rustls/blob/main/website/content/perf/2024-10-31-arm64.md#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nBENCH_MULTIPLIER=16 setarch -R make -f admin/bench-measure.mk measure\n```\n\n----------------------------------------\n\nTITLE: Running BoringSSL Benchmarks using openssl-bench on ARM64\nDESCRIPTION: Shell command to execute benchmarks for BoringSSL using the openssl-bench tool with increased benchmark multiplier and address randomization disabled.\nSOURCE: https://github.com/rustls/rustls/blob/main/website/content/perf/2024-10-31-arm64.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nBENCH_MULTIPLIER=16 setarch -R make measure BORINGSSL=1\n```\n\n----------------------------------------\n\nTITLE: Running OpenSSL Benchmarks using openssl-bench on ARM64\nDESCRIPTION: Shell command to execute benchmarks for OpenSSL using the openssl-bench tool with increased benchmark multiplier and address randomization disabled.\nSOURCE: https://github.com/rustls/rustls/blob/main/website/content/perf/2024-10-31-arm64.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nBENCH_MULTIPLIER=16 setarch -R make measure\n```\n\n----------------------------------------\n\nTITLE: Running Rustls Benchmarks\nDESCRIPTION: Command to execute threaded benchmarks for Rustls using custom benchmark makefile\nSOURCE: https://github.com/rustls/rustls/blob/main/website/content/perf/2024-11-28-threading/index.md#2025-04-21_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nBENCH_MULTIPLIER=2 setarch -R make -f admin/bench-measure.mk threads\n```\n\n----------------------------------------\n\nTITLE: Running OpenSSL 3.0.14 Benchmarks\nDESCRIPTION: Command to execute threaded benchmarks for OpenSSL 3.0.14 using host OpenSSL\nSOURCE: https://github.com/rustls/rustls/blob/main/website/content/perf/2024-11-28-threading/index.md#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nBENCH_MULTIPLIER=2 setarch -R make threads HOST_OPENSSL=1\n```\n\n----------------------------------------\n\nTITLE: Running OpenSSL 3.4.0 Benchmarks\nDESCRIPTION: Command to execute threaded benchmarks for OpenSSL 3.4.0 with multiplier setting\nSOURCE: https://github.com/rustls/rustls/blob/main/website/content/perf/2024-11-28-threading/index.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nBENCH_MULTIPLIER=2 setarch -R make threads\n```\n\n----------------------------------------\n\nTITLE: Running BoringSSL Benchmarks\nDESCRIPTION: Command to execute threaded benchmarks for BoringSSL with multiplier setting and architecture reset\nSOURCE: https://github.com/rustls/rustls/blob/main/website/content/perf/2024-11-28-threading/index.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nBENCH_MULTIPLIER=2 setarch -R make threads BORINGSSL=1\n```\n\n----------------------------------------\n\nTITLE: Running BoGo Tests for Rustls\nDESCRIPTION: Commands to run the full BoGo test suite against Rustls. This requires changing to the 'bogo' directory and using the 'runme' script with the AWS-LC-RS shim provider.\nSOURCE: https://github.com/rustls/rustls/blob/main/bogo/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ cd bogo # from rustls repo root\n$ BOGO_SHIM_PROVIDER=aws-lc-rs ./runme\n```\n\n----------------------------------------\n\nTITLE: Running Single BoGo Test for Rustls\nDESCRIPTION: Commands to run a specific BoGo test against Rustls. This allows targeting individual test cases by name, such as 'EarlyData-Server-BadFinished-TLS13'.\nSOURCE: https://github.com/rustls/rustls/blob/main/bogo/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ cd bogo # from rustls repo root\n$ ./runme -test \"Foo;Bar\" # where Foo and Bar are test names like EarlyData-Server-BadFinished-TLS13\n```\n\n----------------------------------------\n\nTITLE: Running Rustls Fuzz Tests with Cargo\nDESCRIPTION: Commands for listing fuzz test targets, running specific fuzz tests with time constraints, and cleaning up generated corpus files. Shows basic usage of cargo-fuzz for Rustls testing.\nSOURCE: https://github.com/rustls/rustls/blob/main/fuzz/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# List available fuzzing targets.\n$ cargo fuzz list\nclient\ndeframer\nfragment\nmessage\npersist\nservert\n\n# Run the message fuzz target for a fixed period of time (expressed in seconds).\n$ cargo fuzz run message -- -max_total_time=120\n\n# Clean up generated corpus files\ngit clean --interactive -- ./corpus\n```\n\n----------------------------------------\n\nTITLE: Running the Rustls Test CA Generator Tool\nDESCRIPTION: Command to regenerate test certificate authorities and certificates using the test_ca.rs tool. This tool creates various test certificate authorities, intermediates, end-entity, and client certificates that are used by Rustls integration tests.\nSOURCE: https://github.com/rustls/rustls/blob/main/test-ca/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncargo run -p rustls --example test_ca\n```\n\n----------------------------------------\n\nTITLE: Benchmarking AES-256-GCM with aws-lc\nDESCRIPTION: Shell command to run specific AES-256-GCM encryption speed tests with aws-lc's built-in benchmarking tool, measuring operations per second and throughput.\nSOURCE: https://github.com/rustls/rustls/blob/main/website/content/perf/2024-10-31-arm64.md#2025-04-21_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nLD_LIBRARY_PATH=. ./tool/bssl speed -filter AES-256-GCM\n```\n\n----------------------------------------\n\nTITLE: Benchmarking AES-256-GCM with OpenSSL\nDESCRIPTION: Shell command to run specific AES-256-GCM encryption speed tests with OpenSSL's built-in benchmarking tool, measuring operations per second and throughput across different block sizes.\nSOURCE: https://github.com/rustls/rustls/blob/main/website/content/perf/2024-10-31-arm64.md#2025-04-21_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nLD_LIBRARY_PATH=. ./apps/openssl speed -aead -evp aes-256-gcm\n```\n\n----------------------------------------\n\nTITLE: Benchmarking AES-256-GCM with BoringSSL\nDESCRIPTION: Shell command to run specific AES-256-GCM encryption speed tests with BoringSSL's built-in benchmarking tool, measuring operations per second and throughput.\nSOURCE: https://github.com/rustls/rustls/blob/main/website/content/perf/2024-10-31-arm64.md#2025-04-21_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nLD_LIBRARY_PATH=. ./tool/bssl speed -filter AES-256-GCM\n```\n\n----------------------------------------\n\nTITLE: Organizing Import Blocks in Rust\nDESCRIPTION: Shows the preferred way to organize imports in Rust files by separating them into three distinct blocks and avoiding grouped imports from the same parent module.\nSOURCE: https://github.com/rustls/rustls/blob/main/CONTRIBUTING.md#2025-04-21_snippet_2\n\nLANGUAGE: rust\nCODE:\n```\n// Incorrect\nuse alloc::{format, vec::Vec};\n\n// Correct\nuse alloc::format;\nuse alloc::vec::Vec;\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Fully Qualified Function Calls in Rust\nDESCRIPTION: Example showing the preferred style for writing fully qualified function calls with explicit types rather than using type elision.\nSOURCE: https://github.com/rustls/rustls/blob/main/CONTRIBUTING.md#2025-04-21_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\n// Incorrect:\n<_>::default()\n\n// Correct:\nCertificateChain::default()\n```\n\n----------------------------------------\n\nTITLE: Implementing Linker-Friendly Code Using Traits in Rust\nDESCRIPTION: Demonstrates how to structure code to be linker-friendly by using trait-based dynamic dispatch instead of enum-based dispatch, allowing unused code to be discarded by the linker.\nSOURCE: https://github.com/rustls/rustls/blob/main/CONTRIBUTING.md#2025-04-21_snippet_3\n\nLANGUAGE: rust\nCODE:\n```\nenum Algorithm {\n    Aes128,\n    ChaCha20,\n}\n\nfn encrypt(alg: Algorithm, buffer: &mut [u8]) {\n    match alg {\n        Algorithm::Aes128 => encrypt_aes128(buffer),\n        Algorithm::ChaCha20 => encrypt_chacha20(buffer),\n    }\n}\n```\n\nLANGUAGE: rust\nCODE:\n```\ntrait Algorithm {\n    fn encrypt(&self, buffer: &mut [u8]);\n}\n\nstruct Aes128;\nstruct ChaCha20;\n\nimpl Algorithm for Aes128 {\n    fn encrypt(&self, buffer: &mut [u8]) {\n        encrypt_aes128(buffer)\n    }\n}\n\nimpl Algorithm for ChaCha20 {\n    fn encrypt(&self, buffer: &mut [u8]) {\n        encrypt_chacha20(buffer)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Hoisting Common Expression Returns in Match Statements in Rust\nDESCRIPTION: Demonstrates how to hoist common return types outside of match expressions to reduce code duplication and highlight the important differences between match arms.\nSOURCE: https://github.com/rustls/rustls/blob/main/CONTRIBUTING.md#2025-04-21_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\n// Incorrect:\nmatch foo {\n    1..10 => Ok(do_one_thing()),\n    _ => Ok(do_another()),\n}\n\n// Correct:\nOk(match foo {\n    1..10 => do_one_thing(),\n    _ => do_another(),\n})\n```\n\n----------------------------------------\n\nTITLE: Running local Zola server for the Rustls website\nDESCRIPTION: Command to start a local development server for the Rustls website using Zola. This allows developers to preview changes before deploying to the live site.\nSOURCE: https://github.com/rustls/rustls/blob/main/website/README.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nzola serve\n```\n\n----------------------------------------\n\nTITLE: Sample CSV Output for Wall-time Benchmarks\nDESCRIPTION: Example output from the wall-time benchmarking mode showing the CSV format with scenario names and their corresponding execution times across multiple iterations. Each line contains a scenario name followed by timing values for each iteration.\nSOURCE: https://github.com/rustls/rustls/blob/main/ci-bench/README.md#2025-04-21_snippet_1\n\nLANGUAGE: csv\nCODE:\n```\nhandshake_no_resume_ring_1.2_rsa_aes,6035261,1714158,977368\nhandshake_session_id_ring_1.2_rsa_aes,1537632,2445849,1766888\nhandshake_tickets_ring_1.2_rsa_aes,1553743,2418286,1636431\ntransfer_no_resume_ring_1.2_rsa_aes,10192862,10374258,8988854\nhandshake_no_resume_ring_1.3_rsa_aes,1010150,1400602,936029\n...\n... rest omitted for brevity\n...\n```\n\n----------------------------------------\n\nTITLE: Sample CSV Output for Instruction Count Benchmarks\nDESCRIPTION: Example output from the instruction count benchmarking mode showing the CSV format with scenario names and their corresponding instruction counts. Each line represents a different benchmark scenario with the instruction count value.\nSOURCE: https://github.com/rustls/rustls/blob/main/ci-bench/README.md#2025-04-21_snippet_0\n\nLANGUAGE: csv\nCODE:\n```\nhandshake_no_resume_1.2_rsa_aes_server,11327015\nhandshake_no_resume_1.2_rsa_aes_client,4314952\nhandshake_session_id_1.2_rsa_aes_server,11342136\nhandshake_session_id_1.2_rsa_aes_client,4327564\nhandshake_tickets_1.2_rsa_aes_server,11347746\nhandshake_tickets_1.2_rsa_aes_client,4331424\ntransfer_no_resume_1.2_rsa_aes_server,8775780\ntransfer_no_resume_1.2_rsa_aes_client,8818847\nhandshake_no_resume_1.3_rsa_aes_server,11517007\nhandshake_no_resume_1.3_rsa_aes_client,4212770\n...\n... rest omitted for brevity\n...\n```\n\n----------------------------------------\n\nTITLE: Configuring Performance Reports Front Matter in TOML\nDESCRIPTION: Front matter configuration block that defines how performance report pages should be generated and displayed. Sets the page title, sorting method, and specifies templates for both the main reports page and individual report pages.\nSOURCE: https://github.com/rustls/rustls/blob/main/website/content/perf/_index.md#2025-04-21_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n+++\ntitle = \"Performance reports\"\nsort_by = \"date\"\ntemplate = \"reports.html\"\npage_template = \"report-page.html\"\n+++\n```"
  }
]