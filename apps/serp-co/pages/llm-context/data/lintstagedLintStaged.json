[
  {
    "owner": "lint-staged",
    "repo": "lint-staged",
    "content": "TITLE: Running Multiple Commands in Sequence\nDESCRIPTION: Example showing how to run eslint followed by prettier (if eslint passes) on all staged JavaScript files, demonstrating the array syntax for sequential command execution.\nSOURCE: https://github.com/lint-staged/lint-staged/blob/main/README.md#2025-04-21_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"*.js\": [\"eslint\", \"prettier --write\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Basic JS Configuration for Lint-staged\nDESCRIPTION: Basic JavaScript configuration for lint-staged that runs ESLint on all files and Prettier on staged files.\nSOURCE: https://github.com/lint-staged/lint-staged/blob/main/README.md#2025-04-21_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  '*.js': (stagedFiles) => [`eslint .`, `prettier --write ${stagedFiles.join(' ')}`],\n}\n```\n\n----------------------------------------\n\nTITLE: Running Multiple Commands in Sequence for Same Files\nDESCRIPTION: Example showing how to run multiple commands in sequence for the same file types using array syntax, ensuring commands like prettier and eslint run in the specified order.\nSOURCE: https://github.com/lint-staged/lint-staged/blob/main/README.md#2025-04-21_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"*.ts\": [\"prettier --list-different\", \"eslint\"],\n  \"*.md\": \"prettier --list-different\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Concurrent Tasks with Non-Overlapping Globs\nDESCRIPTION: Example showing how to configure multiple tasks that run concurrently for different file types, with eslint for TypeScript files and prettier for Markdown files.\nSOURCE: https://github.com/lint-staged/lint-staged/blob/main/README.md#2025-04-21_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"*.ts\": \"eslint\",\n  \"*.md\": \"prettier --list-different\"\n}\n```\n\n----------------------------------------\n\nTITLE: Fixed TypeScript Configuration with Function Signature in lint-staged\nDESCRIPTION: Corrected lint-staged configuration using a function signature to prevent lint-staged from appending file arguments to the TypeScript compiler command, thereby ensuring tsconfig.json is respected.\nSOURCE: https://github.com/lint-staged/lint-staged/blob/main/README.md#2025-04-21_snippet_29\n\nLANGUAGE: js\nCODE:\n```\n// lint-staged.config.js\nmodule.exports = {\n  '*.{ts,tsx}': [() => 'tsc --noEmit', 'prettier --write'],\n}\n```\n\n----------------------------------------\n\nTITLE: Solving Race Conditions Using Negation Patterns\nDESCRIPTION: Example showing how to solve race conditions by using negation patterns and array syntax to ensure commands run on the appropriate files without conflicts.\nSOURCE: https://github.com/lint-staged/lint-staged/blob/main/README.md#2025-04-21_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"!(*.ts)\": \"prettier --write\",\n  \"*.ts\": [\"eslint --fix\", \"prettier --write\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Complex File Filtering with Multiple Formatters\nDESCRIPTION: Example showing how to configure multiple formatting tools for different file types without overlapping glob patterns, using negation and grouping to ensure files are processed only once.\nSOURCE: https://github.com/lint-staged/lint-staged/blob/main/README.md#2025-04-21_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"*.css\": [\"stylelint --fix\", \"prettier --write\"],\n  \"*.{js,jsx}\": [\"eslint --fix\", \"prettier --write\"],\n  \"!(*.css|*.js|*.jsx)\": [\"prettier --write\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Lint-Staged in .lintstagedrc File\nDESCRIPTION: Example showing how to configure lint-staged in a .lintstagedrc JSON file, where '*' is a glob pattern that matches all files and 'your-cmd' is the command to run on those files.\nSOURCE: https://github.com/lint-staged/lint-staged/blob/main/README.md#2025-04-21_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"*\": \"your-cmd\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Lint-Staged in package.json\nDESCRIPTION: Example showing how to configure lint-staged in a package.json file, where '*' is a glob pattern that matches all files and 'your-cmd' is the command to run on those files.\nSOURCE: https://github.com/lint-staged/lint-staged/blob/main/README.md#2025-04-21_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"lint-staged\": {\n    \"*\": \"your-cmd\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring ESLint v8.51.0 with Flat Config in lint-staged\nDESCRIPTION: Configuration example for lint-staged using ESLint v8.51.0 or newer with the flat config format. It uses the --no-warn-ignored flag to suppress warnings about ignored files.\nSOURCE: https://github.com/lint-staged/lint-staged/blob/main/README.md#2025-04-21_snippet_27\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"*.js\": \"eslint --max-warnings=0 --no-warn-ignored\"\n}\n```\n\n----------------------------------------\n\nTITLE: Custom File Matcher Function\nDESCRIPTION: Example of using micromatch to create custom file matchers for different file types and running specific commands.\nSOURCE: https://github.com/lint-staged/lint-staged/blob/main/README.md#2025-04-21_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\n// lint-staged.config.js\nimport micromatch from 'micromatch'\n\nexport default (allStagedFiles) => {\n  const shFiles = micromatch(allStagedFiles, ['**/src/**/*.sh'])\n  if (shFiles.length) {\n    return `printf '%s\\n' \"Script files aren't allowed in src directory\" >&2`\n  }\n  const codeFiles = micromatch(allStagedFiles, ['**/*.js', '**/*.ts'])\n  const docFiles = micromatch(allStagedFiles, ['**/*.md'])\n  return [`eslint ${codeFiles.join(' ')}`, `mdl ${docFiles.join(' ')}`]\n}\n```\n\n----------------------------------------\n\nTITLE: ESLint Ignored Files Filter for Lint-Staged (ESLint >= 7)\nDESCRIPTION: JavaScript configuration for lint-staged that handles ESLint's async isPathIgnored API in version 7+, filtering out ignored files before running the linter to prevent warnings.\nSOURCE: https://github.com/lint-staged/lint-staged/blob/main/README.md#2025-04-21_snippet_26\n\nLANGUAGE: js\nCODE:\n```\nimport { ESLint } from 'eslint'\n\nconst removeIgnoredFiles = async (files) => {\n  const eslint = new ESLint()\n  const isIgnored = await Promise.all(\n    files.map((file) => {\n      return eslint.isPathIgnored(file)\n    })\n  )\n  const filteredFiles = files.filter((_, i) => !isIgnored[i])\n  return filteredFiles.join(' ')\n}\n\nexport default {\n  '**/*.{ts,tsx,js,jsx}': async (files) => {\n    const filesToLint = await removeIgnoredFiles(files)\n    return [`eslint --max-warnings=0 ${filesToLint}`]\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: ESLint Ignored Files Filter for Lint-Staged (ESLint < 7)\nDESCRIPTION: JavaScript configuration for lint-staged that filters out files ignored by ESLint's configuration (like .eslintignore) before running the linter, for ESLint versions below 7.\nSOURCE: https://github.com/lint-staged/lint-staged/blob/main/README.md#2025-04-21_snippet_25\n\nLANGUAGE: js\nCODE:\n```\nimport { CLIEngine } from 'eslint'\n\nexport default {\n  '*.js': (files) => {\n    const cli = new CLIEngine({})\n    return 'eslint --max-warnings=0 ' + files.filter((file) => !cli.isPathIgnored(file)).join(' ')\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Using TypeScript Types with JSDoc in JavaScript Configuration\nDESCRIPTION: Example showing how to use TypeScript types in a JavaScript configuration file using JSDoc syntax, which provides type checking and autocompletion in compatible editors.\nSOURCE: https://github.com/lint-staged/lint-staged/blob/main/README.md#2025-04-21_snippet_4\n\nLANGUAGE: js\nCODE:\n```\n/**\n * @filename: lint-staged.config.js\n * @type {import('lint-staged').Configuration}\n */\nexport default {\n  '*': 'prettier --write',\n}\n```\n\n----------------------------------------\n\nTITLE: Using Lint-Staged via Node.js API\nDESCRIPTION: JavaScript code demonstrating how to use lint-staged programmatically through its Node.js API. Shows basic usage with error handling and all available configuration options.\nSOURCE: https://github.com/lint-staged/lint-staged/blob/main/README.md#2025-04-21_snippet_17\n\nLANGUAGE: js\nCODE:\n```\nimport lintStaged from 'lint-staged'\n\ntry {\n  const success = await lintStaged()\n  console.log(success ? 'Linting was successful!' : 'Linting failed!')\n} catch (e) {\n  // Failed to load configuration\n  console.error(e)\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Lint-Staged API Parameters\nDESCRIPTION: JavaScript example showing all available parameters that can be passed to the lint-staged API function, equivalent to their CLI counterparts. These control behavior like concurrency, debugging, and file handling.\nSOURCE: https://github.com/lint-staged/lint-staged/blob/main/README.md#2025-04-21_snippet_18\n\nLANGUAGE: js\nCODE:\n```\nconst success = await lintStaged({\n  allowEmpty: false,\n  concurrent: true,\n  configPath: './path/to/configuration/file',\n  cwd: process.cwd(),\n  debug: false,\n  maxArgLength: null,\n  quiet: false,\n  relative: false,\n  stash: true,\n  verbose: false,\n})\n```\n\n----------------------------------------\n\nTITLE: Passing Direct Configuration to Lint-Staged API\nDESCRIPTION: JavaScript example demonstrating how to pass a configuration object directly to the lint-staged API using the config option instead of loading from a configuration file.\nSOURCE: https://github.com/lint-staged/lint-staged/blob/main/README.md#2025-04-21_snippet_19\n\nLANGUAGE: js\nCODE:\n```\nconst success = await lintStaged({\n  allowEmpty: false,\n  concurrent: true,\n  config: { '*.js': 'eslint --fix' },\n  cwd: process.cwd(),\n  debug: false,\n  maxArgLength: null,\n  quiet: false,\n  relative: false,\n  stash: true,\n  verbose: false,\n})\n```\n\n----------------------------------------\n\nTITLE: Next.js Integration Configuration\nDESCRIPTION: JavaScript configuration for integrating lint-staged with Next.js, including ESLint fixes for staged files.\nSOURCE: https://github.com/lint-staged/lint-staged/blob/main/README.md#2025-04-21_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\n// .lintstagedrc.js\n// See https://nextjs.org/docs/basic-features/eslint#lint-staged for details\n\nconst path = require('path')\n\nconst buildEslintCommand = (filenames) =>\n  `next lint --fix --file ${filenames.map((f) => path.relative(process.cwd(), f)).join(' --file ')}`\n\nmodule.exports = {\n  '*.{js,jsx,ts,tsx}': [buildEslintCommand],\n}\n```\n\n----------------------------------------\n\nTITLE: Husky Pre-commit Hook Configuration\nDESCRIPTION: Shell script configuration for husky pre-commit hook to run lint-staged.\nSOURCE: https://github.com/lint-staged/lint-staged/blob/main/README.md#2025-04-21_snippet_14\n\nLANGUAGE: shell\nCODE:\n```\n# .husky/pre-commit\n\nnpx lint-staged\n```\n\n----------------------------------------\n\nTITLE: Incorrect TypeScript Configuration in lint-staged\nDESCRIPTION: Example of a problematic lint-staged configuration where TypeScript will ignore tsconfig.json because lint-staged passes file arguments to commands.\nSOURCE: https://github.com/lint-staged/lint-staged/blob/main/README.md#2025-04-21_snippet_28\n\nLANGUAGE: js\nCODE:\n```\n// package.json\n\n\"lint-staged\": {\n    \"*.{ts,tsx}\":[\n      \"tsc --noEmit\",\n      \"prettier --write\"\n    ]\n  }\n```\n\n----------------------------------------\n\nTITLE: Extending Base Lint-Staged Configuration in JavaScript\nDESCRIPTION: JavaScript module that shows how to extend a base lint-staged configuration for use in a monorepo setup, allowing packages to inherit common configurations while adding their own.\nSOURCE: https://github.com/lint-staged/lint-staged/blob/main/README.md#2025-04-21_snippet_24\n\nLANGUAGE: js\nCODE:\n```\nimport baseConfig from '../.lintstagedrc.js'\n\nexport default {\n  ...baseConfig,\n  '*.js': 'eslint --fix',\n}\n```\n\n----------------------------------------\n\nTITLE: Package-Specific Lint-Staged Configuration for JavaScript Files\nDESCRIPTION: JavaScript configuration example for a specific package in a monorepo, specifying that ESLint should be run on JavaScript files. This demonstrates isolated configuration per package.\nSOURCE: https://github.com/lint-staged/lint-staged/blob/main/README.md#2025-04-21_snippet_23\n\nLANGUAGE: js\nCODE:\n```\n// ./packages/frontend/.lintstagedrc.json\n{ \"*.js\": \"eslint --fix\" }\n```\n\n----------------------------------------\n\nTITLE: Root-Level Lint-Staged Configuration for Markdown Files\nDESCRIPTION: JavaScript configuration example for the root level of a monorepo, specifying that Prettier should be run on Markdown files. This is part of the monorepo configuration example.\nSOURCE: https://github.com/lint-staged/lint-staged/blob/main/README.md#2025-04-21_snippet_22\n\nLANGUAGE: js\nCODE:\n```\n// ./.lintstagedrc.json\n{ \"*.md\": \"prettier --write\" }\n```\n\n----------------------------------------\n\nTITLE: Running TypeScript Configuration Files with Node.js\nDESCRIPTION: Shell command example showing how to enable TypeScript configuration files with Node.js using the --experimental-strip-types flag, which allows direct execution of .ts files without compilation.\nSOURCE: https://github.com/lint-staged/lint-staged/blob/main/README.md#2025-04-21_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nexport NODE_OPTIONS=\"--experimental-strip-types\"\n\nnpx lint-staged --config lint-staged.config.ts\n```\n\n----------------------------------------\n\nTITLE: Example lint-staged output during git commit\nDESCRIPTION: This snippet shows the typical output of lint-staged when running tasks on staged files during a git commit. It demonstrates how lint-staged backs up the original state, runs tasks for different file types, and applies modifications.\nSOURCE: https://github.com/lint-staged/lint-staged/blob/main/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ git commit\n\n✔ Backed up original state in git stash (5bda95f)\n❯ Running tasks for staged files...\n  ❯ packages/frontend/.lintstagedrc.json — 1 file\n    ↓ *.js — no files [SKIPPED]\n    ❯ *.{json,md} — 1 file\n      ⠹ prettier --write\n  ↓ packages/backend/.lintstagedrc.json — 2 files\n    ❯ *.js — 2 files\n      ⠼ eslint --fix\n    ↓ *.{json,md} — no files [SKIPPED]\n◼ Applying modifications from tasks...\n◼ Cleaning up temporary files...\n```\n\n----------------------------------------\n\nTITLE: Configuring lint-staged with JSON for Custom Scripts\nDESCRIPTION: Example of a lint-staged configuration in package.json that demonstrates how to run custom npm scripts against staged JavaScript files before Git commits.\nSOURCE: https://github.com/lint-staged/lint-staged/blob/main/CHANGELOG.md#2025-04-21_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"My project\",\n  \"version\": \"0.1.0\",\n  \"scripts\": {\n    \"my-custom-script\": \"linter --arg1 --arg2\",\n    \"precommit\": \"lint-staged\"\n  },\n  \"lint-staged\": {\n    \"*.js\": [\"my-custom-script\", \"git add\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Supporting Async Function Tasks in JavaScript\nDESCRIPTION: Added support for async function tasks in lint-staged, allowing for more flexible task definitions.\nSOURCE: https://github.com/lint-staged/lint-staged/blob/main/CHANGELOG.md#2025-04-21_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\nsupport async function tasks ([20d5c5d](https://github.com/okonet/lint-staged/commit/20d5c5d4cb92f9a4c501e5308cc51379d10581a8))\n```\n\n----------------------------------------\n\nTITLE: Splitting Tasks into Chunks in JavaScript\nDESCRIPTION: Feature to split tasks into chunks to support shells with limited max argument length, improving compatibility with different environments.\nSOURCE: https://github.com/lint-staged/lint-staged/blob/main/CHANGELOG.md#2025-04-21_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\nsplit tasks into chunks to support shells with limited max argument length ([#732](https://github.com/okonet/lint-staged/issues/732)) ([cb43872](https://github.com/okonet/lint-staged/commit/cb43872fb6c05366a8fc25a8bd889b95918f45a3))\n```\n\n----------------------------------------\n\nTITLE: Creating a Shell Script for Migrating from --shell Option in Lint-Staged v16\nDESCRIPTION: Example of creating a shell script to migrate from the removed --shell option in lint-staged v16. The script receives staged files as arguments, accessible via \"$@\".\nSOURCE: https://github.com/lint-staged/lint-staged/blob/main/MIGRATION.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n# my-script.sh\n#!/bin/bash\n\necho \"Staged files: $@\"\n```\n\n----------------------------------------\n\nTITLE: Using Function Syntax in Lint-Staged for Non-File Commands\nDESCRIPTION: JavaScript configuration example showing how to use the function syntax to run commands that don't require file arguments (like TypeScript compilation).\nSOURCE: https://github.com/lint-staged/lint-staged/blob/main/MIGRATION.md#2025-04-21_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nexport default { '*.ts': () => 'tsc --noEmit' }\n```\n\n----------------------------------------\n\nTITLE: Configuring Lint-Staged to Use a Shell Script\nDESCRIPTION: JSON configuration showing how to reference a shell script in lint-staged configuration for handling JavaScript files after the removal of the --shell option.\nSOURCE: https://github.com/lint-staged/lint-staged/blob/main/MIGRATION.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{ \"*.js\": \"my-script.sh\" }\n```\n\n----------------------------------------\n\nTITLE: Avoiding Race Conditions with Overlapping Globs\nDESCRIPTION: Example showing a problematic configuration where prettier and eslint might cause race conditions by editing the same files simultaneously.\nSOURCE: https://github.com/lint-staged/lint-staged/blob/main/README.md#2025-04-21_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"*\": \"prettier --write\",\n  \"*.ts\": \"eslint --fix\"\n}\n```\n\n----------------------------------------\n\nTITLE: Fixing Git Hook Output Display Issues in Shell\nDESCRIPTION: Shell script for redirecting output in Git hooks to fix rendering issues introduced in Git 2.36.0 where hooks were no longer run in the original TTY. This script should be added to the pre-commit hook file.\nSOURCE: https://github.com/lint-staged/lint-staged/blob/main/README.md#2025-04-21_snippet_16\n\nLANGUAGE: shell\nCODE:\n```\n# .husky/pre-commit\n\nif sh -c \": >/dev/tty\" >/dev/null 2>/dev/null; then exec >/dev/tty 2>&1; fi\n\nnpx lint-staged\n```\n\n----------------------------------------\n\nTITLE: Throwing Error for Empty Commits in JavaScript\nDESCRIPTION: New feature that throws an error to prevent empty commits unless --allow-empty flag is used. This changes the default behavior to throw an error with a warning message when a linter task reverts all staged changes.\nSOURCE: https://github.com/lint-staged/lint-staged/blob/main/CHANGELOG.md#2025-04-21_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nthrow error to prevent empty commits unless --allow-empty is used ([#762](https://github.com/okonet/lint-staged/issues/762)) ([8bdeec0](https://github.com/okonet/lint-staged/commit/8bdeec067f425150722bd0ee78e310e0992a1444))\n```\n\n----------------------------------------\n\nTITLE: Running npm Scripts with lint-staged in Updated Format\nDESCRIPTION: Updated configuration format for running npm scripts in lint-staged, showing how to correctly reference npm scripts after the removal of implicit npm script support.\nSOURCE: https://github.com/lint-staged/lint-staged/blob/main/CHANGELOG.md#2025-04-21_snippet_9\n\nLANGUAGE: plaintext\nCODE:\n```\n\"*.js\": [\"npm run my-custom-script --\", \"git add\"]\n```\n\n----------------------------------------\n\nTITLE: Configuring lint-staged with YAML After Version 5\nDESCRIPTION: Simplified lint-staged configuration in YAML format for version 5.0 and later, which automatically resolves the git directory and allows using paths relative to the package.\nSOURCE: https://github.com/lint-staged/lint-staged/blob/main/CHANGELOG.md#2025-04-21_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\nlinters:\n  src/*.js:\n    - eslint --fix\n    - git add\n```\n\n----------------------------------------\n\nTITLE: TypeScript Configuration with JSDoc\nDESCRIPTION: Example of using TypeScript types in JavaScript configuration files using JSDoc syntax.\nSOURCE: https://github.com/lint-staged/lint-staged/blob/main/CHANGELOG.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * @filename: lint-staged.config.js\n * @type {import('lint-staged').Configuration}\n */\nexport default {\n  '*': 'prettier --write'\n}\n```\n\n----------------------------------------\n\nTITLE: JetBrains IDE Fix for Husky v1.x Using JSON\nDESCRIPTION: JSON configuration to work around a known issue in JetBrains IDEs when using Git hooks with Husky v1.x. This adds a post-commit hook to ensure the index is updated after lint-staged runs.\nSOURCE: https://github.com/lint-staged/lint-staged/blob/main/README.md#2025-04-21_snippet_20\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"husky\": {\n    \"hooks\": {\n      \"pre-commit\": \"lint-staged\",\n      \"post-commit\": \"git update-index --again\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: JetBrains IDE Fix for Husky v0.x Using JSON\nDESCRIPTION: JSON configuration to work around a known issue in JetBrains IDEs when using Git hooks with Husky v0.x. This adds npm scripts for pre-commit and post-commit hooks.\nSOURCE: https://github.com/lint-staged/lint-staged/blob/main/README.md#2025-04-21_snippet_21\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"scripts\": {\n    \"precommit\": \"lint-staged\",\n    \"postcommit\": \"git update-index --again\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring lint-staged with YAML Before Version 5\nDESCRIPTION: Example of a lint-staged configuration using YAML format before version 5.0, which required specifying the gitDir option and full paths relative to the git root.\nSOURCE: https://github.com/lint-staged/lint-staged/blob/main/CHANGELOG.md#2025-04-21_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\ngitDir: ../..\nlinters:\n  packages/prj/src/*.js:\n    - eslint --fix\n    - git add\n```\n\n----------------------------------------\n\nTITLE: Diff View of lint-staged Configuration Changes\nDESCRIPTION: Diff view showing the configuration changes required when upgrading from lint-staged version 4.3.0 to version 5.0, highlighting removal of gitDir option and path simplification.\nSOURCE: https://github.com/lint-staged/lint-staged/blob/main/CHANGELOG.md#2025-04-21_snippet_12\n\nLANGUAGE: diff\nCODE:\n```\n@@ -1,5 +1,4 @@\n-gitDir: ../..\n linters:\n-  packages/prj/src/*.js:\n+  src/*.js:\n     - eslint --fix\n     - git add\n```\n\n----------------------------------------\n\nTITLE: Installing lint-staged via npm\nDESCRIPTION: This command installs lint-staged as a dev dependency in your project. Note that additional setup is required after installation.\nSOURCE: https://github.com/lint-staged/lint-staged/blob/main/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save-dev lint-staged # requires further setup\n```\n\n----------------------------------------\n\nTITLE: Node.js TypeScript Execution Command\nDESCRIPTION: Shell command to enable TypeScript file execution in Node.js using experimental strip types flag.\nSOURCE: https://github.com/lint-staged/lint-staged/blob/main/CHANGELOG.md#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nexport NODE_OPTIONS=\"--experimental-strip-types\"\n\nnpx lint-staged --config lint-staged.config.ts\n```\n\n----------------------------------------\n\nTITLE: Lint-staged Backup Console Output\nDESCRIPTION: Example console output showing lint-staged's automatic git stash backup process.\nSOURCE: https://github.com/lint-staged/lint-staged/blob/main/CHANGELOG.md#2025-04-21_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\n% npx lint-staged\n✔ Backed up original state in git stash (20addf8)\n✔ Running tasks for staged files...\n✔ Applying modifications from tasks...\n✔ Cleaning up temporary files...\n```\n\n----------------------------------------\n\nTITLE: Git Stash List Example\nDESCRIPTION: Example output of git stash list command showing lint-staged's automatic backup.\nSOURCE: https://github.com/lint-staged/lint-staged/blob/main/CHANGELOG.md#2025-04-21_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\n% git stash list\nstash@{0}: lint-staged automatic backup (20addf8)\n```\n\n----------------------------------------\n\nTITLE: Error Message Example - Failed Staged Files\nDESCRIPTION: Example of error message shown when lint-staged fails to get staged files due to uninitialized submodule.\nSOURCE: https://github.com/lint-staged/lint-staged/blob/main/CHANGELOG.md#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n✖ Failed to get staged files!\n```"
  }
]