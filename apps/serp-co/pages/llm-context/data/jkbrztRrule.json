[
  {
    "owner": "jkbrzt",
    "repo": "rrule",
    "content": "TITLE: Initializing RRule Constructor in JavaScript\nDESCRIPTION: Creates a new RRule instance with the specified options. The options parameter defines the recurrence pattern, with freq being the only required option. The noCache parameter can be set to true to disable caching of results.\nSOURCE: https://github.com/jkbrzt/rrule/blob/master/README.md#2025-04-10_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nnew RRule(options[, noCache=false])\n```\n\n----------------------------------------\n\nTITLE: Retrieving All Occurrences with RRule in JavaScript\nDESCRIPTION: Demonstrates how to use the all() method to retrieve all dates matching a recurrence rule. Includes an optional iterator function that can limit the number of results returned.\nSOURCE: https://github.com/jkbrzt/rrule/blob/master/README.md#2025-04-10_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nrule.all()[(\n  '2012-02-01T10:30:00.000Z',\n  '2012-05-01T10:30:00.000Z',\n  '2012-07-01T10:30:00.000Z',\n  '2012-07-02T10:30:00.000Z')\n]\n\nrule.all(function (date, i) {\n  return i < 2\n})[('2012-02-01T10:30:00.000Z', '2012-05-01T10:30:00.000Z')]\n```\n\n----------------------------------------\n\nTITLE: Finding Date Occurrences Between a Range with RRule in JavaScript\nDESCRIPTION: Shows how to use the between() method to find all occurrences within a specified date range. The inc parameter determines whether to include boundary dates if they are occurrences.\nSOURCE: https://github.com/jkbrzt/rrule/blob/master/README.md#2025-04-10_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nrule.between(datetime(2012, 8, 1), datetime(2012, 9, 1))[\n  ('2012-08-27T10:30:00.000Z', '2012-08-31T10:30:00.000Z')\n]\n```\n\n----------------------------------------\n\nTITLE: RRuleSet Usage Example\nDESCRIPTION: Demonstrates how to create and use an RRuleSet with multiple rules and specific start dates.\nSOURCE: https://github.com/jkbrzt/rrule/blob/master/README.md#2025-04-10_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nvar rruleSet = new RRuleSet()\nvar start = datetime(2012, 2, 1, 10, 30)\n\n// Add a rrule to rruleSet\nrruleSet.rrule(\n  new RRule({\n    freq: RRule.MONTHLY,\n    count: 5,\n    dtstart: start,\n  })\n)\n\n// Add a date to rruleSet\nrruleSet.rdate(start)\n```\n\n----------------------------------------\n\nTITLE: Converting RRule to Natural Language Text\nDESCRIPTION: Shows how to convert an RRule instance to human-readable text format using the toText() method.\nSOURCE: https://github.com/jkbrzt/rrule/blob/master/README.md#2025-04-10_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nvar rule = new RRule({\n  freq: RRule.WEEKLY,\n  count: 23,\n})\nrule.toText()\n;('every week for 23 times')\n```\n\n----------------------------------------\n\nTITLE: Creating RRule from Natural Language Text\nDESCRIPTION: Examples of creating RRule instances from natural language text and parsing text into options.\nSOURCE: https://github.com/jkbrzt/rrule/blob/master/README.md#2025-04-10_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nrule = RRule.fromText('every day for 3 times')\n\noptions = RRule.parseText('every day for 3 times')\n// {freq: 3, count: \"3\"}\noptions.dtstart = datetime(2000, 2, 1)\nvar rule = new RRule(options)\n```\n\n----------------------------------------\n\nTITLE: Creating RRule from RFC String\nDESCRIPTION: Shows how to construct an RRule instance from an RFC-formatted string using both direct constructor and fromString method.\nSOURCE: https://github.com/jkbrzt/rrule/blob/master/README.md#2025-04-10_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nvar rule = RRule.fromString('DTSTART:20120201T093000Z\\nRRULE:FREQ=WEEKLY;')\n\n// This is equivalent\nvar rule = new RRule(\n  RRule.parseString('DTSTART:20120201T093000Z\\nRRULE:FREQ=WEEKLY')\n)\n```\n\n----------------------------------------\n\nTITLE: Parsing RFC String to RRule Options\nDESCRIPTION: Demonstrates parsing an RFC string into RRule options and creating a new rule with those options plus additional parameters.\nSOURCE: https://github.com/jkbrzt/rrule/blob/master/README.md#2025-04-10_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nvar options = RRule.parseString('FREQ=DAILY;INTERVAL=6')\noptions.dtstart = datetime(2000, 2, 1)\nvar rule = new RRule(options)\n```\n\n----------------------------------------\n\nTITLE: Converting RRule to iCalendar String Format in JavaScript\nDESCRIPTION: Demonstrates how to convert an RRule instance to its string representation according to the iCalendar RFC. Only explicitly specified options in the original configuration are included in the output.\nSOURCE: https://github.com/jkbrzt/rrule/blob/master/README.md#2025-04-10_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nrule.toString()\n;('DTSTART:20120201T093000Z\\nRRULE:FREQ=WEEKLY;INTERVAL=5;UNTIL=20130130T230000Z;BYDAY=MO,FR')\n\nrule.toString() == RRule.optionsToString(rule.origOptions)\ntrue\n```\n\n----------------------------------------\n\nTITLE: Converting RRule Options to String\nDESCRIPTION: Demonstrates how to convert RRule options to iCalendar RFC RRULE string format. Shows both full option conversion and selective option conversion.\nSOURCE: https://github.com/jkbrzt/rrule/blob/master/README.md#2025-04-10_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nRRule.optionsToString(rule.options);\n;('DTSTART:20120201T093000Z\\nRRULE:FREQ=WEEKLY;INTERVAL=5;WKST=0;UNTIL=20130130T230000Z;BYDAY=MO,FR;BYHOUR=10;BYMINUTE=30;BYSECOND=0')\n\nRRule.optionsToString({\n  freq: rule.options.freq,\n  dtstart: rule.options.dtstart,\n});\n;('DTSTART:20120201T093000Z\\nRRULE:FREQ=WEEKLY;')\n```"
  }
]