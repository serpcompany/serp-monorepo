[
  {
    "owner": "stretchr",
    "repo": "testify",
    "content": "TITLE: Using Assert Package in Go Tests\nDESCRIPTION: Demonstrates how to use the assert package to write readable test assertions in Go. The example shows various assertion methods including Equal, NotEqual, Nil, and NotNil to validate test conditions with clear error messaging.\nSOURCE: https://github.com/stretchr/testify/blob/master/README.md#2025-04-11_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage yours\n\nimport (\n\t\"testing\"\n\n\t\"github.com/stretchr/testify/assert\"\n)\n\nfunc TestSomething(t *testing.T) {\n\t// assert equality\n\tassert.Equal(t, 123, 123, \"they should be equal\")\n\n\t// assert inequality\n\tassert.NotEqual(t, 123, 456, \"they should not be equal\")\n\n\t// assert for nil (good for errors)\n\tassert.Nil(t, object)\n\n\t// assert for not nil (good when you expect something)\n\tif assert.NotNil(t, object) {\n\t\t// now we know that object isn't nil, we are safe to make\n\t\t// further assertions without causing any errors\n\t\tassert.Equal(t, \"Something\", object.Value)\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Using Mock Package in Go Tests\nDESCRIPTION: Demonstrates how to use the mock package to create mock objects for testing. The example includes defining a mock object, setting up expectations, and verifying that expected methods were called during testing.\nSOURCE: https://github.com/stretchr/testify/blob/master/README.md#2025-04-11_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage yours\n\nimport (\n\t\"testing\"\n\n\t\"github.com/stretchr/testify/mock\"\n)\n\n/*\n  Test objects\n*/\n\n// MyMockedObject is a mocked object that implements an interface\n// that describes an object that the code I am testing relies on.\ntype MyMockedObject struct {\n\tmock.Mock\n}\n\n// DoSomething is a method on MyMockedObject that implements some interface\n// and just records the activity, and returns what the Mock object tells it to.\n//\n// In the real object, this method would do something useful, but since this\n// is a mocked object - we're just going to stub it out.\n//\n// NOTE: This method is not being tested here, code that uses this object is.\nfunc (m *MyMockedObject) DoSomething(number int) (bool, error) {\n\targs := m.Called(number)\n\treturn args.Bool(0), args.Error(1)\n}\n\n/*\n  Actual test functions\n*/\n\n// TestSomething is an example of how to use our test object to\n// make assertions about some target code we are testing.\nfunc TestSomething(t *testing.T) {\n\t// create an instance of our test object\n\ttestObj := new(MyMockedObject)\n\n\t// set up expectations\n\ttestObj.On(\"DoSomething\", 123).Return(true, nil)\n\n\t// call the code we are testing\n\ttargetFuncThatDoesSomethingWithObj(testObj)\n\n\t// assert that the expectations were met\n\ttestObj.AssertExpectations(t)\n}\n\n// TestSomethingWithPlaceholder is a second example of how to use our test object to\n// make assertions about some target code we are testing.\n// This time using a placeholder. Placeholders might be used when the\n// data being passed in is normally dynamically generated and cannot be\n// predicted beforehand (eg. containing hashes that are time sensitive)\nfunc TestSomethingWithPlaceholder(t *testing.T) {\n\t// create an instance of our test object\n\ttestObj := new(MyMockedObject)\n\n\t// set up expectations with a placeholder in the argument list\n\ttestObj.On(\"DoSomething\", mock.Anything).Return(true, nil)\n\n\t// call the code we are testing\n\ttargetFuncThatDoesSomethingWithObj(testObj)\n\n\t// assert that the expectations were met\n\ttestObj.AssertExpectations(t)\n\n}\n\n// TestSomethingElse2 is a third example that shows how you can use\n// the Unset method to cleanup handlers and then add new ones.\nfunc TestSomethingElse2(t *testing.T) {\n\t// create an instance of our test object\n\ttestObj := new(MyMockedObject)\n\n\t// set up expectations with a placeholder in the argument list\n\tmockCall := testObj.On(\"DoSomething\", mock.Anything).Return(true, nil)\n\n\t// call the code we are testing\n\ttargetFuncThatDoesSomethingWithObj(testObj)\n\n\t// assert that the expectations were met\n\ttestObj.AssertExpectations(t)\n\n\t// remove the handler now so we can add another one that takes precedence\n\tmockCall.Unset()\n\n\t// return false now instead of true\n\ttestObj.On(\"DoSomething\", mock.Anything).Return(false, nil)\n\n\ttestObj.AssertExpectations(t)\n}\n```\n\n----------------------------------------\n\nTITLE: Using Suite Package in Go Tests\nDESCRIPTION: Shows how to use the suite package to create object-oriented style test suites in Go. The example demonstrates defining a test suite structure with setup methods and test cases, and how to run the suite with the standard Go testing framework.\nSOURCE: https://github.com/stretchr/testify/blob/master/README.md#2025-04-11_snippet_3\n\nLANGUAGE: go\nCODE:\n```\n// Basic imports\nimport (\n\t\"testing\"\n\n\t\"github.com/stretchr/testify/assert\"\n\t\"github.com/stretchr/testify/suite\"\n)\n\n// Define the suite, and absorb the built-in basic suite\n// functionality from testify - including a T() method which\n// returns the current testing context\ntype ExampleTestSuite struct {\n\tsuite.Suite\n\tVariableThatShouldStartAtFive int\n}\n\n// Make sure that VariableThatShouldStartAtFive is set to five\n// before each test\nfunc (suite *ExampleTestSuite) SetupTest() {\n\tsuite.VariableThatShouldStartAtFive = 5\n}\n\n// All methods that begin with \"Test\" are run as tests within a\n// suite.\nfunc (suite *ExampleTestSuite) TestExample() {\n\tassert.Equal(suite.T(), 5, suite.VariableThatShouldStartAtFive)\n}\n\n// In order for 'go test' to run this suite, we need to create\n// a normal test function and pass our suite to suite.Run\nfunc TestExampleTestSuite(t *testing.T) {\n\tsuite.Run(t, new(ExampleTestSuite))\n}\n```\n\n----------------------------------------\n\nTITLE: Using Assert Instance in Go Tests\nDESCRIPTION: Shows how to create an assert instance to simplify multiple assertions in a test. This approach reduces repetition by initializing the assert object once with the testing context.\nSOURCE: https://github.com/stretchr/testify/blob/master/README.md#2025-04-11_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage yours\n\nimport (\n\t\"testing\"\n\n\t\"github.com/stretchr/testify/assert\"\n)\n\nfunc TestSomething(t *testing.T) {\n\tassert := assert.New(t)\n\n\t// assert equality\n\tassert.Equal(123, 123, \"they should be equal\")\n\n\t// assert inequality\n\tassert.NotEqual(123, 456, \"they should not be equal\")\n\n\t// assert for nil (good for errors)\n\tassert.Nil(object)\n\n\t// assert for not nil (good when you expect something)\n\tif assert.NotNil(object) {\n\t\t// now we know that object isn't nil, we are safe to make\n\t\t// further assertions without causing any errors\n\t\tassert.Equal(\"Something\", object.Value)\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Running Testify Test Suite with Go Test\nDESCRIPTION: Shows how to create the main test function that allows the test suite to be run with 'go test'. Creates a new test suite instance and runs it.\nSOURCE: https://github.com/stretchr/testify/blob/master/README.md#2025-04-11_snippet_7\n\nLANGUAGE: go\nCODE:\n```\nfunc TestExampleTestSuite(t *testing.T) {\n\tsuite.Run(t, new(ExampleTestSuite))\n}\n```\n\n----------------------------------------\n\nTITLE: Using Suite with Built-in Assertions in Go Tests\nDESCRIPTION: Demonstrates how to use the suite package with its built-in assertion methods. The suite.Suite embedding provides direct access to assertion methods without needing to import the assert package separately.\nSOURCE: https://github.com/stretchr/testify/blob/master/README.md#2025-04-11_snippet_4\n\nLANGUAGE: go\nCODE:\n```\n// Basic imports\nimport (\n\t\"testing\"\n\n\t\"github.com/stretchr/testify/suite\"\n)\n\n// Define the suite, and absorb the built-in basic suite\n// functionality from testify - including assertion methods.\ntype ExampleTestSuite struct {\n\tsuite.Suite\n\tVariableThatShouldStartAtFive int\n}\n\n// Make sure that VariableThatShouldStartAtFive is set to five\n```\n\n----------------------------------------\n\nTITLE: Basic Testify Assert Usage Example\nDESCRIPTION: Shows how to import and use the Testify assert package in a Go test file. Demonstrates a simple assertion using assert.True.\nSOURCE: https://github.com/stretchr/testify/blob/master/README.md#2025-04-11_snippet_8\n\nLANGUAGE: go\nCODE:\n```\npackage yours\n\nimport (\n\t\"testing\"\n\n\t\"github.com/stretchr/testify/assert\"\n)\n\nfunc TestSomething(t *testing.T) {\n\tassert.True(t, true, \"True is true!\")\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Test Suite Setup in Go with Testify\nDESCRIPTION: Example showing how to implement a test suite setup method that runs before each test. Sets up initial test state by initializing a variable to 5.\nSOURCE: https://github.com/stretchr/testify/blob/master/README.md#2025-04-11_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nfunc (suite *ExampleTestSuite) SetupTest() {\n\tsuite.VariableThatShouldStartAtFive = 5\n}\n```\n\n----------------------------------------\n\nTITLE: Writing Test Methods in Testify Test Suite\nDESCRIPTION: Demonstrates how to write a test method within a test suite. Uses the Equal assertion to verify the test variable's value.\nSOURCE: https://github.com/stretchr/testify/blob/master/README.md#2025-04-11_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nfunc (suite *ExampleTestSuite) TestExample() {\n\tsuite.Equal(suite.VariableThatShouldStartAtFive, 5)\n}\n```"
  }
]