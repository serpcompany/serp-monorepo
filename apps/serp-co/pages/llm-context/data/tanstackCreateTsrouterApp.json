[
  {
    "owner": "tanstack",
    "repo": "create-tsrouter-app",
    "content": "TITLE: Running create-tsrouter-app with Command Line Options in Bash\nDESCRIPTION: Example command showing how to use create-tsrouter-app with various command line flags to specify preferences directly without interactive prompts.\nSOURCE: https://github.com/tanstack/create-tsrouter-app/blob/main/cli/create-tsrouter-app/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npnpx create-tsrouter-app@latest my-app --template file-router --tailwind --package-manager pnpm\n```\n\n----------------------------------------\n\nTITLE: Creating TanStack Router App with Command Line Options\nDESCRIPTION: Example command showing how to create a TanStack Router application with specific options including template type, Tailwind CSS support, and package manager preference.\nSOURCE: https://github.com/tanstack/create-tsrouter-app/blob/main/cli/create-tanstack/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npnpx create-tanstack@latest my-app --template file-router --tailwind --package-manager pnpm\n```\n\n----------------------------------------\n\nTITLE: Running the create-tsrouter-app CLI Interactively in Bash\nDESCRIPTION: Command to start the create-tsrouter-app CLI in interactive mode, prompting the user for project setup options.\nSOURCE: https://github.com/tanstack/create-tsrouter-app/blob/main/cli/create-tsrouter-app/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpx create-tsrouter-app@latest\n```\n\n----------------------------------------\n\nTITLE: Running Interactive TanStack Router App Creation\nDESCRIPTION: Basic command to start the interactive CLI for creating a TanStack Router application, which guides users through the setup process for configuring project details, router type, and other options.\nSOURCE: https://github.com/tanstack/create-tsrouter-app/blob/main/cli/create-tanstack/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpx create-tanstack@latest\n```\n\n----------------------------------------\n\nTITLE: Basic CLI Usage - Creating TanStack Router App\nDESCRIPTION: Basic command to start the interactive CLI setup process for creating a new TanStack Router application.\nSOURCE: https://github.com/tanstack/create-tsrouter-app/blob/main/cli/create-start-app/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpx create-start-app@latest\n```\n\n----------------------------------------\n\nTITLE: Installing Specific Add-ons in create-tsrouter-app\nDESCRIPTION: Command to create a new TanStack Router project with specific add-ons (shadcn and tanstack-query) specified directly.\nSOURCE: https://github.com/tanstack/create-tsrouter-app/blob/main/cli/create-tsrouter-app/README.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\npnpx create-tsrouter-app@latest my-app --add-ons shadcn,tanstack-query\n```\n\n----------------------------------------\n\nTITLE: Installing Specific Add-ons for TanStack Application\nDESCRIPTION: Command to create a TanStack Router application with specific add-ons (shadcn and tanstack-query) specified as a comma-separated list.\nSOURCE: https://github.com/tanstack/create-tsrouter-app/blob/main/cli/create-tanstack/README.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\npnpx create-tanstack@latest my-app --add-ons shadcn,tanstack-query\n```\n\n----------------------------------------\n\nTITLE: Add-ons Installation Command\nDESCRIPTION: Command to create a new application with specific add-ons like shadcn and tanstack-query.\nSOURCE: https://github.com/tanstack/create-tsrouter-app/blob/main/cli/create-start-app/README.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpx create-start-app@latest my-app --add-ons shadcn,tanstack-query\n```\n\n----------------------------------------\n\nTITLE: Creating Various App Configurations with create-tsrouter-app\nDESCRIPTION: Table of commands for creating different app configurations, including JavaScript, TypeScript, Tailwind CSS, and File Based Routing options.\nSOURCE: https://github.com/tanstack/create-tsrouter-app/blob/main/CONTRIBUTING.md#2025-04-21_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n| Command                                                  | Description                                                        |\n| -------------------------------------------------------- | ------------------------------------------------------------------ |\n| `pnpm start app-js`                                      | Creates a JavaScript app                                           |\n| `pnpm start app-ts --template typescript`                | Creates a TypeScript app                                           |\n| `pnpm start app-js-tw --tailwind`                        | Creates a JavaScript app with Tailwind CSS                         |\n| `pnpm start app-ts-tw --template typescript --tailwind`  | Creates a TypeScript app with Tailwind CSS                         |\n| `pnpm start app-fr --template file-router`               | Creates a TypeScript app with File Based Routing                   |\n| `pnpm start app-fr-tw --template file-router --tailwind` | Creates a TypeScript app with File Based Routing with Tailwind CSS |\n```\n\n----------------------------------------\n\nTITLE: Creating a File-Based Router Project with TanStack in Bash\nDESCRIPTION: Command to explicitly create a new TanStack Router project using file-based routing, which is the recommended approach.\nSOURCE: https://github.com/tanstack/create-tsrouter-app/blob/main/cli/create-tsrouter-app/README.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpx create-tsrouter-app@latest my-app --template file-router\n```\n\n----------------------------------------\n\nTITLE: Creating File Based Router Application\nDESCRIPTION: Command to explicitly create a TanStack Router application using the file-based routing approach, which organizes routes based on the file structure.\nSOURCE: https://github.com/tanstack/create-tsrouter-app/blob/main/cli/create-tanstack/README.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpx create-tanstack@latest my-app --template file-router\n```\n\n----------------------------------------\n\nTITLE: Creating a TypeScript-Based Router Project in Bash\nDESCRIPTION: Command to create a new TanStack Router project with code-based routing using TypeScript as the language.\nSOURCE: https://github.com/tanstack/create-tsrouter-app/blob/main/cli/create-tsrouter-app/README.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npnpx create-tsrouter-app@latest my-app --template typescript\n```\n\n----------------------------------------\n\nTITLE: Creating TypeScript-Based Router Application\nDESCRIPTION: Command to create a TanStack Router application with TypeScript and code-based routing, providing type safety for application development.\nSOURCE: https://github.com/tanstack/create-tsrouter-app/blob/main/cli/create-tanstack/README.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npnpx create-tanstack@latest my-app --template typescript\n```\n\n----------------------------------------\n\nTITLE: Advanced CLI Usage with Options\nDESCRIPTION: Example of creating a new application with specific package manager and Tailwind CSS configuration using command line flags.\nSOURCE: https://github.com/tanstack/create-tsrouter-app/blob/main/cli/create-start-app/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npnpx create-start-app@latest my-app --tailwind --package-manager pnpm\n```\n\n----------------------------------------\n\nTITLE: Listing Available Add-ons for React in Bash\nDESCRIPTION: Command to display all available add-ons for React that are compatible with the Code Router.\nSOURCE: https://github.com/tanstack/create-tsrouter-app/blob/main/cli/create-tsrouter-app/README.md#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\npnpx create-tsrouter-app@latest --list-add-ons\n```\n\n----------------------------------------\n\nTITLE: Listing Available Add-ons for TanStack\nDESCRIPTION: Command to display all available add-ons for React applications compatible with the Code Router, helping users see what extensions are available.\nSOURCE: https://github.com/tanstack/create-tsrouter-app/blob/main/cli/create-tanstack/README.md#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\npnpx create-tanstack@latest --list-add-ons\n```\n\n----------------------------------------\n\nTITLE: List Available Add-ons Commands\nDESCRIPTION: Commands to list all available add-ons for different frameworks.\nSOURCE: https://github.com/tanstack/create-tsrouter-app/blob/main/cli/create-start-app/README.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npnpx create-start-app@latest --list-add-ons\n```\n\nLANGUAGE: bash\nCODE:\n```\npnpx create-start-app@latest --list-add-ons --framework solid\n```\n\n----------------------------------------\n\nTITLE: Listing Add-ons for Solid Framework with File Router\nDESCRIPTION: Command to show all available add-ons for Solid framework that are compatible with the File Router.\nSOURCE: https://github.com/tanstack/create-tsrouter-app/blob/main/cli/create-tsrouter-app/README.md#2025-04-21_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\npnpx create-tsrouter-app@latest --list-add-ons --framework solid --template file-router\n```\n\n----------------------------------------\n\nTITLE: Listing Framework-Specific Add-ons\nDESCRIPTION: Command to list all available add-ons specifically for Solid framework with the File Router template, showing compatibility-filtered options.\nSOURCE: https://github.com/tanstack/create-tsrouter-app/blob/main/cli/create-tanstack/README.md#2025-04-21_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\npnpx create-tanstack@latest --list-add-ons --framework solid --template file-router\n```\n\n----------------------------------------\n\nTITLE: Enabling Add-on Selection in create-tsrouter-app CLI\nDESCRIPTION: Command to enable the experimental add-on selection feature in the create-tsrouter-app CLI.\nSOURCE: https://github.com/tanstack/create-tsrouter-app/blob/main/cli/create-tsrouter-app/README.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\npnpx create-tsrouter-app@latest --add-ons\n```\n\n----------------------------------------\n\nTITLE: Creating Application with Add-ons Support\nDESCRIPTION: Command to enable the add-on selection feature during application creation, allowing users to choose from available add-ons for their project.\nSOURCE: https://github.com/tanstack/create-tsrouter-app/blob/main/cli/create-tanstack/README.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\npnpx create-tanstack@latest --add-ons\n```\n\n----------------------------------------\n\nTITLE: Enabling MCP Support in create-tsrouter-app\nDESCRIPTION: Command to launch the create-tsrouter-app CLI with Model Context Protocol support for AI agent integration.\nSOURCE: https://github.com/tanstack/create-tsrouter-app/blob/main/cli/create-tsrouter-app/README.md#2025-04-21_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\npnpx create-tsrouter-app@latest --mcp\n```\n\n----------------------------------------\n\nTITLE: Installing Solid-UI Button Component with CLI\nDESCRIPTION: Command to install a button component from Solid-UI using the solidui-cli tool. This installation is modified to work with Tailwind V4.\nSOURCE: https://github.com/tanstack/create-tsrouter-app/blob/main/packages/cta-engine/templates/solid/add-on/solid-ui/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx solidui-cli@latest add button\n```\n\n----------------------------------------\n\nTITLE: Enabling MCP Support for TanStack CLI\nDESCRIPTION: Command to launch the create-tanstack CLI with Model Context Protocol support enabled, allowing integration with MCP-enabled IDEs for AI-assisted application generation.\nSOURCE: https://github.com/tanstack/create-tsrouter-app/blob/main/cli/create-tanstack/README.md#2025-04-21_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\npnpx create-tanstack@latest --mcp\n```\n\n----------------------------------------\n\nTITLE: MCP Configuration for IDE Integration\nDESCRIPTION: JSON configuration for enabling Model Context Protocol support in MCP-enabled IDEs to allow AI models to generate TanStack Router applications.\nSOURCE: https://github.com/tanstack/create-tsrouter-app/blob/main/cli/create-tsrouter-app/README.md#2025-04-21_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"mcpServers\": {\n    \"create-tsrouter-app\": {\n      \"command\": \"pnpx\",\n      \"args\": [\"create-tsrouter-app@latest\", \"--mcp\"]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring MCP for TanStack in JSON\nDESCRIPTION: JSON configuration for setting up Model Context Protocol support with create-tanstack CLI in MCP clients, defining the command and arguments needed for integration.\nSOURCE: https://github.com/tanstack/create-tsrouter-app/blob/main/cli/create-tanstack/README.md#2025-04-21_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"mcpServers\": {\n    \"create-tanstack\": {\n      \"command\": \"pnpx\",\n      \"args\": [\"create-tanstack@latest\", \"--mcp\"]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: MCP Configuration JSON\nDESCRIPTION: JSON configuration for setting up MCP support in MCP-enabled clients.\nSOURCE: https://github.com/tanstack/create-tsrouter-app/blob/main/cli/create-start-app/README.md#2025-04-21_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"mcpServers\": {\n    \"create-start-app\": {\n      \"command\": \"pnpx\",\n      \"args\": [\"create-start-app@latest\", \"--mcp\"]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Test App with create-tsrouter-app CLI\nDESCRIPTION: Example command to create a test app using the create-tsrouter-app CLI, specifying the working directory and target directory.\nSOURCE: https://github.com/tanstack/create-tsrouter-app/blob/main/CONTRIBUTING.md#2025-04-21_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\npnpm -C [root of the monorepo]/cli/create-tsrouter-app start --target-dir [temporary directory path]/app-js app-js\n```\n\n----------------------------------------\n\nTITLE: Running create-tsrouter-app CLI in Watch Mode\nDESCRIPTION: Commands to change directory to cta-engine package and start the CLI in watch mode for development.\nSOURCE: https://github.com/tanstack/create-tsrouter-app/blob/main/CONTRIBUTING.md#2025-04-21_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ncd ./packages/cta-engine && pnpm dev\n```\n\n----------------------------------------\n\nTITLE: Configuring Environment Variables for Anthropic API\nDESCRIPTION: Configuration file setup for the AI streaming service, requiring an Anthropic API key to be set in the .env.local file.\nSOURCE: https://github.com/tanstack/create-tsrouter-app/blob/main/packages/cta-engine/templates/solid/example/tanchat/README.md#2025-04-21_snippet_0\n\nLANGUAGE: env\nCODE:\n```\nANTHROPIC_API_KEY=your_anthropic_api_key\n```\n\n----------------------------------------\n\nTITLE: Configuring Environment Variables for Claude AI Integration\nDESCRIPTION: Sets up the necessary environment variable for Anthropic's API integration. The ANTHROPIC_API_KEY is required for authenticating with Claude's AI services.\nSOURCE: https://github.com/tanstack/create-tsrouter-app/blob/main/packages/cta-engine/templates/react/example/tanchat/README.md#2025-04-21_snippet_0\n\nLANGUAGE: env\nCODE:\n```\nANTHROPIC_API_KEY=your_anthropic_api_key\n```\n\n----------------------------------------\n\nTITLE: MCP Support Command\nDESCRIPTION: Command to enable Model Context Protocol support for IDE integration.\nSOURCE: https://github.com/tanstack/create-tsrouter-app/blob/main/cli/create-start-app/README.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\npnpx create-start-app@latest --mcp\n```\n\n----------------------------------------\n\nTITLE: Starting the AI Streaming Service\nDESCRIPTION: Commands to navigate to the service directory, install dependencies, and start the development server for the AI streaming service.\nSOURCE: https://github.com/tanstack/create-tsrouter-app/blob/main/packages/cta-engine/templates/solid/example/tanchat/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncd ai-streaming-service\nnpm install\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Initializing Convex Development Environment with CLI Commands\nDESCRIPTION: Commands for setting up and running a Convex development server, including initialization of environment variables and starting the development server\nSOURCE: https://github.com/tanstack/create-tsrouter-app/blob/main/packages/cta-engine/templates/react/add-on/convex/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx convex init\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpx convex dev\n```\n\n----------------------------------------\n\nTITLE: Installing Shadcn Button Component\nDESCRIPTION: Command to add the button component from the Shadcn UI library using pnpx package runner. Uses the latest version of shadcn to ensure up-to-date components.\nSOURCE: https://github.com/tanstack/create-tsrouter-app/blob/main/packages/cta-engine/templates/react/add-on/shadcn/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpx shadcn@latest add button\n```\n\n----------------------------------------\n\nTITLE: Installing Netlify CLI\nDESCRIPTION: Command to globally install the Netlify Command Line Interface tool using npm.\nSOURCE: https://github.com/tanstack/create-tsrouter-app/blob/main/packages/cta-engine/templates/react/add-on/netlify/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install -g netlify-cli`\n```\n\n----------------------------------------\n\nTITLE: Importing and Using Type-Safe Environment Variables with T3Env in TypeScript\nDESCRIPTION: This snippet demonstrates how to import environment variables from the configured env.mjs file and use them in a type-safe manner. It shows the correct import syntax and a simple usage example.\nSOURCE: https://github.com/tanstack/create-tsrouter-app/blob/main/packages/cta-engine/templates/react/add-on/t3env/README.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { env } from \"@/env\";\n\nconsole.log(env.VITE_APP_TITLE);\n```\n\n----------------------------------------\n\nTITLE: Importing and Using Type-Safe Environment Variables with T3Env in TypeScript\nDESCRIPTION: This code demonstrates how to import the env object from the environment configuration file and access a typed environment variable. The example shows accessing the VITE_APP_TITLE variable with full type safety.\nSOURCE: https://github.com/tanstack/create-tsrouter-app/blob/main/packages/cta-engine/templates/solid/add-on/t3env/README.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { env } from \"@/env\";\n\nconsole.log(env.VITE_APP_TITLE);\n```\n\n----------------------------------------\n\nTITLE: Cloning the create-tsrouter-app Repository\nDESCRIPTION: Command to clone the create-tsrouter-app repository using GitHub CLI.\nSOURCE: https://github.com/tanstack/create-tsrouter-app/blob/main/CONTRIBUTING.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngh repo clone TanStack/create-tsrouter-app\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for create-tsrouter-app\nDESCRIPTION: Command to install dependencies for all packages in the monorepo using pnpm.\nSOURCE: https://github.com/tanstack/create-tsrouter-app/blob/main/CONTRIBUTING.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npnpm install\n```\n\n----------------------------------------\n\nTITLE: Initializing Netlify Project\nDESCRIPTION: Command to initialize a Netlify project in the current directory, which starts the interactive setup process.\nSOURCE: https://github.com/tanstack/create-tsrouter-app/blob/main/packages/cta-engine/templates/react/add-on/netlify/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnetlify init\n```\n\n----------------------------------------\n\nTITLE: Building the create-tsrouter-app Project\nDESCRIPTION: Command to build the entire create-tsrouter-app project.\nSOURCE: https://github.com/tanstack/create-tsrouter-app/blob/main/CONTRIBUTING.md#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\npnpm build\n```\n\n----------------------------------------\n\nTITLE: Streaming API Client Implementation\nDESCRIPTION: TypeScript example showing how to consume the streaming API endpoint using fetch and process SSE responses.\nSOURCE: https://github.com/tanstack/create-tsrouter-app/blob/main/packages/cta-engine/templates/solid/example/tanchat/assets/ai-streaming-server/README.md#2025-04-21_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nconst response = await fetch(\"http://localhost:3000/api/chat\", {\n  method: \"POST\",\n  headers: {\n    \"Content-Type\": \"application/json\",\n  },\n  body: JSON.stringify({\n    messages: [{ role: \"user\", content: \"Hello, how are you?\" }],\n  }),\n});\n\nconst reader = response.body!.getReader();\nconst decoder = new TextDecoder();\n\nwhile (true) {\n  const { value, done } = await reader.read();\n  if (done) break;\n\n  const chunk = decoder.decode(value);\n  const lines = chunk.split(\"\\n\");\n\n  for (const line of lines) {\n    if (line.startsWith(\"data: \")) {\n      const data = JSON.parse(line.slice(6));\n      if (data === \"[DONE]\") break;\n\n      // Handle the streaming response chunk\n      console.log(data);\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Chat API Interface Definition\nDESCRIPTION: TypeScript interfaces defining the structure of chat messages and requests.\nSOURCE: https://github.com/tanstack/create-tsrouter-app/blob/main/packages/cta-engine/templates/solid/example/tanchat/assets/ai-streaming-server/README.md#2025-04-21_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\ninterface ChatMessage {\n  role: \"user\" | \"assistant\";\n  content: string;\n}\n\ninterface ChatRequest {\n  messages: ChatMessage[];\n}\n```\n\n----------------------------------------\n\nTITLE: Example Chat Request\nDESCRIPTION: JSON example of a chat request body.\nSOURCE: https://github.com/tanstack/create-tsrouter-app/blob/main/packages/cta-engine/templates/solid/example/tanchat/assets/ai-streaming-server/README.md#2025-04-21_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"messages\": [{ \"role\": \"user\", \"content\": \"Hello, how are you?\" }]\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies\nDESCRIPTION: Command to install project dependencies using npm.\nSOURCE: https://github.com/tanstack/create-tsrouter-app/blob/main/packages/cta-engine/templates/solid/example/tanchat/assets/ai-streaming-server/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Development Server Start\nDESCRIPTION: Command to run the server in development mode with auto-reload.\nSOURCE: https://github.com/tanstack/create-tsrouter-app/blob/main/packages/cta-engine/templates/solid/example/tanchat/assets/ai-streaming-server/README.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Production Server Start\nDESCRIPTION: Command to run the server in production mode.\nSOURCE: https://github.com/tanstack/create-tsrouter-app/blob/main/packages/cta-engine/templates/solid/example/tanchat/assets/ai-streaming-server/README.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Environment File Copy\nDESCRIPTION: Command to create environment configuration file from template.\nSOURCE: https://github.com/tanstack/create-tsrouter-app/blob/main/packages/cta-engine/templates/solid/example/tanchat/assets/ai-streaming-server/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncp .env.example .env\n```\n\n----------------------------------------\n\nTITLE: TypeScript Type Checking\nDESCRIPTION: Command to run TypeScript type checking.\nSOURCE: https://github.com/tanstack/create-tsrouter-app/blob/main/packages/cta-engine/templates/solid/example/tanchat/assets/ai-streaming-server/README.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm run typecheck\n```\n\n----------------------------------------\n\nTITLE: Production Build\nDESCRIPTION: Command to build TypeScript code for production.\nSOURCE: https://github.com/tanstack/create-tsrouter-app/blob/main/packages/cta-engine/templates/solid/example/tanchat/assets/ai-streaming-server/README.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Configuring Full Web Crawler Access in robots.txt\nDESCRIPTION: This robots.txt configuration allows all user agents (web crawlers) unrestricted access to the entire website. It specifies no disallowed paths, effectively granting full crawling permissions.\nSOURCE: https://github.com/tanstack/create-tsrouter-app/blob/main/packages/cta-engine/templates/react/base/public/robots.txt#2025-04-21_snippet_0\n\nLANGUAGE: robotstxt\nCODE:\n```\nUser-agent: *\nDisallow:\n```\n\n----------------------------------------\n\nTITLE: Configuring Web Crawler Access with robots.txt\nDESCRIPTION: This robots.txt configuration allows unrestricted access to all web crawlers. It uses the 'User-agent: *' directive to target all crawlers, and an empty 'Disallow:' directive to indicate no restrictions on site crawling.\nSOURCE: https://github.com/tanstack/create-tsrouter-app/blob/main/packages/cta-engine/templates/solid/base/public/robots.txt#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nUser-agent: *\nDisallow:\n```"
  }
]