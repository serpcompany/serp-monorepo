[
  {
    "owner": "erdewit",
    "repo": "ib_insync",
    "content": "TITLE: Downloading Historical Data with IB-insync in Python\nDESCRIPTION: Complete script demonstrating how to use IB-insync to connect to Interactive Brokers, request historical forex data for EURUSD, and convert the result to a pandas DataFrame.\nSOURCE: https://github.com/erdewit/ib_insync/blob/master/README.rst#2025-04-19_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom ib_insync import *\n# util.startLoop()  # uncomment this line when in a notebook\n\nib = IB()\nib.connect('127.0.0.1', 7497, clientId=1)\n\ncontract = Forex('EURUSD')\nbars = ib.reqHistoricalData(\n    contract, endDateTime='', durationStr='30 D',\n    barSizeSetting='1 hour', whatToShow='MIDPOINT', useRTH=True)\n\n# convert to pandas dataframe (pandas needs to be installed):\ndf = util.df(bars)\nprint(df)\n```\n\n----------------------------------------\n\nTITLE: Importing and Setting Up ib_insync in Jupyter Notebooks\nDESCRIPTION: Standard import pattern for notebooks that imports all components and starts an event loop to keep the notebook live updated. Note that startLoop() is only for notebooks.\nSOURCE: https://github.com/erdewit/ib_insync/blob/master/notebooks/basics.ipynb#2025-04-19_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom ib_insync import *\nutil.startLoop()\n```\n\n----------------------------------------\n\nTITLE: Creating Different Contract Types with ib_insync\nDESCRIPTION: Demonstrates various ways to define contracts including stocks, options, futures, forex, and bonds using the specialized contract classes provided by ib_insync.\nSOURCE: https://github.com/erdewit/ib_insync/blob/master/notebooks/basics.ipynb#2025-04-19_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nContract(conId=270639)\nStock('AMD', 'SMART', 'USD')\nStock('INTC', 'SMART', 'USD', primaryExchange='NASDAQ')\nForex('EURUSD')\nCFD('IBUS30')\nFuture('ES', '20180921', 'GLOBEX')\nOption('SPY', '20170721', 240, 'C', 'SMART')\nBond(secIdType='ISIN', secId='US03076KAA60');\n```\n\n----------------------------------------\n\nTITLE: Connecting to Interactive Brokers TWS/IBG with ib_insync\nDESCRIPTION: Creates an IB instance and establishes a connection to TWS or IB Gateway using the specified hostname, port, and client ID.\nSOURCE: https://github.com/erdewit/ib_insync/blob/master/notebooks/basics.ipynb#2025-04-19_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nib = IB()\nib.connect('127.0.0.1', 7497, clientId=10)\n```\n\n----------------------------------------\n\nTITLE: Fetching Consecutive Historical Data with ib_insync in Python\nDESCRIPTION: This snippet demonstrates how to fetch 1-minute bar data for Tesla stock from the earliest available date up to the present using ib_insync. It uses a loop to request historical data in 10-day chunks and saves the results to a CSV file.\nSOURCE: https://github.com/erdewit/ib_insync/blob/master/docs/recipes.rst#2025-04-19_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport datetime\nfrom ib_insync import *\n\nib = IB()\nib.connect('127.0.0.1', 7497, clientId=1)\n\ncontract = Stock('TSLA', 'SMART', 'USD')\n\ndt = ''\nbarsList = []\nwhile True:\n    bars = ib.reqHistoricalData(\n        contract,\n        endDateTime=dt,\n        durationStr='10 D',\n        barSizeSetting='1 min',\n        whatToShow='MIDPOINT',\n        useRTH=True,\n        formatDate=1)\n    if not bars:\n        break\n    barsList.append(bars)\n    dt = bars[0].date\n    print(dt)\n\n# save to CSV file\nallBars = [b for bars in reversed(barsList) for b in bars]\ndf = util.df(allBars)\ndf.to_csv(contract.symbol + '.csv', index=False)\n```\n\n----------------------------------------\n\nTITLE: Requesting Head Timestamp for TSLA Stock using ib_insync in Python\nDESCRIPTION: This code snippet shows how to request the earliest available date (head timestamp) for bar data of a specific stock (TSLA) using ib_insync.\nSOURCE: https://github.com/erdewit/ib_insync/blob/master/notebooks/bar_data.ipynb#2025-04-19_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ncontract = Stock('TSLA', 'SMART', 'USD')\n\nib.reqHeadTimeStamp(contract, whatToShow='TRADES', useRTH=True)\n```\n\n----------------------------------------\n\nTITLE: Connecting to Interactive Brokers using IB Insync in Python\nDESCRIPTION: This snippet shows how to import the IB Insync library, start the event loop, and connect to Interactive Brokers. It uses the local host IP and port 7497, which is typically used for paper trading.\nSOURCE: https://github.com/erdewit/ib_insync/blob/master/notebooks/ordering.ipynb#2025-04-19_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom ib_insync import *\nutil.startLoop()\n\nib = IB()\nib.connect('127.0.0.1', 7497, clientId=13)\n# util.logToConsole()\n```\n\n----------------------------------------\n\nTITLE: Placing an Order with IB Insync in Python\nDESCRIPTION: This snippet shows how to place an order using the placeOrder method of IB Insync. It returns a Trade object immediately, which contains all information related to the order.\nSOURCE: https://github.com/erdewit/ib_insync/blob/master/notebooks/ordering.ipynb#2025-04-19_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ntrade = ib.placeOrder(contract, order)\n```\n\n----------------------------------------\n\nTITLE: Exploring the ib_insync Package Contents in Python\nDESCRIPTION: Shows how to import the ib_insync package and display all available components using the __all__ attribute.\nSOURCE: https://github.com/erdewit/ib_insync/blob/master/notebooks/basics.ipynb#2025-04-19_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport ib_insync\nprint(ib_insync.__all__)\n```\n\n----------------------------------------\n\nTITLE: Requesting Market Data for Forex Contracts with IB Insync in Python\nDESCRIPTION: This snippet requests streaming market data for the previously created Forex contracts. It uses the reqMktData method to start the data stream for each contract.\nSOURCE: https://github.com/erdewit/ib_insync/blob/master/notebooks/tick_data.ipynb#2025-04-19_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfor contract in contracts:\n    ib.reqMktData(contract, '', False, False)\n```\n\n----------------------------------------\n\nTITLE: Initializing IB Connection with ib_insync in Python\nDESCRIPTION: This snippet demonstrates how to import necessary modules and establish a connection to Interactive Brokers using ib_insync library.\nSOURCE: https://github.com/erdewit/ib_insync/blob/master/notebooks/bar_data.ipynb#2025-04-19_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom ib_insync import *\nutil.startLoop()\n\nib = IB()\nib.connect('127.0.0.1', 7497, clientId=14)\n```\n\n----------------------------------------\n\nTITLE: Converting Bar Data to DataFrame and Displaying in Python\nDESCRIPTION: This snippet demonstrates how to convert the list of bars to a pandas DataFrame and display the first and last rows of the data.\nSOURCE: https://github.com/erdewit/ib_insync/blob/master/notebooks/bar_data.ipynb#2025-04-19_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ndf = util.df(bars)\n\ndisplay(df.head())\ndisplay(df.tail())\n```\n\n----------------------------------------\n\nTITLE: Placing a Blocking Market Order with IB Insync in Python\nDESCRIPTION: This code shows how to place a market order and wait for it to be either filled or canceled. It uses a while loop and the waitOnUpdate method to block until the order is done.\nSOURCE: https://github.com/erdewit/ib_insync/blob/master/notebooks/ordering.ipynb#2025-04-19_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n%%time\norder = MarketOrder('BUY', 100)\n\ntrade = ib.placeOrder(contract, order)\nwhile not trade.isDone():\n    ib.waitOnUpdate()\n```\n\n----------------------------------------\n\nTITLE: Retrieving Current Positions with ib_insync\nDESCRIPTION: Gets the current positions from the connected TWS/IBG instance, demonstrating how to access the current state data.\nSOURCE: https://github.com/erdewit/ib_insync/blob/master/notebooks/basics.ipynb#2025-04-19_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nib.positions()\n```\n\n----------------------------------------\n\nTITLE: Fetching Consecutive Historical Data with ib_insync in Python\nDESCRIPTION: This snippet demonstrates how to fetch 1-minute bar data for Tesla stock by requesting data incrementally further back in time until all available data is retrieved. The data is then saved to a CSV file.\nSOURCE: https://github.com/erdewit/ib_insync/blob/master/docs/html/_sources/recipes.rst.txt#2025-04-19_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport datetime\nfrom ib_insync import *\n\nib = IB()\nib.connect('127.0.0.1', 7497, clientId=1)\n\ncontract = Stock('TSLA', 'SMART', 'USD')\n\ndt = ''\nbarsList = []\nwhile True:\n    bars = ib.reqHistoricalData(\n        contract,\n        endDateTime=dt,\n        durationStr='10 D',\n        barSizeSetting='1 min',\n        whatToShow='MIDPOINT',\n        useRTH=True,\n        formatDate=1)\n    if not bars:\n        break\n    barsList.append(bars)\n    dt = bars[0].date\n    print(dt)\n\n# save to CSV file\nallBars = [b for bars in reversed(barsList) for b in bars]\ndf = util.df(allBars)\ndf.to_csv(contract.symbol + '.csv', index=False)\n```\n\n----------------------------------------\n\nTITLE: Creating and Placing a Limit Order with IB Insync in Python\nDESCRIPTION: This code creates a limit order to buy 20,000 units at a price of 0.05 (an unrealistic limit) and places it using IB Insync. It then checks the status of the trade after a short delay.\nSOURCE: https://github.com/erdewit/ib_insync/blob/master/notebooks/ordering.ipynb#2025-04-19_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nlimitOrder = LimitOrder('BUY', 20000, 0.05)\nlimitTrade = ib.placeOrder(contract, limitOrder)\n\nlimitTrade\n\nib.sleep(1)\nassert limitTrade.orderStatus.status == 'Submitted'\n\nassert limitTrade in ib.openTrades()\n```\n\n----------------------------------------\n\nTITLE: Requesting Tick-by-Tick Data with IB Insync in Python\nDESCRIPTION: This snippet demonstrates how to request and display tick-by-tick data for a specific Forex contract (EURUSD). It uses the reqTickByTickData method to fetch bid-ask ticks and then cancels the subscription after a short delay.\nSOURCE: https://github.com/erdewit/ib_insync/blob/master/notebooks/tick_data.ipynb#2025-04-19_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nticker = ib.reqTickByTickData(eurusd, 'BidAsk')\nib.sleep(2)\nprint(ticker)\n\nib.cancelTickByTickData(ticker.contract, 'BidAsk')\n```\n\n----------------------------------------\n\nTITLE: Building Option Contracts with Filters\nDESCRIPTION: Creates option contracts based on the specified filters: strikes within +/- 20 of current SPX value, multiples of 5, the next three monthly expirations, and both puts and calls.\nSOURCE: https://github.com/erdewit/ib_insync/blob/master/notebooks/option_chain.ipynb#2025-04-19_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nstrikes = [strike for strike in chain.strikes\n        if strike % 5 == 0\n        and spxValue - 20 < strike < spxValue + 20]\nexpirations = sorted(exp for exp in chain.expirations)[:3]\nrights = ['P', 'C']\n\ncontracts = [Option('SPX', expiration, strike, right, 'SMART', tradingClass='SPX')\n        for right in rights\n        for expiration in expirations\n        for strike in strikes]\n\ncontracts = ib.qualifyContracts(*contracts)\nlen(contracts)\n```\n\n----------------------------------------\n\nTITLE: Plotting Close Prices from Bar Data using Pandas in Python\nDESCRIPTION: This snippet shows how to plot the close prices from the bar data using the plot function from pandas.\nSOURCE: https://github.com/erdewit/ib_insync/blob/master/notebooks/bar_data.ipynb#2025-04-19_snippet_6\n\nLANGUAGE: python\nCODE:\n```\ndf.plot(y='close');\n```\n\n----------------------------------------\n\nTITLE: Option Calculations with ib_insync in Python\nDESCRIPTION: This snippet demonstrates how to calculate implied volatility from option price and underlying price, and how to calculate option price from volatility and underlying price using ib_insync.\nSOURCE: https://github.com/erdewit/ib_insync/blob/master/docs/html/_sources/recipes.rst.txt#2025-04-19_snippet_3\n\nLANGUAGE: python\nCODE:\n```\noption = Option('EOE', '20171215', 490, 'P', 'FTA', multiplier=100)\n\ncalc = ib.calculateImpliedVolatility(\n    option, optionPrice=6.1, underPrice=525)\nprint(calc)\n\ncalc = ib.calculateOptionPrice(\n    option, volatility=0.14, underPrice=525)\nprint(calc)\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Stock Scanner for Top Percentage Gainers\nDESCRIPTION: Demonstrates creating a simple ScannerSubscription to find top percentage gaining stocks in US major exchanges. This example shows the three required parameters for any scanner: instrument, locationCode, and scanCode.\nSOURCE: https://github.com/erdewit/ib_insync/blob/master/notebooks/scanners.ipynb#2025-04-19_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nsub = ScannerSubscription(\n    instrument='STK', \n    locationCode='STK.US.MAJOR', \n    scanCode='TOP_PERC_GAIN')\n\nscanData = ib.reqScannerData(sub)\n\nprint(f'{len(scanData)} results, first one:')\nprint(scanData[0])\n```\n\n----------------------------------------\n\nTITLE: Retrieving Fundamental Ratios with ib_insync in Python\nDESCRIPTION: This snippet shows how to request fundamental ratios for IBM stock using market data type 258, which provides various financial metrics and ratios.\nSOURCE: https://github.com/erdewit/ib_insync/blob/master/docs/html/_sources/recipes.rst.txt#2025-04-19_snippet_10\n\nLANGUAGE: python\nCODE:\n```\ncontract = Stock('IBM', 'SMART', 'USD')\nticker = ib.reqMktData(contract, '258')\nib.sleep(2)\nprint(ticker.fundamentalRatios)\n```\n\n----------------------------------------\n\nTITLE: Displaying Live Ticker Data with IB Insync and Pandas in Python\nDESCRIPTION: This complex snippet sets up a live updating ticker table using Pandas and IPython display functions. It creates a DataFrame to hold ticker data and defines a callback function to update the display on every ticker change.\nSOURCE: https://github.com/erdewit/ib_insync/blob/master/notebooks/tick_data.ipynb#2025-04-19_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom IPython.display import display, clear_output\nimport pandas as pd\n\ndf = pd.DataFrame(\n    index=[c.pair() for c in contracts],\n    columns=['bidSize', 'bid', 'ask', 'askSize', 'high', 'low', 'close'])\n\ndef onPendingTickers(tickers):\n    for t in tickers:\n        df.loc[t.contract.pair()] = (\n            t.bidSize, t.bid, t.ask, t.askSize, t.high, t.low, t.close)\n        clear_output(wait=True)\n    display(df)        \n\nib.pendingTickersEvent += onPendingTickers\nib.sleep(30)\nib.pendingTickersEvent -= onPendingTickers\n```\n\n----------------------------------------\n\nTITLE: Fetching Historical Hourly Data for TSLA Stock with ib_insync in Python\nDESCRIPTION: This snippet demonstrates how to request hourly historical data for the last 60 trading days of a stock using ib_insync. It specifies various parameters like duration, bar size, and data type.\nSOURCE: https://github.com/erdewit/ib_insync/blob/master/notebooks/bar_data.ipynb#2025-04-19_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nbars = ib.reqHistoricalData(\n        contract,\n        endDateTime='',\n        durationStr='60 D',\n        barSizeSetting='1 hour',\n        whatToShow='TRADES',\n        useRTH=True,\n        formatDate=1)\n```\n\n----------------------------------------\n\nTITLE: Modifying and Canceling an Order with IB Insync in Python\nDESCRIPTION: This snippet demonstrates how to modify an existing limit order by changing its price, resubmitting it, and then canceling it. It also shows how to access the trade log after these operations.\nSOURCE: https://github.com/erdewit/ib_insync/blob/master/notebooks/ordering.ipynb#2025-04-19_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nlimitOrder.lmtPrice = 0.10\n\nib.placeOrder(contract, limitOrder)\n\nib.cancelOrder(limitOrder)\n\nlimitTrade.log\n```\n\n----------------------------------------\n\nTITLE: Creating Live Order Book Display with pandas and IPython\nDESCRIPTION: Sets up an event handler for ticker updates that dynamically displays the order book in a pandas DataFrame. The handler shows bid and ask prices with their respective sizes for up to 5 levels of market depth.\nSOURCE: https://github.com/erdewit/ib_insync/blob/master/notebooks/market_depth.ipynb#2025-04-19_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom IPython.display import display, clear_output\nimport pandas as pd\n\ndf = pd.DataFrame(index=range(5),\n        columns='bidSize bidPrice askPrice askSize'.split())\n\ndef onTickerUpdate(ticker):\n    bids = ticker.domBids\n    for i in range(5):\n        df.iloc[i, 0] = bids[i].size if i < len(bids) else 0\n        df.iloc[i, 1] = bids[i].price if i < len(bids) else 0\n    asks = ticker.domAsks\n    for i in range(5):\n        df.iloc[i, 2] = asks[i].price if i < len(asks) else 0\n        df.iloc[i, 3] = asks[i].size if i < len(asks) else 0\n    clear_output(wait=True)\n    display(df)\n\nticker.updateEvent += onTickerUpdate\n\nIB.sleep(15);\n```\n\n----------------------------------------\n\nTITLE: Option Calculations with ib_insync in Python\nDESCRIPTION: This snippet shows how to perform option calculations using ib_insync. It calculates the implied volatility and option price for a specific option contract.\nSOURCE: https://github.com/erdewit/ib_insync/blob/master/docs/recipes.rst#2025-04-19_snippet_3\n\nLANGUAGE: python\nCODE:\n```\noption = Option('EOE', '20171215', 490, 'P', 'FTA', multiplier=100)\n\ncalc = ib.calculateImpliedVolatility(\n    option, optionPrice=6.1, underPrice=525)\nprint(calc)\n\ncalc = ib.calculateOptionPrice(\n    option, volatility=0.14, underPrice=525)\nprint(calc)\n```\n\n----------------------------------------\n\nTITLE: Streaming Scanner Data with ib_insync in Python\nDESCRIPTION: This example demonstrates how to set up a streaming scanner subscription using ib_insync. It prints the first item of each scan update and the total number of items. The subscription runs for 60 seconds before being cancelled.\nSOURCE: https://github.com/erdewit/ib_insync/blob/master/docs/recipes.rst#2025-04-19_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ndef onScanData(scanData):\n    print(scanData[0])\n    print(len(scanData))\n\nsub = ScannerSubscription(\n    instrument='FUT.US',\n    locationCode='FUT.GLOBEX',\n    scanCode='TOP_PERC_GAIN')\nscanData = ib.reqScannerSubscription(sub)\nscanData.updateEvent += onScanData\nib.sleep(60)\nib.cancelScannerSubscription(scanData)\n```\n\n----------------------------------------\n\nTITLE: Order Book Depth Monitoring with ib_insync in Python\nDESCRIPTION: This snippet shows how to request and monitor the market depth (order book) for the EUR/USD forex pair, printing the bid and ask prices every 5 seconds.\nSOURCE: https://github.com/erdewit/ib_insync/blob/master/docs/html/_sources/recipes.rst.txt#2025-04-19_snippet_4\n\nLANGUAGE: python\nCODE:\n```\neurusd = Forex('EURUSD')\nticker = ib.reqMktDepth(eurusd)\nwhile ib.sleep(5):\n    print(\n        [d.price for d in ticker.domBids],\n        [d.price for d in ticker.domAsks])\n```\n\n----------------------------------------\n\nTITLE: Integrating ib_insync with PyGame in Python\nDESCRIPTION: This example shows how to integrate ib_insync with PyGame to create a real-time display of forex bid/ask prices. It demonstrates updating both ib_insync and PyGame in the same event loop.\nSOURCE: https://github.com/erdewit/ib_insync/blob/master/docs/recipes.rst#2025-04-19_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nimport ib_insync as ibi\nimport pygame\n\n\ndef onTicker(ticker):\n    screen.fill(bg_color)\n    text = f'bid: {ticker.bid}   ask: {ticker.ask}'\n    quote = font.render(text, True, fg_color)\n    screen.blit(quote, (40, 40))\n    pygame.display.flip()\n\n\npygame.init()\nscreen = pygame.display.set_mode((800, 600))\nfont = pygame.font.SysFont('arial', 48)\nbg_color = (255, 255, 255)\nfg_color = (0, 0, 0)\n\nib = ibi.IB()\nib.connect()\ncontract = ibi.Forex('EURUSD')\nticker = ib.reqMktData(contract)\nticker.updateEvent += onTicker\n\nrunning = True\nwhile running:\n    # This updates IB-insync:\n    ib.sleep(0.03)\n\n    # This updates PyGame:\n    for event in pygame.event.get():\n        if event.type == pygame.QUIT:\n            running = False\n            pygame.quit()\n```\n\n----------------------------------------\n\nTITLE: Fetching Historical Tick Data with IB Insync in Python\nDESCRIPTION: This code retrieves historical tick data for the EURUSD contract. It specifies an end time (current datetime) and requests the last 1000 bid-ask ticks. The result is stored in the 'ticks' variable, and the last tick is printed.\nSOURCE: https://github.com/erdewit/ib_insync/blob/master/notebooks/tick_data.ipynb#2025-04-19_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nimport datetime\n\nstart = ''\nend = datetime.datetime.now()\nticks = ib.reqHistoricalTicks(eurusd, start, end, 1000, 'BID_ASK', useRth=False)\n\nticks[-1]\n```\n\n----------------------------------------\n\nTITLE: Advanced Scanner Filtering with TagValue Parameters\nDESCRIPTION: Demonstrates advanced scanner filtering using TagValue objects. This example finds US stocks that rose over 20% and are priced between $5-$50, using the modern filtering approach with TagValue pairs.\nSOURCE: https://github.com/erdewit/ib_insync/blob/master/notebooks/scanners.ipynb#2025-04-19_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nsub = ScannerSubscription(\n    instrument='STK',\n    locationCode='STK.US.MAJOR',\n    scanCode='TOP_PERC_GAIN')\n\ntagValues = [\n    TagValue(\"changePercAbove\", \"20\"),\n    TagValue('priceAbove', 5),\n    TagValue('priceBelow', 50)]\n\n# the tagValues are given as 3rd argument; the 2nd argument must always be an empty list\n# (IB has not documented the 2nd argument and it's not clear what it does)\nscanData = ib.reqScannerData(sub, [], tagValues)\n\nsymbols = [sd.contractDetails.contract.symbol for sd in scanData]\nprint(symbols)\n```\n\n----------------------------------------\n\nTITLE: Real-time Bar Plot Updating with ib_insync in Python\nDESCRIPTION: This code sets up a function to update and display a bar plot in real-time as new data comes in. It uses matplotlib for plotting and IPython's display functions for updating the output in a Jupyter notebook.\nSOURCE: https://github.com/erdewit/ib_insync/blob/master/notebooks/bar_data.ipynb#2025-04-19_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nfrom IPython.display import display, clear_output\nimport matplotlib.pyplot as plt\n\ndef onBarUpdate(bars, hasNewBar):\n    plt.close()\n    plot = util.barplot(bars)\n    clear_output(wait=True)\n    display(plot)\n\nbars.updateEvent += onBarUpdate\n\nib.sleep(10)\nib.cancelHistoricalData(bars)\n```\n\n----------------------------------------\n\nTITLE: Blocking Scanner Data Request with ib_insync in Python\nDESCRIPTION: This code snippet shows how to request scanner parameters and perform a blocking scanner data request using ib_insync. It retrieves the top percentage gainers for US futures on the GLOBEX exchange.\nSOURCE: https://github.com/erdewit/ib_insync/blob/master/docs/recipes.rst#2025-04-19_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nallParams = ib.reqScannerParameters()\nprint(allParams)\n\nsub = ScannerSubscription(\n    instrument='FUT.US',\n    locationCode='FUT.GLOBEX',\n    scanCode='TOP_PERC_GAIN')\nscanData = ib.reqScannerData(sub)\nprint(scanData)\n```\n\n----------------------------------------\n\nTITLE: Using whatIfOrder with IB Insync in Python\nDESCRIPTION: This code shows how to use the whatIfOrder method to simulate an order and get information about its potential commission and margin impact without actually placing the order.\nSOURCE: https://github.com/erdewit/ib_insync/blob/master/notebooks/ordering.ipynb#2025-04-19_snippet_9\n\nLANGUAGE: python\nCODE:\n```\norder = MarketOrder('SELL', 20000)\nib.whatIfOrder(contract, order)\n```\n\n----------------------------------------\n\nTITLE: Requesting Contract Details with ib_insync\nDESCRIPTION: Shows how to request detailed information about a specific contract. This example creates a Tesla stock contract and requests its details.\nSOURCE: https://github.com/erdewit/ib_insync/blob/master/notebooks/basics.ipynb#2025-04-19_snippet_6\n\nLANGUAGE: python\nCODE:\n```\ncontract = Stock('TSLA', 'SMART', 'USD')\nib.reqContractDetails(contract)\n```\n\n----------------------------------------\n\nTITLE: Requesting Real-time Bars with ib_insync in Python\nDESCRIPTION: This code demonstrates how to request real-time bar data using ib_insync. It sets up a subscription for 5-second bars and attaches the update handler.\nSOURCE: https://github.com/erdewit/ib_insync/blob/master/notebooks/bar_data.ipynb#2025-04-19_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nbars = ib.reqRealTimeBars(contract, 5, 'MIDPOINT', False)\nbars.updateEvent += onBarUpdate\n```\n\n----------------------------------------\n\nTITLE: Scanner Data Streaming Request with ib_insync in Python\nDESCRIPTION: This snippet demonstrates how to set up a streaming scanner subscription that continuously receives data updates for top percentage gainers in US futures on the GLOBEX exchange.\nSOURCE: https://github.com/erdewit/ib_insync/blob/master/docs/html/_sources/recipes.rst.txt#2025-04-19_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ndef onScanData(scanData):\n    print(scanData[0])\n    print(len(scanData))\n\nsub = ScannerSubscription(\n    instrument='FUT.US',\n    locationCode='FUT.GLOBEX',\n    scanCode='TOP_PERC_GAIN')\nscanData = ib.reqScannerSubscription(sub)\nscanData.updateEvent += onScanData\nib.sleep(60)\nib.cancelScannerSubscription(scanData)\n```\n\n----------------------------------------\n\nTITLE: Qualifying Contracts with Additional Information\nDESCRIPTION: Demonstrates the qualifyContracts method which fills in additional information in the original contract from the contract details request.\nSOURCE: https://github.com/erdewit/ib_insync/blob/master/notebooks/contract_details.ipynb#2025-04-19_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nib.qualifyContracts(amd)\namd\n```\n\n----------------------------------------\n\nTITLE: Fetching News Articles with ib_insync in Python\nDESCRIPTION: This example demonstrates how to retrieve news providers, fetch historical news headlines for a stock (AMD), and get the full text of the latest news article using ib_insync.\nSOURCE: https://github.com/erdewit/ib_insync/blob/master/docs/recipes.rst#2025-04-19_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nnewsProviders = ib.reqNewsProviders()\nprint(newsProviders)\ncodes = '+'.join(np.code for np in newsProviders)\n\namd = Stock('AMD', 'SMART', 'USD')\nib.qualifyContracts(amd)\nheadlines = ib.reqHistoricalNews(amd.conId, codes, '', '', 10)\nlatest = headlines[0]\nprint(latest)\narticle = ib.reqNewsArticle(latest.providerCode, latest.articleId)\nprint(article)\n```\n\n----------------------------------------\n\nTITLE: Fetching Real-time Historical Data for EURUSD with ib_insync in Python\nDESCRIPTION: This snippet shows how to request historical data with real-time updates for the EURUSD forex pair using ib_insync. It sets up parameters for bar size, duration, and enables live updates.\nSOURCE: https://github.com/erdewit/ib_insync/blob/master/notebooks/bar_data.ipynb#2025-04-19_snippet_8\n\nLANGUAGE: python\nCODE:\n```\ncontract = Forex('EURUSD')\n\nbars = ib.reqHistoricalData(\n        contract,\n        endDateTime='',\n        durationStr='900 S',\n        barSizeSetting='10 secs',\n        whatToShow='MIDPOINT',\n        useRTH=True,\n        formatDate=1,\n        keepUpToDate=True)\n```\n\n----------------------------------------\n\nTITLE: Retrieving News Articles with ib_insync in Python\nDESCRIPTION: This snippet shows how to request news providers, get historical news headlines for AMD stock, and retrieve the content of the latest news article.\nSOURCE: https://github.com/erdewit/ib_insync/blob/master/docs/html/_sources/recipes.rst.txt#2025-04-19_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nnewsProviders = ib.reqNewsProviders()\nprint(newsProviders)\ncodes = '+'.join(np.code for np in newsProviders)\n\namd = Stock('AMD', 'SMART', 'USD')\nib.qualifyContracts(amd)\nheadlines = ib.reqHistoricalNews(amd.conId, codes, '', '', 10)\nlatest = headlines[0]\nprint(latest)\narticle = ib.reqNewsArticle(latest.providerCode, latest.articleId)\nprint(article)\n```\n\n----------------------------------------\n\nTITLE: Accessing WSH Event Calendar with ib_insync in Python\nDESCRIPTION: This snippet shows how to access Wall Street Horizon corporate event data, including getting the contract ID for IBM, retrieving available event filters, and querying specific events like earnings dates and board meetings.\nSOURCE: https://github.com/erdewit/ib_insync/blob/master/docs/html/_sources/recipes.rst.txt#2025-04-19_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom ib_insync import *\n\nib = IB()\nib.connect('127.0.0.1', 7497, clientId=1)\n\n# Get the conId of an instrument (IBM in this case):\nibm = Stock('IBM', 'SMART', 'USD')\nib.qualifyContracts(ibm)\nprint(ibm.conId)  # is 8314\n\n# Get the list of available filters and event types:\nmeta = ib.getWshMetaData()\nprint(meta)\n\n# For IBM (with conId=8314) query the:\n#   - Earnings Dates (wshe_ed)\n#   - Board of Directors meetings (wshe_bod)\ndata = WshEventData(\n    filter = '''{{\n      \"country\": \"All\",\n      \"watchlist\": [\"8314\"],\n      \"limit_region\": 10,\n      \"limit\": 10,\n      \"wshe_ed\": \"true\",\n      \"wshe_bod\": \"true\"\n    }}''')\nevents = ib.getWshEventData(data)\nprint(events)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Fundamental Ratios with ib_insync in Python\nDESCRIPTION: This example shows how to fetch fundamental ratios for a stock (IBM) using ib_insync. It requests market data with the '258' tag to get the fundamental ratios.\nSOURCE: https://github.com/erdewit/ib_insync/blob/master/docs/recipes.rst#2025-04-19_snippet_10\n\nLANGUAGE: python\nCODE:\n```\ncontract = Stock('IBM', 'SMART', 'USD')\nticker = ib.reqMktData(contract, '258')\nib.sleep(2)\nprint(ticker.fundamentalRatios)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Positions and Commissions with IB Insync in Python\nDESCRIPTION: These snippets demonstrate how to retrieve current positions and calculate the total commissions paid for the day using IB Insync methods.\nSOURCE: https://github.com/erdewit/ib_insync/blob/master/notebooks/ordering.ipynb#2025-04-19_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nib.positions()\n\nsum(fill.commissionReport.commission for fill in ib.fills())\n```\n\n----------------------------------------\n\nTITLE: Setting Up Logging with ib_insync\nDESCRIPTION: Configures logging to display messages in the notebook cell. The first example shows INFO level logs, while the second example enables DEBUG level logs including network traffic.\nSOURCE: https://github.com/erdewit/ib_insync/blob/master/notebooks/basics.ipynb#2025-04-19_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nutil.logToConsole()\n```\n\nLANGUAGE: python\nCODE:\n```\nimport logging\nutil.logToConsole(logging.DEBUG)\n```\n\n----------------------------------------\n\nTITLE: Measuring Performance of Current State vs Requests\nDESCRIPTION: Compares the execution time between accessing current state (positions) and making a new request, demonstrating that current state is faster.\nSOURCE: https://github.com/erdewit/ib_insync/blob/master/notebooks/basics.ipynb#2025-04-19_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n%time l = ib.positions()\n```\n\nLANGUAGE: python\nCODE:\n```\n%time l = ib.reqPositions()\n```\n\n----------------------------------------\n\nTITLE: Order Book Monitoring with ib_insync in Python\nDESCRIPTION: This code demonstrates how to monitor the order book for a forex pair (EURUSD) using ib_insync. It prints the bid and ask prices every 5 seconds.\nSOURCE: https://github.com/erdewit/ib_insync/blob/master/docs/recipes.rst#2025-04-19_snippet_4\n\nLANGUAGE: python\nCODE:\n```\neurusd = Forex('EURUSD')\nticker = ib.reqMktDepth(eurusd)\nwhile ib.sleep(5):\n    print(\n        [d.price for d in ticker.domBids],\n        [d.price for d in ticker.domAsks])\n```\n\n----------------------------------------\n\nTITLE: Requesting Contract Details for Intel Stock\nDESCRIPTION: Creates a Stock object for Intel with specific exchange and currency parameters, then verifies that only one contract detail is returned.\nSOURCE: https://github.com/erdewit/ib_insync/blob/master/notebooks/contract_details.ipynb#2025-04-19_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nintc = Stock('INTC', 'SMART', 'USD')\n\nassert len(ib.reqContractDetails(intc)) == 1\n```\n\n----------------------------------------\n\nTITLE: Qualifying Multiple Contracts at Once\nDESCRIPTION: Demonstrates qualifying multiple contracts in a single operation and checking which contracts were successfully qualified.\nSOURCE: https://github.com/erdewit/ib_insync/blob/master/notebooks/contract_details.ipynb#2025-04-19_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nqualContracts = ib.qualifyContracts(amd, intc, xxx, eurusd)\n\nassert intc in qualContracts\nassert xxx not in qualContracts\n```\n\n----------------------------------------\n\nTITLE: Retrieving WSH Event Calendar Data with ib_insync in Python\nDESCRIPTION: This example demonstrates how to retrieve corporate event data from the Wall Street Horizon calendar using ib_insync. It fetches metadata, earnings dates, and board of directors meetings for IBM.\nSOURCE: https://github.com/erdewit/ib_insync/blob/master/docs/recipes.rst#2025-04-19_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom ib_insync import *\n\nib = IB()\nib.connect('127.0.0.1', 7497, clientId=1)\n\n# Get the conId of an instrument (IBM in this case):\nibm = Stock('IBM', 'SMART', 'USD')\nib.qualifyContracts(ibm)\nprint(ibm.conId)  # is 8314\n\n# Get the list of available filters and event types:\nmeta = ib.getWshMetaData()\nprint(meta)\n\n# For IBM (with conId=8314) query the:\n#   - Earnings Dates (wshe_ed)\n#   - Board of Directors meetings (wshe_bod)\ndata = WshEventData(\n    filter = '''{\"country\": \"All\",\"watchlist\": [\"8314\"],\"limit_region\": 10,\"limit\": 10,\"wshe_ed\": \"true\",\"wshe_bod\": \"true\"}''')\nevents = ib.getWshEventData(data)\nprint(events)\n```\n\n----------------------------------------\n\nTITLE: Parsing Scanner Parameters XML to Extract Available Filter Tags\nDESCRIPTION: Parses the scanner parameters XML using ElementTree to extract all available filter tags. This allows users to see what filtering options are available for scanner queries.\nSOURCE: https://github.com/erdewit/ib_insync/blob/master/notebooks/scanners.ipynb#2025-04-19_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n# parse XML document\nimport xml.etree.ElementTree as ET\ntree = ET.fromstring(xml)\n\n# find all tags that are available for filtering\ntags = [elem.text for elem in tree.findall('.//AbstractField/code')]\nprint(len(tags), 'tags:')\nprint(tags)\n```\n\n----------------------------------------\n\nTITLE: Requesting Option Chain Definitions\nDESCRIPTION: Fetches security definition option parameters for SPX, which provides information about available option chains including expirations, strikes, and trading classes.\nSOURCE: https://github.com/erdewit/ib_insync/blob/master/notebooks/option_chain.ipynb#2025-04-19_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nchains = ib.reqSecDefOptParams(spx.symbol, '', spx.secType, spx.conId)\n\nutil.df(chains)\n```\n\n----------------------------------------\n\nTITLE: Fetching Minimum Price Increments with ib_insync in Python\nDESCRIPTION: This snippet demonstrates how to request market rules and minimum price increments for the USD/JPY forex pair by first getting contract details and then requesting the market rules.\nSOURCE: https://github.com/erdewit/ib_insync/blob/master/docs/html/_sources/recipes.rst.txt#2025-04-19_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nusdjpy = Forex('USDJPY')\ncd = ib.reqContractDetails(usdjpy)[0]\nprint(cd.marketRuleIds)\n\nrules = [\n    ib.reqMarketRule(ruleId)\n    for ruleId in cd.marketRuleIds.split(',')]\nprint(rules)\n```\n\n----------------------------------------\n\nTITLE: Subscribing to EURUSD Market Depth Data\nDESCRIPTION: Creates a Forex contract for EURUSD, qualifies it with IB, and requests market depth data by subscribing to order book updates for the specified contract.\nSOURCE: https://github.com/erdewit/ib_insync/blob/master/notebooks/market_depth.ipynb#2025-04-19_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ncontract = Forex('EURUSD')\nib.qualifyContracts(contract)\nticker = ib.reqMktDepth(contract)\n```\n\n----------------------------------------\n\nTITLE: Creating Candlestick Plot with ib_insync Utility in Python\nDESCRIPTION: This code demonstrates how to use the barplot utility function from ib_insync to create a candlestick plot of the last 100 bars.\nSOURCE: https://github.com/erdewit/ib_insync/blob/master/notebooks/bar_data.ipynb#2025-04-19_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nutil.barplot(bars[-100:], title=contract.symbol);\n```\n\n----------------------------------------\n\nTITLE: Working with Forex Contracts\nDESCRIPTION: Creates a Forex contract for EURUSD and verifies that exactly one contract detail is returned.\nSOURCE: https://github.com/erdewit/ib_insync/blob/master/notebooks/contract_details.ipynb#2025-04-19_snippet_8\n\nLANGUAGE: python\nCODE:\n```\neurusd = Forex('EURUSD')\n\nassert len(ib.reqContractDetails(eurusd)) == 1\n```\n\n----------------------------------------\n\nTITLE: Setting Up Real-time Bar Data Handler with ib_insync in Python\nDESCRIPTION: This snippet defines a callback function to handle real-time bar data updates. It prints the latest bar whenever an update is received.\nSOURCE: https://github.com/erdewit/ib_insync/blob/master/notebooks/bar_data.ipynb#2025-04-19_snippet_10\n\nLANGUAGE: python\nCODE:\n```\ndef onBarUpdate(bars, hasNewBar):\n    print(bars[-1])\n```\n\n----------------------------------------\n\nTITLE: Requesting Market Depth Exchanges with ib_insync\nDESCRIPTION: Retrieves a list of all exchanges that support market depth data using the reqMktDepthExchanges method and displays the first five exchanges.\nSOURCE: https://github.com/erdewit/ib_insync/blob/master/notebooks/market_depth.ipynb#2025-04-19_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nl = ib.reqMktDepthExchanges()\nl[:5]\n```\n\n----------------------------------------\n\nTITLE: Retrieving News Bulletins with ib_insync in Python\nDESCRIPTION: This snippet demonstrates how to subscribe to IB news bulletins, wait for 5 seconds to collect some bulletins, and then print the collected bulletins.\nSOURCE: https://github.com/erdewit/ib_insync/blob/master/docs/html/_sources/recipes.rst.txt#2025-04-19_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nib.reqNewsBulletins(True)\nib.sleep(5)\nprint(ib.newsBulletins())\n```\n\n----------------------------------------\n\nTITLE: Requesting Contract Details for a Stock\nDESCRIPTION: Creates a Stock object for AMD and requests contract details. Shows how to check the number of contract details returned.\nSOURCE: https://github.com/erdewit/ib_insync/blob/master/notebooks/contract_details.ipynb#2025-04-19_snippet_1\n\nLANGUAGE: python\nCODE:\n```\namd = Stock('AMD')\n\ncds = ib.reqContractDetails(amd)\n\nlen(cds)\n```\n\n----------------------------------------\n\nTITLE: Requesting News Bulletins with ib_insync in Python\nDESCRIPTION: This snippet shows how to request and print news bulletins using ib_insync. It subscribes to news bulletins for 5 seconds and then prints the received bulletins.\nSOURCE: https://github.com/erdewit/ib_insync/blob/master/docs/recipes.rst#2025-04-19_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nib.reqNewsBulletins(True)\nib.sleep(5)\nprint(ib.newsBulletins())\n```\n\n----------------------------------------\n\nTITLE: Managing Short-lived Connections with ib_insync in Python\nDESCRIPTION: This snippet demonstrates the best practice for short-lived connections using ib_insync. It adds a 1-second delay before disconnecting to ensure all data is flushed.\nSOURCE: https://github.com/erdewit/ib_insync/blob/master/docs/recipes.rst#2025-04-19_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nib = IB()\nib.connect()\n\n...  # create and submit some orders\n\nib.sleep(1)  # added delay\nib.disconnect()\n```\n\n----------------------------------------\n\nTITLE: Retrieving Minimum Price Increments with ib_insync in Python\nDESCRIPTION: This snippet shows how to retrieve the minimum price increments (market rules) for a forex pair (USDJPY) using ib_insync.\nSOURCE: https://github.com/erdewit/ib_insync/blob/master/docs/recipes.rst#2025-04-19_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nusdjpy = Forex('USDJPY')\ncd = ib.reqContractDetails(usdjpy)[0]\nprint(cd.marketRuleIds)\n\nrules = [\n    ib.reqMarketRule(ruleId)\n    for ruleId in cd.marketRuleIds.split(',')]\nprint(rules)\n```\n\n----------------------------------------\n\nTITLE: Retrieving IB Scanner Parameters XML Document\nDESCRIPTION: Shows how to retrieve the complete scanner parameters XML document from IB. This document contains all available filtering options and parameters that can be used with scanners.\nSOURCE: https://github.com/erdewit/ib_insync/blob/master/notebooks/scanners.ipynb#2025-04-19_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nxml = ib.reqScannerParameters()\n\nprint(len(xml), 'bytes')\n```\n\n----------------------------------------\n\nTITLE: Extracting Available Scan Codes from Scanner Parameters\nDESCRIPTION: Extracts and displays available scan codes from the scanner parameters XML. This example specifically filters for scan codes that start with 'TOP', showing various ranking methods available.\nSOURCE: https://github.com/erdewit/ib_insync/blob/master/notebooks/scanners.ipynb#2025-04-19_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nscanCodes = [e.text for e in tree.findall('.//scanCode')]\n\nprint(len(scanCodes), 'scan codes, showing the ones starting with \"TOP\":')\nprint([sc for sc in scanCodes if sc.startswith('TOP')])\n```\n\n----------------------------------------\n\nTITLE: Filtering for Monthly SPX Options\nDESCRIPTION: Selects the specific option chain for monthly SPX options trading on SMART exchange from the available chains.\nSOURCE: https://github.com/erdewit/ib_insync/blob/master/notebooks/option_chain.ipynb#2025-04-19_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nchain = next(c for c in chains if c.tradingClass == 'SPX' and c.exchange == 'SMART')\nchain\n```\n\n----------------------------------------\n\nTITLE: Finding Contracts by Symbol Pattern\nDESCRIPTION: Uses reqMatchingSymbols to find all stock contracts that match a pattern, then extracts the contracts from the matches.\nSOURCE: https://github.com/erdewit/ib_insync/blob/master/notebooks/contract_details.ipynb#2025-04-19_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nmatches = ib.reqMatchingSymbols('intc')\nmatchContracts = [m.contract for m in matches]\n\nmatches\n```\n\n----------------------------------------\n\nTITLE: Retrieving Supported Instrument Types for Scanner\nDESCRIPTION: Extracts the list of all supported instrument types from the scanner parameters XML. This shows what kinds of financial instruments can be scanned using the IB scanner.\nSOURCE: https://github.com/erdewit/ib_insync/blob/master/notebooks/scanners.ipynb#2025-04-19_snippet_8\n\nLANGUAGE: python\nCODE:\n```\ninstrumentTypes = set(e.text for e in tree.findall('.//Instrument/type'))\nprint(instrumentTypes)\n```\n\n----------------------------------------\n\nTITLE: Creating Forex Contracts with IB Insync in Python\nDESCRIPTION: This code creates a list of Forex contracts for common currency pairs using IB Insync. It then qualifies these contracts with the IB server to ensure they are valid and recognized.\nSOURCE: https://github.com/erdewit/ib_insync/blob/master/notebooks/tick_data.ipynb#2025-04-19_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ncontracts = [Forex(pair) for pair in ('EURUSD', 'USDJPY', 'GBPUSD', 'USDCHF', 'USDCAD', 'AUDUSD')]\nib.qualifyContracts(*contracts)\n\neurusd = contracts[0]\n```\n\n----------------------------------------\n\nTITLE: Finding Available Location Codes for Scanner\nDESCRIPTION: Extracts all available location codes from the scanner parameters XML. Location codes specify the geographical regions or exchanges to search within scanner queries.\nSOURCE: https://github.com/erdewit/ib_insync/blob/master/notebooks/scanners.ipynb#2025-04-19_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nlocationCodes = [e.text for e in tree.findall('.//locationCode')]\nprint(locationCodes)\n```\n\n----------------------------------------\n\nTITLE: Initializing IB Insync Connection\nDESCRIPTION: Sets up the initial connection to Interactive Brokers using the ib_insync library. It starts an event loop and connects to the IB Gateway or TWS on localhost port 7497.\nSOURCE: https://github.com/erdewit/ib_insync/blob/master/notebooks/option_chain.ipynb#2025-04-19_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom ib_insync import *\nutil.startLoop()\n\nib = IB()\nib.connect('127.0.0.1', 7497, clientId=12)\n```\n\n----------------------------------------\n\nTITLE: Filtering Scanner Results Using Traditional Parameters\nDESCRIPTION: Shows how to filter scanner results using the built-in parameters of ScannerSubscription object. This example filters the previous search to only include stocks with a price above $200.\nSOURCE: https://github.com/erdewit/ib_insync/blob/master/notebooks/scanners.ipynb#2025-04-19_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nsub.abovePrice = 200\nscanData = ib.reqScannerData(sub)\n\nsymbols = [sd.contractDetails.contract.symbol for sd in scanData]\nprint(symbols)\n```\n\n----------------------------------------\n\nTITLE: Filtering Account Values for Net Liquidation Value\nDESCRIPTION: Shows how to filter account values to retrieve specific information, in this case the base currency net liquidation value.\nSOURCE: https://github.com/erdewit/ib_insync/blob/master/notebooks/basics.ipynb#2025-04-19_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n[v for v in ib.accountValues() if v.tag == 'NetLiquidationByCurrency' and v.currency == 'BASE']\n```\n\n----------------------------------------\n\nTITLE: Initializing IB Insync Connection\nDESCRIPTION: Sets up the initial connection to Interactive Brokers API using the IB Insync library. Establishes a connection to the local TWS or IB Gateway instance on port 7497.\nSOURCE: https://github.com/erdewit/ib_insync/blob/master/notebooks/contract_details.ipynb#2025-04-19_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom ib_insync import *\nutil.startLoop()\n\nimport logging\n# util.logToConsole(logging.DEBUG)\n\nib = IB()\nib.connect('127.0.0.1', 7497, clientId=11)\n```\n\n----------------------------------------\n\nTITLE: Creating and Qualifying SPX Index Contract\nDESCRIPTION: Creates a contract object for the S&P 500 index (SPX) and qualifies it through Interactive Brokers to get the complete contract details.\nSOURCE: https://github.com/erdewit/ib_insync/blob/master/notebooks/option_chain.ipynb#2025-04-19_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nspx = Index('SPX', 'CBOE')\nib.qualifyContracts(spx)\n```\n\n----------------------------------------\n\nTITLE: Creating a Forex Contract and Limit Order in Python with IB Insync\nDESCRIPTION: This code creates a Forex contract for EURUSD and a limit order to sell 20,000 units at a price of 1.11. It demonstrates how to define contracts and orders using IB Insync.\nSOURCE: https://github.com/erdewit/ib_insync/blob/master/notebooks/ordering.ipynb#2025-04-19_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ncontract = Forex('EURUSD')\nib.qualifyContracts(contract)\n\norder = LimitOrder('SELL', 20000, 1.11)\n```\n\n----------------------------------------\n\nTITLE: Managing Short-lived Connections with ib_insync in Python\nDESCRIPTION: This snippet demonstrates the best practice for short-lived connections with ib_insync by adding a one-second delay before disconnection to allow data to be flushed properly.\nSOURCE: https://github.com/erdewit/ib_insync/blob/master/docs/html/_sources/recipes.rst.txt#2025-04-19_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nib = IB()\nib.connect()\n\n...  # create and submit some orders\n\nib.sleep(1)  # added delay\nib.disconnect()\n```\n\n----------------------------------------\n\nTITLE: Accessing Trade Log in IB Insync with Python\nDESCRIPTION: This code demonstrates how to access the log of a trade after placing an order. It waits for 1 second to allow for updates before accessing the log.\nSOURCE: https://github.com/erdewit/ib_insync/blob/master/notebooks/ordering.ipynb#2025-04-19_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nib.sleep(1)\ntrade.log\n```\n\n----------------------------------------\n\nTITLE: Requesting Market Data Ticker for SPX\nDESCRIPTION: Requests a market data ticker for the SPX index. This operation can take up to 11 seconds to complete.\nSOURCE: https://github.com/erdewit/ib_insync/blob/master/notebooks/option_chain.ipynb#2025-04-19_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n[ticker] = ib.reqTickers(spx)\nticker\n```\n\n----------------------------------------\n\nTITLE: Running and Canceling Real-time Bar Subscription with ib_insync in Python\nDESCRIPTION: This snippet shows how to let the real-time bar subscription run for a specified duration (30 seconds) and then cancel it.\nSOURCE: https://github.com/erdewit/ib_insync/blob/master/notebooks/bar_data.ipynb#2025-04-19_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nib.sleep(30)\nib.cancelRealTimeBars(bars)\n```\n\n----------------------------------------\n\nTITLE: Verifying Trade and Order Presence in IB Insync with Python\nDESCRIPTION: These assertions check if the placed trade and order are present in the list of trades and orders maintained by IB Insync.\nSOURCE: https://github.com/erdewit/ib_insync/blob/master/notebooks/ordering.ipynb#2025-04-19_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nassert trade in ib.trades()\n\nassert order in ib.orders()\n```\n\n----------------------------------------\n\nTITLE: Getting Current Market Price of SPX\nDESCRIPTION: Extracts the current market price from the SPX ticker which will be used for filtering strike prices.\nSOURCE: https://github.com/erdewit/ib_insync/blob/master/notebooks/option_chain.ipynb#2025-04-19_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nspxValue = ticker.marketPrice()\nspxValue\n```\n\n----------------------------------------\n\nTITLE: Extracting Contracts from Contract Details\nDESCRIPTION: Creates a list of contracts from the contract details objects and displays the first contract.\nSOURCE: https://github.com/erdewit/ib_insync/blob/master/notebooks/contract_details.ipynb#2025-04-19_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ncontracts = [cd.contract for cd in cds]\n\ncontracts[0]\n```\n\n----------------------------------------\n\nTITLE: Specifying Unique Contract with Currency and Exchange\nDESCRIPTION: Demonstrates how to make a contract unique by specifying currency (USD) and exchange (SMART), then verifies that only one contract detail is returned.\nSOURCE: https://github.com/erdewit/ib_insync/blob/master/notebooks/contract_details.ipynb#2025-04-19_snippet_5\n\nLANGUAGE: python\nCODE:\n```\namd = Stock('AMD', 'SMART', 'USD')\n\nassert len(ib.reqContractDetails(amd)) == 1\n```\n\n----------------------------------------\n\nTITLE: Requesting Delayed Market Data\nDESCRIPTION: Sets the market data type to 4 (delayed market data) to avoid issues with market data permissions that might require subscriptions.\nSOURCE: https://github.com/erdewit/ib_insync/blob/master/notebooks/option_chain.ipynb#2025-04-19_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nib.reqMarketDataType(4)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Dividend Information with ib_insync in Python\nDESCRIPTION: This snippet demonstrates how to request dividend information for Intel stock (INTC) using market data type 456, which provides past and future dividend details.\nSOURCE: https://github.com/erdewit/ib_insync/blob/master/docs/html/_sources/recipes.rst.txt#2025-04-19_snippet_9\n\nLANGUAGE: python\nCODE:\n```\ncontract = Stock('INTC', 'SMART', 'USD')\nticker = ib.reqMktData(contract, '456')\nib.sleep(2)\nprint(ticker.dividends)\n```\n\n----------------------------------------\n\nTITLE: Creating Contract by Contract ID\nDESCRIPTION: Shows how to create a contract using only the contract ID (conId) and then qualify it to retrieve the full contract details.\nSOURCE: https://github.com/erdewit/ib_insync/blob/master/notebooks/contract_details.ipynb#2025-04-19_snippet_11\n\nLANGUAGE: python\nCODE:\n```\ncontract_4391 = Contract(conId=4391)\n\nib.qualifyContracts(contract_4391)\n\nassert contract_4391 == amd\n```\n\n----------------------------------------\n\nTITLE: Verifying Matched Contracts\nDESCRIPTION: Verifies that the Intel contract is in the list of contracts that match the 'intc' pattern.\nSOURCE: https://github.com/erdewit/ib_insync/blob/master/notebooks/contract_details.ipynb#2025-04-19_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nassert intc in matchContracts\n```\n\n----------------------------------------\n\nTITLE: Examining a Single Option Contract\nDESCRIPTION: Displays the first qualified option contract from the filtered list to examine its properties.\nSOURCE: https://github.com/erdewit/ib_insync/blob/master/notebooks/option_chain.ipynb#2025-04-19_snippet_8\n\nLANGUAGE: python\nCODE:\n```\ncontracts[0]\n```\n\n----------------------------------------\n\nTITLE: Fetching Dividend Information with ib_insync in Python\nDESCRIPTION: This code snippet demonstrates how to retrieve dividend information for a stock (INTC) using ib_insync. It prints the dividend data including past and future dividend amounts and dates.\nSOURCE: https://github.com/erdewit/ib_insync/blob/master/docs/recipes.rst#2025-04-19_snippet_9\n\nLANGUAGE: python\nCODE:\n```\ncontract = Stock('INTC', 'SMART', 'USD')\nticker = ib.reqMktData(contract, '456')\nib.sleep(2)\nprint(ticker.dividends)\n```\n\n----------------------------------------\n\nTITLE: Initializing IB Insync Connection in Python\nDESCRIPTION: This snippet establishes a connection to Interactive Brokers using IB Insync. It starts an event loop and connects to the IB gateway or TWS on localhost with a specific client ID.\nSOURCE: https://github.com/erdewit/ib_insync/blob/master/notebooks/tick_data.ipynb#2025-04-19_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom ib_insync import *\nutil.startLoop()\n\nib = IB()\nib.connect('127.0.0.1', 7497, clientId=15)\n```\n\n----------------------------------------\n\nTITLE: Saving Scanner Parameters to XML File for Viewing\nDESCRIPTION: Demonstrates saving the scanner parameters to an XML file and opening it in a web browser for easier inspection. This helps explore the available parameters in a more user-friendly way.\nSOURCE: https://github.com/erdewit/ib_insync/blob/master/notebooks/scanners.ipynb#2025-04-19_snippet_4\n\nLANGUAGE: python\nCODE:\n```\npath = 'scanner_parameters.xml'\nwith open(path, 'w') as f:\n    f.write(xml)\n\nimport webbrowser\nwebbrowser.open(path)\n```\n\n----------------------------------------\n\nTITLE: Cancelling Market Data Subscriptions with IB Insync in Python\nDESCRIPTION: This code cancels the live tick subscriptions for all previously subscribed Forex contracts. It uses the cancelMktData method to stop the data stream for each contract.\nSOURCE: https://github.com/erdewit/ib_insync/blob/master/notebooks/tick_data.ipynb#2025-04-19_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfor contract in contracts:\n    ib.cancelMktData(contract)\n```\n\n----------------------------------------\n\nTITLE: Python Package Dependencies with Version Constraints\nDESCRIPTION: Lists required Python packages including eventkit, nest_asyncio, and conditional dependencies for older Python versions. Includes dataclasses for Python <3.7 and backports.zoneinfo for Python <3.9.\nSOURCE: https://github.com/erdewit/ib_insync/blob/master/requirements.txt#2025-04-19_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\neventkit\nnest_asyncio\ndataclasses;python_version<\"3.7\"\nbackports.zoneinfo;python_version<\"3.9\"\n```\n\n----------------------------------------\n\nTITLE: Accessing First Bar of Historical Data with ib_insync in Python\nDESCRIPTION: This code snippet shows how to access the first bar of the retrieved historical data.\nSOURCE: https://github.com/erdewit/ib_insync/blob/master/notebooks/bar_data.ipynb#2025-04-19_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nbars[0]\n```\n\n----------------------------------------\n\nTITLE: Disconnecting from IB using ib_insync in Python\nDESCRIPTION: This code snippet demonstrates how to disconnect from the Interactive Brokers connection established with ib_insync.\nSOURCE: https://github.com/erdewit/ib_insync/blob/master/notebooks/bar_data.ipynb#2025-04-19_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nib.disconnect()\n```\n\n----------------------------------------\n\nTITLE: Displaying Contract Details\nDESCRIPTION: Prints the first contract detail object from the list of contract details for AMD.\nSOURCE: https://github.com/erdewit/ib_insync/blob/master/notebooks/contract_details.ipynb#2025-04-19_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ncds[0]\n```\n\n----------------------------------------\n\nTITLE: Including README content in Sphinx documentation\nDESCRIPTION: This directive includes the content of the README.rst file from the parent directory into the current documentation file. It's commonly used in Sphinx documentation to avoid duplication of content between the README and the main documentation.\nSOURCE: https://github.com/erdewit/ib_insync/blob/master/docs/readme.rst#2025-04-19_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. include:: ../README.rst\n```\n\n----------------------------------------\n\nTITLE: Converting Contracts to DataFrame\nDESCRIPTION: Uses the util.df() function to convert the list of contracts to a DataFrame for easier comparison and analysis.\nSOURCE: https://github.com/erdewit/ib_insync/blob/master/notebooks/contract_details.ipynb#2025-04-19_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nutil.df(contracts)\n```\n\n----------------------------------------\n\nTITLE: Disconnecting from Interactive Brokers\nDESCRIPTION: Disconnects the IB instance from TWS/IBG and clears all its state, properly terminating the connection.\nSOURCE: https://github.com/erdewit/ib_insync/blob/master/notebooks/basics.ipynb#2025-04-19_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nib.disconnect()\n```\n\n----------------------------------------\n\nTITLE: Handling Non-Existent Contracts\nDESCRIPTION: Shows how to handle a non-existent stock symbol, verifying that no contract details are returned.\nSOURCE: https://github.com/erdewit/ib_insync/blob/master/notebooks/contract_details.ipynb#2025-04-19_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nxxx = Stock('XXX', 'SMART', 'USD')\n\nassert len(ib.reqContractDetails(xxx)) == 0\n```\n\n----------------------------------------\n\nTITLE: Disconnecting from Interactive Brokers\nDESCRIPTION: Properly closes the connection to the Interactive Brokers TWS or Gateway application.\nSOURCE: https://github.com/erdewit/ib_insync/blob/master/notebooks/market_depth.ipynb#2025-04-19_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nib.disconnect()\n```\n\n----------------------------------------\n\nTITLE: Displaying Contract Before Qualification\nDESCRIPTION: Shows the AMD contract before qualifying it with additional information from contract details.\nSOURCE: https://github.com/erdewit/ib_insync/blob/master/notebooks/contract_details.ipynb#2025-04-19_snippet_9\n\nLANGUAGE: python\nCODE:\n```\namd\n```\n\n----------------------------------------\n\nTITLE: Disconnecting from Interactive Brokers\nDESCRIPTION: Properly disconnects from the Interactive Brokers API when finished to release resources.\nSOURCE: https://github.com/erdewit/ib_insync/blob/master/notebooks/option_chain.ipynb#2025-04-19_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nib.disconnect()\n```\n\n----------------------------------------\n\nTITLE: Canceling Market Depth Subscription\nDESCRIPTION: Stops the market depth subscription for the specified contract to free up resources and prevent unnecessary data streaming.\nSOURCE: https://github.com/erdewit/ib_insync/blob/master/notebooks/market_depth.ipynb#2025-04-19_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nib.cancelMktDepth(contract)\n```\n\n----------------------------------------\n\nTITLE: Disconnecting from Interactive Brokers with IB Insync in Python\nDESCRIPTION: This simple snippet shows how to disconnect from the Interactive Brokers connection established earlier.\nSOURCE: https://github.com/erdewit/ib_insync/blob/master/notebooks/ordering.ipynb#2025-04-19_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nib.disconnect()\n```\n\n----------------------------------------\n\nTITLE: Initializing IB Connection with ib_insync\nDESCRIPTION: Sets up the basic connection to Interactive Brokers TWS using ib_insync. This establishes a connection to the localhost TWS instance on port 7497 with a specific client ID.\nSOURCE: https://github.com/erdewit/ib_insync/blob/master/notebooks/scanners.ipynb#2025-04-19_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom ib_insync import *\nutil.startLoop()  \n\nib = IB()\nib.connect('127.0.0.1', 7497, clientId=17)\n```\n\n----------------------------------------\n\nTITLE: Disconnecting from IB Connection\nDESCRIPTION: Closes the connection to Interactive Brokers. This is important to properly terminate the API session when scanning operations are complete.\nSOURCE: https://github.com/erdewit/ib_insync/blob/master/notebooks/scanners.ipynb#2025-04-19_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nib.disconnect()\n```\n\n----------------------------------------\n\nTITLE: Installing IB-insync using pip\nDESCRIPTION: Command to install the IB-insync library using pip package manager. Requires Python 3.6 or higher and a running TWS or IB Gateway application.\nSOURCE: https://github.com/erdewit/ib_insync/blob/master/README.rst#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install ib_insync\n```\n\n----------------------------------------\n\nTITLE: Disconnecting from IB Insync in Python\nDESCRIPTION: This simple snippet disconnects the IB Insync client from the Interactive Brokers server, terminating the connection and cleaning up resources.\nSOURCE: https://github.com/erdewit/ib_insync/blob/master/notebooks/tick_data.ipynb#2025-04-19_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nib.disconnect()\n```\n\n----------------------------------------\n\nTITLE: Setting Matplotlib to Inline Mode in Jupyter Notebook\nDESCRIPTION: This code snippet sets the matplotlib backend to inline mode for displaying plots within a Jupyter notebook.\nSOURCE: https://github.com/erdewit/ib_insync/blob/master/notebooks/bar_data.ipynb#2025-04-19_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n%matplotlib inline\n```\n\n----------------------------------------\n\nTITLE: Requesting Market Data for All Options\nDESCRIPTION: Requests market data tickers for all the filtered option contracts in a single request, allowing for efficient data retrieval.\nSOURCE: https://github.com/erdewit/ib_insync/blob/master/notebooks/option_chain.ipynb#2025-04-19_snippet_9\n\nLANGUAGE: python\nCODE:\n```\ntickers = ib.reqTickers(*contracts)\n\ntickers[0]\n```\n\n----------------------------------------\n\nTITLE: Connecting to Interactive Brokers API with ib_insync\nDESCRIPTION: Imports the ib_insync library, starts an event loop, and establishes a connection to the Interactive Brokers TWS or Gateway on localhost port 7497 with client ID 16.\nSOURCE: https://github.com/erdewit/ib_insync/blob/master/notebooks/market_depth.ipynb#2025-04-19_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom ib_insync import *\nutil.startLoop()\n\nib = IB()\nib.connect('127.0.0.1', 7497, clientId=16)\n```\n\n----------------------------------------\n\nTITLE: Disconnecting from IB API\nDESCRIPTION: Closes the connection to the Interactive Brokers API.\nSOURCE: https://github.com/erdewit/ib_insync/blob/master/notebooks/contract_details.ipynb#2025-04-19_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nib.disconnect()\n```\n\n----------------------------------------\n\nTITLE: Integrating ib_insync with PyGame in Python\nDESCRIPTION: This snippet demonstrates how to integrate ib_insync with PyGame by calling ib.sleep within the PyGame run loop to keep both systems updated. It displays real-time bid and ask prices for EUR/USD in a PyGame window.\nSOURCE: https://github.com/erdewit/ib_insync/blob/master/docs/html/_sources/recipes.rst.txt#2025-04-19_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nimport ib_insync as ibi\nimport pygame\n\n\ndef onTicker(ticker):\n    screen.fill(bg_color)\n    text = f'bid: {ticker.bid}   ask: {ticker.ask}'\n    quote = font.render(text, True, fg_color)\n    screen.blit(quote, (40, 40))\n    pygame.display.flip()\n\n\npygame.init()\nscreen = pygame.display.set_mode((800, 600))\nfont = pygame.font.SysFont('arial', 48)\nbg_color = (255, 255, 255)\nfg_color = (0, 0, 0)\n\nib = ibi.IB()\nib.connect()\ncontract = ibi.Forex('EURUSD')\nticker = ib.reqMktData(contract)\nticker.updateEvent += onTicker\n\nrunning = True\nwhile running:\n    # This updates IB-insync:\n    ib.sleep(0.03)\n\n    # This updates PyGame:\n    for event in pygame.event.get():\n        if event.type == pygame.QUIT:\n            running = False\n            pygame.quit()\n```\n\n----------------------------------------\n\nTITLE: Defining Documentation Table of Contents in Sphinx RST\nDESCRIPTION: Uses Sphinx's toctree directive to define the documentation structure with a maximum depth of 2. The table of contents includes sections for readme, API reference, notebooks, recipes, code documentation, changelog, and links. It also includes the project's README file using the include directive.\nSOURCE: https://github.com/erdewit/ib_insync/blob/master/docs/html/_sources/index.rst.txt#2025-04-19_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. toctree::\n   :maxdepth: 2\n\n   readme\n   api\n   notebooks\n   recipes\n   code\n   changelog\n   links\n\n.. include:: ../README.rst\n```\n\n----------------------------------------\n\nTITLE: Documenting ib_insync Modules using automodule in reStructuredText\nDESCRIPTION: This snippet uses the automodule directive to automatically generate documentation for various modules of the ib_insync library, including IB, Client, Order, Contract, Ticker, Objects, and Utilities.\nSOURCE: https://github.com/erdewit/ib_insync/blob/master/docs/html/_sources/api.rst.txt#2025-04-19_snippet_1\n\nLANGUAGE: reStructuredText\nCODE:\n```\nIB\n--\n\n.. automodule:: ib_insync.ib\n\nClient\n------\n\n.. automodule:: ib_insync.client\n\nOrder\n-----\n\n.. automodule:: ib_insync.order\n\nContract\n--------\n\n.. automodule:: ib_insync.contract\n\nTicker\n--------\n\n.. automodule:: ib_insync.ticker\n\nObjects\n-------\n\n.. automodule:: ib_insync.objects\n\n.. autoclass:: ib_insync.wrapper.RequestError\n\nUtilities\n---------\n\n.. automodule:: ib_insync.util\n```\n\n----------------------------------------\n\nTITLE: Scanner Data Blocking Request with ib_insync in Python\nDESCRIPTION: This snippet shows how to request scanner parameters and make a blocking scanner data request for top percentage gainers in US futures on the GLOBEX exchange.\nSOURCE: https://github.com/erdewit/ib_insync/blob/master/docs/html/_sources/recipes.rst.txt#2025-04-19_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nallParams = ib.reqScannerParameters()\nprint(allParams)\n\nsub = ScannerSubscription(\n    instrument='FUT.US',\n    locationCode='FUT.GLOBEX',\n    scanCode='TOP_PERC_GAIN')\nscanData = ib.reqScannerData(sub)\nprint(scanData)\n```\n\n----------------------------------------\n\nTITLE: Defining API Documentation Structure in reStructuredText\nDESCRIPTION: This snippet defines the structure of the API documentation using reStructuredText directives. It sets up the document title, table of contents, and links to various modules of the ib_insync library.\nSOURCE: https://github.com/erdewit/ib_insync/blob/master/docs/html/_sources/api.rst.txt#2025-04-19_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. _api:\n\nAPI docs\n=================\n\nRelease |release|.\n\n.. toctree::\n   :maxdepth: 3\n   :caption: Modules:\n\nAlso see the official\n`Python API documentation <https://interactivebrokers.github.io/tws-api>`_\nfrom IB.\n```\n\n----------------------------------------\n\nTITLE: Documenting FlexReport, IBC, and Watchdog in reStructuredText\nDESCRIPTION: This snippet uses automodule and autoclass directives to generate documentation for the FlexReport module, IBC class, and Watchdog class from the ib_insync library.\nSOURCE: https://github.com/erdewit/ib_insync/blob/master/docs/html/_sources/api.rst.txt#2025-04-19_snippet_2\n\nLANGUAGE: reStructuredText\nCODE:\n```\nFlexReport\n----------\n\n.. automodule:: ib_insync.flexreport\n\nIBC\n---\n.. autoclass:: ib_insync.ibcontroller.IBC\n\nWatchdog\n--------\n.. autoclass:: ib_insync.ibcontroller.Watchdog\n```"
  }
]