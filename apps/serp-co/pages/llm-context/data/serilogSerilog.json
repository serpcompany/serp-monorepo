[
  {
    "owner": "serilog",
    "repo": "serilog",
    "content": "TITLE: Complete Serilog Initialization with Error Handling in C#\nDESCRIPTION: A comprehensive example showing how to configure Serilog with console and rolling file logging, along with proper error handling and cleanup. This pattern ensures logs are properly written and flushed before application exit.\nSOURCE: https://github.com/serilog/serilog/blob/dev/README.md#2025-04-16_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nusing Serilog;\n\nLog.Logger = new LoggerConfiguration()\n    .WriteTo.Console()\n    .WriteTo.File(\"log.txt\",\n        rollingInterval: RollingInterval.Day,\n        rollOnFileSizeLimit: true)\n    .CreateLogger();\n\ntry\n{\n    // Your program here...\n    const string name = \"Serilog\";\n    Log.Information(\"Hello, {Name}!\", name);\n    throw new InvalidOperationException(\"Oops...\");\n}\ncatch (Exception ex)\n{\n    Log.Error(ex, \"Unhandled exception\");\n}\nfinally\n{\n    await Log.CloseAndFlushAsync(); // ensure all logs written before app exits\n}\n```\n\n----------------------------------------\n\nTITLE: Structured Logging with Named Parameters and Object Serialization in C#\nDESCRIPTION: Demonstrates Serilog's structured logging capabilities using named parameters and object serialization with the @ operator. This allows logging rich structured data that can be queried and analyzed without parsing.\nSOURCE: https://github.com/serilog/serilog/blob/dev/README.md#2025-04-16_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nvar position = new { Latitude = 25, Longitude = 134 };\nvar elapsedMs = 34;\n\nlog.Information(\"Processed {@Position} in {Elapsed} ms\", position, elapsedMs);\n```\n\n----------------------------------------\n\nTITLE: Initializing Serilog with Basic Console and File Logging in C#\nDESCRIPTION: Creates a Serilog logger that writes to both the console and a text file, then logs a simple message. This demonstrates the basic setup pattern for Serilog.\nSOURCE: https://github.com/serilog/serilog/blob/dev/README.md#2025-04-16_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nusing var log = new LoggerConfiguration()\n    .WriteTo.Console()\n    .WriteTo.File(\"log.txt\")\n    .CreateLogger();\n\nlog.Information(\"Hello, Serilog!\");\n```\n\n----------------------------------------\n\nTITLE: Implementing Logger Configuration in C#\nDESCRIPTION: LoggerConfiguration class for building and configuring Serilog loggers with a fluent API. This class provides access to various configuration aspects like sinks, enrichers, filters, and minimum levels through properties.\nSOURCE: https://github.com/serilog/serilog/blob/dev/test/Serilog.ApprovalTests/Serilog.approved.txt#2025-04-16_snippet_36\n\nLANGUAGE: C#\nCODE:\n```\npublic class LoggerConfiguration\n{\n    public LoggerConfiguration() { }\n    public Serilog.Configuration.LoggerAuditSinkConfiguration AuditTo { get; }\n    public Serilog.Configuration.LoggerDestructuringConfiguration Destructure { get; }\n    public Serilog.Configuration.LoggerEnrichmentConfiguration Enrich { get; }\n    public Serilog.Configuration.LoggerFilterConfiguration Filter { get; }\n    public Serilog.Configuration.LoggerMinimumLevelConfiguration MinimumLevel { get; }\n    public Serilog.Configuration.LoggerSettingsConfiguration ReadFrom { get; }\n    public Serilog.Configuration.LoggerSinkConfiguration WriteTo { get; }\n    public Serilog.Core.Logger CreateLogger() { }\n}\n```\n\n----------------------------------------\n\nTITLE: JSON Representation of Structured Log Data\nDESCRIPTION: Shows how structured log data is represented when serialized to JSON format. This illustrates how properties are captured as structured data rather than being merged into the message text.\nSOURCE: https://github.com/serilog/serilog/blob/dev/README.md#2025-04-16_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\"Position\": {\"Latitude\": 25, \"Longitude\": 134}, \"Elapsed\": 34}\n```\n\n----------------------------------------\n\nTITLE: Defining Logger Class in Serilog.Core\nDESCRIPTION: Defines the `Logger` class which implements `Serilog.Core.ILogEventSink`, `Serilog.ILogger`, `System.IAsyncDisposable`, and `System.IDisposable`.  It provides methods for logging at different levels (Debug, Error, Fatal, Information) and for creating contextual loggers. The class includes methods to bind message templates and properties, and to dispose of resources.\nSOURCE: https://github.com/serilog/serilog/blob/dev/test/Serilog.ApprovalTests/Serilog.approved.txt#2025-04-16_snippet_6\n\nLANGUAGE: C#\nCODE:\n```\n    public sealed class Logger : Serilog.Core.ILogEventSink, Serilog.ILogger, System.IAsyncDisposable, System.IDisposable\n    {\n        public static Serilog.ILogger None { get; }\n        [Serilog.Core.MessageTemplateFormatMethod(\"messageTemplate\")]\n        public bool BindMessageTemplate(string messageTemplate, object?[]? propertyValues, [System.Diagnostics.CodeAnalysis.NotNullWhen(true)] out Serilog.Events.MessageTemplate? parsedTemplate, [System.Diagnostics.CodeAnalysis.NotNullWhen(true)] out System.Collections.Generic.IEnumerable<Serilog.Events.LogEventProperty>? boundProperties) { }\n        public bool BindProperty(string? propertyName, object? value, bool destructureObjects, [System.Diagnostics.CodeAnalysis.NotNullWhen(true)] out Serilog.Events.LogEventProperty? property) { }\n        [Serilog.Core.MessageTemplateFormatMethod(\"messageTemplate\")]\n        public void Debug(string messageTemplate) { }\n        [Serilog.Core.MessageTemplateFormatMethod(\"messageTemplate\")]\n        public void Debug(System.Exception? exception, string messageTemplate) { }\n        [Serilog.Core.MessageTemplateFormatMethod(\"messageTemplate\")]\n        public void Debug(string messageTemplate, params object?[]? propertyValues) { }\n        [Serilog.Core.MessageTemplateFormatMethod(\"messageTemplate\")]\n        public void Debug(System.Exception? exception, string messageTemplate, params object?[]? propertyValues) { }\n        [Serilog.Core.MessageTemplateFormatMethod(\"messageTemplate\")]\n        public void Debug<T>(string messageTemplate, T propertyValue) { }\n        [Serilog.Core.MessageTemplateFormatMethod(\"messageTemplate\")]\n        public void Debug<T>(System.Exception? exception, string messageTemplate, T propertyValue) { }\n        [Serilog.Core.MessageTemplateFormatMethod(\"messageTemplate\")]\n        public void Debug<T0, T1>(string messageTemplate, T0 propertyValue0, T1 propertyValue1) { }\n        [Serilog.Core.MessageTemplateFormatMethod(\"messageTemplate\")]\n        public void Debug<T0, T1>(System.Exception? exception, string messageTemplate, T0 propertyValue0, T1 propertyValue1) { }\n        [Serilog.Core.MessageTemplateFormatMethod(\"messageTemplate\")]\n        public void Debug<T0, T1, T2>(string messageTemplate, T0 propertyValue0, T1 propertyValue1, T2 propertyValue2) { }\n        [Serilog.Core.MessageTemplateFormatMethod(\"messageTemplate\")]\n        public void Debug<T0, T1, T2>(System.Exception? exception, string messageTemplate, T0 propertyValue0, T1 propertyValue1, T2 propertyValue2) { }\n        public void Dispose() { }\n        public System.Threading.Tasks.ValueTask DisposeAsync() { }\n        [Serilog.Core.MessageTemplateFormatMethod(\"messageTemplate\")]\n        public void Error(string messageTemplate) { }\n        [Serilog.Core.MessageTemplateFormatMethod(\"messageTemplate\")]\n        public void Error(System.Exception? exception, string messageTemplate) { }\n        [Serilog.Core.MessageTemplateFormatMethod(\"messageTemplate\")]\n        public void Error(string messageTemplate, params object?[]? propertyValues) { }\n        [Serilog.Core.MessageTemplateFormatMethod(\"messageTemplate\")]\n        public void Error(System.Exception? exception, string messageTemplate, params object?[]? propertyValues) { }\n        [Serilog.Core.MessageTemplateFormatMethod(\"messageTemplate\")]\n        public void Error<T>(string messageTemplate, T propertyValue) { }\n        [Serilog.Core.MessageTemplateFormatMethod(\"messageTemplate\")]\n        public void Error<T>(System.Exception? exception, string messageTemplate, T propertyValue) { }\n        [Serilog.Core.MessageTemplateFormatMethod(\"messageTemplate\")]\n        public void Error<T0, T1>(string messageTemplate, T0 propertyValue0, T1 propertyValue1) { }\n        [Serilog.Core.MessageTemplateFormatMethod(\"messageTemplate\")]\n        public void Error<T0, T1>(System.Exception? exception, string messageTemplate, T0 propertyValue0, T1 propertyValue1) { }\n        [Serilog.Core.MessageTemplateFormatMethod(\"messageTemplate\")]\n        public void Error<T0, T1, T2>(string messageTemplate, T0 propertyValue0, T1 propertyValue1, T2 propertyValue2) { }\n        [Serilog.Core.MessageTemplateFormatMethod(\"messageTemplate\")]\n        public void Error<T0, T1, T2>(System.Exception? exception, string messageTemplate, T0 propertyValue0, T1 propertyValue1, T2 propertyValue2) { }\n        [Serilog.Core.MessageTemplateFormatMethod(\"messageTemplate\")]\n        public void Fatal(string messageTemplate) { }\n        [Serilog.Core.MessageTemplateFormatMethod(\"messageTemplate\")]\n        public void Fatal(System.Exception? exception, string messageTemplate) { }\n        [Serilog.Core.MessageTemplateFormatMethod(\"messageTemplate\")]\n        public void Fatal(string messageTemplate, params object?[]? propertyValues) { }\n        [Serilog.Core.MessageTemplateFormatMethod(\"messageTemplate\")]\n        public void Fatal(System.Exception? exception, string messageTemplate, params object?[]? propertyValues) { }\n        [Serilog.Core.MessageTemplateFormatMethod(\"messageTemplate\")]\n        public void Fatal<T>(string messageTemplate, T propertyValue) { }\n        [Serilog.Core.MessageTemplateFormatMethod(\"messageTemplate\")]\n        public void Fatal<T>(System.Exception? exception, string messageTemplate, T propertyValue) { }\n        [Serilog.Core.MessageTemplateFormatMethod(\"messageTemplate\")]\n        public void Fatal<T0, T1>(string messageTemplate, T0 propertyValue0, T1 propertyValue1) { }\n        [Serilog.Core.MessageTemplateFormatMethod(\"messageTemplate\")]\n        public void Fatal<T0, T1>(System.Exception? exception, string messageTemplate, T0 propertyValue0, T1 propertyValue1) { }\n        [Serilog.Core.MessageTemplateFormatMethod(\"messageTemplate\")]\n        public void Fatal<T0, T1, T2>(string messageTemplate, T0 propertyValue0, T1 propertyValue1, T2 propertyValue2) { }\n        [Serilog.Core.MessageTemplateFormatMethod(\"messageTemplate\")]\n        public void Fatal<T0, T1, T2>(System.Exception? exception, string messageTemplate, T0 propertyValue0, T1 propertyValue1, T2 propertyValue2) { }\n        public Serilog.ILogger ForContext(Serilog.Core.ILogEventEnricher enricher) { }\n        public Serilog.ILogger ForContext(System.Collections.Generic.IEnumerable<Serilog.Core.ILogEventEnricher> enrichers) { }\n        public Serilog.ILogger ForContext(System.Type source) { }\n        public Serilog.ILogger ForContext(string propertyName, object? value, bool destructureObjects = false) { }\n        public Serilog.ILogger ForContext<TSource>() { }\n        [Serilog.Core.MessageTemplateFormatMethod(\"messageTemplate\")]\n        public void Information(string messageTemplate) { }\n        [Serilog.Core.MessageTemplateFormatMethod(\"messageTemplate\")]\n        public void Information(System.Exception? exception, string messageTemplate) { }\n        [Serilog.Core.MessageTemplateFormatMethod(\"messageTemplate\")]\n        public void Information(string messageTemplate, params object?[]? propertyValues) { }\n        [Serilog.Core.MessageTemplateFormatMethod(\"messageTemplate\")]\n        public void Information(System.Exception? exception, string messageTemplate, params object?[]? propertyValues) { }\n        [Serilog.Core.MessageTemplateFormatMethod(\"messageTemplate\")]\n        public void Information<T>(string messageTemplate, T propertyValue) { }\n        [Serilog.Core.MessageTemplateFormatMethod(\"messageTemplate\")]\n        public void Information<T>(System.Exception? exception, string messageTemplate, T propertyValue) { }\n```\n\n----------------------------------------\n\nTITLE: Defining ILogger Interface Methods in C#\nDESCRIPTION: This snippet defines the methods of the ILogger interface in Serilog. It includes methods for binding message templates, logging at various levels, and contextual logging. The interface supports different parameter combinations and generic types for flexible logging.\nSOURCE: https://github.com/serilog/serilog/blob/dev/test/Serilog.ApprovalTests/Serilog.approved.txt#2025-04-16_snippet_24\n\nLANGUAGE: C#\nCODE:\n```\n[Serilog.Core.MessageTemplateFormatMethod(\"messageTemplate\")]\nbool BindMessageTemplate(string messageTemplate, object?[]? propertyValues, [System.Diagnostics.CodeAnalysis.NotNullWhen(true)] out Serilog.Events.MessageTemplate? parsedTemplate, [System.Diagnostics.CodeAnalysis.NotNullWhen(true)] out System.Collections.Generic.IEnumerable<Serilog.Events.LogEventProperty>? boundProperties);\nbool BindProperty(string? propertyName, object? value, bool destructureObjects, [System.Diagnostics.CodeAnalysis.NotNullWhen(true)] out Serilog.Events.LogEventProperty? property);\n[Serilog.Core.MessageTemplateFormatMethod(\"messageTemplate\")]\nvoid Debug(string messageTemplate);\n[Serilog.Core.MessageTemplateFormatMethod(\"messageTemplate\")]\nvoid Debug(System.Exception? exception, string messageTemplate);\n[Serilog.Core.MessageTemplateFormatMethod(\"messageTemplate\")]\nvoid Debug(string messageTemplate, params object?[]? propertyValues);\n[Serilog.Core.MessageTemplateFormatMethod(\"messageTemplate\")]\nvoid Debug(System.Exception? exception, string messageTemplate, params object?[]? propertyValues);\n[Serilog.Core.MessageTemplateFormatMethod(\"messageTemplate\")]\nvoid Debug<T>(string messageTemplate, T propertyValue);\n[Serilog.Core.MessageTemplateFormatMethod(\"messageTemplate\")]\nvoid Debug<T>(System.Exception? exception, string messageTemplate, T propertyValue);\n[Serilog.Core.MessageTemplateFormatMethod(\"messageTemplate\")]\nvoid Debug<T0, T1>(string messageTemplate, T0 propertyValue0, T1 propertyValue1);\n[Serilog.Core.MessageTemplateFormatMethod(\"messageTemplate\")]\nvoid Debug<T0, T1>(System.Exception? exception, string messageTemplate, T0 propertyValue0, T1 propertyValue1);\n[Serilog.Core.MessageTemplateFormatMethod(\"messageTemplate\")]\nvoid Debug<T0, T1, T2>(string messageTemplate, T0 propertyValue0, T1 propertyValue1, T2 propertyValue2);\n[Serilog.Core.MessageTemplateFormatMethod(\"messageTemplate\")]\nvoid Debug<T0, T1, T2>(System.Exception? exception, string messageTemplate, T0 propertyValue0, T1 propertyValue1, T2 propertyValue2);\n[Serilog.Core.MessageTemplateFormatMethod(\"messageTemplate\")]\nvoid Error(string messageTemplate);\n[Serilog.Core.MessageTemplateFormatMethod(\"messageTemplate\")]\nvoid Error(System.Exception? exception, string messageTemplate);\n[Serilog.Core.MessageTemplateFormatMethod(\"messageTemplate\")]\nvoid Error(string messageTemplate, params object?[]? propertyValues);\n[Serilog.Core.MessageTemplateFormatMethod(\"messageTemplate\")]\nvoid Error(System.Exception? exception, string messageTemplate, params object?[]? propertyValues);\n[Serilog.Core.MessageTemplateFormatMethod(\"messageTemplate\")]\nvoid Error<T>(string messageTemplate, T propertyValue);\n[Serilog.Core.MessageTemplateFormatMethod(\"messageTemplate\")]\nvoid Error<T>(System.Exception? exception, string messageTemplate, T propertyValue);\n[Serilog.Core.MessageTemplateFormatMethod(\"messageTemplate\")]\nvoid Error<T0, T1>(string messageTemplate, T0 propertyValue0, T1 propertyValue1);\n[Serilog.Core.MessageTemplateFormatMethod(\"messageTemplate\")]\nvoid Error<T0, T1>(System.Exception? exception, string messageTemplate, T0 propertyValue0, T1 propertyValue1);\n[Serilog.Core.MessageTemplateFormatMethod(\"messageTemplate\")]\nvoid Error<T0, T1, T2>(string messageTemplate, T0 propertyValue0, T1 propertyValue1, T2 propertyValue2);\n[Serilog.Core.MessageTemplateFormatMethod(\"messageTemplate\")]\nvoid Error<T0, T1, T2>(System.Exception? exception, string messageTemplate, T0 propertyValue0, T1 propertyValue1, T2 propertyValue2);\n[Serilog.Core.MessageTemplateFormatMethod(\"messageTemplate\")]\nvoid Fatal(string messageTemplate);\n[Serilog.Core.MessageTemplateFormatMethod(\"messageTemplate\")]\nvoid Fatal(System.Exception? exception, string messageTemplate);\n[Serilog.Core.MessageTemplateFormatMethod(\"messageTemplate\")]\nvoid Fatal(string messageTemplate, params object?[]? propertyValues);\n[Serilog.Core.MessageTemplateFormatMethod(\"messageTemplate\")]\nvoid Fatal(System.Exception? exception, string messageTemplate, params object?[]? propertyValues);\n[Serilog.Core.MessageTemplateFormatMethod(\"messageTemplate\")]\nvoid Fatal<T>(string messageTemplate, T propertyValue);\n[Serilog.Core.MessageTemplateFormatMethod(\"messageTemplate\")]\nvoid Fatal<T>(System.Exception? exception, string messageTemplate, T propertyValue);\n[Serilog.Core.MessageTemplateFormatMethod(\"messageTemplate\")]\nvoid Fatal<T0, T1>(string messageTemplate, T0 propertyValue0, T1 propertyValue1);\n[Serilog.Core.MessageTemplateFormatMethod(\"messageTemplate\")]\nvoid Fatal<T0, T1>(System.Exception? exception, string messageTemplate, T0 propertyValue0, T1 propertyValue1);\n[Serilog.Core.MessageTemplateFormatMethod(\"messageTemplate\")]\nvoid Fatal<T0, T1, T2>(string messageTemplate, T0 propertyValue0, T1 propertyValue1, T2 propertyValue2);\n[Serilog.Core.MessageTemplateFormatMethod(\"messageTemplate\")]\nvoid Fatal<T0, T1, T2>(System.Exception? exception, string messageTemplate, T0 propertyValue0, T1 propertyValue1, T2 propertyValue2);\nSerilog.ILogger ForContext(Serilog.Core.ILogEventEnricher enricher);\nSerilog.ILogger ForContext(System.Collections.Generic.IEnumerable<Serilog.Core.ILogEventEnricher> enrichers);\nSerilog.ILogger ForContext(System.Type source);\nSerilog.ILogger ForContext(string propertyName, object? value, bool destructureObjects = false);\nSerilog.ILogger ForContext<TSource>();\n[Serilog.Core.MessageTemplateFormatMethod(\"messageTemplate\")]\nvoid Information(string messageTemplate);\n[Serilog.Core.MessageTemplateFormatMethod(\"messageTemplate\")]\nvoid Information(System.Exception? exception, string messageTemplate);\n[Serilog.Core.MessageTemplateFormatMethod(\"messageTemplate\")]\nvoid Information(string messageTemplate, params object?[]? propertyValues);\n[Serilog.Core.MessageTemplateFormatMethod(\"messageTemplate\")]\nvoid Information(System.Exception? exception, string messageTemplate, params object?[]? propertyValues);\n[Serilog.Core.MessageTemplateFormatMethod(\"messageTemplate\")]\nvoid Information<T>(string messageTemplate, T propertyValue);\n[Serilog.Core.MessageTemplateFormatMethod(\"messageTemplate\")]\nvoid Information<T>(System.Exception? exception, string messageTemplate, T propertyValue);\n[Serilog.Core.MessageTemplateFormatMethod(\"messageTemplate\")]\nvoid Information<T0, T1>(string messageTemplate, T0 propertyValue0, T1 propertyValue1);\n[Serilog.Core.MessageTemplateFormatMethod(\"messageTemplate\")]\nvoid Information<T0, T1>(System.Exception? exception, string messageTemplate, T0 propertyValue0, T1 propertyValue1);\n[Serilog.Core.MessageTemplateFormatMethod(\"messageTemplate\")]\nvoid Information<T0, T1, T2>(string messageTemplate, T0 propertyValue0, T1 propertyValue1, T2 propertyValue2);\n[Serilog.Core.MessageTemplateFormatMethod(\"messageTemplate\")]\nvoid Information<T0, T1, T2>(System.Exception? exception, string messageTemplate, T0 propertyValue0, T1 propertyValue1, T2 propertyValue2);\nbool IsEnabled(Serilog.Events.LogEventLevel level);\n[Serilog.Core.MessageTemplateFormatMethod(\"messageTemplate\")]\nvoid Verbose(string messageTemplate);\n[Serilog.Core.MessageTemplateFormatMethod(\"messageTemplate\")]\nvoid Verbose(System.Exception? exception, string messageTemplate);\n[Serilog.Core.MessageTemplateFormatMethod(\"messageTemplate\")]\nvoid Verbose(string messageTemplate, params object?[]? propertyValues);\n[Serilog.Core.MessageTemplateFormatMethod(\"messageTemplate\")]\nvoid Verbose(System.Exception? exception, string messageTemplate, params object?[]? propertyValues);\n[Serilog.Core.MessageTemplateFormatMethod(\"messageTemplate\")]\nvoid Verbose<T>(string messageTemplate, T propertyValue);\n[Serilog.Core.MessageTemplateFormatMethod(\"messageTemplate\")]\nvoid Verbose<T>(System.Exception? exception, string messageTemplate, T propertyValue);\n[Serilog.Core.MessageTemplateFormatMethod(\"messageTemplate\")]\nvoid Verbose<T0, T1>(string messageTemplate, T0 propertyValue0, T1 propertyValue1);\n[Serilog.Core.MessageTemplateFormatMethod(\"messageTemplate\")]\nvoid Verbose<T0, T1>(System.Exception? exception, string messageTemplate, T0 propertyValue0, T1 propertyValue1);\n[Serilog.Core.MessageTemplateFormatMethod(\"messageTemplate\")]\nvoid Verbose<T0, T1, T2>(string messageTemplate, T0 propertyValue0, T1 propertyValue1, T2 propertyValue2);\n[Serilog.Core.MessageTemplateFormatMethod(\"messageTemplate\")]\nvoid Verbose<T0, T1, T2>(System.Exception? exception, string messageTemplate, T0 propertyValue0, T1 propertyValue1, T2 propertyValue2);\n[Serilog.Core.MessageTemplateFormatMethod(\"messageTemplate\")]\nvoid Warning(string messageTemplate);\n[Serilog.Core.MessageTemplateFormatMethod(\"messageTemplate\")]\nvoid Warning(System.Exception? exception, string messageTemplate);\n[Serilog.Core.MessageTemplateFormatMethod(\"messageTemplate\")]\nvoid Warning(string messageTemplate, params object?[]? propertyValues);\n[Serilog.Core.MessageTemplateFormatMethod(\"messageTemplate\")]\nvoid Warning(System.Exception? exception, string messageTemplate, params object?[]? propertyValues);\n[Serilog.Core.MessageTemplateFormatMethod(\"messageTemplate\")]\nvoid Warning<T>(string messageTemplate, T propertyValue);\n```\n\n----------------------------------------\n\nTITLE: Implementing Logger Extension Methods in C#\nDESCRIPTION: LoggerExtensions class providing extension methods for ILogger instances, such as creating a contextualized logger with additional properties. This allows enriching log events with context-specific information.\nSOURCE: https://github.com/serilog/serilog/blob/dev/test/Serilog.ApprovalTests/Serilog.approved.txt#2025-04-16_snippet_37\n\nLANGUAGE: C#\nCODE:\n```\npublic static class LoggerExtensions\n{\n    public static Serilog.ILogger ForContext<TValue>(this Serilog.ILogger logger, Serilog.Events.LogEventLevel level, string propertyName, TValue value, bool destructureObjects = false) { }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Information Logging Methods in C#\nDESCRIPTION: Various overloads of the Information method for structured logging with different parameter counts and support for exceptions. These methods allow logging at the Information level with structured data and message templates.\nSOURCE: https://github.com/serilog/serilog/blob/dev/test/Serilog.ApprovalTests/Serilog.approved.txt#2025-04-16_snippet_31\n\nLANGUAGE: C#\nCODE:\n```\n[Serilog.Core.MessageTemplateFormatMethod(\"messageTemplate\")]\npublic static void Information(string messageTemplate, params object?[]? propertyValues) { }\n[Serilog.Core.MessageTemplateFormatMethod(\"messageTemplate\")]\npublic static void Information(System.Exception? exception, string messageTemplate, params object?[]? propertyValues) { }\n[Serilog.Core.MessageTemplateFormatMethod(\"messageTemplate\")]\npublic static void Information<T>(string messageTemplate, T propertyValue) { }\n[Serilog.Core.MessageTemplateFormatMethod(\"messageTemplate\")]\npublic static void Information<T>(System.Exception? exception, string messageTemplate, T propertyValue) { }\n[Serilog.Core.MessageTemplateFormatMethod(\"messageTemplate\")]\npublic static void Information<T0, T1>(string messageTemplate, T0 propertyValue0, T1 propertyValue1) { }\n[Serilog.Core.MessageTemplateFormatMethod(\"messageTemplate\")]\npublic static void Information<T0, T1>(System.Exception? exception, string messageTemplate, T0 propertyValue0, T1 propertyValue1) { }\n[Serilog.Core.MessageTemplateFormatMethod(\"messageTemplate\")]\npublic static void Information<T0, T1, T2>(string messageTemplate, T0 propertyValue0, T1 propertyValue1, T2 propertyValue2) { }\n[Serilog.Core.MessageTemplateFormatMethod(\"messageTemplate\")]\npublic static void Information<T0, T1, T2>(System.Exception? exception, string messageTemplate, T0 propertyValue0, T1 propertyValue1, T2 propertyValue2) { }\n```\n\n----------------------------------------\n\nTITLE: Implementing Write Logging Methods in C#\nDESCRIPTION: Various overloads of the Write method for structured logging with configurable log level, different parameter counts, and support for exceptions. These methods provide the foundation for the level-specific logging methods.\nSOURCE: https://github.com/serilog/serilog/blob/dev/test/Serilog.ApprovalTests/Serilog.approved.txt#2025-04-16_snippet_35\n\nLANGUAGE: C#\nCODE:\n```\npublic static void Write(Serilog.Events.LogEvent logEvent) { }\n[Serilog.Core.MessageTemplateFormatMethod(\"messageTemplate\")]\npublic static void Write(Serilog.Events.LogEventLevel level, string messageTemplate) { }\n[Serilog.Core.MessageTemplateFormatMethod(\"messageTemplate\")]\npublic static void Write(Serilog.Events.LogEventLevel level, System.Exception? exception, string messageTemplate) { }\n[Serilog.Core.MessageTemplateFormatMethod(\"messageTemplate\")]\npublic static void Write(Serilog.Events.LogEventLevel level, string messageTemplate, params object?[]? propertyValues) { }\n[Serilog.Core.MessageTemplateFormatMethod(\"messageTemplate\")]\npublic static void Write(Serilog.Events.LogEventLevel level, System.Exception? exception, string messageTemplate, params object?[]? propertyValues) { }\n[Serilog.Core.MessageTemplateFormatMethod(\"messageTemplate\")]\npublic static void Write<T>(Serilog.Events.LogEventLevel level, string messageTemplate, T propertyValue) { }\n[Serilog.Core.MessageTemplateFormatMethod(\"messageTemplate\")]\npublic static void Write<T>(Serilog.Events.LogEventLevel level, System.Exception? exception, string messageTemplate, T propertyValue) { }\n[Serilog.Core.MessageTemplateFormatMethod(\"messageTemplate\")]\npublic static void Write<T0, T1>(Serilog.Events.LogEventLevel level, string messageTemplate, T0 propertyValue0, T1 propertyValue1) { }\n[Serilog.Core.MessageTemplateFormatMethod(\"messageTemplate\")]\npublic static void Write<T0, T1>(Serilog.Events.LogEventLevel level, System.Exception? exception, string messageTemplate, T0 propertyValue0, T1 propertyValue1) { }\n[Serilog.Core.MessageTemplateFormatMethod(\"messageTemplate\")]\npublic static void Write<T0, T1, T2>(Serilog.Events.LogEventLevel level, string messageTemplate, T0 propertyValue0, T1 propertyValue1, T2 propertyValue2) { }\n[Serilog.Core.MessageTemplateFormatMethod(\"messageTemplate\")]\npublic static void Write<T0, T1, T2>(Serilog.Events.LogEventLevel level, System.Exception? exception, string messageTemplate, T0 propertyValue0, T1 propertyValue1, T2 propertyValue2) { }\n```\n\n----------------------------------------\n\nTITLE: Defining Core Interfaces for Serilog\nDESCRIPTION: Defines core interfaces for Serilog, including interfaces for batched log event sinks, destructuring policies, log event enrichers, filters, property factories, and sinks. These interfaces provide the foundation for extending and customizing Serilog's logging behavior.\nSOURCE: https://github.com/serilog/serilog/blob/dev/test/Serilog.ApprovalTests/Serilog.approved.txt#2025-04-16_snippet_5\n\nLANGUAGE: C#\nCODE:\n```\n    public interface IBatchedLogEventSink\n    {\n        System.Threading.Tasks.Task EmitBatchAsync(System.Collections.Generic.IReadOnlyCollection<Serilog.Events.LogEvent> batch);\n        System.Threading.Tasks.Task OnEmptyBatchAsync();\n    }\n    public interface IDestructuringPolicy\n    {\n        bool TryDestructure(object value, Serilog.Core.ILogEventPropertyValueFactory propertyValueFactory, [System.Diagnostics.CodeAnalysis.NotNullWhen(true)] out Serilog.Events.LogEventPropertyValue? result);\n    }\n    public interface ILogEventEnricher\n    {\n        void Enrich(Serilog.Events.LogEvent logEvent, Serilog.Core.ILogEventPropertyFactory propertyFactory);\n    }\n    public interface ILogEventFilter\n    {\n        bool IsEnabled(Serilog.Events.LogEvent logEvent);\n    }\n    public interface ILogEventPropertyFactory\n    {\n        Serilog.Events.LogEventProperty CreateProperty(string name, object? value, bool destructureObjects = false);\n    }\n    public interface ILogEventPropertyValueFactory\n    {\n        Serilog.Events.LogEventPropertyValue CreatePropertyValue(object? value, bool destructureObjects = false);\n    }\n    public interface ILogEventSink\n    {\n        void Emit(Serilog.Events.LogEvent logEvent);\n    }\n    public interface ILoggingFailureListener\n    {\n        void OnLoggingFailed(object sender, Serilog.Core.LoggingFailureKind kind, string message, System.Collections.Generic.IReadOnlyCollection<Serilog.Events.LogEvent>? events, System.Exception? exception);\n    }\n    public interface ISetLoggingFailureListener\n    {\n        void SetFailureListener(Serilog.Core.ILoggingFailureListener failureListener);\n    }\n```\n\n----------------------------------------\n\nTITLE: Defining LogEvent Class in C#\nDESCRIPTION: Defines the LogEvent class which represents a log entry in Serilog. It includes properties for timestamp, level, exception, message template, and additional properties. It also provides methods for manipulating properties and rendering messages.\nSOURCE: https://github.com/serilog/serilog/blob/dev/test/Serilog.ApprovalTests/Serilog.approved.txt#2025-04-16_snippet_21\n\nLANGUAGE: C#\nCODE:\n```\npublic class LogEvent\n{\n    public LogEvent(System.DateTimeOffset timestamp, Serilog.Events.LogEventLevel level, System.Exception? exception, Serilog.Events.MessageTemplate messageTemplate, System.Collections.Generic.IEnumerable<Serilog.Events.LogEventProperty> properties) { }\n    [System.CLSCompliant(false)]\n    public LogEvent(System.DateTimeOffset timestamp, Serilog.Events.LogEventLevel level, System.Exception? exception, Serilog.Events.MessageTemplate messageTemplate, System.Collections.Generic.IEnumerable<Serilog.Events.LogEventProperty> properties, System.Diagnostics.ActivityTraceId traceId, System.Diagnostics.ActivitySpanId spanId) { }\n    public System.Exception? Exception { get; }\n    public Serilog.Events.LogEventLevel Level { get; }\n    public Serilog.Events.MessageTemplate MessageTemplate { get; }\n    public System.Collections.Generic.IReadOnlyDictionary<string, Serilog.Events.LogEventPropertyValue> Properties { get; }\n    [System.CLSCompliant(false)]\n    public System.Diagnostics.ActivitySpanId? SpanId { get; }\n    public System.DateTimeOffset Timestamp { get; }\n    [System.CLSCompliant(false)]\n    public System.Diagnostics.ActivityTraceId? TraceId { get; }\n    public void AddOrUpdateProperty(Serilog.Events.LogEventProperty property) { }\n    public void AddPropertyIfAbsent(Serilog.Events.LogEventProperty property) { }\n    public void AddPropertyIfAbsent(Serilog.Core.ILogEventPropertyFactory factory, string name, object? value, bool destructureObjects = false) { }\n    public void RemovePropertyIfPresent(string propertyName) { }\n    public string RenderMessage(System.IFormatProvider? formatProvider = null) { }\n    public void RenderMessage(System.IO.TextWriter output, System.IFormatProvider? formatProvider = null) { }\n    [System.CLSCompliant(false)]\n    public static Serilog.Events.LogEvent UnstableAssembleFromParts(System.DateTimeOffset timestamp, Serilog.Events.LogEventLevel level, System.Exception? exception, Serilog.Events.MessageTemplate messageTemplate, System.Collections.Generic.Dictionary<string, Serilog.Events.LogEventPropertyValue> properties, System.Diagnostics.ActivityTraceId traceId, System.Diagnostics.ActivitySpanId spanId) { }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining IsEnabled Method in Serilog\nDESCRIPTION: This C# code snippet defines an `IsEnabled` method within a Serilog context. It takes a `LogEventLevel` as input and returns a boolean, indicating whether logging is enabled at that level.  This function is typically used to prevent the cost of constructing log messages when they would be discarded.\nSOURCE: https://github.com/serilog/serilog/blob/dev/test/Serilog.ApprovalTests/Serilog.approved.txt#2025-04-16_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\n        public bool IsEnabled(Serilog.Events.LogEventLevel level) { }\n```\n\n----------------------------------------\n\nTITLE: Defining Write Logging Methods in Serilog\nDESCRIPTION: These C# code snippets define several overloaded `Write` methods within a Serilog context. These methods provide various ways to write log events, including specifying the log level, exception, message template, and property values. The `MessageTemplateFormatMethod` attribute indicates that the `messageTemplate` parameter should be treated as a message template for structured logging.\nSOURCE: https://github.com/serilog/serilog/blob/dev/test/Serilog.ApprovalTests/Serilog.approved.txt#2025-04-16_snippet_11\n\nLANGUAGE: csharp\nCODE:\n```\n        public void Write(Serilog.Events.LogEvent logEvent) { }\n        [Serilog.Core.MessageTemplateFormatMethod(\"messageTemplate\")]\n        public void Write(Serilog.Events.LogEventLevel level, string messageTemplate) { }\n        [Serilog.Core.MessageTemplateFormatMethod(\"messageTemplate\")]\n        public void Write(Serilog.Events.LogEventLevel level, System.Exception? exception, string messageTemplate) { }\n        [Serilog.Core.MessageTemplateFormatMethod(\"messageTemplate\")]\n        public void Write(Serilog.Events.LogEventLevel level, string messageTemplate, params object?[]? propertyValues) { }\n        [Serilog.Core.MessageTemplateFormatMethod(\"messageTemplate\")]\n        public void Write(Serilog.Events.LogEventLevel level, System.Exception? exception, string messageTemplate, params object?[]? propertyValues) { }\n        [Serilog.Core.MessageTemplateFormatMethod(\"messageTemplate\")]\n        public void Write<T>(Serilog.Events.LogEventLevel level, string messageTemplate, T propertyValue) { }\n        [Serilog.Core.MessageTemplateFormatMethod(\"messageTemplate\")]\n        public void Write<T>(Serilog.Events.LogEventLevel level, System.Exception? exception, string messageTemplate, T propertyValue) { }\n        [Serilog.Core.MessageTemplateFormatMethod(\"messageTemplate\")]\n        public void Write<T0, T1>(Serilog.Events.LogEventLevel level, string messageTemplate, T0 propertyValue0, T1 propertyValue1) { }\n        [Serilog.Core.MessageTemplateFormatMethod(\"messageTemplate\")]\n        public void Write<T0, T1>(Serilog.Events.LogEventLevel level, System.Exception? exception, string messageTemplate, T0 propertyValue0, T1 propertyValue1) { }\n        [Serilog.Core.MessageTemplateFormatMethod(\"messageTemplate\")]\n        public void Write<T0, T1, T2>(Serilog.Events.LogEventLevel level, string messageTemplate, T0 propertyValue0, T1 propertyValue1, T2 propertyValue2) { }\n        [Serilog.Core.MessageTemplateFormatMethod(\"messageTemplate\")]\n        public void Write<T0, T1, T2>(Serilog.Events.LogEventLevel level, System.Exception? exception, string messageTemplate, T0 propertyValue0, T1 propertyValue1, T2 propertyValue2) { }\n```\n\n----------------------------------------\n\nTITLE: Defining LoggingLevelSwitch Class in Serilog\nDESCRIPTION: This C# code snippet defines a `LoggingLevelSwitch` class within a Serilog context. It allows dynamically changing the minimum logging level at runtime. It includes a constructor to set the initial minimum level, a `MinimumLevel` property to get or set the current minimum level, and a `MinimumLevelChanged` event that is raised when the minimum level changes.\nSOURCE: https://github.com/serilog/serilog/blob/dev/test/Serilog.ApprovalTests/Serilog.approved.txt#2025-04-16_snippet_13\n\nLANGUAGE: csharp\nCODE:\n```\n    public class LoggingLevelSwitch\n    {\n        public LoggingLevelSwitch(Serilog.Events.LogEventLevel initialMinimumLevel = 2) { }\n        public Serilog.Events.LogEventLevel MinimumLevel { get; set; }\n        public event System.EventHandler<Serilog.Core.LoggingLevelSwitchChangedEventArgs>? MinimumLevelChanged;\n    }\n```\n\n----------------------------------------\n\nTITLE: Implementing JsonFormatter in C#\nDESCRIPTION: Implements the JsonFormatter class which formats log events as JSON. It implements the ITextFormatter interface and provides options for customizing the output format.\nSOURCE: https://github.com/serilog/serilog/blob/dev/test/Serilog.ApprovalTests/Serilog.approved.txt#2025-04-16_snippet_22\n\nLANGUAGE: C#\nCODE:\n```\npublic sealed class JsonFormatter : Serilog.Formatting.ITextFormatter\n{\n    public JsonFormatter(string? closingDelimiter = null, bool renderMessage = false, System.IFormatProvider? formatProvider = null) { }\n    public void Format(Serilog.Events.LogEvent logEvent, System.IO.TextWriter output) { }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining MessageTemplateTextFormatter in C#\nDESCRIPTION: Defines the MessageTemplateTextFormatter class which formats log events using a message template. It implements the ITextFormatter interface and allows customization of the output template and format provider.\nSOURCE: https://github.com/serilog/serilog/blob/dev/test/Serilog.ApprovalTests/Serilog.approved.txt#2025-04-16_snippet_23\n\nLANGUAGE: C#\nCODE:\n```\npublic class MessageTemplateTextFormatter : Serilog.Formatting.ITextFormatter\n{\n    public MessageTemplateTextFormatter(string outputTemplate, System.IFormatProvider? formatProvider = null) { }\n    public void Format(Serilog.Events.LogEvent logEvent, System.IO.TextWriter output) { }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Message Template Parser in C#\nDESCRIPTION: Class responsible for parsing message template strings into structured templates. This parser converts template strings with property placeholders into MessageTemplate objects that can be rendered with property values.\nSOURCE: https://github.com/serilog/serilog/blob/dev/test/Serilog.ApprovalTests/Serilog.approved.txt#2025-04-16_snippet_41\n\nLANGUAGE: C#\nCODE:\n```\npublic class MessageTemplateParser\n{\n    public MessageTemplateParser() { }\n    public Serilog.Events.MessageTemplate Parse(string messageTemplate) { }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Static Log Class for Serilog in C#\nDESCRIPTION: This snippet defines the static Log class for Serilog. It includes properties and methods for binding message templates, closing and flushing the logger, and creating contextualized loggers.\nSOURCE: https://github.com/serilog/serilog/blob/dev/test/Serilog.ApprovalTests/Serilog.approved.txt#2025-04-16_snippet_27\n\nLANGUAGE: C#\nCODE:\n```\npublic static class Log\n{\n    public static Serilog.ILogger Logger { get; set; }\n    [Serilog.Core.MessageTemplateFormatMethod(\"messageTemplate\")]\n    public static bool BindMessageTemplate(string messageTemplate, object?[] propertyValues, [System.Diagnostics.CodeAnalysis.NotNullWhen(true)] out Serilog.Events.MessageTemplate? parsedTemplate, [System.Diagnostics.CodeAnalysis.NotNullWhen(true)] out System.Collections.Generic.IEnumerable<Serilog.Events.LogEventProperty>? boundProperties) { }\n    public static bool BindProperty(string propertyName, object? value, bool destructureObjects, [System.Diagnostics.CodeAnalysis.NotNullWhen(true)] out Serilog.Events.LogEventProperty? property) { }\n    public static void CloseAndFlush() { }\n    public static System.Threading.Tasks.ValueTask CloseAndFlushAsync() { }\n    public static Serilog.ILogger ForContext(Serilog.Core.ILogEventEnricher enricher) { }\n    public static Serilog.ILogger ForContext(Serilog.Core.ILogEventEnricher[] enrichers) { }\n    public static Serilog.ILogger ForContext(System.Type source) { }\n    public static Serilog.ILogger ForContext(string propertyName, object? value, bool destructureObjects = false) { }\n    public static Serilog.ILogger ForContext<TSource>() { }\n```\n\n----------------------------------------\n\nTITLE: Defining Debug Methods in Static Log Class for Serilog in C#\nDESCRIPTION: This snippet defines various overloads of the Debug method in the static Log class. It includes options for logging with or without exceptions and with different numbers of generic type parameters.\nSOURCE: https://github.com/serilog/serilog/blob/dev/test/Serilog.ApprovalTests/Serilog.approved.txt#2025-04-16_snippet_28\n\nLANGUAGE: C#\nCODE:\n```\n[Serilog.Core.MessageTemplateFormatMethod(\"messageTemplate\")]\npublic static void Debug(string messageTemplate) { }\n[Serilog.Core.MessageTemplateFormatMethod(\"messageTemplate\")]\npublic static void Debug(System.Exception? exception, string messageTemplate) { }\n[Serilog.Core.MessageTemplateFormatMethod(\"messageTemplate\")]\npublic static void Debug(string messageTemplate, params object?[]? propertyValues) { }\n[Serilog.Core.MessageTemplateFormatMethod(\"messageTemplate\")]\npublic static void Debug(System.Exception? exception, string messageTemplate, params object?[]? propertyValues) { }\n[Serilog.Core.MessageTemplateFormatMethod(\"messageTemplate\")]\npublic static void Debug<T>(string messageTemplate, T propertyValue) { }\n[Serilog.Core.MessageTemplateFormatMethod(\"messageTemplate\")]\npublic static void Debug<T>(System.Exception? exception, string messageTemplate, T propertyValue) { }\n[Serilog.Core.MessageTemplateFormatMethod(\"messageTemplate\")]\npublic static void Debug<T0, T1>(string messageTemplate, T0 propertyValue0, T1 propertyValue1) { }\n[Serilog.Core.MessageTemplateFormatMethod(\"messageTemplate\")]\npublic static void Debug<T0, T1>(System.Exception? exception, string messageTemplate, T0 propertyValue0, T1 propertyValue1) { }\n[Serilog.Core.MessageTemplateFormatMethod(\"messageTemplate\")]\npublic static void Debug<T0, T1, T2>(string messageTemplate, T0 propertyValue0, T1 propertyValue1, T2 propertyValue2) { }\n[Serilog.Core.MessageTemplateFormatMethod(\"messageTemplate\")]\npublic static void Debug<T0, T1, T2>(System.Exception? exception, string messageTemplate, T0 propertyValue0, T1 propertyValue1, T2 propertyValue2) { }\n```\n\n----------------------------------------\n\nTITLE: Checking Log Level State in C#\nDESCRIPTION: Method to check if a specific log event level is enabled in the current logger configuration. This allows conditional execution of logging code based on the configured minimum level.\nSOURCE: https://github.com/serilog/serilog/blob/dev/test/Serilog.ApprovalTests/Serilog.approved.txt#2025-04-16_snippet_32\n\nLANGUAGE: C#\nCODE:\n```\npublic static bool IsEnabled(Serilog.Events.LogEventLevel level) { }\n```\n\n----------------------------------------\n\nTITLE: Defining Error and Fatal Methods in Static Log Class for Serilog in C#\nDESCRIPTION: This snippet defines various overloads of the Error and Fatal methods in the static Log class. It includes options for logging with or without exceptions and with different numbers of generic type parameters.\nSOURCE: https://github.com/serilog/serilog/blob/dev/test/Serilog.ApprovalTests/Serilog.approved.txt#2025-04-16_snippet_29\n\nLANGUAGE: C#\nCODE:\n```\n[Serilog.Core.MessageTemplateFormatMethod(\"messageTemplate\")]\npublic static void Error(string messageTemplate) { }\n[Serilog.Core.MessageTemplateFormatMethod(\"messageTemplate\")]\npublic static void Error(System.Exception? exception, string messageTemplate) { }\n[Serilog.Core.MessageTemplateFormatMethod(\"messageTemplate\")]\npublic static void Error(string messageTemplate, params object?[]? propertyValues) { }\n[Serilog.Core.MessageTemplateFormatMethod(\"messageTemplate\")]\npublic static void Error(System.Exception? exception, string messageTemplate, params object?[]? propertyValues) { }\n[Serilog.Core.MessageTemplateFormatMethod(\"messageTemplate\")]\npublic static void Error<T>(string messageTemplate, T propertyValue) { }\n[Serilog.Core.MessageTemplateFormatMethod(\"messageTemplate\")]\npublic static void Error<T>(System.Exception? exception, string messageTemplate, T propertyValue) { }\n[Serilog.Core.MessageTemplateFormatMethod(\"messageTemplate\")]\npublic static void Error<T0, T1>(string messageTemplate, T0 propertyValue0, T1 propertyValue1) { }\n[Serilog.Core.MessageTemplateFormatMethod(\"messageTemplate\")]\npublic static void Error<T0, T1>(System.Exception? exception, string messageTemplate, T0 propertyValue0, T1 propertyValue1) { }\n[Serilog.Core.MessageTemplateFormatMethod(\"messageTemplate\")]\npublic static void Error<T0, T1, T2>(string messageTemplate, T0 propertyValue0, T1 propertyValue1, T2 propertyValue2) { }\n[Serilog.Core.MessageTemplateFormatMethod(\"messageTemplate\")]\npublic static void Error<T0, T1, T2>(System.Exception? exception, string messageTemplate, T0 propertyValue0, T1 propertyValue1, T2 propertyValue2) { }\n[Serilog.Core.MessageTemplateFormatMethod(\"messageTemplate\")]\npublic static void Fatal(string messageTemplate) { }\n[Serilog.Core.MessageTemplateFormatMethod(\"messageTemplate\")]\npublic static void Fatal(System.Exception? exception, string messageTemplate) { }\n[Serilog.Core.MessageTemplateFormatMethod(\"messageTemplate\")]\npublic static void Fatal(string messageTemplate, params object?[]? propertyValues) { }\n[Serilog.Core.MessageTemplateFormatMethod(\"messageTemplate\")]\npublic static void Fatal(System.Exception? exception, string messageTemplate, params object?[]? propertyValues) { }\n[Serilog.Core.MessageTemplateFormatMethod(\"messageTemplate\")]\npublic static void Fatal<T>(string messageTemplate, T propertyValue) { }\n[Serilog.Core.MessageTemplateFormatMethod(\"messageTemplate\")]\npublic static void Fatal<T>(System.Exception? exception, string messageTemplate, T propertyValue) { }\n[Serilog.Core.MessageTemplateFormatMethod(\"messageTemplate\")]\npublic static void Fatal<T0, T1>(string messageTemplate, T0 propertyValue0, T1 propertyValue1) { }\n[Serilog.Core.MessageTemplateFormatMethod(\"messageTemplate\")]\npublic static void Fatal<T0, T1>(System.Exception? exception, string messageTemplate, T0 propertyValue0, T1 propertyValue1) { }\n[Serilog.Core.MessageTemplateFormatMethod(\"messageTemplate\")]\npublic static void Fatal<T0, T1, T2>(string messageTemplate, T0 propertyValue0, T1 propertyValue1, T2 propertyValue2) { }\n[Serilog.Core.MessageTemplateFormatMethod(\"messageTemplate\")]\npublic static void Fatal<T0, T1, T2>(System.Exception? exception, string messageTemplate, T0 propertyValue0, T1 propertyValue1, T2 propertyValue2) { }\n```\n\n----------------------------------------\n\nTITLE: Implementing Warning Logging Methods in C#\nDESCRIPTION: Various overloads of the Warning method for structured logging with different parameter counts and support for exceptions. These methods allow logging at the Warning level with structured data and message templates.\nSOURCE: https://github.com/serilog/serilog/blob/dev/test/Serilog.ApprovalTests/Serilog.approved.txt#2025-04-16_snippet_34\n\nLANGUAGE: C#\nCODE:\n```\n[Serilog.Core.MessageTemplateFormatMethod(\"messageTemplate\")]\npublic static void Warning(string messageTemplate) { }\n[Serilog.Core.MessageTemplateFormatMethod(\"messageTemplate\")]\npublic static void Warning(System.Exception? exception, string messageTemplate) { }\n[Serilog.Core.MessageTemplateFormatMethod(\"messageTemplate\")]\npublic static void Warning(string messageTemplate, params object?[]? propertyValues) { }\n[Serilog.Core.MessageTemplateFormatMethod(\"messageTemplate\")]\npublic static void Warning(System.Exception? exception, string messageTemplate, params object?[]? propertyValues) { }\n[Serilog.Core.MessageTemplateFormatMethod(\"messageTemplate\")]\npublic static void Warning<T>(string messageTemplate, T propertyValue) { }\n[Serilog.Core.MessageTemplateFormatMethod(\"messageTemplate\")]\npublic static void Warning<T>(System.Exception? exception, string messageTemplate, T propertyValue) { }\n[Serilog.Core.MessageTemplateFormatMethod(\"messageTemplate\")]\npublic static void Warning<T0, T1>(string messageTemplate, T0 propertyValue0, T1 propertyValue1) { }\n[Serilog.Core.MessageTemplateFormatMethod(\"messageTemplate\")]\npublic static void Warning<T0, T1>(System.Exception? exception, string messageTemplate, T0 propertyValue0, T1 propertyValue1) { }\n[Serilog.Core.MessageTemplateFormatMethod(\"messageTemplate\")]\npublic static void Warning<T0, T1, T2>(string messageTemplate, T0 propertyValue0, T1 propertyValue1, T2 propertyValue2) { }\n[Serilog.Core.MessageTemplateFormatMethod(\"messageTemplate\")]\npublic static void Warning<T0, T1, T2>(System.Exception? exception, string messageTemplate, T0 propertyValue0, T1 propertyValue1, T2 propertyValue2) { }\n```\n\n----------------------------------------\n\nTITLE: Defining Information Logging Methods in Serilog\nDESCRIPTION: These C# code snippets define several overloaded `Information` methods within a Serilog context.  These methods allow logging information messages, optionally with an exception and/or a variable number of properties.  The `MessageTemplateFormatMethod` attribute indicates that the `messageTemplate` parameter should be treated as a message template for structured logging.\nSOURCE: https://github.com/serilog/serilog/blob/dev/test/Serilog.ApprovalTests/Serilog.approved.txt#2025-04-16_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\n        [Serilog.Core.MessageTemplateFormatMethod(\"messageTemplate\")]\n        public void Information<T0, T1>(string messageTemplate, T0 propertyValue0, T1 propertyValue1) { }\n        [Serilog.Core.MessageTemplateFormatMethod(\"messageTemplate\")]\n        public void Information<T0, T1>(System.Exception? exception, string messageTemplate, T0 propertyValue0, T1 propertyValue1) { }\n        [Serilog.Core.MessageTemplateFormatMethod(\"messageTemplate\")]\n        public void Information<T0, T1, T2>(string messageTemplate, T0 propertyValue0, T1 propertyValue1, T2 propertyValue2) { }\n        [Serilog.Core.MessageTemplateFormatMethod(\"messageTemplate\")]\n        public void Information<T0, T1, T2>(System.Exception? exception, string messageTemplate, T0 propertyValue0, T1 propertyValue1, T2 propertyValue2) { }\n```\n\n----------------------------------------\n\nTITLE: Defining Verbose Logging Methods in Serilog\nDESCRIPTION: These C# code snippets define several overloaded `Verbose` methods within a Serilog context. These methods allow logging verbose messages, optionally with an exception and/or a variable number of properties. The `MessageTemplateFormatMethod` attribute indicates that the `messageTemplate` parameter should be treated as a message template for structured logging.\nSOURCE: https://github.com/serilog/serilog/blob/dev/test/Serilog.ApprovalTests/Serilog.approved.txt#2025-04-16_snippet_9\n\nLANGUAGE: csharp\nCODE:\n```\n        [Serilog.Core.MessageTemplateFormatMethod(\"messageTemplate\")]\n        public void Verbose(string messageTemplate) { }\n        [Serilog.Core.MessageTemplateFormatMethod(\"messageTemplate\")]\n        public void Verbose(System.Exception? exception, string messageTemplate) { }\n        [Serilog.Core.MessageTemplateFormatMethod(\"messageTemplate\")]\n        public void Verbose(string messageTemplate, params object?[]? propertyValues) { }\n        [Serilog.Core.MessageTemplateFormatMethod(\"messageTemplate\")]\n        public void Verbose(System.Exception? exception, string messageTemplate, params object?[]? propertyValues) { }\n        [Serilog.Core.MessageTemplateFormatMethod(\"messageTemplate\")]\n        public void Verbose<T>(string messageTemplate, T propertyValue) { }\n        [Serilog.Core.MessageTemplateFormatMethod(\"messageTemplate\")]\n        public void Verbose<T>(System.Exception? exception, string messageTemplate, T propertyValue) { }\n        [Serilog.Core.MessageTemplateFormatMethod(\"messageTemplate\")]\n        public void Verbose<T0, T1>(string messageTemplate, T0 propertyValue0, T1 propertyValue1) { }\n        [Serilog.Core.MessageTemplateFormatMethod(\"messageTemplate\")]\n        public void Verbose<T0, T1>(System.Exception? exception, string messageTemplate, T0 propertyValue0, T1 propertyValue1) { }\n        [Serilog.Core.MessageTemplateFormatMethod(\"messageTemplate\")]\n        public void Verbose<T0, T1, T2>(string messageTemplate, T0 propertyValue0, T1 propertyValue1, T2 propertyValue2) { }\n        [Serilog.Core.MessageTemplateFormatMethod(\"messageTemplate\")]\n        public void Verbose<T0, T1, T2>(System.Exception? exception, string messageTemplate, T0 propertyValue0, T1 propertyValue1, T2 propertyValue2) { }\n```\n\n----------------------------------------\n\nTITLE: Defining PropertyEnricher Class in Serilog\nDESCRIPTION: This C# code snippet defines a `PropertyEnricher` class within a Serilog context. It enriches log events with a specified property name and value. It implements the `ILogEventEnricher` interface and adds the property to the log event during the `Enrich` method call.\nSOURCE: https://github.com/serilog/serilog/blob/dev/test/Serilog.ApprovalTests/Serilog.approved.txt#2025-04-16_snippet_16\n\nLANGUAGE: csharp\nCODE:\n```\n    public class PropertyEnricher : Serilog.Core.ILogEventEnricher\n    {\n        public PropertyEnricher(string name, object? value, bool destructureObjects = false) { }\n        public void Enrich(Serilog.Events.LogEvent logEvent, Serilog.Core.ILogEventPropertyFactory propertyFactory) { }\n    }\n```\n\n----------------------------------------\n\nTITLE: Defining Warning Logging Methods in Serilog\nDESCRIPTION: These C# code snippets define several overloaded `Warning` methods within a Serilog context.  These methods allow logging warning messages, optionally with an exception and/or a variable number of properties. The `MessageTemplateFormatMethod` attribute indicates that the `messageTemplate` parameter should be treated as a message template for structured logging.\nSOURCE: https://github.com/serilog/serilog/blob/dev/test/Serilog.ApprovalTests/Serilog.approved.txt#2025-04-16_snippet_10\n\nLANGUAGE: csharp\nCODE:\n```\n        [Serilog.Core.MessageTemplateFormatMethod(\"messageTemplate\")]\n        public void Warning(string messageTemplate) { }\n        [Serilog.Core.MessageTemplateFormatMethod(\"messageTemplate\")]\n        public void Warning(System.Exception? exception, string messageTemplate) { }\n        [Serilog.Core.MessageTemplateFormatMethod(\"messageTemplate\")]\n        public void Warning(string messageTemplate, params object?[]? propertyValues) { }\n        [Serilog.Core.MessageTemplateFormatMethod(\"messageTemplate\")]\n        public void Warning(System.Exception? exception, string messageTemplate, params object?[]? propertyValues) { }\n        [Serilog.Core.MessageTemplateFormatMethod(\"messageTemplate\")]\n        public void Warning<T>(string messageTemplate, T propertyValue) { }\n        [Serilog.Core.MessageTemplateFormatMethod(\"messageTemplate\")]\n        public void Warning<T>(System.Exception? exception, string messageTemplate, T propertyValue) { }\n        [Serilog.Core.MessageTemplateFormatMethod(\"messageTemplate\")]\n        public void Warning<T0, T1>(string messageTemplate, T0 propertyValue0, T1 propertyValue1) { }\n        [Serilog.Core.MessageTemplateFormatMethod(\"messageTemplate\")]\n        public void Warning<T0, T1>(System.Exception? exception, string messageTemplate, T0 propertyValue0, T1 propertyValue1) { }\n        [Serilog.Core.MessageTemplateFormatMethod(\"messageTemplate\")]\n        public void Warning<T0, T1, T2>(string messageTemplate, T0 propertyValue0, T1 propertyValue1, T2 propertyValue2) { }\n        [Serilog.Core.MessageTemplateFormatMethod(\"messageTemplate\")]\n        public void Warning<T0, T1, T2>(System.Exception? exception, string messageTemplate, T0 propertyValue0, T1 propertyValue1, T2 propertyValue2) { }\n```\n\n----------------------------------------\n\nTITLE: Implementing Verbose Logging Methods in C#\nDESCRIPTION: Various overloads of the Verbose method for structured logging with different parameter counts and support for exceptions. These methods allow logging at the Verbose level with structured data and message templates.\nSOURCE: https://github.com/serilog/serilog/blob/dev/test/Serilog.ApprovalTests/Serilog.approved.txt#2025-04-16_snippet_33\n\nLANGUAGE: C#\nCODE:\n```\n[Serilog.Core.MessageTemplateFormatMethod(\"messageTemplate\")]\npublic static void Verbose(string messageTemplate) { }\n[Serilog.Core.MessageTemplateFormatMethod(\"messageTemplate\")]\npublic static void Verbose(System.Exception? exception, string messageTemplate) { }\n[Serilog.Core.MessageTemplateFormatMethod(\"messageTemplate\")]\npublic static void Verbose(string messageTemplate, params object?[]? propertyValues) { }\n[Serilog.Core.MessageTemplateFormatMethod(\"messageTemplate\")]\npublic static void Verbose(System.Exception? exception, string messageTemplate, params object?[]? propertyValues) { }\n[Serilog.Core.MessageTemplateFormatMethod(\"messageTemplate\")]\npublic static void Verbose<T>(string messageTemplate, T propertyValue) { }\n[Serilog.Core.MessageTemplateFormatMethod(\"messageTemplate\")]\npublic static void Verbose<T>(System.Exception? exception, string messageTemplate, T propertyValue) { }\n[Serilog.Core.MessageTemplateFormatMethod(\"messageTemplate\")]\npublic static void Verbose<T0, T1>(string messageTemplate, T0 propertyValue0, T1 propertyValue1) { }\n[Serilog.Core.MessageTemplateFormatMethod(\"messageTemplate\")]\npublic static void Verbose<T0, T1>(System.Exception? exception, string messageTemplate, T0 propertyValue0, T1 propertyValue1) { }\n[Serilog.Core.MessageTemplateFormatMethod(\"messageTemplate\")]\npublic static void Verbose<T0, T1, T2>(string messageTemplate, T0 propertyValue0, T1 propertyValue1, T2 propertyValue2) { }\n[Serilog.Core.MessageTemplateFormatMethod(\"messageTemplate\")]\npublic static void Verbose<T0, T1, T2>(System.Exception? exception, string messageTemplate, T0 propertyValue0, T1 propertyValue1, T2 propertyValue2) { }\n```\n\n----------------------------------------\n\nTITLE: Defining Warning Methods in ILogger Interface for Serilog in C#\nDESCRIPTION: This snippet defines various overloads of the Warning method in the ILogger interface. It includes options for logging with or without exceptions and with different numbers of generic type parameters.\nSOURCE: https://github.com/serilog/serilog/blob/dev/test/Serilog.ApprovalTests/Serilog.approved.txt#2025-04-16_snippet_25\n\nLANGUAGE: C#\nCODE:\n```\n[Serilog.Core.MessageTemplateFormatMethod(\"messageTemplate\")]\nvoid Warning<T>(System.Exception? exception, string messageTemplate, T propertyValue);\n[Serilog.Core.MessageTemplateFormatMethod(\"messageTemplate\")]\nvoid Warning<T0, T1>(string messageTemplate, T0 propertyValue0, T1 propertyValue1);\n[Serilog.Core.MessageTemplateFormatMethod(\"messageTemplate\")]\nvoid Warning<T0, T1>(System.Exception? exception, string messageTemplate, T0 propertyValue0, T1 propertyValue1);\n[Serilog.Core.MessageTemplateFormatMethod(\"messageTemplate\")]\nvoid Warning<T0, T1, T2>(string messageTemplate, T0 propertyValue0, T1 propertyValue1, T2 propertyValue2);\n[Serilog.Core.MessageTemplateFormatMethod(\"messageTemplate\")]\nvoid Warning<T0, T1, T2>(System.Exception? exception, string messageTemplate, T0 propertyValue0, T1 propertyValue1, T2 propertyValue2);\n```\n\n----------------------------------------\n\nTITLE: Defining Write Methods in ILogger Interface for Serilog in C#\nDESCRIPTION: This snippet defines various overloads of the Write method in the ILogger interface. It includes options for logging at different levels, with or without exceptions, and with different numbers of generic type parameters.\nSOURCE: https://github.com/serilog/serilog/blob/dev/test/Serilog.ApprovalTests/Serilog.approved.txt#2025-04-16_snippet_26\n\nLANGUAGE: C#\nCODE:\n```\nvoid Write(Serilog.Events.LogEvent logEvent);\n[Serilog.Core.MessageTemplateFormatMethod(\"messageTemplate\")]\nvoid Write(Serilog.Events.LogEventLevel level, string messageTemplate);\n[Serilog.Core.MessageTemplateFormatMethod(\"messageTemplate\")]\nvoid Write(Serilog.Events.LogEventLevel level, System.Exception? exception, string messageTemplate);\n[Serilog.Core.MessageTemplateFormatMethod(\"messageTemplate\")]\nvoid Write(Serilog.Events.LogEventLevel level, string messageTemplate, params object?[]? propertyValues);\n[Serilog.Core.MessageTemplateFormatMethod(\"messageTemplate\")]\nvoid Write(Serilog.Events.LogEventLevel level, System.Exception? exception, string messageTemplate, params object?[]? propertyValues);\n[Serilog.Core.MessageTemplateFormatMethod(\"messageTemplate\")]\nvoid Write<T>(Serilog.Events.LogEventLevel level, string messageTemplate, T propertyValue);\n[Serilog.Core.MessageTemplateFormatMethod(\"messageTemplate\")]\nvoid Write<T>(Serilog.Events.LogEventLevel level, System.Exception? exception, string messageTemplate, T propertyValue);\n[Serilog.Core.MessageTemplateFormatMethod(\"messageTemplate\")]\nvoid Write<T0, T1>(Serilog.Events.LogEventLevel level, string messageTemplate, T0 propertyValue0, T1 propertyValue1);\n[Serilog.Core.MessageTemplateFormatMethod(\"messageTemplate\")]\nvoid Write<T0, T1>(Serilog.Events.LogEventLevel level, System.Exception? exception, string messageTemplate, T0 propertyValue0, T1 propertyValue1);\n[Serilog.Core.MessageTemplateFormatMethod(\"messageTemplate\")]\nvoid Write<T0, T1, T2>(Serilog.Events.LogEventLevel level, string messageTemplate, T0 propertyValue0, T1 propertyValue1, T2 propertyValue2);\n[Serilog.Core.MessageTemplateFormatMethod(\"messageTemplate\")]\nvoid Write<T0, T1, T2>(Serilog.Events.LogEventLevel level, System.Exception? exception, string messageTemplate, T0 propertyValue0, T1 propertyValue1, T2 propertyValue2);\n```\n\n----------------------------------------\n\nTITLE: Defining Logger Extensions in Serilog\nDESCRIPTION: Defines extension methods for the `Logger` class to add contextual information. These extensions allow for pushing properties, enriching log events, and managing the logging context.\nSOURCE: https://github.com/serilog/serilog/blob/dev/test/Serilog.ApprovalTests/Serilog.approved.txt#2025-04-16_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\n        public static System.IDisposable Push([System.Runtime.CompilerServices.ParamCollection] System.Collections.Generic.IEnumerable<Serilog.Core.ILogEventEnricher> enrichers) { }\n        [System.Runtime.CompilerServices.OverloadResolutionPriority(2)]\n        public static System.IDisposable Push([System.Runtime.CompilerServices.ParamCollection] [System.Runtime.CompilerServices.ScopedRef] System.ReadOnlySpan<Serilog.Core.ILogEventEnricher> enrichers) { }\n        public static System.IDisposable PushProperty(string name, object? value, bool destructureObjects = false) { }\n        public static void Reset() { }\n        public static System.IDisposable Suspend() { }\n    }\n```\n\n----------------------------------------\n\nTITLE: Defining Information Method in Static Log Class for Serilog in C#\nDESCRIPTION: This snippet defines the Information method overloads in the static Log class. It includes options for logging with or without exceptions.\nSOURCE: https://github.com/serilog/serilog/blob/dev/test/Serilog.ApprovalTests/Serilog.approved.txt#2025-04-16_snippet_30\n\nLANGUAGE: C#\nCODE:\n```\n[Serilog.Core.MessageTemplateFormatMethod(\"messageTemplate\")]\npublic static void Information(string messageTemplate) { }\n[Serilog.Core.MessageTemplateFormatMethod(\"messageTemplate\")]\npublic static void Information(System.Exception? exception, string messageTemplate) { }\n```\n\n----------------------------------------\n\nTITLE: Implementing Logging Context Management in C#\nDESCRIPTION: Static class providing methods for managing logging context and enrichers through push operations.\nSOURCE: https://github.com/serilog/serilog/blob/dev/test/Serilog.ApprovalTests/Serilog.approved.txt#2025-04-16_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\npublic static class LogContext\n{\n    public static Serilog.Core.ILogEventEnricher Clone() { }\n    [System.Runtime.CompilerServices.OverloadResolutionPriority(3)]\n    public static System.IDisposable Push(Serilog.Core.ILogEventEnricher enricher) { }\n    [System.Runtime.CompilerServices.OverloadResolutionPriority(0)]\n    public static System.IDisposable Push(params Serilog.Core.ILogEventEnricher[] enrichers) { }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Batching Options in C#\nDESCRIPTION: Defines configuration options for batch processing of log events including size limits, buffering time, and retry settings.\nSOURCE: https://github.com/serilog/serilog/blob/dev/test/Serilog.ApprovalTests/Serilog.approved.txt#2025-04-16_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\npublic class BatchingOptions\n{\n    public BatchingOptions() { }\n    public int BatchSizeLimit { get; set; }\n    public System.TimeSpan BufferingTimeLimit { get; set; }\n    public bool EagerlyEmitFirstEvent { get; set; }\n    public int? QueueLimit { get; set; }\n    public System.TimeSpan RetryTimeLimit { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Property Token in C#\nDESCRIPTION: Sealed class representing a property placeholder in a message template. This token type handles rendering of property values with specified formatting, alignment, and destructuring options.\nSOURCE: https://github.com/serilog/serilog/blob/dev/test/Serilog.ApprovalTests/Serilog.approved.txt#2025-04-16_snippet_43\n\nLANGUAGE: C#\nCODE:\n```\npublic sealed class PropertyToken : Serilog.Parsing.MessageTemplateToken\n{\n    public PropertyToken(string propertyName, string rawText, string? format = null, in Serilog.Parsing.Alignment? alignment = null, Serilog.Parsing.Destructuring destructuring = 0) { }\n    public Serilog.Parsing.Alignment? Alignment { get; }\n    public Serilog.Parsing.Destructuring Destructuring { get; }\n    public string? Format { get; }\n    public bool IsPositional { get; }\n    public override int Length { get; }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining SelfLog Static Class in Serilog\nDESCRIPTION: This C# code snippet defines a static class `SelfLog` within a Serilog context. It provides a mechanism for Serilog itself to log internal errors and debugging information. It includes a `FailureListener` property to get the current logging failure listener.\nSOURCE: https://github.com/serilog/serilog/blob/dev/test/Serilog.ApprovalTests/Serilog.approved.txt#2025-04-16_snippet_20\n\nLANGUAGE: csharp\nCODE:\n```\n    public static class SelfLog\n    {\n        public static Serilog.Core.ILoggingFailureListener FailureListener { get; }\n    }\n```\n\n----------------------------------------\n\nTITLE: Defining MessageTemplateFormatMethod Attribute in Serilog\nDESCRIPTION: This C# code snippet defines a `MessageTemplateFormatMethodAttribute` class within a Serilog context.  This attribute is used to mark methods whose string parameters should be treated as message templates for structured logging.  It takes the name of the parameter containing the message template as input. This attribute is used by Serilog to parse and process message templates for efficient logging.\nSOURCE: https://github.com/serilog/serilog/blob/dev/test/Serilog.ApprovalTests/Serilog.approved.txt#2025-04-16_snippet_15\n\nLANGUAGE: csharp\nCODE:\n```\n    [System.AttributeUsage(System.AttributeTargets.Constructor | System.AttributeTargets.Method)]\n    public sealed class MessageTemplateFormatMethodAttribute : System.Attribute\n    {\n        public MessageTemplateFormatMethodAttribute(string messageTemplateParameterName) { }\n        public string MessageTemplateParameterName { get; }\n    }\n```\n\n----------------------------------------\n\nTITLE: Defining LoggingFailedException Class in Serilog\nDESCRIPTION: This C# code snippet defines a `LoggingFailedException` class within a Serilog context. It represents an exception that is thrown when logging fails. It inherits from the `System.Exception` class and includes a constructor that takes a message as input.\nSOURCE: https://github.com/serilog/serilog/blob/dev/test/Serilog.ApprovalTests/Serilog.approved.txt#2025-04-16_snippet_19\n\nLANGUAGE: csharp\nCODE:\n```\n    public class LoggingFailedException : System.Exception\n    {\n        public LoggingFailedException(string message) { }\n    }\n```\n\n----------------------------------------\n\nTITLE: Defining LogEventPropertyValueVisitor Abstract Class in Serilog\nDESCRIPTION: This C# code snippet defines an abstract class `LogEventPropertyValueVisitor` within a Serilog context. It provides a base class for visitors that traverse log event property values.  It supports traversing through DictionaryValue, ScalarValue, SequenceValue and StructureValue.\nSOURCE: https://github.com/serilog/serilog/blob/dev/test/Serilog.ApprovalTests/Serilog.approved.txt#2025-04-16_snippet_18\n\nLANGUAGE: csharp\nCODE:\n```\n    public abstract class LogEventPropertyValueVisitor<TState, TResult>\n    {\n        protected LogEventPropertyValueVisitor() { }\n        protected virtual TResult Visit(TState state, Serilog.Events.LogEventPropertyValue value) { }\n        protected abstract TResult VisitDictionaryValue(TState state, Serilog.Events.DictionaryValue dictionary);\n        protected abstract TResult VisitScalarValue(TState state, Serilog.Events.ScalarValue scalar);\n        protected abstract TResult VisitSequenceValue(TState state, Serilog.Events.SequenceValue sequence);\n        protected abstract TResult VisitStructureValue(TState state, Serilog.Events.StructureValue structure);\n        protected virtual TResult VisitUnsupportedValue(TState state, Serilog.Events.LogEventPropertyValue value) { }\n    }\n```\n\n----------------------------------------\n\nTITLE: Defining LoggingLevelSwitchChangedEventArgs Class in Serilog\nDESCRIPTION: This C# code snippet defines a `LoggingLevelSwitchChangedEventArgs` class within a Serilog context. It represents the event arguments for the `MinimumLevelChanged` event of the `LoggingLevelSwitch` class. It includes properties to get the old and new log event levels after a switch.\nSOURCE: https://github.com/serilog/serilog/blob/dev/test/Serilog.ApprovalTests/Serilog.approved.txt#2025-04-16_snippet_14\n\nLANGUAGE: csharp\nCODE:\n```\n    public class LoggingLevelSwitchChangedEventArgs : System.EventArgs\n    {\n        public LoggingLevelSwitchChangedEventArgs(Serilog.Events.LogEventLevel oldLevel, Serilog.Events.LogEventLevel newLevel) { }\n        public Serilog.Events.LogEventLevel NewLevel { get; }\n        public Serilog.Events.LogEventLevel OldLevel { get; }\n    }\n```\n\n----------------------------------------\n\nTITLE: Defining LogEventPropertyValueRewriter Abstract Class in Serilog\nDESCRIPTION: This C# code snippet defines an abstract class `LogEventPropertyValueRewriter` within a Serilog context. It inherits from `LogEventPropertyValueVisitor` and provides a base class for rewriters that modify log event property values. The rewriter visits different types of property values and provides virtual methods to customize the rewriting process for each type.\nSOURCE: https://github.com/serilog/serilog/blob/dev/test/Serilog.ApprovalTests/Serilog.approved.txt#2025-04-16_snippet_17\n\nLANGUAGE: csharp\nCODE:\n```\n    public abstract class LogEventPropertyValueRewriter<TState> : Serilog.Data.LogEventPropertyValueVisitor<TState, Serilog.Events.LogEventPropertyValue>\n    {\n        protected LogEventPropertyValueRewriter() { }\n        protected override Serilog.Events.LogEventPropertyValue VisitDictionaryValue(TState state, Serilog.Events.DictionaryValue dictionary) { }\n        protected override Serilog.Events.LogEventPropertyValue VisitScalarValue(TState state, Serilog.Events.ScalarValue scalar) { }\n        protected override Serilog.Events.LogEventPropertyValue VisitSequenceValue(TState state, Serilog.Events.SequenceValue sequence) { }\n        protected override Serilog.Events.LogEventPropertyValue VisitStructureValue(TState state, Serilog.Events.StructureValue structure) { }\n        protected override Serilog.Events.LogEventPropertyValue VisitUnsupportedValue(TState state, Serilog.Events.LogEventPropertyValue value) { }\n    }\n```\n\n----------------------------------------\n\nTITLE: Implementing Abstract Message Template Token in C#\nDESCRIPTION: Abstract base class for tokens in a message template. Provides common functionality for all types of tokens (text tokens, property tokens) that can appear in a log message template.\nSOURCE: https://github.com/serilog/serilog/blob/dev/test/Serilog.ApprovalTests/Serilog.approved.txt#2025-04-16_snippet_42\n\nLANGUAGE: C#\nCODE:\n```\npublic abstract class MessageTemplateToken\n{\n    protected MessageTemplateToken() { }\n    public abstract int Length { get; }\n    public abstract void Render(System.Collections.Generic.IReadOnlyDictionary<string, Serilog.Events.LogEventPropertyValue> properties, System.IO.TextWriter output, System.IFormatProvider? formatProvider = null);\n}\n```\n\n----------------------------------------\n\nTITLE: Property Accessors and Methods for MessageTemplateToken Implementation\nDESCRIPTION: Method and property definitions for a token class that implements MessageTemplateToken. This includes property name access, equality comparison, hash code generation, rendering capabilities, and positional value extraction.\nSOURCE: https://github.com/serilog/serilog/blob/dev/test/Serilog.ApprovalTests/Serilog.approved.txt#2025-04-16_snippet_45\n\nLANGUAGE: C#\nCODE:\n```\npublic string PropertyName { get; }\npublic override bool Equals(object? obj) { }\npublic override int GetHashCode() { }\npublic override void Render(System.Collections.Generic.IReadOnlyDictionary<string, Serilog.Events.LogEventPropertyValue> properties, System.IO.TextWriter output, System.IFormatProvider? formatProvider = null) { }\npublic override string ToString() { }\npublic bool TryGetPositionalValue(out int position) { }\n```\n\n----------------------------------------\n\nTITLE: TextToken Class Implementation in Serilog Parsing\nDESCRIPTION: A sealed class inheriting from MessageTemplateToken that represents literal text in Serilog message templates. The class handles storing and rendering raw text content that appears in log templates.\nSOURCE: https://github.com/serilog/serilog/blob/dev/test/Serilog.ApprovalTests/Serilog.approved.txt#2025-04-16_snippet_44\n\nLANGUAGE: C#\nCODE:\n```\npublic sealed class TextToken : Serilog.Parsing.MessageTemplateToken\n{\n    public TextToken(string text) { }\n    public override int Length { get; }\n    public string Text { get; }\n    public override bool Equals(object? obj) { }\n    public override int GetHashCode() { }\n    public override void Render(System.Collections.Generic.IReadOnlyDictionary<string, Serilog.Events.LogEventPropertyValue> properties, System.IO.TextWriter output, System.IFormatProvider? formatProvider = null) { }\n    public override string ToString() { }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Logger Settings Interface in C#\nDESCRIPTION: Interface for logger settings configuration that allows customizing logger behavior.\nSOURCE: https://github.com/serilog/serilog/blob/dev/test/Serilog.ApprovalTests/Serilog.approved.txt#2025-04-16_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\npublic interface ILoggerSettings\n{\n    void Configure(Serilog.LoggerConfiguration loggerConfiguration);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Alignment Structure in C#\nDESCRIPTION: Readonly struct representing alignment specifications for message template property formatting. This allows controlling how property values appear in rendered log messages with left or right alignment and width specification.\nSOURCE: https://github.com/serilog/serilog/blob/dev/test/Serilog.ApprovalTests/Serilog.approved.txt#2025-04-16_snippet_38\n\nLANGUAGE: C#\nCODE:\n```\npublic readonly struct Alignment\n{\n    public Alignment(Serilog.Parsing.AlignmentDirection direction, int width) { }\n    public Serilog.Parsing.AlignmentDirection Direction { get; }\n    public int Width { get; }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Destructuring Enum in C#\nDESCRIPTION: Enumeration defining the different ways a property value can be structured and rendered in log output. Controls whether objects should be serialized with default behavior, stringified, or destructured into their properties.\nSOURCE: https://github.com/serilog/serilog/blob/dev/test/Serilog.ApprovalTests/Serilog.approved.txt#2025-04-16_snippet_40\n\nLANGUAGE: C#\nCODE:\n```\npublic enum Destructuring\n{\n    Default = 0,\n    Stringify = 1,\n    Destructure = 2,\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Constants Class in Serilog.Core\nDESCRIPTION: Defines a constants class within the `Serilog.Core` namespace. This class contains string constants used throughout Serilog, such as the property name for the source context.\nSOURCE: https://github.com/serilog/serilog/blob/dev/test/Serilog.ApprovalTests/Serilog.approved.txt#2025-04-16_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\n    public static class Constants\n    {\n        public const string SourceContextPropertyName = \"SourceContext\";\n    }\n```\n\n----------------------------------------\n\nTITLE: Serilog Benchmark Results in INI Format\nDESCRIPTION: A BenchmarkDotNet performance test result for various Serilog logging operations. It shows metrics like execution time, error margins, standard deviation, scaling factors, and memory allocation for different logging scenarios.\nSOURCE: https://github.com/serilog/serilog/blob/dev/results/netcoreapp2.0/AllocationsBenchmark-report-github.md#2025-04-16_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\nBenchmarkDotNet=v0.10.6, OS=Mac OS X 10.12\nProcessor=Intel Core i7-7567U CPU 3.50GHz (Kaby Lake), ProcessorCount=4\nFrequency=1000000000 Hz, Resolution=1.0000 ns, Timer=UNKNOWN\ndotnet cli version=2.1.4\n  [Host]     : .NET Core 4.6.0.0, 64bit RyuJIT\n  DefaultJob : .NET Core 4.6.0.0, 64bit RyuJIT\n```\n\n----------------------------------------\n\nTITLE: Defining LoggingFailureKind Enum in Serilog\nDESCRIPTION: This C# code snippet defines an enum `LoggingFailureKind` within a Serilog context. It represents the different kinds of logging failures that can occur: `Temporary`, `Permanent`, and `Final`. This enum can be used to categorize and handle logging failures appropriately.\nSOURCE: https://github.com/serilog/serilog/blob/dev/test/Serilog.ApprovalTests/Serilog.approved.txt#2025-04-16_snippet_12\n\nLANGUAGE: csharp\nCODE:\n```\n    public enum LoggingFailureKind\n    {\n        Temporary = 0,\n        Permanent = 1,\n        Final = 2,\n    }\n```\n\n----------------------------------------\n\nTITLE: BenchmarkDotNet Configuration and Results for Serilog EmitLogEvent\nDESCRIPTION: Results from BenchmarkDotNet showing performance metrics for Serilog's EmitLogEvent method. The benchmark was run on a Mac with an Intel Core i7 processor using .NET Core 4.6.0.0. The method takes approximately 838ns to execute and allocates 432 bytes of memory.\nSOURCE: https://github.com/serilog/serilog/blob/dev/results/netcoreapp2.0/PipelineBenchmark-report-github.md#2025-04-16_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\nBenchmarkDotNet=v0.10.6, OS=Mac OS X 10.12\nProcessor=Intel Core i7-7567U CPU 3.50GHz (Kaby Lake), ProcessorCount=4\nFrequency=1000000000 Hz, Resolution=1.0000 ns, Timer=UNKNOWN\ndotnet cli version=2.1.4\n  [Host]     : .NET Core 4.6.0.0, 64bit RyuJIT\n  DefaultJob : .NET Core 4.6.0.0, 64bit RyuJIT\n```\n\n----------------------------------------\n\nTITLE: Benchmarking Configuration and Results for Serilog Logging Levels\nDESCRIPTION: Performance benchmark results comparing different logging level configurations in Serilog. Shows execution times for Off, LevelSwitchOff, MinimumLevelOn, and LevelSwitchOn scenarios running on .NET Core 4.6.0.0 with BenchmarkDotNet v0.10.6.\nSOURCE: https://github.com/serilog/serilog/blob/dev/results/netcoreapp2.0/LevelControlBenchmark-report-github.md#2025-04-16_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\nBenchmarkDotNet=v0.10.6, OS=Mac OS X 10.12\nProcessor=Intel Core i7-7567U CPU 3.50GHz (Kaby Lake), ProcessorCount=4\nFrequency=1000000000 Hz, Resolution=1.0000 ns, Timer=UNKNOWN\ndotnet cli version=2.1.4\n  [Host]     : .NET Core 4.6.0.0, 64bit RyuJIT\n  DefaultJob : .NET Core 4.6.0.0, 64bit RyuJIT\n\n```\n\n----------------------------------------\n\nTITLE: Benchmark Configuration and Results for Serilog Templates\nDESCRIPTION: Benchmark results showing performance metrics for Serilog template processing. Compares empty template (371ns, 264B allocated) vs default console output template (2,912ns, 2296B allocated) running on .NET Core 4.6.0 with BenchmarkDotNet v0.10.6.\nSOURCE: https://github.com/serilog/serilog/blob/dev/results/netcoreapp2.0/MessageTemplateParsingBenchmark-report-github.md#2025-04-16_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\nBenchmarkDotNet=v0.10.6, OS=Mac OS X 10.12\nProcessor=Intel Core i7-7567U CPU 3.50GHz (Kaby Lake), ProcessorCount=4\nFrequency=1000000000 Hz, Resolution=1.0000 ns, Timer=UNKNOWN\ndotnet cli version=2.1.4\n  [Host]     : .NET Core 4.6.0.0, 64bit RyuJIT\n  DefaultJob : .NET Core 4.6.0.0, 64bit RyuJIT\n```\n\n----------------------------------------\n\nTITLE: Benchmark Results Table\nDESCRIPTION: This section presents a table of benchmark results comparing the performance of Dictionary, Hashtable, and Concurrent data structures. The table includes columns for method name, number of items, maximum degree of parallelism, mean execution time, error, standard deviation, median, scaled mean, and scaled standard deviation.\nSOURCE: https://github.com/serilog/serilog/blob/dev/results/netcoreapp2.0/MessageTemplateCacheBenchmark_Cached-report-github.md#2025-04-16_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n\" |     Method | Items | MaxDegreeOfParallelism |        Mean |      Error |      StdDev |      Median | Scaled | ScaledSD |\n |----------- |------ |----------------------- |------------:|-----------:|------------:|------------:|-------:|---------:|\n | **Dictionary** |    **10** |                     **-1** |   **484.65 us** | **29.5203 us** |  **86.1121 us** |   **475.13 us** |   **1.00** |     **0.00** |\n |  Hashtable |    10 |                     -1 |    74.78 us |  1.5697 us |   2.8304 us |    73.99 us |   0.16 |     0.03 |\n | Concurrent |    10 |                     -1 |    69.52 us |  0.6831 us |   0.5704 us |    69.62 us |   0.15 |     0.03 |\n | **Dictionary** |    **10** |                      **1** |   **116.22 us** |  **2.2490 us** |   **2.4998 us** |   **115.86 us** |   **1.00** |     **0.00** |\n |  Hashtable |    10 |                      1 |   140.77 us |  2.8065 us |   4.1137 us |   140.40 us |   1.21 |     0.04 |\n | Concurrent |    10 |                      1 |   132.99 us |  2.2509 us |   1.9954 us |   132.61 us |   1.14 |     0.03 |\n | **Dictionary** |    **20** |                     **-1** |   **593.71 us** | **30.5094 us** |  **89.9578 us** |   **602.83 us** |   **1.00** |     **0.00** |\n |  Hashtable |    20 |                     -1 |   136.36 us |  3.6865 us |  10.5773 us |   133.11 us |   0.24 |     0.04 |\n | Concurrent |    20 |                     -1 |   127.68 us |  2.7541 us |   5.1729 us |   125.60 us |   0.22 |     0.03 |\n | **Dictionary** |    **20** |                      **1** |   **247.53 us** |  **4.9128 us** |   **8.8589 us** |   **247.69 us** |   **1.00** |     **0.00** |\n |  Hashtable |    20 |                      1 |   269.34 us |  5.0332 us |   4.7081 us |   270.26 us |   1.09 |     0.04 |\n | Concurrent |    20 |                      1 |   265.41 us |  5.0592 us |   4.2247 us |   264.26 us |   1.07 |     0.04 |\n | **Dictionary** |    **50** |                     **-1** | **1,344.03 us** | **75.5937 us** | **219.3111 us** | **1,299.64 us** |   **1.00** |     **0.00** |\n |  Hashtable |    50 |                     -1 |   319.29 us |  6.2183 us |  10.7263 us |   316.55 us |   0.24 |     0.04 |\n | Concurrent |    50 |                     -1 |   311.74 us |  6.3992 us |  16.7456 us |   305.20 us |   0.24 |     0.04 |\n | **Dictionary** |    **50** |                      **1** |   **580.35 us** | **10.5809 us** |   **9.3797 us** |   **580.59 us** |   **1.00** |     **0.00** |\n |  Hashtable |    50 |                      1 |   685.28 us | 16.2339 us |  23.2821 us |   682.71 us |   1.18 |     0.04 |\n | Concurrent |    50 |                      1 |   663.75 us | 14.2723 us |  16.9902 us |   664.83 us |   1.14 |     0.03 |\n | **Dictionary** |   **100** |                     **-1** | **2,766.91 us** | **70.1788 us** | **206.9237 us** | **2,776.40 us** |   **1.00** |     **0.00** |\n |  Hashtable |   100 |                     -1 |   634.39 us | 11.9496 us |  17.8855 us |   632.35 us |   0.23 |     0.02 |\n | Concurrent |   100 |                     -1 |   607.86 us | 12.1245 us |  14.8900 us |   605.14 us |   0.22 |     0.02 |\n | **Dictionary** |   **100** |                      **1** | **1,145.86 us** | **21.7679 us** |  **19.2966 us** | **1,151.96 us** |   **1.00** |     **0.00** |\n |  Hashtable |   100 |                      1 | 1,384.02 us | 26.6146 us |  27.3312 us | 1,386.84 us |   1.21 |     0.03 |\n | Concurrent |   100 |                      1 | 1,374.88 us | 30.0217 us |  59.2599 us | 1,363.38 us |   1.20 |     0.05 |\n | **Dictionary** |  **1000** |                     **-1** | **2,722.48 us** | **70.6602 us** | **206.1192 us** | **2,724.74 us** |   **1.00** |     **0.00** |\n |  Hashtable |  1000 |                     -1 |   634.43 us | 12.5225 us |  19.4960 us |   642.28 us |   0.23 |     0.02 |\n | Concurrent |  1000 |                     -1 |   611.38 us | 11.9573 us |  22.1637 us |   609.39 us |   0.23 |     0.02 |\n | **Dictionary** |  **1000** |                      **1** | **1,202.34 us** | **27.6262 us** |  **32.8871 us** | **1,196.17 us** |   **1.00** |     **0.00** |\n |  Hashtable |  1000 |                      1 | 1,408.56 us | 24.4617 us |  22.8815 us | 1,410.87 us |   1.17 |     0.04 |\n | Concurrent |  1000 |                      1 | 1,342.42 us | 19.1854 us |  17.9460 us | 1,338.93 us |   1.12 |     0.03 |\"\n```\n\n----------------------------------------\n\nTITLE: Displaying Serilog Benchmark Configuration and Results in INI Format\nDESCRIPTION: This code snippet shows the configuration details for a Serilog benchmark run using BenchmarkDotNet, including system specifications and runtime environment. It also presents the benchmark results comparing the performance of ForContextString and ForContextType methods.\nSOURCE: https://github.com/serilog/serilog/blob/dev/results/netcoreapp2.0/NestedLoggerCreationBenchmark-report-github.md#2025-04-16_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\nBenchmarkDotNet=v0.10.6, OS=Mac OS X 10.12\nProcessor=Intel Core i7-7567U CPU 3.50GHz (Kaby Lake), ProcessorCount=4\nFrequency=1000000000 Hz, Resolution=1.0000 ns, Timer=UNKNOWN\ndotnet cli version=2.1.4\n  [Host]     : .NET Core 4.6.0.0, 64bit RyuJIT\n  DefaultJob : .NET Core 4.6.0.0, 64bit RyuJIT\n\n\n |           Method |     Mean |    Error |   StdDev |\n |----------------- |---------:|---------:|---------:|\n | ForContextString | 104.5 ns | 2.126 ns | 4.884 ns |\n |   ForContextType | 173.8 ns | 3.425 ns | 5.021 ns |\n```\n\n----------------------------------------\n\nTITLE: Benchmark Configuration for Serilog Logger Performance Tests in INI\nDESCRIPTION: BenchmarkDotNet configuration details showing the test environment including OS, processor, timer resolution, and .NET runtime information for Serilog logger performance tests.\nSOURCE: https://github.com/serilog/serilog/blob/dev/results/netcoreapp2.0/NestedLoggerLatencyBenchmark-report-github.md#2025-04-16_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\nBenchmarkDotNet=v0.10.6, OS=Mac OS X 10.12\nProcessor=Intel Core i7-7567U CPU 3.50GHz (Kaby Lake), ProcessorCount=4\nFrequency=1000000000 Hz, Resolution=1.0000 ns, Timer=UNKNOWN\ndotnet cli version=2.1.4\n  [Host]     : .NET Core 4.6.0.0, 64bit RyuJIT\n  DefaultJob : .NET Core 4.6.0.0, 64bit RyuJIT\n```\n\n----------------------------------------\n\nTITLE: Defining AlignmentDirection Enum in C#\nDESCRIPTION: Enumeration defining the possible alignment directions (Left or Right) for property formatting in log message templates. Used in conjunction with the Alignment struct to format log output.\nSOURCE: https://github.com/serilog/serilog/blob/dev/test/Serilog.ApprovalTests/Serilog.approved.txt#2025-04-16_snippet_39\n\nLANGUAGE: C#\nCODE:\n```\npublic enum AlignmentDirection\n{\n    Left = 0,\n    Right = 1,\n}\n```\n\n----------------------------------------\n\nTITLE: Benchmark Environment Configuration and Results\nDESCRIPTION: Detailed benchmark results showing performance metrics for different logging level control scenarios. Results include median execution time, standard deviation, and scaled comparisons across Off, LevelSwitchOff, MinimumLevelOn, and LevelSwitchOn configurations.\nSOURCE: https://github.com/serilog/serilog/blob/dev/results/netcoreapp1.0/LevelControlBenchmark-report-github.md#2025-04-16_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\nHost Process Environment Information:\nBenchmarkDotNet.Core=v0.9.9.0\nOS=Windows\nProcessor=?, ProcessorCount=8\nFrequency=2533306 ticks, Resolution=394.7411 ns, Timer=TSC\nCLR=CORE, Arch=64-bit ? [RyuJIT]\nGC=Concurrent Workstation\ndotnet cli version: 1.0.0-preview2-003121\n\nType=LevelControlBenchmark  Mode=Throughput  \n```\n\n----------------------------------------\n\nTITLE: Benchmark Environment Configuration Details\nDESCRIPTION: Provides system and runtime configuration information for performance benchmarking of Serilog logger creation\nSOURCE: https://github.com/serilog/serilog/blob/dev/results/netcoreapp1.0/NestedLoggerCreationBenchmark-report-github.md#2025-04-16_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\nHost Process Environment Information:\nBenchmarkDotNet.Core=v0.9.9.0\nOS=Windows\nProcessor=?, ProcessorCount=8\nFrequency=2533306 ticks, Resolution=394.7411 ns, Timer=TSC\nCLR=CORE, Arch=64-bit ? [RyuJIT]\nGC=Concurrent Workstation\ndotnet cli version: 1.0.0-preview2-003121\n\nType=NestedLoggerCreationBenchmark  Mode=Throughput\n```\n\n----------------------------------------\n\nTITLE: BenchmarkDotNet Environment Configuration and Results\nDESCRIPTION: Benchmark environment details and performance comparison between root and nested logger implementations. The test was run on Windows with 8 processors using .NET Core runtime.\nSOURCE: https://github.com/serilog/serilog/blob/dev/results/netcoreapp1.0/NestedLoggerLatencyBenchmark-report-github.md#2025-04-16_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\nHost Process Environment Information:\nBenchmarkDotNet.Core=v0.9.9.0\nOS=Windows\nProcessor=?, ProcessorCount=8\nFrequency=2533306 ticks, Resolution=394.7411 ns, Timer=TSC\nCLR=CORE, Arch=64-bit ? [RyuJIT]\nGC=Concurrent Workstation\ndotnet cli version: 1.0.0-preview2-003121\n\nType=NestedLoggerLatencyBenchmark  Mode=Throughput\n```\n\n----------------------------------------\n\nTITLE: Displaying Serilog Benchmark Environment and Results in INI Format\nDESCRIPTION: This code snippet shows the benchmark environment details and results for Serilog's EmitLogEvent method. It includes information about the host process, operating system, processor, and performance metrics.\nSOURCE: https://github.com/serilog/serilog/blob/dev/results/netcoreapp1.0/PipelineBenchmark-report-github.md#2025-04-16_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\nHost Process Environment Information:\nBenchmarkDotNet.Core=v0.9.9.0\nOS=Windows\nProcessor=?, ProcessorCount=8\nFrequency=2533306 ticks, Resolution=394.7411 ns, Timer=TSC\nCLR=CORE, Arch=64-bit ? [RyuJIT]\nGC=Concurrent Workstation\ndotnet cli version: 1.0.0-preview2-003121\n\nType=PipelineBenchmark  Mode=Throughput  \n\n       Method |      Median |    StdDev |\n------------- |------------ |---------- |\n EmitLogEvent | 712.9876 ns | 7.2272 ns |\n```\n\n----------------------------------------\n\nTITLE: BenchmarkDotNet Serilog Logging Performance Metrics in INI Format\nDESCRIPTION: Detailed benchmark results showing performance metrics for various Serilog logging methods. The benchmarks were run on Windows 10 with .NET Core 4.6.25211.01 using BenchmarkDotNet v0.10.6. The metrics include execution time, error rates, memory allocation, and scaling factors for different logging patterns.\nSOURCE: https://github.com/serilog/serilog/blob/dev/results/netcoreapp1.1/AllocationsBenchmark-report-github.md#2025-04-16_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\nBenchmarkDotNet=v0.10.6, OS=Windows 10 Redstone 1 (10.0.14393)\nProcessor=Intel Core i7-4790 CPU 3.60GHz (Haswell), ProcessorCount=8\nFrequency=3507500 Hz, Resolution=285.1033 ns, Timer=TSC\ndotnet cli version=2.0.0-preview1-005977\n  [Host]     : .NET Core 4.6.25211.01, 64bit RyuJIT\n  DefaultJob : .NET Core 4.6.25211.01, 64bit RyuJIT\n\n```\n\n----------------------------------------\n\nTITLE: Benchmarking Serilog Logging Level Controls with BenchmarkDotNet in INI Format\nDESCRIPTION: This benchmark measures the throughput performance of different Serilog logging level control mechanisms. It compares direct level 'Off', level switch in 'Off' state, minimum level 'On', and level switch 'On', showing median execution times, standard deviation, and scaled performance ratios.\nSOURCE: https://github.com/serilog/serilog/blob/dev/results/net4.5.2/LevelControlBenchmark-report-github.md#2025-04-16_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\nHost Process Environment Information:\nBenchmarkDotNet.Core=v0.9.9.0\nOS=Microsoft Windows NT 6.2.9200.0\nProcessor=Intel(R) Core(TM) i7-3720QM CPU 2.60GHz, ProcessorCount=8\nFrequency=2533306 ticks, Resolution=394.7411 ns, Timer=TSC\nCLR=MS.NET 4.0.30319.42000, Arch=64-bit RELEASE [RyuJIT]\nGC=Concurrent Workstation\nJitModules=clrjit-v4.6.1080.0\n\nType=LevelControlBenchmark  Mode=Throughput\n```\n\n----------------------------------------\n\nTITLE: Benchmarking Host Process Environment Information\nDESCRIPTION: Detailed system configuration and benchmark environment setup for performance testing Serilog logging context enrichment methods\nSOURCE: https://github.com/serilog/serilog/blob/dev/results/net4.5.2/LogContextEnrichmentBenchmark-report-github.md#2025-04-16_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\nHost Process Environment Information:\nBenchmarkDotNet.Core=v0.9.9.0\nOS=Microsoft Windows NT 6.2.9200.0\nProcessor=Intel(R) Core(TM) i7-3720QM CPU 2.60GHz, ProcessorCount=8\nFrequency=2533306 ticks, Resolution=394.7411 ns, Timer=TSC\nCLR=MS.NET 4.0.30319.42000, Arch=64-bit RELEASE [RyuJIT]\nGC=Concurrent Workstation\nJitModules=clrjit-v4.6.1080.0\n```\n\n----------------------------------------\n\nTITLE: Logging Performance Benchmark Configuration and Results\nDESCRIPTION: BenchmarkDotNet test results showing performance metrics for nested logger creation. Test environment details include Windows OS, Intel i7 processor, and .NET Framework 4.0 specifications. Compares ForContextString (91ns) vs ForContextType (160ns) methods.\nSOURCE: https://github.com/serilog/serilog/blob/dev/results/net4.5.2/NestedLoggerCreationBenchmark-report-github.md#2025-04-16_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\nHost Process Environment Information:\nBenchmarkDotNet.Core=v0.9.9.0\nOS=Microsoft Windows NT 6.2.9200.0\nProcessor=Intel(R) Core(TM) i7-3720QM CPU 2.60GHz, ProcessorCount=8\nFrequency=2533306 ticks, Resolution=394.7411 ns, Timer=TSC\nCLR=MS.NET 4.0.30319.42000, Arch=64-bit RELEASE [RyuJIT]\nGC=Concurrent Workstation\nJitModules=clrjit-v4.6.1080.0\n\nType=NestedLoggerCreationBenchmark  Mode=Throughput  \n```\n\n----------------------------------------\n\nTITLE: Linux Benchmark Configuration for Serilog\nDESCRIPTION: Configuration details for Serilog benchmarks run on Debian 11 with .NET Core 2.1 and 3.1. Includes system specifications and runtime information.\nSOURCE: https://github.com/serilog/serilog/blob/dev/results/netcoreapp3.1/SourceContextMatchBenchmark-report-github.md#2025-04-16_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\nBenchmarkDotNet=v0.12.0, OS=debian 11\nIntel Core i7-3840QM CPU 2.80GHz (Ivy Bridge), 1 CPU, 4 logical and 2 physical cores\n.NET Core SDK=3.1.201\n  [Host]     : .NET Core 3.1.3 (CoreCLR 4.700.20.11803, CoreFX 4.700.20.12001), X64 RyuJIT\n  Job-CSERBI : .NET Core 2.1.16 (CoreCLR 4.6.28516.03, CoreFX 4.6.28516.10), X64 RyuJIT\n  Job-GDNCBZ : .NET Core 3.1.3 (CoreCLR 4.700.20.11803, CoreFX 4.700.20.12001), X64 RyuJIT\n```\n\n----------------------------------------\n\nTITLE: Displaying BenchmarkDotNet Results for Serilog Templates\nDESCRIPTION: Benchmark results showing performance metrics for two template scenarios: one with no properties and another with varied properties. Includes system configuration details, timing measurements, and memory allocation statistics.\nSOURCE: https://github.com/serilog/serilog/blob/dev/results/netcoreapp2.0/MessageTemplateRenderingBenchmark-report-github.md#2025-04-16_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\nBenchmarkDotNet=v0.10.6, OS=Mac OS X 10.12\nProcessor=Intel Core i7-7567U CPU 3.50GHz (Kaby Lake), ProcessorCount=4\nFrequency=1000000000 Hz, Resolution=1.0000 ns, Timer=UNKNOWN\ndotnet cli version=2.1.4\n  [Host]     : .NET Core 4.6.0.0, 64bit RyuJIT\n  DefaultJob : .NET Core 4.6.0.0, 64bit RyuJIT\n```\n\n----------------------------------------\n\nTITLE: Benchmarking Configuration and Results for Serilog Operations\nDESCRIPTION: Benchmark configuration details and timing results for various Serilog logging methods. Shows mean execution time, error margins, standard deviation and scaled comparisons for different logging operations running on a Mac with Intel Core i7 processor.\nSOURCE: https://github.com/serilog/serilog/blob/dev/results/netcoreapp2.0/LogContextEnrichmentBenchmark-report-github.md#2025-04-16_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\nBenchmarkDotNet=v0.10.6, OS=Mac OS X 10.12\nProcessor=Intel Core i7-7567U CPU 3.50GHz (Kaby Lake), ProcessorCount=4\nFrequency=1000000000 Hz, Resolution=1.0000 ns, Timer=UNKNOWN\ndotnet cli version=2.1.4\n  [Host]     : .NET Core 4.6.0.0, 64bit RyuJIT\n  DefaultJob : .NET Core 4.6.0.0, 64bit RyuJIT\n```\n\n----------------------------------------\n\nTITLE: BenchmarkDotNet Configuration and Results for Collection Performance Comparison\nDESCRIPTION: This snippet shows the BenchmarkDotNet configuration details and performance comparison results for Dictionary, Hashtable, and Concurrent collections. It includes metrics such as mean execution time, error, standard deviation, and scaled performance across different scenarios.\nSOURCE: https://github.com/serilog/serilog/blob/dev/results/netcoreapp2.0/MessageTemplateCacheBenchmark_Leaking-report-github.md#2025-04-16_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\nBenchmarkDotNet=v0.10.6, OS=Mac OS X 10.12\nProcessor=Intel Core i7-7567U CPU 3.50GHz (Kaby Lake), ProcessorCount=4\nFrequency=1000000000 Hz, Resolution=1.0000 ns, Timer=UNKNOWN\ndotnet cli version=2.1.4\n  [Host]     : .NET Core 4.6.0.0, 64bit RyuJIT\n  DefaultJob : .NET Core 4.6.0.0, 64bit RyuJIT\n\n\n |     Method | Items | OverflowCount | MaxDegreeOfParallelism |       Mean |      Error |     StdDev |     Median | Scaled | ScaledSD |\n |----------- |------ |-------------- |----------------------- |-----------:|-----------:|-----------:|-----------:|-------:|---------:|\n | **Dictionary** | **10000** |             **1** |                     **-1** |   **3.809 ms** |  **0.1689 ms** |  **0.4900 ms** |   **3.695 ms** |   **1.00** |     **0.00** |\n |  Hashtable | 10000 |             1 |                     -1 |   3.401 ms |  0.0587 ms |  0.0763 ms |   3.386 ms |   0.91 |     0.11 |\n | Concurrent | 10000 |             1 |                     -1 | 141.271 ms | 14.7981 ms | 43.6325 ms | 141.945 ms |  37.67 |    12.51 |\n | **Dictionary** | **10000** |             **1** |                      **1** |   **1.995 ms** |  **0.0396 ms** |  **0.0617 ms** |   **1.982 ms** |   **1.00** |     **0.00** |\n |  Hashtable | 10000 |             1 |                      1 |   2.581 ms |  0.0429 ms |  0.0401 ms |   2.575 ms |   1.30 |     0.04 |\n | Concurrent | 10000 |             1 |                      1 | 193.445 ms |  2.1087 ms |  1.9725 ms | 193.561 ms |  97.07 |     3.08 |\n | **Dictionary** | **10000** |            **10** |                     **-1** |   **3.300 ms** |  **0.0726 ms** |  **0.2119 ms** |   **3.281 ms** |   **1.00** |     **0.00** |\n |  Hashtable | 10000 |            10 |                     -1 |   3.252 ms |  0.0646 ms |  0.1498 ms |   3.232 ms |   0.99 |     0.08 |\n | Concurrent | 10000 |            10 |                     -1 |  81.583 ms |  3.0187 ms |  8.9007 ms |  79.069 ms |  24.82 |     3.12 |\n | **Dictionary** | **10000** |            **10** |                      **1** |   **1.979 ms** |  **0.0390 ms** |  **0.0449 ms** |   **1.970 ms** |   **1.00** |     **0.00** |\n |  Hashtable | 10000 |            10 |                      1 |   2.576 ms |  0.0398 ms |  0.0352 ms |   2.563 ms |   1.30 |     0.03 |\n | Concurrent | 10000 |            10 |                      1 | 200.065 ms |  4.9247 ms |  5.8626 ms | 200.199 ms | 101.16 |     3.64 |\n | **Dictionary** | **10000** |           **100** |                     **-1** |   **4.076 ms** |  **0.0813 ms** |  **0.2292 ms** |   **4.066 ms** |   **1.00** |     **0.00** |\n |  Hashtable | 10000 |           100 |                     -1 |   3.660 ms |  0.0719 ms |  0.1008 ms |   3.653 ms |   0.90 |     0.06 |\n | Concurrent | 10000 |           100 |                     -1 | 167.547 ms | 20.0876 ms | 58.2777 ms | 175.712 ms |  41.23 |    14.48 |\n | **Dictionary** | **10000** |           **100** |                      **1** |   **2.061 ms** |  **0.0354 ms** |  **0.0331 ms** |   **2.054 ms** |   **1.00** |     **0.00** |\n |  Hashtable | 10000 |           100 |                      1 |   2.685 ms |  0.0331 ms |  0.0310 ms |   2.685 ms |   1.30 |     0.02 |\n | Concurrent | 10000 |           100 |                      1 | 198.448 ms |  2.5433 ms |  2.3790 ms | 198.288 ms |  96.31 |     1.86 |\n | **Dictionary** | **10000** |          **1000** |                     **-1** |   **3.923 ms** |  **0.1650 ms** |  **0.4788 ms** |   **3.865 ms** |   **1.00** |     **0.00** |\n |  Hashtable | 10000 |          1000 |                     -1 |   3.870 ms |  0.0766 ms |  0.1907 ms |   3.862 ms |   1.00 |     0.13 |\n | Concurrent | 10000 |          1000 |                     -1 | 207.440 ms | 23.7700 ms | 70.0864 ms | 182.505 ms |  53.66 |    19.30 |\n | **Dictionary** | **10000** |          **1000** |                      **1** |   **2.150 ms** |  **0.0278 ms** |  **0.0246 ms** |   **2.154 ms** |   **1.00** |     **0.00** |\n |  Hashtable | 10000 |          1000 |                      1 |   2.806 ms |  0.0398 ms |  0.0373 ms |   2.795 ms |   1.31 |     0.02 |\n | Concurrent | 10000 |          1000 |                      1 | 201.843 ms |  3.2293 ms |  2.8627 ms | 201.881 ms |  93.91 |     1.66 |\n```\n\n----------------------------------------\n\nTITLE: Serilog Logging Context Enrichment Performance Metrics\nDESCRIPTION: Performance benchmark table comparing different logging context enrichment methods, showing median execution time, standard deviation, and scaled performance\nSOURCE: https://github.com/serilog/serilog/blob/dev/results/net4.5.2/LogContextEnrichmentBenchmark-report-github.md#2025-04-16_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\nType=LogContextEnrichmentBenchmark  Mode=Throughput  \n\n               Method |      Median |     StdDev | Scaled | Scaled-SD |\n--------------------- |------------ |----------- |------- |---------- |\n                 Bare |  14.5935 ns |  0.2010 ns |   1.00 |      0.00 |\n         PushProperty | 384.9070 ns |  2.4957 ns |  26.61 |      0.41 |\n   PushPropertyNested | 778.8093 ns | 51.8017 ns |  55.46 |      3.59 |\n PushPropertyEnriched | 598.1650 ns | 12.3394 ns |  41.52 |      1.01 |\n```\n\n----------------------------------------\n\nTITLE: Performance Benchmark: Collection Type Comparison\nDESCRIPTION: Measures throughput performance of Dictionary, Hashtable, and Concurrent collections under different configuration parameters like overflow count and max degree of parallelism\nSOURCE: https://github.com/serilog/serilog/blob/dev/results/net4.5.2/MessageTemplateCache/MessageTemplateCacheBenchmark_Leaking-report-github.md#2025-04-16_snippet_0\n\nLANGUAGE: benchmark\nCODE:\n```\nHost Process Environment Information:\nBenchmarkDotNet.Core=v0.9.9.0\nOS=Microsoft Windows NT 6.2.9200.0\nProcessor=Intel(R) Core(TM) i7-4790 CPU 3.60GHz, ProcessorCount=8\nFrequency=3507509 ticks, Resolution=285.1026 ns, Timer=TSC\nCLR=MS.NET 4.0.30319.42000, Arch=64-bit RELEASE [RyuJIT]\nGC=Concurrent Workstation\nJitModules=clrjit-v4.6.1586.0\n```\n\n----------------------------------------\n\nTITLE: Displaying Serilog Benchmark Environment and Results in INI Format\nDESCRIPTION: This code snippet shows the environment information and benchmark results for Serilog's message template parsing. It compares the performance of empty templates and default console output templates in terms of median execution time and standard deviation.\nSOURCE: https://github.com/serilog/serilog/blob/dev/results/netcoreapp1.0/MessageTemplateParsingBenchmark-report-github.md#2025-04-16_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\nHost Process Environment Information:\nBenchmarkDotNet.Core=v0.9.9.0\nOS=Windows\nProcessor=?, ProcessorCount=8\nFrequency=2533306 ticks, Resolution=394.7411 ns, Timer=TSC\nCLR=CORE, Arch=64-bit ? [RyuJIT]\nGC=Concurrent Workstation\ndotnet cli version: 1.0.0-preview2-003121\n\nType=MessageTemplateParsingBenchmark  Mode=Throughput  \n\n                       Method |        Median |     StdDev | Scaled | Scaled-SD |\n----------------------------- |-------------- |----------- |------- |---------- |\n                EmptyTemplate |   188.2760 ns |  2.4773 ns |   1.00 |      0.00 |\n DefaultConsoleOutputTemplate | 2,753.6243 ns | 22.7107 ns |  14.54 |      0.22 |\n```\n\n----------------------------------------\n\nTITLE: Displaying Serilog Message Template Parsing Benchmark Results in INI Format\nDESCRIPTION: A benchmark report showing the performance of Serilog's message template parsing functionality. The benchmark compares parsing an empty template versus the default console output template, displaying median execution time, standard deviation, and scaled performance metrics.\nSOURCE: https://github.com/serilog/serilog/blob/dev/results/net4.5.2/MessageTemplateParsingBenchmark-report-github.md#2025-04-16_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\nHost Process Environment Information:\nBenchmarkDotNet.Core=v0.9.9.0\nOS=Microsoft Windows NT 6.2.9200.0\nProcessor=Intel(R) Core(TM) i7-3720QM CPU 2.60GHz, ProcessorCount=8\nFrequency=2533306 ticks, Resolution=394.7411 ns, Timer=TSC\nCLR=MS.NET 4.0.30319.42000, Arch=64-bit RELEASE [RyuJIT]\nGC=Concurrent Workstation\nJitModules=clrjit-v4.6.1080.0\n\nType=MessageTemplateParsingBenchmark  Mode=Throughput  \n```\n\n----------------------------------------\n\nTITLE: Displaying Serilog Benchmark Environment and Results in INI Format\nDESCRIPTION: This code snippet shows the environment information and benchmark results for Serilog's LogContext enrichment methods. It includes details about the host process, benchmarking tool, and performance metrics for various methods.\nSOURCE: https://github.com/serilog/serilog/blob/dev/results/netcoreapp1.0/LogContextEnrichmentBenchmark-report-github.md#2025-04-16_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\nHost Process Environment Information:\nBenchmarkDotNet.Core=v0.9.9.0\nOS=Windows\nProcessor=?, ProcessorCount=8\nFrequency=2533306 ticks, Resolution=394.7411 ns, Timer=TSC\nCLR=CORE, Arch=64-bit ? [RyuJIT]\nGC=Concurrent Workstation\ndotnet cli version: 1.0.0-preview2-003121\n\nType=LogContextEnrichmentBenchmark  Mode=Throughput  \n\n               Method |      Median |     StdDev | Scaled | Scaled-SD |\n--------------------- |------------ |----------- |------- |---------- |\n                 Bare |  14.3441 ns |  0.2826 ns |   1.00 |      0.00 |\n         PushProperty | 450.5621 ns |  3.2270 ns |  31.42 |      0.65 |\n   PushPropertyNested | 920.1179 ns | 45.1624 ns |  63.81 |      3.30 |\n PushPropertyEnriched | 730.4018 ns |  4.5812 ns |  50.92 |      1.03 |\n```\n\n----------------------------------------\n\nTITLE: Displaying Benchmark Results for Serilog in INI format\nDESCRIPTION: This snippet shows the benchmark results for the Serilog project, including system specifications, benchmark settings, and performance metrics for the FormatToOutput method. It uses BenchmarkDotNet v0.10.6 on macOS 10.12 with a Kaby Lake processor.\nSOURCE: https://github.com/serilog/serilog/blob/dev/results/netcoreapp2.0/OutputTemplateRenderingBenchmark-report-github.md#2025-04-16_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\nBenchmarkDotNet=v0.10.6, OS=Mac OS X 10.12\nProcessor=Intel Core i7-7567U CPU 3.50GHz (Kaby Lake), ProcessorCount=4\nFrequency=1000000000 Hz, Resolution=1.0000 ns, Timer=UNKNOWN\ndotnet cli version=2.1.4\n  [Host]     : .NET Core 4.6.0.0, 64bit RyuJIT\n  DefaultJob : .NET Core 4.6.0.0, 64bit RyuJIT\n\n\n |         Method |     Mean |     Error |    StdDev |  Gen 0 | Allocated |\n |--------------- |---------:|----------:|----------:|-------:|----------:|\n | FormatToOutput | 1.386 us | 0.0237 us | 0.0222 us | 0.2327 |     488 B |\n```\n\n----------------------------------------\n\nTITLE: Displaying Serilog Benchmark Environment and Results in INI Format\nDESCRIPTION: This code snippet shows the benchmark environment details and results for Serilog's EmitLogEvent method. It includes information about the host process, operating system, processor, and CLR version. The benchmark results display the median execution time and standard deviation for the EmitLogEvent method.\nSOURCE: https://github.com/serilog/serilog/blob/dev/results/net4.5.2/PipelineBenchmark-report-github.md#2025-04-16_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\nHost Process Environment Information:\nBenchmarkDotNet.Core=v0.9.9.0\nOS=Microsoft Windows NT 6.2.9200.0\nProcessor=Intel(R) Core(TM) i7-3720QM CPU 2.60GHz, ProcessorCount=8\nFrequency=2533306 ticks, Resolution=394.7411 ns, Timer=TSC\nCLR=MS.NET 4.0.30319.42000, Arch=64-bit RELEASE [RyuJIT]\nGC=Concurrent Workstation\nJitModules=clrjit-v4.6.1080.0\n\nType=PipelineBenchmark  Mode=Throughput  \n\n       Method |      Median |    StdDev |\n------------- |------------ |---------- |\n EmitLogEvent | 419.2931 ns | 4.3815 ns |\n```\n\n----------------------------------------\n\nTITLE: Benchmarking Environment Configuration and Results\nDESCRIPTION: Configuration details of the benchmark environment including OS, processor, CLR version, and performance comparison results between RootLogger and NestedLogger implementations\nSOURCE: https://github.com/serilog/serilog/blob/dev/results/net4.5.2/NestedLoggerLatencyBenchmark-report-github.md#2025-04-16_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\nHost Process Environment Information:\nBenchmarkDotNet.Core=v0.9.9.0\nOS=Microsoft Windows NT 6.2.9200.0\nProcessor=Intel(R) Core(TM) i7-3720QM CPU 2.60GHz, ProcessorCount=8\nFrequency=2533306 ticks, Resolution=394.7411 ns, Timer=TSC\nCLR=MS.NET 4.0.30319.42000, Arch=64-bit RELEASE [RyuJIT]\nGC=Concurrent Workstation\nJitModules=clrjit-v4.6.1080.0\n\nType=NestedLoggerLatencyBenchmark  Mode=Throughput  \n```\n\n----------------------------------------\n\nTITLE: BenchmarkDotNet Environment Configuration\nDESCRIPTION: This section defines the environment configuration for the BenchmarkDotNet execution. It specifies the BenchmarkDotNet version, operating system, processor details, and .NET Core version used for running the benchmarks. This configuration provides context for interpreting the benchmark results.\nSOURCE: https://github.com/serilog/serilog/blob/dev/results/netcoreapp2.0/MessageTemplateCacheBenchmark_Cached-report-github.md#2025-04-16_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n\"BenchmarkDotNet=v0.10.6, OS=Mac OS X 10.12\nProcessor=Intel Core i7-7567U CPU 3.50GHz (Kaby Lake), ProcessorCount=4\nFrequency=1000000000 Hz, Resolution=1.0000 ns, Timer=UNKNOWN\ndotnet cli version=2.1.4\n  [Host]     : .NET Core 4.6.0.0, 64bit RyuJIT\n  DefaultJob : .NET Core 4.6.0.0, 64bit RyuJIT\"\n```\n\n----------------------------------------\n\nTITLE: Configuring BenchmarkDotNet for Serilog Performance Tests\nDESCRIPTION: This snippet shows the configuration settings for BenchmarkDotNet used to run performance tests on Serilog. It specifies the BenchmarkDotNet version, operating system, processor details, and runtime environment.\nSOURCE: https://github.com/serilog/serilog/blob/dev/results/net46/AllocationsBenchmark-report-github.md#2025-04-16_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\nBenchmarkDotNet=v0.10.6, OS=Windows 10 Redstone 1 (10.0.14393)\nProcessor=Intel Core i7-4790 CPU 3.60GHz (Haswell), ProcessorCount=8\nFrequency=3507500 Hz, Resolution=285.1033 ns, Timer=TSC\n  [Host]     : Clr 4.0.30319.42000, 32bit LegacyJIT-v4.7.2053.0\n  DefaultJob : Clr 4.0.30319.42000, 32bit LegacyJIT-v4.7.2053.0\n```\n\n----------------------------------------\n\nTITLE: Configuring Serilog Benchmark Environment in INI\nDESCRIPTION: This INI configuration sets up the environment for running Serilog benchmarks. It specifies the BenchmarkDotNet version, OS details, processor information, and CLR version.\nSOURCE: https://github.com/serilog/serilog/blob/dev/results/net4.5.2/MessageTemplateCache/MessageTemplateCacheBenchmark_Cached-report-github.md#2025-04-16_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\nHost Process Environment Information:\nBenchmarkDotNet.Core=v0.9.9.0\nOS=Microsoft Windows NT 6.2.9200.0\nProcessor=Intel(R) Core(TM) i7-4790 CPU 3.60GHz, ProcessorCount=8\nFrequency=3507509 ticks, Resolution=285.1026 ns, Timer=TSC\nCLR=MS.NET 4.0.30319.42000, Arch=64-bit RELEASE [RyuJIT]\nGC=Concurrent Workstation\nJitModules=clrjit-v4.6.1586.0\n\nType=MessageTemplateCacheBenchmark_Cached  Mode=Throughput\n```\n\n----------------------------------------\n\nTITLE: Serilog Logger Creation Performance Metrics\nDESCRIPTION: Benchmark results comparing performance of two logger context creation methods: ForContextString and ForContextType\nSOURCE: https://github.com/serilog/serilog/blob/dev/results/netcoreapp1.0/NestedLoggerCreationBenchmark-report-github.md#2025-04-16_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\nMethod |      Median |    StdDev |\n----------------- |------------ |---------- |\n ForContextString |  92.1957 ns | 0.8786 ns |\n   ForContextType | 155.5276 ns | 0.8364 ns |\n```\n\n----------------------------------------\n\nTITLE: Windows Benchmark Configuration for Serilog\nDESCRIPTION: Configuration details for Serilog benchmarks run on Windows 10 with .NET Core 2.1 and 3.1. Includes system specifications and runtime information.\nSOURCE: https://github.com/serilog/serilog/blob/dev/results/netcoreapp3.1/SourceContextMatchBenchmark-report-github.md#2025-04-16_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\nBenchmarkDotNet=v0.12.0, OS=Windows 10.0.19041\nIntel Core i7-3840QM CPU 2.80GHz (Ivy Bridge), 1 CPU, 8 logical and 4 physical cores\n.NET Core SDK=3.1.300\n  [Host]     : .NET Core 3.1.4 (CoreCLR 4.700.20.20201, CoreFX 4.700.20.22101), X64 RyuJIT\n  Job-KEWXME : .NET Core 2.1.16 (CoreCLR 4.6.28516.03, CoreFX 4.6.28516.10), X64 RyuJIT\n  Job-KKEVOV : .NET Core 3.1.4 (CoreCLR 4.700.20.20201, CoreFX 4.700.20.22101), X64 RyuJIT\n```"
  }
]