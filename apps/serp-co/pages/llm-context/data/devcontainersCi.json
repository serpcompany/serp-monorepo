[
  {
    "owner": "devcontainers",
    "repo": "ci",
    "content": "TITLE: Advanced Dev Container CI Workflow with Registry Caching\nDESCRIPTION: A GitHub workflow that builds a Dev Container, pushes it to GitHub Container Registry for caching, and runs multiple commands within the container. This example demonstrates proper registry authentication and multi-command execution.\nSOURCE: https://github.com/devcontainers/ci/blob/main/docs/github-action.md#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nname: 'build' \non: # rebuild any PRs and main branch changes\n  pull_request:\n  push:\n    branches:\n      - main\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n\n      - name: Checkout (GitHub)\n        uses: actions/checkout@v3\n\n      - name: Login to GitHub Container Registry\n        uses: docker/login-action@v2 \n        with:\n          registry: ghcr.io\n          username: ${{ github.repository_owner }}\n          password: ${{ secrets.GITHUB_TOKEN }}\n\n      - name: Build and run Dev Container task\n        uses: devcontainers/ci@v0.3\n        with:\n          # Change this to point to your image name\n          imageName: ghcr.io/example/example-devcontainer\n          # Change this to be your CI task/script\n          runCmd: |\n            # Add multiple commands to run if needed\n            make install-packages\n            make ci-build\n```\n\n----------------------------------------\n\nTITLE: Pre-building and Running CI Build in Dev Container with GitHub Actions\nDESCRIPTION: This YAML snippet combines pre-building a Dev Container image and running a CI build command within it. It specifies the image name, cache source, push settings, and the command to run.\nSOURCE: https://github.com/devcontainers/ci/blob/main/README.md#2025-04-17_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n- name: Pre-build image and run make ci-build in dev container\n  uses: devcontainers/ci@v0.3\n  with:\n    imageName: ghcr.io/example/example-devcontainer\n    cacheFrom: ghcr.io/example/example-devcontainer\n    push: always\n    runCmd: make ci-build\n```\n\n----------------------------------------\n\nTITLE: Combined Pre-build and CI Execution in Dev Container\nDESCRIPTION: A GitHub workflow step that combines both pre-building a Dev Container image and running CI commands within it. This approach handles both caching and execution in a single step.\nSOURCE: https://github.com/devcontainers/ci/blob/main/docs/github-action.md#2025-04-17_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n- name: Pre-build image and run make ci-build in dev container\n  uses: devcontainers/ci@v0.3\n  with:\n    imageName: ghcr.io/example/example-devcontainer\n    cacheFrom: ghcr.io/example/example-devcontainer\n    push: always\n    runCmd: make ci-build\n```\n\n----------------------------------------\n\nTITLE: Configuring GitHub Actions Workflow for Multiplatform Dev Container Builds\nDESCRIPTION: GitHub Actions workflow configuration that sets up QEMU and Docker buildx for multi-architecture container builds. Includes steps for GitHub container registry authentication and devcontainers/ci action setup supporting both AMD64 and ARM64 architectures.\nSOURCE: https://github.com/devcontainers/ci/blob/main/docs/multi-platform-builds.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nname: 'build'\non:\n  pull_request:\n  push:\n    branches:\n      - main\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout (GitHub)\n        uses: actions/checkout@v3\n      - name: Set up QEMU for multi-architecture builds\n        uses: docker/setup-qemu-action@v3\n      - name: Setup Docker buildx for multi-architecture builds\n        uses: docker/setup-buildx-action@v3\n        with:\n          use: true\n      - name: Login to GitHub Container Registry\n        uses: docker/login-action@v2\n        with:\n          registry: ghcr.io\n          username: ${{ github.repository_owner }}\n          password: ${{ secrets.GITHUB_TOKEN }}\n      - name: Build and release devcontainer Multi-Platform\n        uses: devcontainers/ci@v0.3\n        with:\n          imageName: ghcr.io/UserNameHere/ImageNameHere\n          platform: linux/amd64,linux/arm64\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure DevOps Pipeline for Multiplatform Dev Container Builds\nDESCRIPTION: Azure DevOps pipeline configuration that enables multi-architecture container builds using QEMU and Docker buildx. Includes container registry authentication and devcontainers task configuration for AMD64 and ARM64 platforms.\nSOURCE: https://github.com/devcontainers/ci/blob/main/docs/multi-platform-builds.md#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ntrigger:\n- main\n\npool:\n  vmImage: ubuntu-latest\n\njobs:\n- job: BuildContainerImage\n  displayName: Build Container Image\n  timeoutInMinutes: 0\n  steps:\n  - checkout: self\n  - task: Docker@2\n    displayName: Login to Container Registry\n    inputs:\n      command: login\n      containerRegistry: RegistryNameHere\n  - script: docker run --rm --privileged multiarch/qemu-user-static --reset -p yes\n    displayName: Set up QEMU\n  - script: docker buildx create --use\n    displayName: Set up docker buildx\n  - task: DevcontainersCi@0\n    inputs:\n      imageName: UserNameHere/ImageNameHere\n      platform: linux/amd64,linux/arm64\n```\n\n----------------------------------------\n\nTITLE: Advanced DevContainer CI Pipeline with Azure Container Registry\nDESCRIPTION: Complete example showing container registry authentication, image building and pushing. Includes branch filtering and custom image naming with ACR integration.\nSOURCE: https://github.com/devcontainers/ci/blob/main/docs/azure-devops-task.md#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ntrigger:\n- main\n\npool:\n  vmImage: ubuntu-latest\n\nsteps:\n# Replace the username and registry name here with your own details\n# This step also uses an ACR_TOKEN specified as a secret variable\n- script: |\n    docker login -u test -p $ACR_TOKEN yourregistry.azurecr.io\n  displayName: 'Log in to Container Registry'\n  env:\n    ACR_TOKEN: $(ACR_TOKEN)\n\n- task: DevcontainersCi@0\n  inputs:\n    # Change this to point to your image name\n    imageName: 'yourregistry.azurecr.io/example-dev-container'\n    # Change this to be your CI task/script\n    runCmd: 'make ci-build'\n    # sourceBranchFilterForPush allows you to limit which branch's builds\n    # are pushed to the registry\n    sourceBranchFilterForPush: refs/heads/main\n```\n\n----------------------------------------\n\nTITLE: Basic Dev Container CI Workflow in GitHub Actions\nDESCRIPTION: A simple GitHub workflow that builds a Dev Container and runs a test command within it. This example builds the container from scratch on each run without caching to a registry.\nSOURCE: https://github.com/devcontainers/ci/blob/main/docs/github-action.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nname: 'build' \non: # rebuild any PRs and main branch changes\n  pull_request:\n  push:\n    branches:\n      - main\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n\n      - name: Checkout (GitHub)\n        uses: actions/checkout@v3\n\n      - name: Build and run dev container task\n        uses: devcontainers/ci@v0.3\n        with:\n          # Change this to be your CI task/script\n          runCmd: yarn test\n```\n\n----------------------------------------\n\nTITLE: DevcontainersCi Task with Azure Container Registry Integration\nDESCRIPTION: Extended example showing how to authenticate with Azure Container Registry and configure the DevcontainersCi task with image caching and branch filtering for pushes.\nSOURCE: https://github.com/devcontainers/ci/blob/main/azdo-task/README.md#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ntrigger:\n- main\n\npool:\n  vmImage: ubuntu-latest\n\nsteps:\n# Replace the username and registry name here with your own details\n# This step also uses an ACR_TOKEN specified as a secret variable\n- script: |\n    docker login -u test -p $ACR_TOKEN yourregistry.azurecr.io\n  displayName: 'Log in to Container Registry'\n  env:\n    ACR_TOKEN: $(ACR_TOKEN)\n\n- task: DevcontainersCi@0\n  inputs:\n    # Change this to point to your image name\n    imageName: 'yourregistry.azurecr.io/example-dev-container'\n    # Change this to be your CI task/script\n    runCmd: 'make ci-build'\n    # sourceBranchFilterForPush allows you to limit which branch's builds\n    # are pushed to the registry\n    sourceBranchFilterForPush: refs/heads/main\n```\n\n----------------------------------------\n\nTITLE: Pre-building Dev Container Image in GitHub Actions\nDESCRIPTION: This YAML snippet demonstrates how to use the devcontainers/ci action to pre-build a Dev Container image. It specifies the image name, cache source, and push settings.\nSOURCE: https://github.com/devcontainers/ci/blob/main/README.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n- name: Pre-build dev container image\n  uses: devcontainers/ci@v0.3\n  with:\n    imageName: ghcr.io/example/example-devcontainer\n    cacheFrom: ghcr.io/example/example-devcontainer\n    push: always\n```\n\n----------------------------------------\n\nTITLE: Pre-building a Dev Container Image in GitHub Actions\nDESCRIPTION: A GitHub workflow step that pre-builds a Dev Container image and pushes it to a container registry. This is useful for caching the container image to speed up subsequent workflows.\nSOURCE: https://github.com/devcontainers/ci/blob/main/docs/github-action.md#2025-04-17_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n- name: Pre-build dev container image\n  uses: devcontainers/ci@v0.3\n  with:\n    imageName: ghcr.io/example/example-devcontainer\n    cacheFrom: ghcr.io/example/example-devcontainer\n    push: always\n```\n\n----------------------------------------\n\nTITLE: Using a Pre-built Dev Container for CI in GitHub Actions\nDESCRIPTION: A GitHub workflow step that runs a CI build command inside a Dev Container, leveraging a pre-built container image from a registry to improve performance.\nSOURCE: https://github.com/devcontainers/ci/blob/main/docs/github-action.md#2025-04-17_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n- name: Run make ci-build in dev container\n  uses: devcontainers/ci@v0.3\n  with:    \n    # [Optional] If you have a separate workflow like the one above\n    # to pre-build your container image, you can reference it here\n    # to speed up your application build workflows as well!\n    cacheFrom: ghcr.io/example/example-devcontainer\n\n    push: never\n    runCmd: make ci-build\n```\n\n----------------------------------------\n\nTITLE: Basic DevcontainersCi Task Configuration in Azure Pipeline\nDESCRIPTION: Simplest example of using the DevcontainersCi task to run a command in a Dev Container. Triggers on main branch and uses ubuntu-latest pool.\nSOURCE: https://github.com/devcontainers/ci/blob/main/azdo-task/README.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ntrigger:\n- main\n\npool:\n  vmImage: ubuntu-latest\n\nsteps:\n\n- task: DevcontainersCi@0\n  inputs:\n    # Change this to be your CI task/script\n    runCmd: 'make ci-build'\n```\n\n----------------------------------------\n\nTITLE: Basic DevContainer CI Pipeline Configuration in Azure DevOps\nDESCRIPTION: Simple example of running a dev container build task in Azure DevOps pipeline. Uses ubuntu-latest pool and executes a make ci-build command.\nSOURCE: https://github.com/devcontainers/ci/blob/main/docs/azure-devops-task.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ntrigger:\n- main\n\npool:\n  vmImage: ubuntu-latest\n\nsteps:\n\n- task: DevcontainersCi@0\n  inputs:\n    # Change this to be your CI task/script\n    runCmd: 'make ci-build'\n```\n\n----------------------------------------\n\nTITLE: Running CI Build in Dev Container with GitHub Actions\nDESCRIPTION: This YAML snippet shows how to use the devcontainers/ci action to run a CI build command within a Dev Container. It optionally uses a pre-built image for caching and specifies the command to run.\nSOURCE: https://github.com/devcontainers/ci/blob/main/README.md#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n- name: Run make ci-build in dev container\n  uses: devcontainers/ci@v0.3\n  with:    \n    # [Optional] If you have a separate workflow like the one above\n    # to pre-build your container image, you can reference it here\n    # to speed up your application build workflows as well!\n    cacheFrom: ghcr.io/example/example-devcontainer\n\n    push: never\n    runCmd: make ci-build\n```\n\n----------------------------------------\n\nTITLE: Building a DevContainer from a Sub-folder\nDESCRIPTION: GitHub Action workflow configuration showing how to build and run a dev container from a specific sub-folder in the repository using the subFolder input parameter.\nSOURCE: https://github.com/devcontainers/ci/blob/main/docs/github-action.md#2025-04-17_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\n      - name: Build and run dev container task\n        uses: devcontainers/ci@v0.3\n        with:\n          subFolder: folderB\n          imageName: ghcr.io/example/example-devcontainer\n          runCmd: make ci-build\n```\n\n----------------------------------------\n\nTITLE: Configuring Environment Variables for DevContainer\nDESCRIPTION: GitHub Action workflow configuration demonstrating how to pass environment variables to a dev container through both the action's env context and the env input parameter.\nSOURCE: https://github.com/devcontainers/ci/blob/main/docs/github-action.md#2025-04-17_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\n      - name: Build and run dev container task\n        uses: devcontainers/ci@v0.3\n        env:\n          WORLD: World\n        with:\n          subFolder: folderB\n          imageName: ghcr.io/example/example-devcontainer\n          runCmd: echo \"$HELLO - $WORLD\"\n          env: |\n            HELLO=Hello\n            WORLD\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for localEnv Resolution\nDESCRIPTION: GitHub Action workflow configuration showing the correct way to set environment variables that need to be resolved through localEnv references in the devcontainer.json file.\nSOURCE: https://github.com/devcontainers/ci/blob/main/docs/github-action.md#2025-04-17_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\n      - name: Build and run dev container task\n        uses: devcontainers/ci@v0.3\n        env:\n          # Set HELLO here so that it is resolved via the localEnv context\n          HELLO: hello\n        with:\n          imageName: ghcr.io/example/example-devcontainer\n          runCmd: echo \"$HELLO\"\n          # Don't use the env block here to set the HELLO environment variable\n          # as it will be overridden by the value from localEnv context\n          # when the CLI starts the container\n```\n\n----------------------------------------\n\nTITLE: DevContainer JSON Configuration with Remote Environment Variables\nDESCRIPTION: Example devcontainer.json configuration showing how to use remoteEnv to reference local environment variables using the localEnv context, which requires special handling in CI workflows.\nSOURCE: https://github.com/devcontainers/ci/blob/main/docs/github-action.md#2025-04-17_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"remoteEnv\": {\n        \"HELLO\": \"${localEnv:HELLO}\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: DevContainer CI Pipeline with Environment Variables\nDESCRIPTION: Example showing how to pass environment variables to the dev container during execution. Demonstrates both direct value assignment and variable reference.\nSOURCE: https://github.com/devcontainers/ci/blob/main/docs/azure-devops-task.md#2025-04-17_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n- task: DevcontainersCi@0\n  inputs:\n    imageName: 'yourregistry.azurecr.io/example-dev-container'\n    runCmd: echo \"$HELLO - $WORLD\"\n    env: |\n      HELLO=Hello\n      WORLD\n```\n\n----------------------------------------\n\nTITLE: Configuring Environment Variables in DevcontainersCi Task\nDESCRIPTION: This snippet demonstrates how to pass environment variables to a dev container using the env input. Variables can be specified with values (HELLO=Hello) or without (WORLD), in which case they inherit from the task's env configuration or job environment.\nSOURCE: https://github.com/devcontainers/ci/blob/main/docs/azure-devops-task.md#2025-04-17_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n- task: DevcontainersCi@0\n  env:\n    WORLD: World\n  inputs:\n    imageName: 'yourregistry.azurecr.io/example-dev-container'\n    runCmd: echo \"$HELLO - $WORLD\"\n    env: |\n      HELLO=Hello\n      WORLD\n```\n\n----------------------------------------\n\nTITLE: Defining remoteEnv with localEnv References in devcontainer.json\nDESCRIPTION: This JSON snippet shows how to configure environment variables in the devcontainer.json file using localEnv references. The HELLO variable will be resolved from the local environment when the container starts.\nSOURCE: https://github.com/devcontainers/ci/blob/main/docs/azure-devops-task.md#2025-04-17_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"remoteEnv\": {\n        \"HELLO\": \"${localEnv:HELLO}\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for localEnv Resolution in DevcontainersCi Task\nDESCRIPTION: This YAML snippet demonstrates the correct way to set environment variables that will be resolved via the localEnv context in a devcontainer.json file. The HELLO variable is set at the task level, not in the inputs.env section.\nSOURCE: https://github.com/devcontainers/ci/blob/main/docs/azure-devops-task.md#2025-04-17_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\n- task: DevcontainersCi@0\n  env:\n    # Set HELLO here so that it is resolved via the localEnv context\n    HELLO: hello\n  inputs:\n    imageName: 'yourregistry.azurecr.io/example-dev-container'\n    runCmd: echo \"$HELLO\"\n    # Don't use the env block here to set the HELLO environment variable\n    # as it will be overridden by the value from localEnv context\n    # when the CLI starts the container\n```\n\n----------------------------------------\n\nTITLE: DevcontainersCi Task with Environment Variables\nDESCRIPTION: Example showing how to pass environment variables to the Dev Container using the env input parameter.\nSOURCE: https://github.com/devcontainers/ci/blob/main/azdo-task/README.md#2025-04-17_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n- task: DevcontainersCi@0\n  inputs:\n    imageName: 'yourregistry.azurecr.io/example-dev-container'\n    runCmd: echo \"$HELLO - $WORLD\"\n    env: |\n      HELLO=Hello\n      WORLD\n```\n\n----------------------------------------\n\nTITLE: Passing Environment Variables to Dev Containers in Azure DevOps Pipeline\nDESCRIPTION: Example showing how to pass environment variables to a dev container via the DevcontainersCi task in Azure DevOps. Variables can be defined directly in the env input or picked up from job environment variables.\nSOURCE: https://github.com/devcontainers/ci/blob/main/azdo-task/README.md#2025-04-17_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n- task: DevcontainersCi@0\n  env:\n    WORLD: World\n  inputs:\n    imageName: 'yourregistry.azurecr.io/example-dev-container'\n    runCmd: echo \"$HELLO - $WORLD\"\n    env: |\n      HELLO=Hello\n      WORLD\n```\n\n----------------------------------------\n\nTITLE: Configuring Remote Environment Variables with localEnv References in devcontainer.json\nDESCRIPTION: Example showing how to set up remoteEnv variables that reference local environment variables in the devcontainer.json configuration file.\nSOURCE: https://github.com/devcontainers/ci/blob/main/azdo-task/README.md#2025-04-17_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"remoteEnv\": {\n        \"HELLO\": \"${localEnv:HELLO}\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Correctly Setting localEnv Referenced Variables in Azure DevOps Pipeline\nDESCRIPTION: Example showing the proper way to set environment variables that will be resolved via the localEnv context in a devcontainer.json file. Variables must be set at the task level rather than in the env input.\nSOURCE: https://github.com/devcontainers/ci/blob/main/azdo-task/README.md#2025-04-17_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\n- task: DevcontainersCi@0\n  env:\n    # Set HELLO here so that it is resolved via the localEnv context\n    HELLO: hello\n  inputs:\n    imageName: 'yourregistry.azurecr.io/example-dev-container'\n    runCmd: echo \"$HELLO\"\n    # Don't use the env block here to set the HELLO environment variable\n    # as it will be overridden by the value from localEnv context\n    # when the CLI starts the container\n```\n\n----------------------------------------\n\nTITLE: Repository Structure Example for DevContainer Sub-folder Specification\nDESCRIPTION: Example file structure showing how a repository might be organized with multiple folders, where one contains a devcontainer configuration that can be referenced using the subFolder input.\nSOURCE: https://github.com/devcontainers/ci/blob/main/docs/github-action.md#2025-04-17_snippet_5\n\nLANGUAGE: plaintext\nCODE:\n```\n<repo-root>\n|-folderA\n|-folderB\n| |-.devcontainer\n| | |-devcontainer.json\n| | |-Dockerfile\n| |-main.go\n|-folderC\n...\n```\n\n----------------------------------------\n\nTITLE: Displaying Repo Structure Table in Markdown\nDESCRIPTION: A markdown table showing the main folders in the repo and their descriptions. It includes folders for Azure DevOps task, common code, documentation, GitHub Action, and test projects.\nSOURCE: https://github.com/devcontainers/ci/blob/main/CONTRIBUTING.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Folder          | Description                                                                                    |\n| --------------- | ---------------------------------------------------------------------------------------------- |\n| `azdo-task`     | Code for the Azure DevOps Pipeline Task                                                        |\n| `common`        | Common code used by both the GitHub Action and Azure DevOps Pipeline Task                      |\n| `docs`          | Documentation for using the action/task                                                        |\n| `github-action` | Code for the GitHub Action                                                                     |\n| `github-tests`  | This folder contains various test projects that are used by the CI for GitHub and Azure DevOps |\n```"
  }
]