[
  {
    "owner": "emotion-js",
    "repo": "emotion",
    "content": "TITLE: Defining a Theme for Emotion in TypeScript\nDESCRIPTION: These examples show how to define a theme type for Emotion in TypeScript by extending the `@emotion/react` module. This enables type-safe access to theme properties within styled components. The first example defines a custom theme with color properties, while the second example extends the Emotion theme with a 3rd party theme.\nSOURCE: https://github.com/emotion-js/emotion/blob/main/docs/typescript.mdx#_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nimport '@emotion/react'\n\ndeclare module '@emotion/react' {\n  export interface Theme {\n    color: {\n      primary: string\n      positive: string\n      negative: string\n    }\n  }\n}\n\n// You are also able to use a 3rd party theme this way:\nimport '@emotion/react'\nimport { LibTheme } from 'some-lib'\n\ndeclare module '@emotion/react' {\n  export interface Theme extends LibTheme {}\n}\n```\n\n----------------------------------------\n\nTITLE: Babel Preset with React JSX Runtime\nDESCRIPTION: Configures Babel to use the new React JSX runtime along with the `@emotion/babel-plugin`. This setup allows using emotion with the automatic JSX transform and imports the `jsx` function from `@emotion/react`.\nSOURCE: https://github.com/emotion-js/emotion/blob/main/docs/css-prop.mdx#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"presets\": [\n    [\n      \"@babel/preset-react\",\n      { \"runtime\": \"automatic\", \"importSource\": \"@emotion/react\" }\n    ]\n  ],\n  \"plugins\": [\"@emotion/babel-plugin\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Babel Configuration for Emotion Plugin\nDESCRIPTION: Shows how to configure the Babel configuration file (.babelrc) to include the @emotion Babel plugin.  The \"emotion\" plugin must be the first one in the plugins array. This is crucial for the plugin to function correctly.\nSOURCE: https://github.com/emotion-js/emotion/blob/main/docs/install.mdx#_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"plugins\": [\"@emotion\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Styling HTML elements with Emotion styled\nDESCRIPTION: This example shows how to style a basic HTML element (button) using `@emotion/styled` with tagged template literals for CSS-like syntax. The styled component is then rendered within a React component.\nSOURCE: https://github.com/emotion-js/emotion/blob/main/docs/styled.mdx#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport styled from '@emotion/styled'\n\nconst Button = styled.button`\n  color: turquoise;\n`\n\nrender(<Button>This my button component.</Button>)\n```\n\n----------------------------------------\n\nTITLE: Styling React components with @emotion/react\nDESCRIPTION: This code snippet demonstrates how to use the `jsx`, `css`, `Global`, and `ClassNames` features of @emotion/react to style React components. It showcases inline styles using the css prop, global styles, and class name composition.\nSOURCE: https://github.com/emotion-js/emotion/blob/main/packages/react/README.md#_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n/** @jsx jsx */\nimport { jsx, css, Global, ClassNames } from '@emotion/react'\n\nrender(\n  <div css={{ color: 'hotpink' }}>\n    <div\n      css={css`\n        color: green;\n      `}\n    />\n    <Global\n      styles={{\n        body: {\n          margin: 0,\n          padding: 0\n        }\n      }}\n    />\n    <ClassNames>\n      {({ css, cx }) => (\n        <div\n          className={cx(\n            'some-class',\n            css`\n              color: yellow;\n            `\n          )}\n        />\n      )}\n    </ClassNames>\n  </div>\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring JSX Transform for Emotion in TypeScript\nDESCRIPTION: This code snippet shows the required compiler options in the tsconfig.json file for using the new JSX transform with Emotion. It configures the TypeScript compiler to use the 'react-jsx' transform and specifies '@emotion/react' as the JSX import source, enabling the use of the css prop.\nSOURCE: https://github.com/emotion-js/emotion/blob/main/docs/typescript.mdx#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"jsx\": \"react-jsx\",\n\"jsxImportSource\": \"@emotion/react\"\n```\n\n----------------------------------------\n\nTITLE: Defining Styles with @emotion/react CSS Prop in TSX\nDESCRIPTION: This code demonstrates how to define styles using both object syntax and template literal syntax with the css prop from @emotion/react. It shows how to import the css function and use it to create style objects and tagged template literals, which are then assigned to components via the css prop.\nSOURCE: https://github.com/emotion-js/emotion/blob/main/docs/typescript.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { css } from '@emotion/react'\n\nconst titleStyle = css({\n  boxSizing: 'border-box',\n  width: 300,\n  height: 200\n})\n\nconst subtitleStyle = css`\n  box-sizing: border-box;\n  width: 100px;\n  height: 60px;\n`\n```\n\n----------------------------------------\n\nTITLE: Targeting Emotion components with CSS selectors\nDESCRIPTION: This example shows how to target other Emotion components using CSS selectors when using the `@emotion/babel-plugin`.  The `Child` component's color changes when it is a direct descendant of the `Parent` component.\nSOURCE: https://github.com/emotion-js/emotion/blob/main/docs/styled.mdx#_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport styled from '@emotion/styled'\n\nconst Child = styled.div`\n  color: red;\n`\n\nconst Parent = styled.div`\n  ${Child} {\n    color: green;\n  }\n`\n\nrender(\n  <div>\n    <Parent>\n      <Child>Green because I am inside a Parent</Child>\n    </Parent>\n    <Child>Red because I am not inside a Parent</Child>\n  </div>\n)\n```\n\n----------------------------------------\n\nTITLE: Using @emotion/styled\nDESCRIPTION: This code snippet demonstrates how to create a styled button component using `@emotion/styled`. It shows how to define styles for a component directly within JavaScript, including hover effects, and renders the styled `Button` component.\nSOURCE: https://github.com/emotion-js/emotion/blob/main/docs/introduction.mdx#_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\n// @live\nimport styled from '@emotion/styled'\n\nconst Button = styled.button`\n  padding: 32px;\n  background-color: hotpink;\n  font-size: 24px;\n  border-radius: 4px;\n  color: black;\n  font-weight: bold;\n  &:hover {\n    color: white;\n  }\n`\n\nrender(<Button>This my button component.</Button>)\n```\n\n----------------------------------------\n\nTITLE: Using shared CSS object in a component\nDESCRIPTION: Shows how to import and use a shared CSS object in a React component with Emotion. The `css` prop is used to apply the shared styles to a paragraph element. The shared styles defined elsewhere are applied to the element.\nSOURCE: https://github.com/emotion-js/emotion/blob/main/docs/best-practices.mdx#_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { errorCss } from '...'\n\nreturn <p css={errorCss}>Failed to fizzle the frozzle.</p>\n```\n\n----------------------------------------\n\nTITLE: Sharing styles via component reuse in Emotion\nDESCRIPTION: Demonstrates how to share styles by creating reusable React components with Emotion.  The `ErrorMessage` component defines the base styles (color and font-weight), while the `LargeErrorMessage` component extends these styles with an additional font size. The className prop is used to pass down styles.\nSOURCE: https://github.com/emotion-js/emotion/blob/main/docs/best-practices.mdx#_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nexport function ErrorMessage({ className, children }) {\n  return (\n    <p css={{ color: 'red', fontWeight: 'bold' }} className={className}>\n      {children}\n    </p>\n  )\n}\n\n// `fontSize: '1.5rem'` is passed down to the ErrorMessage component via the\n// className prop, so ErrorMessage must accept a className prop for this to\n// work!\nexport function LargeErrorMessage({ className, children }) {\n  return (\n    <ErrorMessage css={{ fontSize: '1.5rem' }} className={className}>\n      {children}\n    </ErrorMessage>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: CSS styles example\nDESCRIPTION: An example demonstrating the input CSS styles and the corresponding output after processing by `@emotion/babel-plugin`. The plugin minifies the styles and adds `/*#__PURE__*/` annotations for dead code elimination.\nSOURCE: https://github.com/emotion-js/emotion/blob/main/packages/babel-plugin/README.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst myStyles = css`\n  font-size: 20px;\n  @media (min-width: 420px) {\n    color: blue;\n    ${css`\n      width: 96px;\n      height: 96px;\n    `};\n    line-height: 26px;\n  }\n  background: green;\n  ${{ backgroundColor: 'hotpink' }};\n`\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst myStyles = /* #__PURE__ */ css(\n  'font-size:20px;@media(min-width:420px){color:blue;',\n  /* #__PURE__ */ css('width:96px;height:96px;'),\n  ';line-height:26px;}background:green;',\n  { backgroundColor: 'hotpink' },\n  ';'\n)\n```\n\n----------------------------------------\n\nTITLE: Using styled components in React\nDESCRIPTION: Demonstrates how to use styled components from @emotion/styled to create React components with attached styles. This allows you to define styles using CSS syntax directly within your JavaScript code.\nSOURCE: https://github.com/emotion-js/emotion/blob/main/docs/install.mdx#_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\n// @live\nimport styled from '@emotion/styled'\n\nconst Button = styled.button`\n  color: hotpink;\n`\n\nrender(<Button>This is a hotpink button.</Button>)\n```\n\n----------------------------------------\n\nTITLE: Defining Keyframes Animation in Emotion.js\nDESCRIPTION: This code snippet demonstrates how to define a keyframe animation using the `keyframes` helper from `@emotion/react`. The animation is defined as a CSS keyframe definition and assigned to a variable `bounce`, which is then used in the `animation` property of a React component's style using the `css` prop.\nSOURCE: https://github.com/emotion-js/emotion/blob/main/docs/keyframes.mdx#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { css, keyframes } from '@emotion/react'\n\nconst bounce = keyframes`\n  from, 20%, 53%, 80%, to {\n    transform: translate3d(0,0,0);\n  }\n\n  40%, 43% {\n    transform: translate3d(0, -30px, 0);\n  }\n\n  70% {\n    transform: translate3d(0, -15px, 0);\n  }\n\n  90% {\n    transform: translate3d(0,-4px,0);\n  }\n`\n\nrender(\n  <div\n    css={css`\n      animation: ${bounce} 1s ease infinite;\n    `}\n  >\n    some bouncing text!\n  </div>\n)\n```\n\n----------------------------------------\n\nTITLE: Using withComponent with @emotion/styled in TSX\nDESCRIPTION: This code snippet illustrates how to use the `withComponent` method in `@emotion/styled` to create a new styled component based on an existing one, but with a different underlying HTML element. It shows how to create a styled `div` and then create a styled `a` tag (Link) based on it, allowing the `href` prop to be used without errors.\nSOURCE: https://github.com/emotion-js/emotion/blob/main/docs/typescript.mdx#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport styled from '@emotion/styled'\n\nconst NotALink = styled('div')`\n  color: red;\n`\n\nconst Link = NotALink.withComponent('a')\n\nconst App = () => <Link href=\"#\">Click me</Link>\n\n// No errors!\n```\n\n----------------------------------------\n\nTITLE: Styling with styled components using Emotion.js\nDESCRIPTION: This snippet demonstrates how to create a styled button component using Emotion.js. It defines a base style and then uses a function to apply additional styles based on props.\nSOURCE: https://github.com/emotion-js/emotion/blob/main/docs/object-styles.mdx#_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport styled from '@emotion/styled'\n\nconst Button = styled.button(\n  {\n    color: 'darkorchid'\n  },\n  props => ({\n    fontSize: props.fontSize\n  })\n)\n\nrender(<Button fontSize={16}>This is a darkorchid button.</Button>)\n```\n\n----------------------------------------\n\nTITLE: Object Styles with CSS Prop\nDESCRIPTION: Demonstrates how to use object styles directly within the `css` prop.  This approach allows defining CSS properties as key-value pairs within an object, which Emotion then transforms into a CSS class.\nSOURCE: https://github.com/emotion-js/emotion/blob/main/docs/css-prop.mdx#_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\n<div\n    css={{\n      backgroundColor: 'hotpink',\n      '&:hover': {\n        color: 'lightgreen'\n      }\n    }}\n  >\n    This has a hotpink background.\n  </div>\n```\n\n----------------------------------------\n\nTITLE: Styling with Emotion styled based on props\nDESCRIPTION: This example shows how to dynamically change styles based on props passed to the styled component. The `color` of the button and the `flexDirection` of the container change based on the `primary` and `column` props respectively.\nSOURCE: https://github.com/emotion-js/emotion/blob/main/docs/styled.mdx#_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport styled from '@emotion/styled'\n\nconst Button = styled.button`\n  color: ${props => (props.primary ? 'hotpink' : 'turquoise')};\n`\n\nconst Container = styled.div(props => ({\n  display: 'flex',\n  flexDirection: props.column && 'column'\n}))\n\nrender(\n  <Container column>\n    <Button>This is a regular button.</Button>\n    <Button primary>This is a primary button.</Button>\n  </Container>\n)\n```\n\n----------------------------------------\n\nTITLE: Defining style constants as JavaScript variables\nDESCRIPTION: Example of defining colors as JavaScript constants for reuse in Emotion styles. This promotes consistency and avoids repetition. These constants can be used in the Emotion css prop or in style objects.\nSOURCE: https://github.com/emotion-js/emotion/blob/main/docs/best-practices.mdx#_snippet_10\n\nLANGUAGE: ts\nCODE:\n```\nexport const colors = {\n  primary: '#0d6efd',\n  success: '#198754',\n  danger: '#dc3545'\n}\n```\n\n----------------------------------------\n\nTITLE: Changing rendered tag using withComponent in Emotion\nDESCRIPTION: The `withComponent` method allows reusing styles from one styled component in another, but rendering a different HTML tag. This example shows how to create an `Aside` component that has the same styles as a `Section` component, but renders as an `<aside>` tag.\nSOURCE: https://github.com/emotion-js/emotion/blob/main/docs/styled.mdx#_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport styled from '@emotion/styled'\n\nconst Section = styled.section`\n  background: #333;\n  color: #fff;\n`\n\n// this component has the same styles as Section but it renders an aside\nconst Aside = Section.withComponent('aside')\n\nrender(\n  <div>\n    <Section>This is a section</Section>\n    <Aside>This is an aside</Aside>\n  </div>\n)\n```\n\n----------------------------------------\n\nTITLE: Installing @emotion/styled\nDESCRIPTION: This command installs the @emotion/react and @emotion/styled packages as dependencies for your project. It uses the yarn package manager.\nSOURCE: https://github.com/emotion-js/emotion/blob/main/packages/styled/README.md#_snippet_0\n\nLANGUAGE: Bash\nCODE:\n```\nyarn add @emotion/react @emotion/styled\n```\n\n----------------------------------------\n\nTITLE: useTheme Hook Example\nDESCRIPTION: This snippet shows how to use the useTheme hook in Emotion to access the theme within a functional component. It defines a SomeText component that uses the useTheme hook to retrieve the theme and apply the primary color to the text color of a div.\nSOURCE: https://github.com/emotion-js/emotion/blob/main/docs/theming.mdx#_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nimport { ThemeProvider, useTheme } from '@emotion/react'\nimport styled from '@emotion/styled'\n\nconst theme = {\n  colors: {\n    primary: 'hotpink'\n  }\n}\n\nfunction SomeText(props) {\n  const theme = useTheme()\n  return <div css={{ color: theme.colors.primary }} {...props} />\n}\n\nrender(\n  <ThemeProvider theme={theme}>\n    <SomeText>some text</SomeText>\n  </ThemeProvider>\n)\n```\n\n----------------------------------------\n\nTITLE: Theming with styled components in Emotion\nDESCRIPTION: This snippet showcases how to use the ThemeProvider to provide a theme and access it within a styled component. It defines a styled div (SomeText) that utilizes the theme's primary color for its text color.\nSOURCE: https://github.com/emotion-js/emotion/blob/main/docs/theming.mdx#_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { ThemeProvider } from '@emotion/react'\nimport styled from '@emotion/styled'\n\nconst theme = {\n  colors: {\n    primary: 'hotpink'\n  }\n}\n\nconst SomeText = styled.div`\n  color: ${props => props.theme.colors.primary};\n`\n\nrender(\n  <ThemeProvider theme={theme}>\n    <SomeText>some text</SomeText>\n  </ThemeProvider>\n)\n```\n\n----------------------------------------\n\nTITLE: Emotion CSS with Explicit Labels in JSX\nDESCRIPTION: This snippet demonstrates how to define Emotion CSS styles with explicit labels using the `css` function from `@emotion/react`.  It shows both tagged template literal and object styles. The styles are then applied to a component to display the generated class names.\nSOURCE: https://github.com/emotion-js/emotion/blob/main/docs/labels.mdx#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { css } from '@emotion/react'\n\nlet style = css`\n  color: hotpink;\n  label: some-name;\n`\n\nlet anotherStyle = css({\n  color: 'lightgreen',\n  label: 'another-name'\n})\n\nlet ShowClassName = ({ className }) => (\n  <div className={className}>{className}</div>\n)\n\nrender(\n  <div>\n    <ShowClassName css={style} />\n    <ShowClassName css={anotherStyle} />\n  </div>\n)\n```\n\n----------------------------------------\n\nTITLE: Media Queries with Emotion CSS Prop in JSX\nDESCRIPTION: This snippet shows how to define media queries directly within the `css` prop in JSX using Emotion. It sets a base font size and overrides it for larger screens using a media query.\nSOURCE: https://github.com/emotion-js/emotion/blob/main/docs/media-queries.mdx#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { css } from '@emotion/react'\n\nrender(\n  <p\n    css={css`\n      font-size: 30px;\n      @media (min-width: 420px) {\n        font-size: 50px;\n      }\n    `}\n  >\n    Some text!\n  </p>\n)\n```\n\n----------------------------------------\n\nTITLE: String Styles with CSS Prop\nDESCRIPTION: Demonstrates how to use string styles (tagged template literals) with the `css` prop, using `css` function exported from `@emotion/react`. This approach allows writing CSS code within a template literal, supporting interpolation of variables.\nSOURCE: https://github.com/emotion-js/emotion/blob/main/docs/css-prop.mdx#_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\nimport { css } from '@emotion/react'\n\nconst color = 'darkgreen'\n\nrender(\n  <div\n    css={css`\n      background-color: hotpink;\n      &:hover {\n        color: ${color};\n      }\n    `}\n  >\n    This has a hotpink background.\n  </div>\n)\n```\n\n----------------------------------------\n\nTITLE: Referencing CSS Prop Types in Emotion.js with TypeScript\nDESCRIPTION: This snippet shows how to add support for the `css` prop globally for all components when using older TypeScript versions or the classic runtime with `@emotion/babel-preset-css-prop`.  This approach extends the existing `React.Attributes` interface.  It requires a triple-slash directive at the top of the file.\nSOURCE: https://github.com/emotion-js/emotion/blob/main/packages/react/CHANGELOG.md#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\n/// <reference types=\"@emotion/react/types/css-prop\" />\n```\n\n----------------------------------------\n\nTITLE: Compose styles using css interpolation (JSX)\nDESCRIPTION: This snippet demonstrates how to compose styles in Emotion using the `css` function and interpolation. The `base` style is defined first and then interpolated into another style block, allowing for easy composition and overriding of styles. This approach provides a clear and maintainable way to manage styles in Emotion.\nSOURCE: https://github.com/emotion-js/emotion/blob/main/docs/composition.mdx#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { css } from '@emotion/react'\n\nconst base = css`\n  color: hotpink;\n`\n\nrender(\n  <div\n    css={css`\n      ${base};\n      background-color: #eee;\n    `}\n  >\n    This is hotpink.\n  </div>\n)\n```\n\n----------------------------------------\n\nTITLE: Emotion.js style composition with array syntax (JSX)\nDESCRIPTION: This snippet demonstrates how to combine Emotion styles using an array within the css prop. The order of styles in the array defines the order of precedence, with later styles overriding earlier ones. This composition approach offers greater control over style application compared to CSS class cascades.\nSOURCE: https://github.com/emotion-js/emotion/blob/main/docs/composition.mdx#_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport { css } from '@emotion/react'\n\nconst danger = css`\n  color: red;\n`\n\nconst base = css`\n  background-color: darkgreen;\n  color: turquoise;\n`\n\nrender(\n  <div>\n    <div css={base}>This will be turquoise</div>\n    <div css={[danger, base]}>\n      This will be also be turquoise since the base styles overwrite the danger\n      styles.\n    </div>\n    <div css={[base, danger]}>This will be red</div>\n  </div>\n)\n```\n\n----------------------------------------\n\nTITLE: Styling React Components with @emotion/styled in TSX\nDESCRIPTION: This example demonstrates how to style React components using `@emotion/styled`. It shows how to define a functional component with props and then create styled versions of it using both template literals and object styles. The example also demonstrates how Emotion infers the component props as expected.\nSOURCE: https://github.com/emotion-js/emotion/blob/main/docs/typescript.mdx#_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport React, { FC } from 'react'\nimport styled from '@emotion/styled'\n\ninterface ComponentProps {\n  className?: string\n  label: string\n}\n\nconst Component: FC<ComponentProps> = ({ label, className }) => (\n  <div className={className}>{label}</div>\n)\n\nconst StyledComponent0 = styled(Component)`\n  color: ${props => (props.label === 'Important' ? 'red' : 'green')};\n`\n\nconst StyledComponent1 = styled(Component)({\n  color: 'red'\n})\n\nconst App = () => (\n  <div>\n    <StyledComponent0 label=\"Important\" />\n    <StyledComponent1 label=\"Yea! No need to re-type this label prop.\" />\n  </div>\n)\n```\n\n----------------------------------------\n\nTITLE: Sharing styles via CSS objects in Emotion\nDESCRIPTION: Illustrates how to share styles by exporting CSS objects from a shared file and importing them into components. This method is suitable for sharing CSS between components. The styles are composed using arrays with the `css` function.\nSOURCE: https://github.com/emotion-js/emotion/blob/main/docs/best-practices.mdx#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nexport const errorCss = css({\n  color: 'red',\n  fontWeight: 'bold'\n})\n\n// Use arrays to compose styles\nexport const largeErrorCss = css([errorCss, { fontSize: '1.5rem' }])\n```\n\n----------------------------------------\n\nTITLE: Conditional Class Names with cx\nDESCRIPTION: This example demonstrates how to use the `cx` function to conditionally apply class names based on boolean variables.  It shows how to use object syntax to define the conditions.\nSOURCE: https://github.com/emotion-js/emotion/blob/main/packages/css/README.md#_snippet_9\n\nLANGUAGE: jsx\nCODE:\n```\nconst cls1 = css`\n  font-size: 20px;\n  background: green;\n`\nconst cls2 = css`\n  font-size: 20px;\n  background: blue;\n`\n\nconst foo = true\nconst bar = false\n\n\n<div\n  className={cx(\n    { [cls1]: foo },\n    { [cls2]: bar }\n  )}\n/>\n```\n\n----------------------------------------\n\nTITLE: Basic css Usage\nDESCRIPTION: This snippet demonstrates how to import the `css` function from @emotion/css and use it to define a CSS class with a specific style. The style is then applied to an HTML element by adding the generated class name to its class list.\nSOURCE: https://github.com/emotion-js/emotion/blob/main/packages/css/README.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { css } from '@emotion/css'\n\nconst app = document.getElementById('root')\nconst myStyle = css`\n  color: rebeccapurple;\n`\napp.classList.add(myStyle)\n```\n\n----------------------------------------\n\nTITLE: Typing Props of Styled Components with @emotion/styled in TSX\nDESCRIPTION: These examples demonstrate how to type the props of styled components using TypeScript. It shows how to define an `ImageProps` type and then use it to type the styled components, allowing you to access props in the CSS styles or object styles.\nSOURCE: https://github.com/emotion-js/emotion/blob/main/docs/typescript.mdx#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport styled from '@emotion/styled'\n\ntype ImageProps = {\n  src: string\n  width: number\n}\n\n// Using a css block\nconst Image0 = styled.div<ImageProps>`\n  width: ${props => props.width};\n  background: url(${props => props.src}) center center;\n  background-size: contain;\n`\nconst Image0 = styled('div')<ImageProps>`\n  width: ${props => props.width};\n  background: url(${props => props.src}) center center;\n  background-size: contain;\n`\n\n// Or with object styles\nconst Image1 = styled('div')<ImageProps>(\n  {\n    backgroundSize: 'contain'\n  },\n  props => ({\n    width: props.width,\n    background: `url(${props.src}) center center`\n  })\n)\n```\n\n----------------------------------------\n\nTITLE: Styling with Nested Current Class Selector (&) in Emotion CSS (JSX)\nDESCRIPTION: This snippet demonstrates how to use the `&` selector in Emotion CSS to target the current class (applied to the `<p>` element) when it's nested inside another element (a `<header>` element).  It changes the color of the paragraph to green when it's within a header, and keeps it turquoise otherwise. It uses `@emotion/react` for the `css` function and the `render` function to display the resulting component.\nSOURCE: https://github.com/emotion-js/emotion/blob/main/docs/nested.mdx#_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { css } from '@emotion/react'\n\nconst paragraph = css`\n  color: turquoise;\n\n  header & {\n    color: green;\n  }\n`\nrender(\n  <div>\n    <header>\n      <p css={paragraph}>This is green since it's inside a header</p>\n    </header>\n    <p css={paragraph}>This is turquoise since it's not inside a header.</p>\n  </div>\n)\n```\n\n----------------------------------------\n\nTITLE: Install @emotion/react\nDESCRIPTION: This command installs the `@emotion/react` package, which provides React-specific features for using Emotion. It is recommended for React users with a configurable build environment.\nSOURCE: https://github.com/emotion-js/emotion/blob/main/docs/introduction.mdx#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm i @emotion/react\n```\n\n----------------------------------------\n\nTITLE: Combining Class Names with cx\nDESCRIPTION: This code shows how to use the `cx` function to combine multiple class names, including those generated by the `css` function. This ensures that styles are overwritten in the correct order.\nSOURCE: https://github.com/emotion-js/emotion/blob/main/packages/css/README.md#_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\nimport { cx, css } from '@emotion/css'\n\nconst cls1 = css`\n  font-size: 20px;\n  background: green;\n`\nconst cls2 = css`\n  font-size: 20px;\n  background: blue;\n`\n\n<div className={cx(cls1, cls2)} />\n```\n\n----------------------------------------\n\nTITLE: Style Composition in Emotion.js\nDESCRIPTION: This snippet demonstrates how to compose styles in Emotion.js using the `css` helper. It shows how to create reusable styles and combine them for more complex styling scenarios, including hover and focus states.\nSOURCE: https://github.com/emotion-js/emotion/blob/main/docs/object-styles.mdx#_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\nimport { css } from '@emotion/react'\n\nconst hotpink = css({\n  color: 'hotpink'\n})\n\nconst hotpinkHoverOrFocus = css({\n  '&:hover,&:focus': hotpink\n})\n\nconst hotpinkWithBlackBackground = css(\n  {\n    backgroundColor: 'black',\n    color: 'green'\n  },\n  hotpink\n)\n\nrender(\n  <div>\n    <p css={hotpink}>This is hotpink</p>\n    <button css={hotpinkHoverOrFocus}>This is hotpink on hover or focus</button>\n    <p css={hotpinkWithBlackBackground}>\n      This has a black background and is hotpink. Try moving where hotpink is in\n      the css call and see if the color changes.\n    </p>\n  </div>\n)\n```\n\n----------------------------------------\n\nTITLE: String Styles with css\nDESCRIPTION: This example showcases how to use the `css` function with template literals to define styles, including dynamic values.  It demonstrates the use of nested CSS selectors like &:hover.\nSOURCE: https://github.com/emotion-js/emotion/blob/main/packages/css/README.md#_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n// @live\nimport { css } from '@emotion/css'\n\nconst color = 'darkgreen'\n\nrender(\n  <div\n    className={css`\n      background-color: hotpink;\n      &:hover {\n        color: ${color};\n      }\n    `}\n  >\n    This has a hotpink background.\n  </div>\n)\n```\n\n----------------------------------------\n\nTITLE: Object styles in Emotion styled\nDESCRIPTION: This example shows how to use object styles with `@emotion/styled`. The `H1` component's `fontSize` is set directly in the object, and its `color` is dynamically determined by the `color` prop.\nSOURCE: https://github.com/emotion-js/emotion/blob/main/docs/styled.mdx#_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nimport styled from '@emotion/styled'\n\nconst H1 = styled.h1(\n  {\n    fontSize: 20\n  },\n  props => ({ color: props.color })\n)\n\nrender(<H1 color=\"lightgreen\">This is lightgreen.</H1>)\n```\n\n----------------------------------------\n\nTITLE: Using the `as` prop in Emotion styled\nDESCRIPTION: This example shows how to use the `as` prop to change the rendered element of a styled component. Here, a `Button` styled component is rendered as an `<a>` tag instead of a `<button>` tag.\nSOURCE: https://github.com/emotion-js/emotion/blob/main/docs/styled.mdx#_snippet_9\n\nLANGUAGE: jsx\nCODE:\n```\nimport styled from '@emotion/styled'\n\nconst Button = styled.button`\n  color: hotpink;\n`\n\nrender(\n  <Button as=\"a\" href=\"https://github.com/emotion-js/emotion\">\n    Emotion on GitHub\n  </Button>\n)\n```\n\n----------------------------------------\n\nTITLE: Using TypeScript and object styles with Emotion\nDESCRIPTION: Demonstrates how to define CSS using TypeScript and object styles in Emotion. This allows for Intellisense and static type checking, improving the developer experience and preventing style bugs. The example shows a simple CSS object being assigned to a constant using the `css` function.\nSOURCE: https://github.com/emotion-js/emotion/blob/main/docs/best-practices.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nconst myCss = css({\n  color: 'blue',\n  grid: 1 // Error: Type 'number' is not assignable to type 'Grid | Grid[] | undefined'\n})\n```\n\n----------------------------------------\n\nTITLE: Passing Props When Styling React Components with @emotion/styled\nDESCRIPTION: This example shows how to pass props to styled React components using `@emotion/styled`, and using those props to apply different styles. Interfaces are used to define the component's props (`ComponentProps`) and the styled component's props (`StyledComponentProps`). The bgColor prop can be used to set a background color based on the label prop.\nSOURCE: https://github.com/emotion-js/emotion/blob/main/docs/typescript.mdx#_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nimport React, { FC } from 'react'\nimport styled from '@emotion/styled'\n\ninterface ComponentProps {\n  className?: string\n  label: string\n}\n\nconst Component: FC<ComponentProps> = ({\n  label,\n  className\n}) => <div className={className}>{label}</div>\n\ninterface StyledComponentProps {\n  bgColor: string\n}\n\nconst StyledComponent0 = styled(Component)<StyledComponentProps>`\n  color: red;\n  background: ${props => props.label ? props.bgColor : 'white'};\n`\n// or\nconst StyledComponent1 = styled(Component)<StyledComponentProps>(\n  props => ({\n    color: 'red'\n    background: props.label ? props.bgColor : 'white'\n  })\n)\n\nconst App = () => (\n  <div>\n    <StyledComponent0\n      bgColor=\"red\"\n      label=\"Some cool text\"\n    />\n    <StyledComponent1\n      bgColor=\"red\"\n      label=\"Some more cool text\"\n    />\n  </div>\n)\n```\n\n----------------------------------------\n\nTITLE: CSS variables with style prop in Emotion\nDESCRIPTION: Demonstrates how to use CSS variables with the `style` prop in Emotion to defer the value of a CSS property. Static CSS is defined using the css prop, while the value of the `--background-image` CSS variable is set dynamically using inline styles. Type assertion for TypeScript is also shown.\nSOURCE: https://github.com/emotion-js/emotion/blob/main/docs/best-practices.mdx#_snippet_7\n\nLANGUAGE: css\nCODE:\n```\n.avatar {\n  border-radius: 50%;\n  width: 40px;\n  height: 40px;\n  background-image: var(--background-image);\n}\n```\n\n----------------------------------------\n\nTITLE: Object Styles with css\nDESCRIPTION: This snippet illustrates how to use the `css` function with JavaScript objects to define styles. It includes an example of how to define pseudo-classes using the `&` selector.\nSOURCE: https://github.com/emotion-js/emotion/blob/main/packages/css/README.md#_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n// @live\nimport { css } from '@emotion/css'\n\nconst color = 'darkgreen'\n\nrender(\n  <div\n    className={css({\n      backgroundColor: 'hotpink',\n      '&:hover': {\n        color\n      }\n    })}\n  >\n    This has a hotpink background.\n  </div>\n)\n```\n\n----------------------------------------\n\nTITLE: CSS autoLabel example\nDESCRIPTION: An example demonstrating the `autoLabel` option of `@emotion/babel-plugin`. It automatically adds labels to the styles generated by the `css` function.\nSOURCE: https://github.com/emotion-js/emotion/blob/main/packages/babel-plugin/README.md#_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nconst brownStyles = css({ color: 'brown' })\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst brownStyles = /*#__PURE__*/ css({ color: 'brown' }, 'label:brownStyles;')\n```\n\n----------------------------------------\n\nTITLE: Dynamic styles with the style prop in Emotion\nDESCRIPTION: Example shows how to apply inline styles to React components with Emotion. The transform property is passed through the style prop, reflecting rapidly changing values (x and y) during a drag-and-drop operation. This avoids generating duplicate CSS classes.\nSOURCE: https://github.com/emotion-js/emotion/blob/main/docs/best-practices.mdx#_snippet_6\n\nLANGUAGE: ts\nCODE:\n```\n{\n  transform: `translate(${x}px, ${y}px)`\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Styles with className and @emotion/css in TSX\nDESCRIPTION: This example demonstrates how to use the `css` helper from `@emotion/css` to create styles and apply them to an element using the `className` prop. It shows how to import the `css` function and use it to generate a class name that is then passed to the component's `className` prop.\nSOURCE: https://github.com/emotion-js/emotion/blob/main/docs/typescript.mdx#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { css } from '@emotion/css'\n\nconst el = <div className={css({ background: 'black' })} />\n```\n\n----------------------------------------\n\nTITLE: Customizing prop forwarding in Emotion\nDESCRIPTION: This example shows how to customize which props are forwarded to the underlying HTML element or component.  The `shouldForwardProp` function is used to filter out the `color` prop from being passed to the `h1` element, while still using it to set the text color.\nSOURCE: https://github.com/emotion-js/emotion/blob/main/docs/styled.mdx#_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\nimport isPropValid from '@emotion/is-prop-valid'\nimport styled from '@emotion/styled'\n\nconst H1 = styled('h1', {\n  shouldForwardProp: prop => isPropValid(prop) && prop !== 'color'\n})(props => ({\n  color: props.color\n}))\n\nrender(<H1 color=\"lightgreen\">This is lightgreen.</H1>)\n```\n\n----------------------------------------\n\nTITLE: CSS Class Composition Example (JSX)\nDESCRIPTION: This snippet showcases style composition using regular CSS classes. It highlights the problems that can arise due to CSS cascade rules, where the order of class definitions determines style precedence. This example serves as a contrast to Emotion's approach, where style composition is more predictable and manageable.\nSOURCE: https://github.com/emotion-js/emotion/blob/main/docs/composition.mdx#_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nrender(\n  <div>\n    <style>\n      {`\n        .danger {\n          color: red;\n        }\n        .base {\n          background-color: lightgray;\n          color: turquoise;\n        }\n      `} >\n    </style>\n    <p className=\"base danger\">What color will this be?</p>\n  </div>\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Styled Components with @emotion/styled (Object Syntax)\nDESCRIPTION: This code snippet demonstrates how to create a styled component using @emotion/styled's object syntax. It creates a styled div with the color 'hotpink'.\nSOURCE: https://github.com/emotion-js/emotion/blob/main/packages/styled/README.md#_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\nimport styled from '@emotion/styled'\n\nlet SomeComp = styled.div({\n  color: 'hotpink'\n})\n\nlet AnotherComp = styled.div`\n  color: ${props => props.color};\n`\n\nrender(\n  <SomeComp>\n    <AnotherComp color=\"green\" />\n  </SomeComp>\n)\n```\n\n----------------------------------------\n\nTITLE: Theming with css prop in Emotion\nDESCRIPTION: This snippet demonstrates how to use the ThemeProvider component to provide a theme and access it within a div element using the css prop. It defines a simple theme with a primary color and applies it to the text color of the div.\nSOURCE: https://github.com/emotion-js/emotion/blob/main/docs/theming.mdx#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { ThemeProvider } from '@emotion/react'\n\nconst theme = {\n  colors: {\n    primary: 'hotpink'\n  }\n}\n\nrender(\n  <ThemeProvider theme={theme}>\n    <div css={theme => ({ color: theme.colors.primary })}>some other text</div>\n  </ThemeProvider>\n)\n```\n\n----------------------------------------\n\nTITLE: Defining a Theme Type in Emotion.js\nDESCRIPTION: This snippet demonstrates how to define a custom theme type in Emotion.js by augmenting the built-in `Theme` interface. This allows you to provide specific types for your theme properties, ensuring type safety when accessing theme values in your styled components.\nSOURCE: https://github.com/emotion-js/emotion/blob/main/packages/styled/CHANGELOG.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport '@emotion/react'\n\ndeclare module '@emotion/react' {\n  export interface Theme {\n    primaryColor: string\n    secondaryColor: string\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using @emotion/css\nDESCRIPTION: This code snippet demonstrates how to use the `css` function from `@emotion/css` to define styles directly within JavaScript. It showcases features like nested selectors and variable interpolation, and renders a styled div element.\nSOURCE: https://github.com/emotion-js/emotion/blob/main/docs/introduction.mdx#_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n// @live\nimport { css } from '@emotion/css'\n\nconst color = 'white'\n\nrender(\n  <div\n    className={css`\n      padding: 32px;\n      background-color: hotpink;\n      font-size: 24px;\n      border-radius: 4px;\n      &:hover {\n        color: ${color};\n      }\n    `}\n  >\n    Hover to change color.\n  </div>\n)\n```\n\n----------------------------------------\n\nTITLE: Applying CSS to Multiple Elements with Emotion in Typescript\nDESCRIPTION: This code demonstrates how to apply CSS styles to a large number of elements using Emotion. Instead of applying the `css` prop to each individual element, it applies the styles to a parent element using a CSS selector, which improves performance by reducing the number of Emotion component instances.\nSOURCE: https://github.com/emotion-js/emotion/blob/main/docs/performance.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nrender(\n  <div\n    css={{\n      '.my-component': { color: 'red' }\n    }}\n  >\n    {/* render the 10,000 instances of MyComponent here */}\n  </div>\n)\n```\n\n----------------------------------------\n\nTITLE: Styling HTML Element with @emotion/styled in TSX\nDESCRIPTION: This example demonstrates how to style an HTML element using `@emotion/styled`. It defines a styled `a` tag (Link) and a styled `svg` tag (Icon) with specified CSS properties using template literals. The example then renders the styled Link component.\nSOURCE: https://github.com/emotion-js/emotion/blob/main/docs/typescript.mdx#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport styled from '@emotion/styled'\n\nconst Link = styled('a')`\n  color: red;\n`\n\nconst Icon = styled('svg')`\n  stroke: green;\n`\n\nconst App = () => <Link href=\"#\">Click me</Link>\n```\n\n----------------------------------------\n\nTITLE: Forwarding Props with shouldForwardProp in @emotion/styled\nDESCRIPTION: This code demonstrates how to use the `shouldForwardProp` option in `@emotion/styled` to filter which props are passed to the wrapped component. It includes how to filter prop2 by only forwarding prop1 and how to make `shouldForwardProp` a type guard. The interface `StyledOriginalExtraProps` adds props that might conflict with the original component's.\nSOURCE: https://github.com/emotion-js/emotion/blob/main/docs/typescript.mdx#_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nconst Original: React.FC<{ prop1: string; prop2: string }> = () => null\n\ninterface StyledOriginalExtraProps {\n  // This prop would conflict with the `prop2` on Original\n  prop2: number\n}\nconst StyledOriginal = styled(Original, {\n  // Filter prop2 by only forwarding prop1\n  shouldForwardProp: (propName): propName is 'prop1' => propName === 'prop1'\n})<StyledOriginalExtraProps>(props => {\n  // props.prop2 will be `number`\n  return {}\n})\n\n// No more type conflict error\n;<StyledOriginal prop1=\"1\" prop2={2} />\n```\n\n----------------------------------------\n\nTITLE: Animation Keyframes with String Styles\nDESCRIPTION: This code shows how to use the `keyframes` function to define an animation and apply it to an element using the `css` function with string styles.  It uses template literals to define the animation keyframes.\nSOURCE: https://github.com/emotion-js/emotion/blob/main/packages/css/README.md#_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\n// @live\nimport { css, keyframes } from '@emotion/css'\n\nconst bounce = keyframes`\n  from, 20%, 53%, 80%, to {\n    transform: translate3d(0,0,0);\n  }\n\n  40%, 43% {\n    transform: translate3d(0, -30px, 0);\n  }\n\n  70% {\n    transform: translate3d(0, -15px, 0);\n  }\n\n  90% {\n    transform: translate3d(0,-4px,0);\n  }\n`\n\nrender(\n  <img\n    className={css`\n      width: 96px;\n      height: 96px;\n      border-radius: 50%;\n      animation: ${bounce} 1s ease infinite;\n      transform-origin: center bottom;\n    `}\n    src={logoUrl}\n  />\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing Media Queries with Emotion.js\nDESCRIPTION: This snippet illustrates how to implement media queries in Emotion.js using object styles. The styles for different screen sizes are defined within the @media rule.\nSOURCE: https://github.com/emotion-js/emotion/blob/main/docs/object-styles.mdx#_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nrender(\n  <div\n    css={{\n      color: 'darkorchid',\n      '@media(min-width: 420px)': {\n        color: 'orange'\n      }\n    }}\n  >\n    This is orange on a big screen and darkorchid on a small screen.\n  </div>\n)\n```\n\n----------------------------------------\n\nTITLE: Setting CSS Variable with Style prop\nDESCRIPTION: Shows setting a CSS variable with the `style` prop on a div element. The `imageUrl` prop is assigned to the `--background-image` CSS variable.  The type assertion is necessary when using TypeScript.  This is used in conjunction with the previous avatar example.\nSOURCE: https://github.com/emotion-js/emotion/blob/main/docs/best-practices.mdx#_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nfunction Avatar({ imageUrl }) {\n  return <div className=\"avatar\" style={{ '--background-image': imageUrl }} />\n}\n```\n\n----------------------------------------\n\nTITLE: Updating imports for Emotion CSS\nDESCRIPTION: This snippet illustrates the necessary changes for importing the `css` function after the removal of the default export from `@emotion/css`.  It shows how to update the import statement to use a named import from `@emotion/react` or `@emotion/react/macro` instead.\nSOURCE: https://github.com/emotion-js/emotion/blob/main/packages/css/CHANGELOG.md#_snippet_1\n\nLANGUAGE: diff\nCODE:\n```\n-import css from '@emotion/css'\n+import { css } from '@emotion/react'\n\n// or\n-import css from '@emotion/css/macro'\n+import { css } from '@emotion/react/macro'\n```\n\n----------------------------------------\n\nTITLE: Styling with css prop using Emotion.js\nDESCRIPTION: This snippet demonstrates how to style a div element using the css prop in Emotion.js. The styles are defined as an object with camelCase properties, such as color and backgroundColor.\nSOURCE: https://github.com/emotion-js/emotion/blob/main/docs/object-styles.mdx#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nrender(\n  <div\n    css={{\n      color: 'darkorchid',\n      backgroundColor: 'lightgray'\n    }}\n  >\n    This is darkorchid.\n  </div>\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing Fallbacks with Emotion.js\nDESCRIPTION: This snippet shows how to define fallback values for browsers that don't support certain CSS features using arrays.\nSOURCE: https://github.com/emotion-js/emotion/blob/main/docs/object-styles.mdx#_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nrender(\n  <div\n    css={{\n      background: ['red', 'linear-gradient(#e66465, #9198e5)'],\n      height: 100\n    }}\n  >\n    This has a gradient background in browsers that support gradients and is red\n    in browsers that don't support gradients\n  </div>\n)\n```\n\n----------------------------------------\n\nTITLE: Animation Keyframes with Object Styles\nDESCRIPTION: This example demonstrates defining an animation using the `keyframes` function with JavaScript objects to define the keyframes. The animation is then applied using the `css` function with object styles.\nSOURCE: https://github.com/emotion-js/emotion/blob/main/packages/css/README.md#_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\n// @live\nimport { css, keyframes } from '@emotion/css'\n\nconst bounce = keyframes({\n  'from, 20%, 53%, 80%, to': {\n    transform: 'translate3d(0,0,0)'\n  },\n  '40%, 43%': {\n    transform: 'translate3d(0, -30px, 0)'\n  },\n  '70%': {\n    transform: 'translate3d(0, -15px, 0)'\n  },\n  '90%': {\n    transform: 'translate3d(0, -4px, 0)'\n  }\n})\n\nrender(\n  <img\n    src={logoUrl}\n    className={css({\n      width: 96,\n      height: 96,\n      borderRadius: '50%',\n      animation: `${bounce} 1s ease infinite`,\n      transformOrigin: 'center bottom'\n    })}\n  />\n)\n```\n\n----------------------------------------\n\nTITLE: Correct Styled Import\nDESCRIPTION: This code snippet demonstrates the correct way to import styled components from '@emotion/styled'. This ensures that the styled components are imported from the correct module.\nSOURCE: https://github.com/emotion-js/emotion/blob/main/packages/eslint-plugin/docs/rules/styled-import.md#_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\nimport styled from '@emotion/styled'\n```\n\n----------------------------------------\n\nTITLE: React Component with css prop\nDESCRIPTION: A React component using the css prop for styling. This demonstrates how the css prop is used to define styles directly within the JSX.\nSOURCE: https://github.com/emotion-js/emotion/blob/main/packages/babel-preset-css-prop/README.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst Link = props => (\n  <a\n    css={{\n      color: 'hotpink',\n      '&:hover': {\n        color: 'darkorchid'\n      }\n    }}\n    {...props}\n  />\n)\n```\n\n----------------------------------------\n\nTITLE: Styling Primitives with @emotion/primitives\nDESCRIPTION: This code demonstrates how to use @emotion/primitives to style React primitives like View, Text, and Image. It imports necessary modules from '@emotion/primitives' and '@emotion/react', defines a theme, and uses styled components to create styled versions of the primitives. It uses ThemeProvider to apply the theme.\nSOURCE: https://github.com/emotion-js/emotion/blob/main/packages/primitives/README.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport React from 'react'\nimport styled, { css } from '@emotion/primitives'\n\nimport { ThemeProvider } from '@emotion/react'\n\nconst theme = {\n  color: 'hotpink',\n  backgroundColor: 'purple'\n}\n\nconst Container = styled.View`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  margin: 50px;\n  border: 5px solid red;\n  background-color: ${props => props.theme.backgroundColor};\n`\n\nconst Description = styled.Text({\n  color: 'hotpink'\n})\n\nconst Image = styled.Image`\n  padding: 40px;\n`\n\nconst emotionLogo = 'https://cdn.rawgit.com/emotion-js/emotion/main/emotion.png'\n\nclass App extends React.Component {\n  render() {\n    return (\n      <ThemeProvider theme={theme}>\n        <Container\n          style={css`\n            border-radius: 10px;\n          `}\n        >\n          <Description style={{ fontSize: 45, fontWeight: 'bold' }}>\n            Emotion Primitives\n          </Description>\n          <Image\n            source={{\n              uri: emotionLogo,\n              height: 150,\n              width: 150\n            }}\n          />\n        </Container>\n      </ThemeProvider>\n    )\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Composing dynamic styles in Emotion\nDESCRIPTION: This example demonstrates how to create dynamic styles based on props and use them within a styled component. It utilizes the `css` function from `@emotion/react` to define the dynamic styles.\nSOURCE: https://github.com/emotion-js/emotion/blob/main/docs/styled.mdx#_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\nimport styled from '@emotion/styled'\nimport { css } from '@emotion/react'\n\nconst dynamicStyle = props =>\n  css`\n    color: ${props.color};\n  `\n\nconst Container = styled.div`\n  ${dynamicStyle};\n`\nrender(<Container color=\"lightgreen\">This is lightgreen.</Container>)\n```\n\n----------------------------------------\n\nTITLE: Using css prop in React\nDESCRIPTION: Demonstrates how to use the css prop from @emotion/react to create and apply styles to React components. The css prop allows you to define styles directly within your JSX code.\nSOURCE: https://github.com/emotion-js/emotion/blob/main/docs/install.mdx#_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n// @live\nimport { css } from '@emotion/react'\n\nconst style = css`\n  color: hotpink;\n`\n\nconst SomeComponent = ({ children }) => (\n  <div css={style}>\n    Some hotpink text.\n    {children}\n  </div>\n)\n\nconst anotherStyle = css({\n  textDecoration: 'underline'\n})\n\nconst AnotherComponent = () => (\n  <div css={anotherStyle}>Some text with an underline.</div>\n)\nrender(\n  <SomeComponent>\n    <AnotherComponent />\n  </SomeComponent>\n)\n```\n\n----------------------------------------\n\nTITLE: Correct Styled Import (emotion)\nDESCRIPTION: This code snippet demonstrates the correct way to import `css`. It imports `css` from the `emotion` package which is the recommended practice in Emotion 10+. This avoids potential issues related to re-exports.\nSOURCE: https://github.com/emotion-js/emotion/blob/main/packages/eslint-plugin/docs/rules/import-from-emotion.md#_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\nimport { css } from 'emotion'\n```\n\n----------------------------------------\n\nTITLE: SSR with Emotion.js - Default Approach\nDESCRIPTION: This snippet demonstrates the default server-side rendering approach for Emotion.js 10 and above. It uses React's `renderToString` to render the application to a string. No additional configuration is required when only using `@emotion/react` and `@emotion/styled`.\nSOURCE: https://github.com/emotion-js/emotion/blob/main/docs/ssr.mdx#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { renderToString } from 'react-dom/server'\nimport App from './App'\n\nlet html = renderToString(<App />)\n```\n\n----------------------------------------\n\nTITLE: Install @emotion/styled with Yarn\nDESCRIPTION: Installs the @emotion/styled package using yarn. This package allows you to create styled components in React.\nSOURCE: https://github.com/emotion-js/emotion/blob/main/docs/install.mdx#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n# assuming you already have @emotion/react installed\nyarn add @emotion/styled\n```\n\n----------------------------------------\n\nTITLE: Customizing Emotion Cache with CacheProvider in React\nDESCRIPTION: This code snippet demonstrates how to customize the Emotion cache using `CacheProvider` from `@emotion/react`. It imports `CacheProvider`, `css`, and `createCache`.  It creates a custom cache instance with a specified key (`my-prefix-key`) and custom Stylis plugins. The `prefixer` plugin is manually included to ensure vendor prefixes are added. Finally, the React component is rendered wrapped within the `CacheProvider`, passing the customized cache as the value.\nSOURCE: https://github.com/emotion-js/emotion/blob/main/docs/cache-provider.mdx#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n// @live\nimport { CacheProvider, css } from '@emotion/react'\nimport createCache from '@emotion/cache'\nimport { prefixer } from 'stylis'\n\nconst customPlugin = () => {}\n\nconst myCache = createCache({\n  key: 'my-prefix-key',\n  stylisPlugins: [\n    customPlugin,\n    // has to be included manually when customizing `stylisPlugins` if you want\n    // to have vendor prefixes added automatically\n    prefixer\n  ]\n})\n\nrender(\n  <CacheProvider value={myCache}>\n    <div\n      css={css`\n        display: flex;\n      `}\n    >\n      <div\n        css={css`\n          flex: 1;\n          transform: scale(1.1);\n          color: hotpink;\n        `}\n      >\n        Some text\n      </div>\n    </div>\n  </CacheProvider>\n)\n```\n\n----------------------------------------\n\nTITLE: Using Arrays with Emotion.js\nDESCRIPTION: This example demonstrates how to use arrays of styles in Emotion.js. Nested arrays are automatically flattened.\nSOURCE: https://github.com/emotion-js/emotion/blob/main/docs/object-styles.mdx#_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nrender(\n  <div\n    css={[\n      { color: 'darkorchid' },\n      { backgroundColor: 'hotpink' },\n      { padding: 8 }\n    ]}\n  >\n    This is darkorchid with a hotpink background and 8px of padding.\n  </div>\n)\n```\n\n----------------------------------------\n\nTITLE: Applying Numbers with Emotion.js\nDESCRIPTION: This snippet shows how numbers are handled as CSS property values in Emotion.js. px is appended to the number unless it is a CSS property that is unitless.\nSOURCE: https://github.com/emotion-js/emotion/blob/main/docs/object-styles.mdx#_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nrender(\n  <div\n    css={{\n      padding: 8,\n      zIndex: 200\n    }}\n  >\n    This has 8px of padding and a z-index of 200.\n  </div>\n)\n```\n\n----------------------------------------\n\nTITLE: Updating Babel config with @emotion/babel-preset-css-prop\nDESCRIPTION: Shows the changes required in your Babel configuration to switch from using the @emotion/babel-plugin directly to using the @emotion/babel-preset-css-prop. It highlights the removal of the plugin entry and the inclusion of the preset entry, with options.\nSOURCE: https://github.com/emotion-js/emotion/blob/main/packages/babel-preset-css-prop/README.md#_snippet_2\n\nLANGUAGE: diff\nCODE:\n```\n{\n+ \"presets\": [\n+   [\n+     \"@emotion/babel-preset-css-prop\",\n+     {\n+       \"autoLabel\": \"dev-only\",\n+       \"labelFormat\": \"[local]\"\n+     }\n+   ]\n+ ],\n- \"plugins\": [\n-   [\n-     \"@emotion\",\n-     {\n-       \"autoLabel\": \"dev-only\",\n-       \"labelFormat\": \"[local]\"\n-     }\n-   ]\n- ]\n}\n```\n\n----------------------------------------\n\nTITLE: Importing the jsx Function\nDESCRIPTION: Imports the `jsx` function from the `@emotion/react` package, which is necessary when using the JSX pragma or JSX Import Source. This function is used to transform JSX elements into Emotion-aware React elements.\nSOURCE: https://github.com/emotion-js/emotion/blob/main/docs/css-prop.mdx#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n/** @jsx jsx */\nimport { jsx } from '@emotion/react'\n```\n\n----------------------------------------\n\nTITLE: Extract Critical CSS - Emotion.js\nDESCRIPTION: This snippet demonstrates the use of `extractCritical` API. It extracts the Emotion rules that are actually used in the rendered HTML, along with global rules.  It returns an object with properties `html`, `ids`, and `css`.\nSOURCE: https://github.com/emotion-js/emotion/blob/main/docs/ssr.mdx#_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\nimport { renderToString } from 'react-dom/server'\nimport { extractCritical } from '@emotion/server'\nimport App from './App'\n\nconst { html, ids, css } = extractCritical(renderToString(<App />))\n```\n\n----------------------------------------\n\nTITLE: Multiple Instances in a Single App\nDESCRIPTION: This example demonstrates how to create multiple instances of Emotion in a single application.  This requires setting a unique `key` option for each instance to avoid conflicts. This is necessary to avoid style collisions and specificity issues when working with components styled with different emotion instances.\nSOURCE: https://github.com/emotion-js/emotion/blob/main/packages/css/README.md#_snippet_12\n\nLANGUAGE: jsx\nCODE:\n```\nimport createEmotion from '@emotion/css/create-instance'\n\nexport const {\n  flush,\n  hydrate,\n  cx,\n  merge,\n  getRegisteredStyles,\n  injectGlobal,\n  keyframes,\n  css,\n  sheet,\n  cache\n} = createEmotion({\n  // The key option is required when there will be multiple instances in a single app\n  key: 'some-key'\n})\n```\n\n----------------------------------------\n\nTITLE: Styling with Nested Element Selector in Emotion CSS (JSX)\nDESCRIPTION: This snippet shows how to style an element, in this case, a paragraph (`<p>`), using Emotion CSS and nesting an element selector (`a`) within the `css` template literal to target a specific element (an anchor tag `<a>`) inside the paragraph and apply specific styles to it. It uses `@emotion/react` for the `css` function and the `render` function to display the resulting component.\nSOURCE: https://github.com/emotion-js/emotion/blob/main/docs/nested.mdx#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { css } from '@emotion/react'\n\nconst paragraph = css`\n  color: turquoise;\n\n  a {\n    border-bottom: 1px solid currentColor;\n    cursor: pointer;\n  }\n`\nrender(\n  <p css={paragraph}>\n    Some text. <a>A link with a bottom border.</a>\n  </p>\n)\n```\n\n----------------------------------------\n\nTITLE: Using css helper with Emotion.js\nDESCRIPTION: This example demonstrates the usage of the `css` helper function from `@emotion/react` to define reusable styles. It then applies these styles to a paragraph element.\nSOURCE: https://github.com/emotion-js/emotion/blob/main/docs/object-styles.mdx#_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\nimport { css } from '@emotion/react'\n\nconst hotpink = css({\n  color: 'hotpink'\n})\n\nrender(\n  <div>\n    <p css={hotpink}>This is hotpink</p>\n  </div>\n)\n```\n\n----------------------------------------\n\nTITLE: SSR with Emotion.js - Advanced Approach (@emotion/css)\nDESCRIPTION: This snippet demonstrates the advanced server-side rendering approach for Emotion.js when using `@emotion/css`. It involves creating a cache, extracting critical CSS, and injecting the CSS into the HTML. This requires creating a custom cache and using `extractCritical`.\nSOURCE: https://github.com/emotion-js/emotion/blob/main/docs/ssr.mdx#_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport { CacheProvider } from '@emotion/react'\nimport { renderToString } from 'react-dom/server'\nimport createEmotionServer from '@emotion/server/create-instance'\nimport createCache from '@emotion/cache'\n\nconst key = 'custom'\nconst cache = createCache({ key })\nconst { extractCritical } = createEmotionServer(cache)\n\nlet element = (\n  <CacheProvider value={cache}>\n    <App />\n  </CacheProvider>\n)\n\nlet { html, css, ids } = extractCritical(renderToString(element))\n\nres\n  .status(200)\n  .header('Content-Type', 'text/html')\n  .send(`<!DOCTYPE html>\\n<html lang=\"en\">\\n<head>\\n    <meta charset=\"UTF-8\">\\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\\n    <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\\n    <title>My site</title>\\n    <style data-emotion=\"${key} ${ids.join(' ')}\">${css}</style>\\n</head>\\n<body>\\n    <div id=\"root\">${html}</div>\\n\n    <script src=\"./bundle.js\"></script>\\n</body>\\n</html>`);\n```\n\n----------------------------------------\n\nTITLE: Styling custom React components with Emotion styled\nDESCRIPTION: This example demonstrates how to style a custom React component using `@emotion/styled`. The custom component must accept a `className` prop which is then used by the styled component to apply the styles.\nSOURCE: https://github.com/emotion-js/emotion/blob/main/docs/styled.mdx#_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport styled from '@emotion/styled'\n\nconst Basic = ({ className }) => <div className={className}>Some text</div>\n\nconst Fancy = styled(Basic)`\n  color: hotpink;\n`\n\nrender(<Fancy />)\n```\n\n----------------------------------------\n\nTITLE: Defining styles outside components in Emotion\nDESCRIPTION: Demonstrates defining styles outside React components with Emotion.  Styles are defined as JavaScript objects and then used in the component via the `css` prop. This approach improves performance by serializing styles only once and enhances code readability.\nSOURCE: https://github.com/emotion-js/emotion/blob/main/docs/best-practices.mdx#_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\nimport { css } from '@emotion/react'\n\nconst cardCss = {\n  self: css({\n    backgroundColor: 'white',\n    border: '1px solid #eee',\n    borderRadius: '0.5rem',\n    padding: '1rem'\n  }),\n\n  title: css({\n    fontSize: '1.25rem'\n  })\n}\n\nexport function Card({ title, children }) {\n  return (\n    <div css={cardCss.self}>\n      <h5 css={cardCss.title}>{title}</h5>\n      {children}\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Render Styles to String - Emotion.js\nDESCRIPTION: This snippet demonstrates the `renderStylesToString` API. It returns a string of HTML that inlines the critical CSS required right before it's used.  It should be called with the rendered string of the React component.\nSOURCE: https://github.com/emotion-js/emotion/blob/main/docs/ssr.mdx#_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nimport { renderToString } from 'react-dom/server'\nimport { renderStylesToString } from '@emotion/server'\nimport App from './App'\n\nconst html = renderStylesToString(renderToString(<App />))\n```\n\n----------------------------------------\n\nTITLE: Theme Type Augmentation in Emotion.js with TypeScript\nDESCRIPTION: This code snippet demonstrates how to augment the built-in `Theme` interface in `@emotion/react` to provide a type for your theme. It allows you to define custom properties for the theme, such as `primaryColor` and `secondaryColor`, which can then be used throughout your Emotion components.\nSOURCE: https://github.com/emotion-js/emotion/blob/main/packages/react/CHANGELOG.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport '@emotion/react'\n\ndeclare module '@emotion/react' {\n  export interface Theme {\n    primaryColor: string\n    secondaryColor: string\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: SSR with Emotion.js - Advanced Approach (@emotion/react)\nDESCRIPTION: This snippet demonstrates the advanced server-side rendering approach for Emotion.js using `@emotion/react`. It involves creating a cache, extracting critical CSS, and constructing style tags to avoid limitations with nth child selectors. It requires setting up a custom cache and using `extractCriticalToChunks` and `constructStyleTagsFromChunks`.\nSOURCE: https://github.com/emotion-js/emotion/blob/main/docs/ssr.mdx#_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport { CacheProvider } from '@emotion/react'\nimport { renderToString } from 'react-dom/server'\nimport createEmotionServer from '@emotion/server/create-instance'\nimport createCache from '@emotion/cache'\n\nconst key = 'custom'\nconst cache = createCache({ key })\nconst { extractCriticalToChunks, constructStyleTagsFromChunks } = createEmotionServer(cache)\n\nconst html = renderToString(\n  <CacheProvider value={cache}>\n    <App />\n  </CacheProvider>\n)\n\nconst chunks = extractCriticalToChunks(html)\nconst styles = constructStyleTagsFromChunks(chunks)\n\nres\n  .status(200)\n  .header('Content-Type', 'text/html')\n  .send(`<!DOCTYPE html>\\n<html lang=\"en\">\\n<head>\\n    <meta charset=\"UTF-8\">\\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\\n    <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\\n    <title>My site</title>\\n    ${styles}\\n</head>\\n<body>\\n    <div id=\"root\">${html}</div>\\n\n    <script src=\"./bundle.js\"></script>\\n</body>\\n</html>`);\n```\n\n----------------------------------------\n\nTITLE: Babel configuration with options\nDESCRIPTION: Example `.babelrc` configuration demonstrating how to use `@emotion/babel-plugin` with various options like `sourceMap`, `autoLabel`, `labelFormat`, and `cssPropOptimization`.\nSOURCE: https://github.com/emotion-js/emotion/blob/main/packages/babel-plugin/README.md#_snippet_4\n\nLANGUAGE: js\nCODE:\n```\n{\n  \"plugins\": [\n    [\n      \"@emotion\",\n      {\n        // sourceMap is on by default but source maps are dead code eliminated in production\n        \"sourceMap\": true,\n        \"autoLabel\": \"dev-only\",\n        \"labelFormat\": \"[local]\",\n        \"cssPropOptimization\": true\n      }\n    ]\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Hydrate CSS - Emotion.js\nDESCRIPTION: This snippet shows how to call `hydrate` on the client side with the `ids` returned by `extractCritical`.  Calling `hydrate` prevents Emotion from reinserting all the rules.\nSOURCE: https://github.com/emotion-js/emotion/blob/main/docs/ssr.mdx#_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\nimport { hydrate } from '@emotion/css'\n\nhydrate(ids)\n```\n\n----------------------------------------\n\nTITLE: Using ClassNames to Create CSS Class Names in React\nDESCRIPTION: This snippet shows how to utilize the `ClassNames` render prop to dynamically generate CSS class names using the `css` function from `@emotion/react`. It demonstrates applying different styles to a component's wrapper and inner elements via `wrapperClassName` and `className` props.\nSOURCE: https://github.com/emotion-js/emotion/blob/main/docs/class-names.mdx#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n// @live\nimport { ClassNames } from '@emotion/react'\n\n// this might be a component from npm that accepts a wrapperClassName prop\nlet SomeComponent = props => (\n  <div className={props.wrapperClassName}>\n    in the wrapper!\n    <div className={props.className}>{props.children}</div>\n  </div>\n)\n\nrender(\n  <ClassNames>\n    {({ css, cx }) => (\n      <SomeComponent\n        wrapperClassName={css({ color: 'green' })}\n        className={css`\n          color: hotpink;\n        `}\n      >\n        from children!!\n      </SomeComponent>\n    )}\n  </ClassNames>\n)\n```\n\n----------------------------------------\n\nTITLE: Emotion CSS macro imports\nDESCRIPTION: Imports required to use emotion with `babel-plugin-macros`\nSOURCE: https://github.com/emotion-js/emotion/blob/main/packages/babel-plugin/README.md#_snippet_11\n\nLANGUAGE: jsx\nCODE:\n```\nimport {\n  css,\n  keyframes,\n  injectGlobal,\n  flush,\n  hydrate\n} from '@emotion/css/macro'\nimport { jsx, css, Global, keyframes } from '@emotion/react/macro'\nimport styled from '@emotion/styled/macro'\n```\n\n----------------------------------------\n\nTITLE: Import CSS prop type definition - TypeScript\nDESCRIPTION: This TypeScript snippet imports the necessary type definitions to enable support for the `css` prop globally for all components. This is needed when not using Emotion's JSX pragma implicitly (e.g., via `@emotion/babel-preset-css-prop`).\nSOURCE: https://github.com/emotion-js/emotion/blob/main/packages/react/CHANGELOG.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport {} from '@emotion/react/types/css-prop'\n```\n\n----------------------------------------\n\nTITLE: Renaming Jest Emotion Package\nDESCRIPTION: This snippet illustrates the renaming of the 'jest-emotion' package to '@emotion/jest'.  It details the necessary changes to the snapshot serializer configuration in Jest, replacing '\"snapshotSerializers\": [\"jest-emotion\"]' with '\"snapshotSerializers\": [\"@emotion/jest\"]'. Additionally, it suggests using the '@emotion/pkg-renaming' ESLint rule to update import statements.\nSOURCE: https://github.com/emotion-js/emotion/blob/main/packages/jest/CHANGELOG.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\"snapshotSerializers\": [\"jest-emotion\"]}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\"snapshotSerializers\": [\"@emotion/jest\"]}\n```\n\n----------------------------------------\n\nTITLE: Adding Global CSS Prop Support with TypeScript\nDESCRIPTION: This code shows how to add global support for the `css` prop when not using our JSX pragma or the `react-jsx` transform. The specific file `@emotion/react/types/css-prop` can be referenced to add support for the `css` prop globally for all components.\nSOURCE: https://github.com/emotion-js/emotion/blob/main/docs/typescript.mdx#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n/// <reference types=\"@emotion/react/types/css-prop\" />\n```\n\n----------------------------------------\n\nTITLE: Install @emotion/react with npm\nDESCRIPTION: Installs the @emotion/react package using npm. This is an alternative to using yarn.\nSOURCE: https://github.com/emotion-js/emotion/blob/main/docs/install.mdx#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save @emotion/react\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Emotion Instance\nDESCRIPTION: This code shows how to create a custom instance of Emotion using `@emotion/css/create-instance`.  This allows for low-level customization of the Emotion cache and API.  It exports several functions and objects from the created instance.\nSOURCE: https://github.com/emotion-js/emotion/blob/main/packages/css/README.md#_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nimport createEmotion from '@emotion/css/create-instance'\n\nexport const {\n  flush,\n  hydrate,\n  cx,\n  merge,\n  getRegisteredStyles,\n  injectGlobal,\n  keyframes,\n  css,\n  sheet,\n  cache\n} = createEmotion()\n```\n\n----------------------------------------\n\nTITLE: Adding Emotion Serializer with createSerializer\nDESCRIPTION: This snippet demonstrates how to add the Emotion serializer using `expect.addSnapshotSerializer` and `createSerializer` from `@emotion/jest`. This allows Jest to serialize Emotion styles in snapshots, showing the CSS rules instead of the generated class names.\nSOURCE: https://github.com/emotion-js/emotion/blob/main/docs/testing.mdx#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createSerializer } from '@emotion/jest'\n\nexpect.addSnapshotSerializer(createSerializer())\n```\n\n----------------------------------------\n\nTITLE: Styled Component with Custom shouldForwardProp Type Guard (TypeScript)\nDESCRIPTION: This code snippet demonstrates how to use a custom type guard for the `shouldForwardProp` option in a styled component. This allows for fine-grained control over which props are passed to the underlying HTML element, enabling type-safe prop filtering.\nSOURCE: https://github.com/emotion-js/emotion/blob/main/packages/styled/CHANGELOG.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nexport const Box = styled('div', {\n  shouldForwardProp: (\n    propName\n  ): propName is Exclude<keyof JSX.IntrinsicElements['div'], 'color'> =>\n    propName !== 'color'\n})<{ color: Array<string> }>(props => ({\n  color: props.color[0]\n}))\n;<Box color={['green']} />\n```\n\n----------------------------------------\n\nTITLE: Babel Configuration Example with preset options\nDESCRIPTION: Shows how to configure the @emotion/babel-preset-css-prop with specific options, such as autoLabel, labelFormat, useBuiltIns, and throwIfNamespace. Options set to default values for demonstration purposes.\nSOURCE: https://github.com/emotion-js/emotion/blob/main/packages/babel-preset-css-prop/README.md#_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"presets\": [\n    [\n      \"@emotion/babel-preset-css-prop\",\n      {\n        \"autoLabel\": \"dev-only\",\n        \"labelFormat\": \"[local]\",\n        \"useBuiltIns\": false,\n        \"throwIfNamespace\": true\n      }\n    ]\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Jest Snapshot Serializers for Emotion\nDESCRIPTION: This JSON configuration adds `@emotion/jest/serializer` to the `snapshotSerializers` array in the Jest configuration. This allows Jest to serialize Emotion styles in snapshots, showing the CSS rules instead of the generated class names.\nSOURCE: https://github.com/emotion-js/emotion/blob/main/docs/testing.mdx#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"snapshotSerializers\": [\"@emotion/jest/serializer\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Theme Type Augmentation in Emotion with TypeScript\nDESCRIPTION: This code snippet demonstrates how to augment the built-in `Theme` interface in `@emotion/react` to provide custom types for the theme object. It allows defining custom properties like `primaryColor` and `secondaryColor` within the theme. It requires the `@emotion/react` package to be installed.\nSOURCE: https://github.com/emotion-js/emotion/blob/main/docs/emotion-11.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport '@emotion/react'\n\ndeclare module '@emotion/react' {\n  export interface Theme {\n    primaryColor: string\n    secondaryColor: string\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Change css usage to css prop\nDESCRIPTION: This code snippet shows how to change the usage of `css` from `emotion` to the `css` prop in Emotion 10.  This involves using the JSX pragma and importing `jsx` from `@emotion/core`.\nSOURCE: https://github.com/emotion-js/emotion/blob/main/docs/migrating-to-emotion-10.mdx#_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nimport { css } from 'emotion'\nlet element = (\n  <div\n    className={css`\n      color: hotpink;\n    `}\n  />\n)\n\n// ↓ ↓ ↓ ↓ ↓ ↓\n\n/** @jsx jsx */\nimport { jsx, css } from '@emotion/core'\n\nlet element = (\n  <div\n    css={css`\n      color: hotpink;\n    `}\n  />\n)\n```\n\n----------------------------------------\n\nTITLE: Babel Preset Configuration\nDESCRIPTION: Configures Babel to use the `@emotion/babel-preset-css-prop` preset, enabling the use of the `css` prop for styling React components. This preset automatically transforms the `css` prop into Emotion's internal representation.\nSOURCE: https://github.com/emotion-js/emotion/blob/main/docs/css-prop.mdx#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"presets\": [\"@emotion/babel-preset-css-prop\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Install @emotion/css with Yarn\nDESCRIPTION: Installs the @emotion/css package using yarn. This package is used for vanilla Emotion, if you are not using React.\nSOURCE: https://github.com/emotion-js/emotion/blob/main/docs/install.mdx#_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @emotion/css\n```\n\n----------------------------------------\n\nTITLE: Updating Jest Snapshot Serializer\nDESCRIPTION: This snippet demonstrates how to update the Jest snapshot serializer configuration when upgrading to a newer version of @emotion/jest. It involves replacing the old 'jest-emotion' with '@emotion/jest/serializer'.\nSOURCE: https://github.com/emotion-js/emotion/blob/main/packages/jest/CHANGELOG.md#_snippet_0\n\nLANGUAGE: none\nCODE:\n```\n\"snapshotSerializers\": [\"jest-emotion\"]\n\"snapshotSerializers\": [\"@emotion/jest/serializer\"]\n```\n\n----------------------------------------\n\nTITLE: Using @emotion/css in Vanilla JavaScript\nDESCRIPTION: Demonstrates how to use @emotion/css in a vanilla JavaScript environment. This involves importing the css function and using it to create CSS class names that can be added to HTML elements.\nSOURCE: https://github.com/emotion-js/emotion/blob/main/docs/install.mdx#_snippet_11\n\nLANGUAGE: jsx\nCODE:\n```\nimport { css } from '@emotion/css'\n\nconst app = document.getElementById('root')\nconst myClassName = css`\n  color: hotpink;\n`\napp.classList.add(myClassName)\n```\n\n----------------------------------------\n\nTITLE: Installing facepaint\nDESCRIPTION: Commands to install facepaint, a library that simplifies responsive styling with Emotion.js. It shows how to install facepaint using either yarn or npm.\nSOURCE: https://github.com/emotion-js/emotion/blob/main/docs/media-queries.mdx#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nyarn add facepaint\n# or if you use npm\nnpm install --save facepaint\n```\n\n----------------------------------------\n\nTITLE: Gatsby SSR Wrap Root Element\nDESCRIPTION: Snippet shows how to wrap the root element in `gatsby-ssr.js` with the `CacheProvider` and a newly created cache.\nSOURCE: https://github.com/emotion-js/emotion/blob/main/docs/ssr.mdx#_snippet_12\n\nLANGUAGE: jsx\nCODE:\n```\nimport { CacheProvider } from '@emotion/react'\n\nimport { createMyCache } from './create-emotion-cache'\n\nexport const wrapRootElement = ({ element }) => (\n  <CacheProvider value={createMyCache()}>{element}</CacheProvider>\n)\n```\n\n----------------------------------------\n\nTITLE: Reusable Media Queries with Emotion in JSX\nDESCRIPTION: This example defines reusable media query constants for breakpoints and applies them to style different elements using both object styles and the `css` prop. This approach promotes consistency and reduces code duplication.\nSOURCE: https://github.com/emotion-js/emotion/blob/main/docs/media-queries.mdx#_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { css } from '@emotion/react'\n\nconst breakpoints = [576, 768, 992, 1200]\n\nconst mq = breakpoints.map(bp => `@media (min-width: ${bp}px)`)\n\nrender(\n  <div>\n    <div\n      css={{\n        color: 'green',\n        [mq[0]]: {\n          color: 'gray'\n        },\n        [mq[1]]: {\n          color: 'hotpink'\n        }\n      }}\n    >\n      Some text!\n    </div>\n    <p\n      css={css`\n        color: green;\n        ${mq[0]} {\n          color: gray;\n        }\n        ${mq[1]} {\n          color: hotpink;\n        }\n      `}\n    >\n      Some other text!\n    </p>\n  </div>\n)\n```\n\n----------------------------------------\n\nTITLE: Replace injectGlobal with Global styles\nDESCRIPTION: This code snippet shows how to replace `injectGlobal` from `emotion` with the `Global` component from `@emotion/core`.  Styles are now passed to the `styles` prop of the `Global` component as a `css` tagged template literal.\nSOURCE: https://github.com/emotion-js/emotion/blob/main/docs/migrating-to-emotion-10.mdx#_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\nimport { injectGlobal } from 'emotion'\n\ninjectGlobal`\n  * {\n    box-sizing: border-box;\n  }\n`\n\n// ↓ ↓ ↓ ↓ ↓ ↓\n\nimport { Global, css } from '@emotion/core'\n\n;<Global\n  styles={css`\n    * {\n      box-sizing: border-box;\n    }\n  `}\n/>\n```\n\n----------------------------------------\n\nTITLE: Enable Emotion 10 codemod rules\nDESCRIPTION: Configures the ESLint configuration file (.eslintrc) to enable a set of rules related to codemods for Emotion 10. These rules include jsx-import, no-vanilla, import-from-emotion, and styled-import. These rules can help with migration and enforce best practices when using Emotion.\nSOURCE: https://github.com/emotion-js/emotion/blob/main/packages/eslint-plugin/README.md#_snippet_5\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"rules\": {\n    \"@emotion/jsx-import\": \"error\",\n    \"@emotion/no-vanilla\": \"error\",\n    \"@emotion/import-from-emotion\": \"error\",\n    \"@emotion/styled-import\": \"error\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Correct JSX example with @emotion/react import\nDESCRIPTION: This example shows the correct way to use Emotion with JSX by importing `jsx` from `@emotion/react`.  The `/** @jsx jsx */` pragma is also included to tell the JSX transpiler to use the imported `jsx` function.\nSOURCE: https://github.com/emotion-js/emotion/blob/main/packages/eslint-plugin/docs/rules/jsx-import.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n/** @jsx jsx */\nimport { jsx } from '@emotion/react'\n\nlet element = (\n  <div\n    css={{\n      color: 'green'\n    }}\n  />\n)\n```\n\n----------------------------------------\n\nTITLE: Basic StyleSheet Usage with @emotion/sheet\nDESCRIPTION: This example demonstrates how to create a StyleSheet instance and insert a CSS rule. It initializes a StyleSheet with a key and container (document head), then inserts a CSS rule that changes the text color of the html element.\nSOURCE: https://github.com/emotion-js/emotion/blob/main/packages/sheet/README.md#_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { StyleSheet } from '@emotion/sheet'\n\nconst sheet = new StyleSheet({ key: '', container: document.head })\n\nsheet.insert('html { color: hotpink; }')\n```\n\n----------------------------------------\n\nTITLE: Using toHaveStyleRule Matcher\nDESCRIPTION: Shows how to use the toHaveStyleRule matcher provided by @emotion/jest for asserting specific styles on components. Includes extending Jest's expect with the custom matchers.\nSOURCE: https://github.com/emotion-js/emotion/blob/main/packages/jest/README.md#_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react'\nimport renderer from 'react-test-renderer'\nimport { matchers } from '@emotion/jest'\nimport styled from '@emotion/styled'\n\n// Add the custom matchers provided by '@emotion/jest'\nexpect.extend(matchers)\n\ntest('renders with correct styles', () => {\n  const Svg = styled('svg')`\n    width: 100%;\n  `\n\n  const Div = styled('div')`\n    float: left;\n    height: 80%;\n    &:hover {\n      width: 50px;\n    }\n    ${Svg} {\n      fill: green;\n    }\n    span {\n      color: yellow;\n    }\n    @media screen and (max-width: 1200px) {\n      font-size: 14px;\n    }\n  `\n\n  const tree = renderer\n    .create(\n      <Div>\n        <Svg />\n        <span>Test</span>\n      </Div>\n    )\n    .toJSON()\n\n  expect(tree).toHaveStyleRule('float', 'left')\n  expect(tree).not.toHaveStyleRule('height', '100%')\n})\n```\n\n----------------------------------------\n\nTITLE: Recommended Babel configuration\nDESCRIPTION: Recommended `.babelrc` configuration for using `@emotion/babel-plugin`.\nSOURCE: https://github.com/emotion-js/emotion/blob/main/packages/babel-plugin/README.md#_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"plugins\": [\"@emotion\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Using withTheme Higher-Order Component\nDESCRIPTION: This snippet demonstrates the usage of `withTheme` higher-order component to inject the current theme as a prop into a wrapped component. The `TellMeTheColor` component receives the theme via props and renders the color value.\nSOURCE: https://github.com/emotion-js/emotion/blob/main/docs/theming.mdx#_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport * as PropTypes from 'prop-types'\nimport * as React from 'react'\nimport { withTheme } from '@emotion/react'\n\nclass TellMeTheColor extends React.Component {\n  render() {\n    return <div>The color is {this.props.theme.color}.</div>\n  }\n}\n\nTellMeTheColor.propTypes = {\n  theme: PropTypes.shape({\n    color: PropTypes.string\n  })\n}\n\nconst TellMeTheColorWithTheme = withTheme(TellMeTheColor)\n```\n\n----------------------------------------\n\nTITLE: Global Styles with injectGlobal\nDESCRIPTION: This code demonstrates how to use the `injectGlobal` function to inject styles into the global scope. It includes examples of CSS resets and font faces.\nSOURCE: https://github.com/emotion-js/emotion/blob/main/packages/css/README.md#_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nimport { injectGlobal } from '@emotion/css'\n\ninjectGlobal`\n  * {\n    box-sizing: border-box;\n  }\n  @font-face {\n    font-family: 'Patrick Hand SC';\n    font-style: normal;\n    font-weight: 400;\n    src: local('Patrick Hand SC'),\n      local('PatrickHandSC-Regular'),\n      url(https://fonts.gstatic.com/s/patrickhandsc/v4/OYFWCgfCR-7uHIovjUZXsZ71Uis0Qeb9Gqo8IZV7ckE.woff2)\n        format('woff2');\n    unicode-range: U+0100-024f, U+1-1eff,\n      U+20a0-20ab, U+20ad-20cf, U+2c60-2c7f,\n      U+A720-A7FF;\n  }\n`\n```\n\n----------------------------------------\n\nTITLE: SSR with Emotion.js - Styled Component Example\nDESCRIPTION: This snippet shows an example of how styled components render within the default SSR approach. A `<style>` tag is inserted above the element with styles. Note that this approach can interfere with nth child and similar selectors.\nSOURCE: https://github.com/emotion-js/emotion/blob/main/docs/ssr.mdx#_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nconst MyDiv = styled('div')({ fontSize: 12 })\n<MyDiv>Text</MyDiv>\n// Will render as\n<style data-emotion-css=\"21cs4\">.css-21cs4 { font-size: 12 }</style>\n<div class=\"css-21cs4\">Text</div>\n```\n\n----------------------------------------\n\nTITLE: Configure ESLint plugins\nDESCRIPTION: Configures the ESLint configuration file (.eslintrc) to include the @emotion plugin. This enables the use of Emotion-specific ESLint rules.\nSOURCE: https://github.com/emotion-js/emotion/blob/main/packages/eslint-plugin/README.md#_snippet_2\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"plugins\": [\"@emotion\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Attaching Props to React Components with Emotion CSS\nDESCRIPTION: This snippet demonstrates attaching props to a React component using Emotion's `css` prop. It defines a `RedPasswordInput` component with default red background and allows overriding the style with a `pinkInput` css variable passed as a prop. The example highlights how to manage component styling with props.\nSOURCE: https://github.com/emotion-js/emotion/blob/main/docs/with-props.mdx#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n// @live\nimport { css } from '@emotion/react'\n\nconst pinkInput = css`\n  background-color: pink;\n`\nconst RedPasswordInput = props => (\n  <input\n    type=\"password\"\n    css={css`\n      background-color: red;\n      display: block;\n    `}\n    {...props}\n  />\n)\n\nrender(\n  <div>\n    <RedPasswordInput placeholder=\"red\" />\n    <RedPasswordInput placeholder=\"pink\" css={pinkInput} />\n  </div>\n)\n```\n\n----------------------------------------\n\nTITLE: Migrating from fontFace to injectGlobal in Emotion.js\nDESCRIPTION: This code snippet demonstrates how to replace the deprecated `fontFace` API with `injectGlobal` for inserting font faces in Emotion.js. It shows the changes needed to define font faces using a standard CSS `@font-face` rule within the `injectGlobal` template literal.\nSOURCE: https://github.com/emotion-js/emotion/blob/main/CHANGELOG.md#_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n-import { fontFace } from 'emotion'\n+import { injectGlobal } from 'emotion'\n\n-fontFace`\n-  font-family: 'Oxygen';\n-  font-style: normal;\n-  font-weight: 400;\n-  src: local('Oxygen Regular'), local('Oxygen-Regular'),\n-    url(https://fonts.gstatic.com/s/oxygen/v6/qBSyz106i5ud7wkBU-FrPevvDin1pK8aKteLpeZ5c0A.woff2)\n-      format('woff2');\n-  unicode-range: U+0000-00ff, U+0131, U+0152-0153, U+02c6, U+02da, U+02dc,\n-    U+2000-206f, U+2074, U+20ac, U+2212, U+2215;\n-`\n+injectGlobal`\n+  @font-face {\n+    font-family: 'Oxygen';\n+    font-style: normal;\n+    font-weight: 400;\n+    src: local('Oxygen Regular'), local('Oxygen-Regular'),\n+      url(https://fonts.gstatic.com/s/oxygen/v6/qBSyz106i5ud7wkBU-FrPevvDin1pK8aKteLpeZ5c0A.woff2)\n+        format('woff2');\n+    unicode-range: U+0000-00ff, U+0131, U+0152-0153, U+02c6, U+02da, U+02dc,\n+      U+2000-206f, U+2074, U+20ac, U+2212, U+2215;\n+  }\n+`\n```\n\n----------------------------------------\n\nTITLE: JSX Pragma Declaration\nDESCRIPTION: Declares the JSX pragma to use Emotion's `jsx` function instead of `React.createElement`.  This is placed at the top of a file to instruct Babel how to transform JSX elements.\nSOURCE: https://github.com/emotion-js/emotion/blob/main/docs/css-prop.mdx#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n/** @jsx jsx */\n```\n\n----------------------------------------\n\nTITLE: Configuring Babel with @emotion/babel-preset-css-prop\nDESCRIPTION: Example configuration for .babelrc to use the @emotion/babel-preset-css-prop. This will automatically enable Emotion's css prop for all JSX in the project.\nSOURCE: https://github.com/emotion-js/emotion/blob/main/packages/babel-preset-css-prop/README.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"presets\": [\"@emotion/babel-preset-css-prop\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Add compat cache with CacheProvider\nDESCRIPTION: This code snippet shows how to add a compatibility cache using the `CacheProvider` from `@emotion/core`. This is necessary if you're still using `css`, `keyframes`, or `injectGlobal` from `emotion`. This is a manual step.\nSOURCE: https://github.com/emotion-js/emotion/blob/main/docs/migrating-to-emotion-10.mdx#_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nimport { render } from 'react-dom'\nimport App from './App'\nimport { cache } from 'emotion'\nimport { CacheProvider } from '@emotion/core'\n\nrender(\n  <CacheProvider value={cache}>\n    <App />\n  </CacheProvider>,\n  rootNode\n)\n```\n\n----------------------------------------\n\nTITLE: CSS labelFormat example\nDESCRIPTION: An example demonstrating the `labelFormat` option of `@emotion/babel-plugin`. It allows defining the format of the resulting label.\nSOURCE: https://github.com/emotion-js/emotion/blob/main/packages/babel-plugin/README.md#_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n// BrownView.js\n// autoLabel: 'dev-only'\n// labelFormat: '[filename]--[local]'\nconst brownStyles = css({ color: 'brown' })\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst brownStyles = /*#__PURE__*/ css(\n  { color: 'brown' },\n  'label:BrownView--brownStyles;'\n)\n```\n\n----------------------------------------\n\nTITLE: Nested ThemeProvider example\nDESCRIPTION: Demonstrates how to nest ThemeProvider components to override theme values deeper in the component tree. It uses both object-style and function-style themes to illustrate how themes can be merged or dynamically adjusted based on the ancestor theme.\nSOURCE: https://github.com/emotion-js/emotion/blob/main/docs/theming.mdx#_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport * as React from 'react'\nimport styled from '@emotion/styled'\nimport { ThemeProvider, withTheme } from '@emotion/react'\n\n// object-style theme\n\nconst theme = {\n  backgroundColor: 'green',\n  color: 'red'\n}\n\n// function-style theme; note that if multiple <ThemeProvider> are used,\n// the parent theme will be passed as a function argument\n\nconst adjustedTheme = ancestorTheme => ({ ...ancestorTheme, color: 'blue' })\n\nclass Container extends React.Component {\n  render() {\n    return (\n      <ThemeProvider theme={theme}>\n        <ThemeProvider theme={adjustedTheme}>\n          <Text>Boom shaka laka!</Text>\n        </ThemeProvider>\n      </ThemeProvider>\n    )\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installation with npm\nDESCRIPTION: Command to install `@emotion/babel-plugin` as a development dependency using npm.\nSOURCE: https://github.com/emotion-js/emotion/blob/main/packages/babel-plugin/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save-dev @emotion/babel-plugin\n```\n\n----------------------------------------\n\nTITLE: Emotion Cache Creation - Gatsby\nDESCRIPTION: Snippet shows how to create a custom emotion cache for Gatsby.\nSOURCE: https://github.com/emotion-js/emotion/blob/main/docs/ssr.mdx#_snippet_11\n\nLANGUAGE: jsx\nCODE:\n```\nimport createCache from '@emotion/cache'\n\nexport const createMyCache = () =>\n  createCache({\n    key: 'my-prefix-key',\n    stylisPlugins: [\n      /* your plugins here */\n    ],\n  })\n\nexport const myCache = createMyCache()\n```\n\n----------------------------------------\n\nTITLE: Render Styles to Node Stream - Emotion.js\nDESCRIPTION: This snippet shows the use of `renderStylesToNodeStream` API. It returns a Node Stream Writable that can be used to insert critical CSS right before it's required.  This is useful with React's streaming API.\nSOURCE: https://github.com/emotion-js/emotion/blob/main/docs/ssr.mdx#_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nimport { renderToNodeStream } from 'react-dom/server'\nimport { renderStylesToNodeStream } from '@emotion/server'\nimport App from './App'\n\nconst stream = renderToNodeStream(<App />).pipe(renderStylesToNodeStream())\n```\n\n----------------------------------------\n\nTITLE: Custom Class Name Replacer\nDESCRIPTION: Shows how to configure a custom class name replacer for @emotion/jest's snapshot serializer. This allows replacing generated class names with custom names in snapshots.\nSOURCE: https://github.com/emotion-js/emotion/blob/main/packages/jest/README.md#_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nfunction classNameReplacer(className, index) {\n  return `emotion-${index}`\n}\n```\n\n----------------------------------------\n\nTITLE: Styling with emotion using styled.div\nDESCRIPTION: This example demonstrates how styled.div can be used to apply styles in a nested manner. The issue was that minifying logic could remove rules with the same context values as their parent rules, which has been fixed.\nSOURCE: https://github.com/emotion-js/emotion/blob/main/packages/babel-plugin/CHANGELOG.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nstyled.div`\n  > div {\n    color: blue;\n\n    > div {\n      color: hotpink;\n    }\n  }\n`\n```\n\n----------------------------------------\n\nTITLE: Importing CSS from Emotion React\nDESCRIPTION: This code snippet demonstrates how to update your imports when upgrading to a newer version of Emotion.js. The default export from `@emotion/css` has been removed. The import is now a named import from `@emotion/react`.\nSOURCE: https://github.com/emotion-js/emotion/blob/main/packages/react/CHANGELOG.md#_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\n-import css from '@emotion/css'\n+import { css } from '@emotion/react'\n```\n\n----------------------------------------\n\nTITLE: Client-Side Hydration with Emotion.js\nDESCRIPTION: This snippet shows how to hydrate Emotion.js on the client-side. It involves creating a cache and using `ReactDOM.hydrate` to attach the application to the DOM.\nSOURCE: https://github.com/emotion-js/emotion/blob/main/docs/ssr.mdx#_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n// Hydration of the ids in `data-emotion-css` will automatically occur when the cache is created\nconst cache = createCache()\nReactDOM.hydrate(\n  <CacheProvider value={cache}>\n    <App />\n  </CacheProvider>,\n  document.getElementById('root')\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Snapshot Serializer in Jest\nDESCRIPTION: Configures the @emotion/jest snapshot serializer within the Jest configuration file (jest.config.js). This allows Jest to properly serialize Emotion styles in snapshots.\nSOURCE: https://github.com/emotion-js/emotion/blob/main/packages/jest/README.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// jest.config.js\nmodule.exports = {\n  // ... other config\n  snapshotSerializers: [\n    '@emotion/jest/serializer' /* if needed other snapshotSerializers should go here */\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Gatsby Browser Wrap Root Element\nDESCRIPTION: Snippet shows how to wrap the root element in `gatsby-browser.js` with the `CacheProvider` and the exported cache.\nSOURCE: https://github.com/emotion-js/emotion/blob/main/docs/ssr.mdx#_snippet_13\n\nLANGUAGE: jsx\nCODE:\n```\nimport { CacheProvider } from '@emotion/react'\n\nimport { myCache } from './create-emotion-cache'\n\nexport const wrapRootElement = ({ element }) => (\n  <CacheProvider value={myCache}>{element}</CacheProvider>\n)\n```\n\n----------------------------------------\n\nTITLE: Install @emotion/babel-plugin with npm\nDESCRIPTION: Installs the @emotion/babel-plugin package using npm. This Babel plugin optimizes Emotion styles by compressing and hoisting them, improving performance and developer experience.\nSOURCE: https://github.com/emotion-js/emotion/blob/main/docs/install.mdx#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save-dev @emotion/babel-plugin\n```\n\n----------------------------------------\n\nTITLE: Installing @emotion/css\nDESCRIPTION: This command installs the @emotion/css package using npm. This is a prerequisite for using any of the features provided by the package.\nSOURCE: https://github.com/emotion-js/emotion/blob/main/packages/css/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save @emotion/css\n```\n\n----------------------------------------\n\nTITLE: Installing @emotion/babel-preset-css-prop with yarn\nDESCRIPTION: Command to install the @emotion/babel-preset-css-prop package using yarn.  This is a necessary first step to use the preset in a project.\nSOURCE: https://github.com/emotion-js/emotion/blob/main/packages/babel-preset-css-prop/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @emotion/babel-preset-css-prop\n```\n\n----------------------------------------\n\nTITLE: Configuring Enzyme Snapshot Serializer\nDESCRIPTION: Configures the @emotion/jest enzyme snapshot serializer in Jest. This serializer includes enzyme-to-json, allowing for snapshot testing of shallow rendered components.\nSOURCE: https://github.com/emotion-js/emotion/blob/main/packages/jest/README.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// jest.config.js\nmodule.exports = {\n  // ... other config\n  snapshotSerializers: ['@emotion/jest/enzyme-serializer']\n}\n```\n\n----------------------------------------\n\nTITLE: Disable Speedy in Puppeteer\nDESCRIPTION: This snippet shows how to disable the `speedy` option in Emotion.js when using Puppeteer for prerendering. This ensures that CSS is rendered into the DOM.\nSOURCE: https://github.com/emotion-js/emotion/blob/main/docs/ssr.mdx#_snippet_14\n\nLANGUAGE: jsx\nCODE:\n```\n// This has to be run before emotion inserts any styles so it's imported before the App component\nimport './disable-speedy'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nconst root = document.getElementById('root')\n\n// Check if the root node has any children to detect if the app has been prerendered\nif (root.hasChildNodes()) {\n  ReactDOM.hydrate(<App />, root)\n} else {\n  ReactDOM.render(<App />, root)\n}\n```\n\n----------------------------------------\n\nTITLE: Importing CSS Macro from Emotion React\nDESCRIPTION: This code snippet demonstrates how to update your imports when upgrading to a newer version of Emotion.js. The default export from `@emotion/css/macro` has been removed. The import is now a named import from `@emotion/react/macro`.\nSOURCE: https://github.com/emotion-js/emotion/blob/main/packages/react/CHANGELOG.md#_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\n-import css from '@emotion/css/macro'\n+import { css } from '@emotion/react/macro'\n```\n\n----------------------------------------\n\nTITLE: Using @emotion/babel-preset-css-prop via CLI\nDESCRIPTION: Example of using the @emotion/babel-preset-css-prop preset with the Babel CLI to transform a JavaScript file.  This transforms script.js using the preset.\nSOURCE: https://github.com/emotion-js/emotion/blob/main/packages/babel-preset-css-prop/README.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nbabel --presets @emotion/babel-preset-css-prop script.js\n```\n\n----------------------------------------\n\nTITLE: Example Jest Snapshot with Emotion Styles\nDESCRIPTION: This is an example of a Jest snapshot generated using `@emotion/jest`. It shows the CSS styles applied to the component using Emotion, along with the rendered HTML structure.  This allows for easy comparison of style changes during testing.\nSOURCE: https://github.com/emotion-js/emotion/blob/main/docs/testing.mdx#_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\n// Jest Snapshot v1, https://goo.gl/fbAQLP\n\nexports[`Button renders correctly 1`] = `\n.emotion-0 {\n  color: hotpink;\n}\n\n<div\n  className=\"emotion-0\"\n>\n  This is hotpink.\n</div>\n`\n```\n\n----------------------------------------\n\nTITLE: Array of Object Styles with css\nDESCRIPTION: This example shows how to use an array of JavaScript objects with the `css` function to apply multiple sets of styles. It includes a conditional style based on a boolean variable.\nSOURCE: https://github.com/emotion-js/emotion/blob/main/packages/css/README.md#_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n// @live\nimport { css } from '@emotion/css'\n\nconst color = 'darkgreen'\nconst isDanger = true\n\nrender(\n  <div\n    className={css([\n      {\n        backgroundColor: 'hotpink',\n        '&:hover': {\n          color\n        }\n      },\n      isDanger && {\n        color: 'red'\n      }\n    ])}\n  >\n    This has a hotpink background.\n  </div>\n)\n```\n\n----------------------------------------\n\nTITLE: Disable Speedy Implementation\nDESCRIPTION: This snippet demonstrates the implementation for disabling the `speedy` option in Emotion.js. It checks if the root node has children and disables speedy if prerendering is detected. This ensures CSS is rendered into the DOM for Puppeteer.\nSOURCE: https://github.com/emotion-js/emotion/blob/main/docs/ssr.mdx#_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nimport { sheet } from '@emotion/css'\n\n// Check if the root node has any children to detect if the app has been preprendered\n// speedy is disabled when the app is being prerendered so that styles render into the DOM\n// speedy is significantly faster though so it should only be disabled during prerendering\nif (!document.getElementById('root').hasChildNodes()) {\n  sheet.speedy(false)\n}\n```\n\n----------------------------------------\n\nTITLE: Add css call to css prop with template literal (codemod)\nDESCRIPTION: This code snippet shows how to add a `css` call to the `css` prop when using a template literal. This transformation can be automated using a codemod and requires importing css from `@emotion/core`.\nSOURCE: https://github.com/emotion-js/emotion/blob/main/docs/migrating-to-emotion-10.mdx#_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nlet element = (\n  <div\n    css={`\n      color: hotpink;\n    `}\n  />\n)\n\n// ↓ ↓ ↓ ↓ ↓ ↓\n\nimport { css } from '@emotion/core'\n\nlet element = (\n  <div\n    css={css`\n      color: hotpink;\n    `}\n  />\n)\n```\n\n----------------------------------------\n\nTITLE: Incorrect Emotion Style - String Syntax (Object Preference)\nDESCRIPTION: This code snippet illustrates an incorrect usage of Emotion's `styled` function when the preferred syntax is set to 'object'. It uses a string (template literal) to define the style for the `h1` element, which violates the rule. The dependency is `@emotion/styled`.\nSOURCE: https://github.com/emotion-js/emotion/blob/main/packages/eslint-plugin/docs/rules/syntax-preference.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst H1 = styled.h1`\n  color: red;\n`\n// --> Styles should be written using objects.\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst H1 = styled('h1')`\n  color: red;\n`\n// --> Styles should be written using objects.\n```\n\n----------------------------------------\n\nTITLE: Custom shouldForwardProp with Styled Components\nDESCRIPTION: This code demonstrates how to use a custom `shouldForwardProp` function with Emotion's `styled` API to control which props are forwarded to the underlying DOM element.  The example overrides the type of the `color` prop. Note that a generic type is specified to define the allowed props for the component.\nSOURCE: https://github.com/emotion-js/emotion/blob/main/packages/styled/CHANGELOG.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport const Box = styled('div', {\n  shouldForwardProp: (\n    propName\n  ): propName is Exclude<keyof JSX.IntrinsicElements['div'], 'color'> =>\n    propName !== 'color'\n})<{ color: Array<string> }>(props => ({\n  color: props.color[0]\n}))\n;<Box color={['green']} />\n```\n\n----------------------------------------\n\nTITLE: JSX Example with CSS prop\nDESCRIPTION: This example demonstrates how to use the `css` prop in JSX to apply styles to a div element. It shows a situation where React incorrectly gave a warning about static children not having unique keys.\nSOURCE: https://github.com/emotion-js/emotion/blob/main/packages/react/CHANGELOG.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n<div css={{ color: 'hotpink' }}>\n  <div />\n  <div />\n</div>\n```\n\n----------------------------------------\n\nTITLE: Installation with yarn\nDESCRIPTION: Command to install `@emotion/babel-plugin` as a development dependency using yarn.\nSOURCE: https://github.com/emotion-js/emotion/blob/main/packages/babel-plugin/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn add --dev @emotion/babel-plugin\n```\n\n----------------------------------------\n\nTITLE: TypeScript Error with Invalid Props in @emotion/styled\nDESCRIPTION: This code demonstrates a TypeScript error that occurs when an invalid prop is passed to a styled component. Specifically, it shows that passing the `href` prop to a styled `div` results in a TypeScript error because the `div` element does not have an `href` property.\nSOURCE: https://github.com/emotion-js/emotion/blob/main/docs/typescript.mdx#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport styled from '@emotion/styled';\n\nconst NotALink = styled('div')`\n  color: red;\n`;\n\nconst App = () => (\n  <NotALink href=\"#\">Click me</NotALink>\n            ^^^^^^^^ Property 'href' does not exist [...]\n);\n```\n\n----------------------------------------\n\nTITLE: Installing @emotion/react\nDESCRIPTION: This snippet shows how to install the @emotion/react package using yarn. It's a prerequisite step for using the library in a React project.\nSOURCE: https://github.com/emotion-js/emotion/blob/main/packages/react/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @emotion/react\n```\n\n----------------------------------------\n\nTITLE: Adding insertionPoint option in createCache - Javascript\nDESCRIPTION: Demonstrates how to use the `insertionPoint` option when creating a cache with `@emotion/cache`. This allows inserting emotion-generated styles after a specified element in the DOM. It requires setting up a meta tag with the name \"emotion-insertion-point\" in the head of the document, then passing that meta tag element to `createCache` to have the styles inserted right after it.\nSOURCE: https://github.com/emotion-js/emotion/blob/main/packages/cache/CHANGELOG.md#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nconst head = document.querySelector('head')\n\n// <meta name=\"emotion-insertion-point\" content=\"\">\nconst emotionInsertionPoint = document.createElement('meta')\nemotionInsertionPoint.setAttribute('name', 'emotion-insertion-point')\nemotionInsertionPoint.setAttribute('content', '')\n\nhead.appendChild(emotionInsertionPoint)\n\n// the emotion sheets should be inserted right after the meta tag\nconst cache = createCache({\n  key: 'my-app',\n  insertionPoint: emotionInsertionPoint\n})\n\nfunction App() {\n  return (\n    <CacheProvider value={cache}>\n      <Main />\n    </CacheProvider>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Enzyme and Emotion Serializer with createEnzymeSerializer\nDESCRIPTION: This snippet shows how to add the Enzyme and Emotion serializer using `expect.addSnapshotSerializer` and `createEnzymeSerializer` from `@emotion/jest`. This is used when you are using Enzyme for testing React components with Emotion styles.\nSOURCE: https://github.com/emotion-js/emotion/blob/main/docs/testing.mdx#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// also adds the enzyme-to-json serializer\nimport { createEnzymeSerializer } from '@emotion/jest/enzyme-serializer'\n\nexpect.addSnapshotSerializer(createEnzymeSerializer())\n```\n\n----------------------------------------\n\nTITLE: Nesting components with Emotion styled\nDESCRIPTION: This example shows how to nest CSS selectors using `&` within a styled component. The `color` of the `<strong>` tag changes when it is a direct child of the `Example` component.\nSOURCE: https://github.com/emotion-js/emotion/blob/main/docs/styled.mdx#_snippet_10\n\nLANGUAGE: jsx\nCODE:\n```\nimport styled from '@emotion/styled'\n\nconst Example = styled('span')`\n  color: lightgreen;\n\n  & > strong {\n    color: hotpink;\n  }\n`\n\nrender(\n  <Example>\n    This is <strong>nested</strong>.\n  </Example>\n)\n```\n\n----------------------------------------\n\nTITLE: Switching from jest-glamor-react to jest-emotion\nDESCRIPTION: This code snippet demonstrates how to update the Jest test setup when migrating from `jest-glamor-react` to `jest-emotion`. It involves importing `emotion` and `createSerializer` from `jest-emotion` and updating the `expect.addSnapshotSerializer` call.\nSOURCE: https://github.com/emotion-js/emotion/blob/main/CHANGELOG.md#_snippet_2\n\nLANGUAGE: diff\nCODE:\n```\n-import { sheet } from 'emotion'\n-import serializer from 'jest-glamor-react'\n+import * as emotion from 'emotion'\n+import { createSerializer } from 'jest-emotion'\n\n-expect.addSnapshotSerializer(serializer(sheet))\n+expect.addSnapshotSerializer(createSerializer(emotion))\n```\n\n----------------------------------------\n\nTITLE: Using @emotion/babel-preset-css-prop via Node API\nDESCRIPTION: Example of using the @emotion/babel-preset-css-prop preset with the Babel Node API to transform code.  The code variable is expected to hold the javascript code string.\nSOURCE: https://github.com/emotion-js/emotion/blob/main/packages/babel-preset-css-prop/README.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nrequire('@babel/core').transform(code, {\n  presets: ['@emotion/babel-preset-css-prop']\n})\n```\n\n----------------------------------------\n\nTITLE: Install @emotion/react with Yarn\nDESCRIPTION: Installs the @emotion/react package using yarn. This is the recommended way to get started with Emotion if you are using React.\nSOURCE: https://github.com/emotion-js/emotion/blob/main/docs/install.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @emotion/react\n```\n\n----------------------------------------\n\nTITLE: Importing Custom Pragma with babel-plugin-jsx-pragmatic\nDESCRIPTION: Demonstrates the usage of `@emotion/babel-plugin-jsx-pragmatic` to automatically import a module and assign it to the custom pragma. It showcases how to configure the plugin with the `module` and `import` options. This enables dynamic module loading for custom JSX factories.\nSOURCE: https://github.com/emotion-js/emotion/blob/main/packages/babel-plugin-jsx-pragmatic/README.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nbabel.transformSync(code, {\n  plugins: [\n    [\n      '@babel/plugin-transform-react-jsx',\n      {\n        pragma: 'whatever'\n      }\n    ],\n\n    [\n      '@emotion/babel-plugin-jsx-pragmatic',\n      {\n        module: '/something/whatever',\n        import: 'whatever'\n      }\n    ]\n  ]\n})\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport { default as whatever } from '/something/whatever'\n```\n\n----------------------------------------\n\nTITLE: Install @emotion/server via npm\nDESCRIPTION: This command installs the @emotion/css and @emotion/server packages as dependencies to your project. @emotion/css provides the core CSS-in-JS functionality, while @emotion/server offers utilities for server-side rendering.\nSOURCE: https://github.com/emotion-js/emotion/blob/main/packages/server/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save @emotion/css @emotion/server\n```\n\n----------------------------------------\n\nTITLE: CSS Prop Type Reference in Emotion with TypeScript\nDESCRIPTION: This code snippet shows how to add global support for the `css` prop in Emotion when using older versions of TypeScript or the classic runtime. It uses a triple-slash directive to reference the `@emotion/react/types/css-prop` file, extending the existing `React.Attributes` interface. This is necessary for components that support the `className` prop but might not be automatically recognized by TypeScript.\nSOURCE: https://github.com/emotion-js/emotion/blob/main/docs/emotion-11.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n/// <reference types=\"@emotion/react/types/css-prop\" />\n```\n\n----------------------------------------\n\nTITLE: Enable Emotion 11 codemod rule\nDESCRIPTION: Enables the @emotion/pkg-renaming rule within the ESLint configuration. This rule is related to codemods for Emotion 11, specifically package renaming updates.\nSOURCE: https://github.com/emotion-js/emotion/blob/main/packages/eslint-plugin/README.md#_snippet_4\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"rules\": {\n    \"@emotion/pkg-renaming\": \"error\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: JSX Transformation with Custom Pragma\nDESCRIPTION: Illustrates how to configure `@babel/plugin-transform-react-jsx` with a custom `pragma` option.  The JSX will be transformed using the specified identifier instead of `React.createElement`.  The following examples uses the pragma `whatever`.\nSOURCE: https://github.com/emotion-js/emotion/blob/main/packages/babel-plugin-jsx-pragmatic/README.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nbabel.transformSync(code, {\n  plugins: [\n    [\n      '@babel/plugin-transform-react-jsx',\n      {\n        pragma: 'whatever'\n      }\n    ]\n  ]\n})\n```\n\nLANGUAGE: javascript\nCODE:\n```\nwhatever(Some, { jsx: 'element' })\n```\n\n----------------------------------------\n\nTITLE: Assignment Expressions to Labels in Emotion JS\nDESCRIPTION: This snippet demonstrates how assignment expressions can be used to create labels in Emotion.js. It shows examples of assigning styled components to variables and properties, which are then processed by the Emotion Babel plugin.\nSOURCE: https://github.com/emotion-js/emotion/blob/main/packages/babel-plugin/CHANGELOG.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nstyles = css``\nTimeline.Item = styled.li``\nTimeline.Item.Anchor = styled.a``\n```\n\n----------------------------------------\n\nTITLE: Replacing @emotion/css import in JavaScript\nDESCRIPTION: This code snippet demonstrates how to replace the `@emotion/css` import with `@emotion/core` in JavaScript code. It shows the old and new import statements for both the regular `css` import and the `css/macro` import. This change is necessary due to the removal of `@emotion/css` in favor of `babel-plugin-macros`.\nSOURCE: https://github.com/emotion-js/emotion/blob/main/packages/babel-plugin/CHANGELOG.md#_snippet_2\n\nLANGUAGE: diff\nCODE:\n```\n -import css from '@emotion/css'\n +import { css } from '@emotion/core'\n\n // or\n -import css from '@emotion/css/macro'\n +import { css } from '@emotion/core/macro'\n```\n\n----------------------------------------\n\nTITLE: Using toHaveStyleRule with Media and Target Options\nDESCRIPTION: Demonstrates how to use both media and target options with toHaveStyleRule to assert styles within media queries and target nested components or pseudo-classes.\nSOURCE: https://github.com/emotion-js/emotion/blob/main/packages/jest/README.md#_snippet_11\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react'\nimport renderer from 'react-test-renderer'\nimport { matchers } from '@emotion/jest'\nimport styled from '@emotion/styled'\n\n// Add the custom matchers provided by '@emotion/jest'\nexpect.extend(matchers)\n\ntest('renders with correct link styles', () => {\n  const Container = styled.div`\n    font-size: 14px;\n\n    a {\n      color: yellow;\n    }\n\n    a:hover {\n      color: black;\n    }\n\n    @media (min-width: 768px) {\n      font-size: 16px;\n    }\n  `\n\n  const tree = renderer.create(<Container>hello world</Container>).toJSON()\n\n  expect(tree).toHaveStyleRule('color', 'yellow', { target: /a$/ })\n  expect(tree).toHaveStyleRule('color', 'black', { target: 'a:hover' })\n  expect(tree).toHaveStyleRule('font-size', '16px', {\n    media: '(min-width: 768px)'\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Using toHaveStyleRule with Target Option\nDESCRIPTION: Demonstrates how to use the target option of the toHaveStyleRule matcher to specify a CSS selector or component where the style rule should be found.\nSOURCE: https://github.com/emotion-js/emotion/blob/main/packages/jest/README.md#_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nexpect(tree).toHaveStyleRule('width', '50px', { target: ':hover' })\n```\n\nLANGUAGE: javascript\nCODE:\n```\nexpect(tree).toHaveStyleRule('color', 'yellow', { target: 'span' })\n```\n\nLANGUAGE: javascript\nCODE:\n```\nexpect(tree).toHaveStyleRule('fill', 'green', { target: `${Svg}` })\n```\n\n----------------------------------------\n\nTITLE: Installing @emotion/jest\nDESCRIPTION: Installs @emotion/jest as a development dependency using npm.  This command adds the package to your project's package.json.\nSOURCE: https://github.com/emotion-js/emotion/blob/main/packages/jest/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save-dev @emotion/jest\n```\n\n----------------------------------------\n\nTITLE: Configuring Jest Snapshot Serializers for Enzyme with Emotion\nDESCRIPTION: This JSON configuration adds `@emotion/jest/enzyme-serializer` to the `snapshotSerializers` array in the Jest configuration. This is used when you are using Enzyme for testing React components with Emotion styles.\nSOURCE: https://github.com/emotion-js/emotion/blob/main/docs/testing.mdx#_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"snapshotSerializers\": [\"@emotion/jest/enzyme-serializer\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Install @emotion/css\nDESCRIPTION: This command installs the `@emotion/css` package, which allows using Emotion in a framework-agnostic way. It's the simplest way to use Emotion without requiring additional setup or configuration changes.\nSOURCE: https://github.com/emotion-js/emotion/blob/main/docs/introduction.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i @emotion/css\n```\n\n----------------------------------------\n\nTITLE: Using Class Names from Other Sources with cx\nDESCRIPTION: This snippet illustrates how to combine class names generated by Emotion with class names from other sources using the `cx` function.\nSOURCE: https://github.com/emotion-js/emotion/blob/main/packages/css/README.md#_snippet_10\n\nLANGUAGE: jsx\nCODE:\n```\nconst cls1 = css`\n  font-size: 20px;\n  background: green;\n`\n\n<div\n  className={cx(cls1, 'profile')}\n/>\n```\n\n----------------------------------------\n\nTITLE: Using Snapshot Serializer with react-test-renderer\nDESCRIPTION: Demonstrates how to use @emotion/jest with react-test-renderer to create snapshots of components with Emotion styles. Includes creating a styled component and asserting its snapshot.\nSOURCE: https://github.com/emotion-js/emotion/blob/main/packages/jest/README.md#_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react'\nimport renderer from 'react-test-renderer'\nimport { createSerializer } from '@emotion/jest'\nimport styled from '@emotion/styled'\n\nexpect.addSnapshotSerializer(createSerializer())\n\ntest('renders with correct styles', () => {\n  const H1 = styled.h1`\n    float: left;\n  `\n\n  const tree = renderer.create(<H1>hello world</H1>).toJSON()\n\n  expect(tree).toMatchSnapshot()\n})\n```\n\n----------------------------------------\n\nTITLE: Composing styles in Emotion 10 with css prop\nDESCRIPTION: This code snippet shows how to compose styles in Emotion 10 using the `css` prop.  Instead of directly manipulating class names, styles are composed as an array within the `css` prop. Requires the jsx pragma.\nSOURCE: https://github.com/emotion-js/emotion/blob/main/docs/migrating-to-emotion-10.mdx#_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n// Emotion 10\n/** @jsx jsx */\nimport { css, jsx } from '@emotion/core'\n\nlet basic = css`\n  color: green;\n`\n\nlet important = css`\n  color: hotpink;\n`\n\nconst SomeComponent = props => (\n  <div css={[basic, props.important && important]} />\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Styled Components with StyleSheet using createStyled - JavaScript\nDESCRIPTION: Shows how to create styled components using the createStyled function from @emotion/primitives-core. It accepts a platform-specific StyleSheet (React Native) and returns a function that can be used to create styled components from primitives like View and Text. Styled components can then be further styled using template literals.\nSOURCE: https://github.com/emotion-js/emotion/blob/main/packages/primitives-core/README.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { StyleSheet, View, Text } from 'react-native'\nimport { createStyled } from '@emotion/primitives-core'\n\nconst styled = createStyled(StyleSheet)\n\nstyled.Text = styled(Text)\n\nconst StyledText = styled.Text`font-size: 40px;`\n\n<View><StyledText>Hello World</StyledText></View>\n```\n\n----------------------------------------\n\nTITLE: Style Precedence Example\nDESCRIPTION: Demonstrates the precedence of styles when using the `css` prop and `className` prop. Styles defined in `className` override styles defined in the `css` prop, and styles from non-emotion sources are appended.\nSOURCE: https://github.com/emotion-js/emotion/blob/main/docs/css-prop.mdx#_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\nconst P = props => (\n  <p\n    css={{\n      margin: 0,\n      fontSize: 12,\n      lineHeight: '1.5',\n      fontFamily: 'Sans-Serif',\n      color: 'black'\n    }}\n    {...props} // <- props contains the `className` prop\n  />\n)\n\nconst ArticleText = props => (\n  <P\n    css={{\n      fontSize: 14,\n      fontFamily: 'Georgia, serif',\n      color: 'darkgray'\n    }}\n    {...props} // <- props contains the `className` prop\n  />\n)\n```\n\nLANGUAGE: jsx\nCODE:\n```\nconst P = props => (\n  <p\n    css={{\n      margin: 0,\n      fontSize: 12,\n      lineHeight: '1.5',\n      fontFamily: 'sans-serif',\n      color: 'black'\n    }}\n    {...props} // <- props contains the `className` prop\n  />\n)\n\nconst ArticleText = props => (\n  <P\n    css={{\n      fontSize: 14,\n      fontFamily: 'Georgia, serif',\n      color: 'darkgray'\n    }}\n    {...props} // <- props contains the `className` prop\n  />\n)\n\nconst SmallArticleText = props => (\n  <ArticleText\n    css={{\n      fontSize: 10\n    }}\n    {...props} // <- props contains the `className` prop\n  />\n)\n```\n\n----------------------------------------\n\nTITLE: Hashing a String with @emotion/hash (JavaScript)\nDESCRIPTION: This code snippet demonstrates how to use the @emotion/hash function to generate a hash value from a string. The function takes a string as input and returns a hash string.\nSOURCE: https://github.com/emotion-js/emotion/blob/main/packages/hash/README.md#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport hash from '@emotion/hash'\n\nhash('some-string') // 12fj1d\n```\n\n----------------------------------------\n\nTITLE: Install @emotion/styled and @emotion/react\nDESCRIPTION: This command installs both `@emotion/styled` and `@emotion/react` packages. `@emotion/styled` allows developers to create styled components using the `styled.div` API.\nSOURCE: https://github.com/emotion-js/emotion/blob/main/docs/introduction.mdx#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpm i @emotion/styled @emotion/react\n```\n\n----------------------------------------\n\nTITLE: Styled component example\nDESCRIPTION: An example demonstrating styled components and how the `label` is injected using `@emotion/babel-plugin`.\nSOURCE: https://github.com/emotion-js/emotion/blob/main/packages/babel-plugin/README.md#_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nconst H1 = styled.h1({\n  borderRadius: '50%',\n  transition: 'transform 400ms ease-in-out',\n  boxSizing: 'border-box',\n  display: 'flex',\n  ':hover': {\n    transform: 'scale(1.2)'\n  }\n})\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst H1 = /*#__PURE__*/ styled('h1', {\n  label: 'H1'\n})({\n  borderRadius: '50%',\n  transition: 'transform 400ms ease-in-out',\n  boxSizing: 'border-box',\n  display: 'flex',\n  ':hover': {\n    transform: 'scale(1.2)'\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Using toHaveStyleRule with Media Option\nDESCRIPTION: Shows how to use the media option of the toHaveStyleRule matcher to specify a media rule where the style property should be looked for.\nSOURCE: https://github.com/emotion-js/emotion/blob/main/packages/jest/README.md#_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nexpect(tree).toHaveStyleRule('font-size', '14px', {\n  media: 'screen and (max-width: 1200px)'\n})\n```\n\n----------------------------------------\n\nTITLE: Configure emotion Insertion Point\nDESCRIPTION: This example shows how to configure the insertion point for emotion styles using a meta tag. It demonstrates how to create and append a meta tag to the head of the document and how to use this meta tag to set the `insertionPoint` when creating the cache.\nSOURCE: https://github.com/emotion-js/emotion/blob/main/packages/sheet/README.md#_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nconst head = document.querySelector('head')\n\n// <meta name=\"emotion-insertion-point\" content=\"\">\nconst emotionInsertionPoint = document.createElement('meta')\nemotionInsertionPoint.setAttribute('name', 'emotion-insertion-point')\nemotionInsertionPoint.setAttribute('content', '')\n\nhead.appendChild(emotionInsertionPoint)\n\n// the emotion sheets should be inserted right after the meta tag\nconst cache = createCache({\n  key: 'my-app',\n  insertionPoint: emotionInsertionPoint\n})\n\nfunction App() {\n  return (\n    <CacheProvider value={cache}>\n      <Main />\n    </CacheProvider>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Babel Configuration with Env Option\nDESCRIPTION: Shows how to configure the Babel configuration file (.babelrc) with the env option to include the @emotion Babel plugin. The \"emotion\" plugin must be the first one in the plugins array for each environment.\nSOURCE: https://github.com/emotion-js/emotion/blob/main/docs/install.mdx#_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"env\": {\n    \"production\": {\n      \"plugins\": [\"@emotion\", ...otherBabelPlugins]\n    }\n  },\n  \"plugins\": [\"@emotion\"]\n}\n```\n\n----------------------------------------\n\nTITLE: CSS Output of Style Precedence\nDESCRIPTION: This shows the css output from the Style Precedence Example\nSOURCE: https://github.com/emotion-js/emotion/blob/main/docs/css-prop.mdx#_snippet_9\n\nLANGUAGE: css\nCODE:\n```\n.css-1 {\n  margin: 0;\n  font-size: 12px;\n  line-height: 1.5;\n  font-family: sans-serif;\n  color: black;\n}\n```\n\nLANGUAGE: css\nCODE:\n```\n.css-2 {\n  font-size: 14px;\n  font-family: Georgia, serif;\n  color: darkgray;\n}\n```\n\nLANGUAGE: css\nCODE:\n```\n.css-3 {\n  font-size: 10px;\n}\n```\n\n----------------------------------------\n\nTITLE: Babel configuration without options\nDESCRIPTION: Example `.babelrc` configuration for using `@emotion/babel-plugin` without any specific options.\nSOURCE: https://github.com/emotion-js/emotion/blob/main/packages/babel-plugin/README.md#_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"plugins\": [\"@emotion\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Theme Interface Augmentation in Emotion Core (TypeScript)\nDESCRIPTION: This code snippet demonstrates how to augment the built-in Theme interface in Emotion Core using TypeScript. This allows developers to provide a type for the Theme object, enabling type-safe access to theme properties within styled components.\nSOURCE: https://github.com/emotion-js/emotion/blob/main/packages/styled/CHANGELOG.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ndeclare module '@emotion/core' {\n  export interface Theme {\n    primaryColor: string\n    secondaryColor: string\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Style Insertion in Snapshot Serializer\nDESCRIPTION: Demonstrates how to disable style insertion in @emotion/jest's snapshot serializer. This can be useful when testing other aspects of a component and not its styles.\nSOURCE: https://github.com/emotion-js/emotion/blob/main/packages/jest/README.md#_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\nimport { createSerializer } from '@emotion/jest'\n\n// configures @emotion/jest to not insert styles\nexpect.addSnapshotSerializer(createSerializer({ includeStyles: false }))\n```\n\n----------------------------------------\n\nTITLE: Using Custom Class Name Replacer in Snapshot Serializer\nDESCRIPTION: Demonstrates how to integrate a custom class name replacer with the @emotion/jest snapshot serializer. This allows customizing the class names in snapshots, improving readability and stability.\nSOURCE: https://github.com/emotion-js/emotion/blob/main/packages/jest/README.md#_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nimport { createSerializer } from '@emotion/jest'\n\nexpect.addSnapshotSerializer(\n  createSerializer({\n    classNameReplacer(className, index) {\n      return `my-new-class-name-${index}`\n    }\n  })\n)\n```\n\n----------------------------------------\n\nTITLE: Usage via CLI\nDESCRIPTION: Example showing how to use the `@emotion/babel-plugin` via the Babel CLI.\nSOURCE: https://github.com/emotion-js/emotion/blob/main/packages/babel-plugin/README.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nbabel --plugins @emotion/babel-plugin script.js\n```\n\n----------------------------------------\n\nTITLE: Usage via Node API\nDESCRIPTION: Example demonstrating how to use the `@emotion/babel-plugin` through the Babel Node API.\nSOURCE: https://github.com/emotion-js/emotion/blob/main/packages/babel-plugin/README.md#_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nrequire('@babel/core').transform('code', {\n  plugins: ['@emotion/babel-plugin']\n})\n```\n\n----------------------------------------\n\nTITLE: Fixing Styles in Nested Factory Calls with Emotion\nDESCRIPTION: This code snippet demonstrates how to fix an issue where styles were being lost for nested factory calls in Emotion, using the `css` function to define styles within styled components. It shows how to define a background color style based on a color parameter and apply it to a styled Text component.\nSOURCE: https://github.com/emotion-js/emotion/blob/main/packages/primitives-core/CHANGELOG.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst bgColor = color => css`\n  background-color: ${color};\n`\n\nconst Text = styled.Text`\n  color: hotpink;\n  ${({ backgroundColor }) => bgColor(backgroundColor)};\n`\n```\n\n----------------------------------------\n\nTITLE: Importing Emotion Babel Macros in JSX\nDESCRIPTION: This snippet demonstrates how to import styled components, jsx, css, Global, and keyframes from @emotion/react/macro, and css, keyframes, and injectGlobal from @emotion/css/macro when using Babel Macros. It assumes you are using Create React App v2 or have babel-plugin-macros configured.\nSOURCE: https://github.com/emotion-js/emotion/blob/main/docs/babel-macros.mdx#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport styled from '@emotion/styled/macro'\nimport { jsx, css, Global, keyframes } from '@emotion/react/macro'\nimport { css, keyframes, injectGlobal } from '@emotion/css/macro'\n```\n\n----------------------------------------\n\nTITLE: TS Declaration: Adding Speedy Method to StyleSheet\nDESCRIPTION: This patch adds the `speedy` method to the TypeScript type declaration of the `sheet` object available on Emotion instances. Additionally, the `StyleSheet` type is no longer exported, and `CSSStyleSheet` is used instead. The old `StyleSheet` type (from `@emotion/sheet`) does not have the `speedy` method.\nSOURCE: https://github.com/emotion-js/emotion/blob/main/packages/css/CHANGELOG.md#_snippet_2\n\n\n\n----------------------------------------\n\nTITLE: Install @emotion/styled with npm\nDESCRIPTION: Installs the @emotion/styled package using npm. This package allows you to create styled components in React.\nSOURCE: https://github.com/emotion-js/emotion/blob/main/docs/install.mdx#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save @emotion/styled\n```\n\n----------------------------------------\n\nTITLE: Installing jest-emotion\nDESCRIPTION: This command demonstrates how to install `jest-emotion` using npm. This package is used for snapshot testing with Emotion.js and Jest.\nSOURCE: https://github.com/emotion-js/emotion/blob/main/CHANGELOG.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save jest-emotion\n```\n\n----------------------------------------\n\nTITLE: Gatsby Config - Emotion Plugin\nDESCRIPTION: This snippet shows how to add `gatsby-plugin-emotion` to the `gatsby-config.js` file.\nSOURCE: https://github.com/emotion-js/emotion/blob/main/docs/ssr.mdx#_snippet_10\n\nLANGUAGE: jsx\nCODE:\n```\nmodule.exports = {\n  plugins: [...otherGatsbyPlugins, 'gatsby-plugin-emotion']\n}\n```\n\n----------------------------------------\n\nTITLE: Using @emotion/react css prop\nDESCRIPTION: This example demonstrates how to use the `css` prop in `@emotion/react` to style a `div` element.  It allows developers to define styles directly on React components, similar to the `style` prop but with advanced features like auto vendor-prefixing and media queries.\nSOURCE: https://github.com/emotion-js/emotion/blob/main/docs/introduction.mdx#_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n// @live\nimport { css } from '@emotion/react'\n\nconst color = 'white'\n\nrender(\n  <div\n    css={css`\n      padding: 32px;\n      background-color: hotpink;\n      font-size: 24px;\n      border-radius: 4px;\n      &:hover {\n        color: ${color};\n      }\n    `}\n  >\n    Hover to change color.\n  </div>\n)\n```\n\n----------------------------------------\n\nTITLE: Importing Default Export\nDESCRIPTION: Illustrates importing the default export from a module, specifying the module path and the import identifier.  This shows the default behavior when the `export` option is omitted or set to `default`.\nSOURCE: https://github.com/emotion-js/emotion/blob/main/packages/babel-plugin-jsx-pragmatic/README.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  module: \"whatever\",\n  import: \"x\"\n}\n// import {default as x} from \"whatever\"\n```\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  module: \"whatever\",\n  import: \"x\",\n  export: \"default\",\n}\n// import {default as x} from \"whatever\"\n```\n\n----------------------------------------\n\nTITLE: Applying Global Styles with Emotion React\nDESCRIPTION: This code snippet showcases the use of the `Global` component from `@emotion/react` to apply global CSS styles. It demonstrates both the `css` prop with tagged template literals and the object syntax.  The styles are applied globally to the `.some-class` selector.\nSOURCE: https://github.com/emotion-js/emotion/blob/main/docs/globals.mdx#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Global, css } from '@emotion/react'\n\nrender(\n  <div>\n    <Global\n      styles={css`\n        .some-class {\n          color: hotpink !important;\n        }\n      `}\n    />\n    <Global\n      styles={{\n        '.some-class': {\n          fontSize: 50,\n          textAlign: 'center'\n        }\n      }}\n    />\n    <div className=\"some-class\">This is hotpink now!</div>\n  </div>\n)\n```\n\n----------------------------------------\n\nTITLE: Install @emotion/babel-plugin with Yarn\nDESCRIPTION: Installs the @emotion/babel-plugin package using yarn. This Babel plugin optimizes Emotion styles by compressing and hoisting them, improving performance and developer experience.\nSOURCE: https://github.com/emotion-js/emotion/blob/main/docs/install.mdx#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nyarn add --dev @emotion/babel-plugin\n```\n\n----------------------------------------\n\nTITLE: Update react-emotion imports with codemod\nDESCRIPTION: This code demonstrates how to update imports when migrating from `react-emotion` to `@emotion/styled`. The `styled` import is separated from other emotion exports. This transformation can be automated using a codemod.\nSOURCE: https://github.com/emotion-js/emotion/blob/main/docs/migrating-to-emotion-10.mdx#_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport styled, { css } from 'react-emotion'\n\n// ↓ ↓ ↓ ↓ ↓ ↓\n\nimport styled from '@emotion/styled'\nimport { css } from 'emotion'\n```\n\n----------------------------------------\n\nTITLE: Writing a React Component Test with Emotion and Jest\nDESCRIPTION: This code defines a React component with Emotion styles and a Jest test that creates a snapshot of the rendered component using `react-test-renderer`. The snapshot includes the rendered HTML and the Emotion styles applied to the component.\nSOURCE: https://github.com/emotion-js/emotion/blob/main/docs/testing.mdx#_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react'\nimport renderer from 'react-test-renderer'\n\nconst Button = props => (\n  <button\n    css={{\n      color: 'hotpink'\n    }}\n    {...props}\n  />\n)\n\ntest('Button renders correctly', () => {\n  expect(\n    renderer.create(<Button>This is hotpink.</Button>).toJSON()\n  ).toMatchSnapshot()\n})\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Emotion Cache\nDESCRIPTION: This snippet demonstrates how to create a custom Emotion cache using `createCache` and configure it with a custom key and Stylis plugins. This allows for low-level customization of how styles are inserted by Emotion. It's designed to work with the `<CacheProvider/>` component.\nSOURCE: https://github.com/emotion-js/emotion/blob/main/packages/cache/README.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport createCache from '@emotion/cache'\n\nexport const myCache = createCache({\n  key: 'my-prefix-key',\n  stylisPlugins: [\n    /* your plugins here */\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Theming with useTheme hook in Emotion\nDESCRIPTION: This snippet demonstrates how to use the useTheme hook to access the theme within a functional component. It defines a SomeText component that uses the useTheme hook to retrieve the theme and apply the primary color to the text color of a div.\nSOURCE: https://github.com/emotion-js/emotion/blob/main/docs/theming.mdx#_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport { ThemeProvider, useTheme } from '@emotion/react'\n\nconst theme = {\n  colors: {\n    primary: 'hotpink'\n  }\n}\n\nfunction SomeText(props) {\n  const theme = useTheme()\n  return <div css={{ color: theme.colors.primary }} {...props} />\n}\n\nrender(\n  <ThemeProvider theme={theme}>\n    <SomeText>some text</SomeText>\n  </ThemeProvider>\n)\n```\n\n----------------------------------------\n\nTITLE: Enable Automatic Labeling at Runtime in JavaScript\nDESCRIPTION: This snippet shows how to enable automatic labeling of Emotion CSS styles at runtime by setting the global flag `EMOTION_RUNTIME_AUTO_LABEL` to `true`.  This is useful during development when not using the `@emotion/babel-plugin`.  This should only be used during development and be aware of potential issues with Safari and performance.\nSOURCE: https://github.com/emotion-js/emotion/blob/main/docs/labels.mdx#_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nglobalThis.EMOTION_RUNTIME_AUTO_LABEL = true\n```\n\n----------------------------------------\n\nTITLE: Component After Babel Compilation (JSX)\nDESCRIPTION: This code represents the state of the `h1.js` file after Babel compilation with the deprecated `extractStatic` option enabled.  It shows the import of the generated CSS file and the modification of the styled component definition to reference the generated CSS class.\nSOURCE: https://github.com/emotion-js/emotion/blob/main/docs/extract-static.mdx#_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nimport './h1.emotion.css'\nimport styled from 'react-emotion'\n\nconst H1 = styled('h1', {\n  e: 'css-duiy4a'\n})()\n```\n\n----------------------------------------\n\nTITLE: YAML Frontmatter Example\nDESCRIPTION: This code snippet shows the required YAML frontmatter at the top of each documentation file.  It specifies the title for the page.\nSOURCE: https://github.com/emotion-js/emotion/blob/main/site/README.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: 'Some Title'\n---\n```\n\n----------------------------------------\n\nTITLE: Install @emotion/eslint-plugin (npm)\nDESCRIPTION: Installs the @emotion/eslint-plugin as a development dependency using npm.  This plugin provides ESLint rules for Emotion.\nSOURCE: https://github.com/emotion-js/emotion/blob/main/packages/eslint-plugin/README.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n$ npm install @emotion/eslint-plugin --save-dev\n```\n\n----------------------------------------\n\nTITLE: Configuring with Custom Pragma 'x.y'\nDESCRIPTION: Shows how to configure the plugins when the desired JSX pragma is `x.y`, importing the default export from `/something/whatever` as `x`. The `y` part of the pragma will need to be handled separately.\nSOURCE: https://github.com/emotion-js/emotion/blob/main/packages/babel-plugin-jsx-pragmatic/README.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  plugins: [\n    [\n      '@babel/plugin-transform-react-jsx',\n      {\n        pragma: 'x.y'\n      }\n    ],\n\n    [\n      '@emotion/babel-plugin-jsx-pragmatic',\n      {\n        module: '/something/whatever',\n        import: 'x'\n      }\n    ]\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Using Emotion with JSX\nDESCRIPTION: This example demonstrates how to use Emotion with JSX to style a React component. It imports the jsx function from @emotion/react and uses it to apply CSS styles to a div element. The css prop allows you to define styles as a JavaScript object.\nSOURCE: https://github.com/emotion-js/emotion/blob/main/README.md#_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n/** @jsx jsx */\nimport { jsx } from '@emotion/react'\n\nlet SomeComponent = props => {\n  return (\n    <div\n      css={{\n        color: 'hotpink'\n      }}\n      {...props}\n    />\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Versioning Packages with Yarn\nDESCRIPTION: This command uses Changesets to determine the new versions for each package based on the changesets that have been added. It updates the package.json files with the new versions and generates the necessary changelog entries.\nSOURCE: https://github.com/emotion-js/emotion/blob/main/RELEASING.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn version-packages\n```\n\n----------------------------------------\n\nTITLE: Extracted CSS (CSS)\nDESCRIPTION: This CSS snippet shows the output of the deprecated `extractStatic` feature. It demonstrates how emotion extracts static styles into a separate CSS file, assigning a unique class name to the styled component.\nSOURCE: https://github.com/emotion-js/emotion/blob/main/docs/extract-static.mdx#_snippet_4\n\nLANGUAGE: css\nCODE:\n```\n/* h1.emotion.css */\n.css-H1-duiy4a {\n  color: blue;\n}\n```\n\n----------------------------------------\n\nTITLE: Using Child Selectors with Emotion.js\nDESCRIPTION: This example shows how to style child elements using CSS selectors within Emotion.js object styles. It demonstrates targeting a specific class name within a parent element.\nSOURCE: https://github.com/emotion-js/emotion/blob/main/docs/object-styles.mdx#_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nrender(\n  <div\n    css={{\n      color: 'darkorchid',\n      '& .name': {\n        color: 'orange'\n      }\n    }}\n  >\n    This is darkorchid.\n    <div className=\"name\">This is orange</div>\n  </div>\n)\n```\n\n----------------------------------------\n\nTITLE: HTML output with dynamic styles using css prop\nDESCRIPTION: Illustrates the HTML output when using the `css` prop with styles that include dynamic values. This shows how Emotion generates nearly-duplicate CSS classes for each element when the dynamic value changes, which can lead to a large amount of CSS.  This example shows how each avatar gets its own generated style due to the background-image url.\nSOURCE: https://github.com/emotion-js/emotion/blob/main/docs/best-practices.mdx#_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<style>\n  .css-1udhswa {\n    border-radius: 50%;\n    width: 40px;\n    height: 40px;\n    background-image: url(https://i.pravatar.cc/150?u=0);\n  }\n\n  .css-1cpwmbr {\n    border-radius: 50%;\n    width: 40px;\n    height: 40px;\n    background-image: url(https://i.pravatar.cc/150?u=1);\n  }\n\n  .css-am987o {\n    border-radius: 50%;\n    width: 40px;\n    height: 40px;\n    background-image: url(https://i.pravatar.cc/150?u=2);\n  }\n</style>\n```\n\n----------------------------------------\n\nTITLE: Using facepaint with Emotion.js\nDESCRIPTION: This snippet demonstrates how to use the `facepaint` library to define responsive styles in Emotion.js.  It creates media queries based on breakpoints and applies different colors based on screen size using object styles.\nSOURCE: https://github.com/emotion-js/emotion/blob/main/docs/media-queries.mdx#_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport facepaint from 'facepaint'\n\nconst breakpoints = [576, 768, 992, 1200]\n\nconst mq = facepaint(breakpoints.map(bp => `@media (min-width: ${bp}px)`))\n\nrender(\n  <div\n    css={mq({\n      color: ['green', 'gray', 'hotpink']\n    })}\n  >\n    Some text.\n  </div>\n)\n```\n\n----------------------------------------\n\nTITLE: Removing interpolated class names from `css` in Emotion\nDESCRIPTION: This snippet demonstrates the removal of support for interpolating class names returned from the `css` function in Emotion. This feature was deprecated in v10 and is no longer supported in v11. The example shows how it was previously possible to nest class names but now that will not work.\nSOURCE: https://github.com/emotion-js/emotion/blob/main/packages/css/CHANGELOG.md#_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nconst cls1 = css`\n  color: blue;\n`\nconst cls2 = css`\n  & .${cls1} {\n    color: red;\n  }\n`\n```\n\n----------------------------------------\n\nTITLE: Sheet Options Definition in TypeScript\nDESCRIPTION: This TypeScript code defines the structure of the Options type used when creating a StyleSheet instance.  It outlines the available configuration properties for customizing the behavior of the StyleSheet, including nonce, key, container, speedy and prepend.\nSOURCE: https://github.com/emotion-js/emotion/blob/main/packages/sheet/README.md#_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\ntype Options = {\n  nonce?: string\n  key: string\n  container: Node\n  speedy?: boolean\n  prepend?: boolean\n}\n```\n\n----------------------------------------\n\nTITLE: Styled Component Usage with Jest\nDESCRIPTION: This code snippet demonstrates how to use a styled component with Jest for snapshot testing. It imports styled from @emotion/styled/macro, renders a styled div, and then checks if the container matches the snapshot.\nSOURCE: https://github.com/emotion-js/emotion/blob/main/packages/cache/CHANGELOG.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport styled from '@emotion/styled/macro'\nimport { render } from '@testing-library/react'\nconst Div = styled.div``\ntest('foo', () => {\n  const { container } = render(<Div />)\n  expect(container).toMatchSnapshot()\n})\n```\n\n----------------------------------------\n\nTITLE: Add jsx import and pragma with codemod\nDESCRIPTION: This code snippet demonstrates how to add a `jsx` import from `@emotion/core` and set the JSX pragma at the top of the file. This enables the use of the `jsx` transform and can be automated with a codemod.\nSOURCE: https://github.com/emotion-js/emotion/blob/main/docs/migrating-to-emotion-10.mdx#_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport { css } from '@emotion/core'\n\nlet element = (\n  <div\n    css={css`\n      color: hotpink;\n    `}\n  />\n)\n\n// ↓ ↓ ↓ ↓ ↓ ↓\n\n/** @jsx jsx */\nimport { css, jsx } from '@emotion/core'\n\nlet element = (\n  <div\n    css={css`\n      color: hotpink;\n    `}\n  />\n)\n```\n\n----------------------------------------\n\nTITLE: Install ESLint (npm)\nDESCRIPTION: Installs ESLint as a development dependency using npm. This is a prerequisite for using the @emotion/eslint-plugin.\nSOURCE: https://github.com/emotion-js/emotion/blob/main/packages/eslint-plugin/README.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n$ npm i eslint --save-dev\n```\n\n----------------------------------------\n\nTITLE: Removing CSS Interpolation\nDESCRIPTION: This code demonstrates the removal of support for interpolating class names returned from the `css` function. This change, introduced in Emotion.js v11, prevents dynamic composition of CSS classes using the result of the `css` function within template literals. This functionality has been deprecated since v10.\nSOURCE: https://github.com/emotion-js/emotion/blob/main/packages/css/CHANGELOG.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst cls1 = css`\n  color: blue;\n`\nconst cls2 = css`\n  & .${cls1} {\n    color: red;\n  }\n`\n```\n\n----------------------------------------\n\nTITLE: Disabling DOM Element Styling in Snapshot Serializer\nDESCRIPTION: Shows how to configure @emotion/jest to ignore DOM elements during snapshot serialization. This can be useful when only React component styles need to be tested.\nSOURCE: https://github.com/emotion-js/emotion/blob/main/packages/jest/README.md#_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nimport { createSerializer } from '@emotion/jest'\n\n// configures @emotion/jest to ignore DOM elements\nexpect.addSnapshotSerializer(createSerializer({ DOMElements: false }))\n```\n\n----------------------------------------\n\nTITLE: Targeting Emotion components with object styles\nDESCRIPTION: This example shows how to target other Emotion components using object styles.  The `Child` component's color changes when it is inside the `Parent` component.\nSOURCE: https://github.com/emotion-js/emotion/blob/main/docs/styled.mdx#_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nimport styled from '@emotion/styled'\n\nconst Child = styled.div({\n  color: 'red'\n})\n\nconst Parent = styled.div({\n  [Child]: {\n    color: 'green'\n  }\n})\n\nrender(\n  <div>\n    <Parent>\n      <Child>green</Child>\n    </Parent>\n    <Child>red</Child>\n  </div>\n)\n```\n\n----------------------------------------\n\nTITLE: Incorrect Styled Import (react-emotion)\nDESCRIPTION: This code snippet demonstrates an incorrect import.  It imports `css` from `react-emotion` which is not the recommended practice in Emotion 10+ and may lead to errors. The correct import should be from the `emotion` package.\nSOURCE: https://github.com/emotion-js/emotion/blob/main/packages/eslint-plugin/docs/rules/import-from-emotion.md#_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\nimport { css } from 'react-emotion'\n```\n\n----------------------------------------\n\nTITLE: TypeScript Error Detection with Emotion Object Styles\nDESCRIPTION: This snippet illustrates how TypeScript's type checking helps to detect errors in Emotion object styles. It shows an example where a typo in the 'boxSizing' property value results in a TypeScript error, highlighting the type safety benefits of using object styles with Emotion and TypeScript.\nSOURCE: https://github.com/emotion-js/emotion/blob/main/docs/typescript.mdx#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { css } from '@emotion/react';\n\nconst titleStyle = css({\n                       ^ Argument of type 'boxSizing: 'bordre-box';' is not assignable [...]\n  boxSizing: 'bordre-box', // Oops, there's a typo!\n  width: 300,\n  height: 200,\n});\n```\n\n----------------------------------------\n\nTITLE: JSX Code Block with Live Preview\nDESCRIPTION: This code snippet demonstrates a JSX code block with a `// @live` comment.  This comment triggers a live preview of the code to be rendered next to the code block in the documentation. It relies on the `render` function and the availability of Emotion packages.\nSOURCE: https://github.com/emotion-js/emotion/blob/main/site/README.md#_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n// @live\n\nrender('some react element')\n```\n\n----------------------------------------\n\nTITLE: Creating CSS with StyleSheet using createCss - JavaScript\nDESCRIPTION: Demonstrates using the createCss function from @emotion/primitives-core to create CSS styles with a platform-specific StyleSheet (React Native). It accepts a StyleSheet method and returns a function to create styles using template literals or object literals. Styles are applied to React Native components like View and Text.\nSOURCE: https://github.com/emotion-js/emotion/blob/main/packages/primitives-core/README.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { StyleSheet, View, Text } from 'react-native'\nimport { createCss } from '@emotion/primitives-core'\n\nconst css = createCss(StyleSheet)\n\n<View style={css`background-color: red;`}><Text style={css`font-size: 40px;`}>Hello World</Text></View>\n```\n\n----------------------------------------\n\nTITLE: Using reusable component in a component\nDESCRIPTION: Shows how to use the ErrorMessage component with shared style in another React component with Emotion.  The ErrorMessage component is imported and rendered, applying the pre-defined styles. Demonstrates the reuse of style-aware components.\nSOURCE: https://github.com/emotion-js/emotion/blob/main/docs/best-practices.mdx#_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { ErrorMessage } from '...'\n\nreturn <ErrorMessage>Failed to fizzle the frozzle.</ErrorMessage>\n```\n\n----------------------------------------\n\nTITLE: Emotion Styled Component Testing with Jest\nDESCRIPTION: This snippet demonstrates how to test an Emotion styled component using Jest and @testing-library/react. It renders a styled div component and asserts that the container matches the snapshot. This example highlights the usage of an empty rule inserted into the DOM for proper class serialization in non-production environments.\nSOURCE: https://github.com/emotion-js/emotion/blob/main/packages/cache/CHANGELOG.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport styled from '@emotion/styled/macro'\nimport { render } from '@testing-library/react'\nconst Div = styled.div``\ntest('foo', () => {\n  const { container } = render(<Div />)\n  expect(container).toMatchSnapshot()\n})\n```\n\n----------------------------------------\n\nTITLE: Building Emotion in watch mode\nDESCRIPTION: This command initiates the build process for the Emotion library in watch mode. It allows for continuous monitoring of file changes and automatic rebuilding, which facilitates rapid development and testing within the playgrounds. This is a prerequisite for using the development playgrounds.\nSOURCE: https://github.com/emotion-js/emotion/blob/main/playgrounds/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn build:watch\n```\n\n----------------------------------------\n\nTITLE: Updating ESLint Plugin Configuration\nDESCRIPTION: This snippet demonstrates how to update the ESLint configuration when migrating from `eslint-plugin-emotion` to `@emotion/eslint-plugin` in Emotion 11. It involves changing the plugin name and updating rule prefixes.\nSOURCE: https://github.com/emotion-js/emotion/blob/main/packages/eslint-plugin/CHANGELOG.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"plugins\": [\"@emotion\"]\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"rules\": {\n    \"@emotion/rule-name\": \"value\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect Emotion CSS Import (JSX)\nDESCRIPTION: This snippet demonstrates an incorrect import from the `@emotion/css` package.  This is flagged as an error by the ESLint rule because it's recommended to use `@emotion/react` when working with React. The rule aims to prevent the use of vanilla Emotion CSS in React projects. No dependencies are explicitly shown, but it implies the presence of an Emotion.js project set up with ESLint.\nSOURCE: https://github.com/emotion-js/emotion/blob/main/packages/eslint-plugin/docs/rules/no-vanilla.md#_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\nimport { css } from '@emotion/css'\n```\n\n----------------------------------------\n\nTITLE: Incorrect Styled Import\nDESCRIPTION: This code snippet demonstrates the incorrect way to import styled components, which will cause an error due to importing from 'react-emotion' instead of '@emotion/styled'. This is invalid in emotion 10 and above.\nSOURCE: https://github.com/emotion-js/emotion/blob/main/packages/eslint-plugin/docs/rules/styled-import.md#_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\nimport styled from 'react-emotion'\n```\n\n----------------------------------------\n\nTITLE: Publishing Packages with Yarn and NPM\nDESCRIPTION: This command publishes the updated packages to npm using the `yarn release` command. It requires an OTP code for 2FA authentication.  If the 2FA code times out, the command can be run again with a new code, and only the unpublished packages will be published.\nSOURCE: https://github.com/emotion-js/emotion/blob/main/RELEASING.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nNPM_CONFIG_OTP=PUTANOTPCODEHERE yarn release\n```\n\n----------------------------------------\n\nTITLE: Importing Named Export\nDESCRIPTION: Shows how to import a specific named export from a module.  The `module`, `import`, and `export` options are used to configure the import statement.\nSOURCE: https://github.com/emotion-js/emotion/blob/main/packages/babel-plugin-jsx-pragmatic/README.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  module: \"whatever\",\n  import: \"x\",\n  export: \"something\",\n}\n// import {something as x} from \"whatever\"\n```\n\n----------------------------------------\n\nTITLE: Using JSX Factory with @emotion/react in TSX\nDESCRIPTION: This code snippet demonstrates how to specify the JSX factory at the top of a file when you are unable to upgrade to the `react-jsx` transform. It shows the necessary pragma and import statement required to use Emotion's JSX factory and the css prop. Note that you cannot use the shorthand syntax `<></>` for React fragments.\nSOURCE: https://github.com/emotion-js/emotion/blob/main/docs/typescript.mdx#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n/** @jsx jsx */\nimport { jsx } from '@emotion/react'\n```\n\n----------------------------------------\n\nTITLE: Installing @emotion/jest\nDESCRIPTION: This command installs the `@emotion/jest` package as a dev dependency. This package provides serializers for Jest to display Emotion styles in snapshots.\nSOURCE: https://github.com/emotion-js/emotion/blob/main/docs/testing.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save-dev @emotion/jest\n```\n\n----------------------------------------\n\nTITLE: Configure ESLint rules\nDESCRIPTION: Configures the ESLint configuration file (.eslintrc) to enable the @emotion/jsx-import rule. This rule can enforce specific import styles for JSX related to Emotion.\nSOURCE: https://github.com/emotion-js/emotion/blob/main/packages/eslint-plugin/README.md#_snippet_3\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"rules\": {\n    \"@emotion/jsx-import\": \"error\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Gatsby Plugin Installation\nDESCRIPTION: This snippet shows the installation of `gatsby-plugin-emotion`.\nSOURCE: https://github.com/emotion-js/emotion/blob/main/docs/ssr.mdx#_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nyarn add gatsby-plugin-emotion\n```\n\n----------------------------------------\n\nTITLE: Using ClassNames Component for Prop-Based Styling\nDESCRIPTION: This code demonstrates using the `ClassNames` component to apply styles to components that accept class name props (e.g., `wrapperClassName`).  This provides a way to inject styles into existing components during the Emotion 10 migration.\nSOURCE: https://github.com/emotion-js/emotion/blob/main/docs/migrating-to-emotion-10.mdx#_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\nimport { css } from 'emotion'\nimport { SomeComponent } from 'somewhere'\nlet element = (\n  <SomeComponent\n    wrapperClassName={css`\n      color: hotpink;\n    `}\n  />\n)\n\n// ↓ ↓ ↓ ↓ ↓ ↓\n\nimport { ClassNames } from '@emotion/core'\nimport { SomeComponent } from 'somewhere'\n\nlet element = (\n  <ClassNames>\n    {({ css }) => (\n      <SomeComponent\n        wrapperClassName={css`\n          color: hotpink;\n        `}\n      />\n    )}\n  </ClassNames>\n)\n```\n\n----------------------------------------\n\nTITLE: Installing @emotion/primitives with npm\nDESCRIPTION: This code snippet shows how to install the @emotion/primitives package using npm. It is a command-line instruction to add the package to a project.\nSOURCE: https://github.com/emotion-js/emotion/blob/main/packages/primitives/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install @emotion/primitives\n```\n\n----------------------------------------\n\nTITLE: Configuring with Custom Pragma 'x'\nDESCRIPTION: Shows how to configure the plugins when the desired JSX pragma is simply `x`, importing the default export from `/something/whatever` as `x`.\nSOURCE: https://github.com/emotion-js/emotion/blob/main/packages/babel-plugin-jsx-pragmatic/README.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  plugins: [\n    [\n      '@babel/plugin-transform-react-jsx',\n      {\n        pragma: 'x'\n      }\n    ],\n\n    [\n      '@emotion/babel-plugin-jsx-pragmatic',\n      {\n        module: '/something/whatever',\n        import: 'x'\n      }\n    ]\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: JSX Import Source Declaration\nDESCRIPTION: Declares the JSX import source to use `@emotion/react` instead of the default React JSX runtime. This is required when using a zero-config tool with automatic detection of the JSX runtime.\nSOURCE: https://github.com/emotion-js/emotion/blob/main/docs/css-prop.mdx#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n/** @jsxImportSource @emotion/react */\n```\n\n----------------------------------------\n\nTITLE: Styled Component with CSS Variables (JavaScript)\nDESCRIPTION: This code demonstrates how to use CSS variables within a styled component to handle dynamic styling based on props.  It defines a `Button` component whose background color is controlled by the `--bg` CSS variable, which is set inline using the `style` prop.\nSOURCE: https://github.com/emotion-js/emotion/blob/main/docs/extract-static.mdx#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst Button = styled('button')`\n  background-color: var(--bg);\n  padding: 10px;\n`\n<Button style={{ '--bg': props.success ? '#8BC34A' : '#2395f3' }}/>\n```\n\n----------------------------------------\n\nTITLE: Styling with Emotion CSS Function\nDESCRIPTION: Demonstrates how to use the css function within styled components to define styles with dynamic values. Resolves issue where styles are lost within nested factory calls. Requires @emotion/core.\nSOURCE: https://github.com/emotion-js/emotion/blob/main/packages/primitives/CHANGELOG.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst bgColor = color => css`\n  background-color: ${color};\n`\n\nconst Text = styled.Text`\n  color: hotpink;\n  ${({ backgroundColor }) => bgColor(backgroundColor)};\n`\n```\n\n----------------------------------------\n\nTITLE: Incorrect Emotion Style - Object Syntax (String Preference)\nDESCRIPTION: This code snippet demonstrates an incorrect usage of Emotion's `styled` function when the preferred syntax is set to 'string'. It uses an object to define the style for the `h1` element, which violates the rule. The dependency is `@emotion/styled`.\nSOURCE: https://github.com/emotion-js/emotion/blob/main/packages/eslint-plugin/docs/rules/syntax-preference.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst H1 = styled.h1({\n  color: red\n})\n// --> Styles should be written using strings.\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst H1 = styled('h1')({\n  color: red\n})\n// --> Styles should be written using strings.\n```\n\n----------------------------------------\n\nTITLE: Importing and Using Emotion Unitless Properties in JSX\nDESCRIPTION: This code snippet demonstrates how to import the `unitless` object from the `@emotion/unitless` package and how to use it to check if a CSS property should be unitless or not. It checks if `unitless.flex` is equal to 1 (meaning it's a unitless property) and if `unitless.padding` is undefined (meaning it is not a unitless property).\nSOURCE: https://github.com/emotion-js/emotion/blob/main/packages/unitless/README.md#_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\nimport unitless from '@emotion/unitless'\n\nunitless.flex === 1\n\nunitless.padding === undefined\n```\n\n----------------------------------------\n\nTITLE: Styling Components with Emotion CSS in React Native\nDESCRIPTION: This example demonstrates how to apply styles to React Native components using Emotion's CSS prop.  It shows how to define CSS styles inline and apply them to a Text component. The bgColor variable is used to generate styles based on a color prop. This example demonstrates a fix related to nested factory calls that was applied in version 11.0.0.\nSOURCE: https://github.com/emotion-js/emotion/blob/main/packages/native/CHANGELOG.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst bgColor = color => css`\n  background-color: ${color};\n`\n\nconst Text = styled.Text`\n  color: hotpink;\n  ${({ backgroundColor }) => bgColor(backgroundColor)};\n`\n```\n\n----------------------------------------\n\nTITLE: Add Emotion Babel Plugin (Bash)\nDESCRIPTION: This command installs the `babel-plugin-emotion` as a development dependency to enable Emotion's features during Babel compilation. It's a prerequisite for using Emotion's styling capabilities in a project.\nSOURCE: https://github.com/emotion-js/emotion/blob/main/docs/extract-static.mdx#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn add --dev babel-plugin-emotion\n```\n\n----------------------------------------\n\nTITLE: Composing styles in Emotion 9 with css and cx\nDESCRIPTION: This code snippet demonstrates how to compose styles in Emotion 9 using the `css` function to create CSS classes and the `cx` function to combine them. This approach relies on class names to apply styles conditionally.\nSOURCE: https://github.com/emotion-js/emotion/blob/main/docs/migrating-to-emotion-10.mdx#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { css, cx } from 'emotion'\n\nlet basic = css`\n  color: green;\n`\n\nlet important = css`\n  color: hotpink;\n`\n\nconst SomeComponent = props => (\n  <div className={cx(basic, props.important && important)} />\n)\n```\n\n----------------------------------------\n\nTITLE: JSX Transformation with React.createElement\nDESCRIPTION: Demonstrates how JSX is transformed into `React.createElement` calls by default when using Babel. It showcases the basic transformation without any custom pragma configurations.\nSOURCE: https://github.com/emotion-js/emotion/blob/main/packages/babel-plugin-jsx-pragmatic/README.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n<Some jsx=\"element\" />\n```\n\nLANGUAGE: javascript\nCODE:\n```\nReact.createElement(Some, { jsx: 'element' })\n```\n\n----------------------------------------\n\nTITLE: Starting the Development Server (Next.js)\nDESCRIPTION: This snippet demonstrates how to start the Next.js development server using either npm or yarn. The server will typically run on http://localhost:3000, allowing you to view and interact with the application in your browser.\nSOURCE: https://github.com/emotion-js/emotion/blob/main/playgrounds/nextjs/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n# or\nyarn dev\n```\n\n----------------------------------------\n\nTITLE: Install @emotion/is-prop-valid with Yarn\nDESCRIPTION: This command installs the @emotion/is-prop-valid package as a dependency using Yarn.  It allows you to use the isPropValid function within your JavaScript or TypeScript projects.\nSOURCE: https://github.com/emotion-js/emotion/blob/main/packages/is-prop-valid/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @emotion/is-prop-valid\n```\n\n----------------------------------------\n\nTITLE: Using isPropValid from @emotion/is-prop-valid\nDESCRIPTION: This code snippet demonstrates how to import and use the isPropValid function from the @emotion/is-prop-valid package. It checks if 'href' and 'someRandomProp' are valid HTML/SVG properties and returns a boolean value.\nSOURCE: https://github.com/emotion-js/emotion/blob/main/packages/is-prop-valid/README.md#_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport isPropValid from '@emotion/is-prop-valid'\n\nisPropValid('href') // true\n\nisPropValid('someRandomProp') // false\n```\n\n----------------------------------------\n\nTITLE: Using @emotion/weak-memoize\nDESCRIPTION: Demonstrates the usage of @emotion/weak-memoize to memoize a function that accepts an object as an argument. The memoized function returns a new object with a property derived from the input object.\nSOURCE: https://github.com/emotion-js/emotion/blob/main/packages/weak-memoize/README.md#_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport weakMemoize from '@emotion/weak-memoize'\n\nlet doThing = weakMemoize(({ someProperty }) => {\n  return { newName: someProperty }\n})\n\nlet obj = { someProperty: true }\n\nlet firstResult = doThing(obj)\n\nlet secondResult = doThing(obj)\n\nfirstResult === secondResult // true\n\nlet newObj = { someProperty: true }\n\nlet thirdResult = doThing(newObj)\n\nthirdResult === firstResult // false\n```\n\n----------------------------------------\n\nTITLE: Configure eslint-plugin-react to Ignore CSS Prop (JSON)\nDESCRIPTION: This configuration snippet modifies the 'react/no-unknown-property' rule in eslint-plugin-react to ignore the 'css' prop. This prevents errors that occur because @emotion/react uses the 'css' prop for styling, but it's not a standard DOM attribute. Dependencies: eslint-plugin-react.\nSOURCE: https://github.com/emotion-js/emotion/blob/main/docs/eslint-plugin-react.mdx#_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"rules\": {\n    \"react/no-unknown-property\": [\"error\", { \"ignore\": [\"css\"] }]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Dependencies with Yarn\nDESCRIPTION: This command ensures that all project dependencies are up to date before proceeding with the release process. Running `yarn` will install any missing dependencies and update existing ones to their latest versions.\nSOURCE: https://github.com/emotion-js/emotion/blob/main/RELEASING.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn\n```\n\n----------------------------------------\n\nTITLE: Fixing Nested Factory Calls in Emotion with CSS\nDESCRIPTION: This JavaScript snippet demonstrates how to fix an issue with styles being lost in nested factory calls within Emotion's css function. It defines a bgColor function that returns a tagged template literal for background-color styling, and a Text component that utilizes both direct styling and the bgColor function.\nSOURCE: https://github.com/emotion-js/emotion/blob/main/packages/primitives/CHANGELOG.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst bgColor = color => css`\n  background-color: ${color};\n`\n\nconst Text = styled.Text`\n  color: hotpink;\n  ${({ backgroundColor }) => bgColor(backgroundColor)};\n`\n```\n\n----------------------------------------\n\nTITLE: StyleSheet Usage with All Options\nDESCRIPTION: This example demonstrates the usage of the StyleSheet with all possible options. It creates a container, appends it to the document head, and then initializes a StyleSheet with a nonce, key, and container. Finally, it inserts a CSS rule and then flushes the sheet, removing the style tag.\nSOURCE: https://github.com/emotion-js/emotion/blob/main/packages/sheet/README.md#_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport { StyleSheet } from '@emotion/sheet'\n\nconst container = document.createElement('div')\n\ndocument.head.appendChild(container)\n\nconst sheet = new StyleSheet({\n  nonce: 'some-nonce',\n  key: 'some-key',\n  container\n})\n\nsheet.insert('html { color: hotpink; }')\n\nsheet.flush()\n```\n\n----------------------------------------\n\nTITLE: Install @emotion/sheet using yarn\nDESCRIPTION: This command adds the @emotion/sheet package to your project using yarn.  It is a necessary prerequisite before using the library in your JavaScript or TypeScript code.\nSOURCE: https://github.com/emotion-js/emotion/blob/main/packages/sheet/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @emotion/sheet\n```\n\n----------------------------------------\n\nTITLE: Installing Emotion React package\nDESCRIPTION: This command installs the @emotion/react package, which is required to use Emotion with React. It adds the package to your project's dependencies.\nSOURCE: https://github.com/emotion-js/emotion/blob/main/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save @emotion/react\n```\n\n----------------------------------------\n\nTITLE: Configure Emotion Babel Plugin (JSON)\nDESCRIPTION: This JSON configuration snippet shows how to configure the `babel-plugin-emotion` in a `.babelrc` file. The `extractStatic` option is set to `true`, which enables the (now deprecated) static extraction of CSS during compilation.  This is included for historical context, but is not recommended.\nSOURCE: https://github.com/emotion-js/emotion/blob/main/docs/extract-static.mdx#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"plugins\": [[\"emotion\", { \"extractStatic\": true }]]\n}\n```\n\n----------------------------------------\n\nTITLE: Styled Component Definition (JSX)\nDESCRIPTION: This code defines a styled `<h1>` element using `react-emotion`.  It imports `styled` from `react-emotion` and uses it to create a component named `H1` with the specified CSS properties.\nSOURCE: https://github.com/emotion-js/emotion/blob/main/docs/extract-static.mdx#_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport styled from 'react-emotion'\n\nconst H1 = styled('h1')`\n  color: #ffd43b;\n`\n```\n\n----------------------------------------\n\nTITLE: Install @emotion/weak-memoize\nDESCRIPTION: Command to install the @emotion/weak-memoize package using yarn. This package provides a memoization function.\nSOURCE: https://github.com/emotion-js/emotion/blob/main/packages/weak-memoize/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @emotion/weak-memoize\n```\n\n----------------------------------------\n\nTITLE: Incorrect JSX example without @emotion/react import\nDESCRIPTION: This example demonstrates incorrect code that is missing the necessary import of `jsx` from `@emotion/react`. This causes issues as Emotion needs this import to function correctly with JSX.\nSOURCE: https://github.com/emotion-js/emotion/blob/main/packages/eslint-plugin/docs/rules/jsx-import.md#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nlet element = (\n  <div\n    css={{\n      color: 'green'\n    }}\n  />\n)\n```\n\n----------------------------------------\n\nTITLE: Restoring Theme to 'any' Type in Emotion with TypeScript\nDESCRIPTION: This code shows how to restore the `theme` type to `any` in Emotion with TypeScript, providing compatibility with older code that relied on the theme being dynamically typed. This can be useful when migrating older codebases or when working with themes that have a flexible structure.\nSOURCE: https://github.com/emotion-js/emotion/blob/main/docs/typescript.mdx#_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nimport '@emotion/react'\n\ndeclare module '@emotion/react' {\n  export interface Theme extends Record<string, any> {}\n}\n```\n\n----------------------------------------\n\nTITLE: Installing @emotion/primitives with yarn\nDESCRIPTION: This code snippet shows how to install the @emotion/primitives package using yarn. It is a command-line instruction to add the package to a project.\nSOURCE: https://github.com/emotion-js/emotion/blob/main/packages/primitives/README.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nyarn add @emotion/primitives\n```\n\n----------------------------------------\n\nTITLE: Next.js Babel Preset Configuration\nDESCRIPTION: Configures Babel within a Next.js project to use the new React JSX runtime and Emotion's Babel plugin.  This setup customizes the `next/babel` preset to properly handle Emotion's `jsx` function with the new JSX transform.\nSOURCE: https://github.com/emotion-js/emotion/blob/main/docs/css-prop.mdx#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"presets\": [\n    [\n      \"next/babel\",\n      {\n        \"preset-react\": {\n          \"runtime\": \"automatic\",\n          \"importSource\": \"@emotion/react\"\n        }\n      }\n    ]\n  ],\n  \"plugins\": [\"@emotion/babel-plugin\"]\n}\n```"
  }
]