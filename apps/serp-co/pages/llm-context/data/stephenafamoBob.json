[
  {
    "owner": "stephenafamo",
    "repo": "bob",
    "content": "TITLE: Executing a Built Query with Database in Go\nDESCRIPTION: Shows the complete process of building and executing a query with Bob. It uses context for timeout/cancellation, builds the query with MustBuild, and executes it with ExecContext.\nSOURCE: https://github.com/stephenafamo/bob/blob/main/website/docs/query-builder/using-queries.md#2025-04-19_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nctx := context.Background()\n\n// Build the query\nmyquery, myargs := psql.Insert(...).MustBuild(ctx)\n\n// Execute the query\nerr := db.ExecContext(ctx, myquery, myargs...)\n```\n\n----------------------------------------\n\nTITLE: Defining the Bob Executor Interface in Go\nDESCRIPTION: The core Executor interface that provides methods for querying and executing SQL statements with context. It requires implementing two methods: QueryContext for data retrieval operations and ExecContext for operations that modify data.\nSOURCE: https://github.com/stephenafamo/bob/blob/main/website/docs/sql-executor/intro.md#2025-04-19_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ntype Executor interface {\n\tQueryContext(ctx context.Context, query string, args ...any) (scan.Rows, error)\n\tExecContext(context.Context, string, ...any) (sql.Result, error)\n}\n```\n\n----------------------------------------\n\nTITLE: Using Parameters in Bob SQL Queries for SQL Injection Prevention in Go\nDESCRIPTION: This snippet demonstrates how to use sm.Arg() to add parameterized queries across different database systems. The example shows how placeholders are correctly generated for Postgres ($1, $2), SQLite (?1, ?2), and MySQL (?, ?) while maintaining the same code structure.\nSOURCE: https://github.com/stephenafamo/bob/blob/main/website/docs/query-builder/parameters.md#2025-04-19_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n// args: 100, \"Stephen\"\n// Postgres: SELECT * from users WHERE \"id\" = $1 AND \"name\" = $2\n// SQLite: SELECT * from users WHERE \"id\" = ?1 AND \"name\" = ?2\n// MySQL: SELECT * from users WHERE \"id\" = ? AND \"name\" = ?\npsql.Select(\n    sm.From(\"users\"),\n    sm.Where(psql.Quote(\"id\").EQ(psql.Arg(100))),\n    sm.Where(psql.Quote(\"name\").EQ(psql.Arg(\"Stephen\"))),\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Type Replacements in BOB\nDESCRIPTION: This configuration allows overriding types that the driver has inferred by specifying match conditions for tables and columns. Match conditions include column name, database type, default value, comments, and other properties. Once a match is found, the specified replacement type is applied.\nSOURCE: https://github.com/stephenafamo/bob/blob/main/website/docs/code-generation/configuration.md#2025-04-19_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nreplacements:\n  - tables: [\"table_name\"] # What tables to look inside. Matches all tables if empty\n\n    # The match is a drivers.Column struct, and matches on almost all fields.\n    # Notable exception for the unique bool. Matches are done\n    # with \"logical and\" meaning it must match all specified matchers.\n    # Boolean values are only checked if all the string specifiers match first,\n    # and they must always match.\n    #\n    # Note there is precedence for types.match, more specific things should appear\n    # further down in the config as once a matching rule is found it is executed\n    # immediately.\n    match:\n      name: \"username\" # Matches the column name\n      db_type: \"varchar(255)\" # Matches the database type\n      default: \"NULL\" # Matches the default value\n      comment: \"The username\" # Matches the column comment\n      nullable: true # Matches the nullable value. Defaults to false.\n      generated: false # Matches the generated value. Defaults to false.\n      autoincr: false # Matches the autoincr value. Defaults to false.\n\n    # The replace directive should either reference a pre-configured type, or a type\n    # defined in the `types` configuration.\n    replace: \"mynull.String\"\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Progressive Enhancement in SQL Query Building with bob in Go\nDESCRIPTION: This example shows multiple ways to build the same SQL query in bob, demonstrating the progressive enhancement principle. It builds a SELECT query with window functions (LEAD) and demonstrates how the same expressions can be written using string literals or structured function calls for better readability and type safety.\nSOURCE: https://github.com/stephenafamo/bob/blob/main/website/docs/query-builder/principles.md#2025-04-19_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n// Assuming we're building the following query\n/*\nSELECT status,\n    LEAD(created_date, 1, NOW())\n    OVER(PARTITION BY presale_id ORDER BY created_date) -\n    created_date AS \"difference\"\nFROM presales_presalestatus\n*/\n\n// different ways to express \"SELECT status\"\npsql.Select(sm.Columns(\"status\")) // SELECT status\npsql.Select(sm.Columns(sm.Quote(\"status\"))) // SELECT \"status\"\n\n// Ways to express LEAD(created_date, 1, NOW())\n\"LEAD(created_date, 1, NOW()\"\npsql.F(\"LEAD\", \"created_date\", 1, \"NOW()\")\npsql.F(\"LEAD\", \"created_date\", 1, sm.F(\"NOW\"))\n\n// Ways to express PARTITION BY presale_id ORDER BY created_date\n\"PARTITION BY presale_id ORDER BY created_date\"\nsm.Window(\"\").PartitionBy(\"presale_id\").OrderBy(\"created_date\")\n\n// Expressing LEAD(...) OVER(...)\n\"LEAD(created_date, 1, NOW()) OVER(PARTITION BY presale_id ORDER BY created_date)\"\npsql.F(\"LEAD\", \"created_date\", 1, psql.F(\"NOW\")).\n    Over().\n    PartitionBy(\"presale_id\").\n    OrderBy(\"created_date\")\n\n// The full query\npsql.Select(\n    sm.Columns(\n        \"status\",\n        psql.F(\"LEAD\", \"created_date\", 1, psql.F(\"NOW\")).\n            Over().\n            PartitionBy(\"presale_id\").\n            OrderBy(\"created_date\").\n            Minus(\"created_date\").\n            As(\"difference\")),\n    sm.From(\"presales_presalestatus\")),\n)\n```\n\n----------------------------------------\n\nTITLE: Building Queries with Generated Filters in Go\nDESCRIPTION: Examples of using generated filters to build complex queries in a type-safe manner.\nSOURCE: https://github.com/stephenafamo/bob/blob/main/website/docs/code-generation/usage.md#2025-04-19_snippet_14\n\nLANGUAGE: go\nCODE:\n```\n// SELECT * FROM \"jets\" WHERE \"jets\".\"id\" = 100\nmodels.Jets.Query(models.SelectWhere.Jets.ID.EQ(100))\n\n// SELECT * FROM \"users\"\n// WHERE \"users\".\"name\" IS NULL\n// OR \"users\".\"email\" IS NOT NULL\n// OR (\"users\".\"age\" > 21 AND \"users\".\"location\" IS NOT NULL)\nusers, err := models.Users.Query(\n    psql.WhereOr(\n        models.SelectWhere.Users.Name.IsNull(),\n        models.SelectWhere.Users.Email.IsNotNull(),\n        psql.WhereAnd(\n            models.SelectWhere.Users.Age.GT(21),\n            models.SelectWhere.Users.Location.IsNotNull(),\n        ),\n    ),\n).All(ctx, db)\n```\n\n----------------------------------------\n\nTITLE: Defining Table Model Structure in Go\nDESCRIPTION: Shows how to define a table model with its primary key and setter structure using Bob ORM. Includes type definitions and table initialization.\nSOURCE: https://github.com/stephenafamo/bob/blob/main/website/docs/models/table.md#2025-04-19_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ntype User struct {\n    ID        int     `db:\",pk\"` // needed to know the primary key when updating\n    VehicleID int\n    Name      string\n    Email     string\n}\n\n// An interface to implement to make the model a table\n// this returns the values of the primary keys\nfunc (u User) PrimaryKeyVals() bob.Expression {\n    return psql.Arg(u.ID)\n}\n\n// UserSetter must implement orm.Setter\ntype UserSetter struct {\n    ID        omit.Val[int]\n    VehicleID omit.Val[int]\n    Name      omit.Val[string]\n    Email     omit.Val[string]\n}\n\nvar userTable = psql.NewTable[User, UserSetter](\"public\", \"users\")\n```\n\n----------------------------------------\n\nTITLE: Common SQL Operators Implementation\nDESCRIPTION: A comprehensive list of method signatures for common SQL operators that are implemented across all dialects. These methods are available on the dialect's Expression type and translate directly to SQL operations. The operators cover null checks, comparisons, logical operations, and string concatenation.\nSOURCE: https://github.com/stephenafamo/bob/blob/main/website/docs/query-builder/operators.md#2025-04-19_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nIsNull()            -> X IS NULL\nIsNotNull()         -> X IS NOT NULL\nIsDistinctFrom(y)   -> X IS DISTINCT FROM Y\nIsNotDistinctFrom(y)-> X IS NOT DISTINCT FROM Y\nMinus(y)           -> X - Y\nOP(op, y)          -> X op Y\nEQ(y)              -> X = Y\nNE(y)              -> X <> Y\nLT(y)              -> X < Y\nLTE(y)             -> X <= Y\nGT(y)              -> X > Y\nGTE(y)             -> X >= Y\nIn(...)            -> X IN (y, z)\nNotIn(...)         -> X NOT IN (y, z)\nOr(y)              -> X OR Y\nAnd(y)             -> X AND Y\nConcat(y)          -> X || Y\nBetween(y, z)      -> X BETWEEN Y AND Z\nNotBetween(y, z)   -> X NOT BETWEEN Y AND Z\nAs(alias)          -> X as \"alias\"\n```\n\n----------------------------------------\n\nTITLE: Conditional Query Building with Apply() Method\nDESCRIPTION: This example shows how to build conditional queries by using the Apply() method to add WHERE clauses based on runtime conditions. This allows for dynamic query construction while maintaining the fluent interface.\nSOURCE: https://github.com/stephenafamo/bob/blob/main/website/docs/query-builder/building-queries.md#2025-04-19_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nq := psql.Select(\n\tsm.From(\"projects\"),\n) // SELECT * FROM projects\n\nif !user.IsAdmin {\n\tq.Apply(\n\t\tsm.Where(psql.Quote(\"user_id\").EQ(psql.Arg(user.ID))),\n\t) // SELECT * FROM projects WHERE \"user_id\" = $1\n}\n```\n\n----------------------------------------\n\nTITLE: Query Interface Implementation in Go\nDESCRIPTION: Defines the Query interface with the WriteQuery method that is the foundation for building database queries in Bob. It includes parameters for context, writer, and starting argument index.\nSOURCE: https://github.com/stephenafamo/bob/blob/main/website/docs/query-builder/using-queries.md#2025-04-19_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ntype Query interface {\n\t// start is the index of the args, usually 1.\n\t// it is present to allow re-indexing in cases of a subquery\n\t// The method returns the value of any args placed\n\t// An `io.Writer` is used for efficiency when building the query.\n\tWriteQuery(ctx context.Context, w io.Writer, start int) (args []any, err error)\n}\n```\n\n----------------------------------------\n\nTITLE: Annotated SQL Query with Custom Types\nDESCRIPTION: Advanced SQL query with annotations to customize the generated code, including result types and column specifications.\nSOURCE: https://github.com/stephenafamo/bob/blob/main/website/docs/code-generation/queries.md#2025-04-19_snippet_6\n\nLANGUAGE: sql\nCODE:\n```\n-- AllUsers models.User:models.UserSlice:false\nSELECT id /* :big.Int:nnull */, name /* username */ FROM users WHERE id = ? /* ::notnull */;\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Relationships in BOB\nDESCRIPTION: This configuration allows defining custom relationships between tables that might not be captured by foreign key constraints. It specifies the relationship name, the source and destination tables, and column mappings between them, with optional settings for how the relationship should be handled.\nSOURCE: https://github.com/stephenafamo/bob/blob/main/website/docs/code-generation/configuration.md#2025-04-19_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nrelationships:\n  users: # The table name\n    - name: \"custom_videos_relationship\" # A unique identifier used to configure aliases\n      never_required: true # If true, the relationship would never be assumed to be required. This means that the factory will never auto-generate related objects for it.\n      sides:\n        - from: \"users\" # Name of the source of the relationship\n          to: \"videos\" # Table name of the other side of the relation\n          # mapping of columns from source to destination\n          columns:\n            - [id, user_id]\n\n          # Which side to modify, \"from\" or \"to\"\n          # If not set, it will try to \"guess\" which side to modify\n          # - if only one of the sides contains a primary key,\n          #   it will choose to modify the other side\n          # - If (both or none) of them contains a primary key,\n          #   it will try with \"Unique\" columns\n          # - If it still cannot choose, it defaults to \"to\"\n          modify: \"\" | from\" | \"to\"\n```\n\n----------------------------------------\n\nTITLE: Building a Query with Bob in Go\nDESCRIPTION: Shows how to build a query using the Build method that returns the query string and arguments. This is a common pattern for generating SQL queries with Bob.\nSOURCE: https://github.com/stephenafamo/bob/blob/main/website/docs/query-builder/using-queries.md#2025-04-19_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nqueryString, args, err := psql.Select(...).Build(ctx)\n```\n\n----------------------------------------\n\nTITLE: Implementing Upsert Operations\nDESCRIPTION: Demonstrates how to perform upsert operations with different SQL dialects including PostgreSQL, SQLite, and MySQL.\nSOURCE: https://github.com/stephenafamo/bob/blob/main/website/docs/models/table.md#2025-04-19_snippet_4\n\nLANGUAGE: go\nCODE:\n```\n// PostgreSQL and SQLite\nuser, err := models.UsersTable.Insert(\n\t&UserSetter{\n\t\tID: omit.From(1),\n\t\tEmail: omit.From(\"bob@foo.bar\"),\n\t},\n\tim.OnConflict(\"id\").DoUpdate(im.SetExcluded(\"email\"))).One(ctx, db)\n\n// MySQL\nuser, err := models.UsersTable.Insert(\n    &UserSetter{\n        ID: omit.From(1),\n        Email: omit.From(\"bob@foo.bar\"),\n    },\n    im.OnDuplicateKeyUpdate(im.UpdateWithValues(\"email\"))).One(ctx, db)\n```\n\n----------------------------------------\n\nTITLE: Using Generated Join Helpers in Go\nDESCRIPTION: Example of using generated join helpers to create complex join queries.\nSOURCE: https://github.com/stephenafamo/bob/blob/main/website/docs/code-generation/usage.md#2025-04-19_snippet_15\n\nLANGUAGE: go\nCODE:\n```\n// SELECT * FROM \"jets\"\n// INNER JOIN \"pilots\" ON \"pilots\".\"id\" = \"jets\".\"pilot_id\"\n// INNER JOIN \"airports\" ON \"airports\".\"id\" = \"jets\".\"airport_id\"\nmodels.Jets.Query(\n    models.SelectJoins.Jets.InnerJoin.Pilots(ctx),\n    models.SelectJoins.Jets.InnerJoin.Airports(ctx),\n).All(ctx, db)\n```\n\n----------------------------------------\n\nTITLE: Configuring Conditional Relationships in BOB\nDESCRIPTION: This configuration shows how to define relationships with additional conditions using 'to_where'. The example adds a relationship to teams for verified users only, by specifying a condition on the 'verified' column.\nSOURCE: https://github.com/stephenafamo/bob/blob/main/website/docs/code-generation/configuration.md#2025-04-19_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nrelationships:\n  users:\n    - name: \"users_to_videos_through_teams\"\n      sides:\n        - from: \"teams\"\n          to: \"users\"\n          columns: [[id, team_id]]\n          to_where:\n            - column: \"verified\"\n              sql_value: \"true\"\n              go_value: \"true\"\n```\n\n----------------------------------------\n\nTITLE: Building Complex Expressions with Chained Operators\nDESCRIPTION: This snippet demonstrates how to build complex SQL expressions using the fluent interface with chained operators. It shows two equivalent ways to create AND conditions, either through method chaining or using the And() helper function.\nSOURCE: https://github.com/stephenafamo/bob/blob/main/website/docs/query-builder/building-queries.md#2025-04-19_snippet_2\n\nLANGUAGE: go\nCODE:\n```\n// Query: ($1 >= 50) AND (\"name\" IS NOT NULL)\n// Args: 'Stephen'\npsql.Arg(\"Stephen\").GTE(psql.Raw(50)).\n\tAnd(psql.Quote(\"name\").IsNotNull())\n\n// OR\n\npsql.And(\n\tpsql.Arg(\"Stephen\").GTE(psql.Raw(50)),\n\tpsql.Quote(\"name\").IsNotNull(),\n)\n```\n\n----------------------------------------\n\nTITLE: Performing Single and Bulk Inserts\nDESCRIPTION: Shows different methods of performing INSERT operations, including single record insertion and bulk inserts using slices.\nSOURCE: https://github.com/stephenafamo/bob/blob/main/website/docs/models/table.md#2025-04-19_snippet_2\n\nLANGUAGE: go\nCODE:\n```\n// Single insert\nuser, err := models.UsersTable.Insert(&UserSetter{\n    ID: omit.From(100),\n    // add other columns\n}).One(ctx, db)\n\n// Bulk insert with multiple setters\nusers, err := models.UsersTable.Insert(\n    &UserSetter{ID: omit.From(100)},\n    &UserSetter{ID: omit.From(101)},\n    &UserSetter{ID: omit.From(102)},\n).All(ctx, db)\n\n// Bulk insert with slice\nsetters := []*UserSetter{\n    {ID: omit.From(100)},\n    {ID: omit.From(101)},\n    {ID: omit.From(102)},\n}\n\nusers, err := models.UserTable.Insert(bob.ToMods(setters...)).All(ctx, db)\n```\n\n----------------------------------------\n\nTITLE: Defining a Hook Function in Go for Bob ORM\nDESCRIPTION: This snippet demonstrates the signature for a hook function in Bob ORM. The function takes a context, an executor, and a generic type T as parameters, and returns a potentially modified context and an error.\nSOURCE: https://github.com/stephenafamo/bob/blob/main/website/docs/models/hooks.md#2025-04-19_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nfunc myHook(ctx context.Context, exec bob.Executor, t T) (context.Context, error) {\n    return ctx, nil\n}\n```\n\n----------------------------------------\n\nTITLE: Performing Updates on Records\nDESCRIPTION: Examples of updating single and multiple records in the database using Bob ORM.\nSOURCE: https://github.com/stephenafamo/bob/blob/main/website/docs/models/table.md#2025-04-19_snippet_3\n\nLANGUAGE: go\nCODE:\n```\n// Update single record\nerr := user.Update(ctx, db, &UserSetter{VehicleID: omit.From(200)})\n\n// Update multiple records\nerr := users.UpdateAll(ctx, db, UserSetter{VehicleID: omit.From(200)})\n```\n\n----------------------------------------\n\nTITLE: Executing Query with bob.All to Return Struct Slices in Go\nDESCRIPTION: Example of using bob.All to execute a query and return results as a slice of structs. This function works with bob.Query objects and uses scan.StructMapper to map the database results to the specified type. The example shows opening a database connection, creating a query, and executing it to get a slice of userObj.\nSOURCE: https://github.com/stephenafamo/bob/blob/main/website/docs/sql-executor/all.md#2025-04-19_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ntype userObj struct {\n    ID int\n    Name string\n}\n\nctx := context.Background()\ndb, err := bob.Open(\"postgres\", \"...\")\nif err != nil {\n    // ...\n}\n\nq := psql.Select(...)\n\n// user is of type []userObj{}\nusers, err := bob.All(ctx, db, q, scan.StructMapper[userObj]())\nif err != nil {\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Inserting Related Models\nDESCRIPTION: Shows how to insert new related models using the InsertXXX methods for both to-one and to-many relationships.\nSOURCE: https://github.com/stephenafamo/bob/blob/main/website/docs/code-generation/relationships.md#2025-04-19_snippet_2\n\nLANGUAGE: go\nCODE:\n```\n// to-one\njet.InsertPilot(ctx, db, &PilotSetter{...})\n\n// to-many\npilot.InsertJets(ctx, db, &JetSetter{...}, &JetSetter{...})\n```\n\n----------------------------------------\n\nTITLE: Preloading with Table Aliases and Multiple Relations\nDESCRIPTION: Demonstrates preloading multiple relations with explicit table aliases to allow ordering by columns from preloaded tables.\nSOURCE: https://github.com/stephenafamo/bob/blob/main/website/docs/code-generation/relationships.md#2025-04-19_snippet_5\n\nLANGUAGE: go\nCODE:\n```\njets, err := models.Jets(ctx, db,\n\tmodels.PreloadJetPilot(psql.PreloadAs(\"pilot\")), // \"LEFT JOIN \"pilots\" AS \"pilot\" ON (\"jet\".\"pilot_id\" = \"pilot\".\"id\") \n\tmodels.PreloadJetCoPilot(psql.PreloadAs(\"copilot\")), // \"LEFT JOIN \"pilots\" AS \"copilot\" ON (\"jet\".\"copilot_id\" = \"copilot\".\"id\") \n\tsm.OrderBy(psql.Quote(\"pilot\", models.ColumnNames.Pilot.LastName)) // ORDER BY \"pilot\".\"last_name\" DESC \n).All()\n```\n\n----------------------------------------\n\nTITLE: Simple Select with Conditions in Go using Bob\nDESCRIPTION: Demonstrates a basic SELECT query with IN condition using the Bob SQL query builder in Go. It selects id and name from the users table where id is in a list of provided arguments.\nSOURCE: https://github.com/stephenafamo/bob/blob/main/website/docs/query-builder/psql/examples/select.md#2025-04-19_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nSELECT id, name FROM users WHERE (id IN ($1, $2, $3))\n```\n\nLANGUAGE: go\nCODE:\n```\npsql.Select(\n  sm.Columns(\"id\", \"name\"),\n  sm.From(\"users\"),\n  sm.Where(psql.Quote(\"id\").In(psql.Arg(100, 200, 300))),\n)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Records with Relations in Bob\nDESCRIPTION: Demonstrates how to fetch a user with related videos using Bob's relationship loading system. Shows Bob's concise approach to handling relationships through predefined loader functions.\nSOURCE: https://github.com/stephenafamo/bob/blob/main/website/vs/jet.md#2025-04-19_snippet_2\n\nLANGUAGE: go\nCODE:\n```\n// User will contain the videos\nuser, err := models.Users(\n    ctx, db,\n    models.SelectWhere.Users.ID.EQ(1),\n    models.ThenLoadUserVideos(),\n).One()\n```\n\n----------------------------------------\n\nTITLE: Multiple Unions in Go using Bob\nDESCRIPTION: Shows how to create a SELECT query with multiple UNION operations using the Bob SQL query builder. It combines SELECT statements from users, admins, and mods tables.\nSOURCE: https://github.com/stephenafamo/bob/blob/main/website/docs/query-builder/psql/examples/select.md#2025-04-19_snippet_17\n\nLANGUAGE: sql\nCODE:\n```\nSELECT id, name FROM users UNION select id, name FROM admins UNION select id, name FROM mods\n```\n\nLANGUAGE: go\nCODE:\n```\npsql.Select(\n  sm.Columns(\"id\", \"name\"),\n  sm.From(\"users\"),\n  sm.Union(psql.Select(\n    sm.Columns(\"id\", \"name\"),\n    sm.From(\"admins\"),\n  )),\n  sm.Union(psql.Select(\n    sm.Columns(\"id\", \"name\"),\n    sm.From(\"mods\"),\n  )),\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Parametrized Arguments in SQL with Arg() Function\nDESCRIPTION: The Arg() function creates placeholders for arguments in SQL queries. These are replaced with the appropriate placeholder syntax for the dialect and the actual values are returned as arguments.\nSOURCE: https://github.com/stephenafamo/bob/blob/main/website/docs/query-builder/starters.md#2025-04-19_snippet_5\n\nLANGUAGE: go\nCODE:\n```\n// SQL: $1, $2, $3\n// Args: 'a', 'b', 'c'\npsql.Arg(\"a\", \"b\", \"c\")\n```\n\n----------------------------------------\n\nTITLE: Creating Raw SQL Queries with Placeholders\nDESCRIPTION: This example shows how to use raw SQL queries in Bob, either as standalone queries or embedded within a structured query. It demonstrates placeholder substitution with question marks that get converted to the dialect's specific placeholders.\nSOURCE: https://github.com/stephenafamo/bob/blob/main/website/docs/query-builder/building-queries.md#2025-04-19_snippet_3\n\nLANGUAGE: go\nCODE:\n```\n// SELECT * from users WHERE id = $1 AND name = $2\n// args: 100, \"Stephen\"\n\npsql.RawQuery(`SELECT * FROM USERS WHERE id = ? and name = ?`, 100, \"Stephen\")\n// -----\n// OR\n// -----\npsql.Select(\n\tsm.From(\"users\"),\n\tsm.Where(psql.Raw(\"id = ? and name = ?\", 100, \"Stephen\")),\n)\n```\n\n----------------------------------------\n\nTITLE: Executing a Query with bob.Exec in Go\nDESCRIPTION: This example demonstrates how to execute a query without returning any rows using the bob.Exec function. It first establishes a database connection, creates a PostgreSQL update query, and then executes it using bob.Exec. The function returns a result object and any potential error.\nSOURCE: https://github.com/stephenafamo/bob/blob/main/website/docs/sql-executor/exec.md#2025-04-19_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nctx := context.Background()\ndb, err := bob.Open(\"postgres\", \"...\")\nif err != nil {\n    // ...\n}\n\nq := psql.Update(...)\n\nresult, err := bob.Exec(ctx, db, q)\nif err != nil {\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Table Model in Bob for Postgres\nDESCRIPTION: Creates a fully-featured table model for a 'users' table with support for both reading and writing operations. Uses a separate UserSetter type with optional fields to control which values are being inserted or updated.\nSOURCE: https://github.com/stephenafamo/bob/blob/main/website/docs/README.md#2025-04-19_snippet_1\n\nLANGUAGE: go\nCODE:\n```\ntype UserSetter struct {\n    ID    omit.Val[int]\n    Name  omit.Val[string]\n    Email omit.Val[string]\n}\n\n// Includes methods for Selects, Inserts, Upserts, and Deletes\nvar userTable = psql.NewTable[User, UserSetter](\"public\", \"users\")\n```\n\n----------------------------------------\n\nTITLE: Generating Go Code for SQL ENUM\nDESCRIPTION: Translates the SQL 'workday' ENUM into Go code. It defines a custom type, constant values for each enum option, and a function to return all possible values. This implementation provides type safety and facilitates auto-completion in Go.\nSOURCE: https://github.com/stephenafamo/bob/blob/main/website/docs/code-generation/enums.md#2025-04-19_snippet_1\n\nLANGUAGE: go\nCODE:\n```\ntype Workday string\n\n// Enum values for Workday\nconst (\n\tWorkdayMonday    Workday = \"monday\"\n\tWorkdayTuesday   Workday = \"tuesday\"\n\tWorkdayWednesday Workday = \"wednesday\"\n\tWorkdayThursday  Workday = \"thursday\"\n\tWorkdayFriday    Workday = \"friday\"\n)\n\nfunc AllWorkday() []Workday {\n\treturn []Workday{\n\t\tWorkdayMonday,\n\t\tWorkdayTuesday,\n\t\tWorkdayWednesday,\n\t\tWorkdayThursday,\n\t\tWorkdayFriday,\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Select from Multiple Functions with ROWS FROM in Go using Bob\nDESCRIPTION: Demonstrates a SELECT query from multiple function calls using the ROWS FROM syntax in the Bob SQL query builder. It combines results from json_to_recordset and generate_series functions, aliasing the result set and ordering by a column.\nSOURCE: https://github.com/stephenafamo/bob/blob/main/website/docs/query-builder/psql/examples/select.md#2025-04-19_snippet_6\n\nLANGUAGE: sql\nCODE:\n```\nSELECT *\nFROM ROWS FROM\n  (\n    json_to_recordset($1) AS (a INTEGER, b TEXT),\n    generate_series(1, 3)\n  ) AS \"x\" (\"p\", \"q\", \"s\")\nORDER BY p\n```\n\nLANGUAGE: go\nCODE:\n```\npsql.Select(\n  sm.FromFunction(\n    psql.F(\n      \"json_to_recordset\",\n      psql.Arg(`[{\"a\":40,\"b\":\"foo\"},{\"a\":\"100\",\"b\":\"bar\"}]`),\n    )(\n      fm.Columns(\"a\", \"INTEGER\"),\n      fm.Columns(\"b\", \"TEXT\"),\n    ),\n    psql.F(\"generate_series\", 1, 3)(),\n  ).As(\"x\", \"p\", \"q\", \"s\"),\n  sm.OrderBy(\"p\"),\n)\n```\n\n----------------------------------------\n\nTITLE: Executing a Query to Return a Single Row in Go using Bob SQL Library\nDESCRIPTION: This example demonstrates how to execute a SQL query using bob.One to retrieve a single row as a structured type. It shows creating a database connection, defining a query, and scanning the result into a struct. The function is a wrapper around scan.One.\nSOURCE: https://github.com/stephenafamo/bob/blob/main/website/docs/sql-executor/one.md#2025-04-19_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ntype userObj struct {\n    ID int\n    Name string\n}\n\nctx := context.Background()\ndb, err := bob.Open(\"postgres\", \"...\")\nif err != nil {\n    // ...\n}\n\nq := psql.Select(...)\n\n// user is of type userObj{}\nuser, err := bob.One(ctx, db, q, scan.StructMapper[userObj]())\nif err != nil {\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Importing and Using Bob MySQL Dialect\nDESCRIPTION: This code demonstrates how to import and use the Bob query builder with MySQL dialect. It shows basic examples of creating select, insert, update, and delete queries using the corresponding query mod packages.\nSOURCE: https://github.com/stephenafamo/bob/blob/main/website/docs/query-builder/mysql/how-to-use.md#2025-04-19_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nimport (\n    \"github.com/stephenafamo/bob/dialect/mysql\"\n    \"github.com/stephenafamo/bob/dialect/mysql/sm\"\n    \"github.com/stephenafamo/bob/dialect/mysql/im\"\n    \"github.com/stephenafamo/bob/dialect/mysql/um\"\n    \"github.com/stephenafamo/bob/dialect/mysql/dm\"\n)\n\nfunc main() {\n    mysql.Select(\n        sm.From(\"users\"),\n    )\n\n    mysql.Insert(\n        im.Into(\"users\"),\n    )\n\n    mysql.Update(\n        um.Table(\"users\"),\n    )\n\n    mysql.Delete(\n        dm.From(\"users\"),\n    )\n\n    mysql.Raw()\n}\n```\n\n----------------------------------------\n\nTITLE: Generating SELECT Query with ORDER BY and COLLATE Clauses in Go\nDESCRIPTION: This example demonstrates creating a SELECT query with ORDER BY and COLLATE clauses. It selects 'id' and 'name' from the 'users' table, ordering the results by 'name' using a specific collation.\nSOURCE: https://github.com/stephenafamo/bob/blob/main/website/docs/query-builder/mysql/examples/select.md#2025-04-19_snippet_6\n\nLANGUAGE: sql\nCODE:\n```\nSELECT id, name FROM users ORDER BY name COLLATE `utf8mb4_bg_0900_as_cs` ASC\n```\n\nLANGUAGE: go\nCODE:\n```\nmysql.Select(\n  sm.Columns(\"id\", \"name\"),\n  sm.From(\"users\"),\n  sm.OrderBy(\"name\").Collate(\"utf8mb4_bg_0900_as_cs\").Asc(),\n)\n```\n\n----------------------------------------\n\nTITLE: Using Relationship AliasedAs Method for Custom Join Aliases\nDESCRIPTION: Demonstrates how to use the AliasedAs() method to change the alias of a relationship in a join. This provides flexibility when working with complex queries.\nSOURCE: https://github.com/stephenafamo/bob/blob/main/CHANGELOG.md#2025-04-19_snippet_9\n\nLANGUAGE: go\nCODE:\n```\nmodels.SelectJoins.Jets.InnerJoin.Pilots(ctx).AliasedAs(\"p\")\n```\n\n----------------------------------------\n\nTITLE: Executing Update Queries with Bob ORM\nDESCRIPTION: Demonstrates how to build and execute UPDATE queries with different execution methods including getting affected rows and returning results.\nSOURCE: https://github.com/stephenafamo/bob/blob/main/website/docs/models/table.md#2025-04-19_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n// UPDATE \"users\" SET \"kind\" = $1 RETURNING *;\nupdateQ := userTable.Update(\n    um.SetCol(\"kind\").ToArg(\"Dramatic\"),\n    um.Returning(\"*\"),\n)\n\nrowsAffected, _ := updateQ.Exec(ctx, db)\nuser, _ := updateQ.One(ctx, db)\nusers, _ := updateQ.All(ctx, db)\nuserCursor, _ := updateQ.Cursor(ctx, db)\n```\n\n----------------------------------------\n\nTITLE: Simple Insert in PostgreSQL with Go\nDESCRIPTION: Demonstrates a basic SQL insert operation into the 'films' table using parameterized values. The Go code uses a custom PostgreSQL library to construct the insert query.\nSOURCE: https://github.com/stephenafamo/bob/blob/main/website/docs/query-builder/psql/examples/insert.md#2025-04-19_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nINSERT INTO films VALUES ($1, $2, $3, $4, $5, $6)\n```\n\nLANGUAGE: go\nCODE:\n```\npsql.Insert(\n  im.Into(\"films\"),\n  im.Values(psql.Arg(\"UA502\", \"Bananas\", 105, \"1971-07-13\", \"Comedy\", \"82 mins\")),\n)\n```\n\n----------------------------------------\n\nTITLE: Initializing a View Model in Go\nDESCRIPTION: Creates a view model that maps a User struct to the 'users' table in the 'public' schema. This is the first step to using the view functionality to query database tables.\nSOURCE: https://github.com/stephenafamo/bob/blob/main/website/docs/models/view.md#2025-04-19_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ntype User struct {\n    ID    int\n    Name  string\n    Email string\n}\n\nvar userView = psql.NewView[User](\"public\", \"users\")\n```\n\n----------------------------------------\n\nTITLE: Generating SELECT Query with Grouped IN Clause in Go\nDESCRIPTION: This snippet shows how to create a SELECT query with a grouped IN clause. It selects 'id' and 'name' from the 'users' table where combinations of 'id' and 'employee_id' match specific pairs of values.\nSOURCE: https://github.com/stephenafamo/bob/blob/main/website/docs/query-builder/mysql/examples/select.md#2025-04-19_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\nSELECT id, name FROM users WHERE ((`id`, `employee_id`) IN ((?, ?), (?, ?)))\n```\n\nLANGUAGE: go\nCODE:\n```\nmysql.Select(\n  sm.Columns(\"id\", \"name\"),\n  sm.From(\"users\"),\n  sm.Where(mysql.Group(mysql.Quote(\"id\"), mysql.Quote(\"employee_id\")).In(mysql.ArgGroup(100, 200), mysql.ArgGroup(300, 400))),\n)\n```\n\n----------------------------------------\n\nTITLE: Generating Complex SELECT Query with Subquery and Window Function in Go\nDESCRIPTION: This example demonstrates creating a complex SELECT query with a subquery that uses a window function. It calculates the average difference between consecutive dates for different statuses in the 'presales_presalestatus' table.\nSOURCE: https://github.com/stephenafamo/bob/blob/main/website/docs/query-builder/mysql/examples/select.md#2025-04-19_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nSELECT status, avg(difference)\nFROM (\n  SELECT\n    status,\n    (LEAD(created_date, 1, NOW())\n    OVER (PARTITION BY presale_id ORDER BY created_date)\n     - `created_date`) AS `difference`\n  FROM presales_presalestatus\n) AS `differnce_by_status`\nWHERE (`status` IN ('A', 'B', 'C'))\nGROUP BY status\n```\n\nLANGUAGE: go\nCODE:\n```\nmysql.Select(\n  sm.Columns(\"status\", mysql.F(\"avg\", \"difference\")),\n  sm.From(mysql.Select(\n    sm.Columns(\n      \"status\",\n      mysql.F(\"LEAD\", \"created_date\", 1, mysql.F(\"NOW\"))(\n        fm.Over(\n          wm.PartitionBy(\"presale_id\"),\n          wm.OrderBy(\"created_date\"),\n        ),\n      ).Minus(mysql.Quote(\"created_date\")).As(\"difference\")),\n    sm.From(\"presales_presalestatus\")),\n  ).As(\"differnce_by_status\"),\n  sm.Where(mysql.Quote(\"status\").In(mysql.S(\"A\"), mysql.S(\"B\"), mysql.S(\"C\"))),\n  sm.GroupBy(\"status\"),\n)\n```\n\n----------------------------------------\n\nTITLE: Importing and Using PostgreSQL Dialect Packages in Bob\nDESCRIPTION: Demonstrates how to import the PostgreSQL dialect packages and use them to create Select, Insert, Update, and Delete queries. This example shows the basic structure of database operations using Bob's query builders.\nSOURCE: https://github.com/stephenafamo/bob/blob/main/website/docs/query-builder/psql/how-to-use.md#2025-04-19_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nimport (\n    \"github.com/stephenafamo/bob/dialect/psql\"\n    \"github.com/stephenafamo/bob/dialect/psql/sm\"\n    \"github.com/stephenafamo/bob/dialect/psql/im\"\n    \"github.com/stephenafamo/bob/dialect/psql/um\"\n    \"github.com/stephenafamo/bob/dialect/psql/dm\"\n)\n\nfunc main() {\n    psql.Select(\n        sm.From(\"users\"),\n    )\n\n    psql.Insert(\n        im.Into(\"users\"),\n    )\n\n    psql.Update(\n        um.Table(\"users\"),\n    )\n\n    psql.Delete(\n        dm.From(\"users\"),\n    )\n\n    psql.Raw()\n}\n```\n\n----------------------------------------\n\nTITLE: Creating AND Conditions in SQL with And() Function\nDESCRIPTION: The And() function joins multiple expressions with the AND operator. This creates a condition where all of the provided expressions must be true for the overall condition to be satisfied.\nSOURCE: https://github.com/stephenafamo/bob/blob/main/website/docs/query-builder/starters.md#2025-04-19_snippet_4\n\nLANGUAGE: go\nCODE:\n```\n// SQL: a AND b AND c\npsql.And(\"a\", \"b\", \"c\")\n```\n\n----------------------------------------\n\nTITLE: Building a Simple SELECT Query with IN Clause in Go\nDESCRIPTION: Demonstrates how to create a basic SELECT query with an IN clause using Bob's SQLite driver. The query selects the id and name columns from the users table where the id is in a list of arguments (100, 200, 300).\nSOURCE: https://github.com/stephenafamo/bob/blob/main/website/docs/query-builder/sqlite/examples/select.md#2025-04-19_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nSELECT id, name FROM users WHERE (\"id\" IN (?1, ?2, ?3))\n```\n\nLANGUAGE: go\nCODE:\n```\nsqlite.Select(\n  sm.Columns(\"id\", \"name\"),\n  sm.From(\"users\"),\n  sm.Where(sqlite.Quote(\"id\").In(sqlite.Arg(100, 200, 300))),\n)\n```\n\n----------------------------------------\n\nTITLE: Simple UPDATE Operation in SQL and Go\nDESCRIPTION: Demonstrates a basic UPDATE operation to change the 'kind' column in the 'films' table. The SQL query uses placeholders for arguments, while the Go code utilizes a custom query builder to construct the same query.\nSOURCE: https://github.com/stephenafamo/bob/blob/main/website/docs/query-builder/psql/examples/update.md#2025-04-19_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nUPDATE films SET \"kind\" = $1 WHERE (kind = $2)\n```\n\nLANGUAGE: go\nCODE:\n```\npsql.Update(\n  um.Table(\"films\"),\n  um.SetCol(\"kind\").ToArg(\"Dramatic\"),\n  um.Where(psql.Quote(\"kind\").EQ(psql.Arg(\"Drama\"))),\n)\n```\n\n----------------------------------------\n\nTITLE: Building a Query with MustBuild in Go\nDESCRIPTION: Demonstrates using the MustBuild method to build a query that panics on error. This is useful for queries that are initialized once and reused throughout the application.\nSOURCE: https://github.com/stephenafamo/bob/blob/main/website/docs/query-builder/using-queries.md#2025-04-19_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nmyquery, myargs := psql.Insert(...).MustBuild(ctx)\n```\n\n----------------------------------------\n\nTITLE: Executing Large Query with Cursor in Go using Bob\nDESCRIPTION: This snippet demonstrates how to execute a query using Bob that returns a cursor for large result sets. It shows the process of opening a database connection, defining a query, creating a cursor, and iterating through the results to scan each row into a predefined struct.\nSOURCE: https://github.com/stephenafamo/bob/blob/main/website/docs/sql-executor/cursor.md#2025-04-19_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ntype userObj struct {\n    ID int\n    Name string\n}\n\nctx := context.Background()\ndb, err := bob.Open(\"postgres\", \"...\")\nif err != nil {\n    // ...\n}\n\nq := psql.Select(...)\n\n// user is of type userObj{}\ncursor, err := bob.Cursor(ctx, db, q, scan.StructMapper[userObj]())\nif err != nil {\n    // ...\n}\ndefer cursor.Close() // make sure to close\n\nfor cursor.Next() {\n    user, err := cursor.Get() // scan the next row into the concrete type\n}\n```\n\n----------------------------------------\n\nTITLE: Upsert Operation in SQLite using Bob\nDESCRIPTION: Demonstrates an upsert operation on the 'distributors' table, updating the 'dname' on conflict with a condition. The Go code uses im.OnConflict().DoUpdate() with a where clause.\nSOURCE: https://github.com/stephenafamo/bob/blob/main/website/docs/query-builder/sqlite/examples/insert.md#2025-04-19_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nINSERT INTO distributors AS \"d\" (\"did\", \"dname\")\nVALUES (?1, ?2), (?3, ?4)\nON CONFLICT (did) DO UPDATE\nSET \"dname\" = EXCLUDED. \"dname\"\nWHERE (\"d\".\"zipcode\" <> '21201')\n```\n\nLANGUAGE: go\nCODE:\n```\nsqlite.Insert(\n  im.IntoAs(\"distributors\", \"d\", \"did\", \"dname\"),\n  im.Values(sqlite.Arg(8, \"Anvil Distribution\")),\n  im.Values(sqlite.Arg(9, \"Sentry Distribution\")),\n  im.OnConflict(\"did\").DoUpdate(\n    im.SetExcluded(\"dname\"),\n    im.Where(sqlite.Quote(\"d\", \"zipcode\").NE(sqlite.S(\"21201\"))),\n  ),\n)\n```\n\n----------------------------------------\n\nTITLE: Building a SELECT Query with ORDER BY and COLLATE in Go\nDESCRIPTION: Shows how to create a SELECT query with ORDER BY and COLLATE clauses. The query selects id and name from users table, ordering results by name in ascending order using the NOCASE collation.\nSOURCE: https://github.com/stephenafamo/bob/blob/main/website/docs/query-builder/sqlite/examples/select.md#2025-04-19_snippet_7\n\nLANGUAGE: sql\nCODE:\n```\nSELECT id, name FROM users ORDER BY name COLLATE \"NOCASE\" ASC\n```\n\nLANGUAGE: go\nCODE:\n```\nsqlite.Select(\n  sm.Columns(\"id\", \"name\"),\n  sm.From(\"users\"),\n  sm.OrderBy(\"name\").Collate(\"NOCASE\").Asc(),\n)\n```\n\n----------------------------------------\n\nTITLE: Creating and Configuring a Factory in Go\nDESCRIPTION: Shows how to create a new factory and set up templates with modifications. The factory can create templates for models which can be configured with different mods.\nSOURCE: https://github.com/stephenafamo/bob/blob/main/website/docs/code-generation/factories.md#2025-04-19_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nf := factory.New()\n\n// Create a new template from the factory\njetTemplate := f.NewJet(...factory.JetMod)\n```\n\n----------------------------------------\n\nTITLE: Using QueryMods with SELECT and INSERT in PostgreSQL\nDESCRIPTION: This snippet demonstrates how QueryMods are used differently between SELECT and INSERT queries. It shows how both can use CTEs (Common Table Expressions), but INSERT uses INTO while SELECT uses FROM, with compile-time errors for invalid combinations.\nSOURCE: https://github.com/stephenafamo/bob/blob/main/website/docs/query-builder/building-queries.md#2025-04-19_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nimport \"github.com/stephenafamo/bob/dialect/psql/sm\"\ncte := psql.Select(\n    sm.From(\"users\"),\n    sm.Where(psql.Quote(\"age\").GTE(psql.Arg(21))),\n)\n\nvar cte query.Query\npsql.Select(\n    sm.With(\"adults\").As(cte), // works\n    sm.From(\"projects\"),\n)\n\nimport \"github.com/stephenafamo/bob/dialect/psql/insert/im\"\npsql.Insert(\n    im.With(\"adults\").As(cte), // works as well\n    im.From(\"projects\"), // ERROR: Does not compile!!!\n    im.Into(\"projects\"), // works\n)\n```\n\n----------------------------------------\n\nTITLE: UPDATE with Subquery in SQL and Go\nDESCRIPTION: Illustrates an UPDATE operation that uses a subquery in the WHERE clause to update the 'sales_count' in the 'employees' table. The Go code demonstrates how to construct a complex query with nested SELECT statements using the query builder.\nSOURCE: https://github.com/stephenafamo/bob/blob/main/website/docs/query-builder/psql/examples/update.md#2025-04-19_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nUPDATE employees SET \"sales_count\" = sales_count + 1 WHERE (id =\n(SELECT sales_person FROM accounts WHERE (name = $1)))\n```\n\nLANGUAGE: go\nCODE:\n```\npsql.Update(\n  um.Table(\"employees\"),\n  um.SetCol(\"sales_count\").To(\"sales_count + 1\"),\n  um.Where(psql.Quote(\"id\").EQ(psql.Group(psql.Select(\n    sm.Columns(\"sales_person\"),\n    sm.From(\"accounts\"),\n    sm.Where(psql.Quote(\"name\").EQ(psql.Arg(\"Acme Corporation\"))),\n  )))),\n)\n```\n\n----------------------------------------\n\nTITLE: Building a SELECT Query with Sub-select, Window Functions, and GROUP BY in Go\nDESCRIPTION: Shows how to create a complex SELECT query with a sub-select that uses window functions, filtering with an IN clause, and grouping. This query computes average time differences between status changes in presales.\nSOURCE: https://github.com/stephenafamo/bob/blob/main/website/docs/query-builder/sqlite/examples/select.md#2025-04-19_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\nSELECT status, avg(difference)\nFROM (\n  SELECT\n    status,\n    (LEAD(created_date, 1, NOW())\n    OVER (PARTITION BY presale_id ORDER BY created_date)\n     - \"created_date\") AS \"difference\"\n  FROM presales_presalestatus\n) AS \"differnce_by_status\"\nWHERE (\"status\" IN ('A', 'B', 'C'))\nGROUP BY status\n```\n\nLANGUAGE: go\nCODE:\n```\nsqlite.Select(\n  sm.Columns(\"status\", sqlite.F(\"avg\", \"difference\")),\n  sm.From(sqlite.Select(\n    sm.Columns(\n      \"status\",\n      sqlite.F(\"LEAD\", \"created_date\", 1, sqlite.F(\"NOW\"))(\n        fm.Over(\n          wm.PartitionBy(\"presale_id\"),\n          wm.OrderBy(\"created_date\"),\n        ),\n      ).Minus(sqlite.Quote(\"created_date\")).As(\"difference\")),\n    sm.From(\"presales_presalestatus\")),\n  ).As(\"differnce_by_status\"),\n  sm.Where(sqlite.Quote(\"status\").In(sqlite.S(\"A\"), sqlite.S(\"B\"), sqlite.S(\"C\"))),\n  sm.GroupBy(\"status\"),\n)\n```\n\n----------------------------------------\n\nTITLE: Executing a Prepared Statement in Go using bob SQL Builder\nDESCRIPTION: Demonstrates how to execute a previously prepared statement using the Exec method. This allows reusing the same prepared statement multiple times for better performance.\nSOURCE: https://github.com/stephenafamo/bob/blob/main/website/docs/sql-executor/prepare.md#2025-04-19_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n// Use our prepared statement\n_, err := stmt.Exec(ctx)\nif err != nil {\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Bulk Insert in SQLite using Bob\nDESCRIPTION: Demonstrates inserting multiple rows into the 'films' table in a single statement. The Go code uses multiple im.Values calls to achieve this.\nSOURCE: https://github.com/stephenafamo/bob/blob/main/website/docs/query-builder/sqlite/examples/insert.md#2025-04-19_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nINSERT INTO films VALUES\n(?1, ?2, ?3, ?4, ?5, ?6),\n(?7, ?8, ?9, ?10, ?11, ?12)\n```\n\nLANGUAGE: go\nCODE:\n```\nsqlite.Insert(\n  im.Into(\"films\"),\n  im.Values(sqlite.Arg(\"UA502\", \"Bananas\", 105, \"1971-07-13\", \"Comedy\", \"82 mins\")),\n  im.Values(sqlite.Arg(\"UA502\", \"Bananas\", 105, \"1971-07-13\", \"Comedy\", \"82 mins\")),\n)\n```\n\n----------------------------------------\n\nTITLE: UPDATE with FROM Clause in SQL and Go\nDESCRIPTION: Shows an UPDATE operation that includes a FROM clause to update the 'sales_count' in the 'employees' table based on data from the 'accounts' table. The Go implementation uses the query builder to construct a more complex UPDATE statement.\nSOURCE: https://github.com/stephenafamo/bob/blob/main/website/docs/query-builder/psql/examples/update.md#2025-04-19_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nUPDATE employees SET \"sales_count\" = sales_count + 1 FROM accounts\nWHERE (accounts.name = $1)\nAND (employees.id = accounts.sales_person)\n```\n\nLANGUAGE: go\nCODE:\n```\npsql.Update(\n  um.Table(\"employees\"),\n  um.SetCol(\"sales_count\").To(\"sales_count + 1\"),\n  um.From(\"accounts\"),\n  um.Where(psql.Quote(\"accounts\", \"name\").EQ(psql.Arg(\"Acme Corporation\"))),\n  um.Where(psql.Quote(\"employees\", \"id\").EQ(psql.Quote(\"accounts\", \"sales_person\"))),\n)\n```\n\n----------------------------------------\n\nTITLE: Multi-table update with explicit JOIN using Bob in MySQL\nDESCRIPTION: An example showing a more complex multi-table update using LEFT JOIN with table aliases. This updates 'some_value' in table1 based on conditions from both tables in the join.\nSOURCE: https://github.com/stephenafamo/bob/blob/main/website/docs/query-builder/mysql/examples/update.md#2025-04-19_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nUPDATE `table1` AS `T1` LEFT JOIN `table2` AS `T2` ON (`T1`.`some_id` = `T2`.`id`) SET `T1`.`some_value` = ? WHERE (`T1`.`id` = ?) AND (`T2`.`other_value` = ?)\n```\n\nLANGUAGE: go\nCODE:\n```\nmysql.Update(\n  um.Table(mysql.Quote(\"table1\").As(\"T1\")),\n  um.LeftJoin(mysql.Quote(\"table2\").As(\"T2\")).\n    OnEQ(mysql.Quote(\"T1\", \"some_id\"), mysql.Quote(\"T2\", \"id\")),\n  um.SetCol(\"T1\", \"some_value\").ToArg(\"test\"),\n  um.Where(mysql.Quote(\"T1\", \"id\").EQ(mysql.Arg(1))),\n  um.Where(mysql.Quote(\"T2\", \"other_value\").EQ(mysql.Arg(\"something\"))),\n)\n```\n\n----------------------------------------\n\nTITLE: Select Distinct in Go using Bob\nDESCRIPTION: Shows how to create a SELECT DISTINCT query with an IN condition using the Bob SQL query builder in Go. It selects distinct id and name from the users table where id is in a list of provided arguments.\nSOURCE: https://github.com/stephenafamo/bob/blob/main/website/docs/query-builder/psql/examples/select.md#2025-04-19_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nSELECT DISTINCT id, name FROM users WHERE (id IN ($1, $2, $3))\n```\n\nLANGUAGE: go\nCODE:\n```\npsql.Select(\n  sm.Columns(\"id\", \"name\"),\n  sm.Distinct(),\n  sm.From(\"users\"),\n  sm.Where(psql.Quote(\"id\").In(psql.Arg(100, 200, 300))),\n)\n```\n\n----------------------------------------\n\nTITLE: Generated Go Structs and Table Definition\nDESCRIPTION: Go code showing the generated structs for Jet, JetSetter, JetSlice, and the JetsTable definition based on the SQL table structure.\nSOURCE: https://github.com/stephenafamo/bob/blob/main/website/docs/code-generation/usage.md#2025-04-19_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n// Jet is an object representing the database table.\n// The required methods to satisfy orm.Table are also generated\ntype Jet struct {\n    ID         int              `db:\"id,pk\" json:\"id\" yaml:\"id\"`\n    PilotID    int              `db:\"pilot_id\" json:\"pilot_id\" yaml:\"pilot_id\"`\n    AirportID  int              `db:\"airport_id\" json:\"airport_id\" yaml:\"airport_id\"`\n    Name       string           `db:\"name\" json:\"name\" yaml:\"name\"`\n    Color      null.Val[string] `db:\"color\" json:\"color,omitempty\" yaml:\"color,omitempty\"`\n    UUID       string           `db:\"uuid\" json:\"uuid\" yaml:\"uuid\"`\n    Identifier string           `db:\"identifier\" json:\"identifier\" yaml:\"identifier\"`\n    Cargo      []byte           `db:\"cargo\" json:\"cargo\" yaml:\"cargo\"`\n    Manifest   []byte           `db:\"manifest\" json:\"manifest\" yaml:\"manifest\"`\n}\n\n// JetSetter is used for insert/upsert/update operations\n// All values are optional, and do not have to be set\n// Generated columns are not included\n// The required methods to satisfy orm.Setter are also generated\ntype JetSetter struct {\n    ID         omit.Val[int]        `db:\"id,pk\"`\n    PilotID    omit.Val[int]        `db:\"pilot_id\"`\n    AirportID  omit.Val[int]        `db:\"airport_id\"`\n    Name       omit.Val[string]     `db:\"name\"`\n    Color      omitnull.Val[string] `db:\"color\"`\n    UUID       omit.Val[string]     `db:\"uuid\"`\n    Identifier omit.Val[string]     `db:\"identifier\"`\n    Cargo      omit.Val[[]byte]     `db:\"cargo\"`\n    Manifest   omit.Val[[]byte]     `db:\"manifest\"`\n}\n\n// JetSlice is an alias for a slice of pointers to Jet.\n// This should almost always be used instead of []*Jet.\ntype JetSlice []*Jet\n\n// JetsTable contains methods to work with the jets table\nvar JetsTable = psql.NewTablex[*Jet, JetSlice, *JetSetter](\"\", \"jets\")\n```\n\n----------------------------------------\n\nTITLE: Querying Related Models in Bob ORM\nDESCRIPTION: Shows how to query related models using named methods on the parent model. The example retrieves a jet by ID and then queries its related pilot.\nSOURCE: https://github.com/stephenafamo/bob/blob/main/website/docs/code-generation/relationships.md#2025-04-19_snippet_0\n\nLANGUAGE: go\nCODE:\n```\njet, err := models.FindJet(ctx, db, 1)\n\n// SELECT * FROM \"pilots\" WHERE \"id\" = $1\n// $1 => jet.PilotID\njetPilotQuery, err := jet.Pilots(ctx, db)\n```\n\n----------------------------------------\n\nTITLE: DELETE with USING Clause in PostgreSQL using Bob\nDESCRIPTION: Shows how to perform a DELETE operation joining multiple tables with the USING clause. This query deletes employees associated with a specific account by joining the 'employees' and 'accounts' tables.\nSOURCE: https://github.com/stephenafamo/bob/blob/main/website/docs/query-builder/psql/examples/delete.md#2025-04-19_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nDELETE FROM employees USING accounts\nWHERE (accounts.name = $1)\nAND (employees.id = accounts.sales_person)\n```\n\nLANGUAGE: go\nCODE:\n```\npsql.Delete(\n  dm.From(\"employees\"),\n  dm.Using(\"accounts\"),\n  dm.Where(psql.Quote(\"accounts\", \"name\").EQ(psql.Arg(\"Acme Corporation\"))),\n  dm.Where(psql.Quote(\"employees\", \"id\").EQ(psql.Quote(\"accounts\", \"sales_person\"))),\n)\n```\n\n----------------------------------------\n\nTITLE: Building a SELECT Query with CASE WHEN without ELSE in Go\nDESCRIPTION: Demonstrates creating a SELECT query with a CASE expression that has no ELSE clause. The query selects id, name, and a computed column 'C' that returns 'A' when id equals '1' and NULL otherwise.\nSOURCE: https://github.com/stephenafamo/bob/blob/main/website/docs/query-builder/sqlite/examples/select.md#2025-04-19_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nSELECT id, name, (CASE WHEN (\"id\" = '1') THEN 'A' END) AS \"C\" FROM users\n```\n\nLANGUAGE: go\nCODE:\n```\nsqlite.Select(\n  sm.Columns(\n    \"id\",\n    \"name\",\n    sqlite.Case().\n      When(sqlite.Quote(\"id\").EQ(sqlite.S(\"1\")), sqlite.S(\"A\")).\n      End().\n      As(\"C\"),\n  ),\n  sm.From(\"users\"),\n)\n```\n\n----------------------------------------\n\nTITLE: Window Function over Named Window in Go using Bob\nDESCRIPTION: Shows how to use a window function (avg) over a named window using the Bob SQL query builder. It calculates the average salary partitioned by department name and ordered by salary.\nSOURCE: https://github.com/stephenafamo/bob/blob/main/website/docs/query-builder/psql/examples/select.md#2025-04-19_snippet_13\n\nLANGUAGE: sql\nCODE:\n```\nSELECT avg(salary) OVER (w)\nFROM c \nWINDOW w AS (PARTITION BY depname ORDER BY salary)\n```\n\nLANGUAGE: go\nCODE:\n```\npsql.Select(\n  sm.Columns(\n    psql.F(\"avg\", \"salary\")(fm.Over(wm.BasedOn(\"w\"))),\n  ),\n  sm.From(\"c\"),\n  sm.Window(\"w\", wm.PartitionBy(\"depname\"), wm.OrderBy(\"salary\")),\n)\n```\n\n----------------------------------------\n\nTITLE: UPDATE with FROM Clause in SQLite Using Go\nDESCRIPTION: Demonstrates an UPDATE with a FROM clause that joins the 'employees' and 'accounts' tables. Increments the sales_count for employees associated with the 'Acme Corporation' account.\nSOURCE: https://github.com/stephenafamo/bob/blob/main/website/docs/query-builder/sqlite/examples/update.md#2025-04-19_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nUPDATE employees SET \"sales_count\" = sales_count + 1 FROM accounts\nWHERE (\"accounts\".\"name\" = ?1)\nAND (\"employees\".\"id\" = \"accounts\".\"sales_person\")\n```\n\nLANGUAGE: go\nCODE:\n```\nsqlite.Update(\n  um.Table(\"employees\"),\n  um.SetCol(\"sales_count\").To(\"sales_count + 1\"),\n  um.From(\"accounts\"),\n  um.Where(sqlite.Quote(\"accounts\", \"name\").EQ(sqlite.Arg(\"Acme Corporation\"))),\n  um.Where(sqlite.Quote(\"employees\", \"id\").EQ(psql.Quote(\"accounts\", \"sales_person\"))),\n)\n```\n\n----------------------------------------\n\nTITLE: Preparing a Query Statement in Go using bob SQL Builder\nDESCRIPTION: Creates a prepared statement for queries that return rows using bob.PrepareQuery() with a struct mapper for scanning results. Query statements support additional methods like One, All, and Cursor for retrieving data.\nSOURCE: https://github.com/stephenafamo/bob/blob/main/website/docs/sql-executor/prepare.md#2025-04-19_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nq := psql.Select(...)\n\n// Prepare the statement\nstmt, err := bob.PrepareQuery(ctx, db, q, scan.StructMapper[userObj]())\nif err != nil {\n    // ...\n}\n\n// Use our prepared statement\nusers, err := stmt.All(ctx)\nif err != nil {\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Modifiers to Relationship Queries\nDESCRIPTION: Demonstrates how to apply modifiers like LIMIT to relationship queries. This example finds a jet and retrieves its pilot with a LIMIT modifier.\nSOURCE: https://github.com/stephenafamo/bob/blob/main/website/docs/code-generation/relationships.md#2025-04-19_snippet_1\n\nLANGUAGE: go\nCODE:\n```\njet, err := models.FindJet(ctx, db, 1)\n\n// SELECT * FROM \"pilots\" WHERE \"id\" = $1 LIMIT 20\njetPilotQuery, err := jet.Pilots(ctx, db, sm.Limit(20))\n```\n\n----------------------------------------\n\nTITLE: Using Generated Column Expressions in Go\nDESCRIPTION: Example of using generated column expressions to build a complex query with grouping and ordering.\nSOURCE: https://github.com/stephenafamo/bob/blob/main/website/docs/code-generation/usage.md#2025-04-19_snippet_16\n\nLANGUAGE: go\nCODE:\n```\n// SELECT \"jets\".\"name\", count(1) FROM \"jets\"\n// WHERE \"jet\".\"id\" BETWEEN 50 AND 5000\n// GROUP BY \"jets\".\"pilot_id\"\n// ORDER BY \"jets\".\"pilot_id\"\npsql.Select(\n    sm.Columns(models.JetColumns.Name, \"count(1)\"),\n    sm.From(models.JetsTable.Name()),\n    sm.Where(models.JetColumns.ID.Between(50, 5000)),\n    sm.OrderBy(models.JetColumns.PilotID),\n)\n```\n\n----------------------------------------\n\nTITLE: Select with Locking Clause in Go using Bob\nDESCRIPTION: Demonstrates a SELECT query with a FOR UPDATE locking clause and SKIP LOCKED option using the Bob SQL query builder. It selects id and name from the users table with row-level locking.\nSOURCE: https://github.com/stephenafamo/bob/blob/main/website/docs/query-builder/psql/examples/select.md#2025-04-19_snippet_16\n\nLANGUAGE: sql\nCODE:\n```\nSELECT id, name FROM users FOR UPDATE OF users SKIP LOCKED\n```\n\nLANGUAGE: go\nCODE:\n```\npsql.Select(\n  sm.Columns(\"id\", \"name\"),\n  sm.From(\"users\"),\n  sm.ForUpdate(\"users\").SkipLocked(),\n)\n```\n\n----------------------------------------\n\nTITLE: Bulk Insert in PostgreSQL with Go\nDESCRIPTION: Demonstrates how to perform a bulk insert operation into the 'films' table with multiple sets of values. The Go code uses the custom library to construct the bulk insert query.\nSOURCE: https://github.com/stephenafamo/bob/blob/main/website/docs/query-builder/psql/examples/insert.md#2025-04-19_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nINSERT INTO films VALUES\n($1, $2, $3, $4, $5, $6),\n($7, $8, $9, $10, $11, $12)\n```\n\nLANGUAGE: go\nCODE:\n```\npsql.Insert(\n  im.Into(\"films\"),\n  im.Values(psql.Arg(\"UA502\", \"Bananas\", 105, \"1971-07-13\", \"Comedy\", \"82 mins\")),\n  im.Values(psql.Arg(\"UA502\", \"Bananas\", 105, \"1971-07-13\", \"Comedy\", \"82 mins\")),\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Column Lists with NewColumns in Go\nDESCRIPTION: Shows how to create a new columns list with NewColumns and add a parent table with WithParent to generate qualified column references in SQL.\nSOURCE: https://github.com/stephenafamo/bob/blob/main/website/docs/models/columns.md#2025-04-19_snippet_0\n\nLANGUAGE: go\nCODE:\n```\norm.NewColumns(\"id\", \"name\", \"email\").WithParent(\"public.users\")\n```\n\nLANGUAGE: sql\nCODE:\n```\n-- table_alias.column_name\n\"public.users\".\"id\" AS \"id\",\n\"public.users\".\"name\" AS \"name\",\n\"public.users\".\"email\" AS \"email\"\n```\n\n----------------------------------------\n\nTITLE: Update with subquery in WHERE clause using Bob in MySQL\nDESCRIPTION: An advanced example of using a subquery in an UPDATE statement's WHERE condition. This updates 'sales_count' for an employee identified by a subquery that selects the sales_person from accounts.\nSOURCE: https://github.com/stephenafamo/bob/blob/main/website/docs/query-builder/mysql/examples/update.md#2025-04-19_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nUPDATE employees SET `sales_count` = sales_count + 1 WHERE (`id` = (SELECT sales_person FROM accounts WHERE (`name` = ?)))\n```\n\nLANGUAGE: go\nCODE:\n```\nmysql.Update(\n  um.Table(\"employees\"),\n  um.SetCol(\"sales_count\").To(\"sales_count + 1\"),\n  um.Where(mysql.Quote(\"id\").EQ(mysql.Select(\n    sm.Columns(\"sales_person\"),\n    sm.From(\"accounts\"),\n    sm.Where(mysql.Quote(\"name\").EQ(mysql.Arg(\"Acme Corporation\"))),\n  ))),\n)\n```\n\n----------------------------------------\n\nTITLE: Bulk INSERT query in MySQL with Bob\nDESCRIPTION: Demonstrates how to insert multiple rows at once into the 'films' table. This is more efficient than individual inserts when adding multiple records.\nSOURCE: https://github.com/stephenafamo/bob/blob/main/website/docs/query-builder/mysql/examples/insert.md#2025-04-19_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nINSERT INTO films VALUES\n(?, ?, ?, ?, ?, ?),\n(?, ?, ?, ?, ?, ?)\n```\n\nLANGUAGE: go\nCODE:\n```\nmysql.Insert(\n  im.Into(\"films\"),\n  im.Values(mysql.Arg(\"UA502\", \"Bananas\", 105, \"1971-07-13\", \"Comedy\", \"82 mins\")),\n  im.Values(mysql.Arg(\"UA502\", \"Bananas\", 105, \"1971-07-13\", \"Comedy\", \"82 mins\")),\n)\n```\n\n----------------------------------------\n\nTITLE: Select with Cross Join and Subquery in Go using Bob\nDESCRIPTION: Shows how to create a SELECT query with a CROSS JOIN to a subquery using the Bob SQL query builder. It selects columns from users cross joined with a filtered subquery from clients.\nSOURCE: https://github.com/stephenafamo/bob/blob/main/website/docs/query-builder/psql/examples/select.md#2025-04-19_snippet_15\n\nLANGUAGE: sql\nCODE:\n```\nSELECT id, name, type\nFROM users AS u CROSS JOIN (\n  SELECT id, type\n  FROM clients\n  WHERE (\"client_id\" = $1)\n) AS \"clients\"\nWHERE (\"id\" = $2)\n```\n\nLANGUAGE: go\nCODE:\n```\npsql.Select(\n  sm.Columns(\"id\", \"name\", \"type\"),\n  sm.From(\"users\").As(\"u\"),\n  sm.CrossJoin(psql.Select(\n    sm.Columns(\"id\", \"type\"),\n    sm.From(\"clients\"),\n    sm.Where(psql.Quote(\"client_id\").EQ(psql.Arg(\"123\"))),\n  )).As(\"clients\"),\n  sm.Where(psql.Quote(\"id\").EQ(psql.Arg(100))),\n)\n```\n\n----------------------------------------\n\nTITLE: Upsert in PostgreSQL with Go\nDESCRIPTION: Shows an upsert operation on the 'distributors' table, handling conflicts on the 'did' column. The Go code constructs the upsert query with a complex update clause using the custom library.\nSOURCE: https://github.com/stephenafamo/bob/blob/main/website/docs/query-builder/psql/examples/insert.md#2025-04-19_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nINSERT INTO distributors AS \"d\" (\"did\", \"dname\")\nVALUES ($1, $2), ($3, $4)\nON CONFLICT (did) DO UPDATE\nSET dname = (EXCLUDED.dname || ' (formerly ' || d.dname || ')')\nWHERE (d.zipcode <> '21201')\n```\n\nLANGUAGE: go\nCODE:\n```\npsql.Insert(\n  im.IntoAs(\"distributors\", \"d\", \"did\", \"dname\"),\n  im.Values(psql.Arg(8, \"Anvil Distribution\")),\n  im.Values(psql.Arg(9, \"Sentry Distribution\")),\n  im.OnConflict(\"did\").DoUpdate(\n    im.SetCol(\"dname\").To(psql.Concat(\n      psql.Raw(\"EXCLUDED.dname\"), psql.S(\" (formerly \"),\n      psql.Quote(\"d\", \"dname\"), psql.S(\")\"),\n    )),\n    im.Where(psql.Quote(\"d\", \"zipcode\").NE(psql.S(\"21201\"))),\n  ),\n)\n```\n\n----------------------------------------\n\nTITLE: INSERT with HIGH_PRIORITY and IGNORE modifiers in MySQL with Bob\nDESCRIPTION: Shows how to add modifiers to an INSERT query. HIGH_PRIORITY gives the insert higher priority over reads, while IGNORE causes errors to be ignored rather than failing the query.\nSOURCE: https://github.com/stephenafamo/bob/blob/main/website/docs/query-builder/mysql/examples/insert.md#2025-04-19_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nINSERT HIGH_PRIORITY IGNORE INTO films VALUES (?, ?, ?, ?, ?, ?)\n```\n\nLANGUAGE: go\nCODE:\n```\nmysql.Insert(\n  im.Into(\"films\"),\n  im.HighPriority(),\n  im.Ignore(),\n  im.Values(mysql.Arg(\"UA502\", \"Bananas\", 105, \"1971-07-13\", \"Comedy\", \"82 mins\")),\n)\n```\n\n----------------------------------------\n\nTITLE: Deleting Records with WHERE Clause in SQL\nDESCRIPTION: This SQL snippet demonstrates a simple DELETE operation on the 'films' table, filtering records where the 'kind' column matches a specified value. The value is parameterized for security and flexibility.\nSOURCE: https://github.com/stephenafamo/bob/blob/main/website/docs/query-builder/sqlite/examples/delete.md#2025-04-19_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nDELETE FROM films WHERE (\"kind\" = ?1)\n```\n\n----------------------------------------\n\nTITLE: Using Function Mods with PostgreSQL Dialect\nDESCRIPTION: Illustrates how to use function mods (fm) to modify function calls in SQL queries. The example shows filtering a count function based on a status condition.\nSOURCE: https://github.com/stephenafamo/bob/blob/main/CHANGELOG.md#2025-04-19_snippet_10\n\nLANGUAGE: go\nCODE:\n```\n// import \"github.com/stephenafamo/bob/dialect/psql/fm\"\npsql.F( \"count\", \"*\",)(fm.Filter(psql.Quote(\"status\").EQ(psql.S(\"done\"))))\n```\n\n----------------------------------------\n\nTITLE: Generating Simple SELECT Query with IN Clause in Go\nDESCRIPTION: This snippet demonstrates how to generate a simple SELECT query with an IN clause using a Go-based SQL builder. It selects the 'id' and 'name' columns from the 'users' table where the 'id' is in a list of provided values.\nSOURCE: https://github.com/stephenafamo/bob/blob/main/website/docs/query-builder/mysql/examples/select.md#2025-04-19_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nSELECT id, name FROM users WHERE (`id` IN (?, ?, ?))\n```\n\nLANGUAGE: go\nCODE:\n```\nmysql.Select(\n  sm.Columns(\"id\", \"name\"),\n  sm.From(\"users\"),\n  sm.Where(mysql.Quote(\"id\").In(mysql.Arg(100, 200, 300))),\n)\n```\n\n----------------------------------------\n\nTITLE: Simple INSERT query in MySQL with Bob\nDESCRIPTION: Demonstrates a basic INSERT query that adds a single row to the 'films' table with multiple values. The query uses parameterized values for security.\nSOURCE: https://github.com/stephenafamo/bob/blob/main/website/docs/query-builder/mysql/examples/insert.md#2025-04-19_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nINSERT INTO films VALUES (?, ?, ?, ?, ?, ?)\n```\n\nLANGUAGE: go\nCODE:\n```\nmysql.Insert(\n  im.Into(\"films\"),\n  im.Values(mysql.Arg(\"UA502\", \"Bananas\", 105, \"1971-07-13\", \"Comedy\", \"82 mins\")),\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing DELETE Operation with Bob ORM in Go\nDESCRIPTION: This Go code snippet shows how to use the Bob ORM to perform a DELETE operation equivalent to the SQL statement above. It uses the sqlite package to construct the query, specifying the table, and the WHERE condition with a quoted column name and an argument.\nSOURCE: https://github.com/stephenafamo/bob/blob/main/website/docs/query-builder/sqlite/examples/delete.md#2025-04-19_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nsqlite.Delete(\n  dm.From(\"films\"),\n  dm.Where(sqlite.Quote(\"kind\").EQ(sqlite.Arg(\"Drama\"))),\n)\n```\n\n----------------------------------------\n\nTITLE: Building a SELECT Query from a Function in Go\nDESCRIPTION: Demonstrates creating a SELECT query that selects from a function result. The query selects all columns from the result of the generate_series function with parameters 1 and 3, aliased as 'x'.\nSOURCE: https://github.com/stephenafamo/bob/blob/main/website/docs/query-builder/sqlite/examples/select.md#2025-04-19_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM generate_series(1, 3) AS \"x\"\n```\n\nLANGUAGE: go\nCODE:\n```\nsqlite.Select(\n  sm.From(sqlite.F(\"generate_series\", 1, 3)).As(\"x\"),\n)\n```\n\n----------------------------------------\n\nTITLE: DELETE Query with LIMIT and ORDER BY\nDESCRIPTION: Demonstrates a DELETE operation with LIMIT and ORDER BY clauses to control the number and order of deleted rows.\nSOURCE: https://github.com/stephenafamo/bob/blob/main/website/docs/query-builder/mysql/examples/delete.md#2025-04-19_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nDELETE FROM films WHERE (`kind` = ?) ORDER BY producer DESC LIMIT 10\n```\n\nLANGUAGE: go\nCODE:\n```\nmysql.Delete(\n  dm.From(\"films\"),\n  dm.Where(mysql.Quote(\"kind\").EQ(mysql.Arg(\"Drama\"))),\n  dm.Limit(10),\n  dm.OrderBy(\"producer\").Desc(),\n)\n```\n\n----------------------------------------\n\nTITLE: Upsert on Constraint in PostgreSQL with Go\nDESCRIPTION: Demonstrates an upsert operation using a named constraint 'distributors_pkey' instead of specifying columns. The Go code constructs the upsert query with a simpler update clause using the custom library.\nSOURCE: https://github.com/stephenafamo/bob/blob/main/website/docs/query-builder/psql/examples/insert.md#2025-04-19_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nINSERT INTO distributors AS \"d\" (\"did\", \"dname\")\nVALUES ($1, $2), ($3, $4)\nON CONFLICT ON CONSTRAINT distributors_pkey DO UPDATE\nSET \"dname\" = EXCLUDED. \"dname\"\nWHERE (d.zipcode <> '21201')\n```\n\nLANGUAGE: go\nCODE:\n```\npsql.Insert(\n  im.IntoAs(\"distributors\", \"d\", \"did\", \"dname\"),\n  im.Values(psql.Arg(8, \"Anvil Distribution\")),\n  im.Values(psql.Arg(9, \"Sentry Distribution\")),\n  im.OnConflictOnConstraint(\"distributors_pkey\").DoUpdate(\n    im.SetExcluded(\"dname\"),\n    im.Where(psql.Quote(\"d\", \"zipcode\").NE(psql.S(\"21201\"))),\n  ),\n)\n```\n\n----------------------------------------\n\nTITLE: Simple Insert in SQLite using Bob\nDESCRIPTION: Demonstrates a basic insert operation into the 'films' table with multiple values. The Go code uses the Bob library to construct the SQL query with placeholders for the values.\nSOURCE: https://github.com/stephenafamo/bob/blob/main/website/docs/query-builder/sqlite/examples/insert.md#2025-04-19_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nINSERT INTO films VALUES (?1, ?2, ?3, ?4, ?5, ?6)\n```\n\nLANGUAGE: go\nCODE:\n```\nsqlite.Insert(\n  im.Into(\"films\"),\n  im.Values(sqlite.Arg(\"UA502\", \"Bananas\", 105, \"1971-07-13\", \"Comedy\", \"82 mins\")),\n)\n```\n\n----------------------------------------\n\nTITLE: Multi-table DELETE Query with JOINs\nDESCRIPTION: Shows how to delete from multiple tables using INNER JOINs to connect films, film_actors, and actors tables.\nSOURCE: https://github.com/stephenafamo/bob/blob/main/website/docs/query-builder/mysql/examples/delete.md#2025-04-19_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nDELETE FROM films, actors USING films\nINNER JOIN film_actors ON (films.id = film_actors.film_id)\nINNER JOIN actors ON (film_actors.actor_id = actors.id) WHERE (`kind` = ?)\n```\n\nLANGUAGE: go\nCODE:\n```\nmysql.Delete(\n  dm.From(\"films\"),\n  dm.From(\"actors\"),\n  dm.Using(\"films\"),\n  dm.InnerJoin(\"film_actors\").OnEQ(mysql.Raw(\"films.id\"), mysql.Raw(\"film_actors.film_id\")),\n  dm.InnerJoin(\"actors\").OnEQ(mysql.Raw(\"film_actors.actor_id\"), mysql.Raw(\"actors.id\")),\n  dm.Where(mysql.Quote(\"kind\").EQ(mysql.Arg(\"Drama\"))),\n)\n```\n\n----------------------------------------\n\nTITLE: UPDATE with Sub-Select Query in SQLite Using Go\nDESCRIPTION: Shows how to perform an UPDATE operation with a sub-select query. Updates employee sales count for the sales person associated with 'Acme Corporation' using a table alias and NOT INDEXED hint.\nSOURCE: https://github.com/stephenafamo/bob/blob/main/website/docs/query-builder/sqlite/examples/update.md#2025-04-19_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nUPDATE employees AS \"e\" NOT INDEXED\nSET \"sales_count\" = sales_count + 1\nWHERE (\"id\" = (SELECT sales_person FROM accounts WHERE (\"name\" = ?1)))\n```\n\nLANGUAGE: go\nCODE:\n```\nsqlite.Update(\n  um.TableAs(\"employees\", \"e\"),\n  um.TableNotIndexed(),\n  um.SetCol(\"sales_count\").To(\"sales_count + 1\"),\n  um.Where(sqlite.Quote(\"id\").EQ(sqlite.Select(\n    sm.Columns(\"sales_person\"),\n    sm.From(\"accounts\"),\n    sm.Where(sqlite.Quote(\"name\").EQ(sqlite.Arg(\"Acme Corporation\"))),\n  ))),\n)\n```\n\n----------------------------------------\n\nTITLE: Skipping Hooks in Bob ORM Query\nDESCRIPTION: This snippet demonstrates how to skip hooks when executing a query in Bob ORM. It uses the SkipHooks function to wrap the context, indicating that hooks should not be executed for this particular query.\nSOURCE: https://github.com/stephenafamo/bob/blob/main/website/docs/models/hooks.md#2025-04-19_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nuserTable.Select(bob.SkipHooks(ctx), exec).All()\n```\n\n----------------------------------------\n\nTITLE: Upsert with DO NOTHING in PostgreSQL with Go\nDESCRIPTION: Shows an upsert operation that does nothing on conflict. This is useful when you want to silently ignore duplicate inserts. The Go code constructs this simple upsert query using the custom library.\nSOURCE: https://github.com/stephenafamo/bob/blob/main/website/docs/query-builder/psql/examples/insert.md#2025-04-19_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\nINSERT INTO films VALUES ($1, $2, $3, $4, $5, $6) ON CONFLICT DO NOTHING\n```\n\nLANGUAGE: go\nCODE:\n```\npsql.Insert(\n  im.Into(\"films\"),\n  im.Values(psql.Arg(\"UA502\", \"Bananas\", 105, \"1971-07-13\", \"Comedy\", \"82 mins\")),\n  im.OnConflict().DoNothing(),\n)\n```\n\n----------------------------------------\n\nTITLE: DELETE Query with USING Clause\nDESCRIPTION: Shows how to perform a DELETE operation with a USING clause to delete records based on conditions from multiple tables.\nSOURCE: https://github.com/stephenafamo/bob/blob/main/website/docs/query-builder/mysql/examples/delete.md#2025-04-19_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nDELETE FROM employees USING accounts WHERE (`accounts`.`name` = ?) AND (`employees`.`id` = `accounts`.`sales_person`)\n```\n\nLANGUAGE: go\nCODE:\n```\nmysql.Delete(\n  dm.From(\"employees\"),\n  dm.Using(\"accounts\"),\n  dm.Where(mysql.Quote(\"accounts\", \"name\").EQ(mysql.Arg(\"Acme Corporation\"))),\n  dm.Where(mysql.Quote(\"employees\", \"id\").EQ(mysql.Quote(\"accounts\", \"sales_person\"))),\n)\n```\n\n----------------------------------------\n\nTITLE: Converting sql.DB to bob.Executor in Go\nDESCRIPTION: This code snippet demonstrates how to convert a *sql.DB object to a bob.Executor using the bob.New() function. It also shows how to create a bob.Executor from a database transaction.\nSOURCE: https://github.com/stephenafamo/bob/blob/main/website/docs/sql-executor/why-not.md#2025-04-19_snippet_1\n\nLANGUAGE: go\nCODE:\n```\ndb, err := sql.Open(\"postgres\", \"postgres://...\")\nbobExec := bob.New(db)\n\n// For Transactions\ntx, err := db.Begin()\nbobExec = bob.New(tx) // using the transaction\n```\n\n----------------------------------------\n\nTITLE: Building a SELECT Query with CASE WHEN and ELSE in Go\nDESCRIPTION: Shows how to create a SELECT query with a CASE expression that includes an ELSE clause. The query selects id, name, and a computed column 'C' that returns 'A' when id equals '1', otherwise returns 'B'.\nSOURCE: https://github.com/stephenafamo/bob/blob/main/website/docs/query-builder/sqlite/examples/select.md#2025-04-19_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nSELECT id, name, (CASE WHEN (\"id\" = '1') THEN 'A' ELSE 'B' END) AS \"C\" FROM users\n```\n\nLANGUAGE: go\nCODE:\n```\nsqlite.Select(\n  sm.Columns(\n    \"id\",\n    \"name\",\n    sqlite.Case().\n      When(sqlite.Quote(\"id\").EQ(sqlite.S(\"1\")), sqlite.S(\"A\")).\n      Else(sqlite.S(\"B\")).\n      As(\"C\"),\n  ),\n  sm.From(\"users\"),\n)\n```\n\n----------------------------------------\n\nTITLE: Generating SELECT Query with CASE Statement without ELSE Clause in Go\nDESCRIPTION: This example demonstrates creating a SELECT query with a CASE statement that doesn't include an ELSE clause. It selects 'id', 'name', and a conditional column 'C' from the 'users' table.\nSOURCE: https://github.com/stephenafamo/bob/blob/main/website/docs/query-builder/mysql/examples/select.md#2025-04-19_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nSELECT id, name, (CASE WHEN (`id` = '1') THEN 'A' END) AS `C` FROM users\n```\n\nLANGUAGE: go\nCODE:\n```\nmysql.Select(\n  sm.Columns(\n    \"id\",\n    \"name\",\n    mysql.Case().\n      When(mysql.Quote(\"id\").EQ(mysql.S(\"1\")), mysql.S(\"A\")).\n      End().\n      As(\"C\"),\n  ),\n  sm.From(\"users\"),\n)\n```\n\n----------------------------------------\n\nTITLE: Select with Grouped IN Condition in Go using Bob\nDESCRIPTION: Demonstrates a SELECT query with a grouped IN condition using the Bob SQL query builder. It selects id and name from the users table where (id, employee_id) matches any of the provided pairs of values.\nSOURCE: https://github.com/stephenafamo/bob/blob/main/website/docs/query-builder/psql/examples/select.md#2025-04-19_snippet_8\n\nLANGUAGE: sql\nCODE:\n```\nSELECT id, name FROM users WHERE (id, employee_id) IN (($1, $2), ($3, $4))\n```\n\nLANGUAGE: go\nCODE:\n```\npsql.Select(\n  sm.Columns(\"id\", \"name\"),\n  sm.From(\"users\"),\n  sm.Where(\n    psql.Group(psql.Quote(\"id\"), psql.Quote(\"employee_id\")).\n      In(psql.ArgGroup(100, 200), psql.ArgGroup(300, 400))),\n)\n```\n\n----------------------------------------\n\nTITLE: Simple DELETE Operation in PostgreSQL using Bob\nDESCRIPTION: Demonstrates a basic DELETE statement with a WHERE clause to remove films of a specific kind. The query deletes all rows from the 'films' table where the 'kind' column equals 'Drama'.\nSOURCE: https://github.com/stephenafamo/bob/blob/main/website/docs/query-builder/psql/examples/delete.md#2025-04-19_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nDELETE FROM films WHERE (kind = $1)\n```\n\nLANGUAGE: go\nCODE:\n```\npsql.Delete(\n  dm.From(\"films\"),\n  dm.Where(psql.Quote(\"kind\").EQ(psql.Arg(\"Drama\"))),\n)\n```\n\n----------------------------------------\n\nTITLE: Preparing an Execution Statement in Go using bob SQL Builder\nDESCRIPTION: Creates a prepared statement for execution queries using bob.Prepare(). This example shows how to open a database connection, prepare an SQL statement using the psql builder, and handle potential errors.\nSOURCE: https://github.com/stephenafamo/bob/blob/main/website/docs/sql-executor/prepare.md#2025-04-19_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nctx := context.Background()\ndb, err := bob.Open(\"postgres\", \"...\")\nif err != nil {\n    // ...\n}\n\nq := psql.Update(...)\n\n// Prepare the statement\nstmt, err := bob.Prepare(ctx, db, q)\nif err != nil {\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Preloading Related Models with JOIN\nDESCRIPTION: Shows how to preload a related model in the same query using LEFT JOIN, with various options to control the columns loaded and specify table aliases.\nSOURCE: https://github.com/stephenafamo/bob/blob/main/website/docs/code-generation/relationships.md#2025-04-19_snippet_4\n\nLANGUAGE: go\nCODE:\n```\njet, err := models.Jets(ctx, db, \n    models.PreloadJetPilot(\n        psql.OnlyColumns(\"id\"), // only selects \"pilot\".\"id\"\n        psql.ThenLoadPilotLicences(), // will load the pilot's licences\n    ),\n).One()\n```\n\n----------------------------------------\n\nTITLE: Select From Function in Go using Bob\nDESCRIPTION: Shows how to create a SELECT query from a function call using the Bob SQL query builder in Go. It selects all columns from the result of the generate_series function, aliasing the result set.\nSOURCE: https://github.com/stephenafamo/bob/blob/main/website/docs/query-builder/psql/examples/select.md#2025-04-19_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM generate_series(1, 3) AS \"x\" (\"p\", \"q\", \"s\")\n```\n\nLANGUAGE: go\nCODE:\n```\npsql.Select(\n  sm.From(psql.F(\"generate_series\", 1, 3)).As(\"x\", \"p\", \"q\", \"s\"),\n)\n```\n\n----------------------------------------\n\nTITLE: Loading Related Models with Separate Queries\nDESCRIPTION: Shows how to load related models with a separate query (ThenLoad) and apply any SelectQuery modifiers to filter the related data.\nSOURCE: https://github.com/stephenafamo/bob/blob/main/website/docs/code-generation/relationships.md#2025-04-19_snippet_6\n\nLANGUAGE: go\nCODE:\n```\n// get the first 2 pilots\n// then load all related jets with airport_id = 100\npilots, err := models.Pilots(ctx, db, \n    models.ThenLoadPilotJets(\n        models.SelectWhere.Jet.AirportID.EQ(100),\n    ),\n    sm.Limit(2),\n).All()\n```\n\n----------------------------------------\n\nTITLE: Creating Models from Templates with Database Interaction in Go\nDESCRIPTION: Demonstrates how to create models from templates and insert them into the database. Includes error handling options like Must variants that panic or OrFail variants for testing.\nSOURCE: https://github.com/stephenafamo/bob/blob/main/website/docs/code-generation/factories.md#2025-04-19_snippet_7\n\nLANGUAGE: go\nCODE:\n```\n// Create a new jet from the template\njet, err := jetTemplate.Create(ctx, db)\n\n// Create a slice of 5 jets using the template\njets, err := jetTemplate.CreateMany(ctx, db, 5)\n\n// Must variants panic on error\njet := jetTemplate.MustCreate(ctx, db)\njets := jetTemplate.MustCreateMany(ctx, db, 5)\n\n// OrFail variants will fail the test or benchmark if an error occurs\njet := jetTemplate.CreateOrFail(t, db)\njets := jetTemplate.CreateManyOrFail(t, db, 5)\n```\n\n----------------------------------------\n\nTITLE: Select Distinct On in Go using Bob\nDESCRIPTION: Demonstrates a SELECT DISTINCT ON query with an IN condition using the Bob SQL query builder in Go. It selects distinct id and name from the users table, with distinctness based on the id column, where id is in a list of provided arguments.\nSOURCE: https://github.com/stephenafamo/bob/blob/main/website/docs/query-builder/psql/examples/select.md#2025-04-19_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nSELECT DISTINCT ON(id) id, name FROM users WHERE (id IN ($1, $2, $3))\n```\n\nLANGUAGE: go\nCODE:\n```\npsql.Select(\n  sm.Columns(\"id\", \"name\"),\n  sm.Distinct(\"id\"),\n  sm.From(\"users\"),\n  sm.Where(psql.Quote(\"id\").In(psql.Arg(100, 200, 300))),\n)\n```\n\n----------------------------------------\n\nTITLE: Building a SELECT Query with Grouped IN Clause in Go\nDESCRIPTION: Demonstrates creating a SELECT query with a grouped IN clause. The query selects id and name from users table where the combination of (id, employee_id) matches one of the provided tuples of parameters.\nSOURCE: https://github.com/stephenafamo/bob/blob/main/website/docs/query-builder/sqlite/examples/select.md#2025-04-19_snippet_6\n\nLANGUAGE: sql\nCODE:\n```\nSELECT id, name FROM users WHERE ((\"id\", \"employee_id\") IN ((?1, ?2), (?3, ?4)))\n```\n\nLANGUAGE: go\nCODE:\n```\nsqlite.Select(\n  sm.Columns(\"id\", \"name\"),\n  sm.From(\"users\"),\n  sm.Where(sqlite.Group(sqlite.Quote(\"id\"), sqlite.Quote(\"employee_id\")).In(sqlite.ArgGroup(100, 200), sqlite.ArgGroup(300, 400))),\n)\n```\n\n----------------------------------------\n\nTITLE: Checking Jet Existence in Go\nDESCRIPTION: Using the generated JetExists function to check if a jet record exists by its primary key.\nSOURCE: https://github.com/stephenafamo/bob/blob/main/website/docs/code-generation/usage.md#2025-04-19_snippet_10\n\nLANGUAGE: go\nCODE:\n```\nhasJet, err := models.JetExists(ctx, db, 10).All()\n```\n\n----------------------------------------\n\nTITLE: Inserting Raw SQL with Raw() Function\nDESCRIPTION: The Raw() function allows inserting raw SQL statements with parameterized values. Placeholders should be inserted with ? and a literal question mark can be escaped with a backslash.\nSOURCE: https://github.com/stephenafamo/bob/blob/main/website/docs/query-builder/starters.md#2025-04-19_snippet_10\n\nLANGUAGE: go\nCODE:\n```\n// SQL: WHERE a = $1\n// Args: 'something'\npsql.Raw(\"WHERE a = ?\", \"something\")\n```\n\n----------------------------------------\n\nTITLE: INSERT with optimizer hints in MySQL with Bob\nDESCRIPTION: Demonstrates how to add optimizer hints to an INSERT query. This example sets a maximum execution time and a custom variable for the query's execution context.\nSOURCE: https://github.com/stephenafamo/bob/blob/main/website/docs/query-builder/mysql/examples/insert.md#2025-04-19_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nINSERT\n/*+\n    MAX_EXECUTION_TIME(1000)\n    SET_VAR(cte_max_recursion_depth = 1M)\n*/ INTO films VALUES (?, ?, ?, ?, ?, ?)\n```\n\nLANGUAGE: go\nCODE:\n```\nmysql.Insert(\n  im.Into(\"films\"),\n  im.MaxExecutionTime(1000),\n  im.SetVar(\"cte_max_recursion_depth = 1M\"),\n  im.Values(mysql.Arg(\"UA502\", \"Bananas\", 105, \"1971-07-13\", \"Comedy\", \"82 mins\")),\n)\n```\n\n----------------------------------------\n\nTITLE: Select from Subquery with Window Function in Go using Bob\nDESCRIPTION: Shows how to create a complex SELECT query with a subquery containing a window function using the Bob SQL query builder. It calculates average differences between dates for specific statuses, using LEAD as a window function.\nSOURCE: https://github.com/stephenafamo/bob/blob/main/website/docs/query-builder/psql/examples/select.md#2025-04-19_snippet_7\n\nLANGUAGE: sql\nCODE:\n```\nSELECT status, avg(difference)\nFROM (\n  SELECT\n    status, \n    (LEAD(created_date, 1, NOW())\n    OVER(PARTITION BY presale_id ORDER BY created_date)\n     - \"created_date\") AS \"difference\"\n  FROM presales_presalestatus\n) AS \"differnce_by_status\"\nWHERE status IN ('A', 'B', 'C')\nGROUP BY status\n```\n\nLANGUAGE: go\nCODE:\n```\npsql.Select(\n  sm.Columns(\"status\", psql.F(\"avg\", \"difference\")),\n  sm.From(psql.Select(\n    sm.Columns(\n      \"status\",\n      psql.F(\"LEAD\", \"created_date\", 1, psql.F(\"NOW\"))(\n        fm.Over(\n          wm.PartitionBy(\"presale_id\"),\n          wm.OrderBy(\"created_date\"),\n        ),\n      ).Minus(psql.Quote(\"created_date\")).As(\"difference\")),\n    sm.From(\"presales_presalestatus\")),\n  ).As(\"differnce_by_status\"),\n  sm.Where(psql.Quote(\"status\").In(psql.S(\"A\"), psql.S(\"B\"), psql.S(\"C\"))),\n  sm.GroupBy(\"status\"),\n)\n```\n\n----------------------------------------\n\nTITLE: Deleting a Jet Record in Go\nDESCRIPTION: Example of using the generated Delete method to remove a jet record from the database.\nSOURCE: https://github.com/stephenafamo/bob/blob/main/website/docs/code-generation/usage.md#2025-04-19_snippet_4\n\nLANGUAGE: go\nCODE:\n```\n_, err := jet.Delete(ctx, db)\n```\n\n----------------------------------------\n\nTITLE: Adding Base Modifications to Factory Templates in Go\nDESCRIPTION: Demonstrates how to add base modifications that will be applied to all templates created by the factory. These modifications can be later cleared if needed.\nSOURCE: https://github.com/stephenafamo/bob/blob/main/website/docs/code-generation/factories.md#2025-04-19_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nf := factory.New()\n\nf.AddBaseJetMods(\n    factory.JetMods.RandomID(),\n    factory.JetMods.RandomAirportID(),\n)\n\n// The jet templates will generate models with random IDs and AirportIDs\njetTemplate1 := f.NewJet()\njetTemplate2 := f.NewJet()\n\n// We can also clear the base mods\nf.ClearBaseJetMods()\n```\n\n----------------------------------------\n\nTITLE: Using Expression Conversion Functions in Go\nDESCRIPTION: Functions to convert slices of a type to arguments for database operations, enhancing query construction capabilities.\nSOURCE: https://github.com/stephenafamo/bob/blob/main/CHANGELOG.md#2025-04-19_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nexpr.ToArgs and expr.ToArgGroup\n```\n\n----------------------------------------\n\nTITLE: Updating Multiple Jet Records in Go\nDESCRIPTION: Using the UpdateAll method to modify multiple jet records simultaneously.\nSOURCE: https://github.com/stephenafamo/bob/blob/main/website/docs/code-generation/usage.md#2025-04-19_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nerr := jets.UpdateAll(ctx, db, JetSetter{\n    AirportID: omit.From(100),\n})\n```\n\n----------------------------------------\n\nTITLE: Generating SELECT Query with CASE Statement and ELSE Clause in Go\nDESCRIPTION: This snippet shows how to create a SELECT query that includes a CASE statement with an ELSE clause. It selects 'id', 'name', and a conditional column 'C' based on the 'id' value from the 'users' table.\nSOURCE: https://github.com/stephenafamo/bob/blob/main/website/docs/query-builder/mysql/examples/select.md#2025-04-19_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nSELECT id, name, (CASE WHEN (`id` = '1') THEN 'A' ELSE 'B' END) AS `C` FROM users\n```\n\nLANGUAGE: go\nCODE:\n```\nmysql.Select(\n  sm.Columns(\n    \"id\",\n    \"name\",\n    mysql.Case().\n      When(mysql.Quote(\"id\").EQ(mysql.S(\"1\")), mysql.S(\"A\")).\n      Else(mysql.S(\"B\")).\n      As(\"C\"),\n  ),\n  sm.From(\"users\"),\n)\n```\n\n----------------------------------------\n\nTITLE: Executing Delete Operations\nDESCRIPTION: Shows how to perform DELETE operations for both single and multiple records using Bob ORM.\nSOURCE: https://github.com/stephenafamo/bob/blob/main/website/docs/models/table.md#2025-04-19_snippet_5\n\nLANGUAGE: go\nCODE:\n```\n// Delete single record\nerr := user.Delete(ctx, db)\n\n// Delete multiple records\nerr := users.Delete(ctx, db)\n```\n\n----------------------------------------\n\nTITLE: Using Column Modifications in Factory Templates in Go\nDESCRIPTION: Demonstrates how to use pre-defined column modifications to customize field values when creating models. Includes setting fixed values, using functions, and generating random data.\nSOURCE: https://github.com/stephenafamo/bob/blob/main/website/docs/code-generation/factories.md#2025-04-19_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nf.NewJet(\n   // generate models with ID set to 10\n   factory.JetMods.ID(10),\n\n   // generate models with ID set by a function that returns a random integer\n   factory.JetMods.IDFunc(func() int { return rand.Int() }),\n\n   // Clear any previously set ID\n   factory.JetMods.UnsetID(),\n\n   // Generate a random value for the column\n   // Uses a faker from https://github.com/jaswdr/faker\n   // pass nil to use the default faker\n   factory.JetMods.RandomID(nil),\n\n   // Set random values on all columns\n   factory.JetMods.RandomizeAllColumns(nil),\n)\n```\n\n----------------------------------------\n\nTITLE: Upsert with alias reference in MySQL with Bob\nDESCRIPTION: Shows an INSERT with ON DUPLICATE KEY UPDATE to handle conflicts, using a table alias to reference the new values. This example attempts to insert distributors and updates existing records with custom logic.\nSOURCE: https://github.com/stephenafamo/bob/blob/main/website/docs/query-builder/mysql/examples/insert.md#2025-04-19_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\nINSERT INTO distributors (`did`, `dname`)\nVALUES (?, ?), (?, ?)\nAS new\nON DUPLICATE KEY UPDATE\n`did` = `new`.`did`,\n`dbname` = (`new`.`dname` || ' (formerly ' || `d`.`dname` || ')')\n```\n\nLANGUAGE: go\nCODE:\n```\nmysql.Insert(\n  im.Into(\"distributors\", \"did\", \"dname\"),\n  im.Values(mysql.Arg(8, \"Anvil Distribution\")),\n  im.Values(mysql.Arg(9, \"Sentry Distribution\")),\n  im.As(\"new\"),\n  im.OnDuplicateKeyUpdate(\n    im.UpdateWithAlias(\"new\", \"did\"),\n    im.UpdateCol(\"dbname\").To(mysql.Concat(\n      mysql.Quote(\"new\", \"dname\"), mysql.S(\" (formerly \"),\n      mysql.Quote(\"d\", \"dname\"), mysql.S(\")\"),\n    )),\n  ),\n)\n```\n\n----------------------------------------\n\nTITLE: Finding a Jet with Specific Columns in Go\nDESCRIPTION: Using FindJet to retrieve specific columns of a jet record by its primary key.\nSOURCE: https://github.com/stephenafamo/bob/blob/main/website/docs/code-generation/usage.md#2025-04-19_snippet_9\n\nLANGUAGE: go\nCODE:\n```\n// SELECT \"jets\".\"id\", \"jets\".\"cargo\" FROM \"jets\" WHERE \"jets\".\"id\" = 10\njet, err := models.FindJet(ctx, db, 10, \"id\", \"cargo\")\n```\n\n----------------------------------------\n\nTITLE: Using bob.Allx with Custom Slice Types in Go\nDESCRIPTION: Example of using bob.Allx to return results as a custom slice type. Unlike bob.All, this function takes two type parameters - one for the element type and one for the slice type. This is useful when you have methods defined on the slice type itself and want to avoid manual type casting.\nSOURCE: https://github.com/stephenafamo/bob/blob/main/website/docs/sql-executor/all.md#2025-04-19_snippet_1\n\nLANGUAGE: go\nCODE:\n```\ntype userSlice []userObj\n\nfunc (u userSlice) MethodOnSliceType() {}\n\n// users is of type userSlice\nusers, err := bob.Allx[userObj, userSlice](ctx, db, q, scan.StructMapper[userObj]())\nif err != nil {\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Building Models from Templates Without Database Interaction in Go\nDESCRIPTION: Shows how to build models from templates without interacting with the database. Includes building single models, collections, and setters that can be used for model creation.\nSOURCE: https://github.com/stephenafamo/bob/blob/main/website/docs/code-generation/factories.md#2025-04-19_snippet_6\n\nLANGUAGE: go\nCODE:\n```\n// Build a new jet setter from the template\n// naturally, this ignores relationships\njetSetter := jetTemplate.BuildSetter()\n\n// Build a slice of 5 jet setters using the template\n// also ignores relationships\njetSetters := jetTemplate.BuildManySetter(5)\n\n// Build a new jet from the template\n// related templates are built and put in the `R` struct\njet := jetTemplate.Build()\n\n// Build a slice of 5 jets using the template\njets := jetTemplate.BuildMany(5)\n```\n\n----------------------------------------\n\nTITLE: Insert or Replace in SQLite using Bob\nDESCRIPTION: Shows how to perform an insert or replace operation on the 'distributors' table. The Go code uses im.OrReplace() to indicate the replace behavior.\nSOURCE: https://github.com/stephenafamo/bob/blob/main/website/docs/query-builder/sqlite/examples/insert.md#2025-04-19_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\nINSERT OR REPLACE INTO distributors (\"did\", \"dname\")\nVALUES (?1, ?2), (?3, ?4)\n```\n\nLANGUAGE: go\nCODE:\n```\nsqlite.Insert(\n  im.OrReplace(),\n  im.Into(\"distributors\", \"did\", \"dname\"),\n  im.Values(sqlite.Arg(8, \"Anvil Distribution\")),\n  im.Values(sqlite.Arg(9, \"Sentry Distribution\")),\n)\n```\n\n----------------------------------------\n\nTITLE: Generating SELECT DISTINCT Query with IN Clause in Go\nDESCRIPTION: This snippet shows how to create a SELECT DISTINCT query with an IN clause. It selects distinct 'id' and 'name' values from the 'users' table where the 'id' is in a list of provided values.\nSOURCE: https://github.com/stephenafamo/bob/blob/main/website/docs/query-builder/mysql/examples/select.md#2025-04-19_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nSELECT DISTINCT id, name FROM users WHERE (`id` IN (?, ?, ?))\n```\n\nLANGUAGE: go\nCODE:\n```\nmysql.Select(\n  sm.Columns(\"id\", \"name\"),\n  sm.Distinct(),\n  sm.From(\"users\"),\n  sm.Where(mysql.Quote(\"id\").In(mysql.Arg(100, 200, 300))),\n)\n```\n\n----------------------------------------\n\nTITLE: Creating OR Conditions in SQL with Or() Function\nDESCRIPTION: The Or() function joins multiple expressions with the OR operator. This creates a condition where any of the provided expressions can be true for the overall condition to be satisfied.\nSOURCE: https://github.com/stephenafamo/bob/blob/main/website/docs/query-builder/starters.md#2025-04-19_snippet_3\n\nLANGUAGE: go\nCODE:\n```\n// SQL: a OR b OR c\npsql.Or(\"a\", \"b\", \"c\")\n```\n\n----------------------------------------\n\nTITLE: Generated Go Code for SQL Query\nDESCRIPTION: Example of the Go code generated by Bob for the AllUsers query, including the SQL constant, function signature, and generated struct.\nSOURCE: https://github.com/stephenafamo/bob/blob/main/website/docs/code-generation/queries.md#2025-04-19_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nconst allUsersSQL = `SELECT \"users\".\"id\", \"users\".\"name\" FROM \"users\" WHERE \"id\" = ?1`\n\nfunc AllUsers(id int32) orm.ModQuery[*dialect.SelectQuery, AllUsersRow, []AllUsersRow] {\n    // ...\n}\n\ntype AllUsersRow struct {\n\tID   int32            `db:\"id\"`\n\tName null.Val[string] `db:\"name\"`\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Column Prefixes with WithPrefix Method\nDESCRIPTION: Shows how to add a prefix to all column aliases using WithPrefix, which is useful for joins with duplicate column names to avoid ambiguity.\nSOURCE: https://github.com/stephenafamo/bob/blob/main/website/docs/models/columns.md#2025-04-19_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nuserView.Columns().WithPrefix(\"users.\")\n```\n\nLANGUAGE: sql\nCODE:\n```\n\"public.users\".\"id\" AS \"users.id\",\n\"public.users\".\"name\" AS \"users.name\",\n\"public.users\".\"email\" AS \"users.email\"\n```\n\n----------------------------------------\n\nTITLE: Simple table update with Bob in MySQL\nDESCRIPTION: A basic example of updating a single field in a table with a WHERE condition. This updates the 'kind' column to 'Dramatic' where the current value is 'Drama'.\nSOURCE: https://github.com/stephenafamo/bob/blob/main/website/docs/query-builder/mysql/examples/update.md#2025-04-19_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nUPDATE films SET `kind` = ? WHERE (`kind` = ?)\n```\n\nLANGUAGE: go\nCODE:\n```\nmysql.Update(\n  um.Table(\"films\"),\n  um.SetCol(\"kind\").ToArg(\"Dramatic\"),\n  um.Where(mysql.Quote(\"kind\").EQ(mysql.Arg(\"Drama\"))),\n)\n```\n\n----------------------------------------\n\nTITLE: Attaching Existing Models as Relations\nDESCRIPTION: Demonstrates how to attach existing models as relations using the AttachXXX methods for both to-one and to-many relationships.\nSOURCE: https://github.com/stephenafamo/bob/blob/main/website/docs/code-generation/relationships.md#2025-04-19_snippet_3\n\nLANGUAGE: go\nCODE:\n```\n// to-one\njet.AttachPilot(ctx, db, &Pilot{...})\n\n// to-many\npilot.AttachJets(ctx, db, &Jet{...}, &Jet{...})\n```\n\n----------------------------------------\n\nTITLE: Creating Grouped Expressions in SQL with Group() Function\nDESCRIPTION: The Group() function groups multiple expressions by wrapping them in parentheses and separating them with commas. This is useful for creating comma-separated lists within parentheses.\nSOURCE: https://github.com/stephenafamo/bob/blob/main/website/docs/query-builder/starters.md#2025-04-19_snippet_8\n\nLANGUAGE: go\nCODE:\n```\n// SQL: (a, b, c)\npsql.Group(\"a\", \"b\", \"c\")\n```\n\n----------------------------------------\n\nTITLE: Filtering Column Lists with Only Method\nDESCRIPTION: Demonstrates how to use the Only method to select just specific columns from a column list, reducing the output to only the specified columns.\nSOURCE: https://github.com/stephenafamo/bob/blob/main/website/docs/models/columns.md#2025-04-19_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nuserView.Columns().Only(\"email\")\n```\n\nLANGUAGE: sql\nCODE:\n```\n\"public.users\".\"email\" AS \"email\",\n```\n\n----------------------------------------\n\nTITLE: Creating String Literals in SQL with S() Function\nDESCRIPTION: The S() function creates a single quoted string literal in SQL. This is used when you need to explicitly define a string value in your query.\nSOURCE: https://github.com/stephenafamo/bob/blob/main/website/docs/query-builder/starters.md#2025-04-19_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n//\tSQL: 'a string'\npsql.S(\"a string\")\n```\n\n----------------------------------------\n\nTITLE: Building a SELECT DISTINCT Query with IN Clause in Go\nDESCRIPTION: Shows how to create a SELECT DISTINCT query. The query selects unique id and name values from the users table where the id is in a list of arguments (100, 200, 300).\nSOURCE: https://github.com/stephenafamo/bob/blob/main/website/docs/query-builder/sqlite/examples/select.md#2025-04-19_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nSELECT DISTINCT id, name FROM users WHERE (\"id\" IN (?1, ?2, ?3))\n```\n\nLANGUAGE: go\nCODE:\n```\nsqlite.Select(\n  sm.Columns(\"id\", \"name\"),\n  sm.Distinct(),\n  sm.From(\"users\"),\n  sm.Where(sqlite.Quote(\"id\").In(sqlite.Arg(100, 200, 300))),\n)\n```\n\n----------------------------------------\n\nTITLE: Using PostgreSQL Concat Starter Function in Bob\nDESCRIPTION: Shows how to use the PostgreSQL-specific CONCAT starter function that joins multiple expressions with the '||' operator. This is an additional feature beyond the common starters provided by Bob.\nSOURCE: https://github.com/stephenafamo/bob/blob/main/website/docs/query-builder/psql/how-to-use.md#2025-04-19_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n// SQL: a || b || c\npsql.Concat(\"a\", \"b\", \"c\")\n```\n\n----------------------------------------\n\nTITLE: Quoting Identifiers in SQL with Quote() Function\nDESCRIPTION: The Quote() function handles proper quoting of identifiers like table and column names. This ensures proper escaping and prevents SQL injection in identifier names.\nSOURCE: https://github.com/stephenafamo/bob/blob/main/website/docs/query-builder/starters.md#2025-04-19_snippet_9\n\nLANGUAGE: go\nCODE:\n```\n// SQL: \"table\".\"column\npsql.Quote(\"table\", \"column\")\n```\n\n----------------------------------------\n\nTITLE: Registering a Hook in Bob ORM\nDESCRIPTION: This code shows how to register a hook for a specific operation (in this case, before update) on a table model in Bob ORM using the Add method.\nSOURCE: https://github.com/stephenafamo/bob/blob/main/website/docs/models/hooks.md#2025-04-19_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nuserTable.BeforeUpdateHooks.Add(myHook)\n```\n\n----------------------------------------\n\nTITLE: CTE with Column Aliases in Go using Bob\nDESCRIPTION: Shows how to create a Common Table Expression (CTE) with column aliases using the Bob SQL query builder. It defines a CTE named 'c' with columns 'id' and 'data', then selects all columns from this CTE.\nSOURCE: https://github.com/stephenafamo/bob/blob/main/website/docs/query-builder/psql/examples/select.md#2025-04-19_snippet_11\n\nLANGUAGE: sql\nCODE:\n```\nWITH c(id, data) AS (SELECT id FROM test1 LEFT JOIN test2 USING (id)) SELECT * FROM c\n```\n\nLANGUAGE: go\nCODE:\n```\npsql.Select(\n  sm.With(\"c\", \"id\", \"data\").As(psql.Select(\n    sm.Columns(\"id\"),\n    sm.From(\"test1\"),\n    sm.LeftJoin(\"test2\").Using(\"id\"),\n  )),\n  sm.From(\"c\"),\n)\n```\n\n----------------------------------------\n\nTITLE: Creating a View Model in Bob for Postgres\nDESCRIPTION: Creates a read-only view model for a 'users' table with ID, Name, and Email fields. View models can only be used for select operations.\nSOURCE: https://github.com/stephenafamo/bob/blob/main/website/docs/README.md#2025-04-19_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ntype User struct {\n    ID    int\n    Name  string\n    Email string\n}\n\n// Views includes methods for Selects and cannot be used to insert/update/delete\nvar userView = psql.NewView[User](\"public\", \"users\")\n```\n\n----------------------------------------\n\nTITLE: Finding a Jet by Primary Key in Go\nDESCRIPTION: Example of using the generated FindJet function to retrieve a jet record by its primary key.\nSOURCE: https://github.com/stephenafamo/bob/blob/main/website/docs/code-generation/usage.md#2025-04-19_snippet_8\n\nLANGUAGE: go\nCODE:\n```\n// SELECT * FROM \"jets\" WHERE \"jets\".\"id\" = 10\nmodels.FindJet(ctx, db, 10).All()\n```\n\n----------------------------------------\n\nTITLE: Updating a Jet Record in Go\nDESCRIPTION: Example of using the generated Update method to modify a jet record in the database.\nSOURCE: https://github.com/stephenafamo/bob/blob/main/website/docs/code-generation/usage.md#2025-04-19_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nerr := jet.Update(ctx, db, &models.JetSetter{\n    AirportID: omit.From(100),\n    Name:      omit.From(\"new name\"),\n})\n```\n\n----------------------------------------\n\nTITLE: Select with Limit and Offset as Arguments in Go using Bob\nDESCRIPTION: Shows how to create a SELECT query with LIMIT and OFFSET clauses using arguments in the Bob SQL query builder. It selects id and name from the users table with dynamic limit and offset values.\nSOURCE: https://github.com/stephenafamo/bob/blob/main/website/docs/query-builder/psql/examples/select.md#2025-04-19_snippet_9\n\nLANGUAGE: sql\nCODE:\n```\nSELECT id, name FROM users LIMIT $1 OFFSET $2\n```\n\nLANGUAGE: go\nCODE:\n```\npsql.Select(\n  sm.Columns(\"id\", \"name\"),\n  sm.From(\"users\"),\n  sm.Offset(psql.Arg(15)),\n  sm.Limit(psql.Arg(10)),\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Grouped Arguments in SQL with ArgGroup() Function\nDESCRIPTION: The ArgGroup() function is similar to Arg() but wraps the given set of arguments in parentheses. This is useful for creating grouped parameter sets.\nSOURCE: https://github.com/stephenafamo/bob/blob/main/website/docs/query-builder/starters.md#2025-04-19_snippet_6\n\nLANGUAGE: go\nCODE:\n```\n// SQL: ($1, $2), ($3, $4)\n// Args: ('a', 'b', 'c', 'd')\npsql.Group(psql.ArgGroup(\"a\", \"b\"), psql.ArgGroup(\"c\", \"d\"))\n```\n\n----------------------------------------\n\nTITLE: Running bobgen-mysql with Configuration File in Shell\nDESCRIPTION: This snippet shows how to run bobgen-mysql using a configuration file to specify options.\nSOURCE: https://github.com/stephenafamo/bob/blob/main/website/docs/code-generation/mysql.md#2025-04-19_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ngo run github.com/stephenafamo/bob/gen/bobgen-mysql@latest -c ./config/bobgen.yaml\n```\n\n----------------------------------------\n\nTITLE: Retrieving Record by Primary Key in Bob\nDESCRIPTION: Demonstrates how to find a user by primary key ID using the Bob ORM. This shows Bob's simplified approach as a full ORM.\nSOURCE: https://github.com/stephenafamo/bob/blob/main/website/vs/jet.md#2025-04-19_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nuser, err := models.FindUser(ctx, db, 1)\n```\n\n----------------------------------------\n\nTITLE: Quoting Schema and Table Names in Bob SQL Builder\nDESCRIPTION: Demonstrates how to quote schema and table names using Bob's Quote function. The function automatically applies the correct quote style based on the database dialect - double quotes for Postgres/SQLite and backticks for MySQL. Multiple identifiers can be quoted and joined with dots.\nSOURCE: https://github.com/stephenafamo/bob/blob/main/website/docs/query-builder/quotes.md#2025-04-19_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n// Postgres: \"schema_name\".\"table_name\"\n// SQLite: \"schema_name\".\"table_name\"\n// MySQL: `schema_name`.`table_name`\npsql.Quote(\"schema_name\", \"table_name\")\n```\n\n----------------------------------------\n\nTITLE: Executing Various Query Operations on a View Model\nDESCRIPTION: Shows different ways to execute queries on a view model, including retrieving single records, all records, using a cursor for large results, counting records, and checking for existence.\nSOURCE: https://github.com/stephenafamo/bob/blob/main/website/docs/models/view.md#2025-04-19_snippet_2\n\nLANGUAGE: go\nCODE:\n```\n// SELECT * FROM \"users\" LIMIT 1\nuserView.Query().One(ctx, db)\n\n// SELECT * FROM \"users\"\nuserView.Query().All(ctx, db)\n\n// Like All, but returns a cursor for moving through large results\nuserView.Query().Cursor(ctx, db)\n\n// SELECT count(1) FROM \"users\"\nuserView.Query().Count(ctx, db)\n\n// Like One(), but only returns a boolean indicating if the model was found\nuserView.Query().Exists(ctx, db)\n```\n\n----------------------------------------\n\nTITLE: Configuring MySQL Driver in YAML\nDESCRIPTION: This YAML configuration snippet demonstrates how to set the MySQL connection string in a configuration file.\nSOURCE: https://github.com/stephenafamo/bob/blob/main/website/docs/code-generation/mysql.md#2025-04-19_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nmysql:\n  dsn: \"user:pass@tcp(host:port)/dbname\"\n```\n\n----------------------------------------\n\nTITLE: Insert with Conflict Handling in SQLite using Bob\nDESCRIPTION: Shows how to handle conflicts during insert operations by doing nothing on conflict. The Go code uses im.OnConflict().DoNothing() to achieve this behavior.\nSOURCE: https://github.com/stephenafamo/bob/blob/main/website/docs/query-builder/sqlite/examples/insert.md#2025-04-19_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nINSERT INTO films VALUES (?1, ?2, ?3, ?4, ?5, ?6) ON CONFLICT DO NOTHING\n```\n\nLANGUAGE: go\nCODE:\n```\nsqlite.Insert(\n  im.Into(\"films\"),\n  im.Values(sqlite.Arg(\"UA502\", \"Bananas\", 105, \"1971-07-13\", \"Comedy\", \"82 mins\")),\n  im.OnConflict().DoNothing(),\n)\n```\n\n----------------------------------------\n\nTITLE: Using Window Modification in Go\nDESCRIPTION: Code showing how to use the sm.Window function with mods to modify window clauses in SQL queries.\nSOURCE: https://github.com/stephenafamo/bob/blob/main/CHANGELOG.md#2025-04-19_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nsm.Window now takes mods to modify the window clause.\n```\n\n----------------------------------------\n\nTITLE: Creating Function Calls in SQL with F() Function\nDESCRIPTION: The F() function creates a SQL function call. It takes a function name as the first parameter followed by any arguments to pass to that function.\nSOURCE: https://github.com/stephenafamo/bob/blob/main/website/docs/query-builder/starters.md#2025-04-19_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n//\tSQL: generate_series(1, 3)\npsql.F(\"generate_series\", 1, 3)\n```\n\n----------------------------------------\n\nTITLE: Simple UPDATE Query with SQLite in Go\nDESCRIPTION: Shows how to perform a basic UPDATE operation by changing the 'kind' column value from 'Drama' to 'Dramatic' in the 'films' table using the Bob library.\nSOURCE: https://github.com/stephenafamo/bob/blob/main/website/docs/query-builder/sqlite/examples/update.md#2025-04-19_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nUPDATE films SET \"kind\" = ?1 WHERE (\"kind\" = ?2)\n```\n\nLANGUAGE: go\nCODE:\n```\nsqlite.Update(\n  um.Table(\"films\"),\n  um.SetCol(\"kind\").ToArg(\"Dramatic\"),\n  um.Where(sqlite.Quote(\"kind\").EQ(sqlite.Arg(\"Drama\"))),\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Table Inclusion in YAML\nDESCRIPTION: This YAML configuration snippet demonstrates how to include specific tables or patterns for code generation.\nSOURCE: https://github.com/stephenafamo/bob/blob/main/website/docs/code-generation/mysql.md#2025-04-19_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nmysql:\n  only:\n    \"/^foo/\":\n    bar_baz:\n```\n\n----------------------------------------\n\nTITLE: Initializing SQLite Database Operations with Bob\nDESCRIPTION: Example showing how to import and use the Bob framework's SQLite dialect packages for different query types including SELECT, INSERT, UPDATE, and DELETE operations. Each operation uses its specific query mod package (sm, im, um, dm) for type-safe query building.\nSOURCE: https://github.com/stephenafamo/bob/blob/main/website/docs/query-builder/sqlite/how-to-use.md#2025-04-19_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nimport (\n    \"github.com/stephenafamo/bob/dialect/sqlite\"\n    \"github.com/stephenafamo/bob/dialect/sqlite/sm\"\n    \"github.com/stephenafamo/bob/dialect/sqlite/im\"\n    \"github.com/stephenafamo/bob/dialect/sqlite/um\"\n    \"github.com/stephenafamo/bob/dialect/sqlite/dm\"\n)\n\nfunc main() {\n    sqlite.Select(\n        sm.From(\"users\"),\n    )\n\n    sqlite.Insert(\n        im.Into(\"users\"),\n    )\n\n    sqlite.Update(\n        um.Table(\"users\"),\n    )\n\n    sqlite.Delete(\n        dm.From(\"users\"),\n    )\n\n    sqlite.Raw()\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Database Table in SQL\nDESCRIPTION: Example SQL statement for creating a 'jets' table with various column types and constraints.\nSOURCE: https://github.com/stephenafamo/bob/blob/main/website/docs/code-generation/usage.md#2025-04-19_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE jets (\n    id serial PRIMARY KEY NOT NULL,\n    pilot_id integer NOT NULL,\n    airport_id integer NOT NULL,\n    name text NOT NULL,\n    color text,\n    uuid text NOT NULL,\n    identifier text NOT NULL,\n    cargo bytea NOT NULL,\n    manifest bytea NOT NULL\n);\n```\n\n----------------------------------------\n\nTITLE: Building a SELECT Query with CROSS JOIN and Sub-select in Go\nDESCRIPTION: Demonstrates creating a SELECT query with a CROSS JOIN to a sub-select. The query selects id, name, and type from users joined with a filtered clients sub-query, and applies an additional filter on the result.\nSOURCE: https://github.com/stephenafamo/bob/blob/main/website/docs/query-builder/sqlite/examples/select.md#2025-04-19_snippet_8\n\nLANGUAGE: sql\nCODE:\n```\nSELECT id, name, type\nFROM users AS \"u\" CROSS JOIN (\n  SELECT id, type\n  FROM clients\n  WHERE (\"client_id\" = ?1)\n) AS \"clients\"\nWHERE (\"id\" = ?2)\n```\n\nLANGUAGE: go\nCODE:\n```\nsqlite.Select(\n  sm.Columns(\"id\", \"name\", \"type\"),\n  sm.From(\"users\").As(\"u\"),\n  sm.CrossJoin(sqlite.Select(\n    sm.Columns(\"id\", \"type\"),\n    sm.From(\"clients\"),\n    sm.Where(sqlite.Quote(\"client_id\").EQ(sqlite.Arg(\"123\"))),\n  )).As(\"clients\"),\n  sm.Where(sqlite.Quote(\"id\").EQ(sqlite.Arg(100))),\n)\n```\n\n----------------------------------------\n\nTITLE: PostgreSQL Configuration with Only Option\nDESCRIPTION: Example of using the 'only' configuration option to specify which tables to include in code generation using regular expressions and table names.\nSOURCE: https://github.com/stephenafamo/bob/blob/main/website/docs/code-generation/psql.md#2025-04-19_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\npsql:\n  only:\n    \"/^foo/\":\n    bar_baz:\n```\n\n----------------------------------------\n\nTITLE: Implementing OrderBy Modification in Go\nDESCRIPTION: Code snippet showing the implementation of the ClearOrderBy() method for the clause.OrderBy type, allowing users to reset order by clauses.\nSOURCE: https://github.com/stephenafamo/bob/blob/main/CHANGELOG.md#2025-04-19_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nclause.OrderBy.ClearOrderBy()\n```\n\n----------------------------------------\n\nTITLE: Creating NOT Expressions in SQL with Not() Function\nDESCRIPTION: The Not() function creates a SQL NOT expression, negating the provided expression. This is used for creating negative conditions in queries.\nSOURCE: https://github.com/stephenafamo/bob/blob/main/website/docs/query-builder/starters.md#2025-04-19_snippet_2\n\nLANGUAGE: go\nCODE:\n```\n//\tSQL: Not a = b\npsql.Not(\"a = b\")\n```\n\n----------------------------------------\n\nTITLE: Window Function over Empty Frame in Go using Bob\nDESCRIPTION: Demonstrates the use of a window function (row_number) over an empty frame using the Bob SQL query builder. It selects the row number for each row in table 'c'.\nSOURCE: https://github.com/stephenafamo/bob/blob/main/website/docs/query-builder/psql/examples/select.md#2025-04-19_snippet_12\n\nLANGUAGE: sql\nCODE:\n```\nSELECT row_number() OVER () FROM c\n```\n\nLANGUAGE: go\nCODE:\n```\npsql.Select(\n  sm.Columns(\n    psql.F(\"row_number\")(fm.Over()),\n  ),\n  sm.From(\"c\"),\n)\n```\n\n----------------------------------------\n\nTITLE: PostgreSQL Configuration with Except Option\nDESCRIPTION: Example of using the 'except' configuration option to exclude specific tables and columns from code generation.\nSOURCE: https://github.com/stephenafamo/bob/blob/main/website/docs/code-generation/psql.md#2025-04-19_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\npsql:\n  except:\n    \"/^foo/\":\n    bar_baz:\n```\n\n----------------------------------------\n\nTITLE: Implementing Query Reusability with Count() Function in Go\nDESCRIPTION: Demonstrates how the Count() function on Views now clones the query instead of modifying the existing one, making queries reusable and allowing Count() to behave as expected.\nSOURCE: https://github.com/stephenafamo/bob/blob/main/CHANGELOG.md#2025-04-19_snippet_12\n\nLANGUAGE: go\nCODE:\n```\n// This now works as expected\nquery := models.Jets.Query(ctx, db, /** list of various mods **/)\ncount, err := query.Count()\nitems, err := query.All()\n```\n\n----------------------------------------\n\nTITLE: Advanced SQL Driver Configuration with Exceptions\nDESCRIPTION: Example configuration showing how to exclude specific tables and columns from generation using the except parameter.\nSOURCE: https://github.com/stephenafamo/bob/blob/main/website/docs/code-generation/sql.md#2025-04-19_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nsql:\n  # Removes public.migrations table, the name column from the addresses table, and\n  # secret_col of any table from being generated. Foreign keys that reference tables\n  # or columns that are no longer generated may cause problems.\n  except:\n    public.migrations:\n    public.addresses:\n      - name\n    \"*\":\n      - secret_col\n```\n\n----------------------------------------\n\nTITLE: Defining scan.Rows Interface in Go\nDESCRIPTION: This snippet defines the scan.Rows interface used by Bob's Executor. It includes methods for scanning rows, retrieving column names, iterating through results, closing the result set, and checking for errors.\nSOURCE: https://github.com/stephenafamo/bob/blob/main/website/docs/sql-executor/why-not.md#2025-04-19_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n// Rows is an interface that is expected to be returned as the result of a query\ntype Rows interface {\n\tScan(...any) error\n\tColumns() ([]string, error)\n\tNext() bool\n\tClose() error\n\tErr() error\n}\n```\n\n----------------------------------------\n\nTITLE: Running Bob SQLite Generator from Command Line\nDESCRIPTION: Shows how to execute the Bob SQLite generator using environment variables or a configuration file.\nSOURCE: https://github.com/stephenafamo/bob/blob/main/website/docs/code-generation/sqlite.md#2025-04-19_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n# With env variable\nSQLITE_DSN=test.db go run github.com/stephenafamo/bob/gen/bobgen-sqlite@latest\n\n# With configuration file\ngo run github.com/stephenafamo/bob/gen/bobgen-sqlite@latest -c ./config/bobgen.yaml\n```\n\n----------------------------------------\n\nTITLE: Changing Function Modification Pattern with F() Starter in Go\nDESCRIPTION: Illustrates the change in how functions are modified, replacing chained methods with a function that can be called with mods, enabling support for more query types.\nSOURCE: https://github.com/stephenafamo/bob/blob/main/CHANGELOG.md#2025-04-19_snippet_13\n\nLANGUAGE: go\nCODE:\n```\n// Before\npsql.F( \"count\", \"*\",).FilterWhere(psql.Quote(\"status\").EQ(psql.S(\"done\"))),\n// After\n// import \"github.com/stephenafamo/bob/dialect/psql/fm\"\npsql.F( \"count\", \"*\",)(fm.Filter(psql.Quote(\"status\").EQ(psql.S(\"done\")))),\n\n```\n\n----------------------------------------\n\nTITLE: Case Statement without Else in Go using Bob\nDESCRIPTION: Demonstrates a SELECT query with a CASE statement without an ELSE clause using the Bob SQL query builder in Go. It selects id, name, and a conditional column C from the users table.\nSOURCE: https://github.com/stephenafamo/bob/blob/main/website/docs/query-builder/psql/examples/select.md#2025-04-19_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nSELECT id, name, (CASE WHEN (id = '1') THEN 'A' END) AS \"C\" FROM users\n```\n\nLANGUAGE: go\nCODE:\n```\npsql.Select(\n  sm.Columns(\n    \"id\",\n    \"name\",\n    psql.Case().\n      When(psql.Quote(\"id\").EQ(psql.S(\"1\")), psql.S(\"A\")).\n      End().\n      As(\"C\"),\n  ),\n  sm.From(\"users\"),\n)\n```\n\n----------------------------------------\n\nTITLE: Deleting Multiple Jet Records in Go\nDESCRIPTION: Using the DeleteAll method to remove multiple jet records simultaneously.\nSOURCE: https://github.com/stephenafamo/bob/blob/main/website/docs/code-generation/usage.md#2025-04-19_snippet_5\n\nLANGUAGE: go\nCODE:\n```\n_, err := jets.DeleteAll(ctx, db)\n```\n\n----------------------------------------\n\nTITLE: Configuring To-Many Relationships in Factory Templates in Go\nDESCRIPTION: Demonstrates how to handle to-many relationships in factory templates. Includes methods to clear, set, or add related models with precise control over the number of instances.\nSOURCE: https://github.com/stephenafamo/bob/blob/main/website/docs/code-generation/factories.md#2025-04-19_snippet_5\n\nLANGUAGE: go\nCODE:\n```\n// FOR to-many relationships\nf.NewPilot(\n    // Clear all related jets\n    factory.PilotMods.WithoutJets(),\n\n    //---------------------------------------------------\n    // SET variants overwrite any existing relationships\n    //---------------------------------------------------\n\n    // set exactly 5 jets generated from the given template\n    factory.PilotMods.WithJets(5, &JetTemplate{}),\n\n    // set exactly 5 jets generated from the same factory with the given mods\n    factory.PilotMods.WithNewJets(5, ...factory.JetMod),\n\n    //---------------------------------------------------\n    // ADD variants append to existing relationships\n    //---------------------------------------------------\n\n    // add 5 jets generated from the given template\n    factory.PilotMods.AddJets(5, &JetTemplate{}),\n\n    // add 5 jets generated from the same factory with the given mods\n    factory.PilotMods.AddNewJets(5, ...factory.JetMod),\n)\n```\n\n----------------------------------------\n\nTITLE: SQLite Configuration with Table Inclusion Filters\nDESCRIPTION: Shows how to configure SQLite to only generate models for tables matching specific patterns or names.\nSOURCE: https://github.com/stephenafamo/bob/blob/main/website/docs/code-generation/sqlite.md#2025-04-19_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nsqlite:\n  only:\n    \"/^foo/\":\n    bar_baz:\n```\n\n----------------------------------------\n\nTITLE: Comparing Old and New Insert Query Patterns in Bob ORM\nDESCRIPTION: Demonstrates the transition from the old insert method pattern to the new fluent API design. The new approach provides more flexibility with methods like One() and All() for single and bulk inserts.\nSOURCE: https://github.com/stephenafamo/bob/blob/main/CHANGELOG.md#2025-04-19_snippet_7\n\nLANGUAGE: go\nCODE:\n```\n//----------------------------------------------\n// OLD WAY\n//----------------------------------------------\nuser, err := models.Users.Insert(ctx, db, setter) // insert one\nusers, err := models.Users.InsertMany(ctx, db, setters...) // insert many\n\n//----------------------------------------------\n// NEW WAY\n//----------------------------------------------\nuser, err := models.Users.Insert(setter).One(ctx, db) // insert one\nusers, err := models.Users.Insert(setters[0], setters[1]).All(ctx, db) // insert many\n\n// For cases where you already have a slice of setters and you want to pass them all, you can use `bob.ToMods`\nusers, err := models.Users.Insert(bob.ToMods(setters)).All(ctx, db) // insert many\n```\n\n----------------------------------------\n\nTITLE: Environment Variable Configuration\nDESCRIPTION: Example of setting SQL driver configuration using environment variables.\nSOURCE: https://github.com/stephenafamo/bob/blob/main/website/docs/code-generation/sql.md#2025-04-19_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nSQL_DIALECT=psql\n```\n\n----------------------------------------\n\nTITLE: Running PostgreSQL Generator with Environment Variables\nDESCRIPTION: Shows how to run the Bob PostgreSQL generator using environment variables for database connection.\nSOURCE: https://github.com/stephenafamo/bob/blob/main/website/docs/code-generation/psql.md#2025-04-19_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n# With env variable\nPSQL_DSN=postgres://user:pass@host:port/dbname go run github.com/stephenafamo/bob/gen/bobgen-psql@latest\n\n# With configuration file\ngo run github.com/stephenafamo/bob/gen/bobgen-psql@latest -c ./config/bobgen.yaml\n```\n\n----------------------------------------\n\nTITLE: Running Bob SQL Generator Command\nDESCRIPTION: Commands to run the Bob SQL generator using either environment variables or a configuration file.\nSOURCE: https://github.com/stephenafamo/bob/blob/main/website/docs/code-generation/sql.md#2025-04-19_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n# With env variable\nSQL_DIALECT=psql go run github.com/stephenafamo/bob/gen/bobgen-sql@latest\n\n# With configuration file\ngo run github.com/stephenafamo/bob/gen/bobgen-sql@latest -c ./config/bobgen.yaml\n```\n\n----------------------------------------\n\nTITLE: Implementing Model Slice Operations in Go\nDESCRIPTION: Methods for slice operations that return mods for update and delete queries on a slice of models, handling primary keys and hooks.\nSOURCE: https://github.com/stephenafamo/bob/blob/main/CHANGELOG.md#2025-04-19_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nmodelSlice.UpdateMod() and modelSlice.DeleteMod()\n```\n\n----------------------------------------\n\nTITLE: Case Statement with Else in Go using Bob\nDESCRIPTION: Shows how to construct a SELECT query with a CASE statement including an ELSE clause using the Bob SQL query builder in Go. It selects id, name, and a conditional column C from the users table.\nSOURCE: https://github.com/stephenafamo/bob/blob/main/website/docs/query-builder/psql/examples/select.md#2025-04-19_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nSELECT id, name, (CASE WHEN (id = '1') THEN 'A' ELSE 'B' END) AS \"C\" FROM users\n```\n\nLANGUAGE: go\nCODE:\n```\npsql.Select(\n  sm.Columns(\n    \"id\",\n    \"name\",\n    psql.Case().\n      When(psql.Quote(\"id\").EQ(psql.S(\"1\")), psql.S(\"A\")).\n      Else(psql.S(\"B\")).\n      As(\"C\"),\n  ),\n  sm.From(\"users\"),\n)\n```\n\n----------------------------------------\n\nTITLE: Reloading a Jet Record in Go\nDESCRIPTION: Example of using the generated Reload method to refresh a jet record from the database.\nSOURCE: https://github.com/stephenafamo/bob/blob/main/website/docs/code-generation/usage.md#2025-04-19_snippet_6\n\nLANGUAGE: go\nCODE:\n```\n_, err := jet.Reload(ctx, db)\n```\n\n----------------------------------------\n\nTITLE: Handling Unique Constraint Errors in Go\nDESCRIPTION: Examples of handling unique constraint errors using the generated error constants.\nSOURCE: https://github.com/stephenafamo/bob/blob/main/website/docs/code-generation/usage.md#2025-04-19_snippet_13\n\nLANGUAGE: go\nCODE:\n```\npilot, err := models.Pilots.Insert(setter).One(ctx, db)\nif errors.Is(models.PilotErrors.ErrUniqueFirstNameAndLastName, err) {\n    // handle the error\n}\n\n// Alternative approach\npilot, err := models.Pilots.Insert(setter).One(ctx, db)\nif models.PilotErrors.ErrUniqueFirstNameAndLastName.Is(err) {\n    // handle the error\n}\n\n// Generic unique constraint error handling\npilot, err := models.Pilots.Insert(setter).One(ctx, db)\nif errors.Is(models.ErrUniqueConstraint, err) {\n    // handle the error\n}\n\n// Alternative generic approach\npilot, err := models.Pilots.Insert(setter).One(ctx, db)\nif models.ErrUniqueConstraint.Is(err) {\n    // handle the error\n}\n```\n\n----------------------------------------\n\nTITLE: Factory Modification Interface in Go\nDESCRIPTION: Shows the interface that factory modifications must implement. Custom mods can be created by implementing this interface to provide advanced customization.\nSOURCE: https://github.com/stephenafamo/bob/blob/main/website/docs/code-generation/factories.md#2025-04-19_snippet_2\n\nLANGUAGE: go\nCODE:\n```\ntype JetMod interface {\n\tApply(*JetTemplate)\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Types in YAML\nDESCRIPTION: Example YAML configuration for registering custom types with random expression generation and comparison logic.\nSOURCE: https://github.com/stephenafamo/bob/blob/main/website/docs/code-generation/configuration.md#2025-04-19_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\ntypes:\n  xml:\n    # OPTIONAL: If this type is an alias of another type\n    # this is useful to have custom randomization for a type e.g. xml\n    alias_of: \"string\"\n    # If this depends on another type, you can specify the type here\n    depends_on:\n      - \"string\"\n    # The random expression for this type\n    random_expr: |-\n      tag := f.Lorem().Word()\n      return fmt.Sprintf(\"<%s>%s</%s>\", tag, f.Lorem().Word(), tag)\n  LocalType:\n    # Set this to true if your custom type is declared in the generated package (i.e. \"models\").\n    # If this is not the case, \"models.\" will not be prefixed in the generated factory.\n    in_generated_package: true\n    no_randomization_test: true\n    random_expr: |\n      localType := models.LocalType{}\n      return localType\n  type.JSON[json.RawMessage]:\n    # If true, a test for the random expression will not be generated\n    no_randomization_test: false\n    imports:\n      - '\"encoding/json\"'\n      - '\"github.com/stephenafamo/bob/types\"'\n    # To be used in factory.random_type\n    # a variable `f` of type `faker.Faker` is available\n    random_expr: |-\n      s := &bytes.Buffer{}\n      s.WriteRune('{')\n      for i := 0; i < f.IntBetween(1, 5); i++ {\n          if i > 0 {\n              fmt.Fprint(s, \", \")\n          }\n          fmt.Fprintf(s, \"%q:%q\", f.Lorem().Word(), f.Lorem().Word())\n      }\n      s.WriteRune('}')\n      return types.NewJSON[json.RawMessage](s.Bytes())`\n    # Imports for the random expression\n    random_expr_imports:\n      - '\"bytes\"'\n      - '\"fmt\"'\n    # CompareExpr is used to compare two values of this type\n    # if not provided, == is used\n    # Used AAA and BBB as placeholders for the two values\n    compare_expr: |-\n      bytes.Equal(AAA.Val, BBB.Val)\n    # Imports for the compare expression\n    compare_expr_imports:\n      - '\"bytes\"'\n```\n\n----------------------------------------\n\nTITLE: SQL Schema Definition for Users Table\nDESCRIPTION: Example SQL schema definition creating a users table with id and name columns.\nSOURCE: https://github.com/stephenafamo/bob/blob/main/website/docs/code-generation/queries.md#2025-04-19_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE users (\n    id INT PRIMARY KEY NOT NULL,\n    name TEXT\n);\n```\n\n----------------------------------------\n\nTITLE: Reloading Multiple Jet Records in Go\nDESCRIPTION: Using the ReloadAll method to refresh multiple jet records simultaneously.\nSOURCE: https://github.com/stephenafamo/bob/blob/main/website/docs/code-generation/usage.md#2025-04-19_snippet_7\n\nLANGUAGE: go\nCODE:\n```\n_, err := jets.ReloadAll(ctx, db)\n```\n\n----------------------------------------\n\nTITLE: Simple DELETE Query in MySQL\nDESCRIPTION: Demonstrates a basic DELETE operation from the films table with a simple WHERE clause filtering by kind.\nSOURCE: https://github.com/stephenafamo/bob/blob/main/website/docs/query-builder/mysql/examples/delete.md#2025-04-19_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nDELETE FROM films WHERE (`kind` = ?)\n```\n\nLANGUAGE: go\nCODE:\n```\nmysql.Delete(\n  dm.From(\"films\"),\n  dm.Where(mysql.Quote(\"kind\").EQ(mysql.Arg(\"Drama\"))),\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Word Inflections in BOB\nDESCRIPTION: This configuration controls the rules used to generate singular/plural variants of words, which is useful for consistent naming when the same word or suffix appears multiple times. It includes both plural suffix rules and exact word mappings.\nSOURCE: https://github.com/stephenafamo/bob/blob/main/website/docs/code-generation/configuration.md#2025-04-19_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\ninflections:\n  plural: # Rules to convert a suffix to its plural form\n    ium: ia\n  plural_exact: # Rul\n```\n\n----------------------------------------\n\nTITLE: SQL Query with Bob-Specific Comment\nDESCRIPTION: Example SQL query with a comment specifying the query name for code generation.\nSOURCE: https://github.com/stephenafamo/bob/blob/main/website/docs/code-generation/queries.md#2025-04-19_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\n-- AllUsers\nSELECT * FROM users WHERE id = ?;\n```\n\n----------------------------------------\n\nTITLE: Changing Parent Tables with WithParent Method\nDESCRIPTION: Demonstrates how to change the parent of a column list using WithParent, which is useful when selecting with an alias or from a different schema.\nSOURCE: https://github.com/stephenafamo/bob/blob/main/website/docs/models/columns.md#2025-04-19_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nuserView.Columns().WithParent(\"backup\", \"users_old\")\n```\n\nLANGUAGE: sql\nCODE:\n```\n\"backup\".\"users_old\".\"id\" AS \"id\",\n\"backup\".\"users_old\".\"name\" AS \"name\",\n\"backup\".\"users_old\".\"email\" AS \"email\"\n```\n\n----------------------------------------\n\nTITLE: Configuring To-One Relationships in Factory Templates in Go\nDESCRIPTION: Shows how to configure to-one relationships in factory templates. This includes removing related objects, using existing templates, or creating new ones.\nSOURCE: https://github.com/stephenafamo/bob/blob/main/website/docs/code-generation/factories.md#2025-04-19_snippet_4\n\nLANGUAGE: go\nCODE:\n```\n// FOR to-one relationships\nf.NewJet(\n    // Clear the related pilot\n    factory.JetMods.WithoutPilot(),\n\n    // add a pilot from the given template\n    factory.JetMods.WithPilot(&PilotTemplate),\n\n    // generate a new pilot template from the same factory and use it\n    factory.JetMods.WithNewPilot(...factory.PilotMod),\n)\n```\n\n----------------------------------------\n\nTITLE: Multi-table update with Bob in MySQL\nDESCRIPTION: An example of updating multiple tables at once with a join condition. This increments the 'sales_count' in the 'employees' table for sales persons associated with 'Acme Corporation' in the 'accounts' table.\nSOURCE: https://github.com/stephenafamo/bob/blob/main/website/docs/query-builder/mysql/examples/update.md#2025-04-19_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nUPDATE employees, accounts SET `sales_count` = sales_count + 1 WHERE (`accounts`.`name` = ?) AND (`employees`.`id` = `accounts`.`sales_person`)\n```\n\nLANGUAGE: go\nCODE:\n```\nmysql.Update(\n  um.Table(\"employees, accounts\"),\n  um.SetCol(\"sales_count\").To(\"sales_count + 1\"),\n  um.Where(mysql.Quote(\"accounts\", \"name\").EQ(mysql.Arg(\"Acme Corporation\"))),\n  um.Where(mysql.Quote(\"employees\", \"id\").EQ(mysql.Quote(\"accounts\", \"sales_person\"))),\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Database Constraints in BOB\nDESCRIPTION: This configuration allows manual definition of additional database constraints, useful for database systems that don't support constraints natively. It supports defining primary keys, unique constraints, and foreign key relationships for specific tables.\nSOURCE: https://github.com/stephenafamo/bob/blob/main/website/docs/code-generation/configuration.md#2025-04-19_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nconstraints:\n  pilots:\n    primary: # This will overwirte any existing primary key on the table\n      name: \"pilots_pkey\"\n      columns: [id]\n    uniques: # These will be added to existing unique constraints\n      - name: \"pilot_name_unique\"\n        columns: [name]\n      - name: \"pilot_nickname_unique\"\n        columns: [nickname]\n    foreign: # These will be added to existing foreign constraints\n      - name: \"pilot_to_jets\"\n        columns: [id]\n        foreign_table: \"jets\"\n        foreign_columns: [pilot_id]\n```\n\n----------------------------------------\n\nTITLE: Creating Aliases in SQL with As() Function\nDESCRIPTION: The As() function creates an alias for an expression in SQL. This is commonly used for aliasing table names or column names in queries.\nSOURCE: https://github.com/stephenafamo/bob/blob/main/website/docs/query-builder/starters.md#2025-04-19_snippet_11\n\nLANGUAGE: go\nCODE:\n```\n// SQL: pilots as \"p\"\npsql.As(\"pilots\", \"p\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Multi-Table Relationships in BOB\nDESCRIPTION: This configuration demonstrates how to define relationships that span multiple tables using the 'sides' property. The example shows connecting users to videos through teams, where multiple relationship hops are defined in sequence.\nSOURCE: https://github.com/stephenafamo/bob/blob/main/website/docs/code-generation/configuration.md#2025-04-19_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nrelationships:\n  users:\n    - name: \"users_to_videos_through_teams\"\n      sides:\n        - from: \"users\"\n          to: \"teams\"\n          columns: [[team_id, id]]\n        - from: \"teams\"\n          to: \"videos\"\n          columns: [[id, team_id]]\n```\n\n----------------------------------------\n\nTITLE: INSERT FROM SELECT query in MySQL with Bob\nDESCRIPTION: Shows how to insert data into a table from a SELECT query result. This example inserts rows from tmp_films into films where the date_prod is before a specified date.\nSOURCE: https://github.com/stephenafamo/bob/blob/main/website/docs/query-builder/mysql/examples/insert.md#2025-04-19_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nINSERT INTO films SELECT * FROM tmp_films WHERE (`date_prod` < ?)\n```\n\nLANGUAGE: go\nCODE:\n```\nmysql.Insert(\n  im.Into(\"films\"),\n  im.Query(mysql.Select(\n    sm.From(\"tmp_films\"),\n    sm.Where(mysql.Quote(\"date_prod\").LT(mysql.Arg(\"1971-07-13\"))),\n  )),\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Aliases in YAML\nDESCRIPTION: Example YAML configuration for customizing table, column and relationship names in generated Go code using aliases.\nSOURCE: https://github.com/stephenafamo/bob/blob/main/website/docs/code-generation/configuration.md#2025-04-19_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\naliases:\n  team_names:\n    up_plural: \"TeamNames\"\n    up_singular: \"TeamName\"\n    down_plural: \"teamNames\"\n    down_singular: \"teamName\"\n    columns: # Columns can be aliased by name\n      uuid: \"ID\"\n    relationships: # Relationships can be aliased by name\n      team_id_fkey: \"Owner\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Query Folders in Bob\nDESCRIPTION: YAML configuration example showing how to specify folders containing SQL files for code generation.\nSOURCE: https://github.com/stephenafamo/bob/blob/main/website/docs/code-generation/queries.md#2025-04-19_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nsqlite:\n  dsn: file.db\n  queries:\n    - ./path/to/folder/containing/sql/files\n    - ./another/folder\n```\n\n----------------------------------------\n\nTITLE: Creating Multiple Placeholders in SQL with Placeholders() Function\nDESCRIPTION: The Placeholders() function inserts a specified count of placeholders without any specific values. This is useful for compiling reusable queries where values will be provided later.\nSOURCE: https://github.com/stephenafamo/bob/blob/main/website/docs/query-builder/starters.md#2025-04-19_snippet_7\n\nLANGUAGE: go\nCODE:\n```\n// SQL: $1, $2, $3\n// Args: nil, nil, nil\npsql.Placeholders(3)\n```\n\n----------------------------------------\n\nTITLE: Left Join Using in Go using Bob\nDESCRIPTION: Demonstrates a SELECT query with a LEFT JOIN USING clause in the Bob SQL query builder. It selects id from test1 left joined with test2 using the id column.\nSOURCE: https://github.com/stephenafamo/bob/blob/main/website/docs/query-builder/psql/examples/select.md#2025-04-19_snippet_10\n\nLANGUAGE: sql\nCODE:\n```\nSELECT id FROM test1 LEFT JOIN test2 USING (id)\n```\n\nLANGUAGE: go\nCODE:\n```\npsql.Select(\n  sm.Columns(\"id\"),\n  sm.From(\"test1\"),\n  sm.LeftJoin(\"test2\").Using(\"id\"),\n)\n```\n\n----------------------------------------\n\nTITLE: Insert from Select in PostgreSQL with Go\nDESCRIPTION: Shows how to insert data into the 'films' table by selecting from another table 'tmp_films' with a condition. The Go code constructs both the insert and select statements using the custom library.\nSOURCE: https://github.com/stephenafamo/bob/blob/main/website/docs/query-builder/psql/examples/insert.md#2025-04-19_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nINSERT INTO films SELECT * FROM tmp_films WHERE \"date_prod\" < $1\n```\n\nLANGUAGE: go\nCODE:\n```\npsql.Insert(\n  im.Into(\"films\"),\n  im.Query(psql.Select(\n    sm.From(\"tmp_films\"),\n    sm.Where(psql.Quote(\"date_prod\").LT(psql.Arg(\"1971-07-13\"))),\n  )),\n)\n```\n\n----------------------------------------\n\nTITLE: PostgreSQL Column Exclusion Configuration\nDESCRIPTION: Advanced example of excluding specific columns from tables during code generation.\nSOURCE: https://github.com/stephenafamo/bob/blob/main/website/docs/code-generation/psql.md#2025-04-19_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\npsql:\n  except:\n    public.migrations:\n    public.addresses:\n      - name\n    \"*\":\n      - secret_col\n```\n\n----------------------------------------\n\nTITLE: Creating a Pilots Table in SQL\nDESCRIPTION: SQL statement for creating a 'pilots' table with a unique constraint on first_name and last_name.\nSOURCE: https://github.com/stephenafamo/bob/blob/main/website/docs/code-generation/usage.md#2025-04-19_snippet_11\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE pilots (\n    id serial PRIMARY KEY NOT NULL,\n    first_name text NOT NULL,\n    last_name text NOT NULL,\n    UNIQUE (first_name, last_name)\n);\n```\n\n----------------------------------------\n\nTITLE: Using Named Parameters in Go Queries\nDESCRIPTION: Functions for adding and binding named arguments in queries, enhancing the flexibility of query construction.\nSOURCE: https://github.com/stephenafamo/bob/blob/main/CHANGELOG.md#2025-04-19_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nbob.Named() and bob.BindNamed\n```\n\n----------------------------------------\n\nTITLE: Insert from Select in SQLite using Bob\nDESCRIPTION: Shows how to insert data into the 'films' table by selecting from 'tmp_films' with a condition. The Go code constructs a subquery using Bob's select builder.\nSOURCE: https://github.com/stephenafamo/bob/blob/main/website/docs/query-builder/sqlite/examples/insert.md#2025-04-19_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nINSERT INTO films SELECT * FROM tmp_films WHERE (\"date_prod\" < ?1)\n```\n\nLANGUAGE: go\nCODE:\n```\nsqlite.Insert(\n  im.Into(\"films\"),\n  im.Query(sqlite.Select(\n    sm.From(\"tmp_films\"),\n    sm.Where(sqlite.Quote(\"date_prod\").LT(sqlite.Arg(\"1971-07-13\"))),\n  )),\n)\n```\n\n----------------------------------------\n\nTITLE: Generated Error Constants Structure in Go\nDESCRIPTION: Example of generated error constants for the pilots table, including a unique constraint error.\nSOURCE: https://github.com/stephenafamo/bob/blob/main/website/docs/code-generation/usage.md#2025-04-19_snippet_12\n\nLANGUAGE: go\nCODE:\n```\ntype pilotErrors struct {\n    ErrUniqueFirstNameAndLastName *UniqueConstraintError\n}\n```\n\n----------------------------------------\n\nTITLE: Importing DocCardList Component from Docusaurus Theme\nDESCRIPTION: Imports the DocCardList component from the Docusaurus theme, which is used to automatically generate a list of child documents in this documentation section.\nSOURCE: https://github.com/stephenafamo/bob/blob/main/website/docs/query-builder/sqlite/examples/index.md#2025-04-19_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport DocCardList from '@theme/DocCardList';\n```\n\n----------------------------------------\n\nTITLE: Running bobgen-mysql with Environment Variable in Shell\nDESCRIPTION: This snippet demonstrates how to run bobgen-mysql using an environment variable to specify the MySQL connection string.\nSOURCE: https://github.com/stephenafamo/bob/blob/main/website/docs/code-generation/mysql.md#2025-04-19_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nMYSQL_DSN=user:pass@tcp(host:port)/dbname go run github.com/stephenafamo/bob/gen/bobgen-mysql@latest\n```\n\n----------------------------------------\n\nTITLE: PostgreSQL Configuration Using YAML\nDESCRIPTION: Example of configuring PostgreSQL driver settings using YAML configuration file.\nSOURCE: https://github.com/stephenafamo/bob/blob/main/website/docs/code-generation/psql.md#2025-04-19_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\npsql:\n  dsn: \"postgres://user:pass@host:port/dbname\"\n```\n\n----------------------------------------\n\nTITLE: Retrieving Records with Relations in Jet\nDESCRIPTION: Shows how to fetch a user with related videos using Jet's query builder. This demonstrates Jet's more manual approach requiring explicit JOIN definitions and custom struct mapping.\nSOURCE: https://github.com/stephenafamo/bob/blob/main/website/vs/jet.md#2025-04-19_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nvar dest struct {\n    model.Users\n    Videos []model.Videos\n}\nerr = postgres.\n    SELECT(\n        table.Users.AllColumns,\n        table.Videos.AllColumns,\n    ).\n    FROM(\n        table.Users.\n            INNER_JOIN(table.Videos, table.Users.ID.EQ(table.Videos.UserID)),\n    ).\n    WHERE(table.Users.ID.EQ(postgres.Int(1))).\n    QueryContext(ctx, db, &dest)\n```\n\n----------------------------------------\n\nTITLE: Modifying a Generated Query with QueryMod\nDESCRIPTION: Example of extending a generated query with additional conditions using QueryMod.\nSOURCE: https://github.com/stephenafamo/bob/blob/main/website/docs/code-generation/queries.md#2025-04-19_snippet_5\n\nLANGUAGE: go\nCODE:\n```\n// Also filter where name = \"Bob\"\nquery := sqlite.Select(\n    AllUsers(1),\n    psql.Quote(\"name\").EQ(psql.Arg(\"Bob\")),\n)\n```\n\n----------------------------------------\n\nTITLE: Executing a Generated Query in Go\nDESCRIPTION: Example of how to use the generated AllUsers function to create a query object.\nSOURCE: https://github.com/stephenafamo/bob/blob/main/website/docs/code-generation/queries.md#2025-04-19_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nquery := AllUsers(1)\n```\n\n----------------------------------------\n\nTITLE: Defining SQL ENUM for Workdays\nDESCRIPTION: Creates a SQL ENUM type 'workday' with values for each workday of the week. This enum definition serves as the basis for generating corresponding Go code.\nSOURCE: https://github.com/stephenafamo/bob/blob/main/website/docs/code-generation/enums.md#2025-04-19_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TYPE workday AS ENUM('monday', 'tuesday', 'wednesday', 'thursday', 'friday');\n```\n\n----------------------------------------\n\nTITLE: Select with Order By and Collate in Go using Bob\nDESCRIPTION: Demonstrates a SELECT query with ORDER BY and COLLATE clauses using the Bob SQL query builder. It selects id and name from the users table, ordering by name with a specific collation.\nSOURCE: https://github.com/stephenafamo/bob/blob/main/website/docs/query-builder/psql/examples/select.md#2025-04-19_snippet_14\n\nLANGUAGE: sql\nCODE:\n```\nSELECT id, name FROM users ORDER BY name COLLATE \"bg-BG-x-icu\" ASC\n```\n\nLANGUAGE: go\nCODE:\n```\npsql.Select(\n  sm.Columns(\"id\", \"name\"),\n  sm.From(\"users\"),\n  sm.OrderBy(\"name\").Collate(\"bg-BG-x-icu\").Asc(),\n)\n```\n\n----------------------------------------\n\nTITLE: Rendering DocCardList with Filtered Items in React\nDESCRIPTION: This code snippet renders a DocCardList component, filtering out the 'Introduction' item from the current sidebar category. It demonstrates how to dynamically generate documentation navigation based on the sidebar structure.\nSOURCE: https://github.com/stephenafamo/bob/blob/main/website/docs/query-builder/intro.md#2025-04-19_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<DocCardList items={useCurrentSidebarCategory().items.filter(i => i.label != 'Introduction')} />\n```\n\n----------------------------------------\n\nTITLE: PostgreSQL Environment Variable Configuration\nDESCRIPTION: Example of setting PostgreSQL connection string using environment variables, including SSL mode configuration.\nSOURCE: https://github.com/stephenafamo/bob/blob/main/website/docs/code-generation/psql.md#2025-04-19_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nPSQL_DSN=\"postgres://user:pass@host:port/dbname\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Table Exclusion in YAML\nDESCRIPTION: This YAML configuration snippet shows how to exclude specific tables or patterns from code generation.\nSOURCE: https://github.com/stephenafamo/bob/blob/main/website/docs/code-generation/mysql.md#2025-04-19_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nmysql:\n  except:\n    \"/^foo/\":\n    bar_baz:\n```\n\n----------------------------------------\n\nTITLE: Defining Bob Generator Config Struct in Go\nDESCRIPTION: Go struct definition for Bob's configuration options including tags, factory settings, relationship configurations, and custom type definitions.\nSOURCE: https://github.com/stephenafamo/bob/blob/main/website/docs/code-generation/configuration.md#2025-04-19_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n// Config for the running of the commands\ntype Config struct {\n\t// Struct tags to generate\n\tTags []string `yaml:\"tags\"`\n\t// Disable generating factories for models\n\tNoFactory bool `yaml:\"no_factory\"`\n\t// Disable generating go test files\n\tNoTests bool `yaml:\"no_tests\"`\n\t// Disable back referencing in the loaded relationship structs\n\tNoBackReferencing bool `yaml:\"no_back_referencing\"`\n\t// Delete the output folder (rm -rf) before generation to ensure sanity\n\tWipe bool `yaml:\"wipe\"`\n\t// Decides the casing for go structure tag names. camel, title or snake (default snake)\n\tStructTagCasing string `yaml:\"struct_tag_casing\"`\n\t// Relationship struct tag name\n\tRelationTag string `yaml:\"relation_tag\"`\n\t// List of column names that should have tags values set to '-' (ignored during parsing)\n\tTagIgnore []string `yaml:\"tag_ignore\"`\n\n\tTypes         drivers.Types `yaml:\"types\"`         // register custom types\n\tAliases       Aliases       `yaml:\"aliases\"`       // customize aliases\n\tConstraints   Constraints   `yaml:\"constraints\"`   // define additional constraints\n\tRelationships Relationships `yaml:\"relationships\"` // define additional relationships\n\n\tReplacements []Replace   `yaml:\"replacements\"`\n\tInflections  Inflections `yaml:\"inflections\"`\n\n\t// Customize the generator name in the top level comment of generated files\n\t// >>   Code generated by **GENERATOR NAME**. DO NOT EDIT.\n\t// defaults to \"BobGen [driver] [version]\"\n\tGenerator string `yaml:\"generator\"`\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering DocCardList Component in Markdown/JSX\nDESCRIPTION: This code renders the DocCardList component within the markdown file, which will automatically display cards for all the example documents in this section of the documentation.\nSOURCE: https://github.com/stephenafamo/bob/blob/main/website/docs/query-builder/psql/examples/index.md#2025-04-19_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<DocCardList />\n```\n\n----------------------------------------\n\nTITLE: Importing DocCardList Component from Docusaurus Theme in JSX\nDESCRIPTION: This code imports the DocCardList component from the Docusaurus theme package, which is used to automatically display a list of document cards for the examples section.\nSOURCE: https://github.com/stephenafamo/bob/blob/main/website/docs/query-builder/psql/examples/index.md#2025-04-19_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport DocCardList from '@theme/DocCardList';\n```\n\n----------------------------------------\n\nTITLE: Using Table AliasedAs Method for Custom Join Aliases\nDESCRIPTION: Shows how to use the AliasedAs() method to set custom aliases when performing table joins. This feature allows for more control over generated SQL.\nSOURCE: https://github.com/stephenafamo/bob/blob/main/CHANGELOG.md#2025-04-19_snippet_8\n\nLANGUAGE: go\nCODE:\n```\nmodels.SelectJoins.Jets.AliasedAs(\"j\").InnerJoin.Pilots(ctx)\n```\n\n----------------------------------------\n\nTITLE: Basic SQLite Configuration in YAML\nDESCRIPTION: Demonstrates how to set up a basic SQLite configuration in a YAML file.\nSOURCE: https://github.com/stephenafamo/bob/blob/main/website/docs/code-generation/sqlite.md#2025-04-19_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nsqlite:\n  dsn: \"file.db\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Query Type String Method in Go\nDESCRIPTION: Addition of a String() method to the bob.QueryType type, providing string representation of query types.\nSOURCE: https://github.com/stephenafamo/bob/blob/main/CHANGELOG.md#2025-04-19_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nString() method to bob.QueryType\n```\n\n----------------------------------------\n\nTITLE: Using DocCardList Component in Markdown\nDESCRIPTION: Demonstrates how to use the DocCardList component within a Markdown document to automatically generate a list of child documents.\nSOURCE: https://github.com/stephenafamo/bob/blob/main/website/docs/query-builder/sqlite/examples/index.md#2025-04-19_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<DocCardList />\n```\n\n----------------------------------------\n\nTITLE: Configuring Column Exclusion in YAML\nDESCRIPTION: This YAML configuration snippet demonstrates how to exclude specific columns from tables during code generation.\nSOURCE: https://github.com/stephenafamo/bob/blob/main/website/docs/code-generation/mysql.md#2025-04-19_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nmysql:\n  except:\n    public.migrations:\n    public.addresses:\n      - name\n    \"*\":\n      - secret_col\n```\n\n----------------------------------------\n\nTITLE: SQLite Configuration with Table Exclusion Filters\nDESCRIPTION: Demonstrates how to exclude specific tables from code generation using patterns or exact names.\nSOURCE: https://github.com/stephenafamo/bob/blob/main/website/docs/code-generation/sqlite.md#2025-04-19_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nsqlite:\n  except:\n    \"/^foo/\":\n    bar_baz:\n```\n\n----------------------------------------\n\nTITLE: Using Over Function with Window Modifications in Go\nDESCRIPTION: Code demonstrating how to use the fm.Over function with mods to modify the window for window functions.\nSOURCE: https://github.com/stephenafamo/bob/blob/main/CHANGELOG.md#2025-04-19_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nfm.Over now takes mods to modify the window for the window function.\n```\n\n----------------------------------------\n\nTITLE: Retrieving Record by Primary Key in Jet\nDESCRIPTION: Shows how to find a user by primary key ID using the Jet query builder. This demonstrates Jet's more verbose approach where the full query needs to be built manually.\nSOURCE: https://github.com/stephenafamo/bob/blob/main/website/vs/jet.md#2025-04-19_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nvar user *model.Users\nerr = postgres.\n    SELECT(table.Users.AllColumns).\n    FROM(table.Users).\n    WHERE(table.Users.ID.EQ(postgres.Int(1))).\n    QueryContext(ctx, db, user)\n```\n\n----------------------------------------\n\nTITLE: Changing Function Call Point for Generated Relationship Join Mods in Go\nDESCRIPTION: Shows how the function call point for generated relationship join mods has changed to reduce allocations and only perform work for the relationship being used.\nSOURCE: https://github.com/stephenafamo/bob/blob/main/CHANGELOG.md#2025-04-19_snippet_11\n\nLANGUAGE: go\nCODE:\n```\n// Before\nmodels.SelectJoins(ctx).Jets.InnerJoin.Pilots\n// After\nmodels.SelectJoins.Jets.InnerJoin.Pilots(ctx)\n```\n\n----------------------------------------\n\nTITLE: SQLite Configuration with Column Exclusion Filters\nDESCRIPTION: Shows how to exclude specific columns from tables during code generation.\nSOURCE: https://github.com/stephenafamo/bob/blob/main/website/docs/code-generation/sqlite.md#2025-04-19_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nsqlite:\n  # Removes public.migrations table, the name column from the addresses table, and\n  # secret_col of any table from being generated. Foreign keys that reference tables\n  # or columns that are no longer generated may cause problems.\n  except:\n    public.migrations:\n    public.addresses:\n      - name\n    \"*\":\n      - secret_col\n```\n\n----------------------------------------\n\nTITLE: Basic SQL Driver Configuration\nDESCRIPTION: Example of basic SQL driver configuration in YAML format, showing how to specify the database dialect.\nSOURCE: https://github.com/stephenafamo/bob/blob/main/website/docs/code-generation/sql.md#2025-04-19_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nsql:\n  dialect: psql\n```\n\n----------------------------------------\n\nTITLE: Setting MySQL Connection String as Environment Variable\nDESCRIPTION: This shell command shows how to set the MySQL connection string as an environment variable.\nSOURCE: https://github.com/stephenafamo/bob/blob/main/website/docs/code-generation/mysql.md#2025-04-19_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nMYSQL_DSN=\"user:pass@tcp(host:port)/dbname\"\n```\n\n----------------------------------------\n\nTITLE: Importing DocCardList and useCurrentSidebarCategory in React\nDESCRIPTION: This code snippet imports the DocCardList component from the Docusaurus theme and the useCurrentSidebarCategory hook from the theme-common package. These are used to generate a list of documentation cards for the sidebar categories.\nSOURCE: https://github.com/stephenafamo/bob/blob/main/website/docs/query-builder/intro.md#2025-04-19_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport DocCardList from '@theme/DocCardList';\nimport {useCurrentSidebarCategory} from '@docusaurus/theme-common';\n```\n\n----------------------------------------\n\nTITLE: Importing DocCardList Component for Documentation Index Page\nDESCRIPTION: Imports the DocCardList component from the theme to display a list of documentation cards for MySQL query examples built with Bob.\nSOURCE: https://github.com/stephenafamo/bob/blob/main/website/docs/query-builder/mysql/examples/index.md#2025-04-19_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport DocCardList from '@theme/DocCardList';\n\n# Examples\n\nExamples of MySQL queries built with Bob\n\n<DocCardList />\n```\n\n----------------------------------------\n\nTITLE: Upsert with VALUES() function in MySQL with Bob\nDESCRIPTION: Demonstrates an INSERT with ON DUPLICATE KEY UPDATE using the VALUES() function to reference new values. This is a simpler approach when you want to update columns with their attempted insert values.\nSOURCE: https://github.com/stephenafamo/bob/blob/main/website/docs/query-builder/mysql/examples/insert.md#2025-04-19_snippet_6\n\nLANGUAGE: sql\nCODE:\n```\nINSERT INTO distributors (`did`, `dname`)\nVALUES (?, ?), (?, ?)\nON DUPLICATE KEY UPDATE\n`did` = VALUES(`did`),\n`dbname` = VALUES(`dbname`)\n```\n\nLANGUAGE: go\nCODE:\n```\nmysql.Insert(\n  im.Into(\"distributors\", \"did\", \"dname\"),\n  im.Values(mysql.Arg(8, \"Anvil Distribution\")),\n  im.Values(mysql.Arg(9, \"Sentry Distribution\")),\n  im.OnDuplicateKeyUpdate(im.UpdateWithValues(\"did\", \"dbname\")),\n)\n```\n\n----------------------------------------\n\nTITLE: Querying a Database Table with Limits\nDESCRIPTION: Demonstrates how to start a SELECT query on a view model with a LIMIT modifier. This creates a query that can be executed with methods like One() or All().\nSOURCE: https://github.com/stephenafamo/bob/blob/main/website/docs/models/view.md#2025-04-19_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nq := userView.Query(\n    ctx, db, \n    sm.Limit(10), // LIMIT 10\n)\n```\n\n----------------------------------------\n\nTITLE: Excluding Columns with Except Method\nDESCRIPTION: Shows how to use the Except method to remove specific columns from a column list while retaining all others.\nSOURCE: https://github.com/stephenafamo/bob/blob/main/website/docs/models/columns.md#2025-04-19_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nuserView.Columns().Except(\"email\")\n```\n\nLANGUAGE: sql\nCODE:\n```\n\"public.users\".\"id\" AS \"id\",\n\"public.users\".\"name\" AS \"name\",\n```"
  }
]