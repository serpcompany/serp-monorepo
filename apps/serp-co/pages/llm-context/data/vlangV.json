[
  {
    "owner": "vlang",
    "repo": "v",
    "content": "TITLE: Printing Hello World in V\nDESCRIPTION: This snippet demonstrates the basic structure of a V program by printing 'hello world' to the standard output. It highlights the use of the 'fn main()' entry point and the 'println' built-in function.\nSOURCE: https://github.com/vlang/v/blob/master/doc/docs.md#2025-04-21_snippet_1\n\nLANGUAGE: v\nCODE:\n```\nfn main() {\n\tprintln('hello world')\n}\n```\n\n----------------------------------------\n\nTITLE: Defining and Manipulating Strings in V\nDESCRIPTION: This snippet illustrates how to define strings, convert between types, and validate string properties such as length, using assertions to ensure correct behavior.\nSOURCE: https://github.com/vlang/v/blob/master/doc/docs.md#2025-04-21_snippet_10\n\nLANGUAGE: v\nCODE:\n```\ns := 'hello 🌎' // the `world` emoji takes 4 bytes, and string length is reported in bytes\nassert s.len == 10\n\narr := s.bytes() // convert `string` to `[]u8`\nassert arr.len == 10\n\ns2 := arr.bytestr() // convert `[]u8` to `string`\nassert s2 == s\n\nname := 'Bob'\nassert name.len == 3\n// indexing gives a byte, u8(66) == `B`\nassert name[0] == u8(66)\n// slicing gives a string 'ob'\nassert name[1..3] == 'ob'\n\n// escape codes\n// escape special characters like in C\nwindows_newline := '\\r\\n'\nassert windows_newline.len == 2\n\n// arbitrary bytes can be directly specified using `\\x##` notation where `#` is\n// a hex digit\naardvark_str := '\\x61ardvark'\nassert aardvark_str == 'aardvark'\nassert '\\xc0'[0] == u8(0xc0)\n\n// or using octal escape `\\###` notation where `#` is an octal digit\naardvark_str2 := '\\141ardvark'\nassert aardvark_str2 == 'aardvark'\n\n// Unicode can be specified directly as `\\u####` where # is a hex digit\n// and will be converted internally to its UTF-8 representation\nstar_str := '\\u2605' // ★\nassert star_str == '★'\n// UTF-8 can be specified this way too, as individual bytes.\nassert star_str == '\\xe2\\x98\\x85'\n```\n\n----------------------------------------\n\nTITLE: Creating and Using Modules in V\nDESCRIPTION: Explains how to create and use modules in V, including module file organization, exported functions with the pub keyword, and module import syntax.\nSOURCE: https://github.com/vlang/v/blob/master/doc/docs.md#2025-04-21_snippet_91\n\nLANGUAGE: v\nCODE:\n```\n// myfile.v\nmodule mymodule\n\n// To export a function we have to use `pub`\npub fn say_hi() {\n\tprintln('hello from mymodule!')\n}\n```\n\nLANGUAGE: v\nCODE:\n```\n// myfile2.v\nmodule mymodule\n\npub fn say_hi_and_bye() {\n\tsay_hi() // from myfile.v\n\tprintln('goodbye from mymodule')\n}\n```\n\nLANGUAGE: v\nCODE:\n```\nimport mymodule\n\nfn main() {\n\tmymodule.say_hi()\n\tmymodule.say_hi_and_bye()\n}\n```\n\n----------------------------------------\n\nTITLE: Using Option/Result Types for Error Handling in V\nDESCRIPTION: Demonstrates how to use Option and Result types for error handling in V. The example shows defining functions that return Option/Result types and handling them with 'or' blocks.\nSOURCE: https://github.com/vlang/v/blob/master/doc/docs.md#2025-04-21_snippet_118\n\nLANGUAGE: v\nCODE:\n```\nstruct User {\n\tid   int\n\tname string\n}\n\nstruct Repo {\n\tusers []User\n}\n\nfn (r Repo) find_user_by_id(id int) !User {\n\tfor user in r.users {\n\t\tif user.id == id {\n\t\t\t// V automatically wraps this into a result or option type\n\t\t\treturn user\n\t\t}\n\t}\n\treturn error('User ${id} not found')\n}\n\n// A version of the function using an option\nfn (r Repo) find_user_by_id2(id int) ?User {\n\tfor user in r.users {\n\t\tif user.id == id {\n\t\t\treturn user\n\t\t}\n\t}\n\treturn none\n}\n\nfn main() {\n\trepo := Repo{\n\t\tusers: [User{1, 'Andrew'}, User{2, 'Bob'}, User{10, 'Charles'}]\n\t}\n\tuser := repo.find_user_by_id(10) or { // Option/Result types must be handled by `or` blocks\n\t\tprintln(err)\n\t\treturn\n\t}\n\tprintln(user.id) // \"10\"\n\tprintln(user.name) // \"Charles\"\n\n\tuser2 := repo.find_user_by_id2(10) or { return }\n\n\t// To create an Option var directly:\n\tmy_optional_int := ?int(none)\n\tmy_optional_string := ?string(none)\n\tmy_optional_user := ?User(none)\n}\n```\n\n----------------------------------------\n\nTITLE: Variable Declaration and Initialization in V\nDESCRIPTION: This snippet illustrates variable declaration in V, emphasizing the use of ':=' for initialization and the immutability of variables by default. It also covers mutable variables by using 'mut'.\nSOURCE: https://github.com/vlang/v/blob/master/doc/docs.md#2025-04-21_snippet_6\n\nLANGUAGE: v\nCODE:\n```\nname := 'Bob'\nage := 20\nlarge_number := i64(9999999999)\nprintln(name)\nprintln(age)\nprintln(large_number)\n\nmut age := 20\nprintln(age)\nage = 21\nprintln(age)\n```\n\n----------------------------------------\n\nTITLE: Mutable arguments in V functions\nDESCRIPTION: Demonstrates how to modify function arguments in V by declaring them with the `mut` keyword. The example shows both a method with a mutable receiver and a regular function with mutable parameters.\nSOURCE: https://github.com/vlang/v/blob/master/doc/docs.md#2025-04-21_snippet_81\n\nLANGUAGE: v\nCODE:\n```\nstruct User {\n\tname string\nmut:\n\tis_registered bool\n}\n\nfn (mut u User) register() {\n\tu.is_registered = true\n}\n\nmut user := User{}\nprintln(user.is_registered) // \"false\"\nuser.register()\nprintln(user.is_registered) // \"true\"\n```\n\n----------------------------------------\n\nTITLE: Installing V from Source using Git and Make\nDESCRIPTION: This bash snippet outlines the steps to install the V programming language from its source code repository using Git and Make. Dependencies include Git, Make, and build-essential. The commands clone the V repository, change the directory to the cloned repository, and build the language. On Windows, use `make.bat` in a CMD shell. On Ubuntu/Debian, install required packages using apt first.\nSOURCE: https://github.com/vlang/v/blob/master/doc/docs.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone --depth=1 https://github.com/vlang/v\ncd v\nmake\n```\n\n----------------------------------------\n\nTITLE: Casting Interfaces with the 'is' Operator in V\nDESCRIPTION: Demonstrates how to use dynamic cast operators to test the underlying type of an interface. The 'is' operator enables smart casting within conditional blocks.\nSOURCE: https://github.com/vlang/v/blob/master/doc/docs.md#2025-04-21_snippet_109\n\nLANGUAGE: v\nCODE:\n```\n// interface-example.3 (continued from interface-example.1)\ninterface Something {}\n\nfn announce(s Something) {\n\tif s is Dog {\n\t\tprintln('a ${s.breed} dog') // `s` is automatically cast to `Dog` (smart cast)\n\t} else if s is Cat {\n\t\tprintln('a cat speaks ${s.speak()}')\n\t} else {\n\t\tprintln('something else')\n\t}\n}\n\nfn main() {\n\tdog := Dog{'Leonberger'}\n\tcat := Cat{'Siamese'}\n\tannounce(dog)\n\tannounce(cat)\n}\n```\n\n----------------------------------------\n\nTITLE: Using For loops with arrays in V\nDESCRIPTION: This snippet shows how to use 'for' loops with arrays in V. It demonstrates iterating through array elements, accessing both index and value, and modifying array elements with the 'mut' keyword.\nSOURCE: https://github.com/vlang/v/blob/master/doc/docs.md#2025-04-21_snippet_56\n\nLANGUAGE: v\nCODE:\n```\nnumbers := [1, 2, 3, 4, 5]\nfor num in numbers {\n\tprintln(num)\n}\nnames := ['Sam', 'Peter']\nfor i, name in names {\n\tprintln('${i}) ${name}')\n\t// Output: 0) Sam\n\t//         1) Peter\n}\n```\n\nLANGUAGE: v\nCODE:\n```\nmut numbers := [0, 1, 2]\nfor mut num in numbers {\n\tnum++\n}\nprintln(numbers) // [1, 2, 3]\n```\n\n----------------------------------------\n\nTITLE: V Types and Promotion Rules\nDESCRIPTION: This snippet presents an overview of primitive types in V, demonstrating type promotion rules and showing examples of variable declarations with default values for literals.\nSOURCE: https://github.com/vlang/v/blob/master/doc/docs.md#2025-04-21_snippet_9\n\nLANGUAGE: v\nCODE:\n```\nu := u16(12)\nv := 13 + u    // v is of type `u16` - no promotion\nx := f32(45.6)\ny := x + 3.14  // y is of type `f32` - no promotion\na := 75        // a is of type `int` - default for int literal\nb := 14.7      // b is of type `f64` - default for float literal\nc := u + a     // c is of type `int` - automatic promotion of `u`'s value\nd := b + x     // d is of type `f64` - automatic promotion of `x`'s value\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Terminal UI App with V\nDESCRIPTION: This code demonstrates how to create a simple terminal UI application using the `term.ui` module in V. It initializes the UI, sets up event and frame callbacks, and draws a rectangle with text. The application exits when the escape key is pressed.\nSOURCE: https://github.com/vlang/v/blob/master/vlib/term/ui/README.md#2025-04-21_snippet_0\n\nLANGUAGE: v\nCODE:\n```\n```v\nimport term.ui as tui\n\nstruct App {\nmut:\n\ttui &tui.Context = unsafe { nil }\n}\n\nfn event(e &tui.Event, x voidptr) {\n\tif e.typ == .key_down && e.code == .escape {\n\t\texit(0)\n\t}\n}\n\nfn frame(x voidptr) {\n\tmut app := unsafe { &App(x) }\n\n\tapp.tui.clear()\n\tapp.tui.set_bg_color(r: 63, g: 81, b: 181)\n\tapp.tui.draw_rect(20, 6, 41, 10)\n\tapp.tui.draw_text(24, 8, 'Hello from V!')\n\tapp.tui.set_cursor_position(0, 0)\n\n\tapp.tui.reset()\n\tapp.tui.flush()\n}\n\nfn main() {\n\tmut app := &App{}\n\tapp.tui = tui.init(\n\t\tuser_data:   app\n\t\tevent_fn:    event\n\t\tframe_fn:    frame\n\t\thide_cursor: true\n\t)\n\tapp.tui.run()!\n}\n```\n```\n\n----------------------------------------\n\nTITLE: ORM Integration with SQLite in V\nDESCRIPTION: Demonstrates V's ORM capabilities with SQLite including table creation, data insertion, querying, updating, and deletion. The example shows how to define a struct with table annotations, connect to a database, and perform various SQL operations using V's syntax.\nSOURCE: https://github.com/vlang/v/blob/master/doc/docs.md#2025-04-21_snippet_142\n\nLANGUAGE: v\nCODE:\n```\nimport db.sqlite\n\n// sets a custom table name. Default is struct name (case-sensitive)\n@[table: 'customers']\nstruct Customer {\n\tid        int @[primary; serial] // a field named `id` of integer type must be the first field\n\tname      string\n\tnr_orders int\n\tcountry   ?string\n}\n\ndb := sqlite.connect('customers.db')!\n\n// You can create tables from your struct declarations. For example the next query will issue SQL similar to this:\n// CREATE TABLE IF NOT EXISTS `Customer` (\n//      `id` INTEGER PRIMARY KEY,\n//      `name` TEXT NOT NULL,\n//      `nr_orders` INTEGER NOT NULL,\n//      `country` TEXT\n// )\nsql db {\n\tcreate table Customer\n}!\n\n// insert a new customer:\nnew_customer := Customer{\n\tname:      'Bob'\n\tcountry:   'uk'\n\tnr_orders: 10\n}\nsql db {\n\tinsert new_customer into Customer\n}!\n\nus_customer := Customer{\n\tname:      'Martin'\n\tcountry:   'us'\n\tnr_orders: 5\n}\nsql db {\n\tinsert us_customer into Customer\n}!\n\nnone_country_customer := Customer{\n\tname:      'Dennis'\n\tcountry:   none\n\tnr_orders: 2\n}\nsql db {\n\tinsert none_country_customer into Customer\n}!\n\n// update a customer:\nsql db {\n\tupdate Customer set nr_orders = nr_orders + 1 where name == 'Bob'\n}!\n\n// select count(*) from customers\nnr_customers := sql db {\n\tselect count from Customer\n}!\nprintln('number of all customers: ${nr_customers}')\n\n// V's syntax can be used to build queries:\nuk_customers := sql db {\n\tselect from Customer where country == 'uk' && nr_orders > 0\n}!\nprintln('We found a total of ${uk_customers.len} customers matching the query.')\nfor c in uk_customers {\n\tprintln('customer: ${c.id}, ${c.name}, ${c.country}, ${c.nr_orders}')\n}\n\nnone_country_customers := sql db {\n\tselect from Customer where country is none\n}!\nprintln('We found a total of ${none_country_customers.len} customers, with no country set.')\nfor c in none_country_customers {\n\tprintln('customer: ${c.id}, ${c.name}, ${c.country}, ${c.nr_orders}')\n}\n\n// delete a customer\nsql db {\n\tdelete from Customer where name == 'Bob'\n}!\n```\n\n----------------------------------------\n\nTITLE: Defining and using structs in V\nDESCRIPTION: This snippet demonstrates how to define and use structs in V. It shows basic struct initialization, field access, and how to use reserved keywords as field names.\nSOURCE: https://github.com/vlang/v/blob/master/doc/docs.md#2025-04-21_snippet_63\n\nLANGUAGE: v\nCODE:\n```\nstruct Point {\n\tx int\n\ty int\n}\n\nmut p := Point{\n\tx: 10\n\ty: 20\n}\nprintln(p.x) // Struct fields are accessed using a dot\n// Alternative literal syntax\np = Point{10, 20}\nassert p.x == 10\n```\n\nLANGUAGE: v\nCODE:\n```\nstruct Employee {\n\ttype string\n\tname string\n}\n\nemployee := Employee{\n\ttype: 'FTE'\n\tname: 'John Doe'\n}\nprintln(employee.type)\n```\n\n----------------------------------------\n\nTITLE: Updating Records Using QueryBuilder in V\nDESCRIPTION: This code snippet demonstrates how to update records in a database table using the `set`, `where`, and `update` methods of the `QueryBuilder`.  It sets the `age` and `title` fields for records where the `name` is 'John'.\nSOURCE: https://github.com/vlang/v/blob/master/vlib/orm/README.md#2025-04-21_snippet_17\n\nLANGUAGE: v\nCODE:\n```\nqb.set('age = ?, title = ?', 71, 'boss')!.where('name = ?','John')!.update()!\n```\n\n----------------------------------------\n\nTITLE: Writing Documentation Comments in V\nDESCRIPTION: Shows how to write documentation comments for functions, types, and constants in V. Demonstrates single-line and multi-line documentation styles that will be processed by vdoc. The example emphasizes V's convention of writing documentation in the present tense.\nSOURCE: https://github.com/vlang/v/blob/master/doc/docs.md#2025-04-21_snippet_143\n\nLANGUAGE: v\nCODE:\n```\n// clearall clears all bits in the array\nfn clearall() {\n}\n```\n\n----------------------------------------\n\nTITLE: Defining and Implementing Interfaces in V\nDESCRIPTION: Creates an interface 'Speaker' with both field and method requirements. Two structs 'Dog' and 'Cat' implement the interface, allowing polymorphic usage in an array.\nSOURCE: https://github.com/vlang/v/blob/master/doc/docs.md#2025-04-21_snippet_106\n\nLANGUAGE: v\nCODE:\n```\n// interface-example.1\nstruct Dog {\n\tbreed string\n}\n\nfn (d Dog) speak() string {\n\treturn 'woof'\n}\n\nstruct Cat {\n\tbreed string\n}\n\nfn (c Cat) speak() string {\n\treturn 'meow'\n}\n\n// unlike Go, but like TypeScript, V's interfaces can define both fields and methods.\ninterface Speaker {\n\tbreed string\n\tspeak() string\n}\n\nfn main() {\n\tdog := Dog{'Leonberger'}\n\tcat := Cat{'Siamese'}\n\n\tmut arr := []Speaker{}\n\tarr << dog\n\tarr << cat\n\tfor item in arr {\n\t\tprintln('a ${item.breed} says: ${item.speak()}')\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Variable Arguments Functions in V\nDESCRIPTION: Demonstrates how to create functions that accept a variable number of arguments using the ... syntax. Shows both direct argument passing and array decomposition techniques.\nSOURCE: https://github.com/vlang/v/blob/master/doc/docs.md#2025-04-21_snippet_83\n\nLANGUAGE: v\nCODE:\n```\nfn sum(a ...int) int {\n\tmut total := 0\n\tfor x in a {\n\t\ttotal += x\n\t}\n\treturn total\n}\n\nprintln(sum()) // 0\nprintln(sum(1)) // 1\nprintln(sum(2, 3)) // 5\n// using array decomposition\na := [2, 3, 4]\nprintln(sum(...a)) // <-- using prefix ... here. output: 9\nb := [5, 6, 7]\nprintln(sum(...b)) // output: 18\n```\n\n----------------------------------------\n\nTITLE: Declaring and Manipulating Arrays in V\nDESCRIPTION: This snippet shows the declaration of arrays in V and demonstrates basic manipulations, including accessing elements by index and modifying array contents.\nSOURCE: https://github.com/vlang/v/blob/master/doc/docs.md#2025-04-21_snippet_22\n\nLANGUAGE: v\nCODE:\n```\nmut nums := [1, 2, 3]\nprintln(nums) // `[1, 2, 3]`\nprintln(nums[0]) // `1`\nprintln(nums[1]) // `2`\n\nnums[1] = 5\nprintln(nums) // `[1, 5, 3]`\n```\n\n----------------------------------------\n\nTITLE: Implementing Generic Repository Pattern in V\nDESCRIPTION: Demonstrates how to create a generic repository struct and functions in V. It shows type inference for generic parameters and how to use them with different types.\nSOURCE: https://github.com/vlang/v/blob/master/doc/docs.md#2025-04-21_snippet_121\n\nLANGUAGE: v\nCODE:\n```\nstruct Repo[T] {\n    db DB\n}\n\nstruct User {\n\tid   int\n\tname string\n}\n\nstruct Post {\n\tid   int\n\tuser_id int\n\ttitle string\n\tbody string\n}\n\nfn new_repo[T](db DB) Repo[T] {\n    return Repo[T]{db: db}\n}\n\n// This is a generic function. V will generate it for every type it's used with.\nfn (r Repo[T]) find_by_id(id int) ?T {\n    table_name := T.name // in this example getting the name of the type gives us the table name\n    return r.db.query_one[T]('select * from ${table_name} where id = ?', id)\n}\n\ndb := new_db()\nusers_repo := new_repo[User](db) // returns Repo[User]\nposts_repo := new_repo[Post](db) // returns Repo[Post]\nuser := users_repo.find_by_id(1)? // find_by_id[User]\npost := posts_repo.find_by_id(1)? // find_by_id[Post]\n```\n\n----------------------------------------\n\nTITLE: Module Function Definition and Usage\nDESCRIPTION: Shows how to define and call functions across different modules in V language, demonstrating module prefix usage.\nSOURCE: https://github.com/vlang/v/blob/master/doc/docs.md#2025-04-21_snippet_51\n\nLANGUAGE: v\nCODE:\n```\nmodule def\n\n// func is a dummy example function.\npub fn func() {\n\tprintln('func')\n}\n```\n\nLANGUAGE: v\nCODE:\n```\nmodule main\n\nimport def\n\nfn main() {\n\tdef.func()\n}\n```\n\n----------------------------------------\n\nTITLE: Using Builtin Functions in V\nDESCRIPTION: Lists V's builtin functions for printing, error handling, and program termination, with examples of using println to print different data types and custom string representations.\nSOURCE: https://github.com/vlang/v/blob/master/doc/docs.md#2025-04-21_snippet_89\n\nLANGUAGE: v\nCODE:\n```\nfn print(s string) // prints anything on stdout\nfn println(s string) // prints anything and a newline on stdout\n\nfn eprint(s string) // same as print(), but uses stderr\nfn eprintln(s string) // same as println(), but uses stderr\n\nfn exit(code int) // terminates the program with a custom error code\nfn panic(s string) // prints a message and backtraces on stderr, and terminates the program with error code 1\nfn print_backtrace() // prints backtraces on stderr\n```\n\nLANGUAGE: v\nCODE:\n```\nstruct User {\n\tname string\n\tage  int\n}\n\nprintln(1) // \"1\"\nprintln('hi') // \"hi\"\nprintln([1, 2, 3]) // \"[1, 2, 3]\"\nprintln(User{ name: 'Bob', age: 20 }) // \"User{name:'Bob', age:20}\"\n```\n\nLANGUAGE: v\nCODE:\n```\nstruct Color {\n\tr int\n\tg int\n\tb int\n}\n\npub fn (c Color) str() string {\n\treturn '{${c.r}, ${c.g}, ${c.b}}'\n}\n\nred := Color{\n\tr: 255\n\tg: 0\n\tb: 0\n}\nprintln(red)\n```\n\n----------------------------------------\n\nTITLE: Dumping Expressions at Runtime in V\nDESCRIPTION: Shows how to use the dump() function for debugging and tracing expression values at runtime, illustrated with a factorial function example.\nSOURCE: https://github.com/vlang/v/blob/master/doc/docs.md#2025-04-21_snippet_90\n\nLANGUAGE: v\nCODE:\n```\nfn factorial(n u32) u32 {\n\tif dump(n <= 1) {\n\t\treturn dump(1)\n\t}\n\treturn dump(n * factorial(n - 1))\n}\n\nfn main() {\n\tprintln(factorial(5))\n}\n```\n\n----------------------------------------\n\nTITLE: Compile-time Reflection on Enum Values in V\nDESCRIPTION: This code demonstrates how to use compile-time reflection to iterate over enum values and their attributes using the $for construct.\nSOURCE: https://github.com/vlang/v/blob/master/doc/docs.md#2025-04-21_snippet_163\n\nLANGUAGE: v\nCODE:\n```\nenum Color {\n\tred   @[RED]  // first attribute\n\tblue  @[BLUE] // second attribute\n}\n\nfn main() {\n\t$for e in Color.values {\n\t\tprintln(e.name)\n\t\tprintln(e.attrs)\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Using Channels for Inter-Thread Communication in V\nDESCRIPTION: Shows how to use channels in V for communication between threads, including pushing and popping values, and handling channel closure.\nSOURCE: https://github.com/vlang/v/blob/master/doc/docs.md#2025-04-21_snippet_126\n\nLANGUAGE: v\nCODE:\n```\nimport time\n\nfn worker(ch chan int) {\n\tfor i in 0 .. 5 {\n\t\tch <- i // push values into the channel\n\t}\n}\n\nfn clock(ch chan int) {\n\tfor i in 0 .. 5 {\n\t\ttime.sleep(1 * time.second)\n\t\tprintln('Clock tick')\n\t\tch <- (i + 1000) // push a value into the channel\n\t}\n\tch.close() // close the channel when done\n}\n\nfn main() {\n\tch := chan int{cap: 5}\n\tspawn worker(ch)\n\tspawn clock(ch)\n\tfor {\n\t\tvalue := <-ch or { // receive/pop values from the channel\n\t\t\tprintln('Channel closed')\n\t\t\tbreak\n\t\t}\n\t\tprintln('Received: ${value}')\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Structs with ORM Attributes in V\nDESCRIPTION: This code snippet shows two struct definitions (`Foo` and `Child`) in V, annotated with various ORM attributes.  These attributes control table and column names, primary key definition, auto-incrementing columns, foreign keys, default values, and custom SQL type definitions.\nSOURCE: https://github.com/vlang/v/blob/master/vlib/orm/README.md#2025-04-21_snippet_1\n\nLANGUAGE: v\nCODE:\n```\nimport time\n\n@[table: 'foos']\nstruct Foo {\n    id          int         @[primary; sql: serial]\n    name        string\n    created_at  time.Time   @[default: 'CURRENT_TIME']\n    updated_at  ?string     @[sql_type: 'TIMESTAMP']\n    deleted_at  ?time.Time\n    children    []Child     @[fkey: 'parent_id']\n}\n\nstruct Child {\n    id        int    @[primary; sql: serial]\n    parent_id int\n    name      string\n}\n```\n\n----------------------------------------\n\nTITLE: vweb Before Request Middleware\nDESCRIPTION: This example shows how to use the `before_request()` method as middleware in vweb. This method is called before every request and can be used for tasks such as checking user session cookies or adding headers.\nSOURCE: https://github.com/vlang/v/blob/master/vlib/vweb/README.md#2025-04-21_snippet_13\n\nLANGUAGE: v\nCODE:\n```\npub fn (mut app App) before_request() {\n    app.user_id = app.get_cookie('id') or { '0' }\n}\n```\n\n----------------------------------------\n\nTITLE: Methods on structs in V\nDESCRIPTION: Shows how to define and use methods on structs in V. Methods have a special receiver argument that appears between the `fn` keyword and method name, providing access to the struct's fields.\nSOURCE: https://github.com/vlang/v/blob/master/doc/docs.md#2025-04-21_snippet_75\n\nLANGUAGE: v\nCODE:\n```\nstruct User {\n\tage int\n}\n\nfn (u User) can_register() bool {\n\treturn u.age > 16\n}\n\nuser := User{\n\tage: 10\n}\nprintln(user.can_register()) // \"false\"\nuser2 := User{\n\tage: 20\n}\nprintln(user2.can_register()) // \"true\"\n```\n\n----------------------------------------\n\nTITLE: Performing Dynamic Casts on Sum Types in V\nDESCRIPTION: Demonstrates how to check and cast sum types to their variants using 'is' and 'as' keywords in V. The example shows type checking and accessing specific methods of a variant.\nSOURCE: https://github.com/vlang/v/blob/master/doc/docs.md#2025-04-21_snippet_115\n\nLANGUAGE: v\nCODE:\n```\nstruct Moon {}\n\nstruct Mars {}\n\nstruct Venus {}\n\ntype World = Mars | Moon | Venus\n\nfn (m Mars) dust_storm() bool {\n\treturn true\n}\n\nfn main() {\n\tmut w := World(Moon{})\n\tassert w is Moon\n\tw = Mars{}\n\t// use `as` to access the Mars instance\n\tmars := w as Mars\n\tif mars.dust_storm() {\n\t\tprintln('bad weather!')\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Appending Elements to an Array in V\nDESCRIPTION: This snippet illustrates how to append elements to an existing array using the push operator `<<` and demonstrates appending multiple elements at once.\nSOURCE: https://github.com/vlang/v/blob/master/doc/docs.md#2025-04-21_snippet_23\n\nLANGUAGE: v\nCODE:\n```\nmut nums := [1, 2, 3]\nnums << 4\nprintln(nums) // \"[1, 2, 3, 4]\"\n\n// append array\nnums << [5, 6, 7]\nprintln(nums) // \"[1, 2, 3, 4, 5, 6, 7]\"\n```\n\n----------------------------------------\n\nTITLE: Decoding JSON in V\nDESCRIPTION: Shows how to decode JSON data into V structs using the json.decode function. It includes examples of struct field attributes and handling of JSON arrays.\nSOURCE: https://github.com/vlang/v/blob/master/doc/docs.md#2025-04-21_snippet_129\n\nLANGUAGE: v\nCODE:\n```\nimport json\n\nstruct Foo {\n\tx int\n}\n\nstruct User {\n\tname string @[required]\n\tage  int\n\tfoo Foo @[skip]\n\tlast_name string @[json: lastName]\n}\n\ndata := '{ \"name\": \"Frodo\", \"lastName\": \"Baggins\", \"age\": 25, \"nullable\": null }'\nuser := json.decode(User, data) or {\n\teprintln('Failed to decode json, error: ${err}')\n\treturn\n}\nprintln(user.name)\nprintln(user.last_name)\nprintln(user.age)\n\nsfoos := '[{\"x\":123},{\"x\":456}]'\nfoos := json.decode([]Foo, sfoos)!\nprintln(foos[0].x)\nprintln(foos[1].x)\n```\n\n----------------------------------------\n\nTITLE: Setting default and required fields in V structs\nDESCRIPTION: This snippet demonstrates how to set default values for struct fields in V and how to mark fields as required using the @[required] attribute to enforce field initialization.\nSOURCE: https://github.com/vlang/v/blob/master/doc/docs.md#2025-04-21_snippet_65\n\nLANGUAGE: v\nCODE:\n```\nstruct Foo {\n\tn   int    // n is 0 by default\n\ts   string // s is '' by default\n\ta   []int  // a is `[]int{}` by default\n\tpos int = -1 // custom default value\n}\n```\n\nLANGUAGE: v\nCODE:\n```\nstruct Foo {\n\tn int @[required]\n}\n```\n\n----------------------------------------\n\nTITLE: Parsing XML Documents in V\nDESCRIPTION: This snippet demonstrates parsing an XML document from a file using the V language's XML parsing module. It highlights the `XMLDocument.from_file` method, showing how XML files can be loaded and parsed into memory. Dependencies include the XML module, and key parameters are the file path to the XML document. Input is expected to be a valid file path, and the output is a parsed XML document object.\nSOURCE: https://github.com/vlang/v/blob/master/vlib/encoding/xml/README.md#2025-04-21_snippet_0\n\nLANGUAGE: v\nCODE:\n```\nimport encoding.xml\n\n//...\ndoc := xml.XMLDocument.from_file('test/sample.xml')!\n```\n\n----------------------------------------\n\nTITLE: Chained ORM Operations Using QueryBuilder in V\nDESCRIPTION: This code snippet showcases chained method calls with the Function Call API. It demonstrates dropping, creating, inserting, updating, and deleting records and querying results by chaining `QueryBuilder` methods together.\nSOURCE: https://github.com/vlang/v/blob/master/vlib/orm/README.md#2025-04-21_snippet_19\n\nLANGUAGE: v\nCODE:\n```\nfinal_users :=\n\tqb\n\t\t.drop()!\n\t\t.create()!\n\t\t.insert_many(users)!\n\t\t.set('name = ?', 'haha')!.where('name = ?', 'Tom')!.update()!\n\t\t.where('age >= ?', 30)!.delete()!\n\t\t.query()!\n```\n\n----------------------------------------\n\nTITLE: Access modifiers for struct fields in V\nDESCRIPTION: Illustrates the five access modifiers available for struct fields in V: default (private immutable), private mutable, public immutable, public mutable within parent module only, and global mutable (not recommended).\nSOURCE: https://github.com/vlang/v/blob/master/doc/docs.md#2025-04-21_snippet_70\n\nLANGUAGE: v\nCODE:\n```\nstruct Foo {\n\ta int // private immutable (default)\nmut:\n\tb int // private mutable\n\tc int // (you can list multiple fields with the same access modifier)\npub:\n\td int // public immutable (readonly)\npub mut:\n\te int // public, but mutable only in parent module\n__global:\n\t// (not recommended to use, that's why the 'global' keyword starts with __)\n\tf int // public and mutable both inside and outside parent module\n}\n```\n\n----------------------------------------\n\nTITLE: Selective Module Import in V\nDESCRIPTION: Demonstrates how to selectively import specific functions from modules in V language. Shows importing a single function and multiple symbols from the os module.\nSOURCE: https://github.com/vlang/v/blob/master/doc/docs.md#2025-04-21_snippet_50\n\nLANGUAGE: v\nCODE:\n```\nimport os { input }\n\nfn main() {\n\t// read text from stdin\n\tname := input('Enter your name: ')\n\tprintln('Hello, ${name}!')\n}\n```\n\nLANGUAGE: v\nCODE:\n```\nimport os { input, user_os }\n\nname := input('Enter your name: ')\nprintln('Name: ${name}')\ncurrent_os := user_os()\nprintln('Your OS is ${current_os}.')\n```\n\n----------------------------------------\n\nTITLE: Implementing Shared Objects in V\nDESCRIPTION: Demonstrates how to use shared objects for thread-safe data exchange. The example shows a Counter struct with an increment method using locks.\nSOURCE: https://github.com/vlang/v/blob/master/doc/docs.md#2025-04-21_snippet_128\n\nLANGUAGE: v\nCODE:\n```\nstruct Counter {\nmut:\n\tvalue int\n}\n\nfn (shared counter Counter) increment() {\n\tlock counter {\n\t\tcounter.value += 1\n\t\tprintln('Incremented to: ${counter.value}')\n\t}\n}\n\nfn main() {\n\tshared counter := Counter{}\n\n\tspawn counter.increment()\n\tspawn counter.increment()\n\n\trlock counter {\n\t\tprintln('Final value: ${counter.value}')\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Query and Form Data in V\nDESCRIPTION: This snippet provides an example of how to access query parameters and form data in a V endpoint. It demonstrates handling cases where expected data may not be provided.\nSOURCE: https://github.com/vlang/v/blob/master/vlib/veb/README.md#2025-04-21_snippet_5\n\nLANGUAGE: v\nCODE:\n```\n@['/user'; get]\npub fn (app &App) get_user_by_id(mut ctx Context) veb.Result {\n\tuser_name := ctx.query['name'] or {\n\t\treturn ctx.text('no user was found')\n\t}\n\n\treturn ctx.text('Hello ${user_name}!')\n}\n```\n\n----------------------------------------\n\nTITLE: vweb Front-end Example\nDESCRIPTION: This is a basic example of a vweb application demonstrating routing, static file mounting, and HTML template rendering. It defines an `App` struct and an endpoint that renders an HTML template with data.\nSOURCE: https://github.com/vlang/v/blob/master/vlib/vweb/README.md#2025-04-21_snippet_2\n\nLANGUAGE: v\nCODE:\n```\nmodule main\n\nimport vweb\nimport os\n\nstruct App {\n\tvweb.Context\n}\n\nstruct Object {\n\ttitle       string\n\tdescription string\n}\n\nfn main() {\n\tvweb.run_at(new_app(), vweb.RunParams{\n\t\tport: 8081\n\t}) or { panic(err) }\n}\n\nfn new_app() &App {\n\tmut app := &App{}\n\t// makes all static files available.\n\tapp.mount_static_folder_at(os.resource_abs_path('.'), '/')\n\treturn app\n}\n\n@['/']\npub fn (mut app App) page_home() vweb.Result {\n\t// all these constants can be accessed by src/templates/page/home.html file.\n\tpage_title := 'V is the new V'\n\tv_url := 'https://github.com/vlang/v'\n\n\tlist_of_object := [\n\t\tObject{\n\t\t\ttitle: 'One good title'\n\t\t\tdescription: 'this is the first'\n\t\t},\n\t\tObject{\n\t\t\ttitle: 'Other good title'\n\t\t\tdescription: 'more one'\n\t\t},\n\t]\n\t// $vweb.html() in `<folder>_<name> vweb.Result ()` like this\n\t// render the `<name>.html` in folder `./templates/<folder>`\n\treturn $vweb.html()\n}\n\n```\n\n----------------------------------------\n\nTITLE: Match Statements in V\nDESCRIPTION: Demonstrates match statements and expressions in V language, including pattern matching and enum handling.\nSOURCE: https://github.com/vlang/v/blob/master/doc/docs.md#2025-04-21_snippet_54\n\nLANGUAGE: v\nCODE:\n```\nos := 'windows'\nprint('V is running on ')\nmatch os {\n\t'darwin' { println('macOS.') }\n\t'linux' { println('Linux.') }\n\telse { println(os) }\n}\n```\n\nLANGUAGE: v\nCODE:\n```\nenum Color {\n\tred\n\tblue\n\tgreen\n}\n\nfn is_red_or_blue(c Color) bool {\n\treturn match c {\n\t\t.red, .blue { true } // comma can be used to test multiple values\n\t\t.green { false }\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Error Types in V\nDESCRIPTION: Demonstrates how to define and use custom error types in V by implementing the IError interface. The example shows a PathError type with a custom error message.\nSOURCE: https://github.com/vlang/v/blob/master/doc/docs.md#2025-04-21_snippet_120\n\nLANGUAGE: v\nCODE:\n```\nstruct PathError {\n\tError\n\tpath string\n}\n\nfn (err PathError) msg() string {\n\treturn 'Failed to open path: ${err.path}'\n}\n\nfn try_open(path string) ! {\n\t// V automatically casts this to IError\n\treturn PathError{\n\t\tpath: path\n\t}\n}\n\nfn main() {\n\ttry_open('/tmp') or { panic(err) }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Map Operations in V\nDESCRIPTION: Shows map initialization, setting values, retrieving values, checking key existence, getting keys, and deleting entries.\nSOURCE: https://github.com/vlang/v/blob/master/doc/docs.md#2025-04-21_snippet_40\n\nLANGUAGE: v\nCODE:\n```\nmut m := map[string]int{} // a map with `string` keys and `int` values\nm['one'] = 1\nm['two'] = 2\nprintln(m['one']) // \"1\"\nprintln(m['bad_key']) // \"0\"\nprintln('bad_key' in m) // Use `in` to detect whether such key exists\nprintln(m.keys()) // ['one', 'two']\nm.delete('two')\n```\n\n----------------------------------------\n\nTITLE: Implementing Inline Assembly in V\nDESCRIPTION: Demonstrates how to use inline assembly within V code to perform direct hardware operations. The example adds two integers using AMD64 assembly instructions.\nSOURCE: https://github.com/vlang/v/blob/master/doc/docs.md#2025-04-21_snippet_203\n\nLANGUAGE: v\nCODE:\n```\na := 100\nb := 20\nmut c := 0\nasm amd64 {\n    mov eax, a\n    add eax, b\n    mov c, eax\n    ; =r (c) as c // output\n    ; r (a) as a // input\n      r (b) as b\n}\nprintln('a: ${a}') // 100\nprintln('b: ${b}') // 20\nprintln('c: ${c}') // 120\n```\n\n----------------------------------------\n\nTITLE: Using Shared Objects for State Management Across Requests\nDESCRIPTION: Example showing how to implement a visitor counter using shared objects to maintain state across multiple requests in a multithreaded vweb application.\nSOURCE: https://github.com/vlang/v/blob/master/vlib/vweb/README.md#2025-04-21_snippet_26\n\nLANGUAGE: v\nCODE:\n```\nmodule main\n\nimport vweb\n\nstruct Counter {\npub mut:\n\tcount int\n}\n\nstruct App {\n\tvweb.Context\nmut:\n\tcounter shared Counter // shared fields can only be structs, arrays or maps.\n}\n\nfn main() {\n\t// initialize the shared object\n\tshared counter := Counter{\n\t\tcount: 0\n\t}\n\n\tvweb.run(&App{\n\t\tcounter: counter\n\t}, 8080)\n}\n\nfn (mut app App) index() vweb.Result {\n\tmut count := 0\n\t// lock the counter so we can modify it\n\tlock app.counter {\n\t\tapp.counter.count += 1\n\t\tcount = app.counter.count\n\t}\n\treturn app.text('Total visitors: ${count}')\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Context Deadline in V\nDESCRIPTION: This snippet illustrates how to set a deadline for a context in V using the 'with_deadline' function. The code tells a blocking function to cease its operations once the deadline has been reached. Key dependencies are the 'context' and 'time' modules. The example showcases the handling of an expired context by reading from its 'done' channel. It effectively demonstrates context cleanup using a defer statement to call the cancellation function.\nSOURCE: https://github.com/vlang/v/blob/master/vlib/context/README.md#2025-04-21_snippet_1\n\nLANGUAGE: V\nCODE:\n```\nimport time\nimport context\n\nconst short_duration = 2 * time.millisecond // a reasonable duration to block in an example\n\n// This example passes a context with an arbitrary deadline to tell a blocking\n// function that it should abandon its work as soon as it gets to it.\nfn main() {\n\tdur := time.now().add(short_duration)\n\tmut background := context.background()\n\tmut ctx, cancel := context.with_deadline(mut background, dur)\n\n\tdefer {\n\t\t// Even though ctx will be expired, it is good practice to call its\n\t\t// cancellation function in any case. Failure to do so may keep the\n\t\t// context and its parent alive longer than necessary.\n\t\tcancel()\n\t\ttime.sleep(short_duration) // give a small time window, in which the go thread routine has a chance to return\n\t\teprintln('> defer block finishes')\n\t}\n\n\tctx_ch := ctx.done()\n\tselect {\n\t\t_ := <-ctx_ch {\n\t\t\tprintln('>> read from ctx_ch succeeded')\n\t\t}\n\t\t1 * time.second {\n\t\t\tpanic('This should not happen')\n\t\t}\n\t}\n\teprintln('> main finishes')\n}\n\n```\n\n----------------------------------------\n\nTITLE: Using Select Statement with Channels in V\nDESCRIPTION: Demonstrates the usage of the select statement in V to monitor multiple channels simultaneously, including timeout and sending operations.\nSOURCE: https://github.com/vlang/v/blob/master/doc/docs.md#2025-04-21_snippet_127\n\nLANGUAGE: v\nCODE:\n```\nimport time\n\nfn main() {\n\tch := chan f64{}\n\tch2 := chan f64{}\n\tch3 := chan f64{}\n\tmut b := 0.0\n\tc := 1.0\n\t// ... setup spawn threads that will send on ch/ch2\n\tspawn fn (the_channel chan f64) {\n\t\ttime.sleep(5 * time.millisecond)\n\t\tthe_channel <- 1.0\n\t}(ch)\n\tspawn fn (the_channel chan f64) {\n\t\ttime.sleep(1 * time.millisecond)\n\t\tthe_channel <- 1.0\n\t}(ch2)\n\tspawn fn (the_channel chan f64) {\n\t\t_ := <-the_channel\n\t}(ch3)\n\n\tselect {\n\t\ta := <-ch {\n\t\t\t// do something with `a`\n\t\t\teprintln('> a: ${a}')\n\t\t}\n\t\tb = <-ch2 {\n\t\t\t// do something with predeclared variable `b`\n\t\t\teprintln('> b: ${b}')\n\t\t}\n\t\tch3 <- c {\n\t\t\t// do something if `c` was sent\n\t\t\ttime.sleep(5 * time.millisecond)\n\t\t\teprintln('> c: ${c} was send on channel ch3')\n\t\t}\n\t\t500 * time.millisecond {\n\t\t\t// do something if no channel has become ready within 0.5s\n\t\t\teprintln('> more than 0.5s passed without a channel being ready')\n\t\t}\n\t}\n\teprintln('> done')\n}\n```\n\n----------------------------------------\n\nTITLE: Sorting Arrays in V\nDESCRIPTION: Demonstrates basic array sorting using the built-in sort method with default ascending order and custom descending order.\nSOURCE: https://github.com/vlang/v/blob/master/doc/docs.md#2025-04-21_snippet_29\n\nLANGUAGE: v\nCODE:\n```\nmut numbers := [1, 3, 2]\nnumbers.sort() // 1, 2, 3\nnumbers.sort(a > b) // 3, 2, 1\n```\n\n----------------------------------------\n\nTITLE: Function Definitions and Usage in V\nDESCRIPTION: This snippet defines a 'main' function that calls two other functions, 'add' and 'sub', both of which perform arithmetic operations. It demonstrates V's function syntax and how to return values.\nSOURCE: https://github.com/vlang/v/blob/master/doc/docs.md#2025-04-21_snippet_4\n\nLANGUAGE: v\nCODE:\n```\nfn main() {\n\tprintln(add(77, 33))\n\tprintln(sub(100, 50))\n}\n\nfn add(x int, y int) int {\n\treturn x + y\n}\n\nfn sub(x int, y int) int {\n\treturn x - y\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing CLI Commands with Subcommands in V\nDESCRIPTION: Example demonstrating how to create a CLI application with subcommands using V's cli module. Shows initialization of a main command with a subcommand, including setup and parsing of command line arguments.\nSOURCE: https://github.com/vlang/v/blob/master/vlib/cli/README.md#2025-04-21_snippet_0\n\nLANGUAGE: v\nCODE:\n```\nmodule main\n\nimport os\nimport cli\n\nfn main() {\n\tmut app := cli.Command{\n\t\tname:        'example-app'\n\t\tdescription: 'example-app'\n\t\texecute:     fn (cmd cli.Command) ! {\n\t\t\tprintln('hello app')\n\t\t\treturn\n\t\t}\n\t\tcommands:    [\n\t\t\tcli.Command{\n\t\t\t\tname:    'sub'\n\t\t\t\texecute: fn (cmd cli.Command) ! {\n\t\t\t\t\tprintln('hello subcommand')\n\t\t\t\t\treturn\n\t\t\t\t}\n\t\t\t},\n\t\t]\n\t}\n\tapp.setup()\n\tapp.parse(os.args)\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Struct with a Nullable Field in V\nDESCRIPTION: This code snippet demonstrates how to define a struct in V with a nullable field using the `?` operator. When creating the table, the non-option field will be defined with `NOT NULL`, while the option field will allow `NULL` values.\nSOURCE: https://github.com/vlang/v/blob/master/vlib/orm/README.md#2025-04-21_snippet_0\n\nLANGUAGE: v\nCODE:\n```\nstruct Foo {\n    notnull  string\n    nullable ?string\n}\n```\n\n----------------------------------------\n\nTITLE: Encoding JSON in V\nDESCRIPTION: Demonstrates how to encode V structs and maps into JSON strings using the json.encode function.\nSOURCE: https://github.com/vlang/v/blob/master/doc/docs.md#2025-04-21_snippet_130\n\nLANGUAGE: v\nCODE:\n```\nimport json\n\nstruct User {\n\tname  string\n\tscore i64\n}\n\nmut data := map[string]int{}\nuser := &User{\n\tname:  'Pierre'\n\tscore: 1024\n}\n\ndata['x'] = 42\ndata['y'] = 360\n\nprintln(json.encode(data)) // {\"x\":42,\"y\":360}\nprintln(json.encode(user)) // {\"name\":\"Pierre\",\"score\":1024}\n```\n\n----------------------------------------\n\nTITLE: Implementing Smart Casting in V\nDESCRIPTION: Shows how to use smart casting in V for safer type checking and accessing variant-specific methods. The example demonstrates flow-sensitive typing and handling mutable identifiers.\nSOURCE: https://github.com/vlang/v/blob/master/doc/docs.md#2025-04-21_snippet_116\n\nLANGUAGE: v\nCODE:\n```\nif w is Mars {\n\tassert typeof(w).name == 'Mars'\n\tif w.dust_storm() {\n\t\tprintln('bad weather!')\n\t}\n}\n```\n\nLANGUAGE: v\nCODE:\n```\nif mut w is Mars {\n\tassert typeof(w).name == 'Mars'\n\tif w.dust_storm() {\n\t\tprintln('bad weather!')\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Using Anonymous and Higher Order Functions in V\nDESCRIPTION: Shows how to use anonymous functions, pass functions as arguments, store functions in variables, and create arrays/maps of functions in V.\nSOURCE: https://github.com/vlang/v/blob/master/doc/docs.md#2025-04-21_snippet_84\n\nLANGUAGE: v\nCODE:\n```\nfn sqr(n int) int {\n\treturn n * n\n}\n\nfn cube(n int) int {\n\treturn n * n * n\n}\n\nfn run(value int, op fn (int) int) int {\n\treturn op(value)\n}\n\nfn main() {\n\t// Functions can be passed to other functions\n\tprintln(run(5, sqr)) // \"25\"\n\t// Anonymous functions can be declared inside other functions:\n\tdouble_fn := fn (n int) int {\n\t\treturn n + n\n\t}\n\tprintln(run(5, double_fn)) // \"10\"\n\t// Functions can be passed around without assigning them to variables:\n\tres := run(5, fn (n int) int {\n\t\treturn n + n\n\t})\n\tprintln(res) // \"10\"\n\t// You can even have an array/map of functions:\n\tfns := [sqr, cube]\n\tprintln(fns[0](10)) // \"100\"\n\tfns_map := {\n\t\t'sqr':  sqr\n\t\t'cube': cube\n\t}\n\tprintln(fns_map['cube'](2)) // \"8\"\n}\n```\n\n----------------------------------------\n\nTITLE: Using range, condition, and bare For loops in V\nDESCRIPTION: This snippet demonstrates different forms of 'for' loops in V, including range-based loops, condition-based loops (similar to while loops), and bare loops (infinite loops with break conditions).\nSOURCE: https://github.com/vlang/v/blob/master/doc/docs.md#2025-04-21_snippet_59\n\nLANGUAGE: v\nCODE:\n```\n// Prints '01234'\nfor i in 0 .. 5 {\n\tprint(i)\n}\n```\n\nLANGUAGE: v\nCODE:\n```\nmut sum := 0\nmut i := 0\nfor i <= 100 {\n\tsum += i\n\ti++\n}\nprintln(sum) // \"5050\"\n```\n\nLANGUAGE: v\nCODE:\n```\nmut num := 0\nfor {\n\tnum += 2\n\tif num >= 10 {\n\t\tbreak\n\t}\n}\nprintln(num) // \"10\"\n```\n\n----------------------------------------\n\nTITLE: Sorting Struct Arrays in V\nDESCRIPTION: Shows how to sort arrays of structs by specific fields using the built-in sort method with custom sorting conditions.\nSOURCE: https://github.com/vlang/v/blob/master/doc/docs.md#2025-04-21_snippet_30\n\nLANGUAGE: v\nCODE:\n```\nstruct User {\n\tage  int\n\tname string\n}\n\nmut users := [User{21, 'Bob'}, User{20, 'Zarkon'}, User{25, 'Alice'}]\nusers.sort(a.age < b.age) // sort by User.age int field\nusers.sort(a.name > b.name) // reverse sort by User.name string field\n```\n\n----------------------------------------\n\nTITLE: Handling Route Parameters in V Endpoints\nDESCRIPTION: This snippet demonstrates how to define V endpoints that accept route parameters, allowing users to pass specific data to the context and retrieve responses based on those parameters.\nSOURCE: https://github.com/vlang/v/blob/master/vlib/veb/README.md#2025-04-21_snippet_3\n\nLANGUAGE: v\nCODE:\n```\n// V will pass the parameter 'user' as a string\n@['/hello/:user']\npub fn (app &App) hello_user(mut ctx Context, user string) veb.Result {\n\treturn ctx.text('Hello ${user}')\n}\n\n// V will pass the parameter 'id' as an int\n@['/document/:id']\npub fn (app &App) get_document(mut ctx Context, id int) veb.Result {\n\treturn ctx.text('Hello ${user}')\n}\n```\n\n----------------------------------------\n\nTITLE: Working with References in V\nDESCRIPTION: Shows how to use references in V, demonstrating struct methods with reference receivers, immutable and mutable references, and a generic tree structure example.\nSOURCE: https://github.com/vlang/v/blob/master/doc/docs.md#2025-04-21_snippet_87\n\nLANGUAGE: v\nCODE:\n```\nstruct Foo {}\n\nfn (foo Foo) bar_method() {\n\t// ...\n}\n\nfn bar_function(foo Foo) {\n\t// ...\n}\n```\n\nLANGUAGE: v\nCODE:\n```\nstruct Foo {\n\tabc int\n}\n\nfn (foo &Foo) bar() {\n\tprintln(foo.abc)\n}\n```\n\nLANGUAGE: v\nCODE:\n```\nstruct Node[T] {\n\tval   T\n\tleft  &Node[T]\n\tright &Node[T]\n}\n```\n\n----------------------------------------\n\nTITLE: Encoding a struct to JSON using json2.encode in V\nDESCRIPTION: This snippet demonstrates how to encode a V struct into a JSON string using `json2.encode`. It imports the `x.json2` and `time` modules, defines a struct named `Person`, initializes an instance of the struct, and then uses `json2.encode` to convert it to a JSON string. The resulting JSON string is stored in the `person_json` variable.\nSOURCE: https://github.com/vlang/v/blob/master/vlib/x/json2/README.md#2025-04-21_snippet_0\n\nLANGUAGE: v\nCODE:\n```\nimport x.json2\nimport time\n\nstruct Person {\nmut:\n\tname     string\n\tage      ?int = 20\n\tbirthday time.Time\n\tdeathday ?time.Time\n}\n\nfn main() {\n\tmut person := Person{\n\t\tname:     'Bob'\n\t\tbirthday: time.now()\n\t}\n\tperson_json := json2.encode[Person](person)\n\t// person_json == {\"name\": \"Bob\", \"age\": 20, \"birthday\": \"2022-03-11T13:54:25.000Z\"}\n}\n```\n\n----------------------------------------\n\nTITLE: Static type methods in V\nDESCRIPTION: Demonstrates how to define and use static type methods in V, which allow organizing functions related to a struct. These are not constructors but simple factory functions attached to the type.\nSOURCE: https://github.com/vlang/v/blob/master/doc/docs.md#2025-04-21_snippet_72\n\nLANGUAGE: v\nCODE:\n```\nstruct User {}\n\nfn User.new() User {\n\treturn User{}\n}\n\nuser := User.new()\n```\n\n----------------------------------------\n\nTITLE: Parameterized Queries in V with PostgreSQL\nDESCRIPTION: These V code snippets demonstrate how to use parameterized queries with the `db.exec_param_many` and `db.exec_param` functions to prevent SQL injection vulnerabilities. The `$n` syntax is used to refer to parameters in the order they are provided in the argument array.\nSOURCE: https://github.com/vlang/v/blob/master/vlib/db/pg/README.md#2025-04-21_snippet_4\n\nLANGUAGE: v\nCODE:\n```\ndb.exec_param_many('INSERT INTO users (username, password) VALUES ($1, $2)', ['tom', 'securePassword']) or { panic(err) }\ndb.exec_param('SELECT * FROM users WHERE username = ($1) limit 1', 'tom') or { panic(err) }\n```\n\n----------------------------------------\n\nTITLE: Complete Example of ChaCha20 Encryption in V\nDESCRIPTION: Provides a complete example of using the ChaCha20 encryption and decryption capabilities. The code ensures that the key and nonce are securely encoded to prevent reuse, complying with the security requirements of ChaCha20. It includes necessary encoding handling with the `hex` module to convert data before processing, and verifies integrity by comparing input and decrypted output.\nSOURCE: https://github.com/vlang/v/blob/master/vlib/x/crypto/chacha20/README.md#2025-04-21_snippet_1\n\nLANGUAGE: v\nCODE:\n```\nmodule main\n\nimport encoding.hex\nimport x.crypto.chacha20\n\nfn main() {\n\t// example of random key\n\t// you should make sure the key (and nonce) are random enough.\n\t// The security guarantees of the ChaCha20 require that the same nonce\n\t// value is never used twice with the same key.\n\tkey := hex.decode('bf32a829ebf86d23f6a32a74ef0333401e54a6b2900d35bfadef82c5d49da15f')!\n\tnonce := hex.decode('a7d7cf3405631f25cc1054bd')!\n\n\tinput := 'Good of gambler'.bytes()\n\n\t// encrypt and the decrypt back\n\toutput := chacha20.encrypt(key, nonce, input)!\n\tinput_back := chacha20.decrypt(key, nonce, output)!\n\n\t// should true\n\tassert input == input_back\n}\n```\n\n----------------------------------------\n\nTITLE: Reading CSV Data in V Language\nDESCRIPTION: This snippet illustrates how to utilize the V language's CSV module to read and parse CSV formatted strings. It imports the necessary CSV encoding package, creates a new CSV reader instance, and iteratively reads lines from the CSV data, printing each line as a list of strings. The expected input is a CSV formatted string, and the output is printed lines converted to lists.\nSOURCE: https://github.com/vlang/v/blob/master/vlib/encoding/csv/README.md#2025-04-21_snippet_0\n\nLANGUAGE: v\nCODE:\n```\nimport encoding.csv\n\ndata := 'x,y\\na,b,c\\n'\nmut parser := csv.new_reader(data)\n// read each line\nfor {\n\titems := parser.read() or { break }\n\tprintln(items)\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Module Init Function in V\nDESCRIPTION: Defines an initialization function that runs automatically when a module is imported. The function must be named 'init', cannot be public, and runs only once regardless of how many times the module is imported.\nSOURCE: https://github.com/vlang/v/blob/master/doc/docs.md#2025-04-21_snippet_92\n\nLANGUAGE: v\nCODE:\n```\nfn init() {\n\t// your setup code here ...\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Graphics Context with V's gg Module\nDESCRIPTION: This snippet initializes a graphics context using V's gg module to draw simple 2D shapes. It sets up the main window parameters, including background color, width, height, and title, and specifies the frame function to use for drawing. The context is run to continually refresh the frame with new drawings. The frame function demonstrates drawing and filling polygons, drawing outlines, and filling triangles with color. Prerequisites include having the gg and gx modules from V installed, as well as the sokol library. Input includes the vertex positions and colors for shapes, while output is a graphical window displaying the rendered shapes.\nSOURCE: https://github.com/vlang/v/blob/master/vlib/gg/README.md#2025-04-21_snippet_0\n\nLANGUAGE: v\nCODE:\n```\nmodule main\n\nimport gg\nimport gx\n\nfn main() {\n\tmut context := gg.new_context(\n\t\tbg_color:     gx.rgb(174, 198, 255)\n\t\twidth:        600\n\t\theight:       400\n\t\twindow_title: 'Polygons'\n\t\tframe_fn:     frame\n\t)\n\tcontext.run()\n}\n\nfn frame(mut ctx gg.Context) {\n\tctx.begin()\n\tctx.draw_convex_poly([f32(100.0), 100.0, 200.0, 100.0, 300.0, 200.0, 200.0, 300.0, 100.0, 300.0],\n\t\tgx.blue)\n\tctx.draw_poly_empty([f32(50.0), 50.0, 70.0, 60.0, 90.0, 80.0, 70.0, 110.0], gx.black)\n\tctx.draw_triangle_filled(450, 142, 530, 280, 370, 280, gx.red)\n\tctx.end()\n}\n```\n\n----------------------------------------\n\nTITLE: Compile-time Conditional Compilation in V\nDESCRIPTION: This snippet showcases various compile-time conditional compilation techniques in V, including OS detection, compiler detection, and custom compilation options.\nSOURCE: https://github.com/vlang/v/blob/master/doc/docs.md#2025-04-21_snippet_168\n\nLANGUAGE: v\nCODE:\n```\nfn main() {\n\t// Support for multiple conditions in one branch\n\t$if ios || android {\n\t\tprintln('Running on a mobile device!')\n\t}\n\t$if linux && x64 {\n\t\tprintln('64-bit Linux.')\n\t}\n\t// Usage as expression\n\tos := $if windows { 'Windows' } $else { 'UNIX' }\n\tprintln('Using ${os}')\n\t// $else-$if branches\n\t$if tinyc {\n\t\tprintln('tinyc')\n\t} $else $if clang {\n\t\tprintln('clang')\n\t} $else $if gcc {\n\t\tprintln('gcc')\n\t} $else {\n\t\tprintln('different compiler')\n\t}\n\t$if test {\n\t\tprintln('testing')\n\t}\n\t// v -cg ...\n\t$if debug {\n\t\tprintln('debugging')\n\t}\n\t// v -prod ...\n\t$if prod {\n\t\tprintln('production build')\n\t}\n\t// v -d option ...\n\t$if option ? {\n\t\tprintln('custom option')\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Explicitly Implementing Interfaces with 'implements' Keyword in V\nDESCRIPTION: Shows how to use the optional 'implements' keyword to explicitly declare a struct's intent to implement an interface. The example implements the IError interface.\nSOURCE: https://github.com/vlang/v/blob/master/doc/docs.md#2025-04-21_snippet_108\n\nLANGUAGE: v\nCODE:\n```\nstruct PathError implements IError {\n\tError\n\tpath string\n}\n\nfn (err PathError) msg() string {\n\treturn 'Failed to open path: ${err.path}'\n}\n\nfn try_open(path string) ! {\n\treturn PathError{\n\t\tpath: path\n\t}\n}\n\nfn main() {\n\ttry_open('/tmp') or { panic(err) }\n}\n```\n\n----------------------------------------\n\nTITLE: String Interpolation in V\nDESCRIPTION: This snippet illustrates how to use string interpolation for embedding variables directly into a string using a specific syntax, allowing for dynamic string creation.\nSOURCE: https://github.com/vlang/v/blob/master/doc/docs.md#2025-04-21_snippet_14\n\nLANGUAGE: v\nCODE:\n```\nname := 'Bob'\nprintln('Hello, ${name}!') // Hello, Bob!\n```\n\n----------------------------------------\n\nTITLE: Writing Test Files in V\nDESCRIPTION: Shows how to create and structure test files in V, including internal and external tests, and special test functions like testsuite_begin and testsuite_end.\nSOURCE: https://github.com/vlang/v/blob/master/doc/docs.md#2025-04-21_snippet_132\n\nLANGUAGE: v\nCODE:\n```\n// hello.v\nmodule main\n\nfn hello() string {\n\treturn 'Hello world'\n}\n\nfn main() {\n\tprintln(hello())\n}\n```\n\nLANGUAGE: v\nCODE:\n```\n// hello_test.v\nmodule main\n\nfn test_hello() {\n\tassert hello() == 'Hello world'\n}\n```\n\nLANGUAGE: v\nCODE:\n```\nimport strconv\n\nfn test_atoi() ! {\n\tassert strconv.atoi('1')! == 1\n\tassert strconv.atoi('one')! == 1 // test will fail\n}\n```\n\n----------------------------------------\n\nTITLE: Error Handling for Array Access in V\nDESCRIPTION: Shows how to handle out-of-bounds array access using the 'or' block for custom error handling or the '!' operator for error propagation.\nSOURCE: https://github.com/vlang/v/blob/master/doc/docs.md#2025-04-21_snippet_46\n\nLANGUAGE: v\nCODE:\n```\narr := [1, 2, 3]\nlarge_index := 999\nval := arr[large_index] or { panic('out of bounds') }\nprintln(val)\n// you can also do this, if you want to *propagate* the access error:\nval2 := arr[333]!\nprintln(val2)\n```\n\n----------------------------------------\n\nTITLE: Array Slices with Negative Indexes in V\nDESCRIPTION: Demonstrates the special syntax for negative indexing in array slices using the gate operator (#) to index from the end of the array.\nSOURCE: https://github.com/vlang/v/blob/master/doc/docs.md#2025-04-21_snippet_37\n\nLANGUAGE: v\nCODE:\n```\na := [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\nprintln(a#[-3..]) // [7, 8, 9]\nprintln(a#[-20..]) // [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\nprintln(a#[-20..-8]) // [0, 1]\nprintln(a#[..-3]) // [0, 1, 2, 3, 4, 5, 6]\n\n// empty arrays\nprintln(a#[-20..-10]) // []\nprintln(a#[20..10]) // []\nprintln(a#[20..30]) // []\n```\n\n----------------------------------------\n\nTITLE: Using the V Debugger with $dbg Statement\nDESCRIPTION: Demonstrates how to use V's native debugger by adding the $dbg statement to source code, which creates a breakpoint where execution halts and the debugger REPL becomes available.\nSOURCE: https://github.com/vlang/v/blob/master/doc/docs.md#2025-04-21_snippet_175\n\nLANGUAGE: v\nCODE:\n```\nfn main() {\n\ta := 1\n\t$dbg;\n}\n```\n\n----------------------------------------\n\nTITLE: Understanding Array Slice Memory Behavior in V\nDESCRIPTION: Explains how slice memory works, including copy-on-grow behavior and memory relationship between slices and parent arrays.\nSOURCE: https://github.com/vlang/v/blob/master/doc/docs.md#2025-04-21_snippet_34\n\nLANGUAGE: v\nCODE:\n```\nmut a := [0, 1, 2, 3, 4, 5]\n\n// Create a slice, that reuses the *same memory* as the parent array\n// initially, without doing a new allocation:\nmut b := unsafe { a[2..4] } // the contents of `b`, reuses the memory, used by the contents of `a`.\n\nb[0] = 7 // Note that `b[0]` and `a[2]` refer to *the same element* in memory.\nprintln(a) // `[0, 1, 7, 3, 4, 5]` - changing `b[0]` above, changed `a[2]` too.\n\n// the content of `b` will get reallocated, to have room for the `9` element:\nb << 9\n// The content of `b`, is now reallocated, and fully independent from the content of `a`.\n\nprintln(a) // `[0, 1, 7, 3, 4, 5]` - no change, since the content of `b` was reallocated,\n// to a larger block, before the appending.\n\nprintln(b) // `[7, 3, 9]` - the contents of `b`, after the reallocation, and appending of the `9`.\n```\n\n----------------------------------------\n\nTITLE: Registering Users with Hashed Passwords and Tokens\nDESCRIPTION: This snippet handles user registration by generating a salt and hashed password using `veb.auth`, inserting the user into the database, and generating an authentication token. It adds the token to cookies to authenticate users session-wise. `auth.generate_salt` and `auth.hash_password_with_salt` are utilized for secure password management.\nSOURCE: https://github.com/vlang/v/blob/master/vlib/veb/auth/README.md#2025-04-21_snippet_2\n\nLANGUAGE: v\nCODE:\n```\n@[post]\npub fn (mut app App) register_user(mut ctx Context, name string, password string) veb.Result {\n\tsalt := auth.generate_salt()\n\tnew_user := User{\n\t\tname:          name\n\t\tpassword_hash: auth.hash_password_with_salt(password, salt)\n\t\tsalt:          salt\n\t}\n\tsql app.db {\n\t\tinsert new_user into User\n\t} or {}\n\n\t// Get new user ID (until RETURNING is supported by ORM)\n\tif x := app.find_user_by_name(name) {\n\t\t// Generate and insert the token using user ID\n\t\ttoken := app.auth.add_token(x.id) or { '' }\n\t\t// Authenticate the user by adding the token to the cookies\n\t\tctx.set_cookie(name: 'token', value: token)\n\t}\n\n\treturn ctx.redirect('/')\n}\n```\n\n----------------------------------------\n\nTITLE: vweb Attribute Middleware\nDESCRIPTION: This example demonstrates how to add middleware to route-specific functions using attributes. It shows how to define a middleware function as a method of the `App` struct and then attach it to a route using the `[middleware: function_name]` attribute.\nSOURCE: https://github.com/vlang/v/blob/master/vlib/vweb/README.md#2025-04-21_snippet_16\n\nLANGUAGE: v\nCODE:\n```\n@[middleware: check_auth]\n@['/admin/data']\npub fn (mut app App) admin() vweb.Result {\n\t// ...\n}\n\n// check_auth is a method of App, so we don't need to pass the context as parameter.\npub fn (mut app App) check_auth () bool {\n\t// ...\n\treturn true\n}\n```\n\n----------------------------------------\n\nTITLE: Encoding and Decoding V Struct with JSON Module\nDESCRIPTION: This V code snippet showcases the encoding and decoding of a struct named `Employee` using the `json` module. It demonstrates how to change JSON field names, skip certain fields, and conditionally omit properties based on field values. Essential features include the use of annotations like `@[json: '-']` for skipping fields and `@[json: 'ETitle']` for renaming fields in the JSON output. Ensure the V language is installed to run this example.\nSOURCE: https://github.com/vlang/v/blob/master/vlib/json/README.md#2025-04-21_snippet_0\n\nLANGUAGE: v\nCODE:\n```\nimport json\n\nenum JobTitle {\n\tmanager\n\texecutive\n\tworker\n}\n\nstruct Employee {\nmut:\n\tname   string\n\tfamily string @[json: '-'] // this field will be skipped\n\tage    int\n\tsalary f32\n\ttitle  JobTitle @[json: 'ETitle'] // the key for this field will be 'ETitle', not 'title'\n\tnotes  string   @[omitempty]      // the JSON property is not created if the string is equal to '' (an empty string).\n\t// TODO: document @[raw]\n}\n\nfn main() {\n\tx := Employee{'Peter', 'Begins', 28, 95000.5, .worker, ''}\n\tprintln(x)\n\ts := json.encode(x)\n\tprintln('JSON encoding of employee x: ${s}')\n\tassert s == '{\"name\":\"Peter\",\"age\":28,\"salary\":95000.5,\"ETitle\":\"worker\"}'\n\tmut y := json.decode(Employee, s)!\n\tassert y != x\n\tassert y.family == ''\n\ty.family = 'Begins'\n\tassert y == x\n\tprintln(y)\n\tss := json.encode(y)\n\tprintln('JSON encoding of employee y: ${ss}')\n\tassert ss == s\n}\n```\n\n----------------------------------------\n\nTITLE: Integrating SQLite Database with Vweb Application\nDESCRIPTION: Example demonstrating how to connect a SQLite database to a vweb application using the reserved db field to maintain connection across requests.\nSOURCE: https://github.com/vlang/v/blob/master/vlib/vweb/README.md#2025-04-21_snippet_23\n\nLANGUAGE: v\nCODE:\n```\nmodule main\n\nimport vweb\nimport db.sqlite\n\nstruct App {\n\tvweb.Context\nmut:\n\tdb sqlite.DB\n}\n\nfn main() {\n\t// create the database connection\n\tmut db := sqlite.connect('db')!\n\n\tvweb.run(&App{\n\t\tdb: db\n\t}, 8080)\n}\n```\n\n----------------------------------------\n\nTITLE: Proper Method Chaining Pattern in V\nDESCRIPTION: Shows the recommended approach for method chaining in V that avoids returning references to borrowed objects, which would require heap allocation. Instead, it uses explicit mutation of objects.\nSOURCE: https://github.com/vlang/v/blob/master/doc/docs.md#2025-04-21_snippet_140\n\nLANGUAGE: v\nCODE:\n```\nstruct MyStruct {\nmut:\n\tn int\n}\n\nfn (mut a MyStruct) f() {\n\t// do something with `a`\n}\n\nfn (mut a MyStruct) g() {\n\t// do something else with `a`\n}\n\nfn main() {\n\tx := MyStruct{} // stack allocated\n\tmut y := x\n\ty.f()\n\ty.g()\n\t// instead of `mut y := x.f().g()`\n}\n```\n\n----------------------------------------\n\nTITLE: Basic vweb Application Setup\nDESCRIPTION: This example shows how to import the `vweb` module, define an `App` struct, and start the web server.  It demonstrates starting the server using a simple port number and using `RunParams` for more control.\nSOURCE: https://github.com/vlang/v/blob/master/vlib/vweb/README.md#2025-04-21_snippet_6\n\nLANGUAGE: v\nCODE:\n```\nimport vweb\n\nstruct App {\n    vweb.Context\n}\n\nfn main() {\n\tvweb.run(&App{}, 8080)\n\t// // or\n\t// vweb.run_at(new_app(), vweb.RunParams{\n\t// \thost: 'localhost'\n\t// \tport: 8099\n\t// \tfamily: .ip\n\t// }) or { panic(err) }\n}\n```\n\n----------------------------------------\n\nTITLE: Automatic Stack/Heap Decision in V Functions\nDESCRIPTION: Illustrates how V decides whether to allocate objects on stack or heap based on reference lifetime. Objects whose references escape the function scope are automatically heap-allocated.\nSOURCE: https://github.com/vlang/v/blob/master/doc/docs.md#2025-04-21_snippet_137\n\nLANGUAGE: v\nCODE:\n```\nstruct MyStruct {\n\tn int\n}\n\nstruct RefStruct {\n\tr &MyStruct\n}\n\nfn main() {\n\tq, w := f()\n\tprintln('q: ${q.r.n}, w: ${w.n}')\n}\n\nfn f() (RefStruct, &MyStruct) {\n\ta := MyStruct{\n\t\tn: 1\n\t}\n\tb := MyStruct{\n\t\tn: 2\n\t}\n\tc := MyStruct{\n\t\tn: 3\n\t}\n\te := RefStruct{\n\t\tr: &b\n\t}\n\tx := a.n + c.n\n\tprintln('x: ${x}')\n\treturn e, &c\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Rows in a Table in V\nDESCRIPTION: This code snippet demonstrates how to update rows in a database table in V using a `sql` block with an `update` statement and a `where` clause. It shows how to check for `NULL` fields using `is none`.\nSOURCE: https://github.com/vlang/v/blob/master/vlib/orm/README.md#2025-04-21_snippet_7\n\nLANGUAGE: v\nCODE:\n```\nsql db {\n    update Foo set updated_at = time.now() where name == 'abc' && updated_at is none\n}!\n```\n\n----------------------------------------\n\nTITLE: Spawning Concurrent Tasks in V\nDESCRIPTION: Demonstrates how to spawn concurrent tasks using 'spawn' keyword in V. It shows running a function in a parallel thread and waiting for its completion.\nSOURCE: https://github.com/vlang/v/blob/master/doc/docs.md#2025-04-21_snippet_123\n\nLANGUAGE: v\nCODE:\n```\nimport math\n\nfn p(a f64, b f64) { // ordinary function without return value\n\tc := math.sqrt(a * a + b * b)\n\tprintln(c)\n}\n\nfn main() {\n\tspawn p(3, 4)\n\t// p will be run in parallel thread\n\t// It can also be written as follows\n\t// spawn fn (a f64, b f64) {\n\t// \tc := math.sqrt(a * a + b * b)\n\t// \tprintln(c)\n\t// }(3, 4)\n}\n```\n\n----------------------------------------\n\nTITLE: Array Methods for Manipulation in V\nDESCRIPTION: This snippet shows several built-in methods for arrays in V, including filtering, mapping, and checking array contents, which allow various operations on array elements.\nSOURCE: https://github.com/vlang/v/blob/master/doc/docs.md#2025-04-21_snippet_28\n\nLANGUAGE: v\nCODE:\n```\nnums := [1, 2, 3, 4, 5, 6]\neven := nums.filter(it % 2 == 0)\nprintln(even) // [2, 4, 6]\n```\n\nLANGUAGE: v\nCODE:\n```\nwords := ['hello', 'world']\nupper := words.map(it.to_upper())\nprintln(upper) // ['HELLO', 'WORLD']\n```\n\n----------------------------------------\n\nTITLE: Reading a CSV File Sequentially in V Language\nDESCRIPTION: This code snippet demonstrates how to use the sequential CSV reader to read a CSV file row by row. The reader is initialized with a file path, and it prints each row until no more data is available. Each cell is read as a string by default.\nSOURCE: https://github.com/vlang/v/blob/master/vlib/encoding/csv/README_csv_reader.md#2025-04-21_snippet_0\n\nLANGUAGE: v\nCODE:\n```\nimport encoding.csv\n\nfn main() {\n\tmut csvr := csv.csv_sequential_reader(file_path: 'big2.csv', end_line_len: csv.endline_crlf_len)!\n\tfor csvr.has_data() > 1 {\n\t\tprintln(csvr.get_next_row()!)\n\t}\n\tcsvr.dispose_csv_reader()\n}\n```\n\n----------------------------------------\n\nTITLE: Basic MySQL Usage in V\nDESCRIPTION: This V code snippet demonstrates how to connect to a MySQL database, select a database, execute a query, iterate through the results as maps, and close the connection. It shows the basic steps for interacting with a MySQL database using the db.mysql module.\nSOURCE: https://github.com/vlang/v/blob/master/vlib/db/mysql/README.md#2025-04-21_snippet_1\n\nLANGUAGE: v oksyntax\nCODE:\n```\nimport db.mysql\n\n// Create connection\nmut connection := mysql.Connection{\n\tusername: 'root'\n\tdbname:   'mysql'\n}\n// Connect to server\nconnection.connect()?\n// Change the default database\nconnection.select_db('db_users')?\n// Do a query\nget_users_query_result := connection.query('SELECT * FROM users')?\n// Get the result as maps\nfor user in get_users_query_result.maps() {\n\t// Access the name of user\n\tprintln(user['name'])\n}\n// Free the query result\nget_users_query_result.free()\n// Close the connection if needed\nconnection.close()\n```\n\n----------------------------------------\n\nTITLE: Implementing Closures in V\nDESCRIPTION: Demonstrates closure functionality in V, showing how anonymous functions can capture variables from their creation scope. Explains variable inheritance and modification behavior.\nSOURCE: https://github.com/vlang/v/blob/master/doc/docs.md#2025-04-21_snippet_85\n\nLANGUAGE: v\nCODE:\n```\nmy_int := 1\nmy_closure := fn [my_int] () {\n\tprintln(my_int)\n}\nmy_closure() // prints 1\n```\n\nLANGUAGE: v\nCODE:\n```\nmut i := 1\nfunc := fn [i] () int {\n\treturn i\n}\nprintln(func() == 1) // true\ni = 123\nprintln(func() == 1) // still true\n```\n\nLANGUAGE: v\nCODE:\n```\nfn new_counter() fn () int {\n\tmut i := 0\n\treturn fn [mut i] () int {\n\t\ti++\n\t\treturn i\n\t}\n}\n\nc := new_counter()\nprintln(c()) // 1\nprintln(c()) // 2\nprintln(c()) // 3\n```\n\nLANGUAGE: v\nCODE:\n```\nmut i := 0\nmut ref := &i\nprint_counter := fn [ref] () {\n\tprintln(*ref)\n}\n\nprint_counter() // 0\ni = 10\nprint_counter() // 10\n```\n\n----------------------------------------\n\nTITLE: Working with heap-allocated structs in V\nDESCRIPTION: This snippet demonstrates how to allocate structs on the heap in V using the '&' prefix. It shows the reference syntax and how mutability works with references to structs.\nSOURCE: https://github.com/vlang/v/blob/master/doc/docs.md#2025-04-21_snippet_64\n\nLANGUAGE: v\nCODE:\n```\nstruct Point {\n\tx int\n\ty int\n}\n\np := &Point{10, 10}\n// References have the same syntax for accessing fields\nprintln(p.x)\n```\n\nLANGUAGE: v\nCODE:\n```\nstruct Foo {\nmut:\n\tx int\n}\n\nfa := Foo{1}\nmut a := fa\na.x = 2\nassert fa.x == 1\nassert a.x == 2\n\n// fb := Foo{ 1 }\n// mut b := &fb  // error: `fb` is immutable, cannot have a mutable reference to it\n// b.x = 2\n\nmut fc := Foo{1}\nmut c := &fc\nc.x = 2\nassert fc.x == 2\nassert c.x == 2\nprintln(fc) // Foo{ x: 2 }\nprintln(c) // &Foo{ x: 2 } // Note `&` prefixed.\n```\n\n----------------------------------------\n\nTITLE: Implementing Sum Types in V\nDESCRIPTION: Shows how to declare and use sum types in V. The example defines a World type that can be either Moon, Mars, or Venus, and demonstrates type checking and printing.\nSOURCE: https://github.com/vlang/v/blob/master/doc/docs.md#2025-04-21_snippet_113\n\nLANGUAGE: v\nCODE:\n```\nstruct Moon {}\n\nstruct Mars {}\n\nstruct Venus {}\n\ntype World = Mars | Moon | Venus\n\nsum := World(Moon{})\nassert sum.type_name() == 'Moon'\nprintln(sum)\n```\n\n----------------------------------------\n\nTITLE: Connecting to SQLite Database and Setting Modes - V Language\nDESCRIPTION: This snippet establishes a connection to a SQLite database named 'foo.db' using the V language. It sets the database synchronization mode to 'off' and the journal mode to 'memory' to improve performance during a large number of insert operations. The snippet includes error handling for the connection attempt.\nSOURCE: https://github.com/vlang/v/blob/master/vlib/db/sqlite/README.md#2025-04-21_snippet_0\n\nLANGUAGE: v\nCODE:\n```\nimport db.sqlite\n\ndb := sqlite.connect('foo.db') or { panic(err) }\ndb.synchronization_mode(sqlite.SyncMode.off)!\ndb.journal_mode(sqlite.JournalMode.memory)!\n```\n\n----------------------------------------\n\nTITLE: Conditional Compilation for Client/Server Programs in V\nDESCRIPTION: Shows how to use conditional compilation to produce different executables (client and server) from the same codebase using custom flags in V.\nSOURCE: https://github.com/vlang/v/blob/master/doc/docs.md#2025-04-21_snippet_157\n\nLANGUAGE: v\nCODE:\n```\nfn act_as_client() { ... }\nfn act_as_server() { ... }\nfn main() {\n\t$if as_client ? {\n\t\tact_as_client()\n\t}\n\t$if as_server ? {\n\t\tact_as_server()\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Embedded structs in V\nDESCRIPTION: Demonstrates struct embedding in V, which allows one struct to automatically obtain all the fields and methods from another struct. This example shows a Button struct embedding a Size struct.\nSOURCE: https://github.com/vlang/v/blob/master/doc/docs.md#2025-04-21_snippet_76\n\nLANGUAGE: v\nCODE:\n```\nstruct Size {\nmut:\n\twidth  int\n\theight int\n}\n\nfn (s &Size) area() int {\n\treturn s.width * s.height\n}\n\nstruct Button {\n\tSize\n\ttitle string\n}\n```\n\n----------------------------------------\n\nTITLE: Using Asserts in V Tests\nDESCRIPTION: Explains how to use assert statements in V for testing. It covers basic assertions, assertions with extra messages, and non-aborting assertions.\nSOURCE: https://github.com/vlang/v/blob/master/doc/docs.md#2025-04-21_snippet_131\n\nLANGUAGE: v\nCODE:\n```\nfn foo(mut v []int) {\n\tv[0] = 1\n}\n\nmut v := [20]\nfoo(mut v)\nassert v[0] < 4\n```\n\nLANGUAGE: v\nCODE:\n```\nfn test_assertion_with_extra_message_failure() {\n\tfor i in 0 .. 100 {\n\t\tassert i * 2 - 45 < 75 + 10, 'assertion failed for i: ${i}'\n\t}\n}\n```\n\nLANGUAGE: v\nCODE:\n```\n@[assert_continues]\nfn abc(ii int) {\n\tassert ii == 2\n}\n\nfor i in 0 .. 4 {\n\tabc(i)\n}\n```\n\n----------------------------------------\n\nTITLE: Database Pool Implementation in VWeb\nDESCRIPTION: Example of implementing a database connection pool in vweb using PostgreSQL. Shows how to create and share a database pool across multiple controllers.\nSOURCE: https://github.com/vlang/v/blob/master/vlib/vweb/README.md#2025-04-21_snippet_30\n\nLANGUAGE: v\nCODE:\n```\nmodule main\n\nimport vweb\nimport db.pg\n\nstruct App {\n\tvweb.Context\n\tvweb.Controller\n\tdb_handle vweb.DatabasePool[pg.DB]\nmut:\n\tdb pg.DB\n}\n\nstruct Admin {\n\tvweb.Context\n\tdb_handle vweb.DatabasePool[pg.DB]\nmut:\n\tdb pg.DB\n}\n\nfn get_database_connection() pg.DB {\n\treturn pg.connect(user: 'user', password: 'password', dbname: 'database') or { panic(err) }\n}\n\nfn main() {\n\tpool := vweb.database_pool(handler: get_database_connection)\n\n\tmut app := &App{\n\t\tdb_handle:   pool\n\t\tcontrollers: [\n\t\t\tvweb.controller('/admin', &Admin{\n\t\t\t\tdb_handle: pool\n\t\t\t}),\n\t\t]\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Module Import Example in V\nDESCRIPTION: Demonstrates how to import and use a module in V, using the 'os' module to get user input from stdin.\nSOURCE: https://github.com/vlang/v/blob/master/doc/docs.md#2025-04-21_snippet_49\n\nLANGUAGE: v\nCODE:\n```\nimport os\n\nfn main() {\n\t// read text from stdin\n\tname := os.input('Enter your name: ')\n\tprintln('Hello, ${name}!')\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing custom iterators in V\nDESCRIPTION: This snippet demonstrates how to create a custom iterator in V by implementing a 'next' method that returns an Option type. The example creates a SquareIterator that yields the square of each value in an array.\nSOURCE: https://github.com/vlang/v/blob/master/doc/docs.md#2025-04-21_snippet_57\n\nLANGUAGE: v\nCODE:\n```\nstruct SquareIterator {\n\tarr []int\nmut:\n\tidx int\n}\n\nfn (mut iter SquareIterator) next() ?int {\n\tif iter.idx >= iter.arr.len {\n\t\treturn none\n\t}\n\tdefer {\n\t\titer.idx++\n\t}\n\treturn iter.arr[iter.idx] * iter.arr[iter.idx]\n}\n\nnums := [1, 2, 3, 4, 5]\niter := SquareIterator{\n\tarr: nums\n}\nfor squared in iter {\n\tprintln(squared)\n}\n```\n\n----------------------------------------\n\nTITLE: Stack and Heap Allocation Examples in V\nDESCRIPTION: Demonstrates how V allocates variables on stack or heap based on their usage. It shows stack allocation for local variables and heap allocation for arrays that are returned from functions.\nSOURCE: https://github.com/vlang/v/blob/master/doc/docs.md#2025-04-21_snippet_136\n\nLANGUAGE: v\nCODE:\n```\nstruct User {\n\tname string\n}\n\nfn test() []int {\n\tnumber := 7 // stack variable\n\tuser := User{} // struct allocated on stack\n\tnumbers := [1, 2, 3] // array allocated on heap, will be freed as the function exits\n\tprintln(number)\n\tprintln(user)\n\tprintln(numbers)\n\tnumbers2 := [4, 5, 6] // array that's being returned, won't be freed here\n\treturn numbers2\n}\n```\n\n----------------------------------------\n\nTITLE: Using the 'in' operator with arrays and maps in V\nDESCRIPTION: This snippet demonstrates how to use the 'in' operator to check if an element exists in an array or if a key exists in a map. The 'in' operator can also be used for clearer boolean expressions with enums.\nSOURCE: https://github.com/vlang/v/blob/master/doc/docs.md#2025-04-21_snippet_55\n\nLANGUAGE: v\nCODE:\n```\nnums := [1, 2, 3]\nprintln(1 in nums) // true\nprintln(4 !in nums) // true\n```\n\nLANGUAGE: v\nCODE:\n```\nm := {\n\t'one': 1\n\t'two': 2\n}\n\nprintln('one' in m) // true\nprintln('three' !in m) // true\n```\n\nLANGUAGE: v\nCODE:\n```\nenum Token {\n\tplus\n\tminus\n\tdiv\n\tmult\n}\n\nstruct Parser {\n\ttoken Token\n}\n\nparser := Parser{}\nif parser.token == .plus || parser.token == .minus || parser.token == .div || parser.token == .mult {\n\t// ...\n}\nif parser.token in [.plus, .minus, .div, .mult] {\n\t// ...\n}\n```\n\n----------------------------------------\n\nTITLE: Using defer statements in V for resource cleanup\nDESCRIPTION: This snippet demonstrates the 'defer' statement in V, which defers execution of a block until the surrounding function returns. This is useful for resource cleanup like closing files.\nSOURCE: https://github.com/vlang/v/blob/master/doc/docs.md#2025-04-21_snippet_61\n\nLANGUAGE: v\nCODE:\n```\nimport os\n\nfn read_log() {\n\tmut ok := false\n\tmut f := os.open('log.txt') or { panic(err) }\n\tdefer {\n\t\tf.close()\n\t}\n\t// ...\n\tif !ok {\n\t\t// defer statement will be called here, the file will be closed\n\t\treturn\n\t}\n\t// ...\n\t// defer statement will be called here, the file will be closed\n}\n```\n\nLANGUAGE: v\nCODE:\n```\nimport os\n\nenum State {\n\tnormal\n\twrite_log\n\treturn_error\n}\n\n// write log file and return number of bytes written\n\nfn write_log(s State) !int {\n\tmut f := os.create('log.txt')!\n\tdefer {\n\t\tf.close()\n\t}\n\tif s == .write_log {\n\t\t// `f.close()` will be called after `f.write()` has been\n\t\t// executed, but before `write_log()` finally returns the\n\t\t// number of bytes written to `main()`\n\t\treturn f.writeln('This is a log file')\n\t} else if s == .return_error {\n\t\t// the file will be closed after the `error()` function\n\t\t// has returned - so the error message will still report\n\t\t// it as open\n\t\treturn error('nothing written; file open: ${f.is_opened}')\n\t}\n\t// the file will be closed here, too\n\treturn 0\n}\n\nfn main() {\n\tn := write_log(.return_error) or {\n\t\tprintln('Error: ${err}')\n\t\t0\n\t}\n\tprintln('${n} bytes written')\n}\n```\n\nLANGUAGE: v\nCODE:\n```\nfn (mut app App) auth_middleware() bool {\n\tdefer {\n\t\tif !$res() {\n\t\t\tapp.response.status_code = 401\n\t\t\tapp.response.body = 'Unauthorized'\n\t\t}\n\t}\n\theader := app.get_header('Authorization')\n\tif header == '' {\n\t\treturn false\n\t}\n\treturn true\n}\n\nfn (mut app App) auth_with_user_middleware() (bool, string) {\n\tdefer {\n\t\tif !$res(0) {\n\t\t\tapp.response.status_code = 401\n\t\t\tapp.response.body = 'Unauthorized'\n\t\t} else {\n\t\t\tapp.user = $res(1)\n\t\t}\n\t}\n\theader := app.get_header('Authorization')\n\tif header == '' {\n\t\treturn false, ''\n\t}\n\treturn true, 'TestUser'\n}\n```\n\n----------------------------------------\n\nTITLE: Passing Functions Directly as Arguments in V\nDESCRIPTION: Demonstrates passing a function directly as an argument without using an intermediate variable. Duck-typing ensures compatibility.\nSOURCE: https://github.com/vlang/v/blob/master/doc/docs.md#2025-04-21_snippet_104\n\nLANGUAGE: v\nCODE:\n```\nprintln(filter('Hello world', uppercase))\n```\n\n----------------------------------------\n\nTITLE: Connecting to a SQLite Database and Executing SQL Block in V\nDESCRIPTION: This code snippet demonstrates connecting to a SQLite database in V using the `db.sqlite` module and executing SQL commands within a `sql` block.  The example establishes a connection to an in-memory database.\nSOURCE: https://github.com/vlang/v/blob/master/vlib/orm/README.md#2025-04-21_snippet_2\n\nLANGUAGE: v\nCODE:\n```\nimport db.sqlite\n\ndb := sqlite.connect(':memory:')!\n\nsql db {\n    // query; see below\n}!\n```\n\n----------------------------------------\n\nTITLE: Compile-time Reflection on Sum Type Variants in V\nDESCRIPTION: This code demonstrates how to use compile-time reflection to iterate over sum type variants and check their types using the $for construct.\nSOURCE: https://github.com/vlang/v/blob/master/doc/docs.md#2025-04-21_snippet_165\n\nLANGUAGE: v\nCODE:\n```\ntype MySum = int | string\n\nfn main() {\n\t$for v in MySum.variants {\n\t\t$if v.typ is int {\n\t\t\tprintln('has int type')\n\t\t} $else $if v.typ is string {\n\t\t\tprintln('has string type')\n\t\t}\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: vweb Route-Specific Middleware\nDESCRIPTION: This example demonstrates how to define and use route-specific middleware in vweb. Middleware functions are defined and then associated with specific routes during app creation.  The middlewares are chained and executed in order, with propagation stopping if a function returns `false`.\nSOURCE: https://github.com/vlang/v/blob/master/vlib/vweb/README.md#2025-04-21_snippet_14\n\nLANGUAGE: v\nCODE:\n```\nmodule main\n\nimport vweb\n\nstruct App {\n\tvweb.Context\n\tmiddlewares map[string][]vweb.Middleware\n}\n\nfn new_app() &App {\n\tmut app := &App{\n\t\tmiddlewares: {\n\t\t\t// chaining is allowed, middleware will be evaluated in order\n\t\t\t'/path/to/': [middleware_func, other_func]\n\t\t\t'/':         [global_middleware]\n\t\t}\n\t}\n\n\t// do stuff with app\n\t// ...\n\treturn app\n}\n\nfn middleware_func(mut ctx vweb.Context) bool {\n\t// ...\n\treturn true\n}\n\nfn other_func(mut ctx vweb.Context) bool {\n\t// ...\n\treturn true\n}\n\nfn global_middleware(mut ctx vweb.Context) bool {\n\t// ...\n\treturn true\n}\n```\n\n----------------------------------------\n\nTITLE: Defining User Context with Session Data in V Language\nDESCRIPTION: This snippet defines structs for user data, application, and context, embedding session handling capabilities. Dependencies include x.sessions and veb. It initializes user session management within the context of a veb application. The focus is on embedding sessions.CurrentSession and maintaining session state for users.\nSOURCE: https://github.com/vlang/v/blob/master/vlib/x/sessions/README.md#2025-04-21_snippet_0\n\nLANGUAGE: v\nCODE:\n```\nimport x.sessions\nimport veb\n\npub struct User {\npub mut:\n    name     string\n    verified bool\n}\n\npub struct Context {\n    veb.Context\n    // By embedding the CurrentSession struct we can directly access the current session id\n    // and any associated session data. Set the session data type to `User`\n    sessions.CurrentSession[User]\n}\n\npub struct App {\npub mut:\n    // this struct contains the store that holds all session data it also provides\n    // an easy way to manage sessions in your veb app. Set the session data type to `User`\n    sessions &sessions.Sessions[User]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Log Instances in V Language\nDESCRIPTION: This snippet illustrates the creation of a custom log instance in V, allowing for more flexible logging settings such as setting the log level and specifying log output paths. It demonstrates how to log different levels of logs including info, warning, error, and fatal logs. The fatal log is noted to cause a panic, marking it as a critical point.\nSOURCE: https://github.com/vlang/v/blob/master/vlib/log/README.md#2025-04-21_snippet_1\n\nLANGUAGE: v\nCODE:\n```\nimport log\n\nfn main() {\n\tmut l := log.Log{}\n\tl.set_level(.info)\n\tl.set_full_logpath('./info.log')\n\tl.log_to_console_too()\n\n\tl.info('info')\n\tl.warn('warn')\n\tl.error('error')\n\tl.fatal('fatal') // panic, marked as [noreturn]\n}\n```\n\n----------------------------------------\n\nTITLE: Adding CSRF Protection without CsrfApp in V\nDESCRIPTION: This V code snippet illustrates how to implement CSRF protection in a vweb application using middleware, allowing multiple routes to be protected at once. It involves setting a csrf middleware with CsrfConfig and protecting routes by applying CSRF tokens set on requests. The snippet uses configurations external to the App struct to maintain modularity.\nSOURCE: https://github.com/vlang/v/blob/master/vlib/vweb/csrf/README.md#2025-04-21_snippet_2\n\nLANGUAGE: v\nCODE:\n```\nmodule main\n\nimport net.http\nimport vweb\nimport vweb.csrf\n\n// the configuration moved here\nconst csrf_config = csrf.CsrfConfig{\n\t// change the secret\n\tsecret: 'my-64bytes-secret'\n\t// change to which domains you want to allow\n\tallowed_hosts: ['*']\n}\n\n\nstruct App {\n\tvweb.Context\npub mut:\n\tmiddlewares map[string][]vweb.Middleware\n}\n\nfn main() {\n\tapp := &App{\n\t\tmiddlewares: {\n\t\t\t// protect all routes starting with the url '/auth'\n\t\t\t'/auth': [csrf.middleware(csrf_config)]\n\t\t}\n\t}\n\tvweb.run(app, 8080)\n}\n\npub fn (mut app App) index() vweb.Result {\n\t// get the token and set the cookie\n\tcsrftoken := csrf.set_token(mut app.Context, csrf_config)\n\treturn $vweb.html()\n}\n\n[post]\npub fn (mut app App) auth() vweb.Result {\n\treturn app.text('authenticated!')\n}\n\n[post]\npub fn (mut app App) register() vweb.Result {\n\t// protect an individual route with the following line\n\tcsrf.protect(mut app.Context, csrf_config)\n\t// ...\n}\n```\n\n----------------------------------------\n\nTITLE: Using embedded structs in V\nDESCRIPTION: Shows how to use embedded structs in V, including accessing fields and methods from the embedded struct, as well as explicitly accessing the embedded struct with dot notation.\nSOURCE: https://github.com/vlang/v/blob/master/doc/docs.md#2025-04-21_snippet_77\n\nLANGUAGE: v\nCODE:\n```\nmut button := Button{\n\ttitle:  'Click me'\n\theight: 2\n}\n\nbutton.width = 3\nassert button.area() == 6\nassert button.Size.area() == 6\nprint(button)\n```\n\n----------------------------------------\n\nTITLE: Multi-line Documentation Comments in V\nDESCRIPTION: Demonstrates how to format multi-line documentation comments for functions in V. Shows the preferred style of using single line comments that continue with documentation about the function.\nSOURCE: https://github.com/vlang/v/blob/master/doc/docs.md#2025-04-21_snippet_144\n\nLANGUAGE: v\nCODE:\n```\n// copy_all recursively copies all elements of the array by their value,\n// if `dupes` is false all duplicate values are eliminated in the process.\nfn copy_all(dupes bool) {\n\t// ...\n}\n```\n\n----------------------------------------\n\nTITLE: Decoding a JSON string to a struct using json2.decode in V\nDESCRIPTION: This snippet demonstrates how to decode a JSON string into a V struct using `json2.decode`. It imports the `x.json2` and `time` modules, defines a struct named `Person`, and then uses `json2.decode` to parse the JSON string and populate the struct fields. It handles automatic type conversion for struct fields during the decoding process.\nSOURCE: https://github.com/vlang/v/blob/master/vlib/x/json2/README.md#2025-04-21_snippet_1\n\nLANGUAGE: v\nCODE:\n```\nimport x.json2\nimport time\n\nstruct Person {\nmut:\n\tname     string\n\tage      ?int = 20\n\tbirthday time.Time\n\tdeathday ?time.Time\n}\n\nfn main() {\n\tresp := '{\"name\": \"Bob\", \"age\": 20, \"birthday\": \"${time.now()}\"}'\n\tperson := json2.decode[Person](resp)!\n\t/*\n\tstruct Person {\n      mut:\n          name \"Bob\"\n          age  20\n          birthday \"2022-03-11 13:54:25\"\n      }\n\t*/\n}\n```\n\n----------------------------------------\n\nTITLE: Defining and Using Enums in V\nDESCRIPTION: Creates an enum type 'Color' with three values starting at 0. Demonstrates enum value assignment, matching, and variable assignment using the shorthand dot notation.\nSOURCE: https://github.com/vlang/v/blob/master/doc/docs.md#2025-04-21_snippet_94\n\nLANGUAGE: v\nCODE:\n```\nenum Color as u8 {\n\tred   // the default start value is 0\n\tgreen // the value is automatically incremented to 1\n\tblue  // the final value is now 2\n}\n\nmut color := Color.red\n// V knows that `color` is a `Color`. No need to use `color = Color.green` here.\ncolor = .green\nprintln(color) // \"green\"\nmatch color {\n\t.red { println('the color was red') }\n\t.green { println('the color was green') }\n\t.blue { println('the color was blue') }\n}\nprintln(int(color)) // prints 1\n```\n\n----------------------------------------\n\nTITLE: Using For loops with maps in V\nDESCRIPTION: This snippet demonstrates how to iterate through maps in V using the 'for' loop. It shows how to access both keys and values, and how to ignore either using the underscore character.\nSOURCE: https://github.com/vlang/v/blob/master/doc/docs.md#2025-04-21_snippet_58\n\nLANGUAGE: v\nCODE:\n```\nm := {\n\t'one': 1\n\t'two': 2\n}\nfor key, value in m {\n\tprintln('${key} -> ${value}')\n\t// Output: one -> 1\n\t//         two -> 2\n}\n```\n\nLANGUAGE: v\nCODE:\n```\nm := {\n\t'one': 1\n\t'two': 2\n}\n// iterate over keys\nfor key, _ in m {\n\tprintln(key)\n\t// Output: one\n\t//         two\n}\n// iterate over values\nfor _, value in m {\n\tprintln(value)\n\t// Output: 1\n\t//         2\n}\n```\n\n----------------------------------------\n\nTITLE: Cancelling Context with Context Module in V\nDESCRIPTION: This V code snippet demonstrates how to use a cancellable context to control and prevent routine leaks. By utilizing the 'with_cancel' function and passing the context to functions, it ensures that all spawned coroutines properly terminate when the context is cancelled. Dependencies include the 'context' and 'time' modules. The main function generates integers and uses context cancellation to manage the coroutines' lifecycle.\nSOURCE: https://github.com/vlang/v/blob/master/vlib/context/README.md#2025-04-21_snippet_0\n\nLANGUAGE: V\nCODE:\n```\nimport time\nimport context\n\n// This example demonstrates the use of a cancelable context to prevent a\n// routine leak. By the end of the example function, the routine started\n// by gen will return without leaking.\nfn main() {\n\t// gen generates integers in a separate routine and\n\t// sends them to the returned channel.\n\t// The callers of gen need to cancel the context once\n\t// they are done consuming generated integers not to leak\n\t// the internal routine started by gen.\n\tgen := fn (mut ctx context.Context) chan int {\n\t\tdst := chan int{}\n\t\tspawn fn (mut ctx context.Context, dst chan int) {\n\t\t\tmut v := 0\n\t\t\tch := ctx.done()\n\t\t\tfor {\n\t\t\t\tselect {\n\t\t\t\t\t_ := <-ch {\n\t\t\t\t\t\t// returning not to leak the routine\n\t\t\t\t\t\teprintln('> go thread returns because ctx was canceled/done')\n\t\t\t\t\t\treturn\n\t\t\t\t\t}\n\t\t\t\t\tdst <- v {\n\t\t\t\t\t\tv++\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}(mut ctx, dst)\n\t\treturn dst\n\t}\n\n\tmut background := context.background()\n\tmut ctx, cancel := context.with_cancel(mut background)\n\tdefer {\n\t\tcancel()\n\t\ttime.sleep(2 * time.millisecond) // give a small time window, in which the go thread routine has a chance to return\n\t}\n\n\tmut mut_ctx := ctx\n\tmut ctx2 := &mut_ctx\n\tch := gen(mut ctx2)\n\tfor i in 0 .. 5 {\n\t\tv := <-ch\n\t\tprintln('> received value: ${v}')\n\t\tassert i == v\n\t}\n\tprintln('> main is finished here')\n}\n\n```\n\n----------------------------------------\n\nTITLE: vweb Query Parameter Handling\nDESCRIPTION: This example demonstrates how to access and handle query parameters in vweb. The `app.query` field is used to access the query parameters of the request.\nSOURCE: https://github.com/vlang/v/blob/master/vlib/vweb/README.md#2025-04-21_snippet_11\n\nLANGUAGE: v\nCODE:\n```\nmodule main\n\nimport vweb\n\nstruct App {\n\tvweb.Context\n}\n\nfn main() {\n\tvweb.run(&App{}, 8081)\n}\n\n@['/user'; get]\npub fn (mut app App) controller_get_user_by_id() vweb.Result {\n\t// http://localhost:3000/user?q=vpm&order_by=desc => { 'q': 'vpm', 'order_by': 'desc' }\n\treturn app.text(app.query.str())\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Sorting with Comparison Function in V\nDESCRIPTION: Implements custom multi-field sorting using the sort_with_compare method that takes a comparison function defining the sort order.\nSOURCE: https://github.com/vlang/v/blob/master/doc/docs.md#2025-04-21_snippet_31\n\nLANGUAGE: v\nCODE:\n```\nstruct User {\n\tage  int\n\tname string\n}\n\nmut users := [User{21, 'Bob'}, User{65, 'Bob'}, User{25, 'Alice'}]\n\ncustom_sort_fn := fn (a &User, b &User) int {\n\t// return -1 when a comes before b\n\t// return 0, when both are in same order\n\t// return 1 when b comes before a\n\tif a.name == b.name {\n\t\tif a.age < b.age {\n\t\t\treturn 1\n\t\t}\n\t\tif a.age > b.age {\n\t\t\treturn -1\n\t\t}\n\t\treturn 0\n\t}\n\tif a.name < b.name {\n\t\treturn -1\n\t} else if a.name > b.name {\n\t\treturn 1\n\t}\n\treturn 0\n}\nusers.sort_with_compare(custom_sort_fn)\n```\n\n----------------------------------------\n\nTITLE: Parsing a Single File in V\nDESCRIPTION: This snippet illustrates how to parse a single file from disk using the 'parser.parse_file' function. It requires the path to the file along with references to the table, preferences, and scope.\nSOURCE: https://github.com/vlang/v/blob/master/vlib/v/README.md#2025-04-21_snippet_1\n\nLANGUAGE: v\nCODE:\n```\nimport v.parser\n\npath := ''\n// table, pref and scope needs to be passed as reference\nparsed_file := parser.parse_file(path, table, .parse_comments, &pref, &scope)\n```\n\n----------------------------------------\n\nTITLE: Passing Function Variables as Arguments in V\nDESCRIPTION: Shows how to pass a function variable as an argument to another function that expects a function type parameter.\nSOURCE: https://github.com/vlang/v/blob/master/doc/docs.md#2025-04-21_snippet_103\n\nLANGUAGE: v\nCODE:\n```\nprintln(filter('Hello world', my_filter)) // prints `HELLO WORLD`\n```\n\n----------------------------------------\n\nTITLE: Creating Recursive Structures with Sum Types in V\nDESCRIPTION: Illustrates how to build recursive structures using sum types in V. The example implements a binary tree and a function to sum all node values.\nSOURCE: https://github.com/vlang/v/blob/master/doc/docs.md#2025-04-21_snippet_114\n\nLANGUAGE: v\nCODE:\n```\n// V's binary tree\nstruct Empty {}\n\nstruct Node {\n\tvalue f64\n\tleft  Tree\n\tright Tree\n}\n\ntype Tree = Empty | Node\n\n// sum up all node values\n\nfn sum(tree Tree) f64 {\n\treturn match tree {\n\t\tEmpty { 0 }\n\t\tNode { tree.value + sum(tree.left) + sum(tree.right) }\n\t}\n}\n\nfn main() {\n\tleft := Node{0.2, Empty{}, Empty{}}\n\tright := Node{0.3, Empty{}, Node{0.4, Empty{}, Empty{}}}\n\ttree := Node{0.5, left, right}\n\tprintln(sum(tree)) // 0.2 + 0.3 + 0.4 + 0.5 = 1.4\n}\n```\n\n----------------------------------------\n\nTITLE: vweb Parameter Handling\nDESCRIPTION: This example demonstrates how to pass and receive parameters in vweb endpoints. Parameters are defined in the route using a colon (`:`) and are then passed as function parameters.\nSOURCE: https://github.com/vlang/v/blob/master/vlib/vweb/README.md#2025-04-21_snippet_9\n\nLANGUAGE: v\nCODE:\n```\n          vvvv\n@['/hello/:user']            vvvv\nfn (mut app App) hello_user(user string) vweb.Result {\n\treturn app.text('Hello $user')\n}\n```\n\n----------------------------------------\n\nTITLE: Operator Overloading in V\nDESCRIPTION: Shows how to implement operator overloading in V for vector operations, demonstrating custom implementations for addition and subtraction operations.\nSOURCE: https://github.com/vlang/v/blob/master/doc/docs.md#2025-04-21_snippet_182\n\nLANGUAGE: v\nCODE:\n```\nstruct Vec {\n\tx int\n\ty int\n}\n\nfn (a Vec) str() string {\n\treturn '{${a.x}, ${a.y}}'\n}\n\nfn (a Vec) + (b Vec) Vec {\n\treturn Vec{a.x + b.x, a.y + b.y}\n}\n\nfn (a Vec) - (b Vec) Vec {\n\treturn Vec{a.x - b.x, a.y - b.y}\n}\n\nfn main() {\n\ta := Vec{2, 3}\n\tb := Vec{4, 5}\n\tmut c := Vec{1, 2}\n\n\tprintln(a + b) // \"{6, 8}\"\n\tprintln(a - b) // \"{-2, -2}\"\n\tc += a\n\t//^^ autogenerated from + overload\n\tprintln(c) // \"{3, 5}\"\n}\n```\n\n----------------------------------------\n\nTITLE: Using Array Utility Functions in V\nDESCRIPTION: Example showing usage of array utility functions including min(), max(), and idx_min(). The code demonstrates how to find the minimum value, maximum value, and index of minimum value in an integer array.\nSOURCE: https://github.com/vlang/v/blob/master/vlib/arrays/README.md#2025-04-21_snippet_0\n\nLANGUAGE: v\nCODE:\n```\nimport arrays\n\nfn main() {\n\ta := [1, 5, 7, 0, 9]\n\tassert arrays.min(a)! == 0\n\tassert arrays.max(a)! == 9\n\tassert arrays.idx_min(a)! == 3\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Interfaces with Mutable Methods in V\nDESCRIPTION: Demonstrates how interfaces can have a 'mut:' section that requires implementing types to have methods with 'mut' receivers. The example shows how MyStruct implements Foo but not Bar.\nSOURCE: https://github.com/vlang/v/blob/master/doc/docs.md#2025-04-21_snippet_107\n\nLANGUAGE: v\nCODE:\n```\n// interface-example.2\nmodule main\n\ninterface Foo {\n\twrite(string) string\n}\n\n// => the method signature of a type, implementing interface Foo should be:\n// `fn (s Type) write(a string) string`\n\ninterface Bar {\nmut:\n\twrite(string) string\n}\n\n// => the method signature of a type, implementing interface Bar should be:\n// `fn (mut s Type) write(a string) string`\n\nstruct MyStruct {}\n\n// MyStruct implements the interface Foo, but *not* interface Bar\nfn (s MyStruct) write(a string) string {\n\treturn a\n}\n\nfn main() {\n\ts1 := MyStruct{}\n\tfn1(s1)\n\t// fn2(s1) -> compile error, since MyStruct does not implement Bar\n}\n\nfn fn1(s Foo) {\n\tprintln(s.write('Foo'))\n}\n\n// fn fn2(s Bar) { // does not match\n//      println(s.write('Foo'))\n// }\n```\n\n----------------------------------------\n\nTITLE: Anonymous structs in V\nDESCRIPTION: Shows how to define and use anonymous structs in V, which don't require separate declaration. The example embeds an anonymous author struct within a Book struct.\nSOURCE: https://github.com/vlang/v/blob/master/doc/docs.md#2025-04-21_snippet_71\n\nLANGUAGE: v\nCODE:\n```\nstruct Book {\n\tauthor struct {\n\t\tname string\n\t\tage  int\n\t}\n\n\ttitle string\n}\n\nbook := Book{\n\tauthor: struct {\n\t\tname: 'Samantha Black'\n\t\tage:  24\n\t}\n}\nassert book.author.name == 'Samantha Black'\nassert book.author.age == 24\n```\n\n----------------------------------------\n\nTITLE: Implementing Global Variables with Special Initialization in V\nDESCRIPTION: An example showing how to declare and initialize global variables in V, including those requiring special in-place initialization via an init() function that runs before main().\nSOURCE: https://github.com/vlang/v/blob/master/doc/docs.md#2025-04-21_snippet_186\n\nLANGUAGE: v\nCODE:\n```\nimport sync\n\n__global (\n\tsem   sync.Semaphore // needs initialization in `init()`\n\tmtx   sync.RwMutex // needs initialization in `init()`\n\tf1    = f64(34.0625) // explicily initialized\n\tshmap shared map[string]f64 // initialized as empty `shared` map\n\tf2    f64 // initialized to `0.0`\n)\n\nfn init() {\n\tsem.init(0)\n\tmtx.init()\n}\n```\n\n----------------------------------------\n\nTITLE: Inserting a Record into a Table in V\nDESCRIPTION: This code snippet demonstrates how to insert a new record into a database table in V using a struct instance within a `sql` block. The example showcases the automatic handling of default values.\nSOURCE: https://github.com/vlang/v/blob/master/vlib/orm/README.md#2025-04-21_snippet_5\n\nLANGUAGE: v\nCODE:\n```\nfoo := Foo{\n    name:       'abc'\n    created_at: time.now()\n    // updated_at defaults to none\n    // deleted_at defaults to none\n    children: [\n        Child{\n            name: 'abc'\n        },\n        Child{\n            name: 'def'\n        },\n    ]\n}\n\nfoo_id := sql db {\n    insert foo into Foo\n}!\n```\n\n----------------------------------------\n\nTITLE: Struct update syntax in V\nDESCRIPTION: Shows how to return a modified version of a struct using the spread operator (`...`) to copy existing fields while updating specific ones. This example demonstrates a register function that updates a user's registration status.\nSOURCE: https://github.com/vlang/v/blob/master/doc/docs.md#2025-04-21_snippet_67\n\nLANGUAGE: v\nCODE:\n```\nstruct User {\n\tname          string\n\tage           int\n\tis_registered bool\n}\n\nfn register(u User) User {\n\treturn User{\n\t\t...u\n\t\tis_registered: true\n\t}\n}\n\nmut user := User{\n\tname: 'abc'\n\tage:  23\n}\nuser = register(user)\nprintln(user)\n```\n\n----------------------------------------\n\nTITLE: Checking Membership in an Array in V\nDESCRIPTION: This snippet checks if a value is in an array using the `in` operator, returning a boolean indicating existence.\nSOURCE: https://github.com/vlang/v/blob/master/doc/docs.md#2025-04-21_snippet_24\n\nLANGUAGE: v\nCODE:\n```\nnames := ['John', 'Peter', 'Sam']\nprintln('Alex' in names) // \"false\"\n```\n\n----------------------------------------\n\nTITLE: vweb HTTP Verb Handling\nDESCRIPTION: This example illustrates how to handle different HTTP verbs (methods) in vweb. It shows how to use attributes like `[post]` to define endpoints that respond to specific HTTP methods.\nSOURCE: https://github.com/vlang/v/blob/master/vlib/vweb/README.md#2025-04-21_snippet_8\n\nLANGUAGE: v\nCODE:\n```\n@[post]\nfn (mut app App) world() vweb.Result {\n\treturn app.text('World')\n}\n\n@['/product/create'; post]\nfn (mut app App) create_product() vweb.Result {\n\treturn app.text('product')\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Array Slices in V\nDESCRIPTION: Demonstrates how to create slices from arrays using various indexing syntax variations with the .. operator.\nSOURCE: https://github.com/vlang/v/blob/master/doc/docs.md#2025-04-21_snippet_32\n\nLANGUAGE: v\nCODE:\n```\nnums := [0, 10, 20, 30, 40]\nprintln(nums[1..4]) // [10, 20, 30]\nprintln(nums[..4]) // [0, 10, 20, 30]\nprintln(nums[1..]) // [10, 20, 30, 40]\n```\n\n----------------------------------------\n\nTITLE: Using Anonymous Functions with Function Types in V\nDESCRIPTION: Shows how to use anonymous (lambda) functions as arguments when a function type is expected. The anonymous function provides the implementation inline.\nSOURCE: https://github.com/vlang/v/blob/master/doc/docs.md#2025-04-21_snippet_105\n\nLANGUAGE: v\nCODE:\n```\nprintln(filter('Hello world', fn (s string) string {\n\treturn s.to_upper()\n}))\n```\n\n----------------------------------------\n\nTITLE: Logging Information and Warnings Using V Language Log Module\nDESCRIPTION: This code snippet demonstrates basic logging operations using the default Log instance provided by the log module in V. It showcases how to log informational messages and warnings, as well as changing the log level to allow for debug messages. The snippet highlights the default behavior which is thread-safe and how to modify the log level for visibility.\nSOURCE: https://github.com/vlang/v/blob/master/vlib/log/README.md#2025-04-21_snippet_0\n\nLANGUAGE: v\nCODE:\n```\nimport log\n\nfn abc() {\n\tlog.info('some information')\n\tlog.warn('a warning')\n}\n\n// this will not be visible, the default log level is .info:\nlog.debug('a debug message')\n\nlog.set_level(.debug)\n\n// this will be now visible, the log level was changed to .debug:\nlog.debug('a debug message')\n\nabc()\n```\n\n----------------------------------------\n\nTITLE: Initializing and Starting V Server\nDESCRIPTION: This snippet sets up a basic HTTP server by initializing its configurations and starting it on port 3000. It utilizes the V language's concurrency model to handle multiple incoming requests efficiently. Key dependencies include server and socket initialization functions.\nSOURCE: https://github.com/vlang/v/blob/master/examples/vanilla_http_server/README.md#2025-04-21_snippet_1\n\nLANGUAGE: V\nCODE:\n```\nmodule main\n\nconst port = 3000\n\nfn main() {\n\tmut server := Server{\n\t\trouter: setup_router()\n\t}\n\n\tserver.socket_fd = create_server_socket(port)\n\tif server.socket_fd < 0 {\n\t\treturn\n\t}\n\tserver.epoll_fd = C.epoll_create1(0)\n\tif server.epoll_fd < 0 {\n\t\tC.perror('epoll_create1 failed'.str)\n\t\tC.close(server.socket_fd)\n\t\treturn\n\t}\n\n\tserver.lock_flag.lock()\n\tif add_fd_to_epoll(server.epoll_fd, server.socket_fd, u32(C.EPOLLIN)) == -1 {\n\t\tC.close(server.socket_fd)\n\t\tC.close(server.epoll_fd)\n\n\t\tserver.lock_flag.unlock()\n\t\treturn\n\t}\n\n\tserver.lock_flag.unlock()\n\n\tserver.lock_flag.init()\n\tfor i := 0; i < 16; i++ {\n\t\tserver.threads[i] = spawn process_events(&server)\n\t}\n\tprintln('listening on http://localhost:${port}/')\n\tevent_loop(&server)\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Gzip Compression and Decompression in V\nDESCRIPTION: Example demonstrating how to compress and decompress a string using the compress.gzip module. The code shows the complete cycle of compressing a string to bytes, then decompressing it back and verifying the result matches the original input.\nSOURCE: https://github.com/vlang/v/blob/master/vlib/compress/gzip/README.md#2025-04-21_snippet_0\n\nLANGUAGE: v\nCODE:\n```\nimport compress.gzip\n\nfn main() {\n\tuncompressed := 'Hello world!'\n\tcompressed := gzip.compress(uncompressed.bytes())!\n\tdecompressed := gzip.decompress(compressed)!\n\tassert decompressed == uncompressed.bytes()\n}\n```\n\n----------------------------------------\n\nTITLE: Parsing CSV with Custom Quote and Comment Handling in V\nDESCRIPTION: Demonstrates configuring a CSV reader with specific quote character, comment handling, and quote removal. Processes a sample CSV string and prints each row.\nSOURCE: https://github.com/vlang/v/blob/master/vlib/encoding/csv/README_csv_reader.md#2025-04-21_snippet_10\n\nLANGUAGE: v\nCODE:\n```\nimport encoding.csv\n\nconst txt = \"\n# comment line\n'a' , 'b', 'c'\n'1' , '2', '3'\n'4' ,'5', 'a,b,c', 'e'\n\"\n\nfn main() {\n\tmut csvr := csv.csv_reader(\n\t\tscr_buf:      txt.str // string pointer\n\t\tscr_buf_len:  txt.len // string length\n\t\tcomment:      `#`     // line starting with # will be ignored\n\t\tquote:        `'`     // char used for quotes\n\t\tquote_remove: true    // remove quotes from the cells\n\t)!\n\n\t// scan all rows, csvr.csv_map.len contain the valid\n\t// rows number in the CSV file.\n\tfor row_index in 0 .. csvr.csv_map.len {\n\t\trow := csvr.get_row(row_index)!\n\t\tprintln(row)\n\t}\n\tcsvr.dispose_csv_reader()\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Arrays with Fixed Size in V\nDESCRIPTION: This snippet shows how to initialize an array with a specified length, capacity, and initial value using a special array initialization syntax in V.\nSOURCE: https://github.com/vlang/v/blob/master/doc/docs.md#2025-04-21_snippet_26\n\nLANGUAGE: v\nCODE:\n```\nmut a := []int{len: 10000, cap: 30000, init: 3}\n```\n\n----------------------------------------\n\nTITLE: ECDSA Example: Key Generation, Signing, Verification\nDESCRIPTION: This example demonstrates the basic usage of the `ecdsa` module in V. It shows how to generate an ECDSA key pair (defaulting to NIST P-256), sign a message, verify the signature, and free the allocated memory. The example uses functions like `ecdsa.generate_key()`, `pvkey.sign()`, `pbkey.verify()`, and `pbkey.free()`/`pvkey.free()`.\nSOURCE: https://github.com/vlang/v/blob/master/vlib/crypto/ecdsa/README.md#2025-04-21_snippet_0\n\nLANGUAGE: v\nCODE:\n```\nimport crypto.ecdsa\n\nfn main() {\n\t// create default NIST P-256 secp256r1 curve key pair. If you wish to generate another curve,\n\t// use: `pbkey, pvkey := ecdsa.generate_key(nid: .secp521r1)!` instead.\n\tpbkey, pvkey := ecdsa.generate_key()!\n\n\tmessage_tobe_signed := 'Hello ecdsa'.bytes()\n\t// create a signature with the recommended hash\n\tsignature := pvkey.sign(message_tobe_signed)!\n\n\t// verify the message with the signature\n\tverified := pbkey.verify(message_tobe_signed, signature)!\n\tdump(verified) // should be true\n\n\t// free allocated keys when you have done with your work.\n\tpbkey.free()\n\tpvkey.free()\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting Rows from a Table in V\nDESCRIPTION: This code snippet demonstrates how to delete rows from a database table in V using a `sql` block with a `delete` statement and a `where` clause.\nSOURCE: https://github.com/vlang/v/blob/master/vlib/orm/README.md#2025-04-21_snippet_8\n\nLANGUAGE: v\nCODE:\n```\nsql db {\n    delete from Foo where id > 10\n}!\n```\n\n----------------------------------------\n\nTITLE: Various Function and Struct Attributes in V\nDESCRIPTION: Demonstrates the usage of various attributes in V, including @[inline], @[noinline], @[noreturn], @[heap], @[unsafe], @[manualfree], @[keep_args_alive], @[weak], @[c_extern], @[typedef], @[callconv], and @[must_use].\nSOURCE: https://github.com/vlang/v/blob/master/doc/docs.md#2025-04-21_snippet_155\n\nLANGUAGE: v\nCODE:\n```\n// This function's calls will be inlined.\n@[inline]\nfn inlined_function() {\n}\n\n// This function's calls will NOT be inlined.\n@[noinline]\nfn function() {\n}\n\n// This function will NOT return to its callers.\n// Such functions can be used at the end of or blocks,\n// just like exit/1 or panic/1. Such functions can not\n// have return types, and should end either in for{}, or\n// by calling other `[noreturn]` functions.\n@[noreturn]\nfn forever() {\n\tfor {}\n}\n\n// The following struct must be allocated on the heap. Therefore, it can only be used as a\n// reference (`&Window`) or inside another reference (`&OuterStruct{ Window{...} }`).\n// See section \"Stack and Heap\"\n@[heap]\nstruct Window {\n}\n\n// Calls to following function must be in unsafe{} blocks.\n// Note that the code in the body of `risky_business()` will still be\n// checked, unless you also wrap it in `unsafe {}` blocks.\n// This is useful, when you want to have an `[unsafe]` function that\n// has checks before/after a certain unsafe operation, that will still\n// benefit from V's safety features.\n@[unsafe]\nfn risky_business() {\n\t// code that will be checked, perhaps checking pre conditions\n\tunsafe {\n\t\t// code that *will not be* checked, like pointer arithmetic,\n\t\t// accessing union fields, calling other `[unsafe]` fns, etc...\n\t\t// Usually, it is a good idea to try minimizing code wrapped\n\t\t// in unsafe{} as much as possible.\n\t\t// See also [Memory-unsafe code](#memory-unsafe-code)\n\t}\n\t// code that will be checked, perhaps checking post conditions and/or\n\t// keeping invariants\n}\n\n// V's autofree engine will not take care of memory management in this function.\n// You will have the responsibility to free memory manually yourself in it.\n// Note: it is NOT related to the garbage collector. It will only make the\n// -autofree mechanism, ignore the body of that function.\n@[manualfree]\nfn custom_allocations() {\n}\n\n// The memory pointed to by the pointer arguments of this function will not be\n// freed by the garbage collector (if in use) before the function returns\n// For C interop only.\n@[keep_args_alive]\nfn C.my_external_function(voidptr, int, voidptr) int\n\n// A @[weak] tag tells the C compiler, that the next declaration will be weak, i.e. when linking,\n// if there is another declaration of a symbol with the same name (a 'strong' one), it should be\n// used instead, *without linker errors about duplicate symbols*.\n// For C interop only.\n\n@[weak]\n__global abc = u64(1)\n\n// Tell V, that the following global was defined on the C side,\n// thus V will not initialise it, but will just give you access to it.\n// For C interop only.\n\n@[c_extern]\n__global my_instance C.my_struct\nstruct C.my_struct {\n\ta int\n\tb f64\n}\n\n// Tell V that the following struct is defined with `typedef struct` in C.\n// For C interop only.\n@[typedef]\npub struct C.Foo {}\n\n// Used to add a custom calling convention to a function, available calling convention: stdcall, fastcall and cdecl.\n// This list also applies for type aliases (see below).\n// For C interop only.\n@[callconv: 'stdcall']\nfn C.DefWindowProc(hwnd int, msg int, lparam int, wparam int)\n\n// Used to add a custom calling convention to a function type aliases.\n// For C interop only.\n\n@[callconv: 'fastcall']\ntype FastFn = fn (int) bool\n\n// Calls to the following function, will have to use its return value somehow.\n// Ignoring it, will emit warnings.\n@[must_use]\nfn f() int {\n\treturn 42\n}\n\nfn g() {\n\t// just calling `f()` here, will produce a warning\n\tprintln(f()) // this is fine, because the return value was used as an argument\n}\n\n// Windows only (and obsolete; instead of it, use `-subsystem windows` when compiling)\n// Without this attribute all graphical apps will have the following behavior on Windows:\n// If run from a console or terminal; keep the terminal open so all (e)println statements can be viewed.\n// If run from e.g. Explorer, by double-click; app is opened, but no terminal is opened, and no\n// (e)println output can be seen.\n// Use it to force-open a terminal to view output in, even if the app is started from Explorer.\n// Valid before main() only.\n@[console]\nfn main() {\n}\n```\n\n----------------------------------------\n\nTITLE: Using SLH-DSA for Signing and Verifying Messages in V\nDESCRIPTION: This snippet demonstrates how to use the SLH-DSA signing functionality to create a private key, sign a message, and verify the signature using the corresponding public key. It includes resource management for freeing allocated objects.\nSOURCE: https://github.com/vlang/v/blob/master/vlib/x/crypto/slhdsa/README.md#2025-04-21_snippet_1\n\nLANGUAGE: v\nCODE:\n```\nimport x.crypto.slhdsa\n\nfn main() {\n\t// you can choose and pass the kind of the SLH-DSA parameter to the constructor\n\topt := slhdsa.KeyOpts{\n\t\tkind: .sha2_128s\n\t\t// other options was availables\n\t}\n\tmut pv := slhdsa.PrivateKey.new(opt)!\n\n\t// Example message\n\tmsg := 'SLH-DSA example message'.bytes()\n\n\t// Sign a message using constructed key\n\tsig := pv.sign(msg)!\n\n\t// Then the public key part can verify this signature\n\tmut pb := pv.public_key()!\n\tverified := pb.verify(sig, msg)!\n\tassert verified // true\n\n\t// release the resource\n\tpv.free()\n\tpb.free()\n}\n```\n\n----------------------------------------\n\nTITLE: Mapping Flags to Struct Fields\nDESCRIPTION: This code snippet demonstrates how to map command-line flags to fields in a V struct using `flag.to_struct[Config](os.args, skip: 1)`. The `skip: 1` argument skips the first argument (program name). The example also shows how to generate documentation for the flags using `flag.to_doc[Config]()` and how to customize the documentation with field-specific descriptions.\nSOURCE: https://github.com/vlang/v/blob/master/vlib/flag/README.md#2025-04-21_snippet_0\n\nLANGUAGE: v\nCODE:\n```\n```v\nimport flag\nimport os\n\n@[xdoc: 'My application that does X']\n@[footer: 'A footer']\n@[version: '1.2.3']\n@[name: 'app']\nstruct Config {\n\tshow_version bool @[short: v; xdoc: 'Show version and exit']\n\tdebug_level  int  @[long: debug; short: d; xdoc: 'Debug level']\n\tlevel        f32  @[only: l; xdoc: 'This doc text is overwritten']\n\texample      string\n\tsquare       bool\n\tshow_help    bool   @[long: help; short: h]\n\tmulti        int    @[only: m; repeats]\n\twroom        []int  @[short: w]\n\tignore_me    string @[ignore]\n}\n\nfn main() {\n\t// Map POSIX and GNU style flags found in `os.args` to fields on struct `T`\n\tconfig, no_matches := flag.to_struct[Config](os.args, skip: 1)!\n\n\tif no_matches.len > 0 {\n\t\tprintln('The following flags could not be mapped to any fields on the struct: ${no_matches}')\n\t}\n\n\tif config.show_help {\n\t\t// Generate and layout (a configuable) documentation for the flags\n\t\tdocumentation := flag.to_doc[Config](\n\t\t\tversion: '1.0' // NOTE: this overrides the `@[version: '1.2.3']` struct attribute\n\t\t\tfields:  {\n\t\t\t\t'level':                                    'This is a doc string of the field `level` on struct `Config`'\n\t\t\t\t'example':                                  'This is another doc string'\n\t\t\t\t'multi':                                    'This flag can be repeated'\n\t\t\t\t'-e, --extra':                              'Extra flag that does not exist on the struct, but we want documented (in same format as the others)'\n\t\t\t\t'-q, --quiet-and-quite-long-flag <string>': 'This is a flag with a long name'\n\t\t\t\t'square':                                   '.____.\\n|    |\\n|    |\\n|____|'\n\t\t\t}\n\t\t)!\n\t\tprintln(documentation)\n\t\texit(0)\n\t}\n\n\tdump(config)\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Implementing Redirects and Error Responses in V\nDESCRIPTION: Shows how to handle redirects with different HTTP codes and send error responses in veb framework.\nSOURCE: https://github.com/vlang/v/blob/master/vlib/veb/README.md#2025-04-21_snippet_28\n\nLANGUAGE: v\nCODE:\n```\npub fn (app &App) index(mut ctx Context) veb.Result {\n\ttoken := ctx.get_cookie('token') or { '' }\n\tif token == '' {\n\t\t// redirect the user to '/login' if the 'token' cookie is not set\n\t\t// we explicitly tell the browser to send a GET request\n\t\treturn ctx.redirect('/login', typ: .see_other)\n\t} else {\n\t\treturn ctx.text('Welcome!')\n\t}\n}\n```\n\nLANGUAGE: v\nCODE:\n```\npub fn (app &App) login(mut ctx Context) veb.Result {\n\tif username := ctx.form['username'] {\n\t\treturn ctx.text('Hello \"${username}\"')\n\t} else {\n\t\t// send an HTTP 400 Bad Request response with a message\n\t\treturn ctx.request_error('missing form value \"username\"')\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Request Redirection in Before Request Handler\nDESCRIPTION: Example of using the redirect method in vweb's before_request hook to redirect users without a valid cookie to the homepage.\nSOURCE: https://github.com/vlang/v/blob/master/vlib/vweb/README.md#2025-04-21_snippet_19\n\nLANGUAGE: v\nCODE:\n```\npub fn (mut app App) before_request() {\n\tapp.user_id = app.get_cookie('id') or { app.redirect('/') }\n}\n```\n\n----------------------------------------\n\nTITLE: Merging V Contexts Using onecontext Library\nDESCRIPTION: Demonstrates the usage of the onecontext library in V to merge two contexts into a single one. The 'merge' function from onecontext is used, where 'ctx1' and 'ctx2' are the input contexts. The resultant merged context supports expiration when either of the original contexts expire, and a 'cancel' function is provided for additional control. This approach is tailored for V applications that handle multiple context sources.\nSOURCE: https://github.com/vlang/v/blob/master/vlib/context/onecontext/README.md#2025-04-21_snippet_1\n\nLANGUAGE: v\nCODE:\n```\nctx, cancel := onecontext.merge(ctx1, ctx2)\n```\n\n----------------------------------------\n\nTITLE: Operating on Array Slices in V\nDESCRIPTION: Shows how array slices can be used in operations like appending to another array since slices are arrays themselves.\nSOURCE: https://github.com/vlang/v/blob/master/doc/docs.md#2025-04-21_snippet_33\n\nLANGUAGE: v\nCODE:\n```\narray_1 := [3, 5, 4, 7, 6]\nmut array_2 := [0, 1]\narray_2 << array_1[..3]\nprintln(array_2) // `[0, 1, 3, 5, 4]`\n```\n\n----------------------------------------\n\nTITLE: Loading a library from a list of paths using dl.loader in V\nDESCRIPTION: This code snippet demonstrates how to use the `dl.loader` module to load a dynamic library from a list of possible paths. It initializes a dynamic library loader with a key, an environment variable for paths, and a list of default paths. It then retrieves a symbol named 'CommandLineToArgvW' from the loaded library and asserts that the symbol is not nil.\nSOURCE: https://github.com/vlang/v/blob/master/vlib/dl/loader/README.md#2025-04-21_snippet_0\n\nLANGUAGE: v\nCODE:\n```\nimport dl.loader\n\n// Load a library from a list of paths\nconst default_paths = [\n\t'not-existing-dynamic-link-library'\n\t// 'C:\\\\Windows\\\\System32\\\\shell32.dll',\n\t'shell32',\n]\n\nfn main() {\n\tmut dl_loader := loader.get_or_create_dynamic_lib_loader(\n\t\tkey:      'LibExample'\n\t\tenv_path: 'LIB_PATH'\n\t\tpaths:    default_paths\n\t)!\n\n\tdefer {\n\t\tdl_loader.unregister()\n\t}\n\n\tsym := dl_loader.get_sym('CommandLineToArgvW')!\n\tassert !isnil(sym)\n}\n```\n\n----------------------------------------\n\nTITLE: Parsing and Managing Txtar Archives in V\nDESCRIPTION: This V code snippet demonstrates how to parse a txtar archive, unpack its contents to a directory, and then pack it back into a txtar archive. It relies on the 'encoding.txtar' module. The snippet illustrates creating a txtar archive with file entries, unpacking it to a temporary directory, and then packing it again to verify contents. Key dependencies include 'os' and 'encoding.txtar' modules. Expected inputs are strings representing txtar content, while outputs include assertions confirming file operations.\nSOURCE: https://github.com/vlang/v/blob/master/vlib/encoding/txtar/README.md#2025-04-21_snippet_0\n\nLANGUAGE: v\nCODE:\n```\nimport os\nimport encoding.txtar\n\na := txtar.parse('comment\nline1\nline2\n-- file.txt --\nsome content that will go into file.txt\nsome more content\n-- a/b/c/file.v --\nimport os\ndump(os.args)\n-- bcd/def/another.v --\ndump(2+2)\n')\nassert a.files.len == 2\nassert a.files[0].path == 'file.txt'\nassert a.files[2].path == 'bcd/def/another.v'\n\ntfolder := os.join_path(os.temp_dir(), 'xyz')\ntxtar.unpack(a, tfolder)!\nassert os.exists(os.join_path(tfolder, 'bcd/def/another.v'))\nb := txtar.pack(tfolder, '')!\nassert b.files.len == a.files.len\nos.rmdir_all(tfolder)!\n```\n\n----------------------------------------\n\nTITLE: Interface Methods vs Struct Methods in V\nDESCRIPTION: Demonstrates how interfaces can have their own methods that don't need to be implemented by structs. Shows method resolution when a struct method and interface method have the same name.\nSOURCE: https://github.com/vlang/v/blob/master/doc/docs.md#2025-04-21_snippet_111\n\nLANGUAGE: v\nCODE:\n```\ninterface Adoptable {}\n\nfn (a Adoptable) speak() string {\n\treturn 'adopt me!'\n}\n\nstruct Cat {}\n\nfn (c Cat) speak() string {\n\treturn 'meow!'\n}\n\nstruct Dog {}\n\nfn main() {\n\tcat := Cat{}\n\tassert dump(cat.speak()) == 'meow!'\n\n\ta := Adoptable(cat)\n\tassert dump(a.speak()) == 'adopt me!' // call Adoptable's `speak`\n\tif a is Cat {\n\t\t// Inside this `if` however, V knows that `a` is not just any\n\t\t// kind of Adoptable, but actually a Cat, so it will use the\n\t\t// Cat `speak`, NOT the Adoptable `speak`:\n\t\tdump(a.speak()) // meow!\n\t}\n\n\tb := Adoptable(Dog{})\n\tassert dump(b.speak()) == 'adopt me!' // call Adoptable's `speak`\n\t// if b is Dog {\n\t// \tdump(b.speak()) // error: unknown method or field: Dog.speak\n\t// }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Thread Handles in V\nDESCRIPTION: Shows how to use thread handles in V to wait for a spawned thread to finish and retrieve its return value.\nSOURCE: https://github.com/vlang/v/blob/master/doc/docs.md#2025-04-21_snippet_124\n\nLANGUAGE: v\nCODE:\n```\nimport math { sqrt }\n\nfn get_hypot(a f64, b f64) f64 { //       ordinary function returning a value\n\tc := sqrt(a * a + b * b)\n\treturn c\n}\n\nfn main() {\n\tg := spawn get_hypot(54.06, 2.08) // spawn thread and get handle to it\n\th1 := get_hypot(2.32, 16.74) //   do some other calculation here\n\th2 := g.wait() //                 get result from spawned thread\n\tprintln('Results: ${h1}, ${h2}') //   prints `Results: 16.9, 54.1`\n}\n```\n\n----------------------------------------\n\nTITLE: Database Integration with VWeb Controllers\nDESCRIPTION: Shows how to integrate SQLite database with vweb controllers using the vweb_global attribute. Demonstrates proper database connection sharing between multiple controllers.\nSOURCE: https://github.com/vlang/v/blob/master/vlib/vweb/README.md#2025-04-21_snippet_29\n\nLANGUAGE: v\nCODE:\n```\nmodule main\n\nimport vweb\nimport db.sqlite\n\nstruct App {\n\tvweb.Context\n\tvweb.Controller\nmut:\n\tdb sqlite.DB\n}\n\nstruct Admin {\n\tvweb.Context\nmut:\n\tdb sqlite.DB\n}\n\nfn main() {\n\tmut db := sqlite.connect('db')!\n\n\tmut app := &App{\n\t\tdb:          db\n\t\tcontrollers: [\n\t\t\tvweb.controller('/admin', &Admin{\n\t\t\t\tdb: db\n\t\t\t}),\n\t\t]\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Reading Specific Columns from a CSV File in V Language\nDESCRIPTION: This example illustrates how to efficiently read specific columns from a CSV file by directly accessing cell data, rather than reading entire rows and extracting necessary information.\nSOURCE: https://github.com/vlang/v/blob/master/vlib/encoding/csv/README_csv_reader.md#2025-04-21_snippet_8\n\nLANGUAGE: v\nCODE:\n```\nimport encoding.csv\n\nfn main() {\n\tfile_path := 'big2.csv';\n\tmut csvr := csv.csv_reader(\n\t\tfile_path:    file_path                     // path to the file CSV\n\t\tmem_buf_size: 1024 * 1024 * 64              // we set 64MByte of buffer for this file\n\t\tend_line_len: csv.endline_crlf_len // we are using a windows text file\n\t)!;\n\t// The data will be saved in this array\n\tmut data := [][]string{len: csvr.csv_map.len};\n\tfor row_index in 1 .. csvr.csv_map.len {\n\t\t// get single cells\n\t\tdata[row_index] << csvr.get_cell(x: 2, y: row_index)!;\n\t\tdata[row_index] << csvr.get_cell(x: 3, y: row_index)!;\n\t}\n\n\tcsvr.dispose_csv_reader();\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Database Table Using QueryBuilder in V\nDESCRIPTION: This code snippet demonstrates creating a database table using the `create` method of the `QueryBuilder`. The table schema is based on the struct passed to the `new_query` function.\nSOURCE: https://github.com/vlang/v/blob/master/vlib/orm/README.md#2025-04-21_snippet_13\n\nLANGUAGE: v\nCODE:\n```\nqb.create()!\n```\n\n----------------------------------------\n\nTITLE: Creating and Dropping Tables Using Structs in V\nDESCRIPTION: This code snippet demonstrates how to create and drop database tables in V based on struct definitions within a `sql` block.  It creates a table for `models.Foo` and drops the table `Bar`.\nSOURCE: https://github.com/vlang/v/blob/master/vlib/orm/README.md#2025-04-21_snippet_4\n\nLANGUAGE: v\nCODE:\n```\nimport models.Foo\n\nstruct Bar {\n    id int @[primary; sql: serial]\n}\n\nsql db {\n    create table models.Foo\n    drop table Bar\n}!\n```\n\n----------------------------------------\n\nTITLE: Using Dynamic Template Manager with Vweb\nDESCRIPTION: This snippet shows how to integrate the Dynamic Template Manager (DTM) with a Vweb application. It initializes the DTM with cache configuration and defines an application structure that processes requests to render an HTML response using dynamic content inserted into a template.\nSOURCE: https://github.com/vlang/v/blob/master/vlib/x/templating/dtm/README.md#2025-04-21_snippet_1\n\nLANGUAGE: v\nCODE:\n```\nimport veb\nimport x.templating.dtm\nimport os\n\npub struct App {\npub mut:\n\tdtmi &dtm.DynamicTemplateManager = unsafe { nil }\n}\n\npub struct Context {\n\tveb.Context\n}\n\nfn main() {\n\tcache_folder_path := os.join_path(os.dir(os.executable()), 'vcache_dtm')\n\tmut app := &App{\n\t\tdtmi: dtm.initialize(def_cache_path: cache_folder_path)\n\t}\n\t// No need to add this 'defer' if you have chosen to disable the cache system in the options.\n\tdefer {\n\t\tapp.dtmi.stop_cache_handler()\n\t}\n\n\t/*\n    Here is an example of init configuration :\n\ndtm.initialize(\n      def_cache_path: cache_folder_path\n\tcompress_html: false\n\tactive_cache_server: false\n\tmax_size_data_in_mem: 100\n    )\n\t*/\n\n\tveb.run[App, Context](mut app, 18081)\n}\n\n@['/']\npub fn (mut app App) index(mut ctx Context) veb.Result {\n\tmut tmpl_var := map[string]dtm.DtmMultiTypeMap{}\n\ttmpl_var['title'] = 'The true title'\n\thtml_content := app.dtmi.expand('index.html', placeholders: &tmpl_var)\n\treturn ctx.html(html_content)\n}\n```\n\n----------------------------------------\n\nTITLE: Compile-time Reflection on Struct Fields in V\nDESCRIPTION: This snippet shows how to use compile-time reflection to iterate over struct fields and check their types using the $for construct.\nSOURCE: https://github.com/vlang/v/blob/master/doc/docs.md#2025-04-21_snippet_162\n\nLANGUAGE: v\nCODE:\n```\nstruct User {\n\tname string\n\tage  int\n}\n\nfn main() {\n\t$for field in User.fields {\n\t\t$if field.typ is string {\n\t\t\tprintln('${field.name} is of type string')\n\t\t}\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Hot Code Reloading in V\nDESCRIPTION: Shows how to create a program with hot code reloading functionality using the @[live] attribute, allowing modifications to functions while the program is running.\nSOURCE: https://github.com/vlang/v/blob/master/doc/docs.md#2025-04-21_snippet_204\n\nLANGUAGE: v\nCODE:\n```\nmodule main\n\nimport time\n\n@[live]\nfn print_message() {\n\tprintln('Hello! Modify this message while the program is running.')\n}\n\nfn main() {\n\tfor {\n\t\tprint_message()\n\t\ttime.sleep(500 * time.millisecond)\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Conditional Compilation with Custom Flags in V\nDESCRIPTION: Demonstrates conditional compilation using custom flags in V. The example shows how to use the @[if] attribute to conditionally compile functions based on custom flags passed during compilation.\nSOURCE: https://github.com/vlang/v/blob/master/doc/docs.md#2025-04-21_snippet_156\n\nLANGUAGE: v\nCODE:\n```\n@[if trace_logs ?]\nfn elog(s string) {\n\teprintln(s)\n}\n\nfn main() {\n\telog('some expression: ${2 + 2}') // such calls will not be done *at all*, if `-d trace_logs` is not passed\n\tprintln('hi')\n\telog('finish')\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Tables Using Structs in V\nDESCRIPTION: This code snippet demonstrates how to create database tables in V based on struct definitions within a `sql` block.  It creates tables for `models.Foo` and `Bar`.\nSOURCE: https://github.com/vlang/v/blob/master/vlib/orm/README.md#2025-04-21_snippet_3\n\nLANGUAGE: v\nCODE:\n```\nimport models.Foo\n\nstruct Bar {\n    id int @[primary; sql: serial]\n}\n\nsql db {\n    create table models.Foo\n    create table Bar\n}!\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Replace Function in V\nDESCRIPTION: This snippet defines a custom replace function using the V programming language. It demonstrates how to use a callback function with the regex module to perform tailored text replacements. The function requires a regex match object and accepts a source text along with match indices, returning a formatted replacement string. The snippet also demonstrates replacing parts of a sample text based on a regex pattern.\nSOURCE: https://github.com/vlang/v/blob/master/vlib/regex/README.md#2025-04-21_snippet_6\n\nLANGUAGE: v\nCODE:\n```\n// type of function used for custom replace\n// in_txt  source text\n// start   index of the start of the match in in_txt\n// end     index of the end   of the match in in_txt\n// --- the match is in in_txt[start..end] ---\nfn (re RE, in_txt string, start int, end int) string\n```\n\nLANGUAGE: v\nCODE:\n```\nimport regex\n\n// customized replace functions\n// it will be called on each non overlapped find\n\nfn my_repl(re regex.RE, in_txt string, start int, end int) string {\n\tg0 := re.get_group_by_id(in_txt, 0)\n\tg1 := re.get_group_by_id(in_txt, 1)\n\tg2 := re.get_group_by_id(in_txt, 2)\n\treturn '*${g0}*${g1}*${g2}*'\n}\n\nfn main() {\n\ttxt := 'today [John] is gone to his house with (Jack) and [Marie].'\n\tquery := r'(.)(\\A\\w+)(.)'\n\n\tmut re := regex.regex_opt(query) or { panic(err) }\n\n\tresult := re.replace_by_fn(txt, my_repl)\n\tprintln(result)\n}\n```\n\n----------------------------------------\n\nTITLE: Inserting Multiple Records Using QueryBuilder in V\nDESCRIPTION: This code snippet shows how to insert multiple records into a database table using the `insert_many` method of the `QueryBuilder`. The `users` variable is assumed to be an array of `User` structs.\nSOURCE: https://github.com/vlang/v/blob/master/vlib/orm/README.md#2025-04-21_snippet_14\n\nLANGUAGE: v\nCODE:\n```\nqb.insert_many(users)!\n```\n\n----------------------------------------\n\nTITLE: String Matching Example with Groups in V\nDESCRIPTION: Demonstrates basic string matching using regex groups in V. It provides an example of using named capturing groups to extract patterns from a URL. The snippet shows how to initialize a regex pattern, match a string, and retrieve matched groups by index and name using the regex module.\nSOURCE: https://github.com/vlang/v/blob/master/vlib/regex/README.md#2025-04-21_snippet_8\n\nLANGUAGE: v\nCODE:\n```\nimport regex\n\nfn main() {\n\ttxt := 'http://www.ciao.mondo/hello/pippo12_/pera.html'\n\tquery := r'(?P<format>https?)|(?P<format>ftps?)://(?P<token>[\\w_]+.)+'\n\n\tmut re := regex.regex_opt(query) or { panic(err) }\n\n\tstart, end := re.match_string(txt)\n\tif start >= 0 {\n\t\tprintln('Match (${start}, ${end}) => [${txt[start..end]}]')\n\t\tfor g_index := 0; g_index < re.group_count; g_index++ {\n\t\t\tprintln('#${g_index} [${re.get_group_by_id(txt, g_index)}] \\\n\t\t\t\tbounds: ${re.get_group_bounds_by_id(g_index)}')\n\t\t}\n\t\tfor name in re.group_map.keys() {\n\t\t\tprintln(\"group:'${name}' \\t=> [${re.get_group_by_name(txt, name)}] \\\n\t\t\t\tbounds: ${re.get_group_bounds_by_name(name)}\")\n\t\t}\n\t} else {\n\t\tprintln('No Match')\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Encoding and Decoding ASN.1 Data in V\nDESCRIPTION: This code snippet demonstrates how to use the V Language ASN.1 module to encode integers into ASN.1 DER format and decode them back. It uses functions from the `x.encoding.asn1` package to encode and decode data, showcasing serialization with options. The input to the encoding functions are ASN.1 objects, and the output is a byte array representing the encoded data. The decoded bytes are reconstructed back into ASN.1 objects.\nSOURCE: https://github.com/vlang/v/blob/master/vlib/x/encoding/asn1/README.md#2025-04-21_snippet_0\n\nLANGUAGE: V\nCODE:\n```\nimport x.encoding.asn1\n\nfn main() {\n\tvalue := asn1.Integer.from_int(32)\n\n\toutput := asn1.encode(value)!\n\tassert output == [u8(0x02), 0x01, 0x20]\n\n\t// you can encode (serialize) with string options\n\toutput2 := asn1.encode_with_options(value, 'context_specific:5;explicit;inner:2')!\n\tassert output2 == [u8(0xa5), 0x03, 0x02, 0x01, 0x20]\n\n\t// You can decode (deserialize) back the bytes into Element.\n\tel := asn1.decode_with_options([u8(0xa5), 0x03, 0x02, 0x01, 0x20], 'context_specific:5;explicit;inner:2')!\n\n\t// el is an Element, turn it into underlying object\n\tint_el := el.into_object[asn1.Integer]()!\n\n\tint_el_value := int_el.as_i64()!\n\tassert int_el_value == 32\n}\n```\n\n----------------------------------------\n\nTITLE: Passing Values with Context in V\nDESCRIPTION: This code demonstrates how to pass a value with a context in V using the 'with_value' function, and how to retrieve that value later. A custom structure 'Value' is used to store data, and the 'context' module manages its association with the context. Key dependencies include the 'context' module. This example highlights value retrieval from the context using a string key.\nSOURCE: https://github.com/vlang/v/blob/master/vlib/context/README.md#2025-04-21_snippet_3\n\nLANGUAGE: V\nCODE:\n```\nimport context\n\nconst not_found_value = &Value{\n\tval: 'key not found'\n}\n\nstruct Value {\n\tval string\n}\n\n// This example demonstrates how a value can be passed to the context\n// and also how to retrieve it if it exists.\nfn main() {\n\tf := fn (ctx context.Context, key context.Key) &Value {\n\t\tif value := ctx.value(key) {\n\t\t\tmatch value {\n\t\t\t\tValue {\n\t\t\t\t\treturn value\n\t\t\t\t}\n\t\t\t\telse {}\n\t\t\t}\n\t\t}\n\t\treturn not_found_value\n\t}\n\n\tkey := 'language'\n\tvalue := &Value{\n\t\tval: 'VAL'\n\t}\n\tctx := context.with_value(context.background(), key, value)\n\n\tassert value == dump(f(ctx, key))\n\tassert not_found_value == dump(f(ctx, 'color'))\n}\n\n```\n\n----------------------------------------\n\nTITLE: Slice Independence Based on Parent Array Capacity in V\nDESCRIPTION: Demonstrates how appending to a parent array may affect or not affect child slices based on capacity and reallocation.\nSOURCE: https://github.com/vlang/v/blob/master/doc/docs.md#2025-04-21_snippet_35\n\nLANGUAGE: v\nCODE:\n```\nmut a := []int{len: 5, cap: 6, init: 2}\nmut b := unsafe { a[1..4] } // the contents of `b` uses part of the same memory, that is used by `a` too\n\na << 3\n// still no reallocation of `a`, since `a.len` still fits in `a.cap`\nb[2] = 13 // `a[3]` is modified, through the slice `b`.\n\na << 4\n// the content of `a` has been reallocated now, and is independent from `b` (`cap` was exceeded by `len`)\nb[1] = 3 // no change in `a`\n\nprintln(a) // `[2, 2, 2, 13, 2, 3, 4]`\nprintln(b) // `[2, 3, 13]`\n```\n\n----------------------------------------\n\nTITLE: Restrict Domain Name Access in CSRF Configuration\nDESCRIPTION: This V code snippet shows how to configure CSRF protection to restrict requests to specific domain names. Any incoming request from a domain not listed under allowed_hosts, such as subdomains, will be blocked, preventing unauthorized domain access within middleware CSRF settings.\nSOURCE: https://github.com/vlang/v/blob/master/vlib/vweb/csrf/README.md#2025-04-21_snippet_6\n\nLANGUAGE: v\nCODE:\n```\nconfig := csrf.CsrfConfig{\n    secret: '...'\n    allowed_hosts: ['example.com']\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Host-Based Controllers in VWeb\nDESCRIPTION: Demonstrates how to set up host-based routing in vweb where different controllers handle requests based on the domain name. Shows configuration of multiple controllers with specific host bindings.\nSOURCE: https://github.com/vlang/v/blob/master/vlib/vweb/README.md#2025-04-21_snippet_28\n\nLANGUAGE: v\nCODE:\n```\nmodule main\n\nimport vweb\n\nstruct App {\n\tvweb.Context\n\tvweb.Controller\n}\n\npub fn (mut app App) index() vweb.Result {\n\treturn app.text('App')\n}\n\nstruct Example {\n\tvweb.Context\n}\n\n// You can only access this route at example.com: http://example.com/\npub fn (mut app Example) index() vweb.Result {\n\treturn app.text('Example')\n}\n\nfn main() {\n\tvweb.run(&App{\n\t\tcontrollers: [\n\t\t\tvweb.controller_host('example.com', '/', &Example{}),\n\t\t]\n\t}, 8080)\n}\n```\n\n----------------------------------------\n\nTITLE: Writing V Route for SQLite Memory Benchmark\nDESCRIPTION: This V function defines a route to execute benchmarks by inserting, selecting, and updating tasks in a SQLite in-memory database. It returns a JSON response with benchmark results. SQLite and the vweb module are required.\nSOURCE: https://github.com/vlang/v/blob/master/examples/js_dom_draw_benchmark_chart/README.md#2025-04-21_snippet_4\n\nLANGUAGE: v\nCODE:\n```\n@['/sqlite-memory/:count']\\npub fn (mut app App) sqlite_memory(count int) vweb.Result {\\n\\tmut insert_stopwatchs := []int{}\\n\\tmut select_stopwatchs := []int{}\\n\\tmut update_stopwatchs := []int{}\\n\\n\\tmut sw := time.new_stopwatch()\\n\\n\\tmut db := sqlite.connect(':memory:') or { panic(err) }\\n\\n\\tsql db {\\n\\t\\tcreate table Task\\n\\t}!\\n\\n\\ttask_model := Task{\\n\\t\\ttitle: 'a'\\n\\t\\tstatus: 'done'\\n\\t}\\n\\n\\tfor i := 0; i < count; i++ {\\n\\t\\tsw.start()\\n\\t\\tsql db {\\n\\t\\t\\tinsert task_model into Task\\n\\t\\t} or { []Task{} }\\n\\t\\tsw.stop()\\n\\t\\tinsert_stopwatchs << int(sw.end - sw.start)\\n\\t}\\n\\n\\tsql db {\\n\\t\\tdrop table Task\\n\\t}!\\n\\n\\tresponse := Response{\\n\\t\\tinsert: insert_stopwatchs\\n\\t\\t@select: select_stopwatchs\\n\\t\\tupdate: update_stopwatchs\\n\\t}\\n\\treturn app.json(response)\\n}\n```\n\n----------------------------------------\n\nTITLE: Parsing Time Strings in V\nDESCRIPTION: Demonstrates parsing a time string into a Time object, with error handling. Shows how to convert a string representation to a parsable time instance and extract Unix timestamp.\nSOURCE: https://github.com/vlang/v/blob/master/vlib/time/README.md#2025-04-21_snippet_2\n\nLANGUAGE: v\nCODE:\n```\nimport time\n\ns := '2018-01-27 12:48:34'\nt := time.parse(s) or { panic('failing format: ${s} | err: ${err}') }\nprintln(t)\nprintln(t.unix())\n```\n\n----------------------------------------\n\nTITLE: Creating Multidimensional Arrays in V\nDESCRIPTION: This snippet provides examples of creating and manipulating two-dimensional and three-dimensional arrays in V, demonstrating nested array initialization and indexing.\nSOURCE: https://github.com/vlang/v/blob/master/doc/docs.md#2025-04-21_snippet_27\n\nLANGUAGE: v\nCODE:\n```\nmut a := [][]int{len: 2, init: []int{len: 3}}\na[0][1] = 2\nprintln(a) // [[0, 2, 0], [0, 0, 0]]\n```\n\nLANGUAGE: v\nCODE:\n```\nmut a := [][][]int{len: 2, init: [][]int{len: 3, init: []int{len: 2}}}\na[0][1][1] = 2\nprintln(a) // [[[0, 0], [0, 2], [0, 0]], [[0, 0], [0, 0], [0, 0]]]\n```\n\n----------------------------------------\n\nTITLE: Returning Multiple Values from a Function in V\nDESCRIPTION: This snippet demonstrates a function that returns multiple values and showcases how to use them in the main function. It includes an example of ignoring returned values using the '_' symbol.\nSOURCE: https://github.com/vlang/v/blob/master/doc/docs.md#2025-04-21_snippet_5\n\nLANGUAGE: v\nCODE:\n```\nfn foo() (int, int) {\n\treturn 2, 3\n}\n\na, b := foo()\nprintln(a) // 2\nprintln(b) // 3\nc, _ := foo() // ignore values using '_'\n\n```\n\n----------------------------------------\n\nTITLE: Declaring Concurrent Variables in V\nDESCRIPTION: Demonstrates the four ways to declare variables for concurrent use in V: constant, mutable, shared, and atomic. Each type has different rules for how it can be accessed across coroutines.\nSOURCE: https://github.com/vlang/v/blob/master/doc/upcoming.md#2025-04-21_snippet_0\n\nLANGUAGE: v\nCODE:\n```\na := ...\nmut b := ...\nshared c := ...\natomic d := ...\n```\n\n----------------------------------------\n\nTITLE: Working with Nested Maps in V\nDESCRIPTION: Demonstrates creating and using nested maps, where values are themselves maps, allowing for hierarchical data structures.\nSOURCE: https://github.com/vlang/v/blob/master/doc/docs.md#2025-04-21_snippet_47\n\nLANGUAGE: v\nCODE:\n```\nmut m := map[string]map[string]int{}\nm['greet'] = {\n\t'Hello': 1\n}\nm['place'] = {\n\t'world': 2\n}\nm['code']['orange'] = 123\nprint(m)\n```\n\n----------------------------------------\n\nTITLE: Creating Wildcard Routes in V\nDESCRIPTION: This snippet illustrates how to handle multiple parameters or wildcard routes in V endpoints. It shows how to capture dynamic portions of a URL and respond accordingly.\nSOURCE: https://github.com/vlang/v/blob/master/vlib/veb/README.md#2025-04-21_snippet_4\n\nLANGUAGE: v\nCODE:\n```\n@['/:path...']\npub fn (app &App) wildcard(mut ctx Context, path string) veb.Result {\n\treturn ctx.text('URL path = \"${path}\"')\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting Records Using QueryBuilder in V\nDESCRIPTION: This code snippet demonstrates how to delete records from a database table using the `delete` method of the `QueryBuilder`. It uses the `where` method to specify the deletion criteria.\nSOURCE: https://github.com/vlang/v/blob/master/vlib/orm/README.md#2025-04-21_snippet_15\n\nLANGUAGE: v\nCODE:\n```\nqb.where('name = ?','John')!.delete()!\n```\n\n----------------------------------------\n\nTITLE: JSON API Endpoint\nDESCRIPTION: Example of creating a JSON API endpoint for articles\nSOURCE: https://github.com/vlang/v/blob/master/tutorials/building_a_simple_web_blog_with_veb/README.md#2025-04-21_snippet_7\n\nLANGUAGE: v\nCODE:\n```\nimport veb\n\n@['/articles'; get]\npub fn (mut app App) articles() veb.Result {\n\tarticles := app.find_all_articles()\n\treturn app.json(articles)\n}\n```\n\n----------------------------------------\n\nTITLE: Generating WebAssembly Module in V\nDESCRIPTION: This code snippet demonstrates how to use the `wasm` module to create a simple WebAssembly module that defines an `add` function. The function takes two i32 parameters, adds them together, and returns the result. The generated module is then compiled into a byte array and written to a file named `add.wasm`.\nSOURCE: https://github.com/vlang/v/blob/master/vlib/wasm/README.md#2025-04-21_snippet_0\n\nLANGUAGE: v\nCODE:\n```\nimport wasm\nimport os\n\nfn main() {\n\tmut m := wasm.Module{}\n\tmut func := m.new_function('add', [.i32_t, .i32_t], [.i32_t])\n\t{\n\t\tfunc.local_get(0) // | local.get 0\n\t\tfunc.local_get(1) // | local.get 1\n\t\tfunc.add(.i32_t) // | i32.add\n\t}\n\tm.commit(func, true) // `export: true`\n\n\tmod := m.compile() // []u8\n\n\tos.write_file_array('add.wasm', mod)!\n}\n```\n\n----------------------------------------\n\nTITLE: Generic Comparison Function in V\nDESCRIPTION: Shows how to create a generic comparison function in V that works with different types such as integers, strings, and floating-point numbers.\nSOURCE: https://github.com/vlang/v/blob/master/doc/docs.md#2025-04-21_snippet_122\n\nLANGUAGE: v\nCODE:\n```\nfn compare[T](a T, b T) int {\n\tif a < b {\n\t\treturn -1\n\t}\n\tif a > b {\n\t\treturn 1\n\t}\n\treturn 0\n}\n\n// compare[int]\nprintln(compare(1, 0)) // Outputs: 1\nprintln(compare(1, 1)) //          0\nprintln(compare(1, 2)) //         -1\n// compare[string]\nprintln(compare('1', '0')) // Outputs: 1\nprintln(compare('1', '1')) //          0\nprintln(compare('1', '2')) //         -1\n// compare[f64]\nprintln(compare(1.1, 1.0)) // Outputs: 1\nprintln(compare(1.1, 1.1)) //          0\nprintln(compare(1.1, 1.2)) //         -1\n```\n\n----------------------------------------\n\nTITLE: Initializing ChaCha20 Cipher in V\nDESCRIPTION: This snippet demonstrates how to initialize a ChaCha20 cipher with a 64-bit counter using a 32-byte key and an 8-byte nonce. It highlights the use of the `rand` module to generate random information, which is critical for maintaining encryption security. The primary focus is on setting up the encryption context using the new cipher initialization function.\nSOURCE: https://github.com/vlang/v/blob/master/vlib/x/crypto/chacha20/README.md#2025-04-21_snippet_0\n\nLANGUAGE: v\nCODE:\n```\nimport crypto.rand\nimport x.crypto.chacha20\n\nfn main() {\n\t// Simplified examples to create cipher's with 64-bit counter\n\tkey := rand.read(32)!\n\tnonce := rand.read(8)!\n\t// just pass 32-bytes key and 8-bytes nonce to build cipher with 64-bit counter\n\tmut c := chacha20.new_cipher(key, nonce)!\n\t// do with yours cipher\n}\n```\n\n----------------------------------------\n\nTITLE: String Memory Management in V Functions\nDESCRIPTION: Shows how strings are managed in V functions with automatic cleanup. Strings that don't escape the function scope are cleaned up when the function exits, and small strings can be pre-allocated with the -prealloc flag.\nSOURCE: https://github.com/vlang/v/blob/master/doc/docs.md#2025-04-21_snippet_135\n\nLANGUAGE: v\nCODE:\n```\nimport strings\n\nfn draw_text(s string, x int, y int) {\n\t// ...\n}\n\nfn draw_scene() {\n\t// ...\n\tname1 := 'abc'\n\tname2 := 'def ghi'\n\tdraw_text('hello ${name1}', 10, 10)\n\tdraw_text('hello ${name2}', 100, 10)\n\tdraw_text(strings.repeat(`X`, 10000), 10, 50)\n\t// ...\n}\n```\n\n----------------------------------------\n\nTITLE: Parsing a Text in V\nDESCRIPTION: This snippet demonstrates how to parse text that is not saved on disk using the 'parser.parse_text' function from the V parser module. It requires a reference to a table, preferences, and a scope.\nSOURCE: https://github.com/vlang/v/blob/master/vlib/v/README.md#2025-04-21_snippet_0\n\nLANGUAGE: v\nCODE:\n```\nimport v.parser\n\ncode := ''\n// table, pref and scope needs to be passed as reference\nparsed_file := parser.parse_text(code, table, .parse_comments, &pref, &scope)\n```\n\n----------------------------------------\n\nTITLE: Locking Shared Variables in V\nDESCRIPTION: Shows how to use lock and rlock blocks to safely access shared variables in V. This prevents data races by ensuring exclusive access during critical sections.\nSOURCE: https://github.com/vlang/v/blob/master/doc/upcoming.md#2025-04-21_snippet_1\n\nLANGUAGE: v\nCODE:\n```\nlock c {\n    // read, modify, write c\n    ...\n}\n```\n\nLANGUAGE: v\nCODE:\n```\nrlock c {\n    // read c\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Controllers for Route Namespacing in Vweb\nDESCRIPTION: Example demonstrating how to use controllers to organize routes by namespace, allowing different structs to handle different URL prefixes.\nSOURCE: https://github.com/vlang/v/blob/master/vlib/vweb/README.md#2025-04-21_snippet_27\n\nLANGUAGE: v\nCODE:\n```\nmodule main\n\nimport vweb\n\nstruct App {\n\tvweb.Context\n\tvweb.Controller\n}\n\nstruct Admin {\n\tvweb.Context\n}\n\nstruct Foo {\n\tvweb.Context\n}\n\nfn main() {\n\tmut app := &App{\n\t\tcontrollers: [\n\t\t\tvweb.controller('/admin', &Admin{}),\n\t\t\tvweb.controller('/foo', &Foo{}),\n\t\t]\n\t}\n\tvweb.run(app, 8080)\n}\n```\n\n----------------------------------------\n\nTITLE: vweb Wildcard Route Parameter\nDESCRIPTION: This example demonstrates how to define a wildcard route in vweb using `...` after the parameter name.  This allows matching any route after a specified path.\nSOURCE: https://github.com/vlang/v/blob/master/vlib/vweb/README.md#2025-04-21_snippet_10\n\nLANGUAGE: v\nCODE:\n```\n        vvv\n@['/:path...']             vvvv\nfn (mut app App) wildcard(path string) vweb.Result {\n\treturn app.text('URL path = \"${path}\"')\n}\n```\n\n----------------------------------------\n\nTITLE: Advanced Session Management with Custom Store\nDESCRIPTION: For advanced usage, a snippet illustrates creating a custom session store through the implementation of a Store interface. It demonstrates capabilities like get, set, and destroy, allowing tailored session management strategies.\nSOURCE: https://github.com/vlang/v/blob/master/vlib/x/sessions/README.md#2025-04-21_snippet_8\n\nLANGUAGE: v\nCODE:\n```\npub interface Store[T] {\nmut:\n    // get the current session data if the id exists and if it's not expired.\n    // If the session is expired, any associated data should be destroyed.\n    // If `max_age=0` the store will not check for expiration of the session.\n    get(sid string, max_age time.Duration) !T\n    // destroy session data for `sid`\n    destroy(sid string) !\n    // set session data for `sid`\n    set(sid string, val T) !\n}\n\n// get data from all sessions, optional to implement\npub fn (mut s Store) all[T]() ![]T {\n    return []T{}\n}\n\n// clear all session data, optional to implement\npub fn (mut s Store) clear[T]() ! {}\n\n```\n\n----------------------------------------\n\nTITLE: Key Presence Check with Value Access in V\nDESCRIPTION: Demonstrates how to check if a key exists in a map and get its value in one operation using an if statement with assignment.\nSOURCE: https://github.com/vlang/v/blob/master/doc/docs.md#2025-04-21_snippet_45\n\nLANGUAGE: v\nCODE:\n```\nm := {\n\t'abc': 'def'\n}\nif v := m['abc'] {\n\tprintln('the map value for that key is: ${v}')\n}\n```\n\n----------------------------------------\n\nTITLE: Session Data Update via Query Parameters\nDESCRIPTION: This code snippet demonstrates checking for an existing session and updating the user's name through query parameters. Error handling is addressed for missing parameters and unsuccessful updates. It leverages veb for handling HTTP requests and responses.\nSOURCE: https://github.com/vlang/v/blob/master/vlib/x/sessions/README.md#2025-04-21_snippet_5\n\nLANGUAGE: v\nCODE:\n```\npub fn (mut app App) save(mut ctx Context) veb.Result {\n    // check if there is a session\n    app.sessions.get(ctx) or { return ctx.request_error('You are not logged in :(') }\n\n    if name := ctx.query['name'] {\n        // update the current user\n        app.sessions.save(mut ctx, User{\n            name: name\n        }) or { return ctx.server_error('could not save session data, please try again') }\n        return ctx.redirect('/', typ: .see_other)\n    } else {\n        // send HTTP 400 error\n        return ctx.request_error('query parameter \"name\" must be present!')\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: HTML Form for CSRF Protection with Middleware\nDESCRIPTION: This HTML snippet builds a form with CSRF protection by including a hidden input field for a CSRF token obtained through configured middleware in a V application. This approach helps ensure that post requests are protected against CSRF attacks.\nSOURCE: https://github.com/vlang/v/blob/master/vlib/vweb/csrf/README.md#2025-04-21_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<form action=\"/auth\" method=\"post\">\n    <input type=\"hidden\" name=\"@csrf_config.token_name\" value=\"@csrftoken\"/>\n    <label for=\"password\">Your password:</label>\n    <input type=\"text\" id=\"password\" name=\"password\" placeholder=\"Your password\" />\n</form>\n```\n\n----------------------------------------\n\nTITLE: Defining Function Types in V\nDESCRIPTION: Shows how to define and use function types using type aliases. Function types allow functions to be passed as arguments to other functions, with duck-typing for compatibility.\nSOURCE: https://github.com/vlang/v/blob/master/doc/docs.md#2025-04-21_snippet_99\n\nLANGUAGE: v\nCODE:\n```\ntype Filter = fn (string) string\n\nfn filter(s string, f Filter) string {\n\treturn f(s)\n}\n```\n\n----------------------------------------\n\nTITLE: Using Named Capturing Groups in V\nDESCRIPTION: This snippet illustrates the use of named capturing groups using the V regex module, allowing groups to be identified with names. Captured group names are stored in a `group_map` that maps from the group name to its index. The snippet demonstrates how to match strings using named capturing groups and access the captured content and its bounds using their names.\nSOURCE: https://github.com/vlang/v/blob/master/vlib/regex/README.md#2025-04-21_snippet_4\n\nLANGUAGE: v\nCODE:\n```\nimport regex\n\nfn main() {\n\ttxt := 'http://www.ciao.mondo/hello/pippo12_/pera.html'\n\tquery := r'(?P<format>https?)|(?P<format>ftps?)://(?P<token>[\\w_]+.)+'\n\n\tmut re := regex.regex_opt(query) or { panic(err) }\n\t// println(re.get_code())   // uncomment to see the print of the regex execution code\n\tre.debug = 2 // enable maximum log\n\tprintln('String: ${txt}')\n\tprintln('Query : ${re.get_query()}')\n\tre.debug = 0 // disable log\n\tstart, end := re.match_string(txt)\n\tif start >= 0 {\n\t\tprintln('Match (${start}, ${end}) => [${txt[start..end]}]')\n\t} else {\n\t\tprintln('No Match')\n\t}\n\n\tfor name in re.group_map.keys() {\n\t\tprintln(\"group:'${name}' \\t=> [${re.get_group_by_name(txt, name)}] \\tbounds: ${re.get_group_bounds_by_name(name)}\")\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Converting Colors Using Named Groups in V\nDESCRIPTION: This example showcases a more complex usage of named capturing groups for converting HTML colors to RGB notation in V. It involves constructing a regex pattern with named groups for 'red', 'green', and 'blue', extracting their hex values, and outputting the combined RGB value. The color components can be one or two hex digits long, determined dynamically by string length.\nSOURCE: https://github.com/vlang/v/blob/master/vlib/regex/README.md#2025-04-21_snippet_5\n\nLANGUAGE: v\nCODE:\n```\n// This function demonstrate the use of the named groups\nfn convert_html_rgb_n(in_col string) u32 {\n\tmut n_digit := if in_col.len == 4 { 1 } else { 2 }\n\tmut col_mul := if in_col.len == 4 { 4 } else { 0 }\n\tquery := '#(?P<red>[a-fA-F0-9]{${n_digit}})' + '(?P<green>[a-fA-F0-9]{${n_digit}})' +\n\t\t'(?P<blue>[a-fA-F0-9]{${n_digit}})'\n\tmut re := regex.regex_opt(query) or { panic(err) }\n\tstart, end := re.match_string(in_col)\n\tprintln('start: ${start}, end: ${end}')\n\tmut res := u32(0)\n\tif start >= 0 {\n\t\tred_s, red_e := re.get_group_by_name('red')\n\t\tr := ('0x' + in_col[red_s..red_e]).int() << col_mul\n\t\tgreen_s, green_e := re.get_group_by_name('green')\n\t\tg := ('0x' + in_col[green_s..green_e]).int() << col_mul\n\t\tblue_s, blue_e := re.get_group_by_name('blue')\n\t\tb := ('0x' + in_col[blue_s..blue_e]).int() << col_mul\n\t\tprintln('r: ${r} g: ${g} b: ${b}')\n\t\tres = u32(r) << 16 | u32(g) << 8 | u32(b)\n\t}\n\treturn res\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Authentication Module with PostgreSQL in V\nDESCRIPTION: This snippet initializes an application struct with a PostgreSQL connection and an authentication module. The `App` struct is constructed with the necessary database dependencies while establishing a connection using the `pg` module. `auth.Auth[pg.DB]` is instantiated with the connected database for user authentication processes.\nSOURCE: https://github.com/vlang/v/blob/master/vlib/veb/auth/README.md#2025-04-21_snippet_0\n\nLANGUAGE: v\nCODE:\n```\nimport veb\nimport db.pg\nimport veb.auth\n\npub struct App {\n\tveb.StaticHandler\npub mut:\n\tdb   pg.DB\n\tauth auth.Auth[pg.DB] // or auth.Auth[sqlite.DB] etc\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Free Method in V\nDESCRIPTION: Demonstrates how to define a free() method on custom data types to take advantage of V's autofree engine. This method will be called automatically at the end of each variable's lifetime when autofree is enabled.\nSOURCE: https://github.com/vlang/v/blob/master/doc/docs.md#2025-04-21_snippet_134\n\nLANGUAGE: v\nCODE:\n```\nstruct MyType {}\n\n@[unsafe]\nfn (data &MyType) free() {\n\t// ...\n}\n```\n\n----------------------------------------\n\nTITLE: Managing Multiple Threads with Arrays in V\nDESCRIPTION: Demonstrates how to manage multiple threads using an array of thread handles in V, including spawning tasks and waiting for all to complete.\nSOURCE: https://github.com/vlang/v/blob/master/doc/docs.md#2025-04-21_snippet_125\n\nLANGUAGE: v\nCODE:\n```\nimport time\n\nfn task(id int, duration int) {\n\tprintln('task ${id} begin')\n\ttime.sleep(duration * time.millisecond)\n\tprintln('task ${id} end')\n}\n\nfn main() {\n\tmut threads := []thread{}\n\tthreads << spawn task(1, 500)\n\tthreads << spawn task(2, 900)\n\tthreads << spawn task(3, 100)\n\tthreads.wait()\n\tprintln('done')\n}\n```\n\n----------------------------------------\n\nTITLE: V Template with Variable Substitution, Loop, and Include\nDESCRIPTION: This V template demonstrates variable substitution using `@name` and `@age`, a loop using `@for number in numbers` to iterate and print each number, and includes another file using `@include 'inner.txt'`. The template expects `name`, `age`, and `numbers` to be defined in the context where the template is processed.\nSOURCE: https://github.com/vlang/v/blob/master/vlib/v/tests/tmpl/base.txt#2025-04-21_snippet_0\n\nLANGUAGE: V\nCODE:\n```\n\"name: @name\nage: @age\nnumbers: @numbers\n\n@for number in numbers\n@number\n@end\n\n@include 'inner.txt'\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Static Variables in V Functions\nDESCRIPTION: An example demonstrating how to use static variables within functions in V. Static variables maintain their values between function calls and are only initialized once.\nSOURCE: https://github.com/vlang/v/blob/master/doc/docs.md#2025-04-21_snippet_187\n\nLANGUAGE: v\nCODE:\n```\n@[unsafe]\nfn counter() int {\n\tmut static x := 42\n\t// Note: x is initialised to 42, just _once_.\n\tx++\n\treturn x\n}\n\nfn f() int {\n\treturn unsafe { counter() }\n}\n\nprintln(f()) // prints 43\nprintln(f()) // prints 44\nprintln(f()) // prints 45\n```\n\n----------------------------------------\n\nTITLE: Generic Struct Initialization in V Language\nDESCRIPTION: This code snippet demonstrates how to initialize a generic struct in the V programming language without explicitly specifying types. It showcases the use of a generic struct template and its initialization process.\nSOURCE: https://github.com/vlang/v/blob/master/changelogs0.x/0.4.md#2025-04-21_snippet_0\n\nLANGUAGE: v\nCODE:\n```\nstruct Foo[T, U] {\n\ta T\n\tb U\n}\n\nfoo := Foo{\n\ta: 2\n\tb: 'x'\n}\n\nprintln(foo)\n```\n\n----------------------------------------\n\nTITLE: Querying Records Using QueryBuilder in V\nDESCRIPTION: This code snippet demonstrates how to query records from a database table using the `select` and `query` methods of the `QueryBuilder`. It retrieves only the `name` field from the `User` table.\nSOURCE: https://github.com/vlang/v/blob/master/vlib/orm/README.md#2025-04-21_snippet_16\n\nLANGUAGE: v\nCODE:\n```\n// Returns []User with only 'name' populated; other fields are zero values.\n\tonly_names := qb.select('name')!.query()!\n```\n\n----------------------------------------\n\nTITLE: Compressing and Decompressing Data using Zlib in V\nDESCRIPTION: Example demonstrating how to compress and decompress string data using the compress.zlib module. The code shows the complete workflow of converting a string to bytes, compressing it, decompressing it, and verifying the result matches the original data.\nSOURCE: https://github.com/vlang/v/blob/master/vlib/compress/zlib/README.md#2025-04-21_snippet_0\n\nLANGUAGE: v\nCODE:\n```\nimport compress.zlib\n\nfn main() {\n\tuncompressed := 'Hello world!'\n\tcompressed := zlib.compress(uncompressed.bytes())!\n\tdecompressed := zlib.decompress(compressed)!\n\tassert decompressed == uncompressed.bytes()\n}\n```\n\n----------------------------------------\n\nTITLE: Converting Binary Files to V Source\nDESCRIPTION: The 'bin2v' command converts a binary file into a V source file, enabling the embedding of binary content within a V module or program. No external dependencies are necessary.\nSOURCE: https://github.com/vlang/v/blob/master/vlib/v/help/other/other.txt#2025-04-21_snippet_2\n\nLANGUAGE: V\nCODE:\n```\nbin2v            Convert a binary file to a v source file,\n                   that can be later embedded in a module or program.\n```\n\n----------------------------------------\n\nTITLE: Generating and Setting CSRF Tokens\nDESCRIPTION: This V lang code snippet shows how to generate an anti-CSRF token and set it as a hidden form input. Demonstrates the use of `ctx.set_csrf_token` and details parameter requirements such as the app context.\nSOURCE: https://github.com/vlang/v/blob/master/vlib/veb/csrf/README.md#2025-04-21_snippet_3\n\nLANGUAGE: v\nCODE:\n```\nfn (app &App) index(mut ctx) veb.Result {\n\t// this function will set a cookie header and generate a CSRF token\n\tctx.set_csrf_token(mut ctx)\n\treturn $veb.html()\n}\n\n@[post]\nfn (app &App) login(mut ctx, password string) veb.Result {\n\t// implement your own password validation here\n\tif password == 'password' {\n\t\treturn ctx.text('You are logged in!')\n\t} else {\n\t\treturn ctx.text('Invalid password!')\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Mounting Static Folder at Custom Path in Veb (V)\nDESCRIPTION: Shows how to mount a static folder at a custom path in a Veb application. This allows serving static files from a specific URL prefix.\nSOURCE: https://github.com/vlang/v/blob/master/vlib/veb/README.md#2025-04-21_snippet_11\n\nLANGUAGE: v\nCODE:\n```\napp.mount_static_folder_at('static', '/public')\n```\n\n----------------------------------------\n\nTITLE: Implementing Methods on Enums in V\nDESCRIPTION: Shows how enums can have methods similar to structs. The example implements a 'next' method on a Cycle enum that cycles through the enum values in sequence.\nSOURCE: https://github.com/vlang/v/blob/master/doc/docs.md#2025-04-21_snippet_97\n\nLANGUAGE: v\nCODE:\n```\nenum Cycle {\n\tone\n\ttwo\n\tthree\n}\n\nfn (c Cycle) next() Cycle {\n\tmatch c {\n\t\t.one {\n\t\t\treturn .two\n\t\t}\n\t\t.two {\n\t\t\treturn .three\n\t\t}\n\t\t.three {\n\t\t\treturn .one\n\t\t}\n\t}\n}\n\nmut c := Cycle.one\nfor _ in 0 .. 10 {\n\tprintln(c)\n\tc = c.next()\n}\n```\n\n----------------------------------------\n\nTITLE: Explicitly Casting Functions to Function Types in V\nDESCRIPTION: Shows how to explicitly cast a function to a function type. Though not required due to duck-typing, explicit casting can improve code readability.\nSOURCE: https://github.com/vlang/v/blob/master/doc/docs.md#2025-04-21_snippet_101\n\nLANGUAGE: v\nCODE:\n```\nmy_filter := Filter(uppercase)\n```\n\n----------------------------------------\n\nTITLE: Comparing and Validating Versions with Semver in V\nDESCRIPTION: This V code snippet demonstrates the use of the 'semver' library to instantiate version objects and perform comparisons. It requires the 'semver' library to be imported. The snippet shows how to parse version strings and check for comparative inequalities and constraint satisfaction. The main function compares versions '1.2.4' and '2.3.4' and evaluates if the versions satisfy specific constraints.\nSOURCE: https://github.com/vlang/v/blob/master/vlib/semver/README.md#2025-04-21_snippet_0\n\nLANGUAGE: V\nCODE:\n```\nimport semver\n\nfn main() {\n\tver1 := semver.from('1.2.4') or {\n\t\tprintln('Invalid version')\n\t\treturn\n\t}\n\tver2 := semver.from('2.3.4') or {\n\t\tprintln('Invalid version')\n\t\treturn\n\t}\n\tprintln(ver1 > ver2)\n\tprintln(ver2 > ver1)\n\tprintln(ver1.satisfies('>=1.1.0 <2.0.0'))\n\tprintln(ver2.satisfies('>=1.1.0 <2.0.0'))\n\tprintln(ver2.satisfies('>=1.1.0 <2.0.0 || >2.2.0'))\n}\n```\n\n----------------------------------------\n\nTITLE: Mutating array arguments in V functions\nDESCRIPTION: Shows how to create a function that modifies an array passed as an argument, using the `mut` keyword both in the function signature and at the call site to explicitly mark the argument as mutable.\nSOURCE: https://github.com/vlang/v/blob/master/doc/docs.md#2025-04-21_snippet_82\n\nLANGUAGE: v\nCODE:\n```\nfn multiply_by_2(mut arr []int) {\n\tfor i in 0 .. arr.len {\n\t\tarr[i] *= 2\n\t}\n}\n\nmut nums := [1, 2, 3]\nmultiply_by_2(mut nums)\nprintln(nums)\n// \"[2, 4, 6]\"\n```\n\n----------------------------------------\n\nTITLE: Initializing and Using EventBus in V - Main Module\nDESCRIPTION: This snippet shows an example of initializing an event bus instance within the main module. It demonstrates subscribing to an error event and defining an error handler, showcasing how the EventBus interacts with different components in the application.\nSOURCE: https://github.com/vlang/v/blob/master/vlib/eventbus/README.md#2025-04-21_snippet_1\n\nLANGUAGE: v oksyntax\nCODE:\n```\nmodule main\n\nimport eventbus\n\n// initialize it globally\nconst eb = eventbus.new[string]()\n\nfn main() {\n\t// get a mutable reference to the subscriber\n\tmut sub := eb.subscriber\n\t// subscribe to the 'error' event\n\tsub.subscribe('error', on_error)\n\t// start the work\n\tdo_work()\n}\n\n// the event handler\nfn on_error(receiver voidptr, e &Error, work &Work) {\n\tprintln('error occurred on ${work.hours}. Error: ${e.message}')\n}\n```\n\n----------------------------------------\n\nTITLE: Live Reload vweb Application\nDESCRIPTION: This command runs the vweb application with live reload enabled.  Any changes to files in the web app will trigger an instant refresh in the browser.\nSOURCE: https://github.com/vlang/v/blob/master/vlib/vweb/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n\"v -d vweb_livereload watch run .\"\n```\n\n----------------------------------------\n\nTITLE: Parsing Flags with FlagParser\nDESCRIPTION: This snippet shows how to use the `FlagParser` for a more function-based approach to flag parsing.  It demonstrates setting application name, version, description, and defining flags with their types and default values. The `finalize` method parses the arguments and returns any additional arguments.\nSOURCE: https://github.com/vlang/v/blob/master/vlib/flag/README.md#2025-04-21_snippet_2\n\nLANGUAGE: v\nCODE:\n```\n```v\nmodule main\n\nimport os\nimport flag\n\nfn main() {\n\tmut fp := flag.new_flag_parser(os.args)\n\tfp.application('flag_example_tool')\n\tfp.version('v0.0.1')\n\tfp.limit_free_args(0, 0)! // comment this, if you expect arbitrary texts after the options\n\tfp.description('This tool is only designed to show how the flag lib is working')\n\tfp.skip_executable()\n\tan_int := fp.int('an_int', 0, 0o123, 'some int to define 0o123 is its default value')\n\ta_bool := fp.bool('a_bool', 0, false, 'some boolean flag. --a_bool will set it to true.')\n\ta_float := fp.float('a_float', 0, 1.0, 'some floating point value, by default 1.0 .')\n\ta_string := fp.string('a_string', `a`, 'no text', 'finally, some text with ' +\n\t\t' `-a` as an abbreviation, so you can pass --a_string abc or just -a abc')\n\tadditional_args := fp.finalize() or {\n\t\teprintln(err)\n\t\tprintln(fp.usage())\n\t\treturn\n\t}\n\tprintln('an_int: ${an_int} | a_bool: ${a_bool} | a_float: ${a_float} | a_string: \"${a_string}\" ')\n\tprintln(additional_args.join_lines())\n}\n```\n```\n\n----------------------------------------\n\nTITLE: WebAssembly Compilation Options for V\nDESCRIPTION: This section describes the command-line options available when compiling V to WebAssembly. It includes options for validation, stack configuration, and importing behavior, providing detailed control over the output module. These options target specific use cases such as debugging or embedded implementation.\nSOURCE: https://github.com/vlang/v/blob/master/vlib/v/help/build/build-wasm.txt#2025-04-21_snippet_1\n\nLANGUAGE: v\nCODE:\n```\n-wasm-validate\n      After compiling the WebAssembly module, execute wasm-validate to validate the module.\n      Useful for debugging the compiler.\n```\n\nLANGUAGE: v\nCODE:\n```\n-wasm-stack-top\n      Overrides the default stack_top value used by the WebAssembly compiler.\n      Useful for some platforms with unusual memory requirements.\n```\n\nLANGUAGE: v\nCODE:\n```\n-d no_imports\n      Removes the default imports from the builtins. Useful for embedded targets where\n      you can't control the imports.\n```\n\nLANGUAGE: v\nCODE:\n```\n-os <browser|wasi>, -target-os <browser|wasi>\n      Change the target WebAssembly execution environment that V compiles for.\n```\n\n----------------------------------------\n\nTITLE: HTML Parsing Example in V\nDESCRIPTION: This code snippet demonstrates how to parse an HTML string using the `net.html` library in V. It shows how to retrieve tags by name, access their content, attributes, and string representation. It depends on the `net.html` module.\nSOURCE: https://github.com/vlang/v/blob/master/vlib/net/html/README.md#2025-04-21_snippet_0\n\nLANGUAGE: v\nCODE:\n```\n```v\nimport net.html\n\nfn main() {\n\tdoc := html.parse('<html><body><h1 class=\"title\">Hello world!</h1></body></html>')\n\ttag := doc.get_tags(name: 'h1')[0] // <h1>Hello world!</h1>\n\tprintln(tag.name) // h1\n\tprintln(tag.content) // Hello world!\n\tprintln(tag.attributes) // {'class':'title'}\n\tprintln(tag.str()) // <h1 class=\"title\">Hello world!</h1>\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring CSRF Settings\nDESCRIPTION: Defines the CSRF configuration settings with a secret and allowed hosts. Requires the `csrf.CsrfConfig` structure and instructions to change these settings in a production environment.\nSOURCE: https://github.com/vlang/v/blob/master/vlib/veb/csrf/README.md#2025-04-21_snippet_1\n\nLANGUAGE: v\nCODE:\n```\nconst csrf_config := csrf.CsrfConfig{\n\tsecret: 'my-secret'\n\tallowed_hosts: ['*']\n}\n```\n\n----------------------------------------\n\nTITLE: Compile-time Reflection on Method Parameters in V\nDESCRIPTION: This code demonstrates how to use compile-time reflection to iterate over struct method parameters and print their types and names using the $for construct.\nSOURCE: https://github.com/vlang/v/blob/master/doc/docs.md#2025-04-21_snippet_167\n\nLANGUAGE: v\nCODE:\n```\nstruct Test {\n}\n\nfn (t Test) foo(arg1 int, arg2 string) {\n}\n\nfn main() {\n\t$for m in Test.methods {\n\t\t$for param in m.params {\n\t\t\tprintln('${typeof(param.typ).name}: ${param.name}')\n\t\t}\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Publishing Events with EventBus - Work Module\nDESCRIPTION: This snippet exemplifies publishing an event using the EventBus within a separate module. It defines relevant structs and simulates an event publication process concerning a network error scenario.\nSOURCE: https://github.com/vlang/v/blob/master/vlib/eventbus/README.md#2025-04-21_snippet_2\n\nLANGUAGE: v oksyntax\nCODE:\n```\nmodule main\n\nimport eventbus\n\nconst eb = eventbus.new[string]()\n\nstruct Work {\n\thours int\n}\n\nstruct AnError {\n\tmessage string\n}\n\nfn do_work() {\n\twork := Work{20}\n\t// get a mutable Params instance & put some data into it\n\terror := &AnError{'Error: no internet connection.'}\n\t// publish the event\n\teb.publish('error', work, error)\n}\n```\n\n----------------------------------------\n\nTITLE: V pkg-config API Usage\nDESCRIPTION: This code snippet demonstrates how to use the `pkgconfig` module within a V program to load package configuration data and retrieve linker flags. It showcases the basic API usage for integrating pkg-config functionality into V applications, handling potential errors during the loading process.\nSOURCE: https://github.com/vlang/v/blob/master/vlib/v/pkgconfig/README.md#2025-04-21_snippet_0\n\nLANGUAGE: V\nCODE:\n```\nimport v.pkgconfig\n\nopt := pkgconfig.Options{}\nmut pc := pkgconfig.load('expat', opt) or { panic(err) }\nprintln(pc.libs)\n```\n\n----------------------------------------\n\nTITLE: Initializing embedded structs in V\nDESCRIPTION: Demonstrates how to initialize an embedded struct directly when creating the containing struct. This allows setting all fields of the embedded struct at once.\nSOURCE: https://github.com/vlang/v/blob/master/doc/docs.md#2025-04-21_snippet_78\n\nLANGUAGE: v\nCODE:\n```\nmut button := Button{\n\tSize: Size{\n\t\twidth:  3\n\t\theight: 2\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Hello World Veb Application\nDESCRIPTION: Initial Veb application setup with a basic hello world endpoint\nSOURCE: https://github.com/vlang/v/blob/master/tutorials/building_a_simple_web_blog_with_veb/README.md#2025-04-21_snippet_2\n\nLANGUAGE: v\nCODE:\n```\n// blog.v\nmodule main\n\nimport veb\n\npub struct Context {\n\tveb.Context\n}\n\npub struct App {}\n\nfn main() {\n\tmut app := &App{}\n\tveb.run[App, Context](mut app, 8081)\n}\n\npub fn (app &App) index(mut ctx Context) veb.Result {\n\treturn ctx.text('Hello world from Veb!')\n}\n```\n\n----------------------------------------\n\nTITLE: Conditional Middleware Execution using 'next' in V\nDESCRIPTION: Shows how to use the `next` function in the `request_id.Config` to conditionally skip the middleware. In this example, the middleware is skipped for requests to the `/health` endpoint. This allows you to selectively enable request ID tracking based on the request path.\nSOURCE: https://github.com/vlang/v/blob/master/vlib/veb/request_id/README.md#2025-04-21_snippet_6\n\nLANGUAGE: v\nCODE:\n```\n```v\nimport veb\nimport rand\nimport veb.request_id\n\nconfig := request_id.Config{\n\tnext: fn (ctx &veb.Context) bool {\n\t\t// Skip for health check endpoints\n\t\treturn ctx.req.url.starts_with('/health')\n\t}\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Verifying Function Documentation in V\nDESCRIPTION: This V command checks for undocumented functions in the specified PATH. The `--verify` flag ensures that the tool exits with an error if any function lacks documentation comments. It is particularly useful in CI pipelines to automatically enforce documentation presence.\nSOURCE: https://github.com/vlang/v/blob/master/vlib/v/help/common/missdoc.txt#2025-04-21_snippet_0\n\nLANGUAGE: v\nCODE:\n```\n```\nv missdoc --verify path/to/code\n```\n```\n\n----------------------------------------\n\nTITLE: Reading a CSV File Randomly in V Language\nDESCRIPTION: This code snippet shows how to use the random access CSV reader to read cells from a CSV string. It demonstrates initializing the reader with a string of CSV data, iterating through rows, and printing each row's contents.\nSOURCE: https://github.com/vlang/v/blob/master/vlib/encoding/csv/README_csv_reader.md#2025-04-21_snippet_3\n\nLANGUAGE: v\nCODE:\n```\nimport encoding.csv\n\nconst txt = '\\na,b,c\\n0,1,2\\n3,4,5\\n'\n\nfn main() {\n\tmut csvr := csv.csv_reader_from_string(txt)!\n\t// scan all rows, csvr.csv_map.len contain the valid\n\t// rows number in the CSV file.\n\tfor row_index in 0 .. csvr.csv_map.len {\n\t\trow := csvr.get_row(row_index)!;\n\t\tprintln(row)\n\t}\n\tcsvr.dispose_csv_reader()\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Shared Variables in Lock Blocks in V\nDESCRIPTION: Demonstrates how shared variables behave like mutable or immutable variables inside lock and rlock blocks respectively. Shows allowed and disallowed function calls within these blocks.\nSOURCE: https://github.com/vlang/v/blob/master/doc/upcoming.md#2025-04-21_snippet_3\n\nLANGUAGE: v\nCODE:\n```\nshared c := St{...}\nlock c {\n    g(mut c)\n    f(c)\n    // call to h() not allowed inside `lock` block\n    // since h() will lock `c` itself\n}\nrlock c {\n    f(c)\n    // call to g() or h() not allowed\n}\n```\n\n----------------------------------------\n\nTITLE: Measuring Execution Time with Stopwatch in V\nDESCRIPTION: Demonstrates the usage of V's stopwatch functionality to measure execution time of a function, providing precise time tracking for performance analysis.\nSOURCE: https://github.com/vlang/v/blob/master/vlib/time/README.md#2025-04-21_snippet_4\n\nLANGUAGE: v\nCODE:\n```\nimport time\n\nfn do_something() {\n\ttime.sleep(510 * time.millisecond)\n}\n\nfn main() {\n\tsw := time.new_stopwatch()\n\tdo_something()\n\tprintln('Note: do_something() took: ${sw.elapsed().milliseconds()} ms')\n}\n```\n\n----------------------------------------\n\nTITLE: Union with embedded struct in V\nDESCRIPTION: Demonstrates creating and using unions in V with embedded structs. The example shows a color representation as both a 32-bit value and component bytes, illustrating how unions share memory.\nSOURCE: https://github.com/vlang/v/blob/master/doc/docs.md#2025-04-21_snippet_80\n\nLANGUAGE: v\nCODE:\n```\nstruct Rgba32_Component {\n\tr u8\n\tg u8\n\tb u8\n\ta u8\n}\n\nunion Rgba32 {\n\tRgba32_Component\n\tvalue u32\n}\n\nclr1 := Rgba32{\n\tvalue: 0x008811FF\n}\n\nclr2 := Rgba32{\n\tRgba32_Component: Rgba32_Component{\n\t\ta: 128\n\t}\n}\n\nsz := sizeof(Rgba32)\nunsafe {\n\tprintln('Size: ${sz}B,clr1.b: ${clr1.b},clr2.b: ${clr2.b}')\n}\n```\n\n----------------------------------------\n\nTITLE: Dynamic Interface Casting with Multiple Interfaces in V\nDESCRIPTION: Shows how to use dynamic casting to check if an object implements multiple interfaces. The example checks if instances in an array of IFoo also implement IBar interface.\nSOURCE: https://github.com/vlang/v/blob/master/doc/docs.md#2025-04-21_snippet_110\n\nLANGUAGE: v\nCODE:\n```\n// interface-example.4\ninterface IFoo {\n\tfoo()\n}\n\ninterface IBar {\n\tbar()\n}\n\n// implements only IFoo\nstruct SFoo {}\n\nfn (sf SFoo) foo() {}\n\n// implements both IFoo and IBar\nstruct SFooBar {}\n\nfn (sfb SFooBar) foo() {}\n\nfn (sfb SFooBar) bar() {\n\tdump('This implements IBar')\n}\n\nfn main() {\n\tmut arr := []IFoo{}\n\tarr << SFoo{}\n\tarr << SFooBar{}\n\n\tfor a in arr {\n\t\tdump(a)\n\t\t// In order to execute instances that implements IBar.\n\t\tif a is IBar {\n\t\t\ta.bar()\n\t\t}\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Quick Start vweb App Creation\nDESCRIPTION: This command creates a new vweb application with the specified name. This command should be run in the terminal.\nSOURCE: https://github.com/vlang/v/blob/master/vlib/vweb/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n\"v new --web <name>\"\n```\n\n----------------------------------------\n\nTITLE: HTML RGB Color Conversion Using V Regex\nDESCRIPTION: Demonstrates using regex with string interpolation to parse HTML color codes. Shows how to convert 3 or 6 digit hex color representations into a 32-bit color value using regex group extraction.\nSOURCE: https://github.com/vlang/v/blob/master/vlib/regex/README.md#2025-04-21_snippet_1\n\nLANGUAGE: v\nCODE:\n```\nfn convert_html_rgb(in_col string) u32 {\n\tmut n_digit := if in_col.len == 4 { 1 } else { 2 }\n\tmut col_mul := if in_col.len == 4 { 4 } else { 0 }\n\tquery := '#([a-fA-F0-9]{${n_digit}})([a-fA-F0-9]{${n_digit}})([a-fA-F0-9]{${n_digit}})'\n\tmut re := regex.regex_opt(query) or { panic(err) }\n\tstart, end := re.match_string(in_col)\n\tmut res := u32(0)\n\tif start >= 0 {\n\t\tgroup_list := re.get_group_list()\n\t\tr := ('0x' + in_col[group_list[0].start..group_list[0].end]).int() << col_mul\n\t\tg := ('0x' + in_col[group_list[1].start..group_list[1].end]).int() << col_mul\n\t\tb := ('0x' + in_col[group_list[2].start..group_list[2].end]).int() << col_mul\n\t\tres = u32(r) << 16 | u32(g) << 8 | u32(b)\n\t}\n\treturn res\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing After-Request Middleware in Veb (V)\nDESCRIPTION: Shows how to implement and register middleware that runs after the main handler but before the response is sent.\nSOURCE: https://github.com/vlang/v/blob/master/vlib/veb/README.md#2025-04-21_snippet_20\n\nLANGUAGE: v\nCODE:\n```\npub fn modify_headers(mut ctx Context) bool {\n\tctx.res.header.add(.content_language, 'en-US')\n\treturn true\n}\n\napp.use(handler: modify_headers, after: true)\n```\n\n----------------------------------------\n\nTITLE: Embedding v.mod Information in V Executable\nDESCRIPTION: This code demonstrates how to embed version and name information from a v.mod file into a V executable using compile-time pseudo variables.\nSOURCE: https://github.com/vlang/v/blob/master/doc/docs.md#2025-04-21_snippet_159\n\nLANGUAGE: v\nCODE:\n```\nimport v.vmod\nvm := vmod.decode( @VMOD_FILE ) or { panic(err) }\neprintln('${vm.name} ${vm.version}\\n ${vm.description}')\n```\n\n----------------------------------------\n\nTITLE: Creating a Formatted String using v_sprintf in V\nDESCRIPTION: The snippet demonstrates how to use the v_sprintf function to create a formatted string by replacing format specifiers with actual values. It imports the strconv module, takes a string template, and displays a greeting message.\nSOURCE: https://github.com/vlang/v/blob/master/vlib/strconv/format.md#2025-04-21_snippet_0\n\nLANGUAGE: v\nCODE:\n```\nimport strconv\n\nfn main() {\n\ta := 'World'\n\ts := strconv.v_sprintf('Hello %s!', a)\n\tprintln(s)\n}\n```\n\n----------------------------------------\n\nTITLE: Creating and Manipulating Arrays in V\nDESCRIPTION: This snippet shows different methods of creating arrays in V, including array literals and the array() function. It also demonstrates array operations like concatenation and repetition.\nSOURCE: https://github.com/vlang/v/blob/master/examples/vweb_fullstack/readme.md#2025-04-21_snippet_0\n\nLANGUAGE: v\nCODE:\n```\nnums := [1, 2, 3]\nnames := ['Sam', 'Peter']\n\nints := [0].repeat(50)\nnums << 4\nnums << [5, 6, 7]\na := [1, 2, 3]\nb := [4, 5, 6]\nc := [...a, ...b]\nassert c == [1, 2, 3, 4, 5, 6]\n\nmut d := [1, 2, 3]\nd << [4, 5, 6]\nassert d == [1, 2, 3, 4, 5, 6]\n\nfloats := []f64{len: 3, init: 3.14}\nassert floats == [3.14, 3.14, 3.14]\n\nints2 := []int{len: 5, init: 1}\nassert ints2 == [1, 1, 1, 1, 1]\n\nints3 := []int{len: 5, init: index+1}\nassert ints3 == [1, 2, 3, 4, 5]\n\nfloats2 := []f64{len: 9, cap: 100, init: 1.23}\nassert floats2 == [1.23, 1.23, 1.23, 1.23, 1.23, 1.23, 1.23, 1.23, 1.23]\n\nints4 := []int{len: 6, cap: 10, init: index * 10}\nassert ints4 == [0, 10, 20, 30, 40, 50]\n\nints5 := array{len: 4, init: 0}\nassert ints5 == [0, 0, 0, 0]\n\nints6 := array{len: 5, init: index * 2}\nassert ints6 == [0, 2, 4, 6, 8]\n```\n\n----------------------------------------\n\nTITLE: Initializing Dynamic Template Manager in V\nDESCRIPTION: This snippet demonstrates how to initialize an instance of the Dynamic Template Manager (DTM) in a simple V application, followed by the usage of the 'expand' function to render a template with dynamic variables. It uses a map to define template placeholders and shows how to handle cases where caching is enabled or disabled.\nSOURCE: https://github.com/vlang/v/blob/master/vlib/x/templating/dtm/README.md#2025-04-21_snippet_0\n\nLANGUAGE: v\nCODE:\n```\nimport x.templating.dtm\n\nfn main() {\n\tmut dtmi := dtm.initialize()\n\n\t// No need to add this 'defer' if you have chosen to disable the cache system in the options.\n\tdefer {\n\t\tdtmi.stop_cache_handler()\n\t}\n\tmut tmp_var := map[string]dtm.DtmMultiTypeMap{}\n\ttmp_var['title'] = 'V dtm best title'\n\ttmp_var['non_string_type'] = 7\n\ttmp_var['html_section_#includehtml'] = '<span>will <br> be <br> escaped <br> in <br> text mode</span>'\n\n\trender := dtmi.expand('test.txt', placeholders: &tmp_var)\n\n\tprintln(render)\n}\n```\n\n----------------------------------------\n\nTITLE: Custom ID Generator Function in V\nDESCRIPTION: Demonstrates how to define a custom ID generator function for the request ID middleware. This function creates IDs with a custom prefix and a UUID v4. The `generator` is then set to the defined custom function in the `request_id.Config` struct.\nSOURCE: https://github.com/vlang/v/blob/master/vlib/veb/request_id/README.md#2025-04-21_snippet_5\n\nLANGUAGE: v\nCODE:\n```\n```v\nimport rand\nimport veb.request_id\n\nfn custom_id_generator() string {\n\treturn 'custom-prefix-${rand.uuid_v4()}'\n}\n\nconfig := request_id.Config{\n\tgenerator: custom_id_generator\n}\n```\n```\n\n----------------------------------------\n\nTITLE: V pkg-config Command Line Tool Usage\nDESCRIPTION: This block provides example usages of the commandline tool, demonstrating how to retrieve module version, description, help, debug information, list all modules, and check for module existence. It presents various options to display variables, requirements, version, compiler flags, linker flags, and static linking flags.\nSOURCE: https://github.com/vlang/v/blob/master/vlib/v/pkgconfig/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ ./bin/pkgconfig -h\npkgconfig 0.3.3\n-----------------------------------------------\nUsage: pkgconfig [options] [ARGS]\n\nOptions:\n  -V, --modversion          show version of module\n  -d, --description         show pkg module description\n  -h, --help                show this help message\n  -D, --debug               show debug information\n  -l, --list-all            list all pkgmodules\n  -e, --exists              return 0 if pkg exists\n  -V, --print-variables     display variable names\n  -r, --print-requires      display requires of the module\n  -a, --atleast-version <string>\n                            return 0 if pkg version is at least the given one\n      --exact-version <string>\n                            return 0 if pkg version is at least the given one\n  -v, --version             show version of this tool\n  -c, --cflags              output all pre-processor and compiler flags\n  -I, --cflags-only-I       show only -I flags from CFLAGS\n      --cflags-only-other   show cflags without -I\n  -s, --static              show --libs for static linking\n  -l, --libs                output all linker flags\n      --libs-only-l         show only -l from ldflags\n  -L, --libs-only-L         show only -L from ldflags\n      --libs-only-other     show flags not containing -l or -L\n$\n```\n\n----------------------------------------\n\nTITLE: Creating a File Securely (TOCTOU Resistant)\nDESCRIPTION: This code snippet demonstrates a secure way to create a file and handle potential write permission issues.  By attempting to create the file directly, the code avoids the time-of-check-to-time-of-use vulnerability, ensuring that the file is either successfully created (and locked) or an error is handled.\nSOURCE: https://github.com/vlang/v/blob/master/vlib/os/README.md#2025-04-21_snippet_1\n\nLANGUAGE: V\nCODE:\n```\n```v ignore\nmut f := os.create('path/to/file') or {\n    println(\"file not writable\")\n}\n\n// file is locked\n// do something with file\n\nf.close()\n```\n```\n\n----------------------------------------\n\nTITLE: Initializing Project Structure\nDESCRIPTION: This snippet sets up the file structure for an already existing V project. It ensures that all the required directories and configuration files are created for proper project setup.\nSOURCE: https://github.com/vlang/v/blob/master/vlib/v/help/scaffolding/scaffolding.txt#2025-04-21_snippet_0\n\nLANGUAGE: v\nCODE:\n```\ninit  Sets up the file structure for an already existing V project.\n```\n\n----------------------------------------\n\nTITLE: Reading from Different Sources with Sequential Reader in V Language\nDESCRIPTION: This code snippet illustrates how to create a sequential CSV reader from a file or a memory buffer. The snippet indicates that the reader can take either a file path for input or a direct pointer to a memory buffer for reading CSV data.\nSOURCE: https://github.com/vlang/v/blob/master/vlib/encoding/csv/README_csv_reader.md#2025-04-21_snippet_1\n\nLANGUAGE: v\nCODE:\n```\ncsv.csv_sequential_reader(file_path:file_path)\n```\n\nLANGUAGE: v\nCODE:\n```\ncsv.csv_sequential_reader(scr_buf:voidptr(buffer_ptr),  scr_buf_len: buffer_len)\n```\n\n----------------------------------------\n\nTITLE: Time Parsing Method Signatures Reference\nDESCRIPTION: Reference documentation for various built-in time parsing methods in the V language, supporting multiple standard time formats.\nSOURCE: https://github.com/vlang/v/blob/master/vlib/time/README.md#2025-04-21_snippet_3\n\nLANGUAGE: v\nCODE:\n```\nfn parse(s string) !Time\nfn parse_iso8601(s string) !Time\nfn parse_rfc2822(s string) !Time\nfn parse_rfc3339(s string) !Time\n```\n\n----------------------------------------\n\nTITLE: Using term Module API\nDESCRIPTION: This code demonstrates how to use various functions of the `term` module in V, including getting terminal size, printing colored messages (ok, fail, warn), clearing the terminal, setting text color, applying text transformations (bold, strikethrough, underline), coloring the background, and controlling cursor position and visibility. It showcases the different capabilities for styling and manipulating terminal output.\nSOURCE: https://github.com/vlang/v/blob/master/vlib/term/README.md#2025-04-21_snippet_1\n\nLANGUAGE: v\nCODE:\n```\nimport term\n\n// returns the height and the width of the terminal\nwidth, height := term.get_terminal_size()\nprintln('width: ${width}, height: ${height}')\n// returns the string as green text to be printed on stdout\nterm.ok_message('cool')\n// returns the string as red text to be printed on stdout\nterm.fail_message('oh, no')\n// returns the string as yellow text to be printed on stdout\nterm.warn_message('be warned')\n// clears the entire terminal and leaves a blank one\nterm.clear()\n\n// Set the color output of the output.\n// The available colors are:\n// black, white, blue, yellow,\n// green, red, cyan, magenta,\n// bright_black, bright_white, bright_blue, bright_yellow,\n// bright_green, bright_red, bright_cyan, bright_magenta,\nterm.yellow('submarine')\n\n// transforms the given string into bold text\nterm.bold('and beautiful')\n// puts a strikethrough into the given string\nterm.strikethrough('the core of the problem')\n// underlines the given string\nterm.underline('important')\n// colors the background of the output following the given color\n// the available colors are: black, blue, yellow, green, cyan, gray\nterm.bg_green('field')\n// sets the position of the cursor at a given place in the terminal\nterm.set_cursor_position(x: 5, y: 10)\n// moves the cursor up\nterm.cursor_up(1)\n// moves the cursor down\nterm.cursor_down(1)\n// moves the cursor to the right\nterm.cursor_forward(2)\n// moves the cursor to the left\nterm.cursor_back(2)\n// hides the cursor\nterm.hide_cursor()\n// shows the cursor\nterm.show_cursor()\n```\n\n----------------------------------------\n\nTITLE: V Language Code Analysis Tool Usage\nDESCRIPTION: This snippet describes how to use the `v vet` tool to analyze V source code files or directories.  It shows the basic syntax for invoking the tool and processing single or multiple files/directories. The tool reports suspicious code constructs based on the specified options.\nSOURCE: https://github.com/vlang/v/blob/master/vlib/v/help/common/vet.txt#2025-04-21_snippet_0\n\nLANGUAGE: v\nCODE:\n```\n\"v vet [options] path_to_source.v [path_to_other_source.v]\\nv vet [options] path/to/dir [path/to/other_dir]\"\n```\n\n----------------------------------------\n\nTITLE: Using Format Specifiers in V\nDESCRIPTION: This snippet demonstrates how to use format specifiers similar to C's printf, allowing formatted output for different data types, including alignment, precision, and conversion types.\nSOURCE: https://github.com/vlang/v/blob/master/doc/docs.md#2025-04-21_snippet_15\n\nLANGUAGE: v\nCODE:\n```\nx := 123.4567\nprintln('[${x:.2}]') // round to two decimal places => [123.46]\nprintln('[${x:10}]') // right-align with spaces on the left => [   123.457]\nprintln('[${int(x):-10}]') // left-align with spaces on the right => [123       ]\nprintln('[${int(x):010}]') // pad with zeros on the left => [0000000123]\nprintln('[${int(x):b}]') // output as binary => [1111011]\nprintln('[${int(x):o}]') // output as octal => [173]\nprintln('[${int(x):X}]') // output as uppercase hex => [7B]\n\nprintln('[${10.0000:.2}]') // remove insignificant 0s at the end => [10]\nprintln('[${10.0000:.2f}]') // do show the 0s at the end, even though they do not change the number => [10.00]\n```\n\n----------------------------------------\n\nTITLE: Session Binding in CSRF Configuration\nDESCRIPTION: Configures the CSRF protection to bind tokens to user sessions by specifying a session cookie name. Provides an example setup using `csrf.CsrfConfig`.\nSOURCE: https://github.com/vlang/v/blob/master/vlib/veb/csrf/README.md#2025-04-21_snippet_8\n\nLANGUAGE: v\nCODE:\n```\ncsrf_config = csrf.CsrfConfig{\n\t// ...\n\tsession_cookie: 'my_session_id_cookie_name'\n}\n```\n\n----------------------------------------\n\nTITLE: Poly1305 Example Usage in V\nDESCRIPTION: This snippet demonstrates the usage of the Poly1305 MAC implementation in V. It decodes a hexadecimal key, defines a message, generates a Poly1305 tag for the message using the key, and then verifies the generated tag. The example relies on the `encoding.hex` and `x.crypto.poly1305` modules.\nSOURCE: https://github.com/vlang/v/blob/master/vlib/x/crypto/poly1305/README.md#2025-04-21_snippet_0\n\nLANGUAGE: v\nCODE:\n```\n```v\nmodule main\n\nimport encoding.hex\nimport x.crypto.poly1305\n\nfn main() {\n\t// this examples mostly based on rfc\n\t// provide yours secure key\n\tyourkey := '0000000000000000000000000000000036e5f6b5c5e06070f0efca96227a863e'\n\tkey := hex.decode(yourkey)!\n\n\t// messages to be authenticated\n\tmsg := 'Sample messages'.bytes()\n\n\tmut out := []u8{len: 16}\n\t// lets create tag (mac) stored into out\n\tpoly1305.create_tag(mut out, msg, key)!\n\tstatus := poly1305.verify_tag(out, msg, key)\n\tassert status == true\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Handling Unused Variables Warning in V\nDESCRIPTION: This snippet illustrates how V handles unused variables during development mode, demonstrating that a warning will be issued for unused variables and how to ignore values using the '_' symbol.\nSOURCE: https://github.com/vlang/v/blob/master/doc/docs.md#2025-04-21_snippet_8\n\nLANGUAGE: v\nCODE:\n```\nfn main() {\n\ta := 10\n\t// warning: unused variable `a`\n}\n\nfn foo() (int, int) {\n\treturn 2, 3\n}\n\nfn main() {\n\tc, _ := foo()\n\tprint(c)\n\t// no warning about unused variable returned by foo.\n}\n```\n\n----------------------------------------\n\nTITLE: Decoding a JSON string to an Any type using json2.decode in V\nDESCRIPTION: This snippet shows how to decode a JSON string into an `Any` type using `json2.decode`. It imports `x.json2` and `net.http` and uses the http library to fetch JSON from an API.  The JSON response is decoded into the `raw_product` variable, which is of type `json2.Any`. The `Any` type requires explicit casting to access the values.\nSOURCE: https://github.com/vlang/v/blob/master/vlib/x/json2/README.md#2025-04-21_snippet_2\n\nLANGUAGE: v\nCODE:\n```\nimport x.json2\nimport net.http\n\nfn main() {\n\tresp := http.get('https://reqres.in/api/products/1')!\n\n\t// This returns an Any type\n\traw_product := json2.decode[json2.Any](resp.body)!\n}\n```\n\n----------------------------------------\n\nTITLE: Using Stopwatches for Code Profiling in V\nDESCRIPTION: Demonstrates how to use stopwatches for measuring execution time of specific code sections in V. This example shows importing the time module and using a stopwatch to measure elapsed time in nanoseconds.\nSOURCE: https://github.com/vlang/v/blob/master/doc/docs.md#2025-04-21_snippet_146\n\nLANGUAGE: v\nCODE:\n```\nimport time\n\nfn main() {\n\tsw := time.new_stopwatch()\n\tprintln('Hello world')\n\tprintln('Greeting the world took: ${sw.elapsed().nanoseconds()}ns')\n}\n```\n\n----------------------------------------\n\nTITLE: Using Reserved Keywords in V Enum Fields\nDESCRIPTION: Demonstrates how enum fields in V can reuse reserved keywords like 'none'. The example creates a Color enum with 'none' as a field and prints its value.\nSOURCE: https://github.com/vlang/v/blob/master/doc/docs.md#2025-04-21_snippet_95\n\nLANGUAGE: v\nCODE:\n```\nenum Color {\n\tnone\n\tred\n\tgreen\n\tblue\n}\n\ncolor := Color.none\nprintln(color)\n```\n\n----------------------------------------\n\nTITLE: Compile-time Reflection on Struct Attributes in V\nDESCRIPTION: This snippet shows how to use compile-time reflection to read struct attributes using the $for construct.\nSOURCE: https://github.com/vlang/v/blob/master/doc/docs.md#2025-04-21_snippet_164\n\nLANGUAGE: v\nCODE:\n```\n@[COLOR]\nstruct Foo {\n\ta int\n}\n\nfn main() {\n\t$for e in Foo.attributes {\n\t\tprintln(e)\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Assigning Custom Integer Values to V Enum Fields\nDESCRIPTION: Demonstrates how to assign specific integer values to enum fields. Default incrementation continues from the last assigned value. The example shows how to convert enum values to integers.\nSOURCE: https://github.com/vlang/v/blob/master/doc/docs.md#2025-04-21_snippet_96\n\nLANGUAGE: v\nCODE:\n```\nenum Grocery {\n\tapple\n\torange = 5\n\tpear\n}\n\ng1 := int(Grocery.apple)\ng2 := int(Grocery.orange)\ng3 := int(Grocery.pear)\nprintln('Grocery IDs: ${g1}, ${g2}, ${g3}')\n```\n\n----------------------------------------\n\nTITLE: Accessing Request ID in Route Handlers in V\nDESCRIPTION: Demonstrates how to access the request ID within a route handler using the `Context` struct. It retrieves the request ID from `ctx.request_id` and uses it for logging or other purposes. This example returns the request ID in the response text.\nSOURCE: https://github.com/vlang/v/blob/master/vlib/veb/request_id/README.md#2025-04-21_snippet_3\n\nLANGUAGE: v\nCODE:\n```\n```v okfmt\nimport veb\nimport veb.request_id\n\nfn (app &App) handler(mut ctx Context) veb.Result {\n\t// Get the current request ID\n\trequest_id := ctx.request_id\n\t// Use the request ID for logging, etc.\n\treturn ctx.text('Request ID: ${request_id}')\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Structs with Reference Fields in V\nDESCRIPTION: Shows how to work with structs that contain reference fields in V, demonstrating initialization requirements and handling of nil references.\nSOURCE: https://github.com/vlang/v/blob/master/doc/docs.md#2025-04-21_snippet_180\n\nLANGUAGE: v\nCODE:\n```\nstruct Node {\n\ta &Node\n\tb &Node = unsafe { nil } // Auto-initialized to nil, use with caution!\n}\n\n// Reference fields must be initialized unless an initial value is declared.\n// Nil is OK but use with caution, it's a nil pointer.\nfoo := Node{\n\ta: unsafe { nil }\n}\nbar := Node{\n\ta: &foo\n}\nbaz := Node{\n\ta: unsafe { nil }\n\tb: unsafe { nil }\n}\nqux := Node{\n\ta: &foo\n\tb: &bar\n}\nprintln(baz)\nprintln(qux)\n```\n\n----------------------------------------\n\nTITLE: Encoding ASN.1 Tagged Types in V\nDESCRIPTION: Shows how to encode ASN.1 tagged types using encode_with_options for both implicit and explicit tagging.\nSOURCE: https://github.com/vlang/v/blob/master/vlib/x/encoding/asn1/DOCS.md#2025-04-21_snippet_1\n\nLANGUAGE: v\nCODE:\n```\noutput := encode_with_options(obj, 'context_specific:5;implicit;inner:19')!\nassert output == [u8(0x85), 0x02, 0x68, 0x69]\n```\n\nLANGUAGE: v\nCODE:\n```\noutput := encode_with_options(obj, 'context_specific:5;explicit;inner:0x13')!\nassert output == [u8(0xA5), 0x04, 0x13, 0x02, 0x68, 0x69]\n```\n\n----------------------------------------\n\nTITLE: Defining Complex Struct for Binary Serialization in V\nDESCRIPTION: Demonstrates creating complex structs with various fields for binary encoding and decoding, showcasing the use of custom types, nested structs, maps, and serialization annotations\nSOURCE: https://github.com/vlang/v/blob/master/vlib/encoding/binary/README.md#2025-04-21_snippet_0\n\nLANGUAGE: v\nCODE:\n```\nstruct MyStruct {\n\tg_u8 u8\n}\n\nstruct ComplexStruct {\nmut:\n\tf_u8      u8\n\tf_u32     u32 @[serialize: '-'] // this field will be skipped\n\tf_u64     u64\n\tf_string  string\n\tf_structs []MyStruct\n\tf_maps    []map[string]string\n}\n```\n\n----------------------------------------\n\nTITLE: Generating JSON AST from V files using V shell\nDESCRIPTION: This command-line utility generates and manipulates JSON representations of the abstract syntax tree (AST) from V language files. The main dependencies are V language files with a .v or .vsh extension. It allows generating a standard JSON file, printing to stdout, or watching files for changes. It can also skip default properties and produce terse outputs. Inputs include the .v file and various options for output customization. The primary output is a JSON file, with optional C file generation.\nSOURCE: https://github.com/vlang/v/blob/master/vlib/v/help/other/ast.txt#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nv ast demo.v\n```\n\n----------------------------------------\n\nTITLE: Array Method Chaining in V\nDESCRIPTION: Shows how to chain array methods like filter and map for functional programming patterns using the built-in 'it' variable.\nSOURCE: https://github.com/vlang/v/blob/master/doc/docs.md#2025-04-21_snippet_38\n\nLANGUAGE: v\nCODE:\n```\n// using filter, map and negatives array slices\nfiles := ['pippo.jpg', '01.bmp', '_v.txt', 'img_02.jpg', 'img_01.JPG']\nfiltered := files.filter(it#[-4..].to_lower() == '.jpg').map(it.to_upper())\n// ['PIPPO.JPG', 'IMG_02.JPG', 'IMG_01.JPG']\n```\n\n----------------------------------------\n\nTITLE: Configuring Session Cookie Options\nDESCRIPTION: Here, session cookie configurations are modified by setting the cookie_options field, such as ensuring cookies are only set in secure contexts. Adjustments include v attributes for defining cookie behavior in sessions.\nSOURCE: https://github.com/vlang/v/blob/master/vlib/x/sessions/README.md#2025-04-21_snippet_7\n\nLANGUAGE: v\nCODE:\n```\nmut app := &App{\n    sessions: &sessions.Sessions[User]{\n        // ...\n        cookie_options: sessions.CookieOptions{\n            // cookie can only be stored on an HTTPS site.\n            secure: true\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Deprecating Functions and Methods in V\nDESCRIPTION: Shows various ways to deprecate functions using the @[deprecated] attribute. Examples include simple deprecation, custom messages, and specifying a future deprecation date.\nSOURCE: https://github.com/vlang/v/blob/master/doc/docs.md#2025-04-21_snippet_154\n\nLANGUAGE: v\nCODE:\n```\n// Calling this function will result in a deprecation warning\n\n@[deprecated]\nfn old_function() {\n}\n\n// It can also display a custom deprecation message\n\n@[deprecated: 'use new_function() instead']\nfn legacy_function() {}\n\n// You can also specify a date, after which the function will be\n// considered deprecated. Before that date, calls to the function\n// will be compiler notices - you will see them, but the compilation\n// is not affected. After that date, calls will become warnings,\n// so ordinary compiling will still work, but compiling with -prod\n// will not (all warnings are treated like errors with -prod).\n// 6 months after the deprecation date, calls will be hard\n// compiler errors.\n\n@[deprecated: 'use new_function2() instead']\n@[deprecated_after: '2021-05-27']\nfn legacy_function2() {}\n```\n\n----------------------------------------\n\nTITLE: Environment Variable Access using $env\nDESCRIPTION: Shows how to access environment variables at compile time using the $env directive.\nSOURCE: https://github.com/vlang/v/blob/master/doc/docs.md#2025-04-21_snippet_171\n\nLANGUAGE: v\nCODE:\n```\nmodule main\n\nfn main() {\n\tcompile_time_env := $env('ENV_VAR')\n\tprintln(compile_time_env)\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring Integer Literals in V\nDESCRIPTION: This snippet demonstrates declaring integer values using decimal, hexadecimal, binary, and octal notations in the V programming language. Each notation initializes 'a', 'b', and 'c' with the same value of 123 and type 'int'.\nSOURCE: https://github.com/vlang/v/blob/master/doc/docs.md#2025-04-21_snippet_17\n\nLANGUAGE: v\nCODE:\n```\na := 123\n```\n\nLANGUAGE: v\nCODE:\n```\na := 0x7B\nb := 0b01111011\nc := 0o173\n```\n\n----------------------------------------\n\nTITLE: Running veb Application with Custom Context\nDESCRIPTION: This snippet demonstrates running a V web application on a specified port with a custom `App` struct. It sets up an instance of `App` with a PostgreSQL connection and kicks off the server on port 8081 using the `veb.run` function. The `Context` struct embeds `veb.Context` with additional data for the current user.\nSOURCE: https://github.com/vlang/v/blob/master/vlib/veb/auth/README.md#2025-04-21_snippet_1\n\nLANGUAGE: v\nCODE:\n```\nconst port = 8081\n\npub struct Context {\n\tveb.Context\n\tcurrent_user User\n}\n\nfn main() {\n\tmut app := &App{\n\t\tdb: pg.connect(host: 'localhost', user: 'postgres', password: '', dbname: 'postgres')!\n\t}\n\tapp.auth = auth.new(app.db)\n\tveb.run[App, Context](mut app, port)\n}\n```\n\n----------------------------------------\n\nTITLE: Defining vweb Endpoints\nDESCRIPTION: This example demonstrates how to define endpoints in vweb using function names and attributes for routing. It shows both auto-mapping based on function names and explicit path specification using the `@[\"/path\"]` attribute.\nSOURCE: https://github.com/vlang/v/blob/master/vlib/vweb/README.md#2025-04-21_snippet_7\n\nLANGUAGE: v\nCODE:\n```\n// This endpoint can be accessed via http://localhost:port/hello\nfn (mut app App) hello() vweb.Result {\n\treturn app.text('Hello')\n}\n\n// This endpoint can be accessed via http://localhost:port/foo\n@[\"/foo\"]\nfn (mut app App) world() vweb.Result {\n\treturn app.text('World')\n}\n```\n\n----------------------------------------\n\nTITLE: Automatic Locking for Arrays and Maps in V\nDESCRIPTION: Shows how V can automatically generate locks for simple operations on shared arrays and maps. Cautions about potential race conditions and recommends explicit locking for coherent operations.\nSOURCE: https://github.com/vlang/v/blob/master/doc/upcoming.md#2025-04-21_snippet_4\n\nLANGUAGE: v\nCODE:\n```\nshared a := []int{cap: 5}\ngo h2(shared a)\na << 3\n// keep in mind that `h2()` could change `a` between these statements\na << 4\nx := a[1] // not necessarily `4`\n\nshared b := map[string]int{}\ngo h3(shared b)\nb['apple'] = 3\nc['plume'] = 7\ny := b['apple'] // not necessarily `3`\n\n// iteration over elements\nfor k, v in b {\n    // concurrently changed k/v pairs may or may not be included\n}\n```\n\n----------------------------------------\n\nTITLE: Mounting Static Folder at Root in Veb (V)\nDESCRIPTION: Demonstrates how to mount a static folder at the root of a Veb application. This allows direct access to static files without a prefix in the URL.\nSOURCE: https://github.com/vlang/v/blob/master/vlib/veb/README.md#2025-04-21_snippet_10\n\nLANGUAGE: v\nCODE:\n```\napp.handle_static('static', true)!\n```\n\n----------------------------------------\n\nTITLE: Embedding Files in V using $embed_file\nDESCRIPTION: Demonstrates how to embed files into V executables using $embed_file directive with optional zlib compression support.\nSOURCE: https://github.com/vlang/v/blob/master/doc/docs.md#2025-04-21_snippet_169\n\nLANGUAGE: v\nCODE:\n```\nimport os\nfn main() {\n\tembedded_file := $embed_file('v.png')\n\tos.write_file('exported.png', embedded_file.to_string())!\n}\n```\n\nLANGUAGE: v\nCODE:\n```\nimport os\nfn main() {\n\tembedded_file := $embed_file('x.css', .zlib) // compressed using zlib\n\tos.write_file('exported.css', embedded_file.to_string())!\n}\n```\n\n----------------------------------------\n\nTITLE: Clearing CSRF Token\nDESCRIPTION: Shows how to clear the anti-CSRF token and remove the associated cookie header using `ctx.clear_csrf_token`. Useful for sessions where token invalidation is required.\nSOURCE: https://github.com/vlang/v/blob/master/vlib/veb/csrf/README.md#2025-04-21_snippet_7\n\nLANGUAGE: v\nCODE:\n```\nctx.clear_csrf_token()\n```\n\n----------------------------------------\n\nTITLE: Return Value Checking\nDESCRIPTION: This snippet introduces the '-check-return' option that notes calls that ignore the return value of functions or methods. It is currently experimental and may change in future versions.\nSOURCE: https://github.com/vlang/v/blob/master/vlib/v/help/build/build.txt#2025-04-21_snippet_10\n\nLANGUAGE: V\nCODE:\n```\n-check-return\n    Note about all calls, that ignore the return value of\nthe corresponding fn/method.\n```\n\n----------------------------------------\n\nTITLE: Using HTTP Verbs in Endpoint Definitions\nDESCRIPTION: This snippet illustrates how to declare endpoints that respond to various HTTP methods (GET, POST) using V. It demonstrates an endpoint that handles both GET and POST requests properly.\nSOURCE: https://github.com/vlang/v/blob/master/vlib/veb/README.md#2025-04-21_snippet_2\n\nLANGUAGE: v\nCODE:\n```\n// only GET requests to http://server:port/world are handled by this method\n@[get]\npub fn (app &App) world(mut ctx Context) veb.Result {\n\treturn ctx.text('World')\n}\n\n// only POST requests to http://server:port/product/create are handled by this method\n@['/product/create'; post]\npub fn (app &App) create_product(mut ctx Context) veb.Result {\n\treturn ctx.text('product')\n}\n```\n\n----------------------------------------\n\nTITLE: Running a Simple Hello World in V\nDESCRIPTION: This V code snippet demonstrates how to create a simple Hello World program in V. It's useful for verifying V's installation and execution environment.\nSOURCE: https://github.com/vlang/v/blob/master/README.md#2025-04-21_snippet_10\n\nLANGUAGE: v\nCODE:\n```\nfn main() {\n\tfor i in 0 .. 3 {\n\t\tprintln('Hello from V.js')\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: JWT Creation and Verification Example in V\nDESCRIPTION: This snippet demonstrates JWT (JSON Web Token) creation and verification using `crypto.hmac`, `crypto.sha256`, `encoding.base64`, and `json` modules. It creates a token, verifies the token, and decodes the payload. This example illustrates a complete workflow for handling JWTs, including encoding/decoding and HMAC-based signature generation/verification.\nSOURCE: https://github.com/vlang/v/blob/master/vlib/crypto/README.md#2025-04-21_snippet_1\n\nLANGUAGE: v\nCODE:\n```\nimport crypto.hmac\nimport crypto.sha256\nimport encoding.base64\nimport json\nimport time\n\nstruct JwtHeader {\n\talg string\n\ttyp string\n}\n\nstruct JwtPayload {\n\tsub  string\n\tname string\n\tiat  int\n}\n\nfn main() {\n\tsw := time.new_stopwatch()\n\tsecret := 'your-256-bit-secret'\n\ttoken := make_token(secret)\n\tok := auth_verify(secret, token)\n\tpl := decode_payload(token) or { panic(err) }\n\tdt := sw.elapsed().microseconds()\n\tprintln('token: ${token}')\n\tprintln('auth_verify(secret, token): ${ok}')\n\tprintln('decode_payload(token): ${pl}')\n\tprintln('Elapsed time: ${dt} uS')\n}\n\nfn make_token(secret string) string {\n\theader := base64.url_encode(json.encode(JwtHeader{'HS256', 'JWT'}).bytes())\n\tpayload := base64.url_encode(json.encode(JwtPayload{'1234567890', 'John Doe', 1516239022}).bytes())\n\tsignature := base64.url_encode(hmac.new(secret.bytes(), '${header}.${payload}'.bytes(),\n\t\tsha256.sum, sha256.block_size))\n\tjwt := '${header}.${payload}.${signature}'\n\treturn jwt\n}\n\nfn auth_verify(secret string, token string) bool {\n\ttoken_split := token.split('.')\n\tsignature_mirror := hmac.new(secret.bytes(), '${token_split[0]}.${token_split[1]}'.bytes(),\n\t\tsha256.sum, sha256.block_size)\n\tsignature_from_token := base64.url_decode(token_split[2])\n\treturn hmac.equal(signature_from_token, signature_mirror)\n}\n\nfn decode_payload(token string) !JwtPayload {\n\ttoken_split := token.split('.')\n\tpayload := json.decode(JwtPayload, base64.url_decode_str(token_split[1]))!\n\treturn payload\n}\n```\n\n----------------------------------------\n\nTITLE: Destroying Session Data for Logout\nDESCRIPTION: This snippet provides an example of logging out a user by destroying session data and removing the session id cookie using the logout method. It handles errors by sending a server error response if logout fails. Requires sessions module for session manipulation.\nSOURCE: https://github.com/vlang/v/blob/master/vlib/x/sessions/README.md#2025-04-21_snippet_6\n\nLANGUAGE: v\nCODE:\n```\npub fn (mut app App) logout(mut ctx Context) veb.Result {\n    app.sessions.logout(mut ctx) or { return ctx.server_error('could not logout, please try again') }\n    return ctx.text('You are now logged out!')\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Request Headers and Cookies in V\nDESCRIPTION: Shows how to access request headers and cookies using context methods in veb framework.\nSOURCE: https://github.com/vlang/v/blob/master/vlib/veb/README.md#2025-04-21_snippet_25\n\nLANGUAGE: v\nCODE:\n```\npub fn (app &App) index(mut ctx Context) veb.Result {\n\tcontent_length := ctx.get_header(.content_length) or { '0' }\n\t// get custom header\n\tcustom_header := ctx.get_custom_header('X-HEADER') or { '' }\n\t// ...\n}\n```\n\nLANGUAGE: v\nCODE:\n```\npub fn (app &App) index(mut ctx Context) veb.Result {\n\tcookie_val := ctx.get_cookie('token') or { '' }\n\t// ...\n}\n```\n\n----------------------------------------\n\nTITLE: Array Properties in V: Length and Capacity\nDESCRIPTION: This snippet demonstrates how to access the length and capacity of an array, showing how these properties work in the V programming language.\nSOURCE: https://github.com/vlang/v/blob/master/doc/docs.md#2025-04-21_snippet_25\n\nLANGUAGE: v\nCODE:\n```\nmut nums := [1, 2, 3]\nprintln(nums.len) // \"3\"\nprintln(nums.cap) // \"3\" or greater\nnums = [] // The array is now empty\nprintln(nums.len) // \"0\"\n```\n\n----------------------------------------\n\nTITLE: Step-by-Step Benchmarking in V\nDESCRIPTION: Demonstrates how to use the benchmark module for step-by-step performance measurement. Shows the usage of step(), ok(), fail(), and stop() methods with customizable verbosity and step messages.\nSOURCE: https://github.com/vlang/v/blob/master/vlib/benchmark/README.md#2025-04-21_snippet_0\n\nLANGUAGE: v\nCODE:\n```\nimport benchmark\n\nmut bmark := benchmark.new_benchmark()\n// by default the benchmark will be verbose, i.e. it will include timing information\n// if you want it to be silent, set bmark.verbose = false\nfor {\n\tbmark.step() // call this when you want to advance the benchmark.\n\t// The timing info in bmark.step_message will be measured starting from the last call to bmark.step\n\t// ....\n\t// bmark.fail() // call this if the step failed\n\t// bmark.step_message(('failed')\n\tbmark.ok() // call this when the step succeeded\n\tprintln(bmark.step_message('ok'))\n}\nbmark.stop()\n// call when you want to finalize the benchmark\nprintln(bmark.total_message('remarks about the benchmark'))\n```\n\n----------------------------------------\n\nTITLE: Fatal Error Handling\nDESCRIPTION: The '-Wfatal-errors' option makes the compiler exit immediately after the first error it encounters, which is useful for scripting and tooling scenarios that call the compiler.\nSOURCE: https://github.com/vlang/v/blob/master/vlib/v/help/build/build.txt#2025-04-21_snippet_8\n\nLANGUAGE: V\nCODE:\n```\n-Wfatal-errors\n    Unconditionally exit with exit(1) after the first error.\n```\n\n----------------------------------------\n\nTITLE: Map Update Syntax in V\nDESCRIPTION: Shows how to create a new map by combining an existing map with additional key-value pairs using the spread operator.\nSOURCE: https://github.com/vlang/v/blob/master/doc/docs.md#2025-04-21_snippet_48\n\nLANGUAGE: v\nCODE:\n```\nconst base_map = {\n\t'a': 4\n\t'b': 5\n}\n\nfoo := {\n\t...base_map\n\t'b': 88\n\t'c': 99\n}\n\nprintln(foo) // {'a': 4, 'b': 88, 'c': 99}\n```\n\n----------------------------------------\n\nTITLE: Creating a QueryBuilder Instance for ORM in V\nDESCRIPTION: This code snippet creates an instance of the `QueryBuilder` for the `User` struct.  The `new_query` function initializes the query builder with the database connection and maps the struct definition.\nSOURCE: https://github.com/vlang/v/blob/master/vlib/orm/README.md#2025-04-21_snippet_12\n\nLANGUAGE: v\nCODE:\n```\nmut qb := orm.new_query[User](db)\n```\n\n----------------------------------------\n\nTITLE: Printing Colored Text in the Middle of the Terminal with term module\nDESCRIPTION: This code snippet demonstrates how to use the `term` module to clear the terminal, get the terminal size, set the cursor position to the middle of the terminal, print colored text, and set the cursor position to the bottom of the terminal. It also prompts the user to press 'q' to quit the program.\nSOURCE: https://github.com/vlang/v/blob/master/vlib/term/README.md#2025-04-21_snippet_0\n\nLANGUAGE: v\nCODE:\n```\nimport term\nimport os\n\nfn main() {\n\tterm.clear() // clears the content in the terminal\n\twidth, height := term.get_terminal_size() // get the size of the terminal\n\tterm.set_cursor_position(x: width / 2, y: height / 2) // now we point the cursor to the middle of  the terminal\n\tprintln(term.strikethrough(term.bright_green('hello world'))) // Print green text\n\tterm.set_cursor_position(x: 0, y: height) // Sets the position of the cursor to the bottom of the terminal\n\t// Keep prompting until the user presses the q key\n\tfor {\n\t\tif var := os.input_opt('press q to quit: ') {\n\t\t\tif var != 'q' {\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\tbreak\n\t\t}\n\t\tprintln('')\n\t\tbreak\n\t}\n\tprintln('Goodbye.')\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Embedded Interfaces in V\nDESCRIPTION: Demonstrates how to create interfaces in V that support embedding, similar to structs. The example shows a ReaderWriter interface that embeds both Reader and Writer interfaces.\nSOURCE: https://github.com/vlang/v/blob/master/doc/docs.md#2025-04-21_snippet_112\n\nLANGUAGE: v\nCODE:\n```\npub interface Reader {\nmut:\n\tread(mut buf []u8) ?int\n}\n\npub interface Writer {\nmut:\n\twrite(buf []u8) ?int\n}\n\n// ReaderWriter embeds both Reader and Writer.\n// The effect is the same as copy/pasting all of the\n// Reader and all of the Writer methods/fields into\n// ReaderWriter.\npub interface ReaderWriter {\n\tReader\n\tWriter\n}\n```\n\n----------------------------------------\n\nTITLE: Sending HTTP Responses with Different MIME Types in V\nDESCRIPTION: Examples of sending HTTP responses with various content types including HTML, plain text, and JSON.\nSOURCE: https://github.com/vlang/v/blob/master/vlib/veb/README.md#2025-04-21_snippet_26\n\nLANGUAGE: v\nCODE:\n```\n// send response HTTP_OK with content-type `text/html`\nctx.html('<h1>Hello world!</h1>')\n// send response HTTP_OK with content-type `text/plain`\nctx.text('Hello world!')\n// stringify the object and send response HTTP_OK with content-type `application/json`\nctx.json(User{\n\tname: 'test'\n\tage: 20\n})\n// send response HTTP_NO_CONTENT (204) without a content-type and body\nctx.no_content()\n```\n\n----------------------------------------\n\nTITLE: Running Parallel Simulation in V\nDESCRIPTION: This snippet shows how to compile and execute the parallel pendulum simulation. It uses the V programming language with the Boehm garbage collector and requires the parallel.v file.\nSOURCE: https://github.com/vlang/v/blob/master/examples/pendulum-simulation/README.md#2025-04-21_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n$ v -gc boehm -prod parallel.v\n$ ./parallel # execute ./parallel -h for more info\n```\n\n----------------------------------------\n\nTITLE: Rebuilding V Executable - V\nDESCRIPTION: The command 'v self' rebuilds the V executable. It can be executed with the '-prod' flag for a production build. This command is useful for ensuring that the V executable is compiled from the latest source code.\nSOURCE: https://github.com/vlang/v/blob/master/vlib/v/help/installation/installation.txt#2025-04-21_snippet_1\n\nLANGUAGE: v\nCODE:\n```\nv self       Rebuild the V executable. Try for example: `v -prod self`.\n```\n\n----------------------------------------\n\nTITLE: Checking Files Without Compiling\nDESCRIPTION: The '-check' option scans and checks the files without going through the compilation process, providing a way to verify file integrity before an actual build.\nSOURCE: https://github.com/vlang/v/blob/master/vlib/v/help/build/build.txt#2025-04-21_snippet_3\n\nLANGUAGE: V\nCODE:\n```\n-check\n    Scans, parses, and checks the files without compiling the program.\n```\n\n----------------------------------------\n\nTITLE: Regex Group Capture Example in V\nDESCRIPTION: Demonstrates capturing groups in a regex pattern and accessing their values using the V regex module. Shows how to parse and extract information from matched text using capture groups.\nSOURCE: https://github.com/vlang/v/blob/master/vlib/regex/README.md#2025-04-21_snippet_0\n\nLANGUAGE: v\nCODE:\n```\ntext := 'cpaz cpapaz cpapapaz'\nquery := r'(c(pa)+z ?)+'\nmut re := regex.regex_opt(query) or { panic(err) }\nstart, end := re.match_string(text)\nmut gi := 0\nfor gi < re.groups.len {\n\tif re.groups[gi] >= 0 {\n\t\tprintln('${gi / 2} :[${text[re.groups[gi]..re.groups[gi + 1]]}]')\n\t}\n\tgi += 2\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up V Web Server\nDESCRIPTION: This snippet demonstrates setting up a web server using V language's vweb module. It compiles JavaScript files on every request and serves them alongside static resources from the project's directory. Ensure V is installed and the vweb module is available.\nSOURCE: https://github.com/vlang/v/blob/master/examples/js_dom_cube/README.md#2025-04-21_snippet_4\n\nLANGUAGE: V\nCODE:\n```\nmodule main\n\nimport vweb\nimport os\n\nconst http_port = 3001\n\nstruct App {\n\tvweb.Context\n}\n\nfn main() {\n\tvweb.run(new_app(), http_port)\n}\n\npub fn (mut app App) before_request() {\n\t// Build the cube.js javascript file\n\tos.execute_or_panic('v -b js_browser cube.js.v ')\n}\n\nfn new_app() &App {\n\tmut app := &App{}\n\tapp.serve_static('/favicon.ico', 'favicon.ico')\n\tapp.serve_static('/cube.js', 'cube.js')\n\tapp.mount_static_folder_at(os.resource_abs_path('.'), '/')\n\treturn app\n}\n\n@['/'; get]\npub fn (mut app App) controller_get_all_task() vweb.Result {\n\tfile := os.read_file('./index.html') or { panic(err) }\n\treturn app.html(file)\n}\n```\n\n----------------------------------------\n\nTITLE: Using Context Timeout with V\nDESCRIPTION: This V snippet demonstrates how to use a timeout with context in V, controlling how long a blocked function should wait before abandoning its task. The 'with_timeout' function is employed to achieve this, effectively terminating operations beyond the timeout. The code relies on the 'context' and 'time' modules, and showcases the importance of handling the context's done channel appropriately.\nSOURCE: https://github.com/vlang/v/blob/master/vlib/context/README.md#2025-04-21_snippet_2\n\nLANGUAGE: V\nCODE:\n```\nimport time\nimport context\n\nconst short_duration = 2 * time.millisecond // a reasonable duration to block in an example\n\n// This example passes a context with a timeout to tell a blocking function that\n// it should abandon its work after the timeout elapses.\nfn main() {\n\t// Pass a context with a timeout to tell a blocking function that it\n\t// should abandon its work after the timeout elapses.\n\tmut background := context.background()\n\tmut ctx, cancel := context.with_timeout(mut background, short_duration)\n\tdefer {\n\t\tcancel()\n\t\teprintln('> defer finishes')\n\t}\n\n\tctx_ch := ctx.done()\n\tselect {\n\t\t_ := <-ctx_ch {\n\t\t\teprintln('> reading from ctx_ch succeeded')\n\t\t}\n\t\t1 * time.second {\n\t\t\tpanic('This should not happen')\n\t\t}\n\t}\n\teprintln('> main finishes')\n}\n\n```\n\n----------------------------------------\n\nTITLE: Initializing Application with Memory Store for Sessions\nDESCRIPTION: Here, the main function initializes an App instance incorporating a MemoryStore to manage sessions in-memory. It defines a secret for session verification and runs the veb application. This requires the sessions.MemoryStore and veb for execution.\nSOURCE: https://github.com/vlang/v/blob/master/vlib/x/sessions/README.md#2025-04-21_snippet_1\n\nLANGUAGE: v\nCODE:\n```\nfn main() {\n    mut app := &App{\n        store: sessions.MemoryStore[User]{}\n        // use your own secret which will be used to verify session id's\n        secret: 'my secret'.bytes()\n    }\n\n    veb.run[App, Context](mut app, 8080)\n}\n```\n\n----------------------------------------\n\nTITLE: vweb HTML Template Example\nDESCRIPTION: This is an example of an HTML template used with vweb.  It uses V's template directives for dynamic content rendering such as including CSS, looping through data, including components and displaying variables.\nSOURCE: https://github.com/vlang/v/blob/master/vlib/vweb/README.md#2025-04-21_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<html>\n  <head>\n    <title>${page_title}</title>\n    @css 'src/templates/page/home.css'\n  </head>\n  <body>\n    <h1 class=\"title\">Hello, Vs.</h1>\n    @for var in list_of_object\n    <div>\n      <a href=\"${v_url}\">${var.title}</a>\n      <span>${var.description}</span>\n    </div>\n    @end\n    <div>@include 'component.html'</div>\n  </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Quick Measurement Using start/measure Methods in V\nDESCRIPTION: Shows how to use the convenience methods start() and measure() for quick code section timing. Includes example with multiple measurement points and time delays for demonstration.\nSOURCE: https://github.com/vlang/v/blob/master/vlib/benchmark/README.md#2025-04-21_snippet_1\n\nLANGUAGE: v\nCODE:\n```\nimport time\nimport benchmark\n\nmut b := benchmark.start()\n// your code section 1 ...\ntime.sleep(1500 * time.millisecond)\nb.measure('code_1')\n// your code section 2 ...\ntime.sleep(500 * time.millisecond)\nb.measure('code_2')\n```\n\n----------------------------------------\n\nTITLE: Short struct literal syntax in V\nDESCRIPTION: Demonstrates the short-form initialization of structs in V, including variable assignment, array creation with struct elements, and assertions to verify field values.\nSOURCE: https://github.com/vlang/v/blob/master/doc/docs.md#2025-04-21_snippet_66\n\nLANGUAGE: v\nCODE:\n```\nstruct Point {\n\tx int\n\ty int\n}\n\nmut p := Point{\n\tx: 10\n\ty: 20\n}\np = Point{\n\tx: 30\n\ty: 4\n}\nassert p.y == 4\n//\n// array: first element defines type of array\npoints := [Point{10, 20}, Point{20, 30}, Point{40, 50}]\nprintln(points) // [Point{x: 10, y: 20}, Point{x: 20, y: 30}, Point{x: 40,y: 50}]\n```\n\n----------------------------------------\n\nTITLE: Implementing Build Tasks in V\nDESCRIPTION: Demonstrates creating a build script using V's build system module. Shows how to define tasks with dependencies, set default tasks, and execute system commands. Includes examples of common build operations like documentation generation, running, building, and releasing.\nSOURCE: https://github.com/vlang/v/blob/master/vlib/build/README.md#2025-04-21_snippet_0\n\nLANGUAGE: v\nCODE:\n```\n#!/usr/bin/env -S v run\n\nimport build\n// .vsh automatically imports `os`, so you don't need this typically\nimport os { system }\n\nconst app_name = 'vlang'\nconst program_args = 'World'\n\nmut context := build.context(\n\t// Set the default task to `release` when no arguments are provided\n\tdefault: 'release'\n)\n\ncontext.task(name: 'doc', run: |self| system('v doc .'))\ncontext.task(name: 'run', run: |self| system('v run . ${program_args}'))\ncontext.task(name: 'build', run: |self| system('v .'))\ncontext.task(name: 'build.prod', run: |self| system('v -prod .'))\n\ncontext.task(\n\tname:    'release'\n\tdepends: ['doc']\n\trun:     fn (self build.Task) ! {\n\t\tsystem('v -prod -o build/${app_name} .')\n\t\t// You could use Git to publish a release here too\n\t}\n)\n\ncontext.run()\n```\n\n----------------------------------------\n\nTITLE: Trailing struct literal arguments in V\nDESCRIPTION: Demonstrates V's approach to providing default and named parameters using trailing struct literals. The example shows a button creation function that accepts a configuration struct with default values for width and height.\nSOURCE: https://github.com/vlang/v/blob/master/doc/docs.md#2025-04-21_snippet_68\n\nLANGUAGE: v\nCODE:\n```\n@[params]\nstruct ButtonConfig {\n\ttext        string\n\tis_disabled bool\n\twidth       int = 70\n\theight      int = 20\n}\n\nstruct Button {\n\ttext   string\n\twidth  int\n\theight int\n}\n\nfn new_button(c ButtonConfig) &Button {\n\treturn &Button{\n\t\twidth:  c.width\n\t\theight: c.height\n\t\ttext:   c.text\n\t}\n}\n\nbutton := new_button(text: 'Click me', width: 100)\n// the height is unset, so it's the default value\nassert button.height == 20\n```\n\n----------------------------------------\n\nTITLE: Complex WHERE Clause with QueryBuilder in V\nDESCRIPTION: This code snippet demonstrates a complex `WHERE` clause using the `where` method of the `QueryBuilder`. It shows how to combine multiple conditions with logical operators `AND`, `OR`, `&&`, and `||`.\nSOURCE: https://github.com/vlang/v/blob/master/vlib/orm/README.md#2025-04-21_snippet_20\n\nLANGUAGE: v\nCODE:\n```\nwhere('created_at IS NULL && ((salary > ? && age < ?) || (role LIKE ?))', 2000, 30, '%employee%')!\n```\n\n----------------------------------------\n\nTITLE: Handling Server Sent Events with V\nDESCRIPTION: This V code defines a handler for SSE connections. It takes control of the connection, allowing the server to handle multiple requests while sending messages to the client in a separate thread. Key functionalities include managing the connection takeover and sending periodic messages.\nSOURCE: https://github.com/vlang/v/blob/master/vlib/veb/sse/README.md#2025-04-21_snippet_0\n\nLANGUAGE: v\nCODE:\n```\nimport veb.sse\n\n// endpoint handler for SSE connections\nfn (app &App) sse(mut ctx Context) veb.Result {\n\t// let veb know that the connection should not be closed\n\tctx.takeover_conn()\n\t// handle the connection in a new thread\n\tspawn handle_sse_conn(mut ctx)\n\t// we will send a custom response ourself, so we can safely return an empty result\n\treturn veb.no_result()\n}\n\nfn handle_sse_conn(mut ctx Context) {\n\t// pass veb.Context\n\tmut sse_conn := sse.start_connection(mut ctx.Context)\n\n\t// send a message every second 3 times\n\tfor _ in 0.. 3 {\n\t\ttime.sleep(time.second)\n\t\tsse_conn.send_message(data: 'ping') or { break }\n\t}\n\t// close the SSE connection\n\tsse_conn.close()\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Current Time in V\nDESCRIPTION: Demonstrates how to get the current timestamp using the time module's now() function. Useful for getting the present moment in time.\nSOURCE: https://github.com/vlang/v/blob/master/vlib/time/README.md#2025-04-21_snippet_0\n\nLANGUAGE: v\nCODE:\n```\nimport time\n\nprintln(time.now())\n```\n\n----------------------------------------\n\nTITLE: Handling Missing Map Keys in V with Default Values\nDESCRIPTION: Shows how missing keys in maps return zero values for the corresponding value type.\nSOURCE: https://github.com/vlang/v/blob/master/doc/docs.md#2025-04-21_snippet_42\n\nLANGUAGE: v\nCODE:\n```\nsm := {\n\t'abc': 'xyz'\n}\nval := sm['bad_key']\nprintln(val) // ''\n```\n\n----------------------------------------\n\nTITLE: Running Sequential Simulation in V\nDESCRIPTION: This snippet demonstrates how to compile and execute the sequential pendulum simulation. It requires the V programming language and the Boehm garbage collector to run the V code.\nSOURCE: https://github.com/vlang/v/blob/master/examples/pendulum-simulation/README.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n$ v -gc boehm -prod sequential.v\n$ ./sequential # execute ./sequential -h for more info\n```\n\n----------------------------------------\n\nTITLE: Controlling ANSI Color Output\nDESCRIPTION: This snippet explains the '-color' and '-nocolor' options for forcing or disabling ANSI color output for V error/warning messages. This option can help in environments where color output is not supported.\nSOURCE: https://github.com/vlang/v/blob/master/vlib/v/help/build/build.txt#2025-04-21_snippet_2\n\nLANGUAGE: V\nCODE:\n```\n-color, -nocolor\n    Force the use of ANSI colors for the V error/warning messages, or disable them completely.\n```\n\n----------------------------------------\n\nTITLE: Parsing HTTP Requests with PicoHTTPParser in C\nDESCRIPTION: Example demonstrating how to read and parse an HTTP request from a socket using phr_parse_request(). The code handles buffer management, request parsing, and error conditions while extracting method, path, version and headers.\nSOURCE: https://github.com/vlang/v/blob/master/thirdparty/picohttpparser/src/README.md#2025-04-21_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nchar buf[4096], *method, *path;\nint pret, minor_version;\nstruct phr_header headers[100];\nsize_t buflen = 0, prevbuflen = 0, method_len, path_len, num_headers;\nssize_t rret;\n\nwhile (1) {\n    /* read the request */\n    while ((rret = read(sock, buf + buflen, sizeof(buf) - buflen)) == -1 && errno == EINTR)\n        ;\n    if (rret <= 0)\n        return IOError;\n    prevbuflen = buflen;\n    buflen += rret;\n    /* parse the request */\n    num_headers = sizeof(headers) / sizeof(headers[0]);\n    pret = phr_parse_request(buf, buflen, &method, &method_len, &path, &path_len,\n                             &minor_version, headers, &num_headers, prevbuflen);\n    if (pret > 0)\n        break; /* successfully parsed the request */\n    else if (pret == -1)\n        return ParseError;\n    /* request is incomplete, continue the loop */\n    assert(pret == -2);\n    if (buflen == sizeof(buf))\n        return RequestIsTooLongError;\n}\n\nprintf(\"request is %d bytes long\\n\", pret);\nprintf(\"method is %.*s\\n\", (int)method_len, method);\nprintf(\"path is %.*s\\n\", (int)path_len, path);\nprintf(\"HTTP version is 1.%d\\n\", minor_version);\nprintf(\"headers:\\n\");\nfor (i = 0; i != num_headers; ++i) {\n    printf(\"%.*s: %.*s\\n\", (int)headers[i].name_len, headers[i].name,\n           (int)headers[i].value_len, headers[i].value);\n}\n```\n\n----------------------------------------\n\nTITLE: Combining Middleware with Redirection for Authentication\nDESCRIPTION: Example demonstrating how to use middleware for authentication that redirects unauthorized users to a login page.\nSOURCE: https://github.com/vlang/v/blob/master/vlib/vweb/README.md#2025-04-21_snippet_21\n\nLANGUAGE: v\nCODE:\n```\n@[middleware: with_auth]\n@['/admin/secret']\npub fn (mut app App) admin_secret() vweb.Result {\n\t// this code should never be reached\n\treturn app.text('secret')\n}\n\n@['/redirect']\npub fn (mut app App) with_auth() bool {\n\tapp.redirect('/auth/login')\n\treturn false\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Context Values in a Vweb Application\nDESCRIPTION: Example demonstrating how to use context values to pass data between middleware and route handlers, including setting and retrieving user information.\nSOURCE: https://github.com/vlang/v/blob/master/vlib/vweb/README.md#2025-04-21_snippet_17\n\nLANGUAGE: v\nCODE:\n```\nmodule main\n\nimport vweb\n\nstruct App {\n\tvweb.Context\n\tmiddlewares map[string][]vweb.Middleware\n}\n\npub fn (mut app App) index() vweb.Result {\n\t// get the user or return HTTP 401\n\tuser := app.get_value[User]('user') or {\n\t\tapp.set_status(401, '')\n\t\treturn app.text('HTTP 401: Unauthorized')\n\t}\n\n\treturn app.text('welcome ${user.name}')\n}\n\nfn main() {\n\tvweb.run(&App{\n\t\tmiddlewares: {\n\t\t\t'/': [get_session]\n\t\t}\n\t}, 8080)\n}\n\nstruct User {\n\tsession_id string\n\tname       string\n}\n\nfn get_session(mut ctx vweb.Context) bool {\n\t// implement your own logic to get the user\n\tuser := User{\n\t\tsession_id: '123456'\n\t\tname:       'Vweb'\n\t}\n\n\t// set the user\n\tctx.set_value('user', user)\n\treturn true\n}\n```\n\n----------------------------------------\n\nTITLE: Using @[_allow_multiple_values] for Enum with Duplicate Values in V\nDESCRIPTION: Shows how to use the @[_allow_multiple_values] attribute to allow an enum to have multiple duplicate values. This is useful for creating enums with aliases or alternative names for the same value.\nSOURCE: https://github.com/vlang/v/blob/master/doc/docs.md#2025-04-21_snippet_152\n\nLANGUAGE: v\nCODE:\n```\n@[_allow_multiple_values]\nenum ButtonStyle {\n\tprimary   = 1\n\tsecondary = 2\n\tsuccess   = 3\n\n\tblurple = 1\n\tgrey    = 2\n\tgray    = 2\n\tgreen   = 3\n}\n\nfn main() {\n\tassert int(ButtonStyle.primary) == 1\n\tassert int(ButtonStyle.blurple) == 1\n\n\tassert int(ButtonStyle.secondary) == 2\n\tassert int(ButtonStyle.gray) == 2\n\tassert int(ButtonStyle.grey) == 2\n\n\tassert int(ButtonStyle.success) == 3\n\tassert int(ButtonStyle.green) == 3\n\n\tassert ButtonStyle.primary == ButtonStyle.blurple\n\tassert ButtonStyle.secondary == ButtonStyle.grey\n\tassert ButtonStyle.secondary == ButtonStyle.gray\n\tassert ButtonStyle.success == ButtonStyle.green\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Early Exit Middleware in Veb (V)\nDESCRIPTION: Demonstrates how to implement middleware that can end request processing early by sending a response.\nSOURCE: https://github.com/vlang/v/blob/master/vlib/veb/README.md#2025-04-21_snippet_21\n\nLANGUAGE: v\nCODE:\n```\npub fn early_exit(mut ctx Context) bool {\n\tctx.text('early exit')\n\treturn false\n}\n\npub fn logger(mut ctx Context) bool {\n\tprintln('received request for \"${ctx.req.url}\"')\n\treturn true\n}\n\napp.use(handler: early_exit)\napp.use(handler: logger)\n```\n\n----------------------------------------\n\nTITLE: Using Exponential Notation for Floats in V\nDESCRIPTION: This snippet demonstrates the use of exponential notation to declare floating-point numbers in the V programming language, showcasing how to write floats as powers of ten.\nSOURCE: https://github.com/vlang/v/blob/master/doc/docs.md#2025-04-21_snippet_21\n\nLANGUAGE: v\nCODE:\n```\nf0 := 42e1 // 420\nf1 := 123e-2 // 1.23\nf2 := 456e+2 // 45600\n```\n\n----------------------------------------\n\nTITLE: Reading Text from System Clipboard in V\nDESCRIPTION: Demonstrates how to initialize a clipboard instance and read text content from the system clipboard using V's clipboard module. The example shows the basic usage pattern of creating a new clipboard object and retrieving its text content.\nSOURCE: https://github.com/vlang/v/blob/master/vlib/clipboard/README.md#2025-04-21_snippet_0\n\nLANGUAGE: v\nCODE:\n```\nimport clipboard\n\nfn main() {\n\tmut c := clipboard.new()\n\tprintln(c.get_text())\n}\n```\n\n----------------------------------------\n\nTITLE: Running the V Server\nDESCRIPTION: To start the server, use the provided V compiler command. It initializes the server and waits for incoming connections on http://localhost:3000. The server is expected to be compiled and run with the V compiler.\nSOURCE: https://github.com/vlang/v/blob/master/examples/vanilla_http_server/README.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nv -prod crun .\n```\n\n----------------------------------------\n\nTITLE: Implementing Module Cleanup Function in V\nDESCRIPTION: Defines a cleanup function that runs automatically when a program ends. The function must be named 'cleanup', cannot be public, and runs once per module in the reverse order of init calls.\nSOURCE: https://github.com/vlang/v/blob/master/doc/docs.md#2025-04-21_snippet_93\n\nLANGUAGE: v\nCODE:\n```\nfn cleanup() {\n\t// your deinitialisation code here ...\n}\n```\n\n----------------------------------------\n\nTITLE: Conditional Compilation Patch for Zstandard in C\nDESCRIPTION: This C code snippet conditionally disables multithreading and intrinsics in the Zstandard library based on the compiler and operating system.  It's designed to address compatibility issues in specific environments, notably when using the Tiny C Compiler (TCC) on Windows. This ensures the library can compile and run correctly in these constrained environments.\nSOURCE: https://github.com/vlang/v/blob/master/thirdparty/zstd/README.md#2025-04-21_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n\"#if defined(__TINYC__) && defined(\\_WIN32)\\n#undef ZSTD_MULTITHREAD\\n#define ZSTD_NO_INTRINSICS\\n#endif\"\n```\n\n----------------------------------------\n\nTITLE: Compressing and Decompressing Data with Deflate in V\nDESCRIPTION: Example showing how to use the deflate module to compress a string into bytes and then decompress it back. The example demonstrates the basic compression/decompression cycle and includes verification of data integrity.\nSOURCE: https://github.com/vlang/v/blob/master/vlib/compress/deflate/README.md#2025-04-21_snippet_0\n\nLANGUAGE: v\nCODE:\n```\nimport compress.deflate\n\nfn main() {\n\tuncompressed := 'Hello world!'\n\tcompressed := deflate.compress(uncompressed.bytes())!\n\tdecompressed := deflate.decompress(compressed)!\n\tassert decompressed == uncompressed.bytes()\n}\n```\n\n----------------------------------------\n\nTITLE: Managing Response Headers and Cookies in V\nDESCRIPTION: Examples of setting response headers and cookies in veb framework responses.\nSOURCE: https://github.com/vlang/v/blob/master/vlib/veb/README.md#2025-04-21_snippet_27\n\nLANGUAGE: v\nCODE:\n```\npub fn (app &App) index(mut ctx Context) veb.Result {\n\tctx.set_header(.accept, 'text/html')\n\t// set custom header\n\tctx.set_custom_header('X-HEADER', 'my-value')!\n\t// ...\n}\n```\n\nLANGUAGE: v\nCODE:\n```\npub fn (app &App) index(mut ctx Context) veb.Result {\n\tctx.set_cookie(http.Cookie{\n\t\tname: 'token'\n\t\tvalue: 'true'\n\t\tpath: '/'\n\t\tsecure: true\n\t\thttp_only: true\n\t})\n\t// ...\n}\n```\n\n----------------------------------------\n\nTITLE: Interfacing the C Compiler Options in V Language\nDESCRIPTION: This snippet explains how to interface with the C compiler by passing various options such as changing the compiler, setting compilation flags, and defining the target operating system. The options are crucial for customizing the build process of V applications and handling dependencies efficiently.\nSOURCE: https://github.com/vlang/v/blob/master/vlib/v/help/build/build-c.txt#2025-04-21_snippet_0\n\nLANGUAGE: V\nCODE:\n```\n# Interfacing the C compiler, passing options to it:\n   -cc <compiler>\n      Change the C compiler V invokes to the specified compiler.\n      The C compiler is required to support C99.\n      Officially supported/tested C compilers include:\n      `clang`, `gcc`, `tcc`, `mingw-w64` and `msvc`.\n\n   -cflags <flag>\n      Pass the provided flag as is to the C compiler.\n      Can be specified multiple times to provide multiple flags.\n      Use quotes to wrap the flag argument, if it contains spaces.\n\n   -ldflags <flag>\n      Pass the provided flag as is to the C compiler *after every other C option*.\n      Can be specified multiple times to provide multiple flags.\n      Use quotes to wrap the flag argument, if it contains spaces.\n\n      Note: V also supports the environment variables CFLAGS and LDFLAGS.\n      The contents of the CFLAGS variable will be prepended as is, at the start\n      of the C backend command, right after the name of the compiler.\n      The contents of the LDFLAGS variable will be appended as is, at the end\n      of the C backend command, after all other options.\n\n   -cstrict\n      Turn on additional C warnings. This slows down compilation\n      slightly (~10% for gcc), but sometimes provides better error diagnosis.\n\n   -cmain <MainFunctionName>\n      Useful with framework like code, that uses macros to re-define `main`,\n      like SDL2 does for example.\n      With that option, V will always generate:\n        `int MainFunctionName(int ___argc, char** ___argv) {`\n        ... for the program entry point function, *no matter* the OS.\n      Without it, on non Windows systems, it will generate:\n        `int main(int ___argc, char** ___argv) {`\n        ... and on Windows, it will generate:\n          a) `int WINAPI wWinMain( HINSTANCE instance,\n                                   HINSTANCE prev_instance,\n                                   LPWSTR cmd_line,\n                                   int show_cmd){`\n          when you are compiling applications that `import gg`.\n        ... or it will generate:\n          b) `int wmain(int ___argc, wchar_t* ___argv[], wchar_t* ___envp[]){`\n          when you are compiling console apps.\n\n   -subsystem <auto|console|windows>\n      Useful to change the generated main function on Windows.\n      Ignored on other platforms. The default is `auto`.\n      When set to `console` V will generate a `wmain` main function.\n      When set to `windows` V will generate a `wWinMain` main function,\n      even when you are not compiling `gg` apps.\n\n   -showcc\n      Prints the C command that is used to build the program.\n\n   -freestanding\n      Build the executable without dependency on libc.\n      Supported only on `linux` targets currently.\n\n   -bare-builtin-dir <bare-builtin-dir>\n      Use with `-freestanding`. This specifies the directory to the\n      implementation of some basic builtin functions.\n```\n\n----------------------------------------\n\nTITLE: Integrating CsrfApp in V Application\nDESCRIPTION: The V code snippet demonstrates how to integrate the CsrfApp into your V and vweb application to implement CSRF protection. It outlines the configuration of secret keys and allowed hosts, and illustrates how to protect routes with CSRF by setting tokens and cookies. The snippet requires the vweb and vweb.csrf modules and initializes a vweb application with CSRF capabilities.\nSOURCE: https://github.com/vlang/v/blob/master/vlib/vweb/csrf/README.md#2025-04-21_snippet_0\n\nLANGUAGE: v\nCODE:\n```\nmodule main\n\nimport net.http\nimport vweb\nimport vweb.csrf\n\nstruct App {\n\tvweb.Context\npub mut:\n\tcsrf csrf.CsrfApp [vweb_global]\n}\n\nfn main() {\n\tapp := &App{\n\t\tcsrf: csrf.CsrfApp{\n\t\t\t// change the secret\n\t\t\tsecret: 'my-64bytes-secret'\n\t\t\t// change to which domains you want to allow\n\t\t\tallowed_hosts: ['*']\n\t\t}\n\t}\n\tvweb.run(app, 8080)\n}\n\npub fn (mut app App) index() vweb.Result {\n\t// this line sets `app.token` and the cookie\n\tapp.csrf.set_token(mut app.Context)\n\treturn $vweb.html()\n}\n\n[post]\npub fn (mut app App) auth() vweb.Result {\n\t// this line protects the route against CSRF\n\tapp.csrf.protect(mut app.Context)\n\treturn app.text('authenticated!')\n}\n```\n\n----------------------------------------\n\nTITLE: Compiling V to WebAssembly\nDESCRIPTION: Command to compile the V Mandelbrot example to WebAssembly for browser execution. Uses the -os browser flag for browser compatibility.\nSOURCE: https://github.com/vlang/v/blob/master/examples/wasm/mandelbrot/README.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nv -b wasm -os browser mandelbrot.wasm.v\n```\n\n----------------------------------------\n\nTITLE: Creating and Formatting Time Instances in V\nDESCRIPTION: Shows how to create a specific time instance with explicit date and time values, and demonstrate various time formatting methods. Includes assertions to validate different time representation formats.\nSOURCE: https://github.com/vlang/v/blob/master/vlib/time/README.md#2025-04-21_snippet_1\n\nLANGUAGE: v\nCODE:\n```\nimport time\n\nconst time_to_test = time.Time{\n\tyear:       1980\n\tmonth:      7\n\tday:        11\n\thour:       21\n\tminute:     23\n\tsecond:     42\n\tnanosecond: 123456789\n}\n\nprintln(time_to_test.format())\n\nassert '1980-07-11 21:23' == time_to_test.format()\nassert '1980-07-11 21:23:42' == time_to_test.format_ss()\nassert '1980-07-11 21:23:42.123' == time_to_test.format_ss_milli()\nassert '1980-07-11 21:23:42.123456' == time_to_test.format_ss_micro()\nassert '1980-07-11 21:23:42.123456789' == time_to_test.format_ss_nano()\n```\n\n----------------------------------------\n\nTITLE: Valgrind Thread Analysis Commands\nDESCRIPTION: Commands for running thread synchronization analysis using Valgrind's Helgrind and DRD tools. Helgrind detects POSIX pthread synchronization errors while DRD identifies general multithreading issues.\nSOURCE: https://github.com/vlang/v/blob/master/examples/thread_safety/readme.md#2025-04-21_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n# Helgrind: a tool for detecting synchronisation errors in programs that use the POSIX pthreads threading primitives.\nvalgrind --tool=helgrind ./queue\n\n# DRD: a tool for detecting errors in multithreaded programs. The tool works for any program that uses the POSIX threading primitives or that uses threading concepts built on top of the POSIX threading primitives. \nvalgrind --tool=drd ./queue \n```\n\n----------------------------------------\n\nTITLE: Compiling V to JavaScript for Browser\nDESCRIPTION: Command to compile the V program to JavaScript for browser execution.\nSOURCE: https://github.com/vlang/v/blob/master/examples/js_dom_draw/README.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nv -b js_browser examples/js_dom_draw/draw.js.v\n```\n\n----------------------------------------\n\nTITLE: Logging In Users with Password Verification in V\nDESCRIPTION: This code snippet implements a user login functionality. It verifies the password against the stored hash and salt using `auth.compare_password_with_hash`. If authentication is successful, it issues an authentication token and attaches it to the user's session cookies, facilitating secure login handling.\nSOURCE: https://github.com/vlang/v/blob/master/vlib/veb/auth/README.md#2025-04-21_snippet_3\n\nLANGUAGE: v\nCODE:\n```\n@[post]\npub fn (mut app App) login_post(mut ctx Context, name string, password string) veb.Result {\n\tuser := app.find_user_by_name(name) or {\n\t\tctx.error('Bad credentials')\n\t\treturn ctx.redirect('/login')\n\t}\n\t// Verify user password using veb.auth\n\tif !auth.compare_password_with_hash(password, user.salt, user.password_hash) {\n\t\tctx.error('Bad credentials')\n\t\treturn ctx.redirect('/login')\n\t}\n\t// Find the user token in the Token table\n\ttoken := app.auth.add_token(user.id) or { '' }\n\t// Authenticate the user by adding the token to the cookies\n\tctx.set_cookie(name: 'token', value: token)\n\treturn ctx.redirect('/')\n}\n```\n\n----------------------------------------\n\nTITLE: Call Stack Debugging in V\nDESCRIPTION: Demonstrates how to view the current call stack during execution using v.debug.dump_callstack() with the -d callstack compiler flag.\nSOURCE: https://github.com/vlang/v/blob/master/doc/docs.md#2025-04-21_snippet_177\n\nLANGUAGE: v\nCODE:\n```\nimport v.debug\n\nfn test(i int) {\n\tif i > 9 {\n\t\tdebug.dump_callstack()\n\t}\n}\n\nfn do_something() {\n\tfor i := 0; i <= 10; i++ {\n\t\ttest(i)\n\t}\n}\n\nfn main() {\n\tdo_something()\n}\n```\n\n----------------------------------------\n\nTITLE: Parsing TOML Text/File in V\nDESCRIPTION: Demonstrates how to parse a TOML string or file using the `toml.parse_text` and `toml.parse_file` functions.  It imports the `toml` module and shows basic error handling with the `or { panic(err) }` construct.  The parsed TOML document is assigned to a variable for further processing.\nSOURCE: https://github.com/vlang/v/blob/master/vlib/toml/README.md#2025-04-21_snippet_0\n\nLANGUAGE: v\nCODE:\n```\ndoc1 := toml.parse_text(<string content>) or { panic(err) }\ndoc2 := toml.parse_file(<file path>) or { panic(err) }\n```\n\n----------------------------------------\n\nTITLE: Embedding CSRF Context in Veb App Context\nDESCRIPTION: This snippet shows how to embed the `CsrfContext` struct within a `Context` struct for Veb applications to enable CSRF protection. The dependencies include importing `veb` and `veb.csrf` packages. It requires the developer to configure options for CSRF protection.\nSOURCE: https://github.com/vlang/v/blob/master/vlib/veb/csrf/README.md#2025-04-21_snippet_0\n\nLANGUAGE: v\nCODE:\n```\nimport veb\nimport veb.csrf\n\npub struct Context {\n\tveb.Context\n\tcsrf.CsrfContext\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing JWT Token Creation and Verification in V\nDESCRIPTION: A complete JWT (JSON Web Token) implementation in V language, demonstrating token creation and verification. Uses crypto libraries for HMAC with SHA-256, base64 encoding/decoding, and JSON processing to create secure tokens.\nSOURCE: https://github.com/vlang/v/blob/master/cmd/tools/vdoc/testdata/output_formats/README.md#2025-04-21_snippet_1\n\nLANGUAGE: v\nCODE:\n```\nimport crypto.hmac\nimport crypto.sha256\nimport encoding.base64\nimport json\nimport time\n\nstruct JwtHeader {\n\talg string\n\ttyp string\n}\n\nstruct JwtPayload {\n\tsub  string\n\tname string\n\tiat  int\n}\n\nfn main() {\n\tsw := time.new_stopwatch()\n\tsecret := 'your-256-bit-secret'\n\ttoken := make_token(secret)\n\tok := auth_verify(secret, token)\n\tdt := sw.elapsed().microseconds()\n\tprintln('token: ${token}')\n\tprintln('auth_verify(secret, token): ${ok}')\n\tprintln('Elapsed time: ${dt} uS')\n}\n\nfn make_token(secret string) string {\n\theader := base64.url_encode(json.encode(JwtHeader{'HS256', 'JWT'}).bytes())\n\tpayload := base64.url_encode(json.encode(JwtPayload{'1234567890', 'John Doe', 1516239022}).bytes())\n\tsignature := base64.url_encode(hmac.new(secret.bytes(), '${header}.${payload}'.bytes(),\n\t\tsha256.sum, sha256.block_size))\n\tjwt := '${header}.${payload}.${signature}'\n\treturn jwt\n}\n\nfn auth_verify(secret string, token string) bool {\n\ttoken_split := token.split('.')\n\tsignature_mirror := hmac.new(secret.bytes(), '${token_split[0]}.${token_split[1]}'.bytes(),\n\t\tsha256.sum, sha256.block_size)\n\tsignature_from_token := base64.url_decode(token_split[2])\n\treturn hmac.equal(signature_from_token, signature_mirror)\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Middleware Function in Veb (V)\nDESCRIPTION: Implements a middleware function to check cookie policy acceptance. It modifies the Context and returns a boolean indicating whether to continue processing.\nSOURCE: https://github.com/vlang/v/blob/master/vlib/veb/README.md#2025-04-21_snippet_16\n\nLANGUAGE: v\nCODE:\n```\npub fn check_cookie_policy(mut ctx Context) bool {\n\tcookie_value := ctx.get_cookie('accepted_cookies') or { '' }\n\tif cookie_value == 'true' {\n\t\tctx.has_accepted_cookies = true\n\t}\n\treturn true\n}\n```\n\n----------------------------------------\n\nTITLE: Selecting Rows from a Table in V\nDESCRIPTION: These code snippets demonstrate how to select rows from a database table in V using a `sql` block with `select` statements.  The examples show how to use `where` clauses, `limit`, and `order by` to filter and sort results.\nSOURCE: https://github.com/vlang/v/blob/master/vlib/orm/README.md#2025-04-21_snippet_6\n\nLANGUAGE: v\nCODE:\n```\nresult := sql db {\n    select from Foo where id == 1\n}!\n\nfoo := result.first()\n```\n\nLANGUAGE: v\nCODE:\n```\nresult := sql db {\n    select from Foo where id > 1 && name != 'lasanha' limit 5\n}!\n```\n\nLANGUAGE: v\nCODE:\n```\nresult := sql db {\n    select from Foo where id > 1 order by id\n}!\n```\n\n----------------------------------------\n\nTITLE: Processing Items in Parallel with Sync Pool in V\nDESCRIPTION: This snippet demonstrates parallel processing of a list of strings using V's `sync.pool` module. It defines a structure `SResult`, a callback function `sprocess` that processes each item by reversing it, and a `main` function to initialize a pool processor. The processor works on the list of strings, and the results are obtained using `pp.get_results[SResult]`. The snippet requires the `sync.pool` module and works on lists of strings as input.\nSOURCE: https://github.com/vlang/v/blob/master/vlib/sync/pool/README.md#2025-04-21_snippet_0\n\nLANGUAGE: v\nCODE:\n```\nimport sync.pool\n\npub struct SResult {\n\ts string\n}\n\nfn sprocess(mut pp pool.PoolProcessor, idx int, wid int) &SResult {\n\titem := pp.get_item[string](idx)\n\tprintln('idx: ${idx}, wid: ${wid}, item: ' + item)\n\treturn &SResult{item.reverse()}\n}\n\nfn main() {\n\tmut pp := pool.new_pool_processor(callback: sprocess)\n\tpp.work_on_items(['1abc', '2abc', '3abc', '4abc', '5abc', '6abc', '7abc'])\n\t// optionally, you can iterate over the results too:\n\tfor x in pp.get_results[SResult]() {\n\t\tprintln('result: ${x.s}')\n\t}\n}\n\n```\n\n----------------------------------------\n\nTITLE: Changing Context Values in Vweb Middleware\nDESCRIPTION: Example showing how to modify context values in vweb middleware, demonstrating that context values are immutable when retrieved and must be set again to change.\nSOURCE: https://github.com/vlang/v/blob/master/vlib/vweb/README.md#2025-04-21_snippet_18\n\nLANGUAGE: v\nCODE:\n```\nfn change_user(mut ctx vweb.Context) bool {\n\tuser := User{\n\t\tsession_id: '654321'\n\t\tname: 'tester'\n\t}\n\n\t// set the user\n\tctx.set_value('user', user)\n\treturn true\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Missing Map Keys with or Block in V\nDESCRIPTION: Shows how to use the 'or' block to handle missing keys in maps with custom error handling.\nSOURCE: https://github.com/vlang/v/blob/master/doc/docs.md#2025-04-21_snippet_44\n\nLANGUAGE: v\nCODE:\n```\nmm := map[string]int{}\nval := mm['bad_key'] or { panic('key not found') }\n```\n\n----------------------------------------\n\nTITLE: Creating Cross-Platform Shell Scripts in V\nDESCRIPTION: Demonstrates how to write cross-platform shell scripts using V's .vsh file extension. The example shows file operations and command execution with simplified OS function access.\nSOURCE: https://github.com/vlang/v/blob/master/doc/docs.md#2025-04-21_snippet_205\n\nLANGUAGE: v\nCODE:\n```\n#!/usr/bin/env -S v\n\n// Note: The shebang line above, associates the .vsh file to V on Unix-like systems,\n// so it can be run just by specifying the path to the .vsh file, once it's made\n// executable, using `chmod +x deploy.vsh`, i.e. after that chmod command, you can\n// run the .vsh script, by just typing its name/path like this: `./deploy.vsh`\n\n// print command then execute it\nfn sh(cmd string) {\n\tprintln('❯ ${cmd}')\n\tprint(execute_or_exit(cmd).output)\n}\n\n// Remove if build/ exits, ignore any errors if it doesn't\nrmdir_all('build') or {}\n\n// Create build/, never fails as build/ does not exist\nmkdir('build')!\n\n// Move *.v files to build/\nresult := execute('mv *.v build/')\nif result.exit_code != 0 {\n\tprintln(result.output)\n}\n\nsh('ls')\n\n// Similar to:\n// files := ls('.')!\n// mut count := 0\n// if files.len > 0 {\n//     for file in files {\n//         if file.ends_with('.v') {\n//              mv(file, 'build/') or {\n//                  println('err: ${err}')\n//                  return\n//              }\n//         }\n//         count++\n//     }\n// }\n// if count == 0 {\n//     println('No files')\n// }\n```\n\n----------------------------------------\n\nTITLE: Running V Mandelbrot Natively\nDESCRIPTION: Command to run the V Mandelbrot example directly using the V compiler.\nSOURCE: https://github.com/vlang/v/blob/master/examples/wasm/mandelbrot/README.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nv run .\n```\n\n----------------------------------------\n\nTITLE: V Retry CLI Command Implementation\nDESCRIPTION: Command-line interface for running shell commands with automatic retry logic when initial execution fails. Supports configuring timeout, delay between retries, and maximum retry attempts.\nSOURCE: https://github.com/vlang/v/blob/master/vlib/v/help/other/retry.txt#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nv retry [options] CMD\n```\n\n----------------------------------------\n\nTITLE: If Statements and Expressions in V\nDESCRIPTION: Shows the usage of if statements, if expressions, and if unwrapping in V language, including type checks and casts.\nSOURCE: https://github.com/vlang/v/blob/master/doc/docs.md#2025-04-21_snippet_53\n\nLANGUAGE: v\nCODE:\n```\na := 10\nb := 20\nif a < b {\n\tprintln('${a} < ${b}')\n} else if a > b {\n\tprintln('${a} > ${b}')\n} else {\n\tprintln('${a} == ${b}')\n}\n```\n\nLANGUAGE: v\nCODE:\n```\nnum := 777\ns := if num % 2 == 0 { 'even' } else { 'odd' }\nprintln(s)\n// \"odd\"\n```\n\n----------------------------------------\n\nTITLE: Load Testing with WRK\nDESCRIPTION: This snippet uses 'wrk' to perform a load test on the server, simulating 512 concurrent connections over 16 threads for 10 seconds. It helps identify server performance and behavior under load.\nSOURCE: https://github.com/vlang/v/blob/master/examples/vanilla_http_server/README.md#2025-04-21_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nwrk --connection 512 --threads 16 --duration 10s http://localhost:3000\n```\n\n----------------------------------------\n\nTITLE: String Concatenation and Appending in V\nDESCRIPTION: This snippet demonstrates string concatenation using the `+` operator and appending strings using `+=`. It also explains type constraints when performing these operations.\nSOURCE: https://github.com/vlang/v/blob/master/doc/docs.md#2025-04-21_snippet_16\n\nLANGUAGE: v\nCODE:\n```\nname := 'Bob'\nbobby := name + 'by' // + is used to concatenate strings\nprintln(bobby) // \"Bobby\"\nmut s := 'hello '\ns += 'world' // `+=` is used to append to a string\nprintln(s) // \"hello world\"\n\nage := 10\nprintln('age = ' + age) // not allowed\n> error: infix expr: cannot use `int` (right expression) as `string`\n\nage := 11\nprintln('age = ' + age.str())\n\nage := 12\nprintln('age = ${age}')\n```\n\n----------------------------------------\n\nTITLE: Testing the V Parser\nDESCRIPTION: The 'test-parser' command verifies that the V parser functions correctly with specified files, simulating human typing accuracy. It's primarily useful for identifying parser bugs but may be slow for larger files.\nSOURCE: https://github.com/vlang/v/blob/master/vlib/v/help/other/other.txt#2025-04-21_snippet_14\n\nLANGUAGE: V\nCODE:\n```\ntest-parser      Test that the V parser works with the given files, as if\n                   they were typed by a human programmer, one character at a time.\n                   NB: *very slow* for longer files (tens of seconds for 1KB .v file).\n                   Mainly useful as a parser bug finder for the V Language Server project.\n```\n\n----------------------------------------\n\nTITLE: Protect All Routes from CSRF in V Application\nDESCRIPTION: The code snippet shows how to apply CSRF protection to all routes in a V web application by modifying the before_request method. This method enforces CSRF token validation on all HTTP methods that are not marked as safe, helping to secure all requests by default.\nSOURCE: https://github.com/vlang/v/blob/master/vlib/vweb/csrf/README.md#2025-04-21_snippet_4\n\nLANGUAGE: v\nCODE:\n```\npub fn (mut app App) before_request() {\n\tapp.csrf.protect(mut app.Context)\n\t// or if you don't use `CsrfApp`:\n\t// csrf.protect(mut app.Context, csrf_config)\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing a new V package using CLI\nDESCRIPTION: This snippet demonstrates how to use the V CLI to create a new package, which automatically generates a v.mod file with project details.\nSOURCE: https://github.com/vlang/v/blob/master/doc/docs.md#2025-04-21_snippet_147\n\nLANGUAGE: sh\nCODE:\n```\nv new mypackage\nInput your project description: My nice package.\nInput your project version: (0.0.0) 0.0.1\nInput your project license: (MIT)\nInitialising ...\nComplete!\n```\n\n----------------------------------------\n\nTITLE: Using C-style For loops and labeled breaks in V\nDESCRIPTION: This snippet demonstrates traditional C-style 'for' loops in V and how to use labeled break and continue statements to control outer loops from within nested loops.\nSOURCE: https://github.com/vlang/v/blob/master/doc/docs.md#2025-04-21_snippet_60\n\nLANGUAGE: v\nCODE:\n```\nfor i := 0; i < 10; i += 2 {\n\t// Don't print 6\n\tif i == 6 {\n\t\tcontinue\n\t}\n\tprintln(i)\n}\n```\n\nLANGUAGE: v\nCODE:\n```\nouter: for i := 4; true; i++ {\n\tprintln(i)\n\tfor {\n\t\tif i < 7 {\n\t\t\tcontinue outer\n\t\t} else {\n\t\t\tbreak outer\n\t\t}\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Obtaining CSRF Token\nDESCRIPTION: Demonstrates how to obtain and store the CSRF token using `ctx.set_csrf_token` in a Veb application. The token can be used in form input fields for CSRF protection.\nSOURCE: https://github.com/vlang/v/blob/master/vlib/veb/csrf/README.md#2025-04-21_snippet_6\n\nLANGUAGE: v\nCODE:\n```\nfn (app &App) index(mut ctx) veb.Result {\n\ttoken := ctx.set_csrf_token(mut ctx)\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Request ID Integration Example in V\nDESCRIPTION: Provides a complete example of integrating the request ID middleware into a veb application. It defines the context, application structure, route handler, and middleware setup. The index route returns the current request ID.\nSOURCE: https://github.com/vlang/v/blob/master/vlib/veb/request_id/README.md#2025-04-21_snippet_8\n\nLANGUAGE: v\nCODE:\n```\n```v\nmodule main\n\nimport veb\nimport veb.request_id\n\npub struct Context {\n\tveb.Context\n\trequest_id.RequestIdContext\n}\n\npub struct App {\n\tveb.Middleware[Context]\n}\n\n@['/request-id'; get]\npub fn (app &App) index(mut ctx Context) veb.Result {\n\treturn ctx.text('Current request ID: ${ctx.request_id}')\n}\n\nfn main() {\n\tmut app := &App{}\n\tconfig := request_id.Config{\n\t\theader:      'X-Request-ID'\n\t\tforce:       false\n\t\tallow_empty: false\n\t}\n\tapp.use(request_id.middleware[Context](config))\n\tveb.run[App, Context](mut app, 8080)\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Reading User Input with Readline Object\nDESCRIPTION: Demonstrates creating a Readline instance and reading a line with a prompt, using the full Readline struct approach\nSOURCE: https://github.com/vlang/v/blob/master/vlib/readline/README.md#2025-04-21_snippet_0\n\nLANGUAGE: v\nCODE:\n```\nimport readline\n\nmut r := readline.Readline{}\nanswer := r.read_line('hello: ')!\nprintln(answer)\n```\n\n----------------------------------------\n\nTITLE: One-liner @if statement in V templates\nDESCRIPTION: This snippet shows a more compact version of the `@if` directive. The entire block, including the HTML content, is placed on a single line within the curly braces. The resulting output has no extra newlines, thus it results in a more compact output.\nSOURCE: https://github.com/vlang/v/blob/master/vlib/v/TEMPLATES.md#2025-04-21_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n\"@if bool_val { <span>This is shown if bool_val is true</span> }\"\n```\n\n----------------------------------------\n\nTITLE: Reading from Different Sources with Random Access Reader in V Language\nDESCRIPTION: This snippet demonstrates how to read CSV data using the random access reader from different sources, including files, strings, and memory buffers.\nSOURCE: https://github.com/vlang/v/blob/master/vlib/encoding/csv/README_csv_reader.md#2025-04-21_snippet_4\n\nLANGUAGE: v\nCODE:\n```\ncsv.csv_reader(file_path:file_path)\n```\n\nLANGUAGE: v\nCODE:\n```\ncsv.csv_reader_from_string(string_with_the_csv)\n```\n\nLANGUAGE: v\nCODE:\n```\ncsv.csv_reader(scr_buf:voidptr(buffer_ptr),  scr_buf_len: buffer_len)\n```\n\n----------------------------------------\n\nTITLE: Direct Access Random Number Generation in V\nDESCRIPTION: This V code snippet demonstrates how to use the `rand` module to directly generate pseudorandom numbers. Seeding is optional but can be set using `rand.seed`. The primary methods to generate these numbers include `rand.u32n()` and `rand.int()`, which require the `rand` module. Make sure to provide an appropriate range or limit as input for functions like `rand.u32n()`. The operations might not be thread-safe when using the global PRNG.\nSOURCE: https://github.com/vlang/v/blob/master/vlib/rand/README.md#2025-04-21_snippet_0\n\nLANGUAGE: v\nCODE:\n```\n// Import the rand module\nimport rand\n\n...\n\n// Optionally seed the default generator\nrand.seed([u32(3223878742), 1732001562])\n\n...\n\n// Use the top-level functions\nrand.u32n(100)!\nrand.int() // among others ...\n```\n\n----------------------------------------\n\nTITLE: Skipping Struct Fields During JSON/ORM Serialization in V\nDESCRIPTION: The `[json:'-']` and `[sql:'-']` attributes allow struct fields to be skipped during JSON and ORM serialization, respectively. This provides flexibility in customizing serialization behavior for different purposes, complementing the existing `[skip]` attribute.\nSOURCE: https://github.com/vlang/v/blob/master/changelogs0.x/0.4.md#2025-04-21_snippet_3\n\nLANGUAGE: v\nCODE:\n```\n\t- Struct fields can now be skipped during JSON/ORM serialization via `[json:'-']` and `[sql:'-']`,\n  in addition to `[skip]`. This allows having custom behavior for different serialization methods.\n```\n\n----------------------------------------\n\nTITLE: Example v.mod file structure for V package\nDESCRIPTION: This snippet shows the structure of a v.mod file, which contains metadata about the V package including name, description, version, license, and dependencies.\nSOURCE: https://github.com/vlang/v/blob/master/doc/docs.md#2025-04-21_snippet_148\n\nLANGUAGE: v\nCODE:\n```\nModule {\n    name: 'mypackage'\n    description: 'My nice package.'\n    version: '0.0.1'\n    license: 'MIT'\n    dependencies: []\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Atomic Operations in V Through C Interoperability\nDESCRIPTION: A complete example demonstrating how to use atomic operations in V through C interoperability. The code includes header inclusion, C function declarations, and a multi-threaded application with atomic compare-exchange operations.\nSOURCE: https://github.com/vlang/v/blob/master/doc/docs.md#2025-04-21_snippet_185\n\nLANGUAGE: v\nCODE:\n```\n$if windows {\n\t#include \"@VEXEROOT/thirdparty/stdatomic/win/atomic.h\"\n} $else {\n\t#include \"@VEXEROOT/thirdparty/stdatomic/nix/atomic.h\"\n}\n\n// declare functions we want to use - V does not parse the C header\nfn C.atomic_store_u32(&u32, u32)\nfn C.atomic_load_u32(&u32) u32\nfn C.atomic_compare_exchange_weak_u32(&u32, &u32, u32) bool\nfn C.atomic_compare_exchange_strong_u32(&u32, &u32, u32) bool\n\nconst num_iterations = 10000000\n\n// see section \"Global Variables\" below\n__global (\n\tatom u32 // ordinary variable but used as atomic\n)\n\nfn change() int {\n\tmut races_won_by_change := 0\n\tfor {\n\t\tmut cmp := u32(17) // addressable value to compare with and to store the found value\n\t\t// atomic version of `if atom == 17 { atom = 23 races_won_by_change++ } else { cmp = atom }`\n\t\tif C.atomic_compare_exchange_strong_u32(&atom, &cmp, 23) {\n\t\t\traces_won_by_change++\n\t\t} else {\n\t\t\tif cmp == 31 {\n\t\t\t\tbreak\n\t\t\t}\n\t\t\tcmp = 17 // re-assign because overwritten with value of atom\n\t\t}\n\t}\n\treturn races_won_by_change\n}\n\nfn main() {\n\tC.atomic_store_u32(&atom, 17)\n\tt := spawn change()\n\tmut races_won_by_main := 0\n\tmut cmp17 := u32(17)\n\tmut cmp23 := u32(23)\n\tfor i in 0 .. num_iterations {\n\t\t// atomic version of `if atom == 17 { atom = 23 races_won_by_main++ }`\n\t\tif C.atomic_compare_exchange_strong_u32(&atom, &cmp17, 23) {\n\t\t\traces_won_by_main++\n\t\t} else {\n\t\t\tcmp17 = 17\n\t\t}\n\t\tdesir := if i == num_iterations - 1 { u32(31) } else { u32(17) }\n\t\t// atomic version of `for atom != 23 {} atom = desir`\n\t\tfor !C.atomic_compare_exchange_weak_u32(&atom, &cmp23, desir) {\n\t\t\tcmp23 = 23\n\t\t}\n\t}\n\traces_won_by_change := t.wait()\n\tatom_new := C.atomic_load_u32(&atom)\n\tprintln('atom: ${atom_new}, #exchanges: ${races_won_by_main + races_won_by_change}')\n\t// prints `atom: 31, #exchanges: 10000000`)\n\tprintln('races won by\\n- `main()`: ${races_won_by_main}\\n- `change()`: ${races_won_by_change}')\n}\n```\n\n----------------------------------------\n\nTITLE: Visualizing FSM with Graphviz xdot (V and Bash)\nDESCRIPTION: This command utilizes `xdot` to visualize the .dot file generated by `fsm_graph.v`. It pipes the output of the V program to `xdot` for display.  The V program parses the fsm definition from a .v file.\nSOURCE: https://github.com/vlang/v/blob/master/vlib/datatypes/fsm/README.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n\"v run vlib/datatypes/fsm/tools/fsm_graph.v -f vlib/datatypes/fsm/fsm_test.v | xdot -\"\n```\n\n----------------------------------------\n\nTITLE: Running Multiple Test Files in V\nDESCRIPTION: Commands to run multiple test files recursively in a folder, with parallel execution based on available cores.\nSOURCE: https://github.com/vlang/v/blob/master/TESTS.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nv test folder\nv -stats test folder\n```\n\n----------------------------------------\n\nTITLE: Running Full Parallel Simulation with GUI and Image Output in V\nDESCRIPTION: This snippet explains how to compile and run the full parallel simulation that includes a graphical user interface and outputs images. It requires the V programming language and the full.v file.\nSOURCE: https://github.com/vlang/v/blob/master/examples/pendulum-simulation/README.md#2025-04-21_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\n$ v -gc boehm -prod full.v\n$ ./full # execute ./full -h for more info\n```\n\n----------------------------------------\n\nTITLE: Custom Generator Random Number Generation in V\nDESCRIPTION: This V code snippet illustrates how to generate pseudorandom numbers using a custom generator, such as `PCG32RNG`. After importing the necessary modules and initializing the generator with `mut`, it can be optionally seeded using `seed.time_seed_array()`. Important functions available include `rng.u32n()` and `rng.int()`. Dependencies include the `rand`, `rand.seed`, and `rand.pcg32` modules. Ensure the custom generator implements the `PRNG` interface, and be cautious with non-thread safe operations within the global PRNG context.\nSOURCE: https://github.com/vlang/v/blob/master/vlib/rand/README.md#2025-04-21_snippet_1\n\nLANGUAGE: v\nCODE:\n```\n// Import the rand module\nimport rand\nimport rand.seed\n\n// Import the module of the generator you want to use\nimport rand.pcg32\n\n...\n\n// Initialise the generator struct (note the `mut`)\nmut rng := &rand.PRNG(pcg32.PCG32RNG{})\n\n// Optionally seed the generator\nrng.seed(seed.time_seed_array(pcg32.seed_len))\n\n...\n\n// Use functions of your choice\nrng.u32n(100)!\nrng.int() // among others ...\n```\n\n----------------------------------------\n\nTITLE: Connecting to a SQLite Database for Function Call API in V\nDESCRIPTION: This code snippet establishes a connection to an in-memory SQLite database using the `sqlite.connect` function for use with the Function Call API.  It also includes a `defer` statement to ensure the database connection is closed when the function exits.\nSOURCE: https://github.com/vlang/v/blob/master/vlib/orm/README.md#2025-04-21_snippet_11\n\nLANGUAGE: v\nCODE:\n```\nmut db := sqlite.connect(':memory:')!\n    defer { db.close() or {} }\n```\n\n----------------------------------------\n\nTITLE: Parameter Evaluation Order in V Functions\nDESCRIPTION: Explains that the evaluation order of function parameters is not guaranteed in V. Shows a code example demonstrating this behavior with the dump function.\nSOURCE: https://github.com/vlang/v/blob/master/doc/docs.md#2025-04-21_snippet_86\n\nLANGUAGE: v\nCODE:\n```\nfn f(a1 int, a2 int, a3 int) {\n\tdump(a1 + a2 + a3)\n}\n\nfn main() {\n\tf(dump(100), dump(200), dump(300))\n}\n```\n\n----------------------------------------\n\nTITLE: Using Stack Data Structure in V\nDESCRIPTION: This snippet demonstrates how to create and use a stack data structure in the V language using the datatypes module. The stack is initialized with integers, and an element is pushed onto it before printing.\nSOURCE: https://github.com/vlang/v/blob/master/vlib/datatypes/README.md#2025-04-21_snippet_0\n\nLANGUAGE: v\nCODE:\n```\nimport datatypes\n\nmut stack := datatypes.Stack[int]{}\\nstack.push(1)\\nprintln(stack)\n```\n\n----------------------------------------\n\nTITLE: SQL Server Connection and Query in V\nDESCRIPTION: This V code snippet demonstrates how to connect to a SQL Server database using the `mssql` module, execute a simple query to retrieve the current database name, and assert the result. It shows the basic usage of the `mssql` module, including creating a connection configuration, establishing a connection, executing a query, and closing the connection.\nSOURCE: https://github.com/vlang/v/blob/master/vlib/db/mssql/README.md#2025-04-21_snippet_1\n\nLANGUAGE: v\nCODE:\n```\nimport mssql\n\nfn test_example() ? {\n\t// connect to server\n\tconfig := mssql.Config{\n\t\tdriver: 'ODBC Driver 17 for SQL Server'\n\t\tserver: 'tcp:localhost'\n\t\tuid: '<your username>'\n\t\tpwd: '<your password>'\n\t}\n\n\tmut conn := mssql.Connection{}\n\n\tconn.connect(config.get_conn_str())?\n\n\tdefer {\n\t\tconn.close()\n\t}\n\n\t// get current db name\n\tmut query := 'SELECT DB_NAME()'\n\tmut res := conn.query(query)?\n\tassert res == mssql.Result{\n\t\trows: [mssql.Row{\n\t\t\tvals: ['master']\n\t\t}]\n\t\tnum_rows_affected: -1\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Global Middleware in Veb (V)\nDESCRIPTION: Shows how to register a global middleware function that will be applied to all routes in a Veb application.\nSOURCE: https://github.com/vlang/v/blob/master/vlib/veb/README.md#2025-04-21_snippet_18\n\nLANGUAGE: v\nCODE:\n```\nfn main() {\n\tmut app := &App{}\n\n\tapp.use(handler: check_cookie_policy)\n\n\tveb.run[App, Context](mut app, 8080)\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Continuous Group Saving in V\nDESCRIPTION: This snippet demonstrates how to initialize and use continuous group saving functionality using the V regex module. To activate continuous saving, the `group_csave_flag` must be set to true. The code showcases regex pattern matching on a URL and prints the captured groups continuously without raising errors if the array overflows.\nSOURCE: https://github.com/vlang/v/blob/master/vlib/regex/README.md#2025-04-21_snippet_3\n\nLANGUAGE: v\nCODE:\n```\nimport regex\n\nfn main() {\n\ttxt := 'http://www.ciao.mondo/hello/pippo12_/pera.html'\n\tquery := r'(?P<format>https?)|(?P<format>ftps?)://(?P<token>[\\w_]+.)+'\n\n\tmut re := regex.regex_opt(query) or { panic(err) }\n\t// println(re.get_code())   // uncomment to see the print of the regex execution code\n\tre.debug = 2 // enable maximum log\n\tprintln('String: ${txt}')\n\tprintln('Query : ${re.get_query()}')\n\tre.debug = 0 // disable log\n\tre.group_csave_flag = true\n\tstart, end := re.match_string(txt)\n\tif start >= 0 {\n\t\tprintln('Match (${start}, ${end}) => [${txt[start..end]}]')\n\t} else {\n\t\tprintln('No Match')\n\t}\n\n\tif re.group_csave_flag == true && start >= 0 && re.group_csave.len > 0 {\n\t\tprintln('cg: ${re.group_csave}')\n\t\tmut cs_i := 1\n\t\tfor cs_i < re.group_csave[0] * 3 {\n\t\t\tg_id := re.group_csave[cs_i]\n\t\t\tst := re.group_csave[cs_i + 1]\n\t\t\ten := re.group_csave[cs_i + 2]\n\t\t\tprintln('cg[${g_id}] ${st} ${en}:[${txt[st..en]}]')\n\t\t\tcs_i += 3\n\t\t}\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Bitfield Enum with @[flag] Attribute in V\nDESCRIPTION: Demonstrates the use of the @[flag] attribute to enable enum types as bitfields. The example shows bitwise operations, flag testing, and conversions for a BitField enum.\nSOURCE: https://github.com/vlang/v/blob/master/doc/docs.md#2025-04-21_snippet_151\n\nLANGUAGE: v\nCODE:\n```\n@[flag]\nenum BitField {\n\tread\n\twrite\n\tother\n}\n\nfn main() {\n\tassert 1 == int(BitField.read)\n\tassert 2 == int(BitField.write)\n\tmut bf := BitField.read\n\tassert bf.has(.read | .other) // test if *at least one* of the flags is set\n\tassert !bf.all(.read | .other) // test if *all* of the flags are set\n\tbf.set(.write | .other)\n\tassert bf.has(.read | .write | .other)\n\tassert bf.all(.read | .write | .other)\n\tbf.toggle(.other)\n\tassert bf == BitField.read | .write\n\tassert bf.all(.read | .write)\n\tassert !bf.has(.other)\n\tempty := BitField.zero()\n\tassert empty.is_empty()\n\tassert !empty.has(.read)\n\tassert !empty.has(.write)\n\tassert !empty.has(.other)\n\tmut full := empty\n\tfull.set_all()\n\tassert int(full) == 7 // 0x01 + 0x02 + 0x04\n\tassert full == .read | .write | .other\n\tmut v := full\n\tv.clear(.read | .other)\n\tassert v == .write\n\tv.clear_all()\n\tassert v == empty\n\tassert BitField.read == BitField.from('read')!\n\tassert BitField.other == BitField.from('other')!\n\tassert BitField.write == BitField.from(2)!\n\tassert BitField.zero() == BitField.from('')!\n}\n```\n\n----------------------------------------\n\nTITLE: Running Compiler Tests with Filtering\nDESCRIPTION: Command to run specific compiler tests using environment variable filtering.\nSOURCE: https://github.com/vlang/v/blob/master/TESTS.md#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nVTEST_ONLY=mismatch ./v vlib/v/compiler_errors_test.v\n```\n\n----------------------------------------\n\nTITLE: Retrieving TOML values in V\nDESCRIPTION: This example shows how to retrieve values from a TOML document using the `value()` and `value_opt()` methods.  It demonstrates accessing nested values using a query string syntax, providing default values with `default_to()`, and checking for the existence of values with `value_opt()`. It also shows how to continue querying from a section of the document.\nSOURCE: https://github.com/vlang/v/blob/master/vlib/toml/README.md#2025-04-21_snippet_2\n\nLANGUAGE: v\nCODE:\n```\nimport toml\n\nconst toml_text = '\nval = true\n\n[table]\narray = [\n\t{ a = \"A\" },\n\t{ b = \"B\" }\n]\n'\n\ndoc := toml.parse_text(toml_text) or { panic(err) }\n\nassert doc.value('val').bool() == true\nassert doc.value('table.array[0].a').string() == 'A'\n\n// Provides a default value\nassert doc.value('non.existing').default_to(false).bool() == false\n\n// Check if value exist\n// doc.value_opt('should.exist') or { ... }\n// or\nif value := doc.value_opt('table.array[1].b') {\n\tassert value.string() == 'B'\n}\n\n// You can pass parts of the TOML document around\n// and still use .value()/.value_opt() to get the values\narr := doc.value('table.array')\nassert arr.value('[1].b').string() == 'B'\n```\n\n----------------------------------------\n\nTITLE: Configuring Controller with Hostname in V\nDESCRIPTION: Demonstrates how to set up a controller with a specific hostname and register routes. Requests to example.com will be handled by this controller.\nSOURCE: https://github.com/vlang/v/blob/master/vlib/veb/README.md#2025-04-21_snippet_24\n\nLANGUAGE: v\nCODE:\n```\nstruct Example {}\n\n// You can only access this route at example.com: http://example.com/\npub fn (app &Example) index(mut ctx Context) veb.Result {\n\treturn ctx.text('Example')\n}\n```\n\nLANGUAGE: v\nCODE:\n```\nmut example_app := &Example{}\n// set the controllers hostname to 'example.com' and handle all routes starting with '/',\n// we handle requests with any route to 'example.com'\napp.register_controller[Example, Context]('example.com', '/', mut example_app)!\n```\n\n----------------------------------------\n\nTITLE: Including C Header Files in V\nDESCRIPTION: Demonstrates how to include a C header file in V code. Note that this simply puts the #include statement in the generated C code, but V doesn't parse the header file's contents.\nSOURCE: https://github.com/vlang/v/blob/master/doc/docs.md#2025-04-21_snippet_188\n\nLANGUAGE: v\nCODE:\n```\n#include <stdio.h>\n```\n\n----------------------------------------\n\nTITLE: Chacha20Poly1305 Encryption/Decryption Example in V\nDESCRIPTION: This V code snippet demonstrates how to use the `x.crypto.chacha20poly1305` module to encrypt and decrypt a message. It showcases the usage of key, nonce, and additional authenticated data (AAD) parameters. It asserts the equality between the original message and decrypted message.\nSOURCE: https://github.com/vlang/v/blob/master/vlib/x/crypto/chacha20poly1305/README.md#2025-04-21_snippet_0\n\nLANGUAGE: v\nCODE:\n```\nimport encoding.hex\nimport x.crypto.chacha20poly1305\n\nfn main() {\n\t// plaintext message to be encrypted and authenticated\n\tmessage := \"Ladies and Gentlemen of the class of '99: If I could offer you only one tip for the future, sunscreen would be it.\"\n\t\t.bytes()\n\n\t// sets your secure random key\n\tkey := hex.decode('808182838485868788898a8b8c8d8e8f909192939495969798999a9b9c9d9e9f')!\n\t// give yours nonce\n\tnonce := hex.decode('070000004041424344454647')!\n\t// yours additional data\n\taad := hex.decode('50515253c0c1c2c3c4c5c6c7')!\n\n\t// lets doing authenticated encryption\n\tciphertext := chacha20poly1305.encrypt(message, key, nonce, aad)!\n\n\t// lets perform decryption back\n\tplaintext := chacha20poly1305.decrypt(ciphertext, key, nonce, aad)!\n\n\tassert plaintext == message\n}\n```\n\n----------------------------------------\n\nTITLE: Generating a .dot file for FSM Visualization (V and Bash)\nDESCRIPTION: This snippet demonstrates how to generate a .dot file representing the FSM defined in a V source file using the `fsm_graph.v` tool. The output .dot file can then be used for visualization using tools like Graphviz.\nSOURCE: https://github.com/vlang/v/blob/master/vlib/datatypes/fsm/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n\"v run vlib/datatypes/fsm/tools/fsm_graph.v -f vlib/datatypes/fsm/fsm_test.v > graph.dot\"\n```\n\n----------------------------------------\n\nTITLE: Running Parallel Simulation with Image Worker in V\nDESCRIPTION: This snippet explains how to compile and run the parallel simulation that includes an image worker for improved processing, needing the V programming language with the specified file.\nSOURCE: https://github.com/vlang/v/blob/master/examples/pendulum-simulation/README.md#2025-04-21_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\n$ v -gc boehm -prod parallel_with_iw.v\n$ ./parallel_with_iw # execute ./parallel_with_iw -h for more info\n```\n\n----------------------------------------\n\nTITLE: Initializing Node.js Project\nDESCRIPTION: Shell commands to initialize a Node.js project for the example.\nSOURCE: https://github.com/vlang/v/blob/master/examples/js_dom_draw/README.md#2025-04-21_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ncd examples/js_dom_draw/\nnpm init -y\n```\n\n----------------------------------------\n\nTITLE: Restricting Endpoints by Host in V\nDESCRIPTION: This snippet shows how to restrict an endpoint to a specific host using the host attribute. It differentiates responses between hosts to manage multiple APIs or web applications.\nSOURCE: https://github.com/vlang/v/blob/master/vlib/veb/README.md#2025-04-21_snippet_6\n\nLANGUAGE: v\nCODE:\n```\n@['/'; host: 'example.com']\npub fn (app &App) hello_web(mut ctx Context) veb.Result {\n\treturn app.text('Hello World')\n}\n\n@['/'; host: 'api.example.org']\npub fn (app &App) hello_api(mut ctx Context) veb.Result {\n\treturn ctx.text('Hello API')\n}\n\n// define the handler without a host attribute last if you have conflicting paths.\n@['/']\npub fn (app &App) hello_others(mut ctx Context) veb.Result {\n\treturn ctx.text('Hello Others')\n}\n```\n\n----------------------------------------\n\nTITLE: Serving Single Static Asset in Veb (V)\nDESCRIPTION: Demonstrates how to serve a single static file at a specific URL path in a Veb application.\nSOURCE: https://github.com/vlang/v/blob/master/vlib/veb/README.md#2025-04-21_snippet_12\n\nLANGUAGE: v\nCODE:\n```\napp.serve_static('/path/main.css',  'static/css/main.css')!\n```\n\n----------------------------------------\n\nTITLE: Accessing String Characters and Runes in V\nDESCRIPTION: This snippet illustrates how to retrieve the byte value and ASCII representation of the first character in a string, showing the difference between string indexing and using the `.ascii_str()` method on a byte.\nSOURCE: https://github.com/vlang/v/blob/master/doc/docs.md#2025-04-21_snippet_12\n\nLANGUAGE: v\nCODE:\n```\ncountry := 'Netherlands'\nprintln(country[0]) // Output: 78\nprintln(country[0].ascii_str()) // Output: N\n```\n\n----------------------------------------\n\nTITLE: Defining a V module with a public function\nDESCRIPTION: This snippet demonstrates how to define a V module with a public function. The module name should match the package name used in the v.mod file.\nSOURCE: https://github.com/vlang/v/blob/master/doc/docs.md#2025-04-21_snippet_149\n\nLANGUAGE: v\nCODE:\n```\nmodule mypackage\n\npub fn hello_world() {\n    println('Hello World!')\n}\n```\n\n----------------------------------------\n\nTITLE: Defining App Structure and Index Route in V\nDESCRIPTION: This snippet defines the structures for the web application and the index route that returns a text response indicating access to the web server. The App structure holds a secret key, while the Context structure contains request-specific data.\nSOURCE: https://github.com/vlang/v/blob/master/vlib/veb/README.md#2025-04-21_snippet_0\n\nLANGUAGE: v\nCODE:\n```\nmodule main\n\nimport veb\n\npub struct User {\npub mut:\n\tname string\n\tid   int\n}\n\n// Our context struct must embed `veb.Context`!\npub struct Context {\n\tveb.Context\npub mut:\n\tuser       User\n\tsession_id string\n}\n\npub struct App {\npub:\n\tsecret_key string\n}\n\n// This is how endpoints are defined in veb. This is the index route\npub fn (app &App) index(mut ctx Context) veb.Result {\n\treturn ctx.text('Hello V! The secret key is \"${app.secret_key}\"')\n}\n\nfn main() {\n\tmut app := &App{\n\t\tsecret_key: 'secret'\n\t}\n\t// Pass the App and context type and start the web server on port 8080\n\tveb.run[App, Context](mut app, 8080)\n}\n```\n\n----------------------------------------\n\nTITLE: Checking a Parsed File in V\nDESCRIPTION: This snippet illustrates how to check a single parsed file using the newly created checker. Errors and warnings are available in 'checker.errors' and 'checker.warnings'.\nSOURCE: https://github.com/vlang/v/blob/master/vlib/v/README.md#2025-04-21_snippet_4\n\nLANGUAGE: v\nCODE:\n```\nchecker.check(parsed_file)\n```\n\n----------------------------------------\n\nTITLE: Compiling JS for Browser with V\nDESCRIPTION: This Bash command uses the V compiler to build the JavaScript version of the cube example for the browser. It generates a .js file from a .v file using the specified backend option. Ensure V language is installed and set up correctly.\nSOURCE: https://github.com/vlang/v/blob/master/examples/js_dom_cube/README.md#2025-04-21_snippet_0\n\nLANGUAGE: Bash\nCODE:\n```\nv -b js_browser examples/js_dom_cube/cube.js.v\n```\n\n----------------------------------------\n\nTITLE: Decoding ASN.1 DER Bytes in V\nDESCRIPTION: Demonstrates how to decode ASN.1 DER-encoded bytes into an Element object and extract the underlying data.\nSOURCE: https://github.com/vlang/v/blob/master/vlib/x/encoding/asn1/DOCS.md#2025-04-21_snippet_2\n\nLANGUAGE: v\nCODE:\n```\nel := asn1.decode([u8(0x13), 0x02, 0x68, 0x69])!\nps := el.into_object[asn1.PrintableString]()!\n```\n\n----------------------------------------\n\nTITLE: Handling Subcommands with Flag Parsing\nDESCRIPTION: This example shows how to handle subcommands using the `flag` module. It checks if the second argument is a subcommand and parses flags accordingly.  The `skip: 2` argument in `flag.to_struct` skips the program name and the subcommand. It demonstrates defining separate structs for different subcommands.\nSOURCE: https://github.com/vlang/v/blob/master/vlib/flag/README.md#2025-04-21_snippet_1\n\nLANGUAGE: v\nCODE:\n```\n```v\nimport flag\nimport os\n\nstruct Config {\n\tshow_help bool @[long: help; short: h; xdoc: 'Show version and exit']\n}\n\nstruct ConfigSub {\n\tshow_help bool @[long: help; short: h; xdoc: 'Show version and exit']\n\tdo_stuff  bool @[xdoc: 'Do stuff']\n}\n\nfn main() {\n\t// Handle sub command `sub` if provided\n\tif os.args.len > 1 && !os.args[1].starts_with('-') {\n\t\tif os.args[1] == 'sub' {\n\t\t\tconfig_for_sub, _ := flag.to_struct[ConfigSub](os.args, skip: 2)! // NOTE the `skip: 2`\n\t\t\tif config_for_sub.do_stuff {\n\t\t\t\tprintln('Working...')\n\t\t\t\texit(0)\n\t\t\t}\n\t\t\tif config_for_sub.show_help {\n\t\t\t\tprintln(flag.to_doc[ConfigSub](\n\t\t\t\t\tdescription: 'My sub command'\n\t\t\t\t)!)\n\t\t\t\texit(0)\n\t\t\t}\n\t\t}\n\t}\n\n\tconfig, _ := flag.to_struct[Config](os.args, skip: 1)!\n\n\tif config.show_help {\n\t\tprintln(flag.to_doc[Config](\n\t\t\tdescription: 'My application'\n\t\t)!)\n\t\texit(0)\n\t}\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Reading CSV File Header in V Language\nDESCRIPTION: This snippet demonstrates how to read a CSV file header and utilize it for easier cell access. It constructs a header dictionary and shows how to read typed values based on the header mapping.\nSOURCE: https://github.com/vlang/v/blob/master/vlib/encoding/csv/README_csv_reader.md#2025-04-21_snippet_7\n\nLANGUAGE: v\nCODE:\n```\nimport encoding.csv\n\nconst txt = '\\na,b,c\\n0,pippo,1.2\\n1,pero,2.3\\n'\n\nfn main() {\n\tmut csvr := csv.csv_reader_from_string(txt)!;\n\n\t// try to create the header, it needs the header and\n\t// at least one row of data\n\tcsvr.build_header_dict(csv.GetHeaderConf{})!;\n\tprintln('Header: ${csvr.header_list}');\n\n\t// simple cell read using the header map\n\tprintln(csvr.get_cell(x: csvr.header_map['b'], y: 1)!);\n\n\t// get typed value instead of a string\n\tprintln(csvr.get_cellt(x: csvr.header_map['b'], y: 2)! as string);\n\n\tcsvr.dispose_csv_reader();\n}\n```\n\n----------------------------------------\n\nTITLE: Redeclaring C Structs in V\nDESCRIPTION: Shows how to redeclare a C struct in V to access its fields. Only the fields needed in V code need to be declared.\nSOURCE: https://github.com/vlang/v/blob/master/doc/docs.md#2025-04-21_snippet_189\n\nLANGUAGE: v\nCODE:\n```\nstruct C.NameOfTheStruct {\n\ta_field int\n}\n```\n\n----------------------------------------\n\nTITLE: Function Call Tracing in V\nDESCRIPTION: Shows how to use hooks to trace function calls in V by adding before and after call hooks using the v.debug module with the -d trace compiler flag.\nSOURCE: https://github.com/vlang/v/blob/master/doc/docs.md#2025-04-21_snippet_178\n\nLANGUAGE: v\nCODE:\n```\nimport v.debug\n\nfn main() {\n\thook1 := debug.add_before_call(fn (fn_name string) {\n\t\tprintln('> before ${fn_name}')\n\t})\n\thook2 := debug.add_after_call(fn (fn_name string) {\n\t\tprintln('> after ${fn_name}')\n\t})\n\tanon := fn () {\n\t\tprintln('call')\n\t}\n\tanon()\n\n\t// optionally you can remove the hooks:\n\tdebug.remove_before_call(hook1)\n\tdebug.remove_after_call(hook2)\n\tanon()\n}\n```\n\n----------------------------------------\n\nTITLE: Compiling and Running V Web Crawler\nDESCRIPTION: Commands to compile the V source code into an executable and run the web crawler. This snippet shows two methods: generating an executable first, and compiling and running in one step.\nSOURCE: https://github.com/vlang/v/blob/master/examples/web_crawler/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nv web_crawler.v\n./web_crawler\n```\n\nLANGUAGE: bash\nCODE:\n```\nv run web_crawler.v\n```\n\n----------------------------------------\n\nTITLE: Casting and navigating the Any type in V\nDESCRIPTION: This snippet demonstrates how to cast and navigate the `Any` type after decoding a JSON string. It shows how to use the `as_map()` method to cast the `Any` type to a map and then access the values by key. The `int()` and `str()` methods are used to cast the values to their respective types. It imports `x.json2` and `net.http` modules.\nSOURCE: https://github.com/vlang/v/blob/master/vlib/x/json2/README.md#2025-04-21_snippet_3\n\nLANGUAGE: v\nCODE:\n```\nimport x.json2\nimport net.http\n\nfn main() {\n\tresp := http.get('https://reqres.in/api/products/1')!\n\n\traw_product := json2.decode[json2.Any](resp.body)!\n\n\tproduct := raw_product.as_map()\n\tdata := product['data'] as map[string]json2.Any\n\n\tid := data['id'].int() // 1\n\tname := data['name'].str() // cerulean\n\tyear := data['year'].int() // 2000\n}\n```\n\n----------------------------------------\n\nTITLE: Running ASN.1 Benchmark in V Language\nDESCRIPTION: This code snippet benchmarks the ASN.1 encode and decode operations in V language and outputs average execution times. It runs the benchmark using the command line with V's `run` command.\nSOURCE: https://github.com/vlang/v/blob/master/vlib/x/encoding/asn1/bench/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n(dev) $ v run bench/bench.v\nBenchmarking ASN.1 encode...\nAverage example encode time: 13 µs\nBenchmarking ASN.1 decode (with asn.decode)...\nAverage (asn1.decode) decode time: 3 µs\nBenchmarking ASN.1 decode with Example.decode)...\nAverage (Example.decode) decode time: 2 µs\n```\n\n----------------------------------------\n\nTITLE: Configuring NPM Scripts\nDESCRIPTION: These scripts are added to package.json to facilitate building the JavaScript file with V and starting the Node.js server. The 'start' script builds the JavaScript and runs the server, while the 'build' script compiles the JavaScript using the V language.\nSOURCE: https://github.com/vlang/v/blob/master/examples/js_dom_cube/README.md#2025-04-21_snippet_2\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  ...\n  \"scripts\": {\n    \"start\": \"npm run build && node server.js\",\n    \"build\": \"v -b js_browser cube.js.v\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Git Pre-commit Hook for V\nDESCRIPTION: Commands to set up a pre-commit hook that automatically formats V code before committing.\nSOURCE: https://github.com/vlang/v/blob/master/CONTRIBUTING.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncp cmd/tools/git_pre_commit_hook.vsh .git/hooks/pre-commit\nchmod 755 .git/hooks/pre-commit\n```\n\n----------------------------------------\n\nTITLE: Defining EventBus Handlers in V\nDESCRIPTION: This snippet defines the structure and signature for event handlers used in the EventBus system. It demonstrates how to define an event handler function that matches the required signature in V, including the use of a custom ClickEvent struct.\nSOURCE: https://github.com/vlang/v/blob/master/vlib/eventbus/README.md#2025-04-21_snippet_0\n\nLANGUAGE: v oksyntax\nCODE:\n```\nfn cb(receiver voidptr, args voidptr, sender voidptr) {\n}\n\n// Since V can map structs to voidptr, this also works\nstruct ClickEvent {\n\tx int\n\ty int\n}\n\n// Example case where publisher sends ClickEvent as args.\nfn on_press(receiver voidptr, e &ClickEvent, sender voidptr) {\n\tprintln(e.x)\n\t// your code here...\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Not Found Page in V Web Server\nDESCRIPTION: This snippet shows how to implement a custom not found endpoint for the V web server. It allows you to define the response for unmatched routes, replacing the default 404 page.\nSOURCE: https://github.com/vlang/v/blob/master/vlib/veb/README.md#2025-04-21_snippet_8\n\nLANGUAGE: v\nCODE:\n```\npub fn (mut ctx Context) not_found() veb.Result {\n\t// set HTTP status 404\n\tctx.res.set_status(.not_found)\n\treturn ctx.html('<h1>Page not found!</h1>')\n}\n```\n\n----------------------------------------\n\nTITLE: V crun Usage Example\nDESCRIPTION: This snippet shows the usage of the `v crun` command. It demonstrates how to execute a V file, directory or standard input with optional command-line arguments. The `v crun` command is similar to `v run`, but it recompiles only when project files change.\nSOURCE: https://github.com/vlang/v/blob/master/vlib/v/help/common/crun.txt#2025-04-21_snippet_0\n\nLANGUAGE: V\nCODE:\n```\n\"v [build flags] crun <file.v|directory|-> [arguments...]\"\n```\n\n----------------------------------------\n\nTITLE: Defining a Struct for ORM with Function Call API in V\nDESCRIPTION: This code snippet defines a struct `User` with ORM attributes for use with the Function Call API. It specifies table name, primary key, auto-incrementing column, and SQL type for a timestamp field.\nSOURCE: https://github.com/vlang/v/blob/master/vlib/orm/README.md#2025-04-21_snippet_10\n\nLANGUAGE: v\nCODE:\n```\n@[table: 'sys_users']\nstruct User {\n\tid      int      @[primary;serial]\n\tname    string\n\tage     int\n\trole    string\n\tstatus  int\n\tsalary  int\n\ttitle   string\n\tscore   int\n\tcreated_at ?time.Time @[sql_type: 'TIMESTAMP']\n}\n```\n\n----------------------------------------\n\nTITLE: Using Function Types with Compatible Functions in V\nDESCRIPTION: Demonstrates how functions with compatible signatures can be used with function types through duck-typing, without explicit type declarations.\nSOURCE: https://github.com/vlang/v/blob/master/doc/docs.md#2025-04-21_snippet_100\n\nLANGUAGE: v\nCODE:\n```\nfn uppercase(s string) string {\n\treturn s.to_upper()\n}\n\n// now `uppercase` can be used everywhere where Filter is expected\n```\n\n----------------------------------------\n\nTITLE: SQLite3 Integration in V\nDESCRIPTION: A complete example showing how to integrate the SQLite3 C library in V, including struct declarations, function declarations, and practical usage with callbacks.\nSOURCE: https://github.com/vlang/v/blob/master/doc/docs.md#2025-04-21_snippet_194\n\nLANGUAGE: v\nCODE:\n```\n#flag freebsd -I/usr/local/include -L/usr/local/lib\n#flag -lsqlite3\n#include \"sqlite3.h\"\n// See also the example from https://www.sqlite.org/quickstart.html\npub struct C.sqlite3 {\n}\n\npub struct C.sqlite3_stmt {\n}\n\ntype FnSqlite3Callback = fn (voidptr, int, &&char, &&char) int\n\nfn C.sqlite3_open(&char, &&C.sqlite3) int\n\nfn C.sqlite3_close(&C.sqlite3) int\n\nfn C.sqlite3_column_int(stmt &C.sqlite3_stmt, n int) int\n\n// ... you can also just define the type of parameter and leave out the C. prefix\n\nfn C.sqlite3_prepare_v2(&C.sqlite3, &char, int, &&C.sqlite3_stmt, &&char) int\n\nfn C.sqlite3_step(&C.sqlite3_stmt)\n\nfn C.sqlite3_finalize(&C.sqlite3_stmt)\n\nfn C.sqlite3_exec(db &C.sqlite3, sql &char, cb FnSqlite3Callback, cb_arg voidptr, emsg &&char) int\n\nfn C.sqlite3_free(voidptr)\n\nfn my_callback(arg voidptr, howmany int, cvalues &&char, cnames &&char) int {\n\tunsafe {\n\t\tfor i in 0 .. howmany {\n\t\t\tprint('| ${cstring_to_vstring(cnames[i])}: ${cstring_to_vstring(cvalues[i]):20} ')\n\t\t}\n\t}\n\tprintln('|')\n\treturn 0\n}\n\nfn main() {\n\tdb := &C.sqlite3(unsafe { nil }) // this means `sqlite3* db = 0`\n\t// passing a string literal to a C function call results in a C string, not a V string\n\tC.sqlite3_open(c'users.db', &db)\n\t// C.sqlite3_open(db_path.str, &db)\n\tquery := 'select count(*) from users'\n\tstmt := &C.sqlite3_stmt(unsafe { nil })\n\t// Note: You can also use the `.str` field of a V string,\n\t// to get its C style zero terminated representation\n\tC.sqlite3_prepare_v2(db, &char(query.str), -1, &stmt, 0)\n\tC.sqlite3_step(stmt)\n\tnr_users := C.sqlite3_column_int(stmt, 0)\n\tC.sqlite3_finalize(stmt)\n\tprintln('There are ${nr_users} users in the database.')\n\n\terror_msg := &char(0)\n\tquery_all_users := 'select * from users'\n\trc := C.sqlite3_exec(db, &char(query_all_users.str), my_callback, voidptr(7), &error_msg)\n\tif rc != C.SQLITE_OK {\n\t\teprintln(unsafe { cstring_to_vstring(error_msg) })\n\t\tC.sqlite3_free(error_msg)\n\t}\n\tC.sqlite3_close(db)\n}\n```\n\n----------------------------------------\n\nTITLE: Parsing Multiple Files in V\nDESCRIPTION: This snippet shows how to parse a set of files from given paths using the 'parser.parse_files' function. It requires references to a table, preferences, and scope.\nSOURCE: https://github.com/vlang/v/blob/master/vlib/v/README.md#2025-04-21_snippet_2\n\nLANGUAGE: v\nCODE:\n```\nimport v.parser\n\npaths := ['']\n// table, pref and scope needs to be passed as reference\nparsed_files := parser.parse_files(paths, table, &pref, &scope)\n```\n\n----------------------------------------\n\nTITLE: Implementing Database Pool for PostgreSQL in Vweb\nDESCRIPTION: Example demonstrating how to create a database connection pool for PostgreSQL in a vweb application to support multithreaded request handling.\nSOURCE: https://github.com/vlang/v/blob/master/vlib/vweb/README.md#2025-04-21_snippet_25\n\nLANGUAGE: v\nCODE:\n```\nmodule main\n\nimport vweb\nimport db.pg\n\nstruct App {\n\tvweb.Context\n\tdb_handle vweb.DatabasePool[pg.DB]\nmut:\n\tdb pg.DB\n}\n\nfn get_database_connection() pg.DB {\n\t// insert your own credentials\n\treturn pg.connect(user: 'user', password: 'password', dbname: 'database') or { panic(err) }\n}\n\nfn main() {\n\t// create the database pool and pass our `get_database_connection` function as handler\n\tpool := vweb.database_pool(handler: get_database_connection)\n\n\t// no need to set the `db` field\n\tvweb.run(&App{\n\t\tdb_handle: pool\n\t}, 8080)\n}\n```\n\n----------------------------------------\n\nTITLE: One-liner @for loop in V templates\nDESCRIPTION: This example shows a compact one-line `@for` directive. It is similar to the previous example, but without the newlines, leading to a more compact output.\nSOURCE: https://github.com/vlang/v/blob/master/vlib/v/TEMPLATES.md#2025-04-21_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n\"@for i, val in my_vals { <span>$i - $val</span> }\"\n```\n\n----------------------------------------\n\nTITLE: Basic Request ID Configuration in V\nDESCRIPTION: Configures the `request_id.Config` struct with a header name and ID generator function. The `header` specifies the HTTP header to use for the request ID, and the `generator` defines a function to create unique IDs using `rand.uuid_v4`. This configuration is used to initialize the request ID middleware.\nSOURCE: https://github.com/vlang/v/blob/master/vlib/veb/request_id/README.md#2025-04-21_snippet_1\n\nLANGUAGE: v\nCODE:\n```\n```v\nimport rand\nimport veb.request_id\n\nconst request_id_config = request_id.Config{\n\theader:    'X-Request-ID'\n\tgenerator: rand.uuid_v4\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Custom Generator and Conditional Execution Example in V\nDESCRIPTION: Shows an example with both a custom ID generator and conditional middleware execution. The ID generator creates IDs prefixed with 'app-', and the middleware is skipped for requests to the `/public` endpoint.  This example combines the advanced features of the request ID middleware.\nSOURCE: https://github.com/vlang/v/blob/master/vlib/veb/request_id/README.md#2025-04-21_snippet_9\n\nLANGUAGE: v\nCODE:\n```\n```v\nimport veb\nimport rand\nimport veb.request_id\n\nconfig := request_id.Config{\n\tgenerator: fn () string {\n\t\treturn 'app-${rand.uuid_v4()}'\n\t}\n\tnext:      fn (ctx &veb.Context) bool {\n\t\treturn ctx.req.url.starts_with('/public')\n\t}\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Running V Server for Static Website Hosting\nDESCRIPTION: This command runs a V script named 'server.v' which is configured to serve static content from the 'dist/' folder. The server will be accessible at http://localhost:8080/.\nSOURCE: https://github.com/vlang/v/blob/master/examples/veb/static_website/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nv run server.v\n```\n\n----------------------------------------\n\nTITLE: Installing V Language on Linux\nDESCRIPTION: Commands to download and install the V programming language on a Linux system\nSOURCE: https://github.com/vlang/v/blob/master/tutorials/building_a_simple_web_blog_with_veb/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nwget --quiet https://github.com/vlang/v/releases/latest/download/v_linux.zip\nunzip v_linux.zip\ncd v\nsudo ./v symlink\n```\n\n----------------------------------------\n\nTITLE: V ORM SQL Query Tracing\nDESCRIPTION: The `-d trace_orm` and `-d trace_pg_error` options provide tracing capabilities for SQL queries generated by the V ORM and PostgreSQL errors, respectively. These options aid in debugging and understanding the ORM's behavior.\nSOURCE: https://github.com/vlang/v/blob/master/changelogs0.x/0.4.md#2025-04-21_snippet_5\n\nLANGUAGE: v\nCODE:\n```\n  - A new `-d trace_orm` option to see all SQL queries generated and used by V ORM and\n  `-d trace_pg_error` to trace PG errors.\n```\n\n----------------------------------------\n\nTITLE: Template Embedding in V using $tmpl\nDESCRIPTION: Shows how to embed and parse V template files using the $tmpl directive with variable interpolation and loops.\nSOURCE: https://github.com/vlang/v/blob/master/doc/docs.md#2025-04-21_snippet_170\n\nLANGUAGE: v\nCODE:\n```\nfn build() string {\n\tname := 'Peter'\n\tage := 25\n\tnumbers := [1, 2, 3]\n\treturn $tmpl('1.txt')\n}\n\nfn main() {\n\tprintln(build())\n}\n```\n\n----------------------------------------\n\nTITLE: Parsing TOML example and printing values in V\nDESCRIPTION: This snippet demonstrates parsing a TOML string and retrieving values using the `value()` method. It showcases how to access specific elements within the TOML document using a dot-separated query syntax. The extracted values are then printed to the console.\nSOURCE: https://github.com/vlang/v/blob/master/vlib/toml/README.md#2025-04-21_snippet_1\n\nLANGUAGE: v\nCODE:\n```\nimport toml\n\nconst toml_text = '# This is a TOML document.\n\ntitle = \"TOML Example\"\n\n[owner]\nname = \"Tom Preston-Werner\"\ndob = 1979-05-27T07:32:00-08:00 # First class dates\n\n[database]\nserver = \"192.168.1.1\"\nports = [ 8000, 8001, 8002 ]\nconnection_max = 5000\nenabled = true\n\n[servers]\n\n  # Indentation (tabs and/or spaces) is allowed but not required\n  [servers.alpha]\n  ip = \"10.0.0.1\"\n  dc = \"eqdc10\"\n\n  [servers.beta]\nip = \"10.0.0.2\"\ndc = \"eqdc10\"\n\n[clients]\ndata = [ [\"gamma\", \"delta\"], [1, 2] ]\n\n# Line breaks are OK when inside arrays\nhosts = [\n  \"alpha\",\n  \"omega\"\n]'\n\nfn main() {\n\tdoc := toml.parse_text(toml_text) or { panic(err) }\n\ttitle := doc.value('title').string()\n\tprintln('title: \"${title}\"')\n\tip := doc.value('servers.alpha.ip').string()\n\tprintln('Server IP: \"${ip}\"')\n}\n```\n\n----------------------------------------\n\nTITLE: Minifying and Setting Cache Directory for Assets\nDESCRIPTION: This snippet illustrates how to configure the AssetManager to minify CSS files and specify a cache directory where the minified files will be stored. This is done by initializing parameters in the AssetManager struct.\nSOURCE: https://github.com/vlang/v/blob/master/vlib/veb/assets/README.md#2025-04-21_snippet_3\n\nLANGUAGE: v\nCODE:\n```\npub struct App {\npub mut:\n\tam assets.AssetManager = assets.AssetManager{\n\t\tcache_dir: 'dist'\n\t\tminify: true\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Controllers in Veb (V)\nDESCRIPTION: Shows how to implement and register controllers for route grouping in a Veb application, including the main App struct and two controller structs.\nSOURCE: https://github.com/vlang/v/blob/master/vlib/veb/README.md#2025-04-21_snippet_22\n\nLANGUAGE: v\nCODE:\n```\npub struct Context {\n\tveb.Context\n}\n\npub struct App {\n\tveb.Controller\n}\n\npub fn (app &App) index(mut ctx Context) veb.Result {\n\treturn ctx.text('from app')\n}\n\npub struct Admin {}\n\npub fn (app &Admin) index(mut ctx Context) veb.Result {\n\treturn ctx.text('from admin')\n}\n\npub struct Foo {}\n\npub fn (app &Foo) index(mut ctx Context) veb.Result {\n\treturn ctx.text('from foo')\n}\n\nfn main() {\n\tmut app := &App{}\n\n\tmut admin_app := &Admin{}\n\tapp.register_controller[Admin, Context]('/admin', mut admin_app)!\n\n\tmut foo_app := &Foo{}\n\tapp.register_controller[Foo, Context]('/foo', mut foo_app)!\n\n\tveb.run[App, Context](mut app, 8080)\n}\n```\n\n----------------------------------------\n\nTITLE: Default Values for Integer Map Values in V\nDESCRIPTION: Demonstrates how missing keys in maps with integer values return 0 as the default value.\nSOURCE: https://github.com/vlang/v/blob/master/doc/docs.md#2025-04-21_snippet_43\n\nLANGUAGE: v\nCODE:\n```\nintm := {\n\t1: 1234\n\t2: 5678\n}\ns := intm[3]\nprintln(s) // 0\n```\n\n----------------------------------------\n\nTITLE: Assigning Functions to Function Type Variables in V\nDESCRIPTION: Demonstrates assigning a function to a variable without explicit casting. Duck-typing ensures type compatibility.\nSOURCE: https://github.com/vlang/v/blob/master/doc/docs.md#2025-04-21_snippet_102\n\nLANGUAGE: v\nCODE:\n```\nmy_filter := uppercase\n```\n\n----------------------------------------\n\nTITLE: Compile-time Reflection on Struct Methods in V\nDESCRIPTION: This snippet shows how to use compile-time reflection to iterate over struct methods, check their return types, and call them using the $for and $method constructs.\nSOURCE: https://github.com/vlang/v/blob/master/doc/docs.md#2025-04-21_snippet_166\n\nLANGUAGE: v\nCODE:\n```\nstruct Foo {\n}\n\nfn (f Foo) test() int {\n\treturn 123\n}\n\nfn (f Foo) test2() string {\n\treturn 'foo'\n}\n\nfn main() {\n\tfoo := Foo{}\n\t$for m in Foo.methods {\n\t\t$if m.return_type is int {\n\t\t\tprint('${m.name} returns int: ')\n\t\t\tprintln(foo.$method())\n\t\t} $else $if m.return_type is string {\n\t\t\tprint('${m.name} returns string: ')\n\t\t\tprintln(foo.$method())\n\t\t}\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Veb Project Structure\nDESCRIPTION: Basic commands to create a new V project directory and initial file\nSOURCE: https://github.com/vlang/v/blob/master/tutorials/building_a_simple_web_blog_with_veb/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmkdir blog\ncd blog\ntouch blog.v\n```\n\n----------------------------------------\n\nTITLE: Checking Multiple Parsed Files in V\nDESCRIPTION: This snippet shows how to check a list of parsed files using the checker, which allows the collection of errors and warnings for multiple files at once.\nSOURCE: https://github.com/vlang/v/blob/master/vlib/v/README.md#2025-04-21_snippet_5\n\nLANGUAGE: v\nCODE:\n```\nchecker.check_files(parsed_files)\n```\n\n----------------------------------------\n\nTITLE: Auto-fixing VDOC Tests\nDESCRIPTION: Command to automatically fix and update VDOC test files after changes.\nSOURCE: https://github.com/vlang/v/blob/master/TESTS.md#2025-04-21_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nVAUTOFIX=1 ./v cmd/tools/vdoc/vdoc_file_test.v\n```\n\n----------------------------------------\n\nTITLE: Defining Additional Endpoints in V\nDESCRIPTION: This snippet shows how to define additional endpoints in the V web server using the veb framework. It includes an endpoint accessible via HTTP GET and one routed to a specific URL path.\nSOURCE: https://github.com/vlang/v/blob/master/vlib/veb/README.md#2025-04-21_snippet_1\n\nLANGUAGE: v\nCODE:\n```\n// This endpoint can be accessed via http://server:port/hello\npub fn (app &App) hello(mut ctx Context) veb.Result {\n\treturn ctx.text('Hello')\n}\n\n// This endpoint can be accessed via http://server:port/foo\n@['/foo']\npub fn (app &App) world(mut ctx Context) veb.Result {\n\treturn ctx.text('World')\n}\n```\n\n----------------------------------------\n\nTITLE: Domain Matching in CSRF Configuration\nDESCRIPTION: Configures allowed hosts for CSRF protection, specifying that requests from certain domains are permitted. By default, only the specified domain is allowed, preventing subdomains.\nSOURCE: https://github.com/vlang/v/blob/master/vlib/veb/csrf/README.md#2025-04-21_snippet_9\n\nLANGUAGE: v\nCODE:\n```\nconfig := csrf.CsrfConfig{\n    secret: '...'\n    allowed_hosts: ['example.com']\n}\n```\n\n----------------------------------------\n\nTITLE: Compiling V to WebAssembly for Browser Execution\nDESCRIPTION: This command compiles the V code to WebAssembly for browser execution. It uses the -b wasm flag for WebAssembly output and -os browser for browser-specific optimizations.\nSOURCE: https://github.com/vlang/v/blob/master/examples/wasm/change_color_by_id/README.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nv -b wasm -os browser change_color_by_id.wasm.v\n```\n\n----------------------------------------\n\nTITLE: Request ID Configuration Struct in V\nDESCRIPTION: Defines the structure of the `Config` struct for the request ID middleware. It includes options for a conditional `next` function, a custom `generator` function, the `header` name, and flags for `allow_empty` and `force` behavior. This struct allows customization of the request ID middleware's behavior.\nSOURCE: https://github.com/vlang/v/blob/master/vlib/veb/request_id/README.md#2025-04-21_snippet_4\n\nLANGUAGE: v\nCODE:\n```\n```v okfmt\npub struct Config {\npub:\n\tnext        ?fn (ctx &veb.Context) bool\n\tgenerator   fn () string = rand.uuid_v4\n\theader      string       = 'X-Request-ID'\n\tallow_empty bool\n\tforce       bool\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Updating V Language\nDESCRIPTION: This snippet allows users to update the V programming language to its latest version using a simple command line instruction. It assumes the V language is already installed.\nSOURCE: https://github.com/vlang/v/blob/master/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nv up\n```\n\n----------------------------------------\n\nTITLE: Running Benchmark Tests for Pendulum Simulation in V\nDESCRIPTION: This snippet explains how to run benchmark tests for the pendulum simulation, requiring the appropriate setup and execution of the benchmark testing command.\nSOURCE: https://github.com/vlang/v/blob/master/examples/pendulum-simulation/README.md#2025-04-21_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\n$ ./bin/run-benchmark-test --help\n```\n\n----------------------------------------\n\nTITLE: Executing vviewer with Folder List in V\nDESCRIPTION: Shows the command to run vviewer with a list of folders containing images.\nSOURCE: https://github.com/vlang/v/blob/master/examples/viewer/README.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nviewer folder1 folder2\n```\n\n----------------------------------------\n\nTITLE: Compiling and Running a V Project Folder\nDESCRIPTION: This snippet illustrates how to compile and run multiple V files in a folder using a single command, and to pass CLI parameters to the program. The snippet also demonstrates how to access command-line arguments using 'os.args'.\nSOURCE: https://github.com/vlang/v/blob/master/doc/docs.md#2025-04-21_snippet_2\n\nLANGUAGE: v\nCODE:\n```\nimport os\n\nprintln(os.args)\n```\n\n----------------------------------------\n\nTITLE: Memory-Unsafe Code in V using unsafe Blocks\nDESCRIPTION: Example of potentially memory-unsafe operations in V that must be enclosed in unsafe blocks, including pointer arithmetic and indexing.\nSOURCE: https://github.com/vlang/v/blob/master/doc/docs.md#2025-04-21_snippet_179\n\nLANGUAGE: v\nCODE:\n```\n// allocate 2 uninitialized bytes & return a reference to them\nmut p := unsafe { malloc(2) }\np[0] = `h` // Error: pointer indexing is only allowed in `unsafe` blocks\nunsafe {\n    p[0] = `h` // OK\n    p[1] = `i`\n}\np++ // Error: pointer arithmetic is only allowed in `unsafe` blocks\nunsafe {\n    p++ // OK\n}\nassert *p == `i`\n```\n\n----------------------------------------\n\nTITLE: Conditional Redirection in a Route Handler\nDESCRIPTION: Example showing how to conditionally redirect users from a route handler when they don't have a valid token.\nSOURCE: https://github.com/vlang/v/blob/master/vlib/vweb/README.md#2025-04-21_snippet_20\n\nLANGUAGE: v\nCODE:\n```\n@['/articles'; get]\npub fn (mut app App) articles() vweb.Result {\n\tif !app.token {\n\t\tapp.redirect('/login')\n\t}\n\treturn app.text('patatoes')\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom 404 Not Found Page in Vweb\nDESCRIPTION: Example showing how to create a custom 404 not found page by implementing a not_found method in the vweb application.\nSOURCE: https://github.com/vlang/v/blob/master/vlib/vweb/README.md#2025-04-21_snippet_22\n\nLANGUAGE: v\nCODE:\n```\npub fn (mut app App) not_found() vweb.Result {\n\tapp.set_status(404, 'Not Found')\n\treturn app.html('<h1>Page not found</h1>')\n}\n```\n\n----------------------------------------\n\nTITLE: Route Matching Order in V Web Server\nDESCRIPTION: This snippet explains how endpoint definitions impact route matching order in the V web server. Non-specific routes are matched before specific parameter routes.\nSOURCE: https://github.com/vlang/v/blob/master/vlib/veb/README.md#2025-04-21_snippet_7\n\nLANGUAGE: v\nCODE:\n```\n@['/:path']\npub fn (app &App) with_parameter(mut ctx Context, path string) veb.Result {\n\treturn ctx.text('from with_parameter, path: \"${path}\"')\n}\n\n@['/normal']\npub fn (app &App) normal(mut ctx Context) veb.Result {\n\treturn ctx.text('from normal')\n}\n```\n\n----------------------------------------\n\nTITLE: Including C Headers in V\nDESCRIPTION: Example showing how to include C headers and object files in a V module using VMODROOT.\nSOURCE: https://github.com/vlang/v/blob/master/doc/docs.md#2025-04-21_snippet_198\n\nLANGUAGE: v\nCODE:\n```\n#flag -I @VMODROOT/c\n#flag @VMODROOT/c/implementation.o\n#include \"header.h\"\n```\n\n----------------------------------------\n\nTITLE: Enabling CSRF Middleware\nDESCRIPTION: Illustrates registering CSRF middleware for routes in a Veb application. It demonstrates the use of the middleware function `csrf.middleware[Context]` to protect specific routes.\nSOURCE: https://github.com/vlang/v/blob/master/vlib/veb/csrf/README.md#2025-04-21_snippet_2\n\nLANGUAGE: v\nCODE:\n```\npub struct App {\n\tveb.Middleware[Context]\n}\n\nfn main() {\n\tmut app := &App{}\n\t// register the CSRF middleware and pass our configuration\n\t// protect a specific route\n\tapp.route_use('/login', csrf.middleware[Context](csrf_config))\n\tveb.run[App, Context](mut app, 8080)\n}\n```\n\n----------------------------------------\n\nTITLE: Generating C Code from AST in V\nDESCRIPTION: This snippet showcases how to generate C code from a parsed AST using the 'c.gen' function from the V code generation module. It requires references to parsed files, a table, and preferences.\nSOURCE: https://github.com/vlang/v/blob/master/vlib/v/README.md#2025-04-21_snippet_6\n\nLANGUAGE: v\nCODE:\n```\nimport v.gen.c\n\nres := c.gen(parsed_files, table, &pref)\n```\n\n----------------------------------------\n\nTITLE: Article Model and Database Operations\nDESCRIPTION: Definition of Article struct and database operations using V ORM\nSOURCE: https://github.com/vlang/v/blob/master/tutorials/building_a_simple_web_blog_with_veb/README.md#2025-04-21_snippet_5\n\nLANGUAGE: v\nCODE:\n```\n// article.v\nmodule main\n\nstruct Article {\n\tid    int @[primary; sql: serial]\n\ttitle string\n\ttext  string\n}\n\npub fn (app &App) find_all_articles() []Article {\n\treturn sql app.db {\n\t\tselect from Article\n\t} or { panic(err) }\n}\n```\n\n----------------------------------------\n\nTITLE: Utility Functions for Formatting in V\nDESCRIPTION: This snippet defines additional utility functions related to the formatting operations, utilizing the BF_param structure for parameter passing. It includes functions for formatting integers, floats, and removing tailing zeros.\nSOURCE: https://github.com/vlang/v/blob/master/vlib/strconv/format.md#2025-04-21_snippet_2\n\nLANGUAGE: v\nCODE:\n```\n// calling struct\nstruct BF_param {\n  pad_ch       u8         = ` `     // padding char\n  len0         int        = -1      // default len for whole the number or string\n  len1         int        = 6       // number of decimal digits, if needed\n  positive     bool       = true    // mandatory: the sign of the number passed\n  sign_flag    bool       = false   // flag for print sign as prefix in padding\n  align        Align_text = .right  // alignment of the string\n  rm_tail_zero bool       = false   // remove the tail zeros from floats\n}\n\n// utilities\nfn format_dec(d u64, p BF_param) string\nfn format_fl(f f64, p BF_param) string\nfn format_es(f f64, p BF_param) string\nfn remove_tail_zeros(s string) string\n```\n\n----------------------------------------\n\nTITLE: Configuring Worker Count for Vweb Multithreading\nDESCRIPTION: Example showing how to set a custom number of worker threads for a vweb application instead of using the default maximum number of cores.\nSOURCE: https://github.com/vlang/v/blob/master/vlib/vweb/README.md#2025-04-21_snippet_24\n\nLANGUAGE: v\nCODE:\n```\nfn main() {\n\t// assign a maximum of 4 workers\n\tvweb.run_at(&App{}, nr_workers: 4)\n}\n```\n\n----------------------------------------\n\nTITLE: Using max_age parameter to control session expiration in V\nDESCRIPTION: The max_age parameter in the get method determines whether a session is still valid. Both database and memory stores check the expiration time from when the session data was first inserted. Setting max_age to 0 disables expiration time checking.\nSOURCE: https://github.com/vlang/v/blob/master/vlib/x/sessions/README.md#2025-04-21_snippet_9\n\nLANGUAGE: v\nCODE:\n```\nmax_age\n```\n\n----------------------------------------\n\nTITLE: Displaying Word Counter Usage and Example Output in V Language\nDESCRIPTION: Output from a word counting utility that shows the command usage pattern and word frequency results when analyzing 'cinderella.txt'. The program counts occurrences of each word and displays them alphabetically.\nSOURCE: https://github.com/vlang/v/blob/master/examples/word_counter/README.md#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nusage: word_counter [text_file]\nusing cinderella.txt\na => 25\nable => 2\nafter => 1\nafterwards => 1\nagain => 10\nagainst => 2\nall => 12\nallow => 1\nallowed => 2\nalong => 1\nalso => 2\nalways => 2\nan => 4\nand => 140\nanew => 1\nanger => 1\nanother => 2\nanswered => 1\nany => 1\nanyone => 2\n...\n```\n\n----------------------------------------\n\nTITLE: Executing vviewer with Zip Archives in V\nDESCRIPTION: Illustrates how to run vviewer with zip archives containing images.\nSOURCE: https://github.com/vlang/v/blob/master/examples/viewer/README.md#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nviewer folder1.zip folder2.zip\n```\n\n----------------------------------------\n\nTITLE: Benchmark Output Example\nDESCRIPTION: Sample output showing the format of benchmark measurements when using the start/measure methods.\nSOURCE: https://github.com/vlang/v/blob/master/vlib/benchmark/README.md#2025-04-21_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nSPENT 1500.063 ms in code_1\nSPENT  500.061 ms in code_2\n```\n\n----------------------------------------\n\nTITLE: Executing vviewer with Mixed Input in V\nDESCRIPTION: Demonstrates running vviewer with a mixture of files, folders, and zip archives.\nSOURCE: https://github.com/vlang/v/blob/master/examples/viewer/README.md#2025-04-21_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nviewer img1.jpg img2.bmp folder1 folder2 img2.tga folder1.zip\n```\n\n----------------------------------------\n\nTITLE: Looping with @for in V Templates\nDESCRIPTION: This snippet demonstrates the use of the `@for` directive in V templates for looping over a collection and rendering HTML content for each iteration. The `$i` and `$val` variables represent the index and value of the current iteration, respectively.\nSOURCE: https://github.com/vlang/v/blob/master/vlib/v/TEMPLATES.md#2025-04-21_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n\"@for i, val in my_vals {\\n    <span>$i - $val</span>\\n}\"\n```\n\n----------------------------------------\n\nTITLE: Client-Side Event Listener for SSE in JavaScript\nDESCRIPTION: This JavaScript snippet sets up an EventSource to listen for messages from an SSE server. It defines event listeners for message and close events, handling incoming messages and controlling the connection behavior accordingly.\nSOURCE: https://github.com/vlang/v/blob/master/vlib/veb/sse/README.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst eventSource = new EventSource('/sse');\n\neventSource.addEventListener('message', (event) => {\n\tconsole.log('received message:', event.data);\n});\n\neventSource.addEventListener('close', () => {\n\tconsole.log('closing the connection');\n\t// prevent browser from reconnecting\n\teventSource.close();\n});\n```\n\n----------------------------------------\n\nTITLE: Immutable String Assignment in V\nDESCRIPTION: This snippet demonstrates that strings in V are immutable by attempting to assign a new value to a specific index of a string. The assertion reveals that such an operation is invalid.\nSOURCE: https://github.com/vlang/v/blob/master/doc/docs.md#2025-04-21_snippet_11\n\nLANGUAGE: v\nCODE:\n```\nmut s := 'hello 🌎'\ns[0] = `H` // not allowed\n\n> error: cannot assign to `s[i]` since V strings are immutable\n```\n\n----------------------------------------\n\nTITLE: Processing Command Line Arguments in V\nDESCRIPTION: Demonstrates basic command line argument handling in V using the os module. Shows how to access and manipulate command-line arguments, along with channel operations and reference handling.\nSOURCE: https://github.com/vlang/v/blob/master/cmd/tools/vdoc/testdata/output_formats/README.md#2025-04-21_snippet_0\n\nLANGUAGE: v\nCODE:\n```\nimport os\n\nfn main() {\n\tdump(os.args)\n\tdump(os.args.len)\n\tassert os.args.len > 0\n\n\t// Test escape characters like for `&` and `<`\n\tmut arr := [1, 2, 3]\n\tmut ref := &arr\n\tarr << 4\n\n\tch := chan bool{cap: 1}\n\tch <- true\n}\n```\n\n----------------------------------------\n\nTITLE: vweb Middleware Type Definition\nDESCRIPTION: This example defines the type for middleware functions in vweb.  Middleware functions take a mutable `vweb.Context` as input and return a boolean value.\nSOURCE: https://github.com/vlang/v/blob/master/vlib/vweb/README.md#2025-04-21_snippet_15\n\nLANGUAGE: v\nCODE:\n```\npub type Middleware = fn (mut Context) bool\n```\n\n----------------------------------------\n\nTITLE: Quick User Input with Read Line Function\nDESCRIPTION: Shows a more concise method of reading user input using the direct read_line function, with a name prompt example\nSOURCE: https://github.com/vlang/v/blob/master/vlib/readline/README.md#2025-04-21_snippet_1\n\nLANGUAGE: v\nCODE:\n```\nimport readline { read_line }\n\ninput := read_line('What is your name: ')!\nprintln('Your name is: ${input}')\n```\n\n----------------------------------------\n\nTITLE: V Where Tool Examples\nDESCRIPTION: Provides several examples of how to use the 'v where' command with different symbol types and options. The examples demonstrate searching for functions, structs, methods, interfaces and filtering by module and directory.\nSOURCE: https://github.com/vlang/v/blob/master/vlib/v/help/common/where.txt#2025-04-21_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n\"v where fn main\nv where struct User\nv where method Square.area\nv where fn pow -mod math\nv where interface callable -dir some -dir other\"\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Compile-time Location Printing in V\nDESCRIPTION: This snippet shows how to use the @LOCATION pseudo variable to print the current code location for debugging purposes.\nSOURCE: https://github.com/vlang/v/blob/master/doc/docs.md#2025-04-21_snippet_158\n\nLANGUAGE: v\nCODE:\n```\neprintln(@LOCATION)\n```\n\n----------------------------------------\n\nTITLE: Disabling vfmt Formatting Locally in V\nDESCRIPTION: Shows how to disable V's automatic code formatting for specific blocks of code using special comments. This is useful when you need to maintain custom formatting for particular sections.\nSOURCE: https://github.com/vlang/v/blob/master/doc/docs.md#2025-04-21_snippet_145\n\nLANGUAGE: bash\nCODE:\n```\n// Not affected by fmt\n// vfmt off\n\n... your code here ...\n\n// vfmt on\n\n// Affected by fmt\n... your code here ...\n```\n\n----------------------------------------\n\nTITLE: Testing HTTP Server with CURL\nDESCRIPTION: This snippet provides a series of CURL commands to test the basic GET and POST HTTP interactions with the server deployed at localhost:3000. No additional dependencies are required, and it showcases retrieving and sending data to the server.\nSOURCE: https://github.com/vlang/v/blob/master/examples/vanilla_http_server/README.md#2025-04-21_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\ncurl -X GET --verbose http://localhost:3000/ &&\ncurl -X POST --verbose http://localhost:3000/user &&\ncurl -X GET --verbose http://localhost:3000/user/1\n```\n\n----------------------------------------\n\nTITLE: Variable Assignment and Initialization Difference in V\nDESCRIPTION: This snippet highlights the distinction between variable declaration and assignment in V, demonstrating a compilation error when attempting to assign a value to an undeclared variable.\nSOURCE: https://github.com/vlang/v/blob/master/doc/docs.md#2025-04-21_snippet_7\n\nLANGUAGE: v\nCODE:\n```\nfn main() {\n\tage = 21\n}\n\n```\n\n----------------------------------------\n\nTITLE: vweb Host Restriction\nDESCRIPTION: This example shows how to restrict an endpoint to a specific host using the `host` attribute.  Requests to different hosts will be handled by different endpoint functions or fall through to a default handler.\nSOURCE: https://github.com/vlang/v/blob/master/vlib/vweb/README.md#2025-04-21_snippet_12\n\nLANGUAGE: v\nCODE:\n```\n@['/'; host: 'example.com']\npub fn (mut app App) hello_web() vweb.Result {\n\treturn app.text('Hello World')\n}\n\n@['/'; host: 'api.example.org']\npub fn (mut app App) hello_api() vweb.Result {\n\treturn app.text('Hello API')\n}\n\n// define the handler without a host attribute last if you have conflicting paths.\n@['/']\npub fn (mut app App) hello_others() vweb.Result {\n\treturn app.text('Hello Others')\n}\n```\n\n----------------------------------------\n\nTITLE: Hello World in V\nDESCRIPTION: This snippet demonstrates the basic \"Hello, World!\" program in the V programming language. It utilizes the `println` function to output the text \"Hel-o, World!\" to the console.\nSOURCE: https://github.com/vlang/v/blob/master/vlib/v/parser/testdata/silent/radamsa_too_many_nested_exprs_vfmt_off.vv.txt#2025-04-21_snippet_0\n\nLANGUAGE: v\nCODE:\n```\n\"println('Hel-o, World!')\"\n```\n\n----------------------------------------\n\nTITLE: Creating Independent Array Slices with Clone in V\nDESCRIPTION: Shows how to create an independent copy of a slice using the clone method to avoid sharing memory with the parent array.\nSOURCE: https://github.com/vlang/v/blob/master/doc/docs.md#2025-04-21_snippet_36\n\nLANGUAGE: v\nCODE:\n```\nmut a := [0, 1, 2, 3, 4, 5]\nmut b := a[2..4].clone()\nb[0] = 7 // Note: `b[0]` is NOT referring to `a[2]`, as it would have been, without the `.clone()`\nprintln(a) // [0, 1, 2, 3, 4, 5]\nprintln(b) // [7, 3]\n```\n\n----------------------------------------\n\nTITLE: Building and Running Docker Container\nDESCRIPTION: These commands build a Docker image and run a Docker container with the specified name, exposing the application on port 3001. It expects Docker to be installed and running on the host system.\nSOURCE: https://github.com/vlang/v/blob/master/examples/js_dom_draw_benchmark_chart/README.md#2025-04-21_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nsudo docker build -t <name> .\\nsudo docker run --name <container name> --interactive --tty --publish 3001:3001 <name>\\nv run .\\n# A message like `[Vweb] Running app on http://localhost:3001/` should appear\\nexit\n```\n\n----------------------------------------\n\nTITLE: Initializing Asset Manager with Veb Framework\nDESCRIPTION: This snippet demonstrates how to initialize an AssetManager within an App struct, allowing the app to manage assets like CSS and JavaScript. The initialization is done by running the Veb framework with the App and a specified Context.\nSOURCE: https://github.com/vlang/v/blob/master/vlib/veb/assets/README.md#2025-04-21_snippet_0\n\nLANGUAGE: v\nCODE:\n```\nmodule main\n\nimport veb\nimport veb.assets\n\npub struct Context {\n\tveb.Context\n}\n\npub struct App {\npub mut:\n\tam assets.AssetManager\n}\n\nfn main() {\n\tmut app := &App{}\n\tveb.run[App, Context](mut app, 8080)\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring Floating Point Numbers in V\nDESCRIPTION: This snippet illustrates declaring floating-point numbers and their types. It shows that by default, float literals are of type 'f64', and demonstrates explicit casting to 'f32'.\nSOURCE: https://github.com/vlang/v/blob/master/doc/docs.md#2025-04-21_snippet_20\n\nLANGUAGE: v\nCODE:\n```\nf := 1.0\nf1 := f64(3.14)\nf2 := f32(3.14)\n```\n\n----------------------------------------\n\nTITLE: Compile-time Enum Evaluation in V\nDESCRIPTION: This V code snippet demonstrates compile-time evaluation of enum fields using the `$for` loop processing. Dependencies for this functionality include the V compiler supporting compile-time operations. The `$for` loop iterates over the fields of an enum type, printing each field's value and name. No inputs are required aside from defining an enum, and the output includes printed values and names of enum fields.\nSOURCE: https://github.com/vlang/v/blob/master/changelogs0.x/0.4.md#2025-04-21_snippet_6\n\nLANGUAGE: V\nCODE:\n```\n$for item in MyEnum.fields {\\n    println(item.value)\\n    println(item.name)\\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Controller Route in Veb (V)\nDESCRIPTION: Demonstrates how to define a route within a controller, which is treated as relative to the controller's namespace.\nSOURCE: https://github.com/vlang/v/blob/master/vlib/veb/README.md#2025-04-21_snippet_23\n\nLANGUAGE: v\nCODE:\n```\n@['/path']\npub fn (app &Admin) path(mut ctx Context) veb.Result {\n    return ctx.text('Admin')\n}\n```\n\n----------------------------------------\n\nTITLE: Debugging Loop Execution with V Debugger\nDESCRIPTION: Shows how to debug a loop using V's native debugger by placing a $dbg statement inside the loop body, allowing iteration-by-iteration inspection.\nSOURCE: https://github.com/vlang/v/blob/master/doc/docs.md#2025-04-21_snippet_176\n\nLANGUAGE: v\nCODE:\n```\nfn main() {\n\tfor i := 0; i < 4; i++ {\n\t\t$dbg\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: V Module Configuration\nDESCRIPTION: Example of a v.mod file configuration for a module that wraps C library.\nSOURCE: https://github.com/vlang/v/blob/master/doc/docs.md#2025-04-21_snippet_197\n\nLANGUAGE: v\nCODE:\n```\nModule {\n\tname: 'mymodule',\n\tdescription: 'My nice module wraps a simple C library.',\n\tversion: '0.0.1'\n\tdependencies: []\n}\n```\n\n----------------------------------------\n\nTITLE: Equivalent Function Definitions in V and C\nDESCRIPTION: Illustrates how a V function returning multiple values is equivalent to a C function returning a struct, demonstrating function type equivalence between V and C.\nSOURCE: https://github.com/vlang/v/blob/master/doc/c_and_v_type_interoperability.md#2025-04-21_snippet_3\n\nLANGUAGE: v\nCODE:\n```\nfn v_function(a u64, b i8) (i32, f32)\n```\n\nLANGUAGE: c\nCODE:\n```\nstruct { int i; float f; } c_function(unsigned long a, char b);\n```\n\n----------------------------------------\n\nTITLE: Binary Encoding and Decoding Example in V Main Function\nDESCRIPTION: Demonstrates creating a complex struct, encoding it to binary, decoding back, and performing equality checks with handling of skipped serialization fields\nSOURCE: https://github.com/vlang/v/blob/master/vlib/encoding/binary/README.md#2025-04-21_snippet_1\n\nLANGUAGE: v\nCODE:\n```\nfn main() {\n\ta := ComplexStruct{\n\t\tf_u8:      u8(10)\n\t\tf_u32:     u32(1024)\n\t\tf_u64:     u64(2048)\n\t\tf_string:  'serialize me'\n\t\tf_structs: [\n\t\t\tMyStruct{ g_u8: u8(1) },\n\t\t\tMyStruct{ g_u8: u8(2) },\n\t\t\tMyStruct{ g_u8: u8(3) }\n\t\t]\n\t\tf_maps:    [\n\t\t\t{ 'abc': 'def' },\n\t\t\t{ '123': '456' },\n\t\t\t{ ',./': '!@#' }\n\t\t]\n\t}\n\n\tb := binary.encode_binary(a)!\n\tmut c := binary.decode_binary[ComplexStruct](b)!\n\n\t// because there skipped field in `a`, a != c\n\tassert a != c\n\n\tc.f_u32 = u32(1024)\n\tassert a == c\n}\n```\n\n----------------------------------------\n\nTITLE: Running Mbed TLS self-test program\nDESCRIPTION: Command to run a minimal set of tests using the self-test program, which doesn't require Python or Perl.\nSOURCE: https://github.com/vlang/v/blob/master/thirdparty/mbedtls/README.md#2025-04-21_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nprograms/test/selftest\n```\n\n----------------------------------------\n\nTITLE: Setting C Compilation Flags in V\nDESCRIPTION: Example showing how to specify C compilation flags for Linux target including SDL2 library and custom defines.\nSOURCE: https://github.com/vlang/v/blob/master/doc/docs.md#2025-04-21_snippet_195\n\nLANGUAGE: v\nCODE:\n```\n#flag linux -lsdl2\n#flag linux -Ivig\n#flag linux -DCIMGUI_DEFINE_ENUMS_AND_STRUCTS=1\n#flag linux -DIMGUI_DISABLE_OBSOLETE_FUNCTIONS=1\n#flag linux -DIMGUI_IMPL_API=\n```\n\n----------------------------------------\n\nTITLE: Decoding Chunked HTTP Data with PicoHTTPParser in C\nDESCRIPTION: Example showing how to decode chunked-encoded HTTP data using phr_decode_chunked(). The code handles dynamic buffer allocation, reading from socket, and in-place decoding of chunked data.\nSOURCE: https://github.com/vlang/v/blob/master/thirdparty/picohttpparser/src/README.md#2025-04-21_snippet_1\n\nLANGUAGE: c\nCODE:\n```\nstruct phr_chunked_decoder decoder = {}; /* zero-clear */\nchar *buf = malloc(4096);\nsize_t size = 0, capacity = 4096, rsize;\nssize_t rret, pret;\n\n/* set consume_trailer to 1 to discard the trailing header, or the application\n * should call phr_parse_headers to parse the trailing header */\ndecoder.consume_trailer = 1;\n\ndo {\n    /* expand the buffer if necessary */\n    if (size == capacity) {\n        capacity *= 2;\n        buf = realloc(buf, capacity);\n        assert(buf != NULL);\n    }\n    /* read */\n    while ((rret = read(sock, buf + size, capacity - size)) == -1 && errno == EINTR)\n        ;\n    if (rret <= 0)\n        return IOError;\n    /* decode */\n    rsize = rret;\n    pret = phr_decode_chunked(&decoder, buf + size, &rsize);\n    if (pret == -1)\n        return ParseError;\n    size += rsize;\n} while (pret == -2);\n\n/* successfully decoded the chunked data */\nassert(pret >= 0);\nprintf(\"decoded data is at %p (%zu bytes)\\n\", buf, size);\n```\n\n----------------------------------------\n\nTITLE: Counting Runes in a String\nDESCRIPTION: This snippet shows how to calculate the number of runes (Unicode characters) in a string versus the number of bytes, demonstrating the difference due to the presence of non-ASCII characters.\nSOURCE: https://github.com/vlang/v/blob/master/doc/docs.md#2025-04-21_snippet_13\n\nLANGUAGE: v\nCODE:\n```\nmut s := 'hello 🌎'\n// there are 10 bytes in the string (as shown earlier), but only 7 runes, since the `world` emoji\n// only counts as one `rune` (one Unicode character)\nassert s.runes().len == 7\nprintln(s.runes()[6])\n```\n\n----------------------------------------\n\nTITLE: Serializing TOML to JSON in V\nDESCRIPTION: Demonstrates how to serialize a parsed TOML document to a JSON string using the `toml.to.json()` function. The example imports the `toml` and `toml.to` modules, parses a TOML string, and then converts it to JSON.  The resulting JSON string is then asserted to match the expected output.\nSOURCE: https://github.com/vlang/v/blob/master/vlib/toml/README.md#2025-04-21_snippet_3\n\nLANGUAGE: v\nCODE:\n```\nimport toml\nimport toml.to\n\nconst toml_text = '\nval = true\n[table]\narray = [\n\t{ a = \"A\" },\n\t{ b = \"B\" }\n]\n'\n\ndoc := toml.parse_text(toml_text) or { panic(err) }\nassert to.json(doc) == '{ \"val\": true, \"table\": { \"array\": [ { \"a\": \"A\" }, { \"b\": \"B\" } ] } }'\n```\n\n----------------------------------------\n\nTITLE: C++ Map Iteration Example\nDESCRIPTION: An example showing how to iterate through a map in C++ using modern C++ range-based for loops with structured bindings. Demonstrates declaring a map with initial values and printing key-value pairs.\nSOURCE: https://github.com/vlang/v/blob/master/cmd/tools/vdoc/testdata/output_formats/README.md#2025-04-21_snippet_2\n\nLANGUAGE: cpp\nCODE:\n```\n#include <iostream>\n#include <map>\n\nstd::map<std::string, int> my_map {\n\t{\"KEY_1\", 0},\n\t{\"KEY_2\", 10},\n};\n\nfor (const auto &[key, value] : my_map) {\n\tstd::cout << key << \": \" << value << \", \";\n}\nstd::cout << \"\\n\";\n```\n\n----------------------------------------\n\nTITLE: Parsing Tab-Delimited Numeric Data\nDESCRIPTION: A data file containing pairs of numbers separated by tabs, with one pair per line. The first column appears to be increments of 10, while the second column contains varying values.\nSOURCE: https://github.com/vlang/v/blob/master/examples/veb/file_transform/sample_input.txt#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n10\t13\n20\t54\n30\t82\n40\t11\n50\t47\n```\n\n----------------------------------------\n\nTITLE: Map Initialization Shorthand Syntax in V\nDESCRIPTION: Demonstrates the concise syntax for initializing maps with predefined key-value pairs.\nSOURCE: https://github.com/vlang/v/blob/master/doc/docs.md#2025-04-21_snippet_41\n\nLANGUAGE: v\nCODE:\n```\nnumbers := {\n\t'one': 1\n\t'two': 2\n}\nprintln(numbers)\n```\n\n----------------------------------------\n\nTITLE: Compiling V Tetris to JavaScript\nDESCRIPTION: Command for compiling the Tetris game to JavaScript for browser execution.\nSOURCE: https://github.com/vlang/v/blob/master/examples/tetris/README.md#2025-04-21_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nv -b js_browser examples/tetris/tetris.js.v\n```\n\n----------------------------------------\n\nTITLE: Casting Numeric Types in V\nDESCRIPTION: This snippet shows how to cast numbers into different integer types, demonstrating explicit type conversion for different size requirements using the V programming language.\nSOURCE: https://github.com/vlang/v/blob/master/doc/docs.md#2025-04-21_snippet_19\n\nLANGUAGE: v\nCODE:\n```\na := i64(123)\nb := u8(42)\nc := i16(12345)\n```\n\n----------------------------------------\n\nTITLE: V ORM Like Operator\nDESCRIPTION: The ORM now supports the `like` operator in `select` queries, enabling pattern matching on string fields.  This example shows how to select users whose names start with \"Bob\".\nSOURCE: https://github.com/vlang/v/blob/master/changelogs0.x/0.4.md#2025-04-21_snippet_4\n\nLANGUAGE: v\nCODE:\n```\n  users := sql db {\n      select from User where name like 'Bob%'\n  }\n  \n```\n\n----------------------------------------\n\nTITLE: Setting Up Audio Stream in V Using Sokol\nDESCRIPTION: This snippet initializes the audio stream by setting up `my_audio_stream_callback` as the callback function, allowing audio processing to take place. After a delay, it shuts down the audio system, ensuring proper resource management.\nSOURCE: https://github.com/vlang/v/blob/master/vlib/sokol/README.md#2025-04-21_snippet_2\n\nLANGUAGE: v\nCODE:\n```\nfn main() {\n\taudio.setup(\n\t\tstream_cb: my_audio_stream_callback\n\t)\n\ttime.sleep(2000 * time.millisecond)\n\taudio.shutdown()\n}\n\n```\n\n----------------------------------------\n\nTITLE: Initializing a git repository for V package\nDESCRIPTION: This snippet shows the git commands to initialize a local repository, add all files, and make an initial commit for the V package.\nSOURCE: https://github.com/vlang/v/blob/master/doc/docs.md#2025-04-21_snippet_150\n\nLANGUAGE: sh\nCODE:\n```\ngit init\ngit add .\ngit commit -m \"INIT\"\n```\n\n----------------------------------------\n\nTITLE: Middleware for Session Verification in V Language\nDESCRIPTION: This snippet demonstrates integrating middleware for session verification in a veb application. It registers veb2_middleware for authenticating sessions before routing to handlers. The code example adds the necessary imports and illustrates setup within the main function. Required dependencies include x.sessions.veb2_middleware and veb.\nSOURCE: https://github.com/vlang/v/blob/master/vlib/x/sessions/README.md#2025-04-21_snippet_2\n\nLANGUAGE: v\nCODE:\n```\n// add this import at the top of your file\nimport x.sessions.veb2_middleware\n\npub struct App {\n    // embed the Middleware struct from veb\n    veb.Middleware[Context]\npub mut:\n    // this struct contains the store that holds all session data it also provides\n    // an easy way to manage sessions in your veb app. Set the session data type to `User`\n    sessions &sessions.Sessions[User]\n}\n\nfn main() {\n    mut app := &App{\n        store: sessions.MemoryStore[User]{}\n        // use your own secret which will be used to verify session id's\n        secret: 'my secret'.bytes()\n    }\n\n    // register the sessions middleware\n    app.use(veb2_middleware.create[User, Context](mut app.sessions))\n\n    veb.run[App, Context](mut app, 8080)\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Route-Specific Middleware in Veb (V)\nDESCRIPTION: Demonstrates how to register middleware for specific routes or route patterns in a Veb application.\nSOURCE: https://github.com/vlang/v/blob/master/vlib/veb/README.md#2025-04-21_snippet_19\n\nLANGUAGE: v\nCODE:\n```\napp.route_use('/auth', handler: auth_middleware)\napp.route_use('/documents/:id')\napp.route_use('/user/:path...')\n```\n\n----------------------------------------\n\nTITLE: Running Tests with Hidden Success Output\nDESCRIPTION: Command to run tests while hiding successful test output, showing only failures and total stats.\nSOURCE: https://github.com/vlang/v/blob/master/TESTS.md#2025-04-21_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nVTEST_HIDE_OK=1 ./v test vlib/math/\n```\n\n----------------------------------------\n\nTITLE: Running Tests with Glob Patterns in V\nDESCRIPTION: This code demonstrates how to run tests in specified files or directories using glob patterns. The `-run-only GPATTERN` option allows the execution of only specific test functions that match the given pattern. Multiple patterns can be separated by commas, and tests are identified based on the naming conventions of the files and functions.\nSOURCE: https://github.com/vlang/v/blob/master/vlib/v/help/common/test.txt#2025-04-21_snippet_0\n\nLANGUAGE: v\nCODE:\n```\nv   [-stats]   test    [-run-only GPATTERN1[,...]]   FILE|DIRECTORY[...]\n```\n\n----------------------------------------\n\nTITLE: Compile-Time Error Handling\nDESCRIPTION: Shows how to use $compile_error directive to display custom errors during compilation.\nSOURCE: https://github.com/vlang/v/blob/master/doc/docs.md#2025-04-21_snippet_173\n\nLANGUAGE: v\nCODE:\n```\nmodule main\n\n$if linux {\n    $compile_error('Linux is not supported')\n}\n\nfn main() {\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Node.js Server\nDESCRIPTION: This JavaScript snippet creates a simple HTTP server using Node.js. It handles requests by serving static files or 404 errors if files are not found. Dependencies include the core Node.js modules for HTTP, filesystem, and path management.\nSOURCE: https://github.com/vlang/v/blob/master/examples/js_dom_cube/README.md#2025-04-21_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst http = require('http');\nconst fs = require('fs');\nvar path = require('path');\n\nconst host = 'localhost';\nconst port = 3000;\n\nconst reqListener = function (req, res) {\n\tconsole.log('[route] - ', req.url);\n\n\tvar filePath = '.' + req.url;\n\tif (filePath == './') {\n\t\tfilePath = './index.html';\n\t}\n\n\tvar extname = String(path.extname(filePath)).toLowerCase();\n\tvar mimeTypes = {\n\t\t'.html': 'text/html',\n\t\t'.js': 'text/javascript',\n\t\t'.css': 'text/css',\n\t\t'.json': 'application/json',\n\t\t'.png': 'image/png',\n\t\t'.jpg': 'image/jpg',\n\t\t'.gif': 'image/gif',\n\t\t'.svg': 'image/svg+xml',\n\t\t'.wav': 'audio/wav',\n\t\t'.mp4': 'video/mp4',\n\t\t'.woff': 'application/font-woff',\n\t\t'.ttf': 'application/font-ttf',\n\t\t'.eot': 'application/vnd.ms-fontobject',\n\t\t'.otf': 'application/font-otf',\n\t\t'.wasm': 'application/wasm',\n\t};\n\n\tvar contentType = mimeTypes[extname] || 'application/octet-stream';\n\n\tfs.readFile(filePath, function (error, content) {\n\t\tif (error) {\n\t\t\tif (error.code == 'ENOENT') {\n\t\t\t\tfs.readFile('./404.html', function (error, content) {\n\t\t\t\t\tres.writeHead(404, { 'Content-Type': 'text/html' });\n\t\t\t\t\tres.end(content, 'utf-8');\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tres.writeHead(500);\n\t\t\t\tres.end('Sorry, check with the site admin for error: ' + error.code + ' ..\\n');\n\t\t\t}\n\t\t} else {\n\t\t\tres.writeHead(200, { 'Content-Type': contentType });\n\t\t\tres.end(content, 'utf-8');\n\t\t}\n\t});\n};\n\nconst server = http.createServer(reqListener);\nserver.listen(port, host, () => {\n\tconsole.log(`Server is running on http://${host}:${port}`);\n});\n```\n\n----------------------------------------\n\nTITLE: Using noinit structs from other modules in V\nDESCRIPTION: Demonstrates how to properly use structs marked with `[noinit]` from outside their module by using the provided factory functions instead of direct initialization.\nSOURCE: https://github.com/vlang/v/blob/master/doc/docs.md#2025-04-21_snippet_74\n\nLANGUAGE: v\nCODE:\n```\nimport sample\n\nfn main() {\n\t// This doesn't work when the [noinit] attribute is present:\n\t// info := sample.Information{\n\t// \tdata: 'Sample information.'\n\t// }\n\n\t// Use this instead:\n\tinfo := sample.new_information('Sample information.')!\n\n\tprintln(info)\n}\n```\n\n----------------------------------------\n\nTITLE: Deprecating Struct Fields in V\nDESCRIPTION: Demonstrates how to deprecate struct fields using the @[deprecated] attribute. This example shows how to specify a deprecation message and a future date for the deprecation to take effect.\nSOURCE: https://github.com/vlang/v/blob/master/doc/docs.md#2025-04-21_snippet_153\n\nLANGUAGE: v\nCODE:\n```\nmodule abc\n\n// Note that only *direct* accesses to Xyz.d in *other modules*, will produce deprecation notices/warnings:\npub struct Xyz {\npub mut:\n\ta int\n\td int @[deprecated: 'use Xyz.a instead'; deprecated_after: '2999-03-01']\n\t// the tags above, will produce a notice, since the deprecation date is in the far future\n}\n```\n\n----------------------------------------\n\nTITLE: Including Files with Double Quotes\nDESCRIPTION: Include an external text file using double quote syntax in V language. Allows importing external file contents directly into the current file.\nSOURCE: https://github.com/vlang/v/blob/master/vlib/v/tests/tmpl/include.txt#2025-04-21_snippet_0\n\nLANGUAGE: vlang\nCODE:\n```\n@include \"a.txt\"\n```\n\n----------------------------------------\n\nTITLE: Setting Up Emscripten Environment\nDESCRIPTION: Commands to initialize the Emscripten environment and verify installation.\nSOURCE: https://github.com/vlang/v/blob/master/examples/tetris/README.md#2025-04-21_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\n. /opt/emsdk/emsdk_env.sh\nemcc --version\n```\n\n----------------------------------------\n\nTITLE: Single Line and Multiline Comments in V\nDESCRIPTION: This snippet shows how to use single line and multiline comments in V for documentation and clarification purposes within the code. It includes examples of both types of comments.\nSOURCE: https://github.com/vlang/v/blob/master/doc/docs.md#2025-04-21_snippet_3\n\nLANGUAGE: v\nCODE:\n```\n// This is a single line comment.\n/*\nThis is a multiline comment.\n   /* It can be nested. */\n*/\n```\n\n----------------------------------------\n\nTITLE: Configure CSRF Protection with Session Binding in V\nDESCRIPTION: This code snippet modifies the CSRF configuration in a V application to bind CSRF tokens cryptographically to user sessions. By including a session ID cookie name in the CsrfConfig, the app can reject requests if the session ID in cookies doesn't match the token, enhancing security against CSRF attacks.\nSOURCE: https://github.com/vlang/v/blob/master/vlib/vweb/csrf/README.md#2025-04-21_snippet_5\n\nLANGUAGE: v\nCODE:\n```\ncsrf_config = csrf.CsrfConfig{\n\t// ...\n\tsession_cookie: 'my_session_id_cookie_name'\n}\n```\n\n----------------------------------------\n\nTITLE: Running C# Boids Implementation\nDESCRIPTION: Command to run the C# version of the Boids algorithm using the dotnet CLI.\nSOURCE: https://github.com/vlang/v/blob/master/bench/vectors/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndotnet run\n```\n\n----------------------------------------\n\nTITLE: Implementing PGO (Profile-Guided Optimization) with Clang in V\nDESCRIPTION: A bash script that demonstrates how to use Profile-Guided Optimization with Clang when compiling V programs. The script builds an instrumented version, runs it to collect profile data, then compiles an optimized version using that data.\nSOURCE: https://github.com/vlang/v/blob/master/doc/docs.md#2025-04-21_snippet_184\n\nLANGUAGE: bash\nCODE:\n```\n#!/usr/bin/env bash\n\n# Get the full path to the current directory\nCUR_DIR=$(pwd)\n\n# Remove existing PGO data\nrm -f *.profraw\nrm -f default.profdata\n\n# Initial build with PGO instrumentation\nv -cc clang -prod -cflags -fprofile-generate -o pgo_gen .\n\n# Run the instrumented executable 10 times\nfor i in {1..10}; do\n    ./pgo_gen\ndone\n\n# Merge the collected data\nllvm-profdata merge -o default.profdata *.profraw\n\n# Compile the optimized version using the PGO data\nv -cc clang -prod -cflags \"-fprofile-use=${CUR_DIR}/default.profdata\" -o optimized_program .\n\n# Remove PGO data and instrumented executable\nrm *.profraw\nrm pgo_gen\n```\n\n----------------------------------------\n\nTITLE: Defining Context Struct for Middleware in Veb (V)\nDESCRIPTION: Defines a Context struct that extends Veb's Context, adding a custom field for cookie policy acceptance.\nSOURCE: https://github.com/vlang/v/blob/master/vlib/veb/README.md#2025-04-21_snippet_15\n\nLANGUAGE: v\nCODE:\n```\npub struct Context {\n\tveb.Context\npub mut:\n\thas_accepted_cookies bool\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Folder Assets with Prefix\nDESCRIPTION: This snippet demonstrates how to add assets from a folder while specifying a custom prefix for the include name, allowing better organization of asset management in the templates.\nSOURCE: https://github.com/vlang/v/blob/master/vlib/veb/assets/README.md#2025-04-21_snippet_7\n\nLANGUAGE: v\nCODE:\n```\n// add all assets in the \"assets\" folder\napp.am.handle_assets_at('assets', 'static')!\n```\n\n----------------------------------------\n\nTITLE: Encoding ASN.1 PrintableString in V\nDESCRIPTION: Demonstrates how to create and encode an ASN.1 PrintableString object, resulting in DER-encoded bytes.\nSOURCE: https://github.com/vlang/v/blob/master/vlib/x/encoding/asn1/DOCS.md#2025-04-21_snippet_0\n\nLANGUAGE: v\nCODE:\n```\nobj := asn1.PrintableString.new('hi')!\noutput := asn1.encode(obj)!\n\nassert output == [u8(0x13), 0x02, 0x68, 0x69]\n```\n\n----------------------------------------\n\nTITLE: Handling Comments and Blank Lines in CSV Reading in V Language\nDESCRIPTION: This snippet demonstrates how to handle comment lines and blank rows when reading a CSV file. Lines starting with a specified comment character are ignored during the read process.\nSOURCE: https://github.com/vlang/v/blob/master/vlib/encoding/csv/README_csv_reader.md#2025-04-21_snippet_9\n\nLANGUAGE: v\nCODE:\n```\nimport encoding.csv\n\nconst txt = '\\n# this is a comment line\\na,b,c\\n\\n\\n\n0,1,2\\n\n3,4,5\\n# another comment\\n'\n\nfn main() {\n\tmut csvr := csv.csv_reader(\n\t\tscr_buf:     txt.str\n\t\tscr_buf_len: txt.len\n\t\tcomment:     `#` // line starting with # will be ignored\n\t)!;\n\t// scan all rows, csvr.csv_map.len contain the valid\n\t// rows number in the CSV file.\n\tfor row_index in 0 .. csvr.csv_map.len {\n\t\trow := csvr.get_row(row_index)!;\n\t\tprintln(row);\n\t}\n\tcsvr.dispose_csv_reader();\n}\n```\n\n----------------------------------------\n\nTITLE: Test Output Options in V\nDESCRIPTION: This snippet provides details about various test runners that can be utilized when running tests in V. It describes the output formats supported by the runners and how to specify them using command line options.\nSOURCE: https://github.com/vlang/v/blob/master/vlib/v/help/common/test.txt#2025-04-21_snippet_1\n\nLANGUAGE: v\nCODE:\n```\nYou can use several alternative test result formats, using `-test-runner name`, or by setting VTEST_RUNNER (the command line option has higher priority).\n```\n\nLANGUAGE: v\nCODE:\n```\nThe names of the available test runners are:\n    `simple`   Fastest, does not import additional modules, does no processing.\n    `tap`      Format the output as required by the Test Anything Protocol (TAP).\n    `normal`   Supports color output, nicest/most human readable, the default.\n    `teamcity` Format the output as required by the Teamcity and JetBrains IDEs.\n```\n\n----------------------------------------\n\nTITLE: Environment-Specific File Examples\nDESCRIPTION: Demonstrates platform-specific file implementations using different file suffixes.\nSOURCE: https://github.com/vlang/v/blob/master/doc/docs.md#2025-04-21_snippet_174\n\nLANGUAGE: v\nCODE:\n```\nmodule main\nfn main() { println(message) }\n```\n\nLANGUAGE: v\nCODE:\n```\nmodule main\nconst message = 'Hello world'\n```\n\nLANGUAGE: v\nCODE:\n```\nmodule main\nconst message = 'Hello linux'\n```\n\nLANGUAGE: v\nCODE:\n```\nmodule main\nconst message = 'Hello windows'\n```\n\n----------------------------------------\n\nTITLE: Implementing V Web Server\nDESCRIPTION: V code for an alternative server implementation using vweb to serve the project files.\nSOURCE: https://github.com/vlang/v/blob/master/examples/js_dom_draw/README.md#2025-04-21_snippet_5\n\nLANGUAGE: v\nCODE:\n```\nmodule main\n\nimport vweb\nimport os\n\nconst http_port = 3001\n\nstruct App {\n\tvweb.Context\n}\n\nfn main() {\n\tvweb.run(new_app(), http_port)\n}\n\npub fn (mut app App) before_request() {\n\t// Build the draw.js javascript file\n\tos.execute_or_panic('v -b js_browser draw.js.v ')\n}\n\nfn new_app() &App {\n\tmut app := &App{}\n\tapp.serve_static('/favicon.ico', 'favicon.ico')\n\tapp.serve_static('/draw.js', 'draw.js')\n\tapp.mount_static_folder_at(os.resource_abs_path('.'), '/')\n\treturn app\n}\n\n@['/'; get]\npub fn (mut app App) controller_get_all_task() vweb.Result {\n\tfile := os.read_file('./index.html') or { panic(err) }\n\treturn app.html(file)\n}\n```\n\n----------------------------------------\n\nTITLE: C-style @for loop in V Templates\nDESCRIPTION: This snippet demonstrates the use of a C-style `@for` loop in V templates. It iterates from 0 to 4 and renders a `<span>` element containing the current value of `i` in each iteration.\nSOURCE: https://github.com/vlang/v/blob/master/vlib/v/TEMPLATES.md#2025-04-21_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n\"@for i = 0; i < 5; i++ {\\n    <span>$i</span>\\n}\"\n```\n\n----------------------------------------\n\nTITLE: HTML Form for CSRF Protection with CsrfApp\nDESCRIPTION: This HTML snippet provides a form implementing CSRF protection using a token set by CsrfApp in a V application. It demonstrates how to include a CSRF token as a hidden input field within a form that submits to an authenticated route.\nSOURCE: https://github.com/vlang/v/blob/master/vlib/vweb/csrf/README.md#2025-04-21_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<form action=\"/auth\" method=\"post\">\n    <input type=\"hidden\" name=\"@app.csrf.token_name\" value=\"@app.csrf.token\"/>\n    <label for=\"password\">Your password:</label>\n    <input type=\"text\" id=\"password\" name=\"password\" placeholder=\"Your password\" />\n</form>\n```\n\n----------------------------------------\n\nTITLE: Running WebAssembly Tetris\nDESCRIPTION: Command to run the compiled WebAssembly Tetris game using Emscripten's emrun.\nSOURCE: https://github.com/vlang/v/blob/master/examples/tetris/README.md#2025-04-21_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\nemrun examples/tetris/index.html\n```\n\n----------------------------------------\n\nTITLE: HTML Template String in V\nDESCRIPTION: Shows how to define a multi-line HTML string constant in V that includes CSS styling and JavaScript. Demonstrates proper escaping of quotes and handling of embedded script tags within string literals.\nSOURCE: https://github.com/vlang/v/blob/master/cmd/tools/vdoc/testdata/output_formats/README.md#2025-04-21_snippet_4\n\nLANGUAGE: v\nCODE:\n```\nconst html = '<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <style>\n      body {\n        background: linear-gradient(to right, #274060, #1B2845);\n        color: GhostWhite;\n        font-family: sans-serif;\n        text-align: center;\n      }\n    </style>\n  </head>\n  <body>\n    <h1>Your App Content!</h1>\n    <button onclick=\"callV()\">Call V!</button>\n  </body>\n  <script>\n    async function callV() {\n      // Call a V function that takes an argument and returns a value.\n      const res = await window.my_v_func(\\'Hello from JS!\\');\n      console.log(res);\n    }\n  </script>\n</html>'\n```\n\n----------------------------------------\n\nTITLE: Comparing File Sizes of C# and V Boids Implementations\nDESCRIPTION: Command to list and compare file sizes of C# and V Boids implementations in different compilation modes.\nSOURCE: https://github.com/vlang/v/blob/master/bench/vectors/README.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nls -nlarS ./bin/Release/net7.0/ubuntu.20.04-x64/publish/vectors ./vectors_development ./vectors_production\n```\n\n----------------------------------------\n\nTITLE: Parsing Reserved Keywords with Trie Structure in V Language\nDESCRIPTION: Illustrates a multi-level trie implementation for efficiently matching reserved keywords by leveraging character-based node traversal and prefix matching\nSOURCE: https://github.com/vlang/v/blob/master/vlib/v/token/README.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```\nTrieNode 0:  a b c d e f g h i j k l m n o p q r s t u v w x y z ... |\n| children:  1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 ... | children[`a`] = 1 -> TrieNode 1\n|   prefix so far: ''    | value: 0                                  |\n|\nTrieNode 1:  a b c d e f g h i j k l m n o p q r s t u v w x y z ... |\n| children:  0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2 0 0 0 0 0 0 0 0 ... | children[`s`] = 2 -> TrieNode 2\n|   prefix so far: 'a'   | value: 0                                  |\n|\nTrieNode 2:  a b c d e f g h i j k l m n o p q r s t u v w x y z ... |\n| children:  0 0 0 0 0 0 0 0 0 0 0 0 3 0 0 0 0 0 0 0 0 0 0 0 0 0 ... | children[`m`] = 3 -> TrieNode 3\n|   prefix so far: 'as'  | value: 0                                  |\n|\nTrieNode 3:  a b c d e f g h i j k l m n o p q r s t u v w x y z ... |\n| children:  0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 ... | all of children are 0\n|   prefix so far: 'asm' | value: int(token.Kind.asm)                |\n```\n```\n\n----------------------------------------\n\nTITLE: V Struct Declaration\nDESCRIPTION: Equivalent V struct declaration for the C struct showing how to handle complex C types.\nSOURCE: https://github.com/vlang/v/blob/master/doc/docs.md#2025-04-21_snippet_200\n\nLANGUAGE: v\nCODE:\n```\npub struct C.SomeCStruct {\n\timplTraits  u8\n\tmemPoolData u16\n\tdata voidptr\n\tsize usize\n\tview C.DataView\n}\n```\n\n----------------------------------------\n\nTITLE: Defining App Struct with Middleware in Veb (V)\nDESCRIPTION: Defines an App struct that embeds Veb's Middleware functionality, specifying the Context type to be used.\nSOURCE: https://github.com/vlang/v/blob/master/vlib/veb/README.md#2025-04-21_snippet_14\n\nLANGUAGE: v\nCODE:\n```\npub struct App {\n\tveb.Middleware[Context]\n}\n```\n\n----------------------------------------\n\nTITLE: Defining the SequentialReaderConfig Struct in V Language\nDESCRIPTION: This snippet defines the configuration struct for the sequential CSV reader. It includes parameters for memory buffer, file path, and settings for cell handling, such as separators and default values.\nSOURCE: https://github.com/vlang/v/blob/master/vlib/encoding/csv/README_csv_reader.md#2025-04-21_snippet_2\n\nLANGUAGE: v\nCODE:\n```\npub struct SequentialReaderConfig {\npub:\n\tscr_buf      voidptr // pointer to the buffer of data\n\tscr_buf_len  i64     // if > 0 use the RAM pointed by scr_buf as source of data\n\tfile_path    string\n\tstart_index  i64\n\tend_index    i64    = -1\n\tmem_buf_size int    = 1024 * 64 // default buffer size 64KByte\n\tseparator    u8     = `,`\n\tcomment      u8     = `#` // every line that start with the comment char is ignored\n\tdefault_cell string = '*' // return this string if out of the csv boundaries\n\tempty_cell   string // return this string if empty cell\n\tend_line_len int = endline_cr_len // size of the endline rune\n\tquote        u8  = `\"` // double quote is the standard quote char\n}\n```\n\n----------------------------------------\n\nTITLE: Running the Solution\nDESCRIPTION: Commands to compile and execute the main solution program with the generated measurements file.\nSOURCE: https://github.com/vlang/v/blob/master/examples/1brc/README.md#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ncd solution\nv -cc gcc -prod -cflags \"-std=c17 -march=native -mtune=native\" .\n./solution ~/measurements.txt\n```\n\n----------------------------------------\n\nTITLE: Group Iteration and Extraction Helper\nDESCRIPTION: Shows how to iterate through regex groups and extract their values and bounds using utility functions like get_group_by_id and get_group_bounds_by_id.\nSOURCE: https://github.com/vlang/v/blob/master/vlib/regex/README.md#2025-04-21_snippet_2\n\nLANGUAGE: v\nCODE:\n```\ntxt := 'my used string....'\nfor g_index := 0; g_index < re.group_count; g_index++ {\n\tprintln('#${g_index} [${re.get_group_by_id(txt, g_index)}] \\\n\t\tbounds: ${re.get_group_bounds_by_id(g_index)}')\n}\n```\n\n----------------------------------------\n\nTITLE: Help Documentation for Running V\nDESCRIPTION: This snippet refers to additional documentation regarding the 'v run' command, which is essential for executing V programs and verifying their output.\nSOURCE: https://github.com/vlang/v/blob/master/vlib/v/help/build/build.txt#2025-04-21_snippet_12\n\nLANGUAGE: V\nCODE:\n```\nSee also:\n   `v help run` for documentation regarding `v run`.\n```\n\n----------------------------------------\n\nTITLE: Handling Session Data in Endpoint Handlers\nDESCRIPTION: This example handles session data within an endpoint to display a welcome message if the user is logged in, or a login prompt if not. It demonstrates accessing sessions.CurrentSession directly due to its embedding on the Context struct, enabling session data retrieval using ctx.session_data.\nSOURCE: https://github.com/vlang/v/blob/master/vlib/x/sessions/README.md#2025-04-21_snippet_3\n\nLANGUAGE: v\nCODE:\n```\npub fn (app &App) index(mut ctx Context) veb.Result {\n    // check if a user is logged in\n    if user := ctx.session_data {\n        return ctx.text('Welcome ${user.name}! Verification status: ${user.verified}')\n    } else {\n        // user is not logged in\n        return ctx.text('You are not logged in :(')\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Cleaning Up Cached Assets\nDESCRIPTION: This snippet illustrates how to call the cleanup_cache method of the AssetManager to remove old cached files that are no longer necessary after adding a folder of assets.\nSOURCE: https://github.com/vlang/v/blob/master/vlib/veb/assets/README.md#2025-04-21_snippet_6\n\nLANGUAGE: v\nCODE:\n```\napp.am.cleanup_cache()!\n```\n\n----------------------------------------\n\nTITLE: Configuring launch.json for V Debugging in Visual Studio Code\nDESCRIPTION: This JSON configuration sets up the debug environment for V programs in Visual Studio Code. It specifies the debugger type, program path, and pre-launch task for building the V program.\nSOURCE: https://github.com/vlang/v/blob/master/doc/vscode.md#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"version\": \"0.2.0\",\n    \"configurations\": [\n        {\n            \"name\": \"(lldb) Start\",\n            \"type\": \"cppdbg\",\n            \"request\": \"launch\",\n            \"program\": \"Enter the program name, e.g. \\\"${workspaceFolder}/a.out\\\"\",\n            \"args\": [],\n            \"stopAtEntry\": false,\n            \"cwd\": \"${fileDirname}\",\n            \"environment\": [],\n            \"externalConsole\": false,\n            \"MIMode\": \"lldb\",\n            \"preLaunchTask\": \"build\"\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Quick Syntax Check\nDESCRIPTION: The '-check-syntax' option allows users to quickly scan and parse the files without compiling. This is useful for quick verifications of syntax before proceeding.\nSOURCE: https://github.com/vlang/v/blob/master/vlib/v/help/build/build.txt#2025-04-21_snippet_4\n\nLANGUAGE: V\nCODE:\n```\n-check-syntax\n    Only scan and parse the files, but then stop. Useful for very quick syntax checks.\n```\n\n----------------------------------------\n\nTITLE: Running All Tests in V\nDESCRIPTION: The 'test-all' command executes a comprehensive set of tests that CI runs locally, which can take over 2 minutes and requires internet connectivity to verify installations. Ensures thorough validation of the V environment.\nSOURCE: https://github.com/vlang/v/blob/master/vlib/v/help/other/other.txt#2025-04-21_snippet_12\n\nLANGUAGE: V\nCODE:\n```\ntest-all         Run most checks, that the CI does locally.\n                   It may take over 2 minutes, and it needs internet connectivity too,\n                   because it tries to also verify that `v install` works.\n```\n\n----------------------------------------\n\nTITLE: Advanced Manual Heap Allocation with Unsafe in V\nDESCRIPTION: Shows an advanced (not recommended) technique for explicit heap allocation using the & prefix with struct literals and unsafe blocks to override compiler checks. This approach is risky and should be avoided in normal code.\nSOURCE: https://github.com/vlang/v/blob/master/doc/docs.md#2025-04-21_snippet_141\n\nLANGUAGE: v\nCODE:\n```\nstruct MyStruct {\n\tn int\n}\n\nstruct RefStruct {\nmut:\n\tr &MyStruct\n}\n\n// simple function - just to overwrite stack segment previously used by `g()`\n\nfn use_stack() {\n\tx := 7.5\n\ty := 3.25\n\tz := x + y\n\tprintln('${x} ${y} ${z}')\n}\n\nfn main() {\n\tmut m := MyStruct{}\n\tmut r := RefStruct{\n\t\tr: &m\n\t}\n\tr.g()\n\tuse_stack() // to erase invalid stack contents\n\tprintln('r: ${r}')\n}\n\nfn (mut r RefStruct) g() {\n\ts := &MyStruct{ // `s` explicitly refers to a heap object\n\t\tn: 7\n\t}\n\t// change `&MyStruct` -> `MyStruct` above and `r.f(s)` -> `r.f(&s)` below\n\t// to see data in stack segment being overwritten\n\tr.f(s)\n}\n\nfn (mut r RefStruct) f(s &MyStruct) {\n\tr.r = unsafe { s } // override compiler check\n}\n```\n\n----------------------------------------\n\nTITLE: Copying WebAssembly Output Files\nDESCRIPTION: Command to copy the compiled WebAssembly output to the required JavaScript file.\nSOURCE: https://github.com/vlang/v/blob/master/examples/tetris/README.md#2025-04-21_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\ncp examples/tetris/tetris examples/tetris/tetris.js\n```\n\n----------------------------------------\n\nTITLE: Advanced CSRF Token Verification\nDESCRIPTION: Illustrates advanced usage of CSRF protection by manually calling `csrf.protect` to decide the action when a CSRF token is invalid. Shows conditional logic for handling invalid token scenarios.\nSOURCE: https://github.com/vlang/v/blob/master/vlib/veb/csrf/README.md#2025-04-21_snippet_5\n\nLANGUAGE: v\nCODE:\n```\n@[post]\nfn (app &App) login(mut ctx, password string) veb.Result {\n\tif csrf.protect(mut ctx, csrf_config) == false {\n\t\t// CSRF verification failed!\n\t}\n\t// ...\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying MIT License Text\nDESCRIPTION: This snippet includes the full MIT license text, outlining the permissions for usage, distribution, and modification. It does not require any external dependencies. The text serves as a legal agreement when using the software, with no parameters required. The output is the license information in plain text.\nSOURCE: https://github.com/vlang/v/blob/master/thirdparty/stb_image/README.md#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nCopyright (c) 2017 Sean Barrett\nPermission is hereby granted, free of charge, to any person obtaining a copy of\nthis software and associated documentation files (the \\\"Software\\\"), to deal in\nthe Software without restriction, including without limitation the rights to\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\nof the Software, and to permit persons to whom the Software is furnished to do\nso, subject to the following conditions:\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\nTHE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n```\n\n----------------------------------------\n\nTITLE: Entity Name Validation Error\nDESCRIPTION: Error message indicating that an entity is lacking a required name attribute or identifier\nSOURCE: https://github.com/vlang/v/blob/master/vlib/encoding/xml/test/local/15_incomplete_entity_1/expected_error.txt#2025-04-21_snippet_0\n\nLANGUAGE: v\nCODE:\n```\nEntity is missing name.\n```\n\n----------------------------------------\n\nTITLE: Upgrade All Packages Command\nDESCRIPTION: Automatically upgrades all outdated modules to their most recent versions, ensuring the project dependencies are current.\nSOURCE: https://github.com/vlang/v/blob/master/vlib/v/help/vpm/vpm.txt#2025-04-21_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nv upgrade\n```\n\n----------------------------------------\n\nTITLE: Simple C Program Example\nDESCRIPTION: Example C program used to demonstrate C to V translation.\nSOURCE: https://github.com/vlang/v/blob/master/doc/docs.md#2025-04-21_snippet_201\n\nLANGUAGE: c\nCODE:\n```\n#include \"stdio.h\"\n\nint main() {\n\tfor (int i = 0; i < 10; i++) {\n\t\tprintf(\"hello world\\n\");\n\t}\n        return 0;\n}\n```\n\n----------------------------------------\n\nTITLE: Constructing an Any type in V\nDESCRIPTION: This snippet demonstrates how to construct an `Any` type from scratch using maps and arrays. It imports the `x.json2` module and then creates a map and an array, populating them with different data types. Finally, it converts the map to a JSON string using the `str()` method and prints it to the console.\nSOURCE: https://github.com/vlang/v/blob/master/vlib/x/json2/README.md#2025-04-21_snippet_4\n\nLANGUAGE: v\nCODE:\n```\nimport x.json2\n\nfn main() {\n\tmut me := map[string]json2.Any{}\n\tme['name'] = 'Bob'\n\tme['age'] = 18\n\n\tmut arr := []json2.Any{}\n\tarr << 'rock'\n\tarr << 'papers'\n\tarr << json2.null\n\tarr << 12\n\n\tme['interests'] = arr\n\n\tmut pets := map[string]json2.Any{}\n\tpets['Sam'] = 'Maltese Shitzu'\n\tme['pets'] = pets\n\n\t// Stringify to JSON\n\tprintln(me.str())\n\t//{\n\t//   \"name\":\"Bob\",\n\t//   \"age\":18,\n\t//   \"interests\":[\"rock\",\"papers\",\"scissors\",null,12],\n\t//   \"pets\":{\"Sam\":\"Maltese\"}\n\t//}\n}\n```\n\n----------------------------------------\n\nTITLE: Redeclaring C Functions in V\nDESCRIPTION: Shows the syntax for redeclaring C functions in V to make them callable from V code.\nSOURCE: https://github.com/vlang/v/blob/master/doc/docs.md#2025-04-21_snippet_191\n\nLANGUAGE: v\nCODE:\n```\nfn C.name_of_the_C_function(param1 int, const_param2 &char, param3 f32) f64\n```\n\n----------------------------------------\n\nTITLE: Including Files with Single Quotes\nDESCRIPTION: Include an external text file using single quote syntax in V language. Provides an alternative method for importing file contents.\nSOURCE: https://github.com/vlang/v/blob/master/vlib/v/tests/tmpl/include.txt#2025-04-21_snippet_1\n\nLANGUAGE: vlang\nCODE:\n```\n@include 'b.txt'\n```\n\n----------------------------------------\n\nTITLE: Conditional Rendering with @if in V Templates\nDESCRIPTION: This snippet demonstrates the use of the `@if` directive in V templates for conditional rendering of HTML content. The content within the curly braces is rendered only if the specified boolean condition is true. Newlines at the beginning and the end are ignored.\nSOURCE: https://github.com/vlang/v/blob/master/vlib/v/TEMPLATES.md#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n\"@if bool_val {\\n    <span>This is shown if bool_val is true</span>\\n}\"\n```\n\n----------------------------------------\n\nTITLE: Using @[typedef] Attribute for C Typedef Structs\nDESCRIPTION: Demonstrates how to handle C structs defined with typedef using the @[typedef] attribute in V.\nSOURCE: https://github.com/vlang/v/blob/master/doc/docs.md#2025-04-21_snippet_190\n\nLANGUAGE: v\nCODE:\n```\n@[typedef]\npub struct C.TypeName {\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a New Checker for AST in V\nDESCRIPTION: This snippet demonstrates how to create a new checker for the abstract syntax tree (AST) using 'checker.new_checker'. The checker examines the parsed files and stores errors and warnings.\nSOURCE: https://github.com/vlang/v/blob/master/vlib/v/README.md#2025-04-21_snippet_3\n\nLANGUAGE: v\nCODE:\n```\nimport v.checker\n\nmut checker := checker.new_checker(table, &pref)\n```\n\n----------------------------------------\n\nTITLE: Build Options for Executables in V Language\nDESCRIPTION: This snippet covers additional options for building executables, including architecture specifications, macOS settings, and platform targeting. These options provide fine control over the build output, aiding developers in creating platform-specific or cross-platform binaries.\nSOURCE: https://github.com/vlang/v/blob/master/vlib/v/help/build/build-c.txt#2025-04-21_snippet_1\n\nLANGUAGE: V\nCODE:\n```\n   -cross\n      With `-cross`, V will attempt to output cross-platform C code.\n\n   -os <os>, -target-os <os>\n      Change the target OS that V tries to compile for.\n      By default, the target OS is the host system.\n\n      Here is a list of the operating systems, supported by V:\n      (CI tests runs on every commit/PR for each of these):\n            `windows`, `linux`, `macos`\n\n      The compiler is known to also work, and has support for these operating\n      systems also (although we do not test it as regularly as for the above):\n            `vinix`,\n            `ios`,\n            `android`, `termux`,\n            `freebsd`, `openbsd`, `netbsd`, `dragonfly`,\n            `solaris`, `serenity`, `haiku`,\n            `plan9`,\n            `wasm32`, `wasm32-wasi`, `wasm32-emscripten`\n\n      Note that V has the concept of platform files, i.e. files ending\n      with `_platform.c.v`, and usually only the matching files are used in\n      a compilation, and also it supports a `_default.c.v` file, that will\n      be used, when no other more specific `_platform.c.v` file is found.\n      The default is mainly useful for writing shims for new platforms,\n      until a more specialized _platform.c.v is written instead.\n\n      For example, suppose you have these 3 files:\n          x_default.c.v\n          x_windows.c.v\n          x_linux.c.v\n      If you compile with `-os freebsd`, then x_default.c.v will be used.\n      If you compile with `-os linux`, then x_linux.c.v will be used.\n      If you compile with `-os windows`, then x_windows.c.v will be used.\n      If you compile with `-cross`, then all, *except x_default.c.v*\n      will be used, wrapped in conditional compilation guards, so that\n      the generated C source code will be larger, but will compile on all\n      explicitly supported platforms without source changes.\n\n   -m32, -m64\n      Whether 32-bit or 64-bit machine code will be generated.\n      NB: if you need to produce 32-bit code, *and* you are cross compiling\n      to another OS, you may need to also set the environment variable\n      VCROSS_COMPILER_NAME, in order to override the default cross compiler,\n      that V will use (`x86_64-w64-mingw32-gcc` for targeting Windows, and\n      `clang` for targeting Linux from other operating systems).\n\n   -macosx-version-min 10.7\n      Only relevant on macos. It will be passed as -mmacosx-version-min=10.7 to\n      the C backend compiler clang . It is 10.7 on macos by default. If you\n      pass `-macosx-version-min 0`, then that flag will not be passed at all.\n\n   -sanitize\n      Pass flags related to sanitization to the C compiler.\n\n   -shared\n      Tell V to compile a shared object instead of an executable.\n      The resulting file extension will be `.dll` on Windows and `.so` on Unix systems\n```\n\n----------------------------------------\n\nTITLE: Random Access Reading with Custom Config in V Language\nDESCRIPTION: This example demonstrates how to read a specific cell directly from the CSV reader using custom configurations for default and empty cell handling, as well as retrieving specific cells directly.\nSOURCE: https://github.com/vlang/v/blob/master/vlib/encoding/csv/README_csv_reader.md#2025-04-21_snippet_6\n\nLANGUAGE: v\nCODE:\n```\nimport encoding.csv\n\nconst txt = '\\na,b,c\\n0,1,2\\n3,,5\\n'\n\nfn main() {\n\tmut csvr := csv.csv_reader_from_string(txt)!\n\n\t// we are directly setting these params in the `RandomAccessReader` struct\n\tcsvr.default_cell = '*';\n\tcsvr.empty_cell = 'EMPTY';\n\n\t// read a single cell at the row 1 column 0\n\tprintln('[0,1] => ${csvr.get_cell(x: 0, y: 1)!}');\n\t// try a non existing cell. it will return `default_cell` string\n\tprintln('[0,4] => ${csvr.get_cell(x: 0, y: 4)!}');\n\t// try an empty string. it will return `empty_cell` string\n\tprintln('[1,2] => ${csvr.get_cell(x: 1, y: 2)!}');\n\tcsvr.dispose_csv_reader();\n}\n```\n\n----------------------------------------\n\nTITLE: Using sizeof and __offsetof in V\nDESCRIPTION: Demonstrates how to use sizeof to get the size of a type in bytes and __offsetof to get the offset of a struct field in bytes.\nSOURCE: https://github.com/vlang/v/blob/master/doc/docs.md#2025-04-21_snippet_181\n\nLANGUAGE: v\nCODE:\n```\nstruct Foo {\n\ta int\n\tb int\n}\n\nassert sizeof(Foo) == 8\nassert __offsetof(Foo, a) == 0\nassert __offsetof(Foo, b) == 4\n```\n\n----------------------------------------\n\nTITLE: Implementing Node.js Server\nDESCRIPTION: JavaScript code for a basic Node.js server to serve the example files without external dependencies.\nSOURCE: https://github.com/vlang/v/blob/master/examples/js_dom_draw/README.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst http = require('http');\nconst fs = require('fs');\nvar path = require('path');\n\nconst host = 'localhost';\nconst port = 3000;\n\nconst reqListener = function (req, res) {\n\tconsole.log('[route] - ', req.url);\n\n\tvar filePath = '.' + req.url;\n\tif (filePath == './') {\n\t\tfilePath = './index.html';\n\t}\n\n\tvar extname = String(path.extname(filePath)).toLowerCase();\n\tvar mimeTypes = {\n\t\t'.html': 'text/html',\n\t\t'.js': 'text/javascript',\n\t\t'.css': 'text/css',\n\t\t'.json': 'application/json',\n\t\t'.png': 'image/png',\n\t\t'.jpg': 'image/jpg',\n\t\t'.gif': 'image/gif',\n\t\t'.svg': 'image/svg+xml',\n\t\t'.wav': 'audio/wav',\n\t\t'.mp4': 'video/mp4',\n\t\t'.woff': 'application/font-woff',\n\t\t'.ttf': 'application/font-ttf',\n\t\t'.eot': 'application/vnd.ms-fontobject',\n\t\t'.otf': 'application/font-otf',\n\t\t'.wasm': 'application/wasm',\n\t};\n\n\tvar contentType = mimeTypes[extname] || 'application/octet-stream';\n\n\tfs.readFile(filePath, function (error, content) {\n\t\tif (error) {\n\t\t\tif (error.code == 'ENOENT') {\n\t\t\t\tfs.readFile('./404.html', function (error, content) {\n\t\t\t\t\tres.writeHead(404, { 'Content-Type': 'text/html' });\n\t\t\t\t\tres.end(content, 'utf-8');\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tres.writeHead(500);\n\t\t\t\tres.end('Sorry, check with the site admin for error: ' + error.code + ' ..\\n');\n\t\t\t}\n\t\t} else {\n\t\t\tres.writeHead(200, { 'Content-Type': contentType });\n\t\t\tres.end(content, 'utf-8');\n\t\t}\n\t});\n};\n\nconst server = http.createServer(reqListener);\nserver.listen(port, host, () => {\n\tconsole.log(`Server is running on http://${host}:${port}`);\n});\n```\n\n----------------------------------------\n\nTITLE: Saving and Updating Session Data in Veb\nDESCRIPTION: Illustrated here is the use of the save method to store and update session data when a user logs in within the application. It details error handling with optional results and session state changes via new session id creation. The application relies on sessions.Sessions struct from the sessions module.\nSOURCE: https://github.com/vlang/v/blob/master/vlib/x/sessions/README.md#2025-04-21_snippet_4\n\nLANGUAGE: v\nCODE:\n```\npub fn (mut app App) login(mut ctx Context) veb.Result {\n    // set a session id cookie and save data for the new user\n    app.sessions.save(mut ctx, User{\n        name: '[no name provided]'\n    }) or { return ctx.server_error('could not save session data, please try again') }\n    return ctx.text('You are now logged in!')\n}\n```\n\n----------------------------------------\n\nTITLE: Downloading and Running V Scripts - V\nDESCRIPTION: The command 'v download -RD URL' allows users to download and run arbitrary self-contained '.v' or '.vsh' scripts/programs. It is useful for executing scripts without prior installation.\nSOURCE: https://github.com/vlang/v/blob/master/vlib/v/help/installation/installation.txt#2025-04-21_snippet_4\n\nLANGUAGE: v\nCODE:\n```\nv download -RD URL    to download, and then run arbitrary self contained '.v' or '.vsh' scripts/programs.\n```\n\n----------------------------------------\n\nTITLE: Function Argument Compatibility in V Concurrency\nDESCRIPTION: Illustrates how different variable types (constant, mutable, shared, atomic) can be passed to functions in concurrent V code. Shows compatibility rules for function arguments.\nSOURCE: https://github.com/vlang/v/blob/master/doc/upcoming.md#2025-04-21_snippet_2\n\nLANGUAGE: v\nCODE:\n```\nfn f(x St) {...}\nfn g(mut x St) {...}\nfn h(shared x St) {...}\nfn i(atomic x u64) {...}\n\na := St{...}\nf(a)\n\nmut b := St{...}\nf(b)\ngo g(mut b)\n// `b` should not be accessed here anymore\n\nshared c := St{...}\nh(shared c)\n\natomic d &u64\ni(atomic d)\n```\n\n----------------------------------------\n\nTITLE: Creating a Quine Program in V\nDESCRIPTION: This snippet shows how to create a quine (a program that prints its own source code) using the @FILE pseudo variable and $embed_file function.\nSOURCE: https://github.com/vlang/v/blob/master/doc/docs.md#2025-04-21_snippet_160\n\nLANGUAGE: v\nCODE:\n```\nprint($embed_file(@FILE).to_string())\n```\n\n----------------------------------------\n\nTITLE: Calling Redeclared C Functions in V\nDESCRIPTION: Demonstrates how to call a redeclared C function in V code, showing that the syntax is similar to calling V functions.\nSOURCE: https://github.com/vlang/v/blob/master/doc/docs.md#2025-04-21_snippet_192\n\nLANGUAGE: v\nCODE:\n```\nf := C.name_of_the_C_function(123, c'here is some C style string', 1.23)\ndump(f)\n```\n\n----------------------------------------\n\nTITLE: Including Javascript files with @js in V\nDESCRIPTION: This snippet demonstrates how to include a Javascript file using the `@js` directive. The path to the javascript file is specified as a string literal.\nSOURCE: https://github.com/vlang/v/blob/master/vlib/v/TEMPLATES.md#2025-04-21_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n\"@js 'myscripts.js'\"\n```\n\n----------------------------------------\n\nTITLE: Converting Between Enums and Other Types in V\nDESCRIPTION: Demonstrates how to create enum values from strings or integers using the 'from' method, and how to convert enum values to strings using the 'str' method.\nSOURCE: https://github.com/vlang/v/blob/master/doc/docs.md#2025-04-21_snippet_98\n\nLANGUAGE: v\nCODE:\n```\nenum Cycle {\n\tone\n\ttwo = 2\n\tthree\n}\n\n// Create enum from value\nprintln(Cycle.from(10) or { Cycle.three })\nprintln(Cycle.from('two')!)\n\n// Convert an enum value to a string\nprintln(Cycle.one.str())\n```\n\n----------------------------------------\n\nTITLE: Translated V Program\nDESCRIPTION: The V code generated from translating the C program example.\nSOURCE: https://github.com/vlang/v/blob/master/doc/docs.md#2025-04-21_snippet_202\n\nLANGUAGE: v\nCODE:\n```\nfn main() {\n\tfor i := 0; i < 10; i++ {\n\t\tprintln('hello world')\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: V Array Structure Definition\nDESCRIPTION: Provides the C-style structure definition of V's array type, which is crucial for understanding how to pass V array elements to C functions.\nSOURCE: https://github.com/vlang/v/blob/master/doc/c_and_v_type_interoperability.md#2025-04-21_snippet_2\n\nLANGUAGE: c\nCODE:\n```\nstruct array {\n    void * data;\n    // For arrays, the following `offset` field is 0.\n    // For slices, the `offset` field contains the offset (in elements) from\n    // the start of the original array.\n    int offset; \n    int len;\n    int cap;\n    int flags;\n    int element_size;\n};\n```\n\n----------------------------------------\n\nTITLE: Help Documentation References\nDESCRIPTION: This snippet provides references to help commands for various build flags specific to C, JS, Native, and WebAssembly, useful for users looking to explore compiler capabilities further.\nSOURCE: https://github.com/vlang/v/blob/master/vlib/v/help/build/build.txt#2025-04-21_snippet_11\n\nLANGUAGE: V\nCODE:\n```\nFor C-specific build flags, use `v help build-c`.\nFor JS-specific build flags, use `v help build-js`.\nFor Native-specific build flags, use `v help build-native`.\nFor WebAssembly-specific build flags, use `v help build-wasm`.\n```\n\n----------------------------------------\n\nTITLE: Building a Blog Application in V with OpenSSL\nDESCRIPTION: This command compiles the V application into a binary named 'blog' with OpenSSL support. By using the flag '-d use_openssl', the resulting binary size is minimized to approximately 400KB, avoiding the default inclusion of mbedtls which increases the size significantly.\nSOURCE: https://github.com/vlang/v/blob/master/tutorials/building_a_simple_web_blog_with_veb/README.md#2025-04-21_snippet_9\n\nLANGUAGE: Bash\nCODE:\n```\nv -d use_openssl -o blog -prod . && strip ./blog\n```\n\n----------------------------------------\n\nTITLE: Defining SLH-DSA Parameter Sets in V\nDESCRIPTION: This snippet defines an enumeration representing the predefined SLH-DSA parameter sets available based on different underlying hash algorithms. These parameter sets specify the trade-off between security and signature size or generation speed.\nSOURCE: https://github.com/vlang/v/blob/master/vlib/x/crypto/slhdsa/README.md#2025-04-21_snippet_0\n\nLANGUAGE: v\nCODE:\n```\npub enum Kind {\n\t// SHA2-based family\n\tsha2_128s = C.NID_SLH_DSA_SHA2_128s\n\tsha2_128f = C.NID_SLH_DSA_SHA2_128f\n\tsha2_192s = C.NID_SLH_DSA_SHA2_192s\n\tsha2_192f = C.NID_SLH_DSA_SHA2_192f\n\tsha2_256s = C.NID_SLH_DSA_SHA2_256s\n\tsha2_256f = C.NID_SLH_DSA_SHA2_256f\n\t// SHAKE-based family\n\tshake_128s = C.NID_SLH_DSA_SHAKE_128s\n\tshake_128f = C.NID_SLH_DSA_SHAKE_128f\n\tshake_192s = C.NID_SLH_DSA_SHAKE_192s\n\tshake_192f = C.NID_SLH_DSA_SHAKE_192f\n\tshake_256s = C.NID_SLH_DSA_SHAKE_256s\n\tshake_256f = C.NID_SLH_DSA_SHAKE_256f\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Package.json Scripts\nDESCRIPTION: JSON configuration to add start and build scripts to package.json for the Node.js project.\nSOURCE: https://github.com/vlang/v/blob/master/examples/js_dom_draw/README.md#2025-04-21_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n  \"scripts\": {\n    ...\n    \"start\": \"npm run build && node server.js\",\n    \"build\": \"v -b js_browser draw.js.v\"\n  }\n```\n\n----------------------------------------\n\nTITLE: Handling Static Files in V Web Server\nDESCRIPTION: This snippet demonstrates how to serve static files using the V web server. It shows how to set up a static file handler to make assets publicly accessible over HTTP.\nSOURCE: https://github.com/vlang/v/blob/master/vlib/veb/README.md#2025-04-21_snippet_9\n\nLANGUAGE: v\nCODE:\n```\nmodule main\n\nimport veb\n\npub struct Context {\n\tveb.Context\n}\n\npub struct App {\n\tveb.StaticHandler\n}\n\nfn main() {\n\tmut app := &App{}\n\n\tapp.handle_static('static', false)!\n\n\tveb.run[App, Context](mut app, 8080)\n}\n```\n\n----------------------------------------\n\nTITLE: Language Server Installation Options\nDESCRIPTION: CLI flags for installing and managing the V language server, including forced updates, source installation, and path specification\nSOURCE: https://github.com/vlang/v/blob/master/vlib/v/help/other/ls.txt#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nv ls --install\nv ls --update\nv ls --check\nv ls --force\nv ls --source\nv ls -p /custom/path\n```\n\n----------------------------------------\n\nTITLE: Docker Installation for V\nDESCRIPTION: This snippet demonstrates how to build and run the V programming language using Docker. This method provides a containerized environment for running V.\nSOURCE: https://github.com/vlang/v/blob/master/README.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ngit clone --depth=1 https://github.com/vlang/v\ncd v\ndocker build -t vlang .\ndocker run --rm -it vlang:latest\n```\n\n----------------------------------------\n\nTITLE: Generating Sine Tones for Audio Playback in V\nDESCRIPTION: This snippet defines an inline function to compute sine tones based on the number of periods and frames. It is used to generate sound signals for audio processing based on the elapsed milliseconds since the audio stream began.\nSOURCE: https://github.com/vlang/v/blob/master/vlib/sokol/README.md#2025-04-21_snippet_0\n\nLANGUAGE: v\nCODE:\n```\nconst sw = time.new_stopwatch()\nconst sw_start_ms = sw.elapsed().milliseconds()\n\n@[inline]\nfn sintone(periods int, frame int, num_frames int) f32 {\n\treturn math.sinf(f32(periods) * (2 * math.pi) * f32(frame) / f32(num_frames))\n}\n\n```\n\n----------------------------------------\n\nTITLE: Using C's printf Function in V\nDESCRIPTION: Demonstrates how to use a C function (dprintf) from stdio.h by redeclaring it in V and then calling it with parameters.\nSOURCE: https://github.com/vlang/v/blob/master/doc/docs.md#2025-04-21_snippet_193\n\nLANGUAGE: v\nCODE:\n```\n#include <stdio.h>\n\n// int dprintf(int fd, const char *format, ...)\nfn C.dprintf(fd int, const_format &char, ...voidptr) int\n\nvalue := 12345\nx := C.dprintf(0, c'Hello world, value: %d\\n', value)\ndump(x)\n```\n\n----------------------------------------\n\nTITLE: Combining Assets into a Single File\nDESCRIPTION: This snippet demonstrates the combination of all added assets into a single CSS file by calling the combine method of the AssetManager, which returns the path of the minified file.\nSOURCE: https://github.com/vlang/v/blob/master/vlib/veb/assets/README.md#2025-04-21_snippet_4\n\nLANGUAGE: v\nCODE:\n```\n// `combine` returns the path of the minified file\nminified_file := app.am.combine(.css)!\n```\n\n----------------------------------------\n\nTITLE: Adding Assets to the Asset Manager\nDESCRIPTION: This snippet demonstrates how to add a CSS file as an asset with a specified path and include name using the add method of the AssetManager.\nSOURCE: https://github.com/vlang/v/blob/master/vlib/veb/assets/README.md#2025-04-21_snippet_2\n\nLANGUAGE: v\nCODE:\n```\n// add a css file at the path \"css/main.css\" and set its include name to \"main.css\"\napp.am.add(.css, 'css/main.css', 'main.css')\n```\n\n----------------------------------------\n\nTITLE: Translating C Code to V\nDESCRIPTION: The 'translate' command is designed to convert C code into V code, facilitating the transition for developers moving from C to V. The command operates without any external dependencies.\nSOURCE: https://github.com/vlang/v/blob/master/vlib/v/help/other/other.txt#2025-04-21_snippet_10\n\nLANGUAGE: V\nCODE:\n```\ntranslate        Translate C code to V.\n```\n\n----------------------------------------\n\nTITLE: Defining ASN.1 Structures with FieldOptions in V\nDESCRIPTION: Demonstrates how to define complex ASN.1 structures using FieldOptions for handling tagged, optional, and default elements.\nSOURCE: https://github.com/vlang/v/blob/master/vlib/x/encoding/asn1/DOCS.md#2025-04-21_snippet_4\n\nLANGUAGE: v\nCODE:\n```\nstruct PersonnelRecord {\nmut:\n\tname     asn1.OctetString @[context_specific: 0; implicit; inner: 4]\n\tlocation asn1.Integer     @[context_specific: 1; implicit; inner: 2]\n\tage      asn1.Integer     @[context_specific: 2; implicit; inner: 2]\n}\n\nattrs := ['context_specific: 0', 'implicit', 'inner: 4']\nfo := FieldOptions.from_attrs(attrs)!\n// and then you can pass the options to serialization phase\nout := asn1.encode_with_field_options(p.name, fo)!\n```\n\n----------------------------------------\n\nTITLE: Installing OpenSSL on non-Windows Systems\nDESCRIPTION: This snippet lists the installation command for OpenSSL that is needed when using the `net.http` and `net.websocket` modules in V. It varies based on the operating system.\nSOURCE: https://github.com/vlang/v/blob/master/README.md#2025-04-21_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nbrew install openssl\n```\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt install libssl-dev\n```\n\nLANGUAGE: bash\nCODE:\n```\nsudo dnf install openssl-devel\n```\n\n----------------------------------------\n\nTITLE: New Article Form Template\nDESCRIPTION: HTML form for creating new blog articles\nSOURCE: https://github.com/vlang/v/blob/master/tutorials/building_a_simple_web_blog_with_veb/README.md#2025-04-21_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<html>\n  <head>\n\t<title>V Blog</title>\n  </head>\n  <body>\n\t<form action=\"/new_article\" method=\"post\">\n\t  <input type=\"text\" placeholder=\"Title\" name=\"title\" /> <br />\n\t  <textarea placeholder=\"Text\" name=\"text\"></textarea>\n\t  <input type=\"submit\" />\n\t</form>\n  </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Printing Build Time in V Program\nDESCRIPTION: This code demonstrates how to print the compilation time of a V program using the @BUILD_TIMESTAMP pseudo variable and time module.\nSOURCE: https://github.com/vlang/v/blob/master/doc/docs.md#2025-04-21_snippet_161\n\nLANGUAGE: v\nCODE:\n```\nimport time\n\nprintln('This program, was compiled at ${time.unix(@BUILD_TIMESTAMP.i64()).format_ss_milli()} .')\n```\n\n----------------------------------------\n\nTITLE: Running WebAssembly File using Emscripten\nDESCRIPTION: This command uses Emscripten's emrun tool to serve and run the HTML file that loads the WebAssembly module.\nSOURCE: https://github.com/vlang/v/blob/master/examples/wasm/change_color_by_id/README.md#2025-04-21_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nemrun change_color_by_id.html\n```\n\n----------------------------------------\n\nTITLE: Running V Code Examples\nDESCRIPTION: This code snippet illustrates how to run example programs written in V language. It compiles and runs the 'hello_world' example, and optionally runs other examples.\nSOURCE: https://github.com/vlang/v/blob/master/README.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncd examples\nv hello_world.v && ./hello_world    # or simply\nv run hello_world.v\n```\n\nLANGUAGE: bash\nCODE:\n```\nv run word_counter/word_counter.v word_counter/cinderella.txt\nv run news_fetcher.v\nv run tetris/tetris.v\n```\n\n----------------------------------------\n\nTITLE: Installing Development Libraries for Sokol and GG Graphics on Debian/Ubuntu\nDESCRIPTION: This snippet provides the installation command needed to set up essential development libraries required for building applications with Sokol and GG graphics modules on Debian/Ubuntu systems.\nSOURCE: https://github.com/vlang/v/blob/master/README.md#2025-04-21_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt install libxi-dev libxcursor-dev libgl-dev libxrandr-dev libasound2-dev\n```\n\n----------------------------------------\n\nTITLE: Generating AST Representation in V\nDESCRIPTION: The command 'ast' generates a JSON representation of the Abstract Syntax Tree (AST) for a specified .v file. This can be useful for debugging or understanding the structure of the V code. No additional dependencies are required.\nSOURCE: https://github.com/vlang/v/blob/master/vlib/v/help/other/other.txt#2025-04-21_snippet_0\n\nLANGUAGE: V\nCODE:\n```\nast              Generate a json representation of the AST for a given .v file.\n```\n\n----------------------------------------\n\nTITLE: Using pkgconfig in V\nDESCRIPTION: Examples demonstrating how to use pkgconfig directives for handling module dependencies with condition checks.\nSOURCE: https://github.com/vlang/v/blob/master/doc/docs.md#2025-04-21_snippet_196\n\nLANGUAGE: v\nCODE:\n```\n#pkgconfig r_core\n#pkgconfig --cflags --libs r_core\n```\n\nLANGUAGE: v\nCODE:\n```\n$if $pkgconfig('mysqlclient') {\n\t#pkgconfig mysqlclient\n} $else $if $pkgconfig('mariadb') {\n\t#pkgconfig mariadb\n}\n```\n\n----------------------------------------\n\nTITLE: Serving Static Assets from Folders\nDESCRIPTION: This snippet shows how to utilize a static handler to serve assets from a specific folder as static files and handle them with the AssetManager.\nSOURCE: https://github.com/vlang/v/blob/master/vlib/veb/assets/README.md#2025-04-21_snippet_5\n\nLANGUAGE: v\nCODE:\n```\npub struct App {\n\tveb.StaticHandler\npub mut:\n\tam assets.AssetManager\n}\n\nfn main() {\n\tmut app := &App{}\n\t// add all assets in the \"assets\" folder\n\tapp.am.handle_assets('assets')!\n\t// serve all files in the \"assets\" folder as static files\n\tapp.handle_static('assets', false)!\n\t// start the app\n\tveb.run[App, Context](mut app, 8080)\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Custom MIME Type for Static Files in Veb (V)\nDESCRIPTION: Shows how to add a custom MIME type for a file extension when serving static files in a Veb application.\nSOURCE: https://github.com/vlang/v/blob/master/vlib/veb/README.md#2025-04-21_snippet_13\n\nLANGUAGE: v\nCODE:\n```\napp.static_mime_types['.what'] = 'txt/plain'\napp.handle_static('static', true)!\n```\n\n----------------------------------------\n\nTITLE: Language Server Output Control Options\nDESCRIPTION: Configuration flags for controlling the output format and verbosity of the language server CLI\nSOURCE: https://github.com/vlang/v/blob/master/vlib/v/help/other/ls.txt#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nv ls --json\nv ls --silent\n```\n\n----------------------------------------\n\nTITLE: Installing Packages in V Language\nDESCRIPTION: This snippet shows the usage of the 'v install' command which allows users to install packages in the V language. It details the behavior of the command when no packages are specified, defaulting to those listed in the 'v.mod' file. Various options to control the installation process are also included.\nSOURCE: https://github.com/vlang/v/blob/master/vlib/v/help/vpm/install.txt#2025-04-21_snippet_0\n\nLANGUAGE: v\nCODE:\n```\nv install [PACKAGE...]\\n\\nIf no PACKAGEs, the packages listed in the `v.mod` file are installed instead.\n```\n\n----------------------------------------\n\nTITLE: Running and Compiling A* Visualizer in V\nDESCRIPTION: Console commands for running and compiling the A* pathfinding visualizer program. Includes both direct run command and separate compile-then-run approach.\nSOURCE: https://github.com/vlang/v/blob/master/examples/gg/path_finding_algorithm_visualizer/README.md#2025-04-21_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n# to run:\n$ v run aStar.v\n\n# to just compile:\n$ v aStar.v\n\n# then to run:\n$ ./aStar\n```\n\n----------------------------------------\n\nTITLE: Running Subtests in V\nDESCRIPTION: Demonstrates how to run subtests within a V test file using the @VEXE constant to access the V compiler path.\nSOURCE: https://github.com/vlang/v/blob/master/doc/docs.md#2025-04-21_snippet_133\n\nLANGUAGE: v\nCODE:\n```\nimport os\n\nfn test_subtest() {\n\tres := os.execute('${os.quoted_path(@VEXE)} other_test.v')\n\tassert res.exit_code == 1\n\tassert res.output.contains('other_test.v does not exist')\n}\n```\n\n----------------------------------------\n\nTITLE: Cloning V Repository and Building\nDESCRIPTION: This snippet demonstrates how to clone the V language repository and build the executable from source. The prerequisites include having a functional git installation. It is applicable for Unix-like environments.\nSOURCE: https://github.com/vlang/v/blob/master/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone --depth=1 https://github.com/vlang/v\ncd v\nmake\n```\n\n----------------------------------------\n\nTITLE: Compiling and Running VCasino - Direct Method\nDESCRIPTION: Single command to compile and immediately execute the V program using the 'v run' command.\nSOURCE: https://github.com/vlang/v/blob/master/examples/vcasino/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nv run VCasino.v\n```\n\n----------------------------------------\n\nTITLE: Generating Various Types of Formatted Strings using v_sprintf in V\nDESCRIPTION: This snippet showcases creating complex formatted strings with various data types using v_sprintf. It uses different data types, format specifiers, and padding options to format the output string.\nSOURCE: https://github.com/vlang/v/blob/master/vlib/strconv/format.md#2025-04-21_snippet_1\n\nLANGUAGE: v\nCODE:\n```\nimport strconv\n\na0 := u32(10)\nb0 := 200\nc0 := u8(12)\ns0 := 'ciAo'\nch0 := `B`\nf0 := 0.312345\nf1 := 200000.0\nsc0 := 'ciao: [%-08u] %d %hhd [%8s] [%08X] [%-20.4f] [%-20.4f] [%c]'\ntemp_s := strconv.v_sprintf(sc0, a0, b0, c0, s0, b0, f0, f1, ch0)\nprintln(temp_s)\n```\n\nLANGUAGE: v\nCODE:\n```\nimport strconv\n\na := u8(12)\nb := i16(13)\nc := 14\nd := i64(15)\nsc1 := '==>%hhd %hd %d %ld'\ntemp_s := strconv.v_sprintf(sc1, a, b, c, d)\nprintln(temp_s)\n```\n\nLANGUAGE: v\nCODE:\n```\nimport strconv\n\na1 := u8(0xff)\nb1 := u16(0xffff)\nc1 := u32(0xffffffff)\nd1 := u64(-1)\nsc2 := '%hhu %hu %u %lu'\ntemp_s := strconv.v_sprintf(sc2, a1, b1, c1, d1)\nprintln(temp_s)\n```\n\nLANGUAGE: v\nCODE:\n```\nimport strconv\n\na1 := u8(0xff)\nb1 := i16(u16(0xffff))\nc1 := u32(0xffffffff)\nd1 := u64(-1)\nsc3 := '%hhx %hx %x %lx'\ntemp_s := strconv.v_sprintf(sc3, a1, b1, c1, d1)\nprintln(temp_s)\n```\n\nLANGUAGE: v\nCODE:\n```\nimport strconv\n\na2 := 125\nsc7 := '[%9x] [%9X] [%-9x] [%-9X] [%09x] [%09X]'\ntemp_s := strconv.v_sprintf(sc7, a2, a2, a2, a2, a2, a2)\nprintln(temp_s)\n```\n\nLANGUAGE: v\nCODE:\n```\nimport strconv\n\nf0 := 0.312345\nf1 := 200000.0\nf2 := -1234.300e6\nf3 := 1234.300e-6\nsc4 := '[%-20.3e] [%20.3e] [%-020.3e] [%-020.3E] [%-020.3e] [%-020.3e]'\ntemp_s := strconv.v_sprintf(sc4, f0, f1, f1, f1, f2, f3)\nprintln(temp_s)\n```\n\nLANGUAGE: v\nCODE:\n```\nimport strconv\n\nmut ft := -1e-7\nmut x := 0\nsc8 := '[%20g][%20G]|'\nfor x < 12 {\n\ttemp_s := strconv.v_sprintf(sc8, ft, ft)\n\tprintln('${temp_s}\\n')\n\tft = ft * 10.0\n\tx++\n}\n```\n\n----------------------------------------\n\nTITLE: Understanding the WebAssembly Execution Environments in V\nDESCRIPTION: This section outlines the two primary target environments for the compiled WebAssembly: WASI and browser. The WASI target enables greater functionality for server-side applications, allowing WebAssembly modules to perform tasks like file I/O and networking. In contrast, the browser target focuses on a minimalist environment for web applications, exporting only public functions inside the module.\nSOURCE: https://github.com/vlang/v/blob/master/vlib/v/help/build/build-wasm.txt#2025-04-21_snippet_2\n\nLANGUAGE: v\nCODE:\n```\nThe `wasi` target is the default execution environment.\n        When targeting WASI, the generated WebAssembly module can be run in a variety\n\t\tof environments that support the WASI specification.\n        WASI provides a standardized interface to interact with the host operating system,\n\t\tallowing WebAssembly modules to perform tasks like file I/O, networking, and more.\n```\n\nLANGUAGE: v\nCODE:\n```\nThe `browser` target is an experimental environment that compiles for a stripped down\n\t\tbuiltin, for use in browsers. The produced WebAssembly module will have functions\n\t\texported that are `pub` and inside the `module main`. See `examples/wasm/mandelbrot`\n\t\tfor an example.\n```\n\n----------------------------------------\n\nTITLE: Suppressing Warnings\nDESCRIPTION: The '-w' and '-W' options are used to hide warnings or treat all warnings as errors, enabling stricter compilation practices for developers.\nSOURCE: https://github.com/vlang/v/blob/master/vlib/v/help/build/build.txt#2025-04-21_snippet_7\n\nLANGUAGE: V\nCODE:\n```\n-w\n    Hide all warnings.\n\n  -W\n    Treat *all V warnings* as errors.\n```\n\n----------------------------------------\n\nTITLE: V Service for Benchmark Data\nDESCRIPTION: This function sends an HTTP GET request to retrieve benchmark data from a specific endpoint and decodes it into a FrameworkBenchmarkResponse struct. It relies on the V's http and json modules and assumes the endpoint is running.\nSOURCE: https://github.com/vlang/v/blob/master/examples/js_dom_draw_benchmark_chart/README.md#2025-04-21_snippet_5\n\nLANGUAGE: v\nCODE:\n```\nfn typescript_sqlite_memory() ?FrameworkBenchmarkResponse {\\n\\turl := 'http://localhost:3000/sqlite-memory/${benchmark_loop_length}'\\n\\tres := http.get(url) or { panic(err) }\\n\\tframework_benchmark_response := json.decode(FrameworkBenchmarkResponse, res.body)!\\n\\treturn framework_benchmark_response\\n}\n```\n\n----------------------------------------\n\nTITLE: Running MySQL in Docker\nDESCRIPTION: This command starts a MySQL server instance in a Docker container, allowing connections on port 3306 with an empty root password. It's useful for setting up a local development environment for testing and experimentation with the db.mysql module.\nSOURCE: https://github.com/vlang/v/blob/master/vlib/db/mysql/README.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ndocker run -p 3306:3306 --name some-mysql -e MYSQL_ALLOW_EMPTY_PASSWORD=1 -e MYSQL_ROOT_PASSWORD= -d mysql:latest\n```\n\n----------------------------------------\n\nTITLE: Including Assets in Templates\nDESCRIPTION: This snippet shows the usage of the include method to add an asset to the HTML template. The method accepts the asset type and its include name, outputting a link tag for the asset.\nSOURCE: https://github.com/vlang/v/blob/master/vlib/veb/assets/README.md#2025-04-21_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n@{app.am.include(.css, 'main.css')}\n```\n\n----------------------------------------\n\nTITLE: HTML Form with CSRF Token\nDESCRIPTION: HTML structure for a login form that includes a hidden input field for a CSRF token. The CSRF token is injected with `ctx.csrf_token_input()` to enhance security.\nSOURCE: https://github.com/vlang/v/blob/master/vlib/veb/csrf/README.md#2025-04-21_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<h1>Log in</h1>\n<form method=\"POST\" action=\"/login\">\n\t@{ctx.csrf_token_input()}\n\t<label for=\"password\">Password:</label>\n\t<input type=\"text\" name=\"password\" id=\"password\" />\n\t<button type=\"submit\">Log in</button>\n</form>\n```\n\n----------------------------------------\n\nTITLE: Displaying Compiler Timings\nDESCRIPTION: The '-show-timings' option prints a summary of each compiler stage's duration, which helps users understand performance across parsing, checking, and code generation stages.\nSOURCE: https://github.com/vlang/v/blob/master/vlib/v/help/build/build.txt#2025-04-21_snippet_5\n\nLANGUAGE: V\nCODE:\n```\n-show-timings\n    Print a summary about how long each compiler stage took, for example:\n      PARSE: 152ms\n      CHECK: 62ms\n      C GEN: 103ms\n      C tcc: 95ms\n```\n\n----------------------------------------\n\nTITLE: List Installed Packages Command\nDESCRIPTION: Displays a list of all currently installed packages in the V programming environment.\nSOURCE: https://github.com/vlang/v/blob/master/vlib/v/help/vpm/vpm.txt#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nv list\n```\n\n----------------------------------------\n\nTITLE: Installing Ubuntu Dependencies for V Tetris\nDESCRIPTION: System package installation commands for required X11 and OpenGL development libraries on Ubuntu.\nSOURCE: https://github.com/vlang/v/blob/master/examples/tetris/README.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nsudo apt install libx11-dev\nsudo apt install libxi-dev\nsudo apt install libxcursor-dev\nsudo apt install libxrandr-dev\nsudo apt install libgl-dev\n```\n\n----------------------------------------\n\nTITLE: Updating V Installation - V\nDESCRIPTION: The command 'v up' updates the V installation to its latest version. It is intended to ensure that the user has the most recent updates and features of V.\nSOURCE: https://github.com/vlang/v/blob/master/vlib/v/help/installation/installation.txt#2025-04-21_snippet_0\n\nLANGUAGE: v\nCODE:\n```\nv up         Update the V installation to its latest version.\n```\n\n----------------------------------------\n\nTITLE: Implementing Context Retrieval Method in V\nDESCRIPTION: Defines a function to retrieve context and related objects in the V programming language. The purpose of this function is to handle service requests by utilizing the provided context to retrieve or compute the needed results. It doesn't specify the exact dependencies or the implementation since it's illustrative (indicated by '...'). The inputs are 'context.Context' and 'Bar' objects, and the output is an optional 'Baz' object.\nSOURCE: https://github.com/vlang/v/blob/master/vlib/context/onecontext/README.md#2025-04-21_snippet_0\n\nLANGUAGE: v\nCODE:\n```\nfn (f Foo) get(ctx context.Context, bar Bar) ?Baz {\n\t. . .\n}\n```\n\n----------------------------------------\n\nTITLE: Compiling Snake Game to JavaScript\nDESCRIPTION: Command to compile the Snake game to JavaScript for browser deployment using V's JavaScript backend.\nSOURCE: https://github.com/vlang/v/blob/master/examples/snek/README.md#2025-04-21_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nv -b js_browser examples/snek/snek.js.v\n```\n\n----------------------------------------\n\nTITLE: Using `time.Time` Fields with Default Values in V\nDESCRIPTION: This code snippet demonstrates how to define a struct with `time.Time` and string fields and set default values using SQL functions like `gen_random_uuid()` and `CURRENT_TIMESTAMP`. It also shows how to connect to a PostgreSQL database using the `db.pg` module and perform basic CRUD operations.\nSOURCE: https://github.com/vlang/v/blob/master/vlib/orm/README.md#2025-04-21_snippet_9\n\nLANGUAGE: v\nCODE:\n```\nimport db.pg\n\nstruct Member {\n\tid         string @[default: 'gen_random_uuid()'; primary; sql_type: 'uuid']\n\tname       string\n\tcreated_at string @[default: 'CURRENT_TIMESTAMP'; sql_type: 'TIMESTAMP']\n}\n\nfn main() {\n\tdb := pg.connect(pg.Config{\n\t\thost: 'localhost'\n\t\tport: 5432\n\t\tuser: 'user'\n\t\tpassword: 'password'\n\t\tdbname: 'dbname'\n\t})!\n\n\tdefer {\n\t\tdb.close()\n\t}\n\n\tsql db {\n\t\tcreate table Member\n\t}!\n\n\tnew_member := Member{\n\t\tname: 'John Doe'\n\t}\n\n\tsql db {\n\t\tinsert new_member into Member\n\t}!\n\n\tselected_members := sql db {\n\t\tselect from Member where name == 'John Doe' limit 1\n\t}!\n\tjohn_doe := selected_members.first()\n\n\tsql db {\n\t\tupdate Member set name = 'Hitalo' where id == john_doe.id\n\t}!\n}\n```\n\n----------------------------------------\n\nTITLE: Verbose struct syntax in V\nDESCRIPTION: Demonstrates the more verbose syntax for calling functions with struct parameters, showing the explicit syntax that can be replaced with trailing struct syntax.\nSOURCE: https://github.com/vlang/v/blob/master/doc/docs.md#2025-04-21_snippet_69\n\nLANGUAGE: v\nCODE:\n```\nnew_button(ButtonConfig{text:'Click me', width:100})\n```\n\n----------------------------------------\n\nTITLE: Update Packages Command\nDESCRIPTION: Updates specified packages to their latest available versions from the V package repository.\nSOURCE: https://github.com/vlang/v/blob/master/vlib/v/help/vpm/vpm.txt#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nv update PACKAGE\n```\n\n----------------------------------------\n\nTITLE: Executing vviewer with File List in V\nDESCRIPTION: Demonstrates how to run the vviewer program with a list of image files as command-line arguments.\nSOURCE: https://github.com/vlang/v/blob/master/examples/viewer/README.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nviewer img1.jpg inmg2.bmp img3.tga\n```\n\n----------------------------------------\n\nTITLE: Building Android Graphical Apps with V\nDESCRIPTION: The snippet illustrates the command for using the `vab` tool to build V UI and graphical applications for Android, making the process straightforward.\nSOURCE: https://github.com/vlang/v/blob/master/README.md#2025-04-21_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\n./vab /path/to/v/examples/2048\n```\n\n----------------------------------------\n\nTITLE: Compiling V to C Source\nDESCRIPTION: Commands to compile V code directly to C source files and link them with C code. Requires libgc installation.\nSOURCE: https://github.com/vlang/v/blob/master/examples/call_v_from_c/README.md#2025-04-21_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nv -shared -cc gcc -o v_test_print.c v_test_print.v\ngcc test_print.c v_test_print.c -o test_print -lgc\n```\n\n----------------------------------------\n\nTITLE: Suppressing Notices\nDESCRIPTION: This snippet illustrates the use of '-n' and '-N' options to hide all notices or treat them as errors, respectively. It is useful for developers who wish to maintain a stricter error management process during compilation.\nSOURCE: https://github.com/vlang/v/blob/master/vlib/v/help/build/build.txt#2025-04-21_snippet_6\n\nLANGUAGE: V\nCODE:\n```\n-n\n    Hide all notices.\n\n  -N\n    Treat *all V notices* as errors.\n```\n\n----------------------------------------\n\nTITLE: Displaying System Info for Bug Reporting\nDESCRIPTION: The 'doctor' command displays important system information that can assist in reporting bugs related to V, helping developers troubleshoot issues effectively. No specific prerequisites are needed.\nSOURCE: https://github.com/vlang/v/blob/master/vlib/v/help/other/other.txt#2025-04-21_snippet_7\n\nLANGUAGE: V\nCODE:\n```\ndoctor           Display some useful info about your system to help reporting bugs.\n```\n\n----------------------------------------\n\nTITLE: Testing Pendulum Simulation Module in V\nDESCRIPTION: This command is used to test the pendulum simulation module. It requires the V programming language to issue the test command in the module directory.\nSOURCE: https://github.com/vlang/v/blob/master/examples/pendulum-simulation/README.md#2025-04-21_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\n$ v test .\n```\n\n----------------------------------------\n\nTITLE: Compiling and Running V Boids Implementation with Production Optimization\nDESCRIPTION: Command to compile and run the V version of the Boids algorithm with production optimization (-prod flag) using the V compiler's crun option.\nSOURCE: https://github.com/vlang/v/blob/master/bench/vectors/README.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nv -prod crun vectors.v\n```\n\n----------------------------------------\n\nTITLE: V String Structure Definition\nDESCRIPTION: Shows the C-style structure definition of V's string type, which is useful for understanding how to pass V strings to C functions.\nSOURCE: https://github.com/vlang/v/blob/master/doc/c_and_v_type_interoperability.md#2025-04-21_snippet_1\n\nLANGUAGE: c\nCODE:\n```\nstruct string {\n    u8* str;\n    int len;\n    int is_lit;\n};\n```\n\n----------------------------------------\n\nTITLE: V REPL Example Test\nDESCRIPTION: This snippet demonstrates the structure of a V REPL test file. It defines a variable, prints its value, and specifies the expected output after the `===output===` delimiter. The REPL executes the code and compares the actual output with the expected output.\nSOURCE: https://github.com/vlang/v/blob/master/vlib/v/slow_tests/repl/README.md#2025-04-21_snippet_0\n\nLANGUAGE: V\nCODE:\n```\na := 1\nprintln(a)\n===output===\n1\n```\n\n----------------------------------------\n\nTITLE: Connecting to SQLite Database in V\nDESCRIPTION: This snippet demonstrates how to connect to an SQLite database in V. It uses the sqlite.connect function to establish a connection to a database file named 'blog.db'. If the file does not exist, it will be created, facilitating data persistence between application runs.\nSOURCE: https://github.com/vlang/v/blob/master/tutorials/building_a_simple_web_blog_with_veb/README.md#2025-04-21_snippet_8\n\nLANGUAGE: V\nCODE:\n```\ndb: sqlite.connect('blog.db')!\n```\n\n----------------------------------------\n\nTITLE: vweb HTML Component Example\nDESCRIPTION: This is an example of an HTML component that can be included in other HTML templates using the `@include` directive. It simply contains static HTML content.\nSOURCE: https://github.com/vlang/v/blob/master/vlib/vweb/README.md#2025-04-21_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<div>This is a component</div>\n```\n\n----------------------------------------\n\nTITLE: Help File Template for V Commands\nDESCRIPTION: Standard template demonstrating the recommended structure for creating help documentation in V. Includes sections for description, usage, optional longer description, examples, and command options.\nSOURCE: https://github.com/vlang/v/blob/master/vlib/v/help/FORMATTING.md#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nShort description of what it does\\n\\nUsage:\\n  v COMMAND (args and such here)\\n\\nLonger description of what your command aims to do (optional)\\n\\nExamples: (optional)\\n  v COMMAND -arg1 -arg2\\n  \\nOptions:\\n  -h, --help      Help menu\\n  -s, --short     Description of short\\n  -l, --long      Description of long\n```\n\n----------------------------------------\n\nTITLE: Installing PostgreSQL on Ubuntu/Debian\nDESCRIPTION: These commands install the PostgreSQL server and client libraries on Ubuntu/Debian, enable the service to start on boot, and start the PostgreSQL service.\nSOURCE: https://github.com/vlang/v/blob/master/vlib/db/pg/README.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nsudo apt install postgresql postgresql-client\nsudo systemctl enable postgresql # to autostart on startup\nsudo systemctl start  postgresql\n```\n\n----------------------------------------\n\nTITLE: Posting Issues to V's Tracker\nDESCRIPTION: The 'bug' command allows users to report issues on V's issue tracker by providing details about the failing program and relevant diagnostics. This helps the development team address bugs effectively.\nSOURCE: https://github.com/vlang/v/blob/master/vlib/v/help/other/other.txt#2025-04-21_snippet_1\n\nLANGUAGE: V\nCODE:\n```\nbug              Post an issue on the V's issue tracker, including the failing program,\n                   and some diagnostic information.\n```\n\n----------------------------------------\n\nTITLE: Compiling V to Shared Library - Linux\nDESCRIPTION: Commands to compile V code into a shared library and link it with C code on Linux systems. Uses gcc compiler with shared library flags.\nSOURCE: https://github.com/vlang/v/blob/master/examples/call_v_from_c/README.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nv -cc gcc -shared v_test_print.v\ngcc test_print.c v_test_print.so -o test_print -Wl,-rpath=.\n./test_print\n```\n\n----------------------------------------\n\nTITLE: Audio Stream Callback for Sokol Audio in V\nDESCRIPTION: This snippet implements a callback function to process audio frames. It modifies the sound buffer based on the current elapsed time in milliseconds, generating varying sine tones for playback. The buffer manipulation is done in an unsafe block, which allows the use of mutable references.\nSOURCE: https://github.com/vlang/v/blob/master/vlib/sokol/README.md#2025-04-21_snippet_1\n\nLANGUAGE: v\nCODE:\n```\nfn my_audio_stream_callback(buffer &f32, num_frames int, num_channels int) {\n\tms := sw.elapsed().milliseconds() - sw_start_ms\n\tunsafe {\n\t\tmut soundbuffer := buffer\n\t\tfor frame := 0; frame < num_frames; frame++ {\n\t\t\tfor ch := 0; ch < num_channels; ch++ {\n\t\t\t\tidx := frame * num_channels + ch\n\t\t\t\tif ms < 250 {\n\t\t\t\t\tsoundbuffer[idx] = 0.5 * sintone(20, frame, num_frames)\n\t\t\t\t} else if ms < 300 {\n\t\t\t\t\tsoundbuffer[idx] = 0.5 * sintone(25, frame, num_frames)\n\t\t\t\t} else if ms < 1500 {\n\t\t\t\t\tsoundbuffer[idx] *= sintone(22, frame, num_frames)\n\t\t\t\t} else {\n\t\t\t\t\tsoundbuffer[idx] = 0.5 * sintone(25, frame, num_frames)\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\n```\n\n----------------------------------------\n\nTITLE: Including external templates with @include in V\nDESCRIPTION: This snippet shows how to include another HTML file using the `@include` directive. The path is relative to the current template file. The file extension is automatically appended, and only `html` files are allowed.\nSOURCE: https://github.com/vlang/v/blob/master/vlib/v/TEMPLATES.md#2025-04-21_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n\"<div>@include 'header/base'</div>\"\n```\n\n----------------------------------------\n\nTITLE: Handling Default Output Stream for Log Module in V Language\nDESCRIPTION: This code snippet addresses the change in default output stream for the log module in V post-2025. It demonstrates how to revert to using stdout instead of stderr for logging output. It includes a method to silence output stream transition notes by explicitly setting the output stream.\nSOURCE: https://github.com/vlang/v/blob/master/vlib/log/README.md#2025-04-21_snippet_2\n\nLANGUAGE: v\nCODE:\n```\nimport os\nimport log\n\nfn main() {\n\t// log.info('this will be printed to stderr after 2025/01/21 by default')\n\tlog.use_stdout()\n\tlog.info('this will be printed to stdout')\n}\n```\n\n----------------------------------------\n\nTITLE: Testing V Binary Building Configurations\nDESCRIPTION: The 'build-vbinaries' command checks if the V language can be built with various configurations, helping to ensure compatibility across different setups. No additional setup is required.\nSOURCE: https://github.com/vlang/v/blob/master/vlib/v/help/other/other.txt#2025-04-21_snippet_5\n\nLANGUAGE: V\nCODE:\n```\nbuild-vbinaries  Test if V can be built with different configuration.\n```\n\n----------------------------------------\n\nTITLE: Warning About C and JS Symbols Usage\nDESCRIPTION: The '-Wimpure-v' option warns about the use of C or JS symbols in plain .v files, indicating their need to be relocated to .c.v or .js.v files in future versions.\nSOURCE: https://github.com/vlang/v/blob/master/vlib/v/help/build/build.txt#2025-04-21_snippet_9\n\nLANGUAGE: V\nCODE:\n```\n-Wimpure-v\n    Warn about using C. or JS. symbols in plain .v files.\n```\n\n----------------------------------------\n\nTITLE: V Language Server CLI Usage Overview\nDESCRIPTION: Command-line interface for managing the V language server with multiple configuration options for installation, updates, and execution\nSOURCE: https://github.com/vlang/v/blob/master/vlib/v/help/other/ls.txt#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nv ls [options] [ARGS]\n```\n\n----------------------------------------\n\nTITLE: Time Display Endpoint\nDESCRIPTION: Example of adding a new endpoint that displays current time\nSOURCE: https://github.com/vlang/v/blob/master/tutorials/building_a_simple_web_blog_with_veb/README.md#2025-04-21_snippet_3\n\nLANGUAGE: v\nCODE:\n```\n// blog.v\nimport veb\nimport time\n\nfn (mut app App) time() veb.Result {\n\treturn app.text(time.now().format())\n}\n```\n\n----------------------------------------\n\nTITLE: Installing PCRE Module for Regex in V\nDESCRIPTION: This snippet demonstrates how to install the PCRE module, which is necessary for using the external regular expression capabilities in V. The command needs to be run before utilizing the module in any regex operations.\nSOURCE: https://github.com/vlang/v/blob/master/examples/regex/readme.md#2025-04-21_snippet_0\n\nLANGUAGE: v\nCODE:\n```\nv install pcre\n```\n\n----------------------------------------\n\nTITLE: BitField Structure Reference\nDESCRIPTION: Core data structure reference for the BitField module that stores bits as arrays in unsigned 32-bit integers. The structure is designed to be opaque, with internals hidden from end users and accessible only through the provided API.\nSOURCE: https://github.com/vlang/v/blob/master/vlib/bitfield/README.md#2025-04-21_snippet_0\n\nLANGUAGE: v\nCODE:\n```\nBitField\n```\n\n----------------------------------------\n\nTITLE: Compiling V Tetris to WebAssembly\nDESCRIPTION: Command for compiling the Tetris game to WebAssembly using Emscripten target.\nSOURCE: https://github.com/vlang/v/blob/master/examples/tetris/README.md#2025-04-21_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nv -skip-unused -prod -os wasm32_emscripten examples/tetris/\n```\n\n----------------------------------------\n\nTITLE: Testing Building of Tools in V\nDESCRIPTION: The 'build-tools' command tests if all the tools required for V can be built, ensuring the development environment is correctly set up and functional.\nSOURCE: https://github.com/vlang/v/blob/master/vlib/v/help/other/other.txt#2025-04-21_snippet_4\n\nLANGUAGE: V\nCODE:\n```\nbuild-tools      Test if all tools can be built.\n```\n\n----------------------------------------\n\nTITLE: Compiling to WebAssembly with Dependencies in V\nDESCRIPTION: This command compiles the specified target along with its dependencies into a WebAssembly executable. Users must provide the target file or directory, along with any desired run options. It’s essential for generating WebAssembly modules for various environments.\nSOURCE: https://github.com/vlang/v/blob/master/vlib/v/help/build/build-wasm.txt#2025-04-21_snippet_0\n\nLANGUAGE: v\nCODE:\n```\nv -b wasm [-options] ['run'] <target.v|target_directory> [run options]\n```\n\n----------------------------------------\n\nTITLE: Debugger for Regex Patterns in V\nDESCRIPTION: This snippet illustrates debugging capabilities for regex patterns in the V language. It shows how to handle syntax errors during the regex compilation phase, visualize compiled regex instructions, and utilize different levels of logging to track the regex engine's behavior during execution. The example includes setting custom logging output.\nSOURCE: https://github.com/vlang/v/blob/master/vlib/regex/README.md#2025-04-21_snippet_7\n\nLANGUAGE: v\nCODE:\n```\nquery := r'ciao da ab[ab-]'\n// there is an error, a range not closed!!\nmut re := new()\nre.compile_opt(query) or { println(err) }\n// output!!\n// query: ciao da ab[ab-]\n// err  : ----------^\n// ERROR: ERR_SYNTAX_ERROR\n```\n\nLANGUAGE: v\nCODE:\n```\n// custom print function, the input will be the regex debug string\nfn custom_print(txt string) {\n\tprintln('my log: ${txt}')\n}\n\nmut re := new()\nre.log_func = custom_print\n// every debug output from now will call this function\n```\n\n----------------------------------------\n\nTITLE: Defining the RandomAccessReaderConfig Struct in V Language\nDESCRIPTION: This code defines the configuration structure for the random access CSV reader, detailing parameters like buffer size, file path, and handling of comments and quotes in the CSV data.\nSOURCE: https://github.com/vlang/v/blob/master/vlib/encoding/csv/README_csv_reader.md#2025-04-21_snippet_5\n\nLANGUAGE: v\nCODE:\n```\npub struct RandomAccessReaderConfig {\npub:\n\tscr_buf      voidptr // pointer to the buffer of data\n\tscr_buf_len  i64     // if > 0 use the RAM pointed from scr_buf as source of data\n\tfile_path    string\n\tstart_index  i64\n\tend_index    i64    = -1\n\tmem_buf_size int    = 1024 * 64 // default buffer size 64KByte\n\tseparator    u8     = `,`\n\tcomment      u8     = `#` // every line that start with the comment char is ignored\n\tdefault_cell string = '*' // return this string if out of the csv boundaries\n\tempty_cell   string // return this string if empty cell\n\tend_line_len int = csv.endline_cr_len // size of the endline rune\n\tquote        u8  = `\"` // double quote is the standard quote char\n\tquote_remove bool   // if true clear the cell from the quotes\n}\n```\n\n----------------------------------------\n\nTITLE: Copying Headers for TCC Compiler\nDESCRIPTION: These commands copy necessary header files from the Windows Kits directory to the `@VEXEROOT\\thirdparty\\mssql\\include` directory. This is specifically required when using the `tcc` compiler to ensure that the compiler can find the necessary SQL Server ODBC headers.\nSOURCE: https://github.com/vlang/v/blob/master/vlib/db/mssql/README.md#2025-04-21_snippet_0\n\nLANGUAGE: cmd\nCODE:\n```\ncopy \"C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\um\\sql.h\" thirdparty\\mssql\\include\ncopy \"C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\um\\sqlext.h\" thirdparty\\mssql\\include\ncopy \"C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\um\\sqltypes.h\" thirdparty\\mssql\\include\ncopy \"C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\um\\sqlucode.h\" thirdparty\\mssql\\include\ncopy \"C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\shared\\sal.h\" thirdparty\\mssql\\include\ncopy \"C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\shared\\concurrencysal.h\" thirdparty\\mssql\\include\n```\n\n----------------------------------------\n\nTITLE: Setting Up FreeType on Windows\nDESCRIPTION: The 'setup-freetype' command facilitates the installation of the third-party FreeType library on Windows systems, which may be necessary for graphical functionalities in V. Windows is a prerequisite.\nSOURCE: https://github.com/vlang/v/blob/master/vlib/v/help/other/other.txt#2025-04-21_snippet_8\n\nLANGUAGE: V\nCODE:\n```\nsetup-freetype   Setup thirdparty freetype on Windows.\n```\n\n----------------------------------------\n\nTITLE: Starting V HTTP File Server\nDESCRIPTION: Alternative command to serve the game using V's built-in HTTP file server.\nSOURCE: https://github.com/vlang/v/blob/master/examples/2048/README.md#2025-04-21_snippet_3\n\nLANGUAGE: v\nCODE:\n```\nv -e 'import net.http.file; file.serve(folder: \"examples/2048\")'\n```\n\n----------------------------------------\n\nTITLE: CMake Cache Cleanup Commands\nDESCRIPTION: Commands to clean CMake cache files when changing compiler settings, using GNU find.\nSOURCE: https://github.com/vlang/v/blob/master/thirdparty/mbedtls/README.md#2025-04-21_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nfind . -iname '*cmake*' -not -name CMakeLists.txt -exec rm -rf {} +\nCC=your_cc cmake .\nmake\n```\n\n----------------------------------------\n\nTITLE: Aligned Structure Definition in V\nDESCRIPTION: Example showing how to use the @[aligned] attribute with a struct containing an array of u16 values. The alignment will be 8 bytes, which is the smallest power of 2 larger than the struct's size of 6 bytes.\nSOURCE: https://github.com/vlang/v/blob/master/doc/docs.md#2025-04-21_snippet_183\n\nLANGUAGE: v\nCODE:\n```\n@[aligned]\nstruct U16s {\n\tdata [3]u16\n}\n```\n\n----------------------------------------\n\nTITLE: CMake Target Configuration for MbedTLS Integration\nDESCRIPTION: Example showing how to integrate MbedTLS libraries into another CMake project using target_link_libraries.\nSOURCE: https://github.com/vlang/v/blob/master/thirdparty/mbedtls/README.md#2025-04-21_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nadd_executable(xyz)\n\ntarget_link_libraries(xyz\n    PUBLIC MbedTLS::mbedtls\n           MbedTLS::mbedcrypto\n           MbedTLS::mbedx509)\n```\n\n----------------------------------------\n\nTITLE: TOML Parsing Example in V\nDESCRIPTION: Shows how to parse TOML content from both text strings and files in V language with error handling using the or syntax. The example demonstrates the typical pattern for handling errors in V.\nSOURCE: https://github.com/vlang/v/blob/master/cmd/tools/vdoc/testdata/output_formats/README.md#2025-04-21_snippet_3\n\nLANGUAGE: v\nCODE:\n```\ndoc1 := toml.parse_text(<string content>) or { panic(err) }\ndoc2 := toml.parse_file(<file path>) or { panic(err) }\n```\n\n----------------------------------------\n\nTITLE: Compiling and Running V Queue Program\nDESCRIPTION: Compiles a V language queue program with production optimizations, no garbage collection, using GCC compiler, and executes the resulting binary.\nSOURCE: https://github.com/vlang/v/blob/master/examples/thread_safety/readme.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nv -prod  -gc none -cc gcc ./queue.v && \\\n./queue\n```\n\n----------------------------------------\n\nTITLE: Testing V Functionality\nDESCRIPTION: The 'test-self' command ensures that V is functioning properly by executing a full range of tests, including compiler tests. This can be a time-consuming process, taking 1-2 minutes to complete.\nSOURCE: https://github.com/vlang/v/blob/master/vlib/v/help/other/other.txt#2025-04-21_snippet_15\n\nLANGUAGE: V\nCODE:\n```\ntest-self        Test if V is working properly by running all tests, including the compiler ones.\n                   NB: this can take 1-2 minutes to run.\n```\n\n----------------------------------------\n\nTITLE: Compiling V Code to Shared Library\nDESCRIPTION: Command to compile V source code into a shared library that can be called from Ruby. Uses the -d no_backtrace flag for compatibility and -shared for library output.\nSOURCE: https://github.com/vlang/v/blob/master/examples/call_v_from_ruby/README.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nv -d no_backtrace -shared test.v\n```\n\n----------------------------------------\n\nTITLE: Assigning to embedded structs in V\nDESCRIPTION: Shows how to assign a new value to an embedded struct field after initialization, replacing the embedded struct entirely with a new instance.\nSOURCE: https://github.com/vlang/v/blob/master/doc/docs.md#2025-04-21_snippet_79\n\nLANGUAGE: v\nCODE:\n```\nbutton.Size = Size{\n\twidth:  4\n\theight: 5\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Outdated V Modules using `v outdated`\nDESCRIPTION: The command `v outdated` lists all installed V modules that have available updates. This command helps users keep their V modules up to date by identifying which modules need updating.\nSOURCE: https://github.com/vlang/v/blob/master/vlib/v/help/vpm/outdated.txt#2025-04-21_snippet_0\n\nLANGUAGE: Text\nCODE:\n```\n\"v outdated\"\n```\n\n----------------------------------------\n\nTITLE: Visualizing FSM with Graphviz and ImageMagick (V and Bash)\nDESCRIPTION: This example shows how to visualize the FSM using Graphviz and ImageMagick directly from the command line. The V code `fsm_graph.v` generates the .dot format from the `.v` source file, then `dot` converts it to PNG and `display` shows the result.\nSOURCE: https://github.com/vlang/v/blob/master/vlib/datatypes/fsm/README.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n\"v run vlib/datatypes/fsm/tools/fsm_graph.v -f vlib/datatypes/fsm/fsm_test.v | dot -Tpng | display\"\n```\n\n----------------------------------------\n\nTITLE: Sharing Code to V Playground\nDESCRIPTION: The 'share' command allows users to send their V code to the V Playground, promoting code sharing and collaboration. No additional prerequisites are required.\nSOURCE: https://github.com/vlang/v/blob/master/vlib/v/help/other/other.txt#2025-04-21_snippet_9\n\nLANGUAGE: V\nCODE:\n```\nshare            Send your code to the V Playground\n```\n\n----------------------------------------\n\nTITLE: Search Packages Command\nDESCRIPTION: Searches the V package repository (vpm.vlang.io) for modules matching specified keywords and displays their details.\nSOURCE: https://github.com/vlang/v/blob/master/vlib/v/help/vpm/vpm.txt#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nv search KEYWORDS\n```\n\n----------------------------------------\n\nTITLE: Advanced Connection Handling in V\nDESCRIPTION: Demonstrates advanced TCP connection handling with connection takeover and custom response handling in separate threads.\nSOURCE: https://github.com/vlang/v/blob/master/vlib/veb/README.md#2025-04-21_snippet_29\n\nLANGUAGE: v\nCODE:\n```\nmodule main\n\nimport net\nimport time\nimport veb\n\npub struct Context {\n\tveb.Context\n}\n\npub struct App {}\n\npub fn (app &App) index(mut ctx Context) veb.Result {\n\treturn ctx.text('hello!')\n}\n\n@['/long']\npub fn (app &App) long_response(mut ctx Context) veb.Result {\n\t// let veb know that the connection should not be closed\n\tctx.takeover_conn()\n\t// use spawn to handle the connection in another thread\n\t// if we don't the whole web server will block for 10 seconds,\n\t// since veb is singlethreaded\n\tspawn handle_connection(mut ctx.conn)\n\t// we will send a custom response ourselves, so we can safely return an empty result\n\treturn veb.no_result()\n}\n\nfn handle_connection(mut conn net.TcpConn) {\n\tdefer {\n\t\tconn.close() or {}\n\t}\n\t// block for 10 second\n\ttime.sleep(time.second * 10)\n\tconn.write_string('HTTP/1.1 200 OK\\r\\nContent-type: text/html\\r\\nContent-length: 15\\r\\n\\r\\nHello takeover!') or {}\n}\n\nfn main() {\n\tmut app := &App{}\n\tveb.run[App, Context](mut app, 8080)\n}\n```\n\n----------------------------------------\n\nTITLE: Basic CMake Build Commands for MbedTLS\nDESCRIPTION: Basic commands to build MbedTLS in a separate directory using CMake, including creating build directory and running build process.\nSOURCE: https://github.com/vlang/v/blob/master/thirdparty/mbedtls/README.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nmkdir /path/to/build_dir && cd /path/to/build_dir\ncmake /path/to/mbedtls_source\ncmake --build .\n```\n\n----------------------------------------\n\nTITLE: Creating New V Project\nDESCRIPTION: This snippet initializes a new V project, creating a 'v.mod' file and a 'main.v' file with a basic 'Hello World' program. It also performs a 'git init' if the git command-line tool is available on the system.\nSOURCE: https://github.com/vlang/v/blob/master/vlib/v/help/scaffolding/scaffolding.txt#2025-04-21_snippet_1\n\nLANGUAGE: v\nCODE:\n```\nnew   Sets up a new V project with a 'v.mod' file, and a 'main.v' \"Hello World\"\n        file, and performs 'git init' (if git is installed on the system).\n```\n\n----------------------------------------\n\nTITLE: Installing Python dependencies for Mbed TLS\nDESCRIPTION: Command to install required Python packages for building Mbed TLS source files, sample programs, and test data.\nSOURCE: https://github.com/vlang/v/blob/master/thirdparty/mbedtls/README.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npython -m pip install -r scripts/basic.requirements.txt\n```\n\n----------------------------------------\n\nTITLE: Using goto statements in V for unconditional jumps\nDESCRIPTION: This snippet shows how to use the 'goto' statement in V for unconditional jumps to a label. It requires the 'unsafe' block and should generally be avoided in favor of structured control flow.\nSOURCE: https://github.com/vlang/v/blob/master/doc/docs.md#2025-04-21_snippet_62\n\nLANGUAGE: v\nCODE:\n```\nif x {\n\t// ...\n\tif y {\n\t\tunsafe {\n\t\t\tgoto my_label\n\t\t}\n\t}\n\t// ...\n}\nmy_label:\n```\n\n----------------------------------------\n\nTITLE: Compiling Snake Game to Native Binary\nDESCRIPTION: Commands to compile the Snake game to a native binary executable using V compiler with production optimizations and run the resulting binary.\nSOURCE: https://github.com/vlang/v/blob/master/examples/snek/README.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nv -prod examples/snek/snek.v\n./examples/snek/snek # run snek game!\n```\n\n----------------------------------------\n\nTITLE: Wiping V Cache\nDESCRIPTION: The 'wipe-cache' command removes the V cache folder, which is useful for cleaning cache issues and ensuring a clean build. Helps maintain an efficient development environment.\nSOURCE: https://github.com/vlang/v/blob/master/vlib/v/help/other/other.txt#2025-04-21_snippet_16\n\nLANGUAGE: V\nCODE:\n```\nwipe-cache       Remove the V cache folder. Useful for cleaning the cache, and guaranteeing a \n                   clean build.\n```\n\n----------------------------------------\n\nTITLE: Compiling and Running V Weather Crawler\nDESCRIPTION: Commands to compile the V source file to an executable and then run it separately.\nSOURCE: https://github.com/vlang/v/blob/master/examples/get_weather/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nv get_weather.v\n./get_weather\n```\n\n----------------------------------------\n\nTITLE: Module Import Aliasing in V\nDESCRIPTION: Demonstrates module import aliasing using the 'as' keyword and type redeclaration in V language.\nSOURCE: https://github.com/vlang/v/blob/master/doc/docs.md#2025-04-21_snippet_52\n\nLANGUAGE: v\nCODE:\n```\nimport crypto.sha256\nimport mymod.sha256 as mysha256\n\nfn main() {\n\tv_hash := sha256.sum('hi'.bytes()).hex()\n\tmy_hash := mysha256.sum('hi'.bytes()).hex()\n\tassert my_hash == v_hash\n}\n```\n\nLANGUAGE: v\nCODE:\n```\nimport time\nimport math\n\ntype MyTime = time.Time\n\nfn (mut t MyTime) century() int {\n\treturn int(1.0 + math.trunc(f64(t.year) * 0.009999794661191))\n}\n\nfn main() {\n\tmut my_time := MyTime{\n\t\tyear:  2020\n\t\tmonth: 12\n\t\tday:   25\n\t}\n\tprintln(time.new(my_time).utc_string())\n\tprintln('Century: ${my_time.century()}')\n}\n```\n\n----------------------------------------\n\nTITLE: Show Package Details Command\nDESCRIPTION: Retrieves and displays comprehensive information about a specific module from the V package repository.\nSOURCE: https://github.com/vlang/v/blob/master/vlib/v/help/vpm/vpm.txt#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nv show MODULE\n```\n\n----------------------------------------\n\nTITLE: Preparing V Source for Package Distribution\nDESCRIPTION: Shell script that prepares V source code for packaging by disabling auto-updates, building tools, and cleaning up unnecessary files. Creates custom message handlers for vup and vself commands.\nSOURCE: https://github.com/vlang/v/blob/master/doc/packaging_v_for_distributions.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\necho \"println('use your package manager to update V,\" > cmd/tools/vup.v\necho \"or if you want more recent V versions, just clone V from source,\" >> cmd/tools/vup.v\necho \"see https://github.com/vlang/v#installing-v-from-source')\" >> cmd/tools/vup.v\n\necho \"println('v self is disabled for packaged versions of V.\" > cmd/tools/vself.v\necho \"Use your package manager, to update your V package instead.\" >> cmd/tools/vself.v\necho \"Alternatively, if you do want a more recent V version, just clone V from source,\" >> cmd/tools/vself.v\necho \"then follow the instructions here: https://github.com/vlang/v#installing-v-from-source')\" >> cmd/tools/vself.v\n\nv -prod -o v cmd/v                            ## build V itself with -prod\n./v -prod build-tools                         ## build all tools with -prod too\ntouch ./cmd/tools/.disable_autorecompilation  ## tell V to not try to recompile any tool anymore\n\n### Cleanup folders that would not be needed inside a package,\n### that is distributed separately from the V source repository:\nrm -rf .git/\nrm -rf thirdparty/tcc/.git/\n```\n\n----------------------------------------\n\nTITLE: Checking File Formatting in V\nDESCRIPTION: The 'test-fmt' command checks if all files in the current directory are formatted correctly according to V's formatting rules. This ensures code quality throughout the project.\nSOURCE: https://github.com/vlang/v/blob/master/vlib/v/help/other/other.txt#2025-04-21_snippet_13\n\nLANGUAGE: V\nCODE:\n```\ntest-fmt         Test if all files in the current directory are formatted properly.\n```\n\n----------------------------------------\n\nTITLE: Building Example Programs in V\nDESCRIPTION: The 'build-examples' command checks if all available example programs can be successfully built, facilitating the verification of example integrity and compilation. It requires a configured V environment.\nSOURCE: https://github.com/vlang/v/blob/master/vlib/v/help/other/other.txt#2025-04-21_snippet_3\n\nLANGUAGE: V\nCODE:\n```\nbuild-examples   Test if all examples can be built.\n```\n\n----------------------------------------\n\nTITLE: Defining Template Placeholders in V\nDESCRIPTION: This snippet illustrates how to use the placeholder system within a V template, allowing dynamic content insertion. It provides an example of defining a map with different data types for placeholders, which are used in processing a template file for rendering.\nSOURCE: https://github.com/vlang/v/blob/master/vlib/x/templating/dtm/README.md#2025-04-21_snippet_2\n\nLANGUAGE: v\nCODE:\n```\nmut plhs := map[string]dtm.DtmMultiTypeMap{}\nplhs['placeholder_name_1'] = \"title content\"\nplhs['placeholder_name_2'] = 123456\nplhs['placeholder_name_3_#includehtml'] = \"<p>allow to include</p><span>certain HTML tags</span>\"\n\nexpand('path/of/template.html',\n\t\tplaceholders: &plhs\n)\n```\n\n----------------------------------------\n\nTITLE: Running Mbed TLS tests with GNU Make\nDESCRIPTION: Command to build and run the full test suite for Mbed TLS using GNU Make.\nSOURCE: https://github.com/vlang/v/blob/master/thirdparty/mbedtls/README.md#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nmake check\n```\n\n----------------------------------------\n\nTITLE: Compiling V Code to Shared Library\nDESCRIPTION: Command to compile V code into a shared library that can be imported into Python. Uses the -d no_backtrace flag for compatibility and -shared to create a shared library.\nSOURCE: https://github.com/vlang/v/blob/master/examples/call_v_from_python/README.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nv -d no_backtrace -shared test.v\n```\n\n----------------------------------------\n\nTITLE: Building Mbed TLS without tests\nDESCRIPTION: Command to build Mbed TLS without including the test suite, useful when Python or Perl are not available.\nSOURCE: https://github.com/vlang/v/blob/master/thirdparty/mbedtls/README.md#2025-04-21_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nmake no_test\n```\n\n----------------------------------------\n\nTITLE: Compiling V to WebAssembly\nDESCRIPTION: Command to compile the V 2048 game to WebAssembly, producing a JS file that loads the WASM file.\nSOURCE: https://github.com/vlang/v/blob/master/examples/2048/README.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nv -prod -os wasm32_emscripten -o examples/2048/index.js examples/2048/\n```\n\n----------------------------------------\n\nTITLE: Building Static Executables with Alpine\nDESCRIPTION: This snippet shows how to compile V programs into static executables using Docker with Alpine, ensuring no external dependencies are required for running on other Linux distributions.\nSOURCE: https://github.com/vlang/v/blob/master/README.md#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nwith_alpine v -skip-unused -prod -cc gcc -cflags -static -compress examples/http_server.v\nwith_alpine v -skip-unused -prod -cc gcc -cflags -static -compress -gc none examples/hello_world.v\n```\n\n----------------------------------------\n\nTITLE: Enabling Verbosity in V Compiler\nDESCRIPTION: This snippet describes the '-v' option that enables verbosity in the V compiler, which provides more detailed output during compilation processes. This can assist developers in understanding the compilation steps and errors more clearly.\nSOURCE: https://github.com/vlang/v/blob/master/vlib/v/help/build/build.txt#2025-04-21_snippet_0\n\nLANGUAGE: V\nCODE:\n```\n-v\n    Enable verbosity in the V compiler while compiling\n```\n\n----------------------------------------\n\nTITLE: Direct Compile and Run of V Weather Crawler\nDESCRIPTION: Convenient one-line command to compile and immediately run the V program in a single step.\nSOURCE: https://github.com/vlang/v/blob/master/examples/get_weather/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nv run get_weather.v\n```\n\n----------------------------------------\n\nTITLE: Generates documentation for MODULE or DIRECTORY in V\nDESCRIPTION: This command generates the documentation for a specified module, directory, or file and can output in various formats including HTML, JSON, TEXT, ANSI, or Markdown. It has various options to customize the output, such as including private methods, specifying output format, and controlling verbosity.\nSOURCE: https://github.com/vlang/v/blob/master/vlib/v/help/common/doc.txt#2025-04-21_snippet_0\n\nLANGUAGE: V\nCODE:\n```\nv doc [options] [MODULE / DIRECTORY / FILE] [symbol name]\n```\n\n----------------------------------------\n\nTITLE: V Where Tool Usage\nDESCRIPTION: Illustrates the basic usage of the 'v where' command, showing how to specify the symbol type and name. The parameters are optional and can be used to refine the search.\nSOURCE: https://github.com/vlang/v/blob/master/vlib/v/help/common/where.txt#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n\"v where symbol_type symbol_name [params]\"\n```\n\n----------------------------------------\n\nTITLE: SQLite Memory Benchmark Route Implementation\nDESCRIPTION: V language implementation of a web route that performs SQLite memory benchmarks for insert operations, measuring performance with stopwatch timings.\nSOURCE: https://github.com/vlang/v/blob/master/examples/js_dom_draw_benchmark_chart/chart/README.md#2025-04-21_snippet_1\n\nLANGUAGE: v\nCODE:\n```\n@['/sqlite-memory/:count']\npub fn (mut app App) sqlite_memory(count int) vweb.Result {\n\tmut insert_stopwatchs := []int{}\n\tmut select_stopwatchs := []int{}\n\tmut update_stopwatchs := []int{}\n\n\tmut sw := time.new_stopwatch()\n\n\tmut db := sqlite.connect(':memory:') or { panic(err) }\n\n\tsql db {\n\t\tcreate table Task\n\t} or { panic(err) }\n\n\ttask_model := Task{\n\t\ttitle: 'a'\n\t\tstatus: 'done'\n\t}\n\n\tfor i := 0; i < count; i++ {\n\t\tsw.start()\n\t\tsql db {\n\t\t\tinsert task_model into Task\n\t\t} or { []Task{} }\n\t\tsw.stop()\n\t\tinsert_stopwatchs << int(sw.end - sw.start)\n\t}\n\n\tsql db {\n\t\tdrop table Task\n\t} or { panic(err) }\n\n\tresponse := Response{\n\t\tinsert:\tinsert_stopwatchs\n\t\t@select:select_stopwatchs\n\t\tupdate:\tupdate_stopwatchs\n\t}\n\treturn app.json(response)\n}\n```\n\n----------------------------------------\n\nTITLE: Running V Mandelbrot Example using V\nDESCRIPTION: This command runs the V Mandelbrot example directly using the V compiler and runtime.\nSOURCE: https://github.com/vlang/v/blob/master/examples/wasm/change_color_by_id/README.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nv run .\n```\n\n----------------------------------------\n\nTITLE: Installing libatomic for V Sync Module\nDESCRIPTION: This snippet provides the installation command for libatomic, which is necessary for the V sync module and channel implementation, depending on the operating system.\nSOURCE: https://github.com/vlang/v/blob/master/README.md#2025-04-21_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt install libatomic1\n```\n\nLANGUAGE: bash\nCODE:\n```\nsudo dnf install libatomic-static\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Packed Addition in Pseudo-Code\nDESCRIPTION: This pseudo-code demonstrates how packed addition is executed using SSE instructions, where each element of two vectors is added in one instruction cycle, improving performance for multimedia applications. The code illustrates the concept of SIMD operations where multiple data points are processed simultaneously.\nSOURCE: https://github.com/vlang/v/blob/master/examples/cpu_features/SSE_and_MMX_Extensions/README.md#2025-04-21_snippet_0\n\nLANGUAGE: assembly\nCODE:\n```\nv1[0] = v1[0] + v2[0]\nv1[1] = v1[1] + v2[1]\nv1[2] = v1[2] + v2[2]\nv1[3] = v1[3] + v2[3]\n```\n\n----------------------------------------\n\nTITLE: Generating libgc Amalgamation\nDESCRIPTION: This snippet details the command used to create an amalgamated C file for the libgc library. It specifies which header files to include and where to output the generated amalgamation. The command helps streamline the source distribution and improve build efficiency.\nSOURCE: https://github.com/vlang/v/blob/master/thirdparty/libgc/amalgamation.txt#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n../../../cmd/tools/amalgamate -o ../gc.c \\\n    -b atomic_ops.h \\\n    -b gc/gc.h \\\n    -b gc/gc_backptr.h \\\n    -b gc/gc_disclaim.h \\\n    -b gc/gc_gcj.h \\\n    -b gc/gc_inline.h \\\n    -b gc/gc_mark.h \\\n    -b gc/gc_pthread_redirects.h \\\n    -b gc/gc_tiny_fl.h \\\n    -b gc/gc_typed.h \\\n    -b gc/javaxfc.h \\\n    -b il/PCR_IL.h \\\n    -b mm/PCR_MM.h \\\n    -b psp2-support.h \\\n    -b stubinfo.h \\\n    -b th/PCR_ThCtl.h \\\n    -b vd/PCR_VD.h \\\n    -s include \\\n    -s include/private \\\n    extra/gc.c\n```\n\n----------------------------------------\n\nTITLE: Running Conway's Game of Life in V\nDESCRIPTION: Command to execute the Conway's Game of Life simulation implemented in V language. The simulation is run using the life.v source file.\nSOURCE: https://github.com/vlang/v/blob/master/examples/game_of_life/README.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nv run life.v\n```\n\n----------------------------------------\n\nTITLE: Configuring and Installing OpenSSL\nDESCRIPTION: This snippet configures the build flags for OpenSSL installation, builds, and installs the library using a specified prefix path. It requires sudo access for the installation phase.\nSOURCE: https://github.com/vlang/v/blob/master/vlib/x/crypto/slhdsa/install-latest-ssl.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ ./Configure --prefix=/opt/ssl --openssldir=/opt/ssl\n$ make\n$ sudo make install\n```\n\n----------------------------------------\n\nTITLE: Creating Symlink for V Executable\nDESCRIPTION: This snippet shows how to create a symlink for the V executable on Unix systems, making it easier to access. Administrative privileges are required for this operation.\nSOURCE: https://github.com/vlang/v/blob/master/README.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsudo ./v symlink\n```\n\n----------------------------------------\n\nTITLE: Printing Parsed V Files\nDESCRIPTION: This snippet demonstrates the '-print-v-files' option, which prints all parsed .v files and stops further processing. It is useful for integrating with external processing tools like etags or ctags for function definitions.\nSOURCE: https://github.com/vlang/v/blob/master/vlib/v/help/build/build.txt#2025-04-21_snippet_1\n\nLANGUAGE: V\nCODE:\n```\n-print-v-files\n    Just print the list of all parsed .v files, then stop processing further.\n    This is useful for running external processing tools:\n      ./v -print-v-files cmd/v | etags -L -\n        ... will generate a TAGS file, that emacs can then use to jump\n    to the definition of functions used by v itself. For vim:\n      ./v -print-v-files cmd/v | ctags -L -\n        ... will generate a similar tags file, that vi compatible editors can use.\n```\n\n----------------------------------------\n\nTITLE: Running Parallel Simulation with GUI in V\nDESCRIPTION: This snippet shows how to compile and execute the parallel simulation with a graphical user interface, requiring the V programming language and the animation.v file.\nSOURCE: https://github.com/vlang/v/blob/master/examples/pendulum-simulation/README.md#2025-04-21_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\n$ v -gc boehm -prod animation.v\n$ ./animation # execute ./animation -h for more info\n```\n\n----------------------------------------\n\nTITLE: Compiling V with Debug Flags\nDESCRIPTION: Examples of compiling the V compiler with various debug flags. These flags enable verbose output useful for debugging the compiler itself.\nSOURCE: https://github.com/vlang/v/blob/master/CONTRIBUTING.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n./v -o w -d time_parsing cmd/v\n```\n\nLANGUAGE: bash\nCODE:\n```\n./v -o w -d trace_checker self\n```\n\nLANGUAGE: bash\nCODE:\n```\n./v -g -o vgen -d trace_gen_wanted -d trace_gen_wanted_value=\"message = _SLIT0\" cmd/v && ./vgen bug.v\n```\n\nLANGUAGE: bash\nCODE:\n```\nv -no-parallel -d trace_cgen_stmt -o w cmd/v\n```\n\n----------------------------------------\n\nTITLE: Running V Web ORM Application\nDESCRIPTION: This script compiles and runs a V language application using the v_vweb_orm module. It presupposes that the V programming language is installed on the system.\nSOURCE: https://github.com/vlang/v/blob/master/examples/js_dom_draw_benchmark_chart/README.md#2025-04-21_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nv run v_vweb_orm\n```\n\n----------------------------------------\n\nTITLE: Building Mbed TLS using GNU Make\nDESCRIPTION: Basic command to build the Mbed TLS library and sample programs using GNU Make.\nSOURCE: https://github.com/vlang/v/blob/master/thirdparty/mbedtls/README.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmake\n```\n\n----------------------------------------\n\nTITLE: Forcing New Request IDs in V\nDESCRIPTION: Demonstrates how to force the generation of new request IDs regardless of whether an existing header is present. The `force` option in the `request_id.Config` struct is set to `true`, ensuring a new ID is generated for every request.\nSOURCE: https://github.com/vlang/v/blob/master/vlib/veb/request_id/README.md#2025-04-21_snippet_7\n\nLANGUAGE: v\nCODE:\n```\n```v \nimport veb.request_id\n\nconfig := request_id.Config{\n\tforce: true\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Producing a Tracing Version of the Compiler\nDESCRIPTION: The 'tracev' command generates a tracing version of the V compiler to aid in debugging. It should be run with a file path when the compiler panics. Note that 'tracev' operates more slowly than the regular compiler.\nSOURCE: https://github.com/vlang/v/blob/master/vlib/v/help/other/other.txt#2025-04-21_snippet_11\n\nLANGUAGE: V\nCODE:\n```\ntracev           Produce a tracing version of the v compiler.\n                   Use `tracev yourfile.v` when the compiler panics.\n                   NB: `tracev` is much slower and more verbose than ordinary `v`\n```\n\n----------------------------------------\n\nTITLE: MIT License Text for kuba--/zip Library\nDESCRIPTION: Standard MIT license text granting permissions to use, modify, and distribute the software while including copyright notice and disclaiming warranties.\nSOURCE: https://github.com/vlang/v/blob/master/thirdparty/zip/README.md#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nAll Rights Reserved.\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n```\n\n----------------------------------------\n\nTITLE: Compiling V to Shared Library - MacOS\nDESCRIPTION: Commands to compile V code into a shared library and link it with C code on MacOS. Requires libgc installed via homebrew.\nSOURCE: https://github.com/vlang/v/blob/master/examples/call_v_from_c/README.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nv -cc gcc -shared v_test_print.v\ngcc test_print.c v_test_print.dylib -o test_print\nLD_LIBRARY_PATH=. ./test_print\n```\n\n----------------------------------------\n\nTITLE: Executing Node.js Commands for Benchmarks\nDESCRIPTION: This shell script installs the necessary Node.js packages and starts the development server for the TypeScript benchmark. It requires Node.js to be previously installed on the system.\nSOURCE: https://github.com/vlang/v/blob/master/examples/js_dom_draw_benchmark_chart/README.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm i --prefix typescript_vanilla_typeorm\\nnpm run start:dev --prefix typescript_vanilla_typeorm\n```\n\n----------------------------------------\n\nTITLE: Updating Library Configuration and Cache\nDESCRIPTION: This snippet adds the path '/opt/ssl/lib64' to the system's library configuration and updates the library cache.\nSOURCE: https://github.com/vlang/v/blob/master/vlib/x/crypto/slhdsa/install-latest-ssl.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$sudo ldconfig\n```\n\n----------------------------------------\n\nTITLE: Display usage examples for the documentation command\nDESCRIPTION: This section provides examples of how to invoke the documentation generation command in different scenarios, demonstrating its flexibility in specifying the target module or format.\nSOURCE: https://github.com/vlang/v/blob/master/vlib/v/help/common/doc.txt#2025-04-21_snippet_1\n\nLANGUAGE: V\nCODE:\n```\nv doc os\n```\n\nLANGUAGE: V\nCODE:\n```\nv doc os File\n```\n\nLANGUAGE: V\nCODE:\n```\nv doc -no-color os\n```\n\nLANGUAGE: V\nCODE:\n```\nv doc -o math.html math\n```\n\nLANGUAGE: V\nCODE:\n```\nv doc -m -f html vlib/\n```\n\n----------------------------------------\n\nTITLE: Options for V Install Command\nDESCRIPTION: This snippet describes the available options that can be used with the 'v install' command, enabling users to specify installation sources such as from vpm, git, or hg. It includes flags for help, installation conditions, verbosity, and server URL customization.\nSOURCE: https://github.com/vlang/v/blob/master/vlib/v/help/vpm/install.txt#2025-04-21_snippet_1\n\nLANGUAGE: v\nCODE:\n```\n--vpm        [Default] Install from vpm\\n--git        Install from git repository url\\n--hg         Install from mercurial repository url\\n--help, -h   Prints the help menu\\n--once       Only install the package if it was not previously installed\\n-v           Print more details about the performed operation.\\n-server-url  When doing network operations, use this vpm server.\\n               Can be given multiple times.\n```\n\n----------------------------------------\n\nTITLE: Checking Markdown Formatting in V Examples\nDESCRIPTION: The 'check-md' command verifies that V examples contained in markdown files are properly formatted and can compile, aiding in maintaining documentation quality. Requires access to the V compiler.\nSOURCE: https://github.com/vlang/v/blob/master/vlib/v/help/other/other.txt#2025-04-21_snippet_6\n\nLANGUAGE: V\nCODE:\n```\ncheck-md         Check that V examples in markdown files are formatted and can compile.\n```\n\n----------------------------------------\n\nTITLE: Dropping a Table Using QueryBuilder in V\nDESCRIPTION: This code snippet demonstrates how to drop a database table using the `drop` method of the `QueryBuilder`.\nSOURCE: https://github.com/vlang/v/blob/master/vlib/orm/README.md#2025-04-21_snippet_18\n\nLANGUAGE: v\nCODE:\n```\nqb.drop()!\n```\n\n----------------------------------------\n\nTITLE: Importing Compression Modules in V\nDESCRIPTION: Code example showing the available compression module namespaces in V. Demonstrates the structure for accessing deflate, gzip, zlib, and zstd compression algorithms.\nSOURCE: https://github.com/vlang/v/blob/master/vlib/compress/README.md#2025-04-21_snippet_0\n\nLANGUAGE: v\nCODE:\n```\ncompress.deflate\ncompress.gzip\ncompress.zlib\ncompress.zstd\n```\n\n----------------------------------------\n\nTITLE: vweb CSS Styling Example\nDESCRIPTION: This is an example of a CSS file used for styling the HTML content in vweb. It defines the style for the `h1.title` element, including font family and color.\nSOURCE: https://github.com/vlang/v/blob/master/vlib/vweb/README.md#2025-04-21_snippet_5\n\nLANGUAGE: css\nCODE:\n```\nh1.title {\n  font-family: Arial, Helvetica, sans-serif;\n  color: #3b7bbf;\n}\n```\n\n----------------------------------------\n\nTITLE: ASCII Game Map Representation\nDESCRIPTION: An ASCII art layout of a game level or map with various elements marked by different characters. The map includes walls (#), player characters (@), and other elements labeled as 'p' and 'b' which likely represent game entities.\nSOURCE: https://github.com/vlang/v/blob/master/examples/sokoban/three_boxes.txt#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nIt seems tricky, but it is not ...@Be careful to not get stuck.\n         ###          #\n    ###### ######     #\n           #  p #     #\n          ##    #######\n#   bbb   #           #\n#      @   @  @ #     #\n#      #   #  ###     #\n#      #      ###     #\n   ############       #\n```\n\n----------------------------------------\n\nTITLE: Running FlappyLearning in V\nDESCRIPTION: Command to run the FlappyLearning game implementation in V programming language. This executes the main game file using the V compiler's run command.\nSOURCE: https://github.com/vlang/v/blob/master/examples/flappylearning/README.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nv run game.v\n```\n\n----------------------------------------\n\nTITLE: Decoding ASN.1 Tagged Types in V\nDESCRIPTION: Shows how to decode ASN.1 tagged types using decode_with_options for explicit tagging.\nSOURCE: https://github.com/vlang/v/blob/master/vlib/x/encoding/asn1/DOCS.md#2025-04-21_snippet_3\n\nLANGUAGE: v\nCODE:\n```\nbytes := [u8(0xA5), 0x04, 0x13, 0x02, 0x68, 0x69]\nobj := asn1.decode_with_options(bytes, 'context_specific:5;explicit;inner:0x13')!\n```\n\n----------------------------------------\n\nTITLE: ZLib License Text for Sokol Library\nDESCRIPTION: The complete text of the ZLib license that applies to the Sokol library. This license grants users permission to use, alter, and redistribute the software freely, with minimal restrictions.\nSOURCE: https://github.com/vlang/v/blob/master/thirdparty/sokol/README.md#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nCopyright (c) 2018 Andre Weissflog\n\nThis software is provided 'as-is', without any express or implied warranty.\nIn no event will the authors be held liable for any damages arising from the\nuse of this software.\n\nPermission is granted to anyone to use this software for any purpose,\nincluding commercial applications, and to alter it and redistribute it\nfreely, subject to the following restrictions:\n\n    1. The origin of this software must not be misrepresented; you must not\n    claim that you wrote the original software. If you use this software in a\n    product, an acknowledgment in the product documentation would be\n    appreciated but is not required.\n\n    2. Altered source versions must be plainly marked as such, and must not\n    be misrepresented as being the original software.\n\n    3. This notice may not be removed or altered from any source\n    distribution.\n```\n\n----------------------------------------\n\nTITLE: C Struct Declaration Example\nDESCRIPTION: Example of C struct definition with complex nested structures.\nSOURCE: https://github.com/vlang/v/blob/master/doc/docs.md#2025-04-21_snippet_199\n\nLANGUAGE: c\nCODE:\n```\nstruct SomeCStruct {\n\tuint8_t implTraits;\n\tuint16_t memPoolData;\n\tunion {\n\t\tstruct {\n\t\t\tvoid* data;\n\t\t\tsize_t size;\n\t\t};\n\n\t\tDataView view;\n\t};\n};\n```\n\n----------------------------------------\n\nTITLE: Running V Chart Application\nDESCRIPTION: This command navigates to the chart directory and runs the V application within it. The command requires V to be installed and correctly configured.\nSOURCE: https://github.com/vlang/v/blob/master/examples/js_dom_draw_benchmark_chart/README.md#2025-04-21_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\ncd chart/ && v run .\n```\n\n----------------------------------------\n\nTITLE: Installing PostgreSQL on MacOSX (MacPorts)\nDESCRIPTION: This command installs the `pg` gem, specifying the path to the PostgreSQL configuration file.\nSOURCE: https://github.com/vlang/v/blob/master/vlib/db/pg/README.md#2025-04-21_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ngem install pg -- --with-pg-config=/opt/local/lib/postgresql[version number]/bin/pg_config\n```\n\n----------------------------------------\n\nTITLE: Setting up Emscripten Environment\nDESCRIPTION: Commands to setup and verify Emscripten environment for WASM compilation.\nSOURCE: https://github.com/vlang/v/blob/master/examples/2048/README.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n. /opt/emsdk/emsdk_env.sh\nemcc --version\n```\n\n----------------------------------------\n\nTITLE: Update Command Options\nDESCRIPTION: Specifies available command-line options for the package update process, including verbosity and server URL configuration\nSOURCE: https://github.com/vlang/v/blob/master/vlib/v/help/vpm/update.txt#2025-04-21_snippet_1\n\nLANGUAGE: cli\nCODE:\n```\n  -v           Print more details about the update.\n  -server-url  When doing network operations, use this vpm server.\n               Can be given multiple times.\n```\n\n----------------------------------------\n\nTITLE: V Language Launcher Script\nDESCRIPTION: Bash script that serves as a launcher for the V compiler, setting up necessary environment variables for customizing V's behavior including executable location, compiler flags, and cache directories.\nSOURCE: https://github.com/vlang/v/blob/master/doc/packaging_v_for_distributions.md#2025-04-21_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n#!/usr/bin/env bash\n\nexport VEXE=\"/opt/vlang/v\"\nexport VFLAGS=\"-cc /usr/bin/custom_cc\"\nexport VCACHE=\"/var/cache/custom_vcache_folder\" ## ~/.vmodules/cache by default\nexport VTMP=\"/var/cache/custom_tmp\"\nexport VMODULES=\"$HOME/.vmodules\"\n\n/opt/vlang/v $@\n```\n\n----------------------------------------\n\nTITLE: Referencing Zstd Module in V\nDESCRIPTION: Shows the module import name for the zstd compression functionality in V language\nSOURCE: https://github.com/vlang/v/blob/master/vlib/compress/zstd/README.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\ncompress.zstd\n```\n\n----------------------------------------\n\nTITLE: Basic HTML Template\nDESCRIPTION: HTML template file with basic structure and variable interpolation\nSOURCE: https://github.com/vlang/v/blob/master/tutorials/building_a_simple_web_blog_with_veb/README.md#2025-04-21_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<html>\n  <head>\n\t<title>V Blog</title>\n  </head>\n  <body>\n\t<b>@message</b>\n\t<br />\n\t<img src=\"https://vlang.io/img/v-logo.png\" width=\"100\" />\n  </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Sokoban Level Layout in ASCII\nDESCRIPTION: ASCII art representation of a Sokoban puzzle level. The layout uses '#' for walls, '@' for player position, 'b' for box, and 'p' for the target position. The level is contained within a bordered area showing game elements.\nSOURCE: https://github.com/vlang/v/blob/master/examples/sokoban/simple.txt#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n##############\n#            #\n#            #\n#   b        #\n#      @     #\n# p          #\n#            #\n##############\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Scalar Addition in Pseudo-Code\nDESCRIPTION: This pseudo-code demonstrates scalar addition, which processes a single value from two vectors using SSE instructions. Unlike packed operations, scalar operations are limited to the first element, making them suitable for scenarios where processing one data point at a time is sufficient.\nSOURCE: https://github.com/vlang/v/blob/master/examples/cpu_features/SSE_and_MMX_Extensions/README.md#2025-04-21_snippet_1\n\nLANGUAGE: assembly\nCODE:\n```\nv1[0] = v1[0] + v2[0]\n```\n\n----------------------------------------\n\nTITLE: Running Ruby Script with V Integration\nDESCRIPTION: Command to execute the Ruby script that interfaces with the compiled V shared library.\nSOURCE: https://github.com/vlang/v/blob/master/examples/call_v_from_ruby/README.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nruby test.rb\n```\n\n----------------------------------------\n\nTITLE: MIT License for cJSON Library\nDESCRIPTION: The MIT license text that applies to the cJSON library, granting permissions to use, modify, distribute, and sell the software subject to including the copyright notice in all copies.\nSOURCE: https://github.com/vlang/v/blob/master/thirdparty/cJSON/README.md#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nCopyright (c) 2009-2017 Dave Gamble and cJSON contributors\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n```\n\n----------------------------------------\n\nTITLE: Filtering Tests by Names in V\nDESCRIPTION: This section illustrates how to filter specific test files to run based on their names using the `VTEST_ONLY` environment variable. It provides an example of how to set this variable to find and execute only the relevant tests according to specific criteria.\nSOURCE: https://github.com/vlang/v/blob/master/vlib/v/help/common/test.txt#2025-04-21_snippet_2\n\nLANGUAGE: v\nCODE:\n```\nVTEST_ONLY=complex,stats v test -run-only *sin* .\n```\n\nLANGUAGE: v\nCODE:\n```\nThis will find all _test.v files that have either `complex` or `stats` in their path, then for these test files, V test will find all that contain `test_` functions that glob match `*sin*`, and run only them.\n```\n\n----------------------------------------\n\nTITLE: Converting .dot to PNG with Graphviz (V and Bash)\nDESCRIPTION: This snippet shows how to convert the generated .dot file into a PNG image using Graphviz's `dot` command.  It also opens the PNG file using `xdg-open`. The tool `fsm_graph.v` generates the .dot file from a V source file describing the FSM.\nSOURCE: https://github.com/vlang/v/blob/master/vlib/datatypes/fsm/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n\"v run vlib/datatypes/fsm/tools/fsm_graph.v -f vlib/datatypes/fsm/fsm_test.v > graph.dot\ndot -Tpng graph.dot > graph.png\nxdg-open graph.png\"\n```\n\n----------------------------------------\n\nTITLE: Compiling and Running V Boids Implementation\nDESCRIPTION: Command to compile and run the V version of the Boids algorithm using the V compiler's crun option.\nSOURCE: https://github.com/vlang/v/blob/master/bench/vectors/README.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nv crun vectors.v\n```\n\n----------------------------------------\n\nTITLE: Package Installation Command\nDESCRIPTION: Installs specified packages from the V package manager (vpm). Allows users to add new modules to their project.\nSOURCE: https://github.com/vlang/v/blob/master/vlib/v/help/vpm/vpm.txt#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nv install PACKAGE\n```\n\n----------------------------------------\n\nTITLE: Remove Packages Command\nDESCRIPTION: Uninstalls specified packages from the V programming environment, allowing users to remove unnecessary or unwanted modules.\nSOURCE: https://github.com/vlang/v/blob/master/vlib/v/help/vpm/vpm.txt#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nv remove PACKAGE\n```\n\n----------------------------------------\n\nTITLE: Check Outdated Packages Command\nDESCRIPTION: Identifies and lists all installed modules that have available updates in the V package ecosystem.\nSOURCE: https://github.com/vlang/v/blob/master/vlib/v/help/vpm/vpm.txt#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nv outdated\n```\n\n----------------------------------------\n\nTITLE: Installing PostgreSQL on MacOSX (Homebrew)\nDESCRIPTION: These commands install PostgreSQL using Homebrew and start the PostgreSQL service.\nSOURCE: https://github.com/vlang/v/blob/master/vlib/db/pg/README.md#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nbrew install postgresql\nbrew services start postgresql\n```\n\n----------------------------------------\n\nTITLE: Serving WebAssembly File using Python HTTP Server\nDESCRIPTION: This command starts a Python HTTP server to serve the WebAssembly file, avoiding CORS errors when loading in the browser.\nSOURCE: https://github.com/vlang/v/blob/master/examples/wasm/change_color_by_id/README.md#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\npython -m http.server 8080\n```\n\n----------------------------------------\n\nTITLE: Processing String with Single Annotation\nDESCRIPTION: Demonstrates a simple string with a single annotation symbol\nSOURCE: https://github.com/vlang/v/blob/master/vlib/v/tests/tmpl/escape.txt#2025-04-21_snippet_0\n\nLANGUAGE: v\nCODE:\n```\nHello @world\n```\n\n----------------------------------------\n\nTITLE: Compiling and Running VCasino - Binary Generation Method\nDESCRIPTION: Commands to compile the V source code into a binary executable and then run it separately.\nSOURCE: https://github.com/vlang/v/blob/master/examples/vcasino/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nv VCasino.v\n./VCasino\n```\n\n----------------------------------------\n\nTITLE: Running Python Script with V Library\nDESCRIPTION: Command to execute the Python script that imports and uses the compiled V shared library.\nSOURCE: https://github.com/vlang/v/blob/master/examples/call_v_from_python/README.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npython3 test.py\n```\n\n----------------------------------------\n\nTITLE: Defining Basic Subroutine in V Language\nDESCRIPTION: Demonstrates the basic syntax for declaring a subroutine in V, which represents a fundamental method of creating reusable code blocks with optional parameters and return types\nSOURCE: https://github.com/vlang/v/blob/master/vlib/veb/tests/testdata/sub_folder/sub.txt#2025-04-21_snippet_0\n\nLANGUAGE: vlang\nCODE:\n```\nfn sub_name(param1 type, param2 type) return_type {\n    // Function body\n}\n```\n\n----------------------------------------\n\nTITLE: Referencing External Library Link in Markdown\nDESCRIPTION: Markdown code showing reference to the miniz.h library using inline code formatting and a hyperlink.\nSOURCE: https://github.com/vlang/v/blob/master/vlib/compress/szip/README.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n`szip` is a thin wrapper around [miniz.h](https://github.com/richgel999/miniz)\n```\n\n----------------------------------------\n\nTITLE: Creating Release Build of C# Boids Implementation\nDESCRIPTION: Command to create a release build of the C# Boids implementation for Ubuntu 20.04 x64 platform using the dotnet CLI.\nSOURCE: https://github.com/vlang/v/blob/master/bench/vectors/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndotnet publish -c Release -r ubuntu.20.04-x64\n```\n\n----------------------------------------\n\nTITLE: Upgrading Outdated Modules in V Language\nDESCRIPTION: This code snippet details the command used to upgrade all outdated modules in V. It includes an option to print more information about the upgrade process. The primary command is 'v upgrade' which requires the V language environment to be properly set up.\nSOURCE: https://github.com/vlang/v/blob/master/vlib/v/help/vpm/upgrade.txt#2025-04-21_snippet_0\n\nLANGUAGE: v\nCODE:\n```\nv upgrade\n```\n\n----------------------------------------\n\nTITLE: Compiling V to Shared Library - Windows\nDESCRIPTION: Commands to compile V code into a DLL and link it with C code on Windows systems using gcc.\nSOURCE: https://github.com/vlang/v/blob/master/examples/call_v_from_c/README.md#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nv -cc gcc -shared v_test_print.v\ngcc test_print.c v_test_print.dll -o test_print.exe\ntest_print.exe\n```\n\n----------------------------------------\n\nTITLE: Measuring Compilation Time and Memory Usage for V and C# Boids Implementations\nDESCRIPTION: Commands to measure compilation time and memory usage for V (development and production) and C# Boids implementations.\nSOURCE: https://github.com/vlang/v/blob/master/bench/vectors/README.md#2025-04-21_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nxtime v vectors.v\nxtime v -prod vectors.v\nxtime dotnet publish -c Release -r ubuntu.20.04-x64\n```\n\n----------------------------------------\n\nTITLE: Running V Language Test Suite\nDESCRIPTION: Command to run the entire test suite for the V programming language. This helps ensure that changes haven't introduced regressions.\nSOURCE: https://github.com/vlang/v/blob/master/CONTRIBUTING.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nv test-all\n```\n\n----------------------------------------\n\nTITLE: JSON Enum Value String Serialization in V\nDESCRIPTION: The `[json:'alias']` syntax provides a way to customize the string representation of enum values during JSON serialization. This allows for more control over the JSON output format, mapping enum constants to specific string aliases.\nSOURCE: https://github.com/vlang/v/blob/master/changelogs0.x/0.4.md#2025-04-21_snippet_2\n\nLANGUAGE: v\nCODE:\n```\n\t- json: Enum value string serialization supports `[json:'alias']` to change its string values.\n```\n\n----------------------------------------\n\nTITLE: Initializing Node.js Project\nDESCRIPTION: This Bash command initializes a Node.js project in the specified directory, creating a package.json file with default settings. This is a prerequisite step for setting up scripts for server operations.\nSOURCE: https://github.com/vlang/v/blob/master/examples/js_dom_cube/README.md#2025-04-21_snippet_1\n\nLANGUAGE: Bash\nCODE:\n```\ncd examples/js_dom_cube/\nnpm init -y\n```\n\n----------------------------------------\n\nTITLE: Setting Up Git Hooks for V Development\nDESCRIPTION: Bash commands to set up a pre-commit hook that automatically formats code before committing. This ensures consistent code style across the project.\nSOURCE: https://github.com/vlang/v/blob/master/CONTRIBUTING.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncp cmd/tools/git_pre_commit_hook.vsh .git/hooks/pre-commit\nchmod 755 .git/hooks/pre-commit\n```\n\n----------------------------------------\n\nTITLE: Extracting Downloaded OpenSSL Archive\nDESCRIPTION: This snippet extracts the downloaded OpenSSL tar.gz archive and navigates into the extracted directory.\nSOURCE: https://github.com/vlang/v/blob/master/vlib/x/crypto/slhdsa/install-latest-ssl.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ tar -xzvf openssl-3.5.0-beta1.tar.gz\n$ cd openssl-3.5.0-beta1\n```\n\n----------------------------------------\n\nTITLE: Performance Timing and Parallel Processing\nDESCRIPTION: Commands showing how to time the solution execution and run it with parallel processing using different thread counts.\nSOURCE: https://github.com/vlang/v/blob/master/examples/1brc/README.md#2025-04-21_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nv time ./solution ~/measurements.txt\n./solution -n 8 ~/measurements.txt\n./solution -n $(nproc) ~/measurements.txt\n```\n\n----------------------------------------\n\nTITLE: Running Production Benchmark in V Language\nDESCRIPTION: This snippet describes how to run the ASN.1 benchmark in production mode by using the `-prod` flag, which may optimize performance, resulting in faster execution times for encoding and decoding operations.\nSOURCE: https://github.com/vlang/v/blob/master/vlib/x/encoding/asn1/bench/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ v -prod benchk/bench.v\ngitpod /workspace/asn1 (dev) $ ./bench/bench\nBenchmarking ASN.1 encode...\nAverage example encode time: 3 µs\nBenchmarking ASN.1 decode (with asn.decode)...\nAverage (asn1.decode) decode time: 1 µs\nBenchmarking ASN.1 decode with Example.decode)...\nAverage (Example.decode) decode time: 1 µs\n```\n\n----------------------------------------\n\nTITLE: Copying and Cleaning Up Header Files\nDESCRIPTION: This snippet includes commands for copying the updated header files into the appropriate directory and cleaning up unnecessary files post-amalgamation. These operations ensure that the workspace remains clean and only the necessary files for the V project are retained.\nSOURCE: https://github.com/vlang/v/blob/master/thirdparty/libgc/amalgamation.txt#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncp include/gc/*.h ../include/gc\ncd ..\nrm include/gc/gc_cpp.h\nrm -rf bdwgc\n```\n\n----------------------------------------\n\nTITLE: Compiling V Boids Implementations and Running Performance Benchmarks\nDESCRIPTION: A series of commands to compile V Boids implementations in development and production modes, and run performance benchmarks using hyperfine.\nSOURCE: https://github.com/vlang/v/blob/master/bench/vectors/README.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nv -o vectors_development vectors.v\nv -o vectors_production -prod vectors.v\nhyperfine ./bin/Release/net7.0/ubuntu.20.04-x64/publish/vectors ./vectors_development ./vectors_production\n```\n\n----------------------------------------\n\nTITLE: Detecting Race Conditions with Valgrind\nDESCRIPTION: Valgrind's helgrind tool is used to detect race conditions within the server application. This snippet demonstrates how to compile the server without garbage collection and run it using helgrind.\nSOURCE: https://github.com/vlang/v/blob/master/examples/vanilla_http_server/README.md#2025-04-21_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nv -prod -gc none . \nvalgrind --tool=helgrind ./vanilla_http_server\n```\n\n----------------------------------------\n\nTITLE: Compile-Time Defines using $d\nDESCRIPTION: Demonstrates using compile-time defines with the $d directive for different value types and default values.\nSOURCE: https://github.com/vlang/v/blob/master/doc/docs.md#2025-04-21_snippet_172\n\nLANGUAGE: v\nCODE:\n```\nmodule main\n\nconst my_i64 = $d('my_i64', 1024)\n\nfn main() {\n\tcompile_time_value := $d('my_string', 'V')\n\tprintln(compile_time_value)\n\tprintln(my_i64)\n}\n```\n\nLANGUAGE: v\nCODE:\n```\nfn main() {\n\tval_str := $d('id_str', 'value')\n\tval_f64 := $d('id_f64', 42.0)\n\tval_i64 := $d('id_i64', 56)\n\tval_bool := $d('id_bool', false)\n\tval_char := $d('id_char', `f`)\n\tprintln(val_str)\n\tprintln(val_f64)\n\tprintln(val_i64)\n\tprintln(val_bool)\n\tprintln(rune(val_char))\n}\n```\n\n----------------------------------------\n\nTITLE: Running Node.js Server\nDESCRIPTION: Shell commands to build and start the Node.js server for the example.\nSOURCE: https://github.com/vlang/v/blob/master/examples/js_dom_draw/README.md#2025-04-21_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nnpm run build\nnpm run start\n```\n\n----------------------------------------\n\nTITLE: Comparing Screenshots with Specific Options\nDESCRIPTION: Command to compare screenshots between source and destination directories with specialized comparison flags\nSOURCE: https://github.com/vlang/v/blob/master/vlib/v/help/other/gret.txt#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nv gret --compare-only /tmp/src /tmp/dst\n```\n\n----------------------------------------\n\nTITLE: Generating Sample Data File\nDESCRIPTION: Commands to compile and run the sample data generator to create a measurements file with specified number of rows.\nSOURCE: https://github.com/vlang/v/blob/master/examples/1brc/README.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncd make-samples\nv -cc gcc -prod -cflags \"-std=c17 -march=native -mtune=native\" .\n./make-samples 1000000000 > ~/measurements.txt\n```\n\n----------------------------------------\n\nTITLE: Running Benchmark in Go\nDESCRIPTION: This code snippet runs the benchmark for encoding and decoding operations in Go, providing average execution times for the Marshal and Unmarshal functions, useful for comparison against V's performance.\nSOURCE: https://github.com/vlang/v/blob/master/vlib/x/encoding/asn1/bench/README.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ go run bench/bench.go\nBenchmarking golang Marshal...\nAverage Marshal time: 1 µs\nBenchmarking Unmarshal...\nAverage Unmarshal time: 0 µs\n```\n\n----------------------------------------\n\nTITLE: Downloading OpenSSL Library Using wget\nDESCRIPTION: This snippet provides a command to download the latest OpenSSL library version 3.5.0-beta1 using wget from the official GitHub releases.\nSOURCE: https://github.com/vlang/v/blob/master/vlib/x/crypto/slhdsa/install-latest-ssl.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ wget -v https://github.com/openssl/openssl/releases/download/openssl-3.5.0-beta1/openssl-3.5.0-beta1.tar.gz\n```\n\n----------------------------------------\n\nTITLE: Unsafe Dereferencing in V Language\nDESCRIPTION: This snippet illustrates the new rule in V that disallows dereferencing nil references in unsafe blocks unless handled correctly. It shows how to define a nil reference and the attempt to print it, which will lead to a runtime error.\nSOURCE: https://github.com/vlang/v/blob/master/changelogs0.x/0.4.md#2025-04-21_snippet_1\n\nLANGUAGE: v\nCODE:\n```\na := unsafe { nil }\nprintln(*a)\n```\n\n----------------------------------------\n\nTITLE: Cloning and Configuring bdwgc Repository\nDESCRIPTION: This snippet includes the commands to clone the bdwgc repository and configure it with various compilation options, including enabling threads and disabling shared libraries. The configuration settings allow for a tailored build of the garbage collection library intended for integration with the V language.\nSOURCE: https://github.com/vlang/v/blob/master/thirdparty/libgc/amalgamation.txt#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/ivmai/bdwgc.git\ncd bdwgc\n./autogen.sh\n./configure --enable-threads=pthreads \\\n    --enable-static \\\n    --enable-shared=no \\\n    --enable-thread-local-alloc=no \\\n    --enable-parallel-mark \\\n    --enable-single-obj-compilation \\\n    --enable-gc-debug\n```\n\n----------------------------------------\n\nTITLE: V Language Code Analysis Tool Options\nDESCRIPTION: This snippet lists the command-line options available for the `v vet` tool. Each option controls a specific aspect of the analysis, such as exiting with an error code on warnings, hiding warnings, enabling verbose logging, reporting on function length, suggesting inlining, including private functions in documentation checks, and reporting repeated code.\nSOURCE: https://github.com/vlang/v/blob/master/vlib/v/help/common/vet.txt#2025-04-21_snippet_1\n\nLANGUAGE: v\nCODE:\n```\n\"-W                  Exit with code 1, even if vet only reported warnings.\\n                      Useful for checks in CI.\\n\n  -w, -hide-warnings  Do not print warnings to stderr.\\n\n  -v, -verbose        Enable verbose logging.\\n\n  -F                  Report empty and long function declaration \\n                      (default: >300 lines).\\n\n  -I                  Report potential function to be inlined.\\n\n  -p                  Report private functions with missing documentation too\\n                      (by default, only the `pub fn` functions will be reported).\\n\n  -r                  Report repeated piece of code (e.g. var[0], call()).\"\n```\n\n----------------------------------------\n\nTITLE: GitHub Issues Filter Query with Labels\nDESCRIPTION: Filter query for finding open issues with specific labels for bugs on Windows that are confirmed.\nSOURCE: https://github.com/vlang/v/blob/master/CONTRIBUTING.md#2025-04-21_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nis:open is:issue label:Bug label:\"OS: Windows\" label:\"Status: Confirmed\"\n```\n\n----------------------------------------\n\nTITLE: Running WASM Game with emrun\nDESCRIPTION: Command to run the compiled WebAssembly game using Emscripten's emrun server.\nSOURCE: https://github.com/vlang/v/blob/master/examples/2048/README.md#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nemrun examples/2048/index.html\n```\n\n----------------------------------------\n\nTITLE: GitHub Issues Filter Query\nDESCRIPTION: Filter query for finding open issues sorted by reactions/likes in descending order.\nSOURCE: https://github.com/vlang/v/blob/master/CONTRIBUTING.md#2025-04-21_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nis:open is:issue sort:reactions-+1-desc\n```\n\n----------------------------------------\n\nTITLE: Checking File Writability (Vulnerable)\nDESCRIPTION: This code snippet illustrates a potential TOCTOU vulnerability when checking if a file is writable before creating and using it. An attacker could exploit the time between the check and the file creation to modify the file system, leading to unintended consequences.\nSOURCE: https://github.com/vlang/v/blob/master/vlib/os/README.md#2025-04-21_snippet_0\n\nLANGUAGE: V\nCODE:\n```\n```v ignore\nif os.is_writable(\"file\") {\n    // time to make a quick attack\n    // (e.g. symlink /etc/passwd to `file`)\n\n    mut f := os.create('path/to/file')!\n    // do something with file\n    f.close()\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Running Tests with Progress Display\nDESCRIPTION: Command to show only currently running test with limited output lines.\nSOURCE: https://github.com/vlang/v/blob/master/TESTS.md#2025-04-21_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n./v -progress test vlib/math/\n```\n\n----------------------------------------\n\nTITLE: Configuring tasks.json for V Build Task in Visual Studio Code\nDESCRIPTION: This JSON configuration sets up a build task for V programs in Visual Studio Code. It specifies the command to compile V code with debugging information and defines a problem matcher for error reporting.\nSOURCE: https://github.com/vlang/v/blob/master/doc/vscode.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"version\": \"2.0.0\",\n    \"tasks\": [\n        {\n            \"label\": \"build\",\n            \"type\": \"shell\",\n            \"command\": \"v\",\n            \"args\": [\n                \"-g\",\n                \"${relativeFile}\"\n            ],\n            \"group\": \"build\",\n            \"presentation\": {\n                \"reveal\": \"never\"\n            },\n            \"problemMatcher\": {\n                \"owner\": \"v\",\n                \"fileLocation\": [\"relative\", \"${workspaceFolder}\"],\n                \"pattern\": {\n                    \"regexp\": \"^(.*):(\\\\d+):(\\\\d+):\\\\s+(warning|error):\\\\s+(.*)$\",\n                    \"file\": 1,\n                    \"line\": 2,\n                    \"column\": 3,\n                    \"severity\": 4,\n                    \"message\": 5\n                }\n            }\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Running Single Test File in V\nDESCRIPTION: Commands to run individual test files in V, with optional statistics output.\nSOURCE: https://github.com/vlang/v/blob/master/TESTS.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nv file_test.v\nv -stats file_test.v\n```\n\n----------------------------------------\n\nTITLE: Docker with Alpine/Musl for V\nDESCRIPTION: This snippet details the commands to build a V environment using Docker with the Alpine Linux base. It's tailored for producing static executables.\nSOURCE: https://github.com/vlang/v/blob/master/README.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ngit clone --depth=1 https://github.com/vlang/v\ncd v\ndocker build -t vlang_alpine - < Dockerfile.alpine\nalias with_alpine='docker run -u 1000:1000 --rm -it -v .:/src -w /src vlang_alpine:latest'\n```\n\n----------------------------------------\n\nTITLE: Compiling V Program with Performance Optimizations\nDESCRIPTION: Command to compile the V program with gcc compiler and specific optimization flags for native architecture performance.\nSOURCE: https://github.com/vlang/v/blob/master/examples/1brc/README.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nv -cc gcc -prod -cflags \"-std=c17 -march=native -mtune=native\" .\n```\n\n----------------------------------------\n\nTITLE: AES Encryption/Decryption Example in V\nDESCRIPTION: This snippet demonstrates AES encryption and decryption using the `crypto.aes` module. It generates a random key, encrypts a block of data, and then decrypts it back. It highlights the need for a destination buffer of the correct size and the limitation of operating on the first block of the source data.\nSOURCE: https://github.com/vlang/v/blob/master/vlib/crypto/README.md#2025-04-21_snippet_0\n\nLANGUAGE: v\nCODE:\n```\nimport crypto.aes\nimport crypto.rand\n\nfn main() {\n\t// remember to save this key somewhere if you ever want to decrypt your data\n\tkey := rand.bytes(32)!\n\tprintln('KEY: ${key}')\n\n\t// this data is one block (16 bytes) big\n\tmut data := 'THIS IS THE DATA'.bytes()\n\n\tprintln('generating cipher')\ncipher := aes.new_cipher(key)\n\n\tprintln('performing encryption')\n\tmut encrypted := []u8{len: aes.block_size}\ncipher.encrypt(mut encrypted, data)\n\tprintln(encrypted)\n\n\tprintln('performing decryption')\n\tmut decrypted := []u8{len: aes.block_size}\ncipher.decrypt(mut decrypted, encrypted)\n\tprintln(decrypted)\n\n\tassert decrypted == data\n}\n```\n\n----------------------------------------\n\nTITLE: Measuring Execution Time and Memory Usage of Boids Implementations\nDESCRIPTION: Commands to measure execution time and memory usage of C# and V Boids implementations using a custom time alias.\nSOURCE: https://github.com/vlang/v/blob/master/bench/vectors/README.md#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nalias xtime='/usr/bin/time -f \"CPU: %Us\\tReal: %es\\tElapsed: %E\\tRAM: %MKB\\t%C\"'\nxtime ./vectors_development\nxtime ./vectors_production\nxtime ./bin/Release/net7.0/ubuntu.20.04-x64/publish/vectors\n```\n\n----------------------------------------\n\nTITLE: Differencing Documentation Checks in V\nDESCRIPTION: This V command helps to compare two specified PATH inputs and checks if any new undocumented functions have been introduced. The `--diff` flag exits with an error if new functions are found, making it essential for maintaining function documentation consistency across versions.\nSOURCE: https://github.com/vlang/v/blob/master/vlib/v/help/common/missdoc.txt#2025-04-21_snippet_1\n\nLANGUAGE: v\nCODE:\n```\n```\nv missdoc --diff current/code new/code\n```\n```\n\n----------------------------------------\n\nTITLE: Package Update Command Line Interface\nDESCRIPTION: Defines the command-line syntax for updating V packages, supporting optional package names and update options\nSOURCE: https://github.com/vlang/v/blob/master/vlib/v/help/vpm/update.txt#2025-04-21_snippet_0\n\nLANGUAGE: cli\nCODE:\n```\nv update [PACKAGE]...\n```\n\n----------------------------------------\n\nTITLE: Comparing Vector Implementation Performance Between C# and V\nDESCRIPTION: Benchmark comparison showing execution times of vector operations in C# (boids_test) versus V language (vinted_report_generator). The results show mean execution times, standard deviation, and a performance summary indicating the V implementation runs about 1.26 times faster.\nSOURCE: https://github.com/vlang/v/blob/master/bench/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nBenchmark 1: ./boids_test/bin/Release/net7.0/linux-x64/publish/boids_test\nTime (mean ± σ):     262.2 ms ±   5.7 ms    [User: 231.6 ms, System: 14.1 ms]\nRange (min … max):   255.4 ms … 275.3 ms    11 runs\n\nBenchmark 2: ./vinted_report_generator/main\nTime (mean ± σ):     208.3 ms ±   1.9 ms    [User: 205.4 ms, System: 1.6 ms]\nRange (min … max):   204.9 ms … 210.6 ms    14 runs\n\nSummary\n./vinted_report_generator/main ran\n1.26 ± 0.03 times faster than ./boids_test/bin/Release/net7.0/linux-x64/publish/boids_test\n```\n\n----------------------------------------\n\nTITLE: Displaying V Language Version\nDESCRIPTION: Command-line instruction to print the version of V programming language currently installed on the system\nSOURCE: https://github.com/vlang/v/blob/master/vlib/v/help/installation/version.txt#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nv version\n```\n\n----------------------------------------\n\nTITLE: Generating Screenshots in V Language Screenshot Tool\nDESCRIPTION: Command to generate screenshots to a specified directory, supporting both single and comparative screenshot generation modes\nSOURCE: https://github.com/vlang/v/blob/master/vlib/v/help/other/gret.txt#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nv gret /tmp/test\n```\n\nLANGUAGE: shell\nCODE:\n```\nv gret /tmp/src /tmp/dst\n```\n\n----------------------------------------\n\nTITLE: V Bug Command Usage\nDESCRIPTION: This snippet shows the basic usage of the `v bug` command.  It takes a file as an argument and supports options for verbose output and forced submission.\nSOURCE: https://github.com/vlang/v/blob/master/vlib/v/help/other/bug.txt#2025-04-21_snippet_0\n\nLANGUAGE: Text\nCODE:\n```\n\"Usage:\\n  v bug [options] FILE\\n\\nOptions:\\n  -v  Enable verbosity while gathering various information\\n  -y  Force the submission of the issue, even if an error occurred\"\n```\n\n----------------------------------------\n\nTITLE: Placeholder Test Content\nDESCRIPTION: This snippet represents a basic placeholder within a test file.  It could be replaced with actual V language code for testing purposes.\nSOURCE: https://github.com/vlang/v/blob/master/vlib/v/embed_file/tests/a.txt#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n\"test\"\n```\n\n----------------------------------------\n\nTITLE: Processing V Language Annotation @b\nDESCRIPTION: A code snippet handling a specific annotation in the V programming language, likely related to a modifier or attribute\nSOURCE: https://github.com/vlang/v/blob/master/vlib/v/tests/tmpl/b.txt#2025-04-21_snippet_0\n\nLANGUAGE: v\nCODE:\n```\n@b\n```\n\n----------------------------------------\n\nTITLE: Installing PostgreSQL on Fedora 31\nDESCRIPTION: These commands install the PostgreSQL server and client libraries on Fedora 31, enable the service to start on boot, and start the PostgreSQL service.\nSOURCE: https://github.com/vlang/v/blob/master/vlib/db/pg/README.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nsudo dnf install postgresql-server postgresql-contrib\nsudo systemctl enable postgresql # to autostart on startup\nsudo systemctl start  postgresql\n```\n\n----------------------------------------\n\nTITLE: Processing String with Multiple Annotations\nDESCRIPTION: Shows a string containing multiple annotation symbols with different spacing\nSOURCE: https://github.com/vlang/v/blob/master/vlib/v/tests/tmpl/escape.txt#2025-04-21_snippet_1\n\nLANGUAGE: v\nCODE:\n```\nHello @ @world @\n```\n\n----------------------------------------\n\nTITLE: Implementing Route with Middleware Check in Veb (V)\nDESCRIPTION: Implements a route that uses the middleware-set context value to determine the response.\nSOURCE: https://github.com/vlang/v/blob/master/vlib/veb/README.md#2025-04-21_snippet_17\n\nLANGUAGE: v\nCODE:\n```\n@['/only-cookies']\npub fn (app &App) only_cookie_route(mut ctx Context) veb.Result {\n\tif ctx.has_accepted_cookies {\n\t\treturn ctx.text('Welcome!')\n\t} else {\n\t\treturn ctx.text('You must accept the cookie policy!')\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Middleware Setup for Request ID Tracking in V\nDESCRIPTION: Sets up the request ID middleware for a V web application using the veb framework. It registers the middleware with a custom configuration, enabling request ID tracking for all routes. The `veb.run` function starts the web application on port 8080.\nSOURCE: https://github.com/vlang/v/blob/master/vlib/veb/request_id/README.md#2025-04-21_snippet_2\n\nLANGUAGE: v\nCODE:\n```\n```v\nimport veb\nimport rand\nimport veb.request_id\n\npub struct Context {\n\tveb.Context\n\trequest_id.RequestIdContext\n}\n\npub struct App {\n\tveb.Middleware[Context]\n}\n\nconst request_id_config = request_id.Config{\n\theader:    'X-Request-ID'\n\tgenerator: rand.uuid_v4\n}\n\nfn main() {\n\tmut app := &App{}\n\t// Register the RequestID middleware with custom configuration\n\tapp.use(request_id.middleware[Context](request_id_config))\n\tveb.run[App, Context](mut app, 8080)\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Using the Heap Attribute for Manual Memory Control in V\nDESCRIPTION: Demonstrates the use of the [heap] attribute to force objects to be allocated on the heap, which is necessary when references escape their original scope and need to remain valid longer than the function call.\nSOURCE: https://github.com/vlang/v/blob/master/doc/docs.md#2025-04-21_snippet_139\n\nLANGUAGE: v\nCODE:\n```\nstruct RefStruct {\nmut:\n\tr &MyStruct\n}\n\n// see discussion below\n@[heap]\nstruct MyStruct {\n\tn int\n}\n\nfn main() {\n\tmut m := MyStruct{}\n\tmut r := RefStruct{\n\t\tr: &m\n\t}\n\tr.g()\n\tprintln('r: ${r}')\n}\n\nfn (mut r RefStruct) g() {\n\ts := MyStruct{\n\t\tn: 7\n\t}\n\tr.f(&s) // reference to `s` inside `r` is passed back to `main() `\n}\n\nfn (mut r RefStruct) f(s &MyStruct) {\n\tr.r = s // would trigger error without `[heap]`\n}\n```\n\n----------------------------------------\n\nTITLE: Printing V Version - V\nDESCRIPTION: The command 'v version' prints the version of the V executable being used. This is helpful for users to verify which version of V is currently active.\nSOURCE: https://github.com/vlang/v/blob/master/vlib/v/help/installation/installation.txt#2025-04-21_snippet_2\n\nLANGUAGE: v\nCODE:\n```\nv version    Print the version of the V executable.\n```\n\n----------------------------------------\n\nTITLE: Fixed Size Arrays in V\nDESCRIPTION: Demonstrates fixed-size arrays with constant length that cannot be appended to or shrunk, only modified in place, and converting them to ordinary arrays.\nSOURCE: https://github.com/vlang/v/blob/master/doc/docs.md#2025-04-21_snippet_39\n\nLANGUAGE: v\nCODE:\n```\nmut fnums := [3]int{} // fnums is a fixed size array with 3 elements.\nfnums[0] = 1\nfnums[1] = 10\nfnums[2] = 100\nprintln(fnums) // => [1, 10, 100]\nprintln(typeof(fnums).name) // => [3]int\n\nfnums2 := [1, 10, 100]! // short init syntax that does the same (the syntax will probably change)\n\nanums := fnums[..] // same as `anums := fnums[0..fnums.len]`\nprintln(anums) // => [1, 10, 100]\nprintln(typeof(anums).name) // => []int\n```\n\n----------------------------------------\n\nTITLE: Passing References as Function Arguments in V\nDESCRIPTION: Shows how references are passed to functions in V with the lifetime remaining in the caller's scope. The compiler can determine that objects can be stack-allocated because references are only borrowed.\nSOURCE: https://github.com/vlang/v/blob/master/doc/docs.md#2025-04-21_snippet_138\n\nLANGUAGE: v\nCODE:\n```\nstruct MyStruct {\nmut:\n\tn int\n}\n\nfn main() {\n\tmut q := MyStruct{\n\t\tn: 7\n\t}\n\tw := MyStruct{\n\t\tn: 13\n\t}\n\tx := q.f(&w) // references of `q` and `w` are passed\n\tprintln('q: ${q}\\nx: ${x}')\n}\n\nfn (mut a MyStruct) f(b &MyStruct) int {\n\ta.n += b.n\n\tx := a.n * b.n\n\treturn x\n}\n```\n\n----------------------------------------\n\nTITLE: Creating V Global Symlink - V\nDESCRIPTION: The command 'v symlink' adds a global symlink to the V executable. This allows for easier access to the V commands from any terminal session.\nSOURCE: https://github.com/vlang/v/blob/master/vlib/v/help/installation/installation.txt#2025-04-21_snippet_3\n\nLANGUAGE: v\nCODE:\n```\nv symlink    Add a global symlink to the V executable.\n```\n\n----------------------------------------\n\nTITLE: Using Underscore Notation for Numbers in V\nDESCRIPTION: This snippet demonstrates the use of underscores as separators in numeric literals. It assigns various numbers using underscore notation, showing it can aid readability while still assigning equivalent values.\nSOURCE: https://github.com/vlang/v/blob/master/doc/docs.md#2025-04-21_snippet_18\n\nLANGUAGE: v\nCODE:\n```\nnum := 1_000_000 // same as 1000000\nthree := 0b0_11 // same as 0b11\nfloat_num := 3_122.55 // same as 3122.55\nhexa := 0xF_F // same as 255\noct := 0o17_3 // same as 0o173\n```\n\n----------------------------------------\n\nTITLE: Noinit structs in V\nDESCRIPTION: Shows how to create structs that cannot be initialized outside their module using the `[noinit]` attribute. These structs are meant to be used through factory functions that can implement validation logic.\nSOURCE: https://github.com/vlang/v/blob/master/doc/docs.md#2025-04-21_snippet_73\n\nLANGUAGE: v\nCODE:\n```\nmodule sample\n\n@[noinit]\npub struct Information {\npub:\n\tdata string\n}\n\npub fn new_information(data string) !Information {\n\tif data.len == 0 || data.len > 100 {\n\t\treturn error('data must be between 1 and 100 characters')\n\t}\n\treturn Information{\n\t\tdata: data\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Context Struct with RequestIdContext in V\nDESCRIPTION: Defines a custom `Context` struct that embeds `veb.Context` and `request_id.RequestIdContext`. This allows access to the request ID within route handlers. This is a crucial step to integrate the request ID middleware within your application context.\nSOURCE: https://github.com/vlang/v/blob/master/vlib/veb/request_id/README.md#2025-04-21_snippet_0\n\nLANGUAGE: v\nCODE:\n```\n```v\nimport veb\nimport veb.request_id\n\npub struct Context {\n\tveb.Context\n\trequest_id.RequestIdContext\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Matching Sum Types in V\nDESCRIPTION: Illustrates how to use match expressions to determine and handle different variants of a sum type in V. The example shows matching different planet types and executing variant-specific code.\nSOURCE: https://github.com/vlang/v/blob/master/doc/docs.md#2025-04-21_snippet_117\n\nLANGUAGE: v\nCODE:\n```\nstruct Moon {}\n\nstruct Mars {}\n\nstruct Venus {}\n\ntype World = Mars | Moon | Venus\n\nfn open_parachutes(n int) {\n\tprintln(n)\n}\n\nfn land(w World) {\n\tmatch w {\n\t\tMoon {} // no atmosphere\n\t\tMars {\n\t\t\t// light atmosphere\n\t\t\topen_parachutes(3)\n\t\t}\n\t\tVenus {\n\t\t\t// heavy atmosphere\n\t\t\topen_parachutes(1)\n\t\t}\n\t}\n}\n```\n\nLANGUAGE: v\nCODE:\n```\nstruct Moon {}\nstruct Mars {}\nstruct Venus {}\n\ntype World = Moon | Mars | Venus\n\nfn (m Moon) moon_walk() {}\nfn (m Mars) shiver() {}\nfn (v Venus) sweat() {}\n\nfn pass_time(w World) {\n    match w {\n        // using the shadowed match variable, in this case `w` (smart cast)\n        Moon { w.moon_walk() }\n        Mars { w.shiver() }\n        else {}\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Global City Temperature Data (Plain Text)\nDESCRIPTION: Raw data listing cities and their average temperatures in Celsius format. Each line contains a city name and its temperature value separated by a comma.\nSOURCE: https://github.com/vlang/v/blob/master/examples/1brc/make-samples/cities.txt#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nAbha,18.0\nAbidjan,26.0\nAbéché,29.4\nAccra,26.4\nAddis Ababa,16.0\nAdelaide,17.3\nAden,29.1\nAhvaz,25.4\nAlbuquerque,14.0\nAlexandra,11.0\nAlexandria,20.0\n[...additional entries...]\n```\n\n----------------------------------------\n\nTITLE: Handling Multiple Return Values with Option/Result in V\nDESCRIPTION: Shows how to return multiple values while still signaling an error using Option/Result types in V. The example demonstrates a function that returns two integers or an error.\nSOURCE: https://github.com/vlang/v/blob/master/doc/docs.md#2025-04-21_snippet_119\n\nLANGUAGE: v\nCODE:\n```\nfn multi_return(v int) !(int, int) {\n\tif v < 0 {\n\t\treturn error('must be positive')\n\t}\n\treturn v, v * v\n}\n```\n\n----------------------------------------\n\nTITLE: Running VWeb TODO App with V CLI\nDESCRIPTION: Demonstrates how to run the VWeb TODO application using V language command line interface, with options for standard execution and live reload development mode\nSOURCE: https://github.com/vlang/v/blob/master/examples/veb/todo/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nv run main.v\n```\n\nLANGUAGE: bash\nCODE:\n```\nv watch -d vweb_livereload run main.v\n```\n\n----------------------------------------\n\nTITLE: Defining and Using Constants in V\nDESCRIPTION: Demonstrates constant declarations in V, showing basic constant usage, constants with complex values including structs and arrays, and public constants for modules.\nSOURCE: https://github.com/vlang/v/blob/master/doc/docs.md#2025-04-21_snippet_88\n\nLANGUAGE: v\nCODE:\n```\nconst pi = 3.14\nconst world = '世界'\n\nprintln(pi)\nprintln(world)\n```\n\nLANGUAGE: v\nCODE:\n```\nconst e = 2.71828\n```\n\nLANGUAGE: v\nCODE:\n```\nstruct Color {\n\tr int\n\tg int\n\tb int\n}\n\nfn rgb(r int, g int, b int) Color {\n\treturn Color{\n\t\tr: r\n\t\tg: g\n\t\tb: b\n\t}\n}\n\nconst numbers = [1, 2, 3]\nconst red = Color{\n\tr: 255\n\tg: 0\n\tb: 0\n}\n// evaluate function call at compile time*\nconst blue = rgb(0, 0, 255)\n\nprintln(numbers)\nprintln(red)\nprintln(blue)\n```\n\nLANGUAGE: v\nCODE:\n```\nmodule mymodule\n\npub const golden_ratio = 1.61803\n\nfn calc() {\n\tprintln(golden_ratio)\n}\n```\n\n----------------------------------------\n\nTITLE: HTTP Benchmark Data Fetching Service\nDESCRIPTION: V language implementation of a service that fetches benchmark data via HTTP and decodes it into a FrameworkBenchmarkResponse structure.\nSOURCE: https://github.com/vlang/v/blob/master/examples/js_dom_draw_benchmark_chart/chart/README.md#2025-04-21_snippet_2\n\nLANGUAGE: v\nCODE:\n```\nfn typescript_sqlite_memory() ?FrameworkBenchmarkResponse {\n\turl := 'http://localhost:3000/sqlite-memory/$benchmark_loop_length'\n\tres := http.get(url) or { panic(err) }\n\tframework_benchmark_response := json.decode(FrameworkBenchmarkResponse, res.body)!\n\treturn framework_benchmark_response\n}\n```\n\n----------------------------------------\n\nTITLE: Docker Container Setup Commands\nDESCRIPTION: Commands for building and running a Docker container for V applications, exposing port 3001.\nSOURCE: https://github.com/vlang/v/blob/master/examples/js_dom_draw_benchmark_chart/chart/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsudo docker build -t <name> .\nsudo docker run --name <container name> --interactive --tty --publish 3001:3001 <name>\nv run .\nexit\n```\n\n----------------------------------------\n\nTITLE: Defining C Function Signature in V\nDESCRIPTION: Demonstrates how to represent a C function signature in V, showing the equivalence of pointer types and integer types between C and V.\nSOURCE: https://github.com/vlang/v/blob/master/doc/c_and_v_type_interoperability.md#2025-04-21_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nunsigned char func_name(int * p, index int);\n```\n\nLANGUAGE: v\nCODE:\n```\nfn C.func_name(p &int, index i32) u8\n```"
  }
]