[
  {
    "owner": "medplum",
    "repo": "medplum",
    "content": "TITLE: Read-only AccessPolicy for Patient Resource Type (JSON)\nDESCRIPTION: This AccessPolicy grants read-only access to the 'Patient' resource type. Users with this policy can view Patient resources, but they cannot create, update, or delete them. Attempting to modify a read-only resource will result in a 403 Forbidden HTTP error.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/access/access-policies.md#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"resourceType\": \"AccessPolicy\",\n  \"name\": \"Patient Example\",\n  \"resource\": [\n    {\n      \"resourceType\": \"Patient\",\n      \"readonly\": true\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Linking Patient Records in FHIR with Patient.link\nDESCRIPTION: This code snippet demonstrates how to link duplicate patient records in FHIR using the `Patient.link` element. It shows how to reference the master record from a source record with `Patient.link.other` and setting `Patient.link.type` to `replaced-by`, and vice versa for the master record referencing source records using `replaces`.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/fhir-datastore/patient-deduplication/merging.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  // Example of code to link patient records\n}\n```\n\n----------------------------------------\n\nTITLE: Criteria-Based Access Policy for Patients in CA (JSON)\nDESCRIPTION: This AccessPolicy limits access to 'Patient' resources who live in California using a FHIR Search Query in the criteria field. It filters Patient resources based on the 'address-state' parameter, effectively granting access only to patients with a California address. The criteria leverages FHIR search syntax.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/access/access-policies.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"resourceType\": \"AccessPolicy\",\n  \"name\": \"Criteria Based Access Policy\",\n  \"resource\": [\n    {\n      \"resourceType\": \"Patient\",\n      \"criteria\": \"Patient?address-state=CA\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Bot for Patient and ServiceRequest Creation from Questionnaire - TypeScript\nDESCRIPTION: This code snippet shows a complete Medplum Bot handler function that processes a QuestionnaireResponse and creates a Patient and ServiceRequest resource.  It uses `getQuestionnaireAnswers` to extract data from the response and `medplum.createResource` to create the FHIR resources. It depends on `@medplum/core` and `@medplum/fhirtypes` for types and utility functions.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/bots/bot-for-questionnaire-response/bot-for-questionnaire-response.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { BotEvent, MedplumClient, getQuestionnaireAnswers, createReference } from '@medplum/core';\nimport { QuestionnaireResponse, Patient, ServiceRequest } from '@medplum/fhirtypes';\n\nexport async function handler(medplum: MedplumClient, event: BotEvent): Promise<any> {\n  const response = event.input as QuestionnaireResponse;\n\n  // Use the getQuestionnaireAnswers utility function to convert the response into\n  // a map of [linkId, answer] pairs.\n  const answers = getQuestionnaireAnswers(response);\n\n  // Read out the the user's answers into separate variables\n  // Here we provide default answers if the user's answer is 'undefined'\n  const firstName = answers['firstName']?.valueString || '';\n  const lastName = answers['lastName']?.valueString || '';\n  const email = answers['email']?.valueString || 'No Email Given';\n  const phone = answers['phone']?.valueString || 'No Phone Number Given';\n  const reasonForVisiting = answers['reasonForVisit']?.valueString || 'No Reason Given';\n\n  // Create the patient\n  const patient = await medplum.createResource<Patient>({\n    resourceType: 'Patient',\n    name: [\n      {\n        given: [firstName],\n        family: lastName,\n      },\n    ],\n    telecom: [\n      {\n        system: 'email',\n        value: email,\n      },\n      {\n        system: 'phone',\n        value: phone,\n      },\n    ],\n  });\n  console.log('Created Patient ', patient.id);\n\n  // Create the Service Request\n  const serviceRequest = await medplum.createResource<ServiceRequest>({\n    resourceType: 'ServiceRequest',\n    status: 'active',\n    intent: 'order',\n    subject: createReference(patient),\n    reasonCode: [\n      {\n        text: reasonForVisiting,\n      },\n    ],\n  });\n\n  console.log('Created ServiceRequest ', serviceRequest.id);\n}\n```\n\n----------------------------------------\n\nTITLE: Get Patient by ID TypeScript\nDESCRIPTION: This TypeScript code snippet is related to fetching a Patient resource by ID, likely demonstrating how to execute the corresponding GraphQL query within a TypeScript application using the Medplum client. It may contain the necessary code to interface with the Medplum GraphQL API.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/graphql/basic-queries.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n{ExampleCode}\n```\n\n----------------------------------------\n\nTITLE: Search for Messages in a Specific Thread (cURL)\nDESCRIPTION: This cURL command retrieves all messages belonging to a specific communication thread by querying the `Communication` resources that reference the thread's header in the `partOf` field. The command also sorts the messages by their `sent` timestamp. The cURL command sorts by the 'sent' property in ascending order to keep the messages in chronological order.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/communications/organizing-communications.mdx#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n{ExampleCode}\n```\n\n----------------------------------------\n\nTITLE: Appointment Resource Definition - JSON\nDESCRIPTION: Imports the JSON definition for the FHIR Appointment resource. This definition contains the schema and search parameters used to generate the documentation.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/api/fhir/resources/appointment.mdx#_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\ndefinition.properties.filter((p) => !(p.inherited && p.base.includes('Resource')))\n```\n\nLANGUAGE: JSON\nCODE:\n```\ndefinition.searchParameters\n```\n\n----------------------------------------\n\nTITLE: Creating a Patient with Conditional Logic in FHIR TypeScript\nDESCRIPTION: Demonstrates how to create a Patient resource if one does not already exist, using conditional create logic based on a Medical Record Number (MRN). It imports necessary modules and includes error handling. It emphasizes the importance of the Patient.identifier field and provides an example of an identifier scheme.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/fhir-datastore/working-with-fhir.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { MedplumClient, Patient } from '@medplum/core';\n\n/**\n * Creates a patient if one does not already exist.\n * Uses the conditional create logic in FHIR.\n */\nasync function createPatient(medplum: MedplumClient, mrn: string): Promise<Patient> {\n  const patient: Patient = {\n    resourceType: 'Patient',\n    identifier: [\n      {\n        system: 'http://example.com/mrn',\n        value: mrn,\n      },\n    ],\n    name: [\n      {\n        family: 'Smith',\n        given: ['Alice'],\n      },\n    ],\n  };\n\n  try {\n    // Conditional create\n    return await medplum.createResourceIfNoneExist(patient, 'Patient?identifier.system=http://example.com/mrn&identifier.value=' + mrn);\n  } catch (error: any) {\n    console.log('Could not create patient', error);\n    throw error;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: FHIR Search with _include and _revinclude (cURL)\nDESCRIPTION: This cURL command demonstrates how to perform a FHIR search with the `_include` and `_revinclude` parameters to retrieve linked resources using a cURL request.  It's an example of a direct HTTP request to the FHIR server to search for Observations and include related Patient and Provenance resources.  The URL must be properly formatted with the correct search parameters and authorization headers.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/search/includes.mdx#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n{ExampleCode}\n```\n\n----------------------------------------\n\nTITLE: Authorization Code Grant Sample Request\nDESCRIPTION: Sample HTTP GET request to the `/oauth2/authorize` endpoint for authorization code grant flow.  This request includes required parameters such as `response_type`, `client_id`, `redirect_uri`, `state`, and `scope`. The authentication server redirects back to the app with the authorization code and state.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/api/oauth/authorize.md#_snippet_0\n\nLANGUAGE: HTTP\nCODE:\n```\nGET https://api.medplum.com/oauth2/authorize?\n    response_type=code&\n    client_id=492e4ec3-fb66-4b45-b529-599c708ec530&\n    redirect_uri=https://YOUR_APP/redirect_uri&\n    state=STATE&\n    scope=openid\n```\n\n----------------------------------------\n\nTITLE: Search CareTeam Members for Patient (TypeScript)\nDESCRIPTION: This TypeScript example shows how to search for a Patient's CareTeam members. It uses _revinclude to find the CareTeam associated with the Patient and _include:iterate to retrieve the members of the CareTeam (Practitioners and Organizations). The example depends on the Medplum client library.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/search/includes.mdx#_snippet_17\n\nLANGUAGE: TypeScript\nCODE:\n```\n{ExampleCode}\n```\n\n----------------------------------------\n\nTITLE: Patient Access Policy Template in FHIR JSON\nDESCRIPTION: This is a template for a patient access policy that restricts each patient's access to only their own data. It implements compartments and includes common FHIR resources.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/access/access-policies.md#_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"resourceType\": \"AccessPolicy\",\n  \"name\": \"Patient Access Policy Template\",\n  \"id\": \"patient-access-policy-template\",\n  \"compartment\": {\n    \"reference\": \"%patient\"\n  },\n  \"resource\": [\n    {\n      \"resourceType\": \"Patient\",\n      \"criteria\": \"Patient?_compartment=%patient\"\n    },\n    {\n      \"resourceType\": \"Observation\",\n      \"criteria\": \"Observation?_compartment=%patient\"\n    },\n    {\n      \"resourceType\": \"DiagnosticReport\",\n      \"criteria\": \"DiagnosticReport?_compartment=%patient\"\n    },\n    {\n      \"resourceType\": \"MedicationRequest\",\n      \"criteria\": \"MedicationRequest?_compartment=%patient\"\n    },\n    {\n      \"resourceType\": \"Coverage\",\n      \"criteria\": \"Coverage?_compartment=%patient\"\n    },\n    {\n      \"resourceType\": \"PaymentNotice\",\n      \"criteria\": \"PaymentNotice?_compartment=%patient\"\n    },\n    {\n      \"resourceType\": \"CarePlan\",\n      \"criteria\": \"CarePlan?_compartment=%patient\"\n    },\n    {\n      \"resourceType\": \"Immunization\",\n      \"criteria\": \"Immunization?_compartment=%patient\"\n    },\n    {\n      \"resourceType\": \"Communication\",\n      \"criteria\": \"Communication?_compartment=%patient\"\n    },\n    {\n      \"resourceType\": \"Organization\",\n      \"readonly\": true\n    },\n    {\n      \"resourceType\": \"Practitioner\",\n      \"readonly\": true\n    },\n    {\n      \"resourceType\": \"Schedule\",\n      \"readonly\": true\n    },\n    {\n      \"resourceType\": \"Slot\",\n      \"readonly\": true\n    },\n    {\n      \"resourceType\": \"Binary\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Updating a Resource using updateResource (TypeScript)\nDESCRIPTION: This snippet demonstrates how to update a resource using the `updateResource` method in the Medplum client. It requires the `resourceType` and `id` of the resource to be updated, along with the updated resource data. The function takes the updated resource as an argument.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/fhir-datastore/updating-data.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n/* selectBlocks: updateTs */\n\n```\n\n----------------------------------------\n\nTITLE: Defining Patient Access with Account Compartment in JS\nDESCRIPTION: This access policy grants read-only access to Patient resources within a customer's \"account\" compartment. Any resource created or updated will be tagged with `meta.account` set to `Organization/abc-123`, and read/search operations will filter on this tag.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/access/access-policies.md#_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"resourceType\": \"AccessPolicy\",\n  \"name\": \"Patient Example\",\n  // Any resource created or updated will be tagged with `meta.account` set to `Organization/abc-123`\n  \"compartment\": {\n    \"reference\": \"Organization/abc-123\",\n    \"display\": \"Example Customer Organization\"\n  },\n  \"resource\": [\n  // Any read or search operation will filter on `meta.account` equals `Organization/abc-123`\n    {\n      \"resourceType\": \"Patient\",\n      \"criteria\": \"Patient?_compartment=Organization/abc-123\"\n      \"readonly\": true\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Rotate Client Secret\nDESCRIPTION: This code snippet demonstrates how to rotate a client secret using the Medplum API.  It shows how to call the `$rotate-secret` operation on a `ClientApplication` resource to generate a new primary secret and move the old one to `retiringSecret` or retire the old secret completely. The example uses the Medplum client library.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/api/fhir/operations/rotate-client-secret.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { MedplumClient } from '@medplum/core';\n\nasync function rotateClientSecret(medplum: MedplumClient, clientId: string, secret?: string, retiringSecret?: string) {\n  const params: Record<string, string> = {};\n  if (secret) {\n    params.secret = secret;\n  } else if (retiringSecret) {\n    params.retiringSecret = retiringSecret;\n  }\n\n  const result = await medplum.updateResource({\n    resourceType: 'ClientApplication',\n    id: clientId,\n    secret,\n    retiringSecret,\n  });\n\n  console.log('ClientApplication updated', result);\n}\n\n// Example usage:\n// Replace with actual values\n// const medplum = new MedplumClient({ baseUrl: 'your_medplum_base_url' });\n// const clientId = 'your_client_id';\n\n// To rotate the primary secret\n// await rotateClientSecret(medplum, clientId, 'current_primary_secret');\n\n// To rotate the retiring secret\n// await rotateClientSecret(medplum, clientId, undefined, 'current_retiring_secret');\n\n```\n\n----------------------------------------\n\nTITLE: HTTP Redirect Response - OAuth2 Authorization Code\nDESCRIPTION: This HTTP redirect response is received after the user successfully authenticates. The `AUTHORIZATION_CODE` is included in the query string and needs to be exchanged for an access token.  The code parameter must be extracted from the URL.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/auth/methods/oauth-auth-code.md#_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 302 Found\nLocation: https://YOUR_APP/redirect_uri?code=AUTHORIZATION_CODE\n```\n\n----------------------------------------\n\nTITLE: Creating Observations in TypeScript\nDESCRIPTION: Shows how to create Observation resources, representing lab test results, and linking them to a Patient and ServiceRequest. It imports necessary modules and includes error handling. The values and interpretations of observations are crucial for diagnostic reporting.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/fhir-datastore/working-with-fhir.mdx#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { MedplumClient, Observation, Patient, ServiceRequest } from '@medplum/core';\n\n/**\n * Creates an observation for a patient.\n * Links the observation to the patient and service request.\n */\nasync function createObservations(\n  medplum: MedplumClient,\n  patient: Patient,\n  serviceRequest: ServiceRequest\n): Promise<Observation[]> {\n  const observation1: Observation = {\n    resourceType: 'Observation',\n    status: 'final',\n    code: {\n      coding: [\n        {\n          system: 'http://loinc.org',\n          code: '2345-7',\n          display: 'Glucose',\n        },\n      ],\n      text: 'Glucose',\n    },\n    subject: {\n      reference: 'Patient/' + patient.id,\n    },\n    derivedFrom: [\n      {\n        reference: 'ServiceRequest/' + serviceRequest.id,\n      },\n    ],\n    valueQuantity: {\n      value: 100,\n      unit: 'mg/dL',\n      system: 'http://unitsofmeasure.org',\n      code: 'mg/dL',\n    },\n  };\n\n  const observation2: Observation = {\n    resourceType: 'Observation',\n    status: 'final',\n    code: {\n      coding: [\n        {\n          system: 'http://loinc.org',\n          code: '3456-8',\n          display: 'Sodium',\n        },\n      ],\n      text: 'Sodium',\n    },\n    subject: {\n      reference: 'Patient/' + patient.id,\n    },\n    derivedFrom: [\n      {\n        reference: 'ServiceRequest/' + serviceRequest.id,\n      },\n    ],\n    valueQuantity: {\n      value: 140,\n      unit: 'mmol/L',\n      system: 'http://unitsofmeasure.org',\n      code: 'mmol/L',\n    },\n  };\n\n  try {\n    return await medplum.createResources<Observation>([observation1, observation2]);\n  } catch (error: any) {\n    console.log('Could not create observations', error);\n    throw error;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Searching Inclusive Range cURL\nDESCRIPTION: This snippet demonstrates searching for FHIR resources within an inclusive range using an AND search with cURL.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/search/basic-search.mdx#_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\n{ExampleCode}\n```\n\n----------------------------------------\n\nTITLE: Sample UserInfo Response\nDESCRIPTION: Illustrates a sample successful response from the /oauth2/userinfo endpoint.  The response is a JSON object containing user details like sub, name, given_name, family_name, preferred_username, and email. The HTTP status code is 200 OK and the Content-Type is application/json.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/api/oauth/userinfo.md#_snippet_2\n\nLANGUAGE: HTTP\nCODE:\n```\nHTTP/1.1 200 OK\nContent-Type: application/json;charset=UTF-8\n```\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"sub\": \"248289761001\",\n    \"name\": \"Jane Doe\",\n    \"given_name\": \"Jane\",\n    \"family_name\": \"Doe\",\n    \"preferred_username\": \"j.doe\",\n    \"email\": \"janedoe@example.com\"\n}\n```\n\n----------------------------------------\n\nTITLE: Parameterized Access Policy Definition in FHIR JSON\nDESCRIPTION: This access policy defines a template that can be instantiated with different values for variables. It grants access to Patient and DiagnosticReport resources filtered by the relevant organizations, using the `%provider_organization` variable.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/access/access-policies.md#_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"resourceType\": \"AccessPolicy\",\n  \"id\": \"123\",\n  \"name\": \"Parameterized Access Policy\",\n  \"resource\": [\n    {\n      \"resourceType\": \"Patient\",\n      \"criteria\": \"Patient?organization=%provider_organization\"\n    },\n    {\n      \"resourceType\": \"DiagnosticReport\",\n      \"criteria\": \"DiagnosticReport?performer=%provider_organization\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: DiagnosticReport with Observations TypeScript\nDESCRIPTION: This TypeScript code demonstrates how to execute the GraphQL query for retrieving a DiagnosticReport with its associated Observation resources. It shows how to use the Medplum client to fetch the DiagnosticReport and its nested Observations.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/graphql/basic-queries.mdx#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n{ExampleCode}\n```\n\n----------------------------------------\n\nTITLE: Revert Resource to Previous Version (Typescript)\nDESCRIPTION: Illustrates how to revert a resource to a previous version using `readHistory` and `readVersion` from the Medplum SDK. This involves fetching the desired version from the history and then updating the current resource with that version's data.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/fhir-datastore/resource-history.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { MedplumClient, Resource } from '@medplum/core';\nimport { Patient } from '@medplum/fhirtypes';\n\nasync function revertChanges(medplum: MedplumClient, patientId: string, versionId: string): Promise<void> {\n  // Get the resource history\n  const history = await medplum.readHistory('Patient', patientId);\n\n  // Find the version you want to revert to\n  const version = await medplum.readVersion<Patient>('Patient', patientId, versionId);\n\n  // Update the current resource to be the version\n  await medplum.updateResource(version);\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Bot Handler Function Typescript\nDESCRIPTION: This code snippet initializes a basic bot handler function in TypeScript. It imports necessary types from the `@medplum/core` package and defines an asynchronous function named `handler` that accepts a `MedplumClient` and a `BotEvent` as arguments. The function returns a `Promise<any>`, allowing asynchronous operations. This function serves as the entry point for the bot's logic.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/bots/bot-basics.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { BotEvent, MedplumClient } from '@medplum/core';\n\nexport async function handler(medplum: MedplumClient, event: BotEvent): Promise<any> {\n  // Your code here\n}\n```\n\n----------------------------------------\n\nTITLE: Multiple Chained Parameters (Observation by Encounter and Practitioner) - cURL\nDESCRIPTION: This bash snippet demonstrates how to chain multiple parameters via a cURL command to search for Observation resources linked to an Encounter done by a service provider with the name 'Kaiser'.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/search/chained-search.md#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ncurl -s -H \"Authorization: Bearer $MEDPLUM_CLIENT_ID\" \\\n  \"https://api.medplum.com/fhir/R4/Observation?encounter.service-provider.name=Kaiser\" | jq\n```\n\n----------------------------------------\n\nTITLE: ImplementationGuide Resource Definition (JSON)\nDESCRIPTION: This JSON snippet represents the structure of the ImplementationGuide resource definition. It defines the properties and search parameters associated with the ImplementationGuide, providing a schema for its elements and how to query for instances of this resource.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/api/fhir/resources/implementationguide.mdx#_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\ndefinition.properties.filter((p) => !(p.inherited && p.base.includes('Resource')))\ndefinition.searchParameters\ndefinition.properties.filter((p) => p.inherited && p.base.includes('Resource'))\n```\n\n----------------------------------------\n\nTITLE: Custom Email Bot with UserSecurityRequest - Typescript\nDESCRIPTION: This code snippet showcases a Medplum Bot implemented in Typescript that processes new `UserSecurityRequest` resources. The bot constructs and sends a custom email message to the user, handling both welcome and password reset scenarios. It requires the 'email' project feature flag to be enabled. The code utilizes the Medplum SDK for interacting with FHIR resources and sending emails.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/auth/custom-emails.mdx#_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\n{ExampleCode}\n```\n\n----------------------------------------\n\nTITLE: Patient with Related Encounters TypeScript\nDESCRIPTION: This TypeScript code demonstrates how to execute the GraphQL query for retrieving a Patient with related Encounter resources. It utilizes the Medplum client to perform the reverse-reference search and fetch the associated Encounters.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/graphql/basic-queries.mdx#_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\n{ExampleCode}\n```\n\n----------------------------------------\n\nTITLE: Simple Chained Search (Observation by Patient Name) - CLI\nDESCRIPTION: This bash snippet demonstrates how to search for Observation resources linked to a Patient with the name 'homer' using the `patient.name=homer` syntax via the Medplum CLI.  It shows how to construct the appropriate API request.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/search/chained-search.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmedplum search Observation --patient.name homer\n```\n\n----------------------------------------\n\nTITLE: HL7 to FHIR Bot Implementation (TypeScript)\nDESCRIPTION: This TypeScript code defines a Medplum Bot that receives HL7 messages, parses them, and creates corresponding FHIR Patient resources. It handles HL7 ADT messages, extracts patient information, and ensures that a patient with the same MRN is not created twice.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/bots/hl7-into-fhir.mdx#_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\nimport {\n  HL7Message,\n  MedplumClient,\n  createReference,\n  normalizeErrorString,\n  Reference,\n  ResourceType,\n} from '@medplum/core';\nimport { Patient } from '@medplum/fhirtypes';\n\n/**\n * Medplum Bot to process HL7 ADT messages and create FHIR Patient resources.\n * @param medplum - Medplum client.\n * @param event - Event data from the Medplum server.\n * @returns - An ACK message to the EHR.\n */\nexport async function handler(medplum: MedplumClient, event: any): Promise<any> {\n  const hl7MessageText = event.input;\n  try {\n    const hl7 = new HL7Message(hl7MessageText);\n\n    // Extract data from the HL7 message\n    const mrnNumber = hl7.get('PID', 3, 1);\n    const firstName = hl7.get('PID', 5, 1);\n    const lastName = hl7.get('PID', 5, 0);\n    const birthDate = hl7.get('PID', 7);\n    const gender = hl7.get('PID', 8);\n\n    // Check if the patient already exists\n    const patientSearchResult = await medplum.search('Patient', {\n      identifier: `mrn|${mrnNumber}`,\n    });\n\n    if (patientSearchResult.entry?.length) {\n      const patient = patientSearchResult.entry[0].resource as Patient;\n      console.log(`Patient already exists: ${patient.id}`);\n\n      // Acknowledge the message\n      return `MSH|^~\\\\&|CL|PDMT|Primary||${new Date().toISOString()}||ACK|${Date.now()}|P|2.5.1\\rMSA|AA|${\n        hl7.messageControlId\n      }|OK`;\n    }\n\n    // Create a new patient\n    const patient: Patient = {\n      resourceType: 'Patient',\n      identifier: [\n        {\n          type: {\n            coding: [\n              {\n                system: 'http://terminology.hl7.org/CodeSystem/v2-0203',\n                code: 'MR',\n              },\n            ],\n            text: 'Medical Record Number',\n          },\n          value: mrnNumber,\n        },\n      ],\n      name: [\n        {\n          family: lastName,\n          given: [firstName],\n        },\n      ],\n      birthDate,\n      gender,\n    };\n\n    const outcome = await medplum.create(patient);\n\n    console.log(`Created patient: ${outcome.id}`);\n\n    // Acknowledge the message\n    return `MSH|^~\\\\&|CL|PDMT|Primary||${new Date().toISOString()}||ACK|${Date.now()}|P|2.5.1\\rMSA|AA|${\n      hl7.messageControlId\n    }|OK`;\n  } catch (err) {\n    console.log('HL7 processing error', err, hl7MessageText);\n    return `MSH|^~\\\\&|CL|PDMT|Primary||${new Date().toISOString()}||ACK|${Date.now()}|P|2.5.1\\rMSA|AE|${\n      event.messageControlId\n    }|${normalizeErrorString(err)}`;\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: HMAC Signature Verification (TypeScript/Express)\nDESCRIPTION: This TypeScript snippet demonstrates how to verify an HMAC signature in an Express.js webhook handler. It retrieves the secret, calculates the expected signature using SHA-256, and compares it with the signature received in the 'x-signature' header.  It requires the 'crypto' module.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/subscriptions/subscription-extensions.md#_snippet_8\n\nLANGUAGE: TypeScript\nCODE:\n```\napp.post('/webhook', (req, res) => {\n  const secret = '...'; // Created separately\n  const signature = crypto.createHmac('sha256', secret).update(JSON.stringify(req.body)).digest('hex');\n  console.log('Signature:', req.headers['x-signature']);\n  console.log('Expected:', signature);\n  console.log('Received:', req.body);\n  res.sendStatus(200);\n});\n```\n\n----------------------------------------\n\nTITLE: Get Patient and Related Persons Modeled as Patient (TypeScript)\nDESCRIPTION: This TypeScript example extends the previous example to handle cases where RelatedPerson links are represented as Patient resources. It uses _revinclude and _revinclude:iterate to retrieve both the initial RelatedPerson and then the linked Patient resources. The example depends on the Medplum client library.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/search/includes.mdx#_snippet_11\n\nLANGUAGE: TypeScript\nCODE:\n```\n{ExampleCode}\n```\n\n----------------------------------------\n\nTITLE: Create Encounters and ClinicalImpressions Batch Transaction (TypeScript)\nDESCRIPTION: This snippet demonstrates using a batch request, where each entry is a two-operation transaction to create the Encounter and dependent ClinicalImpression. This ensures that the Encounter and ClinicalImpression are created together, maintaining data integrity.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/migration/migration-pipelines.md#_snippet_6\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport ExampleCode from '!!raw-loader!@site/../examples/src/migration/migration-pipelines.ts';\n<MedplumCodeBlock language=\"ts\" selectBlocks=\"create-encounters-and-impressions-batch-transaction\">\n    {ExampleCode}\n</MedplumCodeBlock>\n```\n\n----------------------------------------\n\nTITLE: Validate Code Example Request (Bash)\nDESCRIPTION: This snippet demonstrates how to use `curl` to validate a code against a CodeSystem using the `$validate-code` operation. The request includes the `url` parameter to specify the CodeSystem and the `code` parameter to specify the code to validate. It requires setting the `Authorization` header with a valid access token.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/api/fhir/operations/codesystem-validate-code.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl 'https://api.medplum.com/fhir/R4/CodeSystem/$validate-code' \\\n  --get \\\n  -H \"Authorization: Bearer $MY_ACCESS_TOKEN\" \\\n  -d 'url=http://snomed.info/sct' \\\n  -d 'code=255604002'\n```\n\n----------------------------------------\n\nTITLE: Minimal HL7 Transformation Bot (JavaScript)\nDESCRIPTION: This JavaScript snippet defines a minimal Medplum Bot that accepts HL7 messages and returns an acknowledgment (ACK).  It uses the `@medplum/core` library for Medplum client and HL7 message handling. This bot serves as a starting point for more complex HL7 transformation logic. It requires the `@medplum/core` package.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/agent/index.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { BotEvent, Hl7Message, MedplumClient } from '@medplum/core';\n\nexport async function handler(medplum: MedplumClient, event: BotEvent<Hl7Message>): Promise<Hl7Message> {\n  return event.input.buildAck();\n}\n```\n\n----------------------------------------\n\nTITLE: Expand ValueSet via cURL\nDESCRIPTION: This cURL command expands a ValueSet by its URL. It retrieves all values for the administrative-gender ValueSet.  The Content-Type header specifies that the request expects FHIR JSON, and the Authorization header includes a Bearer token for authentication. The command outputs the expanded ValueSet in JSON format.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/api/fhir/operations/valueset-expand.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl 'https://api.medplum.com/fhir/R4/ValueSet/$expand?url=http%3A%2F%2Fhl7.org%2Ffhir%2FValueSet%2Fadministrative-gender' \\\n  -H \"Content-Type: application/fhir+json\" \\\n  -H \"Authorization: Bearer MY_ACCESS_TOKEN\"\n```\n\n----------------------------------------\n\nTITLE: Conditional Upsert using cURL\nDESCRIPTION: This snippet shows how to perform a conditional update using a cURL command. It uses a PUT request with a search query in the URL to either create a new resource if none are found or update an existing resource if one is found. It demonstrates idempotency of the data migration pipeline using cURL.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/migration/migration-pipelines.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nimport ExampleCode from '!!raw-loader!@site/../examples/src/migration/migration-pipelines.ts';\n<MedplumCodeBlock language=\"bash\" selectBlocks=\"curl-upsert\">\n      {ExampleCode}\n    </MedplumCodeBlock>\n```\n\n----------------------------------------\n\nTITLE: Token Exchange with PKCE - Response\nDESCRIPTION: Sample response for a successful token exchange with PKCE. The response contains `access_token`, `refresh_token`, `id_token`, `token_type`, and `expires_in` in JSON format. The `Content-Type` header is set to `application/json`.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/api/oauth/token.md#_snippet_6\n\nLANGUAGE: JSON\nCODE:\n```\nHTTP/1.1 200 OK\nContent-Type: application/json\n\n{\n    \"access_token\":\"eyJz9sdfsdfsdfsd\",\n    \"refresh_token\":\"dn43ud8uj32nk2je\",\n    \"id_token\":\"dmcxd329ujdmkemkd349r\",\n    \"token_type\":\"Bearer\",\n    \"expires_in\":3600\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring External Secrets (JavaScript)\nDESCRIPTION: Illustrates how to configure external secrets using a JSON object with system, key, and type properties. This allows loading config parameters from external providers like AWS Parameter Store.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/self-hosting/config-settings.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"system\": \"<system_name>\", // can be one of: [\"aws_ssm_parameter_store\"]\n  \"key\": \"<key_to_access_secret>\", // the key to access the secret at\n  \"type\": \"<string | number | boolean>\" // the primitive data type for the secret, used for coercing strings to native primitive types\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Secrets in Medplum Bot (TypeScript)\nDESCRIPTION: This code snippet demonstrates how to access secrets stored in a Medplum project within a bot handler. It retrieves a secret named 'MY_API_KEY' from the `event.secrets` object and logs its value.  The bot requires the `@medplum/core` package.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/bots/bot-secrets.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { BotEvent, MedplumClient } from '@medplum/core';\nexport async function handler(medplum: MedplumClient, event: BotEvent): Promise<any> {\n  // Print one secret\n  console.log(`Secret: ${event.secrets['MY_API_KEY'].valueString}`);\n  return true;\n}\n\n// Output: 'Secret: 123456'\n```\n\n----------------------------------------\n\nTITLE: Prepare Invite JSON Access Policy Payload\nDESCRIPTION: Prepares a JSON payload for inviting a user to a project with a specified AccessPolicy.  This JSON is sent to the `/invite` endpoint.  No external dependencies are required. The expected output is a JSON string including an `access` property containing the `AccessPolicy` details.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/auth/user-management-guide/user-management-guide.md#_snippet_26\n\nLANGUAGE: typescript\nCODE:\n```\n{ExampleCode}\n```\n\n----------------------------------------\n\nTITLE: Parse QuestionnaireResponse with getQuestionnaireAnswers - TypeScript\nDESCRIPTION: This code snippet demonstrates how to use the `getQuestionnaireAnswers` utility function to parse a `QuestionnaireResponse` object and extract the answers to individual questions. It reads answers from the response using linkIds and assigns them to variables, providing default values if answers are missing.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/bots/bot-for-questionnaire-response/bot-for-questionnaire-response.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// Use the getQuestionnaireAnswers utility function to convert the response into\n// a map of [linkId, answer] pairs.\nconst response = event.input as QuestionnaireResponse;\nconst answers = getQuestionnaireAnswers(response);\n\n// Read out the the user's answers into separate variables\n// Here we provide default answers if the user's answer is 'undefined'\nconst firstName = answers['firstName']?.valueString || '';\nconst lastName = answers['lastName']?.valueString || '';\nconst email = answers['email']?.valueString || 'No Email Given';\nconst phone = answers['phone']?.valueString || 'No Phone Number Given';\nconst reasonForVisiting = answers['reasonForVisit']?.valueString || 'No Reason Given';\n```\n\n----------------------------------------\n\nTITLE: Reverse Chained Search (Patient with High Heart Rate Observation) - Typescript\nDESCRIPTION: This Typescript snippet demonstrates a reverse chained search to find Patient resources with an Observation of a high heart rate (Loinc Code 8867-4). It uses the `_has` parameter.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/search/chained-search.md#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { MedplumClient } from '@medplum/core';\n\nasync function reverseChainedSearchTs(medplum: MedplumClient) {\n  const bundle = await medplum.search('Patient', {\n    '_has:Observation:subject:code=8867-4': '',\n  });\n  console.log(bundle);\n}\n```\n\n----------------------------------------\n\nTITLE: Invoke $resend Operation in TypeScript\nDESCRIPTION: This TypeScript code snippet shows how to use the Medplum client to invoke the `$resend` operation on a FHIR resource.  It requires a MedplumClient instance initialized and authenticated. The code constructs the URL and then uses `medplum.post` to send the request with options for verbose logging, interaction type, and a specific subscription ID.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/api/fhir/operations/resend.md#_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\nconst medplum = new MedplumClient();\n// auth...\nawait medplum.post(medplum.fhirUrl(<resourceType>, <id>, '$resend'), {\n  verbose: true,\n  interaction: 'update',\n  subscription: 'Subscription/123'\n});\n```\n\n----------------------------------------\n\nTITLE: Invoke $resend Operation using CLI\nDESCRIPTION: This code snippet demonstrates how to trigger the `$resend` operation using the Medplum CLI. It assumes the user is already logged in via `medplum login`. The command constructs the URL with the resource type and ID, followed by the `$resend` operation.  It posts a JSON payload specifying the options for verbose logging, interaction type, and a specific subscription ID.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/api/fhir/operations/resend.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmedplum login\nmedplum post '<resourceType>/<id>/$resend' {\"verbose\":\"true\",\"interaction\":\"update\",\"subscription\":\"Subscription/123\"}\n```\n\n----------------------------------------\n\nTITLE: Creating a CodeSystem in FHIR (JavaScript)\nDESCRIPTION: This snippet demonstrates how to create a CodeSystem resource in FHIR to define a set of available codes. The CodeSystem resource contains a canonical URL and a list of concepts with their codes and display names. The `content` property is set to `complete` to indicate that all codes are included directly in the resource.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/terminology/local-codes.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"resourceType\": \"CodeSystem\",\n  \"url\": \"http://example.com/CodeSystem/local-medications\",\n  \"status\": \"active\",\n  \"content\": \"complete\",\n  \"concept\": [\n    { \"code\": \"AB\", \"display\": \"Albuterol\" },\n    { \"code\": \"AC\", \"display\": \"Acetominophen\" },\n    { \"code\": \"AL\", \"display\": \"Alanine\" },\n    { \"code\": \"AS\", \"display\": \"Aspirin\" },\n    { \"code\": \"AX\", \"display\": \"Amoxicillin\" },\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Create Binary using Medplum SDK\nDESCRIPTION: This TypeScript code snippet shows how to create a FHIR Binary resource using the Medplum SDK's `createBinary` function. It assumes that you have the Medplum SDK installed and a valid Medplum client instance. The `data` parameter can be a string, File, Blob, or Uint8Array. The function returns a Promise that resolves to the created Binary resource.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/fhir-datastore/binary-data.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { MedplumClient } from '@medplum/core';\n\nasync function createBinary(medplum: MedplumClient, data: string | File | Blob | Uint8Array, contentType: string): Promise<Binary> {\n  return medplum.createBinary({ contentType, data });\n}\n```\n\n----------------------------------------\n\nTITLE: Reading FHIR Resource via cURL\nDESCRIPTION: Illustrates how to read a FHIR resource using a cURL command.  Requires the Medplum API URL and a valid access token.  The resource type and ID are included in the URL.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/fhir-datastore/reading-data.md#_snippet_2\n\nLANGUAGE: string\nCODE:\n```\ncurl --header \"Authorization: Bearer $MEDPLUM_CLIENT_SUPER_ADMIN_TOKEN\" https://api.medplum.com/fhir/R4/Patient/example-patient\n```\n\n----------------------------------------\n\nTITLE: RiskAssessment Example\nDESCRIPTION: This code snippet demonstrates how to represent a potential duplicate patient record using a FHIR `RiskAssessment` resource.  It includes fields such as `probabilityDecimal`, `qualitativeRisk`, `method`, `code`, `subject`, and `basis` to describe the likelihood and characteristics of the potential match. The example is written in Typescript.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/fhir-datastore/patient-deduplication/matching.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n/* eslint-disable @typescript-eslint/no-explicit-any */\n/*\n * Example code that accompanies the main tutorial.\n * It is hidden on the live site, but is used by documentation tools.\n */\n\nimport { createReference } from '@medplum/core';\nimport { Practitioner, Patient, Observation, Resource, RiskAssessment, List } from '@medplum/fhirtypes';\n\nexport function dupedPatientAssessment(patient1: Patient, patient2: Patient): RiskAssessment {\n  return {\n    resourceType: 'RiskAssessment',\n    status: 'completed',\n    code: {\n      coding: [\n        {\n          system: 'https://medplum.com/fhir/CodeSystem/duplicate-record',\n          code: 'duplicate-patient',\n          display: 'Duplicate Patient'\n        }\n      ],\n      text: 'Duplicate Patient'\n    },\n    subject: createReference(patient1),\n    basis: [createReference(patient2)],\n    occurrenceDateTime: new Date().toISOString(),\n    method: 'email - phone-number - last-name - gender - dob',\n    probabilityDecimal: 85.0,\n    qualitativeRisk: 'Very likely'\n  }\n}\n\nexport function doNotMatch(patient: Patient, patientsNotToMatch: Patient[]): List {\n  return {\n    resourceType: 'List',\n    status: 'current',\n    mode: 'working',\n    code: {\n      coding: [\n        {\n          system: 'https://medplum.com/fhir/CodeSystem/do-not-match',\n          code: 'do-not-match',\n          display: 'Do Not Match'\n        }\n      ],\n      text: 'Do Not Match'\n    },\n    subject: createReference(patient),\n    entry: patientsNotToMatch.map(p => ({\n      item: createReference(p)\n    }))\n  }\n}\n\nexport function createPractitioner(): Practitioner {\n  return {\n    resourceType: 'Practitioner',\n    name: [\n      {\n        family: 'Care Provider',\n        given: ['Example']\n      }\n    ]\n  }\n}\n\nexport function createPatient(): Patient {\n  return {\n    resourceType: 'Patient',\n    name: [\n      {\n        family: 'Patient',\n        given: ['Example']\n      }\n    ],\n    gender: 'female',\n    birthDate: '1990-01-01'\n  }\n}\n\nexport function createObservation(): Observation {\n  return {\n    resourceType: 'Observation',\n    status: 'final',\n    code: {\n      coding: [\n        {\n          system: 'http://loinc.org',\n          code: '8310-5',\n          display: 'Body temperature'\n        }\n      ],\n      text: 'Body temperature'\n    },\n    subject: {\n      reference: 'Patient/example'\n    },\n    effectiveDateTime: new Date().toISOString(),\n    valueQuantity: {\n      value: 37.0,\n      unit: 'C'\n    }\n  }\n}\n\nexport function createResource<T extends Resource>(resource: T): T {\n  return resource;\n}\n```\n\n----------------------------------------\n\nTITLE: Patching a Resource using CLI\nDESCRIPTION: This snippet demonstrates how to patch a resource using the Medplum CLI. It requires appropriate authorization, the resource ID, and a patch body specifying the changes to apply.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/fhir-datastore/updating-data.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n/* selectBlocks: patchCli */\n\n```\n\n----------------------------------------\n\nTITLE: Initiate Group FHIR Export with curl\nDESCRIPTION: This command initiates a Bulk Data Export for a specific Group of patients in Medplum. It uses an HTTP GET request with the Group ID and requires an access token for authorization. The `_outputFormat=ndjson` parameter specifies the desired output format.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/api/fhir/operations/bulk-fhir.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl 'https://api.medplum.com/fhir/R4/Group/<GROUP_ID>/$export?_outputFormat=ndjson' \\\n  -H 'Authorization: Bearer <ACCESS_TOKEN>'\n```\n\n----------------------------------------\n\nTITLE: Setting Google Client ID in SignInForm React Component\nDESCRIPTION: This snippet demonstrates how to set the Google Client ID in the Medplum React Component SignInForm. It utilizes an environment variable to securely pass the Google Client ID to the component. The onSuccess prop handles navigation after successful sign-in.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/auth/methods/google-auth.md#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n<SignInForm onSuccess={() => navigate('/')?.catch(console.error)} googleClientId={process.env.GOOGLE_CLIENT_ID}>\n  <Logo size={32} />\n  <h1>Sign in to Foo Medical</h1>\n</SignInForm>\n```\n\n----------------------------------------\n\nTITLE: Handling MedplumClient Lifecycle in React\nDESCRIPTION: This code snippet demonstrates how to use the `useMedplumProfile` hook and `medplum.isLoading()` to handle the MedplumClient lifecycle within a React application. It guards against initial load, redirects users to the sign-in page when the profile is not available, and renders the main application component.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/react/lifecycle-events.mdx#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nfunction App() {\n  const profile = useMedplumProfile();\n  const navigate = useNavigate();\n\n  // Use this to guard against initial load\n  // After initial load, this code path will always be skipped over\n  if (medplum.isLoading()) {\n    return <Loading />;\n  }\n\n  // Use this if you want to unmount the entire app and show a spinner when your profile changes\n  // This will cause remount on switching profiles\n  // Or an unmount whenever token refresh fails and a profile is no longer present\n  if (!profile) {\n    // Redirect users back to signin whenever there is no profile anytime after initial load\n    navigate('/signin');\n    return null;\n  }\n\n  return <RestOfYourApp />;\n}\n```\n\n----------------------------------------\n\nTITLE: Get Patient by ID GraphQL Query\nDESCRIPTION: This GraphQL query retrieves a Patient resource by its ID, selecting the resourceType, id, name, and address fields. It demonstrates a basic FHIR GraphQL query for fetching specific elements of a resource.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/graphql/basic-queries.mdx#_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\n{ExampleCode}\n```\n\n----------------------------------------\n\nTITLE: Search Patients by Name and City GraphQL Query\nDESCRIPTION: This GraphQL query searches for Patient resources by name and city, demonstrating how to perform FHIR searches using the GraphQL API. It uses snake_case for the search parameters (name and address-city) and aliases the result as `patients`.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/graphql/basic-queries.mdx#_snippet_4\n\nLANGUAGE: graphql\nCODE:\n```\n{ExampleCode}\n```\n\n----------------------------------------\n\nTITLE: Example ClientApplication Response\nDESCRIPTION: This code snippet showcases the structure of a typical response returned after successfully creating a ClientApplication. It includes metadata, resource type, name, ID, secret, description, and redirect URI. The `projectId`, `clientId`, and `clientSecret` values are placeholders and will be populated with actual values upon successful creation.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/api/project-admin/client.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  meta: {\n    project: ':projectId',\n    //...\n  },\n  resourceType: 'ClientApplication',\n  name: 'Hello World Client',\n  id: ':clientId',\n  secret: ':clientSecret',\n  description: 'Client App for Medplum Hello World',\n  redirectUri: 'https://example.com/redirect'\n}\n```\n\n----------------------------------------\n\nTITLE: Hierarchical CodeSystem in FHIR (JavaScript)\nDESCRIPTION: This snippet illustrates how to represent hierarchical relationships between codes in a CodeSystem resource.  Codes are nested within each other to indicate parent-child relationships.  The `hierarchyMeaning` property is set to `is-a` to specify the type of hierarchy. The `content` property is set to `complete` to indicate that all codes are included directly in the resource.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/terminology/local-codes.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"resourceType\": \"CodeSystem\",\n  \"url\": \"http://example.com/CodeSystem/local-medications\",\n  \"status\": \"active\",\n  \"hierarchyMeaning\": \"is-a\",\n  \"content\": \"complete\",\n  \"concept\": [\n    { \"code\": \"AB\", \"display\": \"Antibiotics\", \"concept\": [\n      { \"code\": \"AX\", \"display\": \"Amoxicillin\" },\n    ] },\n    { \"code\": \"AN\", \"display\": \"Analgesics\", \"concept\": [\n      { \"code\": \"AC\", \"display\": \"Acetominophen\" },\n      { \"code\": \"AS\", \"display\": \"Aspirin\" },\n    ]}\n    { \"code\": \"AM\", \"display\": \"Amino acids\", \"concept\": [\n      { \"code\": \"AL\", \"display\": \"Alanine\" },\n    ]}\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: FHIRPath Expression for Specific Name Changes\nDESCRIPTION: This FHIRPath expression compares individual values in the `name` array of a Patient resource to determine if an existing value has been altered or removed. It checks if any values from the previous `name` array are not present in the current `name` array, indicating a change. The expression returns `true` if such a change exists.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/subscriptions/subscription-extensions.md#_snippet_14\n\nLANGUAGE: FHIRPath\nCODE:\n```\n%previous.name.where( ($this in %current.name).not() ).exists()\n```\n\n----------------------------------------\n\nTITLE: Execute Bot by ID (POST) - cURL\nDESCRIPTION: This snippet demonstrates how to execute a Medplum Bot by its ID using cURL. It sends a POST request to the Bot's `$execute` endpoint with a JSON payload and includes the `Content-Type` and `Authorization` headers.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/api/fhir/operations/bot-execute.mdx#_snippet_2\n\nLANGUAGE: cURL\nCODE:\n```\ncurl 'https://api.medplum.com/fhir/R4/Bot/[id]/$execute' \\\n  -X POST \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $MY_ACCESS_TOKEN\" \\\n  -d '{\"foo\":\"bar\"}'\n```\n\n----------------------------------------\n\nTITLE: Linking Communication to Task using basedOn in FHIR (TypeScript)\nDESCRIPTION: This code snippet demonstrates how to link a Communication resource to a Task resource using the `basedOn` property in FHIR. The `basedOn` property establishes that the Communication event was triggered by the specified Task request. This is a canonical way to connect events to the requests that trigger them in FHIR. The example includes the resource type, the reference to the task, the communication status, and the content of the communication.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/blog/2024-12-28-fhir-workflow-patterns-to-simplify-your-life.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  resourceType: \"Communication\",\n  basedOn: [{\n    reference: \"Task/insurance-rejection-123\"\n  }],\n  status: \"completed\",\n  payload: [{\n    contentString: \"Patient's new insurance card received. Resubmitting claim.\"\n  }]\n}\n```\n\n----------------------------------------\n\nTITLE: Invoke Operation via GET with cURL\nDESCRIPTION: This cURL command invokes the ValueSet/$validate-code operation using a GET request. The input parameters (url, system, code) are encoded in the query string.  Note that this is only possible for idempotent operations with simple parameter types.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/api/fhir/operations/index.mdx#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncurl 'https://api.medplum.com/fhir/R4/ValueSet/$validate-code' \\\n  --get \\\n  -H \"Authorization: Bearer $MY_ACCESS_TOKEN\" \\\n  -d 'url=http://hl7.org/fhir/ValueSet/condition-severity' \\\n  -d 'system=http://snomed.info/sct' \\\n  -d 'code=255604002'\n```\n\n----------------------------------------\n\nTITLE: Token Exchange with Client Credentials - Request\nDESCRIPTION: Sample request for exchanging client credentials for an access token using the `client_credentials` grant type. The request includes `grant_type` and `scope` parameters in the request body. The `Authorization` header is also present.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/api/oauth/token.md#_snippet_3\n\nLANGUAGE: HTTP\nCODE:\n```\nPOST https://api.medplum.com/oauth2/token\n    Content-Type='application/x-www-form-urlencoded'&\n    Authorization=Basic aSdxd892iujendek328uedj\n\ngrant_type=client_credentials&\nscope=openid\n```\n\n----------------------------------------\n\nTITLE: Representing Dispense Instructions in MedicationRequest (FHIR)\nDESCRIPTION: This code snippet demonstrates how to represent dispense instructions within a MedicationRequest resource in FHIR using TypeScript. It leverages the `dispenseRequest` field to specify details such as initial fill, quantity, dispense interval, validity period, number of repeats allowed, and expected supply duration. The code assumes the existence of a constant `ExampleCode` containing the full example.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/medications/representing-prescriptions-and-medication-orders.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n{ExampleCode}\n```\n\n----------------------------------------\n\nTITLE: Create PDF with Medplum Bot (Binary and Media)\nDESCRIPTION: This code snippet demonstrates how to create a PDF file using a Medplum Bot, storing it as a FHIR `Binary` resource, and then creating a `Media` resource with the PDF as content. It utilizes the pdfmake library for defining the PDF document structure.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/bots/creating-a-pdf.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n{ExampleCode}\n```\n\n----------------------------------------\n\nTITLE: Search CareTeam Members for Patient (cURL)\nDESCRIPTION: This cURL example shows how to search for a Patient's CareTeam members. The example uses _revinclude to find the CareTeam associated with the Patient and _include:iterate to retrieve the members of the CareTeam (Practitioners and Organizations). The example requires a cURL installation and access to the Medplum API.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/search/includes.mdx#_snippet_19\n\nLANGUAGE: bash\nCODE:\n```\n{ExampleCode}\n```\n\n----------------------------------------\n\nTITLE: Obtain OAuth2 Token using Python\nDESCRIPTION: This Python function `get_auth_token` sends a POST request to the specified URL to obtain an access token using the Client Credentials Flow. It takes the token endpoint URL, client ID, and client secret as input, encodes the client ID and secret in the request body, and returns the access token from the JSON response. The `requests` library is required.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/auth/methods/client-credentials.md#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndef get_auth_token(url, client_id, client_secret):\n\n  # Encode the client ID and client secret\n  headers = {\n      \"Content-Type\": \"application/x-www-form-urlencoded\"\n  }\n  body = {\n      \"grant_type\": \"client_credentials\",\n      \"client_id\": client_id,\n      \"client_secret\": client_secret\n  }\n\n  response = requests.post(url, data=body, headers=headers)\n  return response.json()['access_token']\n```\n\n----------------------------------------\n\nTITLE: Bot Handler Function with Patient Input Typescript\nDESCRIPTION: This code snippet demonstrates a bot handler function that processes a `Patient` resource as input. It imports the `Patient` type from `@medplum/fhirtypes`.  The `event.input` is cast to a `Patient` type for type safety. The code extracts the patient's first and last name from the `Patient` object and logs a greeting message to the console.  Finally, the function returns `true` indicating successful execution.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/bots/bot-basics.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { BotEvent, MedplumClient } from '@medplum/core';\nimport { Patient } from '@medplum/fhirtypes';\n\nexport async function handler(medplum: MedplumClient, event: BotEvent): Promise<any> {\n  const patient = event.input as Patient;\n  const firstName = patient.name?.[0]?.given?.[0];\n  const lastName = patient.name?.[0]?.family;\n  console.log(`Hello ${firstName} ${lastName}!`);\n  return true;\n}\n```\n\n----------------------------------------\n\nTITLE: Batch Create Resources Example\nDESCRIPTION: Demonstrates how to create multiple resources in one batch request using Typescript. The full code is available in the ExampleCode variable.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/fhir-datastore/fhir-batch-requests.mdx#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n{ExampleCode}\n```\n\n----------------------------------------\n\nTITLE: Modeling Medical License FHIR Resource TypeScript\nDESCRIPTION: This code snippet demonstrates how to model a medical license using the FHIR Practitioner resource. It uses the Practitioner.qualifications array to store the license information, including the degree code, issuer, and jurisdiction. The example uses the HL7 degreeLicenseCertificate code system and the Davinci PDEX practitioner-qualification extension.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/administration/provider-directory/provider-credentials.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst practitioner = {\n  resourceType: 'Practitioner',\n  id: 'example',\n  name: [\n    {\n      family: 'Smith',\n      given: ['John']\n    }\n  ],\n  // highlight-start\n  qualification: [\n    {\n      // highlight-start\n      code: {\n        coding: [\n          {\n            system: 'http://terminology.hl7.org/CodeSystem/v2-0360',\n            code: 'MD',\n            display: 'Medical Doctor'\n          }\n        ],\n        text: 'Medical Doctor'\n      },\n      issuer: {\n        display: 'State of New York'\n      },\n      extension: [\n        {\n          url: 'http://hl7.org/fhir/us/davinci-pdex-plan-net/StructureDefinition/qualification',\n          extension: [\n            {\n              url: 'whereValid',\n              valueCode: 'NY'\n            }\n          ]\n        }\n      ]\n      // highlight-end\n    }\n  ]\n  // highlight-end\n};\n\n```\n\n----------------------------------------\n\nTITLE: AccessPolicy to Hide Patient Name and Address (JSON)\nDESCRIPTION: This AccessPolicy hides the 'name' and 'address' elements of the 'Patient' resource type.  Even though the user has read access to the 'Patient' resource, 'name' and 'address' will not be included in the response. This is useful to protect sensitive information from certain users.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/access/access-policies.md#_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"resourceType\": \"AccessPolicy\",\n  \"name\": \"Patient Example\",\n  \"resource\": [\n    {\n      \"resourceType\": \"Patient\",\n      \"hiddenFields\": [\"name\", \"address\"]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Access Resource History with Medplum SDK (Typescript)\nDESCRIPTION: Demonstrates how to use the Medplum SDK to access the history of a resource using the `readHistory` helper function. It retrieves all versions of a specific resource.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/fhir-datastore/resource-history.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { MedplumClient } from '@medplum/core';\n\nasync function accessHistoryTs(medplum: MedplumClient, id: string): Promise<void> {\n  const bundle = await medplum.readHistory('Patient', id);\n  console.log(bundle);\n}\n```\n\n----------------------------------------\n\nTITLE: Processing Authentication Code with processCode\nDESCRIPTION: Illustrates how to use the `processCode` method of the `MedplumClient` to exchange the authorization code received from the external identity provider for a Medplum access token. This access token is then stored for subsequent API calls.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/auth/methods/external-identity-providers.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n  {ExampleCode}\n```\n\n----------------------------------------\n\nTITLE: FHIR Bundle Resource Iteration - TypeScript\nDESCRIPTION: Illustrates iterating through the entries of a FHIR Bundle resource to access the individual resources returned by a search. This is a common pattern when working with FHIR search results.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/search/basic-search.mdx#_snippet_2\n\nLANGUAGE: string\nCODE:\n```\nconst bundle = await medplum.search('Patient', {\n  family: 'Doe'\n});\n\nif (bundle.entry) {\n  for (const entry of bundle.entry) {\n    const resource = entry.resource;\n    if (resource) {\n      console.log(resource.resourceType);\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Create Patient Mutation Aliased (GraphQL)\nDESCRIPTION: This GraphQL mutation creates a new Patient resource using an alias for the created resource. It uses the `PatientCreate` mutation and includes example fields for the patient's name and birthDate. The mutation returns the newly created patient resource with the alias.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/graphql/mutations.mdx#_snippet_3\n\nLANGUAGE: graphql\nCODE:\n```\n{ExampleCode}\n```\n\n----------------------------------------\n\nTITLE: Write Constraints Access Policy for Observations (JSON)\nDESCRIPTION: This AccessPolicy implements write constraints on the 'Observation' resource using FHIRPath expressions. It prevents changes to the 'status' field once an observation is marked as 'final' and requires the 'subject' field to be set when the status is finalized. The `%before` variable refers to the resource state before the write.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/access/access-policies.md#_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"resourceType\": \"AccessPolicy\",\n  \"name\": \"Write Constraints Access Policy\",\n  \"resource\": [\n    {\n      \"resourceType\": \"Observation\",\n      \"writeConstraint\": [\n        {\n          \"language\": \"text/fhirpath\",\n          \"expression\": \"%before.exists() implies %before.status != 'final'\"\n        },\n        {\n          \"language\": \"text/fhirpath\",\n          \"expression\": \"status = 'final' implies subject.exists()\"\n        }\n      ]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Upserting a Resource using cURL\nDESCRIPTION: This snippet demonstrates how to upsert a resource using cURL. It requires appropriate authorization, including an access token, and a search query to identify the resource to update or create.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/fhir-datastore/updating-data.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n/* selectBlocks: upsertCurl */\n\n```\n\n----------------------------------------\n\nTITLE: Multiple Chained Parameters (Observation by Encounter and Practitioner) - Typescript\nDESCRIPTION: This Typescript snippet demonstrates how to chain multiple parameters to search for Observation resources linked to an Encounter done by a service provider with the name 'Kaiser'.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/search/chained-search.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { MedplumClient } from '@medplum/core';\n\nasync function multipleChainsTs(medplum: MedplumClient) {\n  const bundle = await medplum.search('Observation', {\n    'encounter.service-provider.name': 'Kaiser',\n  });\n  console.log(bundle);\n}\n```\n\n----------------------------------------\n\nTITLE: Token Exchange with Refresh Token - Request\nDESCRIPTION: Sample request for exchanging a refresh token for tokens using the `refresh_token` grant type. The request includes `grant_type`, `client_id`, and `refresh_token` parameters in the request body. The `Authorization` header is also present.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/api/oauth/token.md#_snippet_7\n\nLANGUAGE: HTTP\nCODE:\n```\nPOST https://api.medplum.com/oauth2/token >\n    Content-Type='application/x-www-form-urlencoded'&\n    Authorization=Basic aSdxd892iujendek328uedj\n\ngrant_type=refresh_token&\nclient_id=492e4ec3-fb66-4b45-b529-599c708ec530&&\nrefresh_token=REFRESH_TOKEN\n```\n\n----------------------------------------\n\nTITLE: Filtering Syntax Example in Medplum (Typescript)\nDESCRIPTION: Demonstrates the syntax for using the `_filter` parameter in a Medplum Typescript application.  This snippet would show how to construct a filter expression programmatically. It requires the Medplum client library.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/search/filter-search-parameter.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n{ExampleCode}\n```\n\n----------------------------------------\n\nTITLE: External (Conditional) Reference Example\nDESCRIPTION: Demonstrates how to create multiple patients that link to the same provider using an external (conditional) reference. This involves populating the reference with a search query string that will be resolved by the Medplum server. The full code is available in the ExampleCode variable.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/fhir-datastore/fhir-batch-requests.mdx#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n{ExampleCode}\n```\n\n----------------------------------------\n\nTITLE: Invite User via API (cURL)\nDESCRIPTION: Invites a user to Medplum using the /invite endpoint. The request includes an Authorization header with a bearer token, a Content-Type header specifying JSON, and the Patient resource data in the request body.  Variables ${baseUrl}, ${projectId}, and ${accessToken} must be replaced with actual values.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/auth/methods/external-ids.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl 'https://${baseUrl}/admin/projects/${projectId}/invite' \\\n  -H 'Authorization: Bearer ${accessToken}' \\\n  -H 'Content-Type: application/json' \\\n  --data-raw '{\"resourceType\":\"Patient\",\"firstName\":\"Homer\",\"lastName\":\"Simpson\",\"externalId\":\"110925489055200000000\"}'\n```\n\n----------------------------------------\n\nTITLE: Customizing Grace Period (TypeScript)\nDESCRIPTION: This code snippet demonstrates how to customize the grace period when initializing the Medplum client. The grace period is the time before token expiration when the client should attempt to refresh the token. The example shows how to set `tokenRefreshGracePeriod` in milliseconds.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/auth/session-management.mdx#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst graceCustomization = (): void => {\n  // 1. Initialize the Medplum client with a custom token refresh grace period.\n  const medplum = new MedplumClient({\n    tokenRefreshGracePeriod: 600000, // 10 minutes\n  });\n  console.log('medplum', medplum);\n};\n\n```\n\n----------------------------------------\n\nTITLE: Medplum POST Request - Create Patient\nDESCRIPTION: Executes a `medplum post` request to create a new patient. The body is a JSON string representing the patient resource.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/cli/index.md#_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nmedplum post Patient '{\"resourceType\":\"Patient\",\"name\":[{\"family\":\"Simpson\"}]}'\n```\n\n----------------------------------------\n\nTITLE: Updating a Resource using cURL\nDESCRIPTION: This snippet demonstrates how to update a resource using cURL. It requires appropriate authorization, including an access token, and knowledge of the resource ID and the data to be updated.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/fhir-datastore/updating-data.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n/* selectBlocks: updateCurl */\n\n```\n\n----------------------------------------\n\nTITLE: Resource Search by Reference - TypeScript\nDESCRIPTION: Shows how to search for resources based on references to other resources.  The example finds all Observations that reference a Patient with ID '1234' using the `getReferenceString` helper function to create the reference string.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/search/basic-search.mdx#_snippet_7\n\nLANGUAGE: string\nCODE:\n```\nimport { getReferenceString } from '@medplum/core';\n\nconst patient = { resourceType: 'Patient', id: '1234' };\nconst patientRef = getReferenceString(patient);\n\nconst observations = await medplum.searchResources('Observation', {\n  subject: patientRef\n});\n\nconsole.log(observations.length);\n```\n\n----------------------------------------\n\nTITLE: Basic Resource Search with Medplum SDK - TypeScript\nDESCRIPTION: Demonstrates a basic resource search using the Medplum Client SDK's `search` method. This method accepts a resource type and search parameters. The result is a FHIR Bundle resource containing query results and metadata. The example showcases searching for a Patient resource by family name.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/search/basic-search.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst bundle = await medplum.search('Patient', {\n  family: 'Doe',\n});\n\nconsole.log(bundle.total);\n\nfor (const entry of bundle.entry ?? []) {\n  console.log(entry.resource);\n}\n```\n\n----------------------------------------\n\nTITLE: Search for Messages in a Specific Thread (CLI)\nDESCRIPTION: This CLI command retrieves all messages belonging to a specific communication thread, identified by its parent `Communication` resource. The command searches for `Communication` resources that have a `partOf` reference to a parent thread, identified by its ID. The results are then sorted by the `sent` field to maintain chronological order within the thread.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/communications/organizing-communications.mdx#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n{ExampleCode}\n```\n\n----------------------------------------\n\nTITLE: Setting up MedplumClient\nDESCRIPTION: Demonstrates how to initialize a `MedplumClient` and wrap your application with `MedplumProvider`. This setup provides the Medplum client instance to all child components, enabling access to Medplum features.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/react-hooks/README.md#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { MedplumClient } from '@medplum/core';\nimport { MedplumProvider } from '@medplum/react';\n\nconst medplum = new MedplumClient();\n\nexport function App() {\n  return (\n    <MedplumProvider medplum={medplum}>\n      <MyPage1 />\n      <MyPage2 />\n      <Etc />\n    </MedplumProvider>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Modeling Medical Specialty FHIR Resource TypeScript\nDESCRIPTION: This code snippet demonstrates how to model a medical specialty using the FHIR Practitioner resource.  It utilizes the Practitioner.qualifications array to represent the specialty, specifying the specialty code from the NUCC provider taxonomy and the issuer as the relevant professional certification board. This example showcases how to represent specialist certifications within FHIR.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/administration/provider-directory/provider-credentials.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst practitioner = {\n  resourceType: 'Practitioner',\n  id: 'example',\n  name: [\n    {\n      family: 'Smith',\n      given: ['John']\n    }\n  ],\n  // highlight-start\n  qualification: [\n    {\n      // highlight-start\n      code: {\n        coding: [\n          {\n            system: 'http://nucc.org/provider-taxonomy',\n            code: '207Q00000X',\n            display: 'Family Medicine'\n          }\n        ],\n        text: 'Family Medicine'\n      },\n      issuer: {\n        display: 'American Board of Family Medicine'\n      }\n      // highlight-end\n    }\n  ]\n  // highlight-end\n};\n\n```\n\n----------------------------------------\n\nTITLE: Requesting Refresh Tokens - Email/Password Login (TypeScript)\nDESCRIPTION: This code snippet demonstrates how to request refresh tokens using email and password login. It requires the `offline_access` or `offline` scope in the authentication request. The code shows the implementation details for handling user credentials and obtaining a refresh token.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/auth/session-management.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst emailPasswordLogin = async (): Promise<void> => {\n  // 1. Register a new user.\n  const registerResult = await medplum.register({\n    firstName: 'Alice',\n    lastName: 'Smith',\n    email: 'alice.smith@example.com',\n    password: 'password123',\n  });\n\n  const registerOutcome = registerResult.outcome;\n  if (!registerOutcome || !registerOutcome.id) {\n    throw new Error('Register failed');\n  }\n\n  // 2. Get the Patient resource.\n  const patient = await medplum.readResource('Patient', registerOutcome.id);\n  console.log('Patient', patient);\n\n  // 3. Login as the new user.\n  // This request includes the \"offline_access\" scope.\n  // Including the \"offline_access\" scope will return a refresh token.\n  const loginResult = await medplum.login({\n    username: 'alice.smith@example.com',\n    password: 'password123',\n    scope: 'offline_access',\n  });\n\n  const accessToken = loginResult.accessToken;\n  const refreshToken = loginResult.refreshToken;\n\n  console.log('accessToken', accessToken);\n  console.log('refreshToken', refreshToken);\n\n  // 4. Check that the user is logged in.\n  const checkResult = await medplum.checkLogin();\n  console.log('checkLogin', checkResult.login);\n\n  // 5. Logout the user.\n  await medplum.logout();\n\n  // 6. Check that the user is logged out.\n  const checkResult2 = await medplum.checkLogin();\n  console.log('checkLogin', checkResult2.login);\n};\n\n```\n\n----------------------------------------\n\nTITLE: Search Resources\nDESCRIPTION: Searches for FHIR resources using the `search` method. It accepts a resource type and a FHIR search string. The `bundle.entry` array will contain the search results.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/core/README.md#_snippet_6\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst bundle = await medplum.search('Patient', 'given=eve');\nbundle.entry.forEach((entry) => console.log(entry.resource));\n```\n\n----------------------------------------\n\nTITLE: Nested Filters Example in Medplum (CLI)\nDESCRIPTION: Demonstrates nested filters with parentheses and logical operators in Medplum (CLI).\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/search/filter-search-parameter.mdx#_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\n{ExampleCode}\n```\n\n----------------------------------------\n\nTITLE: ValueSet Validate Code Request (TypeScript)\nDESCRIPTION: This code snippet is a TypeScript example demonstrating how to perform a ValueSet validation request using the $validate-code operation. It uses the Medplum client library to interact with the FHIR server. The 'ExampleCode' variable is imported from a separate file containing the actual code.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/api/fhir/operations/valueset-validate-code.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport Tabs from '@theme/Tabs';\nimport TabItem from '@theme/TabItem';\n\nimport ExampleCode from '!!raw-loader!@site/../examples/src/api/fhir/operations/operation-framework.ts';\nimport MedplumCodeBlock from '@site/src/components/MedplumCodeBlock';\n```\n\n----------------------------------------\n\nTITLE: ObservationDefinition for Estradiol (TS)\nDESCRIPTION: Defines an ObservationDefinition resource for Estradiol. This resource describes how to represent and interpret Estradiol level measurements.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/careplans/diagnostic-catalog/diagnostic-catalog.mdx#_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\n{ExampleCode}\n```\n\n----------------------------------------\n\nTITLE: Assigning Project Ownership with cURL\nDESCRIPTION: Creates a new project and assigns ownership to a specific user using the `owner` parameter.  The `valueReference` field is used to specify the User resource to be the owner. Requires a valid access token in the `Authorization` header.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/api/fhir/operations/project-init.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncurl 'https://api.medplum.com/fhir/R4/Project/$init' \\\n  -X POST \\\n  -H \"Content-Type: application/fhir+json\" \\\n  -H \"Authorization: Bearer MY_ACCESS_TOKEN\" \\\n  -d '{\"resourceType\":\"Parameters\", \"parameter\":[ {\"name\":\"name\", \"valueString\":\"Test Project\"}, \\\n    {\"name\":\"owner\", \"valueReference\": {\"reference\": \"User/cb5bb36b-fcfa-4c07-8da1-5f3afd8d261d\" } } ]}'\n```\n\n----------------------------------------\n\nTITLE: Merging Identifiers of Two Patient Records\nDESCRIPTION: This code snippet illustrates how to merge the identifiers of two patient records. The details of the implementation would be present in the actual code block. It demonstrates the logic needed to combine the identifying information from multiple patient records into a single, unified record.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/fhir-datastore/patient-deduplication/merging.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  // Example of code to merge identifiers\n}\n```\n\n----------------------------------------\n\nTITLE: FHIR Batch PATCH with Parameters Resource (JavaScript)\nDESCRIPTION: This code demonstrates how to perform a FHIR batch PATCH operation using a Parameters resource. This method makes it easier to see the operations happening in the batch. All values are passed as JSON strings via the `valueString` field on each corresponding `Parameter.parameter.part` with `\"name\": \"value\"`.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/fhir-datastore/fhir-batch-requests.mdx#_snippet_11\n\nLANGUAGE: js\nCODE:\n```\n{\n  \"request\": {\n    \"method\": \"PATCH\",\n    \"url\": \"Patient/6ffaaab4-ff7e-4416-80c7-8fce95c3e31c\"\n  },\n  \"resource\": {\n    \"resourceType\": \"Parameters\",\n    \"parameter\": [\n      {\n        \"name\": \"operation\",\n        \"part\": [\n          { \"name\": \"op\", \"valueCode\": \"test\" },\n          { \"name\": \"path\", \"valueString\": \"/active\" },\n          { \"name\": \"value\", \"valueString\": \"false\" }\n        ]\n      },\n      {\n        \"name\": \"operation\",\n        \"part\": [\n          { \"name\": \"op\", \"valueCode\": \"add\" },\n          { \"name\": \"path\", \"valueString\": \"/name/-\" },\n          // Note that values must be JSON encoded\n          { \"name\": \"value\", \"valueString\": \"{\\\"given\\\":[\\\"Dave\\\"],\\\"family\\\":\\\"Smith\\\"}\" }\n        ]\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Example MeasureReport Resource in JSON\nDESCRIPTION: A FHIR MeasureReport resource representing the result of evaluating a Measure. It includes metadata, status, type, measure URL, date, period, and group information. The population count indicates the number of patients included in the measure.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/api/fhir/operations/evaluate-measure.md#_snippet_2\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"resourceType\": \"MeasureReport\",\n  \"id\": \"b40f97d9-385f-4336-8c6c-8892160a7fa1\",\n  \"meta\": {\n    \"versionId\": \"182948fb-e287-4f05-a313-1d6df883ee0f\",\n    \"lastUpdated\": \"2023-05-15T02:23:22.301Z\"\n  },\n  \"status\": \"complete\",\n  \"type\": \"summary\",\n  \"measure\": \"https://example.com/test-measure\",\n  \"date\": \"2023-05-15T02:23:22.298Z\",\n  \"period\": {\n    \"start\": \"2020-01-01\",\n    \"end\": \"2030-01-01\"\n  },\n  \"group\": [\n    {\n      \"population\": [\n        {\n          \"code\": {\n            \"coding\": [\n              {\n                \"code\": \"measure-population\"\n              }\n            ]\n          },\n          \"count\": 1000\n        }\n      ]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Expand ValueSet with MedplumClient\nDESCRIPTION: This TypeScript code demonstrates how to use the `valueSetExpand` method of the `MedplumClient` to expand a ValueSet.  It requires the `@medplum/core` and `@medplum/fhirtypes` dependencies. The example shows a function calling `medplum.valueSetExpand` with a ValueSet URL and then logging the result.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/api/fhir/operations/valueset-expand.mdx#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n/*\n * Example of ValueSet $expand operation.\n * Demonstrates the \"expand\" option.\n */\n\nimport { MedplumClient } from '@medplum/core';\n\nexport async function valueSetExpandExample(medplum: MedplumClient): Promise<void> {\n  const result = await medplum.valueSetExpand({\n    url: 'http://hl7.org/fhir/ValueSet/administrative-gender',\n  });\n  console.log(result);\n}\n\n```\n\n----------------------------------------\n\nTITLE: Simple Chained Search (Observation by Patient Name) - Typescript\nDESCRIPTION: This Typescript snippet demonstrates how to search for Observation resources linked to a Patient with the name 'homer' using the `patient.name=homer` syntax. It uses Medplum's client library for FHIR interaction.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/search/chained-search.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { MedplumClient } from '@medplum/core';\n\nasync function simpleChainedSearchTs(medplum: MedplumClient) {\n  const bundle = await medplum.search('Observation', {\n    'patient.name': 'homer',\n  });\n  console.log(bundle);\n}\n```\n\n----------------------------------------\n\nTITLE: Automatic Token Refresh Best Practices (TypeScript)\nDESCRIPTION: This snippet highlights best practices for leveraging automatic token refresh. It involves initializing the Medplum client and configuring the grace period according to application needs. Shows how to configure the `MedplumClient` with a specified grace period for automatic token refresh.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/auth/session-management.mdx#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst bestPractices = (): void => {\n  // 1. Initialize the Medplum client.\n  const medplum = new MedplumClient({\n    tokenRefreshGracePeriod: 300000, // 5 minutes\n  });\n  console.log('medplum', medplum);\n};\n\n```\n\n----------------------------------------\n\nTITLE: Create ServiceRequest with FHIR in TypeScript\nDESCRIPTION: This snippet demonstrates how to create a ServiceRequest linked to a Patient using the Medplum API. It includes conditional creation of the patient and a service request for a lab panel.  It uses core imports from the medplum library.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/subscriptions/publish-and-subscribe.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  MedplumClient,\n  createReference,\n  newPatient,\n  randomId,\n  ResourceType,\n  SearchParameter,\n} from '@medplum/core';\nimport {\n  Bundle,\n  Observation,\n  Patient,\n  Reference,\n  RequestGroup,\n  ServiceRequest,\n  Specimen,\n} from '@medplum/fhir';\n\n// core-imports\n\n```\n\nLANGUAGE: typescript\nCODE:\n```\n// create-service-request\nexport async function createServiceRequest(\n  medplum: MedplumClient,\n  patient: Patient\n): Promise<ServiceRequest> {\n  const labPanelServiceRequest: ServiceRequest = {\n    resourceType: 'ServiceRequest',\n    status: 'active',\n    intent: 'order',\n    code: {\n      coding: [\n        {\n          system: 'http://loinc.org',\n          code: 'LP29684-5',\n          display: 'Comprehensive metabolic panel',\n        },\n      ],\n      text: 'Comprehensive metabolic panel',\n    },\n    subject: createReference(patient),\n  };\n\n  return await medplum.create(labPanelServiceRequest);\n}\n\n```\n\n----------------------------------------\n\nTITLE: Upserting a Resource using upsertResource (TypeScript)\nDESCRIPTION: This snippet demonstrates how to upsert a resource using the `upsertResource` method in the Medplum client. It takes a resource and a FHIR search query. If a single matching resource is found, it's updated; if none are found, a new one is created; if multiple are found, an error is returned.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/fhir-datastore/updating-data.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n/* selectBlocks: upsertTs */\n\n```\n\n----------------------------------------\n\nTITLE: Defining a Task Resource Example\nDESCRIPTION: This code snippet shows an example of a FHIR Task resource defined in TypeScript. It illustrates how to set the resource type, ID, code, description, and coding for the task. The code element includes a text description and SNOMED CT coding for the task.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/careplans/tasks/tasks.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  resourceType: 'Task',\n  id: 'example-task',\n  code: {\n    text: 'Complete PHQ-9',\n    coding: [{\n      code: '715252007',\n      system: 'http://snomed.info/sct'\n    }]\n  },\n  description: \"Patient to complete PHQ-9 depression screening\",\n  //...\n}\n```\n\n----------------------------------------\n\nTITLE: Combined Forward and Reverse Chained Search (Patient with Observation by CareTeam) - CLI\nDESCRIPTION: This bash snippet demonstrates a combined forward and reverse chained search to find Patient resources with an Observation performed by a CareTeam that has a member named 'bob' using the Medplum CLI.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/search/chained-search.md#_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\nmedplum search Patient --_has:Observation:subject:performer.member.name bob\n```\n\n----------------------------------------\n\nTITLE: Correct FHIR Batch Upsert with Chained Search (JavaScript)\nDESCRIPTION: This code demonstrates the correct approach to performing FHIR batch upserts by using a chained search in the URL. The `CareTeam` resource correctly references the `Patient` resource using a chained search on the subject identifier. This avoids using `urn:uuid:` in the URL, which is required for conditional updates within a batch.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/fhir-datastore/fhir-batch-requests.mdx#_snippet_9\n\nLANGUAGE: js\nCODE:\n```\n{\n  \"resourceType\": \"Bundle\",\n  \"type\": \"batch\",\n  \"entry\": [\n    {\n      \"fullUrl\": \"urn:uuid:4410cb87-4a38-4d3f-bee8-3c3556e6debc\",\n      \"request\": {\n        \"method\": \"PUT\",\n        \"url\": \"Patient?identifier=http://example.com/mrn|1234567\"\n      },\n      \"resource\": {\n        \"resourceType\": \"Patient\",\n        \"identifier\": [{ \"system\": \"http://example.com/mrn\", \"value\": \"1234567\" }]\n      }\n    },\n    {\n      \"fullUrl\": \"urn:uuid:b122a53c-9c0d-4654-9260-c0b67b7bc5d4\",\n      \"request\": {\n        \"method\": \"PUT\",\n        // Correct: Refer to subject via chained search,\n        // using same identifier as its own upsert URL\n        \"url\": \"CareTeam?subject.identifier=http://example.com/mrn|1234567\"\n      },\n      \"resource\": {\n        \"resourceType\": \"CareTeam\",\n        \"subject\": { \"reference\": \"urn:uuid:4410cb87-4a38-4d3f-bee8-3c3556e6debc\" }\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Read-only AccessPolicy for Patient Name and Address (JSON)\nDESCRIPTION: This AccessPolicy grants read-only access to the 'name' and 'address' elements of the 'Patient' resource type. Users can view these specific fields but cannot modify them. Other fields in the Patient resource may still be writable depending on other applied policies.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/access/access-policies.md#_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"resourceType\": \"AccessPolicy\",\n  \"name\": \"Patient Example\",\n  \"resource\": [\n    {\n      \"resourceType\": \"Patient\",\n      \"readonlyFields\": [\"name\", \"address\"]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Patching a Resource using patchResource (TypeScript)\nDESCRIPTION: This snippet demonstrates how to patch a resource using the `patchResource` method in the Medplum client. It takes the `resourceType`, `id`, and an array of `PatchOperations`. Each `PatchOperation` specifies the operation, path, and value to update.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/fhir-datastore/updating-data.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n/* selectBlocks: patchTs */\n\n```\n\n----------------------------------------\n\nTITLE: Chained Search with Resource Type (Observation by Patient Name) - Typescript\nDESCRIPTION: This Typescript snippet shows how to search for Observation resources where the subject is a Patient with the name 'homer' using the `subject:Patient.name=homer` syntax. It explicitly specifies the resource type.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/search/chained-search.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { MedplumClient } from '@medplum/core';\n\nasync function chainedSearchTs(medplum: MedplumClient) {\n  const bundle = await medplum.search('Observation', {\n    'subject:Patient.name': 'homer',\n  });\n  console.log(bundle);\n}\n```\n\n----------------------------------------\n\nTITLE: Invoking $translate Operation with cURL\nDESCRIPTION: This cURL command demonstrates how to invoke the `$translate` operation on a ConceptMap resource in Medplum. It sends a POST request to the `/fhir/R4/ConceptMap/[id]/$translate` endpoint with a JSON payload containing the `code` and `system` parameters.  Authentication is handled via the `Authorization` header.  The `Content-Type` header specifies that the payload is in FHIR JSON format.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/api/fhir/operations/conceptmap-translate.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl 'https://api.medplum.com/fhir/R4/ConceptMap/[id]/$translate' \\\n  -X POST \\\n  -H \"Content-Type: application/fhir+json\" \\\n  -H \"Authorization: Bearer $ACCESS_TOKEN\" \\\n  -d '{\"resourceType\":\"Parameters\",\"parameter\":[ {\"name\":\"code\",\"valueCode\":\"313444004\"}, {\"name\":\"system\",\"valueUri\":\"http://snomed.info/sct\"} ]}'\n```\n\n----------------------------------------\n\nTITLE: Project Initialization with cURL\nDESCRIPTION: Creates a new project named 'Test Project' using a cURL command.  The command sends a POST request to the Medplum API with a FHIR Parameters resource. Requires a valid access token in the `Authorization` header.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/api/fhir/operations/project-init.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl 'https://api.medplum.com/fhir/R4/Project/$init' \\\n  -X POST \\\n  -H \"Content-Type: application/fhir+json\" \\\n  -H \"Authorization: Bearer MY_ACCESS_TOKEN\" \\\n  -d '{\"resourceType\":\"Parameters\", \"parameter\":[ {\"name\":\"name\", \"valueString\":\"Test Project\"} ]}'\n```\n\n----------------------------------------\n\nTITLE: Medplum Bot Create Command\nDESCRIPTION: Creates a new bot resource within your Medplum project and saves its configuration. Requires the bot name, project ID, source file path, and distribution file path.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/cli/index.md#_snippet_30\n\nLANGUAGE: bash\nCODE:\n```\nnpx medplum bot create <bot name> <project id> <source file> <dist file>\n```\n\n----------------------------------------\n\nTITLE: Combined Forward and Reverse Chained Search (Patient with Observation by CareTeam) - Typescript\nDESCRIPTION: This Typescript snippet demonstrates a combined forward and reverse chained search to find Patient resources with an Observation performed by a CareTeam that has a member named 'bob'.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/search/chained-search.md#_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nimport { MedplumClient } from '@medplum/core';\n\nasync function combinedChainTs(medplum: MedplumClient) {\n  const bundle = await medplum.search('Patient', {\n    '_has:Observation:subject:performer.member.name': 'bob',\n  });\n  console.log(bundle);\n}\n```\n\n----------------------------------------\n\nTITLE: Embed Images in PDF with Medplum Bot\nDESCRIPTION: This snippet illustrates how to load images by URL and embed them into a PDF document using a Medplum Bot. It leverages the pdfmake library's image functionality. Requires core imports for Medplum.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/bots/creating-a-pdf.mdx#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n{ExampleCode}\n```\n\n----------------------------------------\n\nTITLE: Read a User with SCIM (curl)\nDESCRIPTION: This command reads a user from Medplum using the SCIM API. It sends a GET request to the `/scim/v2/Users/{id}` endpoint, where `{id}` is the user ID. The `Authorization` header is required and should contain a valid access token.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/api/scim/users.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncurl https://api.medplum.com/scim/v2/Users/MY_USER_ID \\\n -H \"Authorization: Bearer MY_ACCESS_TOKEN\"\n```\n\n----------------------------------------\n\nTITLE: Revoke Current Access Token (TypeScript)\nDESCRIPTION: Revokes the current access token using the `MedplumClient.signOut()` method. This method sends a request to the `/oauth2/logout` endpoint to invalidate the current token.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/auth/logout.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nawait medplum.signOut();\n```\n\n----------------------------------------\n\nTITLE: Update Patient Mutation (GraphQL)\nDESCRIPTION: This GraphQL mutation updates an existing Patient resource. It requires the ID of the patient to be updated and includes example fields to be modified.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/graphql/mutations.mdx#_snippet_8\n\nLANGUAGE: graphql\nCODE:\n```\n{ExampleCode}\n```\n\n----------------------------------------\n\nTITLE: Endpoint Configuration for HL7 v2 MLLP (JSON)\nDESCRIPTION: This JSON snippet configures an Endpoint resource in the Medplum App to listen for HL7 v2 messages over MLLP. It defines the resource type, status, connection type, payload type, name, and address. The `address` specifies the MLLP endpoint that the Medplum Agent will listen on. It's assumed that the agent will be set up to forward messages received on this endpoint to the Medplum server.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/agent/index.md#_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"resourceType\": \"Endpoint\",\n  \"status\": \"active\",\n  \"connectionType\": {\n    \"system\": \"http://terminology.hl7.org/CodeSystem/endpoint-connection-type\",\n    \"code\": \"hl7v2-mllp\",\n    \"display\": \"HL7 v2 MLLP\"\n  },\n  \"name\": \"Test Endpoint\",\n  \"payloadType\": [\n    {\n      \"coding\": [\n        {\n          \"system\": \"http://terminology.hl7.org/CodeSystem/endpoint-payload-type\",\n          \"code\": \"any\",\n          \"display\": \"Any\"\n        }\n      ]\n    }\n  ],\n  \"address\": \"mllp://0.0.0.0:56000\"\n}\n```\n\n----------------------------------------\n\nTITLE: Execute Bot by ID (GET) - TypeScript\nDESCRIPTION: This TypeScript snippet demonstrates how to execute a Medplum Bot by ID using a GET request and the `executeBot` method.  It shows how query parameters can be included in the request, which are then passed to the bot.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/api/fhir/operations/bot-execute.mdx#_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\n{ExampleCode}\n```\n\n----------------------------------------\n\nTITLE: Medplum Expunge Operation\nDESCRIPTION: Illustrates the HTTP POST request to perform a hard delete of a FHIR resource using the Medplum $expunge operation. This permanently removes the resource and its history from the database, and is only available to users with 'Super Administrator' access.  Subsequent GET requests will return a 404 Not Found.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/fhir-datastore/deleting-data.md#_snippet_1\n\nLANGUAGE: HTTP\nCODE:\n```\nPOST [base]/[resourceType]/[id]/$expunge\n```\n\n----------------------------------------\n\nTITLE: Resource Search Multiple Criteria - TypeScript\nDESCRIPTION: Demonstrates performing an AND search by specifying multiple query parameters using the Medplum Client SDK's `searchResources` method. This helper unwraps the FHIR bundle and returns an array of resources. The example searches for patients with both a given name of 'Alice' and a family name of 'Smith'.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/search/basic-search.mdx#_snippet_3\n\nLANGUAGE: string\nCODE:\n```\nconst patients = await medplum.searchResources('Patient', {\n  given: 'Alice',\n  family: 'Smith',\n});\n\nconsole.log(patients.length);\n```\n\n----------------------------------------\n\nTITLE: Querying Results Using MockClient in Typescript\nDESCRIPTION: This code snippet explains how to query the results of a Medplum Bot after execution using the `MockClient`.  It is vital for validating the outcome of the bot. It demonstrates how to read and confirm updated `DiagnosticReport` and `Observation` resources using the client's search functionality.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/bots/unit-testing-bots.mdx#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { MockClient } from '@medplum/mock';\nimport { DiagnosticReport, Observation } from '@medplum/fhirtypes';\n\ntest('Query results', async () => {\n  const medplum = new MockClient();\n  // setup mock resources here\n\n  const diagnosticReport = await medplum.readResource('DiagnosticReport', '123');\n  expect(diagnosticReport.status).toBe('final');\n\n  const observation = await medplum.readResource('Observation', '456');\n  expect(observation.status).toBe('final');\n});\n```\n\n----------------------------------------\n\nTITLE: Batch and Transaction Bundle Definition in FHIR\nDESCRIPTION: Demonstrates the basic structure of FHIR Bundle resources for both batch and transaction types. Batch bundles process operations independently, while transaction bundles ensure all operations succeed or fail together.  This snippet showcases the difference in the `type` property between the two.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/fhir-datastore/fhir-batch-requests.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// Batch example - operations processed independently\nconst batchBundle = {\n  resourceType: 'Bundle',\n  type: 'batch',\n  entry: [\n    /* operations */\n  ],\n};\n\n// Transaction example - operations processed atomically\nconst transactionBundle = {\n  resourceType: 'Bundle',\n  type: 'transaction',\n  entry: [\n    /* operations */\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Patch Resource\nDESCRIPTION: Patches a FHIR resource using the `patchResource` method. It takes the resource type, ID, and an array of operations as input and returns a Promise that resolves to the patched resource.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/core/README.md#_snippet_13\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst result = await medplum.patchResource('Patient', '123', [\n  { op: 'replace', path: '/name/0/family', value: 'Smith' },\n]);\nconsole.log(result.meta.versionId);\n```\n\n----------------------------------------\n\nTITLE: CodeableConcept example with NDC and RxNorm codes (TypeScript)\nDESCRIPTION: This code snippet demonstrates a CodeableConcept example for Tylenol, including both NDC and RxNorm codes. It illustrates how these code systems can be used together to identify and represent a medication in a standardized way.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/medications/medication-codes.md#_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\n{\n  \"coding\": [\n    {\n      \"system\": \"http://www.nlm.nih.gov/research/umls/rxnorm\",\n      \"code\": \"1191\",\n      \"display\": \"Tylenol\"\n    },\n    {\n      \"system\": \"http://hl7.org/fhir/sid/ndc\",\n      \"code\": \"0045-0512-01\",\n      \"display\": \"Tylenol\"\n    }\n  ],\n  \"text\": \"Tylenol\"\n}\n```\n\n----------------------------------------\n\nTITLE: Search for Parent Communication Threads (TypeScript)\nDESCRIPTION: This TypeScript code snippet demonstrates how to search for parent `Communication` resources, which represent thread headers, by using the `:missing` search modifier on the `partOf` field. This identifies resources that do not reference another resource in their `partOf` field, indicating they are thread headers. This approach is useful for finding all thread header Communication resources in the system.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/communications/organizing-communications.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n{ExampleCode}\n```\n\n----------------------------------------\n\nTITLE: Searching by Tag using _tag - Typescript\nDESCRIPTION: Demonstrates how to search for Observation resources based on a specific tag (critical) in the `meta.tag` field using the `_tag` parameter in Typescript. Requires the Medplum SDK and a configured Medplum client.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/search/advanced-search-parameters.mdx#_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\n{ExampleCode}\n```\n\n----------------------------------------\n\nTITLE: Sample UserInfo Request\nDESCRIPTION: Shows a sample GET request to the /oauth2/userinfo endpoint with the required Authorization header.  The request is made to the api.medplum.com domain. An access token is required in the authorization header.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/api/oauth/userinfo.md#_snippet_1\n\nLANGUAGE: HTTP\nCODE:\n```\nGET https://api.medplum.com/oauth2/userinfo\n    Authorization: Bearer <access_token>\n```\n\n----------------------------------------\n\nTITLE: Setting Access Policy Variables on ProjectMembership in JS\nDESCRIPTION: This ProjectMembership resource demonstrates how to set custom variables for an access policy. It provides access to Patient and DiagnosticReport resources in specified organizations by setting the `provider_organization` parameter to different Organization references.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/access/access-policies.md#_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"resourceType\": \"ProjectMembership\",\n  \"access\": [\n    // Provide access to Patients and Diagnostic Reports in Organization/abc\n    {\n      \"policy\": { \"reference\": \"AccessPolicy/123\" },\n      \"parameter\": [\n        {\n          \"name\": \"provider_organization\",\n          \"valueReference\": { \"reference\": \"Organization/abc\" }\n        }\n      ]\n    },\n    // Provide access to Patients and Diagnostic Reports in Organization/def\n    {\n      \"policy\": { \"reference\": \"AccessPolicy/123\" },\n      \"parameter\": [\n        {\n          \"name\": \"provider_organization\",\n          \"valueReference\": { \"reference\": \"Organization/def\" }\n        }\n      ]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Success Response Example for $translate\nDESCRIPTION: This is an example of a successful response from the `$translate` operation. It returns a Parameters resource containing a `result` parameter indicating success, and `match` parameters for each successful translation. Each `match` includes the `equivalence` and `concept` (represented as a Coding) for the translated code.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/api/fhir/operations/conceptmap-translate.md#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"resourceType\": \"Parameters\",\n  \"parameter\": [\n    { \"name\": \"result\", \"valueBoolean\": true },\n    {\n      \"name\": \"match\",\n      \"part\": [\n        { \"name\": \"equivalence\", \"valueCode\": \"equivalent\" },\n        { \"name\": \"concept\", \"valueCoding\": {\n          \"system\": \"http://loinc.org\",\n          \"code\": \"15067-2\",\n          \"display\": \"Follitropin Qn\"\n        }}\n      ]\n    }\n    {\n      \"name\": \"match\",\n      \"part\": [\n        { \"name\": \"equivalence\", \"valueCode\": \"equivalent\" },\n        { \"name\": \"concept\", \"valueCoding\": {\n          \"system\": \"http://www.ama-assn.org/go/cpt\",\n          \"code\": \"83001\"\n        }}\n      ]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Age and Gender Dependent Reference Ranges in TypeScript\nDESCRIPTION: This snippet demonstrates defining different normal ranges for a testosterone test, tailored for both adults and children, considering patient's age and gender.  This is achieved using the `qualifiedInterval.age` and `qualifiedInterval.gender` properties of the `ObservationDefinition` resource.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/careplans/reference-ranges.mdx#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  \"qualifiedInterval\": [\n    {\n      \"gender\": \"male\",\n      \"age\": {\n        \"low\": {\n          \"value\": 18,\n          \"unit\": \"years\"\n        }\n      },\n      \"range\": {\n        \"low\": {\n          \"value\": 300,\n          \"unit\": \"ng/dL\"\n        },\n        \"high\": {\n          \"value\": 1000,\n          \"unit\": \"ng/dL\"\n        }\n      }\n    },\n    {\n      \"gender\": \"male\",\n      \"age\": {\n        \"high\": {\n          \"value\": 18,\n          \"unit\": \"years\"\n        }\n      },\n      \"range\": {\n        \"low\": {\n          \"value\": 20,\n          \"unit\": \"ng/dL\"\n        },\n        \"high\": {\n          \"value\": 80,\n          \"unit\": \"ng/dL\"\n        }\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Questionnaire with Nested Questions (TypeScript)\nDESCRIPTION: This code snippet demonstrates creating a FHIR Questionnaire with nested questions using TypeScript. It shows how to structure a questionnaire with question groups and sub-questions, focusing on how to define items within items and setting `type='group'`.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/questionnaires/questionnaires-and-responses.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Questionnaire } from '@medplum/fhirtypes';\n\nexport const nestedQuestionnaire: Questionnaire = {\n  resourceType: 'Questionnaire',\n  id: 'nested-questionnaire',\n  status: 'active',\n  subjectType: ['Patient'],\n  name: 'NestedQuestionnaire',\n  title: 'Nested Questionnaire Example',\n  item: [\n    {\n      linkId: 'group1',\n      type: 'group',\n      text: 'Personal Information',\n      item: [\n        {\n          linkId: 'name',\n          type: 'string',\n          text: 'What is your name?',\n          required: true,\n        },\n        {\n          linkId: 'dob',\n          type: 'date',\n          text: 'What is your date of birth?',\n        },\n      ],\n    },\n  ],\n};\n\n```\n\n----------------------------------------\n\nTITLE: Evaluating a Measure using cURL\nDESCRIPTION: Executes a POST request to the `$evaluate-measure` endpoint of a FHIR Measure using cURL.  It includes the Measure ID, specifies the content type as application/fhir+json, provides an authorization token, and passes periodStart and periodEnd parameters as JSON in the request body. Replace `MY_MEASURE_ID` and `MY_ACCESS_TOKEN` with actual values.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/api/fhir/operations/evaluate-measure.md#_snippet_1\n\nLANGUAGE: Bash\nCODE:\n```\ncurl 'https://api.medplum.com/fhir/R4/Measure/MY_MEASURE_ID/$evaluate-measure' \\\n  -X POST \\\n  -H \"Content-Type: application/fhir+json\" \\\n  -H \"Authorization: Bearer MY_ACCESS_TOKEN\" \\\n  -d '{\"resourceType\":\"Parameters\",\"parameter\":[{\"name\":\"periodStart\",\"valueDate\":\"2020-01-01\"},{\"name\":\"periodEnd\",\"valueDate\":\"2030-01-01\"}]}'\n```\n\n----------------------------------------\n\nTITLE: Searching by Profile using _profile - Typescript\nDESCRIPTION: Demonstrates how to search for Observation resources that conform to the pediatric growth charts profile using the `_profile` parameter in Typescript. Requires the Medplum SDK and a configured Medplum client.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/search/advanced-search-parameters.mdx#_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\n{ExampleCode}\n```\n\n----------------------------------------\n\nTITLE: Create PostgreSQL Database and Grant Privileges\nDESCRIPTION: Creates a PostgreSQL database named 'medplum' and grants all privileges on the database and its schema to the 'medplum' user. This allows the medplum application to read and write to the database.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/self-hosting/install-on-ubuntu.md#_snippet_4\n\nLANGUAGE: PLpgSQL\nCODE:\n```\nCREATE DATABASE medplum;\nGRANT ALL PRIVILEGES ON DATABASE medplum TO medplum;\n\\c medplum\nGRANT ALL ON SCHEMA public TO medplum;\nALTER DEFAULT PRIVILEGES IN SCHEMA public GRANT ALL ON TABLES TO medplum;\n```\n\n----------------------------------------\n\nTITLE: Update a User with SCIM (curl)\nDESCRIPTION: This command updates an existing user in Medplum using the SCIM API. It sends a PUT request to the `/scim/v2/Users/{id}` endpoint, where `{id}` is the user ID.  The request body contains the updated user data in JSON format. The `Authorization` header is required, and the `Content-Type` header must be set to `application/json`.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/api/scim/users.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X PUT https://api.medplum.com/scim/v2/Users \\\n -H \"Authorization: Bearer MY_ACCESS_TOKEN\" \\\n -H \"Content-Type: application/json\" \\\n -d '{\n  \"schemas\": [\"urn:ietf:params:scim:schemas:core:2.0:User\"],\n  \"userType\": \"Practitioner\",\n  \"id\": \"41ecbf96-8296-4fac-801c-5e78042ba436\",\n  \"name\": {\n    \"givenName\": \"Alice\",\n    \"familyName\": \"Smith\"\n  },\n  \"userName\": \"alice@example.com\",\n  \"emails\": [\n    {\n      \"value\": \"alice@example.com\"\n    }\n  ],\n  \"externalId\": \"test-external-id\"\n}'\n```\n\n----------------------------------------\n\nTITLE: Defining a General Practitioner Access Policy in FHIR JSON\nDESCRIPTION: This access policy grants access to Patient resources where the current user (a Practitioner) is listed as the general practitioner. It leverages the `%profile` variable to reference the current user's profile.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/access/access-policies.md#_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"resourceType\": \"AccessPolicy\",\n  \"name\": \"GP Access Policy\",\n  \"resource\": [\n    {\n      \"resourceType\": \"Patient\",\n      \"criteria\": \"Patient?general-practitioner=%profile\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Validate Profile Against Resources - Bash\nDESCRIPTION: Shows how to validate a new FHIR profile against all Patient resources in the system using the `$validate` operation, which helps identify resources that need to be updated to adhere to the new profile version.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/fhir-datastore/profiles.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n{ExampleCode}\n```\n\n----------------------------------------\n\nTITLE: Searching Filtered Threads using cURL\nDESCRIPTION: This snippet demonstrates how to filter communication threads based on the `subject` parameter using cURL in Medplum. This allows you to search for threads related to a specific patient.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/communications/organizing-communications.mdx#_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\n{ExampleCode}\n```\n\n----------------------------------------\n\nTITLE: Chained Search with Resource Type (Observation by Patient Name) - CLI\nDESCRIPTION: This bash snippet shows how to search for Observation resources where the subject is a Patient with the name 'homer' using the `subject:Patient.name=homer` syntax via the Medplum CLI.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/search/chained-search.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nmedplum search Observation --subject:Patient.name homer\n```\n\n----------------------------------------\n\nTITLE: Resource Search by Reference - cURL\nDESCRIPTION: Demonstrates searching by resource reference using cURL. This example shows how to find all Observations related to a Patient with ID '1234'.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/search/basic-search.mdx#_snippet_8\n\nLANGUAGE: string\nCODE:\n```\ncurl -H \"Authorization: Bearer $MEDPLUM_CLIENT_SUPER_ADMIN_TOKEN\" \\\n  \"https://api.medplum.com/fhir/R4/Observation?subject=Patient/1234\"\n```\n\n----------------------------------------\n\nTITLE: CodeSystem Subsumes Request with cURL\nDESCRIPTION: Demonstrates how to perform a $subsumes operation request using cURL, including setting the 'system', 'codeA', and 'codeB' parameters to check the hierarchical relationship between two SNOMED codes. It also includes the Authorization header with a Bearer token.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/api/fhir/operations/codesystem-subsumes.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncurl 'https://api.medplum.com/fhir/R4/CodeSystem/$subsumes' \\\n  --get \\\n  -H \"Authorization: Bearer $MY_ACCESS_TOKEN\" \\\n  -d 'system=http://snomed.info/sct' \\\n  -d 'codeA=364075005' \\\n  -d 'codeB=363787002'\n```\n\n----------------------------------------\n\nTITLE: Agent Configuration (JSON)\nDESCRIPTION: This JSON snippet configures an Agent resource in Medplum.  It links the Agent to a specific Endpoint and Bot, defining a channel for data processing. The `endpoint` and `targetReference` fields contain references to the corresponding Endpoint and Bot resources, using their UUIDs.  This configuration directs data received at the Endpoint to be processed by the specified Bot.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/agent/index.md#_snippet_2\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"resourceType\": \"Agent\",\n  \"name\": \"ACME Hospital Admissions\",\n  \"status\": \"active\",\n  \"channel\": [\n    {\n      \"name\": \"ADT Channel\",\n      \"endpoint\": {\n        \"reference\": \"Endpoint/my-endpoint-uuid\",\n        \"display\": \"Test Endpoint\"\n      },\n      \"targetReference\": {\n        \"reference\": \"Bot/my-bot-uuid\",\n        \"display\": \"HL7 ADT Processing Bot\"\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: SearchRequest Interface in TypeScript\nDESCRIPTION: Defines the structure of a `SearchRequest` object, which is the internal representation of a FHIR search query.  It includes properties for resource type, filters, sort rules, offset, count, fields, name, total, include and revInclude parameters and their datatypes.  This interface is used by the server and client-side applications to facilitate common handling of searches.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/contributing/search-architecture.md#_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\ninterface SearchRequest {\n  readonly resourceType: string;\n  filters?: {\n    code: string;\n    operator: Operator;\n    value: string;\n  }[];\n  sortRules?: {\n    code: string;\n    descending?: boolean;\n  }[];\n  offset?: number;\n  count?: number;\n  fields?: string[];\n  name?: string;\n  total?: 'none' | 'estimate' | 'accurate';\n  include?: IncludeTarget[];\n  revInclude?: IncludeTarget[];\n  summary?: 'true' | 'text' | 'data';\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Missing Data with Data Absent Reason\nDESCRIPTION: This JSON snippet shows how to handle missing data using the Data Absent Reason extension.  It demonstrates how to indicate why certain fields are missing, using both the `extension` field for complex data types and the underscore-prefixed field name for primitive types.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/fhir-datastore/profiles.md#_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"resourceType\": \"Patient\",\n  \"meta\": {\n    \"profile\": [\"http://hl7.org/fhir/us/core/StructureDefinition/us-core-patient\"]\n  },\n  \"identifier\": [\n    {\n      \"system\": \"http://example.com/mrn\",\n      \"value\": \"12345\"\n    }\n  ],\n  // For fields with complex (object) data types, add the `extension` field where necessary to indicate absent data\n  \"name\": [\n    {\n      \"extension\": [\n        {\n          \"url\": \"http://hl7.org/fhir/StructureDefinition/data-absent-reason\",\n          \"valueCode\": \"masked\"\n        }\n      ]\n    }\n  ],\n  // For primitive type fields, use the underscore-prefixed field name to add an object with the `extension` field\n  \"_gender\": {\n    \"extension\": [\n      {\n        \"url\": \"http://hl7.org/fhir/StructureDefinition/data-absent-reason\",\n        \"valueCode\": \"asked-declined\"\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Patient with Related Encounters GraphQL Query\nDESCRIPTION: This GraphQL query retrieves a Patient by ID and then finds all Encounter resources that reference the Patient. It uses the `_reference` keyword to perform a reverse-reference search.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/graphql/basic-queries.mdx#_snippet_12\n\nLANGUAGE: graphql\nCODE:\n```\n{ExampleCode}\n```\n\n----------------------------------------\n\nTITLE: Execute Bot by ID (POST) - TypeScript\nDESCRIPTION: This snippet demonstrates how to execute a Medplum Bot by its ID using the `executeBot` method of the `MedplumClient` in TypeScript. The `id` parameter specifies the Bot's ID.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/api/fhir/operations/bot-execute.mdx#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n{ExampleCode}\n```\n\n----------------------------------------\n\nTITLE: OAuth2 Redirect Authentication\nDESCRIPTION: Authenticates with a FHIR server using OAuth2 redirect.  Calls `signInWithRedirect()` and then logs the user object when the promise resolves.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/core/README.md#_snippet_5\n\nLANGUAGE: TypeScript\nCODE:\n```\nmedplum.signInWithRedirect().then((user) => console.log(user));\n```\n\n----------------------------------------\n\nTITLE: FHIR Search with _include and _revinclude (TypeScript)\nDESCRIPTION: This TypeScript code snippet demonstrates how to perform a FHIR search with the `_include` and `_revinclude` parameters to retrieve linked resources such as Patient and Provenance related to Observation resources.  It showcases a basic search for Observation resources and includes related Patient and Provenance resources in the same bundle.  Dependencies include the Medplum client library.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/search/includes.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n{ExampleCode}\n```\n\n----------------------------------------\n\nTITLE: Create Patients using Batch Request (TypeScript)\nDESCRIPTION: This snippet demonstrates how to create multiple Patient resources using a FHIR batch request in Medplum. The batch request allows combining multiple operations into a single API call, improving efficiency for multiple independent operations. Conditional updates are used to avoid data duplication.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/migration/migration-pipelines.md#_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport ExampleCode from '!!raw-loader!@site/../examples/src/migration/migration-pipelines.ts';\n<MedplumCodeBlock language=\"ts\" selectBlocks=\"create-patients-batch\">\n    {ExampleCode}\n</MedplumCodeBlock>\n```\n\n----------------------------------------\n\nTITLE: Patching a Resource using cURL\nDESCRIPTION: This snippet demonstrates how to patch a resource using cURL. It requires appropriate authorization, including an access token, the resource ID, and a patch body specifying the changes to apply.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/fhir-datastore/updating-data.md#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n/* selectBlocks: patchCurl */\n\n```\n\n----------------------------------------\n\nTITLE: Conditional Batch Action Example\nDESCRIPTION: Demonstrates how to create a patient and organization, only if the organization does not already exist, using the `ifNoneExist` property in the `request` element. The full code is available in the ExampleCode variable.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/fhir-datastore/fhir-batch-requests.mdx#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n{ExampleCode}\n```\n\n----------------------------------------\n\nTITLE: TypeScript Connection API Example\nDESCRIPTION: Illustrates how to use TypeScript to interact with the Connection API.  This example likely shows how to construct and execute the GraphQL query to retrieve patient data and total counts.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/graphql/connections.mdx#_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\n{ExampleCode}\n```\n\n----------------------------------------\n\nTITLE: Creating Read-Only Access Policy for Bot (JSON)\nDESCRIPTION: This JSON snippet defines an AccessPolicy that grants read-only access to Medplum Bots. This is recommended for SaaS applications to minimize access to sensitive data.  The `resourceType` is AccessPolicy, the `name` is descriptive, and the `resource` array specifies that Bots have `readonly` access.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/bots/consuming-webhooks.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"resourceType\": \"AccessPolicy\",\n  \"name\": \"Stripe Webhook Access Policy\",\n  \"resource\": [\n    {\n      \"resourceType\": \"Bot\",\n      \"readonly\": true\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Execute Bot by Identifier (GET) - TypeScript\nDESCRIPTION: This snippet shows how to execute a Medplum Bot by identifier using a GET request in TypeScript. The identifier is passed as a query parameter.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/api/fhir/operations/bot-execute.mdx#_snippet_9\n\nLANGUAGE: TypeScript\nCODE:\n```\n{ExampleCode}\n```\n\n----------------------------------------\n\nTITLE: Patient Resource with Identifiers in FHIR\nDESCRIPTION: This code snippet shows an example of a FHIR Patient resource with multiple identifiers, including a Social Security Number (SSN) and two Medical Record Numbers (MRNs) from different hospital systems. The identifiers are defined using a `system` and `value` pair.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/fhir-basics.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  // Resource Type (i.e. \"class name\")\n  \"resourceType\": \"Patient\",\n  // Unique id for this resource\n  \"id\": \"j_chalmers\",\n  // Patient Name (could have multiple)\n  \"name\": [\n    {\n      \"use\": \"official\",\n      \"family\": \"Chalmers\",\n      \"given\": [\"Peter\", \"James\"]\n    }\n  ],\n  \"identifier\": [\n    // Social Security Number ID (US-SSN)\n    {\n      \"system\": \"http://hl7.org/fhir/sid/us-ssn\",\n      \"value\": \"011-11-1234\"\n    },\n    // MRN - Hospital 1\n    {\n      \"system\": \"http://hospital-1.org\",\n      \"value\": \"MRN-12345678\"\n    },\n    // MRN - Hospital 2\n    {\n      \"system\": \"http://hospital-2.org\",\n      \"value\": \"0987AZ6\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Create ClientApplication with Medplum SDK\nDESCRIPTION: This code snippet demonstrates how to create a new ClientApplication using the Medplum SDK's `post` method. It includes the client name, description, redirect URI, and a reference to an AccessPolicy. The `projectId` must be replaced with the actual project ID.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/api/project-admin/client.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nawait medplum.post('admin/projects/:projectId/client', {\n  name: 'Hello World Client',\n  description: 'Client App for Medplum Hello World',\n  redirectUri: 'https://example.com/redirect',\n  accessPolicy: {\n    reference: 'AccessPolicy/access-policy-id',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Displaying Patient and RelatedPerson JSON\nDESCRIPTION: This snippet displays JSON representations of a Patient and a RelatedPerson resource, demonstrating how to model a father-daughter relationship using the Patient.link and RelatedPerson.relationship properties. It avoids data duplication by referencing the father's information in a separate Patient resource.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/fhir-datastore/family-relationships/family-relationships.mdx#_snippet_2\n\nLANGUAGE: js\nCODE:\n```\n{'// Patient representing the parent\\n' +\n    JSON.stringify(\n      (({ resourceType, id, link }) => {\n        return { resourceType, id, link };\n      })(HomerSimpson),\n      null,\n      2\n    ) +\n    '\\n// RelatedPerson modeling Father -> Daughter relationship\\n' +\n    JSON.stringify(\n      (({ resourceType, id, relationship }) => {\n        return { resourceType, id, relationship };\n      })(HomerLisaRelatedPerson),\n      null,\n      2\n    ) +\n    '\\n\\n//Patient\\n' +\n    JSON.stringify(\n      (({ resourceType, id }) => {\n        return { resourceType, id };\n      })(LisaSimpson),\n      null,\n      2\n    )}\n```\n\n----------------------------------------\n\nTITLE: Asynchronous Batch Request with cURL\nDESCRIPTION: Demonstrates how to perform an asynchronous batch request using cURL.  This involves adding the `Prefer: respond-async` header to the HTTP request. The full code is available in the ExampleCode variable.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/fhir-datastore/fhir-batch-requests.mdx#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n{ExampleCode}\n```\n\n----------------------------------------\n\nTITLE: System Level FHIR Export in Python\nDESCRIPTION: This Python code demonstrates how to perform a system-level export of all FHIR resources in a Medplum project.  It shows how to obtain credentials, setup the HTTP headers and make the API call.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/api/fhir/operations/bulk-fhir.mdx#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom medplum import MedplumClient\n\n\nasync def main():\n    # To run this example, you need a Medplum project with a client application.\n    # First, create a client application in Medplum.\n    # Then, grant the client application the 'Bulk Data Access' permission.\n    # Finally, set the following environment variables:\n    # MEDPLUM_CLIENT_ID: The client ID of the client application.\n    # MEDPLUM_CLIENT_SECRET: The client secret of the client application.\n    # MEDPLUM_BASE_URL: The base URL of your Medplum server.\n    client = MedplumClient()\n\n    # You can optionally override the default parameters\n    # See: https://www.hl7.org/fhir/uv/bulkdata/STU2/export.html for parameter details.\n    params = {\n        '_outputFormat': 'application/fhir+ndjson',\n        '_since': '2023-01-01T00:00:00Z',\n        '_type': 'Patient,Observation'\n    }\n\n    bulk_data_export = await client.bulk_export(params)\n\n    print(f'BulkDataExport Job: {bulk_data_export}')\n\n\nif __name__ == '__main__':\n    import asyncio\n    asyncio.run(main())\n```\n\n----------------------------------------\n\nTITLE: Searching by Compartment using _compartment - Typescript\nDESCRIPTION: Demonstrates searching for all Communication resources within a specific Patient compartment using the non-standard `_compartment` parameter in Typescript.  This finds all communications related to a given patient. Requires the Medplum SDK and a configured Medplum client.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/search/advanced-search-parameters.mdx#_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\n{ExampleCode}\n```\n\n----------------------------------------\n\nTITLE: Invoking Project Initialization\nDESCRIPTION: Invokes the `$init` operation to create a new project. The base URL is followed by `/Project/$init` to specify the operation.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/api/fhir/operations/project-init.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n[base]/Project/$init\n```\n\n----------------------------------------\n\nTITLE: Searching by Last Updated Time using _lastUpdated - Typescript\nDESCRIPTION: Demonstrates searching Communications resources based on the `_lastUpdated` parameter in Typescript.  The example uses the `gt` (greater than) comparison operator to find communications updated since a specific date. Requires the Medplum SDK and a configured Medplum client.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/search/advanced-search-parameters.mdx#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n{ExampleCode}\n```\n\n----------------------------------------\n\nTITLE: Encounter and ClinicalImpression Transaction (TypeScript)\nDESCRIPTION: This snippet shows how to create an Encounter and associated ClinicalImpression using a FHIR transaction in Medplum. Transactions ensure that a set of resources are written together or fail together, maintaining data integrity. If either operation fails, the entire transaction is rolled back.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/migration/migration-pipelines.md#_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport ExampleCode from '!!raw-loader!@site/../examples/src/migration/migration-pipelines.ts';\n<MedplumCodeBlock language=\"ts\" selectBlocks=\"encounter-and-impression-transaction\">\n    {ExampleCode}\n</MedplumCodeBlock>\n```\n\n----------------------------------------\n\nTITLE: Profile Adoption - Complete Patient Resource\nDESCRIPTION: This JSON snippet demonstrates a complete Patient resource that includes the required fields (identifier, name, and gender) as specified by the US Core Patient profile. The `meta.profile` field is also present, indicating that the resource should be validated against the profile.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/fhir-datastore/profiles.md#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"resourceType\": \"Patient\",\n  \"meta\": {\n    \"profile\": [\"http://hl7.org/fhir/us/core/StructureDefinition/us-core-patient\"]\n  },\n  \"identifier\": [\n    {\n      \"system\": \"http://example.com/mrn\",\n      \"value\": \"12345\"\n    }\n  ],\n  \"name\": [\n    {\n      \"given\": [\"John\", \"Jacob\"],\n      \"family\": \"Jingleheimer-Schmidt\"\n    }\n  ],\n  \"gender\": \"male\"\n}\n```\n\n----------------------------------------\n\nTITLE: HMAC Signature Verification (Python/Flask)\nDESCRIPTION: This Python snippet shows how to verify an HMAC signature in a Flask webhook handler. It retrieves the secret, calculates the expected signature using SHA-256, and compares it with the signature received in the 'x-signature' header. It requires the 'hmac', 'hashlib', and 'flask' modules.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/subscriptions/subscription-extensions.md#_snippet_9\n\nLANGUAGE: Python\nCODE:\n```\n@app.route(\"/webhook\", methods=[\"POST\"])\ndef handle_webhook():\n    secret = b'...' # Created separately\n    message = flask.request.get_data()\n    signature = hmac.new(secret, message, hashlib.sha256).hexdigest()\n    log('Expected: ' + signature)\n    log('Received: ' + flask.request.headers.get('x-signature'))\n    return {\"ok\":True}\n```\n\n----------------------------------------\n\nTITLE: Successful $resend Operation Output\nDESCRIPTION: This JavaScript snippet displays the expected OperationOutcome response upon successful invocation of the `$resend` operation. The resourceType is OperationOutcome, the id is \"ok\", severity is \"information\" and details is text \"All OK\".\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/api/fhir/operations/resend.md#_snippet_3\n\nLANGUAGE: js\nCODE:\n```\n{\n  \"resourceType\": \"OperationOutcome\",\n  \"id\": \"ok\",\n  \"issue\": [\n    {\n      \"severity\": \"information\",\n      \"code\": \"informational\",\n      \"details\": {\n        \"text\": \"All OK\"\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Download Binary using Medplum SDK\nDESCRIPTION: This TypeScript code demonstrates how to download a FHIR Binary resource using Medplum's `download` helper function. The `download` helper function will generate a presigned URL and trigger a file download. It assumes that the URL is in `Binary/{id}` format.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/fhir-datastore/binary-data.mdx#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { download } from '@medplum/core';\n\n// Example usage:\ndownload('Binary/123');\n```\n\n----------------------------------------\n\nTITLE: Type Checking with FHIR Types (TypeScript)\nDESCRIPTION: This snippet demonstrates how to import the `Patient` type from `@medplum/fhirtypes` and use it to type a `Patient` object. The incorrect assignment of a string to the `name` property will result in a compile-time error, as TypeScript enforces the correct type definition.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/fhirtypes/README.md#_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { Patient } from '@medplum/fhirtypes';\n\nconst myPatient: Patient = {\n  resourceType: 'Patient',\n  name: 'George Washington',\n};\n```\n\n----------------------------------------\n\nTITLE: ValueSet Validate Code Response (JavaScript)\nDESCRIPTION: This JavaScript code snippet shows the expected response from the ValueSet $validate-code operation. The response is a Parameters resource that includes a \"result\" parameter indicating whether the coding is included in the ValueSet, and an optional \"display\" parameter with the display text of the included code.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/api/fhir/operations/valueset-validate-code.mdx#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"resourceType\": \"Parameters\",\n  \"parameter\": [\n    { \"name\": \"result\", \"valueBoolean\": true },\n    { \"name\": \"display\", \"valueString\": \"Mild (qualifier value)\" }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Sorting by Last Updated FHIR\nDESCRIPTION: This snippet shows how to sort FHIR search results by the last updated time using the `_lastUpdated` parameter. The example searches for the most recently updated RiskAssessments resources in TypeScript.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/search/basic-search.mdx#_snippet_25\n\nLANGUAGE: ts\nCODE:\n```\n{ExampleCode}\n```\n\n----------------------------------------\n\nTITLE: HTTP File Upload Bot TypeScript\nDESCRIPTION: This snippet shows the complete example bot to create and upload a PDF to an HTTP endpoint.\nIt imports necessary modules, creates a PDF using `medplum.createPdf`, downloads the PDF data, constructs a FormData object, and posts the form to a specified HTTP endpoint.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/bots/file-uploads.mdx#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { MedplumClient, MedplumConfig, BotEvent, createReference, Binary } from '@medplum/core';\nimport { randomUUID } from 'crypto';\nimport FormData from 'form-data';\nimport fetch from 'node-fetch';\n\n// Helper function to pause the bot and release resources\nfunction nl(): Promise<void> {\n  return new Promise((resolve) => {\n    setTimeout(resolve, 0);\n  });\n}\n\n// Helper function to pause the bot and release resources\nfunction closeFn(): Promise<void> {\n  return new Promise((resolve) => {\n    setTimeout(resolve, 0);\n  });\n}\n\n/**\n * Medplum bot to upload to an HTTP endpoint\n * @param medplum - medplum client\n * @param event - the BotEvent\n * @returns\n */\nexport async function handler(medplum: MedplumClient, event: BotEvent<any>): Promise<void> {\n  const pdfId = await createPdf(medplum);\n  await checkBinary(medplum, pdfId);\n  const binaryData = await downloadPdf(medplum, pdfId);\n  await nl();\n  const form = await formData(binaryData);\n  await nl();\n  const result = await postForm(form);\n  console.log(result);\n  await closeFn();\n\n  return;\n}\n\nasync function createPdf(medplum: MedplumClient): Promise<string> {\n  const binary = await medplum.createPdf({\n    resourceType: 'DocumentReference',\n    status: 'current',\n    content: [\n      {\n        attachment: {\n          contentType: 'application/pdf',\n        },\n      },\n    ],\n  });\n  return binary.id as string;\n}\n\nasync function checkBinary(medplum: MedplumClient, binaryId: string): Promise<void> {\n  const binary = await medplum.readResource<Binary>('Binary/' + binaryId);\n  if (!binary) {\n    throw new Error('Binary not found');\n  }\n}\n\nasync function downloadPdf(medplum: MedplumClient, binaryId: string): Promise<Buffer> {\n  const binary = await medplum.readBinary(binaryId);\n  return Buffer.from(binary.data as string, 'base64');\n}\n\nasync function formData(binaryData: Buffer): Promise<FormData> {\n  const form = new FormData();\n  form.append('file', binaryData, 'test.pdf');\n  return form;\n}\n\nasync function postForm(form: FormData): Promise<any> {\n  const response = await fetch('https://httpbin.org/post', {\n    method: 'POST',\n    body: form as any,\n    headers: form.getHeaders(),\n  });\n  return response.json();\n}\n\n```\n\n----------------------------------------\n\nTITLE: Create Specimen and Update ServiceRequest in TypeScript\nDESCRIPTION: This snippet shows how to create a Specimen and link it to a ServiceRequest, then update the ServiceRequest to indicate the Specimen is available. It's part of a lab test workflow where a specimen is collected after the initial service request.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/subscriptions/publish-and-subscribe.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  MedplumClient,\n  createReference,\n  newPatient,\n  randomId,\n  ResourceType,\n  SearchParameter,\n} from '@medplum/core';\nimport {\n  Bundle,\n  Observation,\n  Patient,\n  Reference,\n  RequestGroup,\n  ServiceRequest,\n  Specimen,\n} from '@medplum/fhir';\n\n// specimen-imports\n\n```\n\nLANGUAGE: typescript\nCODE:\n```\n// create-specimen\nexport async function createSpecimen(\n  medplum: MedplumClient,\n  patient: Patient,\n  serviceRequest: ServiceRequest\n): Promise<Specimen> {\n  const bloodSpecimen: Specimen = {\n    resourceType: 'Specimen',\n    status: 'available',\n    type: {\n      coding: [\n        {\n          system: 'http://terminology.hl7.org/CodeSystem/v2-0487',\n          code: 'Bld',\n          display: 'Whole blood',\n        },\n      ],\n      text: 'Whole blood',\n    },\n    subject: createReference(patient),\n    request: [createReference(serviceRequest)],\n  };\n\n  const specimen = await medplum.create(bloodSpecimen);\n\n  await medplum.update<ServiceRequest>({\n    ...serviceRequest,\n    status: 'in-progress',\n    extension: [\n      {\n        url: 'http://example.com/collected',\n        valueBoolean: true,\n      },\n    ],\n    contained: [specimen],\n  });\n\n  return specimen;\n}\n\n```\n\n----------------------------------------\n\nTITLE: Configure PostgreSQL Apt Repository\nDESCRIPTION: Adds the PostgreSQL Apt repository and installs Postgres 16 and its client. Necessary prerequisite for creating the medplum database and user.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/self-hosting/install-on-ubuntu.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Configure the Apt repository\nsudo apt install -y postgresql-common\nsudo /usr/share/postgresql-common/pgdg/apt.postgresql.org.sh\n\n# Install Postgres 16\nsudo apt install postgresql-16 postgresql-client-16\n```\n\n----------------------------------------\n\nTITLE: Upgrade AWS Infrastructure (CDK Deploy)\nDESCRIPTION: This command uses the AWS CDK to apply changes to your AWS infrastructure. It deploys the changes defined in your CDK code, updating your infrastructure to the latest version. The `[env name]` placeholder should be replaced with your specific environment name. The `-c config` parameter specifies the configuration file to use.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/self-hosting/install-on-aws.md#_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nnpx cdk deploy -c config=medplum.[env name].config.json\n```\n\n----------------------------------------\n\nTITLE: FHIR Search with _include:iterate (TypeScript)\nDESCRIPTION: This TypeScript code snippet demonstrates how to perform a FHIR search with the `_include:iterate` parameter to recursively retrieve linked resources such as Patient and Practitioner related to Observation resources. It showcases a basic search for Observation resources and includes related Patient and Practitioner resources in the same bundle, traversing multiple levels of references. Dependencies include the Medplum client library.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/search/includes.mdx#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n{ExampleCode}\n```\n\n----------------------------------------\n\nTITLE: Creating Bot with cURL\nDESCRIPTION: This bash script demonstrates how to create a new Medplum Bot using cURL. It sends a POST request to the Medplum API endpoint with the required authorization header, content type, and a JSON payload containing the bot's details.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/api/project-admin/bot.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncurl https://api.medplum.com/admin/projects/:projectId/bot \\\n  -H \"Authorization: Bearer $TOKEN\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n  \"name\": \"Hello World Bot\",\n  \"description\": \"Hello world\",\n  \"accessPolicy\": {\n    \"reference\": \"AccessPolicy/:access-policy-id\"\n  }\n}'\n```\n\n----------------------------------------\n\nTITLE: Search CareTeam Members for Patient (CLI)\nDESCRIPTION: This CLI example shows how to search for a Patient's CareTeam members. The example uses _revinclude to find the CareTeam associated with the Patient and _include:iterate to retrieve the members of the CareTeam (Practitioners and Organizations). It requires a Medplum CLI environment.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/search/includes.mdx#_snippet_18\n\nLANGUAGE: TypeScript\nCODE:\n```\n{ExampleCode}\n```\n\n----------------------------------------\n\nTITLE: Sorting by Last Updated cURL\nDESCRIPTION: This snippet shows how to sort FHIR search results by the last updated time using the `_lastUpdated` parameter, implemented in cURL. The example searches for the most recently updated RiskAssessments resources.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/search/basic-search.mdx#_snippet_26\n\nLANGUAGE: bash\nCODE:\n```\n{ExampleCode}\n```\n\n----------------------------------------\n\nTITLE: Requesting Refresh Tokens - OAuth Login (TypeScript)\nDESCRIPTION: This snippet shows how to request refresh tokens using OAuth login.  Similar to email/password login, it requires the `offline_access` or `offline` scope. The example outlines the process of initiating OAuth flow, retrieving tokens, and handling the authentication results.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/auth/session-management.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst oauthLogin = async (): Promise<void> => {\n  // 1. Create an OAuth2Client.\n  //    The \"redirectUri\" must match one of the values in the ClientApplication resource.\n  const oauth2Client = new OAuth2Client({\n    clientId: 'YOUR_CLIENT_ID',\n    redirectUri: 'http://localhost:3000',\n  });\n\n  // 2. Get the authorize URL.\n  //    This request includes the \"offline_access\" scope.\n  //    Including the \"offline_access\" scope will return a refresh token.\n  const authorizeUrl = oauth2Client.authorizeUrl({\n    scope: 'openid offline_access patient/Patient.read',\n    state: '123',\n  });\n  console.log('authorizeUrl', authorizeUrl);\n\n  // 3. Simulate a redirect to the authorize URL.\n  //    In a real application, you would redirect the user to the authorize URL.\n  //    The user would then login and authorize the application.\n  //    The authorization server would then redirect the user back to the redirect URI.\n  const url = new URL(authorizeUrl);\n  url.searchParams.set('code', 'AUTHORIZATION_CODE');\n\n  // 4. Exchange the authorization code for an access token.\n  const tokenResult = await oauth2Client.getToken(url.toString());\n  console.log('tokenResult', tokenResult);\n\n  const accessToken = tokenResult.accessToken;\n  const refreshToken = tokenResult.refreshToken;\n\n  console.log('accessToken', accessToken);\n  console.log('refreshToken', refreshToken);\n\n  // 5. Launch the Medplum client with the access token.\n  const medplum = new MedplumClient({\n    accessToken,\n  });\n\n  // 6. Read a Patient resource.\n  const patient = await medplum.readResource('Patient', '123');\n  console.log('Patient', patient);\n};\n\n```\n\n----------------------------------------\n\nTITLE: Body Temperature Observation Example\nDESCRIPTION: This code snippet demonstrates a basic reading of body temperature as a FHIR Observation resource.  It includes the LOINC code for body temperature (8310-5), the temperature value, unit (degrees Fahrenheit), and status (final). The snippet showcases how to use the `valueQuantity` field to represent the numerical value and unit of the observation.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/charting/capturing-vital-signs.mdx#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"resourceType\": \"Observation\",\n  \"id\": \"example-observation-1\",\n  \"code\": {\n    \"system\": \"http://loinc.org\",\n    \"code\": \"8310-5\",\n    \"display\": \"Body temperature\",\n  },\n  \"valueQuantity\": {\n    \"value\": 98.2,\n    \"unit\": \"degrees Fahrenheit\",\n    \"system\": \"http://unitsofmeasure.org/\",\n    \"code\": \"[degF]\",\n  },\n  \"status\": \"final\",\n}\n```\n\n----------------------------------------\n\nTITLE: Download PDF Data TypeScript\nDESCRIPTION: This snippet downloads the PDF data from the Medplum server using the provided `binaryId`. It retrieves the `Binary` resource and extracts the data.  The output is the raw binary data of the PDF, which can be used for further processing or uploading to a third-party service.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/bots/file-uploads.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nasync function downloadPdf(medplum: MedplumClient, binaryId: string): Promise<Buffer> {\n  const binary = await medplum.readBinary(binaryId);\n  return Buffer.from(binary.data as string, 'base64');\n}\n```\n\n----------------------------------------\n\nTITLE: Execute Bot by Identifier (POST) - TypeScript\nDESCRIPTION: This snippet shows how to execute a Medplum Bot by its Identifier using the `executeBot` method of the `MedplumClient`. It uses the `identifier` parameter, which accepts an `Identifier` object or a string representation.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/api/fhir/operations/bot-execute.mdx#_snippet_6\n\nLANGUAGE: TypeScript\nCODE:\n```\n{ExampleCode}\n```\n\n----------------------------------------\n\nTITLE: Example Config with External Secrets (JavaScript)\nDESCRIPTION: Provides an example configuration file demonstrating how to utilize external secrets for settings such as the API port. It fetches the API port from AWS SSM Parameter Store.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/self-hosting/config-settings.md#_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"region\": \"us-east-1\",\n  \"apiPort\": {\n    \"system\": \"aws_ssm_parameter_store\",\n    \"key\": \"apiPort\",\n    \"type\": \"number\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Create Communication Mutation (GraphQL)\nDESCRIPTION: This GraphQL mutation creates a new Communication resource with an array of CommunicationPayload types. It demonstrates the use of built-in types for complex nested fields.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/graphql/mutations.mdx#_snippet_6\n\nLANGUAGE: graphql\nCODE:\n```\n{ExampleCode}\n```\n\n----------------------------------------\n\nTITLE: Bot Handler Function Signature in TypeScript\nDESCRIPTION: This snippet shows the required function signature for a Medplum Bot written in TypeScript. It imports necessary modules from `@medplum/core` and defines an asynchronous `handler` function that accepts a `MedplumClient` and `BotEvent` as arguments.  It returns a Promise of type any. This function is the entry point for the bot's logic.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/bots/bots-in-production.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { MedplumClient, BotEvent } from '@medplum/core';\nexport async function handler(medplum: MedplumClient, event: BotEvent): Promise<any> {\n  // Your code here\n}\n```\n\n----------------------------------------\n\nTITLE: Searching Inclusive Range FHIR\nDESCRIPTION: This snippet demonstrates searching for FHIR resources within an inclusive range using an AND search. The code example shows how to construct the search parameters in TypeScript.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/search/basic-search.mdx#_snippet_17\n\nLANGUAGE: ts\nCODE:\n```\n{ExampleCode}\n```\n\n----------------------------------------\n\nTITLE: FHIR Delete Operation\nDESCRIPTION: Demonstrates the HTTP DELETE request used to perform a soft delete of a FHIR resource. This marks the resource as deleted without permanently removing it from the database. Subsequent GET requests will return a 410 Gone status.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/fhir-datastore/deleting-data.md#_snippet_0\n\nLANGUAGE: HTTP\nCODE:\n```\nDELETE [base]/[resourceType]/[id]\n```\n\n----------------------------------------\n\nTITLE: Obtain OAuth2 Token using cURL\nDESCRIPTION: This cURL command sends a POST request to the Medplum OAuth2 token endpoint to obtain an access token using the Client Credentials Flow. It requires the `MY_CLIENT_ID` and `MY_CLIENT_SECRET` to be set as environment variables or replaced with actual values. The response will contain the access token, token type, and expiration time.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/auth/methods/client-credentials.md#_snippet_0\n\nLANGUAGE: curl\nCODE:\n```\ncurl -X POST https://api.medplum.com/oauth2/token \\\n    -H \"Content-Type: application/x-www-form-urlencoded\" \\\n    -d \"grant_type=client_credentials&client_id=$MY_CLIENT_ID&client_secret=$MY_CLIENT_SECRET\"\n```\n\n----------------------------------------\n\nTITLE: Defining ObservationDefinition for Blood Sodium Level in FHIR with TypeScript\nDESCRIPTION: This code snippet demonstrates how to define an ObservationDefinition resource in FHIR using TypeScript for representing a blood sodium level. It includes essential elements such as LOINC code, quantitative details with units and decimal precision, qualified intervals defining reference ranges, and a preferred report name.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/careplans/diagnostic-catalog/diagnostic-catalog.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ObservationDefinition } from '@medplum/fhirtypes';\n\nexport const observationDefinitionSodium: ObservationDefinition = {\n  resourceType: 'ObservationDefinition',\n  id: 'observation-definition-sodium',\n  status: 'active',\n  code: {\n    coding: [\n      {\n        system: 'http://loinc.org',\n        code: '2951-2',\n        display: 'Sodium [Moles/volume] in Serum or Plasma',\n      },\n    ],\n    text: 'Sodium',\n  },\n  quantitativeDetails: {\n    unit: 'mmol/L',\n    decimalPrecision: 2,\n  },\n  qualifiedInterval: [\n    {\n      category: {\n        coding: [\n          {\n            system: 'http://terminology.hl7.org/CodeSystem/observation-interpretation',\n            code: 'normal',\n            display: 'Normal',\n          },\n        ],\n        text: 'Normal Range',\n      },\n      range: {\n        low: {\n          value: 135.00,\n          unit: 'mmol/L',\n        },\n        high: {\n          value: 145.00,\n          unit: 'mmol/L',\n        },\n      },\n    },\n    {\n      category: {\n        coding: [\n          {\n            system: 'http://terminology.hl7.org/CodeSystem/observation-interpretation',\n            code: 'high',\n            display: 'High',\n          },\n        ],\n        text: 'High',\n      },\n      range: {\n        low: {\n          value: 146.00,\n          unit: 'mmol/L',\n        },\n      },\n    },\n    {\n      category: {\n        coding: [\n          {\n            system: 'http://terminology.hl7.org/CodeSystem/observation-interpretation',\n            code: 'low',\n            display: 'Low',\n          },\n        ],\n        text: 'Low',\n      },\n      range: {\n        high: {\n          value: 134.00,\n          unit: 'mmol/L',\n        },\n      },\n    },\n  ],\n  preferredReportName: 'Sodium Level',\n};\n\n```\n\n----------------------------------------\n\nTITLE: Execute Bot by ID (GET) - CLI\nDESCRIPTION: This snippet shows how to execute a Medplum Bot by its ID using the Medplum CLI with a GET request. The command includes query parameters.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/api/fhir/operations/bot-execute.mdx#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nmedplum login\nmedplum get 'Bot/[id]/$execute?foo=bar'\n```\n\n----------------------------------------\n\nTITLE: Medplum Bulk Export Command\nDESCRIPTION: Executes a bulk export request against a FHIR resource server. Downloads all attachment files. See https://build.fhir.org/ig/HL7/bulk-data/export.html\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/cli/index.md#_snippet_37\n\nLANGUAGE: bash\nCODE:\n```\nmedplum bulk export [options]\n```\n\n----------------------------------------\n\nTITLE: FHIR CodeSystem Lookup Endpoint\nDESCRIPTION: These endpoints define the URL structure for invoking the $lookup operation on a CodeSystem resource. The first uses the base URL, while the second targets a specific CodeSystem instance by its ID.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/api/fhir/operations/codesystem-lookup.md#_snippet_4\n\nLANGUAGE: text\nCODE:\n```\n[baseUrl]/CodeSystem/$lookup\n[baseUrl]/CodeSystem/[id]/$lookup\n```\n\n----------------------------------------\n\nTITLE: Creating Care Plans - TypeScript\nDESCRIPTION: This code snippet demonstrates how to create care plans using TypeScript. It uses the Medplum client library to interact with the Medplum API to create and link resources related to care plans. The bot code shows a simple example of creating sample resources.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/src/pages/products/careplans.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nhttps://github.com/medplum/medplum-demo-bots/blob/main/src/sample-account-setup.ts\n```\n\n----------------------------------------\n\nTITLE: Invite Patient via Medplum API - cURL\nDESCRIPTION: This cURL code snippet demonstrates how to invite a Patient to a Medplum project using a cURL command. It includes the API endpoint, authorization header, content type header, and the request body with the Patient's information and password.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/api/project-admin/invite.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncurl https://api.medplum.com/admin/projects/:projectId/invite \\\n  -H \"Authorization: Bearer $TOKEN\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n  \"resourceType\": \"Patient\",\n  \"firstName\": \"George\",\n  \"lastName\": \"Washington\",\n  \"email\": \"patient.gw@example.gov\",\n  \"password: \"lib3rty0rDe4th!\"\n}'\n```\n\n----------------------------------------\n\nTITLE: Do Not Match List Example\nDESCRIPTION: This code snippet illustrates how to create a \"Do Not Match\" list for a patient using a FHIR `List` resource.  The `subject` field represents the patient, and the `entry` field contains references to other patients that should not be matched to the subject. The example is written in Typescript.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/fhir-datastore/patient-deduplication/matching.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n/* eslint-disable @typescript-eslint/no-explicit-any */\n/*\n * Example code that accompanies the main tutorial.\n * It is hidden on the live site, but is used by documentation tools.\n */\n\nimport { createReference } from '@medplum/core';\nimport { Practitioner, Patient, Observation, Resource, RiskAssessment, List } from '@medplum/fhirtypes';\n\nexport function dupedPatientAssessment(patient1: Patient, patient2: Patient): RiskAssessment {\n  return {\n    resourceType: 'RiskAssessment',\n    status: 'completed',\n    code: {\n      coding: [\n        {\n          system: 'https://medplum.com/fhir/CodeSystem/duplicate-record',\n          code: 'duplicate-patient',\n          display: 'Duplicate Patient'\n        }\n      ],\n      text: 'Duplicate Patient'\n    },\n    subject: createReference(patient1),\n    basis: [createReference(patient2)],\n    occurrenceDateTime: new Date().toISOString(),\n    method: 'email - phone-number - last-name - gender - dob',\n    probabilityDecimal: 85.0,\n    qualitativeRisk: 'Very likely'\n  }\n}\n\nexport function doNotMatch(patient: Patient, patientsNotToMatch: Patient[]): List {\n  return {\n    resourceType: 'List',\n    status: 'current',\n    mode: 'working',\n    code: {\n      coding: [\n        {\n          system: 'https://medplum.com/fhir/CodeSystem/do-not-match',\n          code: 'do-not-match',\n          display: 'Do Not Match'\n        }\n      ],\n      text: 'Do Not Match'\n    },\n    subject: createReference(patient),\n    entry: patientsNotToMatch.map(p => ({\n      item: createReference(p)\n    }))\n  }\n}\n\nexport function createPractitioner(): Practitioner {\n  return {\n    resourceType: 'Practitioner',\n    name: [\n      {\n        family: 'Care Provider',\n        given: ['Example']\n      }\n    ]\n  }\n}\n\nexport function createPatient(): Patient {\n  return {\n    resourceType: 'Patient',\n    name: [\n      {\n        family: 'Patient',\n        given: ['Example']\n      }\n    ],\n    gender: 'female',\n    birthDate: '1990-01-01'\n  }\n}\n\nexport function createObservation(): Observation {\n  return {\n    resourceType: 'Observation',\n    status: 'final',\n    code: {\n      coding: [\n        {\n          system: 'http://loinc.org',\n          code: '8310-5',\n          display: 'Body temperature'\n        }\n      ],\n      text: 'Body temperature'\n    },\n    subject: {\n      reference: 'Patient/example'\n    },\n    effectiveDateTime: new Date().toISOString(),\n    valueQuantity: {\n      value: 37.0,\n      unit: 'C'\n    }\n  }\n}\n\nexport function createResource<T extends Resource>(resource: T): T {\n  return resource;\n}\n```\n\n----------------------------------------\n\nTITLE: Invite a New User as Admin (Typescript)\nDESCRIPTION: This code snippet demonstrates how to invite a new user as an admin to a project using the Medplum client library in Typescript. It requires a valid MedplumClient instance and the target user's email address. The `inviteNewAdminTs` block from the ExampleCode file is used.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/auth/user-management-guide/user-management-guide.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { MedplumClient } from '@medplum/core';\n\nasync function inviteAdmin(medplum: MedplumClient, email: string): Promise<void> {\n  await medplum.createResource({\n    resourceType: 'ProjectMembership',\n    project: medplum.Project.id,\n    user: { identifier: { system: 'email', value: email } },\n    profile: { reference: 'Practitioner/123' }, // Replace with a valid Practitioner resource\n    admin: true\n  });\n  console.log(`Invited ${email} as admin`);\n}\n\n```\n\n----------------------------------------\n\nTITLE: Basic Resource Search with Medplum SDK - cURL\nDESCRIPTION: Shows how to perform a basic resource search using cURL.  The search parameters are appended as query parameters to the URL.  This example searches for Patient resources with the family name 'Doe'.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/search/basic-search.mdx#_snippet_1\n\nLANGUAGE: string\nCODE:\n```\ncurl -H \"Authorization: Bearer $MEDPLUM_CLIENT_SUPER_ADMIN_TOKEN\" \\\n  \"https://api.medplum.com/fhir/R4/Patient?family=Doe\"\n```\n\n----------------------------------------\n\nTITLE: Simple Batch Request Examples\nDESCRIPTION: Demonstrates how to perform a simple batch request to simultaneously search for two patients using Typescript, CLI, and cURL. The full code is available in the ExampleCode variable.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/fhir-datastore/fhir-batch-requests.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n{ExampleCode}\n```\n\nLANGUAGE: bash\nCODE:\n```\n{ExampleCode}\n```\n\nLANGUAGE: bash\nCODE:\n```\n{ExampleCode}\n```\n\n----------------------------------------\n\nTITLE: FHIR Subscription with HMAC Signature\nDESCRIPTION: This JSON snippet shows a FHIR Subscription with an extension for enabling HMAC signatures. It uses the 'subscription-secret' extension and sets the valueString to a cryptographic secret ('abc'). This secret is used to generate a signature for the webhook requests.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/subscriptions/subscription-extensions.md#_snippet_7\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"resourceType\": \"Subscription\",\n  \"reason\": \"test\",\n  \"status\": \"active\",\n  \"criteria\": \"DiagnosticReport?status=completed\",\n  \"channel\": {\n    \"type\": \"rest-hook\",\n    \"endpoint\": \"https://example.com/webhook\"\n  },\n  \"extension\": [\n    {\n      \"url\": \"https://www.medplum.com/fhir/StructureDefinition/subscription-secret\",\n      \"valueString\": \"abc\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Medplum Client Credentials via Environment Variables (Bash)\nDESCRIPTION: This snippet shows how to set the `MEDPLUM_CLIENT_ID` and `MEDPLUM_CLIENT_SECRET` environment variables using the `export` command in bash. These variables are used by the Medplum CLI to authenticate with the Medplum server. The client credentials workflow is a security measure used to prevent unauthorized users from modifying bots.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/bots/bots-in-production.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nexport MEDPLUM_CLIENT_ID=<YOUR_CLIENT_ID>\nexport MEDPLUM_CLIENT_SECRET=<YOUR_CLIENT_SECRET>\n```\n\n----------------------------------------\n\nTITLE: Binding Input to ValueSet\nDESCRIPTION: This JSX snippet demonstrates how to bind a `CodingInput` React component to a ValueSet using the `binding` prop. The `onChange` prop is a callback function that is called when the user selects a code from the typeahead. The callback receives a `Coding` object that contains the selected code, system, and display value.  The example also imports necessary types and React components from the `@medplum` libraries.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/terminology/medplum-terminology-services.md#_snippet_2\n\nLANGUAGE: JSX\nCODE:\n```\nimport { Coding } from '@medplum/fhirtypes';\nimport { CodingInput } from '@medplum/react';\n\n<CodingInput\n  name=\"vital-sign-code\"\n  binding=\"http://example.com/ValueSet/vitals\"\n  onChange={(c: Coding) => {\n    console.log('User selected: ' + c.display + ' (' + c.system + '|' + c.code + ')');\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Displaying Family Group JSON\nDESCRIPTION: This snippet displays a JSON representation of a FHIR Group resource, demonstrating how to represent a family as a single unit. It uses the Group.member property to reference individual patients within the group, allowing for the representation of family relationships without duplicating data.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/fhir-datastore/family-relationships/family-relationships.mdx#_snippet_3\n\nLANGUAGE: js\nCODE:\n```\n {JSON.stringify(\n    SimpsonsFamily,\n    ['resourceType', 'id', 'type', 'actual', 'entity', 'member', 'reference', 'display'],\n    2\n  )}\n```\n\n----------------------------------------\n\nTITLE: Create Communication Mutation (Typescript)\nDESCRIPTION: This Typescript code creates a new Communication resource with an array of CommunicationPayload types. It demonstrates the use of built-in types for complex nested fields in Typescript.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/graphql/mutations.mdx#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n{ExampleCode}\n```\n\n----------------------------------------\n\nTITLE: Get Patient by ID Response\nDESCRIPTION: This TypeScript code represents the expected response structure when fetching a Patient resource by ID. It defines the structure of the JSON object returned by the Medplum GraphQL API, including fields like resourceType, id, name, and address.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/graphql/basic-queries.mdx#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n{ExampleCode}\n```\n\n----------------------------------------\n\nTITLE: Create Patient Mutation (GraphQL)\nDESCRIPTION: This GraphQL mutation creates a new Patient resource. It uses the `PatientCreate` mutation and includes example fields for the patient's name and birthDate. The mutation returns the newly created patient resource.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/graphql/mutations.mdx#_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\n{ExampleCode}\n```\n\n----------------------------------------\n\nTITLE: Correct Patient Definition (TypeScript)\nDESCRIPTION: This code demonstrates the correct usage of the `Patient` resource from `@medplum/fhirtypes`, ensuring that the `name` property is an array of `HumanName` objects. The `given` and `family` fields are correctly defined within the `HumanName` objects.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/fhirtypes/README.md#_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { Patient } from '@medplum/fhirtypes';\n\nconst myPatient: Patient = {\n  resourceType: 'Patient',\n  name: [\n    {\n      given: ['George'],\n      family: 'Washington',\n    },\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Create Resource\nDESCRIPTION: Creates a new FHIR resource using the `createResource` method. It takes a FHIR resource object as input and returns a Promise that resolves to the created resource. Requires a valid FHIR resource object.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/core/README.md#_snippet_7\n\nLANGUAGE: TypeScript\nCODE:\n```\nmedplum.createResource({\n  resourceType: 'Observation',\n  subject: {\n    reference: 'Patient/123',\n  },\n  valueQuantity: {\n    // ...\n  },\n  // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Practitioner Resource - Typescript\nDESCRIPTION: Demonstrates how to create a Practitioner resource using the `createResource` method of the Medplum client. It showcases the syntax and usage of the method for creating new FHIR data.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/fhir-datastore/creating-data.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst practitioner: fhir.Practitioner = {\n  resourceType: 'Practitioner',\n  name: [\n    {\n      family: 'Smith',\n      given: ['John']\n    }\n  ]\n};\n\nconst created = await medplum.createResource(practitioner);\nconsole.log('Created', created);\n```\n\n----------------------------------------\n\nTITLE: Multiple Patient Session Flowchart\nDESCRIPTION: Mermaid flowchart illustrating the representation of multiple patients in an asynchronous encounter session.  It shows a parent 'Encounter' resource that is the session linked to 'Communication' resources, with child 'Encounter' resources representing individual patients linked to the session.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/communications/async-encounters/async-encounters.md#_snippet_1\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart RL\n    subgraph Session\n       A[<table><thead><tr><th>Encounter</th></tr></thead></table>]\n    end\n\n    subgraph Medical Encounter\n        B[<table><thead><tr><th>Encounter</th></tr></thead><tbody><tr><td><em>Patient A</em></td></tr></tobdy></table>]\n        C[<table><thead><tr><th>Encounter</th></tr></thead><tbody><tr><td><em>Patient B</em></td></tr></tobdy></table>]\n    end\n\n    subgraph Thread Header\n        D[<table><thead><tr><th>Communication</th></tr></thead><tbody><tr><td>topic: Rash</td></tr></tbody></table>]\n    end\n\n    subgraph Messages\n        E[<table><thead><tr><th>Communication</th></tr></thead><tbody><tr><td>I've got a rash on my arm</td></tr></tbody></table>]\n        F[<table><thead><tr><th>Communication</th></tr></thead><tbody><tr><td>Come in right away!</td></tr></tbody></table>]\n    end\n\n    E --> |Communication.partOf| D\n    F --> |Communication.partOf| D\n    D --> |Communication.encounter| A\n    B --> |Encounter.partOf| A\n    C --> |Encounter.partOf| A\n\n```\n\n----------------------------------------\n\nTITLE: Create Patient Mutation Aliased (Typescript)\nDESCRIPTION: This Typescript code creates a new Patient resource with an alias.  It demonstrates how to construct and execute the mutation from a Typescript client, with aliasing for the response. It leverages Medplum's built-in types.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/graphql/mutations.mdx#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n{ExampleCode}\n```\n\n----------------------------------------\n\nTITLE: Creating a DiagnosticReport in TypeScript\nDESCRIPTION: Shows how to create a DiagnosticReport resource, linking it back to the Patient and ServiceRequest. It imports necessary modules and includes error handling. The report summarizes the observations and provides an overall interpretation.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/fhir-datastore/working-with-fhir.mdx#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { DiagnosticReport, MedplumClient, Observation, Patient, ServiceRequest } from '@medplum/core';\n\n/**\n * Creates a diagnostic report for a patient.\n * Links the diagnostic report to the service request and patient.\n */\nasync function createReport(\n  medplum: MedplumClient,\n  patient: Patient,\n  serviceRequest: ServiceRequest,\n  observations: Observation[]\n): Promise<DiagnosticReport> {\n  const report: DiagnosticReport = {\n    resourceType: 'DiagnosticReport',\n    status: 'final',\n    code: {\n      coding: [\n        {\n          system: 'http://loinc.org',\n          code: '4567-9',\n          display: 'Comprehensive Metabolic Panel Report',\n        },\n      ],\n      text: 'Comprehensive Metabolic Panel Report',\n    },\n    subject: {\n      reference: 'Patient/' + patient.id,\n    },\n    serviceRequest: [\n      {\n        reference: 'ServiceRequest/' + serviceRequest.id,\n      },\n    ],\n    result: observations.map((o) => ({\n      reference: 'Observation/' + o.id,\n    })),\n  };\n\n  try {\n    return await medplum.createResource(report);\n  } catch (error: any) {\n    console.log('Could not create report', error);\n    throw error;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Install dependencies using npm\nDESCRIPTION: This command installs the project's dependencies using npm.\nSOURCE: https://github.com/medplum/medplum/blob/main/examples/medplum-demo-bots/src/deduplication/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i\n```\n\n----------------------------------------\n\nTITLE: Set OpenTelemetry Environment Variables\nDESCRIPTION: These environment variables configure the OTLP (OpenTelemetry Protocol) endpoints for traces and metrics.  `OTLP_TRACES_ENDPOINT` specifies the URL where traces should be sent, and `OTLP_METRICS_ENDPOINT` specifies the URL where metrics should be sent.  These variables are crucial for directing telemetry data to the OpenTelemetry Collector.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/self-hosting/opentelemetry.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nexport OTLP_TRACES_ENDPOINT=\"http://localhost:4318/v1/traces\"\nexport OTLP_METRICS_ENDPOINT=\"http://localhost:4318/v1/metrics\"\n```\n\n----------------------------------------\n\nTITLE: Terraform Initialization\nDESCRIPTION: Initializes the Terraform working directory, downloading necessary provider plugins and modules.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/self-hosting/install-on-gcp.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nterraform init\n```\n\n----------------------------------------\n\nTITLE: CDK Diff Command\nDESCRIPTION: This command uses the AWS CDK (Cloud Development Kit) to show the differences between the current infrastructure configuration and the desired configuration specified in the `my-config-file.json` config file. This allows you to preview the changes that will be applied before deploying them.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/self-hosting/opentelemetry.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpx cdk diff -c config=my-config-file.json\n```\n\n----------------------------------------\n\nTITLE: ValueSet Validate Code Request (cURL)\nDESCRIPTION: This cURL command demonstrates how to perform a ValueSet validation request using the $validate-code operation. It sends a POST request with FHIR+JSON content type and includes an authorization header with a bearer token. The request body contains a Parameters resource with the URL of the ValueSet and the coding to validate.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/api/fhir/operations/valueset-validate-code.mdx#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl 'https://api.medplum.com/fhir/R4/ValueSet/$validate-code' \\\n  -X POST \\\n  -H \"Content-Type: application/fhir+json\" \\\n  -H \"Authorization: Bearer $MY_ACCESS_TOKEN\" \\\n  -d '{\"resourceType\":\"Parameters\",\"parameter\":[{\"name\":\"url\",\"valueUri\":\"http://hl7.org/fhir/ValueSet/condition-severity\"},{\"name\":\"coding\",\"valueCoding\":{\"system\":\"http://snomed.info/sct\",\"code\":\"255604002\"}}]}'\n```\n\n----------------------------------------\n\nTITLE: Using `useSubscription` Hook in a React Component (TSX)\nDESCRIPTION: This example demonstrates how to use the `useSubscription` hook in a React component to listen for new Communication resources from a specific sender and update the notification count. It shows how to define the FHIR search criteria and the callback function that handles the subscription event.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/react/use-subscription.md#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nfunction MyComponent(): JSX.Element {\n  const [notificationCount, setNotificationCount] = useState(0);\n\n  useSubscription('Communication?sender=Practitioner/abc-123&recipient=Practitioner/me-456', (bundle: Bundle) => {\n    console.log('Received a message from Practitioner/abc-123!');\n    handleNotificationBundle(bundle); // Do something with the bundle\n    setNotificationCount((s) => s + 1);\n  });\n\n  return <div>Notifications received: {notificationCount}</div>;\n}\n```\n\n----------------------------------------\n\nTITLE: FHIR Search with _include:iterate (cURL)\nDESCRIPTION: This cURL command demonstrates how to perform a FHIR search with the `_include:iterate` parameter to recursively retrieve linked resources using a cURL request. It's an example of a direct HTTP request to the FHIR server to search for Observations and include related Patient and Practitioner resources. The URL must be properly formatted with the correct search parameters and authorization headers.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/search/includes.mdx#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n{ExampleCode}\n```\n\n----------------------------------------\n\nTITLE: Deploy 'find-matching-patients' Medplum Bot\nDESCRIPTION: This command deploys the 'find-matching-patients' bot to the Medplum platform using the Medplum CLI.\nSOURCE: https://github.com/medplum/medplum/blob/main/examples/medplum-demo-bots/src/deduplication/README.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpx medplum bot deploy find-matching-patients\n```\n\n----------------------------------------\n\nTITLE: Getting Total Count in Medplum (TypeScript)\nDESCRIPTION: This TypeScript code snippet shows how to include the total count of matching resources in the search response using the `_total` parameter.  It also demonstrates how to access the total count from the search result bundle.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/search/paginated-search.mdx#_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport async function searchTotal(): Promise<void> {\n  const response = await medplum.searchResources('Patient', {\n    name: 'smith',\n    _total: 'accurate',\n  });\n  console.log(`Found ${response.length} patients`);\n  if (response.bundle) {\n    console.log(`Total: ${response.bundle.total}`);\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Get Patient and Related Persons Modeled as Patient (CLI)\nDESCRIPTION: This CLI example demonstrates how to find a Patient and their RelatedPerson resources when the related persons are modeled as Patient resources. It uses _revinclude and _revinclude:iterate. The example requires a Medplum CLI environment.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/search/includes.mdx#_snippet_12\n\nLANGUAGE: TypeScript\nCODE:\n```\n{ExampleCode}\n```\n\n----------------------------------------\n\nTITLE: Create Observation and DiagnosticReport in TypeScript\nDESCRIPTION: This snippet demonstrates how to create an Observation and DiagnosticReport related to a ServiceRequest after a specimen is collected and analyzed. It's the final step in the lab test workflow, providing the results and updating the ServiceRequest status.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/subscriptions/publish-and-subscribe.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  MedplumClient,\n  createReference,\n  newPatient,\n  randomId,\n  ResourceType,\n  SearchParameter,\n} from '@medplum/core';\nimport {\n  Bundle,\n  Observation,\n  Patient,\n  Reference,\n  RequestGroup,\n  ServiceRequest,\n  Specimen,\n} from '@medplum/fhir';\n\n// report-imports\n\n```\n\nLANGUAGE: typescript\nCODE:\n```\n// create-report\nexport async function createReport(\n  medplum: MedplumClient,\n  patient: Patient,\n  serviceRequest: ServiceRequest,\n  specimen: Specimen\n): Promise<void> {\n  // Create observation\n  const observation: Observation = {\n    resourceType: 'Observation',\n    status: 'final',\n    code: {\n      coding: [\n        {\n          system: 'http://loinc.org',\n          code: '2085-9',\n          display: 'Erythrocytes [#/volume] in Blood by Automated count',\n        },\n      ],\n      text: 'Erythrocytes [#/volume] in Blood by Automated count',\n    },\n    subject: createReference(patient),\n    specimen: createReference(specimen),\n    valueQuantity: {\n      value: 5.2,\n      unit: '10E12/L',\n      system: 'http://unitsofmeasure.org',\n      code: '10E12/L',\n    },\n  };\n\n  const ob = await medplum.create(observation);\n\n  // Create diagnostic report\n  const diagnosticReport = {\n    resourceType: 'DiagnosticReport',\n    status: 'final',\n    code: {\n      coding: [\n        {\n          system: 'http://loinc.org',\n          code: '57783-9',\n          display: 'Diagnostic Procedure',\n        },\n      ],\n      text: 'Diagnostic Procedure',\n    },\n    subject: createReference(patient),\n    specimen: [createReference(specimen)],\n    result: [createReference(ob)],\n  };\n\n  await medplum.create(diagnosticReport);\n\n  await medplum.update<ServiceRequest>({\n    ...serviceRequest,\n    status: 'completed',\n  });\n}\n\n```\n\n----------------------------------------\n\nTITLE: Resulting FHIR JSON with onBehalfOf in meta\nDESCRIPTION: This JSON shows the structure of the response when using the `X-Medplum-On-Behalf-Of` header. The `meta` property includes the `author` (ClientApplication) and `onBehalfOf` (Practitioner).  The `X-Medplum: extended` header is required to get the `meta.author` and `meta.onBehalfOf`.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/auth/methods/on-behalf-of.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"resourceType\": \"Patient\",\n  \"id\": \"00000000-689b-4e20-a3c2-6f55108b432a\",\n  \"meta\": {\n    \"versionId\": \"00000000-b58b-47c8-9fc0-f85627d333c9\",\n    \"lastUpdated\": \"2024-07-13T21:18:45.850Z\",\n    \"author\": {\n      \"reference\": \"ClientApplication/00000000-d361-46f0-adf4-f56da467dc08\",\n      \"display\": \"My Client\"\n    },\n    \"onBehalfOf\": {\n      \"reference\": \"Practitioner/00000000-9886-4b83-a25a-3b99563b8127\",\n      \"display\": \"My Test User\"\n    }\n  },\n  \"name\": [{ \"given\": [\"Homer\"], \"family\": \"Simpson\" }]\n}\n```\n\n----------------------------------------\n\nTITLE: Email/Password Authentication\nDESCRIPTION: Authenticates with Medplum using email and password. This example shows how to use `startLogin()` to initiate the login process, process the code returned by Medplum using `processCode()`, and log the user profile.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/core/README.md#_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst loginResult = await medplum.startLogin({ email, password, remember });\nconst profile = await medplum.processCode(loginResult.code);\nconsole.log(profile);\n```\n\n----------------------------------------\n\nTITLE: Get Patient and Related Persons (cURL)\nDESCRIPTION: This cURL example demonstrates how to search for a Patient and include their RelatedPerson resources.  It uses the _revinclude parameter to fetch RelatedPerson resources that reference the Patient via the patient field.  The example requires a cURL installation and access to the Medplum API.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/search/includes.mdx#_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\n{ExampleCode}\n```\n\n----------------------------------------\n\nTITLE: Searching Greater Than FHIR\nDESCRIPTION: This snippet shows how to search for FHIR resources with a value greater than a specific threshold.  It demonstrates searching for RiskAssessments with a probability greater than 0.8 using the `gt` prefix.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/search/basic-search.mdx#_snippet_15\n\nLANGUAGE: ts\nCODE:\n```\n{ExampleCode}\n```\n\n----------------------------------------\n\nTITLE: Reverse Chained Search (Patient with High Heart Rate Observation) - cURL\nDESCRIPTION: This bash snippet demonstrates a reverse chained search to find Patient resources with an Observation of a high heart rate (Loinc Code 8867-4) using a cURL command.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/search/chained-search.md#_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\ncurl -s -H \"Authorization: Bearer $MEDPLUM_CLIENT_ID\" \\\n  \"https://api.medplum.com/fhir/R4/Patient?_has:Observation:subject:code=8867-4\" | jq\n```\n\n----------------------------------------\n\nTITLE: FHIR Subscription with Custom Status Codes\nDESCRIPTION: This JSON snippet demonstrates a FHIR Subscription with an extension for customizing the HTTP status codes considered successful. It uses the 'subscription-success-codes' extension and sets the valueString to '200-399,404'. This defines that HTTP status codes in the range of 200-399 and 404 are considered successful for the subscription operation.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/subscriptions/subscription-extensions.md#_snippet_11\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"resourceType\": \"Subscription\",\n  \"reason\": \"test\",\n  \"status\": \"active\",\n  \"criteria\": \"DiagnosticReport?status=completed\",\n  \"channel\": {\n    \"type\": \"rest-hook\",\n    \"endpoint\": \"https://example.com/webhook\"\n  },\n  \"extension\": [\n    {\n      \"url\": \"https://medplum.com/fhir/StructureDefinition/subscription-success-codes\",\n      \"valueString\": \"200-399,404\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Create Patient Mutation (Typescript)\nDESCRIPTION: This Typescript code creates a new Patient resource using the `PatientCreate` mutation.  It demonstrates how to construct and execute the mutation from a Typescript client. It leverages Medplum's built-in types.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/graphql/mutations.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n{ExampleCode}\n```\n\n----------------------------------------\n\nTITLE: Get Patient and Related Persons Modeled as Patient (cURL)\nDESCRIPTION: This cURL example shows how to retrieve a Patient and their RelatedPerson resources when the related persons are modeled as Patient resources. It leverages _revinclude and _revinclude:iterate parameters. The example requires a cURL installation and access to the Medplum API.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/search/includes.mdx#_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\n{ExampleCode}\n```\n\n----------------------------------------\n\nTITLE: Find Practitioners at a Location (TypeScript)\nDESCRIPTION: This TypeScript example demonstrates how to search for Practitioners and PractitionerRoles at a specific Location. It uses _revinclude to find PractitionerRoles associated with the Location and _include:iterate to retrieve the corresponding Practitioner resources. The example depends on the Medplum client library.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/search/includes.mdx#_snippet_14\n\nLANGUAGE: TypeScript\nCODE:\n```\n{ExampleCode}\n```\n\n----------------------------------------\n\nTITLE: Terraform Plan\nDESCRIPTION: Generates and displays a Terraform execution plan, allowing review of the proposed changes before applying them.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/self-hosting/install-on-gcp.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nterraform plan\n```\n\n----------------------------------------\n\nTITLE: Set KeyVault Secret using Azure CLI\nDESCRIPTION: Uses the Azure CLI to set a secret in Azure Key Vault using data from a JSON file. It requires the Azure CLI to be installed and configured with appropriate permissions to access the specified Key Vault.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/self-hosting/install-on-azure.md#_snippet_7\n\nLANGUAGE: Azure CLI\nCODE:\n```\naz keyvault secret set --vault-name \"my-keyvault\" --name \"medplum-config\" --file \"secret_data.json\"\n```\n\n----------------------------------------\n\nTITLE: Update Resource\nDESCRIPTION: Updates an existing FHIR resource using the `updateResource` method.  It takes a FHIR resource object as input and returns a Promise that resolves to the updated resource. The resource object must have an `id` property.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/core/README.md#_snippet_11\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst result = await medplum.updateResource({\n  resourceType: 'Patient',\n  id: '123',\n  name: [\n    {\n      family: 'Smith',\n      given: ['John'],\n    },\n  ],\n});\nconsole.log(result.meta.versionId);\n```\n\n----------------------------------------\n\nTITLE: Error Response Example\nDESCRIPTION: Sample error response returned by the token endpoint. The response includes the HTTP status code 400 (Bad Request), Content-Type, and a JSON object containing an \"error\" field with a description of the error condition.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/api/oauth/token.md#_snippet_9\n\nLANGUAGE: JSON\nCODE:\n```\nHTTP/1.1 400 Bad Request\nContent-Type: application/json;charset=UTF-8\n\n{\n    \"error\":\"invalid_request|invalid_client|invalid_grant|unauthorized_client|unsupported_grant_type|\"\n}\n```\n\n----------------------------------------\n\nTITLE: Create Multi-Tenant Access Policy (JSON)\nDESCRIPTION: This AccessPolicy uses the parameterized variable `%current_organization` in the compartment section and for Criteria-based Access Control.  It restricts access to resources based on the organization the user belongs to, defining read and write access based on `Organization`, `Practitioner`, `Questionnaire`, and `Patient` resources. The policy is assigned the ID `multi-tenant-org-policy`.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/access/multi-tenant-access-policy.md#_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"resourceType\": \"AccessPolicy\",\n    \"id\": \"multi-tenant-org-policy\",\n    \"name\": \"Multi-Tenant Organization Access Policy\",\n    \"compartment\": {\n        \"reference\": \"%current_organization\"\n    },\n    \"resource\": [\n        {\n            \"resourceType\": \"ValueSet\"\n        },\n        {\n            \"resourceType\": \"CodeSet\"\n        },\n        {\n            \"resourceType\": \"Organization\",\n            \"criteria\": \"Organization?_id=%current_organization\",\n            \"readonly\": true\n        },\n        {\n            \"resourceType\": \"Practitioner\",\n            \"criteria\": \"Practitioner?organization=%current_organization\"\n        },\n        {\n            \"resourceType\": \"Questionnaire\",\n            \"criteria\": \"Questionnaire?_compartment=Organization/%current_organization\"\n        },\n        {\n            \"resourceType\": \"Patient\",\n            \"criteria\": \"Patient?organization=%current_organization\",\n            \"readonly\": true\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Updating FHIR Resource Fields with REST PATCH\nDESCRIPTION: This TypeScript code snippet uses the Medplum client to perform a targeted, field-level update to a Task resource using the HTTP PATCH method. It includes a `test` operation to ensure that the task has not been modified on the server before applying the changes. This approach is useful in high-concurrency environments.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/blog/2023-09-06-graphql-vs-rest.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// This call assigns the Task to the current user\n// IF AND ONLY IF the the task has not been modified on the server\nawait medplum.patchResource('Task', task.id, [\n  { op: 'test', path: '/meta/versionId', value: task.meta?.versionId },\n  { op: 'replace', path: '/status', value: 'accepted' },\n  { op: 'replace', path: '/owner', value: createReference(currentUser) },\n]);\n```\n\n----------------------------------------\n\nTITLE: Navigate to Helm Chart Directory\nDESCRIPTION: This command changes the current directory to the location of the Helm chart. This step is required before installing the application using Helm.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/self-hosting/install-on-gcp.md#_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\ncd medplum/helm\n```\n\n----------------------------------------\n\nTITLE: FHIR CodeSystem Lookup Response\nDESCRIPTION: This snippet represents a successful (200 OK) response to a CodeSystem $lookup request.  The response is a FHIR Parameters resource containing details of the code, including its name, display, and several properties expressed as nested parts. The properties provide additional information such as LOINC classification, component, and synonyms.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/api/fhir/operations/codesystem-lookup.md#_snippet_1\n\nLANGUAGE: js\nCODE:\n```\n{\n  \"resourceType\": \"Parameters\",\n  \"parameter\": [\n    { \"name\": \"name\", \"valueString\": \"LOINC Code System\" },\n    { \"name\": \"display\", \"valueString\": \"Heart rate\" },\n    {\n      \"name\": \"property\",\n      \"part\": [\n        { \"name\": \"code\", \"valueCode\": \"LN\" },\n        { \"name\": \"value\", \"valueString\": \"Heart rate:NRat:Pt:XXX:Qn\" },\n        { \"name\": \"description\", \"valueString\": \"LOINC official fully specified name\" }\n      ]\n    },\n    {\n      \"name\": \"property\",\n      \"part\": [\n        { \"name\": \"code\", \"valueCode\": \"parent\" },\n        { \"name\": \"value\", \"valueCode\": \"MTHU000084\" },\n        { \"name\": \"description\", \"valueString\": \"A parent code in the Component Hierarchy by System\" }\n      ]\n    },\n    {\n      \"name\": \"property\",\n      \"part\": [\n        { \"name\": \"code\", \"valueCode\": \"parent\" },\n        { \"name\": \"value\", \"valueCode\": \"LP415756-8\" },\n        { \"name\": \"description\", \"valueString\": \"A parent code in the Component Hierarchy by System\" }\n      ]\n    },\n    {\n      \"name\": \"property\",\n      \"part\": [\n        { \"name\": \"code\", \"valueCode\": \"STATUS\" },\n        { \"name\": \"value\", \"valueString\": \"ACTIVE\" },\n        {\n          \"name\": \"description\",\n          \"valueString\": \"Status of the term. Within LOINC, codes with STATUS=DEPRECATED are considered inactive. Current values: ACTIVE, TRIAL, DISCOURAGED, and DEPRECATED\"\n        }\n      ]\n    },\n    {\n      \"name\": \"property\",\n      \"part\": [\n        { \"name\": \"code\", \"valueCode\": \"CLASS\" },\n        { \"name\": \"value\", \"valueString\": \"HRTRATE.ATOM\" },\n        {\n          \"name\": \"description\",\n          \"valueString\": \"An arbitrary classification of terms for grouping related observations together\"\n        }\n      ]\n    },\n    {\n      \"name\": \"property\",\n      \"part\": [\n        { \"name\": \"code\", \"valueCode\": \"COMPONENT\" },\n        { \"name\": \"value\", \"valueString\": \"Heart rate\" },\n        {\n          \"name\": \"description\",\n          \"valueString\": \"First major axis-component or analyte: Analyte Name, Analyte sub-class, Challenge\"\n        }\n      ]\n    },\n    {\n      \"name\": \"property\",\n      \"part\": [\n        { \"name\": \"code\", \"valueCode\": \"CLASSTYPE\" },\n        { \"name\": \"value\", \"valueString\": \"2\" },\n        {\n          \"name\": \"description\",\n          \"valueString\": \"1=Laboratory class; 2=Clinical class; 3=Claims attachments; 4=Surveys\"\n        }\n      ]\n    },\n    {\n      \"name\": \"property\",\n      \"part\": [\n        { \"name\": \"code\", \"valueCode\": \"COMMON_TEST_RANK\" },\n        { \"name\": \"value\", \"valueString\": \"18\" },\n        {\n          \"name\": \"description\",\n          \"valueString\": \"Ranking of approximately 2000 common tests performed by laboratories in USA.\"\n        }\n      ]\n    },\n    {\n      \"name\": \"property\",\n      \"part\": [\n        { \"name\": \"code\", \"valueCode\": \"SYSTEM\" },\n        { \"name\": \"value\", \"valueString\": \"XXX\" },\n        { \"name\": \"description\", \"valueString\": \"Fourth major axis-type of specimen or system: System (Sample) Type\" }\n      ]\n    },\n    {\n      \"name\": \"property\",\n      \"part\": [\n        { \"name\": \"code\", \"valueCode\": \"PROPERTY\" },\n        { \"name\": \"value\", \"valueString\": \"NRat\" },\n        {\n          \"name\": \"description\",\n          \"valueString\": \"Second major axis-property observed: Kind of Property (also called kind of quantity)\"\n        }\n      ]\n    },\n    {\n      \"name\": \"property\",\n      \"part\": [\n        { \"name\": \"code\", \"valueCode\": \"TIME_ASPCT\" },\n        { \"name\": \"value\", \"valueString\": \"Pt\" },\n        {\n          \"name\": \"description\",\n          \"valueString\": \"Third major axis-timing of the measurement: Time Aspect (Point or moment in time vs. time interval)\"\n        }\n      ]\n    },\n    {\n      \"name\": \"property\",\n      \"part\": [\n        { \"name\": \"code\", \"valueCode\": \"SCALE_TYP\" },\n        { \"name\": \"value\", \"valueString\": \"Qn\" },\n        {\n          \"name\": \"description\",\n          \"valueString\": \"Fifth major axis-scale of measurement: Type of Scale\"\n        }\n      ]\n    },\n    {\n      \"name\": \"property\",\n      \"part\": [\n        { \"name\": \"code\", \"valueCode\": \"CONSUMER_NAME\" },\n        { \"name\": \"value\", \"valueString\": \"Heart rate\" },\n        {\n          \"name\": \"description\",\n          \"valueString\": \"An experimental (beta) consumer friendly name for this item. The intent is to provide a test name that health care consumers will recognize.\"\n        }\n      ]\n    },\n    {\n      \"name\": \"property\",\n      \"part\": [\n        { \"name\": \"code\", \"valueCode\": \"RELATEDNAMES2\" },\n        {\n          \"name\": \"value\",\n          \"valueString\": \"Count/time; Heart beat; HEART RATE.ATOM; Misc; Miscellaneous; nRate; Number rate; Number Rate = Count/Time; Other; Point in time; Pulse; QNT; Quan; Quant; Quantitative; Random; Spec; To be specified in another part of the message; Unspecified\"\n        },\n        {\n          \"name\": \"description\",\n          \"valueString\": \"This field was introduced in version 2.05. It contains synonyms for each of the parts of the fully specified LOINC name (component, property, time, system, scale, method).\"\n        }\n      ]\n    },\n    {\n      \"name\": \"property\",\n      \"part\": [\n        { \"name\": \"code\", \"valueCode\": \"EXAMPLE_UNITS\" },\n        { \"name\": \"value\", \"valueString\": \"beats/min\" },\n        {\n          \"name\": \"description\",\n          \"valueString\": \"This field is populated with a combination of submitters units and units that people have sent us. Its purpose is to show users representative, but not necessarily recommended, units in which data could be sent for this term.\"\n        }\n      ]\n    },\n    {\n      \"name\": \"property\",\n      \"part\": [\n        { \"name\": \"code\", \"valueCode\": \"EXAMPLE_UCUM_UNITS\" },\n        { \"name\": \"value\", \"valueString\": \"{beats}/min;{counts/min}\" },\n        {\n          \"name\": \"description\",\n          \"valueString\": \"The Unified Code for Units of Measure (UCUM) is a code system intended to include all units of measures being contemporarily used in international science, engineering, and business. (www.unitsofmeasure.org) This field contains example units of measures for this term expressed as UCUM units.\"\n        }\n      ]\n    },\n    {\n      \"name\": \"property\",\n      \"part\": [\n        { \"name\": \"code\", \"valueCode\": \"AssociatedObservations\" },\n        { \"name\": \"value\", \"valueString\": \"89263-8\" },\n        {\n          \"name\": \"description\",\n          \"valueString\": \"A multi-valued, semicolon delimited list of LOINC codes that represent optional associated observation(s) for a clinical observation or laboratory test. A LOINC term in this field may represent a single associated observation or panel containing several associated observations.\"\n        }\n      ]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Execute Bot via cURL with HL7 message\nDESCRIPTION: This cURL command executes a Medplum Bot using an HTTP POST request. It sends an HL7 message as the raw data, specifying the content type as x-application/hl7-v2+er7. An access token is required for authorization.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/bots/hl7-into-fhir.mdx#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST 'https://api.medplum.com/fhir/R4/Bot/<bot-id>/$execute' \\\n--header 'Content-Type: x-application/hl7-v2+er7' \\\n--header 'Authorization: Bearer <access_token>' \\\n--data-raw 'MSH|^~\\&|Primary||CL|PDMT|20200312081842|168866|ADT^A28|203598|T|2.3|||||||||||\nEVN|A28|20200312081842||REG_UPDATE|168866^GLOVER^JASMIN^^^^^^PHC^^^^^10010||\\nPID|1||E3866011^^^EPIC^MRN~900093259^^^EPI^MR||TESTING^UGA||20000312|M|||^^^^^USA^P||||||||123-54-8888|||||N||||||N||\\nPD1|||PHYSICIANS ATLANTIC STATION^^10010|||||||||||||||\\nPV1|1|N||||||||||||||||||||||||||||||||||||||||||||||||||||\\nPV2||||||||||||||||||||||N|||||||||||||||||||||||||||'\n```\n\n----------------------------------------\n\nTITLE: Resource Search with OR Criteria - cURL\nDESCRIPTION: Demonstrates performing an OR search using cURL by specifying comma separated values for a query parameter. This example searches for patients with either the given name 'Alice' or the given name 'Bob'.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/search/basic-search.mdx#_snippet_6\n\nLANGUAGE: string\nCODE:\n```\ncurl -H \"Authorization: Bearer $MEDPLUM_CLIENT_SUPER_ADMIN_TOKEN\" \\\n  \"https://api.medplum.com/fhir/R4/Patient?given=Alice,Bob\"\n```\n\n----------------------------------------\n\nTITLE: Update Patient Mutation (Typescript)\nDESCRIPTION: This Typescript code updates an existing Patient resource using the `PatientUpdateTS` mutation. It demonstrates how to construct and execute the mutation from a Typescript client, specifying the ID of the resource to update.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/graphql/mutations.mdx#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n{ExampleCode}\n```\n\n----------------------------------------\n\nTITLE: FHIR Subscription Object with Extension\nDESCRIPTION: A complete FHIR Subscription object that includes a custom extension. In this example, the extension sets the maximum number of attempts for the subscription using the 'subscription-max-attempts' extension URL. The valueInteger field specifies the number of attempts.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/subscriptions/subscription-extensions.md#_snippet_2\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"resourceType\": \"Subscription\",\n  \"reason\": \"test\",\n  \"status\": \"active\",\n  \"criteria\": \"Patient\",\n  \"channel\": {\n    \"type\": \"rest-hook\",\n    \"endpoint\": \"https://example.com/webhook\"\n  },\n  \"extension\": [\n    {\n      \"url\": \"https://medplum.com/fhir/StructureDefinition/subscription-max-attempts\",\n      \"valueInteger\": 3\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Practitioner Resource - cURL\nDESCRIPTION: Demonstrates how to create a Practitioner resource using cURL. It details the HTTP POST request required to create data, including the necessary headers and JSON payload.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/fhir-datastore/creating-data.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncurl --request POST \\\n  --url https://api.medplum.com/fhir/R4/Practitioner \\\n  --header 'Content-Type: application/fhir+json' \\\n  --header 'Authorization: Bearer YOUR_ACCESS_TOKEN' \\\n  --data '{\n  \"resourceType\": \"Practitioner\",\n  \"name\": [\n    {\n      \"family\": \"Smith\",\n      \"given\": [\"John\"]\n    }\n  ]\n}'\n```\n\n----------------------------------------\n\nTITLE: Creating a Practitioner Resource - CLI\nDESCRIPTION: Demonstrates how to create a Practitioner resource using the Medplum CLI.  Shows the command-line syntax for creating resources and specifying the resource data.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/fhir-datastore/creating-data.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmedplum create Practitioner \\\n  --family Smith \\\n  --given John\n```\n\n----------------------------------------\n\nTITLE: Resource Search with :not Modifier - TypeScript\nDESCRIPTION: Demonstrates how to exclude specific values from results using the `:not` search modifier. This example searches for all Tasks where the status is _not_ 'completed'.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/search/basic-search.mdx#_snippet_9\n\nLANGUAGE: string\nCODE:\n```\nconst tasks = await medplum.searchResources('Task', {\n  status$not: 'completed'\n});\n\nconsole.log(tasks.length);\n```\n\n----------------------------------------\n\nTITLE: Configuring Database Connection (JSON)\nDESCRIPTION: Demonstrates how to configure database connection details using a JSON config file. This includes host, port, database name, username, and password. SSL settings can also be configured within the database object.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/self-hosting/config-settings.md#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"database\": {\n    \"host\": \"localhost\",\n    \"port\": 5432,\n    \"dbname\": \"medplum\",\n    \"username\": \"medplum\",\n    \"password\": \"medplum\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Execute Bot by Identifier (GET) - cURL\nDESCRIPTION: This snippet demonstrates how to execute a Medplum Bot by its Identifier using cURL with a GET request. It includes the identifier as a query parameter.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/api/fhir/operations/bot-execute.mdx#_snippet_11\n\nLANGUAGE: cURL\nCODE:\n```\ncurl 'https://api.medplum.com/fhir/R4/Bot/$execute?identifier=https://example.com/bots|1234'\\\n  -H \"Authorization: Bearer $MY_ACCESS_TOKEN\"\n```\n\n----------------------------------------\n\nTITLE: Basic Medplum Provider Setup\nDESCRIPTION: Illustrates the basic setup of `MedplumProvider` in a React application.  It initializes a `MedplumClient` and wraps the application's components within the `MedplumProvider` to make the Medplum client available to all child components.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/react/README.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { MedplumClient } from '@medplum/core';\nimport { MedplumProvider } from '@medplum/react';\n\nconst medplum = new MedplumClient();\n\nexport function App() {\n  return (\n    <MedplumProvider medplum={medplum}>\n      <MyPage1 />\n      <MyPage2 />\n      <Etc />\n    </MedplumProvider>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: HL7 OBR Segment Example\nDESCRIPTION: This code snippet shows an example of an OBR (Observation Request) segment in an HL7 ORM^O01 message. It specifies the test or service requested, including the requested date/time and reason for the test.  Key data includes set ID, placer order number, universal service ID, requested date/time, and principal result interpreter.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/integration/hl7-interfacing/orders-and-results.md#_snippet_4\n\nLANGUAGE: hl7\nCODE:\n```\nOBR|1|12345678|456789^LabSystem|100^Complete Blood Count^L|||202304150800|||||Nausea and vomiting||123456^Smith^Jane^A^^Dr.|^Lab^Room 101||||202304151200||Lab|||Blood Test\n```\n\n----------------------------------------\n\nTITLE: Output Parameters Resource\nDESCRIPTION: This JSON payload demonstrates the output format of the `$set-accounts` operation, using a FHIR Parameters resource. The `resourcesUpdated` parameter indicates the number of resources in the patient's compartment that were successfully updated with the provided account references.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/api/fhir/operations/patient-set-accounts.md#_snippet_2\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"resourceType\": \"Parameters\",\n  \"parameter\": [\n    {\n      \"name\": \"resourcesUpdated\",\n      \"valueInteger\": 3\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Coverage Eligibility Request for Consultation in Typescript\nDESCRIPTION: This code snippet represents a CoverageEligibilityRequest for a consultation. It demonstrates the structure of the request, including the item details, such as category, productOrService, diagnosis, provider, quantity, unitPrice, facility, and detail. It is written in Typescript.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/billing/insurance-eligibility-checks.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n{ExampleCode}\n```\n\n----------------------------------------\n\nTITLE: CDK Config Example (JSON)\nDESCRIPTION: This is an example CDK config file in JSON format, used to configure the Medplum staging environment.  It defines infrastructure settings such as AWS account number, region, domain names, SSL certificate ARNs, storage bucket name, and other resource configurations. The keys represent various configuration options, while the values are specific to the staging environment.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/self-hosting/config-settings.md#_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"name\": \"staging\",\n  \"stackName\": \"MedplumStagingStack\",\n  \"accountNumber\": \"647991932601\",\n  \"region\": \"us-east-1\",\n  \"domainName\": \"medplum.com\",\n  \"apiDomainName\": \"api.staging.medplum.com\",\n  \"apiPort\": 5000,\n  \"apiSslCertArn\": \"arn:aws:acm:us-east-1:647991932601:certificate/159b257b-a180-49c6-b188-4dc962d8e708\",\n  \"appDomainName\": \"app.staging.medplum.com\",\n  \"appSslCertArn\": \"arn:aws:acm:us-east-1:647991932601:certificate/b0d65b27-2ea8-4377-82e1-c41aa067655b\",\n  \"storageBucketName\": \"medplum-staging-storage\",\n  \"storageDomainName\": \"storage.staging.medplum.com\",\n  \"storageSslCertArn\": \"arn:aws:acm:us-east-1:647991932601:certificate/2205bb8c-7da9-4992-b8ec-c2c79b43b586\",\n  \"storagePublicKey\": \"-----BEGIN PUBLIC KEY-----\\nMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA3cnmD3HQbJU7WTGT2ZSO\\nLt71c+xQ91m5FAzdFagfkQAG0CeyzHq8VzjLPinLDlOWCwQXfunjoBMP7iyVt/pE\\n46ngR55In3UlzsMySHpUAi740u6oh0VeJOZA1x/FrVRYsxFx4XFJ92gcs5VvdT66\\nwWTX7KznaIrxIvTWz384ogqXfg41QeoIISM2YUjqSMkyx7wY3xGrFvG5UuAAivbr\\ni/ZZkkM2q9frpidpJx4evIuaHZS8fstbHFDbbFFqDMyuk7eAJRea1KH5TsjCHvTK\\n5ANRyzq+mty47TKrI+2AQsxjH4mel2lC/at3udgtmfz1MTT7daFWfDKsVn8h3DsA\\nJwIDAQAB\\n-----END PUBLIC KEY-----\",\n  \"maxAzs\": 2,\n  \"rdsInstances\": 1,\n  \"desiredServerCount\": 1,\n  \"serverImage\": \"medplum/medplum-server:4.0\",\n  \"serverMemory\": 512,\n  \"serverCpu\": 256,\n  \"loadBalancerLoggingEnabled\": true,\n  \"loadBalancerLoggingBucket\": \"medplum-logs-us-east-1\",\n  \"loadBalancerLoggingPrefix\": \"elb-staging\",\n  \"clamscanEnabled\": true,\n  \"clamscanLoggingBucket\": \"medplum-logs-us-east-1\",\n  \"clamscanLoggingPrefix\": \"clamscan\"\n}\n```\n\n----------------------------------------\n\nTITLE: Create Config Repository Bash Commands\nDESCRIPTION: These commands create a new directory for the Medplum CDK configuration, navigate into it, and initialize a new npm project.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/self-hosting/install-on-aws.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmkdir my-medplum-cdk-config\ncd my-medplum-cdk-config\nnpm init -y\n```\n\n----------------------------------------\n\nTITLE: Base64 Encode Certificate (Bash)\nDESCRIPTION: This command encodes a certificate file (Certificate_pkcs12.p12) into a base64 string.  The resulting string can then be used to set the `SM_CLIENT_CERT_FILE_BASE64` environment variable.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/agent/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nbase64 Certificate_pkcs12.p12\n```\n\n----------------------------------------\n\nTITLE: CodeableConcept Example TypeScript\nDESCRIPTION: An example of CodeableConcept used to represent the medication Tylenol using RXNorm and NDC coding systems.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/fhir-basics.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n  {MedicationExample}\n```\n\n----------------------------------------\n\nTITLE: Unauthorized Client Error Response\nDESCRIPTION: Sample HTTP response (302 Found) from the `/oauth2/authorize` endpoint when the client does not have permission to request a `code` or `token`. The response includes the `Location` header with the `redirect_uri` and an `error=unauthorized_client` parameter.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/api/oauth/authorize.md#_snippet_9\n\nLANGUAGE: HTTP\nCODE:\n```\nHTTP 1.1 302\nFound Location: https://client_redirect_uri?error=unauthorized_client\n```\n\n----------------------------------------\n\nTITLE: SCIM User Schema Example (Patient)\nDESCRIPTION: This example shows the JSON structure for a SCIM User resource representing a Patient in Medplum.  The `schemas` property defines the SCIM schema, `userType` specifies the FHIR resource type, and `name` and `emails` provide user information. This JSON would be used in a POST request to create a new user.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/api/scim/users.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"schemas\": [\"urn:ietf:params:scim:schemas:core:2.0:User\"],\n  \"userType\": \"Patient\",\n  \"name\": {\n    \"givenName\": \"Bob\",\n    \"familyName\": \"Jones\"\n  },\n  \"emails\": [{ \"value\": \"bob@example.com\" }]\n}\n```\n\n----------------------------------------\n\nTITLE: Start HL7 Listener using Medplum CLI (Bash)\nDESCRIPTION: This command starts an HL7 listener on port 56000 using the Medplum CLI. It emulates an HL7 device on the network, such as a Radiology Information System or Lab Instrument.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/agent/push.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmedplum hl7 listen 56000\n```\n\n----------------------------------------\n\nTITLE: Medplum Project Invite Command\nDESCRIPTION: Executes the `medplum project invite` command to invite a user to a project.  Requires first name, last name, and email.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/cli/index.md#_snippet_22\n\nLANGUAGE: bash\nCODE:\n```\nmedplum project invite <firstName> <lastName> <email>\n```\n\n----------------------------------------\n\nTITLE: FHIR Subscription for Patient Name Change\nDESCRIPTION: This FHIR Subscription resource is configured to trigger when the `Patient.name` field changes. It uses a FHIRPath expression to compare the previous and current `name` arrays.  The subscription is triggered if the `name` arrays are not exactly the same.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/subscriptions/subscription-extensions.md#_snippet_13\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"resourceType\": \"Subscription\",\n  \"reason\": \"Patient Name Change\",\n  \"status\": \"active\",\n  \"channel\": {\n    \"type\": \"rest-hook\",\n    \"endpoint\": \"https://example.com/webhook\"\n  },\n  \"criteria\": \"Patient\",\n  \"extension\": [\n    {\n      \"url\": \"https://medplum.com/fhir/StructureDefinition/fhir-path-criteria-expression\",\n      \"valueString\": \"%previous.name != %current.name\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Search Count in Medplum (TypeScript)\nDESCRIPTION: This TypeScript code snippet demonstrates how to set the number of items returned per page using the `_count` query parameter in a Medplum search. It imports ExampleCode from a raw loader and renders the code block using MedplumCodeBlock.  The number of Patient resources returned per page is set in this search.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/search/paginated-search.mdx#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport async function searchCount(): Promise<void> {\n  const response = await medplum.searchResources('Patient', {\n    _count: 50,\n  });\n  console.log(`Found ${response.length} patients`);\n}\n\n```\n\n----------------------------------------\n\nTITLE: Invalid Agent Status Response - JSON\nDESCRIPTION: This JSON snippet shows an error response when an Agent ID is not supplied to the operation.  It returns an OperationOutcome resource with an error message.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/agent/status.md#_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"resourceType\": \"OperationOutcome\",\n  \"issue\": [\n    {\n      \"severity\": \"error\",\n      \"code\": \"invalid\",\n      \"details\": {\n        \"text\": \"Must specify agent ID or identifier\"\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Example Bot Code: Hello Patient in TypeScript\nDESCRIPTION: This snippet shows a simple Medplum Bot written in TypeScript that retrieves a patient's first and last name from the event input and logs a greeting to the console. It imports necessary modules from `@medplum/core` and `@medplum/fhirtypes`. This is a basic example to illustrate how to access data within a Medplum Bot.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/bots/bots-in-production.md#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n// src/my-first-bot.ts\nimport { BotEvent, MedplumClient } from '@medplum/core';\nimport { Patient } from '@medplum/fhirtypes';\n\nexport async function handler(medplum: MedplumClient, event: BotEvent): Promise<any> {\n  const patient = event.input as Patient;\n  const firstName = patient.name?.[0]?.given?.[0];\n  const lastName = patient.name?.[0]?.family;\n  console.log(`Hello ${firstName} ${lastName}!`);\n  return true;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a ValueSet in FHIR\nDESCRIPTION: This code snippet demonstrates a FHIR `ValueSet` resource. It defines a group of codes from one or more code systems that relate to a common use case. The example includes codes explicitly listed from LOINC and codes included based on their relationships within the SNOMED CT code system, specifically descendants of the concept with code '118227000'.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/terminology/index.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"resourceType\": \"ValueSet\",\n  \"url\": \"http://example.com/ValueSet/vitals\",\n  \"name\": \"vitals\",\n  \"title\": \"Vital Signs\",\n  \"status\": \"active\",\n  \"compose\": {\n    \"include\": [\n      // Include an explicit list of codes\n      {\n        \"system\": \"http://loinc.org\",\n        \"concept\": [\n          { \"code\": \"8310-5\", \"display\": \"Body temperature\" },\n          { \"code\": \"8462-4\", \"display\": \"Diastolic blood pressure\" },\n          { \"code\": \"8480-6\", \"display\": \"Systolic blood pressure\" },\n          { \"code\": \"8867-4\", \"display\": \"Heart rate\" },\n          { \"code\": \"9279-1\", \"display\": \"Respiratory rate\" }\n        ]\n      },\n      // Includes codes by their relationships or properties within the code system\n      {\n        \"system\": \"http://snomed.info/sct\",\n        \"filter\": [\n          {\n            \"property\": \"concept\",\n            \"op\": \"descendent-of\",\n            \"value\": \"118227000\"\n          }\n        ]\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Dynamic Criteria with `useSubscription` (TSX)\nDESCRIPTION: This example demonstrates how to dynamically update the subscription criteria based on the current user's profile.  It uses `useMemo` to memoize the profile string and updates the subscription when the profile changes. This avoids unnecessary subscription changes when the profile remains the same.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/react/use-subscription.md#_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nfunction MyComponent(): JSX.Element {\n  const profile = useMedplumProfile();\n  const [notificationCount, setNotificationCount] = useState(0);\n\n  // We can track the communications for the current user only\n  const profileStr = useMemo<string>(() => getReferenceString(profile), [profile]);\n\n  useSubscription(`Communication?sender=Practitioner/abc-123&recipient=${profileStr}`, (bundle: Bundle) => {\n    console.log('Received a message from Practitioner/abc-123!');\n    handleNotificationBundle(bundle); // Do something with the bundle\n    setNotificationCount((s) => s + 1);\n  });\n\n  return <div>Notifications received: {notificationCount}</div>;\n}\n```\n\n----------------------------------------\n\nTITLE: Search for Parent Communication Threads (cURL)\nDESCRIPTION: This cURL command retrieves the thread header `Communication` resources by searching for resources where the `partOf` field is missing. This approach is useful for identifying the root communication threads in the system. The cURL command returns the root-level thread headers.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/communications/organizing-communications.mdx#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n{ExampleCode}\n```\n\n----------------------------------------\n\nTITLE: Medplum POST Request\nDESCRIPTION: Executes a `medplum post` request to create or update data in the Medplum API.  Requires the URL and request body.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/cli/index.md#_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nmedplum post <url> <body>\n```\n\n----------------------------------------\n\nTITLE: Initializing MedplumClient\nDESCRIPTION: Creates a new instance of the `MedplumClient` class from the `@medplum/core` library. This is the base object to interact with the Medplum FHIR server using default configurations.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/core/README.md#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { MedplumClient } from '@medplum/core';\n\nconst medplum = new MedplumClient();\n```\n\n----------------------------------------\n\nTITLE: Setting a New Password using Medplum API (TypeScript)\nDESCRIPTION: This code snippet demonstrates how to set a new password using the Medplum API's `auth/setpassword` endpoint.  It requires the `id` (UserSecurityRequest ID), `secret` (security token), and the new `password` as parameters. The endpoint returns 200 OK for success and 400 Bad Request for errors such as incorrect secret or weak password.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/api/auth/setpassword.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nawait medplum.post('auth/setpassword', {\n  id: 'security-request-id',\n  secret: 'security-token',\n  password: 'new-password'\n});\n```\n\n----------------------------------------\n\nTITLE: Defining a ValueSet\nDESCRIPTION: This code defines a ValueSet resource containing a list of vital signs codes from the LOINC code system. The ValueSet is identified by a URL that will be used to reference it in other parts of the application. The `status` is set to active, which enables the ValueSet for use in validation.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/terminology/medplum-terminology-services.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n{\n  \"resourceType\": \"ValueSet\",\n  \"url\": \"http://example.com/ValueSet/vitals\",\n  \"name\": \"vitals\",\n  \"title\": \"Vital Signs\",\n  \"status\": \"active\",\n  \"compose\": {\n    \"include\": [\n      {\n        \"system\": \"http://loinc.org\",\n        \"concept\": [\n          { \"code\": \"8310-5\", \"display\": \"Body temperature\" },\n          { \"code\": \"8462-4\", \"display\": \"Diastolic blood pressure\" },\n          { \"code\": \"8480-6\", \"display\": \"Systolic blood pressure\" },\n          { \"code\": \"8867-4\", \"display\": \"Heart rate\" },\n          { \"code\": \"9279-1\", \"display\": \"Respiratory rate\" }\n        ]\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating References on Clinical Data to Master Patient Record\nDESCRIPTION: This code snippet shows how to update references in clinical data resources (e.g., Encounters, DiagnosticReports) to point to the master `Patient` record after a merge. This ensures that all clinical data is correctly associated with the unified patient record. It involves finding and replacing references in other resources.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/fhir-datastore/patient-deduplication/merging.mdx#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  // Example of code to update references\n}\n```\n\n----------------------------------------\n\nTITLE: FHIR Condition Resource with Conditional Reference in TypeScript\nDESCRIPTION: This example showcases linking a FHIR Condition resource to a Patient resource using a conditional reference based on the patient's identifier from the source system. This avoids the need to look up the Patient's ID in Medplum before writing the Condition. The server automatically resolves the query string to the concrete patient id.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/migration/convert-to-fhir.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Condition } from '@medplum/fhirtypes';\n\nexport const conditionalReferenceExample: Condition = {\n  resourceType: 'Condition',\n  id: 'example',\n  code: {\n    coding: [\n      {\n        system: 'http://your-source-system.com/conditions',\n        code: 'HT001',\n        display: 'Hypertension'\n      }\n    ],\n    text: 'Hypertension'\n  },\n  subject: {\n    reference: 'Patient?identifier=http://your-source-system.com/patients|P001'\n  }\n};\n\n```\n\n----------------------------------------\n\nTITLE: Medplum Bot JavaScript Output Example\nDESCRIPTION: Example JavaScript output after compiling the TypeScript bot code. This is the code that will be deployed to the Medplum runtime.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/cli/index.md#_snippet_35\n\nLANGUAGE: javascript\nCODE:\n```\nexport async function handler(medplum, input) {\n  console.log('Hello world');\n}\n```\n\n----------------------------------------\n\nTITLE: AllergyIntolerance Resource Definition (JSON)\nDESCRIPTION: This snippet represents a JSON definition of the AllergyIntolerance resource. It is used by the ResourcePropertiesTable and SearchParamsTable components to dynamically render the schema elements and search parameters of the FHIR resource.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/api/fhir/resources/allergyintolerance.mdx#_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"resourceType\": \"AllergyIntolerance\",\n  \"properties\": [\n    {\n      \"name\": \"id\",\n      \"type\": \"string\",\n      \"description\": \"Logical id of this artifact\"\n    }\n    // ... more properties ...\n  ],\n  \"searchParameters\": [\n    {\n      \"name\": \"patient\",\n      \"type\": \"reference\",\n      \"description\": \"The patient who has the allergy\"\n    }\n    // ... more search parameters ...\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Delete Resource\nDESCRIPTION: Deletes a FHIR resource using the `deleteResource` method. It takes the resource type and ID as input and returns a Promise.  No return value indicates success.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/core/README.md#_snippet_12\n\nLANGUAGE: TypeScript\nCODE:\n```\nawait medplum.deleteResource('Patient', '123');\n```\n\n----------------------------------------\n\nTITLE: Create ClientApplication with cURL\nDESCRIPTION: This code snippet demonstrates how to create a new ClientApplication using cURL.  It includes the endpoint URL, authorization header with a bearer token, content type header, and request body with parameters like name, description, redirect URI, and access policy. The `$TOKEN` environment variable must be set with a valid Medplum access token, and the `projectId` needs to be replaced with the actual project ID.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/api/project-admin/client.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncurl https://api.medplum.com/admin/projects/:projectId/client \\\n  -H \"Authorization: Bearer $TOKEN\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n  \"name\": \"Hello World Client\",\n  \"description\": \"Hello world\",\n  \"redirectUri\": \"https://example.com/redirect\"\n  \"accessPolicy\": {\n    \"reference\": \"AccessPolicy/:access-policy-id\"\n  }\n}'\n```\n\n----------------------------------------\n\nTITLE: FHIR Observation Multi-component Example JavaScript\nDESCRIPTION: This JavaScript example demonstrates a multi-component FHIR Observation resource, specifically for systolic and diastolic blood pressure.  It showcases the use of the `component` array to represent multiple related observations under a single parent observation.  The example shows how to structure the code, system, display, and valueQuantity properties for each component.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/charting/capturing-vital-signs.mdx#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"resourceType\": \"Observation\",\n  \"id\": \"example-component-observation\",\n  \"code\": {\n    \"system\": \"http://loinc.org\",\n    \"code\": \"85354-9\",\n    \"display\": \"Blood pressure panel with all children optional\",\n  },\n  \"component\": [\n    {\n      \"code\": {\n        \"system\": \"http://loinc.org\",\n        \"code\": \"8480-6\",\n        \"display\": \"Systolic blood pressure\",\n      },\n      \"valueQuantity\": {\n        \"value\": 100,\n        \"unit\": \"mmHg\",\n        \"system\": \"http://unitsofmeasure.org/\",\n        \"code\": \"mm[Hg]\",\n      },\n    },\n    {\n      \"code\": {\n        \"system\": \"http://loinc.org\",\n        \"code\": \"8462-4\",\n        \"display\": \"Diastolic blood pressure\",\n      },\n      \"valueQuantity\": {\n        \"value\": 80,\n        \"unit\": \"mmHg\",\n        \"system\": \"http://unitsofmeasure.org/\",\n        \"code\": \"mm[Hg]\",\n      },\n    },\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: Create Practitioner for Organization A (JSON)\nDESCRIPTION: This JSON snippet defines a `Practitioner` resource and associates them with `Organization A`.  It uses the `membership.access` array to link the practitioner to an `AccessPolicy` and sets the `current_organization` parameter to `Organization/{{organization_a}}`. This ensures that the practitioner only has access to resources belonging to Organization A, according to the access policy.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/access/multi-tenant-access-policy.md#_snippet_5\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"resourceType\": \"Practitioner\",\n    \"firstName\": \"Practitioner\",\n    \"lastName\": \"A.1\",\n    \"email\": \"practitioner.a.1@example.com\",\n    \"sendEmail\": \"false\",\n    \"password\": \"foobar\",\n    \"membership\": {\n        \"access\": [\n            {\n                \"policy\": {\n                    \"reference\": \"AccessPolicy/{{access_policy}}\"\n                },\n\n                \"parameter\": [\n                    {\n                        \"name\": \"current_organization\",\n                        \"valueReference\": {\n                            \"reference\": \"Organization/{{organization_a}}\"\n                        }\n                    }\n                ]\n\n            }\n        ]\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Executing Medplum Commands Globally\nDESCRIPTION: Executes a Medplum command after global installation.  Replace `<command>` and `<args>` with the desired command and arguments.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/cli/index.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nmedplum <command> <args>\n```\n\n----------------------------------------\n\nTITLE: Resource Search Multiple Criteria - cURL\nDESCRIPTION: Shows how to perform an AND search using cURL by including multiple parameters in the query string. This example searches for patients with the given name 'Alice' and the family name 'Smith'.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/search/basic-search.mdx#_snippet_4\n\nLANGUAGE: string\nCODE:\n```\ncurl -H \"Authorization: Bearer $MEDPLUM_CLIENT_SUPER_ADMIN_TOKEN\" \\\n  \"https://api.medplum.com/fhir/R4/Patient?given=Alice&family=Smith\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Caregiver Access via ProjectMembership in JS\nDESCRIPTION: This example demonstrates how to combine the patient access policy template with policy parameterization to grant caregivers access to data on behalf of patients. The `patient` parameter is used to specify the patient for whom access is being granted.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/access/access-policies.md#_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"resourceType\": \"ProjectMembership\",\n  \"access\": [\n    // Provide access to Patients and Diagnostic Reports in Organization/abc\n    {\n      \"policy\": { \"reference\": \"AccessPolicy/patient-access-policy-template\" },\n      \"parameter\": [\n        {\n          \"name\": \"patient\",\n          \"valueReference\": { \"reference\": \"Patient/xyz\" }\n        }\n      ]\n    },\n    // Provide access to Patients and Diagnostic Reports in Organization/def\n    {\n      \"policy\": { \"reference\": \"AccessPolicy/patient-access-policy-template\" },\n      \"parameter\": [\n        {\n          \"name\": \"patient\",\n          \"valueReference\": { \"reference\": \"Patient/uvw\" }\n        }\n      ]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Revoke Current Access Token (cURL)\nDESCRIPTION: Revokes the current access token using the `/oauth2/logout` endpoint. Sends an HTTP POST request to the Medplum API with the `Authorization` header set to `Bearer MY_ACCESS_TOKEN`.  The body is empty JSON.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/auth/logout.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl 'https://api.medplum.com/oauth2/logout' \\\n  -X POST \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer MY_ACCESS_TOKEN\" \\\n  -d '{}'\n```\n\n----------------------------------------\n\nTITLE: SQL Query with Multiple Values for a Search Parameter\nDESCRIPTION: Shows the SQL query for `Observation?_profile=http://hl7.org/fhir/us/core/StructureDefinition/us-core-observation-lab,http://hl7.org/fhir/us/core/StructureDefinition/us-core-observation-social-history`.  The `&&` operator is used to match if arrays have any element in common.  The search parameter `_profile` has multiple values.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/contributing/search-architecture.md#_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nSELECT \"Observation\".\"id\", \"Observation\".\"content\" FROM \"Observation\"\nWHERE (\"Observation\".\"deleted\"=false AND (\n  -- && matches if arrays have any element in common\n  \"Observation\".\"_profile\" IS NOT NULL AND \"Observation\".\"_profile\" && ARRAY[\n    'http://hl7.org/fhir/us/core/StructureDefinition/us-core-observation-lab',\n    'http://hl7.org/fhir/us/core/StructureDefinition/us-core-observation-social-history'\n  ]::TEXT[]\n))\n```\n\n----------------------------------------\n\nTITLE: CodeSystem for Large Imports in FHIR (JavaScript)\nDESCRIPTION: This snippet shows how to create a CodeSystem resource for importing a large number of codes using the `$import` operation. The `content` property is set to `not-present` to indicate that the codes are not included directly in the resource and will be loaded separately.  This requires Super Admin privileges to utilize the `$import` operation.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/terminology/local-codes.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"resourceType\": \"CodeSystem\",\n  \"url\": \"http://example.com/CodeSystem/everything\",\n  \"status\": \"active\",\n  \"content\": \"not-present\",\n}\n```\n\n----------------------------------------\n\nTITLE: Search for Messages in a Specific Thread (TypeScript)\nDESCRIPTION: This TypeScript code retrieves messages for a specific `Communication` thread. It searches for `Communication` resources that reference a particular thread header in the `partOf` field and sorts the messages by their `sent` date. The code sorts the messages chronologically by the 'sent' field.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/communications/organizing-communications.mdx#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n{ExampleCode}\n```\n\n----------------------------------------\n\nTITLE: Medication Fulfillment Order (TypeScript)\nDESCRIPTION: This snippet shows how to categorize a MedicationRequest as a medication fulfillment order (inpatient context) using the `category` field. It utilizes the FHIR MedicationRequest Admin Location value set. This example needs the `ExampleCode` variable to be defined with the actual code.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/medications/representing-prescriptions-and-medication-orders.mdx#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n{ExampleCode}\n```\n\n----------------------------------------\n\nTITLE: Revoke Other Session Access Token (cURL)\nDESCRIPTION: Revokes a specific session access token using the `/auth/revoke` endpoint. Sends an HTTP POST request to the Medplum API with the `Authorization` header and a JSON body containing the `loginId` of the session to revoke.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/auth/logout.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncurl 'https://api.medplum.com/auth/revoke' \\\n  -X POST \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer MY_ACCESS_TOKEN\" \\\n  -d '{\"loginId\":\"MY_LOGIN_ID\"}'\n```\n\n----------------------------------------\n\nTITLE: Creating Resources Using MockClient in Typescript\nDESCRIPTION: This code snippet shows how to create resources in the mock environment using `createResource()` with the `MockClient`. This setup mimics how you would interact with a real `MedplumClient` instance. It creates a Patient, Observation, and DiagnosticReport before a bot invocation.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/bots/unit-testing-bots.mdx#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { MockClient } from '@medplum/mock';\nimport { Patient, Observation, DiagnosticReport } from '@medplum/fhirtypes';\n\ntest('Create Resources', async () => {\n  const medplum = new MockClient();\n\n  const patient: Patient = await medplum.createResource({\n    resourceType: 'Patient',\n    name: [{\n      given: ['Alice']\n    }]\n  });\n\n  const observation: Observation = await medplum.createResource({\n    resourceType: 'Observation',\n    status: 'final',\n    code: {\n      coding: [{\n        system: 'http://loinc.org',\n        code: '8310-5'\n      }]\n    },\n    subject: {\n      reference: 'Patient/' + patient.id\n    },\n    valueQuantity: {\n      value: 36.6,\n      unit: 'Cel'\n    }\n  });\n\n  const diagnosticReport: DiagnosticReport = await medplum.createResource({\n    resourceType: 'DiagnosticReport',\n    status: 'final',\n    code: {\n      coding: [{\n        system: 'http://loinc.org',\n        code: '57714-2'\n      }]\n    },\n    subject: {\n      reference: 'Patient/' + patient.id\n    },\n    result: [{\n      reference: 'Observation/' + observation.id\n    }]\n  });\n\n  expect(patient).toBeDefined();\n  expect(observation).toBeDefined();\n  expect(diagnosticReport).toBeDefined();\n});\n```\n\n----------------------------------------\n\nTITLE: Clone Medplum Repository\nDESCRIPTION: Clones the Medplum repository from GitHub and navigates to the Terraform Azure directory. This step is the first step in the deployment process and is needed to access Terraform configurations.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/self-hosting/install-on-azure.md#_snippet_0\n\nLANGUAGE: Azure CLI\nCODE:\n```\ngit clone https://github.com/medplum/medplum\ncd terraform/azure/\n```\n\n----------------------------------------\n\nTITLE: Read Resource Version\nDESCRIPTION: Reads a specific version of a FHIR resource using the `readVersion` method. It takes the resource type, ID, and version ID as input and returns a Promise that resolves to the specified resource version.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/core/README.md#_snippet_10\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst version = await medplum.readVersion('Patient', '123', '456');\n```\n\n----------------------------------------\n\nTITLE: Conditional Upsert using Medplum SDK (TypeScript)\nDESCRIPTION: This snippet demonstrates how to perform a conditional update using the Medplum SDK in TypeScript. It uses a PUT operation with a search query in the URL to either create a new resource if none are found or update an existing resource if one is found. It ensures idempotency of the data migration pipeline.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/migration/migration-pipelines.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport ExampleCode from '!!raw-loader!@site/../examples/src/migration/migration-pipelines.ts';\n<MedplumCodeBlock language=\"ts\" selectBlocks=\"medplum-sdk-upsert\">\n      {ExampleCode}\n    </MedplumCodeBlock>\n```\n\n----------------------------------------\n\nTITLE: Create PDF Binary Resource TypeScript\nDESCRIPTION: This snippet demonstrates how to create a PDF binary resource using Medplum's `createPdf` function. It takes a document definition and returns a `Binary` resource ID.  This resource is then stored on the Medplum server.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/bots/file-uploads.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nasync function createPdf(medplum: MedplumClient): Promise<string> {\n  const binary = await medplum.createPdf({\n    resourceType: 'DocumentReference',\n    status: 'current',\n    content: [\n      {\n        attachment: {\n          contentType: 'application/pdf',\n        },\n      },\n    ],\n  });\n  return binary.id as string;\n}\n```\n\n----------------------------------------\n\nTITLE: FHIR Patient Resource for Jane Smith in TypeScript\nDESCRIPTION: This is an example of a FHIR Patient resource for Jane Smith with the patient_id 'P002'. It includes the identifier from the source system, name, gender, and birth date.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/migration/convert-to-fhir.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Patient } from '@medplum/fhirtypes';\n\nexport const janeSmithPatient: Patient = {\n  resourceType: 'Patient',\n  resourceType: 'Patient',\n  id: 'jane-smith',\n  identifier: [\n    {\n      system: 'http://your-source-system.com/patients',\n      value: 'P002'\n    }\n  ],\n  name: [\n    {\n      family: 'Smith',\n      given: ['Jane']\n    }\n  ],\n  gender: 'female',\n  birthDate: '1992-11-30'\n};\n\n```\n\n----------------------------------------\n\nTITLE: Immunization Resource Definition JSON\nDESCRIPTION: The JSON file located at `@site/static/data/resourceDefinitions/immunization.json` contains the schema and search parameter definitions for the FHIR Immunization resource. This data is used to populate the resource properties and search parameters tables on the Immunization documentation page.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/api/fhir/resources/immunization.mdx#_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\ndefinition.properties.filter((p) => !(p.inherited && p.base.includes('Resource')))\n```\n\nLANGUAGE: JSON\nCODE:\n```\ndefinition.searchParameters\n```\n\nLANGUAGE: JSON\nCODE:\n```\ndefinition.properties.filter((p) => p.inherited && p.base.includes('Resource'))\n```\n\n----------------------------------------\n\nTITLE: CodeSystem Validate Code Operation\nDESCRIPTION: This snippet shows the URL structure for invoking the $validate-code operation on a CodeSystem. It can be invoked at the base URL or on a specific CodeSystem instance by ID.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/api/fhir/operations/codesystem-validate-code.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n[baseUrl]/CodeSystem/$validate-code\n[baseUrl]/CodeSystem/[id]/$validate-code\n```\n\n----------------------------------------\n\nTITLE: Implementing Project $init FHIR Operation in TypeScript\nDESCRIPTION: This code snippet demonstrates the implementation of the Project $init FHIR operation using TypeScript. It includes the definition of an OperationDefinition resource, the parsing of input parameters using parseInputParameters, the handling of operation business logic, and the building of output parameters using buildOutputParameters. It leverages the @medplum/core and @medplum/fhirtypes libraries, as well as express for request/response handling.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/server/src/fhir/operations/README.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { buildOutputParameters, parseInputParameters } from './utils/parameters';\nimport { created } from '@medplum/core';\nimport { Reference, OperationDefinition } from '@medplum/fhirtypes';\nimport { Request, Response } from 'express';\n\nconst operation: OperationDefinition = {\n  resourceType: 'OperationDefinition',\n  name: 'project-init',\n  status: 'active',\n  kind: 'operation',\n  code: 'init',\n  resource: ['Project'],\n  system: false,\n  type: true, // Available at route /Project/$init only\n  instance: false,\n  parameter: [\n    // Required param: name (string)\n    { use: 'in', name: 'name', type: 'string', min: 1, max: '1' },\n    // Optional params: owner (Reference), ownerEmail (string)\n    { use: 'in', name: 'owner', type: 'Reference', min: 0, max: '1' },\n    { use: 'in', name: 'ownerEmail', type: 'string', min: 0, max: '1' },\n    // Output parameter: Project\n    { use: 'out', name: 'return', type: 'Project', min: 1, max: '1' },\n  ],\n};\n\ninterface ProjectInitParameters {\n  name: string;\n  owner?: Reference;\n  ownerEmail?: string;\n}\n\nexport async function projectInitHandler(req: FhirRequest): Promise<FhirResponse> {\n  const params = parseInputParameters<ProjectInitParameters>(operation, req);\n\n  // Handle operation business logic...\n  const project = doProjectInit(params);\n\n  // Special case: single `return` output parameter means respond with the Project resource directly\n  return [created, project];\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a MockClient Instance\nDESCRIPTION: Creates a new instance of the MockClient class. This is the primary way to interact with the mock FHIR server.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/mock/README.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst client = new MockClient();\n```\n\n----------------------------------------\n\nTITLE: Message Attachment with Binary Reference\nDESCRIPTION: This TypeScript code snippet shows how to attach a FHIR Binary resource to a communication payload as a message attachment. It provides the correct structure for `Communication.payload.contentAttachment`, including `contentType` and the `url` of the `Binary` resource.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/fhir-datastore/binary-data.mdx#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Communication } from '@medplum/fhirtypes';\n\nconst communication: Communication = {\n  resourceType: 'Communication',\n  payload: [\n    {\n      contentAttachment: {\n        contentType: 'image/jpeg',\n        url: 'Binary/456'\n      }\n    }\n  ]\n};\n\n```\n\n----------------------------------------\n\nTITLE: Searching Greater Than cURL\nDESCRIPTION: This snippet shows how to search for FHIR resources with a value greater than a specific threshold using cURL. It demonstrates searching for RiskAssessments with a probability greater than 0.8 using the `gt` prefix in the cURL command.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/search/basic-search.mdx#_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\n{ExampleCode}\n```\n\n----------------------------------------\n\nTITLE: FHIR CodeSystem Lookup Error Response\nDESCRIPTION: This snippet demonstrates an error response (404 Not Found) from the CodeSystem $lookup operation. The response is a FHIR OperationOutcome resource indicating that the requested code was not found. The 'issue' element provides details about the error, including the severity, code, and a textual description.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/api/fhir/operations/codesystem-lookup.md#_snippet_3\n\nLANGUAGE: js\nCODE:\n```\n{\n  \"resourceType\": \"OperationOutcome\",\n  \"id\": \"not-found\",\n  \"issue\": [{ \"severity\": \"error\", \"code\": \"not-found\", \"details\": { \"text\": \"Not found\" } }],\n}\n```\n\n----------------------------------------\n\nTITLE: Terraform Output Sample\nDESCRIPTION: Shows sample output from Terraform after deploying the Medplum infrastructure on Azure. It provides the external IP address of the Application Gateway and the CDN endpoint, which are necessary for configuring DNS records.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/self-hosting/install-on-azure.md#_snippet_8\n\nLANGUAGE: Shell\nCODE:\n```\napi_ip = \"201.429.43.229\"\ncdn_endpoint = \"medplumapp7d8c-endpoint-cv01.azurefd.net\"\n```\n\n----------------------------------------\n\nTITLE: Invoking Bot Handler Function in Typescript\nDESCRIPTION: This code shows how to invoke the Bot's handler function after setting up the mock resources. It presents the correct way to call the handler, which is critical for testing the core logic of the Bot.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/bots/unit-testing-bots.mdx#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { handler } from './my-bot';\n\ntest('Invoke bot handler', async () => {\n  const medplum = new MockClient();\n  // setup mock resources here\n  const result = await handler(medplum, {});\n  expect(result).toBeDefined();\n});\n```\n\n----------------------------------------\n\nTITLE: Updating a Resource using CLI\nDESCRIPTION: This snippet demonstrates how to update a resource using the Medplum CLI. It requires appropriate authorization and knowledge of the resource ID and the data to be updated.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/fhir-datastore/updating-data.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n/* selectBlocks: updateCli */\n\n```\n\n----------------------------------------\n\nTITLE: Cloning and Installing Bot Dependencies with Git and NPM\nDESCRIPTION: This snippet demonstrates how to clone a Medplum demo bot repository using Git, navigate to the project directory, and install the necessary dependencies using NPM. This is a prerequisite step for developing and deploying Medplum Bots.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/bots/bots-in-production.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone git@github.com:medplum/medplum-demo-bots.git my-bots\ncd my-bots\nnpm install\n```\n\n----------------------------------------\n\nTITLE: ActivityDefinition for Electrolytes Panel (TS)\nDESCRIPTION: Defines an ActivityDefinition resource for an Electrolytes Panel procedure. This is a TypeScript implementation of a common lab procedure, meant to be reusable across multiple PlanDefinitions.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/careplans/diagnostic-catalog/diagnostic-catalog.mdx#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n{ExampleCode}\n```\n\n----------------------------------------\n\nTITLE: Temporarily Unsubscribing with `useSubscription` (TSX)\nDESCRIPTION: This example shows how to temporarily unsubscribe from the current criteria by passing an empty string as the criteria. This is useful when waiting for a condition to be met before subscribing again, such as waiting for a profile to refresh. The previous subscription is cleaned up, and no new subscription is created until the criteria string changes again.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/react/use-subscription.md#_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nfunction MyComponent(): JSX.Element {\n  const profile = useMedplumProfile();\n  const [notificationCount, setNotificationCount] = useState(0);\n\n  // We can track the communications for the current user only\n  const profileStr = useMemo<string>(() => (profile ? getReferenceString(profile) : ''), [profile]);\n\n  useSubscription(\n    // When profileStr is `undefined` we can pass an empty string to temporarily unsubscribe from any criteria\n    profileStr ? `Communication?sender=Practitioner/abc-123&recipient=${profileStr}` : '',\n    (bundle: Bundle) => {\n      console.log('Received a message from Practitioner/abc-123!');\n      handleNotificationBundle(bundle); // Do something with the bundle\n      setNotificationCount((s) => s + 1);\n    }\n  );\n\n  return <div>Notifications received: {notificationCount}</div>;\n}\n```\n\n----------------------------------------\n\nTITLE: Plan Coverage and General Benefits Check Request in Typescript\nDESCRIPTION: This code snippet represents a request for checking plan coverage and general benefits. It showcases the format and content of a CoverageEligibilityRequest when querying for general benefits information. It is written in Typescript.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/billing/insurance-eligibility-checks.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n{ExampleCode}\n```\n\n----------------------------------------\n\nTITLE: Searching by Last Updated Time using _lastUpdated - CLI\nDESCRIPTION: Demonstrates searching Communications resources based on the `_lastUpdated` parameter in the command-line interface (CLI).  The example uses the `gt` (greater than) comparison operator to find communications updated since a specific date. Requires the Medplum CLI to be installed and configured.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/search/advanced-search-parameters.mdx#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n{ExampleCode}\n```\n\n----------------------------------------\n\nTITLE: Invite User - cURL\nDESCRIPTION: Invites a user to a project via the `/invite` endpoint using a cURL command. This endpoint creates a user, profile resource, and ProjectMembership. cURL must be installed. The output is the created ProjectMembership resource.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/auth/user-management-guide/user-management-guide.md#_snippet_24\n\nLANGUAGE: bash\nCODE:\n```\n{ExampleCode}\n```\n\n----------------------------------------\n\nTITLE: Searching and getting Total Count using _total - cURL\nDESCRIPTION: Demonstrates how to search for all Patient resources in an organization and retrieve an estimate of the total number of patients using the `_total` parameter using a cURL command. Requires cURL to be installed and configured.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/search/advanced-search-parameters.mdx#_snippet_20\n\nLANGUAGE: bash\nCODE:\n```\n{ExampleCode}\n```\n\n----------------------------------------\n\nTITLE: MedicationRequest Resource with References JavaScript\nDESCRIPTION: Illustrates how to use FHIR References within a MedicationRequest resource to link to a Patient and Practitioner, demonstrating relationships between resources.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/fhir-basics.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"resourceType\": \"MedicationRequest\",\n  \"id\": \"medrx002\",\n  // Reference to the patient for whom medication is being ordered\n  \"subject\": {\n    \"reference\": \"Patient/pat1\",\n    \"display\": \"Donald Duck\"\n  },\n  \"dosageInstruction\": [\n    {\n      \"text\": \"Take one tablet daily as directed\"\n    }\n  ],\n  // Reference to the requesting physician\n  \"requester\": {\n    \"reference\": \"Practitioner/f007\",\n    \"display\": \"Patrick Pump\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Create Media Resource with External URL (Python)\nDESCRIPTION: This Python code snippet demonstrates how to create a Media resource with a URL pointing to an external resource. It uses the `requests` library to make a POST request to the Medplum FHIR server. It sets the `Authorization` header for authentication and includes the Media resource in the request body. The `status` is a required field.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/fhir-datastore/binary-data.mdx#_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nAPI_URL = 'https://api.medplum.com/fhir/R4'\nMEDIA_URL = 'https://images.unsplash.com/photo-1581385339821-5b358673a883'\nmedia = {\n  'resourceType': 'Media',\n  'basedOn': [{\n    'reference': 'ServiceRequest/12345'\n  }],\n  'status': 'completed',    # `status` is a required field\n  'content': {\n    'title': 'plums-python.jpg',\n    'contentType': 'image/jpeg',\n    'url': MEDIA_URL,\n  }\n};\n\nrequests.post(f'{API_URL}/Media', json=media, headers={\n  'Authorization': f'Bearer {auth_token}'\n})\n```\n\n----------------------------------------\n\nTITLE: Example Insurance Eligibility Check\nDESCRIPTION: This code snippet shows how to perform an insurance eligibility check using a CoverageEligibilityRequest. It demonstrates the structure and required fields for a successful request, including references to Patient, Coverage, and other relevant resources.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/billing/insurance-eligibility-checks.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport ExampleCode from '!!raw-loader!@site/..//examples/src/billing/insurance-eligibility-checks.ts';\n```\n\n----------------------------------------\n\nTITLE: Ingress Values Configuration\nDESCRIPTION: Defines the ingress configuration in the `values.yaml` file for a Helm deployment. This includes specifying whether to deploy ingress, the domain name, and the TLS secret name (specific to Azure for certificate management).\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/self-hosting/install-on-azure.md#_snippet_12\n\nLANGUAGE: YAML\nCODE:\n```\ningress:\n  deploy: true\n  domain: [MY_DOMAIN] # Your domain name\n  tlsSecretName: [TLS_SECRET_NAME] # Azure only\n```\n\n----------------------------------------\n\nTITLE: Logical OR Filtering Example in Medplum (Typescript)\nDESCRIPTION: Demonstrates using the logical 'or' operator to combine filters in Medplum (Typescript).\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/search/filter-search-parameter.mdx#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n{ExampleCode}\n```\n\n----------------------------------------\n\nTITLE: Medplum GET Request - Read Patient by ID\nDESCRIPTION: Executes a `medplum get` request to read a patient by their ID.  Replace `$id` with the actual patient ID.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/cli/index.md#_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nmedplum get Patient/$id\n```\n\n----------------------------------------\n\nTITLE: Invoke $everything Operation FHIR\nDESCRIPTION: This snippet demonstrates the syntax for invoking the `$everything` operation on a FHIR Patient resource. The `[base]` should be replaced with the base URL of the FHIR server, `<id>` with the Patient ID.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/api/fhir/operations/patient-everything.md#_snippet_0\n\nLANGUAGE: FHIR\nCODE:\n```\n[base]/R4/Patient/<id>/$everything\n```\n\n----------------------------------------\n\nTITLE: Authorization Code Grant Sample Response\nDESCRIPTION: Sample HTTP response (302 Found) from the `/oauth2/authorize` endpoint after a successful authorization code grant. The response includes the `Location` header with the `redirect_uri`, authorization `code`, and `state` in the query string. The code is valid for a short duration.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/api/oauth/authorize.md#_snippet_1\n\nLANGUAGE: HTTP\nCODE:\n```\nHTTP/1.1 302 Found\nLocation: https://YOUR_APP/redirect_uri?code=AUTHORIZATION_CODE&state=STATE\n```\n\n----------------------------------------\n\nTITLE: Client Credentials Authentication\nDESCRIPTION: Authenticates the `MedplumClient` using client credentials.  Requires `MY_CLIENT_ID` and `MY_CLIENT_SECRET` to be defined.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/core/README.md#_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst medplum = new MedplumClient();\nawait medplum.startClientLogin(MY_CLIENT_ID, MY_CLIENT_SECRET);\n```\n\n----------------------------------------\n\nTITLE: Configuring Redis Connection (JSON)\nDESCRIPTION: Demonstrates how to configure Redis connection details using a JSON config file.  This includes host, port, and password.  This is used when not using AWS Parameter Store.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/self-hosting/config-settings.md#_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"redis\": {\n    \"host\": \"localhost\",\n    \"port\": 6379,\n    \"password\": \"medplum\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Install Dependencies using NPM\nDESCRIPTION: This command installs the project dependencies, including SUSHI, which is used to build FHIR resources from FSH files.  It must be run in the project root directory after cloning the repository.\nSOURCE: https://github.com/medplum/medplum/blob/main/examples/medplum-fsh-profiles/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Iterating resource pages using searchResourcePages() in TypeScript\nDESCRIPTION: Illustrates the use of the `searchResourcePages()` method from the MedplumClient to iterate over resource pages using an async generator. It provides a simplified approach to traversing paginated search results and accessing the original Bundle resource for metadata.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/search/paginated-search.mdx#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n{ExampleCode}\n```\n\n----------------------------------------\n\nTITLE: Send HL7 Test Message with Medplum CLI (Bash)\nDESCRIPTION: This bash command uses the Medplum CLI to send a generated HL7 example message to a specified host and port. This is a simple test to verify the connectivity between the Medplum Agent and a receiving endpoint.  Requires the Medplum CLI to be installed.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/agent/index.md#_snippet_6\n\nLANGUAGE: Bash\nCODE:\n```\nmedplum hl7 send localhost 56000 --generate-example\n```\n\n----------------------------------------\n\nTITLE: Install Application with Helm\nDESCRIPTION: This command installs the application using Helm. It creates a new namespace called `medplum`, uses the `values.yaml` file for configuration and the current directory where the Helm chart is located.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/self-hosting/install-on-gcp.md#_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\nhelm install medplum-server . -n medplum --create-namespace -f values.yaml\n```\n\n----------------------------------------\n\nTITLE: PlanDefinition for Women's Health Service (TS)\nDESCRIPTION: Defines a PlanDefinition resource for a Women's Health service, including references to ActivityDefinitions for specific laboratory procedures. The code uses TypeScript.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/careplans/diagnostic-catalog/diagnostic-catalog.mdx#_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\n{ExampleCode}\n```\n\n----------------------------------------\n\nTITLE: Get Patient and Related Persons (CLI)\nDESCRIPTION: This CLI example shows how to find a Patient and their RelatedPerson resources using the _revinclude parameter.  The _revinclude parameter is used to include RelatedPerson resources that reference the Patient via the patient field.  It requires a Medplum CLI environment.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/search/includes.mdx#_snippet_9\n\nLANGUAGE: TypeScript\nCODE:\n```\n{ExampleCode}\n```\n\n----------------------------------------\n\nTITLE: Adding Google Client ID to Medplum App Deployment\nDESCRIPTION: This snippet shows how to add the Google Client ID and reCAPTCHA site key to a Medplum app deployment configuration file.  These keys are used for authentication and security purposes.  The configuration file is a JSON object.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/auth/methods/google-auth.md#_snippet_1\n\nLANGUAGE: js\nCODE:\n```\n{\n  // ...\n  \"googleClientId\": \"<Google API key>\",\n  \"recaptchaSiteKey\": \"<ReCAPTCHA API key>\"\n}\n```\n\n----------------------------------------\n\nTITLE: Building Medplum Bots\nDESCRIPTION: This command builds the Medplum Bots, which are responsible for parsing the questionnaire response data into structured FHIR resources like Patient, Coverage, and Observation.  This step is essential to convert the intake form data into a format suitable for storage and retrieval within Medplum.\nSOURCE: https://github.com/medplum/medplum/blob/main/examples/medplum-patient-intake-demo/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm run build:bots\n```\n\n----------------------------------------\n\nTITLE: Searching Threads with Messages in Typescript\nDESCRIPTION: This snippet demonstrates how to search for all communication threads and include their messages using the `_revinclude` parameter in Medplum's API. The `_revinclude` parameter allows you to include resources that reference the search results in the `partOf` field.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/communications/organizing-communications.mdx#_snippet_7\n\nLANGUAGE: ts\nCODE:\n```\n{ExampleCode}\n```\n\n----------------------------------------\n\nTITLE: Execute Bot by Identifier (GET) - CLI\nDESCRIPTION: This snippet shows how to execute a Medplum Bot by its Identifier using the Medplum CLI with a GET request. The identifier is included as a query parameter.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/api/fhir/operations/bot-execute.mdx#_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nmedplum login\nmedplum get 'Bot/$execute?identifier=https://example.com/bots|1234'\n```\n\n----------------------------------------\n\nTITLE: Convert C-CDA and FHIR TypeScript\nDESCRIPTION: Demonstrates how to use the imported functions to convert between C-CDA and FHIR formats. The code shows examples of converting a C-CDA document to a FHIR bundle, converting a FHIR bundle to a C-CDA document, loading a C-CDA document from an XML string, and serializing a C-CDA document to an XML string.  Assumes variables named `ccda` and `xml` are defined.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/integration/c-cda.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// Convert C-CDA to FHIR\nconst bundle = convertCcdaToFhir(ccda);\n\n// Convert FHIR to C-CDA\nconst ccda = convertFhirToCcda(bundle);\n\n// Load C-CDA from XML\nconst ccda = convertXmlToCcda(xml);\n\n// Serialize C-CDA to XML\nconst xml = convertCcdaToXml(ccda);\n```\n\n----------------------------------------\n\nTITLE: Error Response: OperationOutcome\nDESCRIPTION: This JSON represents an error response in the form of an OperationOutcome resource.  It indicates that the specified ValueSet could not be found by URL. The issue array provides details about the error, including severity, code, and a textual description.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/api/fhir/operations/index.mdx#_snippet_5\n\nLANGUAGE: js\nCODE:\n```\n{\n    \"resourceType\": \"OperationOutcome\",\n    \"issue\": [\n        {\n            \"severity\": \"error\"\n            \"code\": \"invalid\",\n            \"details\": {\n                \"text\": \"ValueSet http://example.com/ValueSet/missing not found\"\n            },\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Sorting Descending FHIR\nDESCRIPTION: Demonstrates sorting FHIR search results in descending order using the '-' prefix with the `_sort` parameter.  This example returns RiskAssessments in descending order of probability in TypeScript.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/search/basic-search.mdx#_snippet_23\n\nLANGUAGE: ts\nCODE:\n```\n{ExampleCode}\n```\n\n----------------------------------------\n\nTITLE: Defining Multiple Observation Reference Ranges in TypeScript\nDESCRIPTION: This code defines three reference ranges: \"Low\", \"Normal\", and \"High\". Each range has its own lower and upper bounds, providing a comprehensive interpretation of observation values.  The ranges are intended for use with the `ObservationDefinition` resource to provide interpretations for each value of an `Observation`.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/careplans/reference-ranges.mdx#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  \"qualifiedInterval\": [\n    {\n      \"range\": {\n        \"low\": {\n          \"value\": 0,\n          \"unit\": \"mg/dL\"\n        },\n        \"high\": {\n          \"value\": 10,\n          \"unit\": \"mg/dL\"\n        },\n        \"condition\": \"Low\"\n      }\n    },\n    {\n      \"range\": {\n        \"low\": {\n          \"value\": 10,\n          \"unit\": \"mg/dL\"\n        },\n        \"high\": {\n          \"value\": 100,\n          \"unit\": \"mg/dL\"\n        },\n        \"condition\": \"Normal\"\n      }\n    },\n    {\n      \"range\": {\n        \"low\": {\n          \"value\": 100,\n          \"unit\": \"mg/dL\"\n        },\n        \"high\": {\n          \"value\": 200,\n          \"unit\": \"mg/dL\"\n        },\n        \"condition\": \"High\"\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Resource Table Components\nDESCRIPTION: Imports React components specifically designed to display resource properties and search parameters in a tabular format. These components are utilized to present the schema details and available search options for the FHIR Binary resource.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/api/fhir/resources/binary.mdx#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { ResourcePropertiesTable, SearchParamsTable } from '@site/src/components/ResourceTables';\n```\n\n----------------------------------------\n\nTITLE: Rendering Resource Properties Table\nDESCRIPTION: Renders a table displaying the properties of the FHIR Binary resource. It filters out inherited properties from the base Resource class. This table provides a detailed view of the elements that compose the Binary resource.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/api/fhir/resources/binary.mdx#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\n<ResourcePropertiesTable\n  properties={definition.properties.filter((p) => !(p.inherited && p.base.includes('Resource')))}\n/>\n```\n\n----------------------------------------\n\nTITLE: Defining Stripe Webhook Access Policy in Medplum JSON\nDESCRIPTION: Defines an AccessPolicy resource in JSON format for a Medplum Bot that will receive Stripe webhook events. This policy grants read-write access to `Invoice` and `Account` resources, and read-only access to `Bot` resources. This ensures the bot has the necessary permissions to create and update relevant FHIR resources within Medplum based on Stripe events, while adhering to the principle of least privilege.\nSOURCE: https://github.com/medplum/medplum/blob/main/examples/medplum-demo-bots/src/stripe-bots/README.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"resourceType\": \"AccessPolicy\",\n  \"name\": \"Stripe Webhook Access Policy\",\n  \"resource\": [\n    {\n      \"resourceType\": \"Invoice\"\n    },\n    {\n      \"resourceType\": \"Account\"\n    },\n    {\n      \"resourceType\": \"Bot\",\n      \"readonly\": true\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Sorting Search Results cURL\nDESCRIPTION: This snippet shows how to sort FHIR search results using the `_sort` parameter via cURL. The example searches for RiskAssessments, sorted by probability, then by date.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/search/basic-search.mdx#_snippet_22\n\nLANGUAGE: bash\nCODE:\n```\n{ExampleCode}\n```\n\n----------------------------------------\n\nTITLE: Medplum PUT Request - Update Patient\nDESCRIPTION: Executes a `medplum put` request to update an existing patient.  Replace `$id` with the patient's ID, and the body with the updated patient resource.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/cli/index.md#_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\nmedplum put Patient/$id '{\"resourceType\":\"Patient\",\"name\":[{\"family\":\"Simpson\"}]}'\n```\n\n----------------------------------------\n\nTITLE: FHIR Subscription for 'delete' events\nDESCRIPTION: This JSON snippet demonstrates a FHIR Subscription configuration that executes only on 'delete' events. It utilizes the 'subscription-supported-interaction' extension with the valueCode set to 'delete'. The subscription is triggered when a resource is deleted.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/subscriptions/subscription-extensions.md#_snippet_5\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"resourceType\": \"Subscription\",\n  \"reason\": \"test\",\n  \"status\": \"active\",\n  \"criteria\": \"Patient\",\n  \"channel\": {\n    \"type\": \"rest-hook\",\n    \"endpoint\": \"https://example.com/webhook\"\n  },\n  \"extension\": [\n    {\n      \"url\": \"https://medplum.com/fhir/StructureDefinition/subscription-supported-interaction\",\n      \"valueCode\": \"delete\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Apply Terraform Configuration\nDESCRIPTION: Applies the Terraform configuration to create the resources in Azure. This command provisions the resources defined in the Terraform configuration files.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/self-hosting/install-on-azure.md#_snippet_4\n\nLANGUAGE: Azure CLI\nCODE:\n```\nterraform apply\n```\n\n----------------------------------------\n\nTITLE: HL7 MSH Segment Example\nDESCRIPTION: This code snippet shows an example of a MSH (Message Header) segment in an HL7 ORM^O01 message. It establishes the message's intent, origin, destination, date/time of creation, and type. Key fields include sending and receiving application, date/time, message type, and message control ID.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/integration/hl7-interfacing/orders-and-results.md#_snippet_0\n\nLANGUAGE: hl7\nCODE:\n```\nMSH|^~\\&|OrderingSystem|HospitalA|LabSystem|HospitalA|202304151200||ORM^O01|1234|P|2.3\n```\n\n----------------------------------------\n\nTITLE: Medplum Bulk Import Command\nDESCRIPTION: Executes a bulk import command to import ndjson files generated by bulk data exports from other systems.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/cli/index.md#_snippet_38\n\nLANGUAGE: bash\nCODE:\n```\nmedplum bulk import [options] <filename>\n```\n\n----------------------------------------\n\nTITLE: Push Message to Agent using Medplum CLI (Bash)\nDESCRIPTION: This command pushes a JSON message to a specific agent endpoint using the Medplum CLI. The message contains the destination device, content type, and the HL7 message body. This is used to emulate sending a message from the Medplum server to the agent, which then forwards it to the intended device.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/agent/push.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nmedplum post 'Agent/1080ee82-e4fc-4312-946f-322fbecf9bb9/$push' $'{\"destination\":\"Device/52c9a9de-1081-4fb2-a40a-e62efe1b73b2\",\"contentType\":\"x-application/hl7-v2+er7\",\"body\":\"MSH|^~\\\\&|ADTSYS|HOSPITAL|RECEIVER|DEST|20231023235305.516||ADT^A01|1698105185516|P|2.5|\\\\nEVN|A01|20231023235305.516||\\\\nPID|1|12345|12345^^^HOSP^MR|123456|DOE^JOHN^MIDDLE^SUFFIX|19800101|M|||123 STREET^APT 4B^CITY^ST^12345-6789||555-555-5555||S|\\\\nPV1|1|I|2000^2012^01||||12345^DOCTOR^DOC||||||||||1234567^DOCTOR^DOC||AMB|||||||||||||||||||||||||202309280900|\"}'\n```\n\n----------------------------------------\n\nTITLE: Creating a basic Questionnaire in FHIR (TypeScript)\nDESCRIPTION: This code snippet demonstrates creating a basic FHIR Questionnaire using TypeScript. It defines a simple questionnaire structure with basic elements and questions, showcasing how to define title, name and the question itself.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/questionnaires/questionnaires-and-responses.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Questionnaire } from '@medplum/fhirtypes';\n\nexport const simpleQuestionnaire: Questionnaire = {\n  resourceType: 'Questionnaire',\n  id: 'simple-questionnaire',\n  status: 'active',\n  subjectType: ['Patient'],\n  name: 'SimpleQuestionnaire',\n  title: 'Simple Questionnaire Example',\n  item: [\n    {\n      linkId: 'name',\n      type: 'string',\n      text: 'What is your name?',\n      required: true,\n    },\n  ],\n};\n\n```\n\n----------------------------------------\n\nTITLE: SFTP File Listing Bot TypeScript\nDESCRIPTION: This snippet shows the complete example bot that connects to an SFTP server and returns a list of files in the root directory. It utilizes the `ssh2-sftp-client` library for SFTP connectivity and requires configuration details such as host, username, and password to connect to the SFTP server.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/bots/file-uploads.mdx#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { MedplumClient, MedplumConfig, BotEvent } from '@medplum/core';\nimport Client from 'ssh2-sftp-client';\n\n/**\n * Medplum bot to list the files in an SFTP server\n * @param medplum - medplum client\n * @param event - the BotEvent\n * @returns\n */\nexport async function handler(medplum: MedplumClient, event: BotEvent<any>): Promise<void> {\n  const sftp = new Client();\n  try {\n    await sftp.connect({\n      host: '<YOUR_SFTP_HOST>',\n      port: 22,\n      username: '<YOUR_SFTP_USERNAME>',\n      password: '<YOUR_SFTP_PASSWORD>',\n    });\n    const list = await sftp.list('/');\n    console.log(list);\n  } catch (err) {\n    console.error(err);\n  } finally {\n    await sftp.end();\n  }\n\n  return;\n}\n```\n\n----------------------------------------\n\nTITLE: Search Project Patients - CLI\nDESCRIPTION: Searches for ProjectMembership resources of type Patient using the Medplum CLI. This allows you to retrieve a list of all Patients associated with a project. The Medplum CLI must be installed and configured. The output is a list of ProjectMembership resources in FHIR format, filtered to include Patients.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/auth/user-management-guide/user-management-guide.md#_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\n{ExampleCode}\n```\n\n----------------------------------------\n\nTITLE: Searching with Contains cURL\nDESCRIPTION: This snippet shows how to perform a partial match on string search parameters in FHIR using cURL. It searches for Patients whose name includes the substring \"stein\" by using the `:contains` modifier in the cURL request.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/search/basic-search.mdx#_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\n{ExampleCode}\n```\n\n----------------------------------------\n\nTITLE: Searching Filtered Threads in Typescript\nDESCRIPTION: This snippet demonstrates how to filter communication threads based on the `subject` parameter using Typescript in Medplum. This allows you to search for threads related to a specific patient.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/communications/organizing-communications.mdx#_snippet_10\n\nLANGUAGE: ts\nCODE:\n```\n{ExampleCode}\n```\n\n----------------------------------------\n\nTITLE: Combined Forward and Reverse Chained Search (Patient with Observation by CareTeam) - cURL\nDESCRIPTION: This bash snippet demonstrates a combined forward and reverse chained search to find Patient resources with an Observation performed by a CareTeam that has a member named 'bob' using a cURL command.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/search/chained-search.md#_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\ncurl -s -H \"Authorization: Bearer $MEDPLUM_CLIENT_ID\" \\\n  \"https://api.medplum.com/fhir/R4/Patient?_has:Observation:subject:performer.member.name=bob\" | jq\n```\n\n----------------------------------------\n\nTITLE: Creating a ServiceRequest in TypeScript\nDESCRIPTION: Demonstrates how to create a ServiceRequest resource, which represents a requisition for a lab test. It specifies what test panel is being ordered using the ServiceRequest.code field. It imports required modules and shows a minimal example for clarity.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/fhir-datastore/working-with-fhir.mdx#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { MedplumClient, Patient, ServiceRequest } from '@medplum/core';\nimport { createPatient } from './utils';\n\n/**\n * Creates a service request for a patient.\n * Links the service request to the patient.\n */\nasync function createServiceRequest(medplum: MedplumClient, patient: Patient): Promise<ServiceRequest> {\n  const serviceRequest: ServiceRequest = {\n    resourceType: 'ServiceRequest',\n    status: 'active',\n    intent: 'order',\n    code: {\n      coding: [\n        {\n          system: 'http://loinc.org',\n          code: '12345-6',\n          display: 'Comprehensive Metabolic Panel',\n        },\n      ],\n      text: 'Comprehensive Metabolic Panel',\n    },\n    subject: {\n      reference: 'Patient/' + patient.id,\n    },\n  };\n\n  try {\n    return await medplum.createResource(serviceRequest);\n  } catch (error: any) {\n    console.log('Could not create service request', error);\n    throw error;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Token Lifetimes (TypeScript)\nDESCRIPTION: This code snippet demonstrates how to customize token lifetimes using the `ClientApplication` resource. It involves updating the resource with desired access and refresh token lifetimes (in seconds).  It requires familiarity with the Medplum API and `ClientApplication` resource.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/auth/session-management.mdx#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst tokenLifetimes = async (): Promise<void> => {\n  // 1. Read the ClientApplication resource.\n  const client = await medplum.readResource('ClientApplication', 'CLIENT_ID');\n\n  // 2. Update the ClientApplication resource.\n  const result = await medplum.updateResource<Medplum.ClientApplication>({\n    ...client,\n    accessTokenLifespan: 7200, // 2 hours\n    refreshTokenLifespan: 2419200, // 4 weeks\n  });\n\n  console.log('ClientApplication', result);\n};\n\n```\n\n----------------------------------------\n\nTITLE: Accessing Operations from useHealthGorillaLabOrder in TSX\nDESCRIPTION: This snippet demonstrates how to access the state and operations returned by the `useHealthGorillaLabOrder` hook. These operations include functions to search for available tests and labs, update order details, and create the order bundle. These are the key functions necessary for building an order form.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/integration/health-gorilla/sending-orders.md#_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nconst {\n  state,\n  searchAvailableTests,\n  setTests,\n  setDiagnoses,\n  updateBillingInformation,\n  setSpecimenCollectedDateTime,\n  setOrderNotes,\n  createOrderBundle,\n} = labOrderReturn;\n```\n\n----------------------------------------\n\nTITLE: ClinicalImpression Resource Properties Table\nDESCRIPTION: Displays a table of properties for the ClinicalImpression resource, filtering out inherited properties from the base Resource.  It uses the `ResourcePropertiesTable` component and the `clinicalimpression.json` definition.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/api/fhir/resources/clinicalimpression.mdx#_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n<ResourcePropertiesTable\n  properties={definition.properties.filter((p) => !(p.inherited && p.base.includes('Resource')))}\n/>\n```\n\n----------------------------------------\n\nTITLE: Importing React components for resource documentation\nDESCRIPTION: Imports React components for creating interactive tables and links within the resource documentation page.  It imports Link, Tabs, TabItem from docusaurus theme, ResourcePropertiesTable and SearchParamsTable from custom components, and also imports the resource definition JSON.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/api/fhir/resources/medicinalproductpackaged.mdx#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport Link from '@docusaurus/Link';\nimport Tabs from '@theme/Tabs';\nimport TabItem from '@theme/TabItem';\nimport definition from '@site/static/data/resourceDefinitions/medicinalproductpackaged.json';\nimport { ResourcePropertiesTable, SearchParamsTable } from '@site/src/components/ResourceTables';\n```\n\n----------------------------------------\n\nTITLE: Adding Record to a Do Not Match List\nDESCRIPTION: This code snippet demonstrates how to add a record to a Do Not Match List. This is used to prevent the deduplication pipeline from merging records that have been manually determined not to be duplicates. The details of the implementation of maintaining and using such a list would be within the code.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/fhir-datastore/patient-deduplication/merging.mdx#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  // Example of code to add to Do Not Match List\n}\n```\n\n----------------------------------------\n\nTITLE: Invite Practitioner via Medplum API - Typescript\nDESCRIPTION: This Typescript code snippet demonstrates how to invite a Practitioner to a Medplum project using the `medplum.post` method. It includes the resource type, first name, last name, email, and password for the new user.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/api/project-admin/invite.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nawait medplum.post('admin/projects/:projectId/invite', {\n  resourceType: 'Practitioner',\n  firstName: 'George',\n  lastName: 'Washington',\n  email: 'dr.gw@example.gov',\n  password: 'lib3rty0rDe4th!',\n});\n```\n\n----------------------------------------\n\nTITLE: Get Agent Bulk Status\nDESCRIPTION: This command uses the `medplum get` command-line tool to execute the `$bulk-status` operation on the Agent resource. This will retrieve the status of all agents that match the specified criteria (or all agents if no criteria are specified).\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/agent/bulk-status.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmedplum get 'Agent/$bulk-status'\n```\n\n----------------------------------------\n\nTITLE: Creating Batch Data in Typescript\nDESCRIPTION: This snippet provides an example of setting up a test data in batches using batch requests, specifically for setting up patient data. It showcases how to use `executeBatch` with `beforeEach` to ensure the data is created before each test, as well as how to make use of Vitest test contexts to pass in the `MockClient` instance.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/bots/unit-testing-bots.mdx#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createBatchData } from './utils';\n\ndescribe('FindMatchingPatientsBot', () => {\n  beforeEach(async (context) => {\n    await createBatchData(context.medplum);\n  });\n\n  test('creates a RiskAssessment', async ({ medplum }) => {\n    const riskAssessments = await medplum.searchResources('RiskAssessment');\n    expect(riskAssessments.length).toBeGreaterThan(0);\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Media Resource Import\nDESCRIPTION: Imports Media from the fhirtypes module.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/fhir-datastore/binary-data.mdx#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Media } from '@medplum/fhirtypes';\n```\n\n----------------------------------------\n\nTITLE: Profile Validation Error - OperationOutcome\nDESCRIPTION: This JSON snippet shows the OperationOutcome resource that is returned when a resource fails profile validation. It indicates the missing required properties (identifier, name, gender) as specified by the US Core Patient profile.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/fhir-datastore/profiles.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"resourceType\": \"OperationOutcome\",\n  \"issue\": [\n    {\n      \"severity\": \"error\",\n      \"code\": \"structure\",\n      \"details\": { \"text\": \"Missing required property\" },\n      \"expression\": [\"Patient.identifier\"]\n    },\n    {\n      \"severity\": \"error\",\n      \"code\": \"structure\",\n      \"details\": { \"text\": \"Missing required property\" },\n      \"expression\": [\"Patient.name\"]\n    },\n    {\n      \"severity\": \"error\",\n      \"code\": \"structure\",\n      \"details\": { \"text\": \"Missing required property\" },\n      \"expression\": [\"Patient.gender\"]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Medplum Bot Deploy Command\nDESCRIPTION: Deploys the bot code to the Medplum runtime by reading the contents of the `dist` file (or `source` file if `dist` is omitted) specified in `medplum.config.json`.  Replace `<bot name>` with the name of the bot from the config file.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/cli/index.md#_snippet_29\n\nLANGUAGE: bash\nCODE:\n```\nnpx medplum bot deploy <bot name>\n```\n\n----------------------------------------\n\nTITLE: Valid $bulk-status Response\nDESCRIPTION: This JSON snippet represents a valid response from the `$bulk-status` operation. It contains a `Bundle` of `Parameters` resources, where each `Parameters` resource includes an `agent` and its corresponding `result` (either a `Parameters` resource with status details or an `OperationOutcome` if an error occurred).\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/agent/bulk-status.md#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"resourceType\": \"Bundle\",\n  \"type\": \"collection\",\n  \"entry\": [\n    {\n      \"resource\": {\n        \"resourceType\": \"Parameters\",\n        \"parameter\": [\n          {\n            \"name\": \"agent\",\n            \"resource\": {\n              \"resourceType\": \"Agent\",\n              \"name\": \"Test Agent 1\",\n              \"status\": \"active\",\n              \"id\": \"93f8b2fb-65a3-4977-a175-71b73b26fde7\",\n              \"meta\": {\n                \"versionId\": \"e182201a-6925-467f-a92b-496193fb4c39\",\n                \"lastUpdated\": \"2024-04-19T20:29:25.087Z\"\n              }\n            }\n          },\n          {\n            \"name\": \"result\",\n            \"resource\": {\n              \"resourceType\": \"Parameters\",\n              \"parameter\": [\n                {\n                  \"name\": \"status\",\n                  \"valueCode\": \"connected\"\n                },\n                {\n                  \"name\": \"version\",\n                  \"valueString\": \"3.1.4\"\n                },\n                {\n                  \"name\": \"lastUpdated\",\n                  \"valueInstant\": \"2024-04-19T00:00:00Z\"\n                }\n              ]\n            }\n          }\n        ]\n      }\n    },\n    {\n      \"resource\": {\n        \"resourceType\": \"Parameters\",\n        \"parameter\": [\n          {\n            \"name\": \"agent\",\n            \"resource\": {\n              \"resourceType\": \"Agent\",\n              \"name\": \"Test Agent 2\",\n              \"status\": \"active\",\n              \"id\": \"93f8b2fb-65a3-4977-a175-71b73b26fde7\",\n              \"meta\": {\n                \"versionId\": \"e182201a-6925-467f-a92b-496193fb4c39\",\n                \"lastUpdated\": \"2024-04-19T20:29:25.087Z\"\n              }\n            }\n          },\n          {\n            \"name\": \"result\",\n            \"resource\": {\n              \"resourceType\": \"Parameters\",\n              \"parameter\": [\n                {\n                  \"name\": \"status\",\n                  \"valueCode\": \"disconnected\"\n                },\n                {\n                  \"name\": \"version\",\n                  \"valueString\": \"3.1.2\"\n                },\n                {\n                  \"name\": \"lastUpdated\",\n                  \"valueInstant\": \"2024-04-19T00:00:00Z\"\n                }\n              ]\n            }\n          }\n        ]\n      }\n    },\n    {\n      \"resource\": {\n        \"resourceType\": \"Parameters\",\n        \"parameter\": [\n          {\n            \"name\": \"agent\",\n            \"resource\": {\n              \"resourceType\": \"Agent\",\n              \"name\": \"Test Agent 3\",\n              \"status\": \"off\",\n              \"id\": \"93f8b2fb-65a3-4977-a175-71b73b26fde7\",\n              \"meta\": {\n                \"versionId\": \"e182201a-6925-467f-a92b-496193fb4c39\",\n                \"lastUpdated\": \"2024-04-19T20:29:25.087Z\"\n              }\n            }\n          },\n          {\n            \"name\": \"result\",\n            \"resource\": {\n              \"resourceType\": \"OperationOutcome\",\n              \"issue\": [\n                {\n                  \"severity\": \"error\",\n                  \"code\": \"exception\",\n                  \"details\": {\n                    \"text\": \"Something weird happened when getting the status\"\n                  }\n                }\n              ]\n            }\n          }\n        ]\n      }\n    }\n  ]\n}\n\n```\n\n----------------------------------------\n\nTITLE: Install Helm Chart\nDESCRIPTION: Installs the Medplum server application using Helm. The command specifies the chart directory, namespace, and configuration values file.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/self-hosting/install-on-azure.md#_snippet_17\n\nLANGUAGE: Shell\nCODE:\n```\nhelm install medplum-server . -n medplum --create-namespace -f values.yaml\n```\n\n----------------------------------------\n\nTITLE: HL7 MSH Segment Example (ORU)\nDESCRIPTION: This code snippet shows an example of a MSH (Message Header) segment in an HL7 ORU^R01 message. It contains metadata about the message, such as sender, receiver, and type of message. Crucial components include the sending application, receiving application, date/time, message type, and message control ID.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/integration/hl7-interfacing/orders-and-results.md#_snippet_6\n\nLANGUAGE: hl7\nCODE:\n```\nMSH|^~\\&|LAB|1234^LAB^DNS|EHR|5678^EHR^DNS|202404221430||ORU^R01|123456|P|2.5.1\n```\n\n----------------------------------------\n\nTITLE: Token Exchange with Auth Code - Request\nDESCRIPTION: Sample request for exchanging an authorization code for tokens using the `authorization_code` grant type. The request includes `grant_type`, `client_id`, `code`, and `redirect_uri` parameters in the request body.  It also shows the `Content-Type` and `Authorization` headers.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/api/oauth/token.md#_snippet_1\n\nLANGUAGE: HTTP\nCODE:\n```\nPOST https://api.medplum.com/oauth2/token&\n    Content-Type='application/x-www-form-urlencoded'&\n    Authorization=Basic aSdxd892iujendek328uedj\n\ngrant_type=authorization_code&\nclient_id=492e4ec3-fb66-4b45-b529-599c708ec530&&\ncode=AUTHORIZATION_CODE&\nredirect_uri=https://myclient/redirect\n```\n\n----------------------------------------\n\nTITLE: Search Project Practitioners - cURL\nDESCRIPTION: Searches for ProjectMembership resources of type Practitioner using a cURL command.  This retrieves a list of all Practitioners associated with a project by sending a direct API request. cURL must be installed. The output is a list of ProjectMembership resources in FHIR format, filtered to include Practitioners.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/auth/user-management-guide/user-management-guide.md#_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\n{ExampleCode}\n```\n\n----------------------------------------\n\nTITLE: Creating Resource-Specific Access Policy for Bot (JSON)\nDESCRIPTION: This JSON snippet defines an AccessPolicy that grants access only to specific FHIR resources like 'Invoice' and 'Account'. This policy should be applied to the bot itself in Medplum's Admin settings. This policy allows the bot to interact with these resources while restricting access to others.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/bots/consuming-webhooks.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"resourceType\": \"AccessPolicy\",\n  \"name\": \"Stripe Bot Access Policy\",\n  \"resource\": [\n    {\n      \"resourceType\": \"Invoice\"\n    },\n    {\n      \"resourceType\": \"Account\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configure Slack Channel in Medplum Bot (TypeScript)\nDESCRIPTION: This code snippet shows how to configure the Slack channel where the Medplum bot will send notifications. The `slackChannel` variable should be updated with the name or ID of the desired Slack channel. This customization is done within the `handler` function of the Medplum bot code.\nSOURCE: https://github.com/medplum/medplum/blob/main/examples/medplum-demo-bots/src/slack-bots/README.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst slackChannel = \"your-channel-name\";\n```\n\n----------------------------------------\n\nTITLE: Deploying Medplum Bot to Staging - Bash\nDESCRIPTION: This Bash script deploys a Medplum Bot to the staging environment. It sets the `MEDPLUM_CLIENT_ID` and `MEDPLUM_CLIENT_SECRET` environment variables for the staging environment, builds the project using `npm run build`, and then deploys the bot using the Medplum CLI (`npx medplum bot deploy`).\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/bots/bots-in-production.md#_snippet_17\n\nLANGUAGE: Bash\nCODE:\n```\nexport MEDPLUM_CLIENT_ID=<STAGING_CLIENT_ID>\nexport MEDPLUM_CLIENT_SECRET=<STAGING_CLIENT_SECRET>\nnpm run build\nnpx medplum bot deploy my-first-bot-staging\n```\n\n----------------------------------------\n\nTITLE: Handling Sign In JavaScript\nDESCRIPTION: This JavaScript function `startLogin` initiates the Medplum sign-in process by calling `medplum.startLogin` with the user's email and password. It then passes the response to the `handleAuthResponse` function.\nSOURCE: https://github.com/medplum/medplum/blob/main/examples/medplum-react-native-example/README.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nfunction startLogin() {\n  medplum.startLogin({ email, password }).then(handleAuthResponse);\n}\n```\n\n----------------------------------------\n\nTITLE: GraphQL Query for Diagnostic Reports Turnaround Time\nDESCRIPTION: This GraphQL query retrieves DiagnosticReport data including issue date, category, code, specimen details (collection and received times), and subject (patient) information to calculate turnaround time for tests. It requires access to Medplum's GraphQL endpoint and assumes familiarity with the FHIR data model. The query filters DiagnosticReports issued after '2023-02-01' and returns a maximum of 100 results.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/compliance/clia-cap.md#_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\n{\n  DiagnosticReportConnection(\n    issued: \\\"gt2023-02-01\\\"\n    _count: 100\n  ) {\n    count\n    edges {\n      resource {\n        id\n        issued\n        category {\n          coding {\n            code\n          }\n        }\n        code {\n          coding {\n            code\n          }\n        }\n        specimen {\n          resource {\n            ... on Specimen {\n              collection {\n                collectedDateTime\n              }\n              receivedTime\n            }\n          }\n        }\n        subject {\n          resource {\n            ... on Patient {\n              id\n              gender\n              address {\n                state\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Delete Patient Mutation (Typescript)\nDESCRIPTION: This Typescript code deletes an existing Patient resource using the `PatientDeleteTS` mutation. It requires the ID of the patient to be deleted.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/graphql/mutations.mdx#_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\n{ExampleCode}\n```\n\n----------------------------------------\n\nTITLE: Search Project Patients\nDESCRIPTION: Searches for ProjectMembership resources of type Patient.  This allows you to retrieve a list of all Patients associated with a project. No dependencies are required.  The output is a list of ProjectMembership resources in FHIR format, filtered to include Patients.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/auth/user-management-guide/user-management-guide.md#_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\n{ExampleCode}\n```\n\n----------------------------------------\n\nTITLE: Initializing Context with useHealthGorillaLabOrder in TSX\nDESCRIPTION: This code shows how to initialize the `useHealthGorillaLabOrder` hook within the `OrderForm` component. It initializes the hook with `patient` and `requester` state variables. The return value, `labOrderReturn`, contains state and operations needed for the order form.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/integration/health-gorilla/sending-orders.md#_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nfunction OrderForm() {\n  const [patient, setPatient] = useState<Patient>();\n  const [requester, setRequester] = useState<Practitioner>();\n\n  const labOrderReturn = useHealthGorillaLabOrder({\n    patient,\n    requester,\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Conditional Questionnaire Example (Typescript)\nDESCRIPTION: This example demonstrates a Questionnaire with conditionally rendered questions based on the user's answer to another question. It utilizes the `item.enableWhen` field to specify the conditions under which a question should be displayed. The property defines when a question should be displayed, including the question to which it refers, the criteria used to determine if the question will appear, and the expected answer datatype.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/questionnaires/questionnaires-and-responses.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n{ExampleCode}\n```\n\n----------------------------------------\n\nTITLE: Start Medplum Service\nDESCRIPTION: Starts the Medplum service using systemctl.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/self-hosting/install-on-ubuntu.md#_snippet_23\n\nLANGUAGE: bash\nCODE:\n```\nsudo systemctl start medplum\n```\n\n----------------------------------------\n\nTITLE: Enable Medplum Nginx Sites\nDESCRIPTION: Creates symbolic links for the Medplum Nginx site configurations in the `sites-enabled` directory to enable them.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/self-hosting/install-on-ubuntu.md#_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\nsudo ln -s /etc/nginx/sites-available/medplum-app /etc/nginx/sites-enabled/\nsudo ln -s /etc/nginx/sites-available/medplum-server /etc/nginx/sites-enabled/\n```\n\n----------------------------------------\n\nTITLE: Sorting Search Results FHIR\nDESCRIPTION: This snippet shows how to sort FHIR search results using the `_sort` parameter. The example searches for RiskAssessments, sorted by probability, then by date, implemented in TypeScript.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/search/basic-search.mdx#_snippet_21\n\nLANGUAGE: ts\nCODE:\n```\n{ExampleCode}\n```\n\n----------------------------------------\n\nTITLE: FHIR Subscription Extension Example\nDESCRIPTION: Illustrates how to add an extension to a FHIR Subscription object. The extension includes a URL that identifies the type of extension and a value property (e.g., valueInteger) that specifies the extension's value.  This example sets the maximum number of attempts for the subscription.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/subscriptions/subscription-extensions.md#_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"extension\": [\n    {\n      \"url\": \"https://medplum.com/fhir/StructureDefinition/subscription-max-attempts\",\n      \"valueInteger\": 3\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Searching specific Elements using _elements - cURL\nDESCRIPTION: Demonstrates how to retrieve only specific elements (subject and performers) of Observation resources using the `_elements` parameter using a cURL command. Requires cURL to be installed and configured.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/search/advanced-search-parameters.mdx#_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\n{ExampleCode}\n```\n\n----------------------------------------\n\nTITLE: FHIR Condition Resource Example in TypeScript\nDESCRIPTION: This snippet shows an example of converting condition data to a FHIR Condition resource using a local code representing an internal coding scheme. This allows for traceability to the source data. It includes the condition name and a human-readable description.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/migration/convert-to-fhir.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Condition } from '@medplum/fhirtypes';\n\nexport const conditionExample: Condition = {\n  resourceType: 'Condition',\n  id: 'example',\n  code: {\n    coding: [\n      {\n        system: 'http://your-source-system.com/conditions',\n        code: 'HT001',\n        display: 'Hypertension'\n      }\n    ],\n    text: 'Hypertension'\n  },\n  subject: {\n    reference: 'Patient/????'\n  }\n};\n\n```\n\n----------------------------------------\n\nTITLE: Start PostgreSQL Server\nDESCRIPTION: Starts the PostgreSQL server to allow database operations. Requires PostgreSQL to be installed on the system.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/self-hosting/install-from-scratch.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsudo pg_ctlcluster 16 main start\n```\n\n----------------------------------------\n\nTITLE: Retrieve PostgreSQL Password\nDESCRIPTION: Retrieves the auto-generated PostgreSQL password from Terraform's state. The password is required to access the database.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/self-hosting/install-on-azure.md#_snippet_5\n\nLANGUAGE: Azure CLI\nCODE:\n```\nterraform output postgresql_password\n```\n\n----------------------------------------\n\nTITLE: Authorization Code Grant with PKCE Sample Request\nDESCRIPTION: Sample HTTP GET request to the `/oauth2/authorize` endpoint for authorization code grant flow with PKCE (Proof Key for Code Exchange). This request includes `code_challenge_method` and `code_challenge` parameters in addition to the standard authorization code grant parameters.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/api/oauth/authorize.md#_snippet_2\n\nLANGUAGE: HTTP\nCODE:\n```\nGET https://api.medplum.com/oauth2/authorize?\n    response_type=code&\n    client_id=492e4ec3-fb66-4b45-b529-599c708ec530&\n    redirect_uri=https://YOUR_APP/redirect_uri&\n    state=STATE&\n    scope=openid&\n    code_challenge_method=S256&\n    code_challenge=CODE_CHALLENGE\n```\n\n----------------------------------------\n\nTITLE: Invite User to Project\nDESCRIPTION: Invites a user to a Medplum project using the `admin/projects/{projectId}/invite` endpoint. Requires super admin privileges and a valid login session. The JSON payload includes Practitioner resource details for the user.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/self-hosting/super-admin-cli.md#_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\nmedplum post admin/projects/cabd683a-dc09-492f-a513-416c6f3c16bd/invite '{ \\\n    \"resourceType\": \"Practitioner\", \\\n    \"firstName\": \"Bob\", \\\n    \"lastName\": \"Jones\", \\\n    \"email\": \"bob@example.com\" \\\n}'\n```\n\n----------------------------------------\n\nTITLE: Check MEDPLUM_BASE_URL\nDESCRIPTION: Prints the current value of the `MEDPLUM_BASE_URL` environment variable, which determines the Medplum API endpoint to use.  Useful for verifying the configured Medplum instance.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/self-hosting/super-admin-cli.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\necho $MEDPLUM_BASE_URL\n```\n\n----------------------------------------\n\nTITLE: Dosage Instructions in MedicationRequest (TypeScript)\nDESCRIPTION: This snippet demonstrates how to represent dosage instructions within a MedicationRequest resource using the `dosageInstruction` field. It uses the `Dosage` type to specify how, how often, and when the medication should be taken. This example needs the `ExampleCode` variable to be defined with the actual code.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/medications/representing-prescriptions-and-medication-orders.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n{ExampleCode}\n```\n\n----------------------------------------\n\nTITLE: Searching Threads with Messages using cURL\nDESCRIPTION: This snippet demonstrates how to search for all communication threads and include their messages using the `_revinclude` parameter via cURL in Medplum. The `_revinclude` parameter allows you to include resources that reference the search results in the `partOf` field.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/communications/organizing-communications.mdx#_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n{ExampleCode}\n```\n\n----------------------------------------\n\nTITLE: Simple Chained Search (Observation by Patient Name) - cURL\nDESCRIPTION: This bash snippet demonstrates how to search for Observation resources linked to a Patient with the name 'homer' using the `patient.name=homer` syntax via a cURL command. It illustrates the raw HTTP request.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/search/chained-search.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncurl -s -H \"Authorization: Bearer $MEDPLUM_CLIENT_ID\" \\\n  \"https://api.medplum.com/fhir/R4/Observation?patient.name=homer\" | jq\n```\n\n----------------------------------------\n\nTITLE: Clone Medplum Project with Name\nDESCRIPTION: Clones a Medplum project and sets a new name using the `$clone` operation with a JSON payload specifying the `name` parameter. Requires super admin privileges and a valid login session. Returns the JSON representation of the newly cloned project.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/self-hosting/super-admin-cli.md#_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nmedplum post 'Project/bca80725-ea6a-4fb4-8eac-41b8ee51f09e/$clone' '{\"name\": \"New Project Name\"}'\n```\n\n----------------------------------------\n\nTITLE: Get Patient and Related Persons (TypeScript)\nDESCRIPTION: This TypeScript example demonstrates how to search for a Patient and their RelatedPerson resources. It uses the _revinclude parameter to include RelatedPerson resources that reference the Patient via the patient field. The example depends on the Medplum client library.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/search/includes.mdx#_snippet_8\n\nLANGUAGE: TypeScript\nCODE:\n```\n{ExampleCode}\n```\n\n----------------------------------------\n\nTITLE: Deploying a Medplum Bot using the CLI (Bash)\nDESCRIPTION: This snippet shows how to deploy a Medplum Bot using the `npx medplum bot deploy` command. This command takes the bot name as an argument and deploys the compiled JavaScript code as an AWS Lambda function with the Medplum deployment, also saving the Typescript source to the `code` property of the `Bot` resource.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/bots/bots-in-production.md#_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nnpx medplum bot deploy <bot-name>\n```\n\n----------------------------------------\n\nTITLE: Front-End Write to Medplum Sequence Diagram (Mermaid)\nDESCRIPTION: This Mermaid sequence diagram illustrates the front-end write to Medplum phase.  It shows the Client writing directly to Medplum. An optional temporary dual write, triggered by a Medplum Bot (via Subscription), also writes the data to the Existing API and DB. This dual write mechanism provides a rollback option during the transition phase.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/migration/adoption-stategy.md#_snippet_3\n\nLANGUAGE: mermaid\nCODE:\n```\nsequenceDiagram\n    participant Client\n    participant Medplum\n    participant Medplum Bot\n    participant Existing API\n    Client->>Medplum: Write Request\n    opt Optional: Temporary Dual Write\n        Medplum->>Medplum Bot: Trigger Bot (via. Subscription)\n        Medplum Bot->>Existing API: Write Data\n        Existing API->>Existing DB: Write Data\n        Existing DB-->>Existing API: Confirmation\n        Existing API-->>Medplum: Confirmation\n    end\n    Medplum-->>Client: Response\n```\n\n----------------------------------------\n\nTITLE: Multiple Chained Parameters (Observation by Encounter and Practitioner) - CLI\nDESCRIPTION: This bash snippet demonstrates how to chain multiple parameters via the Medplum CLI to search for Observation resources linked to an Encounter done by a service provider with the name 'Kaiser'.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/search/chained-search.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nmedplum search Observation --encounter.service-provider.name Kaiser\n```\n\n----------------------------------------\n\nTITLE: Implementing Tabs Component\nDESCRIPTION: Uses the Tabs and TabItem components to create a tabbed interface for organizing the Measure resource documentation. The tabs include 'Schema', 'Usage', 'Relationships', and 'Referenced By'. The 'Schema' tab is set as the default.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/api/fhir/resources/measure.mdx#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n<Tabs queryString=\"section\">\n  <TabItem value=\"schema\" label=\"Schema\" default>\n\n## Elements\n\n<ResourcePropertiesTable\n  properties={definition.properties.filter((p) => !(p.inherited && p.base.includes('Resource')))}\n/>\n\n## Search Parameters\n\n<SearchParamsTable searchParams={definition.searchParameters} />\n\n## Inherited Elements\n\n<ResourcePropertiesTable properties={definition.properties.filter((p) => p.inherited && p.base.includes('Resource'))} />\n\n  </TabItem>\n  <TabItem value=\"usage\" label=\"Usage\">\n<div> <a name=\"bnc\"></a> <p>The <Link to=\"/docs/api/fhir/resources/measure\">Measure</Link> resource represents a structured, computable definition of a health-related measure such as a clinical quality measure, public health indicator, or population analytics measure. A quality measure is a quantitative tool to assess the performance of an individual or organization with respect to a specified process or outcome via the measurement of actions, processes, or outcomes of clinical care. Quality measures are often derived from clinical guidelines and are designed to determine whether the appropriate care has been provided given a set of clinical criteria and an evidence base.</p> <p>Note that the <Link to=\"/docs/api/fhir/resources/measure\">Measure</Link> itself does not typically contain any logic; rather a <a href=\"/docs/api/fhir/resources/library\">Library</a> resource is referenced that contains the logic required by the measure, and the various expression elements, such as population criteria, reference named expressions within that library (or libraries). In addition, if the <Link to=\"/docs/api/fhir/resources/measure\">Measure</Link> references multiple libraries, then any expression references within the resource must be qualified with the name of the library that contains the referenced expression.</p> <p>For a detailed discussion of how to use the <Link to=\"/docs/api/fhir/resources/measure\">Measure</Link> and <Link to=\"/docs/api/fhir/resources/measurereport\">MeasureReport</Link> resources, refer to the <a href=\"https://www.hl7.org/fhir/clinicalreasoning-quality-reporting.html\">Quality Reporting</a> topic.</p> </div>\n  </TabItem>\n  <TabItem value=\"relationships\" label=\"Relationships\">\n<div> <p>The <Link to=\"/docs/api/fhir/resources/measure\">Measure</Link> resource describes a specific quality measure, or population analytic, providing the structure of the measure in terms of the calculation elements (the <i>populations</i> involved). The <a href=\"/docs/api/fhir/resources/group\">Group</a> resource is also capable of describing a population, however, the complexity involved in specifying the criteria in the general case requires the use of a high-level query language such as Clinical Quality Language (CQL). As such, the <Link to=\"/docs/api/fhir/resources/measure\">Measure</Link> resource defines only the top-level populations and references expressions for the actual criteria. These expressions are typically provided using a <a href=\"/docs/api/fhir/resources/library\">Library</a> resource containing CQL or ELM expressions. In addition, the individual members of a population may be cases such as encounters or procedures and in these cases, the <Link to=\"/docs/api/fhir/resources/group\">Group</Link> resource would be unable to represent the population characteristics accurately.</p> <p>A <Link to=\"/docs/api/fhir/resources/measure\">Measure</Link> is also similar to an <a href=\"/docs/api/fhir/resources/observation\">Observation</a> resource, with the exception that the <Link to=\"/docs/api/fhir/resources/measure\">Measure</Link> is purely definitional, it contains no actual measurements, only a description of how to calculate a particular measurement or set of measurements.</p> <p>A <Link to=\"/docs/api/fhir/resources/measure\">Measure</Link> is also similar to a clinical document, but as with the relationship to <Link to=\"/docs/api/fhir/resources/observation\">Observation</Link>, a Document is specific to a particular subject.</p> </div>\n  </TabItem>\n\n  <TabItem value=\"referencedBy\" label=\"Referenced By\">\n<ul><li><a href=\"/docs/api/fhir/resources/careplan\">CarePlan</a></li>\n<li><a href=\"/docs/api/fhir/resources/communication\">Communication</a></li>\n<li><a href=\"/docs/api/fhir/resources/familymemberhistory\">FamilyMemberHistory</a></li>\n<li><a href=\"/docs/api/fhir/resources/measurereport\">MeasureReport</a></li>\n<li><a href=\"/docs/api/fhir/resources/procedure\">Procedure</a></li></ul>\n  </TabItem>\n</Tabs>\n```\n\n----------------------------------------\n\nTITLE: Copying Environment Variables - Bash\nDESCRIPTION: This command copies the default environment variables file (.env.defaults) to a new file named .env. This allows users to customize the environment variables for the application without modifying the default configuration.\nSOURCE: https://github.com/medplum/medplum/blob/main/examples/medplum-scheduling-demo/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncp .env.defaults .env\n```\n\n----------------------------------------\n\nTITLE: Medplum Config JSON\nDESCRIPTION: This JSON snippet shows the configuration for a Medplum bot.  It defines the bot's name, ID, source file, and output file. The ID is a UUID that uniquely identifies the bot within the Medplum platform.\nSOURCE: https://github.com/medplum/medplum/blob/main/examples/medplum-demo-bots/README.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"sample-account-setup\",\n  \"id\": \"aa3a0383-a97b-4172-b65d-430f6241646f\",\n  \"source\": \"src/examples/sample-account-setup.ts\",\n  \"dist\": \"dist/sample-account-setup.js\"\n}\n```\n\n----------------------------------------\n\nTITLE: FHIR Batch PATCH with Base64 Encoded JSON Patch (JavaScript)\nDESCRIPTION: This code demonstrates how to perform a FHIR batch PATCH operation using a base64 encoded JSON Patch array. The JSON Patch is encoded as a Binary resource and included in the batch request. The content type is set to `application/json-patch+json`, and the `data` field contains the base64 encoded patch.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/fhir-datastore/fhir-batch-requests.mdx#_snippet_10\n\nLANGUAGE: js\nCODE:\n```\n{\n  \"request\": {\n    \"method\": \"PATCH\",\n    \"url\": \"Patient/6ffaaab4-ff7e-4416-80c7-8fce95c3e31c\"\n  },\n  \"resource\": \"resource\": {\n    \"resourceType\": \"Binary\",\n    \"contentType\": \"application/json-patch+json\",\n    // Encoded: [{\\\"op\\\":\\\"test\\\",\\\"path\\\":\\\"/active\\\",\\\"value\\\":false}]\n    \"data\": \"W3sib3AiOiJyZXBsYWNlIiwicGF0aCI6Ii9hY3RpdmUiLCJ2YWx1ZSI6ZmFsc2V9XQo=\"\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Medplum Bot using the CLI (Bash)\nDESCRIPTION: This snippet demonstrates how to create a Medplum Bot resource using the `npx medplum bot create` command. This command takes the bot name, project ID, source file, and dist file as arguments. It then creates the Bot resource, a ProjectMembership resource, saves the bot to the database, and adds an entry to the `medplum.config.json` file.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/bots/bots-in-production.md#_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nnpx medplum bot create <bot-name> <project-id> <source-file> <dist-file>\n```\n\n----------------------------------------\n\nTITLE: Invite Patient via Medplum API - CLI\nDESCRIPTION: This CLI code snippet demonstrates how to invite a Patient to a Medplum project using the `medplum post` command. It sets the resource type, first name, last name, email and password.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/api/project-admin/invite.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nmedplum post admin/projects/:projectId/invite \\\n'{\n  \"resourceType\": \"Patient\",\n  \"firstName\": \"George\",\n  \"lastName\": \"Washington\",\n  \"email\": \"patient.gw@example.gov\",\n  \"password: \"lib3rty0rDe4th!\"\n}'\n```\n\n----------------------------------------\n\nTITLE: Conditional Upsert using Medplum CLI\nDESCRIPTION: This snippet demonstrates how to perform a conditional update using the Medplum CLI. It uses a PUT operation with a search query in the URL to either create a new resource if none are found or update an existing resource if one is found. It ensures idempotency using Medplum CLI.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/migration/migration-pipelines.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nimport ExampleCode from '!!raw-loader!@site/../examples/src/migration/migration-pipelines.ts';\n<MedplumCodeBlock language=\"bash\" selectBlocks=\"medplum-cli-upsert\">\n      {ExampleCode}\n    </MedplumCodeBlock>\n```\n\n----------------------------------------\n\nTITLE: Start PostgreSQL\nDESCRIPTION: Starts the PostgreSQL cluster service. Required to make changes to the database and access the postgres instance.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/self-hosting/install-on-ubuntu.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsudo pg_ctlcluster 16 main start\n```\n\n----------------------------------------\n\nTITLE: Upload Binary Data with curl\nDESCRIPTION: This bash script demonstrates how to upload binary data to Medplum using the `curl` command-line tool. It sets the `Authorization` header for authentication, the `Content-Type` header to specify the MIME type, and uses the `--data-binary` flag to upload the file. It requires a valid access token and the correct file path. The file will be uploaded as a FHIR Binary resource.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/fhir-datastore/binary-data.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST \\\n     -H \"Authorization: Bearer YOUR_TOKEN\" \\\n     -H \"Content-Type: image/jpeg\" \\\n     --data-binary \"@./yourfile.jpg\" \\\n     https://api.medplum.com/fhir/R4/Binary\n```\n\n----------------------------------------\n\nTITLE: Medplum PATCH Request - Update Patient with JSONPatch\nDESCRIPTION: Executes a `medplum patch` request to update a patient's active status using JSONPatch.  Replace `$id` with the patient ID.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/cli/index.md#_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\nmedplum patch Patient/$id '[{\"op\":\"add\",\"path\":\"/active\",\"value\":[true]}]'\n```\n\n----------------------------------------\n\nTITLE: Example RedisSecrets Value (JSON)\nDESCRIPTION: Shows an example JSON structure for the `RedisSecrets` value when using AWS Parameter Store config. This includes the password, port, host, and tls settings.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/self-hosting/config-settings.md#_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"password\": \"password\",\n  \"port\": \"6379\",\n  \"host\": \"my-cluster.cache.amazonaws.com\",\n  \"tls\": {}\n}\n```\n\n----------------------------------------\n\nTITLE: Get SSL Certificates from Let's Encrypt\nDESCRIPTION: Obtains SSL certificates from Let's Encrypt using Certbot for the specified domains. Assumes that the domains point to the server's IP address.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/self-hosting/install-on-ubuntu.md#_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\nsudo certbot --nginx -d app.example.com\nsudo certbot --nginx -d api.example.com\n```\n\n----------------------------------------\n\nTITLE: Medplum POST Request - Invoke FHIR Operation\nDESCRIPTION: Executes a `medplum post` request to invoke a FHIR operation, such as `$validate`, on a patient resource.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/cli/index.md#_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nmedplum post 'Patient/$validate' '{\"resourceType\":\"Patient\",\"name\":[{\"family\":\"Simpson\"}]}'\n```\n\n----------------------------------------\n\nTITLE: Create Bot with runAsUser in Medplum (TypeScript)\nDESCRIPTION: This code snippet shows how to create a Medplum Bot resource using the `medplum.createResource` method and sets the `runAsUser` field to `true`. This configuration ensures that the Bot inherits the access permissions of the user who triggered it.  The Medplum SDK must be available to run this code. The Bot name is 'My Bot'.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/bots/bot-run-as-user.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst Bot = await medplum.createResource({\n  resourceType: 'Bot',\n  name: 'My Bot',\n  runAsUser: true,\n});\n```\n\n----------------------------------------\n\nTITLE: Reverse Chained Search (Patient with High Heart Rate Observation) - CLI\nDESCRIPTION: This bash snippet demonstrates a reverse chained search to find Patient resources with an Observation of a high heart rate (Loinc Code 8867-4) using the Medplum CLI.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/search/chained-search.md#_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nmedplum search Patient --_has:Observation:subject:code=8867-4\n```\n\n----------------------------------------\n\nTITLE: Fargate Auto Scaling Configuration in TypeScript\nDESCRIPTION: This code snippet shows the configuration options for Fargate auto scaling. It defines the minimum and maximum capacity, target utilization percentage, and cooldown periods for scaling in and out.  These settings control how Medplum automatically adjusts the number of running tasks based on CPU utilization.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/self-hosting/config-settings.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nfargateAutoScaling: {\n  minCapacity: 1,\n  maxCapacity: 10,\n  targetUtilizationPercent: 50,\n  scaleInCooldown: 60,\n  scaleOutCooldown: 60,\n}\n```\n\n----------------------------------------\n\nTITLE: Deploying Medplum Bot to Production - Bash\nDESCRIPTION: This Bash script deploys a Medplum Bot to the production environment.  It sets the `MEDPLUM_CLIENT_ID` and `MEDPLUM_CLIENT_SECRET` environment variables for the production environment, builds the project using `npm run build`, and then deploys the bot using the Medplum CLI (`npx medplum bot deploy`).\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/bots/bots-in-production.md#_snippet_18\n\nLANGUAGE: Bash\nCODE:\n```\nexport MEDPLUM_CLIENT_ID=<PRODUCTION_CLIENT_ID>\nexport MEDPLUM_CLIENT_SECRET=<PRODUCTION_CLIENT_SECRET>\nnpm run build\nnpx medplum bot deploy my-first-bot-production\n```\n\n----------------------------------------\n\nTITLE: Disabling PKCE for AWS Cognito\nDESCRIPTION: Shows how to disable PKCE (Proof Key for Code Exchange) when using AWS Cognito as an external identity provider. This requires setting the `pkceEnabled` parameter to `false` in the `signInWithExternalAuth` call and enabling \"PKCE Optional\" on the Medplum ClientApplication.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/auth/methods/external-identity-providers.mdx#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n  medplum.signInWithExternalAuth(\n    EXTERNAL_AUTHORIZE_URL,\n    EXTERNAL_CLIENT_ID,\n    EXTERNAL_REDIRECT_URI,\n    {\n      projectId: MEDPLUM_PROJECT_ID,\n      clientId: MEDPLUM_CLIENT_ID,\n      redirectUri: WEB_APP_REDIRECT_URI,\n    },\n    false,\n  ),\n```\n\n----------------------------------------\n\nTITLE: Searching for a Summary using _summary - CLI\nDESCRIPTION: Demonstrates how to search for a summary representation of a Patient resource using the `_summary` parameter in the command-line interface (CLI).  This retrieves only elements marked as `summary` in the resource definition. Requires the Medplum CLI to be installed and configured.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/search/advanced-search-parameters.mdx#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n{ExampleCode}\n```\n\n----------------------------------------\n\nTITLE: Searching by ID using _id Parameter - Typescript\nDESCRIPTION: Demonstrates how to search for Patient resources using their IDs via the `_id` parameter in Typescript.  The code snippet utilizes the Medplum client to execute the FHIR search operation. Requires the Medplum SDK and a configured Medplum client.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/search/advanced-search-parameters.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n{ExampleCode}\n```\n\n----------------------------------------\n\nTITLE: Invite a New User as Admin (cURL)\nDESCRIPTION: This code snippet demonstrates how to invite a new user as an admin to a project using cURL to interact with the Medplum API.  It requires a valid access token and the Medplum base URL. The `inviteNewAdminCurl` block from the ExampleCode file is used.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/auth/user-management-guide/user-management-guide.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST \\\n  https://api.medplum.com/fhir/R4/ProjectMembership \\\n  -H 'Authorization: Bearer YOUR_ACCESS_TOKEN' \\\n  -H 'Content-Type: application/fhir+json' \\\n  -d '{\n    \"resourceType\": \"ProjectMembership\",\n    \"project\": \"YOUR_PROJECT_ID\",\n    \"user\": {\n      \"identifier\": {\n        \"system\": \"email\",\n        \"value\": \"user@example.com\"\n      }\n    },\n    \"profile\": {\n      \"reference\": \"Practitioner/123\"\n    },\n    \"admin\": true\n  }'\n```\n\n----------------------------------------\n\nTITLE: Importing React components for documentation\nDESCRIPTION: This snippet imports necessary React components from Docusaurus and a local file to render the Practitioner resource documentation.  It imports Link, Tabs, and TabItem from Docusaurus for creating links and tabbed interfaces. It also imports JSON data defining the Practitioner resource and two custom components for rendering tables of resource properties and search parameters.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/api/fhir/resources/practitioner.mdx#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport Link from '@docusaurus/Link';\nimport Tabs from '@theme/Tabs';\nimport TabItem from '@theme/TabItem';\nimport definition from '@site/static/data/resourceDefinitions/practitioner.json';\nimport { ResourcePropertiesTable, SearchParamsTable } from '@site/src/components/ResourceTables';\n```\n\n----------------------------------------\n\nTITLE: Docusaurus Tabs Component\nDESCRIPTION: Uses the Docusaurus Tabs component to organize the documentation into sections for schema, usage, and resources that reference the Patient resource. Each TabItem represents a different section.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/api/fhir/resources/patient.mdx#_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<Tabs queryString=\"section\">\n  <TabItem value=\"schema\" label=\"Schema\" default>\n\n## Elements\n\n<ResourcePropertiesTable\n  properties={definition.properties.filter((p) => !(p.inherited && p.base.includes('Resource')))}\n/>\n\n## Search Parameters\n\n<SearchParamsTable searchParams={definition.searchParameters} />\n\n## Inherited Elements\n\n<ResourcePropertiesTable properties={definition.properties.filter((p) => p.inherited && p.base.includes('Resource'))} />\n\n  </TabItem>\n  <TabItem value=\"usage\" label=\"Usage\">\n<div> <a name=\"scope\"></a> <p> This Resource covers data about patients and animals involved in a wide range of health-related activities, including: </p> <ul> <li>Curative activities</li> <li>Psychiatric care</li> <li>Social services</li> <li>Pregnancy care</li> <li>Nursing and assisted living</li> <li>Dietary services</li> <li>Tracking of personal health and exercise data</li> </ul> <p> The data in the Resource covers the \"who\" information about the patient: its attributes are focused on the demographic information necessary to support the administrative, financial and logistic procedures. A <Link to=\"/docs/api/fhir/resources/patient\">Patient</Link> record is generally  created and maintained by each organization providing care for a patient. A patient or animal receiving care at multiple organizations may therefore have its information present in multiple <Link to=\"/docs/api/fhir/resources/patient\">Patient</Link> Resources. </p> <p> Not all concepts are included within the base resource (such as race, ethnicity, organ donor status, nationality, etc.),  but may be found in <a href=\"https://www.hl7.org/fhir/patient-profiles.html\">profiles</a> defined for specific jurisdictions (e.g., US Meaningful Use Program)  or <a href=\"https://www.hl7.org/fhir/patient-extensions.html\">standard extensions</a>. Such fields vary widely between jurisdictions and often have different  names and valuesets for the similar concepts, but they are not similar enough to be able to map and exchange. </p> </div>\n  </TabItem>\n\n\n  <TabItem value=\"referencedBy\" label=\"Referenced By\">\n<ul><li><a href=\"https://www.hl7.org/fhir/datatypes.html#Annotation\">Annotation</a></li>\n<li><a href=\"https://www.hl7.org/fhir/datatypes.html#Signature\">Signature</a></li>\n<li><a href=\"/docs/api/fhir/resources/account\">Account</a></li>\n<li><a href=\"/docs/api/fhir/resources/adverseevent\">AdverseEvent</a></li>\n<li><a href=\"/docs/api/fhir/resources/allergyintolerance\">AllergyIntolerance</a></li>\n<li><a href=\"/docs/api/fhir/resources/appointment\">Appointment</a></li>\n<li><a href=\"/docs/api/fhir/resources/appointmentresponse\">AppointmentResponse</a></li>\n<li><a href=\"/docs/api/fhir/resources/auditevent\">AuditEvent</a></li>\n<li><a href=\"/docs/api/fhir/resources/basic\">Basic</a></li>\n<li><a href=\"/docs/api/fhir/resources/biologicallyderivedproduct\">BiologicallyDerivedProduct</a></li>\n<li><a href=\"/docs/api/fhir/resources/bodystructure\">BodyStructure</a></li>\n<li><a href=\"/docs/api/fhir/resources/careplan\">CarePlan</a></li>\n<li><a href=\"/docs/api/fhir/resources/careteam\">CareTeam</a></li>\n<li><a href=\"/docs/api/fhir/resources/chargeitem\">ChargeItem</a></li>\n<li><a href=\"/docs/api/fhir/resources/claim\">Claim</a></li>\n<li><a href=\"/docs/api/fhir/resources/claimresponse\">ClaimResponse</a></li>\n<li><a href=\"/docs/api/fhir/resources/clinicalimpression\">ClinicalImpression</a></li>\n<li><a href=\"/docs/api/fhir/resources/communication\">Communication</a></li>\n<li><a href=\"/docs/api/fhir/resources/communicationrequest\">CommunicationRequest</a></li>\n<li><a href=\"/docs/api/fhir/resources/composition\">Composition</a></li>\n<li><a href=\"/docs/api/fhir/resources/condition\">Condition</a></li>\n<li><a href=\"/docs/api/fhir/resources/consent\">Consent</a></li>\n<li><a href=\"/docs/api/fhir/resources/contract\">Contract</a></li>\n<li><a href=\"/docs/api/fhir/resources/coverage\">Coverage</a></li>\n<li><a href=\"/docs/api/fhir/resources/coverageeligibilityrequest\">CoverageEligibilityRequest</a></li>\n<li><a href=\"/docs/api/fhir/resources/coverageeligibilityresponse\">CoverageEligibilityResponse</a></li>\n<li><a href=\"/docs/api/fhir/resources/detectedissue\">DetectedIssue</a></li>\n<li><a href=\"/docs/api/fhir/resources/device\">Device</a></li>\n<li><a href=\"/docs/api/fhir/resources/devicerequest\">DeviceRequest</a></li>\n<li><a href=\"/docs/api/fhir/resources/deviceusestatement\">DeviceUseStatement</a></li>\n<li><a href=\"/docs/api/fhir/resources/diagnosticreport\">DiagnosticReport</a></li>\n<li><a href=\"/docs/api/fhir/resources/documentmanifest\">DocumentManifest</a></li>\n<li><a href=\"/docs/api/fhir/resources/documentreference\">DocumentReference</a></li>\n<li><a href=\"/docs/api/fhir/resources/encounter\">Encounter</a></li>\n<li><a href=\"/docs/api/fhir/resources/enrollmentrequest\">EnrollmentRequest</a></li>\n<li><a href=\"/docs/api/fhir/resources/episodeofcare\">EpisodeOfCare</a></li>\n<li><a href=\"/docs/api/fhir/resources/explanationofbenefit\">ExplanationOfBenefit</a></li>\n<li><a href=\"/docs/api/fhir/resources/familymemberhistory\">FamilyMemberHistory</a></li>\n<li><a href=\"/docs/api/fhir/resources/flag\">Flag</a></li>\n<li><a href=\"/docs/api/fhir/resources/goal\">Goal</a></li>\n<li><a href=\"/docs/api/fhir/resources/group\">Group</a></li>\n<li><a href=\"/docs/api/fhir/resources/guidanceresponse\">GuidanceResponse</a></li>\n<li><a href=\"/docs/api/fhir/resources/imagingstudy\">ImagingStudy</a></li>\n<li><a href=\"/docs/api/fhir/resources/immunization\">Immunization</a></li>\n<li><a href=\"/docs/api/fhir/resources/immunizationevaluation\">ImmunizationEvaluation</a></li>\n<li><a href=\"/docs/api/fhir/resources/immunizationrecommendation\">ImmunizationRecommendation</a></li>\n<li><a href=\"/docs/api/fhir/resources/invoice\">Invoice</a></li>\n<li><a href=\"/docs/api/fhir/resources/list\">List</a></li>\n<li><a href=\"/docs/api/fhir/resources/measurereport\">MeasureReport</a></li>\n<li><a href=\"/docs/api/fhir/resources/media\">Media</a></li>\n<li><a href=\"/docs/api/fhir/resources/medicationadministration\">MedicationAdministration</a></li>\n<li><a href=\"/docs/api/fhir/resources/medicationdispense\">MedicationDispense</a></li>\n<li><a href=\"/docs/api/fhir/resources/medicationrequest\">MedicationRequest</a></li>\n<li><a href=\"/docs/api/fhir/resources/medicationstatement\">MedicationStatement</a></li>\n<li><a href=\"/docs/api/fhir/resources/molecularsequence\">MolecularSequence</a></li>\n<li><a href=\"/docs/api/fhir/resources/nutritionorder\">NutritionOrder</a></li>\n<li><a href=\"/docs/api/fhir/resources/observation\">Observation</a></li>\n<li><a href=\"/docs/api/fhir/resources/person\">Person</a></li>\n<li><a href=\"/docs/api/fhir/resources/procedure\">Procedure</a></li>\n<li><a href=\"/docs/api/fhir/resources/provenance\">Provenance</a></li>\n<li><a href=\"/docs/api/fhir/resources/questionnaireresponse\">QuestionnaireResponse</a></li>\n<li><a href=\"/docs/api/fhir/resources/relatedperson\">RelatedPerson</a></li>\n<li><a href=\"/docs/api/fhir/resources/requestgroup\">RequestGroup</a></li>\n<li><a href=\"/docs/api/fhir/resources/researchsubject\">ResearchSubject</a></li>\n<li><a href=\"/docs/api/fhir/resources/riskassessment\">RiskAssessment</a></li>\n<li><a href=\"/docs/api/fhir/resources/schedule\">Schedule</a></li>\n<li><a href=\"/docs/api/fhir/resources/servicerequest\">ServiceRequest</a></li>\n<li><a href=\"/docs/api/fhir/resources/specimen\">Specimen</a></li>\n<li><a href=\"/docs/api/fhir/resources/supplydelivery\">SupplyDelivery</a></li>\n<li><a href=\"/docs/api/fhir/resources/supplyrequest\">SupplyRequest</a></li>\n<li><a href=\"/docs/api/fhir/resources/task\">Task</a></li>\n<li><a href=\"/docs/api/fhir/resources/visionprescription\">VisionPrescription</a></li></ul>\n  </TabItem>\n</Tabs>\n```\n\n----------------------------------------\n\nTITLE: Search Project Practitioners\nDESCRIPTION: Searches for ProjectMembership resources of type Practitioner. This retrieves a list of all Practitioners associated with a project. No dependencies are required. The output is a list of ProjectMembership resources in FHIR format, filtered to include Practitioners.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/auth/user-management-guide/user-management-guide.md#_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\n{ExampleCode}\n```\n\n----------------------------------------\n\nTITLE: Invoking $bulk-status Operation\nDESCRIPTION: This snippet demonstrates how to invoke the `$bulk-status` operation on the Agent resource using a GET request to the Medplum server. The base URL for the Medplum server should be substituted for `[base]`.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/agent/bulk-status.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n[base]/Agent/$bulk-status\n```\n\n----------------------------------------\n\nTITLE: Revoke Other Session Access Token (TypeScript)\nDESCRIPTION: Revokes a specific session access token using the `MedplumClient.post()` method to send a request to the `/auth/revoke` endpoint. Requires a `loginId` to identify the session to revoke.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/auth/logout.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nawait medplum.post('/auth/revoke', { loginId: 'MY_LOGIN_ID' });\n```\n\n----------------------------------------\n\nTITLE: Logical AND Filtering Example in Medplum (cURL)\nDESCRIPTION: Illustrates how to use the `_filter` parameter with logical 'and' using cURL against the Medplum API.  This snippet shows the construction of the HTTP request with the appropriate query parameters to combine filters. No specific dependencies, but familiarity with HTTP requests is assumed.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/search/filter-search-parameter.mdx#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n{ExampleCode}\n```\n\n----------------------------------------\n\nTITLE: TypeScript Compilation Command\nDESCRIPTION: Example command to compile the bot's TypeScript code using the `tsc` (TypeScript compiler).  Assumes a `tsconfig.json` file is configured.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/cli/index.md#_snippet_34\n\nLANGUAGE: bash\nCODE:\n```\nnpx tsc\n```\n\n----------------------------------------\n\nTITLE: Nginx Site Configuration (API)\nDESCRIPTION: Defines the Nginx configuration for the Medplum API server. It configures Nginx to listen on ports 80 and 443, redirect HTTP to HTTPS, and proxy requests to the Node.js server.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/self-hosting/install-from-scratch.md#_snippet_24\n\nLANGUAGE: nginx\nCODE:\n```\n# /etc/nginx/sites-available/api.example.com\nserver {\n    listen 80;\n    listen [::]:80;\n    server_name api.example.com;\n\n    # Redirect HTTP to HTTPS\n    location / {\n        return 301 https://$server_name$request_uri;\n    }\n}\n\nserver {\n    listen 443 ssl;\n    listen [::]:443 ssl;\n    server_name api.example.com;\n\n    ssl_certificate /etc/letsencrypt/live/api.example.com/fullchain.pem;\n    ssl_certificate_key /etc/letsencrypt/live/api.example.com/privkey.pem;\n    include /etc/letsencrypt/options-ssl-nginx.conf;\n    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem;\n\n    location / {\n        proxy_pass http://localhost:8103;\n        proxy_http_version 1.1;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection 'upgrade';\n        proxy_set_header Host $host;\n        proxy_cache_bypass $http_upgrade;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Export C-CDA Patient Data via API (Bash)\nDESCRIPTION: This snippet demonstrates how to export C-CDA data for a specific patient using the Medplum FHIR R4 API. It uses a `curl` command to send a request to the `$ccda-export` endpoint for a given Patient ID.  The user must replace `<PATIENT_ID>` with the actual patient ID and `<ACCESS_TOKEN>` with a valid access token.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/api/fhir/operations/ccda-export.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl 'https://api.medplum.com/fhir/R4/Patient/<PATIENT_ID>/$ccda-export' \\\n  -H 'Authorization: Bearer <ACCESS_TOKEN>'\n```\n\n----------------------------------------\n\nTITLE: Handling Auth Response JavaScript\nDESCRIPTION: This JavaScript function `handleAuthResponse` processes the response from `startLogin`. It handles both the case where the user has a single profile (code is present) and multiple profiles (memberships are present).  In the multiple profile case, it selects the first membership for simplicity.\nSOURCE: https://github.com/medplum/medplum/blob/main/examples/medplum-react-native-example/README.md#_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nfunction handleAuthResponse(response) {\n  if (response.code) {\n    handleCode(response.code);\n  }\n  if (response.memberships) {\n    // TODO: Handle multiple memberships\n    // In a real app, you would present a list of memberships to the user\n    // For this example, just use the first membership\n    medplum\n      .post('auth/profile', {\n        login: response.login,\n        profile: response.memberships[0].id,\n      })\n      .then(handleAuthResponse);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Reading FHIR Resource with readResource - Typescript\nDESCRIPTION: Demonstrates how to read a FHIR resource using the `readResource` helper function from the MedplumClient. This function requires the resource type and the ID of the resource as parameters. The result is the FHIR resource.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/fhir-datastore/reading-data.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { MedplumClient } from '@medplum/core';\n\nasync function readPatient(medplum: MedplumClient, id: string) {\n  const patient = await medplum.readResource('Patient', id);\n  console.log(patient);\n}\n\nasync function readObservation(medplum: MedplumClient, id: string) {\n  const observation = await medplum.readResource('Observation', id);\n  console.log(observation);\n}\n\nasync function readEncounter(medplum: MedplumClient, id: string) {\n  const encounter = await medplum.readResource('Encounter', id);\n  console.log(encounter);\n}\n```\n\n----------------------------------------\n\nTITLE: Medplum Bot TypeScript Example\nDESCRIPTION: Example TypeScript code for a Medplum bot.  Imports `MedplumClient` from `@medplum/core` and `Resource` from `@medplum/fhirtypes`.  Defines an asynchronous `handler` function.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/cli/index.md#_snippet_32\n\nLANGUAGE: typescript\nCODE:\n```\nimport { MedplumClient } from '@medplum/core';\nimport { Resource } from '@medplum/fhirtypes';\n\nexport async function handler(medplum: MedplumClient, event: BotEvent): Promise<any> {\n  console.log('Hello world');\n}\n```\n\n----------------------------------------\n\nTITLE: FHIR Subscription with FHIRPath Criteria\nDESCRIPTION: This JSON snippet shows a FHIR Subscription resource configured to use a FHIRPath expression as its criteria for triggering. It uses the 'fhir-path-criteria-expression' extension. The valueString contains the FHIRPath expression that determines when the subscription should fire based on changes to the Task resource's status.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/subscriptions/subscription-extensions.md#_snippet_12\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"resourceType\": \"Subscription\",\n  \"reason\": \"Task Status Change\",\n  \"status\": \"active\",\n  \"channel\": {\n    \"type\": \"rest-hook\",\n    \"endpoint\": \"https://example.com/webhook\"\n  },\n  \"criteria\": \"Task\",\n  \"extension\": [\n    {\n      \"url\": \"https://medplum.com/fhir/StructureDefinition/fhir-path-criteria-expression\",\n      \"valueString\": \"%previous.status != %current.status\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: ClientApplication Configuration JSON\nDESCRIPTION: This JSON configuration represents a ClientApplication resource in Medplum, specifically configured to launch the Inferno testing tool for SMART App Launch. It includes essential details such as the resource type, name, IDs, URIs for redirection, JWKS, and launch.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/integration/smart-app-launch.md#_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"resourceType\": \"ClientApplication\",\n  \"name\": \"Inferno Client\",\n  \"id\": \"<id here>\",\n  \"secret\": \"<secret here>\",\n  \"redirectUri\": \"https://inferno.healthit.gov/suites/custom/smart/redirect\",\n  \"jwksUri\": \"https://inferno.healthit.gov/suites/custom/g10_certification/.well-known/jwks.json\",\n  \"launchUri\": \"https://inferno.healthit.gov/suites/custom/smart/launch\"\n}\n```\n\n----------------------------------------\n\nTITLE: FHIR Subscription for 'update' events\nDESCRIPTION: This JSON snippet shows a FHIR Subscription configuration restricted to execute only on 'update' events. It uses the 'subscription-supported-interaction' extension and sets the valueCode to 'update'. The subscription will only trigger when an existing resource is updated.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/subscriptions/subscription-extensions.md#_snippet_4\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"resourceType\": \"Subscription\",\n  \"reason\": \"test\",\n  \"status\": \"active\",\n  \"criteria\": \"Patient\",\n  \"channel\": {\n    \"type\": \"rest-hook\",\n    \"endpoint\": \"https://example.com/webhook\"\n  },\n  \"extension\": [\n    {\n      \"url\": \"https://medplum.com/fhir/StructureDefinition/subscription-supported-interaction\",\n      \"valueCode\": \"update\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: QuestionnaireResponse Example (Typescript)\nDESCRIPTION: This example demonstrates a QuestionnaireResponse, which is used to record answers to a Questionnaire. The `item` element contains the answers, mirroring the structure of the corresponding Questionnaire.  The response provides metadata such as the source of the answers, the subject to whom the answers apply, and the date the answers were gathered.  It adheres to the data types defined in the linked Questionnaire.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/questionnaires/questionnaires-and-responses.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n{ExampleCode}\n```\n\n----------------------------------------\n\nTITLE: Run Sim Hospital to Docker Host (Bash)\nDESCRIPTION: This bash command runs Sim Hospital in Docker, configured to output HL7 messages over MLLP, specifically targeting the host machine's port when running the agent in Docker as well.  It uses `host.docker.internal` as the destination. This is used for local testing on Linux/Mac.  Requires Docker.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/agent/index.md#_snippet_8\n\nLANGUAGE: Bash\nCODE:\n```\ndocker run --rm -it -p 8000:8000 eu.gcr.io/simhospital-images/simhospital:latest health/simulator -output mllp -mllp_destination host.docker.internal:<port> -pathways_per_hour 720\n```\n\n----------------------------------------\n\nTITLE: HL7 OBR Segment Example (ORU)\nDESCRIPTION: This code snippet shows an example of an OBR (Observation Request) segment in an HL7 ORU^R01 message. It details about the test order, including test ID and ordering physician. Key information consists of set ID, placer order number, universal service identifier, date/time of the observation, and ordering provider.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/integration/hl7-interfacing/orders-and-results.md#_snippet_8\n\nLANGUAGE: hl7\nCODE:\n```\nOBR|1|8481234^LAB|1045813^LAB|1554-5^LDL Cholesterol^LN|||202404220900|||||||||123456^Smith^Jane^^^^^MD|||||202404221200|||F||||||LDL||202404221400|Serum\n```\n\n----------------------------------------\n\nTITLE: Medplum Expunge Everything Operation\nDESCRIPTION: Shows the HTTP POST request used to expunge all resources within a specified resource compartment using the Medplum $expunge operation with the 'everything' flag.  This example shows how to expunge all data in the Patient or Project compartment.  This action is permanent and requires 'Super Administrator' access.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/fhir-datastore/deleting-data.md#_snippet_2\n\nLANGUAGE: HTTP\nCODE:\n```\nPOST [base]/[resourceType]/[id]/$expunge?everything=true\n```\n\n----------------------------------------\n\nTITLE: Installing Web Dependencies\nDESCRIPTION: This shell command installs the necessary dependencies for React Native web support, including `react-native-web`, `react-dom`, and `@expo/webpack-config`.\nSOURCE: https://github.com/medplum/medplum/blob/main/examples/medplum-react-native-example/README.md#_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nnpx expo install react-native-web@~0.18.10 react-dom@18.2.0 @expo/webpack-config@^18.0.1\n```\n\n----------------------------------------\n\nTITLE: AccessPolicy for Patient Resource Type (JSON)\nDESCRIPTION: This AccessPolicy grants read/write access to only the 'Patient' resource type within a Medplum project. It defines the resource type to which the policy applies, effectively allowing users with this policy to create, read, update, and delete Patient resources.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/access/access-policies.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"resourceType\": \"AccessPolicy\",\n  \"name\": \"Patient Example\",\n  \"resource\": [\n    {\n      \"resourceType\": \"Patient\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Generate load with Artillery\nDESCRIPTION: Uses Artillery to generate load on the server's `/healthcheck` endpoint. This command sends 100 requests to the endpoint 20 times, simulating concurrent users.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/contributing/server-profiling.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nartillery quick --count 20 --num 100 http://localhost:8103/healthcheck\n```\n\n----------------------------------------\n\nTITLE: Medplum Chat Page\nDESCRIPTION: Shows an example of using the `ChatControl` component within a React application.  It passes a FHIR criteria string and arguments to the component.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/react/README.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nexport function ChatPage() {\n  return (\n    <Document>\n      <ChatControl criteria=\"Communication?encounter=123\" {...args} />\n    </Document>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Prepare Invite JSON Payload\nDESCRIPTION: Prepares a JSON payload for inviting a user to a project.  This JSON is sent to the `/invite` endpoint. No external dependencies are required. The expected output is a JSON string with the appropriate fields to invite a user.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/auth/user-management-guide/user-management-guide.md#_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\n{ExampleCode}\n```\n\n----------------------------------------\n\nTITLE: Rendering Search Parameters Table\nDESCRIPTION: This snippet renders a table displaying the search parameters for the CodeSystem resource.  It uses the SearchParamsTable component, which accepts a searchParams array as input. The array is extracted from the `definition` JSON object.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/api/fhir/resources/codesystem.mdx#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n<SearchParamsTable searchParams={definition.searchParameters} />\n```\n\n----------------------------------------\n\nTITLE: Nested Reverse Chained Search (Specimen from DiagnosticReport from Procedure) - CLI\nDESCRIPTION: This bash snippet demonstrates a nested reverse chained search to find Specimen resources referenced by a DiagnosticReport that originated from a Procedure on a specific date using the Medplum CLI.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/search/chained-search.md#_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nmedplum search Specimen --_has:DiagnosticReport:specimen:_has:Procedure:subject:date 2023-11-12\n```\n\n----------------------------------------\n\nTITLE: Execute Bot by Identifier (POST) - CLI\nDESCRIPTION: This snippet demonstrates how to execute a Medplum Bot by its Identifier using the Medplum CLI. The command uses `medplum post` with the Bot's identifier and the `$execute` operation.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/api/fhir/operations/bot-execute.mdx#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nmedplum login\nmedplum post 'Bot/[id]/$execute?identifier=https://example.com/bots|1234' '{ \"foo\": \"bar\" }'\n```\n\n----------------------------------------\n\nTITLE: DiagnosticReport with Observations cURL Request\nDESCRIPTION: This cURL command shows how to send a GraphQL query to retrieve a DiagnosticReport along with its associated Observation resources. It includes the necessary headers and payload to execute the nested query.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/graphql/basic-queries.mdx#_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\n{ExampleCode}\n```\n\n----------------------------------------\n\nTITLE: Destroy Infrastructure Terraform Bash\nDESCRIPTION: Destroys all resources created by the Terraform configuration in Google Cloud Platform. This command is used to tear down the infrastructure that was provisioned by Terraform.\nSOURCE: https://github.com/medplum/medplum/blob/main/terraform/gcp/README.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nterraform destroy\n```\n\n----------------------------------------\n\nTITLE: SQL Project Filter\nDESCRIPTION: This SQL snippet demonstrates how to restrict search results to a specific Project compartment.  It uses the `compartments` array column to filter results based on the Project ID.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/contributing/search-architecture.md#_snippet_9\n\nLANGUAGE: SQL\nCODE:\n```\n-- Restrict to the Project compartment by its ID\ncompartments && ARRAY['4410089e-6a88-4cc8-9cb6-3592ee18191c']\n```\n\n----------------------------------------\n\nTITLE: Create a User with SCIM (curl)\nDESCRIPTION: This command creates a new user in Medplum using the SCIM API. It sends a POST request to the `/scim/v2/Users` endpoint with the user data in JSON format. The `Authorization` header is required and should contain a valid access token. The `Content-Type` header must be set to `application/json`.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/api/scim/users.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncurl https://api.medplum.com/scim/v2/Users \\\n -H \"Authorization: Bearer MY_ACCESS_TOKEN\" \\\n -H \"Content-Type: application/json\" \\\n -d '{\n  \"schemas\": [\"urn:ietf:params:scim:schemas:core:2.0:User\"],\n  \"userType\": \"Practitioner\",\n  \"name\": {\n    \"givenName\": \"Alice\",\n    \"familyName\": \"Smith\"\n  },\n  \"userName\": \"alice@example.com\",\n  \"emails\": [\n    {\n      \"value\": \"alice@example.com\"\n    }\n  ]\n}'\n```\n\n----------------------------------------\n\nTITLE: Run Medplum Agent from Source (Bash)\nDESCRIPTION: This bash command runs the Medplum Agent directly from the source code using npm. It requires navigating to the `medplum/packages/agent` directory and providing the `base_url`, `client_id`, `client_secret`, and `agent_id` as arguments.  This is used for local testing and development. Requires Node.js, npm, and a Medplum development environment.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/agent/index.md#_snippet_9\n\nLANGUAGE: Bash\nCODE:\n```\nnpm run agent <base_url> <client_id> <client_secret> <agent_id>\n```\n\n----------------------------------------\n\nTITLE: DiagnosticReport with Observations Response\nDESCRIPTION: This TypeScript code defines the structure of the expected response when retrieving a DiagnosticReport with its associated Observation resources. It includes the structure for the DiagnosticReport and the nested Observation resources.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/graphql/basic-queries.mdx#_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\n{ExampleCode}\n```\n\n----------------------------------------\n\nTITLE: Install Medplum CLI Globally (npm)\nDESCRIPTION: Installs the Medplum CLI globally using npm, allowing it to be run from any directory.  Requires Node.js and npm to be installed.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/self-hosting/super-admin-cli.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --global @medplum/cli\n```\n\n----------------------------------------\n\nTITLE: MedicationKnowledge with Drug Characteristics\nDESCRIPTION: This code snippet exemplifies how to represent physical characteristics and packaging information for a medication using the 'MedicationKnowledge' resource. It includes details such as color, imprint code, amount, packaging type (e.g., bottle), dosage form (e.g., tablet), and intended route of administration (e.g., oral).\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/medications/formulary/index.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  resourceType: 'MedicationKnowledge',\n  code: {\n    text: 'acetaminophen 325 MG [Tylenol]',\n    coding: [\n      {\n        system: 'http://www.nlm.nih.gov/research/umls/rxnorm',\n        code: '569998',\n      },\n      {\n        system: 'http://hl7.org/fhir/sid/ndc',\n        code: '5058049501',\n      },\n    ],\n  },\n  drugCharacteristic: [\n    {\n      type: {\n        text: 'Color',\n        coding: [\n          {\n            system: 'http://terminology.hl7.org/CodeSystem/medicationknowledge-characteristic',\n            code: 'color',\n          },\n        ],\n      },\n      valueString: 'white',\n    },\n    {\n      type: {\n        text: 'Imprint Code',\n        coding: [\n          {\n            system: 'http://terminology.hl7.org/CodeSystem/medicationknowledge-characteristic',\n            code: 'imprintcd',\n          },\n        ],\n      },\n      valueString: 'Tylenol',\n    },\n  ],\n  amount: {\n    value: 100,\n    unit: 'tablets',\n    system: 'http://terminology.hl7.org/ValueSet/v3-UnitsOfMeasureCaseSensitive',\n    code: '{tbl}'\n  },\n  packaging: {\n    type: {\n      text: 'Bottle',\n      coding: [\n        {\n          system: 'http://terminology.hl7.org/CodeSystem/medicationknowledge-package-type',\n          code: 'bot',\n          display: 'Bottle',\n        },\n      ],\n    },\n    quantity: {\n      value: 100,\n      unit: 'tablets',\n      system: 'http://terminology.hl7.org/ValueSet/v3-UnitsOfMeasureCaseSensitive',\n      code: '{tbl}'\n    },\n  },\n  doseForm: {\n    coding: [\n      {\n        display: 'Tablet'\n        code: '385055001'\n        system: 'http://snomed.info/sct',\n      }\n    ]\n  },\n  intendedRoute: [\n    {\n      text: 'oral'\n      coding: [\n        {\n      \t\tdisplay: 'Oral use',\n      \t\tcode: '26643006',\n          system: 'http://snomed.info/sct'\n        }\n      ]\n    },\n  ],\n  //...\n}\n```\n\n----------------------------------------\n\nTITLE: Access Policy for Observation by Patient Compartment (JSON)\nDESCRIPTION: This AccessPolicy grants access to all 'Observation' resources that belong to a specific patient compartment ('Patient/xyz') using the '_compartment' search parameter.  This is useful for restricting access to resources related to a specific patient.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/access/access-policies.md#_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"resourceType\": \"AccessPolicy\",\n  \"name\": \"Write Constraints Access Policy\",\n  \"resource\": [\n    {\n      \"resourceType\": \"Observation\",\n      \"criteria\": \"Observation?_compartment=Patient/xyz\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: FHIR Procedure Definition JSON Structure\nDESCRIPTION: The `definition` variable represents the JSON structure defining the FHIR Procedure resource. It contains properties like `properties` (schema elements) and `searchParameters` which are used by the React components to display the resource information. This snippet exemplifies the expected structure of the JSON file.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/api/fhir/resources/procedure.mdx#_snippet_4\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"properties\": [\n    {\n      \"name\": \"id\",\n      \"type\": \"string\",\n      \"description\": \"Logical id of this artifact\"\n    },\n    {\n      \"name\": \"status\",\n      \"type\": \"code\",\n      \"description\": \"Status of the procedure\"\n    }\n  ],\n  \"searchParameters\": [\n    {\n      \"name\": \"_id\",\n      \"type\": \"token\",\n      \"description\": \"The ID of the resource\"\n    },\n    {\n      \"name\": \"code\",\n      \"type\": \"token\",\n      \"description\": \"Procedure code\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Token Exchange with PKCE - Request\nDESCRIPTION: Sample request for exchanging an authorization code grant with PKCE (Proof Key for Code Exchange) for tokens. The request includes `grant_type`, `client_id`, `code`, `code_verifier`, and `redirect_uri` parameters in the body. The `Authorization` header is also present.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/api/oauth/token.md#_snippet_5\n\nLANGUAGE: HTTP\nCODE:\n```\nPOST https://api.medplum.com/oauth2/token\n    Content-Type='application/x-www-form-urlencoded'&\n    Authorization=Basic aSdxd892iujendek328uedj\n\ngrant_type=authorization_code&\nclient_id=492e4ec3-fb66-4b45-b529-599c708ec530&&\ncode=AUTHORIZATION_CODE&\ncode_verifier=CODE_VERIFIER&\nredirect_uri=https://myclient/redirect\n```\n\n----------------------------------------\n\nTITLE: Run Medplum Stack with Docker Compose (Bash)\nDESCRIPTION: Downloads the Medplum Docker Compose file and starts the full Medplum stack using Docker Compose. The stack includes Redis, Postgres, Medplum server, and Medplum app. Requires Docker and Docker Compose to be installed. Access the Medplum application at http://localhost:3000 after the containers are running.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/self-hosting/running-full-medplum-stack-in-docker.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl https://raw.githubusercontent.com/medplum/medplum/refs/heads/main/docker-compose.full-stack.yml > docker-compose.yml\ndocker compose up -d\n```\n\n----------------------------------------\n\nTITLE: Importing Resource Definitions (Binary)\nDESCRIPTION: Imports the JSON definition for the Binary resource, which describes the data structure and search parameters associated with the resource. The imported definition will be used to populate tables showing the properties of the Binary resource.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/api/fhir/resources/binary.mdx#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport definition from '@site/static/data/resourceDefinitions/binary.json';\n```\n\n----------------------------------------\n\nTITLE: Build the project using npm\nDESCRIPTION: This command builds the project, typically compiling TypeScript code into JavaScript.\nSOURCE: https://github.com/medplum/medplum/blob/main/examples/medplum-demo-bots/src/deduplication/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Defining Binary Resource with Security Context in FHIR\nDESCRIPTION: This JSON snippet demonstrates how to define a FHIR Binary resource with a `securityContext` element that references a Patient resource. This ensures that access to the Binary resource is controlled by the access policies defined for the referenced Patient resource.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/access/binary-security-context.md#_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"resourceType\": \"Binary\",\n  \"securityContext\": { \"reference\": \"Patient/homer-simpson\" }\n}\n```\n\n----------------------------------------\n\nTITLE: Promote User to Admin\nDESCRIPTION: Updates a ProjectMembership resource to grant admin privileges to a user. This changes the 'admin' field to 'true' on the ProjectMembership. It requires the original ProjectMembership resource to be available. The output is the updated ProjectMembership resource.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/auth/user-management-guide/user-management-guide.md#_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\n{ExampleCode}\n```\n\n----------------------------------------\n\nTITLE: Execute Bot via cURL with HL7 file\nDESCRIPTION: This cURL command executes a Medplum Bot by sending an HL7 message from a file. It uses the --data-binary option to send the file content as the request body, ensuring the content type is set to x-application/hl7-v2+er7. An access token is required for authorization.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/bots/hl7-into-fhir.mdx#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncurl -x POST 'https://api.medplum.com/fhir/R4/Bot/<bot-id>/$execute' \\\n  --header 'Content-Type: x-application/hl7-v2+er7' \\\n  --header 'Authorization: Bearer <access_token>' \\\n  --data-binary \"@/path/to/filename\"\n```\n\n----------------------------------------\n\nTITLE: Medplum Bots Config JSON\nDESCRIPTION: Defines the structure of the `medplum.config.json` file used to configure Medplum bots.  Specifies bot name, ID, source file, and distribution file.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/cli/index.md#_snippet_27\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"bots\": [\n    {\n      \"name\": \"hello-world\",\n      \"id\": \"f0465c2e-11d4-4c36-b834-8e86f7472b4b\",\n      \"source\": \"src/index.ts\",\n      \"dist\": \"dist/index.js\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Update S3 Bucket Policies\nDESCRIPTION: This command uses the Medplum CLI to update S3 bucket policies to allow AWS CloudFront access, which is necessary when deploying to regions other than `us-east-1`. The `[env name]` parameter specifies the environment name. Use the `--dryrun` option to preview the changes.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/self-hosting/install-on-aws.md#_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nnpx medplum aws update-bucket-policies [env name]\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpx medplum aws update-bucket-policies demo\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpx medplum aws update-bucket-policies [env name] --dryrun\n```\n\n----------------------------------------\n\nTITLE: FHIR Patient Resource for John Doe in TypeScript\nDESCRIPTION: This is an example of a FHIR Patient resource for John Doe with the patient_id 'P001'. It includes the identifier from the source system, name, gender, and birth date.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/migration/convert-to-fhir.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Patient } from '@medplum/fhirtypes';\n\nexport const johnDoePatient: Patient = {\n  resourceType: 'Patient',\n  id: 'john-doe',\n  identifier: [\n    {\n      system: 'http://your-source-system.com/patients',\n      value: 'P001'\n    }\n  ],\n  name: [\n    {\n      family: 'Doe',\n      given: ['John']\n    }\n  ],\n  gender: 'male',\n  birthDate: '1980-07-15'\n};\n\n```\n\n----------------------------------------\n\nTITLE: Preferred Installation Method using npm ci (Bash)\nDESCRIPTION: The `npm ci` command is the preferred way to install dependencies. It utilizes the exact versions specified in `package-lock.json`, ensuring consistency with dependencies that have been tested in CI/CD. Additionally, it deletes the existing `node_modules` folder for a clean installation and is generally faster for fresh installs.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/contributing/package-json.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# ✅ Preferred installation method\nnpm ci\n```\n\n----------------------------------------\n\nTITLE: Searching by Profile using _profile - cURL\nDESCRIPTION: Demonstrates how to search for Observation resources that conform to the pediatric growth charts profile using the `_profile` parameter using a cURL command. Requires cURL to be installed and configured.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/search/advanced-search-parameters.mdx#_snippet_23\n\nLANGUAGE: bash\nCODE:\n```\n{ExampleCode}\n```\n\n----------------------------------------\n\nTITLE: Search Human Project Members\nDESCRIPTION: Searches for ProjectMembership resources excluding client bot members. This allows you to retrieve a list of all human members associated with a project. No dependencies are required. The output is a list of ProjectMembership resources in FHIR format, excluding client bots.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/auth/user-management-guide/user-management-guide.md#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n{ExampleCode}\n```\n\n----------------------------------------\n\nTITLE: Successful Project Initialization Response\nDESCRIPTION: Example of a successful response after creating a new project.  The response is a FHIR Project resource containing the project ID, name, strict mode setting, and owner information.  The owner is a reference to a User resource.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/api/fhir/operations/project-init.md#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"resourceType\": \"Project\",\n  \"id\": \"59aa86af-9673-4862-a441-5200e6163bfb\",\n  \"name\": \"Test Project\",\n  \"strictMode\": true,\n  \"owner\": {\n    \"reference\": \"User/eb0f26b9-1e42-4886-85fc-31919aeebc55\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Medplum CLI Get with Transaction Conversion\nDESCRIPTION: This command retrieves a patient named 'Alex' and all encounters that reference them, converting the results into a transaction Bundle. The `--as-transaction` flag converts the default searchset Bundle into a transaction Bundle, allowing its direct use in batch requests and MockClient execution. The `_revinclude` parameter is used to include Encounter resources that reference the Patient.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/bots/unit-testing-bots.mdx#_snippet_9\n\nLANGUAGE: CLI\nCODE:\n```\n// medplum get --as-transaction 'Patient?name=Alex&_revinclude=Encounter:patient'\n```\n\n----------------------------------------\n\nTITLE: Searching for Missing Values FHIR\nDESCRIPTION: This snippet demonstrates how to search for FHIR resources (e.g., Patients) where a specific parameter (e.g., birthDate) is missing. It uses the `:missing` search parameter to achieve this.  The code shows the TypeScript implementation using the Medplum client.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/search/basic-search.mdx#_snippet_11\n\nLANGUAGE: ts\nCODE:\n```\n{ExampleCode}\n```\n\n----------------------------------------\n\nTITLE: Invite User - CLI\nDESCRIPTION: Invites a user to a project via the `/invite` endpoint using the Medplum CLI. This endpoint creates a user, profile resource, and ProjectMembership. The Medplum CLI must be installed and configured. The output is the created ProjectMembership resource.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/auth/user-management-guide/user-management-guide.md#_snippet_23\n\nLANGUAGE: bash\nCODE:\n```\n{ExampleCode}\n```\n\n----------------------------------------\n\nTITLE: Setting Sender Email in Medplum Config - JSON\nDESCRIPTION: This snippet shows how to set the sender email address in the Medplum server configuration file (`medplum.config.json`). This email address will be used as the 'From' address for outbound emails.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/self-hosting/mailtrapio.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"supportEmail\": \"support@example.com\"\n}\n```\n\n----------------------------------------\n\nTITLE: Patient Profile Photo with Binary Reference\nDESCRIPTION: This TypeScript code snippet illustrates how to reference a FHIR Binary resource as a patient's profile photo within a FHIR Patient resource. It demonstrates the structure of the `Patient.photo` array, which includes the `contentType` and the `url` referencing the `Binary` resource.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/fhir-datastore/binary-data.mdx#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Patient } from '@medplum/fhirtypes';\n\nconst patient: Patient = {\n  resourceType: 'Patient',\n  photo: [\n    {\n      contentType: 'image/jpeg',\n      url: 'Binary/123'\n    }\n  ]\n};\n\n```\n\n----------------------------------------\n\nTITLE: Defining a CodeSystem in FHIR\nDESCRIPTION: This code snippet shows an example of a FHIR `CodeSystem` resource. It defines a code system with a URL, name, title, status, content, and a list of concepts. The `CodeSystem` resource is the authoritative source of information about how the codes from the system are defined.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/terminology/index.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"resourceType\": \"CodeSystem\",\n  \"url\": \"http://snomed.info/sct\",\n  \"name\": \"SNOMEDCT_US\",\n  \"title\": \"SNOMED CT, US Edition\",\n  \"status\": \"active\",\n  \"content\": \"example\",\n  \"concept\": [\n    {\n      \"code\": \"364075005\",\n      \"display\": \"Heart rate (observable entity)\"\n    }\n    // ...\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Finding Observation Interval in TypeScript\nDESCRIPTION: This code uses helper functions `findObservationInterval`, `findObservationReferenceRange`, and `matchesRange` from the Medplum SDK to find reference ranges that match a particular patient. The SDK provides helper functions to find reference ranges that match a particular patient.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/careplans/reference-ranges.mdx#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  // Function calls here\n}\n```\n\n----------------------------------------\n\nTITLE: Validating FHIR Resource with cURL (Bash)\nDESCRIPTION: This snippet demonstrates how to validate a FHIR Patient resource using the `$validate` operation via a `curl` command.  It sends a POST request with a JSON payload to the Medplum FHIR server, including the content type and authorization header. The expected response is an OperationOutcome resource indicating whether the resource is valid or not.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/api/fhir/operations/validate-a-resource.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl 'https://api.medplum.com/fhir/R4/Patient/$validate' \\\n  -X POST \\\n  -H \"Content-Type: application/fhir+json\" \\\n  -H \"Authorization: Bearer MY_ACCESS_TOKEN\" \\\n  -d '{\"resourceType\":\"Patient\"}'\n```\n\n----------------------------------------\n\nTITLE: Using X-Medplum-On-Behalf-Of Header with curl\nDESCRIPTION: This curl command demonstrates how to use the `X-Medplum-On-Behalf-Of` header to act on behalf of a specific `ProjectMembership`.  It includes authentication using `$MY_CLIENT_ID` and `$MY_CLIENT_SECRET`, sets the content type to `application/fhir+json`, enables extended features using `X-Medplum: extended`, and sends a Patient resource.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/auth/methods/on-behalf-of.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl 'https://api.medplum.com/fhir/R4/Patient' \\\n  --user $MY_CLIENT_ID:$MY_CLIENT_SECRET \\\n  -H 'content-type: application/fhir+json' \\\n  -H 'x-medplum: extended' \\\n  -H 'x-medplum-on-behalf-of: ProjectMembership/00000000-001a-4722-afa1-0581d2c52a87' \\\n  --data-raw '{\"resourceType\":\"Patient\",\"name\":[{\"given\":[\"Homer\"],\"family\":\"Simpson\"}]}'\n```\n\n----------------------------------------\n\nTITLE: Search Human Project Members - CLI\nDESCRIPTION: Searches for ProjectMembership resources excluding client bot members using the Medplum CLI. This allows you to retrieve a list of all human members associated with a project. The Medplum CLI must be installed and configured. The output is a list of ProjectMembership resources in FHIR format, excluding client bots.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/auth/user-management-guide/user-management-guide.md#_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\n{ExampleCode}\n```\n\n----------------------------------------\n\nTITLE: Defining Task.performerType CodeableConcept in FHIR (Typescript)\nDESCRIPTION: This code snippet demonstrates how to define the `Task.performerType` CodeableConcept using SNOMED and SOC codes in FHIR. It includes the resource type, text description, coding system, code, and display values.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/careplans/tasks/tasks.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  resourceType: 'Task',\n  // ...\n  performerType: [\n    {\n      text:'Medical Billing Specialist',\n      coding:[\n        // Snomed\n        {\n          code:'1251542004',\n          system: 'http://snomed.info/sct',\n          display: 'Medical Coder'\n        },\n        // US SOC\n        {\n          code:\"29-2072\"\n          system: \"https://www.bls.gov/soc\"\n        }\n      ],\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: UserSecurityRequest JSON Definition\nDESCRIPTION: This JSON definition describes the structure and properties of the UserSecurityRequest resource within the Medplum platform. It is used to dynamically generate documentation using custom React components.  It leverages a JSON file imported as `definition` which is then used by the `ResourcePropertiesTable` and `SearchParamsTable` components.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/api/fhir/medplum/usersecurityrequest.mdx#_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\nThis is a placeholder for the actual JSON content of the usersecurityrequest.json file.  Since the content of the file was not provided, the JSON output will be an empty object.\n{}\n```\n\n----------------------------------------\n\nTITLE: Nested Reverse Chained Search (Specimen from DiagnosticReport from Procedure) - Typescript\nDESCRIPTION: This Typescript snippet demonstrates a nested reverse chained search to find Specimen resources referenced by a DiagnosticReport that originated from a Procedure on a specific date. It uses nested `_has` parameters.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/search/chained-search.md#_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nimport { MedplumClient } from '@medplum/core';\n\nasync function nestedReverseChainTs(medplum: MedplumClient) {\n  const bundle = await medplum.search('Specimen', {\n    '_has:DiagnosticReport:specimen:_has:Procedure:subject:date': '2023-11-12',\n  });\n  console.log(bundle);\n}\n```\n\n----------------------------------------\n\nTITLE: Medplum Server Default Database Configuration (JS)\nDESCRIPTION: This code shows the default database configuration parameters used by the Medplum server. It includes `statement_timeout` to cancel long-running database statements and `default_transaction_isolation` to prevent concurrent modifications during transactions.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/self-hosting/rds-parameters.md#_snippet_1\n\nLANGUAGE: js\nCODE:\n```\n{\n  // Cancel DB statements that run longer than a minute\n  \"statement_timeout\": \"60000\",\n  // Protect against concurrent modifications in transactions\n  \"default_transaction_isolation\": \"REPEATABLE READ\"\n}\n```\n\n----------------------------------------\n\nTITLE: CodeSystem Import SQL\nDESCRIPTION: Loads codes into the database for large code systems. This involves bulk inserts for codes and their properties. It first retrieves the CodeSystem by its URL.  Then, it inserts new codes and updates existing ones. Finally, it inserts new properties for the codes.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/contributing/terminology-architecture.md#_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\n-- Get CodeSystem by URL\nSELECT id, content FROM \"CodeSystem\" WHERE url = ?;\n\n-- Import codes\nINSERT INTO \"Coding\" (system, code, display) VALUES\n  (?, '8867-4', 'Heart rate'),\n  (?, '8302-2', 'Body height')\n  ON CONFLICT (system, code) DO UPDATE\n  SET display = EXCLUDED.display;\n\n-- Get property by system and code\nSELECT id FROM \"CodeSystem_Property\" WHERE system = ? AND code = ?;\n\n-- Import properties\nINSERT INTO \"Coding_Property\" (coding, property, value, target) VALUES\n  (1, 12, 'LP415671-9', 2),\n  (1, 21, 'Qn', null)\n  ON CONFLICT DO NOTHING;\n```\n\n----------------------------------------\n\nTITLE: Defining a High-Range Observation Reference in TypeScript\nDESCRIPTION: This example shows how to define a reference range where values are considered high if they are greater than or equal to 20 mg/dL. It defines the lower bound of the range and assumes there is no upper bound. The code is in TypeScript, intended for an `ObservationDefinition` resource.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/careplans/reference-ranges.mdx#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  \"qualifiedInterval\": [\n    {\n      \"range\": {\n        \"low\": {\n          \"value\": 20,\n          \"unit\": \"mg/dL\"\n        }\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: GraphQL Query Depth Example\nDESCRIPTION: This GraphQL query demonstrates how Medplum calculates the depth of nested fields. The depth is determined by the deepest nested field, excluding fragment expansions. This example shows how the depth is calculated for various fields within a PatientList query, including nested resource links.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/graphql/query-limits.md#_snippet_0\n\nLANGUAGE: gql\nCODE:\n```\n{\n  # Top level is depth 0\n  PatientList(name: \"Alice\") {\n    # Fields like `name` and `link` have depth 1\n    name {\n      # `given` and `family` have depth 2\n      given\n      family\n    }\n    link {\n      other {\n        # `resource` has depth 3, but the inline fragment on Patient is not counted\n        resource {\n          ... on Patient {\n            # Finally, `active` has depth 4\n            active\n          }\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Invite a New User as Admin (CLI)\nDESCRIPTION: This code snippet demonstrates how to invite a new user as an admin to a project using the Medplum CLI. You must have the Medplum CLI installed and configured. The `inviteNewAdminCli` block from the ExampleCode file is used.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/auth/user-management-guide/user-management-guide.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nmedplum create ProjectMembership --project YOUR_PROJECT_ID --user email:user@example.com --admin true\n```\n\n----------------------------------------\n\nTITLE: Run Medplum Agent on Linux (Bash)\nDESCRIPTION: This bash command executes the Medplum Agent on Linux with the necessary configuration parameters: `base_url`, `client_id`, `client_secret`, and `agent_id`. These parameters are required for the agent to connect to the Medplum server and authenticate using device authentication. Replace placeholders with actual values.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/agent/index.md#_snippet_4\n\nLANGUAGE: Bash\nCODE:\n```\n./medplum-agent-linux <base_url> <client_id> <client_secret> <agent_id>\n```\n\n----------------------------------------\n\nTITLE: Download Certificate from KeyVault using Azure CLI\nDESCRIPTION: Downloads a certificate from Azure Key Vault using the Azure CLI, decodes it from base64, and saves it as a PFX file. This PFX file is then used to export the public certificate (CRT) and private key for use in creating a Kubernetes secret.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/self-hosting/install-on-azure.md#_snippet_13\n\nLANGUAGE: Azure CLI\nCODE:\n```\n# download cert\naz keyvault secret show \\\n    --vault-name $KEYVAULT_NAME \\\n    --name $CERT_SECRET_NAME \\\n    --query value -o tsv \\\n   | base64 -d > mycert.pfx\n```\n\n----------------------------------------\n\nTITLE: Valid FHIR Resource Response (JSON)\nDESCRIPTION: This JSON snippet is an example of a successful OperationOutcome returned by the `$validate` operation when a FHIR resource is valid. It indicates a severity of \"information\" and a code of \"informational\", with a message stating \"All OK\".\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/api/fhir/operations/validate-a-resource.mdx#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"resourceType\": \"OperationOutcome\",\n  \"id\": \"ok\",\n  \"issue\": [\n    {\n      \"severity\": \"information\",\n      \"code\": \"informational\",\n      \"details\": {\n        \"text\": \"All OK\"\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Health Gorilla Error Response\nDESCRIPTION: This JSON snippet shows the structure of an OperationOutcome resource returned by Health Gorilla when an order needs to be split. The `valueString` in the extension contains the order splitting information. The bot expects an OperationOutcome resource with specific extensions indicating order splitting is required.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/integration/health-gorilla/sending-orders.md#_snippet_12\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"resourceType\": \"OperationOutcome\",\n  \"extension\": [\n    {\n      \"url\": \"https://api.healthgorilla.com/fhir/R4/fhir/StructureDefinition/operationoutcome-order-splitting\",\n      \"valueString\": \"436|1877;9230;900323\"\n    }\n  ],\n  \"issue\": [\n    {\n      \"severity\": \"fatal\",\n      \"code\": \"processing\",\n      \"details\": {\n        \"coding\": [\n          {\n            \"code\": \"order-splitting-required\"\n          }\n        ],\n        \"text\": \"Splitting required\"\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Create Conditions using Batch Request (TypeScript)\nDESCRIPTION: This snippet demonstrates creating Conditions using a batch request, linking them to existing Patients using conditional references. This approach maintains relationships between resources across different requests, ensuring data integrity during migration.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/migration/migration-pipelines.md#_snippet_5\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport ExampleCode from '!!raw-loader!@site/../examples/src/migration/migration-pipelines.ts';\n<MedplumCodeBlock language=\"ts\" selectBlocks=\"create-conditions-batch\">\n    {ExampleCode}\n</MedplumCodeBlock>\n```\n\n----------------------------------------\n\nTITLE: Medplum Config JSON for Bot Deployment JSON\nDESCRIPTION: This JSON snippet shows the structure of the `medplum.config.json` file used for deploying a Medplum Bot from the command line. It includes the `name`, `id` (the Bot's ID on Medplum), `source` (the path to the TypeScript file), and `dist` (the output JavaScript file path) properties.  The `id` property is crucial for associating the local code with the Bot resource on the Medplum server.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/bots/bot-basics.md#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"sample-account-setup\",\n  \"id\": \"<BOT_ID>\",\n  \"source\": \"src/examples/sample-account-setup.ts\",\n  \"dist\": \"dist/sample-account-setup.js\"\n}\n```\n\n----------------------------------------\n\nTITLE: Patient Resource with Account Tag in FHIR JSON\nDESCRIPTION: This Patient resource demonstrates the `meta.account` property, which is an extra Reference property in the Meta section. It is used for account-tagging resources within a compartment.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/access/access-policies.md#_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"resourceType\": \"Patient\",\n  \"id\": \"54aa8595-e3a7-48ae-af91-9c7cb940149b\",\n  \"meta\": {\n    \"versionId\": \"02900c57-4da8-498f-85d5-5077077e3e2c\",\n    \"lastUpdated\": \"2022-01-13T16:21:11.870Z\",\n    \"account\": {\n      \"reference\": \"Organization/abc-123\",\n      \"display\": \"Example Customer Organization\"\n    }\n  },\n  \"name\": [\n    {\n      \"given\": [\"Homer\"],\n      \"family\": \"Simpson\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: CDK Deploy Command\nDESCRIPTION: This command executes the AWS CDK deployment, applying the changes defined in your CDK code to your AWS resources. The `--all` flag deploys all stacks defined in your CDK app. The `-c config` parameter specifies the configuration file to use. You may receive warnings related to security changes which is normal and expected.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/self-hosting/install-on-aws.md#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nnpx cdk deploy --all -c config=medplum.demo.config.json\n```\n\n----------------------------------------\n\nTITLE: Condition: Sample Condition Resource in FHIR\nDESCRIPTION: This code snippet demonstrates how to create a Condition resource in FHIR to represent a patient's medical condition. It includes fields such as category, clinicalStatus, code, subject, and onsetDateTime, providing a comprehensive record of the condition's details.  Dependencies: FHIR.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/charting/representing-diagnoses.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  \"resourceType\": \"Condition\",\n  \"category\": [\n    {\n      \"coding\": [\n        {\n          \"code\": \"problem-list-item\",\n          \"system\": \"http://terminology.hl7.org/CodeSystem/condition-category\"\n        }\n      ]\n    }\n  ],\n  \"clinicalStatus\": {\n    \"coding\": [\n      {\n        \"code\": \"active\",\n        \"system\": \"http://terminology.hl7.org/CodeSystem/condition-clinical\"\n      }\n    ]\n  },\n  \"code\": {\n    \"coding\": [\n      {\n        \"code\": \"64572001\",\n        \"display\": \"Disease\",\n        \"system\": \"http://snomed.info/sct\"\n      }\n    ],\n    \"text\": \"Disease\"\n  },\n  \"subject\": {\n    \"reference\": \"Patient/example\"\n  },\n  \"onsetDateTime\": \"2023-04-03T16:04:00-05:00\"\n}\n```\n\n----------------------------------------\n\nTITLE: cURL Connection API Request\nDESCRIPTION: Shows a cURL command to execute a GraphQL query against the Connection API. This example demonstrates how to send the GraphQL query to the server to retrieve patient data and total counts.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/graphql/connections.mdx#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n{ExampleCode}\n```\n\n----------------------------------------\n\nTITLE: Creating Bot with Medplum CLI\nDESCRIPTION: This bash script demonstrates how to create a new Medplum Bot using the Medplum CLI. It uses the `medplum post` command with the required endpoint and a JSON payload containing the bot's name, description, and access policy reference.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/api/project-admin/bot.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nmedplum post admin/projects/:projectId/bot \\\n'{\n  \"name\": \"Hello World Bot\",\n  \"description\": \"Hello world\",\n  \"accessPolicy\": {\n    \"reference\": \"AccessPolicy/access-policy-id\"\n  }\n}'\n```\n\n----------------------------------------\n\nTITLE: Looking Up CodeSystem Code SQL\nDESCRIPTION: Looks up a given code in a CodeSystem. Retrieves the CodeSystem ID by its URL. Then, looks up the code and its associated properties by joining the Coding, Coding_Property, and CodeSystem_Property tables.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/contributing/terminology-architecture.md#_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\n-- Get CodeSystem by URL\nSELECT id, content FROM \"CodeSystem\" WHERE url = ?;\n\n-- Look up code and attached properties\nSELECT\n  \"Coding\".display,\n  property.code,\n  property.type,\n  property.description,\n  property.value\nFROM \"Coding\"\n  LEFT JOIN \"Coding_Property\" AS cp ON \"Coding\".id = cp.coding\n  LEFT JOIN \"CodeSystem_Property\" AS property ON cp.property = property.id\nWHERE \"Coding\".code = ? AND \"Coding\".system = ?;\n```\n\n----------------------------------------\n\nTITLE: ObservationDefinition for Sodium (TS)\nDESCRIPTION: Defines an ObservationDefinition resource for Sodium. This resource specifies how Sodium levels are represented and interpreted.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/careplans/diagnostic-catalog/diagnostic-catalog.mdx#_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\n{ExampleCode}\n```\n\n----------------------------------------\n\nTITLE: Defining a Low-Range Observation Reference in TypeScript\nDESCRIPTION: This snippet demonstrates defining a reference range where values are considered low if they are less than or equal to 5 mg/dL. It focuses on defining the upper bound of the range and assumes there is no lower bound. The code is written in TypeScript within the context of an `ObservationDefinition` resource.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/careplans/reference-ranges.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  \"qualifiedInterval\": [\n    {\n      \"range\": {\n        \"high\": {\n          \"value\": 5,\n          \"unit\": \"mg/dL\"\n        }\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Logical OR Filtering Example in Medplum (CLI)\nDESCRIPTION: Illustrates using the logical 'or' operator to combine filters in Medplum (CLI).\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/search/filter-search-parameter.mdx#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n{ExampleCode}\n```\n\n----------------------------------------\n\nTITLE: Filtering FHIR Fields with GraphQL\nDESCRIPTION: This GraphQL query retrieves a Patient resource by ID, including their name and address. It also filters the `telecom` field to only include phone numbers, demonstrating fine-grained control over the returned data. This can be useful to minimize network traffic when bandwidth is limited.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/blog/2023-09-06-graphql-vs-rest.md#_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\n{\n  Patient(id: \"patient-id\") {\n    name {\n      given\n      family\n    }\n    address {\n      line\n      city\n      state\n      postalCode\n    }\n    # highlight-start\n    # Filter the `telecom` field to only contain phone numbers\n    telecom(system: \"phone\") {\n      value\n    }\n    # highlight-end\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: FHIR Patient Resource with Identifier in TypeScript\nDESCRIPTION: This code snippet demonstrates how to add source system identifiers to a FHIR Patient resource. This is crucial for maintaining traceability and linking back to the original source system. It helps in tracking the origin of each resource, facilitating data reconciliation, and allowing for idempotent updates within Medplum.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/migration/convert-to-fhir.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Patient } from '@medplum/fhirtypes';\n\nexport const patientWithIdentifier: Patient = {\n  resourceType: 'Patient',\n  id: 'example',\n  identifier: [\n    {\n      system: 'http://your-source-system.com/patients',\n      value: 'P001'\n    }\n  ],\n  name: [\n    {\n      family: 'Doe',\n      given: ['John']\n    }\n  ],\n  gender: 'male',\n  birthDate: '1980-05-15'\n};\n\n```\n\n----------------------------------------\n\nTITLE: Search for Parent Communication Threads (CLI)\nDESCRIPTION: This CLI command searches for `Communication` resources that do not have a `partOf` reference, identifying the root or parent threads. The command utilizes the `:missing` modifier to find all `Communication` resources that don't reference another resource in their `partOf` field. The command returns a list of top-level communication thread headers.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/communications/organizing-communications.mdx#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n{ExampleCode}\n```\n\n----------------------------------------\n\nTITLE: Creating DocumentReference with Binary Reference - cURL\nDESCRIPTION: This code snippet demonstrates how to create a DocumentReference resource using cURL. It provides the HTTP request details including the headers and request body to interact with the Medplum API to create a DocumentReference linked to a Binary resource. This utilizes the bash shell.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/charting/external-documents.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n{ExampleCode}\n```\n\n----------------------------------------\n\nTITLE: FHIR CodeSystem Lookup Error Request\nDESCRIPTION: This snippet shows an example of a failed request to the CodeSystem $lookup operation. The request attempts to find a code labeled 'invalid' within the LOINC code system, which is presumed to be non-existent.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/api/fhir/operations/codesystem-lookup.md#_snippet_2\n\nLANGUAGE: http\nCODE:\n```\nGET /CodeSystem/$lookup?system=http://loinc.org&code=invalid\n```\n\n----------------------------------------\n\nTITLE: Medplum Bots Config Example\nDESCRIPTION: Example `medplum.config.json` file with bot configuration. Specifies the bot's name, ID, source file (TypeScript), and distribution file (JavaScript).\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/cli/index.md#_snippet_31\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"bots\": [\n    {\n      \"name\": \"hello-world\",\n      \"id\": \"f0465c2e-11d4-4c36-b834-8e86f7472b4b\",\n      \"source\": \"src/hello-world.ts\",\n      \"dist\": \"dist/hello-world.js\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Post Form Data TypeScript\nDESCRIPTION: This snippet demonstrates how to send an HTTP request with the `multipart/form-data` content type to upload a file to a remote server. It uses the `node-fetch` library to send a POST request with the `FormData` object created in the previous step. It requires a `FormData` object as input, and it returns the response from the server.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/bots/file-uploads.mdx#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nasync function postForm(form: FormData): Promise<any> {\n  const response = await fetch('https://httpbin.org/post', {\n    method: 'POST',\n    body: form as any,\n    headers: form.getHeaders(),\n  });\n  return response.json();\n}\n```\n\n----------------------------------------\n\nTITLE: DiagnosticReport with Observations GraphQL Query\nDESCRIPTION: This GraphQL query retrieves a DiagnosticReport and its associated Observation resources. It uses inline fragments to resolve references and retrieve the nested resources using the `resource` element.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/graphql/basic-queries.mdx#_snippet_8\n\nLANGUAGE: graphql\nCODE:\n```\n{ExampleCode}\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies (NPM)\nDESCRIPTION: This command installs all the necessary dependencies for the Medplum Chat Demo application, as specified in the `package.json` file. It ensures that all required libraries and modules are available for the project to run correctly.\nSOURCE: https://github.com/medplum/medplum/blob/main/examples/medplum-chat-demo/README.md#_snippet_2\n\nLANGUAGE: npm\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Export Private Key using OpenSSL\nDESCRIPTION: Exports the private key from the downloaded PFX file using OpenSSL. This command extracts the private key in a non-encrypted format (nodes) and saves it to a .key file.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/self-hosting/install-on-azure.md#_snippet_15\n\nLANGUAGE: Shell\nCODE:\n```\n# export private key\nopenssl pkcs12 -in mycert.pfx -nocerts -nodes -out mycert.key -passin pass:\n```\n\n----------------------------------------\n\nTITLE: PlanDefinition for Men's Health Service (TS)\nDESCRIPTION: Defines a PlanDefinition resource for a Men's Health service, likely including references to ActivityDefinitions for specific laboratory procedures. The code uses TypeScript and is intended to represent a patient-facing service.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/careplans/diagnostic-catalog/diagnostic-catalog.mdx#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n{ExampleCode}\n```\n\n----------------------------------------\n\nTITLE: Invite Practitioner via Medplum API - CLI\nDESCRIPTION: This CLI code snippet demonstrates how to invite a Practitioner to a Medplum project using the `medplum post` command. It sets the resource type, first name, last name, email, and sets the user as an admin.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/api/project-admin/invite.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmedplum post admin/projects/:projectId/invite \\\n'{\n  \"resourceType\": \"Practitioner\",\n  \"firstName\": \"George\",\n  \"lastName\": \"Washington\",\n  \"email\": \"dr.gw@example.gov\",\n  \"membership\": {\n    \"admin\": true\n  }\n}'\n```\n\n----------------------------------------\n\nTITLE: Medplum Bot Save Command Example\nDESCRIPTION: Example command to save a Medplum bot to your Medplum project. This reads the `source` file specified in `medplum.config.json` and updates the bot resource.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/cli/index.md#_snippet_33\n\nLANGUAGE: bash\nCODE:\n```\nnpx medplum bot save hello-world\n```\n\n----------------------------------------\n\nTITLE: Add Node.js Repository\nDESCRIPTION: Adds the Node.js v22.x Ubuntu repository to the system's package sources. This allows the system to install the specified version of Node.js.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/self-hosting/install-on-ubuntu.md#_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\ncurl -fsSL https://deb.nodesource.com/setup_22.x | sudo bash -\n```\n\n----------------------------------------\n\nTITLE: Parsing Subscription Bundle (JS)\nDESCRIPTION: This example shows how to parse the `Bundle` received by the subscription callback to extract the `SubscriptionStatus` and the associated resource.  The `SubscriptionStatus` contains a reference to the subscription that triggered the event, and the resource contains the actual data that caused the subscription to fire.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/react/use-subscription.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nfunction handleNotificationBundle(bundle: Bundle): void {\n  // The first entry is the status, which contains a reference to the `Subscription` this notification is for\n  const status = bundle.entry?.[0]?.resource as SubscriptionStatus;\n  console.log('Received subscription status: ', status);\n\n  // The second entry is the actual resource\n  const communication = bundle.entry?.[1]?.resource as Communication;\n  console.log('Received communication: ', communication);\n}\n```\n\n----------------------------------------\n\nTITLE: ValueSet with Filters in FHIR (JavaScript)\nDESCRIPTION: This snippet illustrates how to define a ValueSet with filters to include only specific codes from a CodeSystem based on a hierarchy or other properties. The `filter` element uses the `concept` property to specify an `is-a` relationship, including all codes that are descendants of the specified code in the hierarchy.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/terminology/local-codes.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"resourceType\": \"ValueSet\",\n  \"url\": \"http://example.com/ValueSet/painkillers\",\n  \"status\": \"active\",\n  \"compose\": {\n    \"include\": [\n      {\n        \"system\": \"http://example.com/CodeSystem/local-medications\",\n        \"filter\": [\n          // is-a hierarchy uses the special property \"concept\"\n          {\n            \"property\": \"concept\",\n            \"op\": \"is-a\",\n            \"value\": \"AN\"\n          }\n        ]\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring auto_explain in Postgres Parameter Group (JS)\nDESCRIPTION: This code snippet demonstrates how to configure the `auto_explain` module in a Postgres Parameter Group. The module is added to the shared preload libraries, and configuration parameters are set to control its behavior, such as logging slow queries and their execution plans.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/self-hosting/rds-parameters.md#_snippet_0\n\nLANGUAGE: js\nCODE:\n```\n{\n  \"statement_timeout\": \"60000\",\n  \"default_transaction_isolation\": \"REPEATABLE READ\",\n  // Add auto_explain to any other preloaded libraries in the default config\n  \"shared_preload_libraries\": \"pg_stat_statements,auto_explain\",\n  // Log details in the query plan\n  \"auto_explain.log_analyze\": \"true\",\n  \"auto_explain.log_buffers\": \"true\",\n  // Log 10% of queries that take longer than 250 ms\n  \"auto_explain.log_min_duration\": \"250\",\n  \"auto_explain.sample_rate\": \"0.1\"\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Search Count in Medplum (cURL)\nDESCRIPTION: This cURL command demonstrates how to set the number of items returned per page using the `_count` query parameter in a Medplum search.  It includes the Authorization header and sets the page size to 50.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/search/paginated-search.mdx#_snippet_1\n\nLANGUAGE: cURL\nCODE:\n```\ncurl --request GET \\\n  --url 'https://api.medplum.com/fhir/R4/Patient?_count=50' \\\n  --header 'Authorization: Bearer YOUR_ACCESS_TOKEN'\n```\n\n----------------------------------------\n\nTITLE: Set MEDPLUM_BASE_URL\nDESCRIPTION: Sets the `MEDPLUM_BASE_URL` environment variable to a custom Medplum API endpoint.  Allows the CLI to connect to a self-hosted Medplum instance. The new value will be used for subsequent CLI commands within the same shell session.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/self-hosting/super-admin-cli.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nexport MEDPLUM_BASE_URL=https://api.medplum.example.com\n```\n\n----------------------------------------\n\nTITLE: Add PostgreSQL Apt Repository\nDESCRIPTION: Configures the Apt repository and installs PostgreSQL 16 along with its client. This sets up the necessary software for managing the Medplum database on Ubuntu.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/self-hosting/install-from-scratch.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Configure the Apt repository\nsudo apt install -y postgresql-common\nsudo /usr/share/postgresql-common/pgdg/apt.postgresql.org.sh\n\n# Install Postgres 16\nsudo apt install postgresql-16 postgresql-client-16\n```\n\n----------------------------------------\n\nTITLE: FHIR Condition Resource for John Doe's Diabetes in TypeScript\nDESCRIPTION: This is an example of a FHIR Condition resource for John Doe's Diabetes (PC002). It links to the patient via conditional reference and includes both local and standard ICD-10 codes, along with a human-readable text description.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/migration/convert-to-fhir.md#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Condition } from '@medplum/fhirtypes';\n\nexport const johnDoeDiabetes: Condition = {\n  resourceType: 'Condition',\n  id: 'john-doe-diabetes',\n  code: {\n    coding: [\n      {\n        system: 'http://your-source-system.com/conditions',\n        code: 'DM002',\n        display: 'Diabetes'\n      },\n      {\n        system: 'http://hl7.org/fhir/sid/icd-10',\n        code: 'E11',\n        display: 'Type 2 diabetes mellitus'\n      }\n    ],\n    text: 'Diabetes'\n  },\n  subject: {\n    reference: 'Patient?identifier=http://your-source-system.com/patients|P001'\n  },\n  identifier: [\n    {\n      system: 'http://your-source-system.com/patient_conditions',\n      value: 'PC002'\n    }\n  ],\n  onsetDateTime: '2023-01-10'\n};\n\n```\n\n----------------------------------------\n\nTITLE: Coverage Eligibility Response Example\nDESCRIPTION: This is a placeholder for an example of a coverage eligibility response. The actual code would show the structure of a `CoverageEligibilityResponse` object, specifically highlighting the `insurance.item` array and its properties.  It would demonstrate how to represent covered services, benefits, and authorization requirements in TypeScript. The `ExampleCode` string will be replaced with a JSON or object literal representing the data.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/billing/insurance-eligibility-checks.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n{ExampleCode}\n```\n\n----------------------------------------\n\nTITLE: Representing Self-Pay Coverage in FHIR\nDESCRIPTION: This snippet shows how to represent a self-pay or cash-pay patient's insurance coverage using the FHIR Coverage resource. The `type`, `subscriber`, `beneficiary`, `relationship`, and `payor` fields are configured to indicate the patient is paying out-of-pocket. The `type` field utilizes the SOPT code system to classify the coverage.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/billing/patient-insurance.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  resourceType: 'Coverage',\n  //...\n  type: {\n    text: 'Self-pay'\n    coding: [\n      {\n            system: 'https://nahdo.org/sopt',\n            code: '81',\n            display: 'Self-pay (Includes applicants for insurance and Medicaid applicants)',\n          },\n    ],\n  },\n  subscriber: {\n    reference: 'Patient/example-patient',\n  },\n  beneficiary: {\n    reference: 'Patient/example-patient',\n  },\n  relationship: {\n    coding: [\n      {\n        system: 'http://terminology.hl7.org/CodeSystem/subscriber-relationship',\n        code: 'self',\n        display: 'Self'\n      },\n    ],\n  },\n  payor: [\n    {\n      reference: 'Patient/example-patient',\n    },\n  ],\n  //...\n};\n```\n\n----------------------------------------\n\nTITLE: FHIR Search with _include and _revinclude (CLI)\nDESCRIPTION: This CLI command demonstrates how to perform a FHIR search with the `_include` and `_revinclude` parameters to retrieve linked resources using the Medplum CLI. It is used to search for Observation resources and include related Patient and Provenance resources. Requires the Medplum CLI to be installed and configured.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/search/includes.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n{ExampleCode}\n```\n\n----------------------------------------\n\nTITLE: Setting Medplum Client Credentials in .env File (Bash)\nDESCRIPTION: This snippet shows how to create a `.env` file and set the `MEDPLUM_CLIENT_ID` and `MEDPLUM_CLIENT_SECRET` variables. This provides an alternative to setting environment variables in the command line and simplifies the authentication process for the Medplum CLI. It also shows how to copy the example env file to start.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/bots/bots-in-production.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncp .env.example .env\n```\n\n----------------------------------------\n\nTITLE: Searching by ID using _id Parameter - CLI\nDESCRIPTION: Demonstrates how to search for Patient resources using their IDs via the `_id` parameter in the command-line interface (CLI).  The code snippet shows the appropriate CLI command to execute the FHIR search operation. Requires the Medplum CLI to be installed and configured.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/search/advanced-search-parameters.mdx#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n{ExampleCode}\n```\n\n----------------------------------------\n\nTITLE: List Medplum Users\nDESCRIPTION: Retrieves a list of all Medplum users using the `medplum get User` command. This requires super admin privileges and a valid login session.  The output is a FHIR Bundle resource containing User resources.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/self-hosting/super-admin-cli.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nmedplum get User\n```\n\n----------------------------------------\n\nTITLE: Searching Filtered Threads using CLI\nDESCRIPTION: This snippet demonstrates how to filter communication threads based on the `subject` parameter using the command line interface (CLI) in Medplum. This allows you to search for threads related to a specific patient.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/communications/organizing-communications.mdx#_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\n{ExampleCode}\n```\n\n----------------------------------------\n\nTITLE: Configuring Mailtrap SMTP settings - JSON\nDESCRIPTION: This snippet demonstrates how to configure the Medplum server with Mailtrap SMTP settings in the `medplum.config.json` file. The `host`, `port`, `username`, and `password` should be replaced with your Mailtrap credentials.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/self-hosting/mailtrapio.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"smtp\": {\n    \"host\": \"sandbox.smtp.mailtrap.io\",\n    \"port\": 587,\n    \"username\": \"username\",\n    \"password\": \"password\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Resource Properties\nDESCRIPTION: Uses the `ResourcePropertiesTable` component to display the properties of the Patient resource. The `properties` prop is passed the filtered list of properties.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/api/fhir/resources/patient.mdx#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n<ResourcePropertiesTable\n  properties={definition.properties.filter((p) => !(p.inherited && p.base.includes('Resource')))}\n/>\n```\n\nLANGUAGE: javascript\nCODE:\n```\n<ResourcePropertiesTable properties={definition.properties.filter((p) => p.inherited && p.base.includes('Resource'))} />\n```\n\n----------------------------------------\n\nTITLE: Using Subscription Extensions with `useSubscription` (TSX)\nDESCRIPTION: This example demonstrates how to use subscription extensions to filter events based on the type of interaction (e.g., 'create'). It shows how to pass the `subscriptionProps` option to the `useSubscription` hook to specify the desired extensions, allowing you to listen for specific types of resource interactions.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/react/use-subscription.md#_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nconst createOnlyOptions = {\n  subscriptionProps: {\n    extension: [\n      {\n        url: 'https://medplum.com/fhir/StructureDefinition/subscription-supported-interaction',\n        valueCode: 'create',\n      },\n    ],\n  },\n};\n\nfunction MyComponent(): JSX.Element {\n  const [createCount, setCreateCount] = useState(0);\n\n  useSubscription(\n    'Communication?sender=Practitioner/abc-123&recipient=Practitioner/me-456',\n    (_bundle) => {\n      console.log('Received a new message from Practitioner/abc-123!');\n      setCreateCount((s) => s + 1);\n    },\n    createOnlyOptions\n  );\n\n  return <div>Create notifications received: {createCount}</div>;\n}\n```\n\n----------------------------------------\n\nTITLE: Insurance Coverage Selection Component in TSX\nDESCRIPTION: This code snippet shows how to implement an insurance coverage selection component using a `select` element. It displays a list of available coverages and allows the user to select one. The selected coverage is then used to update the billing information with the `patientCoverage` property.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/integration/health-gorilla/sending-orders.md#_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\n{\n  patient && state.billingInformation.billTo === 'insurance' && (\n    <select\n      name=\"coverage\"\n      onChange={(e) => {\n        updateBillingInformation({\n          patientCoverage: { reference: `Coverage/${e.target.value}` },\n        });\n      }}\n    >\n      <option value=\"\">Select Insurance Coverage</option>\n      {coverages.map((coverage) => (\n        <option key={coverage.id} value={coverage.id}>\n          {coverage.payor?.[0]?.display || 'Unknown Insurance'}\n        </option>\n      ))}\n    </select>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Install NPM Dependencies\nDESCRIPTION: Installs the npm dependencies for the Medplum project.  This command is used to install all of the dependencies listed in the package.json file.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/self-hosting/install-from-scratch.md#_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nnpm ci\n```\n\n----------------------------------------\n\nTITLE: Searching specific Elements using _elements - Typescript\nDESCRIPTION: Demonstrates how to retrieve only specific elements (subject and performers) of Observation resources using the `_elements` parameter in Typescript. Requires the Medplum SDK and a configured Medplum client.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/search/advanced-search-parameters.mdx#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n{ExampleCode}\n```\n\n----------------------------------------\n\nTITLE: Add Datadog Agent to ECS Fargate Tasks (JSON)\nDESCRIPTION: This JSON snippet demonstrates how to add the Datadog agent as an additional container to ECS Fargate tasks using the `additionalContainers` property in the Medplum CDK JSON configuration file. It requires setting the `DD_SITE`, `DD_API_KEY`, and `ECS_FARGATE` environment variables. Replace `YOUR_API_KEY` with your actual Datadog API key.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/self-hosting/datadog.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"name\": \"staging\",\n  \"region\": \"us-east-1\",\n  \"stackName\": \"MedplumStagingStack\",\n  // ...\n  \"additionalContainers\": [\n    {\n      \"name\": \"datadog-agent\",\n      \"image\": \"public.ecr.aws/datadog/agent:latest\",\n      \"environment\": {\n        \"DD_SITE\": \"datadoghq.com\",\n        \"DD_API_KEY\": \"YOUR_API_KEY\",\n        \"ECS_FARGATE\": \"true\"\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Run the application (npm)\nDESCRIPTION: Starts the development server for the application using npm. This command launches the React application, making it accessible in a web browser, typically at http://localhost:3000/. It enables hot-reloading for development.\nSOURCE: https://github.com/medplum/medplum/blob/main/examples/medplum-eligibility-demo/README.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Defining HealthGorillaLabOrderState Type in Typescript\nDESCRIPTION: This code snippet defines the `HealthGorillaLabOrderState` type, which represents the state object managed by the `useHealthGorillaLabOrder` hook. It includes properties such as `performingLab`, `selectedTests`, `testMetadata`, `diagnoses`, `billingInformation`, `specimenCollectedDateTime`, and `orderNotes`, crucial for managing the order's lifecycle and related data.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/integration/health-gorilla/sending-orders.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype HealthGorillaLabOrderState = {\n  performingLab: LabOrganization | undefined;\n  selectedTests: TestCoding[];\n  testMetadata: Record<string, TestMetadata>;\n  diagnoses: DiagnosisCodeableConcept[];\n  billingInformation: BillingInformation;\n  specimenCollectedDateTime: Date | undefined;\n  orderNotes: string | undefined;\n};\n```\n\n----------------------------------------\n\nTITLE: Run Sim Hospital in Docker (Bash)\nDESCRIPTION: This bash command runs the Sim Hospital simulator in a Docker container, configured to output HL7 messages over MLLP. It exposes port 8000 and sends messages to the specified IP address and port.  This is used for comprehensive end-to-end testing. Docker needs to be installed.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/agent/index.md#_snippet_7\n\nLANGUAGE: Bash\nCODE:\n```\ndocker run --rm -it -p 8000:8000 eu.gcr.io/simhospital-images/simhospital:latest health/simulator -output mllp -mllp_destination <ip_address>:<port> -pathways_per_hour 720\n```\n\n----------------------------------------\n\nTITLE: Example DatabaseSecrets Value (JSON)\nDESCRIPTION: Shows an example JSON structure for the `DatabaseSecrets` value when using AWS Parameter Store config. This includes the dbClusterIdentifier, password, dbname, engine, port, host, username, and queryTimeout.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/self-hosting/config-settings.md#_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"dbClusterIdentifier\": \"my-cluster\",\n  \"password\": \"password\",\n  \"dbname\": \"medplum\",\n  \"engine\": \"postgres\",\n  \"port\": 5432,\n  \"host\": \"my-cluster.us-east-1.rds.amazonaws.com\",\n  \"username\": \"clusteradmin\",\n  \"queryTimeout\": 60000\n}\n```\n\n----------------------------------------\n\nTITLE: Deploy Bot with Typescript\nDESCRIPTION: This code snippet demonstrates how to deploy a Medplum Bot using Typescript. It likely shows constructing a POST request with the Bot's ID and the required parameters: filename and code.  The `ExampleCode` variable is assumed to contain the actual code example.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/api/fhir/operations/bot-deploy.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n{ExampleCode}\n```\n\n----------------------------------------\n\nTITLE: Configure Master Authorized Networks (Terraform - repeated)\nDESCRIPTION: This snippet configures the master_authorized_networks in the Terraform configuration. Replace `your-public-ip` with your actual public IP address to allow access to the GKE cluster.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/self-hosting/install-on-gcp.md#_snippet_20\n\nLANGUAGE: terraform\nCODE:\n```\nmaster_authorized_networks = [\n  {\n    cidr_block   = \"your-public-ip/32\"\n    display_name = \"Your Machine\"\n  },\n]\n```\n\n----------------------------------------\n\nTITLE: Run the application\nDESCRIPTION: Starts the development server for the Medplum Task Demo App. This command typically uses a tool like Vite to serve the application with hot module replacement for faster development cycles.\nSOURCE: https://github.com/medplum/medplum/blob/main/examples/medplum-task-demo/README.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Setting Log Level in agent.properties\nDESCRIPTION: This snippet shows how to adjust the Medplum Agent log level by adding the `logLevel` key with the desired level (e.g., DEBUG) to the `agent.properties` file.  The Windows Service `Medplum Agent` must be restarted for changes to take effect. Requires the Medplum Agent to be installed.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/agent/troubleshooting.md#_snippet_0\n\nLANGUAGE: properties\nCODE:\n```\nlogLevel=DEBUG\n```\n\n----------------------------------------\n\nTITLE: Asynchronous Encounter Flowchart\nDESCRIPTION: Mermaid flowchart illustrating the relationship between Encounter and Communication resources in an asynchronous encounter. The Encounter resource represents the session, and Communication resources represent messages linked to the Encounter via the thread header.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/communications/async-encounters/async-encounters.md#_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart RL\n    A(Encounter)\n\n    subgraph Thread Header\n        B(Communication)\n    end\n\n    subgraph Messages\n        C(Communication)\n        D(Communication)\n    end\n\n    C --> |Communication.partOf| B\n    D --> |Communication.partOf| B\n    B --> |Communication.encounter| A\n\n```\n\n----------------------------------------\n\nTITLE: Enabling RDS Proxy in CDK Config (JS)\nDESCRIPTION: This code demonstrates how to enable RDS Proxy in the Medplum CDK configuration file.  `rdsInstances` is set to 2 or more to allow for zero-downtime updates. `rdsProxyEnabled` is set to `true` to create the RDS Proxy service and configure the server instances to connect through it.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/self-hosting/rds-parameters.md#_snippet_2\n\nLANGUAGE: js\nCODE:\n```\n{\n  // ...\n\n  \"rdsInstances\": 2,\n  \"rdsProxyEnabled\": true,\n\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Search Parameters Table\nDESCRIPTION: Renders a table displaying the search parameters available for the FHIR Binary resource.  This table allows users to understand how the Binary resource can be queried and filtered based on specific criteria.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/api/fhir/resources/binary.mdx#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\n<SearchParamsTable searchParams={definition.searchParameters} />\n```\n\n----------------------------------------\n\nTITLE: Connecting to an External EHR with MedplumClient (TypeScript)\nDESCRIPTION: This code snippet demonstrates how to use the Medplum Client Typescript SDK to connect to an external FHIR server, authenticating with client credentials. It initializes a MedplumClient instance with the external EHR's base URL, then initiates a login using a client ID and secret. Finally, it performs a search for Patient resources based on an identifier.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/blog/2023-05-08-codex-and-the-power-of-g10.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// External EHR Url and credentials\nconst externalEhrBaseUrl = 'https://ehr.externalprovider.org/FHIRProxy/api/FHIR/DSTU2/';\nconst externalClientId = '<client_id>';\nconst externalClientSecret = '<client_secret>';\n\n// Construct client ant authenticate\nconst externalEhrClient = new MedplumClient({\n  baseUrl: externalEhrBaseUrl,\n});\nawait externalEhrClient.startLogin(externalClientId, externalClientSecret);\n\n// Work with the client as needed, for example search\nawait externalEhrClient.searchResources('Patient?identifier:contains=999-47-5984');\n```\n\n----------------------------------------\n\nTITLE: Filter ValueSet via cURL\nDESCRIPTION: This cURL command expands a ValueSet, filtering the results by 'f'. It targets the administrative-gender ValueSet and returns only entries matching the specified filter.  The Content-Type and Authorization headers are required for FHIR JSON requests and authentication, respectively. The command demonstrates how to apply a filter to the $expand operation.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/api/fhir/operations/valueset-expand.mdx#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncurl 'https://api.medplum.com/fhir/R4/ValueSet/$expand?url=http%3A%2F%2Fhl7.org%2Ffhir%2FValueSet%2Fadministrative-gender&filter=f' \\\n  -H \"Content-Type: application/fhir+json\" \\\n  -H \"Authorization: Bearer MY_ACCESS_TOKEN\"\n```\n\n----------------------------------------\n\nTITLE: Defining Reference Range Categories in TypeScript\nDESCRIPTION: This snippet demonstrates how to specify the type of reference range using the `qualifiedInterval.category` field.  The reference ranges can be categorized into three different types: `reference` (normal ranges), `critical` (panic values), and `absolute` (measurable range).\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/careplans/reference-ranges.mdx#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  \"qualifiedInterval\": [\n    {\n      \"category\": \"reference\",\n      \"range\": {\n        // ... range definition ...\n      }\n    },\n    {\n      \"category\": \"critical\",\n      \"range\": {\n        // ... range definition ...\n      }\n    },\n    {\n      \"category\": \"absolute\",\n      \"range\": {\n        // ... range definition ...\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: FHIR CodeSystem Subsumes Request\nDESCRIPTION: Illustrates an HTTP GET request to the $subsumes endpoint to check the relationship between two SNOMED codes, 'Heart rate' and 'Observable entity', using the 'system', 'codeA', and 'codeB' parameters.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/api/fhir/operations/codesystem-subsumes.md#_snippet_1\n\nLANGUAGE: http\nCODE:\n```\nGET https://api.medplum.com/fhir/R4/CodeSystem/$subsumes?system=http://snomed.info/sct&codeA=364075005&codeB=363787002\n```\n\n----------------------------------------\n\nTITLE: Search Total Result in Medplum (TypeScript)\nDESCRIPTION: This TypeScript code snippet illustrates the structure of a bundle response containing the search results and total count, accessed via `bundle.total`.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/search/paginated-search.mdx#_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\n{\n  resourceType: 'Bundle',\n  type: 'searchset',\n  total: 123\n}\n```\n\n----------------------------------------\n\nTITLE: Get Patient by ID cURL Request\nDESCRIPTION: This cURL command demonstrates how to send a GraphQL query to the Medplum API to retrieve a Patient resource by ID. The command includes the necessary headers and payload to execute the query.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/graphql/basic-queries.mdx#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n{ExampleCode}\n```\n\n----------------------------------------\n\nTITLE: SQL Query for Organization by Profile and Active Status\nDESCRIPTION: Illustrates the SQL query generated for the FHIR search `Organization?_profile=http://hl7.org/fhir/us/core/StructureDefinition/us-core-organization&active=true`.  It demonstrates how array columns and boolean filters are handled in the SQL query. The `&&` operator checks for overlap between arrays and multiple search parameters are ANDed together.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/contributing/search-architecture.md#_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nSELECT \"Organization\".\"id\", \"Organization\".\"content\" FROM \"Organization\"\nWHERE (\"Organization\".\"deleted\"=false AND (\n  -- && operator checks for overlap between arrays\n  (\"Organization\".\"_profile\" IS NOT NULL AND \"Organization\".\"_profile\" && ARRAY[\n    'http://hl7.org/fhir/us/core/StructureDefinition/us-core-organization'\n  ]::TEXT[])\n  -- Multiple search parameters are ANDed together in the SQL query\n  AND \"Organization\".\"active\"=true\n))\n```\n\n----------------------------------------\n\nTITLE: FHIR CodeSystem Lookup Request\nDESCRIPTION: This snippet demonstrates a GET request to the $lookup operation of a FHIR CodeSystem. It uses the 'system' and 'code' parameters to query for a specific LOINC code (8867-4).\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/api/fhir/operations/codesystem-lookup.md#_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nGET /CodeSystem/$lookup?system=http://loinc.org&code=8867-4\n```\n\n----------------------------------------\n\nTITLE: SQL Query String Matching in Array Column\nDESCRIPTION: Presents the SQL query for `Organization?name=GeneCo`. It demonstrates string matching within an array column using a subquery and the `LOWER` function for case-insensitive prefix matching.  The `EXISTS` operator checks if there is at least one element that satisfies the condition.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/contributing/search-architecture.md#_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\nSELECT \"Organization\".\"id\", \"Organization\".\"content\" FROM \"Organization\"\nWHERE (\"Organization\".\"deleted\"=false AND\n  -- Subquery on array column is nearly (±5%) as performant as &&,\n  -- provided that subquery is cheap\n  EXISTS(SELECT 1 FROM unnest(\"name\") AS \"name\"\n    -- Strings use case-insensitive prefix matching\n    WHERE LOWER(\"name\") LIKE 'geneco%'\n    LIMIT 1\n  )\n)\n```\n\n----------------------------------------\n\nTITLE: Search Patients by Name and City cURL Request\nDESCRIPTION: This cURL command shows how to send a GraphQL query to search for Patient resources by name and city using the Medplum API. The command includes the necessary headers and payload to execute the search.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/graphql/basic-queries.mdx#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n{ExampleCode}\n```\n\n----------------------------------------\n\nTITLE: Start Medplum App Preview Server\nDESCRIPTION: Starts the Vite preview server for the Medplum app. This allows for testing the built app before deploying it.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/self-hosting/install-from-scratch.md#_snippet_19\n\nLANGUAGE: bash\nCODE:\n```\nnohup npx vite preview > app.log 2>&1 &\n```\n\n----------------------------------------\n\nTITLE: Record Histogram Value with OpenTelemetry in TypeScript\nDESCRIPTION: This code snippet demonstrates how to record a histogram value for a resource size metric using OpenTelemetry in a TypeScript class.  It calculates the size of a resource as a JSON string and then calls the `recordHistogramValue` function to record the metric with the resource type as an attribute.  The snippet depends on the `./otel/otel` module and the `Resource` type.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/server/src/otel/README.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { recordHistogramValue } from './otel/otel';\n\nclass Repository {\n  // ...\n  private async updateResourceImpl<T extends Resource>(resource: T, create: boolean): Promise<T> {\n    // ...\n\n    if (!this.isResourceWriteable(existing, result)) {\n      // Check after the update\n      throw new OperationOutcomeError(forbidden);\n    }\n\n    await this.handleMaybeCacheOnly(result);\n    await setCacheEntry(result);\n    await addBackgroundJobs(result, { interaction: create ? 'create' : 'update' });\n\n    /***** Adding new Otel code here *****/\n    recordHistogramValue('medplum.resource.size', JSON.stringify(result).length, {\n      resourceType: result.resourceType, // Attribute to split up the data by resource type\n    });\n    /***** End Otel instrumentation *****/\n\n    this.removeHiddenFields(result);\n    return result;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Install Redis Server\nDESCRIPTION: Installs the Redis server package on Ubuntu. Redis is used as a cache and message broker for Medplum.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/self-hosting/install-from-scratch.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt-get install redis-server\n```\n\n----------------------------------------\n\nTITLE: Create Form Data TypeScript\nDESCRIPTION: This snippet constructs the request body for an HTTP file upload using the `form-data` library.  It takes the binary data of a PDF file and creates a `FormData` object, which includes the file data and filename.  This `FormData` object can then be used in an HTTP request to upload the file to a remote server.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/bots/file-uploads.mdx#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nasync function formData(binaryData: Buffer): Promise<FormData> {\n  const form = new FormData();\n  form.append('file', binaryData, 'test.pdf');\n  return form;\n}\n```\n\n----------------------------------------\n\nTITLE: Prepare Invite JSON Admin Payload\nDESCRIPTION: Prepares a JSON payload for inviting a user to a project with admin privileges.  This JSON is sent to the `/invite` endpoint. No external dependencies are required.  The expected output is a JSON string including the `admin: true` setting.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/auth/user-management-guide/user-management-guide.md#_snippet_25\n\nLANGUAGE: typescript\nCODE:\n```\n{ExampleCode}\n```\n\n----------------------------------------\n\nTITLE: Installing project dependencies with npm\nDESCRIPTION: This command uses npm (Node Package Manager) to install all the dependencies required by the Medplum Patient Intake Demo project. These dependencies are listed in the `package.json` file.\nSOURCE: https://github.com/medplum/medplum/blob/main/examples/medplum-patient-intake-demo/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Update FHIR Profile - Bash\nDESCRIPTION: Demonstrates how to update a FHIR profile by creating a new StructureDefinition resource with an updated URL, effectively versioning the profile to allow for gradual migration and validation of resources.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/fhir-datastore/profiles.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n{ExampleCode}\n```\n\n----------------------------------------\n\nTITLE: Installing Medplum CLI Globally\nDESCRIPTION: Installs the Medplum CLI globally using npm, making the `medplum` command available system-wide. This requires Node.js and npm to be installed.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/cli/index.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --global @medplum/cli\n```\n\n----------------------------------------\n\nTITLE: Invoking $set-accounts Operation\nDESCRIPTION: Shows the HTTP POST request structure used to invoke the `$set-accounts` operation on a Patient resource in Medplum. Replace `<id>` with the actual patient ID.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/api/fhir/operations/patient-set-accounts.md#_snippet_0\n\nLANGUAGE: HTTP\nCODE:\n```\nPOST [base]/R4/Patient/<id>/$set-accounts\n```\n\n----------------------------------------\n\nTITLE: Running Medplum Docker Container\nDESCRIPTION: This command runs the Medplum Server Docker image. The `<CONFIG-PATH>` argument specifies the configuration source, which can be a local file (`file:/path/to/config.json`) or the AWS Parameter Store (`aws:/parameter/store/prefix/`).  The path prefix determines the configuration source.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/self-hosting/running-medplum-docker-container.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker run medplum/medplum-server:latest <CONFIG-PATH>\n```\n\n----------------------------------------\n\nTITLE: FHIR Subscription for 'create' events\nDESCRIPTION: This JSON snippet shows a FHIR Subscription configuration restricted to execute only on 'create' events. It uses the 'subscription-supported-interaction' extension and sets the valueCode to 'create'. This ensures the subscription is triggered only when a new resource is created.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/subscriptions/subscription-extensions.md#_snippet_3\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"resourceType\": \"Subscription\",\n  \"reason\": \"test\",\n  \"status\": \"active\",\n  \"criteria\": \"Patient\",\n  \"channel\": {\n    \"type\": \"rest-hook\",\n    \"endpoint\": \"https://example.com/webhook\"\n  },\n  \"extension\": [\n    {\n      \"url\": \"https://medplum.com/fhir/StructureDefinition/subscription-supported-interaction\",\n      \"valueCode\": \"create\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Restart Medplum Service (Config Change)\nDESCRIPTION: Restarts the Medplum service to apply changes made to the configuration file.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/self-hosting/install-on-ubuntu.md#_snippet_29\n\nLANGUAGE: bash\nCODE:\n```\nsudo systemctl restart medplum\n```\n\n----------------------------------------\n\nTITLE: FHIR Patient Resource Example in TypeScript\nDESCRIPTION: This snippet shows an example of a FHIR Patient resource, demonstrating how to map fields from a source system to the appropriate FHIR resource attributes. It illustrates the transformation of data formats to match FHIR requirements.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/migration/convert-to-fhir.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Patient } from '@medplum/fhirtypes';\n\nexport const patientExample: Patient = {\n  resourceType: 'Patient',\n  id: 'example',\n  name: [\n    {\n      family: 'Doe',\n      given: ['John']\n    }\n  ],\n  gender: 'male',\n  birthDate: '1980-05-15'\n};\n\n```\n\n----------------------------------------\n\nTITLE: Installing Medplum Bot Layer using npm\nDESCRIPTION: This command installs the `@medplum/bot-layer` package as a dependency for your Medplum Bot project.  This allows the bot to utilize the pre-built packages within the AWS Lambda Layer. It is a necessary step to use the benefits of the Medplum Bot Layer.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/bot-layer/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i @medplum/bot-layer\n```\n\n----------------------------------------\n\nTITLE: Querying ActivityDefinitions (CLI)\nDESCRIPTION: This code snippet shows how to query ActivityDefinitions using the Medplum CLI and the `_include` directive. This allows the retrieval of related resources based on a PlanDefinition.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/careplans/diagnostic-catalog/diagnostic-catalog.mdx#_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\n{ExampleCode}\n```\n\n----------------------------------------\n\nTITLE: Test Selection Component in TSX\nDESCRIPTION: This code snippet shows how to implement a test selection component using an `AutoComplete` component. It uses `searchAvailableTests` to fetch available tests and `setTests` to update the selected tests in the order state.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/integration/health-gorilla/sending-orders.md#_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\n<MyAutoComplete label=\"Selected tests\" loadOptions={searchAvailableTests} onChange={setTests} />\n```\n\n----------------------------------------\n\nTITLE: Chained Search with Resource Type (Observation by Patient Name) - cURL\nDESCRIPTION: This bash snippet shows how to search for Observation resources where the subject is a Patient with the name 'homer' using the `subject:Patient.name=homer` syntax via a cURL command.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/search/chained-search.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncurl -s -H \"Authorization: Bearer $MEDPLUM_CLIENT_ID\" \\\n  \"https://api.medplum.com/fhir/R4/Observation?subject:Patient.name=homer\" | jq\n```\n\n----------------------------------------\n\nTITLE: Start and Enable Nginx\nDESCRIPTION: Starts the Nginx service and enables it to start on boot. This ensures that Nginx is running and will automatically restart if the server restarts.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/self-hosting/install-from-scratch.md#_snippet_21\n\nLANGUAGE: bash\nCODE:\n```\nsudo systemctl start nginx\nsudo systemctl enable nginx\n```\n\n----------------------------------------\n\nTITLE: Build FSH Profiles to FHIR Resources\nDESCRIPTION: This command processes the FSH files located in the `src/profiles` directory and outputs the generated FHIR resources in JSON format to the `dist` directory. It requires that SUSHI is installed as a project dependency.\nSOURCE: https://github.com/medplum/medplum/blob/main/examples/medplum-fsh-profiles/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm run build:profiles\n```\n\n----------------------------------------\n\nTITLE: Database SSL Configuration (JSON)\nDESCRIPTION: Demonstrates how to configure database SSL settings using a JSON config file. This includes the require and rejectUnauthorized flags for secure connections.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/self-hosting/config-settings.md#_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"database\": {\n    \"host\": \"localhost\",\n    \"port\": 5432,\n    \"dbname\": \"medplum\",\n    \"username\": \"medplum\",\n    \"password\": \"medplum\",\n    \"ssl\": {\n      \"require\": true,\n      \"rejectUnauthorized\": true\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Install dependencies with NPM\nDESCRIPTION: This command installs the necessary dependencies for the Foo Medical application using Node Package Manager (NPM). It retrieves and installs packages listed in the `package.json` file.\nSOURCE: https://github.com/medplum/medplum/blob/main/examples/foomedical/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Import C-CDA Conversion Functions TypeScript\nDESCRIPTION: Imports the necessary functions from the `@medplum/ccda` package for converting between C-CDA and FHIR formats, including `convertCcdaToFhir`, `convertFhirToCcda`, `convertXmlToCcda`, and `convertCcdaToXml`. These functions are used for converting C-CDA documents to FHIR Composition bundles, FHIR Composition bundles to C-CDA documents, loading C-CDA documents from XML strings, and serializing C-CDA documents to XML strings, respectively.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/integration/c-cda.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  convertCcdaToFhir,\n  convertFhirToCcda,\n  convertXmlToCcda,\n  convertCcdaToXml,\n} from '@medplum/ccda';\n```\n\n----------------------------------------\n\nTITLE: Creating Linked FHIR Resources with REST Batch\nDESCRIPTION: This TypeScript code snippet creates a Bundle resource with a 'batch' type to create a Practitioner and a ServiceRequest. The `fullUrl` and `ifNoneExist` properties are used to prevent duplicate Practitioner resources and link the ServiceRequest to the created Practitioner. This demonstrates creating multiple linked resources in a single REST request.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/blog/2023-09-06-graphql-vs-rest.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  resourceType: 'Bundle',\n  type: 'batch',\n  entry: [\n    {\n      // highlight-next-line\n      fullUrl: 'urn:uuid:42316ff8-2714-4680-9980-f37a6d1a71bc',\n      request: {\n        method: 'POST',\n        url: 'Practitioner',\n        // highlight-next-line\n        ifNoneExist: 'identifier=https://example.com|' + identifier,\n      },\n      resource: {\n        resourceType: 'Practitioner',\n        identifier: [{ system: 'https://example.com', value: identifier }],\n      },\n    },\n    {\n      request: {\n        method: 'POST',\n        url: 'ServiceRequest'\n      },\n      resource: {\n        resourceType: 'ServiceRequest',\n        status: 'active',\n        intent: 'order',\n        subject: createReference(patient),\n        code: { coding: [{ system: 'http://loinc.org', code: '12345-6' }] },\n        // highlight-next-line\n        requester: { reference: 'urn:uuid:42316ff8-2714-4680-9980-f37a6d1a71bc' },\n      },\n    },\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: Connection API Response Example\nDESCRIPTION: Provides an example of the expected JSON response from the Connection API.  This response will include the total count and edges containing the data.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/graphql/connections.mdx#_snippet_3\n\nLANGUAGE: ts\nCODE:\n```\n{ExampleCode}\n```\n\n----------------------------------------\n\nTITLE: Filtering Syntax Example in Medplum (cURL)\nDESCRIPTION: Illustrates how to use the `_filter` parameter with cURL to perform filtered searches against the Medplum API. This snippet shows the construction of the HTTP request with the appropriate query parameters. No specific dependencies, but familiarity with HTTP requests is assumed.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/search/filter-search-parameter.mdx#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n{ExampleCode}\n```\n\n----------------------------------------\n\nTITLE: Invite Practitioner via Medplum API - cURL\nDESCRIPTION: This cURL code snippet demonstrates how to invite a Practitioner to a Medplum project using a cURL command. It includes the API endpoint, authorization header, content type header, and the request body with the Practitioner's information and sets the user as admin.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/api/project-admin/invite.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncurl https://api.medplum.com/admin/projects/:projectId/invite \\\n  -H \"Authorization: Bearer $TOKEN\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n  \"resourceType\": \"Practitioner\",\n  \"firstName\": \"George\",\n  \"lastName\": \"Washington\",\n  \"email\": \"dr.gw@example.gov\",\n  \"membership\": {\n    \"admin\": true\n  }\n}'\n```\n\n----------------------------------------\n\nTITLE: Build bots\nDESCRIPTION: Builds the Medplum Bots used by the application.  This process typically involves compiling or transpiling the bot code into a format suitable for execution within the Medplum environment.\nSOURCE: https://github.com/medplum/medplum/blob/main/examples/medplum-task-demo/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm run build:bots\n```\n\n----------------------------------------\n\nTITLE: Medplum Whoami Command\nDESCRIPTION: Executes the `medplum whoami` command, which displays the current authentication status, user name, and project.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/cli/index.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nmedplum whoami\n```\n\n----------------------------------------\n\nTITLE: FHIR Reference Example TypeScript\nDESCRIPTION: Shows the structure of a FHIR Reference element used to link resources, containing the reference string, display string, type, and identifier.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/fhir-basics.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  \"reference\" : \":resourceType/:id\",     // Resource type + unique id of the referenced Resource\n  \"display\" : string,       // Display string for the reference\n  \"type\" : uri,             // Resource type (if using a \"logical reference\")\n  \"identifier\" : Identifier\n}\n```\n\n----------------------------------------\n\nTITLE: Run Docker Image (Bash)\nDESCRIPTION: This command runs the Medplum Agent Docker image. It sets required environment variables for connecting to the Medplum instance.  Environment variables that must be set include MEDPLUM_BASE_URL, MEDPLUM_CLIENT_ID, MEDPLUM_CLIENT_SECRET, and MEDPLUM_AGENT_ID.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/agent/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndocker run --rm \\\n  -e MEDPLUM_BASE_URL=\"\" \\\n  -e MEDPLUM_CLIENT_ID=\"\" \\\n  -e MEDPLUM_CLIENT_SECRET=\"\" \\\n  -e MEDPLUM_AGENT_ID=\"\" \\\n  medplum-agent:latest\n```\n\n----------------------------------------\n\nTITLE: ValueSet Expansion SQL\nDESCRIPTION: Expands a ValueSet by returning a list of contained codes, optionally filtered. The query uses a recursive CTE to find all descendants of a given code, or applies a text filter to the display name and then checks ancestry.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/contributing/terminology-architecture.md#_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\n-- Expand a hierarchy, starting from the parent code\nWITH RECURSIVE \"cte_descendants\" AS (\n    SELECT id, code, display FROM \"Coding\"\n    WHERE system = ? AND code = ?\n  UNION\n      SELECT c.id, c.code, c.display FROM \"Coding\" c\n        INNER JOIN \"Coding_Property\" AS cp ON c.id = cp.coding AND cp.property = ?\n        INNER JOIN \"cte_descendants\" AS descendant ON cp.target = descendant.id\n)\nSELECT id, code, display FROM \"cte_descendants\"\nLIMIT 101;\n\n-- When a text filter is present, apply it first\n-- and then check whether those codes are in the hierarchy\nSELECT id, code, display FROM \"Coding\"\nWHERE (\n    system = ?\n    AND to_tsvector('english', display) @@ to_tsquery('english', ?)\n    AND EXISTS(\n      WITH RECURSIVE \"cte_ancestors\" AS (\n          SELECT origin.id, origin.code, origin.display FROM \"Coding\" origin\n          WHERE origin.system = ? AND origin.code = \"Coding\".code\n        UNION\n          SELECT c.id, c.code, c.display FROM \"Coding\" c\n            INNER JOIN \"Coding_Property\" AS cp ON c.id = cp.target AND cp.property = ?\n            INNER JOIN \"cte_ancestors\" AS ancestor ON cp.coding = ancestor.id\n      )\n      SELECT 1 FROM \"cte_ancestors\" WHERE code = ?\n    )\n)\nLIMIT 21;\n```\n\n----------------------------------------\n\nTITLE: Executing Bot with cURL Bash\nDESCRIPTION: This cURL command demonstrates how to execute a Medplum Bot programmatically using the `$execute` endpoint. It sends a POST request to the specified URL, including the `BOT_ID`. It includes headers for `Content-Type` and `Authorization` (using a Bearer token). The `<INPUT_DATA>` represents the data sent to the bot as `event.input`. Replace `<BOT_ID>`, `<CONTENT_TYPE>`, `<ACCESS_TOKEN>`, and `<INPUT_DATA>` with actual values.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/bots/bot-basics.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST 'https://api.medplum.com/fhir/R4/Bot/<BOT_ID>/$execute' \\\n  --header 'Content-Type: <CONTENT_TYPE>' \\\n  --header 'Authorization: Bearer <ACCESS_TOKEN>' \\\n  --data '<INPUT_DATA>'\n```\n\n----------------------------------------\n\nTITLE: Installing Mantine Core, Hooks and Notifications using npm\nDESCRIPTION: Installs Mantine core, hooks, and notifications as development dependencies using npm. This allows the use of Mantine's UI components and functionalities within the Medplum React components.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/react/index.mdx#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm i -D @mantine/core @mantine/hooks @mantine/notifications\n```\n\n----------------------------------------\n\nTITLE: Search ValueSet TypeScript\nDESCRIPTION: This TypeScript function `searchValueSet` searches for ValueSets on the Medplum server using a given search term (`term`). It uses the `medplum.search` method to query the 'ValueSet' resource with a filter on the `url` property. The function is asynchronous and returns a promise that resolves to the search results. The results need to be processed after the search is complete.\nSOURCE: https://github.com/medplum/medplum/blob/main/examples/medplum-valueset-selector/README.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst searchValueSet = async (term: string) => {\n  const result = await medplum.search('ValueSet', {\n    url: term\n  });\n  // Process results...\n};\n```\n\n----------------------------------------\n\nTITLE: Batch History Endpoint Example\nDESCRIPTION: Demonstrates how to make multiple calls to the _history endpoint in one batch request using Typescript. The full code is available in the ExampleCode variable.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/fhir-datastore/fhir-batch-requests.mdx#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n{ExampleCode}\n```\n\n----------------------------------------\n\nTITLE: Helm values YAML configuration\nDESCRIPTION: YAML configuration snippet demonstrating how to override default values in a Helm chart.  It specifies the cloud provider as Azure, the Key Vault URL, and the name of the configuration secret.  This configures the Medplum backend API to use Azure Key Vault for retrieving sensitive settings.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/self-hosting/install-on-azure.md#_snippet_10\n\nLANGUAGE: YAML\nCODE:\n```\nglobal:\n  cloudProvider: azure\n  azure:\n    keyVaultURL: [MY_KEYVAULT_URL] # Your Azure Key Vault URL\n    secretName: [MY_CONFIG_SECRET_NAME] # The configuration secret Name in Azure\n```\n\n----------------------------------------\n\nTITLE: Start the Medplum API server\nDESCRIPTION: Navigates to the `packages/server` directory and starts the Medplum API server using `npm run dev`. This command seeds the database with an example project and user.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/contributing/run-the-stack.md#_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\ncd packages/server\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Read Resource\nDESCRIPTION: Reads a FHIR resource by ID using the `readResource` method. It takes the resource type and ID as input and returns a Promise that resolves to the resource.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/core/README.md#_snippet_8\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst patient = await medplum.readResource('Patient', '123');\n```\n\n----------------------------------------\n\nTITLE: Install Medplum Core\nDESCRIPTION: Installs the @medplum/core package using npm, which is a required dependency for using the Medplum JS Client Library.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/core/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @medplum/core\n```\n\n----------------------------------------\n\nTITLE: Promote User to Admin - cURL\nDESCRIPTION: Updates a ProjectMembership resource using a cURL command to grant admin privileges to a user. This changes the 'admin' field to 'true' on the ProjectMembership. cURL must be installed. The output is the updated ProjectMembership resource.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/auth/user-management-guide/user-management-guide.md#_snippet_20\n\nLANGUAGE: bash\nCODE:\n```\n{ExampleCode}\n```\n\n----------------------------------------\n\nTITLE: Reinstall Script for Clean Installations (Bash)\nDESCRIPTION: This script is designed for a completely clean installation. It recursively removes all `node_modules` folders and then runs `npm ci --strict-peer-deps` to catch any peer dependency conflicts immediately. This ensures a consistent and reliable environment.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/contributing/package-json.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# For a completely clean installation\n./scripts/reinstall.sh\n```\n\n----------------------------------------\n\nTITLE: Wrapping Application with MantineProvider\nDESCRIPTION: Wraps the application with the `MantineProvider` component. This provides the Mantine theme and styling context to the application and its components.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/react/index.mdx#_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nimport { createTheme, MantineProvider } from '@mantine/core';\n\nconst theme = createTheme({\n  /** Put your mantine theme override here */\n});\n\nfunction Demo() {\n  return (\n    <MantineProvider theme={theme}>\n      <App />\n    </MantineProvider>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Managing App Backgrounding with useSubscription\nDESCRIPTION: This code snippet demonstrates how to manage the WebSocket connection when the Expo app is backgrounded or becomes inactive while using the `useSubscription` hook. It uses lifecycle callbacks to handle reconnection and fetch missed messages.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/expo-polyfills/README.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { MedplumClient } from '@medplum/core';\nimport { MedplumProvider, useMedplumContext, useMedplum, useSubscription } from '@medplum/react-hooks';\nimport { polyfillMedplumWebAPIs, ExpoClientStorage, initWebSocketManager } from '@medplum/expo-polyfills';\n\npolyfillMedplumWebAPIs();\n\nconst medplum = new MedplumClient({ storage: new ExpoClientStorage() });\n\ninitWebSocketManager(medplum);\n\nfunction Counter(): JSX.Element {\n  const medplum = useMedplum();\n  const [count, setCount] = useState(0);\n  const [reconnecting, setReconnecting] = useState(false);\n  const lastMessageTime = useRef<string>(new Date().toISOString());\n\n  useSubscription(\n    'Communication',\n    (_bundle: Bundle) => {\n      setCount((s) => s + 1);\n      lastMessageTime.current = new Date().toISOString();\n    },\n    {\n      onWebSocketClose: useCallback(() => {\n        if (!reconnecting) {\n          setReconnecting(true);\n        }\n        showNotification({ color: 'red', message: 'Live chat disconnected. Attempting to reconnect...' });\n      }, [setReconnecting, reconnecting]),\n      onWebSocketOpen: useCallback(() => {\n        if (reconnecting) {\n          showNotification({ color: 'green', message: 'Live chat reconnected.' });\n        }\n      }, [reconnecting]),\n      onSubscriptionConnect: useCallback(() => {\n        if (reconnecting) {\n          const searchParams = new URLSearchParams();\n          searchParams.append('_sort', '-_lastUpdated');\n          // Get messages that are greater than the last received timestamp\n          if (lastMessageTime.current) {\n            searchParams.append('_lastUpdated', `gt${lastMessageTime.current}`);\n          }\n          lastMessageTime.current = new Date().toISOString();\n          medplum.searchResources('Communication', searchParams, { cache: 'no-cache' })\n            .then((communications: Communication[]) => {\n              setCount(s => s + communications.length);\n            })\n            .catch((err) => showNotification({ color: 'red', message: normalizeErrorString(err) }));\n          setReconnecting(false);\n        }\n      }, [reconnecting, setReconnecting, medplum]),\n    }\n  );\n\n  return <div>Count: {count}</div>\n}\n\nfunction Home(): JSX.Element {\n  const { loading } = useMedplumContext();\n  return loading ? <div>Loading...</div> : <Counter />;\n}\n\nfunction App(): JSX.Element {\n  return (\n    <MedplumProvider medplum={medplum}>\n      <Home />\n    </MedplumProvider>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: C-CDA and FHIR Conversion Example TypeScript\nDESCRIPTION: This code snippet demonstrates how to use the `@medplum/ccda` library to convert between C-CDA documents and FHIR resources. It imports the necessary functions and provides examples for converting C-CDA to FHIR, FHIR to C-CDA, loading C-CDA from XML, and serializing C-CDA to XML.\n\nDependencies: @medplum/ccda\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/ccda/README.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  convertCcdaToFhir,\n  convertFhirToCcda,\n  convertXmlToCcda,\n  convertCcdaToXml,\n} from '@medplum/ccda';\n\n// Convert C-CDA to FHIR\nconst bundle = convertCcdaToFhir(ccda);\n\n// Convert FHIR to C-CDA\nconst ccda = convertFhirToCcda(bundle);\n\n// Load C-CDA from XML\nconst ccda = convertXmlToCcda(xml);\n\n// Serialize C-CDA to XML\nconst xml = convertCcdaToXml(ccda);\n```\n\n----------------------------------------\n\nTITLE: Questionnaire for Organization B (JSON)\nDESCRIPTION: This JSON snippet defines a `Questionnaire` resource associated with `Organization B` via the `meta.accounts` field. The `meta.accounts` array contains a reference to `Organization/{{organization_b}}`, linking the questionnaire to the specified organization.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/access/multi-tenant-access-policy.md#_snippet_4\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"resourceType\": \"Questionnaire\",\n    \"meta\": {\n        \"accounts\": [\n            {\n                \"reference\": \"Organization/{{organization_b}}\"\n            }\n        ]\n    },\n    \"title\": \"Experience Rating Questionnaire\",\n    \"status\": \"active\",\n    \"item\": [\n        {\n            \"linkId\": \"1\",\n            \"text\": \"How would you rate your overall experience?\",\n            \"type\": \"choice\",\n            \"answerOption\": [\n                {\n                    \"valueCoding\": {\n                        \"system\": \"http://example.org/rating\",\n                        \"code\": \"5\",\n                        \"display\": \"Excellent\"\n                    }\n                }\n            ]\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring SendGrid SMTP Settings in Medplum\nDESCRIPTION: Adds an `smtp` section to the Medplum server configuration file with the necessary SendGrid SMTP settings, including the host, port, username, and password (API key).  The `host` is `smtp.sendgrid.net`, `port` is `587`, `username` is `apikey`, and the `password` is the SendGrid API key.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/self-hosting/sendgrid.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\"smtp\": {\n  \"host\": \"smtp.sendgrid.net\",\n  \"port\": 587,\n  \"username\": \"apikey\",\n  \"password\": \"YOUR_API_KEY\"\n}}\n```\n\n----------------------------------------\n\nTITLE: Create PostgreSQL User\nDESCRIPTION: Creates a PostgreSQL user named 'medplum' with a password. This user will be granted privileges to access and manage the Medplum database.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/self-hosting/install-from-scratch.md#_snippet_3\n\nLANGUAGE: PLpgSQL\nCODE:\n```\nCREATE USER medplum WITH PASSWORD 'medplum';\n```\n\n----------------------------------------\n\nTITLE: Upserting a Resource using CLI\nDESCRIPTION: This snippet demonstrates how to upsert a resource using the Medplum CLI. It requires appropriate authorization and a search query to identify the resource to update or create.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/fhir-datastore/updating-data.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n/* selectBlocks: upsertCli */\n\n```\n\n----------------------------------------\n\nTITLE: Install Redis\nDESCRIPTION: Installs the Redis server using apt-get.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/self-hosting/install-on-ubuntu.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt-get install redis-server\n```\n\n----------------------------------------\n\nTITLE: Run tests using Turborepo\nDESCRIPTION: Runs all tests across all packages in the Medplum monorepo using Turborepo.  This is achieved by running `npm t` from the root Medplum directory.  Assumes the `t` script is defined to execute the test suite.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/contributing/run-the-stack.md#_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\nnpm t\n```\n\n----------------------------------------\n\nTITLE: Querying ObservationDefinitions and SpecimenDefinitions (TS)\nDESCRIPTION: This TypeScript code shows how to query for ObservationDefinitions and SpecimenDefinitions. This example shows another way the data can be accessed using typescript.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/careplans/diagnostic-catalog/diagnostic-catalog.mdx#_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\n{ExampleCode}\n```\n\n----------------------------------------\n\nTITLE: Querying ActivityDefinitions (TS)\nDESCRIPTION: This TypeScript code snippet demonstrates how to query all ActivityDefinitions for a given PlanDefinition using the `_include` directive.  This is used to retrieve related resources from the FHIR server.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/careplans/diagnostic-catalog/diagnostic-catalog.mdx#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n{ExampleCode}\n```\n\n----------------------------------------\n\nTITLE: Token Grant with `openid` Scope Sample Request\nDESCRIPTION: Sample HTTP GET request to the `/oauth2/authorize` endpoint for token grant flow with the `openid` scope. The request contains required parameters such as `response_type`, `client_id`, `redirect_uri`, `state`, and `scope=openid`. Medplum returns an ID token in this case.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/api/oauth/authorize.md#_snippet_6\n\nLANGUAGE: HTTP\nCODE:\n```\nGET https://api.medplum.com/oauth2/authorize?\n    response_type=token&\n    client_id=492e4ec3-fb66-4b45-b529-599c708ec530&\n    redirect_uri=https://YOUR_APP/redirect_uri&\n    state=STATE&\n    scope=openid\n```\n\n----------------------------------------\n\nTITLE: Specimen Collection Time Component in TSX\nDESCRIPTION: This code snippet implements a specimen collection time input using a `datetime-local` input element. The selected date and time are used to update the `specimenCollectedDateTime` property in the order state.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/integration/health-gorilla/sending-orders.md#_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\n<input\n  type=\"datetime-local\"\n  onChange={(e) => {\n    setSpecimenCollectedDateTime(e.target.value ? new Date(e.target.value) : undefined);\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: JSON Definition Import\nDESCRIPTION: Imports the JSON definition of the Questionnaire resource, which is used to populate the ResourcePropertiesTable and SearchParamsTable components.  The imported JSON structure is expected to contain 'properties' and 'searchParameters' keys.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/api/fhir/resources/questionnaire.mdx#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport definition from '@site/static/data/resourceDefinitions/questionnaire.json';\n```\n\n----------------------------------------\n\nTITLE: Get SSL Certificates (Certbot)\nDESCRIPTION: Uses Certbot to obtain SSL certificates for the app and API domains. This automates the process of obtaining and installing SSL certificates from Let's Encrypt.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/self-hosting/install-from-scratch.md#_snippet_22\n\nLANGUAGE: bash\nCODE:\n```\nsudo certbot --nginx -d app.example.com\nsudo certbot --nginx -d api.example.com\n```\n\n----------------------------------------\n\nTITLE: Estimating Total Storage Size\nDESCRIPTION: This formula calculates the total storage required based on resource count, patient total, average size, average history length, and an overhead factor. It provides a way to estimate the database size for a Medplum self-hosted instance.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/blog/2023-03-28-estimating-rds-size.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\ntotalStorage = resourceCount * patientTotal * avgSize * avgHistoryLength / (1024 * 1024) * (1 + overheadFactor)\n```\n\n----------------------------------------\n\nTITLE: Install dependencies with npm\nDESCRIPTION: Installs the dependencies required for the Medplum SMART on FHIR demo application. This step is necessary before running or building the application.\nSOURCE: https://github.com/medplum/medplum/blob/main/examples/medplum-smart-on-fhir-demo/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Build Medplum App\nDESCRIPTION: Builds the Medplum app after updating the environment variables. This generates a new version of the app with the updated API endpoint.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/self-hosting/install-from-scratch.md#_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Prescription Request (TypeScript)\nDESCRIPTION: This snippet shows how to categorize a MedicationRequest as a prescription (outpatient context) using the `category` field. It uses the FHIR MedicationRequest Admin Location value set to specify that it's a prescription.  This example needs the `ExampleCode` variable to be defined with the actual code.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/medications/representing-prescriptions-and-medication-orders.mdx#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n{ExampleCode}\n```\n\n----------------------------------------\n\nTITLE: Configure database and redis connection details\nDESCRIPTION: Update the `packages/server/medplum.config.json` file with the correct host, port, database name, username, and password for your PostgreSQL and Redis instances. This is necessary when deploying manually.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/contributing/run-the-stack.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n  \"database\": {\n    \"host\": \"\",     // YOUR POSTGRESQL HOST\n    \"port\": \"\",     // YOUR POSTGRESQL PORT\n    \"dbname\": \"\",   // YOUR POSTGRESQL DB Name\n    \"username\": \"\", // YOUR POSTGRESQL USERNAME\n    \"password\": \"\"  // YOUR POSTGRESQL PASSWORD\n  },\n    \"redis\": {\n    \"host\": \"\",     // YOUR REDIS HOST\n    \"port\": \"\",     // YOUR REDIS PORT\n    \"password\": \"\", // YOUR REDIS PASSWORD\n  }\n```\n\n----------------------------------------\n\nTITLE: Artillery Configuration for FHIR Datastore Load Test (YAML)\nDESCRIPTION: This YAML configuration file defines the target URL, test phases (warm-up and ramp-up), and variables (authentication token) for load testing a FHIR datastore. It also defines a scenario for creating, reading, and searching Patient resources.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/self-hosting/load-testing.md#_snippet_4\n\nLANGUAGE: YAML\nCODE:\n```\nconfig:\n  target: 'https://api.staging.medplum.com'\n  phases:\n    - duration: 10\n      arrivalRate: 10\n      name: Warm up\n    - duration: 60\n      arrivalRate: 10\n      rampTo: 50\n      name: Ramp up load\n  variables:\n    auth: 'Bearer MY_ACCESS_TOKEN'\n\nscenarios:\n  - name: 'FHIR Datastore'\n    flow:\n      - loop:\n          - post:\n              url: '/fhir/R4/Patient'\n              headers:\n                Authorization: '{{ auth }}'\n              json:\n                resourceType: Patient\n                name:\n                  - family: '{{ $randomString() }}'\n              capture:\n                - json: '$.id'\n                  as: 'patientId'\n                - json: '$.name[0].family'\n                  as: 'familyName'\n          - get:\n              url: '/fhir/R4/Patient/{{ patientId }}'\n              headers:\n                Authorization: '{{ auth }}'\n          - get:\n              url: '/fhir/R4/Patient?name={{ familyName }}'\n              headers:\n                Authorization: '{{ auth }}'\n        count: 10\n```\n\n----------------------------------------\n\nTITLE: Creating Bot with Medplum API (Typescript)\nDESCRIPTION: This Typescript code snippet demonstrates how to create a new Medplum Bot using the `medplum.post` function. It sends a POST request to the `/admin/projects/:projectId/bot` endpoint with the bot's name, description, and a reference to an existing AccessPolicy.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/api/project-admin/bot.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nawait medplum.post('admin/projects/:projectId/bot', {\n  name: 'Hello World Bot',\n  description: 'Hello world',\n  accessPolicy: {\n    reference: 'AccessPolicy/access-policy-id',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: SCIM User Schema Example (Practitioner)\nDESCRIPTION: This example shows the JSON structure for a SCIM User resource representing a Practitioner in Medplum. The `schemas` property defines the SCIM schema, `userType` specifies the FHIR resource type, and `name` and `emails` provide user information. This JSON would be used in a POST request to create a new user.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/api/scim/users.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"schemas\": [\"urn:ietf:params:scim:schemas:core:2.0:User\"],\n  \"userType\": \"Practitioner\",\n  \"name\": {\n    \"givenName\": \"Alice\",\n    \"familyName\": \"Smith\"\n  },\n  \"emails\": [{ \"value\": \"alice@example.com\" }]\n}\n```\n\n----------------------------------------\n\nTITLE: Clone Medplum Project Excluding Resource IDs\nDESCRIPTION: Clones a Medplum project, excluding specified resource IDs using the `excludeIds` parameter in the JSON payload. Requires super admin privileges and a valid login session. Returns the JSON representation of the newly cloned project.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/self-hosting/super-admin-cli.md#_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\nmedplum post 'Project/bca80725-ea6a-4fb4-8eac-41b8ee51f09e/$clone' '{\"excludeIds\": [\"bca80725-ea6a-4fb4-8eac-41b8ee51f09e\"]}'\n```\n\n----------------------------------------\n\nTITLE: Using the useSubscription Hook\nDESCRIPTION: Demonstrates how to use the `useSubscription` hook to subscribe to FHIR search criteria and receive real-time notifications. The hook creates an in-memory `Subscription` resource and calls the provided callback function when a matching event occurs.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/react-hooks/README.md#_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\nfunction MyComponent(): JSX.Element {\n  const [notificationCount, setNotificationCount] = useState(0);\n\n  useSubscription('Communication?sender=Practitioner/abc-123&recipient=Practitioner/me-456', (bundle: Bundle) => {\n    console.log('Received a message from Practitioner/abc-123!');\n    handleNotificationBundle(bundle); // Do something with the bundle\n    setNotificationCount((s) => s + 1);\n  });\n\n  return <div>Notifications received: {notificationCount}</div>;\n}\n```\n\n----------------------------------------\n\nTITLE: Invoke $resend Operation using cURL\nDESCRIPTION: This cURL command demonstrates how to invoke the `$resend` operation against the Medplum FHIR API. It sends a POST request to the specified resource URL, including the `$resend` operation.  The request includes the authorization header with a bearer token, and the request body contains a JSON payload specifying options for verbose logging, interaction type, and a specific subscription ID.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/api/fhir/operations/resend.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncurl 'https://api.medplum.com/fhir/R4/<resourceType>/<resourceId>/$resend' \\\n-X 'POST' \\\n-H 'authorization: Bearer MY_ACCESS_TOKEN' \\\n-H 'content-type: application/fhir+json' \\\n--data-raw '{\"verbose\":\"true\",\"interaction\":\"update\",\"subscription\":\"Subscription/123\"}'\n```\n\n----------------------------------------\n\nTITLE: Evidence Resource Properties JSON\nDESCRIPTION: The JSON definition of the Evidence resource's properties, defining its schema and data types.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/api/fhir/resources/evidence.mdx#_snippet_3\n\nLANGUAGE: JSON\nCODE:\n```\n{\"resourceType\": \"StructureDefinition\",\"id\": \"Evidence\",\"url\": \"http://hl7.org/fhir/StructureDefinition/Evidence\",\"name\": \"Evidence\",\"status\": \"draft\",\"kind\": \"resource\",\"abstract\": false,\"type\": \"DomainResource\",\"baseDefinition\": \"http://hl7.org/fhir/StructureDefinition/DomainResource\",\"derivation\": \"constraint\",\"differential\": {\"element\": [{\"id\": \"Evidence\",\"path\": \"Evidence\",\"definition\": \"The Evidence resource describes the conditional state (population and any exposures being compared within the population) and outcome (if specified) that the knowledge (evidence, assertion, recommendation) is about.\",\"comment\": \"The Evidence resource is a commonly bundled series of evidence variables from the \\\"PICO\\\" specification of medical knowledge: Population - the population within which exposures and outcomes are being considered Intervention - the conditional state or exposure state being described for which one is expressing the risk of or effect on an outcome Comparison - the alternative conditional state or alternative exposure state when one is comparing states for the effect on an outcome Outcome - the result or effect of an intervention or exposure in a population PICO (and its variants like PECO or PICOT) is a universal acronym used in evidence-based medicine communities to clearly express research questions and evidence findings. The Evidence resource allows expression of the higher-order concept for recommendations in healthcare where multiple outcomes are considered, and the higher-order concept/combination for framing research questions.\"}, {\"id\": \"Evidence.url\",\"path\": \"Evidence.url\",\"short\": \"Canonical identifier for the evidence, represented as a URI [uri]\",\"definition\": \"An absolute URI that is used to identify this evidence when it is referenced in a specification, model, design or an instance; also called its canonical identifier. This SHOULD be globally unique and SHOULD be a literal address.\",\"comment\": \"Can be a urn:uuid: or a url. Can be a clinical guideline, literature, or similar artifact. A common use case is for an Evidence to be the master record that publishes a set of referenced EvidenceVariables.\",\"requirements\": \"Allows formal registration of evidences as a computable definition once all parts are present.\",\"min\": 0, \"max\": \"1\", \"type\": [{\"code\": \"uri\"}], \"mustSupport\": true}, {\"id\": \"Evidence.identifier\",\"path\": \"Evidence.identifier\",\"short\": \"Additional identifier for the evidence\",\"definition\": \"A formal identifier that is used to identify this evidence when it is represented in other formats, or referenced in a specification, model, design or an instance but is not a canonical identifier.  Note that this is not the same as the resource identifier, which is always assigned by the server, on which the resource resides.\",\"comment\": \"Allows identification of the evidence, and linking it to other artifacts.\",\"min\": 0, \"max\": \"*\", \"type\": [{\"code\": \"Identifier\"}], \"mustSupport\": true}]}}\n```\n\n----------------------------------------\n\nTITLE: Searching and getting Total Count using _total - Typescript\nDESCRIPTION: Demonstrates how to search for all Patient resources in an organization and retrieve an estimate of the total number of patients using the `_total` parameter in Typescript. Requires the Medplum SDK and a configured Medplum client.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/search/advanced-search-parameters.mdx#_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\n{ExampleCode}\n```\n\n----------------------------------------\n\nTITLE: Wrapping Application with HealthGorillaLabOrderProvider in TSX\nDESCRIPTION: This snippet demonstrates wrapping an application with the `HealthGorillaLabOrderProvider` component. This provider is essential for state management and provides the necessary context for the `useHealthGorillaLabOrder` hook to function correctly within the `OrderPage` component.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/integration/health-gorilla/sending-orders.md#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nfunction OrderPage() {\n  return (\n    <HealthGorillaLabOrderProvider>\n      <OrderForm />\n    </HealthGorillaLabOrderProvider>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Inherited FHIR Procedure Elements\nDESCRIPTION: This snippet displays the inherited elements of the FHIR Procedure resource schema using a custom React component called `ResourcePropertiesTable`. It filters properties to only include those inherited from the base Resource definition. The schema data is sourced from a JSON file.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/api/fhir/resources/procedure.mdx#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\n<ResourcePropertiesTable properties={definition.properties.filter((p) => p.inherited && p.base.includes('Resource'))} />\n```\n\n----------------------------------------\n\nTITLE: Medplum PUT Request\nDESCRIPTION: Executes a `medplum put` request to update data in the Medplum API. Replace `<url>` with the resource URL, and `<body>` with the updated resource data.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/cli/index.md#_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nmedplum put <url> <body>\n```\n\n----------------------------------------\n\nTITLE: PHQ-4 Questionnaire Resource in JSON\nDESCRIPTION: This JSON code represents the complete PHQ-4 (Patient Health Questionnaire-4) as a FHIR Questionnaire resource.  It defines questions related to anxiety and depression, using LOINC codes for standardized representation. The resource includes metadata like 'resourceType', 'title', 'status', and specifies the structure and content of the questionnaire. It leverages LOINC codes for the 'code' and 'answerOption' properties to ensure interoperability.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/careplans/loinc.mdx#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"resourceType\": \"Questionnaire\",\n  \"title\": \"Patient Health Questionnaire 4 item (PHQ-4) [Reported]\",\n  \"status\": \"draft\",\n  \"code\": [\n    {\n      \"code\": \"69724-3\",\n      \"display\": \"Patient Health Questionnaire 4 item (PHQ-4) [Reported]\",\n      \"system\": \"http://loinc.org\"\n    }\n  ],\n  \"meta\": {\n    \"profile\": [\"http://hl7.org/fhir/uv/sdc/StructureDefinition/sdc-questionnaire|2.7\"]\n  },\n  \"item\": [\n    {\n      \"type\": \"choice\",\n      \"code\": [\n        {\n          \"code\": \"69725-0\",\n          \"display\": \"Feeling nervous, anxious or on edge\"\n        }\n      ],\n      \"required\": false,\n      \"linkId\": \"/69725-0\",\n      \"text\": \"Feeling nervous, anxious or on edge\",\n      \"answerOption\": [\n        {\n          \"valueCoding\": {\n            // highlight-start\n            \"code\": \"LA6568-5\",\n            \"display\": \"Not at all\",\n            \"system\": \"http://loinc.org\"\n            // highlight-end\n          }\n        },\n        {\n          \"valueCoding\": {\n            // highlight-start\n            \"code\": \"LA6569-3\",\n            \"display\": \"Several days\",\n            \"system\": \"http://loinc.org\"\n            // highlight-end\n          }\n        },\n        {\n          \"valueCoding\": {\n            // highlight-start\n            \"code\": \"LA6570-1\",\n            \"display\": \"More than half the days\",\n            \"system\": \"http://loinc.org\"\n            // highlight-end\n          }\n        },\n        {\n          \"valueCoding\": {\n            // highlight-start\n            \"code\": \"LA6571-9\",\n            \"display\": \"Nearly every day\",\n            \"system\": \"http://loinc.org\"\n            // highlight-end\n          }\n        }\n      ]\n    },\n    {\n      \"type\": \"choice\",\n      \"code\": [\n        {\n          \"code\": \"68509-9\",\n          \"display\": \"Over the past 2 weeks have you not been able to stop or control worrying\",\n          \"system\": \"http://loinc.org\"\n        }\n      ],\n      \"required\": false,\n      \"linkId\": \"/68509-9\",\n      \"text\": \"Over the past 2 weeks have you not been able to stop or control worrying\",\n      \"answerOption\": [\n        {\n          \"valueCoding\": {\n            // highlight-start\n            \"code\": \"LA6568-5\",\n            \"display\": \"Not at all\",\n            \"system\": \"http://loinc.org\"\n            // highlight-end\n          }\n        },\n        {\n          \"valueCoding\": {\n            // highlight-start\n            \"code\": \"LA6569-3\",\n            \"display\": \"Several days\",\n            \"system\": \"http://loinc.org\"\n            // highlight-end\n          }\n        },\n        {\n          \"valueCoding\": {\n            // highlight-start\n            \"code\": \"LA18938-3\",\n            \"display\": \"More days than not\",\n            \"system\": \"http://loinc.org\"\n            // highlight-end\n          }\n        },\n        {\n          \"valueCoding\": {\n            // highlight-start\n            \"code\": \"LA6571-9\",\n            \"display\": \"Nearly every day\",\n            \"system\": \"http://loinc.org\"\n            // highlight-end\n          }\n        }\n      ]\n    },\n    {\n      \"type\": \"choice\",\n      \"code\": [\n        {\n          \"code\": \"44250-9\",\n          \"display\": \"Little interest or pleasure in doing things\",\n          \"system\": \"http://loinc.org\"\n        }\n      ],\n      \"required\": false,\n      \"linkId\": \"/44250-9\",\n      \"text\": \"Little interest or pleasure in doing things\",\n      \"answerOption\": [\n        {\n          \"valueCoding\": {\n            // highlight-start\n            \"code\": \"LA6568-5\",\n            \"display\": \"Not at all\",\n            \"system\": \"http://loinc.org\"\n            // highlight-end\n          }\n        },\n        {\n          \"valueCoding\": {\n            // highlight-start\n            \"code\": \"LA6569-3\",\n            \"display\": \"Several days\",\n            \"system\": \"http://loinc.org\"\n            // highlight-end\n          }\n        },\n        {\n          \"valueCoding\": {\n            // highlight-start\n            \"code\": \"LA6570-1\",\n            \"display\": \"More than half the days\",\n            \"system\": \"http://loinc.org\"\n            // highlight-end\n          }\n        },\n        {\n          \"valueCoding\": {\n            // highlight-start\n            \"code\": \"LA6571-9\",\n            \"display\": \"Nearly every day\",\n            \"system\": \"http://loinc.org\"\n            // highlight-end\n          }\n        }\n      ]\n    },\n    {\n      \"type\": \"choice\",\n      \"code\": [\n        {\n          \"code\": \"44255-8\",\n          \"display\": \"Feeling down, depressed, or hopeless\",\n          \"system\": \"http://loinc.org\"\n        }\n      ],\n      \"required\": false,\n      \"linkId\": \"/44255-8\",\n      \"text\": \"Feeling down, depressed, or hopeless\",\n      \"answerOption\": [\n        {\n          \"valueCoding\": {\n            // highlight-start\n            \"code\": \"LA6568-5\",\n            \"display\": \"Not at all\",\n            \"system\": \"http://loinc.org\"\n            // highlight-end\n          }\n        },\n        {\n          \"valueCoding\": {\n            // highlight-start\n            \"code\": \"LA6569-3\",\n            \"display\": \"Several days\",\n            \"system\": \"http://loinc.org\"\n            // highlight-end\n          }\n        },\n        {\n          \"valueCoding\": {\n            // highlight-start\n            \"code\": \"LA6570-1\",\n            \"display\": \"More than half the days\",\n            \"system\": \"http://loinc.org\"\n            // highlight-end\n          }\n        },\n        {\n          \"valueCoding\": {\n            // highlight-start\n            \"code\": \"LA6571-9\",\n            \"display\": \"Nearly every day\",\n            \"system\": \"http://loinc.org\"\n            // highlight-end\n          }\n        }\n      ]\n    },\n    {\n      \"type\": \"decimal\",\n      \"code\": [\n        {\n          \"code\": \"70272-0\",\n          \"display\": \"Patient health questionnaire 4 item total score\",\n          \"system\": \"http://loinc.org\"\n        }\n      ],\n      \"required\": false,\n      \"linkId\": \"/70272-0\",\n      \"text\": \"Patient health questionnaire 4 item total score\",\n      \"item\": [\n        {\n          \"text\": \"The PHQ-4 is different -- although the total score (which ranges from 0-12) can be used, it is really a combination of the PHQ-2 depression scale (described above) and the GAD-2 anxiety scale (from the parent GAD-7 anxiety scale).  Thus, another way to look at it is a 0-6 depression subscale and a 0-6 anxiety scale. It is clearly different than either the PHQ-9 or the PHQ-2\",\n          \"type\": \"display\",\n          \"linkId\": \"/70272-0-help\"\n        }\n      ]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Install Node.js\nDESCRIPTION: Installs Node.js on the Ubuntu system. Node.js is the runtime environment for the Medplum server and app.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/self-hosting/install-from-scratch.md#_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt-get install nodejs\n```\n\n----------------------------------------\n\nTITLE: cdk.json Configuration File\nDESCRIPTION: This is the configuration file `cdk.json` which specifies the entry point for the CDK application. It tells CDK to use the Medplum CDK's entry point.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/self-hosting/install-on-aws.md#_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"app\": \"node node_modules/@medplum/cdk/dist/cjs/index.cjs\"\n}\n```\n\n----------------------------------------\n\nTITLE: Updating RDS Cluster Parameters in CDK Config (JS)\nDESCRIPTION: This code shows how to update the RDS cluster parameters in the CDK config file. The `rdsClusterParameters` object contains the desired Postgres parameters, such as `statement_timeout`, `default_transaction_isolation`, and `auto_explain` settings. This configuration triggers database restarts when deployed.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/self-hosting/rds-parameters.md#_snippet_3\n\nLANGUAGE: js\nCODE:\n```\n{\n  // ...\n\n  \"rdsClusterParameters\": {\n    \"statement_timeout\": \"60000\",\n    \"default_transaction_isolation\": \"REPEATABLE READ\",\n    \"shared_preload_libraries\": \"pg_stat_statements,auto_explain\",\n    \"auto_explain.log_analyze\": \"true\",\n    \"auto_explain.log_buffers\": \"true\",\n    \"auto_explain.log_min_duration\": \"250\",\n    \"auto_explain.sample_rate\": \"0.1\"\n  },\n\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Searching by Compartment using _compartment - CLI\nDESCRIPTION: Demonstrates searching for all Communication resources within a specific Patient compartment using the non-standard `_compartment` parameter in the command-line interface (CLI). This finds all communications related to a given patient. Requires the Medplum CLI to be installed and configured.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/search/advanced-search-parameters.mdx#_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\n{ExampleCode}\n```\n\n----------------------------------------\n\nTITLE: DeviceDefinition JSON Schema Definition\nDESCRIPTION: This JSON schema defines the structure and properties of the DeviceDefinition resource, used for representing the characteristics and capabilities of a medical device. It contains properties that are either inherited from the base 'Resource' type or specific to DeviceDefinition.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/api/fhir/resources/devicedefinition.mdx#_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\ndefinition.properties.filter((p) => !(p.inherited && p.base.includes('Resource')))\n```\n\n----------------------------------------\n\nTITLE: Setting Medplum Base URL in .env File\nDESCRIPTION: This snippet presents how the `MEDPLUM_BASE_URL` variable is set within a `.env` file when self-hosting a Medplum instance.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/bots/bots-in-production.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n# .env\nMEDPLUM_BASE_URL=https://api.example.com/\n```\n\n----------------------------------------\n\nTITLE: Executing Medplum Commands via NPX\nDESCRIPTION: Executes a Medplum command when the CLI is installed as a project dependency.  Uses `npx` to run the command from the project's `node_modules` directory. Replace `<command>` and `<args>` with the appropriate values.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/cli/index.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpx medplum <command> <args>\n```\n\n----------------------------------------\n\nTITLE: Log Level Output Example\nDESCRIPTION: This snippet shows example log output that indicates the log level is set to DEBUG. This occurs after modifying the `agent.properties` file and restarting the Windows Service. It requires the log level to be configured.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/agent/troubleshooting.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n2024-10-29 16:52:56 [DEBUG] stdout: \"{\\\"level\\\":\\\"DEBUG\\\", ...\"\n```\n\n----------------------------------------\n\nTITLE: FHIR Subscription with Retry Policy\nDESCRIPTION: This JSON snippet shows a FHIR Subscription with an extension for configuring a retry policy. It uses the 'subscription-max-attempts' extension and sets the valueInteger to 3. This indicates that the subscription operation will be attempted up to 3 times if it fails.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/subscriptions/subscription-extensions.md#_snippet_10\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"resourceType\": \"Subscription\",\n  \"reason\": \"test\",\n  \"status\": \"active\",\n  \"criteria\": \"DiagnosticReport?status=completed\",\n  \"channel\": {\n    \"type\": \"rest-hook\",\n    \"endpoint\": \"https://example.com/webhook\"\n  },\n  \"extension\": [\n    {\n      \"url\": \"https://medplum.com/fhir/StructureDefinition/subscription-max-attempts\",\n      \"valueInteger\": 3\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Authorization Code Grant with PKCE Sample Response\nDESCRIPTION: Sample HTTP response (302 Found) from the `/oauth2/authorize` endpoint after a successful authorization code grant with PKCE. The response includes the `Location` header with the `redirect_uri`, authorization `code`, and `state` in the query string.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/api/oauth/authorize.md#_snippet_3\n\nLANGUAGE: HTTP\nCODE:\n```\nHTTP/1.1 302 Found\nLocation: https://YOUR_APP/redirect_uri?code=AUTHORIZATION_CODE&state=STATE\n```\n\n----------------------------------------\n\nTITLE: Running the Medplum Hello World application\nDESCRIPTION: This command starts the Medplum Hello World application in development mode using npm. It typically uses a script defined in the `package.json` file, often configured to use a development server that provides features like hot reloading.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/tutorials/medplum-hello-world.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Create a New Project (CLI)\nDESCRIPTION: This code snippet demonstrates how to create a new project using the Medplum CLI. You must have the Medplum CLI installed and configured with appropriate credentials.  The `createProjectCli` block from the ExampleCode file is used.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/auth/user-management-guide/user-management-guide.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmedplum create Project --name \"My New Project\"\n```\n\n----------------------------------------\n\nTITLE: Start OpenTelemetry Collector with Docker (Mac/Linux)\nDESCRIPTION: This command starts a default OpenTelemetry Collector using Docker. It maps ports 4317 and 4318 for gRPC and HTTP protocols, respectively, and mounts a collector configuration file from the current directory. This is necessary for local testing and development of OpenTelemetry.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/self-hosting/opentelemetry.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -p 4317:4317 -p 4318:4318 --rm -v $(pwd)/collector-config.yaml:/etc/otelcol/config.yaml otel/opentelemetry-collector\n```\n\n----------------------------------------\n\nTITLE: Coverage Resource Example in FHIR\nDESCRIPTION: This is an example of a FHIR Coverage resource, demonstrating how to represent insurance information. It is part of the Medplum Candid Demo Bot, which submits insurance information to Candid Health for reimbursement. This snippet demonstrates how to represent insurance coverage information following US Core guidelines.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/billing/patient-insurance.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n{Example}\n```\n\n----------------------------------------\n\nTITLE: Copying environment variables\nDESCRIPTION: Copies the default environment variables file to a new `.env` file, allowing for customization of the application's configuration.\nSOURCE: https://github.com/medplum/medplum/blob/main/examples/medplum-mso-demo/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncp .env.defaults .env\n```\n\n----------------------------------------\n\nTITLE: Create a New Project (cURL)\nDESCRIPTION: This code snippet demonstrates how to create a new project using cURL to interact with the Medplum API.  It requires a valid access token and the Medplum base URL. The `createProjectCurl` block from the ExampleCode file is used.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/auth/user-management-guide/user-management-guide.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST \\\n  https://api.medplum.com/fhir/R4/Project \\\n  -H 'Authorization: Bearer YOUR_ACCESS_TOKEN' \\\n  -H 'Content-Type: application/fhir+json' \\\n  -d '{\n    \"resourceType\": \"Project\",\n    \"name\": \"My New Project\"\n  }'\n```\n\n----------------------------------------\n\nTITLE: Search Medplum User by Email\nDESCRIPTION: Searches for a Medplum user by email address using the `medplum get User?email=fred@example.com` command.  Requires super admin privileges and a valid login session.  Returns a FHIR Bundle resource containing matching User resources.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/self-hosting/super-admin-cli.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nmedplum get User?email=fred@example.com\n```\n\n----------------------------------------\n\nTITLE: Healthcheck Artillery Configuration\nDESCRIPTION: Configures an Artillery load test for the /healthcheck endpoint. It defines the target URL, test phases (warm-up and ramp-up), and a scenario involving repeated GET requests to the /healthcheck endpoint.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/self-hosting/load-testing.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# healthcheck.yml\n\nconfig:\n  target: 'https://api.staging.medplum.com'\n  phases:\n    - duration: 10\n      arrivalRate: 10\n      name: Warm up\n    - duration: 300\n      arrivalRate: 10\n      rampTo: 100\n      name: Ramp up load\n\nscenarios:\n  - name: 'Healthcheck'\n    flow:\n      - loop:\n          - get:\n              url: '/healthcheck'\n        count: 10\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies with npm\nDESCRIPTION: This command uses npm (Node Package Manager) to install all the dependencies listed in the `package.json` file for the Medplum Hello World project. These dependencies are necessary for the application to run correctly and include libraries, frameworks, and tools required by the project.\nSOURCE: https://github.com/medplum/medplum/blob/main/examples/medplum-hello-world/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Getting Total Count in Medplum (cURL)\nDESCRIPTION: This cURL command demonstrates how to include the total count of matching resources in the search response using the `_total` parameter. It sets the `_total` parameter to `accurate`.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/search/paginated-search.mdx#_snippet_3\n\nLANGUAGE: cURL\nCODE:\n```\ncurl --request GET \\\n  --url 'https://api.medplum.com/fhir/R4/Patient?name=smith&_total=accurate' \\\n  --header 'Authorization: Bearer YOUR_ACCESS_TOKEN'\n```\n\n----------------------------------------\n\nTITLE: Upgrade Medplum Server\nDESCRIPTION: This command uses the Medplum CLI to upgrade the Medplum server to the latest version. The `[env name]` parameter specifies the environment name.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/self-hosting/install-on-aws.md#_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\nnpx medplum aws update-server [env name]\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpx medplum aws update-server demo\n```\n\n----------------------------------------\n\nTITLE: ClinicalImpression Search Parameters Table\nDESCRIPTION: Displays a table of search parameters for the ClinicalImpression resource. It utilizes the `SearchParamsTable` component and retrieves search parameters from the `clinicalimpression.json` definition.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/api/fhir/resources/clinicalimpression.mdx#_snippet_1\n\nLANGUAGE: Markdown\nCODE:\n```\n<SearchParamsTable searchParams={definition.searchParameters} />\n```\n\n----------------------------------------\n\nTITLE: Plan Terraform Deployment\nDESCRIPTION: Generates and reviews an execution plan. This allows the user to preview the changes that Terraform will make to the Azure infrastructure.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/self-hosting/install-on-azure.md#_snippet_3\n\nLANGUAGE: Azure CLI\nCODE:\n```\nterraform plan\n```\n\n----------------------------------------\n\nTITLE: Install dependencies (npm)\nDESCRIPTION: Installs the necessary dependencies for the project using npm. This command reads the package.json file and downloads all required packages, including React, Vite, TypeScript, and Medplum-related libraries, enabling the application to run.\nSOURCE: https://github.com/medplum/medplum/blob/main/examples/medplum-eligibility-demo/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Invite User\nDESCRIPTION: Invites a user to a project via the `/invite` endpoint.  This endpoint creates a user, profile resource, and ProjectMembership. Project admin privileges are required. The output is the created ProjectMembership resource.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/auth/user-management-guide/user-management-guide.md#_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\n{ExampleCode}\n```\n\n----------------------------------------\n\nTITLE: Apply Terraform Configuration\nDESCRIPTION: This command applies the Terraform configuration. This is necessary after updating the master_authorized_networks or other Terraform variables.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/self-hosting/install-on-gcp.md#_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nterraform apply\n```\n\n----------------------------------------\n\nTITLE: Run Development Server\nDESCRIPTION: This command starts the Next.js development server for the Medplum NextAuth demo application. This command will usually watch for changes and automatically reload the server when code is updated.\nSOURCE: https://github.com/medplum/medplum/blob/main/examples/medplum-nextauth-demo/README.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Medplum Sign In Page\nDESCRIPTION: Demonstrates a sign-in page using the `useMedplumContext` hook. It checks if a user is signed in and displays either user information or a sign-in form.  Includes a sign-out button that calls `auth.medplum.signOut()`.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/react/README.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport function SignInPage() {\n  const auth = useMedplumContext();\n  return (\n    <Document>\n      {auth.user ? (\n        <div>\n          <pre>User: {JSON.stringify(auth.user)}</pre>\n          <Button onClick={() => auth.medplum.signOut().then(() => alert('Signed out!'))}>Sign out</Button>\n        </div>\n      ) : (\n        <SignInForm onSuccess={() => alert('Signed in!')} />\n      )}\n    </Document>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: ObservationDefinition for Chloride (TS)\nDESCRIPTION: Defines an ObservationDefinition resource for Chloride. The resource details how Chloride levels are represented and interpreted.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/careplans/diagnostic-catalog/diagnostic-catalog.mdx#_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\n{ExampleCode}\n```\n\n----------------------------------------\n\nTITLE: Execute Bot by Identifier (POST) - cURL\nDESCRIPTION: This snippet shows how to execute a Medplum Bot by its Identifier using cURL. It sends a POST request to the `$execute` endpoint with the identifier as a query parameter.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/api/fhir/operations/bot-execute.mdx#_snippet_8\n\nLANGUAGE: cURL\nCODE:\n```\ncurl 'https://api.medplum.com/fhir/R4/Bot/$execute?identifier=https://example.com/bots|1234' \\\n  -X POST \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $MY_ACCESS_TOKEN\" \\\n  -d '{\"foo\":\"bar\"}'\n```\n\n----------------------------------------\n\nTITLE: Token Exchange with Client Credentials - Response\nDESCRIPTION: Sample response for a successful token exchange with client credentials. The response contains `access_token`, `token_type`, and `expires_in` in JSON format. The `Content-Type` header is set to `application/json`.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/api/oauth/token.md#_snippet_4\n\nLANGUAGE: JSON\nCODE:\n```\nHTTP/1.1 200 OK\nContent-Type: application/json\n\n{\n    \"access_token\":\"eyJz9sdfsdfsdfsd\",\n    \"token_type\":\"Bearer\",\n    \"expires_in\":3600\n}\n```\n\n----------------------------------------\n\nTITLE: Get GKE Cluster Credentials\nDESCRIPTION: This command retrieves the credentials for your Google Kubernetes Engine (GKE) cluster. Replace 'your-region' and 'your-project-id' with the actual values for your cluster.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/self-hosting/install-on-gcp.md#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ngcloud container clusters get-credentials medplum-gke --region your-region --project your-project-id\n```\n\n----------------------------------------\n\nTITLE: Running the Medplum OAuth Demo\nDESCRIPTION: This command starts the development server for the Medplum OAuth demo. It uses npm to execute the 'dev' script defined in the package.json file. This script typically handles tasks such as bundling, transpiling, and starting a local development server.\nSOURCE: https://github.com/medplum/medplum/blob/main/examples/medplum-client-external-idp-demo/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Configure Service Account Values (Helm)\nDESCRIPTION: This snippet configures the service account values in the `values.yaml` file for the Helm chart. Replace `[MY_GCP_SERVICE_ACCOUNT]` with the actual Google Cloud Platform service account.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/self-hosting/install-on-gcp.md#_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\nserviceAccount:\n  annotations:\n    iam.gke.io/gcp-service-account: [MY_GCP_SERVICE_ACCOUNT] # Your Google Cloud Platform service account e.i: medplum-server@[MY_PROJECT_ID].iam.gserviceaccount.com\n```\n\n----------------------------------------\n\nTITLE: Install Playwright with npm\nDESCRIPTION: This command installs Playwright and its required Chromium dependency in the local environment. It needs to be executed before running any tests to ensure Playwright is correctly configured.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/e2e/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm run playwright:install\n```\n\n----------------------------------------\n\nTITLE: Searching Exclusive Range FHIR\nDESCRIPTION: This snippet demonstrates searching for FHIR resources within an exclusive range using an OR search.  The code example shows how to construct the search parameters in TypeScript.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/search/basic-search.mdx#_snippet_19\n\nLANGUAGE: ts\nCODE:\n```\n{ExampleCode}\n```\n\n----------------------------------------\n\nTITLE: Nginx Site Configuration (App)\nDESCRIPTION: Defines the Nginx configuration for the Medplum app. It configures Nginx to listen on ports 80 and 443, redirect HTTP to HTTPS, and proxy requests to the Vite preview server.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/self-hosting/install-from-scratch.md#_snippet_23\n\nLANGUAGE: nginx\nCODE:\n```\n# /etc/nginx/sites-available/app.example.com\nserver {\n    listen 80;\n    listen [::]:80;\n    server_name app.example.com;\n\n    # Redirect HTTP to HTTPS\n    location / {\n        return 301 https://$server_name$request_uri;\n    }\n}\n\nserver {\n    listen 443 ssl;\n    listen [::]:443 ssl;\n    server_name app.example.com;\n\n    ssl_certificate /etc/letsencrypt/live/app.example.com/fullchain.pem;\n    ssl_certificate_key /etc/letsencrypt/live/app.example.com/privkey.pem;\n    include /etc/letsencrypt/options-ssl-nginx.conf;\n    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem;\n\n    location / {\n        proxy_pass http://localhost:4173;\n        proxy_http_version 1.1;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection 'upgrade';\n        proxy_set_header Host $host;\n        proxy_cache_bypass $http_upgrade;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Error Response Example for $translate\nDESCRIPTION: This is an example of an error response when ambiguous input parameters are provided to the `$translate` operation.  Specifically, it shows the response when both `code` and `coding` are provided, leading to an \"Ambiguous input\" error. The response is a FHIR OperationOutcome resource with an `issue` indicating the error's severity, code, and details.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/api/fhir/operations/conceptmap-translate.md#_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"resourceType\": \"OperationOutcome\",\n  \"issue\": [\n    {\n      \"severity\": \"error\",\n      \"code\": \"invalid\",\n      \"details\": { \"text\": \"Ambiguous input: multiple source codings provided\" }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Get Public IP Address\nDESCRIPTION: This command retrieves your machine's public IP address using `curl ifconfig.me`.  This IP address is needed to update the master_authorized_networks in Terraform.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/self-hosting/install-on-gcp.md#_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ncurl ifconfig.me\n```\n\n----------------------------------------\n\nTITLE: Add Secret Data Version to GCP Secret\nDESCRIPTION: Adds a new version to the specified secret in Google Cloud Secret Manager, using the data from secret_data.json to configure the Medplum application.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/self-hosting/install-on-gcp.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ngcloud secrets versions add config-secret --data-file=secret_data.json\n```\n\n----------------------------------------\n\nTITLE: Create GCP Secret Manager Secret\nDESCRIPTION: Creates a new secret in Google Cloud Secret Manager with automatic replication, which will be used to store the Medplum application configuration.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/self-hosting/install-on-gcp.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ngcloud secrets create config-secret --replication-policy=\"automatic\"\n```\n\n----------------------------------------\n\nTITLE: Install dependencies\nDESCRIPTION: Installs the npm dependencies required for the Medplum Task Demo App. This command retrieves and installs all packages listed in the `package.json` file.\nSOURCE: https://github.com/medplum/medplum/blob/main/examples/medplum-task-demo/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Installing Medplum Definitions with npm\nDESCRIPTION: This code snippet shows how to install the `@medplum/definitions` package using npm. This command adds the Medplum definitions as a dependency to the current project.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/definitions/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @medplum/definitions\n```\n\n----------------------------------------\n\nTITLE: CDK Synth Command\nDESCRIPTION: This command synthesizes the AWS CDK app, converting the CDK code into CloudFormation templates. It helps catch logical errors in the definition of AWS resources. The configuration file is specified using the `-c config` parameter.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/self-hosting/install-on-aws.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nnpx cdk synth -c config=medplum.demo.config.json\n```\n\n----------------------------------------\n\nTITLE: Performing an Upsert Operation in TypeScript\nDESCRIPTION: Illustrates how to perform an 'upsert' operation, which updates a resource if it exists or creates it if it doesn't. This requires providing the current version of the resource and a search query, similar to createResourceIfNoneExists(). It shows the Typescript implementation.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/fhir-datastore/working-with-fhir.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { MedplumClient, Patient } from '@medplum/core';\n\nasync function upsertPatient(medplum: MedplumClient, patient: Patient): Promise<Patient> {\n  // Check if the patient already exists\n  const bundle = await medplum.searchResources('Patient', {\n    identifier: patient.identifier?.[0]?.value\n  });\n\n  if (bundle.entry?.length) {\n    // Patient exists, so update it\n    return await medplum.updateResource(patient);\n  } else {\n    // Patient does not exist, so create it\n    return await medplum.createResource(patient);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configure Medplum CDK JSON with ADOT Collector\nDESCRIPTION: This JSON snippet shows how to configure the Medplum CDK JSON config file to include the AWS OpenTelemetry (ADOT) collector. It sets the `OTLP_TRACES_ENDPOINT` and `OTLP_METRICS_ENDPOINT` environment variables and adds an `additionalContainers` entry to deploy the `amazon/aws-otel-collector` image with a specific configuration.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/self-hosting/opentelemetry.md#_snippet_3\n\nLANGUAGE: js\nCODE:\n```\n{\n  \"name\": \"staging\",\n  \"region\": \"us-east-1\",\n  \"stackName\": \"MedplumStagingStack\",\n  // ...\n  \"environment\": {\n    \"OTLP_TRACES_ENDPOINT\": \"http://localhost:4318/v1/traces\",\n    \"OTLP_METRICS_ENDPOINT\": \"http://localhost:4318/v1/metrics\"\n  },\n  // ...\n  \"additionalContainers\": [\n    {\n      \"name\": \"aws-otel-collector\",\n      \"image\": \"amazon/aws-otel-collector:latest\",\n      \"command\": [\"--config=/etc/ecs/ecs-default-config.yaml\"]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Searching Exclusive Range cURL\nDESCRIPTION: This snippet demonstrates searching for FHIR resources within an exclusive range using an OR search with cURL.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/search/basic-search.mdx#_snippet_20\n\nLANGUAGE: bash\nCODE:\n```\n{ExampleCode}\n```\n\n----------------------------------------\n\nTITLE: Install Nginx and Certbot\nDESCRIPTION: Installs Nginx web server and Certbot with the Nginx plugin, used for automatically obtaining and installing SSL certificates from Let's Encrypt.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/self-hosting/install-on-ubuntu.md#_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt-get install nginx certbot python3-certbot-nginx\n```\n\n----------------------------------------\n\nTITLE: Searching for Missing Values cURL\nDESCRIPTION: This snippet demonstrates how to search for FHIR resources (e.g., Patients) where a specific parameter (e.g., birthDate) is missing using cURL. It uses the `:missing` search parameter in the URL.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/search/basic-search.mdx#_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\n{ExampleCode}\n```\n\n----------------------------------------\n\nTITLE: Visualization of FHIR Resource Relationships using Mermaid\nDESCRIPTION: This Mermaid diagram illustrates the relationships between FHIR resources involved in capturing clinical notes, specifically for a patient encounter. It visualizes the connection between Appointment, Encounter, Patient, Condition, ClinicalImpression, Observation, and RiskAssessment resources, showing data flow in a patient fall assessment scenario. It helps in understanding how these resources are linked to represent clinical information.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/charting/index.md#_snippet_1\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart BT\n\n app1[<table><thead><tr><th>Appointment</th></tr></thead><tbody><tr><td>Homer Simpson</td></tr><tr><td>Fall Assessment</td><tr></tbody></table>]\n encounter[<table><thead><tr><th>Encounter</th></tr></thead><tbody><tr><td>Homer Simpson</td></tr><tr><td>Fall Assessment Encounter</td></tr></tbody></table>]\n patient[<table><thead><tr><th>Patient</th></tr></thead><tbody><tr><td>Homer Simpson</td></tr></tbody></table>]\n condition[<table><thead><tr><th>Condition</th></tr></thead><tbody><tr><td>Arthritis</td></tr></tbody></table>]\n\n subgraph Results\n   note[<table><thead><tr><th>Clinical Impression</th></tr></thead><tbody><tr><td>Homer Simpson</td></tr><tr><td>Fall Assessment Note</td></tr></tbody></table>]\n   obs1[<table><thead><tr><th>Observation</th></tr></thead><tbody><tr><td>Heart Rate: 150 bpm</td></tr></tbody></table>]\n   ra1[<table><thead><tr><th>RiskAssessment</th></tr></thead><tbody><tr><td>Fall Risk: 80%</td></tr></tbody></table>]\n end\n\n\n encounter -->|appointment| app1\n encounter -->|subject| patient\n encounter -->|reasonReference| condition\n note -->|encounter| encounter\n obs1 -->|encounter| encounter\n ra1 -->|encounter| encounter\n```\n\n----------------------------------------\n\nTITLE: Token Grant without `openid` Scope Sample Request\nDESCRIPTION: Sample HTTP GET request to the `/oauth2/authorize` endpoint for token grant flow without the `openid` scope. The request contains required parameters such as `response_type`, `client_id`, `redirect_uri`, `state`, and `scope=profile`.  Medplum does not return an ID token or refresh token in this case.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/api/oauth/authorize.md#_snippet_4\n\nLANGUAGE: HTTP\nCODE:\n```\nGET https://api.medplum.com/oauth2/authorize?\n    response_type=token&\n    client_id=492e4ec3-fb66-4b45-b529-599c708ec530&\n    redirect_uri=https://YOUR_APP/redirect_uri&\n    state=STATE&\n    scope=profile\n```\n\n----------------------------------------\n\nTITLE: Defining Login Form JSX\nDESCRIPTION: This JSX code defines a simple email and password login form using React Native's TextInput and Button components. It includes state variables for email and password, and an onPress handler for the sign-in button.\nSOURCE: https://github.com/medplum/medplum/blob/main/examples/medplum-react-native-example/README.md#_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nconst [email, setEmail] = useState('');\nconst [password, setPassword] = useState('');\n\n// ...\n\nreturn (\n  <>\n    <View>\n      <TextInput\n        style={styles.input}\n        placeholder=\"Email\"\n        placeholderTextColor=\"#003f5c\"\n        onChangeText={(email) => setEmail(email)}\n      />\n    </View>\n    <View>\n      <TextInput\n        style={styles.input}\n        placeholder=\"Password\"\n        placeholderTextColor=\"#003f5c\"\n        secureTextEntry={true}\n        onChangeText={(password) => setPassword(password)}\n      />\n    </View>\n    <Button onPress={startLogin} title=\"Sign in\" />\n  </>\n);\n```\n\n----------------------------------------\n\nTITLE: Billing Type Selection Component in TSX\nDESCRIPTION: This code showcases the implementation of a billing type selection component using radio buttons. It allows users to select whether the bill should be directed to the patient or their insurance. The `updateBillingInformation` function is used to update the `billTo` property in the billing information state.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/integration/health-gorilla/sending-orders.md#_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\n<input\n   type=\"radio\"\n   id=\"billToPatient\"\n   name=\"billTo\"\n   value=\"patient\"\n   onChange={(e) => {\n     updateBillingInformation({ billTo: e.target.value });\n   }}\n />\n <label htmlFor=\"billToPatient\">Patient</label>\n\n <input\n   type=\"radio\"\n   id=\"billToInsurance\"\n   name=\"billTo\"\n   value=\"insurance\"\n   onChange={(e) => {\n     updateBillingInformation({ billTo: e.target.value });\n   }}\n />\n <label htmlFor=\"billToInsurance\">Insurance</label>\n```\n\n----------------------------------------\n\nTITLE: Get Medplum User by ID\nDESCRIPTION: Retrieves a specific Medplum user by their ID using the `medplum get User/47394216-2bd5-445a-ad3c-b205bb56a0dc` command.  Requires super admin privileges and a valid login session. Returns a FHIR User resource.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/self-hosting/super-admin-cli.md#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nmedplum get User/47394216-2bd5-445a-ad3c-b205bb56a0dc\n```\n\n----------------------------------------\n\nTITLE: Nested Filters Example in Medplum (Typescript)\nDESCRIPTION: Demonstrates nested filters with parentheses and logical operators in Medplum (Typescript).\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/search/filter-search-parameter.mdx#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n{ExampleCode}\n```\n\n----------------------------------------\n\nTITLE: Patient Contact Information\nDESCRIPTION: This code snippet demonstrates how to store family member contact information directly within the Patient resource using the `Patient.contact` property. It extracts specific fields like resourceType, id, name, and contact from a Patient object (LisaSimpson) and formats them as a JSON string. This approach is suitable when family members do not participate in clinical/billing activities and patients rarely share family members.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/fhir-datastore/family-relationships/family-relationships.mdx#_snippet_0\n\nLANGUAGE: js\nCODE:\n```\n  {`${JSON.stringify(\n    (({ resourceType, id, name, contact }) => {\n      return { resourceType, id, name, contact };\n    })(LisaSimpson),\n    null,\n    2\n  )}\n  `}\n```\n\n----------------------------------------\n\nTITLE: Deploy Bot with CLI\nDESCRIPTION: This code snippet demonstrates how to deploy a Medplum Bot using the Medplum CLI. It likely involves a `medplum` command with appropriate flags to specify the Bot ID, filename, and code. The `ExampleCode` variable is assumed to contain the actual code example.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/api/fhir/operations/bot-deploy.mdx#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n{ExampleCode}\n```\n\n----------------------------------------\n\nTITLE: Test Nginx Configuration\nDESCRIPTION: Tests the Nginx configuration for syntax errors. This ensures that the configuration is valid before reloading Nginx.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/self-hosting/install-from-scratch.md#_snippet_27\n\nLANGUAGE: bash\nCODE:\n```\nsudo nginx -t\n```\n\n----------------------------------------\n\nTITLE: Install Node.js\nDESCRIPTION: Installs Node.js using apt-get.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/self-hosting/install-on-ubuntu.md#_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt-get install nodejs\n```\n\n----------------------------------------\n\nTITLE: Resetting package-lock.json after Accidental Changes (Bash)\nDESCRIPTION: If accidental changes were made to `package-lock.json` by running `npm install` in a package directory, this command resets the file to the version in Git and then runs the reinstall script to ensure a consistent state. This avoids introducing unintended dependency updates.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/contributing/package-json.md#_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\ngit checkout -- package-lock.json\n./scripts/reinstall.sh\n```\n\n----------------------------------------\n\nTITLE: Terraform Destroy\nDESCRIPTION: Destroys all resources created by Terraform. This command should be used with caution as it will remove all infrastructure components, including the AKS cluster and static IP addresses.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/self-hosting/install-on-azure.md#_snippet_18\n\nLANGUAGE: Shell\nCODE:\n```\nterraform destroy\n```\n\n----------------------------------------\n\nTITLE: FHIR Subscription Object Example (Basic)\nDESCRIPTION: This is a basic example of a FHIR Subscription object in JSON format. It defines the resource type, reason, status, criteria, and channel information for the subscription. The channel type is set to 'rest-hook' with a specified endpoint.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/subscriptions/subscription-extensions.md#_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"resourceType\": \"Subscription\",\n  \"reason\": \"test\",\n  \"status\": \"active\",\n  \"criteria\": \"Patient\",\n  \"channel\": {\n    \"type\": \"rest-hook\",\n    \"endpoint\": \"https://example.com/webhook\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Trace ID to Medplum GET Request (Typescript)\nDESCRIPTION: This code snippet demonstrates how to add a custom trace ID to a Medplum GET request using the Typescript SDK. The `X-TRACE-ID` header is set in the request options to enable log correlation.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/integration/log-streaming.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nawait medplum.readResource('Patient', 'homer-simpson', {\n  headers: {\n    'X-TRACE-ID': 'MY-TRACE-ID',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Invite User with Scope Parameter - Typescript\nDESCRIPTION: This code snippet demonstrates how to invite a user with a specified scope ('project' or 'server') using the Medplum API's `/admin/projects/:projectId/invite` endpoint.  The `scope` parameter controls whether the user is scoped to a single project or the entire server. The endpoint requires a projectId.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/auth/project-vs-server-scoped-users.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst response = await medplum.post('/admin/projects/:projectId/invite', {\n  resourceType: 'Practitioner',\n  firstName: 'Test',\n  lastName: 'User',\n  email: 'test@example.com',\n  scope: 'project' // or 'server'\n})\n```\n\n----------------------------------------\n\nTITLE: Get Status of Active Agents\nDESCRIPTION: This command retrieves the status of all agents with an 'active' status by using the `status` search parameter. It calls the `$bulk-status` operation with the `status` parameter set to 'active'.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/agent/bulk-status.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nmedplum get 'Agent/$bulk-status?status=active'\n```\n\n----------------------------------------\n\nTITLE: Multiple Subscriptions with different Extensions (TSX)\nDESCRIPTION: This example demonstrates how to create multiple subscriptions with different extensions to listen for different types of interactions (e.g., 'create' and 'update').  Each subscription has its own `subscriptionProps` and callback function, allowing you to handle different event types separately.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/react/use-subscription.md#_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nconst createOnlyOptions = {\n  subscriptionProps: {\n    extension: [\n      {\n        url: 'https://medplum.com/fhir/StructureDefinition/subscription-supported-interaction',\n        valueCode: 'create',\n      },\n    ],\n  },\n};\n\nconst updateOnlyOptions = {\n  subscriptionProps: {\n    extension: [\n      {\n        url: 'https://medplum.com/fhir/StructureDefinition/subscription-supported-interaction',\n        valueCode: 'update',\n      },\n    ],\n  },\n};\n\nfunction MyComponent(): JSX.Element {\n  const [createCount, setCreateCount] = useState(0);\n  const [updateCount, setUpdateCount] = useState(0);\n\n  useSubscription(\n    'Communication?sender=Practitioner/abc-123&recipient=Practitioner/me-456',\n    (_bundle) => {\n      console.log('Received a new message from Practitioner/abc-123!');\n      setCreateCount((s) => s + 1);\n    },\n    createOnlyOptions\n  );\n\n  useSubscription(\n    'Communication?sender=Practitioner/abc-123&recipient=Practitioner/me-456',\n    (_bundle) => {\n      console.log('Received an update to message from Practitioner/abc-123!');\n      setUpdateCount((s) => s + 1);\n    },\n    updateOnlyOptions\n  );\n\n  return (\n    <>\n      <div>Create notifications received: {createCount}</div>\n      <div>Update notifications received: {updateCount}</div>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Medplum PATCH Request\nDESCRIPTION: Executes a `medplum patch` request to partially update data in the Medplum API using JSONPatch. Requires the URL and the JSONPatch document.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/cli/index.md#_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\nmedplum patch <url> <body>\n```\n\n----------------------------------------\n\nTITLE: Delete a User with SCIM (curl)\nDESCRIPTION: This command deletes a user from Medplum using the SCIM API. It sends a DELETE request to the `/scim/v2/Users/{id}` endpoint, where `{id}` is the user ID. The `Authorization` header is required and should contain a valid access token. Note that this only deletes the SCIM User resource, not the corresponding FHIR resources.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/api/scim/users.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X DELETE https://api.medplum.com/scim/v2/Users/MY_USER_ID \\\n -H \"Authorization: Bearer MY_ACCESS_TOKEN\"\n```\n\n----------------------------------------\n\nTITLE: Handling Auth Code JavaScript\nDESCRIPTION: This JavaScript function `handleCode` processes the authorization code received from `startLogin`. It calls `medplum.processCode` to exchange the code for an access token and then sets the user's profile.\nSOURCE: https://github.com/medplum/medplum/blob/main/examples/medplum-react-native-example/README.md#_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nfunction handleCode(code) {\n  medplum.processCode(code).then(setProfile);\n}\n```\n\n----------------------------------------\n\nTITLE: Deploy Medplum App to AWS via CLI (bash)\nDESCRIPTION: Deploys the latest version of the Medplum app to a specified Medplum AWS environment using the Medplum CLI.  The command automatically replaces placeholders with configuration settings loaded from a JSON config file associated with the environment.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/app/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Deploy the latest version of the app to your Medplum AWS environment named \"staging\"\nmedplum aws deploy-app staging\n```\n\n----------------------------------------\n\nTITLE: Rendering Resource Properties Table\nDESCRIPTION: Renders a table of resource properties for the AllergyIntolerance resource, filtering out inherited properties from the base Resource. It uses the ResourcePropertiesTable component and the definition.properties array from the imported JSON definition.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/api/fhir/resources/allergyintolerance.mdx#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n<ResourcePropertiesTable\n  properties={definition.properties.filter((p) => !(p.inherited && p.base.includes('Resource')))}\n/>\n```\n\n----------------------------------------\n\nTITLE: Authorization Header Example\nDESCRIPTION: Demonstrates how to pass the access token using the authorization header field for the /oauth2/userinfo endpoint.  The authorization header must be included in the request.  The access token must be a valid token issued by the authorization server.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/api/oauth/userinfo.md#_snippet_0\n\nLANGUAGE: HTTP\nCODE:\n```\nAuthorization: Bearer <ACCESS_TOKEN>\n```\n\n----------------------------------------\n\nTITLE: Searching Threads with Messages using CLI\nDESCRIPTION: This snippet demonstrates how to search for all communication threads and include their messages using the `_revinclude` parameter via the command line interface (CLI) in Medplum.  The `_revinclude` parameter allows you to include resources that reference the search results in the `partOf` field.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/communications/organizing-communications.mdx#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n{ExampleCode}\n```\n\n----------------------------------------\n\nTITLE: Enabling Bots Feature in Medplum Project (JSON)\nDESCRIPTION: This snippet shows how to enable the \"bots\" feature for a specific Medplum project by adding it to the 'features' array within the Project object. This step is a prerequisite for creating, deploying, and executing Medplum Bots.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/blog/2023-04-04-post-install-verification.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"features\": [\n    \"bots\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Resource Properties Table\nDESCRIPTION: This snippet renders a table displaying the properties of the CodeSystem resource, filtering out inherited properties from the base Resource. It uses the ResourcePropertiesTable component, which expects a properties array as input.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/api/fhir/resources/codesystem.mdx#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n<ResourcePropertiesTable\n  properties={definition.properties.filter((p) => !(p.inherited && p.base.includes('Resource')))}\n/>\n```\n\n----------------------------------------\n\nTITLE: Medplum DELETE Request\nDESCRIPTION: Executes a `medplum delete` request to remove data from the Medplum API.  Requires the URL of the resource to delete.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/cli/index.md#_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\nmedplum delete <url>\n```\n\n----------------------------------------\n\nTITLE: Representing Coded Values using CodeableConcept in FHIR\nDESCRIPTION: This code snippet demonstrates how to represent a coded value using the `CodeableConcept` data type in FHIR.  It includes an array of `Coding` objects, each representing a code from a different code system (LOINC and SNOMED CT). The `text` field provides a human-readable representation of the concept.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/terminology/index.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"coding\": [\n    {\n      \"system\": \"http://loinc.org\",\n      \"code\": \"8867-4\",\n      \"display\": \"Heart rate\"\n    },\n    {\n      \"system\": \"http://snomed.info/sct\",\n      \"code\": \"364075005\",\n      \"display\": \"Heart rate (observable entity)\"\n    }\n  ],\n  \"text\": \"Heart rate\"\n}\n```\n\n----------------------------------------\n\nTITLE: Run Artillery Load Test\nDESCRIPTION: Executes an Artillery load test using the specified configuration file (healthcheck.yml).  This command initiates the virtual users defined in the configuration to simulate load on the target server.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/self-hosting/load-testing.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nartillery run healthcheck.yml\n```\n\n----------------------------------------\n\nTITLE: Searching and getting Total Count using _total - CLI\nDESCRIPTION: Demonstrates how to search for all Patient resources in an organization and retrieve an estimate of the total number of patients using the `_total` parameter in the command-line interface (CLI). Requires the Medplum CLI to be installed and configured.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/search/advanced-search-parameters.mdx#_snippet_19\n\nLANGUAGE: bash\nCODE:\n```\n{ExampleCode}\n```\n\n----------------------------------------\n\nTITLE: Rendering Search Parameters Table\nDESCRIPTION: Renders a table of search parameters for the AllergyIntolerance resource. It utilizes the SearchParamsTable component and the definition.searchParameters array from the imported JSON definition to display the available search parameters.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/api/fhir/resources/allergyintolerance.mdx#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\n<SearchParamsTable searchParams={definition.searchParameters} />\n```\n\n----------------------------------------\n\nTITLE: CodeSystem Subsumes Response\nDESCRIPTION: Shows the expected FHIR Parameters resource response when calling the $subsumes operation. The 'outcome' parameter indicates the relationship between the two input codes.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/api/fhir/operations/codesystem-subsumes.md#_snippet_3\n\nLANGUAGE: js\nCODE:\n```\n{\n  \"resourceType\": \"Parameters\",\n  \"parameter\": [\n    { \"name\": \"outcome\", \"valueCode\": \"subsumed-by\" }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Install Artillery CLI\nDESCRIPTION: Installs the Artillery command-line interface globally using npm. This is a prerequisite for running load tests defined in Artillery configuration files.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/self-hosting/load-testing.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install -g artillery@latest\n```\n\n----------------------------------------\n\nTITLE: FHIR Bundle Link Example in TypeScript\nDESCRIPTION: Illustrates the structure of the Bundle.link field in a FHIR Bundle resource. It shows the different relations available for navigating paginated search results, such as 'self', 'first', 'previous', and 'next'. This example demonstrates the URLs used for different pagination offsets.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/search/paginated-search.mdx#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n'link': [\n  {\n    relation: 'self',\n    url: 'https://example.com/Patient?_count=50&_offset=60',\n  },\n  {\n    relation: 'first',\n    url: 'https://example.com/Patient?_count=50&_offset=0',\n  },\n  {\n    relation: 'previous',\n    url: 'https://example.com/Patient?_count=50&_offset=10',\n  },\n  {\n    relation: 'next',\n    url: 'https://example.com/Patient?_count=50&_offset=110',\n  }\n];\n```\n\n----------------------------------------\n\nTITLE: Testing Bot Idempotency in Typescript\nDESCRIPTION: This code snippet illustrates how to test a Bot for idempotency by calling the bot twice and ensuring that no resources are created or updated during the second call.  It utilizes Jest's `spyOn` to monitor client interactions. The test calls the bot twice and verifies no additional resources are created on the second call.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/bots/unit-testing-bots.mdx#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { MockClient } from '@medplum/mock';\nimport { handler } from './my-bot';\n\ntest('Idempotency test', async () => {\n  const medplum = new MockClient();\n  const createResourceSpy = jest.spyOn(medplum, 'createResource');\n  const updateResourceSpy = jest.spyOn(medplum, 'updateResource');\n\n  // First call\n  await handler(medplum, {});\n\n  // Second call\n  await handler(medplum, {});\n\n  expect(createResourceSpy).toHaveBeenCalledTimes(1);\n  expect(updateResourceSpy).toHaveBeenCalledTimes(1);\n});\n```\n\n----------------------------------------\n\nTITLE: Send HL7 Message using Medplum CLI (Bash)\nDESCRIPTION: This command sends a generated example HL7 message to the HL7 listener running on localhost at port 56000 using the Medplum CLI. It emulates a simple HL7 client on the network and prints the reply to the terminal.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/agent/push.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmedplum hl7 send localhost 56000 --generate-example\n```\n\n----------------------------------------\n\nTITLE: Mermaid Diagram for Care Plan Resources\nDESCRIPTION: This mermaid diagram visualizes the relationships between CarePlan, Patient, Goal, and Tasks (which further relate to Questionnaire and Schedule) resources within the Medplum platform. It illustrates how a CarePlan is associated with a specific Patient and encompasses various Goals and Tasks, which in turn may focus on specific Questionnaires or Schedules.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/careplans/index.md#_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart LR\n   CarePlan[<b>CarePlan</b>]\n   Goal[<table><thead><tr><th>Goal</th></tr></thead><tbody><tr><td>Reduce Fall Risk by 10%</td></tr></tbody></table>]\n    subgraph tasks [<i>Tasks</i>]\n   T1[<table><thead><tr><th>Task</th></tr></thead><tbody><tr><td>Complete ICA Assessment</td></tr></tbody></table>]\n   T2[<table><thead><tr><th>Task</th></tr></thead><tbody><tr><td>Schedule Appointment</td></tr></tbody></table>]\n   F1[<table><thead><tr><th>Questionnaire</th></tr></thead><tbody><tr><td>ICA Screen</td></tr></tbody></table>]\n   F2[<table><thead><tr><th>Schedule</th></tr></thead><tbody><tr><td>Dr. Alice Smith's schedule</td></tr></tbody></table>]\n   T1 -->|focus| F1\n   T2 -->|focus| F2\n   end\n\n   CarePlan-->|subject| D[<table><thead><tr><th>Patient</th></tr></thead><tbody><tr><td>Homer Simpson</td></tr></tbody></table>]\n   CarePlan -->|goal| Goal\n   CarePlan -->|activity| T1\n   CarePlan -->|activity| T2\n```\n\n----------------------------------------\n\nTITLE: Build Medplum Components\nDESCRIPTION: Builds the Medplum server, app, and necessary dependencies. This compiles the source code into distributable artifacts.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/self-hosting/install-from-scratch.md#_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nnpm run build:fast\n```\n\n----------------------------------------\n\nTITLE: Import Statements for Immunization Component\nDESCRIPTION: Imports necessary modules for rendering the Immunization documentation page. Includes React components for tabs, links, and resource tables, as well as the Immunization resource definition from a JSON file.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/api/fhir/resources/immunization.mdx#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport Link from '@docusaurus/Link';\nimport Tabs from '@theme/Tabs';\nimport TabItem from '@theme/TabItem';\nimport definition from '@site/static/data/resourceDefinitions/immunization.json';\nimport { ResourcePropertiesTable, SearchParamsTable } from '@site/src/components/ResourceTables';\n```\n\n----------------------------------------\n\nTITLE: Querying Linked FHIR Resources with GraphQL\nDESCRIPTION: This GraphQL query retrieves a Patient resource by ID, including their name and address. It then retrieves a list of DiagnosticReport resources related to the patient and Observation resources referenced by the DiagnosticReport.result field. It showcases the ability to fetch nested and linked resources in a single query.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/blog/2023-09-06-graphql-vs-rest.md#_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\n{\n  Patient(id: \"patient-id\") {\n    name {\n      given\n      family\n    }\n    address {\n      line\n      city\n      state\n      postalCode\n    }\n    # highlight-start\n    # Get all DiagnosticReports related to this patient\n    DiagnosticReportList(_reference: patient) {\n      # highlight-end\n      performer {\n        reference\n      }\n      code {\n        text\n      }\n      # highlight-start\n      # Get all Observation resources\n      # referenced by DiagnosticReport.result\n      result {\n        resource {\n          ... on Observation {\n            status\n            code {\n              text\n            }\n            valueQuantity {\n              value\n              unit\n            }\n          }\n        }\n      }\n      # highlight-end\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Searching by Profile using _profile - CLI\nDESCRIPTION: Demonstrates how to search for Observation resources that conform to the pediatric growth charts profile using the `_profile` parameter in the command-line interface (CLI). Requires the Medplum CLI to be installed and configured.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/search/advanced-search-parameters.mdx#_snippet_22\n\nLANGUAGE: bash\nCODE:\n```\n{ExampleCode}\n```\n\n----------------------------------------\n\nTITLE: MedicinalProductIndication Resource Definition (JSON)\nDESCRIPTION: This is a placeholder indicating the JSON definition of the MedicinalProductIndication resource.  The properties and searchParameters are used by the ResourcePropertiesTable and SearchParamsTable components to display the schema and search parameters respectively.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/api/fhir/resources/medicinalproductindication.mdx#_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\ndefinition\n```\n\n----------------------------------------\n\nTITLE: Running a single test in a file - Bash\nDESCRIPTION: This command executes a specific test within a single file. The `-t` option followed by the test name (e.g., `'Click logo'`) targets a particular test case to be run. `--` separates npm arguments from arguments passed to the test runner.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/contributing/testing.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm t -- src/App.test.tsx -t 'Click logo'\n```\n\n----------------------------------------\n\nTITLE: Upgrade Medplum App\nDESCRIPTION: This command uses the Medplum CLI to upgrade the Medplum application to the latest version. The `[env name]` parameter specifies the environment name.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/self-hosting/install-on-aws.md#_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\nnpx medplum aws update-app [env name]\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpx medplum aws update-app demo\n```\n\n----------------------------------------\n\nTITLE: CDK Destroy Command (Bash)\nDESCRIPTION: This command destroys all the resources created by the CDK stack. It removes all AWS resources that were provisioned during the deployment process, ensuring a clean removal of the infrastructure.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/cdk/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpx cdk destroy\n```\n\n----------------------------------------\n\nTITLE: Create Patient Mutation Response\nDESCRIPTION: Example response for Create Patient Mutation.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/graphql/mutations.mdx#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n{ExampleCode}\n```\n\n----------------------------------------\n\nTITLE: Installing dependencies and running dev server\nDESCRIPTION: This snippet demonstrates how to install the application's dependencies using npm and start the development web server with `vite`. The development server will run on localhost:3000.\nSOURCE: https://github.com/medplum/medplum/blob/main/examples/medplum-health-gorilla-demo/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Search Project Patients - cURL\nDESCRIPTION: Searches for ProjectMembership resources of type Patient using a cURL command. This retrieves a list of all Patients associated with a project by sending a direct API request. cURL must be installed. The output is a list of ProjectMembership resources in FHIR format, filtered to include Patients.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/auth/user-management-guide/user-management-guide.md#_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\n{ExampleCode}\n```\n\n----------------------------------------\n\nTITLE: Resource Search with :not Modifier - cURL\nDESCRIPTION: Demonstrates using the `:not` search modifier in a cURL request to exclude values from the results. This example retrieves all Tasks that do _not_ have a status of 'completed'.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/search/basic-search.mdx#_snippet_10\n\nLANGUAGE: string\nCODE:\n```\ncurl -H \"Authorization: Bearer $MEDPLUM_CLIENT_SUPER_ADMIN_TOKEN\" \\\n  \"https://api.medplum.com/fhir/R4/Task?status:not=completed\"\n```\n\n----------------------------------------\n\nTITLE: Clone Medplum Project\nDESCRIPTION: Clones a Medplum project using the `$clone` operation via the `medplum post` command. Requires super admin privileges and a valid login session. Returns the JSON representation of the newly cloned project.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/self-hosting/super-admin-cli.md#_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nmedplum post 'Project/bca80725-ea6a-4fb4-8eac-41b8ee51f09e/$clone'\n```\n\n----------------------------------------\n\nTITLE: Configuring Medplum Bots in medplum.config.json - JavaScript\nDESCRIPTION: This JavaScript snippet demonstrates how to configure two Medplum Bots, one for staging and one for production, within the `medplum.config.json` file.  Both bots point to the same source and compiled files but have different names and IDs. This allows the same bot code to be deployed to multiple environments.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/bots/bots-in-production.md#_snippet_16\n\nLANGUAGE: JavaScript\nCODE:\n```\n{\n  \"bots\": [\n    //…\n    {\n      \"name\": \"my-first-bot-staging\",\n      \"id\": \"<STAGING_BOT_ID>\",\n      \"source\": \"src/my-first-bot.ts\",\n      \"dist\": \"dist/my-first-bot.js\"\n    },\n    {\n      \"name\": \"my-first-bot-production\",\n      \"id\": \"<PRODUCTION_BOT_ID>\",\n      \"source\": \"src/my-first-bot.ts\",\n      \"dist\": \"dist/my-first-bot.js\"\n    }\n    //...\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Add Medplum CDK and CLI Dependencies using npm\nDESCRIPTION: This command adds the Medplum CDK and CLI dependencies, which include the Medplum CDK construct. These dependencies are required to use the Medplum CDK.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/self-hosting/install-on-aws.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm i @medplum/cdk @medplum/cli\n```\n\n----------------------------------------\n\nTITLE: Search Patients by Name and City TypeScript\nDESCRIPTION: This TypeScript code snippet illustrates how to execute a GraphQL query for searching patients by name and city within a TypeScript application. It shows how to integrate the GraphQL query with the Medplum client to perform the search.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/graphql/basic-queries.mdx#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n{ExampleCode}\n```\n\n----------------------------------------\n\nTITLE: Reload Nginx\nDESCRIPTION: Reloads the Nginx service to apply the configuration changes. This is necessary after modifying the Nginx site configurations.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/self-hosting/install-from-scratch.md#_snippet_28\n\nLANGUAGE: bash\nCODE:\n```\nsudo systemctl reload nginx\n```\n\n----------------------------------------\n\nTITLE: Patient-Reported Observation Example\nDESCRIPTION: This code snippet displays an observation performed by the patient.  It captures heart rate with the LOINC code 8867-4, the heart rate value, unit (beats per minute), and status (preliminary).  Both the `subject` and `performer` fields reference the same Patient resource, indicating that the patient both provided the measurement and is the subject of the observation.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/charting/capturing-vital-signs.mdx#_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"resourceType\": \"Observation\",\n  \"id\": \"example-observation-4\",\n  \"code\": {\n    \"system\": \"http://loinc.org\",\n    \"code\": \"8867-4\",\n    \"display\": \"Heart rate\",\n  },\n  \"valueQuantity\": {\n    \"value\": 70,\n    \"unit\": \"beats per minute\",\n    \"system\": \"http://unitsomeasure.org\",\n    \"code\": \"{Beats}/min\",\n  },\n  \"status\": \"preliminary\",\n  // This was recorded by the patient, as we can see both the subject and the performer are the patient with the same id\n  \"subject\": {\n    \"resource\": {\n      \"resourceType\": \"Patient\",\n      \"id\": \"example-patient\",\n    },\n  },\n  \"performer\": {\n    \"resource\": {\n      \"resourceType\": \"Patient\",\n      \"id\": \"example-patient\"\n    },\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Patient Resource Example JavaScript\nDESCRIPTION: Demonstrates the structure of a FHIR Patient resource, including elements like resourceType, id, name, telecom, and address.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/fhir-basics.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  // Resource Type (i.e. \"class name\")\n  \"resourceType\": \"Patient\",\n  // Unique id for this resource\n  \"id\": \"j_chalmers\",\n  // Patient Name (could have multiple)\n  \"name\": [\n    {\n      \"use\": \"official\",\n      \"family\": \"Chalmers\",\n      \"given\": [\"Peter\", \"James\"]\n    },\n    {\n      \"use\": \"usual\",\n      \"family\": \"Chalmers\",\n      \"given\": [\"Jim\"]\n    }\n  ],\n  // Phone + email info\n  \"telecom\": [\n    {\n      \"system\": \"phone\",\n      \"value\": \"(03) 3410 5613\",\n      \"use\": \"mobile\"\n    }\n  ],\n  // Address (could have multiple)\n  \"address\": [\n    {\n      \"use\": \"home\", // 'home', 'office', etc.\n      \"line\": [\"534 Erewhon St\"],\n      \"city\": \"PleasantVille\",\n      \"district\": \"Rainbow\",\n      \"state\": \"Vic\",\n      \"postalCode\": \"3999\",\n      // Single string version of address, used for display\n      \"text\": \"534 Erewhon St PeasantVille, Rainbow, Vic  3999\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Signing in with External Authentication using signInWithExternalAuth\nDESCRIPTION: Demonstrates the use of the `signInWithExternalAuth` method of the `MedplumClient` to initiate the external authentication flow. It redirects the user to the external identity provider's authorization URL.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/auth/methods/external-identity-providers.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n  {ExampleCode}\n```\n\n----------------------------------------\n\nTITLE: Parsed SearchRequest Example in TypeScript\nDESCRIPTION: An example of a parsed `SearchRequest` object resulting from the FHIR query `Observation?status=final&subject:missing=true`.  It shows how the query parameters are translated into filters with corresponding code, operator, and value properties.  The `Operator` enum represents FHIR search modifiers and prefixes.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/contributing/search-architecture.md#_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\n{\n  resourceType: 'Observation',\n  filters: [\n    {\n      code: 'status',\n\t  operator: Operator.EQUALS,\n\t  value: 'final',\n    },\n    {\n      code: 'subject',\n      operator: Operator.MISSING,\n      value: 'true',\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Search Project Practitioners - CLI\nDESCRIPTION: Searches for ProjectMembership resources of type Practitioner using the Medplum CLI.  This allows you to retrieve a list of all Practitioners associated with a project. The Medplum CLI must be installed and configured. The output is a list of ProjectMembership resources in FHIR format, filtered to include Practitioners.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/auth/user-management-guide/user-management-guide.md#_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\n{ExampleCode}\n```\n\n----------------------------------------\n\nTITLE: HL7 ADT Message Example\nDESCRIPTION: This code snippet shows an example of an HL7 ADT (Admission, Discharge, and Transfer) message. It demonstrates the structure and content of a typical HL7 message used for exchanging patient demographic information between healthcare systems. The message includes segments such as MSH, PID, NK1, and PV1, each containing specific data fields.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/integration/hl7-interfacing/index.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nMSH|^~\\&|ADT1|MCM|LABADT|MCM|198808181126|SECURITY|ADT|MSG00001|P|2.1\nPID|||PATID1234^5^M11||JONES^WILLIAM^A^III||19610615|M-||C|1200 N ELM STREET^^GREENSBORO^NC^27401-1020|GL|(919)379-1212|(919)271-3434||S||PATID12345001^2^M10|123456789|987654^NC\nNK1|1|JONES^BARBARA^K|SPO|||||20011105\nPV1|1|I|2000^2012^01||||004777^LEBAUER^SIDNEY^J.|||SUR||-||1|A0-\n```\n\n----------------------------------------\n\nTITLE: Start Medplum\nDESCRIPTION: Starts the Medplum service using systemctl.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/self-hosting/install-on-ubuntu.md#_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\nsudo systemctl start medplum\n```\n\n----------------------------------------\n\nTITLE: Upgrade AWS Infrastructure (CDK Diff)\nDESCRIPTION: This command uses the AWS CDK to check for changes in your AWS infrastructure before applying them. It compares the current state with the desired state based on your CDK code. The `[env name]` placeholder should be replaced with your specific environment name. The `-c config` parameter specifies the configuration file to use.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/self-hosting/install-on-aws.md#_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nnpx cdk diff -c config=medplum.[env name].config.json\n```\n\n----------------------------------------\n\nTITLE: Installing Medplum FHIR Types\nDESCRIPTION: This command installs the `@medplum/fhirtypes` package as a development dependency using npm. This allows TypeScript projects to leverage FHIR R4 type definitions.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/fhirtypes/README.md#_snippet_0\n\nLANGUAGE: Bash\nCODE:\n```\nnpm install --save-dev @medplum/fhirtypes\n```\n\n----------------------------------------\n\nTITLE: Install Medplum React Package\nDESCRIPTION: Installs the `@medplum/react` package using npm. This command adds the Medplum React component library as a dependency to your project.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/react/README.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nnpm install @medplum/react\n```\n\n----------------------------------------\n\nTITLE: Cloning Medplum Repository with Git via SSH\nDESCRIPTION: This snippet demonstrates cloning the Medplum repository using Git over SSH.  It requires Git to be installed and properly configured with SSH keys.  Replace `{YOUR GITHUB USERNAME}` with your actual GitHub username.  The cloned repository will be placed in a directory named `medplum`.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/contributing/local-dev-setup/local-dev-setup.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone git@github.com:{YOUR GITHUB USERNAME}/medplum.git medplum\n```\n\n----------------------------------------\n\nTITLE: Input Parameters Resource\nDESCRIPTION: This JSON payload demonstrates the input format for the `$set-accounts` operation, using a FHIR Parameters resource. It includes references to one or more accounts (Organization or Practitioner) to be added to the patient's _meta.accounts_ and propagated throughout the patient's compartment. Replace `<organization-id>` and `<practitioner-id>` with the actual IDs.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/api/fhir/operations/patient-set-accounts.md#_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"resourceType\": \"Parameters\",\n  \"parameter\": [\n    {\n      \"name\": \"accounts\",\n      \"valueReference\": {\n        \"reference\": \"Organization/<organization-id>\"\n      }\n    },\n    {\n      \"name\": \"accounts\",\n      \"valueReference\": {\n        \"reference\": \"Practitioner/<practitioner-id>\"\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: CSS Modules Example (css)\nDESCRIPTION: Example of using CSS Modules in Mantine 7.0 to define styles.  This shows the new CSS Modules-based styling approach.  It sets the background color of the `.root` class to a specific color from the Mantine theme variables.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/react/mantine-6x-to-7x.mdx#_snippet_5\n\nLANGUAGE: css\nCODE:\n```\n/* 7.0 */\n.root {\n  background-color: var(--mantine-color-red-5);\n}\n```\n\n----------------------------------------\n\nTITLE: Deploy Medplum App\nDESCRIPTION: This command uses the Medplum CLI to deploy the Medplum application to your AWS environment. The `[env name]` parameter specifies the environment name. It utilizes prebuilt images for deployment.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/self-hosting/install-on-aws.md#_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nnpx medplum aws deploy-app [env name]\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpx medplum aws deploy-app demo\n```\n\n----------------------------------------\n\nTITLE: Performing Lab Selection Component in TSX\nDESCRIPTION: This code snippet shows how to implement a lab selection component using an `AutoComplete` component. It uses `searchAvailableLabs` to fetch available labs, and `setPerformingLab` and `setPerformingLabAccountNumber` to update the order state with the selected lab and account number.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/integration/health-gorilla/sending-orders.md#_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n<MyAutoComplete\n  label=\"Performing Lab\"\n  loadOptions={searchAvailableLabs}\n  onChange={(e) => {\n    setPerformingLab(e.value as Organization);\n    // Account number can be hardcoded or dynamic\n    setPerformingLabAccountNumber(accountNumber);\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Installing dependencies\nDESCRIPTION: Installs the necessary Node.js dependencies for the application using npm.\nSOURCE: https://github.com/medplum/medplum/blob/main/examples/medplum-mso-demo/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Running tests for a single file - Bash\nDESCRIPTION: This command runs tests specifically for a single file within the project, allowing for focused testing. The file path (e.g., `src/App.test.tsx`) is passed as an argument to the `npm t` command using `--`, which separates npm arguments from arguments passed to the test runner.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/contributing/testing.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm t -- src/App.test.tsx\n```\n\n----------------------------------------\n\nTITLE: Setting page offset with _offset parameter in cURL\nDESCRIPTION: Demonstrates how to use the `_offset` query parameter in a search query using cURL to set the starting point of search results. The example shows how to retrieve resources with a specified offset via a cURL command.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/search/paginated-search.mdx#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n{ExampleCode}\n```\n\n----------------------------------------\n\nTITLE: Deploy Bot with cURL\nDESCRIPTION: This code snippet demonstrates how to deploy a Medplum Bot using cURL. It likely shows a `curl` command with the necessary headers and data to make a POST request to the Medplum server with the Bot's ID and the required parameters: filename and code. The `ExampleCode` variable is assumed to contain the actual code example.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/api/fhir/operations/bot-deploy.mdx#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n{ExampleCode}\n```\n\n----------------------------------------\n\nTITLE: Deploying Multiple Medplum Bots with Wildcard (Bash)\nDESCRIPTION: This snippet shows how to deploy multiple Medplum Bots matching a pattern, such as bots with 'staging' in the name, using a wildcard (*) in the `npx medplum bot deploy` command. This allows for easier deployment of multiple bots in CI/CD pipelines.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/bots/bots-in-production.md#_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\nnpx medplum bot deploy *staging*\n```\n\n----------------------------------------\n\nTITLE: Deploy 'merge-matching-patients' Medplum Bot\nDESCRIPTION: This command deploys the 'merge-matching-patients' bot to the Medplum platform using the Medplum CLI.\nSOURCE: https://github.com/medplum/medplum/blob/main/examples/medplum-demo-bots/src/deduplication/README.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nnpx medplum bot deploy merge-matching-patients\n```\n\n----------------------------------------\n\nTITLE: Cloning FHIRcast .NET Repository\nDESCRIPTION: This command clones the FHIRcast .NET client repository from GitHub. It uses Git to download the source code to your local machine, allowing you to then open the project in Visual Studio.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/fhircast/dotnet-client.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone git@github.com:fhircast/.net.git\n```\n\n----------------------------------------\n\nTITLE: Searching by Last Updated Time using _lastUpdated - cURL\nDESCRIPTION: Demonstrates searching Communications resources based on the `_lastUpdated` parameter using a cURL command.  The example uses the `gt` (greater than) comparison operator to find communications updated since a specific date. Requires cURL to be installed and configured.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/search/advanced-search-parameters.mdx#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n{ExampleCode}\n```\n\n----------------------------------------\n\nTITLE: Run Dev Server (bash)\nDESCRIPTION: Starts the development server for the Medplum app. This is typically used during development for local testing and debugging.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/app/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Observation from Device Example\nDESCRIPTION: This code snippet shows an observation generated by a device. It represents systolic blood pressure with the LOINC code 8480-6, the pressure value, unit (mmHg), and status (preliminary). The `device` field references a Device resource, indicating the device that performed the measurement. The code demonstrates how external resources are referenced within the Observation resource.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/charting/capturing-vital-signs.mdx#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"resourceType\": \"Observation\",\n  \"id\": \"example-observation-3\",\n  \"code\": {\n    \"system\": \"http://loinc.org\",\n    \"code\": \"8480-6\",\n    \"display\": \"Systolic blood pressure\",\n  },\n  \"valueQuantity\": {\n    \"value\": 100,\n    \"unit\": \"mmhG\",\n    \"system\": \"http://unitsomeasure.org\",\n    \"code\": \"mm[Hg]\",\n  },\n  \"status\": \"preliminary\",\n  // The device that measured the observation, in this case\n  \"device\": {\n    \"resource\": {\n      \"resourceType\": \"Device\",\n      \"id\": \"example-device\",\n    },\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Copy .env.defaults to .env Bash\nDESCRIPTION: This command copies the default environment variables file to a new file named `.env`, allowing users to customize the environment variables for the application.\nSOURCE: https://github.com/medplum/medplum/blob/main/examples/medplum-valueset-selector/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncp .env.defaults .env\n```\n\n----------------------------------------\n\nTITLE: FHIR Patient Resource with Identifiers from Multiple Hospitals (Bob)\nDESCRIPTION: This JavaScript code represents a FHIR Patient resource with multiple identifiers.  Each identifier has a system string indicating the source hospital and a value representing the medical record number at that hospital. This example shows how Bob's MRNs from Hospital 1 and Hospital 2 are represented.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/blog/2023-08-08-system-strings.mdx#_snippet_2\n\nLANGUAGE: js\nCODE:\n```\n{`{\n  \"resourceType\": \"Patient\",\n  \"name\": [{\"given\": [\"Bob\"]}],\n  \"identifier\": [\n    // MRN - Hospital 1\n    {\n      \"system\": \"http://hospital-1.org\",\n      \"value\": \"98760\"\n    },\n    // MRN - Hospital 2\n    {\n      \"system\": \"http://hospital-2.org\",\n      \"value\": \"12345\"\n    }\n  ]\n}`}\n```\n\n----------------------------------------\n\nTITLE: Example Project JSON\nDESCRIPTION: An example of the JSON response returned by the project clone operation.  Shows the `resourceType`, `name`, `id`, and `meta` properties.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/self-hosting/super-admin-cli.md#_snippet_17\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"resourceType\": \"Project\",\n  \"name\": \"My Project\",\n  \"id\": \"cabd683a-dc09-492f-a513-416c6f3c16bd\",\n  \"meta\": {\n    \"versionId\": \"a9ce32d9-c609-4814-bb67-59f3ea8b5d38\",\n    \"lastUpdated\": \"2023-03-15T18:50:49.882Z\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Medplum Base URL via Environment Variable (Bash)\nDESCRIPTION: This snippet shows how to set the `MEDPLUM_BASE_URL` environment variable using the `export` command in bash. This variable is used if self-hosting Medplum to point to the specific instance.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/bots/bots-in-production.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nexport MEDPLUM_BASE_URL=https://api.example.com/\n```\n\n----------------------------------------\n\nTITLE: Defining Practitioner resource documentation page\nDESCRIPTION: This is the main component defining the Practitioner documentation page. It utilizes Docusaurus Tabs component to organize the page content into different sections like 'Schema'. It also uses custom components like ResourcePropertiesTable and SearchParamsTable to display the Practitioner's properties and search parameters.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/api/fhir/resources/practitioner.mdx#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n<Tabs queryString=\"section\">\n  <TabItem value=\"schema\" label=\"Schema\" default>\n\n## Elements\n\n<ResourcePropertiesTable\n  properties={definition.properties.filter((p) => !(p.inherited && p.base.includes('Resource')))}\n/>\n\n## Search Parameters\n\n<SearchParamsTable searchParams={definition.searchParameters} />\n\n```\n\n----------------------------------------\n\nTITLE: Delete Patient Mutation (GraphQL)\nDESCRIPTION: This GraphQL mutation deletes an existing Patient resource. It requires the ID of the patient to be deleted.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/graphql/mutations.mdx#_snippet_11\n\nLANGUAGE: graphql\nCODE:\n```\n{ExampleCode}\n```\n\n----------------------------------------\n\nTITLE: ExplanationOfBenefit Search Parameters (JSON)\nDESCRIPTION: This JSON snippet represents the search parameters associated with the ExplanationOfBenefit resource, loaded from a static file. It enables filtering and searching capabilities.  It relies on the `@site/static/data/resourceDefinitions/explanationofbenefit.json` file.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/api/fhir/resources/explanationofbenefit.mdx#_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\ndefinition.searchParameters\n```\n\n----------------------------------------\n\nTITLE: Deploy Bot Layer Script\nDESCRIPTION: This script is used to deploy a new version of the Medplum Bot Layer to AWS. It is executed by self-hosters to update their Bot Layer after building the Medplum project. The script is located in the `./scripts` directory of the Medplum repository.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/bots/bot-lambda-layer.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./scripts/deploy-bot-layer.sh\n```\n\n----------------------------------------\n\nTITLE: Plan Deployment Terraform Bash\nDESCRIPTION: Generates and displays an execution plan based on the current Terraform configuration. This allows a preview of the changes that Terraform will make before actually applying them, ensuring that the configuration is correct.\nSOURCE: https://github.com/medplum/medplum/blob/main/terraform/gcp/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nterraform plan\n```\n\n----------------------------------------\n\nTITLE: Start OpenTelemetry Collector with Docker (Windows)\nDESCRIPTION: This command starts a default OpenTelemetry Collector using Docker on Windows. It maps ports 4317 and 4318 for gRPC and HTTP protocols, respectively, and mounts a collector configuration file from the current directory. The `%cd%` variable represents the current directory in Windows command prompt.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/self-hosting/opentelemetry.md#_snippet_1\n\nLANGUAGE: bat\nCODE:\n```\ndocker run -p 4317:4317 -p 4318:4318 --rm -v %cd%\\collector-config.yaml:/etc/otelcol/config.yaml otel/opentelemetry-collector\n```\n\n----------------------------------------\n\nTITLE: Create 'merge-matching-patients' Medplum Bot\nDESCRIPTION: This command creates a Medplum bot named 'merge-matching-patients' using the Medplum CLI. It specifies the project ID and the source and destination files for the bot's code.\nSOURCE: https://github.com/medplum/medplum/blob/main/examples/medplum-demo-bots/src/deduplication/README.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nnpx medplum bot create merge-matching-patients <project id> \"src/deduplication/merge-matching-patients.ts\" \"dist/deduplication/merge-matching-patients.js\"\n```\n\n----------------------------------------\n\nTITLE: Running Tests with npm\nDESCRIPTION: This command runs the suite of server tests for the Medplum application. It is used to verify the correctness and stability of the code after changes or updates. The `test:seed` command must be run successfully beforehand.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/server/README.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nnpm run test\n```\n\n----------------------------------------\n\nTITLE: Expanded ValueSet JSON\nDESCRIPTION: This JSON represents the expanded ValueSet for administrative-gender. It contains the resourceType, URL, and the expansion details, including an offset and an array of contains, each with system, code, and display properties. This output demonstrates the structure returned by the $expand operation.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/api/fhir/operations/valueset-expand.mdx#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"resourceType\": \"ValueSet\",\n  \"url\": \"http://hl7.org/fhir/ValueSet/administrative-gender\",\n  \"expansion\": {\n    \"offset\": 0,\n    \"contains\": [\n      {\n        \"system\": \"http://hl7.org/fhir/administrative-gender\",\n        \"code\": \"female\",\n        \"display\": \"Female\"\n      },\n      {\n        \"system\": \"http://hl7.org/fhir/administrative-gender\",\n        \"code\": \"male\",\n        \"display\": \"Male\"\n      },\n      {\n        \"system\": \"http://hl7.org/fhir/administrative-gender\",\n        \"code\": \"other\",\n        \"display\": \"Other\"\n      },\n      {\n        \"system\": \"http://hl7.org/fhir/administrative-gender\",\n        \"code\": \"unknown\",\n        \"display\": \"Unknown\"\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Searching with Contains FHIR\nDESCRIPTION: This snippet demonstrates how to perform a partial match on string search parameters in FHIR using the `:contains` modifier.  It searches for Patients whose name includes the substring \"stein\". The example utilizes the Medplum TypeScript client.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/search/basic-search.mdx#_snippet_13\n\nLANGUAGE: ts\nCODE:\n```\n{ExampleCode}\n```\n\n----------------------------------------\n\nTITLE: Initializing MedplumClient with Options\nDESCRIPTION: Creates a `MedplumClient` instance with specified configuration options, including the base URL of the FHIR server and the client ID. This allows customization of the client's behavior.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/core/README.md#_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { MedplumClient } from '@medplum/core';\n\nconst medplum = new MedplumClient({\n  baseUrl: 'https://www.example.com/fhir/R4/',\n  clientId: 'MY_CLIENT_ID',\n});\n```\n\n----------------------------------------\n\nTITLE: Create 'find-matching-patients' Medplum Bot\nDESCRIPTION: This command creates a Medplum bot named 'find-matching-patients' using the Medplum CLI. It specifies the project ID and the source and destination files for the bot's code.\nSOURCE: https://github.com/medplum/medplum/blob/main/examples/medplum-demo-bots/src/deduplication/README.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpx medplum bot create find-matching-patients <project id> \"src/deduplication/find-matching-patients.ts\" \"dist/deduplication/find-matching-patients.js\"\n```\n\n----------------------------------------\n\nTITLE: Invoking Agent Status Operation - FHIR\nDESCRIPTION: This snippet shows how to invoke the `$status` operation for an Agent resource in Medplum. It requires an Agent ID to be specified in the URL.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/agent/status.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n[base]/Agent/[id]/$status\n```\n\n----------------------------------------\n\nTITLE: Disable Location Polyfill for Expo Router\nDESCRIPTION: This snippet shows how to disable the `window.location` polyfill provided by `Medplum` when using `Expo Router`. This is recommended because `Expo Router` has its own polyfill that better interoperates with the package.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/expo-polyfills/README.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\npolyfillMedplumWebAPIs({ location: false });\n```\n\n----------------------------------------\n\nTITLE: Installing Medplum CLI as a Package Dependency\nDESCRIPTION: Installs the Medplum CLI as a project dependency. This allows using the CLI commands via `npx medplum <command>`. Requires Node.js and npm.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/cli/index.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @medplum/cli\n```\n\n----------------------------------------\n\nTITLE: Configuring Bot with External Lambda Identifier (JSON)\nDESCRIPTION: This JSON snippet demonstrates how to configure a Medplum Bot resource to use an external AWS Lambda function.  The `identifier` array contains an entry with the system `https://medplum.com/bot-external-function-id` and the `value` set to the name of the external Lambda function.  The `runtimeVersion` should be set to `awslambda`.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/bots/external-function.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"resourceType\": \"Bot\",\n  \"identifier\": [\n    {\n      \"system\": \"https://medplum.com/bot-external-function-id\",\n      \"value\": \"my-custom-lambda-function\"\n    }\n  ],\n  \"name\": \"External Demo Bot\",\n  \"runtimeVersion\": \"awslambda\"\n}\n```\n\n----------------------------------------\n\nTITLE: Deploying a Medplum Bot with specific name (Bash)\nDESCRIPTION: This snippet shows how to deploy a Medplum Bot with the specific name `my-first-bot` using the `npx medplum bot deploy` command.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/bots/bots-in-production.md#_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\nnpx medplum bot deploy my-first-bot\n```\n\n----------------------------------------\n\nTITLE: CDK Bootstrap Command\nDESCRIPTION: This command bootstraps the AWS CDK environment, provisioning required resources before deploying the AWS CDK app. It uses the configuration file specified by the `-c config` parameter.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/self-hosting/install-on-aws.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nnpx cdk bootstrap -c config=medplum.demo.config.json\n```\n\n----------------------------------------\n\nTITLE: Patient Chart Flow Diagram\nDESCRIPTION: This Mermaid diagram visualizes the relationship between a Patient resource and other FHIR resources used in charting, such as Observation, Condition, AllergyIntolerance, MedicationRequest, Immunization, and RiskAssessment. It illustrates how these resources are linked to a patient, providing a visual representation of patient data relationships.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/charting/index.md#_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart BT\n    homer[<table><thead><tr><th>Patient</th></tr></thead><tbody><tr><td>Homer Simpson</td></tr></tbody></table>]\n    obsA[<table><thead><tr><th>Observation</th></tr></thead><tbody><tr><td>Heart Rate: 150 bpm</td></tr></tbody></table>]\n    obsB[<table><thead><tr><th>Observation</th></tr></thead><tbody><tr><td>Pregnancy Status: 26 weeks</td></tr></tbody></table>]\n    condition[<table><thead><tr><th>Condition</th></tr></thead><tbody><tr><td>Type II Diabetes</td></tr></tbody></table>]\n    allergy[<table><thead><tr><th>AllergyIntolerance</th></tr></thead><tbody><tr><td>Penicillin G</td></tr><tr><td><em>critical</em></td></tr></tbody></table>]\n    medication[<table><thead><tr><th>MedicationRequest</th></tr></thead><tbody><tr><td>Tylenol</td></tr></tbody></table>]\n    immunization[<table><thead><tr><th>Immunization</th></tr></thead><tbody><tr><td>Fluvax</td></tr></tbody></table>]\n    risk[<table><thead><tr><th>RiskAssessment</th></tr></thead><tbody><tr><td>Heart Attack: 10%</td></tr></tbody></table>]\n\nobsA -->|subject| homer\nobsB -->|subject| homer\ncondition -->|subject| homer\nallergy -->|patient| homer\nmedication -->|subject| homer\nimmunization -->|patient| homer\nrisk -->|subject| homer\n```\n\n----------------------------------------\n\nTITLE: Logical OR Filtering Example in Medplum (cURL)\nDESCRIPTION: Illustrates using the logical 'or' operator to combine filters in Medplum (cURL).\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/search/filter-search-parameter.mdx#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n{ExampleCode}\n```\n\n----------------------------------------\n\nTITLE: Medplum GET Request - Search for Patients\nDESCRIPTION: Executes a `medplum get` request to search for patients with the name 'homer'.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/cli/index.md#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nmedplum get 'Patient?name=homer'\n```\n\n----------------------------------------\n\nTITLE: Reading FHIR Resource via CLI\nDESCRIPTION: Shows how to read a FHIR resource using the Medplum CLI. The command takes the resource type and ID as arguments. Requires the Medplum CLI to be installed and configured.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/fhir-datastore/reading-data.md#_snippet_1\n\nLANGUAGE: string\nCODE:\n```\nmedplum read Patient example-patient\n```\n\n----------------------------------------\n\nTITLE: Nested Reverse Chained Search (Specimen from DiagnosticReport from Procedure) - cURL\nDESCRIPTION: This bash snippet demonstrates a nested reverse chained search to find Specimen resources referenced by a DiagnosticReport that originated from a Procedure on a specific date using a cURL command.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/search/chained-search.md#_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\ncurl -s -H \"Authorization: Bearer $MEDPLUM_CLIENT_ID\" \\\n  \"https://api.medplum.com/fhir/R4/Specimen?_has:DiagnosticReport:specimen:_has:Procedure:subject:date=2023-11-12\" | jq\n```\n\n----------------------------------------\n\nTITLE: Rendering Resource Properties Table (JavaScript)\nDESCRIPTION: This snippet renders the ResourcePropertiesTable component, passing the filtered properties as a prop.  This component is responsible for displaying the properties of the UsageContext in a structured table.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/api/fhir/datatypes/usagecontext.mdx#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\n<ResourcePropertiesTable\n  properties={definition.properties.filter((p) => !(p.inherited && p.base.includes('Resource')))}\n/>\n```\n\n----------------------------------------\n\nTITLE: Claim Resource Definition (JSON Schema)\nDESCRIPTION: This snippet represents the JSON schema definition for the FHIR Claim resource, detailing its properties, search parameters, and inherited elements. It's used by the ResourcePropertiesTable and SearchParamsTable components to dynamically generate documentation.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/api/fhir/resources/claim.mdx#_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\ndefinition.properties.filter((p) => !(p.inherited && p.base.includes('Resource')))\n```\n\nLANGUAGE: JSON\nCODE:\n```\ndefinition.searchParameters\n```\n\nLANGUAGE: JSON\nCODE:\n```\ndefinition.properties.filter((p) => p.inherited && p.base.includes('Resource'))\n```\n\n----------------------------------------\n\nTITLE: Find Practitioners at a Location (cURL)\nDESCRIPTION: This cURL example shows how to find Practitioners and PractitionerRoles at a specific Location. It uses _revinclude to find PractitionerRoles associated with the Location and _include:iterate to retrieve the Practitioner resources. The example requires a cURL installation and access to the Medplum API.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/search/includes.mdx#_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\n{ExampleCode}\n```\n\n----------------------------------------\n\nTITLE: Generate RSA Key (Shell)\nDESCRIPTION: This command generates a 2048-bit RSA private key using OpenSSL. The key is encrypted with a passphrase using the DES3 algorithm and stored in the private.pem file. This private key is later used to generate a public key for CloudFront distribution signature verification.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/cdk/README.md#_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nopenssl genrsa -des3 -out private.pem 2048\n```\n\n----------------------------------------\n\nTITLE: Medplum GET Request with Base URL\nDESCRIPTION: Executes a `medplum get` request with a specified base URL. This is useful for targeting a specific Medplum server instance.  The example gets the 'Patient/homer-simpson' resource.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/cli/index.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nmedplum get --base-url https://api.example.com 'Patient/homer-simpson'\n```\n\n----------------------------------------\n\nTITLE: Export Public Certificate using OpenSSL\nDESCRIPTION: Exports the public certificate from the downloaded PFX file using OpenSSL. It utilizes the `pkcs12` command to extract the certificate in CRT format, skipping the private key extraction.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/self-hosting/install-on-azure.md#_snippet_14\n\nLANGUAGE: Shell\nCODE:\n```\n# export public certificate\nopenssl pkcs12 -in mycert.pfx -clcerts -nokeys -out mycert.crt -passin pass:\n```\n\n----------------------------------------\n\nTITLE: Exit PostgreSQL Client\nDESCRIPTION: Exits the PostgreSQL client, closing the connection to the database server.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/self-hosting/install-from-scratch.md#_snippet_5\n\nLANGUAGE: PLpgSQL\nCODE:\n```\nexit\n```\n\n----------------------------------------\n\nTITLE: Configure Ingress Values (Helm)\nDESCRIPTION: This snippet configures the ingress values in the `values.yaml` file for the Helm chart.  Replace `api.yourdomain.com` with your actual domain.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/self-hosting/install-on-gcp.md#_snippet_15\n\nLANGUAGE: yaml\nCODE:\n```\ningress:\n  deploy: true\n  domain: api.yourdomain.com\n```\n\n----------------------------------------\n\nTITLE: Example Bot Entry in medplum.config.json (JavaScript)\nDESCRIPTION: This snippet shows an example of a Bot entry in the `medplum.config.json` file. This file is used by the Medplum CLI to manage and deploy bots. The entry contains the bot's name, ID, source file path, and dist file path.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/bots/bots-in-production.md#_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"bots\": [\n    //…\n    {\n      \"name\": \"my-first-bot\",\n      \"id\": \"<BOT_ID>\",\n      \"source\": \"src/my-first-bot.ts\",\n      \"dist\": \"dist/my-first-bot.js\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Searching for a Summary using _summary - cURL\nDESCRIPTION: Demonstrates how to search for a summary representation of a Patient resource using the `_summary` parameter using a cURL command.  This retrieves only elements marked as `summary` in the resource definition. Requires cURL to be installed and configured.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/search/advanced-search-parameters.mdx#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n{ExampleCode}\n```\n\n----------------------------------------\n\nTITLE: Example Bot Resource Response (Typescript)\nDESCRIPTION: This Typescript code shows an example response from the Medplum API after successfully creating a new Bot resource. It includes properties such as `resourceType`, `name`, `description`, `runtimeVersion`, `sourceCode`, `id`, and `meta` data related to the project.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/api/project-admin/bot.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  resourceType: 'Bot',\n  name: 'Hello World Bot',\n  description: 'Hello world',\n  runtimeVersion: 'awslambda',\n  sourceCode: {\n    contentType: 'text/typescript',\n    title: 'index.ts',\n    url: 'Binary/:uuid'\n  },\n  id: ':bot-uuid',\n  meta: {\n    project: ':projectId',\n    //...\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Process profiler data\nDESCRIPTION: Processes the V8 log file generated by the Node.js profiler using the `--prof-process` flag. This converts the raw log data into a human-readable format and outputs the result to `processed.txt`.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/contributing/server-profiling.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nnode --prof-process isolate-0xnnnnnnnnnnnn-v8.log > processed.txt\n```\n\n----------------------------------------\n\nTITLE: Copy environment variables file\nDESCRIPTION: Copies the default environment variables file to a new file named `.env`.  This allows users to modify the environment variables without directly changing the defaults.\nSOURCE: https://github.com/medplum/medplum/blob/main/examples/medplum-task-demo/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncp .env.defaults .env\n```\n\n----------------------------------------\n\nTITLE: Running the app using npm\nDESCRIPTION: This command uses npm to run the Medplum Photon Integration application using the `dev` script defined in the `package.json` file. This typically starts a development server and enables hot reloading for easier development.\nSOURCE: https://github.com/medplum/medplum/blob/main/examples/medplum-photon-integration/README.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Search Patients by Name and City Response\nDESCRIPTION: This TypeScript code defines the structure of the expected response when searching for patients by name and city. It specifies how the list of patients will be returned, including the resourceType, id, name, and address of each patient.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/graphql/basic-queries.mdx#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n{ExampleCode}\n```\n\n----------------------------------------\n\nTITLE: Running Reinstall Script with Update for Unexpected Behavior (Bash)\nDESCRIPTION: If you encounter unexpected behavior after adding dependencies, ensure you've run the reinstall script with the `--update` flag from the root directory. This guarantees all dependencies are correctly installed and peer dependency conflicts are addressed.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/contributing/package-json.md#_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\n./scripts/reinstall.sh --update\n```\n\n----------------------------------------\n\nTITLE: Medplum Client Usage in React Native\nDESCRIPTION: This code snippet demonstrates how to use the `polyfillMedplumWebAPIs` function and `ExpoClientStorage` class to enable the `MedplumClient` in a React Native Expo environment. It also conditionally renders components based on the loading state of the Medplum context.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/expo-polyfills/README.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { MedplumClient } from '@medplum/core';\nimport { MedplumProvider, useMedplumContext } from '@medplum/react-hooks';\nimport { polyfillMedplumWebAPIs, ExpoClientStorage } from '@medplum/expo-polyfills';\n\npolyfillMedplumWebAPIs();\n\nconst medplum = new MedplumClient({ storage: new ExpoClientStorage() });\n\nfunction Home(): JSX.Element {\n  const { loading } = useMedplumContext();\n  return loading ? <div>Loading...</div> : <div>Loaded!</div>;\n}\n\nfunction App(): JSX.Element {\n  return (\n    <MedplumProvider medplum={medplum}>\n      <Home />\n    </MedplumProvider>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Promote User to Admin - CLI\nDESCRIPTION: Updates a ProjectMembership resource using the Medplum CLI to grant admin privileges to a user. This changes the 'admin' field to 'true' on the ProjectMembership. The Medplum CLI must be installed and configured. The output is the updated ProjectMembership resource.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/auth/user-management-guide/user-management-guide.md#_snippet_19\n\nLANGUAGE: bash\nCODE:\n```\n{ExampleCode}\n```\n\n----------------------------------------\n\nTITLE: Nested Filters Example in Medplum (cURL)\nDESCRIPTION: Demonstrates nested filters with parentheses and logical operators in Medplum (cURL).\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/search/filter-search-parameter.mdx#_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\n{ExampleCode}\n```\n\n----------------------------------------\n\nTITLE: Querying PlanDefinitions (cURL)\nDESCRIPTION: This code snippet shows how to query all PlanDefinitions that represent a laboratory procedure using a cURL command. The command makes a direct HTTP request to the FHIR server.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/careplans/diagnostic-catalog/diagnostic-catalog.mdx#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n{ExampleCode}\n```\n\n----------------------------------------\n\nTITLE: Install dependencies bash\nDESCRIPTION: This command installs the necessary dependencies for the Medplum Charting Demo using npm.\nSOURCE: https://github.com/medplum/medplum/blob/main/examples/medplum-chart-demo/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Terraform Configuration Variables\nDESCRIPTION: Shows example Terraform variables that need to be defined in `terraform.tfvars` file.  These variables configure the Azure project, region, labels, and details related to the Azure infrastructure like resource group name, location, custom domain, and certificate secret ID.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/self-hosting/install-on-azure.md#_snippet_1\n\nLANGUAGE: Terraform\nCODE:\n```\n# Azure project configuration - Change these values to use your own project, region, and zone\nproject_id = \"your-project-id\"\nregion     = \"your-region\"\nzone       = \"your-zone\"\n\n# Common enforced labels - Change these values to use your own labels\nlabels = {\n  env     = \"your-environment\"  # e.g., \"dev\", \"staging\", \"prod\"\n  purpose = \"your-purpose\"      # e.g., \"gke\", \"web\", \"database\"\n  owner   = \"your-owner\"        # e.g., \"team-name\", \"project-owner\"\n}\n\n# Azure\nresource_group_name = \"medplum\" \t# Name of the RG to be created\nlocation            = \"eastus2\"\t# Infra region\ntags = { \t\t\t\t# Tags that will be applied to all resources\n  app = \"medplum\"\n}\napp_domain                = \"app.azure.medplum.dev\"  # CDN Custom domain\napp_certificate_secret_id = \"https://medplum-certs.vault.azure.net/certificates/medplum-appb0836994-69fff284f95\" # The exported Certificate URI (See step 1)\n```\n\n----------------------------------------\n\nTITLE: Rendering TestReport Elements Table\nDESCRIPTION: Renders a table displaying the properties of the TestReport resource, excluding inherited properties from the base Resource. It uses the ResourcePropertiesTable component and filters properties from the 'definition.properties' array based on inheritance.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/api/fhir/resources/testreport.mdx#_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n<ResourcePropertiesTable\n  properties={definition.properties.filter((p) => !(p.inherited && p.base.includes('Resource')))}\n/>\n```\n\n----------------------------------------\n\nTITLE: HTTP Redirect for Connection Reset Error\nDESCRIPTION: This snippet shows the HTTP redirect response that Medplum sends to the client's redirect URI when a connection reset error occurs while communicating with an external IdP. The response includes the `error` parameter set to `invalid_request` and the `error_description` parameter set to `Connection+reset`.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/api/oauth/authorize.md#_snippet_16\n\nLANGUAGE: HTTP\nCODE:\n```\nHTTP 1.1 302\nFound Location: https://client_redirect_uri?error=invalid_request&\n                  error_description=Connection+reset\n```\n\n----------------------------------------\n\nTITLE: Search Medplum Project by Name\nDESCRIPTION: Searches for a Medplum project by name using the `medplum get Project?name=staging` command.  Requires super admin privileges and a valid login session. Returns a FHIR Bundle resource containing matching Project resources.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/self-hosting/super-admin-cli.md#_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nmedplum get Project?name=staging\n```\n\n----------------------------------------\n\nTITLE: Installing npm dependencies\nDESCRIPTION: This command uses npm (Node Package Manager) to install all the dependencies required by the Medplum Hello World application. These dependencies are listed in the `package.json` file within the project directory.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/tutorials/medplum-hello-world.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Installing React and React DOM using npm\nDESCRIPTION: Installs React and React DOM as development dependencies using npm.  This ensures the necessary React libraries are available for the Medplum React components to function correctly.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/react/index.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i -D react react-dom\n```\n\n----------------------------------------\n\nTITLE: FHIR Condition Resource for John Doe's Hypertension in TypeScript\nDESCRIPTION: This is an example of a FHIR Condition resource for John Doe's Hypertension (PC001).  It links to the patient via conditional reference and includes both local and standard ICD-10 codes, along with a human-readable text description.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/migration/convert-to-fhir.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Condition } from '@medplum/fhirtypes';\n\nexport const johnDoeHypertension: Condition = {\n  resourceType: 'Condition',\n  id: 'john-doe-hypertension',\n  code: {\n    coding: [\n      {\n        system: 'http://your-source-system.com/conditions',\n        code: 'HT001',\n        display: 'Hypertension'\n      },\n      {\n        system: 'http://hl7.org/fhir/sid/icd-10',\n        code: 'I10',\n        display: 'Essential (primary) hypertension'\n      }\n    ],\n    text: 'Hypertension'\n  },\n  subject: {\n    reference: 'Patient?identifier=http://your-source-system.com/patients|P001'\n  },\n  identifier: [\n    {\n      system: 'http://your-source-system.com/patient_conditions',\n      value: 'PC001'\n    }\n  ],\n  onsetDateTime: '2022-03-15'\n};\n\n```\n\n----------------------------------------\n\nTITLE: Clone Medplum Project Including Resource IDs\nDESCRIPTION: Clones a Medplum project and includes specified resource IDs in the `includeIds` parameter of the JSON payload. Requires super admin privileges and a valid login session. Returns the JSON representation of the newly cloned project.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/self-hosting/super-admin-cli.md#_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\nmedplum post 'Project/bca80725-ea6a-4fb4-8eac-41b8ee51f09e/$clone' '{\"includeIds\": [\"bca80725-ea6a-4fb4-8eac-41b8ee51f09e\"]}'\n```\n\n----------------------------------------\n\nTITLE: NPM Installation\nDESCRIPTION: This command installs the @medplum/expo-polyfills package as a dependency to your project. It is required for bare React Native projects to utilize the Medplum client.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/expo-polyfills/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install @medplum/expo-polyfills\n```\n\n----------------------------------------\n\nTITLE: Write-only/Dual Write Sequence Diagram (Mermaid)\nDESCRIPTION: This Mermaid sequence diagram illustrates the write-only/dual write phase, where write requests are sent to both the existing database and Medplum.  It highlights the data flow from the Client, through the Existing API, to both the Existing DB and Medplum, ensuring that new data is captured in both systems during the initial migration phase.  The diagram shows confirmation messages returned to the Existing API and then to the Client.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/migration/adoption-stategy.md#_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\nsequenceDiagram\n    participant Client\n    participant Existing API\n    participant Existing DB\n    participant Medplum\nClient->>Existing API: Write Request\nExisting API->>Existing DB: Write Data\nExisting API->>Medplum: Write Data\nExisting DB-->>Existing API: Confirmation\nMedplum-->>Existing API: Confirmation\nExisting API-->>Client: Response\n```\n\n----------------------------------------\n\nTITLE: Practitioner Affiliation with Network\nDESCRIPTION: This diagram represents how a `Practitioner` is linked to a `Network (Organization)` through `PractitionerRole` resources.  Each `PractitionerRole` connects the practitioner to an `Organization` (e.g., a hospital) and a specific network via the `network` attribute in the `PractitionerRole` extension defined by the PDEX implementation guide.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/administration/provider-directory/provider-networks.md#_snippet_1\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart LR\n\tA[\"<b>Practitioner</b>\\nDr. Alice Smith\"] ---> E[\"<b>PractitionerRole</b>\"]\n\tA ---> F[\"<b>PractitionerRole</b>\"]\n\tE -->|\"organization\"| H[\"<b>Organization</b>#110;Hospital 1\"]\n\tF -->|\"organization\"| I[\"<b>Organization</b>#110;Hospital 2\"]\n\tE -->|\"network\"| G[\"<b>Network (Organization) </b>#110;Acme Insurance Standard Network\"]\n\tF -->|\"network\"| G\n```\n\n----------------------------------------\n\nTITLE: Search Users with SCIM (curl)\nDESCRIPTION: This command searches for users in Medplum using the SCIM API. It sends a GET request to the `/scim/v2/Users` endpoint. The `Authorization` header is required and should contain a valid access token.  Additional query parameters can be added to the URL to filter the search results.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/api/scim/users.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ncurl https://api.medplum.com/scim/v2/Users \\\n -H \"Authorization: Bearer MY_ACCESS_TOKEN\"\n```\n\n----------------------------------------\n\nTITLE: Run server with profiler\nDESCRIPTION: Runs the Medplum server with the Node.js built-in profiler enabled. The `NODE_ENV=production` environment variable sets the environment to production, and `--prof` enables the profiler.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/contributing/server-profiling.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nNODE_ENV=production node --prof dist/index.js\n```\n\n----------------------------------------\n\nTITLE: Create PostgreSQL User\nDESCRIPTION: Creates a PostgreSQL user named 'medplum' with the password 'medplum'.  This user will be granted access to the 'medplum' database.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/self-hosting/install-on-ubuntu.md#_snippet_3\n\nLANGUAGE: PLpgSQL\nCODE:\n```\nCREATE USER medplum WITH PASSWORD 'medplum';\n```\n\n----------------------------------------\n\nTITLE: ValueSet FHIR structure JSON\nDESCRIPTION: This JSON snippet shows the structure of a FHIR ValueSet resource, including properties like `resourceType`, `url`, `name`, `title`, `status`, and `expansion`. The `expansion` block contains information about the ValueSet's content, including system, code, and display properties for each concept.\nSOURCE: https://github.com/medplum/medplum/blob/main/examples/medplum-valueset-selector/README.md#_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"resourceType\": \"ValueSet\",\n  \"url\": \"http://example.org/custom-allergies\",\n  \"name\": \"CustomAllergies\",\n  \"title\": \"Custom Allergies Value Set\",\n  \"status\": \"active\",\n  \"expansion\": {\n    \"identifier\": \"http://example.org/custom-allergies\",\n    \"timestamp\": \"2024-01-21T00:00:00Z\",\n    \"contains\": [\n      {\n        \"system\": \"http://example.org/custom-allergies\",\n        \"code\": \"apple\",\n        \"display\": \"Apple\"\n      }\n      // ... additional codes\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Filtering Resource Properties\nDESCRIPTION: Filters the properties of the Questionnaire resource to exclude inherited properties from the base Resource definition. The resulting filtered properties are then passed to the ResourcePropertiesTable component for rendering.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/api/fhir/resources/questionnaire.mdx#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\ndefinition.properties.filter((p) => !(p.inherited && p.base.includes('Resource')))\n```\n\n----------------------------------------\n\nTITLE: ObservationDefinition for CO2 (TS)\nDESCRIPTION: Defines an ObservationDefinition resource for CO2. This resource defines how CO2 levels are represented and interpreted.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/careplans/diagnostic-catalog/diagnostic-catalog.mdx#_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\n{ExampleCode}\n```\n\n----------------------------------------\n\nTITLE: Run the app in development mode Bash\nDESCRIPTION: This command starts the application in development mode using npm. It typically runs a script defined in the `package.json` file, which may involve starting a development server with hot reloading and other development-specific features. The application is expected to run on `http://localhost:3000/`.\nSOURCE: https://github.com/medplum/medplum/blob/main/examples/medplum-valueset-selector/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Deploy Bot Lambda Layer\nDESCRIPTION: This script builds and deploys the AWS Lambda Layer required for Medplum Bots. It first clones the Medplum repository, then navigates to the repository and executes the `deploy-bot-layer.sh` script. This is an optional step, only needed if you use Medplum Bots.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/self-hosting/install-on-aws.md#_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/medplum/medplum.git medplum\ncd medplum\n./scripts/deploy-bot-layer.sh\n```\n\n----------------------------------------\n\nTITLE: Deploy Medplum Bot via CLI\nDESCRIPTION: This command deploys a specific Medplum bot to the Medplum platform using the Medplum CLI. It requires the bot's name as a parameter to identify which bot to deploy. This command uploads the built bot code to Medplum.\nSOURCE: https://github.com/medplum/medplum/blob/main/examples/medplum-demo-bots/README.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpx medplum bot deploy sample-account-setup\n```\n\n----------------------------------------\n\nTITLE: ActivityDefinition for Estradiol Procedure (TS)\nDESCRIPTION: Defines an ActivityDefinition resource for an Estradiol procedure using TypeScript. This defines a procedure specific to women's health.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/careplans/diagnostic-catalog/diagnostic-catalog.mdx#_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\n{ExampleCode}\n```\n\n----------------------------------------\n\nTITLE: Invalid FHIR Resource Response (JSON)\nDESCRIPTION: This JSON snippet represents an example of an OperationOutcome returned by the `$validate` operation when a FHIR resource is invalid.  It shows a severity of \"error\" and a code of \"structure\", along with a details message indicating the specific validation error (e.g., \"Invalid additional property \\\"Patient.foo\\\"\").\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/api/fhir/operations/validate-a-resource.mdx#_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"resourceType\": \"OperationOutcome\",\n  \"id\": \"3820fda7-c6d4-4207-b597-90631f0881f9\",\n  \"issue\": [\n    {\n      \"severity\": \"error\",\n      \"code\": \"structure\",\n      \"details\": { \"text\": \"Invalid additional property \\\"Patient.foo\\\"\" },\n      \"expression\": [\"Patient.foo\"]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Mantine CSS Styles\nDESCRIPTION: Imports the Mantine CSS styles into the application's `index.tsx` file. This is required to apply the Mantine styles to the React components.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/react/index.mdx#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport '@mantine/core/styles.css';\n```\n\n----------------------------------------\n\nTITLE: SQL Query for Patient by ID\nDESCRIPTION: Demonstrates the SQL query generated for the FHIR search `Patient?_id=c5a1e9bc-b627-4520-8a1c-cb6907a6e6c4`. It shows how the `_id` search parameter is translated into a `WHERE` clause in the SQL query. The query also includes a `deleted=false` filter, which is added to all queries by default.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/contributing/search-architecture.md#_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\n-- Only retrieve necessary data from the associated DB table\nSELECT \"Patient\".\"id\", \"Patient\".\"content\" FROM \"Patient\"\n-- `deleted=false` filter added to all queries by default\nWHERE (\"Patient\".\"deleted\"=false AND \"Patient\".\"id\"='c5a1e9bc-b627-4520-8a1c-cb6907a6e6c4')\n```\n\n----------------------------------------\n\nTITLE: Starting the Expo App\nDESCRIPTION: This shell command starts the Expo development server, allowing you to run the React Native application in a web browser or on a mobile device emulator.\nSOURCE: https://github.com/medplum/medplum/blob/main/examples/medplum-react-native-example/README.md#_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nnpx expo start\n```\n\n----------------------------------------\n\nTITLE: Running all tests for all packages - Bash\nDESCRIPTION: This command runs all tests defined across all packages within the Medplum project. It relies on the `npm t` command, which is typically configured in the project's `package.json` file to execute the test suite.  It is executed from the root directory of the project.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/contributing/testing.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm t\n```\n\n----------------------------------------\n\nTITLE: Install Medplum CLI as Dependency (npm)\nDESCRIPTION: Installs the Medplum CLI as a project dependency using npm. This adds the Medplum CLI to your project's `node_modules` directory and `package.json` file. Requires Node.js and npm to be installed.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/cli/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @medplum/cli\n```\n\n----------------------------------------\n\nTITLE: Check Backend API Health\nDESCRIPTION: This command tests the health endpoint of the backend API.  A successful response indicates that the API is operational. Replace `api.yourdomain.com` with the actual domain.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/self-hosting/install-on-gcp.md#_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\ncurl https://api.yourdomain.com/health\n```\n\n----------------------------------------\n\nTITLE: Importing Docusaurus Components (JavaScript)\nDESCRIPTION: This snippet imports necessary components from the Docusaurus library for creating interactive documentation. It includes `Link`, `Tabs`, and `TabItem` for navigation and tabbed content, as well as custom components `ResourcePropertiesTable` and `SearchParamsTable` for displaying resource properties.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/api/fhir/datatypes/population.mdx#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport Link from '@docusaurus/Link';\nimport Tabs from '@theme/Tabs';\nimport TabItem from '@theme/TabItem';\nimport definition from '@site/static/data/datatypeDefinitions/population.json';\nimport { ResourcePropertiesTable, SearchParamsTable } from '@site/src/components/ResourceTables';\n```\n\n----------------------------------------\n\nTITLE: MedicationKnowledge with SBD and SBDG Codes (RxNorm)\nDESCRIPTION: This example demonstrates a MedicationKnowledge resource with both Semantic Branded Drug (SBD) and Semantic Branded Drug Form Group (SBDG) codes from RxNorm. It specifies the resource type as 'MedicationKnowledge' and includes coding information for both the drug and its form.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/medications/formulary/index.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  resourceType: \"MedicationKnowledge\",\n  code: {\n    coding: [\n      {\n        system: \"http://www.nlm.nih.gov/research/umls/rxnorm\",\n        code: \"1049640\",\n        display: \"acetaminophen 325 MG / oxycodone hydrochloride 5 MG Oral Tablet [Percocet]\"\n      },\n      {\n        system: \"http://www.nlm.nih.gov/research/umls/rxnorm\",\n        code: \"1185784\",\n        display: \"Percocet Pill\"\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Token Exchange with Auth Code - Response\nDESCRIPTION: Sample response for a successful token exchange with authorization code. The response contains `access_token`, `id_token`, `token_type`, and `expires_in` in JSON format.  The `Content-Type` header is set to `application/json`.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/api/oauth/token.md#_snippet_2\n\nLANGUAGE: JSON\nCODE:\n```\nHTTP/1.1 200 OK\n\nContent-Type: application/json\n\n{\n    \"access_token\":\"eyJz9sdfsdfsdfsd\",\n    \"id_token\":\"dmcxd329ujdmkemkd349r\",\n    \"token_type\":\"Bearer\",\n    \"expires_in\":3600\n}\n```\n\n----------------------------------------\n\nTITLE: Clone Medplum Repository\nDESCRIPTION: Clones the Medplum repository and navigates to the Terraform GCP directory, preparing for infrastructure deployment.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/self-hosting/install-on-gcp.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/medplum/medplum\ncd terraform/gcp/\n```\n\n----------------------------------------\n\nTITLE: Prepare Secret Data (JSON)\nDESCRIPTION: Creates a JSON file containing the Medplum application configuration, including database and Redis connection details. Replace YOUR_DB_HOST and YOUR_REDIS_HOST with appropriate values.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/self-hosting/install-on-gcp.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncat <<EOF > secret_data.json\n{\n  \"port\": 8103,\n  \"baseUrl\": \"http://localhost:8103/\",\n  \"issuer\": \"http://localhost:8103/\",\n  \"audience\": \"http://localhost:8103/\",\n  \"jwksUrl\": \"http://localhost:8103/.well-known/jwks.json\",\n  \"authorizeUrl\": \"http://localhost:8103/oauth2/authorize\",\n  \"tokenUrl\": \"http://localhost:8103/oauth2/token\",\n  \"userInfoUrl\": \"http://localhost:8103/oauth2/userinfo\",\n  \"appBaseUrl\": \"http://localhost:3000/\",\n  \"binaryStorage\": \"file:./binary/\",\n  \"storageBaseUrl\": \"http://localhost:8103/storage/\",\n  \"signingKeyId\": \"my-key-id\",\n  \"signingKey\": \"-----BEGIN RSA PRIVATE KEY-----\\nProc-Type: 4,ENCRYPTED\\nDEK-Info: DES-EDE3-CBC,4C2E1B45FFF24610\\n\\n0SOZn3P0Bd9lZgv2eSWWLMQ4JqxhbJ+dWM+V1TtSwqxe3VP24z4bys5VRpmsEpqn\\nROKxdXCeqAbYsLo8V9dOQvwaxo2TTWFgUFj7sQYklyr1g5S9+KCp+1B/5E7UgNDd\\nhXA2u4uhz6Bck0mTPwoy3oHjNUaNBZilMdwiR3qeiGYC0DyX69+IJgwFUTt2a1jc\\nU5aUyellGYa47QRZcePgyk7Cl4FcBW9YA0pS4rNpO4wNVN6GGuZti4c0Y3PHXSRE\\nDse95ZN9iWBtufjpjk4s8MX0rzqMWcjbAhTs2N5YBgKsv2czm5YMdXsYH6tGL7a1\\nPyNia0r1AnHAD3pK+vzaZGaLrvubZikrt7dr+Tp1U45b2YaZlMMaXwGU6WEK7kwr\\n4sbl9hqQf/+oqBAdyJIgxIhFumK+ukUIlCV+b/XUuoatDXD127JwEyEM78Nzg5Bc\\n/bKGEo9uehXpuIi0jp1BtegUIkfoV543PZZgslGVdzq0vXOir+PiHJBLlbWXXSAb\\nEWKOQW2/bZ8JIHhi3Ag7KDlTVF1XetJ2TqYOOP9izfMp4lJ2vLtkH7P+jEKG8z6b\\nurnXYkDWYEbzhG1frEssVQN0GP3wdyEK+n6LBCuj52Uje/M7LwahPX6dJRYPOpL9\\nbApSNNJLahRRQREHp1wqEWism3r4+yRa4ha/BGc4dfKTsUtJEiHqdWvDzomN5C6A\\nC7u3zjUv3ZZLoCLCbBUsiVdlJZJ5u/ymky5LKVbsscmZj93HE7/FL56I17bmTlDo\\npvkJWk9SmVXvs3lwMMBRbykj974ZWEMw9EjCoP9rDJ0UNsy2kVRFfXoPMKL5S01D\\niBRVSZB7k7qJofGtlBpDfooHOw4uAJ/6A0l8vpOm/Vpk8tdiRLL/RuzEKz5G3ltm\\nrXPn83avfNc5+EvaM8IIKyPTvHegE5XszGK3NNlzUO1Ydze/xQPhdrp4QYFzJOuB\\nXVIazLeXSJ5EjJ1ylWAWgNzsx+42NWeA2CZAZz+IJFw6C2iHEB8f8Nw6iJmFfm3I\\nWsrvCRbuwIsW9fjtHTpOCCpxXu5EcvN5BKwFXeBatB7xqR6EnPbk6xDxZdroEKhH\\nEZU4PlHu+BwTKKCwa4Ynwn1Qpu453qgNzaxgHLbdFipW5/AkreNWK5Il+5Bl8G90\\no/MhO66eBXv3JbOtMUAqs9+Qyl5K1TaNqbStWmsiq+36Niz4ZRg7L/7W6zjG/hTH\\npignoDyJYPjFFQ/sTsTUv0oKVI6KIYFlIHBDnGGnH09926sd+U/isSeMDP+Qa32m\\nhHzScmDPsdyjdFsdXsJjZHe7mqCijGXu/LW4CoWoqln4y29c5BMJazwnIwegrLjJ\\nQeW6InUhGZLy+uJbs1ZWxlqzOmMoTx2VVgoABdOHn/mQEC/AreUdvPMkVVYEuxel\\nmAMOoefncx/EPxn7gY2SrEdmSnk9VuzR30KMC1qSw196QbQHR1G2vxKcXPwe/LH9\\n7Pa0gwwqCaS2ggYt5Rvlxm7DeBIGHzGtPILnl1qyVGaqn64244JeLi9bY/O+E+uq\\nBSgQmt2NwPK2RQgzzt/ETUXoOFHKiwS1v2Vp4H2PPDI8CzvlRralsQ==\\n-----END RSA PRIVATE KEY-----\",\n  \"signingKeyPassphrase\": \"top_secret\",\n  \"supportEmail\": \"\\\"Medplum\\\" <support@medplum.com>\",\n  \"googleClientId\": \"397236612778-c0b5tnjv98frbo1tfuuha5vkme3cmq4s.apps.googleusercontent.com\",\n  \"googleClientSecret\": \"\",\n  \"recaptchaSiteKey\": \"6LfHdsYdAAAAAC0uLnnRrDrhcXnziiUwKd8VtLNq\",\n  \"recaptchaSecretKey\": \"6LfHdsYdAAAAAH9dN154jbJ3zpQife3xaiTvPChL\",\n  \"adminClientId\": \"2a4b77f2-4d4e-43c6-9b01-330eb5ca772f\",\n  \"maxJsonSize\": \"1mb\",\n  \"maxBatchSize\": \"50mb\",\n  \"botLambdaRoleArn\": \"\",\n  \"botLambdaLayerName\": \"medplum-bot-layer\",\n  \"vmContextBotsEnabled\": true,\n  \"defaultBotRuntimeVersion\": \"vmcontext\",\n  \"allowedOrigins\": \"*\",\n  \"introspectionEnabled\": true,\n  \"database\": {\n    \"host\": \"YOUR_DB_HOST\",\n    \"port\": 5432,\n    \"dbname\": \"medplum\",\n    \"username\": \"medplum\",\n    \"password\": \"medplum\"\n  },\n  \"redis\": {\n    \"host\": \"YOUR_REDIS_HOST\",\n    \"port\": 6379\n  },\n  \"bullmq\": {\n    \"removeOnFail\": { \"count\": 1 },\n    \"removeOnComplete\": { \"count\": 1 }\n  },\n  \"shutdownTimeoutMilliseconds\": 30000,\n  \"chainedSearchWithReferenceTables\": true\n}\nEOF\n```\n\n----------------------------------------\n\nTITLE: Create Organization A (JSON)\nDESCRIPTION: This JSON snippet defines an Organization resource representing 'Organization A'.  It sets the resourceType to `Organization` and the `name` property to 'Organization A'.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/access/multi-tenant-access-policy.md#_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"resourceType\": \"Organization\",\n    \"name\": \"Organization A\"\n}\n```\n\n----------------------------------------\n\nTITLE: Reconfigure Medplum\nDESCRIPTION: Reconfigures the Medplum package using dpkg-reconfigure. This is used to set the app domain, api domain, and database host.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/self-hosting/install-on-ubuntu.md#_snippet_28\n\nLANGUAGE: bash\nCODE:\n```\nsudo dpkg-reconfigure medplum\n```\n\n----------------------------------------\n\nTITLE: Internal Reference Example\nDESCRIPTION: Demonstrates how to create a patient and encounter whose subject is the created patient using an internal reference. This involves using a temporary UUID in the `fullUrl` field of the patient and referencing it in the encounter's `subject` field. The full code is available in the ExampleCode variable.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/fhir-datastore/fhir-batch-requests.mdx#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n{ExampleCode}\n```\n\n----------------------------------------\n\nTITLE: ActivityDefinition for Testosterone Procedure (TS)\nDESCRIPTION: Defines an ActivityDefinition resource for a Testosterone procedure. This code snippet uses TypeScript to define the details of a laboratory procedure, which will later be referenced from the PlanDefinition resource.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/careplans/diagnostic-catalog/diagnostic-catalog.mdx#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n{ExampleCode}\n```\n\n----------------------------------------\n\nTITLE: Adding Trace ID to Medplum GET Request (cURL)\nDESCRIPTION: This code snippet demonstrates how to add a custom trace ID to a Medplum GET request using cURL. The `X-TRACE-ID` header is included in the cURL command to enable log correlation. Requires a valid `TOKEN` environment variable for authorization.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/integration/log-streaming.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl https://api.medplum.com/fhir/R4/Patient/homer-simpson \\\n  -H \"Authorization: Bearer $TOKEN\" \\\n  -H \"Content-Type: application/fhir+json\" \\\n  -H \"X-TRACE-ID: \"MY-TRACE-ID\"\n```\n\n----------------------------------------\n\nTITLE: Create Practitioner for Organization B (JSON)\nDESCRIPTION: This JSON snippet defines a `Practitioner` resource and associates them with `Organization B`. It uses the `membership.access` array to link the practitioner to an `AccessPolicy` and sets the `current_organization` parameter to `Organization/{{organization_b}}`. This ensures that the practitioner only has access to resources belonging to Organization B, according to the access policy.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/access/multi-tenant-access-policy.md#_snippet_6\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"resourceType\": \"Practitioner\",\n    \"firstName\": \"Practitioner\",\n    \"lastName\": \"B.1\",\n    \"email\": \"practitioner.b.1@example.com\",\n    \"sendEmail\": \"false\",\n    \"password\": \"foobar\",\n    \"membership\": {\n        \"access\": [\n            {\n                \"policy\": {\n                    \"reference\": \"AccessPolicy/{{access_policy}}\"\n                },\n\n                \"parameter\": [\n                    {\n                        \"name\": \"current_organization\",\n                        \"valueReference\": {\n                            \"reference\": \"Organization/{{organization_b}}\"\n                        }\n                    }\n                ]\n\n            }\n        ]\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Running tests with coverage - Bash\nDESCRIPTION: These commands demonstrate how to collect code coverage statistics while running tests. The `--coverage` flag, preceded by `--` to separate npm arguments, instructs the test runner to generate a coverage report after the tests are executed. These commands work with all the previously described ways to run tests (all packages, single package, single file, single test).\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/contributing/testing.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpm t -- --coverage\nnpm t -- src/App.test.tsx --coverage\nnpm t -- src/App.test.tsx -t 'Click logo' --coverage\n```\n\n----------------------------------------\n\nTITLE: Error Response - Missing Project Name\nDESCRIPTION: Example of an error response when the project name is not provided. The response is a FHIR OperationOutcome resource indicating an invalid input parameter 'name'.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/api/fhir/operations/project-init.md#_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"resourceType\": \"OperationOutcome\",\n  \"id\": \"3820fda7-c6d4-4207-b597-90631f0881f9\",\n  \"issue\": [\n    {\n      \"severity\": \"error\",\n      \"code\": \"invalid\",\n      \"details\": { \"text\": \"Expected required input parameter 'name'\" },\n      \"expression\": [\"Parameters.parameter\"]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Medplum Project Switch Command\nDESCRIPTION: Executes the `medplum project switch` command to switch to a different project. Replace `<projectId>` with the target project ID.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/cli/index.md#_snippet_21\n\nLANGUAGE: bash\nCODE:\n```\nmedplum project switch <projectId>\n```\n\n----------------------------------------\n\nTITLE: Search Human Project Members - cURL\nDESCRIPTION: Searches for ProjectMembership resources excluding client bot members using a cURL command. This retrieves a list of all human members associated with a project by sending a direct API request. cURL must be installed. The output is a list of ProjectMembership resources in FHIR format, excluding client bots.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/auth/user-management-guide/user-management-guide.md#_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\n{ExampleCode}\n```\n\n----------------------------------------\n\nTITLE: Listing Keystore Contents (Bash)\nDESCRIPTION: Shows how to use the `keytool` command to list the contents of a keystore file, specifically for inspecting an RDS CA bundle. This is necessary to extract the correct certificate when using AWS Parameter Store.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/self-hosting/config-settings.md#_snippet_9\n\nLANGUAGE: sh\nCODE:\n```\nkeytool -list -keystore rds-combined-ca-bundle.pem\n```\n\n----------------------------------------\n\nTITLE: Start Docker Compose\nDESCRIPTION: Starts the PostgreSQL and Redis background services using Docker Compose.  This command reads the `docker-compose.yml` file and deploys the services with the necessary Medplum configurations and database migrations. The services are typically run from the root `medplum` directory.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/contributing/run-the-stack.md#_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\ndocker-compose up\n```\n\nLANGUAGE: sh\nCODE:\n```\ndocker compose up\n```\n\n----------------------------------------\n\nTITLE: Defining ValueSet in FHIR (JavaScript)\nDESCRIPTION: This snippet demonstrates how to create a ValueSet resource to define a grouping of codes from a CodeSystem. The ValueSet resource includes a canonical URL and a `compose` element with an `include` element that references the entire CodeSystem by its URL.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/terminology/local-codes.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"resourceType\": \"ValueSet\",\n  \"url\": \"http://example.com/ValueSet/medications\",\n  \"status\": \"active\",\n  \"compose\": {\n    \"include\": [\n      { \"system\": \"http://example.com/CodeSystem/local-medications\" }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Filtering Syntax Example in Medplum (CLI)\nDESCRIPTION: Shows how to use the `_filter` parameter in the Medplum CLI to filter resources based on a specific criteria. The snippet would illustrate the command-line syntax for applying a filter. It assumes the Medplum CLI is installed and configured.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/search/filter-search-parameter.mdx#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n{ExampleCode}\n```\n\n----------------------------------------\n\nTITLE: Configuration Error Response - Google\nDESCRIPTION: Sample HTTP response (302 Found) from the `/oauth2/authorize` endpoint when an error response is received from Google due to configuration errors or other issues. The response includes the `Location` header with the `redirect_uri`, `error=invalid_request`, and a description including the Google-provided error code.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/api/oauth/authorize.md#_snippet_15\n\nLANGUAGE: HTTP\nCODE:\n```\nHTTP 1.1 302\nFound Location: https://client_redirect_uri?error=invalid_request&\n                  error_description=Google+Error+-+[status code]+[Google provided error code]\n```\n\n----------------------------------------\n\nTITLE: Validating CodeSystem Codes SQL\nDESCRIPTION: Validates whether a CodeSystem contains any of a set of codes. First, it retrieves the CodeSystem ID based on the URL. Then, it checks if the codes exist in the Coding table for the specified CodeSystem ID.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/contributing/terminology-architecture.md#_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\n-- Get CodeSystem by URL\nSELECT id, content FROM \"CodeSystem\" WHERE url = ?;\n\n-- Check whether codes exist\nSELECT id, code, display FROM \"Coding\"\nWHERE code IN (?, ?) AND system = ?;\n```\n\n----------------------------------------\n\nTITLE: Build Docker Image (Bash)\nDESCRIPTION: This command builds a Docker image for the Medplum Agent. It includes build arguments for the Git SHA and Medplum version. It requires Docker to be installed and available.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/agent/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker build -t medplum-agent:latest \\\n  --build-arg GIT_SHA=$(git log -1 --format=format:%H) \\\n  --build-arg MEDPLUM_VERSION=3.0.3 .\n```\n\n----------------------------------------\n\nTITLE: Robots.txt Disallow All\nDESCRIPTION: This robots.txt file configuration instructs all user agents to disallow crawling and indexing of the entire website. The 'User-agent: *' line applies the rule to all robots, and the 'Disallow: /' line disallows access to the root directory, effectively blocking the entire site.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/app/static/robots.txt#_snippet_0\n\nLANGUAGE: txt\nCODE:\n```\nUser-agent: *\nDisallow: /\n```\n\n----------------------------------------\n\nTITLE: Example ConceptMap Resource\nDESCRIPTION: This is an example of a ConceptMap resource in JSON format, which maps codes from SNOMED CT to LOINC and CPT.  The `url` field is the canonical URL. The `sourceCanonical` field indicates the source ValueSet.  The `group` array specifies the mappings between source and target code systems. The `element` array defines specific code mappings, including the source code, target code, display, and equivalence.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/api/fhir/operations/conceptmap-translate.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"resourceType\": \"ConceptMap\",\n  \"url\": \"http://example.com/concept-map\",\n  \"status\": \"active\",\n  \"sourceCanonical\": \"http://example.com/labs\",\n  \"group\": [\n    {\n      \"source\": \"http://snomed.info/sct\",\n      \"target\": \"http://loinc.org\",\n      \"element\": [\n        {\n          \"code\": \"313444004\",\n          \"target\": [\n            {\n              \"code\": \"15067-2\",\n              \"display\": \"Follitropin Qn\",\n              \"equivalence\": \"equivalent\"\n            }\n          ]\n        }\n      ]\n    },\n    {\n      \"source\": \"http://snomed.info/sct\",\n      \"target\": \"http://www.ama-assn.org/go/cpt\",\n      \"element\": [\n        {\n          \"code\": \"313444004\",\n          \"target\": [{ \"code\": \"83001\", \"equivalence\": \"equivalent\" }]\n        }\n      ]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: HL7 Acknowledgement Message\nDESCRIPTION: This is an example HL7 acknowledgement message that the Bot sends back to the EHR after processing the HL7 message. It includes the message header (MSH) and message acknowledgement (MSA) segments.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/bots/hl7-into-fhir.mdx#_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nMSH|^~\\&|CL|PDMT|Primary||2022-05-10T16:19:50.244Z||ACK|1652199590244|P|2.5.1\\rMSA|AA|203598|OK\n```\n\n----------------------------------------\n\nTITLE: Build bots bash\nDESCRIPTION: This command builds the Medplum Bots, which are used to parse notes into structured data.\nSOURCE: https://github.com/medplum/medplum/blob/main/examples/medplum-chart-demo/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm run build:bots\n```\n\n----------------------------------------\n\nTITLE: Healthcheck JSON response\nDESCRIPTION: Example JSON response of the healthcheck endpoint, confirming that the Medplum API server is running, and is connected to Postgres and Redis\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/contributing/run-the-stack.md#_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{ \"ok\": true, \"version\": \"<MEDPLUM_VERSION>\", \"postgres\": true, \"redis\": true }\n```\n\n----------------------------------------\n\nTITLE: Medplum Project List Command\nDESCRIPTION: Executes the `medplum project list` command, which lists all available project IDs and names.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/cli/index.md#_snippet_20\n\nLANGUAGE: bash\nCODE:\n```\nmedplum project list\n```\n\n----------------------------------------\n\nTITLE: Run Artillery Load Test\nDESCRIPTION: Executes an Artillery load test using the specified configuration file (healthcheck.yml).  This command initiates the virtual users defined in the configuration to simulate load on the target server.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/self-hosting/load-testing.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nartillery run healthcheck.yml\n```\n\n----------------------------------------\n\nTITLE: FHIR Patient Resource with Identifiers from Multiple Hospitals (Alice)\nDESCRIPTION: This JavaScript code represents a FHIR Patient resource with multiple identifiers. Each identifier has a system string indicating the source hospital, and a value representing the medical record number at that hospital. This example shows how Alice's MRNs from Hospital 1 and Hospital 2 are represented.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/blog/2023-08-08-system-strings.mdx#_snippet_1\n\nLANGUAGE: js\nCODE:\n```\n{`{\n  \"resourceType\": \"Patient\",\n  \"name\": [{\"given\": [\"Alice\"]}],\n  \"identifier\": [\n    // MRN - Hospital 1\n    {\n      \"system\": \"http://hospital-1.org\",\n      \"value\": \"12345\"\n    },\n    // MRN - Hospital 2\n    {\n      \"system\": \"http://hospital-2.org\",\n      \"value\": \"98760\"\n    }\n  ]\n}`}\n```\n\n----------------------------------------\n\nTITLE: Update Medplum App Environment\nDESCRIPTION: Updates the `.env` file for the Medplum app with the new base URL for the API server. This ensures the app points to the correct API endpoint.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/self-hosting/install-from-scratch.md#_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\necho \"MEDPLUM_BASE_URL=https://api.example.com\" > .env\n```\n\n----------------------------------------\n\nTITLE: Retrieve Load Balancer IP Address (GCP)\nDESCRIPTION: This command retrieves the external IP address of the CDN external load balancer named 'medplum-elb' from Google Cloud Platform. This IP is then used to configure DNS records.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/self-hosting/install-on-gcp.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ngcloud compute addresses list --global --filter=\"name=('medplum-elb')\"\n```\n\n----------------------------------------\n\nTITLE: Importing React Components (JavaScript)\nDESCRIPTION: Imports necessary React components for rendering the documentation page. Includes components from Docusaurus and custom components for displaying resource tables and search parameters.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/api/fhir/resources/medicinalproductundesirableeffect.mdx#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport Link from '@docusaurus/Link';\nimport Tabs from '@theme/Tabs';\nimport TabItem from '@theme/TabItem';\nimport definition from '@site/static/data/resourceDefinitions/medicinalproductundesirableeffect.json';\nimport { ResourcePropertiesTable, SearchParamsTable } from '@site/src/components/ResourceTables';\n```\n\n----------------------------------------\n\nTITLE: Importing React Components\nDESCRIPTION: Imports necessary React components for creating tabs and links within the documentation page. These components enhance the user interface and navigation.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/api/fhir/resources/evidence.mdx#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport Link from '@docusaurus/Link';\nimport Tabs from '@theme/Tabs';\nimport TabItem from '@theme/TabItem';\n```\n\n----------------------------------------\n\nTITLE: Apply Configuration Terraform Bash\nDESCRIPTION: Applies the Terraform configuration to create or modify resources in the Google Cloud Platform. This command executes the changes defined in the Terraform configuration, provisioning the specified infrastructure.\nSOURCE: https://github.com/medplum/medplum/blob/main/terraform/gcp/README.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nterraform apply\n```\n\n----------------------------------------\n\nTITLE: Copy environment variables file (Bash)\nDESCRIPTION: Copies the default environment variables file (.env.defaults) to .env, allowing users to customize environment variables for the application. This step is necessary to configure the application with specific settings, potentially including API keys or Medplum project details.\nSOURCE: https://github.com/medplum/medplum/blob/main/examples/medplum-eligibility-demo/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncp .env.defaults .env\n```\n\n----------------------------------------\n\nTITLE: Check Medplum Service Status\nDESCRIPTION: Checks the status of the Medplum service using systemctl.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/self-hosting/install-on-ubuntu.md#_snippet_22\n\nLANGUAGE: bash\nCODE:\n```\nsystemctl status medplum\n```\n\n----------------------------------------\n\nTITLE: npm Installation Warnings\nDESCRIPTION: Illustrates common npm installation warnings related to deprecated packages and vulnerabilities.  These warnings often appear during the installation process of Medplum or its dependencies.  The listed dependencies (`trim`, `stable`, `sourcemap-codec`, `@npmcli/move-file`, `rollup-plugin-terser`) are transitive dependencies.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/blog/2023-04-07-dependency-warnings.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nnpm WARN deprecated trim@0.0.1: Use String.prototype.trim() instead\nnpm WARN deprecated stable@0.1.8: Modern JS already guarantees Array#sort() is a stable sort, so this library is deprecated. See the compatibility table on MDN: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort#browser_compatibility\nnpm WARN deprecated sourcemap-codec@1.4.8: Please use @jridgewell/sourcemap-codec instead\nnpm WARN deprecated @npmcli/move-file@2.0.1: This functionality has been moved to @npmcli/fs\nnpm WARN deprecated rollup-plugin-terser@7.0.2: This package has been deprecated and is no longer maintained. Please use @rollup/plugin-terser\n\nadded 3083 packages, and audited 3134 packages in 1m\n\n410 packages are looking for funding\nrun `npm fund` for details\n\n22 vulnerabilities (9 moderate, 13 high)\n\nTo address issues that do not require attention, run:\nnpm audit fix\n\nSome issues need review, and may require choosing\na different dependency.\n\nRun `npm audit` for details.\n```\n\n----------------------------------------\n\nTITLE: Paging Agent Statuses\nDESCRIPTION: These commands demonstrate how to page through the agent statuses using the `_count` and `_offset` parameters. The first command retrieves the first 50 agents, and the second retrieves the next 50 agents, starting from offset 50.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/agent/bulk-status.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nmedplum get 'Agent/$bulk-status?_count=50&_offset=0'\n```\n\nLANGUAGE: bash\nCODE:\n```\nmedplum get 'Agent/$bulk-status?_count=50&_offset=50'\n```\n\n----------------------------------------\n\nTITLE: Prop Change Example (diff)\nDESCRIPTION: Illustrates a prop name change, such as replacing `spacing` with `gap` in the `Stack` component. This highlights the importance of reviewing the Mantine changelog for specific component updates.  This will throw errors if not updated.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/react/mantine-6x-to-7x.mdx#_snippet_6\n\nLANGUAGE: diff\nCODE:\n```\n- <Stack spacing=\"xl\">\n+ <Stack gap=\"xl\">\n```\n\n----------------------------------------\n\nTITLE: Run server with profiler and config\nDESCRIPTION: Runs the Medplum server with the Node.js built-in profiler enabled and a custom config file.  The `NODE_ENV=production` environment variable sets the environment to production, `--prof` enables the profiler, and the config file is passed as an argument.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/contributing/server-profiling.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nNODE_ENV=production node --prof dist/index.js file:medplum.docker.config.json\n```\n\n----------------------------------------\n\nTITLE: Import Statements (JavaScript)\nDESCRIPTION: Imports necessary modules from Docusaurus and a local JSON file.  Includes Link, Tabs, TabItem from '@docusaurus', and a JSON definition for Reference.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/api/fhir/datatypes/reference.mdx#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport Link from '@docusaurus/Link';\nimport Tabs from '@theme/Tabs';\nimport TabItem from '@theme/TabItem';\nimport definition from '@site/static/data/datatypeDefinitions/reference.json';\nimport { ResourcePropertiesTable, SearchParamsTable } from '@site/src/components/ResourceTables';\n```\n\n----------------------------------------\n\nTITLE: Invoke Operation via POST with cURL (alternative)\nDESCRIPTION: This cURL command is an alternative way to invoke the ValueSet/$validate-code operation using a POST request with different parameters.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/api/fhir/operations/index.mdx#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncurl 'https://api.medplum.com/fhir/R4/ValueSet/$validate-code' \\\n  -X POST \\\n  -H \"Content-Type: application/fhir+json\" \\\n  -H \"Authorization: Bearer $MY_ACCESS_TOKEN\" \\\n  -d '{\"resourceType\":\"Parameters\",\"parameter\":[{\"name\":\"url\",\"valueUri\":\"http://hl7.org/fhir/ValueSet/condition-severity\"},{\"name\":\"system\",\"valueUri\":\"http://snomed.info/sct\"},{\"name\":\"code\",\"valueCode\":\"255604002\"}]}'\n```\n\n----------------------------------------\n\nTITLE: Running the Android Emulator\nDESCRIPTION: This shell command starts the React Native application in the Android emulator, allowing testing on a virtual Android device.\nSOURCE: https://github.com/medplum/medplum/blob/main/examples/medplum-react-native-example/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm run android\n```\n\n----------------------------------------\n\nTITLE: Cloning Medplum Repository with Git via HTTPS\nDESCRIPTION: This snippet demonstrates cloning the Medplum repository using Git over HTTPS. This is an alternative to SSH and might be necessary if you encounter permission issues with SSH. Replace `{YOUR GITHUB USERNAME}` with your actual GitHub username.  The cloned repository will be placed in a directory named `medplum`.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/contributing/local-dev-setup/local-dev-setup.md#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ngit clone https://github.com/{YOUR GITHUB USERNAME}/medplum.git medplum\n```\n\n----------------------------------------\n\nTITLE: Profile Adoption - Patient Resource\nDESCRIPTION: This JSON snippet shows a basic Patient resource that includes the `meta.profile` field, referencing the US Core Patient profile. However, it is missing required fields according to the profile, which will result in an error upon validation.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/fhir-datastore/profiles.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"resourceType\": \"Patient\",\n  \"meta\": {\n    \"profile\": [\"http://hl7.org/fhir/us/core/StructureDefinition/us-core-patient\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Filtered ValueSet JSON\nDESCRIPTION: This JSON shows the ValueSet expansion result after applying a filter.  In this case, the filter 'f' has been applied to the administrative-gender ValueSet, resulting in only the 'female' entry being returned in the contains array. This demonstrates how the $expand operation can be used to retrieve a subset of the ValueSet values.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/api/fhir/operations/valueset-expand.mdx#_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"resourceType\": \"ValueSet\",\n  \"url\": \"http://hl7.org/fhir/ValueSet/administrative-gender\",\n  \"expansion\": {\n    \"offset\": 0,\n    \"contains\": [\n      {\n        \"system\": \"http://hl7.org/fhir/administrative-gender\",\n        \"code\": \"female\",\n        \"display\": \"Female\"\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Enriched FHIR Condition Resource Example in TypeScript\nDESCRIPTION: This code demonstrates enriching condition data with a standard ICD-10 code in addition to the local code. This improves interoperability with other systems that understand ICD-10 codes. The snippet includes the local code, the ICD-10 code, and a human-readable text description.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/migration/convert-to-fhir.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Condition } from '@medplum/fhirtypes';\n\nexport const enrichedConditionExample: Condition = {\n  resourceType: 'Condition',\n  id: 'example',\n  code: {\n    coding: [\n      {\n        system: 'http://your-source-system.com/conditions',\n        code: 'HT001',\n        display: 'Hypertension'\n      },\n      {\n        system: 'http://hl7.org/fhir/sid/icd-10',\n        code: 'I10',\n        display: 'Essential (primary) hypertension'\n      }\n    ],\n    text: 'Hypertension'\n  },\n  subject: {\n    reference: 'Patient/????'\n  }\n};\n\n```\n\n----------------------------------------\n\nTITLE: Compiling TypeScript to JavaScript with NPM\nDESCRIPTION: This snippet demonstrates how to compile TypeScript code to JavaScript using the `npm run build` command. This command typically executes the `tsc` compiler, which translates the TypeScript code into a JavaScript file that can be deployed as a Medplum Bot.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/bots/bots-in-production.md#_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Searching by Tag using _tag - CLI\nDESCRIPTION: Demonstrates how to search for Observation resources based on a specific tag (critical) in the `meta.tag` field using the `_tag` parameter in the command-line interface (CLI). Requires the Medplum CLI to be installed and configured.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/search/advanced-search-parameters.mdx#_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\n{ExampleCode}\n```\n\n----------------------------------------\n\nTITLE: Apply Inline Font Styling in pdfmake\nDESCRIPTION: This code shows how to apply inline font styling to specific text elements within a pdfmake document definition. You can use the `font` property within a text object to override the default font for individual paragraphs or sections.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/bots/creating-a-pdf.mdx#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst docDefinition = {\n  content: [\n    // If you don't need styles, you can use a simple string to define a paragraph\n    'This is a standard paragraph, using default style',\n\n    // Using a { text: '...' } object lets you set styling properties\n    {\n      text: 'Hello world',\n      font: 'yourFontName',\n    },\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: ActivityDefinition for Lab Example\nDESCRIPTION: Shows an example of how to model a lab assay using FHIR ActivityDefinition.  Highlights the inclusion of LOINC, SNOMED and CDISC codes, as well as links to SpecimenDefinition. Part of a COVID-19 data model.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/src/pages/solutions/life-sciences.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nhttps://github.com/medplum/medplum/blob/main/packages/react/src/stories/covid19.ts#L678\n```\n\n----------------------------------------\n\nTITLE: Importing Docusaurus Components (JavaScript)\nDESCRIPTION: This snippet imports necessary components from Docusaurus, such as Link, Tabs, and TabItem, which are used to create interactive elements and navigation within the documentation page.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/api/fhir/datatypes/usagecontext.mdx#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport Link from '@docusaurus/Link';\nimport Tabs from '@theme/Tabs';\nimport TabItem from '@theme/TabItem';\n```\n\n----------------------------------------\n\nTITLE: Run development server - npm\nDESCRIPTION: Starts the development server for the Medplum WebSocket Subscription Demo project. This command allows the application to be accessed locally for testing and development purposes.\nSOURCE: https://github.com/medplum/medplum/blob/main/examples/medplum-websocket-subscriptions-demo/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Copying Environment Variables\nDESCRIPTION: This command copies the default environment variables file (`.env.defaults`) to a new file named `.env`. This allows developers to override the default values with their own configuration settings.  It is commonly used to configure application settings for different environments or specific deployments.\nSOURCE: https://github.com/medplum/medplum/blob/main/examples/medplum-hello-world/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncp .env.defaults .env\n```\n\n----------------------------------------\n\nTITLE: Invoke Operation via POST with cURL\nDESCRIPTION: This cURL command invokes the ValueSet/$validate-code operation using a POST request. It sends a JSON payload with the url and coding parameters to the Medplum API endpoint. The Authorization header includes the Bearer token for authentication.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/api/fhir/operations/index.mdx#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl 'https://api.medplum.com/fhir/R4/ValueSet/$validate-code' \\\n  -X POST \\\n  -H \"Content-Type: application/fhir+json\" \\\n  -H \"Authorization: Bearer $MY_ACCESS_TOKEN\" \\\n  -d '{\"resourceType\":\"Parameters\",\"parameter\":[{\"name\":\"url\",\"valueUri\":\"http://hl7.org/fhir/ValueSet/condition-severity\"},{\"name\":\"coding\",\"valueCoding\":{\"system\":\"http://snomed.info/sct\",\"code\":\"255604002\"}}]}'\n```\n\n----------------------------------------\n\nTITLE: Searching for a Summary using _summary - Typescript\nDESCRIPTION: Demonstrates how to search for a summary representation of a Patient resource using the `_summary` parameter in Typescript.  This retrieves only elements marked as `summary` in the resource definition. Requires the Medplum SDK and a configured Medplum client.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/search/advanced-search-parameters.mdx#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n{ExampleCode}\n```\n\n----------------------------------------\n\nTITLE: Check Medplum Logs\nDESCRIPTION: Checks the logs for the Medplum service using journalctl.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/self-hosting/install-on-ubuntu.md#_snippet_26\n\nLANGUAGE: bash\nCODE:\n```\njournalctl -u medplum\n```\n\n----------------------------------------\n\nTITLE: Medplum Login Command\nDESCRIPTION: Executes the `medplum login` command, which opens a web browser to authenticate.  Credentials are then stored at `~/.medplum/credentials` for future use.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/cli/index.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nmedplum login\n```\n\n----------------------------------------\n\nTITLE: FHIR Scheduling Resources Diagram\nDESCRIPTION: This Mermaid diagram visualizes the relationships between the core FHIR resources used in scheduling: Schedule, Slot, Appointment, and Patient. It shows how Slots are associated with a Schedule, how Appointments utilize Slots, and how Appointments relate to Patients through participants.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/scheduling/index.md#_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart BT\n   schedule[<table><thead><tr><th>Schedule</th></tr></thead><tbody><tr><td>Dr. Alice Smith's Schedule</td></tr></tbody></table>]\n   patient[<table><thead><tr><th>Patient</th></tr></thead><tbody><tr><td>Homer Simpson</td></tr></tbody></table>]\n    subgraph availability [<i>Availability</i>]\n   slot1[<table><thead><tr><th>Slot</th></tr></thead><tbody><tr><td>Monday, June 3rd 2024</td></tr><tr><td> 11:00am - 11:30am</td><tr></tbody></table>]\n   slot2[<table><thead><tr><th>Slot</th></tr></thead><tbody><tr><td>Monday, June 3rd 2024</td></tr><tr><td> 11:30am - 12:00pm</td><tr></tbody></table>]\n   end\n\n   subgraph appointments [<i>Appointments</i>]\n   app1[<table><thead><tr><th>Appointment</th></tr></thead><tbody><tr><td>Homer Simpson</td></tr><tr><td>Fall Assessment</td><tr></tbody></table>]\n   end\n\n   slot1 --> schedule\n   slot2 --> schedule\n   app1 -->|slot| slot1\n   app1 -->|slot| slot2\n\n   app1 -->|participant| patient\n\n```\n\n----------------------------------------\n\nTITLE: Displaying Resource Properties Table\nDESCRIPTION: Renders a table displaying resource properties, filtering out inherited properties from the base Resource.  The properties are obtained from a JSON definition.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/api/fhir/resources/careplan.mdx#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n<ResourcePropertiesTable\n  properties={definition.properties.filter((p) => !(p.inherited && p.base.includes('Resource')))}\n/>\n```\n\n----------------------------------------\n\nTITLE: Creating Docker Buildx Multiarch Driver\nDESCRIPTION: This command creates a new multiarch Docker driver named 'multiarch' using the 'docker-container' driver. This resolves the 'multiple platforms feature is currently not supported for docker driver' error during docker builds by enabling support for building images for multiple architectures.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/server/README.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ndocker buildx create --name multiarch --driver docker-container --use\n```\n\n----------------------------------------\n\nTITLE: ValueSet Error Response (JavaScript)\nDESCRIPTION: This JavaScript code snippet demonstrates an example error response when a specified ValueSet cannot be found by URL. The response is an OperationOutcome resource with an issue indicating the error.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/api/fhir/operations/valueset-validate-code.mdx#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    \"resourceType\": \"OperationOutcome\",\n    \"issue\": [\n        {\n            \"severity\": \"error\"\n            \"code\": \"invalid\",\n            \"details\": {\n                \"text\": \"ValueSet http://example.com/ValueSet/missing not found\"\n            },\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Successful Bot Deployment Output\nDESCRIPTION: This is an example of the output you will receive in the command prompt after successfully deploying a Medplum bot. The output includes the new bot version ID and confirmation that the deployment was successful.\nSOURCE: https://github.com/medplum/medplum/blob/main/examples/medplum-demo-bots/README.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nUpdate bot code.....\nSuccess! New bot version: 7fcbc375-4192-471c-b874-b3f0d4676226\nDeploying bot...\nDeploy result: All OK\n```\n\n----------------------------------------\n\nTITLE: Create Kubernetes TLS Secret\nDESCRIPTION: Creates a Kubernetes TLS secret using the exported certificate and key files. This secret can be used to configure TLS for ingress or other services within the Kubernetes cluster, securing communication with HTTPS.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/self-hosting/install-on-azure.md#_snippet_16\n\nLANGUAGE: Shell\nCODE:\n```\n# Create the secret in the cluster\nkubectl create secret tls api-certificate \\\n  --namespace medplum \\\n  --cert=mycert.crt \\\n  --key=mycert.key\n```\n\n----------------------------------------\n\nTITLE: Markdown Heading and Link to Measure Resource\nDESCRIPTION: This section uses Markdown to create a level-one heading for 'Measure' and a hyperlink to the FHIR Measure resource definition within the Medplum documentation. The link uses the Link component imported earlier to navigate to the specified URL.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/api/fhir/resources/measure.mdx#_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n# Measure\n\nThe <Link to=\"/docs/api/fhir/resources/measure\">Measure</Link> resource provides the definition of a quality measure.\n```\n\n----------------------------------------\n\nTITLE: Run tests using npm\nDESCRIPTION: This command executes the project's test suite using npm.\nSOURCE: https://github.com/medplum/medplum/blob/main/examples/medplum-demo-bots/src/deduplication/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm t\n```\n\n----------------------------------------\n\nTITLE: Installing Medplum React Hooks\nDESCRIPTION: Installs the `@medplum/react-hooks` package as a dependency using npm. This command adds the library to your project's `node_modules` directory and updates your `package.json` file.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/react-hooks/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @medplum/react-hooks\n```\n\n----------------------------------------\n\nTITLE: Copy environment variables Bash\nDESCRIPTION: Copies the default environment variables file to a new `.env` file, allowing for customization of environment settings.  This ensures the application can be configured with specific settings different from the defaults before running.\nSOURCE: https://github.com/medplum/medplum/blob/main/examples/medplum-live-chat-demo/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncp .env.defaults .env\n```\n\n----------------------------------------\n\nTITLE: HL7 PID Segment Example (ORU)\nDESCRIPTION: This code snippet shows an example of a PID (Patient Identification) segment in an HL7 ORU^R01 message. It provides patient identification information such as name, date of birth, and address. Primary elements include patient ID, patient name, date of birth, administrative sex, and address.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/integration/hl7-interfacing/orders-and-results.md#_snippet_7\n\nLANGUAGE: hl7\nCODE:\n```\nPID|1||123456789^^^LAB&1.2.3.4.5.6.7.8.9&ISO^MR||Doe^John^Q^^Mr.||19870507|M||2106-3|123 Broad St.^^Denver^CO^80020^USA||(303)555-1212|(303)555-1213||English|M|123456789|987654321|||Non-Hispanic|123-45-6789\n```\n\n----------------------------------------\n\nTITLE: Agent Status Response - Unknown - JSON\nDESCRIPTION: This JSON snippet shows a response when the agent's status is unknown. It includes the status and version, both set to 'unknown'. The `lastUpdated` field is missing.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/agent/status.md#_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"resourceType\": \"Parameters\",\n  \"parameter\": [\n    {\n      \"name\": \"status\",\n      \"valueCode\": \"unknown\"\n    },\n    {\n      \"name\": \"version\",\n      \"valueString\": \"unknown\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Building Medplum Bots - npm\nDESCRIPTION: This command executes the script defined as 'build:bots' in the package.json file. It's used to compile and prepare the Medplum Bots for deployment. This step is essential to enable bot functionality in the scheduling demo.\nSOURCE: https://github.com/medplum/medplum/blob/main/examples/medplum-scheduling-demo/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm run build:bots\n```\n\n----------------------------------------\n\nTITLE: Querying PlanDefinitions (TS)\nDESCRIPTION: This TypeScript code snippet shows how to query all PlanDefinitions that represent a laboratory procedure. It likely uses the Medplum client library for interacting with the FHIR server.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/careplans/diagnostic-catalog/diagnostic-catalog.mdx#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n{ExampleCode}\n```\n\n----------------------------------------\n\nTITLE: Importing Resource Table Components\nDESCRIPTION: Imports custom React components for displaying resource properties and search parameters in a table format. These components are used to visualize the Evidence resource's structure and search capabilities.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/api/fhir/resources/evidence.mdx#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { ResourcePropertiesTable, SearchParamsTable } from '@site/src/components/ResourceTables';\n```\n\n----------------------------------------\n\nTITLE: Configure Global Values in values.yaml (Helm)\nDESCRIPTION: This snippet configures the global values in the `values.yaml` file for the Helm chart. It specifies the cloud provider (GCP) and the project ID and secret ID for GCP.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/self-hosting/install-on-gcp.md#_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\nglobal:\n  cloudProvider: gcp # Supported values: gcp. # roadmap: aws, azure\n  gcp:\n    projectId: [MY_PROJECT_ID] # Your Google Cloud Platform project ID\n    secretId: [MY_CONFIG_SECRET_ID] # The secret ID for configuration in Google Cloud Platform\n```\n\n----------------------------------------\n\nTITLE: Markdown heading for DeviceRequest\nDESCRIPTION: This markdown snippet defines a heading for the DeviceRequest documentation page. The heading is 'DeviceRequest'.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/api/fhir/resources/devicerequest.mdx#_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n# DeviceRequest\n```\n\n----------------------------------------\n\nTITLE: HL7 OBX Segment Example (ORM)\nDESCRIPTION: This code snippet shows an example of an OBX (Observation/Result) segment in an HL7 ORM message. It provides additional information or preliminary results related to the order. Fields include set ID, value type, observation identifier, observation value, and date/time of the observation.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/integration/hl7-interfacing/orders-and-results.md#_snippet_5\n\nLANGUAGE: hl7\nCODE:\n```\nOBX|1|TX|Note^Clinical Note||Patient complains of dizziness and nausea.|||N|||202304151200|Lab\n```\n\n----------------------------------------\n\nTITLE: Defining a CodeSystem\nDESCRIPTION: This code defines a CodeSystem resource that corresponds to the LOINC code system. The `url` field must match the `system` field in the ValueSet. The `content` field is set to \"example\" which denotes that this is an example for demonstration purposes. In a production environment, this field should be defined appropriately.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/terminology/medplum-terminology-services.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n{\n  \"resourceType\": \"CodeSystem\",\n  \"url\": \"http://loinc.org\",\n  \"name\": \"LOINC\",\n  \"status\": \"active\",\n  \"content\": \"example\",\n  \"concept\": [\n    { \"code\": \"8310-5\", \"display\": \"Body temperature\" },\n    { \"code\": \"8462-4\", \"display\": \"Diastolic blood pressure\" },\n    { \"code\": \"8480-6\", \"display\": \"Systolic blood pressure\" },\n    { \"code\": \"8867-4\", \"display\": \"Heart rate\" },\n    { \"code\": \"9279-1\", \"display\": \"Respiratory rate\" }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Reset Password POST Request - TypeScript\nDESCRIPTION: This code snippet demonstrates how to initiate a password reset using the `medplum.post` method to the `/auth/resetpassword` endpoint. It includes parameters such as the user's email, project ID (for project-scoped users), whether to send an email, redirect URI, reCAPTCHA site key, and reCAPTCHA token. The `medplum` object is assumed to be an initialized Medplum client.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/api/auth/resetpassword.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nawait medplum.post('auth/resetpassword', {\n  email: 'user@example.com',\n  projectId: 'project-123',\n  sendEmail: true,\n  redirectUri: 'https://app.example.com/reset',\n  recaptchaSiteKey: '6LeIxAcTAAAAAJ55555555555555555555555555555555',\n  recaptchaToken: 'recaptcha-token'\n});\n```\n\n----------------------------------------\n\nTITLE: Capturing Patient Aliases in FHIR Patient Resource (JSON)\nDESCRIPTION: This code snippet demonstrates how to represent patient aliases, specifically maiden names, within the `name` field of a FHIR Patient resource using JSON. It utilizes the `use` and `period` fields to distinguish between official and old names, showcasing the capturing of historical name data.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/charting/patient-demographics.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": [\n    {\n      \"given\": [\n        \"Marge\",\n        \"Jacqueline\"\n      ],\n      \"family\": \"Simpson\",\n      \"period\": {\n        \"start\": \"1980-01-01T00:00:00Z\"\n      },\n      \"use\": \"official\"\n    },\n    {\n      \"given\": [\n        \"Marge\",\n        \"Jacqueline\"\n      ],\n      \"family\": \"née Bouvier\",\n      \"period\": {\n        \"end\": \"1980-01-01T00:00:00Z\"\n      },\n      \"use\": \"old\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a FHIR Measure in JSON\nDESCRIPTION: Defines a FHIR Measure resource with a single group and population using application/x-fhir-query for the criteria. The measure is set to active status and includes a URL for identification. The expression Patient signifies that all patients will be included in the population.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/api/fhir/operations/evaluate-measure.md#_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"resourceType\": \"Measure\",\n  \"status\": \"active\",\n  \"url\": \"https://example.com/test-measure\",\n  \"group\": [\n    {\n      \"population\": [\n        {\n          \"code\": {\n            \"coding\": [\n              {\n                \"code\": \"measure-population\"\n              }\n            ]\n          },\n          \"criteria\": {\n            \"language\": \"application/x-fhir-query\",\n            \"expression\": \"Patient\"\n          }\n        }\n      ]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: CLI Get Request with _revinclude as Transaction Bundle\nDESCRIPTION: This code snippet demonstrates using the Medplum CLI to fetch a patient and all associated encounters as a transaction bundle using the `--as-transaction` flag and `_revinclude` parameter. This creates a transaction bundle from existing data.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/bots/unit-testing-bots.mdx#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nmedplum get Patient?name=Alex&_revinclude=Encounter:patient --as-transaction > transaction.json\n```\n\n----------------------------------------\n\nTITLE: Using Exact Version Strings in Dependencies (JavaScript)\nDESCRIPTION: For dependencies, always use exact version strings instead of ranges. This ensures consistent and predictable builds across different environments. Version ranges can lead to unexpected updates and potential compatibility issues.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/contributing/package-json.md#_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n// ✅ DO use exact versions\n\"dependency\": \"1.2.3\"\n\n// ❌ DON'T use version ranges\n\"dependency\": \"^1.2.3\"\n```\n\n----------------------------------------\n\nTITLE: Redis Set Password\nDESCRIPTION: Sets the password for Redis authentication by uncommenting the `requirepass` line and setting it to `medplum`. This enhances the security of the Redis instance.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/self-hosting/install-on-ubuntu.md#_snippet_8\n\nLANGUAGE: text\nCODE:\n```\nrequirepass medplum\n```\n\n----------------------------------------\n\nTITLE: Token Exchange Request with cURL\nDESCRIPTION: This snippet shows how to exchange an external access token for a Medplum access token using a cURL command. It requires setting the grant_type, client_id, subject_token, and subject_token_type parameters.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/auth/methods/token-exchange.md#_snippet_1\n\nLANGUAGE: cURL\nCODE:\n```\ncurl -X POST \\\n  'https://api.medplum.com/oauth2/token' \\\n  -H 'Content-Type: application/x-www-form-urlencoded' \\\n  -d 'grant_type=urn:ietf:params:oauth:grant-type:token-exchange' \\\n  -d 'client_id=YOUR_CLIENT_ID' \\\n  -d 'subject_token=YOUR_SUBJECT_TOKEN' \\\n  -d 'subject_token_type=urn:ietf:params:oauth:token-type:access_token'\n```\n\n----------------------------------------\n\nTITLE: Network Organization Example\nDESCRIPTION: This snippet illustrates the relationship between a provider network and its parent payer organization using the `partOf` attribute within the `Organization` resource, as per the Da Vinci PDEX Plan Net profile. It shows how different networks can belong to the same payer organization.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/administration/provider-directory/provider-networks.md#_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart BT\n\t324537[\"<b>Network (Organization)</b>\\nAcme Insurance Standard Network\"] --partOf --> 344639[\"<b>Organization</b>\\nAcme Insurance\"]\n\t431222[\"<b>Network (Organization)</b>\\nAcme Insurance Premium Network\"] -- partOf --> 344639\n```\n\n----------------------------------------\n\nTITLE: Update Medplum Server Config\nDESCRIPTION: This command uses the Medplum CLI to update the server configuration settings.  You must first create a configuration file (`medplum.[env name].server.json`) with the desired settings. The `[env name]` parameter specifies the environment name.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/self-hosting/install-on-aws.md#_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\nnpx medplum aws update-config medplum.[env name].server.json\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpx medplum aws update-config medplum.demo.server.json\n```\n\n----------------------------------------\n\nTITLE: PractitionerRole Resource Definition (JSON)\nDESCRIPTION: JSON definition of the PractitionerRole resource, likely containing properties, search parameters, and other metadata used to describe the resource's structure and behavior within a FHIR context.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/api/fhir/resources/practitionerrole.mdx#_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\ndefinition.properties.filter((p) => !(p.inherited && p.base.includes('Resource')))\n```\n\nLANGUAGE: JSON\nCODE:\n```\ndefinition.searchParameters\n```\n\nLANGUAGE: JSON\nCODE:\n```\ndefinition.properties.filter((p) => p.inherited && p.base.includes('Resource'))\n```\n\n----------------------------------------\n\nTITLE: Configuration Secret JSON\nDESCRIPTION: Defines the structure and example values for the secret data stored in Azure Key Vault. This JSON file contains configuration settings for the Medplum application, including database connections, Redis configurations, API endpoints, and security settings.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/self-hosting/install-on-azure.md#_snippet_6\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"port\": 8103,\n    \"baseUrl\": \"http://localhost:8103/\",\n    \"issuer\": \"http://localhost:8103/\",\n    \"audience\": \"http://localhost:8103/\",\n    \"jwksUrl\": \"http://localhost:8103/.well-known/jwks.json\",\n    \"authorizeUrl\": \"http://localhost:8103/oauth2/authorize\",\n    \"tokenUrl\": \"http://localhost:8103/oauth2/token\",\n    \"userInfoUrl\": \"http://localhost:8103/oauth2/userinfo\",\n    \"appBaseUrl\": \"http://localhost:3000/\",\n    \"binaryStorage\": \"file:./binary/\",\n    \"storageBaseUrl\": \"http://localhost:8103/storage/\",\n    \"signingKeyId\": \"my-key-id\",\n    \"signingKey\": \"-----BEGIN RSA PRIVATE KEY-----\\nProc-Type: 4,ENCRYPTED\\nDEK-Info: DES-EDE3-CBC,4C2E1B45FFF24610\\n\\n0SOZn3P0Bd9lZgv2eSWWLMQ4JqxhbJ+dWM+V1TtSwqxe3VP24z4bys5VRpmsEpqn\\nROKxdXCeqAbYsLo8V9dOQvwaxo2TTWFgUFj7sQYklyr1g5S9+KCp+1B/5E7UgNDd\\nhXA2u4uhz6Bck0mTPwoy3oHjNUaNBZilMdwiR3qeiGYC0DyX69+IJgwFUTt2a1jc\\nU5aUyellGYa47QRZcePgyk7Cl4FcBW9YA0pS4rNpO4wNVN6GGuZti4c0Y3PHXSRE\\nDse95ZN9iWBtufjpjk4s8MX0rzqMWcjbAhTs2N5YBgKsv2czm5YMdXsYH6tGL7a1\\nPyNia0r1AnHAD3pK+vzaZGaLrvubZikrt7dr+Tp1U45b2YaZlMMaXwGU6WEK7kwr\\n4sbl9hqQf/+oqBAdyJIgxIhFumK+ukUIlCV+b/XUuoatDXD127JwEyEM78Nzg5Bc\\n/bKGEo9uehXpuIi0jp1BtegUIkfoV543PZZgslGVdzq0vXOir+PiHJBLlbWXXSAb\\nEWKOQW2/bZ8JIHhi3Ag7KDlTVF1XetJ2TqYOOP9izfMp4lJ2vLtkH7P+jEKG8z6b\\nurnXYkDWYEbzhG1frEssVQN0GP3wdyEK+n6LBCuj52Uje/M7LwahPX6dJRYPOpL9\\nbApSNNJLahRRQREHp1wqEWism3r4+yRa4ha/BGc4dfKTsUtJEiHqdWvDzomN5C6A\\nC7u3zjUv3ZZLoCLCbBUsiVdlJZJ5u/ymky5LKVbsscmZj93HE7/FL56I17bmTlDo\\npvkJWk9SmVXvs3lwMMBRbykj974ZWEMw9EjCoP9rDJ0UNsy2kVRFfXoPMKL5S01D\\niBRVSZB7k7qJofGtlBpDfooHOw4uAJ/6A0l8vpOm/Vpk8tdiRLL/RuzEKz5G3ltm\\nrXPn83avfNc5+EvaM8IIKyPTvHegE5XszGK3NNlzUO1Ydze/xQPhdrp4QYFzJOuB\\nXVIazLeXSJ5EjJ1ylWAWgNzsx+42NWeA2CZAZz+IJFw6C2iHEB8f8Nw6iJmFfm3I\\nWsrvCRbuwIsW9fjtHTpOCCpxXu5EcvN5BKwFXeBatB7xqR6EnPbk6xDxZdroEKhH\\nEZU4PlHu+BwTKKCwa4Ynwn1Qpu453qgNzaxgHLbdFipW5/AkreNWK5Il+5Bl8G90\\no/MhO66eBXv3JbOtMUAqs9+Qyl5K1TaNqbStWmsiq+36Niz4ZRg7L/7W6zjG/hTH\\npignoDyJYPjFFQ/sTsTUv0oKVI6KIYFlIHBDnGGnH09926sd+U/isSeMDP+Qa32m\\nhHzScmDPsdyjdFsdXsJjZHe7mqCijGXu/LW4CoWoqln4y29c5BMJazwnIwegrLjJ\\nQeW6InUhGZLy+uJbs1ZWxlqzOmMoTx2VVgoABdOHn/mQEC/AreUdvPMkVVYEuxel\\nmAMOoefncx/EPxn7gY2SrEdmSnk9VuzR30KMC1qSw196QbQHR1G2vxKcXPwe/LH9\\n7Pa0gwwqCaS2ggYt5Rvlxm7DeBIGHzGtPILnl1qyVGaqn64244JeLi9bY/O+E+uq\\nBSgQmt2NwPK2RQgzzt/ETUXoOFHKiwS1v2Vp4H2PPDI8CzvlRralsQ==\\n-----END RSA PRIVATE KEY-----\",\n    \"signingKeyPassphrase\": \"top_secret\",\n    \"supportEmail\": \"\\\"Medplum\\\" <support@medplum.com>\",\n    \"googleClientId\": \"397236612778-c0b5tnjv98frbo1tfuuha5vkme3cmq4s.apps.googleusercontent.com\",\n    \"googleClientSecret\": \"\",\n    \"recaptchaSiteKey\": \"6LfHdsYdAAAAAC0uLnnRrDrhcXnziiUwKd8VtLNq\",\n    \"recaptchaSecretKey\": \"6LfHdsYdAAAAAH9dN154jbJ3zpQife3xaiTvPChL\",\n    \"adminClientId\": \"2a4b77f2-4d4e-43c6-9b01-330eb5ca772f\",\n    \"maxJsonSize\": \"1mb\",\n    \"maxBatchSize\": \"50mb\",\n    \"botLambdaRoleArn\": \"\",\n    \"botLambdaLayerName\": \"medplum-bot-layer\",\n    \"vmContextBotsEnabled\": true,\n    \"defaultBotRuntimeVersion\": \"vmcontext\",\n    \"allowedOrigins\": \"*\",\n    \"introspectionEnabled\": true,\n    \"database\": {\n      \"host\": \"YOUR_DB_HOST\",\n      \"port\": 5432,\n      \"dbname\": \"medplum\",\n      \"username\": \"medplumadmin\",\n      \"password\": \"YOUR_DB_PASSWORD\"\n    },\n    \"redis\": {\n      \"host\": \"YOUR_REDIS_HOST\",\n      \"port\": 6380,\n      \"password\": \"YOUR_REDIS_PASSWORD\",\n      \"tls\": true\n    },\n    \"bullmq\": {\n      \"removeOnFail\": { \"count\": 1 },\n      \"removeOnComplete\": { \"count\": 1 }\n    },\n    \"shutdownTimeoutMilliseconds\": 30000,\n    \"chainedSearchWithReferenceTables\": true\n  }\n```\n\n----------------------------------------\n\nTITLE: Configuring Support Email in Medplum\nDESCRIPTION: Updates the `supportEmail` property in the Medplum server configuration file to match the SendGrid Sender Identity email address. This ensures that emails sent from Medplum are properly associated with the verified SendGrid sender.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/self-hosting/sendgrid.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\"supportEmail\": \"support@example.com\"}\n```\n\n----------------------------------------\n\nTITLE: Import Statements (JavaScript)\nDESCRIPTION: These import statements bring in necessary components and data for rendering the ExplanationOfBenefit documentation page.  Specifically, Link from docusaurus, Tabs/TabItem from theme, the JSON definition, and custom table components are imported.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/api/fhir/resources/explanationofbenefit.mdx#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport Link from '@docusaurus/Link';\nimport Tabs from '@theme/Tabs';\nimport TabItem from '@theme/TabItem';\nimport definition from '@site/static/data/resourceDefinitions/explanationofbenefit.json';\nimport { ResourcePropertiesTable, SearchParamsTable } from '@site/src/components/ResourceTables';\n```\n\n----------------------------------------\n\nTITLE: Successful Operation Response\nDESCRIPTION: This JSON represents a successful response from the ValueSet/$validate-code operation. It indicates that the provided concept details are valid (result: true) and provides a display value for the concept.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/api/fhir/operations/index.mdx#_snippet_2\n\nLANGUAGE: js\nCODE:\n```\n{\n  \"resourceType\": \"Parameters\",\n  \"parameter\": [\n    { \"name\": \"result\", \"valueBoolean\": true },\n    { \"name\": \"display\", \"valueString\": \"Mild (qualifier value)\" }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: ValueSet: Sample ValueSet of Condition Codes\nDESCRIPTION: This code snippet demonstrates the structure of a ValueSet resource in FHIR, specifically for condition codes. It showcases how to define a set of permissible codes that can be used within the 'code' element of a Condition resource, linking to SNOMED CT for standardized terminology. Dependencies: FHIR, SNOMED CT.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/charting/representing-diagnoses.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  \"resourceType\": \"ValueSet\",\n  \"status\": \"draft\",\n  \"name\": \"Example Condition Codes\",\n  \"id\": \"example-condition-codes\",\n  \"compose\": {\n    \"include\": [\n      {\n        \"system\": \"http://snomed.info/sct\",\n        \"concept\": [\n          {\n            \"code\": \"390656007\",\n            \"display\": \"Ischemic stroke (disorder)\"\n          },\n          {\n            \"code\": \"720710002\",\n            \"display\": \"Postural abnormality (finding)\"\n          }\n        ]\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Example Compounded Medication using MedicationKnowledge FHIR Resource\nDESCRIPTION: This example demonstrates how to represent a compounded medication using the FHIR MedicationKnowledge resource. It showcases the use of the 'amount' field for the total amount to be dispensed and the 'ingredient' field for listing ingredients with their respective strengths as a ratio of the total volume. RxNorm is the preferred code system for ingredients.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/medications/formulary/index.mdx#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  resourceType: 'MedicationKnowledge',\n  // Dispense 200g total\n  amount: {\n    value: 200,\n    unit: 'g',\n    system: 'http://unitsofmeasure.org',\n  },\n  // Each ingredient strength is listed as a ratio out of 100g\n  ingredient: [\n    {\n      isActive: true,\n      itemCodeableConcept: {\n        text: 'Baclofen powder',\n        coding: [\n          {\n            system: 'http://www.nlm.nih.gov/research/umls/rxnorm',\n            code: '1292',\n          },\n        ],\n      },\n      strength: {\n        numerator: {\n          value: 5,\n          unit: 'g',\n          system: 'http://unitsofmeasure.org',\n        },\n        denominator: {\n          value: 100,\n          unit: 'g',\n          system: 'http://unitsofmeasure.org',\n        },\n      },\n    },\n    {\n      isActive: true,\n      itemCodeableConcept: {\n        text: 'Ketoprofen powder',\n        coding: [\n          {\n            system: 'http://www.nlm.nih.gov/research/umls/rxnorm',\n            code: '6142',\n          },\n        ],\n      },\n      strength: {\n        numerator: {\n          value: 10,\n          unit: 'g',\n          system: 'http://unitsofmeasure.org',\n        },\n        denominator: {\n          value: 100,\n          unit: 'g',\n        },\n      },\n    },\n    {\n      isActive: true,\n      itemCodeableConcept: {\n        text: 'Capcaicin 0.75 mg/mL topical lotion',\n        coding: [\n          {\n            system: 'http://www.nlm.nih.gov/research/umls/rxnorm',\n            code: '1992',\n          },\n        ],\n      },\n      strength: {\n        numerator: {\n          value: 0.075,\n          unit: 'g',\n        },\n        denominator: {\n          value: 100,\n          unit: 'g',\n        },\n      },\n    },\n    {\n      isActive: true,\n      itemCodeableConcept: {\n        text: 'Tetracaine 10 mg/mL topical cream',\n        coding: [\n          {\n            system: 'http://www.nlm.nih.gov/research/umls/rxnorm',\n            code: '10391',\n          },\n        ],\n      },\n      strength: {\n        numerator: {\n          value: 2,\n          unit: 'g',\n        },\n        denominator: {\n          value: 100,\n          unit: 'g',\n        },\n      },\n    },\n    {\n      isActive: false,\n      itemCodeableConcept: {\n        text: 'PLO flowable Pluronic Lecithin Organogel',\n        coding: [\n          {\n            system: 'http://www.nlm.nih.gov/research/umls/rxnorm',\n            code: '012345',\n          },\n        ],\n      },\n      strength: {\n        numerator: {\n          value: 82.9,\n          unit: 'g',\n        },\n        denominator: {\n          value: 100,\n          unit: 'g',\n        },\n      },\n    },\n  ],\n  packaging: {\n    type: {\n      text: 'Tube',\n      coding: [\n        {\n          system: 'http://terminology.hl7.org/CodeSystem/medicationknowledge-package-type',\n          code: 'tube',\n          display: 'Tube',\n        },\n      ],\n    },\n  }\n//...\n}\n```\n\n----------------------------------------\n\nTITLE: Install Medplum\nDESCRIPTION: Installs the Medplum package using apt-get.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/self-hosting/install-on-ubuntu.md#_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt-get install medplum\n```\n\n----------------------------------------\n\nTITLE: Rendering Tabs Component (JSX)\nDESCRIPTION: JSX code to render a tabs component using Docusaurus' Tabs and TabItem components. It includes a 'Schema' tab by default.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/api/fhir/datatypes/reference.mdx#_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\n<Tabs queryString=\"section\">\n  <TabItem value=\"schema\" label=\"Schema\" default>\n\n## Elements\n\n<ResourcePropertiesTable\n  properties={definition.properties.filter((p) => !(p.inherited && p.base.includes('Resource')))}\n/>\n\n  </TabItem>\n\n</Tabs>\n```\n\n----------------------------------------\n\nTITLE: FHIR Search Response with _include:iterate (TypeScript)\nDESCRIPTION: This TypeScript code snippet represents an example FHIR search response when using `_include:iterate`. It contains a FHIR Bundle with resources linked via recursive `_include` parameters. It illustrates the hierarchical data structure returned when traversing multiple levels of references.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/search/includes.mdx#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n{ExampleCode}\n```\n\n----------------------------------------\n\nTITLE: Service account values configuration\nDESCRIPTION: This YAML snippet shows how to configure the service account in a Helm chart to use Azure Workload Identity.  It adds an annotation to the service account specifying the Azure Managed Identity Client ID, allowing the Kubernetes pods to authenticate with Azure services.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/self-hosting/install-on-azure.md#_snippet_11\n\nLANGUAGE: YAML\nCODE:\n```\nserviceAccount:\n  annotations:\n    azure.workload.identity/client-id: \"MY_AZURE_MANAGED_IDENTITY_ID\" # Azure Managed Identity Client ID\n```\n\n----------------------------------------\n\nTITLE: EvidenceVariable Search Parameters JSON Data\nDESCRIPTION: JSON data representing the search parameters of the EvidenceVariable resource. This data is used to populate the SearchParamsTable component, displaying the available search parameters for querying EvidenceVariable resources.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/api/fhir/resources/evidencevariable.mdx#_snippet_2\n\nLANGUAGE: JSON\nCODE:\n```\ndefinition.searchParameters\n```\n\n----------------------------------------\n\nTITLE: JSON definition for FHIR Binary Resource\nDESCRIPTION: This is a placeholder entry representing the JSON definition imported from `@site/static/data/resourceDefinitions/binary.json`. It contains the structure, properties, and search parameters of the FHIR Binary resource. This definition is used to dynamically generate tables and documentation on the page.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/api/fhir/resources/binary.mdx#_snippet_6\n\nLANGUAGE: JSON\nCODE:\n```\ndefinition.properties\n```\n\n----------------------------------------\n\nTITLE: Configure Environment Variables\nDESCRIPTION: This configuration snippet shows the required environment variables for the NextAuth demo, including the NextAuth secret, Medplum Client ID, and Medplum Client Secret. These variables must be set in the .env file.\nSOURCE: https://github.com/medplum/medplum/blob/main/examples/medplum-nextauth-demo/README.md#_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nNEXTAUTH_SECRET=<secret generated by openssl>\nMEDPLUM_CLIENT_ID=<Medplum ClientApplication id>\nMEDPLUM_CLIENT_SECRET=<Medplum ClientApplication secret>\n```\n\n----------------------------------------\n\nTITLE: ValueSet Validation SQL\nDESCRIPTION: Determines if a given code is present in the ValueSet. It joins the Coding, Coding_Property, and CodeSystem_Property tables to check if the code's system and code match, and if the required properties are present.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/contributing/terminology-architecture.md#_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nSELECT  c.id, c.code, c.display FROM \"Coding\" c\n  LEFT JOIN \"Coding_Property\" AS cp ON (\n    c.id = cp.coding\n    AND cp.value = ?\n  )\n  LEFT JOIN \"CodeSystem_Property\" AS property ON (\n    c.system = property.system\n    AND property.id = cp.property\n    AND property.code = ?\n  )\nWHERE (\n  c.system = ?\n  AND c.code = ?\n  AND cp.value IS NOT NULL\n  AND property.system IS NOT NULL\n);\n```\n\n----------------------------------------\n\nTITLE: PostCSS Configuration (javascript)\nDESCRIPTION: Defines a `postcss.config.mjs` file with configurations for PostCSS, including the Mantine preset and simple variables.  It configures PostCSS to use Mantine's styling and defines the responsive breakpoints. It uses the `postcss-preset-mantine` and `postcss-simple-vars` plugins.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/react/mantine-6x-to-7x.mdx#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport mantinePreset from 'postcss-preset-mantine';\nimport simpleVars from 'postcss-simple-vars';\n\nconst config = {\n  plugins: [\n    mantinePreset(),\n    simpleVars({\n      variables: {\n        'mantine-breakpoint-xs': '36em',\n        'mantine-breakpoint-sm': '48em',\n        'mantine-breakpoint-md': '62em',\n        'mantine-breakpoint-lg': '75em',\n        'mantine-breakpoint-xl': '88em',\n      },\n    }),\n  ],\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: HL7 PV1 Segment Example\nDESCRIPTION: This code snippet shows an example of a PV1 (Patient Visit) segment in an HL7 ORM^O01 message.  It details information about the patient's current visit, such as the location, attending doctor and visit type. Relevant fields include visit number, patient class, assigned location, attending doctor, and visit type.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/integration/hl7-interfacing/orders-and-results.md#_snippet_2\n\nLANGUAGE: hl7\nCODE:\n```\nPV1|1|O|OutpatientDept^101^HospitalA||||123456^Smith^Jane^A^^Dr.|||Outpatient||Col|123456789|Medicare|||||||||||||||||202304150800|202304151200\n```\n\n----------------------------------------\n\nTITLE: Start and Enable Nginx\nDESCRIPTION: Starts and enables the Nginx service to ensure it runs on boot.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/self-hosting/install-on-ubuntu.md#_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nsudo systemctl start nginx\nsudo systemctl enable nginx\n```\n\n----------------------------------------\n\nTITLE: Logical AND Filtering Example in Medplum (CLI)\nDESCRIPTION: Shows how to use the `_filter` parameter with logical 'and' in the Medplum CLI. The snippet illustrates the command-line syntax for combining multiple filter criteria. It assumes the Medplum CLI is installed and configured.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/search/filter-search-parameter.mdx#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n{ExampleCode}\n```\n\n----------------------------------------\n\nTITLE: Execute GraphQL Query\nDESCRIPTION: Executes a GraphQL query using the `graphql` method. It takes a GraphQL query string as input and returns a Promise that resolves to the query result.  Requires a valid GraphQL query.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/core/README.md#_snippet_14\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst result = await graphql(`\n  {\n    PatientList(name: \"Alice\") {\n      name {\n        given\n        family\n      }\n    }\n  }\n`);\n```\n\n----------------------------------------\n\nTITLE: Create ValueSet TypeScript\nDESCRIPTION: This TypeScript function `handleCreateValueSet` handles the creation of a new ValueSet resource on the Medplum server. It first parses the JSON data from the `customValueSet` variable and validates it. Then, it uses the `medplum.createResource` method to create the ValueSet resource. The function handles success or error conditions after attempting to create the resource.\nSOURCE: https://github.com/medplum/medplum/blob/main/examples/medplum-valueset-selector/README.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst handleCreateValueSet = async () => {\n  // Validate JSON and check for duplicates\n  const valueSetData = JSON.parse(customValueSet);\n  const newValueSet = await medplum.createResource(valueSetData as ValueSet);\n  // Handle success/error...\n};\n```\n\n----------------------------------------\n\nTITLE: Invalid Scope Error Response\nDESCRIPTION: Sample HTTP response (302 Found) from the `/oauth2/authorize` endpoint when the client requests an unknown, malformed, or invalid scope. The response includes the `Location` header with the `redirect_uri` and an `error=invalid_scope` parameter.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/api/oauth/authorize.md#_snippet_10\n\nLANGUAGE: HTTP\nCODE:\n```\nHTTP 1.1 302\nFound Location: https://client_redirect_uri?error=invalid_scope\n```\n\n----------------------------------------\n\nTITLE: Initializing MedplumClient JavaScript\nDESCRIPTION: This JavaScript code initializes the MedplumClient, which is used for interacting with the Medplum API. The client can be configured with options like `clientId`, `projectId`, and `baseUrl`.\nSOURCE: https://github.com/medplum/medplum/blob/main/examples/medplum-react-native-example/README.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { getDisplayString, MedplumClient } from '@medplum/core';\n\nconst medplum = new MedplumClient();\n```\n\n----------------------------------------\n\nTITLE: Import Mantine and Medplum CSS (diff)\nDESCRIPTION: Imports the Mantine and Medplum CSS files into the application entry point.  This ensures that the components are styled correctly, now relying on the CSS directly.  It requires modification of the main application file to include these imports.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/react/mantine-6x-to-7x.mdx#_snippet_3\n\nLANGUAGE: diff\nCODE:\n```\n+ import '@mantine/core/styles.css';\n+ import '@medplum/react/styles.css';\n```\n\n----------------------------------------\n\nTITLE: Retrieving TerminologyCapabilities using metadata endpoint\nDESCRIPTION: This code snippet demonstrates how to retrieve the TerminologyCapabilities resource from a Terminology Service using the capabilities API. It involves sending a GET request to the `/metadata` endpoint with the `mode` parameter set to `terminology`.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/api/fhir/resources/terminologycapabilities.mdx#_snippet_0\n\nLANGUAGE: HTTP\nCODE:\n```\nGET [base]/metadata?mode=terminology\n```\n\n----------------------------------------\n\nTITLE: Importing Definitions and Indexing Schema for MockClient in Typescript\nDESCRIPTION: This code snippet shows how to import FHIR schema definitions and index the full schema within your testing setup using `beforeAll` or a setup file. This is essential for ensuring that your test queries work correctly with the `MockClient` in Medplum Bots.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/bots/unit-testing-bots.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { indexStructureDefinitionBundles } from '@medplum/core';\nimport { readJson } from '@medplum/definitions';\nimport { MockClient } from '@medplum/mock';\n\nlet medplum: MockClient;\n\nbeforeAll(() => {\n  indexStructureDefinitionBundles(Object.values(readJson('fhir/r4/profiles-resources.json') as Record<string, any>));\n  indexStructureDefinitionBundles(Object.values(readJson('fhir/r4/profiles-types.json') as Record<string, any>));\n  indexStructureDefinitionBundles(Object.values(readJson('fhir/r4/profiles-others.json') as Record<string, any>));\n\n  medplum = new MockClient();\n});\n```\n\n----------------------------------------\n\nTITLE: Checking Java Version\nDESCRIPTION: This command checks the installed Java version to ensure it is 1.8 or higher, which is a prerequisite for running Synthea.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/blog/2021-12-13-synthea.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\njava -version\n```\n\n----------------------------------------\n\nTITLE: Import VisionPrescription Definition in JavaScript\nDESCRIPTION: Imports the visionprescription.json file as a JavaScript object named definition from the @site/static/data/resourceDefinitions/visionprescription.json location. This JSON file likely contains the schema and search parameter definitions for the VisionPrescription resource.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/api/fhir/resources/visionprescription.mdx#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport definition from '@site/static/data/resourceDefinitions/visionprescription.json';\n```\n\n----------------------------------------\n\nTITLE: CodeSystem Subsumes Endpoint\nDESCRIPTION: Defines the URL endpoints for the $subsumes operation, which can be called on a CodeSystem resource directly or on a specific instance by its ID.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/api/fhir/operations/codesystem-subsumes.md#_snippet_0\n\nLANGUAGE: http\nCODE:\n```\n[baseUrl]/CodeSystem/$subsumes\n[baseUrl]/CodeSystem/[id]/$subsumes\n```\n\n----------------------------------------\n\nTITLE: Search Project Members - CLI\nDESCRIPTION: Searches for all ProjectMembership resources using the Medplum CLI. This allows you to retrieve a list of all members associated with a project. The Medplum CLI must be installed and configured. The output is a list of ProjectMembership resources in FHIR format.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/auth/user-management-guide/user-management-guide.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n{ExampleCode}\n```\n\n----------------------------------------\n\nTITLE: Exit PostgreSQL Client\nDESCRIPTION: Exits the PostgreSQL client.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/self-hosting/install-on-ubuntu.md#_snippet_5\n\nLANGUAGE: PLpgSQL\nCODE:\n```\nexit\n```\n\n----------------------------------------\n\nTITLE: Invalid Token Error Response\nDESCRIPTION: Shows the error response for an invalid token provided to the /oauth2/userinfo endpoint. The response includes a 401 Unauthorized status code and WWW-Authenticate header with error details such as \"invalid_token\" and a description.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/api/oauth/userinfo.md#_snippet_4\n\nLANGUAGE: HTTP\nCODE:\n```\nHTTP/1.1 401 Unauthorized\n    WWW-Authenticate: error=\"invalid_token\",\n    error_description=\"Access token is expired, disabled, or deleted, or the user has globally signed out.\"\n```\n\n----------------------------------------\n\nTITLE: Referencing other resources (Markdown/HTML)\nDESCRIPTION: The links to MedicinalProductIndication, AdverseEvent, and AllergyIntolerance. Used to reference related resources within the Medplum documentation.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/api/fhir/resources/medicinalproductundesirableeffect.mdx#_snippet_3\n\nLANGUAGE: HTML\nCODE:\n```\n<ul><li><a href=\"/docs/api/fhir/resources/medicinalproductindication\">MedicinalProductIndication</a></li></ul>\n```\n\n----------------------------------------\n\nTITLE: Using the useMedplum Hook\nDESCRIPTION: Illustrates how to use the `useMedplum` hook to access the global `MedplumClient` instance within a React component. The hook returns the `MedplumClient` object, allowing you to interact with the Medplum API.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/react-hooks/README.md#_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { useMedplum } from '@medplum/react-hooks';\n\nexport function MyComponent() {\n  const medplum = useMedplum();\n  return <div>{JSON.stringify(medplum.getProfile())}</div>;\n}\n```\n\n----------------------------------------\n\nTITLE: Add Medplum Ubuntu Repository\nDESCRIPTION: Adds the Medplum Ubuntu repository to the system, allowing Medplum packages to be installed via apt.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/self-hosting/install-on-ubuntu.md#_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\ncurl -fsSL https://apt.medplum.com/setup.sh | sudo bash -\nsudo apt-get update\n```\n\n----------------------------------------\n\nTITLE: Setting MEDPLUM_BASE_URL in .env file\nDESCRIPTION: This snippet demonstrates how to set the `MEDPLUM_BASE_URL` environment variable in the `packages/app/.env` file, ensuring the application uses the correct HTTPS address for the Medplum API server. This is crucial for OpenID configuration, which requires HTTPS.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/server/src/oauth/README.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nMEDPLUM_BASE_URL=https://host.docker.internal:8104/\n```\n\n----------------------------------------\n\nTITLE: Developing Enterprise Features and Integrations with TypeScript\nDESCRIPTION: This snippet represents the task of writing code for core healthcare workflows using TypeScript, such as e-prescribe, labs, health networks, billing, benefits check, etc. It highlights the need to unlock the full potential of the healthcare ecosystem to enhance Medplum’s value proposition to the market. This development enables new capabilities for customers.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/src/pages/careers/forward-deployed-engineer.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n// Example placeholder for a TypeScript implementation\n// Replace with actual code for e-prescribe, labs, etc.\n\n/**\n * Placeholder function for e-prescribe functionality.\n * @param prescriptionData - The prescription data object.\n * @returns A promise that resolves when the e-prescription is sent.\n */\nasync function ePrescribe(prescriptionData: any): Promise<void> {\n  console.log('Sending e-prescription...', prescriptionData);\n  // Implement the actual e-prescribe logic here\n  return Promise.resolve();\n}\n\n/**\n * Placeholder function for lab integration.\n * @param labOrderData - The lab order data object.\n * @returns A promise that resolves with the lab results.\n */\nasync function getLabResults(labOrderData: any): Promise<any> {\n  console.log('Fetching lab results...', labOrderData);\n  // Implement the actual lab integration logic here\n  return Promise.resolve({});\n}\n\n```\n\n----------------------------------------\n\nTITLE: Run Medplum AWS Init Command\nDESCRIPTION: This command executes the Medplum AWS initialization tool. This tool sets up necessary AWS resources and generates the Medplum CDK configuration file based on user prompts.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/self-hosting/install-on-aws.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpx medplum aws init\n```\n\n----------------------------------------\n\nTITLE: Remove Default Nginx Site\nDESCRIPTION: Removes the default Nginx site configuration. This is done to ensure that only the Medplum site configurations are used.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/self-hosting/install-from-scratch.md#_snippet_26\n\nLANGUAGE: bash\nCODE:\n```\nsudo rm /etc/nginx/sites-enabled/default\n```\n\n----------------------------------------\n\nTITLE: Importing Docusaurus Components - JavaScript\nDESCRIPTION: Imports necessary components from Docusaurus for creating links, tabs, and resource tables. These components are used to structure and display the FHIR Appointment resource documentation.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/api/fhir/resources/appointment.mdx#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport Link from '@docusaurus/Link';\nimport Tabs from '@theme/Tabs';\nimport TabItem from '@theme/TabItem';\nimport definition from '@site/static/data/resourceDefinitions/appointment.json';\nimport { ResourcePropertiesTable, SearchParamsTable } from '@site/src/components/ResourceTables';\n```\n\n----------------------------------------\n\nTITLE: Create Media Resource with External URL\nDESCRIPTION: This TypeScript code creates a Media resource with a URL pointing to an external resource.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/fhir-datastore/binary-data.mdx#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst externalMedia: Media = {\n  resourceType: 'Media',\n  status: 'completed',\n  content: {\n    contentType: 'image/jpeg',\n    url: 'https://example.com/image.jpg'\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Stop and Delete Medplum Agent Service (Bash)\nDESCRIPTION: Stops and deletes the MedplumAgent service using the `sc.exe` command-line utility. This snippet is executed from a command prompt with administrator privileges and requires the agent to be currently installed as a Windows service. The commands ensure that the service is not running before attempting to delete it.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/agent/manual-uninstall.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsc.exe stop MedplumAgent\nsc.exe delete MedplumAgent\n```\n\n----------------------------------------\n\nTITLE: ObservationDefinition for Free Testosterone (TS)\nDESCRIPTION: Defines an ObservationDefinition resource for Free Testosterone. This provides the structure and metadata for capturing Free Testosterone level measurements.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/careplans/diagnostic-catalog/diagnostic-catalog.mdx#_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\n{ExampleCode}\n```\n\n----------------------------------------\n\nTITLE: GuidanceResponse Resource Properties Schema (JSON)\nDESCRIPTION: Defines the schema for the GuidanceResponse resource properties, filtering out inherited properties from the base Resource. This JSON defines the structure and data types of the resource elements.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/api/fhir/resources/guidanceresponse.mdx#_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\ndefinition.properties.filter((p) => !(p.inherited && p.base.includes('Resource')))\n```\n\n----------------------------------------\n\nTITLE: CDK Diff Command (Bash)\nDESCRIPTION: This Bash command utilizes the AWS CDK CLI to display the differences between the current infrastructure and the configuration defined in the specified JSON config file (`my-config-file.json`). It requires the AWS CDK CLI to be installed and configured.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/self-hosting/datadog.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx cdk diff -c config=my-config-file.json\n```\n\n----------------------------------------\n\nTITLE: Set Log Level (Bash)\nDESCRIPTION: This command sets the `MEDPLUM_LOG_LEVEL` environment variable to DEBUG when running the Docker image. This can be used to control the verbosity of the agent's logs.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/agent/README.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n  -e MEDPLUM_LOG_LEVEL=\"DEBUG\"\n```\n\n----------------------------------------\n\nTITLE: Build the production version using npm\nDESCRIPTION: Creates a production-ready build of the Medplum SMART on FHIR demo application. This build is optimized for deployment and performance.\nSOURCE: https://github.com/medplum/medplum/blob/main/examples/medplum-smart-on-fhir-demo/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Updating Medplum Server Config\nDESCRIPTION: This snippet shows the updated `medplum.config.json` file, reflecting the necessary changes to base URLs, issuer, audience, and other endpoints to use `https://host.docker.internal:8104/` and `https://localhost:8106/` for local development and testing with Caddy. It ensures all API calls and redirects use HTTPS.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/server/src/oauth/README.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"port\": 8103,\n  \"baseUrl\": \"https://host.docker.internal:8104/\",\n  \"issuer\": \"https://host.docker.internal:8104/\",\n  \"audience\": \"https://host.docker.internal:8104/\",\n  \"jwksUrl\": \"https://host.docker.internal:8104/.well-known/jwks.json\",\n  \"authorizeUrl\": \"https://host.docker.internal:8104/oauth2/authorize\",\n  \"tokenUrl\": \"https://host.docker.internal:8104/oauth2/token\",\n  \"userInfoUrl\": \"https://host.docker.internal:8104/oauth2/userinfo\",\n  \"appBaseUrl\": \"https://localhost:8106\",\n  \"binaryStorage\": \"file:./binary/\",\n  \"storageBaseUrl\": \"https://host.docker.internal:8104/storage/\",\n  \"database\": {\n    \"host\": \"localhost\",\n    \"port\": 5432,\n    \"dbname\": \"medplum\",\n    \"username\": \"medplum\",\n    \"password\": \"medplum\"\n  },\n  \"redis\": {\n    \"host\": \"localhost\",\n    \"port\": 6379,\n    \"password\": \"medplum\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: GraphQL Query Cost Estimation Example\nDESCRIPTION: This GraphQL query demonstrates how Medplum estimates the cost of a query based on the number of search operations and resource links traversed. The cost is calculated using a formula that considers the base cost of search and reference operations, as well as the complexity of child fields. The example breaks down the cost calculation for a query involving TaskList, TaskInfo, TaskPatient, and BasePatient fragments.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/graphql/query-limits.md#_snippet_1\n\nLANGUAGE: gql\nCODE:\n```\nquery ToDoList {\n  # Since this search requests up to 100 results, it costs 308 = 8 + 100*3\n  TaskList(_count: 100) {\n    ...TaskInfo\n  }\n}\n\n# This fragment costs 3 (due to a nested resource link)\nfragment TaskInfo on Task {\n  id\n  for {\n    # Crossing this resource link costs 3 = 1 + 2*1\n    resource {\n      ...TaskPatient\n    }\n  }\n}\n\n# This fragment costs 1 = 0 (its included base fragment) + 1 (resource link)\nfragment TaskPatient on Patient {\n  ...BasePatient\n  managingOrganization {\n    # Crossing this resource link costs 1 = 1 + 2*0\n    resource {\n      # Since this inline fragment contains only fields of this resource and doesn't perform any searches\n      # or cross resource links, it has cost 0\n      ... on Organization {\n        name\n      }\n    }\n  }\n}\n\n# Since this fragment contains only fields of this resource and doesn't perform any searches\n# or cross resource links, it has cost 0\nfragment BasePatient on Patient {\n  name {\n    given\n    family\n  }\n  gender\n  birthDate\n}\n```\n\n----------------------------------------\n\nTITLE: Querying ObservationDefinitions and SpecimenDefinitions (GraphQL)\nDESCRIPTION: This GraphQL query retrieves ObservationDefinitions and SpecimenDefinitions. It shows how to use GraphQL to efficiently fetch related data.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/careplans/diagnostic-catalog/diagnostic-catalog.mdx#_snippet_12\n\nLANGUAGE: graphql\nCODE:\n```\n{ExampleCode}\n```\n\n----------------------------------------\n\nTITLE: Server Error Response\nDESCRIPTION: Sample HTTP response (302 Found) from the `/oauth2/authorize` endpoint when there is an unexpected server error. The response includes the `Location` header with the `redirect_uri` and an `error=server_error` parameter. The HTTP 500 error is not sent to the client.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/api/oauth/authorize.md#_snippet_11\n\nLANGUAGE: HTTP\nCODE:\n```\nHTTP 1.1 302\nFound Location: https://client_redirect_uri?error=server_error\n```\n\n----------------------------------------\n\nTITLE: Creating Medplum Database PLpgSQL\nDESCRIPTION: This snippet creates a database named 'medplum' and grants all privileges on it to the 'medplum' user. This allows the Medplum application to store and retrieve data within this database, crucial for its operation.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/server/README.md#_snippet_1\n\nLANGUAGE: PLpgSQL\nCODE:\n```\nCREATE DATABASE medplum;\nGRANT ALL PRIVILEGES ON DATABASE medplum TO medplum;\n```\n\n----------------------------------------\n\nTITLE: HL7 OBX Segment Example (ORU)\nDESCRIPTION: This code snippet shows an example of an OBX (Observation/Result) segment in an HL7 ORU^R01 message. It contains the results of the test, including value, units, and reference ranges. Primary data includes set ID, value type, observation identifier, observation value, units, reference range, and date/time of the observation.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/integration/hl7-interfacing/orders-and-results.md#_snippet_9\n\nLANGUAGE: hl7\nCODE:\n```\nOBX|1|NM|1554-5^LDL Cholesterol^LN||130|mg/dL|<100=Optimal|N|||F|||202404221430||LAB^Laboratory^L\n```\n\n----------------------------------------\n\nTITLE: Execute Bot by ID (POST) - CLI\nDESCRIPTION: This snippet shows how to execute a Medplum Bot by its ID using the Medplum CLI. The command uses `medplum post` with the Bot ID and the `$execute` operation, sending a JSON payload.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/api/fhir/operations/bot-execute.mdx#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmedplum login\nmedplum post 'Bot/[id]/$execute' '{ \"foo\": \"bar\" }'\n```\n\n----------------------------------------\n\nTITLE: Running Artillery Load Test (Bash)\nDESCRIPTION: This Bash command initiates an Artillery load test using the 'healthcheck.yml' configuration file. It triggers the test scenarios defined in the YAML file to simulate user load on the FHIR datastore.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/self-hosting/load-testing.md#_snippet_5\n\nLANGUAGE: Bash\nCODE:\n```\nartillery run healthcheck.yml\n```\n\n----------------------------------------\n\nTITLE: Restart Redis Server\nDESCRIPTION: Restarts the Redis server to apply configuration changes. This is necessary after modifying the redis.conf file.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/self-hosting/install-from-scratch.md#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nsudo systemctl restart redis-server\n```\n\n----------------------------------------\n\nTITLE: Import statements for PractitionerRole component\nDESCRIPTION: Imports necessary modules for rendering the PractitionerRole documentation page. It includes React components for tabs, tab items, resource property tables, and search parameter tables.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/api/fhir/resources/practitionerrole.mdx#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport Link from '@docusaurus/Link';\nimport Tabs from '@theme/Tabs';\nimport TabItem from '@theme/TabItem';\nimport definition from '@site/static/data/resourceDefinitions/practitionerrole.json';\nimport { ResourcePropertiesTable, SearchParamsTable } from '@site/src/components/ResourceTables';\n```\n\n----------------------------------------\n\nTITLE: Create Organization B (JSON)\nDESCRIPTION: This JSON snippet defines an Organization resource representing 'Organization B'.  It sets the resourceType to `Organization` and the `name` property to 'Organization B'.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/access/multi-tenant-access-policy.md#_snippet_2\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"resourceType\": \"Organization\",\n    \"name\": \"Organization B\"\n}\n```\n\n----------------------------------------\n\nTITLE: Diagnosis Code Selection Component in TSX\nDESCRIPTION: This code demonstrates the implementation of a diagnosis code selection component using a `ValueSetAutocomplete`. The component retrieves ICD-10 codes and updates the diagnosis codes in the order state using `setDiagnoses`.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/integration/health-gorilla/sending-orders.md#_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\n<ValueSetAutocomplete\n  label=\"Diagnoses\"\n  binding=\"http://hl7.org/fhir/sid/icd-10-cm\"\n  name=\"diagnoses\"\n  maxValues={10}\n  onChange={(items) => {\n    const codeableConcepts = items.map((item) => ({\n      coding: [item],\n    })) as DiagnosisCodeableConcept[];\n    setDiagnoses(codeableConcepts);\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Observation from Survey Response Example\nDESCRIPTION: This code snippet illustrates an observation generated from a survey response. It uses the LOINC code for body weight (29463-7), the weight value, unit (pounds), and status (preliminary). Additionally, it includes the `method` field to indicate that the measurement was obtained through a survey, referencing an example practice's code system.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/charting/capturing-vital-signs.mdx#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"resourceType\": \"Observation\",\n  \"id\": \"example-observation-2\",\n  \"code\": {\n    \"system\": \"http://loinc.org\",\n    \"code\": \"29463-7\",\n    \"display\": \"Body weight\",\n  },\n  \"valueQuantity\": {\n    \"value\": 165,\n    \"unit\": \"pounds\",\n    \"system\": \"http://unitsofmeasure.org/\",\n    \"code\": \"[lb_av]\",\n  },\n  \"status\": \"preliminary\",\n  // A representation of how the measurement was made, in this case through a survey\n  \"method\": {\n    \"system\": \"http://example-practice.org/\",\n    \"code\": \"entry-survey\",\n    \"display\": \"entry survey\",\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Resource Definition (JSON)\nDESCRIPTION: Represents the JSON structure of the MedicinalProductUndesirableEffect resource definition. This definition is used to populate the schema and search parameters tables in the documentation.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/api/fhir/resources/medicinalproductundesirableeffect.mdx#_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\ndefinition\n```\n\n----------------------------------------\n\nTITLE: Validating FHIR Resource using MedplumClient (TypeScript)\nDESCRIPTION: This snippet shows how to use the `validateResource` method of the `MedplumClient` TypeScript class to validate a FHIR resource. The actual code is sourced from the `ExampleCode` variable, which is imported from an external file. It leverages the Medplum SDK to simplify the validation process.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/api/fhir/operations/validate-a-resource.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n{ExampleCode}\n```\n\n----------------------------------------\n\nTITLE: Resource Search with OR Criteria - TypeScript\nDESCRIPTION: Illustrates performing an OR search for a specific search parameter by specifying comma-separated values. This example searches for patients with either the given name 'Alice' or the given name 'Bob'.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/search/basic-search.mdx#_snippet_5\n\nLANGUAGE: string\nCODE:\n```\nconst patients = await medplum.searchResources('Patient', {\n  given: 'Alice,Bob',\n});\n\nconsole.log(patients.length);\n```\n\n----------------------------------------\n\nTITLE: Reinstall Script with Update Flag (Bash)\nDESCRIPTION: The `reinstall.sh` script can be used with the `--update` flag to update dependencies. This is useful after manually modifying `package.json` files. It automates the process of deleting `node_modules` and reinstalling dependencies with strict peer dependency checks.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/contributing/package-json.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n./scripts/reinstall.sh --update\n```\n\n----------------------------------------\n\nTITLE: Importing necessary modules in Javascript\nDESCRIPTION: This JavaScript code snippet imports necessary modules from the Docusaurus framework and a local JSON file.  Specifically, it imports Link, Tabs, and TabItem components from the '@docusaurus' library and imports definition from the '@site' directory.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/api/fhir/resources/implementationguide.mdx#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport Link from '@docusaurus/Link';\nimport Tabs from '@theme/Tabs';\nimport TabItem from '@theme/TabItem';\nimport definition from '@site/static/data/resourceDefinitions/implementationguide.json';\nimport { ResourcePropertiesTable, SearchParamsTable } from '@site/src/components/ResourceTables';\n```\n\n----------------------------------------\n\nTITLE: Using Broader Ranges for Peer Dependencies (JavaScript)\nDESCRIPTION: Peer dependencies should use broader version ranges to accommodate different versions of the host package. This allows flexibility while maintaining compatibility. The specified ranges should be carefully considered based on the supported versions of the peer dependency.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/contributing/package-json.md#_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n\"peerDependencies\": {\n  \"react\": \"^17.0.2 || ^18.0.0\"\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Resource Properties Table\nDESCRIPTION: Renders a table displaying resource properties based on the provided definition. It filters properties based on inheritance from the 'Resource' base type, specifically excluding inherited resource properties for the first table and including only inherited resource properties for the third table.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/api/fhir/resources/location.mdx#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n<ResourcePropertiesTable\n  properties={definition.properties.filter((p) => !(p.inherited && p.base.includes('Resource')))}\n/>\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\n<ResourcePropertiesTable properties={definition.properties.filter((p) => p.inherited && p.base.includes('Resource'))} />\n```\n\n----------------------------------------\n\nTITLE: Run the Medplum Provider Application\nDESCRIPTION: This command starts the Medplum Provider application in development mode.  It typically uses a script defined in the `package.json` file (e.g., `npm run dev`) to launch a local development server, often with features like hot reloading. The application should be accessible at `http://localhost:3000/`.\nSOURCE: https://github.com/medplum/medplum/blob/main/examples/medplum-provider/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: DeviceDefinition Search Parameters JSON\nDESCRIPTION: This JSON structure defines the search parameters available for querying DeviceDefinition resources. These parameters enable filtering and retrieving specific DeviceDefinition instances based on various attributes.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/api/fhir/resources/devicedefinition.mdx#_snippet_2\n\nLANGUAGE: JSON\nCODE:\n```\ndefinition.searchParameters\n```\n\n----------------------------------------\n\nTITLE: FHIR Resource Dependency Diagram\nDESCRIPTION: This Mermaid diagram visualizes the relationship between FHIR resources used for laboratory orders, including ServiceRequest, QuestionnaireResponse, Specimen, and DocumentReference. It illustrates the hierarchy of a parent ServiceRequest and its child ServiceRequests linked via 'basedOn'.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/integration/health-gorilla/sending-orders.md#_snippet_11\n\nLANGUAGE: mermaid\nCODE:\n```\ngraph TD\n    ParentOrder[Parent ServiceRequest<br>Lab Order] -->|basedOn| CBC[ServiceRequest<br>CBC with Differential<br>Test Code: 4485]\n    ParentOrder -->|basedOn| CMP[ServiceRequest<br>Comprehensive Metabolic Panel<br>Test Code: 10165]\n    ParentOrder -->|basedOn| TSH[ServiceRequest<br>TSH with Reflex to FT4<br>Test Code: 899]\n\n    CBC -->|supportingInfo| CbcAoE[QuestionnaireResponse<br>Fasting Status]\n    CMP -->|supportingInfo| CmpAoE[QuestionnaireResponse<br>Fasting Status<br>Medication List]\n    TSH -->|supportingInfo| TshAoE[QuestionnaireResponse<br>Thyroid Medication History]\n\n    ParentOrder -->|specimen| Specimen[Specimen<br>Blood - Venous]\n    ParentOrder -->|supportingInfo| ReqForm[DocumentReference<br>Requisition Form]\n    ParentOrder -->|supportingInfo| SpecLabel[DocumentReference<br>Specimen Label]\n\n    classDef parent fill:#8B57C4,stroke:#333,stroke-width:2px,color:#fff\n    classDef test fill:#B088E1,stroke:#333,stroke-width:2px,color:#fff\n    classDef specimen fill:#D4BCF2,stroke:#333,stroke-width:2px\n    classDef support fill:#A5D6A7,stroke:#333,stroke-width:2px\n\n\n    class ParentOrder parent\n    class CBC,CMP,TSH test\n    class CbcAoE,CmpAoE,TshAoE,ReqForm,SpecLabel support\n    class Specimen specimen\n```\n\n----------------------------------------\n\nTITLE: Read Resource History\nDESCRIPTION: Reads the history of a FHIR resource using the `readHistory` method.  It takes the resource type and ID as input and returns a Promise that resolves to a Bundle containing the resource history.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/core/README.md#_snippet_9\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst historyBundle = await medplum.readHistory('Patient', '123');\n```\n\n----------------------------------------\n\nTITLE: Install Medplum CLI as Package Dependency (npm)\nDESCRIPTION: Installs the Medplum CLI as a project dependency using npm. This requires prefixing the CLI commands with `npx` when running. Requires Node.js and npm to be installed.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/self-hosting/super-admin-cli.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @medplum/cli\n```\n\n----------------------------------------\n\nTITLE: CDK Deploy Command\nDESCRIPTION: This command uses the AWS CDK (Cloud Development Kit) to deploy changes to the cloud infrastructure based on the configuration specified in the `my-config-file.json` file.  It applies the changes to create or update the resources defined in the CDK stack.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/self-hosting/opentelemetry.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nnpx cdk deploy -c config=my-config-file.json\n```\n\n----------------------------------------\n\nTITLE: Questionnaire for Organization A (JSON)\nDESCRIPTION: This JSON snippet defines a `Questionnaire` resource associated with `Organization A` via the `meta.accounts` field.  The `meta.accounts` array contains a reference to `Organization/{{organization_a}}`, linking the questionnaire to the specified organization.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/access/multi-tenant-access-policy.md#_snippet_3\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"resourceType\": \"Questionnaire\",\n    \"meta\": {\n        \"accounts\": [\n            {\n                \"reference\": \"Organization/{{organization_a}}\"\n            }\n        ]\n    },\n    \"title\": \"Experience Rating Questionnaire\",\n    \"status\": \"active\",\n    \"item\": [\n        {\n            \"linkId\": \"1\",\n            \"text\": \"How would you rate your overall experience?\",\n            \"type\": \"choice\",\n            \"answerOption\": [\n                {\n                    \"valueCoding\": {\n                        \"system\": \"http://example.org/rating\",\n                        \"code\": \"5\",\n                        \"display\": \"Excellent\"\n                    }\n                }\n            ]\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Reload Nginx\nDESCRIPTION: Reloads the Nginx service to apply configuration changes without downtime.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/self-hosting/install-on-ubuntu.md#_snippet_21\n\nLANGUAGE: bash\nCODE:\n```\nsudo systemctl reload nginx\n```\n\n----------------------------------------\n\nTITLE: ClinicalImpression Inherited Elements Table\nDESCRIPTION: Displays a table of inherited properties for the ClinicalImpression resource from the base Resource.  It uses the `ResourcePropertiesTable` component and filters properties based on inheritance and the base Resource.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/api/fhir/resources/clinicalimpression.mdx#_snippet_2\n\nLANGUAGE: Markdown\nCODE:\n```\n<ResourcePropertiesTable properties={definition.properties.filter((p) => p.inherited && p.base.includes('Resource'))} />\n```\n\n----------------------------------------\n\nTITLE: Deleted Resource Response Example\nDESCRIPTION: This JSON snippet shows the structure of the response for a deleted resource event in a FHIR Subscription. The response includes the HTTP method, an empty body, and headers, including 'X-Medplum-Deleted-Resource' which contains the resource type and ID of the deleted resource.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/subscriptions/subscription-extensions.md#_snippet_6\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"method\": \"POST\",\n  \"body\": \"{}\",\n  \"headers\": {\n    \"Content-Type\": \"application/fhir+json\",\n    \"X-Medplum-Deleted-Resource\": \"${resource.resourceType}/${resource.id}\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Backfill Data Graph (Mermaid)\nDESCRIPTION: This Mermaid graph illustrates the backfill data phase, showing the process of migrating older data from the existing database to Medplum.  The diagram outlines the Extract, Transform, and Load (ETL) process. A Scheduler triggers the Migration Script, which extracts data from the Existing DB, transforms it into FHIR Resources, and loads them into Medplum.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/migration/adoption-stategy.md#_snippet_1\n\nLANGUAGE: mermaid\nCODE:\n```\ngraph LR\n    A[Existing DB] -->|Extract Data| B[Migration Script]\n    B -->|Transform| C[FHIR Resources]\n    C -->|Load| D[Medplum]\n    E[Scheduler] -->|Trigger| B\n```\n\n----------------------------------------\n\nTITLE: Validate Code Example Response (JavaScript)\nDESCRIPTION: This snippet shows the expected response format when validating a code against a CodeSystem using the `$validate-code` operation.  The response is a Parameters resource that includes a `result` parameter indicating whether the code is valid, and optionally a `display` parameter with the display text of the code.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/api/fhir/operations/codesystem-validate-code.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"resourceType\": \"Parameters\",\n  \"parameter\": [\n    { \"name\": \"result\", \"valueBoolean\": true },\n    { \"name\": \"display\", \"valueString\": \"Mild (qualifier value)\" }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: SQL Query using Name Lookup Table\nDESCRIPTION: Displays the SQL query for `Practitioner?name=Dub`.  It illustrates the use of a `LEFT JOIN` with the `HumanName` lookup table to perform name-based searches.  The `to_tsquery` function is used for full-text search capabilities on the `name_tsv` column.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/contributing/search-architecture.md#_snippet_6\n\nLANGUAGE: sql\nCODE:\n```\nSELECT \"Practitioner\".\"id\", \"Practitioner\".\"content\" FROM \"Practitioner\"\n  -- LEFT JOIN enables selecting matches or not\n  -- JOINed tables are assigned numbered aliases\n  LEFT JOIN \"HumanName\" AS \"T1\" ON (\n    \"Practitioner\".\"id\"=\"T1\".\"resourceId\" AND\n    -- Matching criteria are inserted into the JOIN ON\n    -- tsv column is computed when resource is inserted into DB\n    \"T1\".\"name_tsv\" @@ to_tsquery('simple','Dub:*')\n  )\nWHERE (\"Practitioner\".\"deleted\"=false AND\n  -- Find rows that match the code\n  \"T1\".\"resourceId\" IS NOT NULL\n-- GROUP BY is required with JOIN\n) GROUP BY \"Practitioner\".\"id\"\n```\n\n----------------------------------------\n\nTITLE: Sample JSON Response\nDESCRIPTION: This JSON snippet represents the successful response from the OAuth2 Token endpoint.  It contains the token type (Bearer), the access token, and the expiration time in seconds. The access token can then be used in subsequent API requests.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/auth/methods/client-credentials.md#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"token_type\": \"Bearer\",\n  \"access_token\": \"<YOUR_AUTH_TOKEN>\",\n  \"expires_in\": 3600\n}\n```\n\n----------------------------------------\n\nTITLE: Medplum GET Request\nDESCRIPTION: Executes a `medplum get` request to retrieve data from the Medplum API.  Replace `<url>` with the desired API endpoint.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/cli/index.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nmedplum get <url>\n```\n\n----------------------------------------\n\nTITLE: Import Patient Data Using Batch Request in Typescript\nDESCRIPTION: This code demonstrates how to import a batch of patient data efficiently using `executeBatch` and a patient data JSON file.  The `beforeEach` function ensures that the data is created before each test, promoting test isolation.  It imports JSON data and then creates a batch request.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/bots/unit-testing-bots.mdx#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport patientData from './patient-data.json';\n\nexport async function createBatchData(medplum: MedplumClient): Promise<void> {\n  const batch: Bundle = {\n    resourceType: 'Bundle',\n    type: 'transaction',\n    entry: patientData.entry\n  };\n  await medplum.executeBatch(batch);\n}\n```\n\n----------------------------------------\n\nTITLE: Invalid Request Error Response\nDESCRIPTION: Example of an error response for an invalid request to the /oauth2/userinfo endpoint. The response includes a 400 Bad Request status code and WWW-Authenticate header with error details such as \"invalid_request\" and a description.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/api/oauth/userinfo.md#_snippet_3\n\nLANGUAGE: HTTP\nCODE:\n```\nHTTP/1.1 400 Bad Request\n    WWW-Authenticate: error=\"invalid_request\",\n    error_description=\"Bad OAuth2 request at UserInfo Endpoint\"\n```\n\n----------------------------------------\n\nTITLE: Search Project Members - cURL\nDESCRIPTION: Searches for all ProjectMembership resources using a cURL command. This retrieves a list of all members associated with a project by sending a direct API request. cURL must be installed. The output is a list of ProjectMembership resources in FHIR format.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/auth/user-management-guide/user-management-guide.md#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n{ExampleCode}\n```\n\n----------------------------------------\n\nTITLE: Sorting Descending cURL\nDESCRIPTION: Demonstrates sorting FHIR search results in descending order using the '-' prefix with the `_sort` parameter, implemented in cURL. This example returns RiskAssessments in descending order of probability.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/search/basic-search.mdx#_snippet_24\n\nLANGUAGE: bash\nCODE:\n```\n{ExampleCode}\n```\n\n----------------------------------------\n\nTITLE: Read from Medplum Sequence Diagram (Mermaid)\nDESCRIPTION: This Mermaid sequence diagram illustrates the process of reading data from Medplum using a feature flag.  The diagram highlights how the Client's read request is routed either to the Existing API or the Medplum API based on the state of the Feature Flag. This allows for controlled testing and rollout of Medplum's read capabilities.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/migration/adoption-stategy.md#_snippet_2\n\nLANGUAGE: mermaid\nCODE:\n```\nsequenceDiagram\n    participant Client\n    participant Feature Flag\n    participant Existing API\n    participant Medplum API\n\n    Client->>Feature Flag: Read Request\n    alt Feature Flag=\"Use Medplum\"\n        Feature Flag->>Medplum API: Forward Request\n        Medplum API-->>Client: Response\n    else Feature Flag=\"Use Existing API\"\n        Feature Flag->>Existing API: Forward Request\n        Existing API-->>Client: Response\n    end\n```\n\n----------------------------------------\n\nTITLE: Constructing Webhook Endpoint URL (Bash)\nDESCRIPTION: This bash code shows how to construct the webhook endpoint URL using the client application ID, client secret, and bot ID. This URL is used in the SaaS application's webhook configuration. The format includes authentication credentials directly in the URL, followed by the Medplum API endpoint for executing the bot.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/bots/consuming-webhooks.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nhttps://<client-application-id>:<client-secret>@api.medplum.com/fhir/R4/Bot/<bot-id>/$execute\n```\n\n----------------------------------------\n\nTITLE: Create ClientApplication with Medplum CLI\nDESCRIPTION: This code snippet demonstrates how to create a new ClientApplication using the Medplum CLI. It requires the `projectId` to be specified and includes parameters like name, description, redirect URI, and access policy. The CLI must be configured with the appropriate Medplum credentials.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/api/project-admin/client.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmedplum post admin/projects/:projectId/client \\\n'{\n  \"name\": \"Hello World Client\",\n  \"description\": \"Client App for Medplum Hello World\",\n  \"redirectUri\": \"https://example.com/redirect\"\n  \"accessPolicy\": {\n    \"reference\": \"AccessPolicy/access-policy-id\"\n  }\n}'\n```\n\n----------------------------------------\n\nTITLE: Medplum DELETE Request - Delete Patient by ID\nDESCRIPTION: Executes a `medplum delete` request to delete a patient by their ID. Replace `$id` with the patient's actual ID.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/cli/index.md#_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\nmedplum delete Patient/$id\n```\n\n----------------------------------------\n\nTITLE: Filtering Resource Properties for Display\nDESCRIPTION: Filters the properties of the Patient resource based on whether they are inherited from the 'Resource' base class. This allows displaying properties specific to the Patient resource and inherited properties separately. The properties are filtered using the `filter` method on the `definition.properties` array.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/api/fhir/resources/patient.mdx#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ndefinition.properties.filter((p) => !(p.inherited && p.base.includes('Resource')))\n```\n\nLANGUAGE: javascript\nCODE:\n```\ndefinition.properties.filter((p) => p.inherited && p.base.includes('Resource'))\n```\n\n----------------------------------------\n\nTITLE: Get Agent Status by Name\nDESCRIPTION: This command retrieves the status of an agent by specifying its name using the `name` search parameter. It uses the `medplum get` command-line tool to execute the `$bulk-status` operation with the `name` parameter set to 'Test Agent 1'.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/agent/bulk-status.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nmedplum get 'Agent/$bulk-status?name=Test+Agent+1'\n```\n\n----------------------------------------\n\nTITLE: Importing UsageContext Definition (JavaScript)\nDESCRIPTION: This snippet imports the JSON definition for the UsageContext datatype from a static file. This definition likely contains the structure and properties of the UsageContext FHIR resource.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/api/fhir/datatypes/usagecontext.mdx#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport definition from '@site/static/data/datatypeDefinitions/usagecontext.json';\n```\n\n----------------------------------------\n\nTITLE: Searching by Compartment using _compartment - cURL\nDESCRIPTION: Demonstrates searching for all Communication resources within a specific Patient compartment using the non-standard `_compartment` parameter using a cURL command. This finds all communications related to a given patient. Requires cURL to be installed and configured.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/search/advanced-search-parameters.mdx#_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\n{ExampleCode}\n```\n\n----------------------------------------\n\nTITLE: Run the app bash\nDESCRIPTION: This command starts the Medplum Charting Demo application, typically running on `http://localhost:3000/`.\nSOURCE: https://github.com/medplum/medplum/blob/main/examples/medplum-chart-demo/README.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Update Patient Mutation Response\nDESCRIPTION: Example response for Update Patient Mutation.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/graphql/mutations.mdx#_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\n{ExampleCode}\n```\n\n----------------------------------------\n\nTITLE: Subscription for C-CDA Converter Bot (Medplum)\nDESCRIPTION: Defines a Medplum Subscription resource that triggers the C-CDA converter bot upon creation of a new Media resource. It specifies the resource type as 'Media', the interaction as 'create', and the endpoint as the bot's ID.\nSOURCE: https://github.com/medplum/medplum/blob/main/examples/medplum-demo-bots/src/ccda-converter/README.md#_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"resourceType\": \"Subscription\",\n  \"status\": \"active\",\n  \"criteria\": \"Media\",\n  \"reason\": \"Calls the example C-CDA converter bot on creation of a new Media resource.\",\n  \"channel\": {\n    \"type\": \"rest-hook\",\n    \"endpoint\": \"Bot/<your_bot_id>\"\n  },\n  \"extension\": [\n    {\n      \"url\": \"https://medplum.com/fhir/StructureDefinition/subscription-supported-interaction\",\n      \"valueCode\": \"create\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: TypeScript SDK: Replacing Deprecated Methods\nDESCRIPTION: This table lists deprecated methods in the `@medplum/core` package and their recommended replacements or alternatives.  TypeScript code using these old methods must be updated to avoid errors after upgrading to v4.0.0.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/blog/2025-02-20-v4.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nmatchesAccessPolicy  -> satisfiedAccessPolicy\nsearchValueSet  -> valueSetExpand\nuploadMedia -> createMedia\nparseSearchUrl -> parseSearchRequest\nparseSearchDefinition -> parseSearchRequest\nparseCriteriaAsSearchRequest -> parseSearchRequest\ncrawlResource -> crawlTypedValue\ncrawlResourceAsync -> crawlTypedValueAsync\nResourceVisitor -> CrawlerVisitor\nAsyncResourceVisitor -> AsyncCrawlerVisitor\nHL7 get and getAll -> getSegment, getField, getComponent (context-dependent)\n```\n\n----------------------------------------\n\nTITLE: Creating DocumentReference with Binary Reference - Typescript\nDESCRIPTION: This code snippet shows how to create a DocumentReference resource in Typescript that references a Binary resource.  It includes the necessary imports and the DocumentReference creation logic.  The `DocumentReference.content.attachment.url` points to a Medplum Binary resource which gets converted to a pre-signed URL.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/charting/external-documents.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport ExampleCode from '!!raw-loader!@site/../examples/src/charting/external-documents.ts';\nimport MedplumCodeBlock from '@site/src/components/MedplumCodeBlock';\n\nimport Tabs from '@theme/Tabs';\nimport TabItem from '@theme/TabItem';\n```\n\nLANGUAGE: typescript\nCODE:\n```\n{ExampleCode}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Multiple FHIR Resources with GraphQL\nDESCRIPTION: This GraphQL query retrieves a list of Patient resources based on name and city criteria, and a list of Medication resources. It retrieves specified fields for each resource. GraphQL queries can retrieve and modify multiple resources in one query.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/blog/2023-09-06-graphql-vs-rest.md#_snippet_2\n\nLANGUAGE: graphql\nCODE:\n```\n{\n  # Retrieve all Patients\n  patients: PatientList(name: \"Eve\", address_city: \"Philadelphia\") {\n    resourceType\n    id\n    name {\n      family\n      given\n    }\n    address {\n      line\n      city\n      state\n      postalCode\n    }\n  }\n  # Retrieve all Medications\n  medications: MedicationList {\n    code {\n      text\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Create a New Project (Typescript)\nDESCRIPTION: This code snippet demonstrates how to create a new project using the Medplum client library in Typescript. It requires a ClientApplication with super admin privileges to execute successfully. The `createProjectTs` block from the ExampleCode file is used.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/auth/user-management-guide/user-management-guide.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { MedplumClient } from '@medplum/core';\n\nasync function createProject(medplum: MedplumClient, projectName: string): Promise<void> {\n  const project = await medplum.createResource({\n    resourceType: 'Project',\n    name: projectName,\n  });\n  console.log(`Created project: ${project.id}`);\n}\n\n```\n\n----------------------------------------\n\nTITLE: Valid Agent Status Response - JSON\nDESCRIPTION: This JSON snippet shows a valid response from the `$status` operation when the agent is connected. It includes the status, version, and last updated timestamp.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/agent/status.md#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"resourceType\": \"Parameters\",\n  \"parameter\": [\n    {\n      \"name\": \"status\",\n      \"valueCode\": \"connected\"\n    },\n    {\n      \"name\": \"version\",\n      \"valueString\": \"3.1.4\"\n    },\n    {\n      \"name\": \"lastUpdated\",\n      \"valueInstant\": \"2024-04-19T00:00:00Z\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Start PostgreSQL Client\nDESCRIPTION: Starts the PostgreSQL client as the 'postgres' user. Allows for direct interaction with the database via the command line.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/self-hosting/install-from-scratch.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsudo -u postgres psql\n```\n\n----------------------------------------\n\nTITLE: General Benefits Check Response Example\nDESCRIPTION: This is a placeholder for an example of a general benefits check response. The actual code demonstrates a `CoverageEligibilityResponse` that includes general benefits information for a plan, again with a focus on the structure of the `insurance.item` array and its properties to show what benefits are included or excluded. The `ExampleCode` string will be replaced with the appropriate JSON or object literal.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/billing/insurance-eligibility-checks.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n{ExampleCode}\n```\n\n----------------------------------------\n\nTITLE: Pulling Medplum Docker Image\nDESCRIPTION: This command pulls the latest version of the Medplum Server Docker image from Docker Hub. Ensure Docker is installed and running before executing this command.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/self-hosting/running-medplum-docker-container.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker pull medplum/medplum-server\n```\n\n----------------------------------------\n\nTITLE: LOINC Code ValueCoding JSON Snippet\nDESCRIPTION: These snippets show the JSON structure for representing a LOINC code within the 'valueCoding' property of an answer option. Each snippet includes the 'code', 'display', and 'system' properties.  This particular snippet is used to define the answer options for the PHQ-4 questions, such as 'Not at all', 'Several days', etc.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/careplans/loinc.mdx#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"valueCoding\": {\n    // highlight-start\n    \"code\": \"LA6568-5\",\n    \"display\": \"Not at all\",\n    \"system\": \"http://loinc.org\"\n    // highlight-end\n  }\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"valueCoding\": {\n    // highlight-start\n    \"code\": \"LA6569-3\",\n    \"display\": \"Several days\",\n    \"system\": \"http://loinc.org\"\n    // highlight-end\n  }\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"valueCoding\": {\n    // highlight-start\n    \"code\": \"LA6570-1\",\n    \"display\": \"More than half the days\",\n    \"system\": \"http://loinc.org\"\n    // highlight-end\n  }\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"valueCoding\": {\n    // highlight-start\n    \"code\": \"LA6571-9\",\n    \"display\": \"Nearly every day\",\n    \"system\": \"http://loinc.org\"\n    // highlight-end\n  }\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"valueCoding\": {\n    // highlight-start\n    \"code\": \"LA18938-3\",\n    \"display\": \"More days than not\",\n    \"system\": \"http://loinc.org\"\n    // highlight-end\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a MockClient Instance in Typescript\nDESCRIPTION: This code snippet demonstrates how to create an instance of the `MockClient` class. The `MockClient` extends `MedplumClient` but stores resources locally, making it suitable for isolated unit testing of Medplum Bots. This avoids cross-talk between different tests during execution.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/bots/unit-testing-bots.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { MockClient } from '@medplum/mock';\n\ntest('Create MockClient', () => {\n  const medplum = new MockClient();\n  expect(medplum).toBeDefined();\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Bot Creation Parameters Typescript\nDESCRIPTION: This Typescript code defines the expected structure for the request body when creating a new Medplum Bot. It includes properties like `name` (string, required), `description` (string, optional), and `accessPolicy` (Reference<AccessPolicy>, optional). The `accessPolicy` references an existing AccessPolicy resource.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/api/project-admin/bot.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  name: string;\n  description?: string;\n  accessPolicy?: Reference<AccessPolicy>;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating FHIR Organization Resource with Extensions (JSON)\nDESCRIPTION: This JSON snippet demonstrates how to create a FHIR Organization resource with extensions to track annual maximum and minimum study counts. It includes a top-level extension URL and nested extensions for specific values.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/blog/2022-02-12-fhir-extensions.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"resourceType\": \"Organization\",\n  \"name\": \"City Hospital\",\n  \"extension\": [\n    {\n      \"url\": \"https://www.myteleradiologypractice.com/organization-details\",\n      \"extension\": [\n        {\n          \"url\": \"annualMaximum\",\n          \"valueInteger\": 1000\n        },\n        {\n          \"url\": \"annualMinimum\",\n          \"valueInteger\": 50\n        }\n      ]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Medplum Bot Save Command\nDESCRIPTION: Updates the `code` value on a `Bot` resource in Medplum by reading the contents of the `source` file specified in `medplum.config.json`. Replace `<bot name>` with the name of the bot from the config file.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/cli/index.md#_snippet_28\n\nLANGUAGE: bash\nCODE:\n```\nnpx medplum bot save <bot name>\n```\n\n----------------------------------------\n\nTITLE: Importing Modules for FHIR Flag Documentation\nDESCRIPTION: This snippet imports necessary modules for rendering the FHIR Flag documentation page. It includes components for displaying resource properties, search parameters, and navigation tabs.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/api/fhir/resources/flag.mdx#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Link from '@docusaurus/Link';\nimport Tabs from '@theme/Tabs';\nimport TabItem from '@theme/TabItem';\nimport definition from '@site/static/data/resourceDefinitions/flag.json';\nimport { ResourcePropertiesTable, SearchParamsTable } from '@site/src/components/ResourceTables';\n```\n\n----------------------------------------\n\nTITLE: Check Medplum Login Status\nDESCRIPTION: Checks the current Medplum login status using the `medplum whoami` command. Requires the Medplum CLI to be installed and configured.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/self-hosting/super-admin-cli.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nmedplum whoami\n```\n\n----------------------------------------\n\nTITLE: Simple Medplum React Example\nDESCRIPTION: Provides a complete example of integrating Medplum React components within a React application. It imports necessary modules, creates a Medplum client, defines a Mantine theme, and renders the application wrapped in `StrictMode`, `BrowserRouter`, `MedplumProvider`, and `MantineProvider`.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/react/index.mdx#_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nimport { MantineProvider, createTheme } from '@mantine/core';\nimport '@mantine/core/styles.css';\nimport { MedplumClient } from '@medplum/core';\nimport { MedplumProvider } from '@medplum/react';\nimport '@medplum/react/styles.css';\nimport { StrictMode } from 'react';\nimport { createRoot } from 'react-dom/client';\nimport { BrowserRouter } from 'react-router';\nimport { App } from './App';\n\nconst medplum = new MedplumClient({\n  onUnauthenticated: () => (window.location.href = '/'),\n});\n\nconst theme = createTheme({\n  headings: {\n    sizes: {\n      h1: {\n        fontSize: '1.125rem',\n        fontWeight: '500',\n        lineHeight: '2.0',\n      },\n    },\n  },\n  fontSizes: {\n    xs: '0.6875rem',\n    sm: '0.875rem',\n    md: '0.875rem',\n    lg: '1.0rem',\n    xl: '1.125rem',\n  },\n});\n\nconst container = document.getElementById('root') as HTMLDivElement;\nconst root = createRoot(container);\nroot.render(\n  <StrictMode>\n    <BrowserRouter>\n      <MedplumProvider medplum={medplum}>\n        <MantineProvider theme={theme}>\n          <App />\n        </MantineProvider>\n      </MedplumProvider>\n    </BrowserRouter>\n  </StrictMode>\n);\n```\n\n----------------------------------------\n\nTITLE: Get Medplum Project by ID\nDESCRIPTION: Retrieves a specific Medplum project by its ID using the `medplum get Project/f4d16028-3de1-4473-bf66-899461b658c6` command.  Requires super admin privileges and a valid login session. Returns a FHIR Project resource.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/self-hosting/super-admin-cli.md#_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nmedplum get Project/f4d16028-3de1-4473-bf66-899461b658c6\n```\n\n----------------------------------------\n\nTITLE: Create PostgreSQL Database\nDESCRIPTION: Creates a PostgreSQL database named 'medplum' and grants all privileges to the 'medplum' user. This ensures the Medplum application can access and modify the database.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/self-hosting/install-from-scratch.md#_snippet_4\n\nLANGUAGE: PLpgSQL\nCODE:\n```\nCREATE DATABASE medplum;\nGRANT ALL PRIVILEGES ON DATABASE medplum TO medplum;\n\\c medplum\nGRANT ALL ON SCHEMA public TO medplum;\nALTER DEFAULT PRIVILEGES IN SCHEMA public GRANT ALL ON TABLES TO medplum;\n```\n\n----------------------------------------\n\nTITLE: createStyles Example (tsx)\nDESCRIPTION: Example of using `createStyles` in Mantine 6.x to define styles using CSS-in-JS. This demonstrates the older approach to styling.  The `createStyles` function receives a theme object and returns an object with styles.  It uses the theme to get colors and other style properties.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/react/mantine-6x-to-7x.mdx#_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n// 6.x\nimport { createStyles } from '@mantine/core';\n\nconst useStyles = createStyles((theme) => ({\n  root: {\n    backgroundColor: theme.colors.red[5],\n  },\n}));\n```\n\n----------------------------------------\n\nTITLE: Importing React Components (Tabs, TabItem, Link)\nDESCRIPTION: Imports necessary React components from Docusaurus theming library to create a tabbed interface and handle navigation links. These components enable the structured display of Binary resource information across different sections: Schema, Usage, Relationships and Referenced By.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/api/fhir/resources/binary.mdx#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport Link from '@docusaurus/Link';\nimport Tabs from '@theme/Tabs';\nimport TabItem from '@theme/TabItem';\n```\n\n----------------------------------------\n\nTITLE: Representing Coded Values using Coding in FHIR\nDESCRIPTION: This code snippet demonstrates how to represent a coded value using the `Coding` data type in FHIR. It includes the code system URL, the code itself, and a display value for human readability. The `Coding` data type is used to unambiguously represent coded values in FHIR.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/terminology/index.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"system\": \"http://loinc.org\",\n  \"code\": \"8867-4\",\n  \"display\": \"Heart rate\"\n}\n```\n\n----------------------------------------\n\nTITLE: Token Grant with `openid` Scope Sample Response\nDESCRIPTION: Sample HTTP response (302 Found) from the `/oauth2/authorize` endpoint after a successful token grant with the `openid` scope. The response includes the `Location` header with the `redirect_uri`, `id_token`, `access_token`, `token_type`, `expires_in`, and `state` in the fragment.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/api/oauth/authorize.md#_snippet_7\n\nLANGUAGE: HTTP\nCODE:\n```\nHTTP/1.1 302 Found\nLocation: https://YOUR_APP/redirect_uri#id_token=ID_TOKEN&access_token=ACCESS_TOKEN&token_type=bearer&expires_in=3600&state=STATE\n```\n\n----------------------------------------\n\nTITLE: Clone Medplum Project with Resource Types\nDESCRIPTION: Clones a Medplum project and includes only specific resource types, specified as an array in the `resourceTypes` parameter of the JSON payload. Requires super admin privileges and a valid login session. Returns the JSON representation of the newly cloned project.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/self-hosting/super-admin-cli.md#_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\nmedplum post 'Project/bca80725-ea6a-4fb4-8eac-41b8ee51f09e/$clone' '{\"resourceTypes\": [\"Patient\"]}'\n```\n\n----------------------------------------\n\nTITLE: Mermaid Diagram of Labs & Imaging Workflow\nDESCRIPTION: This Mermaid diagram illustrates the relationships between Patient, ServiceRequest, Specimen, Observation, and DiagnosticReport resources in a typical Labs & Imaging workflow.  It shows how a patient's ServiceRequest leads to a Specimen collection, which then generates Observations, and ultimately a DiagnosticReport.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/labs-imaging/index.md#_snippet_0\n\nLANGUAGE: Mermaid\nCODE:\n```\nflowchart RL\n    patient[<table><thead><tr><th>Patient</th></tr></thead><tbody><tr><td>Lisa Simpson</td></tr></tbody></table>]\n    order[<table><thead><tr><th>ServiceRequest</th></tr></thead><tbody><tr><td>Basic Metabolic Panel</td></tr></tbody></table>]\n    specimen[<table><thead><tr><th>Specimen</th></tr></thead><tbody><tr><td>Whole Blood</td></tr><tr><td><em>Collected: 2020-01-01T14:12</em></td></tr></tbody></table>]\n    obs1[<table><thead><tr><th>Observation</th></tr></thead><tbody><tr><td>Glucose in Blood</td></tr><tr><td>4.0 mmol/L</td></tr></tbody></table>]\n    obs2[<table><thead><tr><th>Observation</th></tr></thead><tbody><tr><td>Urea nitrogen in Blood</td></tr></tbody></table>]\n    report[<table><thead><tr><th>DiagnosticReport</th></tr></thead></table>]\n\n    subgraph Order\n    order -->|subject| patient\n    order -->|specimen| specimen\n    end\n\n    subgraph Result\n    report -->|result| obs1\n    report -->|result| obs2\n    report -->|basedOn| order\n    obs1 -->|basedOn| order\n    obs2 -->|basedOn| order\n    end\n```\n\n----------------------------------------\n\nTITLE: Update Master Authorized Networks (Terraform)\nDESCRIPTION: This snippet configures the master_authorized_networks in the Terraform configuration. Replace `your-public-ip` with your actual public IP address to allow access to the GKE cluster.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/self-hosting/install-on-gcp.md#_snippet_10\n\nLANGUAGE: terraform\nCODE:\n```\nmaster_authorized_networks = [\n  {\n    cidr_block   = \"your-public-ip/32\"\n    display_name = \"Your Machine\"\n  },\n]\n```\n\n----------------------------------------\n\nTITLE: CodeableConcept Example: Tylenol in RxNorm and NDC\nDESCRIPTION: This TypeScript code snippet demonstrates the use of CodeableConcept to represent a medication (Tylenol) using different coding systems (RxNorm and NDC). It shows how the `system` string distinguishes between the different code systems.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/blog/2023-08-08-system-strings.mdx#_snippet_4\n\nLANGUAGE: ts\nCODE:\n```\n{\n  text: 'Tylenol 325 MG Oral Tablet';\n  coding: [\n    // RxNorm\n    {\n      system: 'http://www.nlm.nih.gov/research/umls/rxnorm',\n      code: '209387',\n    },\n    // NDC\n    {\n      system: 'http://hl7.org/fhir/sid/ndc',\n      code: '50580045850',\n    },\n  ];\n}\n```\n\n----------------------------------------\n\nTITLE: CDK Synth with Verbose Logging\nDESCRIPTION: This command synthesizes an AWS CDK app and outputs the resulting CloudFormation template. The `--verbose` flag enables detailed logging, which can be helpful for troubleshooting. The `-c config` parameter specifies the configuration file to use.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/self-hosting/install-on-aws.md#_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\nnpx cdk synth --verbose -c config=medplum.demo.config.json\n```\n\n----------------------------------------\n\nTITLE: IAM Assume Role Policy\nDESCRIPTION: This JSON snippet shows an IAM policy that allows an AWS account to assume roles, which is necessary for CDK deployments. It grants permissions for `sts:AssumeRole` and `iam:PassRole` on roles matching the `arn:aws:iam::*:role/cdk-*` pattern.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/self-hosting/install-on-aws.md#_snippet_17\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Sid\": \"assumerole\",\n  \"Effect\": \"Allow\",\n  \"Action\": [\"sts:AssumeRole\", \"iam:PassRole\"],\n  \"Resource\": [\"arn:aws:iam::*:role/cdk-*\"]\n}\n```\n\n----------------------------------------\n\nTITLE: FHIR Condition Resource for Jane Smith's Hypertension in TypeScript\nDESCRIPTION: This is an example of a FHIR Condition resource for Jane Smith's Hypertension (PC003). It links to the patient via conditional reference and includes both local and standard ICD-10 codes, along with a human-readable text description.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/migration/convert-to-fhir.md#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Condition } from '@medplum/fhirtypes';\n\nexport const janeSmithHypertension: Condition = {\n  resourceType: 'Condition',\n  id: 'jane-smith-hypertension',\n  code: {\n    coding: [\n      {\n        system: 'http://your-source-system.com/conditions',\n        code: 'HT001',\n        display: 'Hypertension'\n      },\n      {\n        system: 'http://hl7.org/fhir/sid/icd-10',\n        code: 'I10',\n        display: 'Essential (primary) hypertension'\n      }\n    ],\n    text: 'Hypertension'\n  },\n  subject: {\n    reference: 'Patient?identifier=http://your-source-system.com/patients|P002'\n  },\n  identifier: [\n    {\n      system: 'http://your-source-system.com/patient_conditions',\n      value: 'PC003'\n    }\n  ],\n  onsetDateTime: '2023-02-22'\n};\n\n```\n\n----------------------------------------\n\nTITLE: HTTP Redirect for Read Timeout Error\nDESCRIPTION: This snippet shows the HTTP redirect response that Medplum sends to the client's redirect URI when a read timeout error occurs while communicating with an external IdP. The response includes the `error` parameter set to `invalid_request` and the `error_description` parameter set to `Read+timed_out`.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/api/oauth/authorize.md#_snippet_17\n\nLANGUAGE: HTTP\nCODE:\n```\nHTTP 1.1 302\nFound Location: https://client_redirect_uri?error=invalid_request&\n                  error_description=Read+timed+out\n```\n\n----------------------------------------\n\nTITLE: FHIR Search with _include:iterate (CLI)\nDESCRIPTION: This CLI command demonstrates how to perform a FHIR search with the `_include:iterate` parameter to recursively retrieve linked resources using the Medplum CLI. It is used to search for Observation resources and include related Patient and Practitioner resources. Requires the Medplum CLI to be installed and configured.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/search/includes.mdx#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n{ExampleCode}\n```\n\n----------------------------------------\n\nTITLE: HL7 PID Segment Example\nDESCRIPTION: This code snippet shows an example of a PID (Patient Identification) segment in an HL7 ORM^O01 message. It provides patient identification and demographic information, including patient ID, name, date of birth, and address.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/integration/hl7-interfacing/orders-and-results.md#_snippet_1\n\nLANGUAGE: hl7\nCODE:\n```\nPID|1||001234567^^^HospitalA&1.2.840.113619.19.1||Doe^John^A||19800101|M|||123 Main St.^Apt 1^Anytown^State^12345^USA||(123)456-7890|||S||123456789|123-45-6789\n```\n\n----------------------------------------\n\nTITLE: Running the Application - npm\nDESCRIPTION: This command starts the Medplum Scheduling Demo application using the script defined as 'dev' in the package.json file. Typically, this command will start a development server, often with hot-reloading, making it easier to develop and test the application.\nSOURCE: https://github.com/medplum/medplum/blob/main/examples/medplum-scheduling-demo/README.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Filtering Resource Properties (JavaScript)\nDESCRIPTION: Filters resource properties based on inheritance and base resource inclusion.  This is used to separate inherited properties from those specific to MedicinalProductUndesirableEffect.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/api/fhir/resources/medicinalproductundesirableeffect.mdx#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\ndefinition.properties.filter((p) => !(p.inherited && p.base.includes('Resource')))\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\ndefinition.properties.filter((p) => p.inherited && p.base.includes('Resource'))\n```\n\n----------------------------------------\n\nTITLE: Medplum Project Current Command\nDESCRIPTION: Executes the `medplum project current` command, which displays the currently selected project.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/cli/index.md#_snippet_19\n\nLANGUAGE: bash\nCODE:\n```\nmedplum project current\n```\n\n----------------------------------------\n\nTITLE: Change to server directory\nDESCRIPTION: Changes the current directory to the server package directory. This is a necessary step to execute subsequent commands within the correct context.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/contributing/server-profiling.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncd packages/server\n```\n\n----------------------------------------\n\nTITLE: Medplum Bot Deploy Command Example\nDESCRIPTION: Example command to deploy a Medplum bot to your Medplum project. This reads the `dist` file specified in `medplum.config.json` and deploys it to the bot runtime.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/cli/index.md#_snippet_36\n\nLANGUAGE: bash\nCODE:\n```\nnpx medplum bot deploy hello-world\n```\n\n----------------------------------------\n\nTITLE: Querying PlanDefinitions (CLI)\nDESCRIPTION: This code snippet shows how to query all PlanDefinitions that represent a laboratory procedure using the Medplum CLI. The command likely uses the FHIR search API.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/careplans/diagnostic-catalog/diagnostic-catalog.mdx#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n{ExampleCode}\n```\n\n----------------------------------------\n\nTITLE: Install dependencies with NPM\nDESCRIPTION: This command installs the necessary dependencies for the Medplum bot project using npm.  It reads the package.json file and installs all listed dependencies.\nSOURCE: https://github.com/medplum/medplum/blob/main/examples/medplum-demo-bots/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm i\n```\n\n----------------------------------------\n\nTITLE: Get Ingress IP Address\nDESCRIPTION: This command retrieves the IP address of the Ingress resource. This IP address is required for updating DNS records to point to the backend API.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/self-hosting/install-on-gcp.md#_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\nkubectl get ingress medplum-server --namespace medplum\n```\n\n----------------------------------------\n\nTITLE: Importing React Components\nDESCRIPTION: This snippet imports necessary React components from the Docusaurus framework and a local JSON file for rendering resource documentation. These components are used to display the schema and search parameters of the CodeSystem resource.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/api/fhir/resources/codesystem.mdx#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport Link from '@docusaurus/Link';\nimport Tabs from '@theme/Tabs';\nimport TabItem from '@theme/TabItem';\nimport definition from '@site/static/data/resourceDefinitions/codesystem.json';\nimport { ResourcePropertiesTable, SearchParamsTable } from '@site/src/components/ResourceTables';\n```\n\n----------------------------------------\n\nTITLE: List Medplum Projects\nDESCRIPTION: Retrieves a list of all Medplum projects using the `medplum get Project` command.  Requires super admin privileges and a valid login session.  Returns a FHIR Bundle resource containing Project resources.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/self-hosting/super-admin-cli.md#_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nmedplum get Project\n```\n\n----------------------------------------\n\nTITLE: Import Statements\nDESCRIPTION: Imports necessary modules for rendering documentation, including Link, Tabs, TabItem from Docusaurus, a JSON definition for the Quantity data type, and custom components for displaying resource properties and search parameters.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/api/fhir/datatypes/quantity.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport Link from '@docusaurus/Link';\nimport Tabs from '@theme/Tabs';\nimport TabItem from '@theme/TabItem';\nimport definition from '@site/static/data/datatypeDefinitions/quantity.json';\nimport { ResourcePropertiesTable, SearchParamsTable } from '@site/src/components/ResourceTables';\n```\n\n----------------------------------------\n\nTITLE: Rendering Inherited TestReport Elements Table\nDESCRIPTION: Renders a table displaying the inherited properties of the TestReport resource from the base Resource.  It uses the ResourcePropertiesTable component and filters the properties to only include inherited ones from Resource.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/api/fhir/resources/testreport.mdx#_snippet_3\n\nLANGUAGE: HTML\nCODE:\n```\n<ResourcePropertiesTable properties={definition.properties.filter((p) => p.inherited && p.base.includes('Resource'))} />\n```\n\n----------------------------------------\n\nTITLE: Importing Example Communication Code (TypeScript/JavaScript)\nDESCRIPTION: This code snippet imports an example communication code block from a TypeScript file located in the `@site/..//examples/src/communications/organizing-communications.ts` directory.  It utilizes `raw-loader` to load the file content as a string. The MedplumCodeBlock component is imported for rendering the code block, and Tabs and TabItem from `@theme/Tabs` are used for creating tabbed interfaces.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/communications/organizing-communications.mdx#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport ExampleCode from '!!raw-loader!@site/..//examples/src/communications/organizing-communications.ts';\nimport MedplumCodeBlock from '@site/src/components/MedplumCodeBlock';\nimport Tabs from '@theme/Tabs';\nimport TabItem from '@theme/TabItem';\n```\n\n----------------------------------------\n\nTITLE: FHIR Search Response with _include and _revinclude (TypeScript)\nDESCRIPTION: This TypeScript code snippet represents an example FHIR search response. It contains a FHIR Bundle with resources linked via `_include` and `_revinclude`. It shows the data structure returned by a FHIR server when using the `_include` and `_revinclude` parameters.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/search/includes.mdx#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n{ExampleCode}\n```\n\n----------------------------------------\n\nTITLE: Start PostgreSQL Client\nDESCRIPTION: Starts the PostgreSQL client as the postgres user, allowing for database manipulation. It is used to create the \"medplum\" user and database.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/self-hosting/install-on-ubuntu.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsudo -u postgres psql\n```\n\n----------------------------------------\n\nTITLE: Patient with Related Encounters cURL Request\nDESCRIPTION: This cURL command illustrates how to send a GraphQL query to find a Patient and all related Encounter resources using a reverse-reference search. It includes the required headers and payload for executing the complex query.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/graphql/basic-queries.mdx#_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\n{ExampleCode}\n```\n\n----------------------------------------\n\nTITLE: Importing React Components for EvidenceVariable\nDESCRIPTION: Imports necessary React components from Docusaurus and local modules to construct the EvidenceVariable documentation page. This includes components for tabs, links, and resource property tables.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/api/fhir/resources/evidencevariable.mdx#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport Link from '@docusaurus/Link';\nimport Tabs from '@theme/Tabs';\nimport TabItem from '@theme/TabItem';\nimport definition from '@site/static/data/resourceDefinitions/evidencevariable.json';\nimport { ResourcePropertiesTable, SearchParamsTable } from '@site/src/components/ResourceTables';\n```\n\n----------------------------------------\n\nTITLE: Rendering Tabs for Device resource documentation\nDESCRIPTION: This snippet uses the Tabs and TabItem components from Docusaurus to create a tabbed interface for the Device resource documentation. The tabs include schema, usage, relationships, and resources that reference the Device resource.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/api/fhir/resources/device.mdx#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n<Tabs queryString=\"section\">\n  <TabItem value=\"schema\" label=\"Schema\" default>\n\n## Elements\n\n<ResourcePropertiesTable\n  properties={definition.properties.filter((p) => !(p.inherited && p.base.includes('Resource')))}\n/>\n\n## Search Parameters\n\n<SearchParamsTable searchParams={definition.searchParameters} />\n\n## Inherited Elements\n\n<ResourcePropertiesTable properties={definition.properties.filter((p) => p.inherited && p.base.includes('Resource'))} />\n\n  </TabItem>\n  <TabItem value=\"usage\" label=\"Usage\">\n<div> <a name=\"scope\"></a> <p> This resource is an administrative resource that tracks individual instances of a device and their location. It is referenced by other resources for recording which device performed an action such as a procedure or an observation, referenced when prescribing and dispensing devices for patient use or for ordering supplies, and used to record and transmit <a href=\"https://www.hl7.org/fhir/#udi\">Unique <Link to=\"/docs/api/fhir/resources/device\">Device</Link> <Link to=\"/docs/api/fhir/datatypes/identifier\">Identifier</Link> (UDI)</a> information about a device such as a patient's implant. </p> </div>\n  </TabItem>\n  <TabItem value=\"relationships\" label=\"Relationships\">\n<div> <a name=\"bnr\"></a> <p> These are the device related resources </p> <ul>  <li>Device (this resource)</li>  <li><a href=\"/docs/api/fhir/resources/devicedefinition\">DeviceDefinition</a> - Describes a \"kind\" of device - not a physical instance, cut a \"catalog entry\" where a device is defined by the manufacturer, reseller, or regulator.</li>  <li><a href=\"/docs/api/fhir/resources/devicemetric\">DeviceMetric</a> - Describes a measurement, calculation or setting  capability of a medical device.</li> </ul> <p> In FHIR, the \"Device\" is the \"administrative\" resource for the device (it does not change much and has manufacturer information etc.), whereas the DeviceComponent and <Link to=\"/docs/api/fhir/resources/devicemetric\">DeviceMetric</Link> (which is really a kind of DeviceComponent) model the physical part, including operation status and is much more volatile. The physical composition of a <Link to=\"/docs/api/fhir/resources/device\">Device</Link> is represented by the <Link to=\"/docs/api/fhir/resources/device\">Devices</Link> pointing to their \"parent\". </p> <p> <Link to=\"/docs/api/fhir/resources/device\">Devices</Link> differ from medications because they are not \"used up\" - they remain active in a patient in an ongoing fashion.  However, the specific boundary between medications and devices is defined at the implementation level and this standard does not enforce a boundary with the exception of devices that are implanted in a patient.   The <a href=\"/docs/api/fhir/resources/medication\">Medication</a> resource should not be used to represent implanted devices. </p> </div>\n  </TabItem>\n\n  <TabItem value=\"referencedBy\" label=\"Referenced By\">\n<ul><li><a href=\"https://www.hl7.org/fhir/datatypes.html#Signature\">Signature</a></li>\n<li><a href=\"/docs/api/fhir/resources/account\">Account</a></li>\n<li><a href=\"/docs/api/fhir/resources/adverseevent\">AdverseEvent</a></li>\n<li><a href=\"/docs/api/fhir/resources/appointment\">Appointment</a></li>\n<li><a href=\"/docs/api/fhir/resources/appointmentresponse\">AppointmentResponse</a></li>\n<li><a href=\"/docs/api/fhir/resources/auditevent\">AuditEvent</a></li>\n<li><a href=\"/docs/api/fhir/resources/careplan\">CarePlan</a></li>\n<li><a href=\"/docs/api/fhir/resources/catalogentry\">CatalogEntry</a></li>\n<li><a href=\"/docs/api/fhir/resources/chargeitem\">ChargeItem</a></li>\n<li><a href=\"/docs/api/fhir/resources/chargeitemdefinition\">ChargeItemDefinition</a></li>\n<li><a href=\"/docs/api/fhir/resources/claim\">Claim</a></li>\n<li><a href=\"/docs/api/fhir/resources/communication\">Communication</a></li>\n<li><a href=\"/docs/api/fhir/resources/communicationrequest\">CommunicationRequest</a></li>\n<li><a href=\"/docs/api/fhir/resources/composition\">Composition</a></li>\n<li><a href=\"/docs/api/fhir/resources/consent\">Consent</a></li>\n<li><a href=\"/docs/api/fhir/resources/contract\">Contract</a></li>\n<li><a href=\"/docs/api/fhir/resources/detectedissue\">DetectedIssue</a></li>\n<li><a href=\"/docs/api/fhir/resources/devicemetric\">DeviceMetric</a></li>\n<li><a href=\"/docs/api/fhir/resources/devicerequest\">DeviceRequest</a></li>\n<li><a href=\"/docs/api/fhir/resources/deviceusestatement\">DeviceUseStatement</a></li>\n<li><a href=\"/docs/api/fhir/resources/diagnosticreport\">DiagnosticReport</a></li>\n<li><a href=\"/docs/api/fhir/resources/documentmanifest\">DocumentManifest</a></li>\n<li><a href=\"/docs/api/fhir/resources/documentreference\">DocumentReference</a></li>\n<li><a href=\"/docs/api/fhir/resources/explanationofbenefit\">ExplanationOfBenefit</a></li>\n<li><a href=\"/docs/api/fhir/resources/flag\">Flag</a></li>\n<li><a href=\"/docs/api/fhir/resources/group\">Group</a></li>\n<li><a href=\"/docs/api/fhir/resources/guidanceresponse\">GuidanceResponse</a></li>\n<li><a href=\"/docs/api/fhir/resources/imagingstudy\">ImagingStudy</a></li>\n<li><a href=\"/docs/api/fhir/resources/invoice\">Invoice</a></li>\n<li><a href=\"/docs/api/fhir/resources/list\">List</a></li>\n<li><a href=\"/docs/api/fhir/resources/measurereport\">MeasureReport</a></li>\n<li><a href=\"/docs/api/fhir/resources/media\">Media</a></li>\n<li><a href=\"/docs/api/fhir/resources/medicationadministration\">MedicationAdministration</a></li>\n<li><a href=\"/docs/api/fhir/resources/medicationdispense\">MedicationDispense</a></li>\n<li><a href=\"/docs/api/fhir/resources/medicationrequest\">MedicationRequest</a></li>\n<li><a href=\"/docs/api/fhir/resources/messageheader\">MessageHeader</a></li>\n<li><a href=\"/docs/api/fhir/resources/molecularsequence\">MolecularSequence</a></li>\n<li><a href=\"/docs/api/fhir/resources/observation\">Observation</a></li>\n<li><a href=\"/docs/api/fhir/resources/procedure\">Procedure</a></li>\n<li><a href=\"/docs/api/fhir/resources/provenance\">Provenance</a></li>\n<li><a href=\"/docs/api/fhir/resources/questionnaireresponse\">QuestionnaireResponse</a></li>\n<li><a href=\"/docs/api/fhir/resources/requestgroup\">RequestGroup</a></li>\n<li><a href=\"/docs/api/fhir/resources/riskassessment\">RiskAssessment</a></li>\n<li><a href=\"/docs/api/fhir/resources/schedule\">Schedule</a></li>\n<li><a href=\"/docs/api/fhir/resources/servicerequest\">ServiceRequest</a></li>\n<li><a href=\"/docs/api/fhir/resources/specimen\">Specimen</a></li>\n<li><a href=\"/docs/api/fhir/resources/supplydelivery\">SupplyDelivery</a></li>\n<li><a href=\"/docs/api/fhir/resources/supplyrequest\">SupplyRequest</a></li>\n<li><a href=\"/docs/api/fhir/resources/task\">Task</a></li></ul>\n  </TabItem>\n</Tabs>\n```\n\n----------------------------------------\n\nTITLE: Stripe Webhook Endpoint URL\nDESCRIPTION: The URL to configure as the endpoint in Stripe's webhook settings.  The `<client-application-id>`, `<client-secret>`, and `<bot-id>` need to be replaced with the actual values from your Medplum setup. This URL directs Stripe to send webhook events to the specified Medplum Bot for processing.\nSOURCE: https://github.com/medplum/medplum/blob/main/examples/medplum-demo-bots/src/stripe-bots/README.md#_snippet_1\n\nLANGUAGE: url\nCODE:\n```\nhttps://<client-application-id>:<client-secret>@api.medplum.com/fhir/R4/Bot/<bot-id>/$execute\n```\n\n----------------------------------------\n\nTITLE: Cloning and Running Inferno\nDESCRIPTION: This snippet demonstrates the commands used to clone the Inferno repository, navigate into it, and start the application using Docker Compose. Inferno is used to test SMART-on-FHIR compliance.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/server/src/oauth/README.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ngit clone git@github.com:onc-healthit/inferno.git\ncd inferno\ndocker-compose up\n```\n\n----------------------------------------\n\nTITLE: PlanDefinition for Lab Example\nDESCRIPTION: Shows an example of how to model a lab panel using FHIR PlanDefinition. It emphasizes including LOINC, SNOMED, and CDISC codes where appropriate. This example is part of a COVID-19 data model.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/src/pages/solutions/life-sciences.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nhttps://github.com/medplum/medplum/blob/main/packages/react/src/stories/covid19.ts#L742\n```\n\n----------------------------------------\n\nTITLE: Setting page offset with _offset parameter in TypeScript\nDESCRIPTION: Demonstrates how to use the `_offset` query parameter in a search query to set the starting point of search results.  The example shows how to retrieve up to 50 patient resources starting from the 31st item in the result set.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/search/paginated-search.mdx#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n{ExampleCode}\n```\n\n----------------------------------------\n\nTITLE: Creating Expo App Shell\nDESCRIPTION: This shell command creates a new Expo React Native project named 'medplum-react-native-example', and then navigates into the project directory.\nSOURCE: https://github.com/medplum/medplum/blob/main/examples/medplum-react-native-example/README.md#_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-expo-app medplum-react-native-example\ncd medplum-react-native-example\n```\n\n----------------------------------------\n\nTITLE: Incorrect Patient Definition (TypeScript)\nDESCRIPTION: This code snippet demonstrates an incorrect usage of the `Patient` resource where the `name` property is assigned a string instead of an array of `HumanName` objects. This will cause a type error when using the `@medplum/fhirtypes` library.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/fhirtypes/README.md#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst myPatient = {\n  resourceType: 'Patient',\n  name: 'George Washington',\n};\n```\n\n----------------------------------------\n\nTITLE: Start Medplum Server (Development)\nDESCRIPTION: Starts the Medplum server in development mode. This allows for rapid development and testing of the server.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/self-hosting/install-from-scratch.md#_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\ncd packages/server\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Installing Medplum Core and React using npm\nDESCRIPTION: Installs the Medplum Core and Medplum React libraries as development dependencies using npm. This provides the necessary Medplum functionalities and React components for building applications.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/react/index.mdx#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpm i -D @medplum/core @medplum/react\n```\n\n----------------------------------------\n\nTITLE: Cloning and Building OpenID Conformance Suite\nDESCRIPTION: This snippet shows the commands required to clone, build, and run the OpenID Conformance Suite using Git, Maven, and Docker Compose. This environment is essential for testing OpenID Connect compliance.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/server/src/oauth/README.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ngit clone git@gitlab.com:openid/conformance-suite.git\ncd conformance-suite\nmvn clean package\ndocker-compose up\n```\n\n----------------------------------------\n\nTITLE: Install Medplum CLI (Bash)\nDESCRIPTION: This bash command installs the Medplum CLI globally using npm. The Medplum CLI is a command-line tool used for interacting with the Medplum platform, including sending HL7 test messages.  It requires Node.js and npm to be installed.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/agent/index.md#_snippet_5\n\nLANGUAGE: Bash\nCODE:\n```\nnpm install --global @medplum/cli\n```\n\n----------------------------------------\n\nTITLE: Token Exchange with Refresh Token - Response\nDESCRIPTION: Sample response for a successful token exchange with a refresh token. The response contains `id_token`, `access_token`, `token_type`, and `expires_in` in JSON format. The `Content-Type` header is set to `application/json`.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/api/oauth/token.md#_snippet_8\n\nLANGUAGE: JSON\nCODE:\n```\nHTTP/1.1 200 OK\nContent-Type: application/json\n\n{\n    \"id_token\":\"eyJz9sdfsdfsdfsd\",\n    \"access_token\":\"dmcxd329ujdmkemkd349r\",\n    \"token_type\":\"Bearer\",\n    \"expires_in\":3600\n}\n```\n\n----------------------------------------\n\nTITLE: Seeding the Test Database with npm\nDESCRIPTION: This command seeds the Medplum test database with foundational resources like `StructureDefinition`s and `ValueSet`s. It is crucial for setting up the testing environment before running tests for the first time, ensuring that tests have a consistent and predictable data set.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/server/README.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpm run test:seed\n```\n\n----------------------------------------\n\nTITLE: Order Splitting Parameters\nDESCRIPTION: This TypeScript code defines the structure of the parameters required to split an order. It uses a FHIR Parameters resource. The 'order' parameter is a reference to the ServiceRequest to split, and 'groups' is a string containing the splitting configuration.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/integration/health-gorilla/sending-orders.md#_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nconst params = {\n  resourceType: 'Parameters',\n  parameter: [\n    { name: 'order', valueReference: { reference: 'ServiceRequest/example' } },\n    { name: 'groups', valueString: '436|1877;9230;900323' },\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Running the Application (NPM)\nDESCRIPTION: This command starts the Medplum Chat Demo application using the development server configured in the `package.json` file. It typically launches the application in a web browser, allowing users to interact with the demo.\nSOURCE: https://github.com/medplum/medplum/blob/main/examples/medplum-chat-demo/README.md#_snippet_3\n\nLANGUAGE: npm\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Copying Example Bot File (Bash)\nDESCRIPTION: This snippet demonstrates how to copy the example `hello-patient.ts` bot file to `my-first-bot.ts` within the `src/` directory. This allows users to quickly get started with bot development by modifying an existing example.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/bots/bots-in-production.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ncd src\ncp examples/hello-patient.ts my-first-bot.ts\n```\n\n----------------------------------------\n\nTITLE: Displaying Search Parameters\nDESCRIPTION: Uses the `SearchParamsTable` component to display the search parameters available for the Patient resource. The `searchParams` prop is passed the search parameters defined in the resource definition.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/api/fhir/resources/patient.mdx#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n<SearchParamsTable searchParams={definition.searchParameters} />\n```\n\n----------------------------------------\n\nTITLE: Importing Modules in JavaScript\nDESCRIPTION: Imports necessary modules and components from various libraries. Link from docusaurus, Tabs and TabItem from theme, resource definition from a local json file, and ResourcePropertiesTable and SearchParamsTable from a local component.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/api/fhir/resources/devicedefinition.mdx#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport Link from '@docusaurus/Link';\nimport Tabs from '@theme/Tabs';\nimport TabItem from '@theme/TabItem';\nimport definition from '@site/static/data/resourceDefinitions/devicedefinition.json';\nimport { ResourcePropertiesTable, SearchParamsTable } from '@site/src/components/ResourceTables';\n```\n\n----------------------------------------\n\nTITLE: Logical AND Filtering Example in Medplum (Typescript)\nDESCRIPTION: Demonstrates how to combine multiple filters using the logical 'and' operator in a Medplum Typescript application. This snippet shows how to construct a compound filter expression programmatically. It requires the Medplum client library.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/search/filter-search-parameter.mdx#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n{ExampleCode}\n```\n\n----------------------------------------\n\nTITLE: Authorization Header Example\nDESCRIPTION: Example showing how to construct the `Authorization` header using Basic HTTP authentication with a client ID and client secret.  The client ID and secret are concatenated with a colon, and then Base64 encoded.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/api/oauth/token.md#_snippet_0\n\nLANGUAGE: HTTP\nCODE:\n```\nAuthorization: Basic ZGpjOTh1M2ppZWRtaTI4M2V1OTI4OmFiY2RlZjAxMjM0NTY3ODkw\n```\n\n----------------------------------------\n\nTITLE: SQL Update for Medplum Data Migration\nDESCRIPTION: This SQL query directly updates the \"DatabaseMigration\" table to set the \"dataVersion\" to 1, allowing to skip the data migration process if the Medplum deployment started on version 2.2.0 or later. It requires direct access to the Postgres database.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/blog/2025-02-28-v4-upgrade.md#_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\n-- Run this SQL query on your Postgres database\nUPDATE \"DatabaseMigration\" SET \"dataVersion\"=1;\n```\n\n----------------------------------------\n\nTITLE: Importing React Components\nDESCRIPTION: Imports React components used for rendering the documentation page, including Link, Tabs, TabItem, ResourcePropertiesTable, and SearchParamsTable. These components facilitate the display of structured data and navigation.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/api/fhir/resources/questionnaire.mdx#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport Link from '@docusaurus/Link';\nimport Tabs from '@theme/Tabs';\nimport TabItem from '@theme/TabItem';\nimport definition from '@site/static/data/resourceDefinitions/questionnaire.json';\nimport { ResourcePropertiesTable, SearchParamsTable } from '@site/src/components/ResourceTables';\n```\n\n----------------------------------------\n\nTITLE: PostCSS Configuration File\nDESCRIPTION: Configures PostCSS with the Mantine preset and custom variables.  The `postcss.config.mjs` file defines the PostCSS plugins, including the Mantine preset and `postcss-simple-vars`, to enable the use of Mantine's styling and custom variables.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/react/index.mdx#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport mantinePreset from 'postcss-preset-mantine';\nimport simpleVars from 'postcss-simple-vars';\n\nconst config = {\n  plugins: [\n    mantinePreset(),\n    simpleVars({\n      variables: {\n        'mantine-breakpoint-xs': '36em',\n        'mantine-breakpoint-sm': '48em',\n        'mantine-breakpoint-md': '62em',\n        'mantine-breakpoint-lg': '75em',\n        'mantine-breakpoint-xl': '88em',\n      },\n    }),\n  ],\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Generate NextAuth Secret\nDESCRIPTION: This command generates a cryptographically secure random string using OpenSSL. This secret is required by NextAuth for secure session management and is stored in the .env file.\nSOURCE: https://github.com/medplum/medplum/blob/main/examples/medplum-nextauth-demo/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nopenssl rand -base64 32\n```\n\n----------------------------------------\n\nTITLE: Run tests with NPM\nDESCRIPTION: This command runs the tests for the Medplum bot project using the npm test script.  The test suite and testing framework are configured in the package.json file.\nSOURCE: https://github.com/medplum/medplum/blob/main/examples/medplum-demo-bots/README.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm t\n```\n\n----------------------------------------\n\nTITLE: Running the Web Application\nDESCRIPTION: This shell command starts the React Native application in web mode, allowing it to be run in a web browser.\nSOURCE: https://github.com/medplum/medplum/blob/main/examples/medplum-react-native-example/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm run web\n```\n\n----------------------------------------\n\nTITLE: Copying environment variables configuration\nDESCRIPTION: This command copies the default environment variables file to a new file named `.env`. This allows users to customize the environment variables without modifying the original defaults.\nSOURCE: https://github.com/medplum/medplum/blob/main/examples/medplum-patient-intake-demo/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncp .env.defaults .env\n```\n\n----------------------------------------\n\nTITLE: Start Medplum App (Development)\nDESCRIPTION: Starts the Medplum app in development mode using the Vite development server.  This provides hot-reloading and other development features for the frontend.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/self-hosting/install-from-scratch.md#_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\ncd packages/app\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Medplum Client Credentials in .env File\nDESCRIPTION: This snippet presents the content of a .env file, demonstrating how to store the `MEDPLUM_CLIENT_ID` and `MEDPLUM_CLIENT_SECRET`. It is important to note that the `.env` file should not be committed to source control due to security considerations.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/bots/bots-in-production.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n# .env\nMEDPLUM_CLIENT_ID=<YOUR_CLIENT_ID>\nMEDPLUM_CLIENT_SECRET=<YOUR_CLIENT_SECRET>\n```\n\n----------------------------------------\n\nTITLE: Build the bots (npm)\nDESCRIPTION: Builds the Medplum Bots used in the application using npm. This command compiles the bot code, preparing it for deployment and execution within the Medplum environment. Bots are used to simulate insurance eligibility checks.\nSOURCE: https://github.com/medplum/medplum/blob/main/examples/medplum-eligibility-demo/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm run build:bot\n```\n\n----------------------------------------\n\nTITLE: Importing React components for Claim documentation\nDESCRIPTION: Imports necessary React components from Docusaurus and local files for rendering the Claim resource documentation. Includes components for tabs, resource property tables, and search parameter tables.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/api/fhir/resources/claim.mdx#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport Link from '@docusaurus/Link';\nimport Tabs from '@theme/Tabs';\nimport TabItem from '@theme/TabItem';\nimport definition from '@site/static/data/resourceDefinitions/claim.json';\nimport { ResourcePropertiesTable, SearchParamsTable } from '@site/src/components/ResourceTables';\n```\n\n----------------------------------------\n\nTITLE: Searching specific Elements using _elements - CLI\nDESCRIPTION: Demonstrates how to retrieve only specific elements (subject and performers) of Observation resources using the `_elements` parameter in the command-line interface (CLI). Requires the Medplum CLI to be installed and configured.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/search/advanced-search-parameters.mdx#_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\n{ExampleCode}\n```\n\n----------------------------------------\n\nTITLE: Install Medplum CLI Globally (npm)\nDESCRIPTION: Installs the Medplum CLI globally using npm. This allows you to use the `medplum` command from any directory in your terminal. Requires Node.js and npm to be installed.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/cli/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --global @medplum/cli\n```\n\n----------------------------------------\n\nTITLE: Example Bot Deployment Output\nDESCRIPTION: This is example output from the bot deployment process, showing the bot code being updated and the bot successfully deployed.\nSOURCE: https://github.com/medplum/medplum/blob/main/examples/medplum-demo-bots/src/deduplication/README.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nUpdate bot code.....\nSuccess! New bot version: <botID>\nDeploying bot...\nDeploy result: All OK\n```\n\n----------------------------------------\n\nTITLE: Medplum API Command to Set Data Version\nDESCRIPTION: This bash script uses the Medplum API to set the data version to 1, which allows to skip the data migration if the Medplum deployment started on version 2.2.0 or later. It uses `curl` to send a POST request to the `/admin/super/setdataversion` endpoint, requiring a valid authentication token.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/blog/2025-02-28-v4-upgrade.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Get an auth token\nexport AUTH_TOKEN=$(npx medplum token)\n\n# Use curl to set the data version\ncurl -X POST \\\n  -H \"Authorization: Bearer $AUTH_TOKEN\" \\\n  -H \"Content-Type: application/json\" \\\n  https://api.medplum.com/admin/super/setdataversion \\\n  -d '{ \"dataVersion\": 1 }'\n```\n\n----------------------------------------\n\nTITLE: Configuration Error Response - Generic IdP\nDESCRIPTION: Sample HTTP response (302 Found) from the `/oauth2/authorize` endpoint when an error response is received from a third-party Identity Provider (IdP) due to configuration errors or other issues. The response includes the `Location` header with the `redirect_uri`, `error=invalid_request`, and a description including the IdP name and status code.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/api/oauth/authorize.md#_snippet_14\n\nLANGUAGE: HTTP\nCODE:\n```\nHTTP 1.1 302\nFound Location: https://client_redirect_uri?error=invalid_request&\n                    error_description=[IdP name]+Error+-+[status code]+error getting token\n```\n\n----------------------------------------\n\nTITLE: Timeout Error Response - IdP Token Endpoint\nDESCRIPTION: Sample HTTP response (302 Found) from the `/oauth2/authorize` endpoint when a connection timeout occurs while requesting a token from a third-party Identity Provider (IdP). The response includes the `Location` header with the `redirect_uri`, `error=invalid_request`, and a description of the timeout error.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/api/oauth/authorize.md#_snippet_12\n\nLANGUAGE: HTTP\nCODE:\n```\nHTTP 1.1 302\nFound Location: https://client_redirect_uri?error=invalid_request&\n                  error_description=Timeout+occurred+in+calling+IdP+token+endpoint\n```\n\n----------------------------------------\n\nTITLE: Mantine Dependency Upgrade (diff)\nDESCRIPTION: Updates Mantine dependencies in `package.json` to version 7.x.  This ensures the application uses the latest version of Mantine with the new CSS-in-JS free styling approach. Requires editing the `package.json` file and running `npm install` or `yarn install`.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/react/mantine-6x-to-7x.mdx#_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n-\"@mantine/core\": \"6.0.21\",\n+ \"@mantine/core\": \"7.3.2\",\n```\n\n----------------------------------------\n\nTITLE: Search Project Members\nDESCRIPTION: Searches for all ProjectMembership resources. This allows you to retrieve a list of all members associated with a project. No dependencies are required. The output is a list of ProjectMembership resources in FHIR format.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/auth/user-management-guide/user-management-guide.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n{ExampleCode}\n```\n\n----------------------------------------\n\nTITLE: Execute Bot by ID (GET) - cURL\nDESCRIPTION: This snippet demonstrates how to execute a Medplum Bot by its ID using cURL with a GET request. It includes query parameters and the `Authorization` header.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/api/fhir/operations/bot-execute.mdx#_snippet_5\n\nLANGUAGE: cURL\nCODE:\n```\ncurl 'https://api.medplum.com/fhir/R4/Bot/[id]/$execute?foo=bar' \\\n  -H \"Authorization: Bearer $MY_ACCESS_TOKEN\"\n```\n\n----------------------------------------\n\nTITLE: Importing Docusaurus components\nDESCRIPTION: Imports necessary components from the Docusaurus framework, including Link, Tabs, and TabItem. These components are used for creating interactive elements and structuring the page content.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/api/fhir/medplum/accesspolicy.mdx#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport Link from '@docusaurus/Link';\nimport Tabs from '@theme/Tabs';\nimport TabItem from '@theme/TabItem';\n```\n\n----------------------------------------\n\nTITLE: FHIR Token Lookup with Modifier\nDESCRIPTION: This snippet demonstrates a FHIR search query with a token parameter and a modifier. It searches for DiagnosticReport resources where the 'code' token does not match the specified LOINC code.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/contributing/search-architecture.md#_snippet_7\n\nLANGUAGE: FHIR\nCODE:\n```\nDiagnosticReport?code:not=http://loinc.org|69737-5\n```\n\n----------------------------------------\n\nTITLE: Enable Nginx Sites\nDESCRIPTION: Creates symbolic links to enable the Nginx site configurations for the app and API. This tells Nginx to use these configurations for the specified domains.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/self-hosting/install-from-scratch.md#_snippet_25\n\nLANGUAGE: bash\nCODE:\n```\nsudo ln -s /etc/nginx/sites-available/app.example.com /etc/nginx/sites-enabled/\nsudo ln -s /etc/nginx/sites-available/api.example.com /etc/nginx/sites-enabled/\n```\n\n----------------------------------------\n\nTITLE: Incorrect FHIR Batch Upsert with UUID References (JavaScript)\nDESCRIPTION: This code demonstrates an incorrect approach to performing FHIR batch upserts using UUID references in the URL.  The `urn:uuid:` syntax for internal references is not allowed in the `Bundle.entry.request.url` for a conditional update within a batch. The `CareTeam` resource incorrectly references the `Patient` resource using its UUID in the URL.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/fhir-datastore/fhir-batch-requests.mdx#_snippet_8\n\nLANGUAGE: js\nCODE:\n```\n{\n  \"resourceType\": \"Bundle\",\n  \"type\": \"batch\",\n  \"entry\": [\n    {\n      \"fullUrl\": \"urn:uuid:4410cb87-4a38-4d3f-bee8-3c3556e6debc\",\n      \"request\": {\n        \"method\": \"PUT\",\n        \"url\": \"Patient?identifier=http://example.com/mrn|1234567\"\n      },\n      \"resource\": {\n        \"resourceType\": \"Patient\",\n        \"identifier\": [{ \"system\": \"http://example.com/mrn\", \"value\": \"1234567\" }]\n      }\n    },\n    {\n      \"fullUrl\": \"urn:uuid:b122a53c-9c0d-4654-9260-c0b67b7bc5d4\",\n      \"request\": {\n        \"method\": \"PUT\",\n        // Incorrect: Upsert URL cannot use replaced urn:uuid: syntax\n        \"url\": \"CareTeam?subject=urn:uuid:4410cb87-4a38-4d3f-bee8-3c3556e6debc\"\n      },\n      \"resource\": {\n        \"resourceType\": \"CareTeam\",\n        \"subject\": { \"reference\": \"urn:uuid:4410cb87-4a38-4d3f-bee8-3c3556e6debc\" }\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Tabs Component with Items\nDESCRIPTION: This code snippet renders the Tabs component with four TabItem components. Each TabItem represents a different section of the Location resource documentation: schema, usage, relationships, and resources that reference the Location resource.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/api/fhir/resources/location.mdx#_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n<Tabs queryString=\"section\">\n  <TabItem value=\"schema\" label=\"Schema\" default>\n\n## Elements\n\n<ResourcePropertiesTable\n  properties={definition.properties.filter((p) => !(p.inherited && p.base.includes('Resource')))}\n/>\n\n## Search Parameters\n\n<SearchParamsTable searchParams={definition.searchParameters} />\n\n## Inherited Elements\n\n<ResourcePropertiesTable properties={definition.properties.filter((p) => p.inherited && p.base.includes('Resource'))} />\n\n  </TabItem>\n  <TabItem value=\"usage\" label=\"Usage\">\n<div> <a name=\"scope\"></a> <p> A <Link to=\"/docs/api/fhir/resources/location\">Location</Link> includes both incidental locations (a place which is used for healthcare without prior designation or authorization) and  dedicated, formally appointed locations. <Link to=\"/docs/api/fhir/resources/location\">Locations</Link> may be private, public, mobile or fixed and scale from small  freezers to full hospital buildings or parking garages. </p> <p>Examples of <Link to=\"/docs/api/fhir/resources/location\">Locations</Link> are:</p> <ul> <li>Building, ward, corridor, room or bed</li> <li>Mobile Clinic</li> <li>Freezer, incubator</li> <li>Vehicle or lift</li> <li>Home, shed, or a garage</li> <li>Road, parking place, a park</li> <li>Ambulance (generic)</li> <li>Ambulance (specific)</li> <li>Patient's Home (generic)</li> <li>Jurisdiction</li> </ul>   <p>     These locations are not intended to cover locations on a patient where something occurred     (i.e. a patient's broken leg), but can happily cover the location where the patient broke the leg (the playground)   </p> </div>\n  </TabItem>\n  <TabItem value=\"relationships\" label=\"Relationships\">\n<div> <a name=\"bnr\"></a>   <p>     <Link to=\"/docs/api/fhir/resources/location\">Locations</Link> and <Link to=\"/docs/api/fhir/resources/organization\">Organizations</Link> are very closely related resources and can often be mixed/matched/confused.<br/> The <Link to=\"/docs/api/fhir/resources/location\">Location</Link> is intended to describe the more physical structures managed/operated by an organization, whereas the <Link to=\"/docs/api/fhir/resources/organization\">Organization</Link> is intended to represent the more conceptual hierarchies, such as a ward. </p> <p> A <Link to=\"/docs/api/fhir/resources/location\">Location</Link> is valid without an address in cases where it could be purely described by a geo-coded location in remote areas, or when recorded by a device. <Link to=\"/docs/api/fhir/resources/location\">Locations</Link> with a mode = \"kind\" would also likely not have an address, as they are just a type of location, but could also have an address where  they can be found at the address.<br/> </p> <p> Another use of location could be for describing a Jurisdiction. This jurisdiction may be considered a classified boundary which could be a combination of a physical boundary, and some other discriminator(s): </p> <ul> <li>Nation - Country-wide community or Federal Government (Ministry of Health)</li> <li>Province or State (community or Government)</li> <li>Business (throughout an enterprise)</li> <li>Business scope (CDC/FDA)</li> <li>Business segment (UK Pharmacy)</li> </ul> </div>\n  </TabItem>\n\n  <TabItem value=\"referencedBy\" label=\"Referenced By\">\n<ul><li><a href=\"https://www.hl7.org/fhir/metadatatypes.html#UsageContext\">UsageContext</a></li>\n<li><a href=\"/docs/api/fhir/resources/account\">Account</a></li>\n<li><a href=\"/docs/api/fhir/resources/activitydefinition\">ActivityDefinition</a></li>\n<li><a href=\"/docs/api/fhir/resources/adverseevent\">AdverseEvent</a></li>\n<li><a href=\"/docs/api/fhir/resources/appointment\">Appointment</a></li>\n<li><a href=\"/docs/api/fhir/resources/appointmentresponse\">AppointmentResponse</a></li>\n<li><a href=\"/docs/api/fhir/resources/auditevent\">AuditEvent</a></li>\n<li><a href=\"/docs/api/fhir/resources/careplan\">CarePlan</a></li>\n<li><a href=\"/docs/api/fhir/resources/claim\">Claim</a></li>\n<li><a href=\"/docs/api/fhir/resources/claimresponse\">ClaimResponse</a></li>\n<li><a href=\"/docs/api/fhir/resources/contract\">Contract</a></li>\n<li><a href=\"/docs/api/fhir/resources/coverageeligibilityrequest\">CoverageEligibilityRequest</a></li>\n<li><a href=\"/docs/api/fhir/resources/device\">Device</a></li>\n<li><a href=\"/docs/api/fhir/resources/devicerequest\">DeviceRequest</a></li>\n<li><a href=\"/docs/api/fhir/resources/diagnosticreport\">DiagnosticReport</a></li>\n<li><a href=\"/docs/api/fhir/resources/encounter\">Encounter</a></li>\n<li><a href=\"/docs/api/fhir/resources/explanationofbenefit\">ExplanationOfBenefit</a></li>\n<li><a href=\"/docs/api/fhir/resources/flag\">Flag</a></li>\n<li><a href=\"/docs/api/fhir/resources/healthcareservice\">HealthcareService</a></li>\n<li><a href=\"/docs/api/fhir/resources/imagingstudy\">ImagingStudy</a></li>\n<li><a href=\"/docs/api/fhir/resources/immunization\">Immunization</a></li>\n<li><a href=\"/docs/api/fhir/resources/insuranceplan\">InsurancePlan</a></li>\n<li><a href=\"/docs/api/fhir/resources/list\">List</a></li>\n<li><a href=\"/docs/api/fhir/resources/measurereport\">MeasureReport</a></li>\n<li><a href=\"/docs/api/fhir/resources/media\">Media</a></li>\n<li><a href=\"/docs/api/fhir/resources/medicationdispense\">MedicationDispense</a></li>\n<li><a href=\"/docs/api/fhir/resources/observation\">Observation</a></li>\n<li><a href=\"/docs/api/fhir/resources/organizationaffiliation\">OrganizationAffiliation</a></li>\n<li><a href=\"/docs/api/fhir/resources/practitionerrole\">PractitionerRole</a></li>\n<li><a href=\"/docs/api/fhir/resources/procedure\">Procedure</a></li>\n<li><a href=\"/docs/api/fhir/resources/provenance\">Provenance</a></li>\n<li><a href=\"/docs/api/fhir/resources/researchstudy\">ResearchStudy</a></li>\n<li><a href=\"/docs/api/fhir/resources/schedule\">Schedule</a></li>\n<li><a href=\"/docs/api/fhir/resources/servicerequest\">ServiceRequest</a></li>\n<li><a href=\"/docs/api/fhir/resources/specimen\">Specimen</a></li>\n<li><a href=\"/docs/api/fhir/resources/supplydelivery\">SupplyDelivery</a></li>\n<li><a href=\"/docs/api/fhir/resources/supplyrequest\">SupplyRequest</a></li>\n<li><a href=\"/docs/api/fhir/resources/task\">Task</a></li></ul>\n  </TabItem>\n</Tabs>\n```\n\n----------------------------------------\n\nTITLE: RDS Parameter Group Configuration (JSON)\nDESCRIPTION: This JSON block configures parameters in the RDS Aurora cluster parameter group to enable logical replication. The parameters are related to replication slots, WAL senders, replication workers, and worker processes. These settings ensure that the database can handle the replication load necessary for a zero-downtime upgrade.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/blog/2024-11-14-zero-downtime-postgres-major-version-upgrade.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"rds.logical_replication\": \"1\",\n  \"max_replication_slots\": \"25\",\n  \"max_wal_senders\": \"25\",\n  \"max_logical_replication_workers\": \"25\",\n  \"max_worker_processes\": \"50\"\n}\n```\n\n----------------------------------------\n\nTITLE: Generating RSA Key Pair using OpenSSL\nDESCRIPTION: This command uses OpenSSL to generate an RSA key pair with a length of 2048 bits. The private key is saved to the file named private_key.pem and is password protected. The \"pass:foobar\" sets the password for the private key.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/server/src/cloud/aws/signer.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nopenssl genrsa -out private_key.pem -passout pass:foobar 2048\n```\n\n----------------------------------------\n\nTITLE: Searching by Tag using _tag - cURL\nDESCRIPTION: Demonstrates how to search for Observation resources based on a specific tag (critical) in the `meta.tag` field using the `_tag` parameter using a cURL command. Requires cURL to be installed and configured.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/search/advanced-search-parameters.mdx#_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\n{ExampleCode}\n```\n\n----------------------------------------\n\nTITLE: FHIR Patient Identifier Query with System String\nDESCRIPTION: This curl command demonstrates how to query for a patient using a medical record number and the system string. It shows how to target a specific identifier from a particular system.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/blog/2023-08-08-system-strings.mdx#_snippet_3\n\nLANGUAGE: curl\nCODE:\n```\nGET [base]/Patient?identifier=http://hospital-2.org|12345\n```\n\n----------------------------------------\n\nTITLE: Running Synthea JAR\nDESCRIPTION: This command executes the Synthea JAR file, which generates synthetic FHIR data. It requires Java to be installed and the synthea-with-dependencies.jar file to be present in the current directory.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/blog/2021-12-13-synthea.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\njava -jar synthea-with-dependencies.jar\n```\n\n----------------------------------------\n\nTITLE: Add CDK Dependencies using npm\nDESCRIPTION: This command adds the common AWS CDK dependencies including base CDK capabilities and constructs.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/self-hosting/install-on-aws.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm i aws-cdk-lib cdk constructs\n```\n\n----------------------------------------\n\nTITLE: Organization Resource Definition in FHIR JSON\nDESCRIPTION: This is an example Organization resource used to represent a customer in a healthcare partnership. The ID is used for account-tagging resources.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/access/access-policies.md#_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"resourceType\": \"Organization\",\n  \"name\": \"Example Customer Organization\",\n  \"id\": \"abc-123\"\n}\n```\n\n----------------------------------------\n\nTITLE: Replace Emotion with PostCSS (diff)\nDESCRIPTION: Removes Emotion dependencies and adds PostCSS dependencies to `package.json`. This involves removing `@emotion/react` and `@emotion/styled` and adding `postcss` and `postcss-preset-mantine`. The updated dependencies will enable Mantine's new CSS variables styling approach.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/react/mantine-6x-to-7x.mdx#_snippet_1\n\nLANGUAGE: diff\nCODE:\n```\n-\"@emotion/babel-plugin\": \"11.11.0\",\n- \"@emotion/react\": \"^11.11.1\",\n- \"@emotion/server\": \"11.11.0\",\n+ \"postcss\": \"8.4.31\",\n+ \"postcss-preset-mantine\": \"1.11.0\",\n```\n\n----------------------------------------\n\nTITLE: Create Production Build (bash)\nDESCRIPTION: Creates a production build of the Medplum app. This is used for deploying the app to a production environment.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/app/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Building Docusaurus Static Content\nDESCRIPTION: This command generates static content for the Medplum website using Docusaurus and places it into the `build` directory. This directory can then be deployed to a web server. Requires Node.js and npm to be installed.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm run docusaurus build\n```\n\n----------------------------------------\n\nTITLE: Open Redis Configuration File\nDESCRIPTION: Opens the Redis configuration file for editing, where the password can be set.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/self-hosting/install-on-ubuntu.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nsudo vi /etc/redis/redis.conf\n```\n\n----------------------------------------\n\nTITLE: Installing Medplum Core\nDESCRIPTION: This shell command installs the `@medplum/core` package, which provides the core Medplum API client and related utilities.\nSOURCE: https://github.com/medplum/medplum/blob/main/examples/medplum-react-native-example/README.md#_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nnpx expo install @medplum/core\n```\n\n----------------------------------------\n\nTITLE: Access Resource History via CLI\nDESCRIPTION: Demonstrates how to access resource history using the Medplum CLI.  It constructs and executes a command to retrieve the history of a specific resource.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/fhir-datastore/resource-history.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nfunction accessHistoryCli() {\n  echo \"medplum get Patient/{{patientId}}/_history\";\n}\n```\n\n----------------------------------------\n\nTITLE: Run Medplum Smoke Tests with npm\nDESCRIPTION: This command executes the smoke tests to verify the basic functionality of the Medplum application. It assumes that both `@medplum/server` and `@medplum/app` are already running.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/e2e/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm run test:smoke\n```\n\n----------------------------------------\n\nTITLE: Access Postgres shell in Docker\nDESCRIPTION: Opens a psql shell inside the running PostgreSQL Docker container. Requires that the container is running. `medplum-postgres-1` should be replaced with the actual name of your postgres docker container.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/contributing/run-the-stack.md#_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\ndocker exec -it medplum-postgres-1 psql -U medplum\n```\n\n----------------------------------------\n\nTITLE: Medplum AWS Describe Command\nDESCRIPTION: Describes a Medplum deployment by displaying AWS resources (ECS Cluster, ECS Service, S3 buckets) from the AWS CloudFormation stack with the corresponding `medplum:environment` tag. Requires AWS authentication.  Replace `<name>` with the deployment name.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/cli/index.md#_snippet_24\n\nLANGUAGE: bash\nCODE:\n```\nmedplum aws describe <name>\n```\n\n----------------------------------------\n\nTITLE: Displaying FHIR Procedure Search Parameters\nDESCRIPTION: This snippet displays the search parameters available for the FHIR Procedure resource using a custom React component called `SearchParamsTable`. The search parameter data is sourced from a JSON file.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/api/fhir/resources/procedure.mdx#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n<SearchParamsTable searchParams={definition.searchParameters} />\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies - npm\nDESCRIPTION: This command uses the npm (Node Package Manager) to install all the dependencies required for the Medplum Scheduling Demo project. These dependencies are listed in the package.json file.\nSOURCE: https://github.com/medplum/medplum/blob/main/examples/medplum-scheduling-demo/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Install NPM Dependencies\nDESCRIPTION: This command installs all the necessary dependencies for the NextAuth demo application, as specified in the package.json file. This step is required before running the application.\nSOURCE: https://github.com/medplum/medplum/blob/main/examples/medplum-nextauth-demo/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Reading a Patient Resource using MockClient\nDESCRIPTION: Reads a Patient resource using the MockClient's readResource method.  This demonstrates how to retrieve mocked FHIR resources.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/mock/README.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst patient = await client.readResource('Patient', '123');\n```\n\n----------------------------------------\n\nTITLE: ObservationDefinition for Lab Example\nDESCRIPTION: Shows how to create an ObservationDefinition for a lab result, emphasizing the importance of tagging with appropriate LOINC, SNOMED and CDISC codes. Part of a COVID-19 data model.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/src/pages/solutions/life-sciences.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nhttps://github.com/medplum/medplum/blob/main/packages/react/src/stories/covid19.ts#L688\n```\n\n----------------------------------------\n\nTITLE: Installing PostCSS and PostCSS Preset Mantine using npm\nDESCRIPTION: Installs PostCSS and the Mantine PostCSS preset as development dependencies using npm. This configures PostCSS for CSS processing, ensuring compatibility with Mantine's styling conventions.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/react/index.mdx#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm i -D postcss postcss-preset-mantine\n```\n\n----------------------------------------\n\nTITLE: Make Linux Binary Executable (Bash)\nDESCRIPTION: This bash command sets the execute permission for the downloaded Medplum Agent Linux binary.  This step is essential for running the agent on a Linux system.  The command `chmod +x` modifies the file permissions to allow execution.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/agent/index.md#_snippet_3\n\nLANGUAGE: Bash\nCODE:\n```\nchmod +x medplum-agent-linux\n```\n\n----------------------------------------\n\nTITLE: Clone Medplum Repository\nDESCRIPTION: Clones the Medplum repository from GitHub and changes the current directory to the cloned repository. This is the first step in building the Medplum application.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/self-hosting/install-from-scratch.md#_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/medplum/medplum.git\ncd medplum\n```\n\n----------------------------------------\n\nTITLE: EvidenceVariable Schema Elements JSON Data\nDESCRIPTION: JSON data representing the schema elements of the EvidenceVariable resource. This data is used to populate the ResourcePropertiesTable component, displaying the properties of the EvidenceVariable resource, filtered to exclude inherited elements.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/api/fhir/resources/evidencevariable.mdx#_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\ndefinition.properties.filter((p) => !(p.inherited && p.base.includes('Resource')))\n```\n\n----------------------------------------\n\nTITLE: Running the Medplum App in Development Mode\nDESCRIPTION: This command starts the Medplum Hello World application in development mode using npm. The `dev` script typically invokes a development server (e.g., Vite's development server) that provides features like hot reloading and debugging support, making it easier for developers to test and iterate on the application.\nSOURCE: https://github.com/medplum/medplum/blob/main/examples/medplum-hello-world/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Patient Resource with External ID (JSON)\nDESCRIPTION: Defines a Patient resource with an externalId field. The externalId is used to uniquely identify the user when using external identity providers.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/auth/methods/external-ids.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"resourceType\": \"Patient\",\n  \"firstName\": \"Homer\",\n  \"lastName\": \"Simpson\",\n  \"externalId\": \"MY_EXTERNAL_ID\"\n}\n```\n\n----------------------------------------\n\nTITLE: Initialize Terraform Bash\nDESCRIPTION: Initializes the Terraform working directory, downloading necessary provider plugins and modules. This prepares the environment for subsequent Terraform commands.\nSOURCE: https://github.com/medplum/medplum/blob/main/terraform/gcp/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nterraform init\n```\n\n----------------------------------------\n\nTITLE: HL7 ORC Segment Example\nDESCRIPTION: This code snippet shows an example of an ORC (Common Order) segment in an HL7 ORM^O01 message. It provides order control information, such as order status, ordering provider, and order timing. Important fields are order control, placer order number, ordering provider, and date/time of transaction.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/integration/hl7-interfacing/orders-and-results.md#_snippet_3\n\nLANGUAGE: hl7\nCODE:\n```\nORC|NW|12345678||987654^LabSystem|SC||^once^^20230415^^R||202304151200|Smith^John|123 Main St.^Dept^Anytown^State^12345^USA|(123)456-7890||123456^Nurse^Amy|HospitalA^Dept^Room 5\n```\n\n----------------------------------------\n\nTITLE: Install dependencies npm\nDESCRIPTION: Installs the necessary dependencies for the Medplum Live Chat Demo using npm. This command ensures that all required packages and libraries are available for the application to run correctly.\nSOURCE: https://github.com/medplum/medplum/blob/main/examples/medplum-live-chat-demo/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Rendering TestReport Search Parameters Table\nDESCRIPTION: Renders a table displaying the search parameters for the TestReport resource using the SearchParamsTable component.  The 'searchParams' prop is populated from the 'definition.searchParameters' array.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/api/fhir/resources/testreport.mdx#_snippet_2\n\nLANGUAGE: HTML\nCODE:\n```\n<SearchParamsTable searchParams={definition.searchParameters} />\n```\n\n----------------------------------------\n\nTITLE: Displaying Resource Properties (Schema)\nDESCRIPTION: This snippet displays the properties (schema) of the MedicinalProductPackaged resource using the ResourcePropertiesTable component. It filters out inherited properties from the base Resource.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/api/fhir/resources/medicinalproductpackaged.mdx#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n<ResourcePropertiesTable\n  properties={definition.properties.filter((p) => !(p.inherited && p.base.includes('Resource')))}\n/>\n```\n\n----------------------------------------\n\nTITLE: Medplum AWS Update Server Command\nDESCRIPTION: Updates the ECS Service in a Medplum deployment to the latest version.  Requires AWS authentication. Replace `<name>` with the deployment name.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/cli/index.md#_snippet_26\n\nLANGUAGE: bash\nCODE:\n```\nmedplum aws update-server <name>\n```\n\n----------------------------------------\n\nTITLE: Importing React components\nDESCRIPTION: Imports necessary React components from Docusaurus and the site's local modules. These components are used for rendering links, tabs, and resource tables in the documentation.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/api/fhir/resources/person.mdx#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Link from '@docusaurus/Link';\nimport Tabs from '@theme/Tabs';\nimport TabItem from '@theme/TabItem';\nimport definition from '@site/static/data/resourceDefinitions/person.json';\nimport { ResourcePropertiesTable, SearchParamsTable } from '@site/src/components/ResourceTables';\n```\n\n----------------------------------------\n\nTITLE: GraphQL Connection API Query\nDESCRIPTION: Demonstrates a GraphQL query using the Connection API to search for Patient resources. This query retrieves the total count of patients and a list of edges containing patient information.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/graphql/connections.mdx#_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\n{ExampleCode}\n```\n\n----------------------------------------\n\nTITLE: Run the development server using npm\nDESCRIPTION: Starts the development server for the Medplum SMART on FHIR demo application. This command allows developers to test and iterate on the application in a local environment.\nSOURCE: https://github.com/medplum/medplum/blob/main/examples/medplum-smart-on-fhir-demo/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Run Playwright Codegen with npm\nDESCRIPTION: This command starts the Playwright codegen tool, which allows users to generate tests by interacting with the Medplum application in a browser.  It requires both `@medplum/server` and `@medplum/app` to be running locally on their default ports.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/e2e/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm run playwright:codegen\n```\n\n----------------------------------------\n\nTITLE: Extracting Public Key from Private Key using OpenSSL\nDESCRIPTION: This command extracts the public key from the private key file named private_key.pem. The extracted public key is saved to the file named public_key.pem. Requires OpenSSL to be installed.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/server/src/cloud/aws/signer.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nopenssl rsa -pubout -in private_key.pem -out public_key.pem\n```\n\n----------------------------------------\n\nTITLE: Stop Medplum Service\nDESCRIPTION: Stops the Medplum service using systemctl.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/self-hosting/install-on-ubuntu.md#_snippet_24\n\nLANGUAGE: bash\nCODE:\n```\nsudo systemctl stop medplum\n```\n\n----------------------------------------\n\nTITLE: Terraform Apply\nDESCRIPTION: Applies the Terraform configuration, creating or modifying resources in the Google Cloud Platform (GCP) project.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/self-hosting/install-on-gcp.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nterraform apply\n```\n\n----------------------------------------\n\nTITLE: Expression StructureDefinition Schema (JSON)\nDESCRIPTION: Provides the JSON schema definition for the FHIR Expression StructureDefinition. This schema defines the elements and their properties that comprise the Expression data type.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/api/fhir/datatypes/expression.mdx#_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\ndefinition.properties.filter((p) => !(p.inherited && p.base.includes('Resource')))\n```\n\n----------------------------------------\n\nTITLE: Install Nginx and Certbot\nDESCRIPTION: Installs Nginx and Certbot on the Ubuntu system. Nginx will act as a reverse proxy, and Certbot will generate SSL certificates.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/self-hosting/install-from-scratch.md#_snippet_20\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt-get install nginx certbot python3-certbot-nginx\n```\n\n----------------------------------------\n\nTITLE: Importing Evidence Definition\nDESCRIPTION: Imports the JSON definition of the Evidence resource schema. This definition is used to generate tables displaying the resource's properties and search parameters.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/api/fhir/resources/evidence.mdx#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport definition from '@site/static/data/resourceDefinitions/evidence.json';\n```\n\n----------------------------------------\n\nTITLE: ValueSet/$validate-code OperationDefinition\nDESCRIPTION: This JSON defines the OperationDefinition for ValueSet/$validate-code. It specifies the endpoint configuration, input parameters (url, valueSet, code, system, display, coding, codeableConcept), and output parameters (result, message, display) for the validation operation.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/api/fhir/operations/index.mdx#_snippet_0\n\nLANGUAGE: js\nCODE:\n```\n{\n  \"resourceType\": \"OperationDefinition\",\n  \"url\": \"http://hl7.org/fhir/OperationDefinition/ValueSet-validate-code\",\n  \"status\": \"active\",\n  \"kind\": \"operation\",\n  // Endpoint configuration\n  \"code\": \"validate-code\",\n  \"resource\": [\"ValueSet\"],\n  \"system\": false,\n  \"type\": true,\n  \"instance\": true,\n  \"parameter\": [\n    // Input Parameters\n    {\n      \"use\": \"in\",\n      \"name\": \"url\",\n      \"documentation\": \"Value set canonical URL\",\n      \"min\": 0,\n      \"max\": \"1\",\n      \"type\": \"uri\"\n    },\n    {\n      \"use\": \"in\",\n      \"name\": \"valueSet\",\n      \"documentation\": \"The value set is provided directly as part of the request\",\n      \"min\": 0,\n      \"max\": \"1\",\n      \"type\": \"ValueSet\"\n    },\n    {\n      \"use\": \"in\",\n      \"name\": \"code\",\n      \"documentation\": \"The code that is to be validated\",\n      \"min\": 0,\n      \"max\": \"1\",\n      \"type\": \"code\"\n    },\n    {\n      \"use\": \"in\",\n      \"name\": \"system\",\n      \"documentation\": \"The system for the code that is to be validated\",\n      \"min\": 0,\n      \"max\": \"1\",\n      \"type\": \"uri\"\n    },\n    {\n      \"use\": \"in\",\n      \"name\": \"display\",\n      \"documentation\": \"The display associated with the code, if provided\",\n      \"min\": 0,\n      \"max\": \"1\",\n      \"type\": \"string\"\n    },\n    {\n      \"use\": \"in\",\n      \"name\": \"coding\",\n      \"documentation\": \"A coding to validate\",\n      \"min\": 0,\n      \"max\": \"1\",\n      \"type\": \"Coding\"\n    },\n    {\n      \"use\": \"in\",\n      \"name\": \"codeableConcept\",\n      \"documentation\": \"A full codeableConcept to validate\",\n      \"min\": 0,\n      \"max\": \"1\",\n      \"type\": \"CodeableConcept\"\n    },\n    // Output Parameters\n    {\n      \"use\": \"out\",\n      \"name\": \"result\",\n      \"documentation\": \"True if the concept details supplied are valid\",\n      \"min\": 1,\n      \"max\": \"1\",\n      \"type\": \"boolean\"\n    },\n    {\n      \"use\": \"out\",\n      \"name\": \"message\",\n      \"documentation\": \"Error details, if result = false; otherwise may contain hints and warnings\",\n      \"min\": 0,\n      \"max\": \"1\",\n      \"type\": \"string\"\n    },\n    {\n      \"use\": \"out\",\n      \"name\": \"display\",\n      \"documentation\": \"A valid display for the concept if the system wishes to display this to a user\",\n      \"min\": 0,\n      \"max\": \"1\",\n      \"type\": \"string\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: List Medplum Packages\nDESCRIPTION: This shell code snippet displays the folder structure within the 'packages' directory of the Medplum monorepo. It lists each package along with a brief comment describing its purpose within the project.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/README.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\npackages\n├── agent        # On-premise agent\n├── app          # Frontend web app\n├── bot-layer    # AWS Lambda Layer for Bots\n├── cdk          # AWS CDK infra as code\n├── cli          # Command line interface\n├── core         # Core shared library\n├── definitions  # Data definitions\n├── docs         # Documentation\n├── examples     # Example code used in documentation\n├── fhir-router  # FHIR URL router\n├── fhirtypes    # FHIR TypeScript definitions\n├── generator    # Code generator utilities\n├── graphiql     # Preconfigured GraphiQL\n├── hl7          # HL7 client and server\n├── mock         # Mock FHIR data for testing\n├── react        # React component library\n└── server       # Backend API server\n```\n\n----------------------------------------\n\nTITLE: Running tests for a single package - Bash\nDESCRIPTION: This set of commands navigates to a specific package directory (e.g., `packages/app`) and then runs the tests defined for that package. The `cd` command changes the current directory, and `npm t` executes the tests defined in the package's `package.json` file.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/contributing/testing.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncd packages/app\nnpm t\n```\n\n----------------------------------------\n\nTITLE: Loading Patient Resource Definition\nDESCRIPTION: Loads the patient resource definition from a JSON file. This definition is then used to dynamically generate tables describing the resource's properties and search parameters.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/api/fhir/resources/patient.mdx#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport definition from '@site/static/data/resourceDefinitions/patient.json';\n```\n\n----------------------------------------\n\nTITLE: Displaying Search Parameters\nDESCRIPTION: This snippet displays the search parameters for the MedicinalProductPackaged resource using the SearchParamsTable component. It uses the searchParameters defined in the resource definition JSON.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/api/fhir/resources/medicinalproductpackaged.mdx#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n<SearchParamsTable searchParams={definition.searchParameters} />\n```\n\n----------------------------------------\n\nTITLE: EvidenceVariable Inherited Elements JSON Data\nDESCRIPTION: JSON data representing the inherited schema elements of the EvidenceVariable resource. This data is used to populate the ResourcePropertiesTable component, displaying the inherited properties of the EvidenceVariable resource.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/api/fhir/resources/evidencevariable.mdx#_snippet_3\n\nLANGUAGE: JSON\nCODE:\n```\ndefinition.properties.filter((p) => p.inherited && p.base.includes('Resource'))\n```\n\n----------------------------------------\n\nTITLE: Defining a Mid-Range Observation Reference in TypeScript\nDESCRIPTION: This code snippet defines a reference range for an observation with a specified lower and upper bound. It showcases the creation of a range between 10 and 100 mg/dL. The example is written in TypeScript and is intended to be used within an `ObservationDefinition` resource.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/careplans/reference-ranges.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  \"qualifiedInterval\": [\n    {\n      \"range\": {\n        \"low\": {\n          \"value\": 10,\n          \"unit\": \"mg/dL\"\n        },\n        \"high\": {\n          \"value\": 100,\n          \"unit\": \"mg/dL\"\n        }\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: GuidanceResponse Search Parameters (JSON)\nDESCRIPTION: Defines the search parameters available for querying GuidanceResponse resources. These parameters allow filtering and retrieval of resources based on specific criteria.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/api/fhir/resources/guidanceresponse.mdx#_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\ndefinition.searchParameters\n```\n\n----------------------------------------\n\nTITLE: Creating DocumentReference with Binary Reference - CLI\nDESCRIPTION: This code snippet shows how to create a DocumentReference resource using the Medplum CLI. It demonstrates the command-line syntax for creating the DocumentReference resource and linking it to a Binary resource. This utilizes the bash shell.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/charting/external-documents.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n{ExampleCode}\n```\n\n----------------------------------------\n\nTITLE: GuidanceResponse Inherited Properties Schema (JSON)\nDESCRIPTION: Defines the schema for the inherited properties of the GuidanceResponse resource, specifically those inherited from the base Resource. This JSON defines the structure and data types of these inherited elements.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/api/fhir/resources/guidanceresponse.mdx#_snippet_2\n\nLANGUAGE: JSON\nCODE:\n```\ndefinition.properties.filter((p) => p.inherited && p.base.includes('Resource'))\n```\n\n----------------------------------------\n\nTITLE: Get AKS credentials with Azure CLI\nDESCRIPTION: Retrieves credentials for an Azure Kubernetes Service (AKS) cluster using the Azure CLI. The command overwrites existing credentials and grants admin access.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/self-hosting/install-on-azure.md#_snippet_9\n\nLANGUAGE: Azure CLI\nCODE:\n```\naz aks get-credentials --resource-group MY_RESOURCE_GROUP --name AKS_NAME --overwrite-existing --admin\n```\n\n----------------------------------------\n\nTITLE: Cloning the Medplum Hello World repository\nDESCRIPTION: This command clones the Medplum Hello World repository from GitHub to your local machine, allowing you to access and modify the application's source code.  The subsequent `cd` command navigates into the newly cloned directory.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/tutorials/medplum-hello-world.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/medplum/medplum-hello-world.git\ncd medplum-hello-world\n```\n\n----------------------------------------\n\nTITLE: Timeout Error Response - JWKS URI\nDESCRIPTION: Sample HTTP response (302 Found) from the `/oauth2/authorize` endpoint when a connection timeout occurs while calling the `jwks` endpoint for `id_token` validation. The response includes the `Location` header with the `redirect_uri`, `error=invalid_request`, and a description of the timeout error.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/api/oauth/authorize.md#_snippet_13\n\nLANGUAGE: HTTP\nCODE:\n```\nHTTP 1.1 302\nFound Location: https://client_redirect_uri?error=invalid_request&\n                  error_description=error_description=Timeout+in+calling+jwks+uri\n```\n\n----------------------------------------\n\nTITLE: Force Reinstall Medplum\nDESCRIPTION: Forces a reinstall of the Medplum package using apt-get.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/self-hosting/install-on-ubuntu.md#_snippet_27\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt-get install --reinstall medplum\n```\n\n----------------------------------------\n\nTITLE: Invite Patient via Medplum API - Typescript\nDESCRIPTION: This Typescript code snippet demonstrates how to invite a Patient to a Medplum project using the `medplum.post` method.  It includes the resource type, first name, last name, email, and password for the new user.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/api/project-admin/invite.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nawait medplum.post('admin/projects/:projectId/invite', {\n  resourceType: 'Patient',\n  firstName: 'George',\n  lastName: 'Washington',\n  email: 'patient.gw@example.gov',\n  password: 'lib3rty0rDe4th!',\n});\n```\n\n----------------------------------------\n\nTITLE: Displaying Inherited Elements Table\nDESCRIPTION: Renders a table displaying inherited elements from the base Resource of CarePlan. The properties are obtained from a JSON definition.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/api/fhir/resources/careplan.mdx#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\n<ResourcePropertiesTable properties={definition.properties.filter((p) => p.inherited && p.base.includes('Resource'))} />\n```\n\n----------------------------------------\n\nTITLE: Build packages using Turborepo\nDESCRIPTION: Builds all packages in the Medplum monorepo using Turborepo. This is done by running `npm run build:fast` from the root Medplum directory. This command relies on the `build:fast` script defined in the root package.json.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/contributing/run-the-stack.md#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nnpm run build:fast\n```\n\n----------------------------------------\n\nTITLE: Destroy Terraform Resources\nDESCRIPTION: This command destroys all resources created by Terraform, including the GKE cluster and load balancer. This is an optional step for cleaning up resources.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/self-hosting/install-on-gcp.md#_snippet_19\n\nLANGUAGE: bash\nCODE:\n```\nterraform destroy\n```\n\n----------------------------------------\n\nTITLE: CodeSystem Import Example in TypeScript\nDESCRIPTION: This example demonstrates how to import data into a CodeSystem using the Medplum API. It retrieves the code from an external file and displays it as a code block.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/api/fhir/operations/codesystem-import.mdx#_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\n{ExampleCode}\n```\n\n----------------------------------------\n\nTITLE: Find Practitioners at a Location (CLI)\nDESCRIPTION: This CLI example shows how to find Practitioners and PractitionerRoles at a specific Location. The example utilizes _revinclude to find PractitionerRoles linked to the Location and _include:iterate to get the related Practitioner resources. It requires a Medplum CLI environment.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/search/includes.mdx#_snippet_15\n\nLANGUAGE: TypeScript\nCODE:\n```\n{ExampleCode}\n```\n\n----------------------------------------\n\nTITLE: Import React components TypeScript\nDESCRIPTION: This code snippet imports essential components and modules from the `@medplum/react`, `@medplum/fhirtypes`, and `@mantine/core` libraries. These components are used for building the user interface and interacting with the Medplum FHIR server. Specifically, it imports components for coding input, document handling, resource management, UI elements, and FHIR ValueSet type definitions.\nSOURCE: https://github.com/medplum/medplum/blob/main/examples/medplum-valueset-selector/README.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// Main imports\nimport { CodingInput, Document, ResourceName, useMedplum } from '@medplum/react';\nimport { ValueSet } from '@medplum/fhirtypes';\nimport { Title, Group, TextInput, Box, Textarea, Button, Alert, Grid } from '@mantine/core';\n```\n\n----------------------------------------\n\nTITLE: Inherited Resource Elements JSON\nDESCRIPTION: This JSON snippet filters properties to include only inherited elements from the base Resource type in the DeviceDefinition schema.  This is used to show the properties that are inherited from FHIR Resource, not DeviceDefinition specific.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/api/fhir/resources/devicedefinition.mdx#_snippet_3\n\nLANGUAGE: JSON\nCODE:\n```\ndefinition.properties.filter((p) => p.inherited && p.base.includes('Resource'))\n```\n\n----------------------------------------\n\nTITLE: Add Node.js Repository\nDESCRIPTION: Adds the Node.js v22.x repository to the Ubuntu system. This allows the installation of the latest Node.js version.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/self-hosting/install-from-scratch.md#_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ncurl -fsSL https://deb.nodesource.com/setup_22.x | sudo bash -\n```\n\n----------------------------------------\n\nTITLE: Patient with Related Encounters Response\nDESCRIPTION: This TypeScript code defines the structure of the expected response when retrieving a Patient with related Encounter resources. It includes the Patient resource and a list of Encounter resources that reference the Patient.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/graphql/basic-queries.mdx#_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\n{ExampleCode}\n```\n\n----------------------------------------\n\nTITLE: Build Bot with NPM\nDESCRIPTION: This command builds the Medplum bot project using the npm build script. The specific build process is defined in the package.json file and typically involves compiling TypeScript code into JavaScript.\nSOURCE: https://github.com/medplum/medplum/blob/main/examples/medplum-demo-bots/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Running the application\nDESCRIPTION: Starts the development server for the application using npm, typically running on `http://localhost:3000`.\nSOURCE: https://github.com/medplum/medplum/blob/main/examples/medplum-mso-demo/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Token Exchange Request in TypeScript\nDESCRIPTION: This snippet demonstrates how to exchange an external access token for a Medplum access token using TypeScript. It is expected to use the `exchangeExternalAccessToken` function from Medplum SDK and needs a correctly configured ClientApplication.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/auth/methods/token-exchange.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { MedplumClient } from '@medplum/core';\n\n/**\n * Exchanges an external access token for a Medplum access token.\n * @param medplum The Medplum client.\n * @param clientId The client ID of the Medplum application.\n * @param subjectToken The external access token.\n * @returns A promise that resolves with the Medplum access token.\n */\nexport async function exchangeExternalAccessToken(\n  medplum: MedplumClient,\n  clientId: string,\n  subjectToken: string\n): Promise<string> {\n  const result = await medplum.exchangeExternalAccessToken({\n    clientId,\n    subjectToken,\n  });\n  return result.accessToken as string;\n}\n\n```\n\n----------------------------------------\n\nTITLE: Initialize Terraform\nDESCRIPTION: Initializes the Terraform working directory. This downloads necessary provider plugins and modules required to provision resources in Azure.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/self-hosting/install-on-azure.md#_snippet_2\n\nLANGUAGE: Azure CLI\nCODE:\n```\nterraform init\n```\n\n----------------------------------------\n\nTITLE: Creating Medplum Database User PLpgSQL\nDESCRIPTION: This snippet creates a database user named 'medplum' with the password 'medplum'. This user will be granted privileges to access and manage the 'medplum' database. It's a necessary step to ensure that the Medplum application can connect to the database.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/server/README.md#_snippet_0\n\nLANGUAGE: PLpgSQL\nCODE:\n```\nCREATE USER medplum WITH PASSWORD 'medplum';\n```\n\n----------------------------------------\n\nTITLE: Expunge Medplum Project\nDESCRIPTION: Completely and permanently deletes all data within a Medplum project using the `$expunge` operation.  This action is irreversible and requires extreme caution. Requires super admin privileges and a valid login session.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/self-hosting/super-admin-cli.md#_snippet_19\n\nLANGUAGE: bash\nCODE:\n```\nmedplum post 'Project/bca80725-ea6a-4fb4-8eac-41b8ee51f09e/$expunge'\n```\n\n----------------------------------------\n\nTITLE: Access Resource History via cURL\nDESCRIPTION: Demonstrates how to access resource history using cURL. It shows how to construct a cURL command to retrieve the history of a specific resource.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/fhir-datastore/resource-history.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nfunction accessHistoryCurl() {\n  echo \"curl https://api.medplum.com/fhir/R4/Patient/{{patientId}}/_history \\\n    -H \\\"Authorization: Bearer $MEDPLUM_CLIENT_ADMIN_TOKEN\\\"\\n    -H \\\"Content-Type: application/fhir+json\\\"\";\n}\n```\n\n----------------------------------------\n\nTITLE: MedplumContext Interface Definition\nDESCRIPTION: Defines the TypeScript interface for the `MedplumContext` object, which is provided by the `MedplumProvider`. It outlines the properties available within the context, including the `MedplumClient`, navigation function, user profile, and loading state.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/react-hooks/README.md#_snippet_5\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface MedplumContext {\n  medplum: MedplumClient;\n  navigate: MedplumNavigateFunction;\n  profile?: ProfileResource;\n  loading: boolean;\n}\n```\n\n----------------------------------------\n\nTITLE: Copy environment variables bash\nDESCRIPTION: This command copies the default environment variables file to a new .env file, allowing for modification of environment variables.\nSOURCE: https://github.com/medplum/medplum/blob/main/examples/medplum-chart-demo/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncp .env.defaults .env\n```\n\n----------------------------------------\n\nTITLE: CDK Diff Command\nDESCRIPTION: This command uses the AWS CDK (Cloud Development Kit) to compare the current state of your AWS resources with the desired state defined in your CDK code. It displays a detailed diff showing the changes that will be made during a deployment.  The `-c config` parameter specifies the configuration file to use.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/self-hosting/install-on-aws.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nnpx cdk diff -c config=medplum.demo.config.json\n```\n\n----------------------------------------\n\nTITLE: Configure Redis Password\nDESCRIPTION: Shows the configuration required in the Redis config file to set a password. This enhances the security of the Redis instance.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/self-hosting/install-from-scratch.md#_snippet_7\n\nLANGUAGE: text\nCODE:\n```\nrequirepass medplum\n```\n\n----------------------------------------\n\nTITLE: Displaying FHIR Procedure Schema\nDESCRIPTION: This snippet displays the elements of the FHIR Procedure resource schema using a custom React component called `ResourcePropertiesTable`. It filters out inherited properties from the base Resource definition. The schema data is sourced from a JSON file.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/api/fhir/resources/procedure.mdx#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n<ResourcePropertiesTable\n  properties={definition.properties.filter((p) => !(p.inherited && p.base.includes('Resource')))}\n/>\n```\n\n----------------------------------------\n\nTITLE: Restart Medplum Service\nDESCRIPTION: Restarts the Medplum service using systemctl.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/self-hosting/install-on-ubuntu.md#_snippet_25\n\nLANGUAGE: bash\nCODE:\n```\nsudo systemctl restart medplum\n```\n\n----------------------------------------\n\nTITLE: Build the server\nDESCRIPTION: Builds the Medplum server using npm. This command compiles the server code into an executable format.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/contributing/server-profiling.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Running NPM Commands from Root Directory (Bash)\nDESCRIPTION: It's crucial to execute npm commands from the project root directory. This ensures proper management of package dependency relationships at the workspace level. Running commands in individual package directories can break the workspace structure.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/contributing/package-json.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# ✅ DO run npm commands from the project root\ncd ~/dev/medplum\nnpm ci\n\n# ❌ DON'T run npm commands from package directories\ncd ~/dev/medplum/packages/core\nnpm i  # DON'T do this!\n```\n\n----------------------------------------\n\nTITLE: Displaying a CareTeam with Clinicians and Patient\nDESCRIPTION: This Mermaid diagram illustrates a CareTeam and its relationship to clinicians (Practitioners) and a patient. The CareTeam is associated with multiple practitioners, each represented by a table showing their name and role. The CareTeam is also linked to a patient, similarly displayed in a table.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/administration/provider-directory/index.md#_snippet_0\n\nLANGUAGE: Mermaid\nCODE:\n```\nflowchart TD\n   A[<b>CareTeam</b>]\n   subgraph clinicians [<i>Clinicians</i>]\n   B[  <table><thead><tr><th>Practitioner</th></tr></thead><tbody><tr><td>Dr. Alice Smith</td></tr></tbody></table>]\n   C[  <table><thead><tr><th>Practitioner</th></tr></thead><tbody><tr><td>Bob Ross, NP</td></tr></tbody></table>]\n   end\n   A-->|member| B\n   A-->|member| C\n   A-->|subject| D[<table><thead><tr><th>Patient</th></tr></thead><tbody><tr><td>Homer Simpson</td></tr></tbody></table>]\n\n```\n\n----------------------------------------\n\nTITLE: Insurance Plan and Network Association\nDESCRIPTION: This snippet visualizes how `InsurancePlan` resources are linked to `Network` resources via the `network` attribute.  A single insurance plan can be associated with multiple networks, representing coverage under different network arrangements. This showcases the relationship between insurance products and provider networks.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/administration/provider-directory/provider-networks.md#_snippet_2\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart BT\n\t467375[\"<b>Insurance Plan</b>\\nAcme QHP Gold\"] -->|\"network\"| 569274[\"<b>Network</b>\\nAcme Insurance Standard Network\"]\n\t467375 -->|\"network\"| 598156[\"<b>Network</b>\\nAcme Insurance Premium Network\"]\n\t775427[\"<b>Insurance Plan</b>\\nAcme QHP Bronze\"] -->|\"network\"| 598156\n```\n\n----------------------------------------\n\nTITLE: FHIR Patient Identifier Query with Medical Record Number\nDESCRIPTION: This curl command demonstrates how to query for a patient using a medical record number. It shows the basic syntax for searching based on an identifier value.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/blog/2023-08-08-system-strings.mdx#_snippet_0\n\nLANGUAGE: curl\nCODE:\n```\nGET [base]/Patient?identifier=12345\n```\n\n----------------------------------------\n\nTITLE: ExplanationOfBenefit Resource Definition (JSON)\nDESCRIPTION: This JSON snippet represents the resource definition for the ExplanationOfBenefit resource, loaded from a static file. It is used to populate the schema and search parameters tables on the page.  It relies on the `@site/static/data/resourceDefinitions/explanationofbenefit.json` file.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/api/fhir/resources/explanationofbenefit.mdx#_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\ndefinition.properties.filter((p) => !(p.inherited && p.base.includes('Resource')))\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies after Manual Update (Bash)\nDESCRIPTION: After manually updating package.json with new or updated dependencies, run this command from the project root to install them. It's recommended to use the `--strict-peer-deps` flag to identify and resolve potential conflicts during the install process.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/contributing/package-json.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncd ~/dev/medplum\nnpm i --strict-peer-deps\n```\n\n----------------------------------------\n\nTITLE: Running the iOS Emulator\nDESCRIPTION: This shell command starts the React Native application in the iOS emulator, enabling testing on a virtual iOS device.\nSOURCE: https://github.com/medplum/medplum/blob/main/examples/medplum-react-native-example/README.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm run ios\n```\n\n----------------------------------------\n\nTITLE: Importing React Components\nDESCRIPTION: Imports necessary React components from the docusaurus theme and the local site. These components are used for creating tabs, tab items, links, and resource tables for displaying the AllergyIntolerance resource schema and search parameters.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/api/fhir/resources/allergyintolerance.mdx#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport Link from '@docusaurus/Link';\nimport Tabs from '@theme/Tabs';\nimport TabItem from '@theme/TabItem';\nimport definition from '@site/static/data/resourceDefinitions/allergyintolerance.json';\nimport { ResourcePropertiesTable, SearchParamsTable } from '@site/src/components/ResourceTables';\n```\n\n----------------------------------------\n\nTITLE: Displaying Search Parameters Table\nDESCRIPTION: Renders a table displaying search parameters for the CarePlan resource. The parameters are obtained from a JSON definition.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/api/fhir/resources/careplan.mdx#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n<SearchParamsTable searchParams={definition.searchParameters} />\n```\n\n----------------------------------------\n\nTITLE: Running Dev Server with npm\nDESCRIPTION: This command starts the Medplum development server using npm.  It is typically used during development to run the application locally and allows for hot reloading and debugging. Requires Node.js and npm.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/server/README.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Create Patient Mutation Response Aliased\nDESCRIPTION: Example response for Aliased Create Patient Mutation.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/graphql/mutations.mdx#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n{ExampleCode}\n```\n\n----------------------------------------\n\nTITLE: Importing React Components\nDESCRIPTION: Imports necessary components from Docusaurus and the project's components to render the Patient resource documentation. It includes Link, Tabs, TabItem from Docusaurus, and ResourcePropertiesTable, SearchParamsTable from the project.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/api/fhir/resources/patient.mdx#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Link from '@docusaurus/Link';\nimport Tabs from '@theme/Tabs';\nimport TabItem from '@theme/TabItem';\nimport definition from '@site/static/data/resourceDefinitions/patient.json';\nimport { ResourcePropertiesTable, SearchParamsTable } from '@site/src/components/ResourceTables';\n```\n\n----------------------------------------\n\nTITLE: Start the Medplum Web App\nDESCRIPTION: Navigates to the `packages/app` directory and starts the Medplum Web App using `npm run dev`. This command starts the development server for the web application.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/contributing/run-the-stack.md#_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\ncd packages/app\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Listing Files in Dist Directory (Bash)\nDESCRIPTION: This snippet uses the `ls dist` command to list the files in the `dist/` directory after compiling the TypeScript code. This confirms that the JavaScript file and associated files have been successfully generated.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/bots/bots-in-production.md#_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\ncd ..\nls dist\n\n# my-first-bot.d.ts\n# my-first-bot.js\n# my-first-bot.js.map\n# examples/\n# ...\n```\n\n----------------------------------------\n\nTITLE: Example: Capillary Blood Sample in Typescript\nDESCRIPTION: This code snippet defines a fingerprick blood sample that is distributed into two collection tubes: a red cap and a green cap. It is assumed that `ExampleCode` contains the Typescript code for the `fingerprickSpecimen` block.  The complete code within `ExampleCode` is not provided, so further analysis is impossible.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/careplans/diagnostic-catalog/diagnostic-catalog.mdx#_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\n{ExampleCode}\n```\n\n----------------------------------------\n\nTITLE: Subsumption Testing SQL\nDESCRIPTION: Checks whether one code is related to another through a hierarchy within the code system. It first retrieves the CodeSystem ID by URL. Then, it uses a recursive CTE to traverse the parent properties and determine if one code is an ancestor of the other.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/contributing/terminology-architecture.md#_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\n-- Get CodeSystem by URL\nSELECT id, content FROM \"CodeSystem\" WHERE url = ?;\n\n-- Check if codeA is an ancestor of codeB; this query is performed once in each direction\nWITH RECURSIVE \"cte_ancestors\" AS (\n    SELECT id, code, display FROM \"Coding\"\n    WHERE system = ? AND code = ?\n  UNION\n      SELECT c.id, c.code, c.display FROM \"Coding\" c\n        INNER JOIN \"Coding_Property\" AS cp ON c.id = cp.target\n        INNER JOIN \"CodeSystem_Property\" AS property ON (\n          cp.property = property.id\n          AND property.code = ?\n        )\n        INNER JOIN \"cte_ancestors\" AS ancestor ON cp.coding = ancestor.id\n      WHERE\n        c.system = ?\n)\nSELECT code, display FROM \"cte_ancestors\"\nWHERE code = ?\nLIMIT 1;\n```\n\n----------------------------------------\n\nTITLE: Rendering Search Parameters Table\nDESCRIPTION: This code snippet renders a table displaying the search parameters for the FHIR Location resource, using data from the `definition.searchParameters` property.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/api/fhir/resources/location.mdx#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\n<SearchParamsTable searchParams={definition.searchParameters} />\n```\n\n----------------------------------------\n\nTITLE: Sorting package.json using NPM Script (Bash)\nDESCRIPTION: The Medplum codebase includes an npm script to automatically sort the contents of package.json files. This promotes consistency and readability across the monorepo, making it easier to maintain and review dependency changes.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/contributing/package-json.md#_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nnpm run sort-package-json\n```\n\n----------------------------------------\n\nTITLE: Using useSubscription hook\nDESCRIPTION: This snippet shows how to use the `useSubscription` hook with the `MedplumClient` in an Expo app.  It shows how to initialize the `WebSocketManager` and handle incoming messages for a subscription.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/expo-polyfills/README.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { MedplumClient, useSubscription } from '@medplum/core';\nimport { MedplumProvider, useMedplumContext } from '@medplum/react-hooks';\nimport { polyfillMedplumWebAPIs, ExpoClientStorage, initWebSocketManager } from '@medplum/expo-polyfills';\n\npolyfillMedplumWebAPIs();\n\nconst medplum = new MedplumClient({ storage: new ExpoClientStorage() });\n\ninitWebSocketManager(medplum);\n\nfunction Counter(): JSX.Element {\n  const [count, setCount] = useState(0);\n\n  useSubscription(\n    'Communication',\n    (_bundle: Bundle) => {\n      setCount((s) => s + 1);\n    }\n  );\n\n  return <div>Count: {count}</div>\n}\n\nfunction Home(): JSX.Element {\n  const { loading } = useMedplumContext();\n  return loading ? <div>Loading...</div> : <Counter />;\n}\n\nfunction App(): JSX.Element {\n  return (\n    <MedplumProvider medplum={medplum}>\n      <Home />\n    </MedplumProvider>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Quantity Definition (JSON)\nDESCRIPTION: JSON definition for the FHIR Quantity datatype. Contains the schema and properties of the Quantity type, used to populate the ResourcePropertiesTable.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/api/fhir/datatypes/quantity.mdx#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\ndefinition.properties.filter((p) => !(p.inherited && p.base.includes('Resource')))\n```\n\n----------------------------------------\n\nTITLE: Rendering Inherited Elements Table\nDESCRIPTION: Renders a table displaying inherited properties of the FHIR Binary resource from its base Resource class. This table shows properties that are common across FHIR resources.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/api/fhir/resources/binary.mdx#_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\n<ResourcePropertiesTable properties={definition.properties.filter((p) => p.inherited && p.base.includes('Resource'))} />\n```\n\n----------------------------------------\n\nTITLE: Invalid Request Error Response\nDESCRIPTION: Sample HTTP response (302 Found) from the `/oauth2/authorize` endpoint when the request parameters are not formatted correctly (e.g., missing `response_type`, missing `code_challenge_method` when `code_challenge` is provided).  The response includes the `Location` header with the `redirect_uri` and an `error=invalid_request` parameter.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/api/oauth/authorize.md#_snippet_8\n\nLANGUAGE: HTTP\nCODE:\n```\nHTTP 1.1 302\nFound Location: https://client_redirect_uri?error=invalid_request\n```\n\n----------------------------------------\n\nTITLE: Importing React Components for Resource Documentation\nDESCRIPTION: This snippet imports necessary React components from Docusaurus and custom components for rendering tabs, resource definitions, and tables. These components are used to display the Procedure resource's schema, search parameters, and inherited elements.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/api/fhir/resources/procedure.mdx#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport Link from '@docusaurus/Link';\nimport Tabs from '@theme/Tabs';\nimport TabItem from '@theme/TabItem';\nimport definition from '@site/static/data/resourceDefinitions/procedure.json';\nimport { ResourcePropertiesTable, SearchParamsTable } from '@site/src/components/ResourceTables';\n```\n\n----------------------------------------\n\nTITLE: Installing Medplum Mock Package\nDESCRIPTION: Installs the @medplum/mock package as a dependency using npm. This command is used to add the mock library to a project.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/mock/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @medplum/mock\n```\n\n----------------------------------------\n\nTITLE: Retrieving Agent Status via Bash\nDESCRIPTION: This command demonstrates how to use the `medplum get` command to retrieve the status of an agent, where `[id]` needs to be replaced with the actual agent ID.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/agent/status.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmedplum get 'Agent/[id]/$status'\n```\n\n----------------------------------------\n\nTITLE: Rendering Resource Properties Table (JavaScript)\nDESCRIPTION: This snippet renders a `ResourcePropertiesTable` component, passing it a filtered subset of the `definition.properties` array.  The filter removes inherited properties where the base includes 'Resource'. This table displays the schema elements of the Population resource.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/api/fhir/datatypes/population.mdx#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n<ResourcePropertiesTable\n  properties={definition.properties.filter((p) => !(p.inherited && p.base.includes('Resource')))}\n/>\n```\n\n----------------------------------------\n\nTITLE: CDK Deploy Command (Bash)\nDESCRIPTION: This command deploys the AWS CDK stack using the specified configuration file. It provisions the infrastructure resources defined in the CDK application based on the settings in the config file.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/cdk/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx cdk deploy -c config=my-config.json\n```\n\n----------------------------------------\n\nTITLE: Import Tabs and TabItem Components in JavaScript\nDESCRIPTION: Imports the Tabs and TabItem components from the @theme/Tabs and @theme/TabItem modules, respectively. These components are used to create tabbed interfaces for organizing content within the documentation.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/api/fhir/resources/visionprescription.mdx#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport Tabs from '@theme/Tabs';\nimport TabItem from '@theme/TabItem';\n```\n\n----------------------------------------\n\nTITLE: Cloning and Installing Dependencies\nDESCRIPTION: This shell command clones the Medplum React Native example repository, navigates to the project directory, and installs the necessary dependencies using npm.\nSOURCE: https://github.com/medplum/medplum/blob/main/examples/medplum-react-native-example/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone git@github.com:medplum/medplum-react-native-example.git\ncd medplum-react-native-example\nnpm ci\n```\n\n----------------------------------------\n\nTITLE: Markdown Header for Measure Resource\nDESCRIPTION: Defines the Markdown header for the Measure resource documentation page. Includes the title and sidebar position for navigation purposes.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/api/fhir/resources/measure.mdx#_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: Measure\nsidebar_position: 71\n---\n```\n\n----------------------------------------\n\nTITLE: Set Custom Font in pdfmake Document\nDESCRIPTION: This snippet illustrates how to set a custom font within a pdfmake document definition using the `defaultStyle` property. This allows you to specify a default font for the entire document. Medplum supports Helvetica, Roboto, and Avenir fonts.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/bots/creating-a-pdf.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst docDefinition = {\n  content: { ... },\n  defaultStyle: {\n    font: 'yourFontName'\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Inherited Resource Properties\nDESCRIPTION: This snippet displays the inherited properties of the MedicinalProductPackaged resource from the base Resource using the ResourcePropertiesTable component. It filters properties that are both inherited and based on 'Resource'.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/api/fhir/resources/medicinalproductpackaged.mdx#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\n<ResourcePropertiesTable properties={definition.properties.filter((p) => p.inherited && p.base.includes('Resource'))} />\n```\n\n----------------------------------------\n\nTITLE: Searching by ID using _id Parameter - cURL\nDESCRIPTION: Demonstrates how to search for Patient resources using their IDs via the `_id` parameter using a cURL command.  The code snippet shows the appropriate cURL command to execute the FHIR search operation against the Medplum API. Requires cURL to be installed and configured.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/search/advanced-search-parameters.mdx#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n{ExampleCode}\n```\n\n----------------------------------------\n\nTITLE: Filtering Resource Properties (JavaScript)\nDESCRIPTION: This snippet filters the properties of the `definition` object to exclude inherited properties from the base 'Resource' structure. This is likely done to display only the properties specific to the UsageContext datatype.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/api/fhir/datatypes/usagecontext.mdx#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\ndefinition.properties.filter((p) => !(p.inherited && p.base.includes('Resource')))\n```\n\n----------------------------------------\n\nTITLE: Avoiding Force Installation of Dependencies (Bash)\nDESCRIPTION: Using `--force` or `--legacy-peer-deps` flags during npm installation is discouraged. These flags bypass essential dependency checks, potentially leading to unpredictable behavior, build failures, and time-consuming debugging processes. It's best to resolve dependencies correctly without forcing the installation.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/contributing/package-json.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n# ❌ DON'T use these commands\nnpm install --force\nnpm install --legacy-peer-deps\n```\n\n----------------------------------------\n\nTITLE: Example Bot Deployment Output\nDESCRIPTION: This is example output from the bot deployment process, showing the bot code being updated and the bot successfully deployed.\nSOURCE: https://github.com/medplum/medplum/blob/main/examples/medplum-demo-bots/src/deduplication/README.md#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nUpdate bot code.....\nSuccess! New bot version: <botID>\nDeploying bot...\nDeploy result: All OK\n```\n\n----------------------------------------\n\nTITLE: Displaying Rate Limit Headers\nDESCRIPTION: This snippet shows the HTTP headers returned by the Medplum API to indicate rate limit status. These headers provide information about the maximum number of requests allowed, the remaining requests in the current window, and the time until the rate limit resets.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/rate-limits/index.md#_snippet_0\n\nLANGUAGE: HTTP\nCODE:\n```\nX-Ratelimit-Limit: 600\nX-Ratelimit-Remaining: 599\nX-Ratelimit-Reset: 1713810464\n```\n\n----------------------------------------\n\nTITLE: Medplum AWS List Command\nDESCRIPTION: Lists your Medplum deployments by listing AWS CloudFormation stacks with the `medplum:environment` tag. Requires AWS authentication.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/cli/index.md#_snippet_23\n\nLANGUAGE: bash\nCODE:\n```\nmedplum aws list\n```\n\n----------------------------------------\n\nTITLE: Importing React components in Markdown\nDESCRIPTION: Imports necessary React components from Docusaurus and a local module for rendering resource tables. This code snippet sets up the environment for displaying interactive documentation elements within the Markdown page.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/api/fhir/resources/devicerequest.mdx#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Link from '@docusaurus/Link';\nimport Tabs from '@theme/Tabs';\nimport TabItem from '@theme/TabItem';\nimport definition from '@site/static/data/resourceDefinitions/devicerequest.json';\nimport { ResourcePropertiesTable, SearchParamsTable } from '@site/src/components/ResourceTables';\n```\n\n----------------------------------------\n\nTITLE: Installing dependencies using npm\nDESCRIPTION: This command uses npm (Node Package Manager) to install all the dependencies required by the Medplum Photon Integration application, as specified in the `package.json` file.\nSOURCE: https://github.com/medplum/medplum/blob/main/examples/medplum-photon-integration/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Start Medplum Login\nDESCRIPTION: Initiates a new Medplum login using the `medplum login` command. This command will typically prompt for credentials and store them in `~/.medplum/credentials`. Requires the Medplum CLI to be installed and configured.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/self-hosting/super-admin-cli.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nmedplum login\n```\n\n----------------------------------------\n\nTITLE: Import Resource Table Components in JavaScript\nDESCRIPTION: Imports the ResourcePropertiesTable and SearchParamsTable components from the @site/src/components/ResourceTables module. These components are used to render tables displaying resource properties and search parameters, respectively.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/api/fhir/resources/visionprescription.mdx#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { ResourcePropertiesTable, SearchParamsTable } from '@site/src/components/ResourceTables';\n```\n\n----------------------------------------\n\nTITLE: Importing React Components for TestReport Documentation\nDESCRIPTION: Imports necessary React components from docusaurus and local files for rendering the TestReport documentation page. Includes Link, Tabs, TabItem from docusaurus and ResourcePropertiesTable, SearchParamsTable components from the site.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/api/fhir/resources/testreport.mdx#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport Link from '@docusaurus/Link';\nimport Tabs from '@theme/Tabs';\nimport TabItem from '@theme/TabItem';\nimport definition from '@site/static/data/resourceDefinitions/testreport.json';\nimport { ResourcePropertiesTable, SearchParamsTable } from '@site/src/components/ResourceTables';\n```\n\n----------------------------------------\n\nTITLE: CDK Diff Command (Bash)\nDESCRIPTION: This command uses the AWS CDK to generate a diff of the infrastructure changes based on the provided configuration file. It allows you to preview the changes before deploying them to your environment.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/cdk/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx cdk diff -c config=my-config.json\n```\n\n----------------------------------------\n\nTITLE: Navigating to Medplum Chat Demo Directory (Bash)\nDESCRIPTION: This command changes the current directory to the `medplum-chat-demo` directory within the examples directory, allowing the user to work within the project.\nSOURCE: https://github.com/medplum/medplum/blob/main/examples/medplum-chat-demo/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncd examples/medplum-chat-demo\n```\n\n----------------------------------------\n\nTITLE: Install npm dependencies\nDESCRIPTION: Navigates to the medplum directory and installs all dependencies using npm ci. This command is intended to be run from the root of the Medplum repository.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/contributing/run-the-stack.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncd medplum\nnpm ci\n```\n\n----------------------------------------\n\nTITLE: Invalid $bulk-status Response\nDESCRIPTION: This JSON snippet represents an invalid response from the `$bulk-status` operation, specifically when the `_count` parameter exceeds the maximum allowed value. The response is an `OperationOutcome` resource with an error indicating the invalid `_count` value.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/agent/bulk-status.md#_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"resourceType\": \"OperationOutcome\",\n  \"issue\": [\n    {\n      \"severity\": \"error\",\n      \"code\": \"invalid\",\n      \"details\": {\n        \"text\": \"'_count' of 101 is greater than max of 100\"\n      }\n    }\n  ]\n}\n\n```\n\n----------------------------------------\n\nTITLE: Installing React Router using npm\nDESCRIPTION: Installs React Router as a development dependency using npm. This enables client-side routing functionality within the React application, which is recommended but not strictly required by Medplum.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/react/index.mdx#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm i -D react-router\n```\n\n----------------------------------------\n\nTITLE: Medplum AWS Update App Command\nDESCRIPTION: Updates the app S3 bucket in a Medplum deployment to the latest version.  Requires AWS authentication. Replace `<name>` with the deployment name.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/cli/index.md#_snippet_25\n\nLANGUAGE: bash\nCODE:\n```\nmedplum aws update-app <name>\n```\n\n----------------------------------------\n\nTITLE: Importing React components for UI elements\nDESCRIPTION: Imports necessary React components from external libraries for rendering the user interface.  This includes Link from docusaurus for creating links, Tabs and TabItem from @theme for tabbed navigation, and components from the local project for resource tables.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/api/fhir/resources/adverseevent.mdx#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport Link from '@docusaurus/Link';\nimport Tabs from '@theme/Tabs';\nimport TabItem from '@theme/TabItem';\nimport definition from '@site/static/data/resourceDefinitions/adverseevent.json';\nimport { ResourcePropertiesTable, SearchParamsTable } from '@site/src/components/ResourceTables';\n```\n\n----------------------------------------\n\nTITLE: Running the Medplum Generator\nDESCRIPTION: This command executes the Medplum Generator, which processes data definitions and outputs corresponding TypeScript code. It requires Node.js and npm to be installed.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/generator/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm run generate\n```\n\n----------------------------------------\n\nTITLE: Test Nginx Configuration\nDESCRIPTION: Tests the Nginx configuration for syntax errors.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/self-hosting/install-on-ubuntu.md#_snippet_20\n\nLANGUAGE: bash\nCODE:\n```\nsudo nginx -t\n```\n\n----------------------------------------\n\nTITLE: ObservationDefinition for Potassium (TS)\nDESCRIPTION: Defines an ObservationDefinition resource for Potassium. This explains how Potassium levels are represented and interpreted.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/careplans/diagnostic-catalog/diagnostic-catalog.mdx#_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\n{ExampleCode}\n```\n\n----------------------------------------\n\nTITLE: Importing React Components\nDESCRIPTION: Imports necessary React components from docusaurus and the local project.  These components are used for creating interactive tabs and displaying resource tables within the documentation page.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/api/fhir/resources/location.mdx#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport Link from '@docusaurus/Link';\nimport Tabs from '@theme/Tabs';\nimport TabItem from '@theme/TabItem';\nimport definition from '@site/static/data/resourceDefinitions/location.json';\nimport { ResourcePropertiesTable, SearchParamsTable } from '@site/src/components/ResourceTables';\n```\n\n----------------------------------------\n\nTITLE: SQL Query for FHIR Token Search with NOT Modifier\nDESCRIPTION: This SQL query implements a FHIR search for DiagnosticReport resources, specifically handling the 'code:not' modifier. It joins the DiagnosticReport table with a token table and uses a WHERE clause to exclude resources that have a matching token value, effectively implementing the 'not' modifier.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/contributing/search-architecture.md#_snippet_8\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT \"DiagnosticReport\".\"id\", \"DiagnosticReport\".\"content\" FROM \"DiagnosticReport\"\n  LEFT JOIN \"DiagnosticReport_Token\" AS \"T1\" ON (\n    \"DiagnosticReport\".\"id\"=\"T1\".\"resourceId\" AND\n    -- Tokens are stored essentially as (searchParam, system, code) tuples\n    \"T1\".\"code\"='code' AND (\n      \"T1\".\"system\"='http://loinc.org' AND\n      \"T1\".\"value\"='69737-5'\n    )\n  )\nWHERE (\"DiagnosticReport\".\"deleted\"=false AND\n  -- Negate the search and find rows that do NOT match\n  \"T1\".\"resourceId\" IS NULL\n) GROUP BY \"DiagnosticReport\".\"id\"\n```\n\n----------------------------------------\n\nTITLE: Navigating to the example directory using bash\nDESCRIPTION: This command is used to change the current directory in the terminal to the `medplum-photon-integration` directory, which is located within the `examples` directory of the Medplum repository.\nSOURCE: https://github.com/medplum/medplum/blob/main/examples/medplum-photon-integration/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncd examples/medplum-photon-integration\n```\n\n----------------------------------------\n\nTITLE: Update Medplum Server Config\nDESCRIPTION: Updates the `medplum.config.json` file with the new base URL for the API server. This is required when setting up Nginx as a reverse proxy.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/self-hosting/install-from-scratch.md#_snippet_16\n\nLANGUAGE: js\nCODE:\n```\n{\n  \"baseUrl\": \"https://api.example.com\"\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Manually Adding Dependencies to package.json (JavaScript)\nDESCRIPTION: Instead of using `npm i`, dependencies should be manually added to the appropriate `package.json` file within the monorepo. After updating, run `npm i --strict-peer-deps` or use the reinstall script to apply the changes.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/contributing/package-json.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// Example: Adding a dependency to packages/core/package.json\n{\n  \"dependencies\": {\n    \"existing-dependency\": \"1.0.0\",\n    \"new-dependency\": \"2.0.0\" // Manually add this line\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Copying Environment Variables (Bash)\nDESCRIPTION: This command copies the default environment variables file (`.env.defaults`) to a new file named `.env`. This allows users to customize the environment variables for the application.\nSOURCE: https://github.com/medplum/medplum/blob/main/examples/medplum-chat-demo/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncp .env.defaults .env\n```\n\n----------------------------------------\n\nTITLE: FHIR RelatedPerson and Patient JSON Examples\nDESCRIPTION: This code snippet demonstrates how to model a Father-Daughter relationship using FHIR resources, specifically RelatedPerson and Patient. It shows the structure of the JSON data and highlights key properties such as resourceType, id, relationship, and patient. The code uses stringify to format the JSON for better readability.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/fhir-datastore/family-relationships/family-relationships.mdx#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n{'// RelatedPerson modeling Father -> Daughter relationship\\n' + JSON.stringify((\n      (({ resourceType, id, relationship, patient, address, telecom }) => {\n        return { resourceType, id, relationship, patient, address, telecom };\n      })(HomerLisaRelatedPerson),\n      null,\n      2\n    ) + '\\n\\n//Patient\\n' +\n    JSON.stringify(\n      (({ resourceType, id }) => {\n        return { resourceType, id };\n      })(LisaSimpson),\n      null,\n      2\n    )}\n```\n\n----------------------------------------\n\nTITLE: Importing React components for Device documentation\nDESCRIPTION: This code snippet imports necessary React components from Docusaurus and a local file to render the documentation for the FHIR Device resource. It includes components for creating links, tabs, and tables for displaying resource properties and search parameters.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/api/fhir/resources/device.mdx#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport Link from '@docusaurus/Link';\nimport Tabs from '@theme/Tabs';\nimport TabItem from '@theme/TabItem';\nimport definition from '@site/static/data/resourceDefinitions/device.json';\nimport { ResourcePropertiesTable, SearchParamsTable } from '@site/src/components/ResourceTables';\n```\n\n----------------------------------------\n\nTITLE: TypeScript: Updating getReferenceString Usage\nDESCRIPTION: The `getReferenceString` function in the TypeScript SDK now requires the input to have a `reference` string for `Reference` types or both `resourceType` and `id` for `Resource` types. This change improves type safety, and code using `getReferenceString({})` will result in a TypeScript error.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/blog/2025-02-20-v4.md#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\ngetReferenceString({}) // Now causes a TypeScript error\n```\n\n----------------------------------------\n\nTITLE: Import Statements in MedicinalProductIndication\nDESCRIPTION: Imports necessary components for rendering the documentation page, including Link, Tabs, TabItem from Docusaurus, a JSON definition for the resource, and custom components for displaying resource properties and search parameters.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/api/fhir/resources/medicinalproductindication.mdx#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport Link from '@docusaurus/Link';\nimport Tabs from '@theme/Tabs';\nimport TabItem from '@theme/TabItem';\nimport definition from '@site/static/data/resourceDefinitions/medicinalproductindication.json';\nimport { ResourcePropertiesTable, SearchParamsTable } from '@site/src/components/ResourceTables';\n```\n\n----------------------------------------\n\nTITLE: Importing React Components\nDESCRIPTION: Imports necessary React components from Docusaurus and the project's component library for rendering the Measure resource documentation page. This includes Link for creating hyperlinks, Tabs and TabItem for tabbed navigation, and custom components for displaying resource properties and search parameters.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/api/fhir/resources/measure.mdx#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Link from '@docusaurus/Link';\nimport Tabs from '@theme/Tabs';\nimport TabItem from '@theme/TabItem';\nimport definition from '@site/static/data/resourceDefinitions/measure.json';\nimport { ResourcePropertiesTable, SearchParamsTable } from '@site/src/components/ResourceTables';\n```\n\n----------------------------------------\n\nTITLE: Markdown Heading for Person Resource\nDESCRIPTION: Defines a top-level heading for the Person resource documentation page. The `sidebar_position` metadata controls the order in the sidebar menu.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/api/fhir/resources/person.mdx#_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: Person\nsidebar_position: 105\n---\n\n# Person\n```\n\n----------------------------------------\n\nTITLE: Remove Default Nginx Site\nDESCRIPTION: Removes the default Nginx site configuration.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/self-hosting/install-on-ubuntu.md#_snippet_19\n\nLANGUAGE: bash\nCODE:\n```\nsudo rm /etc/nginx/sites-enabled/default\n```\n\n----------------------------------------\n\nTITLE: Export Public Key (Shell)\nDESCRIPTION: This command extracts the public key from the private key file (private.pem) and saves it to a file named public.pem. The public key is in PEM format and is used to verify signatures by CloudFront.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/cdk/README.md#_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nopenssl rsa -in private.pem -outform PEM -pubout -out public.pem\n```\n\n----------------------------------------\n\nTITLE: Restart Redis Server\nDESCRIPTION: Restarts the Redis server for the configuration changes to take effect.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/self-hosting/install-on-ubuntu.md#_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nsudo systemctl restart redis-server\n```\n\n----------------------------------------\n\nTITLE: Importing ResourceTables components\nDESCRIPTION: Imports the ResourcePropertiesTable and SearchParamsTable components, likely custom components used to display the resource properties and search parameters in a tabular format.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/api/fhir/medplum/accesspolicy.mdx#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { ResourcePropertiesTable, SearchParamsTable } from '@site/src/components/ResourceTables';\n```\n\n----------------------------------------\n\nTITLE: Using the loading property from useMedplumContext\nDESCRIPTION: Shows how to use the `useMedplumContext` hook to access the `MedplumContext` and check the `loading` property.  This allows you to determine when the `MedplumClient` initialization is complete, enabling conditional rendering of loading indicators or application content.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/react-hooks/README.md#_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\nfunction MyComponent(): JSX.Element {\n  const { loading } = useMedplumContext();\n  return loading ? <Spinner /> : <div>Loaded!</div>;\n}\n```\n\n----------------------------------------\n\nTITLE: Folder Structure Shell Command\nDESCRIPTION: This snippet shows the folder structure of the Medplum monorepo, providing a high-level overview of the different packages and their responsibilities. It helps developers understand where to find specific code or components within the project.\nSOURCE: https://github.com/medplum/medplum/blob/main/README.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nmedplum/\n├── packages\n│   ├── agent           # On-premise agent\n│   ├── app             # Frontend web app\n│   ├── bot-layer       # AWS Lambda Layer for Bots\n│   ├── cdk             # AWS CDK infra as code\n│   ├── cli             # Command line interface\n│   ├── core            # Core shared library\n│   ├── definitions     # Data definitions\n│   ├── docs            # Documentation\n│   ├── examples        # Example code used in documentation\n│   ├── expo-polyfills  # Expo polyfills for MedplumClient compatibility\n│   ├── fhir-router     # FHIR URL router\n│   ├── fhirtypes       # FHIR TypeScript definitions\n│   ├── generator       # Code generator utilities\n│   ├── graphiql        # Preconfigured GraphiQL\n│   ├── hl7             # HL7 client and server\n│   ├── mock            # Mock FHIR data for testing\n│   ├── react           # React component library\n│   ├── react-hooks     # React hooks library\n│   └── server          # Backend API server\n└── scripts             # Helper bash scripts\n```\n\n----------------------------------------\n\nTITLE: Clone Repository Bash\nDESCRIPTION: Clones the specified repository and changes the current directory to the cloned repository directory. This is the first step in deploying the Terraform configuration.\nSOURCE: https://github.com/medplum/medplum/blob/main/terraform/gcp/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone <repository-url>\ncd <repository-directory>\n```\n\n----------------------------------------\n\nTITLE: Running the Medplum application in development mode\nDESCRIPTION: This command starts the Medplum Patient Intake Demo application in development mode.  This usually involves starting a local development server, enabling hot-reloading for code changes, and providing debugging tools. The application will be accessible at `http://localhost:3000/` by default.\nSOURCE: https://github.com/medplum/medplum/blob/main/examples/medplum-patient-intake-demo/README.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Token Grant without `openid` Scope Sample Response\nDESCRIPTION: Sample HTTP response (302 Found) from the `/oauth2/authorize` endpoint after a successful token grant without the `openid` scope. The response includes the `Location` header with the `redirect_uri`, `access_token`, `token_type`, `expires_in`, and `state` in the fragment.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/api/oauth/authorize.md#_snippet_5\n\nLANGUAGE: HTTP\nCODE:\n```\nHTTP/1.1 302 Found\nLocation: https://YOUR_APP/redirect_uri#access_token=ACCESS_TOKEN&token_type=bearer&expires_in=3600&state=STATE\n```\n\n----------------------------------------\n\nTITLE: Run the App with NPM\nDESCRIPTION: This command starts the Foo Medical application in development mode using Node Package Manager (NPM). It executes the script defined as `dev` in the `package.json` file, typically starting a development server.\nSOURCE: https://github.com/medplum/medplum/blob/main/examples/foomedical/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Copying environment variables using bash\nDESCRIPTION: This command copies the default environment variables from `.env.defaults` to a new file named `.env`. This allows users to customize the environment variables without modifying the original defaults.\nSOURCE: https://github.com/medplum/medplum/blob/main/examples/medplum-photon-integration/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncp .env.defaults .env\n```\n\n----------------------------------------\n\nTITLE: Importing AccessPolicy definition\nDESCRIPTION: Imports the JSON definition of the AccessPolicy resource from a static file. This definition contains the schema and search parameters for the resource.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/api/fhir/medplum/accesspolicy.mdx#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport definition from '@site/static/data/medplumDefinitions/accesspolicy.json';\n```\n\n----------------------------------------\n\nTITLE: JSON Definition Import (JavaScript)\nDESCRIPTION: This snippet imports a JSON file containing the definition of the Population resource. This definition is then used to dynamically generate the resource property table. The path `@site/static/data/datatypeDefinitions/population.json` indicates a file located in the Docusaurus static assets directory.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/api/fhir/datatypes/population.mdx#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport definition from '@site/static/data/datatypeDefinitions/population.json';\n```\n\n----------------------------------------\n\nTITLE: Import React Components\nDESCRIPTION: Imports necessary React components from Docusaurus and a local module for rendering tables.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/api/fhir/resources/careplan.mdx#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport Link from '@docusaurus/Link';\nimport Tabs from '@theme/Tabs';\nimport TabItem from '@theme/TabItem';\nimport definition from '@site/static/data/resourceDefinitions/careplan.json';\nimport { ResourcePropertiesTable, SearchParamsTable } from '@site/src/components/ResourceTables';\n```\n\n----------------------------------------\n\nTITLE: Diagnostic Catalog Diagram with Mermaid\nDESCRIPTION: This Mermaid code defines a graph that illustrates a diagnostic catalog structure.  It represents Services (Men's Health, Women's Health), Procedures (Testosterone Test, Electrolyte Panel, Estradiol E2 measurement), and Analytes (Free Testosterone Level, Sodium Level, Potassium Level, Chloride Level, Total CO2 Level, Estradiol E2 Level) and their relationships.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/careplans/diagnostic-catalog/diagnostic-catalog.mdx#_snippet_1\n\nLANGUAGE: mermaid\nCODE:\n```\ngraph TD\n    A((Men's Health)) --> TestProc(Testosterone Test)\n\t\tA --> ElecProc(Electrolyte Panel)\n\t\tZ((Women's Health)) -->  E2Proc(Estradiol E2 measurement)\n\t\tZ --> ElecProc\n\t\tTestProc --> E(Free Testosterone Level)\n\t\tE2Proc --> W(Estradiol E2 Level)\n\t\tElecProc --> F(Sodium Level)\n\t\tElecProc --> G(Potassium Level)\n\t\tElecProc --> H(Chloride Level)\n\t\tElecProc --> J(Total CO2 Level)\n\n\t\tsubgraph Services\n      A\n      Z\n    end\n\n    subgraph Procedures\n      TestProc\n      ElecProc\n      E2Proc\n    end\n\n\n    subgraph Analytes\n      E\n      F\n      G\n      H\n      J\n      W\n    end\n```\n\n----------------------------------------\n\nTITLE: Run the app npm\nDESCRIPTION: Starts the Medplum Live Chat Demo application in development mode using npm. This command typically launches a local development server and watches for file changes to automatically reload the application.\nSOURCE: https://github.com/medplum/medplum/blob/main/examples/medplum-live-chat-demo/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Displaying User Profile JSX\nDESCRIPTION: This JSX code displays the user's profile information using `getDisplayString` and includes a sign-out button. It assumes that the `profile` state variable is already set with the user's profile data.\nSOURCE: https://github.com/medplum/medplum/blob/main/examples/medplum-react-native-example/README.md#_snippet_9\n\nLANGUAGE: jsx\nCODE:\n```\n<>\n  <Text>Logged in as {getDisplayString(profile)}</Text>\n  <Button onPress={signOut} title=\"Sign out\" />\n</>\n```\n\n----------------------------------------\n\nTITLE: Querying ActivityDefinitions (cURL)\nDESCRIPTION: This code snippet uses cURL to query ActivityDefinitions with the `_include` directive. It sends an HTTP request to the FHIR server to retrieve the resources.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/careplans/diagnostic-catalog/diagnostic-catalog.mdx#_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\n{ExampleCode}\n```\n\n----------------------------------------\n\nTITLE: Install dependencies - npm\nDESCRIPTION: Installs the required Node.js dependencies for the Medplum WebSocket Subscription Demo project. This command ensures that all necessary libraries and packages are available for the application to run correctly.\nSOURCE: https://github.com/medplum/medplum/blob/main/examples/medplum-websocket-subscriptions-demo/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Importing React Components\nDESCRIPTION: Imports necessary React components from Docusaurus and custom components for rendering documentation.  This allows using Link, Tabs, TabItem from docusaurus and ResourceTables components for displaying resource properties and search parameters.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/api/fhir/resources/linkage.mdx#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport Link from '@docusaurus/Link';\nimport Tabs from '@theme/Tabs';\nimport TabItem from '@theme/TabItem';\nimport definition from '@site/static/data/resourceDefinitions/linkage.json';\nimport { ResourcePropertiesTable, SearchParamsTable } from '@site/src/components/ResourceTables';\n```\n\n----------------------------------------\n\nTITLE: Import Link Component in JavaScript\nDESCRIPTION: Imports the Link component from the @docusaurus/Link module. This component is used for creating hyperlinks within the documentation.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/api/fhir/resources/visionprescription.mdx#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport Link from '@docusaurus/Link';\n```\n\n----------------------------------------\n\nTITLE: Robots.txt Disallow All\nDESCRIPTION: This snippet configures the robots.txt file to disallow all user-agents from accessing the entire site.  This is achieved by setting 'Disallow: /', which blocks all paths.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/react/public/robots.txt#_snippet_0\n\nLANGUAGE: txt\nCODE:\n```\nUser-agent: *\nDisallow: /\n```\n\n----------------------------------------\n\nTITLE: Creating Medplum Test Database PLpgSQL\nDESCRIPTION: This snippet creates a test database named 'medplum_test' and grants all privileges on it to the 'medplum' user. This dedicated database is used for running tests and ensures a clean environment, preventing interference with the main 'medplum' database.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/server/README.md#_snippet_2\n\nLANGUAGE: PLpgSQL\nCODE:\n```\nCREATE DATABASE medplum_test;\nGRANT ALL PRIVILEGES ON DATABASE medplum_test TO medplum;\n```\n\n----------------------------------------\n\nTITLE: Order Creation Handler in TSX\nDESCRIPTION: This code snippet shows how to implement the order creation handler using the `createOrderBundle` function. It creates the FHIR resources for the order and then sends the lab order to Health Gorilla using the `sendLabOrderToHealthGorilla` function. Error handling for validation errors is also included.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/integration/health-gorilla/sending-orders.md#_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\nasync function handleOrderCreation() {\n  try {\n    const { serviceRequest } = await createOrderBundle();\n    await sendLabOrderToHealthGorilla(medplum, serviceRequest);\n  } catch (err) {\n    if (err instanceof LabOrderValidationError) {\n      // Handle validation errors\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: PlanDefinition Sample (SoA) in Typescript\nDESCRIPTION: This snippet refers to a sample PlanDefinition resource in Typescript, representing a Schedule of Assessments (SoA). It demonstrates how SoAs can be structured and represented using Medplum's FHIR-based data model. The code is located in the `covid19.ts` file in the `react` package of the Medplum project.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/src/pages/solutions/life-sciences.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nhttps://github.com/medplum/medplum/blob/main/packages/react/src/stories/covid19.ts#L704\n```\n\n----------------------------------------\n\nTITLE: Install dependencies Bash\nDESCRIPTION: This command uses npm (Node Package Manager) to install the project's dependencies, as defined in the `package.json` file. It ensures that all necessary libraries and tools are available for the application to run.\nSOURCE: https://github.com/medplum/medplum/blob/main/examples/medplum-valueset-selector/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Importing Resource Properties Table (JavaScript)\nDESCRIPTION: This snippet imports the `ResourcePropertiesTable` and `SearchParamsTable` component from the `@site/src/components/ResourceTables` module. This custom component is likely used to display the properties and search parameters of a FHIR resource in a tabular format.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/api/fhir/datatypes/usagecontext.mdx#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { ResourcePropertiesTable, SearchParamsTable } from '@site/src/components/ResourceTables';\n```\n\n----------------------------------------\n\nTITLE: Production Build with npm\nDESCRIPTION: This command builds the Medplum application for production deployment.  It typically involves tasks like minification, bundling, and optimization of the code to prepare it for a production environment.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/server/README.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Copy environment configuration - Bash\nDESCRIPTION: Copies the default environment configuration file to a local .env file, allowing for customization of environment variables. This step is necessary to configure the application with specific settings.\nSOURCE: https://github.com/medplum/medplum/blob/main/examples/medplum-websocket-subscriptions-demo/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncp .env.defaults .env\n```\n\n----------------------------------------\n\nTITLE: Importing UI Components (Docusaurus)\nDESCRIPTION: Imports React components from Docusaurus theming libraries for creating UI elements like links, tabs, and tables. These components are used to render the Expression StructureDefinition documentation.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/api/fhir/datatypes/expression.mdx#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport Link from '@docusaurus/Link';\nimport Tabs from '@theme/Tabs';\nimport TabItem from '@theme/TabItem';\nimport definition from '@site/static/data/datatypeDefinitions/expression.json';\nimport { ResourcePropertiesTable, SearchParamsTable } from '@site/src/components/ResourceTables';\n```\n\n----------------------------------------\n\nTITLE: Running Reinstall Script to Resolve Dependency Tree Error (Bash)\nDESCRIPTION: When encountering the \"Unable to resolve dependency tree\" error, it often indicates a peer dependency conflict. Running the `reinstall.sh` script is the first step to resolve this. The script cleans the environment and reinstalls dependencies with strict peer dependency checks.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/contributing/package-json.md#_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\n./scripts/reinstall.sh\n```\n\n----------------------------------------\n\nTITLE: Install Dependencies using npm\nDESCRIPTION: This command installs the necessary dependencies for the Medplum Provider application using npm (Node Package Manager). It reads the `package.json` file and downloads the specified packages into the `node_modules` directory.\nSOURCE: https://github.com/medplum/medplum/blob/main/examples/medplum-provider/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Starting Docusaurus Dev Server\nDESCRIPTION: This command starts a local development server using Docusaurus and opens a browser window. It allows for live reloading, so most changes are reflected without restarting the server. Requires Node.js and npm to be installed.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm run docusaurus start\n```\n\n----------------------------------------\n\nTITLE: Caddyfile Configuration\nDESCRIPTION: This snippet provides the `Caddyfile` configuration needed to set up a reverse proxy with Caddy for the Medplum API server and app, enabling HTTPS on localhost.  It listens on ports 8104 and 8106 and proxies requests to the underlying HTTP servers.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/server/src/oauth/README.md#_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nlocalhost:8104 {\n  reverse_proxy 127.0.0.1:8103\n  tls internal\n}\n\nlocalhost:8106 {\n  reverse_proxy 127.0.0.1:8105\n  tls internal\n}\n```\n\n----------------------------------------\n\nTITLE: Regenerating FHIR Resource Pages\nDESCRIPTION: This command regenerates the FHIR resource pages. This is typically only required in rare events. It navigates to the `packages/generator` directory and runs the `docs` script using npm. Requires Node.js and npm to be installed.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncd packages/generator\nnpm run docs\n```\n\n----------------------------------------\n\nTITLE: Updating Medplum App Deployment using CLI\nDESCRIPTION: This snippet shows the command-line instruction to update the Medplum app deployment after modifying the configuration file.  The command uses the Medplum CLI to update the application in a specified environment.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/auth/methods/google-auth.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpx medplum aws update-app <environment>\n```\n\n----------------------------------------\n\nTITLE: HTTP Request Duration Log\nDESCRIPTION: This log snippet shows the HTTP request durations during a database switchover, demonstrating a brief increase in latency followed by a return to normal. It helps illustrate the minimal impact on the user experience.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/blog/2024-11-14-zero-downtime-postgres-major-version-upgrade.md#_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nhttp_req_duration,1729645809,32.86\nhttp_req_duration,1729645811,40.64\nhttp_req_duration,1729645811,1082.12\nhttp_req_duration,1729645811,35.78\nhttp_req_duration,1729645812,33.79\n```\n\n----------------------------------------\n\nTITLE: Initializing Medplum project using NPM\nDESCRIPTION: This command initializes a new Medplum project. It prompts the user for the starter template, project name, and Medplum base URL.  It requires NPM to be installed.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/create-medplum/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm init medplum\n```\n\n----------------------------------------\n\nTITLE: SpecimenDefinition for Finger-prick Capillary Blood (TS)\nDESCRIPTION: Defines a SpecimenDefinition resource for Finger-prick Capillary Blood. This resource specifies the type of specimen required for the lab tests.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/careplans/diagnostic-catalog/diagnostic-catalog.mdx#_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\n{ExampleCode}\n```\n\n----------------------------------------\n\nTITLE: CDK Deploy Command (Bash)\nDESCRIPTION: This Bash command uses the AWS CDK CLI to deploy changes to the AWS infrastructure based on the configuration defined in the specified JSON config file (`my-config-file.json`).  It requires AWS CDK CLI to be installed, configured, and have appropriate IAM permissions to modify the infrastructure.\nSOURCE: https://github.com/medplum/medplum/blob/main/packages/docs/docs/self-hosting/datadog.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpx cdk deploy -c config=my-config-file.json\n```"
  }
]