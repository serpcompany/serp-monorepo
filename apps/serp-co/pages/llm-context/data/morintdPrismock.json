[
  {
    "owner": "morintd",
    "repo": "prismock",
    "content": "TITLE: Mocking PrismaClient in Jest Tests with TypeScript\nDESCRIPTION: Jest mock configuration to replace PrismaClient with PrismockClient in test environment.\nSOURCE: https://github.com/morintd/prismock/blob/master/README.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\njest.mock('@prisma/client', () => {\n  return {\n    ...jest.requireActual('@prisma/client'),\n    PrismaClient: jest.requireActual('prismock').PrismockClient,\n  };\n});\n```\n\n----------------------------------------\n\nTITLE: Mocking PrismaClient with Prismock in TypeScript\nDESCRIPTION: Code snippet to mock PrismaClient by re-exporting @prisma/client and replacing PrismaClient with PrismockClient.\nSOURCE: https://github.com/morintd/prismock/blob/master/README.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PrismockClient } from 'prismock';\n\nexport * from '@prisma/client';\nexport { PrismockClient as PrismaClient };\n```\n\n----------------------------------------\n\nTITLE: Mocking PrismaClient with Jest and PrismockClient\nDESCRIPTION: Example showing how to mock the PrismaClient using Jest's mock system and PrismockClient. This approach replaces the PrismaClient with PrismockClient while maintaining other exports from @prisma/client.\nSOURCE: https://github.com/morintd/prismock/blob/master/docs/generate-prismock-deprecated.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\njest.mock('@prisma/client', () => {\n  return {\n    ...jest.requireActual('@prisma/client'),\n    PrismaClient: jest.requireActual('prismock').PrismockClient,\n  };\n});\n```\n\n----------------------------------------\n\nTITLE: Using PrismockClient Manually in TypeScript\nDESCRIPTION: Example of manually instantiating PrismockClient and using it in a test or passing it to a test version of an app.\nSOURCE: https://github.com/morintd/prismock/blob/master/README.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PrismockClient } from 'prismock';\n\nimport { PrismaService } from './prisma.service';\n\nconst prismock = new PrismockClient();\nconst app = createApp(prismock);\n```\n\n----------------------------------------\n\nTITLE: Mocking Custom Path Prisma Client with Jest\nDESCRIPTION: Implementation of mocking a custom path Prisma client using jest.mock. This approach replaces the PrismaClient with Prismock while maintaining the actual Prisma types and functionality.\nSOURCE: https://github.com/morintd/prismock/blob/master/docs/using-custom-client-path.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createPrismock } from 'prismock';\n\njest.mock('./prisma/custom-client', () => {\n  const actual = jest.requireActual('./prisma/custom-client');\n  return {\n    ...actual,\n    PrismaClient: jest.requireActual('prismock').createPrismock(actual.Prisma),\n  };\n});\n```\n\n----------------------------------------\n\nTITLE: Accessing Internal Data with PrismockClient in TypeScript\nDESCRIPTION: Demonstrates how to use the getData method to access internal data managed by Prismock.\nSOURCE: https://github.com/morintd/prismock/blob/master/README.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst prismock = new PrismockClient();\nprismock.getData(); // { user: [] }\n```\n\n----------------------------------------\n\nTITLE: Resetting PrismockClient State in TypeScript\nDESCRIPTION: Shows how to use the reset method to restore Prismock to its original state.\nSOURCE: https://github.com/morintd/prismock/blob/master/README.md#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst prismock = new PrismockClient();\nprismock.reset(); // State of prismock back to its original\n```\n\n----------------------------------------\n\nTITLE: Direct Instantiation of Prismock with Custom Client Path\nDESCRIPTION: Alternative approach to using Prismock with a custom client path by directly instantiating the mock client. This method imports the Prisma namespace from the custom path and creates a Prismock instance for testing.\nSOURCE: https://github.com/morintd/prismock/blob/master/docs/using-custom-client-path.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createPrismock } from 'prismock';\nimport { Prisma } from './prisma/custom-client';\n\nimport { PrismaService } from './prisma.service';\n\nconst PrismockClient = createPrismock(Prisma);\nconst prismock = new PrismockClient();\nconst app = createApp(prismock);\n```\n\n----------------------------------------\n\nTITLE: Direct PrismockClient Usage\nDESCRIPTION: Example demonstrating how to use PrismockClient directly in code without mocking. This approach allows for direct instantiation of the mock client.\nSOURCE: https://github.com/morintd/prismock/blob/master/docs/generate-prismock-deprecated.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PrismockClient } from 'prismock';\n\nconst prismock = new PrismockClient();\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom structuredClone for Decimal.js Compatibility in JavaScript\nDESCRIPTION: This code snippet provides a workaround for using prismock with decimal.js. It creates a custom structuredClone function that properly handles Decimal types, avoiding the DataCloneError. This solution should be set up in the setupFilesAfterEnv configuration for Jest.\nSOURCE: https://github.com/morintd/prismock/blob/master/docs/use-with-decimal-js.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// Backup the original structuredClone function\nconst originalStructuredClone = structuredClone;\n\n// Custom structuredClone that handles Decimal types\nfunction customStructuredClone(input) {\n    const replacer = (key, value) => {\n        if (value instanceof Decimal) {\n            // Convert Decimal to a serializable form\n            return {type: 'Decimal', value: value.toString()};\n        }\n        return value;\n    };\n\n    const reviver = (key, value) => {\n        if (value && value.type === 'Decimal') {\n            // Convert back to Decimal\n            return new Decimal(value.value);\n        }\n        return value;\n    };\n\n    // Use JSON stringify and parse as an example of handling custom types\n    return originalStructuredClone(JSON.parse(JSON.stringify(input, replacer), reviver));\n}\n\n// Override global structuredClone with the custom function\nglobal.structuredClone = customStructuredClone;\n```\n\n----------------------------------------\n\nTITLE: Custom Prisma Client Generator Configuration\nDESCRIPTION: Prisma schema configuration that specifies a custom output path for the generated client. This directs the Prisma client to be generated in a custom directory rather than the default location.\nSOURCE: https://github.com/morintd/prismock/blob/master/docs/using-custom-client-path.md#2025-04-22_snippet_0\n\nLANGUAGE: prisma\nCODE:\n```\ngenerator client {\n  provider = \"prisma-client-js\"\n  output = \"./custom-client\"\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Prismock with npm in TypeScript/JavaScript\nDESCRIPTION: Command to install Prismock as a dev dependency using npm package manager.\nSOURCE: https://github.com/morintd/prismock/blob/master/README.md#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n$ npm add --save-dev prismock\n```\n\n----------------------------------------\n\nTITLE: Installing Prismock with Yarn in TypeScript/JavaScript\nDESCRIPTION: Command to install Prismock as a dev dependency using Yarn package manager.\nSOURCE: https://github.com/morintd/prismock/blob/master/README.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n$ yarn add -D prismock\n```"
  }
]