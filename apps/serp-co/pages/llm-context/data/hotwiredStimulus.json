[
  {
    "owner": "hotwired",
    "repo": "stimulus",
    "content": "TITLE: Defining Basic Stimulus Action in HTML\nDESCRIPTION: Shows how to define a basic action in a Stimulus controller using data-action and data-controller attributes to connect a button click to a controller method.\nSOURCE: https://github.com/hotwired/stimulus/blob/main/docs/reference/actions.md#2025-04-17_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div data-controller=\"gallery\">\n  <button data-action=\"click->gallery#next\">…</button>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Setting up Stimulus with Webpack Helpers\nDESCRIPTION: This snippet demonstrates how to initialize a Stimulus application using Webpack helpers for controller autoloading. It imports required dependencies, starts the application, and loads controllers from a specified context directory.\nSOURCE: https://github.com/hotwired/stimulus/blob/main/docs/handbook/07_installing_stimulus.md#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Application } from \"@hotwired/stimulus\"\nimport { definitionsFromContext } from \"@hotwired/stimulus-webpack-helpers\"\n\nwindow.Stimulus = Application.start()\nconst context = require.context(\"./controllers\", true, /\\.js$/)\nStimulus.load(definitionsFromContext(context))\n```\n\n----------------------------------------\n\nTITLE: Complete Content Loader Controller with Timer Management\nDESCRIPTION: The complete implementation of the content loader controller with asynchronous HTML loading, automatic refreshing at specified intervals, and proper resource cleanup when disconnected.\nSOURCE: https://github.com/hotwired/stimulus/blob/main/docs/handbook/06_working_with_external_resources.md#2025-04-17_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n// src/controllers/content_loader_controller.js\nimport { Controller } from \"@hotwired/stimulus\"\n\nexport default class extends Controller {\n  static values = { url: String, refreshInterval: Number }\n\n  connect() {\n    this.load()\n\n    if (this.hasRefreshIntervalValue) {\n      this.startRefreshing()\n    }\n  }\n\n  disconnect() {\n    this.stopRefreshing()\n  }\n\n  load() {\n    fetch(this.urlValue)\n      .then(response => response.text())\n      .then(html => this.element.innerHTML = html)\n  }\n\n  startRefreshing() {\n    this.refreshTimer = setInterval(() => {\n      this.load()\n    }, this.refreshIntervalValue)\n  }\n\n  stopRefreshing() {\n    if (this.refreshTimer) {\n      clearInterval(this.refreshTimer)\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining HTML Structure with Stimulus Attributes\nDESCRIPTION: HTML markup that demonstrates how to use Stimulus controller, target and action attributes to create interactive elements. This example sets up a greeting component with input, button, and output elements.\nSOURCE: https://github.com/hotwired/stimulus/blob/main/README.md#2025-04-17_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div data-controller=\"hello\">\n  <input data-hello-target=\"name\" type=\"text\">\n\n  <button data-action=\"click->hello#greet\">Greet</button>\n\n  <span data-hello-target=\"output\"></span>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Defining a Basic Stimulus Controller\nDESCRIPTION: Shows how to create a basic Stimulus controller by extending the Controller base class. This is the foundational structure for every controller in a Stimulus application.\nSOURCE: https://github.com/hotwired/stimulus/blob/main/docs/reference/controllers.md#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Controller } from \"@hotwired/stimulus\"\n\nexport default class extends Controller {\n  // …\n}\n```\n\n----------------------------------------\n\nTITLE: Inline Registration of a Stimulus Controller\nDESCRIPTION: Demonstrates how to register a controller class inline instead of importing it from a module, which can be useful for simple controllers.\nSOURCE: https://github.com/hotwired/stimulus/blob/main/docs/reference/controllers.md#2025-04-17_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Controller } from \"@hotwired/stimulus\"\n\napplication.register(\"reference\", class extends Controller {\n  // …\n})\n```\n\n----------------------------------------\n\nTITLE: Applying a Controller to an HTML Element\nDESCRIPTION: Demonstrates how to connect a Stimulus controller to an HTML element using the data-controller attribute with a reference identifier.\nSOURCE: https://github.com/hotwired/stimulus/blob/main/docs/reference/controllers.md#2025-04-17_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<div data-controller=\"reference\"></div>\n```\n\n----------------------------------------\n\nTITLE: Defining Target Attributes for Multiple Controllers in HTML\nDESCRIPTION: This example shows how to define target attributes for multiple Stimulus controllers in HTML. It demonstrates shared targets between 'search' and 'checkbox' controllers.\nSOURCE: https://github.com/hotwired/stimulus/blob/main/docs/reference/targets.md#2025-04-17_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<form data-controller=\"search checkbox\">\n  <input type=\"checkbox\" data-search-target=\"projects\" data-checkbox-target=\"input\">\n  <input type=\"checkbox\" data-search-target=\"messages\" data-checkbox-target=\"input\">\n  …\n</form>\n```\n\n----------------------------------------\n\nTITLE: Implementing connect() Lifecycle Callback in Stimulus Controller\nDESCRIPTION: This snippet demonstrates how to implement the connect() lifecycle callback in a Stimulus controller. The connect() method is called whenever the controller is connected to the DOM.\nSOURCE: https://github.com/hotwired/stimulus/blob/main/docs/reference/lifecycle_callbacks.md#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Controller } from \"@hotwired/stimulus\"\n\nexport default class extends Controller {\n  connect() {\n    // …\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Stimulus Controller\nDESCRIPTION: Initial setup of a Stimulus controller class extending the base Controller.\nSOURCE: https://github.com/hotwired/stimulus/blob/main/docs/handbook/02_hello_stimulus.md#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// src/controllers/hello_controller.js\nimport { Controller } from \"@hotwired/stimulus\"\n\nexport default class extends Controller {\n}\n```\n\n----------------------------------------\n\nTITLE: Using Event Shorthand Notation for Button Click\nDESCRIPTION: Shows how to use the shorthand notation for common element/event pairs, where the event name can be omitted for certain elements like buttons where click is the default event.\nSOURCE: https://github.com/hotwired/stimulus/blob/main/docs/reference/actions.md#2025-04-17_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<button data-action=\"gallery#next\">…</button>\n```\n\n----------------------------------------\n\nTITLE: Enhanced Slideshow Controller with Values\nDESCRIPTION: Improved version of the slideshow controller using Stimulus values for state management with DOM persistence.\nSOURCE: https://github.com/hotwired/stimulus/blob/main/docs/handbook/05_managing_state.md#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Controller } from \"@hotwired/stimulus\"\n\nexport default class extends Controller {\n  static targets = [ \"slide\" ]\n  static values = { index: Number }\n\n  next() {\n    this.indexValue++\n  }\n\n  previous() {\n    this.indexValue--\n  }\n\n  indexValueChanged() {\n    this.showCurrentSlide()\n  }\n\n  showCurrentSlide() {\n    this.slideTargets.forEach((element, index) => {\n      element.hidden = index !== this.indexValue\n    })\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Stimulus Controller for Greeting Functionality\nDESCRIPTION: JavaScript implementation of a Stimulus controller that interacts with the HTML structure above. This controller defines name and output targets and implements a greet method that updates the output with a personalized greeting.\nSOURCE: https://github.com/hotwired/stimulus/blob/main/README.md#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// hello_controller.js\nimport { Controller } from \"@hotwired/stimulus\"\n\nexport default class extends Controller {\n  static targets = [ \"name\", \"output\" ]\n\n  greet() {\n    this.outputTarget.textContent =\n      `Hello, ${this.nameTarget.value}!`\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining CSS Classes in a Stimulus Controller\nDESCRIPTION: JavaScript code showing how to define CSS classes by logical name in a Stimulus controller using the static classes array.\nSOURCE: https://github.com/hotwired/stimulus/blob/main/docs/reference/css_classes.md#2025-04-17_snippet_2\n\nLANGUAGE: js\nCODE:\n```\n// controllers/search_controller.js\nimport { Controller } from \"@hotwired/stimulus\"\n\nexport default class extends Controller {\n  static classes = [ \"loading\" ]\n\n  // …\n}\n```\n\n----------------------------------------\n\nTITLE: Dispatching Events from a Stimulus Controller\nDESCRIPTION: Demonstrates how to use the `dispatch` method to emit custom events from a Stimulus controller. The example shows a ClipboardController dispatching a 'copy' event with the content of a text input field.\nSOURCE: https://github.com/hotwired/stimulus/blob/main/docs/reference/controllers.md#2025-04-17_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nclass ClipboardController extends Controller {\n  static targets = [ \"source\" ]\n\n  copy() {\n    this.dispatch(\"copy\", { detail: { content: this.sourceTarget.value } })\n    navigator.clipboard.writeText(this.sourceTarget.value)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Clipboard Copy Functionality in Stimulus Controller\nDESCRIPTION: This JavaScript code implements the copy method in the Stimulus controller to copy text from the source target to the clipboard.\nSOURCE: https://github.com/hotwired/stimulus/blob/main/docs/handbook/03_building_something_real.md#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ncopy() {\n  navigator.clipboard.writeText(this.sourceTarget.value)\n}\n```\n\n----------------------------------------\n\nTITLE: Value Change Callback with Previous Value\nDESCRIPTION: Implementation of a change callback that includes access to both current and previous values.\nSOURCE: https://github.com/hotwired/stimulus/blob/main/docs/reference/values.md#2025-04-17_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nexport default class extends Controller {\n  static values = { url: String }\n\n  urlValueChanged(value, previousValue) {\n    /* … */\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Receiving Events in a Stimulus Controller\nDESCRIPTION: Example of how to receive and process dispatched events in another controller. The EffectsController's flash method extracts the content from the event detail object using destructuring.\nSOURCE: https://github.com/hotwired/stimulus/blob/main/docs/reference/controllers.md#2025-04-17_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nclass EffectsController extends Controller {\n  flash({ detail: { content } }) {\n    console.log(content) // 1234\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Clipboard Copy Feature with Stimulus in HTML\nDESCRIPTION: This snippet demonstrates how to implement a clipboard copy feature using Stimulus. It shows the HTML structure with data attributes that connect to a Stimulus controller. The example includes a source input field containing the text to be copied and a button that triggers the copy action.\nSOURCE: https://github.com/hotwired/stimulus/blob/main/docs/handbook/00_the_origin_of_stimulus.md#2025-04-17_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div data-controller=\"clipboard\">\n  PIN: <input data-clipboard-target=\"source\" type=\"text\" value=\"1234\" readonly>\n  <button data-action=\"clipboard#copy\">Copy to Clipboard</button>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Preventing Controller Registration with shouldLoad\nDESCRIPTION: Shows how to conditionally prevent a controller from loading based on environmental factors by overriding the static shouldLoad method.\nSOURCE: https://github.com/hotwired/stimulus/blob/main/docs/reference/controllers.md#2025-04-17_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nclass UnloadableController extends ApplicationController {\n  static get shouldLoad() {\n    return false\n  }\n}\n\n// This controller will not be loaded\napplication.register(\"unloadable\", UnloadableController)\n```\n\n----------------------------------------\n\nTITLE: Defining Target Attributes in HTML for Stimulus Controller\nDESCRIPTION: This snippet demonstrates how to define target attributes in HTML for a Stimulus controller. It shows the usage of data-controller and data-search-target attributes.\nSOURCE: https://github.com/hotwired/stimulus/blob/main/docs/reference/targets.md#2025-04-17_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div data-controller=\"search\">\n  <input type=\"text\" data-search-target=\"query\">\n  <div data-search-target=\"errorMessage\"></div>\n  <div data-search-target=\"results\"></div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Basic Content Loader Controller Implementation\nDESCRIPTION: Initial implementation of a Stimulus controller that fetches HTML from a URL and injects it into the controller's element. Uses the connect lifecycle method to trigger loading when the controller initializes.\nSOURCE: https://github.com/hotwired/stimulus/blob/main/docs/handbook/06_working_with_external_resources.md#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// src/controllers/content_loader_controller.js\nimport { Controller } from \"@hotwired/stimulus\"\n\nexport default class extends Controller {\n  static values = { url: String }\n\n  connect() {\n    this.load()\n  }\n\n  load() {\n    fetch(this.urlValue)\n      .then(response => response.text())\n      .then(html => this.element.innerHTML = html)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Negated Custom Action Options\nDESCRIPTION: Shows how to register custom action options that respond to negated values (prefixed with !), allowing for conditional event routing based on toggle state.\nSOURCE: https://github.com/hotwired/stimulus/blob/main/docs/reference/actions.md#2025-04-17_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Application } from \"@hotwired/stimulus\"\n\nconst application = Application.start()\n\napplication.registerActionOption(\"open\", ({ event, value }) => {\n  if (event.type == \"toggle\") {\n    return event.target.open == value\n  } else {\n    return true\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Defining Controller Element Type with TypeScript in Stimulus\nDESCRIPTION: Demonstrates how to override the default Element type for a controller by using TypeScript generics. This example shows specifying HTMLFormElement as the controller element type, which enables proper type checking for form-related operations.\nSOURCE: https://github.com/hotwired/stimulus/blob/main/docs/reference/using_typescript.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Controller } from \"@hotwired/stimulus\"\n\nexport default class MyController extends Controller<HTMLFormElement> {\n  submit() {\n    new FormData(this.element)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Refactored Stimulus Controller with Getter\nDESCRIPTION: Final controller implementation with a getter method for cleaner code organization.\nSOURCE: https://github.com/hotwired/stimulus/blob/main/docs/handbook/02_hello_stimulus.md#2025-04-17_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n// src/controllers/hello_controller.js\nimport { Controller } from \"@hotwired/stimulus\"\n\nexport default class extends Controller {\n  static targets = [ \"name\" ]\n\n  greet() {\n    console.log(`Hello, ${this.name}!`)\n  }\n\n  get name() {\n    return this.nameTarget.value\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: HTML with CSS Class Attributes for Stimulus Controller\nDESCRIPTION: Example of HTML implementing CSS class attributes using the data-[controller]-[logical-name]-class format.\nSOURCE: https://github.com/hotwired/stimulus/blob/main/docs/reference/css_classes.md#2025-04-17_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<form data-controller=\"search\"\n      data-search-loading-class=\"search--busy\">\n  <input data-action=\"search#loadResults\">\n</form>\n```\n\n----------------------------------------\n\nTITLE: Defining Value Properties with TypeScript in Stimulus\nDESCRIPTION: Shows how to define the types for Stimulus value properties using the TypeScript 'declare' keyword. This ensures type checking for value properties while avoiding overriding the existing Stimulus property implementation.\nSOURCE: https://github.com/hotwired/stimulus/blob/main/docs/reference/using_typescript.md#2025-04-17_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Controller } from \"@hotwired/stimulus\"\n\nexport default class MyController extends Controller {\n  static values = {\n    code: String\n  }\n\n  declare codeValue: string\n  declare readonly hasCodeValue: boolean\n}\n```\n\n----------------------------------------\n\nTITLE: Multiple Value Type Definitions in Stimulus\nDESCRIPTION: Example showing how to define multiple values of different types (String, Number, Object) in a Stimulus controller.\nSOURCE: https://github.com/hotwired/stimulus/blob/main/docs/reference/values.md#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nexport default class extends Controller {\n  static values = {\n    url: String,\n    interval: Number,\n    params: Object\n  }\n\n  // …\n}\n```\n\n----------------------------------------\n\nTITLE: Adding class to button element for conditional display (HTML)\nDESCRIPTION: HTML markup adding a CSS class to a button that will be conditionally displayed based on clipboard API support. This class will be targeted by CSS to control visibility.\nSOURCE: https://github.com/hotwired/stimulus/blob/main/docs/handbook/04_designing_for_resilience.md#2025-04-17_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n  <button data-action=\"clipboard#copy\" class=\"clipboard-button\">Copy to Clipboard</button>\n```\n\n----------------------------------------\n\nTITLE: Disconnect Method for Resource Cleanup\nDESCRIPTION: Lifecycle method that ensures the refresh timer is stopped when the controller disconnects from the DOM, properly releasing external resources.\nSOURCE: https://github.com/hotwired/stimulus/blob/main/docs/handbook/06_working_with_external_resources.md#2025-04-17_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n  disconnect() {\n    this.stopRefreshing()\n  }\n```\n\n----------------------------------------\n\nTITLE: Defining Target Names in Stimulus Controller Class\nDESCRIPTION: This JavaScript snippet shows how to define target names in a Stimulus controller class using the static targets array. It sets up targets for query, errorMessage, and results.\nSOURCE: https://github.com/hotwired/stimulus/blob/main/docs/reference/targets.md#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// controllers/search_controller.js\nimport { Controller } from \"@hotwired/stimulus\"\n\nexport default class extends Controller {\n  static targets = [ \"query\", \"errorMessage\", \"results\" ]\n  // …\n}\n```\n\n----------------------------------------\n\nTITLE: Avoiding Event-Based Action Names in Stimulus.js HTML\nDESCRIPTION: An example of a naming convention to avoid when creating Stimulus.js actions. This approach simply repeats the event name, making it less descriptive of the actual behavior.\nSOURCE: https://github.com/hotwired/stimulus/blob/main/docs/reference/actions.md#2025-04-17_snippet_11\n\nLANGUAGE: html\nCODE:\n```\n<button data-action=\"click->profile#click\">Don't</button>\n```\n\n----------------------------------------\n\nTITLE: HTML Element with Multiple Actions and Parameters in Stimulus.js\nDESCRIPTION: Example of a button that triggers multiple controller actions and passes various typed parameters. This demonstrates how to structure data attributes for parameter passing in Stimulus.js.\nSOURCE: https://github.com/hotwired/stimulus/blob/main/docs/reference/actions.md#2025-04-17_snippet_13\n\nLANGUAGE: html\nCODE:\n```\n<div data-controller=\"item spinner\">\n  <button data-action=\"item#upvote spinner#start\" \n    data-item-id-param=\"12345\" \n    data-item-url-param=\"/votes\"\n    data-item-payload-param='{\"value\":\"1234567\"}' \n    data-item-active-param=\"true\">…</button>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Stimulus Controller with Action Method\nDESCRIPTION: Controller implementation with greet() action method to handle button clicks.\nSOURCE: https://github.com/hotwired/stimulus/blob/main/docs/handbook/02_hello_stimulus.md#2025-04-17_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n// src/controllers/hello_controller.js\nimport { Controller } from \"@hotwired/stimulus\"\n\nexport default class extends Controller {\n  greet() {\n    console.log(\"Hello, Stimulus!\", this.element)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Cancellable Events in Stimulus\nDESCRIPTION: Demonstrates how to make dispatched events cancellable, allowing other controllers to prevent default behavior. The example shows a ClipboardController that checks if its event was prevented before proceeding.\nSOURCE: https://github.com/hotwired/stimulus/blob/main/docs/reference/controllers.md#2025-04-17_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nclass ClipboardController extends Controller {\n  static targets = [ \"source\" ]\n\n  copy() {\n    const event = this.dispatch(\"copy\", { cancelable: true })\n    if (event.defaultPrevented) return\n    navigator.clipboard.writeText(this.sourceTarget.value)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating HTML Structure for Slideshow Controller\nDESCRIPTION: HTML markup defining a slideshow with navigation buttons and slide elements using Stimulus data attributes for controller binding, actions, and targets.\nSOURCE: https://github.com/hotwired/stimulus/blob/main/docs/handbook/05_managing_state.md#2025-04-17_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div data-controller=\"slideshow\">\n  <button data-action=\"slideshow#previous\"> ← </button>\n  <button data-action=\"slideshow#next\"> → </button>\n\n  <div data-slideshow-target=\"slide\">🐵</div>\n  <div data-slideshow-target=\"slide\">🙈</div>\n  <div data-slideshow-target=\"slide\">🙉</div>\n  <div data-slideshow-target=\"slide\">🙊</div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Custom Error Handling for Stimulus\nDESCRIPTION: This example shows how to override Stimulus' default error handling by implementing a custom handleError method. It includes logging a warning message and sending the error to a tracking system.\nSOURCE: https://github.com/hotwired/stimulus/blob/main/docs/handbook/07_installing_stimulus.md#2025-04-17_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// src/application.js\nimport { Application } from \"@hotwired/stimulus\"\nwindow.Stimulus = Application.start()\n\nStimulus.handleError = (error, message, detail) => {\n  console.warn(message, detail)\n  ErrorTrackingSystem.captureException(error)\n}\n```\n\n----------------------------------------\n\nTITLE: Value Change Callback Implementation\nDESCRIPTION: Example of implementing a change callback method for a value in a Stimulus controller. Shows how to respond to value changes.\nSOURCE: https://github.com/hotwired/stimulus/blob/main/docs/reference/values.md#2025-04-17_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nexport default class extends Controller {\n  static values = { url: String }\n\n  urlValueChanged() {\n    fetch(this.urlValue).then(/* … */)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Optional Targets in Stimulus Controller\nDESCRIPTION: This JavaScript code demonstrates how to handle optional targets in a Stimulus controller. It checks for the existence of a 'results' target before attempting to use it.\nSOURCE: https://github.com/hotwired/stimulus/blob/main/docs/reference/targets.md#2025-04-17_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nif (this.hasResultsTarget) {\n  this.resultsTarget.innerHTML = \"…\"\n}\n```\n\n----------------------------------------\n\nTITLE: Invoking Functions on Outlet Controllers\nDESCRIPTION: These code snippets demonstrate invoking functions defined in outlet controllers. The chat controller accesses and calls methods on each connected user-status outlet controller.\nSOURCE: https://github.com/hotwired/stimulus/blob/main/docs/reference/outlets.md#2025-04-17_snippet_4\n\nLANGUAGE: js\nCODE:\n```\n// user_status_controller.js\n\nexport default class extends Controller {\n  markAsSelected(event) {\n    // ...\n  }\n}\n```\n\nLANGUAGE: js\nCODE:\n```\n// chat_controller.js\n\nexport default class extends Controller {\n  static outlets = [ \"user-status\" ]\n\n  selectAll(event) {\n    this.userStatusOutlets.forEach(status => status.markAsSelected(event))\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: HTML Example for Window-Level Event Listening\nDESCRIPTION: Shows how to listen for events at the window level when the receiving controller is not a parent of the emitting controller. This allows communication between controllers in different DOM branches.\nSOURCE: https://github.com/hotwired/stimulus/blob/main/docs/reference/controllers.md#2025-04-17_snippet_13\n\nLANGUAGE: html\nCODE:\n```\n<div data-action=\"clipboard:copy@window->effects#flash\">\n```\n\n----------------------------------------\n\nTITLE: Using Stimulus Without a Build System in HTML\nDESCRIPTION: This example demonstrates how to use Stimulus directly in HTML with a module script tag, without any build system. It imports Stimulus from a CDN, initializes the application, and defines an inline controller class.\nSOURCE: https://github.com/hotwired/stimulus/blob/main/docs/handbook/07_installing_stimulus.md#2025-04-17_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<!doctype html>\n<html>\n<head>\n  <meta charset=\"utf-8\">\n  <script type=\"module\">\n    import { Application, Controller } from \"https://unpkg.com/@hotwired/stimulus/dist/stimulus.js\"\n    window.Stimulus = Application.start()\n\n    Stimulus.register(\"hello\", class extends Controller {\n      static targets = [ \"name\" ]\n\n      connect() {\n      }\n    })\n  </script>\n</head>\n<body>\n  <div data-controller=\"hello\">\n    <input data-hello-target=\"name\" type=\"text\">\n    …\n  </div>\n</body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Implementing Target Callbacks in Stimulus Controller\nDESCRIPTION: This JavaScript snippet shows how to implement target element callbacks in a Stimulus controller. It defines methods for when item targets are connected or disconnected.\nSOURCE: https://github.com/hotwired/stimulus/blob/main/docs/reference/targets.md#2025-04-17_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nexport default class extends Controller {\n  static targets = [ \"item\" ]\n\n  itemTargetConnected(element) {\n    this.sortElements(this.itemTargets)\n  }\n\n  itemTargetDisconnected(element) {\n    this.sortElements(this.itemTargets)\n  }\n\n  // Private\n  sortElements(itemTargets) { /* ... */ }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Action Parameters in Stimulus.js Controllers\nDESCRIPTION: Demonstrates how to access parameters in controller actions. The example shows that parameters are only passed to the controller specified in the parameter attribute prefix, with automatic type casting for different data types.\nSOURCE: https://github.com/hotwired/stimulus/blob/main/docs/reference/actions.md#2025-04-17_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\n// ItemController\nupvote(event) {\n  // { id: 12345, url: \"/votes\", active: true, payload: { value: 1234567 } }\n  console.log(event.params) \n}\n\n// SpinnerController\nstart(event) {\n  // {}\n  console.log(event.params) \n}\n```\n\n----------------------------------------\n\nTITLE: Adding data attributes for progressive enhancement in HTML (Stimulus)\nDESCRIPTION: HTML markup showing how to add data attributes to enable progressive enhancement in a Stimulus controller. The data-clipboard-supported-class attribute will be used to show the button only when clipboard functionality is supported.\nSOURCE: https://github.com/hotwired/stimulus/blob/main/docs/handbook/04_designing_for_resilience.md#2025-04-17_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n  <div data-controller=\"clipboard\" data-clipboard-supported-class=\"clipboard--supported\">\n```\n\n----------------------------------------\n\nTITLE: Updated Connect Method with Conditional Refresh\nDESCRIPTION: Enhanced connect method that loads content immediately and conditionally starts the refresh timer if a refresh interval value has been provided in the HTML.\nSOURCE: https://github.com/hotwired/stimulus/blob/main/docs/handbook/06_working_with_external_resources.md#2025-04-17_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n  connect() {\n    this.load()\n\n    if (this.hasRefreshIntervalValue) {\n      this.startRefreshing()\n    }\n  }\n```\n\n----------------------------------------\n\nTITLE: Feature detection for clipboard API in Stimulus controller (JavaScript)\nDESCRIPTION: JavaScript implementation of the connect() lifecycle method in a Stimulus controller that tests for clipboard API support and conditionally adds a CSS class to show the copy button only when supported.\nSOURCE: https://github.com/hotwired/stimulus/blob/main/docs/handbook/04_designing_for_resilience.md#2025-04-17_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n  connect() {\n    if (\"clipboard\" in navigator) {\n      this.element.classList.add(this.supportedClass);\n    }\n  }\n```\n\n----------------------------------------\n\nTITLE: Default Values in Stimulus Controller\nDESCRIPTION: Example showing how to define default values for controller properties using the expanded type and default syntax.\nSOURCE: https://github.com/hotwired/stimulus/blob/main/docs/reference/values.md#2025-04-17_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nexport default class extends Controller {\n  static values = {\n    url: { type: String, default: '/bill' },\n    interval: { type: Number, default: 5 },\n    clicked: Boolean\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining HTML Data Attributes for Stimulus Controller\nDESCRIPTION: Example of setting up a data attribute value on a Stimulus controller element. Shows how to properly structure the data-controller and value attributes.\nSOURCE: https://github.com/hotwired/stimulus/blob/main/docs/reference/values.md#2025-04-17_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div data-controller=\"loader\" data-loader-url-value=\"/messages\">\n</div>\n```\n\n----------------------------------------\n\nTITLE: Destructuring Parameters Object in Stimulus.js Actions\nDESCRIPTION: Shows how to use JavaScript destructuring to directly access the params object without needing the entire event object, simplifying the controller action method signature.\nSOURCE: https://github.com/hotwired/stimulus/blob/main/docs/reference/actions.md#2025-04-17_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nupvote({ params }) {\n  // { id: 12345, url: \"/votes\", active: true, payload: { value: 1234567 } }\n  console.log(params) \n}\n```\n\n----------------------------------------\n\nTITLE: Basic Stimulus Controller with Value Definition\nDESCRIPTION: Basic implementation of a Stimulus controller that defines a URL value and uses it in a fetch request. Demonstrates value definition and usage.\nSOURCE: https://github.com/hotwired/stimulus/blob/main/docs/reference/values.md#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// controllers/loader_controller.js\nimport { Controller } from \"@hotwired/stimulus\"\n\nexport default class extends Controller {\n  static values = {\n    url: String\n  }\n\n  connect() {\n    fetch(this.urlValue).then(/* … */)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing HTML Structure for Copy to Clipboard Functionality\nDESCRIPTION: This HTML snippet sets up the basic structure for a PIN display with a copy button, including data attributes for Stimulus integration.\nSOURCE: https://github.com/hotwired/stimulus/blob/main/docs/handbook/03_building_something_real.md#2025-04-17_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div data-controller=\"clipboard\">\n  PIN: <input data-clipboard-target=\"source\" type=\"text\" value=\"1234\" readonly>\n  <button data-action=\"clipboard#copy\">Copy to Clipboard</button>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Overriding Stimulus Default Attributes\nDESCRIPTION: This code shows how to override Stimulus' default data attributes when they conflict with other libraries. It creates a custom schema that modifies the default action attribute while preserving other defaults.\nSOURCE: https://github.com/hotwired/stimulus/blob/main/docs/handbook/07_installing_stimulus.md#2025-04-17_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// src/application.js\nimport { Application, defaultSchema } from \"@hotwired/stimulus\"\n\nconst customSchema = {\n  ...defaultSchema,\n  actionAttribute: 'data-stimulus-action'\n}\n\nwindow.Stimulus = Application.start(document.documentElement, customSchema);\n```\n\n----------------------------------------\n\nTITLE: Accessing and Using Nested Outlet Controllers\nDESCRIPTION: This JavaScript example demonstrates how to properly reference nested Stimulus controller outlets by removing namespace delimiters in the property name.\nSOURCE: https://github.com/hotwired/stimulus/blob/main/docs/reference/outlets.md#2025-04-17_snippet_3\n\nLANGUAGE: js\nCODE:\n```\n// chat_controller.js\n\nexport default class extends Controller {\n  static outlets = [ \"admin--user-status\" ]\n\n  selectAll(event) {\n    // returns undefined\n    this.admin__UserStatusOutlets\n\n    // returns controller reference\n    this.adminUserStatusOutlets\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Listening for Global Window Events\nDESCRIPTION: Demonstrates how to listen for events on the global window object by appending @window to the event name in the action descriptor.\nSOURCE: https://github.com/hotwired/stimulus/blob/main/docs/reference/actions.md#2025-04-17_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<div data-controller=\"gallery\"\n     data-action=\"resize@window->gallery#layout\">\n</div>\n```\n\n----------------------------------------\n\nTITLE: Improved Timer with Resource Tracking\nDESCRIPTION: Enhanced startRefreshing method that stores a reference to the timer, allowing it to be properly canceled later when the controller disconnects.\nSOURCE: https://github.com/hotwired/stimulus/blob/main/docs/handbook/06_working_with_external_resources.md#2025-04-17_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n  startRefreshing() {\n    this.refreshTimer = setInterval(() => {\n      this.load()\n    }, this.refreshIntervalValue)\n  }\n```\n\n----------------------------------------\n\nTITLE: Basic Outlet HTML Attribute Example\nDESCRIPTION: A simple HTML example showing how to connect a chat controller to user-status elements as outlets using a CSS class selector.\nSOURCE: https://github.com/hotwired/stimulus/blob/main/docs/reference/outlets.md#2025-04-17_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<div data-controller=\"chat\" data-chat-user-status-outlet=\".online-user\"></div>\n```\n\n----------------------------------------\n\nTITLE: Applying Multiple Controllers to a Single Element\nDESCRIPTION: Shows how to attach multiple controllers to a single HTML element by using a space-separated list of identifiers in the data-controller attribute.\nSOURCE: https://github.com/hotwired/stimulus/blob/main/docs/reference/controllers.md#2025-04-17_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<div data-controller=\"clipboard list-item\"></div>\n```\n\n----------------------------------------\n\nTITLE: Defining Outlets in a Stimulus Controller\nDESCRIPTION: This JavaScript code shows how to define outlets in a Stimulus controller class. It demonstrates declaring outlet dependencies and accessing outlet controllers through the generated properties.\nSOURCE: https://github.com/hotwired/stimulus/blob/main/docs/reference/outlets.md#2025-04-17_snippet_2\n\nLANGUAGE: js\nCODE:\n```\n// chat_controller.js\n\nexport default class extends Controller {\n  static outlets = [ \"user-status\" ]\n\n  connect () {\n    this.userStatusOutlets.forEach(status => ...)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using CSS Class Properties in a Stimulus Controller\nDESCRIPTION: JavaScript implementation showing how to use the singular CSS class property to add a loading class to an element.\nSOURCE: https://github.com/hotwired/stimulus/blob/main/docs/reference/css_classes.md#2025-04-17_snippet_5\n\nLANGUAGE: js\nCODE:\n```\nexport default class extends Controller {\n  static classes = [ \"loading\" ]\n\n  loadResults() {\n    this.element.classList.add(this.loadingClass)\n\n    fetch(/* … */)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Auto-Refresh Timer Functionality\nDESCRIPTION: Method to start periodically refreshing content based on a configured interval value. It sets up a timer using setInterval to repeatedly call the load method.\nSOURCE: https://github.com/hotwired/stimulus/blob/main/docs/handbook/06_working_with_external_resources.md#2025-04-17_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nexport default class extends Controller {\n  static values = { url: String, refreshInterval: Number }\n\n  startRefreshing() {\n    setInterval(() => {\n      this.load()\n    }, this.refreshIntervalValue)\n  }\n\n  // …\n}\n```\n\n----------------------------------------\n\nTITLE: Nested Destructuring of Specific Parameters in Stimulus.js Actions\nDESCRIPTION: Demonstrates advanced destructuring to directly access specific parameters within the params object. This approach is useful when only certain parameters are needed for a particular action.\nSOURCE: https://github.com/hotwired/stimulus/blob/main/docs/reference/actions.md#2025-04-17_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nupvote({ params: { id, url } }) {\n  console.log(id) // 12345\n  console.log(url) // \"/votes\"\n}\n```\n\n----------------------------------------\n\nTITLE: Stimulus Controller with Target Implementation\nDESCRIPTION: Controller implementation using targets to access and read input field value.\nSOURCE: https://github.com/hotwired/stimulus/blob/main/docs/handbook/02_hello_stimulus.md#2025-04-17_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n// src/controllers/hello_controller.js\nimport { Controller } from \"@hotwired/stimulus\"\n\nexport default class extends Controller {\n  static targets = [ \"name\" ]\n\n  greet() {\n    const element = this.nameTarget\n    const name = element.value\n    console.log(`Hello, ${name}!`)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: HTML with Stimulus Action\nDESCRIPTION: HTML markup with data-action attribute to connect button clicks to the controller's greet method.\nSOURCE: https://github.com/hotwired/stimulus/blob/main/docs/handbook/02_hello_stimulus.md#2025-04-17_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<div data-controller=\"hello\">\n  <input type=\"text\">\n  <button data-action=\"click->hello#greet\">Greet</button>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Creating a Controller Scope in HTML\nDESCRIPTION: Shows how a controller's scope includes its element and all children. The div and h1 are in the reference controller's scope, but the main element is not.\nSOURCE: https://github.com/hotwired/stimulus/blob/main/docs/reference/controllers.md#2025-04-17_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<main>\n  <div data-controller=\"reference\">\n    <h1>Reference</h1>\n  </div>\n</main>\n```\n\n----------------------------------------\n\nTITLE: HTML with Stimulus Target\nDESCRIPTION: HTML markup with data-hello-target attribute to mark the input element as a target.\nSOURCE: https://github.com/hotwired/stimulus/blob/main/docs/handbook/02_hello_stimulus.md#2025-04-17_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<div data-controller=\"hello\">\n  <input data-hello-target=\"name\" type=\"text\">\n  <button data-action=\"click->hello#greet\">Greet</button>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Applying the Same Controller to Multiple Elements\nDESCRIPTION: Demonstrates applying the same controller to multiple elements, where each element gets its own instance of the controller class.\nSOURCE: https://github.com/hotwired/stimulus/blob/main/docs/reference/controllers.md#2025-04-17_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<ul>\n  <li data-controller=\"list-item\">One</li>\n  <li data-controller=\"list-item\">Two</li>\n  <li data-controller=\"list-item\">Three</li>\n</ul>\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Action Options\nDESCRIPTION: Demonstrates how to register custom action options to conditionally route events based on specific conditions, in this case toggling a details element.\nSOURCE: https://github.com/hotwired/stimulus/blob/main/docs/reference/actions.md#2025-04-17_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Application } from \"@hotwired/stimulus\"\n\nconst application = Application.start()\n\napplication.registerActionOption(\"open\", ({ event }) => {\n  if (event.type == \"toggle\") {\n    return event.target.open == true\n  } else {\n    return true\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Manually Registering a Controller by Importing\nDESCRIPTION: Shows how to manually register a controller class with an identifier by first importing the class and then calling the Application#register method.\nSOURCE: https://github.com/hotwired/stimulus/blob/main/docs/reference/controllers.md#2025-04-17_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport ReferenceController from \"./controllers/reference_controller\"\n\napplication.register(\"reference\", ReferenceController)\n```\n\n----------------------------------------\n\nTITLE: Using Action Options for Event Listener Configuration\nDESCRIPTION: Shows how to use action options to configure event listener behavior, such as controlling event propagation and using capture phase.\nSOURCE: https://github.com/hotwired/stimulus/blob/main/docs/reference/actions.md#2025-04-17_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<div data-controller=\"gallery\"\n     data-action=\"scroll->gallery#layout:!passive\">\n  <img data-action=\"click->gallery#open:capture\">\n```\n\n----------------------------------------\n\nTITLE: Triggering Behavior After Controller Registration\nDESCRIPTION: Demonstrates how to trigger behavior once a controller has been registered using the static afterLoad method, which is useful for initialization tasks.\nSOURCE: https://github.com/hotwired/stimulus/blob/main/docs/reference/controllers.md#2025-04-17_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nclass SpinnerButton extends Controller {\n  static legacySelector = \".legacy-spinner-button\"\n\n  static afterLoad(identifier, application) {\n    // use the application instance to read the configured 'data-controller' attribute\n    const { controllerAttribute } = application.schema\n\n    // update any legacy buttons with the controller's registered identifier\n    const updateLegacySpinners = () => {\n      document.querySelector(this.legacySelector).forEach((element) => {\n        element.setAttribute(controllerAttribute, identifier)\n      })\n    }\n\n    // called as soon as registered so DOM may not have loaded yet\n    if (document.readyState == \"loading\") {\n      document.addEventListener(\"DOMContentLoaded\", updateLegacySpinners)\n    } else {\n      updateLegacySpinners()\n    }\n  }\n}\n\n// This controller will update any legacy spinner buttons to use the controller\napplication.register(\"spinner-button\", SpinnerButton)\n```\n\n----------------------------------------\n\nTITLE: Preventing Default Behavior in Clipboard Copy Action\nDESCRIPTION: This JavaScript code prevents the default behavior when copying to clipboard, useful for when the action is on a link element.\nSOURCE: https://github.com/hotwired/stimulus/blob/main/docs/handbook/03_building_something_real.md#2025-04-17_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\ncopy(event) {\n  event.preventDefault()\n  navigator.clipboard.writeText(this.sourceTarget.value)\n}\n```\n\n----------------------------------------\n\nTITLE: HTML Setup for Cross-Controller Communication\nDESCRIPTION: Shows the HTML structure needed to connect multiple controllers and route events between them. This example sets up a clipboard functionality with effects triggered by the clipboard's copy action.\nSOURCE: https://github.com/hotwired/stimulus/blob/main/docs/reference/controllers.md#2025-04-17_snippet_11\n\nLANGUAGE: html\nCODE:\n```\n<div data-controller=\"clipboard effects\" data-action=\"clipboard:copy->effects#flash\">\n  PIN: <input data-clipboard-target=\"source\" type=\"text\" value=\"1234\" readonly>\n  <button data-action=\"clipboard#copy\">Copy to Clipboard</button>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Implementing Nested Controller Scopes\nDESCRIPTION: Demonstrates how controllers maintain separate scopes when nested. The parent controller only has access to targets in its direct scope, not those in the child controller's scope.\nSOURCE: https://github.com/hotwired/stimulus/blob/main/docs/reference/controllers.md#2025-04-17_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<ul id=\"parent\" data-controller=\"list\">\n  <li data-list-target=\"item\">One</li>\n  <li data-list-target=\"item\">Two</li>\n  <li>\n    <ul id=\"child\" data-controller=\"list\">\n      <li data-list-target=\"item\">I am</li>\n      <li data-list-target=\"item\">a nested list</li>\n    </ul>\n  </li>\n</ul>\n```\n\n----------------------------------------\n\nTITLE: Defining Target Properties with TypeScript in Stimulus\nDESCRIPTION: Demonstrates how to define types for Stimulus target properties. This example uses the 'declare' keyword to specify that inputTarget is of type HTMLInputElement, providing proper type checking for input-related operations.\nSOURCE: https://github.com/hotwired/stimulus/blob/main/docs/reference/using_typescript.md#2025-04-17_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Controller } from \"@hotwired/stimulus\"\n\nexport default class MyController extends Controller {\n  static targets = [ \"input\" ]\n\n  declare readonly hasInputTarget: boolean\n  declare readonly inputTarget: HTMLInputElement\n  declare readonly inputTargets: HTMLInputElement[]\n}\n```\n\n----------------------------------------\n\nTITLE: Preventing Default Behavior in Event Receivers\nDESCRIPTION: Shows how a receiving controller can prevent the default behavior of a dispatched event using preventDefault(). This works in conjunction with cancellable events from other controllers.\nSOURCE: https://github.com/hotwired/stimulus/blob/main/docs/reference/controllers.md#2025-04-17_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nclass EffectsController extends Controller {\n  flash(event) {\n    // this will prevent the default behaviour as determined by the dispatched event\n    event.preventDefault()\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Properties in Stimulus Controllers with TypeScript\nDESCRIPTION: Shows how to define custom properties on a Stimulus controller using standard TypeScript syntax. This example defines a container property of type HTMLElement that can be used within the controller.\nSOURCE: https://github.com/hotwired/stimulus/blob/main/docs/reference/using_typescript.md#2025-04-17_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Controller } from \"@hotwired/stimulus\"\n\nexport default class MyController extends Controller {\n  container: HTMLElement\n}\n```\n\n----------------------------------------\n\nTITLE: Action with Parameters to Load Different Content\nDESCRIPTION: Modified load action that uses parameters from the triggering element instead of controller values, enabling dynamic content loading from different sources.\nSOURCE: https://github.com/hotwired/stimulus/blob/main/docs/handbook/06_working_with_external_resources.md#2025-04-17_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Controller } from \"@hotwired/stimulus\"\n\nexport default class extends Controller {\n  load({ params }) {\n    fetch(params.url)\n      .then(response => response.text())\n      .then(html => this.element.innerHTML = html)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Camel Case Target Names in Stimulus\nDESCRIPTION: This example demonstrates the correct naming convention for Stimulus targets using camelCase. It shows both HTML attribute and JavaScript class definition.\nSOURCE: https://github.com/hotwired/stimulus/blob/main/docs/reference/targets.md#2025-04-17_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<span data-search-target=\"camelCase\"></span>\n<span data-search-target=\"do-not-do-this\"></span>\n```\n\nLANGUAGE: javascript\nCODE:\n```\nexport default class extends Controller {\n  static targets = [ \"camelCase\" ]\n}\n```\n\n----------------------------------------\n\nTITLE: HTML with Stimulus Controller Connection\nDESCRIPTION: HTML markup with data-controller attribute to connect the DOM element to the Stimulus controller.\nSOURCE: https://github.com/hotwired/stimulus/blob/main/docs/handbook/02_hello_stimulus.md#2025-04-17_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<div data-controller=\"hello\">\n  <input type=\"text\">\n  <button>Greet</button>\n</div>\n```\n\n----------------------------------------\n\nTITLE: HTML with Multiple CSS Classes for a Logical Name\nDESCRIPTION: Example showing how to specify multiple CSS classes for a single logical name in a Stimulus controller.\nSOURCE: https://github.com/hotwired/stimulus/blob/main/docs/reference/css_classes.md#2025-04-17_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<form data-controller=\"search\"\n      data-search-loading-class=\"bg-gray-500 animate-spinner cursor-busy\">\n  <input data-action=\"search#loadResults\">\n</form>\n```\n\n----------------------------------------\n\nTITLE: Defining Controller Elements with Outlets in HTML\nDESCRIPTION: This HTML snippet demonstrates how to define outlet connections between controllers. It shows a chat controller referencing multiple user-status controllers as outlets using CSS class selectors.\nSOURCE: https://github.com/hotwired/stimulus/blob/main/docs/reference/outlets.md#2025-04-17_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div>\n  <div class=\"online-user\" data-controller=\"user-status\">...</div>\n  <div class=\"online-user\" data-controller=\"user-status\">...</div>\n  ...\n</div>\n\n...\n\n<div data-controller=\"chat\" data-chat-user-status-outlet=\".online-user\">\n  ...\n</div>\n```\n\n----------------------------------------\n\nTITLE: Using Multiple CSS Classes with Spread Syntax\nDESCRIPTION: JavaScript implementation demonstrating how to use plural CSS class property with spread syntax to add multiple classes at once.\nSOURCE: https://github.com/hotwired/stimulus/blob/main/docs/reference/css_classes.md#2025-04-17_snippet_6\n\nLANGUAGE: js\nCODE:\n```\nexport default class extends Controller {\n  static classes = [ \"loading\" ]\n\n  loadResults() {\n    this.element.classList.add(...this.loadingClasses)\n\n    fetch(/* … */)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Simplified Parameter Destructuring in Action Method\nDESCRIPTION: A more concise version of the load action that uses parameter destructuring to directly access the URL parameter from the action params object.\nSOURCE: https://github.com/hotwired/stimulus/blob/main/docs/handbook/06_working_with_external_resources.md#2025-04-17_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\n  load({ params: { url } }) {\n    fetch(url)\n      .then(response => response.text())\n      .then(html => this.element.innerHTML = html)\n  }\n```\n\n----------------------------------------\n\nTITLE: Using camelCase for Logical Names in Controllers\nDESCRIPTION: Example showing how to use camelCase for logical names in class definitions and access them as properties in controller methods.\nSOURCE: https://github.com/hotwired/stimulus/blob/main/docs/reference/css_classes.md#2025-04-17_snippet_7\n\nLANGUAGE: js\nCODE:\n```\nexport default class extends Controller {\n  static classes = [ \"loading\", \"noResults\" ]\n\n  loadResults() {\n    // …\n    if (results.length == 0) {\n      this.element.classList.add(this.noResultsClass)\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Initial HTML Structure for Stimulus Controller\nDESCRIPTION: Basic HTML markup for a text input and button that will be connected to a Stimulus controller.\nSOURCE: https://github.com/hotwired/stimulus/blob/main/docs/handbook/02_hello_stimulus.md#2025-04-17_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<div>\n  <input type=\"text\">\n  <button>Greet</button>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Implementing a Stimulus Controller Method\nDESCRIPTION: Demonstrates how to implement the corresponding controller method that will be triggered by the action defined in the HTML. The method receives the event object as its first parameter.\nSOURCE: https://github.com/hotwired/stimulus/blob/main/docs/reference/actions.md#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// controllers/gallery_controller.js\nimport { Controller } from \"@hotwired/stimulus\"\n\nexport default class extends Controller {\n  next(event) {\n    // …\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Multiple Actions on a Single Element\nDESCRIPTION: Shows how to define multiple actions on a single element, triggering different controller methods for different events.\nSOURCE: https://github.com/hotwired/stimulus/blob/main/docs/reference/actions.md#2025-04-17_snippet_10\n\nLANGUAGE: html\nCODE:\n```\n<input type=\"text\" data-action=\"focus->field#highlight input->search#update\">\n```\n\n----------------------------------------\n\nTITLE: Keyboard Event Filter Example\nDESCRIPTION: Demonstrates how to use keyboard event filters to make an action only respond to specific keys, in this case using the Escape key to close a modal.\nSOURCE: https://github.com/hotwired/stimulus/blob/main/docs/reference/actions.md#2025-04-17_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<div data-controller=\"modal\"\n     data-action=\"keydown.esc->modal#close\" tabindex=\"0\">\n</div>\n```\n\n----------------------------------------\n\nTITLE: Customizing Key Mappings in Stimulus\nDESCRIPTION: Shows how to customize key mappings by extending the default schema to add support for additional keys like the '@' symbol.\nSOURCE: https://github.com/hotwired/stimulus/blob/main/docs/reference/actions.md#2025-04-17_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Application, defaultSchema } from \"@hotwired/stimulus\"\n\nconst customSchema = {\n  ...defaultSchema,\n  keyMappings: { ...defaultSchema.keyMappings, at: \"@\" },\n}\n\nconst app = Application.start(document.documentElement, customSchema)\n```\n\n----------------------------------------\n\nTITLE: Implementing HTML with CSS Class for Stimulus Controller\nDESCRIPTION: Example of HTML form with a 'busy' CSS class that will be used with a Stimulus controller.\nSOURCE: https://github.com/hotwired/stimulus/blob/main/docs/reference/css_classes.md#2025-04-17_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<form data-controller=\"search\" class=\"search--busy\">\n```\n\n----------------------------------------\n\nTITLE: Using Behavior-Descriptive Action Names in Stimulus.js HTML\nDESCRIPTION: The recommended naming convention for Stimulus.js actions. This approach uses camelCase and describes what will happen when the action is called, making the HTML more self-documenting.\nSOURCE: https://github.com/hotwired/stimulus/blob/main/docs/reference/actions.md#2025-04-17_snippet_12\n\nLANGUAGE: html\nCODE:\n```\n<button data-action=\"click->profile#showDialog\">Do</button>\n```\n\n----------------------------------------\n\nTITLE: Using Compound Key Modifiers\nDESCRIPTION: Shows how to use compound key combinations with modifier keys like Ctrl for actions.\nSOURCE: https://github.com/hotwired/stimulus/blob/main/docs/reference/actions.md#2025-04-17_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<div data-action=\"keydown.ctrl+a->listbox#selectAll\" role=\"option\" tabindex=\"0\">...</div>\n```\n\n----------------------------------------\n\nTITLE: Example HTML Content for Remote Loading\nDESCRIPTION: Sample HTML that would be loaded asynchronously by the content loader controller, containing a simple ordered list of messages.\nSOURCE: https://github.com/hotwired/stimulus/blob/main/docs/handbook/06_working_with_external_resources.md#2025-04-17_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<ol>\n  <li>New Message: Stimulus Launch Party</li>\n  <li>Overdue: Finish Stimulus 1.0</li>\n</ol>\n```\n\n----------------------------------------\n\nTITLE: HTML Structure for Content Loader Controller\nDESCRIPTION: Basic HTML structure defining a content loader controller with a URL value attribute that points to the HTML content to be loaded.\nSOURCE: https://github.com/hotwired/stimulus/blob/main/docs/handbook/06_working_with_external_resources.md#2025-04-17_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div data-controller=\"content-loader\"\n     data-content-loader-url-value=\"/messages.html\"></div>\n```\n\n----------------------------------------\n\nTITLE: HTML with Auto-Refresh Configuration\nDESCRIPTION: Enhanced HTML structure for the content loader that includes both the URL and a refresh interval value in milliseconds to enable automatic periodic updates.\nSOURCE: https://github.com/hotwired/stimulus/blob/main/docs/handbook/06_working_with_external_resources.md#2025-04-17_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<div data-controller=\"content-loader\"\n     data-content-loader-url-value=\"/messages.html\"\n     data-content-loader-refresh-interval-value=\"5000\"></div>\n```\n\n----------------------------------------\n\nTITLE: Styling a Controller Element with CSS\nDESCRIPTION: CSS implementation showing how to style the 'busy' state of a search form using the search--busy class.\nSOURCE: https://github.com/hotwired/stimulus/blob/main/docs/reference/css_classes.md#2025-04-17_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n.search--busy {\n  background-image: url(throbber.svg) no-repeat;\n}\n```\n\n----------------------------------------\n\nTITLE: Method to Stop Refreshing and Clean Up Timer\nDESCRIPTION: Method to clean up the timer resource by clearing the interval when it's no longer needed, preventing memory leaks and unnecessary background operations.\nSOURCE: https://github.com/hotwired/stimulus/blob/main/docs/handbook/06_working_with_external_resources.md#2025-04-17_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n  stopRefreshing() {\n    if (this.refreshTimer) {\n      clearInterval(this.refreshTimer)\n    }\n  }\n```\n\n----------------------------------------\n\nTITLE: Stimulus Controller with Connect Method\nDESCRIPTION: Controller implementation with connect() lifecycle method for debugging purposes.\nSOURCE: https://github.com/hotwired/stimulus/blob/main/docs/handbook/02_hello_stimulus.md#2025-04-17_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// src/controllers/hello_controller.js\nimport { Controller } from \"@hotwired/stimulus\"\n\nexport default class extends Controller {\n  connect() {\n    console.log(\"Hello, Stimulus!\", this.element)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: HTML Using Action Parameters for Multiple Sources\nDESCRIPTION: HTML structure that uses action parameters to allow loading different content sources within the same controller, providing links to load messages or comments.\nSOURCE: https://github.com/hotwired/stimulus/blob/main/docs/handbook/06_working_with_external_resources.md#2025-04-17_snippet_10\n\nLANGUAGE: html\nCODE:\n```\n<div data-controller=\"content-loader\">\n  <a href=\"#\" data-content-loader-url-param=\"/messages.html\" data-action=\"content-loader#load\">Messages</a>\n  <a href=\"#\" data-content-loader-url-param=\"/comments.html\" data-action=\"content-loader#load\">Comments</a>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Optional Outlet Checking with Existential Property\nDESCRIPTION: This JavaScript snippet demonstrates how to safely check for the existence of an optional outlet before accessing it, preventing exceptions when outlets aren't present.\nSOURCE: https://github.com/hotwired/stimulus/blob/main/docs/reference/outlets.md#2025-04-17_snippet_6\n\nLANGUAGE: js\nCODE:\n```\nif (this.hasUserStatusOutlet) {\n  this.userStatusOutlet.safelyCallSomethingOnTheOutlet()\n}\n```\n\n----------------------------------------\n\nTITLE: Manually Registering Stimulus Controllers with Other Build Systems\nDESCRIPTION: This code shows how to explicitly load and register controller files with a Stimulus application instance when not using controller autoloading. It imports controllers and registers them with specific identifiers.\nSOURCE: https://github.com/hotwired/stimulus/blob/main/docs/handbook/07_installing_stimulus.md#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// src/application.js\nimport { Application } from \"@hotwired/stimulus\"\n\nimport HelloController from \"./controllers/hello_controller\"\nimport ClipboardController from \"./controllers/clipboard_controller\"\n\nwindow.Stimulus = Application.start()\nStimulus.register(\"hello\", HelloController)\nStimulus.register(\"clipboard\", ClipboardController)\n```\n\n----------------------------------------\n\nTITLE: Defining static class properties in Stimulus controller (JavaScript)\nDESCRIPTION: JavaScript code declaring a static classes property in a Stimulus controller, which enables the controller to work with the data-clipboard-supported-class attribute. This makes the CSS class configurable from HTML.\nSOURCE: https://github.com/hotwired/stimulus/blob/main/docs/handbook/04_designing_for_resilience.md#2025-04-17_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n  static classes = [ \"supported\" ]\n```\n\n----------------------------------------\n\nTITLE: Direct Controller Access in Stimulus\nDESCRIPTION: Demonstrates how to directly access another controller instance using the application object. This approach is recommended only when event-based communication isn't feasible for specific use cases.\nSOURCE: https://github.com/hotwired/stimulus/blob/main/docs/reference/controllers.md#2025-04-17_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nclass MyController extends Controller {\n  static targets = [ \"other\" ]\n\n  copy() {\n    const otherController = this.application.getControllerForElementAndIdentifier(this.otherTarget, 'other')\n    otherController.otherMethod()\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: HTML with kebab-case CSS Class Attributes\nDESCRIPTION: Example showing how to write kebab-case CSS class attributes in HTML for camelCase logical names in the controller.\nSOURCE: https://github.com/hotwired/stimulus/blob/main/docs/reference/css_classes.md#2025-04-17_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n<form data-controller=\"search\"\n      data-search-loading-class=\"search--busy\"\n      data-search-no-results-class=\"search--empty\">\n```\n\n----------------------------------------\n\nTITLE: Implementing Outlet Callbacks in Stimulus Controllers\nDESCRIPTION: This JavaScript example shows how to define outlet callback methods that are triggered when outlets are connected or disconnected from the DOM. These callbacks receive both the controller instance and element as parameters.\nSOURCE: https://github.com/hotwired/stimulus/blob/main/docs/reference/outlets.md#2025-04-17_snippet_5\n\nLANGUAGE: js\nCODE:\n```\n// chat_controller.js\n\nexport default class extends Controller {\n  static outlets = [ \"user-status\" ]\n\n  userStatusOutletConnected(outlet, element) {\n    // ...\n  }\n\n  userStatusOutletDisconnected(outlet, element) {\n    // ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Controller Registration Pattern\nDESCRIPTION: Pattern showing how controller classes must be registered explicitly or through autoloading. This is a security feature ensuring only designated classes can be instantiated as controllers.\nSOURCE: https://github.com/hotwired/stimulus/blob/main/SECURITY.md#2025-04-17_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nApplication#register()\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Slideshow Controller\nDESCRIPTION: Initial implementation of Stimulus controller with slide navigation functionality using internal state tracking.\nSOURCE: https://github.com/hotwired/stimulus/blob/main/docs/handbook/05_managing_state.md#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Controller } from \"@hotwired/stimulus\"\n\nexport default class extends Controller {\n  static targets = [ \"slide\" ]\n\n  initialize() {\n    this.index = 0\n    this.showCurrentSlide()\n  }\n\n  next() {\n    this.index++\n    this.showCurrentSlide()\n  }\n\n  previous() {\n    this.index--\n    this.showCurrentSlide()\n  }\n\n  showCurrentSlide() {\n    this.slideTargets.forEach((element, index) => {\n      element.hidden = index !== this.index\n    })\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Security Defense Pattern Using data-action\nDESCRIPTION: Example showing how the data-action attribute could be potentially misused if XSS protections fail. While Stimulus prevents arbitrary JavaScript execution, attackers could invoke controller methods through data-action if DOM manipulation is possible.\nSOURCE: https://github.com/hotwired/stimulus/blob/main/SECURITY.md#2025-04-17_snippet_0\n\nLANGUAGE: html\nCODE:\n```\ndata-action=\"controller#method\"\n```\n\n----------------------------------------\n\nTITLE: Initializing Stimulus Controller for Clipboard Functionality\nDESCRIPTION: This JavaScript code initializes a Stimulus controller with a copy method for clipboard functionality.\nSOURCE: https://github.com/hotwired/stimulus/blob/main/docs/handbook/03_building_something_real.md#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Controller } from \"@hotwired/stimulus\"\n\nexport default class extends Controller {\n  static targets = [ \"source\" ]\n\n  copy() {\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: CSS for conditionally displaying clipboard button (CSS)\nDESCRIPTION: CSS rules that hide the clipboard button by default and only display it when the parent element has the clipboard--supported class. This ensures the button is only visible when the clipboard functionality is available.\nSOURCE: https://github.com/hotwired/stimulus/blob/main/docs/handbook/04_designing_for_resilience.md#2025-04-17_snippet_2\n\nLANGUAGE: css\nCODE:\n```\n.clipboard-button {\n  display: none;\n}\n\n.clipboard--supported .clipboard-button {\n  display: initial;\n}\n```\n\n----------------------------------------\n\nTITLE: Invalid Outlet Element Reference in HTML\nDESCRIPTION: This HTML example shows an invalid outlet reference to an element without a required controller attribute, which would result in a Stimulus error.\nSOURCE: https://github.com/hotwired/stimulus/blob/main/docs/reference/outlets.md#2025-04-17_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<div data-controller=\"chat\" data-chat-user-status-outlet=\"#user-column\"></div>\n\n<div id=\"user-column\"></div>\n```\n\n----------------------------------------\n\nTITLE: Setting up Git Clone Commands for Stimulus Starter\nDESCRIPTION: Terminal commands to clone and set up the stimulus-starter project using Yarn package manager.\nSOURCE: https://github.com/hotwired/stimulus/blob/main/docs/handbook/02_hello_stimulus.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ git clone https://github.com/hotwired/stimulus-starter.git\n$ cd stimulus-starter\n$ yarn install\n$ yarn start\n```"
  }
]