[
  {
    "owner": "mrzachnugent",
    "repo": "react-native-reusables",
    "content": "TITLE: Using Component with asChild Prop in React Native\nDESCRIPTION: Demonstrates how to use a component that implements the asChild prop pattern, showing prop forwarding and event handling.\nSOURCE: https://github.com/mrzachnugent/react-native-reusables/blob/main/apps/docs/src/content/docs/getting-started/common-patterns.mdx#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Button } from '~/example/button'\nimport { Pressable, Text } from 'react-native'\n\nfunction Thing(){\n    return (\n        <Button asChild>\n            <Pressable onPress={() => {\n                console.log('Pressed')\n            }}>\n                <Text>Press me</Text>\n            </Pressable>\n        </Button>\n    )\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing asChild Prop Pattern in React Native Button Component\nDESCRIPTION: Shows how to implement a Button component with an asChild prop that conditionally renders either a Pressable or Slot.Pressable component. This pattern allows for flexible component composition.\nSOURCE: https://github.com/mrzachnugent/react-native-reusables/blob/main/apps/docs/src/content/docs/getting-started/common-patterns.mdx#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport * as Slot from '@rn-primitives/slot'\nimport { Pressable, PressableProps } from 'react-native'\n\nexport function Button({ asChild, onPress: onPressProp, ...props }: PressableProps & { asChild?: boolean }) {\n  function onPress(ev) {\n    console.log('Button pressed')\n    onPressProp?.(ev)\n  }\n\n  const Component = asChild ? Pressable : Slot.Pressable\n  return <Component onPress={onPress} {...props} />\n}\n```\n\n----------------------------------------\n\nTITLE: Ref Forwarding with React Native TextInput\nDESCRIPTION: Shows how to implement ref forwarding with React Native components, specifically focusing on TextInput manipulation through refs.\nSOURCE: https://github.com/mrzachnugent/react-native-reusables/blob/main/apps/docs/src/content/docs/getting-started/common-patterns.mdx#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport * as React from 'react'\nimport { TextInput, View, Pressable, View } from 'react-native'\n\nfunction Example() {\n  const inputRef = React.useRef<TextInput>(null)\n\n  function onPress() {\n    inputRef.current?.focus()\n  }\n\n  return (\n    <View>\n      <Pressable onPress={onPress}>\n        <Text>Focus</Text>\n      </Pressable>\n      <TextInput ref={inputRef} />\n    </View>\n    )\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Input Component with Ref Forwarding\nDESCRIPTION: Demonstrates how to create a custom input component that forwards refs using React.forwardRef, enabling direct manipulation of the underlying TextInput.\nSOURCE: https://github.com/mrzachnugent/react-native-reusables/blob/main/apps/docs/src/content/docs/getting-started/common-patterns.mdx#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport * as React from 'react'\nimport { TextInput, TextInputProps, View, Pressable, View } from 'react-native'\n\nconst CustomInput = React.forwardRef<TextInput, TextInputProps>((props, ref) => {\n  return <TextInput ref={ref} {...props} />\n})\n\nfunction Example() {\n  const inputRef = React.useRef<TextInput>(null)\n\n  function onPress() {\n    inputRef.current?.focus()\n  }\n\n  return (\n    <View>\n      <Pressable onPress={onPress}>\n        <Text>Focus</Text>\n      </Pressable>\n      <CustomInput ref={inputRef} />\n    </View>\n    )\n}\n```\n\n----------------------------------------\n\nTITLE: Using Dialog Component in React Native\nDESCRIPTION: Example of how to use the Dialog component in a React Native application, including various sub-components like DialogTrigger, DialogContent, DialogHeader, DialogFooter, and DialogClose.\nSOURCE: https://github.com/mrzachnugent/react-native-reusables/blob/main/apps/docs/src/content/docs/components/dialog.mdx#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport * as React from 'react';\nimport { Button } from '~/components/ui/button';\nimport {\n  Dialog,\n  DialogClose,\n  DialogContent,\n  DialogDescription,\n  DialogFooter,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from '~/components/ui/dialog';\nimport { Text } from '~/components/ui/text';\n\nfunction Example() {\n  return (\n      <Dialog>\n        <DialogTrigger asChild>\n          <Button variant='outline'>\n            <Text>Edit Profile</Text>\n          </Button>\n        </DialogTrigger>\n        <DialogContent className='sm:max-w-[425px]'>\n          <DialogHeader>\n            <DialogTitle>Edit profile</DialogTitle>\n            <DialogDescription>\n              Make changes to your profile here. Click save when you're done.\n            </DialogDescription>\n          </DialogHeader>\n          <DialogFooter>\n            <DialogClose asChild>\n              <Button>\n                <Text>OK</Text>\n              </Button>\n            </DialogClose>\n          </DialogFooter>\n        </DialogContent>\n      </Dialog>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Toggle Component Usage Example\nDESCRIPTION: Example showing how to use the Toggle component with an icon to create a bold text toggle button. Demonstrates state management with React.useState and passing the required props.\nSOURCE: https://github.com/mrzachnugent/react-native-reusables/blob/main/apps/docs/src/content/docs/components/toggle.mdx#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport * as React from 'react';\nimport { View } from 'react-native';\nimport { Toggle, ToggleIcon } from '~/components/ui/toggle';\nimport { Bold } from '~/lib/icons/Bold';\n\nfunction Example() {\n  const [pressed, setPressed] = React.useState(false);\n  return (\n    <View className='flex-1 justify-center items-center p-6 gap-12'>\n      <Toggle\n        pressed={pressed}\n        onPressedChange={setPressed}\n        aria-label='Toggle bold'\n        variant='outline'\n      >\n        <ToggleIcon icon={Bold} size={18} />\n      </Toggle>\n    </View>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Complete Context Menu Example\nDESCRIPTION: A comprehensive example showing how to implement a context menu with various components like checkboxes, radio buttons, separators, and shortcuts in a React Native application.\nSOURCE: https://github.com/mrzachnugent/react-native-reusables/blob/main/apps/docs/src/content/docs/components/context-menu.mdx#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport * as React from 'react';\nimport { Platform, View } from 'react-native';\nimport Animated, { FadeIn } from 'react-native-reanimated';\nimport { useSafeAreaInsets } from 'react-native-safe-area-context';\nimport {\n  ContextMenu,\n  ContextMenuCheckboxItem,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuLabel,\n  ContextMenuRadioGroup,\n  ContextMenuRadioItem,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuTrigger,\n} from '~/components/ui/context-menu';\nimport { Text } from '~/components/ui/text';\n\nfunction Example() {\n  const insets = useSafeAreaInsets();\n  const contentInsets = {\n    top: insets.top,\n    bottom: insets.bottom,\n    left: 12,\n    right: 12,\n  };\n  const [checkboxValue, setCheckboxValue] = React.useState(false);\n  const [subCheckboxValue, setSubCheckboxValue] = React.useState(false);\n  const [radioValue, setRadioValue] = React.useState('pedro');\n\n  return (\n        <ContextMenu>\n          <ContextMenuTrigger className='flex h-[150px] w-full max-w-[300px] mx-auto web:cursor-default items-center justify-center rounded-md border border-foreground border-dashed'>\n            <Text className='text-foreground text-sm native:text-lg'>\n              {Platform.OS === 'web' ? 'Right click here' : 'Long press here'}\n            </Text>\n          </ContextMenuTrigger>\n\n          <ContextMenuContent align='start' insets={contentInsets} className='w-64 native:w-72'>\n            <ContextMenuItem inset>\n              <Text>Back</Text>\n              <ContextMenuShortcut>⌘[</ContextMenuShortcut>\n            </ContextMenuItem>\n            <ContextMenuItem inset disabled>\n              <Text>Forward</Text>\n              <ContextMenuShortcut>⌘]</ContextMenuShortcut>\n            </ContextMenuItem>\n            <ContextMenuItem inset>\n              <Text>Reload</Text>\n              <ContextMenuShortcut>⌘R</ContextMenuShortcut>\n            </ContextMenuItem>\n\n            <ContextMenuSub>\n              <ContextMenuSubTrigger inset>\n                <Text>More Tools</Text>\n              </ContextMenuSubTrigger>\n              <ContextMenuSubContent className='web:w-48 native:mt-1'>\n                <Animated.View entering={FadeIn.duration(200)}>\n                  <ContextMenuItem>\n                    <Text>Save Page As...</Text>\n                    <ContextMenuShortcut>⇧⌘S</ContextMenuShortcut>\n                  </ContextMenuItem>\n                  <ContextMenuItem>\n                    <Text>Create Shortcut...</Text>\n                  </ContextMenuItem>\n\n                  <ContextMenuSeparator />\n                  <ContextMenuItem>\n                    <Text>Developer Tools</Text>\n                  </ContextMenuItem>\n                </Animated.View>\n              </ContextMenuSubContent>\n            </ContextMenuSub>\n\n            <ContextMenuSeparator />\n            <ContextMenuCheckboxItem\n              checked={checkboxValue}\n              onCheckedChange={setCheckboxValue}\n              closeOnPress={false}\n            >\n              <Text>Show Bookmarks Bar</Text>\n              <ContextMenuShortcut>⌘⇧B</ContextMenuShortcut>\n            </ContextMenuCheckboxItem>\n            <ContextMenuCheckboxItem\n              checked={subCheckboxValue}\n              onCheckedChange={setSubCheckboxValue}\n              closeOnPress={false}\n            >\n              <Text>Show Full URLs</Text>\n            </ContextMenuCheckboxItem>\n            <ContextMenuSeparator />\n            <ContextMenuRadioGroup value={radioValue} onValueChange={setRadioValue}>\n              <ContextMenuLabel inset>People</ContextMenuLabel>\n              <ContextMenuSeparator />\n              <ContextMenuRadioItem value='pedro' closeOnPress={false}>\n                <Text>Elmer Fudd</Text>\n              </ContextMenuRadioItem>\n              <ContextMenuRadioItem value='colm' closeOnPress={false}>\n                <Text>Foghorn Leghorn</Text>\n              </ContextMenuRadioItem>\n            </ContextMenuRadioGroup>\n          </ContextMenuContent>\n        </ContextMenu>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Popover Component Usage Example\nDESCRIPTION: Complete example of using the Popover component in a React Native application, demonstrating how to create a popover with content that appears when a button is pressed.\nSOURCE: https://github.com/mrzachnugent/react-native-reusables/blob/main/apps/docs/src/content/docs/components/popover.mdx#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport * as React from 'react';\nimport { Platform, View } from 'react-native';\nimport { useSafeAreaInsets } from 'react-native-safe-area-context';\nimport { Button } from '~/components/ui/button';\nimport { Popover, PopoverContent, PopoverTrigger } from '~/components/ui/popover';\nimport { Text } from '~/components/ui/text';\n\nfunction Example() {\n  const insets = useSafeAreaInsets();\n  const contentInsets = {\n    top: insets.top,\n    bottom: insets.bottom,\n    left: 12,\n    right: 12,\n  };\n\n  return (\n    <View className='flex-1 justify-center items-center p-6'>\n      <Popover>\n        <PopoverTrigger asChild>\n          <Button variant='outline'>\n            <Text>Open popover</Text>\n          </Button>\n        </PopoverTrigger>\n        <PopoverContent\n          side={Platform.OS === 'web' ? 'bottom' : 'top'}\n          insets={contentInsets}\n          className='w-80'\n        >\n          <Text className='font-medium leading-none native:text-xl'>Dimensions</Text>\n          <Text className='text-sm text-muted-foreground'>\n            Set the dimensions for the layer.\n          </Text>\n        </PopoverContent>\n      </Popover>\n    </View>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Alert Dialog Usage Example\nDESCRIPTION: Complete example showing how to implement an Alert Dialog with triggers, content, header, actions, and cancellation options.\nSOURCE: https://github.com/mrzachnugent/react-native-reusables/blob/main/apps/docs/src/content/docs/components/alert-dialog.mdx#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport {\n  AlertDialog,\n  AlertDialogAction,\n  AlertDialogCancel,\n  AlertDialogContent,\n  AlertDialogDescription,\n  AlertDialogFooter,\n  AlertDialogHeader,\n  AlertDialogTitle,\n  AlertDialogTrigger,\n} from '~/components/ui/alert-dialog';\nimport { Button } from '~/components/ui/button';\nimport { Text } from '~/components/ui/text';\n\nfunction AlertDialogScreen() {\n  return (\n      <AlertDialog>\n        <AlertDialogTrigger asChild>\n          <Button variant='outline'>\n            <Text>Show Alert Dialog</Text>\n          </Button>\n        </AlertDialogTrigger>\n        <AlertDialogContent>\n          <AlertDialogHeader>\n            <AlertDialogTitle>Are you absolutely sure?</AlertDialogTitle>\n            <AlertDialogDescription>\n              This action cannot be undone. This will permanently delete your account and remove\n              your data from our servers.\n            </AlertDialogDescription>\n          </AlertDialogHeader>\n          <AlertDialogFooter>\n            <AlertDialogCancel>\n              <Text>Cancel</Text>\n            </AlertDialogCancel>\n            <AlertDialogAction>\n              <Text>Continue</Text>\n            </AlertDialogAction>\n          </AlertDialogFooter>\n        </AlertDialogContent>\n      </AlertDialog>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using Card Component with its Subcomponents in React Native\nDESCRIPTION: Example demonstrating how to import and use the Card component along with its subcomponents: CardHeader, CardTitle, CardDescription, CardContent, and CardFooter. Shows a complete card structure with proper nesting of components.\nSOURCE: https://github.com/mrzachnugent/react-native-reusables/blob/main/apps/docs/src/content/docs/components/card.mdx#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardFooter,\n  CardHeader,\n  CardTitle,\n} from '~/components/ui/card';\nimport { Text } from '~/components/ui/text';\n\nfunction Example() {\n  return (\n      <Card className='w-full max-w-sm'>\n        <CardHeader>\n          <CardTitle>Card Title</CardTitle>\n          <CardDescription>Card Description</CardDescription>\n        </CardHeader>\n        <CardContent>\n          <Text>Card Content</Text>\n        </CardContent>\n        <CardFooter>\n          <Text>Card Footer</Text>\n        </CardFooter>\n      </Card>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using Select Component in React Native\nDESCRIPTION: Comprehensive example of using the Select component, including SelectTrigger, SelectValue, SelectContent, SelectGroup, SelectLabel, and SelectItem sub-components. It demonstrates how to create a dropdown for selecting fruits.\nSOURCE: https://github.com/mrzachnugent/react-native-reusables/blob/main/apps/docs/src/content/docs/components/select.mdx#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useSafeAreaInsets } from 'react-native-safe-area-context';\nimport {\n  Select,\n  SelectContent,\n  SelectGroup,\n  SelectItem,\n  SelectLabel,\n  SelectTrigger,\n  SelectValue,\n} from '~/components/ui/select';\n\nfunction Example() {\n  const insets = useSafeAreaInsets();\n  const contentInsets = {\n    top: insets.top,\n    bottom: insets.bottom,\n    left: 12,\n    right: 12,\n  };\n\n  return (\n    <Select defaultValue={{ value: 'apple', label: 'Apple' }}>\n      <SelectTrigger className='w-[250px]'>\n        <SelectValue\n          className='text-foreground text-sm native:text-lg'\n          placeholder='Select a fruit'\n        />\n      </SelectTrigger>\n      <SelectContent insets={contentInsets} className='w-[250px]'>\n        <SelectGroup>\n          <SelectLabel>Fruits</SelectLabel>\n          <SelectItem label='Apple' value='apple'>\n            Apple\n          </SelectItem>\n          <SelectItem label='Banana' value='banana'>\n            Banana\n          </SelectItem>\n          <SelectItem label='Blueberry' value='blueberry'>\n            Blueberry\n          </SelectItem>\n          <SelectItem label='Grapes' value='grapes'>\n            Grapes\n          </SelectItem>\n          <SelectItem label='Pineapple' value='pineapple'>\n            Pineapple\n          </SelectItem>\n        </SelectGroup>\n      </SelectContent>\n    </Select>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Tabs Component in React Native\nDESCRIPTION: Example usage of the Tabs component in a React Native application. It demonstrates how to create a tabbed interface with account and password sections.\nSOURCE: https://github.com/mrzachnugent/react-native-reusables/blob/main/apps/docs/src/content/docs/components/tabs.mdx#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport * as React from 'react';\nimport { View } from 'react-native';\nimport { Button } from '~/components/ui/button';\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardFooter,\n  CardHeader,\n  CardTitle,\n} from '~/components/ui/card';\nimport { Input } from '~/components/ui/input';\nimport { Label } from '~/components/ui/label';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '~/components/ui/tabs';\nimport { Text } from '~/components/ui/text';\n\nexport default function TabsScreen() {\n  const [value, setValue] = React.useState('account');\n  return (\n    <View className='flex-1 justify-center p-6'>\n      <Tabs\n        value={value}\n        onValueChange={setValue}\n        className='w-full max-w-[400px] mx-auto flex-col gap-1.5'\n      >\n        <TabsList className='flex-row w-full'>\n          <TabsTrigger value='account' className='flex-1'>\n            <Text>Account</Text>\n          </TabsTrigger>\n          <TabsTrigger value='password' className='flex-1'>\n            <Text>Password</Text>\n          </TabsTrigger>\n        </TabsList>\n        <TabsContent value='account'>\n          <Card>\n            <CardHeader>\n              <CardTitle>Account</CardTitle>\n              <CardDescription>\n                Make changes to your account here. Click save when you're done.\n              </CardDescription>\n            </CardHeader>\n            <CardContent className='gap-4 native:gap-2'>\n              <View className='gap-1'>\n                <Label nativeID='name'>Name</Label>\n                <Input aria-aria-labelledby='name' defaultValue='Pedro Duarte' />\n              </View>\n              <View className='gap-1'>\n                <Label nativeID='username'>Username</Label>\n                <Input id='username' defaultValue='@peduarte' />\n              </View>\n            </CardContent>\n            <CardFooter>\n              <Button>\n                <Text>Save changes</Text>\n              </Button>\n            </CardFooter>\n          </Card>\n        </TabsContent>\n        <TabsContent value='password'>\n          <Card>\n            <CardHeader>\n              <CardTitle>Password</CardTitle>\n              <CardDescription>\n                Change your password here. After saving, you'll be logged out.\n              </CardDescription>\n            </CardHeader>\n            <CardContent className='gap-4 native:gap-2'>\n              <View className='gap-1'>\n                <Label nativeID='current'>Current password</Label>\n                <Input placeholder='********' aria-labelledby='current' secureTextEntry />\n              </View>\n              <View className='gap-1'>\n                <Label nativeID='new'>New password</Label>\n                <Input placeholder='********' aria-labelledby='new' secureTextEntry />\n              </View>\n            </CardContent>\n            <CardFooter>\n              <Button>\n                <Text>Save password</Text>\n              </Button>\n            </CardFooter>\n          </Card>\n        </TabsContent>\n      </Tabs>\n    </View>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Navigation Menu Component\nDESCRIPTION: Complete example of implementing a Navigation Menu with multiple sections, including getting started, components, and documentation links. Includes styling and interaction handling.\nSOURCE: https://github.com/mrzachnugent/react-native-reusables/blob/main/apps/docs/src/content/docs/components/navigation-menu.mdx#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport type { TextRef } from '@rn-primitives/types';\nimport { useNavigation } from 'expo-router';\nimport * as React from 'react';\nimport { Platform, Pressable, StyleSheet, View } from 'react-native';\nimport { useSafeAreaInsets } from 'react-native-safe-area-context';\nimport {\n  NavigationMenu,\n  NavigationMenuContent,\n  NavigationMenuItem,\n  NavigationMenuLink,\n  NavigationMenuList,\n  NavigationMenuTrigger,\n  navigationMenuTriggerStyle,\n} from '~/components/ui/navigation-menu';\nimport { Text } from '~/components/ui/text';\n  import { Sparkles } from '~/lib/icons/Sparkles';\nimport { cn } from '~/lib/utils';\n\nconst components: { title: string; href: string; description: string }[] = [\n  {\n    title: 'Alert Dialog',\n    href: '/alert-dialog/alert-dialog-universal',\n    description:\n      'A modal dialog that interrupts the user with important content and expects a response.',\n  },\n  ...\n];\n\nfunction Example() {\n  const insets = useSafeAreaInsets();\n  const contentInsets = {\n    top: insets.top,\n    bottom: insets.bottom,\n    left: 12,\n    right: 12,\n  };\n  const [value, setValue] = React.useState<string>();\n  const navigation = useNavigation();\n\n  function closeAll() {\n    setValue('');\n  }\n\n  React.useEffect(() => {\n    const sub = navigation.addListener('blur', () => {\n      closeAll();\n    });\n\n    return sub;\n  }, []);\n\n  return (\n    <>\n      {Platform.OS !== 'web' && !!value && (\n        <Pressable\n          onPress={() => {\n            setValue('');\n          }}\n          style={StyleSheet.absoluteFill}\n        />\n      )}\n      <NavigationMenu value={value} onValueChange={setValue}>\n        <NavigationMenuList>\n          <NavigationMenuItem value='getting-started'>\n            <NavigationMenuTrigger>\n              <Text>Getting started</Text>\n            </NavigationMenuTrigger>\n            <NavigationMenuContent insets={contentInsets}>\n              <View\n                role='list'\n                className='web:grid gap-3 p-6 md:w-[400px] lg:w-[500px] web:lg:grid-cols-[.75fr_1fr]'\n              >\n                <View role='listitem' className='web:row-span-3'>\n                  <NavigationMenuLink asChild>\n                    <View className='flex web:select-none flex-col justify-end rounded-md web:bg-gradient-to-b web:from-muted/50 web:to-muted native:border native:border-border p-6 web:no-underline web:outline-none web:focus:shadow-md web:focus:shadow-foreground/5'>\n                      <Sparkles size={16} className='text-foreground' />\n                      <Text className='mb-2 mt-4 text-lg native:text-2xl font-medium'>\n                        react-native-reusables\n                      </Text>\n                      <Text className='text-sm native:text-base leading-tight text-muted-foreground'>\n                        Universal components that you can copy and paste into your apps. Accessible.\n                        Customizable. Open Source.\n                      </Text>\n                    </View>\n                  </NavigationMenuLink>\n                </View>\n                <ListItem href='/docs' title='Introduction'>\n                  <Text>\n                    Re-usable components built using Radix UI on the web and Tailwind CSS.\n                  </Text>\n                </ListItem>\n                <ListItem href='/docs/installation' title='Installation'>\n                  <Text>How to install dependencies and structure your app.</Text>\n                </ListItem>\n                <ListItem href='/docshttps://rn-primitives.vercel.app/typography' title='Typography'>\n                  <Text>Styles for headings, paragraphs, lists...etc</Text>\n                </ListItem>\n              </View>\n            </NavigationMenuContent>\n          </NavigationMenuItem>\n          <NavigationMenuItem value='components'>\n            <NavigationMenuTrigger>\n              <Text className='text-foreground'>Components</Text>\n            </NavigationMenuTrigger>\n            <NavigationMenuContent insets={contentInsets}>\n              <View\n                role='list'\n                className='web:grid w-[400px] gap-3 p-4 md:w-[500px] web:md:grid-cols-2 lg:w-[600px] '\n              >\n                {components.map((component) => (\n                  <ListItem key={component.title} title={component.title} href={component.href}>\n                    {component.description}\n                  </ListItem>\n                ))}\n              </View>\n            </NavigationMenuContent>\n          </NavigationMenuItem>\n          <NavigationMenuItem value='documentation'>\n            <NavigationMenuLink onPress={closeAll} className={navigationMenuTriggerStyle()}>\n              <Text>Documentation</Text>\n            </NavigationMenuLink>\n          </NavigationMenuItem>\n        </NavigationMenuList>\n      </NavigationMenu>\n    </>\n  );\n}\n\nconst ListItem = React.forwardRef<\n  TextRef,\n  React.ComponentPropsWithoutRef<typeof Text> & { title: string; href: string }\n>(({ className, title, children, ...props }, ref) => {\n  return (\n    <View role='listitem'>\n      <NavigationMenuLink\n        ref={ref}\n        className={cn(\n          'web:block web:select-none gap-1 rounded-md p-3 leading-none no-underline text-foreground web:outline-none web:transition-colors web:hover:bg-accent active:bg-accent web:hover:text-accent-foreground web:focus:bg-accent web:focus:text-accent-foreground',\n          className\n        )}\n        {...props}\n      >\n        <Text className='text-sm native:text-base font-medium text-foreground leading-none'>\n          {title}\n        </Text>\n        <Text className='line-clamp-2 text-sm native:text-base leading-snug text-muted-foreground'>\n          {children}\n        </Text>\n      </NavigationMenuLink>\n    </View>\n  );\n});\nListItem.displayName = 'ListItem';\n```\n\n----------------------------------------\n\nTITLE: Radio Group Component Usage Example\nDESCRIPTION: Example showing how to implement a Radio Group component with custom RadioGroupItemWithLabel components. Demonstrates state management, value changes, and accessibility features.\nSOURCE: https://github.com/mrzachnugent/react-native-reusables/blob/main/apps/docs/src/content/docs/components/radio-group.mdx#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport * as React from 'react';\nimport { View } from 'react-native';\nimport { Label } from '~/components/ui/label';\nimport { RadioGroup, RadioGroupItem } from '~/components/ui/radio-group';\n\nfunction Example() {\n  const [value, setValue] = React.useState('Comfortable');\n\n  function onLabelPress(label: string) {\n    return () => {\n      setValue(label);\n    };\n  }\n  return (\n    <View className='flex-1 justify-center items-center p-6'>\n      <RadioGroup value={value} onValueChange={setValue} className='gap-3'>\n        <RadioGroupItemWithLabel value='Default' onLabelPress={onLabelPress('Default')} />\n        <RadioGroupItemWithLabel value='Comfortable' onLabelPress={onLabelPress('Comfortable')} />\n        <RadioGroupItemWithLabel value='Compact' onLabelPress={onLabelPress('Compact')} />\n      </RadioGroup>\n    </View>\n  );\n}\n\nfunction RadioGroupItemWithLabel({\n  value,\n  onLabelPress,\n}: {\n  value: string;\n  onLabelPress: () => void;\n}) {\n  return (\n    <View className={'flex-row gap-2 items-center'}>\n      <RadioGroupItem aria-labelledby={`label-for-${value}`} value={value} />\n      <Label nativeID={`label-for-${value}`} onPress={onLabelPress}>\n        {value}\n      </Label>\n    </View>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Hover Card Component in React Native\nDESCRIPTION: Example showing how to use the Hover Card component in a React Native application. It demonstrates creating a hoverable user profile preview when hovering over a username button.\nSOURCE: https://github.com/mrzachnugent/react-native-reusables/blob/main/apps/docs/src/content/docs/components/hover-card.mdx#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { View } from 'react-native';\nimport { Avatar, AvatarFallback, AvatarImage } from '~/components/ui/avatar';\nimport { Button } from '~/components/ui/button';\nimport { HoverCard, HoverCardContent, HoverCardTrigger } from '~/components/ui/hover-card';\nimport { Text } from '~/components/ui/text';\nimport { CalendarDays } from '~/lib/icons/CalendarDays';\n\nfunction Example() {\n  return (\n    <View className='flex-1 justify-center items-center p-6 gap-12'>\n      <HoverCard>\n        <HoverCardTrigger asChild>\n          <Button variant='link' size='lg'>\n            <Text>@nextjs</Text>\n          </Button>\n        </HoverCardTrigger>\n        <HoverCardContent className='w-80 native:w-96'>\n          <View className='flex flex-row justify-between gap-4'>\n            <Avatar alt='Vercel avatar'>\n              <AvatarImage source={{ uri: 'https://github.com/vercel.png' }} />\n              <AvatarFallback>\n                <Text>VA</Text>\n              </AvatarFallback>\n            </Avatar>\n            <View className='gap-1 flex-1'>\n              <Text className='text-sm native:text-base font-semibold'>@nextjs</Text>\n              <Text className='text-sm native:text-base'>\n                The React Framework – created and maintained by @vercel.\n              </Text>\n              <View className='flex flex-row items-center pt-2 gap-2'>\n                <CalendarDays size={14} className='text-foreground opacity-70' />\n                <Text className='text-xs native:text-sm text-muted-foreground'>\n                  Joined December 2021\n                </Text>\n              </View>\n            </View>\n          </View>\n        </HoverCardContent>\n      </HoverCard>\n    </View>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using Dropdown Menu Component in React Native\nDESCRIPTION: Example of how to use the Dropdown Menu component in a React Native application. It demonstrates various subcomponents and features of the Dropdown Menu.\nSOURCE: https://github.com/mrzachnugent/react-native-reusables/blob/main/apps/docs/src/content/docs/components/dropdown-menu.mdx#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport * as React from 'react';\nimport Animated, { FadeIn } from 'react-native-reanimated';\nimport { Button } from '~/components/ui/button';\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuGroup,\n  DropdownMenuItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuTrigger,\n} from '~/components/ui/dropdown-menu';\nimport { Text } from '~/components/ui/text';\n\nfunction Example() {\n\n  return (\n      <DropdownMenu>\n        <DropdownMenuTrigger asChild>\n          <Button variant='outline'>\n            <Text>Open</Text>\n          </Button>\n        </DropdownMenuTrigger>\n        <DropdownMenuContent insets={contentInsets} className='w-64 native:w-72'>\n          <DropdownMenuLabel>My Account</DropdownMenuLabel>\n          <DropdownMenuSeparator />\n          <DropdownMenuGroup>\n            <DropdownMenuItem>\n              <Text>Team</Text>\n            </DropdownMenuItem>\n            <DropdownMenuSub>\n              <DropdownMenuSubTrigger>\n                <Text>Invite users</Text>\n              </DropdownMenuSubTrigger>\n              <DropdownMenuSubContent>\n                <Animated.View entering={FadeIn.duration(200)}>\n                  <DropdownMenuItem>\n                    <Text>Email</Text>\n                  </DropdownMenuItem>\n                  <DropdownMenuItem>\n                    <Text>Message</Text>\n                  </DropdownMenuItem>\n                  <DropdownMenuSeparator />\n                  <DropdownMenuItem>\n                    <Text>More...</Text>\n                  </DropdownMenuItem>\n                </Animated.View>\n              </DropdownMenuSubContent>\n            </DropdownMenuSub>\n            <DropdownMenuItem>\n              <Text>New Team</Text>\n              <DropdownMenuShortcut>⌘+T</DropdownMenuShortcut>\n            </DropdownMenuItem>\n          </DropdownMenuGroup>\n          <DropdownMenuSeparator />\n          <DropdownMenuItem>\n            <Text>GitHub</Text>\n          </DropdownMenuItem>\n          <DropdownMenuItem>\n            <Text>Support</Text>\n          </DropdownMenuItem>\n          <DropdownMenuItem disabled>\n            <Text>API</Text>\n          </DropdownMenuItem>\n          <DropdownMenuSeparator />\n          <DropdownMenuItem>\n            <Text>Log out</Text>\n            <DropdownMenuShortcut>⇧⌘Q</DropdownMenuShortcut>\n          </DropdownMenuItem>\n        </DropdownMenuContent>\n      </DropdownMenu>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Portal Component Implementation in Modal Screen\nDESCRIPTION: Demonstrates how to implement a Portal component within a modal screen, including platform-specific considerations and proper portal host setup.\nSOURCE: https://github.com/mrzachnugent/react-native-reusables/blob/main/apps/docs/src/content/docs/getting-started/common-patterns.mdx#2025-04-21_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport { PortalHost } from '@rn-primitives/portal';\nimport * as React from 'react';\nimport { Platform } from 'react-native';\nimport { useSafeAreaInsets } from 'react-native-safe-area-context';\nimport { FullWindowOverlay } from \"react-native-screens\"\n\nconst CUSTOM_PORTAL_HOST_NAME = 'modal-example';\n\nconst WindowOverlay = Platform.OS === \"ios\" ? FullWindowOverlay : React.Fragment\n\nexport default function ModalScreen() {\n  const insets = useSafeAreaInsets();\n  const contentInsets = {\n    top: insets.top,\n    bottom: insets.bottom,\n    left: 16,\n    right: 16,\n  };\n\n  return (\n     <>\n        <View className='flex-1 justify-center items-center'>\n          <Select defaultValue={{ value: 'apple', label: 'Apple' }}>\n            <SelectTrigger>\n              <SelectValue\n                className='text-foreground text-sm native:text-lg'\n                placeholder='Select a fruit'\n              />\n            </SelectTrigger>\n            <SelectContent\n              insets={contentInsets}\n              className='w-full'\n              portalHost={CUSTOM_PORTAL_HOST_NAME}\n            >\n              <SelectGroup>\n                <SelectLabel>Fruits</SelectLabel>\n                <SelectItem label='Apple' value='apple'>\n                  Apple\n                </SelectItem>\n                <SelectItem label='Banana' value='banana'>\n                  Banana\n                </SelectItem>\n                <SelectItem label='Blueberry' value='blueberry'>\n                  Blueberry\n                </SelectItem>\n                <SelectItem label='Grapes' value='grapes'>\n                  Grapes\n                </SelectItem>\n                <SelectItem label='Pineapple' value='pineapple'>\n                  Pineapple\n                </SelectItem>\n              </SelectGroup>\n            </SelectContent>\n          </Select>\n        </View>\n        <WindowOverlay>\n          <PortalHost name={CUSTOM_PORTAL_HOST_NAME} />\n        </WindowOverlay>\n     </>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Using Toggle Group Component in React Native\nDESCRIPTION: Example of how to use the Toggle Group component in a React Native application. It demonstrates creating a group of toggle buttons for text formatting options.\nSOURCE: https://github.com/mrzachnugent/react-native-reusables/blob/main/apps/docs/src/content/docs/components/toggle-group.mdx#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport * as React from 'react';\nimport { View } from 'react-native';\nimport { ToggleGroup, ToggleGroupIcon, ToggleGroupItem } from '~/components/ui/toggle-group';\nimport { Bold } from '~/lib/icons/Bold';\nimport { Italic } from '~/lib/icons/Italic';\nimport { Underline } from '~/lib/icons/Underline';\n\nfunction Example() {\n  const [value, setValue] = React.useState<string[]>([]);\n\n  return (\n    <View className='flex-1 justify-center items-center p-6 gap-12'>\n      <ToggleGroup value={value} onValueChange={setValue} type='multiple'>\n        <ToggleGroupItem value='bold' aria-label='Toggle bold'>\n          <ToggleGroupIcon icon={Bold} size={18} />\n        </ToggleGroupItem>\n        <ToggleGroupItem value='italic' aria-label='Toggle italic'>\n          <ToggleGroupIcon icon={Italic} size={18} />\n        </ToggleGroupItem>\n        <ToggleGroupItem value='underline' aria-label='Toggle underline'>\n          <ToggleGroupIcon icon={Underline} size={18} />\n        </ToggleGroupItem>\n      </ToggleGroup>\n    </View>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Menubar Component in React Native\nDESCRIPTION: Example usage of the Menubar component, demonstrating various subcomponents and features like submenus, checkboxes, and radio buttons.\nSOURCE: https://github.com/mrzachnugent/react-native-reusables/blob/main/apps/docs/src/content/docs/components/menubar.mdx#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useNavigation } from 'expo-router';\nimport * as React from 'react';\nimport { Pressable, StyleSheet, View } from 'react-native';\nimport Animated, { FadeIn } from 'react-native-reanimated';\nimport { useSafeAreaInsets } from 'react-native-safe-area-context';\nimport {\n  Menubar,\n  MenubarCheckboxItem,\n  MenubarContent,\n  MenubarItem,\n  MenubarMenu,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarSeparator,\n  MenubarShortcut,\n  MenubarSub,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarTrigger,\n} from '~/components/ui/menubar';\nimport { Text } from '~/components/ui/text';\n\nfunction Example() {\n  const insets = useSafeAreaInsets();\n  const contentInsets = {\n    top: insets.top,\n    bottom: insets.bottom,\n    left: 12,\n    right: 12,\n  };\n  const [value, setValue] = React.useState<string | undefined>();\n  const [isSubOpen, setIsSubOpen] = React.useState(false);\n  const [isSubOpen2, setIsSubOpen2] = React.useState(false);\n  const [isChecked, setIsChecked] = React.useState(false);\n  const [isChecked2, setIsChecked2] = React.useState(false);\n  const [radio, setRadio] = React.useState('michael');\n  const navigation = useNavigation();\n  React.useEffect(() => {\n    const sub = navigation.addListener('blur', () => {\n      onValueChange(undefined);\n    });\n\n    return sub;\n  }, []);\n\n  function closeSubs() {\n    setIsSubOpen(false);\n    setIsSubOpen2(false);\n  }\n\n  function onValueChange(val: string | undefined) {\n    if (typeof val === 'string') {\n      setValue(val);\n      return;\n    }\n    closeSubs();\n    setValue(undefined);\n  }\n\n  return (\n    <View className='flex-1 items-center p-4'>\n      {!!value && (\n        <Pressable\n          onPress={() => {\n            onValueChange(undefined);\n          }}\n          style={StyleSheet.absoluteFill}\n        />\n      )}\n      <Menubar value={value} onValueChange={onValueChange}>\n        <MenubarMenu value='file'>\n          <MenubarTrigger onPress={closeSubs}>\n            <Text>File</Text>\n          </MenubarTrigger>\n          <MenubarContent insets={contentInsets}>\n            <MenubarItem>\n              <Text>New Tab</Text>\n              <MenubarShortcut>⌘T</MenubarShortcut>\n            </MenubarItem>\n            <MenubarItem>\n              <Text>New Window</Text>\n              <MenubarShortcut>⌘N</MenubarShortcut>\n            </MenubarItem>\n            <MenubarItem disabled>\n              <Text>New Incognito Window</Text>\n            </MenubarItem>\n            <MenubarSeparator />\n            <MenubarSub open={isSubOpen} onOpenChange={setIsSubOpen}>\n              <MenubarSubTrigger>\n                <Text>Share</Text>\n              </MenubarSubTrigger>\n              <MenubarSubContent>\n                <Animated.View entering={FadeIn.duration(200)}>\n                  <MenubarItem>\n                    <Text>Email link</Text>\n                  </MenubarItem>\n                  <MenubarItem>\n                    <Text>Messages</Text>\n                  </MenubarItem>\n                  <MenubarItem>\n                    <Text>Notes</Text>\n                  </MenubarItem>\n                </Animated.View>\n              </MenubarSubContent>\n            </MenubarSub>\n            <MenubarSeparator />\n            <MenubarItem>\n              <Text>Print...</Text>\n              <MenubarShortcut>⌘P</MenubarShortcut>\n            </MenubarItem>\n          </MenubarContent>\n        </MenubarMenu>\n        <MenubarMenu value='edit'>\n          <MenubarTrigger onPress={closeSubs}>\n            <Text>Edit</Text>\n          </MenubarTrigger>\n          <MenubarContent insets={contentInsets} className='native:w-48'>\n            <MenubarItem>\n              <Text>Undo</Text>\n              <MenubarShortcut>⌘Z</MenubarShortcut>\n            </MenubarItem>\n            <MenubarItem>\n              <Text>Redo</Text>\n              <MenubarShortcut>⇧⌘Z</MenubarShortcut>\n            </MenubarItem>\n            <MenubarSeparator />\n            <MenubarSub open={isSubOpen2} onOpenChange={setIsSubOpen2}>\n              <MenubarSubTrigger>\n                <Text>Find</Text>\n              </MenubarSubTrigger>\n              <MenubarSubContent>\n                <Animated.View entering={FadeIn.duration(200)}>\n                  <MenubarItem>\n                    <Text>Search the web</Text>\n                  </MenubarItem>\n                  <MenubarSeparator />\n                  <MenubarItem>\n                    <Text>Find...</Text>\n                  </MenubarItem>\n                  <MenubarItem>\n                    <Text>Find Next</Text>\n                  </MenubarItem>\n                  <MenubarItem>\n                    <Text>Find Previous</Text>\n                  </MenubarItem>\n                </Animated.View>\n              </MenubarSubContent>\n            </MenubarSub>\n            <MenubarSeparator />\n            <MenubarItem>\n              <Text>Cut</Text>\n            </MenubarItem>\n            <MenubarItem>\n              <Text>Copy</Text>\n            </MenubarItem>\n            <MenubarItem>\n              <Text>Paste</Text>\n            </MenubarItem>\n          </MenubarContent>\n        </MenubarMenu>\n        <MenubarMenu value='view'>\n          <MenubarTrigger onPress={closeSubs}>\n            <Text>View</Text>\n          </MenubarTrigger>\n          <MenubarContent insets={contentInsets}>\n            <MenubarCheckboxItem\n              checked={isChecked}\n              onCheckedChange={setIsChecked}\n              closeOnPress={false}\n            >\n              <Text>Always Show Bookmarks Bar</Text>\n            </MenubarCheckboxItem>\n            <MenubarCheckboxItem\n              checked={isChecked2}\n              onCheckedChange={setIsChecked2}\n              closeOnPress={false}\n            >\n              <Text>Always Show Full URLs</Text>\n            </MenubarCheckboxItem>\n            <MenubarSeparator />\n            <MenubarItem inset>\n              <Text>Reload</Text>\n              <MenubarShortcut>⌘R</MenubarShortcut>\n            </MenubarItem>\n            <MenubarItem disabled inset>\n              <Text>Force Reload</Text>\n              <MenubarShortcut>⇧⌘R</MenubarShortcut>\n            </MenubarItem>\n            <MenubarSeparator />\n            <MenubarItem inset>\n              <Text>Toggle Fullscreen</Text>\n            </MenubarItem>\n            <MenubarSeparator />\n            <MenubarItem inset>\n              <Text>Hide Sidebar</Text>\n            </MenubarItem>\n          </MenubarContent>\n        </MenubarMenu>\n        <MenubarMenu value='profile'>\n          <MenubarTrigger onPress={closeSubs}>\n            <Text>Profiles</Text>\n          </MenubarTrigger>\n          <MenubarContent insets={contentInsets}>\n            <MenubarRadioGroup value={radio} onValueChange={setRadio}>\n              <MenubarRadioItem closeOnPress={false} value='andy'>\n                <Text>Andy</Text>\n              </MenubarRadioItem>\n              <MenubarRadioItem closeOnPress={false} value='michael'>\n                <Text>Michael</Text>\n              </MenubarRadioItem>\n              <MenubarRadioItem closeOnPress={false} value='creed'>\n                <Text>Creed</Text>\n              </MenubarRadioItem>\n            </MenubarRadioGroup>\n            <MenubarSeparator />\n            <MenubarItem inset>\n              <Text>Edit...</Text>\n            </MenubarItem>\n            <MenubarSeparator />\n            <MenubarItem inset>\n              <Text>Add Profile...</Text>\n            </MenubarItem>\n          </MenubarContent>\n        </MenubarMenu>\n      </Menubar>\n    </View>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Table Component in React Native\nDESCRIPTION: Example of how to use the Table component in a React Native application. It demonstrates creating a table with headers, rows, and a footer, using FlashList for efficient rendering of large datasets.\nSOURCE: https://github.com/mrzachnugent/react-native-reusables/blob/main/apps/docs/src/content/docs/components/table.mdx#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { FlashList } from '@shopify/flash-list';\nimport { Stack } from 'expo-router';\nimport * as React from 'react';\nimport { Alert, ScrollView, View, useWindowDimensions } from 'react-native';\nimport { useSafeAreaInsets } from 'react-native-safe-area-context';\nimport { Button } from '~/components/ui/button';\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableFooter,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from '~/components/ui/table';\nimport { Text } from '~/components/ui/text';\nimport { ChevronDown } from '~/lib/icons/ChevronDown';\nimport { cn } from '~/lib/utils';\n\nconst INVOICES = [\n  {\n    invoice: 'INV001',\n    paymentStatus: 'Paid',\n    totalAmount: '$250.00',\n    paymentMethod: 'Credit Card',\n  },\n  ...\n];\n\nconst MIN_COLUMN_WIDTHS = [120, 120, 100, 120];\n\nfunction Example() {\n  const { width } = useWindowDimensions();\n  const insets = useSafeAreaInsets();\n\n  const columnWidths = React.useMemo(() => {\n    return MIN_COLUMN_WIDTHS.map((minWidth) => {\n      const evenWidth = width / MIN_COLUMN_WIDTHS.length;\n      return evenWidth > minWidth ? evenWidth : minWidth;\n    });\n  }, [width]);\n\n  return (\n      <ScrollView horizontal bounces={false} showsHorizontalScrollIndicator={false}>\n        <Table aria-labelledby='invoice-table'>\n          <TableHeader>\n            <TableRow>\n              <TableHead className='px-0.5' style={{ width: columnWidths[0] }}>\n               <Text>Invoice</Text>\n              </TableHead>\n              <TableHead style={{ width: columnWidths[1] }}>\n                <Text>Status</Text>\n              </TableHead>\n              <TableHead style={{ width: columnWidths[2] }}>\n                <Text>Method</Text>\n              </TableHead>\n              <TableHead style={{ width: columnWidths[3] }}>\n                <Text className='text-center md:text-right md:pr-5'>Amount</Text>\n              </TableHead>\n            </TableRow>\n          </TableHeader>\n          <TableBody>\n            <FlashList\n              data={INVOICES}\n              estimatedItemSize={45}\n              contentContainerStyle={{\n                paddingBottom: insets.bottom,\n              }}\n              showsVerticalScrollIndicator={false}\n              renderItem={({ item: invoice, index }) => {\n                return (\n                  <TableRow\n                    key={invoice.invoice}\n                    className={cn('active:bg-secondary', index % 2 && 'bg-muted/40 ')}\n                  >\n                    <TableCell style={{ width: columnWidths[0] }}>\n                      <Text>{invoice.invoice}</Text>\n                    </TableCell>\n                    <TableCell style={{ width: columnWidths[1] }}>\n                      <Text>{invoice.paymentStatus}</Text>\n                    </TableCell>\n                    <TableCell style={{ width: columnWidths[2] }}>\n                      <Text>{invoice.paymentMethod}</Text>\n                    </TableCell>\n                    <TableCell style={{ width: columnWidths[3] }} className='items-end '>\n                      <Button\n                        variant='secondary'\n                        size='sm'\n                        className='shadow-sm shadow-foreground/10 mr-3'\n                        onPress={() => {\n                          Alert.alert(\n                            invoice.totalAmount,\n                            `You pressed the price button on invoice ${invoice.invoice}.`\n                          );\n                        }}\n                      >\n                        <Text>{invoice.totalAmount}</Text>\n                      </Button>\n                    </TableCell>\n                  </TableRow>\n                );\n              }}\n              ListFooterComponent={() => {\n                return (\n                  <>\n                    <TableFooter>\n                      <TableRow>\n                        <TableCell className='flex-1 justify-center'>\n                          <Text className='text-foreground'>Total</Text>\n                        </TableCell>\n                        <TableCell className='items-end pr-8'>\n                          <Button\n                            size='sm'\n                            variant='ghost'\n                            onPress={() => {\n                              Alert.alert(\n                                'Total Amount',\n                                `You pressed the total amount price button.`\n                              );\n                            }}\n                          >\n                            <Text>$2,500.00</Text>\n                          </Button>\n                        </TableCell>\n                      </TableRow>\n                    </TableFooter>\n                    <View className='items-center py-3 ios:pb-0'>\n                      <Text\n                        nativeID='invoice-table'\n                        className='items-center text-sm text-muted-foreground'\n                      >\n                        A list of your recent invoices.\n                      </Text>\n                    </View>\n                  </>\n                );\n              }}\n            />\n          </TableBody>\n        </Table>\n      </ScrollView>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Icon Class Name Resolver\nDESCRIPTION: Function to enable className support for Lucide icons using NativeWind's cssInterop, allowing style properties like color and opacity to be controlled via className.\nSOURCE: https://github.com/mrzachnugent/react-native-reusables/blob/main/apps/docs/src/content/docs/getting-started/icons.mdx#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport type { LucideIcon } from 'lucide-react-native';\nimport { cssInterop } from 'nativewind';\n\nexport function iconWithClassName(icon: LucideIcon) {\ncssInterop(icon, {\n    className: {\n    target: 'style',\n    nativeStyleToProp: {\n        color: true,\n        opacity: true,\n    },\n    },\n});\n}\n```\n\n----------------------------------------\n\nTITLE: Using Avatar Component in React Native\nDESCRIPTION: Example of how to use the Avatar component in a React Native application, including Avatar, AvatarImage, and AvatarFallback subcomponents.\nSOURCE: https://github.com/mrzachnugent/react-native-reusables/blob/main/apps/docs/src/content/docs/components/avatar.mdx#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Avatar, AvatarFallback, AvatarImage } from '~/components/ui/avatar';\nimport { Text } from '~/components/ui/text';\n\nconst GITHUB_AVATAR_URI = 'https://github.com/mrzachnugent.png';\n\nfunction Example() {\n  return (\n     <Avatar alt=\"Zach Nugent's Avatar\">\n        <AvatarImage source={{ uri: GITHUB_AVATAR_URI }} />\n        <AvatarFallback>\n          <Text>ZN</Text>\n        </AvatarFallback>\n      </Avatar>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using Input Component in React Native\nDESCRIPTION: Example showing how to implement the Input component with state management and accessibility props in a React Native application.\nSOURCE: https://github.com/mrzachnugent/react-native-reusables/blob/main/apps/docs/src/content/docs/components/input.mdx#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Input } from '~/components/ui/input';\nimport { Text } from '~/components/ui/text';\n\nfunction Example() {\n  const [value, setValue] = React.useState('');\n\n  const onChangeText = (text: string) => {\n    setValue(text);\n  };\n\n  return (\n      <Input\n        placeholder='Write some stuff...'\n        value={value}\n        onChangeText={onChangeText}\n        aria-labelledby='inputLabel'\n        aria-errormessage='inputError'\n      />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using Textarea Component in React Native\nDESCRIPTION: Example showing how to implement the Textarea component with state management and accessibility props.\nSOURCE: https://github.com/mrzachnugent/react-native-reusables/blob/main/apps/docs/src/content/docs/components/textarea.mdx#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Textarea } from '~/components/ui/textarea';\nimport { Text } from '~/components/ui/text';\n\nfunction Example() {\n  const [value, setValue] = React.useState('');\n  return (\n      <Textarea\n        ref={inputRef}\n        placeholder='Write some stuff...'\n        value={value}\n        onChangeText={setValue}\n        aria-labelledby='textareaLabel'\n      />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using Progress Component in React Native\nDESCRIPTION: Example implementation of the Progress component showing how to use it with a percentage value and web-specific styling\nSOURCE: https://github.com/mrzachnugent/react-native-reusables/blob/main/apps/docs/src/content/docs/components/progress.mdx#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Progress } from '~/components/ui/progress';\n\nfunction Example() {\n  return <Progress value={87} className='web:w-[60%]' />;\n}\n```\n\n----------------------------------------\n\nTITLE: Using Alert Component in React Native\nDESCRIPTION: Example of how to use the Alert component in a React Native application. Shows two variants: a default alert with a Terminal icon and a destructive alert with an AlertTriangle icon.\nSOURCE: https://github.com/mrzachnugent/react-native-reusables/blob/main/apps/docs/src/content/docs/components/alert.mdx#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Alert, AlertDescription, AlertTitle } from '~/components/ui/alert';\nimport { AlertTriangle } from '~/lib/icons/AlertTriangle';\nimport { Terminal } from '~/lib/icons/Terminal';\n\nfunction AlertExample() {\n  return (\n      <Alert icon={Terminal} className='max-w-xl'>\n        <AlertTitle>Heads up!</AlertTitle>\n        <AlertDescription>\n          You can use a terminal to run commands on your computer.\n        </AlertDescription>\n      </Alert>\n      <Alert icon={AlertTriangle} variant='destructive' className='max-w-xl'>\n        <AlertTitle>Danger!</AlertTitle>\n        <AlertDescription>\n          High voltage. Do not touch. Risk of electric shock. Keep away from children.\n        </AlertDescription>\n      </Alert>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Switch Component with Label\nDESCRIPTION: Example showing how to use the Switch component with a Label in a React Native application. Demonstrates state management and component integration.\nSOURCE: https://github.com/mrzachnugent/react-native-reusables/blob/main/apps/docs/src/content/docs/components/switch.mdx#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport * as React from 'react';\nimport { View } from 'react-native';\nimport { Label } from '~/components/ui/label';\nimport { Switch } from '~/components/ui/switch';\n\nfunction Example() {\n  const [checked, setChecked] = React.useState(false);\n\n  return (\n    <>\n      <View className='flex-1 justify-center items-center p-6 gap-12'>\n        <View className='flex-row items-center gap-2'>\n          <Switch checked={checked} onCheckedChange={setChecked} nativeID='airplane-mode' />\n          <Label\n            nativeID='airplane-mode'\n            onPress={() => {\n              setChecked((prev) => !prev);\n            }}\n          >\n            Airplane Mode\n          </Label>\n        </View>\n      </View>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Collapsible Component Usage in React Native\nDESCRIPTION: Example showing how to implement a collapsible component with trigger and content elements. This demonstrates the core functionality of toggling content visibility.\nSOURCE: https://github.com/mrzachnugent/react-native-reusables/blob/main/apps/docs/src/content/docs/components/collapsible.mdx#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Collapsible, CollapsibleTrigger, CollapsibleContent } from '~/components/ui/collapsible';\nimport { Text } from '~/components/ui/text';\n\nfunction Example() {\n  return (\n      <Collapsible>\n            <CollapsibleTrigger >\n               <Text>Toggle</Text>\n            </CollapsibleTrigger>\n            <CollapsibleContent >\n              <Text>@radix-ui/react</Text>\n            </CollapsibleContent>\n      </Collapsible>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using Accordion Component in React Native\nDESCRIPTION: Example showing how to implement the Accordion component with multiple items. Demonstrates setting default values, using multiple type with collapsible behavior, and structuring accordion content.\nSOURCE: https://github.com/mrzachnugent/react-native-reusables/blob/main/apps/docs/src/content/docs/components/accordion.mdx#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport {\n  Accordion,\n  AccordionContent,\n  AccordionItem,\n  AccordionTrigger,\n} from '~/components/ui/accordion';\nimport { Text } from '~/components/ui/text';\n\nfunction Example() {\n  return (\n      <Accordion\n        type='multiple'\n        collapsible\n        defaultValue={['item-1']}\n        className='w-full max-w-sm native:max-w-md'\n      >\n        <AccordionItem value='item-1'>\n          <AccordionTrigger>\n            <Text>Is it accessible?</Text>\n          </AccordionTrigger>\n          <AccordionContent>\n            <Text>Yes. It adheres to the WAI-ARIA design pattern.</Text>\n          </AccordionContent>\n        </AccordionItem>\n        <AccordionItem value='item-2'>\n          <AccordionTrigger>\n            <Text>What are universal components?</Text>\n          </AccordionTrigger>\n          <AccordionContent>\n            <Text>\n              In the world of React Native, universal components are components that work on both\n              web and native platforms.\n            </Text>\n          </AccordionContent>\n        </AccordionItem>\n      </Accordion>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of AspectRatio Component in React Native\nDESCRIPTION: Example showing how to import and use the AspectRatio component with a 16:9 ratio. The component extends the standard View props from React Native.\nSOURCE: https://github.com/mrzachnugent/react-native-reusables/blob/main/apps/docs/src/content/docs/components/aspect-ratio.mdx#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { AspectRatio } from '~/components/ui/aspect-ratio';\n\nfunction Example() {\n  return (\n      <AspectRatio ratio={16 / 9} />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using the Checkbox Component in React Native\nDESCRIPTION: Example of using the Checkbox component with state management. This snippet demonstrates how to implement a controlled checkbox with React's useState hook.\nSOURCE: https://github.com/mrzachnugent/react-native-reusables/blob/main/apps/docs/src/content/docs/components/checkbox.mdx#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Checkbox } from '~/components/ui/checkbox';\n\nfunction Example() {\n  const [checked, setChecked] = React.useState(false); \n  return (\n     <Checkbox checked={checked} onCheckedChange={setChecked} />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Button Component Usage Example\nDESCRIPTION: Demonstrates how to import and use the Button component with Text component in a React Native application.\nSOURCE: https://github.com/mrzachnugent/react-native-reusables/blob/main/apps/docs/src/content/docs/components/button.mdx#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Button } from '~/components/ui/button';\nimport { Text } from '~/components/ui/text';\n\nfunction Example() {\n  return (\n      <Button>\n        <Text>Default</Text>\n      </Button>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Tooltip Component in React Native\nDESCRIPTION: Example usage of the Tooltip component in a React Native application. It demonstrates how to use Tooltip, TooltipTrigger, and TooltipContent components together with safe area insets and conditional rendering based on platform.\nSOURCE: https://github.com/mrzachnugent/react-native-reusables/blob/main/apps/docs/src/content/docs/components/tooltip.mdx#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport * as React from 'react';\nimport { Platform, View } from 'react-native';\nimport { useSafeAreaInsets } from 'react-native-safe-area-context';\nimport { Button } from '~/components/ui/button';\nimport { Tooltip, TooltipContent, TooltipTrigger } from '~/components/ui/tooltip';\nimport { Text } from '~/components/ui/text';\n\nfunction Example() {\n  const insets = useSafeAreaInsets();\n  const contentInsets = {\n    top: insets.top,\n    bottom: insets.bottom,\n    left: 12,\n    right: 12,\n  };\n  return (\n    <View className='flex-1 justify-center items-center p-6'>\n      <Tooltip delayDuration={150}>\n        <TooltipTrigger asChild>\n          <Button variant='outline'>\n            <Text>{Platform.OS === 'web' ? 'Hover me' : 'Press me'}</Text>\n          </Button>\n        </TooltipTrigger>\n        <TooltipContent insets={contentInsets}>\n          <Text className='native:text-lg'>Add to library</Text>\n        </TooltipContent>\n      </Tooltip>\n    </View>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Installing React Native Reusables CLI\nDESCRIPTION: Command to run the React Native Reusables CLI tool to add components to your project. Uses npx to execute the latest version of the CLI.\nSOURCE: https://github.com/mrzachnugent/react-native-reusables/blob/main/apps/cli/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx @react-native-reusables/cli@latest add\n```\n\n----------------------------------------\n\nTITLE: Using Separator Component in React Native\nDESCRIPTION: Example showing how to use the Separator component in both horizontal and vertical orientations to create visual distinctions between content sections.\nSOURCE: https://github.com/mrzachnugent/react-native-reusables/blob/main/apps/docs/src/content/docs/components/separator.mdx#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { View } from 'react-native';\nimport { Separator } from '~/components/ui/separator';\nimport { H4, P, Small } from '~/components/ui/typography';\n\nfunction Example() {\n  return (\n    <View className='flex-1 justify-center items-center p-6 gap-12'>\n      <View className='w-full max-w-xs '>\n        <View className='gap-1'>\n          <H4 className='text-sm native:text-base font-medium leading-none'>Radix Primitives</H4>\n          <P className='text-sm native:text-base text-muted-foreground'>\n            An open-source UI component library.\n          </P>\n        </View>\n        <Separator className='my-4' />\n        <View className='flex flex-row h-5 items-center gap-4 '>\n          <Small className='font-normal'>Blog</Small>\n          <Separator orientation='vertical' />\n          <Small className='font-normal'>Docs</Small>\n          <Separator orientation='vertical' />\n          <Small className='font-normal'>Source</Small>\n        </View>\n      </View>\n    </View>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using Label Component in React Native\nDESCRIPTION: Example of how to import and use the Label component in a React Native application. The nativeID prop is used to link the label to a form field with the corresponding aria-labelledby value.\nSOURCE: https://github.com/mrzachnugent/react-native-reusables/blob/main/apps/docs/src/content/docs/components/label.mdx#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Label } from '~/components/ui/label';\n\nfunction Example() {\n  return <Label nativeID='name'>Name</Label>\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Android Navigation Bar Colors Based on Theme in React Native\nDESCRIPTION: A function that adjusts the Android navigation bar's button style and background color according to the specified theme. It uses expo-navigation-bar to modify the appearance and safely checks if the platform is Android before making changes.\nSOURCE: https://github.com/mrzachnugent/react-native-reusables/blob/main/apps/docs/src/content/docs/extras/android-navigation-bar.mdx#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport * as NavigationBar from 'expo-navigation-bar';\nimport { Platform } from 'react-native';\nimport { NAV_THEME } from '~/lib/constants';\n\nexport async function setAndroidNavigationBar(theme: 'light' | 'dark') {\n  if (Platform.OS !== 'android') return;\n  await NavigationBar.setButtonStyleAsync(theme === 'dark' ? 'light' : 'dark');\n  await NavigationBar.setBackgroundColorAsync(\n    theme === 'dark' ? NAV_THEME.dark.background : NAV_THEME.light.background\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using Badge Component in React Native\nDESCRIPTION: Example showing how to import and implement the Badge component with default text content\nSOURCE: https://github.com/mrzachnugent/react-native-reusables/blob/main/apps/docs/src/content/docs/components/badge.mdx#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Badge } from '~/components/ui/badge';\nimport { Text } from '~/components/ui/text';\n\nfunction Example() {\n  return (\n      <Badge>\n        <Text>Default</Text>\n      </Badge>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Material Top Tabs Navigator in Expo Router\nDESCRIPTION: TypeScript code for setting up a Material Top Tabs navigator using Expo Router. It includes imports, type definitions, and a custom navigator component with screen configurations.\nSOURCE: https://github.com/mrzachnugent/react-native-reusables/blob/main/apps/docs/src/content/docs/extras/material-top-tabs.mdx#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport type {\n  MaterialTopTabNavigationEventMap,\n  MaterialTopTabNavigationOptions,\n} from '@react-navigation/material-top-tabs';\nimport { createMaterialTopTabNavigator } from '@react-navigation/material-top-tabs';\nimport {\n  useTheme,\n  type ParamListBase,\n  type TabNavigationState,\n} from '@react-navigation/native';\nimport { withLayoutContext } from 'expo-router';\n\nconst { Navigator } = createMaterialTopTabNavigator();\n\nconst MaterialTopTabs = withLayoutContext<\n  MaterialTopTabNavigationOptions,\n  typeof Navigator,\n  TabNavigationState<ParamListBase>,\n  MaterialTopTabNavigationEventMap\n>(Navigator);\n\nexport default function MaterialTopTabsLayout() {\n  const { colors } = useTheme();\n  return (\n    <MaterialTopTabs\n      initialRouteName='index'\n      screenOptions={{\n        tabBarActiveTintColor: colors.text,\n        tabBarInactiveTintColor: 'grey',\n        tabBarLabelStyle: {\n          fontSize: 14,\n          textTransform: 'capitalize',\n          fontWeight: 'bold',\n        },\n        tabBarIndicatorStyle: {\n          backgroundColor: colors.text,\n        },\n        tabBarScrollEnabled: true,\n        tabBarItemStyle: { width: 'auto', minWidth: 100 },\n      }}\n    >\n      <MaterialTopTabs.Screen\n        name='index'\n        options={{\n          title: 'Blue',\n        }}\n      />\n      <MaterialTopTabs.Screen\n        name='red'\n        options={{\n          title: 'Red',\n        }}\n      />\n      <MaterialTopTabs.Screen\n        name='green'\n        options={{\n          title: 'Green',\n        }}\n      />\n      <MaterialTopTabs.Screen\n        name='purple'\n        options={{\n          title: 'Purple',\n        }}\n      />\n    </MaterialTopTabs>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Programmatic Control of HoverCard Component\nDESCRIPTION: Shows how to programmatically control component visibility using refs and useEffect, specifically with a HoverCard component.\nSOURCE: https://github.com/mrzachnugent/react-native-reusables/blob/main/apps/docs/src/content/docs/getting-started/common-patterns.mdx#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport * as HoverCardPrimitive from '@rn-primitives/hover-card';\nimport { Text, View } from 'react-native';\nimport * as React from 'react';\n\nfunction OnMountExample() {\n  const triggerRef = React.useRef<React.ElementRef<typeof HoverCardPrimitive.Trigger>>(null);\n\n   React.useEffect(() => {\n    const timeout = setTimeout(() => {\n      triggerRef.current?.open();\n    }, 100 + 200);\n\n    return () => {\n      clearTimeout(timeout);\n    };\n  }, []);\n\n  return (\n        <HoverCardPrimitive.Root>\n          <HoverCardPrimitive.Trigger ref={triggerRef}>\n              <Text>@nextjs</Text>\n          </HoverCardPrimitive.Trigger>\n          <HoverCardPrimitive.Content>\n            <View>\n              <Text>@nextjs</Text>\n              <Text>\n                The React Framework – created and maintained by @vercel.\n              </Text>\n              <View>\n                <Text>\n                  Joined December 2021\n                </Text>\n              </View>\n            </View>\n          </HoverCardPrimitive.Content>\n        </HoverCardPrimitive.Root>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using Skeleton Component in React Native\nDESCRIPTION: Example of how to import and use the Skeleton component in a React Native application, displaying a circular skeleton loader.\nSOURCE: https://github.com/mrzachnugent/react-native-reusables/blob/main/apps/docs/src/content/docs/components/skeleton.mdx#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Skeleton } from '~/components/ui/skeleton';\n\nfunction Example() {\n  return (\n     <Skeleton className='h-12 w-12 rounded-full' />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Example Screen Using Text Component with Inheritance\nDESCRIPTION: A screen component demonstrating various ways of using the Text component with inheritance, showing how specificity works with different parent providers and direct className props.\nSOURCE: https://github.com/mrzachnugent/react-native-reusables/blob/main/apps/docs/src/content/docs/components/text.mdx#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Text } from '~/components/ui/text';\nimport { Parent } from './Parent';\nimport { OtherParent } from './OtherParent';\n\nfunction Screen(){\n  return (\n      <>\n      {/* Default behavior without a parent `TextClassContext.Provider` */}\n      <Text>The applied className is foreground</Text>\n      <Parent>\n          {/* Inherits the `TextClassContext.Provider` value from the `Parent` component and overrides the default `Text` component `className` */}\n          <Text>The applied className is text-red-500</Text>\n          {/* This `className` will override the `TextClassContext.Provider` value */}\n          <Text className=\"text-blue-500\">The applied className is text-blue-500</Text>\n          <OtherParent>\n              {/* Inherits the `TextClassContext.Provider` value from the `OtherParent` component overrides the `TextClassContext.Provider` value from the `Parent` */}\n              <Text>The applied className is text-purple-500</Text>\n          </OtherParent>\n      </Parent>\n      </>\n  )\n }\n```\n\n----------------------------------------\n\nTITLE: Implementing PortalHost in Root Component\nDESCRIPTION: Example of how to add a PortalHost component as the last child of the Root component, which is required for the Dialog to function properly.\nSOURCE: https://github.com/mrzachnugent/react-native-reusables/blob/main/apps/docs/src/content/docs/components/dialog.mdx#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { PortalHost } from '@rn-primitives/portal';\n\nfunction Root() {\n  return (\n    <>\n      <Stack />\n      {/* Default Portal Host (one per app) */}\n      <PortalHost />\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: React Native Menubar Component Interface Definitions\nDESCRIPTION: TypeScript interface definitions for Menubar components including menus, triggers, portals, and content elements. Each component extends basic React Native components with additional props for enhanced menu functionality.\nSOURCE: https://github.com/mrzachnugent/react-native-reusables/blob/main/apps/docs/src/content/docs/components/menubar.mdx#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ninterface MenubarMenuProps extends ViewProps {\n  value: string;\n  asChild?: boolean;\n}\n\ninterface MenubarTriggerProps extends PressableProps {\n  asChild?: boolean;\n  inset?: boolean;\n}\n\ninterface MenubarPortalProps {\n  children: React.ReactNode;\n  forceMount?: true;\n  hostName?: string;\n  container?: HTMLElement | null;\n}\n\ninterface MenubarContentProps extends ViewProps {\n  asChild?: boolean;\n  overlayStyle?: StyleProp<ViewStyle>;\n  overlayClassName?: string;\n  forceMount?: true;\n  alignOffset?: number;\n  insets?: Insets;\n  avoidCollisions?: boolean;\n  align?: 'start' | 'center' | 'end';\n  side?: 'top' | 'bottom';\n  sideOffset?: number;\n  disablePositioningStyle?: boolean;\n  loop?: boolean;\n  onCloseAutoFocus?: (event: Event) => void;\n  onEscapeKeyDown?: (event: KeyboardEvent) => void;\n  onPointerDownOutside?: (event: PointerDownOutsideEvent) => void;\n  onFocusOutside?: (event: FocusOutsideEvent) => void;\n  onInteractOutside?: PointerDownOutsideEvent | FocusOutsideEvent;\n  collisionBoundary?: Element | null | Array<Element | null>;\n  sticky?: 'partial' | 'always';\n  hideWhenDetached?: boolean;\n}\n```\n\n----------------------------------------\n\nTITLE: Adding PortalHost to Root Component\nDESCRIPTION: Setup code for adding the required PortalHost component to the app's root component. This is a prerequisite for the Hover Card to work properly.\nSOURCE: https://github.com/mrzachnugent/react-native-reusables/blob/main/apps/docs/src/content/docs/components/hover-card.mdx#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { PortalHost } from '@rn-primitives/portal';\n\nfunction Root() {\n  return (\n    <>\n      <Stack />\n      {/* Default Portal Host (one per app) */}\n      <PortalHost />\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing PortalHost in Root Component\nDESCRIPTION: Example of adding a PortalHost component as the last child of the Root component, which is required for the Select component to function properly.\nSOURCE: https://github.com/mrzachnugent/react-native-reusables/blob/main/apps/docs/src/content/docs/components/select.mdx#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { PortalHost } from '@rn-primitives/portal';\n\nfunction Root() {\n  return (\n    <>\n      <Stack />\n      {/* Default Portal Host (one per app) */}\n      <PortalHost />\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Portal Host for Context Menu\nDESCRIPTION: Implementation of the PortalHost component required as the last child of your Root component to enable context menu functionality.\nSOURCE: https://github.com/mrzachnugent/react-native-reusables/blob/main/apps/docs/src/content/docs/components/context-menu.mdx#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { PortalHost } from '@rn-primitives/portal';\n\nfunction Root() {\n  return (\n    <>\n      <Stack />\n      {/* Default Portal Host (one per app) */}\n      <PortalHost />\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Adding PortalHost to Root Component in React Native\nDESCRIPTION: Example of adding a PortalHost component as the last child of the Root component in a React Native app. This is required for the Tooltip component to function properly.\nSOURCE: https://github.com/mrzachnugent/react-native-reusables/blob/main/apps/docs/src/content/docs/components/tooltip.mdx#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { PortalHost } from '@rn-primitives/portal';\n\nfunction Root() {\n  return (\n    <>\n      <Stack />\n      {/* Default Portal Host (one per app) */}\n      <PortalHost />\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Adding PortalHost to Root Component\nDESCRIPTION: Code to add the required PortalHost component as the last child of the Root component, which is necessary for the Alert Dialog to function properly.\nSOURCE: https://github.com/mrzachnugent/react-native-reusables/blob/main/apps/docs/src/content/docs/components/alert-dialog.mdx#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { PortalHost } from '@rn-primitives/portal';\n\nfunction Root() {\n  return (\n    <>\n      <Stack />\n      {/* Default Portal Host (one per app) */}\n      <PortalHost />\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Icon Dependencies with Expo\nDESCRIPTION: Install required packages react-native-svg and lucide-react-native using Expo CLI.\nSOURCE: https://github.com/mrzachnugent/react-native-reusables/blob/main/apps/docs/src/content/docs/getting-started/icons.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx expo install react-native-svg lucide-react-native\n```\n\n----------------------------------------\n\nTITLE: Defining NavigationMenuLink Props in Markdown\nDESCRIPTION: This code snippet defines the props for the NavigationMenuLink component. It extends Pressable props and includes two additional boolean props: active and asChild.\nSOURCE: https://github.com/mrzachnugent/react-native-reusables/blob/main/apps/docs/src/content/docs/components/navigation-menu.mdx#2025-04-21_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n|  Prop   |  Type   |     Note     |\n| :-----: | :-----: | :----------: |\n| active  | boolean | _(optional)_ |\n| asChild | boolean | _(optional)_ |\n```\n\n----------------------------------------\n\nTITLE: Adding Portal Host to Root Component\nDESCRIPTION: Configuration code for setting up the required PortalHost component in the app root layout\nSOURCE: https://github.com/mrzachnugent/react-native-reusables/blob/main/apps/docs/src/content/docs/components/navigation-menu.mdx#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { PortalHost } from '@rn-primitives/portal';\n\nfunction Root() {\n  return (\n    <>\n      <Stack />\n      {/* Default Portal Host (one per app) */}\n      <PortalHost />\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Defining NavigationMenuContent Props in Markdown\nDESCRIPTION: This code snippet defines the props for the NavigationMenuContent component, including their types and optional status. It extends View props and includes both cross-platform and platform-specific props.\nSOURCE: https://github.com/mrzachnugent/react-native-reusables/blob/main/apps/docs/src/content/docs/components/navigation-menu.mdx#2025-04-21_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n|          Prop           |                     Type                     |           Note           |\n| :---------------------: | :------------------------------------------: | :----------------------: |\n|         asChild         |                   boolean                    |       _(optional)_       |\n|       forceMount        |              true \\| undefined               |       _(optional)_       |\n|       alignOffset       |                    number                    | Native Only _(optional)_ |\n|         insets          |                    Insets                    | Native Only _(optional)_ |\n|     avoidCollisions     |                   boolean                    | Native Only _(optional)_ |\n|          align          |         'start' \\| 'center' \\| 'end'         | Native Only _(optional)_ |\n|          side           |              'top' \\| 'bottom'               | Native Only _(optional)_ |\n|       sideOffset        |                    number                    | Native Only _(optional)_ |\n| disablePositioningStyle |                   boolean                    | Native Only _(optional)_ |\n|          loop           |                   boolean                    |  Web Only _(optional)_   |\n|     onEscapeKeyDown     |        (event: KeyboardEvent) => void        |  Web Only _(optional)_   |\n|  onPointerDownOutside   |  (event\\: PointerDownOutsideEvent) => void   |  Web Only _(optional)_   |\n|     onFocusOutside      |      (event: FocusOutsideEvent) => void      |  Web Only _(optional)_   |\n|    onInteractOutside    | PointerDownOutsideEvent \\| FocusOutsideEvent |  Web Only _(optional)_   |\n```\n\n----------------------------------------\n\nTITLE: Adding PortalHost to Root Component\nDESCRIPTION: Configuration required to add a PortalHost component as the last child of the Root component, which is necessary for the Popover to function properly.\nSOURCE: https://github.com/mrzachnugent/react-native-reusables/blob/main/apps/docs/src/content/docs/components/popover.mdx#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { PortalHost } from '@rn-primitives/portal';\n\nfunction Root() {\n  return (\n    <>\n      <Stack />\n      {/* Default Portal Host (one per app) */}\n      <PortalHost />\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying File Tree Structure in Markdown\nDESCRIPTION: This snippet shows how to represent a file tree structure using markdown syntax. It illustrates the recommended folder structure for the React Native Reusables project.\nSOURCE: https://github.com/mrzachnugent/react-native-reusables/blob/main/apps/docs/src/content/docs/getting-started/introduction.mdx#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n<FileTree>\n    - components/\n      - ui/\n    - lib/\n</FileTree>\n```\n\n----------------------------------------\n\nTITLE: Implementing Sun Icon Component\nDESCRIPTION: Example implementation of the Sun icon component with className support using iconWithClassName wrapper.\nSOURCE: https://github.com/mrzachnugent/react-native-reusables/blob/main/apps/docs/src/content/docs/getting-started/icons.mdx#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Sun } from 'lucide-react-native';\nimport { iconWithClassName } from './iconWithClassName';\niconWithClassName(Sun);\nexport { Sun };\n```\n\n----------------------------------------\n\nTITLE: Installing Keyboard Hook in React Native\nDESCRIPTION: Shows how to import and use the keyboard hook from a lib directory. The hook should be copied to ~/lib/keyboard.tsx in your project.\nSOURCE: https://github.com/mrzachnugent/react-native-reusables/blob/main/apps/docs/src/content/docs/extras/keyboard.mdx#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport * as React from 'react';\nimport { Input } from '~/components/ui/input';\nimport { useKeyboard } from '~/lib/keyboard';\n\nfunction Example() {\n  const { isKeyboardVisible, keyboardHeight, dismissKeyboard } = useKeyboard();\n\n  console.log({ isKeyboardVisible, keyboardHeight });\n\n  function onChangeText(text: string) {\n    console.log(\"text\", text);\n    if (text === 'dismiss') {\n      dismissKeyboard();\n    }\n  }\n\n  return <Input onChangeText={onChangeText} />\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing MoonStar Icon Component\nDESCRIPTION: Example implementation of the MoonStar icon component with className support using iconWithClassName wrapper.\nSOURCE: https://github.com/mrzachnugent/react-native-reusables/blob/main/apps/docs/src/content/docs/getting-started/icons.mdx#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { MoonStar } from 'lucide-react-native';\nimport { iconWithClassName } from './iconWithClassName';\niconWithClassName(MoonStar);\nexport { MoonStar };\n```\n\n----------------------------------------\n\nTITLE: Installing expo-navigation-bar dependency in React Native\nDESCRIPTION: Command to install the expo-navigation-bar package which is required for customizing the Android navigation bar appearance.\nSOURCE: https://github.com/mrzachnugent/react-native-reusables/blob/main/apps/docs/src/content/docs/extras/android-navigation-bar.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx expo install expo-navigation-bar\n```\n\n----------------------------------------\n\nTITLE: Installing React Native Reusables with CLI Init Command\nDESCRIPTION: Command to create a new project using the React Native Reusables CLI. This initializes a fresh project with all necessary dependencies and configurations.\nSOURCE: https://github.com/mrzachnugent/react-native-reusables/blob/main/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx @react-native-reusables/cli@latest init\n```\n\n----------------------------------------\n\nTITLE: Parent Component with TextClassContext Provider\nDESCRIPTION: A parent component that provides a text class context to its children, setting their text color to red by default.\nSOURCE: https://github.com/mrzachnugent/react-native-reusables/blob/main/apps/docs/src/content/docs/components/text.mdx#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { TextClassContext } from '~/components/ui/text';\n\nexport function Parent({ children }) {\n  return (\n      <TextClassContext.Provider value=\"text-red-500\">\n          <View>\n              {children}\n          </View>\n      </TextClassContext.Provider>\n  )\n }\n```\n\n----------------------------------------\n\nTITLE: Adding Components with CLI Add Command\nDESCRIPTION: Command to add individual components to an existing project using the React Native Reusables CLI. This allows for selective component installation.\nSOURCE: https://github.com/mrzachnugent/react-native-reusables/blob/main/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx @react-native-reusables/cli@latest add\n```\n\n----------------------------------------\n\nTITLE: OtherParent Component with TextClassContext Provider\nDESCRIPTION: Another parent component that provides a different text class context to its children, setting their text color to purple.\nSOURCE: https://github.com/mrzachnugent/react-native-reusables/blob/main/apps/docs/src/content/docs/components/text.mdx#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { TextClassContext } from '~/components/ui/text';\n\nexport function OtherParent({ children }) {\n  return (\n      <TextClassContext.Provider value=\"text-purple-500\">\n          <View>\n              {children}\n          </View>\n      </TextClassContext.Provider>\n  )\n }\n```\n\n----------------------------------------\n\nTITLE: Installing Dialog Component via CLI\nDESCRIPTION: Command to install the Dialog component using the React Native Reusables CLI.\nSOURCE: https://github.com/mrzachnugent/react-native-reusables/blob/main/apps/docs/src/content/docs/components/dialog.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx @react-native-reusables/cli@latest add dialog\n```\n\n----------------------------------------\n\nTITLE: Viewing Starlight Project Structure\nDESCRIPTION: Directory structure of a typical Starlight project with Tailwind CSS integration, showing the organization of documentation files, assets, and configuration files.\nSOURCE: https://github.com/mrzachnugent/react-native-reusables/blob/main/apps/docs/README.md#2025-04-21_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n.\n├── public/\n├── src/\n│   ├── assets/\n│   ├── content/\n│   │   ├── docs/\n│   │   └── config.ts\n│   └── env.d.ts\n├── astro.config.mjs\n├── package.json\n├── tailwind.config.mjs\n└── tsconfig.json\n```\n\n----------------------------------------\n\nTITLE: Installing Dropdown Menu Component via CLI\nDESCRIPTION: Command to install the Dropdown Menu component using the React Native Reusables CLI.\nSOURCE: https://github.com/mrzachnugent/react-native-reusables/blob/main/apps/docs/src/content/docs/components/dropdown-menu.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx @react-native-reusables/cli@latest add dropdown-menu\n```\n\n----------------------------------------\n\nTITLE: Installing Collapsible Component via CLI\nDESCRIPTION: Command to add the collapsible component to your project using the React Native Reusables CLI.\nSOURCE: https://github.com/mrzachnugent/react-native-reusables/blob/main/apps/docs/src/content/docs/components/collapsible.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx @react-native-reusables/cli@latest add collapsible\n```\n\n----------------------------------------\n\nTITLE: Installing Toggle Group Component via CLI\nDESCRIPTION: Command to install the Toggle Group component using the React Native Reusables CLI.\nSOURCE: https://github.com/mrzachnugent/react-native-reusables/blob/main/apps/docs/src/content/docs/components/toggle-group.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx @react-native-reusables/cli@latest add toggle-group\n```\n\n----------------------------------------\n\nTITLE: Installing Typography Components via CLI\nDESCRIPTION: Command to install typography components using the React Native Reusables CLI tool. This is the recommended installation method for adding the typography components to your project.\nSOURCE: https://github.com/mrzachnugent/react-native-reusables/blob/main/apps/docs/src/content/docs/components/typography.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx @react-native-reusables/cli@latest add typography\n```\n\n----------------------------------------\n\nTITLE: Installing Badge Component via CLI\nDESCRIPTION: Command to install the Badge component using the React Native Reusables CLI\nSOURCE: https://github.com/mrzachnugent/react-native-reusables/blob/main/apps/docs/src/content/docs/components/badge.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx @react-native-reusables/cli@latest add badge\n```\n\n----------------------------------------\n\nTITLE: Installing Alert Dialog Component via CLI\nDESCRIPTION: Command to install the Alert Dialog component using the React Native Reusables CLI.\nSOURCE: https://github.com/mrzachnugent/react-native-reusables/blob/main/apps/docs/src/content/docs/components/alert-dialog.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx @react-native-reusables/cli@latest add alert-dialog\n```\n\n----------------------------------------\n\nTITLE: Installing Progress Component via CLI\nDESCRIPTION: Command to install the Progress component using the React Native Reusables CLI\nSOURCE: https://github.com/mrzachnugent/react-native-reusables/blob/main/apps/docs/src/content/docs/components/progress.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx @react-native-reusables/cli@latest add progress\n```\n\n----------------------------------------\n\nTITLE: Installing Card Component via CLI in React Native\nDESCRIPTION: Command to install the Card component using the React Native Reusables CLI. This is the recommended installation method for adding the Card component to your project.\nSOURCE: https://github.com/mrzachnugent/react-native-reusables/blob/main/apps/docs/src/content/docs/components/card.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx @react-native-reusables/cli@latest add card\n```\n\n----------------------------------------\n\nTITLE: Installing Accordion Component via CLI\nDESCRIPTION: Command to install the accordion component using the React Native Reusables CLI tool.\nSOURCE: https://github.com/mrzachnugent/react-native-reusables/blob/main/apps/docs/src/content/docs/components/accordion.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx @react-native-reusables/cli@latest add accordion\n```\n\n----------------------------------------\n\nTITLE: Installing Separator Component via CLI in React Native\nDESCRIPTION: Command to install the Separator component using the React Native Reusables CLI tool.\nSOURCE: https://github.com/mrzachnugent/react-native-reusables/blob/main/apps/docs/src/content/docs/components/separator.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx @react-native-reusables/cli@latest add separator\n```\n\n----------------------------------------\n\nTITLE: Installing Context Menu Component via CLI\nDESCRIPTION: Command to install the context menu component using the React Native Reusables CLI.\nSOURCE: https://github.com/mrzachnugent/react-native-reusables/blob/main/apps/docs/src/content/docs/components/context-menu.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx @react-native-reusables/cli@latest add context-menu\n```\n\n----------------------------------------\n\nTITLE: Installing Skeleton Component via CLI in React Native\nDESCRIPTION: Command to install the skeleton component using the React Native Reusables CLI tool.\nSOURCE: https://github.com/mrzachnugent/react-native-reusables/blob/main/apps/docs/src/content/docs/components/skeleton.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx @react-native-reusables/cli@latest add skeleton\n```\n\n----------------------------------------\n\nTITLE: Installing Switch Component via CLI\nDESCRIPTION: Command to install the Switch component using the React Native Reusables CLI\nSOURCE: https://github.com/mrzachnugent/react-native-reusables/blob/main/apps/docs/src/content/docs/components/switch.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx @react-native-reusables/cli@latest add switch\n```\n\n----------------------------------------\n\nTITLE: Installing Menubar Component via CLI\nDESCRIPTION: Command to install the Menubar component using the React Native Reusables CLI.\nSOURCE: https://github.com/mrzachnugent/react-native-reusables/blob/main/apps/docs/src/content/docs/components/menubar.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx @react-native-reusables/cli@latest add menubar\n```\n\n----------------------------------------\n\nTITLE: Installing Toggle Component via CLI\nDESCRIPTION: Command to install the Toggle component using the React Native Reusables CLI tool.\nSOURCE: https://github.com/mrzachnugent/react-native-reusables/blob/main/apps/docs/src/content/docs/components/toggle.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx @react-native-reusables/cli@latest add toggle\n```\n\n----------------------------------------\n\nTITLE: Installing Aspect-Ratio Component via CLI\nDESCRIPTION: Command to install the Aspect-Ratio component using the React Native Reusables CLI tool.\nSOURCE: https://github.com/mrzachnugent/react-native-reusables/blob/main/apps/docs/src/content/docs/components/aspect-ratio.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx @react-native-reusables/cli@latest add aspect-ratio\n```\n\n----------------------------------------\n\nTITLE: Installing Tooltip Component via CLI\nDESCRIPTION: Command to install the Tooltip component using the React Native Reusables CLI.\nSOURCE: https://github.com/mrzachnugent/react-native-reusables/blob/main/apps/docs/src/content/docs/components/tooltip.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx @react-native-reusables/cli@latest add tooltip\n```\n\n----------------------------------------\n\nTITLE: Installing Navigation Menu via CLI\nDESCRIPTION: Command to install the navigation menu component using the React Native Reusables CLI\nSOURCE: https://github.com/mrzachnugent/react-native-reusables/blob/main/apps/docs/src/content/docs/components/navigation-menu.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx @react-native-reusables/cli@latest add navigation-menu\n```\n\n----------------------------------------\n\nTITLE: Installing Hover Card Component via CLI\nDESCRIPTION: Command to install the hover-card component using the React Native Reusables CLI tool.\nSOURCE: https://github.com/mrzachnugent/react-native-reusables/blob/main/apps/docs/src/content/docs/components/hover-card.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx @react-native-reusables/cli@latest add hover-card\n```\n\n----------------------------------------\n\nTITLE: Installing Popover Component via CLI\nDESCRIPTION: Command for installing the Popover component using the React Native Reusables CLI.\nSOURCE: https://github.com/mrzachnugent/react-native-reusables/blob/main/apps/docs/src/content/docs/components/popover.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx @react-native-reusables/cli@latest add popover\n```\n\n----------------------------------------\n\nTITLE: Installing Checkbox Component with CLI\nDESCRIPTION: Command to install the checkbox component using the React Native Reusables CLI tool.\nSOURCE: https://github.com/mrzachnugent/react-native-reusables/blob/main/apps/docs/src/content/docs/components/checkbox.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx @react-native-reusables/cli@latest add checkbox\n```\n\n----------------------------------------\n\nTITLE: Installing Button Component via CLI\nDESCRIPTION: Command to install the Button component using the React Native Reusables CLI.\nSOURCE: https://github.com/mrzachnugent/react-native-reusables/blob/main/apps/docs/src/content/docs/components/button.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx @react-native-reusables/cli@latest add button\n```\n\n----------------------------------------\n\nTITLE: Installing Textarea Component via CLI\nDESCRIPTION: Command to install the textarea component using the React Native Reusables CLI tool.\nSOURCE: https://github.com/mrzachnugent/react-native-reusables/blob/main/apps/docs/src/content/docs/components/textarea.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx @react-native-reusables/cli@latest add textarea\n```\n\n----------------------------------------\n\nTITLE: Installing Alert Component via CLI in React Native\nDESCRIPTION: Command to install the Alert component using the React Native Reusables CLI tool. This is the recommended installation method.\nSOURCE: https://github.com/mrzachnugent/react-native-reusables/blob/main/apps/docs/src/content/docs/components/alert.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx @react-native-reusables/cli@latest add alert\n```\n\n----------------------------------------\n\nTITLE: Installing Table Component via CLI in React Native\nDESCRIPTION: Command to install the Table component using the React Native Reusables CLI.\nSOURCE: https://github.com/mrzachnugent/react-native-reusables/blob/main/apps/docs/src/content/docs/components/table.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx @react-native-reusables/cli@latest add table\n```\n\n----------------------------------------\n\nTITLE: Installing Input Component via CLI\nDESCRIPTION: Command to install the input component using the React Native Reusables CLI tool.\nSOURCE: https://github.com/mrzachnugent/react-native-reusables/blob/main/apps/docs/src/content/docs/components/input.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx @react-native-reusables/cli@latest add input\n```\n\n----------------------------------------\n\nTITLE: Installing Starlight with Tailwind via npm\nDESCRIPTION: Command to create a new Astro project using the Starlight Tailwind template. This sets up a documentation site with Tailwind CSS integration.\nSOURCE: https://github.com/mrzachnugent/react-native-reusables/blob/main/apps/docs/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm create astro@latest -- --template starlight/tailwind\n```\n\n----------------------------------------\n\nTITLE: Installing Tabs Component via CLI in React Native\nDESCRIPTION: Command to install the Tabs component using the React Native Reusables CLI.\nSOURCE: https://github.com/mrzachnugent/react-native-reusables/blob/main/apps/docs/src/content/docs/components/tabs.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx @react-native-reusables/cli@latest add tabs\n```\n\n----------------------------------------\n\nTITLE: Installing Material Top Tabs Dependencies\nDESCRIPTION: Command to install necessary packages for implementing Material Top Tabs navigation in an Expo project.\nSOURCE: https://github.com/mrzachnugent/react-native-reusables/blob/main/apps/docs/src/content/docs/extras/material-top-tabs.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx expo install @react-navigation/material-top-tabs react-native-tab-view react-native-pager-view\n```\n\n----------------------------------------\n\nTITLE: Installing Text Component via CLI\nDESCRIPTION: Command to install the Text component using the React Native Reusables CLI.\nSOURCE: https://github.com/mrzachnugent/react-native-reusables/blob/main/apps/docs/src/content/docs/components/text.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx @react-native-reusables/cli@latest add text\n```\n\n----------------------------------------\n\nTITLE: Attribution and License Notice\nDESCRIPTION: Markdown notice acknowledging the use of code from shadcn and specifying the MIT License terms.\nSOURCE: https://github.com/mrzachnugent/react-native-reusables/blob/main/apps/cli/README.md#2025-04-21_snippet_1\n\nLANGUAGE: mdx\nCODE:\n```\nThis project uses code from shadcn.\nThe code is licensed under the MIT License.\nhttps://github.com/shadcn-ui/ui\n```\n\n----------------------------------------\n\nTITLE: Installing Select Component via CLI\nDESCRIPTION: Command to install the Select component using the React Native Reusables CLI.\nSOURCE: https://github.com/mrzachnugent/react-native-reusables/blob/main/apps/docs/src/content/docs/components/select.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx @react-native-reusables/cli@latest add select\n```\n\n----------------------------------------\n\nTITLE: Cloning the repository in Bash\nDESCRIPTION: Commands for cloning the forked repository to your local machine and navigating to the project directory.\nSOURCE: https://github.com/mrzachnugent/react-native-reusables/blob/main/CONTRIBUTING.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/your-username/react-native-reusables.git\ncd react-native-reusables\n```\n\n----------------------------------------\n\nTITLE: Installing Radio Group Component via CLI\nDESCRIPTION: Command to add the radio-group component to your project using the React Native Reusables CLI.\nSOURCE: https://github.com/mrzachnugent/react-native-reusables/blob/main/apps/docs/src/content/docs/components/radio-group.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx @react-native-reusables/cli@latest add radio-group\n```\n\n----------------------------------------\n\nTITLE: Creating a feature branch in Bash\nDESCRIPTION: Command for creating a new branch for your feature or bug fix using git checkout.\nSOURCE: https://github.com/mrzachnugent/react-native-reusables/blob/main/CONTRIBUTING.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit checkout -b feature/your-feature-name\n```\n\n----------------------------------------\n\nTITLE: Committing changes in Bash\nDESCRIPTION: Command for committing your changes with a descriptive message using git commit.\nSOURCE: https://github.com/mrzachnugent/react-native-reusables/blob/main/CONTRIBUTING.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngit commit -m \"Add your commit message here\"\n```\n\n----------------------------------------\n\nTITLE: Pushing changes to GitHub in Bash\nDESCRIPTION: Command for pushing your branch with committed changes to your forked repository on GitHub.\nSOURCE: https://github.com/mrzachnugent/react-native-reusables/blob/main/CONTRIBUTING.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ngit push origin feature/your-feature-name\n```\n\n----------------------------------------\n\nTITLE: Embedding Video in HTML\nDESCRIPTION: This snippet demonstrates how to embed a video in HTML using the <video> tag. It includes a fallback message for browsers that don't support the video tag.\nSOURCE: https://github.com/mrzachnugent/react-native-reusables/blob/main/apps/docs/src/content/docs/getting-started/introduction.mdx#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<video controls>\n  <source src=\"https://github.com/mrzachnugent/react-native-reusables/assets/63797719/ae7e074f-05a4-4568-b71a-f1e0be13650d\" type=\"video/mp4\" />\n  Your browser does not support the video tag.\n</video>\n```\n\n----------------------------------------\n\nTITLE: Installing Avatar Component via CLI in React Native\nDESCRIPTION: Command to install the Avatar component using the React Native Reusables CLI.\nSOURCE: https://github.com/mrzachnugent/react-native-reusables/blob/main/apps/docs/src/content/docs/components/avatar.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx @react-native-reusables/cli@latest add avatar\n```\n\n----------------------------------------\n\nTITLE: Installing Label Component via CLI in React Native\nDESCRIPTION: Command for installing the label component using the React Native Reusables CLI.\nSOURCE: https://github.com/mrzachnugent/react-native-reusables/blob/main/apps/docs/src/content/docs/components/label.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx @react-native-reusables/cli@latest add label\n```"
  }
]