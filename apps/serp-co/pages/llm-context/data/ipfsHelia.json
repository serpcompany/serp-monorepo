[
  {
    "owner": "ipfs",
    "repo": "helia",
    "content": "TITLE: Using Helia with UnixFS in TypeScript\nDESCRIPTION: This example demonstrates how to create a Helia instance and use it with the @helia/unixfs module to retrieve content by CID from the IPFS network.\nSOURCE: https://github.com/ipfs/helia/blob/main/packages/helia/README.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createHelia } from 'helia'\nimport { unixfs } from '@helia/unixfs'\nimport { CID } from 'multiformats/cid'\n\nconst helia = await createHelia()\n\nconst fs = unixfs(helia)\nfs.cat(CID.parse('bafyFoo'))\n```\n\n----------------------------------------\n\nTITLE: Using @helia/json to Store and Retrieve JSON Objects with Helia\nDESCRIPTION: This example demonstrates how to create a Helia node, initialize the JSON interface, add a JSON object to IPFS (receiving a CID), and then retrieve the object using that CID.\nSOURCE: https://github.com/ipfs/helia/blob/main/packages/json/README.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createHelia } from 'helia'\nimport { json } from '@helia/json'\nimport { CID } from 'multiformats/cid'\n\nconst helia = await createHelia()\nconst j = json(helia)\n\nconst cid = await j.add({\n  hello: 'world'\n})\nconst obj = await j.get(cid)\n\nconsole.info(obj)\n// { hello: 'world' }\n```\n\n----------------------------------------\n\nTITLE: Basic IPNS Publishing and Resolving with Helia\nDESCRIPTION: Demonstrates how to create a Helia node, generate a keypair, publish data to IPNS, and resolve the published name.\nSOURCE: https://github.com/ipfs/helia/blob/main/packages/ipns/README.md#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { createHelia } from 'helia'\nimport { ipns } from '@helia/ipns'\nimport { unixfs } from '@helia/unixfs'\nimport { generateKeyPair } from '@libp2p/crypto/keys'\n\nconst helia = await createHelia()\nconst name = ipns(helia)\n\n// create a keypair to publish an IPNS name\nconst privateKey = await generateKeyPair('Ed25519')\n\n// store some data to publish\nconst fs = unixfs(helia)\nconst cid = await fs.addBytes(Uint8Array.from([0, 1, 2, 3, 4]))\n\n// publish the name\nawait name.publish(privateKey, cid)\n\n// resolve the name\nconst result = await name.resolve(privateKey.publicKey)\n\nconsole.info(result.cid, result.path)\n```\n\n----------------------------------------\n\nTITLE: Exporting a DAG as a CAR file with Helia\nDESCRIPTION: This example demonstrates how to export a DAG from Helia to a CAR file. It creates a Helia instance, initializes the CAR module, and streams blocks from a CID to a file.\nSOURCE: https://github.com/ipfs/helia/blob/main/packages/car/README.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createHelia } from 'helia'\nimport { car } from '@helia/car'\nimport { CID } from 'multiformats/cid'\nimport nodeFs from 'node:fs'\n\nconst helia = await createHelia()\nconst cid = CID.parse('QmFoo...')\n\nconst c = car(helia)\nconst out = nodeFs.createWriteStream('example.car')\n\nfor await (const buf of c.stream(cid)) {\n  out.write(buf)\n}\n\nout.end()\n```\n\n----------------------------------------\n\nTITLE: Using DAG-JSON with Helia in TypeScript\nDESCRIPTION: This example demonstrates how to create a Helia node, initialize the DAG-JSON interface, add a JSON object to IPFS, and retrieve it using its CID. It shows the basic workflow of storing and retrieving structured data with @helia/dag-json.\nSOURCE: https://github.com/ipfs/helia/blob/main/packages/dag-json/README.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createHelia } from 'helia'\nimport { dagJson } from '@helia/dag-json'\nimport { CID } from 'multiformats/cid'\n\nconst helia = await createHelia()\nconst j = dagJson(helia)\n\nconst cid = await j.add({\n  hello: 'world'\n})\nconst obj = await j.get(cid)\n\nconsole.info(obj)\n// { hello: 'world' }\n```\n\n----------------------------------------\n\nTITLE: Using Helia HTTP with UnixFS in TypeScript\nDESCRIPTION: This snippet demonstrates how to create a Helia HTTP instance and use it with the UnixFS module to fetch files from the distributed web.\nSOURCE: https://github.com/ipfs/helia/blob/main/packages/http/README.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createHeliaHTTP } from '@helia/http'\nimport { unixfs } from '@helia/unixfs'\nimport { CID } from 'multiformats/cid'\n\nconst helia = await createHeliaHTTP()\n\nconst fs = unixfs(helia)\nfs.cat(CID.parse('bafyFoo'))\n```\n\n----------------------------------------\n\nTITLE: Using Helia Strings to Store and Retrieve Text in IPFS\nDESCRIPTION: This example demonstrates how to create a Helia node, initialize the strings utility, add a string to IPFS, and retrieve it using the resulting CID. It shows the basic workflow of storing and retrieving string content in IPFS using the @helia/strings module.\nSOURCE: https://github.com/ipfs/helia/blob/main/packages/strings/README.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createHelia } from 'helia'\nimport { strings } from '@helia/strings'\nimport { CID } from 'multiformats/cid'\n\nconst helia = await createHelia()\nconst str = strings(helia)\nconst cid = await str.add('hello world')\nconst string = await str.get(cid)\n\nconsole.info(string)\n// hello world\n```\n\n----------------------------------------\n\nTITLE: Creating and Using a Mutable File System with Helia MFS\nDESCRIPTION: This example demonstrates how to initialize Helia with the MFS module, create a directory, write a file to it, and then read the file's contents. It showcases the basic workflow of using the mutable file system operations.\nSOURCE: https://github.com/ipfs/helia/blob/main/packages/mfs/README.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createHelia } from 'helia'\nimport { mfs } from '@helia/mfs'\n\nconst helia = await createHelia()\nconst fs = mfs(helia)\n\n// create an empty directory\nawait fs.mkdir('/my-directory')\n\n// add a file to the directory\nawait fs.writeBytes(Uint8Array.from([0, 1, 2, 3]), '/my-directory/foo.txt')\n\n// read the file\nfor await (const buf of fs.cat('/my-directory/foo.txt')) {\n  console.info(buf)\n}\n```\n\n----------------------------------------\n\nTITLE: Using DAG-CBOR with Helia\nDESCRIPTION: Example demonstrating how to create a Helia node, initialize the DAG-CBOR interface, add a JavaScript object as DAG-CBOR, and retrieve it using the resulting CID. This shows the basic workflow of storing and retrieving data using content-addressable storage with the CBOR format.\nSOURCE: https://github.com/ipfs/helia/blob/main/packages/dag-cbor/README.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createHelia } from 'helia'\nimport { dagCbor } from '@helia/dag-cbor'\nimport { CID } from 'multiformats/cid'\n\nconst helia = await createHelia()\n\nconst d = dagCbor(helia)\nconst cid = await d.add({\n  hello: 'world'\n})\nconst obj = await d.get(cid)\n\nconsole.info(obj)\n// { hello: 'world' }\n```\n\n----------------------------------------\n\nTITLE: Creating Files and Directories with Helia UnixFS\nDESCRIPTION: Demonstrates basic UnixFS operations including creating empty directories, adding files, and combining them. Shows both direct operations and streaming approaches.\nSOURCE: https://github.com/ipfs/helia/blob/main/packages/unixfs/README.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createHelia } from 'helia'\nimport { unixfs } from '@helia/unixfs'\n\nconst helia = await createHelia()\nconst fs = unixfs(helia)\n\n// create an empty dir and a file, then add the file to the dir\nconst emptyDirCid = await fs.addDirectory()\nconst fileCid = await fs.addBytes(Uint8Array.from([0, 1, 2, 3]))\nconst updateDirCid = await fs.cp(fileCid, emptyDirCid, 'foo.txt')\n\n// or doing the same thing as a stream\nfor await (const entry of fs.addAll([{\n  path: 'foo.txt',\n  content: Uint8Array.from([0, 1, 2, 3])\n}])) {\n  console.info(entry)\n}\n```\n\n----------------------------------------\n\nTITLE: Adding and Retrieving Strings with Helia\nDESCRIPTION: Demonstrates how to use the @helia/strings module to add and retrieve string data from a Helia node. It shows the creation of a Helia instance and the use of the strings interface to add and get string content.\nSOURCE: https://github.com/ipfs/helia/blob/main/README.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createHelia } from 'helia'\nimport { strings } from '@helia/strings'\n\nconst helia = await createHelia()\nconst s = strings(helia)\n\nconst myImmutableAddress = await s.add('hello world')\n\nconsole.log(await s.get(myImmutableAddress))\n// hello world\n```\n\n----------------------------------------\n\nTITLE: Importing blocks from a CAR file into Helia\nDESCRIPTION: This example demonstrates importing all blocks from a CAR file into Helia's blockstore. It reads a CAR file from the filesystem, creates a CAR reader, and imports the blocks using the car module.\nSOURCE: https://github.com/ipfs/helia/blob/main/packages/car/README.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createHelia } from 'helia'\nimport { unixfs } from '@helia/unixfs'\nimport { car } from '@helia/car'\nimport { CarReader } from '@ipld/car'\nimport { Readable } from 'node:stream'\nimport nodeFs from 'node:fs'\n\nconst helia = await createHelia({\n  // ... helia config\n})\n\n// import the car\nconst inStream = nodeFs.createReadStream('example.car')\nconst reader = await CarReader.fromIterable(inStream)\n\nconst c = car(helia)\nawait c.import(reader)\n```\n\n----------------------------------------\n\nTITLE: Publishing Recursive IPNS Records\nDESCRIPTION: Shows how to create and publish a recursive IPNS record that points to another IPNS record rather than directly to content.\nSOURCE: https://github.com/ipfs/helia/blob/main/packages/ipns/README.md#2025-04-21_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { createHelia } from 'helia'\nimport { ipns } from '@helia/ipns'\nimport { unixfs } from '@helia/unixfs'\nimport { generateKeyPair } from '@libp2p/crypto/keys'\n\nconst helia = await createHelia()\nconst name = ipns(helia)\n\n// create a keypair to publish an IPNS name\nconst privateKey = await generateKeyPair('Ed25519')\n\n// store some data to publish\nconst fs = unixfs(helia)\nconst cid = await fs.addBytes(Uint8Array.from([0, 1, 2, 3, 4]))\n\n// publish the name\nawait name.publish(privateKey, cid)\n\n// create another keypair to re-publish the original record\nconst recursivePrivateKey = await generateKeyPair('Ed25519')\n\n// publish the recursive name\nawait name.publish(recursivePrivateKey, privateKey.publicKey)\n\n// resolve the name recursively - it resolves until a CID is found\nconst result = await name.resolve(recursivePrivateKey.publicKey)\nconsole.info(result.cid.toString() === cid.toString()) // true\n```\n\n----------------------------------------\n\nTITLE: Working with JSON Objects in Helia\nDESCRIPTION: Shows how to use the @helia/json module to add and retrieve JSON objects from a Helia node. It demonstrates creating a Helia instance and using the json interface to work with plain JavaScript objects.\nSOURCE: https://github.com/ipfs/helia/blob/main/README.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createHelia } from 'helia'\nimport { json } from '@helia/json'\n\nconst helia = await createHelia()\nconst j = json(helia)\n\nconst myImmutableAddress = await j.add({ hello: 'world' })\n\nconsole.log(await j.get(myImmutableAddress))\n// { hello: 'world' }\n```\n\n----------------------------------------\n\nTITLE: Using Custom Hasher in Helia\nDESCRIPTION: Shows how to use a custom hasher (SHA-512) when adding content to Helia. It demonstrates that different hashers produce different CIDs for the same content, which are treated as unique objects in the system.\nSOURCE: https://github.com/ipfs/helia/blob/main/README.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createHelia } from 'helia'\nimport { dagCbor } from '@helia/dag-cbor'\nimport { sha512 } from 'multiformats/hashes/sha2'\n\nconst helia = await createHelia()\nconst d = dagCbor(helia)\n\nconst object1 = { hello: 'world' }\n\nconst cidWithSHA256 = await d.add(object1)\nconst cidWithSHA512 = await d.add(object1, {\n  hasher: sha512\n})\n\n/** The same objects with different CIDs are treated as different objects */\n\nconsole.log(cidWithSHA256)\n// CID(bafyreidykglsfhoixmivffc5uwhcgshx4j465xwqntbmu43nb2dzqwfvae)\nconsole.log(cidWithSHA512)\n// CID(bafyrgqhai26anf3i7pips7q22coa4sz2fr4gk4q4sqdtymvvjyginfzaqewveaeqdh524nsktaq43j65v22xxrybrtertmcfxufdam3da3hbk)\n\nconst retrievedObject1 = await d.get(cidWithSHA256)\nconst retrievedObject2 = await d.get(cidWithSHA512)\n\nconsole.log(retrievedObject1)\n// { hello: 'world' }\nconsole.log(retrievedObject2)\n// { hello: 'world' }\n```\n\n----------------------------------------\n\nTITLE: Configuring Helia HTTP with Custom Gateways and Routing in TypeScript\nDESCRIPTION: This example shows how to create a Helia HTTP instance with custom trustless gateways and delegated routing endpoints for more advanced configuration.\nSOURCE: https://github.com/ipfs/helia/blob/main/packages/http/README.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createHeliaHTTP } from '@helia/http'\nimport { trustlessGateway } from '@helia/block-brokers'\nimport { delegatedHTTPRouting, httpGatewayRouting } from '@helia/routers'\nimport { unixfs } from '@helia/unixfs'\nimport { CID } from 'multiformats/cid'\n\nconst helia = await createHeliaHTTP({\n  blockBrokers: [\n    trustlessGateway()\n  ],\n  routers: [\n    delegatedHTTPRouting('https://delegated-ipfs.dev'),\n    httpGatewayRouting({\n      gateways: ['https://cloudflare-ipfs.com', 'https://ipfs.io']\n    })\n  ]\n})\n\nconst fs = unixfs(helia)\nfs.cat(CID.parse('bafyFoo'))\n```\n\n----------------------------------------\n\nTITLE: Publishing IPNS Records with Paths\nDESCRIPTION: Demonstrates how to publish an IPNS record that includes a path component, useful for addressing specific files within a directory structure.\nSOURCE: https://github.com/ipfs/helia/blob/main/packages/ipns/README.md#2025-04-21_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { createHelia } from 'helia'\nimport { ipns } from '@helia/ipns'\nimport { unixfs } from '@helia/unixfs'\nimport { generateKeyPair } from '@libp2p/crypto/keys'\n\nconst helia = await createHelia()\nconst name = ipns(helia)\n\n// create a keypair to publish an IPNS name\nconst privateKey = await generateKeyPair('Ed25519')\n\n// store some data to publish\nconst fs = unixfs(helia)\nconst fileCid = await fs.addBytes(Uint8Array.from([0, 1, 2, 3, 4]))\n\n// store the file in a directory\nconst dirCid = await fs.addDirectory()\nconst finalDirCid = await fs.cp(fileCid, dirCid, '/foo.txt')\n\n// publish the name\nawait name.publish(privateKey, `/ipfs/${finalDirCid}/foo.txt`)\n\n// resolve the name\nconst result = await name.resolve(privateKey.publicKey)\n\nconsole.info(result.cid, result.path) // QmFoo.. 'foo.txt'\n```\n\n----------------------------------------\n\nTITLE: Exporting a specific UnixFS path as a CAR file\nDESCRIPTION: This example shows how to export a specific path within a UnixFS DAG as a CAR file. It uses the UnixFSPath traversal option to limit the export to a specific file path.\nSOURCE: https://github.com/ipfs/helia/blob/main/packages/car/README.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createHelia } from 'helia'\nimport { car, UnixFSPath } from '@helia/car'\nimport { CID } from 'multiformats/cid'\nimport nodeFs from 'node:fs'\n\nconst helia = await createHelia()\nconst cid = CID.parse('QmFoo...')\n\nconst c = car(helia)\nconst out = nodeFs.createWriteStream('example.car')\n\nfor await (const buf of c.stream(cid, {\n  traversal: new UnixFSPath('/foo/bar/baz.txt')\n})) {\n  out.write(buf)\n}\n\nout.end()\n```\n\n----------------------------------------\n\nTITLE: Using DAG-JSON for Linked Objects in Helia\nDESCRIPTION: Illustrates the use of @helia/dag-json module to store and retrieve linked objects using CIDs. It shows how to create references between objects and traverse them using the dag-json interface.\nSOURCE: https://github.com/ipfs/helia/blob/main/README.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createHelia } from 'helia'\nimport { dagJson } from '@helia/dag-json'\n\nconst helia = await createHelia()\nconst d = dagJson(helia)\n\nconst object1 = { hello: 'world' }\nconst myImmutableAddress1 = await d.add(object1)\n\nconst object2 = { link: myImmutableAddress1 }\nconst myImmutableAddress2 = await d.add(object2)\n\nconst retrievedObject = await d.get(myImmutableAddress2)\nconsole.log(retrievedObject)\n// { link: CID(baguqeerasor...) }\n\nconsole.log(await d.get(retrievedObject.link))\n// { hello: 'world' }\n```\n\n----------------------------------------\n\nTITLE: Recursively Adding Directories with Helia UnixFS\nDESCRIPTION: Shows how to recursively add directories using the globSource utility in Node.js environments.\nSOURCE: https://github.com/ipfs/helia/blob/main/packages/unixfs/README.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createHelia } from 'helia'\nimport { unixfs } from '@helia/unixfs'\nimport { globSource } from '@helia/unixfs'\n\nconst helia = await createHelia()\nconst fs = unixfs(helia)\n\nfor await (const entry of fs.addAll(globSource('path/to/containing/dir', 'glob-pattern'))) {\n  console.info(entry)\n}\n```\n\n----------------------------------------\n\nTITLE: Working with DAG-CBOR in Helia\nDESCRIPTION: Demonstrates the use of @helia/dag-cbor module to store and retrieve objects using Concise Binary Object Representation. It shows how to create linked objects and traverse them using the dag-cbor interface.\nSOURCE: https://github.com/ipfs/helia/blob/main/README.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createHelia } from 'helia'\nimport { dagCbor } from '@helia/dag-cbor'\n\nconst helia = await createHelia()\nconst d = dagCbor(helia)\n\nconst object1 = { hello: 'world' }\nconst myImmutableAddress1 = await d.add(object1)\n\nconst object2 = { link: myImmutableAddress1 }\nconst myImmutableAddress2 = await d.add(object2)\n\nconst retrievedObject = await d.get(myImmutableAddress2)\nconsole.log(retrievedObject)\n// { link: CID(baguqeerasor...) }\n\nconsole.log(await d.get(retrievedObject.link))\n// { hello: 'world' }\n```\n\n----------------------------------------\n\nTITLE: IPNS with Custom PubSub Router\nDESCRIPTION: Shows how to configure and use a custom PubSub router for IPNS operations, enabling real-time updates through libp2p PubSub.\nSOURCE: https://github.com/ipfs/helia/blob/main/packages/ipns/README.md#2025-04-21_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { createHelia, libp2pDefaults } from 'helia'\nimport { ipns } from '@helia/ipns'\nimport { pubsub } from '@helia/ipns/routing'\nimport { unixfs } from '@helia/unixfs'\nimport { gossipsub } from '@chainsafe/libp2p-gossipsub'\nimport { generateKeyPair } from '@libp2p/crypto/keys'\nimport type { Libp2p, PubSub } from '@libp2p/interface'\nimport type { DefaultLibp2pServices } from 'helia'\n\nconst libp2pOptions = libp2pDefaults()\nlibp2pOptions.services.pubsub = gossipsub()\n\nconst helia = await createHelia<Libp2p<DefaultLibp2pServices & { pubsub: PubSub }>>({\\n  libp2p: libp2pOptions\n})\nconst name = ipns(helia, {\n routers: [\n   pubsub(helia)\n ]\n})\n\n// create a keypair to publish an IPNS name\nconst privateKey = await generateKeyPair('Ed25519')\n\n// store some data to publish\nconst fs = unixfs(helia)\nconst cid = await fs.addBytes(Uint8Array.from([0, 1, 2, 3, 4]))\n\n// publish the name\nawait name.publish(privateKey, cid)\n\n// resolve the name\nconst result = await name.resolve(privateKey.publicKey)\n```\n\n----------------------------------------\n\nTITLE: Initializing Helia with TypeScript\nDESCRIPTION: Example of how to import and initialize a Helia node using the @helia/utils package. This demonstrates creating a new Helia instance with configuration options.\nSOURCE: https://github.com/ipfs/helia/blob/main/packages/utils/README.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Helia } from '@helia/utils'\nimport type { HeliaInit } from '@helia/utils'\n\nconst node = new Helia({\n  // ...options\n} as HeliaInit)\n```\n\n----------------------------------------\n\nTITLE: Using Helia Node Interface in TypeScript\nDESCRIPTION: Example demonstrating how to import and use the Helia interface type for implementing node functionality.\nSOURCE: https://github.com/ipfs/helia/blob/main/packages/interface/README.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Helia } from '@helia/interface'\n\nexport function doSomething(helia: Helia) {\n  // use helia node functions here\n}\n```\n\n----------------------------------------\n\nTITLE: Including Helia HTTP via Script Tag in HTML\nDESCRIPTION: This HTML snippet shows how to include the Helia HTTP module using a script tag, making its exports available as HeliaHttp in the global namespace.\nSOURCE: https://github.com/ipfs/helia/blob/main/packages/http/README.md#2025-04-21_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://unpkg.com/@helia/http/dist/index.min.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Browser Integration via Script Tag\nDESCRIPTION: Shows how to include the UnixFS module in a browser environment using a script tag, making it available as HeliaUnixfs in the global namespace.\nSOURCE: https://github.com/ipfs/helia/blob/main/packages/unixfs/README.md#2025-04-21_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://unpkg.com/@helia/unixfs/dist/index.min.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Installing @helia/block-brokers via NPM\nDESCRIPTION: Command to install the @helia/block-brokers package using npm package manager.\nSOURCE: https://github.com/ipfs/helia/blob/main/packages/block-brokers/README.md#2025-04-21_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ npm i @helia/block-brokers\n```\n\n----------------------------------------\n\nTITLE: Loading Helia Bitswap in Browser via CDN\nDESCRIPTION: HTML snippet showing how to include the Helia Bitswap module via a script tag using unpkg CDN. This makes the module available as HeliaBitswap in the global namespace.\nSOURCE: https://github.com/ipfs/helia/blob/main/packages/bitswap/README.md#2025-04-21_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n<script src=\"https://unpkg.com/@helia/bitswap/dist/index.min.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Installing @helia/routers Package via npm\nDESCRIPTION: Command to install the @helia/routers package using npm. This is typically run in a terminal or command prompt.\nSOURCE: https://github.com/ipfs/helia/blob/main/packages/routers/README.md#2025-04-21_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ npm i @helia/routers\n```\n\n----------------------------------------\n\nTITLE: Browser Script Tag Integration\nDESCRIPTION: Shows how to include the IPNS module in a browser using a script tag, making it available as HeliaIpns in the global namespace.\nSOURCE: https://github.com/ipfs/helia/blob/main/packages/ipns/README.md#2025-04-21_snippet_4\n\nLANGUAGE: HTML\nCODE:\n```\n<script src=\"https://unpkg.com/@helia/ipns/dist/index.min.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Including @helia/routers in HTML via CDN\nDESCRIPTION: HTML script tag to include the @helia/routers package from a CDN. This makes the package's exports available as HeliaRouters in the global namespace.\nSOURCE: https://github.com/ipfs/helia/blob/main/packages/routers/README.md#2025-04-21_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://unpkg.com/@helia/routers/dist/index.min.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Including @helia/block-brokers via Browser Script Tag\nDESCRIPTION: HTML code snippet showing how to load the block-brokers module via a script tag in a browser. The module's exports will be available as HeliaBlockBrokers in the global namespace.\nSOURCE: https://github.com/ipfs/helia/blob/main/packages/block-brokers/README.md#2025-04-21_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://unpkg.com/@helia/block-brokers/dist/index.min.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Including Helia Utils via HTML Script Tag\nDESCRIPTION: Shows how to load the @helia/utils module through a browser script tag, which makes its exports available as HeliaUtils in the global namespace.\nSOURCE: https://github.com/ipfs/helia/blob/main/packages/utils/README.md#2025-04-21_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://unpkg.com/@helia/utils/dist/index.min.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Setting Benchmark Iterations\nDESCRIPTION: Demonstrates how to configure the number of benchmark iterations using the ITERATIONS environment variable.\nSOURCE: https://github.com/ipfs/helia/blob/main/benchmarks/add-dir/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nITERATIONS=1 npm start\n```\n\n----------------------------------------\n\nTITLE: Running Helia interop tests with a specific Kubo binary\nDESCRIPTION: This snippet demonstrates how to run the Helia interoperability tests using a specific Kubo binary. It sets the KUBO_BINARY environment variable to the path of the Kubo executable before running the tests.\nSOURCE: https://github.com/ipfs/helia/blob/main/packages/interop/README.md#2025-04-21_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ KUBO_BINARY=/path/to/kubo helia-interop\n```\n\n----------------------------------------\n\nTITLE: Including @helia/interop in a browser using a script tag\nDESCRIPTION: This HTML snippet shows how to include the @helia/interop package in a browser environment using a script tag. It loads the minified version of the package from unpkg.com and makes its exports available as HeliaInterop in the global namespace.\nSOURCE: https://github.com/ipfs/helia/blob/main/packages/interop/README.md#2025-04-21_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://unpkg.com/@helia/interop/dist/index.min.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Running Basic Benchmark Setup\nDESCRIPTION: Shows the basic setup and execution steps for running the benchmark tool, including workspace configuration and build process.\nSOURCE: https://github.com/ipfs/helia/blob/main/benchmarks/add-dir/README.md#2025-04-21_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ npm run reset\n$ npm i\n$ npm run build\n$ cd benchmarks/add-dir\n$ npm start\n```\n\n----------------------------------------\n\nTITLE: Configuring Minimum Test Runtime\nDESCRIPTION: Shows how to set a minimum runtime duration for the benchmark using the MIN_TIME environment variable.\nSOURCE: https://github.com/ipfs/helia/blob/main/benchmarks/add-dir/README.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nMIN_TIME=1000 npm start\n```\n\n----------------------------------------\n\nTITLE: Testing Custom Directory Paths\nDESCRIPTION: Examples of running benchmarks against specific directory paths using the TEST_PATH environment variable.\nSOURCE: https://github.com/ipfs/helia/blob/main/benchmarks/add-dir/README.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nTEST_PATH=../../node_modules/neo-async npm start\n\nTEST_PATH=../../node_modules/ipfs-core/node_modules npm start\n```\n\n----------------------------------------\n\nTITLE: Running Helia GC Benchmark with npm\nDESCRIPTION: Command sequence for running the GC benchmark. This involves resetting the environment, installing dependencies, building the project, and executing the benchmark script. After completion, the script outputs a table of performance comparison results between the implementations.\nSOURCE: https://github.com/ipfs/helia/blob/main/benchmarks/gc/README.md#2025-04-21_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ npm run reset\n$ npm i\n$ npm run build\n$ cd benchmarks/gc\n$ npm start\n\n> benchmarks-gc@1.0.0 start\n> npm run build && node dist/src/index.js\n\n\n> benchmarks-gc@1.0.0 build\n> aegir build --bundle false\n\n[14:51:28] tsc [started]\n[14:51:33] tsc [completed]\ngenerating Ed25519 keypair...\n┌─────────┬────────────────┬─────────┬───────────┬──────┐\n│ (index) │ Implementation │  ops/s  │   ms/op   │ runs │\n├─────────┼────────────────┼─────────┼───────────┼──────┤\n//... results here\n```\n\n----------------------------------------\n\nTITLE: Generating Graph Data for Benchmark Results\nDESCRIPTION: Command for building the project and running the graph generation script, which produces statistical output formatted for visualization. This allows benchmark results to be presented in a graphical format.\nSOURCE: https://github.com/ipfs/helia/blob/main/benchmarks/gc/README.md#2025-04-21_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ npm run build && node dist/src/graph.js\n```\n\n----------------------------------------\n\nTITLE: Running Helia Pinning Benchmark in Console\nDESCRIPTION: This snippet shows the console commands to set up and run the Helia pinning benchmark. It includes steps for resetting the environment, installing dependencies, building the project, and executing the benchmark script.\nSOURCE: https://github.com/ipfs/helia/blob/main/benchmarks/pinning/README.md#2025-04-21_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ npm run reset\n$ npm i\n$ npm run build\n$ cd benchmarks/pinning\n$ npm start\n```\n\n----------------------------------------\n\nTITLE: Helia Pinning Benchmark Output in Console\nDESCRIPTION: This snippet demonstrates the expected console output when running the Helia pinning benchmark. It shows the build process, script execution, and the beginning of the benchmark results table.\nSOURCE: https://github.com/ipfs/helia/blob/main/benchmarks/pinning/README.md#2025-04-21_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n> benchmarks-pinning@1.0.0 start\n> npm run build && node dist/src/index.js\n\n\n> benchmarks-pinning@1.0.0 build\n> aegir build --bundle false\n\n[14:51:28] tsc [started]\n[14:51:33] tsc [completed]\ngenerating Ed25519 keypair...\n┌─────────┬────────────────┬─────────┬───────────┬──────┐\n│ (index) │ Implementation │  ops/s  │   ms/op   │ runs │\n├─────────┼────────────────┼─────────┼───────────┼──────┤\n//... results here\n```\n\n----------------------------------------\n\nTITLE: Loading Helia Car via browser script tag\nDESCRIPTION: This HTML snippet shows how to load the @helia/car module via a script tag in a browser environment. The module's exports will be available under the global namespace 'HeliaCar'.\nSOURCE: https://github.com/ipfs/helia/blob/main/packages/car/README.md#2025-04-21_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://unpkg.com/@helia/car/dist/index.min.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Generating Graph Statistics for Helia Pinning Benchmark in Console\nDESCRIPTION: This snippet shows the console command to build the project and run a script that generates graph statistics for the Helia pinning benchmark.\nSOURCE: https://github.com/ipfs/helia/blob/main/benchmarks/pinning/README.md#2025-04-21_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ npm run build && node dist/src/graph.js\n```\n\n----------------------------------------\n\nTITLE: Running Helia Transfer Benchmarks Console Commands\nDESCRIPTION: Series of commands to set up and execute the transfer benchmarks between Helia and Kubo. Includes workspace configuration, installation, building, and running the benchmark tests.\nSOURCE: https://github.com/ipfs/helia/blob/main/benchmarks/transfer/README.md#2025-04-21_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ npm run reset\n$ npm i\n$ npm run build\n$ cd benchmarks/transfer\n$ npm start\n\n> benchmarks-gc@1.0.0 start\n> npm run build && node dist/src/index.js\n\n\n> benchmarks-transfer@1.0.0 build\n> aegir build --bundle false\n\n[14:51:28] tsc [started]\n[14:51:33] tsc [completed]\ngenerating Ed25519 keypair...\n```\n\n----------------------------------------\n\nTITLE: Running Helia Transport Benchmarks in Console\nDESCRIPTION: This snippet shows the console commands to set up and run the Helia transport benchmarks. It includes steps for adding benchmark files to the workspace, installing dependencies, building the project, and executing the benchmark script.\nSOURCE: https://github.com/ipfs/helia/blob/main/benchmarks/transports/README.md#2025-04-21_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ npm run reset\n$ npm i\n$ npm run build\n$ cd benchmarks/transports\n$ npm start\n```\n\n----------------------------------------\n\nTITLE: Debugging Helia Transport Benchmarks with Environment Variables\nDESCRIPTION: This snippet demonstrates how to enable debug output for the Helia transport benchmarks using the DEBUG environment variable. It shows examples of running the benchmarks with different debug configurations.\nSOURCE: https://github.com/ipfs/helia/blob/main/benchmarks/transports/README.md#2025-04-21_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ DEBUG=test* npm start\n```\n\nLANGUAGE: console\nCODE:\n```\n$ DEBUG='test*,sender*' npm start\n```\n\n----------------------------------------\n\nTITLE: Version History in Markdown\nDESCRIPTION: Structured changelog entries detailing version updates, changes, and fixes for the Helia UnixFS module\nSOURCE: https://github.com/ipfs/helia/blob/main/packages/unixfs/CHANGELOG.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n### Dependencies\n\n* update all it-* deps to latest versions ([#25](https://github.com/ipfs/helia-unixfs/issues/25)) ([9388c40](https://github.com/ipfs/helia/commit/9388c402462a1d45fcb7ded285262881718b7dd0))\n\n## [1.2.1](https://github.com/ipfs/helia/compare/unixfs-v1.2.0...unixfs-v1.2.1) (2023-03-23)\n\n### Dependencies\n\n* update helia deps to v1 ([#16](https://github.com/ipfs/helia-unixfs/issues/16)) ([7497590](https://github.com/ipfs/helia/commit/74975903ec619a4662e5bfa9546997641e9f8e8c))\n```\n\n----------------------------------------\n\nTITLE: Version Release Notes in Markdown\nDESCRIPTION: Detailed changelog entries documenting version changes, including features, bug fixes, and dependency updates for Helia versions 5.3.0 through 4.1.1.\nSOURCE: https://github.com/ipfs/helia/blob/main/packages/helia/CHANGELOG.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Changelog\n\n## [5.3.0](https://github.com/ipfs/helia/compare/helia-v5.2.1...helia-v5.3.0) (2025-03-13)\n\n### Features\n\n* add WebRTC-Direct listener ([#741](https://github.com/ipfs/helia/issues/741)) ([deb9165](https://github.com/ipfs/helia/commit/deb9165efe92ce9590c400955c073625eb358bb6))\n\n### Documentation\n\n* add spell checker to ci ([#743](https://github.com/ipfs/helia/issues/743)) ([45ca6bc](https://github.com/ipfs/helia/commit/45ca6bc70b1644028500101044595fa0e2199b07))\n\n### Dependencies\n\n* The following workspace dependencies were updated\n  * dependencies\n    * @helia/block-brokers bumped from ^4.0.4 to ^4.1.0\n    * @helia/interface bumped from ^5.2.0 to ^5.2.1\n    * @helia/routers bumped from ^3.0.0 to ^3.0.1\n    * @helia/utils bumped from ^1.2.1 to ^1.2.2\n```\n\n----------------------------------------\n\nTITLE: Versioning and Dependency Update Notes in Markdown\nDESCRIPTION: Changelog entries documenting version changes, dependency updates, bug fixes and new features for the IPFS Helia interoperability package.\nSOURCE: https://github.com/ipfs/helia/blob/main/packages/interop/CHANGELOG.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n### Dependencies\n\n* The following workspace dependencies were updated\n  * dependencies\n    * helia bumped from ^4.2.3 to ^4.2.4\n\n## [6.1.5](https://github.com/ipfs/helia/compare/interop-v6.1.4...interop-v6.1.5) (2024-05-27)\n\n### Bug Fixes\n\n* do not depend on external domains in dnslink tests ([#547](https://github.com/ipfs/helia/issues/547)) ([21ef20c](https://github.com/ipfs/helia/commit/21ef20cd05e4d0231d0e3d7d2cfbd21fb75b78a2))\n```\n\n----------------------------------------\n\nTITLE: Markdown Changelog Entry for v4.1.0\nDESCRIPTION: Changelog entry documenting features, documentation changes and dependency updates for version 4.1.0\nSOURCE: https://github.com/ipfs/helia/blob/main/packages/block-brokers/CHANGELOG.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## [4.1.0](https://github.com/ipfs/helia/compare/block-brokers-v4.0.4...block-brokers-v4.1.0) (2025-03-13)\n\n### Features\n\n* allow modifying trustless-gateway fetch ([#751](https://github.com/ipfs/helia/issues/751)) ([15de32f](https://github.com/ipfs/helia/commit/15de32fe0e2c6293d166d6ab95fa373fc9630a88))\n```\n\n----------------------------------------\n\nTITLE: Markdown Package Links\nDESCRIPTION: List of relative links to changelog files for each package in the Helia monorepo, with package names and their respective locations.\nSOURCE: https://github.com/ipfs/helia/blob/main/CHANGELOG.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n- [`/packages/block-brokers`](./packages/block-brokers/CHANGELOG.md) `@helia/block-brokers` changelog\n- [`/packages/car`](./packages/car/CHANGELOG.md) `@helia/car` changelog\n- [`/packages/dag-cbor`](./packages/dag-cbor/CHANGELOG.md) `@helia/dag-cbor` changelog\n- [`/packages/dag-json`](./packages/dag-json/CHANGELOG.md) `@helia/dag-json` changelog\n- [`/packages/helia`](./packages/helia/CHANGELOG.md) Helia implementation changelog\n- [`/packages/http`](./packages/http/CHANGELOG.md) `@helia/http` implementation changelog\n- [`/packages/interface`](./packages/interface/CHANGELOG.md) Helia API changelog\n- [`/packages/interop`](./packages/interop/CHANGELOG.md) Interop tests changelog\n- [`/packages/ipns`](./packages/ipns/CHANGELOG.md) `@helia/ipns` changelog\n- [`/packages/json`](./packages/json/CHANGELOG.md) `@helia/json` changelog\n- [`/packages/mfs`](./packages/mfs/CHANGELOG.md) `@helia/mfs` changelog\n- [`/packages/routers`](./packages/routers/CHANGELOG.md) `@helia/routers` changelog\n- [`/packages/strings`](./packages/strings/CHANGELOG.md) `@helia/strings` changelog\n- [`/packages/unixfs`](./packages/unixfs/CHANGELOG.md) `@helia/unixfs` changelog\n- [`/packages/utils`](./packages/utils/CHANGELOG.md) `@helia/utils` changelog\n```\n\n----------------------------------------\n\nTITLE: Documenting Project Status and Metadata in Markdown\nDESCRIPTION: A code block containing project metadata including creation date, last update date, current status, and a note about where to provide feedback on the roadmap.\nSOURCE: https://github.com/ipfs/helia/blob/main/ROADMAP.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nCreated: 2022-10-26\nUpdated: 2023-03-07\nStatus: Draft\nNotes: Maintainers have aligned on this roadmap. Please add any feedback or questions in:\nhttps://github.com/ipfs/helia/issues/5\n```\n\n----------------------------------------\n\nTITLE: Referencing IPFS Community Code of Conduct in Markdown\nDESCRIPTION: This snippet uses Markdown syntax to create a hyperlink to the IPFS Community Code of Conduct document on GitHub. It informs contributors that this project follows the community-wide code of conduct.\nSOURCE: https://github.com/ipfs/helia/blob/main/CODE_OF_CONDUCT.md#2025-04-21_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n[`IPFS Community Code of Conduct`](https://github.com/ipfs/community/blob/master/code-of-conduct.md)\n```\n\n----------------------------------------\n\nTITLE: Installing Helia Bitswap via NPM\nDESCRIPTION: Command to install the @helia/bitswap package using NPM. This will add the package to your project dependencies.\nSOURCE: https://github.com/ipfs/helia/blob/main/packages/bitswap/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm i @helia/bitswap\n```\n\n----------------------------------------\n\nTITLE: Installing @helia/interop package using npm\nDESCRIPTION: This snippet shows how to install the @helia/interop package using npm. It's a prerequisite for running the interoperability tests.\nSOURCE: https://github.com/ipfs/helia/blob/main/packages/interop/README.md#2025-04-21_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ npm i @helia/interop\n```"
  }
]