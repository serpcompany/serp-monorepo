[
  {
    "owner": "googleapis",
    "repo": "python-firestore",
    "content": "TITLE: Cloning the python-firestore repository using Git\nDESCRIPTION: This snippet demonstrates how to clone a forked python-firestore repository from a GitHub account to a local computer.  It includes steps for setting up remotes to pull changes from the upstream googleapis repository and merging those changes into the local main branch. This allows contributors to stay synchronized with the official repository while working on their contributions.\nSOURCE: https://github.com/googleapis/python-firestore/blob/main/CONTRIBUTING.rst#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ cd ${HOME}\n$ git clone git@github.com:USERNAME/python-firestore.git hack-on-python-firestore\n$ cd hack-on-python-firestore\n# Configure remotes such that you can pull changes from the googleapis/python-firestore\n# repository into your local repository.\n$ git remote add upstream git@github.com:googleapis/python-firestore.git\n# fetch and merge changes from upstream into main\n$ git fetch upstream\n$ git merge upstream/main\n```\n\n----------------------------------------\n\nTITLE: Firestore Method Definition After 2.0.0\nDESCRIPTION: This code snippet demonstrates how a method in the `google-cloud-firestore` library is defined in version 2.0.0 and later. All methods now have a single positional parameter `request`, and other parameters are keyword-only. The request parameter and flattened keyword parameters for the API are mutually exclusive. Passing both will result in an error.\nSOURCE: https://github.com/googleapis/python-firestore/blob/main/docs/UPGRADING.md#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndef a_method(\n    self,\n    request: RequestType = None,\n    *\n    param1,\n    param2,\n    param3,\n    retry=google.api_core.gapic_v1.method.DEFAULT,\n    timeout=google.api_core.gapic_v1.method.DEFAULT,\n    metadata=None,\n):\n```\n\n----------------------------------------\n\nTITLE: Configuring logging handler for a specific Google module (Python)\nDESCRIPTION: This snippet demonstrates how to configure a handler for a specific Google module (e.g., library_v1) using Python's standard logging mechanism. It imports the logging module, gets the logger for the specified module, adds a StreamHandler, and sets the logging level to DEBUG.  It requires the `google.cloud.library_v1` library.\nSOURCE: https://github.com/googleapis/python-firestore/blob/main/docs/README.rst#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport logging\n\nfrom google.cloud import library_v1\n\nbase_logger = logging.getLogger(\"google.cloud.library_v1\")\nbase_logger.addHandler(logging.StreamHandler())\nbase_logger.setLevel(logging.DEBUG)\n```\n\n----------------------------------------\n\nTITLE: Configuring logging handler for all Google-based loggers (Python)\nDESCRIPTION: This snippet demonstrates how to configure a handler for all Google-based loggers using Python's standard logging mechanism. It imports the logging module, gets the 'google' logger, adds a StreamHandler, and sets the logging level to DEBUG.  It requires the `google.cloud.library_v1` library.\nSOURCE: https://github.com/googleapis/python-firestore/blob/main/docs/README.rst#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport logging\n\nfrom google.cloud import library_v1\n\nbase_logger = logging.getLogger(\"google\")\nbase_logger.addHandler(logging.StreamHandler())\nbase_logger.setLevel(logging.DEBUG)\n```\n\n----------------------------------------\n\nTITLE: Running fixup scripts for Firestore\nDESCRIPTION: These commands execute scripts to automatically fix keyword arguments in Firestore code.  They take an input directory containing the code to convert and an empty output directory where the modified code will be placed. The scripts are designed to update code for compatibility with version 2.0.0 of the library.\nSOURCE: https://github.com/googleapis/python-firestore/blob/main/UPGRADING.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ fixup_firestore_v1_keywords.py --input-directory .samples/ --output-directory samples/\n$ fixup_firestore_admin_v1_keywords.py --input-directory .samples/ --output-directory samples/\n```\n\n----------------------------------------\n\nTITLE: Configuring Google Logging Handler for Specific Module (Code-Based)\nDESCRIPTION: This snippet demonstrates how to configure a logging handler for a specific Google module (e.g., `google.cloud.library_v1`) using Python's standard `logging` module. It creates a logger named \"google.cloud.library_v1\", adds a stream handler and sets the logging level to DEBUG.\nSOURCE: https://github.com/googleapis/python-firestore/blob/main/README.rst#_snippet_5\n\nLANGUAGE: Python\nCODE:\n```\nimport logging\n\nfrom google.cloud import library_v1\n\nbase_logger = logging.getLogger(\"google.cloud.library_v1\")\nbase_logger.addHandler(logging.StreamHandler())\nbase_logger.setLevel(logging.DEBUG)\n```\n\n----------------------------------------\n\nTITLE: Valid Firestore Method Calls\nDESCRIPTION: These code snippets show two valid ways to call a method in the `google-cloud-firestore` library after version 2.0.0. The first example passes all parameters within a `request` dictionary. The second example uses keyword arguments for each parameter.\nSOURCE: https://github.com/googleapis/python-firestore/blob/main/docs/UPGRADING.md#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nresponse = client.a_method(\n    request={\n        \"param1\": param1,\n        \"param2\": param2,\n        \"param3\": param3\n    }\n)\n```\n\nLANGUAGE: python\nCODE:\n```\nresponse = client.a_method(\n    param1=param1,\n    param2=param2,\n    param3=param3\n)\n```\n\n----------------------------------------\n\nTITLE: Run Firestore Keyword Fixup Scripts\nDESCRIPTION: These commands execute Python scripts that help automate the process of updating Firestore code to be compatible with version 2.0.0. The scripts take an input directory containing the code to be converted and an empty output directory where the converted code will be placed.\nSOURCE: https://github.com/googleapis/python-firestore/blob/main/docs/UPGRADING.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ fixup_firestore_v1_keywords.py --input-directory .samples/ --output-directory samples/\n$ fixup_firestore_admin_v1_keywords.py --input-directory .samples/ --output-directory samples/\n```\n\n----------------------------------------\n\nTITLE: Method definition after Firestore 2.0.0\nDESCRIPTION: This code represents a sample method definition in google-cloud-firestore version 2.0.0. It introduces a single positional parameter named request and keyword-only parameters. The `request` parameter and flattened keyword parameters are mutually exclusive.\nSOURCE: https://github.com/googleapis/python-firestore/blob/main/UPGRADING.md#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndef a_method(\n    self,\n    request: RequestType = None,\n    *\n    param1,\n    param2,\n    param3,\n    retry=google.api_core.gapic_v1.method.DEFAULT,\n    timeout=google.api_core.gapic_v1.method.DEFAULT,\n    metadata=None,\n):\n```\n\n----------------------------------------\n\nTITLE: Configuring Google Logging Handler (Code-Based)\nDESCRIPTION: This snippet demonstrates how to configure a logging handler for all Google-based loggers using Python's standard `logging` module.  It creates a logger named \"google\", adds a stream handler and sets the logging level to DEBUG.\nSOURCE: https://github.com/googleapis/python-firestore/blob/main/README.rst#_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\nimport logging\n\nfrom google.cloud import library_v1\n\nbase_logger = logging.getLogger(\"google\")\nbase_logger.addHandler(logging.StreamHandler())\nbase_logger.setLevel(logging.DEBUG)\n```\n\n----------------------------------------\n\nTITLE: Method definition before Firestore 2.0.0\nDESCRIPTION: This code shows a sample method definition in google-cloud-firestore before version 2.0.0.  It illustrates the use of positional parameters for required arguments and keyword parameters for optional ones. The retry, timeout, and metadata parameters are optional.\nSOURCE: https://github.com/googleapis/python-firestore/blob/main/UPGRADING.md#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ndef a_method(\n    self,\n    param1,\n    param2,\n    param3,\n    retry=google.api_core.gapic_v1.method.DEFAULT,\n    timeout=google.api_core.gapic_v1.method.DEFAULT,\n    metadata=None,\n):\n```\n\n----------------------------------------\n\nTITLE: Setting environment variables for faster linting\nDESCRIPTION: This snippet demonstrates how to set environment variables to speed up the linting process.  GOOGLE_CLOUD_TESTING_REMOTE specifies the location of the upstream repository, and GOOGLE_CLOUD_TESTING_BRANCH specifies the default branch.  These optimizations are intended to make the linting process more efficient.\nSOURCE: https://github.com/googleapis/python-firestore/blob/main/CONTRIBUTING.rst#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nexport GOOGLE_CLOUD_TESTING_REMOTE=\"upstream\"\nexport GOOGLE_CLOUD_TESTING_BRANCH=\"main\"\n```\n\n----------------------------------------\n\nTITLE: Valid method call using request parameter\nDESCRIPTION: This shows a valid way of calling a method in google-cloud-firestore 2.0.0. The parameters are passed as a dictionary within the `request` parameter.  All required and optional parameters should be inside the dictionary.\nSOURCE: https://github.com/googleapis/python-firestore/blob/main/UPGRADING.md#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nresponse = client.a_method(\n    request={\n        \"param1\": param1,\n        \"param2\": param2,\n        \"param3\": param3\n    }\n)\n```\n\n----------------------------------------\n\nTITLE: Firestore Method Definition Before 2.0.0\nDESCRIPTION: This code snippet illustrates how a method in the `google-cloud-firestore` library was defined before version 2.0.0. Required parameters were positional arguments, while optional parameters were passed as keyword arguments.\nSOURCE: https://github.com/googleapis/python-firestore/blob/main/docs/UPGRADING.md#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ndef a_method(\n    self,\n    param1,\n    param2,\n    param3,\n    retry=google.api_core.gapic_v1.method.DEFAULT,\n    timeout=google.api_core.gapic_v1.method.DEFAULT,\n    metadata=None,\n):\n```\n\n----------------------------------------\n\nTITLE: Enabling Logging Handler for a Specific Google Module\nDESCRIPTION: This snippet demonstrates how to enable the default logging handler for a specific Google module (e.g., `google.cloud.library_v1`) by setting the `GOOGLE_SDK_PYTHON_LOGGING_SCOPE` environment variable. This configuration will capture logs at the DEBUG level or higher.\nSOURCE: https://github.com/googleapis/python-firestore/blob/main/README.rst#_snippet_3\n\nLANGUAGE: Console\nCODE:\n```\nexport GOOGLE_SDK_PYTHON_LOGGING_SCOPE=google.cloud.library_v1\n```\n\n----------------------------------------\n\nTITLE: Running unit tests with Nox\nDESCRIPTION: This snippet shows how to execute unit tests using the nox tool.  It provides commands to run all unit tests and to run a specific unit test by name. The tests are defined in the noxfile.py file within each directory. Requires nox to be installed.\nSOURCE: https://github.com/googleapis/python-firestore/blob/main/CONTRIBUTING.rst#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ nox -s unit\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ nox -s unit-3.13 -- -k <name of test>\n```\n\n----------------------------------------\n\nTITLE: Installing PyAudio with custom build options\nDESCRIPTION: This command installs the PyAudio Python package while specifying custom include and library paths for PortAudio. This is useful when the standard installation process fails to locate the PortAudio header files.\nSOURCE: https://github.com/googleapis/python-firestore/blob/main/scripts/readme-gen/templates/install_portaudio.tmpl.rst#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npip install --global-option='build_ext' \\\n    --global-option='-I/usr/local/include' \\\n    --global-option='-L/usr/local/lib' \\\n    pyaudio\n```\n\n----------------------------------------\n\nTITLE: Running sample tests with Nox\nDESCRIPTION: This snippet shows how to execute sample tests in a specific folder using the nox tool. It provides commands to run all tests in a folder and to run a specific test by name.  Sample tests also require configuration similar to System Tests.\nSOURCE: https://github.com/googleapis/python-firestore/blob/main/CONTRIBUTING.rst#_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\n# Run all tests in a folder\n$ cd samples/snippets\n$ nox -s py-3.8\n```\n\nLANGUAGE: bash\nCODE:\n```\n# Run a single sample test\n$ cd samples/snippets\n$ nox -s py-3.8 -- -k <name of test>\n```\n\n----------------------------------------\n\nTITLE: Enabling Default Google Logging Handler\nDESCRIPTION: This snippet demonstrates how to enable the default logging handler for all Google-based loggers by setting the `GOOGLE_SDK_PYTHON_LOGGING_SCOPE` environment variable.  This configuration will capture logs at the DEBUG level or higher.\nSOURCE: https://github.com/googleapis/python-firestore/blob/main/README.rst#_snippet_2\n\nLANGUAGE: Console\nCODE:\n```\nexport GOOGLE_SDK_PYTHON_LOGGING_SCOPE=google\n```\n\n----------------------------------------\n\nTITLE: Running linting checks with Nox\nDESCRIPTION: This snippet demonstrates how to run linting checks on the codebase using a nox session. This verifies that the code complies with PEP8 standards (with exceptions defined in the linter configuration). Requires nox to be installed and configured.\nSOURCE: https://github.com/googleapis/python-firestore/blob/main/CONTRIBUTING.rst#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ nox -s lint\n```\n\n----------------------------------------\n\nTITLE: Running system tests with Nox\nDESCRIPTION: This snippet shows how to execute system tests using the nox tool. It provides commands to run all system tests and to run a specific system test by name.  System tests require additional configuration, including authentication settings and project configuration.\nSOURCE: https://github.com/googleapis/python-firestore/blob/main/CONTRIBUTING.rst#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n# Run all system tests\n$ nox -s system\n```\n\nLANGUAGE: bash\nCODE:\n```\n# Run a single system test\n$ nox -s system-3.7 -- -k <name of test>\n```\n\n----------------------------------------\n\nTITLE: Accessing Enums After 2.0.0\nDESCRIPTION: This code snippet demonstrates how to access enums in the `google-cloud-firestore` library in version 2.0.0 and later, now located within the `types` submodule, as the `enums` submodule has been removed.\nSOURCE: https://github.com/googleapis/python-firestore/blob/main/docs/UPGRADING.md#_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom google.cloud import firestore_v1\n\ndirection = firestore_v1.types.StructuredQuery.Direction.ASCENDING\n```\n\n----------------------------------------\n\nTITLE: Creating a Python Virtual Environment (Mac/Linux)\nDESCRIPTION: This snippet demonstrates how to create a Python virtual environment on macOS or Linux using `venv`, activate it, and install the `google-cloud-firestore` package. This isolates project dependencies.\nSOURCE: https://github.com/googleapis/python-firestore/blob/main/README.rst#_snippet_0\n\nLANGUAGE: Console\nCODE:\n```\npython3 -m venv <your-env>\nsource <your-env>/bin/activate\npip install google-cloud-firestore\n```\n\n----------------------------------------\n\nTITLE: Accessing enums after Firestore 2.0.0\nDESCRIPTION: This code demonstrates how to access enums in google-cloud-firestore version 2.0.0 and later. The `enums` submodule has been removed, and enums are now accessed via the `types` submodule.\nSOURCE: https://github.com/googleapis/python-firestore/blob/main/UPGRADING.md#_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom google.cloud import firestore_v1\n\ndirection = firestore_v1.types.StructuredQuery.Direction.ASCENDING\n```\n\n----------------------------------------\n\nTITLE: Creating a Python Virtual Environment (Windows)\nDESCRIPTION: This snippet demonstrates how to create a Python virtual environment on Windows using `venv`, activate it, and install the `google-cloud-firestore` package. This isolates project dependencies.\nSOURCE: https://github.com/googleapis/python-firestore/blob/main/README.rst#_snippet_1\n\nLANGUAGE: Console\nCODE:\n```\npy -m venv <your-env>\n.\\<your-env>\\Scripts\\activate\npip install google-cloud-firestore\n```\n\n----------------------------------------\n\nTITLE: Invalid method call mixing request and keyword\nDESCRIPTION: This code shows an invalid attempt to call a method in google-cloud-firestore 2.0.0 by mixing the request parameter with a keyword parameter. Mixing the `request` parameter with keyword arguments will result in an error.\nSOURCE: https://github.com/googleapis/python-firestore/blob/main/UPGRADING.md#_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nresponse = client.a_method(\n    request={\n        \"param1\": param1,\n        \"param2\": param2\n    },\n    param2=param2\n)\n```\n\n----------------------------------------\n\nTITLE: Invalid Firestore Method Call\nDESCRIPTION: This code snippet illustrates an invalid method call in `google-cloud-firestore` version 2.0.0 and later. It is invalid because it attempts to mix the `request` parameter with individual keyword arguments.\nSOURCE: https://github.com/googleapis/python-firestore/blob/main/docs/UPGRADING.md#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nresponse = client.a_method(\n    request={\n        \"param1\": param1,\n        \"param2\": param2\n    },\n    param2=param2\n)\n```\n\n----------------------------------------\n\nTITLE: Getting Help for Firestore Sample\nDESCRIPTION: This code snippet shows how to get help information for a Firestore sample, assuming the sample has a help function accessible via command line arguments. It's included conditionally based on `sample.show_help`.\nSOURCE: https://github.com/googleapis/python-firestore/blob/main/scripts/readme-gen/templates/README.tmpl.rst#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n{{get_help(sample.file)|indent}}\n```\n\n----------------------------------------\n\nTITLE: Valid method call using keyword parameters\nDESCRIPTION: This code demonstrates a valid approach to call a method in google-cloud-firestore 2.0.0. It utilizes flattened keyword parameters. This method is mutually exclusive with the request parameter approach.\nSOURCE: https://github.com/googleapis/python-firestore/blob/main/UPGRADING.md#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nresponse = client.a_method(\n    param1=param1,\n    param2=param2,\n    param3=param3\n)\n```\n\n----------------------------------------\n\nTITLE: Enabling a specific Google module using environment variable\nDESCRIPTION: This snippet shows how to enable the default handler for a specific Google module (e.g., library_v1) by setting the GOOGLE_SDK_PYTHON_LOGGING_SCOPE environment variable.\nSOURCE: https://github.com/googleapis/python-firestore/blob/main/docs/README.rst#_snippet_3\n\nLANGUAGE: console\nCODE:\n```\nexport GOOGLE_SDK_PYTHON_LOGGING_SCOPE=google.cloud.library_v1\n```\n\n----------------------------------------\n\nTITLE: Running black code formatter with Nox\nDESCRIPTION: This snippet shows how to run the black code formatter using a nox session.  The blacken session automatically formats the code to adhere to a consistent style. Requires nox to be installed and configured.\nSOURCE: https://github.com/googleapis/python-firestore/blob/main/CONTRIBUTING.rst#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ nox -s blacken\n```\n\n----------------------------------------\n\nTITLE: Installing python-dev\nDESCRIPTION: This command demonstrates how to install the python-dev package on Debian/Ubuntu systems, which is required if the error mentions Python.h not being found. It uses the apt-get package manager with sudo privileges.\nSOURCE: https://github.com/googleapis/python-firestore/blob/main/CONTRIBUTING.rst#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ sudo apt-get install python-dev\n```\n\n----------------------------------------\n\nTITLE: Creating a virtual environment (Mac/Linux)\nDESCRIPTION: This snippet shows how to create and activate a virtual environment in Mac/Linux using venv and then install the google-cloud-firestore library using pip.\nSOURCE: https://github.com/googleapis/python-firestore/blob/main/docs/README.rst#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\npython3 -m venv <your-env>\nsource <your-env>/bin/activate\npip install google-cloud-firestore\n```\n\n----------------------------------------\n\nTITLE: Creating a virtual environment (Windows)\nDESCRIPTION: This snippet shows how to create and activate a virtual environment in Windows using venv and then install the google-cloud-firestore library using pip.\nSOURCE: https://github.com/googleapis/python-firestore/blob/main/docs/README.rst#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\npy -m venv <your-env>\n.\\<your-env>\\Scripts\\activate\npip install google-cloud-firestore\n```\n\n----------------------------------------\n\nTITLE: Installing google-cloud-firestore\nDESCRIPTION: This command installs the google-cloud-firestore library using pip. It's a prerequisite for using the library and its functionalities. It ensures that all necessary dependencies are available.\nSOURCE: https://github.com/googleapis/python-firestore/blob/main/UPGRADING.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\npython3 -m pip install google-cloud-firestore\n```\n\n----------------------------------------\n\nTITLE: Installing PortAudio and Python development tools on Debian/Ubuntu\nDESCRIPTION: This command installs the PortAudio development package and the Python development headers on Debian or Ubuntu Linux. These packages are required to build and use PyAudio with PortAudio support.\nSOURCE: https://github.com/googleapis/python-firestore/blob/main/scripts/readme-gen/templates/install_portaudio.tmpl.rst#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\napt-get install portaudio19-dev python-all-dev\n```\n\n----------------------------------------\n\nTITLE: Running Firestore Sample with Python\nDESCRIPTION: This code snippet shows how to execute a Firestore sample using the Python interpreter. It assumes that the sample file is located in the current directory and that the necessary dependencies are installed.\nSOURCE: https://github.com/googleapis/python-firestore/blob/main/scripts/readme-gen/templates/README.tmpl.rst#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npython {{sample.file}}\n```\n\n----------------------------------------\n\nTITLE: Checking code coverage with Nox\nDESCRIPTION: This snippet demonstrates how to check the code coverage of the tests using a nox session.  It is crucial that the codebase maintains 100% test statement coverage after each commit.\nSOURCE: https://github.com/googleapis/python-firestore/blob/main/CONTRIBUTING.rst#_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n$ nox -s cover\n```\n\n----------------------------------------\n\nTITLE: Enabling Google-based loggers using environment variable\nDESCRIPTION: This snippet shows how to enable the default handler for all Google-based loggers by setting the GOOGLE_SDK_PYTHON_LOGGING_SCOPE environment variable.\nSOURCE: https://github.com/googleapis/python-firestore/blob/main/docs/README.rst#_snippet_2\n\nLANGUAGE: console\nCODE:\n```\nexport GOOGLE_SDK_PYTHON_LOGGING_SCOPE=google\n```\n\n----------------------------------------\n\nTITLE: Installing pre-commit hooks\nDESCRIPTION: This snippet shows how to install pre-commit hooks to automate linting checks during a commit.  Requires the pre-commit tool to be installed on the system.  The hooks enforce linting rules before a commit is allowed.\nSOURCE: https://github.com/googleapis/python-firestore/blob/main/CONTRIBUTING.rst#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$ pre-commit install\n```\n\n----------------------------------------\n\nTITLE: Installing Python Dependencies\nDESCRIPTION: Installs the Python dependencies listed in the 'requirements.txt' file using pip. This ensures that all necessary libraries are available for the samples to run.\nSOURCE: https://github.com/googleapis/python-firestore/blob/main/scripts/readme-gen/templates/install_deps.tmpl.rst#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ pip install -r requirements.txt\n```\n\n----------------------------------------\n\nTITLE: Updating Conformance Tests\nDESCRIPTION: This snippet shows how to update the copy of conformance tests used by the repository using a Makefile. This ensures that the tests are up-to-date with the latest standards.\nSOURCE: https://github.com/googleapis/python-firestore/blob/main/CONTRIBUTING.rst#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n$ make -f Makefile_v1\n```\n\n----------------------------------------\n\nTITLE: Accessing Enums Before 2.0.0\nDESCRIPTION: This code snippet demonstrates how to access enums in the `google-cloud-firestore` library before version 2.0.0, using the `enums` submodule.\nSOURCE: https://github.com/googleapis/python-firestore/blob/main/docs/UPGRADING.md#_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom google.cloud import firestore_v1\n\ndirection = firestore_v1.enums.StructuredQuery.Direction.ASCENDING\n```\n\n----------------------------------------\n\nTITLE: Creating and Activating Virtualenv\nDESCRIPTION: Creates a virtual environment named 'env' and activates it. This isolates the project dependencies from the system-wide Python installation.\nSOURCE: https://github.com/googleapis/python-firestore/blob/main/scripts/readme-gen/templates/install_deps.tmpl.rst#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ virtualenv env\n$ source env/bin/activate\n```\n\n----------------------------------------\n\nTITLE: Accessing enums before Firestore 2.0.0\nDESCRIPTION: This code shows how to access enums in google-cloud-firestore before version 2.0.0. Enums were previously located in the `enums` submodule.\nSOURCE: https://github.com/googleapis/python-firestore/blob/main/UPGRADING.md#_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom google.cloud import firestore_v1\n\ndirection = firestore_v1.enums.StructuredQuery.Direction.ASCENDING\n```\n\n----------------------------------------\n\nTITLE: Cloning Python Docs Samples\nDESCRIPTION: Clones the python-docs-samples repository from GitHub using git. This provides the source code for the Firestore Python samples.\nSOURCE: https://github.com/googleapis/python-firestore/blob/main/scripts/readme-gen/templates/install_deps.tmpl.rst#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ git clone https://github.com/GoogleCloudPlatform/python-docs-samples.git\n```\n\n----------------------------------------\n\nTITLE: Installing PortAudio on macOS using Homebrew\nDESCRIPTION: This command installs the PortAudio library on macOS using the Homebrew package manager. Homebrew simplifies the installation process by automatically handling dependencies and configuration.\nSOURCE: https://github.com/googleapis/python-firestore/blob/main/scripts/readme-gen/templates/install_portaudio.tmpl.rst#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nbrew install portaudio\n```\n\n----------------------------------------\n\nTITLE: Install google-cloud-firestore\nDESCRIPTION: This command installs the google-cloud-firestore library using pip, the Python package installer. This is a prerequisite for using the Firestore client library in a Python project.\nSOURCE: https://github.com/googleapis/python-firestore/blob/main/docs/UPGRADING.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\npython3 -m pip install google-cloud-firestore\n```\n\n----------------------------------------\n\nTITLE: Building HTML documentation with Nox\nDESCRIPTION: This snippet demonstrates how to build the HTML documentation using a nox session. This command generates the documentation for the project.\nSOURCE: https://github.com/googleapis/python-firestore/blob/main/CONTRIBUTING.rst#_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\n$ nox -s docs\n```"
  }
]